; ModuleID = 'gzip.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { i8*, i32, i32*, i32 }
%struct.tree_desc = type { %struct.ct_data*, %struct.ct_data*, i32*, i32, i32, i32, i32 }
%struct.ct_data = type { %union.anon.0, %union.anon.0 }
%union.anon.0 = type { i16 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.config = type { i16, i16, i16, i16 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.huft = type { i8, i8, %union.anon }
%union.anon = type { %struct.huft* }
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__dirstream = type opaque

@read_buf = common dso_local global i32 (i8*, i32)* null, align 8, !dbg !0, !ctir !146
@outcnt = common dso_local global i32 0, align 4, !dbg !610, !ctir !6
@window_size = dso_local global i64 65536, align 8, !dbg !413, !ctir !51
@good_match = common dso_local global i32 0, align 4, !dbg !509, !ctir !6
@nice_match = common dso_local global i32 0, align 4, !dbg !515, !ctir !12
@max_chain_length = common dso_local global i32 0, align 4, !dbg !503, !ctir !6
@strstart = common dso_local global i32 0, align 4, !dbg !495, !ctir !6
@block_start = common dso_local global i64 0, align 8, !dbg !489, !ctir !22
@prev_length = common dso_local global i32 0, align 4, !dbg !493, !ctir !6
@match_start = common dso_local global i32 0, align 4, !dbg !497, !ctir !6
@rsync = dso_local global i32 0, align 4, !dbg !457, !ctir !12
@optind = dso_local global i32 1, align 4, !dbg !415, !ctir !12
@opterr = dso_local global i32 1, align 4, !dbg !417, !ctir !12
@optopt = dso_local global i32 63, align 4, !dbg !419, !ctir !12
@optarg = common dso_local global i8* null, align 8, !dbg !517, !ctir !19
@__getopt_initialized = common dso_local global i32 0, align 4, !dbg !519, !ctir !12
@ascii = dso_local global i32 0, align 4, !dbg !421, !ctir !12
@to_stdout = dso_local global i32 0, align 4, !dbg !423, !ctir !12
@decompress = dso_local global i32 0, align 4, !dbg !425, !ctir !12
@force = dso_local global i32 0, align 4, !dbg !427, !ctir !12
@no_name = dso_local global i32 -1, align 4, !dbg !429, !ctir !12
@no_time = dso_local global i32 -1, align 4, !dbg !431, !ctir !12
@recursive = dso_local global i32 0, align 4, !dbg !433, !ctir !12
@list = dso_local global i32 0, align 4, !dbg !435, !ctir !12
@verbose = dso_local global i32 0, align 4, !dbg !437, !ctir !12
@quiet = dso_local global i32 0, align 4, !dbg !439, !ctir !12
@do_lzw = dso_local global i32 0, align 4, !dbg !441, !ctir !12
@test = dso_local global i32 0, align 4, !dbg !443, !ctir !12
@maxbits = dso_local global i32 16, align 4, !dbg !445, !ctir !12
@method = dso_local global i32 8, align 4, !dbg !447, !ctir !12
@level = dso_local global i32 6, align 4, !dbg !449, !ctir !12
@exit_code = dso_local global i32 0, align 4, !dbg !451, !ctir !12
@args = dso_local global i8** null, align 8, !dbg !453, !ctir !23
@remove_ofname = dso_local global i32 0, align 4, !dbg !455, !ctir !12
@longopts = dso_local global [25 x %struct.option] [%struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i32 0, i32* null, i32 102 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 1, i32* null, i32 83 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.30, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 49 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 57 }, %struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i32 1, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option zeroinitializer], align 16, !dbg !459, !ctir !196
@.str.14 = private unnamed_addr constant [6 x i8] c"ascii\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"to-stdout\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"decompress\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"uncompress\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"license\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"no-name\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"silent\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"suffix\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"no-time\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"best\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"lzw\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"rsyncable\00", align 1
@work = dso_local global i32 (i32, i32)* @zip, align 8, !dbg !461, !ctir !199
@ifd = common dso_local global i32 0, align 4, !dbg !602, !ctir !12
@ofd = common dso_local global i32 0, align 4, !dbg !604, !ctir !12
@.str.79 = private unnamed_addr constant [3 x i8] c"\1F\8B\00", align 1
@outbuf = common dso_local global [18432 x i8] zeroinitializer, align 16, !dbg !533, !ctir !283
@save_orig_name = common dso_local global i32 0, align 4, !dbg !545, !ctir !12
@time_stamp = common dso_local global i64 0, align 8, !dbg !551, !ctir !142
@crc = internal global i64 0, align 8, !dbg !684, !ctir !51
@ifname = common dso_local global [1024 x i8] zeroinitializer, align 16, !dbg !569, !ctir !276
@header_bytes = common dso_local global i64 0, align 8, !dbg !686, !ctir !79
@bytes_in = common dso_local global i64 0, align 8, !dbg !561, !ctir !79
@compr_level = internal global i32 0, align 4, !dbg !507, !ctir !12
@lookahead = internal global i32 0, align 4, !dbg !501, !ctir !6
@ins_h = internal global i32 0, align 4, !dbg !491, !ctir !6
@window = common dso_local global [65536 x i8] zeroinitializer, align 16, !dbg !537, !ctir !234
@prev = common dso_local global [65536 x i16] zeroinitializer, align 16, !dbg !539, !ctir !282
@max_lazy_match = internal global i32 0, align 4, !dbg !505, !ctir !6
@rsync_chunk_end = internal global i64 0, align 8, !dbg !513, !ctir !51
@eofile = internal global i32 0, align 4, !dbg !499, !ctir !12
@flags = internal global i8 0, align 1, !dbg !644, !ctir !13
@last_flags = internal global i32 0, align 4, !dbg !642, !ctir !6
@flag_buf = internal global [4096 x i8] zeroinitializer, align 16, !dbg !636, !ctir !263
@file_type = common dso_local global i16* null, align 8, !dbg !656, !ctir !166
@l_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 0), i32* getelementptr inbounds ([29 x i32], [29 x i32]* @extra_lbits, i32 0, i32 0), i32 257, i32 286, i32 15, i32 0 }, align 8, !dbg !744, !ctir !68
@d_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 0), i32* getelementptr inbounds ([30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 0), i32 0, i32 30, i32 15, i32 0 }, align 8, !dbg !746, !ctir !68
@opt_len = internal global i64 0, align 8, !dbg !648, !ctir !51
@static_len = internal global i64 0, align 8, !dbg !650, !ctir !51
@input_len = internal global i64 0, align 8, !dbg !654, !ctir !79
@compressed_len = internal global i64 0, align 8, !dbg !652, !ctir !79
@.str.53 = private unnamed_addr constant [15 x i8] c"block vanished\00", align 1
@file_method = common dso_local global i32* null, align 8, !dbg !658, !ctir !33
@static_ltree = internal global [288 x %struct.ct_data] zeroinitializer, align 16, !dbg !622, !ctir !262
@static_dtree = internal global [30 x %struct.ct_data] zeroinitializer, align 16, !dbg !624, !ctir !250
@dyn_ltree = internal global [573 x %struct.ct_data] zeroinitializer, align 16, !dbg !618, !ctir !266
@dyn_dtree = internal global [61 x %struct.ct_data] zeroinitializer, align 16, !dbg !620, !ctir !269
@bi_valid = internal global i32 0, align 4, !dbg !487, !ctir !12
@bi_buf = internal global i16 0, align 2, !dbg !485, !ctir !16
@bl_tree = internal global [39 x %struct.ct_data] zeroinitializer, align 16, !dbg !734, !ctir !402
@last_dist = internal global i32 0, align 4, !dbg !640, !ctir !6
@last_lit = internal global i32 0, align 4, !dbg !638, !ctir !6
@flag_bit = internal global i8 0, align 1, !dbg !646, !ctir !13
@bl_order = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16, !dbg !752, !ctir !405
@inbuf = common dso_local global [32832 x i8] zeroinitializer, align 16, !dbg !531, !ctir !231
@length_code = internal global [256 x i8] zeroinitializer, align 16, !dbg !628, !ctir !254
@extra_lbits = internal global [29 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0], align 16, !dbg !730, !ctir !251
@base_length = internal global [29 x i32] zeroinitializer, align 16, !dbg !632, !ctir !251
@d_buf = common dso_local global [32768 x i16] zeroinitializer, align 16, !dbg !535, !ctir !272
@dist_code = internal global [512 x i8] zeroinitializer, align 16, !dbg !630, !ctir !258
@extra_dbits = internal global [30 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13], align 16, !dbg !732, !ctir !257
@base_dist = internal global [30 x i32] zeroinitializer, align 16, !dbg !634, !ctir !257
@stderr = external dso_local global %struct._IO_FILE*, align 8, !ctir !87
@progname = common dso_local global i8* null, align 8, !dbg !543, !ctir !19
@.str.73 = private unnamed_addr constant [13 x i8] c"\0A%s: %s: %s\0A\00", align 1
@do_exit.in_exit = internal global i32 0, align 4, !dbg !715
@env = common dso_local global i8* null, align 8, !dbg !555, !ctir !19
@ofname = common dso_local global [1024 x i8] zeroinitializer, align 16, !dbg !571, !ctir !276
@bl_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 0), %struct.ct_data* null, i32* getelementptr inbounds ([19 x i32], [19 x i32]* @extra_blbits, i32 0, i32 0), i32 0, i32 19, i32 7, i32 0 }, align 8, !dbg !748, !ctir !68
@extra_blbits = internal global [19 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 7], align 16, !dbg !750, !ctir !406
@heap_len = internal global i32 0, align 4, !dbg !736, !ctir !12
@heap_max = internal global i32 0, align 4, !dbg !738, !ctir !12
@heap = internal global [573 x i32] zeroinitializer, align 16, !dbg !740, !ctir !403
@depth = internal global [573 x i8] zeroinitializer, align 16, !dbg !742, !ctir !404
@bl_count = internal global [16 x i16] zeroinitializer, align 16, !dbg !626, !ctir !261
@.str.196 = private unnamed_addr constant [23 x i8] c"-l used on binary file\00", align 1
@.str.74 = private unnamed_addr constant [21 x i8] c"%s: %s: warning: %s\0A\00", align 1
@rsync_sum = internal global i64 0, align 8, !dbg !511, !ctir !51
@.str = private unnamed_addr constant [15 x i8] c"bad pack level\00", align 1
@configuration_table = internal global [10 x %struct.config] [%struct.config zeroinitializer, %struct.config { i16 4, i16 4, i16 8, i16 4 }, %struct.config { i16 4, i16 5, i16 16, i16 8 }, %struct.config { i16 4, i16 6, i16 32, i16 32 }, %struct.config { i16 4, i16 4, i16 16, i16 16 }, %struct.config { i16 8, i16 16, i16 32, i16 32 }, %struct.config { i16 8, i16 16, i16 128, i16 128 }, %struct.config { i16 8, i16 32, i16 128, i16 256 }, %struct.config { i16 32, i16 128, i16 258, i16 1024 }, %struct.config { i16 32, i16 258, i16 258, i16 4096 }], align 16, !dbg !688, !ctir !156
@zfile = internal global i32 0, align 4, !dbg !483, !ctir !145
@.str.75 = private unnamed_addr constant [6 x i8] c"\0A%s: \00", align 1
@.str.76 = private unnamed_addr constant [28 x i8] c"%s: unexpected end of file\0A\00", align 1
@updcrc.crc = internal global i64 4294967295, align 8, !dbg !475
@crc_32_tab = dso_local global [256 x i64] [i64 0, i64 1996959894, i64 3993919788, i64 2567524794, i64 124634137, i64 1886057615, i64 3915621685, i64 2657392035, i64 249268274, i64 2044508324, i64 3772115230, i64 2547177864, i64 162941995, i64 2125561021, i64 3887607047, i64 2428444049, i64 498536548, i64 1789927666, i64 4089016648, i64 2227061214, i64 450548861, i64 1843258603, i64 4107580753, i64 2211677639, i64 325883990, i64 1684777152, i64 4251122042, i64 2321926636, i64 335633487, i64 1661365465, i64 4195302755, i64 2366115317, i64 997073096, i64 1281953886, i64 3579855332, i64 2724688242, i64 1006888145, i64 1258607687, i64 3524101629, i64 2768942443, i64 901097722, i64 1119000684, i64 3686517206, i64 2898065728, i64 853044451, i64 1172266101, i64 3705015759, i64 2882616665, i64 651767980, i64 1373503546, i64 3369554304, i64 3218104598, i64 565507253, i64 1454621731, i64 3485111705, i64 3099436303, i64 671266974, i64 1594198024, i64 3322730930, i64 2970347812, i64 795835527, i64 1483230225, i64 3244367275, i64 3060149565, i64 1994146192, i64 31158534, i64 2563907772, i64 4023717930, i64 1907459465, i64 112637215, i64 2680153253, i64 3904427059, i64 2013776290, i64 251722036, i64 2517215374, i64 3775830040, i64 2137656763, i64 141376813, i64 2439277719, i64 3865271297, i64 1802195444, i64 476864866, i64 2238001368, i64 4066508878, i64 1812370925, i64 453092731, i64 2181625025, i64 4111451223, i64 1706088902, i64 314042704, i64 2344532202, i64 4240017532, i64 1658658271, i64 366619977, i64 2362670323, i64 4224994405, i64 1303535960, i64 984961486, i64 2747007092, i64 3569037538, i64 1256170817, i64 1037604311, i64 2765210733, i64 3554079995, i64 1131014506, i64 879679996, i64 2909243462, i64 3663771856, i64 1141124467, i64 855842277, i64 2852801631, i64 3708648649, i64 1342533948, i64 654459306, i64 3188396048, i64 3373015174, i64 1466479909, i64 544179635, i64 3110523913, i64 3462522015, i64 1591671054, i64 702138776, i64 2966460450, i64 3352799412, i64 1504918807, i64 783551873, i64 3082640443, i64 3233442989, i64 3988292384, i64 2596254646, i64 62317068, i64 1957810842, i64 3939845945, i64 2647816111, i64 81470997, i64 1943803523, i64 3814918930, i64 2489596804, i64 225274430, i64 2053790376, i64 3826175755, i64 2466906013, i64 167816743, i64 2097651377, i64 4027552580, i64 2265490386, i64 503444072, i64 1762050814, i64 4150417245, i64 2154129355, i64 426522225, i64 1852507879, i64 4275313526, i64 2312317920, i64 282753626, i64 1742555852, i64 4189708143, i64 2394877945, i64 397917763, i64 1622183637, i64 3604390888, i64 2714866558, i64 953729732, i64 1340076626, i64 3518719985, i64 2797360999, i64 1068828381, i64 1219638859, i64 3624741850, i64 2936675148, i64 906185462, i64 1090812512, i64 3747672003, i64 2825379669, i64 829329135, i64 1181335161, i64 3412177804, i64 3160834842, i64 628085408, i64 1382605366, i64 3423369109, i64 3138078467, i64 570562233, i64 1426400815, i64 3317316542, i64 2998733608, i64 733239954, i64 1555261956, i64 3268935591, i64 3050360625, i64 752459403, i64 1541320221, i64 2607071920, i64 3965973030, i64 1969922972, i64 40735498, i64 2617837225, i64 3943577151, i64 1913087877, i64 83908371, i64 2512341634, i64 3803740692, i64 2075208622, i64 213261112, i64 2463272603, i64 3855990285, i64 2094854071, i64 198958881, i64 2262029012, i64 4057260610, i64 1759359992, i64 534414190, i64 2176718541, i64 4139329115, i64 1873836001, i64 414664567, i64 2282248934, i64 4279200368, i64 1711684554, i64 285281116, i64 2405801727, i64 4167216745, i64 1634467795, i64 376229701, i64 2685067896, i64 3608007406, i64 1308918612, i64 956543938, i64 2808555105, i64 3495958263, i64 1231636301, i64 1047427035, i64 2932959818, i64 3654703836, i64 1088359270, i64 936918000, i64 2847714899, i64 3736837829, i64 1202900863, i64 817233897, i64 3183342108, i64 3401237130, i64 1404277552, i64 615818150, i64 3134207493, i64 3453421203, i64 1423857449, i64 601450431, i64 3009837614, i64 3294710456, i64 1567103746, i64 711928724, i64 3020668471, i64 3272380065, i64 1510334235, i64 755167117], align 16, !dbg !481, !ctir !322
@bytes_out = common dso_local global i64 0, align 8, !dbg !563, !ctir !79
@foreground = common dso_local global i32 0, align 4, !dbg !541, !ctir !12
@z_suffix = common dso_local global i8* null, align 8, !dbg !557, !ctir !19
@z_len = common dso_local global i64 0, align 8, !dbg !559, !ctir !134
@mask_bits = dso_local global [17 x i16] [i16 0, i16 1, i16 3, i16 7, i16 15, i16 31, i16 63, i16 127, i16 255, i16 511, i16 1023, i16 2047, i16 4095, i16 8191, i16 16383, i16 32767, i16 -1], align 16, !dbg !463, !ctir !220
@lbits = dso_local global i32 9, align 4, !dbg !465, !ctir !12
@dbits = dso_local global i32 6, align 4, !dbg !467, !ctir !12
@hufts = common dso_local global i32 0, align 4, !dbg !616, !ctir !6
@bb = common dso_local global i64 0, align 8, !dbg !612, !ctir !51
@bk = common dso_local global i32 0, align 4, !dbg !614, !ctir !6
@inptr = common dso_local global i32 0, align 4, !dbg !608, !ctir !6
@insize = common dso_local global i32 0, align 4, !dbg !606, !ctir !6
@block_mode = dso_local global i32 128, align 4, !dbg !469, !ctir !12
@pkzip = dso_local global i32 0, align 4, !dbg !471, !ctir !12
@ext_header = dso_local global i32 0, align 4, !dbg !473, !ctir !12
@decrypt = common dso_local global i32 0, align 4, !dbg !680, !ctir !12
@last_member = common dso_local global i32 0, align 4, !dbg !547, !ctir !12
@part_nb = common dso_local global i32 0, align 4, !dbg !549, !ctir !12
@ifile_size = common dso_local global i64 0, align 8, !dbg !553, !ctir !79
@total_in = common dso_local global i64 0, align 8, !dbg !565, !ctir !79
@total_out = common dso_local global i64 0, align 8, !dbg !567, !ctir !79
@istat = common dso_local global %struct.stat zeroinitializer, align 8, !dbg !573, !ctir !575
@key = common dso_local global i8* null, align 8, !dbg !682, !ctir !19
@nextchar = internal global i8* null, align 8, !dbg !521, !ctir !19
@last_nonopt = internal global i32 0, align 4, !dbg !529, !ctir !12
@first_nonopt = internal global i32 0, align 4, !dbg !527, !ctir !12
@ordering = internal global i32 0, align 4, !dbg !523, !ctir !5
@.str.1 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"%s: option `%s' is ambiguous\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"%s: option `--%s' doesn't allow an argument\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"%s: option `%c%s' doesn't allow an argument\0A\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"%s: option `%s' requires an argument\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"%s: unrecognized option `--%s'\0A\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"%s: unrecognized option `%c%s'\0A\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@posixly_correct = internal global i8* null, align 8, !dbg !525, !ctir !19
@.str.9 = private unnamed_addr constant [26 x i8] c"%s: illegal option -- %c\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"%s: invalid option -- %c\0A\00", align 1
@.str.11 = private unnamed_addr constant [39 x i8] c"%s: option requires an argument -- %c\0A\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"%s: option `-W %s' is ambiguous\0A\00", align 1
@.str.13 = private unnamed_addr constant [46 x i8] c"%s: option `-W %s' doesn't allow an argument\0A\00", align 1
@.str.83 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c".exe\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"GZIP\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"un\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"gun\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"cat\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"gzcat\00", align 1
@.str.44 = private unnamed_addr constant [4 x i8] c".gz\00", align 1
@.str.45 = private unnamed_addr constant [33 x i8] c"ab:cdfhH?lLmMnNqrS:tvVZ123456789\00", align 1
@.str.46 = private unnamed_addr constant [34 x i8] c"%s: -b operand is not an integer\0A\00", align 1
@.str.47 = private unnamed_addr constant [38 x i8] c"%s: -Z not supported in this version\0A\00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"%s: option --ascii ignored on this system\0A\00", align 1
@.str.49 = private unnamed_addr constant [27 x i8] c"%s: incorrect suffix '%s'\0A\00", align 1
@do_list.first_time = internal global i32 1, align 4, !dbg !708
@.str.187 = private unnamed_addr constant [29 x i8] c"method  crc     date  time  \00", align 1
@.str.188 = private unnamed_addr constant [38 x i8] c"%*.*s %*.*s  ratio uncompressed_name\0A\00", align 1
@.str.189 = private unnamed_addr constant [11 x i8] c"compressed\00", align 1
@.str.190 = private unnamed_addr constant [13 x i8] c"uncompressed\00", align 1
@.str.191 = private unnamed_addr constant [29 x i8] c"                            \00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8, !ctir !87
@.str.192 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.193 = private unnamed_addr constant [11 x i8] c" (totals)\0A\00", align 1
@do_list.methods = internal global [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.186, i32 0, i32 0)], align 16, !dbg !713
@.str.194 = private unnamed_addr constant [16 x i8] c"%5s %08lx %11s \00", align 1
@.str.195 = private unnamed_addr constant [5 x i8] c" %s\0A\00", align 1
@.str.182 = private unnamed_addr constant [6 x i8] c"store\00", align 1
@.str.183 = private unnamed_addr constant [6 x i8] c"compr\00", align 1
@.str.184 = private unnamed_addr constant [6 x i8] c"pack \00", align 1
@.str.185 = private unnamed_addr constant [6 x i8] c"lzh  \00", align 1
@.str.186 = private unnamed_addr constant [6 x i8] c"defla\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"%5.1f%%\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8, !ctir !87
@.str.126 = private unnamed_addr constant [10 x i8] c"read from\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"written to\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c"de\00", align 1
@.str.125 = private unnamed_addr constant [71 x i8] c"%s: compressed data not %s a terminal. Use -f to force %scompression.\0A\00", align 1
@.str.129 = private unnamed_addr constant [23 x i8] c"For help, type: %s -h\0A\00", align 1
@.str.130 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.131 = private unnamed_addr constant [15 x i8] c"standard input\00", align 1
@.str.132 = private unnamed_addr constant [5 x i8] c" OK\0A\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"\1F\9E\00", align 1
@.str.135 = private unnamed_addr constant [44 x i8] c"%s: %s: unknown method %d -- not supported\0A\00", align 1
@.str.136 = private unnamed_addr constant [38 x i8] c"%s: %s is encrypted -- not supported\0A\00", align 1
@.str.137 = private unnamed_addr constant [53 x i8] c"%s: %s is a a multi-part gzip file -- not supported\0A\00", align 1
@.str.138 = private unnamed_addr constant [40 x i8] c"%s: %s has flags 0x%x -- not supported\0A\00", align 1
@.str.139 = private unnamed_addr constant [24 x i8] c"%s: %s: part number %u\0A\00", align 1
@.str.140 = private unnamed_addr constant [41 x i8] c"%s: %s: extra field of %u bytes ignored\0A\00", align 1
@.str.141 = private unnamed_addr constant [39 x i8] c"corrupted input -- file name too large\00", align 1
@.str.142 = private unnamed_addr constant [5 x i8] c"PK\03\04\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"\1F\1E\00", align 1
@.str.144 = private unnamed_addr constant [3 x i8] c"\1F\9D\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"\1F\A0\00", align 1
@.str.146 = private unnamed_addr constant [29 x i8] c"\0A%s: %s: not in gzip format\0A\00", align 1
@.str.147 = private unnamed_addr constant [56 x i8] c"\0A%s: %s: decompression OK, trailing zero bytes ignored\0A\00", align 1
@.str.148 = private unnamed_addr constant [53 x i8] c"\0A%s: %s: decompression OK, trailing garbage ignored\0A\00", align 1
@done = internal global i32 0, align 4, !dbg !660, !ctir !12
@j = internal global i32 0, align 4, !dbg !762, !ctir !12
@decode.i = internal global i32 0, align 4, !dbg !764
@io_bitbuf = internal global i16 0, align 2, !dbg !754, !ctir !15
@pt_table = internal global [256 x i16] zeroinitializer, align 16, !dbg !771, !ctir !407
@pt_len = internal global [19 x i8] zeroinitializer, align 16, !dbg !769, !ctir !405
@bitcount = internal global i32 0, align 4, !dbg !758, !ctir !12
@subbitbuf = internal global i32 0, align 4, !dbg !756, !ctir !6
@blocksize = internal global i32 0, align 4, !dbg !760, !ctir !6
@.str.197 = private unnamed_addr constant [11 x i8] c"Bad table\0A\00", align 1
@.str.54 = private unnamed_addr constant [38 x i8] c"\0A%s: %s: warning, unknown flags 0x%x\0A\00", align 1
@.str.55 = private unnamed_addr constant [59 x i8] c"\0A%s: %s: compressed with %d bits, can only handle %d bits\0A\00", align 1
@.str.56 = private unnamed_addr constant [15 x i8] c"corrupt input.\00", align 1
@.str.57 = private unnamed_addr constant [46 x i8] c"corrupt input. Use zcat to recover some data.\00", align 1
@valid = internal global i32 0, align 4, !dbg !678, !ctir !12
@bitbuf = internal global i64 0, align 8, !dbg !676, !ctir !51
@peek_bits = internal global i32 0, align 4, !dbg !674, !ctir !12
@max_len = internal global i32 0, align 4, !dbg !664, !ctir !12
@leaves = internal global [26 x i32] zeroinitializer, align 16, !dbg !670, !ctir !286
@parents = internal global [26 x i32] zeroinitializer, align 16, !dbg !672, !ctir !286
@lit_base = internal global [26 x i32] zeroinitializer, align 16, !dbg !668, !ctir !286
@literal = internal global [256 x i8] zeroinitializer, align 16, !dbg !666, !ctir !254
@orig_len = internal global i64 0, align 8, !dbg !662, !ctir !51
@.str.58 = private unnamed_addr constant [38 x i8] c"invalid compressed data--length error\00", align 1
@.str.198 = private unnamed_addr constant [50 x i8] c"invalid compressed data -- Huffman code > 32 bits\00", align 1
@.str.199 = private unnamed_addr constant [32 x i8] c"too many leaves in Huffman tree\00", align 1
@.str.59 = private unnamed_addr constant [31 x i8] c"\0A%s: %s: not a valid zip file\0A\00", align 1
@.str.60 = private unnamed_addr constant [58 x i8] c"\0A%s: %s: first entry not deflated or stored -- use unzip\0A\00", align 1
@.str.61 = private unnamed_addr constant [38 x i8] c"\0A%s: %s: encrypted file -- use unzip\0A\00", align 1
@.str.62 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.63 = private unnamed_addr constant [41 x i8] c"invalid compressed data--format violated\00", align 1
@.str.64 = private unnamed_addr constant [18 x i8] c"len %ld, siz %ld\0A\00", align 1
@.str.65 = private unnamed_addr constant [41 x i8] c"invalid compressed data--length mismatch\00", align 1
@.str.66 = private unnamed_addr constant [31 x i8] c"internal error, invalid method\00", align 1
@.str.67 = private unnamed_addr constant [45 x i8] c"\0A%s: %s: invalid compressed data--crc error\0A\00", align 1
@.str.68 = private unnamed_addr constant [48 x i8] c"\0A%s: %s: invalid compressed data--length error\0A\00", align 1
@.str.69 = private unnamed_addr constant [46 x i8] c"%s: %s has more than one entry--rest ignored\0A\00", align 1
@.str.70 = private unnamed_addr constant [45 x i8] c"%s: %s has more than one entry -- unchanged\0A\00", align 1
@cplens = internal global [31 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 0, i16 0], align 16, !dbg !718, !ctir !237
@cplext = internal global [31 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 1, i16 1, i16 2, i16 2, i16 2, i16 2, i16 3, i16 3, i16 3, i16 3, i16 4, i16 4, i16 4, i16 4, i16 5, i16 5, i16 5, i16 5, i16 0, i16 99, i16 99], align 16, !dbg !720, !ctir !237
@cpdist = internal global [30 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577], align 16, !dbg !722, !ctir !240
@cpdext = internal global [30 x i16] [i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 2, i16 2, i16 3, i16 3, i16 4, i16 4, i16 5, i16 5, i16 6, i16 6, i16 7, i16 7, i16 8, i16 8, i16 9, i16 9, i16 10, i16 10, i16 11, i16 11, i16 12, i16 12, i16 13, i16 13], align 16, !dbg !724, !ctir !240
@border = internal global [19 x i32] [i32 16, i32 17, i32 18, i32 0, i32 8, i32 7, i32 9, i32 6, i32 10, i32 5, i32 11, i32 4, i32 12, i32 3, i32 13, i32 2, i32 14, i32 1, i32 15], align 16, !dbg !726, !ctir !244
@.str.50 = private unnamed_addr constant [26 x i8] c" incomplete literal tree\0A\00", align 1
@.str.51 = private unnamed_addr constant [27 x i8] c" incomplete distance tree\0A\00", align 1
@.str.133 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@.str.149 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.150 = private unnamed_addr constant [34 x i8] c"%s: %s is a directory -- ignored\0A\00", align 1
@.str.151 = private unnamed_addr constant [55 x i8] c"%s: %s is not a directory or a regular file - ignored\0A\00", align 1
@.str.152 = private unnamed_addr constant [42 x i8] c"%s: %s has %lu other link%c -- unchanged\0A\00", align 1
@.str.153 = private unnamed_addr constant [25 x i8] c"%s: %s compressed to %s\0A\00", align 1
@.str.154 = private unnamed_addr constant [5 x i8] c"%s:\09\00", align 1
@.str.155 = private unnamed_addr constant [4 x i8] c" OK\00", align 1
@.str.156 = private unnamed_addr constant [21 x i8] c" -- replaced with %s\00", align 1
@.str.181 = private unnamed_addr constant [25 x i8] c"%s: time stamp restored\0A\00", align 1
@.str.172 = private unnamed_addr constant [33 x i8] c"%s: %s: warning, name truncated\0A\00", align 1
@.str.178 = private unnamed_addr constant [15 x i8] c"name too short\00", align 1
@.str.179 = private unnamed_addr constant [22 x i8] c"can't recover suffix\0A\00", align 1
@.str.170 = private unnamed_addr constant [5 x i8] c".tar\00", align 1
@.str.162 = private unnamed_addr constant [5 x i8] c".tgz\00", align 1
@.str.166 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.180 = private unnamed_addr constant [31 x i8] c"internal error in shorten_name\00", align 1
@get_suffix.known_suffixes = internal global [9 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.164, i32 0, i32 0), i8* null], align 16, !dbg !703
@.str.165 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.157 = private unnamed_addr constant [3 x i8] c".z\00", align 1
@.str.161 = private unnamed_addr constant [5 x i8] c".taz\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"-gz\00", align 1
@.str.158 = private unnamed_addr constant [3 x i8] c"-z\00", align 1
@.str.164 = private unnamed_addr constant [3 x i8] c"_z\00", align 1
@.str.173 = private unnamed_addr constant [39 x i8] c"%s: %s: cannot %scompress onto itself\0A\00", align 1
@.str.174 = private unnamed_addr constant [33 x i8] c"%s: %s and %s are the same file\0A\00", align 1
@.str.175 = private unnamed_addr constant [23 x i8] c"%s: %s already exists;\00", align 1
@.str.176 = private unnamed_addr constant [37 x i8] c" do you wish to overwrite (y or n)? \00", align 1
@.str.177 = private unnamed_addr constant [18 x i8] c"\09not overwritten\0A\00", align 1
@.str.169 = private unnamed_addr constant [35 x i8] c"%s: %s: unknown suffix -- ignored\0A\00", align 1
@.str.171 = private unnamed_addr constant [43 x i8] c"%s: %s already has %s suffix -- unchanged\0A\00", align 1
@.str.160 = private unnamed_addr constant [28 x i8] c"%s: %s: file name too long\0A\00", align 1
@.str.167 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.168 = private unnamed_addr constant [30 x i8] c"%s: %s/%s: pathname too long\0A\00", align 1
@get_istat.suffixes = internal global [6 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.159, i32 0, i32 0), i8* null], align 16, !dbg !697
@.str.159 = private unnamed_addr constant [3 x i8] c".Z\00", align 1
@msg_done = internal global i32 0, align 4, !dbg !728, !ctir !12
@.str.52 = private unnamed_addr constant [44 x i8] c"output in compress .Z format not supported\0A\00", align 1
@.str.115 = private unnamed_addr constant [28 x i8] c"Compilation options:\0A%s %s \00", align 1
@.str.116 = private unnamed_addr constant [7 x i8] c"DIRENT\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"UTIME\00", align 1
@.str.118 = private unnamed_addr constant [14 x i8] c"STDC_HEADERS \00", align 1
@.str.119 = private unnamed_addr constant [15 x i8] c"HAVE_UNISTD_H \00", align 1
@.str.120 = private unnamed_addr constant [15 x i8] c"HAVE_MEMORY_H \00", align 1
@.str.121 = private unnamed_addr constant [15 x i8] c"HAVE_STRING_H \00", align 1
@.str.122 = private unnamed_addr constant [12 x i8] c"HAVE_LSTAT \00", align 1
@.str.124 = private unnamed_addr constant [30 x i8] c"Written by Jean-loup Gailly.\0A\00", align 1
@license_msg = internal global [7 x i8*] [i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.114, i32 0, i32 0), i8* null], align 16, !dbg !695, !ctir !340
@.str.105 = private unnamed_addr constant [12 x i8] c"%s %s\0A(%s)\0A\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"1.3.5\00", align 1
@.str.107 = private unnamed_addr constant [11 x i8] c"2002-09-30\00", align 1
@.str.108 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.109 = private unnamed_addr constant [40 x i8] c"Copyright 2002 Free Software Foundation\00", align 1
@.str.110 = private unnamed_addr constant [37 x i8] c"Copyright 1992-1993 Jean-loup Gailly\00", align 1
@.str.111 = private unnamed_addr constant [48 x i8] c"This program comes with ABSOLUTELY NO WARRANTY.\00", align 1
@.str.112 = private unnamed_addr constant [44 x i8] c"You may redistribute copies of this program\00", align 1
@.str.113 = private unnamed_addr constant [51 x i8] c"under the terms of the GNU General Public License.\00", align 1
@.str.114 = private unnamed_addr constant [70 x i8] c"For more information about these matters, see the file named COPYING.\00", align 1
@help.help_msg = internal global [20 x i8*] [i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.104, i32 0, i32 0), i8* null], align 16, !dbg !690
@.str.86 = private unnamed_addr constant [74 x i8] c" -c --stdout      write on standard output, keep original files unchanged\00", align 1
@.str.87 = private unnamed_addr constant [29 x i8] c" -d --decompress  decompress\00", align 1
@.str.88 = private unnamed_addr constant [68 x i8] c" -f --force       force overwrite of output file and compress links\00", align 1
@.str.89 = private unnamed_addr constant [33 x i8] c" -h --help        give this help\00", align 1
@.str.90 = private unnamed_addr constant [48 x i8] c" -l --list        list compressed file contents\00", align 1
@.str.91 = private unnamed_addr constant [43 x i8] c" -L --license     display software license\00", align 1
@.str.92 = private unnamed_addr constant [74 x i8] c" -n --no-name     do not save or restore the original name and time stamp\00", align 1
@.str.93 = private unnamed_addr constant [67 x i8] c" -N --name        save or restore the original name and time stamp\00", align 1
@.str.94 = private unnamed_addr constant [40 x i8] c" -q --quiet       suppress all warnings\00", align 1
@.str.95 = private unnamed_addr constant [53 x i8] c" -r --recursive   operate recursively on directories\00", align 1
@.str.96 = private unnamed_addr constant [64 x i8] c" -S .suf  --suffix .suf     use suffix .suf on compressed files\00", align 1
@.str.97 = private unnamed_addr constant [49 x i8] c" -t --test        test compressed file integrity\00", align 1
@.str.98 = private unnamed_addr constant [31 x i8] c" -v --verbose     verbose mode\00", align 1
@.str.99 = private unnamed_addr constant [41 x i8] c" -V --version     display version number\00", align 1
@.str.100 = private unnamed_addr constant [34 x i8] c" -1 --fast        compress faster\00", align 1
@.str.101 = private unnamed_addr constant [34 x i8] c" -9 --best        compress better\00", align 1
@.str.102 = private unnamed_addr constant [46 x i8] c"    --rsyncable   Make rsync-friendly archive\00", align 1
@.str.103 = private unnamed_addr constant [76 x i8] c" file...          files to (de)compress. If none given, use standard input.\00", align 1
@.str.104 = private unnamed_addr constant [35 x i8] c"Report bugs to <bug-gzip@gnu.org>.\00", align 1
@.str.84 = private unnamed_addr constant [55 x i8] c"usage: %s [-%scdfhlLnN%stvV19] [-S suffix] [file ...]\0A\00", align 1
@.str.85 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.71 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.72 = private unnamed_addr constant [8 x i8] c"argc<=0\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @zip(i32 %in, i32 %out) #0 !dbg !778 {
entry:
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %flags = alloca i8, align 1, !ctir !13
  %attr = alloca i16, align 2, !ctir !15
  %deflate_flags = alloca i16, align 2, !ctir !15
  %p = alloca i8*, align 8, !ctir !19
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !779, metadata !DIExpression()), !dbg !780
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !781, metadata !DIExpression()), !dbg !782
  call void @llvm.dbg.declare(metadata i8* %flags, metadata !783, metadata !DIExpression()), !dbg !784
  store i8 0, i8* %flags, align 1, !dbg !784
  call void @llvm.dbg.declare(metadata i16* %attr, metadata !785, metadata !DIExpression()), !dbg !786
  store i16 0, i16* %attr, align 2, !dbg !786
  call void @llvm.dbg.declare(metadata i16* %deflate_flags, metadata !787, metadata !DIExpression()), !dbg !788
  store i16 0, i16* %deflate_flags, align 2, !dbg !788
  %0 = load i32, i32* %in.addr, align 4, !dbg !789
  store i32 %0, i32* @ifd, align 4, !dbg !790
  %1 = load i32, i32* %out.addr, align 4, !dbg !791
  store i32 %1, i32* @ofd, align 4, !dbg !792
  store i32 0, i32* @outcnt, align 4, !dbg !793
  store i32 8, i32* @method, align 4, !dbg !794
  %2 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i64 0, i64 0), align 1, !dbg !795
  %3 = load i32, i32* @outcnt, align 4, !dbg !795
  %inc = add i32 %3, 1, !dbg !795
  store i32 %inc, i32* @outcnt, align 4, !dbg !795
  %idxprom = zext i32 %3 to i64, !dbg !795
  %arrayidx = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom, !dbg !795, !ctir !283
  store i8 %2, i8* %arrayidx, align 1, !dbg !795
  %4 = load i32, i32* @outcnt, align 4, !dbg !797
  %cmp = icmp eq i32 %4, 16384, !dbg !797
  br i1 %cmp, label %if.then, label %if.end, !dbg !795

if.then:                                          ; preds = %entry
  call void @flush_outbuf(), !dbg !797
  br label %if.end, !dbg !797

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i64 0, i64 1), align 1, !dbg !799
  %6 = load i32, i32* @outcnt, align 4, !dbg !799
  %inc1 = add i32 %6, 1, !dbg !799
  store i32 %inc1, i32* @outcnt, align 4, !dbg !799
  %idxprom2 = zext i32 %6 to i64, !dbg !799
  %arrayidx3 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom2, !dbg !799, !ctir !283
  store i8 %5, i8* %arrayidx3, align 1, !dbg !799
  %7 = load i32, i32* @outcnt, align 4, !dbg !801
  %cmp4 = icmp eq i32 %7, 16384, !dbg !801
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !799

if.then5:                                         ; preds = %if.end
  call void @flush_outbuf(), !dbg !801
  br label %if.end6, !dbg !801

if.end6:                                          ; preds = %if.then5, %if.end
  %8 = load i32, i32* @outcnt, align 4, !dbg !803
  %inc7 = add i32 %8, 1, !dbg !803
  store i32 %inc7, i32* @outcnt, align 4, !dbg !803
  %idxprom8 = zext i32 %8 to i64, !dbg !803
  %arrayidx9 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom8, !dbg !803, !ctir !283
  store i8 8, i8* %arrayidx9, align 1, !dbg !803
  %9 = load i32, i32* @outcnt, align 4, !dbg !805
  %cmp10 = icmp eq i32 %9, 16384, !dbg !805
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !803

if.then11:                                        ; preds = %if.end6
  call void @flush_outbuf(), !dbg !805
  br label %if.end12, !dbg !805

if.end12:                                         ; preds = %if.then11, %if.end6
  %10 = load i32, i32* @save_orig_name, align 4, !dbg !807
  %tobool = icmp ne i32 %10, 0, !dbg !807
  br i1 %tobool, label %if.then13, label %if.end15, !dbg !809

if.then13:                                        ; preds = %if.end12
  %11 = load i8, i8* %flags, align 1, !dbg !810
  %conv = zext i8 %11 to i32, !dbg !810
  %or = or i32 %conv, 8, !dbg !810
  %conv14 = trunc i32 %or to i8, !dbg !810
  store i8 %conv14, i8* %flags, align 1, !dbg !810
  br label %if.end15, !dbg !812

if.end15:                                         ; preds = %if.then13, %if.end12
  %12 = load i8, i8* %flags, align 1, !dbg !813
  %13 = load i32, i32* @outcnt, align 4, !dbg !813
  %inc16 = add i32 %13, 1, !dbg !813
  store i32 %inc16, i32* @outcnt, align 4, !dbg !813
  %idxprom17 = zext i32 %13 to i64, !dbg !813
  %arrayidx18 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom17, !dbg !813, !ctir !283
  store i8 %12, i8* %arrayidx18, align 1, !dbg !813
  %14 = load i32, i32* @outcnt, align 4, !dbg !815
  %cmp19 = icmp eq i32 %14, 16384, !dbg !815
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !813

if.then21:                                        ; preds = %if.end15
  call void @flush_outbuf(), !dbg !815
  br label %if.end22, !dbg !815

if.end22:                                         ; preds = %if.then21, %if.end15
  %15 = load i32, i32* @outcnt, align 4, !dbg !817
  %cmp23 = icmp ult i32 %15, 16382, !dbg !817
  br i1 %cmp23, label %if.then25, label %if.else, !dbg !821

if.then25:                                        ; preds = %if.end22
  %16 = load i64, i64* @time_stamp, align 8, !dbg !822
  %17 = load i64, i64* @time_stamp, align 8, !dbg !822
  %and = and i64 %17, 4294967295, !dbg !822
  %cmp26 = icmp eq i64 %16, %and, !dbg !822
  br i1 %cmp26, label %cond.true, label %cond.false, !dbg !822

cond.true:                                        ; preds = %if.then25
  %18 = load i64, i64* @time_stamp, align 8, !dbg !822
  br label %cond.end, !dbg !822

cond.false:                                       ; preds = %if.then25
  br label %cond.end, !dbg !822

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %18, %cond.true ], [ 0, %cond.false ], !dbg !822
  %and28 = and i64 %cond, 65535, !dbg !822
  %and29 = and i64 %and28, 255, !dbg !822
  %conv30 = trunc i64 %and29 to i8, !dbg !822
  %19 = load i32, i32* @outcnt, align 4, !dbg !822
  %inc31 = add i32 %19, 1, !dbg !822
  store i32 %inc31, i32* @outcnt, align 4, !dbg !822
  %idxprom32 = zext i32 %19 to i64, !dbg !822
  %arrayidx33 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom32, !dbg !822, !ctir !283
  store i8 %conv30, i8* %arrayidx33, align 1, !dbg !822
  %20 = load i64, i64* @time_stamp, align 8, !dbg !822
  %21 = load i64, i64* @time_stamp, align 8, !dbg !822
  %and34 = and i64 %21, 4294967295, !dbg !822
  %cmp35 = icmp eq i64 %20, %and34, !dbg !822
  br i1 %cmp35, label %cond.true37, label %cond.false38, !dbg !822

cond.true37:                                      ; preds = %cond.end
  %22 = load i64, i64* @time_stamp, align 8, !dbg !822
  br label %cond.end39, !dbg !822

cond.false38:                                     ; preds = %cond.end
  br label %cond.end39, !dbg !822

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i64 [ %22, %cond.true37 ], [ 0, %cond.false38 ], !dbg !822
  %and41 = and i64 %cond40, 65535, !dbg !822
  %conv42 = trunc i64 %and41 to i16, !dbg !822
  %conv43 = zext i16 %conv42 to i32, !dbg !822
  %shr = ashr i32 %conv43, 8, !dbg !822
  %conv44 = trunc i32 %shr to i8, !dbg !822
  %23 = load i32, i32* @outcnt, align 4, !dbg !822
  %inc45 = add i32 %23, 1, !dbg !822
  store i32 %inc45, i32* @outcnt, align 4, !dbg !822
  %idxprom46 = zext i32 %23 to i64, !dbg !822
  %arrayidx47 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom46, !dbg !822, !ctir !283
  store i8 %conv44, i8* %arrayidx47, align 1, !dbg !822
  br label %if.end84, !dbg !822

if.else:                                          ; preds = %if.end22
  %24 = load i64, i64* @time_stamp, align 8, !dbg !824
  %25 = load i64, i64* @time_stamp, align 8, !dbg !824
  %and48 = and i64 %25, 4294967295, !dbg !824
  %cmp49 = icmp eq i64 %24, %and48, !dbg !824
  br i1 %cmp49, label %cond.true51, label %cond.false52, !dbg !824

cond.true51:                                      ; preds = %if.else
  %26 = load i64, i64* @time_stamp, align 8, !dbg !824
  br label %cond.end53, !dbg !824

cond.false52:                                     ; preds = %if.else
  br label %cond.end53, !dbg !824

cond.end53:                                       ; preds = %cond.false52, %cond.true51
  %cond54 = phi i64 [ %26, %cond.true51 ], [ 0, %cond.false52 ], !dbg !824
  %and55 = and i64 %cond54, 65535, !dbg !824
  %and56 = and i64 %and55, 255, !dbg !824
  %conv57 = trunc i64 %and56 to i8, !dbg !824
  %27 = load i32, i32* @outcnt, align 4, !dbg !824
  %inc58 = add i32 %27, 1, !dbg !824
  store i32 %inc58, i32* @outcnt, align 4, !dbg !824
  %idxprom59 = zext i32 %27 to i64, !dbg !824
  %arrayidx60 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom59, !dbg !824, !ctir !283
  store i8 %conv57, i8* %arrayidx60, align 1, !dbg !824
  %28 = load i32, i32* @outcnt, align 4, !dbg !827
  %cmp61 = icmp eq i32 %28, 16384, !dbg !827
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !824

if.then63:                                        ; preds = %cond.end53
  call void @flush_outbuf(), !dbg !827
  br label %if.end64, !dbg !827

if.end64:                                         ; preds = %if.then63, %cond.end53
  %29 = load i64, i64* @time_stamp, align 8, !dbg !829
  %30 = load i64, i64* @time_stamp, align 8, !dbg !829
  %and65 = and i64 %30, 4294967295, !dbg !829
  %cmp66 = icmp eq i64 %29, %and65, !dbg !829
  br i1 %cmp66, label %cond.true68, label %cond.false69, !dbg !829

cond.true68:                                      ; preds = %if.end64
  %31 = load i64, i64* @time_stamp, align 8, !dbg !829
  br label %cond.end70, !dbg !829

cond.false69:                                     ; preds = %if.end64
  br label %cond.end70, !dbg !829

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i64 [ %31, %cond.true68 ], [ 0, %cond.false69 ], !dbg !829
  %and72 = and i64 %cond71, 65535, !dbg !829
  %conv73 = trunc i64 %and72 to i16, !dbg !829
  %conv74 = zext i16 %conv73 to i32, !dbg !829
  %shr75 = ashr i32 %conv74, 8, !dbg !829
  %conv76 = trunc i32 %shr75 to i8, !dbg !829
  %32 = load i32, i32* @outcnt, align 4, !dbg !829
  %inc77 = add i32 %32, 1, !dbg !829
  store i32 %inc77, i32* @outcnt, align 4, !dbg !829
  %idxprom78 = zext i32 %32 to i64, !dbg !829
  %arrayidx79 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom78, !dbg !829, !ctir !283
  store i8 %conv76, i8* %arrayidx79, align 1, !dbg !829
  %33 = load i32, i32* @outcnt, align 4, !dbg !831
  %cmp80 = icmp eq i32 %33, 16384, !dbg !831
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !829

if.then82:                                        ; preds = %cond.end70
  call void @flush_outbuf(), !dbg !831
  br label %if.end83, !dbg !831

if.end83:                                         ; preds = %if.then82, %cond.end70
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %cond.end39
  %34 = load i32, i32* @outcnt, align 4, !dbg !833
  %cmp85 = icmp ult i32 %34, 16382, !dbg !833
  br i1 %cmp85, label %if.then87, label %if.else116, !dbg !836

if.then87:                                        ; preds = %if.end84
  %35 = load i64, i64* @time_stamp, align 8, !dbg !837
  %36 = load i64, i64* @time_stamp, align 8, !dbg !837
  %and88 = and i64 %36, 4294967295, !dbg !837
  %cmp89 = icmp eq i64 %35, %and88, !dbg !837
  br i1 %cmp89, label %cond.true91, label %cond.false92, !dbg !837

cond.true91:                                      ; preds = %if.then87
  %37 = load i64, i64* @time_stamp, align 8, !dbg !837
  br label %cond.end93, !dbg !837

cond.false92:                                     ; preds = %if.then87
  br label %cond.end93, !dbg !837

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond94 = phi i64 [ %37, %cond.true91 ], [ 0, %cond.false92 ], !dbg !837
  %shr95 = lshr i64 %cond94, 16, !dbg !837
  %and96 = and i64 %shr95, 255, !dbg !837
  %conv97 = trunc i64 %and96 to i8, !dbg !837
  %38 = load i32, i32* @outcnt, align 4, !dbg !837
  %inc98 = add i32 %38, 1, !dbg !837
  store i32 %inc98, i32* @outcnt, align 4, !dbg !837
  %idxprom99 = zext i32 %38 to i64, !dbg !837
  %arrayidx100 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom99, !dbg !837, !ctir !283
  store i8 %conv97, i8* %arrayidx100, align 1, !dbg !837
  %39 = load i64, i64* @time_stamp, align 8, !dbg !837
  %40 = load i64, i64* @time_stamp, align 8, !dbg !837
  %and101 = and i64 %40, 4294967295, !dbg !837
  %cmp102 = icmp eq i64 %39, %and101, !dbg !837
  br i1 %cmp102, label %cond.true104, label %cond.false105, !dbg !837

cond.true104:                                     ; preds = %cond.end93
  %41 = load i64, i64* @time_stamp, align 8, !dbg !837
  br label %cond.end106, !dbg !837

cond.false105:                                    ; preds = %cond.end93
  br label %cond.end106, !dbg !837

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi i64 [ %41, %cond.true104 ], [ 0, %cond.false105 ], !dbg !837
  %shr108 = lshr i64 %cond107, 16, !dbg !837
  %conv109 = trunc i64 %shr108 to i16, !dbg !837
  %conv110 = zext i16 %conv109 to i32, !dbg !837
  %shr111 = ashr i32 %conv110, 8, !dbg !837
  %conv112 = trunc i32 %shr111 to i8, !dbg !837
  %42 = load i32, i32* @outcnt, align 4, !dbg !837
  %inc113 = add i32 %42, 1, !dbg !837
  store i32 %inc113, i32* @outcnt, align 4, !dbg !837
  %idxprom114 = zext i32 %42 to i64, !dbg !837
  %arrayidx115 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom114, !dbg !837, !ctir !283
  store i8 %conv112, i8* %arrayidx115, align 1, !dbg !837
  br label %if.end153, !dbg !837

if.else116:                                       ; preds = %if.end84
  %43 = load i64, i64* @time_stamp, align 8, !dbg !839
  %44 = load i64, i64* @time_stamp, align 8, !dbg !839
  %and117 = and i64 %44, 4294967295, !dbg !839
  %cmp118 = icmp eq i64 %43, %and117, !dbg !839
  br i1 %cmp118, label %cond.true120, label %cond.false121, !dbg !839

cond.true120:                                     ; preds = %if.else116
  %45 = load i64, i64* @time_stamp, align 8, !dbg !839
  br label %cond.end122, !dbg !839

cond.false121:                                    ; preds = %if.else116
  br label %cond.end122, !dbg !839

cond.end122:                                      ; preds = %cond.false121, %cond.true120
  %cond123 = phi i64 [ %45, %cond.true120 ], [ 0, %cond.false121 ], !dbg !839
  %shr124 = lshr i64 %cond123, 16, !dbg !839
  %and125 = and i64 %shr124, 255, !dbg !839
  %conv126 = trunc i64 %and125 to i8, !dbg !839
  %46 = load i32, i32* @outcnt, align 4, !dbg !839
  %inc127 = add i32 %46, 1, !dbg !839
  store i32 %inc127, i32* @outcnt, align 4, !dbg !839
  %idxprom128 = zext i32 %46 to i64, !dbg !839
  %arrayidx129 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom128, !dbg !839, !ctir !283
  store i8 %conv126, i8* %arrayidx129, align 1, !dbg !839
  %47 = load i32, i32* @outcnt, align 4, !dbg !842
  %cmp130 = icmp eq i32 %47, 16384, !dbg !842
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !839

if.then132:                                       ; preds = %cond.end122
  call void @flush_outbuf(), !dbg !842
  br label %if.end133, !dbg !842

if.end133:                                        ; preds = %if.then132, %cond.end122
  %48 = load i64, i64* @time_stamp, align 8, !dbg !844
  %49 = load i64, i64* @time_stamp, align 8, !dbg !844
  %and134 = and i64 %49, 4294967295, !dbg !844
  %cmp135 = icmp eq i64 %48, %and134, !dbg !844
  br i1 %cmp135, label %cond.true137, label %cond.false138, !dbg !844

cond.true137:                                     ; preds = %if.end133
  %50 = load i64, i64* @time_stamp, align 8, !dbg !844
  br label %cond.end139, !dbg !844

cond.false138:                                    ; preds = %if.end133
  br label %cond.end139, !dbg !844

cond.end139:                                      ; preds = %cond.false138, %cond.true137
  %cond140 = phi i64 [ %50, %cond.true137 ], [ 0, %cond.false138 ], !dbg !844
  %shr141 = lshr i64 %cond140, 16, !dbg !844
  %conv142 = trunc i64 %shr141 to i16, !dbg !844
  %conv143 = zext i16 %conv142 to i32, !dbg !844
  %shr144 = ashr i32 %conv143, 8, !dbg !844
  %conv145 = trunc i32 %shr144 to i8, !dbg !844
  %51 = load i32, i32* @outcnt, align 4, !dbg !844
  %inc146 = add i32 %51, 1, !dbg !844
  store i32 %inc146, i32* @outcnt, align 4, !dbg !844
  %idxprom147 = zext i32 %51 to i64, !dbg !844
  %arrayidx148 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom147, !dbg !844, !ctir !283
  store i8 %conv145, i8* %arrayidx148, align 1, !dbg !844
  %52 = load i32, i32* @outcnt, align 4, !dbg !846
  %cmp149 = icmp eq i32 %52, 16384, !dbg !846
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !844

if.then151:                                       ; preds = %cond.end139
  call void @flush_outbuf(), !dbg !846
  br label %if.end152, !dbg !846

if.end152:                                        ; preds = %if.then151, %cond.end139
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %cond.end106
  %call = call i64 @updcrc(i8* null, i32 0), !dbg !848
  store i64 %call, i64* @crc, align 8, !dbg !849
  %53 = load i32, i32* %out.addr, align 4, !dbg !850
  call void @bi_init(i32 %53), !dbg !851
  call void @ct_init(i16* %attr, i32* @method), !dbg !852
  %54 = load i32, i32* @level, align 4, !dbg !853
  call void @lm_init(i32 %54, i16* %deflate_flags), !dbg !854
  %55 = load i16, i16* %deflate_flags, align 2, !dbg !855
  %conv154 = trunc i16 %55 to i8, !dbg !855
  %56 = load i32, i32* @outcnt, align 4, !dbg !855
  %inc155 = add i32 %56, 1, !dbg !855
  store i32 %inc155, i32* @outcnt, align 4, !dbg !855
  %idxprom156 = zext i32 %56 to i64, !dbg !855
  %arrayidx157 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom156, !dbg !855, !ctir !283
  store i8 %conv154, i8* %arrayidx157, align 1, !dbg !855
  %57 = load i32, i32* @outcnt, align 4, !dbg !857
  %cmp158 = icmp eq i32 %57, 16384, !dbg !857
  br i1 %cmp158, label %if.then160, label %if.end161, !dbg !855

if.then160:                                       ; preds = %if.end153
  call void @flush_outbuf(), !dbg !857
  br label %if.end161, !dbg !857

if.end161:                                        ; preds = %if.then160, %if.end153
  %58 = load i32, i32* @outcnt, align 4, !dbg !859
  %inc162 = add i32 %58, 1, !dbg !859
  store i32 %inc162, i32* @outcnt, align 4, !dbg !859
  %idxprom163 = zext i32 %58 to i64, !dbg !859
  %arrayidx164 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom163, !dbg !859, !ctir !283
  store i8 3, i8* %arrayidx164, align 1, !dbg !859
  %59 = load i32, i32* @outcnt, align 4, !dbg !861
  %cmp165 = icmp eq i32 %59, 16384, !dbg !861
  br i1 %cmp165, label %if.then167, label %if.end168, !dbg !859

if.then167:                                       ; preds = %if.end161
  call void @flush_outbuf(), !dbg !861
  br label %if.end168, !dbg !861

if.end168:                                        ; preds = %if.then167, %if.end161
  %60 = load i32, i32* @save_orig_name, align 4, !dbg !863
  %tobool169 = icmp ne i32 %60, 0, !dbg !863
  br i1 %tobool169, label %if.then170, label %if.end180, !dbg !865

if.then170:                                       ; preds = %if.end168
  call void @llvm.dbg.declare(metadata i8** %p, metadata !866, metadata !DIExpression()), !dbg !868
  %call171 = call i8* @base_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !869
  store i8* %call171, i8** %p, align 8, !dbg !868
  br label %do.body, !dbg !870

do.body:                                          ; preds = %do.cond, %if.then170
  %61 = load i8*, i8** %p, align 8, !dbg !871
  %62 = load i8, i8* %61, align 1, !dbg !871, !ctir !20
  %63 = load i32, i32* @outcnt, align 4, !dbg !871
  %inc172 = add i32 %63, 1, !dbg !871
  store i32 %inc172, i32* @outcnt, align 4, !dbg !871
  %idxprom173 = zext i32 %63 to i64, !dbg !871
  %arrayidx174 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom173, !dbg !871, !ctir !283
  store i8 %62, i8* %arrayidx174, align 1, !dbg !871
  %64 = load i32, i32* @outcnt, align 4, !dbg !874
  %cmp175 = icmp eq i32 %64, 16384, !dbg !874
  br i1 %cmp175, label %if.then177, label %if.end178, !dbg !871

if.then177:                                       ; preds = %do.body
  call void @flush_outbuf(), !dbg !874
  br label %if.end178, !dbg !874

if.end178:                                        ; preds = %if.then177, %do.body
  br label %do.cond, !dbg !876

do.cond:                                          ; preds = %if.end178
  %65 = load i8*, i8** %p, align 8, !dbg !877
  %incdec.ptr = getelementptr inbounds i8, i8* %65, i32 1, !dbg !877, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !877
  %66 = load i8, i8* %65, align 1, !dbg !878, !ctir !20
  %tobool179 = icmp ne i8 %66, 0, !dbg !876
  br i1 %tobool179, label %do.body, label %do.end, !dbg !876, !llvm.loop !879

do.end:                                           ; preds = %do.cond
  br label %if.end180, !dbg !881

if.end180:                                        ; preds = %do.end, %if.end168
  %67 = load i32, i32* @outcnt, align 4, !dbg !882
  %conv181 = zext i32 %67 to i64, !dbg !883
  store i64 %conv181, i64* @header_bytes, align 8, !dbg !884
  %call182 = call i64 @deflate(), !dbg !885
  %68 = load i32, i32* @outcnt, align 4, !dbg !886
  %cmp183 = icmp ult i32 %68, 16382, !dbg !886
  br i1 %cmp183, label %if.then185, label %if.else200, !dbg !890

if.then185:                                       ; preds = %if.end180
  %69 = load i64, i64* @crc, align 8, !dbg !891
  %and186 = and i64 %69, 65535, !dbg !891
  %and187 = and i64 %and186, 255, !dbg !891
  %conv188 = trunc i64 %and187 to i8, !dbg !891
  %70 = load i32, i32* @outcnt, align 4, !dbg !891
  %inc189 = add i32 %70, 1, !dbg !891
  store i32 %inc189, i32* @outcnt, align 4, !dbg !891
  %idxprom190 = zext i32 %70 to i64, !dbg !891
  %arrayidx191 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom190, !dbg !891, !ctir !283
  store i8 %conv188, i8* %arrayidx191, align 1, !dbg !891
  %71 = load i64, i64* @crc, align 8, !dbg !891
  %and192 = and i64 %71, 65535, !dbg !891
  %conv193 = trunc i64 %and192 to i16, !dbg !891
  %conv194 = zext i16 %conv193 to i32, !dbg !891
  %shr195 = ashr i32 %conv194, 8, !dbg !891
  %conv196 = trunc i32 %shr195 to i8, !dbg !891
  %72 = load i32, i32* @outcnt, align 4, !dbg !891
  %inc197 = add i32 %72, 1, !dbg !891
  store i32 %inc197, i32* @outcnt, align 4, !dbg !891
  %idxprom198 = zext i32 %72 to i64, !dbg !891
  %arrayidx199 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom198, !dbg !891, !ctir !283
  store i8 %conv196, i8* %arrayidx199, align 1, !dbg !891
  br label %if.end223, !dbg !891

if.else200:                                       ; preds = %if.end180
  %73 = load i64, i64* @crc, align 8, !dbg !893
  %and201 = and i64 %73, 65535, !dbg !893
  %and202 = and i64 %and201, 255, !dbg !893
  %conv203 = trunc i64 %and202 to i8, !dbg !893
  %74 = load i32, i32* @outcnt, align 4, !dbg !893
  %inc204 = add i32 %74, 1, !dbg !893
  store i32 %inc204, i32* @outcnt, align 4, !dbg !893
  %idxprom205 = zext i32 %74 to i64, !dbg !893
  %arrayidx206 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom205, !dbg !893, !ctir !283
  store i8 %conv203, i8* %arrayidx206, align 1, !dbg !893
  %75 = load i32, i32* @outcnt, align 4, !dbg !896
  %cmp207 = icmp eq i32 %75, 16384, !dbg !896
  br i1 %cmp207, label %if.then209, label %if.end210, !dbg !893

if.then209:                                       ; preds = %if.else200
  call void @flush_outbuf(), !dbg !896
  br label %if.end210, !dbg !896

if.end210:                                        ; preds = %if.then209, %if.else200
  %76 = load i64, i64* @crc, align 8, !dbg !898
  %and211 = and i64 %76, 65535, !dbg !898
  %conv212 = trunc i64 %and211 to i16, !dbg !898
  %conv213 = zext i16 %conv212 to i32, !dbg !898
  %shr214 = ashr i32 %conv213, 8, !dbg !898
  %conv215 = trunc i32 %shr214 to i8, !dbg !898
  %77 = load i32, i32* @outcnt, align 4, !dbg !898
  %inc216 = add i32 %77, 1, !dbg !898
  store i32 %inc216, i32* @outcnt, align 4, !dbg !898
  %idxprom217 = zext i32 %77 to i64, !dbg !898
  %arrayidx218 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom217, !dbg !898, !ctir !283
  store i8 %conv215, i8* %arrayidx218, align 1, !dbg !898
  %78 = load i32, i32* @outcnt, align 4, !dbg !900
  %cmp219 = icmp eq i32 %78, 16384, !dbg !900
  br i1 %cmp219, label %if.then221, label %if.end222, !dbg !898

if.then221:                                       ; preds = %if.end210
  call void @flush_outbuf(), !dbg !900
  br label %if.end222, !dbg !900

if.end222:                                        ; preds = %if.then221, %if.end210
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.then185
  %79 = load i32, i32* @outcnt, align 4, !dbg !902
  %cmp224 = icmp ult i32 %79, 16382, !dbg !902
  br i1 %cmp224, label %if.then226, label %if.else241, !dbg !905

if.then226:                                       ; preds = %if.end223
  %80 = load i64, i64* @crc, align 8, !dbg !906
  %shr227 = lshr i64 %80, 16, !dbg !906
  %and228 = and i64 %shr227, 255, !dbg !906
  %conv229 = trunc i64 %and228 to i8, !dbg !906
  %81 = load i32, i32* @outcnt, align 4, !dbg !906
  %inc230 = add i32 %81, 1, !dbg !906
  store i32 %inc230, i32* @outcnt, align 4, !dbg !906
  %idxprom231 = zext i32 %81 to i64, !dbg !906
  %arrayidx232 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom231, !dbg !906, !ctir !283
  store i8 %conv229, i8* %arrayidx232, align 1, !dbg !906
  %82 = load i64, i64* @crc, align 8, !dbg !906
  %shr233 = lshr i64 %82, 16, !dbg !906
  %conv234 = trunc i64 %shr233 to i16, !dbg !906
  %conv235 = zext i16 %conv234 to i32, !dbg !906
  %shr236 = ashr i32 %conv235, 8, !dbg !906
  %conv237 = trunc i32 %shr236 to i8, !dbg !906
  %83 = load i32, i32* @outcnt, align 4, !dbg !906
  %inc238 = add i32 %83, 1, !dbg !906
  store i32 %inc238, i32* @outcnt, align 4, !dbg !906
  %idxprom239 = zext i32 %83 to i64, !dbg !906
  %arrayidx240 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom239, !dbg !906, !ctir !283
  store i8 %conv237, i8* %arrayidx240, align 1, !dbg !906
  br label %if.end264, !dbg !906

if.else241:                                       ; preds = %if.end223
  %84 = load i64, i64* @crc, align 8, !dbg !908
  %shr242 = lshr i64 %84, 16, !dbg !908
  %and243 = and i64 %shr242, 255, !dbg !908
  %conv244 = trunc i64 %and243 to i8, !dbg !908
  %85 = load i32, i32* @outcnt, align 4, !dbg !908
  %inc245 = add i32 %85, 1, !dbg !908
  store i32 %inc245, i32* @outcnt, align 4, !dbg !908
  %idxprom246 = zext i32 %85 to i64, !dbg !908
  %arrayidx247 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom246, !dbg !908, !ctir !283
  store i8 %conv244, i8* %arrayidx247, align 1, !dbg !908
  %86 = load i32, i32* @outcnt, align 4, !dbg !911
  %cmp248 = icmp eq i32 %86, 16384, !dbg !911
  br i1 %cmp248, label %if.then250, label %if.end251, !dbg !908

if.then250:                                       ; preds = %if.else241
  call void @flush_outbuf(), !dbg !911
  br label %if.end251, !dbg !911

if.end251:                                        ; preds = %if.then250, %if.else241
  %87 = load i64, i64* @crc, align 8, !dbg !913
  %shr252 = lshr i64 %87, 16, !dbg !913
  %conv253 = trunc i64 %shr252 to i16, !dbg !913
  %conv254 = zext i16 %conv253 to i32, !dbg !913
  %shr255 = ashr i32 %conv254, 8, !dbg !913
  %conv256 = trunc i32 %shr255 to i8, !dbg !913
  %88 = load i32, i32* @outcnt, align 4, !dbg !913
  %inc257 = add i32 %88, 1, !dbg !913
  store i32 %inc257, i32* @outcnt, align 4, !dbg !913
  %idxprom258 = zext i32 %88 to i64, !dbg !913
  %arrayidx259 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom258, !dbg !913, !ctir !283
  store i8 %conv256, i8* %arrayidx259, align 1, !dbg !913
  %89 = load i32, i32* @outcnt, align 4, !dbg !915
  %cmp260 = icmp eq i32 %89, 16384, !dbg !915
  br i1 %cmp260, label %if.then262, label %if.end263, !dbg !913

if.then262:                                       ; preds = %if.end251
  call void @flush_outbuf(), !dbg !915
  br label %if.end263, !dbg !915

if.end263:                                        ; preds = %if.then262, %if.end251
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %if.then226
  %90 = load i32, i32* @outcnt, align 4, !dbg !917
  %cmp265 = icmp ult i32 %90, 16382, !dbg !917
  br i1 %cmp265, label %if.then267, label %if.else282, !dbg !921

if.then267:                                       ; preds = %if.end264
  %91 = load i64, i64* @bytes_in, align 8, !dbg !922
  %and268 = and i64 %91, 65535, !dbg !922
  %and269 = and i64 %and268, 255, !dbg !922
  %conv270 = trunc i64 %and269 to i8, !dbg !922
  %92 = load i32, i32* @outcnt, align 4, !dbg !922
  %inc271 = add i32 %92, 1, !dbg !922
  store i32 %inc271, i32* @outcnt, align 4, !dbg !922
  %idxprom272 = zext i32 %92 to i64, !dbg !922
  %arrayidx273 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom272, !dbg !922, !ctir !283
  store i8 %conv270, i8* %arrayidx273, align 1, !dbg !922
  %93 = load i64, i64* @bytes_in, align 8, !dbg !922
  %and274 = and i64 %93, 65535, !dbg !922
  %conv275 = trunc i64 %and274 to i16, !dbg !922
  %conv276 = zext i16 %conv275 to i32, !dbg !922
  %shr277 = ashr i32 %conv276, 8, !dbg !922
  %conv278 = trunc i32 %shr277 to i8, !dbg !922
  %94 = load i32, i32* @outcnt, align 4, !dbg !922
  %inc279 = add i32 %94, 1, !dbg !922
  store i32 %inc279, i32* @outcnt, align 4, !dbg !922
  %idxprom280 = zext i32 %94 to i64, !dbg !922
  %arrayidx281 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom280, !dbg !922, !ctir !283
  store i8 %conv278, i8* %arrayidx281, align 1, !dbg !922
  br label %if.end305, !dbg !922

if.else282:                                       ; preds = %if.end264
  %95 = load i64, i64* @bytes_in, align 8, !dbg !924
  %and283 = and i64 %95, 65535, !dbg !924
  %and284 = and i64 %and283, 255, !dbg !924
  %conv285 = trunc i64 %and284 to i8, !dbg !924
  %96 = load i32, i32* @outcnt, align 4, !dbg !924
  %inc286 = add i32 %96, 1, !dbg !924
  store i32 %inc286, i32* @outcnt, align 4, !dbg !924
  %idxprom287 = zext i32 %96 to i64, !dbg !924
  %arrayidx288 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom287, !dbg !924, !ctir !283
  store i8 %conv285, i8* %arrayidx288, align 1, !dbg !924
  %97 = load i32, i32* @outcnt, align 4, !dbg !927
  %cmp289 = icmp eq i32 %97, 16384, !dbg !927
  br i1 %cmp289, label %if.then291, label %if.end292, !dbg !924

if.then291:                                       ; preds = %if.else282
  call void @flush_outbuf(), !dbg !927
  br label %if.end292, !dbg !927

if.end292:                                        ; preds = %if.then291, %if.else282
  %98 = load i64, i64* @bytes_in, align 8, !dbg !929
  %and293 = and i64 %98, 65535, !dbg !929
  %conv294 = trunc i64 %and293 to i16, !dbg !929
  %conv295 = zext i16 %conv294 to i32, !dbg !929
  %shr296 = ashr i32 %conv295, 8, !dbg !929
  %conv297 = trunc i32 %shr296 to i8, !dbg !929
  %99 = load i32, i32* @outcnt, align 4, !dbg !929
  %inc298 = add i32 %99, 1, !dbg !929
  store i32 %inc298, i32* @outcnt, align 4, !dbg !929
  %idxprom299 = zext i32 %99 to i64, !dbg !929
  %arrayidx300 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom299, !dbg !929, !ctir !283
  store i8 %conv297, i8* %arrayidx300, align 1, !dbg !929
  %100 = load i32, i32* @outcnt, align 4, !dbg !931
  %cmp301 = icmp eq i32 %100, 16384, !dbg !931
  br i1 %cmp301, label %if.then303, label %if.end304, !dbg !929

if.then303:                                       ; preds = %if.end292
  call void @flush_outbuf(), !dbg !931
  br label %if.end304, !dbg !931

if.end304:                                        ; preds = %if.then303, %if.end292
  br label %if.end305

if.end305:                                        ; preds = %if.end304, %if.then267
  %101 = load i32, i32* @outcnt, align 4, !dbg !933
  %cmp306 = icmp ult i32 %101, 16382, !dbg !933
  br i1 %cmp306, label %if.then308, label %if.else323, !dbg !936

if.then308:                                       ; preds = %if.end305
  %102 = load i64, i64* @bytes_in, align 8, !dbg !937
  %shr309 = lshr i64 %102, 16, !dbg !937
  %and310 = and i64 %shr309, 255, !dbg !937
  %conv311 = trunc i64 %and310 to i8, !dbg !937
  %103 = load i32, i32* @outcnt, align 4, !dbg !937
  %inc312 = add i32 %103, 1, !dbg !937
  store i32 %inc312, i32* @outcnt, align 4, !dbg !937
  %idxprom313 = zext i32 %103 to i64, !dbg !937
  %arrayidx314 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom313, !dbg !937, !ctir !283
  store i8 %conv311, i8* %arrayidx314, align 1, !dbg !937
  %104 = load i64, i64* @bytes_in, align 8, !dbg !937
  %shr315 = lshr i64 %104, 16, !dbg !937
  %conv316 = trunc i64 %shr315 to i16, !dbg !937
  %conv317 = zext i16 %conv316 to i32, !dbg !937
  %shr318 = ashr i32 %conv317, 8, !dbg !937
  %conv319 = trunc i32 %shr318 to i8, !dbg !937
  %105 = load i32, i32* @outcnt, align 4, !dbg !937
  %inc320 = add i32 %105, 1, !dbg !937
  store i32 %inc320, i32* @outcnt, align 4, !dbg !937
  %idxprom321 = zext i32 %105 to i64, !dbg !937
  %arrayidx322 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom321, !dbg !937, !ctir !283
  store i8 %conv319, i8* %arrayidx322, align 1, !dbg !937
  br label %if.end346, !dbg !937

if.else323:                                       ; preds = %if.end305
  %106 = load i64, i64* @bytes_in, align 8, !dbg !939
  %shr324 = lshr i64 %106, 16, !dbg !939
  %and325 = and i64 %shr324, 255, !dbg !939
  %conv326 = trunc i64 %and325 to i8, !dbg !939
  %107 = load i32, i32* @outcnt, align 4, !dbg !939
  %inc327 = add i32 %107, 1, !dbg !939
  store i32 %inc327, i32* @outcnt, align 4, !dbg !939
  %idxprom328 = zext i32 %107 to i64, !dbg !939
  %arrayidx329 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom328, !dbg !939, !ctir !283
  store i8 %conv326, i8* %arrayidx329, align 1, !dbg !939
  %108 = load i32, i32* @outcnt, align 4, !dbg !942
  %cmp330 = icmp eq i32 %108, 16384, !dbg !942
  br i1 %cmp330, label %if.then332, label %if.end333, !dbg !939

if.then332:                                       ; preds = %if.else323
  call void @flush_outbuf(), !dbg !942
  br label %if.end333, !dbg !942

if.end333:                                        ; preds = %if.then332, %if.else323
  %109 = load i64, i64* @bytes_in, align 8, !dbg !944
  %shr334 = lshr i64 %109, 16, !dbg !944
  %conv335 = trunc i64 %shr334 to i16, !dbg !944
  %conv336 = zext i16 %conv335 to i32, !dbg !944
  %shr337 = ashr i32 %conv336, 8, !dbg !944
  %conv338 = trunc i32 %shr337 to i8, !dbg !944
  %110 = load i32, i32* @outcnt, align 4, !dbg !944
  %inc339 = add i32 %110, 1, !dbg !944
  store i32 %inc339, i32* @outcnt, align 4, !dbg !944
  %idxprom340 = zext i32 %110 to i64, !dbg !944
  %arrayidx341 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom340, !dbg !944, !ctir !283
  store i8 %conv338, i8* %arrayidx341, align 1, !dbg !944
  %111 = load i32, i32* @outcnt, align 4, !dbg !946
  %cmp342 = icmp eq i32 %111, 16384, !dbg !946
  br i1 %cmp342, label %if.then344, label %if.end345, !dbg !944

if.then344:                                       ; preds = %if.end333
  call void @flush_outbuf(), !dbg !946
  br label %if.end345, !dbg !946

if.end345:                                        ; preds = %if.then344, %if.end333
  br label %if.end346

if.end346:                                        ; preds = %if.end345, %if.then308
  %112 = load i64, i64* @header_bytes, align 8, !dbg !948
  %add = add i64 %112, 16, !dbg !948
  store i64 %add, i64* @header_bytes, align 8, !dbg !948
  call void @flush_outbuf(), !dbg !949
  ret i32 0, !dbg !950
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @flush_outbuf() #0 !dbg !951 {
entry:
  %0 = load i32, i32* @outcnt, align 4, !dbg !952
  %cmp = icmp eq i32 %0, 0, !dbg !954
  br i1 %cmp, label %if.then, label %if.end, !dbg !955

if.then:                                          ; preds = %entry
  br label %return, !dbg !956

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @ofd, align 4, !dbg !957
  %2 = load i32, i32* @outcnt, align 4, !dbg !958
  call void @write_buf(i32 %1, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 %2), !dbg !959
  %3 = load i32, i32* @outcnt, align 4, !dbg !960
  %conv = zext i32 %3 to i64, !dbg !961
  %4 = load i64, i64* @bytes_out, align 8, !dbg !962
  %add = add nsw i64 %4, %conv, !dbg !962
  store i64 %add, i64* @bytes_out, align 8, !dbg !962
  store i32 0, i32* @outcnt, align 4, !dbg !963
  br label %return, !dbg !964

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !964
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @updcrc(i8* %s, i32 %n) #0 !dbg !477 {
entry:
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %c = alloca i64, align 8, !ctir !51
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !965, metadata !DIExpression()), !dbg !966
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !967, metadata !DIExpression()), !dbg !968
  call void @llvm.dbg.declare(metadata i64* %c, metadata !969, metadata !DIExpression()), !dbg !970
  %0 = load i8*, i8** %s.addr, align 8, !dbg !971
  %cmp = icmp eq i8* %0, null, !dbg !973
  br i1 %cmp, label %if.then, label %if.else, !dbg !974

if.then:                                          ; preds = %entry
  store i64 4294967295, i64* %c, align 8, !dbg !975
  br label %if.end5, !dbg !977

if.else:                                          ; preds = %entry
  %1 = load i64, i64* @updcrc.crc, align 8, !dbg !978
  store i64 %1, i64* %c, align 8, !dbg !980
  %2 = load i32, i32* %n.addr, align 4, !dbg !981
  %tobool = icmp ne i32 %2, 0, !dbg !981
  br i1 %tobool, label %if.then1, label %if.end, !dbg !983

if.then1:                                         ; preds = %if.else
  br label %do.body, !dbg !984

do.body:                                          ; preds = %do.cond, %if.then1
  %3 = load i64, i64* %c, align 8, !dbg !985
  %conv = trunc i64 %3 to i32, !dbg !987
  %4 = load i8*, i8** %s.addr, align 8, !dbg !988
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !988, !ctir !13
  store i8* %incdec.ptr, i8** %s.addr, align 8, !dbg !988
  %5 = load i8, i8* %4, align 1, !dbg !989, !ctir !13
  %conv2 = zext i8 %5 to i32, !dbg !990
  %xor = xor i32 %conv, %conv2, !dbg !991
  %and = and i32 %xor, 255, !dbg !992
  %idxprom = sext i32 %and to i64, !dbg !993
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* bitcast ([256 x i64]* @crc_32_tab to [0 x i64]*), i64 0, i64 %idxprom, !dbg !993, !ctir !304
  %6 = load i64, i64* %arrayidx, align 8, !dbg !993
  %7 = load i64, i64* %c, align 8, !dbg !994
  %shr = lshr i64 %7, 8, !dbg !995
  %xor3 = xor i64 %6, %shr, !dbg !996
  store i64 %xor3, i64* %c, align 8, !dbg !997
  br label %do.cond, !dbg !998

do.cond:                                          ; preds = %do.body
  %8 = load i32, i32* %n.addr, align 4, !dbg !999
  %dec = add i32 %8, -1, !dbg !999
  store i32 %dec, i32* %n.addr, align 4, !dbg !999
  %tobool4 = icmp ne i32 %dec, 0, !dbg !998
  br i1 %tobool4, label %do.body, label %do.end, !dbg !998, !llvm.loop !1000

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !998

if.end:                                           ; preds = %do.end, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %9 = load i64, i64* %c, align 8, !dbg !1002
  store i64 %9, i64* @updcrc.crc, align 8, !dbg !1003
  %10 = load i64, i64* %c, align 8, !dbg !1004
  %xor6 = xor i64 %10, 4294967295, !dbg !1005
  ret i64 %xor6, !dbg !1006
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bi_init(i32 %zipfile) #0 !dbg !1007 {
entry:
  %zipfile.addr = alloca i32, align 4
  store i32 %zipfile, i32* %zipfile.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %zipfile.addr, metadata !1010, metadata !DIExpression()), !dbg !1011
  %0 = load i32, i32* %zipfile.addr, align 4, !dbg !1012
  store i32 %0, i32* @zfile, align 4, !dbg !1013
  store i16 0, i16* @bi_buf, align 2, !dbg !1014
  store i32 0, i32* @bi_valid, align 4, !dbg !1015
  %1 = load i32, i32* @zfile, align 4, !dbg !1016
  %cmp = icmp ne i32 %1, -1, !dbg !1018
  br i1 %cmp, label %if.then, label %if.end, !dbg !1019

if.then:                                          ; preds = %entry
  store i32 (i8*, i32)* @file_read, i32 (i8*, i32)** @read_buf, align 8, !dbg !1020
  br label %if.end, !dbg !1022

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !1023
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ct_init(i16* %attr, i32* %methodp) #0 !dbg !1024 {
entry:
  %attr.addr = alloca i16*, align 8
  %methodp.addr = alloca i32*, align 8
  %n = alloca i32, align 4, !ctir !12
  %bits = alloca i32, align 4, !ctir !12
  %length = alloca i32, align 4, !ctir !12
  %code = alloca i32, align 4, !ctir !12
  %dist = alloca i32, align 4, !ctir !12
  store i16* %attr, i16** %attr.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %attr.addr, metadata !1027, metadata !DIExpression()), !dbg !1028
  store i32* %methodp, i32** %methodp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %methodp.addr, metadata !1029, metadata !DIExpression()), !dbg !1030
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1031, metadata !DIExpression()), !dbg !1032
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !1033, metadata !DIExpression()), !dbg !1034
  call void @llvm.dbg.declare(metadata i32* %length, metadata !1035, metadata !DIExpression()), !dbg !1036
  call void @llvm.dbg.declare(metadata i32* %code, metadata !1037, metadata !DIExpression()), !dbg !1038
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !1039, metadata !DIExpression()), !dbg !1040
  %0 = load i16*, i16** %attr.addr, align 8, !dbg !1041
  store i16* %0, i16** @file_type, align 8, !dbg !1042
  %1 = load i32*, i32** %methodp.addr, align 8, !dbg !1043
  store i32* %1, i32** @file_method, align 8, !dbg !1044
  store i64 0, i64* @input_len, align 8, !dbg !1045
  store i64 0, i64* @compressed_len, align 8, !dbg !1046
  %2 = load i16, i16* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 0, i32 1, i32 0), align 2, !dbg !1047, !ctir !63
  %conv = zext i16 %2 to i32, !dbg !1049
  %cmp = icmp ne i32 %conv, 0, !dbg !1050
  br i1 %cmp, label %if.then, label %if.end, !dbg !1051

if.then:                                          ; preds = %entry
  br label %return, !dbg !1052

if.end:                                           ; preds = %entry
  store i32 0, i32* %length, align 4, !dbg !1053
  store i32 0, i32* %code, align 4, !dbg !1054
  br label %for.cond, !dbg !1056

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %code, align 4, !dbg !1057
  %cmp2 = icmp slt i32 %3, 28, !dbg !1059
  br i1 %cmp2, label %for.body, label %for.end16, !dbg !1060

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %length, align 4, !dbg !1061
  %5 = load i32, i32* %code, align 4, !dbg !1063
  %idxprom = sext i32 %5 to i64, !dbg !1064
  %arrayidx = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i64 0, i64 %idxprom, !dbg !1064, !ctir !251
  store i32 %4, i32* %arrayidx, align 4, !dbg !1065
  store i32 0, i32* %n, align 4, !dbg !1066
  br label %for.cond4, !dbg !1068

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %n, align 4, !dbg !1069
  %7 = load i32, i32* %code, align 4, !dbg !1071
  %idxprom5 = sext i32 %7 to i64, !dbg !1072
  %arrayidx6 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i64 0, i64 %idxprom5, !dbg !1072, !ctir !251
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !1072
  %shl = shl i32 1, %8, !dbg !1073
  %cmp7 = icmp slt i32 %6, %shl, !dbg !1074
  br i1 %cmp7, label %for.body9, label %for.end, !dbg !1075

for.body9:                                        ; preds = %for.cond4
  %9 = load i32, i32* %code, align 4, !dbg !1076
  %conv10 = trunc i32 %9 to i8, !dbg !1078
  %10 = load i32, i32* %length, align 4, !dbg !1079
  %inc = add nsw i32 %10, 1, !dbg !1079
  store i32 %inc, i32* %length, align 4, !dbg !1079
  %idxprom11 = sext i32 %10 to i64, !dbg !1080
  %arrayidx12 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %idxprom11, !dbg !1080, !ctir !254
  store i8 %conv10, i8* %arrayidx12, align 1, !dbg !1081
  br label %for.inc, !dbg !1082

for.inc:                                          ; preds = %for.body9
  %11 = load i32, i32* %n, align 4, !dbg !1083
  %inc13 = add nsw i32 %11, 1, !dbg !1083
  store i32 %inc13, i32* %n, align 4, !dbg !1083
  br label %for.cond4, !dbg !1084, !llvm.loop !1085

for.end:                                          ; preds = %for.cond4
  br label %for.inc14, !dbg !1087

for.inc14:                                        ; preds = %for.end
  %12 = load i32, i32* %code, align 4, !dbg !1088
  %inc15 = add nsw i32 %12, 1, !dbg !1088
  store i32 %inc15, i32* %code, align 4, !dbg !1088
  br label %for.cond, !dbg !1089, !llvm.loop !1090

for.end16:                                        ; preds = %for.cond
  %13 = load i32, i32* %code, align 4, !dbg !1092
  %conv17 = trunc i32 %13 to i8, !dbg !1093
  %14 = load i32, i32* %length, align 4, !dbg !1094
  %sub = sub nsw i32 %14, 1, !dbg !1095
  %idxprom18 = sext i32 %sub to i64, !dbg !1096
  %arrayidx19 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %idxprom18, !dbg !1096, !ctir !254
  store i8 %conv17, i8* %arrayidx19, align 1, !dbg !1097
  store i32 0, i32* %dist, align 4, !dbg !1098
  store i32 0, i32* %code, align 4, !dbg !1099
  br label %for.cond20, !dbg !1101

for.cond20:                                       ; preds = %for.inc40, %for.end16
  %15 = load i32, i32* %code, align 4, !dbg !1102
  %cmp21 = icmp slt i32 %15, 16, !dbg !1104
  br i1 %cmp21, label %for.body23, label %for.end42, !dbg !1105

for.body23:                                       ; preds = %for.cond20
  %16 = load i32, i32* %dist, align 4, !dbg !1106
  %17 = load i32, i32* %code, align 4, !dbg !1108
  %idxprom24 = sext i32 %17 to i64, !dbg !1109
  %arrayidx25 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %idxprom24, !dbg !1109, !ctir !257
  store i32 %16, i32* %arrayidx25, align 4, !dbg !1110
  store i32 0, i32* %n, align 4, !dbg !1111
  br label %for.cond26, !dbg !1113

for.cond26:                                       ; preds = %for.inc37, %for.body23
  %18 = load i32, i32* %n, align 4, !dbg !1114
  %19 = load i32, i32* %code, align 4, !dbg !1116
  %idxprom27 = sext i32 %19 to i64, !dbg !1117
  %arrayidx28 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %idxprom27, !dbg !1117, !ctir !257
  %20 = load i32, i32* %arrayidx28, align 4, !dbg !1117
  %shl29 = shl i32 1, %20, !dbg !1118
  %cmp30 = icmp slt i32 %18, %shl29, !dbg !1119
  br i1 %cmp30, label %for.body32, label %for.end39, !dbg !1120

for.body32:                                       ; preds = %for.cond26
  %21 = load i32, i32* %code, align 4, !dbg !1121
  %conv33 = trunc i32 %21 to i8, !dbg !1123
  %22 = load i32, i32* %dist, align 4, !dbg !1124
  %inc34 = add nsw i32 %22, 1, !dbg !1124
  store i32 %inc34, i32* %dist, align 4, !dbg !1124
  %idxprom35 = sext i32 %22 to i64, !dbg !1125
  %arrayidx36 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom35, !dbg !1125, !ctir !258
  store i8 %conv33, i8* %arrayidx36, align 1, !dbg !1126
  br label %for.inc37, !dbg !1127

for.inc37:                                        ; preds = %for.body32
  %23 = load i32, i32* %n, align 4, !dbg !1128
  %inc38 = add nsw i32 %23, 1, !dbg !1128
  store i32 %inc38, i32* %n, align 4, !dbg !1128
  br label %for.cond26, !dbg !1129, !llvm.loop !1130

for.end39:                                        ; preds = %for.cond26
  br label %for.inc40, !dbg !1132

for.inc40:                                        ; preds = %for.end39
  %24 = load i32, i32* %code, align 4, !dbg !1133
  %inc41 = add nsw i32 %24, 1, !dbg !1133
  store i32 %inc41, i32* %code, align 4, !dbg !1133
  br label %for.cond20, !dbg !1134, !llvm.loop !1135

for.end42:                                        ; preds = %for.cond20
  %25 = load i32, i32* %dist, align 4, !dbg !1137
  %shr = ashr i32 %25, 7, !dbg !1137
  store i32 %shr, i32* %dist, align 4, !dbg !1137
  br label %for.cond43, !dbg !1138

for.cond43:                                       ; preds = %for.inc65, %for.end42
  %26 = load i32, i32* %code, align 4, !dbg !1139
  %cmp44 = icmp slt i32 %26, 30, !dbg !1142
  br i1 %cmp44, label %for.body46, label %for.end67, !dbg !1143

for.body46:                                       ; preds = %for.cond43
  %27 = load i32, i32* %dist, align 4, !dbg !1144
  %shl47 = shl i32 %27, 7, !dbg !1146
  %28 = load i32, i32* %code, align 4, !dbg !1147
  %idxprom48 = sext i32 %28 to i64, !dbg !1148
  %arrayidx49 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %idxprom48, !dbg !1148, !ctir !257
  store i32 %shl47, i32* %arrayidx49, align 4, !dbg !1149
  store i32 0, i32* %n, align 4, !dbg !1150
  br label %for.cond50, !dbg !1152

for.cond50:                                       ; preds = %for.inc62, %for.body46
  %29 = load i32, i32* %n, align 4, !dbg !1153
  %30 = load i32, i32* %code, align 4, !dbg !1155
  %idxprom51 = sext i32 %30 to i64, !dbg !1156
  %arrayidx52 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %idxprom51, !dbg !1156, !ctir !257
  %31 = load i32, i32* %arrayidx52, align 4, !dbg !1156
  %sub53 = sub nsw i32 %31, 7, !dbg !1157
  %shl54 = shl i32 1, %sub53, !dbg !1158
  %cmp55 = icmp slt i32 %29, %shl54, !dbg !1159
  br i1 %cmp55, label %for.body57, label %for.end64, !dbg !1160

for.body57:                                       ; preds = %for.cond50
  %32 = load i32, i32* %code, align 4, !dbg !1161
  %conv58 = trunc i32 %32 to i8, !dbg !1163
  %33 = load i32, i32* %dist, align 4, !dbg !1164
  %inc59 = add nsw i32 %33, 1, !dbg !1164
  store i32 %inc59, i32* %dist, align 4, !dbg !1164
  %add = add nsw i32 256, %33, !dbg !1165
  %idxprom60 = sext i32 %add to i64, !dbg !1166
  %arrayidx61 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom60, !dbg !1166, !ctir !258
  store i8 %conv58, i8* %arrayidx61, align 1, !dbg !1167
  br label %for.inc62, !dbg !1168

for.inc62:                                        ; preds = %for.body57
  %34 = load i32, i32* %n, align 4, !dbg !1169
  %inc63 = add nsw i32 %34, 1, !dbg !1169
  store i32 %inc63, i32* %n, align 4, !dbg !1169
  br label %for.cond50, !dbg !1170, !llvm.loop !1171

for.end64:                                        ; preds = %for.cond50
  br label %for.inc65, !dbg !1173

for.inc65:                                        ; preds = %for.end64
  %35 = load i32, i32* %code, align 4, !dbg !1174
  %inc66 = add nsw i32 %35, 1, !dbg !1174
  store i32 %inc66, i32* %code, align 4, !dbg !1174
  br label %for.cond43, !dbg !1175, !llvm.loop !1176

for.end67:                                        ; preds = %for.cond43
  store i32 0, i32* %bits, align 4, !dbg !1178
  br label %for.cond68, !dbg !1180

for.cond68:                                       ; preds = %for.inc74, %for.end67
  %36 = load i32, i32* %bits, align 4, !dbg !1181
  %cmp69 = icmp sle i32 %36, 15, !dbg !1183
  br i1 %cmp69, label %for.body71, label %for.end76, !dbg !1184

for.body71:                                       ; preds = %for.cond68
  %37 = load i32, i32* %bits, align 4, !dbg !1185
  %idxprom72 = sext i32 %37 to i64, !dbg !1186
  %arrayidx73 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom72, !dbg !1186, !ctir !261
  store i16 0, i16* %arrayidx73, align 2, !dbg !1187
  br label %for.inc74, !dbg !1186

for.inc74:                                        ; preds = %for.body71
  %38 = load i32, i32* %bits, align 4, !dbg !1188
  %inc75 = add nsw i32 %38, 1, !dbg !1188
  store i32 %inc75, i32* %bits, align 4, !dbg !1188
  br label %for.cond68, !dbg !1189, !llvm.loop !1190

for.end76:                                        ; preds = %for.cond68
  store i32 0, i32* %n, align 4, !dbg !1192
  br label %while.cond, !dbg !1193

while.cond:                                       ; preds = %while.body, %for.end76
  %39 = load i32, i32* %n, align 4, !dbg !1194
  %cmp77 = icmp sle i32 %39, 143, !dbg !1195
  br i1 %cmp77, label %while.body, label %while.end, !dbg !1193

while.body:                                       ; preds = %while.cond
  %40 = load i32, i32* %n, align 4, !dbg !1196
  %inc79 = add nsw i32 %40, 1, !dbg !1196
  store i32 %inc79, i32* %n, align 4, !dbg !1196
  %idxprom80 = sext i32 %40 to i64, !dbg !1197
  %arrayidx81 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %idxprom80, !dbg !1197, !ctir !262
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx81, i32 0, i32 1, !dbg !1198, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !1198
  store i16 8, i16* %len, align 2, !dbg !1199, !ctir !63
  %41 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16, !dbg !1200
  %inc82 = add i16 %41, 1, !dbg !1200
  store i16 %inc82, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16, !dbg !1200
  br label %while.cond, !dbg !1193, !llvm.loop !1201

while.end:                                        ; preds = %while.cond
  br label %while.cond83, !dbg !1202

while.cond83:                                     ; preds = %while.body86, %while.end
  %42 = load i32, i32* %n, align 4, !dbg !1203
  %cmp84 = icmp sle i32 %42, 255, !dbg !1204
  br i1 %cmp84, label %while.body86, label %while.end93, !dbg !1202

while.body86:                                     ; preds = %while.cond83
  %43 = load i32, i32* %n, align 4, !dbg !1205
  %inc87 = add nsw i32 %43, 1, !dbg !1205
  store i32 %inc87, i32* %n, align 4, !dbg !1205
  %idxprom88 = sext i32 %43 to i64, !dbg !1206
  %arrayidx89 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %idxprom88, !dbg !1206, !ctir !262
  %dl90 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx89, i32 0, i32 1, !dbg !1207, !ctir !54
  %len91 = bitcast %union.anon.0* %dl90 to i16*, !dbg !1207
  store i16 9, i16* %len91, align 2, !dbg !1208, !ctir !63
  %44 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 9), align 2, !dbg !1209
  %inc92 = add i16 %44, 1, !dbg !1209
  store i16 %inc92, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 9), align 2, !dbg !1209
  br label %while.cond83, !dbg !1202, !llvm.loop !1210

while.end93:                                      ; preds = %while.cond83
  br label %while.cond94, !dbg !1211

while.cond94:                                     ; preds = %while.body97, %while.end93
  %45 = load i32, i32* %n, align 4, !dbg !1212
  %cmp95 = icmp sle i32 %45, 279, !dbg !1213
  br i1 %cmp95, label %while.body97, label %while.end104, !dbg !1211

while.body97:                                     ; preds = %while.cond94
  %46 = load i32, i32* %n, align 4, !dbg !1214
  %inc98 = add nsw i32 %46, 1, !dbg !1214
  store i32 %inc98, i32* %n, align 4, !dbg !1214
  %idxprom99 = sext i32 %46 to i64, !dbg !1215
  %arrayidx100 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %idxprom99, !dbg !1215, !ctir !262
  %dl101 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx100, i32 0, i32 1, !dbg !1216, !ctir !54
  %len102 = bitcast %union.anon.0* %dl101 to i16*, !dbg !1216
  store i16 7, i16* %len102, align 2, !dbg !1217, !ctir !63
  %47 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 7), align 2, !dbg !1218
  %inc103 = add i16 %47, 1, !dbg !1218
  store i16 %inc103, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 7), align 2, !dbg !1218
  br label %while.cond94, !dbg !1211, !llvm.loop !1219

while.end104:                                     ; preds = %while.cond94
  br label %while.cond105, !dbg !1220

while.cond105:                                    ; preds = %while.body108, %while.end104
  %48 = load i32, i32* %n, align 4, !dbg !1221
  %cmp106 = icmp sle i32 %48, 287, !dbg !1222
  br i1 %cmp106, label %while.body108, label %while.end115, !dbg !1220

while.body108:                                    ; preds = %while.cond105
  %49 = load i32, i32* %n, align 4, !dbg !1223
  %inc109 = add nsw i32 %49, 1, !dbg !1223
  store i32 %inc109, i32* %n, align 4, !dbg !1223
  %idxprom110 = sext i32 %49 to i64, !dbg !1224
  %arrayidx111 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %idxprom110, !dbg !1224, !ctir !262
  %dl112 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx111, i32 0, i32 1, !dbg !1225, !ctir !54
  %len113 = bitcast %union.anon.0* %dl112 to i16*, !dbg !1225
  store i16 8, i16* %len113, align 2, !dbg !1226, !ctir !63
  %50 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16, !dbg !1227
  %inc114 = add i16 %50, 1, !dbg !1227
  store i16 %inc114, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16, !dbg !1227
  br label %while.cond105, !dbg !1220, !llvm.loop !1228

while.end115:                                     ; preds = %while.cond105
  call void @gen_codes(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 0), i32 287), !dbg !1229
  store i32 0, i32* %n, align 4, !dbg !1230
  br label %for.cond116, !dbg !1232

for.cond116:                                      ; preds = %for.inc128, %while.end115
  %51 = load i32, i32* %n, align 4, !dbg !1233
  %cmp117 = icmp slt i32 %51, 30, !dbg !1235
  br i1 %cmp117, label %for.body119, label %for.end130, !dbg !1236

for.body119:                                      ; preds = %for.cond116
  %52 = load i32, i32* %n, align 4, !dbg !1237
  %idxprom120 = sext i32 %52 to i64, !dbg !1239
  %arrayidx121 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 %idxprom120, !dbg !1239, !ctir !250
  %dl122 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx121, i32 0, i32 1, !dbg !1240, !ctir !54
  %len123 = bitcast %union.anon.0* %dl122 to i16*, !dbg !1240
  store i16 5, i16* %len123, align 2, !dbg !1241, !ctir !63
  %53 = load i32, i32* %n, align 4, !dbg !1242
  %call = call i32 @bi_reverse(i32 %53, i32 5), !dbg !1243
  %conv124 = trunc i32 %call to i16, !dbg !1243
  %54 = load i32, i32* %n, align 4, !dbg !1244
  %idxprom125 = sext i32 %54 to i64, !dbg !1245
  %arrayidx126 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 %idxprom125, !dbg !1245, !ctir !250
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx126, i32 0, i32 0, !dbg !1246, !ctir !54
  %code127 = bitcast %union.anon.0* %fc to i16*, !dbg !1246
  store i16 %conv124, i16* %code127, align 4, !dbg !1247, !ctir !58
  br label %for.inc128, !dbg !1248

for.inc128:                                       ; preds = %for.body119
  %55 = load i32, i32* %n, align 4, !dbg !1249
  %inc129 = add nsw i32 %55, 1, !dbg !1249
  store i32 %inc129, i32* %n, align 4, !dbg !1249
  br label %for.cond116, !dbg !1250, !llvm.loop !1251

for.end130:                                       ; preds = %for.cond116
  call void @init_block(), !dbg !1253
  br label %return, !dbg !1254

return:                                           ; preds = %for.end130, %if.then
  ret void, !dbg !1254
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @lm_init(i32 %pack_level, i16* %flags) #0 !dbg !1255 {
entry:
  %pack_level.addr = alloca i32, align 4
  %flags.addr = alloca i16*, align 8
  %j = alloca i32, align 4, !ctir !6
  store i32 %pack_level, i32* %pack_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pack_level.addr, metadata !1258, metadata !DIExpression()), !dbg !1259
  store i16* %flags, i16** %flags.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %flags.addr, metadata !1260, metadata !DIExpression()), !dbg !1261
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1262, metadata !DIExpression()), !dbg !1263
  %0 = load i32, i32* %pack_level.addr, align 4, !dbg !1264
  %cmp = icmp slt i32 %0, 1, !dbg !1266
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1267

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %pack_level.addr, align 4, !dbg !1268
  %cmp1 = icmp sgt i32 %1, 9, !dbg !1269
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1270

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)), !dbg !1271
  br label %if.end, !dbg !1271

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load i32, i32* %pack_level.addr, align 4, !dbg !1272
  store i32 %2, i32* @compr_level, align 4, !dbg !1273
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast (i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768) to i8*), i8 0, i64 65536, i1 false), !dbg !1274
  store i64 4294967295, i64* @rsync_chunk_end, align 8, !dbg !1275
  store i64 0, i64* @rsync_sum, align 8, !dbg !1276
  %3 = load i32, i32* %pack_level.addr, align 4, !dbg !1277
  %idxprom = sext i32 %3 to i64, !dbg !1278
  %arrayidx = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %idxprom, !dbg !1278, !ctir !156
  %max_lazy = getelementptr inbounds %struct.config, %struct.config* %arrayidx, i32 0, i32 1, !dbg !1279, !ctir !157
  %4 = load i16, i16* %max_lazy, align 2, !dbg !1279, !ctir !15
  %conv = zext i16 %4 to i32, !dbg !1278
  store i32 %conv, i32* @max_lazy_match, align 4, !dbg !1280
  %5 = load i32, i32* %pack_level.addr, align 4, !dbg !1281
  %idxprom2 = sext i32 %5 to i64, !dbg !1282
  %arrayidx3 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %idxprom2, !dbg !1282, !ctir !156
  %good_length = getelementptr inbounds %struct.config, %struct.config* %arrayidx3, i32 0, i32 0, !dbg !1283, !ctir !157
  %6 = load i16, i16* %good_length, align 8, !dbg !1283, !ctir !15
  %conv4 = zext i16 %6 to i32, !dbg !1282
  store i32 %conv4, i32* @good_match, align 4, !dbg !1284
  %7 = load i32, i32* %pack_level.addr, align 4, !dbg !1285
  %idxprom5 = sext i32 %7 to i64, !dbg !1286
  %arrayidx6 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %idxprom5, !dbg !1286, !ctir !156
  %nice_length = getelementptr inbounds %struct.config, %struct.config* %arrayidx6, i32 0, i32 2, !dbg !1287, !ctir !157
  %8 = load i16, i16* %nice_length, align 4, !dbg !1287, !ctir !15
  %conv7 = zext i16 %8 to i32, !dbg !1286
  store i32 %conv7, i32* @nice_match, align 4, !dbg !1288
  %9 = load i32, i32* %pack_level.addr, align 4, !dbg !1289
  %idxprom8 = sext i32 %9 to i64, !dbg !1290
  %arrayidx9 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %idxprom8, !dbg !1290, !ctir !156
  %max_chain = getelementptr inbounds %struct.config, %struct.config* %arrayidx9, i32 0, i32 3, !dbg !1291, !ctir !157
  %10 = load i16, i16* %max_chain, align 2, !dbg !1291, !ctir !15
  %conv10 = zext i16 %10 to i32, !dbg !1290
  store i32 %conv10, i32* @max_chain_length, align 4, !dbg !1292
  %11 = load i32, i32* %pack_level.addr, align 4, !dbg !1293
  %cmp11 = icmp eq i32 %11, 1, !dbg !1295
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !1296

if.then13:                                        ; preds = %if.end
  %12 = load i16*, i16** %flags.addr, align 8, !dbg !1297
  %13 = load i16, i16* %12, align 2, !dbg !1299, !ctir !15
  %conv14 = zext i16 %13 to i32, !dbg !1299
  %or = or i32 %conv14, 4, !dbg !1299
  %conv15 = trunc i32 %or to i16, !dbg !1299
  store i16 %conv15, i16* %12, align 2, !dbg !1299, !ctir !15
  br label %if.end23, !dbg !1300

if.else:                                          ; preds = %if.end
  %14 = load i32, i32* %pack_level.addr, align 4, !dbg !1301
  %cmp16 = icmp eq i32 %14, 9, !dbg !1303
  br i1 %cmp16, label %if.then18, label %if.end22, !dbg !1304

if.then18:                                        ; preds = %if.else
  %15 = load i16*, i16** %flags.addr, align 8, !dbg !1305
  %16 = load i16, i16* %15, align 2, !dbg !1307, !ctir !15
  %conv19 = zext i16 %16 to i32, !dbg !1307
  %or20 = or i32 %conv19, 2, !dbg !1307
  %conv21 = trunc i32 %or20 to i16, !dbg !1307
  store i16 %conv21, i16* %15, align 2, !dbg !1307, !ctir !15
  br label %if.end22, !dbg !1308

if.end22:                                         ; preds = %if.then18, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then13
  store i32 0, i32* @strstart, align 4, !dbg !1309
  store i64 0, i64* @block_start, align 8, !dbg !1310
  %17 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 8, !dbg !1311
  %call = call i32 %17(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 65536), !dbg !1311
  store i32 %call, i32* @lookahead, align 4, !dbg !1312
  %18 = load i32, i32* @lookahead, align 4, !dbg !1313
  %cmp24 = icmp eq i32 %18, 0, !dbg !1315
  br i1 %cmp24, label %if.then29, label %lor.lhs.false26, !dbg !1316

lor.lhs.false26:                                  ; preds = %if.end23
  %19 = load i32, i32* @lookahead, align 4, !dbg !1317
  %cmp27 = icmp eq i32 %19, -1, !dbg !1318
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !1319

if.then29:                                        ; preds = %lor.lhs.false26, %if.end23
  store i32 1, i32* @eofile, align 4, !dbg !1320
  store i32 0, i32* @lookahead, align 4, !dbg !1322
  br label %for.end, !dbg !1323

if.end30:                                         ; preds = %lor.lhs.false26
  store i32 0, i32* @eofile, align 4, !dbg !1324
  br label %while.cond, !dbg !1325

while.cond:                                       ; preds = %while.body, %if.end30
  %20 = load i32, i32* @lookahead, align 4, !dbg !1326
  %cmp31 = icmp ult i32 %20, 262, !dbg !1327
  br i1 %cmp31, label %land.rhs, label %land.end, !dbg !1328

land.rhs:                                         ; preds = %while.cond
  %21 = load i32, i32* @eofile, align 4, !dbg !1329
  %tobool = icmp ne i32 %21, 0, !dbg !1330
  %lnot = xor i1 %tobool, true, !dbg !1330
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %22 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !1331
  br i1 %22, label %while.body, label %while.end, !dbg !1325

while.body:                                       ; preds = %land.end
  call void @fill_window(), !dbg !1332
  br label %while.cond, !dbg !1325, !llvm.loop !1333

while.end:                                        ; preds = %land.end
  store i32 0, i32* @ins_h, align 4, !dbg !1335
  store i32 0, i32* %j, align 4, !dbg !1336
  br label %for.cond, !dbg !1338

for.cond:                                         ; preds = %for.inc, %while.end
  %23 = load i32, i32* %j, align 4, !dbg !1339
  %cmp33 = icmp ult i32 %23, 2, !dbg !1341
  br i1 %cmp33, label %for.body, label %for.end, !dbg !1342

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* @ins_h, align 4, !dbg !1343
  %shl = shl i32 %24, 5, !dbg !1343
  %25 = load i32, i32* %j, align 4, !dbg !1343
  %idxprom35 = zext i32 %25 to i64, !dbg !1343
  %arrayidx36 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom35, !dbg !1343, !ctir !149
  %26 = load i8, i8* %arrayidx36, align 1, !dbg !1343
  %conv37 = zext i8 %26 to i32, !dbg !1343
  %xor = xor i32 %shl, %conv37, !dbg !1343
  %and = and i32 %xor, 32767, !dbg !1343
  store i32 %and, i32* @ins_h, align 4, !dbg !1343
  br label %for.inc, !dbg !1343

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %j, align 4, !dbg !1344
  %inc = add i32 %27, 1, !dbg !1344
  store i32 %inc, i32* %j, align 4, !dbg !1344
  br label %for.cond, !dbg !1345, !llvm.loop !1346

for.end:                                          ; preds = %if.then29, %for.cond
  ret void, !dbg !1348
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @base_name(i8* %fname) #0 !dbg !1349 {
entry:
  %fname.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !19
  store i8* %fname, i8** %fname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fname.addr, metadata !1350, metadata !DIExpression()), !dbg !1351
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1352, metadata !DIExpression()), !dbg !1353
  %0 = load i8*, i8** %fname.addr, align 8, !dbg !1354
  %call = call i8* @strrchr(i8* %0, i32 47) #9, !dbg !1356
  store i8* %call, i8** %p, align 8, !dbg !1357
  %cmp = icmp ne i8* %call, null, !dbg !1358
  br i1 %cmp, label %if.then, label %if.end, !dbg !1359

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %p, align 8, !dbg !1360
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !1361, !ctir !20
  store i8* %add.ptr, i8** %fname.addr, align 8, !dbg !1362
  br label %if.end, !dbg !1363

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %fname.addr, align 8, !dbg !1364
  ret i8* %2, !dbg !1365
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @deflate() #0 !dbg !1366 {
entry:
  %retval = alloca i64, align 8
  %hash_head = alloca i32, align 4, !ctir !21
  %prev_match = alloca i32, align 4, !ctir !21
  %flush = alloca i32, align 4, !ctir !12
  %match_available = alloca i32, align 4, !ctir !12
  %match_length = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %hash_head, metadata !1369, metadata !DIExpression()), !dbg !1370
  call void @llvm.dbg.declare(metadata i32* %prev_match, metadata !1371, metadata !DIExpression()), !dbg !1372
  call void @llvm.dbg.declare(metadata i32* %flush, metadata !1373, metadata !DIExpression()), !dbg !1374
  call void @llvm.dbg.declare(metadata i32* %match_available, metadata !1375, metadata !DIExpression()), !dbg !1376
  store i32 0, i32* %match_available, align 4, !dbg !1376
  call void @llvm.dbg.declare(metadata i32* %match_length, metadata !1377, metadata !DIExpression()), !dbg !1378
  store i32 2, i32* %match_length, align 4, !dbg !1378
  %0 = load i32, i32* @compr_level, align 4, !dbg !1379
  %cmp = icmp sle i32 %0, 3, !dbg !1381
  br i1 %cmp, label %if.then, label %if.end, !dbg !1382

if.then:                                          ; preds = %entry
  %call = call i64 @deflate_fast(), !dbg !1383
  store i64 %call, i64* %retval, align 8, !dbg !1384
  br label %return, !dbg !1384

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !1385

while.cond:                                       ; preds = %while.end, %if.end
  %1 = load i32, i32* @lookahead, align 4, !dbg !1386
  %cmp1 = icmp ne i32 %1, 0, !dbg !1387
  br i1 %cmp1, label %while.body, label %while.end176, !dbg !1385

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* @ins_h, align 4, !dbg !1388
  %shl = shl i32 %2, 5, !dbg !1388
  %3 = load i32, i32* @strstart, align 4, !dbg !1388
  %add = add i32 %3, 3, !dbg !1388
  %sub = sub i32 %add, 1, !dbg !1388
  %idxprom = zext i32 %sub to i64, !dbg !1388
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom, !dbg !1388, !ctir !149
  %4 = load i8, i8* %arrayidx, align 1, !dbg !1388
  %conv = zext i8 %4 to i32, !dbg !1388
  %xor = xor i32 %shl, %conv, !dbg !1388
  %and = and i32 %xor, 32767, !dbg !1388
  store i32 %and, i32* @ins_h, align 4, !dbg !1388
  %5 = load i32, i32* @ins_h, align 4, !dbg !1388
  %idxprom2 = zext i32 %5 to i64, !dbg !1388
  %arrayidx3 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom2, !dbg !1388, !ctir !166
  %6 = load i16, i16* %arrayidx3, align 2, !dbg !1388
  %conv4 = zext i16 %6 to i32, !dbg !1388
  store i32 %conv4, i32* %hash_head, align 4, !dbg !1388
  %conv5 = trunc i32 %conv4 to i16, !dbg !1388
  %7 = load i32, i32* @strstart, align 4, !dbg !1388
  %and6 = and i32 %7, 32767, !dbg !1388
  %idxprom7 = zext i32 %and6 to i64, !dbg !1388
  %arrayidx8 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom7, !dbg !1388, !ctir !155
  store i16 %conv5, i16* %arrayidx8, align 2, !dbg !1388
  %8 = load i32, i32* @strstart, align 4, !dbg !1388
  %conv9 = trunc i32 %8 to i16, !dbg !1388
  %9 = load i32, i32* @ins_h, align 4, !dbg !1388
  %idxprom10 = zext i32 %9 to i64, !dbg !1388
  %arrayidx11 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom10, !dbg !1388, !ctir !166
  store i16 %conv9, i16* %arrayidx11, align 2, !dbg !1388
  %10 = load i32, i32* %match_length, align 4, !dbg !1390
  store i32 %10, i32* @prev_length, align 4, !dbg !1391
  %11 = load i32, i32* @match_start, align 4, !dbg !1392
  store i32 %11, i32* %prev_match, align 4, !dbg !1393
  store i32 2, i32* %match_length, align 4, !dbg !1394
  %12 = load i32, i32* %hash_head, align 4, !dbg !1395
  %cmp12 = icmp ne i32 %12, 0, !dbg !1397
  br i1 %cmp12, label %land.lhs.true, label %if.end39, !dbg !1398

land.lhs.true:                                    ; preds = %while.body
  %13 = load i32, i32* @prev_length, align 4, !dbg !1399
  %14 = load i32, i32* @max_lazy_match, align 4, !dbg !1400
  %cmp14 = icmp ult i32 %13, %14, !dbg !1401
  br i1 %cmp14, label %land.lhs.true16, label %if.end39, !dbg !1402

land.lhs.true16:                                  ; preds = %land.lhs.true
  %15 = load i32, i32* @strstart, align 4, !dbg !1403
  %16 = load i32, i32* %hash_head, align 4, !dbg !1404
  %sub17 = sub i32 %15, %16, !dbg !1405
  %cmp18 = icmp ule i32 %sub17, 32506, !dbg !1406
  br i1 %cmp18, label %land.lhs.true20, label %if.end39, !dbg !1407

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %17 = load i32, i32* @strstart, align 4, !dbg !1408
  %conv21 = zext i32 %17 to i64, !dbg !1408
  %18 = load i64, i64* @window_size, align 8, !dbg !1409
  %sub22 = sub i64 %18, 262, !dbg !1410
  %cmp23 = icmp ule i64 %conv21, %sub22, !dbg !1411
  br i1 %cmp23, label %if.then25, label %if.end39, !dbg !1412

if.then25:                                        ; preds = %land.lhs.true20
  %19 = load i32, i32* %hash_head, align 4, !dbg !1413
  %call26 = call i32 @longest_match(i32 %19), !dbg !1415
  store i32 %call26, i32* %match_length, align 4, !dbg !1416
  %20 = load i32, i32* %match_length, align 4, !dbg !1417
  %21 = load i32, i32* @lookahead, align 4, !dbg !1419
  %cmp27 = icmp ugt i32 %20, %21, !dbg !1420
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !1421

if.then29:                                        ; preds = %if.then25
  %22 = load i32, i32* @lookahead, align 4, !dbg !1422
  store i32 %22, i32* %match_length, align 4, !dbg !1423
  br label %if.end30, !dbg !1424

if.end30:                                         ; preds = %if.then29, %if.then25
  %23 = load i32, i32* %match_length, align 4, !dbg !1425
  %cmp31 = icmp eq i32 %23, 3, !dbg !1427
  br i1 %cmp31, label %land.lhs.true33, label %if.end38, !dbg !1428

land.lhs.true33:                                  ; preds = %if.end30
  %24 = load i32, i32* @strstart, align 4, !dbg !1429
  %25 = load i32, i32* @match_start, align 4, !dbg !1430
  %sub34 = sub i32 %24, %25, !dbg !1431
  %cmp35 = icmp ugt i32 %sub34, 4096, !dbg !1432
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !1433

if.then37:                                        ; preds = %land.lhs.true33
  %26 = load i32, i32* %match_length, align 4, !dbg !1434
  %dec = add i32 %26, -1, !dbg !1434
  store i32 %dec, i32* %match_length, align 4, !dbg !1434
  br label %if.end38, !dbg !1436

if.end38:                                         ; preds = %if.then37, %land.lhs.true33, %if.end30
  br label %if.end39, !dbg !1437

if.end39:                                         ; preds = %if.end38, %land.lhs.true20, %land.lhs.true16, %land.lhs.true, %while.body
  %27 = load i32, i32* @prev_length, align 4, !dbg !1438
  %cmp40 = icmp uge i32 %27, 3, !dbg !1440
  br i1 %cmp40, label %land.lhs.true42, label %if.else, !dbg !1441

land.lhs.true42:                                  ; preds = %if.end39
  %28 = load i32, i32* %match_length, align 4, !dbg !1442
  %29 = load i32, i32* @prev_length, align 4, !dbg !1443
  %cmp43 = icmp ule i32 %28, %29, !dbg !1444
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !1445

if.then45:                                        ; preds = %land.lhs.true42
  %30 = load i32, i32* @strstart, align 4, !dbg !1446
  %sub46 = sub i32 %30, 1, !dbg !1448
  %31 = load i32, i32* %prev_match, align 4, !dbg !1449
  %sub47 = sub i32 %sub46, %31, !dbg !1450
  %32 = load i32, i32* @prev_length, align 4, !dbg !1451
  %sub48 = sub i32 %32, 3, !dbg !1452
  %call49 = call i32 @ct_tally(i32 %sub47, i32 %sub48), !dbg !1453
  store i32 %call49, i32* %flush, align 4, !dbg !1454
  %33 = load i32, i32* @prev_length, align 4, !dbg !1455
  %sub50 = sub i32 %33, 1, !dbg !1456
  %34 = load i32, i32* @lookahead, align 4, !dbg !1457
  %sub51 = sub i32 %34, %sub50, !dbg !1457
  store i32 %sub51, i32* @lookahead, align 4, !dbg !1457
  %35 = load i32, i32* @prev_length, align 4, !dbg !1458
  %sub52 = sub i32 %35, 2, !dbg !1458
  store i32 %sub52, i32* @prev_length, align 4, !dbg !1458
  br label %do.body, !dbg !1459

do.body:                                          ; preds = %if.then45
  %36 = load i32, i32* @rsync, align 4, !dbg !1460
  %tobool = icmp ne i32 %36, 0, !dbg !1460
  br i1 %tobool, label %if.then53, label %if.end55, !dbg !1463

if.then53:                                        ; preds = %do.body
  %37 = load i32, i32* @strstart, align 4, !dbg !1460
  %38 = load i32, i32* @prev_length, align 4, !dbg !1460
  %add54 = add i32 %38, 1, !dbg !1460
  call void @rsync_roll(i32 %37, i32 %add54), !dbg !1460
  br label %if.end55, !dbg !1460

if.end55:                                         ; preds = %if.then53, %do.body
  br label %do.end, !dbg !1463

do.end:                                           ; preds = %if.end55
  br label %do.body56, !dbg !1464

do.body56:                                        ; preds = %do.cond, %do.end
  %39 = load i32, i32* @strstart, align 4, !dbg !1465
  %inc = add i32 %39, 1, !dbg !1465
  store i32 %inc, i32* @strstart, align 4, !dbg !1465
  %40 = load i32, i32* @ins_h, align 4, !dbg !1467
  %shl57 = shl i32 %40, 5, !dbg !1467
  %41 = load i32, i32* @strstart, align 4, !dbg !1467
  %add58 = add i32 %41, 3, !dbg !1467
  %sub59 = sub i32 %add58, 1, !dbg !1467
  %idxprom60 = zext i32 %sub59 to i64, !dbg !1467
  %arrayidx61 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom60, !dbg !1467, !ctir !149
  %42 = load i8, i8* %arrayidx61, align 1, !dbg !1467
  %conv62 = zext i8 %42 to i32, !dbg !1467
  %xor63 = xor i32 %shl57, %conv62, !dbg !1467
  %and64 = and i32 %xor63, 32767, !dbg !1467
  store i32 %and64, i32* @ins_h, align 4, !dbg !1467
  %43 = load i32, i32* @ins_h, align 4, !dbg !1467
  %idxprom65 = zext i32 %43 to i64, !dbg !1467
  %arrayidx66 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom65, !dbg !1467, !ctir !166
  %44 = load i16, i16* %arrayidx66, align 2, !dbg !1467
  %conv67 = zext i16 %44 to i32, !dbg !1467
  store i32 %conv67, i32* %hash_head, align 4, !dbg !1467
  %conv68 = trunc i32 %conv67 to i16, !dbg !1467
  %45 = load i32, i32* @strstart, align 4, !dbg !1467
  %and69 = and i32 %45, 32767, !dbg !1467
  %idxprom70 = zext i32 %and69 to i64, !dbg !1467
  %arrayidx71 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom70, !dbg !1467, !ctir !155
  store i16 %conv68, i16* %arrayidx71, align 2, !dbg !1467
  %46 = load i32, i32* @strstart, align 4, !dbg !1467
  %conv72 = trunc i32 %46 to i16, !dbg !1467
  %47 = load i32, i32* @ins_h, align 4, !dbg !1467
  %idxprom73 = zext i32 %47 to i64, !dbg !1467
  %arrayidx74 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom73, !dbg !1467, !ctir !166
  store i16 %conv72, i16* %arrayidx74, align 2, !dbg !1467
  br label %do.cond, !dbg !1468

do.cond:                                          ; preds = %do.body56
  %48 = load i32, i32* @prev_length, align 4, !dbg !1469
  %dec75 = add i32 %48, -1, !dbg !1469
  store i32 %dec75, i32* @prev_length, align 4, !dbg !1469
  %cmp76 = icmp ne i32 %dec75, 0, !dbg !1470
  br i1 %cmp76, label %do.body56, label %do.end78, !dbg !1468, !llvm.loop !1471

do.end78:                                         ; preds = %do.cond
  store i32 0, i32* %match_available, align 4, !dbg !1473
  store i32 2, i32* %match_length, align 4, !dbg !1474
  %49 = load i32, i32* @strstart, align 4, !dbg !1475
  %inc79 = add i32 %49, 1, !dbg !1475
  store i32 %inc79, i32* @strstart, align 4, !dbg !1475
  %50 = load i32, i32* @rsync, align 4, !dbg !1476
  %tobool80 = icmp ne i32 %50, 0, !dbg !1476
  br i1 %tobool80, label %land.lhs.true81, label %if.end86, !dbg !1478

land.lhs.true81:                                  ; preds = %do.end78
  %51 = load i32, i32* @strstart, align 4, !dbg !1479
  %conv82 = zext i32 %51 to i64, !dbg !1479
  %52 = load i64, i64* @rsync_chunk_end, align 8, !dbg !1480
  %cmp83 = icmp ugt i64 %conv82, %52, !dbg !1481
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !1482

if.then85:                                        ; preds = %land.lhs.true81
  store i64 4294967295, i64* @rsync_chunk_end, align 8, !dbg !1483
  store i32 2, i32* %flush, align 4, !dbg !1485
  br label %if.end86, !dbg !1486

if.end86:                                         ; preds = %if.then85, %land.lhs.true81, %do.end78
  %53 = load i32, i32* %flush, align 4, !dbg !1487
  %tobool87 = icmp ne i32 %53, 0, !dbg !1487
  br i1 %tobool87, label %if.then88, label %if.end99, !dbg !1489

if.then88:                                        ; preds = %if.end86
  %54 = load i64, i64* @block_start, align 8, !dbg !1490
  %cmp89 = icmp sge i64 %54, 0, !dbg !1490
  br i1 %cmp89, label %cond.true, label %cond.false, !dbg !1490

cond.true:                                        ; preds = %if.then88
  %55 = load i64, i64* @block_start, align 8, !dbg !1490
  %conv91 = trunc i64 %55 to i32, !dbg !1490
  %idxprom92 = zext i32 %conv91 to i64, !dbg !1490
  %arrayidx93 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom92, !dbg !1490, !ctir !149
  br label %cond.end, !dbg !1490

cond.false:                                       ; preds = %if.then88
  br label %cond.end, !dbg !1490

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arrayidx93, %cond.true ], [ null, %cond.false ], !dbg !1490
  %56 = load i32, i32* @strstart, align 4, !dbg !1490
  %conv94 = zext i32 %56 to i64, !dbg !1490
  %57 = load i64, i64* @block_start, align 8, !dbg !1490
  %sub95 = sub nsw i64 %conv94, %57, !dbg !1490
  %58 = load i32, i32* %flush, align 4, !dbg !1490
  %sub96 = sub nsw i32 %58, 1, !dbg !1490
  %call97 = call i64 @flush_block(i8* %cond, i64 %sub95, i32 %sub96, i32 0), !dbg !1490
  %59 = load i32, i32* @strstart, align 4, !dbg !1491
  %conv98 = zext i32 %59 to i64, !dbg !1491
  store i64 %conv98, i64* @block_start, align 8, !dbg !1492
  br label %if.end99, !dbg !1490

if.end99:                                         ; preds = %cond.end, %if.end86
  br label %if.end170, !dbg !1493

if.else:                                          ; preds = %land.lhs.true42, %if.end39
  %60 = load i32, i32* %match_available, align 4, !dbg !1494
  %tobool100 = icmp ne i32 %60, 0, !dbg !1494
  br i1 %tobool100, label %if.then101, label %if.else139, !dbg !1496

if.then101:                                       ; preds = %if.else
  %61 = load i32, i32* @strstart, align 4, !dbg !1497
  %sub102 = sub i32 %61, 1, !dbg !1499
  %idxprom103 = zext i32 %sub102 to i64, !dbg !1500
  %arrayidx104 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom103, !dbg !1500, !ctir !149
  %62 = load i8, i8* %arrayidx104, align 1, !dbg !1500
  %conv105 = zext i8 %62 to i32, !dbg !1500
  %call106 = call i32 @ct_tally(i32 0, i32 %conv105), !dbg !1501
  store i32 %call106, i32* %flush, align 4, !dbg !1502
  %63 = load i32, i32* @rsync, align 4, !dbg !1503
  %tobool107 = icmp ne i32 %63, 0, !dbg !1503
  br i1 %tobool107, label %land.lhs.true108, label %if.end113, !dbg !1505

land.lhs.true108:                                 ; preds = %if.then101
  %64 = load i32, i32* @strstart, align 4, !dbg !1506
  %conv109 = zext i32 %64 to i64, !dbg !1506
  %65 = load i64, i64* @rsync_chunk_end, align 8, !dbg !1507
  %cmp110 = icmp ugt i64 %conv109, %65, !dbg !1508
  br i1 %cmp110, label %if.then112, label %if.end113, !dbg !1509

if.then112:                                       ; preds = %land.lhs.true108
  store i64 4294967295, i64* @rsync_chunk_end, align 8, !dbg !1510
  store i32 2, i32* %flush, align 4, !dbg !1512
  br label %if.end113, !dbg !1513

if.end113:                                        ; preds = %if.then112, %land.lhs.true108, %if.then101
  %66 = load i32, i32* %flush, align 4, !dbg !1514
  %tobool114 = icmp ne i32 %66, 0, !dbg !1514
  br i1 %tobool114, label %if.then115, label %if.end130, !dbg !1516

if.then115:                                       ; preds = %if.end113
  %67 = load i64, i64* @block_start, align 8, !dbg !1517
  %cmp116 = icmp sge i64 %67, 0, !dbg !1517
  br i1 %cmp116, label %cond.true118, label %cond.false122, !dbg !1517

cond.true118:                                     ; preds = %if.then115
  %68 = load i64, i64* @block_start, align 8, !dbg !1517
  %conv119 = trunc i64 %68 to i32, !dbg !1517
  %idxprom120 = zext i32 %conv119 to i64, !dbg !1517
  %arrayidx121 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom120, !dbg !1517, !ctir !149
  br label %cond.end123, !dbg !1517

cond.false122:                                    ; preds = %if.then115
  br label %cond.end123, !dbg !1517

cond.end123:                                      ; preds = %cond.false122, %cond.true118
  %cond124 = phi i8* [ %arrayidx121, %cond.true118 ], [ null, %cond.false122 ], !dbg !1517
  %69 = load i32, i32* @strstart, align 4, !dbg !1517
  %conv125 = zext i32 %69 to i64, !dbg !1517
  %70 = load i64, i64* @block_start, align 8, !dbg !1517
  %sub126 = sub nsw i64 %conv125, %70, !dbg !1517
  %71 = load i32, i32* %flush, align 4, !dbg !1517
  %sub127 = sub nsw i32 %71, 1, !dbg !1517
  %call128 = call i64 @flush_block(i8* %cond124, i64 %sub126, i32 %sub127, i32 0), !dbg !1517
  %72 = load i32, i32* @strstart, align 4, !dbg !1518
  %conv129 = zext i32 %72 to i64, !dbg !1518
  store i64 %conv129, i64* @block_start, align 8, !dbg !1519
  br label %if.end130, !dbg !1517

if.end130:                                        ; preds = %cond.end123, %if.end113
  br label %do.body131, !dbg !1520

do.body131:                                       ; preds = %if.end130
  %73 = load i32, i32* @rsync, align 4, !dbg !1521
  %tobool132 = icmp ne i32 %73, 0, !dbg !1521
  br i1 %tobool132, label %if.then133, label %if.end134, !dbg !1524

if.then133:                                       ; preds = %do.body131
  %74 = load i32, i32* @strstart, align 4, !dbg !1521
  call void @rsync_roll(i32 %74, i32 1), !dbg !1521
  br label %if.end134, !dbg !1521

if.end134:                                        ; preds = %if.then133, %do.body131
  br label %do.end136, !dbg !1524

do.end136:                                        ; preds = %if.end134
  %75 = load i32, i32* @strstart, align 4, !dbg !1525
  %inc137 = add i32 %75, 1, !dbg !1525
  store i32 %inc137, i32* @strstart, align 4, !dbg !1525
  %76 = load i32, i32* @lookahead, align 4, !dbg !1526
  %dec138 = add i32 %76, -1, !dbg !1526
  store i32 %dec138, i32* @lookahead, align 4, !dbg !1526
  br label %if.end169, !dbg !1527

if.else139:                                       ; preds = %if.else
  %77 = load i32, i32* @rsync, align 4, !dbg !1528
  %tobool140 = icmp ne i32 %77, 0, !dbg !1528
  br i1 %tobool140, label %land.lhs.true141, label %if.end160, !dbg !1531

land.lhs.true141:                                 ; preds = %if.else139
  %78 = load i32, i32* @strstart, align 4, !dbg !1532
  %conv142 = zext i32 %78 to i64, !dbg !1532
  %79 = load i64, i64* @rsync_chunk_end, align 8, !dbg !1533
  %cmp143 = icmp ugt i64 %conv142, %79, !dbg !1534
  br i1 %cmp143, label %if.then145, label %if.end160, !dbg !1535

if.then145:                                       ; preds = %land.lhs.true141
  store i64 4294967295, i64* @rsync_chunk_end, align 8, !dbg !1536
  store i32 2, i32* %flush, align 4, !dbg !1538
  %80 = load i64, i64* @block_start, align 8, !dbg !1539
  %cmp146 = icmp sge i64 %80, 0, !dbg !1539
  br i1 %cmp146, label %cond.true148, label %cond.false152, !dbg !1539

cond.true148:                                     ; preds = %if.then145
  %81 = load i64, i64* @block_start, align 8, !dbg !1539
  %conv149 = trunc i64 %81 to i32, !dbg !1539
  %idxprom150 = zext i32 %conv149 to i64, !dbg !1539
  %arrayidx151 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom150, !dbg !1539, !ctir !149
  br label %cond.end153, !dbg !1539

cond.false152:                                    ; preds = %if.then145
  br label %cond.end153, !dbg !1539

cond.end153:                                      ; preds = %cond.false152, %cond.true148
  %cond154 = phi i8* [ %arrayidx151, %cond.true148 ], [ null, %cond.false152 ], !dbg !1539
  %82 = load i32, i32* @strstart, align 4, !dbg !1539
  %conv155 = zext i32 %82 to i64, !dbg !1539
  %83 = load i64, i64* @block_start, align 8, !dbg !1539
  %sub156 = sub nsw i64 %conv155, %83, !dbg !1539
  %84 = load i32, i32* %flush, align 4, !dbg !1539
  %sub157 = sub nsw i32 %84, 1, !dbg !1539
  %call158 = call i64 @flush_block(i8* %cond154, i64 %sub156, i32 %sub157, i32 0), !dbg !1539
  %85 = load i32, i32* @strstart, align 4, !dbg !1540
  %conv159 = zext i32 %85 to i64, !dbg !1540
  store i64 %conv159, i64* @block_start, align 8, !dbg !1541
  br label %if.end160, !dbg !1542

if.end160:                                        ; preds = %cond.end153, %land.lhs.true141, %if.else139
  store i32 1, i32* %match_available, align 4, !dbg !1543
  br label %do.body161, !dbg !1544

do.body161:                                       ; preds = %if.end160
  %86 = load i32, i32* @rsync, align 4, !dbg !1545
  %tobool162 = icmp ne i32 %86, 0, !dbg !1545
  br i1 %tobool162, label %if.then163, label %if.end164, !dbg !1548

if.then163:                                       ; preds = %do.body161
  %87 = load i32, i32* @strstart, align 4, !dbg !1545
  call void @rsync_roll(i32 %87, i32 1), !dbg !1545
  br label %if.end164, !dbg !1545

if.end164:                                        ; preds = %if.then163, %do.body161
  br label %do.end166, !dbg !1548

do.end166:                                        ; preds = %if.end164
  %88 = load i32, i32* @strstart, align 4, !dbg !1549
  %inc167 = add i32 %88, 1, !dbg !1549
  store i32 %inc167, i32* @strstart, align 4, !dbg !1549
  %89 = load i32, i32* @lookahead, align 4, !dbg !1550
  %dec168 = add i32 %89, -1, !dbg !1550
  store i32 %dec168, i32* @lookahead, align 4, !dbg !1550
  br label %if.end169

if.end169:                                        ; preds = %do.end166, %do.end136
  br label %if.end170

if.end170:                                        ; preds = %if.end169, %if.end99
  br label %while.cond171, !dbg !1551

while.cond171:                                    ; preds = %while.body175, %if.end170
  %90 = load i32, i32* @lookahead, align 4, !dbg !1552
  %cmp172 = icmp ult i32 %90, 262, !dbg !1553
  br i1 %cmp172, label %land.rhs, label %land.end, !dbg !1554

land.rhs:                                         ; preds = %while.cond171
  %91 = load i32, i32* @eofile, align 4, !dbg !1555
  %tobool174 = icmp ne i32 %91, 0, !dbg !1556
  %lnot = xor i1 %tobool174, true, !dbg !1556
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond171
  %92 = phi i1 [ false, %while.cond171 ], [ %lnot, %land.rhs ], !dbg !1557
  br i1 %92, label %while.body175, label %while.end, !dbg !1551

while.body175:                                    ; preds = %land.end
  call void @fill_window(), !dbg !1558
  br label %while.cond171, !dbg !1551, !llvm.loop !1559

while.end:                                        ; preds = %land.end
  br label %while.cond, !dbg !1385, !llvm.loop !1561

while.end176:                                     ; preds = %while.cond
  %93 = load i32, i32* %match_available, align 4, !dbg !1563
  %tobool177 = icmp ne i32 %93, 0, !dbg !1563
  br i1 %tobool177, label %if.then178, label %if.end184, !dbg !1565

if.then178:                                       ; preds = %while.end176
  %94 = load i32, i32* @strstart, align 4, !dbg !1566
  %sub179 = sub i32 %94, 1, !dbg !1567
  %idxprom180 = zext i32 %sub179 to i64, !dbg !1568
  %arrayidx181 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom180, !dbg !1568, !ctir !149
  %95 = load i8, i8* %arrayidx181, align 1, !dbg !1568
  %conv182 = zext i8 %95 to i32, !dbg !1568
  %call183 = call i32 @ct_tally(i32 0, i32 %conv182), !dbg !1569
  br label %if.end184, !dbg !1569

if.end184:                                        ; preds = %if.then178, %while.end176
  %96 = load i64, i64* @block_start, align 8, !dbg !1570
  %cmp185 = icmp sge i64 %96, 0, !dbg !1570
  br i1 %cmp185, label %cond.true187, label %cond.false191, !dbg !1570

cond.true187:                                     ; preds = %if.end184
  %97 = load i64, i64* @block_start, align 8, !dbg !1570
  %conv188 = trunc i64 %97 to i32, !dbg !1570
  %idxprom189 = zext i32 %conv188 to i64, !dbg !1570
  %arrayidx190 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom189, !dbg !1570, !ctir !149
  br label %cond.end192, !dbg !1570

cond.false191:                                    ; preds = %if.end184
  br label %cond.end192, !dbg !1570

cond.end192:                                      ; preds = %cond.false191, %cond.true187
  %cond193 = phi i8* [ %arrayidx190, %cond.true187 ], [ null, %cond.false191 ], !dbg !1570
  %98 = load i32, i32* @strstart, align 4, !dbg !1570
  %conv194 = zext i32 %98 to i64, !dbg !1570
  %99 = load i64, i64* @block_start, align 8, !dbg !1570
  %sub195 = sub nsw i64 %conv194, %99, !dbg !1570
  %100 = load i32, i32* %flush, align 4, !dbg !1570
  %sub196 = sub nsw i32 %100, 1, !dbg !1570
  %call197 = call i64 @flush_block(i8* %cond193, i64 %sub195, i32 %sub196, i32 1), !dbg !1570
  store i64 %call197, i64* %retval, align 8, !dbg !1571
  br label %return, !dbg !1571

return:                                           ; preds = %cond.end192, %if.then
  %101 = load i64, i64* %retval, align 8, !dbg !1572
  ret i64 %101, !dbg !1572
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @deflate_fast() #0 !dbg !1573 {
entry:
  %hash_head = alloca i32, align 4, !ctir !21
  %flush = alloca i32, align 4, !ctir !12
  %match_length = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %hash_head, metadata !1574, metadata !DIExpression()), !dbg !1575
  call void @llvm.dbg.declare(metadata i32* %flush, metadata !1576, metadata !DIExpression()), !dbg !1577
  call void @llvm.dbg.declare(metadata i32* %match_length, metadata !1578, metadata !DIExpression()), !dbg !1579
  store i32 0, i32* %match_length, align 4, !dbg !1579
  store i32 2, i32* @prev_length, align 4, !dbg !1580
  br label %while.cond, !dbg !1581

while.cond:                                       ; preds = %while.end, %entry
  %0 = load i32, i32* @lookahead, align 4, !dbg !1582
  %cmp = icmp ne i32 %0, 0, !dbg !1583
  br i1 %cmp, label %while.body, label %while.end112, !dbg !1581

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* @ins_h, align 4, !dbg !1584
  %shl = shl i32 %1, 5, !dbg !1584
  %2 = load i32, i32* @strstart, align 4, !dbg !1584
  %add = add i32 %2, 3, !dbg !1584
  %sub = sub i32 %add, 1, !dbg !1584
  %idxprom = zext i32 %sub to i64, !dbg !1584
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom, !dbg !1584, !ctir !149
  %3 = load i8, i8* %arrayidx, align 1, !dbg !1584
  %conv = zext i8 %3 to i32, !dbg !1584
  %xor = xor i32 %shl, %conv, !dbg !1584
  %and = and i32 %xor, 32767, !dbg !1584
  store i32 %and, i32* @ins_h, align 4, !dbg !1584
  %4 = load i32, i32* @ins_h, align 4, !dbg !1584
  %idxprom1 = zext i32 %4 to i64, !dbg !1584
  %arrayidx2 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom1, !dbg !1584, !ctir !166
  %5 = load i16, i16* %arrayidx2, align 2, !dbg !1584
  %conv3 = zext i16 %5 to i32, !dbg !1584
  store i32 %conv3, i32* %hash_head, align 4, !dbg !1584
  %conv4 = trunc i32 %conv3 to i16, !dbg !1584
  %6 = load i32, i32* @strstart, align 4, !dbg !1584
  %and5 = and i32 %6, 32767, !dbg !1584
  %idxprom6 = zext i32 %and5 to i64, !dbg !1584
  %arrayidx7 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom6, !dbg !1584, !ctir !155
  store i16 %conv4, i16* %arrayidx7, align 2, !dbg !1584
  %7 = load i32, i32* @strstart, align 4, !dbg !1584
  %conv8 = trunc i32 %7 to i16, !dbg !1584
  %8 = load i32, i32* @ins_h, align 4, !dbg !1584
  %idxprom9 = zext i32 %8 to i64, !dbg !1584
  %arrayidx10 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom9, !dbg !1584, !ctir !166
  store i16 %conv8, i16* %arrayidx10, align 2, !dbg !1584
  %9 = load i32, i32* %hash_head, align 4, !dbg !1586
  %cmp11 = icmp ne i32 %9, 0, !dbg !1588
  br i1 %cmp11, label %land.lhs.true, label %if.end24, !dbg !1589

land.lhs.true:                                    ; preds = %while.body
  %10 = load i32, i32* @strstart, align 4, !dbg !1590
  %11 = load i32, i32* %hash_head, align 4, !dbg !1591
  %sub13 = sub i32 %10, %11, !dbg !1592
  %cmp14 = icmp ule i32 %sub13, 32506, !dbg !1593
  br i1 %cmp14, label %land.lhs.true16, label %if.end24, !dbg !1594

land.lhs.true16:                                  ; preds = %land.lhs.true
  %12 = load i32, i32* @strstart, align 4, !dbg !1595
  %conv17 = zext i32 %12 to i64, !dbg !1595
  %13 = load i64, i64* @window_size, align 8, !dbg !1596
  %sub18 = sub i64 %13, 262, !dbg !1597
  %cmp19 = icmp ule i64 %conv17, %sub18, !dbg !1598
  br i1 %cmp19, label %if.then, label %if.end24, !dbg !1599

if.then:                                          ; preds = %land.lhs.true16
  %14 = load i32, i32* %hash_head, align 4, !dbg !1600
  %call = call i32 @longest_match(i32 %14), !dbg !1602
  store i32 %call, i32* %match_length, align 4, !dbg !1603
  %15 = load i32, i32* %match_length, align 4, !dbg !1604
  %16 = load i32, i32* @lookahead, align 4, !dbg !1606
  %cmp21 = icmp ugt i32 %15, %16, !dbg !1607
  br i1 %cmp21, label %if.then23, label %if.end, !dbg !1608

if.then23:                                        ; preds = %if.then
  %17 = load i32, i32* @lookahead, align 4, !dbg !1609
  store i32 %17, i32* %match_length, align 4, !dbg !1610
  br label %if.end, !dbg !1611

if.end:                                           ; preds = %if.then23, %if.then
  br label %if.end24, !dbg !1612

if.end24:                                         ; preds = %if.end, %land.lhs.true16, %land.lhs.true, %while.body
  %18 = load i32, i32* %match_length, align 4, !dbg !1613
  %cmp25 = icmp uge i32 %18, 3, !dbg !1615
  br i1 %cmp25, label %if.then27, label %if.else73, !dbg !1616

if.then27:                                        ; preds = %if.end24
  %19 = load i32, i32* @strstart, align 4, !dbg !1617
  %20 = load i32, i32* @match_start, align 4, !dbg !1619
  %sub28 = sub i32 %19, %20, !dbg !1620
  %21 = load i32, i32* %match_length, align 4, !dbg !1621
  %sub29 = sub i32 %21, 3, !dbg !1622
  %call30 = call i32 @ct_tally(i32 %sub28, i32 %sub29), !dbg !1623
  store i32 %call30, i32* %flush, align 4, !dbg !1624
  %22 = load i32, i32* %match_length, align 4, !dbg !1625
  %23 = load i32, i32* @lookahead, align 4, !dbg !1626
  %sub31 = sub i32 %23, %22, !dbg !1626
  store i32 %sub31, i32* @lookahead, align 4, !dbg !1626
  br label %do.body, !dbg !1627

do.body:                                          ; preds = %if.then27
  %24 = load i32, i32* @rsync, align 4, !dbg !1628
  %tobool = icmp ne i32 %24, 0, !dbg !1628
  br i1 %tobool, label %if.then32, label %if.end33, !dbg !1631

if.then32:                                        ; preds = %do.body
  %25 = load i32, i32* @strstart, align 4, !dbg !1628
  %26 = load i32, i32* %match_length, align 4, !dbg !1628
  call void @rsync_roll(i32 %25, i32 %26), !dbg !1628
  br label %if.end33, !dbg !1628

if.end33:                                         ; preds = %if.then32, %do.body
  br label %do.end, !dbg !1631

do.end:                                           ; preds = %if.end33
  %27 = load i32, i32* %match_length, align 4, !dbg !1632
  %28 = load i32, i32* @max_lazy_match, align 4, !dbg !1634
  %cmp34 = icmp ule i32 %27, %28, !dbg !1635
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !1636

if.then36:                                        ; preds = %do.end
  %29 = load i32, i32* %match_length, align 4, !dbg !1637
  %dec = add i32 %29, -1, !dbg !1637
  store i32 %dec, i32* %match_length, align 4, !dbg !1637
  br label %do.body37, !dbg !1639

do.body37:                                        ; preds = %do.cond, %if.then36
  %30 = load i32, i32* @strstart, align 4, !dbg !1640
  %inc = add i32 %30, 1, !dbg !1640
  store i32 %inc, i32* @strstart, align 4, !dbg !1640
  %31 = load i32, i32* @ins_h, align 4, !dbg !1642
  %shl38 = shl i32 %31, 5, !dbg !1642
  %32 = load i32, i32* @strstart, align 4, !dbg !1642
  %add39 = add i32 %32, 3, !dbg !1642
  %sub40 = sub i32 %add39, 1, !dbg !1642
  %idxprom41 = zext i32 %sub40 to i64, !dbg !1642
  %arrayidx42 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom41, !dbg !1642, !ctir !149
  %33 = load i8, i8* %arrayidx42, align 1, !dbg !1642
  %conv43 = zext i8 %33 to i32, !dbg !1642
  %xor44 = xor i32 %shl38, %conv43, !dbg !1642
  %and45 = and i32 %xor44, 32767, !dbg !1642
  store i32 %and45, i32* @ins_h, align 4, !dbg !1642
  %34 = load i32, i32* @ins_h, align 4, !dbg !1642
  %idxprom46 = zext i32 %34 to i64, !dbg !1642
  %arrayidx47 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom46, !dbg !1642, !ctir !166
  %35 = load i16, i16* %arrayidx47, align 2, !dbg !1642
  %conv48 = zext i16 %35 to i32, !dbg !1642
  store i32 %conv48, i32* %hash_head, align 4, !dbg !1642
  %conv49 = trunc i32 %conv48 to i16, !dbg !1642
  %36 = load i32, i32* @strstart, align 4, !dbg !1642
  %and50 = and i32 %36, 32767, !dbg !1642
  %idxprom51 = zext i32 %and50 to i64, !dbg !1642
  %arrayidx52 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom51, !dbg !1642, !ctir !155
  store i16 %conv49, i16* %arrayidx52, align 2, !dbg !1642
  %37 = load i32, i32* @strstart, align 4, !dbg !1642
  %conv53 = trunc i32 %37 to i16, !dbg !1642
  %38 = load i32, i32* @ins_h, align 4, !dbg !1642
  %idxprom54 = zext i32 %38 to i64, !dbg !1642
  %arrayidx55 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom54, !dbg !1642, !ctir !166
  store i16 %conv53, i16* %arrayidx55, align 2, !dbg !1642
  br label %do.cond, !dbg !1643

do.cond:                                          ; preds = %do.body37
  %39 = load i32, i32* %match_length, align 4, !dbg !1644
  %dec56 = add i32 %39, -1, !dbg !1644
  store i32 %dec56, i32* %match_length, align 4, !dbg !1644
  %cmp57 = icmp ne i32 %dec56, 0, !dbg !1645
  br i1 %cmp57, label %do.body37, label %do.end59, !dbg !1643, !llvm.loop !1646

do.end59:                                         ; preds = %do.cond
  %40 = load i32, i32* @strstart, align 4, !dbg !1648
  %inc60 = add i32 %40, 1, !dbg !1648
  store i32 %inc60, i32* @strstart, align 4, !dbg !1648
  br label %if.end72, !dbg !1649

if.else:                                          ; preds = %do.end
  %41 = load i32, i32* %match_length, align 4, !dbg !1650
  %42 = load i32, i32* @strstart, align 4, !dbg !1652
  %add61 = add i32 %42, %41, !dbg !1652
  store i32 %add61, i32* @strstart, align 4, !dbg !1652
  store i32 0, i32* %match_length, align 4, !dbg !1653
  %43 = load i32, i32* @strstart, align 4, !dbg !1654
  %idxprom62 = zext i32 %43 to i64, !dbg !1655
  %arrayidx63 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom62, !dbg !1655, !ctir !149
  %44 = load i8, i8* %arrayidx63, align 1, !dbg !1655
  %conv64 = zext i8 %44 to i32, !dbg !1655
  store i32 %conv64, i32* @ins_h, align 4, !dbg !1656
  %45 = load i32, i32* @ins_h, align 4, !dbg !1657
  %shl65 = shl i32 %45, 5, !dbg !1657
  %46 = load i32, i32* @strstart, align 4, !dbg !1657
  %add66 = add i32 %46, 1, !dbg !1657
  %idxprom67 = zext i32 %add66 to i64, !dbg !1657
  %arrayidx68 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom67, !dbg !1657, !ctir !149
  %47 = load i8, i8* %arrayidx68, align 1, !dbg !1657
  %conv69 = zext i8 %47 to i32, !dbg !1657
  %xor70 = xor i32 %shl65, %conv69, !dbg !1657
  %and71 = and i32 %xor70, 32767, !dbg !1657
  store i32 %and71, i32* @ins_h, align 4, !dbg !1657
  br label %if.end72

if.end72:                                         ; preds = %if.else, %do.end59
  br label %if.end86, !dbg !1658

if.else73:                                        ; preds = %if.end24
  %48 = load i32, i32* @strstart, align 4, !dbg !1659
  %idxprom74 = zext i32 %48 to i64, !dbg !1661
  %arrayidx75 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom74, !dbg !1661, !ctir !149
  %49 = load i8, i8* %arrayidx75, align 1, !dbg !1661
  %conv76 = zext i8 %49 to i32, !dbg !1661
  %call77 = call i32 @ct_tally(i32 0, i32 %conv76), !dbg !1662
  store i32 %call77, i32* %flush, align 4, !dbg !1663
  br label %do.body78, !dbg !1664

do.body78:                                        ; preds = %if.else73
  %50 = load i32, i32* @rsync, align 4, !dbg !1665
  %tobool79 = icmp ne i32 %50, 0, !dbg !1665
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !1668

if.then80:                                        ; preds = %do.body78
  %51 = load i32, i32* @strstart, align 4, !dbg !1665
  call void @rsync_roll(i32 %51, i32 1), !dbg !1665
  br label %if.end81, !dbg !1665

if.end81:                                         ; preds = %if.then80, %do.body78
  br label %do.end83, !dbg !1668

do.end83:                                         ; preds = %if.end81
  %52 = load i32, i32* @lookahead, align 4, !dbg !1669
  %dec84 = add i32 %52, -1, !dbg !1669
  store i32 %dec84, i32* @lookahead, align 4, !dbg !1669
  %53 = load i32, i32* @strstart, align 4, !dbg !1670
  %inc85 = add i32 %53, 1, !dbg !1670
  store i32 %inc85, i32* @strstart, align 4, !dbg !1670
  br label %if.end86

if.end86:                                         ; preds = %do.end83, %if.end72
  %54 = load i32, i32* @rsync, align 4, !dbg !1671
  %tobool87 = icmp ne i32 %54, 0, !dbg !1671
  br i1 %tobool87, label %land.lhs.true88, label %if.end93, !dbg !1673

land.lhs.true88:                                  ; preds = %if.end86
  %55 = load i32, i32* @strstart, align 4, !dbg !1674
  %conv89 = zext i32 %55 to i64, !dbg !1674
  %56 = load i64, i64* @rsync_chunk_end, align 8, !dbg !1675
  %cmp90 = icmp ugt i64 %conv89, %56, !dbg !1676
  br i1 %cmp90, label %if.then92, label %if.end93, !dbg !1677

if.then92:                                        ; preds = %land.lhs.true88
  store i64 4294967295, i64* @rsync_chunk_end, align 8, !dbg !1678
  store i32 2, i32* %flush, align 4, !dbg !1680
  br label %if.end93, !dbg !1681

if.end93:                                         ; preds = %if.then92, %land.lhs.true88, %if.end86
  %57 = load i32, i32* %flush, align 4, !dbg !1682
  %tobool94 = icmp ne i32 %57, 0, !dbg !1682
  br i1 %tobool94, label %if.then95, label %if.end106, !dbg !1684

if.then95:                                        ; preds = %if.end93
  %58 = load i64, i64* @block_start, align 8, !dbg !1685
  %cmp96 = icmp sge i64 %58, 0, !dbg !1685
  br i1 %cmp96, label %cond.true, label %cond.false, !dbg !1685

cond.true:                                        ; preds = %if.then95
  %59 = load i64, i64* @block_start, align 8, !dbg !1685
  %conv98 = trunc i64 %59 to i32, !dbg !1685
  %idxprom99 = zext i32 %conv98 to i64, !dbg !1685
  %arrayidx100 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom99, !dbg !1685, !ctir !149
  br label %cond.end, !dbg !1685

cond.false:                                       ; preds = %if.then95
  br label %cond.end, !dbg !1685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arrayidx100, %cond.true ], [ null, %cond.false ], !dbg !1685
  %60 = load i32, i32* @strstart, align 4, !dbg !1685
  %conv101 = zext i32 %60 to i64, !dbg !1685
  %61 = load i64, i64* @block_start, align 8, !dbg !1685
  %sub102 = sub nsw i64 %conv101, %61, !dbg !1685
  %62 = load i32, i32* %flush, align 4, !dbg !1685
  %sub103 = sub nsw i32 %62, 1, !dbg !1685
  %call104 = call i64 @flush_block(i8* %cond, i64 %sub102, i32 %sub103, i32 0), !dbg !1685
  %63 = load i32, i32* @strstart, align 4, !dbg !1686
  %conv105 = zext i32 %63 to i64, !dbg !1686
  store i64 %conv105, i64* @block_start, align 8, !dbg !1687
  br label %if.end106, !dbg !1685

if.end106:                                        ; preds = %cond.end, %if.end93
  br label %while.cond107, !dbg !1688

while.cond107:                                    ; preds = %while.body111, %if.end106
  %64 = load i32, i32* @lookahead, align 4, !dbg !1689
  %cmp108 = icmp ult i32 %64, 262, !dbg !1690
  br i1 %cmp108, label %land.rhs, label %land.end, !dbg !1691

land.rhs:                                         ; preds = %while.cond107
  %65 = load i32, i32* @eofile, align 4, !dbg !1692
  %tobool110 = icmp ne i32 %65, 0, !dbg !1693
  %lnot = xor i1 %tobool110, true, !dbg !1693
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond107
  %66 = phi i1 [ false, %while.cond107 ], [ %lnot, %land.rhs ], !dbg !1694
  br i1 %66, label %while.body111, label %while.end, !dbg !1688

while.body111:                                    ; preds = %land.end
  call void @fill_window(), !dbg !1695
  br label %while.cond107, !dbg !1688, !llvm.loop !1696

while.end:                                        ; preds = %land.end
  br label %while.cond, !dbg !1581, !llvm.loop !1698

while.end112:                                     ; preds = %while.cond
  %67 = load i64, i64* @block_start, align 8, !dbg !1700
  %cmp113 = icmp sge i64 %67, 0, !dbg !1700
  br i1 %cmp113, label %cond.true115, label %cond.false119, !dbg !1700

cond.true115:                                     ; preds = %while.end112
  %68 = load i64, i64* @block_start, align 8, !dbg !1700
  %conv116 = trunc i64 %68 to i32, !dbg !1700
  %idxprom117 = zext i32 %conv116 to i64, !dbg !1700
  %arrayidx118 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom117, !dbg !1700, !ctir !149
  br label %cond.end120, !dbg !1700

cond.false119:                                    ; preds = %while.end112
  br label %cond.end120, !dbg !1700

cond.end120:                                      ; preds = %cond.false119, %cond.true115
  %cond121 = phi i8* [ %arrayidx118, %cond.true115 ], [ null, %cond.false119 ], !dbg !1700
  %69 = load i32, i32* @strstart, align 4, !dbg !1700
  %conv122 = zext i32 %69 to i64, !dbg !1700
  %70 = load i64, i64* @block_start, align 8, !dbg !1700
  %sub123 = sub nsw i64 %conv122, %70, !dbg !1700
  %71 = load i32, i32* %flush, align 4, !dbg !1700
  %sub124 = sub nsw i32 %71, 1, !dbg !1700
  %call125 = call i64 @flush_block(i8* %cond121, i64 %sub123, i32 %sub124, i32 1), !dbg !1700
  ret i64 %call125, !dbg !1701
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @longest_match(i32 %cur_match) #0 !dbg !1702 {
entry:
  %cur_match.addr = alloca i32, align 4
  %chain_length = alloca i32, align 4, !ctir !6
  %scan = alloca i8*, align 8, !ctir !85
  %match = alloca i8*, align 8, !ctir !85
  %len = alloca i32, align 4, !ctir !12
  %best_len = alloca i32, align 4, !ctir !12
  %limit = alloca i32, align 4, !ctir !21
  %strend = alloca i8*, align 8, !ctir !85
  %scan_end1 = alloca i8, align 1, !ctir !13
  %scan_end = alloca i8, align 1, !ctir !13
  store i32 %cur_match, i32* %cur_match.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cur_match.addr, metadata !1705, metadata !DIExpression()), !dbg !1706
  call void @llvm.dbg.declare(metadata i32* %chain_length, metadata !1707, metadata !DIExpression()), !dbg !1708
  %0 = load i32, i32* @max_chain_length, align 4, !dbg !1709
  store i32 %0, i32* %chain_length, align 4, !dbg !1708
  call void @llvm.dbg.declare(metadata i8** %scan, metadata !1710, metadata !DIExpression()), !dbg !1711
  %1 = load i32, i32* @strstart, align 4, !dbg !1712
  %idx.ext = zext i32 %1 to i64, !dbg !1713
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext, !dbg !1713, !ctir !13
  store i8* %add.ptr, i8** %scan, align 8, !dbg !1711
  call void @llvm.dbg.declare(metadata i8** %match, metadata !1714, metadata !DIExpression()), !dbg !1715
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1716, metadata !DIExpression()), !dbg !1717
  call void @llvm.dbg.declare(metadata i32* %best_len, metadata !1718, metadata !DIExpression()), !dbg !1719
  %2 = load i32, i32* @prev_length, align 4, !dbg !1720
  store i32 %2, i32* %best_len, align 4, !dbg !1719
  call void @llvm.dbg.declare(metadata i32* %limit, metadata !1721, metadata !DIExpression()), !dbg !1722
  %3 = load i32, i32* @strstart, align 4, !dbg !1723
  %cmp = icmp ugt i32 %3, 32506, !dbg !1724
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !1723

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* @strstart, align 4, !dbg !1725
  %sub = sub i32 %4, 32506, !dbg !1726
  br label %cond.end, !dbg !1723

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !1723

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !1723
  store i32 %cond, i32* %limit, align 4, !dbg !1722
  call void @llvm.dbg.declare(metadata i8** %strend, metadata !1727, metadata !DIExpression()), !dbg !1728
  %5 = load i32, i32* @strstart, align 4, !dbg !1729
  %idx.ext1 = zext i32 %5 to i64, !dbg !1730
  %add.ptr2 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext1, !dbg !1730, !ctir !13
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr2, i64 258, !dbg !1731, !ctir !13
  store i8* %add.ptr3, i8** %strend, align 8, !dbg !1728
  call void @llvm.dbg.declare(metadata i8* %scan_end1, metadata !1732, metadata !DIExpression()), !dbg !1733
  %6 = load i8*, i8** %scan, align 8, !dbg !1734
  %7 = load i32, i32* %best_len, align 4, !dbg !1735
  %sub4 = sub nsw i32 %7, 1, !dbg !1736
  %idxprom = sext i32 %sub4 to i64, !dbg !1734
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !1734, !ctir !85
  %8 = load i8, i8* %arrayidx, align 1, !dbg !1734
  store i8 %8, i8* %scan_end1, align 1, !dbg !1733
  call void @llvm.dbg.declare(metadata i8* %scan_end, metadata !1737, metadata !DIExpression()), !dbg !1738
  %9 = load i8*, i8** %scan, align 8, !dbg !1739
  %10 = load i32, i32* %best_len, align 4, !dbg !1740
  %idxprom5 = sext i32 %10 to i64, !dbg !1739
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 %idxprom5, !dbg !1739, !ctir !85
  %11 = load i8, i8* %arrayidx6, align 1, !dbg !1739
  store i8 %11, i8* %scan_end, align 1, !dbg !1738
  %12 = load i32, i32* @prev_length, align 4, !dbg !1741
  %13 = load i32, i32* @good_match, align 4, !dbg !1743
  %cmp7 = icmp uge i32 %12, %13, !dbg !1744
  br i1 %cmp7, label %if.then, label %if.end, !dbg !1745

if.then:                                          ; preds = %cond.end
  %14 = load i32, i32* %chain_length, align 4, !dbg !1746
  %shr = lshr i32 %14, 2, !dbg !1746
  store i32 %shr, i32* %chain_length, align 4, !dbg !1746
  br label %if.end, !dbg !1748

if.end:                                           ; preds = %if.then, %cond.end
  br label %do.body, !dbg !1749

do.body:                                          ; preds = %land.end119, %if.end
  %15 = load i32, i32* %cur_match.addr, align 4, !dbg !1750
  %idx.ext8 = zext i32 %15 to i64, !dbg !1752
  %add.ptr9 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext8, !dbg !1752, !ctir !13
  store i8* %add.ptr9, i8** %match, align 8, !dbg !1753
  %16 = load i8*, i8** %match, align 8, !dbg !1754
  %17 = load i32, i32* %best_len, align 4, !dbg !1756
  %idxprom10 = sext i32 %17 to i64, !dbg !1754
  %arrayidx11 = getelementptr inbounds i8, i8* %16, i64 %idxprom10, !dbg !1754, !ctir !85
  %18 = load i8, i8* %arrayidx11, align 1, !dbg !1754
  %conv = zext i8 %18 to i32, !dbg !1754
  %19 = load i8, i8* %scan_end, align 1, !dbg !1757
  %conv12 = zext i8 %19 to i32, !dbg !1757
  %cmp13 = icmp ne i32 %conv, %conv12, !dbg !1758
  br i1 %cmp13, label %if.then33, label %lor.lhs.false, !dbg !1759

lor.lhs.false:                                    ; preds = %do.body
  %20 = load i8*, i8** %match, align 8, !dbg !1760
  %21 = load i32, i32* %best_len, align 4, !dbg !1761
  %sub15 = sub nsw i32 %21, 1, !dbg !1762
  %idxprom16 = sext i32 %sub15 to i64, !dbg !1760
  %arrayidx17 = getelementptr inbounds i8, i8* %20, i64 %idxprom16, !dbg !1760, !ctir !85
  %22 = load i8, i8* %arrayidx17, align 1, !dbg !1760
  %conv18 = zext i8 %22 to i32, !dbg !1760
  %23 = load i8, i8* %scan_end1, align 1, !dbg !1763
  %conv19 = zext i8 %23 to i32, !dbg !1763
  %cmp20 = icmp ne i32 %conv18, %conv19, !dbg !1764
  br i1 %cmp20, label %if.then33, label %lor.lhs.false22, !dbg !1765

lor.lhs.false22:                                  ; preds = %lor.lhs.false
  %24 = load i8*, i8** %match, align 8, !dbg !1766
  %25 = load i8, i8* %24, align 1, !dbg !1767, !ctir !13
  %conv23 = zext i8 %25 to i32, !dbg !1767
  %26 = load i8*, i8** %scan, align 8, !dbg !1768
  %27 = load i8, i8* %26, align 1, !dbg !1769, !ctir !13
  %conv24 = zext i8 %27 to i32, !dbg !1769
  %cmp25 = icmp ne i32 %conv23, %conv24, !dbg !1770
  br i1 %cmp25, label %if.then33, label %lor.lhs.false27, !dbg !1771

lor.lhs.false27:                                  ; preds = %lor.lhs.false22
  %28 = load i8*, i8** %match, align 8, !dbg !1772
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1, !dbg !1772, !ctir !13
  store i8* %incdec.ptr, i8** %match, align 8, !dbg !1772
  %29 = load i8, i8* %incdec.ptr, align 1, !dbg !1773, !ctir !13
  %conv28 = zext i8 %29 to i32, !dbg !1773
  %30 = load i8*, i8** %scan, align 8, !dbg !1774
  %arrayidx29 = getelementptr inbounds i8, i8* %30, i64 1, !dbg !1774, !ctir !85
  %31 = load i8, i8* %arrayidx29, align 1, !dbg !1774
  %conv30 = zext i8 %31 to i32, !dbg !1774
  %cmp31 = icmp ne i32 %conv28, %conv30, !dbg !1775
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !1776

if.then33:                                        ; preds = %lor.lhs.false27, %lor.lhs.false22, %lor.lhs.false, %do.body
  br label %do.cond110, !dbg !1777

if.end34:                                         ; preds = %lor.lhs.false27
  %32 = load i8*, i8** %scan, align 8, !dbg !1778
  %add.ptr35 = getelementptr inbounds i8, i8* %32, i64 2, !dbg !1778, !ctir !13
  store i8* %add.ptr35, i8** %scan, align 8, !dbg !1778
  %33 = load i8*, i8** %match, align 8, !dbg !1779
  %incdec.ptr36 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !1779, !ctir !13
  store i8* %incdec.ptr36, i8** %match, align 8, !dbg !1779
  br label %do.body37, !dbg !1780

do.body37:                                        ; preds = %land.end, %if.end34
  br label %do.cond, !dbg !1781

do.cond:                                          ; preds = %do.body37
  %34 = load i8*, i8** %scan, align 8, !dbg !1783
  %incdec.ptr38 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !1783, !ctir !13
  store i8* %incdec.ptr38, i8** %scan, align 8, !dbg !1783
  %35 = load i8, i8* %incdec.ptr38, align 1, !dbg !1784, !ctir !13
  %conv39 = zext i8 %35 to i32, !dbg !1784
  %36 = load i8*, i8** %match, align 8, !dbg !1785
  %incdec.ptr40 = getelementptr inbounds i8, i8* %36, i32 1, !dbg !1785, !ctir !13
  store i8* %incdec.ptr40, i8** %match, align 8, !dbg !1785
  %37 = load i8, i8* %incdec.ptr40, align 1, !dbg !1786, !ctir !13
  %conv41 = zext i8 %37 to i32, !dbg !1786
  %cmp42 = icmp eq i32 %conv39, %conv41, !dbg !1787
  br i1 %cmp42, label %land.lhs.true, label %land.end, !dbg !1788

land.lhs.true:                                    ; preds = %do.cond
  %38 = load i8*, i8** %scan, align 8, !dbg !1789
  %incdec.ptr44 = getelementptr inbounds i8, i8* %38, i32 1, !dbg !1789, !ctir !13
  store i8* %incdec.ptr44, i8** %scan, align 8, !dbg !1789
  %39 = load i8, i8* %incdec.ptr44, align 1, !dbg !1790, !ctir !13
  %conv45 = zext i8 %39 to i32, !dbg !1790
  %40 = load i8*, i8** %match, align 8, !dbg !1791
  %incdec.ptr46 = getelementptr inbounds i8, i8* %40, i32 1, !dbg !1791, !ctir !13
  store i8* %incdec.ptr46, i8** %match, align 8, !dbg !1791
  %41 = load i8, i8* %incdec.ptr46, align 1, !dbg !1792, !ctir !13
  %conv47 = zext i8 %41 to i32, !dbg !1792
  %cmp48 = icmp eq i32 %conv45, %conv47, !dbg !1793
  br i1 %cmp48, label %land.lhs.true50, label %land.end, !dbg !1794

land.lhs.true50:                                  ; preds = %land.lhs.true
  %42 = load i8*, i8** %scan, align 8, !dbg !1795
  %incdec.ptr51 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !1795, !ctir !13
  store i8* %incdec.ptr51, i8** %scan, align 8, !dbg !1795
  %43 = load i8, i8* %incdec.ptr51, align 1, !dbg !1796, !ctir !13
  %conv52 = zext i8 %43 to i32, !dbg !1796
  %44 = load i8*, i8** %match, align 8, !dbg !1797
  %incdec.ptr53 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !1797, !ctir !13
  store i8* %incdec.ptr53, i8** %match, align 8, !dbg !1797
  %45 = load i8, i8* %incdec.ptr53, align 1, !dbg !1798, !ctir !13
  %conv54 = zext i8 %45 to i32, !dbg !1798
  %cmp55 = icmp eq i32 %conv52, %conv54, !dbg !1799
  br i1 %cmp55, label %land.lhs.true57, label %land.end, !dbg !1800

land.lhs.true57:                                  ; preds = %land.lhs.true50
  %46 = load i8*, i8** %scan, align 8, !dbg !1801
  %incdec.ptr58 = getelementptr inbounds i8, i8* %46, i32 1, !dbg !1801, !ctir !13
  store i8* %incdec.ptr58, i8** %scan, align 8, !dbg !1801
  %47 = load i8, i8* %incdec.ptr58, align 1, !dbg !1802, !ctir !13
  %conv59 = zext i8 %47 to i32, !dbg !1802
  %48 = load i8*, i8** %match, align 8, !dbg !1803
  %incdec.ptr60 = getelementptr inbounds i8, i8* %48, i32 1, !dbg !1803, !ctir !13
  store i8* %incdec.ptr60, i8** %match, align 8, !dbg !1803
  %49 = load i8, i8* %incdec.ptr60, align 1, !dbg !1804, !ctir !13
  %conv61 = zext i8 %49 to i32, !dbg !1804
  %cmp62 = icmp eq i32 %conv59, %conv61, !dbg !1805
  br i1 %cmp62, label %land.lhs.true64, label %land.end, !dbg !1806

land.lhs.true64:                                  ; preds = %land.lhs.true57
  %50 = load i8*, i8** %scan, align 8, !dbg !1807
  %incdec.ptr65 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !1807, !ctir !13
  store i8* %incdec.ptr65, i8** %scan, align 8, !dbg !1807
  %51 = load i8, i8* %incdec.ptr65, align 1, !dbg !1808, !ctir !13
  %conv66 = zext i8 %51 to i32, !dbg !1808
  %52 = load i8*, i8** %match, align 8, !dbg !1809
  %incdec.ptr67 = getelementptr inbounds i8, i8* %52, i32 1, !dbg !1809, !ctir !13
  store i8* %incdec.ptr67, i8** %match, align 8, !dbg !1809
  %53 = load i8, i8* %incdec.ptr67, align 1, !dbg !1810, !ctir !13
  %conv68 = zext i8 %53 to i32, !dbg !1810
  %cmp69 = icmp eq i32 %conv66, %conv68, !dbg !1811
  br i1 %cmp69, label %land.lhs.true71, label %land.end, !dbg !1812

land.lhs.true71:                                  ; preds = %land.lhs.true64
  %54 = load i8*, i8** %scan, align 8, !dbg !1813
  %incdec.ptr72 = getelementptr inbounds i8, i8* %54, i32 1, !dbg !1813, !ctir !13
  store i8* %incdec.ptr72, i8** %scan, align 8, !dbg !1813
  %55 = load i8, i8* %incdec.ptr72, align 1, !dbg !1814, !ctir !13
  %conv73 = zext i8 %55 to i32, !dbg !1814
  %56 = load i8*, i8** %match, align 8, !dbg !1815
  %incdec.ptr74 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !1815, !ctir !13
  store i8* %incdec.ptr74, i8** %match, align 8, !dbg !1815
  %57 = load i8, i8* %incdec.ptr74, align 1, !dbg !1816, !ctir !13
  %conv75 = zext i8 %57 to i32, !dbg !1816
  %cmp76 = icmp eq i32 %conv73, %conv75, !dbg !1817
  br i1 %cmp76, label %land.lhs.true78, label %land.end, !dbg !1818

land.lhs.true78:                                  ; preds = %land.lhs.true71
  %58 = load i8*, i8** %scan, align 8, !dbg !1819
  %incdec.ptr79 = getelementptr inbounds i8, i8* %58, i32 1, !dbg !1819, !ctir !13
  store i8* %incdec.ptr79, i8** %scan, align 8, !dbg !1819
  %59 = load i8, i8* %incdec.ptr79, align 1, !dbg !1820, !ctir !13
  %conv80 = zext i8 %59 to i32, !dbg !1820
  %60 = load i8*, i8** %match, align 8, !dbg !1821
  %incdec.ptr81 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !1821, !ctir !13
  store i8* %incdec.ptr81, i8** %match, align 8, !dbg !1821
  %61 = load i8, i8* %incdec.ptr81, align 1, !dbg !1822, !ctir !13
  %conv82 = zext i8 %61 to i32, !dbg !1822
  %cmp83 = icmp eq i32 %conv80, %conv82, !dbg !1823
  br i1 %cmp83, label %land.lhs.true85, label %land.end, !dbg !1824

land.lhs.true85:                                  ; preds = %land.lhs.true78
  %62 = load i8*, i8** %scan, align 8, !dbg !1825
  %incdec.ptr86 = getelementptr inbounds i8, i8* %62, i32 1, !dbg !1825, !ctir !13
  store i8* %incdec.ptr86, i8** %scan, align 8, !dbg !1825
  %63 = load i8, i8* %incdec.ptr86, align 1, !dbg !1826, !ctir !13
  %conv87 = zext i8 %63 to i32, !dbg !1826
  %64 = load i8*, i8** %match, align 8, !dbg !1827
  %incdec.ptr88 = getelementptr inbounds i8, i8* %64, i32 1, !dbg !1827, !ctir !13
  store i8* %incdec.ptr88, i8** %match, align 8, !dbg !1827
  %65 = load i8, i8* %incdec.ptr88, align 1, !dbg !1828, !ctir !13
  %conv89 = zext i8 %65 to i32, !dbg !1828
  %cmp90 = icmp eq i32 %conv87, %conv89, !dbg !1829
  br i1 %cmp90, label %land.rhs, label %land.end, !dbg !1830

land.rhs:                                         ; preds = %land.lhs.true85
  %66 = load i8*, i8** %scan, align 8, !dbg !1831
  %67 = load i8*, i8** %strend, align 8, !dbg !1832
  %cmp92 = icmp ult i8* %66, %67, !dbg !1833
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true85, %land.lhs.true78, %land.lhs.true71, %land.lhs.true64, %land.lhs.true57, %land.lhs.true50, %land.lhs.true, %do.cond
  %68 = phi i1 [ false, %land.lhs.true85 ], [ false, %land.lhs.true78 ], [ false, %land.lhs.true71 ], [ false, %land.lhs.true64 ], [ false, %land.lhs.true57 ], [ false, %land.lhs.true50 ], [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp92, %land.rhs ], !dbg !1834
  br i1 %68, label %do.body37, label %do.end, !dbg !1781, !llvm.loop !1835

do.end:                                           ; preds = %land.end
  %69 = load i8*, i8** %strend, align 8, !dbg !1837
  %70 = load i8*, i8** %scan, align 8, !dbg !1838
  %sub.ptr.lhs.cast = ptrtoint i8* %69 to i64, !dbg !1839
  %sub.ptr.rhs.cast = ptrtoint i8* %70 to i64, !dbg !1839
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1839
  %conv94 = trunc i64 %sub.ptr.sub to i32, !dbg !1840
  %sub95 = sub nsw i32 258, %conv94, !dbg !1841
  store i32 %sub95, i32* %len, align 4, !dbg !1842
  %71 = load i8*, i8** %strend, align 8, !dbg !1843
  %add.ptr96 = getelementptr inbounds i8, i8* %71, i64 -258, !dbg !1844, !ctir !13
  store i8* %add.ptr96, i8** %scan, align 8, !dbg !1845
  %72 = load i32, i32* %len, align 4, !dbg !1846
  %73 = load i32, i32* %best_len, align 4, !dbg !1848
  %cmp97 = icmp sgt i32 %72, %73, !dbg !1849
  br i1 %cmp97, label %if.then99, label %if.end109, !dbg !1850

if.then99:                                        ; preds = %do.end
  %74 = load i32, i32* %cur_match.addr, align 4, !dbg !1851
  store i32 %74, i32* @match_start, align 4, !dbg !1853
  %75 = load i32, i32* %len, align 4, !dbg !1854
  store i32 %75, i32* %best_len, align 4, !dbg !1855
  %76 = load i32, i32* %len, align 4, !dbg !1856
  %77 = load i32, i32* @nice_match, align 4, !dbg !1858
  %cmp100 = icmp sge i32 %76, %77, !dbg !1859
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !1860

if.then102:                                       ; preds = %if.then99
  br label %do.end120, !dbg !1861

if.end103:                                        ; preds = %if.then99
  %78 = load i8*, i8** %scan, align 8, !dbg !1862
  %79 = load i32, i32* %best_len, align 4, !dbg !1863
  %sub104 = sub nsw i32 %79, 1, !dbg !1864
  %idxprom105 = sext i32 %sub104 to i64, !dbg !1862
  %arrayidx106 = getelementptr inbounds i8, i8* %78, i64 %idxprom105, !dbg !1862, !ctir !85
  %80 = load i8, i8* %arrayidx106, align 1, !dbg !1862
  store i8 %80, i8* %scan_end1, align 1, !dbg !1865
  %81 = load i8*, i8** %scan, align 8, !dbg !1866
  %82 = load i32, i32* %best_len, align 4, !dbg !1867
  %idxprom107 = sext i32 %82 to i64, !dbg !1866
  %arrayidx108 = getelementptr inbounds i8, i8* %81, i64 %idxprom107, !dbg !1866, !ctir !85
  %83 = load i8, i8* %arrayidx108, align 1, !dbg !1866
  store i8 %83, i8* %scan_end, align 1, !dbg !1868
  br label %if.end109, !dbg !1869

if.end109:                                        ; preds = %if.end103, %do.end
  br label %do.cond110, !dbg !1870

do.cond110:                                       ; preds = %if.end109, %if.then33
  %84 = load i32, i32* %cur_match.addr, align 4, !dbg !1871
  %and = and i32 %84, 32767, !dbg !1872
  %idxprom111 = zext i32 %and to i64, !dbg !1873
  %arrayidx112 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom111, !dbg !1873, !ctir !155
  %85 = load i16, i16* %arrayidx112, align 2, !dbg !1873
  %conv113 = zext i16 %85 to i32, !dbg !1873
  store i32 %conv113, i32* %cur_match.addr, align 4, !dbg !1874
  %86 = load i32, i32* %limit, align 4, !dbg !1875
  %cmp114 = icmp ugt i32 %conv113, %86, !dbg !1876
  br i1 %cmp114, label %land.rhs116, label %land.end119, !dbg !1877

land.rhs116:                                      ; preds = %do.cond110
  %87 = load i32, i32* %chain_length, align 4, !dbg !1878
  %dec = add i32 %87, -1, !dbg !1878
  store i32 %dec, i32* %chain_length, align 4, !dbg !1878
  %cmp117 = icmp ne i32 %dec, 0, !dbg !1879
  br label %land.end119

land.end119:                                      ; preds = %land.rhs116, %do.cond110
  %88 = phi i1 [ false, %do.cond110 ], [ %cmp117, %land.rhs116 ], !dbg !1880
  br i1 %88, label %do.body, label %do.end120, !dbg !1870, !llvm.loop !1881

do.end120:                                        ; preds = %land.end119, %if.then102
  %89 = load i32, i32* %best_len, align 4, !dbg !1883
  ret i32 %89, !dbg !1884
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ct_tally(i32 %dist, i32 %lc) #0 !dbg !1885 {
entry:
  %retval = alloca i32, align 4
  %dist.addr = alloca i32, align 4
  %lc.addr = alloca i32, align 4
  %out_length = alloca i64, align 8, !ctir !51
  %in_length = alloca i64, align 8, !ctir !51
  %dcode = alloca i32, align 4, !ctir !12
  store i32 %dist, i32* %dist.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dist.addr, metadata !1886, metadata !DIExpression()), !dbg !1887
  store i32 %lc, i32* %lc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lc.addr, metadata !1888, metadata !DIExpression()), !dbg !1889
  %0 = load i32, i32* %lc.addr, align 4, !dbg !1890
  %conv = trunc i32 %0 to i8, !dbg !1891
  %1 = load i32, i32* @last_lit, align 4, !dbg !1892
  %inc = add i32 %1, 1, !dbg !1892
  store i32 %inc, i32* @last_lit, align 4, !dbg !1892
  %idxprom = zext i32 %1 to i64, !dbg !1893
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !1893, !ctir !231
  store i8 %conv, i8* %arrayidx, align 1, !dbg !1894
  %2 = load i32, i32* %dist.addr, align 4, !dbg !1895
  %cmp = icmp eq i32 %2, 0, !dbg !1897
  br i1 %cmp, label %if.then, label %if.else, !dbg !1898

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %lc.addr, align 4, !dbg !1899
  %idxprom2 = sext i32 %3 to i64, !dbg !1901
  %arrayidx3 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom2, !dbg !1901, !ctir !266
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx3, i32 0, i32 0, !dbg !1902, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !1902
  %4 = load i16, i16* %freq, align 4, !dbg !1903, !ctir !58
  %inc4 = add i16 %4, 1, !dbg !1903
  store i16 %inc4, i16* %freq, align 4, !dbg !1903, !ctir !58
  br label %if.end, !dbg !1904

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %dist.addr, align 4, !dbg !1905
  %dec = add nsw i32 %5, -1, !dbg !1905
  store i32 %dec, i32* %dist.addr, align 4, !dbg !1905
  %6 = load i32, i32* %lc.addr, align 4, !dbg !1907
  %idxprom5 = sext i32 %6 to i64, !dbg !1908
  %arrayidx6 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %idxprom5, !dbg !1908, !ctir !254
  %7 = load i8, i8* %arrayidx6, align 1, !dbg !1908
  %conv7 = zext i8 %7 to i32, !dbg !1908
  %add = add nsw i32 %conv7, 256, !dbg !1909
  %add8 = add nsw i32 %add, 1, !dbg !1910
  %idxprom9 = sext i32 %add8 to i64, !dbg !1911
  %arrayidx10 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom9, !dbg !1911, !ctir !266
  %fc11 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx10, i32 0, i32 0, !dbg !1912, !ctir !54
  %freq12 = bitcast %union.anon.0* %fc11 to i16*, !dbg !1912
  %8 = load i16, i16* %freq12, align 4, !dbg !1913, !ctir !58
  %inc13 = add i16 %8, 1, !dbg !1913
  store i16 %inc13, i16* %freq12, align 4, !dbg !1913, !ctir !58
  %9 = load i32, i32* %dist.addr, align 4, !dbg !1914
  %cmp14 = icmp slt i32 %9, 256, !dbg !1914
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !1914

cond.true:                                        ; preds = %if.else
  %10 = load i32, i32* %dist.addr, align 4, !dbg !1914
  %idxprom16 = sext i32 %10 to i64, !dbg !1914
  %arrayidx17 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom16, !dbg !1914, !ctir !258
  %11 = load i8, i8* %arrayidx17, align 1, !dbg !1914
  %conv18 = zext i8 %11 to i32, !dbg !1914
  br label %cond.end, !dbg !1914

cond.false:                                       ; preds = %if.else
  %12 = load i32, i32* %dist.addr, align 4, !dbg !1914
  %shr = ashr i32 %12, 7, !dbg !1914
  %add19 = add nsw i32 256, %shr, !dbg !1914
  %idxprom20 = sext i32 %add19 to i64, !dbg !1914
  %arrayidx21 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom20, !dbg !1914, !ctir !258
  %13 = load i8, i8* %arrayidx21, align 1, !dbg !1914
  %conv22 = zext i8 %13 to i32, !dbg !1914
  br label %cond.end, !dbg !1914

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv18, %cond.true ], [ %conv22, %cond.false ], !dbg !1914
  %idxprom23 = sext i32 %cond to i64, !dbg !1915
  %arrayidx24 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %idxprom23, !dbg !1915, !ctir !269
  %fc25 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx24, i32 0, i32 0, !dbg !1916, !ctir !54
  %freq26 = bitcast %union.anon.0* %fc25 to i16*, !dbg !1916
  %14 = load i16, i16* %freq26, align 4, !dbg !1917, !ctir !58
  %inc27 = add i16 %14, 1, !dbg !1917
  store i16 %inc27, i16* %freq26, align 4, !dbg !1917, !ctir !58
  %15 = load i32, i32* %dist.addr, align 4, !dbg !1918
  %conv28 = trunc i32 %15 to i16, !dbg !1919
  %16 = load i32, i32* @last_dist, align 4, !dbg !1920
  %inc29 = add i32 %16, 1, !dbg !1920
  store i32 %inc29, i32* @last_dist, align 4, !dbg !1920
  %idxprom30 = zext i32 %16 to i64, !dbg !1921
  %arrayidx31 = getelementptr inbounds [32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 %idxprom30, !dbg !1921, !ctir !272
  store i16 %conv28, i16* %arrayidx31, align 2, !dbg !1922
  %17 = load i8, i8* @flag_bit, align 1, !dbg !1923
  %conv32 = zext i8 %17 to i32, !dbg !1923
  %18 = load i8, i8* @flags, align 1, !dbg !1924
  %conv33 = zext i8 %18 to i32, !dbg !1924
  %or = or i32 %conv33, %conv32, !dbg !1924
  %conv34 = trunc i32 %or to i8, !dbg !1924
  store i8 %conv34, i8* @flags, align 1, !dbg !1924
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %19 = load i8, i8* @flag_bit, align 1, !dbg !1925
  %conv35 = zext i8 %19 to i32, !dbg !1925
  %shl = shl i32 %conv35, 1, !dbg !1925
  %conv36 = trunc i32 %shl to i8, !dbg !1925
  store i8 %conv36, i8* @flag_bit, align 1, !dbg !1925
  %20 = load i32, i32* @last_lit, align 4, !dbg !1926
  %and = and i32 %20, 7, !dbg !1928
  %cmp37 = icmp eq i32 %and, 0, !dbg !1929
  br i1 %cmp37, label %if.then39, label %if.end43, !dbg !1930

if.then39:                                        ; preds = %if.end
  %21 = load i8, i8* @flags, align 1, !dbg !1931
  %22 = load i32, i32* @last_flags, align 4, !dbg !1933
  %inc40 = add i32 %22, 1, !dbg !1933
  store i32 %inc40, i32* @last_flags, align 4, !dbg !1933
  %idxprom41 = zext i32 %22 to i64, !dbg !1934
  %arrayidx42 = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %idxprom41, !dbg !1934, !ctir !263
  store i8 %21, i8* %arrayidx42, align 1, !dbg !1935
  store i8 0, i8* @flags, align 1, !dbg !1936
  store i8 1, i8* @flag_bit, align 1, !dbg !1937
  br label %if.end43, !dbg !1938

if.end43:                                         ; preds = %if.then39, %if.end
  %23 = load i32, i32* @level, align 4, !dbg !1939
  %cmp44 = icmp sgt i32 %23, 2, !dbg !1941
  br i1 %cmp44, label %land.lhs.true, label %if.end75, !dbg !1942

land.lhs.true:                                    ; preds = %if.end43
  %24 = load i32, i32* @last_lit, align 4, !dbg !1943
  %and46 = and i32 %24, 4095, !dbg !1944
  %cmp47 = icmp eq i32 %and46, 0, !dbg !1945
  br i1 %cmp47, label %if.then49, label %if.end75, !dbg !1946

if.then49:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %out_length, metadata !1947, metadata !DIExpression()), !dbg !1949
  %25 = load i32, i32* @last_lit, align 4, !dbg !1950
  %conv50 = zext i32 %25 to i64, !dbg !1951
  %mul = mul i64 %conv50, 8, !dbg !1952
  store i64 %mul, i64* %out_length, align 8, !dbg !1949
  call void @llvm.dbg.declare(metadata i64* %in_length, metadata !1953, metadata !DIExpression()), !dbg !1954
  %26 = load i32, i32* @strstart, align 4, !dbg !1955
  %conv51 = zext i32 %26 to i64, !dbg !1956
  %27 = load i64, i64* @block_start, align 8, !dbg !1957
  %sub = sub i64 %conv51, %27, !dbg !1958
  store i64 %sub, i64* %in_length, align 8, !dbg !1954
  call void @llvm.dbg.declare(metadata i32* %dcode, metadata !1959, metadata !DIExpression()), !dbg !1960
  store i32 0, i32* %dcode, align 4, !dbg !1961
  br label %for.cond, !dbg !1963

for.cond:                                         ; preds = %for.inc, %if.then49
  %28 = load i32, i32* %dcode, align 4, !dbg !1964
  %cmp52 = icmp slt i32 %28, 30, !dbg !1966
  br i1 %cmp52, label %for.body, label %for.end, !dbg !1967

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %dcode, align 4, !dbg !1968
  %idxprom54 = sext i32 %29 to i64, !dbg !1970
  %arrayidx55 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %idxprom54, !dbg !1970, !ctir !269
  %fc56 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx55, i32 0, i32 0, !dbg !1971, !ctir !54
  %freq57 = bitcast %union.anon.0* %fc56 to i16*, !dbg !1971
  %30 = load i16, i16* %freq57, align 4, !dbg !1971, !ctir !58
  %conv58 = zext i16 %30 to i64, !dbg !1972
  %31 = load i32, i32* %dcode, align 4, !dbg !1973
  %idxprom59 = sext i32 %31 to i64, !dbg !1974
  %arrayidx60 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %idxprom59, !dbg !1974, !ctir !257
  %32 = load i32, i32* %arrayidx60, align 4, !dbg !1974
  %conv61 = sext i32 %32 to i64, !dbg !1974
  %add62 = add nsw i64 5, %conv61, !dbg !1975
  %mul63 = mul i64 %conv58, %add62, !dbg !1976
  %33 = load i64, i64* %out_length, align 8, !dbg !1977
  %add64 = add i64 %33, %mul63, !dbg !1977
  store i64 %add64, i64* %out_length, align 8, !dbg !1977
  br label %for.inc, !dbg !1978

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %dcode, align 4, !dbg !1979
  %inc65 = add nsw i32 %34, 1, !dbg !1979
  store i32 %inc65, i32* %dcode, align 4, !dbg !1979
  br label %for.cond, !dbg !1980, !llvm.loop !1981

for.end:                                          ; preds = %for.cond
  %35 = load i64, i64* %out_length, align 8, !dbg !1983
  %shr66 = lshr i64 %35, 3, !dbg !1983
  store i64 %shr66, i64* %out_length, align 8, !dbg !1983
  %36 = load i32, i32* @last_dist, align 4, !dbg !1984
  %37 = load i32, i32* @last_lit, align 4, !dbg !1986
  %div = udiv i32 %37, 2, !dbg !1987
  %cmp67 = icmp ult i32 %36, %div, !dbg !1988
  br i1 %cmp67, label %land.lhs.true69, label %if.end74, !dbg !1989

land.lhs.true69:                                  ; preds = %for.end
  %38 = load i64, i64* %out_length, align 8, !dbg !1990
  %39 = load i64, i64* %in_length, align 8, !dbg !1991
  %div70 = udiv i64 %39, 2, !dbg !1992
  %cmp71 = icmp ult i64 %38, %div70, !dbg !1993
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !1994

if.then73:                                        ; preds = %land.lhs.true69
  store i32 1, i32* %retval, align 4, !dbg !1995
  br label %return, !dbg !1995

if.end74:                                         ; preds = %land.lhs.true69, %for.end
  br label %if.end75, !dbg !1996

if.end75:                                         ; preds = %if.end74, %land.lhs.true, %if.end43
  %40 = load i32, i32* @last_lit, align 4, !dbg !1997
  %cmp76 = icmp eq i32 %40, 32767, !dbg !1998
  br i1 %cmp76, label %lor.end, label %lor.rhs, !dbg !1999

lor.rhs:                                          ; preds = %if.end75
  %41 = load i32, i32* @last_dist, align 4, !dbg !2000
  %cmp78 = icmp eq i32 %41, 32768, !dbg !2001
  br label %lor.end, !dbg !1999

lor.end:                                          ; preds = %lor.rhs, %if.end75
  %42 = phi i1 [ true, %if.end75 ], [ %cmp78, %lor.rhs ]
  %lor.ext = zext i1 %42 to i32, !dbg !1999
  store i32 %lor.ext, i32* %retval, align 4, !dbg !2002
  br label %return, !dbg !2002

return:                                           ; preds = %lor.end, %if.then73
  %43 = load i32, i32* %retval, align 4, !dbg !2003
  ret i32 %43, !dbg !2003
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rsync_roll(i32 %start, i32 %num) #0 !dbg !2004 {
entry:
  %start.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  %i = alloca i32, align 4, !ctir !6
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !2007, metadata !DIExpression()), !dbg !2008
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2009, metadata !DIExpression()), !dbg !2010
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2011, metadata !DIExpression()), !dbg !2012
  %0 = load i32, i32* %start.addr, align 4, !dbg !2013
  %cmp = icmp ult i32 %0, 4096, !dbg !2015
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2016

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %start.addr, align 4, !dbg !2017
  store i32 %1, i32* %i, align 4, !dbg !2020
  br label %for.cond, !dbg !2021

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !2022
  %cmp1 = icmp ult i32 %2, 4096, !dbg !2024
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2025

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !2026
  %4 = load i32, i32* %start.addr, align 4, !dbg !2029
  %5 = load i32, i32* %num.addr, align 4, !dbg !2030
  %add = add i32 %4, %5, !dbg !2031
  %cmp2 = icmp eq i32 %3, %add, !dbg !2032
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !2033

if.then3:                                         ; preds = %for.body
  br label %for.end30, !dbg !2034

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !2035
  %idxprom = zext i32 %6 to i64, !dbg !2036
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom, !dbg !2036, !ctir !149
  %7 = load i8, i8* %arrayidx, align 1, !dbg !2036
  %conv = zext i8 %7 to i64, !dbg !2037
  %8 = load i64, i64* @rsync_sum, align 8, !dbg !2038
  %add4 = add i64 %8, %conv, !dbg !2038
  store i64 %add4, i64* @rsync_sum, align 8, !dbg !2038
  br label %for.inc, !dbg !2039

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2040
  %inc = add i32 %9, 1, !dbg !2040
  store i32 %inc, i32* %i, align 4, !dbg !2040
  br label %for.cond, !dbg !2041, !llvm.loop !2042

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %start.addr, align 4, !dbg !2044
  %sub = sub i32 4096, %10, !dbg !2045
  %11 = load i32, i32* %num.addr, align 4, !dbg !2046
  %sub5 = sub i32 %11, %sub, !dbg !2046
  store i32 %sub5, i32* %num.addr, align 4, !dbg !2046
  store i32 4096, i32* %start.addr, align 4, !dbg !2047
  br label %if.end6, !dbg !2048

if.end6:                                          ; preds = %for.end, %entry
  %12 = load i32, i32* %start.addr, align 4, !dbg !2049
  store i32 %12, i32* %i, align 4, !dbg !2051
  br label %for.cond7, !dbg !2052

for.cond7:                                        ; preds = %for.inc28, %if.end6
  %13 = load i32, i32* %i, align 4, !dbg !2053
  %14 = load i32, i32* %start.addr, align 4, !dbg !2055
  %15 = load i32, i32* %num.addr, align 4, !dbg !2056
  %add8 = add i32 %14, %15, !dbg !2057
  %cmp9 = icmp ult i32 %13, %add8, !dbg !2058
  br i1 %cmp9, label %for.body11, label %for.end30, !dbg !2059

for.body11:                                       ; preds = %for.cond7
  %16 = load i32, i32* %i, align 4, !dbg !2060
  %idxprom12 = zext i32 %16 to i64, !dbg !2062
  %arrayidx13 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom12, !dbg !2062, !ctir !149
  %17 = load i8, i8* %arrayidx13, align 1, !dbg !2062
  %conv14 = zext i8 %17 to i64, !dbg !2063
  %18 = load i64, i64* @rsync_sum, align 8, !dbg !2064
  %add15 = add i64 %18, %conv14, !dbg !2064
  store i64 %add15, i64* @rsync_sum, align 8, !dbg !2064
  %19 = load i32, i32* %i, align 4, !dbg !2065
  %sub16 = sub i32 %19, 4096, !dbg !2066
  %idxprom17 = zext i32 %sub16 to i64, !dbg !2067
  %arrayidx18 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %idxprom17, !dbg !2067, !ctir !149
  %20 = load i8, i8* %arrayidx18, align 1, !dbg !2067
  %conv19 = zext i8 %20 to i64, !dbg !2068
  %21 = load i64, i64* @rsync_sum, align 8, !dbg !2069
  %sub20 = sub i64 %21, %conv19, !dbg !2069
  store i64 %sub20, i64* @rsync_sum, align 8, !dbg !2069
  %22 = load i64, i64* @rsync_chunk_end, align 8, !dbg !2070
  %cmp21 = icmp eq i64 %22, 4294967295, !dbg !2072
  br i1 %cmp21, label %land.lhs.true, label %if.end27, !dbg !2073

land.lhs.true:                                    ; preds = %for.body11
  %23 = load i64, i64* @rsync_sum, align 8, !dbg !2074
  %rem = urem i64 %23, 4096, !dbg !2074
  %cmp23 = icmp eq i64 %rem, 0, !dbg !2074
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !2075

if.then25:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %i, align 4, !dbg !2076
  %conv26 = zext i32 %24 to i64, !dbg !2076
  store i64 %conv26, i64* @rsync_chunk_end, align 8, !dbg !2077
  br label %if.end27, !dbg !2078

if.end27:                                         ; preds = %if.then25, %land.lhs.true, %for.body11
  br label %for.inc28, !dbg !2079

for.inc28:                                        ; preds = %if.end27
  %25 = load i32, i32* %i, align 4, !dbg !2080
  %inc29 = add i32 %25, 1, !dbg !2080
  store i32 %inc29, i32* %i, align 4, !dbg !2080
  br label %for.cond7, !dbg !2081, !llvm.loop !2082

for.end30:                                        ; preds = %if.then3, %for.cond7
  ret void, !dbg !2084
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @flush_block(i8* %buf, i64 %stored_len, i32 %pad, i32 %eof) #0 !dbg !2085 {
entry:
  %buf.addr = alloca i8*, align 8
  %stored_len.addr = alloca i64, align 8
  %pad.addr = alloca i32, align 4
  %eof.addr = alloca i32, align 4
  %opt_lenb = alloca i64, align 8, !ctir !51
  %static_lenb = alloca i64, align 8, !ctir !51
  %max_blindex = alloca i32, align 4, !ctir !12
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !2088, metadata !DIExpression()), !dbg !2089
  store i64 %stored_len, i64* %stored_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %stored_len.addr, metadata !2090, metadata !DIExpression()), !dbg !2091
  store i32 %pad, i32* %pad.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pad.addr, metadata !2092, metadata !DIExpression()), !dbg !2093
  store i32 %eof, i32* %eof.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %eof.addr, metadata !2094, metadata !DIExpression()), !dbg !2095
  call void @llvm.dbg.declare(metadata i64* %opt_lenb, metadata !2096, metadata !DIExpression()), !dbg !2097
  call void @llvm.dbg.declare(metadata i64* %static_lenb, metadata !2098, metadata !DIExpression()), !dbg !2099
  call void @llvm.dbg.declare(metadata i32* %max_blindex, metadata !2100, metadata !DIExpression()), !dbg !2101
  %0 = load i8, i8* @flags, align 1, !dbg !2102
  %1 = load i32, i32* @last_flags, align 4, !dbg !2103
  %idxprom = zext i32 %1 to i64, !dbg !2104
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %idxprom, !dbg !2104, !ctir !263
  store i8 %0, i8* %arrayidx, align 1, !dbg !2105
  %2 = load i16*, i16** @file_type, align 8, !dbg !2106
  %3 = load i16, i16* %2, align 2, !dbg !2108, !ctir !15
  %conv = zext i16 %3 to i32, !dbg !2108
  %cmp = icmp eq i32 %conv, 65535, !dbg !2109
  br i1 %cmp, label %if.then, label %if.end, !dbg !2110

if.then:                                          ; preds = %entry
  call void @set_file_type(), !dbg !2111
  br label %if.end, !dbg !2111

if.end:                                           ; preds = %if.then, %entry
  call void @build_tree_1(%struct.tree_desc* @l_desc), !dbg !2112
  call void @build_tree_1(%struct.tree_desc* @d_desc), !dbg !2113
  %call = call i32 @build_bl_tree(), !dbg !2114
  store i32 %call, i32* %max_blindex, align 4, !dbg !2115
  %4 = load i64, i64* @opt_len, align 8, !dbg !2116
  %add = add i64 %4, 3, !dbg !2117
  %add2 = add i64 %add, 7, !dbg !2118
  %shr = lshr i64 %add2, 3, !dbg !2119
  store i64 %shr, i64* %opt_lenb, align 8, !dbg !2120
  %5 = load i64, i64* @static_len, align 8, !dbg !2121
  %add3 = add i64 %5, 3, !dbg !2122
  %add4 = add i64 %add3, 7, !dbg !2123
  %shr5 = lshr i64 %add4, 3, !dbg !2124
  store i64 %shr5, i64* %static_lenb, align 8, !dbg !2125
  %6 = load i64, i64* %stored_len.addr, align 8, !dbg !2126
  %7 = load i64, i64* @input_len, align 8, !dbg !2127
  %add6 = add i64 %7, %6, !dbg !2127
  store i64 %add6, i64* @input_len, align 8, !dbg !2127
  %8 = load i64, i64* %static_lenb, align 8, !dbg !2128
  %9 = load i64, i64* %opt_lenb, align 8, !dbg !2130
  %cmp7 = icmp ule i64 %8, %9, !dbg !2131
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !2132

if.then9:                                         ; preds = %if.end
  %10 = load i64, i64* %static_lenb, align 8, !dbg !2133
  store i64 %10, i64* %opt_lenb, align 8, !dbg !2134
  br label %if.end10, !dbg !2135

if.end10:                                         ; preds = %if.then9, %if.end
  %11 = load i64, i64* %stored_len.addr, align 8, !dbg !2136
  %12 = load i64, i64* %opt_lenb, align 8, !dbg !2138
  %cmp11 = icmp ule i64 %11, %12, !dbg !2139
  br i1 %cmp11, label %land.lhs.true, label %if.else, !dbg !2140

land.lhs.true:                                    ; preds = %if.end10
  %13 = load i32, i32* %eof.addr, align 4, !dbg !2141
  %tobool = icmp ne i32 %13, 0, !dbg !2141
  br i1 %tobool, label %land.lhs.true13, label %if.else, !dbg !2142

land.lhs.true13:                                  ; preds = %land.lhs.true
  %14 = load i64, i64* @compressed_len, align 8, !dbg !2143
  %cmp14 = icmp eq i64 %14, 0, !dbg !2144
  br i1 %cmp14, label %land.lhs.true16, label %if.else, !dbg !2145

land.lhs.true16:                                  ; preds = %land.lhs.true13
  br i1 false, label %if.then17, label %if.else, !dbg !2146

if.then17:                                        ; preds = %land.lhs.true16
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !2147
  %cmp18 = icmp eq i8* %15, null, !dbg !2150
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !2151

if.then20:                                        ; preds = %if.then17
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0)), !dbg !2152
  br label %if.end21, !dbg !2152

if.end21:                                         ; preds = %if.then20, %if.then17
  %16 = load i8*, i8** %buf.addr, align 8, !dbg !2153
  %17 = load i64, i64* %stored_len.addr, align 8, !dbg !2154
  %conv22 = trunc i64 %17 to i32, !dbg !2155
  call void @copy_block(i8* %16, i32 %conv22, i32 0), !dbg !2156
  %18 = load i64, i64* %stored_len.addr, align 8, !dbg !2157
  %shl = shl i64 %18, 3, !dbg !2158
  store i64 %shl, i64* @compressed_len, align 8, !dbg !2159
  %19 = load i32*, i32** @file_method, align 8, !dbg !2160
  store i32 0, i32* %19, align 4, !dbg !2161, !ctir !12
  br label %if.end53, !dbg !2162

if.else:                                          ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true, %if.end10
  %20 = load i64, i64* %stored_len.addr, align 8, !dbg !2163
  %add23 = add i64 %20, 4, !dbg !2165
  %21 = load i64, i64* %opt_lenb, align 8, !dbg !2166
  %cmp24 = icmp ule i64 %add23, %21, !dbg !2167
  br i1 %cmp24, label %land.lhs.true26, label %if.else37, !dbg !2168

land.lhs.true26:                                  ; preds = %if.else
  %22 = load i8*, i8** %buf.addr, align 8, !dbg !2169
  %cmp27 = icmp ne i8* %22, null, !dbg !2170
  br i1 %cmp27, label %if.then29, label %if.else37, !dbg !2171

if.then29:                                        ; preds = %land.lhs.true26
  %23 = load i32, i32* %eof.addr, align 4, !dbg !2172
  %add30 = add nsw i32 0, %23, !dbg !2174
  call void @send_bits(i32 %add30, i32 3), !dbg !2175
  %24 = load i64, i64* @compressed_len, align 8, !dbg !2176
  %add31 = add nsw i64 %24, 3, !dbg !2177
  %add32 = add nsw i64 %add31, 7, !dbg !2178
  %and = and i64 %add32, -8, !dbg !2179
  store i64 %and, i64* @compressed_len, align 8, !dbg !2180
  %25 = load i64, i64* %stored_len.addr, align 8, !dbg !2181
  %add33 = add i64 %25, 4, !dbg !2182
  %shl34 = shl i64 %add33, 3, !dbg !2183
  %26 = load i64, i64* @compressed_len, align 8, !dbg !2184
  %add35 = add i64 %26, %shl34, !dbg !2184
  store i64 %add35, i64* @compressed_len, align 8, !dbg !2184
  %27 = load i8*, i8** %buf.addr, align 8, !dbg !2185
  %28 = load i64, i64* %stored_len.addr, align 8, !dbg !2186
  %conv36 = trunc i64 %28 to i32, !dbg !2187
  call void @copy_block(i8* %27, i32 %conv36, i32 1), !dbg !2188
  br label %if.end52, !dbg !2189

if.else37:                                        ; preds = %land.lhs.true26, %if.else
  %29 = load i64, i64* %static_lenb, align 8, !dbg !2190
  %30 = load i64, i64* %opt_lenb, align 8, !dbg !2192
  %cmp38 = icmp eq i64 %29, %30, !dbg !2193
  br i1 %cmp38, label %if.then40, label %if.else44, !dbg !2194

if.then40:                                        ; preds = %if.else37
  %31 = load i32, i32* %eof.addr, align 4, !dbg !2195
  %add41 = add nsw i32 2, %31, !dbg !2197
  call void @send_bits(i32 %add41, i32 3), !dbg !2198
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 0)), !dbg !2199
  %32 = load i64, i64* @static_len, align 8, !dbg !2200
  %add42 = add i64 3, %32, !dbg !2201
  %33 = load i64, i64* @compressed_len, align 8, !dbg !2202
  %add43 = add i64 %33, %add42, !dbg !2202
  store i64 %add43, i64* @compressed_len, align 8, !dbg !2202
  br label %if.end51, !dbg !2203

if.else44:                                        ; preds = %if.else37
  %34 = load i32, i32* %eof.addr, align 4, !dbg !2204
  %add45 = add nsw i32 4, %34, !dbg !2206
  call void @send_bits(i32 %add45, i32 3), !dbg !2207
  %35 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4, !dbg !2208, !ctir !12
  %add46 = add nsw i32 %35, 1, !dbg !2209
  %36 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4, !dbg !2210, !ctir !12
  %add47 = add nsw i32 %36, 1, !dbg !2211
  %37 = load i32, i32* %max_blindex, align 4, !dbg !2212
  %add48 = add nsw i32 %37, 1, !dbg !2213
  call void @send_all_trees(i32 %add46, i32 %add47, i32 %add48), !dbg !2214
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0)), !dbg !2215
  %38 = load i64, i64* @opt_len, align 8, !dbg !2216
  %add49 = add i64 3, %38, !dbg !2217
  %39 = load i64, i64* @compressed_len, align 8, !dbg !2218
  %add50 = add i64 %39, %add49, !dbg !2218
  store i64 %add50, i64* @compressed_len, align 8, !dbg !2218
  br label %if.end51

if.end51:                                         ; preds = %if.else44, %if.then40
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then29
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end21
  call void @init_block(), !dbg !2219
  %40 = load i32, i32* %eof.addr, align 4, !dbg !2220
  %tobool54 = icmp ne i32 %40, 0, !dbg !2220
  br i1 %tobool54, label %if.then55, label %if.else57, !dbg !2222

if.then55:                                        ; preds = %if.end53
  call void @bi_windup(), !dbg !2223
  %41 = load i64, i64* @compressed_len, align 8, !dbg !2225
  %add56 = add nsw i64 %41, 7, !dbg !2225
  store i64 %add56, i64* @compressed_len, align 8, !dbg !2225
  br label %if.end68, !dbg !2226

if.else57:                                        ; preds = %if.end53
  %42 = load i32, i32* %pad.addr, align 4, !dbg !2227
  %tobool58 = icmp ne i32 %42, 0, !dbg !2227
  br i1 %tobool58, label %land.lhs.true59, label %if.end67, !dbg !2229

land.lhs.true59:                                  ; preds = %if.else57
  %43 = load i64, i64* @compressed_len, align 8, !dbg !2230
  %rem = srem i64 %43, 8, !dbg !2231
  %cmp60 = icmp ne i64 %rem, 0, !dbg !2232
  br i1 %cmp60, label %if.then62, label %if.end67, !dbg !2233

if.then62:                                        ; preds = %land.lhs.true59
  %44 = load i32, i32* %eof.addr, align 4, !dbg !2234
  %add63 = add nsw i32 0, %44, !dbg !2236
  call void @send_bits(i32 %add63, i32 3), !dbg !2237
  %45 = load i64, i64* @compressed_len, align 8, !dbg !2238
  %add64 = add nsw i64 %45, 3, !dbg !2239
  %add65 = add nsw i64 %add64, 7, !dbg !2240
  %and66 = and i64 %add65, -8, !dbg !2241
  store i64 %and66, i64* @compressed_len, align 8, !dbg !2242
  %46 = load i8*, i8** %buf.addr, align 8, !dbg !2243
  call void @copy_block(i8* %46, i32 0, i32 1), !dbg !2244
  br label %if.end67, !dbg !2245

if.end67:                                         ; preds = %if.then62, %land.lhs.true59, %if.else57
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then55
  %47 = load i64, i64* @compressed_len, align 8, !dbg !2246
  %shr69 = ashr i64 %47, 3, !dbg !2247
  ret i64 %shr69, !dbg !2248
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fill_window() #0 !dbg !2249 {
entry:
  %n = alloca i32, align 4, !ctir !6
  %m = alloca i32, align 4, !ctir !6
  %more = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2250, metadata !DIExpression()), !dbg !2251
  call void @llvm.dbg.declare(metadata i32* %m, metadata !2252, metadata !DIExpression()), !dbg !2253
  call void @llvm.dbg.declare(metadata i32* %more, metadata !2254, metadata !DIExpression()), !dbg !2255
  %0 = load i64, i64* @window_size, align 8, !dbg !2256
  %1 = load i32, i32* @lookahead, align 4, !dbg !2257
  %conv = zext i32 %1 to i64, !dbg !2258
  %sub = sub i64 %0, %conv, !dbg !2259
  %2 = load i32, i32* @strstart, align 4, !dbg !2260
  %conv1 = zext i32 %2 to i64, !dbg !2261
  %sub2 = sub i64 %sub, %conv1, !dbg !2262
  %conv3 = trunc i64 %sub2 to i32, !dbg !2263
  store i32 %conv3, i32* %more, align 4, !dbg !2255
  %3 = load i32, i32* %more, align 4, !dbg !2264
  %cmp = icmp eq i32 %3, -1, !dbg !2266
  br i1 %cmp, label %if.then, label %if.else, !dbg !2267

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %more, align 4, !dbg !2268
  %dec = add i32 %4, -1, !dbg !2268
  store i32 %dec, i32* %more, align 4, !dbg !2268
  br label %if.end45, !dbg !2270

if.else:                                          ; preds = %entry
  %5 = load i32, i32* @strstart, align 4, !dbg !2271
  %cmp5 = icmp uge i32 %5, 65274, !dbg !2273
  br i1 %cmp5, label %if.then7, label %if.end44, !dbg !2274

if.then7:                                         ; preds = %if.else
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i8* align 1 getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 32768), i64 32768, i1 false), !dbg !2275
  %6 = load i32, i32* @match_start, align 4, !dbg !2277
  %sub8 = sub i32 %6, 32768, !dbg !2277
  store i32 %sub8, i32* @match_start, align 4, !dbg !2277
  %7 = load i32, i32* @strstart, align 4, !dbg !2278
  %sub9 = sub i32 %7, 32768, !dbg !2278
  store i32 %sub9, i32* @strstart, align 4, !dbg !2278
  %8 = load i64, i64* @rsync_chunk_end, align 8, !dbg !2279
  %cmp10 = icmp ne i64 %8, 4294967295, !dbg !2281
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !2282

if.then12:                                        ; preds = %if.then7
  %9 = load i64, i64* @rsync_chunk_end, align 8, !dbg !2283
  %sub13 = sub i64 %9, 32768, !dbg !2283
  store i64 %sub13, i64* @rsync_chunk_end, align 8, !dbg !2283
  br label %if.end, !dbg !2284

if.end:                                           ; preds = %if.then12, %if.then7
  %10 = load i64, i64* @block_start, align 8, !dbg !2285
  %sub14 = sub nsw i64 %10, 32768, !dbg !2285
  store i64 %sub14, i64* @block_start, align 8, !dbg !2285
  store i32 0, i32* %n, align 4, !dbg !2286
  br label %for.cond, !dbg !2288

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %n, align 4, !dbg !2289
  %cmp15 = icmp ult i32 %11, 32768, !dbg !2291
  br i1 %cmp15, label %for.body, label %for.end, !dbg !2292

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n, align 4, !dbg !2293
  %idxprom = zext i32 %12 to i64, !dbg !2295
  %arrayidx = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom, !dbg !2295, !ctir !166
  %13 = load i16, i16* %arrayidx, align 2, !dbg !2295
  %conv17 = zext i16 %13 to i32, !dbg !2295
  store i32 %conv17, i32* %m, align 4, !dbg !2296
  %14 = load i32, i32* %m, align 4, !dbg !2297
  %cmp18 = icmp uge i32 %14, 32768, !dbg !2298
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !2297

cond.true:                                        ; preds = %for.body
  %15 = load i32, i32* %m, align 4, !dbg !2299
  %sub20 = sub i32 %15, 32768, !dbg !2300
  br label %cond.end, !dbg !2297

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !2297

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub20, %cond.true ], [ 0, %cond.false ], !dbg !2297
  %conv21 = trunc i32 %cond to i16, !dbg !2301
  %16 = load i32, i32* %n, align 4, !dbg !2302
  %idxprom22 = zext i32 %16 to i64, !dbg !2303
  %arrayidx23 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom22, !dbg !2303, !ctir !166
  store i16 %conv21, i16* %arrayidx23, align 2, !dbg !2304
  br label %for.inc, !dbg !2305

for.inc:                                          ; preds = %cond.end
  %17 = load i32, i32* %n, align 4, !dbg !2306
  %inc = add i32 %17, 1, !dbg !2306
  store i32 %inc, i32* %n, align 4, !dbg !2306
  br label %for.cond, !dbg !2307, !llvm.loop !2308

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4, !dbg !2310
  br label %for.cond24, !dbg !2312

for.cond24:                                       ; preds = %for.inc41, %for.end
  %18 = load i32, i32* %n, align 4, !dbg !2313
  %cmp25 = icmp ult i32 %18, 32768, !dbg !2315
  br i1 %cmp25, label %for.body27, label %for.end43, !dbg !2316

for.body27:                                       ; preds = %for.cond24
  %19 = load i32, i32* %n, align 4, !dbg !2317
  %idxprom28 = zext i32 %19 to i64, !dbg !2319
  %arrayidx29 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom28, !dbg !2319, !ctir !155
  %20 = load i16, i16* %arrayidx29, align 2, !dbg !2319
  %conv30 = zext i16 %20 to i32, !dbg !2319
  store i32 %conv30, i32* %m, align 4, !dbg !2320
  %21 = load i32, i32* %m, align 4, !dbg !2321
  %cmp31 = icmp uge i32 %21, 32768, !dbg !2322
  br i1 %cmp31, label %cond.true33, label %cond.false35, !dbg !2321

cond.true33:                                      ; preds = %for.body27
  %22 = load i32, i32* %m, align 4, !dbg !2323
  %sub34 = sub i32 %22, 32768, !dbg !2324
  br label %cond.end36, !dbg !2321

cond.false35:                                     ; preds = %for.body27
  br label %cond.end36, !dbg !2321

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi i32 [ %sub34, %cond.true33 ], [ 0, %cond.false35 ], !dbg !2321
  %conv38 = trunc i32 %cond37 to i16, !dbg !2325
  %23 = load i32, i32* %n, align 4, !dbg !2326
  %idxprom39 = zext i32 %23 to i64, !dbg !2327
  %arrayidx40 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %idxprom39, !dbg !2327, !ctir !155
  store i16 %conv38, i16* %arrayidx40, align 2, !dbg !2328
  br label %for.inc41, !dbg !2329

for.inc41:                                        ; preds = %cond.end36
  %24 = load i32, i32* %n, align 4, !dbg !2330
  %inc42 = add i32 %24, 1, !dbg !2330
  store i32 %inc42, i32* %n, align 4, !dbg !2330
  br label %for.cond24, !dbg !2331, !llvm.loop !2332

for.end43:                                        ; preds = %for.cond24
  %25 = load i32, i32* %more, align 4, !dbg !2334
  %add = add i32 %25, 32768, !dbg !2334
  store i32 %add, i32* %more, align 4, !dbg !2334
  br label %if.end44, !dbg !2335

if.end44:                                         ; preds = %for.end43, %if.else
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then
  %26 = load i32, i32* @eofile, align 4, !dbg !2336
  %tobool = icmp ne i32 %26, 0, !dbg !2336
  br i1 %tobool, label %if.end57, label %if.then46, !dbg !2338

if.then46:                                        ; preds = %if.end45
  %27 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 8, !dbg !2339
  %28 = load i32, i32* @strstart, align 4, !dbg !2341
  %idx.ext = zext i32 %28 to i64, !dbg !2342
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext, !dbg !2342, !ctir !20
  %29 = load i32, i32* @lookahead, align 4, !dbg !2343
  %idx.ext47 = zext i32 %29 to i64, !dbg !2344
  %add.ptr48 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext47, !dbg !2344, !ctir !20
  %30 = load i32, i32* %more, align 4, !dbg !2345
  %call = call i32 %27(i8* %add.ptr48, i32 %30), !dbg !2339
  store i32 %call, i32* %n, align 4, !dbg !2346
  %31 = load i32, i32* %n, align 4, !dbg !2347
  %cmp49 = icmp eq i32 %31, 0, !dbg !2349
  br i1 %cmp49, label %if.then53, label %lor.lhs.false, !dbg !2350

lor.lhs.false:                                    ; preds = %if.then46
  %32 = load i32, i32* %n, align 4, !dbg !2351
  %cmp51 = icmp eq i32 %32, -1, !dbg !2352
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !2353

if.then53:                                        ; preds = %lor.lhs.false, %if.then46
  store i32 1, i32* @eofile, align 4, !dbg !2354
  br label %if.end56, !dbg !2356

if.else54:                                        ; preds = %lor.lhs.false
  %33 = load i32, i32* %n, align 4, !dbg !2357
  %34 = load i32, i32* @lookahead, align 4, !dbg !2359
  %add55 = add i32 %34, %33, !dbg !2359
  store i32 %add55, i32* @lookahead, align 4, !dbg !2359
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then53
  br label %if.end57, !dbg !2360

if.end57:                                         ; preds = %if.end56, %if.end45
  ret void, !dbg !2361
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_file_type() #0 !dbg !2362 {
entry:
  %n = alloca i32, align 4, !ctir !12
  %ascii_freq = alloca i32, align 4, !ctir !6
  %bin_freq = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2363, metadata !DIExpression()), !dbg !2364
  store i32 0, i32* %n, align 4, !dbg !2364
  call void @llvm.dbg.declare(metadata i32* %ascii_freq, metadata !2365, metadata !DIExpression()), !dbg !2366
  store i32 0, i32* %ascii_freq, align 4, !dbg !2366
  call void @llvm.dbg.declare(metadata i32* %bin_freq, metadata !2367, metadata !DIExpression()), !dbg !2368
  store i32 0, i32* %bin_freq, align 4, !dbg !2368
  br label %while.cond, !dbg !2369

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n, align 4, !dbg !2370
  %cmp = icmp slt i32 %0, 7, !dbg !2371
  br i1 %cmp, label %while.body, label %while.end, !dbg !2369

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n, align 4, !dbg !2372
  %inc = add nsw i32 %1, 1, !dbg !2372
  store i32 %inc, i32* %n, align 4, !dbg !2372
  %idxprom = sext i32 %1 to i64, !dbg !2373
  %arrayidx = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom, !dbg !2373, !ctir !266
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0, !dbg !2374, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !2374
  %2 = load i16, i16* %freq, align 4, !dbg !2374, !ctir !58
  %conv = zext i16 %2 to i32, !dbg !2373
  %3 = load i32, i32* %bin_freq, align 4, !dbg !2375
  %add = add i32 %3, %conv, !dbg !2375
  store i32 %add, i32* %bin_freq, align 4, !dbg !2375
  br label %while.cond, !dbg !2369, !llvm.loop !2376

while.end:                                        ; preds = %while.cond
  br label %while.cond1, !dbg !2377

while.cond1:                                      ; preds = %while.body4, %while.end
  %4 = load i32, i32* %n, align 4, !dbg !2378
  %cmp2 = icmp slt i32 %4, 128, !dbg !2379
  br i1 %cmp2, label %while.body4, label %while.end12, !dbg !2377

while.body4:                                      ; preds = %while.cond1
  %5 = load i32, i32* %n, align 4, !dbg !2380
  %inc5 = add nsw i32 %5, 1, !dbg !2380
  store i32 %inc5, i32* %n, align 4, !dbg !2380
  %idxprom6 = sext i32 %5 to i64, !dbg !2381
  %arrayidx7 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom6, !dbg !2381, !ctir !266
  %fc8 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx7, i32 0, i32 0, !dbg !2382, !ctir !54
  %freq9 = bitcast %union.anon.0* %fc8 to i16*, !dbg !2382
  %6 = load i16, i16* %freq9, align 4, !dbg !2382, !ctir !58
  %conv10 = zext i16 %6 to i32, !dbg !2381
  %7 = load i32, i32* %ascii_freq, align 4, !dbg !2383
  %add11 = add i32 %7, %conv10, !dbg !2383
  store i32 %add11, i32* %ascii_freq, align 4, !dbg !2383
  br label %while.cond1, !dbg !2377, !llvm.loop !2384

while.end12:                                      ; preds = %while.cond1
  br label %while.cond13, !dbg !2385

while.cond13:                                     ; preds = %while.body16, %while.end12
  %8 = load i32, i32* %n, align 4, !dbg !2386
  %cmp14 = icmp slt i32 %8, 256, !dbg !2387
  br i1 %cmp14, label %while.body16, label %while.end24, !dbg !2385

while.body16:                                     ; preds = %while.cond13
  %9 = load i32, i32* %n, align 4, !dbg !2388
  %inc17 = add nsw i32 %9, 1, !dbg !2388
  store i32 %inc17, i32* %n, align 4, !dbg !2388
  %idxprom18 = sext i32 %9 to i64, !dbg !2389
  %arrayidx19 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom18, !dbg !2389, !ctir !266
  %fc20 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx19, i32 0, i32 0, !dbg !2390, !ctir !54
  %freq21 = bitcast %union.anon.0* %fc20 to i16*, !dbg !2390
  %10 = load i16, i16* %freq21, align 4, !dbg !2390, !ctir !58
  %conv22 = zext i16 %10 to i32, !dbg !2389
  %11 = load i32, i32* %bin_freq, align 4, !dbg !2391
  %add23 = add i32 %11, %conv22, !dbg !2391
  store i32 %add23, i32* %bin_freq, align 4, !dbg !2391
  br label %while.cond13, !dbg !2385, !llvm.loop !2392

while.end24:                                      ; preds = %while.cond13
  %12 = load i32, i32* %bin_freq, align 4, !dbg !2393
  %13 = load i32, i32* %ascii_freq, align 4, !dbg !2394
  %shr = lshr i32 %13, 2, !dbg !2395
  %cmp25 = icmp ugt i32 %12, %shr, !dbg !2396
  %14 = zext i1 %cmp25 to i64, !dbg !2393
  %cond = select i1 %cmp25, i32 0, i32 1, !dbg !2393
  %conv27 = trunc i32 %cond to i16, !dbg !2393
  %15 = load i16*, i16** @file_type, align 8, !dbg !2397
  store i16 %conv27, i16* %15, align 2, !dbg !2398, !ctir !15
  %16 = load i16*, i16** @file_type, align 8, !dbg !2399
  %17 = load i16, i16* %16, align 2, !dbg !2401, !ctir !15
  %conv28 = zext i16 %17 to i32, !dbg !2401
  %cmp29 = icmp eq i32 %conv28, 0, !dbg !2402
  br i1 %cmp29, label %land.lhs.true, label %if.end, !dbg !2403

land.lhs.true:                                    ; preds = %while.end24
  br i1 false, label %if.then, label %if.end, !dbg !2404

if.then:                                          ; preds = %land.lhs.true
  call void @warning(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.196, i64 0, i64 0)), !dbg !2405
  br label %if.end, !dbg !2407

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.end24
  ret void, !dbg !2408
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @build_tree_1(%struct.tree_desc* %desc) #0 !dbg !2409 {
entry:
  %desc.addr = alloca %struct.tree_desc*, align 8
  %tree = alloca %struct.ct_data*, align 8, !ctir !53
  %stree = alloca %struct.ct_data*, align 8, !ctir !53
  %elems = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  %m = alloca i32, align 4, !ctir !12
  %max_code = alloca i32, align 4, !ctir !12
  %node = alloca i32, align 4, !ctir !12
  %new = alloca i32, align 4, !ctir !12
  store %struct.tree_desc* %desc, %struct.tree_desc** %desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_desc** %desc.addr, metadata !2412, metadata !DIExpression()), !dbg !2413
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree, metadata !2414, metadata !DIExpression()), !dbg !2415
  %0 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !2416
  %dyn_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %0, i32 0, i32 0, !dbg !2417, !ctir !68
  %1 = load %struct.ct_data*, %struct.ct_data** %dyn_tree, align 8, !dbg !2417, !ctir !53
  store %struct.ct_data* %1, %struct.ct_data** %tree, align 8, !dbg !2415
  call void @llvm.dbg.declare(metadata %struct.ct_data** %stree, metadata !2418, metadata !DIExpression()), !dbg !2419
  %2 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !2420
  %static_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %2, i32 0, i32 1, !dbg !2421, !ctir !68
  %3 = load %struct.ct_data*, %struct.ct_data** %static_tree, align 8, !dbg !2421, !ctir !53
  store %struct.ct_data* %3, %struct.ct_data** %stree, align 8, !dbg !2419
  call void @llvm.dbg.declare(metadata i32* %elems, metadata !2422, metadata !DIExpression()), !dbg !2423
  %4 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !2424
  %elems1 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %4, i32 0, i32 4, !dbg !2425, !ctir !68
  %5 = load i32, i32* %elems1, align 4, !dbg !2425, !ctir !12
  store i32 %5, i32* %elems, align 4, !dbg !2423
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2426, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.declare(metadata i32* %m, metadata !2428, metadata !DIExpression()), !dbg !2429
  call void @llvm.dbg.declare(metadata i32* %max_code, metadata !2430, metadata !DIExpression()), !dbg !2431
  store i32 -1, i32* %max_code, align 4, !dbg !2431
  call void @llvm.dbg.declare(metadata i32* %node, metadata !2432, metadata !DIExpression()), !dbg !2433
  %6 = load i32, i32* %elems, align 4, !dbg !2434
  store i32 %6, i32* %node, align 4, !dbg !2433
  store i32 0, i32* @heap_len, align 4, !dbg !2435
  store i32 573, i32* @heap_max, align 4, !dbg !2436
  store i32 0, i32* %n, align 4, !dbg !2437
  br label %for.cond, !dbg !2439

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4, !dbg !2440
  %8 = load i32, i32* %elems, align 4, !dbg !2442
  %cmp = icmp slt i32 %7, %8, !dbg !2443
  br i1 %cmp, label %for.body, label %for.end, !dbg !2444

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2445
  %10 = load i32, i32* %n, align 4, !dbg !2448
  %idxprom = sext i32 %10 to i64, !dbg !2445
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %9, i64 %idxprom, !dbg !2445, !ctir !53
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0, !dbg !2449, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !2449
  %11 = load i16, i16* %freq, align 2, !dbg !2449, !ctir !58
  %conv = zext i16 %11 to i32, !dbg !2445
  %cmp2 = icmp ne i32 %conv, 0, !dbg !2450
  br i1 %cmp2, label %if.then, label %if.else, !dbg !2451

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* %n, align 4, !dbg !2452
  store i32 %12, i32* %max_code, align 4, !dbg !2454
  %13 = load i32, i32* @heap_len, align 4, !dbg !2455
  %inc = add nsw i32 %13, 1, !dbg !2455
  store i32 %inc, i32* @heap_len, align 4, !dbg !2455
  %idxprom4 = sext i32 %inc to i64, !dbg !2456
  %arrayidx5 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom4, !dbg !2456, !ctir !403
  store i32 %12, i32* %arrayidx5, align 4, !dbg !2457
  %14 = load i32, i32* %n, align 4, !dbg !2458
  %idxprom6 = sext i32 %14 to i64, !dbg !2459
  %arrayidx7 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom6, !dbg !2459, !ctir !404
  store i8 0, i8* %arrayidx7, align 1, !dbg !2460
  br label %if.end, !dbg !2461

if.else:                                          ; preds = %for.body
  %15 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2462
  %16 = load i32, i32* %n, align 4, !dbg !2464
  %idxprom8 = sext i32 %16 to i64, !dbg !2462
  %arrayidx9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %15, i64 %idxprom8, !dbg !2462, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx9, i32 0, i32 1, !dbg !2465, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !2465
  store i16 0, i16* %len, align 2, !dbg !2466, !ctir !63
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !2467

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %n, align 4, !dbg !2468
  %inc10 = add nsw i32 %17, 1, !dbg !2468
  store i32 %inc10, i32* %n, align 4, !dbg !2468
  br label %for.cond, !dbg !2469, !llvm.loop !2470

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !2472

while.cond:                                       ; preds = %if.end31, %for.end
  %18 = load i32, i32* @heap_len, align 4, !dbg !2473
  %cmp11 = icmp slt i32 %18, 2, !dbg !2474
  br i1 %cmp11, label %while.body, label %while.end, !dbg !2472

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %new, metadata !2475, metadata !DIExpression()), !dbg !2477
  %19 = load i32, i32* %max_code, align 4, !dbg !2478
  %cmp13 = icmp slt i32 %19, 2, !dbg !2479
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !2478

cond.true:                                        ; preds = %while.body
  %20 = load i32, i32* %max_code, align 4, !dbg !2480
  %inc15 = add nsw i32 %20, 1, !dbg !2480
  store i32 %inc15, i32* %max_code, align 4, !dbg !2480
  br label %cond.end, !dbg !2478

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !2478

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc15, %cond.true ], [ 0, %cond.false ], !dbg !2478
  %21 = load i32, i32* @heap_len, align 4, !dbg !2481
  %inc16 = add nsw i32 %21, 1, !dbg !2481
  store i32 %inc16, i32* @heap_len, align 4, !dbg !2481
  %idxprom17 = sext i32 %inc16 to i64, !dbg !2482
  %arrayidx18 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom17, !dbg !2482, !ctir !403
  store i32 %cond, i32* %arrayidx18, align 4, !dbg !2483
  store i32 %cond, i32* %new, align 4, !dbg !2477
  %22 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2484
  %23 = load i32, i32* %new, align 4, !dbg !2485
  %idxprom19 = sext i32 %23 to i64, !dbg !2484
  %arrayidx20 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %22, i64 %idxprom19, !dbg !2484, !ctir !53
  %fc21 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx20, i32 0, i32 0, !dbg !2486, !ctir !54
  %freq22 = bitcast %union.anon.0* %fc21 to i16*, !dbg !2486
  store i16 1, i16* %freq22, align 2, !dbg !2487, !ctir !58
  %24 = load i32, i32* %new, align 4, !dbg !2488
  %idxprom23 = sext i32 %24 to i64, !dbg !2489
  %arrayidx24 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom23, !dbg !2489, !ctir !404
  store i8 0, i8* %arrayidx24, align 1, !dbg !2490
  %25 = load i64, i64* @opt_len, align 8, !dbg !2491
  %dec = add i64 %25, -1, !dbg !2491
  store i64 %dec, i64* @opt_len, align 8, !dbg !2491
  %26 = load %struct.ct_data*, %struct.ct_data** %stree, align 8, !dbg !2492
  %tobool = icmp ne %struct.ct_data* %26, null, !dbg !2492
  br i1 %tobool, label %if.then25, label %if.end31, !dbg !2494

if.then25:                                        ; preds = %cond.end
  %27 = load %struct.ct_data*, %struct.ct_data** %stree, align 8, !dbg !2495
  %28 = load i32, i32* %new, align 4, !dbg !2496
  %idxprom26 = sext i32 %28 to i64, !dbg !2495
  %arrayidx27 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %27, i64 %idxprom26, !dbg !2495, !ctir !53
  %dl28 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx27, i32 0, i32 1, !dbg !2497, !ctir !54
  %len29 = bitcast %union.anon.0* %dl28 to i16*, !dbg !2497
  %29 = load i16, i16* %len29, align 2, !dbg !2497, !ctir !63
  %conv30 = zext i16 %29 to i64, !dbg !2495
  %30 = load i64, i64* @static_len, align 8, !dbg !2498
  %sub = sub i64 %30, %conv30, !dbg !2498
  store i64 %sub, i64* @static_len, align 8, !dbg !2498
  br label %if.end31, !dbg !2499

if.end31:                                         ; preds = %if.then25, %cond.end
  br label %while.cond, !dbg !2472, !llvm.loop !2500

while.end:                                        ; preds = %while.cond
  %31 = load i32, i32* %max_code, align 4, !dbg !2502
  %32 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !2503
  %max_code32 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %32, i32 0, i32 6, !dbg !2504, !ctir !68
  store i32 %31, i32* %max_code32, align 4, !dbg !2505, !ctir !12
  %33 = load i32, i32* @heap_len, align 4, !dbg !2506
  %div = sdiv i32 %33, 2, !dbg !2508
  store i32 %div, i32* %n, align 4, !dbg !2509
  br label %for.cond33, !dbg !2510

for.cond33:                                       ; preds = %for.inc37, %while.end
  %34 = load i32, i32* %n, align 4, !dbg !2511
  %cmp34 = icmp sge i32 %34, 1, !dbg !2513
  br i1 %cmp34, label %for.body36, label %for.end39, !dbg !2514

for.body36:                                       ; preds = %for.cond33
  %35 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2515
  %36 = load i32, i32* %n, align 4, !dbg !2516
  call void @pqdownheap(%struct.ct_data* %35, i32 %36), !dbg !2517
  br label %for.inc37, !dbg !2517

for.inc37:                                        ; preds = %for.body36
  %37 = load i32, i32* %n, align 4, !dbg !2518
  %dec38 = add nsw i32 %37, -1, !dbg !2518
  store i32 %dec38, i32* %n, align 4, !dbg !2518
  br label %for.cond33, !dbg !2519, !llvm.loop !2520

for.end39:                                        ; preds = %for.cond33
  br label %do.body, !dbg !2522

do.body:                                          ; preds = %do.cond, %for.end39
  %38 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4, !dbg !2523
  store i32 %38, i32* %n, align 4, !dbg !2523
  %39 = load i32, i32* @heap_len, align 4, !dbg !2523
  %dec40 = add nsw i32 %39, -1, !dbg !2523
  store i32 %dec40, i32* @heap_len, align 4, !dbg !2523
  %idxprom41 = sext i32 %39 to i64, !dbg !2523
  %arrayidx42 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom41, !dbg !2523, !ctir !403
  %40 = load i32, i32* %arrayidx42, align 4, !dbg !2523
  store i32 %40, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4, !dbg !2523
  %41 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2523
  call void @pqdownheap(%struct.ct_data* %41, i32 1), !dbg !2523
  %42 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4, !dbg !2526
  store i32 %42, i32* %m, align 4, !dbg !2527
  %43 = load i32, i32* %n, align 4, !dbg !2528
  %44 = load i32, i32* @heap_max, align 4, !dbg !2529
  %dec43 = add nsw i32 %44, -1, !dbg !2529
  store i32 %dec43, i32* @heap_max, align 4, !dbg !2529
  %idxprom44 = sext i32 %dec43 to i64, !dbg !2530
  %arrayidx45 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom44, !dbg !2530, !ctir !403
  store i32 %43, i32* %arrayidx45, align 4, !dbg !2531
  %45 = load i32, i32* %m, align 4, !dbg !2532
  %46 = load i32, i32* @heap_max, align 4, !dbg !2533
  %dec46 = add nsw i32 %46, -1, !dbg !2533
  store i32 %dec46, i32* @heap_max, align 4, !dbg !2533
  %idxprom47 = sext i32 %dec46 to i64, !dbg !2534
  %arrayidx48 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom47, !dbg !2534, !ctir !403
  store i32 %45, i32* %arrayidx48, align 4, !dbg !2535
  %47 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2536
  %48 = load i32, i32* %n, align 4, !dbg !2537
  %idxprom49 = sext i32 %48 to i64, !dbg !2536
  %arrayidx50 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %47, i64 %idxprom49, !dbg !2536, !ctir !53
  %fc51 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx50, i32 0, i32 0, !dbg !2538, !ctir !54
  %freq52 = bitcast %union.anon.0* %fc51 to i16*, !dbg !2538
  %49 = load i16, i16* %freq52, align 2, !dbg !2538, !ctir !58
  %conv53 = zext i16 %49 to i32, !dbg !2536
  %50 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2539
  %51 = load i32, i32* %m, align 4, !dbg !2540
  %idxprom54 = sext i32 %51 to i64, !dbg !2539
  %arrayidx55 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %50, i64 %idxprom54, !dbg !2539, !ctir !53
  %fc56 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx55, i32 0, i32 0, !dbg !2541, !ctir !54
  %freq57 = bitcast %union.anon.0* %fc56 to i16*, !dbg !2541
  %52 = load i16, i16* %freq57, align 2, !dbg !2541, !ctir !58
  %conv58 = zext i16 %52 to i32, !dbg !2539
  %add = add nsw i32 %conv53, %conv58, !dbg !2542
  %conv59 = trunc i32 %add to i16, !dbg !2536
  %53 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2543
  %54 = load i32, i32* %node, align 4, !dbg !2544
  %idxprom60 = sext i32 %54 to i64, !dbg !2543
  %arrayidx61 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %53, i64 %idxprom60, !dbg !2543, !ctir !53
  %fc62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx61, i32 0, i32 0, !dbg !2545, !ctir !54
  %freq63 = bitcast %union.anon.0* %fc62 to i16*, !dbg !2545
  store i16 %conv59, i16* %freq63, align 2, !dbg !2546, !ctir !58
  %55 = load i32, i32* %n, align 4, !dbg !2547
  %idxprom64 = sext i32 %55 to i64, !dbg !2547
  %arrayidx65 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom64, !dbg !2547, !ctir !404
  %56 = load i8, i8* %arrayidx65, align 1, !dbg !2547
  %conv66 = zext i8 %56 to i32, !dbg !2547
  %57 = load i32, i32* %m, align 4, !dbg !2547
  %idxprom67 = sext i32 %57 to i64, !dbg !2547
  %arrayidx68 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom67, !dbg !2547, !ctir !404
  %58 = load i8, i8* %arrayidx68, align 1, !dbg !2547
  %conv69 = zext i8 %58 to i32, !dbg !2547
  %cmp70 = icmp sge i32 %conv66, %conv69, !dbg !2547
  br i1 %cmp70, label %cond.true72, label %cond.false76, !dbg !2547

cond.true72:                                      ; preds = %do.body
  %59 = load i32, i32* %n, align 4, !dbg !2547
  %idxprom73 = sext i32 %59 to i64, !dbg !2547
  %arrayidx74 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom73, !dbg !2547, !ctir !404
  %60 = load i8, i8* %arrayidx74, align 1, !dbg !2547
  %conv75 = zext i8 %60 to i32, !dbg !2547
  br label %cond.end80, !dbg !2547

cond.false76:                                     ; preds = %do.body
  %61 = load i32, i32* %m, align 4, !dbg !2547
  %idxprom77 = sext i32 %61 to i64, !dbg !2547
  %arrayidx78 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom77, !dbg !2547, !ctir !404
  %62 = load i8, i8* %arrayidx78, align 1, !dbg !2547
  %conv79 = zext i8 %62 to i32, !dbg !2547
  br label %cond.end80, !dbg !2547

cond.end80:                                       ; preds = %cond.false76, %cond.true72
  %cond81 = phi i32 [ %conv75, %cond.true72 ], [ %conv79, %cond.false76 ], !dbg !2547
  %add82 = add nsw i32 %cond81, 1, !dbg !2548
  %conv83 = trunc i32 %add82 to i8, !dbg !2549
  %63 = load i32, i32* %node, align 4, !dbg !2550
  %idxprom84 = sext i32 %63 to i64, !dbg !2551
  %arrayidx85 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom84, !dbg !2551, !ctir !404
  store i8 %conv83, i8* %arrayidx85, align 1, !dbg !2552
  %64 = load i32, i32* %node, align 4, !dbg !2553
  %conv86 = trunc i32 %64 to i16, !dbg !2554
  %65 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2555
  %66 = load i32, i32* %m, align 4, !dbg !2556
  %idxprom87 = sext i32 %66 to i64, !dbg !2555
  %arrayidx88 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %65, i64 %idxprom87, !dbg !2555, !ctir !53
  %dl89 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx88, i32 0, i32 1, !dbg !2557, !ctir !54
  %dad = bitcast %union.anon.0* %dl89 to i16*, !dbg !2557
  store i16 %conv86, i16* %dad, align 2, !dbg !2558, !ctir !63
  %67 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2559
  %68 = load i32, i32* %n, align 4, !dbg !2560
  %idxprom90 = sext i32 %68 to i64, !dbg !2559
  %arrayidx91 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %67, i64 %idxprom90, !dbg !2559, !ctir !53
  %dl92 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx91, i32 0, i32 1, !dbg !2561, !ctir !54
  %dad93 = bitcast %union.anon.0* %dl92 to i16*, !dbg !2561
  store i16 %conv86, i16* %dad93, align 2, !dbg !2562, !ctir !63
  %69 = load i32, i32* %node, align 4, !dbg !2563
  %inc94 = add nsw i32 %69, 1, !dbg !2563
  store i32 %inc94, i32* %node, align 4, !dbg !2563
  store i32 %69, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4, !dbg !2564
  %70 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2565
  call void @pqdownheap(%struct.ct_data* %70, i32 1), !dbg !2566
  br label %do.cond, !dbg !2567

do.cond:                                          ; preds = %cond.end80
  %71 = load i32, i32* @heap_len, align 4, !dbg !2568
  %cmp95 = icmp sge i32 %71, 2, !dbg !2569
  br i1 %cmp95, label %do.body, label %do.end, !dbg !2567, !llvm.loop !2570

do.end:                                           ; preds = %do.cond
  %72 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4, !dbg !2572
  %73 = load i32, i32* @heap_max, align 4, !dbg !2573
  %dec97 = add nsw i32 %73, -1, !dbg !2573
  store i32 %dec97, i32* @heap_max, align 4, !dbg !2573
  %idxprom98 = sext i32 %dec97 to i64, !dbg !2574
  %arrayidx99 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom98, !dbg !2574, !ctir !403
  store i32 %72, i32* %arrayidx99, align 4, !dbg !2575
  %74 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !2576
  call void @gen_bitlen(%struct.tree_desc* %74), !dbg !2577
  %75 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !2578
  %76 = load i32, i32* %max_code, align 4, !dbg !2579
  call void @gen_codes(%struct.ct_data* %75, i32 %76), !dbg !2580
  ret void, !dbg !2581
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @build_bl_tree() #0 !dbg !2582 {
entry:
  %max_blindex = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %max_blindex, metadata !2585, metadata !DIExpression()), !dbg !2586
  %0 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4, !dbg !2587, !ctir !12
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), i32 %0), !dbg !2588
  %1 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4, !dbg !2589, !ctir !12
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0), i32 %1), !dbg !2590
  call void @build_tree_1(%struct.tree_desc* @bl_desc), !dbg !2591
  store i32 18, i32* %max_blindex, align 4, !dbg !2592
  br label %for.cond, !dbg !2594

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %max_blindex, align 4, !dbg !2595
  %cmp = icmp sge i32 %2, 3, !dbg !2597
  br i1 %cmp, label %for.body, label %for.end, !dbg !2598

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %max_blindex, align 4, !dbg !2599
  %idxprom = sext i32 %3 to i64, !dbg !2602
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i64 0, i64 %idxprom, !dbg !2602, !ctir !405
  %4 = load i8, i8* %arrayidx, align 1, !dbg !2602
  %idxprom1 = zext i8 %4 to i64, !dbg !2603
  %arrayidx2 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom1, !dbg !2603, !ctir !402
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx2, i32 0, i32 1, !dbg !2604, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !2604
  %5 = load i16, i16* %len, align 2, !dbg !2604, !ctir !63
  %conv = zext i16 %5 to i32, !dbg !2603
  %cmp3 = icmp ne i32 %conv, 0, !dbg !2605
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2606

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !2607

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2608

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %max_blindex, align 4, !dbg !2609
  %dec = add nsw i32 %6, -1, !dbg !2609
  store i32 %dec, i32* %max_blindex, align 4, !dbg !2609
  br label %for.cond, !dbg !2610, !llvm.loop !2611

for.end:                                          ; preds = %if.then, %for.cond
  %7 = load i32, i32* %max_blindex, align 4, !dbg !2613
  %add = add nsw i32 %7, 1, !dbg !2614
  %mul = mul nsw i32 3, %add, !dbg !2615
  %add5 = add nsw i32 %mul, 5, !dbg !2616
  %add6 = add nsw i32 %add5, 5, !dbg !2617
  %add7 = add nsw i32 %add6, 4, !dbg !2618
  %conv8 = sext i32 %add7 to i64, !dbg !2619
  %8 = load i64, i64* @opt_len, align 8, !dbg !2620
  %add9 = add i64 %8, %conv8, !dbg !2620
  store i64 %add9, i64* @opt_len, align 8, !dbg !2620
  %9 = load i32, i32* %max_blindex, align 4, !dbg !2621
  ret i32 %9, !dbg !2622
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @error(i8* %m) #0 !dbg !2623 {
entry:
  %m.addr = alloca i8*, align 8
  store i8* %m, i8** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %m.addr, metadata !2626, metadata !DIExpression()), !dbg !2627
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2628
  %1 = load i8*, i8** @progname, align 8, !dbg !2629
  %2 = load i8*, i8** %m.addr, align 8, !dbg !2630
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.73, i64 0, i64 0), i8* %1, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %2), !dbg !2631
  call void @abort_gzip(), !dbg !2632
  ret void, !dbg !2633
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @copy_block(i8* %buf, i32 %len, i32 %header) #0 !dbg !2634 {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %header.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !2637, metadata !DIExpression()), !dbg !2638
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !2639, metadata !DIExpression()), !dbg !2640
  store i32 %header, i32* %header.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %header.addr, metadata !2641, metadata !DIExpression()), !dbg !2642
  call void @bi_windup(), !dbg !2643
  %0 = load i32, i32* %header.addr, align 4, !dbg !2644
  %tobool = icmp ne i32 %0, 0, !dbg !2644
  br i1 %tobool, label %if.then, label %if.end76, !dbg !2646

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4, !dbg !2647
  %cmp = icmp ult i32 %1, 16382, !dbg !2647
  br i1 %cmp, label %if.then1, label %if.else, !dbg !2651

if.then1:                                         ; preds = %if.then
  %2 = load i32, i32* %len.addr, align 4, !dbg !2652
  %conv = trunc i32 %2 to i16, !dbg !2652
  %conv2 = zext i16 %conv to i32, !dbg !2652
  %and = and i32 %conv2, 255, !dbg !2652
  %conv3 = trunc i32 %and to i8, !dbg !2652
  %3 = load i32, i32* @outcnt, align 4, !dbg !2652
  %inc = add i32 %3, 1, !dbg !2652
  store i32 %inc, i32* @outcnt, align 4, !dbg !2652
  %idxprom = zext i32 %3 to i64, !dbg !2652
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom, !dbg !2652, !ctir !149
  store i8 %conv3, i8* %arrayidx, align 1, !dbg !2652
  %4 = load i32, i32* %len.addr, align 4, !dbg !2652
  %conv4 = trunc i32 %4 to i16, !dbg !2652
  %conv5 = zext i16 %conv4 to i32, !dbg !2652
  %shr = ashr i32 %conv5, 8, !dbg !2652
  %conv6 = trunc i32 %shr to i8, !dbg !2652
  %5 = load i32, i32* @outcnt, align 4, !dbg !2652
  %inc7 = add i32 %5, 1, !dbg !2652
  store i32 %inc7, i32* @outcnt, align 4, !dbg !2652
  %idxprom8 = zext i32 %5 to i64, !dbg !2652
  %arrayidx9 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom8, !dbg !2652, !ctir !149
  store i8 %conv6, i8* %arrayidx9, align 1, !dbg !2652
  br label %if.end31, !dbg !2652

if.else:                                          ; preds = %if.then
  %6 = load i32, i32* %len.addr, align 4, !dbg !2654
  %conv10 = trunc i32 %6 to i16, !dbg !2654
  %conv11 = zext i16 %conv10 to i32, !dbg !2654
  %and12 = and i32 %conv11, 255, !dbg !2654
  %conv13 = trunc i32 %and12 to i8, !dbg !2654
  %7 = load i32, i32* @outcnt, align 4, !dbg !2654
  %inc14 = add i32 %7, 1, !dbg !2654
  store i32 %inc14, i32* @outcnt, align 4, !dbg !2654
  %idxprom15 = zext i32 %7 to i64, !dbg !2654
  %arrayidx16 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom15, !dbg !2654, !ctir !149
  store i8 %conv13, i8* %arrayidx16, align 1, !dbg !2654
  %8 = load i32, i32* @outcnt, align 4, !dbg !2657
  %cmp17 = icmp eq i32 %8, 16384, !dbg !2657
  br i1 %cmp17, label %if.then19, label %if.end, !dbg !2654

if.then19:                                        ; preds = %if.else
  call void @flush_outbuf(), !dbg !2657
  br label %if.end, !dbg !2657

if.end:                                           ; preds = %if.then19, %if.else
  %9 = load i32, i32* %len.addr, align 4, !dbg !2659
  %conv20 = trunc i32 %9 to i16, !dbg !2659
  %conv21 = zext i16 %conv20 to i32, !dbg !2659
  %shr22 = ashr i32 %conv21, 8, !dbg !2659
  %conv23 = trunc i32 %shr22 to i8, !dbg !2659
  %10 = load i32, i32* @outcnt, align 4, !dbg !2659
  %inc24 = add i32 %10, 1, !dbg !2659
  store i32 %inc24, i32* @outcnt, align 4, !dbg !2659
  %idxprom25 = zext i32 %10 to i64, !dbg !2659
  %arrayidx26 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom25, !dbg !2659, !ctir !149
  store i8 %conv23, i8* %arrayidx26, align 1, !dbg !2659
  %11 = load i32, i32* @outcnt, align 4, !dbg !2661
  %cmp27 = icmp eq i32 %11, 16384, !dbg !2661
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !2659

if.then29:                                        ; preds = %if.end
  call void @flush_outbuf(), !dbg !2661
  br label %if.end30, !dbg !2661

if.end30:                                         ; preds = %if.then29, %if.end
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then1
  %12 = load i32, i32* @outcnt, align 4, !dbg !2663
  %cmp32 = icmp ult i32 %12, 16382, !dbg !2663
  br i1 %cmp32, label %if.then34, label %if.else50, !dbg !2666

if.then34:                                        ; preds = %if.end31
  %13 = load i32, i32* %len.addr, align 4, !dbg !2667
  %neg = xor i32 %13, -1, !dbg !2667
  %conv35 = trunc i32 %neg to i16, !dbg !2667
  %conv36 = zext i16 %conv35 to i32, !dbg !2667
  %and37 = and i32 %conv36, 255, !dbg !2667
  %conv38 = trunc i32 %and37 to i8, !dbg !2667
  %14 = load i32, i32* @outcnt, align 4, !dbg !2667
  %inc39 = add i32 %14, 1, !dbg !2667
  store i32 %inc39, i32* @outcnt, align 4, !dbg !2667
  %idxprom40 = zext i32 %14 to i64, !dbg !2667
  %arrayidx41 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom40, !dbg !2667, !ctir !149
  store i8 %conv38, i8* %arrayidx41, align 1, !dbg !2667
  %15 = load i32, i32* %len.addr, align 4, !dbg !2667
  %neg42 = xor i32 %15, -1, !dbg !2667
  %conv43 = trunc i32 %neg42 to i16, !dbg !2667
  %conv44 = zext i16 %conv43 to i32, !dbg !2667
  %shr45 = ashr i32 %conv44, 8, !dbg !2667
  %conv46 = trunc i32 %shr45 to i8, !dbg !2667
  %16 = load i32, i32* @outcnt, align 4, !dbg !2667
  %inc47 = add i32 %16, 1, !dbg !2667
  store i32 %inc47, i32* @outcnt, align 4, !dbg !2667
  %idxprom48 = zext i32 %16 to i64, !dbg !2667
  %arrayidx49 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom48, !dbg !2667, !ctir !149
  store i8 %conv46, i8* %arrayidx49, align 1, !dbg !2667
  br label %if.end75, !dbg !2667

if.else50:                                        ; preds = %if.end31
  %17 = load i32, i32* %len.addr, align 4, !dbg !2669
  %neg51 = xor i32 %17, -1, !dbg !2669
  %conv52 = trunc i32 %neg51 to i16, !dbg !2669
  %conv53 = zext i16 %conv52 to i32, !dbg !2669
  %and54 = and i32 %conv53, 255, !dbg !2669
  %conv55 = trunc i32 %and54 to i8, !dbg !2669
  %18 = load i32, i32* @outcnt, align 4, !dbg !2669
  %inc56 = add i32 %18, 1, !dbg !2669
  store i32 %inc56, i32* @outcnt, align 4, !dbg !2669
  %idxprom57 = zext i32 %18 to i64, !dbg !2669
  %arrayidx58 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom57, !dbg !2669, !ctir !149
  store i8 %conv55, i8* %arrayidx58, align 1, !dbg !2669
  %19 = load i32, i32* @outcnt, align 4, !dbg !2672
  %cmp59 = icmp eq i32 %19, 16384, !dbg !2672
  br i1 %cmp59, label %if.then61, label %if.end62, !dbg !2669

if.then61:                                        ; preds = %if.else50
  call void @flush_outbuf(), !dbg !2672
  br label %if.end62, !dbg !2672

if.end62:                                         ; preds = %if.then61, %if.else50
  %20 = load i32, i32* %len.addr, align 4, !dbg !2674
  %neg63 = xor i32 %20, -1, !dbg !2674
  %conv64 = trunc i32 %neg63 to i16, !dbg !2674
  %conv65 = zext i16 %conv64 to i32, !dbg !2674
  %shr66 = ashr i32 %conv65, 8, !dbg !2674
  %conv67 = trunc i32 %shr66 to i8, !dbg !2674
  %21 = load i32, i32* @outcnt, align 4, !dbg !2674
  %inc68 = add i32 %21, 1, !dbg !2674
  store i32 %inc68, i32* @outcnt, align 4, !dbg !2674
  %idxprom69 = zext i32 %21 to i64, !dbg !2674
  %arrayidx70 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom69, !dbg !2674, !ctir !149
  store i8 %conv67, i8* %arrayidx70, align 1, !dbg !2674
  %22 = load i32, i32* @outcnt, align 4, !dbg !2676
  %cmp71 = icmp eq i32 %22, 16384, !dbg !2676
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !2674

if.then73:                                        ; preds = %if.end62
  call void @flush_outbuf(), !dbg !2676
  br label %if.end74, !dbg !2676

if.end74:                                         ; preds = %if.then73, %if.end62
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then34
  br label %if.end76, !dbg !2678

if.end76:                                         ; preds = %if.end75, %entry
  br label %while.cond, !dbg !2679

while.cond:                                       ; preds = %if.end84, %if.end76
  %23 = load i32, i32* %len.addr, align 4, !dbg !2680
  %dec = add i32 %23, -1, !dbg !2680
  store i32 %dec, i32* %len.addr, align 4, !dbg !2680
  %tobool77 = icmp ne i32 %23, 0, !dbg !2679
  br i1 %tobool77, label %while.body, label %while.end, !dbg !2679

while.body:                                       ; preds = %while.cond
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !2681
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1, !dbg !2681, !ctir !20
  store i8* %incdec.ptr, i8** %buf.addr, align 8, !dbg !2681
  %25 = load i8, i8* %24, align 1, !dbg !2681, !ctir !20
  %26 = load i32, i32* @outcnt, align 4, !dbg !2681
  %inc78 = add i32 %26, 1, !dbg !2681
  store i32 %inc78, i32* @outcnt, align 4, !dbg !2681
  %idxprom79 = zext i32 %26 to i64, !dbg !2681
  %arrayidx80 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom79, !dbg !2681, !ctir !149
  store i8 %25, i8* %arrayidx80, align 1, !dbg !2681
  %27 = load i32, i32* @outcnt, align 4, !dbg !2684
  %cmp81 = icmp eq i32 %27, 16384, !dbg !2684
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !2681

if.then83:                                        ; preds = %while.body
  call void @flush_outbuf(), !dbg !2684
  br label %if.end84, !dbg !2684

if.end84:                                         ; preds = %if.then83, %while.body
  br label %while.cond, !dbg !2679, !llvm.loop !2686

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2688
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @send_bits(i32 %value, i32 %length) #0 !dbg !2689 {
entry:
  %value.addr = alloca i32, align 4
  %length.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !2690, metadata !DIExpression()), !dbg !2691
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !2692, metadata !DIExpression()), !dbg !2693
  %0 = load i32, i32* @bi_valid, align 4, !dbg !2694
  %1 = load i32, i32* %length.addr, align 4, !dbg !2696
  %sub = sub nsw i32 16, %1, !dbg !2697
  %cmp = icmp sgt i32 %0, %sub, !dbg !2698
  br i1 %cmp, label %if.then, label %if.else42, !dbg !2699

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %value.addr, align 4, !dbg !2700
  %3 = load i32, i32* @bi_valid, align 4, !dbg !2702
  %shl = shl i32 %2, %3, !dbg !2703
  %4 = load i16, i16* @bi_buf, align 2, !dbg !2704
  %conv = zext i16 %4 to i32, !dbg !2704
  %or = or i32 %conv, %shl, !dbg !2704
  %conv1 = trunc i32 %or to i16, !dbg !2704
  store i16 %conv1, i16* @bi_buf, align 2, !dbg !2704
  %5 = load i32, i32* @outcnt, align 4, !dbg !2705
  %cmp2 = icmp ult i32 %5, 16382, !dbg !2705
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !2708

if.then4:                                         ; preds = %if.then
  %6 = load i16, i16* @bi_buf, align 2, !dbg !2709
  %conv5 = zext i16 %6 to i32, !dbg !2709
  %and = and i32 %conv5, 255, !dbg !2709
  %conv6 = trunc i32 %and to i8, !dbg !2709
  %7 = load i32, i32* @outcnt, align 4, !dbg !2709
  %inc = add i32 %7, 1, !dbg !2709
  store i32 %inc, i32* @outcnt, align 4, !dbg !2709
  %idxprom = zext i32 %7 to i64, !dbg !2709
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom, !dbg !2709, !ctir !149
  store i8 %conv6, i8* %arrayidx, align 1, !dbg !2709
  %8 = load i16, i16* @bi_buf, align 2, !dbg !2709
  %conv7 = zext i16 %8 to i32, !dbg !2709
  %shr = ashr i32 %conv7, 8, !dbg !2709
  %conv8 = trunc i32 %shr to i8, !dbg !2709
  %9 = load i32, i32* @outcnt, align 4, !dbg !2709
  %inc9 = add i32 %9, 1, !dbg !2709
  store i32 %inc9, i32* @outcnt, align 4, !dbg !2709
  %idxprom10 = zext i32 %9 to i64, !dbg !2709
  %arrayidx11 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom10, !dbg !2709, !ctir !149
  store i8 %conv8, i8* %arrayidx11, align 1, !dbg !2709
  br label %if.end31, !dbg !2709

if.else:                                          ; preds = %if.then
  %10 = load i16, i16* @bi_buf, align 2, !dbg !2711
  %conv12 = zext i16 %10 to i32, !dbg !2711
  %and13 = and i32 %conv12, 255, !dbg !2711
  %conv14 = trunc i32 %and13 to i8, !dbg !2711
  %11 = load i32, i32* @outcnt, align 4, !dbg !2711
  %inc15 = add i32 %11, 1, !dbg !2711
  store i32 %inc15, i32* @outcnt, align 4, !dbg !2711
  %idxprom16 = zext i32 %11 to i64, !dbg !2711
  %arrayidx17 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom16, !dbg !2711, !ctir !149
  store i8 %conv14, i8* %arrayidx17, align 1, !dbg !2711
  %12 = load i32, i32* @outcnt, align 4, !dbg !2714
  %cmp18 = icmp eq i32 %12, 16384, !dbg !2714
  br i1 %cmp18, label %if.then20, label %if.end, !dbg !2711

if.then20:                                        ; preds = %if.else
  call void @flush_outbuf(), !dbg !2714
  br label %if.end, !dbg !2714

if.end:                                           ; preds = %if.then20, %if.else
  %13 = load i16, i16* @bi_buf, align 2, !dbg !2716
  %conv21 = zext i16 %13 to i32, !dbg !2716
  %shr22 = ashr i32 %conv21, 8, !dbg !2716
  %conv23 = trunc i32 %shr22 to i8, !dbg !2716
  %14 = load i32, i32* @outcnt, align 4, !dbg !2716
  %inc24 = add i32 %14, 1, !dbg !2716
  store i32 %inc24, i32* @outcnt, align 4, !dbg !2716
  %idxprom25 = zext i32 %14 to i64, !dbg !2716
  %arrayidx26 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom25, !dbg !2716, !ctir !149
  store i8 %conv23, i8* %arrayidx26, align 1, !dbg !2716
  %15 = load i32, i32* @outcnt, align 4, !dbg !2718
  %cmp27 = icmp eq i32 %15, 16384, !dbg !2718
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !2716

if.then29:                                        ; preds = %if.end
  call void @flush_outbuf(), !dbg !2718
  br label %if.end30, !dbg !2718

if.end30:                                         ; preds = %if.then29, %if.end
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then4
  %16 = load i32, i32* %value.addr, align 4, !dbg !2720
  %conv32 = trunc i32 %16 to i16, !dbg !2721
  %conv33 = zext i16 %conv32 to i32, !dbg !2721
  %17 = load i32, i32* @bi_valid, align 4, !dbg !2722
  %conv34 = sext i32 %17 to i64, !dbg !2722
  %sub35 = sub i64 16, %conv34, !dbg !2723
  %sh_prom = trunc i64 %sub35 to i32, !dbg !2724
  %shr36 = ashr i32 %conv33, %sh_prom, !dbg !2724
  %conv37 = trunc i32 %shr36 to i16, !dbg !2721
  store i16 %conv37, i16* @bi_buf, align 2, !dbg !2725
  %18 = load i32, i32* %length.addr, align 4, !dbg !2726
  %conv38 = sext i32 %18 to i64, !dbg !2726
  %sub39 = sub i64 %conv38, 16, !dbg !2727
  %19 = load i32, i32* @bi_valid, align 4, !dbg !2728
  %conv40 = sext i32 %19 to i64, !dbg !2728
  %add = add i64 %conv40, %sub39, !dbg !2728
  %conv41 = trunc i64 %add to i32, !dbg !2728
  store i32 %conv41, i32* @bi_valid, align 4, !dbg !2728
  br label %if.end48, !dbg !2729

if.else42:                                        ; preds = %entry
  %20 = load i32, i32* %value.addr, align 4, !dbg !2730
  %21 = load i32, i32* @bi_valid, align 4, !dbg !2732
  %shl43 = shl i32 %20, %21, !dbg !2733
  %22 = load i16, i16* @bi_buf, align 2, !dbg !2734
  %conv44 = zext i16 %22 to i32, !dbg !2734
  %or45 = or i32 %conv44, %shl43, !dbg !2734
  %conv46 = trunc i32 %or45 to i16, !dbg !2734
  store i16 %conv46, i16* @bi_buf, align 2, !dbg !2734
  %23 = load i32, i32* %length.addr, align 4, !dbg !2735
  %24 = load i32, i32* @bi_valid, align 4, !dbg !2736
  %add47 = add nsw i32 %24, %23, !dbg !2736
  store i32 %add47, i32* @bi_valid, align 4, !dbg !2736
  br label %if.end48

if.end48:                                         ; preds = %if.else42, %if.end31
  ret void, !dbg !2737
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compress_block(%struct.ct_data* %ltree, %struct.ct_data* %dtree) #0 !dbg !2738 {
entry:
  %ltree.addr = alloca %struct.ct_data*, align 8
  %dtree.addr = alloca %struct.ct_data*, align 8
  %dist = alloca i32, align 4, !ctir !6
  %lc = alloca i32, align 4, !ctir !12
  %lx = alloca i32, align 4, !ctir !6
  %dx = alloca i32, align 4, !ctir !6
  %fx = alloca i32, align 4, !ctir !6
  %flag = alloca i8, align 1, !ctir !13
  %code = alloca i32, align 4, !ctir !6
  %extra = alloca i32, align 4, !ctir !12
  store %struct.ct_data* %ltree, %struct.ct_data** %ltree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %ltree.addr, metadata !2741, metadata !DIExpression()), !dbg !2742
  store %struct.ct_data* %dtree, %struct.ct_data** %dtree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %dtree.addr, metadata !2743, metadata !DIExpression()), !dbg !2744
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !2745, metadata !DIExpression()), !dbg !2746
  call void @llvm.dbg.declare(metadata i32* %lc, metadata !2747, metadata !DIExpression()), !dbg !2748
  call void @llvm.dbg.declare(metadata i32* %lx, metadata !2749, metadata !DIExpression()), !dbg !2750
  store i32 0, i32* %lx, align 4, !dbg !2750
  call void @llvm.dbg.declare(metadata i32* %dx, metadata !2751, metadata !DIExpression()), !dbg !2752
  store i32 0, i32* %dx, align 4, !dbg !2752
  call void @llvm.dbg.declare(metadata i32* %fx, metadata !2753, metadata !DIExpression()), !dbg !2754
  store i32 0, i32* %fx, align 4, !dbg !2754
  call void @llvm.dbg.declare(metadata i8* %flag, metadata !2755, metadata !DIExpression()), !dbg !2756
  store i8 0, i8* %flag, align 1, !dbg !2756
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2757, metadata !DIExpression()), !dbg !2758
  call void @llvm.dbg.declare(metadata i32* %extra, metadata !2759, metadata !DIExpression()), !dbg !2760
  %0 = load i32, i32* @last_lit, align 4, !dbg !2761
  %cmp = icmp ne i32 %0, 0, !dbg !2763
  br i1 %cmp, label %if.then, label %if.end80, !dbg !2764

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !2765

do.body:                                          ; preds = %do.cond, %if.then
  %1 = load i32, i32* %lx, align 4, !dbg !2766
  %and = and i32 %1, 7, !dbg !2769
  %cmp1 = icmp eq i32 %and, 0, !dbg !2770
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !2771

if.then2:                                         ; preds = %do.body
  %2 = load i32, i32* %fx, align 4, !dbg !2772
  %inc = add i32 %2, 1, !dbg !2772
  store i32 %inc, i32* %fx, align 4, !dbg !2772
  %idxprom = zext i32 %2 to i64, !dbg !2773
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %idxprom, !dbg !2773, !ctir !263
  %3 = load i8, i8* %arrayidx, align 1, !dbg !2773
  store i8 %3, i8* %flag, align 1, !dbg !2774
  br label %if.end, !dbg !2775

if.end:                                           ; preds = %if.then2, %do.body
  %4 = load i32, i32* %lx, align 4, !dbg !2776
  %inc3 = add i32 %4, 1, !dbg !2776
  store i32 %inc3, i32* %lx, align 4, !dbg !2776
  %idxprom4 = zext i32 %4 to i64, !dbg !2777
  %arrayidx5 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom4, !dbg !2777, !ctir !231
  %5 = load i8, i8* %arrayidx5, align 1, !dbg !2777
  %conv = zext i8 %5 to i32, !dbg !2777
  store i32 %conv, i32* %lc, align 4, !dbg !2778
  %6 = load i8, i8* %flag, align 1, !dbg !2779
  %conv6 = zext i8 %6 to i32, !dbg !2779
  %and7 = and i32 %conv6, 1, !dbg !2781
  %cmp8 = icmp eq i32 %and7, 0, !dbg !2782
  br i1 %cmp8, label %if.then10, label %if.else, !dbg !2783

if.then10:                                        ; preds = %if.end
  %7 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2784
  %8 = load i32, i32* %lc, align 4, !dbg !2784
  %idxprom11 = sext i32 %8 to i64, !dbg !2784
  %arrayidx12 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %7, i64 %idxprom11, !dbg !2784, !ctir !53
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx12, i32 0, i32 0, !dbg !2784, !ctir !54
  %code13 = bitcast %union.anon.0* %fc to i16*, !dbg !2784
  %9 = load i16, i16* %code13, align 2, !dbg !2784, !ctir !58
  %conv14 = zext i16 %9 to i32, !dbg !2784
  %10 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2784
  %11 = load i32, i32* %lc, align 4, !dbg !2784
  %idxprom15 = sext i32 %11 to i64, !dbg !2784
  %arrayidx16 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %10, i64 %idxprom15, !dbg !2784, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx16, i32 0, i32 1, !dbg !2784, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !2784
  %12 = load i16, i16* %len, align 2, !dbg !2784, !ctir !63
  %conv17 = zext i16 %12 to i32, !dbg !2784
  call void @send_bits(i32 %conv14, i32 %conv17), !dbg !2784
  br label %if.end74, !dbg !2786

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* %lc, align 4, !dbg !2787
  %idxprom18 = sext i32 %13 to i64, !dbg !2789
  %arrayidx19 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %idxprom18, !dbg !2789, !ctir !254
  %14 = load i8, i8* %arrayidx19, align 1, !dbg !2789
  %conv20 = zext i8 %14 to i32, !dbg !2789
  store i32 %conv20, i32* %code, align 4, !dbg !2790
  %15 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2791
  %16 = load i32, i32* %code, align 4, !dbg !2791
  %add = add i32 %16, 256, !dbg !2791
  %add21 = add i32 %add, 1, !dbg !2791
  %idxprom22 = zext i32 %add21 to i64, !dbg !2791
  %arrayidx23 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %15, i64 %idxprom22, !dbg !2791, !ctir !53
  %fc24 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx23, i32 0, i32 0, !dbg !2791, !ctir !54
  %code25 = bitcast %union.anon.0* %fc24 to i16*, !dbg !2791
  %17 = load i16, i16* %code25, align 2, !dbg !2791, !ctir !58
  %conv26 = zext i16 %17 to i32, !dbg !2791
  %18 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2791
  %19 = load i32, i32* %code, align 4, !dbg !2791
  %add27 = add i32 %19, 256, !dbg !2791
  %add28 = add i32 %add27, 1, !dbg !2791
  %idxprom29 = zext i32 %add28 to i64, !dbg !2791
  %arrayidx30 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %18, i64 %idxprom29, !dbg !2791, !ctir !53
  %dl31 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx30, i32 0, i32 1, !dbg !2791, !ctir !54
  %len32 = bitcast %union.anon.0* %dl31 to i16*, !dbg !2791
  %20 = load i16, i16* %len32, align 2, !dbg !2791, !ctir !63
  %conv33 = zext i16 %20 to i32, !dbg !2791
  call void @send_bits(i32 %conv26, i32 %conv33), !dbg !2791
  %21 = load i32, i32* %code, align 4, !dbg !2792
  %idxprom34 = zext i32 %21 to i64, !dbg !2793
  %arrayidx35 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i64 0, i64 %idxprom34, !dbg !2793, !ctir !251
  %22 = load i32, i32* %arrayidx35, align 4, !dbg !2793
  store i32 %22, i32* %extra, align 4, !dbg !2794
  %23 = load i32, i32* %extra, align 4, !dbg !2795
  %cmp36 = icmp ne i32 %23, 0, !dbg !2797
  br i1 %cmp36, label %if.then38, label %if.end41, !dbg !2798

if.then38:                                        ; preds = %if.else
  %24 = load i32, i32* %code, align 4, !dbg !2799
  %idxprom39 = zext i32 %24 to i64, !dbg !2801
  %arrayidx40 = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i64 0, i64 %idxprom39, !dbg !2801, !ctir !251
  %25 = load i32, i32* %arrayidx40, align 4, !dbg !2801
  %26 = load i32, i32* %lc, align 4, !dbg !2802
  %sub = sub nsw i32 %26, %25, !dbg !2802
  store i32 %sub, i32* %lc, align 4, !dbg !2802
  %27 = load i32, i32* %lc, align 4, !dbg !2803
  %28 = load i32, i32* %extra, align 4, !dbg !2804
  call void @send_bits(i32 %27, i32 %28), !dbg !2805
  br label %if.end41, !dbg !2806

if.end41:                                         ; preds = %if.then38, %if.else
  %29 = load i32, i32* %dx, align 4, !dbg !2807
  %inc42 = add i32 %29, 1, !dbg !2807
  store i32 %inc42, i32* %dx, align 4, !dbg !2807
  %idxprom43 = zext i32 %29 to i64, !dbg !2808
  %arrayidx44 = getelementptr inbounds [32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 %idxprom43, !dbg !2808, !ctir !272
  %30 = load i16, i16* %arrayidx44, align 2, !dbg !2808
  %conv45 = zext i16 %30 to i32, !dbg !2808
  store i32 %conv45, i32* %dist, align 4, !dbg !2809
  %31 = load i32, i32* %dist, align 4, !dbg !2810
  %cmp46 = icmp ult i32 %31, 256, !dbg !2810
  br i1 %cmp46, label %cond.true, label %cond.false, !dbg !2810

cond.true:                                        ; preds = %if.end41
  %32 = load i32, i32* %dist, align 4, !dbg !2810
  %idxprom48 = zext i32 %32 to i64, !dbg !2810
  %arrayidx49 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom48, !dbg !2810, !ctir !258
  %33 = load i8, i8* %arrayidx49, align 1, !dbg !2810
  %conv50 = zext i8 %33 to i32, !dbg !2810
  br label %cond.end, !dbg !2810

cond.false:                                       ; preds = %if.end41
  %34 = load i32, i32* %dist, align 4, !dbg !2810
  %shr = lshr i32 %34, 7, !dbg !2810
  %add51 = add i32 256, %shr, !dbg !2810
  %idxprom52 = zext i32 %add51 to i64, !dbg !2810
  %arrayidx53 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %idxprom52, !dbg !2810, !ctir !258
  %35 = load i8, i8* %arrayidx53, align 1, !dbg !2810
  %conv54 = zext i8 %35 to i32, !dbg !2810
  br label %cond.end, !dbg !2810

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv50, %cond.true ], [ %conv54, %cond.false ], !dbg !2810
  store i32 %cond, i32* %code, align 4, !dbg !2811
  %36 = load %struct.ct_data*, %struct.ct_data** %dtree.addr, align 8, !dbg !2812
  %37 = load i32, i32* %code, align 4, !dbg !2812
  %idxprom55 = zext i32 %37 to i64, !dbg !2812
  %arrayidx56 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %36, i64 %idxprom55, !dbg !2812, !ctir !53
  %fc57 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx56, i32 0, i32 0, !dbg !2812, !ctir !54
  %code58 = bitcast %union.anon.0* %fc57 to i16*, !dbg !2812
  %38 = load i16, i16* %code58, align 2, !dbg !2812, !ctir !58
  %conv59 = zext i16 %38 to i32, !dbg !2812
  %39 = load %struct.ct_data*, %struct.ct_data** %dtree.addr, align 8, !dbg !2812
  %40 = load i32, i32* %code, align 4, !dbg !2812
  %idxprom60 = zext i32 %40 to i64, !dbg !2812
  %arrayidx61 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %39, i64 %idxprom60, !dbg !2812, !ctir !53
  %dl62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx61, i32 0, i32 1, !dbg !2812, !ctir !54
  %len63 = bitcast %union.anon.0* %dl62 to i16*, !dbg !2812
  %41 = load i16, i16* %len63, align 2, !dbg !2812, !ctir !63
  %conv64 = zext i16 %41 to i32, !dbg !2812
  call void @send_bits(i32 %conv59, i32 %conv64), !dbg !2812
  %42 = load i32, i32* %code, align 4, !dbg !2813
  %idxprom65 = zext i32 %42 to i64, !dbg !2814
  %arrayidx66 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %idxprom65, !dbg !2814, !ctir !257
  %43 = load i32, i32* %arrayidx66, align 4, !dbg !2814
  store i32 %43, i32* %extra, align 4, !dbg !2815
  %44 = load i32, i32* %extra, align 4, !dbg !2816
  %cmp67 = icmp ne i32 %44, 0, !dbg !2818
  br i1 %cmp67, label %if.then69, label %if.end73, !dbg !2819

if.then69:                                        ; preds = %cond.end
  %45 = load i32, i32* %code, align 4, !dbg !2820
  %idxprom70 = zext i32 %45 to i64, !dbg !2822
  %arrayidx71 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %idxprom70, !dbg !2822, !ctir !257
  %46 = load i32, i32* %arrayidx71, align 4, !dbg !2822
  %47 = load i32, i32* %dist, align 4, !dbg !2823
  %sub72 = sub i32 %47, %46, !dbg !2823
  store i32 %sub72, i32* %dist, align 4, !dbg !2823
  %48 = load i32, i32* %dist, align 4, !dbg !2824
  %49 = load i32, i32* %extra, align 4, !dbg !2825
  call void @send_bits(i32 %48, i32 %49), !dbg !2826
  br label %if.end73, !dbg !2827

if.end73:                                         ; preds = %if.then69, %cond.end
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then10
  %50 = load i8, i8* %flag, align 1, !dbg !2828
  %conv75 = zext i8 %50 to i32, !dbg !2828
  %shr76 = ashr i32 %conv75, 1, !dbg !2828
  %conv77 = trunc i32 %shr76 to i8, !dbg !2828
  store i8 %conv77, i8* %flag, align 1, !dbg !2828
  br label %do.cond, !dbg !2829

do.cond:                                          ; preds = %if.end74
  %51 = load i32, i32* %lx, align 4, !dbg !2830
  %52 = load i32, i32* @last_lit, align 4, !dbg !2831
  %cmp78 = icmp ult i32 %51, %52, !dbg !2832
  br i1 %cmp78, label %do.body, label %do.end, !dbg !2829, !llvm.loop !2833

do.end:                                           ; preds = %do.cond
  br label %if.end80, !dbg !2829

if.end80:                                         ; preds = %do.end, %entry
  %53 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2835
  %arrayidx81 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %53, i64 256, !dbg !2835, !ctir !53
  %fc82 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx81, i32 0, i32 0, !dbg !2835, !ctir !54
  %code83 = bitcast %union.anon.0* %fc82 to i16*, !dbg !2835
  %54 = load i16, i16* %code83, align 2, !dbg !2835, !ctir !58
  %conv84 = zext i16 %54 to i32, !dbg !2835
  %55 = load %struct.ct_data*, %struct.ct_data** %ltree.addr, align 8, !dbg !2835
  %arrayidx85 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %55, i64 256, !dbg !2835, !ctir !53
  %dl86 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx85, i32 0, i32 1, !dbg !2835, !ctir !54
  %len87 = bitcast %union.anon.0* %dl86 to i16*, !dbg !2835
  %56 = load i16, i16* %len87, align 2, !dbg !2835, !ctir !63
  %conv88 = zext i16 %56 to i32, !dbg !2835
  call void @send_bits(i32 %conv84, i32 %conv88), !dbg !2835
  ret void, !dbg !2836
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @send_all_trees(i32 %lcodes, i32 %dcodes, i32 %blcodes) #0 !dbg !2837 {
entry:
  %lcodes.addr = alloca i32, align 4
  %dcodes.addr = alloca i32, align 4
  %blcodes.addr = alloca i32, align 4
  %rank = alloca i32, align 4, !ctir !12
  store i32 %lcodes, i32* %lcodes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lcodes.addr, metadata !2840, metadata !DIExpression()), !dbg !2841
  store i32 %dcodes, i32* %dcodes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dcodes.addr, metadata !2842, metadata !DIExpression()), !dbg !2843
  store i32 %blcodes, i32* %blcodes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %blcodes.addr, metadata !2844, metadata !DIExpression()), !dbg !2845
  call void @llvm.dbg.declare(metadata i32* %rank, metadata !2846, metadata !DIExpression()), !dbg !2847
  %0 = load i32, i32* %lcodes.addr, align 4, !dbg !2848
  %sub = sub nsw i32 %0, 257, !dbg !2849
  call void @send_bits(i32 %sub, i32 5), !dbg !2850
  %1 = load i32, i32* %dcodes.addr, align 4, !dbg !2851
  %sub1 = sub nsw i32 %1, 1, !dbg !2852
  call void @send_bits(i32 %sub1, i32 5), !dbg !2853
  %2 = load i32, i32* %blcodes.addr, align 4, !dbg !2854
  %sub2 = sub nsw i32 %2, 4, !dbg !2855
  call void @send_bits(i32 %sub2, i32 4), !dbg !2856
  store i32 0, i32* %rank, align 4, !dbg !2857
  br label %for.cond, !dbg !2859

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %rank, align 4, !dbg !2860
  %4 = load i32, i32* %blcodes.addr, align 4, !dbg !2862
  %cmp = icmp slt i32 %3, %4, !dbg !2863
  br i1 %cmp, label %for.body, label %for.end, !dbg !2864

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %rank, align 4, !dbg !2865
  %idxprom = sext i32 %5 to i64, !dbg !2867
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i64 0, i64 %idxprom, !dbg !2867, !ctir !405
  %6 = load i8, i8* %arrayidx, align 1, !dbg !2867
  %idxprom3 = zext i8 %6 to i64, !dbg !2868
  %arrayidx4 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom3, !dbg !2868, !ctir !402
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx4, i32 0, i32 1, !dbg !2869, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !2869
  %7 = load i16, i16* %len, align 2, !dbg !2869, !ctir !63
  %conv = zext i16 %7 to i32, !dbg !2868
  call void @send_bits(i32 %conv, i32 3), !dbg !2870
  br label %for.inc, !dbg !2871

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %rank, align 4, !dbg !2872
  %inc = add nsw i32 %8, 1, !dbg !2872
  store i32 %inc, i32* %rank, align 4, !dbg !2872
  br label %for.cond, !dbg !2873, !llvm.loop !2874

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %lcodes.addr, align 4, !dbg !2876
  %sub5 = sub nsw i32 %9, 1, !dbg !2877
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), i32 %sub5), !dbg !2878
  %10 = load i32, i32* %dcodes.addr, align 4, !dbg !2879
  %sub6 = sub nsw i32 %10, 1, !dbg !2880
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0), i32 %sub6), !dbg !2881
  ret void, !dbg !2882
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_block() #0 !dbg !2883 {
entry:
  %n = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2884, metadata !DIExpression()), !dbg !2885
  store i32 0, i32* %n, align 4, !dbg !2886
  br label %for.cond, !dbg !2888

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !2889
  %cmp = icmp slt i32 %0, 286, !dbg !2891
  br i1 %cmp, label %for.body, label %for.end, !dbg !2892

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4, !dbg !2893
  %idxprom = sext i32 %1 to i64, !dbg !2894
  %arrayidx = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %idxprom, !dbg !2894, !ctir !266
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 0, !dbg !2895, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !2895
  store i16 0, i16* %freq, align 4, !dbg !2896, !ctir !58
  br label %for.inc, !dbg !2894

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %n, align 4, !dbg !2897
  %inc = add nsw i32 %2, 1, !dbg !2897
  store i32 %inc, i32* %n, align 4, !dbg !2897
  br label %for.cond, !dbg !2898, !llvm.loop !2899

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4, !dbg !2901
  br label %for.cond1, !dbg !2903

for.cond1:                                        ; preds = %for.inc8, %for.end
  %3 = load i32, i32* %n, align 4, !dbg !2904
  %cmp2 = icmp slt i32 %3, 30, !dbg !2906
  br i1 %cmp2, label %for.body3, label %for.end10, !dbg !2907

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %n, align 4, !dbg !2908
  %idxprom4 = sext i32 %4 to i64, !dbg !2909
  %arrayidx5 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %idxprom4, !dbg !2909, !ctir !269
  %fc6 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx5, i32 0, i32 0, !dbg !2910, !ctir !54
  %freq7 = bitcast %union.anon.0* %fc6 to i16*, !dbg !2910
  store i16 0, i16* %freq7, align 4, !dbg !2911, !ctir !58
  br label %for.inc8, !dbg !2909

for.inc8:                                         ; preds = %for.body3
  %5 = load i32, i32* %n, align 4, !dbg !2912
  %inc9 = add nsw i32 %5, 1, !dbg !2912
  store i32 %inc9, i32* %n, align 4, !dbg !2912
  br label %for.cond1, !dbg !2913, !llvm.loop !2914

for.end10:                                        ; preds = %for.cond1
  store i32 0, i32* %n, align 4, !dbg !2916
  br label %for.cond11, !dbg !2918

for.cond11:                                       ; preds = %for.inc18, %for.end10
  %6 = load i32, i32* %n, align 4, !dbg !2919
  %cmp12 = icmp slt i32 %6, 19, !dbg !2921
  br i1 %cmp12, label %for.body13, label %for.end20, !dbg !2922

for.body13:                                       ; preds = %for.cond11
  %7 = load i32, i32* %n, align 4, !dbg !2923
  %idxprom14 = sext i32 %7 to i64, !dbg !2924
  %arrayidx15 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom14, !dbg !2924, !ctir !402
  %fc16 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx15, i32 0, i32 0, !dbg !2925, !ctir !54
  %freq17 = bitcast %union.anon.0* %fc16 to i16*, !dbg !2925
  store i16 0, i16* %freq17, align 4, !dbg !2926, !ctir !58
  br label %for.inc18, !dbg !2924

for.inc18:                                        ; preds = %for.body13
  %8 = load i32, i32* %n, align 4, !dbg !2927
  %inc19 = add nsw i32 %8, 1, !dbg !2927
  store i32 %inc19, i32* %n, align 4, !dbg !2927
  br label %for.cond11, !dbg !2928, !llvm.loop !2929

for.end20:                                        ; preds = %for.cond11
  store i16 1, i16* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 256, i32 0, i32 0), align 16, !dbg !2931, !ctir !58
  store i64 0, i64* @static_len, align 8, !dbg !2932
  store i64 0, i64* @opt_len, align 8, !dbg !2933
  store i32 0, i32* @last_flags, align 4, !dbg !2934
  store i32 0, i32* @last_dist, align 4, !dbg !2935
  store i32 0, i32* @last_lit, align 4, !dbg !2936
  store i8 0, i8* @flags, align 1, !dbg !2937
  store i8 1, i8* @flag_bit, align 1, !dbg !2938
  ret void, !dbg !2939
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @bi_windup() #0 !dbg !2940 {
entry:
  %0 = load i32, i32* @bi_valid, align 4, !dbg !2941
  %cmp = icmp sgt i32 %0, 8, !dbg !2943
  br i1 %cmp, label %if.then, label %if.else29, !dbg !2944

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4, !dbg !2945
  %cmp1 = icmp ult i32 %1, 16382, !dbg !2945
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !2949

if.then2:                                         ; preds = %if.then
  %2 = load i16, i16* @bi_buf, align 2, !dbg !2950
  %conv = zext i16 %2 to i32, !dbg !2950
  %and = and i32 %conv, 255, !dbg !2950
  %conv3 = trunc i32 %and to i8, !dbg !2950
  %3 = load i32, i32* @outcnt, align 4, !dbg !2950
  %inc = add i32 %3, 1, !dbg !2950
  store i32 %inc, i32* @outcnt, align 4, !dbg !2950
  %idxprom = zext i32 %3 to i64, !dbg !2950
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom, !dbg !2950, !ctir !149
  store i8 %conv3, i8* %arrayidx, align 1, !dbg !2950
  %4 = load i16, i16* @bi_buf, align 2, !dbg !2950
  %conv4 = zext i16 %4 to i32, !dbg !2950
  %shr = ashr i32 %conv4, 8, !dbg !2950
  %conv5 = trunc i32 %shr to i8, !dbg !2950
  %5 = load i32, i32* @outcnt, align 4, !dbg !2950
  %inc6 = add i32 %5, 1, !dbg !2950
  store i32 %inc6, i32* @outcnt, align 4, !dbg !2950
  %idxprom7 = zext i32 %5 to i64, !dbg !2950
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom7, !dbg !2950, !ctir !149
  store i8 %conv5, i8* %arrayidx8, align 1, !dbg !2950
  br label %if.end28, !dbg !2950

if.else:                                          ; preds = %if.then
  %6 = load i16, i16* @bi_buf, align 2, !dbg !2952
  %conv9 = zext i16 %6 to i32, !dbg !2952
  %and10 = and i32 %conv9, 255, !dbg !2952
  %conv11 = trunc i32 %and10 to i8, !dbg !2952
  %7 = load i32, i32* @outcnt, align 4, !dbg !2952
  %inc12 = add i32 %7, 1, !dbg !2952
  store i32 %inc12, i32* @outcnt, align 4, !dbg !2952
  %idxprom13 = zext i32 %7 to i64, !dbg !2952
  %arrayidx14 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom13, !dbg !2952, !ctir !149
  store i8 %conv11, i8* %arrayidx14, align 1, !dbg !2952
  %8 = load i32, i32* @outcnt, align 4, !dbg !2955
  %cmp15 = icmp eq i32 %8, 16384, !dbg !2955
  br i1 %cmp15, label %if.then17, label %if.end, !dbg !2952

if.then17:                                        ; preds = %if.else
  call void @flush_outbuf(), !dbg !2955
  br label %if.end, !dbg !2955

if.end:                                           ; preds = %if.then17, %if.else
  %9 = load i16, i16* @bi_buf, align 2, !dbg !2957
  %conv18 = zext i16 %9 to i32, !dbg !2957
  %shr19 = ashr i32 %conv18, 8, !dbg !2957
  %conv20 = trunc i32 %shr19 to i8, !dbg !2957
  %10 = load i32, i32* @outcnt, align 4, !dbg !2957
  %inc21 = add i32 %10, 1, !dbg !2957
  store i32 %inc21, i32* @outcnt, align 4, !dbg !2957
  %idxprom22 = zext i32 %10 to i64, !dbg !2957
  %arrayidx23 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom22, !dbg !2957, !ctir !149
  store i8 %conv20, i8* %arrayidx23, align 1, !dbg !2957
  %11 = load i32, i32* @outcnt, align 4, !dbg !2959
  %cmp24 = icmp eq i32 %11, 16384, !dbg !2959
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !2957

if.then26:                                        ; preds = %if.end
  call void @flush_outbuf(), !dbg !2959
  br label %if.end27, !dbg !2959

if.end27:                                         ; preds = %if.then26, %if.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then2
  br label %if.end42, !dbg !2961

if.else29:                                        ; preds = %entry
  %12 = load i32, i32* @bi_valid, align 4, !dbg !2962
  %cmp30 = icmp sgt i32 %12, 0, !dbg !2964
  br i1 %cmp30, label %if.then32, label %if.end41, !dbg !2965

if.then32:                                        ; preds = %if.else29
  %13 = load i16, i16* @bi_buf, align 2, !dbg !2966
  %conv33 = trunc i16 %13 to i8, !dbg !2966
  %14 = load i32, i32* @outcnt, align 4, !dbg !2966
  %inc34 = add i32 %14, 1, !dbg !2966
  store i32 %inc34, i32* @outcnt, align 4, !dbg !2966
  %idxprom35 = zext i32 %14 to i64, !dbg !2966
  %arrayidx36 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([18432 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %idxprom35, !dbg !2966, !ctir !149
  store i8 %conv33, i8* %arrayidx36, align 1, !dbg !2966
  %15 = load i32, i32* @outcnt, align 4, !dbg !2969
  %cmp37 = icmp eq i32 %15, 16384, !dbg !2969
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !2966

if.then39:                                        ; preds = %if.then32
  call void @flush_outbuf(), !dbg !2969
  br label %if.end40, !dbg !2969

if.end40:                                         ; preds = %if.then39, %if.then32
  br label %if.end41, !dbg !2971

if.end41:                                         ; preds = %if.end40, %if.else29
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end28
  store i16 0, i16* @bi_buf, align 2, !dbg !2972
  store i32 0, i32* @bi_valid, align 4, !dbg !2973
  ret void, !dbg !2974
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @send_tree(%struct.ct_data* %tree, i32 %max_code) #0 !dbg !2975 {
entry:
  %tree.addr = alloca %struct.ct_data*, align 8
  %max_code.addr = alloca i32, align 4
  %n = alloca i32, align 4, !ctir !12
  %prevlen = alloca i32, align 4, !ctir !12
  %curlen = alloca i32, align 4, !ctir !12
  %nextlen = alloca i32, align 4, !ctir !12
  %count = alloca i32, align 4, !ctir !12
  %max_count = alloca i32, align 4, !ctir !12
  %min_count = alloca i32, align 4, !ctir !12
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree.addr, metadata !2978, metadata !DIExpression()), !dbg !2979
  store i32 %max_code, i32* %max_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_code.addr, metadata !2980, metadata !DIExpression()), !dbg !2981
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2982, metadata !DIExpression()), !dbg !2983
  call void @llvm.dbg.declare(metadata i32* %prevlen, metadata !2984, metadata !DIExpression()), !dbg !2985
  store i32 -1, i32* %prevlen, align 4, !dbg !2985
  call void @llvm.dbg.declare(metadata i32* %curlen, metadata !2986, metadata !DIExpression()), !dbg !2987
  call void @llvm.dbg.declare(metadata i32* %nextlen, metadata !2988, metadata !DIExpression()), !dbg !2989
  %0 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !2990
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %0, i64 0, !dbg !2990, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 1, !dbg !2991, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !2991
  %1 = load i16, i16* %len, align 2, !dbg !2991, !ctir !63
  %conv = zext i16 %1 to i32, !dbg !2990
  store i32 %conv, i32* %nextlen, align 4, !dbg !2989
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2992, metadata !DIExpression()), !dbg !2993
  store i32 0, i32* %count, align 4, !dbg !2993
  call void @llvm.dbg.declare(metadata i32* %max_count, metadata !2994, metadata !DIExpression()), !dbg !2995
  store i32 7, i32* %max_count, align 4, !dbg !2995
  call void @llvm.dbg.declare(metadata i32* %min_count, metadata !2996, metadata !DIExpression()), !dbg !2997
  store i32 4, i32* %min_count, align 4, !dbg !2997
  %2 = load i32, i32* %nextlen, align 4, !dbg !2998
  %cmp = icmp eq i32 %2, 0, !dbg !3000
  br i1 %cmp, label %if.then, label %if.end, !dbg !3001

if.then:                                          ; preds = %entry
  store i32 138, i32* %max_count, align 4, !dbg !3002
  store i32 3, i32* %min_count, align 4, !dbg !3003
  br label %if.end, !dbg !3004

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %n, align 4, !dbg !3005
  br label %for.cond, !dbg !3007

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %n, align 4, !dbg !3008
  %4 = load i32, i32* %max_code.addr, align 4, !dbg !3010
  %cmp2 = icmp sle i32 %3, %4, !dbg !3011
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3012

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %nextlen, align 4, !dbg !3013
  store i32 %5, i32* %curlen, align 4, !dbg !3015
  %6 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3016
  %7 = load i32, i32* %n, align 4, !dbg !3017
  %add = add nsw i32 %7, 1, !dbg !3018
  %idxprom = sext i32 %add to i64, !dbg !3016
  %arrayidx4 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %6, i64 %idxprom, !dbg !3016, !ctir !53
  %dl5 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx4, i32 0, i32 1, !dbg !3019, !ctir !54
  %len6 = bitcast %union.anon.0* %dl5 to i16*, !dbg !3019
  %8 = load i16, i16* %len6, align 2, !dbg !3019, !ctir !63
  %conv7 = zext i16 %8 to i32, !dbg !3016
  store i32 %conv7, i32* %nextlen, align 4, !dbg !3020
  %9 = load i32, i32* %count, align 4, !dbg !3021
  %inc = add nsw i32 %9, 1, !dbg !3021
  store i32 %inc, i32* %count, align 4, !dbg !3021
  %10 = load i32, i32* %max_count, align 4, !dbg !3023
  %cmp8 = icmp slt i32 %inc, %10, !dbg !3024
  br i1 %cmp8, label %land.lhs.true, label %if.else, !dbg !3025

land.lhs.true:                                    ; preds = %for.body
  %11 = load i32, i32* %curlen, align 4, !dbg !3026
  %12 = load i32, i32* %nextlen, align 4, !dbg !3027
  %cmp10 = icmp eq i32 %11, %12, !dbg !3028
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !3029

if.then12:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !3030

if.else:                                          ; preds = %land.lhs.true, %for.body
  %13 = load i32, i32* %count, align 4, !dbg !3032
  %14 = load i32, i32* %min_count, align 4, !dbg !3034
  %cmp13 = icmp slt i32 %13, %14, !dbg !3035
  br i1 %cmp13, label %if.then15, label %if.else26, !dbg !3036

if.then15:                                        ; preds = %if.else
  br label %do.body, !dbg !3037

do.body:                                          ; preds = %do.cond, %if.then15
  %15 = load i32, i32* %curlen, align 4, !dbg !3039
  %idxprom16 = sext i32 %15 to i64, !dbg !3039
  %arrayidx17 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom16, !dbg !3039, !ctir !402
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx17, i32 0, i32 0, !dbg !3039, !ctir !54
  %code = bitcast %union.anon.0* %fc to i16*, !dbg !3039
  %16 = load i16, i16* %code, align 4, !dbg !3039, !ctir !58
  %conv18 = zext i16 %16 to i32, !dbg !3039
  %17 = load i32, i32* %curlen, align 4, !dbg !3039
  %idxprom19 = sext i32 %17 to i64, !dbg !3039
  %arrayidx20 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom19, !dbg !3039, !ctir !402
  %dl21 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx20, i32 0, i32 1, !dbg !3039, !ctir !54
  %len22 = bitcast %union.anon.0* %dl21 to i16*, !dbg !3039
  %18 = load i16, i16* %len22, align 2, !dbg !3039, !ctir !63
  %conv23 = zext i16 %18 to i32, !dbg !3039
  call void @send_bits(i32 %conv18, i32 %conv23), !dbg !3039
  br label %do.cond, !dbg !3041

do.cond:                                          ; preds = %do.body
  %19 = load i32, i32* %count, align 4, !dbg !3042
  %dec = add nsw i32 %19, -1, !dbg !3042
  store i32 %dec, i32* %count, align 4, !dbg !3042
  %cmp24 = icmp ne i32 %dec, 0, !dbg !3043
  br i1 %cmp24, label %do.body, label %do.end, !dbg !3041, !llvm.loop !3044

do.end:                                           ; preds = %do.cond
  br label %if.end60, !dbg !3046

if.else26:                                        ; preds = %if.else
  %20 = load i32, i32* %curlen, align 4, !dbg !3047
  %cmp27 = icmp ne i32 %20, 0, !dbg !3049
  br i1 %cmp27, label %if.then29, label %if.else47, !dbg !3050

if.then29:                                        ; preds = %if.else26
  %21 = load i32, i32* %curlen, align 4, !dbg !3051
  %22 = load i32, i32* %prevlen, align 4, !dbg !3054
  %cmp30 = icmp ne i32 %21, %22, !dbg !3055
  br i1 %cmp30, label %if.then32, label %if.end44, !dbg !3056

if.then32:                                        ; preds = %if.then29
  %23 = load i32, i32* %curlen, align 4, !dbg !3057
  %idxprom33 = sext i32 %23 to i64, !dbg !3057
  %arrayidx34 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom33, !dbg !3057, !ctir !402
  %fc35 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx34, i32 0, i32 0, !dbg !3057, !ctir !54
  %code36 = bitcast %union.anon.0* %fc35 to i16*, !dbg !3057
  %24 = load i16, i16* %code36, align 4, !dbg !3057, !ctir !58
  %conv37 = zext i16 %24 to i32, !dbg !3057
  %25 = load i32, i32* %curlen, align 4, !dbg !3057
  %idxprom38 = sext i32 %25 to i64, !dbg !3057
  %arrayidx39 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom38, !dbg !3057, !ctir !402
  %dl40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx39, i32 0, i32 1, !dbg !3057, !ctir !54
  %len41 = bitcast %union.anon.0* %dl40 to i16*, !dbg !3057
  %26 = load i16, i16* %len41, align 2, !dbg !3057, !ctir !63
  %conv42 = zext i16 %26 to i32, !dbg !3057
  call void @send_bits(i32 %conv37, i32 %conv42), !dbg !3057
  %27 = load i32, i32* %count, align 4, !dbg !3059
  %dec43 = add nsw i32 %27, -1, !dbg !3059
  store i32 %dec43, i32* %count, align 4, !dbg !3059
  br label %if.end44, !dbg !3060

if.end44:                                         ; preds = %if.then32, %if.then29
  %28 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16, !dbg !3061, !ctir !58
  %conv45 = zext i16 %28 to i32, !dbg !3061
  %29 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 1, i32 0), align 2, !dbg !3061, !ctir !63
  %conv46 = zext i16 %29 to i32, !dbg !3061
  call void @send_bits(i32 %conv45, i32 %conv46), !dbg !3061
  %30 = load i32, i32* %count, align 4, !dbg !3062
  %sub = sub nsw i32 %30, 3, !dbg !3063
  call void @send_bits(i32 %sub, i32 2), !dbg !3064
  br label %if.end59, !dbg !3065

if.else47:                                        ; preds = %if.else26
  %31 = load i32, i32* %count, align 4, !dbg !3066
  %cmp48 = icmp sle i32 %31, 10, !dbg !3068
  br i1 %cmp48, label %if.then50, label %if.else54, !dbg !3069

if.then50:                                        ; preds = %if.else47
  %32 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4, !dbg !3070, !ctir !58
  %conv51 = zext i16 %32 to i32, !dbg !3070
  %33 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 1, i32 0), align 2, !dbg !3070, !ctir !63
  %conv52 = zext i16 %33 to i32, !dbg !3070
  call void @send_bits(i32 %conv51, i32 %conv52), !dbg !3070
  %34 = load i32, i32* %count, align 4, !dbg !3072
  %sub53 = sub nsw i32 %34, 3, !dbg !3073
  call void @send_bits(i32 %sub53, i32 3), !dbg !3074
  br label %if.end58, !dbg !3075

if.else54:                                        ; preds = %if.else47
  %35 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8, !dbg !3076, !ctir !58
  %conv55 = zext i16 %35 to i32, !dbg !3076
  %36 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 1, i32 0), align 2, !dbg !3076, !ctir !63
  %conv56 = zext i16 %36 to i32, !dbg !3076
  call void @send_bits(i32 %conv55, i32 %conv56), !dbg !3076
  %37 = load i32, i32* %count, align 4, !dbg !3078
  %sub57 = sub nsw i32 %37, 11, !dbg !3079
  call void @send_bits(i32 %sub57, i32 7), !dbg !3080
  br label %if.end58

if.end58:                                         ; preds = %if.else54, %if.then50
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end44
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %do.end
  br label %if.end61

if.end61:                                         ; preds = %if.end60
  store i32 0, i32* %count, align 4, !dbg !3081
  %38 = load i32, i32* %curlen, align 4, !dbg !3082
  store i32 %38, i32* %prevlen, align 4, !dbg !3083
  %39 = load i32, i32* %nextlen, align 4, !dbg !3084
  %cmp62 = icmp eq i32 %39, 0, !dbg !3086
  br i1 %cmp62, label %if.then64, label %if.else65, !dbg !3087

if.then64:                                        ; preds = %if.end61
  store i32 138, i32* %max_count, align 4, !dbg !3088
  store i32 3, i32* %min_count, align 4, !dbg !3090
  br label %if.end71, !dbg !3091

if.else65:                                        ; preds = %if.end61
  %40 = load i32, i32* %curlen, align 4, !dbg !3092
  %41 = load i32, i32* %nextlen, align 4, !dbg !3094
  %cmp66 = icmp eq i32 %40, %41, !dbg !3095
  br i1 %cmp66, label %if.then68, label %if.else69, !dbg !3096

if.then68:                                        ; preds = %if.else65
  store i32 6, i32* %max_count, align 4, !dbg !3097
  store i32 3, i32* %min_count, align 4, !dbg !3099
  br label %if.end70, !dbg !3100

if.else69:                                        ; preds = %if.else65
  store i32 7, i32* %max_count, align 4, !dbg !3101
  store i32 4, i32* %min_count, align 4, !dbg !3103
  br label %if.end70

if.end70:                                         ; preds = %if.else69, %if.then68
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then64
  br label %for.inc, !dbg !3104

for.inc:                                          ; preds = %if.end71, %if.then12
  %42 = load i32, i32* %n, align 4, !dbg !3105
  %inc72 = add nsw i32 %42, 1, !dbg !3105
  store i32 %inc72, i32* %n, align 4, !dbg !3105
  br label %for.cond, !dbg !3106, !llvm.loop !3107

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3109
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @abort_gzip() #0 !dbg !3110 {
entry:
  call void @do_remove(), !dbg !3111
  call void @do_exit(i32 1), !dbg !3112
  ret void, !dbg !3113
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_remove() #0 !dbg !3114 {
entry:
  %0 = load i32, i32* @remove_ofname, align 4, !dbg !3115
  %tobool = icmp ne i32 %0, 0, !dbg !3115
  br i1 %tobool, label %if.then, label %if.end, !dbg !3117

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @ofd, align 4, !dbg !3118
  %call = call i32 @close(i32 %1), !dbg !3120
  %call1 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !3121
  br label %if.end, !dbg !3122

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3123
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_exit(i32 %exitcode) #0 !dbg !717 {
entry:
  %exitcode.addr = alloca i32, align 4
  store i32 %exitcode, i32* %exitcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exitcode.addr, metadata !3124, metadata !DIExpression()), !dbg !3125
  %0 = load i32, i32* @do_exit.in_exit, align 4, !dbg !3126
  %tobool = icmp ne i32 %0, 0, !dbg !3126
  br i1 %tobool, label %if.then, label %if.end, !dbg !3128

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %exitcode.addr, align 4, !dbg !3129
  call void @exit(i32 %1) #10, !dbg !3130
  unreachable, !dbg !3130

if.end:                                           ; preds = %entry
  store i32 1, i32* @do_exit.in_exit, align 4, !dbg !3131
  %2 = load i8*, i8** @env, align 8, !dbg !3132
  %cmp = icmp ne i8* %2, null, !dbg !3134
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !3135

if.then1:                                         ; preds = %if.end
  %3 = load i8*, i8** @env, align 8, !dbg !3136
  call void @free(i8* %3) #11, !dbg !3137
  store i8* null, i8** @env, align 8, !dbg !3138
  br label %if.end2, !dbg !3137

if.end2:                                          ; preds = %if.then1, %if.end
  %4 = load i8**, i8*** @args, align 8, !dbg !3139
  %cmp3 = icmp ne i8** %4, null, !dbg !3141
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !3142

if.then4:                                         ; preds = %if.end2
  %5 = load i8**, i8*** @args, align 8, !dbg !3143
  %6 = bitcast i8** %5 to i8*, !dbg !3144
  call void @free(i8* %6) #11, !dbg !3145
  store i8** null, i8*** @args, align 8, !dbg !3146
  br label %if.end5, !dbg !3145

if.end5:                                          ; preds = %if.then4, %if.end2
  %7 = load i32, i32* %exitcode.addr, align 4, !dbg !3147
  call void @exit(i32 %7) #10, !dbg !3148
  unreachable, !dbg !3148
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

; Function Attrs: nounwind
declare dso_local void @free(i8*) #5

declare dso_local i32 @close(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xunlink(i8* %filename) #0 !dbg !3149 {
entry:
  %filename.addr = alloca i8*, align 8
  %r = alloca i32, align 4, !ctir !12
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !3152, metadata !DIExpression()), !dbg !3153
  call void @llvm.dbg.declare(metadata i32* %r, metadata !3154, metadata !DIExpression()), !dbg !3155
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !3156
  %call = call i32 @unlink(i8* %0) #11, !dbg !3157
  store i32 %call, i32* %r, align 4, !dbg !3155
  %1 = load i32, i32* %r, align 4, !dbg !3158
  ret i32 %1, !dbg !3159
}

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @scan_tree(%struct.ct_data* %tree, i32 %max_code) #0 !dbg !3160 {
entry:
  %tree.addr = alloca %struct.ct_data*, align 8
  %max_code.addr = alloca i32, align 4
  %n = alloca i32, align 4, !ctir !12
  %prevlen = alloca i32, align 4, !ctir !12
  %curlen = alloca i32, align 4, !ctir !12
  %nextlen = alloca i32, align 4, !ctir !12
  %count = alloca i32, align 4, !ctir !12
  %max_count = alloca i32, align 4, !ctir !12
  %min_count = alloca i32, align 4, !ctir !12
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree.addr, metadata !3161, metadata !DIExpression()), !dbg !3162
  store i32 %max_code, i32* %max_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_code.addr, metadata !3163, metadata !DIExpression()), !dbg !3164
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3165, metadata !DIExpression()), !dbg !3166
  call void @llvm.dbg.declare(metadata i32* %prevlen, metadata !3167, metadata !DIExpression()), !dbg !3168
  store i32 -1, i32* %prevlen, align 4, !dbg !3168
  call void @llvm.dbg.declare(metadata i32* %curlen, metadata !3169, metadata !DIExpression()), !dbg !3170
  call void @llvm.dbg.declare(metadata i32* %nextlen, metadata !3171, metadata !DIExpression()), !dbg !3172
  %0 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3173
  %arrayidx = getelementptr inbounds %struct.ct_data, %struct.ct_data* %0, i64 0, !dbg !3173, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx, i32 0, i32 1, !dbg !3174, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !3174
  %1 = load i16, i16* %len, align 2, !dbg !3174, !ctir !63
  %conv = zext i16 %1 to i32, !dbg !3173
  store i32 %conv, i32* %nextlen, align 4, !dbg !3172
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3175, metadata !DIExpression()), !dbg !3176
  store i32 0, i32* %count, align 4, !dbg !3176
  call void @llvm.dbg.declare(metadata i32* %max_count, metadata !3177, metadata !DIExpression()), !dbg !3178
  store i32 7, i32* %max_count, align 4, !dbg !3178
  call void @llvm.dbg.declare(metadata i32* %min_count, metadata !3179, metadata !DIExpression()), !dbg !3180
  store i32 4, i32* %min_count, align 4, !dbg !3180
  %2 = load i32, i32* %nextlen, align 4, !dbg !3181
  %cmp = icmp eq i32 %2, 0, !dbg !3183
  br i1 %cmp, label %if.then, label %if.end, !dbg !3184

if.then:                                          ; preds = %entry
  store i32 138, i32* %max_count, align 4, !dbg !3185
  store i32 3, i32* %min_count, align 4, !dbg !3186
  br label %if.end, !dbg !3187

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3188
  %4 = load i32, i32* %max_code.addr, align 4, !dbg !3189
  %add = add nsw i32 %4, 1, !dbg !3190
  %idxprom = sext i32 %add to i64, !dbg !3188
  %arrayidx2 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %3, i64 %idxprom, !dbg !3188, !ctir !53
  %dl3 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx2, i32 0, i32 1, !dbg !3191, !ctir !54
  %len4 = bitcast %union.anon.0* %dl3 to i16*, !dbg !3191
  store i16 -1, i16* %len4, align 2, !dbg !3192, !ctir !63
  store i32 0, i32* %n, align 4, !dbg !3193
  br label %for.cond, !dbg !3195

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %n, align 4, !dbg !3196
  %6 = load i32, i32* %max_code.addr, align 4, !dbg !3198
  %cmp5 = icmp sle i32 %5, %6, !dbg !3199
  br i1 %cmp5, label %for.body, label %for.end, !dbg !3200

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %nextlen, align 4, !dbg !3201
  store i32 %7, i32* %curlen, align 4, !dbg !3203
  %8 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3204
  %9 = load i32, i32* %n, align 4, !dbg !3205
  %add7 = add nsw i32 %9, 1, !dbg !3206
  %idxprom8 = sext i32 %add7 to i64, !dbg !3204
  %arrayidx9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %8, i64 %idxprom8, !dbg !3204, !ctir !53
  %dl10 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx9, i32 0, i32 1, !dbg !3207, !ctir !54
  %len11 = bitcast %union.anon.0* %dl10 to i16*, !dbg !3207
  %10 = load i16, i16* %len11, align 2, !dbg !3207, !ctir !63
  %conv12 = zext i16 %10 to i32, !dbg !3204
  store i32 %conv12, i32* %nextlen, align 4, !dbg !3208
  %11 = load i32, i32* %count, align 4, !dbg !3209
  %inc = add nsw i32 %11, 1, !dbg !3209
  store i32 %inc, i32* %count, align 4, !dbg !3209
  %12 = load i32, i32* %max_count, align 4, !dbg !3211
  %cmp13 = icmp slt i32 %inc, %12, !dbg !3212
  br i1 %cmp13, label %land.lhs.true, label %if.else, !dbg !3213

land.lhs.true:                                    ; preds = %for.body
  %13 = load i32, i32* %curlen, align 4, !dbg !3214
  %14 = load i32, i32* %nextlen, align 4, !dbg !3215
  %cmp15 = icmp eq i32 %13, %14, !dbg !3216
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !3217

if.then17:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !3218

if.else:                                          ; preds = %land.lhs.true, %for.body
  %15 = load i32, i32* %count, align 4, !dbg !3220
  %16 = load i32, i32* %min_count, align 4, !dbg !3222
  %cmp18 = icmp slt i32 %15, %16, !dbg !3223
  br i1 %cmp18, label %if.then20, label %if.else26, !dbg !3224

if.then20:                                        ; preds = %if.else
  %17 = load i32, i32* %count, align 4, !dbg !3225
  %18 = load i32, i32* %curlen, align 4, !dbg !3227
  %idxprom21 = sext i32 %18 to i64, !dbg !3228
  %arrayidx22 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom21, !dbg !3228, !ctir !402
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx22, i32 0, i32 0, !dbg !3229, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !3229
  %19 = load i16, i16* %freq, align 4, !dbg !3230, !ctir !58
  %conv23 = zext i16 %19 to i32, !dbg !3230
  %add24 = add nsw i32 %conv23, %17, !dbg !3230
  %conv25 = trunc i32 %add24 to i16, !dbg !3230
  store i16 %conv25, i16* %freq, align 4, !dbg !3230, !ctir !58
  br label %if.end49, !dbg !3231

if.else26:                                        ; preds = %if.else
  %20 = load i32, i32* %curlen, align 4, !dbg !3232
  %cmp27 = icmp ne i32 %20, 0, !dbg !3234
  br i1 %cmp27, label %if.then29, label %if.else40, !dbg !3235

if.then29:                                        ; preds = %if.else26
  %21 = load i32, i32* %curlen, align 4, !dbg !3236
  %22 = load i32, i32* %prevlen, align 4, !dbg !3239
  %cmp30 = icmp ne i32 %21, %22, !dbg !3240
  br i1 %cmp30, label %if.then32, label %if.end38, !dbg !3241

if.then32:                                        ; preds = %if.then29
  %23 = load i32, i32* %curlen, align 4, !dbg !3242
  %idxprom33 = sext i32 %23 to i64, !dbg !3243
  %arrayidx34 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %idxprom33, !dbg !3243, !ctir !402
  %fc35 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx34, i32 0, i32 0, !dbg !3244, !ctir !54
  %freq36 = bitcast %union.anon.0* %fc35 to i16*, !dbg !3244
  %24 = load i16, i16* %freq36, align 4, !dbg !3245, !ctir !58
  %inc37 = add i16 %24, 1, !dbg !3245
  store i16 %inc37, i16* %freq36, align 4, !dbg !3245, !ctir !58
  br label %if.end38, !dbg !3243

if.end38:                                         ; preds = %if.then32, %if.then29
  %25 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16, !dbg !3246, !ctir !58
  %inc39 = add i16 %25, 1, !dbg !3246
  store i16 %inc39, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16, !dbg !3246, !ctir !58
  br label %if.end48, !dbg !3247

if.else40:                                        ; preds = %if.else26
  %26 = load i32, i32* %count, align 4, !dbg !3248
  %cmp41 = icmp sle i32 %26, 10, !dbg !3250
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !3251

if.then43:                                        ; preds = %if.else40
  %27 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4, !dbg !3252, !ctir !58
  %inc44 = add i16 %27, 1, !dbg !3252
  store i16 %inc44, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4, !dbg !3252, !ctir !58
  br label %if.end47, !dbg !3254

if.else45:                                        ; preds = %if.else40
  %28 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8, !dbg !3255, !ctir !58
  %inc46 = add i16 %28, 1, !dbg !3255
  store i16 %inc46, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8, !dbg !3255, !ctir !58
  br label %if.end47

if.end47:                                         ; preds = %if.else45, %if.then43
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end38
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then20
  br label %if.end50

if.end50:                                         ; preds = %if.end49
  store i32 0, i32* %count, align 4, !dbg !3257
  %29 = load i32, i32* %curlen, align 4, !dbg !3258
  store i32 %29, i32* %prevlen, align 4, !dbg !3259
  %30 = load i32, i32* %nextlen, align 4, !dbg !3260
  %cmp51 = icmp eq i32 %30, 0, !dbg !3262
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !3263

if.then53:                                        ; preds = %if.end50
  store i32 138, i32* %max_count, align 4, !dbg !3264
  store i32 3, i32* %min_count, align 4, !dbg !3266
  br label %if.end60, !dbg !3267

if.else54:                                        ; preds = %if.end50
  %31 = load i32, i32* %curlen, align 4, !dbg !3268
  %32 = load i32, i32* %nextlen, align 4, !dbg !3270
  %cmp55 = icmp eq i32 %31, %32, !dbg !3271
  br i1 %cmp55, label %if.then57, label %if.else58, !dbg !3272

if.then57:                                        ; preds = %if.else54
  store i32 6, i32* %max_count, align 4, !dbg !3273
  store i32 3, i32* %min_count, align 4, !dbg !3275
  br label %if.end59, !dbg !3276

if.else58:                                        ; preds = %if.else54
  store i32 7, i32* %max_count, align 4, !dbg !3277
  store i32 4, i32* %min_count, align 4, !dbg !3279
  br label %if.end59

if.end59:                                         ; preds = %if.else58, %if.then57
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then53
  br label %for.inc, !dbg !3280

for.inc:                                          ; preds = %if.end60, %if.then17
  %33 = load i32, i32* %n, align 4, !dbg !3281
  %inc61 = add nsw i32 %33, 1, !dbg !3281
  store i32 %inc61, i32* %n, align 4, !dbg !3281
  br label %for.cond, !dbg !3282, !llvm.loop !3283

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3285
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @pqdownheap(%struct.ct_data* %tree, i32 %k) #0 !dbg !3286 {
entry:
  %tree.addr = alloca %struct.ct_data*, align 8
  %k.addr = alloca i32, align 4
  %v = alloca i32, align 4, !ctir !12
  %j = alloca i32, align 4, !ctir !12
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree.addr, metadata !3287, metadata !DIExpression()), !dbg !3288
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !3289, metadata !DIExpression()), !dbg !3290
  call void @llvm.dbg.declare(metadata i32* %v, metadata !3291, metadata !DIExpression()), !dbg !3292
  %0 = load i32, i32* %k.addr, align 4, !dbg !3293
  %idxprom = sext i32 %0 to i64, !dbg !3294
  %arrayidx = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom, !dbg !3294, !ctir !403
  %1 = load i32, i32* %arrayidx, align 4, !dbg !3294
  store i32 %1, i32* %v, align 4, !dbg !3292
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3295, metadata !DIExpression()), !dbg !3296
  %2 = load i32, i32* %k.addr, align 4, !dbg !3297
  %shl = shl i32 %2, 1, !dbg !3298
  store i32 %shl, i32* %j, align 4, !dbg !3296
  br label %while.cond, !dbg !3299

while.cond:                                       ; preds = %if.end87, %entry
  %3 = load i32, i32* %j, align 4, !dbg !3300
  %4 = load i32, i32* @heap_len, align 4, !dbg !3301
  %cmp = icmp sle i32 %3, %4, !dbg !3302
  br i1 %cmp, label %while.body, label %while.end, !dbg !3299

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %j, align 4, !dbg !3303
  %6 = load i32, i32* @heap_len, align 4, !dbg !3306
  %cmp1 = icmp slt i32 %5, %6, !dbg !3307
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !3308

land.lhs.true:                                    ; preds = %while.body
  %7 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3309
  %8 = load i32, i32* %j, align 4, !dbg !3309
  %add = add nsw i32 %8, 1, !dbg !3309
  %idxprom2 = sext i32 %add to i64, !dbg !3309
  %arrayidx3 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom2, !dbg !3309, !ctir !403
  %9 = load i32, i32* %arrayidx3, align 4, !dbg !3309
  %idxprom4 = sext i32 %9 to i64, !dbg !3309
  %arrayidx5 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %7, i64 %idxprom4, !dbg !3309, !ctir !53
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx5, i32 0, i32 0, !dbg !3309, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !3309
  %10 = load i16, i16* %freq, align 2, !dbg !3309, !ctir !58
  %conv = zext i16 %10 to i32, !dbg !3309
  %11 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3309
  %12 = load i32, i32* %j, align 4, !dbg !3309
  %idxprom6 = sext i32 %12 to i64, !dbg !3309
  %arrayidx7 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom6, !dbg !3309, !ctir !403
  %13 = load i32, i32* %arrayidx7, align 4, !dbg !3309
  %idxprom8 = sext i32 %13 to i64, !dbg !3309
  %arrayidx9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %11, i64 %idxprom8, !dbg !3309, !ctir !53
  %fc10 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx9, i32 0, i32 0, !dbg !3309, !ctir !54
  %freq11 = bitcast %union.anon.0* %fc10 to i16*, !dbg !3309
  %14 = load i16, i16* %freq11, align 2, !dbg !3309, !ctir !58
  %conv12 = zext i16 %14 to i32, !dbg !3309
  %cmp13 = icmp slt i32 %conv, %conv12, !dbg !3309
  br i1 %cmp13, label %if.then, label %lor.lhs.false, !dbg !3309

lor.lhs.false:                                    ; preds = %land.lhs.true
  %15 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3309
  %16 = load i32, i32* %j, align 4, !dbg !3309
  %add15 = add nsw i32 %16, 1, !dbg !3309
  %idxprom16 = sext i32 %add15 to i64, !dbg !3309
  %arrayidx17 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom16, !dbg !3309, !ctir !403
  %17 = load i32, i32* %arrayidx17, align 4, !dbg !3309
  %idxprom18 = sext i32 %17 to i64, !dbg !3309
  %arrayidx19 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %15, i64 %idxprom18, !dbg !3309, !ctir !53
  %fc20 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx19, i32 0, i32 0, !dbg !3309, !ctir !54
  %freq21 = bitcast %union.anon.0* %fc20 to i16*, !dbg !3309
  %18 = load i16, i16* %freq21, align 2, !dbg !3309, !ctir !58
  %conv22 = zext i16 %18 to i32, !dbg !3309
  %19 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3309
  %20 = load i32, i32* %j, align 4, !dbg !3309
  %idxprom23 = sext i32 %20 to i64, !dbg !3309
  %arrayidx24 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom23, !dbg !3309, !ctir !403
  %21 = load i32, i32* %arrayidx24, align 4, !dbg !3309
  %idxprom25 = sext i32 %21 to i64, !dbg !3309
  %arrayidx26 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %19, i64 %idxprom25, !dbg !3309, !ctir !53
  %fc27 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx26, i32 0, i32 0, !dbg !3309, !ctir !54
  %freq28 = bitcast %union.anon.0* %fc27 to i16*, !dbg !3309
  %22 = load i16, i16* %freq28, align 2, !dbg !3309, !ctir !58
  %conv29 = zext i16 %22 to i32, !dbg !3309
  %cmp30 = icmp eq i32 %conv22, %conv29, !dbg !3309
  br i1 %cmp30, label %land.lhs.true32, label %if.end, !dbg !3309

land.lhs.true32:                                  ; preds = %lor.lhs.false
  %23 = load i32, i32* %j, align 4, !dbg !3309
  %add33 = add nsw i32 %23, 1, !dbg !3309
  %idxprom34 = sext i32 %add33 to i64, !dbg !3309
  %arrayidx35 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom34, !dbg !3309, !ctir !403
  %24 = load i32, i32* %arrayidx35, align 4, !dbg !3309
  %idxprom36 = sext i32 %24 to i64, !dbg !3309
  %arrayidx37 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom36, !dbg !3309, !ctir !404
  %25 = load i8, i8* %arrayidx37, align 1, !dbg !3309
  %conv38 = zext i8 %25 to i32, !dbg !3309
  %26 = load i32, i32* %j, align 4, !dbg !3309
  %idxprom39 = sext i32 %26 to i64, !dbg !3309
  %arrayidx40 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom39, !dbg !3309, !ctir !403
  %27 = load i32, i32* %arrayidx40, align 4, !dbg !3309
  %idxprom41 = sext i32 %27 to i64, !dbg !3309
  %arrayidx42 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom41, !dbg !3309, !ctir !404
  %28 = load i8, i8* %arrayidx42, align 1, !dbg !3309
  %conv43 = zext i8 %28 to i32, !dbg !3309
  %cmp44 = icmp sle i32 %conv38, %conv43, !dbg !3309
  br i1 %cmp44, label %if.then, label %if.end, !dbg !3310

if.then:                                          ; preds = %land.lhs.true32, %land.lhs.true
  %29 = load i32, i32* %j, align 4, !dbg !3311
  %inc = add nsw i32 %29, 1, !dbg !3311
  store i32 %inc, i32* %j, align 4, !dbg !3311
  br label %if.end, !dbg !3312

if.end:                                           ; preds = %if.then, %land.lhs.true32, %lor.lhs.false, %while.body
  %30 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3313
  %31 = load i32, i32* %v, align 4, !dbg !3313
  %idxprom46 = sext i32 %31 to i64, !dbg !3313
  %arrayidx47 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %30, i64 %idxprom46, !dbg !3313, !ctir !53
  %fc48 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx47, i32 0, i32 0, !dbg !3313, !ctir !54
  %freq49 = bitcast %union.anon.0* %fc48 to i16*, !dbg !3313
  %32 = load i16, i16* %freq49, align 2, !dbg !3313, !ctir !58
  %conv50 = zext i16 %32 to i32, !dbg !3313
  %33 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3313
  %34 = load i32, i32* %j, align 4, !dbg !3313
  %idxprom51 = sext i32 %34 to i64, !dbg !3313
  %arrayidx52 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom51, !dbg !3313, !ctir !403
  %35 = load i32, i32* %arrayidx52, align 4, !dbg !3313
  %idxprom53 = sext i32 %35 to i64, !dbg !3313
  %arrayidx54 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %33, i64 %idxprom53, !dbg !3313, !ctir !53
  %fc55 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx54, i32 0, i32 0, !dbg !3313, !ctir !54
  %freq56 = bitcast %union.anon.0* %fc55 to i16*, !dbg !3313
  %36 = load i16, i16* %freq56, align 2, !dbg !3313, !ctir !58
  %conv57 = zext i16 %36 to i32, !dbg !3313
  %cmp58 = icmp slt i32 %conv50, %conv57, !dbg !3313
  br i1 %cmp58, label %if.then86, label %lor.lhs.false60, !dbg !3313

lor.lhs.false60:                                  ; preds = %if.end
  %37 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3313
  %38 = load i32, i32* %v, align 4, !dbg !3313
  %idxprom61 = sext i32 %38 to i64, !dbg !3313
  %arrayidx62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %37, i64 %idxprom61, !dbg !3313, !ctir !53
  %fc63 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx62, i32 0, i32 0, !dbg !3313, !ctir !54
  %freq64 = bitcast %union.anon.0* %fc63 to i16*, !dbg !3313
  %39 = load i16, i16* %freq64, align 2, !dbg !3313, !ctir !58
  %conv65 = zext i16 %39 to i32, !dbg !3313
  %40 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3313
  %41 = load i32, i32* %j, align 4, !dbg !3313
  %idxprom66 = sext i32 %41 to i64, !dbg !3313
  %arrayidx67 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom66, !dbg !3313, !ctir !403
  %42 = load i32, i32* %arrayidx67, align 4, !dbg !3313
  %idxprom68 = sext i32 %42 to i64, !dbg !3313
  %arrayidx69 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %40, i64 %idxprom68, !dbg !3313, !ctir !53
  %fc70 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx69, i32 0, i32 0, !dbg !3313, !ctir !54
  %freq71 = bitcast %union.anon.0* %fc70 to i16*, !dbg !3313
  %43 = load i16, i16* %freq71, align 2, !dbg !3313, !ctir !58
  %conv72 = zext i16 %43 to i32, !dbg !3313
  %cmp73 = icmp eq i32 %conv65, %conv72, !dbg !3313
  br i1 %cmp73, label %land.lhs.true75, label %if.end87, !dbg !3313

land.lhs.true75:                                  ; preds = %lor.lhs.false60
  %44 = load i32, i32* %v, align 4, !dbg !3313
  %idxprom76 = sext i32 %44 to i64, !dbg !3313
  %arrayidx77 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom76, !dbg !3313, !ctir !404
  %45 = load i8, i8* %arrayidx77, align 1, !dbg !3313
  %conv78 = zext i8 %45 to i32, !dbg !3313
  %46 = load i32, i32* %j, align 4, !dbg !3313
  %idxprom79 = sext i32 %46 to i64, !dbg !3313
  %arrayidx80 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom79, !dbg !3313, !ctir !403
  %47 = load i32, i32* %arrayidx80, align 4, !dbg !3313
  %idxprom81 = sext i32 %47 to i64, !dbg !3313
  %arrayidx82 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %idxprom81, !dbg !3313, !ctir !404
  %48 = load i8, i8* %arrayidx82, align 1, !dbg !3313
  %conv83 = zext i8 %48 to i32, !dbg !3313
  %cmp84 = icmp sle i32 %conv78, %conv83, !dbg !3313
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !3315

if.then86:                                        ; preds = %land.lhs.true75, %if.end
  br label %while.end, !dbg !3316

if.end87:                                         ; preds = %land.lhs.true75, %lor.lhs.false60
  %49 = load i32, i32* %j, align 4, !dbg !3317
  %idxprom88 = sext i32 %49 to i64, !dbg !3318
  %arrayidx89 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom88, !dbg !3318, !ctir !403
  %50 = load i32, i32* %arrayidx89, align 4, !dbg !3318
  %51 = load i32, i32* %k.addr, align 4, !dbg !3319
  %idxprom90 = sext i32 %51 to i64, !dbg !3320
  %arrayidx91 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom90, !dbg !3320, !ctir !403
  store i32 %50, i32* %arrayidx91, align 4, !dbg !3321
  %52 = load i32, i32* %j, align 4, !dbg !3322
  store i32 %52, i32* %k.addr, align 4, !dbg !3323
  %53 = load i32, i32* %j, align 4, !dbg !3324
  %shl92 = shl i32 %53, 1, !dbg !3324
  store i32 %shl92, i32* %j, align 4, !dbg !3324
  br label %while.cond, !dbg !3299, !llvm.loop !3325

while.end:                                        ; preds = %if.then86, %while.cond
  %54 = load i32, i32* %v, align 4, !dbg !3327
  %55 = load i32, i32* %k.addr, align 4, !dbg !3328
  %idxprom93 = sext i32 %55 to i64, !dbg !3329
  %arrayidx94 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom93, !dbg !3329, !ctir !403
  store i32 %54, i32* %arrayidx94, align 4, !dbg !3330
  ret void, !dbg !3331
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @gen_bitlen(%struct.tree_desc* %desc) #0 !dbg !3332 {
entry:
  %desc.addr = alloca %struct.tree_desc*, align 8
  %tree = alloca %struct.ct_data*, align 8, !ctir !53
  %extra = alloca i32*, align 8, !ctir !33
  %base = alloca i32, align 4, !ctir !12
  %max_code = alloca i32, align 4, !ctir !12
  %max_length = alloca i32, align 4, !ctir !12
  %stree = alloca %struct.ct_data*, align 8, !ctir !53
  %h = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  %m = alloca i32, align 4, !ctir !12
  %bits = alloca i32, align 4, !ctir !12
  %xbits = alloca i32, align 4, !ctir !12
  %f = alloca i16, align 2, !ctir !15
  %overflow = alloca i32, align 4, !ctir !12
  store %struct.tree_desc* %desc, %struct.tree_desc** %desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_desc** %desc.addr, metadata !3333, metadata !DIExpression()), !dbg !3334
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree, metadata !3335, metadata !DIExpression()), !dbg !3336
  %0 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3337
  %dyn_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %0, i32 0, i32 0, !dbg !3338, !ctir !68
  %1 = load %struct.ct_data*, %struct.ct_data** %dyn_tree, align 8, !dbg !3338, !ctir !53
  store %struct.ct_data* %1, %struct.ct_data** %tree, align 8, !dbg !3336
  call void @llvm.dbg.declare(metadata i32** %extra, metadata !3339, metadata !DIExpression()), !dbg !3340
  %2 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3341
  %extra_bits = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %2, i32 0, i32 2, !dbg !3342, !ctir !68
  %3 = load i32*, i32** %extra_bits, align 8, !dbg !3342, !ctir !33
  store i32* %3, i32** %extra, align 8, !dbg !3340
  call void @llvm.dbg.declare(metadata i32* %base, metadata !3343, metadata !DIExpression()), !dbg !3344
  %4 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3345
  %extra_base = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %4, i32 0, i32 3, !dbg !3346, !ctir !68
  %5 = load i32, i32* %extra_base, align 8, !dbg !3346, !ctir !12
  store i32 %5, i32* %base, align 4, !dbg !3344
  call void @llvm.dbg.declare(metadata i32* %max_code, metadata !3347, metadata !DIExpression()), !dbg !3348
  %6 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3349
  %max_code1 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %6, i32 0, i32 6, !dbg !3350, !ctir !68
  %7 = load i32, i32* %max_code1, align 4, !dbg !3350, !ctir !12
  store i32 %7, i32* %max_code, align 4, !dbg !3348
  call void @llvm.dbg.declare(metadata i32* %max_length, metadata !3351, metadata !DIExpression()), !dbg !3352
  %8 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3353
  %max_length2 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %8, i32 0, i32 5, !dbg !3354, !ctir !68
  %9 = load i32, i32* %max_length2, align 8, !dbg !3354, !ctir !12
  store i32 %9, i32* %max_length, align 4, !dbg !3352
  call void @llvm.dbg.declare(metadata %struct.ct_data** %stree, metadata !3355, metadata !DIExpression()), !dbg !3356
  %10 = load %struct.tree_desc*, %struct.tree_desc** %desc.addr, align 8, !dbg !3357
  %static_tree = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %10, i32 0, i32 1, !dbg !3358, !ctir !68
  %11 = load %struct.ct_data*, %struct.ct_data** %static_tree, align 8, !dbg !3358, !ctir !53
  store %struct.ct_data* %11, %struct.ct_data** %stree, align 8, !dbg !3356
  call void @llvm.dbg.declare(metadata i32* %h, metadata !3359, metadata !DIExpression()), !dbg !3360
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3361, metadata !DIExpression()), !dbg !3362
  call void @llvm.dbg.declare(metadata i32* %m, metadata !3363, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !3365, metadata !DIExpression()), !dbg !3366
  call void @llvm.dbg.declare(metadata i32* %xbits, metadata !3367, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata i16* %f, metadata !3369, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !3371, metadata !DIExpression()), !dbg !3372
  store i32 0, i32* %overflow, align 4, !dbg !3372
  store i32 0, i32* %bits, align 4, !dbg !3373
  br label %for.cond, !dbg !3375

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %bits, align 4, !dbg !3376
  %cmp = icmp sle i32 %12, 15, !dbg !3378
  br i1 %cmp, label %for.body, label %for.end, !dbg !3379

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %bits, align 4, !dbg !3380
  %idxprom = sext i32 %13 to i64, !dbg !3381
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom, !dbg !3381, !ctir !261
  store i16 0, i16* %arrayidx, align 2, !dbg !3382
  br label %for.inc, !dbg !3381

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %bits, align 4, !dbg !3383
  %inc = add nsw i32 %14, 1, !dbg !3383
  store i32 %inc, i32* %bits, align 4, !dbg !3383
  br label %for.cond, !dbg !3384, !llvm.loop !3385

for.end:                                          ; preds = %for.cond
  %15 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3387
  %16 = load i32, i32* @heap_max, align 4, !dbg !3388
  %idxprom3 = sext i32 %16 to i64, !dbg !3389
  %arrayidx4 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom3, !dbg !3389, !ctir !403
  %17 = load i32, i32* %arrayidx4, align 4, !dbg !3389
  %idxprom5 = sext i32 %17 to i64, !dbg !3387
  %arrayidx6 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %15, i64 %idxprom5, !dbg !3387, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx6, i32 0, i32 1, !dbg !3390, !ctir !54
  %len = bitcast %union.anon.0* %dl to i16*, !dbg !3390
  store i16 0, i16* %len, align 2, !dbg !3391, !ctir !63
  %18 = load i32, i32* @heap_max, align 4, !dbg !3392
  %add = add nsw i32 %18, 1, !dbg !3394
  store i32 %add, i32* %h, align 4, !dbg !3395
  br label %for.cond7, !dbg !3396

for.cond7:                                        ; preds = %for.inc59, %for.end
  %19 = load i32, i32* %h, align 4, !dbg !3397
  %cmp8 = icmp slt i32 %19, 573, !dbg !3399
  br i1 %cmp8, label %for.body9, label %for.end61, !dbg !3400

for.body9:                                        ; preds = %for.cond7
  %20 = load i32, i32* %h, align 4, !dbg !3401
  %idxprom10 = sext i32 %20 to i64, !dbg !3403
  %arrayidx11 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom10, !dbg !3403, !ctir !403
  %21 = load i32, i32* %arrayidx11, align 4, !dbg !3403
  store i32 %21, i32* %n, align 4, !dbg !3404
  %22 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3405
  %23 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3406
  %24 = load i32, i32* %n, align 4, !dbg !3407
  %idxprom12 = sext i32 %24 to i64, !dbg !3406
  %arrayidx13 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %23, i64 %idxprom12, !dbg !3406, !ctir !53
  %dl14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx13, i32 0, i32 1, !dbg !3408, !ctir !54
  %dad = bitcast %union.anon.0* %dl14 to i16*, !dbg !3408
  %25 = load i16, i16* %dad, align 2, !dbg !3408, !ctir !63
  %idxprom15 = zext i16 %25 to i64, !dbg !3405
  %arrayidx16 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %22, i64 %idxprom15, !dbg !3405, !ctir !53
  %dl17 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx16, i32 0, i32 1, !dbg !3409, !ctir !54
  %len18 = bitcast %union.anon.0* %dl17 to i16*, !dbg !3409
  %26 = load i16, i16* %len18, align 2, !dbg !3409, !ctir !63
  %conv = zext i16 %26 to i32, !dbg !3405
  %add19 = add nsw i32 %conv, 1, !dbg !3410
  store i32 %add19, i32* %bits, align 4, !dbg !3411
  %27 = load i32, i32* %bits, align 4, !dbg !3412
  %28 = load i32, i32* %max_length, align 4, !dbg !3414
  %cmp20 = icmp sgt i32 %27, %28, !dbg !3415
  br i1 %cmp20, label %if.then, label %if.end, !dbg !3416

if.then:                                          ; preds = %for.body9
  %29 = load i32, i32* %max_length, align 4, !dbg !3417
  store i32 %29, i32* %bits, align 4, !dbg !3418
  %30 = load i32, i32* %overflow, align 4, !dbg !3419
  %inc22 = add nsw i32 %30, 1, !dbg !3419
  store i32 %inc22, i32* %overflow, align 4, !dbg !3419
  br label %if.end, !dbg !3420

if.end:                                           ; preds = %if.then, %for.body9
  %31 = load i32, i32* %bits, align 4, !dbg !3421
  %conv23 = trunc i32 %31 to i16, !dbg !3422
  %32 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3423
  %33 = load i32, i32* %n, align 4, !dbg !3424
  %idxprom24 = sext i32 %33 to i64, !dbg !3423
  %arrayidx25 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %32, i64 %idxprom24, !dbg !3423, !ctir !53
  %dl26 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx25, i32 0, i32 1, !dbg !3425, !ctir !54
  %len27 = bitcast %union.anon.0* %dl26 to i16*, !dbg !3425
  store i16 %conv23, i16* %len27, align 2, !dbg !3426, !ctir !63
  %34 = load i32, i32* %n, align 4, !dbg !3427
  %35 = load i32, i32* %max_code, align 4, !dbg !3429
  %cmp28 = icmp sgt i32 %34, %35, !dbg !3430
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !3431

if.then30:                                        ; preds = %if.end
  br label %for.inc59, !dbg !3432

if.end31:                                         ; preds = %if.end
  %36 = load i32, i32* %bits, align 4, !dbg !3433
  %idxprom32 = sext i32 %36 to i64, !dbg !3434
  %arrayidx33 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom32, !dbg !3434, !ctir !261
  %37 = load i16, i16* %arrayidx33, align 2, !dbg !3435
  %inc34 = add i16 %37, 1, !dbg !3435
  store i16 %inc34, i16* %arrayidx33, align 2, !dbg !3435
  store i32 0, i32* %xbits, align 4, !dbg !3436
  %38 = load i32, i32* %n, align 4, !dbg !3437
  %39 = load i32, i32* %base, align 4, !dbg !3439
  %cmp35 = icmp sge i32 %38, %39, !dbg !3440
  br i1 %cmp35, label %if.then37, label %if.end40, !dbg !3441

if.then37:                                        ; preds = %if.end31
  %40 = load i32*, i32** %extra, align 8, !dbg !3442
  %41 = load i32, i32* %n, align 4, !dbg !3443
  %42 = load i32, i32* %base, align 4, !dbg !3444
  %sub = sub nsw i32 %41, %42, !dbg !3445
  %idxprom38 = sext i32 %sub to i64, !dbg !3442
  %arrayidx39 = getelementptr inbounds i32, i32* %40, i64 %idxprom38, !dbg !3442, !ctir !33
  %43 = load i32, i32* %arrayidx39, align 4, !dbg !3442
  store i32 %43, i32* %xbits, align 4, !dbg !3446
  br label %if.end40, !dbg !3447

if.end40:                                         ; preds = %if.then37, %if.end31
  %44 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3448
  %45 = load i32, i32* %n, align 4, !dbg !3449
  %idxprom41 = sext i32 %45 to i64, !dbg !3448
  %arrayidx42 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %44, i64 %idxprom41, !dbg !3448, !ctir !53
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx42, i32 0, i32 0, !dbg !3450, !ctir !54
  %freq = bitcast %union.anon.0* %fc to i16*, !dbg !3450
  %46 = load i16, i16* %freq, align 2, !dbg !3450, !ctir !58
  store i16 %46, i16* %f, align 2, !dbg !3451
  %47 = load i16, i16* %f, align 2, !dbg !3452
  %conv43 = zext i16 %47 to i64, !dbg !3453
  %48 = load i32, i32* %bits, align 4, !dbg !3454
  %49 = load i32, i32* %xbits, align 4, !dbg !3455
  %add44 = add nsw i32 %48, %49, !dbg !3456
  %conv45 = sext i32 %add44 to i64, !dbg !3457
  %mul = mul i64 %conv43, %conv45, !dbg !3458
  %50 = load i64, i64* @opt_len, align 8, !dbg !3459
  %add46 = add i64 %50, %mul, !dbg !3459
  store i64 %add46, i64* @opt_len, align 8, !dbg !3459
  %51 = load %struct.ct_data*, %struct.ct_data** %stree, align 8, !dbg !3460
  %tobool = icmp ne %struct.ct_data* %51, null, !dbg !3460
  br i1 %tobool, label %if.then47, label %if.end58, !dbg !3462

if.then47:                                        ; preds = %if.end40
  %52 = load i16, i16* %f, align 2, !dbg !3463
  %conv48 = zext i16 %52 to i64, !dbg !3464
  %53 = load %struct.ct_data*, %struct.ct_data** %stree, align 8, !dbg !3465
  %54 = load i32, i32* %n, align 4, !dbg !3466
  %idxprom49 = sext i32 %54 to i64, !dbg !3465
  %arrayidx50 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %53, i64 %idxprom49, !dbg !3465, !ctir !53
  %dl51 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx50, i32 0, i32 1, !dbg !3467, !ctir !54
  %len52 = bitcast %union.anon.0* %dl51 to i16*, !dbg !3467
  %55 = load i16, i16* %len52, align 2, !dbg !3467, !ctir !63
  %conv53 = zext i16 %55 to i32, !dbg !3465
  %56 = load i32, i32* %xbits, align 4, !dbg !3468
  %add54 = add nsw i32 %conv53, %56, !dbg !3469
  %conv55 = sext i32 %add54 to i64, !dbg !3470
  %mul56 = mul i64 %conv48, %conv55, !dbg !3471
  %57 = load i64, i64* @static_len, align 8, !dbg !3472
  %add57 = add i64 %57, %mul56, !dbg !3472
  store i64 %add57, i64* @static_len, align 8, !dbg !3472
  br label %if.end58, !dbg !3473

if.end58:                                         ; preds = %if.then47, %if.end40
  br label %for.inc59, !dbg !3474

for.inc59:                                        ; preds = %if.end58, %if.then30
  %58 = load i32, i32* %h, align 4, !dbg !3475
  %inc60 = add nsw i32 %58, 1, !dbg !3475
  store i32 %inc60, i32* %h, align 4, !dbg !3475
  br label %for.cond7, !dbg !3476, !llvm.loop !3477

for.end61:                                        ; preds = %for.cond7
  %59 = load i32, i32* %overflow, align 4, !dbg !3479
  %cmp62 = icmp eq i32 %59, 0, !dbg !3481
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !3482

if.then64:                                        ; preds = %for.end61
  br label %for.end137, !dbg !3483

if.end65:                                         ; preds = %for.end61
  br label %do.body, !dbg !3484

do.body:                                          ; preds = %do.cond, %if.end65
  %60 = load i32, i32* %max_length, align 4, !dbg !3485
  %sub66 = sub nsw i32 %60, 1, !dbg !3487
  store i32 %sub66, i32* %bits, align 4, !dbg !3488
  br label %while.cond, !dbg !3489

while.cond:                                       ; preds = %while.body, %do.body
  %61 = load i32, i32* %bits, align 4, !dbg !3490
  %idxprom67 = sext i32 %61 to i64, !dbg !3491
  %arrayidx68 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom67, !dbg !3491, !ctir !261
  %62 = load i16, i16* %arrayidx68, align 2, !dbg !3491
  %conv69 = zext i16 %62 to i32, !dbg !3491
  %cmp70 = icmp eq i32 %conv69, 0, !dbg !3492
  br i1 %cmp70, label %while.body, label %while.end, !dbg !3489

while.body:                                       ; preds = %while.cond
  %63 = load i32, i32* %bits, align 4, !dbg !3493
  %dec = add nsw i32 %63, -1, !dbg !3493
  store i32 %dec, i32* %bits, align 4, !dbg !3493
  br label %while.cond, !dbg !3489, !llvm.loop !3494

while.end:                                        ; preds = %while.cond
  %64 = load i32, i32* %bits, align 4, !dbg !3495
  %idxprom72 = sext i32 %64 to i64, !dbg !3496
  %arrayidx73 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom72, !dbg !3496, !ctir !261
  %65 = load i16, i16* %arrayidx73, align 2, !dbg !3497
  %dec74 = add i16 %65, -1, !dbg !3497
  store i16 %dec74, i16* %arrayidx73, align 2, !dbg !3497
  %66 = load i32, i32* %bits, align 4, !dbg !3498
  %add75 = add nsw i32 %66, 1, !dbg !3499
  %idxprom76 = sext i32 %add75 to i64, !dbg !3500
  %arrayidx77 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom76, !dbg !3500, !ctir !261
  %67 = load i16, i16* %arrayidx77, align 2, !dbg !3501
  %conv78 = zext i16 %67 to i32, !dbg !3501
  %add79 = add nsw i32 %conv78, 2, !dbg !3501
  %conv80 = trunc i32 %add79 to i16, !dbg !3501
  store i16 %conv80, i16* %arrayidx77, align 2, !dbg !3501
  %68 = load i32, i32* %max_length, align 4, !dbg !3502
  %idxprom81 = sext i32 %68 to i64, !dbg !3503
  %arrayidx82 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom81, !dbg !3503, !ctir !261
  %69 = load i16, i16* %arrayidx82, align 2, !dbg !3504
  %dec83 = add i16 %69, -1, !dbg !3504
  store i16 %dec83, i16* %arrayidx82, align 2, !dbg !3504
  %70 = load i32, i32* %overflow, align 4, !dbg !3505
  %sub84 = sub nsw i32 %70, 2, !dbg !3505
  store i32 %sub84, i32* %overflow, align 4, !dbg !3505
  br label %do.cond, !dbg !3506

do.cond:                                          ; preds = %while.end
  %71 = load i32, i32* %overflow, align 4, !dbg !3507
  %cmp85 = icmp sgt i32 %71, 0, !dbg !3508
  br i1 %cmp85, label %do.body, label %do.end, !dbg !3506, !llvm.loop !3509

do.end:                                           ; preds = %do.cond
  %72 = load i32, i32* %max_length, align 4, !dbg !3511
  store i32 %72, i32* %bits, align 4, !dbg !3513
  br label %for.cond87, !dbg !3514

for.cond87:                                       ; preds = %for.inc135, %do.end
  %73 = load i32, i32* %bits, align 4, !dbg !3515
  %cmp88 = icmp ne i32 %73, 0, !dbg !3517
  br i1 %cmp88, label %for.body90, label %for.end137, !dbg !3518

for.body90:                                       ; preds = %for.cond87
  %74 = load i32, i32* %bits, align 4, !dbg !3519
  %idxprom91 = sext i32 %74 to i64, !dbg !3521
  %arrayidx92 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom91, !dbg !3521, !ctir !261
  %75 = load i16, i16* %arrayidx92, align 2, !dbg !3521
  %conv93 = zext i16 %75 to i32, !dbg !3521
  store i32 %conv93, i32* %n, align 4, !dbg !3522
  br label %while.cond94, !dbg !3523

while.cond94:                                     ; preds = %if.end132, %if.then103, %for.body90
  %76 = load i32, i32* %n, align 4, !dbg !3524
  %cmp95 = icmp ne i32 %76, 0, !dbg !3525
  br i1 %cmp95, label %while.body97, label %while.end134, !dbg !3523

while.body97:                                     ; preds = %while.cond94
  %77 = load i32, i32* %h, align 4, !dbg !3526
  %dec98 = add nsw i32 %77, -1, !dbg !3526
  store i32 %dec98, i32* %h, align 4, !dbg !3526
  %idxprom99 = sext i32 %dec98 to i64, !dbg !3528
  %arrayidx100 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %idxprom99, !dbg !3528, !ctir !403
  %78 = load i32, i32* %arrayidx100, align 4, !dbg !3528
  store i32 %78, i32* %m, align 4, !dbg !3529
  %79 = load i32, i32* %m, align 4, !dbg !3530
  %80 = load i32, i32* %max_code, align 4, !dbg !3532
  %cmp101 = icmp sgt i32 %79, %80, !dbg !3533
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !3534

if.then103:                                       ; preds = %while.body97
  br label %while.cond94, !dbg !3535, !llvm.loop !3536

if.end104:                                        ; preds = %while.body97
  %81 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3538
  %82 = load i32, i32* %m, align 4, !dbg !3540
  %idxprom105 = sext i32 %82 to i64, !dbg !3538
  %arrayidx106 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %81, i64 %idxprom105, !dbg !3538, !ctir !53
  %dl107 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx106, i32 0, i32 1, !dbg !3541, !ctir !54
  %len108 = bitcast %union.anon.0* %dl107 to i16*, !dbg !3541
  %83 = load i16, i16* %len108, align 2, !dbg !3541, !ctir !63
  %conv109 = zext i16 %83 to i32, !dbg !3538
  %84 = load i32, i32* %bits, align 4, !dbg !3542
  %cmp110 = icmp ne i32 %conv109, %84, !dbg !3543
  br i1 %cmp110, label %if.then112, label %if.end132, !dbg !3544

if.then112:                                       ; preds = %if.end104
  %85 = load i32, i32* %bits, align 4, !dbg !3545
  %conv113 = sext i32 %85 to i64, !dbg !3547
  %86 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3548
  %87 = load i32, i32* %m, align 4, !dbg !3549
  %idxprom114 = sext i32 %87 to i64, !dbg !3548
  %arrayidx115 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %86, i64 %idxprom114, !dbg !3548, !ctir !53
  %dl116 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx115, i32 0, i32 1, !dbg !3550, !ctir !54
  %len117 = bitcast %union.anon.0* %dl116 to i16*, !dbg !3550
  %88 = load i16, i16* %len117, align 2, !dbg !3550, !ctir !63
  %conv118 = zext i16 %88 to i64, !dbg !3551
  %sub119 = sub nsw i64 %conv113, %conv118, !dbg !3552
  %89 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3553
  %90 = load i32, i32* %m, align 4, !dbg !3554
  %idxprom120 = sext i32 %90 to i64, !dbg !3553
  %arrayidx121 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %89, i64 %idxprom120, !dbg !3553, !ctir !53
  %fc122 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx121, i32 0, i32 0, !dbg !3555, !ctir !54
  %freq123 = bitcast %union.anon.0* %fc122 to i16*, !dbg !3555
  %91 = load i16, i16* %freq123, align 2, !dbg !3555, !ctir !58
  %conv124 = zext i16 %91 to i64, !dbg !3556
  %mul125 = mul nsw i64 %sub119, %conv124, !dbg !3557
  %92 = load i64, i64* @opt_len, align 8, !dbg !3558
  %add126 = add i64 %92, %mul125, !dbg !3558
  store i64 %add126, i64* @opt_len, align 8, !dbg !3558
  %93 = load i32, i32* %bits, align 4, !dbg !3559
  %conv127 = trunc i32 %93 to i16, !dbg !3560
  %94 = load %struct.ct_data*, %struct.ct_data** %tree, align 8, !dbg !3561
  %95 = load i32, i32* %m, align 4, !dbg !3562
  %idxprom128 = sext i32 %95 to i64, !dbg !3561
  %arrayidx129 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %94, i64 %idxprom128, !dbg !3561, !ctir !53
  %dl130 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx129, i32 0, i32 1, !dbg !3563, !ctir !54
  %len131 = bitcast %union.anon.0* %dl130 to i16*, !dbg !3563
  store i16 %conv127, i16* %len131, align 2, !dbg !3564, !ctir !63
  br label %if.end132, !dbg !3565

if.end132:                                        ; preds = %if.then112, %if.end104
  %96 = load i32, i32* %n, align 4, !dbg !3566
  %dec133 = add nsw i32 %96, -1, !dbg !3566
  store i32 %dec133, i32* %n, align 4, !dbg !3566
  br label %while.cond94, !dbg !3523, !llvm.loop !3536

while.end134:                                     ; preds = %while.cond94
  br label %for.inc135, !dbg !3567

for.inc135:                                       ; preds = %while.end134
  %97 = load i32, i32* %bits, align 4, !dbg !3568
  %dec136 = add nsw i32 %97, -1, !dbg !3568
  store i32 %dec136, i32* %bits, align 4, !dbg !3568
  br label %for.cond87, !dbg !3569, !llvm.loop !3570

for.end137:                                       ; preds = %if.then64, %for.cond87
  ret void, !dbg !3572
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @gen_codes(%struct.ct_data* %tree, i32 %max_code) #0 !dbg !3573 {
entry:
  %tree.addr = alloca %struct.ct_data*, align 8
  %max_code.addr = alloca i32, align 4
  %next_code = alloca [16 x i16], align 16, !ctir !261
  %code = alloca i16, align 2, !ctir !15
  %bits = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  %len = alloca i32, align 4, !ctir !12
  store %struct.ct_data* %tree, %struct.ct_data** %tree.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ct_data** %tree.addr, metadata !3574, metadata !DIExpression()), !dbg !3575
  store i32 %max_code, i32* %max_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_code.addr, metadata !3576, metadata !DIExpression()), !dbg !3577
  call void @llvm.dbg.declare(metadata [16 x i16]* %next_code, metadata !3578, metadata !DIExpression()), !dbg !3579
  call void @llvm.dbg.declare(metadata i16* %code, metadata !3580, metadata !DIExpression()), !dbg !3581
  store i16 0, i16* %code, align 2, !dbg !3581
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !3582, metadata !DIExpression()), !dbg !3583
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3584, metadata !DIExpression()), !dbg !3585
  store i32 1, i32* %bits, align 4, !dbg !3586
  br label %for.cond, !dbg !3588

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %bits, align 4, !dbg !3589
  %cmp = icmp sle i32 %0, 15, !dbg !3591
  br i1 %cmp, label %for.body, label %for.end, !dbg !3592

for.body:                                         ; preds = %for.cond
  %1 = load i16, i16* %code, align 2, !dbg !3593
  %conv = zext i16 %1 to i32, !dbg !3593
  %2 = load i32, i32* %bits, align 4, !dbg !3595
  %sub = sub nsw i32 %2, 1, !dbg !3596
  %idxprom = sext i32 %sub to i64, !dbg !3597
  %arrayidx = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %idxprom, !dbg !3597, !ctir !261
  %3 = load i16, i16* %arrayidx, align 2, !dbg !3597
  %conv1 = zext i16 %3 to i32, !dbg !3597
  %add = add nsw i32 %conv, %conv1, !dbg !3598
  %shl = shl i32 %add, 1, !dbg !3599
  %conv2 = trunc i32 %shl to i16, !dbg !3600
  store i16 %conv2, i16* %code, align 2, !dbg !3601
  %4 = load i32, i32* %bits, align 4, !dbg !3602
  %idxprom3 = sext i32 %4 to i64, !dbg !3603
  %arrayidx4 = getelementptr inbounds [16 x i16], [16 x i16]* %next_code, i64 0, i64 %idxprom3, !dbg !3603, !ctir !261
  store i16 %conv2, i16* %arrayidx4, align 2, !dbg !3604
  br label %for.inc, !dbg !3605

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %bits, align 4, !dbg !3606
  %inc = add nsw i32 %5, 1, !dbg !3606
  store i32 %inc, i32* %bits, align 4, !dbg !3606
  br label %for.cond, !dbg !3607, !llvm.loop !3608

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n, align 4, !dbg !3610
  br label %for.cond5, !dbg !3612

for.cond5:                                        ; preds = %for.inc23, %for.end
  %6 = load i32, i32* %n, align 4, !dbg !3613
  %7 = load i32, i32* %max_code.addr, align 4, !dbg !3615
  %cmp6 = icmp sle i32 %6, %7, !dbg !3616
  br i1 %cmp6, label %for.body8, label %for.end25, !dbg !3617

for.body8:                                        ; preds = %for.cond5
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3618, metadata !DIExpression()), !dbg !3620
  %8 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3621
  %9 = load i32, i32* %n, align 4, !dbg !3622
  %idxprom9 = sext i32 %9 to i64, !dbg !3621
  %arrayidx10 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %8, i64 %idxprom9, !dbg !3621, !ctir !53
  %dl = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx10, i32 0, i32 1, !dbg !3623, !ctir !54
  %len11 = bitcast %union.anon.0* %dl to i16*, !dbg !3623
  %10 = load i16, i16* %len11, align 2, !dbg !3623, !ctir !63
  %conv12 = zext i16 %10 to i32, !dbg !3621
  store i32 %conv12, i32* %len, align 4, !dbg !3620
  %11 = load i32, i32* %len, align 4, !dbg !3624
  %cmp13 = icmp eq i32 %11, 0, !dbg !3626
  br i1 %cmp13, label %if.then, label %if.end, !dbg !3627

if.then:                                          ; preds = %for.body8
  br label %for.inc23, !dbg !3628

if.end:                                           ; preds = %for.body8
  %12 = load i32, i32* %len, align 4, !dbg !3629
  %idxprom15 = sext i32 %12 to i64, !dbg !3630
  %arrayidx16 = getelementptr inbounds [16 x i16], [16 x i16]* %next_code, i64 0, i64 %idxprom15, !dbg !3630, !ctir !261
  %13 = load i16, i16* %arrayidx16, align 2, !dbg !3631
  %inc17 = add i16 %13, 1, !dbg !3631
  store i16 %inc17, i16* %arrayidx16, align 2, !dbg !3631
  %conv18 = zext i16 %13 to i32, !dbg !3630
  %14 = load i32, i32* %len, align 4, !dbg !3632
  %call = call i32 @bi_reverse(i32 %conv18, i32 %14), !dbg !3633
  %conv19 = trunc i32 %call to i16, !dbg !3633
  %15 = load %struct.ct_data*, %struct.ct_data** %tree.addr, align 8, !dbg !3634
  %16 = load i32, i32* %n, align 4, !dbg !3635
  %idxprom20 = sext i32 %16 to i64, !dbg !3634
  %arrayidx21 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %15, i64 %idxprom20, !dbg !3634, !ctir !53
  %fc = getelementptr inbounds %struct.ct_data, %struct.ct_data* %arrayidx21, i32 0, i32 0, !dbg !3636, !ctir !54
  %code22 = bitcast %union.anon.0* %fc to i16*, !dbg !3636
  store i16 %conv19, i16* %code22, align 2, !dbg !3637, !ctir !58
  br label %for.inc23, !dbg !3638

for.inc23:                                        ; preds = %if.end, %if.then
  %17 = load i32, i32* %n, align 4, !dbg !3639
  %inc24 = add nsw i32 %17, 1, !dbg !3639
  store i32 %inc24, i32* %n, align 4, !dbg !3639
  br label %for.cond5, !dbg !3640, !llvm.loop !3641

for.end25:                                        ; preds = %for.cond5
  ret void, !dbg !3643
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bi_reverse(i32 %code, i32 %len) #0 !dbg !3644 {
entry:
  %code.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %res = alloca i32, align 4, !ctir !6
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3647, metadata !DIExpression()), !dbg !3648
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !3649, metadata !DIExpression()), !dbg !3650
  call void @llvm.dbg.declare(metadata i32* %res, metadata !3651, metadata !DIExpression()), !dbg !3652
  store i32 0, i32* %res, align 4, !dbg !3652
  br label %do.body, !dbg !3653

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %code.addr, align 4, !dbg !3654
  %and = and i32 %0, 1, !dbg !3656
  %1 = load i32, i32* %res, align 4, !dbg !3657
  %or = or i32 %1, %and, !dbg !3657
  store i32 %or, i32* %res, align 4, !dbg !3657
  %2 = load i32, i32* %code.addr, align 4, !dbg !3658
  %shr = lshr i32 %2, 1, !dbg !3658
  store i32 %shr, i32* %code.addr, align 4, !dbg !3658
  %3 = load i32, i32* %res, align 4, !dbg !3659
  %shl = shl i32 %3, 1, !dbg !3659
  store i32 %shl, i32* %res, align 4, !dbg !3659
  br label %do.cond, !dbg !3660

do.cond:                                          ; preds = %do.body
  %4 = load i32, i32* %len.addr, align 4, !dbg !3661
  %dec = add nsw i32 %4, -1, !dbg !3661
  store i32 %dec, i32* %len.addr, align 4, !dbg !3661
  %cmp = icmp sgt i32 %dec, 0, !dbg !3662
  br i1 %cmp, label %do.body, label %do.end, !dbg !3660, !llvm.loop !3663

do.end:                                           ; preds = %do.cond
  %5 = load i32, i32* %res, align 4, !dbg !3665
  %shr1 = lshr i32 %5, 1, !dbg !3666
  ret i32 %shr1, !dbg !3667
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @warning(i8* %m) #0 !dbg !3668 {
entry:
  %m.addr = alloca i8*, align 8
  store i8* %m, i8** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %m.addr, metadata !3669, metadata !DIExpression()), !dbg !3670
  %0 = load i32, i32* @quiet, align 4, !dbg !3671
  %tobool = icmp ne i32 %0, 0, !dbg !3671
  br i1 %tobool, label %if.end, label %if.then, !dbg !3674

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3671
  %2 = load i8*, i8** @progname, align 8, !dbg !3671
  %3 = load i8*, i8** %m.addr, align 8, !dbg !3671
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.74, i64 0, i64 0), i8* %2, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %3), !dbg !3671
  br label %if.end, !dbg !3671

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @exit_code, align 4, !dbg !3675
  %cmp = icmp eq i32 %4, 0, !dbg !3675
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !3674

if.then1:                                         ; preds = %if.end
  store i32 2, i32* @exit_code, align 4, !dbg !3675
  br label %if.end2, !dbg !3675

if.end2:                                          ; preds = %if.then1, %if.end
  ret void, !dbg !3677
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @file_read(i8* %buf, i32 %size) #0 !dbg !3678 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %len = alloca i32, align 4, !ctir !6
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !3681, metadata !DIExpression()), !dbg !3682
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3683, metadata !DIExpression()), !dbg !3684
  %0 = load i32, i32* @ifd, align 4, !dbg !3685
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !3686
  %2 = load i32, i32* %size.addr, align 4, !dbg !3687
  %conv = zext i32 %2 to i64, !dbg !3687
  %call = call i64 @read(i32 %0, i8* %1, i64 %conv), !dbg !3688
  %conv1 = trunc i64 %call to i32, !dbg !3688
  store i32 %conv1, i32* %len, align 4, !dbg !3689
  %3 = load i32, i32* %len, align 4, !dbg !3690
  %cmp = icmp eq i32 %3, 0, !dbg !3692
  br i1 %cmp, label %if.then, label %if.end, !dbg !3693

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %len, align 4, !dbg !3694
  store i32 %4, i32* %retval, align 4, !dbg !3695
  br label %return, !dbg !3695

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %len, align 4, !dbg !3696
  %cmp3 = icmp eq i32 %5, -1, !dbg !3698
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !3699

if.then5:                                         ; preds = %if.end
  call void @read_error(), !dbg !3700
  store i32 -1, i32* %retval, align 4, !dbg !3702
  br label %return, !dbg !3702

if.end6:                                          ; preds = %if.end
  %6 = load i8*, i8** %buf.addr, align 8, !dbg !3703
  %7 = load i32, i32* %len, align 4, !dbg !3704
  %call7 = call i64 @updcrc(i8* %6, i32 %7), !dbg !3705
  store i64 %call7, i64* @crc, align 8, !dbg !3706
  %8 = load i32, i32* %len, align 4, !dbg !3707
  %conv8 = zext i32 %8 to i64, !dbg !3708
  %9 = load i64, i64* @bytes_in, align 8, !dbg !3709
  %add = add nsw i64 %9, %conv8, !dbg !3709
  store i64 %add, i64* @bytes_in, align 8, !dbg !3709
  %10 = load i32, i32* %len, align 4, !dbg !3710
  store i32 %10, i32* %retval, align 4, !dbg !3711
  br label %return, !dbg !3711

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !3712
  ret i32 %11, !dbg !3712
}

declare dso_local i64 @read(i32, i8*, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @read_error() #0 !dbg !3713 {
entry:
  %e = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %e, metadata !3714, metadata !DIExpression()), !dbg !3715
  %call = call i32* @__errno_location() #12, !dbg !3716
  %0 = load i32, i32* %call, align 4, !dbg !3716, !ctir !12
  store i32 %0, i32* %e, align 4, !dbg !3715
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3717
  %2 = load i8*, i8** @progname, align 8, !dbg !3718
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i64 0, i64 0), i8* %2), !dbg !3719
  %3 = load i32, i32* %e, align 4, !dbg !3720
  %cmp = icmp ne i32 %3, 0, !dbg !3722
  br i1 %cmp, label %if.then, label %if.else, !dbg !3723

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %e, align 4, !dbg !3724
  %call2 = call i32* @__errno_location() #12, !dbg !3726
  store i32 %4, i32* %call2, align 4, !dbg !3727, !ctir !12
  call void @perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !3728
  br label %if.end, !dbg !3729

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3730
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !3732
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @abort_gzip(), !dbg !3733
  ret void, !dbg !3734
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #7

declare dso_local void @perror(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_buf(i32 %fd, i8* %buf, i32 %cnt) #0 !dbg !3735 {
entry:
  %fd.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %cnt.addr = alloca i32, align 4
  %n = alloca i32, align 4, !ctir !6
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !3738, metadata !DIExpression()), !dbg !3739
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3740, metadata !DIExpression()), !dbg !3741
  store i32 %cnt, i32* %cnt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cnt.addr, metadata !3742, metadata !DIExpression()), !dbg !3743
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3744, metadata !DIExpression()), !dbg !3745
  br label %while.cond, !dbg !3746

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %fd.addr, align 4, !dbg !3747
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !3748
  %2 = load i32, i32* %cnt.addr, align 4, !dbg !3749
  %conv = zext i32 %2 to i64, !dbg !3749
  %call = call i64 @write(i32 %0, i8* %1, i64 %conv), !dbg !3750
  %conv1 = trunc i64 %call to i32, !dbg !3750
  store i32 %conv1, i32* %n, align 4, !dbg !3751
  %3 = load i32, i32* %cnt.addr, align 4, !dbg !3752
  %cmp = icmp ne i32 %conv1, %3, !dbg !3753
  br i1 %cmp, label %while.body, label %while.end, !dbg !3746

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %n, align 4, !dbg !3754
  %cmp3 = icmp eq i32 %4, -1, !dbg !3757
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3758

if.then:                                          ; preds = %while.body
  call void @write_error(), !dbg !3759
  br label %if.end, !dbg !3761

if.end:                                           ; preds = %if.then, %while.body
  %5 = load i32, i32* %n, align 4, !dbg !3762
  %6 = load i32, i32* %cnt.addr, align 4, !dbg !3763
  %sub = sub i32 %6, %5, !dbg !3763
  store i32 %sub, i32* %cnt.addr, align 4, !dbg !3763
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !3764
  %8 = load i32, i32* %n, align 4, !dbg !3765
  %idx.ext = zext i32 %8 to i64, !dbg !3766
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !3766, !ctir !20
  store i8* %add.ptr, i8** %buf.addr, align 8, !dbg !3767
  br label %while.cond, !dbg !3746, !llvm.loop !3768

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3770
}

declare dso_local i64 @write(i32, i8*, i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @write_error() #0 !dbg !3771 {
entry:
  %e = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %e, metadata !3772, metadata !DIExpression()), !dbg !3773
  %call = call i32* @__errno_location() #12, !dbg !3774
  %0 = load i32, i32* %call, align 4, !dbg !3774, !ctir !12
  store i32 %0, i32* %e, align 4, !dbg !3773
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3775
  %2 = load i8*, i8** @progname, align 8, !dbg !3776
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.75, i64 0, i64 0), i8* %2), !dbg !3777
  %3 = load i32, i32* %e, align 4, !dbg !3778
  %call2 = call i32* @__errno_location() #12, !dbg !3779
  store i32 %3, i32* %call2, align 4, !dbg !3780, !ctir !12
  call void @perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !3781
  call void @abort_gzip(), !dbg !3782
  ret void, !dbg !3783
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_getopt_internal(i32 %argc, i8** %argv, i8* %optstring, %struct.option* %longopts, i32* %longind, i32 %long_only) #0 !dbg !3784 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %optstring.addr = alloca i8*, align 8
  %longopts.addr = alloca %struct.option*, align 8
  %longind.addr = alloca i32*, align 8
  %long_only.addr = alloca i32, align 4
  %print_errors = alloca i32, align 4, !ctir !12
  %nameend = alloca i8*, align 8, !ctir !19
  %p = alloca %struct.option*, align 8, !ctir !24
  %pfound = alloca %struct.option*, align 8, !ctir !24
  %exact = alloca i32, align 4, !ctir !12
  %ambig = alloca i32, align 4, !ctir !12
  %indfound = alloca i32, align 4, !ctir !12
  %option_index = alloca i32, align 4, !ctir !12
  %c = alloca i8, align 1, !ctir !20
  %temp = alloca i8*, align 8, !ctir !19
  %nameend374 = alloca i8*, align 8, !ctir !19
  %p375 = alloca %struct.option*, align 8, !ctir !24
  %pfound376 = alloca %struct.option*, align 8, !ctir !24
  %exact377 = alloca i32, align 4, !ctir !12
  %ambig378 = alloca i32, align 4, !ctir !12
  %indfound379 = alloca i32, align 4, !ctir !12
  %option_index380 = alloca i32, align 4, !ctir !12
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !3787, metadata !DIExpression()), !dbg !3788
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !3789, metadata !DIExpression()), !dbg !3790
  store i8* %optstring, i8** %optstring.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optstring.addr, metadata !3791, metadata !DIExpression()), !dbg !3792
  store %struct.option* %longopts, %struct.option** %longopts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %longopts.addr, metadata !3793, metadata !DIExpression()), !dbg !3794
  store i32* %longind, i32** %longind.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %longind.addr, metadata !3795, metadata !DIExpression()), !dbg !3796
  store i32 %long_only, i32* %long_only.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %long_only.addr, metadata !3797, metadata !DIExpression()), !dbg !3798
  call void @llvm.dbg.declare(metadata i32* %print_errors, metadata !3799, metadata !DIExpression()), !dbg !3800
  %0 = load i32, i32* @opterr, align 4, !dbg !3801
  store i32 %0, i32* %print_errors, align 4, !dbg !3800
  %1 = load i8*, i8** %optstring.addr, align 8, !dbg !3802
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !3802, !ctir !29
  %2 = load i8, i8* %arrayidx, align 1, !dbg !3802
  %conv = sext i8 %2 to i32, !dbg !3802
  %cmp = icmp eq i32 %conv, 58, !dbg !3804
  br i1 %cmp, label %if.then, label %if.end, !dbg !3805

if.then:                                          ; preds = %entry
  store i32 0, i32* %print_errors, align 4, !dbg !3806
  br label %if.end, !dbg !3807

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %argc.addr, align 4, !dbg !3808
  %cmp2 = icmp slt i32 %3, 1, !dbg !3810
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !3811

if.then4:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !3812
  br label %return, !dbg !3812

if.end5:                                          ; preds = %if.end
  store i8* null, i8** @optarg, align 8, !dbg !3813
  %4 = load i32, i32* @optind, align 4, !dbg !3814
  %cmp6 = icmp eq i32 %4, 0, !dbg !3816
  br i1 %cmp6, label %if.then8, label %lor.lhs.false, !dbg !3817

lor.lhs.false:                                    ; preds = %if.end5
  %5 = load i32, i32* @__getopt_initialized, align 4, !dbg !3818
  %tobool = icmp ne i32 %5, 0, !dbg !3818
  br i1 %tobool, label %if.end13, label %if.then8, !dbg !3819

if.then8:                                         ; preds = %lor.lhs.false, %if.end5
  %6 = load i32, i32* @optind, align 4, !dbg !3820
  %cmp9 = icmp eq i32 %6, 0, !dbg !3823
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !3824

if.then11:                                        ; preds = %if.then8
  store i32 1, i32* @optind, align 4, !dbg !3825
  br label %if.end12, !dbg !3826

if.end12:                                         ; preds = %if.then11, %if.then8
  %7 = load i32, i32* %argc.addr, align 4, !dbg !3827
  %8 = load i8**, i8*** %argv.addr, align 8, !dbg !3828
  %9 = load i8*, i8** %optstring.addr, align 8, !dbg !3829
  %call = call i8* @_getopt_initialize(i32 %7, i8** %8, i8* %9), !dbg !3830
  store i8* %call, i8** %optstring.addr, align 8, !dbg !3831
  store i32 1, i32* @__getopt_initialized, align 4, !dbg !3832
  br label %if.end13, !dbg !3833

if.end13:                                         ; preds = %if.end12, %lor.lhs.false
  %10 = load i8*, i8** @nextchar, align 8, !dbg !3834
  %cmp14 = icmp eq i8* %10, null, !dbg !3836
  br i1 %cmp14, label %if.then20, label %lor.lhs.false16, !dbg !3837

lor.lhs.false16:                                  ; preds = %if.end13
  %11 = load i8*, i8** @nextchar, align 8, !dbg !3838
  %12 = load i8, i8* %11, align 1, !dbg !3839, !ctir !20
  %conv17 = sext i8 %12 to i32, !dbg !3839
  %cmp18 = icmp eq i32 %conv17, 0, !dbg !3840
  br i1 %cmp18, label %if.then20, label %if.end121, !dbg !3841

if.then20:                                        ; preds = %lor.lhs.false16, %if.end13
  %13 = load i32, i32* @last_nonopt, align 4, !dbg !3842
  %14 = load i32, i32* @optind, align 4, !dbg !3845
  %cmp21 = icmp sgt i32 %13, %14, !dbg !3846
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !3847

if.then23:                                        ; preds = %if.then20
  %15 = load i32, i32* @optind, align 4, !dbg !3848
  store i32 %15, i32* @last_nonopt, align 4, !dbg !3849
  br label %if.end24, !dbg !3850

if.end24:                                         ; preds = %if.then23, %if.then20
  %16 = load i32, i32* @first_nonopt, align 4, !dbg !3851
  %17 = load i32, i32* @optind, align 4, !dbg !3853
  %cmp25 = icmp sgt i32 %16, %17, !dbg !3854
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !3855

if.then27:                                        ; preds = %if.end24
  %18 = load i32, i32* @optind, align 4, !dbg !3856
  store i32 %18, i32* @first_nonopt, align 4, !dbg !3857
  br label %if.end28, !dbg !3858

if.end28:                                         ; preds = %if.then27, %if.end24
  %19 = load i32, i32* @ordering, align 4, !dbg !3859
  %cmp29 = icmp eq i32 %19, 1, !dbg !3861
  br i1 %cmp29, label %if.then31, label %if.end55, !dbg !3862

if.then31:                                        ; preds = %if.end28
  %20 = load i32, i32* @first_nonopt, align 4, !dbg !3863
  %21 = load i32, i32* @last_nonopt, align 4, !dbg !3866
  %cmp32 = icmp ne i32 %20, %21, !dbg !3867
  br i1 %cmp32, label %land.lhs.true, label %if.else, !dbg !3868

land.lhs.true:                                    ; preds = %if.then31
  %22 = load i32, i32* @last_nonopt, align 4, !dbg !3869
  %23 = load i32, i32* @optind, align 4, !dbg !3870
  %cmp34 = icmp ne i32 %22, %23, !dbg !3871
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !3872

if.then36:                                        ; preds = %land.lhs.true
  %24 = load i8**, i8*** %argv.addr, align 8, !dbg !3873
  call void @exchange(i8** %24), !dbg !3874
  br label %if.end41, !dbg !3874

if.else:                                          ; preds = %land.lhs.true, %if.then31
  %25 = load i32, i32* @last_nonopt, align 4, !dbg !3875
  %26 = load i32, i32* @optind, align 4, !dbg !3877
  %cmp37 = icmp ne i32 %25, %26, !dbg !3878
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !3879

if.then39:                                        ; preds = %if.else
  %27 = load i32, i32* @optind, align 4, !dbg !3880
  store i32 %27, i32* @first_nonopt, align 4, !dbg !3881
  br label %if.end40, !dbg !3882

if.end40:                                         ; preds = %if.then39, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then36
  br label %while.cond, !dbg !3883

while.cond:                                       ; preds = %while.body, %if.end41
  %28 = load i32, i32* @optind, align 4, !dbg !3884
  %29 = load i32, i32* %argc.addr, align 4, !dbg !3885
  %cmp42 = icmp slt i32 %28, %29, !dbg !3886
  br i1 %cmp42, label %land.rhs, label %land.end, !dbg !3887

land.rhs:                                         ; preds = %while.cond
  %30 = load i8**, i8*** %argv.addr, align 8, !dbg !3888
  %31 = load i32, i32* @optind, align 4, !dbg !3888
  %idxprom = sext i32 %31 to i64, !dbg !3888
  %arrayidx44 = getelementptr inbounds i8*, i8** %30, i64 %idxprom, !dbg !3888, !ctir !167
  %32 = load i8*, i8** %arrayidx44, align 8, !dbg !3888
  %arrayidx45 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !3888, !ctir !19
  %33 = load i8, i8* %arrayidx45, align 1, !dbg !3888
  %conv46 = sext i8 %33 to i32, !dbg !3888
  %cmp47 = icmp ne i32 %conv46, 45, !dbg !3888
  br i1 %cmp47, label %lor.end, label %lor.rhs, !dbg !3888

lor.rhs:                                          ; preds = %land.rhs
  %34 = load i8**, i8*** %argv.addr, align 8, !dbg !3888
  %35 = load i32, i32* @optind, align 4, !dbg !3888
  %idxprom49 = sext i32 %35 to i64, !dbg !3888
  %arrayidx50 = getelementptr inbounds i8*, i8** %34, i64 %idxprom49, !dbg !3888, !ctir !167
  %36 = load i8*, i8** %arrayidx50, align 8, !dbg !3888
  %arrayidx51 = getelementptr inbounds i8, i8* %36, i64 1, !dbg !3888, !ctir !19
  %37 = load i8, i8* %arrayidx51, align 1, !dbg !3888
  %conv52 = sext i8 %37 to i32, !dbg !3888
  %cmp53 = icmp eq i32 %conv52, 0, !dbg !3888
  br label %lor.end, !dbg !3888

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %38 = phi i1 [ true, %land.rhs ], [ %cmp53, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %39 = phi i1 [ false, %while.cond ], [ %38, %lor.end ], !dbg !3889
  br i1 %39, label %while.body, label %while.end, !dbg !3883

while.body:                                       ; preds = %land.end
  %40 = load i32, i32* @optind, align 4, !dbg !3890
  %inc = add nsw i32 %40, 1, !dbg !3890
  store i32 %inc, i32* @optind, align 4, !dbg !3890
  br label %while.cond, !dbg !3883, !llvm.loop !3891

while.end:                                        ; preds = %land.end
  %41 = load i32, i32* @optind, align 4, !dbg !3892
  store i32 %41, i32* @last_nonopt, align 4, !dbg !3893
  br label %if.end55, !dbg !3894

if.end55:                                         ; preds = %while.end, %if.end28
  %42 = load i32, i32* @optind, align 4, !dbg !3895
  %43 = load i32, i32* %argc.addr, align 4, !dbg !3897
  %cmp56 = icmp ne i32 %42, %43, !dbg !3898
  br i1 %cmp56, label %land.lhs.true58, label %if.end77, !dbg !3899

land.lhs.true58:                                  ; preds = %if.end55
  %44 = load i8**, i8*** %argv.addr, align 8, !dbg !3900
  %45 = load i32, i32* @optind, align 4, !dbg !3901
  %idxprom59 = sext i32 %45 to i64, !dbg !3900
  %arrayidx60 = getelementptr inbounds i8*, i8** %44, i64 %idxprom59, !dbg !3900, !ctir !167
  %46 = load i8*, i8** %arrayidx60, align 8, !dbg !3900
  %call61 = call i32 @strcmp(i8* %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #9, !dbg !3902
  %tobool62 = icmp ne i32 %call61, 0, !dbg !3902
  br i1 %tobool62, label %if.end77, label %if.then63, !dbg !3903

if.then63:                                        ; preds = %land.lhs.true58
  %47 = load i32, i32* @optind, align 4, !dbg !3904
  %inc64 = add nsw i32 %47, 1, !dbg !3904
  store i32 %inc64, i32* @optind, align 4, !dbg !3904
  %48 = load i32, i32* @first_nonopt, align 4, !dbg !3906
  %49 = load i32, i32* @last_nonopt, align 4, !dbg !3908
  %cmp65 = icmp ne i32 %48, %49, !dbg !3909
  br i1 %cmp65, label %land.lhs.true67, label %if.else71, !dbg !3910

land.lhs.true67:                                  ; preds = %if.then63
  %50 = load i32, i32* @last_nonopt, align 4, !dbg !3911
  %51 = load i32, i32* @optind, align 4, !dbg !3912
  %cmp68 = icmp ne i32 %50, %51, !dbg !3913
  br i1 %cmp68, label %if.then70, label %if.else71, !dbg !3914

if.then70:                                        ; preds = %land.lhs.true67
  %52 = load i8**, i8*** %argv.addr, align 8, !dbg !3915
  call void @exchange(i8** %52), !dbg !3916
  br label %if.end76, !dbg !3916

if.else71:                                        ; preds = %land.lhs.true67, %if.then63
  %53 = load i32, i32* @first_nonopt, align 4, !dbg !3917
  %54 = load i32, i32* @last_nonopt, align 4, !dbg !3919
  %cmp72 = icmp eq i32 %53, %54, !dbg !3920
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !3921

if.then74:                                        ; preds = %if.else71
  %55 = load i32, i32* @optind, align 4, !dbg !3922
  store i32 %55, i32* @first_nonopt, align 4, !dbg !3923
  br label %if.end75, !dbg !3924

if.end75:                                         ; preds = %if.then74, %if.else71
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then70
  %56 = load i32, i32* %argc.addr, align 4, !dbg !3925
  store i32 %56, i32* @last_nonopt, align 4, !dbg !3926
  %57 = load i32, i32* %argc.addr, align 4, !dbg !3927
  store i32 %57, i32* @optind, align 4, !dbg !3928
  br label %if.end77, !dbg !3929

if.end77:                                         ; preds = %if.end76, %land.lhs.true58, %if.end55
  %58 = load i32, i32* @optind, align 4, !dbg !3930
  %59 = load i32, i32* %argc.addr, align 4, !dbg !3932
  %cmp78 = icmp eq i32 %58, %59, !dbg !3933
  br i1 %cmp78, label %if.then80, label %if.end85, !dbg !3934

if.then80:                                        ; preds = %if.end77
  %60 = load i32, i32* @first_nonopt, align 4, !dbg !3935
  %61 = load i32, i32* @last_nonopt, align 4, !dbg !3938
  %cmp81 = icmp ne i32 %60, %61, !dbg !3939
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !3940

if.then83:                                        ; preds = %if.then80
  %62 = load i32, i32* @first_nonopt, align 4, !dbg !3941
  store i32 %62, i32* @optind, align 4, !dbg !3942
  br label %if.end84, !dbg !3943

if.end84:                                         ; preds = %if.then83, %if.then80
  store i32 -1, i32* %retval, align 4, !dbg !3944
  br label %return, !dbg !3944

if.end85:                                         ; preds = %if.end77
  %63 = load i8**, i8*** %argv.addr, align 8, !dbg !3945
  %64 = load i32, i32* @optind, align 4, !dbg !3945
  %idxprom86 = sext i32 %64 to i64, !dbg !3945
  %arrayidx87 = getelementptr inbounds i8*, i8** %63, i64 %idxprom86, !dbg !3945, !ctir !167
  %65 = load i8*, i8** %arrayidx87, align 8, !dbg !3945
  %arrayidx88 = getelementptr inbounds i8, i8* %65, i64 0, !dbg !3945, !ctir !19
  %66 = load i8, i8* %arrayidx88, align 1, !dbg !3945
  %conv89 = sext i8 %66 to i32, !dbg !3945
  %cmp90 = icmp ne i32 %conv89, 45, !dbg !3945
  br i1 %cmp90, label %if.then99, label %lor.lhs.false92, !dbg !3945

lor.lhs.false92:                                  ; preds = %if.end85
  %67 = load i8**, i8*** %argv.addr, align 8, !dbg !3945
  %68 = load i32, i32* @optind, align 4, !dbg !3945
  %idxprom93 = sext i32 %68 to i64, !dbg !3945
  %arrayidx94 = getelementptr inbounds i8*, i8** %67, i64 %idxprom93, !dbg !3945, !ctir !167
  %69 = load i8*, i8** %arrayidx94, align 8, !dbg !3945
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i64 1, !dbg !3945, !ctir !19
  %70 = load i8, i8* %arrayidx95, align 1, !dbg !3945
  %conv96 = sext i8 %70 to i32, !dbg !3945
  %cmp97 = icmp eq i32 %conv96, 0, !dbg !3945
  br i1 %cmp97, label %if.then99, label %if.end107, !dbg !3947

if.then99:                                        ; preds = %lor.lhs.false92, %if.end85
  %71 = load i32, i32* @ordering, align 4, !dbg !3948
  %cmp100 = icmp eq i32 %71, 0, !dbg !3951
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !3952

if.then102:                                       ; preds = %if.then99
  store i32 -1, i32* %retval, align 4, !dbg !3953
  br label %return, !dbg !3953

if.end103:                                        ; preds = %if.then99
  %72 = load i8**, i8*** %argv.addr, align 8, !dbg !3954
  %73 = load i32, i32* @optind, align 4, !dbg !3955
  %inc104 = add nsw i32 %73, 1, !dbg !3955
  store i32 %inc104, i32* @optind, align 4, !dbg !3955
  %idxprom105 = sext i32 %73 to i64, !dbg !3954
  %arrayidx106 = getelementptr inbounds i8*, i8** %72, i64 %idxprom105, !dbg !3954, !ctir !167
  %74 = load i8*, i8** %arrayidx106, align 8, !dbg !3954
  store i8* %74, i8** @optarg, align 8, !dbg !3956
  store i32 1, i32* %retval, align 4, !dbg !3957
  br label %return, !dbg !3957

if.end107:                                        ; preds = %lor.lhs.false92
  %75 = load i8**, i8*** %argv.addr, align 8, !dbg !3958
  %76 = load i32, i32* @optind, align 4, !dbg !3959
  %idxprom108 = sext i32 %76 to i64, !dbg !3958
  %arrayidx109 = getelementptr inbounds i8*, i8** %75, i64 %idxprom108, !dbg !3958, !ctir !167
  %77 = load i8*, i8** %arrayidx109, align 8, !dbg !3958
  %add.ptr = getelementptr inbounds i8, i8* %77, i64 1, !dbg !3960, !ctir !20
  %78 = load %struct.option*, %struct.option** %longopts.addr, align 8, !dbg !3961
  %cmp110 = icmp ne %struct.option* %78, null, !dbg !3962
  br i1 %cmp110, label %land.rhs112, label %land.end119, !dbg !3963

land.rhs112:                                      ; preds = %if.end107
  %79 = load i8**, i8*** %argv.addr, align 8, !dbg !3964
  %80 = load i32, i32* @optind, align 4, !dbg !3965
  %idxprom113 = sext i32 %80 to i64, !dbg !3964
  %arrayidx114 = getelementptr inbounds i8*, i8** %79, i64 %idxprom113, !dbg !3964, !ctir !167
  %81 = load i8*, i8** %arrayidx114, align 8, !dbg !3964
  %arrayidx115 = getelementptr inbounds i8, i8* %81, i64 1, !dbg !3964, !ctir !19
  %82 = load i8, i8* %arrayidx115, align 1, !dbg !3964
  %conv116 = sext i8 %82 to i32, !dbg !3964
  %cmp117 = icmp eq i32 %conv116, 45, !dbg !3966
  br label %land.end119

land.end119:                                      ; preds = %land.rhs112, %if.end107
  %83 = phi i1 [ false, %if.end107 ], [ %cmp117, %land.rhs112 ], !dbg !3967
  %land.ext = zext i1 %83 to i32, !dbg !3963
  %idx.ext = sext i32 %land.ext to i64, !dbg !3968
  %add.ptr120 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext, !dbg !3968, !ctir !20
  store i8* %add.ptr120, i8** @nextchar, align 8, !dbg !3969
  br label %if.end121, !dbg !3970

if.end121:                                        ; preds = %land.end119, %lor.lhs.false16
  %84 = load %struct.option*, %struct.option** %longopts.addr, align 8, !dbg !3971
  %cmp122 = icmp ne %struct.option* %84, null, !dbg !3973
  br i1 %cmp122, label %land.lhs.true124, label %if.end332, !dbg !3974

land.lhs.true124:                                 ; preds = %if.end121
  %85 = load i8**, i8*** %argv.addr, align 8, !dbg !3975
  %86 = load i32, i32* @optind, align 4, !dbg !3976
  %idxprom125 = sext i32 %86 to i64, !dbg !3975
  %arrayidx126 = getelementptr inbounds i8*, i8** %85, i64 %idxprom125, !dbg !3975, !ctir !167
  %87 = load i8*, i8** %arrayidx126, align 8, !dbg !3975
  %arrayidx127 = getelementptr inbounds i8, i8* %87, i64 1, !dbg !3975, !ctir !19
  %88 = load i8, i8* %arrayidx127, align 1, !dbg !3975
  %conv128 = sext i8 %88 to i32, !dbg !3975
  %cmp129 = icmp eq i32 %conv128, 45, !dbg !3977
  br i1 %cmp129, label %if.then146, label %lor.lhs.false131, !dbg !3978

lor.lhs.false131:                                 ; preds = %land.lhs.true124
  %89 = load i32, i32* %long_only.addr, align 4, !dbg !3979
  %tobool132 = icmp ne i32 %89, 0, !dbg !3979
  br i1 %tobool132, label %land.lhs.true133, label %if.end332, !dbg !3980

land.lhs.true133:                                 ; preds = %lor.lhs.false131
  %90 = load i8**, i8*** %argv.addr, align 8, !dbg !3981
  %91 = load i32, i32* @optind, align 4, !dbg !3982
  %idxprom134 = sext i32 %91 to i64, !dbg !3981
  %arrayidx135 = getelementptr inbounds i8*, i8** %90, i64 %idxprom134, !dbg !3981, !ctir !167
  %92 = load i8*, i8** %arrayidx135, align 8, !dbg !3981
  %arrayidx136 = getelementptr inbounds i8, i8* %92, i64 2, !dbg !3981, !ctir !19
  %93 = load i8, i8* %arrayidx136, align 1, !dbg !3981
  %conv137 = sext i8 %93 to i32, !dbg !3981
  %tobool138 = icmp ne i32 %conv137, 0, !dbg !3981
  br i1 %tobool138, label %if.then146, label %lor.lhs.false139, !dbg !3983

lor.lhs.false139:                                 ; preds = %land.lhs.true133
  %94 = load i8*, i8** %optstring.addr, align 8, !dbg !3984
  %95 = load i8**, i8*** %argv.addr, align 8, !dbg !3985
  %96 = load i32, i32* @optind, align 4, !dbg !3986
  %idxprom140 = sext i32 %96 to i64, !dbg !3985
  %arrayidx141 = getelementptr inbounds i8*, i8** %95, i64 %idxprom140, !dbg !3985, !ctir !167
  %97 = load i8*, i8** %arrayidx141, align 8, !dbg !3985
  %arrayidx142 = getelementptr inbounds i8, i8* %97, i64 1, !dbg !3985, !ctir !19
  %98 = load i8, i8* %arrayidx142, align 1, !dbg !3985
  %conv143 = sext i8 %98 to i32, !dbg !3985
  %call144 = call i8* @my_index(i8* %94, i32 %conv143), !dbg !3987
  %tobool145 = icmp ne i8* %call144, null, !dbg !3987
  br i1 %tobool145, label %if.end332, label %if.then146, !dbg !3988

if.then146:                                       ; preds = %lor.lhs.false139, %land.lhs.true133, %land.lhs.true124
  call void @llvm.dbg.declare(metadata i8** %nameend, metadata !3989, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata %struct.option** %p, metadata !3992, metadata !DIExpression()), !dbg !3993
  call void @llvm.dbg.declare(metadata %struct.option** %pfound, metadata !3994, metadata !DIExpression()), !dbg !3995
  store %struct.option* null, %struct.option** %pfound, align 8, !dbg !3995
  call void @llvm.dbg.declare(metadata i32* %exact, metadata !3996, metadata !DIExpression()), !dbg !3997
  store i32 0, i32* %exact, align 4, !dbg !3997
  call void @llvm.dbg.declare(metadata i32* %ambig, metadata !3998, metadata !DIExpression()), !dbg !3999
  store i32 0, i32* %ambig, align 4, !dbg !3999
  call void @llvm.dbg.declare(metadata i32* %indfound, metadata !4000, metadata !DIExpression()), !dbg !4001
  store i32 -1, i32* %indfound, align 4, !dbg !4001
  call void @llvm.dbg.declare(metadata i32* %option_index, metadata !4002, metadata !DIExpression()), !dbg !4003
  %99 = load i8*, i8** @nextchar, align 8, !dbg !4004
  store i8* %99, i8** %nameend, align 8, !dbg !4006
  br label %for.cond, !dbg !4007

for.cond:                                         ; preds = %for.inc, %if.then146
  %100 = load i8*, i8** %nameend, align 8, !dbg !4008
  %101 = load i8, i8* %100, align 1, !dbg !4010, !ctir !20
  %conv147 = sext i8 %101 to i32, !dbg !4010
  %tobool148 = icmp ne i32 %conv147, 0, !dbg !4010
  br i1 %tobool148, label %land.rhs149, label %land.end153, !dbg !4011

land.rhs149:                                      ; preds = %for.cond
  %102 = load i8*, i8** %nameend, align 8, !dbg !4012
  %103 = load i8, i8* %102, align 1, !dbg !4013, !ctir !20
  %conv150 = sext i8 %103 to i32, !dbg !4013
  %cmp151 = icmp ne i32 %conv150, 61, !dbg !4014
  br label %land.end153

land.end153:                                      ; preds = %land.rhs149, %for.cond
  %104 = phi i1 [ false, %for.cond ], [ %cmp151, %land.rhs149 ], !dbg !4015
  br i1 %104, label %for.body, label %for.end, !dbg !4016

for.body:                                         ; preds = %land.end153
  br label %for.inc, !dbg !4016

for.inc:                                          ; preds = %for.body
  %105 = load i8*, i8** %nameend, align 8, !dbg !4017
  %incdec.ptr = getelementptr inbounds i8, i8* %105, i32 1, !dbg !4017, !ctir !20
  store i8* %incdec.ptr, i8** %nameend, align 8, !dbg !4017
  br label %for.cond, !dbg !4018, !llvm.loop !4019

for.end:                                          ; preds = %land.end153
  %106 = load %struct.option*, %struct.option** %longopts.addr, align 8, !dbg !4021
  store %struct.option* %106, %struct.option** %p, align 8, !dbg !4023
  store i32 0, i32* %option_index, align 4, !dbg !4024
  br label %for.cond155, !dbg !4025

for.cond155:                                      ; preds = %for.inc195, %for.end
  %107 = load %struct.option*, %struct.option** %p, align 8, !dbg !4026
  %name = getelementptr inbounds %struct.option, %struct.option* %107, i32 0, i32 0, !dbg !4028, !ctir !25
  %108 = load i8*, i8** %name, align 8, !dbg !4028, !ctir !29
  %tobool156 = icmp ne i8* %108, null, !dbg !4029
  br i1 %tobool156, label %for.body157, label %for.end198, !dbg !4029

for.body157:                                      ; preds = %for.cond155
  %109 = load %struct.option*, %struct.option** %p, align 8, !dbg !4030
  %name158 = getelementptr inbounds %struct.option, %struct.option* %109, i32 0, i32 0, !dbg !4032, !ctir !25
  %110 = load i8*, i8** %name158, align 8, !dbg !4032, !ctir !29
  %111 = load i8*, i8** @nextchar, align 8, !dbg !4033
  %112 = load i8*, i8** %nameend, align 8, !dbg !4034
  %113 = load i8*, i8** @nextchar, align 8, !dbg !4035
  %sub.ptr.lhs.cast = ptrtoint i8* %112 to i64, !dbg !4036
  %sub.ptr.rhs.cast = ptrtoint i8* %113 to i64, !dbg !4036
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4036
  %call159 = call i32 @strncmp(i8* %110, i8* %111, i64 %sub.ptr.sub) #9, !dbg !4037
  %tobool160 = icmp ne i32 %call159, 0, !dbg !4037
  br i1 %tobool160, label %if.end194, label %if.then161, !dbg !4038

if.then161:                                       ; preds = %for.body157
  %114 = load i8*, i8** %nameend, align 8, !dbg !4039
  %115 = load i8*, i8** @nextchar, align 8, !dbg !4042
  %sub.ptr.lhs.cast162 = ptrtoint i8* %114 to i64, !dbg !4043
  %sub.ptr.rhs.cast163 = ptrtoint i8* %115 to i64, !dbg !4043
  %sub.ptr.sub164 = sub i64 %sub.ptr.lhs.cast162, %sub.ptr.rhs.cast163, !dbg !4043
  %conv165 = trunc i64 %sub.ptr.sub164 to i32, !dbg !4044
  %116 = load %struct.option*, %struct.option** %p, align 8, !dbg !4045
  %name166 = getelementptr inbounds %struct.option, %struct.option* %116, i32 0, i32 0, !dbg !4046, !ctir !25
  %117 = load i8*, i8** %name166, align 8, !dbg !4046, !ctir !29
  %call167 = call i64 @strlen(i8* %117) #9, !dbg !4047
  %conv168 = trunc i64 %call167 to i32, !dbg !4048
  %cmp169 = icmp eq i32 %conv165, %conv168, !dbg !4049
  br i1 %cmp169, label %if.then171, label %if.else172, !dbg !4050

if.then171:                                       ; preds = %if.then161
  %118 = load %struct.option*, %struct.option** %p, align 8, !dbg !4051
  store %struct.option* %118, %struct.option** %pfound, align 8, !dbg !4053
  %119 = load i32, i32* %option_index, align 4, !dbg !4054
  store i32 %119, i32* %indfound, align 4, !dbg !4055
  store i32 1, i32* %exact, align 4, !dbg !4056
  br label %for.end198, !dbg !4057

if.else172:                                       ; preds = %if.then161
  %120 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4058
  %cmp173 = icmp eq %struct.option* %120, null, !dbg !4060
  br i1 %cmp173, label %if.then175, label %if.else176, !dbg !4061

if.then175:                                       ; preds = %if.else172
  %121 = load %struct.option*, %struct.option** %p, align 8, !dbg !4062
  store %struct.option* %121, %struct.option** %pfound, align 8, !dbg !4064
  %122 = load i32, i32* %option_index, align 4, !dbg !4065
  store i32 %122, i32* %indfound, align 4, !dbg !4066
  br label %if.end192, !dbg !4067

if.else176:                                       ; preds = %if.else172
  %123 = load i32, i32* %long_only.addr, align 4, !dbg !4068
  %tobool177 = icmp ne i32 %123, 0, !dbg !4068
  br i1 %tobool177, label %if.then190, label %lor.lhs.false178, !dbg !4070

lor.lhs.false178:                                 ; preds = %if.else176
  %124 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4071
  %has_arg = getelementptr inbounds %struct.option, %struct.option* %124, i32 0, i32 1, !dbg !4072, !ctir !25
  %125 = load i32, i32* %has_arg, align 8, !dbg !4072, !ctir !12
  %126 = load %struct.option*, %struct.option** %p, align 8, !dbg !4073
  %has_arg179 = getelementptr inbounds %struct.option, %struct.option* %126, i32 0, i32 1, !dbg !4074, !ctir !25
  %127 = load i32, i32* %has_arg179, align 8, !dbg !4074, !ctir !12
  %cmp180 = icmp ne i32 %125, %127, !dbg !4075
  br i1 %cmp180, label %if.then190, label %lor.lhs.false182, !dbg !4076

lor.lhs.false182:                                 ; preds = %lor.lhs.false178
  %128 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4077
  %flag = getelementptr inbounds %struct.option, %struct.option* %128, i32 0, i32 2, !dbg !4078, !ctir !25
  %129 = load i32*, i32** %flag, align 8, !dbg !4078, !ctir !33
  %130 = load %struct.option*, %struct.option** %p, align 8, !dbg !4079
  %flag183 = getelementptr inbounds %struct.option, %struct.option* %130, i32 0, i32 2, !dbg !4080, !ctir !25
  %131 = load i32*, i32** %flag183, align 8, !dbg !4080, !ctir !33
  %cmp184 = icmp ne i32* %129, %131, !dbg !4081
  br i1 %cmp184, label %if.then190, label %lor.lhs.false186, !dbg !4082

lor.lhs.false186:                                 ; preds = %lor.lhs.false182
  %132 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4083
  %val = getelementptr inbounds %struct.option, %struct.option* %132, i32 0, i32 3, !dbg !4084, !ctir !25
  %133 = load i32, i32* %val, align 8, !dbg !4084, !ctir !12
  %134 = load %struct.option*, %struct.option** %p, align 8, !dbg !4085
  %val187 = getelementptr inbounds %struct.option, %struct.option* %134, i32 0, i32 3, !dbg !4086, !ctir !25
  %135 = load i32, i32* %val187, align 8, !dbg !4086, !ctir !12
  %cmp188 = icmp ne i32 %133, %135, !dbg !4087
  br i1 %cmp188, label %if.then190, label %if.end191, !dbg !4088

if.then190:                                       ; preds = %lor.lhs.false186, %lor.lhs.false182, %lor.lhs.false178, %if.else176
  store i32 1, i32* %ambig, align 4, !dbg !4089
  br label %if.end191, !dbg !4090

if.end191:                                        ; preds = %if.then190, %lor.lhs.false186
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.then175
  br label %if.end193

if.end193:                                        ; preds = %if.end192
  br label %if.end194, !dbg !4091

if.end194:                                        ; preds = %if.end193, %for.body157
  br label %for.inc195, !dbg !4092

for.inc195:                                       ; preds = %if.end194
  %136 = load %struct.option*, %struct.option** %p, align 8, !dbg !4093
  %incdec.ptr196 = getelementptr inbounds %struct.option, %struct.option* %136, i32 1, !dbg !4093, !ctir !25
  store %struct.option* %incdec.ptr196, %struct.option** %p, align 8, !dbg !4093
  %137 = load i32, i32* %option_index, align 4, !dbg !4094
  %inc197 = add nsw i32 %137, 1, !dbg !4094
  store i32 %inc197, i32* %option_index, align 4, !dbg !4094
  br label %for.cond155, !dbg !4095, !llvm.loop !4096

for.end198:                                       ; preds = %if.then171, %for.cond155
  %138 = load i32, i32* %ambig, align 4, !dbg !4098
  %tobool199 = icmp ne i32 %138, 0, !dbg !4098
  br i1 %tobool199, label %land.lhs.true200, label %if.end213, !dbg !4100

land.lhs.true200:                                 ; preds = %for.end198
  %139 = load i32, i32* %exact, align 4, !dbg !4101
  %tobool201 = icmp ne i32 %139, 0, !dbg !4101
  br i1 %tobool201, label %if.end213, label %if.then202, !dbg !4102

if.then202:                                       ; preds = %land.lhs.true200
  %140 = load i32, i32* %print_errors, align 4, !dbg !4103
  %tobool203 = icmp ne i32 %140, 0, !dbg !4103
  br i1 %tobool203, label %if.then204, label %if.end209, !dbg !4106

if.then204:                                       ; preds = %if.then202
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4107
  %142 = load i8**, i8*** %argv.addr, align 8, !dbg !4108
  %arrayidx205 = getelementptr inbounds i8*, i8** %142, i64 0, !dbg !4108, !ctir !167
  %143 = load i8*, i8** %arrayidx205, align 8, !dbg !4108
  %144 = load i8**, i8*** %argv.addr, align 8, !dbg !4109
  %145 = load i32, i32* @optind, align 4, !dbg !4110
  %idxprom206 = sext i32 %145 to i64, !dbg !4109
  %arrayidx207 = getelementptr inbounds i8*, i8** %144, i64 %idxprom206, !dbg !4109, !ctir !167
  %146 = load i8*, i8** %arrayidx207, align 8, !dbg !4109
  %call208 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i8* %143, i8* %146), !dbg !4111
  br label %if.end209, !dbg !4111

if.end209:                                        ; preds = %if.then204, %if.then202
  %147 = load i8*, i8** @nextchar, align 8, !dbg !4112
  %call210 = call i64 @strlen(i8* %147) #9, !dbg !4113
  %148 = load i8*, i8** @nextchar, align 8, !dbg !4114
  %add.ptr211 = getelementptr inbounds i8, i8* %148, i64 %call210, !dbg !4114, !ctir !20
  store i8* %add.ptr211, i8** @nextchar, align 8, !dbg !4114
  %149 = load i32, i32* @optind, align 4, !dbg !4115
  %inc212 = add nsw i32 %149, 1, !dbg !4115
  store i32 %inc212, i32* @optind, align 4, !dbg !4115
  store i32 0, i32* @optopt, align 4, !dbg !4116
  store i32 63, i32* %retval, align 4, !dbg !4117
  br label %return, !dbg !4117

if.end213:                                        ; preds = %land.lhs.true200, %for.end198
  %150 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4118
  %cmp214 = icmp ne %struct.option* %150, null, !dbg !4120
  br i1 %cmp214, label %if.then216, label %if.end295, !dbg !4121

if.then216:                                       ; preds = %if.end213
  %151 = load i32, i32* %indfound, align 4, !dbg !4122
  store i32 %151, i32* %option_index, align 4, !dbg !4124
  %152 = load i32, i32* @optind, align 4, !dbg !4125
  %inc217 = add nsw i32 %152, 1, !dbg !4125
  store i32 %inc217, i32* @optind, align 4, !dbg !4125
  %153 = load i8*, i8** %nameend, align 8, !dbg !4126
  %154 = load i8, i8* %153, align 1, !dbg !4128, !ctir !20
  %tobool218 = icmp ne i8 %154, 0, !dbg !4128
  br i1 %tobool218, label %if.then219, label %if.else252, !dbg !4129

if.then219:                                       ; preds = %if.then216
  %155 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4130
  %has_arg220 = getelementptr inbounds %struct.option, %struct.option* %155, i32 0, i32 1, !dbg !4133, !ctir !25
  %156 = load i32, i32* %has_arg220, align 8, !dbg !4133, !ctir !12
  %tobool221 = icmp ne i32 %156, 0, !dbg !4130
  br i1 %tobool221, label %if.then222, label %if.else224, !dbg !4134

if.then222:                                       ; preds = %if.then219
  %157 = load i8*, i8** %nameend, align 8, !dbg !4135
  %add.ptr223 = getelementptr inbounds i8, i8* %157, i64 1, !dbg !4136, !ctir !20
  store i8* %add.ptr223, i8** @optarg, align 8, !dbg !4137
  br label %if.end251, !dbg !4138

if.else224:                                       ; preds = %if.then219
  %158 = load i32, i32* %print_errors, align 4, !dbg !4139
  %tobool225 = icmp ne i32 %158, 0, !dbg !4139
  br i1 %tobool225, label %if.then226, label %if.end247, !dbg !4142

if.then226:                                       ; preds = %if.else224
  %159 = load i8**, i8*** %argv.addr, align 8, !dbg !4143
  %160 = load i32, i32* @optind, align 4, !dbg !4146
  %sub = sub nsw i32 %160, 1, !dbg !4147
  %idxprom227 = sext i32 %sub to i64, !dbg !4143
  %arrayidx228 = getelementptr inbounds i8*, i8** %159, i64 %idxprom227, !dbg !4143, !ctir !167
  %161 = load i8*, i8** %arrayidx228, align 8, !dbg !4143
  %arrayidx229 = getelementptr inbounds i8, i8* %161, i64 1, !dbg !4143, !ctir !19
  %162 = load i8, i8* %arrayidx229, align 1, !dbg !4143
  %conv230 = sext i8 %162 to i32, !dbg !4143
  %cmp231 = icmp eq i32 %conv230, 45, !dbg !4148
  br i1 %cmp231, label %if.then233, label %if.else237, !dbg !4149

if.then233:                                       ; preds = %if.then226
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4150
  %164 = load i8**, i8*** %argv.addr, align 8, !dbg !4151
  %arrayidx234 = getelementptr inbounds i8*, i8** %164, i64 0, !dbg !4151, !ctir !167
  %165 = load i8*, i8** %arrayidx234, align 8, !dbg !4151
  %166 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4152
  %name235 = getelementptr inbounds %struct.option, %struct.option* %166, i32 0, i32 0, !dbg !4153, !ctir !25
  %167 = load i8*, i8** %name235, align 8, !dbg !4153, !ctir !29
  %call236 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %163, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i8* %165, i8* %167), !dbg !4154
  br label %if.end246, !dbg !4154

if.else237:                                       ; preds = %if.then226
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4155
  %169 = load i8**, i8*** %argv.addr, align 8, !dbg !4156
  %arrayidx238 = getelementptr inbounds i8*, i8** %169, i64 0, !dbg !4156, !ctir !167
  %170 = load i8*, i8** %arrayidx238, align 8, !dbg !4156
  %171 = load i8**, i8*** %argv.addr, align 8, !dbg !4157
  %172 = load i32, i32* @optind, align 4, !dbg !4158
  %sub239 = sub nsw i32 %172, 1, !dbg !4159
  %idxprom240 = sext i32 %sub239 to i64, !dbg !4157
  %arrayidx241 = getelementptr inbounds i8*, i8** %171, i64 %idxprom240, !dbg !4157, !ctir !167
  %173 = load i8*, i8** %arrayidx241, align 8, !dbg !4157
  %arrayidx242 = getelementptr inbounds i8, i8* %173, i64 0, !dbg !4157, !ctir !19
  %174 = load i8, i8* %arrayidx242, align 1, !dbg !4157
  %conv243 = sext i8 %174 to i32, !dbg !4157
  %175 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4160
  %name244 = getelementptr inbounds %struct.option, %struct.option* %175, i32 0, i32 0, !dbg !4161, !ctir !25
  %176 = load i8*, i8** %name244, align 8, !dbg !4161, !ctir !29
  %call245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %168, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i8* %170, i32 %conv243, i8* %176), !dbg !4162
  br label %if.end246

if.end246:                                        ; preds = %if.else237, %if.then233
  br label %if.end247, !dbg !4163

if.end247:                                        ; preds = %if.end246, %if.else224
  %177 = load i8*, i8** @nextchar, align 8, !dbg !4164
  %call248 = call i64 @strlen(i8* %177) #9, !dbg !4165
  %178 = load i8*, i8** @nextchar, align 8, !dbg !4166
  %add.ptr249 = getelementptr inbounds i8, i8* %178, i64 %call248, !dbg !4166, !ctir !20
  store i8* %add.ptr249, i8** @nextchar, align 8, !dbg !4166
  %179 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4167
  %val250 = getelementptr inbounds %struct.option, %struct.option* %179, i32 0, i32 3, !dbg !4168, !ctir !25
  %180 = load i32, i32* %val250, align 8, !dbg !4168, !ctir !12
  store i32 %180, i32* @optopt, align 4, !dbg !4169
  store i32 63, i32* %retval, align 4, !dbg !4170
  br label %return, !dbg !4170

if.end251:                                        ; preds = %if.then222
  br label %if.end281, !dbg !4171

if.else252:                                       ; preds = %if.then216
  %181 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4172
  %has_arg253 = getelementptr inbounds %struct.option, %struct.option* %181, i32 0, i32 1, !dbg !4174, !ctir !25
  %182 = load i32, i32* %has_arg253, align 8, !dbg !4174, !ctir !12
  %cmp254 = icmp eq i32 %182, 1, !dbg !4175
  br i1 %cmp254, label %if.then256, label %if.end280, !dbg !4176

if.then256:                                       ; preds = %if.else252
  %183 = load i32, i32* @optind, align 4, !dbg !4177
  %184 = load i32, i32* %argc.addr, align 4, !dbg !4180
  %cmp257 = icmp slt i32 %183, %184, !dbg !4181
  br i1 %cmp257, label %if.then259, label %if.else263, !dbg !4182

if.then259:                                       ; preds = %if.then256
  %185 = load i8**, i8*** %argv.addr, align 8, !dbg !4183
  %186 = load i32, i32* @optind, align 4, !dbg !4184
  %inc260 = add nsw i32 %186, 1, !dbg !4184
  store i32 %inc260, i32* @optind, align 4, !dbg !4184
  %idxprom261 = sext i32 %186 to i64, !dbg !4183
  %arrayidx262 = getelementptr inbounds i8*, i8** %185, i64 %idxprom261, !dbg !4183, !ctir !167
  %187 = load i8*, i8** %arrayidx262, align 8, !dbg !4183
  store i8* %187, i8** @optarg, align 8, !dbg !4185
  br label %if.end279, !dbg !4186

if.else263:                                       ; preds = %if.then256
  %188 = load i32, i32* %print_errors, align 4, !dbg !4187
  %tobool264 = icmp ne i32 %188, 0, !dbg !4187
  br i1 %tobool264, label %if.then265, label %if.end271, !dbg !4190

if.then265:                                       ; preds = %if.else263
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4191
  %190 = load i8**, i8*** %argv.addr, align 8, !dbg !4192
  %arrayidx266 = getelementptr inbounds i8*, i8** %190, i64 0, !dbg !4192, !ctir !167
  %191 = load i8*, i8** %arrayidx266, align 8, !dbg !4192
  %192 = load i8**, i8*** %argv.addr, align 8, !dbg !4193
  %193 = load i32, i32* @optind, align 4, !dbg !4194
  %sub267 = sub nsw i32 %193, 1, !dbg !4195
  %idxprom268 = sext i32 %sub267 to i64, !dbg !4193
  %arrayidx269 = getelementptr inbounds i8*, i8** %192, i64 %idxprom268, !dbg !4193, !ctir !167
  %194 = load i8*, i8** %arrayidx269, align 8, !dbg !4193
  %call270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %189, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i8* %191, i8* %194), !dbg !4196
  br label %if.end271, !dbg !4196

if.end271:                                        ; preds = %if.then265, %if.else263
  %195 = load i8*, i8** @nextchar, align 8, !dbg !4197
  %call272 = call i64 @strlen(i8* %195) #9, !dbg !4198
  %196 = load i8*, i8** @nextchar, align 8, !dbg !4199
  %add.ptr273 = getelementptr inbounds i8, i8* %196, i64 %call272, !dbg !4199, !ctir !20
  store i8* %add.ptr273, i8** @nextchar, align 8, !dbg !4199
  %197 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4200
  %val274 = getelementptr inbounds %struct.option, %struct.option* %197, i32 0, i32 3, !dbg !4201, !ctir !25
  %198 = load i32, i32* %val274, align 8, !dbg !4201, !ctir !12
  store i32 %198, i32* @optopt, align 4, !dbg !4202
  %199 = load i8*, i8** %optstring.addr, align 8, !dbg !4203
  %arrayidx275 = getelementptr inbounds i8, i8* %199, i64 0, !dbg !4203, !ctir !29
  %200 = load i8, i8* %arrayidx275, align 1, !dbg !4203
  %conv276 = sext i8 %200 to i32, !dbg !4203
  %cmp277 = icmp eq i32 %conv276, 58, !dbg !4204
  %201 = zext i1 %cmp277 to i64, !dbg !4203
  %cond = select i1 %cmp277, i32 58, i32 63, !dbg !4203
  store i32 %cond, i32* %retval, align 4, !dbg !4205
  br label %return, !dbg !4205

if.end279:                                        ; preds = %if.then259
  br label %if.end280, !dbg !4206

if.end280:                                        ; preds = %if.end279, %if.else252
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %if.end251
  %202 = load i8*, i8** @nextchar, align 8, !dbg !4207
  %call282 = call i64 @strlen(i8* %202) #9, !dbg !4208
  %203 = load i8*, i8** @nextchar, align 8, !dbg !4209
  %add.ptr283 = getelementptr inbounds i8, i8* %203, i64 %call282, !dbg !4209, !ctir !20
  store i8* %add.ptr283, i8** @nextchar, align 8, !dbg !4209
  %204 = load i32*, i32** %longind.addr, align 8, !dbg !4210
  %cmp284 = icmp ne i32* %204, null, !dbg !4212
  br i1 %cmp284, label %if.then286, label %if.end287, !dbg !4213

if.then286:                                       ; preds = %if.end281
  %205 = load i32, i32* %option_index, align 4, !dbg !4214
  %206 = load i32*, i32** %longind.addr, align 8, !dbg !4215
  store i32 %205, i32* %206, align 4, !dbg !4216, !ctir !12
  br label %if.end287, !dbg !4217

if.end287:                                        ; preds = %if.then286, %if.end281
  %207 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4218
  %flag288 = getelementptr inbounds %struct.option, %struct.option* %207, i32 0, i32 2, !dbg !4220, !ctir !25
  %208 = load i32*, i32** %flag288, align 8, !dbg !4220, !ctir !33
  %tobool289 = icmp ne i32* %208, null, !dbg !4218
  br i1 %tobool289, label %if.then290, label %if.end293, !dbg !4221

if.then290:                                       ; preds = %if.end287
  %209 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4222
  %val291 = getelementptr inbounds %struct.option, %struct.option* %209, i32 0, i32 3, !dbg !4224, !ctir !25
  %210 = load i32, i32* %val291, align 8, !dbg !4224, !ctir !12
  %211 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4225
  %flag292 = getelementptr inbounds %struct.option, %struct.option* %211, i32 0, i32 2, !dbg !4226, !ctir !25
  %212 = load i32*, i32** %flag292, align 8, !dbg !4226, !ctir !33
  store i32 %210, i32* %212, align 4, !dbg !4227, !ctir !12
  store i32 0, i32* %retval, align 4, !dbg !4228
  br label %return, !dbg !4228

if.end293:                                        ; preds = %if.end287
  %213 = load %struct.option*, %struct.option** %pfound, align 8, !dbg !4229
  %val294 = getelementptr inbounds %struct.option, %struct.option* %213, i32 0, i32 3, !dbg !4230, !ctir !25
  %214 = load i32, i32* %val294, align 8, !dbg !4230, !ctir !12
  store i32 %214, i32* %retval, align 4, !dbg !4231
  br label %return, !dbg !4231

if.end295:                                        ; preds = %if.end213
  %215 = load i32, i32* %long_only.addr, align 4, !dbg !4232
  %tobool296 = icmp ne i32 %215, 0, !dbg !4232
  br i1 %tobool296, label %lor.lhs.false297, label %if.then309, !dbg !4234

lor.lhs.false297:                                 ; preds = %if.end295
  %216 = load i8**, i8*** %argv.addr, align 8, !dbg !4235
  %217 = load i32, i32* @optind, align 4, !dbg !4236
  %idxprom298 = sext i32 %217 to i64, !dbg !4235
  %arrayidx299 = getelementptr inbounds i8*, i8** %216, i64 %idxprom298, !dbg !4235, !ctir !167
  %218 = load i8*, i8** %arrayidx299, align 8, !dbg !4235
  %arrayidx300 = getelementptr inbounds i8, i8* %218, i64 1, !dbg !4235, !ctir !19
  %219 = load i8, i8* %arrayidx300, align 1, !dbg !4235
  %conv301 = sext i8 %219 to i32, !dbg !4235
  %cmp302 = icmp eq i32 %conv301, 45, !dbg !4237
  br i1 %cmp302, label %if.then309, label %lor.lhs.false304, !dbg !4238

lor.lhs.false304:                                 ; preds = %lor.lhs.false297
  %220 = load i8*, i8** %optstring.addr, align 8, !dbg !4239
  %221 = load i8*, i8** @nextchar, align 8, !dbg !4240
  %222 = load i8, i8* %221, align 1, !dbg !4241, !ctir !20
  %conv305 = sext i8 %222 to i32, !dbg !4241
  %call306 = call i8* @my_index(i8* %220, i32 %conv305), !dbg !4242
  %cmp307 = icmp eq i8* %call306, null, !dbg !4243
  br i1 %cmp307, label %if.then309, label %if.end331, !dbg !4244

if.then309:                                       ; preds = %lor.lhs.false304, %lor.lhs.false297, %if.end295
  %223 = load i32, i32* %print_errors, align 4, !dbg !4245
  %tobool310 = icmp ne i32 %223, 0, !dbg !4245
  br i1 %tobool310, label %if.then311, label %if.end329, !dbg !4248

if.then311:                                       ; preds = %if.then309
  %224 = load i8**, i8*** %argv.addr, align 8, !dbg !4249
  %225 = load i32, i32* @optind, align 4, !dbg !4252
  %idxprom312 = sext i32 %225 to i64, !dbg !4249
  %arrayidx313 = getelementptr inbounds i8*, i8** %224, i64 %idxprom312, !dbg !4249, !ctir !167
  %226 = load i8*, i8** %arrayidx313, align 8, !dbg !4249
  %arrayidx314 = getelementptr inbounds i8, i8* %226, i64 1, !dbg !4249, !ctir !19
  %227 = load i8, i8* %arrayidx314, align 1, !dbg !4249
  %conv315 = sext i8 %227 to i32, !dbg !4249
  %cmp316 = icmp eq i32 %conv315, 45, !dbg !4253
  br i1 %cmp316, label %if.then318, label %if.else321, !dbg !4254

if.then318:                                       ; preds = %if.then311
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4255
  %229 = load i8**, i8*** %argv.addr, align 8, !dbg !4256
  %arrayidx319 = getelementptr inbounds i8*, i8** %229, i64 0, !dbg !4256, !ctir !167
  %230 = load i8*, i8** %arrayidx319, align 8, !dbg !4256
  %231 = load i8*, i8** @nextchar, align 8, !dbg !4257
  %call320 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %228, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i8* %230, i8* %231), !dbg !4258
  br label %if.end328, !dbg !4258

if.else321:                                       ; preds = %if.then311
  %232 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4259
  %233 = load i8**, i8*** %argv.addr, align 8, !dbg !4260
  %arrayidx322 = getelementptr inbounds i8*, i8** %233, i64 0, !dbg !4260, !ctir !167
  %234 = load i8*, i8** %arrayidx322, align 8, !dbg !4260
  %235 = load i8**, i8*** %argv.addr, align 8, !dbg !4261
  %236 = load i32, i32* @optind, align 4, !dbg !4262
  %idxprom323 = sext i32 %236 to i64, !dbg !4261
  %arrayidx324 = getelementptr inbounds i8*, i8** %235, i64 %idxprom323, !dbg !4261, !ctir !167
  %237 = load i8*, i8** %arrayidx324, align 8, !dbg !4261
  %arrayidx325 = getelementptr inbounds i8, i8* %237, i64 0, !dbg !4261, !ctir !19
  %238 = load i8, i8* %arrayidx325, align 1, !dbg !4261
  %conv326 = sext i8 %238 to i32, !dbg !4261
  %239 = load i8*, i8** @nextchar, align 8, !dbg !4263
  %call327 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %232, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i64 0, i64 0), i8* %234, i32 %conv326, i8* %239), !dbg !4264
  br label %if.end328

if.end328:                                        ; preds = %if.else321, %if.then318
  br label %if.end329, !dbg !4265

if.end329:                                        ; preds = %if.end328, %if.then309
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), i8** @nextchar, align 8, !dbg !4266
  %240 = load i32, i32* @optind, align 4, !dbg !4267
  %inc330 = add nsw i32 %240, 1, !dbg !4267
  store i32 %inc330, i32* @optind, align 4, !dbg !4267
  store i32 0, i32* @optopt, align 4, !dbg !4268
  store i32 63, i32* %retval, align 4, !dbg !4269
  br label %return, !dbg !4269

if.end331:                                        ; preds = %lor.lhs.false304
  br label %if.end332, !dbg !4270

if.end332:                                        ; preds = %if.end331, %lor.lhs.false139, %lor.lhs.false131, %if.end121
  call void @llvm.dbg.declare(metadata i8* %c, metadata !4271, metadata !DIExpression()), !dbg !4273
  %241 = load i8*, i8** @nextchar, align 8, !dbg !4274
  %incdec.ptr333 = getelementptr inbounds i8, i8* %241, i32 1, !dbg !4274, !ctir !20
  store i8* %incdec.ptr333, i8** @nextchar, align 8, !dbg !4274
  %242 = load i8, i8* %241, align 1, !dbg !4275, !ctir !20
  store i8 %242, i8* %c, align 1, !dbg !4273
  call void @llvm.dbg.declare(metadata i8** %temp, metadata !4276, metadata !DIExpression()), !dbg !4277
  %243 = load i8*, i8** %optstring.addr, align 8, !dbg !4278
  %244 = load i8, i8* %c, align 1, !dbg !4279
  %conv334 = sext i8 %244 to i32, !dbg !4279
  %call335 = call i8* @my_index(i8* %243, i32 %conv334), !dbg !4280
  store i8* %call335, i8** %temp, align 8, !dbg !4277
  %245 = load i8*, i8** @nextchar, align 8, !dbg !4281
  %246 = load i8, i8* %245, align 1, !dbg !4283, !ctir !20
  %conv336 = sext i8 %246 to i32, !dbg !4283
  %cmp337 = icmp eq i32 %conv336, 0, !dbg !4284
  br i1 %cmp337, label %if.then339, label %if.end341, !dbg !4285

if.then339:                                       ; preds = %if.end332
  %247 = load i32, i32* @optind, align 4, !dbg !4286
  %inc340 = add nsw i32 %247, 1, !dbg !4286
  store i32 %inc340, i32* @optind, align 4, !dbg !4286
  br label %if.end341, !dbg !4286

if.end341:                                        ; preds = %if.then339, %if.end332
  %248 = load i8*, i8** %temp, align 8, !dbg !4287
  %cmp342 = icmp eq i8* %248, null, !dbg !4289
  br i1 %cmp342, label %if.then348, label %lor.lhs.false344, !dbg !4290

lor.lhs.false344:                                 ; preds = %if.end341
  %249 = load i8, i8* %c, align 1, !dbg !4291
  %conv345 = sext i8 %249 to i32, !dbg !4291
  %cmp346 = icmp eq i32 %conv345, 58, !dbg !4292
  br i1 %cmp346, label %if.then348, label %if.end363, !dbg !4293

if.then348:                                       ; preds = %lor.lhs.false344, %if.end341
  %250 = load i32, i32* %print_errors, align 4, !dbg !4294
  %tobool349 = icmp ne i32 %250, 0, !dbg !4294
  br i1 %tobool349, label %if.then350, label %if.end361, !dbg !4297

if.then350:                                       ; preds = %if.then348
  %251 = load i8*, i8** @posixly_correct, align 8, !dbg !4298
  %tobool351 = icmp ne i8* %251, null, !dbg !4298
  br i1 %tobool351, label %if.then352, label %if.else356, !dbg !4301

if.then352:                                       ; preds = %if.then350
  %252 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4302
  %253 = load i8**, i8*** %argv.addr, align 8, !dbg !4303
  %arrayidx353 = getelementptr inbounds i8*, i8** %253, i64 0, !dbg !4303, !ctir !167
  %254 = load i8*, i8** %arrayidx353, align 8, !dbg !4303
  %255 = load i8, i8* %c, align 1, !dbg !4304
  %conv354 = sext i8 %255 to i32, !dbg !4304
  %call355 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %252, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %254, i32 %conv354), !dbg !4305
  br label %if.end360, !dbg !4305

if.else356:                                       ; preds = %if.then350
  %256 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4306
  %257 = load i8**, i8*** %argv.addr, align 8, !dbg !4307
  %arrayidx357 = getelementptr inbounds i8*, i8** %257, i64 0, !dbg !4307, !ctir !167
  %258 = load i8*, i8** %arrayidx357, align 8, !dbg !4307
  %259 = load i8, i8* %c, align 1, !dbg !4308
  %conv358 = sext i8 %259 to i32, !dbg !4308
  %call359 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %256, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8* %258, i32 %conv358), !dbg !4309
  br label %if.end360

if.end360:                                        ; preds = %if.else356, %if.then352
  br label %if.end361, !dbg !4310

if.end361:                                        ; preds = %if.end360, %if.then348
  %260 = load i8, i8* %c, align 1, !dbg !4311
  %conv362 = sext i8 %260 to i32, !dbg !4311
  store i32 %conv362, i32* @optopt, align 4, !dbg !4312
  store i32 63, i32* %retval, align 4, !dbg !4313
  br label %return, !dbg !4313

if.end363:                                        ; preds = %lor.lhs.false344
  %261 = load i8*, i8** %temp, align 8, !dbg !4314
  %arrayidx364 = getelementptr inbounds i8, i8* %261, i64 0, !dbg !4314, !ctir !19
  %262 = load i8, i8* %arrayidx364, align 1, !dbg !4314
  %conv365 = sext i8 %262 to i32, !dbg !4314
  %cmp366 = icmp eq i32 %conv365, 87, !dbg !4316
  br i1 %cmp366, label %land.lhs.true368, label %if.end535, !dbg !4317

land.lhs.true368:                                 ; preds = %if.end363
  %263 = load i8*, i8** %temp, align 8, !dbg !4318
  %arrayidx369 = getelementptr inbounds i8, i8* %263, i64 1, !dbg !4318, !ctir !19
  %264 = load i8, i8* %arrayidx369, align 1, !dbg !4318
  %conv370 = sext i8 %264 to i32, !dbg !4318
  %cmp371 = icmp eq i32 %conv370, 59, !dbg !4319
  br i1 %cmp371, label %if.then373, label %if.end535, !dbg !4320

if.then373:                                       ; preds = %land.lhs.true368
  call void @llvm.dbg.declare(metadata i8** %nameend374, metadata !4321, metadata !DIExpression()), !dbg !4323
  call void @llvm.dbg.declare(metadata %struct.option** %p375, metadata !4324, metadata !DIExpression()), !dbg !4325
  call void @llvm.dbg.declare(metadata %struct.option** %pfound376, metadata !4326, metadata !DIExpression()), !dbg !4327
  store %struct.option* null, %struct.option** %pfound376, align 8, !dbg !4327
  call void @llvm.dbg.declare(metadata i32* %exact377, metadata !4328, metadata !DIExpression()), !dbg !4329
  store i32 0, i32* %exact377, align 4, !dbg !4329
  call void @llvm.dbg.declare(metadata i32* %ambig378, metadata !4330, metadata !DIExpression()), !dbg !4331
  store i32 0, i32* %ambig378, align 4, !dbg !4331
  call void @llvm.dbg.declare(metadata i32* %indfound379, metadata !4332, metadata !DIExpression()), !dbg !4333
  store i32 0, i32* %indfound379, align 4, !dbg !4333
  call void @llvm.dbg.declare(metadata i32* %option_index380, metadata !4334, metadata !DIExpression()), !dbg !4335
  %265 = load i8*, i8** @nextchar, align 8, !dbg !4336
  %266 = load i8, i8* %265, align 1, !dbg !4338, !ctir !20
  %conv381 = sext i8 %266 to i32, !dbg !4338
  %cmp382 = icmp ne i32 %conv381, 0, !dbg !4339
  br i1 %cmp382, label %if.then384, label %if.else386, !dbg !4340

if.then384:                                       ; preds = %if.then373
  %267 = load i8*, i8** @nextchar, align 8, !dbg !4341
  store i8* %267, i8** @optarg, align 8, !dbg !4343
  %268 = load i32, i32* @optind, align 4, !dbg !4344
  %inc385 = add nsw i32 %268, 1, !dbg !4344
  store i32 %inc385, i32* @optind, align 4, !dbg !4344
  br label %if.end410, !dbg !4345

if.else386:                                       ; preds = %if.then373
  %269 = load i32, i32* @optind, align 4, !dbg !4346
  %270 = load i32, i32* %argc.addr, align 4, !dbg !4348
  %cmp387 = icmp eq i32 %269, %270, !dbg !4349
  br i1 %cmp387, label %if.then389, label %if.else405, !dbg !4350

if.then389:                                       ; preds = %if.else386
  %271 = load i32, i32* %print_errors, align 4, !dbg !4351
  %tobool390 = icmp ne i32 %271, 0, !dbg !4351
  br i1 %tobool390, label %if.then391, label %if.end395, !dbg !4354

if.then391:                                       ; preds = %if.then389
  %272 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4355
  %273 = load i8**, i8*** %argv.addr, align 8, !dbg !4357
  %arrayidx392 = getelementptr inbounds i8*, i8** %273, i64 0, !dbg !4357, !ctir !167
  %274 = load i8*, i8** %arrayidx392, align 8, !dbg !4357
  %275 = load i8, i8* %c, align 1, !dbg !4358
  %conv393 = sext i8 %275 to i32, !dbg !4358
  %call394 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %272, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.11, i64 0, i64 0), i8* %274, i32 %conv393), !dbg !4359
  br label %if.end395, !dbg !4360

if.end395:                                        ; preds = %if.then391, %if.then389
  %276 = load i8, i8* %c, align 1, !dbg !4361
  %conv396 = sext i8 %276 to i32, !dbg !4361
  store i32 %conv396, i32* @optopt, align 4, !dbg !4362
  %277 = load i8*, i8** %optstring.addr, align 8, !dbg !4363
  %arrayidx397 = getelementptr inbounds i8, i8* %277, i64 0, !dbg !4363, !ctir !29
  %278 = load i8, i8* %arrayidx397, align 1, !dbg !4363
  %conv398 = sext i8 %278 to i32, !dbg !4363
  %cmp399 = icmp eq i32 %conv398, 58, !dbg !4365
  br i1 %cmp399, label %if.then401, label %if.else402, !dbg !4366

if.then401:                                       ; preds = %if.end395
  store i8 58, i8* %c, align 1, !dbg !4367
  br label %if.end403, !dbg !4368

if.else402:                                       ; preds = %if.end395
  store i8 63, i8* %c, align 1, !dbg !4369
  br label %if.end403

if.end403:                                        ; preds = %if.else402, %if.then401
  %279 = load i8, i8* %c, align 1, !dbg !4370
  %conv404 = sext i8 %279 to i32, !dbg !4370
  store i32 %conv404, i32* %retval, align 4, !dbg !4371
  br label %return, !dbg !4371

if.else405:                                       ; preds = %if.else386
  %280 = load i8**, i8*** %argv.addr, align 8, !dbg !4372
  %281 = load i32, i32* @optind, align 4, !dbg !4373
  %inc406 = add nsw i32 %281, 1, !dbg !4373
  store i32 %inc406, i32* @optind, align 4, !dbg !4373
  %idxprom407 = sext i32 %281 to i64, !dbg !4372
  %arrayidx408 = getelementptr inbounds i8*, i8** %280, i64 %idxprom407, !dbg !4372, !ctir !167
  %282 = load i8*, i8** %arrayidx408, align 8, !dbg !4372
  store i8* %282, i8** @optarg, align 8, !dbg !4374
  br label %if.end409

if.end409:                                        ; preds = %if.else405
  br label %if.end410

if.end410:                                        ; preds = %if.end409, %if.then384
  %283 = load i8*, i8** @optarg, align 8, !dbg !4375
  store i8* %283, i8** %nameend374, align 8, !dbg !4377
  store i8* %283, i8** @nextchar, align 8, !dbg !4378
  br label %for.cond411, !dbg !4379

for.cond411:                                      ; preds = %for.inc421, %if.end410
  %284 = load i8*, i8** %nameend374, align 8, !dbg !4380
  %285 = load i8, i8* %284, align 1, !dbg !4382, !ctir !20
  %conv412 = sext i8 %285 to i32, !dbg !4382
  %tobool413 = icmp ne i32 %conv412, 0, !dbg !4382
  br i1 %tobool413, label %land.rhs414, label %land.end418, !dbg !4383

land.rhs414:                                      ; preds = %for.cond411
  %286 = load i8*, i8** %nameend374, align 8, !dbg !4384
  %287 = load i8, i8* %286, align 1, !dbg !4385, !ctir !20
  %conv415 = sext i8 %287 to i32, !dbg !4385
  %cmp416 = icmp ne i32 %conv415, 61, !dbg !4386
  br label %land.end418

land.end418:                                      ; preds = %land.rhs414, %for.cond411
  %288 = phi i1 [ false, %for.cond411 ], [ %cmp416, %land.rhs414 ], !dbg !4387
  br i1 %288, label %for.body420, label %for.end423, !dbg !4388

for.body420:                                      ; preds = %land.end418
  br label %for.inc421, !dbg !4388

for.inc421:                                       ; preds = %for.body420
  %289 = load i8*, i8** %nameend374, align 8, !dbg !4389
  %incdec.ptr422 = getelementptr inbounds i8, i8* %289, i32 1, !dbg !4389, !ctir !20
  store i8* %incdec.ptr422, i8** %nameend374, align 8, !dbg !4389
  br label %for.cond411, !dbg !4390, !llvm.loop !4391

for.end423:                                       ; preds = %land.end418
  %290 = load %struct.option*, %struct.option** %longopts.addr, align 8, !dbg !4393
  store %struct.option* %290, %struct.option** %p375, align 8, !dbg !4395
  store i32 0, i32* %option_index380, align 4, !dbg !4396
  br label %for.cond424, !dbg !4397

for.cond424:                                      ; preds = %for.inc453, %for.end423
  %291 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4398
  %name425 = getelementptr inbounds %struct.option, %struct.option* %291, i32 0, i32 0, !dbg !4400, !ctir !25
  %292 = load i8*, i8** %name425, align 8, !dbg !4400, !ctir !29
  %tobool426 = icmp ne i8* %292, null, !dbg !4401
  br i1 %tobool426, label %for.body427, label %for.end456, !dbg !4401

for.body427:                                      ; preds = %for.cond424
  %293 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4402
  %name428 = getelementptr inbounds %struct.option, %struct.option* %293, i32 0, i32 0, !dbg !4404, !ctir !25
  %294 = load i8*, i8** %name428, align 8, !dbg !4404, !ctir !29
  %295 = load i8*, i8** @nextchar, align 8, !dbg !4405
  %296 = load i8*, i8** %nameend374, align 8, !dbg !4406
  %297 = load i8*, i8** @nextchar, align 8, !dbg !4407
  %sub.ptr.lhs.cast429 = ptrtoint i8* %296 to i64, !dbg !4408
  %sub.ptr.rhs.cast430 = ptrtoint i8* %297 to i64, !dbg !4408
  %sub.ptr.sub431 = sub i64 %sub.ptr.lhs.cast429, %sub.ptr.rhs.cast430, !dbg !4408
  %call432 = call i32 @strncmp(i8* %294, i8* %295, i64 %sub.ptr.sub431) #9, !dbg !4409
  %tobool433 = icmp ne i32 %call432, 0, !dbg !4409
  br i1 %tobool433, label %if.end452, label %if.then434, !dbg !4410

if.then434:                                       ; preds = %for.body427
  %298 = load i8*, i8** %nameend374, align 8, !dbg !4411
  %299 = load i8*, i8** @nextchar, align 8, !dbg !4414
  %sub.ptr.lhs.cast435 = ptrtoint i8* %298 to i64, !dbg !4415
  %sub.ptr.rhs.cast436 = ptrtoint i8* %299 to i64, !dbg !4415
  %sub.ptr.sub437 = sub i64 %sub.ptr.lhs.cast435, %sub.ptr.rhs.cast436, !dbg !4415
  %conv438 = trunc i64 %sub.ptr.sub437 to i32, !dbg !4416
  %conv439 = zext i32 %conv438 to i64, !dbg !4416
  %300 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4417
  %name440 = getelementptr inbounds %struct.option, %struct.option* %300, i32 0, i32 0, !dbg !4418, !ctir !25
  %301 = load i8*, i8** %name440, align 8, !dbg !4418, !ctir !29
  %call441 = call i64 @strlen(i8* %301) #9, !dbg !4419
  %cmp442 = icmp eq i64 %conv439, %call441, !dbg !4420
  br i1 %cmp442, label %if.then444, label %if.else445, !dbg !4421

if.then444:                                       ; preds = %if.then434
  %302 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4422
  store %struct.option* %302, %struct.option** %pfound376, align 8, !dbg !4424
  %303 = load i32, i32* %option_index380, align 4, !dbg !4425
  store i32 %303, i32* %indfound379, align 4, !dbg !4426
  store i32 1, i32* %exact377, align 4, !dbg !4427
  br label %for.end456, !dbg !4428

if.else445:                                       ; preds = %if.then434
  %304 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4429
  %cmp446 = icmp eq %struct.option* %304, null, !dbg !4431
  br i1 %cmp446, label %if.then448, label %if.else449, !dbg !4432

if.then448:                                       ; preds = %if.else445
  %305 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4433
  store %struct.option* %305, %struct.option** %pfound376, align 8, !dbg !4435
  %306 = load i32, i32* %option_index380, align 4, !dbg !4436
  store i32 %306, i32* %indfound379, align 4, !dbg !4437
  br label %if.end450, !dbg !4438

if.else449:                                       ; preds = %if.else445
  store i32 1, i32* %ambig378, align 4, !dbg !4439
  br label %if.end450

if.end450:                                        ; preds = %if.else449, %if.then448
  br label %if.end451

if.end451:                                        ; preds = %if.end450
  br label %if.end452, !dbg !4440

if.end452:                                        ; preds = %if.end451, %for.body427
  br label %for.inc453, !dbg !4441

for.inc453:                                       ; preds = %if.end452
  %307 = load %struct.option*, %struct.option** %p375, align 8, !dbg !4442
  %incdec.ptr454 = getelementptr inbounds %struct.option, %struct.option* %307, i32 1, !dbg !4442, !ctir !25
  store %struct.option* %incdec.ptr454, %struct.option** %p375, align 8, !dbg !4442
  %308 = load i32, i32* %option_index380, align 4, !dbg !4443
  %inc455 = add nsw i32 %308, 1, !dbg !4443
  store i32 %inc455, i32* %option_index380, align 4, !dbg !4443
  br label %for.cond424, !dbg !4444, !llvm.loop !4445

for.end456:                                       ; preds = %if.then444, %for.cond424
  %309 = load i32, i32* %ambig378, align 4, !dbg !4447
  %tobool457 = icmp ne i32 %309, 0, !dbg !4447
  br i1 %tobool457, label %land.lhs.true458, label %if.end471, !dbg !4449

land.lhs.true458:                                 ; preds = %for.end456
  %310 = load i32, i32* %exact377, align 4, !dbg !4450
  %tobool459 = icmp ne i32 %310, 0, !dbg !4450
  br i1 %tobool459, label %if.end471, label %if.then460, !dbg !4451

if.then460:                                       ; preds = %land.lhs.true458
  %311 = load i32, i32* %print_errors, align 4, !dbg !4452
  %tobool461 = icmp ne i32 %311, 0, !dbg !4452
  br i1 %tobool461, label %if.then462, label %if.end467, !dbg !4455

if.then462:                                       ; preds = %if.then460
  %312 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4456
  %313 = load i8**, i8*** %argv.addr, align 8, !dbg !4457
  %arrayidx463 = getelementptr inbounds i8*, i8** %313, i64 0, !dbg !4457, !ctir !167
  %314 = load i8*, i8** %arrayidx463, align 8, !dbg !4457
  %315 = load i8**, i8*** %argv.addr, align 8, !dbg !4458
  %316 = load i32, i32* @optind, align 4, !dbg !4459
  %idxprom464 = sext i32 %316 to i64, !dbg !4458
  %arrayidx465 = getelementptr inbounds i8*, i8** %315, i64 %idxprom464, !dbg !4458, !ctir !167
  %317 = load i8*, i8** %arrayidx465, align 8, !dbg !4458
  %call466 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %312, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0), i8* %314, i8* %317), !dbg !4460
  br label %if.end467, !dbg !4460

if.end467:                                        ; preds = %if.then462, %if.then460
  %318 = load i8*, i8** @nextchar, align 8, !dbg !4461
  %call468 = call i64 @strlen(i8* %318) #9, !dbg !4462
  %319 = load i8*, i8** @nextchar, align 8, !dbg !4463
  %add.ptr469 = getelementptr inbounds i8, i8* %319, i64 %call468, !dbg !4463, !ctir !20
  store i8* %add.ptr469, i8** @nextchar, align 8, !dbg !4463
  %320 = load i32, i32* @optind, align 4, !dbg !4464
  %inc470 = add nsw i32 %320, 1, !dbg !4464
  store i32 %inc470, i32* @optind, align 4, !dbg !4464
  store i32 63, i32* %retval, align 4, !dbg !4465
  br label %return, !dbg !4465

if.end471:                                        ; preds = %land.lhs.true458, %for.end456
  %321 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4466
  %cmp472 = icmp ne %struct.option* %321, null, !dbg !4468
  br i1 %cmp472, label %if.then474, label %if.end534, !dbg !4469

if.then474:                                       ; preds = %if.end471
  %322 = load i32, i32* %indfound379, align 4, !dbg !4470
  store i32 %322, i32* %option_index380, align 4, !dbg !4472
  %323 = load i8*, i8** %nameend374, align 8, !dbg !4473
  %324 = load i8, i8* %323, align 1, !dbg !4475, !ctir !20
  %tobool475 = icmp ne i8 %324, 0, !dbg !4475
  br i1 %tobool475, label %if.then476, label %if.else491, !dbg !4476

if.then476:                                       ; preds = %if.then474
  %325 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4477
  %has_arg477 = getelementptr inbounds %struct.option, %struct.option* %325, i32 0, i32 1, !dbg !4480, !ctir !25
  %326 = load i32, i32* %has_arg477, align 8, !dbg !4480, !ctir !12
  %tobool478 = icmp ne i32 %326, 0, !dbg !4477
  br i1 %tobool478, label %if.then479, label %if.else481, !dbg !4481

if.then479:                                       ; preds = %if.then476
  %327 = load i8*, i8** %nameend374, align 8, !dbg !4482
  %add.ptr480 = getelementptr inbounds i8, i8* %327, i64 1, !dbg !4483, !ctir !20
  store i8* %add.ptr480, i8** @optarg, align 8, !dbg !4484
  br label %if.end490, !dbg !4485

if.else481:                                       ; preds = %if.then476
  %328 = load i32, i32* %print_errors, align 4, !dbg !4486
  %tobool482 = icmp ne i32 %328, 0, !dbg !4486
  br i1 %tobool482, label %if.then483, label %if.end487, !dbg !4489

if.then483:                                       ; preds = %if.else481
  %329 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4490
  %330 = load i8**, i8*** %argv.addr, align 8, !dbg !4491
  %arrayidx484 = getelementptr inbounds i8*, i8** %330, i64 0, !dbg !4491, !ctir !167
  %331 = load i8*, i8** %arrayidx484, align 8, !dbg !4491
  %332 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4492
  %name485 = getelementptr inbounds %struct.option, %struct.option* %332, i32 0, i32 0, !dbg !4493, !ctir !25
  %333 = load i8*, i8** %name485, align 8, !dbg !4493, !ctir !29
  %call486 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %329, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.13, i64 0, i64 0), i8* %331, i8* %333), !dbg !4494
  br label %if.end487, !dbg !4494

if.end487:                                        ; preds = %if.then483, %if.else481
  %334 = load i8*, i8** @nextchar, align 8, !dbg !4495
  %call488 = call i64 @strlen(i8* %334) #9, !dbg !4496
  %335 = load i8*, i8** @nextchar, align 8, !dbg !4497
  %add.ptr489 = getelementptr inbounds i8, i8* %335, i64 %call488, !dbg !4497, !ctir !20
  store i8* %add.ptr489, i8** @nextchar, align 8, !dbg !4497
  store i32 63, i32* %retval, align 4, !dbg !4498
  br label %return, !dbg !4498

if.end490:                                        ; preds = %if.then479
  br label %if.end520, !dbg !4499

if.else491:                                       ; preds = %if.then474
  %336 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4500
  %has_arg492 = getelementptr inbounds %struct.option, %struct.option* %336, i32 0, i32 1, !dbg !4502, !ctir !25
  %337 = load i32, i32* %has_arg492, align 8, !dbg !4502, !ctir !12
  %cmp493 = icmp eq i32 %337, 1, !dbg !4503
  br i1 %cmp493, label %if.then495, label %if.end519, !dbg !4504

if.then495:                                       ; preds = %if.else491
  %338 = load i32, i32* @optind, align 4, !dbg !4505
  %339 = load i32, i32* %argc.addr, align 4, !dbg !4508
  %cmp496 = icmp slt i32 %338, %339, !dbg !4509
  br i1 %cmp496, label %if.then498, label %if.else502, !dbg !4510

if.then498:                                       ; preds = %if.then495
  %340 = load i8**, i8*** %argv.addr, align 8, !dbg !4511
  %341 = load i32, i32* @optind, align 4, !dbg !4512
  %inc499 = add nsw i32 %341, 1, !dbg !4512
  store i32 %inc499, i32* @optind, align 4, !dbg !4512
  %idxprom500 = sext i32 %341 to i64, !dbg !4511
  %arrayidx501 = getelementptr inbounds i8*, i8** %340, i64 %idxprom500, !dbg !4511, !ctir !167
  %342 = load i8*, i8** %arrayidx501, align 8, !dbg !4511
  store i8* %342, i8** @optarg, align 8, !dbg !4513
  br label %if.end518, !dbg !4514

if.else502:                                       ; preds = %if.then495
  %343 = load i32, i32* %print_errors, align 4, !dbg !4515
  %tobool503 = icmp ne i32 %343, 0, !dbg !4515
  br i1 %tobool503, label %if.then504, label %if.end510, !dbg !4518

if.then504:                                       ; preds = %if.else502
  %344 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4519
  %345 = load i8**, i8*** %argv.addr, align 8, !dbg !4520
  %arrayidx505 = getelementptr inbounds i8*, i8** %345, i64 0, !dbg !4520, !ctir !167
  %346 = load i8*, i8** %arrayidx505, align 8, !dbg !4520
  %347 = load i8**, i8*** %argv.addr, align 8, !dbg !4521
  %348 = load i32, i32* @optind, align 4, !dbg !4522
  %sub506 = sub nsw i32 %348, 1, !dbg !4523
  %idxprom507 = sext i32 %sub506 to i64, !dbg !4521
  %arrayidx508 = getelementptr inbounds i8*, i8** %347, i64 %idxprom507, !dbg !4521, !ctir !167
  %349 = load i8*, i8** %arrayidx508, align 8, !dbg !4521
  %call509 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %344, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), i8* %346, i8* %349), !dbg !4524
  br label %if.end510, !dbg !4524

if.end510:                                        ; preds = %if.then504, %if.else502
  %350 = load i8*, i8** @nextchar, align 8, !dbg !4525
  %call511 = call i64 @strlen(i8* %350) #9, !dbg !4526
  %351 = load i8*, i8** @nextchar, align 8, !dbg !4527
  %add.ptr512 = getelementptr inbounds i8, i8* %351, i64 %call511, !dbg !4527, !ctir !20
  store i8* %add.ptr512, i8** @nextchar, align 8, !dbg !4527
  %352 = load i8*, i8** %optstring.addr, align 8, !dbg !4528
  %arrayidx513 = getelementptr inbounds i8, i8* %352, i64 0, !dbg !4528, !ctir !29
  %353 = load i8, i8* %arrayidx513, align 1, !dbg !4528
  %conv514 = sext i8 %353 to i32, !dbg !4528
  %cmp515 = icmp eq i32 %conv514, 58, !dbg !4529
  %354 = zext i1 %cmp515 to i64, !dbg !4528
  %cond517 = select i1 %cmp515, i32 58, i32 63, !dbg !4528
  store i32 %cond517, i32* %retval, align 4, !dbg !4530
  br label %return, !dbg !4530

if.end518:                                        ; preds = %if.then498
  br label %if.end519, !dbg !4531

if.end519:                                        ; preds = %if.end518, %if.else491
  br label %if.end520

if.end520:                                        ; preds = %if.end519, %if.end490
  %355 = load i8*, i8** @nextchar, align 8, !dbg !4532
  %call521 = call i64 @strlen(i8* %355) #9, !dbg !4533
  %356 = load i8*, i8** @nextchar, align 8, !dbg !4534
  %add.ptr522 = getelementptr inbounds i8, i8* %356, i64 %call521, !dbg !4534, !ctir !20
  store i8* %add.ptr522, i8** @nextchar, align 8, !dbg !4534
  %357 = load i32*, i32** %longind.addr, align 8, !dbg !4535
  %cmp523 = icmp ne i32* %357, null, !dbg !4537
  br i1 %cmp523, label %if.then525, label %if.end526, !dbg !4538

if.then525:                                       ; preds = %if.end520
  %358 = load i32, i32* %option_index380, align 4, !dbg !4539
  %359 = load i32*, i32** %longind.addr, align 8, !dbg !4540
  store i32 %358, i32* %359, align 4, !dbg !4541, !ctir !12
  br label %if.end526, !dbg !4542

if.end526:                                        ; preds = %if.then525, %if.end520
  %360 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4543
  %flag527 = getelementptr inbounds %struct.option, %struct.option* %360, i32 0, i32 2, !dbg !4545, !ctir !25
  %361 = load i32*, i32** %flag527, align 8, !dbg !4545, !ctir !33
  %tobool528 = icmp ne i32* %361, null, !dbg !4543
  br i1 %tobool528, label %if.then529, label %if.end532, !dbg !4546

if.then529:                                       ; preds = %if.end526
  %362 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4547
  %val530 = getelementptr inbounds %struct.option, %struct.option* %362, i32 0, i32 3, !dbg !4549, !ctir !25
  %363 = load i32, i32* %val530, align 8, !dbg !4549, !ctir !12
  %364 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4550
  %flag531 = getelementptr inbounds %struct.option, %struct.option* %364, i32 0, i32 2, !dbg !4551, !ctir !25
  %365 = load i32*, i32** %flag531, align 8, !dbg !4551, !ctir !33
  store i32 %363, i32* %365, align 4, !dbg !4552, !ctir !12
  store i32 0, i32* %retval, align 4, !dbg !4553
  br label %return, !dbg !4553

if.end532:                                        ; preds = %if.end526
  %366 = load %struct.option*, %struct.option** %pfound376, align 8, !dbg !4554
  %val533 = getelementptr inbounds %struct.option, %struct.option* %366, i32 0, i32 3, !dbg !4555, !ctir !25
  %367 = load i32, i32* %val533, align 8, !dbg !4555, !ctir !12
  store i32 %367, i32* %retval, align 4, !dbg !4556
  br label %return, !dbg !4556

if.end534:                                        ; preds = %if.end471
  store i8* null, i8** @nextchar, align 8, !dbg !4557
  store i32 87, i32* %retval, align 4, !dbg !4558
  br label %return, !dbg !4558

if.end535:                                        ; preds = %land.lhs.true368, %if.end363
  %368 = load i8*, i8** %temp, align 8, !dbg !4559
  %arrayidx536 = getelementptr inbounds i8, i8* %368, i64 1, !dbg !4559, !ctir !19
  %369 = load i8, i8* %arrayidx536, align 1, !dbg !4559
  %conv537 = sext i8 %369 to i32, !dbg !4559
  %cmp538 = icmp eq i32 %conv537, 58, !dbg !4561
  br i1 %cmp538, label %if.then540, label %if.end584, !dbg !4562

if.then540:                                       ; preds = %if.end535
  %370 = load i8*, i8** %temp, align 8, !dbg !4563
  %arrayidx541 = getelementptr inbounds i8, i8* %370, i64 2, !dbg !4563, !ctir !19
  %371 = load i8, i8* %arrayidx541, align 1, !dbg !4563
  %conv542 = sext i8 %371 to i32, !dbg !4563
  %cmp543 = icmp eq i32 %conv542, 58, !dbg !4566
  br i1 %cmp543, label %if.then545, label %if.else553, !dbg !4567

if.then545:                                       ; preds = %if.then540
  %372 = load i8*, i8** @nextchar, align 8, !dbg !4568
  %373 = load i8, i8* %372, align 1, !dbg !4571, !ctir !20
  %conv546 = sext i8 %373 to i32, !dbg !4571
  %cmp547 = icmp ne i32 %conv546, 0, !dbg !4572
  br i1 %cmp547, label %if.then549, label %if.else551, !dbg !4573

if.then549:                                       ; preds = %if.then545
  %374 = load i8*, i8** @nextchar, align 8, !dbg !4574
  store i8* %374, i8** @optarg, align 8, !dbg !4576
  %375 = load i32, i32* @optind, align 4, !dbg !4577
  %inc550 = add nsw i32 %375, 1, !dbg !4577
  store i32 %inc550, i32* @optind, align 4, !dbg !4577
  br label %if.end552, !dbg !4578

if.else551:                                       ; preds = %if.then545
  store i8* null, i8** @optarg, align 8, !dbg !4579
  br label %if.end552

if.end552:                                        ; preds = %if.else551, %if.then549
  store i8* null, i8** @nextchar, align 8, !dbg !4580
  br label %if.end583, !dbg !4581

if.else553:                                       ; preds = %if.then540
  %376 = load i8*, i8** @nextchar, align 8, !dbg !4582
  %377 = load i8, i8* %376, align 1, !dbg !4585, !ctir !20
  %conv554 = sext i8 %377 to i32, !dbg !4585
  %cmp555 = icmp ne i32 %conv554, 0, !dbg !4586
  br i1 %cmp555, label %if.then557, label %if.else559, !dbg !4587

if.then557:                                       ; preds = %if.else553
  %378 = load i8*, i8** @nextchar, align 8, !dbg !4588
  store i8* %378, i8** @optarg, align 8, !dbg !4590
  %379 = load i32, i32* @optind, align 4, !dbg !4591
  %inc558 = add nsw i32 %379, 1, !dbg !4591
  store i32 %inc558, i32* @optind, align 4, !dbg !4591
  br label %if.end582, !dbg !4592

if.else559:                                       ; preds = %if.else553
  %380 = load i32, i32* @optind, align 4, !dbg !4593
  %381 = load i32, i32* %argc.addr, align 4, !dbg !4595
  %cmp560 = icmp eq i32 %380, %381, !dbg !4596
  br i1 %cmp560, label %if.then562, label %if.else577, !dbg !4597

if.then562:                                       ; preds = %if.else559
  %382 = load i32, i32* %print_errors, align 4, !dbg !4598
  %tobool563 = icmp ne i32 %382, 0, !dbg !4598
  br i1 %tobool563, label %if.then564, label %if.end568, !dbg !4601

if.then564:                                       ; preds = %if.then562
  %383 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4602
  %384 = load i8**, i8*** %argv.addr, align 8, !dbg !4604
  %arrayidx565 = getelementptr inbounds i8*, i8** %384, i64 0, !dbg !4604, !ctir !167
  %385 = load i8*, i8** %arrayidx565, align 8, !dbg !4604
  %386 = load i8, i8* %c, align 1, !dbg !4605
  %conv566 = sext i8 %386 to i32, !dbg !4605
  %call567 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %383, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.11, i64 0, i64 0), i8* %385, i32 %conv566), !dbg !4606
  br label %if.end568, !dbg !4607

if.end568:                                        ; preds = %if.then564, %if.then562
  %387 = load i8, i8* %c, align 1, !dbg !4608
  %conv569 = sext i8 %387 to i32, !dbg !4608
  store i32 %conv569, i32* @optopt, align 4, !dbg !4609
  %388 = load i8*, i8** %optstring.addr, align 8, !dbg !4610
  %arrayidx570 = getelementptr inbounds i8, i8* %388, i64 0, !dbg !4610, !ctir !29
  %389 = load i8, i8* %arrayidx570, align 1, !dbg !4610
  %conv571 = sext i8 %389 to i32, !dbg !4610
  %cmp572 = icmp eq i32 %conv571, 58, !dbg !4612
  br i1 %cmp572, label %if.then574, label %if.else575, !dbg !4613

if.then574:                                       ; preds = %if.end568
  store i8 58, i8* %c, align 1, !dbg !4614
  br label %if.end576, !dbg !4615

if.else575:                                       ; preds = %if.end568
  store i8 63, i8* %c, align 1, !dbg !4616
  br label %if.end576

if.end576:                                        ; preds = %if.else575, %if.then574
  br label %if.end581, !dbg !4617

if.else577:                                       ; preds = %if.else559
  %390 = load i8**, i8*** %argv.addr, align 8, !dbg !4618
  %391 = load i32, i32* @optind, align 4, !dbg !4619
  %inc578 = add nsw i32 %391, 1, !dbg !4619
  store i32 %inc578, i32* @optind, align 4, !dbg !4619
  %idxprom579 = sext i32 %391 to i64, !dbg !4618
  %arrayidx580 = getelementptr inbounds i8*, i8** %390, i64 %idxprom579, !dbg !4618, !ctir !167
  %392 = load i8*, i8** %arrayidx580, align 8, !dbg !4618
  store i8* %392, i8** @optarg, align 8, !dbg !4620
  br label %if.end581

if.end581:                                        ; preds = %if.else577, %if.end576
  br label %if.end582

if.end582:                                        ; preds = %if.end581, %if.then557
  store i8* null, i8** @nextchar, align 8, !dbg !4621
  br label %if.end583

if.end583:                                        ; preds = %if.end582, %if.end552
  br label %if.end584, !dbg !4622

if.end584:                                        ; preds = %if.end583, %if.end535
  %393 = load i8, i8* %c, align 1, !dbg !4623
  %conv585 = sext i8 %393 to i32, !dbg !4623
  store i32 %conv585, i32* %retval, align 4, !dbg !4624
  br label %return, !dbg !4624

return:                                           ; preds = %if.end584, %if.end534, %if.end532, %if.then529, %if.end510, %if.end487, %if.end467, %if.end403, %if.end361, %if.end329, %if.end293, %if.then290, %if.end271, %if.end247, %if.end209, %if.end103, %if.then102, %if.end84, %if.then4
  %394 = load i32, i32* %retval, align 4, !dbg !4625
  ret i32 %394, !dbg !4625
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @_getopt_initialize(i32 %argc, i8** %argv, i8* %optstring) #0 !dbg !4626 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %optstring.addr = alloca i8*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !4629, metadata !DIExpression()), !dbg !4630
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !4631, metadata !DIExpression()), !dbg !4632
  store i8* %optstring, i8** %optstring.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optstring.addr, metadata !4633, metadata !DIExpression()), !dbg !4634
  %0 = load i32, i32* @optind, align 4, !dbg !4635
  store i32 %0, i32* @last_nonopt, align 4, !dbg !4636
  store i32 %0, i32* @first_nonopt, align 4, !dbg !4637
  store i8* null, i8** @nextchar, align 8, !dbg !4638
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.83, i64 0, i64 0)) #11, !dbg !4639
  store i8* %call, i8** @posixly_correct, align 8, !dbg !4640
  %1 = load i8*, i8** %optstring.addr, align 8, !dbg !4641
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !4641, !ctir !29
  %2 = load i8, i8* %arrayidx, align 1, !dbg !4641
  %conv = sext i8 %2 to i32, !dbg !4641
  %cmp = icmp eq i32 %conv, 45, !dbg !4643
  br i1 %cmp, label %if.then, label %if.else, !dbg !4644

if.then:                                          ; preds = %entry
  store i32 2, i32* @ordering, align 4, !dbg !4645
  %3 = load i8*, i8** %optstring.addr, align 8, !dbg !4647
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !4647, !ctir !30
  store i8* %incdec.ptr, i8** %optstring.addr, align 8, !dbg !4647
  br label %if.end14, !dbg !4648

if.else:                                          ; preds = %entry
  %4 = load i8*, i8** %optstring.addr, align 8, !dbg !4649
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !4649, !ctir !29
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !4649
  %conv3 = sext i8 %5 to i32, !dbg !4649
  %cmp4 = icmp eq i32 %conv3, 43, !dbg !4651
  br i1 %cmp4, label %if.then6, label %if.else8, !dbg !4652

if.then6:                                         ; preds = %if.else
  store i32 0, i32* @ordering, align 4, !dbg !4653
  %6 = load i8*, i8** %optstring.addr, align 8, !dbg !4655
  %incdec.ptr7 = getelementptr inbounds i8, i8* %6, i32 1, !dbg !4655, !ctir !30
  store i8* %incdec.ptr7, i8** %optstring.addr, align 8, !dbg !4655
  br label %if.end13, !dbg !4656

if.else8:                                         ; preds = %if.else
  %7 = load i8*, i8** @posixly_correct, align 8, !dbg !4657
  %cmp9 = icmp ne i8* %7, null, !dbg !4659
  br i1 %cmp9, label %if.then11, label %if.else12, !dbg !4660

if.then11:                                        ; preds = %if.else8
  store i32 0, i32* @ordering, align 4, !dbg !4661
  br label %if.end, !dbg !4662

if.else12:                                        ; preds = %if.else8
  store i32 1, i32* @ordering, align 4, !dbg !4663
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then6
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then
  %8 = load i8*, i8** %optstring.addr, align 8, !dbg !4664
  ret i8* %8, !dbg !4665
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @exchange(i8** %argv) #0 !dbg !4666 {
entry:
  %argv.addr = alloca i8**, align 8
  %bottom = alloca i32, align 4, !ctir !12
  %middle = alloca i32, align 4, !ctir !12
  %top = alloca i32, align 4, !ctir !12
  %tem = alloca i8*, align 8, !ctir !19
  %len = alloca i32, align 4, !ctir !12
  %i = alloca i32, align 4, !ctir !12
  %len20 = alloca i32, align 4, !ctir !12
  %i22 = alloca i32, align 4, !ctir !12
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.declare(metadata i32* %bottom, metadata !4671, metadata !DIExpression()), !dbg !4672
  %0 = load i32, i32* @first_nonopt, align 4, !dbg !4673
  store i32 %0, i32* %bottom, align 4, !dbg !4672
  call void @llvm.dbg.declare(metadata i32* %middle, metadata !4674, metadata !DIExpression()), !dbg !4675
  %1 = load i32, i32* @last_nonopt, align 4, !dbg !4676
  store i32 %1, i32* %middle, align 4, !dbg !4675
  call void @llvm.dbg.declare(metadata i32* %top, metadata !4677, metadata !DIExpression()), !dbg !4678
  %2 = load i32, i32* @optind, align 4, !dbg !4679
  store i32 %2, i32* %top, align 4, !dbg !4678
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !4680, metadata !DIExpression()), !dbg !4681
  br label %while.cond, !dbg !4682

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i32, i32* %top, align 4, !dbg !4683
  %4 = load i32, i32* %middle, align 4, !dbg !4684
  %cmp = icmp sgt i32 %3, %4, !dbg !4685
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4686

land.rhs:                                         ; preds = %while.cond
  %5 = load i32, i32* %middle, align 4, !dbg !4687
  %6 = load i32, i32* %bottom, align 4, !dbg !4688
  %cmp1 = icmp sgt i32 %5, %6, !dbg !4689
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !4690
  br i1 %7, label %while.body, label %while.end, !dbg !4682

while.body:                                       ; preds = %land.end
  %8 = load i32, i32* %top, align 4, !dbg !4691
  %9 = load i32, i32* %middle, align 4, !dbg !4694
  %sub = sub nsw i32 %8, %9, !dbg !4695
  %10 = load i32, i32* %middle, align 4, !dbg !4696
  %11 = load i32, i32* %bottom, align 4, !dbg !4697
  %sub2 = sub nsw i32 %10, %11, !dbg !4698
  %cmp3 = icmp sgt i32 %sub, %sub2, !dbg !4699
  br i1 %cmp3, label %if.then, label %if.else, !dbg !4700

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i32* %len, metadata !4701, metadata !DIExpression()), !dbg !4703
  %12 = load i32, i32* %middle, align 4, !dbg !4704
  %13 = load i32, i32* %bottom, align 4, !dbg !4705
  %sub4 = sub nsw i32 %12, %13, !dbg !4706
  store i32 %sub4, i32* %len, align 4, !dbg !4703
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4707, metadata !DIExpression()), !dbg !4708
  store i32 0, i32* %i, align 4, !dbg !4709
  br label %for.cond, !dbg !4711

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = load i32, i32* %i, align 4, !dbg !4712
  %15 = load i32, i32* %len, align 4, !dbg !4714
  %cmp5 = icmp slt i32 %14, %15, !dbg !4715
  br i1 %cmp5, label %for.body, label %for.end, !dbg !4716

for.body:                                         ; preds = %for.cond
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !4717
  %17 = load i32, i32* %bottom, align 4, !dbg !4719
  %18 = load i32, i32* %i, align 4, !dbg !4720
  %add = add nsw i32 %17, %18, !dbg !4721
  %idxprom = sext i32 %add to i64, !dbg !4717
  %arrayidx = getelementptr inbounds i8*, i8** %16, i64 %idxprom, !dbg !4717, !ctir !23
  %19 = load i8*, i8** %arrayidx, align 8, !dbg !4717
  store i8* %19, i8** %tem, align 8, !dbg !4722
  %20 = load i8**, i8*** %argv.addr, align 8, !dbg !4723
  %21 = load i32, i32* %top, align 4, !dbg !4724
  %22 = load i32, i32* %middle, align 4, !dbg !4725
  %23 = load i32, i32* %bottom, align 4, !dbg !4726
  %sub6 = sub nsw i32 %22, %23, !dbg !4727
  %sub7 = sub nsw i32 %21, %sub6, !dbg !4728
  %24 = load i32, i32* %i, align 4, !dbg !4729
  %add8 = add nsw i32 %sub7, %24, !dbg !4730
  %idxprom9 = sext i32 %add8 to i64, !dbg !4723
  %arrayidx10 = getelementptr inbounds i8*, i8** %20, i64 %idxprom9, !dbg !4723, !ctir !23
  %25 = load i8*, i8** %arrayidx10, align 8, !dbg !4723
  %26 = load i8**, i8*** %argv.addr, align 8, !dbg !4731
  %27 = load i32, i32* %bottom, align 4, !dbg !4732
  %28 = load i32, i32* %i, align 4, !dbg !4733
  %add11 = add nsw i32 %27, %28, !dbg !4734
  %idxprom12 = sext i32 %add11 to i64, !dbg !4731
  %arrayidx13 = getelementptr inbounds i8*, i8** %26, i64 %idxprom12, !dbg !4731, !ctir !23
  store i8* %25, i8** %arrayidx13, align 8, !dbg !4735
  %29 = load i8*, i8** %tem, align 8, !dbg !4736
  %30 = load i8**, i8*** %argv.addr, align 8, !dbg !4737
  %31 = load i32, i32* %top, align 4, !dbg !4738
  %32 = load i32, i32* %middle, align 4, !dbg !4739
  %33 = load i32, i32* %bottom, align 4, !dbg !4740
  %sub14 = sub nsw i32 %32, %33, !dbg !4741
  %sub15 = sub nsw i32 %31, %sub14, !dbg !4742
  %34 = load i32, i32* %i, align 4, !dbg !4743
  %add16 = add nsw i32 %sub15, %34, !dbg !4744
  %idxprom17 = sext i32 %add16 to i64, !dbg !4737
  %arrayidx18 = getelementptr inbounds i8*, i8** %30, i64 %idxprom17, !dbg !4737, !ctir !23
  store i8* %29, i8** %arrayidx18, align 8, !dbg !4745
  br label %for.inc, !dbg !4746

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %i, align 4, !dbg !4747
  %inc = add nsw i32 %35, 1, !dbg !4747
  store i32 %inc, i32* %i, align 4, !dbg !4747
  br label %for.cond, !dbg !4748, !llvm.loop !4749

for.end:                                          ; preds = %for.cond
  %36 = load i32, i32* %len, align 4, !dbg !4751
  %37 = load i32, i32* %top, align 4, !dbg !4752
  %sub19 = sub nsw i32 %37, %36, !dbg !4752
  store i32 %sub19, i32* %top, align 4, !dbg !4752
  br label %if.end, !dbg !4753

if.else:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i32* %len20, metadata !4754, metadata !DIExpression()), !dbg !4756
  %38 = load i32, i32* %top, align 4, !dbg !4757
  %39 = load i32, i32* %middle, align 4, !dbg !4758
  %sub21 = sub nsw i32 %38, %39, !dbg !4759
  store i32 %sub21, i32* %len20, align 4, !dbg !4756
  call void @llvm.dbg.declare(metadata i32* %i22, metadata !4760, metadata !DIExpression()), !dbg !4761
  store i32 0, i32* %i22, align 4, !dbg !4762
  br label %for.cond23, !dbg !4764

for.cond23:                                       ; preds = %for.inc38, %if.else
  %40 = load i32, i32* %i22, align 4, !dbg !4765
  %41 = load i32, i32* %len20, align 4, !dbg !4767
  %cmp24 = icmp slt i32 %40, %41, !dbg !4768
  br i1 %cmp24, label %for.body25, label %for.end40, !dbg !4769

for.body25:                                       ; preds = %for.cond23
  %42 = load i8**, i8*** %argv.addr, align 8, !dbg !4770
  %43 = load i32, i32* %bottom, align 4, !dbg !4772
  %44 = load i32, i32* %i22, align 4, !dbg !4773
  %add26 = add nsw i32 %43, %44, !dbg !4774
  %idxprom27 = sext i32 %add26 to i64, !dbg !4770
  %arrayidx28 = getelementptr inbounds i8*, i8** %42, i64 %idxprom27, !dbg !4770, !ctir !23
  %45 = load i8*, i8** %arrayidx28, align 8, !dbg !4770
  store i8* %45, i8** %tem, align 8, !dbg !4775
  %46 = load i8**, i8*** %argv.addr, align 8, !dbg !4776
  %47 = load i32, i32* %middle, align 4, !dbg !4777
  %48 = load i32, i32* %i22, align 4, !dbg !4778
  %add29 = add nsw i32 %47, %48, !dbg !4779
  %idxprom30 = sext i32 %add29 to i64, !dbg !4776
  %arrayidx31 = getelementptr inbounds i8*, i8** %46, i64 %idxprom30, !dbg !4776, !ctir !23
  %49 = load i8*, i8** %arrayidx31, align 8, !dbg !4776
  %50 = load i8**, i8*** %argv.addr, align 8, !dbg !4780
  %51 = load i32, i32* %bottom, align 4, !dbg !4781
  %52 = load i32, i32* %i22, align 4, !dbg !4782
  %add32 = add nsw i32 %51, %52, !dbg !4783
  %idxprom33 = sext i32 %add32 to i64, !dbg !4780
  %arrayidx34 = getelementptr inbounds i8*, i8** %50, i64 %idxprom33, !dbg !4780, !ctir !23
  store i8* %49, i8** %arrayidx34, align 8, !dbg !4784
  %53 = load i8*, i8** %tem, align 8, !dbg !4785
  %54 = load i8**, i8*** %argv.addr, align 8, !dbg !4786
  %55 = load i32, i32* %middle, align 4, !dbg !4787
  %56 = load i32, i32* %i22, align 4, !dbg !4788
  %add35 = add nsw i32 %55, %56, !dbg !4789
  %idxprom36 = sext i32 %add35 to i64, !dbg !4786
  %arrayidx37 = getelementptr inbounds i8*, i8** %54, i64 %idxprom36, !dbg !4786, !ctir !23
  store i8* %53, i8** %arrayidx37, align 8, !dbg !4790
  br label %for.inc38, !dbg !4791

for.inc38:                                        ; preds = %for.body25
  %57 = load i32, i32* %i22, align 4, !dbg !4792
  %inc39 = add nsw i32 %57, 1, !dbg !4792
  store i32 %inc39, i32* %i22, align 4, !dbg !4792
  br label %for.cond23, !dbg !4793, !llvm.loop !4794

for.end40:                                        ; preds = %for.cond23
  %58 = load i32, i32* %len20, align 4, !dbg !4796
  %59 = load i32, i32* %bottom, align 4, !dbg !4797
  %add41 = add nsw i32 %59, %58, !dbg !4797
  store i32 %add41, i32* %bottom, align 4, !dbg !4797
  br label %if.end

if.end:                                           ; preds = %for.end40, %for.end
  br label %while.cond, !dbg !4682, !llvm.loop !4798

while.end:                                        ; preds = %land.end
  %60 = load i32, i32* @optind, align 4, !dbg !4800
  %61 = load i32, i32* @last_nonopt, align 4, !dbg !4801
  %sub42 = sub nsw i32 %60, %61, !dbg !4802
  %62 = load i32, i32* @first_nonopt, align 4, !dbg !4803
  %add43 = add nsw i32 %62, %sub42, !dbg !4803
  store i32 %add43, i32* @first_nonopt, align 4, !dbg !4803
  %63 = load i32, i32* @optind, align 4, !dbg !4804
  store i32 %63, i32* @last_nonopt, align 4, !dbg !4805
  ret void, !dbg !4806
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @my_index(i8* %str, i32 %chr) #0 !dbg !4807 {
entry:
  %retval = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %chr.addr = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !4810, metadata !DIExpression()), !dbg !4811
  store i32 %chr, i32* %chr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chr.addr, metadata !4812, metadata !DIExpression()), !dbg !4813
  br label %while.cond, !dbg !4814

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %str.addr, align 8, !dbg !4815
  %1 = load i8, i8* %0, align 1, !dbg !4816, !ctir !30
  %tobool = icmp ne i8 %1, 0, !dbg !4814
  br i1 %tobool, label %while.body, label %while.end, !dbg !4814

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %str.addr, align 8, !dbg !4817
  %3 = load i8, i8* %2, align 1, !dbg !4820, !ctir !30
  %conv = sext i8 %3 to i32, !dbg !4820
  %4 = load i32, i32* %chr.addr, align 4, !dbg !4821
  %cmp = icmp eq i32 %conv, %4, !dbg !4822
  br i1 %cmp, label %if.then, label %if.end, !dbg !4823

if.then:                                          ; preds = %while.body
  %5 = load i8*, i8** %str.addr, align 8, !dbg !4824
  store i8* %5, i8** %retval, align 8, !dbg !4825
  br label %return, !dbg !4825

if.end:                                           ; preds = %while.body
  %6 = load i8*, i8** %str.addr, align 8, !dbg !4826
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1, !dbg !4826, !ctir !30
  store i8* %incdec.ptr, i8** %str.addr, align 8, !dbg !4826
  br label %while.cond, !dbg !4814, !llvm.loop !4827

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !4829
  br label %return, !dbg !4829

return:                                           ; preds = %while.end, %if.then
  %7 = load i8*, i8** %retval, align 8, !dbg !4830
  ret i8* %7, !dbg !4830
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #6

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getopt(i32 %argc, i8** nonnull %argv, i8* nonnull %optstring) #0 !dbg !4831 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %optstring.addr = alloca i8*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !4834, metadata !DIExpression()), !dbg !4835
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !4836, metadata !DIExpression()), !dbg !4837
  store i8* %optstring, i8** %optstring.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optstring.addr, metadata !4838, metadata !DIExpression()), !dbg !4839
  %0 = load i32, i32* %argc.addr, align 4, !dbg !4840
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !4841
  %2 = load i8*, i8** %optstring.addr, align 8, !dbg !4842
  %call = call i32 @_getopt_internal(i32 %0, i8** %1, i8* %2, %struct.option* null, i32* null, i32 0), !dbg !4843
  ret i32 %call, !dbg !4844
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !4845 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %file_count = alloca i32, align 4, !ctir !12
  %proglen = alloca i32, align 4, !ctir !12
  %optc = alloca i32, align 4, !ctir !12
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !4848, metadata !DIExpression()), !dbg !4849
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !4850, metadata !DIExpression()), !dbg !4851
  call void @llvm.dbg.declare(metadata i32* %file_count, metadata !4852, metadata !DIExpression()), !dbg !4853
  call void @llvm.dbg.declare(metadata i32* %proglen, metadata !4854, metadata !DIExpression()), !dbg !4855
  call void @llvm.dbg.declare(metadata i32* %optc, metadata !4856, metadata !DIExpression()), !dbg !4857
  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !4858
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0, !dbg !4858, !ctir !23
  %1 = load i8*, i8** %arrayidx, align 8, !dbg !4858
  %call = call i8* @base_name(i8* %1), !dbg !4859
  store i8* %call, i8** @progname, align 8, !dbg !4860
  %2 = load i8*, i8** @progname, align 8, !dbg !4861
  %call1 = call i64 @strlen(i8* %2) #9, !dbg !4862
  %conv = trunc i64 %call1 to i32, !dbg !4862
  store i32 %conv, i32* %proglen, align 4, !dbg !4863
  %3 = load i32, i32* %proglen, align 4, !dbg !4864
  %cmp = icmp sgt i32 %3, 4, !dbg !4866
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4867

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** @progname, align 8, !dbg !4868
  %5 = load i32, i32* %proglen, align 4, !dbg !4868
  %idx.ext = sext i32 %5 to i64, !dbg !4868
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext, !dbg !4868, !ctir !20
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 -4, !dbg !4868, !ctir !20
  %call4 = call i32 @strcmp(i8* %add.ptr3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i64 0, i64 0)) #9, !dbg !4868
  %cmp5 = icmp eq i32 %call4, 0, !dbg !4868
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4869

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** @progname, align 8, !dbg !4870
  %7 = load i32, i32* %proglen, align 4, !dbg !4872
  %sub = sub nsw i32 %7, 4, !dbg !4873
  %idxprom = sext i32 %sub to i64, !dbg !4870
  %arrayidx7 = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !4870, !ctir !19
  store i8 0, i8* %arrayidx7, align 1, !dbg !4874
  br label %if.end, !dbg !4875

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call8 = call i8* @add_envopt(i32* %argc.addr, i8*** %argv.addr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i64 0, i64 0)), !dbg !4876
  store i8* %call8, i8** @env, align 8, !dbg !4877
  %8 = load i8*, i8** @env, align 8, !dbg !4878
  %cmp9 = icmp ne i8* %8, null, !dbg !4880
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !4881

if.then11:                                        ; preds = %if.end
  %9 = load i8**, i8*** %argv.addr, align 8, !dbg !4882
  store i8** %9, i8*** @args, align 8, !dbg !4883
  br label %if.end12, !dbg !4884

if.end12:                                         ; preds = %if.then11, %if.end
  %call13 = call void (i32)* @signal(i32 2, void (i32)* inttoptr (i64 1 to void (i32)*)) #11, !dbg !4885
  %cmp14 = icmp ne void (i32)* %call13, inttoptr (i64 1 to void (i32)*), !dbg !4886
  %conv15 = zext i1 %cmp14 to i32, !dbg !4886
  store i32 %conv15, i32* @foreground, align 4, !dbg !4887
  %10 = load i32, i32* @foreground, align 4, !dbg !4888
  %tobool = icmp ne i32 %10, 0, !dbg !4888
  br i1 %tobool, label %if.then16, label %if.end18, !dbg !4890

if.then16:                                        ; preds = %if.end12
  %call17 = call void (i32)* @signal(i32 2, void (i32)* bitcast (void ()* @abort_gzip_signal to void (i32)*)) #11, !dbg !4891
  br label %if.end18, !dbg !4893

if.end18:                                         ; preds = %if.then16, %if.end12
  %call19 = call void (i32)* @signal(i32 15, void (i32)* inttoptr (i64 1 to void (i32)*)) #11, !dbg !4894
  %cmp20 = icmp ne void (i32)* %call19, inttoptr (i64 1 to void (i32)*), !dbg !4896
  br i1 %cmp20, label %if.then22, label %if.end24, !dbg !4897

if.then22:                                        ; preds = %if.end18
  %call23 = call void (i32)* @signal(i32 15, void (i32)* bitcast (void ()* @abort_gzip_signal to void (i32)*)) #11, !dbg !4898
  br label %if.end24, !dbg !4900

if.end24:                                         ; preds = %if.then22, %if.end18
  %call25 = call void (i32)* @signal(i32 1, void (i32)* inttoptr (i64 1 to void (i32)*)) #11, !dbg !4901
  %cmp26 = icmp ne void (i32)* %call25, inttoptr (i64 1 to void (i32)*), !dbg !4903
  br i1 %cmp26, label %if.then28, label %if.end30, !dbg !4904

if.then28:                                        ; preds = %if.end24
  %call29 = call void (i32)* @signal(i32 1, void (i32)* bitcast (void ()* @abort_gzip_signal to void (i32)*)) #11, !dbg !4905
  br label %if.end30, !dbg !4907

if.end30:                                         ; preds = %if.then28, %if.end24
  %11 = load i8*, i8** @progname, align 8, !dbg !4908
  %call31 = call i32 @strncmp(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i64 0, i64 0), i64 2) #9, !dbg !4910
  %cmp32 = icmp eq i32 %call31, 0, !dbg !4911
  br i1 %cmp32, label %if.then37, label %lor.lhs.false, !dbg !4912

lor.lhs.false:                                    ; preds = %if.end30
  %12 = load i8*, i8** @progname, align 8, !dbg !4913
  %call34 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i64 0, i64 0), i64 3) #9, !dbg !4914
  %cmp35 = icmp eq i32 %call34, 0, !dbg !4915
  br i1 %cmp35, label %if.then37, label %if.else, !dbg !4916

if.then37:                                        ; preds = %lor.lhs.false, %if.end30
  store i32 1, i32* @decompress, align 4, !dbg !4917
  br label %if.end48, !dbg !4919

if.else:                                          ; preds = %lor.lhs.false
  %13 = load i8*, i8** @progname, align 8, !dbg !4920
  %add.ptr38 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !4920, !ctir !20
  %call39 = call i32 @strcmp(i8* %add.ptr38, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0)) #9, !dbg !4920
  %cmp40 = icmp eq i32 %call39, 0, !dbg !4920
  br i1 %cmp40, label %if.then46, label %lor.lhs.false42, !dbg !4922

lor.lhs.false42:                                  ; preds = %if.else
  %14 = load i8*, i8** @progname, align 8, !dbg !4923
  %call43 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0)) #9, !dbg !4923
  %cmp44 = icmp eq i32 %call43, 0, !dbg !4923
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !4924

if.then46:                                        ; preds = %lor.lhs.false42, %if.else
  store i32 1, i32* @to_stdout, align 4, !dbg !4925
  store i32 1, i32* @decompress, align 4, !dbg !4927
  br label %if.end47, !dbg !4928

if.end47:                                         ; preds = %if.then46, %lor.lhs.false42
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then37
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i64 0, i64 0), i8** @z_suffix, align 8, !dbg !4929
  %15 = load i8*, i8** @z_suffix, align 8, !dbg !4930
  %call49 = call i64 @strlen(i8* %15) #9, !dbg !4931
  store i64 %call49, i64* @z_len, align 8, !dbg !4932
  br label %while.cond, !dbg !4933

while.cond:                                       ; preds = %sw.epilog, %if.end48
  %16 = load i32, i32* %argc.addr, align 4, !dbg !4934
  %17 = load i8**, i8*** %argv.addr, align 8, !dbg !4935
  %call50 = call i32 @getopt_long(i32 %16, i8** %17, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.45, i64 0, i64 0), %struct.option* getelementptr inbounds ([25 x %struct.option], [25 x %struct.option]* @longopts, i64 0, i64 0), i32* null), !dbg !4936
  store i32 %call50, i32* %optc, align 4, !dbg !4937
  %cmp51 = icmp ne i32 %call50, -1, !dbg !4938
  br i1 %cmp51, label %while.body, label %while.end, !dbg !4933

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %optc, align 4, !dbg !4939
  switch i32 %18, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb53
    i32 99, label %sw.bb66
    i32 100, label %sw.bb67
    i32 102, label %sw.bb68
    i32 104, label %sw.bb69
    i32 72, label %sw.bb69
    i32 63, label %sw.bb69
    i32 108, label %sw.bb70
    i32 76, label %sw.bb71
    i32 109, label %sw.bb72
    i32 77, label %sw.bb73
    i32 110, label %sw.bb74
    i32 78, label %sw.bb75
    i32 113, label %sw.bb76
    i32 114, label %sw.bb77
    i32 82, label %sw.bb78
    i32 83, label %sw.bb79
    i32 116, label %sw.bb81
    i32 118, label %sw.bb82
    i32 86, label %sw.bb84
    i32 90, label %sw.bb85
    i32 49, label %sw.bb87
    i32 50, label %sw.bb87
    i32 51, label %sw.bb87
    i32 52, label %sw.bb87
    i32 53, label %sw.bb87
    i32 54, label %sw.bb87
    i32 55, label %sw.bb87
    i32 56, label %sw.bb87
    i32 57, label %sw.bb87
  ], !dbg !4941

sw.bb:                                            ; preds = %while.body
  store i32 1, i32* @ascii, align 4, !dbg !4942
  br label %sw.epilog, !dbg !4944

sw.bb53:                                          ; preds = %while.body
  %19 = load i8*, i8** @optarg, align 8, !dbg !4945
  %call54 = call i32 @atoi(i8* %19) #9, !dbg !4946
  store i32 %call54, i32* @maxbits, align 4, !dbg !4947
  br label %for.cond, !dbg !4948

for.cond:                                         ; preds = %for.inc, %sw.bb53
  %20 = load i8*, i8** @optarg, align 8, !dbg !4949
  %21 = load i8, i8* %20, align 1, !dbg !4952, !ctir !20
  %tobool55 = icmp ne i8 %21, 0, !dbg !4953
  br i1 %tobool55, label %for.body, label %for.end, !dbg !4953

for.body:                                         ; preds = %for.cond
  %22 = load i8*, i8** @optarg, align 8, !dbg !4954
  %23 = load i8, i8* %22, align 1, !dbg !4956, !ctir !20
  %conv56 = sext i8 %23 to i32, !dbg !4956
  %cmp57 = icmp sle i32 48, %conv56, !dbg !4957
  br i1 %cmp57, label %land.lhs.true59, label %if.then63, !dbg !4958

land.lhs.true59:                                  ; preds = %for.body
  %24 = load i8*, i8** @optarg, align 8, !dbg !4959
  %25 = load i8, i8* %24, align 1, !dbg !4960, !ctir !20
  %conv60 = sext i8 %25 to i32, !dbg !4960
  %cmp61 = icmp sle i32 %conv60, 57, !dbg !4961
  br i1 %cmp61, label %if.end65, label %if.then63, !dbg !4962

if.then63:                                        ; preds = %land.lhs.true59, %for.body
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4963
  %27 = load i8*, i8** @progname, align 8, !dbg !4965
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.46, i64 0, i64 0), i8* %27), !dbg !4966
  call void @usage(), !dbg !4967
  call void @do_exit(i32 1), !dbg !4968
  br label %if.end65, !dbg !4969

if.end65:                                         ; preds = %if.then63, %land.lhs.true59
  br label %for.inc, !dbg !4970

for.inc:                                          ; preds = %if.end65
  %28 = load i8*, i8** @optarg, align 8, !dbg !4971
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1, !dbg !4971, !ctir !20
  store i8* %incdec.ptr, i8** @optarg, align 8, !dbg !4971
  br label %for.cond, !dbg !4972, !llvm.loop !4973

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !4975

sw.bb66:                                          ; preds = %while.body
  store i32 1, i32* @to_stdout, align 4, !dbg !4976
  br label %sw.epilog, !dbg !4977

sw.bb67:                                          ; preds = %while.body
  store i32 1, i32* @decompress, align 4, !dbg !4978
  br label %sw.epilog, !dbg !4979

sw.bb68:                                          ; preds = %while.body
  %29 = load i32, i32* @force, align 4, !dbg !4980
  %inc = add nsw i32 %29, 1, !dbg !4980
  store i32 %inc, i32* @force, align 4, !dbg !4980
  br label %sw.epilog, !dbg !4981

sw.bb69:                                          ; preds = %while.body, %while.body, %while.body
  call void @help(), !dbg !4982
  call void @do_exit(i32 0), !dbg !4983
  br label %sw.epilog, !dbg !4984

sw.bb70:                                          ; preds = %while.body
  store i32 1, i32* @to_stdout, align 4, !dbg !4985
  store i32 1, i32* @decompress, align 4, !dbg !4986
  store i32 1, i32* @list, align 4, !dbg !4987
  br label %sw.epilog, !dbg !4988

sw.bb71:                                          ; preds = %while.body
  call void @license(), !dbg !4989
  call void @do_exit(i32 0), !dbg !4990
  br label %sw.epilog, !dbg !4991

sw.bb72:                                          ; preds = %while.body
  store i32 1, i32* @no_time, align 4, !dbg !4992
  br label %sw.epilog, !dbg !4993

sw.bb73:                                          ; preds = %while.body
  store i32 0, i32* @no_time, align 4, !dbg !4994
  br label %sw.epilog, !dbg !4995

sw.bb74:                                          ; preds = %while.body
  store i32 1, i32* @no_time, align 4, !dbg !4996
  store i32 1, i32* @no_name, align 4, !dbg !4997
  br label %sw.epilog, !dbg !4998

sw.bb75:                                          ; preds = %while.body
  store i32 0, i32* @no_time, align 4, !dbg !4999
  store i32 0, i32* @no_name, align 4, !dbg !5000
  br label %sw.epilog, !dbg !5001

sw.bb76:                                          ; preds = %while.body
  store i32 1, i32* @quiet, align 4, !dbg !5002
  store i32 0, i32* @verbose, align 4, !dbg !5003
  br label %sw.epilog, !dbg !5004

sw.bb77:                                          ; preds = %while.body
  store i32 1, i32* @recursive, align 4, !dbg !5005
  br label %sw.epilog, !dbg !5006

sw.bb78:                                          ; preds = %while.body
  store i32 1, i32* @rsync, align 4, !dbg !5007
  br label %sw.epilog, !dbg !5008

sw.bb79:                                          ; preds = %while.body
  %30 = load i8*, i8** @optarg, align 8, !dbg !5009
  %call80 = call i64 @strlen(i8* %30) #9, !dbg !5010
  store i64 %call80, i64* @z_len, align 8, !dbg !5011
  %31 = load i8*, i8** @optarg, align 8, !dbg !5012
  store i8* %31, i8** @z_suffix, align 8, !dbg !5013
  br label %sw.epilog, !dbg !5014

sw.bb81:                                          ; preds = %while.body
  store i32 1, i32* @to_stdout, align 4, !dbg !5015
  store i32 1, i32* @decompress, align 4, !dbg !5016
  store i32 1, i32* @test, align 4, !dbg !5017
  br label %sw.epilog, !dbg !5018

sw.bb82:                                          ; preds = %while.body
  %32 = load i32, i32* @verbose, align 4, !dbg !5019
  %inc83 = add nsw i32 %32, 1, !dbg !5019
  store i32 %inc83, i32* @verbose, align 4, !dbg !5019
  store i32 0, i32* @quiet, align 4, !dbg !5020
  br label %sw.epilog, !dbg !5021

sw.bb84:                                          ; preds = %while.body
  call void @version(), !dbg !5022
  call void @do_exit(i32 0), !dbg !5023
  br label %sw.epilog, !dbg !5024

sw.bb85:                                          ; preds = %while.body
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5025
  %34 = load i8*, i8** @progname, align 8, !dbg !5026
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.47, i64 0, i64 0), i8* %34), !dbg !5027
  call void @usage(), !dbg !5028
  call void @do_exit(i32 1), !dbg !5029
  br label %sw.epilog, !dbg !5030

sw.bb87:                                          ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %35 = load i32, i32* %optc, align 4, !dbg !5031
  %sub88 = sub nsw i32 %35, 48, !dbg !5032
  store i32 %sub88, i32* @level, align 4, !dbg !5033
  br label %sw.epilog, !dbg !5034

sw.default:                                       ; preds = %while.body
  call void @usage(), !dbg !5035
  call void @do_exit(i32 1), !dbg !5036
  br label %sw.epilog, !dbg !5037

sw.epilog:                                        ; preds = %sw.default, %sw.bb87, %sw.bb85, %sw.bb84, %sw.bb82, %sw.bb81, %sw.bb79, %sw.bb78, %sw.bb77, %sw.bb76, %sw.bb75, %sw.bb74, %sw.bb73, %sw.bb72, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb68, %sw.bb67, %sw.bb66, %for.end, %sw.bb
  br label %while.cond, !dbg !4933, !llvm.loop !5038

while.end:                                        ; preds = %while.cond
  %36 = load i32, i32* @quiet, align 4, !dbg !5040
  %tobool89 = icmp ne i32 %36, 0, !dbg !5040
  br i1 %tobool89, label %land.lhs.true90, label %if.end96, !dbg !5042

land.lhs.true90:                                  ; preds = %while.end
  %call91 = call void (i32)* @signal(i32 13, void (i32)* inttoptr (i64 1 to void (i32)*)) #11, !dbg !5043
  %cmp92 = icmp ne void (i32)* %call91, inttoptr (i64 1 to void (i32)*), !dbg !5044
  br i1 %cmp92, label %if.then94, label %if.end96, !dbg !5045

if.then94:                                        ; preds = %land.lhs.true90
  %call95 = call void (i32)* @signal(i32 13, void (i32)* bitcast (void ()* @abort_gzip_signal to void (i32)*)) #11, !dbg !5046
  br label %if.end96, !dbg !5046

if.end96:                                         ; preds = %if.then94, %land.lhs.true90, %while.end
  %37 = load i32, i32* @no_time, align 4, !dbg !5047
  %cmp97 = icmp slt i32 %37, 0, !dbg !5049
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !5050

if.then99:                                        ; preds = %if.end96
  %38 = load i32, i32* @decompress, align 4, !dbg !5051
  store i32 %38, i32* @no_time, align 4, !dbg !5052
  br label %if.end100, !dbg !5053

if.end100:                                        ; preds = %if.then99, %if.end96
  %39 = load i32, i32* @no_name, align 4, !dbg !5054
  %cmp101 = icmp slt i32 %39, 0, !dbg !5056
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !5057

if.then103:                                       ; preds = %if.end100
  %40 = load i32, i32* @decompress, align 4, !dbg !5058
  store i32 %40, i32* @no_name, align 4, !dbg !5059
  br label %if.end104, !dbg !5060

if.end104:                                        ; preds = %if.then103, %if.end100
  %41 = load i32, i32* %argc.addr, align 4, !dbg !5061
  %42 = load i32, i32* @optind, align 4, !dbg !5062
  %sub105 = sub nsw i32 %41, %42, !dbg !5063
  store i32 %sub105, i32* %file_count, align 4, !dbg !5064
  %43 = load i32, i32* @ascii, align 4, !dbg !5065
  %tobool106 = icmp ne i32 %43, 0, !dbg !5065
  br i1 %tobool106, label %land.lhs.true107, label %if.end111, !dbg !5067

land.lhs.true107:                                 ; preds = %if.end104
  %44 = load i32, i32* @quiet, align 4, !dbg !5068
  %tobool108 = icmp ne i32 %44, 0, !dbg !5068
  br i1 %tobool108, label %if.end111, label %if.then109, !dbg !5069

if.then109:                                       ; preds = %land.lhs.true107
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5070
  %46 = load i8*, i8** @progname, align 8, !dbg !5072
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0), i8* %46), !dbg !5073
  br label %if.end111, !dbg !5074

if.end111:                                        ; preds = %if.then109, %land.lhs.true107, %if.end104
  %47 = load i64, i64* @z_len, align 8, !dbg !5075
  %cmp112 = icmp eq i64 %47, 0, !dbg !5077
  br i1 %cmp112, label %land.lhs.true114, label %lor.lhs.false116, !dbg !5078

land.lhs.true114:                                 ; preds = %if.end111
  %48 = load i32, i32* @decompress, align 4, !dbg !5079
  %tobool115 = icmp ne i32 %48, 0, !dbg !5079
  br i1 %tobool115, label %lor.lhs.false116, label %if.then119, !dbg !5080

lor.lhs.false116:                                 ; preds = %land.lhs.true114, %if.end111
  %49 = load i64, i64* @z_len, align 8, !dbg !5081
  %cmp117 = icmp ugt i64 %49, 30, !dbg !5082
  br i1 %cmp117, label %if.then119, label %if.end121, !dbg !5083

if.then119:                                       ; preds = %lor.lhs.false116, %land.lhs.true114
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5084
  %51 = load i8*, i8** @progname, align 8, !dbg !5086
  %52 = load i8*, i8** @z_suffix, align 8, !dbg !5087
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.49, i64 0, i64 0), i8* %51, i8* %52), !dbg !5088
  call void @do_exit(i32 1), !dbg !5089
  br label %if.end121, !dbg !5090

if.end121:                                        ; preds = %if.then119, %lor.lhs.false116
  %53 = load i32, i32* @do_lzw, align 4, !dbg !5091
  %tobool122 = icmp ne i32 %53, 0, !dbg !5091
  br i1 %tobool122, label %land.lhs.true123, label %if.end126, !dbg !5093

land.lhs.true123:                                 ; preds = %if.end121
  %54 = load i32, i32* @decompress, align 4, !dbg !5094
  %tobool124 = icmp ne i32 %54, 0, !dbg !5094
  br i1 %tobool124, label %if.end126, label %if.then125, !dbg !5095

if.then125:                                       ; preds = %land.lhs.true123
  store i32 (i32, i32)* @lzw, i32 (i32, i32)** @work, align 8, !dbg !5096
  br label %if.end126, !dbg !5097

if.end126:                                        ; preds = %if.then125, %land.lhs.true123, %if.end121
  %55 = load i32, i32* %file_count, align 4, !dbg !5098
  %cmp127 = icmp ne i32 %55, 0, !dbg !5100
  br i1 %cmp127, label %if.then129, label %if.else149, !dbg !5101

if.then129:                                       ; preds = %if.end126
  %56 = load i32, i32* @to_stdout, align 4, !dbg !5102
  %tobool130 = icmp ne i32 %56, 0, !dbg !5102
  br i1 %tobool130, label %land.lhs.true131, label %if.end140, !dbg !5105

land.lhs.true131:                                 ; preds = %if.then129
  %57 = load i32, i32* @test, align 4, !dbg !5106
  %tobool132 = icmp ne i32 %57, 0, !dbg !5106
  br i1 %tobool132, label %if.end140, label %land.lhs.true133, !dbg !5107

land.lhs.true133:                                 ; preds = %land.lhs.true131
  %58 = load i32, i32* @list, align 4, !dbg !5108
  %tobool134 = icmp ne i32 %58, 0, !dbg !5108
  br i1 %tobool134, label %if.end140, label %land.lhs.true135, !dbg !5109

land.lhs.true135:                                 ; preds = %land.lhs.true133
  %59 = load i32, i32* @decompress, align 4, !dbg !5110
  %tobool136 = icmp ne i32 %59, 0, !dbg !5110
  br i1 %tobool136, label %lor.lhs.false137, label %if.then139, !dbg !5111

lor.lhs.false137:                                 ; preds = %land.lhs.true135
  %60 = load i32, i32* @ascii, align 4, !dbg !5112
  %tobool138 = icmp ne i32 %60, 0, !dbg !5112
  br i1 %tobool138, label %if.end140, label %if.then139, !dbg !5113

if.then139:                                       ; preds = %lor.lhs.false137, %land.lhs.true135
  br label %if.end140, !dbg !5114

if.end140:                                        ; preds = %if.then139, %lor.lhs.false137, %land.lhs.true133, %land.lhs.true131, %if.then129
  br label %while.cond141, !dbg !5116

while.cond141:                                    ; preds = %while.body144, %if.end140
  %61 = load i32, i32* @optind, align 4, !dbg !5117
  %62 = load i32, i32* %argc.addr, align 4, !dbg !5118
  %cmp142 = icmp slt i32 %61, %62, !dbg !5119
  br i1 %cmp142, label %while.body144, label %while.end148, !dbg !5116

while.body144:                                    ; preds = %while.cond141
  %63 = load i8**, i8*** %argv.addr, align 8, !dbg !5120
  %64 = load i32, i32* @optind, align 4, !dbg !5122
  %inc145 = add nsw i32 %64, 1, !dbg !5122
  store i32 %inc145, i32* @optind, align 4, !dbg !5122
  %idxprom146 = sext i32 %64 to i64, !dbg !5120
  %arrayidx147 = getelementptr inbounds i8*, i8** %63, i64 %idxprom146, !dbg !5120, !ctir !23
  %65 = load i8*, i8** %arrayidx147, align 8, !dbg !5120
  call void @treat_file(i8* %65), !dbg !5123
  br label %while.cond141, !dbg !5116, !llvm.loop !5124

while.end148:                                     ; preds = %while.cond141
  br label %if.end150, !dbg !5126

if.else149:                                       ; preds = %if.end126
  call void @treat_stdin(), !dbg !5127
  br label %if.end150

if.end150:                                        ; preds = %if.else149, %while.end148
  %66 = load i32, i32* @list, align 4, !dbg !5129
  %tobool151 = icmp ne i32 %66, 0, !dbg !5129
  br i1 %tobool151, label %land.lhs.true152, label %if.end158, !dbg !5131

land.lhs.true152:                                 ; preds = %if.end150
  %67 = load i32, i32* @quiet, align 4, !dbg !5132
  %tobool153 = icmp ne i32 %67, 0, !dbg !5132
  br i1 %tobool153, label %if.end158, label %land.lhs.true154, !dbg !5133

land.lhs.true154:                                 ; preds = %land.lhs.true152
  %68 = load i32, i32* %file_count, align 4, !dbg !5134
  %cmp155 = icmp sgt i32 %68, 1, !dbg !5135
  br i1 %cmp155, label %if.then157, label %if.end158, !dbg !5136

if.then157:                                       ; preds = %land.lhs.true154
  call void @do_list(i32 -1, i32 -1), !dbg !5137
  br label %if.end158, !dbg !5139

if.end158:                                        ; preds = %if.then157, %land.lhs.true154, %land.lhs.true152, %if.end150
  %69 = load i32, i32* @exit_code, align 4, !dbg !5140
  call void @do_exit(i32 %69), !dbg !5141
  %70 = load i32, i32* @exit_code, align 4, !dbg !5142
  ret i32 %70, !dbg !5143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @add_envopt(i32* %argcp, i8*** %argvp, i8* %env) #0 !dbg !5144 {
entry:
  %retval = alloca i8*, align 8
  %argcp.addr = alloca i32*, align 8
  %argvp.addr = alloca i8***, align 8
  %env.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !19
  %oargv = alloca i8**, align 8, !ctir !23
  %nargv = alloca i8**, align 8, !ctir !23
  %oargc = alloca i32, align 4, !ctir !12
  %nargc = alloca i32, align 4, !ctir !12
  store i32* %argcp, i32** %argcp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %argcp.addr, metadata !5148, metadata !DIExpression()), !dbg !5149
  store i8*** %argvp, i8**** %argvp.addr, align 8
  call void @llvm.dbg.declare(metadata i8**** %argvp.addr, metadata !5150, metadata !DIExpression()), !dbg !5151
  store i8* %env, i8** %env.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %env.addr, metadata !5152, metadata !DIExpression()), !dbg !5153
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5154, metadata !DIExpression()), !dbg !5155
  call void @llvm.dbg.declare(metadata i8*** %oargv, metadata !5156, metadata !DIExpression()), !dbg !5157
  call void @llvm.dbg.declare(metadata i8*** %nargv, metadata !5158, metadata !DIExpression()), !dbg !5159
  call void @llvm.dbg.declare(metadata i32* %oargc, metadata !5160, metadata !DIExpression()), !dbg !5161
  %0 = load i32*, i32** %argcp.addr, align 8, !dbg !5162
  %1 = load i32, i32* %0, align 4, !dbg !5163, !ctir !12
  store i32 %1, i32* %oargc, align 4, !dbg !5161
  call void @llvm.dbg.declare(metadata i32* %nargc, metadata !5164, metadata !DIExpression()), !dbg !5165
  store i32 0, i32* %nargc, align 4, !dbg !5165
  %2 = load i8*, i8** %env.addr, align 8, !dbg !5166
  %call = call i8* @getenv(i8* %2) #11, !dbg !5167
  store i8* %call, i8** %env.addr, align 8, !dbg !5168
  %3 = load i8*, i8** %env.addr, align 8, !dbg !5169
  %cmp = icmp eq i8* %3, null, !dbg !5171
  br i1 %cmp, label %if.then, label %if.end, !dbg !5172

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !5173
  br label %return, !dbg !5173

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %env.addr, align 8, !dbg !5174
  %call1 = call i64 @strlen(i8* %4) #9, !dbg !5175
  %add = add i64 %call1, 1, !dbg !5176
  %conv = trunc i64 %add to i32, !dbg !5175
  %call2 = call i8* @xmalloc(i32 %conv), !dbg !5177
  store i8* %call2, i8** %p, align 8, !dbg !5178
  %5 = load i8*, i8** %p, align 8, !dbg !5179
  %6 = load i8*, i8** %env.addr, align 8, !dbg !5180
  %call3 = call i8* @strcpy(i8* %5, i8* %6) #11, !dbg !5181
  store i8* %call3, i8** %env.addr, align 8, !dbg !5182
  %7 = load i8*, i8** %env.addr, align 8, !dbg !5183
  store i8* %7, i8** %p, align 8, !dbg !5185
  br label %for.cond, !dbg !5186

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i8*, i8** %p, align 8, !dbg !5187
  %9 = load i8, i8* %8, align 1, !dbg !5189, !ctir !20
  %tobool = icmp ne i8 %9, 0, !dbg !5190
  br i1 %tobool, label %for.body, label %for.end, !dbg !5190

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %p, align 8, !dbg !5191
  %call4 = call i64 @strspn(i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i64 0, i64 0)) #9, !dbg !5193
  %11 = load i8*, i8** %p, align 8, !dbg !5194
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %call4, !dbg !5194, !ctir !20
  store i8* %add.ptr, i8** %p, align 8, !dbg !5194
  %12 = load i8*, i8** %p, align 8, !dbg !5195
  %13 = load i8, i8* %12, align 1, !dbg !5197, !ctir !20
  %conv5 = sext i8 %13 to i32, !dbg !5197
  %cmp6 = icmp eq i32 %conv5, 0, !dbg !5198
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !5199

if.then8:                                         ; preds = %for.body
  br label %for.end, !dbg !5200

if.end9:                                          ; preds = %for.body
  %14 = load i8*, i8** %p, align 8, !dbg !5201
  %call10 = call i64 @strcspn(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i64 0, i64 0)) #9, !dbg !5202
  %15 = load i8*, i8** %p, align 8, !dbg !5203
  %add.ptr11 = getelementptr inbounds i8, i8* %15, i64 %call10, !dbg !5203, !ctir !20
  store i8* %add.ptr11, i8** %p, align 8, !dbg !5203
  %16 = load i8*, i8** %p, align 8, !dbg !5204
  %17 = load i8, i8* %16, align 1, !dbg !5206, !ctir !20
  %tobool12 = icmp ne i8 %17, 0, !dbg !5206
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !5207

if.then13:                                        ; preds = %if.end9
  %18 = load i8*, i8** %p, align 8, !dbg !5208
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1, !dbg !5208, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5208
  store i8 0, i8* %18, align 1, !dbg !5209, !ctir !20
  br label %if.end14, !dbg !5210

if.end14:                                         ; preds = %if.then13, %if.end9
  br label %for.inc, !dbg !5211

for.inc:                                          ; preds = %if.end14
  %19 = load i32, i32* %nargc, align 4, !dbg !5212
  %inc = add nsw i32 %19, 1, !dbg !5212
  store i32 %inc, i32* %nargc, align 4, !dbg !5212
  br label %for.cond, !dbg !5213, !llvm.loop !5214

for.end:                                          ; preds = %if.then8, %for.cond
  %20 = load i32, i32* %nargc, align 4, !dbg !5216
  %cmp15 = icmp eq i32 %20, 0, !dbg !5218
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !5219

if.then17:                                        ; preds = %for.end
  %21 = load i8*, i8** %env.addr, align 8, !dbg !5220
  call void @free(i8* %21) #11, !dbg !5222
  store i8* null, i8** %retval, align 8, !dbg !5223
  br label %return, !dbg !5223

if.end18:                                         ; preds = %for.end
  %22 = load i32, i32* %nargc, align 4, !dbg !5224
  %23 = load i32*, i32** %argcp.addr, align 8, !dbg !5225
  %24 = load i32, i32* %23, align 4, !dbg !5226, !ctir !12
  %add19 = add nsw i32 %24, %22, !dbg !5226
  store i32 %add19, i32* %23, align 4, !dbg !5226, !ctir !12
  %25 = load i32*, i32** %argcp.addr, align 8, !dbg !5227
  %26 = load i32, i32* %25, align 4, !dbg !5228, !ctir !12
  %add20 = add nsw i32 %26, 1, !dbg !5229
  %conv21 = sext i32 %add20 to i64, !dbg !5228
  %call22 = call noalias i8* @calloc(i64 %conv21, i64 8) #11, !dbg !5230
  %27 = bitcast i8* %call22 to i8**, !dbg !5231
  store i8** %27, i8*** %nargv, align 8, !dbg !5232
  %28 = load i8**, i8*** %nargv, align 8, !dbg !5233
  %cmp23 = icmp eq i8** %28, null, !dbg !5235
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !5236

if.then25:                                        ; preds = %if.end18
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.62, i64 0, i64 0)), !dbg !5237
  br label %if.end26, !dbg !5237

if.end26:                                         ; preds = %if.then25, %if.end18
  %29 = load i8***, i8**** %argvp.addr, align 8, !dbg !5238
  %30 = load i8**, i8*** %29, align 8, !dbg !5239, !ctir !23
  store i8** %30, i8*** %oargv, align 8, !dbg !5240
  %31 = load i8**, i8*** %nargv, align 8, !dbg !5241
  %32 = load i8***, i8**** %argvp.addr, align 8, !dbg !5242
  store i8** %31, i8*** %32, align 8, !dbg !5243, !ctir !23
  %33 = load i32, i32* %oargc, align 4, !dbg !5244
  %dec = add nsw i32 %33, -1, !dbg !5244
  store i32 %dec, i32* %oargc, align 4, !dbg !5244
  %cmp27 = icmp slt i32 %33, 0, !dbg !5246
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !5247

if.then29:                                        ; preds = %if.end26
  call void @error(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i64 0, i64 0)), !dbg !5248
  br label %if.end30, !dbg !5248

if.end30:                                         ; preds = %if.then29, %if.end26
  %34 = load i8**, i8*** %oargv, align 8, !dbg !5249
  %incdec.ptr31 = getelementptr inbounds i8*, i8** %34, i32 1, !dbg !5249, !ctir !19
  store i8** %incdec.ptr31, i8*** %oargv, align 8, !dbg !5249
  %35 = load i8*, i8** %34, align 8, !dbg !5250, !ctir !19
  %36 = load i8**, i8*** %nargv, align 8, !dbg !5251
  %incdec.ptr32 = getelementptr inbounds i8*, i8** %36, i32 1, !dbg !5251, !ctir !19
  store i8** %incdec.ptr32, i8*** %nargv, align 8, !dbg !5251
  store i8* %35, i8** %36, align 8, !dbg !5252, !ctir !19
  %37 = load i8*, i8** %env.addr, align 8, !dbg !5253
  store i8* %37, i8** %p, align 8, !dbg !5255
  br label %for.cond33, !dbg !5256

for.cond33:                                       ; preds = %for.inc42, %if.end30
  %38 = load i32, i32* %nargc, align 4, !dbg !5257
  %cmp34 = icmp sgt i32 %38, 0, !dbg !5259
  br i1 %cmp34, label %for.body36, label %for.end44, !dbg !5260

for.body36:                                       ; preds = %for.cond33
  %39 = load i8*, i8** %p, align 8, !dbg !5261
  %call37 = call i64 @strspn(i8* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.71, i64 0, i64 0)) #9, !dbg !5263
  %40 = load i8*, i8** %p, align 8, !dbg !5264
  %add.ptr38 = getelementptr inbounds i8, i8* %40, i64 %call37, !dbg !5264, !ctir !20
  store i8* %add.ptr38, i8** %p, align 8, !dbg !5264
  %41 = load i8*, i8** %p, align 8, !dbg !5265
  %42 = load i8**, i8*** %nargv, align 8, !dbg !5266
  %incdec.ptr39 = getelementptr inbounds i8*, i8** %42, i32 1, !dbg !5266, !ctir !19
  store i8** %incdec.ptr39, i8*** %nargv, align 8, !dbg !5266
  store i8* %41, i8** %42, align 8, !dbg !5267, !ctir !19
  br label %while.cond, !dbg !5268

while.cond:                                       ; preds = %while.body, %for.body36
  %43 = load i8*, i8** %p, align 8, !dbg !5269
  %incdec.ptr40 = getelementptr inbounds i8, i8* %43, i32 1, !dbg !5269, !ctir !20
  store i8* %incdec.ptr40, i8** %p, align 8, !dbg !5269
  %44 = load i8, i8* %43, align 1, !dbg !5270, !ctir !20
  %tobool41 = icmp ne i8 %44, 0, !dbg !5268
  br i1 %tobool41, label %while.body, label %while.end, !dbg !5268

while.body:                                       ; preds = %while.cond
  br label %while.cond, !dbg !5268, !llvm.loop !5271

while.end:                                        ; preds = %while.cond
  br label %for.inc42, !dbg !5273

for.inc42:                                        ; preds = %while.end
  %45 = load i32, i32* %nargc, align 4, !dbg !5274
  %dec43 = add nsw i32 %45, -1, !dbg !5274
  store i32 %dec43, i32* %nargc, align 4, !dbg !5274
  br label %for.cond33, !dbg !5275, !llvm.loop !5276

for.end44:                                        ; preds = %for.cond33
  br label %while.cond45, !dbg !5278

while.cond45:                                     ; preds = %while.body48, %for.end44
  %46 = load i32, i32* %oargc, align 4, !dbg !5279
  %dec46 = add nsw i32 %46, -1, !dbg !5279
  store i32 %dec46, i32* %oargc, align 4, !dbg !5279
  %tobool47 = icmp ne i32 %46, 0, !dbg !5278
  br i1 %tobool47, label %while.body48, label %while.end51, !dbg !5278

while.body48:                                     ; preds = %while.cond45
  %47 = load i8**, i8*** %oargv, align 8, !dbg !5280
  %incdec.ptr49 = getelementptr inbounds i8*, i8** %47, i32 1, !dbg !5280, !ctir !19
  store i8** %incdec.ptr49, i8*** %oargv, align 8, !dbg !5280
  %48 = load i8*, i8** %47, align 8, !dbg !5281, !ctir !19
  %49 = load i8**, i8*** %nargv, align 8, !dbg !5282
  %incdec.ptr50 = getelementptr inbounds i8*, i8** %49, i32 1, !dbg !5282, !ctir !19
  store i8** %incdec.ptr50, i8*** %nargv, align 8, !dbg !5282
  store i8* %48, i8** %49, align 8, !dbg !5283, !ctir !19
  br label %while.cond45, !dbg !5278, !llvm.loop !5284

while.end51:                                      ; preds = %while.cond45
  %50 = load i8**, i8*** %nargv, align 8, !dbg !5286
  store i8* null, i8** %50, align 8, !dbg !5287, !ctir !19
  %51 = load i8*, i8** %env.addr, align 8, !dbg !5288
  store i8* %51, i8** %retval, align 8, !dbg !5289
  br label %return, !dbg !5289

return:                                           ; preds = %while.end51, %if.then17, %if.then
  %52 = load i8*, i8** %retval, align 8, !dbg !5290
  ret i8* %52, !dbg !5290
}

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @abort_gzip_signal() #0 !dbg !5291 {
entry:
  call void @do_remove(), !dbg !5292
  call void @_exit(i32 1) #13, !dbg !5293
  unreachable, !dbg !5293
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getopt_long(i32 %argc, i8** %argv, i8* %options, %struct.option* %long_options, i32* %opt_index) #0 !dbg !5294 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca i8*, align 8
  %long_options.addr = alloca %struct.option*, align 8
  %opt_index.addr = alloca i32*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !5297, metadata !DIExpression()), !dbg !5298
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !5299, metadata !DIExpression()), !dbg !5300
  store i8* %options, i8** %options.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %options.addr, metadata !5301, metadata !DIExpression()), !dbg !5302
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !5303, metadata !DIExpression()), !dbg !5304
  store i32* %opt_index, i32** %opt_index.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %opt_index.addr, metadata !5305, metadata !DIExpression()), !dbg !5306
  %0 = load i32, i32* %argc.addr, align 4, !dbg !5307
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !5308
  %2 = load i8*, i8** %options.addr, align 8, !dbg !5309
  %3 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !5310
  %4 = load i32*, i32** %opt_index.addr, align 8, !dbg !5311
  %call = call i32 @_getopt_internal(i32 %0, i8** %1, i8* %2, %struct.option* %3, i32* %4, i32 0), !dbg !5312
  ret i32 %call, !dbg !5313
}

; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @usage() #0 !dbg !5314 {
entry:
  %0 = load i8*, i8** @progname, align 8, !dbg !5315
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.84, i64 0, i64 0), i8* %0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.85, i64 0, i64 0)), !dbg !5316
  ret void, !dbg !5317
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @help() #0 !dbg !692 {
entry:
  %p = alloca i8**, align 8, !ctir !23
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !5318, metadata !DIExpression()), !dbg !5319
  store i8** getelementptr inbounds ([20 x i8*], [20 x i8*]* @help.help_msg, i64 0, i64 0), i8*** %p, align 8, !dbg !5319
  %0 = load i8*, i8** @progname, align 8, !dbg !5320
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.105, i64 0, i64 0), i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i64 0, i64 0)), !dbg !5321
  call void @usage(), !dbg !5322
  br label %while.cond, !dbg !5323

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8**, i8*** %p, align 8, !dbg !5324
  %2 = load i8*, i8** %1, align 8, !dbg !5325, !ctir !19
  %tobool = icmp ne i8* %2, null, !dbg !5323
  br i1 %tobool, label %while.body, label %while.end, !dbg !5323

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %p, align 8, !dbg !5326
  %incdec.ptr = getelementptr inbounds i8*, i8** %3, i32 1, !dbg !5326, !ctir !19
  store i8** %incdec.ptr, i8*** %p, align 8, !dbg !5326
  %4 = load i8*, i8** %3, align 8, !dbg !5327, !ctir !19
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.108, i64 0, i64 0), i8* %4), !dbg !5328
  br label %while.cond, !dbg !5323, !llvm.loop !5329

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5331
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @license() #0 !dbg !5332 {
entry:
  %p = alloca i8**, align 8, !ctir !23
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !5333, metadata !DIExpression()), !dbg !5334
  store i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @license_msg, i64 0, i64 0), i8*** %p, align 8, !dbg !5334
  %0 = load i8*, i8** @progname, align 8, !dbg !5335
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.105, i64 0, i64 0), i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i64 0, i64 0)), !dbg !5336
  br label %while.cond, !dbg !5337

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8**, i8*** %p, align 8, !dbg !5338
  %2 = load i8*, i8** %1, align 8, !dbg !5339, !ctir !19
  %tobool = icmp ne i8* %2, null, !dbg !5337
  br i1 %tobool, label %while.body, label %while.end, !dbg !5337

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %p, align 8, !dbg !5340
  %incdec.ptr = getelementptr inbounds i8*, i8** %3, i32 1, !dbg !5340, !ctir !19
  store i8** %incdec.ptr, i8*** %p, align 8, !dbg !5340
  %4 = load i8*, i8** %3, align 8, !dbg !5341, !ctir !19
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.108, i64 0, i64 0), i8* %4), !dbg !5342
  br label %while.cond, !dbg !5337, !llvm.loop !5343

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5345
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version() #0 !dbg !5346 {
entry:
  call void @license(), !dbg !5347
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.115, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i64 0, i64 0)), !dbg !5348
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i64 0, i64 0)), !dbg !5349
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.119, i64 0, i64 0)), !dbg !5350
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.120, i64 0, i64 0)), !dbg !5351
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.121, i64 0, i64 0)), !dbg !5352
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.122, i64 0, i64 0)), !dbg !5353
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)), !dbg !5354
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.124, i64 0, i64 0)), !dbg !5355
  ret void, !dbg !5356
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @lzw(i32 %in, i32 %out) #0 !dbg !5357 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !5358, metadata !DIExpression()), !dbg !5359
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !5360, metadata !DIExpression()), !dbg !5361
  %0 = load i32, i32* @msg_done, align 4, !dbg !5362
  %tobool = icmp ne i32 %0, 0, !dbg !5362
  br i1 %tobool, label %if.then, label %if.end, !dbg !5364

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !5365
  br label %return, !dbg !5365

if.end:                                           ; preds = %entry
  store i32 1, i32* @msg_done, align 4, !dbg !5366
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5367
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.52, i64 0, i64 0)), !dbg !5368
  %2 = load i32, i32* %in.addr, align 4, !dbg !5369
  %3 = load i32, i32* %out.addr, align 4, !dbg !5371
  %cmp = icmp ne i32 %2, %3, !dbg !5372
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !5373

if.then1:                                         ; preds = %if.end
  store i32 1, i32* @exit_code, align 4, !dbg !5374
  br label %if.end2, !dbg !5376

if.end2:                                          ; preds = %if.then1, %if.end
  store i32 1, i32* %retval, align 4, !dbg !5377
  br label %return, !dbg !5377

return:                                           ; preds = %if.end2, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !5378
  ret i32 %4, !dbg !5378
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treat_file(i8* %iname) #0 !dbg !5379 {
entry:
  %iname.addr = alloca i8*, align 8
  %cflag = alloca i32, align 4, !ctir !12
  %st = alloca %struct.stat, align 8, !ctir !575
  store i8* %iname, i8** %iname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %iname.addr, metadata !5380, metadata !DIExpression()), !dbg !5381
  %0 = load i8*, i8** %iname.addr, align 8, !dbg !5382
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.149, i64 0, i64 0)) #9, !dbg !5382
  %cmp = icmp eq i32 %call, 0, !dbg !5382
  br i1 %cmp, label %if.then, label %if.end, !dbg !5384

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %cflag, metadata !5385, metadata !DIExpression()), !dbg !5387
  %1 = load i32, i32* @to_stdout, align 4, !dbg !5388
  store i32 %1, i32* %cflag, align 4, !dbg !5387
  call void @treat_stdin(), !dbg !5389
  %2 = load i32, i32* %cflag, align 4, !dbg !5390
  store i32 %2, i32* @to_stdout, align 4, !dbg !5391
  br label %if.end155, !dbg !5392

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %iname.addr, align 8, !dbg !5393
  %call1 = call i32 @get_istat(i8* %3, %struct.stat* @istat), !dbg !5395
  %cmp2 = icmp ne i32 %call1, 0, !dbg !5396
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !5397

if.then3:                                         ; preds = %if.end
  br label %if.end155, !dbg !5398

if.end4:                                          ; preds = %if.end
  %4 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 3), align 8, !dbg !5399, !ctir !364
  %and = and i32 %4, 61440, !dbg !5399
  %cmp5 = icmp eq i32 %and, 16384, !dbg !5399
  br i1 %cmp5, label %if.then6, label %if.end16, !dbg !5401

if.then6:                                         ; preds = %if.end4
  %5 = load i32, i32* @recursive, align 4, !dbg !5402
  %tobool = icmp ne i32 %5, 0, !dbg !5402
  br i1 %tobool, label %if.then7, label %if.else, !dbg !5405

if.then7:                                         ; preds = %if.then6
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !5406, metadata !DIExpression()), !dbg !5408
  %6 = bitcast %struct.stat* %st to i8*, !dbg !5409
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 bitcast (%struct.stat* @istat to i8*), i64 144, i1 false), !dbg !5409
  %7 = load i8*, i8** %iname.addr, align 8, !dbg !5410
  call void @treat_dir(i8* %7), !dbg !5411
  %8 = load i8*, i8** %iname.addr, align 8, !dbg !5412
  call void @reset_times(i8* %8, %struct.stat* %st), !dbg !5413
  br label %if.end15, !dbg !5414

if.else:                                          ; preds = %if.then6
  %9 = load i32, i32* @quiet, align 4, !dbg !5415
  %tobool8 = icmp ne i32 %9, 0, !dbg !5415
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !5418

if.then9:                                         ; preds = %if.else
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5415
  %11 = load i8*, i8** @progname, align 8, !dbg !5415
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.150, i64 0, i64 0), i8* %11, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !5415
  br label %if.end11, !dbg !5415

if.end11:                                         ; preds = %if.then9, %if.else
  %12 = load i32, i32* @exit_code, align 4, !dbg !5419
  %cmp12 = icmp eq i32 %12, 0, !dbg !5419
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !5418

if.then13:                                        ; preds = %if.end11
  store i32 2, i32* @exit_code, align 4, !dbg !5419
  br label %if.end14, !dbg !5419

if.end14:                                         ; preds = %if.then13, %if.end11
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then7
  br label %if.end155, !dbg !5421

if.end16:                                         ; preds = %if.end4
  %13 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 3), align 8, !dbg !5422, !ctir !364
  %and17 = and i32 %13, 61440, !dbg !5422
  %cmp18 = icmp eq i32 %and17, 32768, !dbg !5422
  br i1 %cmp18, label %if.end27, label %if.then19, !dbg !5424

if.then19:                                        ; preds = %if.end16
  %14 = load i32, i32* @quiet, align 4, !dbg !5425
  %tobool20 = icmp ne i32 %14, 0, !dbg !5425
  br i1 %tobool20, label %if.end23, label %if.then21, !dbg !5429

if.then21:                                        ; preds = %if.then19
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5425
  %16 = load i8*, i8** @progname, align 8, !dbg !5425
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.151, i64 0, i64 0), i8* %16, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !5425
  br label %if.end23, !dbg !5425

if.end23:                                         ; preds = %if.then21, %if.then19
  %17 = load i32, i32* @exit_code, align 4, !dbg !5430
  %cmp24 = icmp eq i32 %17, 0, !dbg !5430
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !5429

if.then25:                                        ; preds = %if.end23
  store i32 2, i32* @exit_code, align 4, !dbg !5430
  br label %if.end26, !dbg !5430

if.end26:                                         ; preds = %if.then25, %if.end23
  br label %if.end155, !dbg !5432

if.end27:                                         ; preds = %if.end16
  %18 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 8, !dbg !5433, !ctir !365
  %cmp28 = icmp ugt i64 %18, 1, !dbg !5435
  br i1 %cmp28, label %land.lhs.true, label %if.end41, !dbg !5436

land.lhs.true:                                    ; preds = %if.end27
  %19 = load i32, i32* @to_stdout, align 4, !dbg !5437
  %tobool29 = icmp ne i32 %19, 0, !dbg !5437
  br i1 %tobool29, label %if.end41, label %land.lhs.true30, !dbg !5438

land.lhs.true30:                                  ; preds = %land.lhs.true
  %20 = load i32, i32* @force, align 4, !dbg !5439
  %tobool31 = icmp ne i32 %20, 0, !dbg !5439
  br i1 %tobool31, label %if.end41, label %if.then32, !dbg !5440

if.then32:                                        ; preds = %land.lhs.true30
  %21 = load i32, i32* @quiet, align 4, !dbg !5441
  %tobool33 = icmp ne i32 %21, 0, !dbg !5441
  br i1 %tobool33, label %if.end37, label %if.then34, !dbg !5445

if.then34:                                        ; preds = %if.then32
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5441
  %23 = load i8*, i8** @progname, align 8, !dbg !5441
  %24 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 8, !dbg !5441, !ctir !365
  %sub = sub i64 %24, 1, !dbg !5441
  %25 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 8, !dbg !5441, !ctir !365
  %cmp35 = icmp ugt i64 %25, 2, !dbg !5441
  %26 = zext i1 %cmp35 to i64, !dbg !5441
  %cond = select i1 %cmp35, i32 115, i32 32, !dbg !5441
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.152, i64 0, i64 0), i8* %23, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i64 %sub, i32 %cond), !dbg !5441
  br label %if.end37, !dbg !5441

if.end37:                                         ; preds = %if.then34, %if.then32
  %27 = load i32, i32* @exit_code, align 4, !dbg !5446
  %cmp38 = icmp eq i32 %27, 0, !dbg !5446
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !5445

if.then39:                                        ; preds = %if.end37
  store i32 2, i32* @exit_code, align 4, !dbg !5446
  br label %if.end40, !dbg !5446

if.end40:                                         ; preds = %if.then39, %if.end37
  br label %if.end155, !dbg !5448

if.end41:                                         ; preds = %land.lhs.true30, %land.lhs.true, %if.end27
  %28 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 8), align 8, !dbg !5449, !ctir !81
  store i64 %28, i64* @ifile_size, align 8, !dbg !5450
  %29 = load i32, i32* @no_time, align 4, !dbg !5451
  %tobool42 = icmp ne i32 %29, 0, !dbg !5451
  br i1 %tobool42, label %land.lhs.true43, label %cond.false, !dbg !5452

land.lhs.true43:                                  ; preds = %if.end41
  %30 = load i32, i32* @list, align 4, !dbg !5453
  %tobool44 = icmp ne i32 %30, 0, !dbg !5453
  br i1 %tobool44, label %cond.false, label %cond.true, !dbg !5451

cond.true:                                        ; preds = %land.lhs.true43
  br label %cond.end, !dbg !5451

cond.false:                                       ; preds = %land.lhs.true43, %if.end41
  %31 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 12, i32 0), align 8, !dbg !5454, !ctir !144
  br label %cond.end, !dbg !5451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond45 = phi i64 [ 0, %cond.true ], [ %31, %cond.false ], !dbg !5451
  store i64 %cond45, i64* @time_stamp, align 8, !dbg !5455
  %32 = load i32, i32* @to_stdout, align 4, !dbg !5456
  %tobool46 = icmp ne i32 %32, 0, !dbg !5456
  br i1 %tobool46, label %land.lhs.true47, label %if.else53, !dbg !5458

land.lhs.true47:                                  ; preds = %cond.end
  %33 = load i32, i32* @list, align 4, !dbg !5459
  %tobool48 = icmp ne i32 %33, 0, !dbg !5459
  br i1 %tobool48, label %if.else53, label %land.lhs.true49, !dbg !5460

land.lhs.true49:                                  ; preds = %land.lhs.true47
  %34 = load i32, i32* @test, align 4, !dbg !5461
  %tobool50 = icmp ne i32 %34, 0, !dbg !5461
  br i1 %tobool50, label %if.else53, label %if.then51, !dbg !5462

if.then51:                                        ; preds = %land.lhs.true49
  %call52 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0)) #11, !dbg !5463
  br label %if.end58, !dbg !5465

if.else53:                                        ; preds = %land.lhs.true49, %land.lhs.true47, %cond.end
  %call54 = call i32 @make_ofname(), !dbg !5466
  %cmp55 = icmp ne i32 %call54, 0, !dbg !5468
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !5469

if.then56:                                        ; preds = %if.else53
  br label %if.end155, !dbg !5470

if.end57:                                         ; preds = %if.else53
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then51
  %35 = load i32, i32* @ascii, align 4, !dbg !5472
  %tobool59 = icmp ne i32 %35, 0, !dbg !5472
  br i1 %tobool59, label %land.rhs, label %land.end, !dbg !5472

land.rhs:                                         ; preds = %if.end58
  %36 = load i32, i32* @decompress, align 4, !dbg !5472
  %tobool60 = icmp ne i32 %36, 0, !dbg !5472
  %lnot = xor i1 %tobool60, true, !dbg !5472
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end58
  %37 = phi i1 [ false, %if.end58 ], [ %lnot, %land.rhs ], !dbg !5473
  %38 = zext i1 %37 to i64, !dbg !5472
  %cond61 = select i1 %37, i32 0, i32 0, !dbg !5472
  %call62 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %cond61, i32 384), !dbg !5472
  store i32 %call62, i32* @ifd, align 4, !dbg !5474
  %39 = load i32, i32* @ifd, align 4, !dbg !5475
  %cmp63 = icmp eq i32 %39, -1, !dbg !5477
  br i1 %cmp63, label %if.then64, label %if.end65, !dbg !5478

if.then64:                                        ; preds = %land.end
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !5479
  br label %if.end155, !dbg !5481

if.end65:                                         ; preds = %land.end
  call void @clear_bufs(), !dbg !5482
  store i32 0, i32* @part_nb, align 4, !dbg !5483
  %40 = load i32, i32* @decompress, align 4, !dbg !5484
  %tobool66 = icmp ne i32 %40, 0, !dbg !5484
  br i1 %tobool66, label %if.then67, label %if.end73, !dbg !5486

if.then67:                                        ; preds = %if.end65
  %41 = load i32, i32* @ifd, align 4, !dbg !5487
  %call68 = call i32 @get_method(i32 %41), !dbg !5489
  store i32 %call68, i32* @method, align 4, !dbg !5490
  %42 = load i32, i32* @method, align 4, !dbg !5491
  %cmp69 = icmp slt i32 %42, 0, !dbg !5493
  br i1 %cmp69, label %if.then70, label %if.end72, !dbg !5494

if.then70:                                        ; preds = %if.then67
  %43 = load i32, i32* @ifd, align 4, !dbg !5495
  %call71 = call i32 @close(i32 %43), !dbg !5497
  br label %if.end155, !dbg !5498

if.end72:                                         ; preds = %if.then67
  br label %if.end73, !dbg !5499

if.end73:                                         ; preds = %if.end72, %if.end65
  %44 = load i32, i32* @list, align 4, !dbg !5500
  %tobool74 = icmp ne i32 %44, 0, !dbg !5500
  br i1 %tobool74, label %if.then75, label %if.end77, !dbg !5502

if.then75:                                        ; preds = %if.end73
  %45 = load i32, i32* @ifd, align 4, !dbg !5503
  %46 = load i32, i32* @method, align 4, !dbg !5505
  call void @do_list(i32 %45, i32 %46), !dbg !5506
  %47 = load i32, i32* @ifd, align 4, !dbg !5507
  %call76 = call i32 @close(i32 %47), !dbg !5508
  br label %if.end155, !dbg !5509

if.end77:                                         ; preds = %if.end73
  %48 = load i32, i32* @to_stdout, align 4, !dbg !5510
  %tobool78 = icmp ne i32 %48, 0, !dbg !5510
  br i1 %tobool78, label %if.then79, label %if.else81, !dbg !5512

if.then79:                                        ; preds = %if.end77
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5513
  %call80 = call i32 @fileno(%struct._IO_FILE* %49) #11, !dbg !5515
  store i32 %call80, i32* @ofd, align 4, !dbg !5516
  br label %if.end96, !dbg !5517

if.else81:                                        ; preds = %if.end77
  %call82 = call i32 @create_outfile(), !dbg !5518
  %cmp83 = icmp ne i32 %call82, 0, !dbg !5521
  br i1 %cmp83, label %if.then84, label %if.end85, !dbg !5522

if.then84:                                        ; preds = %if.else81
  br label %if.end155, !dbg !5523

if.end85:                                         ; preds = %if.else81
  %50 = load i32, i32* @decompress, align 4, !dbg !5524
  %tobool86 = icmp ne i32 %50, 0, !dbg !5524
  br i1 %tobool86, label %if.end95, label %land.lhs.true87, !dbg !5526

land.lhs.true87:                                  ; preds = %if.end85
  %51 = load i32, i32* @save_orig_name, align 4, !dbg !5527
  %tobool88 = icmp ne i32 %51, 0, !dbg !5527
  br i1 %tobool88, label %land.lhs.true89, label %if.end95, !dbg !5528

land.lhs.true89:                                  ; preds = %land.lhs.true87
  %52 = load i32, i32* @verbose, align 4, !dbg !5529
  %tobool90 = icmp ne i32 %52, 0, !dbg !5529
  br i1 %tobool90, label %if.end95, label %land.lhs.true91, !dbg !5530

land.lhs.true91:                                  ; preds = %land.lhs.true89
  %53 = load i32, i32* @quiet, align 4, !dbg !5531
  %tobool92 = icmp ne i32 %53, 0, !dbg !5531
  br i1 %tobool92, label %if.end95, label %if.then93, !dbg !5532

if.then93:                                        ; preds = %land.lhs.true91
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5533
  %55 = load i8*, i8** @progname, align 8, !dbg !5535
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.153, i64 0, i64 0), i8* %55, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !5536
  br label %if.end95, !dbg !5537

if.end95:                                         ; preds = %if.then93, %land.lhs.true91, %land.lhs.true89, %land.lhs.true87, %if.end85
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then79
  %56 = load i32, i32* @save_orig_name, align 4, !dbg !5538
  %tobool97 = icmp ne i32 %56, 0, !dbg !5538
  br i1 %tobool97, label %if.end101, label %if.then98, !dbg !5540

if.then98:                                        ; preds = %if.end96
  %57 = load i32, i32* @no_name, align 4, !dbg !5541
  %tobool99 = icmp ne i32 %57, 0, !dbg !5542
  %lnot100 = xor i1 %tobool99, true, !dbg !5542
  %lnot.ext = zext i1 %lnot100 to i32, !dbg !5542
  store i32 %lnot.ext, i32* @save_orig_name, align 4, !dbg !5543
  br label %if.end101, !dbg !5544

if.end101:                                        ; preds = %if.then98, %if.end96
  %58 = load i32, i32* @verbose, align 4, !dbg !5545
  %tobool102 = icmp ne i32 %58, 0, !dbg !5545
  br i1 %tobool102, label %if.then103, label %if.end105, !dbg !5547

if.then103:                                       ; preds = %if.end101
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5548
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.154, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !5550
  br label %if.end105, !dbg !5551

if.end105:                                        ; preds = %if.then103, %if.end101
  br label %for.cond, !dbg !5552

for.cond:                                         ; preds = %if.end117, %if.end105
  %60 = load i32 (i32, i32)*, i32 (i32, i32)** @work, align 8, !dbg !5553
  %61 = load i32, i32* @ifd, align 4, !dbg !5558
  %62 = load i32, i32* @ofd, align 4, !dbg !5559
  %call106 = call i32 %60(i32 %61, i32 %62), !dbg !5560
  %cmp107 = icmp ne i32 %call106, 0, !dbg !5561
  br i1 %cmp107, label %if.then108, label %if.end109, !dbg !5562

if.then108:                                       ; preds = %for.cond
  store i32 -1, i32* @method, align 4, !dbg !5563
  br label %for.end, !dbg !5565

if.end109:                                        ; preds = %for.cond
  %call110 = call i32 @input_eof(), !dbg !5566
  %tobool111 = icmp ne i32 %call110, 0, !dbg !5566
  br i1 %tobool111, label %if.then112, label %if.end113, !dbg !5568

if.then112:                                       ; preds = %if.end109
  br label %for.end, !dbg !5569

if.end113:                                        ; preds = %if.end109
  %63 = load i32, i32* @ifd, align 4, !dbg !5570
  %call114 = call i32 @get_method(i32 %63), !dbg !5571
  store i32 %call114, i32* @method, align 4, !dbg !5572
  %64 = load i32, i32* @method, align 4, !dbg !5573
  %cmp115 = icmp slt i32 %64, 0, !dbg !5575
  br i1 %cmp115, label %if.then116, label %if.end117, !dbg !5576

if.then116:                                       ; preds = %if.end113
  br label %for.end, !dbg !5577

if.end117:                                        ; preds = %if.end113
  store i64 0, i64* @bytes_out, align 8, !dbg !5578
  br label %for.cond, !dbg !5579, !llvm.loop !5580

for.end:                                          ; preds = %if.then116, %if.then112, %if.then108
  %65 = load i32, i32* @ifd, align 4, !dbg !5583
  %call118 = call i32 @close(i32 %65), !dbg !5584
  %66 = load i32, i32* @to_stdout, align 4, !dbg !5585
  %tobool119 = icmp ne i32 %66, 0, !dbg !5585
  br i1 %tobool119, label %if.end125, label %if.then120, !dbg !5587

if.then120:                                       ; preds = %for.end
  call void @copy_stat(%struct.stat* @istat), !dbg !5588
  %67 = load i32, i32* @ofd, align 4, !dbg !5590
  %call121 = call i32 @close(i32 %67), !dbg !5592
  %tobool122 = icmp ne i32 %call121, 0, !dbg !5592
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !5593

if.then123:                                       ; preds = %if.then120
  call void @write_error(), !dbg !5594
  br label %if.end124, !dbg !5594

if.end124:                                        ; preds = %if.then123, %if.then120
  br label %if.end125, !dbg !5595

if.end125:                                        ; preds = %if.end124, %for.end
  %68 = load i32, i32* @method, align 4, !dbg !5596
  %cmp126 = icmp eq i32 %68, -1, !dbg !5598
  br i1 %cmp126, label %if.then127, label %if.end132, !dbg !5599

if.then127:                                       ; preds = %if.end125
  %69 = load i32, i32* @to_stdout, align 4, !dbg !5600
  %tobool128 = icmp ne i32 %69, 0, !dbg !5600
  br i1 %tobool128, label %if.end131, label %if.then129, !dbg !5603

if.then129:                                       ; preds = %if.then127
  %call130 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !5604
  br label %if.end131, !dbg !5604

if.end131:                                        ; preds = %if.then129, %if.then127
  br label %if.end155, !dbg !5605

if.end132:                                        ; preds = %if.end125
  %70 = load i32, i32* @verbose, align 4, !dbg !5606
  %tobool133 = icmp ne i32 %70, 0, !dbg !5606
  br i1 %tobool133, label %if.then134, label %if.end155, !dbg !5608

if.then134:                                       ; preds = %if.end132
  %71 = load i32, i32* @test, align 4, !dbg !5609
  %tobool135 = icmp ne i32 %71, 0, !dbg !5609
  br i1 %tobool135, label %if.then136, label %if.else138, !dbg !5612

if.then136:                                       ; preds = %if.then134
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5613
  %call137 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.155, i64 0, i64 0)), !dbg !5615
  br label %if.end147, !dbg !5616

if.else138:                                       ; preds = %if.then134
  %73 = load i32, i32* @decompress, align 4, !dbg !5617
  %tobool139 = icmp ne i32 %73, 0, !dbg !5617
  br i1 %tobool139, label %if.then140, label %if.else143, !dbg !5619

if.then140:                                       ; preds = %if.else138
  %74 = load i64, i64* @bytes_out, align 8, !dbg !5620
  %75 = load i64, i64* @bytes_in, align 8, !dbg !5622
  %76 = load i64, i64* @header_bytes, align 8, !dbg !5623
  %sub141 = sub nsw i64 %75, %76, !dbg !5624
  %sub142 = sub nsw i64 %74, %sub141, !dbg !5625
  %77 = load i64, i64* @bytes_out, align 8, !dbg !5626
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5627
  call void @display_ratio(i64 %sub142, i64 %77, %struct._IO_FILE* %78), !dbg !5628
  br label %if.end146, !dbg !5629

if.else143:                                       ; preds = %if.else138
  %79 = load i64, i64* @bytes_in, align 8, !dbg !5630
  %80 = load i64, i64* @bytes_out, align 8, !dbg !5632
  %81 = load i64, i64* @header_bytes, align 8, !dbg !5633
  %sub144 = sub nsw i64 %80, %81, !dbg !5634
  %sub145 = sub nsw i64 %79, %sub144, !dbg !5635
  %82 = load i64, i64* @bytes_in, align 8, !dbg !5636
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5637
  call void @display_ratio(i64 %sub145, i64 %82, %struct._IO_FILE* %83), !dbg !5638
  br label %if.end146

if.end146:                                        ; preds = %if.else143, %if.then140
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.then136
  %84 = load i32, i32* @test, align 4, !dbg !5639
  %tobool148 = icmp ne i32 %84, 0, !dbg !5639
  br i1 %tobool148, label %if.end153, label %land.lhs.true149, !dbg !5641

land.lhs.true149:                                 ; preds = %if.end147
  %85 = load i32, i32* @to_stdout, align 4, !dbg !5642
  %tobool150 = icmp ne i32 %85, 0, !dbg !5642
  br i1 %tobool150, label %if.end153, label %if.then151, !dbg !5643

if.then151:                                       ; preds = %land.lhs.true149
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5644
  %call152 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.156, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !5646
  br label %if.end153, !dbg !5647

if.end153:                                        ; preds = %if.then151, %land.lhs.true149, %if.end147
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5648
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)), !dbg !5649
  br label %if.end155, !dbg !5650

if.end155:                                        ; preds = %if.then, %if.then3, %if.end15, %if.end26, %if.end40, %if.then56, %if.then64, %if.then70, %if.then75, %if.then84, %if.end131, %if.end153, %if.end132
  ret void, !dbg !5651
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treat_stdin() #0 !dbg !5652 {
entry:
  %0 = load i32, i32* @force, align 4, !dbg !5653
  %tobool = icmp ne i32 %0, 0, !dbg !5653
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5655

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @list, align 4, !dbg !5656
  %tobool1 = icmp ne i32 %1, 0, !dbg !5656
  br i1 %tobool1, label %if.end, label %land.lhs.true2, !dbg !5657

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* @decompress, align 4, !dbg !5658
  %tobool3 = icmp ne i32 %2, 0, !dbg !5658
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5658

cond.true:                                        ; preds = %land.lhs.true2
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !5659
  br label %cond.end, !dbg !5658

cond.false:                                       ; preds = %land.lhs.true2
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5660
  br label %cond.end, !dbg !5658

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %3, %cond.true ], [ %4, %cond.false ], !dbg !5658
  %call = call i32 @fileno(%struct._IO_FILE* %cond) #11, !dbg !5661
  %call4 = call i32 @isatty(i32 %call) #11, !dbg !5662
  %tobool5 = icmp ne i32 %call4, 0, !dbg !5662
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5663

if.then:                                          ; preds = %cond.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5664
  %6 = load i8*, i8** @progname, align 8, !dbg !5666
  %7 = load i32, i32* @decompress, align 4, !dbg !5667
  %tobool6 = icmp ne i32 %7, 0, !dbg !5667
  %8 = zext i1 %tobool6 to i64, !dbg !5667
  %cond7 = select i1 %tobool6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i64 0, i64 0), !dbg !5667
  %9 = load i32, i32* @decompress, align 4, !dbg !5668
  %tobool8 = icmp ne i32 %9, 0, !dbg !5668
  %10 = zext i1 %tobool8 to i64, !dbg !5668
  %cond9 = select i1 %tobool8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !5668
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.125, i64 0, i64 0), i8* %6, i8* %cond7, i8* %cond9), !dbg !5669
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5670
  %12 = load i8*, i8** @progname, align 8, !dbg !5671
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.129, i64 0, i64 0), i8* %12), !dbg !5672
  call void @do_exit(i32 1), !dbg !5673
  br label %if.end, !dbg !5674

if.end:                                           ; preds = %if.then, %cond.end, %land.lhs.true, %entry
  %13 = load i32, i32* @decompress, align 4, !dbg !5675
  %tobool12 = icmp ne i32 %13, 0, !dbg !5675
  br i1 %tobool12, label %if.then14, label %lor.lhs.false, !dbg !5677

lor.lhs.false:                                    ; preds = %if.end
  %14 = load i32, i32* @ascii, align 4, !dbg !5678
  %tobool13 = icmp ne i32 %14, 0, !dbg !5678
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !5679

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  br label %if.end15, !dbg !5680

if.end15:                                         ; preds = %if.then14, %lor.lhs.false
  %15 = load i32, i32* @test, align 4, !dbg !5682
  %tobool16 = icmp ne i32 %15, 0, !dbg !5682
  br i1 %tobool16, label %if.end24, label %land.lhs.true17, !dbg !5684

land.lhs.true17:                                  ; preds = %if.end15
  %16 = load i32, i32* @list, align 4, !dbg !5685
  %tobool18 = icmp ne i32 %16, 0, !dbg !5685
  br i1 %tobool18, label %if.end24, label %land.lhs.true19, !dbg !5686

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %17 = load i32, i32* @decompress, align 4, !dbg !5687
  %tobool20 = icmp ne i32 %17, 0, !dbg !5687
  br i1 %tobool20, label %lor.lhs.false21, label %if.then23, !dbg !5688

lor.lhs.false21:                                  ; preds = %land.lhs.true19
  %18 = load i32, i32* @ascii, align 4, !dbg !5689
  %tobool22 = icmp ne i32 %18, 0, !dbg !5689
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !5690

if.then23:                                        ; preds = %lor.lhs.false21, %land.lhs.true19
  br label %if.end24, !dbg !5691

if.end24:                                         ; preds = %if.then23, %lor.lhs.false21, %land.lhs.true17, %if.end15
  %call25 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.130, i64 0, i64 0)) #11, !dbg !5693
  %call26 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0)) #11, !dbg !5694
  store i64 0, i64* @time_stamp, align 8, !dbg !5695
  %19 = load i32, i32* @list, align 4, !dbg !5696
  %tobool27 = icmp ne i32 %19, 0, !dbg !5696
  br i1 %tobool27, label %if.then30, label %lor.lhs.false28, !dbg !5698

lor.lhs.false28:                                  ; preds = %if.end24
  %20 = load i32, i32* @no_time, align 4, !dbg !5699
  %tobool29 = icmp ne i32 %20, 0, !dbg !5699
  br i1 %tobool29, label %if.end35, label %if.then30, !dbg !5700

if.then30:                                        ; preds = %lor.lhs.false28, %if.end24
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !5701
  %call31 = call i32 @fileno(%struct._IO_FILE* %21) #11, !dbg !5704
  %call32 = call i32 @fstat(i32 %call31, %struct.stat* @istat) #11, !dbg !5705
  %cmp = icmp ne i32 %call32, 0, !dbg !5706
  br i1 %cmp, label %if.then33, label %if.end34, !dbg !5707

if.then33:                                        ; preds = %if.then30
  call void @progerror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.131, i64 0, i64 0)), !dbg !5708
  call void @do_exit(i32 1), !dbg !5710
  br label %if.end34, !dbg !5711

if.end34:                                         ; preds = %if.then33, %if.then30
  %22 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 12, i32 0), align 8, !dbg !5712, !ctir !144
  store i64 %22, i64* @time_stamp, align 8, !dbg !5713
  br label %if.end35, !dbg !5714

if.end35:                                         ; preds = %if.end34, %lor.lhs.false28
  store i64 -1, i64* @ifile_size, align 8, !dbg !5715
  call void @clear_bufs(), !dbg !5716
  store i32 1, i32* @to_stdout, align 4, !dbg !5717
  store i32 0, i32* @part_nb, align 4, !dbg !5718
  %23 = load i32, i32* @decompress, align 4, !dbg !5719
  %tobool36 = icmp ne i32 %23, 0, !dbg !5719
  br i1 %tobool36, label %if.then37, label %if.end42, !dbg !5721

if.then37:                                        ; preds = %if.end35
  %24 = load i32, i32* @ifd, align 4, !dbg !5722
  %call38 = call i32 @get_method(i32 %24), !dbg !5724
  store i32 %call38, i32* @method, align 4, !dbg !5725
  %25 = load i32, i32* @method, align 4, !dbg !5726
  %cmp39 = icmp slt i32 %25, 0, !dbg !5728
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !5729

if.then40:                                        ; preds = %if.then37
  %26 = load i32, i32* @exit_code, align 4, !dbg !5730
  call void @do_exit(i32 %26), !dbg !5732
  br label %if.end41, !dbg !5733

if.end41:                                         ; preds = %if.then40, %if.then37
  br label %if.end42, !dbg !5734

if.end42:                                         ; preds = %if.end41, %if.end35
  %27 = load i32, i32* @list, align 4, !dbg !5735
  %tobool43 = icmp ne i32 %27, 0, !dbg !5735
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !5737

if.then44:                                        ; preds = %if.end42
  %28 = load i32, i32* @ifd, align 4, !dbg !5738
  %29 = load i32, i32* @method, align 4, !dbg !5740
  call void @do_list(i32 %28, i32 %29), !dbg !5741
  br label %if.end71, !dbg !5742

if.end45:                                         ; preds = %if.end42
  br label %for.cond, !dbg !5743

for.cond:                                         ; preds = %if.end59, %if.end45
  %30 = load i32 (i32, i32)*, i32 (i32, i32)** @work, align 8, !dbg !5744
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !5749
  %call46 = call i32 @fileno(%struct._IO_FILE* %31) #11, !dbg !5750
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5751
  %call47 = call i32 @fileno(%struct._IO_FILE* %32) #11, !dbg !5752
  %call48 = call i32 %30(i32 %call46, i32 %call47), !dbg !5753
  %cmp49 = icmp ne i32 %call48, 0, !dbg !5754
  br i1 %cmp49, label %if.then50, label %if.end51, !dbg !5755

if.then50:                                        ; preds = %for.cond
  br label %if.end71, !dbg !5756

if.end51:                                         ; preds = %for.cond
  %call52 = call i32 @input_eof(), !dbg !5757
  %tobool53 = icmp ne i32 %call52, 0, !dbg !5757
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !5759

if.then54:                                        ; preds = %if.end51
  br label %for.end, !dbg !5760

if.end55:                                         ; preds = %if.end51
  %33 = load i32, i32* @ifd, align 4, !dbg !5761
  %call56 = call i32 @get_method(i32 %33), !dbg !5762
  store i32 %call56, i32* @method, align 4, !dbg !5763
  %34 = load i32, i32* @method, align 4, !dbg !5764
  %cmp57 = icmp slt i32 %34, 0, !dbg !5766
  br i1 %cmp57, label %if.then58, label %if.end59, !dbg !5767

if.then58:                                        ; preds = %if.end55
  br label %if.end71, !dbg !5768

if.end59:                                         ; preds = %if.end55
  store i64 0, i64* @bytes_out, align 8, !dbg !5769
  br label %for.cond, !dbg !5770, !llvm.loop !5771

for.end:                                          ; preds = %if.then54
  %35 = load i32, i32* @verbose, align 4, !dbg !5774
  %tobool60 = icmp ne i32 %35, 0, !dbg !5774
  br i1 %tobool60, label %if.then61, label %if.end71, !dbg !5776

if.then61:                                        ; preds = %for.end
  %36 = load i32, i32* @test, align 4, !dbg !5777
  %tobool62 = icmp ne i32 %36, 0, !dbg !5777
  br i1 %tobool62, label %if.then63, label %if.else, !dbg !5780

if.then63:                                        ; preds = %if.then61
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5781
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132, i64 0, i64 0)), !dbg !5783
  br label %if.end70, !dbg !5784

if.else:                                          ; preds = %if.then61
  %38 = load i32, i32* @decompress, align 4, !dbg !5785
  %tobool65 = icmp ne i32 %38, 0, !dbg !5785
  br i1 %tobool65, label %if.end69, label %if.then66, !dbg !5787

if.then66:                                        ; preds = %if.else
  %39 = load i64, i64* @bytes_in, align 8, !dbg !5788
  %40 = load i64, i64* @bytes_out, align 8, !dbg !5790
  %41 = load i64, i64* @header_bytes, align 8, !dbg !5791
  %sub = sub nsw i64 %40, %41, !dbg !5792
  %sub67 = sub nsw i64 %39, %sub, !dbg !5793
  %42 = load i64, i64* @bytes_in, align 8, !dbg !5794
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5795
  call void @display_ratio(i64 %sub67, i64 %42, %struct._IO_FILE* %43), !dbg !5796
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !5797
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)), !dbg !5798
  br label %if.end69, !dbg !5799

if.end69:                                         ; preds = %if.then66, %if.else
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then63
  br label %if.end71, !dbg !5800

if.end71:                                         ; preds = %if.then44, %if.then50, %if.then58, %if.end70, %for.end
  ret void, !dbg !5801
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @do_list(i32 %ifd, i32 %method) #0 !dbg !710 {
entry:
  %ifd.addr = alloca i32, align 4
  %method.addr = alloca i32, align 4
  %crc = alloca i64, align 8, !ctir !51
  %date = alloca i8*, align 8, !ctir !19
  %positive_off_t_width = alloca i32, align 4, !ctir !12
  %o = alloca i64, align 8, !ctir !79
  %buf = alloca [8 x i8], align 1, !ctir !401
  store i32 %ifd, i32* %ifd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ifd.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  store i32 %method, i32* %method.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %method.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  call void @llvm.dbg.declare(metadata i64* %crc, metadata !5806, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.declare(metadata i8** %date, metadata !5808, metadata !DIExpression()), !dbg !5809
  call void @llvm.dbg.declare(metadata i32* %positive_off_t_width, metadata !5810, metadata !DIExpression()), !dbg !5811
  store i32 1, i32* %positive_off_t_width, align 4, !dbg !5811
  call void @llvm.dbg.declare(metadata i64* %o, metadata !5812, metadata !DIExpression()), !dbg !5813
  store i64 9223372036854775807, i64* %o, align 8, !dbg !5814
  br label %for.cond, !dbg !5816

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %o, align 8, !dbg !5817
  %cmp = icmp slt i64 9, %0, !dbg !5819
  br i1 %cmp, label %for.body, label %for.end, !dbg !5820

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %positive_off_t_width, align 4, !dbg !5821
  %inc = add nsw i32 %1, 1, !dbg !5821
  store i32 %inc, i32* %positive_off_t_width, align 4, !dbg !5821
  br label %for.inc, !dbg !5823

for.inc:                                          ; preds = %for.body
  %2 = load i64, i64* %o, align 8, !dbg !5824
  %div = sdiv i64 %2, 10, !dbg !5824
  store i64 %div, i64* %o, align 8, !dbg !5824
  br label %for.cond, !dbg !5825, !llvm.loop !5826

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* @do_list.first_time, align 4, !dbg !5828
  %tobool = icmp ne i32 %3, 0, !dbg !5828
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5830

land.lhs.true:                                    ; preds = %for.end
  %4 = load i32, i32* %method.addr, align 4, !dbg !5831
  %cmp1 = icmp sge i32 %4, 0, !dbg !5832
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5833

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* @do_list.first_time, align 4, !dbg !5834
  %5 = load i32, i32* @verbose, align 4, !dbg !5836
  %tobool2 = icmp ne i32 %5, 0, !dbg !5836
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5838

if.then3:                                         ; preds = %if.then
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.187, i64 0, i64 0)), !dbg !5839
  br label %if.end, !dbg !5841

if.end:                                           ; preds = %if.then3, %if.then
  %6 = load i32, i32* @quiet, align 4, !dbg !5842
  %tobool4 = icmp ne i32 %6, 0, !dbg !5842
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !5844

if.then5:                                         ; preds = %if.end
  %7 = load i32, i32* %positive_off_t_width, align 4, !dbg !5845
  %8 = load i32, i32* %positive_off_t_width, align 4, !dbg !5847
  %9 = load i32, i32* %positive_off_t_width, align 4, !dbg !5848
  %10 = load i32, i32* %positive_off_t_width, align 4, !dbg !5849
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.188, i64 0, i64 0), i32 %7, i32 %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.189, i64 0, i64 0), i32 %9, i32 %10, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.190, i64 0, i64 0)), !dbg !5850
  br label %if.end7, !dbg !5851

if.end7:                                          ; preds = %if.then5, %if.end
  br label %if.end28, !dbg !5852

if.else:                                          ; preds = %land.lhs.true, %for.end
  %11 = load i32, i32* %method.addr, align 4, !dbg !5853
  %cmp8 = icmp slt i32 %11, 0, !dbg !5855
  br i1 %cmp8, label %if.then9, label %if.end27, !dbg !5856

if.then9:                                         ; preds = %if.else
  %12 = load i64, i64* @total_in, align 8, !dbg !5857
  %cmp10 = icmp sle i64 %12, 0, !dbg !5860
  br i1 %cmp10, label %if.then12, label %lor.lhs.false, !dbg !5861

lor.lhs.false:                                    ; preds = %if.then9
  %13 = load i64, i64* @total_out, align 8, !dbg !5862
  %cmp11 = icmp sle i64 %13, 0, !dbg !5863
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5864

if.then12:                                        ; preds = %lor.lhs.false, %if.then9
  br label %return, !dbg !5865

if.end13:                                         ; preds = %lor.lhs.false
  %14 = load i32, i32* @verbose, align 4, !dbg !5866
  %tobool14 = icmp ne i32 %14, 0, !dbg !5866
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5868

if.then15:                                        ; preds = %if.end13
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.191, i64 0, i64 0)), !dbg !5869
  br label %if.end17, !dbg !5871

if.end17:                                         ; preds = %if.then15, %if.end13
  %15 = load i32, i32* @verbose, align 4, !dbg !5872
  %tobool18 = icmp ne i32 %15, 0, !dbg !5872
  br i1 %tobool18, label %if.then21, label %lor.lhs.false19, !dbg !5874

lor.lhs.false19:                                  ; preds = %if.end17
  %16 = load i32, i32* @quiet, align 4, !dbg !5875
  %tobool20 = icmp ne i32 %16, 0, !dbg !5875
  br i1 %tobool20, label %if.end24, label %if.then21, !dbg !5876

if.then21:                                        ; preds = %lor.lhs.false19, %if.end17
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5877
  %18 = load i64, i64* @total_in, align 8, !dbg !5879
  %19 = load i32, i32* %positive_off_t_width, align 4, !dbg !5880
  call void @fprint_off(%struct._IO_FILE* %17, i64 %18, i32 %19), !dbg !5881
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i64 0, i64 0)), !dbg !5882
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5883
  %21 = load i64, i64* @total_out, align 8, !dbg !5884
  %22 = load i32, i32* %positive_off_t_width, align 4, !dbg !5885
  call void @fprint_off(%struct._IO_FILE* %20, i64 %21, i32 %22), !dbg !5886
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i64 0, i64 0)), !dbg !5887
  br label %if.end24, !dbg !5888

if.end24:                                         ; preds = %if.then21, %lor.lhs.false19
  %23 = load i64, i64* @total_out, align 8, !dbg !5889
  %24 = load i64, i64* @total_in, align 8, !dbg !5890
  %25 = load i64, i64* @header_bytes, align 8, !dbg !5891
  %sub = sub nsw i64 %24, %25, !dbg !5892
  %sub25 = sub nsw i64 %23, %sub, !dbg !5893
  %26 = load i64, i64* @total_out, align 8, !dbg !5894
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5895
  call void @display_ratio(i64 %sub25, i64 %26, %struct._IO_FILE* %27), !dbg !5896
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.193, i64 0, i64 0)), !dbg !5897
  br label %return, !dbg !5898

if.end27:                                         ; preds = %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end7
  store i64 -1, i64* %crc, align 8, !dbg !5899
  store i64 -1, i64* @bytes_out, align 8, !dbg !5900
  %28 = load i64, i64* @ifile_size, align 8, !dbg !5901
  store i64 %28, i64* @bytes_in, align 8, !dbg !5902
  %29 = load i32, i32* %method.addr, align 4, !dbg !5903
  %cmp29 = icmp eq i32 %29, 8, !dbg !5905
  br i1 %cmp29, label %land.lhs.true30, label %if.end90, !dbg !5906

land.lhs.true30:                                  ; preds = %if.end28
  %30 = load i32, i32* @last_member, align 4, !dbg !5907
  %tobool31 = icmp ne i32 %30, 0, !dbg !5907
  br i1 %tobool31, label %if.end90, label %if.then32, !dbg !5908

if.then32:                                        ; preds = %land.lhs.true30
  %31 = load i32, i32* %ifd.addr, align 4, !dbg !5909
  %call33 = call i64 @lseek(i32 %31, i64 -8, i32 2) #11, !dbg !5911
  store i64 %call33, i64* @bytes_in, align 8, !dbg !5912
  %32 = load i64, i64* @bytes_in, align 8, !dbg !5913
  %cmp34 = icmp ne i64 %32, -1, !dbg !5915
  br i1 %cmp34, label %if.then35, label %if.end89, !dbg !5916

if.then35:                                        ; preds = %if.then32
  call void @llvm.dbg.declare(metadata [8 x i8]* %buf, metadata !5917, metadata !DIExpression()), !dbg !5919
  %33 = load i64, i64* @bytes_in, align 8, !dbg !5920
  %add = add nsw i64 %33, 8, !dbg !5920
  store i64 %add, i64* @bytes_in, align 8, !dbg !5920
  %34 = load i32, i32* %ifd.addr, align 4, !dbg !5921
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5923, !ctir !401
  %call36 = call i64 @read(i32 %34, i8* %arraydecay, i64 8), !dbg !5924
  %cmp37 = icmp ne i64 %call36, 8, !dbg !5925
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !5926

if.then38:                                        ; preds = %if.then35
  call void @read_error(), !dbg !5927
  br label %if.end39, !dbg !5929

if.end39:                                         ; preds = %if.then38, %if.then35
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5930, !ctir !401
  %35 = load i8, i8* %arrayidx, align 1, !dbg !5930
  %conv = zext i8 %35 to i16, !dbg !5930
  %conv40 = zext i16 %conv to i32, !dbg !5930
  %arrayidx41 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 1, !dbg !5930, !ctir !401
  %36 = load i8, i8* %arrayidx41, align 1, !dbg !5930
  %conv42 = zext i8 %36 to i16, !dbg !5930
  %conv43 = zext i16 %conv42 to i32, !dbg !5930
  %shl = shl i32 %conv43, 8, !dbg !5930
  %or = or i32 %conv40, %shl, !dbg !5930
  %conv44 = sext i32 %or to i64, !dbg !5930
  %arraydecay45 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5930, !ctir !401
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay45, i64 2, !dbg !5930, !ctir !13
  %arrayidx46 = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !5930, !ctir !85
  %37 = load i8, i8* %arrayidx46, align 1, !dbg !5930
  %conv47 = zext i8 %37 to i16, !dbg !5930
  %conv48 = zext i16 %conv47 to i32, !dbg !5930
  %arraydecay49 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5930, !ctir !401
  %add.ptr50 = getelementptr inbounds i8, i8* %arraydecay49, i64 2, !dbg !5930, !ctir !13
  %arrayidx51 = getelementptr inbounds i8, i8* %add.ptr50, i64 1, !dbg !5930, !ctir !85
  %38 = load i8, i8* %arrayidx51, align 1, !dbg !5930
  %conv52 = zext i8 %38 to i16, !dbg !5930
  %conv53 = zext i16 %conv52 to i32, !dbg !5930
  %shl54 = shl i32 %conv53, 8, !dbg !5930
  %or55 = or i32 %conv48, %shl54, !dbg !5930
  %conv56 = sext i32 %or55 to i64, !dbg !5930
  %shl57 = shl i64 %conv56, 16, !dbg !5930
  %or58 = or i64 %conv44, %shl57, !dbg !5930
  store i64 %or58, i64* %crc, align 8, !dbg !5931
  %arraydecay59 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5932, !ctir !401
  %add.ptr60 = getelementptr inbounds i8, i8* %arraydecay59, i64 4, !dbg !5932, !ctir !13
  %arrayidx61 = getelementptr inbounds i8, i8* %add.ptr60, i64 0, !dbg !5932, !ctir !85
  %39 = load i8, i8* %arrayidx61, align 1, !dbg !5932
  %conv62 = zext i8 %39 to i16, !dbg !5932
  %conv63 = zext i16 %conv62 to i32, !dbg !5932
  %arraydecay64 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5932, !ctir !401
  %add.ptr65 = getelementptr inbounds i8, i8* %arraydecay64, i64 4, !dbg !5932, !ctir !13
  %arrayidx66 = getelementptr inbounds i8, i8* %add.ptr65, i64 1, !dbg !5932, !ctir !85
  %40 = load i8, i8* %arrayidx66, align 1, !dbg !5932
  %conv67 = zext i8 %40 to i16, !dbg !5932
  %conv68 = zext i16 %conv67 to i32, !dbg !5932
  %shl69 = shl i32 %conv68, 8, !dbg !5932
  %or70 = or i32 %conv63, %shl69, !dbg !5932
  %conv71 = sext i32 %or70 to i64, !dbg !5932
  %arraydecay72 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5932, !ctir !401
  %add.ptr73 = getelementptr inbounds i8, i8* %arraydecay72, i64 4, !dbg !5932, !ctir !13
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr73, i64 2, !dbg !5932, !ctir !13
  %arrayidx75 = getelementptr inbounds i8, i8* %add.ptr74, i64 0, !dbg !5932, !ctir !85
  %41 = load i8, i8* %arrayidx75, align 1, !dbg !5932
  %conv76 = zext i8 %41 to i16, !dbg !5932
  %conv77 = zext i16 %conv76 to i32, !dbg !5932
  %arraydecay78 = getelementptr inbounds [8 x i8], [8 x i8]* %buf, i64 0, i64 0, !dbg !5932, !ctir !401
  %add.ptr79 = getelementptr inbounds i8, i8* %arraydecay78, i64 4, !dbg !5932, !ctir !13
  %add.ptr80 = getelementptr inbounds i8, i8* %add.ptr79, i64 2, !dbg !5932, !ctir !13
  %arrayidx81 = getelementptr inbounds i8, i8* %add.ptr80, i64 1, !dbg !5932, !ctir !85
  %42 = load i8, i8* %arrayidx81, align 1, !dbg !5932
  %conv82 = zext i8 %42 to i16, !dbg !5932
  %conv83 = zext i16 %conv82 to i32, !dbg !5932
  %shl84 = shl i32 %conv83, 8, !dbg !5932
  %or85 = or i32 %conv77, %shl84, !dbg !5932
  %conv86 = sext i32 %or85 to i64, !dbg !5932
  %shl87 = shl i64 %conv86, 16, !dbg !5932
  %or88 = or i64 %conv71, %shl87, !dbg !5932
  store i64 %or88, i64* @bytes_out, align 8, !dbg !5933
  br label %if.end89, !dbg !5934

if.end89:                                         ; preds = %if.end39, %if.then32
  br label %if.end90, !dbg !5935

if.end90:                                         ; preds = %if.end89, %land.lhs.true30, %if.end28
  %call91 = call i8* @ctime(i64* @time_stamp) #11, !dbg !5936
  %add.ptr92 = getelementptr inbounds i8, i8* %call91, i64 4, !dbg !5937, !ctir !20
  store i8* %add.ptr92, i8** %date, align 8, !dbg !5938
  %43 = load i8*, i8** %date, align 8, !dbg !5939
  %arrayidx93 = getelementptr inbounds i8, i8* %43, i64 12, !dbg !5939, !ctir !19
  store i8 0, i8* %arrayidx93, align 1, !dbg !5940
  %44 = load i32, i32* @verbose, align 4, !dbg !5941
  %tobool94 = icmp ne i32 %44, 0, !dbg !5941
  br i1 %tobool94, label %if.then95, label %if.end98, !dbg !5943

if.then95:                                        ; preds = %if.end90
  %45 = load i32, i32* %method.addr, align 4, !dbg !5944
  %idxprom = sext i32 %45 to i64, !dbg !5946
  %arrayidx96 = getelementptr inbounds [9 x i8*], [9 x i8*]* @do_list.methods, i64 0, i64 %idxprom, !dbg !5946, !ctir !371
  %46 = load i8*, i8** %arrayidx96, align 8, !dbg !5946
  %47 = load i64, i64* %crc, align 8, !dbg !5947
  %48 = load i8*, i8** %date, align 8, !dbg !5948
  %call97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.194, i64 0, i64 0), i8* %46, i64 %47, i8* %48), !dbg !5949
  br label %if.end98, !dbg !5950

if.end98:                                         ; preds = %if.then95, %if.end90
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5951
  %50 = load i64, i64* @bytes_in, align 8, !dbg !5952
  %51 = load i32, i32* %positive_off_t_width, align 4, !dbg !5953
  call void @fprint_off(%struct._IO_FILE* %49, i64 %50, i32 %51), !dbg !5954
  %call99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i64 0, i64 0)), !dbg !5955
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5956
  %53 = load i64, i64* @bytes_out, align 8, !dbg !5957
  %54 = load i32, i32* %positive_off_t_width, align 4, !dbg !5958
  call void @fprint_off(%struct._IO_FILE* %52, i64 %53, i32 %54), !dbg !5959
  %call100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i64 0, i64 0)), !dbg !5960
  %55 = load i64, i64* @bytes_in, align 8, !dbg !5961
  %cmp101 = icmp eq i64 %55, -1, !dbg !5963
  br i1 %cmp101, label %if.then103, label %if.else104, !dbg !5964

if.then103:                                       ; preds = %if.end98
  store i64 -1, i64* @total_in, align 8, !dbg !5965
  store i64 0, i64* @header_bytes, align 8, !dbg !5967
  store i64 0, i64* @bytes_out, align 8, !dbg !5968
  store i64 0, i64* @bytes_in, align 8, !dbg !5969
  br label %if.end110, !dbg !5970

if.else104:                                       ; preds = %if.end98
  %56 = load i64, i64* @total_in, align 8, !dbg !5971
  %cmp105 = icmp sge i64 %56, 0, !dbg !5973
  br i1 %cmp105, label %if.then107, label %if.end109, !dbg !5974

if.then107:                                       ; preds = %if.else104
  %57 = load i64, i64* @bytes_in, align 8, !dbg !5975
  %58 = load i64, i64* @total_in, align 8, !dbg !5977
  %add108 = add nsw i64 %58, %57, !dbg !5977
  store i64 %add108, i64* @total_in, align 8, !dbg !5977
  br label %if.end109, !dbg !5978

if.end109:                                        ; preds = %if.then107, %if.else104
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then103
  %59 = load i64, i64* @bytes_out, align 8, !dbg !5979
  %cmp111 = icmp eq i64 %59, -1, !dbg !5981
  br i1 %cmp111, label %if.then113, label %if.else114, !dbg !5982

if.then113:                                       ; preds = %if.end110
  store i64 -1, i64* @total_out, align 8, !dbg !5983
  store i64 0, i64* @header_bytes, align 8, !dbg !5985
  store i64 0, i64* @bytes_out, align 8, !dbg !5986
  store i64 0, i64* @bytes_in, align 8, !dbg !5987
  br label %if.end120, !dbg !5988

if.else114:                                       ; preds = %if.end110
  %60 = load i64, i64* @total_out, align 8, !dbg !5989
  %cmp115 = icmp sge i64 %60, 0, !dbg !5991
  br i1 %cmp115, label %if.then117, label %if.end119, !dbg !5992

if.then117:                                       ; preds = %if.else114
  %61 = load i64, i64* @bytes_out, align 8, !dbg !5993
  %62 = load i64, i64* @total_out, align 8, !dbg !5995
  %add118 = add nsw i64 %62, %61, !dbg !5995
  store i64 %add118, i64* @total_out, align 8, !dbg !5995
  br label %if.end119, !dbg !5996

if.end119:                                        ; preds = %if.then117, %if.else114
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.then113
  %63 = load i64, i64* @bytes_out, align 8, !dbg !5997
  %64 = load i64, i64* @bytes_in, align 8, !dbg !5998
  %65 = load i64, i64* @header_bytes, align 8, !dbg !5999
  %sub121 = sub nsw i64 %64, %65, !dbg !6000
  %sub122 = sub nsw i64 %63, %sub121, !dbg !6001
  %66 = load i64, i64* @bytes_out, align 8, !dbg !6002
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !6003
  call void @display_ratio(i64 %sub122, i64 %66, %struct._IO_FILE* %67), !dbg !6004
  %call123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.195, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !6005
  br label %return, !dbg !6006

return:                                           ; preds = %if.end120, %if.end24, %if.then12
  ret void, !dbg !6006
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fprint_off(%struct._IO_FILE* %file, i64 %offset, i32 %width) #0 !dbg !6007 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %offset.addr = alloca i64, align 8
  %width.addr = alloca i32, align 4
  %buf = alloca [64 x i8], align 16, !ctir !319
  %p = alloca i8*, align 8, !ctir !19
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6010, metadata !DIExpression()), !dbg !6011
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6012, metadata !DIExpression()), !dbg !6013
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6014, metadata !DIExpression()), !dbg !6015
  call void @llvm.dbg.declare(metadata [64 x i8]* %buf, metadata !6016, metadata !DIExpression()), !dbg !6017
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6018, metadata !DIExpression()), !dbg !6019
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !6020, !ctir !319
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 64, !dbg !6021, !ctir !20
  store i8* %add.ptr, i8** %p, align 8, !dbg !6019
  %0 = load i64, i64* %offset.addr, align 8, !dbg !6022
  %cmp = icmp slt i64 %0, 0, !dbg !6024
  br i1 %cmp, label %if.then, label %if.else, !dbg !6025

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !6026

do.body:                                          ; preds = %do.cond, %if.then
  %1 = load i64, i64* %offset.addr, align 8, !dbg !6028
  %rem = srem i64 %1, 10, !dbg !6029
  %sub = sub nsw i64 48, %rem, !dbg !6030
  %conv = trunc i64 %sub to i8, !dbg !6031
  %2 = load i8*, i8** %p, align 8, !dbg !6032
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 -1, !dbg !6032, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6032
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !6033, !ctir !20
  br label %do.cond, !dbg !6034

do.cond:                                          ; preds = %do.body
  %3 = load i64, i64* %offset.addr, align 8, !dbg !6035
  %div = sdiv i64 %3, 10, !dbg !6035
  store i64 %div, i64* %offset.addr, align 8, !dbg !6035
  %cmp1 = icmp ne i64 %div, 0, !dbg !6036
  br i1 %cmp1, label %do.body, label %do.end, !dbg !6034, !llvm.loop !6037

do.end:                                           ; preds = %do.cond
  %4 = load i8*, i8** %p, align 8, !dbg !6039
  %incdec.ptr3 = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !6039, !ctir !20
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !6039
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !6040, !ctir !20
  br label %if.end, !dbg !6041

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !6042

do.body4:                                         ; preds = %do.cond8, %if.else
  %5 = load i64, i64* %offset.addr, align 8, !dbg !6044
  %rem5 = srem i64 %5, 10, !dbg !6045
  %add = add nsw i64 48, %rem5, !dbg !6046
  %conv6 = trunc i64 %add to i8, !dbg !6047
  %6 = load i8*, i8** %p, align 8, !dbg !6048
  %incdec.ptr7 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !6048, !ctir !20
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !6048
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !6049, !ctir !20
  br label %do.cond8, !dbg !6050

do.cond8:                                         ; preds = %do.body4
  %7 = load i64, i64* %offset.addr, align 8, !dbg !6051
  %div9 = sdiv i64 %7, 10, !dbg !6051
  store i64 %div9, i64* %offset.addr, align 8, !dbg !6051
  %cmp10 = icmp ne i64 %div9, 0, !dbg !6052
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !6050, !llvm.loop !6053

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %arraydecay13 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !6055, !ctir !319
  %add.ptr14 = getelementptr inbounds i8, i8* %arraydecay13, i64 64, !dbg !6056, !ctir !20
  %8 = load i8*, i8** %p, align 8, !dbg !6057
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr14 to i64, !dbg !6058
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64, !dbg !6058
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6058
  %9 = load i32, i32* %width.addr, align 4, !dbg !6059
  %conv15 = sext i32 %9 to i64, !dbg !6059
  %sub16 = sub nsw i64 %conv15, %sub.ptr.sub, !dbg !6059
  %conv17 = trunc i64 %sub16 to i32, !dbg !6059
  store i32 %conv17, i32* %width.addr, align 4, !dbg !6059
  br label %while.cond, !dbg !6060

while.cond:                                       ; preds = %while.body, %if.end
  %10 = load i32, i32* %width.addr, align 4, !dbg !6061
  %dec = add nsw i32 %10, -1, !dbg !6061
  store i32 %dec, i32* %width.addr, align 4, !dbg !6061
  %cmp18 = icmp slt i32 0, %10, !dbg !6062
  br i1 %cmp18, label %while.body, label %while.end, !dbg !6060

while.body:                                       ; preds = %while.cond
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6063
  %call = call i32 @putc(i32 32, %struct._IO_FILE* %11), !dbg !6065
  br label %while.cond, !dbg !6060, !llvm.loop !6066

while.end:                                        ; preds = %while.cond
  br label %for.cond, !dbg !6068

for.cond:                                         ; preds = %for.inc, %while.end
  %12 = load i8*, i8** %p, align 8, !dbg !6069
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i64 0, i64 0, !dbg !6072, !ctir !319
  %add.ptr21 = getelementptr inbounds i8, i8* %arraydecay20, i64 64, !dbg !6073, !ctir !20
  %cmp22 = icmp ult i8* %12, %add.ptr21, !dbg !6074
  br i1 %cmp22, label %for.body, label %for.end, !dbg !6075

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %p, align 8, !dbg !6076
  %14 = load i8, i8* %13, align 1, !dbg !6077, !ctir !20
  %conv24 = sext i8 %14 to i32, !dbg !6077
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6078
  %call25 = call i32 @putc(i32 %conv24, %struct._IO_FILE* %15), !dbg !6079
  br label %for.inc, !dbg !6079

for.inc:                                          ; preds = %for.body
  %16 = load i8*, i8** %p, align 8, !dbg !6080
  %incdec.ptr26 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !6080, !ctir !20
  store i8* %incdec.ptr26, i8** %p, align 8, !dbg !6080
  br label %for.cond, !dbg !6081, !llvm.loop !6082

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6084
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @display_ratio(i64 %num, i64 %den, %struct._IO_FILE* %file) #0 !dbg !6085 {
entry:
  %num.addr = alloca i64, align 8
  %den.addr = alloca i64, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  store i64 %num, i64* %num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num.addr, metadata !6088, metadata !DIExpression()), !dbg !6089
  store i64 %den, i64* %den.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %den.addr, metadata !6090, metadata !DIExpression()), !dbg !6091
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6092, metadata !DIExpression()), !dbg !6093
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6094
  %1 = load i64, i64* %den.addr, align 8, !dbg !6095
  %cmp = icmp eq i64 %1, 0, !dbg !6096
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6095

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !6095

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %num.addr, align 8, !dbg !6097
  %conv = sitofp i64 %2 to double, !dbg !6097
  %mul = fmul double 1.000000e+02, %conv, !dbg !6098
  %3 = load i64, i64* %den.addr, align 8, !dbg !6099
  %conv1 = sitofp i64 %3 to double, !dbg !6099
  %div = fdiv double %mul, %conv1, !dbg !6100
  br label %cond.end, !dbg !6095

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %div, %cond.false ], !dbg !6095
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), double %cond), !dbg !6101
  ret void, !dbg !6102
}

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #5

; Function Attrs: nounwind
declare dso_local i8* @ctime(i64*) #5

declare dso_local i32 @putc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #5

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #5

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #5

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @progerror(i8* %string) #0 !dbg !6103 {
entry:
  %string.addr = alloca i8*, align 8
  %e = alloca i32, align 4, !ctir !12
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !6104, metadata !DIExpression()), !dbg !6105
  call void @llvm.dbg.declare(metadata i32* %e, metadata !6106, metadata !DIExpression()), !dbg !6107
  %call = call i32* @__errno_location() #12, !dbg !6108
  %0 = load i32, i32* %call, align 4, !dbg !6108, !ctir !12
  store i32 %0, i32* %e, align 4, !dbg !6107
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6109
  %2 = load i8*, i8** @progname, align 8, !dbg !6110
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i64 0, i64 0), i8* %2), !dbg !6111
  %3 = load i32, i32* %e, align 4, !dbg !6112
  %call2 = call i32* @__errno_location() #12, !dbg !6113
  store i32 %3, i32* %call2, align 4, !dbg !6114, !ctir !12
  %4 = load i8*, i8** %string.addr, align 8, !dbg !6115
  call void @perror(i8* %4), !dbg !6116
  store i32 1, i32* @exit_code, align 4, !dbg !6117
  ret void, !dbg !6118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @clear_bufs() #0 !dbg !6119 {
entry:
  store i32 0, i32* @outcnt, align 4, !dbg !6120
  store i32 0, i32* @inptr, align 4, !dbg !6121
  store i32 0, i32* @insize, align 4, !dbg !6122
  store i64 0, i64* @bytes_out, align 8, !dbg !6123
  store i64 0, i64* @bytes_in, align 8, !dbg !6124
  ret void, !dbg !6125
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_method(i32 %in) #0 !dbg !6126 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %flags = alloca i8, align 1, !ctir !13
  %magic = alloca [2 x i8], align 1, !ctir !330
  %imagic1 = alloca i32, align 4, !ctir !12
  %stamp = alloca i64, align 8, !ctir !51
  %part = alloca i32, align 4, !ctir !6
  %len = alloca i32, align 4, !ctir !6
  %c = alloca i8, align 1, !ctir !20
  %p = alloca i8*, align 8, !ctir !19
  %base = alloca i8*, align 8, !ctir !19
  %base2 = alloca i8*, align 8, !ctir !19
  %inbyte = alloca i32, align 4, !ctir !12
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  call void @llvm.dbg.declare(metadata i8* %flags, metadata !6131, metadata !DIExpression()), !dbg !6132
  call void @llvm.dbg.declare(metadata [2 x i8]* %magic, metadata !6133, metadata !DIExpression()), !dbg !6134
  call void @llvm.dbg.declare(metadata i32* %imagic1, metadata !6135, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata i64* %stamp, metadata !6137, metadata !DIExpression()), !dbg !6138
  %0 = load i32, i32* @force, align 4, !dbg !6139
  %tobool = icmp ne i32 %0, 0, !dbg !6139
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6141

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @to_stdout, align 4, !dbg !6142
  %tobool1 = icmp ne i32 %1, 0, !dbg !6142
  br i1 %tobool1, label %if.then, label %if.else, !dbg !6143

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* @inptr, align 4, !dbg !6144
  %3 = load i32, i32* @insize, align 4, !dbg !6144
  %cmp = icmp ult i32 %2, %3, !dbg !6144
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6144

cond.true:                                        ; preds = %if.then
  %4 = load i32, i32* @inptr, align 4, !dbg !6144
  %inc = add i32 %4, 1, !dbg !6144
  store i32 %inc, i32* @inptr, align 4, !dbg !6144
  %idxprom = zext i32 %4 to i64, !dbg !6144
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !6144, !ctir !231
  %5 = load i8, i8* %arrayidx, align 1, !dbg !6144
  %conv = zext i8 %5 to i32, !dbg !6144
  br label %cond.end, !dbg !6144

cond.false:                                       ; preds = %if.then
  %call = call i32 @fill_inbuf(i32 1), !dbg !6144
  br label %cond.end, !dbg !6144

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !6144
  %conv2 = trunc i32 %cond to i8, !dbg !6146
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6147, !ctir !330
  store i8 %conv2, i8* %arrayidx3, align 1, !dbg !6148
  %6 = load i32, i32* @inptr, align 4, !dbg !6149
  %7 = load i32, i32* @insize, align 4, !dbg !6149
  %cmp4 = icmp ult i32 %6, %7, !dbg !6149
  br i1 %cmp4, label %cond.true6, label %cond.false11, !dbg !6149

cond.true6:                                       ; preds = %cond.end
  %8 = load i32, i32* @inptr, align 4, !dbg !6149
  %inc7 = add i32 %8, 1, !dbg !6149
  store i32 %inc7, i32* @inptr, align 4, !dbg !6149
  %idxprom8 = zext i32 %8 to i64, !dbg !6149
  %arrayidx9 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom8, !dbg !6149, !ctir !231
  %9 = load i8, i8* %arrayidx9, align 1, !dbg !6149
  %conv10 = zext i8 %9 to i32, !dbg !6149
  br label %cond.end13, !dbg !6149

cond.false11:                                     ; preds = %cond.end
  %call12 = call i32 @fill_inbuf(i32 1), !dbg !6149
  br label %cond.end13, !dbg !6149

cond.end13:                                       ; preds = %cond.false11, %cond.true6
  %cond14 = phi i32 [ %conv10, %cond.true6 ], [ %call12, %cond.false11 ], !dbg !6149
  store i32 %cond14, i32* %imagic1, align 4, !dbg !6150
  %10 = load i32, i32* %imagic1, align 4, !dbg !6151
  %conv15 = trunc i32 %10 to i8, !dbg !6152
  %arrayidx16 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 1, !dbg !6153, !ctir !330
  store i8 %conv15, i8* %arrayidx16, align 1, !dbg !6154
  br label %if.end, !dbg !6155

if.else:                                          ; preds = %land.lhs.true, %entry
  %11 = load i32, i32* @inptr, align 4, !dbg !6156
  %12 = load i32, i32* @insize, align 4, !dbg !6156
  %cmp17 = icmp ult i32 %11, %12, !dbg !6156
  br i1 %cmp17, label %cond.true19, label %cond.false24, !dbg !6156

cond.true19:                                      ; preds = %if.else
  %13 = load i32, i32* @inptr, align 4, !dbg !6156
  %inc20 = add i32 %13, 1, !dbg !6156
  store i32 %inc20, i32* @inptr, align 4, !dbg !6156
  %idxprom21 = zext i32 %13 to i64, !dbg !6156
  %arrayidx22 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom21, !dbg !6156, !ctir !231
  %14 = load i8, i8* %arrayidx22, align 1, !dbg !6156
  %conv23 = zext i8 %14 to i32, !dbg !6156
  br label %cond.end26, !dbg !6156

cond.false24:                                     ; preds = %if.else
  %call25 = call i32 @fill_inbuf(i32 0), !dbg !6156
  br label %cond.end26, !dbg !6156

cond.end26:                                       ; preds = %cond.false24, %cond.true19
  %cond27 = phi i32 [ %conv23, %cond.true19 ], [ %call25, %cond.false24 ], !dbg !6156
  %conv28 = trunc i32 %cond27 to i8, !dbg !6158
  %arrayidx29 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6159, !ctir !330
  store i8 %conv28, i8* %arrayidx29, align 1, !dbg !6160
  %15 = load i32, i32* @inptr, align 4, !dbg !6161
  %16 = load i32, i32* @insize, align 4, !dbg !6161
  %cmp30 = icmp ult i32 %15, %16, !dbg !6161
  br i1 %cmp30, label %cond.true32, label %cond.false37, !dbg !6161

cond.true32:                                      ; preds = %cond.end26
  %17 = load i32, i32* @inptr, align 4, !dbg !6161
  %inc33 = add i32 %17, 1, !dbg !6161
  store i32 %inc33, i32* @inptr, align 4, !dbg !6161
  %idxprom34 = zext i32 %17 to i64, !dbg !6161
  %arrayidx35 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom34, !dbg !6161, !ctir !231
  %18 = load i8, i8* %arrayidx35, align 1, !dbg !6161
  %conv36 = zext i8 %18 to i32, !dbg !6161
  br label %cond.end39, !dbg !6161

cond.false37:                                     ; preds = %cond.end26
  %call38 = call i32 @fill_inbuf(i32 0), !dbg !6161
  br label %cond.end39, !dbg !6161

cond.end39:                                       ; preds = %cond.false37, %cond.true32
  %cond40 = phi i32 [ %conv36, %cond.true32 ], [ %call38, %cond.false37 ], !dbg !6161
  %conv41 = trunc i32 %cond40 to i8, !dbg !6162
  %arrayidx42 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 1, !dbg !6163, !ctir !330
  store i8 %conv41, i8* %arrayidx42, align 1, !dbg !6164
  store i32 0, i32* %imagic1, align 4, !dbg !6165
  br label %if.end

if.end:                                           ; preds = %cond.end39, %cond.end13
  store i32 -1, i32* @method, align 4, !dbg !6166
  %19 = load i32, i32* @part_nb, align 4, !dbg !6167
  %inc43 = add nsw i32 %19, 1, !dbg !6167
  store i32 %inc43, i32* @part_nb, align 4, !dbg !6167
  store i64 0, i64* @header_bytes, align 8, !dbg !6168
  store i32 0, i32* @last_member, align 4, !dbg !6169
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6170, !ctir !330
  %call44 = call i32 @memcmp(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i64 0, i64 0), i64 2) #9, !dbg !6172
  %cmp45 = icmp eq i32 %call44, 0, !dbg !6173
  br i1 %cmp45, label %if.then51, label %lor.lhs.false, !dbg !6174

lor.lhs.false:                                    ; preds = %if.end
  %arraydecay47 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6175, !ctir !330
  %call48 = call i32 @memcmp(i8* %arraydecay47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i64 0, i64 0), i64 2) #9, !dbg !6176
  %cmp49 = icmp eq i32 %call48, 0, !dbg !6177
  br i1 %cmp49, label %if.then51, label %if.else358, !dbg !6178

if.then51:                                        ; preds = %lor.lhs.false, %if.end
  %20 = load i32, i32* @inptr, align 4, !dbg !6179
  %21 = load i32, i32* @insize, align 4, !dbg !6179
  %cmp52 = icmp ult i32 %20, %21, !dbg !6179
  br i1 %cmp52, label %cond.true54, label %cond.false59, !dbg !6179

cond.true54:                                      ; preds = %if.then51
  %22 = load i32, i32* @inptr, align 4, !dbg !6179
  %inc55 = add i32 %22, 1, !dbg !6179
  store i32 %inc55, i32* @inptr, align 4, !dbg !6179
  %idxprom56 = zext i32 %22 to i64, !dbg !6179
  %arrayidx57 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom56, !dbg !6179, !ctir !231
  %23 = load i8, i8* %arrayidx57, align 1, !dbg !6179
  %conv58 = zext i8 %23 to i32, !dbg !6179
  br label %cond.end61, !dbg !6179

cond.false59:                                     ; preds = %if.then51
  %call60 = call i32 @fill_inbuf(i32 0), !dbg !6179
  br label %cond.end61, !dbg !6179

cond.end61:                                       ; preds = %cond.false59, %cond.true54
  %cond62 = phi i32 [ %conv58, %cond.true54 ], [ %call60, %cond.false59 ], !dbg !6179
  store i32 %cond62, i32* @method, align 4, !dbg !6181
  %24 = load i32, i32* @method, align 4, !dbg !6182
  %cmp63 = icmp ne i32 %24, 8, !dbg !6184
  br i1 %cmp63, label %if.then65, label %if.end67, !dbg !6185

if.then65:                                        ; preds = %cond.end61
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6186
  %26 = load i8*, i8** @progname, align 8, !dbg !6188
  %27 = load i32, i32* @method, align 4, !dbg !6189
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.135, i64 0, i64 0), i8* %26, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %27), !dbg !6190
  store i32 1, i32* @exit_code, align 4, !dbg !6191
  store i32 -1, i32* %retval, align 4, !dbg !6192
  br label %return, !dbg !6192

if.end67:                                         ; preds = %cond.end61
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 8, !dbg !6193
  %28 = load i32, i32* @inptr, align 4, !dbg !6194
  %29 = load i32, i32* @insize, align 4, !dbg !6194
  %cmp68 = icmp ult i32 %28, %29, !dbg !6194
  br i1 %cmp68, label %cond.true70, label %cond.false75, !dbg !6194

cond.true70:                                      ; preds = %if.end67
  %30 = load i32, i32* @inptr, align 4, !dbg !6194
  %inc71 = add i32 %30, 1, !dbg !6194
  store i32 %inc71, i32* @inptr, align 4, !dbg !6194
  %idxprom72 = zext i32 %30 to i64, !dbg !6194
  %arrayidx73 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom72, !dbg !6194, !ctir !231
  %31 = load i8, i8* %arrayidx73, align 1, !dbg !6194
  %conv74 = zext i8 %31 to i32, !dbg !6194
  br label %cond.end77, !dbg !6194

cond.false75:                                     ; preds = %if.end67
  %call76 = call i32 @fill_inbuf(i32 0), !dbg !6194
  br label %cond.end77, !dbg !6194

cond.end77:                                       ; preds = %cond.false75, %cond.true70
  %cond78 = phi i32 [ %conv74, %cond.true70 ], [ %call76, %cond.false75 ], !dbg !6194
  %conv79 = trunc i32 %cond78 to i8, !dbg !6195
  store i8 %conv79, i8* %flags, align 1, !dbg !6196
  %32 = load i8, i8* %flags, align 1, !dbg !6197
  %conv80 = zext i8 %32 to i32, !dbg !6197
  %and = and i32 %conv80, 32, !dbg !6199
  %cmp81 = icmp ne i32 %and, 0, !dbg !6200
  br i1 %cmp81, label %if.then83, label %if.end85, !dbg !6201

if.then83:                                        ; preds = %cond.end77
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6202
  %34 = load i8*, i8** @progname, align 8, !dbg !6204
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.136, i64 0, i64 0), i8* %34, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6205
  store i32 1, i32* @exit_code, align 4, !dbg !6206
  store i32 -1, i32* %retval, align 4, !dbg !6207
  br label %return, !dbg !6207

if.end85:                                         ; preds = %cond.end77
  %35 = load i8, i8* %flags, align 1, !dbg !6208
  %conv86 = zext i8 %35 to i32, !dbg !6208
  %and87 = and i32 %conv86, 2, !dbg !6210
  %cmp88 = icmp ne i32 %and87, 0, !dbg !6211
  br i1 %cmp88, label %if.then90, label %if.end96, !dbg !6212

if.then90:                                        ; preds = %if.end85
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6213
  %37 = load i8*, i8** @progname, align 8, !dbg !6215
  %call91 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.137, i64 0, i64 0), i8* %37, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6216
  store i32 1, i32* @exit_code, align 4, !dbg !6217
  %38 = load i32, i32* @force, align 4, !dbg !6218
  %cmp92 = icmp sle i32 %38, 1, !dbg !6220
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !6221

if.then94:                                        ; preds = %if.then90
  store i32 -1, i32* %retval, align 4, !dbg !6222
  br label %return, !dbg !6222

if.end95:                                         ; preds = %if.then90
  br label %if.end96, !dbg !6223

if.end96:                                         ; preds = %if.end95, %if.end85
  %39 = load i8, i8* %flags, align 1, !dbg !6224
  %conv97 = zext i8 %39 to i32, !dbg !6224
  %and98 = and i32 %conv97, 192, !dbg !6226
  %cmp99 = icmp ne i32 %and98, 0, !dbg !6227
  br i1 %cmp99, label %if.then101, label %if.end108, !dbg !6228

if.then101:                                       ; preds = %if.end96
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6229
  %41 = load i8*, i8** @progname, align 8, !dbg !6231
  %42 = load i8, i8* %flags, align 1, !dbg !6232
  %conv102 = zext i8 %42 to i32, !dbg !6232
  %call103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.138, i64 0, i64 0), i8* %41, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %conv102), !dbg !6233
  store i32 1, i32* @exit_code, align 4, !dbg !6234
  %43 = load i32, i32* @force, align 4, !dbg !6235
  %cmp104 = icmp sle i32 %43, 1, !dbg !6237
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !6238

if.then106:                                       ; preds = %if.then101
  store i32 -1, i32* %retval, align 4, !dbg !6239
  br label %return, !dbg !6239

if.end107:                                        ; preds = %if.then101
  br label %if.end108, !dbg !6240

if.end108:                                        ; preds = %if.end107, %if.end96
  %44 = load i32, i32* @inptr, align 4, !dbg !6241
  %45 = load i32, i32* @insize, align 4, !dbg !6241
  %cmp109 = icmp ult i32 %44, %45, !dbg !6241
  br i1 %cmp109, label %cond.true111, label %cond.false116, !dbg !6241

cond.true111:                                     ; preds = %if.end108
  %46 = load i32, i32* @inptr, align 4, !dbg !6241
  %inc112 = add i32 %46, 1, !dbg !6241
  store i32 %inc112, i32* @inptr, align 4, !dbg !6241
  %idxprom113 = zext i32 %46 to i64, !dbg !6241
  %arrayidx114 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom113, !dbg !6241, !ctir !231
  %47 = load i8, i8* %arrayidx114, align 1, !dbg !6241
  %conv115 = zext i8 %47 to i32, !dbg !6241
  br label %cond.end118, !dbg !6241

cond.false116:                                    ; preds = %if.end108
  %call117 = call i32 @fill_inbuf(i32 0), !dbg !6241
  br label %cond.end118, !dbg !6241

cond.end118:                                      ; preds = %cond.false116, %cond.true111
  %cond119 = phi i32 [ %conv115, %cond.true111 ], [ %call117, %cond.false116 ], !dbg !6241
  %conv120 = sext i32 %cond119 to i64, !dbg !6242
  store i64 %conv120, i64* %stamp, align 8, !dbg !6243
  %48 = load i32, i32* @inptr, align 4, !dbg !6244
  %49 = load i32, i32* @insize, align 4, !dbg !6244
  %cmp121 = icmp ult i32 %48, %49, !dbg !6244
  br i1 %cmp121, label %cond.true123, label %cond.false128, !dbg !6244

cond.true123:                                     ; preds = %cond.end118
  %50 = load i32, i32* @inptr, align 4, !dbg !6244
  %inc124 = add i32 %50, 1, !dbg !6244
  store i32 %inc124, i32* @inptr, align 4, !dbg !6244
  %idxprom125 = zext i32 %50 to i64, !dbg !6244
  %arrayidx126 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom125, !dbg !6244, !ctir !231
  %51 = load i8, i8* %arrayidx126, align 1, !dbg !6244
  %conv127 = zext i8 %51 to i32, !dbg !6244
  br label %cond.end130, !dbg !6244

cond.false128:                                    ; preds = %cond.end118
  %call129 = call i32 @fill_inbuf(i32 0), !dbg !6244
  br label %cond.end130, !dbg !6244

cond.end130:                                      ; preds = %cond.false128, %cond.true123
  %cond131 = phi i32 [ %conv127, %cond.true123 ], [ %call129, %cond.false128 ], !dbg !6244
  %conv132 = sext i32 %cond131 to i64, !dbg !6245
  %shl = shl i64 %conv132, 8, !dbg !6246
  %52 = load i64, i64* %stamp, align 8, !dbg !6247
  %or = or i64 %52, %shl, !dbg !6247
  store i64 %or, i64* %stamp, align 8, !dbg !6247
  %53 = load i32, i32* @inptr, align 4, !dbg !6248
  %54 = load i32, i32* @insize, align 4, !dbg !6248
  %cmp133 = icmp ult i32 %53, %54, !dbg !6248
  br i1 %cmp133, label %cond.true135, label %cond.false140, !dbg !6248

cond.true135:                                     ; preds = %cond.end130
  %55 = load i32, i32* @inptr, align 4, !dbg !6248
  %inc136 = add i32 %55, 1, !dbg !6248
  store i32 %inc136, i32* @inptr, align 4, !dbg !6248
  %idxprom137 = zext i32 %55 to i64, !dbg !6248
  %arrayidx138 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom137, !dbg !6248, !ctir !231
  %56 = load i8, i8* %arrayidx138, align 1, !dbg !6248
  %conv139 = zext i8 %56 to i32, !dbg !6248
  br label %cond.end142, !dbg !6248

cond.false140:                                    ; preds = %cond.end130
  %call141 = call i32 @fill_inbuf(i32 0), !dbg !6248
  br label %cond.end142, !dbg !6248

cond.end142:                                      ; preds = %cond.false140, %cond.true135
  %cond143 = phi i32 [ %conv139, %cond.true135 ], [ %call141, %cond.false140 ], !dbg !6248
  %conv144 = sext i32 %cond143 to i64, !dbg !6249
  %shl145 = shl i64 %conv144, 16, !dbg !6250
  %57 = load i64, i64* %stamp, align 8, !dbg !6251
  %or146 = or i64 %57, %shl145, !dbg !6251
  store i64 %or146, i64* %stamp, align 8, !dbg !6251
  %58 = load i32, i32* @inptr, align 4, !dbg !6252
  %59 = load i32, i32* @insize, align 4, !dbg !6252
  %cmp147 = icmp ult i32 %58, %59, !dbg !6252
  br i1 %cmp147, label %cond.true149, label %cond.false154, !dbg !6252

cond.true149:                                     ; preds = %cond.end142
  %60 = load i32, i32* @inptr, align 4, !dbg !6252
  %inc150 = add i32 %60, 1, !dbg !6252
  store i32 %inc150, i32* @inptr, align 4, !dbg !6252
  %idxprom151 = zext i32 %60 to i64, !dbg !6252
  %arrayidx152 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom151, !dbg !6252, !ctir !231
  %61 = load i8, i8* %arrayidx152, align 1, !dbg !6252
  %conv153 = zext i8 %61 to i32, !dbg !6252
  br label %cond.end156, !dbg !6252

cond.false154:                                    ; preds = %cond.end142
  %call155 = call i32 @fill_inbuf(i32 0), !dbg !6252
  br label %cond.end156, !dbg !6252

cond.end156:                                      ; preds = %cond.false154, %cond.true149
  %cond157 = phi i32 [ %conv153, %cond.true149 ], [ %call155, %cond.false154 ], !dbg !6252
  %conv158 = sext i32 %cond157 to i64, !dbg !6253
  %shl159 = shl i64 %conv158, 24, !dbg !6254
  %62 = load i64, i64* %stamp, align 8, !dbg !6255
  %or160 = or i64 %62, %shl159, !dbg !6255
  store i64 %or160, i64* %stamp, align 8, !dbg !6255
  %63 = load i64, i64* %stamp, align 8, !dbg !6256
  %cmp161 = icmp ne i64 %63, 0, !dbg !6258
  br i1 %cmp161, label %land.lhs.true163, label %if.end166, !dbg !6259

land.lhs.true163:                                 ; preds = %cond.end156
  %64 = load i32, i32* @no_time, align 4, !dbg !6260
  %tobool164 = icmp ne i32 %64, 0, !dbg !6260
  br i1 %tobool164, label %if.end166, label %if.then165, !dbg !6261

if.then165:                                       ; preds = %land.lhs.true163
  %65 = load i64, i64* %stamp, align 8, !dbg !6262
  store i64 %65, i64* @time_stamp, align 8, !dbg !6263
  br label %if.end166, !dbg !6264

if.end166:                                        ; preds = %if.then165, %land.lhs.true163, %cond.end156
  %66 = load i32, i32* @inptr, align 4, !dbg !6265
  %67 = load i32, i32* @insize, align 4, !dbg !6265
  %cmp167 = icmp ult i32 %66, %67, !dbg !6265
  br i1 %cmp167, label %cond.true169, label %cond.false174, !dbg !6265

cond.true169:                                     ; preds = %if.end166
  %68 = load i32, i32* @inptr, align 4, !dbg !6265
  %inc170 = add i32 %68, 1, !dbg !6265
  store i32 %inc170, i32* @inptr, align 4, !dbg !6265
  %idxprom171 = zext i32 %68 to i64, !dbg !6265
  %arrayidx172 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom171, !dbg !6265, !ctir !231
  %69 = load i8, i8* %arrayidx172, align 1, !dbg !6265
  %conv173 = zext i8 %69 to i32, !dbg !6265
  br label %cond.end176, !dbg !6265

cond.false174:                                    ; preds = %if.end166
  %call175 = call i32 @fill_inbuf(i32 0), !dbg !6265
  br label %cond.end176, !dbg !6265

cond.end176:                                      ; preds = %cond.false174, %cond.true169
  %cond177 = phi i32 [ %conv173, %cond.true169 ], [ %call175, %cond.false174 ], !dbg !6265
  %70 = load i32, i32* @inptr, align 4, !dbg !6266
  %71 = load i32, i32* @insize, align 4, !dbg !6266
  %cmp178 = icmp ult i32 %70, %71, !dbg !6266
  br i1 %cmp178, label %cond.true180, label %cond.false185, !dbg !6266

cond.true180:                                     ; preds = %cond.end176
  %72 = load i32, i32* @inptr, align 4, !dbg !6266
  %inc181 = add i32 %72, 1, !dbg !6266
  store i32 %inc181, i32* @inptr, align 4, !dbg !6266
  %idxprom182 = zext i32 %72 to i64, !dbg !6266
  %arrayidx183 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom182, !dbg !6266, !ctir !231
  %73 = load i8, i8* %arrayidx183, align 1, !dbg !6266
  %conv184 = zext i8 %73 to i32, !dbg !6266
  br label %cond.end187, !dbg !6266

cond.false185:                                    ; preds = %cond.end176
  %call186 = call i32 @fill_inbuf(i32 0), !dbg !6266
  br label %cond.end187, !dbg !6266

cond.end187:                                      ; preds = %cond.false185, %cond.true180
  %cond188 = phi i32 [ %conv184, %cond.true180 ], [ %call186, %cond.false185 ], !dbg !6266
  %74 = load i8, i8* %flags, align 1, !dbg !6267
  %conv189 = zext i8 %74 to i32, !dbg !6267
  %and190 = and i32 %conv189, 2, !dbg !6269
  %cmp191 = icmp ne i32 %and190, 0, !dbg !6270
  br i1 %cmp191, label %if.then193, label %if.end222, !dbg !6271

if.then193:                                       ; preds = %cond.end187
  call void @llvm.dbg.declare(metadata i32* %part, metadata !6272, metadata !DIExpression()), !dbg !6274
  %75 = load i32, i32* @inptr, align 4, !dbg !6275
  %76 = load i32, i32* @insize, align 4, !dbg !6275
  %cmp194 = icmp ult i32 %75, %76, !dbg !6275
  br i1 %cmp194, label %cond.true196, label %cond.false201, !dbg !6275

cond.true196:                                     ; preds = %if.then193
  %77 = load i32, i32* @inptr, align 4, !dbg !6275
  %inc197 = add i32 %77, 1, !dbg !6275
  store i32 %inc197, i32* @inptr, align 4, !dbg !6275
  %idxprom198 = zext i32 %77 to i64, !dbg !6275
  %arrayidx199 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom198, !dbg !6275, !ctir !231
  %78 = load i8, i8* %arrayidx199, align 1, !dbg !6275
  %conv200 = zext i8 %78 to i32, !dbg !6275
  br label %cond.end203, !dbg !6275

cond.false201:                                    ; preds = %if.then193
  %call202 = call i32 @fill_inbuf(i32 0), !dbg !6275
  br label %cond.end203, !dbg !6275

cond.end203:                                      ; preds = %cond.false201, %cond.true196
  %cond204 = phi i32 [ %conv200, %cond.true196 ], [ %call202, %cond.false201 ], !dbg !6275
  store i32 %cond204, i32* %part, align 4, !dbg !6274
  %79 = load i32, i32* @inptr, align 4, !dbg !6276
  %80 = load i32, i32* @insize, align 4, !dbg !6276
  %cmp205 = icmp ult i32 %79, %80, !dbg !6276
  br i1 %cmp205, label %cond.true207, label %cond.false212, !dbg !6276

cond.true207:                                     ; preds = %cond.end203
  %81 = load i32, i32* @inptr, align 4, !dbg !6276
  %inc208 = add i32 %81, 1, !dbg !6276
  store i32 %inc208, i32* @inptr, align 4, !dbg !6276
  %idxprom209 = zext i32 %81 to i64, !dbg !6276
  %arrayidx210 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom209, !dbg !6276, !ctir !231
  %82 = load i8, i8* %arrayidx210, align 1, !dbg !6276
  %conv211 = zext i8 %82 to i32, !dbg !6276
  br label %cond.end214, !dbg !6276

cond.false212:                                    ; preds = %cond.end203
  %call213 = call i32 @fill_inbuf(i32 0), !dbg !6276
  br label %cond.end214, !dbg !6276

cond.end214:                                      ; preds = %cond.false212, %cond.true207
  %cond215 = phi i32 [ %conv211, %cond.true207 ], [ %call213, %cond.false212 ], !dbg !6276
  %shl216 = shl i32 %cond215, 8, !dbg !6277
  %83 = load i32, i32* %part, align 4, !dbg !6278
  %or217 = or i32 %83, %shl216, !dbg !6278
  store i32 %or217, i32* %part, align 4, !dbg !6278
  %84 = load i32, i32* @verbose, align 4, !dbg !6279
  %tobool218 = icmp ne i32 %84, 0, !dbg !6279
  br i1 %tobool218, label %if.then219, label %if.end221, !dbg !6281

if.then219:                                       ; preds = %cond.end214
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6282
  %86 = load i8*, i8** @progname, align 8, !dbg !6284
  %87 = load i32, i32* %part, align 4, !dbg !6285
  %call220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.139, i64 0, i64 0), i8* %86, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %87), !dbg !6286
  br label %if.end221, !dbg !6287

if.end221:                                        ; preds = %if.then219, %cond.end214
  br label %if.end222, !dbg !6288

if.end222:                                        ; preds = %if.end221, %cond.end187
  %88 = load i8, i8* %flags, align 1, !dbg !6289
  %conv223 = zext i8 %88 to i32, !dbg !6289
  %and224 = and i32 %conv223, 4, !dbg !6291
  %cmp225 = icmp ne i32 %and224, 0, !dbg !6292
  br i1 %cmp225, label %if.then227, label %if.end268, !dbg !6293

if.then227:                                       ; preds = %if.end222
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6294, metadata !DIExpression()), !dbg !6296
  %89 = load i32, i32* @inptr, align 4, !dbg !6297
  %90 = load i32, i32* @insize, align 4, !dbg !6297
  %cmp228 = icmp ult i32 %89, %90, !dbg !6297
  br i1 %cmp228, label %cond.true230, label %cond.false235, !dbg !6297

cond.true230:                                     ; preds = %if.then227
  %91 = load i32, i32* @inptr, align 4, !dbg !6297
  %inc231 = add i32 %91, 1, !dbg !6297
  store i32 %inc231, i32* @inptr, align 4, !dbg !6297
  %idxprom232 = zext i32 %91 to i64, !dbg !6297
  %arrayidx233 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom232, !dbg !6297, !ctir !231
  %92 = load i8, i8* %arrayidx233, align 1, !dbg !6297
  %conv234 = zext i8 %92 to i32, !dbg !6297
  br label %cond.end237, !dbg !6297

cond.false235:                                    ; preds = %if.then227
  %call236 = call i32 @fill_inbuf(i32 0), !dbg !6297
  br label %cond.end237, !dbg !6297

cond.end237:                                      ; preds = %cond.false235, %cond.true230
  %cond238 = phi i32 [ %conv234, %cond.true230 ], [ %call236, %cond.false235 ], !dbg !6297
  store i32 %cond238, i32* %len, align 4, !dbg !6296
  %93 = load i32, i32* @inptr, align 4, !dbg !6298
  %94 = load i32, i32* @insize, align 4, !dbg !6298
  %cmp239 = icmp ult i32 %93, %94, !dbg !6298
  br i1 %cmp239, label %cond.true241, label %cond.false246, !dbg !6298

cond.true241:                                     ; preds = %cond.end237
  %95 = load i32, i32* @inptr, align 4, !dbg !6298
  %inc242 = add i32 %95, 1, !dbg !6298
  store i32 %inc242, i32* @inptr, align 4, !dbg !6298
  %idxprom243 = zext i32 %95 to i64, !dbg !6298
  %arrayidx244 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom243, !dbg !6298, !ctir !231
  %96 = load i8, i8* %arrayidx244, align 1, !dbg !6298
  %conv245 = zext i8 %96 to i32, !dbg !6298
  br label %cond.end248, !dbg !6298

cond.false246:                                    ; preds = %cond.end237
  %call247 = call i32 @fill_inbuf(i32 0), !dbg !6298
  br label %cond.end248, !dbg !6298

cond.end248:                                      ; preds = %cond.false246, %cond.true241
  %cond249 = phi i32 [ %conv245, %cond.true241 ], [ %call247, %cond.false246 ], !dbg !6298
  %shl250 = shl i32 %cond249, 8, !dbg !6299
  %97 = load i32, i32* %len, align 4, !dbg !6300
  %or251 = or i32 %97, %shl250, !dbg !6300
  store i32 %or251, i32* %len, align 4, !dbg !6300
  %98 = load i32, i32* @verbose, align 4, !dbg !6301
  %tobool252 = icmp ne i32 %98, 0, !dbg !6301
  br i1 %tobool252, label %if.then253, label %if.end255, !dbg !6303

if.then253:                                       ; preds = %cond.end248
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6304
  %100 = load i8*, i8** @progname, align 8, !dbg !6306
  %101 = load i32, i32* %len, align 4, !dbg !6307
  %call254 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.140, i64 0, i64 0), i8* %100, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %101), !dbg !6308
  br label %if.end255, !dbg !6309

if.end255:                                        ; preds = %if.then253, %cond.end248
  br label %while.cond, !dbg !6310

while.cond:                                       ; preds = %cond.end266, %if.end255
  %102 = load i32, i32* %len, align 4, !dbg !6311
  %dec = add i32 %102, -1, !dbg !6311
  store i32 %dec, i32* %len, align 4, !dbg !6311
  %tobool256 = icmp ne i32 %102, 0, !dbg !6310
  br i1 %tobool256, label %while.body, label %while.end, !dbg !6310

while.body:                                       ; preds = %while.cond
  %103 = load i32, i32* @inptr, align 4, !dbg !6312
  %104 = load i32, i32* @insize, align 4, !dbg !6312
  %cmp257 = icmp ult i32 %103, %104, !dbg !6312
  br i1 %cmp257, label %cond.true259, label %cond.false264, !dbg !6312

cond.true259:                                     ; preds = %while.body
  %105 = load i32, i32* @inptr, align 4, !dbg !6312
  %inc260 = add i32 %105, 1, !dbg !6312
  store i32 %inc260, i32* @inptr, align 4, !dbg !6312
  %idxprom261 = zext i32 %105 to i64, !dbg !6312
  %arrayidx262 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom261, !dbg !6312, !ctir !231
  %106 = load i8, i8* %arrayidx262, align 1, !dbg !6312
  %conv263 = zext i8 %106 to i32, !dbg !6312
  br label %cond.end266, !dbg !6312

cond.false264:                                    ; preds = %while.body
  %call265 = call i32 @fill_inbuf(i32 0), !dbg !6312
  br label %cond.end266, !dbg !6312

cond.end266:                                      ; preds = %cond.false264, %cond.true259
  %cond267 = phi i32 [ %conv263, %cond.true259 ], [ %call265, %cond.false264 ], !dbg !6312
  br label %while.cond, !dbg !6310, !llvm.loop !6313

while.end:                                        ; preds = %while.cond
  br label %if.end268, !dbg !6314

if.end268:                                        ; preds = %while.end, %if.end222
  %107 = load i8, i8* %flags, align 1, !dbg !6315
  %conv269 = zext i8 %107 to i32, !dbg !6315
  %and270 = and i32 %conv269, 8, !dbg !6317
  %cmp271 = icmp ne i32 %and270, 0, !dbg !6318
  br i1 %cmp271, label %if.then273, label %if.end330, !dbg !6319

if.then273:                                       ; preds = %if.end268
  %108 = load i32, i32* @no_name, align 4, !dbg !6320
  %tobool274 = icmp ne i32 %108, 0, !dbg !6320
  br i1 %tobool274, label %if.then282, label %lor.lhs.false275, !dbg !6323

lor.lhs.false275:                                 ; preds = %if.then273
  %109 = load i32, i32* @to_stdout, align 4, !dbg !6324
  %tobool276 = icmp ne i32 %109, 0, !dbg !6324
  br i1 %tobool276, label %land.lhs.true277, label %lor.lhs.false279, !dbg !6325

land.lhs.true277:                                 ; preds = %lor.lhs.false275
  %110 = load i32, i32* @list, align 4, !dbg !6326
  %tobool278 = icmp ne i32 %110, 0, !dbg !6326
  br i1 %tobool278, label %lor.lhs.false279, label %if.then282, !dbg !6327

lor.lhs.false279:                                 ; preds = %land.lhs.true277, %lor.lhs.false275
  %111 = load i32, i32* @part_nb, align 4, !dbg !6328
  %cmp280 = icmp sgt i32 %111, 1, !dbg !6329
  br i1 %cmp280, label %if.then282, label %if.else298, !dbg !6330

if.then282:                                       ; preds = %lor.lhs.false279, %land.lhs.true277, %if.then273
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6331, metadata !DIExpression()), !dbg !6333
  br label %do.body, !dbg !6334

do.body:                                          ; preds = %do.cond, %if.then282
  %112 = load i32, i32* @inptr, align 4, !dbg !6335
  %113 = load i32, i32* @insize, align 4, !dbg !6335
  %cmp283 = icmp ult i32 %112, %113, !dbg !6335
  br i1 %cmp283, label %cond.true285, label %cond.false290, !dbg !6335

cond.true285:                                     ; preds = %do.body
  %114 = load i32, i32* @inptr, align 4, !dbg !6335
  %inc286 = add i32 %114, 1, !dbg !6335
  store i32 %inc286, i32* @inptr, align 4, !dbg !6335
  %idxprom287 = zext i32 %114 to i64, !dbg !6335
  %arrayidx288 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom287, !dbg !6335, !ctir !231
  %115 = load i8, i8* %arrayidx288, align 1, !dbg !6335
  %conv289 = zext i8 %115 to i32, !dbg !6335
  br label %cond.end292, !dbg !6335

cond.false290:                                    ; preds = %do.body
  %call291 = call i32 @fill_inbuf(i32 0), !dbg !6335
  br label %cond.end292, !dbg !6335

cond.end292:                                      ; preds = %cond.false290, %cond.true285
  %cond293 = phi i32 [ %conv289, %cond.true285 ], [ %call291, %cond.false290 ], !dbg !6335
  %conv294 = trunc i32 %cond293 to i8, !dbg !6335
  store i8 %conv294, i8* %c, align 1, !dbg !6337
  br label %do.cond, !dbg !6338

do.cond:                                          ; preds = %cond.end292
  %116 = load i8, i8* %c, align 1, !dbg !6339
  %conv295 = sext i8 %116 to i32, !dbg !6339
  %cmp296 = icmp ne i32 %conv295, 0, !dbg !6340
  br i1 %cmp296, label %do.body, label %do.end, !dbg !6338, !llvm.loop !6341

do.end:                                           ; preds = %do.cond
  br label %if.end329, !dbg !6343

if.else298:                                       ; preds = %lor.lhs.false279
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6344, metadata !DIExpression()), !dbg !6346
  %call299 = call i8* @base_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !6347
  store i8* %call299, i8** %p, align 8, !dbg !6346
  call void @llvm.dbg.declare(metadata i8** %base, metadata !6348, metadata !DIExpression()), !dbg !6349
  %117 = load i8*, i8** %p, align 8, !dbg !6350
  store i8* %117, i8** %base, align 8, !dbg !6349
  call void @llvm.dbg.declare(metadata i8** %base2, metadata !6351, metadata !DIExpression()), !dbg !6352
  br label %for.cond, !dbg !6353

for.cond:                                         ; preds = %if.end320, %if.else298
  %118 = load i32, i32* @inptr, align 4, !dbg !6354
  %119 = load i32, i32* @insize, align 4, !dbg !6354
  %cmp300 = icmp ult i32 %118, %119, !dbg !6354
  br i1 %cmp300, label %cond.true302, label %cond.false307, !dbg !6354

cond.true302:                                     ; preds = %for.cond
  %120 = load i32, i32* @inptr, align 4, !dbg !6354
  %inc303 = add i32 %120, 1, !dbg !6354
  store i32 %inc303, i32* @inptr, align 4, !dbg !6354
  %idxprom304 = zext i32 %120 to i64, !dbg !6354
  %arrayidx305 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom304, !dbg !6354, !ctir !231
  %121 = load i8, i8* %arrayidx305, align 1, !dbg !6354
  %conv306 = zext i8 %121 to i32, !dbg !6354
  br label %cond.end309, !dbg !6354

cond.false307:                                    ; preds = %for.cond
  %call308 = call i32 @fill_inbuf(i32 0), !dbg !6354
  br label %cond.end309, !dbg !6354

cond.end309:                                      ; preds = %cond.false307, %cond.true302
  %cond310 = phi i32 [ %conv306, %cond.true302 ], [ %call308, %cond.false307 ], !dbg !6354
  %conv311 = trunc i32 %cond310 to i8, !dbg !6358
  %122 = load i8*, i8** %p, align 8, !dbg !6359
  store i8 %conv311, i8* %122, align 1, !dbg !6360, !ctir !20
  %123 = load i8*, i8** %p, align 8, !dbg !6361
  %incdec.ptr = getelementptr inbounds i8, i8* %123, i32 1, !dbg !6361, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6361
  %124 = load i8, i8* %123, align 1, !dbg !6363, !ctir !20
  %conv312 = sext i8 %124 to i32, !dbg !6363
  %cmp313 = icmp eq i32 %conv312, 0, !dbg !6364
  br i1 %cmp313, label %if.then315, label %if.end316, !dbg !6365

if.then315:                                       ; preds = %cond.end309
  br label %for.end, !dbg !6366

if.end316:                                        ; preds = %cond.end309
  %125 = load i8*, i8** %p, align 8, !dbg !6367
  %cmp317 = icmp uge i8* %125, getelementptr inbounds (i8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i64 1024), !dbg !6369
  br i1 %cmp317, label %if.then319, label %if.end320, !dbg !6370

if.then319:                                       ; preds = %if.end316
  call void @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.141, i64 0, i64 0)), !dbg !6371
  br label %if.end320, !dbg !6373

if.end320:                                        ; preds = %if.then319, %if.end316
  br label %for.cond, !dbg !6374, !llvm.loop !6375

for.end:                                          ; preds = %if.then315
  %126 = load i8*, i8** %base, align 8, !dbg !6378
  %call321 = call i8* @base_name(i8* %126), !dbg !6379
  store i8* %call321, i8** %base2, align 8, !dbg !6380
  %127 = load i8*, i8** %base, align 8, !dbg !6381
  %128 = load i8*, i8** %base2, align 8, !dbg !6382
  %call322 = call i8* @strcpy(i8* %127, i8* %128) #11, !dbg !6383
  %129 = load i32, i32* @list, align 4, !dbg !6384
  %tobool323 = icmp ne i32 %129, 0, !dbg !6384
  br i1 %tobool323, label %if.end328, label %if.then324, !dbg !6386

if.then324:                                       ; preds = %for.end
  %130 = load i8*, i8** %base, align 8, !dbg !6387
  %tobool325 = icmp ne i8* %130, null, !dbg !6387
  br i1 %tobool325, label %if.then326, label %if.end327, !dbg !6390

if.then326:                                       ; preds = %if.then324
  store i32 0, i32* @list, align 4, !dbg !6391
  br label %if.end327, !dbg !6392

if.end327:                                        ; preds = %if.then326, %if.then324
  br label %if.end328, !dbg !6393

if.end328:                                        ; preds = %if.end327, %for.end
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %do.end
  br label %if.end330, !dbg !6394

if.end330:                                        ; preds = %if.end329, %if.end268
  %131 = load i8, i8* %flags, align 1, !dbg !6395
  %conv331 = zext i8 %131 to i32, !dbg !6395
  %and332 = and i32 %conv331, 16, !dbg !6397
  %cmp333 = icmp ne i32 %and332, 0, !dbg !6398
  br i1 %cmp333, label %if.then335, label %if.end352, !dbg !6399

if.then335:                                       ; preds = %if.end330
  br label %while.cond336, !dbg !6400

while.cond336:                                    ; preds = %while.body350, %if.then335
  %132 = load i32, i32* @inptr, align 4, !dbg !6402
  %133 = load i32, i32* @insize, align 4, !dbg !6402
  %cmp337 = icmp ult i32 %132, %133, !dbg !6402
  br i1 %cmp337, label %cond.true339, label %cond.false344, !dbg !6402

cond.true339:                                     ; preds = %while.cond336
  %134 = load i32, i32* @inptr, align 4, !dbg !6402
  %inc340 = add i32 %134, 1, !dbg !6402
  store i32 %inc340, i32* @inptr, align 4, !dbg !6402
  %idxprom341 = zext i32 %134 to i64, !dbg !6402
  %arrayidx342 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom341, !dbg !6402, !ctir !231
  %135 = load i8, i8* %arrayidx342, align 1, !dbg !6402
  %conv343 = zext i8 %135 to i32, !dbg !6402
  br label %cond.end346, !dbg !6402

cond.false344:                                    ; preds = %while.cond336
  %call345 = call i32 @fill_inbuf(i32 0), !dbg !6402
  br label %cond.end346, !dbg !6402

cond.end346:                                      ; preds = %cond.false344, %cond.true339
  %cond347 = phi i32 [ %conv343, %cond.true339 ], [ %call345, %cond.false344 ], !dbg !6402
  %cmp348 = icmp ne i32 %cond347, 0, !dbg !6403
  br i1 %cmp348, label %while.body350, label %while.end351, !dbg !6400

while.body350:                                    ; preds = %cond.end346
  br label %while.cond336, !dbg !6400, !llvm.loop !6404

while.end351:                                     ; preds = %cond.end346
  br label %if.end352, !dbg !6406

if.end352:                                        ; preds = %while.end351, %if.end330
  %136 = load i32, i32* @part_nb, align 4, !dbg !6407
  %cmp353 = icmp eq i32 %136, 1, !dbg !6409
  br i1 %cmp353, label %if.then355, label %if.end357, !dbg !6410

if.then355:                                       ; preds = %if.end352
  %137 = load i32, i32* @inptr, align 4, !dbg !6411
  %conv356 = zext i32 %137 to i64, !dbg !6411
  %add = add i64 %conv356, 16, !dbg !6413
  store i64 %add, i64* @header_bytes, align 8, !dbg !6414
  br label %if.end357, !dbg !6415

if.end357:                                        ; preds = %if.then355, %if.end352
  br label %if.end406, !dbg !6416

if.else358:                                       ; preds = %lor.lhs.false
  %arraydecay359 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6417, !ctir !330
  %call360 = call i32 @memcmp(i8* %arraydecay359, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.142, i64 0, i64 0), i64 2) #9, !dbg !6419
  %cmp361 = icmp eq i32 %call360, 0, !dbg !6420
  br i1 %cmp361, label %land.lhs.true363, label %if.else376, !dbg !6421

land.lhs.true363:                                 ; preds = %if.else358
  %138 = load i32, i32* @inptr, align 4, !dbg !6422
  %cmp364 = icmp eq i32 %138, 2, !dbg !6423
  br i1 %cmp364, label %land.lhs.true366, label %if.else376, !dbg !6424

land.lhs.true366:                                 ; preds = %land.lhs.true363
  %call367 = call i32 @memcmp(i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.142, i64 0, i64 0), i64 4) #9, !dbg !6425
  %cmp368 = icmp eq i32 %call367, 0, !dbg !6426
  br i1 %cmp368, label %if.then370, label %if.else376, !dbg !6427

if.then370:                                       ; preds = %land.lhs.true366
  store i32 0, i32* @inptr, align 4, !dbg !6428
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 8, !dbg !6430
  %139 = load i32, i32* %in.addr, align 4, !dbg !6431
  %call371 = call i32 @check_zipfile(i32 %139), !dbg !6433
  %cmp372 = icmp ne i32 %call371, 0, !dbg !6434
  br i1 %cmp372, label %if.then374, label %if.end375, !dbg !6435

if.then374:                                       ; preds = %if.then370
  store i32 -1, i32* %retval, align 4, !dbg !6436
  br label %return, !dbg !6436

if.end375:                                        ; preds = %if.then370
  store i32 1, i32* @last_member, align 4, !dbg !6437
  br label %if.end405, !dbg !6438

if.else376:                                       ; preds = %land.lhs.true366, %land.lhs.true363, %if.else358
  %arraydecay377 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6439, !ctir !330
  %call378 = call i32 @memcmp(i8* %arraydecay377, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i64 0, i64 0), i64 2) #9, !dbg !6441
  %cmp379 = icmp eq i32 %call378, 0, !dbg !6442
  br i1 %cmp379, label %if.then381, label %if.else382, !dbg !6443

if.then381:                                       ; preds = %if.else376
  store i32 (i32, i32)* @unpack, i32 (i32, i32)** @work, align 8, !dbg !6444
  store i32 2, i32* @method, align 4, !dbg !6446
  br label %if.end404, !dbg !6447

if.else382:                                       ; preds = %if.else376
  %arraydecay383 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6448, !ctir !330
  %call384 = call i32 @memcmp(i8* %arraydecay383, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.144, i64 0, i64 0), i64 2) #9, !dbg !6450
  %cmp385 = icmp eq i32 %call384, 0, !dbg !6451
  br i1 %cmp385, label %if.then387, label %if.else388, !dbg !6452

if.then387:                                       ; preds = %if.else382
  store i32 (i32, i32)* @unlzw, i32 (i32, i32)** @work, align 8, !dbg !6453
  store i32 1, i32* @method, align 4, !dbg !6455
  store i32 1, i32* @last_member, align 4, !dbg !6456
  br label %if.end403, !dbg !6457

if.else388:                                       ; preds = %if.else382
  %arraydecay389 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6458, !ctir !330
  %call390 = call i32 @memcmp(i8* %arraydecay389, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i64 0, i64 0), i64 2) #9, !dbg !6460
  %cmp391 = icmp eq i32 %call390, 0, !dbg !6461
  br i1 %cmp391, label %if.then393, label %if.else394, !dbg !6462

if.then393:                                       ; preds = %if.else388
  store i32 (i32, i32)* @unlzh, i32 (i32, i32)** @work, align 8, !dbg !6463
  store i32 3, i32* @method, align 4, !dbg !6465
  store i32 1, i32* @last_member, align 4, !dbg !6466
  br label %if.end402, !dbg !6467

if.else394:                                       ; preds = %if.else388
  %140 = load i32, i32* @force, align 4, !dbg !6468
  %tobool395 = icmp ne i32 %140, 0, !dbg !6468
  br i1 %tobool395, label %land.lhs.true396, label %if.end401, !dbg !6470

land.lhs.true396:                                 ; preds = %if.else394
  %141 = load i32, i32* @to_stdout, align 4, !dbg !6471
  %tobool397 = icmp ne i32 %141, 0, !dbg !6471
  br i1 %tobool397, label %land.lhs.true398, label %if.end401, !dbg !6472

land.lhs.true398:                                 ; preds = %land.lhs.true396
  %142 = load i32, i32* @list, align 4, !dbg !6473
  %tobool399 = icmp ne i32 %142, 0, !dbg !6473
  br i1 %tobool399, label %if.end401, label %if.then400, !dbg !6474

if.then400:                                       ; preds = %land.lhs.true398
  store i32 0, i32* @method, align 4, !dbg !6475
  store i32 (i32, i32)* @copy, i32 (i32, i32)** @work, align 8, !dbg !6477
  store i32 0, i32* @inptr, align 4, !dbg !6478
  store i32 1, i32* @last_member, align 4, !dbg !6479
  br label %if.end401, !dbg !6480

if.end401:                                        ; preds = %if.then400, %land.lhs.true398, %land.lhs.true396, %if.else394
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.then393
  br label %if.end403

if.end403:                                        ; preds = %if.end402, %if.then387
  br label %if.end404

if.end404:                                        ; preds = %if.end403, %if.then381
  br label %if.end405

if.end405:                                        ; preds = %if.end404, %if.end375
  br label %if.end406

if.end406:                                        ; preds = %if.end405, %if.end357
  %143 = load i32, i32* @method, align 4, !dbg !6481
  %cmp407 = icmp sge i32 %143, 0, !dbg !6483
  br i1 %cmp407, label %if.then409, label %if.end410, !dbg !6484

if.then409:                                       ; preds = %if.end406
  %144 = load i32, i32* @method, align 4, !dbg !6485
  store i32 %144, i32* %retval, align 4, !dbg !6486
  br label %return, !dbg !6486

if.end410:                                        ; preds = %if.end406
  %145 = load i32, i32* @part_nb, align 4, !dbg !6487
  %cmp411 = icmp eq i32 %145, 1, !dbg !6489
  br i1 %cmp411, label %if.then413, label %if.else415, !dbg !6490

if.then413:                                       ; preds = %if.end410
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6491
  %147 = load i8*, i8** @progname, align 8, !dbg !6493
  %call414 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %146, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.146, i64 0, i64 0), i8* %147, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6494
  store i32 1, i32* @exit_code, align 4, !dbg !6495
  store i32 -1, i32* %retval, align 4, !dbg !6496
  br label %return, !dbg !6496

if.else415:                                       ; preds = %if.end410
  %arrayidx416 = getelementptr inbounds [2 x i8], [2 x i8]* %magic, i64 0, i64 0, !dbg !6497, !ctir !330
  %148 = load i8, i8* %arrayidx416, align 1, !dbg !6497
  %conv417 = sext i8 %148 to i32, !dbg !6497
  %cmp418 = icmp eq i32 %conv417, 0, !dbg !6500
  br i1 %cmp418, label %if.then420, label %if.end451, !dbg !6501

if.then420:                                       ; preds = %if.else415
  call void @llvm.dbg.declare(metadata i32* %inbyte, metadata !6502, metadata !DIExpression()), !dbg !6504
  %149 = load i32, i32* %imagic1, align 4, !dbg !6505
  store i32 %149, i32* %inbyte, align 4, !dbg !6507
  br label %for.cond421, !dbg !6508

for.cond421:                                      ; preds = %cond.end433, %if.then420
  %150 = load i32, i32* %inbyte, align 4, !dbg !6509
  %cmp422 = icmp eq i32 %150, 0, !dbg !6511
  br i1 %cmp422, label %for.body, label %for.end435, !dbg !6512

for.body:                                         ; preds = %for.cond421
  br label %for.inc, !dbg !6513

for.inc:                                          ; preds = %for.body
  %151 = load i32, i32* @inptr, align 4, !dbg !6514
  %152 = load i32, i32* @insize, align 4, !dbg !6514
  %cmp424 = icmp ult i32 %151, %152, !dbg !6514
  br i1 %cmp424, label %cond.true426, label %cond.false431, !dbg !6514

cond.true426:                                     ; preds = %for.inc
  %153 = load i32, i32* @inptr, align 4, !dbg !6514
  %inc427 = add i32 %153, 1, !dbg !6514
  store i32 %inc427, i32* @inptr, align 4, !dbg !6514
  %idxprom428 = zext i32 %153 to i64, !dbg !6514
  %arrayidx429 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom428, !dbg !6514, !ctir !231
  %154 = load i8, i8* %arrayidx429, align 1, !dbg !6514
  %conv430 = zext i8 %154 to i32, !dbg !6514
  br label %cond.end433, !dbg !6514

cond.false431:                                    ; preds = %for.inc
  %call432 = call i32 @fill_inbuf(i32 1), !dbg !6514
  br label %cond.end433, !dbg !6514

cond.end433:                                      ; preds = %cond.false431, %cond.true426
  %cond434 = phi i32 [ %conv430, %cond.true426 ], [ %call432, %cond.false431 ], !dbg !6514
  store i32 %cond434, i32* %inbyte, align 4, !dbg !6515
  br label %for.cond421, !dbg !6516, !llvm.loop !6517

for.end435:                                       ; preds = %for.cond421
  %155 = load i32, i32* %inbyte, align 4, !dbg !6519
  %cmp436 = icmp eq i32 %155, -1, !dbg !6521
  br i1 %cmp436, label %if.then438, label %if.end450, !dbg !6522

if.then438:                                       ; preds = %for.end435
  %156 = load i32, i32* @verbose, align 4, !dbg !6523
  %tobool439 = icmp ne i32 %156, 0, !dbg !6523
  br i1 %tobool439, label %if.then440, label %if.end449, !dbg !6526

if.then440:                                       ; preds = %if.then438
  %157 = load i32, i32* @quiet, align 4, !dbg !6527
  %tobool441 = icmp ne i32 %157, 0, !dbg !6527
  br i1 %tobool441, label %if.end444, label %if.then442, !dbg !6530

if.then442:                                       ; preds = %if.then440
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6527
  %159 = load i8*, i8** @progname, align 8, !dbg !6527
  %call443 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %158, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.147, i64 0, i64 0), i8* %159, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6527
  br label %if.end444, !dbg !6527

if.end444:                                        ; preds = %if.then442, %if.then440
  %160 = load i32, i32* @exit_code, align 4, !dbg !6531
  %cmp445 = icmp eq i32 %160, 0, !dbg !6531
  br i1 %cmp445, label %if.then447, label %if.end448, !dbg !6530

if.then447:                                       ; preds = %if.end444
  store i32 2, i32* @exit_code, align 4, !dbg !6531
  br label %if.end448, !dbg !6531

if.end448:                                        ; preds = %if.then447, %if.end444
  br label %if.end449, !dbg !6530

if.end449:                                        ; preds = %if.end448, %if.then438
  store i32 -3, i32* %retval, align 4, !dbg !6533
  br label %return, !dbg !6533

if.end450:                                        ; preds = %for.end435
  br label %if.end451, !dbg !6534

if.end451:                                        ; preds = %if.end450, %if.else415
  %161 = load i32, i32* @quiet, align 4, !dbg !6535
  %tobool452 = icmp ne i32 %161, 0, !dbg !6535
  br i1 %tobool452, label %if.end455, label %if.then453, !dbg !6538

if.then453:                                       ; preds = %if.end451
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6535
  %163 = load i8*, i8** @progname, align 8, !dbg !6535
  %call454 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %162, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.148, i64 0, i64 0), i8* %163, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6535
  br label %if.end455, !dbg !6535

if.end455:                                        ; preds = %if.then453, %if.end451
  %164 = load i32, i32* @exit_code, align 4, !dbg !6539
  %cmp456 = icmp eq i32 %164, 0, !dbg !6539
  br i1 %cmp456, label %if.then458, label %if.end459, !dbg !6538

if.then458:                                       ; preds = %if.end455
  store i32 2, i32* @exit_code, align 4, !dbg !6539
  br label %if.end459, !dbg !6539

if.end459:                                        ; preds = %if.then458, %if.end455
  store i32 -2, i32* %retval, align 4, !dbg !6541
  br label %return, !dbg !6541

return:                                           ; preds = %if.end459, %if.end449, %if.then413, %if.then409, %if.then374, %if.then106, %if.then94, %if.then83, %if.then65
  %165 = load i32, i32* %retval, align 4, !dbg !6542
  ret i32 %165, !dbg !6542
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @input_eof() #0 !dbg !6543 {
entry:
  %retval = alloca i32, align 4
  %0 = load i32, i32* @decompress, align 4, !dbg !6544
  %tobool = icmp ne i32 %0, 0, !dbg !6544
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6546

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @last_member, align 4, !dbg !6547
  %tobool1 = icmp ne i32 %1, 0, !dbg !6547
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6548

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !6549
  br label %return, !dbg !6549

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* @inptr, align 4, !dbg !6550
  %3 = load i32, i32* @insize, align 4, !dbg !6552
  %cmp = icmp eq i32 %2, %3, !dbg !6553
  br i1 %cmp, label %if.then2, label %if.end8, !dbg !6554

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* @insize, align 4, !dbg !6555
  %cmp3 = icmp ne i32 %4, 32768, !dbg !6558
  br i1 %cmp3, label %if.then6, label %lor.lhs.false4, !dbg !6559

lor.lhs.false4:                                   ; preds = %if.then2
  %call = call i32 @fill_inbuf(i32 1), !dbg !6560
  %cmp5 = icmp eq i32 %call, -1, !dbg !6561
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6562

if.then6:                                         ; preds = %lor.lhs.false4, %if.then2
  store i32 1, i32* %retval, align 4, !dbg !6563
  br label %return, !dbg !6563

if.end7:                                          ; preds = %lor.lhs.false4
  store i32 0, i32* @inptr, align 4, !dbg !6564
  br label %if.end8, !dbg !6565

if.end8:                                          ; preds = %if.end7, %if.end
  store i32 0, i32* %retval, align 4, !dbg !6566
  br label %return, !dbg !6566

return:                                           ; preds = %if.end8, %if.then6, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !6567
  ret i32 %5, !dbg !6567
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fill_inbuf(i32 %eof_ok) #0 !dbg !6568 {
entry:
  %retval = alloca i32, align 4
  %eof_ok.addr = alloca i32, align 4
  %len = alloca i32, align 4, !ctir !12
  store i32 %eof_ok, i32* %eof_ok.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %eof_ok.addr, metadata !6569, metadata !DIExpression()), !dbg !6570
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6571, metadata !DIExpression()), !dbg !6572
  store i32 0, i32* @insize, align 4, !dbg !6573
  br label %do.body, !dbg !6574

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* @ifd, align 4, !dbg !6575
  %1 = load i32, i32* @insize, align 4, !dbg !6577
  %idx.ext = zext i32 %1 to i64, !dbg !6578
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext, !dbg !6578, !ctir !20
  %2 = load i32, i32* @insize, align 4, !dbg !6579
  %sub = sub i32 32768, %2, !dbg !6580
  %conv = zext i32 %sub to i64, !dbg !6581
  %call = call i64 @read(i32 %0, i8* %add.ptr, i64 %conv), !dbg !6582
  %conv1 = trunc i64 %call to i32, !dbg !6582
  store i32 %conv1, i32* %len, align 4, !dbg !6583
  %3 = load i32, i32* %len, align 4, !dbg !6584
  %cmp = icmp eq i32 %3, 0, !dbg !6586
  br i1 %cmp, label %if.then, label %if.end, !dbg !6587

if.then:                                          ; preds = %do.body
  br label %do.end, !dbg !6588

if.end:                                           ; preds = %do.body
  %4 = load i32, i32* %len, align 4, !dbg !6589
  %cmp3 = icmp eq i32 %4, -1, !dbg !6591
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !6592

if.then5:                                         ; preds = %if.end
  call void @read_error(), !dbg !6593
  br label %do.end, !dbg !6595

if.end6:                                          ; preds = %if.end
  %5 = load i32, i32* %len, align 4, !dbg !6596
  %6 = load i32, i32* @insize, align 4, !dbg !6597
  %add = add i32 %6, %5, !dbg !6597
  store i32 %add, i32* @insize, align 4, !dbg !6597
  br label %do.cond, !dbg !6598

do.cond:                                          ; preds = %if.end6
  %7 = load i32, i32* @insize, align 4, !dbg !6599
  %cmp7 = icmp ult i32 %7, 32768, !dbg !6600
  br i1 %cmp7, label %do.body, label %do.end, !dbg !6598, !llvm.loop !6601

do.end:                                           ; preds = %do.cond, %if.then5, %if.then
  %8 = load i32, i32* @insize, align 4, !dbg !6603
  %cmp9 = icmp eq i32 %8, 0, !dbg !6605
  br i1 %cmp9, label %if.then11, label %if.end15, !dbg !6606

if.then11:                                        ; preds = %do.end
  %9 = load i32, i32* %eof_ok.addr, align 4, !dbg !6607
  %tobool = icmp ne i32 %9, 0, !dbg !6607
  br i1 %tobool, label %if.then12, label %if.end13, !dbg !6610

if.then12:                                        ; preds = %if.then11
  store i32 -1, i32* %retval, align 4, !dbg !6611
  br label %return, !dbg !6611

if.end13:                                         ; preds = %if.then11
  call void @flush_window(), !dbg !6612
  %call14 = call i32* @__errno_location() #12, !dbg !6613
  store i32 0, i32* %call14, align 4, !dbg !6614, !ctir !12
  call void @read_error(), !dbg !6615
  br label %if.end15, !dbg !6616

if.end15:                                         ; preds = %if.end13, %do.end
  %10 = load i32, i32* @insize, align 4, !dbg !6617
  %conv16 = zext i32 %10 to i64, !dbg !6618
  %11 = load i64, i64* @bytes_in, align 8, !dbg !6619
  %add17 = add nsw i64 %11, %conv16, !dbg !6619
  store i64 %add17, i64* @bytes_in, align 8, !dbg !6619
  store i32 1, i32* @inptr, align 4, !dbg !6620
  %12 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), align 16, !dbg !6621
  %conv18 = zext i8 %12 to i32, !dbg !6621
  store i32 %conv18, i32* %retval, align 4, !dbg !6622
  br label %return, !dbg !6622

return:                                           ; preds = %if.end15, %if.then12
  %13 = load i32, i32* %retval, align 4, !dbg !6623
  ret i32 %13, !dbg !6623
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @flush_window() #0 !dbg !6624 {
entry:
  %0 = load i32, i32* @outcnt, align 4, !dbg !6625
  %cmp = icmp eq i32 %0, 0, !dbg !6627
  br i1 %cmp, label %if.then, label %if.end, !dbg !6628

if.then:                                          ; preds = %entry
  br label %return, !dbg !6629

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @outcnt, align 4, !dbg !6630
  %call = call i64 @updcrc(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %1), !dbg !6631
  %2 = load i32, i32* @test, align 4, !dbg !6632
  %tobool = icmp ne i32 %2, 0, !dbg !6632
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !6634

if.then1:                                         ; preds = %if.end
  %3 = load i32, i32* @ofd, align 4, !dbg !6635
  %4 = load i32, i32* @outcnt, align 4, !dbg !6637
  call void @write_buf(i32 %3, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %4), !dbg !6638
  br label %if.end2, !dbg !6639

if.end2:                                          ; preds = %if.then1, %if.end
  %5 = load i32, i32* @outcnt, align 4, !dbg !6640
  %conv = zext i32 %5 to i64, !dbg !6641
  %6 = load i64, i64* @bytes_out, align 8, !dbg !6642
  %add = add nsw i64 %6, %conv, !dbg !6642
  store i64 %add, i64* @bytes_out, align 8, !dbg !6642
  store i32 0, i32* @outcnt, align 4, !dbg !6643
  br label %return, !dbg !6644

return:                                           ; preds = %if.end2, %if.then
  ret void, !dbg !6644
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @unzip(i32 %in, i32 %out) #0 !dbg !6645 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %orig_crc = alloca i64, align 8, !ctir !51
  %orig_len = alloca i64, align 8, !ctir !51
  %n = alloca i32, align 4, !ctir !12
  %buf = alloca [16 x i8], align 16, !ctir !291
  %err = alloca i32, align 4, !ctir !12
  %res = alloca i32, align 4, !ctir !12
  %n48 = alloca i64, align 8, !ctir !51
  %c = alloca i8, align 1, !ctir !13
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !6646, metadata !DIExpression()), !dbg !6647
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !6648, metadata !DIExpression()), !dbg !6649
  call void @llvm.dbg.declare(metadata i64* %orig_crc, metadata !6650, metadata !DIExpression()), !dbg !6651
  store i64 0, i64* %orig_crc, align 8, !dbg !6651
  call void @llvm.dbg.declare(metadata i64* %orig_len, metadata !6652, metadata !DIExpression()), !dbg !6653
  store i64 0, i64* %orig_len, align 8, !dbg !6653
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6654, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.declare(metadata [16 x i8]* %buf, metadata !6656, metadata !DIExpression()), !dbg !6657
  call void @llvm.dbg.declare(metadata i32* %err, metadata !6658, metadata !DIExpression()), !dbg !6659
  store i32 0, i32* %err, align 4, !dbg !6659
  %0 = load i32, i32* %in.addr, align 4, !dbg !6660
  store i32 %0, i32* @ifd, align 4, !dbg !6661
  %1 = load i32, i32* %out.addr, align 4, !dbg !6662
  store i32 %1, i32* @ofd, align 4, !dbg !6663
  %call = call i64 @updcrc(i8* null, i32 0), !dbg !6664
  %2 = load i32, i32* @pkzip, align 4, !dbg !6665
  %tobool = icmp ne i32 %2, 0, !dbg !6665
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6667

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @ext_header, align 4, !dbg !6668
  %tobool1 = icmp ne i32 %3, 0, !dbg !6668
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6669

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 14), align 1, !dbg !6670
  %conv = zext i8 %4 to i16, !dbg !6670
  %conv2 = zext i16 %conv to i32, !dbg !6670
  %5 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 15), align 1, !dbg !6670
  %conv3 = zext i8 %5 to i16, !dbg !6670
  %conv4 = zext i16 %conv3 to i32, !dbg !6670
  %shl = shl i32 %conv4, 8, !dbg !6670
  %or = or i32 %conv2, %shl, !dbg !6670
  %conv5 = sext i32 %or to i64, !dbg !6670
  %6 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 16), align 1, !dbg !6670
  %conv6 = zext i8 %6 to i16, !dbg !6670
  %conv7 = zext i16 %conv6 to i32, !dbg !6670
  %7 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 17), align 1, !dbg !6670
  %conv8 = zext i8 %7 to i16, !dbg !6670
  %conv9 = zext i16 %conv8 to i32, !dbg !6670
  %shl10 = shl i32 %conv9, 8, !dbg !6670
  %or11 = or i32 %conv7, %shl10, !dbg !6670
  %conv12 = sext i32 %or11 to i64, !dbg !6670
  %shl13 = shl i64 %conv12, 16, !dbg !6670
  %or14 = or i64 %conv5, %shl13, !dbg !6670
  store i64 %or14, i64* %orig_crc, align 8, !dbg !6672
  %8 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 22), align 1, !dbg !6673
  %conv15 = zext i8 %8 to i16, !dbg !6673
  %conv16 = zext i16 %conv15 to i32, !dbg !6673
  %9 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 23), align 1, !dbg !6673
  %conv17 = zext i8 %9 to i16, !dbg !6673
  %conv18 = zext i16 %conv17 to i32, !dbg !6673
  %shl19 = shl i32 %conv18, 8, !dbg !6673
  %or20 = or i32 %conv16, %shl19, !dbg !6673
  %conv21 = sext i32 %or20 to i64, !dbg !6673
  %10 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 24), align 1, !dbg !6673
  %conv22 = zext i8 %10 to i16, !dbg !6673
  %conv23 = zext i16 %conv22 to i32, !dbg !6673
  %11 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 25), align 1, !dbg !6673
  %conv24 = zext i8 %11 to i16, !dbg !6673
  %conv25 = zext i16 %conv24 to i32, !dbg !6673
  %shl26 = shl i32 %conv25, 8, !dbg !6673
  %or27 = or i32 %conv23, %shl26, !dbg !6673
  %conv28 = sext i32 %or27 to i64, !dbg !6673
  %shl29 = shl i64 %conv28, 16, !dbg !6673
  %or30 = or i64 %conv21, %shl29, !dbg !6673
  store i64 %or30, i64* %orig_len, align 8, !dbg !6674
  br label %if.end, !dbg !6675

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %12 = load i32, i32* @method, align 4, !dbg !6676
  %cmp = icmp eq i32 %12, 8, !dbg !6678
  br i1 %cmp, label %if.then32, label %if.else42, !dbg !6679

if.then32:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6680, metadata !DIExpression()), !dbg !6682
  %call33 = call i32 @inflate(), !dbg !6683
  store i32 %call33, i32* %res, align 4, !dbg !6682
  %13 = load i32, i32* %res, align 4, !dbg !6684
  %cmp34 = icmp eq i32 %13, 3, !dbg !6686
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !6687

if.then36:                                        ; preds = %if.then32
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.62, i64 0, i64 0)), !dbg !6688
  br label %if.end41, !dbg !6690

if.else:                                          ; preds = %if.then32
  %14 = load i32, i32* %res, align 4, !dbg !6691
  %cmp37 = icmp ne i32 %14, 0, !dbg !6693
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !6694

if.then39:                                        ; preds = %if.else
  call void @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.63, i64 0, i64 0)), !dbg !6695
  br label %if.end40, !dbg !6697

if.end40:                                         ; preds = %if.then39, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then36
  br label %if.end120, !dbg !6698

if.else42:                                        ; preds = %if.end
  %15 = load i32, i32* @pkzip, align 4, !dbg !6699
  %tobool43 = icmp ne i32 %15, 0, !dbg !6699
  br i1 %tobool43, label %land.lhs.true44, label %if.else118, !dbg !6701

land.lhs.true44:                                  ; preds = %if.else42
  %16 = load i32, i32* @method, align 4, !dbg !6702
  %cmp45 = icmp eq i32 %16, 0, !dbg !6703
  br i1 %cmp45, label %if.then47, label %if.else118, !dbg !6704

if.then47:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.declare(metadata i64* %n48, metadata !6705, metadata !DIExpression()), !dbg !6707
  %17 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 22), align 1, !dbg !6708
  %conv49 = zext i8 %17 to i16, !dbg !6708
  %conv50 = zext i16 %conv49 to i32, !dbg !6708
  %18 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 23), align 1, !dbg !6708
  %conv51 = zext i8 %18 to i16, !dbg !6708
  %conv52 = zext i16 %conv51 to i32, !dbg !6708
  %shl53 = shl i32 %conv52, 8, !dbg !6708
  %or54 = or i32 %conv50, %shl53, !dbg !6708
  %conv55 = sext i32 %or54 to i64, !dbg !6708
  %19 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 24), align 1, !dbg !6708
  %conv56 = zext i8 %19 to i16, !dbg !6708
  %conv57 = zext i16 %conv56 to i32, !dbg !6708
  %20 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 25), align 1, !dbg !6708
  %conv58 = zext i8 %20 to i16, !dbg !6708
  %conv59 = zext i16 %conv58 to i32, !dbg !6708
  %shl60 = shl i32 %conv59, 8, !dbg !6708
  %or61 = or i32 %conv57, %shl60, !dbg !6708
  %conv62 = sext i32 %or61 to i64, !dbg !6708
  %shl63 = shl i64 %conv62, 16, !dbg !6708
  %or64 = or i64 %conv55, %shl63, !dbg !6708
  store i64 %or64, i64* %n48, align 8, !dbg !6707
  %21 = load i64, i64* %n48, align 8, !dbg !6709
  %22 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 18), align 1, !dbg !6711
  %conv65 = zext i8 %22 to i16, !dbg !6711
  %conv66 = zext i16 %conv65 to i32, !dbg !6711
  %23 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 19), align 1, !dbg !6711
  %conv67 = zext i8 %23 to i16, !dbg !6711
  %conv68 = zext i16 %conv67 to i32, !dbg !6711
  %shl69 = shl i32 %conv68, 8, !dbg !6711
  %or70 = or i32 %conv66, %shl69, !dbg !6711
  %conv71 = sext i32 %or70 to i64, !dbg !6711
  %24 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 20), align 1, !dbg !6711
  %conv72 = zext i8 %24 to i16, !dbg !6711
  %conv73 = zext i16 %conv72 to i32, !dbg !6711
  %25 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 21), align 1, !dbg !6711
  %conv74 = zext i8 %25 to i16, !dbg !6711
  %conv75 = zext i16 %conv74 to i32, !dbg !6711
  %shl76 = shl i32 %conv75, 8, !dbg !6711
  %or77 = or i32 %conv73, %shl76, !dbg !6711
  %conv78 = sext i32 %or77 to i64, !dbg !6711
  %shl79 = shl i64 %conv78, 16, !dbg !6711
  %or80 = or i64 %conv71, %shl79, !dbg !6711
  %26 = load i32, i32* @decrypt, align 4, !dbg !6712
  %tobool81 = icmp ne i32 %26, 0, !dbg !6712
  %27 = zext i1 %tobool81 to i64, !dbg !6712
  %cond = select i1 %tobool81, i32 12, i32 0, !dbg !6712
  %conv82 = sext i32 %cond to i64, !dbg !6713
  %sub = sub i64 %or80, %conv82, !dbg !6714
  %cmp83 = icmp ne i64 %21, %sub, !dbg !6715
  br i1 %cmp83, label %if.then85, label %if.end103, !dbg !6716

if.then85:                                        ; preds = %if.then47
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6717
  %29 = load i64, i64* %n48, align 8, !dbg !6719
  %30 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 18), align 1, !dbg !6720
  %conv86 = zext i8 %30 to i16, !dbg !6720
  %conv87 = zext i16 %conv86 to i32, !dbg !6720
  %31 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 19), align 1, !dbg !6720
  %conv88 = zext i8 %31 to i16, !dbg !6720
  %conv89 = zext i16 %conv88 to i32, !dbg !6720
  %shl90 = shl i32 %conv89, 8, !dbg !6720
  %or91 = or i32 %conv87, %shl90, !dbg !6720
  %conv92 = sext i32 %or91 to i64, !dbg !6720
  %32 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 20), align 1, !dbg !6720
  %conv93 = zext i8 %32 to i16, !dbg !6720
  %conv94 = zext i16 %conv93 to i32, !dbg !6720
  %33 = load i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 21), align 1, !dbg !6720
  %conv95 = zext i8 %33 to i16, !dbg !6720
  %conv96 = zext i16 %conv95 to i32, !dbg !6720
  %shl97 = shl i32 %conv96, 8, !dbg !6720
  %or98 = or i32 %conv94, %shl97, !dbg !6720
  %conv99 = sext i32 %or98 to i64, !dbg !6720
  %shl100 = shl i64 %conv99, 16, !dbg !6720
  %or101 = or i64 %conv92, %shl100, !dbg !6720
  %call102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64, i64 0, i64 0), i64 %29, i64 %or101), !dbg !6721
  call void @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.65, i64 0, i64 0)), !dbg !6722
  br label %if.end103, !dbg !6723

if.end103:                                        ; preds = %if.then85, %if.then47
  br label %while.cond, !dbg !6724

while.cond:                                       ; preds = %if.end117, %if.end103
  %34 = load i64, i64* %n48, align 8, !dbg !6725
  %dec = add i64 %34, -1, !dbg !6725
  store i64 %dec, i64* %n48, align 8, !dbg !6725
  %tobool104 = icmp ne i64 %34, 0, !dbg !6724
  br i1 %tobool104, label %while.body, label %while.end, !dbg !6724

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6726, metadata !DIExpression()), !dbg !6728
  %35 = load i32, i32* @inptr, align 4, !dbg !6729
  %36 = load i32, i32* @insize, align 4, !dbg !6729
  %cmp105 = icmp ult i32 %35, %36, !dbg !6729
  br i1 %cmp105, label %cond.true, label %cond.false, !dbg !6729

cond.true:                                        ; preds = %while.body
  %37 = load i32, i32* @inptr, align 4, !dbg !6729
  %inc = add i32 %37, 1, !dbg !6729
  store i32 %inc, i32* @inptr, align 4, !dbg !6729
  %idxprom = zext i32 %37 to i64, !dbg !6729
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !6729, !ctir !231
  %38 = load i8, i8* %arrayidx, align 1, !dbg !6729
  %conv107 = zext i8 %38 to i32, !dbg !6729
  br label %cond.end, !dbg !6729

cond.false:                                       ; preds = %while.body
  %call108 = call i32 @fill_inbuf(i32 0), !dbg !6729
  br label %cond.end, !dbg !6729

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond109 = phi i32 [ %conv107, %cond.true ], [ %call108, %cond.false ], !dbg !6729
  %conv110 = trunc i32 %cond109 to i8, !dbg !6730
  store i8 %conv110, i8* %c, align 1, !dbg !6728
  %39 = load i8, i8* %c, align 1, !dbg !6731
  %40 = load i32, i32* @outcnt, align 4, !dbg !6731
  %inc111 = add i32 %40, 1, !dbg !6731
  store i32 %inc111, i32* @outcnt, align 4, !dbg !6731
  %idxprom112 = zext i32 %40 to i64, !dbg !6731
  %arrayidx113 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom112, !dbg !6731, !ctir !234
  store i8 %39, i8* %arrayidx113, align 1, !dbg !6731
  %41 = load i32, i32* @outcnt, align 4, !dbg !6733
  %cmp114 = icmp eq i32 %41, 32768, !dbg !6733
  br i1 %cmp114, label %if.then116, label %if.end117, !dbg !6731

if.then116:                                       ; preds = %cond.end
  call void @flush_window(), !dbg !6733
  br label %if.end117, !dbg !6733

if.end117:                                        ; preds = %if.then116, %cond.end
  br label %while.cond, !dbg !6724, !llvm.loop !6735

while.end:                                        ; preds = %while.cond
  call void @flush_window(), !dbg !6737
  br label %if.end119, !dbg !6738

if.else118:                                       ; preds = %land.lhs.true44, %if.else42
  call void @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.66, i64 0, i64 0)), !dbg !6739
  br label %if.end119

if.end119:                                        ; preds = %if.else118, %while.end
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.end41
  %42 = load i32, i32* @pkzip, align 4, !dbg !6741
  %tobool121 = icmp ne i32 %42, 0, !dbg !6741
  br i1 %tobool121, label %if.else192, label %if.then122, !dbg !6743

if.then122:                                       ; preds = %if.end120
  store i32 0, i32* %n, align 4, !dbg !6744
  br label %for.cond, !dbg !6747

for.cond:                                         ; preds = %for.inc, %if.then122
  %43 = load i32, i32* %n, align 4, !dbg !6748
  %cmp123 = icmp slt i32 %43, 8, !dbg !6750
  br i1 %cmp123, label %for.body, label %for.end, !dbg !6751

for.body:                                         ; preds = %for.cond
  %44 = load i32, i32* @inptr, align 4, !dbg !6752
  %45 = load i32, i32* @insize, align 4, !dbg !6752
  %cmp125 = icmp ult i32 %44, %45, !dbg !6752
  br i1 %cmp125, label %cond.true127, label %cond.false132, !dbg !6752

cond.true127:                                     ; preds = %for.body
  %46 = load i32, i32* @inptr, align 4, !dbg !6752
  %inc128 = add i32 %46, 1, !dbg !6752
  store i32 %inc128, i32* @inptr, align 4, !dbg !6752
  %idxprom129 = zext i32 %46 to i64, !dbg !6752
  %arrayidx130 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom129, !dbg !6752, !ctir !231
  %47 = load i8, i8* %arrayidx130, align 1, !dbg !6752
  %conv131 = zext i8 %47 to i32, !dbg !6752
  br label %cond.end134, !dbg !6752

cond.false132:                                    ; preds = %for.body
  %call133 = call i32 @fill_inbuf(i32 0), !dbg !6752
  br label %cond.end134, !dbg !6752

cond.end134:                                      ; preds = %cond.false132, %cond.true127
  %cond135 = phi i32 [ %conv131, %cond.true127 ], [ %call133, %cond.false132 ], !dbg !6752
  %conv136 = trunc i32 %cond135 to i8, !dbg !6754
  %48 = load i32, i32* %n, align 4, !dbg !6755
  %idxprom137 = sext i32 %48 to i64, !dbg !6756
  %arrayidx138 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 %idxprom137, !dbg !6756, !ctir !291
  store i8 %conv136, i8* %arrayidx138, align 1, !dbg !6757
  br label %for.inc, !dbg !6758

for.inc:                                          ; preds = %cond.end134
  %49 = load i32, i32* %n, align 4, !dbg !6759
  %inc139 = add nsw i32 %49, 1, !dbg !6759
  store i32 %inc139, i32* %n, align 4, !dbg !6759
  br label %for.cond, !dbg !6760, !llvm.loop !6761

for.end:                                          ; preds = %for.cond
  %arrayidx140 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6763, !ctir !291
  %50 = load i8, i8* %arrayidx140, align 16, !dbg !6763
  %conv141 = zext i8 %50 to i16, !dbg !6763
  %conv142 = zext i16 %conv141 to i32, !dbg !6763
  %arrayidx143 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 1, !dbg !6763, !ctir !291
  %51 = load i8, i8* %arrayidx143, align 1, !dbg !6763
  %conv144 = zext i8 %51 to i16, !dbg !6763
  %conv145 = zext i16 %conv144 to i32, !dbg !6763
  %shl146 = shl i32 %conv145, 8, !dbg !6763
  %or147 = or i32 %conv142, %shl146, !dbg !6763
  %conv148 = sext i32 %or147 to i64, !dbg !6763
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6763, !ctir !291
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2, !dbg !6763, !ctir !13
  %arrayidx149 = getelementptr inbounds i8, i8* %add.ptr, i64 0, !dbg !6763, !ctir !85
  %52 = load i8, i8* %arrayidx149, align 1, !dbg !6763
  %conv150 = zext i8 %52 to i16, !dbg !6763
  %conv151 = zext i16 %conv150 to i32, !dbg !6763
  %arraydecay152 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6763, !ctir !291
  %add.ptr153 = getelementptr inbounds i8, i8* %arraydecay152, i64 2, !dbg !6763, !ctir !13
  %arrayidx154 = getelementptr inbounds i8, i8* %add.ptr153, i64 1, !dbg !6763, !ctir !85
  %53 = load i8, i8* %arrayidx154, align 1, !dbg !6763
  %conv155 = zext i8 %53 to i16, !dbg !6763
  %conv156 = zext i16 %conv155 to i32, !dbg !6763
  %shl157 = shl i32 %conv156, 8, !dbg !6763
  %or158 = or i32 %conv151, %shl157, !dbg !6763
  %conv159 = sext i32 %or158 to i64, !dbg !6763
  %shl160 = shl i64 %conv159, 16, !dbg !6763
  %or161 = or i64 %conv148, %shl160, !dbg !6763
  store i64 %or161, i64* %orig_crc, align 8, !dbg !6764
  %arraydecay162 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6765, !ctir !291
  %add.ptr163 = getelementptr inbounds i8, i8* %arraydecay162, i64 4, !dbg !6765, !ctir !13
  %arrayidx164 = getelementptr inbounds i8, i8* %add.ptr163, i64 0, !dbg !6765, !ctir !85
  %54 = load i8, i8* %arrayidx164, align 1, !dbg !6765
  %conv165 = zext i8 %54 to i16, !dbg !6765
  %conv166 = zext i16 %conv165 to i32, !dbg !6765
  %arraydecay167 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6765, !ctir !291
  %add.ptr168 = getelementptr inbounds i8, i8* %arraydecay167, i64 4, !dbg !6765, !ctir !13
  %arrayidx169 = getelementptr inbounds i8, i8* %add.ptr168, i64 1, !dbg !6765, !ctir !85
  %55 = load i8, i8* %arrayidx169, align 1, !dbg !6765
  %conv170 = zext i8 %55 to i16, !dbg !6765
  %conv171 = zext i16 %conv170 to i32, !dbg !6765
  %shl172 = shl i32 %conv171, 8, !dbg !6765
  %or173 = or i32 %conv166, %shl172, !dbg !6765
  %conv174 = sext i32 %or173 to i64, !dbg !6765
  %arraydecay175 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6765, !ctir !291
  %add.ptr176 = getelementptr inbounds i8, i8* %arraydecay175, i64 4, !dbg !6765, !ctir !13
  %add.ptr177 = getelementptr inbounds i8, i8* %add.ptr176, i64 2, !dbg !6765, !ctir !13
  %arrayidx178 = getelementptr inbounds i8, i8* %add.ptr177, i64 0, !dbg !6765, !ctir !85
  %56 = load i8, i8* %arrayidx178, align 1, !dbg !6765
  %conv179 = zext i8 %56 to i16, !dbg !6765
  %conv180 = zext i16 %conv179 to i32, !dbg !6765
  %arraydecay181 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6765, !ctir !291
  %add.ptr182 = getelementptr inbounds i8, i8* %arraydecay181, i64 4, !dbg !6765, !ctir !13
  %add.ptr183 = getelementptr inbounds i8, i8* %add.ptr182, i64 2, !dbg !6765, !ctir !13
  %arrayidx184 = getelementptr inbounds i8, i8* %add.ptr183, i64 1, !dbg !6765, !ctir !85
  %57 = load i8, i8* %arrayidx184, align 1, !dbg !6765
  %conv185 = zext i8 %57 to i16, !dbg !6765
  %conv186 = zext i16 %conv185 to i32, !dbg !6765
  %shl187 = shl i32 %conv186, 8, !dbg !6765
  %or188 = or i32 %conv180, %shl187, !dbg !6765
  %conv189 = sext i32 %or188 to i64, !dbg !6765
  %shl190 = shl i64 %conv189, 16, !dbg !6765
  %or191 = or i64 %conv174, %shl190, !dbg !6765
  store i64 %or191, i64* %orig_len, align 8, !dbg !6766
  br label %if.end277, !dbg !6767

if.else192:                                       ; preds = %if.end120
  %58 = load i32, i32* @ext_header, align 4, !dbg !6768
  %tobool193 = icmp ne i32 %58, 0, !dbg !6768
  br i1 %tobool193, label %if.then194, label %if.end276, !dbg !6770

if.then194:                                       ; preds = %if.else192
  store i32 0, i32* %n, align 4, !dbg !6771
  br label %for.cond195, !dbg !6774

for.cond195:                                      ; preds = %for.inc213, %if.then194
  %59 = load i32, i32* %n, align 4, !dbg !6775
  %cmp196 = icmp slt i32 %59, 16, !dbg !6777
  br i1 %cmp196, label %for.body198, label %for.end215, !dbg !6778

for.body198:                                      ; preds = %for.cond195
  %60 = load i32, i32* @inptr, align 4, !dbg !6779
  %61 = load i32, i32* @insize, align 4, !dbg !6779
  %cmp199 = icmp ult i32 %60, %61, !dbg !6779
  br i1 %cmp199, label %cond.true201, label %cond.false206, !dbg !6779

cond.true201:                                     ; preds = %for.body198
  %62 = load i32, i32* @inptr, align 4, !dbg !6779
  %inc202 = add i32 %62, 1, !dbg !6779
  store i32 %inc202, i32* @inptr, align 4, !dbg !6779
  %idxprom203 = zext i32 %62 to i64, !dbg !6779
  %arrayidx204 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom203, !dbg !6779, !ctir !231
  %63 = load i8, i8* %arrayidx204, align 1, !dbg !6779
  %conv205 = zext i8 %63 to i32, !dbg !6779
  br label %cond.end208, !dbg !6779

cond.false206:                                    ; preds = %for.body198
  %call207 = call i32 @fill_inbuf(i32 0), !dbg !6779
  br label %cond.end208, !dbg !6779

cond.end208:                                      ; preds = %cond.false206, %cond.true201
  %cond209 = phi i32 [ %conv205, %cond.true201 ], [ %call207, %cond.false206 ], !dbg !6779
  %conv210 = trunc i32 %cond209 to i8, !dbg !6781
  %64 = load i32, i32* %n, align 4, !dbg !6782
  %idxprom211 = sext i32 %64 to i64, !dbg !6783
  %arrayidx212 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 %idxprom211, !dbg !6783, !ctir !291
  store i8 %conv210, i8* %arrayidx212, align 1, !dbg !6784
  br label %for.inc213, !dbg !6785

for.inc213:                                       ; preds = %cond.end208
  %65 = load i32, i32* %n, align 4, !dbg !6786
  %inc214 = add nsw i32 %65, 1, !dbg !6786
  store i32 %inc214, i32* %n, align 4, !dbg !6786
  br label %for.cond195, !dbg !6787, !llvm.loop !6788

for.end215:                                       ; preds = %for.cond195
  %arraydecay216 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6790, !ctir !291
  %add.ptr217 = getelementptr inbounds i8, i8* %arraydecay216, i64 4, !dbg !6790, !ctir !13
  %arrayidx218 = getelementptr inbounds i8, i8* %add.ptr217, i64 0, !dbg !6790, !ctir !85
  %66 = load i8, i8* %arrayidx218, align 1, !dbg !6790
  %conv219 = zext i8 %66 to i16, !dbg !6790
  %conv220 = zext i16 %conv219 to i32, !dbg !6790
  %arraydecay221 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6790, !ctir !291
  %add.ptr222 = getelementptr inbounds i8, i8* %arraydecay221, i64 4, !dbg !6790, !ctir !13
  %arrayidx223 = getelementptr inbounds i8, i8* %add.ptr222, i64 1, !dbg !6790, !ctir !85
  %67 = load i8, i8* %arrayidx223, align 1, !dbg !6790
  %conv224 = zext i8 %67 to i16, !dbg !6790
  %conv225 = zext i16 %conv224 to i32, !dbg !6790
  %shl226 = shl i32 %conv225, 8, !dbg !6790
  %or227 = or i32 %conv220, %shl226, !dbg !6790
  %conv228 = sext i32 %or227 to i64, !dbg !6790
  %arraydecay229 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6790, !ctir !291
  %add.ptr230 = getelementptr inbounds i8, i8* %arraydecay229, i64 4, !dbg !6790, !ctir !13
  %add.ptr231 = getelementptr inbounds i8, i8* %add.ptr230, i64 2, !dbg !6790, !ctir !13
  %arrayidx232 = getelementptr inbounds i8, i8* %add.ptr231, i64 0, !dbg !6790, !ctir !85
  %68 = load i8, i8* %arrayidx232, align 1, !dbg !6790
  %conv233 = zext i8 %68 to i16, !dbg !6790
  %conv234 = zext i16 %conv233 to i32, !dbg !6790
  %arraydecay235 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6790, !ctir !291
  %add.ptr236 = getelementptr inbounds i8, i8* %arraydecay235, i64 4, !dbg !6790, !ctir !13
  %add.ptr237 = getelementptr inbounds i8, i8* %add.ptr236, i64 2, !dbg !6790, !ctir !13
  %arrayidx238 = getelementptr inbounds i8, i8* %add.ptr237, i64 1, !dbg !6790, !ctir !85
  %69 = load i8, i8* %arrayidx238, align 1, !dbg !6790
  %conv239 = zext i8 %69 to i16, !dbg !6790
  %conv240 = zext i16 %conv239 to i32, !dbg !6790
  %shl241 = shl i32 %conv240, 8, !dbg !6790
  %or242 = or i32 %conv234, %shl241, !dbg !6790
  %conv243 = sext i32 %or242 to i64, !dbg !6790
  %shl244 = shl i64 %conv243, 16, !dbg !6790
  %or245 = or i64 %conv228, %shl244, !dbg !6790
  store i64 %or245, i64* %orig_crc, align 8, !dbg !6791
  %arraydecay246 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6792, !ctir !291
  %add.ptr247 = getelementptr inbounds i8, i8* %arraydecay246, i64 12, !dbg !6792, !ctir !13
  %arrayidx248 = getelementptr inbounds i8, i8* %add.ptr247, i64 0, !dbg !6792, !ctir !85
  %70 = load i8, i8* %arrayidx248, align 1, !dbg !6792
  %conv249 = zext i8 %70 to i16, !dbg !6792
  %conv250 = zext i16 %conv249 to i32, !dbg !6792
  %arraydecay251 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6792, !ctir !291
  %add.ptr252 = getelementptr inbounds i8, i8* %arraydecay251, i64 12, !dbg !6792, !ctir !13
  %arrayidx253 = getelementptr inbounds i8, i8* %add.ptr252, i64 1, !dbg !6792, !ctir !85
  %71 = load i8, i8* %arrayidx253, align 1, !dbg !6792
  %conv254 = zext i8 %71 to i16, !dbg !6792
  %conv255 = zext i16 %conv254 to i32, !dbg !6792
  %shl256 = shl i32 %conv255, 8, !dbg !6792
  %or257 = or i32 %conv250, %shl256, !dbg !6792
  %conv258 = sext i32 %or257 to i64, !dbg !6792
  %arraydecay259 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6792, !ctir !291
  %add.ptr260 = getelementptr inbounds i8, i8* %arraydecay259, i64 12, !dbg !6792, !ctir !13
  %add.ptr261 = getelementptr inbounds i8, i8* %add.ptr260, i64 2, !dbg !6792, !ctir !13
  %arrayidx262 = getelementptr inbounds i8, i8* %add.ptr261, i64 0, !dbg !6792, !ctir !85
  %72 = load i8, i8* %arrayidx262, align 1, !dbg !6792
  %conv263 = zext i8 %72 to i16, !dbg !6792
  %conv264 = zext i16 %conv263 to i32, !dbg !6792
  %arraydecay265 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !6792, !ctir !291
  %add.ptr266 = getelementptr inbounds i8, i8* %arraydecay265, i64 12, !dbg !6792, !ctir !13
  %add.ptr267 = getelementptr inbounds i8, i8* %add.ptr266, i64 2, !dbg !6792, !ctir !13
  %arrayidx268 = getelementptr inbounds i8, i8* %add.ptr267, i64 1, !dbg !6792, !ctir !85
  %73 = load i8, i8* %arrayidx268, align 1, !dbg !6792
  %conv269 = zext i8 %73 to i16, !dbg !6792
  %conv270 = zext i16 %conv269 to i32, !dbg !6792
  %shl271 = shl i32 %conv270, 8, !dbg !6792
  %or272 = or i32 %conv264, %shl271, !dbg !6792
  %conv273 = sext i32 %or272 to i64, !dbg !6792
  %shl274 = shl i64 %conv273, 16, !dbg !6792
  %or275 = or i64 %conv258, %shl274, !dbg !6792
  store i64 %or275, i64* %orig_len, align 8, !dbg !6793
  br label %if.end276, !dbg !6794

if.end276:                                        ; preds = %for.end215, %if.else192
  br label %if.end277

if.end277:                                        ; preds = %if.end276, %for.end
  %74 = load i64, i64* %orig_crc, align 8, !dbg !6795
  %call278 = call i64 @updcrc(i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 0), !dbg !6797
  %cmp279 = icmp ne i64 %74, %call278, !dbg !6798
  br i1 %cmp279, label %if.then281, label %if.end283, !dbg !6799

if.then281:                                       ; preds = %if.end277
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6800
  %76 = load i8*, i8** @progname, align 8, !dbg !6802
  %call282 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.67, i64 0, i64 0), i8* %76, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6803
  store i32 1, i32* %err, align 4, !dbg !6804
  br label %if.end283, !dbg !6805

if.end283:                                        ; preds = %if.then281, %if.end277
  %77 = load i64, i64* %orig_len, align 8, !dbg !6806
  %78 = load i64, i64* @bytes_out, align 8, !dbg !6808
  %and = and i64 %78, 4294967295, !dbg !6809
  %cmp284 = icmp ne i64 %77, %and, !dbg !6810
  br i1 %cmp284, label %if.then286, label %if.end288, !dbg !6811

if.then286:                                       ; preds = %if.end283
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6812
  %80 = load i8*, i8** @progname, align 8, !dbg !6814
  %call287 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.68, i64 0, i64 0), i8* %80, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6815
  store i32 1, i32* %err, align 4, !dbg !6816
  br label %if.end288, !dbg !6817

if.end288:                                        ; preds = %if.then286, %if.end283
  %81 = load i32, i32* @pkzip, align 4, !dbg !6818
  %tobool289 = icmp ne i32 %81, 0, !dbg !6818
  br i1 %tobool289, label %land.lhs.true290, label %if.end339, !dbg !6820

land.lhs.true290:                                 ; preds = %if.end288
  %82 = load i32, i32* @inptr, align 4, !dbg !6821
  %add = add i32 %82, 4, !dbg !6822
  %83 = load i32, i32* @insize, align 4, !dbg !6823
  %cmp291 = icmp ult i32 %add, %83, !dbg !6824
  br i1 %cmp291, label %land.lhs.true293, label %if.end339, !dbg !6825

land.lhs.true293:                                 ; preds = %land.lhs.true290
  %84 = load i32, i32* @inptr, align 4, !dbg !6826
  %idx.ext = zext i32 %84 to i64, !dbg !6826
  %add.ptr294 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext, !dbg !6826, !ctir !13
  %arrayidx295 = getelementptr inbounds i8, i8* %add.ptr294, i64 0, !dbg !6826, !ctir !85
  %85 = load i8, i8* %arrayidx295, align 1, !dbg !6826
  %conv296 = zext i8 %85 to i16, !dbg !6826
  %conv297 = zext i16 %conv296 to i32, !dbg !6826
  %86 = load i32, i32* @inptr, align 4, !dbg !6826
  %idx.ext298 = zext i32 %86 to i64, !dbg !6826
  %add.ptr299 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext298, !dbg !6826, !ctir !13
  %arrayidx300 = getelementptr inbounds i8, i8* %add.ptr299, i64 1, !dbg !6826, !ctir !85
  %87 = load i8, i8* %arrayidx300, align 1, !dbg !6826
  %conv301 = zext i8 %87 to i16, !dbg !6826
  %conv302 = zext i16 %conv301 to i32, !dbg !6826
  %shl303 = shl i32 %conv302, 8, !dbg !6826
  %or304 = or i32 %conv297, %shl303, !dbg !6826
  %conv305 = sext i32 %or304 to i64, !dbg !6826
  %88 = load i32, i32* @inptr, align 4, !dbg !6826
  %idx.ext306 = zext i32 %88 to i64, !dbg !6826
  %add.ptr307 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext306, !dbg !6826, !ctir !13
  %add.ptr308 = getelementptr inbounds i8, i8* %add.ptr307, i64 2, !dbg !6826, !ctir !13
  %arrayidx309 = getelementptr inbounds i8, i8* %add.ptr308, i64 0, !dbg !6826, !ctir !85
  %89 = load i8, i8* %arrayidx309, align 1, !dbg !6826
  %conv310 = zext i8 %89 to i16, !dbg !6826
  %conv311 = zext i16 %conv310 to i32, !dbg !6826
  %90 = load i32, i32* @inptr, align 4, !dbg !6826
  %idx.ext312 = zext i32 %90 to i64, !dbg !6826
  %add.ptr313 = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext312, !dbg !6826, !ctir !13
  %add.ptr314 = getelementptr inbounds i8, i8* %add.ptr313, i64 2, !dbg !6826, !ctir !13
  %arrayidx315 = getelementptr inbounds i8, i8* %add.ptr314, i64 1, !dbg !6826, !ctir !85
  %91 = load i8, i8* %arrayidx315, align 1, !dbg !6826
  %conv316 = zext i8 %91 to i16, !dbg !6826
  %conv317 = zext i16 %conv316 to i32, !dbg !6826
  %shl318 = shl i32 %conv317, 8, !dbg !6826
  %or319 = or i32 %conv311, %shl318, !dbg !6826
  %conv320 = sext i32 %or319 to i64, !dbg !6826
  %shl321 = shl i64 %conv320, 16, !dbg !6826
  %or322 = or i64 %conv305, %shl321, !dbg !6826
  %cmp323 = icmp eq i64 %or322, 67324752, !dbg !6827
  br i1 %cmp323, label %if.then325, label %if.end339, !dbg !6828

if.then325:                                       ; preds = %land.lhs.true293
  %92 = load i32, i32* @to_stdout, align 4, !dbg !6829
  %tobool326 = icmp ne i32 %92, 0, !dbg !6829
  br i1 %tobool326, label %if.then327, label %if.else336, !dbg !6832

if.then327:                                       ; preds = %if.then325
  %93 = load i32, i32* @quiet, align 4, !dbg !6833
  %tobool328 = icmp ne i32 %93, 0, !dbg !6833
  br i1 %tobool328, label %if.end331, label %if.then329, !dbg !6837

if.then329:                                       ; preds = %if.then327
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6833
  %95 = load i8*, i8** @progname, align 8, !dbg !6833
  %call330 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.69, i64 0, i64 0), i8* %95, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6833
  br label %if.end331, !dbg !6833

if.end331:                                        ; preds = %if.then329, %if.then327
  %96 = load i32, i32* @exit_code, align 4, !dbg !6838
  %cmp332 = icmp eq i32 %96, 0, !dbg !6838
  br i1 %cmp332, label %if.then334, label %if.end335, !dbg !6837

if.then334:                                       ; preds = %if.end331
  store i32 2, i32* @exit_code, align 4, !dbg !6838
  br label %if.end335, !dbg !6838

if.end335:                                        ; preds = %if.then334, %if.end331
  br label %if.end338, !dbg !6840

if.else336:                                       ; preds = %if.then325
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6841
  %98 = load i8*, i8** @progname, align 8, !dbg !6843
  %call337 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.70, i64 0, i64 0), i8* %98, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6844
  store i32 1, i32* %err, align 4, !dbg !6845
  br label %if.end338

if.end338:                                        ; preds = %if.else336, %if.end335
  br label %if.end339, !dbg !6846

if.end339:                                        ; preds = %if.end338, %land.lhs.true293, %land.lhs.true290, %if.end288
  store i32 0, i32* @pkzip, align 4, !dbg !6847
  store i32 0, i32* @ext_header, align 4, !dbg !6848
  %99 = load i32, i32* %err, align 4, !dbg !6849
  %cmp340 = icmp eq i32 %99, 0, !dbg !6851
  br i1 %cmp340, label %if.then342, label %if.end343, !dbg !6852

if.then342:                                       ; preds = %if.end339
  store i32 0, i32* %retval, align 4, !dbg !6853
  br label %return, !dbg !6853

if.end343:                                        ; preds = %if.end339
  store i32 1, i32* @exit_code, align 4, !dbg !6854
  %100 = load i32, i32* @test, align 4, !dbg !6855
  %tobool344 = icmp ne i32 %100, 0, !dbg !6855
  br i1 %tobool344, label %if.end346, label %if.then345, !dbg !6857

if.then345:                                       ; preds = %if.end343
  call void @abort_gzip(), !dbg !6858
  br label %if.end346, !dbg !6858

if.end346:                                        ; preds = %if.then345, %if.end343
  %101 = load i32, i32* %err, align 4, !dbg !6859
  store i32 %101, i32* %retval, align 4, !dbg !6860
  br label %return, !dbg !6860

return:                                           ; preds = %if.end346, %if.then342
  %102 = load i32, i32* %retval, align 4, !dbg !6861
  ret i32 %102, !dbg !6861
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_zipfile(i32 %in) #0 !dbg !6862 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %h = alloca i8*, align 8, !ctir !85
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !6863, metadata !DIExpression()), !dbg !6864
  call void @llvm.dbg.declare(metadata i8** %h, metadata !6865, metadata !DIExpression()), !dbg !6866
  %0 = load i32, i32* @inptr, align 4, !dbg !6867
  %idx.ext = zext i32 %0 to i64, !dbg !6868
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext, !dbg !6868, !ctir !13
  store i8* %add.ptr, i8** %h, align 8, !dbg !6866
  %1 = load i32, i32* %in.addr, align 4, !dbg !6869
  store i32 %1, i32* @ifd, align 4, !dbg !6870
  %2 = load i8*, i8** %h, align 8, !dbg !6871
  %add.ptr1 = getelementptr inbounds i8, i8* %2, i64 26, !dbg !6871, !ctir !13
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr1, i64 0, !dbg !6871, !ctir !85
  %3 = load i8, i8* %arrayidx, align 1, !dbg !6871
  %conv = zext i8 %3 to i16, !dbg !6871
  %conv2 = zext i16 %conv to i32, !dbg !6871
  %4 = load i8*, i8** %h, align 8, !dbg !6871
  %add.ptr3 = getelementptr inbounds i8, i8* %4, i64 26, !dbg !6871, !ctir !13
  %arrayidx4 = getelementptr inbounds i8, i8* %add.ptr3, i64 1, !dbg !6871, !ctir !85
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !6871
  %conv5 = zext i8 %5 to i16, !dbg !6871
  %conv6 = zext i16 %conv5 to i32, !dbg !6871
  %shl = shl i32 %conv6, 8, !dbg !6871
  %or = or i32 %conv2, %shl, !dbg !6871
  %add = add nsw i32 30, %or, !dbg !6872
  %6 = load i8*, i8** %h, align 8, !dbg !6873
  %add.ptr7 = getelementptr inbounds i8, i8* %6, i64 28, !dbg !6873, !ctir !13
  %arrayidx8 = getelementptr inbounds i8, i8* %add.ptr7, i64 0, !dbg !6873, !ctir !85
  %7 = load i8, i8* %arrayidx8, align 1, !dbg !6873
  %conv9 = zext i8 %7 to i16, !dbg !6873
  %conv10 = zext i16 %conv9 to i32, !dbg !6873
  %8 = load i8*, i8** %h, align 8, !dbg !6873
  %add.ptr11 = getelementptr inbounds i8, i8* %8, i64 28, !dbg !6873, !ctir !13
  %arrayidx12 = getelementptr inbounds i8, i8* %add.ptr11, i64 1, !dbg !6873, !ctir !85
  %9 = load i8, i8* %arrayidx12, align 1, !dbg !6873
  %conv13 = zext i8 %9 to i16, !dbg !6873
  %conv14 = zext i16 %conv13 to i32, !dbg !6873
  %shl15 = shl i32 %conv14, 8, !dbg !6873
  %or16 = or i32 %conv10, %shl15, !dbg !6873
  %add17 = add nsw i32 %add, %or16, !dbg !6874
  %10 = load i32, i32* @inptr, align 4, !dbg !6875
  %add18 = add i32 %10, %add17, !dbg !6875
  store i32 %add18, i32* @inptr, align 4, !dbg !6875
  %11 = load i32, i32* @inptr, align 4, !dbg !6876
  %12 = load i32, i32* @insize, align 4, !dbg !6878
  %cmp = icmp ugt i32 %11, %12, !dbg !6879
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6880

lor.lhs.false:                                    ; preds = %entry
  %13 = load i8*, i8** %h, align 8, !dbg !6881
  %arrayidx20 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !6881, !ctir !85
  %14 = load i8, i8* %arrayidx20, align 1, !dbg !6881
  %conv21 = zext i8 %14 to i16, !dbg !6881
  %conv22 = zext i16 %conv21 to i32, !dbg !6881
  %15 = load i8*, i8** %h, align 8, !dbg !6881
  %arrayidx23 = getelementptr inbounds i8, i8* %15, i64 1, !dbg !6881, !ctir !85
  %16 = load i8, i8* %arrayidx23, align 1, !dbg !6881
  %conv24 = zext i8 %16 to i16, !dbg !6881
  %conv25 = zext i16 %conv24 to i32, !dbg !6881
  %shl26 = shl i32 %conv25, 8, !dbg !6881
  %or27 = or i32 %conv22, %shl26, !dbg !6881
  %conv28 = sext i32 %or27 to i64, !dbg !6881
  %17 = load i8*, i8** %h, align 8, !dbg !6881
  %add.ptr29 = getelementptr inbounds i8, i8* %17, i64 2, !dbg !6881, !ctir !13
  %arrayidx30 = getelementptr inbounds i8, i8* %add.ptr29, i64 0, !dbg !6881, !ctir !85
  %18 = load i8, i8* %arrayidx30, align 1, !dbg !6881
  %conv31 = zext i8 %18 to i16, !dbg !6881
  %conv32 = zext i16 %conv31 to i32, !dbg !6881
  %19 = load i8*, i8** %h, align 8, !dbg !6881
  %add.ptr33 = getelementptr inbounds i8, i8* %19, i64 2, !dbg !6881, !ctir !13
  %arrayidx34 = getelementptr inbounds i8, i8* %add.ptr33, i64 1, !dbg !6881, !ctir !85
  %20 = load i8, i8* %arrayidx34, align 1, !dbg !6881
  %conv35 = zext i8 %20 to i16, !dbg !6881
  %conv36 = zext i16 %conv35 to i32, !dbg !6881
  %shl37 = shl i32 %conv36, 8, !dbg !6881
  %or38 = or i32 %conv32, %shl37, !dbg !6881
  %conv39 = sext i32 %or38 to i64, !dbg !6881
  %shl40 = shl i64 %conv39, 16, !dbg !6881
  %or41 = or i64 %conv28, %shl40, !dbg !6881
  %cmp42 = icmp ne i64 %or41, 67324752, !dbg !6882
  br i1 %cmp42, label %if.then, label %if.end, !dbg !6883

if.then:                                          ; preds = %lor.lhs.false, %entry
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6884
  %22 = load i8*, i8** @progname, align 8, !dbg !6886
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.59, i64 0, i64 0), i8* %22, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6887
  store i32 1, i32* @exit_code, align 4, !dbg !6888
  store i32 1, i32* %retval, align 4, !dbg !6889
  br label %return, !dbg !6889

if.end:                                           ; preds = %lor.lhs.false
  %23 = load i8*, i8** %h, align 8, !dbg !6890
  %arrayidx44 = getelementptr inbounds i8, i8* %23, i64 8, !dbg !6890, !ctir !85
  %24 = load i8, i8* %arrayidx44, align 1, !dbg !6890
  %conv45 = zext i8 %24 to i32, !dbg !6890
  store i32 %conv45, i32* @method, align 4, !dbg !6891
  %25 = load i32, i32* @method, align 4, !dbg !6892
  %cmp46 = icmp ne i32 %25, 0, !dbg !6894
  br i1 %cmp46, label %land.lhs.true, label %if.end52, !dbg !6895

land.lhs.true:                                    ; preds = %if.end
  %26 = load i32, i32* @method, align 4, !dbg !6896
  %cmp48 = icmp ne i32 %26, 8, !dbg !6897
  br i1 %cmp48, label %if.then50, label %if.end52, !dbg !6898

if.then50:                                        ; preds = %land.lhs.true
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6899
  %28 = load i8*, i8** @progname, align 8, !dbg !6901
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.60, i64 0, i64 0), i8* %28, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6902
  store i32 1, i32* @exit_code, align 4, !dbg !6903
  store i32 1, i32* %retval, align 4, !dbg !6904
  br label %return, !dbg !6904

if.end52:                                         ; preds = %land.lhs.true, %if.end
  %29 = load i8*, i8** %h, align 8, !dbg !6905
  %arrayidx53 = getelementptr inbounds i8, i8* %29, i64 6, !dbg !6905, !ctir !85
  %30 = load i8, i8* %arrayidx53, align 1, !dbg !6905
  %conv54 = zext i8 %30 to i32, !dbg !6905
  %and = and i32 %conv54, 1, !dbg !6907
  store i32 %and, i32* @decrypt, align 4, !dbg !6908
  %cmp55 = icmp ne i32 %and, 0, !dbg !6909
  br i1 %cmp55, label %if.then57, label %if.end59, !dbg !6910

if.then57:                                        ; preds = %if.end52
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6911
  %32 = load i8*, i8** @progname, align 8, !dbg !6913
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.61, i64 0, i64 0), i8* %32, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !6914
  store i32 1, i32* @exit_code, align 4, !dbg !6915
  store i32 1, i32* %retval, align 4, !dbg !6916
  br label %return, !dbg !6916

if.end59:                                         ; preds = %if.end52
  %33 = load i8*, i8** %h, align 8, !dbg !6917
  %arrayidx60 = getelementptr inbounds i8, i8* %33, i64 6, !dbg !6917, !ctir !85
  %34 = load i8, i8* %arrayidx60, align 1, !dbg !6917
  %conv61 = zext i8 %34 to i32, !dbg !6917
  %and62 = and i32 %conv61, 8, !dbg !6918
  %cmp63 = icmp ne i32 %and62, 0, !dbg !6919
  %conv64 = zext i1 %cmp63 to i32, !dbg !6919
  store i32 %conv64, i32* @ext_header, align 4, !dbg !6920
  store i32 1, i32* @pkzip, align 4, !dbg !6921
  store i32 0, i32* %retval, align 4, !dbg !6922
  br label %return, !dbg !6922

return:                                           ; preds = %if.end59, %if.then57, %if.then50, %if.then
  %35 = load i32, i32* %retval, align 4, !dbg !6923
  ret i32 %35, !dbg !6923
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @unpack(i32 %in, i32 %out) #0 !dbg !6924 {
entry:
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %len = alloca i32, align 4, !ctir !12
  %eob = alloca i32, align 4, !ctir !6
  %peek = alloca i32, align 4, !ctir !6
  %peek_mask = alloca i32, align 4, !ctir !6
  %mask = alloca i64, align 8, !ctir !51
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6929, metadata !DIExpression()), !dbg !6930
  call void @llvm.dbg.declare(metadata i32* %eob, metadata !6931, metadata !DIExpression()), !dbg !6932
  call void @llvm.dbg.declare(metadata i32* %peek, metadata !6933, metadata !DIExpression()), !dbg !6934
  call void @llvm.dbg.declare(metadata i32* %peek_mask, metadata !6935, metadata !DIExpression()), !dbg !6936
  %0 = load i32, i32* %in.addr, align 4, !dbg !6937
  store i32 %0, i32* @ifd, align 4, !dbg !6938
  %1 = load i32, i32* %out.addr, align 4, !dbg !6939
  store i32 %1, i32* @ofd, align 4, !dbg !6940
  call void @read_tree(), !dbg !6941
  call void @build_tree(), !dbg !6942
  store i32 0, i32* @valid, align 4, !dbg !6943
  store i64 0, i64* @bitbuf, align 8, !dbg !6943
  %2 = load i32, i32* @peek_bits, align 4, !dbg !6944
  %shl = shl i32 1, %2, !dbg !6945
  %sub = sub nsw i32 %shl, 1, !dbg !6946
  store i32 %sub, i32* %peek_mask, align 4, !dbg !6947
  %3 = load i32, i32* @max_len, align 4, !dbg !6948
  %idxprom = sext i32 %3 to i64, !dbg !6949
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom, !dbg !6949, !ctir !286
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6949
  %sub1 = sub nsw i32 %4, 1, !dbg !6950
  store i32 %sub1, i32* %eob, align 4, !dbg !6951
  br label %for.cond, !dbg !6952

for.cond:                                         ; preds = %if.end67, %entry
  br label %while.cond, !dbg !6953

while.cond:                                       ; preds = %cond.end, %for.cond
  %5 = load i32, i32* @valid, align 4, !dbg !6953
  %6 = load i32, i32* @peek_bits, align 4, !dbg !6953
  %cmp = icmp slt i32 %5, %6, !dbg !6953
  br i1 %cmp, label %while.body, label %while.end, !dbg !6953

while.body:                                       ; preds = %while.cond
  %7 = load i64, i64* @bitbuf, align 8, !dbg !6953
  %shl2 = shl i64 %7, 8, !dbg !6953
  %8 = load i32, i32* @inptr, align 4, !dbg !6953
  %9 = load i32, i32* @insize, align 4, !dbg !6953
  %cmp3 = icmp ult i32 %8, %9, !dbg !6953
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !6953

cond.true:                                        ; preds = %while.body
  %10 = load i32, i32* @inptr, align 4, !dbg !6953
  %inc = add i32 %10, 1, !dbg !6953
  store i32 %inc, i32* @inptr, align 4, !dbg !6953
  %idxprom4 = zext i32 %10 to i64, !dbg !6953
  %arrayidx5 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom4, !dbg !6953, !ctir !231
  %11 = load i8, i8* %arrayidx5, align 1, !dbg !6953
  %conv = zext i8 %11 to i32, !dbg !6953
  br label %cond.end, !dbg !6953

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 0), !dbg !6953
  br label %cond.end, !dbg !6953

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !6953
  %conv6 = sext i32 %cond to i64, !dbg !6953
  %or = or i64 %shl2, %conv6, !dbg !6953
  store i64 %or, i64* @bitbuf, align 8, !dbg !6953
  %12 = load i32, i32* @valid, align 4, !dbg !6953
  %add = add nsw i32 %12, 8, !dbg !6953
  store i32 %add, i32* @valid, align 4, !dbg !6953
  br label %while.cond, !dbg !6953, !llvm.loop !6958

while.end:                                        ; preds = %while.cond
  %13 = load i64, i64* @bitbuf, align 8, !dbg !6953
  %14 = load i32, i32* @valid, align 4, !dbg !6953
  %15 = load i32, i32* @peek_bits, align 4, !dbg !6953
  %sub7 = sub nsw i32 %14, %15, !dbg !6953
  %sh_prom = zext i32 %sub7 to i64, !dbg !6953
  %shr = lshr i64 %13, %sh_prom, !dbg !6953
  %16 = load i32, i32* %peek_mask, align 4, !dbg !6953
  %conv8 = zext i32 %16 to i64, !dbg !6953
  %and = and i64 %shr, %conv8, !dbg !6953
  %conv9 = trunc i64 %and to i32, !dbg !6953
  store i32 %conv9, i32* %peek, align 4, !dbg !6953
  %17 = load i32, i32* %peek, align 4, !dbg !6959
  %idxprom10 = zext i32 %17 to i64, !dbg !6960
  %arrayidx11 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom10, !dbg !6960, !ctir !283
  %18 = load i8, i8* %arrayidx11, align 1, !dbg !6960
  %conv12 = zext i8 %18 to i32, !dbg !6960
  store i32 %conv12, i32* %len, align 4, !dbg !6961
  %19 = load i32, i32* %len, align 4, !dbg !6962
  %cmp13 = icmp sgt i32 %19, 0, !dbg !6964
  br i1 %cmp13, label %if.then, label %if.else, !dbg !6965

if.then:                                          ; preds = %while.end
  %20 = load i32, i32* @peek_bits, align 4, !dbg !6966
  %21 = load i32, i32* %len, align 4, !dbg !6968
  %sub15 = sub nsw i32 %20, %21, !dbg !6969
  %22 = load i32, i32* %peek, align 4, !dbg !6970
  %shr16 = lshr i32 %22, %sub15, !dbg !6970
  store i32 %shr16, i32* %peek, align 4, !dbg !6970
  br label %if.end, !dbg !6971

if.else:                                          ; preds = %while.end
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !6972, metadata !DIExpression()), !dbg !6974
  %23 = load i32, i32* %peek_mask, align 4, !dbg !6975
  %conv17 = zext i32 %23 to i64, !dbg !6975
  store i64 %conv17, i64* %mask, align 8, !dbg !6974
  %24 = load i32, i32* @peek_bits, align 4, !dbg !6976
  store i32 %24, i32* %len, align 4, !dbg !6977
  br label %do.body, !dbg !6978

do.body:                                          ; preds = %do.cond, %if.else
  %25 = load i32, i32* %len, align 4, !dbg !6979
  %inc18 = add nsw i32 %25, 1, !dbg !6979
  store i32 %inc18, i32* %len, align 4, !dbg !6979
  %26 = load i64, i64* %mask, align 8, !dbg !6981
  %shl19 = shl i64 %26, 1, !dbg !6982
  %add20 = add i64 %shl19, 1, !dbg !6983
  store i64 %add20, i64* %mask, align 8, !dbg !6984
  br label %while.cond21, !dbg !6985

while.cond21:                                     ; preds = %cond.end35, %do.body
  %27 = load i32, i32* @valid, align 4, !dbg !6985
  %28 = load i32, i32* %len, align 4, !dbg !6985
  %cmp22 = icmp slt i32 %27, %28, !dbg !6985
  br i1 %cmp22, label %while.body24, label %while.end40, !dbg !6985

while.body24:                                     ; preds = %while.cond21
  %29 = load i64, i64* @bitbuf, align 8, !dbg !6985
  %shl25 = shl i64 %29, 8, !dbg !6985
  %30 = load i32, i32* @inptr, align 4, !dbg !6985
  %31 = load i32, i32* @insize, align 4, !dbg !6985
  %cmp26 = icmp ult i32 %30, %31, !dbg !6985
  br i1 %cmp26, label %cond.true28, label %cond.false33, !dbg !6985

cond.true28:                                      ; preds = %while.body24
  %32 = load i32, i32* @inptr, align 4, !dbg !6985
  %inc29 = add i32 %32, 1, !dbg !6985
  store i32 %inc29, i32* @inptr, align 4, !dbg !6985
  %idxprom30 = zext i32 %32 to i64, !dbg !6985
  %arrayidx31 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom30, !dbg !6985, !ctir !231
  %33 = load i8, i8* %arrayidx31, align 1, !dbg !6985
  %conv32 = zext i8 %33 to i32, !dbg !6985
  br label %cond.end35, !dbg !6985

cond.false33:                                     ; preds = %while.body24
  %call34 = call i32 @fill_inbuf(i32 0), !dbg !6985
  br label %cond.end35, !dbg !6985

cond.end35:                                       ; preds = %cond.false33, %cond.true28
  %cond36 = phi i32 [ %conv32, %cond.true28 ], [ %call34, %cond.false33 ], !dbg !6985
  %conv37 = sext i32 %cond36 to i64, !dbg !6985
  %or38 = or i64 %shl25, %conv37, !dbg !6985
  store i64 %or38, i64* @bitbuf, align 8, !dbg !6985
  %34 = load i32, i32* @valid, align 4, !dbg !6985
  %add39 = add nsw i32 %34, 8, !dbg !6985
  store i32 %add39, i32* @valid, align 4, !dbg !6985
  br label %while.cond21, !dbg !6985, !llvm.loop !6987

while.end40:                                      ; preds = %while.cond21
  %35 = load i64, i64* @bitbuf, align 8, !dbg !6985
  %36 = load i32, i32* @valid, align 4, !dbg !6985
  %37 = load i32, i32* %len, align 4, !dbg !6985
  %sub41 = sub nsw i32 %36, %37, !dbg !6985
  %sh_prom42 = zext i32 %sub41 to i64, !dbg !6985
  %shr43 = lshr i64 %35, %sh_prom42, !dbg !6985
  %38 = load i64, i64* %mask, align 8, !dbg !6985
  %and44 = and i64 %shr43, %38, !dbg !6985
  %conv45 = trunc i64 %and44 to i32, !dbg !6985
  store i32 %conv45, i32* %peek, align 4, !dbg !6985
  br label %do.cond, !dbg !6988

do.cond:                                          ; preds = %while.end40
  %39 = load i32, i32* %peek, align 4, !dbg !6989
  %40 = load i32, i32* %len, align 4, !dbg !6990
  %idxprom46 = sext i32 %40 to i64, !dbg !6991
  %arrayidx47 = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i64 0, i64 %idxprom46, !dbg !6991, !ctir !286
  %41 = load i32, i32* %arrayidx47, align 4, !dbg !6991
  %cmp48 = icmp ult i32 %39, %41, !dbg !6992
  br i1 %cmp48, label %do.body, label %do.end, !dbg !6988, !llvm.loop !6993

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  %42 = load i32, i32* %peek, align 4, !dbg !6995
  %43 = load i32, i32* %eob, align 4, !dbg !6997
  %cmp50 = icmp eq i32 %42, %43, !dbg !6998
  br i1 %cmp50, label %land.lhs.true, label %if.end55, !dbg !6999

land.lhs.true:                                    ; preds = %if.end
  %44 = load i32, i32* %len, align 4, !dbg !7000
  %45 = load i32, i32* @max_len, align 4, !dbg !7001
  %cmp52 = icmp eq i32 %44, %45, !dbg !7002
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !7003

if.then54:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !7004

if.end55:                                         ; preds = %land.lhs.true, %if.end
  %46 = load i32, i32* %peek, align 4, !dbg !7005
  %47 = load i32, i32* %len, align 4, !dbg !7005
  %idxprom56 = sext i32 %47 to i64, !dbg !7005
  %arrayidx57 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %idxprom56, !dbg !7005, !ctir !286
  %48 = load i32, i32* %arrayidx57, align 4, !dbg !7005
  %add58 = add i32 %46, %48, !dbg !7005
  %idxprom59 = zext i32 %add58 to i64, !dbg !7005
  %arrayidx60 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i64 0, i64 %idxprom59, !dbg !7005, !ctir !254
  %49 = load i8, i8* %arrayidx60, align 1, !dbg !7005
  %50 = load i32, i32* @outcnt, align 4, !dbg !7005
  %inc61 = add i32 %50, 1, !dbg !7005
  store i32 %inc61, i32* @outcnt, align 4, !dbg !7005
  %idxprom62 = zext i32 %50 to i64, !dbg !7005
  %arrayidx63 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom62, !dbg !7005, !ctir !234
  store i8 %49, i8* %arrayidx63, align 1, !dbg !7005
  %51 = load i32, i32* @outcnt, align 4, !dbg !7007
  %cmp64 = icmp eq i32 %51, 32768, !dbg !7007
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !7005

if.then66:                                        ; preds = %if.end55
  call void @flush_window(), !dbg !7007
  br label %if.end67, !dbg !7007

if.end67:                                         ; preds = %if.then66, %if.end55
  %52 = load i32, i32* %len, align 4, !dbg !7009
  %53 = load i32, i32* @valid, align 4, !dbg !7009
  %sub68 = sub nsw i32 %53, %52, !dbg !7009
  store i32 %sub68, i32* @valid, align 4, !dbg !7009
  br label %for.cond, !dbg !7010, !llvm.loop !7011

for.end:                                          ; preds = %if.then54
  call void @flush_window(), !dbg !7014
  %54 = load i64, i64* @orig_len, align 8, !dbg !7015
  %55 = load i64, i64* @bytes_out, align 8, !dbg !7017
  %and69 = and i64 %55, 4294967295, !dbg !7018
  %cmp70 = icmp ne i64 %54, %and69, !dbg !7019
  br i1 %cmp70, label %if.then72, label %if.end73, !dbg !7020

if.then72:                                        ; preds = %for.end
  call void @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.58, i64 0, i64 0)), !dbg !7021
  br label %if.end73, !dbg !7023

if.end73:                                         ; preds = %if.then72, %for.end
  ret i32 0, !dbg !7024
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @unlzw(i32 %in, i32 %out) #0 !dbg !7025 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %stackp = alloca i8*, align 8, !ctir !83
  %code = alloca i64, align 8, !ctir !275
  %finchar = alloca i32, align 4, !ctir !12
  %oldcode = alloca i64, align 8, !ctir !275
  %incode = alloca i64, align 8, !ctir !275
  %inbits = alloca i64, align 8, !ctir !22
  %posbits = alloca i64, align 8, !ctir !22
  %outpos = alloca i32, align 4, !ctir !12
  %bitmask = alloca i32, align 4, !ctir !6
  %free_ent = alloca i64, align 8, !ctir !275
  %maxcode = alloca i64, align 8, !ctir !275
  %maxmaxcode = alloca i64, align 8, !ctir !275
  %n_bits = alloca i32, align 4, !ctir !12
  %rsize = alloca i32, align 4, !ctir !12
  %i = alloca i32, align 4, !ctir !12
  %e = alloca i32, align 4, !ctir !12
  %o = alloca i32, align 4, !ctir !12
  %p = alloca i8*, align 8, !ctir !83
  %i177 = alloca i32, align 4, !ctir !12
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !7026, metadata !DIExpression()), !dbg !7027
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !7028, metadata !DIExpression()), !dbg !7029
  call void @llvm.dbg.declare(metadata i8** %stackp, metadata !7030, metadata !DIExpression()), !dbg !7031
  call void @llvm.dbg.declare(metadata i64* %code, metadata !7032, metadata !DIExpression()), !dbg !7033
  call void @llvm.dbg.declare(metadata i32* %finchar, metadata !7034, metadata !DIExpression()), !dbg !7035
  call void @llvm.dbg.declare(metadata i64* %oldcode, metadata !7036, metadata !DIExpression()), !dbg !7037
  call void @llvm.dbg.declare(metadata i64* %incode, metadata !7038, metadata !DIExpression()), !dbg !7039
  call void @llvm.dbg.declare(metadata i64* %inbits, metadata !7040, metadata !DIExpression()), !dbg !7041
  call void @llvm.dbg.declare(metadata i64* %posbits, metadata !7042, metadata !DIExpression()), !dbg !7043
  call void @llvm.dbg.declare(metadata i32* %outpos, metadata !7044, metadata !DIExpression()), !dbg !7045
  call void @llvm.dbg.declare(metadata i32* %bitmask, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata i64* %free_ent, metadata !7048, metadata !DIExpression()), !dbg !7049
  call void @llvm.dbg.declare(metadata i64* %maxcode, metadata !7050, metadata !DIExpression()), !dbg !7051
  call void @llvm.dbg.declare(metadata i64* %maxmaxcode, metadata !7052, metadata !DIExpression()), !dbg !7053
  call void @llvm.dbg.declare(metadata i32* %n_bits, metadata !7054, metadata !DIExpression()), !dbg !7055
  call void @llvm.dbg.declare(metadata i32* %rsize, metadata !7056, metadata !DIExpression()), !dbg !7057
  %0 = load i32, i32* @inptr, align 4, !dbg !7058
  %1 = load i32, i32* @insize, align 4, !dbg !7058
  %cmp = icmp ult i32 %0, %1, !dbg !7058
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7058

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* @inptr, align 4, !dbg !7058
  %inc = add i32 %2, 1, !dbg !7058
  store i32 %inc, i32* @inptr, align 4, !dbg !7058
  %idxprom = zext i32 %2 to i64, !dbg !7058
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !7058, !ctir !231
  %3 = load i8, i8* %arrayidx, align 1, !dbg !7058
  %conv = zext i8 %3 to i32, !dbg !7058
  br label %cond.end, !dbg !7058

cond.false:                                       ; preds = %entry
  %call = call i32 @fill_inbuf(i32 0), !dbg !7058
  br label %cond.end, !dbg !7058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !7058
  store i32 %cond, i32* @maxbits, align 4, !dbg !7059
  %4 = load i32, i32* @maxbits, align 4, !dbg !7060
  %and = and i32 %4, 128, !dbg !7061
  store i32 %and, i32* @block_mode, align 4, !dbg !7062
  %5 = load i32, i32* @maxbits, align 4, !dbg !7063
  %and1 = and i32 %5, 96, !dbg !7065
  %cmp2 = icmp ne i32 %and1, 0, !dbg !7066
  br i1 %cmp2, label %if.then, label %if.end11, !dbg !7067

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* @quiet, align 4, !dbg !7068
  %tobool = icmp ne i32 %6, 0, !dbg !7068
  br i1 %tobool, label %if.end, label %if.then4, !dbg !7072

if.then4:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7068
  %8 = load i8*, i8** @progname, align 8, !dbg !7068
  %9 = load i32, i32* @maxbits, align 4, !dbg !7068
  %and5 = and i32 %9, 96, !dbg !7068
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.54, i64 0, i64 0), i8* %8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %and5), !dbg !7068
  br label %if.end, !dbg !7068

if.end:                                           ; preds = %if.then4, %if.then
  %10 = load i32, i32* @exit_code, align 4, !dbg !7073
  %cmp7 = icmp eq i32 %10, 0, !dbg !7073
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !7072

if.then9:                                         ; preds = %if.end
  store i32 2, i32* @exit_code, align 4, !dbg !7073
  br label %if.end10, !dbg !7073

if.end10:                                         ; preds = %if.then9, %if.end
  br label %if.end11, !dbg !7075

if.end11:                                         ; preds = %if.end10, %cond.end
  %11 = load i32, i32* @maxbits, align 4, !dbg !7076
  %and12 = and i32 %11, 31, !dbg !7076
  store i32 %and12, i32* @maxbits, align 4, !dbg !7076
  %12 = load i32, i32* @maxbits, align 4, !dbg !7077
  %sh_prom = zext i32 %12 to i64, !dbg !7077
  %shl = shl i64 1, %sh_prom, !dbg !7077
  store i64 %shl, i64* %maxmaxcode, align 8, !dbg !7078
  %13 = load i32, i32* @maxbits, align 4, !dbg !7079
  %cmp13 = icmp sgt i32 %13, 16, !dbg !7081
  br i1 %cmp13, label %if.then15, label %if.end17, !dbg !7082

if.then15:                                        ; preds = %if.end11
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !7083
  %15 = load i8*, i8** @progname, align 8, !dbg !7085
  %16 = load i32, i32* @maxbits, align 4, !dbg !7086
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.55, i64 0, i64 0), i8* %15, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %16, i32 16), !dbg !7087
  store i32 1, i32* @exit_code, align 4, !dbg !7088
  store i32 1, i32* %retval, align 4, !dbg !7089
  br label %return, !dbg !7089

if.end17:                                         ; preds = %if.end11
  %17 = load i32, i32* @insize, align 4, !dbg !7090
  store i32 %17, i32* %rsize, align 4, !dbg !7091
  store i32 9, i32* %n_bits, align 4, !dbg !7092
  store i64 511, i64* %maxcode, align 8, !dbg !7093
  %18 = load i32, i32* %n_bits, align 4, !dbg !7094
  %shl18 = shl i32 1, %18, !dbg !7095
  %sub = sub nsw i32 %shl18, 1, !dbg !7096
  store i32 %sub, i32* %bitmask, align 4, !dbg !7097
  store i64 -1, i64* %oldcode, align 8, !dbg !7098
  store i32 0, i32* %finchar, align 4, !dbg !7099
  store i32 0, i32* %outpos, align 4, !dbg !7100
  %19 = load i32, i32* @inptr, align 4, !dbg !7101
  %shl19 = shl i32 %19, 3, !dbg !7102
  %conv20 = zext i32 %shl19 to i64, !dbg !7101
  store i64 %conv20, i64* %posbits, align 8, !dbg !7103
  %20 = load i32, i32* @block_mode, align 4, !dbg !7104
  %tobool21 = icmp ne i32 %20, 0, !dbg !7105
  %21 = zext i1 %tobool21 to i64, !dbg !7105
  %cond22 = select i1 %tobool21, i32 257, i32 256, !dbg !7105
  %conv23 = sext i32 %cond22 to i64, !dbg !7106
  store i64 %conv23, i64* %free_ent, align 8, !dbg !7107
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([65536 x i16]* @prev to i8*), i8 0, i64 256, i1 false), !dbg !7108
  store i64 255, i64* %code, align 8, !dbg !7109
  br label %for.cond, !dbg !7111

for.cond:                                         ; preds = %for.inc, %if.end17
  %22 = load i64, i64* %code, align 8, !dbg !7112
  %cmp24 = icmp sge i64 %22, 0, !dbg !7114
  br i1 %cmp24, label %for.body, label %for.end, !dbg !7115

for.body:                                         ; preds = %for.cond
  %23 = load i64, i64* %code, align 8, !dbg !7116
  %conv26 = trunc i64 %23 to i8, !dbg !7118
  %24 = load i64, i64* %code, align 8, !dbg !7119
  %arrayidx27 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %24, !dbg !7119, !ctir !234
  store i8 %conv26, i8* %arrayidx27, align 1, !dbg !7120
  br label %for.inc, !dbg !7121

for.inc:                                          ; preds = %for.body
  %25 = load i64, i64* %code, align 8, !dbg !7122
  %dec = add nsw i64 %25, -1, !dbg !7122
  store i64 %dec, i64* %code, align 8, !dbg !7122
  br label %for.cond, !dbg !7123, !llvm.loop !7124

for.end:                                          ; preds = %for.cond
  br label %do.body, !dbg !7126

do.body:                                          ; preds = %do.cond230, %for.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7127, metadata !DIExpression()), !dbg !7129
  call void @llvm.dbg.declare(metadata i32* %e, metadata !7130, metadata !DIExpression()), !dbg !7131
  call void @llvm.dbg.declare(metadata i32* %o, metadata !7132, metadata !DIExpression()), !dbg !7133
  br label %resetbuf, !dbg !7134

resetbuf:                                         ; preds = %if.then130, %if.end93, %do.body
  call void @llvm.dbg.label(metadata !7135), !dbg !7136
  %26 = load i32, i32* @insize, align 4, !dbg !7137
  %27 = load i64, i64* %posbits, align 8, !dbg !7138
  %shr = ashr i64 %27, 3, !dbg !7139
  %conv28 = trunc i64 %shr to i32, !dbg !7140
  store i32 %conv28, i32* %o, align 4, !dbg !7141
  %sub29 = sub i32 %26, %conv28, !dbg !7142
  store i32 %sub29, i32* %e, align 4, !dbg !7143
  store i32 0, i32* %i, align 4, !dbg !7144
  br label %for.cond30, !dbg !7146

for.cond30:                                       ; preds = %for.inc38, %resetbuf
  %28 = load i32, i32* %i, align 4, !dbg !7147
  %29 = load i32, i32* %e, align 4, !dbg !7149
  %cmp31 = icmp slt i32 %28, %29, !dbg !7150
  br i1 %cmp31, label %for.body33, label %for.end40, !dbg !7151

for.body33:                                       ; preds = %for.cond30
  %30 = load i32, i32* %i, align 4, !dbg !7152
  %31 = load i32, i32* %o, align 4, !dbg !7154
  %add = add nsw i32 %30, %31, !dbg !7155
  %idxprom34 = sext i32 %add to i64, !dbg !7156
  %arrayidx35 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom34, !dbg !7156, !ctir !231
  %32 = load i8, i8* %arrayidx35, align 1, !dbg !7156
  %33 = load i32, i32* %i, align 4, !dbg !7157
  %idxprom36 = sext i32 %33 to i64, !dbg !7158
  %arrayidx37 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom36, !dbg !7158, !ctir !231
  store i8 %32, i8* %arrayidx37, align 1, !dbg !7159
  br label %for.inc38, !dbg !7160

for.inc38:                                        ; preds = %for.body33
  %34 = load i32, i32* %i, align 4, !dbg !7161
  %inc39 = add nsw i32 %34, 1, !dbg !7161
  store i32 %inc39, i32* %i, align 4, !dbg !7161
  br label %for.cond30, !dbg !7162, !llvm.loop !7163

for.end40:                                        ; preds = %for.cond30
  %35 = load i32, i32* %e, align 4, !dbg !7165
  store i32 %35, i32* @insize, align 4, !dbg !7166
  store i64 0, i64* %posbits, align 8, !dbg !7167
  %36 = load i32, i32* @insize, align 4, !dbg !7168
  %cmp41 = icmp ult i32 %36, 64, !dbg !7170
  br i1 %cmp41, label %if.then43, label %if.end53, !dbg !7171

if.then43:                                        ; preds = %for.end40
  %37 = load i32, i32* %in.addr, align 4, !dbg !7172
  %38 = load i32, i32* @insize, align 4, !dbg !7175
  %idx.ext = zext i32 %38 to i64, !dbg !7176
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 %idx.ext, !dbg !7176, !ctir !20
  %call44 = call i64 @read(i32 %37, i8* %add.ptr, i64 32768), !dbg !7177
  %conv45 = trunc i64 %call44 to i32, !dbg !7177
  store i32 %conv45, i32* %rsize, align 4, !dbg !7178
  %cmp46 = icmp eq i32 %conv45, -1, !dbg !7179
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !7180

if.then48:                                        ; preds = %if.then43
  call void @read_error(), !dbg !7181
  br label %if.end49, !dbg !7183

if.end49:                                         ; preds = %if.then48, %if.then43
  %39 = load i32, i32* %rsize, align 4, !dbg !7184
  %40 = load i32, i32* @insize, align 4, !dbg !7185
  %add50 = add i32 %40, %39, !dbg !7185
  store i32 %add50, i32* @insize, align 4, !dbg !7185
  %41 = load i32, i32* %rsize, align 4, !dbg !7186
  %conv51 = sext i32 %41 to i64, !dbg !7187
  %42 = load i64, i64* @bytes_in, align 8, !dbg !7188
  %add52 = add nsw i64 %42, %conv51, !dbg !7188
  store i64 %add52, i64* @bytes_in, align 8, !dbg !7188
  br label %if.end53, !dbg !7189

if.end53:                                         ; preds = %if.end49, %for.end40
  %43 = load i32, i32* %rsize, align 4, !dbg !7190
  %cmp54 = icmp ne i32 %43, 0, !dbg !7191
  br i1 %cmp54, label %cond.true56, label %cond.false61, !dbg !7192

cond.true56:                                      ; preds = %if.end53
  %44 = load i32, i32* @insize, align 4, !dbg !7193
  %conv57 = zext i32 %44 to i64, !dbg !7194
  %45 = load i32, i32* @insize, align 4, !dbg !7195
  %46 = load i32, i32* %n_bits, align 4, !dbg !7196
  %rem = urem i32 %45, %46, !dbg !7197
  %conv58 = zext i32 %rem to i64, !dbg !7195
  %sub59 = sub nsw i64 %conv57, %conv58, !dbg !7198
  %shl60 = shl i64 %sub59, 3, !dbg !7199
  br label %cond.end67, !dbg !7192

cond.false61:                                     ; preds = %if.end53
  %47 = load i32, i32* @insize, align 4, !dbg !7200
  %conv62 = zext i32 %47 to i64, !dbg !7201
  %shl63 = shl i64 %conv62, 3, !dbg !7202
  %48 = load i32, i32* %n_bits, align 4, !dbg !7203
  %sub64 = sub nsw i32 %48, 1, !dbg !7204
  %conv65 = sext i32 %sub64 to i64, !dbg !7205
  %sub66 = sub nsw i64 %shl63, %conv65, !dbg !7206
  br label %cond.end67, !dbg !7192

cond.end67:                                       ; preds = %cond.false61, %cond.true56
  %cond68 = phi i64 [ %shl60, %cond.true56 ], [ %sub66, %cond.false61 ], !dbg !7192
  store i64 %cond68, i64* %inbits, align 8, !dbg !7207
  br label %while.cond, !dbg !7208

while.cond:                                       ; preds = %if.end228, %if.end120, %cond.end67
  %49 = load i64, i64* %inbits, align 8, !dbg !7209
  %50 = load i64, i64* %posbits, align 8, !dbg !7210
  %cmp69 = icmp sgt i64 %49, %50, !dbg !7211
  br i1 %cmp69, label %while.body, label %while.end229, !dbg !7208

while.body:                                       ; preds = %while.cond
  %51 = load i64, i64* %free_ent, align 8, !dbg !7212
  %52 = load i64, i64* %maxcode, align 8, !dbg !7215
  %cmp71 = icmp sgt i64 %51, %52, !dbg !7216
  br i1 %cmp71, label %if.then73, label %if.end96, !dbg !7217

if.then73:                                        ; preds = %while.body
  %53 = load i64, i64* %posbits, align 8, !dbg !7218
  %sub74 = sub nsw i64 %53, 1, !dbg !7220
  %54 = load i32, i32* %n_bits, align 4, !dbg !7221
  %shl75 = shl i32 %54, 3, !dbg !7222
  %conv76 = sext i32 %shl75 to i64, !dbg !7223
  %55 = load i64, i64* %posbits, align 8, !dbg !7224
  %sub77 = sub nsw i64 %55, 1, !dbg !7225
  %56 = load i32, i32* %n_bits, align 4, !dbg !7226
  %shl78 = shl i32 %56, 3, !dbg !7227
  %conv79 = sext i32 %shl78 to i64, !dbg !7228
  %add80 = add nsw i64 %sub77, %conv79, !dbg !7229
  %57 = load i32, i32* %n_bits, align 4, !dbg !7230
  %shl81 = shl i32 %57, 3, !dbg !7231
  %conv82 = sext i32 %shl81 to i64, !dbg !7232
  %rem83 = srem i64 %add80, %conv82, !dbg !7233
  %sub84 = sub nsw i64 %conv76, %rem83, !dbg !7234
  %add85 = add nsw i64 %sub74, %sub84, !dbg !7235
  store i64 %add85, i64* %posbits, align 8, !dbg !7236
  %58 = load i32, i32* %n_bits, align 4, !dbg !7237
  %inc86 = add nsw i32 %58, 1, !dbg !7237
  store i32 %inc86, i32* %n_bits, align 4, !dbg !7237
  %59 = load i32, i32* %n_bits, align 4, !dbg !7238
  %60 = load i32, i32* @maxbits, align 4, !dbg !7240
  %cmp87 = icmp eq i32 %59, %60, !dbg !7241
  br i1 %cmp87, label %if.then89, label %if.else, !dbg !7242

if.then89:                                        ; preds = %if.then73
  %61 = load i64, i64* %maxmaxcode, align 8, !dbg !7243
  store i64 %61, i64* %maxcode, align 8, !dbg !7245
  br label %if.end93, !dbg !7246

if.else:                                          ; preds = %if.then73
  %62 = load i32, i32* %n_bits, align 4, !dbg !7247
  %sh_prom90 = zext i32 %62 to i64, !dbg !7247
  %shl91 = shl i64 1, %sh_prom90, !dbg !7247
  %sub92 = sub nsw i64 %shl91, 1, !dbg !7249
  store i64 %sub92, i64* %maxcode, align 8, !dbg !7250
  br label %if.end93

if.end93:                                         ; preds = %if.else, %if.then89
  %63 = load i32, i32* %n_bits, align 4, !dbg !7251
  %shl94 = shl i32 1, %63, !dbg !7252
  %sub95 = sub nsw i32 %shl94, 1, !dbg !7253
  store i32 %sub95, i32* %bitmask, align 4, !dbg !7254
  br label %resetbuf, !dbg !7255

if.end96:                                         ; preds = %while.body
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7256, metadata !DIExpression()), !dbg !7258
  %64 = load i64, i64* %posbits, align 8, !dbg !7258
  %shr97 = ashr i64 %64, 3, !dbg !7258
  %arrayidx98 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %shr97, !dbg !7258, !ctir !231
  store i8* %arrayidx98, i8** %p, align 8, !dbg !7258
  %65 = load i8*, i8** %p, align 8, !dbg !7258
  %arrayidx99 = getelementptr inbounds i8, i8* %65, i64 0, !dbg !7258, !ctir !83
  %66 = load i8, i8* %arrayidx99, align 1, !dbg !7258
  %conv100 = zext i8 %66 to i64, !dbg !7258
  %67 = load i8*, i8** %p, align 8, !dbg !7258
  %arrayidx101 = getelementptr inbounds i8, i8* %67, i64 1, !dbg !7258, !ctir !83
  %68 = load i8, i8* %arrayidx101, align 1, !dbg !7258
  %conv102 = zext i8 %68 to i64, !dbg !7258
  %shl103 = shl i64 %conv102, 8, !dbg !7258
  %or = or i64 %conv100, %shl103, !dbg !7258
  %69 = load i8*, i8** %p, align 8, !dbg !7258
  %arrayidx104 = getelementptr inbounds i8, i8* %69, i64 2, !dbg !7258, !ctir !83
  %70 = load i8, i8* %arrayidx104, align 1, !dbg !7258
  %conv105 = zext i8 %70 to i64, !dbg !7258
  %shl106 = shl i64 %conv105, 16, !dbg !7258
  %or107 = or i64 %or, %shl106, !dbg !7258
  %71 = load i64, i64* %posbits, align 8, !dbg !7258
  %and108 = and i64 %71, 7, !dbg !7258
  %shr109 = ashr i64 %or107, %and108, !dbg !7258
  %72 = load i32, i32* %bitmask, align 4, !dbg !7258
  %conv110 = zext i32 %72 to i64, !dbg !7258
  %and111 = and i64 %shr109, %conv110, !dbg !7258
  store i64 %and111, i64* %code, align 8, !dbg !7258
  %73 = load i32, i32* %n_bits, align 4, !dbg !7258
  %conv112 = sext i32 %73 to i64, !dbg !7258
  %74 = load i64, i64* %posbits, align 8, !dbg !7258
  %add113 = add nsw i64 %74, %conv112, !dbg !7258
  store i64 %add113, i64* %posbits, align 8, !dbg !7258
  %75 = load i64, i64* %oldcode, align 8, !dbg !7259
  %cmp114 = icmp eq i64 %75, -1, !dbg !7261
  br i1 %cmp114, label %if.then116, label %if.end126, !dbg !7262

if.then116:                                       ; preds = %if.end96
  %76 = load i64, i64* %code, align 8, !dbg !7263
  %cmp117 = icmp sge i64 %76, 256, !dbg !7266
  br i1 %cmp117, label %if.then119, label %if.end120, !dbg !7267

if.then119:                                       ; preds = %if.then116
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0)), !dbg !7268
  br label %if.end120, !dbg !7268

if.end120:                                        ; preds = %if.then119, %if.then116
  %77 = load i64, i64* %code, align 8, !dbg !7269
  store i64 %77, i64* %oldcode, align 8, !dbg !7270
  %conv121 = trunc i64 %77 to i32, !dbg !7271
  store i32 %conv121, i32* %finchar, align 4, !dbg !7272
  %conv122 = trunc i32 %conv121 to i8, !dbg !7273
  %78 = load i32, i32* %outpos, align 4, !dbg !7274
  %inc123 = add nsw i32 %78, 1, !dbg !7274
  store i32 %inc123, i32* %outpos, align 4, !dbg !7274
  %idxprom124 = sext i32 %78 to i64, !dbg !7275
  %arrayidx125 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom124, !dbg !7275, !ctir !283
  store i8 %conv122, i8* %arrayidx125, align 1, !dbg !7276
  br label %while.cond, !dbg !7277, !llvm.loop !7278

if.end126:                                        ; preds = %if.end96
  %79 = load i64, i64* %code, align 8, !dbg !7280
  %cmp127 = icmp eq i64 %79, 256, !dbg !7282
  br i1 %cmp127, label %land.lhs.true, label %if.end145, !dbg !7283

land.lhs.true:                                    ; preds = %if.end126
  %80 = load i32, i32* @block_mode, align 4, !dbg !7284
  %tobool129 = icmp ne i32 %80, 0, !dbg !7284
  br i1 %tobool129, label %if.then130, label %if.end145, !dbg !7285

if.then130:                                       ; preds = %land.lhs.true
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([65536 x i16]* @prev to i8*), i8 0, i64 256, i1 false), !dbg !7286
  store i64 256, i64* %free_ent, align 8, !dbg !7288
  %81 = load i64, i64* %posbits, align 8, !dbg !7289
  %sub131 = sub nsw i64 %81, 1, !dbg !7290
  %82 = load i32, i32* %n_bits, align 4, !dbg !7291
  %shl132 = shl i32 %82, 3, !dbg !7292
  %conv133 = sext i32 %shl132 to i64, !dbg !7293
  %83 = load i64, i64* %posbits, align 8, !dbg !7294
  %sub134 = sub nsw i64 %83, 1, !dbg !7295
  %84 = load i32, i32* %n_bits, align 4, !dbg !7296
  %shl135 = shl i32 %84, 3, !dbg !7297
  %conv136 = sext i32 %shl135 to i64, !dbg !7298
  %add137 = add nsw i64 %sub134, %conv136, !dbg !7299
  %85 = load i32, i32* %n_bits, align 4, !dbg !7300
  %shl138 = shl i32 %85, 3, !dbg !7301
  %conv139 = sext i32 %shl138 to i64, !dbg !7302
  %rem140 = srem i64 %add137, %conv139, !dbg !7303
  %sub141 = sub nsw i64 %conv133, %rem140, !dbg !7304
  %add142 = add nsw i64 %sub131, %sub141, !dbg !7305
  store i64 %add142, i64* %posbits, align 8, !dbg !7306
  store i32 9, i32* %n_bits, align 4, !dbg !7307
  store i64 511, i64* %maxcode, align 8, !dbg !7308
  %86 = load i32, i32* %n_bits, align 4, !dbg !7309
  %shl143 = shl i32 1, %86, !dbg !7310
  %sub144 = sub nsw i32 %shl143, 1, !dbg !7311
  store i32 %sub144, i32* %bitmask, align 4, !dbg !7312
  br label %resetbuf, !dbg !7313

if.end145:                                        ; preds = %land.lhs.true, %if.end126
  %87 = load i64, i64* %code, align 8, !dbg !7314
  store i64 %87, i64* %incode, align 8, !dbg !7315
  store i8* bitcast (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i8*), i8** %stackp, align 8, !dbg !7316
  %88 = load i64, i64* %code, align 8, !dbg !7317
  %89 = load i64, i64* %free_ent, align 8, !dbg !7319
  %cmp146 = icmp sge i64 %88, %89, !dbg !7320
  br i1 %cmp146, label %if.then148, label %if.end164, !dbg !7321

if.then148:                                       ; preds = %if.end145
  %90 = load i64, i64* %code, align 8, !dbg !7322
  %91 = load i64, i64* %free_ent, align 8, !dbg !7325
  %cmp149 = icmp sgt i64 %90, %91, !dbg !7326
  br i1 %cmp149, label %if.then151, label %if.end162, !dbg !7327

if.then151:                                       ; preds = %if.then148
  %92 = load i32, i32* @test, align 4, !dbg !7328
  %tobool152 = icmp ne i32 %92, 0, !dbg !7328
  br i1 %tobool152, label %if.end159, label %land.lhs.true153, !dbg !7331

land.lhs.true153:                                 ; preds = %if.then151
  %93 = load i32, i32* %outpos, align 4, !dbg !7332
  %cmp154 = icmp sgt i32 %93, 0, !dbg !7333
  br i1 %cmp154, label %if.then156, label %if.end159, !dbg !7334

if.then156:                                       ; preds = %land.lhs.true153
  %94 = load i32, i32* %out.addr, align 4, !dbg !7335
  %95 = load i32, i32* %outpos, align 4, !dbg !7337
  call void @write_buf(i32 %94, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 %95), !dbg !7338
  %96 = load i32, i32* %outpos, align 4, !dbg !7339
  %conv157 = sext i32 %96 to i64, !dbg !7340
  %97 = load i64, i64* @bytes_out, align 8, !dbg !7341
  %add158 = add nsw i64 %97, %conv157, !dbg !7341
  store i64 %add158, i64* @bytes_out, align 8, !dbg !7341
  br label %if.end159, !dbg !7342

if.end159:                                        ; preds = %if.then156, %land.lhs.true153, %if.then151
  %98 = load i32, i32* @to_stdout, align 4, !dbg !7343
  %tobool160 = icmp ne i32 %98, 0, !dbg !7343
  %99 = zext i1 %tobool160 to i64, !dbg !7343
  %cond161 = select i1 %tobool160, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.57, i64 0, i64 0), !dbg !7343
  call void @error(i8* %cond161), !dbg !7344
  br label %if.end162, !dbg !7345

if.end162:                                        ; preds = %if.end159, %if.then148
  %100 = load i32, i32* %finchar, align 4, !dbg !7346
  %conv163 = trunc i32 %100 to i8, !dbg !7347
  %101 = load i8*, i8** %stackp, align 8, !dbg !7348
  %incdec.ptr = getelementptr inbounds i8, i8* %101, i32 -1, !dbg !7348, !ctir !78
  store i8* %incdec.ptr, i8** %stackp, align 8, !dbg !7348
  store i8 %conv163, i8* %incdec.ptr, align 1, !dbg !7349, !ctir !78
  %102 = load i64, i64* %oldcode, align 8, !dbg !7350
  store i64 %102, i64* %code, align 8, !dbg !7351
  br label %if.end164, !dbg !7352

if.end164:                                        ; preds = %if.end162, %if.end145
  br label %while.cond165, !dbg !7353

while.cond165:                                    ; preds = %while.body168, %if.end164
  %103 = load i64, i64* %code, align 8, !dbg !7354
  %cmp166 = icmp uge i64 %103, 256, !dbg !7355
  br i1 %cmp166, label %while.body168, label %while.end, !dbg !7353

while.body168:                                    ; preds = %while.cond165
  %104 = load i64, i64* %code, align 8, !dbg !7356
  %arrayidx169 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %104, !dbg !7356, !ctir !234
  %105 = load i8, i8* %arrayidx169, align 1, !dbg !7356
  %106 = load i8*, i8** %stackp, align 8, !dbg !7358
  %incdec.ptr170 = getelementptr inbounds i8, i8* %106, i32 -1, !dbg !7358, !ctir !78
  store i8* %incdec.ptr170, i8** %stackp, align 8, !dbg !7358
  store i8 %105, i8* %incdec.ptr170, align 1, !dbg !7359, !ctir !78
  %107 = load i64, i64* %code, align 8, !dbg !7360
  %arrayidx171 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %107, !dbg !7360, !ctir !282
  %108 = load i16, i16* %arrayidx171, align 2, !dbg !7360
  %conv172 = zext i16 %108 to i64, !dbg !7360
  store i64 %conv172, i64* %code, align 8, !dbg !7361
  br label %while.cond165, !dbg !7353, !llvm.loop !7362

while.end:                                        ; preds = %while.cond165
  %109 = load i64, i64* %code, align 8, !dbg !7364
  %arrayidx173 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %109, !dbg !7364, !ctir !234
  %110 = load i8, i8* %arrayidx173, align 1, !dbg !7364
  %conv174 = zext i8 %110 to i32, !dbg !7364
  store i32 %conv174, i32* %finchar, align 4, !dbg !7365
  %conv175 = trunc i32 %conv174 to i8, !dbg !7366
  %111 = load i8*, i8** %stackp, align 8, !dbg !7367
  %incdec.ptr176 = getelementptr inbounds i8, i8* %111, i32 -1, !dbg !7367, !ctir !78
  store i8* %incdec.ptr176, i8** %stackp, align 8, !dbg !7367
  store i8 %conv175, i8* %incdec.ptr176, align 1, !dbg !7368, !ctir !78
  call void @llvm.dbg.declare(metadata i32* %i177, metadata !7369, metadata !DIExpression()), !dbg !7371
  %112 = load i32, i32* %outpos, align 4, !dbg !7372
  %113 = load i8*, i8** %stackp, align 8, !dbg !7374
  %sub.ptr.rhs.cast = ptrtoint i8* %113 to i64, !dbg !7375
  %sub.ptr.sub = sub i64 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i64), %sub.ptr.rhs.cast, !dbg !7375
  %conv178 = trunc i64 %sub.ptr.sub to i32, !dbg !7376
  store i32 %conv178, i32* %i177, align 4, !dbg !7377
  %add179 = add nsw i32 %112, %conv178, !dbg !7378
  %cmp180 = icmp sge i32 %add179, 16384, !dbg !7379
  br i1 %cmp180, label %if.then182, label %if.else214, !dbg !7380

if.then182:                                       ; preds = %while.end
  br label %do.body183, !dbg !7381

do.body183:                                       ; preds = %do.cond, %if.then182
  %114 = load i32, i32* %i177, align 4, !dbg !7383
  %115 = load i32, i32* %outpos, align 4, !dbg !7386
  %sub184 = sub nsw i32 16384, %115, !dbg !7387
  %cmp185 = icmp sgt i32 %114, %sub184, !dbg !7388
  br i1 %cmp185, label %if.then187, label %if.end189, !dbg !7389

if.then187:                                       ; preds = %do.body183
  %116 = load i32, i32* %outpos, align 4, !dbg !7390
  %sub188 = sub nsw i32 16384, %116, !dbg !7391
  store i32 %sub188, i32* %i177, align 4, !dbg !7392
  br label %if.end189, !dbg !7393

if.end189:                                        ; preds = %if.then187, %do.body183
  %117 = load i32, i32* %i177, align 4, !dbg !7394
  %cmp190 = icmp sgt i32 %117, 0, !dbg !7396
  br i1 %cmp190, label %if.then192, label %if.end197, !dbg !7397

if.then192:                                       ; preds = %if.end189
  %118 = load i32, i32* %outpos, align 4, !dbg !7398
  %idx.ext193 = sext i32 %118 to i64, !dbg !7400
  %add.ptr194 = getelementptr inbounds i8, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i64 %idx.ext193, !dbg !7400, !ctir !13
  %119 = load i8*, i8** %stackp, align 8, !dbg !7401
  %120 = load i32, i32* %i177, align 4, !dbg !7402
  %conv195 = sext i32 %120 to i64, !dbg !7402
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr194, i8* align 1 %119, i64 %conv195, i1 false), !dbg !7403
  %121 = load i32, i32* %i177, align 4, !dbg !7404
  %122 = load i32, i32* %outpos, align 4, !dbg !7405
  %add196 = add nsw i32 %122, %121, !dbg !7405
  store i32 %add196, i32* %outpos, align 4, !dbg !7405
  br label %if.end197, !dbg !7406

if.end197:                                        ; preds = %if.then192, %if.end189
  %123 = load i32, i32* %outpos, align 4, !dbg !7407
  %cmp198 = icmp sge i32 %123, 16384, !dbg !7409
  br i1 %cmp198, label %if.then200, label %if.end206, !dbg !7410

if.then200:                                       ; preds = %if.end197
  %124 = load i32, i32* @test, align 4, !dbg !7411
  %tobool201 = icmp ne i32 %124, 0, !dbg !7411
  br i1 %tobool201, label %if.end205, label %if.then202, !dbg !7414

if.then202:                                       ; preds = %if.then200
  %125 = load i32, i32* %out.addr, align 4, !dbg !7415
  %126 = load i32, i32* %outpos, align 4, !dbg !7417
  call void @write_buf(i32 %125, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 %126), !dbg !7418
  %127 = load i32, i32* %outpos, align 4, !dbg !7419
  %conv203 = sext i32 %127 to i64, !dbg !7420
  %128 = load i64, i64* @bytes_out, align 8, !dbg !7421
  %add204 = add nsw i64 %128, %conv203, !dbg !7421
  store i64 %add204, i64* @bytes_out, align 8, !dbg !7421
  br label %if.end205, !dbg !7422

if.end205:                                        ; preds = %if.then202, %if.then200
  store i32 0, i32* %outpos, align 4, !dbg !7423
  br label %if.end206, !dbg !7424

if.end206:                                        ; preds = %if.end205, %if.end197
  %129 = load i32, i32* %i177, align 4, !dbg !7425
  %130 = load i8*, i8** %stackp, align 8, !dbg !7426
  %idx.ext207 = sext i32 %129 to i64, !dbg !7426
  %add.ptr208 = getelementptr inbounds i8, i8* %130, i64 %idx.ext207, !dbg !7426, !ctir !78
  store i8* %add.ptr208, i8** %stackp, align 8, !dbg !7426
  br label %do.cond, !dbg !7427

do.cond:                                          ; preds = %if.end206
  %131 = load i8*, i8** %stackp, align 8, !dbg !7428
  %sub.ptr.rhs.cast209 = ptrtoint i8* %131 to i64, !dbg !7429
  %sub.ptr.sub210 = sub i64 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i64), %sub.ptr.rhs.cast209, !dbg !7429
  %conv211 = trunc i64 %sub.ptr.sub210 to i32, !dbg !7430
  store i32 %conv211, i32* %i177, align 4, !dbg !7431
  %cmp212 = icmp sgt i32 %conv211, 0, !dbg !7432
  br i1 %cmp212, label %do.body183, label %do.end, !dbg !7427, !llvm.loop !7433

do.end:                                           ; preds = %do.cond
  br label %if.end219, !dbg !7435

if.else214:                                       ; preds = %while.end
  %132 = load i32, i32* %outpos, align 4, !dbg !7436
  %idx.ext215 = sext i32 %132 to i64, !dbg !7438
  %add.ptr216 = getelementptr inbounds i8, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i64 %idx.ext215, !dbg !7438, !ctir !13
  %133 = load i8*, i8** %stackp, align 8, !dbg !7439
  %134 = load i32, i32* %i177, align 4, !dbg !7440
  %conv217 = sext i32 %134 to i64, !dbg !7440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr216, i8* align 1 %133, i64 %conv217, i1 false), !dbg !7441
  %135 = load i32, i32* %i177, align 4, !dbg !7442
  %136 = load i32, i32* %outpos, align 4, !dbg !7443
  %add218 = add nsw i32 %136, %135, !dbg !7443
  store i32 %add218, i32* %outpos, align 4, !dbg !7443
  br label %if.end219

if.end219:                                        ; preds = %if.else214, %do.end
  %137 = load i64, i64* %free_ent, align 8, !dbg !7444
  store i64 %137, i64* %code, align 8, !dbg !7446
  %138 = load i64, i64* %maxmaxcode, align 8, !dbg !7447
  %cmp220 = icmp slt i64 %137, %138, !dbg !7448
  br i1 %cmp220, label %if.then222, label %if.end228, !dbg !7449

if.then222:                                       ; preds = %if.end219
  %139 = load i64, i64* %oldcode, align 8, !dbg !7450
  %conv223 = trunc i64 %139 to i16, !dbg !7452
  %140 = load i64, i64* %code, align 8, !dbg !7453
  %arrayidx224 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %140, !dbg !7453, !ctir !282
  store i16 %conv223, i16* %arrayidx224, align 2, !dbg !7454
  %141 = load i32, i32* %finchar, align 4, !dbg !7455
  %conv225 = trunc i32 %141 to i8, !dbg !7456
  %142 = load i64, i64* %code, align 8, !dbg !7457
  %arrayidx226 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %142, !dbg !7457, !ctir !234
  store i8 %conv225, i8* %arrayidx226, align 1, !dbg !7458
  %143 = load i64, i64* %code, align 8, !dbg !7459
  %add227 = add nsw i64 %143, 1, !dbg !7460
  store i64 %add227, i64* %free_ent, align 8, !dbg !7461
  br label %if.end228, !dbg !7462

if.end228:                                        ; preds = %if.then222, %if.end219
  %144 = load i64, i64* %incode, align 8, !dbg !7463
  store i64 %144, i64* %oldcode, align 8, !dbg !7464
  br label %while.cond, !dbg !7208, !llvm.loop !7278

while.end229:                                     ; preds = %while.cond
  br label %do.cond230, !dbg !7465

do.cond230:                                       ; preds = %while.end229
  %145 = load i32, i32* %rsize, align 4, !dbg !7466
  %cmp231 = icmp ne i32 %145, 0, !dbg !7467
  br i1 %cmp231, label %do.body, label %do.end233, !dbg !7465, !llvm.loop !7468

do.end233:                                        ; preds = %do.cond230
  %146 = load i32, i32* @test, align 4, !dbg !7470
  %tobool234 = icmp ne i32 %146, 0, !dbg !7470
  br i1 %tobool234, label %if.end241, label %land.lhs.true235, !dbg !7472

land.lhs.true235:                                 ; preds = %do.end233
  %147 = load i32, i32* %outpos, align 4, !dbg !7473
  %cmp236 = icmp sgt i32 %147, 0, !dbg !7474
  br i1 %cmp236, label %if.then238, label %if.end241, !dbg !7475

if.then238:                                       ; preds = %land.lhs.true235
  %148 = load i32, i32* %out.addr, align 4, !dbg !7476
  %149 = load i32, i32* %outpos, align 4, !dbg !7478
  call void @write_buf(i32 %148, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 %149), !dbg !7479
  %150 = load i32, i32* %outpos, align 4, !dbg !7480
  %conv239 = sext i32 %150 to i64, !dbg !7481
  %151 = load i64, i64* @bytes_out, align 8, !dbg !7482
  %add240 = add nsw i64 %151, %conv239, !dbg !7482
  store i64 %add240, i64* @bytes_out, align 8, !dbg !7482
  br label %if.end241, !dbg !7483

if.end241:                                        ; preds = %if.then238, %land.lhs.true235, %do.end233
  store i32 0, i32* %retval, align 4, !dbg !7484
  br label %return, !dbg !7484

return:                                           ; preds = %if.end241, %if.then15
  %152 = load i32, i32* %retval, align 4, !dbg !7485
  ret i32 %152, !dbg !7485
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @unlzh(i32 %in, i32 %out) #0 !dbg !7486 {
entry:
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %n = alloca i32, align 4, !ctir !6
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !7487, metadata !DIExpression()), !dbg !7488
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !7489, metadata !DIExpression()), !dbg !7490
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7491, metadata !DIExpression()), !dbg !7492
  %0 = load i32, i32* %in.addr, align 4, !dbg !7493
  store i32 %0, i32* @ifd, align 4, !dbg !7494
  %1 = load i32, i32* %out.addr, align 4, !dbg !7495
  store i32 %1, i32* @ofd, align 4, !dbg !7496
  call void @decode_start(), !dbg !7497
  br label %while.cond, !dbg !7498

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* @done, align 4, !dbg !7499
  %tobool = icmp ne i32 %2, 0, !dbg !7500
  %lnot = xor i1 %tobool, true, !dbg !7500
  br i1 %lnot, label %while.body, label %while.end, !dbg !7498

while.body:                                       ; preds = %while.cond
  %call = call i32 @decode(i32 8192, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0)), !dbg !7501
  store i32 %call, i32* %n, align 4, !dbg !7503
  %3 = load i32, i32* @test, align 4, !dbg !7504
  %tobool1 = icmp ne i32 %3, 0, !dbg !7504
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !7506

land.lhs.true:                                    ; preds = %while.body
  %4 = load i32, i32* %n, align 4, !dbg !7507
  %cmp = icmp ugt i32 %4, 0, !dbg !7508
  br i1 %cmp, label %if.then, label %if.end, !dbg !7509

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %out.addr, align 4, !dbg !7510
  %6 = load i32, i32* %n, align 4, !dbg !7512
  call void @write_buf(i32 %5, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %6), !dbg !7513
  br label %if.end, !dbg !7514

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.body
  br label %while.cond, !dbg !7498, !llvm.loop !7515

while.end:                                        ; preds = %while.cond
  ret i32 0, !dbg !7517
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @copy(i32 %in, i32 %out) #0 !dbg !7518 {
entry:
  %in.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  store i32 %in, i32* %in.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in.addr, metadata !7519, metadata !DIExpression()), !dbg !7520
  store i32 %out, i32* %out.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %out.addr, metadata !7521, metadata !DIExpression()), !dbg !7522
  %call = call i32* @__errno_location() #12, !dbg !7523
  store i32 0, i32* %call, align 4, !dbg !7524, !ctir !12
  br label %while.cond, !dbg !7525

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @insize, align 4, !dbg !7526
  %cmp = icmp ne i32 %0, 0, !dbg !7527
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7528

land.rhs:                                         ; preds = %while.cond
  %1 = load i32, i32* @insize, align 4, !dbg !7529
  %cmp1 = icmp ne i32 %1, -1, !dbg !7530
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !7531
  br i1 %2, label %while.body, label %while.end, !dbg !7525

while.body:                                       ; preds = %land.end
  %3 = load i32, i32* %out.addr, align 4, !dbg !7532
  %4 = load i32, i32* @insize, align 4, !dbg !7534
  call void @write_buf(i32 %3, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i32 %4), !dbg !7535
  %5 = load i32, i32* @insize, align 4, !dbg !7536
  %conv = zext i32 %5 to i64, !dbg !7536
  %6 = load i64, i64* @bytes_out, align 8, !dbg !7537
  %add = add nsw i64 %6, %conv, !dbg !7537
  store i64 %add, i64* @bytes_out, align 8, !dbg !7537
  %7 = load i32, i32* %in.addr, align 4, !dbg !7538
  %call2 = call i64 @read(i32 %7, i8* getelementptr inbounds ([32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 0), i64 32768), !dbg !7539
  %conv3 = trunc i64 %call2 to i32, !dbg !7539
  store i32 %conv3, i32* @insize, align 4, !dbg !7540
  br label %while.cond, !dbg !7525, !llvm.loop !7541

while.end:                                        ; preds = %land.end
  %8 = load i32, i32* @insize, align 4, !dbg !7543
  %cmp4 = icmp eq i32 %8, -1, !dbg !7545
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7546

if.then:                                          ; preds = %while.end
  call void @read_error(), !dbg !7547
  br label %if.end, !dbg !7549

if.end:                                           ; preds = %if.then, %while.end
  %9 = load i64, i64* @bytes_out, align 8, !dbg !7550
  store i64 %9, i64* @bytes_in, align 8, !dbg !7551
  ret i32 0, !dbg !7552
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @decode_start() #0 !dbg !7553 {
entry:
  call void @huf_decode_start(), !dbg !7554
  store i32 0, i32* @j, align 4, !dbg !7555
  store i32 0, i32* @done, align 4, !dbg !7556
  ret void, !dbg !7557
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode(i32 %count, i8* %buffer) #0 !dbg !766 {
entry:
  %retval = alloca i32, align 4
  %count.addr = alloca i32, align 4
  %buffer.addr = alloca i8*, align 8
  %r = alloca i32, align 4, !ctir !6
  %c = alloca i32, align 4, !ctir !6
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !7558, metadata !DIExpression()), !dbg !7559
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !7560, metadata !DIExpression()), !dbg !7561
  call void @llvm.dbg.declare(metadata i32* %r, metadata !7562, metadata !DIExpression()), !dbg !7563
  call void @llvm.dbg.declare(metadata i32* %c, metadata !7564, metadata !DIExpression()), !dbg !7565
  store i32 0, i32* %r, align 4, !dbg !7566
  br label %while.cond, !dbg !7567

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @j, align 4, !dbg !7568
  %dec = add nsw i32 %0, -1, !dbg !7568
  store i32 %dec, i32* @j, align 4, !dbg !7568
  %cmp = icmp sge i32 %dec, 0, !dbg !7569
  br i1 %cmp, label %while.body, label %while.end, !dbg !7567

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %buffer.addr, align 8, !dbg !7570
  %2 = load i32, i32* @decode.i, align 4, !dbg !7572
  %idxprom = zext i32 %2 to i64, !dbg !7570
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom, !dbg !7570, !ctir !85
  %3 = load i8, i8* %arrayidx, align 1, !dbg !7570
  %4 = load i8*, i8** %buffer.addr, align 8, !dbg !7573
  %5 = load i32, i32* %r, align 4, !dbg !7574
  %idxprom1 = zext i32 %5 to i64, !dbg !7573
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 %idxprom1, !dbg !7573, !ctir !85
  store i8 %3, i8* %arrayidx2, align 1, !dbg !7575
  %6 = load i32, i32* @decode.i, align 4, !dbg !7576
  %add = add i32 %6, 1, !dbg !7577
  %and = and i32 %add, 8191, !dbg !7578
  store i32 %and, i32* @decode.i, align 4, !dbg !7579
  %7 = load i32, i32* %r, align 4, !dbg !7580
  %inc = add i32 %7, 1, !dbg !7580
  store i32 %inc, i32* %r, align 4, !dbg !7580
  %8 = load i32, i32* %count.addr, align 4, !dbg !7582
  %cmp3 = icmp eq i32 %inc, %8, !dbg !7583
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7584

if.then:                                          ; preds = %while.body
  %9 = load i32, i32* %r, align 4, !dbg !7585
  store i32 %9, i32* %retval, align 4, !dbg !7586
  br label %return, !dbg !7586

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !7567, !llvm.loop !7587

while.end:                                        ; preds = %while.cond
  br label %for.cond, !dbg !7589

for.cond:                                         ; preds = %if.end37, %while.end
  %call = call i32 @decode_c(), !dbg !7590
  store i32 %call, i32* %c, align 4, !dbg !7594
  %10 = load i32, i32* %c, align 4, !dbg !7595
  %cmp4 = icmp eq i32 %10, 510, !dbg !7597
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !7598

if.then5:                                         ; preds = %for.cond
  store i32 1, i32* @done, align 4, !dbg !7599
  %11 = load i32, i32* %r, align 4, !dbg !7601
  store i32 %11, i32* %retval, align 4, !dbg !7602
  br label %return, !dbg !7602

if.end6:                                          ; preds = %for.cond
  %12 = load i32, i32* %c, align 4, !dbg !7603
  %cmp7 = icmp ule i32 %12, 255, !dbg !7605
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !7606

if.then8:                                         ; preds = %if.end6
  %13 = load i32, i32* %c, align 4, !dbg !7607
  %conv = trunc i32 %13 to i8, !dbg !7607
  %14 = load i8*, i8** %buffer.addr, align 8, !dbg !7609
  %15 = load i32, i32* %r, align 4, !dbg !7610
  %idxprom9 = zext i32 %15 to i64, !dbg !7609
  %arrayidx10 = getelementptr inbounds i8, i8* %14, i64 %idxprom9, !dbg !7609, !ctir !85
  store i8 %conv, i8* %arrayidx10, align 1, !dbg !7611
  %16 = load i32, i32* %r, align 4, !dbg !7612
  %inc11 = add i32 %16, 1, !dbg !7612
  store i32 %inc11, i32* %r, align 4, !dbg !7612
  %17 = load i32, i32* %count.addr, align 4, !dbg !7614
  %cmp12 = icmp eq i32 %inc11, %17, !dbg !7615
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !7616

if.then14:                                        ; preds = %if.then8
  %18 = load i32, i32* %r, align 4, !dbg !7617
  store i32 %18, i32* %retval, align 4, !dbg !7618
  br label %return, !dbg !7618

if.end15:                                         ; preds = %if.then8
  br label %if.end37, !dbg !7619

if.else:                                          ; preds = %if.end6
  %19 = load i32, i32* %c, align 4, !dbg !7620
  %sub = sub i32 %19, 253, !dbg !7622
  store i32 %sub, i32* @j, align 4, !dbg !7623
  %20 = load i32, i32* %r, align 4, !dbg !7624
  %call16 = call i32 @decode_p(), !dbg !7625
  %sub17 = sub i32 %20, %call16, !dbg !7626
  %sub18 = sub i32 %sub17, 1, !dbg !7627
  %and19 = and i32 %sub18, 8191, !dbg !7628
  store i32 %and19, i32* @decode.i, align 4, !dbg !7629
  br label %while.cond20, !dbg !7630

while.cond20:                                     ; preds = %if.end35, %if.else
  %21 = load i32, i32* @j, align 4, !dbg !7631
  %dec21 = add nsw i32 %21, -1, !dbg !7631
  store i32 %dec21, i32* @j, align 4, !dbg !7631
  %cmp22 = icmp sge i32 %dec21, 0, !dbg !7632
  br i1 %cmp22, label %while.body24, label %while.end36, !dbg !7630

while.body24:                                     ; preds = %while.cond20
  %22 = load i8*, i8** %buffer.addr, align 8, !dbg !7633
  %23 = load i32, i32* @decode.i, align 4, !dbg !7635
  %idxprom25 = zext i32 %23 to i64, !dbg !7633
  %arrayidx26 = getelementptr inbounds i8, i8* %22, i64 %idxprom25, !dbg !7633, !ctir !85
  %24 = load i8, i8* %arrayidx26, align 1, !dbg !7633
  %25 = load i8*, i8** %buffer.addr, align 8, !dbg !7636
  %26 = load i32, i32* %r, align 4, !dbg !7637
  %idxprom27 = zext i32 %26 to i64, !dbg !7636
  %arrayidx28 = getelementptr inbounds i8, i8* %25, i64 %idxprom27, !dbg !7636, !ctir !85
  store i8 %24, i8* %arrayidx28, align 1, !dbg !7638
  %27 = load i32, i32* @decode.i, align 4, !dbg !7639
  %add29 = add i32 %27, 1, !dbg !7640
  %and30 = and i32 %add29, 8191, !dbg !7641
  store i32 %and30, i32* @decode.i, align 4, !dbg !7642
  %28 = load i32, i32* %r, align 4, !dbg !7643
  %inc31 = add i32 %28, 1, !dbg !7643
  store i32 %inc31, i32* %r, align 4, !dbg !7643
  %29 = load i32, i32* %count.addr, align 4, !dbg !7645
  %cmp32 = icmp eq i32 %inc31, %29, !dbg !7646
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !7647

if.then34:                                        ; preds = %while.body24
  %30 = load i32, i32* %r, align 4, !dbg !7648
  store i32 %30, i32* %retval, align 4, !dbg !7649
  br label %return, !dbg !7649

if.end35:                                         ; preds = %while.body24
  br label %while.cond20, !dbg !7630, !llvm.loop !7650

while.end36:                                      ; preds = %while.cond20
  br label %if.end37

if.end37:                                         ; preds = %while.end36, %if.end15
  br label %for.cond, !dbg !7652, !llvm.loop !7653

return:                                           ; preds = %if.then34, %if.then14, %if.then5, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !7656
  ret i32 %31, !dbg !7656
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_c() #0 !dbg !7657 {
entry:
  %retval = alloca i32, align 4
  %j = alloca i32, align 4, !ctir !6
  %mask = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7660, metadata !DIExpression()), !dbg !7661
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !7662, metadata !DIExpression()), !dbg !7663
  %0 = load i32, i32* @blocksize, align 4, !dbg !7664
  %cmp = icmp eq i32 %0, 0, !dbg !7666
  br i1 %cmp, label %if.then, label %if.end3, !dbg !7667

if.then:                                          ; preds = %entry
  %call = call i32 @getbits(i32 16), !dbg !7668
  store i32 %call, i32* @blocksize, align 4, !dbg !7670
  %1 = load i32, i32* @blocksize, align 4, !dbg !7671
  %cmp1 = icmp eq i32 %1, 0, !dbg !7673
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !7674

if.then2:                                         ; preds = %if.then
  store i32 510, i32* %retval, align 4, !dbg !7675
  br label %return, !dbg !7675

if.end:                                           ; preds = %if.then
  call void @read_pt_len(i32 19, i32 5, i32 3), !dbg !7677
  call void @read_c_len(), !dbg !7678
  call void @read_pt_len(i32 14, i32 4, i32 -1), !dbg !7679
  br label %if.end3, !dbg !7680

if.end3:                                          ; preds = %if.end, %entry
  %2 = load i32, i32* @blocksize, align 4, !dbg !7681
  %dec = add i32 %2, -1, !dbg !7681
  store i32 %dec, i32* @blocksize, align 4, !dbg !7681
  %3 = load i16, i16* @io_bitbuf, align 2, !dbg !7682
  %conv = zext i16 %3 to i32, !dbg !7682
  %shr = ashr i32 %conv, 4, !dbg !7683
  %idxprom = sext i32 %shr to i64, !dbg !7684
  %arrayidx = getelementptr inbounds [32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 %idxprom, !dbg !7684, !ctir !272
  %4 = load i16, i16* %arrayidx, align 2, !dbg !7684
  %conv4 = zext i16 %4 to i32, !dbg !7684
  store i32 %conv4, i32* %j, align 4, !dbg !7685
  %5 = load i32, i32* %j, align 4, !dbg !7686
  %cmp5 = icmp uge i32 %5, 510, !dbg !7688
  br i1 %cmp5, label %if.then7, label %if.end20, !dbg !7689

if.then7:                                         ; preds = %if.end3
  store i32 8, i32* %mask, align 4, !dbg !7690
  br label %do.body, !dbg !7692

do.body:                                          ; preds = %do.cond, %if.then7
  %6 = load i16, i16* @io_bitbuf, align 2, !dbg !7693
  %conv8 = zext i16 %6 to i32, !dbg !7693
  %7 = load i32, i32* %mask, align 4, !dbg !7696
  %and = and i32 %conv8, %7, !dbg !7697
  %tobool = icmp ne i32 %and, 0, !dbg !7697
  br i1 %tobool, label %if.then9, label %if.else, !dbg !7698

if.then9:                                         ; preds = %do.body
  %8 = load i32, i32* %j, align 4, !dbg !7699
  %idxprom10 = zext i32 %8 to i64, !dbg !7700
  %arrayidx11 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom10, !dbg !7700, !ctir !166
  %9 = load i16, i16* %arrayidx11, align 2, !dbg !7700
  %conv12 = zext i16 %9 to i32, !dbg !7700
  store i32 %conv12, i32* %j, align 4, !dbg !7701
  br label %if.end16, !dbg !7702

if.else:                                          ; preds = %do.body
  %10 = load i32, i32* %j, align 4, !dbg !7703
  %idxprom13 = zext i32 %10 to i64, !dbg !7704
  %arrayidx14 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %idxprom13, !dbg !7704, !ctir !282
  %11 = load i16, i16* %arrayidx14, align 2, !dbg !7704
  %conv15 = zext i16 %11 to i32, !dbg !7704
  store i32 %conv15, i32* %j, align 4, !dbg !7705
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then9
  %12 = load i32, i32* %mask, align 4, !dbg !7706
  %shr17 = lshr i32 %12, 1, !dbg !7706
  store i32 %shr17, i32* %mask, align 4, !dbg !7706
  br label %do.cond, !dbg !7707

do.cond:                                          ; preds = %if.end16
  %13 = load i32, i32* %j, align 4, !dbg !7708
  %cmp18 = icmp uge i32 %13, 510, !dbg !7709
  br i1 %cmp18, label %do.body, label %do.end, !dbg !7707, !llvm.loop !7710

do.end:                                           ; preds = %do.cond
  br label %if.end20, !dbg !7712

if.end20:                                         ; preds = %do.end, %if.end3
  %14 = load i32, i32* %j, align 4, !dbg !7713
  %idxprom21 = zext i32 %14 to i64, !dbg !7714
  %arrayidx22 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom21, !dbg !7714, !ctir !283
  %15 = load i8, i8* %arrayidx22, align 1, !dbg !7714
  %conv23 = zext i8 %15 to i32, !dbg !7715
  call void @fillbuf(i32 %conv23), !dbg !7716
  %16 = load i32, i32* %j, align 4, !dbg !7717
  store i32 %16, i32* %retval, align 4, !dbg !7718
  br label %return, !dbg !7718

return:                                           ; preds = %if.end20, %if.then2
  %17 = load i32, i32* %retval, align 4, !dbg !7719
  ret i32 %17, !dbg !7719
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_p() #0 !dbg !7720 {
entry:
  %j = alloca i32, align 4, !ctir !6
  %mask = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7721, metadata !DIExpression()), !dbg !7722
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !7723, metadata !DIExpression()), !dbg !7724
  %0 = load i16, i16* @io_bitbuf, align 2, !dbg !7725
  %conv = zext i16 %0 to i32, !dbg !7725
  %shr = ashr i32 %conv, 8, !dbg !7726
  %idxprom = sext i32 %shr to i64, !dbg !7727
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %idxprom, !dbg !7727, !ctir !407
  %1 = load i16, i16* %arrayidx, align 2, !dbg !7727
  %conv1 = zext i16 %1 to i32, !dbg !7727
  store i32 %conv1, i32* %j, align 4, !dbg !7728
  %2 = load i32, i32* %j, align 4, !dbg !7729
  %cmp = icmp uge i32 %2, 14, !dbg !7731
  br i1 %cmp, label %if.then, label %if.end14, !dbg !7732

if.then:                                          ; preds = %entry
  store i32 128, i32* %mask, align 4, !dbg !7733
  br label %do.body, !dbg !7735

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i16, i16* @io_bitbuf, align 2, !dbg !7736
  %conv3 = zext i16 %3 to i32, !dbg !7736
  %4 = load i32, i32* %mask, align 4, !dbg !7739
  %and = and i32 %conv3, %4, !dbg !7740
  %tobool = icmp ne i32 %and, 0, !dbg !7740
  br i1 %tobool, label %if.then4, label %if.else, !dbg !7741

if.then4:                                         ; preds = %do.body
  %5 = load i32, i32* %j, align 4, !dbg !7742
  %idxprom5 = zext i32 %5 to i64, !dbg !7743
  %arrayidx6 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom5, !dbg !7743, !ctir !166
  %6 = load i16, i16* %arrayidx6, align 2, !dbg !7743
  %conv7 = zext i16 %6 to i32, !dbg !7743
  store i32 %conv7, i32* %j, align 4, !dbg !7744
  br label %if.end, !dbg !7745

if.else:                                          ; preds = %do.body
  %7 = load i32, i32* %j, align 4, !dbg !7746
  %idxprom8 = zext i32 %7 to i64, !dbg !7747
  %arrayidx9 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %idxprom8, !dbg !7747, !ctir !282
  %8 = load i16, i16* %arrayidx9, align 2, !dbg !7747
  %conv10 = zext i16 %8 to i32, !dbg !7747
  store i32 %conv10, i32* %j, align 4, !dbg !7748
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %9 = load i32, i32* %mask, align 4, !dbg !7749
  %shr11 = lshr i32 %9, 1, !dbg !7749
  store i32 %shr11, i32* %mask, align 4, !dbg !7749
  br label %do.cond, !dbg !7750

do.cond:                                          ; preds = %if.end
  %10 = load i32, i32* %j, align 4, !dbg !7751
  %cmp12 = icmp uge i32 %10, 14, !dbg !7752
  br i1 %cmp12, label %do.body, label %do.end, !dbg !7750, !llvm.loop !7753

do.end:                                           ; preds = %do.cond
  br label %if.end14, !dbg !7755

if.end14:                                         ; preds = %do.end, %entry
  %11 = load i32, i32* %j, align 4, !dbg !7756
  %idxprom15 = zext i32 %11 to i64, !dbg !7757
  %arrayidx16 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom15, !dbg !7757, !ctir !405
  %12 = load i8, i8* %arrayidx16, align 1, !dbg !7757
  %conv17 = zext i8 %12 to i32, !dbg !7758
  call void @fillbuf(i32 %conv17), !dbg !7759
  %13 = load i32, i32* %j, align 4, !dbg !7760
  %cmp18 = icmp ne i32 %13, 0, !dbg !7762
  br i1 %cmp18, label %if.then20, label %if.end22, !dbg !7763

if.then20:                                        ; preds = %if.end14
  %14 = load i32, i32* %j, align 4, !dbg !7764
  %sub = sub i32 %14, 1, !dbg !7765
  %shl = shl i32 1, %sub, !dbg !7766
  %15 = load i32, i32* %j, align 4, !dbg !7767
  %sub21 = sub i32 %15, 1, !dbg !7768
  %call = call i32 @getbits(i32 %sub21), !dbg !7769
  %add = add i32 %shl, %call, !dbg !7770
  store i32 %add, i32* %j, align 4, !dbg !7771
  br label %if.end22, !dbg !7772

if.end22:                                         ; preds = %if.then20, %if.end14
  %16 = load i32, i32* %j, align 4, !dbg !7773
  ret i32 %16, !dbg !7774
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fillbuf(i32 %n) #0 !dbg !7775 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7776, metadata !DIExpression()), !dbg !7777
  %0 = load i32, i32* %n.addr, align 4, !dbg !7778
  %1 = load i16, i16* @io_bitbuf, align 2, !dbg !7779
  %conv = zext i16 %1 to i32, !dbg !7779
  %shl = shl i32 %conv, %0, !dbg !7779
  %conv1 = trunc i32 %shl to i16, !dbg !7779
  store i16 %conv1, i16* @io_bitbuf, align 2, !dbg !7779
  br label %while.cond, !dbg !7780

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !7781
  %3 = load i32, i32* @bitcount, align 4, !dbg !7782
  %cmp = icmp sgt i32 %2, %3, !dbg !7783
  br i1 %cmp, label %while.body, label %while.end, !dbg !7780

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @subbitbuf, align 4, !dbg !7784
  %5 = load i32, i32* @bitcount, align 4, !dbg !7786
  %6 = load i32, i32* %n.addr, align 4, !dbg !7787
  %sub = sub nsw i32 %6, %5, !dbg !7787
  store i32 %sub, i32* %n.addr, align 4, !dbg !7787
  %shl3 = shl i32 %4, %sub, !dbg !7788
  %7 = load i16, i16* @io_bitbuf, align 2, !dbg !7789
  %conv4 = zext i16 %7 to i32, !dbg !7789
  %or = or i32 %conv4, %shl3, !dbg !7789
  %conv5 = trunc i32 %or to i16, !dbg !7789
  store i16 %conv5, i16* @io_bitbuf, align 2, !dbg !7789
  %8 = load i32, i32* @inptr, align 4, !dbg !7790
  %9 = load i32, i32* @insize, align 4, !dbg !7790
  %cmp6 = icmp ult i32 %8, %9, !dbg !7790
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !7790

cond.true:                                        ; preds = %while.body
  %10 = load i32, i32* @inptr, align 4, !dbg !7790
  %inc = add i32 %10, 1, !dbg !7790
  store i32 %inc, i32* @inptr, align 4, !dbg !7790
  %idxprom = zext i32 %10 to i64, !dbg !7790
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !7790, !ctir !231
  %11 = load i8, i8* %arrayidx, align 1, !dbg !7790
  %conv8 = zext i8 %11 to i32, !dbg !7790
  br label %cond.end, !dbg !7790

cond.false:                                       ; preds = %while.body
  %call = call i32 @fill_inbuf(i32 1), !dbg !7790
  br label %cond.end, !dbg !7790

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv8, %cond.true ], [ %call, %cond.false ], !dbg !7790
  store i32 %cond, i32* @subbitbuf, align 4, !dbg !7791
  %12 = load i32, i32* @subbitbuf, align 4, !dbg !7792
  %cmp9 = icmp eq i32 %12, -1, !dbg !7794
  br i1 %cmp9, label %if.then, label %if.end, !dbg !7795

if.then:                                          ; preds = %cond.end
  store i32 0, i32* @subbitbuf, align 4, !dbg !7796
  br label %if.end, !dbg !7797

if.end:                                           ; preds = %if.then, %cond.end
  store i32 8, i32* @bitcount, align 4, !dbg !7798
  br label %while.cond, !dbg !7780, !llvm.loop !7799

while.end:                                        ; preds = %while.cond
  %13 = load i32, i32* @subbitbuf, align 4, !dbg !7801
  %14 = load i32, i32* %n.addr, align 4, !dbg !7802
  %15 = load i32, i32* @bitcount, align 4, !dbg !7803
  %sub11 = sub nsw i32 %15, %14, !dbg !7803
  store i32 %sub11, i32* @bitcount, align 4, !dbg !7803
  %shr = lshr i32 %13, %sub11, !dbg !7804
  %16 = load i16, i16* @io_bitbuf, align 2, !dbg !7805
  %conv12 = zext i16 %16 to i32, !dbg !7805
  %or13 = or i32 %conv12, %shr, !dbg !7805
  %conv14 = trunc i32 %or13 to i16, !dbg !7805
  store i16 %conv14, i16* @io_bitbuf, align 2, !dbg !7805
  ret void, !dbg !7806
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getbits(i32 %n) #0 !dbg !7807 {
entry:
  %n.addr = alloca i32, align 4
  %x = alloca i32, align 4, !ctir !6
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7810, metadata !DIExpression()), !dbg !7811
  call void @llvm.dbg.declare(metadata i32* %x, metadata !7812, metadata !DIExpression()), !dbg !7813
  %0 = load i16, i16* @io_bitbuf, align 2, !dbg !7814
  %conv = zext i16 %0 to i32, !dbg !7814
  %1 = load i32, i32* %n.addr, align 4, !dbg !7815
  %conv1 = sext i32 %1 to i64, !dbg !7815
  %sub = sub i64 16, %conv1, !dbg !7816
  %sh_prom = trunc i64 %sub to i32, !dbg !7817
  %shr = ashr i32 %conv, %sh_prom, !dbg !7817
  store i32 %shr, i32* %x, align 4, !dbg !7818
  %2 = load i32, i32* %n.addr, align 4, !dbg !7819
  call void @fillbuf(i32 %2), !dbg !7820
  %3 = load i32, i32* %x, align 4, !dbg !7821
  ret i32 %3, !dbg !7822
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @read_pt_len(i32 %nn, i32 %nbit, i32 %i_special) #0 !dbg !7823 {
entry:
  %nn.addr = alloca i32, align 4
  %nbit.addr = alloca i32, align 4
  %i_special.addr = alloca i32, align 4
  %i = alloca i32, align 4, !ctir !12
  %c = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  %mask = alloca i32, align 4, !ctir !6
  store i32 %nn, i32* %nn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nn.addr, metadata !7824, metadata !DIExpression()), !dbg !7825
  store i32 %nbit, i32* %nbit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nbit.addr, metadata !7826, metadata !DIExpression()), !dbg !7827
  store i32 %i_special, i32* %i_special.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_special.addr, metadata !7828, metadata !DIExpression()), !dbg !7829
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7830, metadata !DIExpression()), !dbg !7831
  call void @llvm.dbg.declare(metadata i32* %c, metadata !7832, metadata !DIExpression()), !dbg !7833
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7834, metadata !DIExpression()), !dbg !7835
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !7836, metadata !DIExpression()), !dbg !7837
  %0 = load i32, i32* %nbit.addr, align 4, !dbg !7838
  %call = call i32 @getbits(i32 %0), !dbg !7839
  store i32 %call, i32* %n, align 4, !dbg !7840
  %1 = load i32, i32* %n, align 4, !dbg !7841
  %cmp = icmp eq i32 %1, 0, !dbg !7843
  br i1 %cmp, label %if.then, label %if.else, !dbg !7844

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %nbit.addr, align 4, !dbg !7845
  %call1 = call i32 @getbits(i32 %2), !dbg !7847
  store i32 %call1, i32* %c, align 4, !dbg !7848
  store i32 0, i32* %i, align 4, !dbg !7849
  br label %for.cond, !dbg !7851

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4, !dbg !7852
  %4 = load i32, i32* %nn.addr, align 4, !dbg !7854
  %cmp2 = icmp slt i32 %3, %4, !dbg !7855
  br i1 %cmp2, label %for.body, label %for.end, !dbg !7856

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !7857
  %idxprom = sext i32 %5 to i64, !dbg !7858
  %arrayidx = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom, !dbg !7858, !ctir !405
  store i8 0, i8* %arrayidx, align 1, !dbg !7859
  br label %for.inc, !dbg !7858

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !7860
  %inc = add nsw i32 %6, 1, !dbg !7860
  store i32 %inc, i32* %i, align 4, !dbg !7860
  br label %for.cond, !dbg !7861, !llvm.loop !7862

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !7864
  br label %for.cond3, !dbg !7866

for.cond3:                                        ; preds = %for.inc8, %for.end
  %7 = load i32, i32* %i, align 4, !dbg !7867
  %cmp4 = icmp slt i32 %7, 256, !dbg !7869
  br i1 %cmp4, label %for.body5, label %for.end10, !dbg !7870

for.body5:                                        ; preds = %for.cond3
  %8 = load i32, i32* %c, align 4, !dbg !7871
  %conv = trunc i32 %8 to i16, !dbg !7871
  %9 = load i32, i32* %i, align 4, !dbg !7872
  %idxprom6 = sext i32 %9 to i64, !dbg !7873
  %arrayidx7 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %idxprom6, !dbg !7873, !ctir !407
  store i16 %conv, i16* %arrayidx7, align 2, !dbg !7874
  br label %for.inc8, !dbg !7873

for.inc8:                                         ; preds = %for.body5
  %10 = load i32, i32* %i, align 4, !dbg !7875
  %inc9 = add nsw i32 %10, 1, !dbg !7875
  store i32 %inc9, i32* %i, align 4, !dbg !7875
  br label %for.cond3, !dbg !7876, !llvm.loop !7877

for.end10:                                        ; preds = %for.cond3
  br label %if.end50, !dbg !7879

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7880
  br label %while.cond, !dbg !7882

while.cond:                                       ; preds = %if.end40, %if.else
  %11 = load i32, i32* %i, align 4, !dbg !7883
  %12 = load i32, i32* %n, align 4, !dbg !7884
  %cmp11 = icmp slt i32 %11, %12, !dbg !7885
  br i1 %cmp11, label %while.body, label %while.end41, !dbg !7882

while.body:                                       ; preds = %while.cond
  %13 = load i16, i16* @io_bitbuf, align 2, !dbg !7886
  %conv13 = zext i16 %13 to i32, !dbg !7886
  %shr = ashr i32 %conv13, 13, !dbg !7888
  store i32 %shr, i32* %c, align 4, !dbg !7889
  %14 = load i32, i32* %c, align 4, !dbg !7890
  %cmp14 = icmp eq i32 %14, 7, !dbg !7892
  br i1 %cmp14, label %if.then16, label %if.end, !dbg !7893

if.then16:                                        ; preds = %while.body
  store i32 4096, i32* %mask, align 4, !dbg !7894
  br label %while.cond17, !dbg !7896

while.cond17:                                     ; preds = %while.body19, %if.then16
  %15 = load i32, i32* %mask, align 4, !dbg !7897
  %16 = load i16, i16* @io_bitbuf, align 2, !dbg !7898
  %conv18 = zext i16 %16 to i32, !dbg !7898
  %and = and i32 %15, %conv18, !dbg !7899
  %tobool = icmp ne i32 %and, 0, !dbg !7896
  br i1 %tobool, label %while.body19, label %while.end, !dbg !7896

while.body19:                                     ; preds = %while.cond17
  %17 = load i32, i32* %mask, align 4, !dbg !7900
  %shr20 = lshr i32 %17, 1, !dbg !7900
  store i32 %shr20, i32* %mask, align 4, !dbg !7900
  %18 = load i32, i32* %c, align 4, !dbg !7902
  %inc21 = add nsw i32 %18, 1, !dbg !7902
  store i32 %inc21, i32* %c, align 4, !dbg !7902
  br label %while.cond17, !dbg !7896, !llvm.loop !7903

while.end:                                        ; preds = %while.cond17
  br label %if.end, !dbg !7905

if.end:                                           ; preds = %while.end, %while.body
  %19 = load i32, i32* %c, align 4, !dbg !7906
  %cmp22 = icmp slt i32 %19, 7, !dbg !7907
  br i1 %cmp22, label %cond.true, label %cond.false, !dbg !7908

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !7908

cond.false:                                       ; preds = %if.end
  %20 = load i32, i32* %c, align 4, !dbg !7909
  %sub = sub nsw i32 %20, 3, !dbg !7910
  br label %cond.end, !dbg !7908

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 3, %cond.true ], [ %sub, %cond.false ], !dbg !7908
  call void @fillbuf(i32 %cond), !dbg !7911
  %21 = load i32, i32* %c, align 4, !dbg !7912
  %conv24 = trunc i32 %21 to i8, !dbg !7912
  %22 = load i32, i32* %i, align 4, !dbg !7913
  %inc25 = add nsw i32 %22, 1, !dbg !7913
  store i32 %inc25, i32* %i, align 4, !dbg !7913
  %idxprom26 = sext i32 %22 to i64, !dbg !7914
  %arrayidx27 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom26, !dbg !7914, !ctir !405
  store i8 %conv24, i8* %arrayidx27, align 1, !dbg !7915
  %23 = load i32, i32* %i, align 4, !dbg !7916
  %24 = load i32, i32* %i_special.addr, align 4, !dbg !7918
  %cmp28 = icmp eq i32 %23, %24, !dbg !7919
  br i1 %cmp28, label %if.then30, label %if.end40, !dbg !7920

if.then30:                                        ; preds = %cond.end
  %call31 = call i32 @getbits(i32 2), !dbg !7921
  store i32 %call31, i32* %c, align 4, !dbg !7923
  br label %while.cond32, !dbg !7924

while.cond32:                                     ; preds = %while.body35, %if.then30
  %25 = load i32, i32* %c, align 4, !dbg !7925
  %dec = add nsw i32 %25, -1, !dbg !7925
  store i32 %dec, i32* %c, align 4, !dbg !7925
  %cmp33 = icmp sge i32 %dec, 0, !dbg !7926
  br i1 %cmp33, label %while.body35, label %while.end39, !dbg !7924

while.body35:                                     ; preds = %while.cond32
  %26 = load i32, i32* %i, align 4, !dbg !7927
  %inc36 = add nsw i32 %26, 1, !dbg !7927
  store i32 %inc36, i32* %i, align 4, !dbg !7927
  %idxprom37 = sext i32 %26 to i64, !dbg !7928
  %arrayidx38 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom37, !dbg !7928, !ctir !405
  store i8 0, i8* %arrayidx38, align 1, !dbg !7929
  br label %while.cond32, !dbg !7924, !llvm.loop !7930

while.end39:                                      ; preds = %while.cond32
  br label %if.end40, !dbg !7932

if.end40:                                         ; preds = %while.end39, %cond.end
  br label %while.cond, !dbg !7882, !llvm.loop !7933

while.end41:                                      ; preds = %while.cond
  br label %while.cond42, !dbg !7935

while.cond42:                                     ; preds = %while.body45, %while.end41
  %27 = load i32, i32* %i, align 4, !dbg !7936
  %28 = load i32, i32* %nn.addr, align 4, !dbg !7937
  %cmp43 = icmp slt i32 %27, %28, !dbg !7938
  br i1 %cmp43, label %while.body45, label %while.end49, !dbg !7935

while.body45:                                     ; preds = %while.cond42
  %29 = load i32, i32* %i, align 4, !dbg !7939
  %inc46 = add nsw i32 %29, 1, !dbg !7939
  store i32 %inc46, i32* %i, align 4, !dbg !7939
  %idxprom47 = sext i32 %29 to i64, !dbg !7940
  %arrayidx48 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom47, !dbg !7940, !ctir !405
  store i8 0, i8* %arrayidx48, align 1, !dbg !7941
  br label %while.cond42, !dbg !7935, !llvm.loop !7942

while.end49:                                      ; preds = %while.cond42
  %30 = load i32, i32* %nn.addr, align 4, !dbg !7944
  call void @make_table(i32 %30, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @pt_len, i64 0, i64 0), i32 8, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @pt_table, i64 0, i64 0)), !dbg !7945
  br label %if.end50

if.end50:                                         ; preds = %while.end49, %for.end10
  ret void, !dbg !7946
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @read_c_len() #0 !dbg !7947 {
entry:
  %i = alloca i32, align 4, !ctir !12
  %c = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  %mask = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7948, metadata !DIExpression()), !dbg !7949
  call void @llvm.dbg.declare(metadata i32* %c, metadata !7950, metadata !DIExpression()), !dbg !7951
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7952, metadata !DIExpression()), !dbg !7953
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !7954, metadata !DIExpression()), !dbg !7955
  %call = call i32 @getbits(i32 9), !dbg !7956
  store i32 %call, i32* %n, align 4, !dbg !7957
  %0 = load i32, i32* %n, align 4, !dbg !7958
  %cmp = icmp eq i32 %0, 0, !dbg !7960
  br i1 %cmp, label %if.then, label %if.else, !dbg !7961

if.then:                                          ; preds = %entry
  %call1 = call i32 @getbits(i32 9), !dbg !7962
  store i32 %call1, i32* %c, align 4, !dbg !7964
  store i32 0, i32* %i, align 4, !dbg !7965
  br label %for.cond, !dbg !7967

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !7968
  %cmp2 = icmp slt i32 %1, 510, !dbg !7970
  br i1 %cmp2, label %for.body, label %for.end, !dbg !7971

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !7972
  %idxprom = sext i32 %2 to i64, !dbg !7973
  %arrayidx = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom, !dbg !7973, !ctir !283
  store i8 0, i8* %arrayidx, align 1, !dbg !7974
  br label %for.inc, !dbg !7973

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !7975
  %inc = add nsw i32 %3, 1, !dbg !7975
  store i32 %inc, i32* %i, align 4, !dbg !7975
  br label %for.cond, !dbg !7976, !llvm.loop !7977

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !7979
  br label %for.cond3, !dbg !7981

for.cond3:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4, !dbg !7982
  %cmp4 = icmp slt i32 %4, 4096, !dbg !7984
  br i1 %cmp4, label %for.body5, label %for.end10, !dbg !7985

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %c, align 4, !dbg !7986
  %conv = trunc i32 %5 to i16, !dbg !7986
  %6 = load i32, i32* %i, align 4, !dbg !7987
  %idxprom6 = sext i32 %6 to i64, !dbg !7988
  %arrayidx7 = getelementptr inbounds [32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 %idxprom6, !dbg !7988, !ctir !272
  store i16 %conv, i16* %arrayidx7, align 2, !dbg !7989
  br label %for.inc8, !dbg !7988

for.inc8:                                         ; preds = %for.body5
  %7 = load i32, i32* %i, align 4, !dbg !7990
  %inc9 = add nsw i32 %7, 1, !dbg !7990
  store i32 %inc9, i32* %i, align 4, !dbg !7990
  br label %for.cond3, !dbg !7991, !llvm.loop !7992

for.end10:                                        ; preds = %for.cond3
  br label %if.end74, !dbg !7994

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7995
  br label %while.cond, !dbg !7997

while.cond:                                       ; preds = %if.end64, %if.else
  %8 = load i32, i32* %i, align 4, !dbg !7998
  %9 = load i32, i32* %n, align 4, !dbg !7999
  %cmp11 = icmp slt i32 %8, %9, !dbg !8000
  br i1 %cmp11, label %while.body, label %while.end65, !dbg !7997

while.body:                                       ; preds = %while.cond
  %10 = load i16, i16* @io_bitbuf, align 2, !dbg !8001
  %conv13 = zext i16 %10 to i32, !dbg !8001
  %shr = ashr i32 %conv13, 8, !dbg !8003
  %idxprom14 = sext i32 %shr to i64, !dbg !8004
  %arrayidx15 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %idxprom14, !dbg !8004, !ctir !407
  %11 = load i16, i16* %arrayidx15, align 2, !dbg !8004
  %conv16 = zext i16 %11 to i32, !dbg !8004
  store i32 %conv16, i32* %c, align 4, !dbg !8005
  %12 = load i32, i32* %c, align 4, !dbg !8006
  %cmp17 = icmp sge i32 %12, 19, !dbg !8008
  br i1 %cmp17, label %if.then19, label %if.end32, !dbg !8009

if.then19:                                        ; preds = %while.body
  store i32 128, i32* %mask, align 4, !dbg !8010
  br label %do.body, !dbg !8012

do.body:                                          ; preds = %do.cond, %if.then19
  %13 = load i16, i16* @io_bitbuf, align 2, !dbg !8013
  %conv20 = zext i16 %13 to i32, !dbg !8013
  %14 = load i32, i32* %mask, align 4, !dbg !8016
  %and = and i32 %conv20, %14, !dbg !8017
  %tobool = icmp ne i32 %and, 0, !dbg !8017
  br i1 %tobool, label %if.then21, label %if.else25, !dbg !8018

if.then21:                                        ; preds = %do.body
  %15 = load i32, i32* %c, align 4, !dbg !8019
  %idxprom22 = sext i32 %15 to i64, !dbg !8020
  %arrayidx23 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom22, !dbg !8020, !ctir !166
  %16 = load i16, i16* %arrayidx23, align 2, !dbg !8020
  %conv24 = zext i16 %16 to i32, !dbg !8020
  store i32 %conv24, i32* %c, align 4, !dbg !8021
  br label %if.end, !dbg !8022

if.else25:                                        ; preds = %do.body
  %17 = load i32, i32* %c, align 4, !dbg !8023
  %idxprom26 = sext i32 %17 to i64, !dbg !8024
  %arrayidx27 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %idxprom26, !dbg !8024, !ctir !282
  %18 = load i16, i16* %arrayidx27, align 2, !dbg !8024
  %conv28 = zext i16 %18 to i32, !dbg !8024
  store i32 %conv28, i32* %c, align 4, !dbg !8025
  br label %if.end

if.end:                                           ; preds = %if.else25, %if.then21
  %19 = load i32, i32* %mask, align 4, !dbg !8026
  %shr29 = lshr i32 %19, 1, !dbg !8026
  store i32 %shr29, i32* %mask, align 4, !dbg !8026
  br label %do.cond, !dbg !8027

do.cond:                                          ; preds = %if.end
  %20 = load i32, i32* %c, align 4, !dbg !8028
  %cmp30 = icmp sge i32 %20, 19, !dbg !8029
  br i1 %cmp30, label %do.body, label %do.end, !dbg !8027, !llvm.loop !8030

do.end:                                           ; preds = %do.cond
  br label %if.end32, !dbg !8032

if.end32:                                         ; preds = %do.end, %while.body
  %21 = load i32, i32* %c, align 4, !dbg !8033
  %idxprom33 = sext i32 %21 to i64, !dbg !8034
  %arrayidx34 = getelementptr inbounds [19 x i8], [19 x i8]* @pt_len, i64 0, i64 %idxprom33, !dbg !8034, !ctir !405
  %22 = load i8, i8* %arrayidx34, align 1, !dbg !8034
  %conv35 = zext i8 %22 to i32, !dbg !8035
  call void @fillbuf(i32 %conv35), !dbg !8036
  %23 = load i32, i32* %c, align 4, !dbg !8037
  %cmp36 = icmp sle i32 %23, 2, !dbg !8039
  br i1 %cmp36, label %if.then38, label %if.else59, !dbg !8040

if.then38:                                        ; preds = %if.end32
  %24 = load i32, i32* %c, align 4, !dbg !8041
  %cmp39 = icmp eq i32 %24, 0, !dbg !8044
  br i1 %cmp39, label %if.then41, label %if.else42, !dbg !8045

if.then41:                                        ; preds = %if.then38
  store i32 1, i32* %c, align 4, !dbg !8046
  br label %if.end51, !dbg !8047

if.else42:                                        ; preds = %if.then38
  %25 = load i32, i32* %c, align 4, !dbg !8048
  %cmp43 = icmp eq i32 %25, 1, !dbg !8050
  br i1 %cmp43, label %if.then45, label %if.else47, !dbg !8051

if.then45:                                        ; preds = %if.else42
  %call46 = call i32 @getbits(i32 4), !dbg !8052
  %add = add i32 %call46, 3, !dbg !8053
  store i32 %add, i32* %c, align 4, !dbg !8054
  br label %if.end50, !dbg !8055

if.else47:                                        ; preds = %if.else42
  %call48 = call i32 @getbits(i32 9), !dbg !8056
  %add49 = add i32 %call48, 20, !dbg !8057
  store i32 %add49, i32* %c, align 4, !dbg !8058
  br label %if.end50

if.end50:                                         ; preds = %if.else47, %if.then45
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then41
  br label %while.cond52, !dbg !8059

while.cond52:                                     ; preds = %while.body55, %if.end51
  %26 = load i32, i32* %c, align 4, !dbg !8060
  %dec = add nsw i32 %26, -1, !dbg !8060
  store i32 %dec, i32* %c, align 4, !dbg !8060
  %cmp53 = icmp sge i32 %dec, 0, !dbg !8061
  br i1 %cmp53, label %while.body55, label %while.end, !dbg !8059

while.body55:                                     ; preds = %while.cond52
  %27 = load i32, i32* %i, align 4, !dbg !8062
  %inc56 = add nsw i32 %27, 1, !dbg !8062
  store i32 %inc56, i32* %i, align 4, !dbg !8062
  %idxprom57 = sext i32 %27 to i64, !dbg !8063
  %arrayidx58 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom57, !dbg !8063, !ctir !283
  store i8 0, i8* %arrayidx58, align 1, !dbg !8064
  br label %while.cond52, !dbg !8059, !llvm.loop !8065

while.end:                                        ; preds = %while.cond52
  br label %if.end64, !dbg !8067

if.else59:                                        ; preds = %if.end32
  %28 = load i32, i32* %c, align 4, !dbg !8068
  %sub = sub nsw i32 %28, 2, !dbg !8069
  %conv60 = trunc i32 %sub to i8, !dbg !8068
  %29 = load i32, i32* %i, align 4, !dbg !8070
  %inc61 = add nsw i32 %29, 1, !dbg !8070
  store i32 %inc61, i32* %i, align 4, !dbg !8070
  %idxprom62 = sext i32 %29 to i64, !dbg !8071
  %arrayidx63 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom62, !dbg !8071, !ctir !283
  store i8 %conv60, i8* %arrayidx63, align 1, !dbg !8072
  br label %if.end64

if.end64:                                         ; preds = %if.else59, %while.end
  br label %while.cond, !dbg !7997, !llvm.loop !8073

while.end65:                                      ; preds = %while.cond
  br label %while.cond66, !dbg !8075

while.cond66:                                     ; preds = %while.body69, %while.end65
  %30 = load i32, i32* %i, align 4, !dbg !8076
  %cmp67 = icmp slt i32 %30, 510, !dbg !8077
  br i1 %cmp67, label %while.body69, label %while.end73, !dbg !8075

while.body69:                                     ; preds = %while.cond66
  %31 = load i32, i32* %i, align 4, !dbg !8078
  %inc70 = add nsw i32 %31, 1, !dbg !8078
  store i32 %inc70, i32* %i, align 4, !dbg !8078
  %idxprom71 = sext i32 %31 to i64, !dbg !8079
  %arrayidx72 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom71, !dbg !8079, !ctir !283
  store i8 0, i8* %arrayidx72, align 1, !dbg !8080
  br label %while.cond66, !dbg !8075, !llvm.loop !8081

while.end73:                                      ; preds = %while.cond66
  call void @make_table(i32 510, i8* getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), i32 12, i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 0)), !dbg !8083
  br label %if.end74

if.end74:                                         ; preds = %while.end73, %for.end10
  ret void, !dbg !8084
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @make_table(i32 %nchar, i8* %bitlen, i32 %tablebits, i16* %table) #0 !dbg !8085 {
entry:
  %nchar.addr = alloca i32, align 4
  %bitlen.addr = alloca i8*, align 8
  %tablebits.addr = alloca i32, align 4
  %table.addr = alloca i16*, align 8
  %count = alloca [17 x i16], align 16, !ctir !220
  %weight = alloca [17 x i16], align 16, !ctir !220
  %start = alloca [18 x i16], align 16, !ctir !408
  %p = alloca i16*, align 8, !ctir !166
  %i = alloca i32, align 4, !ctir !6
  %k = alloca i32, align 4, !ctir !6
  %len = alloca i32, align 4, !ctir !6
  %ch = alloca i32, align 4, !ctir !6
  %jutbits = alloca i32, align 4, !ctir !6
  %avail = alloca i32, align 4, !ctir !6
  %nextcode = alloca i32, align 4, !ctir !6
  %mask = alloca i32, align 4, !ctir !6
  store i32 %nchar, i32* %nchar.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nchar.addr, metadata !8088, metadata !DIExpression()), !dbg !8089
  store i8* %bitlen, i8** %bitlen.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bitlen.addr, metadata !8090, metadata !DIExpression()), !dbg !8091
  store i32 %tablebits, i32* %tablebits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tablebits.addr, metadata !8092, metadata !DIExpression()), !dbg !8093
  store i16* %table, i16** %table.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %table.addr, metadata !8094, metadata !DIExpression()), !dbg !8095
  call void @llvm.dbg.declare(metadata [17 x i16]* %count, metadata !8096, metadata !DIExpression()), !dbg !8097
  call void @llvm.dbg.declare(metadata [17 x i16]* %weight, metadata !8098, metadata !DIExpression()), !dbg !8099
  call void @llvm.dbg.declare(metadata [18 x i16]* %start, metadata !8100, metadata !DIExpression()), !dbg !8101
  call void @llvm.dbg.declare(metadata i16** %p, metadata !8102, metadata !DIExpression()), !dbg !8103
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8104, metadata !DIExpression()), !dbg !8105
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8106, metadata !DIExpression()), !dbg !8107
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8108, metadata !DIExpression()), !dbg !8109
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !8110, metadata !DIExpression()), !dbg !8111
  call void @llvm.dbg.declare(metadata i32* %jutbits, metadata !8112, metadata !DIExpression()), !dbg !8113
  call void @llvm.dbg.declare(metadata i32* %avail, metadata !8114, metadata !DIExpression()), !dbg !8115
  call void @llvm.dbg.declare(metadata i32* %nextcode, metadata !8116, metadata !DIExpression()), !dbg !8117
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !8118, metadata !DIExpression()), !dbg !8119
  store i32 1, i32* %i, align 4, !dbg !8120
  br label %for.cond, !dbg !8122

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8123
  %cmp = icmp ule i32 %0, 16, !dbg !8125
  br i1 %cmp, label %for.body, label %for.end, !dbg !8126

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !8127
  %idxprom = zext i32 %1 to i64, !dbg !8128
  %arrayidx = getelementptr inbounds [17 x i16], [17 x i16]* %count, i64 0, i64 %idxprom, !dbg !8128, !ctir !220
  store i16 0, i16* %arrayidx, align 2, !dbg !8129
  br label %for.inc, !dbg !8128

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !8130
  %inc = add i32 %2, 1, !dbg !8130
  store i32 %inc, i32* %i, align 4, !dbg !8130
  br label %for.cond, !dbg !8131, !llvm.loop !8132

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !8134
  br label %for.cond1, !dbg !8136

for.cond1:                                        ; preds = %for.inc9, %for.end
  %3 = load i32, i32* %i, align 4, !dbg !8137
  %4 = load i32, i32* %nchar.addr, align 4, !dbg !8139
  %cmp2 = icmp ult i32 %3, %4, !dbg !8140
  br i1 %cmp2, label %for.body3, label %for.end11, !dbg !8141

for.body3:                                        ; preds = %for.cond1
  %5 = load i8*, i8** %bitlen.addr, align 8, !dbg !8142
  %6 = load i32, i32* %i, align 4, !dbg !8143
  %idxprom4 = zext i32 %6 to i64, !dbg !8142
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 %idxprom4, !dbg !8142, !ctir !85
  %7 = load i8, i8* %arrayidx5, align 1, !dbg !8142
  %idxprom6 = zext i8 %7 to i64, !dbg !8144
  %arrayidx7 = getelementptr inbounds [17 x i16], [17 x i16]* %count, i64 0, i64 %idxprom6, !dbg !8144, !ctir !220
  %8 = load i16, i16* %arrayidx7, align 2, !dbg !8145
  %inc8 = add i16 %8, 1, !dbg !8145
  store i16 %inc8, i16* %arrayidx7, align 2, !dbg !8145
  br label %for.inc9, !dbg !8144

for.inc9:                                         ; preds = %for.body3
  %9 = load i32, i32* %i, align 4, !dbg !8146
  %inc10 = add i32 %9, 1, !dbg !8146
  store i32 %inc10, i32* %i, align 4, !dbg !8146
  br label %for.cond1, !dbg !8147, !llvm.loop !8148

for.end11:                                        ; preds = %for.cond1
  %arrayidx12 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 1, !dbg !8150, !ctir !408
  store i16 0, i16* %arrayidx12, align 2, !dbg !8151
  store i32 1, i32* %i, align 4, !dbg !8152
  br label %for.cond13, !dbg !8154

for.cond13:                                       ; preds = %for.inc25, %for.end11
  %10 = load i32, i32* %i, align 4, !dbg !8155
  %cmp14 = icmp ule i32 %10, 16, !dbg !8157
  br i1 %cmp14, label %for.body15, label %for.end27, !dbg !8158

for.body15:                                       ; preds = %for.cond13
  %11 = load i32, i32* %i, align 4, !dbg !8159
  %idxprom16 = zext i32 %11 to i64, !dbg !8160
  %arrayidx17 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom16, !dbg !8160, !ctir !408
  %12 = load i16, i16* %arrayidx17, align 2, !dbg !8160
  %conv = zext i16 %12 to i32, !dbg !8160
  %13 = load i32, i32* %i, align 4, !dbg !8161
  %idxprom18 = zext i32 %13 to i64, !dbg !8162
  %arrayidx19 = getelementptr inbounds [17 x i16], [17 x i16]* %count, i64 0, i64 %idxprom18, !dbg !8162, !ctir !220
  %14 = load i16, i16* %arrayidx19, align 2, !dbg !8162
  %conv20 = zext i16 %14 to i32, !dbg !8162
  %15 = load i32, i32* %i, align 4, !dbg !8163
  %sub = sub i32 16, %15, !dbg !8164
  %shl = shl i32 %conv20, %sub, !dbg !8165
  %add = add nsw i32 %conv, %shl, !dbg !8166
  %conv21 = trunc i32 %add to i16, !dbg !8160
  %16 = load i32, i32* %i, align 4, !dbg !8167
  %add22 = add i32 %16, 1, !dbg !8168
  %idxprom23 = zext i32 %add22 to i64, !dbg !8169
  %arrayidx24 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom23, !dbg !8169, !ctir !408
  store i16 %conv21, i16* %arrayidx24, align 2, !dbg !8170
  br label %for.inc25, !dbg !8169

for.inc25:                                        ; preds = %for.body15
  %17 = load i32, i32* %i, align 4, !dbg !8171
  %inc26 = add i32 %17, 1, !dbg !8171
  store i32 %inc26, i32* %i, align 4, !dbg !8171
  br label %for.cond13, !dbg !8172, !llvm.loop !8173

for.end27:                                        ; preds = %for.cond13
  %arrayidx28 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 17, !dbg !8175, !ctir !408
  %18 = load i16, i16* %arrayidx28, align 2, !dbg !8175
  %conv29 = zext i16 %18 to i32, !dbg !8175
  %and = and i32 %conv29, 65535, !dbg !8177
  %cmp30 = icmp ne i32 %and, 0, !dbg !8178
  br i1 %cmp30, label %if.then, label %if.end, !dbg !8179

if.then:                                          ; preds = %for.end27
  call void @error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i64 0, i64 0)), !dbg !8180
  br label %if.end, !dbg !8180

if.end:                                           ; preds = %if.then, %for.end27
  %19 = load i32, i32* %tablebits.addr, align 4, !dbg !8181
  %sub32 = sub nsw i32 16, %19, !dbg !8182
  store i32 %sub32, i32* %jutbits, align 4, !dbg !8183
  store i32 1, i32* %i, align 4, !dbg !8184
  br label %for.cond33, !dbg !8186

for.cond33:                                       ; preds = %for.inc46, %if.end
  %20 = load i32, i32* %i, align 4, !dbg !8187
  %21 = load i32, i32* %tablebits.addr, align 4, !dbg !8189
  %cmp34 = icmp ule i32 %20, %21, !dbg !8190
  br i1 %cmp34, label %for.body36, label %for.end48, !dbg !8191

for.body36:                                       ; preds = %for.cond33
  %22 = load i32, i32* %jutbits, align 4, !dbg !8192
  %23 = load i32, i32* %i, align 4, !dbg !8194
  %idxprom37 = zext i32 %23 to i64, !dbg !8195
  %arrayidx38 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom37, !dbg !8195, !ctir !408
  %24 = load i16, i16* %arrayidx38, align 2, !dbg !8196
  %conv39 = zext i16 %24 to i32, !dbg !8196
  %shr = ashr i32 %conv39, %22, !dbg !8196
  %conv40 = trunc i32 %shr to i16, !dbg !8196
  store i16 %conv40, i16* %arrayidx38, align 2, !dbg !8196
  %25 = load i32, i32* %tablebits.addr, align 4, !dbg !8197
  %26 = load i32, i32* %i, align 4, !dbg !8198
  %sub41 = sub i32 %25, %26, !dbg !8199
  %shl42 = shl i32 1, %sub41, !dbg !8200
  %conv43 = trunc i32 %shl42 to i16, !dbg !8201
  %27 = load i32, i32* %i, align 4, !dbg !8202
  %idxprom44 = zext i32 %27 to i64, !dbg !8203
  %arrayidx45 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i64 0, i64 %idxprom44, !dbg !8203, !ctir !220
  store i16 %conv43, i16* %arrayidx45, align 2, !dbg !8204
  br label %for.inc46, !dbg !8205

for.inc46:                                        ; preds = %for.body36
  %28 = load i32, i32* %i, align 4, !dbg !8206
  %inc47 = add i32 %28, 1, !dbg !8206
  store i32 %inc47, i32* %i, align 4, !dbg !8206
  br label %for.cond33, !dbg !8207, !llvm.loop !8208

for.end48:                                        ; preds = %for.cond33
  br label %while.cond, !dbg !8210

while.cond:                                       ; preds = %while.body, %for.end48
  %29 = load i32, i32* %i, align 4, !dbg !8211
  %cmp49 = icmp ule i32 %29, 16, !dbg !8212
  br i1 %cmp49, label %while.body, label %while.end, !dbg !8210

while.body:                                       ; preds = %while.cond
  %30 = load i32, i32* %i, align 4, !dbg !8213
  %sub51 = sub i32 16, %30, !dbg !8215
  %shl52 = shl i32 1, %sub51, !dbg !8216
  %conv53 = trunc i32 %shl52 to i16, !dbg !8217
  %31 = load i32, i32* %i, align 4, !dbg !8218
  %idxprom54 = zext i32 %31 to i64, !dbg !8219
  %arrayidx55 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i64 0, i64 %idxprom54, !dbg !8219, !ctir !220
  store i16 %conv53, i16* %arrayidx55, align 2, !dbg !8220
  %32 = load i32, i32* %i, align 4, !dbg !8221
  %inc56 = add i32 %32, 1, !dbg !8221
  store i32 %inc56, i32* %i, align 4, !dbg !8221
  br label %while.cond, !dbg !8210, !llvm.loop !8222

while.end:                                        ; preds = %while.cond
  %33 = load i32, i32* %tablebits.addr, align 4, !dbg !8224
  %add57 = add nsw i32 %33, 1, !dbg !8225
  %idxprom58 = sext i32 %add57 to i64, !dbg !8226
  %arrayidx59 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom58, !dbg !8226, !ctir !408
  %34 = load i16, i16* %arrayidx59, align 2, !dbg !8226
  %conv60 = zext i16 %34 to i32, !dbg !8226
  %35 = load i32, i32* %jutbits, align 4, !dbg !8227
  %shr61 = ashr i32 %conv60, %35, !dbg !8228
  store i32 %shr61, i32* %i, align 4, !dbg !8229
  %36 = load i32, i32* %i, align 4, !dbg !8230
  %cmp62 = icmp ne i32 %36, 0, !dbg !8232
  br i1 %cmp62, label %if.then64, label %if.end74, !dbg !8233

if.then64:                                        ; preds = %while.end
  %37 = load i32, i32* %tablebits.addr, align 4, !dbg !8234
  %shl65 = shl i32 1, %37, !dbg !8236
  store i32 %shl65, i32* %k, align 4, !dbg !8237
  br label %while.cond66, !dbg !8238

while.cond66:                                     ; preds = %while.body69, %if.then64
  %38 = load i32, i32* %i, align 4, !dbg !8239
  %39 = load i32, i32* %k, align 4, !dbg !8240
  %cmp67 = icmp ne i32 %38, %39, !dbg !8241
  br i1 %cmp67, label %while.body69, label %while.end73, !dbg !8238

while.body69:                                     ; preds = %while.cond66
  %40 = load i16*, i16** %table.addr, align 8, !dbg !8242
  %41 = load i32, i32* %i, align 4, !dbg !8243
  %inc70 = add i32 %41, 1, !dbg !8243
  store i32 %inc70, i32* %i, align 4, !dbg !8243
  %idxprom71 = zext i32 %41 to i64, !dbg !8242
  %arrayidx72 = getelementptr inbounds i16, i16* %40, i64 %idxprom71, !dbg !8242, !ctir !166
  store i16 0, i16* %arrayidx72, align 2, !dbg !8244
  br label %while.cond66, !dbg !8238, !llvm.loop !8245

while.end73:                                      ; preds = %while.cond66
  br label %if.end74, !dbg !8247

if.end74:                                         ; preds = %while.end73, %while.end
  %42 = load i32, i32* %nchar.addr, align 4, !dbg !8248
  store i32 %42, i32* %avail, align 4, !dbg !8249
  %43 = load i32, i32* %tablebits.addr, align 4, !dbg !8250
  %sub75 = sub nsw i32 15, %43, !dbg !8251
  %shl76 = shl i32 1, %sub75, !dbg !8252
  store i32 %shl76, i32* %mask, align 4, !dbg !8253
  store i32 0, i32* %ch, align 4, !dbg !8254
  br label %for.cond77, !dbg !8256

for.cond77:                                       ; preds = %for.inc148, %if.end74
  %44 = load i32, i32* %ch, align 4, !dbg !8257
  %45 = load i32, i32* %nchar.addr, align 4, !dbg !8259
  %cmp78 = icmp ult i32 %44, %45, !dbg !8260
  br i1 %cmp78, label %for.body80, label %for.end150, !dbg !8261

for.body80:                                       ; preds = %for.cond77
  %46 = load i8*, i8** %bitlen.addr, align 8, !dbg !8262
  %47 = load i32, i32* %ch, align 4, !dbg !8265
  %idxprom81 = zext i32 %47 to i64, !dbg !8262
  %arrayidx82 = getelementptr inbounds i8, i8* %46, i64 %idxprom81, !dbg !8262, !ctir !85
  %48 = load i8, i8* %arrayidx82, align 1, !dbg !8262
  %conv83 = zext i8 %48 to i32, !dbg !8262
  store i32 %conv83, i32* %len, align 4, !dbg !8266
  %cmp84 = icmp eq i32 %conv83, 0, !dbg !8267
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !8268

if.then86:                                        ; preds = %for.body80
  br label %for.inc148, !dbg !8269

if.end87:                                         ; preds = %for.body80
  %49 = load i32, i32* %len, align 4, !dbg !8270
  %idxprom88 = zext i32 %49 to i64, !dbg !8271
  %arrayidx89 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom88, !dbg !8271, !ctir !408
  %50 = load i16, i16* %arrayidx89, align 2, !dbg !8271
  %conv90 = zext i16 %50 to i32, !dbg !8271
  %51 = load i32, i32* %len, align 4, !dbg !8272
  %idxprom91 = zext i32 %51 to i64, !dbg !8273
  %arrayidx92 = getelementptr inbounds [17 x i16], [17 x i16]* %weight, i64 0, i64 %idxprom91, !dbg !8273, !ctir !220
  %52 = load i16, i16* %arrayidx92, align 2, !dbg !8273
  %conv93 = zext i16 %52 to i32, !dbg !8273
  %add94 = add nsw i32 %conv90, %conv93, !dbg !8274
  store i32 %add94, i32* %nextcode, align 4, !dbg !8275
  %53 = load i32, i32* %len, align 4, !dbg !8276
  %54 = load i32, i32* %tablebits.addr, align 4, !dbg !8278
  %cmp95 = icmp ule i32 %53, %54, !dbg !8279
  br i1 %cmp95, label %if.then97, label %if.else, !dbg !8280

if.then97:                                        ; preds = %if.end87
  %55 = load i32, i32* %len, align 4, !dbg !8281
  %idxprom98 = zext i32 %55 to i64, !dbg !8284
  %arrayidx99 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom98, !dbg !8284, !ctir !408
  %56 = load i16, i16* %arrayidx99, align 2, !dbg !8284
  %conv100 = zext i16 %56 to i32, !dbg !8284
  store i32 %conv100, i32* %i, align 4, !dbg !8285
  br label %for.cond101, !dbg !8286

for.cond101:                                      ; preds = %for.inc108, %if.then97
  %57 = load i32, i32* %i, align 4, !dbg !8287
  %58 = load i32, i32* %nextcode, align 4, !dbg !8289
  %cmp102 = icmp ult i32 %57, %58, !dbg !8290
  br i1 %cmp102, label %for.body104, label %for.end110, !dbg !8291

for.body104:                                      ; preds = %for.cond101
  %59 = load i32, i32* %ch, align 4, !dbg !8292
  %conv105 = trunc i32 %59 to i16, !dbg !8292
  %60 = load i16*, i16** %table.addr, align 8, !dbg !8293
  %61 = load i32, i32* %i, align 4, !dbg !8294
  %idxprom106 = zext i32 %61 to i64, !dbg !8293
  %arrayidx107 = getelementptr inbounds i16, i16* %60, i64 %idxprom106, !dbg !8293, !ctir !166
  store i16 %conv105, i16* %arrayidx107, align 2, !dbg !8295
  br label %for.inc108, !dbg !8293

for.inc108:                                       ; preds = %for.body104
  %62 = load i32, i32* %i, align 4, !dbg !8296
  %inc109 = add i32 %62, 1, !dbg !8296
  store i32 %inc109, i32* %i, align 4, !dbg !8296
  br label %for.cond101, !dbg !8297, !llvm.loop !8298

for.end110:                                       ; preds = %for.cond101
  br label %if.end144, !dbg !8300

if.else:                                          ; preds = %if.end87
  %63 = load i32, i32* %len, align 4, !dbg !8301
  %idxprom111 = zext i32 %63 to i64, !dbg !8303
  %arrayidx112 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom111, !dbg !8303, !ctir !408
  %64 = load i16, i16* %arrayidx112, align 2, !dbg !8303
  %conv113 = zext i16 %64 to i32, !dbg !8303
  store i32 %conv113, i32* %k, align 4, !dbg !8304
  %65 = load i16*, i16** %table.addr, align 8, !dbg !8305
  %66 = load i32, i32* %k, align 4, !dbg !8306
  %67 = load i32, i32* %jutbits, align 4, !dbg !8307
  %shr114 = lshr i32 %66, %67, !dbg !8308
  %idxprom115 = zext i32 %shr114 to i64, !dbg !8305
  %arrayidx116 = getelementptr inbounds i16, i16* %65, i64 %idxprom115, !dbg !8305, !ctir !166
  store i16* %arrayidx116, i16** %p, align 8, !dbg !8309
  %68 = load i32, i32* %len, align 4, !dbg !8310
  %69 = load i32, i32* %tablebits.addr, align 4, !dbg !8311
  %sub117 = sub i32 %68, %69, !dbg !8312
  store i32 %sub117, i32* %i, align 4, !dbg !8313
  br label %while.cond118, !dbg !8314

while.cond118:                                    ; preds = %if.end140, %if.else
  %70 = load i32, i32* %i, align 4, !dbg !8315
  %cmp119 = icmp ne i32 %70, 0, !dbg !8316
  br i1 %cmp119, label %while.body121, label %while.end142, !dbg !8314

while.body121:                                    ; preds = %while.cond118
  %71 = load i16*, i16** %p, align 8, !dbg !8317
  %72 = load i16, i16* %71, align 2, !dbg !8320, !ctir !15
  %conv122 = zext i16 %72 to i32, !dbg !8320
  %cmp123 = icmp eq i32 %conv122, 0, !dbg !8321
  br i1 %cmp123, label %if.then125, label %if.end132, !dbg !8322

if.then125:                                       ; preds = %while.body121
  %73 = load i32, i32* %avail, align 4, !dbg !8323
  %idxprom126 = zext i32 %73 to i64, !dbg !8325
  %arrayidx127 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %idxprom126, !dbg !8325, !ctir !282
  store i16 0, i16* %arrayidx127, align 2, !dbg !8326
  %74 = load i32, i32* %avail, align 4, !dbg !8327
  %idxprom128 = zext i32 %74 to i64, !dbg !8328
  %arrayidx129 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom128, !dbg !8328, !ctir !166
  store i16 0, i16* %arrayidx129, align 2, !dbg !8329
  %75 = load i32, i32* %avail, align 4, !dbg !8330
  %inc130 = add i32 %75, 1, !dbg !8330
  store i32 %inc130, i32* %avail, align 4, !dbg !8330
  %conv131 = trunc i32 %75 to i16, !dbg !8331
  %76 = load i16*, i16** %p, align 8, !dbg !8332
  store i16 %conv131, i16* %76, align 2, !dbg !8333, !ctir !15
  br label %if.end132, !dbg !8334

if.end132:                                        ; preds = %if.then125, %while.body121
  %77 = load i32, i32* %k, align 4, !dbg !8335
  %78 = load i32, i32* %mask, align 4, !dbg !8337
  %and133 = and i32 %77, %78, !dbg !8338
  %tobool = icmp ne i32 %and133, 0, !dbg !8338
  br i1 %tobool, label %if.then134, label %if.else137, !dbg !8339

if.then134:                                       ; preds = %if.end132
  %79 = load i16*, i16** %p, align 8, !dbg !8340
  %80 = load i16, i16* %79, align 2, !dbg !8341, !ctir !15
  %idxprom135 = zext i16 %80 to i64, !dbg !8342
  %arrayidx136 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %idxprom135, !dbg !8342, !ctir !166
  store i16* %arrayidx136, i16** %p, align 8, !dbg !8343
  br label %if.end140, !dbg !8344

if.else137:                                       ; preds = %if.end132
  %81 = load i16*, i16** %p, align 8, !dbg !8345
  %82 = load i16, i16* %81, align 2, !dbg !8346, !ctir !15
  %idxprom138 = zext i16 %82 to i64, !dbg !8347
  %arrayidx139 = getelementptr inbounds [65536 x i16], [65536 x i16]* @prev, i64 0, i64 %idxprom138, !dbg !8347, !ctir !282
  store i16* %arrayidx139, i16** %p, align 8, !dbg !8348
  br label %if.end140

if.end140:                                        ; preds = %if.else137, %if.then134
  %83 = load i32, i32* %k, align 4, !dbg !8349
  %shl141 = shl i32 %83, 1, !dbg !8349
  store i32 %shl141, i32* %k, align 4, !dbg !8349
  %84 = load i32, i32* %i, align 4, !dbg !8350
  %dec = add i32 %84, -1, !dbg !8350
  store i32 %dec, i32* %i, align 4, !dbg !8350
  br label %while.cond118, !dbg !8314, !llvm.loop !8351

while.end142:                                     ; preds = %while.cond118
  %85 = load i32, i32* %ch, align 4, !dbg !8353
  %conv143 = trunc i32 %85 to i16, !dbg !8353
  %86 = load i16*, i16** %p, align 8, !dbg !8354
  store i16 %conv143, i16* %86, align 2, !dbg !8355, !ctir !15
  br label %if.end144

if.end144:                                        ; preds = %while.end142, %for.end110
  %87 = load i32, i32* %nextcode, align 4, !dbg !8356
  %conv145 = trunc i32 %87 to i16, !dbg !8356
  %88 = load i32, i32* %len, align 4, !dbg !8357
  %idxprom146 = zext i32 %88 to i64, !dbg !8358
  %arrayidx147 = getelementptr inbounds [18 x i16], [18 x i16]* %start, i64 0, i64 %idxprom146, !dbg !8358, !ctir !408
  store i16 %conv145, i16* %arrayidx147, align 2, !dbg !8359
  br label %for.inc148, !dbg !8360

for.inc148:                                       ; preds = %if.end144, %if.then86
  %89 = load i32, i32* %ch, align 4, !dbg !8361
  %inc149 = add i32 %89, 1, !dbg !8361
  store i32 %inc149, i32* %ch, align 4, !dbg !8361
  br label %for.cond77, !dbg !8362, !llvm.loop !8363

for.end150:                                       ; preds = %for.cond77
  ret void, !dbg !8365
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @huf_decode_start() #0 !dbg !8366 {
entry:
  call void @init_getbits(), !dbg !8367
  store i32 0, i32* @blocksize, align 4, !dbg !8368
  ret void, !dbg !8369
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_getbits() #0 !dbg !8370 {
entry:
  store i16 0, i16* @io_bitbuf, align 2, !dbg !8371
  store i32 0, i32* @subbitbuf, align 4, !dbg !8372
  store i32 0, i32* @bitcount, align 4, !dbg !8373
  call void @fillbuf(i32 16), !dbg !8374
  ret void, !dbg !8375
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @read_tree() #0 !dbg !8376 {
entry:
  %len = alloca i32, align 4, !ctir !12
  %base = alloca i32, align 4, !ctir !12
  %n = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8377, metadata !DIExpression()), !dbg !8378
  call void @llvm.dbg.declare(metadata i32* %base, metadata !8379, metadata !DIExpression()), !dbg !8380
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8381, metadata !DIExpression()), !dbg !8382
  store i64 0, i64* @orig_len, align 8, !dbg !8383
  store i32 1, i32* %n, align 4, !dbg !8384
  br label %for.cond, !dbg !8386

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4, !dbg !8387
  %cmp = icmp sle i32 %0, 4, !dbg !8389
  br i1 %cmp, label %for.body, label %for.end, !dbg !8390

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* @orig_len, align 8, !dbg !8391
  %shl = shl i64 %1, 8, !dbg !8392
  %2 = load i32, i32* @inptr, align 4, !dbg !8393
  %3 = load i32, i32* @insize, align 4, !dbg !8393
  %cmp1 = icmp ult i32 %2, %3, !dbg !8393
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !8393

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* @inptr, align 4, !dbg !8393
  %inc = add i32 %4, 1, !dbg !8393
  store i32 %inc, i32* @inptr, align 4, !dbg !8393
  %idxprom = zext i32 %4 to i64, !dbg !8393
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !8393, !ctir !231
  %5 = load i8, i8* %arrayidx, align 1, !dbg !8393
  %conv = zext i8 %5 to i32, !dbg !8393
  br label %cond.end, !dbg !8393

cond.false:                                       ; preds = %for.body
  %call = call i32 @fill_inbuf(i32 0), !dbg !8393
  br label %cond.end, !dbg !8393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !8393
  %conv2 = sext i32 %cond to i64, !dbg !8394
  %or = or i64 %shl, %conv2, !dbg !8395
  store i64 %or, i64* @orig_len, align 8, !dbg !8396
  br label %for.inc, !dbg !8397

for.inc:                                          ; preds = %cond.end
  %6 = load i32, i32* %n, align 4, !dbg !8398
  %inc3 = add nsw i32 %6, 1, !dbg !8398
  store i32 %inc3, i32* %n, align 4, !dbg !8398
  br label %for.cond, !dbg !8399, !llvm.loop !8400

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @inptr, align 4, !dbg !8402
  %8 = load i32, i32* @insize, align 4, !dbg !8402
  %cmp4 = icmp ult i32 %7, %8, !dbg !8402
  br i1 %cmp4, label %cond.true6, label %cond.false11, !dbg !8402

cond.true6:                                       ; preds = %for.end
  %9 = load i32, i32* @inptr, align 4, !dbg !8402
  %inc7 = add i32 %9, 1, !dbg !8402
  store i32 %inc7, i32* @inptr, align 4, !dbg !8402
  %idxprom8 = zext i32 %9 to i64, !dbg !8402
  %arrayidx9 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom8, !dbg !8402, !ctir !231
  %10 = load i8, i8* %arrayidx9, align 1, !dbg !8402
  %conv10 = zext i8 %10 to i32, !dbg !8402
  br label %cond.end13, !dbg !8402

cond.false11:                                     ; preds = %for.end
  %call12 = call i32 @fill_inbuf(i32 0), !dbg !8402
  br label %cond.end13, !dbg !8402

cond.end13:                                       ; preds = %cond.false11, %cond.true6
  %cond14 = phi i32 [ %conv10, %cond.true6 ], [ %call12, %cond.false11 ], !dbg !8402
  store i32 %cond14, i32* @max_len, align 4, !dbg !8403
  %11 = load i32, i32* @max_len, align 4, !dbg !8404
  %cmp15 = icmp sgt i32 %11, 25, !dbg !8406
  br i1 %cmp15, label %if.then, label %if.end, !dbg !8407

if.then:                                          ; preds = %cond.end13
  call void @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.198, i64 0, i64 0)), !dbg !8408
  br label %if.end, !dbg !8410

if.end:                                           ; preds = %if.then, %cond.end13
  store i32 0, i32* %n, align 4, !dbg !8411
  store i32 1, i32* %len, align 4, !dbg !8412
  br label %for.cond17, !dbg !8414

for.cond17:                                       ; preds = %for.inc36, %if.end
  %12 = load i32, i32* %len, align 4, !dbg !8415
  %13 = load i32, i32* @max_len, align 4, !dbg !8417
  %cmp18 = icmp sle i32 %12, %13, !dbg !8418
  br i1 %cmp18, label %for.body20, label %for.end38, !dbg !8419

for.body20:                                       ; preds = %for.cond17
  %14 = load i32, i32* @inptr, align 4, !dbg !8420
  %15 = load i32, i32* @insize, align 4, !dbg !8420
  %cmp21 = icmp ult i32 %14, %15, !dbg !8420
  br i1 %cmp21, label %cond.true23, label %cond.false28, !dbg !8420

cond.true23:                                      ; preds = %for.body20
  %16 = load i32, i32* @inptr, align 4, !dbg !8420
  %inc24 = add i32 %16, 1, !dbg !8420
  store i32 %inc24, i32* @inptr, align 4, !dbg !8420
  %idxprom25 = zext i32 %16 to i64, !dbg !8420
  %arrayidx26 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom25, !dbg !8420, !ctir !231
  %17 = load i8, i8* %arrayidx26, align 1, !dbg !8420
  %conv27 = zext i8 %17 to i32, !dbg !8420
  br label %cond.end30, !dbg !8420

cond.false28:                                     ; preds = %for.body20
  %call29 = call i32 @fill_inbuf(i32 0), !dbg !8420
  br label %cond.end30, !dbg !8420

cond.end30:                                       ; preds = %cond.false28, %cond.true23
  %cond31 = phi i32 [ %conv27, %cond.true23 ], [ %call29, %cond.false28 ], !dbg !8420
  %18 = load i32, i32* %len, align 4, !dbg !8422
  %idxprom32 = sext i32 %18 to i64, !dbg !8423
  %arrayidx33 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom32, !dbg !8423, !ctir !286
  store i32 %cond31, i32* %arrayidx33, align 4, !dbg !8424
  %19 = load i32, i32* %len, align 4, !dbg !8425
  %idxprom34 = sext i32 %19 to i64, !dbg !8426
  %arrayidx35 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom34, !dbg !8426, !ctir !286
  %20 = load i32, i32* %arrayidx35, align 4, !dbg !8426
  %21 = load i32, i32* %n, align 4, !dbg !8427
  %add = add nsw i32 %21, %20, !dbg !8427
  store i32 %add, i32* %n, align 4, !dbg !8427
  br label %for.inc36, !dbg !8428

for.inc36:                                        ; preds = %cond.end30
  %22 = load i32, i32* %len, align 4, !dbg !8429
  %inc37 = add nsw i32 %22, 1, !dbg !8429
  store i32 %inc37, i32* %len, align 4, !dbg !8429
  br label %for.cond17, !dbg !8430, !llvm.loop !8431

for.end38:                                        ; preds = %for.cond17
  %23 = load i32, i32* %n, align 4, !dbg !8433
  %cmp39 = icmp sgt i32 %23, 256, !dbg !8435
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !8436

if.then41:                                        ; preds = %for.end38
  call void @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.199, i64 0, i64 0)), !dbg !8437
  br label %if.end42, !dbg !8439

if.end42:                                         ; preds = %if.then41, %for.end38
  %24 = load i32, i32* @max_len, align 4, !dbg !8440
  %idxprom43 = sext i32 %24 to i64, !dbg !8441
  %arrayidx44 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom43, !dbg !8441, !ctir !286
  %25 = load i32, i32* %arrayidx44, align 4, !dbg !8442
  %inc45 = add nsw i32 %25, 1, !dbg !8442
  store i32 %inc45, i32* %arrayidx44, align 4, !dbg !8442
  store i32 0, i32* %base, align 4, !dbg !8443
  store i32 1, i32* %len, align 4, !dbg !8444
  br label %for.cond46, !dbg !8446

for.cond46:                                       ; preds = %for.inc75, %if.end42
  %26 = load i32, i32* %len, align 4, !dbg !8447
  %27 = load i32, i32* @max_len, align 4, !dbg !8449
  %cmp47 = icmp sle i32 %26, %27, !dbg !8450
  br i1 %cmp47, label %for.body49, label %for.end77, !dbg !8451

for.body49:                                       ; preds = %for.cond46
  %28 = load i32, i32* %base, align 4, !dbg !8452
  %29 = load i32, i32* %len, align 4, !dbg !8454
  %idxprom50 = sext i32 %29 to i64, !dbg !8455
  %arrayidx51 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %idxprom50, !dbg !8455, !ctir !286
  store i32 %28, i32* %arrayidx51, align 4, !dbg !8456
  %30 = load i32, i32* %len, align 4, !dbg !8457
  %idxprom52 = sext i32 %30 to i64, !dbg !8459
  %arrayidx53 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom52, !dbg !8459, !ctir !286
  %31 = load i32, i32* %arrayidx53, align 4, !dbg !8459
  store i32 %31, i32* %n, align 4, !dbg !8460
  br label %for.cond54, !dbg !8461

for.cond54:                                       ; preds = %for.inc73, %for.body49
  %32 = load i32, i32* %n, align 4, !dbg !8462
  %cmp55 = icmp sgt i32 %32, 0, !dbg !8464
  br i1 %cmp55, label %for.body57, label %for.end74, !dbg !8465

for.body57:                                       ; preds = %for.cond54
  %33 = load i32, i32* @inptr, align 4, !dbg !8466
  %34 = load i32, i32* @insize, align 4, !dbg !8466
  %cmp58 = icmp ult i32 %33, %34, !dbg !8466
  br i1 %cmp58, label %cond.true60, label %cond.false65, !dbg !8466

cond.true60:                                      ; preds = %for.body57
  %35 = load i32, i32* @inptr, align 4, !dbg !8466
  %inc61 = add i32 %35, 1, !dbg !8466
  store i32 %inc61, i32* @inptr, align 4, !dbg !8466
  %idxprom62 = zext i32 %35 to i64, !dbg !8466
  %arrayidx63 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom62, !dbg !8466, !ctir !231
  %36 = load i8, i8* %arrayidx63, align 1, !dbg !8466
  %conv64 = zext i8 %36 to i32, !dbg !8466
  br label %cond.end67, !dbg !8466

cond.false65:                                     ; preds = %for.body57
  %call66 = call i32 @fill_inbuf(i32 0), !dbg !8466
  br label %cond.end67, !dbg !8466

cond.end67:                                       ; preds = %cond.false65, %cond.true60
  %cond68 = phi i32 [ %conv64, %cond.true60 ], [ %call66, %cond.false65 ], !dbg !8466
  %conv69 = trunc i32 %cond68 to i8, !dbg !8468
  %37 = load i32, i32* %base, align 4, !dbg !8469
  %inc70 = add nsw i32 %37, 1, !dbg !8469
  store i32 %inc70, i32* %base, align 4, !dbg !8469
  %idxprom71 = sext i32 %37 to i64, !dbg !8470
  %arrayidx72 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i64 0, i64 %idxprom71, !dbg !8470, !ctir !254
  store i8 %conv69, i8* %arrayidx72, align 1, !dbg !8471
  br label %for.inc73, !dbg !8472

for.inc73:                                        ; preds = %cond.end67
  %38 = load i32, i32* %n, align 4, !dbg !8473
  %dec = add nsw i32 %38, -1, !dbg !8473
  store i32 %dec, i32* %n, align 4, !dbg !8473
  br label %for.cond54, !dbg !8474, !llvm.loop !8475

for.end74:                                        ; preds = %for.cond54
  br label %for.inc75, !dbg !8477

for.inc75:                                        ; preds = %for.end74
  %39 = load i32, i32* %len, align 4, !dbg !8478
  %inc76 = add nsw i32 %39, 1, !dbg !8478
  store i32 %inc76, i32* %len, align 4, !dbg !8478
  br label %for.cond46, !dbg !8479, !llvm.loop !8480

for.end77:                                        ; preds = %for.cond46
  %40 = load i32, i32* @max_len, align 4, !dbg !8482
  %idxprom78 = sext i32 %40 to i64, !dbg !8483
  %arrayidx79 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom78, !dbg !8483, !ctir !286
  %41 = load i32, i32* %arrayidx79, align 4, !dbg !8484
  %inc80 = add nsw i32 %41, 1, !dbg !8484
  store i32 %inc80, i32* %arrayidx79, align 4, !dbg !8484
  ret void, !dbg !8485
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @build_tree() #0 !dbg !8486 {
entry:
  %nodes = alloca i32, align 4, !ctir !12
  %len = alloca i32, align 4, !ctir !12
  %prefixp = alloca i8*, align 8, !ctir !85
  %prefixes = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata i32* %nodes, metadata !8487, metadata !DIExpression()), !dbg !8488
  store i32 0, i32* %nodes, align 4, !dbg !8488
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8489, metadata !DIExpression()), !dbg !8490
  call void @llvm.dbg.declare(metadata i8** %prefixp, metadata !8491, metadata !DIExpression()), !dbg !8492
  %0 = load i32, i32* @max_len, align 4, !dbg !8493
  store i32 %0, i32* %len, align 4, !dbg !8495
  br label %for.cond, !dbg !8496

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %len, align 4, !dbg !8497
  %cmp = icmp sge i32 %1, 1, !dbg !8499
  br i1 %cmp, label %for.body, label %for.end, !dbg !8500

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %nodes, align 4, !dbg !8501
  %shr = ashr i32 %2, 1, !dbg !8501
  store i32 %shr, i32* %nodes, align 4, !dbg !8501
  %3 = load i32, i32* %nodes, align 4, !dbg !8503
  %4 = load i32, i32* %len, align 4, !dbg !8504
  %idxprom = sext i32 %4 to i64, !dbg !8505
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i64 0, i64 %idxprom, !dbg !8505, !ctir !286
  store i32 %3, i32* %arrayidx, align 4, !dbg !8506
  %5 = load i32, i32* %nodes, align 4, !dbg !8507
  %6 = load i32, i32* %len, align 4, !dbg !8508
  %idxprom1 = sext i32 %6 to i64, !dbg !8509
  %arrayidx2 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %idxprom1, !dbg !8509, !ctir !286
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !8510
  %sub = sub nsw i32 %7, %5, !dbg !8510
  store i32 %sub, i32* %arrayidx2, align 4, !dbg !8510
  %8 = load i32, i32* %len, align 4, !dbg !8511
  %idxprom3 = sext i32 %8 to i64, !dbg !8512
  %arrayidx4 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom3, !dbg !8512, !ctir !286
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !8512
  %10 = load i32, i32* %nodes, align 4, !dbg !8513
  %add = add nsw i32 %10, %9, !dbg !8513
  store i32 %add, i32* %nodes, align 4, !dbg !8513
  br label %for.inc, !dbg !8514

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %len, align 4, !dbg !8515
  %dec = add nsw i32 %11, -1, !dbg !8515
  store i32 %dec, i32* %len, align 4, !dbg !8515
  br label %for.cond, !dbg !8516, !llvm.loop !8517

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* @max_len, align 4, !dbg !8519
  %cmp5 = icmp sle i32 %12, 12, !dbg !8519
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !8519

cond.true:                                        ; preds = %for.end
  %13 = load i32, i32* @max_len, align 4, !dbg !8519
  br label %cond.end, !dbg !8519

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !8519

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ 12, %cond.false ], !dbg !8519
  store i32 %cond, i32* @peek_bits, align 4, !dbg !8520
  %14 = load i32, i32* @peek_bits, align 4, !dbg !8521
  %shl = shl i32 1, %14, !dbg !8522
  %idxprom6 = sext i32 %shl to i64, !dbg !8523
  %arrayidx7 = getelementptr inbounds [18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 %idxprom6, !dbg !8523, !ctir !283
  store i8* %arrayidx7, i8** %prefixp, align 8, !dbg !8524
  store i32 1, i32* %len, align 4, !dbg !8525
  br label %for.cond8, !dbg !8527

for.cond8:                                        ; preds = %for.inc16, %cond.end
  %15 = load i32, i32* %len, align 4, !dbg !8528
  %16 = load i32, i32* @peek_bits, align 4, !dbg !8530
  %cmp9 = icmp sle i32 %15, %16, !dbg !8531
  br i1 %cmp9, label %for.body10, label %for.end17, !dbg !8532

for.body10:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata i32* %prefixes, metadata !8533, metadata !DIExpression()), !dbg !8535
  %17 = load i32, i32* %len, align 4, !dbg !8536
  %idxprom11 = sext i32 %17 to i64, !dbg !8537
  %arrayidx12 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %idxprom11, !dbg !8537, !ctir !286
  %18 = load i32, i32* %arrayidx12, align 4, !dbg !8537
  %19 = load i32, i32* @peek_bits, align 4, !dbg !8538
  %20 = load i32, i32* %len, align 4, !dbg !8539
  %sub13 = sub nsw i32 %19, %20, !dbg !8540
  %shl14 = shl i32 %18, %sub13, !dbg !8541
  store i32 %shl14, i32* %prefixes, align 4, !dbg !8535
  br label %while.cond, !dbg !8542

while.cond:                                       ; preds = %while.body, %for.body10
  %21 = load i32, i32* %prefixes, align 4, !dbg !8543
  %dec15 = add nsw i32 %21, -1, !dbg !8543
  store i32 %dec15, i32* %prefixes, align 4, !dbg !8543
  %tobool = icmp ne i32 %21, 0, !dbg !8542
  br i1 %tobool, label %while.body, label %while.end, !dbg !8542

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %len, align 4, !dbg !8544
  %conv = trunc i32 %22 to i8, !dbg !8545
  %23 = load i8*, i8** %prefixp, align 8, !dbg !8546
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 -1, !dbg !8546, !ctir !13
  store i8* %incdec.ptr, i8** %prefixp, align 8, !dbg !8546
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !8547, !ctir !13
  br label %while.cond, !dbg !8542, !llvm.loop !8548

while.end:                                        ; preds = %while.cond
  br label %for.inc16, !dbg !8549

for.inc16:                                        ; preds = %while.end
  %24 = load i32, i32* %len, align 4, !dbg !8550
  %inc = add nsw i32 %24, 1, !dbg !8550
  store i32 %inc, i32* %len, align 4, !dbg !8550
  br label %for.cond8, !dbg !8551, !llvm.loop !8552

for.end17:                                        ; preds = %for.cond8
  br label %while.cond18, !dbg !8554

while.cond18:                                     ; preds = %while.body21, %for.end17
  %25 = load i8*, i8** %prefixp, align 8, !dbg !8555
  %cmp19 = icmp ugt i8* %25, getelementptr inbounds ([18432 x i8], [18432 x i8]* @outbuf, i64 0, i64 0), !dbg !8556
  br i1 %cmp19, label %while.body21, label %while.end23, !dbg !8554

while.body21:                                     ; preds = %while.cond18
  %26 = load i8*, i8** %prefixp, align 8, !dbg !8557
  %incdec.ptr22 = getelementptr inbounds i8, i8* %26, i32 -1, !dbg !8557, !ctir !13
  store i8* %incdec.ptr22, i8** %prefixp, align 8, !dbg !8557
  store i8 0, i8* %incdec.ptr22, align 1, !dbg !8558, !ctir !13
  br label %while.cond18, !dbg !8554, !llvm.loop !8559

while.end23:                                      ; preds = %while.cond18
  ret void, !dbg !8561
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate() #0 !dbg !8562 {
entry:
  %retval = alloca i32, align 4
  %e = alloca i32, align 4, !ctir !12
  %r = alloca i32, align 4, !ctir !12
  %h = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %e, metadata !8563, metadata !DIExpression()), !dbg !8564
  call void @llvm.dbg.declare(metadata i32* %r, metadata !8565, metadata !DIExpression()), !dbg !8566
  call void @llvm.dbg.declare(metadata i32* %h, metadata !8567, metadata !DIExpression()), !dbg !8568
  store i32 0, i32* @outcnt, align 4, !dbg !8569
  store i32 0, i32* @bk, align 4, !dbg !8570
  store i64 0, i64* @bb, align 8, !dbg !8571
  store i32 0, i32* %h, align 4, !dbg !8572
  br label %do.body, !dbg !8573

do.body:                                          ; preds = %do.cond, %entry
  store i32 0, i32* @hufts, align 4, !dbg !8574
  %call = call i32 @inflate_block(i32* %e), !dbg !8576
  store i32 %call, i32* %r, align 4, !dbg !8578
  %cmp = icmp ne i32 %call, 0, !dbg !8579
  br i1 %cmp, label %if.then, label %if.end, !dbg !8580

if.then:                                          ; preds = %do.body
  %0 = load i32, i32* %r, align 4, !dbg !8581
  store i32 %0, i32* %retval, align 4, !dbg !8582
  br label %return, !dbg !8582

if.end:                                           ; preds = %do.body
  %1 = load i32, i32* @hufts, align 4, !dbg !8583
  %2 = load i32, i32* %h, align 4, !dbg !8585
  %cmp1 = icmp ugt i32 %1, %2, !dbg !8586
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8587

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* @hufts, align 4, !dbg !8588
  store i32 %3, i32* %h, align 4, !dbg !8589
  br label %if.end3, !dbg !8590

if.end3:                                          ; preds = %if.then2, %if.end
  br label %do.cond, !dbg !8591

do.cond:                                          ; preds = %if.end3
  %4 = load i32, i32* %e, align 4, !dbg !8592
  %tobool = icmp ne i32 %4, 0, !dbg !8593
  %lnot = xor i1 %tobool, true, !dbg !8593
  br i1 %lnot, label %do.body, label %do.end, !dbg !8591, !llvm.loop !8594

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !8596

while.cond:                                       ; preds = %while.body, %do.end
  %5 = load i32, i32* @bk, align 4, !dbg !8597
  %cmp4 = icmp uge i32 %5, 8, !dbg !8598
  br i1 %cmp4, label %while.body, label %while.end, !dbg !8596

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* @bk, align 4, !dbg !8599
  %sub = sub i32 %6, 8, !dbg !8599
  store i32 %sub, i32* @bk, align 4, !dbg !8599
  %7 = load i32, i32* @inptr, align 4, !dbg !8601
  %dec = add i32 %7, -1, !dbg !8601
  store i32 %dec, i32* @inptr, align 4, !dbg !8601
  br label %while.cond, !dbg !8596, !llvm.loop !8602

while.end:                                        ; preds = %while.cond
  %8 = load i32, i32* @outcnt, align 4, !dbg !8604
  store i32 %8, i32* @outcnt, align 4, !dbg !8604
  call void @flush_window(), !dbg !8604
  store i32 0, i32* %retval, align 4, !dbg !8605
  br label %return, !dbg !8605

return:                                           ; preds = %while.end, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8606
  ret i32 %9, !dbg !8606
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate_block(i32* %e) #0 !dbg !8607 {
entry:
  %retval = alloca i32, align 4
  %e.addr = alloca i32*, align 8
  %t = alloca i32, align 4, !ctir !6
  %w = alloca i32, align 4, !ctir !6
  %b = alloca i64, align 8, !ctir !51
  %k = alloca i32, align 4, !ctir !6
  store i32* %e, i32** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %e.addr, metadata !8610, metadata !DIExpression()), !dbg !8611
  call void @llvm.dbg.declare(metadata i32* %t, metadata !8612, metadata !DIExpression()), !dbg !8613
  call void @llvm.dbg.declare(metadata i32* %w, metadata !8614, metadata !DIExpression()), !dbg !8615
  call void @llvm.dbg.declare(metadata i64* %b, metadata !8616, metadata !DIExpression()), !dbg !8617
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8618, metadata !DIExpression()), !dbg !8619
  %0 = load i64, i64* @bb, align 8, !dbg !8620
  store i64 %0, i64* %b, align 8, !dbg !8621
  %1 = load i32, i32* @bk, align 4, !dbg !8622
  store i32 %1, i32* %k, align 4, !dbg !8623
  %2 = load i32, i32* @outcnt, align 4, !dbg !8624
  store i32 %2, i32* %w, align 4, !dbg !8625
  br label %while.cond, !dbg !8626

while.cond:                                       ; preds = %cond.end, %entry
  %3 = load i32, i32* %k, align 4, !dbg !8626
  %cmp = icmp ult i32 %3, 1, !dbg !8626
  br i1 %cmp, label %while.body, label %while.end, !dbg !8626

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @inptr, align 4, !dbg !8628
  %5 = load i32, i32* @insize, align 4, !dbg !8628
  %cmp1 = icmp ult i32 %4, %5, !dbg !8628
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !8628

cond.true:                                        ; preds = %while.body
  %6 = load i32, i32* @inptr, align 4, !dbg !8628
  %inc = add i32 %6, 1, !dbg !8628
  store i32 %inc, i32* @inptr, align 4, !dbg !8628
  %idxprom = zext i32 %6 to i64, !dbg !8628
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !8628, !ctir !231
  %7 = load i8, i8* %arrayidx, align 1, !dbg !8628
  %conv = zext i8 %7 to i32, !dbg !8628
  br label %cond.end, !dbg !8628

cond.false:                                       ; preds = %while.body
  %8 = load i32, i32* %w, align 4, !dbg !8628
  store i32 %8, i32* @outcnt, align 4, !dbg !8628
  %call = call i32 @fill_inbuf(i32 0), !dbg !8628
  br label %cond.end, !dbg !8628

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !8628
  %conv2 = trunc i32 %cond to i8, !dbg !8628
  %conv3 = zext i8 %conv2 to i64, !dbg !8628
  %9 = load i32, i32* %k, align 4, !dbg !8628
  %sh_prom = zext i32 %9 to i64, !dbg !8628
  %shl = shl i64 %conv3, %sh_prom, !dbg !8628
  %10 = load i64, i64* %b, align 8, !dbg !8628
  %or = or i64 %10, %shl, !dbg !8628
  store i64 %or, i64* %b, align 8, !dbg !8628
  %11 = load i32, i32* %k, align 4, !dbg !8628
  %add = add i32 %11, 8, !dbg !8628
  store i32 %add, i32* %k, align 4, !dbg !8628
  br label %while.cond, !dbg !8626, !llvm.loop !8630

while.end:                                        ; preds = %while.cond
  %12 = load i64, i64* %b, align 8, !dbg !8631
  %conv4 = trunc i64 %12 to i32, !dbg !8632
  %and = and i32 %conv4, 1, !dbg !8633
  %13 = load i32*, i32** %e.addr, align 8, !dbg !8634
  store i32 %and, i32* %13, align 4, !dbg !8635, !ctir !12
  %14 = load i64, i64* %b, align 8, !dbg !8636
  %shr = lshr i64 %14, 1, !dbg !8636
  store i64 %shr, i64* %b, align 8, !dbg !8636
  %15 = load i32, i32* %k, align 4, !dbg !8636
  %sub = sub i32 %15, 1, !dbg !8636
  store i32 %sub, i32* %k, align 4, !dbg !8636
  br label %while.cond5, !dbg !8638

while.cond5:                                      ; preds = %cond.end18, %while.end
  %16 = load i32, i32* %k, align 4, !dbg !8638
  %cmp6 = icmp ult i32 %16, 2, !dbg !8638
  br i1 %cmp6, label %while.body8, label %while.end26, !dbg !8638

while.body8:                                      ; preds = %while.cond5
  %17 = load i32, i32* @inptr, align 4, !dbg !8640
  %18 = load i32, i32* @insize, align 4, !dbg !8640
  %cmp9 = icmp ult i32 %17, %18, !dbg !8640
  br i1 %cmp9, label %cond.true11, label %cond.false16, !dbg !8640

cond.true11:                                      ; preds = %while.body8
  %19 = load i32, i32* @inptr, align 4, !dbg !8640
  %inc12 = add i32 %19, 1, !dbg !8640
  store i32 %inc12, i32* @inptr, align 4, !dbg !8640
  %idxprom13 = zext i32 %19 to i64, !dbg !8640
  %arrayidx14 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom13, !dbg !8640, !ctir !231
  %20 = load i8, i8* %arrayidx14, align 1, !dbg !8640
  %conv15 = zext i8 %20 to i32, !dbg !8640
  br label %cond.end18, !dbg !8640

cond.false16:                                     ; preds = %while.body8
  %21 = load i32, i32* %w, align 4, !dbg !8640
  store i32 %21, i32* @outcnt, align 4, !dbg !8640
  %call17 = call i32 @fill_inbuf(i32 0), !dbg !8640
  br label %cond.end18, !dbg !8640

cond.end18:                                       ; preds = %cond.false16, %cond.true11
  %cond19 = phi i32 [ %conv15, %cond.true11 ], [ %call17, %cond.false16 ], !dbg !8640
  %conv20 = trunc i32 %cond19 to i8, !dbg !8640
  %conv21 = zext i8 %conv20 to i64, !dbg !8640
  %22 = load i32, i32* %k, align 4, !dbg !8640
  %sh_prom22 = zext i32 %22 to i64, !dbg !8640
  %shl23 = shl i64 %conv21, %sh_prom22, !dbg !8640
  %23 = load i64, i64* %b, align 8, !dbg !8640
  %or24 = or i64 %23, %shl23, !dbg !8640
  store i64 %or24, i64* %b, align 8, !dbg !8640
  %24 = load i32, i32* %k, align 4, !dbg !8640
  %add25 = add i32 %24, 8, !dbg !8640
  store i32 %add25, i32* %k, align 4, !dbg !8640
  br label %while.cond5, !dbg !8638, !llvm.loop !8642

while.end26:                                      ; preds = %while.cond5
  %25 = load i64, i64* %b, align 8, !dbg !8643
  %conv27 = trunc i64 %25 to i32, !dbg !8644
  %and28 = and i32 %conv27, 3, !dbg !8645
  store i32 %and28, i32* %t, align 4, !dbg !8646
  %26 = load i64, i64* %b, align 8, !dbg !8647
  %shr29 = lshr i64 %26, 2, !dbg !8647
  store i64 %shr29, i64* %b, align 8, !dbg !8647
  %27 = load i32, i32* %k, align 4, !dbg !8647
  %sub30 = sub i32 %27, 2, !dbg !8647
  store i32 %sub30, i32* %k, align 4, !dbg !8647
  %28 = load i64, i64* %b, align 8, !dbg !8649
  store i64 %28, i64* @bb, align 8, !dbg !8650
  %29 = load i32, i32* %k, align 4, !dbg !8651
  store i32 %29, i32* @bk, align 4, !dbg !8652
  %30 = load i32, i32* %t, align 4, !dbg !8653
  %cmp31 = icmp eq i32 %30, 2, !dbg !8655
  br i1 %cmp31, label %if.then, label %if.end, !dbg !8656

if.then:                                          ; preds = %while.end26
  %call33 = call i32 @inflate_dynamic(), !dbg !8657
  store i32 %call33, i32* %retval, align 4, !dbg !8658
  br label %return, !dbg !8658

if.end:                                           ; preds = %while.end26
  %31 = load i32, i32* %t, align 4, !dbg !8659
  %cmp34 = icmp eq i32 %31, 0, !dbg !8661
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !8662

if.then36:                                        ; preds = %if.end
  %call37 = call i32 @inflate_stored(), !dbg !8663
  store i32 %call37, i32* %retval, align 4, !dbg !8664
  br label %return, !dbg !8664

if.end38:                                         ; preds = %if.end
  %32 = load i32, i32* %t, align 4, !dbg !8665
  %cmp39 = icmp eq i32 %32, 1, !dbg !8667
  br i1 %cmp39, label %if.then41, label %if.end43, !dbg !8668

if.then41:                                        ; preds = %if.end38
  %call42 = call i32 @inflate_fixed(), !dbg !8669
  store i32 %call42, i32* %retval, align 4, !dbg !8670
  br label %return, !dbg !8670

if.end43:                                         ; preds = %if.end38
  store i32 2, i32* %retval, align 4, !dbg !8671
  br label %return, !dbg !8671

return:                                           ; preds = %if.end43, %if.then41, %if.then36, %if.then
  %33 = load i32, i32* %retval, align 4, !dbg !8672
  ret i32 %33, !dbg !8672
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate_dynamic() #0 !dbg !8673 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4, !ctir !12
  %j = alloca i32, align 4, !ctir !6
  %l = alloca i32, align 4, !ctir !6
  %m = alloca i32, align 4, !ctir !6
  %n = alloca i32, align 4, !ctir !6
  %w = alloca i32, align 4, !ctir !6
  %tl = alloca %struct.huft*, align 8, !ctir !41
  %td = alloca %struct.huft*, align 8, !ctir !41
  %bl = alloca i32, align 4, !ctir !12
  %bd = alloca i32, align 4, !ctir !12
  %nb = alloca i32, align 4, !ctir !6
  %nl = alloca i32, align 4, !ctir !6
  %nd = alloca i32, align 4, !ctir !6
  %ll = alloca [316 x i32], align 16, !ctir !241
  %b = alloca i64, align 8, !ctir !51
  %k = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8674, metadata !DIExpression()), !dbg !8675
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8676, metadata !DIExpression()), !dbg !8677
  call void @llvm.dbg.declare(metadata i32* %l, metadata !8678, metadata !DIExpression()), !dbg !8679
  call void @llvm.dbg.declare(metadata i32* %m, metadata !8680, metadata !DIExpression()), !dbg !8681
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8682, metadata !DIExpression()), !dbg !8683
  call void @llvm.dbg.declare(metadata i32* %w, metadata !8684, metadata !DIExpression()), !dbg !8685
  call void @llvm.dbg.declare(metadata %struct.huft** %tl, metadata !8686, metadata !DIExpression()), !dbg !8687
  call void @llvm.dbg.declare(metadata %struct.huft** %td, metadata !8688, metadata !DIExpression()), !dbg !8689
  call void @llvm.dbg.declare(metadata i32* %bl, metadata !8690, metadata !DIExpression()), !dbg !8691
  call void @llvm.dbg.declare(metadata i32* %bd, metadata !8692, metadata !DIExpression()), !dbg !8693
  call void @llvm.dbg.declare(metadata i32* %nb, metadata !8694, metadata !DIExpression()), !dbg !8695
  call void @llvm.dbg.declare(metadata i32* %nl, metadata !8696, metadata !DIExpression()), !dbg !8697
  call void @llvm.dbg.declare(metadata i32* %nd, metadata !8698, metadata !DIExpression()), !dbg !8699
  call void @llvm.dbg.declare(metadata [316 x i32]* %ll, metadata !8700, metadata !DIExpression()), !dbg !8701
  call void @llvm.dbg.declare(metadata i64* %b, metadata !8702, metadata !DIExpression()), !dbg !8703
  call void @llvm.dbg.declare(metadata i32* %k, metadata !8704, metadata !DIExpression()), !dbg !8705
  %0 = load i64, i64* @bb, align 8, !dbg !8706
  store i64 %0, i64* %b, align 8, !dbg !8707
  %1 = load i32, i32* @bk, align 4, !dbg !8708
  store i32 %1, i32* %k, align 4, !dbg !8709
  %2 = load i32, i32* @outcnt, align 4, !dbg !8710
  store i32 %2, i32* %w, align 4, !dbg !8711
  br label %while.cond, !dbg !8712

while.cond:                                       ; preds = %cond.end, %entry
  %3 = load i32, i32* %k, align 4, !dbg !8712
  %cmp = icmp ult i32 %3, 5, !dbg !8712
  br i1 %cmp, label %while.body, label %while.end, !dbg !8712

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @inptr, align 4, !dbg !8714
  %5 = load i32, i32* @insize, align 4, !dbg !8714
  %cmp1 = icmp ult i32 %4, %5, !dbg !8714
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !8714

cond.true:                                        ; preds = %while.body
  %6 = load i32, i32* @inptr, align 4, !dbg !8714
  %inc = add i32 %6, 1, !dbg !8714
  store i32 %inc, i32* @inptr, align 4, !dbg !8714
  %idxprom = zext i32 %6 to i64, !dbg !8714
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !8714, !ctir !231
  %7 = load i8, i8* %arrayidx, align 1, !dbg !8714
  %conv = zext i8 %7 to i32, !dbg !8714
  br label %cond.end, !dbg !8714

cond.false:                                       ; preds = %while.body
  %8 = load i32, i32* %w, align 4, !dbg !8714
  store i32 %8, i32* @outcnt, align 4, !dbg !8714
  %call = call i32 @fill_inbuf(i32 0), !dbg !8714
  br label %cond.end, !dbg !8714

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !8714
  %conv2 = trunc i32 %cond to i8, !dbg !8714
  %conv3 = zext i8 %conv2 to i64, !dbg !8714
  %9 = load i32, i32* %k, align 4, !dbg !8714
  %sh_prom = zext i32 %9 to i64, !dbg !8714
  %shl = shl i64 %conv3, %sh_prom, !dbg !8714
  %10 = load i64, i64* %b, align 8, !dbg !8714
  %or = or i64 %10, %shl, !dbg !8714
  store i64 %or, i64* %b, align 8, !dbg !8714
  %11 = load i32, i32* %k, align 4, !dbg !8714
  %add = add i32 %11, 8, !dbg !8714
  store i32 %add, i32* %k, align 4, !dbg !8714
  br label %while.cond, !dbg !8712, !llvm.loop !8716

while.end:                                        ; preds = %while.cond
  %12 = load i64, i64* %b, align 8, !dbg !8717
  %conv4 = trunc i64 %12 to i32, !dbg !8718
  %and = and i32 %conv4, 31, !dbg !8719
  %add5 = add i32 257, %and, !dbg !8720
  store i32 %add5, i32* %nl, align 4, !dbg !8721
  %13 = load i64, i64* %b, align 8, !dbg !8722
  %shr = lshr i64 %13, 5, !dbg !8722
  store i64 %shr, i64* %b, align 8, !dbg !8722
  %14 = load i32, i32* %k, align 4, !dbg !8722
  %sub = sub i32 %14, 5, !dbg !8722
  store i32 %sub, i32* %k, align 4, !dbg !8722
  br label %while.cond6, !dbg !8724

while.cond6:                                      ; preds = %cond.end19, %while.end
  %15 = load i32, i32* %k, align 4, !dbg !8724
  %cmp7 = icmp ult i32 %15, 5, !dbg !8724
  br i1 %cmp7, label %while.body9, label %while.end27, !dbg !8724

while.body9:                                      ; preds = %while.cond6
  %16 = load i32, i32* @inptr, align 4, !dbg !8726
  %17 = load i32, i32* @insize, align 4, !dbg !8726
  %cmp10 = icmp ult i32 %16, %17, !dbg !8726
  br i1 %cmp10, label %cond.true12, label %cond.false17, !dbg !8726

cond.true12:                                      ; preds = %while.body9
  %18 = load i32, i32* @inptr, align 4, !dbg !8726
  %inc13 = add i32 %18, 1, !dbg !8726
  store i32 %inc13, i32* @inptr, align 4, !dbg !8726
  %idxprom14 = zext i32 %18 to i64, !dbg !8726
  %arrayidx15 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom14, !dbg !8726, !ctir !231
  %19 = load i8, i8* %arrayidx15, align 1, !dbg !8726
  %conv16 = zext i8 %19 to i32, !dbg !8726
  br label %cond.end19, !dbg !8726

cond.false17:                                     ; preds = %while.body9
  %20 = load i32, i32* %w, align 4, !dbg !8726
  store i32 %20, i32* @outcnt, align 4, !dbg !8726
  %call18 = call i32 @fill_inbuf(i32 0), !dbg !8726
  br label %cond.end19, !dbg !8726

cond.end19:                                       ; preds = %cond.false17, %cond.true12
  %cond20 = phi i32 [ %conv16, %cond.true12 ], [ %call18, %cond.false17 ], !dbg !8726
  %conv21 = trunc i32 %cond20 to i8, !dbg !8726
  %conv22 = zext i8 %conv21 to i64, !dbg !8726
  %21 = load i32, i32* %k, align 4, !dbg !8726
  %sh_prom23 = zext i32 %21 to i64, !dbg !8726
  %shl24 = shl i64 %conv22, %sh_prom23, !dbg !8726
  %22 = load i64, i64* %b, align 8, !dbg !8726
  %or25 = or i64 %22, %shl24, !dbg !8726
  store i64 %or25, i64* %b, align 8, !dbg !8726
  %23 = load i32, i32* %k, align 4, !dbg !8726
  %add26 = add i32 %23, 8, !dbg !8726
  store i32 %add26, i32* %k, align 4, !dbg !8726
  br label %while.cond6, !dbg !8724, !llvm.loop !8728

while.end27:                                      ; preds = %while.cond6
  %24 = load i64, i64* %b, align 8, !dbg !8729
  %conv28 = trunc i64 %24 to i32, !dbg !8730
  %and29 = and i32 %conv28, 31, !dbg !8731
  %add30 = add i32 1, %and29, !dbg !8732
  store i32 %add30, i32* %nd, align 4, !dbg !8733
  %25 = load i64, i64* %b, align 8, !dbg !8734
  %shr31 = lshr i64 %25, 5, !dbg !8734
  store i64 %shr31, i64* %b, align 8, !dbg !8734
  %26 = load i32, i32* %k, align 4, !dbg !8734
  %sub32 = sub i32 %26, 5, !dbg !8734
  store i32 %sub32, i32* %k, align 4, !dbg !8734
  br label %while.cond33, !dbg !8736

while.cond33:                                     ; preds = %cond.end46, %while.end27
  %27 = load i32, i32* %k, align 4, !dbg !8736
  %cmp34 = icmp ult i32 %27, 4, !dbg !8736
  br i1 %cmp34, label %while.body36, label %while.end54, !dbg !8736

while.body36:                                     ; preds = %while.cond33
  %28 = load i32, i32* @inptr, align 4, !dbg !8738
  %29 = load i32, i32* @insize, align 4, !dbg !8738
  %cmp37 = icmp ult i32 %28, %29, !dbg !8738
  br i1 %cmp37, label %cond.true39, label %cond.false44, !dbg !8738

cond.true39:                                      ; preds = %while.body36
  %30 = load i32, i32* @inptr, align 4, !dbg !8738
  %inc40 = add i32 %30, 1, !dbg !8738
  store i32 %inc40, i32* @inptr, align 4, !dbg !8738
  %idxprom41 = zext i32 %30 to i64, !dbg !8738
  %arrayidx42 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom41, !dbg !8738, !ctir !231
  %31 = load i8, i8* %arrayidx42, align 1, !dbg !8738
  %conv43 = zext i8 %31 to i32, !dbg !8738
  br label %cond.end46, !dbg !8738

cond.false44:                                     ; preds = %while.body36
  %32 = load i32, i32* %w, align 4, !dbg !8738
  store i32 %32, i32* @outcnt, align 4, !dbg !8738
  %call45 = call i32 @fill_inbuf(i32 0), !dbg !8738
  br label %cond.end46, !dbg !8738

cond.end46:                                       ; preds = %cond.false44, %cond.true39
  %cond47 = phi i32 [ %conv43, %cond.true39 ], [ %call45, %cond.false44 ], !dbg !8738
  %conv48 = trunc i32 %cond47 to i8, !dbg !8738
  %conv49 = zext i8 %conv48 to i64, !dbg !8738
  %33 = load i32, i32* %k, align 4, !dbg !8738
  %sh_prom50 = zext i32 %33 to i64, !dbg !8738
  %shl51 = shl i64 %conv49, %sh_prom50, !dbg !8738
  %34 = load i64, i64* %b, align 8, !dbg !8738
  %or52 = or i64 %34, %shl51, !dbg !8738
  store i64 %or52, i64* %b, align 8, !dbg !8738
  %35 = load i32, i32* %k, align 4, !dbg !8738
  %add53 = add i32 %35, 8, !dbg !8738
  store i32 %add53, i32* %k, align 4, !dbg !8738
  br label %while.cond33, !dbg !8736, !llvm.loop !8740

while.end54:                                      ; preds = %while.cond33
  %36 = load i64, i64* %b, align 8, !dbg !8741
  %conv55 = trunc i64 %36 to i32, !dbg !8742
  %and56 = and i32 %conv55, 15, !dbg !8743
  %add57 = add i32 4, %and56, !dbg !8744
  store i32 %add57, i32* %nb, align 4, !dbg !8745
  %37 = load i64, i64* %b, align 8, !dbg !8746
  %shr58 = lshr i64 %37, 4, !dbg !8746
  store i64 %shr58, i64* %b, align 8, !dbg !8746
  %38 = load i32, i32* %k, align 4, !dbg !8746
  %sub59 = sub i32 %38, 4, !dbg !8746
  store i32 %sub59, i32* %k, align 4, !dbg !8746
  %39 = load i32, i32* %nl, align 4, !dbg !8748
  %cmp60 = icmp ugt i32 %39, 286, !dbg !8750
  br i1 %cmp60, label %if.then, label %lor.lhs.false, !dbg !8751

lor.lhs.false:                                    ; preds = %while.end54
  %40 = load i32, i32* %nd, align 4, !dbg !8752
  %cmp62 = icmp ugt i32 %40, 30, !dbg !8753
  br i1 %cmp62, label %if.then, label %if.end, !dbg !8754

if.then:                                          ; preds = %lor.lhs.false, %while.end54
  store i32 1, i32* %retval, align 4, !dbg !8755
  br label %return, !dbg !8755

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %j, align 4, !dbg !8756
  br label %for.cond, !dbg !8758

for.cond:                                         ; preds = %for.inc, %if.end
  %41 = load i32, i32* %j, align 4, !dbg !8759
  %42 = load i32, i32* %nb, align 4, !dbg !8761
  %cmp64 = icmp ult i32 %41, %42, !dbg !8762
  br i1 %cmp64, label %for.body, label %for.end, !dbg !8763

for.body:                                         ; preds = %for.cond
  br label %while.cond66, !dbg !8764

while.cond66:                                     ; preds = %cond.end79, %for.body
  %43 = load i32, i32* %k, align 4, !dbg !8764
  %cmp67 = icmp ult i32 %43, 3, !dbg !8764
  br i1 %cmp67, label %while.body69, label %while.end87, !dbg !8764

while.body69:                                     ; preds = %while.cond66
  %44 = load i32, i32* @inptr, align 4, !dbg !8767
  %45 = load i32, i32* @insize, align 4, !dbg !8767
  %cmp70 = icmp ult i32 %44, %45, !dbg !8767
  br i1 %cmp70, label %cond.true72, label %cond.false77, !dbg !8767

cond.true72:                                      ; preds = %while.body69
  %46 = load i32, i32* @inptr, align 4, !dbg !8767
  %inc73 = add i32 %46, 1, !dbg !8767
  store i32 %inc73, i32* @inptr, align 4, !dbg !8767
  %idxprom74 = zext i32 %46 to i64, !dbg !8767
  %arrayidx75 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom74, !dbg !8767, !ctir !231
  %47 = load i8, i8* %arrayidx75, align 1, !dbg !8767
  %conv76 = zext i8 %47 to i32, !dbg !8767
  br label %cond.end79, !dbg !8767

cond.false77:                                     ; preds = %while.body69
  %48 = load i32, i32* %w, align 4, !dbg !8767
  store i32 %48, i32* @outcnt, align 4, !dbg !8767
  %call78 = call i32 @fill_inbuf(i32 0), !dbg !8767
  br label %cond.end79, !dbg !8767

cond.end79:                                       ; preds = %cond.false77, %cond.true72
  %cond80 = phi i32 [ %conv76, %cond.true72 ], [ %call78, %cond.false77 ], !dbg !8767
  %conv81 = trunc i32 %cond80 to i8, !dbg !8767
  %conv82 = zext i8 %conv81 to i64, !dbg !8767
  %49 = load i32, i32* %k, align 4, !dbg !8767
  %sh_prom83 = zext i32 %49 to i64, !dbg !8767
  %shl84 = shl i64 %conv82, %sh_prom83, !dbg !8767
  %50 = load i64, i64* %b, align 8, !dbg !8767
  %or85 = or i64 %50, %shl84, !dbg !8767
  store i64 %or85, i64* %b, align 8, !dbg !8767
  %51 = load i32, i32* %k, align 4, !dbg !8767
  %add86 = add i32 %51, 8, !dbg !8767
  store i32 %add86, i32* %k, align 4, !dbg !8767
  br label %while.cond66, !dbg !8764, !llvm.loop !8769

while.end87:                                      ; preds = %while.cond66
  %52 = load i64, i64* %b, align 8, !dbg !8770
  %conv88 = trunc i64 %52 to i32, !dbg !8771
  %and89 = and i32 %conv88, 7, !dbg !8772
  %53 = load i32, i32* %j, align 4, !dbg !8773
  %idxprom90 = zext i32 %53 to i64, !dbg !8774
  %arrayidx91 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i64 0, i64 %idxprom90, !dbg !8774, !ctir !244
  %54 = load i32, i32* %arrayidx91, align 4, !dbg !8774
  %idxprom92 = zext i32 %54 to i64, !dbg !8775
  %arrayidx93 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom92, !dbg !8775, !ctir !241
  store i32 %and89, i32* %arrayidx93, align 4, !dbg !8776
  %55 = load i64, i64* %b, align 8, !dbg !8777
  %shr94 = lshr i64 %55, 3, !dbg !8777
  store i64 %shr94, i64* %b, align 8, !dbg !8777
  %56 = load i32, i32* %k, align 4, !dbg !8777
  %sub95 = sub i32 %56, 3, !dbg !8777
  store i32 %sub95, i32* %k, align 4, !dbg !8777
  br label %for.inc, !dbg !8779

for.inc:                                          ; preds = %while.end87
  %57 = load i32, i32* %j, align 4, !dbg !8780
  %inc96 = add i32 %57, 1, !dbg !8780
  store i32 %inc96, i32* %j, align 4, !dbg !8780
  br label %for.cond, !dbg !8781, !llvm.loop !8782

for.end:                                          ; preds = %for.cond
  br label %for.cond97, !dbg !8784

for.cond97:                                       ; preds = %for.inc105, %for.end
  %58 = load i32, i32* %j, align 4, !dbg !8785
  %cmp98 = icmp ult i32 %58, 19, !dbg !8788
  br i1 %cmp98, label %for.body100, label %for.end107, !dbg !8789

for.body100:                                      ; preds = %for.cond97
  %59 = load i32, i32* %j, align 4, !dbg !8790
  %idxprom101 = zext i32 %59 to i64, !dbg !8791
  %arrayidx102 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i64 0, i64 %idxprom101, !dbg !8791, !ctir !244
  %60 = load i32, i32* %arrayidx102, align 4, !dbg !8791
  %idxprom103 = zext i32 %60 to i64, !dbg !8792
  %arrayidx104 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom103, !dbg !8792, !ctir !241
  store i32 0, i32* %arrayidx104, align 4, !dbg !8793
  br label %for.inc105, !dbg !8792

for.inc105:                                       ; preds = %for.body100
  %61 = load i32, i32* %j, align 4, !dbg !8794
  %inc106 = add i32 %61, 1, !dbg !8794
  store i32 %inc106, i32* %j, align 4, !dbg !8794
  br label %for.cond97, !dbg !8795, !llvm.loop !8796

for.end107:                                       ; preds = %for.cond97
  store i32 7, i32* %bl, align 4, !dbg !8798
  %arraydecay = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 0, !dbg !8799, !ctir !241
  %call108 = call i32 @huft_build(i32* %arraydecay, i32 19, i32 19, i16* null, i16* null, %struct.huft** %tl, i32* %bl), !dbg !8801
  store i32 %call108, i32* %i, align 4, !dbg !8802
  %cmp109 = icmp ne i32 %call108, 0, !dbg !8803
  br i1 %cmp109, label %if.then111, label %if.end117, !dbg !8804

if.then111:                                       ; preds = %for.end107
  %62 = load i32, i32* %i, align 4, !dbg !8805
  %cmp112 = icmp eq i32 %62, 1, !dbg !8808
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !8809

if.then114:                                       ; preds = %if.then111
  %63 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !8810
  %call115 = call i32 @huft_free(%struct.huft* %63), !dbg !8811
  br label %if.end116, !dbg !8811

if.end116:                                        ; preds = %if.then114, %if.then111
  %64 = load i32, i32* %i, align 4, !dbg !8812
  store i32 %64, i32* %retval, align 4, !dbg !8813
  br label %return, !dbg !8813

if.end117:                                        ; preds = %for.end107
  %65 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !8814
  %cmp118 = icmp eq %struct.huft* %65, null, !dbg !8816
  br i1 %cmp118, label %if.then120, label %if.end121, !dbg !8817

if.then120:                                       ; preds = %if.end117
  store i32 2, i32* %retval, align 4, !dbg !8818
  br label %return, !dbg !8818

if.end121:                                        ; preds = %if.end117
  %66 = load i32, i32* %nl, align 4, !dbg !8819
  %67 = load i32, i32* %nd, align 4, !dbg !8820
  %add122 = add i32 %66, %67, !dbg !8821
  store i32 %add122, i32* %n, align 4, !dbg !8822
  %68 = load i32, i32* %bl, align 4, !dbg !8823
  %idxprom123 = sext i32 %68 to i64, !dbg !8824
  %arrayidx124 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom123, !dbg !8824, !ctir !220
  %69 = load i16, i16* %arrayidx124, align 2, !dbg !8824
  %conv125 = zext i16 %69 to i32, !dbg !8824
  store i32 %conv125, i32* %m, align 4, !dbg !8825
  store i32 0, i32* %l, align 4, !dbg !8826
  store i32 0, i32* %i, align 4, !dbg !8827
  br label %while.cond126, !dbg !8828

while.cond126:                                    ; preds = %if.end295, %if.end121
  %70 = load i32, i32* %i, align 4, !dbg !8829
  %71 = load i32, i32* %n, align 4, !dbg !8830
  %cmp127 = icmp ult i32 %70, %71, !dbg !8831
  br i1 %cmp127, label %while.body129, label %while.end296, !dbg !8828

while.body129:                                    ; preds = %while.cond126
  br label %while.cond130, !dbg !8832

while.cond130:                                    ; preds = %cond.end143, %while.body129
  %72 = load i32, i32* %k, align 4, !dbg !8832
  %73 = load i32, i32* %bl, align 4, !dbg !8832
  %cmp131 = icmp ult i32 %72, %73, !dbg !8832
  br i1 %cmp131, label %while.body133, label %while.end151, !dbg !8832

while.body133:                                    ; preds = %while.cond130
  %74 = load i32, i32* @inptr, align 4, !dbg !8835
  %75 = load i32, i32* @insize, align 4, !dbg !8835
  %cmp134 = icmp ult i32 %74, %75, !dbg !8835
  br i1 %cmp134, label %cond.true136, label %cond.false141, !dbg !8835

cond.true136:                                     ; preds = %while.body133
  %76 = load i32, i32* @inptr, align 4, !dbg !8835
  %inc137 = add i32 %76, 1, !dbg !8835
  store i32 %inc137, i32* @inptr, align 4, !dbg !8835
  %idxprom138 = zext i32 %76 to i64, !dbg !8835
  %arrayidx139 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom138, !dbg !8835, !ctir !231
  %77 = load i8, i8* %arrayidx139, align 1, !dbg !8835
  %conv140 = zext i8 %77 to i32, !dbg !8835
  br label %cond.end143, !dbg !8835

cond.false141:                                    ; preds = %while.body133
  %78 = load i32, i32* %w, align 4, !dbg !8835
  store i32 %78, i32* @outcnt, align 4, !dbg !8835
  %call142 = call i32 @fill_inbuf(i32 0), !dbg !8835
  br label %cond.end143, !dbg !8835

cond.end143:                                      ; preds = %cond.false141, %cond.true136
  %cond144 = phi i32 [ %conv140, %cond.true136 ], [ %call142, %cond.false141 ], !dbg !8835
  %conv145 = trunc i32 %cond144 to i8, !dbg !8835
  %conv146 = zext i8 %conv145 to i64, !dbg !8835
  %79 = load i32, i32* %k, align 4, !dbg !8835
  %sh_prom147 = zext i32 %79 to i64, !dbg !8835
  %shl148 = shl i64 %conv146, %sh_prom147, !dbg !8835
  %80 = load i64, i64* %b, align 8, !dbg !8835
  %or149 = or i64 %80, %shl148, !dbg !8835
  store i64 %or149, i64* %b, align 8, !dbg !8835
  %81 = load i32, i32* %k, align 4, !dbg !8835
  %add150 = add i32 %81, 8, !dbg !8835
  store i32 %add150, i32* %k, align 4, !dbg !8835
  br label %while.cond130, !dbg !8832, !llvm.loop !8837

while.end151:                                     ; preds = %while.cond130
  %82 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !8838
  %83 = load i64, i64* %b, align 8, !dbg !8839
  %conv152 = trunc i64 %83 to i32, !dbg !8840
  %84 = load i32, i32* %m, align 4, !dbg !8841
  %and153 = and i32 %conv152, %84, !dbg !8842
  %idx.ext = zext i32 %and153 to i64, !dbg !8843
  %add.ptr = getelementptr inbounds %struct.huft, %struct.huft* %82, i64 %idx.ext, !dbg !8843, !ctir !42
  store %struct.huft* %add.ptr, %struct.huft** %td, align 8, !dbg !8844
  %b154 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr, i32 0, i32 1, !dbg !8845, !ctir !42
  %85 = load i8, i8* %b154, align 1, !dbg !8845, !ctir !13
  %conv155 = zext i8 %85 to i32, !dbg !8846
  store i32 %conv155, i32* %j, align 4, !dbg !8847
  %86 = load i32, i32* %j, align 4, !dbg !8848
  %87 = load i64, i64* %b, align 8, !dbg !8848
  %sh_prom156 = zext i32 %86 to i64, !dbg !8848
  %shr157 = lshr i64 %87, %sh_prom156, !dbg !8848
  store i64 %shr157, i64* %b, align 8, !dbg !8848
  %88 = load i32, i32* %j, align 4, !dbg !8848
  %89 = load i32, i32* %k, align 4, !dbg !8848
  %sub158 = sub i32 %89, %88, !dbg !8848
  store i32 %sub158, i32* %k, align 4, !dbg !8848
  %90 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !8850
  %v = getelementptr inbounds %struct.huft, %struct.huft* %90, i32 0, i32 2, !dbg !8851, !ctir !42
  %n159 = bitcast %union.anon* %v to i16*, !dbg !8852
  %91 = load i16, i16* %n159, align 8, !dbg !8852, !ctir !47
  %conv160 = zext i16 %91 to i32, !dbg !8850
  store i32 %conv160, i32* %j, align 4, !dbg !8853
  %92 = load i32, i32* %j, align 4, !dbg !8854
  %cmp161 = icmp ult i32 %92, 16, !dbg !8856
  br i1 %cmp161, label %if.then163, label %if.else, !dbg !8857

if.then163:                                       ; preds = %while.end151
  %93 = load i32, i32* %j, align 4, !dbg !8858
  store i32 %93, i32* %l, align 4, !dbg !8859
  %94 = load i32, i32* %i, align 4, !dbg !8860
  %inc164 = add nsw i32 %94, 1, !dbg !8860
  store i32 %inc164, i32* %i, align 4, !dbg !8860
  %idxprom165 = sext i32 %94 to i64, !dbg !8861
  %arrayidx166 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom165, !dbg !8861, !ctir !241
  store i32 %93, i32* %arrayidx166, align 4, !dbg !8862
  br label %if.end295, !dbg !8861

if.else:                                          ; preds = %while.end151
  %95 = load i32, i32* %j, align 4, !dbg !8863
  %cmp167 = icmp eq i32 %95, 16, !dbg !8865
  br i1 %cmp167, label %if.then169, label %if.else208, !dbg !8866

if.then169:                                       ; preds = %if.else
  br label %while.cond170, !dbg !8867

while.cond170:                                    ; preds = %cond.end183, %if.then169
  %96 = load i32, i32* %k, align 4, !dbg !8867
  %cmp171 = icmp ult i32 %96, 2, !dbg !8867
  br i1 %cmp171, label %while.body173, label %while.end191, !dbg !8867

while.body173:                                    ; preds = %while.cond170
  %97 = load i32, i32* @inptr, align 4, !dbg !8870
  %98 = load i32, i32* @insize, align 4, !dbg !8870
  %cmp174 = icmp ult i32 %97, %98, !dbg !8870
  br i1 %cmp174, label %cond.true176, label %cond.false181, !dbg !8870

cond.true176:                                     ; preds = %while.body173
  %99 = load i32, i32* @inptr, align 4, !dbg !8870
  %inc177 = add i32 %99, 1, !dbg !8870
  store i32 %inc177, i32* @inptr, align 4, !dbg !8870
  %idxprom178 = zext i32 %99 to i64, !dbg !8870
  %arrayidx179 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom178, !dbg !8870, !ctir !231
  %100 = load i8, i8* %arrayidx179, align 1, !dbg !8870
  %conv180 = zext i8 %100 to i32, !dbg !8870
  br label %cond.end183, !dbg !8870

cond.false181:                                    ; preds = %while.body173
  %101 = load i32, i32* %w, align 4, !dbg !8870
  store i32 %101, i32* @outcnt, align 4, !dbg !8870
  %call182 = call i32 @fill_inbuf(i32 0), !dbg !8870
  br label %cond.end183, !dbg !8870

cond.end183:                                      ; preds = %cond.false181, %cond.true176
  %cond184 = phi i32 [ %conv180, %cond.true176 ], [ %call182, %cond.false181 ], !dbg !8870
  %conv185 = trunc i32 %cond184 to i8, !dbg !8870
  %conv186 = zext i8 %conv185 to i64, !dbg !8870
  %102 = load i32, i32* %k, align 4, !dbg !8870
  %sh_prom187 = zext i32 %102 to i64, !dbg !8870
  %shl188 = shl i64 %conv186, %sh_prom187, !dbg !8870
  %103 = load i64, i64* %b, align 8, !dbg !8870
  %or189 = or i64 %103, %shl188, !dbg !8870
  store i64 %or189, i64* %b, align 8, !dbg !8870
  %104 = load i32, i32* %k, align 4, !dbg !8870
  %add190 = add i32 %104, 8, !dbg !8870
  store i32 %add190, i32* %k, align 4, !dbg !8870
  br label %while.cond170, !dbg !8867, !llvm.loop !8872

while.end191:                                     ; preds = %while.cond170
  %105 = load i64, i64* %b, align 8, !dbg !8873
  %conv192 = trunc i64 %105 to i32, !dbg !8874
  %and193 = and i32 %conv192, 3, !dbg !8875
  %add194 = add i32 3, %and193, !dbg !8876
  store i32 %add194, i32* %j, align 4, !dbg !8877
  %106 = load i64, i64* %b, align 8, !dbg !8878
  %shr195 = lshr i64 %106, 2, !dbg !8878
  store i64 %shr195, i64* %b, align 8, !dbg !8878
  %107 = load i32, i32* %k, align 4, !dbg !8878
  %sub196 = sub i32 %107, 2, !dbg !8878
  store i32 %sub196, i32* %k, align 4, !dbg !8878
  %108 = load i32, i32* %i, align 4, !dbg !8880
  %109 = load i32, i32* %j, align 4, !dbg !8882
  %add197 = add i32 %108, %109, !dbg !8883
  %110 = load i32, i32* %n, align 4, !dbg !8884
  %cmp198 = icmp ugt i32 %add197, %110, !dbg !8885
  br i1 %cmp198, label %if.then200, label %if.end201, !dbg !8886

if.then200:                                       ; preds = %while.end191
  store i32 1, i32* %retval, align 4, !dbg !8887
  br label %return, !dbg !8887

if.end201:                                        ; preds = %while.end191
  br label %while.cond202, !dbg !8888

while.cond202:                                    ; preds = %while.body203, %if.end201
  %111 = load i32, i32* %j, align 4, !dbg !8889
  %dec = add i32 %111, -1, !dbg !8889
  store i32 %dec, i32* %j, align 4, !dbg !8889
  %tobool = icmp ne i32 %111, 0, !dbg !8888
  br i1 %tobool, label %while.body203, label %while.end207, !dbg !8888

while.body203:                                    ; preds = %while.cond202
  %112 = load i32, i32* %l, align 4, !dbg !8890
  %113 = load i32, i32* %i, align 4, !dbg !8891
  %inc204 = add nsw i32 %113, 1, !dbg !8891
  store i32 %inc204, i32* %i, align 4, !dbg !8891
  %idxprom205 = sext i32 %113 to i64, !dbg !8892
  %arrayidx206 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom205, !dbg !8892, !ctir !241
  store i32 %112, i32* %arrayidx206, align 4, !dbg !8893
  br label %while.cond202, !dbg !8888, !llvm.loop !8894

while.end207:                                     ; preds = %while.cond202
  br label %if.end294, !dbg !8895

if.else208:                                       ; preds = %if.else
  %114 = load i32, i32* %j, align 4, !dbg !8896
  %cmp209 = icmp eq i32 %114, 17, !dbg !8898
  br i1 %cmp209, label %if.then211, label %if.else252, !dbg !8899

if.then211:                                       ; preds = %if.else208
  br label %while.cond212, !dbg !8900

while.cond212:                                    ; preds = %cond.end225, %if.then211
  %115 = load i32, i32* %k, align 4, !dbg !8900
  %cmp213 = icmp ult i32 %115, 3, !dbg !8900
  br i1 %cmp213, label %while.body215, label %while.end233, !dbg !8900

while.body215:                                    ; preds = %while.cond212
  %116 = load i32, i32* @inptr, align 4, !dbg !8903
  %117 = load i32, i32* @insize, align 4, !dbg !8903
  %cmp216 = icmp ult i32 %116, %117, !dbg !8903
  br i1 %cmp216, label %cond.true218, label %cond.false223, !dbg !8903

cond.true218:                                     ; preds = %while.body215
  %118 = load i32, i32* @inptr, align 4, !dbg !8903
  %inc219 = add i32 %118, 1, !dbg !8903
  store i32 %inc219, i32* @inptr, align 4, !dbg !8903
  %idxprom220 = zext i32 %118 to i64, !dbg !8903
  %arrayidx221 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom220, !dbg !8903, !ctir !231
  %119 = load i8, i8* %arrayidx221, align 1, !dbg !8903
  %conv222 = zext i8 %119 to i32, !dbg !8903
  br label %cond.end225, !dbg !8903

cond.false223:                                    ; preds = %while.body215
  %120 = load i32, i32* %w, align 4, !dbg !8903
  store i32 %120, i32* @outcnt, align 4, !dbg !8903
  %call224 = call i32 @fill_inbuf(i32 0), !dbg !8903
  br label %cond.end225, !dbg !8903

cond.end225:                                      ; preds = %cond.false223, %cond.true218
  %cond226 = phi i32 [ %conv222, %cond.true218 ], [ %call224, %cond.false223 ], !dbg !8903
  %conv227 = trunc i32 %cond226 to i8, !dbg !8903
  %conv228 = zext i8 %conv227 to i64, !dbg !8903
  %121 = load i32, i32* %k, align 4, !dbg !8903
  %sh_prom229 = zext i32 %121 to i64, !dbg !8903
  %shl230 = shl i64 %conv228, %sh_prom229, !dbg !8903
  %122 = load i64, i64* %b, align 8, !dbg !8903
  %or231 = or i64 %122, %shl230, !dbg !8903
  store i64 %or231, i64* %b, align 8, !dbg !8903
  %123 = load i32, i32* %k, align 4, !dbg !8903
  %add232 = add i32 %123, 8, !dbg !8903
  store i32 %add232, i32* %k, align 4, !dbg !8903
  br label %while.cond212, !dbg !8900, !llvm.loop !8905

while.end233:                                     ; preds = %while.cond212
  %124 = load i64, i64* %b, align 8, !dbg !8906
  %conv234 = trunc i64 %124 to i32, !dbg !8907
  %and235 = and i32 %conv234, 7, !dbg !8908
  %add236 = add i32 3, %and235, !dbg !8909
  store i32 %add236, i32* %j, align 4, !dbg !8910
  %125 = load i64, i64* %b, align 8, !dbg !8911
  %shr237 = lshr i64 %125, 3, !dbg !8911
  store i64 %shr237, i64* %b, align 8, !dbg !8911
  %126 = load i32, i32* %k, align 4, !dbg !8911
  %sub238 = sub i32 %126, 3, !dbg !8911
  store i32 %sub238, i32* %k, align 4, !dbg !8911
  %127 = load i32, i32* %i, align 4, !dbg !8913
  %128 = load i32, i32* %j, align 4, !dbg !8915
  %add239 = add i32 %127, %128, !dbg !8916
  %129 = load i32, i32* %n, align 4, !dbg !8917
  %cmp240 = icmp ugt i32 %add239, %129, !dbg !8918
  br i1 %cmp240, label %if.then242, label %if.end243, !dbg !8919

if.then242:                                       ; preds = %while.end233
  store i32 1, i32* %retval, align 4, !dbg !8920
  br label %return, !dbg !8920

if.end243:                                        ; preds = %while.end233
  br label %while.cond244, !dbg !8921

while.cond244:                                    ; preds = %while.body247, %if.end243
  %130 = load i32, i32* %j, align 4, !dbg !8922
  %dec245 = add i32 %130, -1, !dbg !8922
  store i32 %dec245, i32* %j, align 4, !dbg !8922
  %tobool246 = icmp ne i32 %130, 0, !dbg !8921
  br i1 %tobool246, label %while.body247, label %while.end251, !dbg !8921

while.body247:                                    ; preds = %while.cond244
  %131 = load i32, i32* %i, align 4, !dbg !8923
  %inc248 = add nsw i32 %131, 1, !dbg !8923
  store i32 %inc248, i32* %i, align 4, !dbg !8923
  %idxprom249 = sext i32 %131 to i64, !dbg !8924
  %arrayidx250 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom249, !dbg !8924, !ctir !241
  store i32 0, i32* %arrayidx250, align 4, !dbg !8925
  br label %while.cond244, !dbg !8921, !llvm.loop !8926

while.end251:                                     ; preds = %while.cond244
  store i32 0, i32* %l, align 4, !dbg !8928
  br label %if.end293, !dbg !8929

if.else252:                                       ; preds = %if.else208
  br label %while.cond253, !dbg !8930

while.cond253:                                    ; preds = %cond.end266, %if.else252
  %132 = load i32, i32* %k, align 4, !dbg !8930
  %cmp254 = icmp ult i32 %132, 7, !dbg !8930
  br i1 %cmp254, label %while.body256, label %while.end274, !dbg !8930

while.body256:                                    ; preds = %while.cond253
  %133 = load i32, i32* @inptr, align 4, !dbg !8933
  %134 = load i32, i32* @insize, align 4, !dbg !8933
  %cmp257 = icmp ult i32 %133, %134, !dbg !8933
  br i1 %cmp257, label %cond.true259, label %cond.false264, !dbg !8933

cond.true259:                                     ; preds = %while.body256
  %135 = load i32, i32* @inptr, align 4, !dbg !8933
  %inc260 = add i32 %135, 1, !dbg !8933
  store i32 %inc260, i32* @inptr, align 4, !dbg !8933
  %idxprom261 = zext i32 %135 to i64, !dbg !8933
  %arrayidx262 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom261, !dbg !8933, !ctir !231
  %136 = load i8, i8* %arrayidx262, align 1, !dbg !8933
  %conv263 = zext i8 %136 to i32, !dbg !8933
  br label %cond.end266, !dbg !8933

cond.false264:                                    ; preds = %while.body256
  %137 = load i32, i32* %w, align 4, !dbg !8933
  store i32 %137, i32* @outcnt, align 4, !dbg !8933
  %call265 = call i32 @fill_inbuf(i32 0), !dbg !8933
  br label %cond.end266, !dbg !8933

cond.end266:                                      ; preds = %cond.false264, %cond.true259
  %cond267 = phi i32 [ %conv263, %cond.true259 ], [ %call265, %cond.false264 ], !dbg !8933
  %conv268 = trunc i32 %cond267 to i8, !dbg !8933
  %conv269 = zext i8 %conv268 to i64, !dbg !8933
  %138 = load i32, i32* %k, align 4, !dbg !8933
  %sh_prom270 = zext i32 %138 to i64, !dbg !8933
  %shl271 = shl i64 %conv269, %sh_prom270, !dbg !8933
  %139 = load i64, i64* %b, align 8, !dbg !8933
  %or272 = or i64 %139, %shl271, !dbg !8933
  store i64 %or272, i64* %b, align 8, !dbg !8933
  %140 = load i32, i32* %k, align 4, !dbg !8933
  %add273 = add i32 %140, 8, !dbg !8933
  store i32 %add273, i32* %k, align 4, !dbg !8933
  br label %while.cond253, !dbg !8930, !llvm.loop !8935

while.end274:                                     ; preds = %while.cond253
  %141 = load i64, i64* %b, align 8, !dbg !8936
  %conv275 = trunc i64 %141 to i32, !dbg !8937
  %and276 = and i32 %conv275, 127, !dbg !8938
  %add277 = add i32 11, %and276, !dbg !8939
  store i32 %add277, i32* %j, align 4, !dbg !8940
  %142 = load i64, i64* %b, align 8, !dbg !8941
  %shr278 = lshr i64 %142, 7, !dbg !8941
  store i64 %shr278, i64* %b, align 8, !dbg !8941
  %143 = load i32, i32* %k, align 4, !dbg !8941
  %sub279 = sub i32 %143, 7, !dbg !8941
  store i32 %sub279, i32* %k, align 4, !dbg !8941
  %144 = load i32, i32* %i, align 4, !dbg !8943
  %145 = load i32, i32* %j, align 4, !dbg !8945
  %add280 = add i32 %144, %145, !dbg !8946
  %146 = load i32, i32* %n, align 4, !dbg !8947
  %cmp281 = icmp ugt i32 %add280, %146, !dbg !8948
  br i1 %cmp281, label %if.then283, label %if.end284, !dbg !8949

if.then283:                                       ; preds = %while.end274
  store i32 1, i32* %retval, align 4, !dbg !8950
  br label %return, !dbg !8950

if.end284:                                        ; preds = %while.end274
  br label %while.cond285, !dbg !8951

while.cond285:                                    ; preds = %while.body288, %if.end284
  %147 = load i32, i32* %j, align 4, !dbg !8952
  %dec286 = add i32 %147, -1, !dbg !8952
  store i32 %dec286, i32* %j, align 4, !dbg !8952
  %tobool287 = icmp ne i32 %147, 0, !dbg !8951
  br i1 %tobool287, label %while.body288, label %while.end292, !dbg !8951

while.body288:                                    ; preds = %while.cond285
  %148 = load i32, i32* %i, align 4, !dbg !8953
  %inc289 = add nsw i32 %148, 1, !dbg !8953
  store i32 %inc289, i32* %i, align 4, !dbg !8953
  %idxprom290 = sext i32 %148 to i64, !dbg !8954
  %arrayidx291 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 %idxprom290, !dbg !8954, !ctir !241
  store i32 0, i32* %arrayidx291, align 4, !dbg !8955
  br label %while.cond285, !dbg !8951, !llvm.loop !8956

while.end292:                                     ; preds = %while.cond285
  store i32 0, i32* %l, align 4, !dbg !8958
  br label %if.end293

if.end293:                                        ; preds = %while.end292, %while.end251
  br label %if.end294

if.end294:                                        ; preds = %if.end293, %while.end207
  br label %if.end295

if.end295:                                        ; preds = %if.end294, %if.then163
  br label %while.cond126, !dbg !8828, !llvm.loop !8959

while.end296:                                     ; preds = %while.cond126
  %149 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !8961
  %call297 = call i32 @huft_free(%struct.huft* %149), !dbg !8962
  %150 = load i64, i64* %b, align 8, !dbg !8963
  store i64 %150, i64* @bb, align 8, !dbg !8964
  %151 = load i32, i32* %k, align 4, !dbg !8965
  store i32 %151, i32* @bk, align 4, !dbg !8966
  %152 = load i32, i32* @lbits, align 4, !dbg !8967
  store i32 %152, i32* %bl, align 4, !dbg !8968
  %arraydecay298 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 0, !dbg !8969, !ctir !241
  %153 = load i32, i32* %nl, align 4, !dbg !8971
  %call299 = call i32 @huft_build(i32* %arraydecay298, i32 %153, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i64 0, i64 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i64 0, i64 0), %struct.huft** %tl, i32* %bl), !dbg !8972
  store i32 %call299, i32* %i, align 4, !dbg !8973
  %cmp300 = icmp ne i32 %call299, 0, !dbg !8974
  br i1 %cmp300, label %if.then302, label %if.end309, !dbg !8975

if.then302:                                       ; preds = %while.end296
  %154 = load i32, i32* %i, align 4, !dbg !8976
  %cmp303 = icmp eq i32 %154, 1, !dbg !8979
  br i1 %cmp303, label %if.then305, label %if.end308, !dbg !8980

if.then305:                                       ; preds = %if.then302
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8981
  %call306 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %155, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.50, i64 0, i64 0)), !dbg !8983
  %156 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !8984
  %call307 = call i32 @huft_free(%struct.huft* %156), !dbg !8985
  br label %if.end308, !dbg !8986

if.end308:                                        ; preds = %if.then305, %if.then302
  %157 = load i32, i32* %i, align 4, !dbg !8987
  store i32 %157, i32* %retval, align 4, !dbg !8988
  br label %return, !dbg !8988

if.end309:                                        ; preds = %while.end296
  %158 = load i32, i32* @dbits, align 4, !dbg !8989
  store i32 %158, i32* %bd, align 4, !dbg !8990
  %arraydecay310 = getelementptr inbounds [316 x i32], [316 x i32]* %ll, i64 0, i64 0, !dbg !8991, !ctir !241
  %159 = load i32, i32* %nl, align 4, !dbg !8993
  %idx.ext311 = zext i32 %159 to i64, !dbg !8994
  %add.ptr312 = getelementptr inbounds i32, i32* %arraydecay310, i64 %idx.ext311, !dbg !8994, !ctir !6
  %160 = load i32, i32* %nd, align 4, !dbg !8995
  %call313 = call i32 @huft_build(i32* %add.ptr312, i32 %160, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i64 0, i64 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i64 0, i64 0), %struct.huft** %td, i32* %bd), !dbg !8996
  store i32 %call313, i32* %i, align 4, !dbg !8997
  %cmp314 = icmp ne i32 %call313, 0, !dbg !8998
  br i1 %cmp314, label %if.then316, label %if.end324, !dbg !8999

if.then316:                                       ; preds = %if.end309
  %161 = load i32, i32* %i, align 4, !dbg !9000
  %cmp317 = icmp eq i32 %161, 1, !dbg !9003
  br i1 %cmp317, label %if.then319, label %if.end322, !dbg !9004

if.then319:                                       ; preds = %if.then316
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9005
  %call320 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %162, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.51, i64 0, i64 0)), !dbg !9007
  %163 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !9008
  %call321 = call i32 @huft_free(%struct.huft* %163), !dbg !9009
  br label %if.end322, !dbg !9010

if.end322:                                        ; preds = %if.then319, %if.then316
  %164 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9011
  %call323 = call i32 @huft_free(%struct.huft* %164), !dbg !9012
  %165 = load i32, i32* %i, align 4, !dbg !9013
  store i32 %165, i32* %retval, align 4, !dbg !9014
  br label %return, !dbg !9014

if.end324:                                        ; preds = %if.end309
  %166 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9015
  %167 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !9017
  %168 = load i32, i32* %bl, align 4, !dbg !9018
  %169 = load i32, i32* %bd, align 4, !dbg !9019
  %call325 = call i32 @inflate_codes(%struct.huft* %166, %struct.huft* %167, i32 %168, i32 %169), !dbg !9020
  %tobool326 = icmp ne i32 %call325, 0, !dbg !9020
  br i1 %tobool326, label %if.then327, label %if.end328, !dbg !9021

if.then327:                                       ; preds = %if.end324
  store i32 1, i32* %retval, align 4, !dbg !9022
  br label %return, !dbg !9022

if.end328:                                        ; preds = %if.end324
  %170 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9023
  %call329 = call i32 @huft_free(%struct.huft* %170), !dbg !9024
  %171 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !9025
  %call330 = call i32 @huft_free(%struct.huft* %171), !dbg !9026
  store i32 0, i32* %retval, align 4, !dbg !9027
  br label %return, !dbg !9027

return:                                           ; preds = %if.end328, %if.then327, %if.end322, %if.end308, %if.then283, %if.then242, %if.then200, %if.then120, %if.end116, %if.then
  %172 = load i32, i32* %retval, align 4, !dbg !9028
  ret i32 %172, !dbg !9028
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate_stored() #0 !dbg !9029 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4, !ctir !6
  %w = alloca i32, align 4, !ctir !6
  %b = alloca i64, align 8, !ctir !51
  %k = alloca i32, align 4, !ctir !6
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9030, metadata !DIExpression()), !dbg !9031
  call void @llvm.dbg.declare(metadata i32* %w, metadata !9032, metadata !DIExpression()), !dbg !9033
  call void @llvm.dbg.declare(metadata i64* %b, metadata !9034, metadata !DIExpression()), !dbg !9035
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9036, metadata !DIExpression()), !dbg !9037
  %0 = load i64, i64* @bb, align 8, !dbg !9038
  store i64 %0, i64* %b, align 8, !dbg !9039
  %1 = load i32, i32* @bk, align 4, !dbg !9040
  store i32 %1, i32* %k, align 4, !dbg !9041
  %2 = load i32, i32* @outcnt, align 4, !dbg !9042
  store i32 %2, i32* %w, align 4, !dbg !9043
  %3 = load i32, i32* %k, align 4, !dbg !9044
  %and = and i32 %3, 7, !dbg !9045
  store i32 %and, i32* %n, align 4, !dbg !9046
  %4 = load i32, i32* %n, align 4, !dbg !9047
  %5 = load i64, i64* %b, align 8, !dbg !9047
  %sh_prom = zext i32 %4 to i64, !dbg !9047
  %shr = lshr i64 %5, %sh_prom, !dbg !9047
  store i64 %shr, i64* %b, align 8, !dbg !9047
  %6 = load i32, i32* %n, align 4, !dbg !9047
  %7 = load i32, i32* %k, align 4, !dbg !9047
  %sub = sub i32 %7, %6, !dbg !9047
  store i32 %sub, i32* %k, align 4, !dbg !9047
  br label %while.cond, !dbg !9049

while.cond:                                       ; preds = %cond.end, %entry
  %8 = load i32, i32* %k, align 4, !dbg !9049
  %cmp = icmp ult i32 %8, 16, !dbg !9049
  br i1 %cmp, label %while.body, label %while.end, !dbg !9049

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* @inptr, align 4, !dbg !9051
  %10 = load i32, i32* @insize, align 4, !dbg !9051
  %cmp1 = icmp ult i32 %9, %10, !dbg !9051
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !9051

cond.true:                                        ; preds = %while.body
  %11 = load i32, i32* @inptr, align 4, !dbg !9051
  %inc = add i32 %11, 1, !dbg !9051
  store i32 %inc, i32* @inptr, align 4, !dbg !9051
  %idxprom = zext i32 %11 to i64, !dbg !9051
  %arrayidx = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom, !dbg !9051, !ctir !231
  %12 = load i8, i8* %arrayidx, align 1, !dbg !9051
  %conv = zext i8 %12 to i32, !dbg !9051
  br label %cond.end, !dbg !9051

cond.false:                                       ; preds = %while.body
  %13 = load i32, i32* %w, align 4, !dbg !9051
  store i32 %13, i32* @outcnt, align 4, !dbg !9051
  %call = call i32 @fill_inbuf(i32 0), !dbg !9051
  br label %cond.end, !dbg !9051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %call, %cond.false ], !dbg !9051
  %conv2 = trunc i32 %cond to i8, !dbg !9051
  %conv3 = zext i8 %conv2 to i64, !dbg !9051
  %14 = load i32, i32* %k, align 4, !dbg !9051
  %sh_prom4 = zext i32 %14 to i64, !dbg !9051
  %shl = shl i64 %conv3, %sh_prom4, !dbg !9051
  %15 = load i64, i64* %b, align 8, !dbg !9051
  %or = or i64 %15, %shl, !dbg !9051
  store i64 %or, i64* %b, align 8, !dbg !9051
  %16 = load i32, i32* %k, align 4, !dbg !9051
  %add = add i32 %16, 8, !dbg !9051
  store i32 %add, i32* %k, align 4, !dbg !9051
  br label %while.cond, !dbg !9049, !llvm.loop !9053

while.end:                                        ; preds = %while.cond
  %17 = load i64, i64* %b, align 8, !dbg !9054
  %conv5 = trunc i64 %17 to i32, !dbg !9055
  %and6 = and i32 %conv5, 65535, !dbg !9056
  store i32 %and6, i32* %n, align 4, !dbg !9057
  %18 = load i64, i64* %b, align 8, !dbg !9058
  %shr7 = lshr i64 %18, 16, !dbg !9058
  store i64 %shr7, i64* %b, align 8, !dbg !9058
  %19 = load i32, i32* %k, align 4, !dbg !9058
  %sub8 = sub i32 %19, 16, !dbg !9058
  store i32 %sub8, i32* %k, align 4, !dbg !9058
  br label %while.cond9, !dbg !9060

while.cond9:                                      ; preds = %cond.end22, %while.end
  %20 = load i32, i32* %k, align 4, !dbg !9060
  %cmp10 = icmp ult i32 %20, 16, !dbg !9060
  br i1 %cmp10, label %while.body12, label %while.end30, !dbg !9060

while.body12:                                     ; preds = %while.cond9
  %21 = load i32, i32* @inptr, align 4, !dbg !9062
  %22 = load i32, i32* @insize, align 4, !dbg !9062
  %cmp13 = icmp ult i32 %21, %22, !dbg !9062
  br i1 %cmp13, label %cond.true15, label %cond.false20, !dbg !9062

cond.true15:                                      ; preds = %while.body12
  %23 = load i32, i32* @inptr, align 4, !dbg !9062
  %inc16 = add i32 %23, 1, !dbg !9062
  store i32 %inc16, i32* @inptr, align 4, !dbg !9062
  %idxprom17 = zext i32 %23 to i64, !dbg !9062
  %arrayidx18 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom17, !dbg !9062, !ctir !231
  %24 = load i8, i8* %arrayidx18, align 1, !dbg !9062
  %conv19 = zext i8 %24 to i32, !dbg !9062
  br label %cond.end22, !dbg !9062

cond.false20:                                     ; preds = %while.body12
  %25 = load i32, i32* %w, align 4, !dbg !9062
  store i32 %25, i32* @outcnt, align 4, !dbg !9062
  %call21 = call i32 @fill_inbuf(i32 0), !dbg !9062
  br label %cond.end22, !dbg !9062

cond.end22:                                       ; preds = %cond.false20, %cond.true15
  %cond23 = phi i32 [ %conv19, %cond.true15 ], [ %call21, %cond.false20 ], !dbg !9062
  %conv24 = trunc i32 %cond23 to i8, !dbg !9062
  %conv25 = zext i8 %conv24 to i64, !dbg !9062
  %26 = load i32, i32* %k, align 4, !dbg !9062
  %sh_prom26 = zext i32 %26 to i64, !dbg !9062
  %shl27 = shl i64 %conv25, %sh_prom26, !dbg !9062
  %27 = load i64, i64* %b, align 8, !dbg !9062
  %or28 = or i64 %27, %shl27, !dbg !9062
  store i64 %or28, i64* %b, align 8, !dbg !9062
  %28 = load i32, i32* %k, align 4, !dbg !9062
  %add29 = add i32 %28, 8, !dbg !9062
  store i32 %add29, i32* %k, align 4, !dbg !9062
  br label %while.cond9, !dbg !9060, !llvm.loop !9064

while.end30:                                      ; preds = %while.cond9
  %29 = load i32, i32* %n, align 4, !dbg !9065
  %30 = load i64, i64* %b, align 8, !dbg !9067
  %neg = xor i64 %30, -1, !dbg !9068
  %and31 = and i64 %neg, 65535, !dbg !9069
  %conv32 = trunc i64 %and31 to i32, !dbg !9070
  %cmp33 = icmp ne i32 %29, %conv32, !dbg !9071
  br i1 %cmp33, label %if.then, label %if.end, !dbg !9072

if.then:                                          ; preds = %while.end30
  store i32 1, i32* %retval, align 4, !dbg !9073
  br label %return, !dbg !9073

if.end:                                           ; preds = %while.end30
  %31 = load i64, i64* %b, align 8, !dbg !9074
  %shr35 = lshr i64 %31, 16, !dbg !9074
  store i64 %shr35, i64* %b, align 8, !dbg !9074
  %32 = load i32, i32* %k, align 4, !dbg !9074
  %sub36 = sub i32 %32, 16, !dbg !9074
  store i32 %sub36, i32* %k, align 4, !dbg !9074
  br label %while.cond37, !dbg !9076

while.cond37:                                     ; preds = %if.end68, %if.end
  %33 = load i32, i32* %n, align 4, !dbg !9077
  %dec = add i32 %33, -1, !dbg !9077
  store i32 %dec, i32* %n, align 4, !dbg !9077
  %tobool = icmp ne i32 %33, 0, !dbg !9076
  br i1 %tobool, label %while.body38, label %while.end71, !dbg !9076

while.body38:                                     ; preds = %while.cond37
  br label %while.cond39, !dbg !9078

while.cond39:                                     ; preds = %cond.end52, %while.body38
  %34 = load i32, i32* %k, align 4, !dbg !9078
  %cmp40 = icmp ult i32 %34, 8, !dbg !9078
  br i1 %cmp40, label %while.body42, label %while.end60, !dbg !9078

while.body42:                                     ; preds = %while.cond39
  %35 = load i32, i32* @inptr, align 4, !dbg !9081
  %36 = load i32, i32* @insize, align 4, !dbg !9081
  %cmp43 = icmp ult i32 %35, %36, !dbg !9081
  br i1 %cmp43, label %cond.true45, label %cond.false50, !dbg !9081

cond.true45:                                      ; preds = %while.body42
  %37 = load i32, i32* @inptr, align 4, !dbg !9081
  %inc46 = add i32 %37, 1, !dbg !9081
  store i32 %inc46, i32* @inptr, align 4, !dbg !9081
  %idxprom47 = zext i32 %37 to i64, !dbg !9081
  %arrayidx48 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom47, !dbg !9081, !ctir !231
  %38 = load i8, i8* %arrayidx48, align 1, !dbg !9081
  %conv49 = zext i8 %38 to i32, !dbg !9081
  br label %cond.end52, !dbg !9081

cond.false50:                                     ; preds = %while.body42
  %39 = load i32, i32* %w, align 4, !dbg !9081
  store i32 %39, i32* @outcnt, align 4, !dbg !9081
  %call51 = call i32 @fill_inbuf(i32 0), !dbg !9081
  br label %cond.end52, !dbg !9081

cond.end52:                                       ; preds = %cond.false50, %cond.true45
  %cond53 = phi i32 [ %conv49, %cond.true45 ], [ %call51, %cond.false50 ], !dbg !9081
  %conv54 = trunc i32 %cond53 to i8, !dbg !9081
  %conv55 = zext i8 %conv54 to i64, !dbg !9081
  %40 = load i32, i32* %k, align 4, !dbg !9081
  %sh_prom56 = zext i32 %40 to i64, !dbg !9081
  %shl57 = shl i64 %conv55, %sh_prom56, !dbg !9081
  %41 = load i64, i64* %b, align 8, !dbg !9081
  %or58 = or i64 %41, %shl57, !dbg !9081
  store i64 %or58, i64* %b, align 8, !dbg !9081
  %42 = load i32, i32* %k, align 4, !dbg !9081
  %add59 = add i32 %42, 8, !dbg !9081
  store i32 %add59, i32* %k, align 4, !dbg !9081
  br label %while.cond39, !dbg !9078, !llvm.loop !9083

while.end60:                                      ; preds = %while.cond39
  %43 = load i64, i64* %b, align 8, !dbg !9084
  %conv61 = trunc i64 %43 to i8, !dbg !9085
  %44 = load i32, i32* %w, align 4, !dbg !9086
  %inc62 = add i32 %44, 1, !dbg !9086
  store i32 %inc62, i32* %w, align 4, !dbg !9086
  %idxprom63 = zext i32 %44 to i64, !dbg !9087
  %arrayidx64 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom63, !dbg !9087, !ctir !234
  store i8 %conv61, i8* %arrayidx64, align 1, !dbg !9088
  %45 = load i32, i32* %w, align 4, !dbg !9089
  %cmp65 = icmp eq i32 %45, 32768, !dbg !9091
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !9092

if.then67:                                        ; preds = %while.end60
  %46 = load i32, i32* %w, align 4, !dbg !9093
  store i32 %46, i32* @outcnt, align 4, !dbg !9093
  call void @flush_window(), !dbg !9093
  store i32 0, i32* %w, align 4, !dbg !9095
  br label %if.end68, !dbg !9096

if.end68:                                         ; preds = %if.then67, %while.end60
  %47 = load i64, i64* %b, align 8, !dbg !9097
  %shr69 = lshr i64 %47, 8, !dbg !9097
  store i64 %shr69, i64* %b, align 8, !dbg !9097
  %48 = load i32, i32* %k, align 4, !dbg !9097
  %sub70 = sub i32 %48, 8, !dbg !9097
  store i32 %sub70, i32* %k, align 4, !dbg !9097
  br label %while.cond37, !dbg !9076, !llvm.loop !9099

while.end71:                                      ; preds = %while.cond37
  %49 = load i32, i32* %w, align 4, !dbg !9101
  store i32 %49, i32* @outcnt, align 4, !dbg !9102
  %50 = load i64, i64* %b, align 8, !dbg !9103
  store i64 %50, i64* @bb, align 8, !dbg !9104
  %51 = load i32, i32* %k, align 4, !dbg !9105
  store i32 %51, i32* @bk, align 4, !dbg !9106
  store i32 0, i32* %retval, align 4, !dbg !9107
  br label %return, !dbg !9107

return:                                           ; preds = %while.end71, %if.then
  %52 = load i32, i32* %retval, align 4, !dbg !9108
  ret i32 %52, !dbg !9108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate_fixed() #0 !dbg !9109 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4, !ctir !12
  %tl = alloca %struct.huft*, align 8, !ctir !41
  %td = alloca %struct.huft*, align 8, !ctir !41
  %bl = alloca i32, align 4, !ctir !12
  %bd = alloca i32, align 4, !ctir !12
  %l = alloca [288 x i32], align 16, !ctir !228
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9110, metadata !DIExpression()), !dbg !9111
  call void @llvm.dbg.declare(metadata %struct.huft** %tl, metadata !9112, metadata !DIExpression()), !dbg !9113
  call void @llvm.dbg.declare(metadata %struct.huft** %td, metadata !9114, metadata !DIExpression()), !dbg !9115
  call void @llvm.dbg.declare(metadata i32* %bl, metadata !9116, metadata !DIExpression()), !dbg !9117
  call void @llvm.dbg.declare(metadata i32* %bd, metadata !9118, metadata !DIExpression()), !dbg !9119
  call void @llvm.dbg.declare(metadata [288 x i32]* %l, metadata !9120, metadata !DIExpression()), !dbg !9121
  store i32 0, i32* %i, align 4, !dbg !9122
  br label %for.cond, !dbg !9124

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9125
  %cmp = icmp slt i32 %0, 144, !dbg !9127
  br i1 %cmp, label %for.body, label %for.end, !dbg !9128

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !9129
  %idxprom = sext i32 %1 to i64, !dbg !9130
  %arrayidx = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 %idxprom, !dbg !9130, !ctir !228
  store i32 8, i32* %arrayidx, align 4, !dbg !9131
  br label %for.inc, !dbg !9130

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !9132
  %inc = add nsw i32 %2, 1, !dbg !9132
  store i32 %inc, i32* %i, align 4, !dbg !9132
  br label %for.cond, !dbg !9133, !llvm.loop !9134

for.end:                                          ; preds = %for.cond
  br label %for.cond1, !dbg !9136

for.cond1:                                        ; preds = %for.inc6, %for.end
  %3 = load i32, i32* %i, align 4, !dbg !9137
  %cmp2 = icmp slt i32 %3, 256, !dbg !9140
  br i1 %cmp2, label %for.body3, label %for.end8, !dbg !9141

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4, !dbg !9142
  %idxprom4 = sext i32 %4 to i64, !dbg !9143
  %arrayidx5 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 %idxprom4, !dbg !9143, !ctir !228
  store i32 9, i32* %arrayidx5, align 4, !dbg !9144
  br label %for.inc6, !dbg !9143

for.inc6:                                         ; preds = %for.body3
  %5 = load i32, i32* %i, align 4, !dbg !9145
  %inc7 = add nsw i32 %5, 1, !dbg !9145
  store i32 %inc7, i32* %i, align 4, !dbg !9145
  br label %for.cond1, !dbg !9146, !llvm.loop !9147

for.end8:                                         ; preds = %for.cond1
  br label %for.cond9, !dbg !9149

for.cond9:                                        ; preds = %for.inc14, %for.end8
  %6 = load i32, i32* %i, align 4, !dbg !9150
  %cmp10 = icmp slt i32 %6, 280, !dbg !9153
  br i1 %cmp10, label %for.body11, label %for.end16, !dbg !9154

for.body11:                                       ; preds = %for.cond9
  %7 = load i32, i32* %i, align 4, !dbg !9155
  %idxprom12 = sext i32 %7 to i64, !dbg !9156
  %arrayidx13 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 %idxprom12, !dbg !9156, !ctir !228
  store i32 7, i32* %arrayidx13, align 4, !dbg !9157
  br label %for.inc14, !dbg !9156

for.inc14:                                        ; preds = %for.body11
  %8 = load i32, i32* %i, align 4, !dbg !9158
  %inc15 = add nsw i32 %8, 1, !dbg !9158
  store i32 %inc15, i32* %i, align 4, !dbg !9158
  br label %for.cond9, !dbg !9159, !llvm.loop !9160

for.end16:                                        ; preds = %for.cond9
  br label %for.cond17, !dbg !9162

for.cond17:                                       ; preds = %for.inc22, %for.end16
  %9 = load i32, i32* %i, align 4, !dbg !9163
  %cmp18 = icmp slt i32 %9, 288, !dbg !9166
  br i1 %cmp18, label %for.body19, label %for.end24, !dbg !9167

for.body19:                                       ; preds = %for.cond17
  %10 = load i32, i32* %i, align 4, !dbg !9168
  %idxprom20 = sext i32 %10 to i64, !dbg !9169
  %arrayidx21 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 %idxprom20, !dbg !9169, !ctir !228
  store i32 8, i32* %arrayidx21, align 4, !dbg !9170
  br label %for.inc22, !dbg !9169

for.inc22:                                        ; preds = %for.body19
  %11 = load i32, i32* %i, align 4, !dbg !9171
  %inc23 = add nsw i32 %11, 1, !dbg !9171
  store i32 %inc23, i32* %i, align 4, !dbg !9171
  br label %for.cond17, !dbg !9172, !llvm.loop !9173

for.end24:                                        ; preds = %for.cond17
  store i32 7, i32* %bl, align 4, !dbg !9175
  %arraydecay = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 0, !dbg !9176, !ctir !228
  %call = call i32 @huft_build(i32* %arraydecay, i32 288, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i64 0, i64 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i64 0, i64 0), %struct.huft** %tl, i32* %bl), !dbg !9178
  store i32 %call, i32* %i, align 4, !dbg !9179
  %cmp25 = icmp ne i32 %call, 0, !dbg !9180
  br i1 %cmp25, label %if.then, label %if.end, !dbg !9181

if.then:                                          ; preds = %for.end24
  %12 = load i32, i32* %i, align 4, !dbg !9182
  store i32 %12, i32* %retval, align 4, !dbg !9183
  br label %return, !dbg !9183

if.end:                                           ; preds = %for.end24
  store i32 0, i32* %i, align 4, !dbg !9184
  br label %for.cond26, !dbg !9186

for.cond26:                                       ; preds = %for.inc31, %if.end
  %13 = load i32, i32* %i, align 4, !dbg !9187
  %cmp27 = icmp slt i32 %13, 30, !dbg !9189
  br i1 %cmp27, label %for.body28, label %for.end33, !dbg !9190

for.body28:                                       ; preds = %for.cond26
  %14 = load i32, i32* %i, align 4, !dbg !9191
  %idxprom29 = sext i32 %14 to i64, !dbg !9192
  %arrayidx30 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 %idxprom29, !dbg !9192, !ctir !228
  store i32 5, i32* %arrayidx30, align 4, !dbg !9193
  br label %for.inc31, !dbg !9192

for.inc31:                                        ; preds = %for.body28
  %15 = load i32, i32* %i, align 4, !dbg !9194
  %inc32 = add nsw i32 %15, 1, !dbg !9194
  store i32 %inc32, i32* %i, align 4, !dbg !9194
  br label %for.cond26, !dbg !9195, !llvm.loop !9196

for.end33:                                        ; preds = %for.cond26
  store i32 5, i32* %bd, align 4, !dbg !9198
  %arraydecay34 = getelementptr inbounds [288 x i32], [288 x i32]* %l, i64 0, i64 0, !dbg !9199, !ctir !228
  %call35 = call i32 @huft_build(i32* %arraydecay34, i32 30, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i64 0, i64 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i64 0, i64 0), %struct.huft** %td, i32* %bd), !dbg !9201
  store i32 %call35, i32* %i, align 4, !dbg !9202
  %cmp36 = icmp sgt i32 %call35, 1, !dbg !9203
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !9204

if.then37:                                        ; preds = %for.end33
  %16 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9205
  %call38 = call i32 @huft_free(%struct.huft* %16), !dbg !9207
  %17 = load i32, i32* %i, align 4, !dbg !9208
  store i32 %17, i32* %retval, align 4, !dbg !9209
  br label %return, !dbg !9209

if.end39:                                         ; preds = %for.end33
  %18 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9210
  %19 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !9212
  %20 = load i32, i32* %bl, align 4, !dbg !9213
  %21 = load i32, i32* %bd, align 4, !dbg !9214
  %call40 = call i32 @inflate_codes(%struct.huft* %18, %struct.huft* %19, i32 %20, i32 %21), !dbg !9215
  %tobool = icmp ne i32 %call40, 0, !dbg !9215
  br i1 %tobool, label %if.then41, label %if.end42, !dbg !9216

if.then41:                                        ; preds = %if.end39
  store i32 1, i32* %retval, align 4, !dbg !9217
  br label %return, !dbg !9217

if.end42:                                         ; preds = %if.end39
  %22 = load %struct.huft*, %struct.huft** %tl, align 8, !dbg !9218
  %call43 = call i32 @huft_free(%struct.huft* %22), !dbg !9219
  %23 = load %struct.huft*, %struct.huft** %td, align 8, !dbg !9220
  %call44 = call i32 @huft_free(%struct.huft* %23), !dbg !9221
  store i32 0, i32* %retval, align 4, !dbg !9222
  br label %return, !dbg !9222

return:                                           ; preds = %if.end42, %if.then41, %if.then37, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !9223
  ret i32 %24, !dbg !9223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @huft_build(i32* %b, i32 %n, i32 %s, i16* %d, i16* %e, %struct.huft** %t, i32* %m) #0 !dbg !9224 {
entry:
  %retval = alloca i32, align 4
  %b.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %d.addr = alloca i16*, align 8
  %e.addr = alloca i16*, align 8
  %t.addr = alloca %struct.huft**, align 8
  %m.addr = alloca i32*, align 8
  %a = alloca i32, align 4, !ctir !6
  %c = alloca [17 x i32], align 16, !ctir !223
  %f = alloca i32, align 4, !ctir !6
  %g = alloca i32, align 4, !ctir !12
  %h = alloca i32, align 4, !ctir !12
  %i = alloca i32, align 4, !ctir !6
  %j = alloca i32, align 4, !ctir !6
  %k = alloca i32, align 4, !ctir !12
  %l = alloca i32, align 4, !ctir !12
  %p = alloca i32*, align 8, !ctir !224
  %q = alloca %struct.huft*, align 8, !ctir !41
  %r = alloca %struct.huft, align 8, !ctir !42
  %u = alloca [16 x %struct.huft*], align 16, !ctir !225
  %v = alloca [288 x i32], align 16, !ctir !228
  %w = alloca i32, align 4, !ctir !12
  %x = alloca [17 x i32], align 16, !ctir !223
  %xp = alloca i32*, align 8, !ctir !224
  %y = alloca i32, align 4, !ctir !12
  %z = alloca i32, align 4, !ctir !6
  store i32* %b, i32** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %b.addr, metadata !9228, metadata !DIExpression()), !dbg !9229
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !9230, metadata !DIExpression()), !dbg !9231
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !9232, metadata !DIExpression()), !dbg !9233
  store i16* %d, i16** %d.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %d.addr, metadata !9234, metadata !DIExpression()), !dbg !9235
  store i16* %e, i16** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %e.addr, metadata !9236, metadata !DIExpression()), !dbg !9237
  store %struct.huft** %t, %struct.huft*** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.huft*** %t.addr, metadata !9238, metadata !DIExpression()), !dbg !9239
  store i32* %m, i32** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %m.addr, metadata !9240, metadata !DIExpression()), !dbg !9241
  call void @llvm.dbg.declare(metadata i32* %a, metadata !9242, metadata !DIExpression()), !dbg !9243
  call void @llvm.dbg.declare(metadata [17 x i32]* %c, metadata !9244, metadata !DIExpression()), !dbg !9245
  call void @llvm.dbg.declare(metadata i32* %f, metadata !9246, metadata !DIExpression()), !dbg !9247
  call void @llvm.dbg.declare(metadata i32* %g, metadata !9248, metadata !DIExpression()), !dbg !9249
  call void @llvm.dbg.declare(metadata i32* %h, metadata !9250, metadata !DIExpression()), !dbg !9251
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9252, metadata !DIExpression()), !dbg !9253
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9254, metadata !DIExpression()), !dbg !9255
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9256, metadata !DIExpression()), !dbg !9257
  call void @llvm.dbg.declare(metadata i32* %l, metadata !9258, metadata !DIExpression()), !dbg !9259
  call void @llvm.dbg.declare(metadata i32** %p, metadata !9260, metadata !DIExpression()), !dbg !9261
  call void @llvm.dbg.declare(metadata %struct.huft** %q, metadata !9262, metadata !DIExpression()), !dbg !9263
  call void @llvm.dbg.declare(metadata %struct.huft* %r, metadata !9264, metadata !DIExpression()), !dbg !9265
  call void @llvm.dbg.declare(metadata [16 x %struct.huft*]* %u, metadata !9266, metadata !DIExpression()), !dbg !9267
  call void @llvm.dbg.declare(metadata [288 x i32]* %v, metadata !9268, metadata !DIExpression()), !dbg !9269
  call void @llvm.dbg.declare(metadata i32* %w, metadata !9270, metadata !DIExpression()), !dbg !9271
  call void @llvm.dbg.declare(metadata [17 x i32]* %x, metadata !9272, metadata !DIExpression()), !dbg !9273
  call void @llvm.dbg.declare(metadata i32** %xp, metadata !9274, metadata !DIExpression()), !dbg !9275
  call void @llvm.dbg.declare(metadata i32* %y, metadata !9276, metadata !DIExpression()), !dbg !9277
  call void @llvm.dbg.declare(metadata i32* %z, metadata !9278, metadata !DIExpression()), !dbg !9279
  %arraydecay = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 0, !dbg !9280, !ctir !223
  %0 = bitcast i32* %arraydecay to i8*, !dbg !9280
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 68, i1 false), !dbg !9280
  %1 = load i32*, i32** %b.addr, align 8, !dbg !9281
  store i32* %1, i32** %p, align 8, !dbg !9282
  %2 = load i32, i32* %n.addr, align 4, !dbg !9283
  store i32 %2, i32* %i, align 4, !dbg !9284
  br label %do.body, !dbg !9285

do.body:                                          ; preds = %do.cond, %entry
  %3 = load i32*, i32** %p, align 8, !dbg !9286
  %4 = load i32, i32* %3, align 4, !dbg !9288, !ctir !6
  %idxprom = zext i32 %4 to i64, !dbg !9289
  %arrayidx = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom, !dbg !9289, !ctir !223
  %5 = load i32, i32* %arrayidx, align 4, !dbg !9290
  %inc = add i32 %5, 1, !dbg !9290
  store i32 %inc, i32* %arrayidx, align 4, !dbg !9290
  %6 = load i32*, i32** %p, align 8, !dbg !9291
  %incdec.ptr = getelementptr inbounds i32, i32* %6, i32 1, !dbg !9291, !ctir !6
  store i32* %incdec.ptr, i32** %p, align 8, !dbg !9291
  br label %do.cond, !dbg !9292

do.cond:                                          ; preds = %do.body
  %7 = load i32, i32* %i, align 4, !dbg !9293
  %dec = add i32 %7, -1, !dbg !9293
  store i32 %dec, i32* %i, align 4, !dbg !9293
  %tobool = icmp ne i32 %dec, 0, !dbg !9292
  br i1 %tobool, label %do.body, label %do.end, !dbg !9292, !llvm.loop !9294

do.end:                                           ; preds = %do.cond
  %arrayidx1 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 0, !dbg !9296, !ctir !223
  %8 = load i32, i32* %arrayidx1, align 16, !dbg !9296
  %9 = load i32, i32* %n.addr, align 4, !dbg !9298
  %cmp = icmp eq i32 %8, %9, !dbg !9299
  br i1 %cmp, label %if.then, label %if.end, !dbg !9300

if.then:                                          ; preds = %do.end
  %10 = load %struct.huft**, %struct.huft*** %t.addr, align 8, !dbg !9301
  store %struct.huft* null, %struct.huft** %10, align 8, !dbg !9303, !ctir !41
  %11 = load i32*, i32** %m.addr, align 8, !dbg !9304
  store i32 0, i32* %11, align 4, !dbg !9305, !ctir !12
  store i32 0, i32* %retval, align 4, !dbg !9306
  br label %return, !dbg !9306

if.end:                                           ; preds = %do.end
  %12 = load i32*, i32** %m.addr, align 8, !dbg !9307
  %13 = load i32, i32* %12, align 4, !dbg !9308, !ctir !12
  store i32 %13, i32* %l, align 4, !dbg !9309
  store i32 1, i32* %j, align 4, !dbg !9310
  br label %for.cond, !dbg !9312

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %j, align 4, !dbg !9313
  %cmp2 = icmp ule i32 %14, 16, !dbg !9315
  br i1 %cmp2, label %for.body, label %for.end, !dbg !9316

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %j, align 4, !dbg !9317
  %idxprom3 = zext i32 %15 to i64, !dbg !9319
  %arrayidx4 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom3, !dbg !9319, !ctir !223
  %16 = load i32, i32* %arrayidx4, align 4, !dbg !9319
  %tobool5 = icmp ne i32 %16, 0, !dbg !9319
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !9320

if.then6:                                         ; preds = %for.body
  br label %for.end, !dbg !9321

if.end7:                                          ; preds = %for.body
  br label %for.inc, !dbg !9322

for.inc:                                          ; preds = %if.end7
  %17 = load i32, i32* %j, align 4, !dbg !9323
  %inc8 = add i32 %17, 1, !dbg !9323
  store i32 %inc8, i32* %j, align 4, !dbg !9323
  br label %for.cond, !dbg !9324, !llvm.loop !9325

for.end:                                          ; preds = %if.then6, %for.cond
  %18 = load i32, i32* %j, align 4, !dbg !9327
  store i32 %18, i32* %k, align 4, !dbg !9328
  %19 = load i32, i32* %l, align 4, !dbg !9329
  %20 = load i32, i32* %j, align 4, !dbg !9331
  %cmp9 = icmp ult i32 %19, %20, !dbg !9332
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !9333

if.then10:                                        ; preds = %for.end
  %21 = load i32, i32* %j, align 4, !dbg !9334
  store i32 %21, i32* %l, align 4, !dbg !9335
  br label %if.end11, !dbg !9336

if.end11:                                         ; preds = %if.then10, %for.end
  store i32 16, i32* %i, align 4, !dbg !9337
  br label %for.cond12, !dbg !9339

for.cond12:                                       ; preds = %for.inc20, %if.end11
  %22 = load i32, i32* %i, align 4, !dbg !9340
  %tobool13 = icmp ne i32 %22, 0, !dbg !9342
  br i1 %tobool13, label %for.body14, label %for.end22, !dbg !9342

for.body14:                                       ; preds = %for.cond12
  %23 = load i32, i32* %i, align 4, !dbg !9343
  %idxprom15 = zext i32 %23 to i64, !dbg !9345
  %arrayidx16 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom15, !dbg !9345, !ctir !223
  %24 = load i32, i32* %arrayidx16, align 4, !dbg !9345
  %tobool17 = icmp ne i32 %24, 0, !dbg !9345
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !9346

if.then18:                                        ; preds = %for.body14
  br label %for.end22, !dbg !9347

if.end19:                                         ; preds = %for.body14
  br label %for.inc20, !dbg !9348

for.inc20:                                        ; preds = %if.end19
  %25 = load i32, i32* %i, align 4, !dbg !9349
  %dec21 = add i32 %25, -1, !dbg !9349
  store i32 %dec21, i32* %i, align 4, !dbg !9349
  br label %for.cond12, !dbg !9350, !llvm.loop !9351

for.end22:                                        ; preds = %if.then18, %for.cond12
  %26 = load i32, i32* %i, align 4, !dbg !9353
  store i32 %26, i32* %g, align 4, !dbg !9354
  %27 = load i32, i32* %l, align 4, !dbg !9355
  %28 = load i32, i32* %i, align 4, !dbg !9357
  %cmp23 = icmp ugt i32 %27, %28, !dbg !9358
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !9359

if.then24:                                        ; preds = %for.end22
  %29 = load i32, i32* %i, align 4, !dbg !9360
  store i32 %29, i32* %l, align 4, !dbg !9361
  br label %if.end25, !dbg !9362

if.end25:                                         ; preds = %if.then24, %for.end22
  %30 = load i32, i32* %l, align 4, !dbg !9363
  %31 = load i32*, i32** %m.addr, align 8, !dbg !9364
  store i32 %30, i32* %31, align 4, !dbg !9365, !ctir !12
  %32 = load i32, i32* %j, align 4, !dbg !9366
  %shl = shl i32 1, %32, !dbg !9368
  store i32 %shl, i32* %y, align 4, !dbg !9369
  br label %for.cond26, !dbg !9370

for.cond26:                                       ; preds = %for.inc34, %if.end25
  %33 = load i32, i32* %j, align 4, !dbg !9371
  %34 = load i32, i32* %i, align 4, !dbg !9373
  %cmp27 = icmp ult i32 %33, %34, !dbg !9374
  br i1 %cmp27, label %for.body28, label %for.end37, !dbg !9375

for.body28:                                       ; preds = %for.cond26
  %35 = load i32, i32* %j, align 4, !dbg !9376
  %idxprom29 = zext i32 %35 to i64, !dbg !9378
  %arrayidx30 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom29, !dbg !9378, !ctir !223
  %36 = load i32, i32* %arrayidx30, align 4, !dbg !9378
  %37 = load i32, i32* %y, align 4, !dbg !9379
  %sub = sub i32 %37, %36, !dbg !9379
  store i32 %sub, i32* %y, align 4, !dbg !9379
  %cmp31 = icmp slt i32 %sub, 0, !dbg !9380
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !9381

if.then32:                                        ; preds = %for.body28
  store i32 2, i32* %retval, align 4, !dbg !9382
  br label %return, !dbg !9382

if.end33:                                         ; preds = %for.body28
  br label %for.inc34, !dbg !9383

for.inc34:                                        ; preds = %if.end33
  %38 = load i32, i32* %j, align 4, !dbg !9384
  %inc35 = add i32 %38, 1, !dbg !9384
  store i32 %inc35, i32* %j, align 4, !dbg !9384
  %39 = load i32, i32* %y, align 4, !dbg !9385
  %shl36 = shl i32 %39, 1, !dbg !9385
  store i32 %shl36, i32* %y, align 4, !dbg !9385
  br label %for.cond26, !dbg !9386, !llvm.loop !9387

for.end37:                                        ; preds = %for.cond26
  %40 = load i32, i32* %i, align 4, !dbg !9389
  %idxprom38 = zext i32 %40 to i64, !dbg !9391
  %arrayidx39 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom38, !dbg !9391, !ctir !223
  %41 = load i32, i32* %arrayidx39, align 4, !dbg !9391
  %42 = load i32, i32* %y, align 4, !dbg !9392
  %sub40 = sub i32 %42, %41, !dbg !9392
  store i32 %sub40, i32* %y, align 4, !dbg !9392
  %cmp41 = icmp slt i32 %sub40, 0, !dbg !9393
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !9394

if.then42:                                        ; preds = %for.end37
  store i32 2, i32* %retval, align 4, !dbg !9395
  br label %return, !dbg !9395

if.end43:                                         ; preds = %for.end37
  %43 = load i32, i32* %y, align 4, !dbg !9396
  %44 = load i32, i32* %i, align 4, !dbg !9397
  %idxprom44 = zext i32 %44 to i64, !dbg !9398
  %arrayidx45 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom44, !dbg !9398, !ctir !223
  %45 = load i32, i32* %arrayidx45, align 4, !dbg !9399
  %add = add i32 %45, %43, !dbg !9399
  store i32 %add, i32* %arrayidx45, align 4, !dbg !9399
  store i32 0, i32* %j, align 4, !dbg !9400
  %arrayidx46 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 1, !dbg !9401, !ctir !223
  store i32 0, i32* %arrayidx46, align 4, !dbg !9402
  %arraydecay47 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 0, !dbg !9403, !ctir !223
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay47, i64 1, !dbg !9404, !ctir !6
  store i32* %add.ptr, i32** %p, align 8, !dbg !9405
  %arraydecay48 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 0, !dbg !9406, !ctir !223
  %add.ptr49 = getelementptr inbounds i32, i32* %arraydecay48, i64 2, !dbg !9407, !ctir !6
  store i32* %add.ptr49, i32** %xp, align 8, !dbg !9408
  br label %while.cond, !dbg !9409

while.cond:                                       ; preds = %while.body, %if.end43
  %46 = load i32, i32* %i, align 4, !dbg !9410
  %dec50 = add i32 %46, -1, !dbg !9410
  store i32 %dec50, i32* %i, align 4, !dbg !9410
  %tobool51 = icmp ne i32 %dec50, 0, !dbg !9409
  br i1 %tobool51, label %while.body, label %while.end, !dbg !9409

while.body:                                       ; preds = %while.cond
  %47 = load i32*, i32** %p, align 8, !dbg !9411
  %incdec.ptr52 = getelementptr inbounds i32, i32* %47, i32 1, !dbg !9411, !ctir !6
  store i32* %incdec.ptr52, i32** %p, align 8, !dbg !9411
  %48 = load i32, i32* %47, align 4, !dbg !9413, !ctir !6
  %49 = load i32, i32* %j, align 4, !dbg !9414
  %add53 = add i32 %49, %48, !dbg !9414
  store i32 %add53, i32* %j, align 4, !dbg !9414
  %50 = load i32*, i32** %xp, align 8, !dbg !9415
  %incdec.ptr54 = getelementptr inbounds i32, i32* %50, i32 1, !dbg !9415, !ctir !6
  store i32* %incdec.ptr54, i32** %xp, align 8, !dbg !9415
  store i32 %add53, i32* %50, align 4, !dbg !9416, !ctir !6
  br label %while.cond, !dbg !9409, !llvm.loop !9417

while.end:                                        ; preds = %while.cond
  %51 = load i32*, i32** %b.addr, align 8, !dbg !9419
  store i32* %51, i32** %p, align 8, !dbg !9420
  store i32 0, i32* %i, align 4, !dbg !9421
  br label %do.body55, !dbg !9422

do.body55:                                        ; preds = %do.cond65, %while.end
  %52 = load i32*, i32** %p, align 8, !dbg !9423
  %incdec.ptr56 = getelementptr inbounds i32, i32* %52, i32 1, !dbg !9423, !ctir !6
  store i32* %incdec.ptr56, i32** %p, align 8, !dbg !9423
  %53 = load i32, i32* %52, align 4, !dbg !9426, !ctir !6
  store i32 %53, i32* %j, align 4, !dbg !9427
  %cmp57 = icmp ne i32 %53, 0, !dbg !9428
  br i1 %cmp57, label %if.then58, label %if.end64, !dbg !9429

if.then58:                                        ; preds = %do.body55
  %54 = load i32, i32* %i, align 4, !dbg !9430
  %55 = load i32, i32* %j, align 4, !dbg !9431
  %idxprom59 = zext i32 %55 to i64, !dbg !9432
  %arrayidx60 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 %idxprom59, !dbg !9432, !ctir !223
  %56 = load i32, i32* %arrayidx60, align 4, !dbg !9433
  %inc61 = add i32 %56, 1, !dbg !9433
  store i32 %inc61, i32* %arrayidx60, align 4, !dbg !9433
  %idxprom62 = zext i32 %56 to i64, !dbg !9434
  %arrayidx63 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i64 0, i64 %idxprom62, !dbg !9434, !ctir !228
  store i32 %54, i32* %arrayidx63, align 4, !dbg !9435
  br label %if.end64, !dbg !9434

if.end64:                                         ; preds = %if.then58, %do.body55
  br label %do.cond65, !dbg !9436

do.cond65:                                        ; preds = %if.end64
  %57 = load i32, i32* %i, align 4, !dbg !9437
  %inc66 = add i32 %57, 1, !dbg !9437
  store i32 %inc66, i32* %i, align 4, !dbg !9437
  %58 = load i32, i32* %n.addr, align 4, !dbg !9438
  %cmp67 = icmp ult i32 %inc66, %58, !dbg !9439
  br i1 %cmp67, label %do.body55, label %do.end68, !dbg !9436, !llvm.loop !9440

do.end68:                                         ; preds = %do.cond65
  %59 = load i32, i32* %g, align 4, !dbg !9442
  %idxprom69 = sext i32 %59 to i64, !dbg !9443
  %arrayidx70 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 %idxprom69, !dbg !9443, !ctir !223
  %60 = load i32, i32* %arrayidx70, align 4, !dbg !9443
  store i32 %60, i32* %n.addr, align 4, !dbg !9444
  store i32 0, i32* %i, align 4, !dbg !9445
  %arrayidx71 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 0, !dbg !9446, !ctir !223
  store i32 0, i32* %arrayidx71, align 16, !dbg !9447
  %arraydecay72 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i64 0, i64 0, !dbg !9448, !ctir !228
  store i32* %arraydecay72, i32** %p, align 8, !dbg !9449
  store i32 -1, i32* %h, align 4, !dbg !9450
  %61 = load i32, i32* %l, align 4, !dbg !9451
  %sub73 = sub nsw i32 0, %61, !dbg !9452
  store i32 %sub73, i32* %w, align 4, !dbg !9453
  %arrayidx74 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i64 0, i64 0, !dbg !9454, !ctir !225
  store %struct.huft* null, %struct.huft** %arrayidx74, align 16, !dbg !9455
  store %struct.huft* null, %struct.huft** %q, align 8, !dbg !9456
  store i32 0, i32* %z, align 4, !dbg !9457
  br label %for.cond75, !dbg !9458

for.cond75:                                       ; preds = %for.inc224, %do.end68
  %62 = load i32, i32* %k, align 4, !dbg !9459
  %63 = load i32, i32* %g, align 4, !dbg !9462
  %cmp76 = icmp sle i32 %62, %63, !dbg !9463
  br i1 %cmp76, label %for.body77, label %for.end226, !dbg !9464

for.body77:                                       ; preds = %for.cond75
  %64 = load i32, i32* %k, align 4, !dbg !9465
  %idxprom78 = sext i32 %64 to i64, !dbg !9467
  %arrayidx79 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 %idxprom78, !dbg !9467, !ctir !223
  %65 = load i32, i32* %arrayidx79, align 4, !dbg !9467
  store i32 %65, i32* %a, align 4, !dbg !9468
  br label %while.cond80, !dbg !9469

while.cond80:                                     ; preds = %while.end222, %for.body77
  %66 = load i32, i32* %a, align 4, !dbg !9470
  %dec81 = add i32 %66, -1, !dbg !9470
  store i32 %dec81, i32* %a, align 4, !dbg !9470
  %tobool82 = icmp ne i32 %66, 0, !dbg !9469
  br i1 %tobool82, label %while.body83, label %while.end223, !dbg !9469

while.body83:                                     ; preds = %while.cond80
  br label %while.cond84, !dbg !9471

while.cond84:                                     ; preds = %if.end152, %while.body83
  %67 = load i32, i32* %k, align 4, !dbg !9473
  %68 = load i32, i32* %w, align 4, !dbg !9474
  %69 = load i32, i32* %l, align 4, !dbg !9475
  %add85 = add nsw i32 %68, %69, !dbg !9476
  %cmp86 = icmp sgt i32 %67, %add85, !dbg !9477
  br i1 %cmp86, label %while.body87, label %while.end153, !dbg !9471

while.body87:                                     ; preds = %while.cond84
  %70 = load i32, i32* %h, align 4, !dbg !9478
  %inc88 = add nsw i32 %70, 1, !dbg !9478
  store i32 %inc88, i32* %h, align 4, !dbg !9478
  %71 = load i32, i32* %l, align 4, !dbg !9480
  %72 = load i32, i32* %w, align 4, !dbg !9481
  %add89 = add nsw i32 %72, %71, !dbg !9481
  store i32 %add89, i32* %w, align 4, !dbg !9481
  %73 = load i32, i32* %g, align 4, !dbg !9482
  %74 = load i32, i32* %w, align 4, !dbg !9483
  %sub90 = sub nsw i32 %73, %74, !dbg !9484
  store i32 %sub90, i32* %z, align 4, !dbg !9485
  %75 = load i32, i32* %l, align 4, !dbg !9486
  %cmp91 = icmp ugt i32 %sub90, %75, !dbg !9487
  br i1 %cmp91, label %cond.true, label %cond.false, !dbg !9488

cond.true:                                        ; preds = %while.body87
  %76 = load i32, i32* %l, align 4, !dbg !9489
  br label %cond.end, !dbg !9488

cond.false:                                       ; preds = %while.body87
  %77 = load i32, i32* %z, align 4, !dbg !9490
  br label %cond.end, !dbg !9488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %76, %cond.true ], [ %77, %cond.false ], !dbg !9488
  store i32 %cond, i32* %z, align 4, !dbg !9491
  %78 = load i32, i32* %k, align 4, !dbg !9492
  %79 = load i32, i32* %w, align 4, !dbg !9494
  %sub92 = sub nsw i32 %78, %79, !dbg !9495
  store i32 %sub92, i32* %j, align 4, !dbg !9496
  %shl93 = shl i32 1, %sub92, !dbg !9497
  store i32 %shl93, i32* %f, align 4, !dbg !9498
  %80 = load i32, i32* %a, align 4, !dbg !9499
  %add94 = add i32 %80, 1, !dbg !9500
  %cmp95 = icmp ugt i32 %shl93, %add94, !dbg !9501
  br i1 %cmp95, label %if.then96, label %if.end115, !dbg !9502

if.then96:                                        ; preds = %cond.end
  %81 = load i32, i32* %a, align 4, !dbg !9503
  %add97 = add i32 %81, 1, !dbg !9505
  %82 = load i32, i32* %f, align 4, !dbg !9506
  %sub98 = sub i32 %82, %add97, !dbg !9506
  store i32 %sub98, i32* %f, align 4, !dbg !9506
  %arraydecay99 = getelementptr inbounds [17 x i32], [17 x i32]* %c, i64 0, i64 0, !dbg !9507, !ctir !223
  %83 = load i32, i32* %k, align 4, !dbg !9508
  %idx.ext = sext i32 %83 to i64, !dbg !9509
  %add.ptr100 = getelementptr inbounds i32, i32* %arraydecay99, i64 %idx.ext, !dbg !9509, !ctir !6
  store i32* %add.ptr100, i32** %xp, align 8, !dbg !9510
  %84 = load i32, i32* %j, align 4, !dbg !9511
  %85 = load i32, i32* %z, align 4, !dbg !9513
  %cmp101 = icmp ult i32 %84, %85, !dbg !9514
  br i1 %cmp101, label %if.then102, label %if.end114, !dbg !9515

if.then102:                                       ; preds = %if.then96
  br label %while.cond103, !dbg !9516

while.cond103:                                    ; preds = %if.end111, %if.then102
  %86 = load i32, i32* %j, align 4, !dbg !9517
  %inc104 = add i32 %86, 1, !dbg !9517
  store i32 %inc104, i32* %j, align 4, !dbg !9517
  %87 = load i32, i32* %z, align 4, !dbg !9518
  %cmp105 = icmp ult i32 %inc104, %87, !dbg !9519
  br i1 %cmp105, label %while.body106, label %while.end113, !dbg !9516

while.body106:                                    ; preds = %while.cond103
  %88 = load i32, i32* %f, align 4, !dbg !9520
  %shl107 = shl i32 %88, 1, !dbg !9520
  store i32 %shl107, i32* %f, align 4, !dbg !9520
  %89 = load i32*, i32** %xp, align 8, !dbg !9523
  %incdec.ptr108 = getelementptr inbounds i32, i32* %89, i32 1, !dbg !9523, !ctir !6
  store i32* %incdec.ptr108, i32** %xp, align 8, !dbg !9523
  %90 = load i32, i32* %incdec.ptr108, align 4, !dbg !9524, !ctir !6
  %cmp109 = icmp ule i32 %shl107, %90, !dbg !9525
  br i1 %cmp109, label %if.then110, label %if.end111, !dbg !9526

if.then110:                                       ; preds = %while.body106
  br label %while.end113, !dbg !9527

if.end111:                                        ; preds = %while.body106
  %91 = load i32*, i32** %xp, align 8, !dbg !9528
  %92 = load i32, i32* %91, align 4, !dbg !9529, !ctir !6
  %93 = load i32, i32* %f, align 4, !dbg !9530
  %sub112 = sub i32 %93, %92, !dbg !9530
  store i32 %sub112, i32* %f, align 4, !dbg !9530
  br label %while.cond103, !dbg !9516, !llvm.loop !9531

while.end113:                                     ; preds = %if.then110, %while.cond103
  br label %if.end114, !dbg !9516

if.end114:                                        ; preds = %while.end113, %if.then96
  br label %if.end115, !dbg !9533

if.end115:                                        ; preds = %if.end114, %cond.end
  %94 = load i32, i32* %j, align 4, !dbg !9534
  %shl116 = shl i32 1, %94, !dbg !9535
  store i32 %shl116, i32* %z, align 4, !dbg !9536
  %95 = load i32, i32* %z, align 4, !dbg !9537
  %add117 = add i32 %95, 1, !dbg !9539
  %conv = zext i32 %add117 to i64, !dbg !9540
  %mul = mul i64 %conv, 16, !dbg !9541
  %call = call noalias i8* @malloc(i64 %mul) #11, !dbg !9542
  %96 = bitcast i8* %call to %struct.huft*, !dbg !9543
  store %struct.huft* %96, %struct.huft** %q, align 8, !dbg !9544
  %cmp118 = icmp eq %struct.huft* %96, null, !dbg !9545
  br i1 %cmp118, label %if.then120, label %if.end126, !dbg !9546

if.then120:                                       ; preds = %if.end115
  %97 = load i32, i32* %h, align 4, !dbg !9547
  %tobool121 = icmp ne i32 %97, 0, !dbg !9547
  br i1 %tobool121, label %if.then122, label %if.end125, !dbg !9550

if.then122:                                       ; preds = %if.then120
  %arrayidx123 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i64 0, i64 0, !dbg !9551, !ctir !225
  %98 = load %struct.huft*, %struct.huft** %arrayidx123, align 16, !dbg !9551
  %call124 = call i32 @huft_free(%struct.huft* %98), !dbg !9552
  br label %if.end125, !dbg !9552

if.end125:                                        ; preds = %if.then122, %if.then120
  store i32 3, i32* %retval, align 4, !dbg !9553
  br label %return, !dbg !9553

if.end126:                                        ; preds = %if.end115
  %99 = load i32, i32* %z, align 4, !dbg !9554
  %add127 = add i32 %99, 1, !dbg !9555
  %100 = load i32, i32* @hufts, align 4, !dbg !9556
  %add128 = add i32 %100, %add127, !dbg !9556
  store i32 %add128, i32* @hufts, align 4, !dbg !9556
  %101 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9557
  %add.ptr129 = getelementptr inbounds %struct.huft, %struct.huft* %101, i64 1, !dbg !9558, !ctir !42
  %102 = load %struct.huft**, %struct.huft*** %t.addr, align 8, !dbg !9559
  store %struct.huft* %add.ptr129, %struct.huft** %102, align 8, !dbg !9560, !ctir !41
  %103 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9561
  %v130 = getelementptr inbounds %struct.huft, %struct.huft* %103, i32 0, i32 2, !dbg !9562, !ctir !42
  %t131 = bitcast %union.anon* %v130 to %struct.huft**, !dbg !9563
  store %struct.huft** %t131, %struct.huft*** %t.addr, align 8, !dbg !9564
  store %struct.huft* null, %struct.huft** %t131, align 8, !dbg !9565, !ctir !41
  %104 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9566
  %incdec.ptr132 = getelementptr inbounds %struct.huft, %struct.huft* %104, i32 1, !dbg !9566, !ctir !42
  store %struct.huft* %incdec.ptr132, %struct.huft** %q, align 8, !dbg !9566
  %105 = load i32, i32* %h, align 4, !dbg !9567
  %idxprom133 = sext i32 %105 to i64, !dbg !9568
  %arrayidx134 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i64 0, i64 %idxprom133, !dbg !9568, !ctir !225
  store %struct.huft* %incdec.ptr132, %struct.huft** %arrayidx134, align 8, !dbg !9569
  %106 = load i32, i32* %h, align 4, !dbg !9570
  %tobool135 = icmp ne i32 %106, 0, !dbg !9570
  br i1 %tobool135, label %if.then136, label %if.end152, !dbg !9572

if.then136:                                       ; preds = %if.end126
  %107 = load i32, i32* %i, align 4, !dbg !9573
  %108 = load i32, i32* %h, align 4, !dbg !9575
  %idxprom137 = sext i32 %108 to i64, !dbg !9576
  %arrayidx138 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 %idxprom137, !dbg !9576, !ctir !223
  store i32 %107, i32* %arrayidx138, align 4, !dbg !9577
  %109 = load i32, i32* %l, align 4, !dbg !9578
  %conv139 = trunc i32 %109 to i8, !dbg !9579
  %b140 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 1, !dbg !9580, !ctir !42
  store i8 %conv139, i8* %b140, align 1, !dbg !9581, !ctir !13
  %110 = load i32, i32* %j, align 4, !dbg !9582
  %add141 = add i32 16, %110, !dbg !9583
  %conv142 = trunc i32 %add141 to i8, !dbg !9584
  %e143 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0, !dbg !9585, !ctir !42
  store i8 %conv142, i8* %e143, align 8, !dbg !9586, !ctir !13
  %111 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9587
  %v144 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2, !dbg !9588, !ctir !42
  %t145 = bitcast %union.anon* %v144 to %struct.huft**, !dbg !9589
  store %struct.huft* %111, %struct.huft** %t145, align 8, !dbg !9590, !ctir !47
  %112 = load i32, i32* %i, align 4, !dbg !9591
  %113 = load i32, i32* %w, align 4, !dbg !9592
  %114 = load i32, i32* %l, align 4, !dbg !9593
  %sub146 = sub nsw i32 %113, %114, !dbg !9594
  %shr = lshr i32 %112, %sub146, !dbg !9595
  store i32 %shr, i32* %j, align 4, !dbg !9596
  %115 = load i32, i32* %h, align 4, !dbg !9597
  %sub147 = sub nsw i32 %115, 1, !dbg !9598
  %idxprom148 = sext i32 %sub147 to i64, !dbg !9599
  %arrayidx149 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %u, i64 0, i64 %idxprom148, !dbg !9599, !ctir !225
  %116 = load %struct.huft*, %struct.huft** %arrayidx149, align 8, !dbg !9599
  %117 = load i32, i32* %j, align 4, !dbg !9600
  %idxprom150 = zext i32 %117 to i64, !dbg !9599
  %arrayidx151 = getelementptr inbounds %struct.huft, %struct.huft* %116, i64 %idxprom150, !dbg !9599, !ctir !41
  %118 = bitcast %struct.huft* %arrayidx151 to i8*, !dbg !9601
  %119 = bitcast %struct.huft* %r to i8*, !dbg !9601
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false), !dbg !9601
  br label %if.end152, !dbg !9602

if.end152:                                        ; preds = %if.then136, %if.end126
  br label %while.cond84, !dbg !9471, !llvm.loop !9603

while.end153:                                     ; preds = %while.cond84
  %120 = load i32, i32* %k, align 4, !dbg !9605
  %121 = load i32, i32* %w, align 4, !dbg !9606
  %sub154 = sub nsw i32 %120, %121, !dbg !9607
  %conv155 = trunc i32 %sub154 to i8, !dbg !9608
  %b156 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 1, !dbg !9609, !ctir !42
  store i8 %conv155, i8* %b156, align 1, !dbg !9610, !ctir !13
  %122 = load i32*, i32** %p, align 8, !dbg !9611
  %arraydecay157 = getelementptr inbounds [288 x i32], [288 x i32]* %v, i64 0, i64 0, !dbg !9613, !ctir !228
  %123 = load i32, i32* %n.addr, align 4, !dbg !9614
  %idx.ext158 = zext i32 %123 to i64, !dbg !9615
  %add.ptr159 = getelementptr inbounds i32, i32* %arraydecay157, i64 %idx.ext158, !dbg !9615, !ctir !6
  %cmp160 = icmp uge i32* %122, %add.ptr159, !dbg !9616
  br i1 %cmp160, label %if.then162, label %if.else, !dbg !9617

if.then162:                                       ; preds = %while.end153
  %e163 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0, !dbg !9618, !ctir !42
  store i8 99, i8* %e163, align 8, !dbg !9619, !ctir !13
  br label %if.end189, !dbg !9620

if.else:                                          ; preds = %while.end153
  %124 = load i32*, i32** %p, align 8, !dbg !9621
  %125 = load i32, i32* %124, align 4, !dbg !9623, !ctir !6
  %126 = load i32, i32* %s.addr, align 4, !dbg !9624
  %cmp164 = icmp ult i32 %125, %126, !dbg !9625
  br i1 %cmp164, label %if.then166, label %if.else176, !dbg !9626

if.then166:                                       ; preds = %if.else
  %127 = load i32*, i32** %p, align 8, !dbg !9627
  %128 = load i32, i32* %127, align 4, !dbg !9629, !ctir !6
  %cmp167 = icmp ult i32 %128, 256, !dbg !9630
  %129 = zext i1 %cmp167 to i64, !dbg !9629
  %cond169 = select i1 %cmp167, i32 16, i32 15, !dbg !9629
  %conv170 = trunc i32 %cond169 to i8, !dbg !9631
  %e171 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0, !dbg !9632, !ctir !42
  store i8 %conv170, i8* %e171, align 8, !dbg !9633, !ctir !13
  %130 = load i32*, i32** %p, align 8, !dbg !9634
  %131 = load i32, i32* %130, align 4, !dbg !9635, !ctir !6
  %conv172 = trunc i32 %131 to i16, !dbg !9636
  %v173 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2, !dbg !9637, !ctir !42
  %n174 = bitcast %union.anon* %v173 to i16*, !dbg !9638
  store i16 %conv172, i16* %n174, align 8, !dbg !9639, !ctir !47
  %132 = load i32*, i32** %p, align 8, !dbg !9640
  %incdec.ptr175 = getelementptr inbounds i32, i32* %132, i32 1, !dbg !9640, !ctir !6
  store i32* %incdec.ptr175, i32** %p, align 8, !dbg !9640
  br label %if.end188, !dbg !9641

if.else176:                                       ; preds = %if.else
  %133 = load i16*, i16** %e.addr, align 8, !dbg !9642
  %134 = load i32*, i32** %p, align 8, !dbg !9644
  %135 = load i32, i32* %134, align 4, !dbg !9645, !ctir !6
  %136 = load i32, i32* %s.addr, align 4, !dbg !9646
  %sub177 = sub i32 %135, %136, !dbg !9647
  %idxprom178 = zext i32 %sub177 to i64, !dbg !9642
  %arrayidx179 = getelementptr inbounds i16, i16* %133, i64 %idxprom178, !dbg !9642, !ctir !166
  %137 = load i16, i16* %arrayidx179, align 2, !dbg !9642
  %conv180 = trunc i16 %137 to i8, !dbg !9648
  %e181 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 0, !dbg !9649, !ctir !42
  store i8 %conv180, i8* %e181, align 8, !dbg !9650, !ctir !13
  %138 = load i16*, i16** %d.addr, align 8, !dbg !9651
  %139 = load i32*, i32** %p, align 8, !dbg !9652
  %incdec.ptr182 = getelementptr inbounds i32, i32* %139, i32 1, !dbg !9652, !ctir !6
  store i32* %incdec.ptr182, i32** %p, align 8, !dbg !9652
  %140 = load i32, i32* %139, align 4, !dbg !9653, !ctir !6
  %141 = load i32, i32* %s.addr, align 4, !dbg !9654
  %sub183 = sub i32 %140, %141, !dbg !9655
  %idxprom184 = zext i32 %sub183 to i64, !dbg !9651
  %arrayidx185 = getelementptr inbounds i16, i16* %138, i64 %idxprom184, !dbg !9651, !ctir !166
  %142 = load i16, i16* %arrayidx185, align 2, !dbg !9651
  %v186 = getelementptr inbounds %struct.huft, %struct.huft* %r, i32 0, i32 2, !dbg !9656, !ctir !42
  %n187 = bitcast %union.anon* %v186 to i16*, !dbg !9657
  store i16 %142, i16* %n187, align 8, !dbg !9658, !ctir !47
  br label %if.end188

if.end188:                                        ; preds = %if.else176, %if.then166
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then162
  %143 = load i32, i32* %k, align 4, !dbg !9659
  %144 = load i32, i32* %w, align 4, !dbg !9660
  %sub190 = sub nsw i32 %143, %144, !dbg !9661
  %shl191 = shl i32 1, %sub190, !dbg !9662
  store i32 %shl191, i32* %f, align 4, !dbg !9663
  %145 = load i32, i32* %i, align 4, !dbg !9664
  %146 = load i32, i32* %w, align 4, !dbg !9666
  %shr192 = lshr i32 %145, %146, !dbg !9667
  store i32 %shr192, i32* %j, align 4, !dbg !9668
  br label %for.cond193, !dbg !9669

for.cond193:                                      ; preds = %for.inc199, %if.end189
  %147 = load i32, i32* %j, align 4, !dbg !9670
  %148 = load i32, i32* %z, align 4, !dbg !9672
  %cmp194 = icmp ult i32 %147, %148, !dbg !9673
  br i1 %cmp194, label %for.body196, label %for.end201, !dbg !9674

for.body196:                                      ; preds = %for.cond193
  %149 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9675
  %150 = load i32, i32* %j, align 4, !dbg !9676
  %idxprom197 = zext i32 %150 to i64, !dbg !9675
  %arrayidx198 = getelementptr inbounds %struct.huft, %struct.huft* %149, i64 %idxprom197, !dbg !9675, !ctir !41
  %151 = bitcast %struct.huft* %arrayidx198 to i8*, !dbg !9677
  %152 = bitcast %struct.huft* %r to i8*, !dbg !9677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %152, i64 16, i1 false), !dbg !9677
  br label %for.inc199, !dbg !9675

for.inc199:                                       ; preds = %for.body196
  %153 = load i32, i32* %f, align 4, !dbg !9678
  %154 = load i32, i32* %j, align 4, !dbg !9679
  %add200 = add i32 %154, %153, !dbg !9679
  store i32 %add200, i32* %j, align 4, !dbg !9679
  br label %for.cond193, !dbg !9680, !llvm.loop !9681

for.end201:                                       ; preds = %for.cond193
  %155 = load i32, i32* %k, align 4, !dbg !9683
  %sub202 = sub nsw i32 %155, 1, !dbg !9685
  %shl203 = shl i32 1, %sub202, !dbg !9686
  store i32 %shl203, i32* %j, align 4, !dbg !9687
  br label %for.cond204, !dbg !9688

for.cond204:                                      ; preds = %for.inc207, %for.end201
  %156 = load i32, i32* %i, align 4, !dbg !9689
  %157 = load i32, i32* %j, align 4, !dbg !9691
  %and = and i32 %156, %157, !dbg !9692
  %tobool205 = icmp ne i32 %and, 0, !dbg !9693
  br i1 %tobool205, label %for.body206, label %for.end209, !dbg !9693

for.body206:                                      ; preds = %for.cond204
  %158 = load i32, i32* %j, align 4, !dbg !9694
  %159 = load i32, i32* %i, align 4, !dbg !9695
  %xor = xor i32 %159, %158, !dbg !9695
  store i32 %xor, i32* %i, align 4, !dbg !9695
  br label %for.inc207, !dbg !9696

for.inc207:                                       ; preds = %for.body206
  %160 = load i32, i32* %j, align 4, !dbg !9697
  %shr208 = lshr i32 %160, 1, !dbg !9697
  store i32 %shr208, i32* %j, align 4, !dbg !9697
  br label %for.cond204, !dbg !9698, !llvm.loop !9699

for.end209:                                       ; preds = %for.cond204
  %161 = load i32, i32* %j, align 4, !dbg !9701
  %162 = load i32, i32* %i, align 4, !dbg !9702
  %xor210 = xor i32 %162, %161, !dbg !9702
  store i32 %xor210, i32* %i, align 4, !dbg !9702
  br label %while.cond211, !dbg !9703

while.cond211:                                    ; preds = %while.body219, %for.end209
  %163 = load i32, i32* %i, align 4, !dbg !9704
  %164 = load i32, i32* %w, align 4, !dbg !9705
  %shl212 = shl i32 1, %164, !dbg !9706
  %sub213 = sub nsw i32 %shl212, 1, !dbg !9707
  %and214 = and i32 %163, %sub213, !dbg !9708
  %165 = load i32, i32* %h, align 4, !dbg !9709
  %idxprom215 = sext i32 %165 to i64, !dbg !9710
  %arrayidx216 = getelementptr inbounds [17 x i32], [17 x i32]* %x, i64 0, i64 %idxprom215, !dbg !9710, !ctir !223
  %166 = load i32, i32* %arrayidx216, align 4, !dbg !9710
  %cmp217 = icmp ne i32 %and214, %166, !dbg !9711
  br i1 %cmp217, label %while.body219, label %while.end222, !dbg !9703

while.body219:                                    ; preds = %while.cond211
  %167 = load i32, i32* %h, align 4, !dbg !9712
  %dec220 = add nsw i32 %167, -1, !dbg !9712
  store i32 %dec220, i32* %h, align 4, !dbg !9712
  %168 = load i32, i32* %l, align 4, !dbg !9714
  %169 = load i32, i32* %w, align 4, !dbg !9715
  %sub221 = sub nsw i32 %169, %168, !dbg !9715
  store i32 %sub221, i32* %w, align 4, !dbg !9715
  br label %while.cond211, !dbg !9703, !llvm.loop !9716

while.end222:                                     ; preds = %while.cond211
  br label %while.cond80, !dbg !9469, !llvm.loop !9718

while.end223:                                     ; preds = %while.cond80
  br label %for.inc224, !dbg !9720

for.inc224:                                       ; preds = %while.end223
  %170 = load i32, i32* %k, align 4, !dbg !9721
  %inc225 = add nsw i32 %170, 1, !dbg !9721
  store i32 %inc225, i32* %k, align 4, !dbg !9721
  br label %for.cond75, !dbg !9722, !llvm.loop !9723

for.end226:                                       ; preds = %for.cond75
  %171 = load i32, i32* %y, align 4, !dbg !9725
  %cmp227 = icmp ne i32 %171, 0, !dbg !9726
  br i1 %cmp227, label %land.rhs, label %land.end, !dbg !9727

land.rhs:                                         ; preds = %for.end226
  %172 = load i32, i32* %g, align 4, !dbg !9728
  %cmp229 = icmp ne i32 %172, 1, !dbg !9729
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.end226
  %173 = phi i1 [ false, %for.end226 ], [ %cmp229, %land.rhs ], !dbg !9730
  %land.ext = zext i1 %173 to i32, !dbg !9727
  store i32 %land.ext, i32* %retval, align 4, !dbg !9731
  br label %return, !dbg !9731

return:                                           ; preds = %land.end, %if.end125, %if.then42, %if.then32, %if.then
  %174 = load i32, i32* %retval, align 4, !dbg !9732
  ret i32 %174, !dbg !9732
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @huft_free(%struct.huft* %t) #0 !dbg !9733 {
entry:
  %t.addr = alloca %struct.huft*, align 8
  %p = alloca %struct.huft*, align 8, !ctir !41
  %q = alloca %struct.huft*, align 8, !ctir !41
  store %struct.huft* %t, %struct.huft** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.huft** %t.addr, metadata !9736, metadata !DIExpression()), !dbg !9737
  call void @llvm.dbg.declare(metadata %struct.huft** %p, metadata !9738, metadata !DIExpression()), !dbg !9739
  call void @llvm.dbg.declare(metadata %struct.huft** %q, metadata !9740, metadata !DIExpression()), !dbg !9741
  %0 = load %struct.huft*, %struct.huft** %t.addr, align 8, !dbg !9742
  store %struct.huft* %0, %struct.huft** %p, align 8, !dbg !9743
  br label %while.cond, !dbg !9744

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.huft*, %struct.huft** %p, align 8, !dbg !9745
  %cmp = icmp ne %struct.huft* %1, null, !dbg !9746
  br i1 %cmp, label %while.body, label %while.end, !dbg !9744

while.body:                                       ; preds = %while.cond
  %2 = load %struct.huft*, %struct.huft** %p, align 8, !dbg !9747
  %incdec.ptr = getelementptr inbounds %struct.huft, %struct.huft* %2, i32 -1, !dbg !9747, !ctir !42
  store %struct.huft* %incdec.ptr, %struct.huft** %p, align 8, !dbg !9747
  %v = getelementptr inbounds %struct.huft, %struct.huft* %incdec.ptr, i32 0, i32 2, !dbg !9749, !ctir !42
  %t1 = bitcast %union.anon* %v to %struct.huft**, !dbg !9750
  %3 = load %struct.huft*, %struct.huft** %t1, align 8, !dbg !9750, !ctir !47
  store %struct.huft* %3, %struct.huft** %q, align 8, !dbg !9751
  %4 = load %struct.huft*, %struct.huft** %p, align 8, !dbg !9752
  %5 = bitcast %struct.huft* %4 to i8*, !dbg !9753
  call void @free(i8* %5) #11, !dbg !9754
  %6 = load %struct.huft*, %struct.huft** %q, align 8, !dbg !9755
  store %struct.huft* %6, %struct.huft** %p, align 8, !dbg !9756
  br label %while.cond, !dbg !9744, !llvm.loop !9757

while.end:                                        ; preds = %while.cond
  ret i32 0, !dbg !9759
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @inflate_codes(%struct.huft* %tl, %struct.huft* %td, i32 %bl, i32 %bd) #0 !dbg !9760 {
entry:
  %retval = alloca i32, align 4
  %tl.addr = alloca %struct.huft*, align 8
  %td.addr = alloca %struct.huft*, align 8
  %bl.addr = alloca i32, align 4
  %bd.addr = alloca i32, align 4
  %e = alloca i32, align 4, !ctir !6
  %n = alloca i32, align 4, !ctir !6
  %d = alloca i32, align 4, !ctir !6
  %w = alloca i32, align 4, !ctir !6
  %t = alloca %struct.huft*, align 8, !ctir !41
  %ml = alloca i32, align 4, !ctir !6
  %md = alloca i32, align 4, !ctir !6
  %b = alloca i64, align 8, !ctir !51
  %k = alloca i32, align 4, !ctir !6
  store %struct.huft* %tl, %struct.huft** %tl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.huft** %tl.addr, metadata !9763, metadata !DIExpression()), !dbg !9764
  store %struct.huft* %td, %struct.huft** %td.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.huft** %td.addr, metadata !9765, metadata !DIExpression()), !dbg !9766
  store i32 %bl, i32* %bl.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bl.addr, metadata !9767, metadata !DIExpression()), !dbg !9768
  store i32 %bd, i32* %bd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bd.addr, metadata !9769, metadata !DIExpression()), !dbg !9770
  call void @llvm.dbg.declare(metadata i32* %e, metadata !9771, metadata !DIExpression()), !dbg !9772
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9773, metadata !DIExpression()), !dbg !9774
  call void @llvm.dbg.declare(metadata i32* %d, metadata !9775, metadata !DIExpression()), !dbg !9776
  call void @llvm.dbg.declare(metadata i32* %w, metadata !9777, metadata !DIExpression()), !dbg !9778
  call void @llvm.dbg.declare(metadata %struct.huft** %t, metadata !9779, metadata !DIExpression()), !dbg !9780
  call void @llvm.dbg.declare(metadata i32* %ml, metadata !9781, metadata !DIExpression()), !dbg !9782
  call void @llvm.dbg.declare(metadata i32* %md, metadata !9783, metadata !DIExpression()), !dbg !9784
  call void @llvm.dbg.declare(metadata i64* %b, metadata !9785, metadata !DIExpression()), !dbg !9786
  call void @llvm.dbg.declare(metadata i32* %k, metadata !9787, metadata !DIExpression()), !dbg !9788
  %0 = load i64, i64* @bb, align 8, !dbg !9789
  store i64 %0, i64* %b, align 8, !dbg !9790
  %1 = load i32, i32* @bk, align 4, !dbg !9791
  store i32 %1, i32* %k, align 4, !dbg !9792
  %2 = load i32, i32* @outcnt, align 4, !dbg !9793
  store i32 %2, i32* %w, align 4, !dbg !9794
  %3 = load i32, i32* %bl.addr, align 4, !dbg !9795
  %idxprom = sext i32 %3 to i64, !dbg !9796
  %arrayidx = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom, !dbg !9796, !ctir !220
  %4 = load i16, i16* %arrayidx, align 2, !dbg !9796
  %conv = zext i16 %4 to i32, !dbg !9796
  store i32 %conv, i32* %ml, align 4, !dbg !9797
  %5 = load i32, i32* %bd.addr, align 4, !dbg !9798
  %idxprom1 = sext i32 %5 to i64, !dbg !9799
  %arrayidx2 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom1, !dbg !9799, !ctir !220
  %6 = load i16, i16* %arrayidx2, align 2, !dbg !9799
  %conv3 = zext i16 %6 to i32, !dbg !9799
  store i32 %conv3, i32* %md, align 4, !dbg !9800
  br label %for.cond, !dbg !9801

for.cond:                                         ; preds = %if.end288, %entry
  br label %while.cond, !dbg !9802

while.cond:                                       ; preds = %cond.end, %for.cond
  %7 = load i32, i32* %k, align 4, !dbg !9802
  %8 = load i32, i32* %bl.addr, align 4, !dbg !9802
  %cmp = icmp ult i32 %7, %8, !dbg !9802
  br i1 %cmp, label %while.body, label %while.end, !dbg !9802

while.body:                                       ; preds = %while.cond
  %9 = load i32, i32* @inptr, align 4, !dbg !9807
  %10 = load i32, i32* @insize, align 4, !dbg !9807
  %cmp5 = icmp ult i32 %9, %10, !dbg !9807
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !9807

cond.true:                                        ; preds = %while.body
  %11 = load i32, i32* @inptr, align 4, !dbg !9807
  %inc = add i32 %11, 1, !dbg !9807
  store i32 %inc, i32* @inptr, align 4, !dbg !9807
  %idxprom7 = zext i32 %11 to i64, !dbg !9807
  %arrayidx8 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom7, !dbg !9807, !ctir !231
  %12 = load i8, i8* %arrayidx8, align 1, !dbg !9807
  %conv9 = zext i8 %12 to i32, !dbg !9807
  br label %cond.end, !dbg !9807

cond.false:                                       ; preds = %while.body
  %13 = load i32, i32* %w, align 4, !dbg !9807
  store i32 %13, i32* @outcnt, align 4, !dbg !9807
  %call = call i32 @fill_inbuf(i32 0), !dbg !9807
  br label %cond.end, !dbg !9807

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv9, %cond.true ], [ %call, %cond.false ], !dbg !9807
  %conv10 = trunc i32 %cond to i8, !dbg !9807
  %conv11 = zext i8 %conv10 to i64, !dbg !9807
  %14 = load i32, i32* %k, align 4, !dbg !9807
  %sh_prom = zext i32 %14 to i64, !dbg !9807
  %shl = shl i64 %conv11, %sh_prom, !dbg !9807
  %15 = load i64, i64* %b, align 8, !dbg !9807
  %or = or i64 %15, %shl, !dbg !9807
  store i64 %or, i64* %b, align 8, !dbg !9807
  %16 = load i32, i32* %k, align 4, !dbg !9807
  %add = add i32 %16, 8, !dbg !9807
  store i32 %add, i32* %k, align 4, !dbg !9807
  br label %while.cond, !dbg !9802, !llvm.loop !9809

while.end:                                        ; preds = %while.cond
  %17 = load %struct.huft*, %struct.huft** %tl.addr, align 8, !dbg !9810
  %18 = load i64, i64* %b, align 8, !dbg !9812
  %conv12 = trunc i64 %18 to i32, !dbg !9813
  %19 = load i32, i32* %ml, align 4, !dbg !9814
  %and = and i32 %conv12, %19, !dbg !9815
  %idx.ext = zext i32 %and to i64, !dbg !9816
  %add.ptr = getelementptr inbounds %struct.huft, %struct.huft* %17, i64 %idx.ext, !dbg !9816, !ctir !42
  store %struct.huft* %add.ptr, %struct.huft** %t, align 8, !dbg !9817
  %e13 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr, i32 0, i32 0, !dbg !9818, !ctir !42
  %20 = load i8, i8* %e13, align 8, !dbg !9818, !ctir !13
  %conv14 = zext i8 %20 to i32, !dbg !9819
  store i32 %conv14, i32* %e, align 4, !dbg !9820
  %cmp15 = icmp ugt i32 %conv14, 16, !dbg !9821
  br i1 %cmp15, label %if.then, label %if.end60, !dbg !9822

if.then:                                          ; preds = %while.end
  br label %do.body, !dbg !9823

do.body:                                          ; preds = %do.cond, %if.then
  %21 = load i32, i32* %e, align 4, !dbg !9824
  %cmp17 = icmp eq i32 %21, 99, !dbg !9827
  br i1 %cmp17, label %if.then19, label %if.end, !dbg !9828

if.then19:                                        ; preds = %do.body
  store i32 1, i32* %retval, align 4, !dbg !9829
  br label %return, !dbg !9829

if.end:                                           ; preds = %do.body
  %22 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9830
  %b20 = getelementptr inbounds %struct.huft, %struct.huft* %22, i32 0, i32 1, !dbg !9830, !ctir !42
  %23 = load i8, i8* %b20, align 1, !dbg !9830, !ctir !13
  %conv21 = zext i8 %23 to i32, !dbg !9830
  %24 = load i64, i64* %b, align 8, !dbg !9830
  %sh_prom22 = zext i32 %conv21 to i64, !dbg !9830
  %shr = lshr i64 %24, %sh_prom22, !dbg !9830
  store i64 %shr, i64* %b, align 8, !dbg !9830
  %25 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9830
  %b23 = getelementptr inbounds %struct.huft, %struct.huft* %25, i32 0, i32 1, !dbg !9830, !ctir !42
  %26 = load i8, i8* %b23, align 1, !dbg !9830, !ctir !13
  %conv24 = zext i8 %26 to i32, !dbg !9830
  %27 = load i32, i32* %k, align 4, !dbg !9830
  %sub = sub i32 %27, %conv24, !dbg !9830
  store i32 %sub, i32* %k, align 4, !dbg !9830
  %28 = load i32, i32* %e, align 4, !dbg !9832
  %sub25 = sub i32 %28, 16, !dbg !9832
  store i32 %sub25, i32* %e, align 4, !dbg !9832
  br label %while.cond26, !dbg !9833

while.cond26:                                     ; preds = %cond.end39, %if.end
  %29 = load i32, i32* %k, align 4, !dbg !9833
  %30 = load i32, i32* %e, align 4, !dbg !9833
  %cmp27 = icmp ult i32 %29, %30, !dbg !9833
  br i1 %cmp27, label %while.body29, label %while.end47, !dbg !9833

while.body29:                                     ; preds = %while.cond26
  %31 = load i32, i32* @inptr, align 4, !dbg !9835
  %32 = load i32, i32* @insize, align 4, !dbg !9835
  %cmp30 = icmp ult i32 %31, %32, !dbg !9835
  br i1 %cmp30, label %cond.true32, label %cond.false37, !dbg !9835

cond.true32:                                      ; preds = %while.body29
  %33 = load i32, i32* @inptr, align 4, !dbg !9835
  %inc33 = add i32 %33, 1, !dbg !9835
  store i32 %inc33, i32* @inptr, align 4, !dbg !9835
  %idxprom34 = zext i32 %33 to i64, !dbg !9835
  %arrayidx35 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom34, !dbg !9835, !ctir !231
  %34 = load i8, i8* %arrayidx35, align 1, !dbg !9835
  %conv36 = zext i8 %34 to i32, !dbg !9835
  br label %cond.end39, !dbg !9835

cond.false37:                                     ; preds = %while.body29
  %35 = load i32, i32* %w, align 4, !dbg !9835
  store i32 %35, i32* @outcnt, align 4, !dbg !9835
  %call38 = call i32 @fill_inbuf(i32 0), !dbg !9835
  br label %cond.end39, !dbg !9835

cond.end39:                                       ; preds = %cond.false37, %cond.true32
  %cond40 = phi i32 [ %conv36, %cond.true32 ], [ %call38, %cond.false37 ], !dbg !9835
  %conv41 = trunc i32 %cond40 to i8, !dbg !9835
  %conv42 = zext i8 %conv41 to i64, !dbg !9835
  %36 = load i32, i32* %k, align 4, !dbg !9835
  %sh_prom43 = zext i32 %36 to i64, !dbg !9835
  %shl44 = shl i64 %conv42, %sh_prom43, !dbg !9835
  %37 = load i64, i64* %b, align 8, !dbg !9835
  %or45 = or i64 %37, %shl44, !dbg !9835
  store i64 %or45, i64* %b, align 8, !dbg !9835
  %38 = load i32, i32* %k, align 4, !dbg !9835
  %add46 = add i32 %38, 8, !dbg !9835
  store i32 %add46, i32* %k, align 4, !dbg !9835
  br label %while.cond26, !dbg !9833, !llvm.loop !9837

while.end47:                                      ; preds = %while.cond26
  br label %do.cond, !dbg !9838

do.cond:                                          ; preds = %while.end47
  %39 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9839
  %v = getelementptr inbounds %struct.huft, %struct.huft* %39, i32 0, i32 2, !dbg !9840, !ctir !42
  %t48 = bitcast %union.anon* %v to %struct.huft**, !dbg !9841
  %40 = load %struct.huft*, %struct.huft** %t48, align 8, !dbg !9841, !ctir !47
  %41 = load i64, i64* %b, align 8, !dbg !9842
  %conv49 = trunc i64 %41 to i32, !dbg !9843
  %42 = load i32, i32* %e, align 4, !dbg !9844
  %idxprom50 = zext i32 %42 to i64, !dbg !9845
  %arrayidx51 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom50, !dbg !9845, !ctir !220
  %43 = load i16, i16* %arrayidx51, align 2, !dbg !9845
  %conv52 = zext i16 %43 to i32, !dbg !9845
  %and53 = and i32 %conv49, %conv52, !dbg !9846
  %idx.ext54 = zext i32 %and53 to i64, !dbg !9847
  %add.ptr55 = getelementptr inbounds %struct.huft, %struct.huft* %40, i64 %idx.ext54, !dbg !9847, !ctir !42
  store %struct.huft* %add.ptr55, %struct.huft** %t, align 8, !dbg !9848
  %e56 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr55, i32 0, i32 0, !dbg !9849, !ctir !42
  %44 = load i8, i8* %e56, align 8, !dbg !9849, !ctir !13
  %conv57 = zext i8 %44 to i32, !dbg !9850
  store i32 %conv57, i32* %e, align 4, !dbg !9851
  %cmp58 = icmp ugt i32 %conv57, 16, !dbg !9852
  br i1 %cmp58, label %do.body, label %do.end, !dbg !9838, !llvm.loop !9853

do.end:                                           ; preds = %do.cond
  br label %if.end60, !dbg !9838

if.end60:                                         ; preds = %do.end, %while.end
  %45 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9855
  %b61 = getelementptr inbounds %struct.huft, %struct.huft* %45, i32 0, i32 1, !dbg !9855, !ctir !42
  %46 = load i8, i8* %b61, align 1, !dbg !9855, !ctir !13
  %conv62 = zext i8 %46 to i32, !dbg !9855
  %47 = load i64, i64* %b, align 8, !dbg !9855
  %sh_prom63 = zext i32 %conv62 to i64, !dbg !9855
  %shr64 = lshr i64 %47, %sh_prom63, !dbg !9855
  store i64 %shr64, i64* %b, align 8, !dbg !9855
  %48 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9855
  %b65 = getelementptr inbounds %struct.huft, %struct.huft* %48, i32 0, i32 1, !dbg !9855, !ctir !42
  %49 = load i8, i8* %b65, align 1, !dbg !9855, !ctir !13
  %conv66 = zext i8 %49 to i32, !dbg !9855
  %50 = load i32, i32* %k, align 4, !dbg !9855
  %sub67 = sub i32 %50, %conv66, !dbg !9855
  store i32 %sub67, i32* %k, align 4, !dbg !9855
  %51 = load i32, i32* %e, align 4, !dbg !9857
  %cmp68 = icmp eq i32 %51, 16, !dbg !9859
  br i1 %cmp68, label %if.then70, label %if.else, !dbg !9860

if.then70:                                        ; preds = %if.end60
  %52 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9861
  %v71 = getelementptr inbounds %struct.huft, %struct.huft* %52, i32 0, i32 2, !dbg !9863, !ctir !42
  %n72 = bitcast %union.anon* %v71 to i16*, !dbg !9864
  %53 = load i16, i16* %n72, align 8, !dbg !9864, !ctir !47
  %conv73 = trunc i16 %53 to i8, !dbg !9865
  %54 = load i32, i32* %w, align 4, !dbg !9866
  %inc74 = add i32 %54, 1, !dbg !9866
  store i32 %inc74, i32* %w, align 4, !dbg !9866
  %idxprom75 = zext i32 %54 to i64, !dbg !9867
  %arrayidx76 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom75, !dbg !9867, !ctir !234
  store i8 %conv73, i8* %arrayidx76, align 1, !dbg !9868
  %55 = load i32, i32* %w, align 4, !dbg !9869
  %cmp77 = icmp eq i32 %55, 32768, !dbg !9871
  br i1 %cmp77, label %if.then79, label %if.end80, !dbg !9872

if.then79:                                        ; preds = %if.then70
  %56 = load i32, i32* %w, align 4, !dbg !9873
  store i32 %56, i32* @outcnt, align 4, !dbg !9873
  call void @flush_window(), !dbg !9873
  store i32 0, i32* %w, align 4, !dbg !9875
  br label %if.end80, !dbg !9876

if.end80:                                         ; preds = %if.then79, %if.then70
  br label %if.end288, !dbg !9877

if.else:                                          ; preds = %if.end60
  %57 = load i32, i32* %e, align 4, !dbg !9878
  %cmp81 = icmp eq i32 %57, 15, !dbg !9881
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !9882

if.then83:                                        ; preds = %if.else
  br label %for.end, !dbg !9883

if.end84:                                         ; preds = %if.else
  br label %while.cond85, !dbg !9884

while.cond85:                                     ; preds = %cond.end98, %if.end84
  %58 = load i32, i32* %k, align 4, !dbg !9884
  %59 = load i32, i32* %e, align 4, !dbg !9884
  %cmp86 = icmp ult i32 %58, %59, !dbg !9884
  br i1 %cmp86, label %while.body88, label %while.end106, !dbg !9884

while.body88:                                     ; preds = %while.cond85
  %60 = load i32, i32* @inptr, align 4, !dbg !9886
  %61 = load i32, i32* @insize, align 4, !dbg !9886
  %cmp89 = icmp ult i32 %60, %61, !dbg !9886
  br i1 %cmp89, label %cond.true91, label %cond.false96, !dbg !9886

cond.true91:                                      ; preds = %while.body88
  %62 = load i32, i32* @inptr, align 4, !dbg !9886
  %inc92 = add i32 %62, 1, !dbg !9886
  store i32 %inc92, i32* @inptr, align 4, !dbg !9886
  %idxprom93 = zext i32 %62 to i64, !dbg !9886
  %arrayidx94 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom93, !dbg !9886, !ctir !231
  %63 = load i8, i8* %arrayidx94, align 1, !dbg !9886
  %conv95 = zext i8 %63 to i32, !dbg !9886
  br label %cond.end98, !dbg !9886

cond.false96:                                     ; preds = %while.body88
  %64 = load i32, i32* %w, align 4, !dbg !9886
  store i32 %64, i32* @outcnt, align 4, !dbg !9886
  %call97 = call i32 @fill_inbuf(i32 0), !dbg !9886
  br label %cond.end98, !dbg !9886

cond.end98:                                       ; preds = %cond.false96, %cond.true91
  %cond99 = phi i32 [ %conv95, %cond.true91 ], [ %call97, %cond.false96 ], !dbg !9886
  %conv100 = trunc i32 %cond99 to i8, !dbg !9886
  %conv101 = zext i8 %conv100 to i64, !dbg !9886
  %65 = load i32, i32* %k, align 4, !dbg !9886
  %sh_prom102 = zext i32 %65 to i64, !dbg !9886
  %shl103 = shl i64 %conv101, %sh_prom102, !dbg !9886
  %66 = load i64, i64* %b, align 8, !dbg !9886
  %or104 = or i64 %66, %shl103, !dbg !9886
  store i64 %or104, i64* %b, align 8, !dbg !9886
  %67 = load i32, i32* %k, align 4, !dbg !9886
  %add105 = add i32 %67, 8, !dbg !9886
  store i32 %add105, i32* %k, align 4, !dbg !9886
  br label %while.cond85, !dbg !9884, !llvm.loop !9888

while.end106:                                     ; preds = %while.cond85
  %68 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9889
  %v107 = getelementptr inbounds %struct.huft, %struct.huft* %68, i32 0, i32 2, !dbg !9890, !ctir !42
  %n108 = bitcast %union.anon* %v107 to i16*, !dbg !9891
  %69 = load i16, i16* %n108, align 8, !dbg !9891, !ctir !47
  %conv109 = zext i16 %69 to i32, !dbg !9889
  %70 = load i64, i64* %b, align 8, !dbg !9892
  %conv110 = trunc i64 %70 to i32, !dbg !9893
  %71 = load i32, i32* %e, align 4, !dbg !9894
  %idxprom111 = zext i32 %71 to i64, !dbg !9895
  %arrayidx112 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom111, !dbg !9895, !ctir !220
  %72 = load i16, i16* %arrayidx112, align 2, !dbg !9895
  %conv113 = zext i16 %72 to i32, !dbg !9895
  %and114 = and i32 %conv110, %conv113, !dbg !9896
  %add115 = add i32 %conv109, %and114, !dbg !9897
  store i32 %add115, i32* %n, align 4, !dbg !9898
  %73 = load i32, i32* %e, align 4, !dbg !9899
  %74 = load i64, i64* %b, align 8, !dbg !9899
  %sh_prom116 = zext i32 %73 to i64, !dbg !9899
  %shr117 = lshr i64 %74, %sh_prom116, !dbg !9899
  store i64 %shr117, i64* %b, align 8, !dbg !9899
  %75 = load i32, i32* %e, align 4, !dbg !9899
  %76 = load i32, i32* %k, align 4, !dbg !9899
  %sub118 = sub i32 %76, %75, !dbg !9899
  store i32 %sub118, i32* %k, align 4, !dbg !9899
  br label %while.cond119, !dbg !9901

while.cond119:                                    ; preds = %cond.end132, %while.end106
  %77 = load i32, i32* %k, align 4, !dbg !9901
  %78 = load i32, i32* %bd.addr, align 4, !dbg !9901
  %cmp120 = icmp ult i32 %77, %78, !dbg !9901
  br i1 %cmp120, label %while.body122, label %while.end140, !dbg !9901

while.body122:                                    ; preds = %while.cond119
  %79 = load i32, i32* @inptr, align 4, !dbg !9903
  %80 = load i32, i32* @insize, align 4, !dbg !9903
  %cmp123 = icmp ult i32 %79, %80, !dbg !9903
  br i1 %cmp123, label %cond.true125, label %cond.false130, !dbg !9903

cond.true125:                                     ; preds = %while.body122
  %81 = load i32, i32* @inptr, align 4, !dbg !9903
  %inc126 = add i32 %81, 1, !dbg !9903
  store i32 %inc126, i32* @inptr, align 4, !dbg !9903
  %idxprom127 = zext i32 %81 to i64, !dbg !9903
  %arrayidx128 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom127, !dbg !9903, !ctir !231
  %82 = load i8, i8* %arrayidx128, align 1, !dbg !9903
  %conv129 = zext i8 %82 to i32, !dbg !9903
  br label %cond.end132, !dbg !9903

cond.false130:                                    ; preds = %while.body122
  %83 = load i32, i32* %w, align 4, !dbg !9903
  store i32 %83, i32* @outcnt, align 4, !dbg !9903
  %call131 = call i32 @fill_inbuf(i32 0), !dbg !9903
  br label %cond.end132, !dbg !9903

cond.end132:                                      ; preds = %cond.false130, %cond.true125
  %cond133 = phi i32 [ %conv129, %cond.true125 ], [ %call131, %cond.false130 ], !dbg !9903
  %conv134 = trunc i32 %cond133 to i8, !dbg !9903
  %conv135 = zext i8 %conv134 to i64, !dbg !9903
  %84 = load i32, i32* %k, align 4, !dbg !9903
  %sh_prom136 = zext i32 %84 to i64, !dbg !9903
  %shl137 = shl i64 %conv135, %sh_prom136, !dbg !9903
  %85 = load i64, i64* %b, align 8, !dbg !9903
  %or138 = or i64 %85, %shl137, !dbg !9903
  store i64 %or138, i64* %b, align 8, !dbg !9903
  %86 = load i32, i32* %k, align 4, !dbg !9903
  %add139 = add i32 %86, 8, !dbg !9903
  store i32 %add139, i32* %k, align 4, !dbg !9903
  br label %while.cond119, !dbg !9901, !llvm.loop !9905

while.end140:                                     ; preds = %while.cond119
  %87 = load %struct.huft*, %struct.huft** %td.addr, align 8, !dbg !9906
  %88 = load i64, i64* %b, align 8, !dbg !9908
  %conv141 = trunc i64 %88 to i32, !dbg !9909
  %89 = load i32, i32* %md, align 4, !dbg !9910
  %and142 = and i32 %conv141, %89, !dbg !9911
  %idx.ext143 = zext i32 %and142 to i64, !dbg !9912
  %add.ptr144 = getelementptr inbounds %struct.huft, %struct.huft* %87, i64 %idx.ext143, !dbg !9912, !ctir !42
  store %struct.huft* %add.ptr144, %struct.huft** %t, align 8, !dbg !9913
  %e145 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr144, i32 0, i32 0, !dbg !9914, !ctir !42
  %90 = load i8, i8* %e145, align 8, !dbg !9914, !ctir !13
  %conv146 = zext i8 %90 to i32, !dbg !9915
  store i32 %conv146, i32* %e, align 4, !dbg !9916
  %cmp147 = icmp ugt i32 %conv146, 16, !dbg !9917
  br i1 %cmp147, label %if.then149, label %if.end200, !dbg !9918

if.then149:                                       ; preds = %while.end140
  br label %do.body150, !dbg !9919

do.body150:                                       ; preds = %do.cond185, %if.then149
  %91 = load i32, i32* %e, align 4, !dbg !9920
  %cmp151 = icmp eq i32 %91, 99, !dbg !9923
  br i1 %cmp151, label %if.then153, label %if.end154, !dbg !9924

if.then153:                                       ; preds = %do.body150
  store i32 1, i32* %retval, align 4, !dbg !9925
  br label %return, !dbg !9925

if.end154:                                        ; preds = %do.body150
  %92 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9926
  %b155 = getelementptr inbounds %struct.huft, %struct.huft* %92, i32 0, i32 1, !dbg !9926, !ctir !42
  %93 = load i8, i8* %b155, align 1, !dbg !9926, !ctir !13
  %conv156 = zext i8 %93 to i32, !dbg !9926
  %94 = load i64, i64* %b, align 8, !dbg !9926
  %sh_prom157 = zext i32 %conv156 to i64, !dbg !9926
  %shr158 = lshr i64 %94, %sh_prom157, !dbg !9926
  store i64 %shr158, i64* %b, align 8, !dbg !9926
  %95 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9926
  %b159 = getelementptr inbounds %struct.huft, %struct.huft* %95, i32 0, i32 1, !dbg !9926, !ctir !42
  %96 = load i8, i8* %b159, align 1, !dbg !9926, !ctir !13
  %conv160 = zext i8 %96 to i32, !dbg !9926
  %97 = load i32, i32* %k, align 4, !dbg !9926
  %sub161 = sub i32 %97, %conv160, !dbg !9926
  store i32 %sub161, i32* %k, align 4, !dbg !9926
  %98 = load i32, i32* %e, align 4, !dbg !9928
  %sub162 = sub i32 %98, 16, !dbg !9928
  store i32 %sub162, i32* %e, align 4, !dbg !9928
  br label %while.cond163, !dbg !9929

while.cond163:                                    ; preds = %cond.end176, %if.end154
  %99 = load i32, i32* %k, align 4, !dbg !9929
  %100 = load i32, i32* %e, align 4, !dbg !9929
  %cmp164 = icmp ult i32 %99, %100, !dbg !9929
  br i1 %cmp164, label %while.body166, label %while.end184, !dbg !9929

while.body166:                                    ; preds = %while.cond163
  %101 = load i32, i32* @inptr, align 4, !dbg !9931
  %102 = load i32, i32* @insize, align 4, !dbg !9931
  %cmp167 = icmp ult i32 %101, %102, !dbg !9931
  br i1 %cmp167, label %cond.true169, label %cond.false174, !dbg !9931

cond.true169:                                     ; preds = %while.body166
  %103 = load i32, i32* @inptr, align 4, !dbg !9931
  %inc170 = add i32 %103, 1, !dbg !9931
  store i32 %inc170, i32* @inptr, align 4, !dbg !9931
  %idxprom171 = zext i32 %103 to i64, !dbg !9931
  %arrayidx172 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom171, !dbg !9931, !ctir !231
  %104 = load i8, i8* %arrayidx172, align 1, !dbg !9931
  %conv173 = zext i8 %104 to i32, !dbg !9931
  br label %cond.end176, !dbg !9931

cond.false174:                                    ; preds = %while.body166
  %105 = load i32, i32* %w, align 4, !dbg !9931
  store i32 %105, i32* @outcnt, align 4, !dbg !9931
  %call175 = call i32 @fill_inbuf(i32 0), !dbg !9931
  br label %cond.end176, !dbg !9931

cond.end176:                                      ; preds = %cond.false174, %cond.true169
  %cond177 = phi i32 [ %conv173, %cond.true169 ], [ %call175, %cond.false174 ], !dbg !9931
  %conv178 = trunc i32 %cond177 to i8, !dbg !9931
  %conv179 = zext i8 %conv178 to i64, !dbg !9931
  %106 = load i32, i32* %k, align 4, !dbg !9931
  %sh_prom180 = zext i32 %106 to i64, !dbg !9931
  %shl181 = shl i64 %conv179, %sh_prom180, !dbg !9931
  %107 = load i64, i64* %b, align 8, !dbg !9931
  %or182 = or i64 %107, %shl181, !dbg !9931
  store i64 %or182, i64* %b, align 8, !dbg !9931
  %108 = load i32, i32* %k, align 4, !dbg !9931
  %add183 = add i32 %108, 8, !dbg !9931
  store i32 %add183, i32* %k, align 4, !dbg !9931
  br label %while.cond163, !dbg !9929, !llvm.loop !9933

while.end184:                                     ; preds = %while.cond163
  br label %do.cond185, !dbg !9934

do.cond185:                                       ; preds = %while.end184
  %109 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9935
  %v186 = getelementptr inbounds %struct.huft, %struct.huft* %109, i32 0, i32 2, !dbg !9936, !ctir !42
  %t187 = bitcast %union.anon* %v186 to %struct.huft**, !dbg !9937
  %110 = load %struct.huft*, %struct.huft** %t187, align 8, !dbg !9937, !ctir !47
  %111 = load i64, i64* %b, align 8, !dbg !9938
  %conv188 = trunc i64 %111 to i32, !dbg !9939
  %112 = load i32, i32* %e, align 4, !dbg !9940
  %idxprom189 = zext i32 %112 to i64, !dbg !9941
  %arrayidx190 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom189, !dbg !9941, !ctir !220
  %113 = load i16, i16* %arrayidx190, align 2, !dbg !9941
  %conv191 = zext i16 %113 to i32, !dbg !9941
  %and192 = and i32 %conv188, %conv191, !dbg !9942
  %idx.ext193 = zext i32 %and192 to i64, !dbg !9943
  %add.ptr194 = getelementptr inbounds %struct.huft, %struct.huft* %110, i64 %idx.ext193, !dbg !9943, !ctir !42
  store %struct.huft* %add.ptr194, %struct.huft** %t, align 8, !dbg !9944
  %e195 = getelementptr inbounds %struct.huft, %struct.huft* %add.ptr194, i32 0, i32 0, !dbg !9945, !ctir !42
  %114 = load i8, i8* %e195, align 8, !dbg !9945, !ctir !13
  %conv196 = zext i8 %114 to i32, !dbg !9946
  store i32 %conv196, i32* %e, align 4, !dbg !9947
  %cmp197 = icmp ugt i32 %conv196, 16, !dbg !9948
  br i1 %cmp197, label %do.body150, label %do.end199, !dbg !9934, !llvm.loop !9949

do.end199:                                        ; preds = %do.cond185
  br label %if.end200, !dbg !9934

if.end200:                                        ; preds = %do.end199, %while.end140
  %115 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9951
  %b201 = getelementptr inbounds %struct.huft, %struct.huft* %115, i32 0, i32 1, !dbg !9951, !ctir !42
  %116 = load i8, i8* %b201, align 1, !dbg !9951, !ctir !13
  %conv202 = zext i8 %116 to i32, !dbg !9951
  %117 = load i64, i64* %b, align 8, !dbg !9951
  %sh_prom203 = zext i32 %conv202 to i64, !dbg !9951
  %shr204 = lshr i64 %117, %sh_prom203, !dbg !9951
  store i64 %shr204, i64* %b, align 8, !dbg !9951
  %118 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9951
  %b205 = getelementptr inbounds %struct.huft, %struct.huft* %118, i32 0, i32 1, !dbg !9951, !ctir !42
  %119 = load i8, i8* %b205, align 1, !dbg !9951, !ctir !13
  %conv206 = zext i8 %119 to i32, !dbg !9951
  %120 = load i32, i32* %k, align 4, !dbg !9951
  %sub207 = sub i32 %120, %conv206, !dbg !9951
  store i32 %sub207, i32* %k, align 4, !dbg !9951
  br label %while.cond208, !dbg !9953

while.cond208:                                    ; preds = %cond.end221, %if.end200
  %121 = load i32, i32* %k, align 4, !dbg !9953
  %122 = load i32, i32* %e, align 4, !dbg !9953
  %cmp209 = icmp ult i32 %121, %122, !dbg !9953
  br i1 %cmp209, label %while.body211, label %while.end229, !dbg !9953

while.body211:                                    ; preds = %while.cond208
  %123 = load i32, i32* @inptr, align 4, !dbg !9955
  %124 = load i32, i32* @insize, align 4, !dbg !9955
  %cmp212 = icmp ult i32 %123, %124, !dbg !9955
  br i1 %cmp212, label %cond.true214, label %cond.false219, !dbg !9955

cond.true214:                                     ; preds = %while.body211
  %125 = load i32, i32* @inptr, align 4, !dbg !9955
  %inc215 = add i32 %125, 1, !dbg !9955
  store i32 %inc215, i32* @inptr, align 4, !dbg !9955
  %idxprom216 = zext i32 %125 to i64, !dbg !9955
  %arrayidx217 = getelementptr inbounds [32832 x i8], [32832 x i8]* @inbuf, i64 0, i64 %idxprom216, !dbg !9955, !ctir !231
  %126 = load i8, i8* %arrayidx217, align 1, !dbg !9955
  %conv218 = zext i8 %126 to i32, !dbg !9955
  br label %cond.end221, !dbg !9955

cond.false219:                                    ; preds = %while.body211
  %127 = load i32, i32* %w, align 4, !dbg !9955
  store i32 %127, i32* @outcnt, align 4, !dbg !9955
  %call220 = call i32 @fill_inbuf(i32 0), !dbg !9955
  br label %cond.end221, !dbg !9955

cond.end221:                                      ; preds = %cond.false219, %cond.true214
  %cond222 = phi i32 [ %conv218, %cond.true214 ], [ %call220, %cond.false219 ], !dbg !9955
  %conv223 = trunc i32 %cond222 to i8, !dbg !9955
  %conv224 = zext i8 %conv223 to i64, !dbg !9955
  %128 = load i32, i32* %k, align 4, !dbg !9955
  %sh_prom225 = zext i32 %128 to i64, !dbg !9955
  %shl226 = shl i64 %conv224, %sh_prom225, !dbg !9955
  %129 = load i64, i64* %b, align 8, !dbg !9955
  %or227 = or i64 %129, %shl226, !dbg !9955
  store i64 %or227, i64* %b, align 8, !dbg !9955
  %130 = load i32, i32* %k, align 4, !dbg !9955
  %add228 = add i32 %130, 8, !dbg !9955
  store i32 %add228, i32* %k, align 4, !dbg !9955
  br label %while.cond208, !dbg !9953, !llvm.loop !9957

while.end229:                                     ; preds = %while.cond208
  %131 = load i32, i32* %w, align 4, !dbg !9958
  %132 = load %struct.huft*, %struct.huft** %t, align 8, !dbg !9959
  %v230 = getelementptr inbounds %struct.huft, %struct.huft* %132, i32 0, i32 2, !dbg !9960, !ctir !42
  %n231 = bitcast %union.anon* %v230 to i16*, !dbg !9961
  %133 = load i16, i16* %n231, align 8, !dbg !9961, !ctir !47
  %conv232 = zext i16 %133 to i32, !dbg !9959
  %sub233 = sub i32 %131, %conv232, !dbg !9962
  %134 = load i64, i64* %b, align 8, !dbg !9963
  %conv234 = trunc i64 %134 to i32, !dbg !9964
  %135 = load i32, i32* %e, align 4, !dbg !9965
  %idxprom235 = zext i32 %135 to i64, !dbg !9966
  %arrayidx236 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %idxprom235, !dbg !9966, !ctir !220
  %136 = load i16, i16* %arrayidx236, align 2, !dbg !9966
  %conv237 = zext i16 %136 to i32, !dbg !9966
  %and238 = and i32 %conv234, %conv237, !dbg !9967
  %sub239 = sub i32 %sub233, %and238, !dbg !9968
  store i32 %sub239, i32* %d, align 4, !dbg !9969
  %137 = load i32, i32* %e, align 4, !dbg !9970
  %138 = load i64, i64* %b, align 8, !dbg !9970
  %sh_prom240 = zext i32 %137 to i64, !dbg !9970
  %shr241 = lshr i64 %138, %sh_prom240, !dbg !9970
  store i64 %shr241, i64* %b, align 8, !dbg !9970
  %139 = load i32, i32* %e, align 4, !dbg !9970
  %140 = load i32, i32* %k, align 4, !dbg !9970
  %sub242 = sub i32 %140, %139, !dbg !9970
  store i32 %sub242, i32* %k, align 4, !dbg !9970
  br label %do.body243, !dbg !9972

do.body243:                                       ; preds = %do.cond285, %while.end229
  %141 = load i32, i32* %d, align 4, !dbg !9973
  %and244 = and i32 %141, 32767, !dbg !9973
  store i32 %and244, i32* %d, align 4, !dbg !9973
  %142 = load i32, i32* %w, align 4, !dbg !9975
  %cmp245 = icmp ugt i32 %and244, %142, !dbg !9976
  br i1 %cmp245, label %cond.true247, label %cond.false248, !dbg !9977

cond.true247:                                     ; preds = %do.body243
  %143 = load i32, i32* %d, align 4, !dbg !9978
  br label %cond.end249, !dbg !9977

cond.false248:                                    ; preds = %do.body243
  %144 = load i32, i32* %w, align 4, !dbg !9979
  br label %cond.end249, !dbg !9977

cond.end249:                                      ; preds = %cond.false248, %cond.true247
  %cond250 = phi i32 [ %143, %cond.true247 ], [ %144, %cond.false248 ], !dbg !9977
  %sub251 = sub i32 32768, %cond250, !dbg !9980
  store i32 %sub251, i32* %e, align 4, !dbg !9981
  %145 = load i32, i32* %n, align 4, !dbg !9982
  %cmp252 = icmp ugt i32 %sub251, %145, !dbg !9983
  br i1 %cmp252, label %cond.true254, label %cond.false255, !dbg !9984

cond.true254:                                     ; preds = %cond.end249
  %146 = load i32, i32* %n, align 4, !dbg !9985
  br label %cond.end256, !dbg !9984

cond.false255:                                    ; preds = %cond.end249
  %147 = load i32, i32* %e, align 4, !dbg !9986
  br label %cond.end256, !dbg !9984

cond.end256:                                      ; preds = %cond.false255, %cond.true254
  %cond257 = phi i32 [ %146, %cond.true254 ], [ %147, %cond.false255 ], !dbg !9984
  store i32 %cond257, i32* %e, align 4, !dbg !9987
  %148 = load i32, i32* %n, align 4, !dbg !9988
  %sub258 = sub i32 %148, %cond257, !dbg !9988
  store i32 %sub258, i32* %n, align 4, !dbg !9988
  %149 = load i32, i32* %w, align 4, !dbg !9989
  %150 = load i32, i32* %d, align 4, !dbg !9991
  %sub259 = sub i32 %149, %150, !dbg !9992
  %151 = load i32, i32* %e, align 4, !dbg !9993
  %cmp260 = icmp uge i32 %sub259, %151, !dbg !9994
  br i1 %cmp260, label %if.then262, label %if.else270, !dbg !9995

if.then262:                                       ; preds = %cond.end256
  %152 = load i32, i32* %w, align 4, !dbg !9996
  %idx.ext263 = zext i32 %152 to i64, !dbg !9998
  %add.ptr264 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext263, !dbg !9998, !ctir !13
  %153 = load i32, i32* %d, align 4, !dbg !9999
  %idx.ext265 = zext i32 %153 to i64, !dbg !10000
  %add.ptr266 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %idx.ext265, !dbg !10000, !ctir !13
  %154 = load i32, i32* %e, align 4, !dbg !10001
  %conv267 = zext i32 %154 to i64, !dbg !10001
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr264, i8* align 1 %add.ptr266, i64 %conv267, i1 false), !dbg !10002
  %155 = load i32, i32* %e, align 4, !dbg !10003
  %156 = load i32, i32* %w, align 4, !dbg !10004
  %add268 = add i32 %156, %155, !dbg !10004
  store i32 %add268, i32* %w, align 4, !dbg !10004
  %157 = load i32, i32* %e, align 4, !dbg !10005
  %158 = load i32, i32* %d, align 4, !dbg !10006
  %add269 = add i32 %158, %157, !dbg !10006
  store i32 %add269, i32* %d, align 4, !dbg !10006
  br label %if.end280, !dbg !10007

if.else270:                                       ; preds = %cond.end256
  br label %do.body271, !dbg !10008

do.body271:                                       ; preds = %do.cond278, %if.else270
  %159 = load i32, i32* %d, align 4, !dbg !10009
  %inc272 = add i32 %159, 1, !dbg !10009
  store i32 %inc272, i32* %d, align 4, !dbg !10009
  %idxprom273 = zext i32 %159 to i64, !dbg !10011
  %arrayidx274 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom273, !dbg !10011, !ctir !234
  %160 = load i8, i8* %arrayidx274, align 1, !dbg !10011
  %161 = load i32, i32* %w, align 4, !dbg !10012
  %inc275 = add i32 %161, 1, !dbg !10012
  store i32 %inc275, i32* %w, align 4, !dbg !10012
  %idxprom276 = zext i32 %161 to i64, !dbg !10013
  %arrayidx277 = getelementptr inbounds [65536 x i8], [65536 x i8]* @window, i64 0, i64 %idxprom276, !dbg !10013, !ctir !234
  store i8 %160, i8* %arrayidx277, align 1, !dbg !10014
  br label %do.cond278, !dbg !10015

do.cond278:                                       ; preds = %do.body271
  %162 = load i32, i32* %e, align 4, !dbg !10016
  %dec = add i32 %162, -1, !dbg !10016
  store i32 %dec, i32* %e, align 4, !dbg !10016
  %tobool = icmp ne i32 %dec, 0, !dbg !10015
  br i1 %tobool, label %do.body271, label %do.end279, !dbg !10015, !llvm.loop !10017

do.end279:                                        ; preds = %do.cond278
  br label %if.end280

if.end280:                                        ; preds = %do.end279, %if.then262
  %163 = load i32, i32* %w, align 4, !dbg !10019
  %cmp281 = icmp eq i32 %163, 32768, !dbg !10021
  br i1 %cmp281, label %if.then283, label %if.end284, !dbg !10022

if.then283:                                       ; preds = %if.end280
  %164 = load i32, i32* %w, align 4, !dbg !10023
  store i32 %164, i32* @outcnt, align 4, !dbg !10023
  call void @flush_window(), !dbg !10023
  store i32 0, i32* %w, align 4, !dbg !10025
  br label %if.end284, !dbg !10026

if.end284:                                        ; preds = %if.then283, %if.end280
  br label %do.cond285, !dbg !10027

do.cond285:                                       ; preds = %if.end284
  %165 = load i32, i32* %n, align 4, !dbg !10028
  %tobool286 = icmp ne i32 %165, 0, !dbg !10027
  br i1 %tobool286, label %do.body243, label %do.end287, !dbg !10027, !llvm.loop !10029

do.end287:                                        ; preds = %do.cond285
  br label %if.end288

if.end288:                                        ; preds = %do.end287, %if.end80
  br label %for.cond, !dbg !10031, !llvm.loop !10032

for.end:                                          ; preds = %if.then83
  %166 = load i32, i32* %w, align 4, !dbg !10035
  store i32 %166, i32* @outcnt, align 4, !dbg !10036
  %167 = load i64, i64* %b, align 8, !dbg !10037
  store i64 %167, i64* @bb, align 8, !dbg !10038
  %168 = load i32, i32* %k, align 4, !dbg !10039
  store i32 %168, i32* @bk, align 4, !dbg !10040
  store i32 0, i32* %retval, align 4, !dbg !10041
  br label %return, !dbg !10041

return:                                           ; preds = %for.end, %if.then153, %if.then19
  %169 = load i32, i32* %retval, align 4, !dbg !10042
  ret i32 %169, !dbg !10042
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_istat(i8* %iname, %struct.stat* %sbuf) #0 !dbg !699 {
entry:
  %retval = alloca i32, align 4
  %iname.addr = alloca i8*, align 8
  %sbuf.addr = alloca %struct.stat*, align 8
  %ilen = alloca i32, align 4, !ctir !12
  %z_suffix_errno = alloca i32, align 4, !ctir !12
  %suf = alloca i8**, align 8, !ctir !23
  %s = alloca i8*, align 8, !ctir !19
  %s0 = alloca i8*, align 8, !ctir !19
  store i8* %iname, i8** %iname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %iname.addr, metadata !10043, metadata !DIExpression()), !dbg !10044
  store %struct.stat* %sbuf, %struct.stat** %sbuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %sbuf.addr, metadata !10045, metadata !DIExpression()), !dbg !10046
  call void @llvm.dbg.declare(metadata i32* %ilen, metadata !10047, metadata !DIExpression()), !dbg !10048
  call void @llvm.dbg.declare(metadata i32* %z_suffix_errno, metadata !10049, metadata !DIExpression()), !dbg !10050
  store i32 0, i32* %z_suffix_errno, align 4, !dbg !10050
  call void @llvm.dbg.declare(metadata i8*** %suf, metadata !10051, metadata !DIExpression()), !dbg !10052
  store i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @get_istat.suffixes, i64 0, i64 0), i8*** %suf, align 8, !dbg !10052
  call void @llvm.dbg.declare(metadata i8** %s, metadata !10053, metadata !DIExpression()), !dbg !10054
  %0 = load i8*, i8** @z_suffix, align 8, !dbg !10055
  %1 = load i8**, i8*** %suf, align 8, !dbg !10056
  store i8* %0, i8** %1, align 8, !dbg !10057, !ctir !19
  %2 = load i8*, i8** %iname.addr, align 8, !dbg !10058
  %call = call i64 @strlen(i8* %2) #9, !dbg !10060
  %cmp = icmp ule i64 1023, %call, !dbg !10061
  br i1 %cmp, label %if.then, label %if.end, !dbg !10062

if.then:                                          ; preds = %entry
  br label %name_too_long, !dbg !10063

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %iname.addr, align 8, !dbg !10064
  %call1 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %3) #11, !dbg !10065
  %4 = load %struct.stat*, %struct.stat** %sbuf.addr, align 8, !dbg !10066
  %call2 = call i32 @do_stat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), %struct.stat* %4), !dbg !10068
  %cmp3 = icmp eq i32 %call2, 0, !dbg !10069
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !10070

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !10071
  br label %return, !dbg !10071

if.end5:                                          ; preds = %if.end
  %5 = load i32, i32* @decompress, align 4, !dbg !10072
  %tobool = icmp ne i32 %5, 0, !dbg !10072
  br i1 %tobool, label %lor.lhs.false, label %if.then8, !dbg !10074

lor.lhs.false:                                    ; preds = %if.end5
  %call6 = call i32* @__errno_location() #12, !dbg !10075
  %6 = load i32, i32* %call6, align 4, !dbg !10075, !ctir !12
  %cmp7 = icmp ne i32 %6, 2, !dbg !10076
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !10077

if.then8:                                         ; preds = %lor.lhs.false, %if.end5
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10078
  store i32 1, i32* %retval, align 4, !dbg !10080
  br label %return, !dbg !10080

if.end9:                                          ; preds = %lor.lhs.false
  %call10 = call i8* @get_suffix(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10081
  store i8* %call10, i8** %s, align 8, !dbg !10082
  %7 = load i8*, i8** %s, align 8, !dbg !10083
  %cmp11 = icmp ne i8* %7, null, !dbg !10085
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !10086

if.then12:                                        ; preds = %if.end9
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10087
  store i32 1, i32* %retval, align 4, !dbg !10089
  br label %return, !dbg !10089

if.end13:                                         ; preds = %if.end9
  %call14 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)) #9, !dbg !10090
  %conv = trunc i64 %call14 to i32, !dbg !10090
  store i32 %conv, i32* %ilen, align 4, !dbg !10091
  %8 = load i8*, i8** @z_suffix, align 8, !dbg !10092
  %call15 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i64 0, i64 0)) #9, !dbg !10092
  %cmp16 = icmp eq i32 %call15, 0, !dbg !10092
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !10094

if.then18:                                        ; preds = %if.end13
  %9 = load i8**, i8*** %suf, align 8, !dbg !10095
  %incdec.ptr = getelementptr inbounds i8*, i8** %9, i32 1, !dbg !10095, !ctir !19
  store i8** %incdec.ptr, i8*** %suf, align 8, !dbg !10095
  br label %if.end19, !dbg !10096

if.end19:                                         ; preds = %if.then18, %if.end13
  br label %do.body, !dbg !10097

do.body:                                          ; preds = %do.cond, %if.end19
  call void @llvm.dbg.declare(metadata i8** %s0, metadata !10098, metadata !DIExpression()), !dbg !10100
  %10 = load i8**, i8*** %suf, align 8, !dbg !10101
  %11 = load i8*, i8** %10, align 8, !dbg !10102, !ctir !19
  store i8* %11, i8** %s, align 8, !dbg !10103
  store i8* %11, i8** %s0, align 8, !dbg !10100
  %12 = load i8*, i8** %iname.addr, align 8, !dbg !10104
  %call20 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %12) #11, !dbg !10105
  %13 = load i32, i32* %ilen, align 4, !dbg !10106
  %conv21 = sext i32 %13 to i64, !dbg !10106
  %14 = load i8*, i8** %s, align 8, !dbg !10108
  %call22 = call i64 @strlen(i8* %14) #9, !dbg !10109
  %add = add i64 %conv21, %call22, !dbg !10110
  %cmp23 = icmp ule i64 1024, %add, !dbg !10111
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !10112

if.then25:                                        ; preds = %do.body
  br label %name_too_long, !dbg !10113

if.end26:                                         ; preds = %do.body
  %15 = load i8*, i8** %s, align 8, !dbg !10114
  %call27 = call i8* @strcat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %15) #11, !dbg !10115
  %16 = load %struct.stat*, %struct.stat** %sbuf.addr, align 8, !dbg !10116
  %call28 = call i32 @do_stat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), %struct.stat* %16), !dbg !10118
  %cmp29 = icmp eq i32 %call28, 0, !dbg !10119
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !10120

if.then31:                                        ; preds = %if.end26
  store i32 0, i32* %retval, align 4, !dbg !10121
  br label %return, !dbg !10121

if.end32:                                         ; preds = %if.end26
  %17 = load i8*, i8** %s0, align 8, !dbg !10122
  %18 = load i8*, i8** @z_suffix, align 8, !dbg !10122
  %call33 = call i32 @strcmp(i8* %17, i8* %18) #9, !dbg !10122
  %cmp34 = icmp eq i32 %call33, 0, !dbg !10122
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !10124

if.then36:                                        ; preds = %if.end32
  %call37 = call i32* @__errno_location() #12, !dbg !10125
  %19 = load i32, i32* %call37, align 4, !dbg !10125, !ctir !12
  store i32 %19, i32* %z_suffix_errno, align 4, !dbg !10126
  br label %if.end38, !dbg !10127

if.end38:                                         ; preds = %if.then36, %if.end32
  br label %do.cond, !dbg !10128

do.cond:                                          ; preds = %if.end38
  %20 = load i8**, i8*** %suf, align 8, !dbg !10129
  %incdec.ptr39 = getelementptr inbounds i8*, i8** %20, i32 1, !dbg !10129, !ctir !19
  store i8** %incdec.ptr39, i8*** %suf, align 8, !dbg !10129
  %21 = load i8*, i8** %incdec.ptr39, align 8, !dbg !10130, !ctir !19
  %cmp40 = icmp ne i8* %21, null, !dbg !10131
  br i1 %cmp40, label %do.body, label %do.end, !dbg !10128, !llvm.loop !10132

do.end:                                           ; preds = %do.cond
  %22 = load i8*, i8** %iname.addr, align 8, !dbg !10134
  %call42 = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %22) #11, !dbg !10135
  %23 = load i8*, i8** @z_suffix, align 8, !dbg !10136
  %call43 = call i8* @strcat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %23) #11, !dbg !10137
  %24 = load i32, i32* %z_suffix_errno, align 4, !dbg !10138
  %call44 = call i32* @__errno_location() #12, !dbg !10139
  store i32 %24, i32* %call44, align 4, !dbg !10140, !ctir !12
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10141
  store i32 1, i32* %retval, align 4, !dbg !10142
  br label %return, !dbg !10142

name_too_long:                                    ; preds = %if.then25, %if.then
  call void @llvm.dbg.label(metadata !10143), !dbg !10144
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10145
  %26 = load i8*, i8** @progname, align 8, !dbg !10146
  %27 = load i8*, i8** %iname.addr, align 8, !dbg !10147
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.160, i64 0, i64 0), i8* %26, i8* %27), !dbg !10148
  store i32 1, i32* @exit_code, align 4, !dbg !10149
  store i32 1, i32* %retval, align 4, !dbg !10150
  br label %return, !dbg !10150

return:                                           ; preds = %name_too_long, %do.end, %if.then31, %if.then12, %if.then8, %if.then4
  %28 = load i32, i32* %retval, align 4, !dbg !10151
  ret i32 %28, !dbg !10151
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @treat_dir(i8* %dir) #0 !dbg !10152 {
entry:
  %dir.addr = alloca i8*, align 8
  %dp = alloca %struct.dirent*, align 8, !ctir !374
  %dirp = alloca %struct.__dirstream*, align 8, !ctir !385
  %nbuf = alloca [1024 x i8], align 16, !ctir !276
  %len = alloca i32, align 4, !ctir !12
  store i8* %dir, i8** %dir.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dir.addr, metadata !10153, metadata !DIExpression()), !dbg !10154
  call void @llvm.dbg.declare(metadata %struct.dirent** %dp, metadata !10155, metadata !DIExpression()), !dbg !10156
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %dirp, metadata !10157, metadata !DIExpression()), !dbg !10158
  call void @llvm.dbg.declare(metadata [1024 x i8]* %nbuf, metadata !10159, metadata !DIExpression()), !dbg !10160
  call void @llvm.dbg.declare(metadata i32* %len, metadata !10161, metadata !DIExpression()), !dbg !10162
  %0 = load i8*, i8** %dir.addr, align 8, !dbg !10163
  %call = call %struct.__dirstream* @opendir(i8* %0), !dbg !10164
  store %struct.__dirstream* %call, %struct.__dirstream** %dirp, align 8, !dbg !10165
  %1 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !10166
  %cmp = icmp eq %struct.__dirstream* %1, null, !dbg !10168
  br i1 %cmp, label %if.then, label %if.end, !dbg !10169

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %dir.addr, align 8, !dbg !10170
  call void @progerror(i8* %2), !dbg !10172
  br label %if.end45, !dbg !10173

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !10174

while.cond:                                       ; preds = %if.end35, %if.then10, %if.end
  %call1 = call i32* @__errno_location() #12, !dbg !10175
  store i32 0, i32* %call1, align 4, !dbg !10176, !ctir !12
  %3 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !10177
  %call2 = call %struct.dirent* @readdir(%struct.__dirstream* %3), !dbg !10178
  store %struct.dirent* %call2, %struct.dirent** %dp, align 8, !dbg !10179
  %cmp3 = icmp ne %struct.dirent* %call2, null, !dbg !10180
  br i1 %cmp3, label %while.body, label %while.end, !dbg !10174

while.body:                                       ; preds = %while.cond
  %4 = load %struct.dirent*, %struct.dirent** %dp, align 8, !dbg !10181
  %d_name = getelementptr inbounds %struct.dirent, %struct.dirent* %4, i32 0, i32 4, !dbg !10181, !ctir !375
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %d_name, i64 0, i64 0, !dbg !10181, !ctir !384
  %call4 = call i32 @strcmp(i8* %arraydecay, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.166, i64 0, i64 0)) #9, !dbg !10181
  %cmp5 = icmp eq i32 %call4, 0, !dbg !10181
  br i1 %cmp5, label %if.then10, label %lor.lhs.false, !dbg !10184

lor.lhs.false:                                    ; preds = %while.body
  %5 = load %struct.dirent*, %struct.dirent** %dp, align 8, !dbg !10185
  %d_name6 = getelementptr inbounds %struct.dirent, %struct.dirent* %5, i32 0, i32 4, !dbg !10185, !ctir !375
  %arraydecay7 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name6, i64 0, i64 0, !dbg !10185, !ctir !384
  %call8 = call i32 @strcmp(i8* %arraydecay7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.167, i64 0, i64 0)) #9, !dbg !10185
  %cmp9 = icmp eq i32 %call8, 0, !dbg !10185
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !10186

if.then10:                                        ; preds = %lor.lhs.false, %while.body
  br label %while.cond, !dbg !10187, !llvm.loop !10189

if.end11:                                         ; preds = %lor.lhs.false
  %6 = load i8*, i8** %dir.addr, align 8, !dbg !10191
  %call12 = call i64 @strlen(i8* %6) #9, !dbg !10192
  %conv = trunc i64 %call12 to i32, !dbg !10192
  store i32 %conv, i32* %len, align 4, !dbg !10193
  %7 = load i32, i32* %len, align 4, !dbg !10194
  %conv13 = sext i32 %7 to i64, !dbg !10194
  %8 = load %struct.dirent*, %struct.dirent** %dp, align 8, !dbg !10196
  %d_name14 = getelementptr inbounds %struct.dirent, %struct.dirent* %8, i32 0, i32 4, !dbg !10196, !ctir !375
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name14, i64 0, i64 0, !dbg !10196, !ctir !384
  %call16 = call i64 @strlen(i8* %arraydecay15) #9, !dbg !10196
  %add = add i64 %conv13, %call16, !dbg !10197
  %add17 = add i64 %add, 1, !dbg !10198
  %cmp18 = icmp ult i64 %add17, 1023, !dbg !10199
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !10200

if.then20:                                        ; preds = %if.end11
  %arraydecay21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuf, i64 0, i64 0, !dbg !10201, !ctir !276
  %9 = load i8*, i8** %dir.addr, align 8, !dbg !10203
  %call22 = call i8* @strcpy(i8* %arraydecay21, i8* %9) #11, !dbg !10204
  %10 = load i32, i32* %len, align 4, !dbg !10205
  %cmp23 = icmp ne i32 %10, 0, !dbg !10207
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !10208

if.then25:                                        ; preds = %if.then20
  %11 = load i32, i32* %len, align 4, !dbg !10209
  %inc = add nsw i32 %11, 1, !dbg !10209
  store i32 %inc, i32* %len, align 4, !dbg !10209
  %idxprom = sext i32 %11 to i64, !dbg !10211
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuf, i64 0, i64 %idxprom, !dbg !10211, !ctir !276
  store i8 47, i8* %arrayidx, align 1, !dbg !10212
  br label %if.end26, !dbg !10213

if.end26:                                         ; preds = %if.then25, %if.then20
  %arraydecay27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuf, i64 0, i64 0, !dbg !10214, !ctir !276
  %12 = load i32, i32* %len, align 4, !dbg !10215
  %idx.ext = sext i32 %12 to i64, !dbg !10216
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay27, i64 %idx.ext, !dbg !10216, !ctir !20
  %13 = load %struct.dirent*, %struct.dirent** %dp, align 8, !dbg !10217
  %d_name28 = getelementptr inbounds %struct.dirent, %struct.dirent* %13, i32 0, i32 4, !dbg !10218, !ctir !375
  %arraydecay29 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name28, i64 0, i64 0, !dbg !10217, !ctir !384
  %call30 = call i8* @strcpy(i8* %add.ptr, i8* %arraydecay29) #11, !dbg !10219
  %arraydecay31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %nbuf, i64 0, i64 0, !dbg !10220, !ctir !276
  call void @treat_file(i8* %arraydecay31), !dbg !10221
  br label %if.end35, !dbg !10222

if.else:                                          ; preds = %if.end11
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10223
  %15 = load i8*, i8** @progname, align 8, !dbg !10225
  %16 = load i8*, i8** %dir.addr, align 8, !dbg !10226
  %17 = load %struct.dirent*, %struct.dirent** %dp, align 8, !dbg !10227
  %d_name32 = getelementptr inbounds %struct.dirent, %struct.dirent* %17, i32 0, i32 4, !dbg !10228, !ctir !375
  %arraydecay33 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name32, i64 0, i64 0, !dbg !10227, !ctir !384
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.168, i64 0, i64 0), i8* %15, i8* %16, i8* %arraydecay33), !dbg !10229
  store i32 1, i32* @exit_code, align 4, !dbg !10230
  br label %if.end35

if.end35:                                         ; preds = %if.else, %if.end26
  br label %while.cond, !dbg !10174, !llvm.loop !10189

while.end:                                        ; preds = %while.cond
  %call36 = call i32* @__errno_location() #12, !dbg !10231
  %18 = load i32, i32* %call36, align 4, !dbg !10231, !ctir !12
  %cmp37 = icmp ne i32 %18, 0, !dbg !10233
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !10234

if.then39:                                        ; preds = %while.end
  %19 = load i8*, i8** %dir.addr, align 8, !dbg !10235
  call void @progerror(i8* %19), !dbg !10236
  br label %if.end40, !dbg !10236

if.end40:                                         ; preds = %if.then39, %while.end
  %20 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !10237
  %call41 = call i32 @closedir(%struct.__dirstream* %20), !dbg !10237
  %cmp42 = icmp ne i32 %call41, 0, !dbg !10239
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !10240

if.then44:                                        ; preds = %if.end40
  %21 = load i8*, i8** %dir.addr, align 8, !dbg !10241
  call void @progerror(i8* %21), !dbg !10242
  br label %if.end45, !dbg !10242

if.end45:                                         ; preds = %if.then, %if.then44, %if.end40
  ret void, !dbg !10243
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reset_times(i8* %name, %struct.stat* %statb) #0 !dbg !10244 {
entry:
  %name.addr = alloca i8*, align 8
  %statb.addr = alloca %struct.stat*, align 8
  %timep = alloca %struct.timespec, align 8, !ctir !10247
  %e = alloca i32, align 4, !ctir !12
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10252, metadata !DIExpression()), !dbg !10253
  store %struct.stat* %statb, %struct.stat** %statb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %statb.addr, metadata !10254, metadata !DIExpression()), !dbg !10255
  call void @llvm.dbg.declare(metadata %struct.timespec* %timep, metadata !10256, metadata !DIExpression()), !dbg !10257
  %0 = load %struct.stat*, %struct.stat** %statb.addr, align 8, !dbg !10258
  %st_atim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 11, !dbg !10259, !ctir !575
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_atim, i32 0, i32 0, !dbg !10259, !ctir !592
  %1 = load i64, i64* %tv_sec, align 8, !dbg !10259, !ctir !144
  %actime = getelementptr inbounds %struct.timespec, %struct.timespec* %timep, i32 0, i32 0, !dbg !10260, !ctir !10247
  store i64 %1, i64* %actime, align 8, !dbg !10261, !ctir !144
  %2 = load %struct.stat*, %struct.stat** %statb.addr, align 8, !dbg !10262
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 12, !dbg !10263, !ctir !575
  %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim, i32 0, i32 0, !dbg !10263, !ctir !592
  %3 = load i64, i64* %tv_sec1, align 8, !dbg !10263, !ctir !144
  %modtime = getelementptr inbounds %struct.timespec, %struct.timespec* %timep, i32 0, i32 1, !dbg !10264, !ctir !10247
  store i64 %3, i64* %modtime, align 8, !dbg !10265, !ctir !144
  %4 = load i8*, i8** %name.addr, align 8, !dbg !10266
  %call = call i32 @utime(i8* %4, %struct.timespec* %timep) #11, !dbg !10268
  %tobool = icmp ne i32 %call, 0, !dbg !10268
  br i1 %tobool, label %land.lhs.true, label %if.end13, !dbg !10269

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.stat*, %struct.stat** %statb.addr, align 8, !dbg !10270
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 3, !dbg !10270, !ctir !575
  %6 = load i32, i32* %st_mode, align 8, !dbg !10270, !ctir !364
  %and = and i32 %6, 61440, !dbg !10270
  %cmp = icmp eq i32 %and, 16384, !dbg !10270
  br i1 %cmp, label %if.end13, label %if.then, !dbg !10271

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %e, metadata !10272, metadata !DIExpression()), !dbg !10274
  %call2 = call i32* @__errno_location() #12, !dbg !10275
  %7 = load i32, i32* %call2, align 4, !dbg !10275, !ctir !12
  store i32 %7, i32* %e, align 4, !dbg !10274
  %8 = load i32, i32* @quiet, align 4, !dbg !10276
  %tobool3 = icmp ne i32 %8, 0, !dbg !10276
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !10279

if.then4:                                         ; preds = %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10276
  %10 = load i8*, i8** @progname, align 8, !dbg !10276
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i64 0, i64 0), i8* %10), !dbg !10276
  br label %if.end, !dbg !10276

if.end:                                           ; preds = %if.then4, %if.then
  %11 = load i32, i32* @exit_code, align 4, !dbg !10280
  %cmp6 = icmp eq i32 %11, 0, !dbg !10280
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !10279

if.then7:                                         ; preds = %if.end
  store i32 2, i32* @exit_code, align 4, !dbg !10280
  br label %if.end8, !dbg !10280

if.end8:                                          ; preds = %if.then7, %if.end
  %12 = load i32, i32* @quiet, align 4, !dbg !10282
  %tobool9 = icmp ne i32 %12, 0, !dbg !10282
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !10284

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %e, align 4, !dbg !10285
  %call11 = call i32* @__errno_location() #12, !dbg !10287
  store i32 %13, i32* %call11, align 4, !dbg !10288, !ctir !12
  call void @perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10289
  br label %if.end12, !dbg !10290

if.end12:                                         ; preds = %if.then10, %if.end8
  br label %if.end13, !dbg !10291

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %entry
  ret void, !dbg !10292
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @make_ofname() #0 !dbg !10293 {
entry:
  %retval = alloca i32, align 4
  %suff = alloca i8*, align 8, !ctir !19
  call void @llvm.dbg.declare(metadata i8** %suff, metadata !10294, metadata !DIExpression()), !dbg !10295
  %call = call i8* @strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)) #11, !dbg !10296
  %call1 = call i8* @get_suffix(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10297
  store i8* %call1, i8** %suff, align 8, !dbg !10298
  %0 = load i32, i32* @decompress, align 4, !dbg !10299
  %tobool = icmp ne i32 %0, 0, !dbg !10299
  br i1 %tobool, label %if.then, label %if.else31, !dbg !10301

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %suff, align 8, !dbg !10302
  %cmp = icmp eq i8* %1, null, !dbg !10305
  br i1 %cmp, label %if.then2, label %if.end21, !dbg !10306

if.then2:                                         ; preds = %if.then
  %2 = load i32, i32* @recursive, align 4, !dbg !10307
  %tobool3 = icmp ne i32 %2, 0, !dbg !10307
  br i1 %tobool3, label %if.end, label %land.lhs.true, !dbg !10310

land.lhs.true:                                    ; preds = %if.then2
  %3 = load i32, i32* @list, align 4, !dbg !10311
  %tobool4 = icmp ne i32 %3, 0, !dbg !10311
  br i1 %tobool4, label %if.then6, label %lor.lhs.false, !dbg !10312

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load i32, i32* @test, align 4, !dbg !10313
  %tobool5 = icmp ne i32 %4, 0, !dbg !10313
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !10314

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !10315
  br label %return, !dbg !10315

if.end:                                           ; preds = %lor.lhs.false, %if.then2
  %5 = load i32, i32* @verbose, align 4, !dbg !10316
  %tobool7 = icmp ne i32 %5, 0, !dbg !10316
  br i1 %tobool7, label %if.then12, label %lor.lhs.false8, !dbg !10318

lor.lhs.false8:                                   ; preds = %if.end
  %6 = load i32, i32* @recursive, align 4, !dbg !10319
  %tobool9 = icmp ne i32 %6, 0, !dbg !10319
  br i1 %tobool9, label %if.end20, label %land.lhs.true10, !dbg !10320

land.lhs.true10:                                  ; preds = %lor.lhs.false8
  %7 = load i32, i32* @quiet, align 4, !dbg !10321
  %tobool11 = icmp ne i32 %7, 0, !dbg !10321
  br i1 %tobool11, label %if.end20, label %if.then12, !dbg !10322

if.then12:                                        ; preds = %land.lhs.true10, %if.end
  %8 = load i32, i32* @quiet, align 4, !dbg !10323
  %tobool13 = icmp ne i32 %8, 0, !dbg !10323
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !10327

if.then14:                                        ; preds = %if.then12
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10323
  %10 = load i8*, i8** @progname, align 8, !dbg !10323
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.169, i64 0, i64 0), i8* %10, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10323
  br label %if.end16, !dbg !10323

if.end16:                                         ; preds = %if.then14, %if.then12
  %11 = load i32, i32* @exit_code, align 4, !dbg !10328
  %cmp17 = icmp eq i32 %11, 0, !dbg !10328
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !10327

if.then18:                                        ; preds = %if.end16
  store i32 2, i32* @exit_code, align 4, !dbg !10328
  br label %if.end19, !dbg !10328

if.end19:                                         ; preds = %if.then18, %if.end16
  br label %if.end20, !dbg !10330

if.end20:                                         ; preds = %if.end19, %land.lhs.true10, %lor.lhs.false8
  store i32 2, i32* %retval, align 4, !dbg !10331
  br label %return, !dbg !10331

if.end21:                                         ; preds = %if.then
  %12 = load i8*, i8** %suff, align 8, !dbg !10332
  %call22 = call i8* @strlwr(i8* %12), !dbg !10333
  %13 = load i8*, i8** %suff, align 8, !dbg !10334
  %call23 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i64 0, i64 0)) #9, !dbg !10334
  %cmp24 = icmp eq i32 %call23, 0, !dbg !10334
  br i1 %cmp24, label %if.then28, label %lor.lhs.false25, !dbg !10336

lor.lhs.false25:                                  ; preds = %if.end21
  %14 = load i8*, i8** %suff, align 8, !dbg !10337
  %call26 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i64 0, i64 0)) #9, !dbg !10337
  %cmp27 = icmp eq i32 %call26, 0, !dbg !10337
  br i1 %cmp27, label %if.then28, label %if.else, !dbg !10338

if.then28:                                        ; preds = %lor.lhs.false25, %if.end21
  %15 = load i8*, i8** %suff, align 8, !dbg !10339
  %call29 = call i8* @strcpy(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.170, i64 0, i64 0)) #11, !dbg !10341
  br label %if.end30, !dbg !10342

if.else:                                          ; preds = %lor.lhs.false25
  %16 = load i8*, i8** %suff, align 8, !dbg !10343
  store i8 0, i8* %16, align 1, !dbg !10345, !ctir !20
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then28
  br label %if.end49, !dbg !10346

if.else31:                                        ; preds = %entry
  %17 = load i8*, i8** %suff, align 8, !dbg !10347
  %cmp32 = icmp ne i8* %17, null, !dbg !10349
  br i1 %cmp32, label %if.then33, label %if.else42, !dbg !10350

if.then33:                                        ; preds = %if.else31
  %18 = load i32, i32* @verbose, align 4, !dbg !10351
  %tobool34 = icmp ne i32 %18, 0, !dbg !10351
  br i1 %tobool34, label %if.then39, label %lor.lhs.false35, !dbg !10354

lor.lhs.false35:                                  ; preds = %if.then33
  %19 = load i32, i32* @recursive, align 4, !dbg !10355
  %tobool36 = icmp ne i32 %19, 0, !dbg !10355
  br i1 %tobool36, label %if.end41, label %land.lhs.true37, !dbg !10356

land.lhs.true37:                                  ; preds = %lor.lhs.false35
  %20 = load i32, i32* @quiet, align 4, !dbg !10357
  %tobool38 = icmp ne i32 %20, 0, !dbg !10357
  br i1 %tobool38, label %if.end41, label %if.then39, !dbg !10358

if.then39:                                        ; preds = %land.lhs.true37, %if.then33
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10359
  %22 = load i8*, i8** @progname, align 8, !dbg !10361
  %23 = load i8*, i8** %suff, align 8, !dbg !10362
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.171, i64 0, i64 0), i8* %22, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %23), !dbg !10363
  br label %if.end41, !dbg !10364

if.end41:                                         ; preds = %if.then39, %land.lhs.true37, %lor.lhs.false35
  store i32 2, i32* %retval, align 4, !dbg !10365
  br label %return, !dbg !10365

if.else42:                                        ; preds = %if.else31
  store i32 0, i32* @save_orig_name, align 4, !dbg !10366
  %call43 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)) #9, !dbg !10368
  %24 = load i64, i64* @z_len, align 8, !dbg !10370
  %add = add i64 %call43, %24, !dbg !10371
  %cmp44 = icmp ule i64 1024, %add, !dbg !10372
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !10373

if.then45:                                        ; preds = %if.else42
  br label %name_too_long, !dbg !10374

if.end46:                                         ; preds = %if.else42
  %25 = load i8*, i8** @z_suffix, align 8, !dbg !10375
  %call47 = call i8* @strcat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* %25) #11, !dbg !10376
  br label %if.end48

if.end48:                                         ; preds = %if.end46
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end30
  store i32 0, i32* %retval, align 4, !dbg !10377
  br label %return, !dbg !10377

name_too_long:                                    ; preds = %if.then45
  call void @llvm.dbg.label(metadata !10378), !dbg !10379
  %26 = load i32, i32* @quiet, align 4, !dbg !10380
  %tobool50 = icmp ne i32 %26, 0, !dbg !10380
  br i1 %tobool50, label %if.end53, label %if.then51, !dbg !10383

if.then51:                                        ; preds = %name_too_long
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10380
  %28 = load i8*, i8** @progname, align 8, !dbg !10380
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.160, i64 0, i64 0), i8* %28, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10380
  br label %if.end53, !dbg !10380

if.end53:                                         ; preds = %if.then51, %name_too_long
  %29 = load i32, i32* @exit_code, align 4, !dbg !10384
  %cmp54 = icmp eq i32 %29, 0, !dbg !10384
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !10383

if.then55:                                        ; preds = %if.end53
  store i32 2, i32* @exit_code, align 4, !dbg !10384
  br label %if.end56, !dbg !10384

if.end56:                                         ; preds = %if.then55, %if.end53
  store i32 2, i32* %retval, align 4, !dbg !10386
  br label %return, !dbg !10386

return:                                           ; preds = %if.end56, %if.end49, %if.end41, %if.end20, %if.then6
  %30 = load i32, i32* %retval, align 4, !dbg !10387
  ret i32 %30, !dbg !10387
}

declare dso_local i32 @open(i8*, i32, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @create_outfile() #0 !dbg !10388 {
entry:
  %retval = alloca i32, align 4
  %ostat = alloca %struct.stat, align 8, !ctir !575
  %flags = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata %struct.stat* %ostat, metadata !10389, metadata !DIExpression()), !dbg !10390
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !10391, metadata !DIExpression()), !dbg !10392
  store i32 193, i32* %flags, align 4, !dbg !10392
  %0 = load i32, i32* @ascii, align 4, !dbg !10393
  %tobool = icmp ne i32 %0, 0, !dbg !10393
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10395

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @decompress, align 4, !dbg !10396
  %tobool1 = icmp ne i32 %1, 0, !dbg !10396
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10397

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %flags, align 4, !dbg !10398
  store i32 %2, i32* %flags, align 4, !dbg !10398
  br label %if.end, !dbg !10400

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %for.cond, !dbg !10401

for.cond:                                         ; preds = %if.end30, %if.end
  %call = call i32 @check_ofname(), !dbg !10402
  %cmp = icmp ne i32 %call, 0, !dbg !10407
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !10408

if.then2:                                         ; preds = %for.cond
  %3 = load i32, i32* @ifd, align 4, !dbg !10409
  %call3 = call i32 @close(i32 %3), !dbg !10411
  store i32 1, i32* %retval, align 4, !dbg !10412
  br label %return, !dbg !10412

if.end4:                                          ; preds = %for.cond
  store i32 1, i32* @remove_ofname, align 4, !dbg !10413
  %4 = load i32, i32* %flags, align 4, !dbg !10414
  %call5 = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i32 %4, i32 384), !dbg !10414
  store i32 %call5, i32* @ofd, align 4, !dbg !10415
  %5 = load i32, i32* @ofd, align 4, !dbg !10416
  %cmp6 = icmp eq i32 %5, -1, !dbg !10418
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !10419

if.then7:                                         ; preds = %if.end4
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10420
  %6 = load i32, i32* @ifd, align 4, !dbg !10422
  %call8 = call i32 @close(i32 %6), !dbg !10423
  store i32 1, i32* %retval, align 4, !dbg !10424
  br label %return, !dbg !10424

if.end9:                                          ; preds = %if.end4
  %7 = load i32, i32* @ofd, align 4, !dbg !10425
  %call10 = call i32 @fstat(i32 %7, %struct.stat* %ostat) #11, !dbg !10427
  %cmp11 = icmp ne i32 %call10, 0, !dbg !10428
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !10429

if.then12:                                        ; preds = %if.end9
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10430
  %8 = load i32, i32* @ifd, align 4, !dbg !10432
  %call13 = call i32 @close(i32 %8), !dbg !10433
  %9 = load i32, i32* @ofd, align 4, !dbg !10434
  %call14 = call i32 @close(i32 %9), !dbg !10435
  %call15 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10436
  store i32 1, i32* %retval, align 4, !dbg !10437
  br label %return, !dbg !10437

if.end16:                                         ; preds = %if.end9
  %call17 = call i32 @name_too_long(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.stat* %ostat), !dbg !10438
  %tobool18 = icmp ne i32 %call17, 0, !dbg !10438
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !10440

if.then19:                                        ; preds = %if.end16
  store i32 0, i32* %retval, align 4, !dbg !10441
  br label %return, !dbg !10441

if.end20:                                         ; preds = %if.end16
  %10 = load i32, i32* @decompress, align 4, !dbg !10442
  %tobool21 = icmp ne i32 %10, 0, !dbg !10442
  br i1 %tobool21, label %if.then22, label %if.end30, !dbg !10444

if.then22:                                        ; preds = %if.end20
  %11 = load i32, i32* @quiet, align 4, !dbg !10445
  %tobool23 = icmp ne i32 %11, 0, !dbg !10445
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !10449

if.then24:                                        ; preds = %if.then22
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10445
  %13 = load i8*, i8** @progname, align 8, !dbg !10445
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.172, i64 0, i64 0), i8* %13, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10445
  br label %if.end26, !dbg !10445

if.end26:                                         ; preds = %if.then24, %if.then22
  %14 = load i32, i32* @exit_code, align 4, !dbg !10450
  %cmp27 = icmp eq i32 %14, 0, !dbg !10450
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !10449

if.then28:                                        ; preds = %if.end26
  store i32 2, i32* @exit_code, align 4, !dbg !10450
  br label %if.end29, !dbg !10450

if.end29:                                         ; preds = %if.then28, %if.end26
  store i32 0, i32* %retval, align 4, !dbg !10452
  br label %return, !dbg !10452

if.end30:                                         ; preds = %if.end20
  %15 = load i32, i32* @ofd, align 4, !dbg !10453
  %call31 = call i32 @close(i32 %15), !dbg !10454
  %call32 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10455
  call void @shorten_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10456
  br label %for.cond, !dbg !10457, !llvm.loop !10458

return:                                           ; preds = %if.end29, %if.then19, %if.then12, %if.then7, %if.then2
  %16 = load i32, i32* %retval, align 4, !dbg !10461
  ret i32 %16, !dbg !10461
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @copy_stat(%struct.stat* %ifstat) #0 !dbg !10462 {
entry:
  %ifstat.addr = alloca %struct.stat*, align 8
  %e = alloca i32, align 4, !ctir !12
  %e28 = alloca i32, align 4, !ctir !12
  store %struct.stat* %ifstat, %struct.stat** %ifstat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %ifstat.addr, metadata !10465, metadata !DIExpression()), !dbg !10466
  %0 = load i32, i32* @decompress, align 4, !dbg !10467
  %tobool = icmp ne i32 %0, 0, !dbg !10467
  br i1 %tobool, label %land.lhs.true, label %if.end7, !dbg !10469

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* @time_stamp, align 8, !dbg !10470
  %cmp = icmp ne i64 %1, 0, !dbg !10471
  br i1 %cmp, label %land.lhs.true1, label %if.end7, !dbg !10472

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10473
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 12, !dbg !10474, !ctir !575
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim, i32 0, i32 0, !dbg !10474, !ctir !592
  %3 = load i64, i64* %tv_sec, align 8, !dbg !10474, !ctir !144
  %4 = load i64, i64* @time_stamp, align 8, !dbg !10475
  %cmp2 = icmp ne i64 %3, %4, !dbg !10476
  br i1 %cmp2, label %if.then, label %if.end7, !dbg !10477

if.then:                                          ; preds = %land.lhs.true1
  %5 = load i64, i64* @time_stamp, align 8, !dbg !10478
  %6 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10480
  %st_mtim3 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 12, !dbg !10481, !ctir !575
  %tv_sec4 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim3, i32 0, i32 0, !dbg !10481, !ctir !592
  store i64 %5, i64* %tv_sec4, align 8, !dbg !10482, !ctir !144
  %7 = load i32, i32* @verbose, align 4, !dbg !10483
  %cmp5 = icmp sgt i32 %7, 1, !dbg !10485
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !10486

if.then6:                                         ; preds = %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10487
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.181, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10489
  br label %if.end, !dbg !10490

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end7, !dbg !10491

if.end7:                                          ; preds = %if.end, %land.lhs.true1, %land.lhs.true, %entry
  %9 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10492
  call void @reset_times(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.stat* %9), !dbg !10493
  %10 = load i32, i32* @ofd, align 4, !dbg !10494
  %11 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10496
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 3, !dbg !10497, !ctir !575
  %12 = load i32, i32* %st_mode, align 8, !dbg !10497, !ctir !364
  %and = and i32 %12, 4095, !dbg !10498
  %call8 = call i32 @fchmod(i32 %10, i32 %and) #11, !dbg !10499
  %tobool9 = icmp ne i32 %call8, 0, !dbg !10499
  br i1 %tobool9, label %if.then10, label %if.end23, !dbg !10500

if.then10:                                        ; preds = %if.end7
  call void @llvm.dbg.declare(metadata i32* %e, metadata !10501, metadata !DIExpression()), !dbg !10503
  %call11 = call i32* @__errno_location() #12, !dbg !10504
  %13 = load i32, i32* %call11, align 4, !dbg !10504, !ctir !12
  store i32 %13, i32* %e, align 4, !dbg !10503
  %14 = load i32, i32* @quiet, align 4, !dbg !10505
  %tobool12 = icmp ne i32 %14, 0, !dbg !10505
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !10508

if.then13:                                        ; preds = %if.then10
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10505
  %16 = load i8*, i8** @progname, align 8, !dbg !10505
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i64 0, i64 0), i8* %16), !dbg !10505
  br label %if.end15, !dbg !10505

if.end15:                                         ; preds = %if.then13, %if.then10
  %17 = load i32, i32* @exit_code, align 4, !dbg !10509
  %cmp16 = icmp eq i32 %17, 0, !dbg !10509
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !10508

if.then17:                                        ; preds = %if.end15
  store i32 2, i32* @exit_code, align 4, !dbg !10509
  br label %if.end18, !dbg !10509

if.end18:                                         ; preds = %if.then17, %if.end15
  %18 = load i32, i32* @quiet, align 4, !dbg !10511
  %tobool19 = icmp ne i32 %18, 0, !dbg !10511
  br i1 %tobool19, label %if.end22, label %if.then20, !dbg !10513

if.then20:                                        ; preds = %if.end18
  %19 = load i32, i32* %e, align 4, !dbg !10514
  %call21 = call i32* @__errno_location() #12, !dbg !10516
  store i32 %19, i32* %call21, align 4, !dbg !10517, !ctir !12
  call void @perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10518
  br label %if.end22, !dbg !10519

if.end22:                                         ; preds = %if.then20, %if.end18
  br label %if.end23, !dbg !10520

if.end23:                                         ; preds = %if.end22, %if.end7
  %20 = load i32, i32* @ofd, align 4, !dbg !10521
  %21 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10522
  %st_uid = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 4, !dbg !10523, !ctir !575
  %22 = load i32, i32* %st_uid, align 4, !dbg !10523, !ctir !399
  %23 = load %struct.stat*, %struct.stat** %ifstat.addr, align 8, !dbg !10524
  %st_gid = getelementptr inbounds %struct.stat, %struct.stat* %23, i32 0, i32 5, !dbg !10525, !ctir !575
  %24 = load i32, i32* %st_gid, align 8, !dbg !10525, !ctir !400
  %call24 = call i32 @fchown(i32 %20, i32 %22, i32 %24) #11, !dbg !10526
  store i32 0, i32* @remove_ofname, align 4, !dbg !10527
  %call25 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10528
  %tobool26 = icmp ne i32 %call25, 0, !dbg !10528
  br i1 %tobool26, label %if.then27, label %if.end41, !dbg !10530

if.then27:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata i32* %e28, metadata !10531, metadata !DIExpression()), !dbg !10533
  %call29 = call i32* @__errno_location() #12, !dbg !10534
  %25 = load i32, i32* %call29, align 4, !dbg !10534, !ctir !12
  store i32 %25, i32* %e28, align 4, !dbg !10533
  %26 = load i32, i32* @quiet, align 4, !dbg !10535
  %tobool30 = icmp ne i32 %26, 0, !dbg !10535
  br i1 %tobool30, label %if.end33, label %if.then31, !dbg !10538

if.then31:                                        ; preds = %if.then27
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10535
  %28 = load i8*, i8** @progname, align 8, !dbg !10535
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i64 0, i64 0), i8* %28), !dbg !10535
  br label %if.end33, !dbg !10535

if.end33:                                         ; preds = %if.then31, %if.then27
  %29 = load i32, i32* @exit_code, align 4, !dbg !10539
  %cmp34 = icmp eq i32 %29, 0, !dbg !10539
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !10538

if.then35:                                        ; preds = %if.end33
  store i32 2, i32* @exit_code, align 4, !dbg !10539
  br label %if.end36, !dbg !10539

if.end36:                                         ; preds = %if.then35, %if.end33
  %30 = load i32, i32* @quiet, align 4, !dbg !10541
  %tobool37 = icmp ne i32 %30, 0, !dbg !10541
  br i1 %tobool37, label %if.end40, label %if.then38, !dbg !10543

if.then38:                                        ; preds = %if.end36
  %31 = load i32, i32* %e28, align 4, !dbg !10544
  %call39 = call i32* @__errno_location() #12, !dbg !10546
  store i32 %31, i32* %call39, align 4, !dbg !10547, !ctir !12
  call void @perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)), !dbg !10548
  br label %if.end40, !dbg !10549

if.end40:                                         ; preds = %if.then38, %if.end36
  br label %if.end41, !dbg !10550

if.end41:                                         ; preds = %if.end40, %if.end23
  ret void, !dbg !10551
}

; Function Attrs: nounwind
declare dso_local i32 @fchmod(i32, i32) #5

; Function Attrs: nounwind
declare dso_local i32 @fchown(i32, i32, i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @check_ofname() #0 !dbg !10552 {
entry:
  %retval = alloca i32, align 4
  %ostat = alloca %struct.stat, align 8, !ctir !575
  %ok = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata %struct.stat* %ostat, metadata !10553, metadata !DIExpression()), !dbg !10554
  %call = call i32* @__errno_location() #12, !dbg !10555
  store i32 0, i32* %call, align 4, !dbg !10556, !ctir !12
  br label %while.cond, !dbg !10557

while.cond:                                       ; preds = %if.end, %entry
  %call1 = call i32 @lstat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.stat* %ostat) #11, !dbg !10558
  %cmp = icmp ne i32 %call1, 0, !dbg !10559
  br i1 %cmp, label %while.body, label %while.end, !dbg !10557

while.body:                                       ; preds = %while.cond
  %call2 = call i32* @__errno_location() #12, !dbg !10560
  %0 = load i32, i32* %call2, align 4, !dbg !10560, !ctir !12
  %cmp3 = icmp ne i32 %0, 36, !dbg !10563
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10564

if.then:                                          ; preds = %while.body
  store i32 0, i32* %retval, align 4, !dbg !10565
  br label %return, !dbg !10565

if.end:                                           ; preds = %while.body
  call void @shorten_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10566
  br label %while.cond, !dbg !10557, !llvm.loop !10567

while.end:                                        ; preds = %while.cond
  %1 = load i32, i32* @decompress, align 4, !dbg !10569
  %tobool = icmp ne i32 %1, 0, !dbg !10569
  br i1 %tobool, label %if.end11, label %land.lhs.true, !dbg !10571

land.lhs.true:                                    ; preds = %while.end
  %call4 = call i32 @name_too_long(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.stat* %ostat), !dbg !10572
  %tobool5 = icmp ne i32 %call4, 0, !dbg !10572
  br i1 %tobool5, label %if.then6, label %if.end11, !dbg !10573

if.then6:                                         ; preds = %land.lhs.true
  call void @shorten_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10574
  %call7 = call i32 @lstat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.stat* %ostat) #11, !dbg !10576
  %cmp8 = icmp ne i32 %call7, 0, !dbg !10578
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !10579

if.then9:                                         ; preds = %if.then6
  store i32 0, i32* %retval, align 4, !dbg !10580
  br label %return, !dbg !10580

if.end10:                                         ; preds = %if.then6
  br label %if.end11, !dbg !10581

if.end11:                                         ; preds = %if.end10, %land.lhs.true, %while.end
  %call12 = call i32 @same_file(%struct.stat* @istat, %struct.stat* %ostat), !dbg !10582
  %tobool13 = icmp ne i32 %call12, 0, !dbg !10582
  br i1 %tobool13, label %if.then14, label %if.end22, !dbg !10584

if.then14:                                        ; preds = %if.end11
  %call15 = call i32 @strcmp(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)) #9, !dbg !10585
  %cmp16 = icmp eq i32 %call15, 0, !dbg !10585
  br i1 %cmp16, label %if.then17, label %if.else, !dbg !10588

if.then17:                                        ; preds = %if.then14
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10589
  %3 = load i8*, i8** @progname, align 8, !dbg !10591
  %4 = load i32, i32* @decompress, align 4, !dbg !10592
  %tobool18 = icmp ne i32 %4, 0, !dbg !10592
  %5 = zext i1 %tobool18 to i64, !dbg !10592
  %cond = select i1 %tobool18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !10592
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.173, i64 0, i64 0), i8* %3, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %cond), !dbg !10593
  br label %if.end21, !dbg !10594

if.else:                                          ; preds = %if.then14
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10595
  %7 = load i8*, i8** @progname, align 8, !dbg !10597
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.174, i64 0, i64 0), i8* %7, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10598
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then17
  store i32 1, i32* @exit_code, align 4, !dbg !10599
  store i32 1, i32* %retval, align 4, !dbg !10600
  br label %return, !dbg !10600

if.end22:                                         ; preds = %if.end11
  %8 = load i32, i32* @force, align 4, !dbg !10601
  %tobool23 = icmp ne i32 %8, 0, !dbg !10601
  br i1 %tobool23, label %if.end43, label %if.then24, !dbg !10603

if.then24:                                        ; preds = %if.end22
  call void @llvm.dbg.declare(metadata i32* %ok, metadata !10604, metadata !DIExpression()), !dbg !10606
  store i32 0, i32* %ok, align 4, !dbg !10606
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10607
  %10 = load i8*, i8** @progname, align 8, !dbg !10608
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.175, i64 0, i64 0), i8* %10, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10609
  %11 = load i32, i32* @foreground, align 4, !dbg !10610
  %tobool26 = icmp ne i32 %11, 0, !dbg !10610
  br i1 %tobool26, label %land.lhs.true27, label %if.end35, !dbg !10612

land.lhs.true27:                                  ; preds = %if.then24
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !10613
  %call28 = call i32 @fileno(%struct._IO_FILE* %12) #11, !dbg !10614
  %call29 = call i32 @isatty(i32 %call28) #11, !dbg !10615
  %tobool30 = icmp ne i32 %call29, 0, !dbg !10615
  br i1 %tobool30, label %if.then31, label %if.end35, !dbg !10616

if.then31:                                        ; preds = %land.lhs.true27
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10617
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.176, i64 0, i64 0)), !dbg !10619
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10620
  %call33 = call i32 @fflush(%struct._IO_FILE* %14), !dbg !10621
  %call34 = call i32 @yesno(), !dbg !10622
  store i32 %call34, i32* %ok, align 4, !dbg !10623
  br label %if.end35, !dbg !10624

if.end35:                                         ; preds = %if.then31, %land.lhs.true27, %if.then24
  %15 = load i32, i32* %ok, align 4, !dbg !10625
  %tobool36 = icmp ne i32 %15, 0, !dbg !10625
  br i1 %tobool36, label %if.end42, label %if.then37, !dbg !10627

if.then37:                                        ; preds = %if.end35
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10628
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.177, i64 0, i64 0)), !dbg !10630
  %17 = load i32, i32* @exit_code, align 4, !dbg !10631
  %cmp39 = icmp eq i32 %17, 0, !dbg !10633
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !10634

if.then40:                                        ; preds = %if.then37
  store i32 2, i32* @exit_code, align 4, !dbg !10635
  br label %if.end41, !dbg !10636

if.end41:                                         ; preds = %if.then40, %if.then37
  store i32 1, i32* %retval, align 4, !dbg !10637
  br label %return, !dbg !10637

if.end42:                                         ; preds = %if.end35
  br label %if.end43, !dbg !10638

if.end43:                                         ; preds = %if.end42, %if.end22
  %call44 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10639
  %tobool45 = icmp ne i32 %call44, 0, !dbg !10639
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !10641

if.then46:                                        ; preds = %if.end43
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)), !dbg !10642
  store i32 1, i32* %retval, align 4, !dbg !10644
  br label %return, !dbg !10644

if.end47:                                         ; preds = %if.end43
  store i32 0, i32* %retval, align 4, !dbg !10645
  br label %return, !dbg !10645

return:                                           ; preds = %if.end47, %if.then46, %if.end41, %if.end21, %if.then9, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !10646
  ret i32 %18, !dbg !10646
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @name_too_long(i8* %name, %struct.stat* %statb) #0 !dbg !10647 {
entry:
  %name.addr = alloca i8*, align 8
  %statb.addr = alloca %struct.stat*, align 8
  %s = alloca i32, align 4, !ctir !12
  %c = alloca i8, align 1, !ctir !20
  %tstat = alloca %struct.stat, align 8, !ctir !575
  %res = alloca i32, align 4, !ctir !12
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10648, metadata !DIExpression()), !dbg !10649
  store %struct.stat* %statb, %struct.stat** %statb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %statb.addr, metadata !10650, metadata !DIExpression()), !dbg !10651
  call void @llvm.dbg.declare(metadata i32* %s, metadata !10652, metadata !DIExpression()), !dbg !10653
  %0 = load i8*, i8** %name.addr, align 8, !dbg !10654
  %call = call i64 @strlen(i8* %0) #9, !dbg !10655
  %conv = trunc i64 %call to i32, !dbg !10655
  store i32 %conv, i32* %s, align 4, !dbg !10653
  call void @llvm.dbg.declare(metadata i8* %c, metadata !10656, metadata !DIExpression()), !dbg !10657
  %1 = load i8*, i8** %name.addr, align 8, !dbg !10658
  %2 = load i32, i32* %s, align 4, !dbg !10659
  %sub = sub nsw i32 %2, 1, !dbg !10660
  %idxprom = sext i32 %sub to i64, !dbg !10658
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom, !dbg !10658, !ctir !19
  %3 = load i8, i8* %arrayidx, align 1, !dbg !10658
  store i8 %3, i8* %c, align 1, !dbg !10657
  call void @llvm.dbg.declare(metadata %struct.stat* %tstat, metadata !10661, metadata !DIExpression()), !dbg !10662
  call void @llvm.dbg.declare(metadata i32* %res, metadata !10663, metadata !DIExpression()), !dbg !10664
  %4 = load %struct.stat*, %struct.stat** %statb.addr, align 8, !dbg !10665
  %5 = bitcast %struct.stat* %tstat to i8*, !dbg !10666
  %6 = bitcast %struct.stat* %4 to i8*, !dbg !10666
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 144, i1 false), !dbg !10666
  %7 = load i8*, i8** %name.addr, align 8, !dbg !10667
  %8 = load i32, i32* %s, align 4, !dbg !10668
  %sub1 = sub nsw i32 %8, 1, !dbg !10669
  %idxprom2 = sext i32 %sub1 to i64, !dbg !10667
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 %idxprom2, !dbg !10667, !ctir !19
  store i8 0, i8* %arrayidx3, align 1, !dbg !10670
  %9 = load i8*, i8** %name.addr, align 8, !dbg !10671
  %call4 = call i32 @lstat(i8* %9, %struct.stat* %tstat) #11, !dbg !10672
  %cmp = icmp eq i32 %call4, 0, !dbg !10673
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10674

land.rhs:                                         ; preds = %entry
  %10 = load %struct.stat*, %struct.stat** %statb.addr, align 8, !dbg !10675
  %call6 = call i32 @same_file(%struct.stat* %10, %struct.stat* %tstat), !dbg !10676
  %tobool = icmp ne i32 %call6, 0, !dbg !10674
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %11 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !10677
  %land.ext = zext i1 %11 to i32, !dbg !10674
  store i32 %land.ext, i32* %res, align 4, !dbg !10678
  %12 = load i8, i8* %c, align 1, !dbg !10679
  %13 = load i8*, i8** %name.addr, align 8, !dbg !10680
  %14 = load i32, i32* %s, align 4, !dbg !10681
  %sub7 = sub nsw i32 %14, 1, !dbg !10682
  %idxprom8 = sext i32 %sub7 to i64, !dbg !10680
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 %idxprom8, !dbg !10680, !ctir !19
  store i8 %12, i8* %arrayidx9, align 1, !dbg !10683
  %15 = load i32, i32* %res, align 4, !dbg !10684
  ret i32 %15, !dbg !10685
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @shorten_name(i8* %name) #0 !dbg !10686 {
entry:
  %name.addr = alloca i8*, align 8
  %len = alloca i32, align 4, !ctir !12
  %trunc = alloca i8*, align 8, !ctir !19
  %plen = alloca i32, align 4, !ctir !12
  %min_part = alloca i32, align 4, !ctir !12
  %p = alloca i8*, align 8, !ctir !19
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10687, metadata !DIExpression()), !dbg !10688
  call void @llvm.dbg.declare(metadata i32* %len, metadata !10689, metadata !DIExpression()), !dbg !10690
  call void @llvm.dbg.declare(metadata i8** %trunc, metadata !10691, metadata !DIExpression()), !dbg !10692
  store i8* null, i8** %trunc, align 8, !dbg !10692
  call void @llvm.dbg.declare(metadata i32* %plen, metadata !10693, metadata !DIExpression()), !dbg !10694
  call void @llvm.dbg.declare(metadata i32* %min_part, metadata !10695, metadata !DIExpression()), !dbg !10696
  store i32 3, i32* %min_part, align 4, !dbg !10696
  call void @llvm.dbg.declare(metadata i8** %p, metadata !10697, metadata !DIExpression()), !dbg !10698
  %0 = load i8*, i8** %name.addr, align 8, !dbg !10699
  %call = call i64 @strlen(i8* %0) #9, !dbg !10700
  %conv = trunc i64 %call to i32, !dbg !10700
  store i32 %conv, i32* %len, align 4, !dbg !10701
  %1 = load i32, i32* @decompress, align 4, !dbg !10702
  %tobool = icmp ne i32 %1, 0, !dbg !10702
  br i1 %tobool, label %if.then, label %if.end3, !dbg !10704

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %len, align 4, !dbg !10705
  %cmp = icmp sle i32 %2, 1, !dbg !10708
  br i1 %cmp, label %if.then2, label %if.end, !dbg !10709

if.then2:                                         ; preds = %if.then
  call void @error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.178, i64 0, i64 0)), !dbg !10710
  br label %if.end, !dbg !10710

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load i8*, i8** %name.addr, align 8, !dbg !10711
  %4 = load i32, i32* %len, align 4, !dbg !10712
  %sub = sub nsw i32 %4, 1, !dbg !10713
  %idxprom = sext i32 %sub to i64, !dbg !10711
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom, !dbg !10711, !ctir !19
  store i8 0, i8* %arrayidx, align 1, !dbg !10714
  br label %return, !dbg !10715

if.end3:                                          ; preds = %entry
  %5 = load i8*, i8** %name.addr, align 8, !dbg !10716
  %call4 = call i8* @get_suffix(i8* %5), !dbg !10717
  store i8* %call4, i8** %p, align 8, !dbg !10718
  %6 = load i8*, i8** %p, align 8, !dbg !10719
  %cmp5 = icmp eq i8* %6, null, !dbg !10721
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !10722

if.then7:                                         ; preds = %if.end3
  call void @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.179, i64 0, i64 0)), !dbg !10723
  br label %if.end8, !dbg !10723

if.end8:                                          ; preds = %if.then7, %if.end3
  %7 = load i8*, i8** %p, align 8, !dbg !10724
  store i8 0, i8* %7, align 1, !dbg !10725, !ctir !20
  store i32 1, i32* @save_orig_name, align 4, !dbg !10726
  %8 = load i32, i32* %len, align 4, !dbg !10727
  %cmp9 = icmp sgt i32 %8, 4, !dbg !10729
  br i1 %cmp9, label %land.lhs.true, label %if.end17, !dbg !10730

land.lhs.true:                                    ; preds = %if.end8
  %9 = load i8*, i8** %p, align 8, !dbg !10731
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 -4, !dbg !10731, !ctir !20
  %call11 = call i32 @strcmp(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.170, i64 0, i64 0)) #9, !dbg !10731
  %cmp12 = icmp eq i32 %call11, 0, !dbg !10731
  br i1 %cmp12, label %if.then14, label %if.end17, !dbg !10732

if.then14:                                        ; preds = %land.lhs.true
  %10 = load i8*, i8** %p, align 8, !dbg !10733
  %add.ptr15 = getelementptr inbounds i8, i8* %10, i64 -4, !dbg !10735, !ctir !20
  %call16 = call i8* @strcpy(i8* %add.ptr15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i64 0, i64 0)) #11, !dbg !10736
  br label %return, !dbg !10737

if.end17:                                         ; preds = %land.lhs.true, %if.end8
  br label %do.body, !dbg !10738

do.body:                                          ; preds = %land.end, %if.end17
  %11 = load i8*, i8** %name.addr, align 8, !dbg !10739
  %call18 = call i8* @strrchr(i8* %11, i32 47) #9, !dbg !10741
  store i8* %call18, i8** %p, align 8, !dbg !10742
  %12 = load i8*, i8** %p, align 8, !dbg !10743
  %tobool19 = icmp ne i8* %12, null, !dbg !10743
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !10743

cond.true:                                        ; preds = %do.body
  %13 = load i8*, i8** %p, align 8, !dbg !10744
  %add.ptr20 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !10745, !ctir !20
  br label %cond.end, !dbg !10743

cond.false:                                       ; preds = %do.body
  %14 = load i8*, i8** %name.addr, align 8, !dbg !10746
  br label %cond.end, !dbg !10743

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr20, %cond.true ], [ %14, %cond.false ], !dbg !10743
  store i8* %cond, i8** %p, align 8, !dbg !10747
  br label %while.cond, !dbg !10748

while.cond:                                       ; preds = %if.end32, %cond.end
  %15 = load i8*, i8** %p, align 8, !dbg !10749
  %16 = load i8, i8* %15, align 1, !dbg !10750, !ctir !20
  %tobool21 = icmp ne i8 %16, 0, !dbg !10748
  br i1 %tobool21, label %while.body, label %while.end, !dbg !10748

while.body:                                       ; preds = %while.cond
  %17 = load i8*, i8** %p, align 8, !dbg !10751
  %call22 = call i64 @strcspn(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.166, i64 0, i64 0)) #9, !dbg !10753
  %conv23 = trunc i64 %call22 to i32, !dbg !10753
  store i32 %conv23, i32* %plen, align 4, !dbg !10754
  %18 = load i32, i32* %plen, align 4, !dbg !10755
  %19 = load i8*, i8** %p, align 8, !dbg !10756
  %idx.ext = sext i32 %18 to i64, !dbg !10756
  %add.ptr24 = getelementptr inbounds i8, i8* %19, i64 %idx.ext, !dbg !10756, !ctir !20
  store i8* %add.ptr24, i8** %p, align 8, !dbg !10756
  %20 = load i32, i32* %plen, align 4, !dbg !10757
  %21 = load i32, i32* %min_part, align 4, !dbg !10759
  %cmp25 = icmp sgt i32 %20, %21, !dbg !10760
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !10761

if.then27:                                        ; preds = %while.body
  %22 = load i8*, i8** %p, align 8, !dbg !10762
  %add.ptr28 = getelementptr inbounds i8, i8* %22, i64 -1, !dbg !10763, !ctir !20
  store i8* %add.ptr28, i8** %trunc, align 8, !dbg !10764
  br label %if.end29, !dbg !10765

if.end29:                                         ; preds = %if.then27, %while.body
  %23 = load i8*, i8** %p, align 8, !dbg !10766
  %24 = load i8, i8* %23, align 1, !dbg !10768, !ctir !20
  %tobool30 = icmp ne i8 %24, 0, !dbg !10768
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !10769

if.then31:                                        ; preds = %if.end29
  %25 = load i8*, i8** %p, align 8, !dbg !10770
  %incdec.ptr = getelementptr inbounds i8, i8* %25, i32 1, !dbg !10770, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !10770
  br label %if.end32, !dbg !10771

if.end32:                                         ; preds = %if.then31, %if.end29
  br label %while.cond, !dbg !10748, !llvm.loop !10772

while.end:                                        ; preds = %while.cond
  br label %do.cond, !dbg !10774

do.cond:                                          ; preds = %while.end
  %26 = load i8*, i8** %trunc, align 8, !dbg !10775
  %cmp33 = icmp eq i8* %26, null, !dbg !10776
  br i1 %cmp33, label %land.rhs, label %land.end, !dbg !10777

land.rhs:                                         ; preds = %do.cond
  %27 = load i32, i32* %min_part, align 4, !dbg !10778
  %dec = add nsw i32 %27, -1, !dbg !10778
  store i32 %dec, i32* %min_part, align 4, !dbg !10778
  %cmp35 = icmp ne i32 %dec, 0, !dbg !10779
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %28 = phi i1 [ false, %do.cond ], [ %cmp35, %land.rhs ], !dbg !10780
  br i1 %28, label %do.body, label %do.end, !dbg !10774, !llvm.loop !10781

do.end:                                           ; preds = %land.end
  %29 = load i8*, i8** %trunc, align 8, !dbg !10783
  %cmp37 = icmp ne i8* %29, null, !dbg !10785
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !10786

if.then39:                                        ; preds = %do.end
  br label %do.body40, !dbg !10787

do.body40:                                        ; preds = %do.cond43, %if.then39
  %30 = load i8*, i8** %trunc, align 8, !dbg !10789
  %arrayidx41 = getelementptr inbounds i8, i8* %30, i64 1, !dbg !10789, !ctir !19
  %31 = load i8, i8* %arrayidx41, align 1, !dbg !10789
  %32 = load i8*, i8** %trunc, align 8, !dbg !10791
  %arrayidx42 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !10791, !ctir !19
  store i8 %31, i8* %arrayidx42, align 1, !dbg !10792
  br label %do.cond43, !dbg !10793

do.cond43:                                        ; preds = %do.body40
  %33 = load i8*, i8** %trunc, align 8, !dbg !10794
  %incdec.ptr44 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !10794, !ctir !20
  store i8* %incdec.ptr44, i8** %trunc, align 8, !dbg !10794
  %34 = load i8, i8* %33, align 1, !dbg !10795, !ctir !20
  %tobool45 = icmp ne i8 %34, 0, !dbg !10793
  br i1 %tobool45, label %do.body40, label %do.end46, !dbg !10793, !llvm.loop !10796

do.end46:                                         ; preds = %do.cond43
  %35 = load i8*, i8** %trunc, align 8, !dbg !10798
  %incdec.ptr47 = getelementptr inbounds i8, i8* %35, i32 -1, !dbg !10798, !ctir !20
  store i8* %incdec.ptr47, i8** %trunc, align 8, !dbg !10798
  br label %if.end61, !dbg !10799

if.else:                                          ; preds = %do.end
  %36 = load i8*, i8** %name.addr, align 8, !dbg !10800
  %37 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.166, i64 0, i64 0), align 1, !dbg !10802
  %conv48 = sext i8 %37 to i32, !dbg !10802
  %call49 = call i8* @strrchr(i8* %36, i32 %conv48) #9, !dbg !10803
  store i8* %call49, i8** %trunc, align 8, !dbg !10804
  %38 = load i8*, i8** %trunc, align 8, !dbg !10805
  %cmp50 = icmp eq i8* %38, null, !dbg !10807
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !10808

if.then52:                                        ; preds = %if.else
  call void @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.180, i64 0, i64 0)), !dbg !10809
  br label %if.end53, !dbg !10809

if.end53:                                         ; preds = %if.then52, %if.else
  %39 = load i8*, i8** %trunc, align 8, !dbg !10810
  %arrayidx54 = getelementptr inbounds i8, i8* %39, i64 1, !dbg !10810, !ctir !19
  %40 = load i8, i8* %arrayidx54, align 1, !dbg !10810
  %conv55 = sext i8 %40 to i32, !dbg !10810
  %cmp56 = icmp eq i32 %conv55, 0, !dbg !10812
  br i1 %cmp56, label %if.then58, label %if.end60, !dbg !10813

if.then58:                                        ; preds = %if.end53
  %41 = load i8*, i8** %trunc, align 8, !dbg !10814
  %incdec.ptr59 = getelementptr inbounds i8, i8* %41, i32 -1, !dbg !10814, !ctir !20
  store i8* %incdec.ptr59, i8** %trunc, align 8, !dbg !10814
  br label %if.end60, !dbg !10815

if.end60:                                         ; preds = %if.then58, %if.end53
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %do.end46
  %42 = load i8*, i8** %trunc, align 8, !dbg !10816
  %43 = load i8*, i8** @z_suffix, align 8, !dbg !10817
  %call62 = call i8* @strcpy(i8* %42, i8* %43) #11, !dbg !10818
  br label %return, !dbg !10819

return:                                           ; preds = %if.end61, %if.then14, %if.end
  ret void, !dbg !10819
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @get_suffix(i8* %name) #0 !dbg !705 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %nlen = alloca i32, align 4, !ctir !12
  %slen = alloca i32, align 4, !ctir !12
  %suffix = alloca [33 x i8], align 16, !ctir !190
  %suf = alloca i8**, align 8, !ctir !23
  %s = alloca i32, align 4, !ctir !12
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10820, metadata !DIExpression()), !dbg !10821
  call void @llvm.dbg.declare(metadata i32* %nlen, metadata !10822, metadata !DIExpression()), !dbg !10823
  call void @llvm.dbg.declare(metadata i32* %slen, metadata !10824, metadata !DIExpression()), !dbg !10825
  call void @llvm.dbg.declare(metadata [33 x i8]* %suffix, metadata !10826, metadata !DIExpression()), !dbg !10827
  call void @llvm.dbg.declare(metadata i8*** %suf, metadata !10828, metadata !DIExpression()), !dbg !10829
  store i8** getelementptr inbounds ([9 x i8*], [9 x i8*]* @get_suffix.known_suffixes, i64 0, i64 0), i8*** %suf, align 8, !dbg !10829
  %0 = load i8*, i8** @z_suffix, align 8, !dbg !10830
  %1 = load i8**, i8*** %suf, align 8, !dbg !10831
  store i8* %0, i8** %1, align 8, !dbg !10832, !ctir !19
  %2 = load i8*, i8** @z_suffix, align 8, !dbg !10833
  %call = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.165, i64 0, i64 0)) #9, !dbg !10833
  %cmp = icmp eq i32 %call, 0, !dbg !10833
  br i1 %cmp, label %if.then, label %if.end, !dbg !10835

if.then:                                          ; preds = %entry
  %3 = load i8**, i8*** %suf, align 8, !dbg !10836
  %incdec.ptr = getelementptr inbounds i8*, i8** %3, i32 1, !dbg !10836, !ctir !19
  store i8** %incdec.ptr, i8*** %suf, align 8, !dbg !10836
  br label %if.end, !dbg !10837

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !10838
  %call1 = call i64 @strlen(i8* %4) #9, !dbg !10839
  %conv = trunc i64 %call1 to i32, !dbg !10839
  store i32 %conv, i32* %nlen, align 4, !dbg !10840
  %5 = load i32, i32* %nlen, align 4, !dbg !10841
  %cmp2 = icmp sle i32 %5, 32, !dbg !10843
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !10844

if.then4:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 0, !dbg !10845, !ctir !190
  %6 = load i8*, i8** %name.addr, align 8, !dbg !10847
  %call5 = call i8* @strcpy(i8* %arraydecay, i8* %6) #11, !dbg !10848
  br label %if.end10, !dbg !10849

if.else:                                          ; preds = %if.end
  %arraydecay6 = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 0, !dbg !10850, !ctir !190
  %7 = load i8*, i8** %name.addr, align 8, !dbg !10852
  %8 = load i32, i32* %nlen, align 4, !dbg !10853
  %idx.ext = sext i32 %8 to i64, !dbg !10854
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !10854, !ctir !20
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 -30, !dbg !10855, !ctir !20
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 -2, !dbg !10856, !ctir !20
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %add.ptr8) #11, !dbg !10857
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then4
  %arraydecay11 = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 0, !dbg !10858, !ctir !190
  %call12 = call i8* @strlwr(i8* %arraydecay11), !dbg !10859
  %arraydecay13 = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 0, !dbg !10860, !ctir !190
  %call14 = call i64 @strlen(i8* %arraydecay13) #9, !dbg !10861
  %conv15 = trunc i64 %call14 to i32, !dbg !10861
  store i32 %conv15, i32* %slen, align 4, !dbg !10862
  br label %do.body, !dbg !10863

do.body:                                          ; preds = %do.cond, %if.end10
  call void @llvm.dbg.declare(metadata i32* %s, metadata !10864, metadata !DIExpression()), !dbg !10866
  %9 = load i8**, i8*** %suf, align 8, !dbg !10867
  %10 = load i8*, i8** %9, align 8, !dbg !10868, !ctir !19
  %call16 = call i64 @strlen(i8* %10) #9, !dbg !10869
  %conv17 = trunc i64 %call16 to i32, !dbg !10869
  store i32 %conv17, i32* %s, align 4, !dbg !10866
  %11 = load i32, i32* %slen, align 4, !dbg !10870
  %12 = load i32, i32* %s, align 4, !dbg !10872
  %cmp18 = icmp sgt i32 %11, %12, !dbg !10873
  br i1 %cmp18, label %land.lhs.true, label %if.end39, !dbg !10874

land.lhs.true:                                    ; preds = %do.body
  %13 = load i32, i32* %slen, align 4, !dbg !10875
  %14 = load i32, i32* %s, align 4, !dbg !10876
  %sub = sub nsw i32 %13, %14, !dbg !10877
  %sub20 = sub nsw i32 %sub, 1, !dbg !10878
  %idxprom = sext i32 %sub20 to i64, !dbg !10879
  %arrayidx = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 %idxprom, !dbg !10879, !ctir !190
  %15 = load i8, i8* %arrayidx, align 1, !dbg !10879
  %conv21 = sext i8 %15 to i32, !dbg !10879
  %cmp22 = icmp ne i32 %conv21, 47, !dbg !10880
  br i1 %cmp22, label %land.lhs.true24, label %if.end39, !dbg !10881

land.lhs.true24:                                  ; preds = %land.lhs.true
  %arraydecay25 = getelementptr inbounds [33 x i8], [33 x i8]* %suffix, i64 0, i64 0, !dbg !10882, !ctir !190
  %16 = load i32, i32* %slen, align 4, !dbg !10882
  %idx.ext26 = sext i32 %16 to i64, !dbg !10882
  %add.ptr27 = getelementptr inbounds i8, i8* %arraydecay25, i64 %idx.ext26, !dbg !10882, !ctir !20
  %17 = load i32, i32* %s, align 4, !dbg !10882
  %idx.ext28 = sext i32 %17 to i64, !dbg !10882
  %idx.neg = sub i64 0, %idx.ext28, !dbg !10882
  %add.ptr29 = getelementptr inbounds i8, i8* %add.ptr27, i64 %idx.neg, !dbg !10882, !ctir !20
  %18 = load i8**, i8*** %suf, align 8, !dbg !10882
  %19 = load i8*, i8** %18, align 8, !dbg !10882, !ctir !19
  %call30 = call i32 @strcmp(i8* %add.ptr29, i8* %19) #9, !dbg !10882
  %cmp31 = icmp eq i32 %call30, 0, !dbg !10882
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !10883

if.then33:                                        ; preds = %land.lhs.true24
  %20 = load i8*, i8** %name.addr, align 8, !dbg !10884
  %21 = load i32, i32* %nlen, align 4, !dbg !10886
  %idx.ext34 = sext i32 %21 to i64, !dbg !10887
  %add.ptr35 = getelementptr inbounds i8, i8* %20, i64 %idx.ext34, !dbg !10887, !ctir !20
  %22 = load i32, i32* %s, align 4, !dbg !10888
  %idx.ext36 = sext i32 %22 to i64, !dbg !10889
  %idx.neg37 = sub i64 0, %idx.ext36, !dbg !10889
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr35, i64 %idx.neg37, !dbg !10889, !ctir !20
  store i8* %add.ptr38, i8** %retval, align 8, !dbg !10890
  br label %return, !dbg !10890

if.end39:                                         ; preds = %land.lhs.true24, %land.lhs.true, %do.body
  br label %do.cond, !dbg !10891

do.cond:                                          ; preds = %if.end39
  %23 = load i8**, i8*** %suf, align 8, !dbg !10892
  %incdec.ptr40 = getelementptr inbounds i8*, i8** %23, i32 1, !dbg !10892, !ctir !19
  store i8** %incdec.ptr40, i8*** %suf, align 8, !dbg !10892
  %24 = load i8*, i8** %incdec.ptr40, align 8, !dbg !10893, !ctir !19
  %cmp41 = icmp ne i8* %24, null, !dbg !10894
  br i1 %cmp41, label %do.body, label %do.end, !dbg !10891, !llvm.loop !10895

do.end:                                           ; preds = %do.cond
  store i8* null, i8** %retval, align 8, !dbg !10897
  br label %return, !dbg !10897

return:                                           ; preds = %do.end, %if.then33
  %25 = load i8*, i8** %retval, align 8, !dbg !10898
  ret i8* %25, !dbg !10898
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strcspn(i8*, i8*) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @strlwr(i8* %s) #0 !dbg !10899 {
entry:
  %s.addr = alloca i8*, align 8
  %t = alloca i8*, align 8, !ctir !19
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !10900, metadata !DIExpression()), !dbg !10901
  call void @llvm.dbg.declare(metadata i8** %t, metadata !10902, metadata !DIExpression()), !dbg !10903
  %0 = load i8*, i8** %s.addr, align 8, !dbg !10904
  store i8* %0, i8** %t, align 8, !dbg !10906
  br label %for.cond, !dbg !10907

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %t, align 8, !dbg !10908
  %2 = load i8, i8* %1, align 1, !dbg !10910, !ctir !20
  %tobool = icmp ne i8 %2, 0, !dbg !10911
  br i1 %tobool, label %for.body, label %for.end, !dbg !10911

for.body:                                         ; preds = %for.cond
  %call = call i16** @__ctype_b_loc() #12, !dbg !10912
  %3 = load i16*, i16** %call, align 8, !dbg !10912, !ctir !305
  %4 = load i8*, i8** %t, align 8, !dbg !10912
  %5 = load i8, i8* %4, align 1, !dbg !10912, !ctir !20
  %conv = zext i8 %5 to i32, !dbg !10912
  %idxprom = sext i32 %conv to i64, !dbg !10912
  %arrayidx = getelementptr inbounds i16, i16* %3, i64 %idxprom, !dbg !10912, !ctir !305
  %6 = load i16, i16* %arrayidx, align 2, !dbg !10912
  %conv1 = zext i16 %6 to i32, !dbg !10912
  %and = and i32 %conv1, 256, !dbg !10912
  %tobool2 = icmp ne i32 %and, 0, !dbg !10912
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !10912

cond.true:                                        ; preds = %for.body
  %7 = load i8*, i8** %t, align 8, !dbg !10912
  %8 = load i8, i8* %7, align 1, !dbg !10912, !ctir !20
  %conv3 = zext i8 %8 to i32, !dbg !10912
  %call4 = call i32 @tolower(i32 %conv3) #9, !dbg !10912
  br label %cond.end, !dbg !10912

cond.false:                                       ; preds = %for.body
  %9 = load i8*, i8** %t, align 8, !dbg !10912
  %10 = load i8, i8* %9, align 1, !dbg !10912, !ctir !20
  %conv5 = zext i8 %10 to i32, !dbg !10912
  br label %cond.end, !dbg !10912

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call4, %cond.true ], [ %conv5, %cond.false ], !dbg !10912
  %conv6 = trunc i32 %cond to i8, !dbg !10912
  %11 = load i8*, i8** %t, align 8, !dbg !10913
  store i8 %conv6, i8* %11, align 1, !dbg !10914, !ctir !20
  br label %for.inc, !dbg !10915

for.inc:                                          ; preds = %cond.end
  %12 = load i8*, i8** %t, align 8, !dbg !10916
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !10916, !ctir !20
  store i8* %incdec.ptr, i8** %t, align 8, !dbg !10916
  br label %for.cond, !dbg !10917, !llvm.loop !10918

for.end:                                          ; preds = %for.cond
  %13 = load i8*, i8** %s.addr, align 8, !dbg !10920
  ret i8* %13, !dbg !10921
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #7

; Function Attrs: nounwind readonly
declare dso_local i32 @tolower(i32) #6

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @same_file(%struct.stat* %stat1, %struct.stat* %stat2) #0 !dbg !10922 {
entry:
  %stat1.addr = alloca %struct.stat*, align 8
  %stat2.addr = alloca %struct.stat*, align 8
  store %struct.stat* %stat1, %struct.stat** %stat1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %stat1.addr, metadata !10925, metadata !DIExpression()), !dbg !10926
  store %struct.stat* %stat2, %struct.stat** %stat2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %stat2.addr, metadata !10927, metadata !DIExpression()), !dbg !10928
  %0 = load %struct.stat*, %struct.stat** %stat1.addr, align 8, !dbg !10929
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 1, !dbg !10930, !ctir !575
  %1 = load i64, i64* %st_ino, align 8, !dbg !10930, !ctir !379
  %2 = load %struct.stat*, %struct.stat** %stat2.addr, align 8, !dbg !10931
  %st_ino1 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1, !dbg !10932, !ctir !575
  %3 = load i64, i64* %st_ino1, align 8, !dbg !10932, !ctir !379
  %cmp = icmp eq i64 %1, %3, !dbg !10933
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10934

land.rhs:                                         ; preds = %entry
  %4 = load %struct.stat*, %struct.stat** %stat1.addr, align 8, !dbg !10935
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 0, !dbg !10936, !ctir !575
  %5 = load i64, i64* %st_dev, align 8, !dbg !10936, !ctir !395
  %6 = load %struct.stat*, %struct.stat** %stat2.addr, align 8, !dbg !10937
  %st_dev2 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0, !dbg !10938, !ctir !575
  %7 = load i64, i64* %st_dev2, align 8, !dbg !10938, !ctir !395
  %cmp3 = icmp eq i64 %5, %7, !dbg !10939
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !10940
  %land.ext = zext i1 %8 to i32, !dbg !10934
  ret i32 %land.ext, !dbg !10941
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @yesno() #0 !dbg !10942 {
entry:
  %buf = alloca [128 x i8], align 16, !ctir !323
  %len = alloca i32, align 4, !ctir !12
  %c = alloca i32, align 4, !ctir !12
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf, metadata !10943, metadata !DIExpression()), !dbg !10944
  call void @llvm.dbg.declare(metadata i32* %len, metadata !10945, metadata !DIExpression()), !dbg !10946
  store i32 0, i32* %len, align 4, !dbg !10946
  call void @llvm.dbg.declare(metadata i32* %c, metadata !10947, metadata !DIExpression()), !dbg !10948
  br label %while.cond, !dbg !10949

while.cond:                                       ; preds = %if.end, %entry
  %call = call i32 @getchar(), !dbg !10950
  store i32 %call, i32* %c, align 4, !dbg !10951
  %cmp = icmp ne i32 %call, -1, !dbg !10952
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10953

land.rhs:                                         ; preds = %while.cond
  %0 = load i32, i32* %c, align 4, !dbg !10954
  %cmp1 = icmp ne i32 %0, 10, !dbg !10955
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !10956
  br i1 %1, label %while.body, label %while.end, !dbg !10949

while.body:                                       ; preds = %land.end
  %2 = load i32, i32* %len, align 4, !dbg !10957
  %cmp2 = icmp sgt i32 %2, 0, !dbg !10959
  br i1 %cmp2, label %land.lhs.true, label %lor.lhs.false, !dbg !10960

land.lhs.true:                                    ; preds = %while.body
  %3 = load i32, i32* %len, align 4, !dbg !10961
  %cmp3 = icmp slt i32 %3, 127, !dbg !10962
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !10963

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %4 = load i32, i32* %len, align 4, !dbg !10964
  %cmp4 = icmp eq i32 %4, 0, !dbg !10965
  br i1 %cmp4, label %land.lhs.true5, label %if.end, !dbg !10966

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %call6 = call i16** @__ctype_b_loc() #12, !dbg !10967
  %5 = load i16*, i16** %call6, align 8, !dbg !10967, !ctir !305
  %6 = load i32, i32* %c, align 4, !dbg !10967
  %idxprom = sext i32 %6 to i64, !dbg !10967
  %arrayidx = getelementptr inbounds i16, i16* %5, i64 %idxprom, !dbg !10967, !ctir !305
  %7 = load i16, i16* %arrayidx, align 2, !dbg !10967
  %conv = zext i16 %7 to i32, !dbg !10967
  %and = and i32 %conv, 8192, !dbg !10967
  %tobool = icmp ne i32 %and, 0, !dbg !10967
  br i1 %tobool, label %if.end, label %if.then, !dbg !10968

if.then:                                          ; preds = %land.lhs.true5, %land.lhs.true
  %8 = load i32, i32* %c, align 4, !dbg !10969
  %conv7 = trunc i32 %8 to i8, !dbg !10969
  %9 = load i32, i32* %len, align 4, !dbg !10970
  %inc = add nsw i32 %9, 1, !dbg !10970
  store i32 %inc, i32* %len, align 4, !dbg !10970
  %idxprom8 = sext i32 %9 to i64, !dbg !10971
  %arrayidx9 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 %idxprom8, !dbg !10971, !ctir !323
  store i8 %conv7, i8* %arrayidx9, align 1, !dbg !10972
  br label %if.end, !dbg !10971

if.end:                                           ; preds = %if.then, %land.lhs.true5, %lor.lhs.false
  br label %while.cond, !dbg !10949, !llvm.loop !10973

while.end:                                        ; preds = %land.end
  %10 = load i32, i32* %len, align 4, !dbg !10975
  %idxprom10 = sext i32 %10 to i64, !dbg !10976
  %arrayidx11 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 %idxprom10, !dbg !10976, !ctir !323
  store i8 0, i8* %arrayidx11, align 1, !dbg !10977
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !10978, !ctir !323
  %call12 = call i32 @rpmatch(i8* %arraydecay) #11, !dbg !10979
  %cmp13 = icmp eq i32 %call12, 1, !dbg !10980
  %conv14 = zext i1 %cmp13 to i32, !dbg !10980
  ret i32 %conv14, !dbg !10981
}

declare dso_local i32 @getchar() #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpmatch(i8* nonnull %response) #0 !dbg !10982 {
entry:
  %response.addr = alloca i8*, align 8
  store i8* %response, i8** %response.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %response.addr, metadata !10985, metadata !DIExpression()), !dbg !10986
  %0 = load i8*, i8** %response.addr, align 8, !dbg !10987
  %1 = load i8, i8* %0, align 1, !dbg !10988, !ctir !30
  %conv = sext i8 %1 to i32, !dbg !10988
  %cmp = icmp eq i32 %conv, 121, !dbg !10989
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !10990

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %response.addr, align 8, !dbg !10991
  %3 = load i8, i8* %2, align 1, !dbg !10992, !ctir !30
  %conv2 = sext i8 %3 to i32, !dbg !10992
  %cmp3 = icmp eq i32 %conv2, 89, !dbg !10993
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !10988

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !10988

cond.false:                                       ; preds = %lor.lhs.false
  %4 = load i8*, i8** %response.addr, align 8, !dbg !10994
  %5 = load i8, i8* %4, align 1, !dbg !10995, !ctir !30
  %conv5 = sext i8 %5 to i32, !dbg !10995
  %cmp6 = icmp eq i32 %conv5, 110, !dbg !10996
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !10997

lor.rhs:                                          ; preds = %cond.false
  %6 = load i8*, i8** %response.addr, align 8, !dbg !10998
  %7 = load i8, i8* %6, align 1, !dbg !10999, !ctir !30
  %conv8 = sext i8 %7 to i32, !dbg !10999
  %cmp9 = icmp eq i32 %conv8, 78, !dbg !11000
  br label %lor.end, !dbg !10997

lor.end:                                          ; preds = %lor.rhs, %cond.false
  %8 = phi i1 [ true, %cond.false ], [ %cmp9, %lor.rhs ]
  %9 = zext i1 %8 to i64, !dbg !10995
  %cond = select i1 %8, i32 0, i32 -1, !dbg !10995
  br label %cond.end, !dbg !10988

cond.end:                                         ; preds = %lor.end, %cond.true
  %cond11 = phi i32 [ 1, %cond.true ], [ %cond, %lor.end ], !dbg !10988
  ret i32 %cond11, !dbg !11001
}

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #5

; Function Attrs: nounwind
declare dso_local i32 @utime(i8*, %struct.timespec*) #5

declare dso_local %struct.__dirstream* @opendir(i8*) #3

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @do_stat(i8* %name, %struct.stat* %sbuf) #0 !dbg !11002 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %sbuf.addr = alloca %struct.stat*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !11003, metadata !DIExpression()), !dbg !11004
  store %struct.stat* %sbuf, %struct.stat** %sbuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %sbuf.addr, metadata !11005, metadata !DIExpression()), !dbg !11006
  %call = call i32* @__errno_location() #12, !dbg !11007
  store i32 0, i32* %call, align 4, !dbg !11008, !ctir !12
  %0 = load i32, i32* @to_stdout, align 4, !dbg !11009
  %tobool = icmp ne i32 %0, 0, !dbg !11009
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !11011

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @force, align 4, !dbg !11012
  %tobool1 = icmp ne i32 %1, 0, !dbg !11012
  br i1 %tobool1, label %if.end, label %if.then, !dbg !11013

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** %name.addr, align 8, !dbg !11014
  %3 = load %struct.stat*, %struct.stat** %sbuf.addr, align 8, !dbg !11016
  %call2 = call i32 @lstat(i8* %2, %struct.stat* %3) #11, !dbg !11017
  store i32 %call2, i32* %retval, align 4, !dbg !11018
  br label %return, !dbg !11018

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !11019
  %5 = load %struct.stat*, %struct.stat** %sbuf.addr, align 8, !dbg !11020
  %call3 = call i32 @stat(i8* %4, %struct.stat* %5) #11, !dbg !11021
  store i32 %call3, i32* %retval, align 4, !dbg !11022
  br label %return, !dbg !11022

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !11023
  ret i32 %6, !dbg !11023
}

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #5

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xmalloc(i32 %size) #0 !dbg !11024 {
entry:
  %size.addr = alloca i32, align 4
  %cp = alloca i8*, align 8, !ctir !17
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !11027, metadata !DIExpression()), !dbg !11028
  call void @llvm.dbg.declare(metadata i8** %cp, metadata !11029, metadata !DIExpression()), !dbg !11030
  %0 = load i32, i32* %size.addr, align 4, !dbg !11031
  %conv = zext i32 %0 to i64, !dbg !11031
  %call = call noalias i8* @malloc(i64 %conv) #11, !dbg !11032
  store i8* %call, i8** %cp, align 8, !dbg !11030
  %1 = load i8*, i8** %cp, align 8, !dbg !11033
  %cmp = icmp eq i8* %1, null, !dbg !11035
  br i1 %cmp, label %if.then, label %if.end, !dbg !11036

if.then:                                          ; preds = %entry
  call void @error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.62, i64 0, i64 0)), !dbg !11037
  br label %if.end, !dbg !11037

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %cp, align 8, !dbg !11038
  ret i8* %2, !dbg !11039
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strspn(i8*, i8*) #6

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_simple_name(i8* %name) #0 !dbg !11040 {
entry:
  %name.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !19
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !11041, metadata !DIExpression()), !dbg !11042
  call void @llvm.dbg.declare(metadata i8** %p, metadata !11043, metadata !DIExpression()), !dbg !11044
  %0 = load i8*, i8** %name.addr, align 8, !dbg !11045
  %call = call i8* @strrchr(i8* %0, i32 46) #9, !dbg !11046
  store i8* %call, i8** %p, align 8, !dbg !11044
  %1 = load i8*, i8** %p, align 8, !dbg !11047
  %cmp = icmp eq i8* %1, null, !dbg !11049
  br i1 %cmp, label %if.then, label %if.end, !dbg !11050

if.then:                                          ; preds = %entry
  br label %do.end, !dbg !11051

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %p, align 8, !dbg !11052
  %3 = load i8*, i8** %name.addr, align 8, !dbg !11054
  %cmp1 = icmp eq i8* %2, %3, !dbg !11055
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !11056

if.then2:                                         ; preds = %if.end
  %4 = load i8*, i8** %p, align 8, !dbg !11057
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !11057, !ctir !20
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !11057
  br label %if.end3, !dbg !11058

if.end3:                                          ; preds = %if.then2, %if.end
  br label %do.body, !dbg !11059

do.body:                                          ; preds = %do.cond, %if.end3
  %5 = load i8*, i8** %p, align 8, !dbg !11060
  %incdec.ptr4 = getelementptr inbounds i8, i8* %5, i32 -1, !dbg !11060, !ctir !20
  store i8* %incdec.ptr4, i8** %p, align 8, !dbg !11060
  %6 = load i8, i8* %incdec.ptr4, align 1, !dbg !11063, !ctir !20
  %conv = sext i8 %6 to i32, !dbg !11063
  %cmp5 = icmp eq i32 %conv, 46, !dbg !11064
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !11065

if.then7:                                         ; preds = %do.body
  %7 = load i8*, i8** %p, align 8, !dbg !11066
  store i8 95, i8* %7, align 1, !dbg !11067, !ctir !20
  br label %if.end8, !dbg !11068

if.end8:                                          ; preds = %if.then7, %do.body
  br label %do.cond, !dbg !11069

do.cond:                                          ; preds = %if.end8
  %8 = load i8*, i8** %p, align 8, !dbg !11070
  %9 = load i8*, i8** %name.addr, align 8, !dbg !11071
  %cmp9 = icmp ne i8* %8, %9, !dbg !11072
  br i1 %cmp9, label %do.body, label %do.end, !dbg !11069, !llvm.loop !11073

do.end:                                           ; preds = %if.then, %do.cond
  ret void, !dbg !11075
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getopt_long_only(i32 %argc, i8** %argv, i8* %options, %struct.option* %long_options, i32* %opt_index) #0 !dbg !11076 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca i8*, align 8
  %long_options.addr = alloca %struct.option*, align 8
  %opt_index.addr = alloca i32*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !11077, metadata !DIExpression()), !dbg !11078
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !11079, metadata !DIExpression()), !dbg !11080
  store i8* %options, i8** %options.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %options.addr, metadata !11081, metadata !DIExpression()), !dbg !11082
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !11083, metadata !DIExpression()), !dbg !11084
  store i32* %opt_index, i32** %opt_index.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %opt_index.addr, metadata !11085, metadata !DIExpression()), !dbg !11086
  %0 = load i32, i32* %argc.addr, align 4, !dbg !11087
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !11088
  %2 = load i8*, i8** %options.addr, align 8, !dbg !11089
  %3 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !11090
  %4 = load i32*, i32** %opt_index.addr, align 8, !dbg !11091
  %call = call i32 @_getopt_internal(i32 %0, i8** %1, i8* %2, %struct.option* %3, i32* %4, i32 1), !dbg !11092
  ret i32 %call, !dbg !11093
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }
attributes #13 = { noreturn }

!llvm.dbg.cu = !{!2}
!llvm.ident = !{!773}
!llvm.module.flags = !{!774, !775, !776, !777}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "read_buf", scope: !2, file: !3, line: 708, type: !146, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !11, globals: !412, nameTableKind: None)
!3 = !DIFile(filename: "gzip.c", directory: "/home/mbarbar/software/single-file-bench")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 2003, baseType: !6, size: 32, elements: !7)
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !{!8, !9, !10}
!8 = !DIEnumerator(name: "REQUIRE_ORDER", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "PERMUTE", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "RETURN_IN_ORDER", value: 2, isUnsigned: true)
!11 = !{!12, !13, !15, !17, !19, !6, !21, !18, !22, !23, !24, !33, !35, !40, !41, !51, !53, !67, !78, !79, !83, !84, !16, !14, !85, !86, !87, !20, !52, !141, !145, !146, !149, !152, !155, !156, !157, !166, !29, !167, !169, !172, !175, !178, !181, !117, !184, !187, !190, !193, !196, !199, !202, !205, !208, !134, !211, !214, !217, !220, !223, !224, !225, !228, !47, !231, !234, !237, !240, !241, !244, !247, !250, !54, !63, !251, !254, !257, !258, !261, !262, !58, !263, !68, !266, !269, !272, !275, !276, !279, !282, !283, !286, !287, !288, !291, !292, !295, !298, !301, !304, !305, !307, !310, !313, !316, !319, !322, !323, !142, !30, !326, !327, !330, !333, !334, !337, !340, !343, !344, !347, !348, !144, !351, !354, !357, !360, !361, !364, !365, !366, !81, !369, !370, !371, !374, !385, !384, !389, !392, !379, !395, !396, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409}
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "uch", file: !3, line: 390, baseType: !14)
!14 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "ush", file: !3, line: 391, baseType: !16)
!16 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "voidp", file: !3, line: 377, baseType: !18)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!20 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "IPos", file: !3, line: 1004, baseType: !6)
!22 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!26 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !3, line: 1837, size: 256, elements: !27)
!27 = !{!28, !31, !32, !34}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !26, file: !3, line: 1840, baseType: !29, size: 64)
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !26, file: !3, line: 1846, baseType: !12, size: 32, offset: 64)
!32 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !26, file: !3, line: 1847, baseType: !33, size: 64, offset: 128)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !26, file: !3, line: 1848, baseType: !12, size: 32, offset: 192)
!35 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !36, line: 72, baseType: !37)
!36 = !DIFile(filename: "/usr/include/signal.h", directory: "")
!37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64)
!38 = !DISubroutineType(types: !39)
!39 = !{null, !12}
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "sig_type", file: !3, line: 2925, baseType: !37)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "huft", file: !3, line: 4780, size: 128, elements: !43)
!43 = !{!44, !45, !46}
!44 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !42, file: !3, line: 4781, baseType: !13, size: 8)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !42, file: !3, line: 4782, baseType: !13, size: 8, offset: 8)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !42, file: !3, line: 4786, baseType: !47, size: 64, offset: 64)
!47 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !42, file: !3, line: 4783, size: 64, elements: !48)
!48 = !{!49, !50}
!49 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !47, file: !3, line: 4784, baseType: !15, size: 16)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !47, file: !3, line: 4785, baseType: !41, size: 64)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "ulg", file: !3, line: 392, baseType: !52)
!52 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!54 = !DIDerivedType(tag: DW_TAG_typedef, name: "ct_data", file: !3, line: 5811, baseType: !55)
!55 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ct_data", file: !3, line: 5802, size: 32, elements: !56)
!56 = !{!57, !62}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "fc", scope: !55, file: !3, line: 5806, baseType: !58, size: 16)
!58 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !55, file: !3, line: 5803, size: 16, elements: !59)
!59 = !{!60, !61}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !58, file: !3, line: 5804, baseType: !15, size: 16)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !58, file: !3, line: 5805, baseType: !15, size: 16)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "dl", scope: !55, file: !3, line: 5810, baseType: !63, size: 16, offset: 16)
!63 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !55, file: !3, line: 5807, size: 16, elements: !64)
!64 = !{!65, !66}
!65 = !DIDerivedType(tag: DW_TAG_member, name: "dad", scope: !63, file: !3, line: 5808, baseType: !15, size: 16)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !63, file: !3, line: 5809, baseType: !15, size: 16)
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree_desc", file: !3, line: 5847, baseType: !69)
!69 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_desc", file: !3, line: 5839, size: 320, elements: !70)
!70 = !{!71, !72, !73, !74, !75, !76, !77}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "dyn_tree", scope: !69, file: !3, line: 5840, baseType: !53, size: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "static_tree", scope: !69, file: !3, line: 5841, baseType: !53, size: 64, offset: 64)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "extra_bits", scope: !69, file: !3, line: 5842, baseType: !33, size: 64, offset: 128)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "extra_base", scope: !69, file: !3, line: 5843, baseType: !12, size: 32, offset: 192)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !69, file: !3, line: 5844, baseType: !12, size: 32, offset: 224)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "max_length", scope: !69, file: !3, line: 5845, baseType: !12, size: 32, offset: 256)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "max_code", scope: !69, file: !3, line: 5846, baseType: !12, size: 32, offset: 288)
!78 = !DIDerivedType(tag: DW_TAG_typedef, name: "char_type", file: !3, line: 7125, baseType: !14)
!79 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !80, line: 56, baseType: !81)
!80 = !DIFile(filename: "/usr/include/fcntl.h", directory: "")
!81 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !82, line: 152, baseType: !22)
!82 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!83 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !78, size: 64)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "cmp_code_int", file: !3, line: 7129, baseType: !52)
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!86 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pos", file: !3, line: 1003, baseType: !15)
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !88, size: 64)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !89, line: 7, baseType: !90)
!89 = !DIFile(filename: "/usr/include/bits/types/FILE.h", directory: "")
!90 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !91, line: 49, size: 1728, elements: !92)
!91 = !DIFile(filename: "/usr/include/bits/types/struct_FILE.h", directory: "")
!92 = !{!93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !108, !110, !111, !112, !113, !114, !116, !120, !123, !125, !128, !131, !132, !133, !136, !137}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !90, file: !91, line: 51, baseType: !12, size: 32)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !90, file: !91, line: 54, baseType: !19, size: 64, offset: 64)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !90, file: !91, line: 55, baseType: !19, size: 64, offset: 128)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !90, file: !91, line: 56, baseType: !19, size: 64, offset: 192)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !90, file: !91, line: 57, baseType: !19, size: 64, offset: 256)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !90, file: !91, line: 58, baseType: !19, size: 64, offset: 320)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !90, file: !91, line: 59, baseType: !19, size: 64, offset: 384)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !90, file: !91, line: 60, baseType: !19, size: 64, offset: 448)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !90, file: !91, line: 61, baseType: !19, size: 64, offset: 512)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !90, file: !91, line: 64, baseType: !19, size: 64, offset: 576)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !90, file: !91, line: 65, baseType: !19, size: 64, offset: 640)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !90, file: !91, line: 66, baseType: !19, size: 64, offset: 704)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !90, file: !91, line: 68, baseType: !106, size: 64, offset: 768)
!106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!107 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !91, line: 36, flags: DIFlagFwdDecl)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !90, file: !91, line: 70, baseType: !109, size: 64, offset: 832)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !90, file: !91, line: 72, baseType: !12, size: 32, offset: 896)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !90, file: !91, line: 73, baseType: !12, size: 32, offset: 928)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !90, file: !91, line: 74, baseType: !81, size: 64, offset: 960)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !90, file: !91, line: 77, baseType: !16, size: 16, offset: 1024)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !90, file: !91, line: 78, baseType: !115, size: 8, offset: 1040)
!115 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !90, file: !91, line: 79, baseType: !117, size: 8, offset: 1048)
!117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 8, elements: !118)
!118 = !{!119}
!119 = !DISubrange(count: 1)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !90, file: !91, line: 81, baseType: !121, size: 64, offset: 1088)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64)
!122 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !91, line: 43, baseType: null)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !90, file: !91, line: 89, baseType: !124, size: 64, offset: 1152)
!124 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !82, line: 153, baseType: !22)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !90, file: !91, line: 91, baseType: !126, size: 64, offset: 1216)
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !127, size: 64)
!127 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !91, line: 37, flags: DIFlagFwdDecl)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !90, file: !91, line: 92, baseType: !129, size: 64, offset: 1280)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !91, line: 38, flags: DIFlagFwdDecl)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !90, file: !91, line: 93, baseType: !109, size: 64, offset: 1344)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !90, file: !91, line: 94, baseType: !18, size: 64, offset: 1408)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !90, file: !91, line: 95, baseType: !134, size: 64, offset: 1472)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !135, line: 46, baseType: !52)
!135 = !DIFile(filename: "llvm9/build/lib/clang/9.0.0/include/stddef.h", directory: "/home/mbarbar/software")
!136 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !90, file: !91, line: 96, baseType: !12, size: 32, offset: 1536)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !90, file: !91, line: 98, baseType: !138, size: 160, offset: 1568)
!138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 160, elements: !139)
!139 = !{!140}
!140 = !DISubrange(count: 20)
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !142, size: 64)
!142 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !143, line: 7, baseType: !144)
!143 = !DIFile(filename: "/usr/include/bits/types/time_t.h", directory: "")
!144 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !82, line: 160, baseType: !22)
!145 = !DIDerivedType(tag: DW_TAG_typedef, name: "file_t", file: !3, line: 497, baseType: !12)
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DISubroutineType(types: !148)
!148 = !{!12, !19, !6}
!149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, elements: !150)
!150 = !{!151}
!151 = !DISubrange(count: -1)
!152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 120, elements: !153)
!153 = !{!154}
!154 = !DISubrange(count: 15)
!155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, elements: !150)
!156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !157, size: 640, elements: !164)
!157 = !DIDerivedType(tag: DW_TAG_typedef, name: "config", file: !3, line: 1094, baseType: !158)
!158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "config", file: !3, line: 1089, size: 64, elements: !159)
!159 = !{!160, !161, !162, !163}
!160 = !DIDerivedType(tag: DW_TAG_member, name: "good_length", scope: !158, file: !3, line: 1090, baseType: !15, size: 16)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "max_lazy", scope: !158, file: !3, line: 1091, baseType: !15, size: 16, offset: 16)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "nice_length", scope: !158, file: !3, line: 1092, baseType: !15, size: 16, offset: 32)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "max_chain", scope: !158, file: !3, line: 1093, baseType: !15, size: 16, offset: 48)
!164 = !{!165}
!165 = !DISubrange(count: 10)
!166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!168 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!169 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 24, elements: !170)
!170 = !{!171}
!171 = !DISubrange(count: 3)
!172 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 240, elements: !173)
!173 = !{!174}
!174 = !DISubrange(count: 30)
!175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 360, elements: !176)
!176 = !{!177}
!177 = !DISubrange(count: 45)
!178 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 304, elements: !179)
!179 = !{!180}
!180 = !DISubrange(count: 38)
!181 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, elements: !182)
!182 = !{!183}
!183 = !DISubrange(count: 32)
!184 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 208, elements: !185)
!185 = !{!186}
!186 = !DISubrange(count: 26)
!187 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 312, elements: !188)
!188 = !{!189}
!189 = !DISubrange(count: 39)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 264, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 33)
!193 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 368, elements: !194)
!194 = !{!195}
!195 = !DISubrange(count: 46)
!196 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 6400, elements: !197)
!197 = !{!198}
!198 = !DISubrange(count: 25)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DISubroutineType(types: !201)
!201 = !{!12, !12, !12}
!202 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 40, elements: !203)
!203 = !{!204}
!204 = !DISubrange(count: 5)
!205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 32, elements: !206)
!206 = !{!207}
!207 = !DISubrange(count: 4)
!208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 48, elements: !209)
!209 = !{!210}
!210 = !DISubrange(count: 6)
!211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 272, elements: !212)
!212 = !{!213}
!213 = !DISubrange(count: 34)
!214 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 344, elements: !215)
!215 = !{!216}
!216 = !DISubrange(count: 43)
!217 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 216, elements: !218)
!218 = !{!219}
!219 = !DISubrange(count: 27)
!220 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 272, elements: !221)
!221 = !{!222}
!222 = !DISubrange(count: 17)
!223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 544, elements: !221)
!224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !41, size: 1024, elements: !226)
!226 = !{!227}
!227 = !DISubrange(count: 16)
!228 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 9216, elements: !229)
!229 = !{!230}
!230 = !DISubrange(count: 288)
!231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 262656, elements: !232)
!232 = !{!233}
!233 = !DISubrange(count: 32832)
!234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 524288, elements: !235)
!235 = !{!236}
!236 = !DISubrange(count: 65536)
!237 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 496, elements: !238)
!238 = !{!239}
!239 = !DISubrange(count: 31)
!240 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 480, elements: !173)
!241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 10112, elements: !242)
!242 = !{!243}
!243 = !DISubrange(count: 316)
!244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 608, elements: !245)
!245 = !{!246}
!246 = !DISubrange(count: 19)
!247 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 352, elements: !248)
!248 = !{!249}
!249 = !DISubrange(count: 44)
!250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 960, elements: !173)
!251 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 928, elements: !252)
!252 = !{!253}
!253 = !DISubrange(count: 29)
!254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 2048, elements: !255)
!255 = !{!256}
!256 = !DISubrange(count: 256)
!257 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 960, elements: !173)
!258 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 4096, elements: !259)
!259 = !{!260}
!260 = !DISubrange(count: 512)
!261 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 256, elements: !226)
!262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 9216, elements: !229)
!263 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 32768, elements: !264)
!264 = !{!265}
!265 = !DISubrange(count: 4096)
!266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 18336, elements: !267)
!267 = !{!268}
!268 = !DISubrange(count: 573)
!269 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 1952, elements: !270)
!270 = !{!271}
!271 = !DISubrange(count: 61)
!272 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 524288, elements: !273)
!273 = !{!274}
!274 = !DISubrange(count: 32768)
!275 = !DIDerivedType(tag: DW_TAG_typedef, name: "code_int", file: !3, line: 7126, baseType: !22)
!276 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 8192, elements: !277)
!277 = !{!278}
!278 = !DISubrange(count: 1024)
!279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 472, elements: !280)
!280 = !{!281}
!281 = !DISubrange(count: 59)
!282 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 1048576, elements: !235)
!283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 147456, elements: !284)
!284 = !{!285}
!285 = !DISubrange(count: 18432)
!286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 832, elements: !185)
!287 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 248, elements: !238)
!288 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 464, elements: !289)
!289 = !{!290}
!290 = !DISubrange(count: 58)
!291 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 128, elements: !226)
!292 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 112, elements: !293)
!293 = !{!294}
!294 = !DISubrange(count: 14)
!295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 328, elements: !296)
!296 = !{!297}
!297 = !DISubrange(count: 41)
!298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 144, elements: !299)
!299 = !{!300}
!300 = !DISubrange(count: 18)
!301 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 384, elements: !302)
!302 = !{!303}
!303 = !DISubrange(count: 48)
!304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, elements: !150)
!305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !306, size: 64)
!306 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!307 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 64, elements: !308)
!308 = !{!309}
!309 = !DISubrange(count: 8)
!310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 104, elements: !311)
!311 = !{!312}
!312 = !DISubrange(count: 13)
!313 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 168, elements: !314)
!314 = !{!315}
!315 = !DISubrange(count: 21)
!316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 224, elements: !317)
!317 = !{!318}
!318 = !DISubrange(count: 28)
!319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 512, elements: !320)
!320 = !{!321}
!321 = !DISubrange(count: 64)
!322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 16384, elements: !255)
!323 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 1024, elements: !324)
!324 = !{!325}
!325 = !DISubrange(count: 128)
!326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, elements: !226)
!327 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 440, elements: !328)
!328 = !{!329}
!329 = !DISubrange(count: 55)
!330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 16, elements: !331)
!331 = !{!332}
!332 = !DISubrange(count: 2)
!333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 1280, elements: !139)
!334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 96, elements: !335)
!335 = !{!336}
!336 = !DISubrange(count: 12)
!337 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 88, elements: !338)
!338 = !{!339}
!339 = !DISubrange(count: 11)
!340 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 448, elements: !341)
!341 = !{!342}
!342 = !DISubrange(count: 7)
!343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 56, elements: !341)
!344 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 568, elements: !345)
!345 = !{!346}
!346 = !DISubrange(count: 71)
!347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 80, elements: !164)
!348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 184, elements: !349)
!349 = !{!350}
!350 = !DISubrange(count: 23)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 424, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 53)
!354 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 320, elements: !355)
!355 = !{!356}
!356 = !DISubrange(count: 40)
!357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 192, elements: !358)
!358 = !{!359}
!359 = !DISubrange(count: 24)
!360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 232, elements: !252)
!361 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 448, elements: !362)
!362 = !{!363}
!363 = !DISubrange(count: 56)
!364 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !82, line: 150, baseType: !6)
!365 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !82, line: 151, baseType: !52)
!366 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 336, elements: !367)
!367 = !{!368}
!368 = !DISubrange(count: 42)
!369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 200, elements: !197)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 384, elements: !209)
!371 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 576, elements: !372)
!372 = !{!373}
!373 = !DISubrange(count: 9)
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64)
!375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !376, line: 22, size: 2240, elements: !377)
!376 = !DIFile(filename: "/usr/include/bits/dirent.h", directory: "")
!377 = !{!378, !380, !381, !382, !383}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !375, file: !376, line: 25, baseType: !379, size: 64)
!379 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !82, line: 148, baseType: !52)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !375, file: !376, line: 26, baseType: !81, size: 64, offset: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !375, file: !376, line: 31, baseType: !16, size: 16, offset: 128)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !375, file: !376, line: 32, baseType: !14, size: 8, offset: 144)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !375, file: !376, line: 33, baseType: !384, size: 2048, offset: 152)
!384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 2048, elements: !255)
!385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64)
!386 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !387, line: 127, baseType: !388)
!387 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!388 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !387, line: 127, flags: DIFlagFwdDecl)
!389 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 280, elements: !390)
!390 = !{!391}
!391 = !DISubrange(count: 35)
!392 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 296, elements: !393)
!393 = !{!394}
!394 = !DISubrange(count: 37)
!395 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !82, line: 145, baseType: !52)
!396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 176, elements: !397)
!397 = !{!398}
!398 = !DISubrange(count: 22)
!399 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !82, line: 146, baseType: !6)
!400 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !82, line: 147, baseType: !6)
!401 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 64, elements: !308)
!402 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 1248, elements: !188)
!403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 18336, elements: !267)
!404 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 4584, elements: !267)
!405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 152, elements: !245)
!406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12, size: 608, elements: !245)
!407 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 4096, elements: !255)
!408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 288, elements: !299)
!409 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 400, elements: !410)
!410 = !{!411}
!411 = !DISubrange(count: 50)
!412 = !{!413, !415, !417, !419, !421, !423, !425, !427, !429, !431, !433, !435, !437, !439, !441, !443, !445, !447, !449, !451, !453, !455, !457, !459, !461, !463, !465, !467, !469, !471, !473, !475, !481, !483, !485, !487, !0, !489, !491, !493, !495, !497, !499, !501, !503, !505, !507, !509, !511, !513, !515, !517, !519, !521, !523, !525, !527, !529, !531, !533, !535, !537, !539, !541, !543, !545, !547, !549, !551, !553, !555, !557, !559, !561, !563, !565, !567, !569, !571, !573, !602, !604, !606, !608, !610, !612, !614, !616, !618, !620, !622, !624, !626, !628, !630, !632, !634, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !664, !666, !668, !670, !672, !674, !676, !678, !680, !682, !684, !686, !688, !690, !695, !697, !703, !708, !713, !715, !718, !720, !722, !724, !726, !728, !730, !732, !734, !736, !738, !740, !742, !744, !746, !748, !750, !752, !754, !756, !758, !760, !762, !764, !769, !771}
!413 = !DIGlobalVariableExpression(var: !414, expr: !DIExpression())
!414 = distinct !DIGlobalVariable(name: "window_size", scope: !2, file: !3, line: 1029, type: !51, isLocal: false, isDefinition: true)
!415 = !DIGlobalVariableExpression(var: !416, expr: !DIExpression())
!416 = distinct !DIGlobalVariable(name: "optind", scope: !2, file: !3, line: 1946, type: !12, isLocal: false, isDefinition: true)
!417 = !DIGlobalVariableExpression(var: !418, expr: !DIExpression())
!418 = distinct !DIGlobalVariable(name: "opterr", scope: !2, file: !3, line: 1966, type: !12, isLocal: false, isDefinition: true)
!419 = !DIGlobalVariableExpression(var: !420, expr: !DIExpression())
!420 = distinct !DIGlobalVariable(name: "optopt", scope: !2, file: !3, line: 1972, type: !12, isLocal: false, isDefinition: true)
!421 = !DIGlobalVariableExpression(var: !422, expr: !DIExpression())
!422 = distinct !DIGlobalVariable(name: "ascii", scope: !2, file: !3, line: 2986, type: !12, isLocal: false, isDefinition: true)
!423 = !DIGlobalVariableExpression(var: !424, expr: !DIExpression())
!424 = distinct !DIGlobalVariable(name: "to_stdout", scope: !2, file: !3, line: 2987, type: !12, isLocal: false, isDefinition: true)
!425 = !DIGlobalVariableExpression(var: !426, expr: !DIExpression())
!426 = distinct !DIGlobalVariable(name: "decompress", scope: !2, file: !3, line: 2988, type: !12, isLocal: false, isDefinition: true)
!427 = !DIGlobalVariableExpression(var: !428, expr: !DIExpression())
!428 = distinct !DIGlobalVariable(name: "force", scope: !2, file: !3, line: 2989, type: !12, isLocal: false, isDefinition: true)
!429 = !DIGlobalVariableExpression(var: !430, expr: !DIExpression())
!430 = distinct !DIGlobalVariable(name: "no_name", scope: !2, file: !3, line: 2990, type: !12, isLocal: false, isDefinition: true)
!431 = !DIGlobalVariableExpression(var: !432, expr: !DIExpression())
!432 = distinct !DIGlobalVariable(name: "no_time", scope: !2, file: !3, line: 2991, type: !12, isLocal: false, isDefinition: true)
!433 = !DIGlobalVariableExpression(var: !434, expr: !DIExpression())
!434 = distinct !DIGlobalVariable(name: "recursive", scope: !2, file: !3, line: 2992, type: !12, isLocal: false, isDefinition: true)
!435 = !DIGlobalVariableExpression(var: !436, expr: !DIExpression())
!436 = distinct !DIGlobalVariable(name: "list", scope: !2, file: !3, line: 2993, type: !12, isLocal: false, isDefinition: true)
!437 = !DIGlobalVariableExpression(var: !438, expr: !DIExpression())
!438 = distinct !DIGlobalVariable(name: "verbose", scope: !2, file: !3, line: 2994, type: !12, isLocal: false, isDefinition: true)
!439 = !DIGlobalVariableExpression(var: !440, expr: !DIExpression())
!440 = distinct !DIGlobalVariable(name: "quiet", scope: !2, file: !3, line: 2995, type: !12, isLocal: false, isDefinition: true)
!441 = !DIGlobalVariableExpression(var: !442, expr: !DIExpression())
!442 = distinct !DIGlobalVariable(name: "do_lzw", scope: !2, file: !3, line: 2996, type: !12, isLocal: false, isDefinition: true)
!443 = !DIGlobalVariableExpression(var: !444, expr: !DIExpression())
!444 = distinct !DIGlobalVariable(name: "test", scope: !2, file: !3, line: 2997, type: !12, isLocal: false, isDefinition: true)
!445 = !DIGlobalVariableExpression(var: !446, expr: !DIExpression())
!446 = distinct !DIGlobalVariable(name: "maxbits", scope: !2, file: !3, line: 3000, type: !12, isLocal: false, isDefinition: true)
!447 = !DIGlobalVariableExpression(var: !448, expr: !DIExpression())
!448 = distinct !DIGlobalVariable(name: "method", scope: !2, file: !3, line: 3001, type: !12, isLocal: false, isDefinition: true)
!449 = !DIGlobalVariableExpression(var: !450, expr: !DIExpression())
!450 = distinct !DIGlobalVariable(name: "level", scope: !2, file: !3, line: 3002, type: !12, isLocal: false, isDefinition: true)
!451 = !DIGlobalVariableExpression(var: !452, expr: !DIExpression())
!452 = distinct !DIGlobalVariable(name: "exit_code", scope: !2, file: !3, line: 3003, type: !12, isLocal: false, isDefinition: true)
!453 = !DIGlobalVariableExpression(var: !454, expr: !DIExpression())
!454 = distinct !DIGlobalVariable(name: "args", scope: !2, file: !3, line: 3010, type: !23, isLocal: false, isDefinition: true)
!455 = !DIGlobalVariableExpression(var: !456, expr: !DIExpression())
!456 = distinct !DIGlobalVariable(name: "remove_ofname", scope: !2, file: !3, line: 3020, type: !12, isLocal: false, isDefinition: true)
!457 = !DIGlobalVariableExpression(var: !458, expr: !DIExpression())
!458 = distinct !DIGlobalVariable(name: "rsync", scope: !2, file: !3, line: 3027, type: !12, isLocal: false, isDefinition: true)
!459 = !DIGlobalVariableExpression(var: !460, expr: !DIExpression())
!460 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 3029, type: !196, isLocal: false, isDefinition: true)
!461 = !DIGlobalVariableExpression(var: !462, expr: !DIExpression())
!462 = distinct !DIGlobalVariable(name: "work", scope: !2, file: !3, line: 3084, type: !199, isLocal: false, isDefinition: true)
!463 = !DIGlobalVariableExpression(var: !464, expr: !DIExpression())
!464 = distinct !DIGlobalVariable(name: "mask_bits", scope: !2, file: !3, line: 4869, type: !220, isLocal: false, isDefinition: true)
!465 = !DIGlobalVariableExpression(var: !466, expr: !DIExpression())
!466 = distinct !DIGlobalVariable(name: "lbits", scope: !2, file: !3, line: 4921, type: !12, isLocal: false, isDefinition: true)
!467 = !DIGlobalVariableExpression(var: !468, expr: !DIExpression())
!468 = distinct !DIGlobalVariable(name: "dbits", scope: !2, file: !3, line: 4922, type: !12, isLocal: false, isDefinition: true)
!469 = !DIGlobalVariableExpression(var: !470, expr: !DIExpression())
!470 = distinct !DIGlobalVariable(name: "block_mode", scope: !2, file: !3, line: 7278, type: !12, isLocal: false, isDefinition: true)
!471 = !DIGlobalVariableExpression(var: !472, expr: !DIExpression())
!472 = distinct !DIGlobalVariable(name: "pkzip", scope: !2, file: !3, line: 7749, type: !12, isLocal: false, isDefinition: true)
!473 = !DIGlobalVariableExpression(var: !474, expr: !DIExpression())
!474 = distinct !DIGlobalVariable(name: "ext_header", scope: !2, file: !3, line: 7750, type: !12, isLocal: false, isDefinition: true)
!475 = !DIGlobalVariableExpression(var: !476, expr: !DIExpression())
!476 = distinct !DIGlobalVariable(name: "crc", scope: !477, file: !3, line: 7956, type: !51, isLocal: true, isDefinition: true)
!477 = distinct !DISubprogram(name: "updcrc", scope: !3, file: !3, line: 7950, type: !478, scopeLine: 7953, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!478 = !DISubroutineType(types: !479)
!479 = !{!51, !85, !6}
!480 = !{}
!481 = !DIGlobalVariableExpression(var: !482, expr: !DIExpression())
!482 = distinct !DIGlobalVariable(name: "crc_32_tab", scope: !2, file: !3, line: 8351, type: !322, isLocal: false, isDefinition: true)
!483 = !DIGlobalVariableExpression(var: !484, expr: !DIExpression())
!484 = distinct !DIGlobalVariable(name: "zfile", scope: !2, file: !3, line: 691, type: !145, isLocal: true, isDefinition: true)
!485 = !DIGlobalVariableExpression(var: !486, expr: !DIExpression())
!486 = distinct !DIGlobalVariable(name: "bi_buf", scope: !2, file: !3, line: 693, type: !16, isLocal: true, isDefinition: true)
!487 = !DIGlobalVariableExpression(var: !488, expr: !DIExpression())
!488 = distinct !DIGlobalVariable(name: "bi_valid", scope: !2, file: !3, line: 703, type: !12, isLocal: true, isDefinition: true)
!489 = !DIGlobalVariableExpression(var: !490, expr: !DIExpression())
!490 = distinct !DIGlobalVariable(name: "block_start", scope: !2, file: !3, line: 1034, type: !22, isLocal: false, isDefinition: true)
!491 = !DIGlobalVariableExpression(var: !492, expr: !DIExpression())
!492 = distinct !DIGlobalVariable(name: "ins_h", scope: !2, file: !3, line: 1039, type: !6, isLocal: true, isDefinition: true)
!493 = !DIGlobalVariableExpression(var: !494, expr: !DIExpression())
!494 = distinct !DIGlobalVariable(name: "prev_length", scope: !2, file: !3, line: 1048, type: !6, isLocal: false, isDefinition: true)
!495 = !DIGlobalVariableExpression(var: !496, expr: !DIExpression())
!496 = distinct !DIGlobalVariable(name: "strstart", scope: !2, file: !3, line: 1053, type: !6, isLocal: false, isDefinition: true)
!497 = !DIGlobalVariableExpression(var: !498, expr: !DIExpression())
!498 = distinct !DIGlobalVariable(name: "match_start", scope: !2, file: !3, line: 1054, type: !6, isLocal: false, isDefinition: true)
!499 = !DIGlobalVariableExpression(var: !500, expr: !DIExpression())
!500 = distinct !DIGlobalVariable(name: "eofile", scope: !2, file: !3, line: 1055, type: !12, isLocal: true, isDefinition: true)
!501 = !DIGlobalVariableExpression(var: !502, expr: !DIExpression())
!502 = distinct !DIGlobalVariable(name: "lookahead", scope: !2, file: !3, line: 1056, type: !6, isLocal: true, isDefinition: true)
!503 = !DIGlobalVariableExpression(var: !504, expr: !DIExpression())
!504 = distinct !DIGlobalVariable(name: "max_chain_length", scope: !2, file: !3, line: 1058, type: !6, isLocal: false, isDefinition: true)
!505 = !DIGlobalVariableExpression(var: !506, expr: !DIExpression())
!506 = distinct !DIGlobalVariable(name: "max_lazy_match", scope: !2, file: !3, line: 1063, type: !6, isLocal: true, isDefinition: true)
!507 = !DIGlobalVariableExpression(var: !508, expr: !DIExpression())
!508 = distinct !DIGlobalVariable(name: "compr_level", scope: !2, file: !3, line: 1074, type: !12, isLocal: true, isDefinition: true)
!509 = !DIGlobalVariableExpression(var: !510, expr: !DIExpression())
!510 = distinct !DIGlobalVariable(name: "good_match", scope: !2, file: !3, line: 1077, type: !6, isLocal: false, isDefinition: true)
!511 = !DIGlobalVariableExpression(var: !512, expr: !DIExpression())
!512 = distinct !DIGlobalVariable(name: "rsync_sum", scope: !2, file: !3, line: 1080, type: !51, isLocal: true, isDefinition: true)
!513 = !DIGlobalVariableExpression(var: !514, expr: !DIExpression())
!514 = distinct !DIGlobalVariable(name: "rsync_chunk_end", scope: !2, file: !3, line: 1081, type: !51, isLocal: true, isDefinition: true)
!515 = !DIGlobalVariableExpression(var: !516, expr: !DIExpression())
!516 = distinct !DIGlobalVariable(name: "nice_match", scope: !2, file: !3, line: 1099, type: !12, isLocal: false, isDefinition: true)
!517 = !DIGlobalVariableExpression(var: !518, expr: !DIExpression())
!518 = distinct !DIGlobalVariable(name: "optarg", scope: !2, file: !3, line: 1931, type: !19, isLocal: false, isDefinition: true)
!519 = !DIGlobalVariableExpression(var: !520, expr: !DIExpression())
!520 = distinct !DIGlobalVariable(name: "__getopt_initialized", scope: !2, file: !3, line: 1952, type: !12, isLocal: false, isDefinition: true)
!521 = !DIGlobalVariableExpression(var: !522, expr: !DIExpression())
!522 = distinct !DIGlobalVariable(name: "nextchar", scope: !2, file: !3, line: 1961, type: !19, isLocal: true, isDefinition: true)
!523 = !DIGlobalVariableExpression(var: !524, expr: !DIExpression())
!524 = distinct !DIGlobalVariable(name: "ordering", scope: !2, file: !3, line: 2006, type: !5, isLocal: true, isDefinition: true)
!525 = !DIGlobalVariableExpression(var: !526, expr: !DIExpression())
!526 = distinct !DIGlobalVariable(name: "posixly_correct", scope: !2, file: !3, line: 2009, type: !19, isLocal: true, isDefinition: true)
!527 = !DIGlobalVariableExpression(var: !528, expr: !DIExpression())
!528 = distinct !DIGlobalVariable(name: "first_nonopt", scope: !2, file: !3, line: 2053, type: !12, isLocal: true, isDefinition: true)
!529 = !DIGlobalVariableExpression(var: !530, expr: !DIExpression())
!530 = distinct !DIGlobalVariable(name: "last_nonopt", scope: !2, file: !3, line: 2054, type: !12, isLocal: true, isDefinition: true)
!531 = !DIGlobalVariableExpression(var: !532, expr: !DIExpression())
!532 = distinct !DIGlobalVariable(name: "inbuf", scope: !2, file: !3, line: 2973, type: !231, isLocal: false, isDefinition: true)
!533 = !DIGlobalVariableExpression(var: !534, expr: !DIExpression())
!534 = distinct !DIGlobalVariable(name: "outbuf", scope: !2, file: !3, line: 2974, type: !283, isLocal: false, isDefinition: true)
!535 = !DIGlobalVariableExpression(var: !536, expr: !DIExpression())
!536 = distinct !DIGlobalVariable(name: "d_buf", scope: !2, file: !3, line: 2975, type: !272, isLocal: false, isDefinition: true)
!537 = !DIGlobalVariableExpression(var: !538, expr: !DIExpression())
!538 = distinct !DIGlobalVariable(name: "window", scope: !2, file: !3, line: 2976, type: !234, isLocal: false, isDefinition: true)
!539 = !DIGlobalVariableExpression(var: !540, expr: !DIExpression())
!540 = distinct !DIGlobalVariable(name: "prev", scope: !2, file: !3, line: 2978, type: !282, isLocal: false, isDefinition: true)
!541 = !DIGlobalVariableExpression(var: !542, expr: !DIExpression())
!542 = distinct !DIGlobalVariable(name: "foreground", scope: !2, file: !3, line: 2998, type: !12, isLocal: false, isDefinition: true)
!543 = !DIGlobalVariableExpression(var: !544, expr: !DIExpression())
!544 = distinct !DIGlobalVariable(name: "progname", scope: !2, file: !3, line: 2999, type: !19, isLocal: false, isDefinition: true)
!545 = !DIGlobalVariableExpression(var: !546, expr: !DIExpression())
!546 = distinct !DIGlobalVariable(name: "save_orig_name", scope: !2, file: !3, line: 3004, type: !12, isLocal: false, isDefinition: true)
!547 = !DIGlobalVariableExpression(var: !548, expr: !DIExpression())
!548 = distinct !DIGlobalVariable(name: "last_member", scope: !2, file: !3, line: 3005, type: !12, isLocal: false, isDefinition: true)
!549 = !DIGlobalVariableExpression(var: !550, expr: !DIExpression())
!550 = distinct !DIGlobalVariable(name: "part_nb", scope: !2, file: !3, line: 3006, type: !12, isLocal: false, isDefinition: true)
!551 = !DIGlobalVariableExpression(var: !552, expr: !DIExpression())
!552 = distinct !DIGlobalVariable(name: "time_stamp", scope: !2, file: !3, line: 3007, type: !142, isLocal: false, isDefinition: true)
!553 = !DIGlobalVariableExpression(var: !554, expr: !DIExpression())
!554 = distinct !DIGlobalVariable(name: "ifile_size", scope: !2, file: !3, line: 3008, type: !79, isLocal: false, isDefinition: true)
!555 = !DIGlobalVariableExpression(var: !556, expr: !DIExpression())
!556 = distinct !DIGlobalVariable(name: "env", scope: !2, file: !3, line: 3009, type: !19, isLocal: false, isDefinition: true)
!557 = !DIGlobalVariableExpression(var: !558, expr: !DIExpression())
!558 = distinct !DIGlobalVariable(name: "z_suffix", scope: !2, file: !3, line: 3011, type: !19, isLocal: false, isDefinition: true)
!559 = !DIGlobalVariableExpression(var: !560, expr: !DIExpression())
!560 = distinct !DIGlobalVariable(name: "z_len", scope: !2, file: !3, line: 3012, type: !134, isLocal: false, isDefinition: true)
!561 = !DIGlobalVariableExpression(var: !562, expr: !DIExpression())
!562 = distinct !DIGlobalVariable(name: "bytes_in", scope: !2, file: !3, line: 3014, type: !79, isLocal: false, isDefinition: true)
!563 = !DIGlobalVariableExpression(var: !564, expr: !DIExpression())
!564 = distinct !DIGlobalVariable(name: "bytes_out", scope: !2, file: !3, line: 3015, type: !79, isLocal: false, isDefinition: true)
!565 = !DIGlobalVariableExpression(var: !566, expr: !DIExpression())
!566 = distinct !DIGlobalVariable(name: "total_in", scope: !2, file: !3, line: 3016, type: !79, isLocal: false, isDefinition: true)
!567 = !DIGlobalVariableExpression(var: !568, expr: !DIExpression())
!568 = distinct !DIGlobalVariable(name: "total_out", scope: !2, file: !3, line: 3017, type: !79, isLocal: false, isDefinition: true)
!569 = !DIGlobalVariableExpression(var: !570, expr: !DIExpression())
!570 = distinct !DIGlobalVariable(name: "ifname", scope: !2, file: !3, line: 3018, type: !276, isLocal: false, isDefinition: true)
!571 = !DIGlobalVariableExpression(var: !572, expr: !DIExpression())
!572 = distinct !DIGlobalVariable(name: "ofname", scope: !2, file: !3, line: 3019, type: !276, isLocal: false, isDefinition: true)
!573 = !DIGlobalVariableExpression(var: !574, expr: !DIExpression())
!574 = distinct !DIGlobalVariable(name: "istat", scope: !2, file: !3, line: 3021, type: !575, isLocal: false, isDefinition: true)
!575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !576, line: 46, size: 1152, elements: !577)
!576 = !DIFile(filename: "/usr/include/bits/stat.h", directory: "")
!577 = !{!578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !589, !591, !598, !599, !600}
!578 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !575, file: !576, line: 48, baseType: !395, size: 64)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !575, file: !576, line: 53, baseType: !379, size: 64, offset: 64)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !575, file: !576, line: 61, baseType: !365, size: 64, offset: 128)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !575, file: !576, line: 62, baseType: !364, size: 32, offset: 192)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !575, file: !576, line: 64, baseType: !399, size: 32, offset: 224)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !575, file: !576, line: 65, baseType: !400, size: 32, offset: 256)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !575, file: !576, line: 67, baseType: !12, size: 32, offset: 288)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !575, file: !576, line: 69, baseType: !395, size: 64, offset: 320)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !575, file: !576, line: 74, baseType: !81, size: 64, offset: 384)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !575, file: !576, line: 78, baseType: !588, size: 64, offset: 448)
!588 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !82, line: 174, baseType: !22)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !575, file: !576, line: 80, baseType: !590, size: 64, offset: 512)
!590 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !82, line: 179, baseType: !22)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !575, file: !576, line: 91, baseType: !592, size: 128, offset: 576)
!592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !593, line: 9, size: 128, elements: !594)
!593 = !DIFile(filename: "/usr/include/bits/types/struct_timespec.h", directory: "")
!594 = !{!595, !596}
!595 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !592, file: !593, line: 11, baseType: !144, size: 64)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !592, file: !593, line: 12, baseType: !597, size: 64, offset: 64)
!597 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !82, line: 196, baseType: !22)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !575, file: !576, line: 92, baseType: !592, size: 128, offset: 704)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !575, file: !576, line: 93, baseType: !592, size: 128, offset: 832)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !575, file: !576, line: 106, baseType: !601, size: 192, offset: 960)
!601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !597, size: 192, elements: !170)
!602 = !DIGlobalVariableExpression(var: !603, expr: !DIExpression())
!603 = distinct !DIGlobalVariable(name: "ifd", scope: !2, file: !3, line: 3022, type: !12, isLocal: false, isDefinition: true)
!604 = !DIGlobalVariableExpression(var: !605, expr: !DIExpression())
!605 = distinct !DIGlobalVariable(name: "ofd", scope: !2, file: !3, line: 3023, type: !12, isLocal: false, isDefinition: true)
!606 = !DIGlobalVariableExpression(var: !607, expr: !DIExpression())
!607 = distinct !DIGlobalVariable(name: "insize", scope: !2, file: !3, line: 3024, type: !6, isLocal: false, isDefinition: true)
!608 = !DIGlobalVariableExpression(var: !609, expr: !DIExpression())
!609 = distinct !DIGlobalVariable(name: "inptr", scope: !2, file: !3, line: 3025, type: !6, isLocal: false, isDefinition: true)
!610 = !DIGlobalVariableExpression(var: !611, expr: !DIExpression())
!611 = distinct !DIGlobalVariable(name: "outcnt", scope: !2, file: !3, line: 3026, type: !6, isLocal: false, isDefinition: true)
!612 = !DIGlobalVariableExpression(var: !613, expr: !DIExpression())
!613 = distinct !DIGlobalVariable(name: "bb", scope: !2, file: !3, line: 4866, type: !51, isLocal: false, isDefinition: true)
!614 = !DIGlobalVariableExpression(var: !615, expr: !DIExpression())
!615 = distinct !DIGlobalVariable(name: "bk", scope: !2, file: !3, line: 4867, type: !6, isLocal: false, isDefinition: true)
!616 = !DIGlobalVariableExpression(var: !617, expr: !DIExpression())
!617 = distinct !DIGlobalVariable(name: "hufts", scope: !2, file: !3, line: 4930, type: !6, isLocal: false, isDefinition: true)
!618 = !DIGlobalVariableExpression(var: !619, expr: !DIExpression())
!619 = distinct !DIGlobalVariable(name: "dyn_ltree", scope: !2, file: !3, line: 5821, type: !266, isLocal: true, isDefinition: true)
!620 = !DIGlobalVariableExpression(var: !621, expr: !DIExpression())
!621 = distinct !DIGlobalVariable(name: "dyn_dtree", scope: !2, file: !3, line: 5822, type: !269, isLocal: true, isDefinition: true)
!622 = !DIGlobalVariableExpression(var: !623, expr: !DIExpression())
!623 = distinct !DIGlobalVariable(name: "static_ltree", scope: !2, file: !3, line: 5824, type: !262, isLocal: true, isDefinition: true)
!624 = !DIGlobalVariableExpression(var: !625, expr: !DIExpression())
!625 = distinct !DIGlobalVariable(name: "static_dtree", scope: !2, file: !3, line: 5831, type: !250, isLocal: true, isDefinition: true)
!626 = !DIGlobalVariableExpression(var: !627, expr: !DIExpression())
!627 = distinct !DIGlobalVariable(name: "bl_count", scope: !2, file: !3, line: 5859, type: !261, isLocal: true, isDefinition: true)
!628 = !DIGlobalVariableExpression(var: !629, expr: !DIExpression())
!629 = distinct !DIGlobalVariable(name: "length_code", scope: !2, file: !3, line: 5878, type: !254, isLocal: true, isDefinition: true)
!630 = !DIGlobalVariableExpression(var: !631, expr: !DIExpression())
!631 = distinct !DIGlobalVariable(name: "dist_code", scope: !2, file: !3, line: 5881, type: !258, isLocal: true, isDefinition: true)
!632 = !DIGlobalVariableExpression(var: !633, expr: !DIExpression())
!633 = distinct !DIGlobalVariable(name: "base_length", scope: !2, file: !3, line: 5887, type: !251, isLocal: true, isDefinition: true)
!634 = !DIGlobalVariableExpression(var: !635, expr: !DIExpression())
!635 = distinct !DIGlobalVariable(name: "base_dist", scope: !2, file: !3, line: 5890, type: !257, isLocal: true, isDefinition: true)
!636 = !DIGlobalVariableExpression(var: !637, expr: !DIExpression())
!637 = distinct !DIGlobalVariable(name: "flag_buf", scope: !2, file: !3, line: 5898, type: !263, isLocal: true, isDefinition: true)
!638 = !DIGlobalVariableExpression(var: !639, expr: !DIExpression())
!639 = distinct !DIGlobalVariable(name: "last_lit", scope: !2, file: !3, line: 5903, type: !6, isLocal: true, isDefinition: true)
!640 = !DIGlobalVariableExpression(var: !641, expr: !DIExpression())
!641 = distinct !DIGlobalVariable(name: "last_dist", scope: !2, file: !3, line: 5904, type: !6, isLocal: true, isDefinition: true)
!642 = !DIGlobalVariableExpression(var: !643, expr: !DIExpression())
!643 = distinct !DIGlobalVariable(name: "last_flags", scope: !2, file: !3, line: 5905, type: !6, isLocal: true, isDefinition: true)
!644 = !DIGlobalVariableExpression(var: !645, expr: !DIExpression())
!645 = distinct !DIGlobalVariable(name: "flags", scope: !2, file: !3, line: 5906, type: !13, isLocal: true, isDefinition: true)
!646 = !DIGlobalVariableExpression(var: !647, expr: !DIExpression())
!647 = distinct !DIGlobalVariable(name: "flag_bit", scope: !2, file: !3, line: 5907, type: !13, isLocal: true, isDefinition: true)
!648 = !DIGlobalVariableExpression(var: !649, expr: !DIExpression())
!649 = distinct !DIGlobalVariable(name: "opt_len", scope: !2, file: !3, line: 5913, type: !51, isLocal: true, isDefinition: true)
!650 = !DIGlobalVariableExpression(var: !651, expr: !DIExpression())
!651 = distinct !DIGlobalVariable(name: "static_len", scope: !2, file: !3, line: 5914, type: !51, isLocal: true, isDefinition: true)
!652 = !DIGlobalVariableExpression(var: !653, expr: !DIExpression())
!653 = distinct !DIGlobalVariable(name: "compressed_len", scope: !2, file: !3, line: 5916, type: !79, isLocal: true, isDefinition: true)
!654 = !DIGlobalVariableExpression(var: !655, expr: !DIExpression())
!655 = distinct !DIGlobalVariable(name: "input_len", scope: !2, file: !3, line: 5918, type: !79, isLocal: true, isDefinition: true)
!656 = !DIGlobalVariableExpression(var: !657, expr: !DIExpression())
!657 = distinct !DIGlobalVariable(name: "file_type", scope: !2, file: !3, line: 5921, type: !166, isLocal: false, isDefinition: true)
!658 = !DIGlobalVariableExpression(var: !659, expr: !DIExpression())
!659 = distinct !DIGlobalVariable(name: "file_method", scope: !2, file: !3, line: 5922, type: !33, isLocal: false, isDefinition: true)
!660 = !DIGlobalVariableExpression(var: !661, expr: !DIExpression())
!661 = distinct !DIGlobalVariable(name: "done", scope: !2, file: !3, line: 7038, type: !12, isLocal: true, isDefinition: true)
!662 = !DIGlobalVariableExpression(var: !663, expr: !DIExpression())
!663 = distinct !DIGlobalVariable(name: "orig_len", scope: !2, file: !3, line: 7502, type: !51, isLocal: true, isDefinition: true)
!664 = !DIGlobalVariableExpression(var: !665, expr: !DIExpression())
!665 = distinct !DIGlobalVariable(name: "max_len", scope: !2, file: !3, line: 7503, type: !12, isLocal: true, isDefinition: true)
!666 = !DIGlobalVariableExpression(var: !667, expr: !DIExpression())
!667 = distinct !DIGlobalVariable(name: "literal", scope: !2, file: !3, line: 7505, type: !254, isLocal: true, isDefinition: true)
!668 = !DIGlobalVariableExpression(var: !669, expr: !DIExpression())
!669 = distinct !DIGlobalVariable(name: "lit_base", scope: !2, file: !3, line: 7510, type: !286, isLocal: true, isDefinition: true)
!670 = !DIGlobalVariableExpression(var: !671, expr: !DIExpression())
!671 = distinct !DIGlobalVariable(name: "leaves", scope: !2, file: !3, line: 7516, type: !286, isLocal: true, isDefinition: true)
!672 = !DIGlobalVariableExpression(var: !673, expr: !DIExpression())
!673 = distinct !DIGlobalVariable(name: "parents", scope: !2, file: !3, line: 7517, type: !286, isLocal: true, isDefinition: true)
!674 = !DIGlobalVariableExpression(var: !675, expr: !DIExpression())
!675 = distinct !DIGlobalVariable(name: "peek_bits", scope: !2, file: !3, line: 7519, type: !12, isLocal: true, isDefinition: true)
!676 = !DIGlobalVariableExpression(var: !677, expr: !DIExpression())
!677 = distinct !DIGlobalVariable(name: "bitbuf", scope: !2, file: !3, line: 7534, type: !51, isLocal: true, isDefinition: true)
!678 = !DIGlobalVariableExpression(var: !679, expr: !DIExpression())
!679 = distinct !DIGlobalVariable(name: "valid", scope: !2, file: !3, line: 7537, type: !12, isLocal: true, isDefinition: true)
!680 = !DIGlobalVariableExpression(var: !681, expr: !DIExpression())
!681 = distinct !DIGlobalVariable(name: "decrypt", scope: !2, file: !3, line: 7747, type: !12, isLocal: false, isDefinition: true)
!682 = !DIGlobalVariableExpression(var: !683, expr: !DIExpression())
!683 = distinct !DIGlobalVariable(name: "key", scope: !2, file: !3, line: 7748, type: !19, isLocal: false, isDefinition: true)
!684 = !DIGlobalVariableExpression(var: !685, expr: !DIExpression())
!685 = distinct !DIGlobalVariable(name: "crc", scope: !2, file: !3, line: 8457, type: !51, isLocal: true, isDefinition: true)
!686 = !DIGlobalVariableExpression(var: !687, expr: !DIExpression())
!687 = distinct !DIGlobalVariable(name: "header_bytes", scope: !2, file: !3, line: 8458, type: !79, isLocal: false, isDefinition: true)
!688 = !DIGlobalVariableExpression(var: !689, expr: !DIExpression())
!689 = distinct !DIGlobalVariable(name: "configuration_table", scope: !2, file: !3, line: 1102, type: !156, isLocal: true, isDefinition: true)
!690 = !DIGlobalVariableExpression(var: !691, expr: !DIExpression())
!691 = distinct !DIGlobalVariable(name: "help_msg", scope: !692, file: !3, line: 3106, type: !333, isLocal: true, isDefinition: true)
!692 = distinct !DISubprogram(name: "help", scope: !3, file: !3, line: 3104, type: !693, scopeLine: 3105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!693 = !DISubroutineType(types: !694)
!694 = !{null}
!695 = !DIGlobalVariableExpression(var: !696, expr: !DIExpression())
!696 = distinct !DIGlobalVariable(name: "license_msg", scope: !2, file: !3, line: 2849, type: !340, isLocal: true, isDefinition: true)
!697 = !DIGlobalVariableExpression(var: !698, expr: !DIExpression())
!698 = distinct !DIGlobalVariable(name: "suffixes", scope: !699, file: !3, line: 3823, type: !370, isLocal: true, isDefinition: true)
!699 = distinct !DISubprogram(name: "get_istat", scope: !3, file: !3, line: 3817, type: !700, scopeLine: 3820, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!700 = !DISubroutineType(types: !701)
!701 = !{!12, !19, !702}
!702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !575, size: 64)
!703 = !DIGlobalVariableExpression(var: !704, expr: !DIExpression())
!704 = distinct !DIGlobalVariable(name: "known_suffixes", scope: !705, file: !3, line: 3772, type: !371, isLocal: true, isDefinition: true)
!705 = distinct !DISubprogram(name: "get_suffix", scope: !3, file: !3, line: 3767, type: !706, scopeLine: 3769, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!706 = !DISubroutineType(types: !707)
!707 = !{!19, !19}
!708 = !DIGlobalVariableExpression(var: !709, expr: !DIExpression())
!709 = distinct !DIGlobalVariable(name: "first_time", scope: !710, file: !3, line: 4188, type: !12, isLocal: true, isDefinition: true)
!710 = distinct !DISubprogram(name: "do_list", scope: !3, file: !3, line: 4183, type: !711, scopeLine: 4186, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!711 = !DISubroutineType(types: !712)
!712 = !{null, !12, !12}
!713 = !DIGlobalVariableExpression(var: !714, expr: !DIExpression())
!714 = distinct !DIGlobalVariable(name: "methods", scope: !710, file: !3, line: 4189, type: !371, isLocal: true, isDefinition: true)
!715 = !DIGlobalVariableExpression(var: !716, expr: !DIExpression())
!716 = distinct !DIGlobalVariable(name: "in_exit", scope: !717, file: !3, line: 4602, type: !12, isLocal: true, isDefinition: true)
!717 = distinct !DISubprogram(name: "do_exit", scope: !3, file: !3, line: 4599, type: !38, scopeLine: 4601, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!718 = !DIGlobalVariableExpression(var: !719, expr: !DIExpression())
!719 = distinct !DIGlobalVariable(name: "cplens", scope: !2, file: !3, line: 4817, type: !237, isLocal: true, isDefinition: true)
!720 = !DIGlobalVariableExpression(var: !721, expr: !DIExpression())
!721 = distinct !DIGlobalVariable(name: "cplext", scope: !2, file: !3, line: 4821, type: !237, isLocal: true, isDefinition: true)
!722 = !DIGlobalVariableExpression(var: !723, expr: !DIExpression())
!723 = distinct !DIGlobalVariable(name: "cpdist", scope: !2, file: !3, line: 4824, type: !240, isLocal: true, isDefinition: true)
!724 = !DIGlobalVariableExpression(var: !725, expr: !DIExpression())
!725 = distinct !DIGlobalVariable(name: "cpdext", scope: !2, file: !3, line: 4828, type: !240, isLocal: true, isDefinition: true)
!726 = !DIGlobalVariableExpression(var: !727, expr: !DIExpression())
!727 = distinct !DIGlobalVariable(name: "border", scope: !2, file: !3, line: 4815, type: !244, isLocal: true, isDefinition: true)
!728 = !DIGlobalVariableExpression(var: !729, expr: !DIExpression())
!729 = distinct !DIGlobalVariable(name: "msg_done", scope: !2, file: !3, line: 5633, type: !12, isLocal: true, isDefinition: true)
!730 = !DIGlobalVariableExpression(var: !731, expr: !DIExpression())
!731 = distinct !DIGlobalVariable(name: "extra_lbits", scope: !2, file: !3, line: 5736, type: !251, isLocal: true, isDefinition: true)
!732 = !DIGlobalVariableExpression(var: !733, expr: !DIExpression())
!733 = distinct !DIGlobalVariable(name: "extra_dbits", scope: !2, file: !3, line: 5739, type: !257, isLocal: true, isDefinition: true)
!734 = !DIGlobalVariableExpression(var: !735, expr: !DIExpression())
!735 = distinct !DIGlobalVariable(name: "bl_tree", scope: !2, file: !3, line: 5836, type: !402, isLocal: true, isDefinition: true)
!736 = !DIGlobalVariableExpression(var: !737, expr: !DIExpression())
!737 = distinct !DIGlobalVariable(name: "heap_len", scope: !2, file: !3, line: 5869, type: !12, isLocal: true, isDefinition: true)
!738 = !DIGlobalVariableExpression(var: !739, expr: !DIExpression())
!739 = distinct !DIGlobalVariable(name: "heap_max", scope: !2, file: !3, line: 5870, type: !12, isLocal: true, isDefinition: true)
!740 = !DIGlobalVariableExpression(var: !741, expr: !DIExpression())
!741 = distinct !DIGlobalVariable(name: "heap", scope: !2, file: !3, line: 5868, type: !403, isLocal: true, isDefinition: true)
!742 = !DIGlobalVariableExpression(var: !743, expr: !DIExpression())
!743 = distinct !DIGlobalVariable(name: "depth", scope: !2, file: !3, line: 5875, type: !404, isLocal: true, isDefinition: true)
!744 = !DIGlobalVariableExpression(var: !745, expr: !DIExpression())
!745 = distinct !DIGlobalVariable(name: "l_desc", scope: !2, file: !3, line: 5849, type: !68, isLocal: true, isDefinition: true)
!746 = !DIGlobalVariableExpression(var: !747, expr: !DIExpression())
!747 = distinct !DIGlobalVariable(name: "d_desc", scope: !2, file: !3, line: 5852, type: !68, isLocal: true, isDefinition: true)
!748 = !DIGlobalVariableExpression(var: !749, expr: !DIExpression())
!749 = distinct !DIGlobalVariable(name: "bl_desc", scope: !2, file: !3, line: 5855, type: !68, isLocal: true, isDefinition: true)
!750 = !DIGlobalVariableExpression(var: !751, expr: !DIExpression())
!751 = distinct !DIGlobalVariable(name: "extra_blbits", scope: !2, file: !3, line: 5742, type: !406, isLocal: true, isDefinition: true)
!752 = !DIGlobalVariableExpression(var: !753, expr: !DIExpression())
!753 = distinct !DIGlobalVariable(name: "bl_order", scope: !2, file: !3, line: 5862, type: !405, isLocal: true, isDefinition: true)
!754 = !DIGlobalVariableExpression(var: !755, expr: !DIExpression())
!755 = distinct !DIGlobalVariable(name: "io_bitbuf", scope: !2, file: !3, line: 6815, type: !15, isLocal: true, isDefinition: true)
!756 = !DIGlobalVariableExpression(var: !757, expr: !DIExpression())
!757 = distinct !DIGlobalVariable(name: "subbitbuf", scope: !2, file: !3, line: 6816, type: !6, isLocal: true, isDefinition: true)
!758 = !DIGlobalVariableExpression(var: !759, expr: !DIExpression())
!759 = distinct !DIGlobalVariable(name: "bitcount", scope: !2, file: !3, line: 6817, type: !12, isLocal: true, isDefinition: true)
!760 = !DIGlobalVariableExpression(var: !761, expr: !DIExpression())
!761 = distinct !DIGlobalVariable(name: "blocksize", scope: !2, file: !3, line: 6802, type: !6, isLocal: true, isDefinition: true)
!762 = !DIGlobalVariableExpression(var: !763, expr: !DIExpression())
!763 = distinct !DIGlobalVariable(name: "j", scope: !2, file: !3, line: 7037, type: !12, isLocal: true, isDefinition: true)
!764 = !DIGlobalVariableExpression(var: !765, expr: !DIExpression())
!765 = distinct !DIGlobalVariable(name: "i", scope: !766, file: !3, line: 7061, type: !6, isLocal: true, isDefinition: true)
!766 = distinct !DISubprogram(name: "decode", scope: !3, file: !3, line: 7049, type: !767, scopeLine: 7060, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!767 = !DISubroutineType(types: !768)
!768 = !{!6, !6, !85}
!769 = !DIGlobalVariableExpression(var: !770, expr: !DIExpression())
!770 = distinct !DIGlobalVariable(name: "pt_len", scope: !2, file: !3, line: 6801, type: !405, isLocal: true, isDefinition: true)
!771 = !DIGlobalVariableExpression(var: !772, expr: !DIExpression())
!772 = distinct !DIGlobalVariable(name: "pt_table", scope: !2, file: !3, line: 6803, type: !407, isLocal: true, isDefinition: true)
!773 = !{!"clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)"}
!774 = !{i32 2, !"ctir", i32 1}
!775 = !{i32 2, !"Dwarf Version", i32 4}
!776 = !{i32 2, !"Debug Info Version", i32 3}
!777 = !{i32 1, !"wchar_size", i32 4}
!778 = distinct !DISubprogram(name: "zip", scope: !3, file: !3, line: 8465, type: !200, scopeLine: 8467, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!779 = !DILocalVariable(name: "in", arg: 1, scope: !778, file: !3, line: 8466, type: !12)
!780 = !DILocation(line: 8466, column: 9, scope: !778)
!781 = !DILocalVariable(name: "out", arg: 2, scope: !778, file: !3, line: 8466, type: !12)
!782 = !DILocation(line: 8466, column: 13, scope: !778)
!783 = !DILocalVariable(name: "flags", scope: !778, file: !3, line: 8468, type: !13)
!784 = !DILocation(line: 8468, column: 10, scope: !778)
!785 = !DILocalVariable(name: "attr", scope: !778, file: !3, line: 8469, type: !15)
!786 = !DILocation(line: 8469, column: 10, scope: !778)
!787 = !DILocalVariable(name: "deflate_flags", scope: !778, file: !3, line: 8470, type: !15)
!788 = !DILocation(line: 8470, column: 10, scope: !778)
!789 = !DILocation(line: 8472, column: 11, scope: !778)
!790 = !DILocation(line: 8472, column: 9, scope: !778)
!791 = !DILocation(line: 8473, column: 11, scope: !778)
!792 = !DILocation(line: 8473, column: 9, scope: !778)
!793 = !DILocation(line: 8474, column: 12, scope: !778)
!794 = !DILocation(line: 8478, column: 12, scope: !778)
!795 = !DILocation(line: 8479, column: 5, scope: !796)
!796 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8479, column: 5)
!797 = !DILocation(line: 8479, column: 5, scope: !798)
!798 = distinct !DILexicalBlock(scope: !796, file: !3, line: 8479, column: 5)
!799 = !DILocation(line: 8480, column: 5, scope: !800)
!800 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8480, column: 5)
!801 = !DILocation(line: 8480, column: 5, scope: !802)
!802 = distinct !DILexicalBlock(scope: !800, file: !3, line: 8480, column: 5)
!803 = !DILocation(line: 8481, column: 5, scope: !804)
!804 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8481, column: 5)
!805 = !DILocation(line: 8481, column: 5, scope: !806)
!806 = distinct !DILexicalBlock(scope: !804, file: !3, line: 8481, column: 5)
!807 = !DILocation(line: 8483, column: 9, scope: !808)
!808 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8483, column: 9)
!809 = !DILocation(line: 8483, column: 9, scope: !778)
!810 = !DILocation(line: 8484, column: 8, scope: !811)
!811 = distinct !DILexicalBlock(scope: !808, file: !3, line: 8483, column: 25)
!812 = !DILocation(line: 8485, column: 5, scope: !811)
!813 = !DILocation(line: 8486, column: 5, scope: !814)
!814 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8486, column: 5)
!815 = !DILocation(line: 8486, column: 5, scope: !816)
!816 = distinct !DILexicalBlock(scope: !814, file: !3, line: 8486, column: 5)
!817 = !DILocation(line: 8487, column: 5, scope: !818)
!818 = distinct !DILexicalBlock(scope: !819, file: !3, line: 8487, column: 5)
!819 = distinct !DILexicalBlock(scope: !820, file: !3, line: 8487, column: 5)
!820 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8487, column: 5)
!821 = !DILocation(line: 8487, column: 5, scope: !819)
!822 = !DILocation(line: 8487, column: 5, scope: !823)
!823 = distinct !DILexicalBlock(scope: !818, file: !3, line: 8487, column: 5)
!824 = !DILocation(line: 8487, column: 5, scope: !825)
!825 = distinct !DILexicalBlock(scope: !826, file: !3, line: 8487, column: 5)
!826 = distinct !DILexicalBlock(scope: !818, file: !3, line: 8487, column: 5)
!827 = !DILocation(line: 8487, column: 5, scope: !828)
!828 = distinct !DILexicalBlock(scope: !825, file: !3, line: 8487, column: 5)
!829 = !DILocation(line: 8487, column: 5, scope: !830)
!830 = distinct !DILexicalBlock(scope: !826, file: !3, line: 8487, column: 5)
!831 = !DILocation(line: 8487, column: 5, scope: !832)
!832 = distinct !DILexicalBlock(scope: !830, file: !3, line: 8487, column: 5)
!833 = !DILocation(line: 8487, column: 5, scope: !834)
!834 = distinct !DILexicalBlock(scope: !835, file: !3, line: 8487, column: 5)
!835 = distinct !DILexicalBlock(scope: !820, file: !3, line: 8487, column: 5)
!836 = !DILocation(line: 8487, column: 5, scope: !835)
!837 = !DILocation(line: 8487, column: 5, scope: !838)
!838 = distinct !DILexicalBlock(scope: !834, file: !3, line: 8487, column: 5)
!839 = !DILocation(line: 8487, column: 5, scope: !840)
!840 = distinct !DILexicalBlock(scope: !841, file: !3, line: 8487, column: 5)
!841 = distinct !DILexicalBlock(scope: !834, file: !3, line: 8487, column: 5)
!842 = !DILocation(line: 8487, column: 5, scope: !843)
!843 = distinct !DILexicalBlock(scope: !840, file: !3, line: 8487, column: 5)
!844 = !DILocation(line: 8487, column: 5, scope: !845)
!845 = distinct !DILexicalBlock(scope: !841, file: !3, line: 8487, column: 5)
!846 = !DILocation(line: 8487, column: 5, scope: !847)
!847 = distinct !DILexicalBlock(scope: !845, file: !3, line: 8487, column: 5)
!848 = !DILocation(line: 8491, column: 11, scope: !778)
!849 = !DILocation(line: 8491, column: 9, scope: !778)
!850 = !DILocation(line: 8493, column: 13, scope: !778)
!851 = !DILocation(line: 8493, column: 5, scope: !778)
!852 = !DILocation(line: 8494, column: 5, scope: !778)
!853 = !DILocation(line: 8495, column: 13, scope: !778)
!854 = !DILocation(line: 8495, column: 5, scope: !778)
!855 = !DILocation(line: 8497, column: 5, scope: !856)
!856 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8497, column: 5)
!857 = !DILocation(line: 8497, column: 5, scope: !858)
!858 = distinct !DILexicalBlock(scope: !856, file: !3, line: 8497, column: 5)
!859 = !DILocation(line: 8498, column: 5, scope: !860)
!860 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8498, column: 5)
!861 = !DILocation(line: 8498, column: 5, scope: !862)
!862 = distinct !DILexicalBlock(scope: !860, file: !3, line: 8498, column: 5)
!863 = !DILocation(line: 8500, column: 9, scope: !864)
!864 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8500, column: 9)
!865 = !DILocation(line: 8500, column: 9, scope: !778)
!866 = !DILocalVariable(name: "p", scope: !867, file: !3, line: 8501, type: !19)
!867 = distinct !DILexicalBlock(scope: !864, file: !3, line: 8500, column: 25)
!868 = !DILocation(line: 8501, column: 8, scope: !867)
!869 = !DILocation(line: 8501, column: 12, scope: !867)
!870 = !DILocation(line: 8502, column: 2, scope: !867)
!871 = !DILocation(line: 8503, column: 6, scope: !872)
!872 = distinct !DILexicalBlock(scope: !873, file: !3, line: 8503, column: 6)
!873 = distinct !DILexicalBlock(scope: !867, file: !3, line: 8502, column: 5)
!874 = !DILocation(line: 8503, column: 6, scope: !875)
!875 = distinct !DILexicalBlock(scope: !872, file: !3, line: 8503, column: 6)
!876 = !DILocation(line: 8504, column: 2, scope: !873)
!877 = !DILocation(line: 8504, column: 13, scope: !867)
!878 = !DILocation(line: 8504, column: 11, scope: !867)
!879 = distinct !{!879, !870, !880}
!880 = !DILocation(line: 8504, column: 15, scope: !867)
!881 = !DILocation(line: 8505, column: 5, scope: !867)
!882 = !DILocation(line: 8506, column: 27, scope: !778)
!883 = !DILocation(line: 8506, column: 20, scope: !778)
!884 = !DILocation(line: 8506, column: 18, scope: !778)
!885 = !DILocation(line: 8508, column: 11, scope: !778)
!886 = !DILocation(line: 8521, column: 5, scope: !887)
!887 = distinct !DILexicalBlock(scope: !888, file: !3, line: 8521, column: 5)
!888 = distinct !DILexicalBlock(scope: !889, file: !3, line: 8521, column: 5)
!889 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8521, column: 5)
!890 = !DILocation(line: 8521, column: 5, scope: !888)
!891 = !DILocation(line: 8521, column: 5, scope: !892)
!892 = distinct !DILexicalBlock(scope: !887, file: !3, line: 8521, column: 5)
!893 = !DILocation(line: 8521, column: 5, scope: !894)
!894 = distinct !DILexicalBlock(scope: !895, file: !3, line: 8521, column: 5)
!895 = distinct !DILexicalBlock(scope: !887, file: !3, line: 8521, column: 5)
!896 = !DILocation(line: 8521, column: 5, scope: !897)
!897 = distinct !DILexicalBlock(scope: !894, file: !3, line: 8521, column: 5)
!898 = !DILocation(line: 8521, column: 5, scope: !899)
!899 = distinct !DILexicalBlock(scope: !895, file: !3, line: 8521, column: 5)
!900 = !DILocation(line: 8521, column: 5, scope: !901)
!901 = distinct !DILexicalBlock(scope: !899, file: !3, line: 8521, column: 5)
!902 = !DILocation(line: 8521, column: 5, scope: !903)
!903 = distinct !DILexicalBlock(scope: !904, file: !3, line: 8521, column: 5)
!904 = distinct !DILexicalBlock(scope: !889, file: !3, line: 8521, column: 5)
!905 = !DILocation(line: 8521, column: 5, scope: !904)
!906 = !DILocation(line: 8521, column: 5, scope: !907)
!907 = distinct !DILexicalBlock(scope: !903, file: !3, line: 8521, column: 5)
!908 = !DILocation(line: 8521, column: 5, scope: !909)
!909 = distinct !DILexicalBlock(scope: !910, file: !3, line: 8521, column: 5)
!910 = distinct !DILexicalBlock(scope: !903, file: !3, line: 8521, column: 5)
!911 = !DILocation(line: 8521, column: 5, scope: !912)
!912 = distinct !DILexicalBlock(scope: !909, file: !3, line: 8521, column: 5)
!913 = !DILocation(line: 8521, column: 5, scope: !914)
!914 = distinct !DILexicalBlock(scope: !910, file: !3, line: 8521, column: 5)
!915 = !DILocation(line: 8521, column: 5, scope: !916)
!916 = distinct !DILexicalBlock(scope: !914, file: !3, line: 8521, column: 5)
!917 = !DILocation(line: 8522, column: 5, scope: !918)
!918 = distinct !DILexicalBlock(scope: !919, file: !3, line: 8522, column: 5)
!919 = distinct !DILexicalBlock(scope: !920, file: !3, line: 8522, column: 5)
!920 = distinct !DILexicalBlock(scope: !778, file: !3, line: 8522, column: 5)
!921 = !DILocation(line: 8522, column: 5, scope: !919)
!922 = !DILocation(line: 8522, column: 5, scope: !923)
!923 = distinct !DILexicalBlock(scope: !918, file: !3, line: 8522, column: 5)
!924 = !DILocation(line: 8522, column: 5, scope: !925)
!925 = distinct !DILexicalBlock(scope: !926, file: !3, line: 8522, column: 5)
!926 = distinct !DILexicalBlock(scope: !918, file: !3, line: 8522, column: 5)
!927 = !DILocation(line: 8522, column: 5, scope: !928)
!928 = distinct !DILexicalBlock(scope: !925, file: !3, line: 8522, column: 5)
!929 = !DILocation(line: 8522, column: 5, scope: !930)
!930 = distinct !DILexicalBlock(scope: !926, file: !3, line: 8522, column: 5)
!931 = !DILocation(line: 8522, column: 5, scope: !932)
!932 = distinct !DILexicalBlock(scope: !930, file: !3, line: 8522, column: 5)
!933 = !DILocation(line: 8522, column: 5, scope: !934)
!934 = distinct !DILexicalBlock(scope: !935, file: !3, line: 8522, column: 5)
!935 = distinct !DILexicalBlock(scope: !920, file: !3, line: 8522, column: 5)
!936 = !DILocation(line: 8522, column: 5, scope: !935)
!937 = !DILocation(line: 8522, column: 5, scope: !938)
!938 = distinct !DILexicalBlock(scope: !934, file: !3, line: 8522, column: 5)
!939 = !DILocation(line: 8522, column: 5, scope: !940)
!940 = distinct !DILexicalBlock(scope: !941, file: !3, line: 8522, column: 5)
!941 = distinct !DILexicalBlock(scope: !934, file: !3, line: 8522, column: 5)
!942 = !DILocation(line: 8522, column: 5, scope: !943)
!943 = distinct !DILexicalBlock(scope: !940, file: !3, line: 8522, column: 5)
!944 = !DILocation(line: 8522, column: 5, scope: !945)
!945 = distinct !DILexicalBlock(scope: !941, file: !3, line: 8522, column: 5)
!946 = !DILocation(line: 8522, column: 5, scope: !947)
!947 = distinct !DILexicalBlock(scope: !945, file: !3, line: 8522, column: 5)
!948 = !DILocation(line: 8523, column: 18, scope: !778)
!949 = !DILocation(line: 8525, column: 5, scope: !778)
!950 = !DILocation(line: 8526, column: 5, scope: !778)
!951 = distinct !DISubprogram(name: "flush_outbuf", scope: !3, file: !3, line: 8015, type: !693, scopeLine: 8016, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!952 = !DILocation(line: 8017, column: 9, scope: !953)
!953 = distinct !DILexicalBlock(scope: !951, file: !3, line: 8017, column: 9)
!954 = !DILocation(line: 8017, column: 16, scope: !953)
!955 = !DILocation(line: 8017, column: 9, scope: !951)
!956 = !DILocation(line: 8017, column: 22, scope: !953)
!957 = !DILocation(line: 8019, column: 15, scope: !951)
!958 = !DILocation(line: 8019, column: 36, scope: !951)
!959 = !DILocation(line: 8019, column: 5, scope: !951)
!960 = !DILocation(line: 8020, column: 25, scope: !951)
!961 = !DILocation(line: 8020, column: 18, scope: !951)
!962 = !DILocation(line: 8020, column: 15, scope: !951)
!963 = !DILocation(line: 8021, column: 12, scope: !951)
!964 = !DILocation(line: 8022, column: 1, scope: !951)
!965 = !DILocalVariable(name: "s", arg: 1, scope: !477, file: !3, line: 7951, type: !85)
!966 = !DILocation(line: 7951, column: 10, scope: !477)
!967 = !DILocalVariable(name: "n", arg: 2, scope: !477, file: !3, line: 7952, type: !6)
!968 = !DILocation(line: 7952, column: 14, scope: !477)
!969 = !DILocalVariable(name: "c", scope: !477, file: !3, line: 7954, type: !51)
!970 = !DILocation(line: 7954, column: 18, scope: !477)
!971 = !DILocation(line: 7958, column: 9, scope: !972)
!972 = distinct !DILexicalBlock(scope: !477, file: !3, line: 7958, column: 9)
!973 = !DILocation(line: 7958, column: 11, scope: !972)
!974 = !DILocation(line: 7958, column: 9, scope: !477)
!975 = !DILocation(line: 7959, column: 4, scope: !976)
!976 = distinct !DILexicalBlock(scope: !972, file: !3, line: 7958, column: 20)
!977 = !DILocation(line: 7960, column: 5, scope: !976)
!978 = !DILocation(line: 7961, column: 6, scope: !979)
!979 = distinct !DILexicalBlock(scope: !972, file: !3, line: 7960, column: 12)
!980 = !DILocation(line: 7961, column: 4, scope: !979)
!981 = !DILocation(line: 7962, column: 13, scope: !982)
!982 = distinct !DILexicalBlock(scope: !979, file: !3, line: 7962, column: 13)
!983 = !DILocation(line: 7962, column: 13, scope: !979)
!984 = !DILocation(line: 7962, column: 16, scope: !982)
!985 = !DILocation(line: 7963, column: 34, scope: !986)
!986 = distinct !DILexicalBlock(scope: !982, file: !3, line: 7962, column: 19)
!987 = !DILocation(line: 7963, column: 29, scope: !986)
!988 = !DILocation(line: 7963, column: 41, scope: !986)
!989 = !DILocation(line: 7963, column: 39, scope: !986)
!990 = !DILocation(line: 7963, column: 38, scope: !986)
!991 = !DILocation(line: 7963, column: 36, scope: !986)
!992 = !DILocation(line: 7963, column: 46, scope: !986)
!993 = !DILocation(line: 7963, column: 17, scope: !986)
!994 = !DILocation(line: 7963, column: 57, scope: !986)
!995 = !DILocation(line: 7963, column: 59, scope: !986)
!996 = !DILocation(line: 7963, column: 54, scope: !986)
!997 = !DILocation(line: 7963, column: 15, scope: !986)
!998 = !DILocation(line: 7964, column: 9, scope: !986)
!999 = !DILocation(line: 7964, column: 18, scope: !982)
!1000 = distinct !{!1000, !984, !1001}
!1001 = !DILocation(line: 7964, column: 21, scope: !982)
!1002 = !DILocation(line: 7966, column: 11, scope: !477)
!1003 = !DILocation(line: 7966, column: 9, scope: !477)
!1004 = !DILocation(line: 7967, column: 12, scope: !477)
!1005 = !DILocation(line: 7967, column: 14, scope: !477)
!1006 = !DILocation(line: 7967, column: 5, scope: !477)
!1007 = distinct !DISubprogram(name: "bi_init", scope: !3, file: !3, line: 718, type: !1008, scopeLine: 720, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{null, !145}
!1010 = !DILocalVariable(name: "zipfile", arg: 1, scope: !1007, file: !3, line: 719, type: !145)
!1011 = !DILocation(line: 719, column: 12, scope: !1007)
!1012 = !DILocation(line: 721, column: 14, scope: !1007)
!1013 = !DILocation(line: 721, column: 12, scope: !1007)
!1014 = !DILocation(line: 722, column: 12, scope: !1007)
!1015 = !DILocation(line: 723, column: 14, scope: !1007)
!1016 = !DILocation(line: 731, column: 9, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !1007, file: !3, line: 731, column: 9)
!1018 = !DILocation(line: 731, column: 15, scope: !1017)
!1019 = !DILocation(line: 731, column: 9, scope: !1007)
!1020 = !DILocation(line: 732, column: 12, scope: !1021)
!1021 = distinct !DILexicalBlock(scope: !1017, file: !3, line: 731, column: 27)
!1022 = !DILocation(line: 733, column: 5, scope: !1021)
!1023 = !DILocation(line: 734, column: 1, scope: !1007)
!1024 = distinct !DISubprogram(name: "ct_init", scope: !3, file: !3, line: 5973, type: !1025, scopeLine: 5976, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1025 = !DISubroutineType(types: !1026)
!1026 = !{null, !166, !33}
!1027 = !DILocalVariable(name: "attr", arg: 1, scope: !1024, file: !3, line: 5974, type: !166)
!1028 = !DILocation(line: 5974, column: 11, scope: !1024)
!1029 = !DILocalVariable(name: "methodp", arg: 2, scope: !1024, file: !3, line: 5975, type: !33)
!1030 = !DILocation(line: 5975, column: 11, scope: !1024)
!1031 = !DILocalVariable(name: "n", scope: !1024, file: !3, line: 5977, type: !12)
!1032 = !DILocation(line: 5977, column: 9, scope: !1024)
!1033 = !DILocalVariable(name: "bits", scope: !1024, file: !3, line: 5978, type: !12)
!1034 = !DILocation(line: 5978, column: 9, scope: !1024)
!1035 = !DILocalVariable(name: "length", scope: !1024, file: !3, line: 5979, type: !12)
!1036 = !DILocation(line: 5979, column: 9, scope: !1024)
!1037 = !DILocalVariable(name: "code", scope: !1024, file: !3, line: 5980, type: !12)
!1038 = !DILocation(line: 5980, column: 9, scope: !1024)
!1039 = !DILocalVariable(name: "dist", scope: !1024, file: !3, line: 5981, type: !12)
!1040 = !DILocation(line: 5981, column: 9, scope: !1024)
!1041 = !DILocation(line: 5983, column: 17, scope: !1024)
!1042 = !DILocation(line: 5983, column: 15, scope: !1024)
!1043 = !DILocation(line: 5984, column: 19, scope: !1024)
!1044 = !DILocation(line: 5984, column: 17, scope: !1024)
!1045 = !DILocation(line: 5985, column: 32, scope: !1024)
!1046 = !DILocation(line: 5985, column: 20, scope: !1024)
!1047 = !DILocation(line: 5987, column: 25, scope: !1048)
!1048 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 5987, column: 9)
!1049 = !DILocation(line: 5987, column: 9, scope: !1048)
!1050 = !DILocation(line: 5987, column: 29, scope: !1048)
!1051 = !DILocation(line: 5987, column: 9, scope: !1024)
!1052 = !DILocation(line: 5987, column: 35, scope: !1048)
!1053 = !DILocation(line: 5990, column: 12, scope: !1024)
!1054 = !DILocation(line: 5991, column: 15, scope: !1055)
!1055 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 5991, column: 5)
!1056 = !DILocation(line: 5991, column: 10, scope: !1055)
!1057 = !DILocation(line: 5991, column: 20, scope: !1058)
!1058 = distinct !DILexicalBlock(scope: !1055, file: !3, line: 5991, column: 5)
!1059 = !DILocation(line: 5991, column: 25, scope: !1058)
!1060 = !DILocation(line: 5991, column: 5, scope: !1055)
!1061 = !DILocation(line: 5992, column: 29, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1058, file: !3, line: 5991, column: 51)
!1063 = !DILocation(line: 5992, column: 21, scope: !1062)
!1064 = !DILocation(line: 5992, column: 9, scope: !1062)
!1065 = !DILocation(line: 5992, column: 27, scope: !1062)
!1066 = !DILocation(line: 5993, column: 16, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1062, file: !3, line: 5993, column: 9)
!1068 = !DILocation(line: 5993, column: 14, scope: !1067)
!1069 = !DILocation(line: 5993, column: 21, scope: !1070)
!1070 = distinct !DILexicalBlock(scope: !1067, file: !3, line: 5993, column: 9)
!1071 = !DILocation(line: 5993, column: 41, scope: !1070)
!1072 = !DILocation(line: 5993, column: 29, scope: !1070)
!1073 = !DILocation(line: 5993, column: 27, scope: !1070)
!1074 = !DILocation(line: 5993, column: 23, scope: !1070)
!1075 = !DILocation(line: 5993, column: 9, scope: !1067)
!1076 = !DILocation(line: 5994, column: 42, scope: !1077)
!1077 = distinct !DILexicalBlock(scope: !1070, file: !3, line: 5993, column: 54)
!1078 = !DILocation(line: 5994, column: 37, scope: !1077)
!1079 = !DILocation(line: 5994, column: 31, scope: !1077)
!1080 = !DILocation(line: 5994, column: 13, scope: !1077)
!1081 = !DILocation(line: 5994, column: 35, scope: !1077)
!1082 = !DILocation(line: 5995, column: 9, scope: !1077)
!1083 = !DILocation(line: 5993, column: 50, scope: !1070)
!1084 = !DILocation(line: 5993, column: 9, scope: !1070)
!1085 = distinct !{!1085, !1075, !1086}
!1086 = !DILocation(line: 5995, column: 9, scope: !1067)
!1087 = !DILocation(line: 5996, column: 5, scope: !1062)
!1088 = !DILocation(line: 5991, column: 47, scope: !1058)
!1089 = !DILocation(line: 5991, column: 5, scope: !1058)
!1090 = distinct !{!1090, !1060, !1091}
!1091 = !DILocation(line: 5996, column: 5, scope: !1055)
!1092 = !DILocation(line: 6002, column: 34, scope: !1024)
!1093 = !DILocation(line: 6002, column: 29, scope: !1024)
!1094 = !DILocation(line: 6002, column: 17, scope: !1024)
!1095 = !DILocation(line: 6002, column: 23, scope: !1024)
!1096 = !DILocation(line: 6002, column: 5, scope: !1024)
!1097 = !DILocation(line: 6002, column: 27, scope: !1024)
!1098 = !DILocation(line: 6005, column: 10, scope: !1024)
!1099 = !DILocation(line: 6006, column: 15, scope: !1100)
!1100 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 6006, column: 5)
!1101 = !DILocation(line: 6006, column: 10, scope: !1100)
!1102 = !DILocation(line: 6006, column: 21, scope: !1103)
!1103 = distinct !DILexicalBlock(scope: !1100, file: !3, line: 6006, column: 5)
!1104 = !DILocation(line: 6006, column: 26, scope: !1103)
!1105 = !DILocation(line: 6006, column: 5, scope: !1100)
!1106 = !DILocation(line: 6007, column: 27, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1103, file: !3, line: 6006, column: 40)
!1108 = !DILocation(line: 6007, column: 19, scope: !1107)
!1109 = !DILocation(line: 6007, column: 9, scope: !1107)
!1110 = !DILocation(line: 6007, column: 25, scope: !1107)
!1111 = !DILocation(line: 6008, column: 16, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1107, file: !3, line: 6008, column: 9)
!1113 = !DILocation(line: 6008, column: 14, scope: !1112)
!1114 = !DILocation(line: 6008, column: 21, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1112, file: !3, line: 6008, column: 9)
!1116 = !DILocation(line: 6008, column: 41, scope: !1115)
!1117 = !DILocation(line: 6008, column: 29, scope: !1115)
!1118 = !DILocation(line: 6008, column: 27, scope: !1115)
!1119 = !DILocation(line: 6008, column: 23, scope: !1115)
!1120 = !DILocation(line: 6008, column: 9, scope: !1112)
!1121 = !DILocation(line: 6009, column: 38, scope: !1122)
!1122 = distinct !DILexicalBlock(scope: !1115, file: !3, line: 6008, column: 54)
!1123 = !DILocation(line: 6009, column: 33, scope: !1122)
!1124 = !DILocation(line: 6009, column: 27, scope: !1122)
!1125 = !DILocation(line: 6009, column: 13, scope: !1122)
!1126 = !DILocation(line: 6009, column: 31, scope: !1122)
!1127 = !DILocation(line: 6010, column: 9, scope: !1122)
!1128 = !DILocation(line: 6008, column: 50, scope: !1115)
!1129 = !DILocation(line: 6008, column: 9, scope: !1115)
!1130 = distinct !{!1130, !1120, !1131}
!1131 = !DILocation(line: 6010, column: 9, scope: !1112)
!1132 = !DILocation(line: 6011, column: 5, scope: !1107)
!1133 = !DILocation(line: 6006, column: 36, scope: !1103)
!1134 = !DILocation(line: 6006, column: 5, scope: !1103)
!1135 = distinct !{!1135, !1105, !1136}
!1136 = !DILocation(line: 6011, column: 5, scope: !1100)
!1137 = !DILocation(line: 6013, column: 10, scope: !1024)
!1138 = !DILocation(line: 6014, column: 5, scope: !1024)
!1139 = !DILocation(line: 6014, column: 13, scope: !1140)
!1140 = distinct !DILexicalBlock(scope: !1141, file: !3, line: 6014, column: 5)
!1141 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 6014, column: 5)
!1142 = !DILocation(line: 6014, column: 18, scope: !1140)
!1143 = !DILocation(line: 6014, column: 5, scope: !1141)
!1144 = !DILocation(line: 6015, column: 27, scope: !1145)
!1145 = distinct !DILexicalBlock(scope: !1140, file: !3, line: 6014, column: 37)
!1146 = !DILocation(line: 6015, column: 32, scope: !1145)
!1147 = !DILocation(line: 6015, column: 19, scope: !1145)
!1148 = !DILocation(line: 6015, column: 9, scope: !1145)
!1149 = !DILocation(line: 6015, column: 25, scope: !1145)
!1150 = !DILocation(line: 6016, column: 16, scope: !1151)
!1151 = distinct !DILexicalBlock(scope: !1145, file: !3, line: 6016, column: 9)
!1152 = !DILocation(line: 6016, column: 14, scope: !1151)
!1153 = !DILocation(line: 6016, column: 21, scope: !1154)
!1154 = distinct !DILexicalBlock(scope: !1151, file: !3, line: 6016, column: 9)
!1155 = !DILocation(line: 6016, column: 42, scope: !1154)
!1156 = !DILocation(line: 6016, column: 30, scope: !1154)
!1157 = !DILocation(line: 6016, column: 47, scope: !1154)
!1158 = !DILocation(line: 6016, column: 27, scope: !1154)
!1159 = !DILocation(line: 6016, column: 23, scope: !1154)
!1160 = !DILocation(line: 6016, column: 9, scope: !1151)
!1161 = !DILocation(line: 6017, column: 44, scope: !1162)
!1162 = distinct !DILexicalBlock(scope: !1154, file: !3, line: 6016, column: 58)
!1163 = !DILocation(line: 6017, column: 39, scope: !1162)
!1164 = !DILocation(line: 6017, column: 33, scope: !1162)
!1165 = !DILocation(line: 6017, column: 27, scope: !1162)
!1166 = !DILocation(line: 6017, column: 13, scope: !1162)
!1167 = !DILocation(line: 6017, column: 37, scope: !1162)
!1168 = !DILocation(line: 6018, column: 9, scope: !1162)
!1169 = !DILocation(line: 6016, column: 54, scope: !1154)
!1170 = !DILocation(line: 6016, column: 9, scope: !1154)
!1171 = distinct !{!1171, !1160, !1172}
!1172 = !DILocation(line: 6018, column: 9, scope: !1151)
!1173 = !DILocation(line: 6019, column: 5, scope: !1145)
!1174 = !DILocation(line: 6014, column: 33, scope: !1140)
!1175 = !DILocation(line: 6014, column: 5, scope: !1140)
!1176 = distinct !{!1176, !1143, !1177}
!1177 = !DILocation(line: 6019, column: 5, scope: !1141)
!1178 = !DILocation(line: 6023, column: 15, scope: !1179)
!1179 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 6023, column: 5)
!1180 = !DILocation(line: 6023, column: 10, scope: !1179)
!1181 = !DILocation(line: 6023, column: 20, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1179, file: !3, line: 6023, column: 5)
!1183 = !DILocation(line: 6023, column: 25, scope: !1182)
!1184 = !DILocation(line: 6023, column: 5, scope: !1179)
!1185 = !DILocation(line: 6023, column: 55, scope: !1182)
!1186 = !DILocation(line: 6023, column: 46, scope: !1182)
!1187 = !DILocation(line: 6023, column: 61, scope: !1182)
!1188 = !DILocation(line: 6023, column: 42, scope: !1182)
!1189 = !DILocation(line: 6023, column: 5, scope: !1182)
!1190 = distinct !{!1190, !1184, !1191}
!1191 = !DILocation(line: 6023, column: 63, scope: !1179)
!1192 = !DILocation(line: 6024, column: 7, scope: !1024)
!1193 = !DILocation(line: 6025, column: 5, scope: !1024)
!1194 = !DILocation(line: 6025, column: 12, scope: !1024)
!1195 = !DILocation(line: 6025, column: 14, scope: !1024)
!1196 = !DILocation(line: 6025, column: 36, scope: !1024)
!1197 = !DILocation(line: 6025, column: 22, scope: !1024)
!1198 = !DILocation(line: 6025, column: 40, scope: !1024)
!1199 = !DILocation(line: 6025, column: 44, scope: !1024)
!1200 = !DILocation(line: 6025, column: 60, scope: !1024)
!1201 = distinct !{!1201, !1193, !1200}
!1202 = !DILocation(line: 6026, column: 5, scope: !1024)
!1203 = !DILocation(line: 6026, column: 12, scope: !1024)
!1204 = !DILocation(line: 6026, column: 14, scope: !1024)
!1205 = !DILocation(line: 6026, column: 36, scope: !1024)
!1206 = !DILocation(line: 6026, column: 22, scope: !1024)
!1207 = !DILocation(line: 6026, column: 40, scope: !1024)
!1208 = !DILocation(line: 6026, column: 44, scope: !1024)
!1209 = !DILocation(line: 6026, column: 60, scope: !1024)
!1210 = distinct !{!1210, !1202, !1209}
!1211 = !DILocation(line: 6027, column: 5, scope: !1024)
!1212 = !DILocation(line: 6027, column: 12, scope: !1024)
!1213 = !DILocation(line: 6027, column: 14, scope: !1024)
!1214 = !DILocation(line: 6027, column: 36, scope: !1024)
!1215 = !DILocation(line: 6027, column: 22, scope: !1024)
!1216 = !DILocation(line: 6027, column: 40, scope: !1024)
!1217 = !DILocation(line: 6027, column: 44, scope: !1024)
!1218 = !DILocation(line: 6027, column: 60, scope: !1024)
!1219 = distinct !{!1219, !1211, !1218}
!1220 = !DILocation(line: 6028, column: 5, scope: !1024)
!1221 = !DILocation(line: 6028, column: 12, scope: !1024)
!1222 = !DILocation(line: 6028, column: 14, scope: !1024)
!1223 = !DILocation(line: 6028, column: 36, scope: !1024)
!1224 = !DILocation(line: 6028, column: 22, scope: !1024)
!1225 = !DILocation(line: 6028, column: 40, scope: !1024)
!1226 = !DILocation(line: 6028, column: 44, scope: !1024)
!1227 = !DILocation(line: 6028, column: 60, scope: !1024)
!1228 = distinct !{!1228, !1220, !1227}
!1229 = !DILocation(line: 6033, column: 5, scope: !1024)
!1230 = !DILocation(line: 6036, column: 12, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1024, file: !3, line: 6036, column: 5)
!1232 = !DILocation(line: 6036, column: 10, scope: !1231)
!1233 = !DILocation(line: 6036, column: 17, scope: !1234)
!1234 = distinct !DILexicalBlock(scope: !1231, file: !3, line: 6036, column: 5)
!1235 = !DILocation(line: 6036, column: 19, scope: !1234)
!1236 = !DILocation(line: 6036, column: 5, scope: !1231)
!1237 = !DILocation(line: 6037, column: 22, scope: !1238)
!1238 = distinct !DILexicalBlock(scope: !1234, file: !3, line: 6036, column: 35)
!1239 = !DILocation(line: 6037, column: 9, scope: !1238)
!1240 = !DILocation(line: 6037, column: 25, scope: !1238)
!1241 = !DILocation(line: 6037, column: 29, scope: !1238)
!1242 = !DILocation(line: 6038, column: 43, scope: !1238)
!1243 = !DILocation(line: 6038, column: 32, scope: !1238)
!1244 = !DILocation(line: 6038, column: 22, scope: !1238)
!1245 = !DILocation(line: 6038, column: 9, scope: !1238)
!1246 = !DILocation(line: 6038, column: 25, scope: !1238)
!1247 = !DILocation(line: 6038, column: 30, scope: !1238)
!1248 = !DILocation(line: 6039, column: 5, scope: !1238)
!1249 = !DILocation(line: 6036, column: 31, scope: !1234)
!1250 = !DILocation(line: 6036, column: 5, scope: !1234)
!1251 = distinct !{!1251, !1236, !1252}
!1252 = !DILocation(line: 6039, column: 5, scope: !1231)
!1253 = !DILocation(line: 6042, column: 5, scope: !1024)
!1254 = !DILocation(line: 6043, column: 1, scope: !1024)
!1255 = distinct !DISubprogram(name: "lm_init", scope: !3, file: !3, line: 1163, type: !1256, scopeLine: 1166, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1256 = !DISubroutineType(types: !1257)
!1257 = !{null, !12, !166}
!1258 = !DILocalVariable(name: "pack_level", arg: 1, scope: !1255, file: !3, line: 1164, type: !12)
!1259 = !DILocation(line: 1164, column: 9, scope: !1255)
!1260 = !DILocalVariable(name: "flags", arg: 2, scope: !1255, file: !3, line: 1165, type: !166)
!1261 = !DILocation(line: 1165, column: 10, scope: !1255)
!1262 = !DILocalVariable(name: "j", scope: !1255, file: !3, line: 1167, type: !6)
!1263 = !DILocation(line: 1167, column: 23, scope: !1255)
!1264 = !DILocation(line: 1169, column: 9, scope: !1265)
!1265 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 1169, column: 9)
!1266 = !DILocation(line: 1169, column: 20, scope: !1265)
!1267 = !DILocation(line: 1169, column: 24, scope: !1265)
!1268 = !DILocation(line: 1169, column: 27, scope: !1265)
!1269 = !DILocation(line: 1169, column: 38, scope: !1265)
!1270 = !DILocation(line: 1169, column: 9, scope: !1255)
!1271 = !DILocation(line: 1169, column: 43, scope: !1265)
!1272 = !DILocation(line: 1170, column: 19, scope: !1255)
!1273 = !DILocation(line: 1170, column: 17, scope: !1255)
!1274 = !DILocation(line: 1176, column: 5, scope: !1255)
!1275 = !DILocation(line: 1181, column: 21, scope: !1255)
!1276 = !DILocation(line: 1182, column: 15, scope: !1255)
!1277 = !DILocation(line: 1186, column: 44, scope: !1255)
!1278 = !DILocation(line: 1186, column: 24, scope: !1255)
!1279 = !DILocation(line: 1186, column: 56, scope: !1255)
!1280 = !DILocation(line: 1186, column: 22, scope: !1255)
!1281 = !DILocation(line: 1187, column: 44, scope: !1255)
!1282 = !DILocation(line: 1187, column: 24, scope: !1255)
!1283 = !DILocation(line: 1187, column: 56, scope: !1255)
!1284 = !DILocation(line: 1187, column: 22, scope: !1255)
!1285 = !DILocation(line: 1189, column: 44, scope: !1255)
!1286 = !DILocation(line: 1189, column: 24, scope: !1255)
!1287 = !DILocation(line: 1189, column: 56, scope: !1255)
!1288 = !DILocation(line: 1189, column: 22, scope: !1255)
!1289 = !DILocation(line: 1191, column: 44, scope: !1255)
!1290 = !DILocation(line: 1191, column: 24, scope: !1255)
!1291 = !DILocation(line: 1191, column: 56, scope: !1255)
!1292 = !DILocation(line: 1191, column: 22, scope: !1255)
!1293 = !DILocation(line: 1192, column: 9, scope: !1294)
!1294 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 1192, column: 9)
!1295 = !DILocation(line: 1192, column: 20, scope: !1294)
!1296 = !DILocation(line: 1192, column: 9, scope: !1255)
!1297 = !DILocation(line: 1193, column: 9, scope: !1298)
!1298 = distinct !DILexicalBlock(scope: !1294, file: !3, line: 1192, column: 26)
!1299 = !DILocation(line: 1193, column: 15, scope: !1298)
!1300 = !DILocation(line: 1194, column: 5, scope: !1298)
!1301 = !DILocation(line: 1194, column: 16, scope: !1302)
!1302 = distinct !DILexicalBlock(scope: !1294, file: !3, line: 1194, column: 16)
!1303 = !DILocation(line: 1194, column: 27, scope: !1302)
!1304 = !DILocation(line: 1194, column: 16, scope: !1294)
!1305 = !DILocation(line: 1195, column: 9, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1302, file: !3, line: 1194, column: 33)
!1307 = !DILocation(line: 1195, column: 15, scope: !1306)
!1308 = !DILocation(line: 1196, column: 5, scope: !1306)
!1309 = !DILocation(line: 1199, column: 14, scope: !1255)
!1310 = !DILocation(line: 1200, column: 17, scope: !1255)
!1311 = !DILocation(line: 1205, column: 17, scope: !1255)
!1312 = !DILocation(line: 1205, column: 15, scope: !1255)
!1313 = !DILocation(line: 1208, column: 9, scope: !1314)
!1314 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 1208, column: 9)
!1315 = !DILocation(line: 1208, column: 19, scope: !1314)
!1316 = !DILocation(line: 1208, column: 24, scope: !1314)
!1317 = !DILocation(line: 1208, column: 27, scope: !1314)
!1318 = !DILocation(line: 1208, column: 37, scope: !1314)
!1319 = !DILocation(line: 1208, column: 9, scope: !1255)
!1320 = !DILocation(line: 1209, column: 15, scope: !1321)
!1321 = distinct !DILexicalBlock(scope: !1314, file: !3, line: 1208, column: 55)
!1322 = !DILocation(line: 1209, column: 30, scope: !1321)
!1323 = !DILocation(line: 1210, column: 8, scope: !1321)
!1324 = !DILocation(line: 1212, column: 12, scope: !1255)
!1325 = !DILocation(line: 1216, column: 5, scope: !1255)
!1326 = !DILocation(line: 1216, column: 12, scope: !1255)
!1327 = !DILocation(line: 1216, column: 22, scope: !1255)
!1328 = !DILocation(line: 1216, column: 38, scope: !1255)
!1329 = !DILocation(line: 1216, column: 42, scope: !1255)
!1330 = !DILocation(line: 1216, column: 41, scope: !1255)
!1331 = !DILocation(line: 0, scope: !1255)
!1332 = !DILocation(line: 1216, column: 50, scope: !1255)
!1333 = distinct !{!1333, !1325, !1334}
!1334 = !DILocation(line: 1216, column: 62, scope: !1255)
!1335 = !DILocation(line: 1218, column: 11, scope: !1255)
!1336 = !DILocation(line: 1219, column: 11, scope: !1337)
!1337 = distinct !DILexicalBlock(scope: !1255, file: !3, line: 1219, column: 5)
!1338 = !DILocation(line: 1219, column: 10, scope: !1337)
!1339 = !DILocation(line: 1219, column: 15, scope: !1340)
!1340 = distinct !DILexicalBlock(scope: !1337, file: !3, line: 1219, column: 5)
!1341 = !DILocation(line: 1219, column: 16, scope: !1340)
!1342 = !DILocation(line: 1219, column: 5, scope: !1337)
!1343 = !DILocation(line: 1219, column: 35, scope: !1340)
!1344 = !DILocation(line: 1219, column: 31, scope: !1340)
!1345 = !DILocation(line: 1219, column: 5, scope: !1340)
!1346 = distinct !{!1346, !1342, !1347}
!1347 = !DILocation(line: 1219, column: 35, scope: !1337)
!1348 = !DILocation(line: 1223, column: 1, scope: !1255)
!1349 = distinct !DISubprogram(name: "base_name", scope: !3, file: !3, line: 8077, type: !706, scopeLine: 8079, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1350 = !DILocalVariable(name: "fname", arg: 1, scope: !1349, file: !3, line: 8078, type: !19)
!1351 = !DILocation(line: 8078, column: 11, scope: !1349)
!1352 = !DILocalVariable(name: "p", scope: !1349, file: !3, line: 8080, type: !19)
!1353 = !DILocation(line: 8080, column: 11, scope: !1349)
!1354 = !DILocation(line: 8082, column: 22, scope: !1355)
!1355 = distinct !DILexicalBlock(scope: !1349, file: !3, line: 8082, column: 9)
!1356 = !DILocation(line: 8082, column: 14, scope: !1355)
!1357 = !DILocation(line: 8082, column: 12, scope: !1355)
!1358 = !DILocation(line: 8082, column: 41, scope: !1355)
!1359 = !DILocation(line: 8082, column: 9, scope: !1349)
!1360 = !DILocation(line: 8082, column: 58, scope: !1355)
!1361 = !DILocation(line: 8082, column: 59, scope: !1355)
!1362 = !DILocation(line: 8082, column: 56, scope: !1355)
!1363 = !DILocation(line: 8082, column: 50, scope: !1355)
!1364 = !DILocation(line: 8093, column: 12, scope: !1349)
!1365 = !DILocation(line: 8093, column: 5, scope: !1349)
!1366 = distinct !DISubprogram(name: "deflate", scope: !3, file: !3, line: 1584, type: !1367, scopeLine: 1585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1367 = !DISubroutineType(types: !1368)
!1368 = !{!79}
!1369 = !DILocalVariable(name: "hash_head", scope: !1366, file: !3, line: 1586, type: !21)
!1370 = !DILocation(line: 1586, column: 10, scope: !1366)
!1371 = !DILocalVariable(name: "prev_match", scope: !1366, file: !3, line: 1587, type: !21)
!1372 = !DILocation(line: 1587, column: 10, scope: !1366)
!1373 = !DILocalVariable(name: "flush", scope: !1366, file: !3, line: 1588, type: !12)
!1374 = !DILocation(line: 1588, column: 9, scope: !1366)
!1375 = !DILocalVariable(name: "match_available", scope: !1366, file: !3, line: 1589, type: !12)
!1376 = !DILocation(line: 1589, column: 9, scope: !1366)
!1377 = !DILocalVariable(name: "match_length", scope: !1366, file: !3, line: 1590, type: !6)
!1378 = !DILocation(line: 1590, column: 23, scope: !1366)
!1379 = !DILocation(line: 1592, column: 9, scope: !1380)
!1380 = distinct !DILexicalBlock(scope: !1366, file: !3, line: 1592, column: 9)
!1381 = !DILocation(line: 1592, column: 21, scope: !1380)
!1382 = !DILocation(line: 1592, column: 9, scope: !1366)
!1383 = !DILocation(line: 1592, column: 34, scope: !1380)
!1384 = !DILocation(line: 1592, column: 27, scope: !1380)
!1385 = !DILocation(line: 1595, column: 5, scope: !1366)
!1386 = !DILocation(line: 1595, column: 12, scope: !1366)
!1387 = !DILocation(line: 1595, column: 22, scope: !1366)
!1388 = !DILocation(line: 1599, column: 9, scope: !1389)
!1389 = distinct !DILexicalBlock(scope: !1366, file: !3, line: 1595, column: 28)
!1390 = !DILocation(line: 1603, column: 23, scope: !1389)
!1391 = !DILocation(line: 1603, column: 21, scope: !1389)
!1392 = !DILocation(line: 1603, column: 50, scope: !1389)
!1393 = !DILocation(line: 1603, column: 48, scope: !1389)
!1394 = !DILocation(line: 1604, column: 22, scope: !1389)
!1395 = !DILocation(line: 1606, column: 13, scope: !1396)
!1396 = distinct !DILexicalBlock(scope: !1389, file: !3, line: 1606, column: 13)
!1397 = !DILocation(line: 1606, column: 23, scope: !1396)
!1398 = !DILocation(line: 1606, column: 30, scope: !1396)
!1399 = !DILocation(line: 1606, column: 33, scope: !1396)
!1400 = !DILocation(line: 1606, column: 47, scope: !1396)
!1401 = !DILocation(line: 1606, column: 45, scope: !1396)
!1402 = !DILocation(line: 1606, column: 62, scope: !1396)
!1403 = !DILocation(line: 1607, column: 13, scope: !1396)
!1404 = !DILocation(line: 1607, column: 24, scope: !1396)
!1405 = !DILocation(line: 1607, column: 22, scope: !1396)
!1406 = !DILocation(line: 1607, column: 34, scope: !1396)
!1407 = !DILocation(line: 1607, column: 46, scope: !1396)
!1408 = !DILocation(line: 1608, column: 6, scope: !1396)
!1409 = !DILocation(line: 1608, column: 18, scope: !1396)
!1410 = !DILocation(line: 1608, column: 30, scope: !1396)
!1411 = !DILocation(line: 1608, column: 15, scope: !1396)
!1412 = !DILocation(line: 1606, column: 13, scope: !1389)
!1413 = !DILocation(line: 1613, column: 43, scope: !1414)
!1414 = distinct !DILexicalBlock(scope: !1396, file: !3, line: 1608, column: 47)
!1415 = !DILocation(line: 1613, column: 28, scope: !1414)
!1416 = !DILocation(line: 1613, column: 26, scope: !1414)
!1417 = !DILocation(line: 1615, column: 17, scope: !1418)
!1418 = distinct !DILexicalBlock(scope: !1414, file: !3, line: 1615, column: 17)
!1419 = !DILocation(line: 1615, column: 32, scope: !1418)
!1420 = !DILocation(line: 1615, column: 30, scope: !1418)
!1421 = !DILocation(line: 1615, column: 17, scope: !1414)
!1422 = !DILocation(line: 1615, column: 58, scope: !1418)
!1423 = !DILocation(line: 1615, column: 56, scope: !1418)
!1424 = !DILocation(line: 1615, column: 43, scope: !1418)
!1425 = !DILocation(line: 1618, column: 17, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1414, file: !3, line: 1618, column: 17)
!1427 = !DILocation(line: 1618, column: 30, scope: !1426)
!1428 = !DILocation(line: 1618, column: 43, scope: !1426)
!1429 = !DILocation(line: 1618, column: 46, scope: !1426)
!1430 = !DILocation(line: 1618, column: 55, scope: !1426)
!1431 = !DILocation(line: 1618, column: 54, scope: !1426)
!1432 = !DILocation(line: 1618, column: 67, scope: !1426)
!1433 = !DILocation(line: 1618, column: 17, scope: !1414)
!1434 = !DILocation(line: 1622, column: 29, scope: !1435)
!1435 = distinct !DILexicalBlock(scope: !1426, file: !3, line: 1618, column: 77)
!1436 = !DILocation(line: 1623, column: 13, scope: !1435)
!1437 = !DILocation(line: 1624, column: 9, scope: !1414)
!1438 = !DILocation(line: 1628, column: 13, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !1389, file: !3, line: 1628, column: 13)
!1440 = !DILocation(line: 1628, column: 25, scope: !1439)
!1441 = !DILocation(line: 1628, column: 38, scope: !1439)
!1442 = !DILocation(line: 1628, column: 41, scope: !1439)
!1443 = !DILocation(line: 1628, column: 57, scope: !1439)
!1444 = !DILocation(line: 1628, column: 54, scope: !1439)
!1445 = !DILocation(line: 1628, column: 13, scope: !1389)
!1446 = !DILocation(line: 1632, column: 30, scope: !1447)
!1447 = distinct !DILexicalBlock(scope: !1439, file: !3, line: 1628, column: 70)
!1448 = !DILocation(line: 1632, column: 38, scope: !1447)
!1449 = !DILocation(line: 1632, column: 41, scope: !1447)
!1450 = !DILocation(line: 1632, column: 40, scope: !1447)
!1451 = !DILocation(line: 1632, column: 53, scope: !1447)
!1452 = !DILocation(line: 1632, column: 65, scope: !1447)
!1453 = !DILocation(line: 1632, column: 21, scope: !1447)
!1454 = !DILocation(line: 1632, column: 19, scope: !1447)
!1455 = !DILocation(line: 1637, column: 26, scope: !1447)
!1456 = !DILocation(line: 1637, column: 37, scope: !1447)
!1457 = !DILocation(line: 1637, column: 23, scope: !1447)
!1458 = !DILocation(line: 1638, column: 25, scope: !1447)
!1459 = !DILocation(line: 1639, column: 6, scope: !1447)
!1460 = !DILocation(line: 1639, column: 6, scope: !1461)
!1461 = distinct !DILexicalBlock(scope: !1462, file: !3, line: 1639, column: 6)
!1462 = distinct !DILexicalBlock(scope: !1447, file: !3, line: 1639, column: 6)
!1463 = !DILocation(line: 1639, column: 6, scope: !1462)
!1464 = !DILocation(line: 1640, column: 13, scope: !1447)
!1465 = !DILocation(line: 1641, column: 25, scope: !1466)
!1466 = distinct !DILexicalBlock(scope: !1447, file: !3, line: 1640, column: 16)
!1467 = !DILocation(line: 1642, column: 17, scope: !1466)
!1468 = !DILocation(line: 1648, column: 13, scope: !1466)
!1469 = !DILocation(line: 1648, column: 22, scope: !1447)
!1470 = !DILocation(line: 1648, column: 36, scope: !1447)
!1471 = distinct !{!1471, !1464, !1472}
!1472 = !DILocation(line: 1648, column: 40, scope: !1447)
!1473 = !DILocation(line: 1649, column: 29, scope: !1447)
!1474 = !DILocation(line: 1650, column: 26, scope: !1447)
!1475 = !DILocation(line: 1651, column: 21, scope: !1447)
!1476 = !DILocation(line: 1653, column: 10, scope: !1477)
!1477 = distinct !DILexicalBlock(scope: !1447, file: !3, line: 1653, column: 10)
!1478 = !DILocation(line: 1653, column: 16, scope: !1477)
!1479 = !DILocation(line: 1653, column: 19, scope: !1477)
!1480 = !DILocation(line: 1653, column: 30, scope: !1477)
!1481 = !DILocation(line: 1653, column: 28, scope: !1477)
!1482 = !DILocation(line: 1653, column: 10, scope: !1447)
!1483 = !DILocation(line: 1654, column: 19, scope: !1484)
!1484 = distinct !DILexicalBlock(scope: !1477, file: !3, line: 1653, column: 47)
!1485 = !DILocation(line: 1655, column: 9, scope: !1484)
!1486 = !DILocation(line: 1656, column: 6, scope: !1484)
!1487 = !DILocation(line: 1657, column: 17, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1447, file: !3, line: 1657, column: 17)
!1489 = !DILocation(line: 1657, column: 17, scope: !1447)
!1490 = !DILocation(line: 1657, column: 24, scope: !1488)
!1491 = !DILocation(line: 1657, column: 54, scope: !1488)
!1492 = !DILocation(line: 1657, column: 52, scope: !1488)
!1493 = !DILocation(line: 1658, column: 9, scope: !1447)
!1494 = !DILocation(line: 1658, column: 20, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1439, file: !3, line: 1658, column: 20)
!1496 = !DILocation(line: 1658, column: 20, scope: !1439)
!1497 = !DILocation(line: 1664, column: 34, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1495, file: !3, line: 1658, column: 37)
!1499 = !DILocation(line: 1664, column: 42, scope: !1498)
!1500 = !DILocation(line: 1664, column: 27, scope: !1498)
!1501 = !DILocation(line: 1664, column: 14, scope: !1498)
!1502 = !DILocation(line: 1664, column: 12, scope: !1498)
!1503 = !DILocation(line: 1665, column: 10, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1498, file: !3, line: 1665, column: 10)
!1505 = !DILocation(line: 1665, column: 16, scope: !1504)
!1506 = !DILocation(line: 1665, column: 19, scope: !1504)
!1507 = !DILocation(line: 1665, column: 30, scope: !1504)
!1508 = !DILocation(line: 1665, column: 28, scope: !1504)
!1509 = !DILocation(line: 1665, column: 10, scope: !1498)
!1510 = !DILocation(line: 1666, column: 19, scope: !1511)
!1511 = distinct !DILexicalBlock(scope: !1504, file: !3, line: 1665, column: 47)
!1512 = !DILocation(line: 1667, column: 9, scope: !1511)
!1513 = !DILocation(line: 1668, column: 6, scope: !1511)
!1514 = !DILocation(line: 1669, column: 17, scope: !1515)
!1515 = distinct !DILexicalBlock(scope: !1498, file: !3, line: 1669, column: 17)
!1516 = !DILocation(line: 1669, column: 17, scope: !1498)
!1517 = !DILocation(line: 1669, column: 24, scope: !1515)
!1518 = !DILocation(line: 1669, column: 54, scope: !1515)
!1519 = !DILocation(line: 1669, column: 52, scope: !1515)
!1520 = !DILocation(line: 1670, column: 6, scope: !1498)
!1521 = !DILocation(line: 1670, column: 6, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1523, file: !3, line: 1670, column: 6)
!1523 = distinct !DILexicalBlock(scope: !1498, file: !3, line: 1670, column: 6)
!1524 = !DILocation(line: 1670, column: 6, scope: !1523)
!1525 = !DILocation(line: 1671, column: 21, scope: !1498)
!1526 = !DILocation(line: 1672, column: 22, scope: !1498)
!1527 = !DILocation(line: 1673, column: 9, scope: !1498)
!1528 = !DILocation(line: 1677, column: 10, scope: !1529)
!1529 = distinct !DILexicalBlock(scope: !1530, file: !3, line: 1677, column: 10)
!1530 = distinct !DILexicalBlock(scope: !1495, file: !3, line: 1673, column: 16)
!1531 = !DILocation(line: 1677, column: 16, scope: !1529)
!1532 = !DILocation(line: 1677, column: 19, scope: !1529)
!1533 = !DILocation(line: 1677, column: 30, scope: !1529)
!1534 = !DILocation(line: 1677, column: 28, scope: !1529)
!1535 = !DILocation(line: 1677, column: 10, scope: !1530)
!1536 = !DILocation(line: 1679, column: 19, scope: !1537)
!1537 = distinct !DILexicalBlock(scope: !1529, file: !3, line: 1677, column: 47)
!1538 = !DILocation(line: 1680, column: 9, scope: !1537)
!1539 = !DILocation(line: 1681, column: 3, scope: !1537)
!1540 = !DILocation(line: 1681, column: 33, scope: !1537)
!1541 = !DILocation(line: 1681, column: 31, scope: !1537)
!1542 = !DILocation(line: 1682, column: 6, scope: !1537)
!1543 = !DILocation(line: 1683, column: 29, scope: !1530)
!1544 = !DILocation(line: 1684, column: 6, scope: !1530)
!1545 = !DILocation(line: 1684, column: 6, scope: !1546)
!1546 = distinct !DILexicalBlock(scope: !1547, file: !3, line: 1684, column: 6)
!1547 = distinct !DILexicalBlock(scope: !1530, file: !3, line: 1684, column: 6)
!1548 = !DILocation(line: 1684, column: 6, scope: !1547)
!1549 = !DILocation(line: 1685, column: 21, scope: !1530)
!1550 = !DILocation(line: 1686, column: 22, scope: !1530)
!1551 = !DILocation(line: 1695, column: 9, scope: !1389)
!1552 = !DILocation(line: 1695, column: 16, scope: !1389)
!1553 = !DILocation(line: 1695, column: 26, scope: !1389)
!1554 = !DILocation(line: 1695, column: 42, scope: !1389)
!1555 = !DILocation(line: 1695, column: 46, scope: !1389)
!1556 = !DILocation(line: 1695, column: 45, scope: !1389)
!1557 = !DILocation(line: 0, scope: !1389)
!1558 = !DILocation(line: 1695, column: 54, scope: !1389)
!1559 = distinct !{!1559, !1551, !1560}
!1560 = !DILocation(line: 1695, column: 66, scope: !1389)
!1561 = distinct !{!1561, !1385, !1562}
!1562 = !DILocation(line: 1696, column: 5, scope: !1366)
!1563 = !DILocation(line: 1697, column: 9, scope: !1564)
!1564 = distinct !DILexicalBlock(scope: !1366, file: !3, line: 1697, column: 9)
!1565 = !DILocation(line: 1697, column: 9, scope: !1366)
!1566 = !DILocation(line: 1697, column: 46, scope: !1564)
!1567 = !DILocation(line: 1697, column: 54, scope: !1564)
!1568 = !DILocation(line: 1697, column: 39, scope: !1564)
!1569 = !DILocation(line: 1697, column: 26, scope: !1564)
!1570 = !DILocation(line: 1699, column: 12, scope: !1366)
!1571 = !DILocation(line: 1699, column: 5, scope: !1366)
!1572 = !DILocation(line: 1700, column: 1, scope: !1366)
!1573 = distinct !DISubprogram(name: "deflate_fast", scope: !3, file: !3, line: 1496, type: !1367, scopeLine: 1497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1574 = !DILocalVariable(name: "hash_head", scope: !1573, file: !3, line: 1498, type: !21)
!1575 = !DILocation(line: 1498, column: 10, scope: !1573)
!1576 = !DILocalVariable(name: "flush", scope: !1573, file: !3, line: 1499, type: !12)
!1577 = !DILocation(line: 1499, column: 9, scope: !1573)
!1578 = !DILocalVariable(name: "match_length", scope: !1573, file: !3, line: 1500, type: !6)
!1579 = !DILocation(line: 1500, column: 14, scope: !1573)
!1580 = !DILocation(line: 1502, column: 17, scope: !1573)
!1581 = !DILocation(line: 1503, column: 5, scope: !1573)
!1582 = !DILocation(line: 1503, column: 12, scope: !1573)
!1583 = !DILocation(line: 1503, column: 22, scope: !1573)
!1584 = !DILocation(line: 1507, column: 9, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1573, file: !3, line: 1503, column: 28)
!1586 = !DILocation(line: 1512, column: 13, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1585, file: !3, line: 1512, column: 13)
!1588 = !DILocation(line: 1512, column: 23, scope: !1587)
!1589 = !DILocation(line: 1512, column: 30, scope: !1587)
!1590 = !DILocation(line: 1512, column: 33, scope: !1587)
!1591 = !DILocation(line: 1512, column: 44, scope: !1587)
!1592 = !DILocation(line: 1512, column: 42, scope: !1587)
!1593 = !DILocation(line: 1512, column: 54, scope: !1587)
!1594 = !DILocation(line: 1512, column: 66, scope: !1587)
!1595 = !DILocation(line: 1513, column: 6, scope: !1587)
!1596 = !DILocation(line: 1513, column: 18, scope: !1587)
!1597 = !DILocation(line: 1513, column: 30, scope: !1587)
!1598 = !DILocation(line: 1513, column: 15, scope: !1587)
!1599 = !DILocation(line: 1512, column: 13, scope: !1585)
!1600 = !DILocation(line: 1518, column: 43, scope: !1601)
!1601 = distinct !DILexicalBlock(scope: !1587, file: !3, line: 1513, column: 47)
!1602 = !DILocation(line: 1518, column: 28, scope: !1601)
!1603 = !DILocation(line: 1518, column: 26, scope: !1601)
!1604 = !DILocation(line: 1520, column: 17, scope: !1605)
!1605 = distinct !DILexicalBlock(scope: !1601, file: !3, line: 1520, column: 17)
!1606 = !DILocation(line: 1520, column: 32, scope: !1605)
!1607 = !DILocation(line: 1520, column: 30, scope: !1605)
!1608 = !DILocation(line: 1520, column: 17, scope: !1601)
!1609 = !DILocation(line: 1520, column: 58, scope: !1605)
!1610 = !DILocation(line: 1520, column: 56, scope: !1605)
!1611 = !DILocation(line: 1520, column: 43, scope: !1605)
!1612 = !DILocation(line: 1521, column: 9, scope: !1601)
!1613 = !DILocation(line: 1522, column: 13, scope: !1614)
!1614 = distinct !DILexicalBlock(scope: !1585, file: !3, line: 1522, column: 13)
!1615 = !DILocation(line: 1522, column: 26, scope: !1614)
!1616 = !DILocation(line: 1522, column: 13, scope: !1585)
!1617 = !DILocation(line: 1525, column: 30, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1614, file: !3, line: 1522, column: 40)
!1619 = !DILocation(line: 1525, column: 39, scope: !1618)
!1620 = !DILocation(line: 1525, column: 38, scope: !1618)
!1621 = !DILocation(line: 1525, column: 52, scope: !1618)
!1622 = !DILocation(line: 1525, column: 65, scope: !1618)
!1623 = !DILocation(line: 1525, column: 21, scope: !1618)
!1624 = !DILocation(line: 1525, column: 19, scope: !1618)
!1625 = !DILocation(line: 1527, column: 26, scope: !1618)
!1626 = !DILocation(line: 1527, column: 23, scope: !1618)
!1627 = !DILocation(line: 1529, column: 6, scope: !1618)
!1628 = !DILocation(line: 1529, column: 6, scope: !1629)
!1629 = distinct !DILexicalBlock(scope: !1630, file: !3, line: 1529, column: 6)
!1630 = distinct !DILexicalBlock(scope: !1618, file: !3, line: 1529, column: 6)
!1631 = !DILocation(line: 1529, column: 6, scope: !1630)
!1632 = !DILocation(line: 1533, column: 17, scope: !1633)
!1633 = distinct !DILexicalBlock(scope: !1618, file: !3, line: 1533, column: 17)
!1634 = !DILocation(line: 1533, column: 33, scope: !1633)
!1635 = !DILocation(line: 1533, column: 30, scope: !1633)
!1636 = !DILocation(line: 1533, column: 17, scope: !1618)
!1637 = !DILocation(line: 1534, column: 29, scope: !1638)
!1638 = distinct !DILexicalBlock(scope: !1633, file: !3, line: 1533, column: 52)
!1639 = !DILocation(line: 1535, column: 17, scope: !1638)
!1640 = !DILocation(line: 1536, column: 29, scope: !1641)
!1641 = distinct !DILexicalBlock(scope: !1638, file: !3, line: 1535, column: 20)
!1642 = !DILocation(line: 1537, column: 21, scope: !1641)
!1643 = !DILocation(line: 1543, column: 17, scope: !1641)
!1644 = !DILocation(line: 1543, column: 26, scope: !1638)
!1645 = !DILocation(line: 1543, column: 41, scope: !1638)
!1646 = distinct !{!1646, !1639, !1647}
!1647 = !DILocation(line: 1543, column: 45, scope: !1638)
!1648 = !DILocation(line: 1544, column: 18, scope: !1638)
!1649 = !DILocation(line: 1545, column: 13, scope: !1638)
!1650 = !DILocation(line: 1546, column: 22, scope: !1651)
!1651 = distinct !DILexicalBlock(scope: !1633, file: !3, line: 1545, column: 20)
!1652 = !DILocation(line: 1546, column: 19, scope: !1651)
!1653 = !DILocation(line: 1547, column: 23, scope: !1651)
!1654 = !DILocation(line: 1548, column: 25, scope: !1651)
!1655 = !DILocation(line: 1548, column: 18, scope: !1651)
!1656 = !DILocation(line: 1548, column: 16, scope: !1651)
!1657 = !DILocation(line: 1549, column: 10, scope: !1651)
!1658 = !DILocation(line: 1554, column: 9, scope: !1618)
!1659 = !DILocation(line: 1557, column: 41, scope: !1660)
!1660 = distinct !DILexicalBlock(scope: !1614, file: !3, line: 1554, column: 16)
!1661 = !DILocation(line: 1557, column: 34, scope: !1660)
!1662 = !DILocation(line: 1557, column: 21, scope: !1660)
!1663 = !DILocation(line: 1557, column: 19, scope: !1660)
!1664 = !DILocation(line: 1558, column: 6, scope: !1660)
!1665 = !DILocation(line: 1558, column: 6, scope: !1666)
!1666 = distinct !DILexicalBlock(scope: !1667, file: !3, line: 1558, column: 6)
!1667 = distinct !DILexicalBlock(scope: !1660, file: !3, line: 1558, column: 6)
!1668 = !DILocation(line: 1558, column: 6, scope: !1667)
!1669 = !DILocation(line: 1559, column: 22, scope: !1660)
!1670 = !DILocation(line: 1560, column: 14, scope: !1660)
!1671 = !DILocation(line: 1562, column: 6, scope: !1672)
!1672 = distinct !DILexicalBlock(scope: !1585, file: !3, line: 1562, column: 6)
!1673 = !DILocation(line: 1562, column: 12, scope: !1672)
!1674 = !DILocation(line: 1562, column: 15, scope: !1672)
!1675 = !DILocation(line: 1562, column: 26, scope: !1672)
!1676 = !DILocation(line: 1562, column: 24, scope: !1672)
!1677 = !DILocation(line: 1562, column: 6, scope: !1585)
!1678 = !DILocation(line: 1563, column: 22, scope: !1679)
!1679 = distinct !DILexicalBlock(scope: !1672, file: !3, line: 1562, column: 43)
!1680 = !DILocation(line: 1564, column: 12, scope: !1679)
!1681 = !DILocation(line: 1565, column: 2, scope: !1679)
!1682 = !DILocation(line: 1566, column: 13, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1585, file: !3, line: 1566, column: 13)
!1684 = !DILocation(line: 1566, column: 13, scope: !1585)
!1685 = !DILocation(line: 1566, column: 20, scope: !1683)
!1686 = !DILocation(line: 1566, column: 50, scope: !1683)
!1687 = !DILocation(line: 1566, column: 48, scope: !1683)
!1688 = !DILocation(line: 1573, column: 9, scope: !1585)
!1689 = !DILocation(line: 1573, column: 16, scope: !1585)
!1690 = !DILocation(line: 1573, column: 26, scope: !1585)
!1691 = !DILocation(line: 1573, column: 42, scope: !1585)
!1692 = !DILocation(line: 1573, column: 46, scope: !1585)
!1693 = !DILocation(line: 1573, column: 45, scope: !1585)
!1694 = !DILocation(line: 0, scope: !1585)
!1695 = !DILocation(line: 1573, column: 54, scope: !1585)
!1696 = distinct !{!1696, !1688, !1697}
!1697 = !DILocation(line: 1573, column: 66, scope: !1585)
!1698 = distinct !{!1698, !1581, !1699}
!1699 = !DILocation(line: 1575, column: 5, scope: !1573)
!1700 = !DILocation(line: 1576, column: 12, scope: !1573)
!1701 = !DILocation(line: 1576, column: 5, scope: !1573)
!1702 = distinct !DISubprogram(name: "longest_match", scope: !3, file: !3, line: 1238, type: !1703, scopeLine: 1240, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1703 = !DISubroutineType(types: !1704)
!1704 = !{!12, !21}
!1705 = !DILocalVariable(name: "cur_match", arg: 1, scope: !1702, file: !3, line: 1239, type: !21)
!1706 = !DILocation(line: 1239, column: 10, scope: !1702)
!1707 = !DILocalVariable(name: "chain_length", scope: !1702, file: !3, line: 1241, type: !6)
!1708 = !DILocation(line: 1241, column: 14, scope: !1702)
!1709 = !DILocation(line: 1241, column: 29, scope: !1702)
!1710 = !DILocalVariable(name: "scan", scope: !1702, file: !3, line: 1242, type: !85)
!1711 = !DILocation(line: 1242, column: 19, scope: !1702)
!1712 = !DILocation(line: 1242, column: 35, scope: !1702)
!1713 = !DILocation(line: 1242, column: 33, scope: !1702)
!1714 = !DILocalVariable(name: "match", scope: !1702, file: !3, line: 1243, type: !85)
!1715 = !DILocation(line: 1243, column: 19, scope: !1702)
!1716 = !DILocalVariable(name: "len", scope: !1702, file: !3, line: 1244, type: !12)
!1717 = !DILocation(line: 1244, column: 18, scope: !1702)
!1718 = !DILocalVariable(name: "best_len", scope: !1702, file: !3, line: 1245, type: !12)
!1719 = !DILocation(line: 1245, column: 9, scope: !1702)
!1720 = !DILocation(line: 1245, column: 20, scope: !1702)
!1721 = !DILocalVariable(name: "limit", scope: !1702, file: !3, line: 1246, type: !21)
!1722 = !DILocation(line: 1246, column: 10, scope: !1702)
!1723 = !DILocation(line: 1246, column: 18, scope: !1702)
!1724 = !DILocation(line: 1246, column: 27, scope: !1702)
!1725 = !DILocation(line: 1246, column: 46, scope: !1702)
!1726 = !DILocation(line: 1246, column: 55, scope: !1702)
!1727 = !DILocalVariable(name: "strend", scope: !1702, file: !3, line: 1266, type: !85)
!1728 = !DILocation(line: 1266, column: 19, scope: !1702)
!1729 = !DILocation(line: 1266, column: 37, scope: !1702)
!1730 = !DILocation(line: 1266, column: 35, scope: !1702)
!1731 = !DILocation(line: 1266, column: 46, scope: !1702)
!1732 = !DILocalVariable(name: "scan_end1", scope: !1702, file: !3, line: 1267, type: !13)
!1733 = !DILocation(line: 1267, column: 18, scope: !1702)
!1734 = !DILocation(line: 1267, column: 31, scope: !1702)
!1735 = !DILocation(line: 1267, column: 36, scope: !1702)
!1736 = !DILocation(line: 1267, column: 44, scope: !1702)
!1737 = !DILocalVariable(name: "scan_end", scope: !1702, file: !3, line: 1268, type: !13)
!1738 = !DILocation(line: 1268, column: 18, scope: !1702)
!1739 = !DILocation(line: 1268, column: 31, scope: !1702)
!1740 = !DILocation(line: 1268, column: 36, scope: !1702)
!1741 = !DILocation(line: 1272, column: 9, scope: !1742)
!1742 = distinct !DILexicalBlock(scope: !1702, file: !3, line: 1272, column: 9)
!1743 = !DILocation(line: 1272, column: 24, scope: !1742)
!1744 = !DILocation(line: 1272, column: 21, scope: !1742)
!1745 = !DILocation(line: 1272, column: 9, scope: !1702)
!1746 = !DILocation(line: 1273, column: 22, scope: !1747)
!1747 = distinct !DILexicalBlock(scope: !1742, file: !3, line: 1272, column: 36)
!1748 = !DILocation(line: 1274, column: 5, scope: !1747)
!1749 = !DILocation(line: 1277, column: 5, scope: !1702)
!1750 = !DILocation(line: 1279, column: 26, scope: !1751)
!1751 = distinct !DILexicalBlock(scope: !1702, file: !3, line: 1277, column: 8)
!1752 = !DILocation(line: 1279, column: 24, scope: !1751)
!1753 = !DILocation(line: 1279, column: 15, scope: !1751)
!1754 = !DILocation(line: 1318, column: 13, scope: !1755)
!1755 = distinct !DILexicalBlock(scope: !1751, file: !3, line: 1318, column: 13)
!1756 = !DILocation(line: 1318, column: 19, scope: !1755)
!1757 = !DILocation(line: 1318, column: 34, scope: !1755)
!1758 = !DILocation(line: 1318, column: 31, scope: !1755)
!1759 = !DILocation(line: 1318, column: 44, scope: !1755)
!1760 = !DILocation(line: 1319, column: 13, scope: !1755)
!1761 = !DILocation(line: 1319, column: 19, scope: !1755)
!1762 = !DILocation(line: 1319, column: 27, scope: !1755)
!1763 = !DILocation(line: 1319, column: 34, scope: !1755)
!1764 = !DILocation(line: 1319, column: 31, scope: !1755)
!1765 = !DILocation(line: 1319, column: 44, scope: !1755)
!1766 = !DILocation(line: 1320, column: 14, scope: !1755)
!1767 = !DILocation(line: 1320, column: 13, scope: !1755)
!1768 = !DILocation(line: 1320, column: 35, scope: !1755)
!1769 = !DILocation(line: 1320, column: 34, scope: !1755)
!1770 = !DILocation(line: 1320, column: 31, scope: !1755)
!1771 = !DILocation(line: 1320, column: 44, scope: !1755)
!1772 = !DILocation(line: 1321, column: 14, scope: !1755)
!1773 = !DILocation(line: 1321, column: 13, scope: !1755)
!1774 = !DILocation(line: 1321, column: 34, scope: !1755)
!1775 = !DILocation(line: 1321, column: 31, scope: !1755)
!1776 = !DILocation(line: 1318, column: 13, scope: !1751)
!1777 = !DILocation(line: 1321, column: 48, scope: !1755)
!1778 = !DILocation(line: 1329, column: 14, scope: !1751)
!1779 = !DILocation(line: 1329, column: 25, scope: !1751)
!1780 = !DILocation(line: 1334, column: 9, scope: !1751)
!1781 = !DILocation(line: 1335, column: 9, scope: !1782)
!1782 = distinct !DILexicalBlock(scope: !1751, file: !3, line: 1334, column: 12)
!1783 = !DILocation(line: 1335, column: 19, scope: !1751)
!1784 = !DILocation(line: 1335, column: 18, scope: !1751)
!1785 = !DILocation(line: 1335, column: 30, scope: !1751)
!1786 = !DILocation(line: 1335, column: 29, scope: !1751)
!1787 = !DILocation(line: 1335, column: 26, scope: !1751)
!1788 = !DILocation(line: 1335, column: 38, scope: !1751)
!1789 = !DILocation(line: 1335, column: 42, scope: !1751)
!1790 = !DILocation(line: 1335, column: 41, scope: !1751)
!1791 = !DILocation(line: 1335, column: 53, scope: !1751)
!1792 = !DILocation(line: 1335, column: 52, scope: !1751)
!1793 = !DILocation(line: 1335, column: 49, scope: !1751)
!1794 = !DILocation(line: 1335, column: 61, scope: !1751)
!1795 = !DILocation(line: 1336, column: 19, scope: !1751)
!1796 = !DILocation(line: 1336, column: 18, scope: !1751)
!1797 = !DILocation(line: 1336, column: 30, scope: !1751)
!1798 = !DILocation(line: 1336, column: 29, scope: !1751)
!1799 = !DILocation(line: 1336, column: 26, scope: !1751)
!1800 = !DILocation(line: 1336, column: 38, scope: !1751)
!1801 = !DILocation(line: 1336, column: 42, scope: !1751)
!1802 = !DILocation(line: 1336, column: 41, scope: !1751)
!1803 = !DILocation(line: 1336, column: 53, scope: !1751)
!1804 = !DILocation(line: 1336, column: 52, scope: !1751)
!1805 = !DILocation(line: 1336, column: 49, scope: !1751)
!1806 = !DILocation(line: 1336, column: 61, scope: !1751)
!1807 = !DILocation(line: 1337, column: 19, scope: !1751)
!1808 = !DILocation(line: 1337, column: 18, scope: !1751)
!1809 = !DILocation(line: 1337, column: 30, scope: !1751)
!1810 = !DILocation(line: 1337, column: 29, scope: !1751)
!1811 = !DILocation(line: 1337, column: 26, scope: !1751)
!1812 = !DILocation(line: 1337, column: 38, scope: !1751)
!1813 = !DILocation(line: 1337, column: 42, scope: !1751)
!1814 = !DILocation(line: 1337, column: 41, scope: !1751)
!1815 = !DILocation(line: 1337, column: 53, scope: !1751)
!1816 = !DILocation(line: 1337, column: 52, scope: !1751)
!1817 = !DILocation(line: 1337, column: 49, scope: !1751)
!1818 = !DILocation(line: 1337, column: 61, scope: !1751)
!1819 = !DILocation(line: 1338, column: 19, scope: !1751)
!1820 = !DILocation(line: 1338, column: 18, scope: !1751)
!1821 = !DILocation(line: 1338, column: 30, scope: !1751)
!1822 = !DILocation(line: 1338, column: 29, scope: !1751)
!1823 = !DILocation(line: 1338, column: 26, scope: !1751)
!1824 = !DILocation(line: 1338, column: 38, scope: !1751)
!1825 = !DILocation(line: 1338, column: 42, scope: !1751)
!1826 = !DILocation(line: 1338, column: 41, scope: !1751)
!1827 = !DILocation(line: 1338, column: 53, scope: !1751)
!1828 = !DILocation(line: 1338, column: 52, scope: !1751)
!1829 = !DILocation(line: 1338, column: 49, scope: !1751)
!1830 = !DILocation(line: 1338, column: 61, scope: !1751)
!1831 = !DILocation(line: 1339, column: 18, scope: !1751)
!1832 = !DILocation(line: 1339, column: 25, scope: !1751)
!1833 = !DILocation(line: 1339, column: 23, scope: !1751)
!1834 = !DILocation(line: 0, scope: !1751)
!1835 = distinct !{!1835, !1780, !1836}
!1836 = !DILocation(line: 1339, column: 31, scope: !1751)
!1837 = !DILocation(line: 1341, column: 33, scope: !1751)
!1838 = !DILocation(line: 1341, column: 42, scope: !1751)
!1839 = !DILocation(line: 1341, column: 40, scope: !1751)
!1840 = !DILocation(line: 1341, column: 27, scope: !1751)
!1841 = !DILocation(line: 1341, column: 25, scope: !1751)
!1842 = !DILocation(line: 1341, column: 13, scope: !1751)
!1843 = !DILocation(line: 1342, column: 16, scope: !1751)
!1844 = !DILocation(line: 1342, column: 23, scope: !1751)
!1845 = !DILocation(line: 1342, column: 14, scope: !1751)
!1846 = !DILocation(line: 1346, column: 13, scope: !1847)
!1847 = distinct !DILexicalBlock(scope: !1751, file: !3, line: 1346, column: 13)
!1848 = !DILocation(line: 1346, column: 19, scope: !1847)
!1849 = !DILocation(line: 1346, column: 17, scope: !1847)
!1850 = !DILocation(line: 1346, column: 13, scope: !1751)
!1851 = !DILocation(line: 1347, column: 27, scope: !1852)
!1852 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1346, column: 29)
!1853 = !DILocation(line: 1347, column: 25, scope: !1852)
!1854 = !DILocation(line: 1348, column: 24, scope: !1852)
!1855 = !DILocation(line: 1348, column: 22, scope: !1852)
!1856 = !DILocation(line: 1349, column: 17, scope: !1857)
!1857 = distinct !DILexicalBlock(scope: !1852, file: !3, line: 1349, column: 17)
!1858 = !DILocation(line: 1349, column: 24, scope: !1857)
!1859 = !DILocation(line: 1349, column: 21, scope: !1857)
!1860 = !DILocation(line: 1349, column: 17, scope: !1852)
!1861 = !DILocation(line: 1349, column: 36, scope: !1857)
!1862 = !DILocation(line: 1353, column: 26, scope: !1852)
!1863 = !DILocation(line: 1353, column: 31, scope: !1852)
!1864 = !DILocation(line: 1353, column: 39, scope: !1852)
!1865 = !DILocation(line: 1353, column: 24, scope: !1852)
!1866 = !DILocation(line: 1354, column: 26, scope: !1852)
!1867 = !DILocation(line: 1354, column: 31, scope: !1852)
!1868 = !DILocation(line: 1354, column: 24, scope: !1852)
!1869 = !DILocation(line: 1356, column: 9, scope: !1852)
!1870 = !DILocation(line: 1357, column: 5, scope: !1751)
!1871 = !DILocation(line: 1357, column: 32, scope: !1702)
!1872 = !DILocation(line: 1357, column: 42, scope: !1702)
!1873 = !DILocation(line: 1357, column: 27, scope: !1702)
!1874 = !DILocation(line: 1357, column: 25, scope: !1702)
!1875 = !DILocation(line: 1357, column: 54, scope: !1702)
!1876 = !DILocation(line: 1357, column: 52, scope: !1702)
!1877 = !DILocation(line: 1358, column: 7, scope: !1702)
!1878 = !DILocation(line: 1358, column: 10, scope: !1702)
!1879 = !DILocation(line: 1358, column: 25, scope: !1702)
!1880 = !DILocation(line: 0, scope: !1702)
!1881 = distinct !{!1881, !1749, !1882}
!1882 = !DILocation(line: 1358, column: 29, scope: !1702)
!1883 = !DILocation(line: 1360, column: 12, scope: !1702)
!1884 = !DILocation(line: 1360, column: 5, scope: !1702)
!1885 = distinct !DISubprogram(name: "ct_tally", scope: !3, file: !3, line: 6599, type: !200, scopeLine: 6602, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!1886 = !DILocalVariable(name: "dist", arg: 1, scope: !1885, file: !3, line: 6600, type: !12)
!1887 = !DILocation(line: 6600, column: 9, scope: !1885)
!1888 = !DILocalVariable(name: "lc", arg: 2, scope: !1885, file: !3, line: 6601, type: !12)
!1889 = !DILocation(line: 6601, column: 9, scope: !1885)
!1890 = !DILocation(line: 6603, column: 30, scope: !1885)
!1891 = !DILocation(line: 6603, column: 25, scope: !1885)
!1892 = !DILocation(line: 6603, column: 19, scope: !1885)
!1893 = !DILocation(line: 6603, column: 5, scope: !1885)
!1894 = !DILocation(line: 6603, column: 23, scope: !1885)
!1895 = !DILocation(line: 6604, column: 9, scope: !1896)
!1896 = distinct !DILexicalBlock(scope: !1885, file: !3, line: 6604, column: 9)
!1897 = !DILocation(line: 6604, column: 14, scope: !1896)
!1898 = !DILocation(line: 6604, column: 9, scope: !1885)
!1899 = !DILocation(line: 6606, column: 19, scope: !1900)
!1900 = distinct !DILexicalBlock(scope: !1896, file: !3, line: 6604, column: 20)
!1901 = !DILocation(line: 6606, column: 9, scope: !1900)
!1902 = !DILocation(line: 6606, column: 23, scope: !1900)
!1903 = !DILocation(line: 6606, column: 27, scope: !1900)
!1904 = !DILocation(line: 6607, column: 5, scope: !1900)
!1905 = !DILocation(line: 6609, column: 13, scope: !1906)
!1906 = distinct !DILexicalBlock(scope: !1896, file: !3, line: 6607, column: 12)
!1907 = !DILocation(line: 6614, column: 31, scope: !1906)
!1908 = !DILocation(line: 6614, column: 19, scope: !1906)
!1909 = !DILocation(line: 6614, column: 34, scope: !1906)
!1910 = !DILocation(line: 6614, column: 43, scope: !1906)
!1911 = !DILocation(line: 6614, column: 9, scope: !1906)
!1912 = !DILocation(line: 6614, column: 47, scope: !1906)
!1913 = !DILocation(line: 6614, column: 51, scope: !1906)
!1914 = !DILocation(line: 6615, column: 19, scope: !1906)
!1915 = !DILocation(line: 6615, column: 9, scope: !1906)
!1916 = !DILocation(line: 6615, column: 33, scope: !1906)
!1917 = !DILocation(line: 6615, column: 37, scope: !1906)
!1918 = !DILocation(line: 6617, column: 35, scope: !1906)
!1919 = !DILocation(line: 6617, column: 30, scope: !1906)
!1920 = !DILocation(line: 6617, column: 24, scope: !1906)
!1921 = !DILocation(line: 6617, column: 9, scope: !1906)
!1922 = !DILocation(line: 6617, column: 28, scope: !1906)
!1923 = !DILocation(line: 6618, column: 18, scope: !1906)
!1924 = !DILocation(line: 6618, column: 15, scope: !1906)
!1925 = !DILocation(line: 6620, column: 14, scope: !1885)
!1926 = !DILocation(line: 6623, column: 10, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1885, file: !3, line: 6623, column: 9)
!1928 = !DILocation(line: 6623, column: 19, scope: !1927)
!1929 = !DILocation(line: 6623, column: 24, scope: !1927)
!1930 = !DILocation(line: 6623, column: 9, scope: !1885)
!1931 = !DILocation(line: 6624, column: 34, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1927, file: !3, line: 6623, column: 30)
!1933 = !DILocation(line: 6624, column: 28, scope: !1932)
!1934 = !DILocation(line: 6624, column: 9, scope: !1932)
!1935 = !DILocation(line: 6624, column: 32, scope: !1932)
!1936 = !DILocation(line: 6625, column: 15, scope: !1932)
!1937 = !DILocation(line: 6625, column: 29, scope: !1932)
!1938 = !DILocation(line: 6626, column: 5, scope: !1932)
!1939 = !DILocation(line: 6628, column: 9, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1885, file: !3, line: 6628, column: 9)
!1941 = !DILocation(line: 6628, column: 15, scope: !1940)
!1942 = !DILocation(line: 6628, column: 19, scope: !1940)
!1943 = !DILocation(line: 6628, column: 23, scope: !1940)
!1944 = !DILocation(line: 6628, column: 32, scope: !1940)
!1945 = !DILocation(line: 6628, column: 41, scope: !1940)
!1946 = !DILocation(line: 6628, column: 9, scope: !1885)
!1947 = !DILocalVariable(name: "out_length", scope: !1948, file: !3, line: 6630, type: !51)
!1948 = distinct !DILexicalBlock(scope: !1940, file: !3, line: 6628, column: 47)
!1949 = !DILocation(line: 6630, column: 13, scope: !1948)
!1950 = !DILocation(line: 6630, column: 31, scope: !1948)
!1951 = !DILocation(line: 6630, column: 26, scope: !1948)
!1952 = !DILocation(line: 6630, column: 39, scope: !1948)
!1953 = !DILocalVariable(name: "in_length", scope: !1948, file: !3, line: 6631, type: !51)
!1954 = !DILocation(line: 6631, column: 13, scope: !1948)
!1955 = !DILocation(line: 6631, column: 30, scope: !1948)
!1956 = !DILocation(line: 6631, column: 25, scope: !1948)
!1957 = !DILocation(line: 6631, column: 39, scope: !1948)
!1958 = !DILocation(line: 6631, column: 38, scope: !1948)
!1959 = !DILocalVariable(name: "dcode", scope: !1948, file: !3, line: 6632, type: !12)
!1960 = !DILocation(line: 6632, column: 13, scope: !1948)
!1961 = !DILocation(line: 6633, column: 20, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1948, file: !3, line: 6633, column: 9)
!1963 = !DILocation(line: 6633, column: 14, scope: !1962)
!1964 = !DILocation(line: 6633, column: 25, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1962, file: !3, line: 6633, column: 9)
!1966 = !DILocation(line: 6633, column: 31, scope: !1965)
!1967 = !DILocation(line: 6633, column: 9, scope: !1962)
!1968 = !DILocation(line: 6634, column: 42, scope: !1969)
!1969 = distinct !DILexicalBlock(scope: !1965, file: !3, line: 6633, column: 51)
!1970 = !DILocation(line: 6634, column: 32, scope: !1969)
!1971 = !DILocation(line: 6634, column: 49, scope: !1969)
!1972 = !DILocation(line: 6634, column: 27, scope: !1969)
!1973 = !DILocation(line: 6634, column: 70, scope: !1969)
!1974 = !DILocation(line: 6634, column: 58, scope: !1969)
!1975 = !DILocation(line: 6634, column: 57, scope: !1969)
!1976 = !DILocation(line: 6634, column: 53, scope: !1969)
!1977 = !DILocation(line: 6634, column: 24, scope: !1969)
!1978 = !DILocation(line: 6635, column: 9, scope: !1969)
!1979 = !DILocation(line: 6633, column: 47, scope: !1965)
!1980 = !DILocation(line: 6633, column: 9, scope: !1965)
!1981 = distinct !{!1981, !1967, !1982}
!1982 = !DILocation(line: 6635, column: 9, scope: !1962)
!1983 = !DILocation(line: 6636, column: 20, scope: !1948)
!1984 = !DILocation(line: 6640, column: 13, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1948, file: !3, line: 6640, column: 13)
!1986 = !DILocation(line: 6640, column: 25, scope: !1985)
!1987 = !DILocation(line: 6640, column: 33, scope: !1985)
!1988 = !DILocation(line: 6640, column: 23, scope: !1985)
!1989 = !DILocation(line: 6640, column: 36, scope: !1985)
!1990 = !DILocation(line: 6640, column: 39, scope: !1985)
!1991 = !DILocation(line: 6640, column: 52, scope: !1985)
!1992 = !DILocation(line: 6640, column: 61, scope: !1985)
!1993 = !DILocation(line: 6640, column: 50, scope: !1985)
!1994 = !DILocation(line: 6640, column: 13, scope: !1948)
!1995 = !DILocation(line: 6640, column: 65, scope: !1985)
!1996 = !DILocation(line: 6641, column: 5, scope: !1948)
!1997 = !DILocation(line: 6642, column: 13, scope: !1885)
!1998 = !DILocation(line: 6642, column: 22, scope: !1885)
!1999 = !DILocation(line: 6642, column: 39, scope: !1885)
!2000 = !DILocation(line: 6642, column: 42, scope: !1885)
!2001 = !DILocation(line: 6642, column: 52, scope: !1885)
!2002 = !DILocation(line: 6642, column: 5, scope: !1885)
!2003 = !DILocation(line: 6647, column: 1, scope: !1885)
!2004 = distinct !DISubprogram(name: "rsync_roll", scope: !3, file: !3, line: 1449, type: !2005, scopeLine: 1452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2005 = !DISubroutineType(types: !2006)
!2006 = !{null, !6, !6}
!2007 = !DILocalVariable(name: "start", arg: 1, scope: !2004, file: !3, line: 1450, type: !6)
!2008 = !DILocation(line: 1450, column: 14, scope: !2004)
!2009 = !DILocalVariable(name: "num", arg: 2, scope: !2004, file: !3, line: 1451, type: !6)
!2010 = !DILocation(line: 1451, column: 14, scope: !2004)
!2011 = !DILocalVariable(name: "i", scope: !2004, file: !3, line: 1453, type: !6)
!2012 = !DILocation(line: 1453, column: 14, scope: !2004)
!2013 = !DILocation(line: 1455, column: 9, scope: !2014)
!2014 = distinct !DILexicalBlock(scope: !2004, file: !3, line: 1455, column: 9)
!2015 = !DILocation(line: 1455, column: 15, scope: !2014)
!2016 = !DILocation(line: 1455, column: 9, scope: !2004)
!2017 = !DILocation(line: 1457, column: 11, scope: !2018)
!2018 = distinct !DILexicalBlock(scope: !2019, file: !3, line: 1457, column: 2)
!2019 = distinct !DILexicalBlock(scope: !2014, file: !3, line: 1455, column: 28)
!2020 = !DILocation(line: 1457, column: 9, scope: !2018)
!2021 = !DILocation(line: 1457, column: 7, scope: !2018)
!2022 = !DILocation(line: 1457, column: 18, scope: !2023)
!2023 = distinct !DILexicalBlock(scope: !2018, file: !3, line: 1457, column: 2)
!2024 = !DILocation(line: 1457, column: 20, scope: !2023)
!2025 = !DILocation(line: 1457, column: 2, scope: !2018)
!2026 = !DILocation(line: 1458, column: 10, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2028, file: !3, line: 1458, column: 10)
!2028 = distinct !DILexicalBlock(scope: !2023, file: !3, line: 1457, column: 38)
!2029 = !DILocation(line: 1458, column: 15, scope: !2027)
!2030 = !DILocation(line: 1458, column: 23, scope: !2027)
!2031 = !DILocation(line: 1458, column: 21, scope: !2027)
!2032 = !DILocation(line: 1458, column: 12, scope: !2027)
!2033 = !DILocation(line: 1458, column: 10, scope: !2028)
!2034 = !DILocation(line: 1458, column: 28, scope: !2027)
!2035 = !DILocation(line: 1459, column: 31, scope: !2028)
!2036 = !DILocation(line: 1459, column: 24, scope: !2028)
!2037 = !DILocation(line: 1459, column: 19, scope: !2028)
!2038 = !DILocation(line: 1459, column: 16, scope: !2028)
!2039 = !DILocation(line: 1460, column: 2, scope: !2028)
!2040 = !DILocation(line: 1457, column: 34, scope: !2023)
!2041 = !DILocation(line: 1457, column: 2, scope: !2023)
!2042 = distinct !{!2042, !2025, !2043}
!2043 = !DILocation(line: 1460, column: 2, scope: !2018)
!2044 = !DILocation(line: 1461, column: 22, scope: !2019)
!2045 = !DILocation(line: 1461, column: 20, scope: !2019)
!2046 = !DILocation(line: 1461, column: 6, scope: !2019)
!2047 = !DILocation(line: 1462, column: 8, scope: !2019)
!2048 = !DILocation(line: 1463, column: 5, scope: !2019)
!2049 = !DILocation(line: 1466, column: 14, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2004, file: !3, line: 1466, column: 5)
!2051 = !DILocation(line: 1466, column: 12, scope: !2050)
!2052 = !DILocation(line: 1466, column: 10, scope: !2050)
!2053 = !DILocation(line: 1466, column: 21, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2050, file: !3, line: 1466, column: 5)
!2055 = !DILocation(line: 1466, column: 25, scope: !2054)
!2056 = !DILocation(line: 1466, column: 31, scope: !2054)
!2057 = !DILocation(line: 1466, column: 30, scope: !2054)
!2058 = !DILocation(line: 1466, column: 23, scope: !2054)
!2059 = !DILocation(line: 1466, column: 5, scope: !2050)
!2060 = !DILocation(line: 1468, column: 27, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2054, file: !3, line: 1466, column: 41)
!2062 = !DILocation(line: 1468, column: 20, scope: !2061)
!2063 = !DILocation(line: 1468, column: 15, scope: !2061)
!2064 = !DILocation(line: 1468, column: 12, scope: !2061)
!2065 = !DILocation(line: 1470, column: 27, scope: !2061)
!2066 = !DILocation(line: 1470, column: 29, scope: !2061)
!2067 = !DILocation(line: 1470, column: 20, scope: !2061)
!2068 = !DILocation(line: 1470, column: 15, scope: !2061)
!2069 = !DILocation(line: 1470, column: 12, scope: !2061)
!2070 = !DILocation(line: 1471, column: 6, scope: !2071)
!2071 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 1471, column: 6)
!2072 = !DILocation(line: 1471, column: 22, scope: !2071)
!2073 = !DILocation(line: 1471, column: 38, scope: !2071)
!2074 = !DILocation(line: 1471, column: 41, scope: !2071)
!2075 = !DILocation(line: 1471, column: 6, scope: !2061)
!2076 = !DILocation(line: 1472, column: 24, scope: !2071)
!2077 = !DILocation(line: 1472, column: 22, scope: !2071)
!2078 = !DILocation(line: 1472, column: 6, scope: !2071)
!2079 = !DILocation(line: 1473, column: 5, scope: !2061)
!2080 = !DILocation(line: 1466, column: 37, scope: !2054)
!2081 = !DILocation(line: 1466, column: 5, scope: !2054)
!2082 = distinct !{!2082, !2059, !2083}
!2083 = !DILocation(line: 1473, column: 5, scope: !2050)
!2084 = !DILocation(line: 1474, column: 1, scope: !2004)
!2085 = distinct !DISubprogram(name: "flush_block", scope: !3, file: !3, line: 6491, type: !2086, scopeLine: 6496, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2086 = !DISubroutineType(types: !2087)
!2087 = !{!79, !19, !51, !12, !12}
!2088 = !DILocalVariable(name: "buf", arg: 1, scope: !2085, file: !3, line: 6492, type: !19)
!2089 = !DILocation(line: 6492, column: 11, scope: !2085)
!2090 = !DILocalVariable(name: "stored_len", arg: 2, scope: !2085, file: !3, line: 6493, type: !51)
!2091 = !DILocation(line: 6493, column: 9, scope: !2085)
!2092 = !DILocalVariable(name: "pad", arg: 3, scope: !2085, file: !3, line: 6494, type: !12)
!2093 = !DILocation(line: 6494, column: 9, scope: !2085)
!2094 = !DILocalVariable(name: "eof", arg: 4, scope: !2085, file: !3, line: 6495, type: !12)
!2095 = !DILocation(line: 6495, column: 9, scope: !2085)
!2096 = !DILocalVariable(name: "opt_lenb", scope: !2085, file: !3, line: 6497, type: !51)
!2097 = !DILocation(line: 6497, column: 9, scope: !2085)
!2098 = !DILocalVariable(name: "static_lenb", scope: !2085, file: !3, line: 6497, type: !51)
!2099 = !DILocation(line: 6497, column: 19, scope: !2085)
!2100 = !DILocalVariable(name: "max_blindex", scope: !2085, file: !3, line: 6498, type: !12)
!2101 = !DILocation(line: 6498, column: 9, scope: !2085)
!2102 = !DILocation(line: 6500, column: 28, scope: !2085)
!2103 = !DILocation(line: 6500, column: 14, scope: !2085)
!2104 = !DILocation(line: 6500, column: 5, scope: !2085)
!2105 = !DILocation(line: 6500, column: 26, scope: !2085)
!2106 = !DILocation(line: 6503, column: 10, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2085, file: !3, line: 6503, column: 9)
!2108 = !DILocation(line: 6503, column: 9, scope: !2107)
!2109 = !DILocation(line: 6503, column: 20, scope: !2107)
!2110 = !DILocation(line: 6503, column: 9, scope: !2085)
!2111 = !DILocation(line: 6503, column: 37, scope: !2107)
!2112 = !DILocation(line: 6506, column: 5, scope: !2085)
!2113 = !DILocation(line: 6509, column: 5, scope: !2085)
!2114 = !DILocation(line: 6518, column: 19, scope: !2085)
!2115 = !DILocation(line: 6518, column: 17, scope: !2085)
!2116 = !DILocation(line: 6521, column: 17, scope: !2085)
!2117 = !DILocation(line: 6521, column: 24, scope: !2085)
!2118 = !DILocation(line: 6521, column: 26, scope: !2085)
!2119 = !DILocation(line: 6521, column: 29, scope: !2085)
!2120 = !DILocation(line: 6521, column: 14, scope: !2085)
!2121 = !DILocation(line: 6522, column: 20, scope: !2085)
!2122 = !DILocation(line: 6522, column: 30, scope: !2085)
!2123 = !DILocation(line: 6522, column: 32, scope: !2085)
!2124 = !DILocation(line: 6522, column: 35, scope: !2085)
!2125 = !DILocation(line: 6522, column: 17, scope: !2085)
!2126 = !DILocation(line: 6523, column: 18, scope: !2085)
!2127 = !DILocation(line: 6523, column: 15, scope: !2085)
!2128 = !DILocation(line: 6529, column: 9, scope: !2129)
!2129 = distinct !DILexicalBlock(scope: !2085, file: !3, line: 6529, column: 9)
!2130 = !DILocation(line: 6529, column: 24, scope: !2129)
!2131 = !DILocation(line: 6529, column: 21, scope: !2129)
!2132 = !DILocation(line: 6529, column: 9, scope: !2085)
!2133 = !DILocation(line: 6529, column: 45, scope: !2129)
!2134 = !DILocation(line: 6529, column: 43, scope: !2129)
!2135 = !DILocation(line: 6529, column: 34, scope: !2129)
!2136 = !DILocation(line: 6538, column: 9, scope: !2137)
!2137 = distinct !DILexicalBlock(scope: !2085, file: !3, line: 6538, column: 9)
!2138 = !DILocation(line: 6538, column: 23, scope: !2137)
!2139 = !DILocation(line: 6538, column: 20, scope: !2137)
!2140 = !DILocation(line: 6538, column: 32, scope: !2137)
!2141 = !DILocation(line: 6538, column: 35, scope: !2137)
!2142 = !DILocation(line: 6538, column: 39, scope: !2137)
!2143 = !DILocation(line: 6538, column: 42, scope: !2137)
!2144 = !DILocation(line: 6538, column: 57, scope: !2137)
!2145 = !DILocation(line: 6538, column: 63, scope: !2137)
!2146 = !DILocation(line: 6538, column: 9, scope: !2085)
!2147 = !DILocation(line: 6541, column: 13, scope: !2148)
!2148 = distinct !DILexicalBlock(scope: !2149, file: !3, line: 6541, column: 13)
!2149 = distinct !DILexicalBlock(scope: !2137, file: !3, line: 6538, column: 78)
!2150 = !DILocation(line: 6541, column: 17, scope: !2148)
!2151 = !DILocation(line: 6541, column: 13, scope: !2149)
!2152 = !DILocation(line: 6541, column: 30, scope: !2148)
!2153 = !DILocation(line: 6543, column: 20, scope: !2149)
!2154 = !DILocation(line: 6543, column: 35, scope: !2149)
!2155 = !DILocation(line: 6543, column: 25, scope: !2149)
!2156 = !DILocation(line: 6543, column: 9, scope: !2149)
!2157 = !DILocation(line: 6544, column: 26, scope: !2149)
!2158 = !DILocation(line: 6544, column: 37, scope: !2149)
!2159 = !DILocation(line: 6544, column: 24, scope: !2149)
!2160 = !DILocation(line: 6545, column: 10, scope: !2149)
!2161 = !DILocation(line: 6545, column: 22, scope: !2149)
!2162 = !DILocation(line: 6550, column: 5, scope: !2149)
!2163 = !DILocation(line: 6550, column: 16, scope: !2164)
!2164 = distinct !DILexicalBlock(scope: !2137, file: !3, line: 6550, column: 16)
!2165 = !DILocation(line: 6550, column: 26, scope: !2164)
!2166 = !DILocation(line: 6550, column: 32, scope: !2164)
!2167 = !DILocation(line: 6550, column: 29, scope: !2164)
!2168 = !DILocation(line: 6550, column: 41, scope: !2164)
!2169 = !DILocation(line: 6550, column: 44, scope: !2164)
!2170 = !DILocation(line: 6550, column: 48, scope: !2164)
!2171 = !DILocation(line: 6550, column: 16, scope: !2137)
!2172 = !DILocation(line: 6559, column: 37, scope: !2173)
!2173 = distinct !DILexicalBlock(scope: !2164, file: !3, line: 6550, column: 61)
!2174 = !DILocation(line: 6559, column: 36, scope: !2173)
!2175 = !DILocation(line: 6559, column: 9, scope: !2173)
!2176 = !DILocation(line: 6560, column: 27, scope: !2173)
!2177 = !DILocation(line: 6560, column: 42, scope: !2173)
!2178 = !DILocation(line: 6560, column: 46, scope: !2173)
!2179 = !DILocation(line: 6560, column: 51, scope: !2173)
!2180 = !DILocation(line: 6560, column: 24, scope: !2173)
!2181 = !DILocation(line: 6561, column: 28, scope: !2173)
!2182 = !DILocation(line: 6561, column: 39, scope: !2173)
!2183 = !DILocation(line: 6561, column: 44, scope: !2173)
!2184 = !DILocation(line: 6561, column: 24, scope: !2173)
!2185 = !DILocation(line: 6563, column: 20, scope: !2173)
!2186 = !DILocation(line: 6563, column: 35, scope: !2173)
!2187 = !DILocation(line: 6563, column: 25, scope: !2173)
!2188 = !DILocation(line: 6563, column: 9, scope: !2173)
!2189 = !DILocation(line: 6568, column: 5, scope: !2173)
!2190 = !DILocation(line: 6568, column: 16, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !2164, file: !3, line: 6568, column: 16)
!2192 = !DILocation(line: 6568, column: 31, scope: !2191)
!2193 = !DILocation(line: 6568, column: 28, scope: !2191)
!2194 = !DILocation(line: 6568, column: 16, scope: !2164)
!2195 = !DILocation(line: 6570, column: 37, scope: !2196)
!2196 = distinct !DILexicalBlock(scope: !2191, file: !3, line: 6568, column: 41)
!2197 = !DILocation(line: 6570, column: 36, scope: !2196)
!2198 = !DILocation(line: 6570, column: 9, scope: !2196)
!2199 = !DILocation(line: 6571, column: 9, scope: !2196)
!2200 = !DILocation(line: 6572, column: 31, scope: !2196)
!2201 = !DILocation(line: 6572, column: 29, scope: !2196)
!2202 = !DILocation(line: 6572, column: 24, scope: !2196)
!2203 = !DILocation(line: 6573, column: 5, scope: !2196)
!2204 = !DILocation(line: 6574, column: 34, scope: !2205)
!2205 = distinct !DILexicalBlock(scope: !2191, file: !3, line: 6573, column: 12)
!2206 = !DILocation(line: 6574, column: 33, scope: !2205)
!2207 = !DILocation(line: 6574, column: 9, scope: !2205)
!2208 = !DILocation(line: 6575, column: 31, scope: !2205)
!2209 = !DILocation(line: 6575, column: 39, scope: !2205)
!2210 = !DILocation(line: 6575, column: 50, scope: !2205)
!2211 = !DILocation(line: 6575, column: 58, scope: !2205)
!2212 = !DILocation(line: 6575, column: 62, scope: !2205)
!2213 = !DILocation(line: 6575, column: 73, scope: !2205)
!2214 = !DILocation(line: 6575, column: 9, scope: !2205)
!2215 = !DILocation(line: 6576, column: 9, scope: !2205)
!2216 = !DILocation(line: 6577, column: 31, scope: !2205)
!2217 = !DILocation(line: 6577, column: 29, scope: !2205)
!2218 = !DILocation(line: 6577, column: 24, scope: !2205)
!2219 = !DILocation(line: 6580, column: 5, scope: !2085)
!2220 = !DILocation(line: 6582, column: 9, scope: !2221)
!2221 = distinct !DILexicalBlock(scope: !2085, file: !3, line: 6582, column: 9)
!2222 = !DILocation(line: 6582, column: 9, scope: !2085)
!2223 = !DILocation(line: 6584, column: 9, scope: !2224)
!2224 = distinct !DILexicalBlock(scope: !2221, file: !3, line: 6582, column: 14)
!2225 = !DILocation(line: 6585, column: 24, scope: !2224)
!2226 = !DILocation(line: 6586, column: 5, scope: !2224)
!2227 = !DILocation(line: 6586, column: 16, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2221, file: !3, line: 6586, column: 16)
!2229 = !DILocation(line: 6586, column: 20, scope: !2228)
!2230 = !DILocation(line: 6586, column: 24, scope: !2228)
!2231 = !DILocation(line: 6586, column: 39, scope: !2228)
!2232 = !DILocation(line: 6586, column: 44, scope: !2228)
!2233 = !DILocation(line: 6586, column: 16, scope: !2221)
!2234 = !DILocation(line: 6587, column: 37, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2228, file: !3, line: 6586, column: 50)
!2236 = !DILocation(line: 6587, column: 36, scope: !2235)
!2237 = !DILocation(line: 6587, column: 9, scope: !2235)
!2238 = !DILocation(line: 6588, column: 27, scope: !2235)
!2239 = !DILocation(line: 6588, column: 42, scope: !2235)
!2240 = !DILocation(line: 6588, column: 46, scope: !2235)
!2241 = !DILocation(line: 6588, column: 51, scope: !2235)
!2242 = !DILocation(line: 6588, column: 24, scope: !2235)
!2243 = !DILocation(line: 6589, column: 20, scope: !2235)
!2244 = !DILocation(line: 6589, column: 9, scope: !2235)
!2245 = !DILocation(line: 6590, column: 5, scope: !2235)
!2246 = !DILocation(line: 6592, column: 12, scope: !2085)
!2247 = !DILocation(line: 6592, column: 27, scope: !2085)
!2248 = !DILocation(line: 6592, column: 5, scope: !2085)
!2249 = distinct !DISubprogram(name: "fill_window", scope: !3, file: !3, line: 1397, type: !693, scopeLine: 1398, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2250 = !DILocalVariable(name: "n", scope: !2249, file: !3, line: 1399, type: !6)
!2251 = !DILocation(line: 1399, column: 23, scope: !2249)
!2252 = !DILocalVariable(name: "m", scope: !2249, file: !3, line: 1399, type: !6)
!2253 = !DILocation(line: 1399, column: 26, scope: !2249)
!2254 = !DILocalVariable(name: "more", scope: !2249, file: !3, line: 1400, type: !6)
!2255 = !DILocation(line: 1400, column: 14, scope: !2249)
!2256 = !DILocation(line: 1400, column: 32, scope: !2249)
!2257 = !DILocation(line: 1400, column: 51, scope: !2249)
!2258 = !DILocation(line: 1400, column: 46, scope: !2249)
!2259 = !DILocation(line: 1400, column: 44, scope: !2249)
!2260 = !DILocation(line: 1400, column: 68, scope: !2249)
!2261 = !DILocation(line: 1400, column: 63, scope: !2249)
!2262 = !DILocation(line: 1400, column: 61, scope: !2249)
!2263 = !DILocation(line: 1400, column: 21, scope: !2249)
!2264 = !DILocation(line: 1406, column: 9, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2249, file: !3, line: 1406, column: 9)
!2266 = !DILocation(line: 1406, column: 14, scope: !2265)
!2267 = !DILocation(line: 1406, column: 9, scope: !2249)
!2268 = !DILocation(line: 1410, column: 13, scope: !2269)
!2269 = distinct !DILexicalBlock(scope: !2265, file: !3, line: 1406, column: 32)
!2270 = !DILocation(line: 1411, column: 5, scope: !2269)
!2271 = !DILocation(line: 1411, column: 16, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2265, file: !3, line: 1411, column: 16)
!2273 = !DILocation(line: 1411, column: 25, scope: !2272)
!2274 = !DILocation(line: 1411, column: 16, scope: !2265)
!2275 = !DILocation(line: 1417, column: 9, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2272, file: !3, line: 1411, column: 44)
!2277 = !DILocation(line: 1418, column: 21, scope: !2276)
!2278 = !DILocation(line: 1419, column: 21, scope: !2276)
!2279 = !DILocation(line: 1420, column: 6, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2276, file: !3, line: 1420, column: 6)
!2281 = !DILocation(line: 1420, column: 22, scope: !2280)
!2282 = !DILocation(line: 1420, column: 6, scope: !2276)
!2283 = !DILocation(line: 1421, column: 22, scope: !2280)
!2284 = !DILocation(line: 1421, column: 6, scope: !2280)
!2285 = !DILocation(line: 1423, column: 21, scope: !2276)
!2286 = !DILocation(line: 1425, column: 16, scope: !2287)
!2287 = distinct !DILexicalBlock(scope: !2276, file: !3, line: 1425, column: 9)
!2288 = !DILocation(line: 1425, column: 14, scope: !2287)
!2289 = !DILocation(line: 1425, column: 21, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2287, file: !3, line: 1425, column: 9)
!2291 = !DILocation(line: 1425, column: 23, scope: !2290)
!2292 = !DILocation(line: 1425, column: 9, scope: !2287)
!2293 = !DILocation(line: 1426, column: 22, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 1425, column: 41)
!2295 = !DILocation(line: 1426, column: 17, scope: !2294)
!2296 = !DILocation(line: 1426, column: 15, scope: !2294)
!2297 = !DILocation(line: 1427, column: 29, scope: !2294)
!2298 = !DILocation(line: 1427, column: 31, scope: !2294)
!2299 = !DILocation(line: 1427, column: 42, scope: !2294)
!2300 = !DILocation(line: 1427, column: 43, scope: !2294)
!2301 = !DILocation(line: 1427, column: 23, scope: !2294)
!2302 = !DILocation(line: 1427, column: 18, scope: !2294)
!2303 = !DILocation(line: 1427, column: 13, scope: !2294)
!2304 = !DILocation(line: 1427, column: 21, scope: !2294)
!2305 = !DILocation(line: 1428, column: 9, scope: !2294)
!2306 = !DILocation(line: 1425, column: 37, scope: !2290)
!2307 = !DILocation(line: 1425, column: 9, scope: !2290)
!2308 = distinct !{!2308, !2292, !2309}
!2309 = !DILocation(line: 1428, column: 9, scope: !2287)
!2310 = !DILocation(line: 1429, column: 16, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2276, file: !3, line: 1429, column: 9)
!2312 = !DILocation(line: 1429, column: 14, scope: !2311)
!2313 = !DILocation(line: 1429, column: 21, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 1429, column: 9)
!2315 = !DILocation(line: 1429, column: 23, scope: !2314)
!2316 = !DILocation(line: 1429, column: 9, scope: !2311)
!2317 = !DILocation(line: 1430, column: 22, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2314, file: !3, line: 1429, column: 37)
!2319 = !DILocation(line: 1430, column: 17, scope: !2318)
!2320 = !DILocation(line: 1430, column: 15, scope: !2318)
!2321 = !DILocation(line: 1431, column: 29, scope: !2318)
!2322 = !DILocation(line: 1431, column: 31, scope: !2318)
!2323 = !DILocation(line: 1431, column: 42, scope: !2318)
!2324 = !DILocation(line: 1431, column: 43, scope: !2318)
!2325 = !DILocation(line: 1431, column: 23, scope: !2318)
!2326 = !DILocation(line: 1431, column: 18, scope: !2318)
!2327 = !DILocation(line: 1431, column: 13, scope: !2318)
!2328 = !DILocation(line: 1431, column: 21, scope: !2318)
!2329 = !DILocation(line: 1435, column: 9, scope: !2318)
!2330 = !DILocation(line: 1429, column: 33, scope: !2314)
!2331 = !DILocation(line: 1429, column: 9, scope: !2314)
!2332 = distinct !{!2332, !2316, !2333}
!2333 = !DILocation(line: 1435, column: 9, scope: !2311)
!2334 = !DILocation(line: 1436, column: 14, scope: !2276)
!2335 = !DILocation(line: 1437, column: 5, scope: !2276)
!2336 = !DILocation(line: 1439, column: 10, scope: !2337)
!2337 = distinct !DILexicalBlock(scope: !2249, file: !3, line: 1439, column: 9)
!2338 = !DILocation(line: 1439, column: 9, scope: !2249)
!2339 = !DILocation(line: 1440, column: 13, scope: !2340)
!2340 = distinct !DILexicalBlock(scope: !2337, file: !3, line: 1439, column: 18)
!2341 = !DILocation(line: 1440, column: 36, scope: !2340)
!2342 = !DILocation(line: 1440, column: 35, scope: !2340)
!2343 = !DILocation(line: 1440, column: 45, scope: !2340)
!2344 = !DILocation(line: 1440, column: 44, scope: !2340)
!2345 = !DILocation(line: 1440, column: 56, scope: !2340)
!2346 = !DILocation(line: 1440, column: 11, scope: !2340)
!2347 = !DILocation(line: 1441, column: 13, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2340, file: !3, line: 1441, column: 13)
!2349 = !DILocation(line: 1441, column: 15, scope: !2348)
!2350 = !DILocation(line: 1441, column: 20, scope: !2348)
!2351 = !DILocation(line: 1441, column: 23, scope: !2348)
!2352 = !DILocation(line: 1441, column: 25, scope: !2348)
!2353 = !DILocation(line: 1441, column: 13, scope: !2340)
!2354 = !DILocation(line: 1442, column: 20, scope: !2355)
!2355 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 1441, column: 43)
!2356 = !DILocation(line: 1443, column: 9, scope: !2355)
!2357 = !DILocation(line: 1444, column: 26, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 1443, column: 16)
!2359 = !DILocation(line: 1444, column: 23, scope: !2358)
!2360 = !DILocation(line: 1446, column: 5, scope: !2340)
!2361 = !DILocation(line: 1447, column: 1, scope: !2249)
!2362 = distinct !DISubprogram(name: "set_file_type", scope: !3, file: !3, line: 6704, type: !693, scopeLine: 6705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2363 = !DILocalVariable(name: "n", scope: !2362, file: !3, line: 6706, type: !12)
!2364 = !DILocation(line: 6706, column: 9, scope: !2362)
!2365 = !DILocalVariable(name: "ascii_freq", scope: !2362, file: !3, line: 6707, type: !6)
!2366 = !DILocation(line: 6707, column: 14, scope: !2362)
!2367 = !DILocalVariable(name: "bin_freq", scope: !2362, file: !3, line: 6708, type: !6)
!2368 = !DILocation(line: 6708, column: 14, scope: !2362)
!2369 = !DILocation(line: 6709, column: 5, scope: !2362)
!2370 = !DILocation(line: 6709, column: 12, scope: !2362)
!2371 = !DILocation(line: 6709, column: 14, scope: !2362)
!2372 = !DILocation(line: 6709, column: 49, scope: !2362)
!2373 = !DILocation(line: 6709, column: 38, scope: !2362)
!2374 = !DILocation(line: 6709, column: 53, scope: !2362)
!2375 = !DILocation(line: 6709, column: 35, scope: !2362)
!2376 = distinct !{!2376, !2369, !2374}
!2377 = !DILocation(line: 6710, column: 5, scope: !2362)
!2378 = !DILocation(line: 6710, column: 12, scope: !2362)
!2379 = !DILocation(line: 6710, column: 14, scope: !2362)
!2380 = !DILocation(line: 6710, column: 49, scope: !2362)
!2381 = !DILocation(line: 6710, column: 38, scope: !2362)
!2382 = !DILocation(line: 6710, column: 53, scope: !2362)
!2383 = !DILocation(line: 6710, column: 35, scope: !2362)
!2384 = distinct !{!2384, !2377, !2382}
!2385 = !DILocation(line: 6711, column: 5, scope: !2362)
!2386 = !DILocation(line: 6711, column: 12, scope: !2362)
!2387 = !DILocation(line: 6711, column: 14, scope: !2362)
!2388 = !DILocation(line: 6711, column: 49, scope: !2362)
!2389 = !DILocation(line: 6711, column: 38, scope: !2362)
!2390 = !DILocation(line: 6711, column: 53, scope: !2362)
!2391 = !DILocation(line: 6711, column: 35, scope: !2362)
!2392 = distinct !{!2392, !2385, !2390}
!2393 = !DILocation(line: 6712, column: 18, scope: !2362)
!2394 = !DILocation(line: 6712, column: 30, scope: !2362)
!2395 = !DILocation(line: 6712, column: 41, scope: !2362)
!2396 = !DILocation(line: 6712, column: 27, scope: !2362)
!2397 = !DILocation(line: 6712, column: 6, scope: !2362)
!2398 = !DILocation(line: 6712, column: 16, scope: !2362)
!2399 = !DILocation(line: 6713, column: 10, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2362, file: !3, line: 6713, column: 9)
!2401 = !DILocation(line: 6713, column: 9, scope: !2400)
!2402 = !DILocation(line: 6713, column: 20, scope: !2400)
!2403 = !DILocation(line: 6713, column: 30, scope: !2400)
!2404 = !DILocation(line: 6713, column: 9, scope: !2362)
!2405 = !DILocation(line: 6714, column: 9, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2400, file: !3, line: 6713, column: 48)
!2407 = !DILocation(line: 6715, column: 5, scope: !2406)
!2408 = !DILocation(line: 6716, column: 1, scope: !2362)
!2409 = distinct !DISubprogram(name: "build_tree_1", scope: !3, file: !3, line: 6250, type: !2410, scopeLine: 6252, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2410 = !DISubroutineType(types: !2411)
!2411 = !{null, !67}
!2412 = !DILocalVariable(name: "desc", arg: 1, scope: !2409, file: !3, line: 6251, type: !67)
!2413 = !DILocation(line: 6251, column: 21, scope: !2409)
!2414 = !DILocalVariable(name: "tree", scope: !2409, file: !3, line: 6253, type: !53)
!2415 = !DILocation(line: 6253, column: 19, scope: !2409)
!2416 = !DILocation(line: 6253, column: 28, scope: !2409)
!2417 = !DILocation(line: 6253, column: 34, scope: !2409)
!2418 = !DILocalVariable(name: "stree", scope: !2409, file: !3, line: 6254, type: !53)
!2419 = !DILocation(line: 6254, column: 19, scope: !2409)
!2420 = !DILocation(line: 6254, column: 28, scope: !2409)
!2421 = !DILocation(line: 6254, column: 34, scope: !2409)
!2422 = !DILocalVariable(name: "elems", scope: !2409, file: !3, line: 6255, type: !12)
!2423 = !DILocation(line: 6255, column: 9, scope: !2409)
!2424 = !DILocation(line: 6255, column: 28, scope: !2409)
!2425 = !DILocation(line: 6255, column: 34, scope: !2409)
!2426 = !DILocalVariable(name: "n", scope: !2409, file: !3, line: 6256, type: !12)
!2427 = !DILocation(line: 6256, column: 9, scope: !2409)
!2428 = !DILocalVariable(name: "m", scope: !2409, file: !3, line: 6256, type: !12)
!2429 = !DILocation(line: 6256, column: 12, scope: !2409)
!2430 = !DILocalVariable(name: "max_code", scope: !2409, file: !3, line: 6257, type: !12)
!2431 = !DILocation(line: 6257, column: 9, scope: !2409)
!2432 = !DILocalVariable(name: "node", scope: !2409, file: !3, line: 6258, type: !12)
!2433 = !DILocation(line: 6258, column: 9, scope: !2409)
!2434 = !DILocation(line: 6258, column: 16, scope: !2409)
!2435 = !DILocation(line: 6264, column: 14, scope: !2409)
!2436 = !DILocation(line: 6264, column: 28, scope: !2409)
!2437 = !DILocation(line: 6266, column: 12, scope: !2438)
!2438 = distinct !DILexicalBlock(scope: !2409, file: !3, line: 6266, column: 5)
!2439 = !DILocation(line: 6266, column: 10, scope: !2438)
!2440 = !DILocation(line: 6266, column: 17, scope: !2441)
!2441 = distinct !DILexicalBlock(scope: !2438, file: !3, line: 6266, column: 5)
!2442 = !DILocation(line: 6266, column: 21, scope: !2441)
!2443 = !DILocation(line: 6266, column: 19, scope: !2441)
!2444 = !DILocation(line: 6266, column: 5, scope: !2438)
!2445 = !DILocation(line: 6267, column: 13, scope: !2446)
!2446 = distinct !DILexicalBlock(scope: !2447, file: !3, line: 6267, column: 13)
!2447 = distinct !DILexicalBlock(scope: !2441, file: !3, line: 6266, column: 33)
!2448 = !DILocation(line: 6267, column: 18, scope: !2446)
!2449 = !DILocation(line: 6267, column: 21, scope: !2446)
!2450 = !DILocation(line: 6267, column: 26, scope: !2446)
!2451 = !DILocation(line: 6267, column: 13, scope: !2447)
!2452 = !DILocation(line: 6268, column: 43, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 6267, column: 32)
!2454 = !DILocation(line: 6268, column: 41, scope: !2453)
!2455 = !DILocation(line: 6268, column: 18, scope: !2453)
!2456 = !DILocation(line: 6268, column: 13, scope: !2453)
!2457 = !DILocation(line: 6268, column: 30, scope: !2453)
!2458 = !DILocation(line: 6269, column: 19, scope: !2453)
!2459 = !DILocation(line: 6269, column: 13, scope: !2453)
!2460 = !DILocation(line: 6269, column: 22, scope: !2453)
!2461 = !DILocation(line: 6270, column: 9, scope: !2453)
!2462 = !DILocation(line: 6271, column: 13, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 6270, column: 16)
!2464 = !DILocation(line: 6271, column: 18, scope: !2463)
!2465 = !DILocation(line: 6271, column: 21, scope: !2463)
!2466 = !DILocation(line: 6271, column: 25, scope: !2463)
!2467 = !DILocation(line: 6273, column: 5, scope: !2447)
!2468 = !DILocation(line: 6266, column: 29, scope: !2441)
!2469 = !DILocation(line: 6266, column: 5, scope: !2441)
!2470 = distinct !{!2470, !2444, !2471}
!2471 = !DILocation(line: 6273, column: 5, scope: !2438)
!2472 = !DILocation(line: 6280, column: 5, scope: !2409)
!2473 = !DILocation(line: 6280, column: 12, scope: !2409)
!2474 = !DILocation(line: 6280, column: 21, scope: !2409)
!2475 = !DILocalVariable(name: "new", scope: !2476, file: !3, line: 6281, type: !12)
!2476 = distinct !DILexicalBlock(scope: !2409, file: !3, line: 6280, column: 26)
!2477 = !DILocation(line: 6281, column: 13, scope: !2476)
!2478 = !DILocation(line: 6281, column: 39, scope: !2476)
!2479 = !DILocation(line: 6281, column: 48, scope: !2476)
!2480 = !DILocation(line: 6281, column: 54, scope: !2476)
!2481 = !DILocation(line: 6281, column: 24, scope: !2476)
!2482 = !DILocation(line: 6281, column: 19, scope: !2476)
!2483 = !DILocation(line: 6281, column: 36, scope: !2476)
!2484 = !DILocation(line: 6282, column: 9, scope: !2476)
!2485 = !DILocation(line: 6282, column: 14, scope: !2476)
!2486 = !DILocation(line: 6282, column: 19, scope: !2476)
!2487 = !DILocation(line: 6282, column: 24, scope: !2476)
!2488 = !DILocation(line: 6283, column: 15, scope: !2476)
!2489 = !DILocation(line: 6283, column: 9, scope: !2476)
!2490 = !DILocation(line: 6283, column: 20, scope: !2476)
!2491 = !DILocation(line: 6284, column: 16, scope: !2476)
!2492 = !DILocation(line: 6284, column: 24, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2476, file: !3, line: 6284, column: 24)
!2494 = !DILocation(line: 6284, column: 24, scope: !2476)
!2495 = !DILocation(line: 6284, column: 45, scope: !2493)
!2496 = !DILocation(line: 6284, column: 51, scope: !2493)
!2497 = !DILocation(line: 6284, column: 56, scope: !2493)
!2498 = !DILocation(line: 6284, column: 42, scope: !2493)
!2499 = !DILocation(line: 6284, column: 31, scope: !2493)
!2500 = distinct !{!2500, !2472, !2501}
!2501 = !DILocation(line: 6286, column: 5, scope: !2409)
!2502 = !DILocation(line: 6287, column: 22, scope: !2409)
!2503 = !DILocation(line: 6287, column: 5, scope: !2409)
!2504 = !DILocation(line: 6287, column: 11, scope: !2409)
!2505 = !DILocation(line: 6287, column: 20, scope: !2409)
!2506 = !DILocation(line: 6292, column: 14, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2409, file: !3, line: 6292, column: 5)
!2508 = !DILocation(line: 6292, column: 22, scope: !2507)
!2509 = !DILocation(line: 6292, column: 12, scope: !2507)
!2510 = !DILocation(line: 6292, column: 10, scope: !2507)
!2511 = !DILocation(line: 6292, column: 26, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !2507, file: !3, line: 6292, column: 5)
!2513 = !DILocation(line: 6292, column: 28, scope: !2512)
!2514 = !DILocation(line: 6292, column: 5, scope: !2507)
!2515 = !DILocation(line: 6292, column: 50, scope: !2512)
!2516 = !DILocation(line: 6292, column: 56, scope: !2512)
!2517 = !DILocation(line: 6292, column: 39, scope: !2512)
!2518 = !DILocation(line: 6292, column: 35, scope: !2512)
!2519 = !DILocation(line: 6292, column: 5, scope: !2512)
!2520 = distinct !{!2520, !2514, !2521}
!2521 = !DILocation(line: 6292, column: 57, scope: !2507)
!2522 = !DILocation(line: 6297, column: 5, scope: !2409)
!2523 = !DILocation(line: 6298, column: 9, scope: !2524)
!2524 = distinct !DILexicalBlock(scope: !2525, file: !3, line: 6298, column: 9)
!2525 = distinct !DILexicalBlock(scope: !2409, file: !3, line: 6297, column: 8)
!2526 = !DILocation(line: 6299, column: 13, scope: !2525)
!2527 = !DILocation(line: 6299, column: 11, scope: !2525)
!2528 = !DILocation(line: 6301, column: 28, scope: !2525)
!2529 = !DILocation(line: 6301, column: 14, scope: !2525)
!2530 = !DILocation(line: 6301, column: 9, scope: !2525)
!2531 = !DILocation(line: 6301, column: 26, scope: !2525)
!2532 = !DILocation(line: 6302, column: 28, scope: !2525)
!2533 = !DILocation(line: 6302, column: 14, scope: !2525)
!2534 = !DILocation(line: 6302, column: 9, scope: !2525)
!2535 = !DILocation(line: 6302, column: 26, scope: !2525)
!2536 = !DILocation(line: 6305, column: 27, scope: !2525)
!2537 = !DILocation(line: 6305, column: 32, scope: !2525)
!2538 = !DILocation(line: 6305, column: 35, scope: !2525)
!2539 = !DILocation(line: 6305, column: 42, scope: !2525)
!2540 = !DILocation(line: 6305, column: 47, scope: !2525)
!2541 = !DILocation(line: 6305, column: 50, scope: !2525)
!2542 = !DILocation(line: 6305, column: 40, scope: !2525)
!2543 = !DILocation(line: 6305, column: 9, scope: !2525)
!2544 = !DILocation(line: 6305, column: 14, scope: !2525)
!2545 = !DILocation(line: 6305, column: 20, scope: !2525)
!2546 = !DILocation(line: 6305, column: 25, scope: !2525)
!2547 = !DILocation(line: 6306, column: 30, scope: !2525)
!2548 = !DILocation(line: 6306, column: 54, scope: !2525)
!2549 = !DILocation(line: 6306, column: 23, scope: !2525)
!2550 = !DILocation(line: 6306, column: 15, scope: !2525)
!2551 = !DILocation(line: 6306, column: 9, scope: !2525)
!2552 = !DILocation(line: 6306, column: 21, scope: !2525)
!2553 = !DILocation(line: 6307, column: 42, scope: !2525)
!2554 = !DILocation(line: 6307, column: 37, scope: !2525)
!2555 = !DILocation(line: 6307, column: 23, scope: !2525)
!2556 = !DILocation(line: 6307, column: 28, scope: !2525)
!2557 = !DILocation(line: 6307, column: 31, scope: !2525)
!2558 = !DILocation(line: 6307, column: 35, scope: !2525)
!2559 = !DILocation(line: 6307, column: 9, scope: !2525)
!2560 = !DILocation(line: 6307, column: 14, scope: !2525)
!2561 = !DILocation(line: 6307, column: 17, scope: !2525)
!2562 = !DILocation(line: 6307, column: 21, scope: !2525)
!2563 = !DILocation(line: 6315, column: 30, scope: !2525)
!2564 = !DILocation(line: 6315, column: 24, scope: !2525)
!2565 = !DILocation(line: 6316, column: 20, scope: !2525)
!2566 = !DILocation(line: 6316, column: 9, scope: !2525)
!2567 = !DILocation(line: 6318, column: 5, scope: !2525)
!2568 = !DILocation(line: 6318, column: 14, scope: !2409)
!2569 = !DILocation(line: 6318, column: 23, scope: !2409)
!2570 = distinct !{!2570, !2522, !2571}
!2571 = !DILocation(line: 6318, column: 27, scope: !2409)
!2572 = !DILocation(line: 6320, column: 24, scope: !2409)
!2573 = !DILocation(line: 6320, column: 10, scope: !2409)
!2574 = !DILocation(line: 6320, column: 5, scope: !2409)
!2575 = !DILocation(line: 6320, column: 22, scope: !2409)
!2576 = !DILocation(line: 6325, column: 34, scope: !2409)
!2577 = !DILocation(line: 6325, column: 5, scope: !2409)
!2578 = !DILocation(line: 6328, column: 32, scope: !2409)
!2579 = !DILocation(line: 6328, column: 38, scope: !2409)
!2580 = !DILocation(line: 6328, column: 5, scope: !2409)
!2581 = !DILocation(line: 6329, column: 1, scope: !2409)
!2582 = distinct !DISubprogram(name: "build_bl_tree", scope: !3, file: !3, line: 6431, type: !2583, scopeLine: 6432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2583 = !DISubroutineType(types: !2584)
!2584 = !{!12}
!2585 = !DILocalVariable(name: "max_blindex", scope: !2582, file: !3, line: 6433, type: !12)
!2586 = !DILocation(line: 6433, column: 9, scope: !2582)
!2587 = !DILocation(line: 6436, column: 49, scope: !2582)
!2588 = !DILocation(line: 6436, column: 5, scope: !2582)
!2589 = !DILocation(line: 6437, column: 49, scope: !2582)
!2590 = !DILocation(line: 6437, column: 5, scope: !2582)
!2591 = !DILocation(line: 6440, column: 5, scope: !2582)
!2592 = !DILocation(line: 6449, column: 22, scope: !2593)
!2593 = distinct !DILexicalBlock(scope: !2582, file: !3, line: 6449, column: 5)
!2594 = !DILocation(line: 6449, column: 10, scope: !2593)
!2595 = !DILocation(line: 6449, column: 36, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2593, file: !3, line: 6449, column: 5)
!2597 = !DILocation(line: 6449, column: 48, scope: !2596)
!2598 = !DILocation(line: 6449, column: 5, scope: !2593)
!2599 = !DILocation(line: 6450, column: 30, scope: !2600)
!2600 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 6450, column: 13)
!2601 = distinct !DILexicalBlock(scope: !2596, file: !3, line: 6449, column: 69)
!2602 = !DILocation(line: 6450, column: 21, scope: !2600)
!2603 = !DILocation(line: 6450, column: 13, scope: !2600)
!2604 = !DILocation(line: 6450, column: 44, scope: !2600)
!2605 = !DILocation(line: 6450, column: 48, scope: !2600)
!2606 = !DILocation(line: 6450, column: 13, scope: !2601)
!2607 = !DILocation(line: 6450, column: 54, scope: !2600)
!2608 = !DILocation(line: 6451, column: 5, scope: !2601)
!2609 = !DILocation(line: 6449, column: 65, scope: !2596)
!2610 = !DILocation(line: 6449, column: 5, scope: !2596)
!2611 = distinct !{!2611, !2598, !2612}
!2612 = !DILocation(line: 6451, column: 5, scope: !2593)
!2613 = !DILocation(line: 6453, column: 19, scope: !2582)
!2614 = !DILocation(line: 6453, column: 30, scope: !2582)
!2615 = !DILocation(line: 6453, column: 17, scope: !2582)
!2616 = !DILocation(line: 6453, column: 34, scope: !2582)
!2617 = !DILocation(line: 6453, column: 37, scope: !2582)
!2618 = !DILocation(line: 6453, column: 39, scope: !2582)
!2619 = !DILocation(line: 6453, column: 16, scope: !2582)
!2620 = !DILocation(line: 6453, column: 13, scope: !2582)
!2621 = !DILocation(line: 6456, column: 12, scope: !2582)
!2622 = !DILocation(line: 6456, column: 5, scope: !2582)
!2623 = distinct !DISubprogram(name: "error", scope: !3, file: !3, line: 8257, type: !2624, scopeLine: 8259, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2624 = !DISubroutineType(types: !2625)
!2625 = !{null, !19}
!2626 = !DILocalVariable(name: "m", arg: 1, scope: !2623, file: !3, line: 8258, type: !19)
!2627 = !DILocation(line: 8258, column: 11, scope: !2623)
!2628 = !DILocation(line: 8260, column: 13, scope: !2623)
!2629 = !DILocation(line: 8260, column: 39, scope: !2623)
!2630 = !DILocation(line: 8260, column: 57, scope: !2623)
!2631 = !DILocation(line: 8260, column: 5, scope: !2623)
!2632 = !DILocation(line: 8261, column: 5, scope: !2623)
!2633 = !DILocation(line: 8262, column: 1, scope: !2623)
!2634 = distinct !DISubprogram(name: "copy_block", scope: !3, file: !3, line: 802, type: !2635, scopeLine: 806, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2635 = !DISubroutineType(types: !2636)
!2636 = !{null, !19, !6, !12}
!2637 = !DILocalVariable(name: "buf", arg: 1, scope: !2634, file: !3, line: 803, type: !19)
!2638 = !DILocation(line: 803, column: 15, scope: !2634)
!2639 = !DILocalVariable(name: "len", arg: 2, scope: !2634, file: !3, line: 804, type: !6)
!2640 = !DILocation(line: 804, column: 14, scope: !2634)
!2641 = !DILocalVariable(name: "header", arg: 3, scope: !2634, file: !3, line: 805, type: !12)
!2642 = !DILocation(line: 805, column: 14, scope: !2634)
!2643 = !DILocation(line: 807, column: 5, scope: !2634)
!2644 = !DILocation(line: 809, column: 9, scope: !2645)
!2645 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 809, column: 9)
!2646 = !DILocation(line: 809, column: 9, scope: !2634)
!2647 = !DILocation(line: 810, column: 9, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2649, file: !3, line: 810, column: 9)
!2649 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 810, column: 9)
!2650 = distinct !DILexicalBlock(scope: !2645, file: !3, line: 809, column: 17)
!2651 = !DILocation(line: 810, column: 9, scope: !2649)
!2652 = !DILocation(line: 810, column: 9, scope: !2653)
!2653 = distinct !DILexicalBlock(scope: !2648, file: !3, line: 810, column: 9)
!2654 = !DILocation(line: 810, column: 9, scope: !2655)
!2655 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 810, column: 9)
!2656 = distinct !DILexicalBlock(scope: !2648, file: !3, line: 810, column: 9)
!2657 = !DILocation(line: 810, column: 9, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2655, file: !3, line: 810, column: 9)
!2659 = !DILocation(line: 810, column: 9, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 810, column: 9)
!2661 = !DILocation(line: 810, column: 9, scope: !2662)
!2662 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 810, column: 9)
!2663 = !DILocation(line: 811, column: 9, scope: !2664)
!2664 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 811, column: 9)
!2665 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 811, column: 9)
!2666 = !DILocation(line: 811, column: 9, scope: !2665)
!2667 = !DILocation(line: 811, column: 9, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 811, column: 9)
!2669 = !DILocation(line: 811, column: 9, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 811, column: 9)
!2671 = distinct !DILexicalBlock(scope: !2664, file: !3, line: 811, column: 9)
!2672 = !DILocation(line: 811, column: 9, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !2670, file: !3, line: 811, column: 9)
!2674 = !DILocation(line: 811, column: 9, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 811, column: 9)
!2676 = !DILocation(line: 811, column: 9, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2675, file: !3, line: 811, column: 9)
!2678 = !DILocation(line: 815, column: 5, scope: !2650)
!2679 = !DILocation(line: 819, column: 5, scope: !2634)
!2680 = !DILocation(line: 819, column: 15, scope: !2634)
!2681 = !DILocation(line: 824, column: 2, scope: !2682)
!2682 = distinct !DILexicalBlock(scope: !2683, file: !3, line: 824, column: 2)
!2683 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 819, column: 19)
!2684 = !DILocation(line: 824, column: 2, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2682, file: !3, line: 824, column: 2)
!2686 = distinct !{!2686, !2679, !2687}
!2687 = !DILocation(line: 825, column: 5, scope: !2634)
!2688 = !DILocation(line: 826, column: 1, scope: !2634)
!2689 = distinct !DISubprogram(name: "send_bits", scope: !3, file: !3, line: 740, type: !711, scopeLine: 743, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2690 = !DILocalVariable(name: "value", arg: 1, scope: !2689, file: !3, line: 741, type: !12)
!2691 = !DILocation(line: 741, column: 9, scope: !2689)
!2692 = !DILocalVariable(name: "length", arg: 2, scope: !2689, file: !3, line: 742, type: !12)
!2693 = !DILocation(line: 742, column: 9, scope: !2689)
!2694 = !DILocation(line: 753, column: 9, scope: !2695)
!2695 = distinct !DILexicalBlock(scope: !2689, file: !3, line: 753, column: 9)
!2696 = !DILocation(line: 753, column: 36, scope: !2695)
!2697 = !DILocation(line: 753, column: 34, scope: !2695)
!2698 = !DILocation(line: 753, column: 18, scope: !2695)
!2699 = !DILocation(line: 753, column: 9, scope: !2689)
!2700 = !DILocation(line: 754, column: 20, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2695, file: !3, line: 753, column: 44)
!2702 = !DILocation(line: 754, column: 29, scope: !2701)
!2703 = !DILocation(line: 754, column: 26, scope: !2701)
!2704 = !DILocation(line: 754, column: 16, scope: !2701)
!2705 = !DILocation(line: 755, column: 9, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !2707, file: !3, line: 755, column: 9)
!2707 = distinct !DILexicalBlock(scope: !2701, file: !3, line: 755, column: 9)
!2708 = !DILocation(line: 755, column: 9, scope: !2707)
!2709 = !DILocation(line: 755, column: 9, scope: !2710)
!2710 = distinct !DILexicalBlock(scope: !2706, file: !3, line: 755, column: 9)
!2711 = !DILocation(line: 755, column: 9, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2713, file: !3, line: 755, column: 9)
!2713 = distinct !DILexicalBlock(scope: !2706, file: !3, line: 755, column: 9)
!2714 = !DILocation(line: 755, column: 9, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2712, file: !3, line: 755, column: 9)
!2716 = !DILocation(line: 755, column: 9, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2713, file: !3, line: 755, column: 9)
!2718 = !DILocation(line: 755, column: 9, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 755, column: 9)
!2720 = !DILocation(line: 756, column: 23, scope: !2701)
!2721 = !DILocation(line: 756, column: 18, scope: !2701)
!2722 = !DILocation(line: 756, column: 44, scope: !2701)
!2723 = !DILocation(line: 756, column: 42, scope: !2701)
!2724 = !DILocation(line: 756, column: 29, scope: !2701)
!2725 = !DILocation(line: 756, column: 16, scope: !2701)
!2726 = !DILocation(line: 757, column: 21, scope: !2701)
!2727 = !DILocation(line: 757, column: 28, scope: !2701)
!2728 = !DILocation(line: 757, column: 18, scope: !2701)
!2729 = !DILocation(line: 758, column: 5, scope: !2701)
!2730 = !DILocation(line: 759, column: 19, scope: !2731)
!2731 = distinct !DILexicalBlock(scope: !2695, file: !3, line: 758, column: 12)
!2732 = !DILocation(line: 759, column: 28, scope: !2731)
!2733 = !DILocation(line: 759, column: 25, scope: !2731)
!2734 = !DILocation(line: 759, column: 16, scope: !2731)
!2735 = !DILocation(line: 760, column: 21, scope: !2731)
!2736 = !DILocation(line: 760, column: 18, scope: !2731)
!2737 = !DILocation(line: 762, column: 1, scope: !2689)
!2738 = distinct !DISubprogram(name: "compress_block", scope: !3, file: !3, line: 6652, type: !2739, scopeLine: 6655, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2739 = !DISubroutineType(types: !2740)
!2740 = !{null, !53, !53}
!2741 = !DILocalVariable(name: "ltree", arg: 1, scope: !2738, file: !3, line: 6653, type: !53)
!2742 = !DILocation(line: 6653, column: 19, scope: !2738)
!2743 = !DILocalVariable(name: "dtree", arg: 2, scope: !2738, file: !3, line: 6654, type: !53)
!2744 = !DILocation(line: 6654, column: 19, scope: !2738)
!2745 = !DILocalVariable(name: "dist", scope: !2738, file: !3, line: 6656, type: !6)
!2746 = !DILocation(line: 6656, column: 14, scope: !2738)
!2747 = !DILocalVariable(name: "lc", scope: !2738, file: !3, line: 6657, type: !12)
!2748 = !DILocation(line: 6657, column: 9, scope: !2738)
!2749 = !DILocalVariable(name: "lx", scope: !2738, file: !3, line: 6658, type: !6)
!2750 = !DILocation(line: 6658, column: 14, scope: !2738)
!2751 = !DILocalVariable(name: "dx", scope: !2738, file: !3, line: 6659, type: !6)
!2752 = !DILocation(line: 6659, column: 14, scope: !2738)
!2753 = !DILocalVariable(name: "fx", scope: !2738, file: !3, line: 6660, type: !6)
!2754 = !DILocation(line: 6660, column: 14, scope: !2738)
!2755 = !DILocalVariable(name: "flag", scope: !2738, file: !3, line: 6661, type: !13)
!2756 = !DILocation(line: 6661, column: 9, scope: !2738)
!2757 = !DILocalVariable(name: "code", scope: !2738, file: !3, line: 6662, type: !6)
!2758 = !DILocation(line: 6662, column: 14, scope: !2738)
!2759 = !DILocalVariable(name: "extra", scope: !2738, file: !3, line: 6663, type: !12)
!2760 = !DILocation(line: 6663, column: 9, scope: !2738)
!2761 = !DILocation(line: 6665, column: 9, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2738, file: !3, line: 6665, column: 9)
!2763 = !DILocation(line: 6665, column: 18, scope: !2762)
!2764 = !DILocation(line: 6665, column: 9, scope: !2738)
!2765 = !DILocation(line: 6665, column: 24, scope: !2762)
!2766 = !DILocation(line: 6666, column: 14, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2768, file: !3, line: 6666, column: 13)
!2768 = distinct !DILexicalBlock(scope: !2762, file: !3, line: 6665, column: 27)
!2769 = !DILocation(line: 6666, column: 17, scope: !2767)
!2770 = !DILocation(line: 6666, column: 22, scope: !2767)
!2771 = !DILocation(line: 6666, column: 13, scope: !2768)
!2772 = !DILocation(line: 6666, column: 46, scope: !2767)
!2773 = !DILocation(line: 6666, column: 35, scope: !2767)
!2774 = !DILocation(line: 6666, column: 33, scope: !2767)
!2775 = !DILocation(line: 6666, column: 28, scope: !2767)
!2776 = !DILocation(line: 6667, column: 22, scope: !2768)
!2777 = !DILocation(line: 6667, column: 14, scope: !2768)
!2778 = !DILocation(line: 6667, column: 12, scope: !2768)
!2779 = !DILocation(line: 6668, column: 14, scope: !2780)
!2780 = distinct !DILexicalBlock(scope: !2768, file: !3, line: 6668, column: 13)
!2781 = !DILocation(line: 6668, column: 19, scope: !2780)
!2782 = !DILocation(line: 6668, column: 24, scope: !2780)
!2783 = !DILocation(line: 6668, column: 13, scope: !2768)
!2784 = !DILocation(line: 6669, column: 13, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2780, file: !3, line: 6668, column: 30)
!2786 = !DILocation(line: 6671, column: 9, scope: !2785)
!2787 = !DILocation(line: 6673, column: 32, scope: !2788)
!2788 = distinct !DILexicalBlock(scope: !2780, file: !3, line: 6671, column: 16)
!2789 = !DILocation(line: 6673, column: 20, scope: !2788)
!2790 = !DILocation(line: 6673, column: 18, scope: !2788)
!2791 = !DILocation(line: 6674, column: 13, scope: !2788)
!2792 = !DILocation(line: 6675, column: 33, scope: !2788)
!2793 = !DILocation(line: 6675, column: 21, scope: !2788)
!2794 = !DILocation(line: 6675, column: 19, scope: !2788)
!2795 = !DILocation(line: 6676, column: 17, scope: !2796)
!2796 = distinct !DILexicalBlock(scope: !2788, file: !3, line: 6676, column: 17)
!2797 = !DILocation(line: 6676, column: 23, scope: !2796)
!2798 = !DILocation(line: 6676, column: 17, scope: !2788)
!2799 = !DILocation(line: 6677, column: 35, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2796, file: !3, line: 6676, column: 29)
!2801 = !DILocation(line: 6677, column: 23, scope: !2800)
!2802 = !DILocation(line: 6677, column: 20, scope: !2800)
!2803 = !DILocation(line: 6678, column: 27, scope: !2800)
!2804 = !DILocation(line: 6678, column: 31, scope: !2800)
!2805 = !DILocation(line: 6678, column: 17, scope: !2800)
!2806 = !DILocation(line: 6679, column: 13, scope: !2800)
!2807 = !DILocation(line: 6680, column: 28, scope: !2788)
!2808 = !DILocation(line: 6680, column: 20, scope: !2788)
!2809 = !DILocation(line: 6680, column: 18, scope: !2788)
!2810 = !DILocation(line: 6682, column: 20, scope: !2788)
!2811 = !DILocation(line: 6682, column: 18, scope: !2788)
!2812 = !DILocation(line: 6685, column: 13, scope: !2788)
!2813 = !DILocation(line: 6686, column: 33, scope: !2788)
!2814 = !DILocation(line: 6686, column: 21, scope: !2788)
!2815 = !DILocation(line: 6686, column: 19, scope: !2788)
!2816 = !DILocation(line: 6687, column: 17, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2788, file: !3, line: 6687, column: 17)
!2818 = !DILocation(line: 6687, column: 23, scope: !2817)
!2819 = !DILocation(line: 6687, column: 17, scope: !2788)
!2820 = !DILocation(line: 6688, column: 35, scope: !2821)
!2821 = distinct !DILexicalBlock(scope: !2817, file: !3, line: 6687, column: 29)
!2822 = !DILocation(line: 6688, column: 25, scope: !2821)
!2823 = !DILocation(line: 6688, column: 22, scope: !2821)
!2824 = !DILocation(line: 6689, column: 27, scope: !2821)
!2825 = !DILocation(line: 6689, column: 33, scope: !2821)
!2826 = !DILocation(line: 6689, column: 17, scope: !2821)
!2827 = !DILocation(line: 6690, column: 13, scope: !2821)
!2828 = !DILocation(line: 6692, column: 14, scope: !2768)
!2829 = !DILocation(line: 6693, column: 5, scope: !2768)
!2830 = !DILocation(line: 6693, column: 14, scope: !2762)
!2831 = !DILocation(line: 6693, column: 19, scope: !2762)
!2832 = !DILocation(line: 6693, column: 17, scope: !2762)
!2833 = distinct !{!2833, !2765, !2834}
!2834 = !DILocation(line: 6693, column: 27, scope: !2762)
!2835 = !DILocation(line: 6695, column: 5, scope: !2738)
!2836 = !DILocation(line: 6696, column: 1, scope: !2738)
!2837 = distinct !DISubprogram(name: "send_all_trees", scope: !3, file: !3, line: 6464, type: !2838, scopeLine: 6466, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{null, !12, !12, !12}
!2840 = !DILocalVariable(name: "lcodes", arg: 1, scope: !2837, file: !3, line: 6465, type: !12)
!2841 = !DILocation(line: 6465, column: 9, scope: !2837)
!2842 = !DILocalVariable(name: "dcodes", arg: 2, scope: !2837, file: !3, line: 6465, type: !12)
!2843 = !DILocation(line: 6465, column: 17, scope: !2837)
!2844 = !DILocalVariable(name: "blcodes", arg: 3, scope: !2837, file: !3, line: 6465, type: !12)
!2845 = !DILocation(line: 6465, column: 25, scope: !2837)
!2846 = !DILocalVariable(name: "rank", scope: !2837, file: !3, line: 6467, type: !12)
!2847 = !DILocation(line: 6467, column: 9, scope: !2837)
!2848 = !DILocation(line: 6473, column: 15, scope: !2837)
!2849 = !DILocation(line: 6473, column: 21, scope: !2837)
!2850 = !DILocation(line: 6473, column: 5, scope: !2837)
!2851 = !DILocation(line: 6474, column: 15, scope: !2837)
!2852 = !DILocation(line: 6474, column: 21, scope: !2837)
!2853 = !DILocation(line: 6474, column: 5, scope: !2837)
!2854 = !DILocation(line: 6475, column: 15, scope: !2837)
!2855 = !DILocation(line: 6475, column: 22, scope: !2837)
!2856 = !DILocation(line: 6475, column: 5, scope: !2837)
!2857 = !DILocation(line: 6476, column: 15, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2837, file: !3, line: 6476, column: 5)
!2859 = !DILocation(line: 6476, column: 10, scope: !2858)
!2860 = !DILocation(line: 6476, column: 20, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 6476, column: 5)
!2862 = !DILocation(line: 6476, column: 27, scope: !2861)
!2863 = !DILocation(line: 6476, column: 25, scope: !2861)
!2864 = !DILocation(line: 6476, column: 5, scope: !2858)
!2865 = !DILocation(line: 6478, column: 36, scope: !2866)
!2866 = distinct !DILexicalBlock(scope: !2861, file: !3, line: 6476, column: 44)
!2867 = !DILocation(line: 6478, column: 27, scope: !2866)
!2868 = !DILocation(line: 6478, column: 19, scope: !2866)
!2869 = !DILocation(line: 6478, column: 43, scope: !2866)
!2870 = !DILocation(line: 6478, column: 9, scope: !2866)
!2871 = !DILocation(line: 6479, column: 5, scope: !2866)
!2872 = !DILocation(line: 6476, column: 40, scope: !2861)
!2873 = !DILocation(line: 6476, column: 5, scope: !2861)
!2874 = distinct !{!2874, !2864, !2875}
!2875 = !DILocation(line: 6479, column: 5, scope: !2858)
!2876 = !DILocation(line: 6481, column: 42, scope: !2837)
!2877 = !DILocation(line: 6481, column: 48, scope: !2837)
!2878 = !DILocation(line: 6481, column: 5, scope: !2837)
!2879 = !DILocation(line: 6483, column: 42, scope: !2837)
!2880 = !DILocation(line: 6483, column: 48, scope: !2837)
!2881 = !DILocation(line: 6483, column: 5, scope: !2837)
!2882 = !DILocation(line: 6484, column: 1, scope: !2837)
!2883 = distinct !DISubprogram(name: "init_block", scope: !3, file: !3, line: 6048, type: !693, scopeLine: 6049, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2884 = !DILocalVariable(name: "n", scope: !2883, file: !3, line: 6050, type: !12)
!2885 = !DILocation(line: 6050, column: 9, scope: !2883)
!2886 = !DILocation(line: 6053, column: 12, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2883, file: !3, line: 6053, column: 5)
!2888 = !DILocation(line: 6053, column: 10, scope: !2887)
!2889 = !DILocation(line: 6053, column: 17, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 6053, column: 5)
!2891 = !DILocation(line: 6053, column: 19, scope: !2890)
!2892 = !DILocation(line: 6053, column: 5, scope: !2887)
!2893 = !DILocation(line: 6053, column: 46, scope: !2890)
!2894 = !DILocation(line: 6053, column: 36, scope: !2890)
!2895 = !DILocation(line: 6053, column: 49, scope: !2890)
!2896 = !DILocation(line: 6053, column: 54, scope: !2890)
!2897 = !DILocation(line: 6053, column: 32, scope: !2890)
!2898 = !DILocation(line: 6053, column: 5, scope: !2890)
!2899 = distinct !{!2899, !2892, !2900}
!2900 = !DILocation(line: 6053, column: 56, scope: !2887)
!2901 = !DILocation(line: 6054, column: 12, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2883, file: !3, line: 6054, column: 5)
!2903 = !DILocation(line: 6054, column: 10, scope: !2902)
!2904 = !DILocation(line: 6054, column: 17, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2902, file: !3, line: 6054, column: 5)
!2906 = !DILocation(line: 6054, column: 19, scope: !2905)
!2907 = !DILocation(line: 6054, column: 5, scope: !2902)
!2908 = !DILocation(line: 6054, column: 46, scope: !2905)
!2909 = !DILocation(line: 6054, column: 36, scope: !2905)
!2910 = !DILocation(line: 6054, column: 49, scope: !2905)
!2911 = !DILocation(line: 6054, column: 54, scope: !2905)
!2912 = !DILocation(line: 6054, column: 32, scope: !2905)
!2913 = !DILocation(line: 6054, column: 5, scope: !2905)
!2914 = distinct !{!2914, !2907, !2915}
!2915 = !DILocation(line: 6054, column: 56, scope: !2902)
!2916 = !DILocation(line: 6055, column: 12, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2883, file: !3, line: 6055, column: 5)
!2918 = !DILocation(line: 6055, column: 10, scope: !2917)
!2919 = !DILocation(line: 6055, column: 17, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2917, file: !3, line: 6055, column: 5)
!2921 = !DILocation(line: 6055, column: 19, scope: !2920)
!2922 = !DILocation(line: 6055, column: 5, scope: !2917)
!2923 = !DILocation(line: 6055, column: 44, scope: !2920)
!2924 = !DILocation(line: 6055, column: 36, scope: !2920)
!2925 = !DILocation(line: 6055, column: 47, scope: !2920)
!2926 = !DILocation(line: 6055, column: 52, scope: !2920)
!2927 = !DILocation(line: 6055, column: 32, scope: !2920)
!2928 = !DILocation(line: 6055, column: 5, scope: !2920)
!2929 = distinct !{!2929, !2922, !2930}
!2930 = !DILocation(line: 6055, column: 54, scope: !2917)
!2931 = !DILocation(line: 6057, column: 31, scope: !2883)
!2932 = !DILocation(line: 6058, column: 26, scope: !2883)
!2933 = !DILocation(line: 6058, column: 13, scope: !2883)
!2934 = !DILocation(line: 6059, column: 39, scope: !2883)
!2935 = !DILocation(line: 6059, column: 26, scope: !2883)
!2936 = !DILocation(line: 6059, column: 14, scope: !2883)
!2937 = !DILocation(line: 6060, column: 11, scope: !2883)
!2938 = !DILocation(line: 6060, column: 25, scope: !2883)
!2939 = !DILocation(line: 6061, column: 1, scope: !2883)
!2940 = distinct !DISubprogram(name: "bi_windup", scope: !3, file: !3, line: 784, type: !693, scopeLine: 785, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2941 = !DILocation(line: 786, column: 9, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2940, file: !3, line: 786, column: 9)
!2943 = !DILocation(line: 786, column: 18, scope: !2942)
!2944 = !DILocation(line: 786, column: 9, scope: !2940)
!2945 = !DILocation(line: 787, column: 9, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 787, column: 9)
!2947 = distinct !DILexicalBlock(scope: !2948, file: !3, line: 787, column: 9)
!2948 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 786, column: 23)
!2949 = !DILocation(line: 787, column: 9, scope: !2947)
!2950 = !DILocation(line: 787, column: 9, scope: !2951)
!2951 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 787, column: 9)
!2952 = !DILocation(line: 787, column: 9, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2954, file: !3, line: 787, column: 9)
!2954 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 787, column: 9)
!2955 = !DILocation(line: 787, column: 9, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 787, column: 9)
!2957 = !DILocation(line: 787, column: 9, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2954, file: !3, line: 787, column: 9)
!2959 = !DILocation(line: 787, column: 9, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2958, file: !3, line: 787, column: 9)
!2961 = !DILocation(line: 788, column: 5, scope: !2948)
!2962 = !DILocation(line: 788, column: 16, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 788, column: 16)
!2964 = !DILocation(line: 788, column: 25, scope: !2963)
!2965 = !DILocation(line: 788, column: 16, scope: !2942)
!2966 = !DILocation(line: 789, column: 9, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 789, column: 9)
!2968 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 788, column: 30)
!2969 = !DILocation(line: 789, column: 9, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2967, file: !3, line: 789, column: 9)
!2971 = !DILocation(line: 790, column: 5, scope: !2968)
!2972 = !DILocation(line: 791, column: 12, scope: !2940)
!2973 = !DILocation(line: 792, column: 14, scope: !2940)
!2974 = !DILocation(line: 796, column: 1, scope: !2940)
!2975 = distinct !DISubprogram(name: "send_tree", scope: !3, file: !3, line: 6381, type: !2976, scopeLine: 6384, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!2976 = !DISubroutineType(types: !2977)
!2977 = !{null, !53, !12}
!2978 = !DILocalVariable(name: "tree", arg: 1, scope: !2975, file: !3, line: 6382, type: !53)
!2979 = !DILocation(line: 6382, column: 19, scope: !2975)
!2980 = !DILocalVariable(name: "max_code", arg: 2, scope: !2975, file: !3, line: 6383, type: !12)
!2981 = !DILocation(line: 6383, column: 9, scope: !2975)
!2982 = !DILocalVariable(name: "n", scope: !2975, file: !3, line: 6385, type: !12)
!2983 = !DILocation(line: 6385, column: 9, scope: !2975)
!2984 = !DILocalVariable(name: "prevlen", scope: !2975, file: !3, line: 6386, type: !12)
!2985 = !DILocation(line: 6386, column: 9, scope: !2975)
!2986 = !DILocalVariable(name: "curlen", scope: !2975, file: !3, line: 6387, type: !12)
!2987 = !DILocation(line: 6387, column: 9, scope: !2975)
!2988 = !DILocalVariable(name: "nextlen", scope: !2975, file: !3, line: 6388, type: !12)
!2989 = !DILocation(line: 6388, column: 9, scope: !2975)
!2990 = !DILocation(line: 6388, column: 19, scope: !2975)
!2991 = !DILocation(line: 6388, column: 27, scope: !2975)
!2992 = !DILocalVariable(name: "count", scope: !2975, file: !3, line: 6389, type: !12)
!2993 = !DILocation(line: 6389, column: 9, scope: !2975)
!2994 = !DILocalVariable(name: "max_count", scope: !2975, file: !3, line: 6390, type: !12)
!2995 = !DILocation(line: 6390, column: 9, scope: !2975)
!2996 = !DILocalVariable(name: "min_count", scope: !2975, file: !3, line: 6391, type: !12)
!2997 = !DILocation(line: 6391, column: 9, scope: !2975)
!2998 = !DILocation(line: 6394, column: 9, scope: !2999)
!2999 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 6394, column: 9)
!3000 = !DILocation(line: 6394, column: 17, scope: !2999)
!3001 = !DILocation(line: 6394, column: 9, scope: !2975)
!3002 = !DILocation(line: 6394, column: 33, scope: !2999)
!3003 = !DILocation(line: 6394, column: 50, scope: !2999)
!3004 = !DILocation(line: 6394, column: 23, scope: !2999)
!3005 = !DILocation(line: 6396, column: 12, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 6396, column: 5)
!3007 = !DILocation(line: 6396, column: 10, scope: !3006)
!3008 = !DILocation(line: 6396, column: 17, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3006, file: !3, line: 6396, column: 5)
!3010 = !DILocation(line: 6396, column: 22, scope: !3009)
!3011 = !DILocation(line: 6396, column: 19, scope: !3009)
!3012 = !DILocation(line: 6396, column: 5, scope: !3006)
!3013 = !DILocation(line: 6397, column: 18, scope: !3014)
!3014 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 6396, column: 37)
!3015 = !DILocation(line: 6397, column: 16, scope: !3014)
!3016 = !DILocation(line: 6397, column: 37, scope: !3014)
!3017 = !DILocation(line: 6397, column: 42, scope: !3014)
!3018 = !DILocation(line: 6397, column: 43, scope: !3014)
!3019 = !DILocation(line: 6397, column: 47, scope: !3014)
!3020 = !DILocation(line: 6397, column: 35, scope: !3014)
!3021 = !DILocation(line: 6398, column: 13, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !3014, file: !3, line: 6398, column: 13)
!3023 = !DILocation(line: 6398, column: 23, scope: !3022)
!3024 = !DILocation(line: 6398, column: 21, scope: !3022)
!3025 = !DILocation(line: 6398, column: 33, scope: !3022)
!3026 = !DILocation(line: 6398, column: 36, scope: !3022)
!3027 = !DILocation(line: 6398, column: 46, scope: !3022)
!3028 = !DILocation(line: 6398, column: 43, scope: !3022)
!3029 = !DILocation(line: 6398, column: 13, scope: !3014)
!3030 = !DILocation(line: 6399, column: 13, scope: !3031)
!3031 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 6398, column: 55)
!3032 = !DILocation(line: 6400, column: 20, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 6400, column: 20)
!3034 = !DILocation(line: 6400, column: 28, scope: !3033)
!3035 = !DILocation(line: 6400, column: 26, scope: !3033)
!3036 = !DILocation(line: 6400, column: 20, scope: !3022)
!3037 = !DILocation(line: 6401, column: 13, scope: !3038)
!3038 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 6400, column: 39)
!3039 = !DILocation(line: 6401, column: 18, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3038, file: !3, line: 6401, column: 16)
!3041 = !DILocation(line: 6401, column: 46, scope: !3040)
!3042 = !DILocation(line: 6401, column: 55, scope: !3038)
!3043 = !DILocation(line: 6401, column: 63, scope: !3038)
!3044 = distinct !{!3044, !3037, !3045}
!3045 = !DILocation(line: 6401, column: 67, scope: !3038)
!3046 = !DILocation(line: 6403, column: 9, scope: !3038)
!3047 = !DILocation(line: 6403, column: 20, scope: !3048)
!3048 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 6403, column: 20)
!3049 = !DILocation(line: 6403, column: 27, scope: !3048)
!3050 = !DILocation(line: 6403, column: 20, scope: !3033)
!3051 = !DILocation(line: 6404, column: 17, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 6404, column: 17)
!3053 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 6403, column: 33)
!3054 = !DILocation(line: 6404, column: 27, scope: !3052)
!3055 = !DILocation(line: 6404, column: 24, scope: !3052)
!3056 = !DILocation(line: 6404, column: 17, scope: !3053)
!3057 = !DILocation(line: 6405, column: 17, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3052, file: !3, line: 6404, column: 36)
!3059 = !DILocation(line: 6405, column: 50, scope: !3058)
!3060 = !DILocation(line: 6406, column: 13, scope: !3058)
!3061 = !DILocation(line: 6408, column: 13, scope: !3053)
!3062 = !DILocation(line: 6408, column: 52, scope: !3053)
!3063 = !DILocation(line: 6408, column: 57, scope: !3053)
!3064 = !DILocation(line: 6408, column: 42, scope: !3053)
!3065 = !DILocation(line: 6410, column: 9, scope: !3053)
!3066 = !DILocation(line: 6410, column: 20, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 6410, column: 20)
!3068 = !DILocation(line: 6410, column: 26, scope: !3067)
!3069 = !DILocation(line: 6410, column: 20, scope: !3048)
!3070 = !DILocation(line: 6411, column: 13, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 6410, column: 33)
!3072 = !DILocation(line: 6411, column: 54, scope: !3071)
!3073 = !DILocation(line: 6411, column: 59, scope: !3071)
!3074 = !DILocation(line: 6411, column: 44, scope: !3071)
!3075 = !DILocation(line: 6413, column: 9, scope: !3071)
!3076 = !DILocation(line: 6414, column: 13, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 6413, column: 16)
!3078 = !DILocation(line: 6414, column: 56, scope: !3077)
!3079 = !DILocation(line: 6414, column: 61, scope: !3077)
!3080 = !DILocation(line: 6414, column: 46, scope: !3077)
!3081 = !DILocation(line: 6416, column: 15, scope: !3014)
!3082 = !DILocation(line: 6416, column: 30, scope: !3014)
!3083 = !DILocation(line: 6416, column: 28, scope: !3014)
!3084 = !DILocation(line: 6417, column: 13, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3014, file: !3, line: 6417, column: 13)
!3086 = !DILocation(line: 6417, column: 21, scope: !3085)
!3087 = !DILocation(line: 6417, column: 13, scope: !3014)
!3088 = !DILocation(line: 6418, column: 23, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3085, file: !3, line: 6417, column: 27)
!3090 = !DILocation(line: 6418, column: 40, scope: !3089)
!3091 = !DILocation(line: 6419, column: 9, scope: !3089)
!3092 = !DILocation(line: 6419, column: 20, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3085, file: !3, line: 6419, column: 20)
!3094 = !DILocation(line: 6419, column: 30, scope: !3093)
!3095 = !DILocation(line: 6419, column: 27, scope: !3093)
!3096 = !DILocation(line: 6419, column: 20, scope: !3085)
!3097 = !DILocation(line: 6420, column: 23, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 6419, column: 39)
!3099 = !DILocation(line: 6420, column: 38, scope: !3098)
!3100 = !DILocation(line: 6421, column: 9, scope: !3098)
!3101 = !DILocation(line: 6422, column: 23, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 6421, column: 16)
!3103 = !DILocation(line: 6422, column: 38, scope: !3102)
!3104 = !DILocation(line: 6424, column: 5, scope: !3014)
!3105 = !DILocation(line: 6396, column: 33, scope: !3009)
!3106 = !DILocation(line: 6396, column: 5, scope: !3009)
!3107 = distinct !{!3107, !3012, !3108}
!3108 = !DILocation(line: 6424, column: 5, scope: !3006)
!3109 = !DILocation(line: 6425, column: 1, scope: !2975)
!3110 = distinct !DISubprogram(name: "abort_gzip", scope: !3, file: !3, line: 4635, type: !693, scopeLine: 4636, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3111 = !DILocation(line: 4637, column: 2, scope: !3110)
!3112 = !DILocation(line: 4638, column: 2, scope: !3110)
!3113 = !DILocation(line: 4639, column: 1, scope: !3110)
!3114 = distinct !DISubprogram(name: "do_remove", scope: !3, file: !3, line: 4625, type: !693, scopeLine: 4625, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3115 = !DILocation(line: 4626, column: 8, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 4626, column: 8)
!3117 = !DILocation(line: 4626, column: 8, scope: !3114)
!3118 = !DILocation(line: 4627, column: 14, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 4626, column: 23)
!3120 = !DILocation(line: 4627, column: 8, scope: !3119)
!3121 = !DILocation(line: 4628, column: 8, scope: !3119)
!3122 = !DILocation(line: 4629, column: 4, scope: !3119)
!3123 = !DILocation(line: 4630, column: 1, scope: !3114)
!3124 = !DILocalVariable(name: "exitcode", arg: 1, scope: !717, file: !3, line: 4600, type: !12)
!3125 = !DILocation(line: 4600, column: 9, scope: !717)
!3126 = !DILocation(line: 4604, column: 9, scope: !3127)
!3127 = distinct !DILexicalBlock(scope: !717, file: !3, line: 4604, column: 9)
!3128 = !DILocation(line: 4604, column: 9, scope: !717)
!3129 = !DILocation(line: 4604, column: 23, scope: !3127)
!3130 = !DILocation(line: 4604, column: 18, scope: !3127)
!3131 = !DILocation(line: 4605, column: 13, scope: !717)
!3132 = !DILocation(line: 4606, column: 9, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !717, file: !3, line: 4606, column: 9)
!3134 = !DILocation(line: 4606, column: 13, scope: !3133)
!3135 = !DILocation(line: 4606, column: 9, scope: !717)
!3136 = !DILocation(line: 4606, column: 28, scope: !3133)
!3137 = !DILocation(line: 4606, column: 23, scope: !3133)
!3138 = !DILocation(line: 4606, column: 40, scope: !3133)
!3139 = !DILocation(line: 4607, column: 9, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !717, file: !3, line: 4607, column: 9)
!3141 = !DILocation(line: 4607, column: 14, scope: !3140)
!3142 = !DILocation(line: 4607, column: 9, scope: !717)
!3143 = !DILocation(line: 4607, column: 35, scope: !3140)
!3144 = !DILocation(line: 4607, column: 28, scope: !3140)
!3145 = !DILocation(line: 4607, column: 23, scope: !3140)
!3146 = !DILocation(line: 4607, column: 47, scope: !3140)
!3147 = !DILocation(line: 4618, column: 10, scope: !717)
!3148 = !DILocation(line: 4618, column: 5, scope: !717)
!3149 = distinct !DISubprogram(name: "xunlink", scope: !3, file: !3, line: 8099, type: !3150, scopeLine: 8101, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3150 = !DISubroutineType(types: !3151)
!3151 = !{!12, !19}
!3152 = !DILocalVariable(name: "filename", arg: 1, scope: !3149, file: !3, line: 8100, type: !19)
!3153 = !DILocation(line: 8100, column: 12, scope: !3149)
!3154 = !DILocalVariable(name: "r", scope: !3149, file: !3, line: 8102, type: !12)
!3155 = !DILocation(line: 8102, column: 7, scope: !3149)
!3156 = !DILocation(line: 8102, column: 19, scope: !3149)
!3157 = !DILocation(line: 8102, column: 11, scope: !3149)
!3158 = !DILocation(line: 8118, column: 10, scope: !3149)
!3159 = !DILocation(line: 8118, column: 3, scope: !3149)
!3160 = distinct !DISubprogram(name: "scan_tree", scope: !3, file: !3, line: 6337, type: !2976, scopeLine: 6340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3161 = !DILocalVariable(name: "tree", arg: 1, scope: !3160, file: !3, line: 6338, type: !53)
!3162 = !DILocation(line: 6338, column: 19, scope: !3160)
!3163 = !DILocalVariable(name: "max_code", arg: 2, scope: !3160, file: !3, line: 6339, type: !12)
!3164 = !DILocation(line: 6339, column: 9, scope: !3160)
!3165 = !DILocalVariable(name: "n", scope: !3160, file: !3, line: 6341, type: !12)
!3166 = !DILocation(line: 6341, column: 9, scope: !3160)
!3167 = !DILocalVariable(name: "prevlen", scope: !3160, file: !3, line: 6342, type: !12)
!3168 = !DILocation(line: 6342, column: 9, scope: !3160)
!3169 = !DILocalVariable(name: "curlen", scope: !3160, file: !3, line: 6343, type: !12)
!3170 = !DILocation(line: 6343, column: 9, scope: !3160)
!3171 = !DILocalVariable(name: "nextlen", scope: !3160, file: !3, line: 6344, type: !12)
!3172 = !DILocation(line: 6344, column: 9, scope: !3160)
!3173 = !DILocation(line: 6344, column: 19, scope: !3160)
!3174 = !DILocation(line: 6344, column: 27, scope: !3160)
!3175 = !DILocalVariable(name: "count", scope: !3160, file: !3, line: 6345, type: !12)
!3176 = !DILocation(line: 6345, column: 9, scope: !3160)
!3177 = !DILocalVariable(name: "max_count", scope: !3160, file: !3, line: 6346, type: !12)
!3178 = !DILocation(line: 6346, column: 9, scope: !3160)
!3179 = !DILocalVariable(name: "min_count", scope: !3160, file: !3, line: 6347, type: !12)
!3180 = !DILocation(line: 6347, column: 9, scope: !3160)
!3181 = !DILocation(line: 6349, column: 9, scope: !3182)
!3182 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 6349, column: 9)
!3183 = !DILocation(line: 6349, column: 17, scope: !3182)
!3184 = !DILocation(line: 6349, column: 9, scope: !3160)
!3185 = !DILocation(line: 6349, column: 33, scope: !3182)
!3186 = !DILocation(line: 6349, column: 50, scope: !3182)
!3187 = !DILocation(line: 6349, column: 23, scope: !3182)
!3188 = !DILocation(line: 6350, column: 5, scope: !3160)
!3189 = !DILocation(line: 6350, column: 10, scope: !3160)
!3190 = !DILocation(line: 6350, column: 18, scope: !3160)
!3191 = !DILocation(line: 6350, column: 22, scope: !3160)
!3192 = !DILocation(line: 6350, column: 26, scope: !3160)
!3193 = !DILocation(line: 6352, column: 12, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 6352, column: 5)
!3195 = !DILocation(line: 6352, column: 10, scope: !3194)
!3196 = !DILocation(line: 6352, column: 17, scope: !3197)
!3197 = distinct !DILexicalBlock(scope: !3194, file: !3, line: 6352, column: 5)
!3198 = !DILocation(line: 6352, column: 22, scope: !3197)
!3199 = !DILocation(line: 6352, column: 19, scope: !3197)
!3200 = !DILocation(line: 6352, column: 5, scope: !3194)
!3201 = !DILocation(line: 6353, column: 18, scope: !3202)
!3202 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 6352, column: 37)
!3203 = !DILocation(line: 6353, column: 16, scope: !3202)
!3204 = !DILocation(line: 6353, column: 37, scope: !3202)
!3205 = !DILocation(line: 6353, column: 42, scope: !3202)
!3206 = !DILocation(line: 6353, column: 43, scope: !3202)
!3207 = !DILocation(line: 6353, column: 47, scope: !3202)
!3208 = !DILocation(line: 6353, column: 35, scope: !3202)
!3209 = !DILocation(line: 6354, column: 13, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3202, file: !3, line: 6354, column: 13)
!3211 = !DILocation(line: 6354, column: 23, scope: !3210)
!3212 = !DILocation(line: 6354, column: 21, scope: !3210)
!3213 = !DILocation(line: 6354, column: 33, scope: !3210)
!3214 = !DILocation(line: 6354, column: 36, scope: !3210)
!3215 = !DILocation(line: 6354, column: 46, scope: !3210)
!3216 = !DILocation(line: 6354, column: 43, scope: !3210)
!3217 = !DILocation(line: 6354, column: 13, scope: !3202)
!3218 = !DILocation(line: 6355, column: 13, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 6354, column: 55)
!3220 = !DILocation(line: 6356, column: 20, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 6356, column: 20)
!3222 = !DILocation(line: 6356, column: 28, scope: !3221)
!3223 = !DILocation(line: 6356, column: 26, scope: !3221)
!3224 = !DILocation(line: 6356, column: 20, scope: !3210)
!3225 = !DILocation(line: 6357, column: 37, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 6356, column: 39)
!3227 = !DILocation(line: 6357, column: 21, scope: !3226)
!3228 = !DILocation(line: 6357, column: 13, scope: !3226)
!3229 = !DILocation(line: 6357, column: 29, scope: !3226)
!3230 = !DILocation(line: 6357, column: 34, scope: !3226)
!3231 = !DILocation(line: 6358, column: 9, scope: !3226)
!3232 = !DILocation(line: 6358, column: 20, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 6358, column: 20)
!3234 = !DILocation(line: 6358, column: 27, scope: !3233)
!3235 = !DILocation(line: 6358, column: 20, scope: !3221)
!3236 = !DILocation(line: 6359, column: 17, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 6359, column: 17)
!3238 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 6358, column: 33)
!3239 = !DILocation(line: 6359, column: 27, scope: !3237)
!3240 = !DILocation(line: 6359, column: 24, scope: !3237)
!3241 = !DILocation(line: 6359, column: 17, scope: !3238)
!3242 = !DILocation(line: 6359, column: 44, scope: !3237)
!3243 = !DILocation(line: 6359, column: 36, scope: !3237)
!3244 = !DILocation(line: 6359, column: 52, scope: !3237)
!3245 = !DILocation(line: 6359, column: 56, scope: !3237)
!3246 = !DILocation(line: 6360, column: 34, scope: !3238)
!3247 = !DILocation(line: 6361, column: 9, scope: !3238)
!3248 = !DILocation(line: 6361, column: 20, scope: !3249)
!3249 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 6361, column: 20)
!3250 = !DILocation(line: 6361, column: 26, scope: !3249)
!3251 = !DILocation(line: 6361, column: 20, scope: !3233)
!3252 = !DILocation(line: 6362, column: 36, scope: !3253)
!3253 = distinct !DILexicalBlock(scope: !3249, file: !3, line: 6361, column: 33)
!3254 = !DILocation(line: 6363, column: 9, scope: !3253)
!3255 = !DILocation(line: 6364, column: 38, scope: !3256)
!3256 = distinct !DILexicalBlock(scope: !3249, file: !3, line: 6363, column: 16)
!3257 = !DILocation(line: 6366, column: 15, scope: !3202)
!3258 = !DILocation(line: 6366, column: 30, scope: !3202)
!3259 = !DILocation(line: 6366, column: 28, scope: !3202)
!3260 = !DILocation(line: 6367, column: 13, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3202, file: !3, line: 6367, column: 13)
!3262 = !DILocation(line: 6367, column: 21, scope: !3261)
!3263 = !DILocation(line: 6367, column: 13, scope: !3202)
!3264 = !DILocation(line: 6368, column: 23, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3261, file: !3, line: 6367, column: 27)
!3266 = !DILocation(line: 6368, column: 40, scope: !3265)
!3267 = !DILocation(line: 6369, column: 9, scope: !3265)
!3268 = !DILocation(line: 6369, column: 20, scope: !3269)
!3269 = distinct !DILexicalBlock(scope: !3261, file: !3, line: 6369, column: 20)
!3270 = !DILocation(line: 6369, column: 30, scope: !3269)
!3271 = !DILocation(line: 6369, column: 27, scope: !3269)
!3272 = !DILocation(line: 6369, column: 20, scope: !3261)
!3273 = !DILocation(line: 6370, column: 23, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3269, file: !3, line: 6369, column: 39)
!3275 = !DILocation(line: 6370, column: 38, scope: !3274)
!3276 = !DILocation(line: 6371, column: 9, scope: !3274)
!3277 = !DILocation(line: 6372, column: 23, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3269, file: !3, line: 6371, column: 16)
!3279 = !DILocation(line: 6372, column: 38, scope: !3278)
!3280 = !DILocation(line: 6374, column: 5, scope: !3202)
!3281 = !DILocation(line: 6352, column: 33, scope: !3197)
!3282 = !DILocation(line: 6352, column: 5, scope: !3197)
!3283 = distinct !{!3283, !3200, !3284}
!3284 = !DILocation(line: 6374, column: 5, scope: !3194)
!3285 = !DILocation(line: 6375, column: 1, scope: !3160)
!3286 = distinct !DISubprogram(name: "pqdownheap", scope: !3, file: !3, line: 6092, type: !2976, scopeLine: 6095, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3287 = !DILocalVariable(name: "tree", arg: 1, scope: !3286, file: !3, line: 6093, type: !53)
!3288 = !DILocation(line: 6093, column: 19, scope: !3286)
!3289 = !DILocalVariable(name: "k", arg: 2, scope: !3286, file: !3, line: 6094, type: !12)
!3290 = !DILocation(line: 6094, column: 9, scope: !3286)
!3291 = !DILocalVariable(name: "v", scope: !3286, file: !3, line: 6096, type: !12)
!3292 = !DILocation(line: 6096, column: 9, scope: !3286)
!3293 = !DILocation(line: 6096, column: 18, scope: !3286)
!3294 = !DILocation(line: 6096, column: 13, scope: !3286)
!3295 = !DILocalVariable(name: "j", scope: !3286, file: !3, line: 6097, type: !12)
!3296 = !DILocation(line: 6097, column: 9, scope: !3286)
!3297 = !DILocation(line: 6097, column: 13, scope: !3286)
!3298 = !DILocation(line: 6097, column: 15, scope: !3286)
!3299 = !DILocation(line: 6098, column: 5, scope: !3286)
!3300 = !DILocation(line: 6098, column: 12, scope: !3286)
!3301 = !DILocation(line: 6098, column: 17, scope: !3286)
!3302 = !DILocation(line: 6098, column: 14, scope: !3286)
!3303 = !DILocation(line: 6100, column: 13, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 6100, column: 13)
!3305 = distinct !DILexicalBlock(scope: !3286, file: !3, line: 6098, column: 27)
!3306 = !DILocation(line: 6100, column: 17, scope: !3304)
!3307 = !DILocation(line: 6100, column: 15, scope: !3304)
!3308 = !DILocation(line: 6100, column: 26, scope: !3304)
!3309 = !DILocation(line: 6100, column: 29, scope: !3304)
!3310 = !DILocation(line: 6100, column: 13, scope: !3305)
!3311 = !DILocation(line: 6100, column: 65, scope: !3304)
!3312 = !DILocation(line: 6100, column: 64, scope: !3304)
!3313 = !DILocation(line: 6103, column: 13, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 6103, column: 13)
!3315 = !DILocation(line: 6103, column: 13, scope: !3305)
!3316 = !DILocation(line: 6103, column: 40, scope: !3314)
!3317 = !DILocation(line: 6106, column: 24, scope: !3305)
!3318 = !DILocation(line: 6106, column: 19, scope: !3305)
!3319 = !DILocation(line: 6106, column: 14, scope: !3305)
!3320 = !DILocation(line: 6106, column: 9, scope: !3305)
!3321 = !DILocation(line: 6106, column: 17, scope: !3305)
!3322 = !DILocation(line: 6106, column: 33, scope: !3305)
!3323 = !DILocation(line: 6106, column: 31, scope: !3305)
!3324 = !DILocation(line: 6109, column: 11, scope: !3305)
!3325 = distinct !{!3325, !3299, !3326}
!3326 = !DILocation(line: 6110, column: 5, scope: !3286)
!3327 = !DILocation(line: 6111, column: 15, scope: !3286)
!3328 = !DILocation(line: 6111, column: 10, scope: !3286)
!3329 = !DILocation(line: 6111, column: 5, scope: !3286)
!3330 = !DILocation(line: 6111, column: 13, scope: !3286)
!3331 = !DILocation(line: 6112, column: 1, scope: !3286)
!3332 = distinct !DISubprogram(name: "gen_bitlen", scope: !3, file: !3, line: 6124, type: !2410, scopeLine: 6126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3333 = !DILocalVariable(name: "desc", arg: 1, scope: !3332, file: !3, line: 6125, type: !67)
!3334 = !DILocation(line: 6125, column: 21, scope: !3332)
!3335 = !DILocalVariable(name: "tree", scope: !3332, file: !3, line: 6127, type: !53)
!3336 = !DILocation(line: 6127, column: 19, scope: !3332)
!3337 = !DILocation(line: 6127, column: 27, scope: !3332)
!3338 = !DILocation(line: 6127, column: 33, scope: !3332)
!3339 = !DILocalVariable(name: "extra", scope: !3332, file: !3, line: 6128, type: !33)
!3340 = !DILocation(line: 6128, column: 15, scope: !3332)
!3341 = !DILocation(line: 6128, column: 27, scope: !3332)
!3342 = !DILocation(line: 6128, column: 33, scope: !3332)
!3343 = !DILocalVariable(name: "base", scope: !3332, file: !3, line: 6129, type: !12)
!3344 = !DILocation(line: 6129, column: 9, scope: !3332)
!3345 = !DILocation(line: 6129, column: 27, scope: !3332)
!3346 = !DILocation(line: 6129, column: 33, scope: !3332)
!3347 = !DILocalVariable(name: "max_code", scope: !3332, file: !3, line: 6130, type: !12)
!3348 = !DILocation(line: 6130, column: 9, scope: !3332)
!3349 = !DILocation(line: 6130, column: 27, scope: !3332)
!3350 = !DILocation(line: 6130, column: 33, scope: !3332)
!3351 = !DILocalVariable(name: "max_length", scope: !3332, file: !3, line: 6131, type: !12)
!3352 = !DILocation(line: 6131, column: 9, scope: !3332)
!3353 = !DILocation(line: 6131, column: 27, scope: !3332)
!3354 = !DILocation(line: 6131, column: 33, scope: !3332)
!3355 = !DILocalVariable(name: "stree", scope: !3332, file: !3, line: 6132, type: !53)
!3356 = !DILocation(line: 6132, column: 19, scope: !3332)
!3357 = !DILocation(line: 6132, column: 27, scope: !3332)
!3358 = !DILocation(line: 6132, column: 33, scope: !3332)
!3359 = !DILocalVariable(name: "h", scope: !3332, file: !3, line: 6133, type: !12)
!3360 = !DILocation(line: 6133, column: 9, scope: !3332)
!3361 = !DILocalVariable(name: "n", scope: !3332, file: !3, line: 6134, type: !12)
!3362 = !DILocation(line: 6134, column: 9, scope: !3332)
!3363 = !DILocalVariable(name: "m", scope: !3332, file: !3, line: 6134, type: !12)
!3364 = !DILocation(line: 6134, column: 12, scope: !3332)
!3365 = !DILocalVariable(name: "bits", scope: !3332, file: !3, line: 6135, type: !12)
!3366 = !DILocation(line: 6135, column: 9, scope: !3332)
!3367 = !DILocalVariable(name: "xbits", scope: !3332, file: !3, line: 6136, type: !12)
!3368 = !DILocation(line: 6136, column: 9, scope: !3332)
!3369 = !DILocalVariable(name: "f", scope: !3332, file: !3, line: 6137, type: !15)
!3370 = !DILocation(line: 6137, column: 9, scope: !3332)
!3371 = !DILocalVariable(name: "overflow", scope: !3332, file: !3, line: 6138, type: !12)
!3372 = !DILocation(line: 6138, column: 9, scope: !3332)
!3373 = !DILocation(line: 6140, column: 15, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 6140, column: 5)
!3375 = !DILocation(line: 6140, column: 10, scope: !3374)
!3376 = !DILocation(line: 6140, column: 20, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 6140, column: 5)
!3378 = !DILocation(line: 6140, column: 25, scope: !3377)
!3379 = !DILocation(line: 6140, column: 5, scope: !3374)
!3380 = !DILocation(line: 6140, column: 55, scope: !3377)
!3381 = !DILocation(line: 6140, column: 46, scope: !3377)
!3382 = !DILocation(line: 6140, column: 61, scope: !3377)
!3383 = !DILocation(line: 6140, column: 42, scope: !3377)
!3384 = !DILocation(line: 6140, column: 5, scope: !3377)
!3385 = distinct !{!3385, !3379, !3386}
!3386 = !DILocation(line: 6140, column: 63, scope: !3374)
!3387 = !DILocation(line: 6145, column: 5, scope: !3332)
!3388 = !DILocation(line: 6145, column: 15, scope: !3332)
!3389 = !DILocation(line: 6145, column: 10, scope: !3332)
!3390 = !DILocation(line: 6145, column: 26, scope: !3332)
!3391 = !DILocation(line: 6145, column: 30, scope: !3332)
!3392 = !DILocation(line: 6147, column: 14, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 6147, column: 5)
!3394 = !DILocation(line: 6147, column: 22, scope: !3393)
!3395 = !DILocation(line: 6147, column: 12, scope: !3393)
!3396 = !DILocation(line: 6147, column: 10, scope: !3393)
!3397 = !DILocation(line: 6147, column: 26, scope: !3398)
!3398 = distinct !DILexicalBlock(scope: !3393, file: !3, line: 6147, column: 5)
!3399 = !DILocation(line: 6147, column: 28, scope: !3398)
!3400 = !DILocation(line: 6147, column: 5, scope: !3393)
!3401 = !DILocation(line: 6148, column: 18, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3398, file: !3, line: 6147, column: 46)
!3403 = !DILocation(line: 6148, column: 13, scope: !3402)
!3404 = !DILocation(line: 6148, column: 11, scope: !3402)
!3405 = !DILocation(line: 6149, column: 16, scope: !3402)
!3406 = !DILocation(line: 6149, column: 21, scope: !3402)
!3407 = !DILocation(line: 6149, column: 26, scope: !3402)
!3408 = !DILocation(line: 6149, column: 29, scope: !3402)
!3409 = !DILocation(line: 6149, column: 34, scope: !3402)
!3410 = !DILocation(line: 6149, column: 38, scope: !3402)
!3411 = !DILocation(line: 6149, column: 14, scope: !3402)
!3412 = !DILocation(line: 6150, column: 13, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 6150, column: 13)
!3414 = !DILocation(line: 6150, column: 20, scope: !3413)
!3415 = !DILocation(line: 6150, column: 18, scope: !3413)
!3416 = !DILocation(line: 6150, column: 13, scope: !3402)
!3417 = !DILocation(line: 6150, column: 39, scope: !3413)
!3418 = !DILocation(line: 6150, column: 37, scope: !3413)
!3419 = !DILocation(line: 6150, column: 59, scope: !3413)
!3420 = !DILocation(line: 6150, column: 32, scope: !3413)
!3421 = !DILocation(line: 6151, column: 28, scope: !3402)
!3422 = !DILocation(line: 6151, column: 23, scope: !3402)
!3423 = !DILocation(line: 6151, column: 9, scope: !3402)
!3424 = !DILocation(line: 6151, column: 14, scope: !3402)
!3425 = !DILocation(line: 6151, column: 17, scope: !3402)
!3426 = !DILocation(line: 6151, column: 21, scope: !3402)
!3427 = !DILocation(line: 6154, column: 13, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 6154, column: 13)
!3429 = !DILocation(line: 6154, column: 17, scope: !3428)
!3430 = !DILocation(line: 6154, column: 15, scope: !3428)
!3431 = !DILocation(line: 6154, column: 13, scope: !3402)
!3432 = !DILocation(line: 6154, column: 27, scope: !3428)
!3433 = !DILocation(line: 6156, column: 18, scope: !3402)
!3434 = !DILocation(line: 6156, column: 9, scope: !3402)
!3435 = !DILocation(line: 6156, column: 23, scope: !3402)
!3436 = !DILocation(line: 6157, column: 15, scope: !3402)
!3437 = !DILocation(line: 6158, column: 13, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 6158, column: 13)
!3439 = !DILocation(line: 6158, column: 18, scope: !3438)
!3440 = !DILocation(line: 6158, column: 15, scope: !3438)
!3441 = !DILocation(line: 6158, column: 13, scope: !3402)
!3442 = !DILocation(line: 6158, column: 32, scope: !3438)
!3443 = !DILocation(line: 6158, column: 38, scope: !3438)
!3444 = !DILocation(line: 6158, column: 40, scope: !3438)
!3445 = !DILocation(line: 6158, column: 39, scope: !3438)
!3446 = !DILocation(line: 6158, column: 30, scope: !3438)
!3447 = !DILocation(line: 6158, column: 24, scope: !3438)
!3448 = !DILocation(line: 6159, column: 13, scope: !3402)
!3449 = !DILocation(line: 6159, column: 18, scope: !3402)
!3450 = !DILocation(line: 6159, column: 21, scope: !3402)
!3451 = !DILocation(line: 6159, column: 11, scope: !3402)
!3452 = !DILocation(line: 6160, column: 25, scope: !3402)
!3453 = !DILocation(line: 6160, column: 20, scope: !3402)
!3454 = !DILocation(line: 6160, column: 30, scope: !3402)
!3455 = !DILocation(line: 6160, column: 37, scope: !3402)
!3456 = !DILocation(line: 6160, column: 35, scope: !3402)
!3457 = !DILocation(line: 6160, column: 29, scope: !3402)
!3458 = !DILocation(line: 6160, column: 27, scope: !3402)
!3459 = !DILocation(line: 6160, column: 17, scope: !3402)
!3460 = !DILocation(line: 6161, column: 13, scope: !3461)
!3461 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 6161, column: 13)
!3462 = !DILocation(line: 6161, column: 13, scope: !3402)
!3463 = !DILocation(line: 6161, column: 39, scope: !3461)
!3464 = !DILocation(line: 6161, column: 34, scope: !3461)
!3465 = !DILocation(line: 6161, column: 44, scope: !3461)
!3466 = !DILocation(line: 6161, column: 50, scope: !3461)
!3467 = !DILocation(line: 6161, column: 53, scope: !3461)
!3468 = !DILocation(line: 6161, column: 59, scope: !3461)
!3469 = !DILocation(line: 6161, column: 57, scope: !3461)
!3470 = !DILocation(line: 6161, column: 43, scope: !3461)
!3471 = !DILocation(line: 6161, column: 41, scope: !3461)
!3472 = !DILocation(line: 6161, column: 31, scope: !3461)
!3473 = !DILocation(line: 6161, column: 20, scope: !3461)
!3474 = !DILocation(line: 6162, column: 5, scope: !3402)
!3475 = !DILocation(line: 6147, column: 42, scope: !3398)
!3476 = !DILocation(line: 6147, column: 5, scope: !3398)
!3477 = distinct !{!3477, !3400, !3478}
!3478 = !DILocation(line: 6162, column: 5, scope: !3393)
!3479 = !DILocation(line: 6163, column: 9, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 6163, column: 9)
!3481 = !DILocation(line: 6163, column: 18, scope: !3480)
!3482 = !DILocation(line: 6163, column: 9, scope: !3332)
!3483 = !DILocation(line: 6163, column: 24, scope: !3480)
!3484 = !DILocation(line: 6169, column: 5, scope: !3332)
!3485 = !DILocation(line: 6170, column: 16, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 6169, column: 8)
!3487 = !DILocation(line: 6170, column: 26, scope: !3486)
!3488 = !DILocation(line: 6170, column: 14, scope: !3486)
!3489 = !DILocation(line: 6171, column: 9, scope: !3486)
!3490 = !DILocation(line: 6171, column: 25, scope: !3486)
!3491 = !DILocation(line: 6171, column: 16, scope: !3486)
!3492 = !DILocation(line: 6171, column: 31, scope: !3486)
!3493 = !DILocation(line: 6171, column: 41, scope: !3486)
!3494 = distinct !{!3494, !3489, !3493}
!3495 = !DILocation(line: 6172, column: 18, scope: !3486)
!3496 = !DILocation(line: 6172, column: 9, scope: !3486)
!3497 = !DILocation(line: 6172, column: 23, scope: !3486)
!3498 = !DILocation(line: 6173, column: 18, scope: !3486)
!3499 = !DILocation(line: 6173, column: 22, scope: !3486)
!3500 = !DILocation(line: 6173, column: 9, scope: !3486)
!3501 = !DILocation(line: 6173, column: 26, scope: !3486)
!3502 = !DILocation(line: 6174, column: 18, scope: !3486)
!3503 = !DILocation(line: 6174, column: 9, scope: !3486)
!3504 = !DILocation(line: 6174, column: 29, scope: !3486)
!3505 = !DILocation(line: 6178, column: 18, scope: !3486)
!3506 = !DILocation(line: 6179, column: 5, scope: !3486)
!3507 = !DILocation(line: 6179, column: 14, scope: !3332)
!3508 = !DILocation(line: 6179, column: 23, scope: !3332)
!3509 = distinct !{!3509, !3484, !3510}
!3510 = !DILocation(line: 6179, column: 26, scope: !3332)
!3511 = !DILocation(line: 6186, column: 17, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 6186, column: 5)
!3513 = !DILocation(line: 6186, column: 15, scope: !3512)
!3514 = !DILocation(line: 6186, column: 10, scope: !3512)
!3515 = !DILocation(line: 6186, column: 29, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 6186, column: 5)
!3517 = !DILocation(line: 6186, column: 34, scope: !3516)
!3518 = !DILocation(line: 6186, column: 5, scope: !3512)
!3519 = !DILocation(line: 6187, column: 22, scope: !3520)
!3520 = distinct !DILexicalBlock(scope: !3516, file: !3, line: 6186, column: 48)
!3521 = !DILocation(line: 6187, column: 13, scope: !3520)
!3522 = !DILocation(line: 6187, column: 11, scope: !3520)
!3523 = !DILocation(line: 6188, column: 9, scope: !3520)
!3524 = !DILocation(line: 6188, column: 16, scope: !3520)
!3525 = !DILocation(line: 6188, column: 18, scope: !3520)
!3526 = !DILocation(line: 6189, column: 22, scope: !3527)
!3527 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 6188, column: 24)
!3528 = !DILocation(line: 6189, column: 17, scope: !3527)
!3529 = !DILocation(line: 6189, column: 15, scope: !3527)
!3530 = !DILocation(line: 6190, column: 17, scope: !3531)
!3531 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 6190, column: 17)
!3532 = !DILocation(line: 6190, column: 21, scope: !3531)
!3533 = !DILocation(line: 6190, column: 19, scope: !3531)
!3534 = !DILocation(line: 6190, column: 17, scope: !3527)
!3535 = !DILocation(line: 6190, column: 31, scope: !3531)
!3536 = distinct !{!3536, !3523, !3537}
!3537 = !DILocation(line: 6197, column: 9, scope: !3520)
!3538 = !DILocation(line: 6191, column: 17, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3527, file: !3, line: 6191, column: 17)
!3540 = !DILocation(line: 6191, column: 22, scope: !3539)
!3541 = !DILocation(line: 6191, column: 25, scope: !3539)
!3542 = !DILocation(line: 6191, column: 43, scope: !3539)
!3543 = !DILocation(line: 6191, column: 29, scope: !3539)
!3544 = !DILocation(line: 6191, column: 17, scope: !3527)
!3545 = !DILocation(line: 6193, column: 35, scope: !3546)
!3546 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 6191, column: 49)
!3547 = !DILocation(line: 6193, column: 29, scope: !3546)
!3548 = !DILocation(line: 6193, column: 46, scope: !3546)
!3549 = !DILocation(line: 6193, column: 51, scope: !3546)
!3550 = !DILocation(line: 6193, column: 54, scope: !3546)
!3551 = !DILocation(line: 6193, column: 40, scope: !3546)
!3552 = !DILocation(line: 6193, column: 39, scope: !3546)
!3553 = !DILocation(line: 6193, column: 65, scope: !3546)
!3554 = !DILocation(line: 6193, column: 70, scope: !3546)
!3555 = !DILocation(line: 6193, column: 73, scope: !3546)
!3556 = !DILocation(line: 6193, column: 59, scope: !3546)
!3557 = !DILocation(line: 6193, column: 58, scope: !3546)
!3558 = !DILocation(line: 6193, column: 25, scope: !3546)
!3559 = !DILocation(line: 6194, column: 36, scope: !3546)
!3560 = !DILocation(line: 6194, column: 31, scope: !3546)
!3561 = !DILocation(line: 6194, column: 17, scope: !3546)
!3562 = !DILocation(line: 6194, column: 22, scope: !3546)
!3563 = !DILocation(line: 6194, column: 25, scope: !3546)
!3564 = !DILocation(line: 6194, column: 29, scope: !3546)
!3565 = !DILocation(line: 6195, column: 13, scope: !3546)
!3566 = !DILocation(line: 6196, column: 14, scope: !3527)
!3567 = !DILocation(line: 6198, column: 5, scope: !3520)
!3568 = !DILocation(line: 6186, column: 44, scope: !3516)
!3569 = !DILocation(line: 6186, column: 5, scope: !3516)
!3570 = distinct !{!3570, !3518, !3571}
!3571 = !DILocation(line: 6198, column: 5, scope: !3512)
!3572 = !DILocation(line: 6199, column: 1, scope: !3332)
!3573 = distinct !DISubprogram(name: "gen_codes", scope: !3, file: !3, line: 6209, type: !2976, scopeLine: 6212, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3574 = !DILocalVariable(name: "tree", arg: 1, scope: !3573, file: !3, line: 6210, type: !53)
!3575 = !DILocation(line: 6210, column: 19, scope: !3573)
!3576 = !DILocalVariable(name: "max_code", arg: 2, scope: !3573, file: !3, line: 6211, type: !12)
!3577 = !DILocation(line: 6211, column: 9, scope: !3573)
!3578 = !DILocalVariable(name: "next_code", scope: !3573, file: !3, line: 6213, type: !261)
!3579 = !DILocation(line: 6213, column: 9, scope: !3573)
!3580 = !DILocalVariable(name: "code", scope: !3573, file: !3, line: 6214, type: !15)
!3581 = !DILocation(line: 6214, column: 9, scope: !3573)
!3582 = !DILocalVariable(name: "bits", scope: !3573, file: !3, line: 6215, type: !12)
!3583 = !DILocation(line: 6215, column: 9, scope: !3573)
!3584 = !DILocalVariable(name: "n", scope: !3573, file: !3, line: 6216, type: !12)
!3585 = !DILocation(line: 6216, column: 9, scope: !3573)
!3586 = !DILocation(line: 6221, column: 15, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 6221, column: 5)
!3588 = !DILocation(line: 6221, column: 10, scope: !3587)
!3589 = !DILocation(line: 6221, column: 20, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3587, file: !3, line: 6221, column: 5)
!3591 = !DILocation(line: 6221, column: 25, scope: !3590)
!3592 = !DILocation(line: 6221, column: 5, scope: !3587)
!3593 = !DILocation(line: 6222, column: 35, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3590, file: !3, line: 6221, column: 46)
!3595 = !DILocation(line: 6222, column: 51, scope: !3594)
!3596 = !DILocation(line: 6222, column: 55, scope: !3594)
!3597 = !DILocation(line: 6222, column: 42, scope: !3594)
!3598 = !DILocation(line: 6222, column: 40, scope: !3594)
!3599 = !DILocation(line: 6222, column: 60, scope: !3594)
!3600 = !DILocation(line: 6222, column: 34, scope: !3594)
!3601 = !DILocation(line: 6222, column: 32, scope: !3594)
!3602 = !DILocation(line: 6222, column: 19, scope: !3594)
!3603 = !DILocation(line: 6222, column: 9, scope: !3594)
!3604 = !DILocation(line: 6222, column: 25, scope: !3594)
!3605 = !DILocation(line: 6223, column: 5, scope: !3594)
!3606 = !DILocation(line: 6221, column: 42, scope: !3590)
!3607 = !DILocation(line: 6221, column: 5, scope: !3590)
!3608 = distinct !{!3608, !3592, !3609}
!3609 = !DILocation(line: 6223, column: 5, scope: !3587)
!3610 = !DILocation(line: 6231, column: 12, scope: !3611)
!3611 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 6231, column: 5)
!3612 = !DILocation(line: 6231, column: 10, scope: !3611)
!3613 = !DILocation(line: 6231, column: 18, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3611, file: !3, line: 6231, column: 5)
!3615 = !DILocation(line: 6231, column: 23, scope: !3614)
!3616 = !DILocation(line: 6231, column: 20, scope: !3614)
!3617 = !DILocation(line: 6231, column: 5, scope: !3611)
!3618 = !DILocalVariable(name: "len", scope: !3619, file: !3, line: 6232, type: !12)
!3619 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 6231, column: 38)
!3620 = !DILocation(line: 6232, column: 13, scope: !3619)
!3621 = !DILocation(line: 6232, column: 19, scope: !3619)
!3622 = !DILocation(line: 6232, column: 24, scope: !3619)
!3623 = !DILocation(line: 6232, column: 27, scope: !3619)
!3624 = !DILocation(line: 6233, column: 13, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3619, file: !3, line: 6233, column: 13)
!3626 = !DILocation(line: 6233, column: 17, scope: !3625)
!3627 = !DILocation(line: 6233, column: 13, scope: !3619)
!3628 = !DILocation(line: 6233, column: 23, scope: !3625)
!3629 = !DILocation(line: 6235, column: 45, scope: !3619)
!3630 = !DILocation(line: 6235, column: 35, scope: !3619)
!3631 = !DILocation(line: 6235, column: 49, scope: !3619)
!3632 = !DILocation(line: 6235, column: 53, scope: !3619)
!3633 = !DILocation(line: 6235, column: 24, scope: !3619)
!3634 = !DILocation(line: 6235, column: 9, scope: !3619)
!3635 = !DILocation(line: 6235, column: 14, scope: !3619)
!3636 = !DILocation(line: 6235, column: 17, scope: !3619)
!3637 = !DILocation(line: 6235, column: 22, scope: !3619)
!3638 = !DILocation(line: 6239, column: 5, scope: !3619)
!3639 = !DILocation(line: 6231, column: 34, scope: !3614)
!3640 = !DILocation(line: 6231, column: 5, scope: !3614)
!3641 = distinct !{!3641, !3617, !3642}
!3642 = !DILocation(line: 6239, column: 5, scope: !3611)
!3643 = !DILocation(line: 6240, column: 1, scope: !3573)
!3644 = distinct !DISubprogram(name: "bi_reverse", scope: !3, file: !3, line: 769, type: !3645, scopeLine: 772, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3645 = !DISubroutineType(types: !3646)
!3646 = !{!6, !6, !12}
!3647 = !DILocalVariable(name: "code", arg: 1, scope: !3644, file: !3, line: 770, type: !6)
!3648 = !DILocation(line: 770, column: 14, scope: !3644)
!3649 = !DILocalVariable(name: "len", arg: 2, scope: !3644, file: !3, line: 771, type: !12)
!3650 = !DILocation(line: 771, column: 9, scope: !3644)
!3651 = !DILocalVariable(name: "res", scope: !3644, file: !3, line: 773, type: !6)
!3652 = !DILocation(line: 773, column: 23, scope: !3644)
!3653 = !DILocation(line: 774, column: 5, scope: !3644)
!3654 = !DILocation(line: 775, column: 16, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 774, column: 8)
!3656 = !DILocation(line: 775, column: 21, scope: !3655)
!3657 = !DILocation(line: 775, column: 13, scope: !3655)
!3658 = !DILocation(line: 776, column: 14, scope: !3655)
!3659 = !DILocation(line: 776, column: 25, scope: !3655)
!3660 = !DILocation(line: 777, column: 5, scope: !3655)
!3661 = !DILocation(line: 777, column: 14, scope: !3644)
!3662 = !DILocation(line: 777, column: 20, scope: !3644)
!3663 = distinct !{!3663, !3653, !3664}
!3664 = !DILocation(line: 777, column: 23, scope: !3644)
!3665 = !DILocation(line: 778, column: 12, scope: !3644)
!3666 = !DILocation(line: 778, column: 16, scope: !3644)
!3667 = !DILocation(line: 778, column: 5, scope: !3644)
!3668 = distinct !DISubprogram(name: "warning", scope: !3, file: !3, line: 8264, type: !2624, scopeLine: 8266, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3669 = !DILocalVariable(name: "m", arg: 1, scope: !3668, file: !3, line: 8265, type: !19)
!3670 = !DILocation(line: 8265, column: 11, scope: !3668)
!3671 = !DILocation(line: 8267, column: 5, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 8267, column: 5)
!3673 = distinct !DILexicalBlock(scope: !3668, file: !3, line: 8267, column: 5)
!3674 = !DILocation(line: 8267, column: 5, scope: !3673)
!3675 = !DILocation(line: 8267, column: 5, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3673, file: !3, line: 8267, column: 5)
!3677 = !DILocation(line: 8268, column: 1, scope: !3668)
!3678 = distinct !DISubprogram(name: "file_read", scope: !3, file: !3, line: 8535, type: !147, scopeLine: 8538, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3679 = !DILocalVariable(name: "buf", arg: 1, scope: !3678, file: !3, line: 8536, type: !19)
!3680 = !DILocation(line: 8536, column: 11, scope: !3678)
!3681 = !DILocalVariable(name: "size", arg: 2, scope: !3678, file: !3, line: 8537, type: !6)
!3682 = !DILocation(line: 8537, column: 14, scope: !3678)
!3683 = !DILocalVariable(name: "len", scope: !3678, file: !3, line: 8539, type: !6)
!3684 = !DILocation(line: 8539, column: 14, scope: !3678)
!3685 = !DILocation(line: 8543, column: 16, scope: !3678)
!3686 = !DILocation(line: 8543, column: 21, scope: !3678)
!3687 = !DILocation(line: 8543, column: 26, scope: !3678)
!3688 = !DILocation(line: 8543, column: 11, scope: !3678)
!3689 = !DILocation(line: 8543, column: 9, scope: !3678)
!3690 = !DILocation(line: 8544, column: 9, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3678, file: !3, line: 8544, column: 9)
!3692 = !DILocation(line: 8544, column: 13, scope: !3691)
!3693 = !DILocation(line: 8544, column: 9, scope: !3678)
!3694 = !DILocation(line: 8544, column: 31, scope: !3691)
!3695 = !DILocation(line: 8544, column: 19, scope: !3691)
!3696 = !DILocation(line: 8545, column: 9, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3678, file: !3, line: 8545, column: 9)
!3698 = !DILocation(line: 8545, column: 13, scope: !3697)
!3699 = !DILocation(line: 8545, column: 9, scope: !3678)
!3700 = !DILocation(line: 8546, column: 2, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 8545, column: 30)
!3702 = !DILocation(line: 8547, column: 2, scope: !3701)
!3703 = !DILocation(line: 8550, column: 24, scope: !3678)
!3704 = !DILocation(line: 8550, column: 29, scope: !3678)
!3705 = !DILocation(line: 8550, column: 11, scope: !3678)
!3706 = !DILocation(line: 8550, column: 9, scope: !3678)
!3707 = !DILocation(line: 8551, column: 24, scope: !3678)
!3708 = !DILocation(line: 8551, column: 17, scope: !3678)
!3709 = !DILocation(line: 8551, column: 14, scope: !3678)
!3710 = !DILocation(line: 8552, column: 17, scope: !3678)
!3711 = !DILocation(line: 8552, column: 5, scope: !3678)
!3712 = !DILocation(line: 8553, column: 1, scope: !3678)
!3713 = distinct !DISubprogram(name: "read_error", scope: !3, file: !3, line: 8270, type: !693, scopeLine: 8271, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3714 = !DILocalVariable(name: "e", scope: !3713, file: !3, line: 8272, type: !12)
!3715 = !DILocation(line: 8272, column: 9, scope: !3713)
!3716 = !DILocation(line: 8272, column: 13, scope: !3713)
!3717 = !DILocation(line: 8273, column: 13, scope: !3713)
!3718 = !DILocation(line: 8273, column: 31, scope: !3713)
!3719 = !DILocation(line: 8273, column: 5, scope: !3713)
!3720 = !DILocation(line: 8274, column: 9, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3713, file: !3, line: 8274, column: 9)
!3722 = !DILocation(line: 8274, column: 11, scope: !3721)
!3723 = !DILocation(line: 8274, column: 9, scope: !3713)
!3724 = !DILocation(line: 8275, column: 10, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 8274, column: 17)
!3726 = !DILocation(line: 8275, column: 2, scope: !3725)
!3727 = !DILocation(line: 8275, column: 8, scope: !3725)
!3728 = !DILocation(line: 8276, column: 2, scope: !3725)
!3729 = !DILocation(line: 8277, column: 5, scope: !3725)
!3730 = !DILocation(line: 8278, column: 10, scope: !3731)
!3731 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 8277, column: 12)
!3732 = !DILocation(line: 8278, column: 2, scope: !3731)
!3733 = !DILocation(line: 8280, column: 5, scope: !3713)
!3734 = !DILocation(line: 8281, column: 1, scope: !3713)
!3735 = distinct !DISubprogram(name: "write_buf", scope: !3, file: !3, line: 8044, type: !3736, scopeLine: 8048, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3736 = !DISubroutineType(types: !3737)
!3737 = !{null, !12, !17, !6}
!3738 = !DILocalVariable(name: "fd", arg: 1, scope: !3735, file: !3, line: 8045, type: !12)
!3739 = !DILocation(line: 8045, column: 15, scope: !3735)
!3740 = !DILocalVariable(name: "buf", arg: 2, scope: !3735, file: !3, line: 8046, type: !17)
!3741 = !DILocation(line: 8046, column: 15, scope: !3735)
!3742 = !DILocalVariable(name: "cnt", arg: 3, scope: !3735, file: !3, line: 8047, type: !6)
!3743 = !DILocation(line: 8047, column: 15, scope: !3735)
!3744 = !DILocalVariable(name: "n", scope: !3735, file: !3, line: 8049, type: !6)
!3745 = !DILocation(line: 8049, column: 15, scope: !3735)
!3746 = !DILocation(line: 8051, column: 5, scope: !3735)
!3747 = !DILocation(line: 8051, column: 23, scope: !3735)
!3748 = !DILocation(line: 8051, column: 27, scope: !3735)
!3749 = !DILocation(line: 8051, column: 32, scope: !3735)
!3750 = !DILocation(line: 8051, column: 17, scope: !3735)
!3751 = !DILocation(line: 8051, column: 15, scope: !3735)
!3752 = !DILocation(line: 8051, column: 41, scope: !3735)
!3753 = !DILocation(line: 8051, column: 38, scope: !3735)
!3754 = !DILocation(line: 8052, column: 6, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3756, file: !3, line: 8052, column: 6)
!3756 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 8051, column: 46)
!3757 = !DILocation(line: 8052, column: 8, scope: !3755)
!3758 = !DILocation(line: 8052, column: 6, scope: !3756)
!3759 = !DILocation(line: 8053, column: 6, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 8052, column: 27)
!3761 = !DILocation(line: 8054, column: 2, scope: !3760)
!3762 = !DILocation(line: 8055, column: 9, scope: !3756)
!3763 = !DILocation(line: 8055, column: 6, scope: !3756)
!3764 = !DILocation(line: 8056, column: 23, scope: !3756)
!3765 = !DILocation(line: 8056, column: 27, scope: !3756)
!3766 = !DILocation(line: 8056, column: 26, scope: !3756)
!3767 = !DILocation(line: 8056, column: 6, scope: !3756)
!3768 = distinct !{!3768, !3746, !3769}
!3769 = !DILocation(line: 8057, column: 5, scope: !3735)
!3770 = !DILocation(line: 8058, column: 1, scope: !3735)
!3771 = distinct !DISubprogram(name: "write_error", scope: !3, file: !3, line: 8283, type: !693, scopeLine: 8284, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3772 = !DILocalVariable(name: "e", scope: !3771, file: !3, line: 8285, type: !12)
!3773 = !DILocation(line: 8285, column: 9, scope: !3771)
!3774 = !DILocation(line: 8285, column: 13, scope: !3771)
!3775 = !DILocation(line: 8286, column: 13, scope: !3771)
!3776 = !DILocation(line: 8286, column: 31, scope: !3771)
!3777 = !DILocation(line: 8286, column: 5, scope: !3771)
!3778 = !DILocation(line: 8287, column: 13, scope: !3771)
!3779 = !DILocation(line: 8287, column: 5, scope: !3771)
!3780 = !DILocation(line: 8287, column: 11, scope: !3771)
!3781 = !DILocation(line: 8288, column: 5, scope: !3771)
!3782 = !DILocation(line: 8289, column: 5, scope: !3771)
!3783 = !DILocation(line: 8290, column: 1, scope: !3771)
!3784 = distinct !DISubprogram(name: "_getopt_internal", scope: !3, file: !3, line: 2323, type: !3785, scopeLine: 2330, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!3785 = !DISubroutineType(types: !3786)
!3786 = !{!12, !12, !167, !29, !24, !33, !12}
!3787 = !DILocalVariable(name: "argc", arg: 1, scope: !3784, file: !3, line: 2324, type: !12)
!3788 = !DILocation(line: 2324, column: 10, scope: !3784)
!3789 = !DILocalVariable(name: "argv", arg: 2, scope: !3784, file: !3, line: 2325, type: !167)
!3790 = !DILocation(line: 2325, column: 19, scope: !3784)
!3791 = !DILocalVariable(name: "optstring", arg: 3, scope: !3784, file: !3, line: 2326, type: !29)
!3792 = !DILocation(line: 2326, column: 18, scope: !3784)
!3793 = !DILocalVariable(name: "longopts", arg: 4, scope: !3784, file: !3, line: 2327, type: !24)
!3794 = !DILocation(line: 2327, column: 27, scope: !3784)
!3795 = !DILocalVariable(name: "longind", arg: 5, scope: !3784, file: !3, line: 2328, type: !33)
!3796 = !DILocation(line: 2328, column: 11, scope: !3784)
!3797 = !DILocalVariable(name: "long_only", arg: 6, scope: !3784, file: !3, line: 2329, type: !12)
!3798 = !DILocation(line: 2329, column: 10, scope: !3784)
!3799 = !DILocalVariable(name: "print_errors", scope: !3784, file: !3, line: 2331, type: !12)
!3800 = !DILocation(line: 2331, column: 7, scope: !3784)
!3801 = !DILocation(line: 2331, column: 22, scope: !3784)
!3802 = !DILocation(line: 2332, column: 7, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2332, column: 7)
!3804 = !DILocation(line: 2332, column: 20, scope: !3803)
!3805 = !DILocation(line: 2332, column: 7, scope: !3784)
!3806 = !DILocation(line: 2333, column: 18, scope: !3803)
!3807 = !DILocation(line: 2333, column: 5, scope: !3803)
!3808 = !DILocation(line: 2335, column: 7, scope: !3809)
!3809 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2335, column: 7)
!3810 = !DILocation(line: 2335, column: 12, scope: !3809)
!3811 = !DILocation(line: 2335, column: 7, scope: !3784)
!3812 = !DILocation(line: 2336, column: 5, scope: !3809)
!3813 = !DILocation(line: 2338, column: 10, scope: !3784)
!3814 = !DILocation(line: 2340, column: 7, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2340, column: 7)
!3816 = !DILocation(line: 2340, column: 14, scope: !3815)
!3817 = !DILocation(line: 2340, column: 19, scope: !3815)
!3818 = !DILocation(line: 2340, column: 23, scope: !3815)
!3819 = !DILocation(line: 2340, column: 7, scope: !3784)
!3820 = !DILocation(line: 2342, column: 11, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 2342, column: 11)
!3822 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 2341, column: 5)
!3823 = !DILocation(line: 2342, column: 18, scope: !3821)
!3824 = !DILocation(line: 2342, column: 11, scope: !3822)
!3825 = !DILocation(line: 2343, column: 9, scope: !3821)
!3826 = !DILocation(line: 2343, column: 2, scope: !3821)
!3827 = !DILocation(line: 2344, column: 39, scope: !3822)
!3828 = !DILocation(line: 2344, column: 45, scope: !3822)
!3829 = !DILocation(line: 2344, column: 51, scope: !3822)
!3830 = !DILocation(line: 2344, column: 19, scope: !3822)
!3831 = !DILocation(line: 2344, column: 17, scope: !3822)
!3832 = !DILocation(line: 2345, column: 28, scope: !3822)
!3833 = !DILocation(line: 2346, column: 5, scope: !3822)
!3834 = !DILocation(line: 2360, column: 7, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2360, column: 7)
!3836 = !DILocation(line: 2360, column: 16, scope: !3835)
!3837 = !DILocation(line: 2360, column: 24, scope: !3835)
!3838 = !DILocation(line: 2360, column: 28, scope: !3835)
!3839 = !DILocation(line: 2360, column: 27, scope: !3835)
!3840 = !DILocation(line: 2360, column: 37, scope: !3835)
!3841 = !DILocation(line: 2360, column: 7, scope: !3784)
!3842 = !DILocation(line: 2366, column: 11, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2366, column: 11)
!3844 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 2361, column: 5)
!3845 = !DILocation(line: 2366, column: 25, scope: !3843)
!3846 = !DILocation(line: 2366, column: 23, scope: !3843)
!3847 = !DILocation(line: 2366, column: 11, scope: !3844)
!3848 = !DILocation(line: 2367, column: 16, scope: !3843)
!3849 = !DILocation(line: 2367, column: 14, scope: !3843)
!3850 = !DILocation(line: 2367, column: 2, scope: !3843)
!3851 = !DILocation(line: 2368, column: 11, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2368, column: 11)
!3853 = !DILocation(line: 2368, column: 26, scope: !3852)
!3854 = !DILocation(line: 2368, column: 24, scope: !3852)
!3855 = !DILocation(line: 2368, column: 11, scope: !3844)
!3856 = !DILocation(line: 2369, column: 17, scope: !3852)
!3857 = !DILocation(line: 2369, column: 15, scope: !3852)
!3858 = !DILocation(line: 2369, column: 2, scope: !3852)
!3859 = !DILocation(line: 2371, column: 11, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2371, column: 11)
!3861 = !DILocation(line: 2371, column: 20, scope: !3860)
!3862 = !DILocation(line: 2371, column: 11, scope: !3844)
!3863 = !DILocation(line: 2376, column: 8, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3865, file: !3, line: 2376, column: 8)
!3865 = distinct !DILexicalBlock(scope: !3860, file: !3, line: 2372, column: 2)
!3866 = !DILocation(line: 2376, column: 24, scope: !3864)
!3867 = !DILocation(line: 2376, column: 21, scope: !3864)
!3868 = !DILocation(line: 2376, column: 36, scope: !3864)
!3869 = !DILocation(line: 2376, column: 39, scope: !3864)
!3870 = !DILocation(line: 2376, column: 54, scope: !3864)
!3871 = !DILocation(line: 2376, column: 51, scope: !3864)
!3872 = !DILocation(line: 2376, column: 8, scope: !3865)
!3873 = !DILocation(line: 2377, column: 26, scope: !3864)
!3874 = !DILocation(line: 2377, column: 6, scope: !3864)
!3875 = !DILocation(line: 2378, column: 13, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 2378, column: 13)
!3877 = !DILocation(line: 2378, column: 28, scope: !3876)
!3878 = !DILocation(line: 2378, column: 25, scope: !3876)
!3879 = !DILocation(line: 2378, column: 13, scope: !3864)
!3880 = !DILocation(line: 2379, column: 21, scope: !3876)
!3881 = !DILocation(line: 2379, column: 19, scope: !3876)
!3882 = !DILocation(line: 2379, column: 6, scope: !3876)
!3883 = !DILocation(line: 2384, column: 4, scope: !3865)
!3884 = !DILocation(line: 2384, column: 11, scope: !3865)
!3885 = !DILocation(line: 2384, column: 20, scope: !3865)
!3886 = !DILocation(line: 2384, column: 18, scope: !3865)
!3887 = !DILocation(line: 2384, column: 25, scope: !3865)
!3888 = !DILocation(line: 2384, column: 28, scope: !3865)
!3889 = !DILocation(line: 0, scope: !3865)
!3890 = !DILocation(line: 2385, column: 12, scope: !3865)
!3891 = distinct !{!3891, !3883, !3890}
!3892 = !DILocation(line: 2386, column: 18, scope: !3865)
!3893 = !DILocation(line: 2386, column: 16, scope: !3865)
!3894 = !DILocation(line: 2387, column: 2, scope: !3865)
!3895 = !DILocation(line: 2394, column: 11, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2394, column: 11)
!3897 = !DILocation(line: 2394, column: 21, scope: !3896)
!3898 = !DILocation(line: 2394, column: 18, scope: !3896)
!3899 = !DILocation(line: 2394, column: 26, scope: !3896)
!3900 = !DILocation(line: 2394, column: 38, scope: !3896)
!3901 = !DILocation(line: 2394, column: 43, scope: !3896)
!3902 = !DILocation(line: 2394, column: 30, scope: !3896)
!3903 = !DILocation(line: 2394, column: 11, scope: !3844)
!3904 = !DILocation(line: 2396, column: 10, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3896, file: !3, line: 2395, column: 2)
!3906 = !DILocation(line: 2398, column: 8, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3905, file: !3, line: 2398, column: 8)
!3908 = !DILocation(line: 2398, column: 24, scope: !3907)
!3909 = !DILocation(line: 2398, column: 21, scope: !3907)
!3910 = !DILocation(line: 2398, column: 36, scope: !3907)
!3911 = !DILocation(line: 2398, column: 39, scope: !3907)
!3912 = !DILocation(line: 2398, column: 54, scope: !3907)
!3913 = !DILocation(line: 2398, column: 51, scope: !3907)
!3914 = !DILocation(line: 2398, column: 8, scope: !3905)
!3915 = !DILocation(line: 2399, column: 26, scope: !3907)
!3916 = !DILocation(line: 2399, column: 6, scope: !3907)
!3917 = !DILocation(line: 2400, column: 13, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 2400, column: 13)
!3919 = !DILocation(line: 2400, column: 29, scope: !3918)
!3920 = !DILocation(line: 2400, column: 26, scope: !3918)
!3921 = !DILocation(line: 2400, column: 13, scope: !3907)
!3922 = !DILocation(line: 2401, column: 21, scope: !3918)
!3923 = !DILocation(line: 2401, column: 19, scope: !3918)
!3924 = !DILocation(line: 2401, column: 6, scope: !3918)
!3925 = !DILocation(line: 2402, column: 18, scope: !3905)
!3926 = !DILocation(line: 2402, column: 16, scope: !3905)
!3927 = !DILocation(line: 2404, column: 13, scope: !3905)
!3928 = !DILocation(line: 2404, column: 11, scope: !3905)
!3929 = !DILocation(line: 2405, column: 2, scope: !3905)
!3930 = !DILocation(line: 2410, column: 11, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2410, column: 11)
!3932 = !DILocation(line: 2410, column: 21, scope: !3931)
!3933 = !DILocation(line: 2410, column: 18, scope: !3931)
!3934 = !DILocation(line: 2410, column: 11, scope: !3844)
!3935 = !DILocation(line: 2414, column: 8, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 2414, column: 8)
!3937 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 2411, column: 2)
!3938 = !DILocation(line: 2414, column: 24, scope: !3936)
!3939 = !DILocation(line: 2414, column: 21, scope: !3936)
!3940 = !DILocation(line: 2414, column: 8, scope: !3937)
!3941 = !DILocation(line: 2415, column: 15, scope: !3936)
!3942 = !DILocation(line: 2415, column: 13, scope: !3936)
!3943 = !DILocation(line: 2415, column: 6, scope: !3936)
!3944 = !DILocation(line: 2416, column: 4, scope: !3937)
!3945 = !DILocation(line: 2422, column: 11, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2422, column: 11)
!3947 = !DILocation(line: 2422, column: 11, scope: !3844)
!3948 = !DILocation(line: 2424, column: 8, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3950, file: !3, line: 2424, column: 8)
!3950 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 2423, column: 2)
!3951 = !DILocation(line: 2424, column: 17, scope: !3949)
!3952 = !DILocation(line: 2424, column: 8, scope: !3950)
!3953 = !DILocation(line: 2425, column: 6, scope: !3949)
!3954 = !DILocation(line: 2426, column: 13, scope: !3950)
!3955 = !DILocation(line: 2426, column: 24, scope: !3950)
!3956 = !DILocation(line: 2426, column: 11, scope: !3950)
!3957 = !DILocation(line: 2427, column: 4, scope: !3950)
!3958 = !DILocation(line: 2433, column: 19, scope: !3844)
!3959 = !DILocation(line: 2433, column: 24, scope: !3844)
!3960 = !DILocation(line: 2433, column: 32, scope: !3844)
!3961 = !DILocation(line: 2434, column: 8, scope: !3844)
!3962 = !DILocation(line: 2434, column: 17, scope: !3844)
!3963 = !DILocation(line: 2434, column: 25, scope: !3844)
!3964 = !DILocation(line: 2434, column: 28, scope: !3844)
!3965 = !DILocation(line: 2434, column: 33, scope: !3844)
!3966 = !DILocation(line: 2434, column: 44, scope: !3844)
!3967 = !DILocation(line: 0, scope: !3844)
!3968 = !DILocation(line: 2434, column: 5, scope: !3844)
!3969 = !DILocation(line: 2433, column: 16, scope: !3844)
!3970 = !DILocation(line: 2435, column: 5, scope: !3844)
!3971 = !DILocation(line: 2452, column: 7, scope: !3972)
!3972 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2452, column: 7)
!3973 = !DILocation(line: 2452, column: 16, scope: !3972)
!3974 = !DILocation(line: 2453, column: 7, scope: !3972)
!3975 = !DILocation(line: 2453, column: 11, scope: !3972)
!3976 = !DILocation(line: 2453, column: 16, scope: !3972)
!3977 = !DILocation(line: 2453, column: 27, scope: !3972)
!3978 = !DILocation(line: 2454, column: 4, scope: !3972)
!3979 = !DILocation(line: 2454, column: 8, scope: !3972)
!3980 = !DILocation(line: 2454, column: 18, scope: !3972)
!3981 = !DILocation(line: 2454, column: 22, scope: !3972)
!3982 = !DILocation(line: 2454, column: 27, scope: !3972)
!3983 = !DILocation(line: 2454, column: 38, scope: !3972)
!3984 = !DILocation(line: 2454, column: 52, scope: !3972)
!3985 = !DILocation(line: 2454, column: 63, scope: !3972)
!3986 = !DILocation(line: 2454, column: 68, scope: !3972)
!3987 = !DILocation(line: 2454, column: 42, scope: !3972)
!3988 = !DILocation(line: 2452, column: 7, scope: !3784)
!3989 = !DILocalVariable(name: "nameend", scope: !3990, file: !3, line: 2456, type: !19)
!3990 = distinct !DILexicalBlock(scope: !3972, file: !3, line: 2455, column: 5)
!3991 = !DILocation(line: 2456, column: 13, scope: !3990)
!3992 = !DILocalVariable(name: "p", scope: !3990, file: !3, line: 2457, type: !24)
!3993 = !DILocation(line: 2457, column: 28, scope: !3990)
!3994 = !DILocalVariable(name: "pfound", scope: !3990, file: !3, line: 2458, type: !24)
!3995 = !DILocation(line: 2458, column: 28, scope: !3990)
!3996 = !DILocalVariable(name: "exact", scope: !3990, file: !3, line: 2459, type: !12)
!3997 = !DILocation(line: 2459, column: 11, scope: !3990)
!3998 = !DILocalVariable(name: "ambig", scope: !3990, file: !3, line: 2460, type: !12)
!3999 = !DILocation(line: 2460, column: 11, scope: !3990)
!4000 = !DILocalVariable(name: "indfound", scope: !3990, file: !3, line: 2461, type: !12)
!4001 = !DILocation(line: 2461, column: 11, scope: !3990)
!4002 = !DILocalVariable(name: "option_index", scope: !3990, file: !3, line: 2462, type: !12)
!4003 = !DILocation(line: 2462, column: 11, scope: !3990)
!4004 = !DILocation(line: 2464, column: 22, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2464, column: 7)
!4006 = !DILocation(line: 2464, column: 20, scope: !4005)
!4007 = !DILocation(line: 2464, column: 12, scope: !4005)
!4008 = !DILocation(line: 2464, column: 33, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 2464, column: 7)
!4010 = !DILocation(line: 2464, column: 32, scope: !4009)
!4011 = !DILocation(line: 2464, column: 41, scope: !4009)
!4012 = !DILocation(line: 2464, column: 45, scope: !4009)
!4013 = !DILocation(line: 2464, column: 44, scope: !4009)
!4014 = !DILocation(line: 2464, column: 53, scope: !4009)
!4015 = !DILocation(line: 0, scope: !4009)
!4016 = !DILocation(line: 2464, column: 7, scope: !4005)
!4017 = !DILocation(line: 2464, column: 68, scope: !4009)
!4018 = !DILocation(line: 2464, column: 7, scope: !4009)
!4019 = distinct !{!4019, !4016, !4020}
!4020 = !DILocation(line: 2465, column: 21, scope: !4005)
!4021 = !DILocation(line: 2469, column: 16, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2469, column: 7)
!4023 = !DILocation(line: 2469, column: 14, scope: !4022)
!4024 = !DILocation(line: 2469, column: 39, scope: !4022)
!4025 = !DILocation(line: 2469, column: 12, scope: !4022)
!4026 = !DILocation(line: 2469, column: 44, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 2469, column: 7)
!4028 = !DILocation(line: 2469, column: 47, scope: !4027)
!4029 = !DILocation(line: 2469, column: 7, scope: !4022)
!4030 = !DILocation(line: 2470, column: 16, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4027, file: !3, line: 2470, column: 6)
!4032 = !DILocation(line: 2470, column: 19, scope: !4031)
!4033 = !DILocation(line: 2470, column: 25, scope: !4031)
!4034 = !DILocation(line: 2470, column: 35, scope: !4031)
!4035 = !DILocation(line: 2470, column: 45, scope: !4031)
!4036 = !DILocation(line: 2470, column: 43, scope: !4031)
!4037 = !DILocation(line: 2470, column: 7, scope: !4031)
!4038 = !DILocation(line: 2470, column: 6, scope: !4027)
!4039 = !DILocation(line: 2472, column: 26, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 2472, column: 10)
!4041 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 2471, column: 4)
!4042 = !DILocation(line: 2472, column: 36, scope: !4040)
!4043 = !DILocation(line: 2472, column: 34, scope: !4040)
!4044 = !DILocation(line: 2472, column: 10, scope: !4040)
!4045 = !DILocation(line: 2473, column: 29, scope: !4040)
!4046 = !DILocation(line: 2473, column: 32, scope: !4040)
!4047 = !DILocation(line: 2473, column: 21, scope: !4040)
!4048 = !DILocation(line: 2473, column: 6, scope: !4040)
!4049 = !DILocation(line: 2473, column: 3, scope: !4040)
!4050 = !DILocation(line: 2472, column: 10, scope: !4041)
!4051 = !DILocation(line: 2476, column: 12, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 2474, column: 8)
!4053 = !DILocation(line: 2476, column: 10, scope: !4052)
!4054 = !DILocation(line: 2477, column: 14, scope: !4052)
!4055 = !DILocation(line: 2477, column: 12, scope: !4052)
!4056 = !DILocation(line: 2478, column: 9, scope: !4052)
!4057 = !DILocation(line: 2479, column: 3, scope: !4052)
!4058 = !DILocation(line: 2481, column: 15, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 2481, column: 15)
!4060 = !DILocation(line: 2481, column: 22, scope: !4059)
!4061 = !DILocation(line: 2481, column: 15, scope: !4040)
!4062 = !DILocation(line: 2484, column: 12, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4059, file: !3, line: 2482, column: 8)
!4064 = !DILocation(line: 2484, column: 10, scope: !4063)
!4065 = !DILocation(line: 2485, column: 14, scope: !4063)
!4066 = !DILocation(line: 2485, column: 12, scope: !4063)
!4067 = !DILocation(line: 2486, column: 8, scope: !4063)
!4068 = !DILocation(line: 2487, column: 15, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4059, file: !3, line: 2487, column: 15)
!4070 = !DILocation(line: 2488, column: 8, scope: !4069)
!4071 = !DILocation(line: 2488, column: 11, scope: !4069)
!4072 = !DILocation(line: 2488, column: 19, scope: !4069)
!4073 = !DILocation(line: 2488, column: 30, scope: !4069)
!4074 = !DILocation(line: 2488, column: 33, scope: !4069)
!4075 = !DILocation(line: 2488, column: 27, scope: !4069)
!4076 = !DILocation(line: 2489, column: 8, scope: !4069)
!4077 = !DILocation(line: 2489, column: 11, scope: !4069)
!4078 = !DILocation(line: 2489, column: 19, scope: !4069)
!4079 = !DILocation(line: 2489, column: 27, scope: !4069)
!4080 = !DILocation(line: 2489, column: 30, scope: !4069)
!4081 = !DILocation(line: 2489, column: 24, scope: !4069)
!4082 = !DILocation(line: 2490, column: 8, scope: !4069)
!4083 = !DILocation(line: 2490, column: 11, scope: !4069)
!4084 = !DILocation(line: 2490, column: 19, scope: !4069)
!4085 = !DILocation(line: 2490, column: 26, scope: !4069)
!4086 = !DILocation(line: 2490, column: 29, scope: !4069)
!4087 = !DILocation(line: 2490, column: 23, scope: !4069)
!4088 = !DILocation(line: 2487, column: 15, scope: !4059)
!4089 = !DILocation(line: 2492, column: 14, scope: !4069)
!4090 = !DILocation(line: 2492, column: 8, scope: !4069)
!4091 = !DILocation(line: 2493, column: 4, scope: !4041)
!4092 = !DILocation(line: 2470, column: 53, scope: !4031)
!4093 = !DILocation(line: 2469, column: 54, scope: !4027)
!4094 = !DILocation(line: 2469, column: 70, scope: !4027)
!4095 = !DILocation(line: 2469, column: 7, scope: !4027)
!4096 = distinct !{!4096, !4029, !4097}
!4097 = !DILocation(line: 2493, column: 4, scope: !4022)
!4098 = !DILocation(line: 2495, column: 11, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2495, column: 11)
!4100 = !DILocation(line: 2495, column: 17, scope: !4099)
!4101 = !DILocation(line: 2495, column: 21, scope: !4099)
!4102 = !DILocation(line: 2495, column: 11, scope: !3990)
!4103 = !DILocation(line: 2497, column: 8, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 2497, column: 8)
!4105 = distinct !DILexicalBlock(scope: !4099, file: !3, line: 2496, column: 2)
!4106 = !DILocation(line: 2497, column: 8, scope: !4105)
!4107 = !DILocation(line: 2498, column: 15, scope: !4104)
!4108 = !DILocation(line: 2499, column: 8, scope: !4104)
!4109 = !DILocation(line: 2499, column: 17, scope: !4104)
!4110 = !DILocation(line: 2499, column: 22, scope: !4104)
!4111 = !DILocation(line: 2498, column: 6, scope: !4104)
!4112 = !DILocation(line: 2500, column: 24, scope: !4105)
!4113 = !DILocation(line: 2500, column: 16, scope: !4105)
!4114 = !DILocation(line: 2500, column: 13, scope: !4105)
!4115 = !DILocation(line: 2501, column: 10, scope: !4105)
!4116 = !DILocation(line: 2502, column: 11, scope: !4105)
!4117 = !DILocation(line: 2503, column: 4, scope: !4105)
!4118 = !DILocation(line: 2506, column: 11, scope: !4119)
!4119 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2506, column: 11)
!4120 = !DILocation(line: 2506, column: 18, scope: !4119)
!4121 = !DILocation(line: 2506, column: 11, scope: !3990)
!4122 = !DILocation(line: 2508, column: 19, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 2507, column: 2)
!4124 = !DILocation(line: 2508, column: 17, scope: !4123)
!4125 = !DILocation(line: 2509, column: 10, scope: !4123)
!4126 = !DILocation(line: 2510, column: 9, scope: !4127)
!4127 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2510, column: 8)
!4128 = !DILocation(line: 2510, column: 8, scope: !4127)
!4129 = !DILocation(line: 2510, column: 8, scope: !4123)
!4130 = !DILocation(line: 2514, column: 12, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 2514, column: 12)
!4132 = distinct !DILexicalBlock(scope: !4127, file: !3, line: 2511, column: 6)
!4133 = !DILocation(line: 2514, column: 20, scope: !4131)
!4134 = !DILocation(line: 2514, column: 12, scope: !4132)
!4135 = !DILocation(line: 2515, column: 12, scope: !4131)
!4136 = !DILocation(line: 2515, column: 20, scope: !4131)
!4137 = !DILocation(line: 2515, column: 10, scope: !4131)
!4138 = !DILocation(line: 2515, column: 3, scope: !4131)
!4139 = !DILocation(line: 2518, column: 9, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 2518, column: 9)
!4141 = distinct !DILexicalBlock(scope: !4131, file: !3, line: 2517, column: 3)
!4142 = !DILocation(line: 2518, column: 9, scope: !4141)
!4143 = !DILocation(line: 2520, column: 13, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 2520, column: 13)
!4145 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 2519, column: 7)
!4146 = !DILocation(line: 2520, column: 18, scope: !4144)
!4147 = !DILocation(line: 2520, column: 25, scope: !4144)
!4148 = !DILocation(line: 2520, column: 33, scope: !4144)
!4149 = !DILocation(line: 2520, column: 13, scope: !4145)
!4150 = !DILocation(line: 2522, column: 13, scope: !4144)
!4151 = !DILocation(line: 2524, column: 6, scope: !4144)
!4152 = !DILocation(line: 2524, column: 15, scope: !4144)
!4153 = !DILocation(line: 2524, column: 23, scope: !4144)
!4154 = !DILocation(line: 2522, column: 4, scope: !4144)
!4155 = !DILocation(line: 2527, column: 13, scope: !4144)
!4156 = !DILocation(line: 2529, column: 6, scope: !4144)
!4157 = !DILocation(line: 2529, column: 15, scope: !4144)
!4158 = !DILocation(line: 2529, column: 20, scope: !4144)
!4159 = !DILocation(line: 2529, column: 27, scope: !4144)
!4160 = !DILocation(line: 2529, column: 36, scope: !4144)
!4161 = !DILocation(line: 2529, column: 44, scope: !4144)
!4162 = !DILocation(line: 2527, column: 4, scope: !4144)
!4163 = !DILocation(line: 2530, column: 7, scope: !4145)
!4164 = !DILocation(line: 2532, column: 25, scope: !4141)
!4165 = !DILocation(line: 2532, column: 17, scope: !4141)
!4166 = !DILocation(line: 2532, column: 14, scope: !4141)
!4167 = !DILocation(line: 2534, column: 14, scope: !4141)
!4168 = !DILocation(line: 2534, column: 22, scope: !4141)
!4169 = !DILocation(line: 2534, column: 12, scope: !4141)
!4170 = !DILocation(line: 2535, column: 5, scope: !4141)
!4171 = !DILocation(line: 2537, column: 6, scope: !4132)
!4172 = !DILocation(line: 2538, column: 13, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4127, file: !3, line: 2538, column: 13)
!4174 = !DILocation(line: 2538, column: 21, scope: !4173)
!4175 = !DILocation(line: 2538, column: 29, scope: !4173)
!4176 = !DILocation(line: 2538, column: 13, scope: !4127)
!4177 = !DILocation(line: 2540, column: 12, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 2540, column: 12)
!4179 = distinct !DILexicalBlock(scope: !4173, file: !3, line: 2539, column: 6)
!4180 = !DILocation(line: 2540, column: 21, scope: !4178)
!4181 = !DILocation(line: 2540, column: 19, scope: !4178)
!4182 = !DILocation(line: 2540, column: 12, scope: !4179)
!4183 = !DILocation(line: 2541, column: 12, scope: !4178)
!4184 = !DILocation(line: 2541, column: 23, scope: !4178)
!4185 = !DILocation(line: 2541, column: 10, scope: !4178)
!4186 = !DILocation(line: 2541, column: 3, scope: !4178)
!4187 = !DILocation(line: 2544, column: 9, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 2544, column: 9)
!4189 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 2543, column: 3)
!4190 = !DILocation(line: 2544, column: 9, scope: !4189)
!4191 = !DILocation(line: 2545, column: 16, scope: !4188)
!4192 = !DILocation(line: 2547, column: 7, scope: !4188)
!4193 = !DILocation(line: 2547, column: 16, scope: !4188)
!4194 = !DILocation(line: 2547, column: 21, scope: !4188)
!4195 = !DILocation(line: 2547, column: 28, scope: !4188)
!4196 = !DILocation(line: 2545, column: 7, scope: !4188)
!4197 = !DILocation(line: 2548, column: 25, scope: !4189)
!4198 = !DILocation(line: 2548, column: 17, scope: !4189)
!4199 = !DILocation(line: 2548, column: 14, scope: !4189)
!4200 = !DILocation(line: 2549, column: 14, scope: !4189)
!4201 = !DILocation(line: 2549, column: 22, scope: !4189)
!4202 = !DILocation(line: 2549, column: 12, scope: !4189)
!4203 = !DILocation(line: 2550, column: 12, scope: !4189)
!4204 = !DILocation(line: 2550, column: 25, scope: !4189)
!4205 = !DILocation(line: 2550, column: 5, scope: !4189)
!4206 = !DILocation(line: 2552, column: 6, scope: !4179)
!4207 = !DILocation(line: 2553, column: 24, scope: !4123)
!4208 = !DILocation(line: 2553, column: 16, scope: !4123)
!4209 = !DILocation(line: 2553, column: 13, scope: !4123)
!4210 = !DILocation(line: 2554, column: 8, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2554, column: 8)
!4212 = !DILocation(line: 2554, column: 16, scope: !4211)
!4213 = !DILocation(line: 2554, column: 8, scope: !4123)
!4214 = !DILocation(line: 2555, column: 17, scope: !4211)
!4215 = !DILocation(line: 2555, column: 7, scope: !4211)
!4216 = !DILocation(line: 2555, column: 15, scope: !4211)
!4217 = !DILocation(line: 2555, column: 6, scope: !4211)
!4218 = !DILocation(line: 2556, column: 8, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2556, column: 8)
!4220 = !DILocation(line: 2556, column: 16, scope: !4219)
!4221 = !DILocation(line: 2556, column: 8, scope: !4123)
!4222 = !DILocation(line: 2558, column: 26, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 2557, column: 6)
!4224 = !DILocation(line: 2558, column: 34, scope: !4223)
!4225 = !DILocation(line: 2558, column: 10, scope: !4223)
!4226 = !DILocation(line: 2558, column: 18, scope: !4223)
!4227 = !DILocation(line: 2558, column: 24, scope: !4223)
!4228 = !DILocation(line: 2559, column: 8, scope: !4223)
!4229 = !DILocation(line: 2561, column: 11, scope: !4123)
!4230 = !DILocation(line: 2561, column: 19, scope: !4123)
!4231 = !DILocation(line: 2561, column: 4, scope: !4123)
!4232 = !DILocation(line: 2568, column: 12, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2568, column: 11)
!4234 = !DILocation(line: 2568, column: 22, scope: !4233)
!4235 = !DILocation(line: 2568, column: 25, scope: !4233)
!4236 = !DILocation(line: 2568, column: 30, scope: !4233)
!4237 = !DILocation(line: 2568, column: 41, scope: !4233)
!4238 = !DILocation(line: 2569, column: 4, scope: !4233)
!4239 = !DILocation(line: 2569, column: 17, scope: !4233)
!4240 = !DILocation(line: 2569, column: 29, scope: !4233)
!4241 = !DILocation(line: 2569, column: 28, scope: !4233)
!4242 = !DILocation(line: 2569, column: 7, scope: !4233)
!4243 = !DILocation(line: 2569, column: 39, scope: !4233)
!4244 = !DILocation(line: 2568, column: 11, scope: !3990)
!4245 = !DILocation(line: 2571, column: 8, scope: !4246)
!4246 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 2571, column: 8)
!4247 = distinct !DILexicalBlock(scope: !4233, file: !3, line: 2570, column: 2)
!4248 = !DILocation(line: 2571, column: 8, scope: !4247)
!4249 = !DILocation(line: 2573, column: 12, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4251, file: !3, line: 2573, column: 12)
!4251 = distinct !DILexicalBlock(scope: !4246, file: !3, line: 2572, column: 6)
!4252 = !DILocation(line: 2573, column: 17, scope: !4250)
!4253 = !DILocation(line: 2573, column: 28, scope: !4250)
!4254 = !DILocation(line: 2573, column: 12, scope: !4251)
!4255 = !DILocation(line: 2575, column: 12, scope: !4250)
!4256 = !DILocation(line: 2576, column: 5, scope: !4250)
!4257 = !DILocation(line: 2576, column: 14, scope: !4250)
!4258 = !DILocation(line: 2575, column: 3, scope: !4250)
!4259 = !DILocation(line: 2579, column: 12, scope: !4250)
!4260 = !DILocation(line: 2580, column: 5, scope: !4250)
!4261 = !DILocation(line: 2580, column: 14, scope: !4250)
!4262 = !DILocation(line: 2580, column: 19, scope: !4250)
!4263 = !DILocation(line: 2580, column: 31, scope: !4250)
!4264 = !DILocation(line: 2579, column: 3, scope: !4250)
!4265 = !DILocation(line: 2581, column: 6, scope: !4251)
!4266 = !DILocation(line: 2582, column: 13, scope: !4247)
!4267 = !DILocation(line: 2583, column: 10, scope: !4247)
!4268 = !DILocation(line: 2584, column: 11, scope: !4247)
!4269 = !DILocation(line: 2585, column: 4, scope: !4247)
!4270 = !DILocation(line: 2587, column: 5, scope: !3990)
!4271 = !DILocalVariable(name: "c", scope: !4272, file: !3, line: 2592, type: !20)
!4272 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 2591, column: 3)
!4273 = !DILocation(line: 2592, column: 10, scope: !4272)
!4274 = !DILocation(line: 2592, column: 23, scope: !4272)
!4275 = !DILocation(line: 2592, column: 14, scope: !4272)
!4276 = !DILocalVariable(name: "temp", scope: !4272, file: !3, line: 2593, type: !19)
!4277 = !DILocation(line: 2593, column: 11, scope: !4272)
!4278 = !DILocation(line: 2593, column: 28, scope: !4272)
!4279 = !DILocation(line: 2593, column: 39, scope: !4272)
!4280 = !DILocation(line: 2593, column: 18, scope: !4272)
!4281 = !DILocation(line: 2596, column: 10, scope: !4282)
!4282 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 2596, column: 9)
!4283 = !DILocation(line: 2596, column: 9, scope: !4282)
!4284 = !DILocation(line: 2596, column: 19, scope: !4282)
!4285 = !DILocation(line: 2596, column: 9, scope: !4272)
!4286 = !DILocation(line: 2597, column: 7, scope: !4282)
!4287 = !DILocation(line: 2599, column: 9, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 2599, column: 9)
!4289 = !DILocation(line: 2599, column: 14, scope: !4288)
!4290 = !DILocation(line: 2599, column: 22, scope: !4288)
!4291 = !DILocation(line: 2599, column: 25, scope: !4288)
!4292 = !DILocation(line: 2599, column: 27, scope: !4288)
!4293 = !DILocation(line: 2599, column: 9, scope: !4272)
!4294 = !DILocation(line: 2601, column: 6, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4296, file: !3, line: 2601, column: 6)
!4296 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 2600, column: 7)
!4297 = !DILocation(line: 2601, column: 6, scope: !4296)
!4298 = !DILocation(line: 2603, column: 10, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 2603, column: 10)
!4300 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 2602, column: 4)
!4301 = !DILocation(line: 2603, column: 10, scope: !4300)
!4302 = !DILocation(line: 2605, column: 17, scope: !4299)
!4303 = !DILocation(line: 2606, column: 10, scope: !4299)
!4304 = !DILocation(line: 2606, column: 19, scope: !4299)
!4305 = !DILocation(line: 2605, column: 8, scope: !4299)
!4306 = !DILocation(line: 2608, column: 17, scope: !4299)
!4307 = !DILocation(line: 2609, column: 10, scope: !4299)
!4308 = !DILocation(line: 2609, column: 19, scope: !4299)
!4309 = !DILocation(line: 2608, column: 8, scope: !4299)
!4310 = !DILocation(line: 2610, column: 4, scope: !4300)
!4311 = !DILocation(line: 2611, column: 11, scope: !4296)
!4312 = !DILocation(line: 2611, column: 9, scope: !4296)
!4313 = !DILocation(line: 2612, column: 2, scope: !4296)
!4314 = !DILocation(line: 2615, column: 9, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 2615, column: 9)
!4316 = !DILocation(line: 2615, column: 17, scope: !4315)
!4317 = !DILocation(line: 2615, column: 24, scope: !4315)
!4318 = !DILocation(line: 2615, column: 27, scope: !4315)
!4319 = !DILocation(line: 2615, column: 35, scope: !4315)
!4320 = !DILocation(line: 2615, column: 9, scope: !4272)
!4321 = !DILocalVariable(name: "nameend", scope: !4322, file: !3, line: 2617, type: !19)
!4322 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 2616, column: 7)
!4323 = !DILocation(line: 2617, column: 8, scope: !4322)
!4324 = !DILocalVariable(name: "p", scope: !4322, file: !3, line: 2618, type: !24)
!4325 = !DILocation(line: 2618, column: 23, scope: !4322)
!4326 = !DILocalVariable(name: "pfound", scope: !4322, file: !3, line: 2619, type: !24)
!4327 = !DILocation(line: 2619, column: 23, scope: !4322)
!4328 = !DILocalVariable(name: "exact", scope: !4322, file: !3, line: 2620, type: !12)
!4329 = !DILocation(line: 2620, column: 6, scope: !4322)
!4330 = !DILocalVariable(name: "ambig", scope: !4322, file: !3, line: 2621, type: !12)
!4331 = !DILocation(line: 2621, column: 6, scope: !4322)
!4332 = !DILocalVariable(name: "indfound", scope: !4322, file: !3, line: 2622, type: !12)
!4333 = !DILocation(line: 2622, column: 6, scope: !4322)
!4334 = !DILocalVariable(name: "option_index", scope: !4322, file: !3, line: 2623, type: !12)
!4335 = !DILocation(line: 2623, column: 6, scope: !4322)
!4336 = !DILocation(line: 2626, column: 7, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2626, column: 6)
!4338 = !DILocation(line: 2626, column: 6, scope: !4337)
!4339 = !DILocation(line: 2626, column: 16, scope: !4337)
!4340 = !DILocation(line: 2626, column: 6, scope: !4322)
!4341 = !DILocation(line: 2628, column: 15, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 2627, column: 4)
!4343 = !DILocation(line: 2628, column: 13, scope: !4342)
!4344 = !DILocation(line: 2631, column: 12, scope: !4342)
!4345 = !DILocation(line: 2632, column: 4, scope: !4342)
!4346 = !DILocation(line: 2633, column: 11, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 2633, column: 11)
!4348 = !DILocation(line: 2633, column: 21, scope: !4347)
!4349 = !DILocation(line: 2633, column: 18, scope: !4347)
!4350 = !DILocation(line: 2633, column: 11, scope: !4337)
!4351 = !DILocation(line: 2635, column: 10, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 2635, column: 10)
!4353 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 2634, column: 4)
!4354 = !DILocation(line: 2635, column: 10, scope: !4353)
!4355 = !DILocation(line: 2638, column: 12, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 2636, column: 8)
!4357 = !DILocation(line: 2639, column: 5, scope: !4356)
!4358 = !DILocation(line: 2639, column: 14, scope: !4356)
!4359 = !DILocation(line: 2638, column: 3, scope: !4356)
!4360 = !DILocation(line: 2640, column: 8, scope: !4356)
!4361 = !DILocation(line: 2641, column: 15, scope: !4353)
!4362 = !DILocation(line: 2641, column: 13, scope: !4353)
!4363 = !DILocation(line: 2642, column: 10, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 2642, column: 10)
!4365 = !DILocation(line: 2642, column: 23, scope: !4364)
!4366 = !DILocation(line: 2642, column: 10, scope: !4353)
!4367 = !DILocation(line: 2643, column: 10, scope: !4364)
!4368 = !DILocation(line: 2643, column: 8, scope: !4364)
!4369 = !DILocation(line: 2645, column: 10, scope: !4364)
!4370 = !DILocation(line: 2646, column: 13, scope: !4353)
!4371 = !DILocation(line: 2646, column: 6, scope: !4353)
!4372 = !DILocation(line: 2651, column: 13, scope: !4347)
!4373 = !DILocation(line: 2651, column: 24, scope: !4347)
!4374 = !DILocation(line: 2651, column: 11, scope: !4347)
!4375 = !DILocation(line: 2656, column: 28, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2656, column: 2)
!4377 = !DILocation(line: 2656, column: 26, scope: !4376)
!4378 = !DILocation(line: 2656, column: 16, scope: !4376)
!4379 = !DILocation(line: 2656, column: 7, scope: !4376)
!4380 = !DILocation(line: 2656, column: 37, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2656, column: 2)
!4382 = !DILocation(line: 2656, column: 36, scope: !4381)
!4383 = !DILocation(line: 2656, column: 45, scope: !4381)
!4384 = !DILocation(line: 2656, column: 49, scope: !4381)
!4385 = !DILocation(line: 2656, column: 48, scope: !4381)
!4386 = !DILocation(line: 2656, column: 57, scope: !4381)
!4387 = !DILocation(line: 0, scope: !4381)
!4388 = !DILocation(line: 2656, column: 2, scope: !4376)
!4389 = !DILocation(line: 2656, column: 72, scope: !4381)
!4390 = !DILocation(line: 2656, column: 2, scope: !4381)
!4391 = distinct !{!4391, !4388, !4392}
!4392 = !DILocation(line: 2657, column: 23, scope: !4376)
!4393 = !DILocation(line: 2661, column: 11, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2661, column: 2)
!4395 = !DILocation(line: 2661, column: 9, scope: !4394)
!4396 = !DILocation(line: 2661, column: 34, scope: !4394)
!4397 = !DILocation(line: 2661, column: 7, scope: !4394)
!4398 = !DILocation(line: 2661, column: 39, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 2661, column: 2)
!4400 = !DILocation(line: 2661, column: 42, scope: !4399)
!4401 = !DILocation(line: 2661, column: 2, scope: !4394)
!4402 = !DILocation(line: 2662, column: 18, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 2662, column: 8)
!4404 = !DILocation(line: 2662, column: 21, scope: !4403)
!4405 = !DILocation(line: 2662, column: 27, scope: !4403)
!4406 = !DILocation(line: 2662, column: 37, scope: !4403)
!4407 = !DILocation(line: 2662, column: 47, scope: !4403)
!4408 = !DILocation(line: 2662, column: 45, scope: !4403)
!4409 = !DILocation(line: 2662, column: 9, scope: !4403)
!4410 = !DILocation(line: 2662, column: 8, scope: !4399)
!4411 = !DILocation(line: 2664, column: 28, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4413, file: !3, line: 2664, column: 12)
!4413 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 2663, column: 6)
!4414 = !DILocation(line: 2664, column: 38, scope: !4412)
!4415 = !DILocation(line: 2664, column: 36, scope: !4412)
!4416 = !DILocation(line: 2664, column: 12, scope: !4412)
!4417 = !DILocation(line: 2664, column: 59, scope: !4412)
!4418 = !DILocation(line: 2664, column: 62, scope: !4412)
!4419 = !DILocation(line: 2664, column: 51, scope: !4412)
!4420 = !DILocation(line: 2664, column: 48, scope: !4412)
!4421 = !DILocation(line: 2664, column: 12, scope: !4413)
!4422 = !DILocation(line: 2667, column: 14, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 2665, column: 3)
!4424 = !DILocation(line: 2667, column: 12, scope: !4423)
!4425 = !DILocation(line: 2668, column: 16, scope: !4423)
!4426 = !DILocation(line: 2668, column: 14, scope: !4423)
!4427 = !DILocation(line: 2669, column: 11, scope: !4423)
!4428 = !DILocation(line: 2670, column: 5, scope: !4423)
!4429 = !DILocation(line: 2672, column: 17, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 2672, column: 17)
!4431 = !DILocation(line: 2672, column: 24, scope: !4430)
!4432 = !DILocation(line: 2672, column: 17, scope: !4412)
!4433 = !DILocation(line: 2675, column: 14, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 2673, column: 3)
!4435 = !DILocation(line: 2675, column: 12, scope: !4434)
!4436 = !DILocation(line: 2676, column: 16, scope: !4434)
!4437 = !DILocation(line: 2676, column: 14, scope: !4434)
!4438 = !DILocation(line: 2677, column: 3, scope: !4434)
!4439 = !DILocation(line: 2680, column: 9, scope: !4430)
!4440 = !DILocation(line: 2681, column: 6, scope: !4413)
!4441 = !DILocation(line: 2662, column: 55, scope: !4403)
!4442 = !DILocation(line: 2661, column: 49, scope: !4399)
!4443 = !DILocation(line: 2661, column: 65, scope: !4399)
!4444 = !DILocation(line: 2661, column: 2, scope: !4399)
!4445 = distinct !{!4445, !4401, !4446}
!4446 = !DILocation(line: 2681, column: 6, scope: !4394)
!4447 = !DILocation(line: 2682, column: 6, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2682, column: 6)
!4449 = !DILocation(line: 2682, column: 12, scope: !4448)
!4450 = !DILocation(line: 2682, column: 16, scope: !4448)
!4451 = !DILocation(line: 2682, column: 6, scope: !4322)
!4452 = !DILocation(line: 2684, column: 10, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 2684, column: 10)
!4454 = distinct !DILexicalBlock(scope: !4448, file: !3, line: 2683, column: 4)
!4455 = !DILocation(line: 2684, column: 10, scope: !4454)
!4456 = !DILocation(line: 2685, column: 17, scope: !4453)
!4457 = !DILocation(line: 2686, column: 10, scope: !4453)
!4458 = !DILocation(line: 2686, column: 19, scope: !4453)
!4459 = !DILocation(line: 2686, column: 24, scope: !4453)
!4460 = !DILocation(line: 2685, column: 8, scope: !4453)
!4461 = !DILocation(line: 2687, column: 26, scope: !4454)
!4462 = !DILocation(line: 2687, column: 18, scope: !4454)
!4463 = !DILocation(line: 2687, column: 15, scope: !4454)
!4464 = !DILocation(line: 2688, column: 12, scope: !4454)
!4465 = !DILocation(line: 2689, column: 6, scope: !4454)
!4466 = !DILocation(line: 2691, column: 6, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2691, column: 6)
!4468 = !DILocation(line: 2691, column: 13, scope: !4467)
!4469 = !DILocation(line: 2691, column: 6, scope: !4322)
!4470 = !DILocation(line: 2693, column: 21, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4467, file: !3, line: 2692, column: 4)
!4472 = !DILocation(line: 2693, column: 19, scope: !4471)
!4473 = !DILocation(line: 2694, column: 11, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2694, column: 10)
!4475 = !DILocation(line: 2694, column: 10, scope: !4474)
!4476 = !DILocation(line: 2694, column: 10, scope: !4471)
!4477 = !DILocation(line: 2698, column: 7, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4479, file: !3, line: 2698, column: 7)
!4479 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 2695, column: 8)
!4480 = !DILocation(line: 2698, column: 15, scope: !4478)
!4481 = !DILocation(line: 2698, column: 7, scope: !4479)
!4482 = !DILocation(line: 2699, column: 14, scope: !4478)
!4483 = !DILocation(line: 2699, column: 22, scope: !4478)
!4484 = !DILocation(line: 2699, column: 12, scope: !4478)
!4485 = !DILocation(line: 2699, column: 5, scope: !4478)
!4486 = !DILocation(line: 2702, column: 11, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 2702, column: 11)
!4488 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 2701, column: 5)
!4489 = !DILocation(line: 2702, column: 11, scope: !4488)
!4490 = !DILocation(line: 2703, column: 18, scope: !4487)
!4491 = !DILocation(line: 2705, column: 11, scope: !4487)
!4492 = !DILocation(line: 2705, column: 20, scope: !4487)
!4493 = !DILocation(line: 2705, column: 28, scope: !4487)
!4494 = !DILocation(line: 2703, column: 9, scope: !4487)
!4495 = !DILocation(line: 2707, column: 27, scope: !4488)
!4496 = !DILocation(line: 2707, column: 19, scope: !4488)
!4497 = !DILocation(line: 2707, column: 16, scope: !4488)
!4498 = !DILocation(line: 2708, column: 7, scope: !4488)
!4499 = !DILocation(line: 2710, column: 8, scope: !4479)
!4500 = !DILocation(line: 2711, column: 15, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 2711, column: 15)
!4502 = !DILocation(line: 2711, column: 23, scope: !4501)
!4503 = !DILocation(line: 2711, column: 31, scope: !4501)
!4504 = !DILocation(line: 2711, column: 15, scope: !4474)
!4505 = !DILocation(line: 2713, column: 7, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4507, file: !3, line: 2713, column: 7)
!4507 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 2712, column: 8)
!4508 = !DILocation(line: 2713, column: 16, scope: !4506)
!4509 = !DILocation(line: 2713, column: 14, scope: !4506)
!4510 = !DILocation(line: 2713, column: 7, scope: !4507)
!4511 = !DILocation(line: 2714, column: 14, scope: !4506)
!4512 = !DILocation(line: 2714, column: 25, scope: !4506)
!4513 = !DILocation(line: 2714, column: 12, scope: !4506)
!4514 = !DILocation(line: 2714, column: 5, scope: !4506)
!4515 = !DILocation(line: 2717, column: 11, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 2717, column: 11)
!4517 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 2716, column: 5)
!4518 = !DILocation(line: 2717, column: 11, scope: !4517)
!4519 = !DILocation(line: 2718, column: 18, scope: !4516)
!4520 = !DILocation(line: 2720, column: 11, scope: !4516)
!4521 = !DILocation(line: 2720, column: 20, scope: !4516)
!4522 = !DILocation(line: 2720, column: 25, scope: !4516)
!4523 = !DILocation(line: 2720, column: 32, scope: !4516)
!4524 = !DILocation(line: 2718, column: 9, scope: !4516)
!4525 = !DILocation(line: 2721, column: 27, scope: !4517)
!4526 = !DILocation(line: 2721, column: 19, scope: !4517)
!4527 = !DILocation(line: 2721, column: 16, scope: !4517)
!4528 = !DILocation(line: 2722, column: 14, scope: !4517)
!4529 = !DILocation(line: 2722, column: 27, scope: !4517)
!4530 = !DILocation(line: 2722, column: 7, scope: !4517)
!4531 = !DILocation(line: 2724, column: 8, scope: !4507)
!4532 = !DILocation(line: 2725, column: 26, scope: !4471)
!4533 = !DILocation(line: 2725, column: 18, scope: !4471)
!4534 = !DILocation(line: 2725, column: 15, scope: !4471)
!4535 = !DILocation(line: 2726, column: 10, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2726, column: 10)
!4537 = !DILocation(line: 2726, column: 18, scope: !4536)
!4538 = !DILocation(line: 2726, column: 10, scope: !4471)
!4539 = !DILocation(line: 2727, column: 19, scope: !4536)
!4540 = !DILocation(line: 2727, column: 9, scope: !4536)
!4541 = !DILocation(line: 2727, column: 17, scope: !4536)
!4542 = !DILocation(line: 2727, column: 8, scope: !4536)
!4543 = !DILocation(line: 2728, column: 10, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 2728, column: 10)
!4545 = !DILocation(line: 2728, column: 18, scope: !4544)
!4546 = !DILocation(line: 2728, column: 10, scope: !4471)
!4547 = !DILocation(line: 2730, column: 21, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4544, file: !3, line: 2729, column: 8)
!4549 = !DILocation(line: 2730, column: 29, scope: !4548)
!4550 = !DILocation(line: 2730, column: 5, scope: !4548)
!4551 = !DILocation(line: 2730, column: 13, scope: !4548)
!4552 = !DILocation(line: 2730, column: 19, scope: !4548)
!4553 = !DILocation(line: 2731, column: 3, scope: !4548)
!4554 = !DILocation(line: 2733, column: 13, scope: !4471)
!4555 = !DILocation(line: 2733, column: 21, scope: !4471)
!4556 = !DILocation(line: 2733, column: 6, scope: !4471)
!4557 = !DILocation(line: 2735, column: 13, scope: !4322)
!4558 = !DILocation(line: 2736, column: 4, scope: !4322)
!4559 = !DILocation(line: 2738, column: 9, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 2738, column: 9)
!4561 = !DILocation(line: 2738, column: 17, scope: !4560)
!4562 = !DILocation(line: 2738, column: 9, scope: !4272)
!4563 = !DILocation(line: 2740, column: 6, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 2740, column: 6)
!4565 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 2739, column: 7)
!4566 = !DILocation(line: 2740, column: 14, scope: !4564)
!4567 = !DILocation(line: 2740, column: 6, scope: !4565)
!4568 = !DILocation(line: 2743, column: 11, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4570, file: !3, line: 2743, column: 10)
!4570 = distinct !DILexicalBlock(scope: !4564, file: !3, line: 2741, column: 4)
!4571 = !DILocation(line: 2743, column: 10, scope: !4569)
!4572 = !DILocation(line: 2743, column: 20, scope: !4569)
!4573 = !DILocation(line: 2743, column: 10, scope: !4570)
!4574 = !DILocation(line: 2745, column: 12, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 2744, column: 8)
!4576 = !DILocation(line: 2745, column: 10, scope: !4575)
!4577 = !DILocation(line: 2746, column: 9, scope: !4575)
!4578 = !DILocation(line: 2747, column: 8, scope: !4575)
!4579 = !DILocation(line: 2749, column: 15, scope: !4569)
!4580 = !DILocation(line: 2750, column: 15, scope: !4570)
!4581 = !DILocation(line: 2751, column: 4, scope: !4570)
!4582 = !DILocation(line: 2755, column: 11, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 2755, column: 10)
!4584 = distinct !DILexicalBlock(scope: !4564, file: !3, line: 2753, column: 4)
!4585 = !DILocation(line: 2755, column: 10, scope: !4583)
!4586 = !DILocation(line: 2755, column: 20, scope: !4583)
!4587 = !DILocation(line: 2755, column: 10, scope: !4584)
!4588 = !DILocation(line: 2757, column: 12, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 2756, column: 8)
!4590 = !DILocation(line: 2757, column: 10, scope: !4589)
!4591 = !DILocation(line: 2760, column: 9, scope: !4589)
!4592 = !DILocation(line: 2761, column: 8, scope: !4589)
!4593 = !DILocation(line: 2762, column: 15, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 2762, column: 15)
!4595 = !DILocation(line: 2762, column: 25, scope: !4594)
!4596 = !DILocation(line: 2762, column: 22, scope: !4594)
!4597 = !DILocation(line: 2762, column: 15, scope: !4583)
!4598 = !DILocation(line: 2764, column: 7, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4600, file: !3, line: 2764, column: 7)
!4600 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2763, column: 8)
!4601 = !DILocation(line: 2764, column: 7, scope: !4600)
!4602 = !DILocation(line: 2767, column: 16, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 2765, column: 5)
!4604 = !DILocation(line: 2769, column: 9, scope: !4603)
!4605 = !DILocation(line: 2769, column: 18, scope: !4603)
!4606 = !DILocation(line: 2767, column: 7, scope: !4603)
!4607 = !DILocation(line: 2770, column: 5, scope: !4603)
!4608 = !DILocation(line: 2771, column: 12, scope: !4600)
!4609 = !DILocation(line: 2771, column: 10, scope: !4600)
!4610 = !DILocation(line: 2772, column: 7, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4600, file: !3, line: 2772, column: 7)
!4612 = !DILocation(line: 2772, column: 20, scope: !4611)
!4613 = !DILocation(line: 2772, column: 7, scope: !4600)
!4614 = !DILocation(line: 2773, column: 7, scope: !4611)
!4615 = !DILocation(line: 2773, column: 5, scope: !4611)
!4616 = !DILocation(line: 2775, column: 7, scope: !4611)
!4617 = !DILocation(line: 2776, column: 8, scope: !4600)
!4618 = !DILocation(line: 2780, column: 17, scope: !4594)
!4619 = !DILocation(line: 2780, column: 28, scope: !4594)
!4620 = !DILocation(line: 2780, column: 15, scope: !4594)
!4621 = !DILocation(line: 2781, column: 15, scope: !4584)
!4622 = !DILocation(line: 2783, column: 7, scope: !4565)
!4623 = !DILocation(line: 2784, column: 12, scope: !4272)
!4624 = !DILocation(line: 2784, column: 5, scope: !4272)
!4625 = !DILocation(line: 2786, column: 1, scope: !3784)
!4626 = distinct !DISubprogram(name: "_getopt_initialize", scope: !3, file: !3, line: 2201, type: !4627, scopeLine: 2205, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!4627 = !DISubroutineType(types: !4628)
!4628 = !{!29, !12, !167, !29}
!4629 = !DILocalVariable(name: "argc", arg: 1, scope: !4626, file: !3, line: 2202, type: !12)
!4630 = !DILocation(line: 2202, column: 10, scope: !4626)
!4631 = !DILocalVariable(name: "argv", arg: 2, scope: !4626, file: !3, line: 2203, type: !167)
!4632 = !DILocation(line: 2203, column: 19, scope: !4626)
!4633 = !DILocalVariable(name: "optstring", arg: 3, scope: !4626, file: !3, line: 2204, type: !29)
!4634 = !DILocation(line: 2204, column: 18, scope: !4626)
!4635 = !DILocation(line: 2210, column: 32, scope: !4626)
!4636 = !DILocation(line: 2210, column: 30, scope: !4626)
!4637 = !DILocation(line: 2210, column: 16, scope: !4626)
!4638 = !DILocation(line: 2212, column: 12, scope: !4626)
!4639 = !DILocation(line: 2214, column: 21, scope: !4626)
!4640 = !DILocation(line: 2214, column: 19, scope: !4626)
!4641 = !DILocation(line: 2218, column: 7, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 2218, column: 7)
!4643 = !DILocation(line: 2218, column: 20, scope: !4642)
!4644 = !DILocation(line: 2218, column: 7, scope: !4626)
!4645 = !DILocation(line: 2220, column: 16, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 2219, column: 5)
!4647 = !DILocation(line: 2221, column: 7, scope: !4646)
!4648 = !DILocation(line: 2222, column: 5, scope: !4646)
!4649 = !DILocation(line: 2223, column: 12, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 2223, column: 12)
!4651 = !DILocation(line: 2223, column: 25, scope: !4650)
!4652 = !DILocation(line: 2223, column: 12, scope: !4642)
!4653 = !DILocation(line: 2225, column: 16, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2224, column: 5)
!4655 = !DILocation(line: 2226, column: 7, scope: !4654)
!4656 = !DILocation(line: 2227, column: 5, scope: !4654)
!4657 = !DILocation(line: 2228, column: 12, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2228, column: 12)
!4659 = !DILocation(line: 2228, column: 28, scope: !4658)
!4660 = !DILocation(line: 2228, column: 12, scope: !4650)
!4661 = !DILocation(line: 2229, column: 14, scope: !4658)
!4662 = !DILocation(line: 2229, column: 5, scope: !4658)
!4663 = !DILocation(line: 2231, column: 14, scope: !4658)
!4664 = !DILocation(line: 2263, column: 10, scope: !4626)
!4665 = !DILocation(line: 2263, column: 3, scope: !4626)
!4666 = distinct !DISubprogram(name: "exchange", scope: !3, file: !3, line: 2116, type: !4667, scopeLine: 2118, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{null, !23}
!4669 = !DILocalVariable(name: "argv", arg: 1, scope: !4666, file: !3, line: 2117, type: !23)
!4670 = !DILocation(line: 2117, column: 13, scope: !4666)
!4671 = !DILocalVariable(name: "bottom", scope: !4666, file: !3, line: 2119, type: !12)
!4672 = !DILocation(line: 2119, column: 7, scope: !4666)
!4673 = !DILocation(line: 2119, column: 16, scope: !4666)
!4674 = !DILocalVariable(name: "middle", scope: !4666, file: !3, line: 2120, type: !12)
!4675 = !DILocation(line: 2120, column: 7, scope: !4666)
!4676 = !DILocation(line: 2120, column: 16, scope: !4666)
!4677 = !DILocalVariable(name: "top", scope: !4666, file: !3, line: 2121, type: !12)
!4678 = !DILocation(line: 2121, column: 7, scope: !4666)
!4679 = !DILocation(line: 2121, column: 13, scope: !4666)
!4680 = !DILocalVariable(name: "tem", scope: !4666, file: !3, line: 2122, type: !19)
!4681 = !DILocation(line: 2122, column: 9, scope: !4666)
!4682 = !DILocation(line: 2151, column: 3, scope: !4666)
!4683 = !DILocation(line: 2151, column: 10, scope: !4666)
!4684 = !DILocation(line: 2151, column: 16, scope: !4666)
!4685 = !DILocation(line: 2151, column: 14, scope: !4666)
!4686 = !DILocation(line: 2151, column: 23, scope: !4666)
!4687 = !DILocation(line: 2151, column: 26, scope: !4666)
!4688 = !DILocation(line: 2151, column: 35, scope: !4666)
!4689 = !DILocation(line: 2151, column: 33, scope: !4666)
!4690 = !DILocation(line: 0, scope: !4666)
!4691 = !DILocation(line: 2153, column: 11, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 2153, column: 11)
!4693 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 2152, column: 5)
!4694 = !DILocation(line: 2153, column: 17, scope: !4692)
!4695 = !DILocation(line: 2153, column: 15, scope: !4692)
!4696 = !DILocation(line: 2153, column: 26, scope: !4692)
!4697 = !DILocation(line: 2153, column: 35, scope: !4692)
!4698 = !DILocation(line: 2153, column: 33, scope: !4692)
!4699 = !DILocation(line: 2153, column: 24, scope: !4692)
!4700 = !DILocation(line: 2153, column: 11, scope: !4693)
!4701 = !DILocalVariable(name: "len", scope: !4702, file: !3, line: 2156, type: !12)
!4702 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 2154, column: 2)
!4703 = !DILocation(line: 2156, column: 8, scope: !4702)
!4704 = !DILocation(line: 2156, column: 14, scope: !4702)
!4705 = !DILocation(line: 2156, column: 23, scope: !4702)
!4706 = !DILocation(line: 2156, column: 21, scope: !4702)
!4707 = !DILocalVariable(name: "i", scope: !4702, file: !3, line: 2157, type: !12)
!4708 = !DILocation(line: 2157, column: 17, scope: !4702)
!4709 = !DILocation(line: 2160, column: 11, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 2160, column: 4)
!4711 = !DILocation(line: 2160, column: 9, scope: !4710)
!4712 = !DILocation(line: 2160, column: 16, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 2160, column: 4)
!4714 = !DILocation(line: 2160, column: 20, scope: !4713)
!4715 = !DILocation(line: 2160, column: 18, scope: !4713)
!4716 = !DILocation(line: 2160, column: 4, scope: !4710)
!4717 = !DILocation(line: 2162, column: 14, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 2161, column: 6)
!4719 = !DILocation(line: 2162, column: 19, scope: !4718)
!4720 = !DILocation(line: 2162, column: 28, scope: !4718)
!4721 = !DILocation(line: 2162, column: 26, scope: !4718)
!4722 = !DILocation(line: 2162, column: 12, scope: !4718)
!4723 = !DILocation(line: 2163, column: 27, scope: !4718)
!4724 = !DILocation(line: 2163, column: 32, scope: !4718)
!4725 = !DILocation(line: 2163, column: 39, scope: !4718)
!4726 = !DILocation(line: 2163, column: 48, scope: !4718)
!4727 = !DILocation(line: 2163, column: 46, scope: !4718)
!4728 = !DILocation(line: 2163, column: 36, scope: !4718)
!4729 = !DILocation(line: 2163, column: 58, scope: !4718)
!4730 = !DILocation(line: 2163, column: 56, scope: !4718)
!4731 = !DILocation(line: 2163, column: 8, scope: !4718)
!4732 = !DILocation(line: 2163, column: 13, scope: !4718)
!4733 = !DILocation(line: 2163, column: 22, scope: !4718)
!4734 = !DILocation(line: 2163, column: 20, scope: !4718)
!4735 = !DILocation(line: 2163, column: 25, scope: !4718)
!4736 = !DILocation(line: 2164, column: 44, scope: !4718)
!4737 = !DILocation(line: 2164, column: 8, scope: !4718)
!4738 = !DILocation(line: 2164, column: 13, scope: !4718)
!4739 = !DILocation(line: 2164, column: 20, scope: !4718)
!4740 = !DILocation(line: 2164, column: 29, scope: !4718)
!4741 = !DILocation(line: 2164, column: 27, scope: !4718)
!4742 = !DILocation(line: 2164, column: 17, scope: !4718)
!4743 = !DILocation(line: 2164, column: 39, scope: !4718)
!4744 = !DILocation(line: 2164, column: 37, scope: !4718)
!4745 = !DILocation(line: 2164, column: 42, scope: !4718)
!4746 = !DILocation(line: 2166, column: 6, scope: !4718)
!4747 = !DILocation(line: 2160, column: 26, scope: !4713)
!4748 = !DILocation(line: 2160, column: 4, scope: !4713)
!4749 = distinct !{!4749, !4716, !4750}
!4750 = !DILocation(line: 2166, column: 6, scope: !4710)
!4751 = !DILocation(line: 2168, column: 11, scope: !4702)
!4752 = !DILocation(line: 2168, column: 8, scope: !4702)
!4753 = !DILocation(line: 2169, column: 2, scope: !4702)
!4754 = !DILocalVariable(name: "len", scope: !4755, file: !3, line: 2173, type: !12)
!4755 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 2171, column: 2)
!4756 = !DILocation(line: 2173, column: 8, scope: !4755)
!4757 = !DILocation(line: 2173, column: 14, scope: !4755)
!4758 = !DILocation(line: 2173, column: 20, scope: !4755)
!4759 = !DILocation(line: 2173, column: 18, scope: !4755)
!4760 = !DILocalVariable(name: "i", scope: !4755, file: !3, line: 2174, type: !12)
!4761 = !DILocation(line: 2174, column: 17, scope: !4755)
!4762 = !DILocation(line: 2177, column: 11, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 2177, column: 4)
!4764 = !DILocation(line: 2177, column: 9, scope: !4763)
!4765 = !DILocation(line: 2177, column: 16, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 2177, column: 4)
!4767 = !DILocation(line: 2177, column: 20, scope: !4766)
!4768 = !DILocation(line: 2177, column: 18, scope: !4766)
!4769 = !DILocation(line: 2177, column: 4, scope: !4763)
!4770 = !DILocation(line: 2179, column: 14, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 2178, column: 6)
!4772 = !DILocation(line: 2179, column: 19, scope: !4771)
!4773 = !DILocation(line: 2179, column: 28, scope: !4771)
!4774 = !DILocation(line: 2179, column: 26, scope: !4771)
!4775 = !DILocation(line: 2179, column: 12, scope: !4771)
!4776 = !DILocation(line: 2180, column: 27, scope: !4771)
!4777 = !DILocation(line: 2180, column: 32, scope: !4771)
!4778 = !DILocation(line: 2180, column: 41, scope: !4771)
!4779 = !DILocation(line: 2180, column: 39, scope: !4771)
!4780 = !DILocation(line: 2180, column: 8, scope: !4771)
!4781 = !DILocation(line: 2180, column: 13, scope: !4771)
!4782 = !DILocation(line: 2180, column: 22, scope: !4771)
!4783 = !DILocation(line: 2180, column: 20, scope: !4771)
!4784 = !DILocation(line: 2180, column: 25, scope: !4771)
!4785 = !DILocation(line: 2181, column: 27, scope: !4771)
!4786 = !DILocation(line: 2181, column: 8, scope: !4771)
!4787 = !DILocation(line: 2181, column: 13, scope: !4771)
!4788 = !DILocation(line: 2181, column: 22, scope: !4771)
!4789 = !DILocation(line: 2181, column: 20, scope: !4771)
!4790 = !DILocation(line: 2181, column: 25, scope: !4771)
!4791 = !DILocation(line: 2183, column: 6, scope: !4771)
!4792 = !DILocation(line: 2177, column: 26, scope: !4766)
!4793 = !DILocation(line: 2177, column: 4, scope: !4766)
!4794 = distinct !{!4794, !4769, !4795}
!4795 = !DILocation(line: 2183, column: 6, scope: !4763)
!4796 = !DILocation(line: 2185, column: 14, scope: !4755)
!4797 = !DILocation(line: 2185, column: 11, scope: !4755)
!4798 = distinct !{!4798, !4682, !4799}
!4799 = !DILocation(line: 2187, column: 5, scope: !4666)
!4800 = !DILocation(line: 2191, column: 20, scope: !4666)
!4801 = !DILocation(line: 2191, column: 29, scope: !4666)
!4802 = !DILocation(line: 2191, column: 27, scope: !4666)
!4803 = !DILocation(line: 2191, column: 16, scope: !4666)
!4804 = !DILocation(line: 2192, column: 17, scope: !4666)
!4805 = !DILocation(line: 2192, column: 15, scope: !4666)
!4806 = !DILocation(line: 2193, column: 1, scope: !4666)
!4807 = distinct !DISubprogram(name: "my_index", scope: !3, file: !3, line: 2021, type: !4808, scopeLine: 2024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!4808 = !DISubroutineType(types: !4809)
!4809 = !{!19, !29, !12}
!4810 = !DILocalVariable(name: "str", arg: 1, scope: !4807, file: !3, line: 2022, type: !29)
!4811 = !DILocation(line: 2022, column: 18, scope: !4807)
!4812 = !DILocalVariable(name: "chr", arg: 2, scope: !4807, file: !3, line: 2023, type: !12)
!4813 = !DILocation(line: 2023, column: 10, scope: !4807)
!4814 = !DILocation(line: 2025, column: 3, scope: !4807)
!4815 = !DILocation(line: 2025, column: 11, scope: !4807)
!4816 = !DILocation(line: 2025, column: 10, scope: !4807)
!4817 = !DILocation(line: 2027, column: 12, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 2027, column: 11)
!4819 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 2026, column: 5)
!4820 = !DILocation(line: 2027, column: 11, scope: !4818)
!4821 = !DILocation(line: 2027, column: 19, scope: !4818)
!4822 = !DILocation(line: 2027, column: 16, scope: !4818)
!4823 = !DILocation(line: 2027, column: 11, scope: !4819)
!4824 = !DILocation(line: 2028, column: 18, scope: !4818)
!4825 = !DILocation(line: 2028, column: 2, scope: !4818)
!4826 = !DILocation(line: 2029, column: 10, scope: !4819)
!4827 = distinct !{!4827, !4814, !4828}
!4828 = !DILocation(line: 2030, column: 5, scope: !4807)
!4829 = !DILocation(line: 2031, column: 3, scope: !4807)
!4830 = !DILocation(line: 2032, column: 1, scope: !4807)
!4831 = distinct !DISubprogram(name: "getopt", scope: !3, file: !3, line: 2789, type: !4832, scopeLine: 2793, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!4832 = !DISubroutineType(types: !4833)
!4833 = !{!12, !12, !167, !29}
!4834 = !DILocalVariable(name: "argc", arg: 1, scope: !4831, file: !3, line: 2790, type: !12)
!4835 = !DILocation(line: 2790, column: 10, scope: !4831)
!4836 = !DILocalVariable(name: "argv", arg: 2, scope: !4831, file: !3, line: 2791, type: !167)
!4837 = !DILocation(line: 2791, column: 19, scope: !4831)
!4838 = !DILocalVariable(name: "optstring", arg: 3, scope: !4831, file: !3, line: 2792, type: !29)
!4839 = !DILocation(line: 2792, column: 18, scope: !4831)
!4840 = !DILocation(line: 2794, column: 28, scope: !4831)
!4841 = !DILocation(line: 2794, column: 34, scope: !4831)
!4842 = !DILocation(line: 2794, column: 40, scope: !4831)
!4843 = !DILocation(line: 2794, column: 10, scope: !4831)
!4844 = !DILocation(line: 2794, column: 3, scope: !4831)
!4845 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 3214, type: !4846, scopeLine: 3217, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!4846 = !DISubroutineType(types: !4847)
!4847 = !{!12, !12, !23}
!4848 = !DILocalVariable(name: "argc", arg: 1, scope: !4845, file: !3, line: 3215, type: !12)
!4849 = !DILocation(line: 3215, column: 9, scope: !4845)
!4850 = !DILocalVariable(name: "argv", arg: 2, scope: !4845, file: !3, line: 3216, type: !23)
!4851 = !DILocation(line: 3216, column: 12, scope: !4845)
!4852 = !DILocalVariable(name: "file_count", scope: !4845, file: !3, line: 3218, type: !12)
!4853 = !DILocation(line: 3218, column: 9, scope: !4845)
!4854 = !DILocalVariable(name: "proglen", scope: !4845, file: !3, line: 3219, type: !12)
!4855 = !DILocation(line: 3219, column: 9, scope: !4845)
!4856 = !DILocalVariable(name: "optc", scope: !4845, file: !3, line: 3220, type: !12)
!4857 = !DILocation(line: 3220, column: 9, scope: !4845)
!4858 = !DILocation(line: 3224, column: 27, scope: !4845)
!4859 = !DILocation(line: 3224, column: 16, scope: !4845)
!4860 = !DILocation(line: 3224, column: 14, scope: !4845)
!4861 = !DILocation(line: 3225, column: 22, scope: !4845)
!4862 = !DILocation(line: 3225, column: 15, scope: !4845)
!4863 = !DILocation(line: 3225, column: 13, scope: !4845)
!4864 = !DILocation(line: 3228, column: 9, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3228, column: 9)
!4866 = !DILocation(line: 3228, column: 17, scope: !4865)
!4867 = !DILocation(line: 3228, column: 21, scope: !4865)
!4868 = !DILocation(line: 3228, column: 24, scope: !4865)
!4869 = !DILocation(line: 3228, column: 9, scope: !4845)
!4870 = !DILocation(line: 3229, column: 9, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 3228, column: 60)
!4872 = !DILocation(line: 3229, column: 18, scope: !4871)
!4873 = !DILocation(line: 3229, column: 25, scope: !4871)
!4874 = !DILocation(line: 3229, column: 29, scope: !4871)
!4875 = !DILocation(line: 3230, column: 5, scope: !4871)
!4876 = !DILocation(line: 3233, column: 11, scope: !4845)
!4877 = !DILocation(line: 3233, column: 9, scope: !4845)
!4878 = !DILocation(line: 3234, column: 9, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3234, column: 9)
!4880 = !DILocation(line: 3234, column: 13, scope: !4879)
!4881 = !DILocation(line: 3234, column: 9, scope: !4845)
!4882 = !DILocation(line: 3234, column: 29, scope: !4879)
!4883 = !DILocation(line: 3234, column: 27, scope: !4879)
!4884 = !DILocation(line: 3234, column: 22, scope: !4879)
!4885 = !DILocation(line: 3236, column: 18, scope: !4845)
!4886 = !DILocation(line: 3236, column: 42, scope: !4845)
!4887 = !DILocation(line: 3236, column: 16, scope: !4845)
!4888 = !DILocation(line: 3237, column: 9, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3237, column: 9)
!4890 = !DILocation(line: 3237, column: 9, scope: !4845)
!4891 = !DILocation(line: 3238, column: 9, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 3237, column: 21)
!4893 = !DILocation(line: 3239, column: 5, scope: !4892)
!4894 = !DILocation(line: 3241, column: 9, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3241, column: 9)
!4896 = !DILocation(line: 3241, column: 34, scope: !4895)
!4897 = !DILocation(line: 3241, column: 9, scope: !4845)
!4898 = !DILocation(line: 3242, column: 9, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 3241, column: 46)
!4900 = !DILocation(line: 3243, column: 5, scope: !4899)
!4901 = !DILocation(line: 3246, column: 9, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3246, column: 9)
!4903 = !DILocation(line: 3246, column: 33, scope: !4902)
!4904 = !DILocation(line: 3246, column: 9, scope: !4845)
!4905 = !DILocation(line: 3247, column: 9, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 3246, column: 45)
!4907 = !DILocation(line: 3248, column: 5, scope: !4906)
!4908 = !DILocation(line: 3259, column: 19, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3259, column: 11)
!4910 = !DILocation(line: 3259, column: 11, scope: !4909)
!4911 = !DILocation(line: 3259, column: 39, scope: !4909)
!4912 = !DILocation(line: 3260, column: 8, scope: !4909)
!4913 = !DILocation(line: 3260, column: 19, scope: !4909)
!4914 = !DILocation(line: 3260, column: 11, scope: !4909)
!4915 = !DILocation(line: 3260, column: 39, scope: !4909)
!4916 = !DILocation(line: 3259, column: 11, scope: !4845)
!4917 = !DILocation(line: 3261, column: 13, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 3260, column: 45)
!4919 = !DILocation(line: 3262, column: 5, scope: !4918)
!4920 = !DILocation(line: 3262, column: 16, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 3262, column: 16)
!4922 = !DILocation(line: 3263, column: 6, scope: !4921)
!4923 = !DILocation(line: 3263, column: 9, scope: !4921)
!4924 = !DILocation(line: 3262, column: 16, scope: !4909)
!4925 = !DILocation(line: 3264, column: 25, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 3263, column: 36)
!4927 = !DILocation(line: 3264, column: 13, scope: !4926)
!4928 = !DILocation(line: 3265, column: 5, scope: !4926)
!4929 = !DILocation(line: 3268, column: 14, scope: !4845)
!4930 = !DILocation(line: 3269, column: 20, scope: !4845)
!4931 = !DILocation(line: 3269, column: 13, scope: !4845)
!4932 = !DILocation(line: 3269, column: 11, scope: !4845)
!4933 = !DILocation(line: 3271, column: 5, scope: !4845)
!4934 = !DILocation(line: 3271, column: 33, scope: !4845)
!4935 = !DILocation(line: 3271, column: 39, scope: !4845)
!4936 = !DILocation(line: 3271, column: 20, scope: !4845)
!4937 = !DILocation(line: 3271, column: 18, scope: !4845)
!4938 = !DILocation(line: 3272, column: 26, scope: !4845)
!4939 = !DILocation(line: 3273, column: 10, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3272, column: 33)
!4941 = !DILocation(line: 3273, column: 2, scope: !4940)
!4942 = !DILocation(line: 3275, column: 19, scope: !4943)
!4943 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 3273, column: 16)
!4944 = !DILocation(line: 3275, column: 24, scope: !4943)
!4945 = !DILocation(line: 3277, column: 21, scope: !4943)
!4946 = !DILocation(line: 3277, column: 16, scope: !4943)
!4947 = !DILocation(line: 3277, column: 14, scope: !4943)
!4948 = !DILocation(line: 3278, column: 6, scope: !4943)
!4949 = !DILocation(line: 3278, column: 14, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 3278, column: 6)
!4951 = distinct !DILexicalBlock(scope: !4943, file: !3, line: 3278, column: 6)
!4952 = !DILocation(line: 3278, column: 13, scope: !4950)
!4953 = !DILocation(line: 3278, column: 6, scope: !4951)
!4954 = !DILocation(line: 3279, column: 23, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 3279, column: 12)
!4956 = !DILocation(line: 3279, column: 22, scope: !4955)
!4957 = !DILocation(line: 3279, column: 19, scope: !4955)
!4958 = !DILocation(line: 3279, column: 30, scope: !4955)
!4959 = !DILocation(line: 3279, column: 34, scope: !4955)
!4960 = !DILocation(line: 3279, column: 33, scope: !4955)
!4961 = !DILocation(line: 3279, column: 41, scope: !4955)
!4962 = !DILocation(line: 3279, column: 12, scope: !4950)
!4963 = !DILocation(line: 3281, column: 14, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4955, file: !3, line: 3280, column: 3)
!4965 = !DILocation(line: 3282, column: 7, scope: !4964)
!4966 = !DILocation(line: 3281, column: 5, scope: !4964)
!4967 = !DILocation(line: 3283, column: 5, scope: !4964)
!4968 = !DILocation(line: 3284, column: 5, scope: !4964)
!4969 = !DILocation(line: 3285, column: 3, scope: !4964)
!4970 = !DILocation(line: 3279, column: 47, scope: !4955)
!4971 = !DILocation(line: 3278, column: 28, scope: !4950)
!4972 = !DILocation(line: 3278, column: 6, scope: !4950)
!4973 = distinct !{!4973, !4953, !4974}
!4974 = !DILocation(line: 3285, column: 3, scope: !4951)
!4975 = !DILocation(line: 3286, column: 6, scope: !4943)
!4976 = !DILocation(line: 3288, column: 16, scope: !4943)
!4977 = !DILocation(line: 3288, column: 21, scope: !4943)
!4978 = !DILocation(line: 3290, column: 17, scope: !4943)
!4979 = !DILocation(line: 3290, column: 22, scope: !4943)
!4980 = !DILocation(line: 3292, column: 11, scope: !4943)
!4981 = !DILocation(line: 3292, column: 15, scope: !4943)
!4982 = !DILocation(line: 3294, column: 6, scope: !4943)
!4983 = !DILocation(line: 3294, column: 14, scope: !4943)
!4984 = !DILocation(line: 3294, column: 27, scope: !4943)
!4985 = !DILocation(line: 3296, column: 36, scope: !4943)
!4986 = !DILocation(line: 3296, column: 24, scope: !4943)
!4987 = !DILocation(line: 3296, column: 11, scope: !4943)
!4988 = !DILocation(line: 3296, column: 41, scope: !4943)
!4989 = !DILocation(line: 3298, column: 6, scope: !4943)
!4990 = !DILocation(line: 3298, column: 17, scope: !4943)
!4991 = !DILocation(line: 3298, column: 30, scope: !4943)
!4992 = !DILocation(line: 3300, column: 14, scope: !4943)
!4993 = !DILocation(line: 3300, column: 19, scope: !4943)
!4994 = !DILocation(line: 3302, column: 14, scope: !4943)
!4995 = !DILocation(line: 3302, column: 19, scope: !4943)
!4996 = !DILocation(line: 3304, column: 24, scope: !4943)
!4997 = !DILocation(line: 3304, column: 14, scope: !4943)
!4998 = !DILocation(line: 3304, column: 29, scope: !4943)
!4999 = !DILocation(line: 3306, column: 24, scope: !4943)
!5000 = !DILocation(line: 3306, column: 14, scope: !4943)
!5001 = !DILocation(line: 3306, column: 29, scope: !4943)
!5002 = !DILocation(line: 3308, column: 12, scope: !4943)
!5003 = !DILocation(line: 3308, column: 25, scope: !4943)
!5004 = !DILocation(line: 3308, column: 30, scope: !4943)
!5005 = !DILocation(line: 3315, column: 16, scope: !4943)
!5006 = !DILocation(line: 3315, column: 21, scope: !4943)
!5007 = !DILocation(line: 3318, column: 12, scope: !4943)
!5008 = !DILocation(line: 3318, column: 17, scope: !4943)
!5009 = !DILocation(line: 3324, column: 28, scope: !4943)
!5010 = !DILocation(line: 3324, column: 21, scope: !4943)
!5011 = !DILocation(line: 3324, column: 19, scope: !4943)
!5012 = !DILocation(line: 3325, column: 17, scope: !4943)
!5013 = !DILocation(line: 3325, column: 15, scope: !4943)
!5014 = !DILocation(line: 3326, column: 13, scope: !4943)
!5015 = !DILocation(line: 3328, column: 36, scope: !4943)
!5016 = !DILocation(line: 3328, column: 24, scope: !4943)
!5017 = !DILocation(line: 3328, column: 11, scope: !4943)
!5018 = !DILocation(line: 3329, column: 6, scope: !4943)
!5019 = !DILocation(line: 3331, column: 13, scope: !4943)
!5020 = !DILocation(line: 3331, column: 23, scope: !4943)
!5021 = !DILocation(line: 3331, column: 28, scope: !4943)
!5022 = !DILocation(line: 3333, column: 6, scope: !4943)
!5023 = !DILocation(line: 3333, column: 17, scope: !4943)
!5024 = !DILocation(line: 3333, column: 30, scope: !4943)
!5025 = !DILocation(line: 3338, column: 14, scope: !4943)
!5026 = !DILocation(line: 3339, column: 7, scope: !4943)
!5027 = !DILocation(line: 3338, column: 6, scope: !4943)
!5028 = !DILocation(line: 3340, column: 6, scope: !4943)
!5029 = !DILocation(line: 3341, column: 6, scope: !4943)
!5030 = !DILocation(line: 3341, column: 22, scope: !4943)
!5031 = !DILocation(line: 3345, column: 14, scope: !4943)
!5032 = !DILocation(line: 3345, column: 19, scope: !4943)
!5033 = !DILocation(line: 3345, column: 12, scope: !4943)
!5034 = !DILocation(line: 3346, column: 6, scope: !4943)
!5035 = !DILocation(line: 3349, column: 6, scope: !4943)
!5036 = !DILocation(line: 3350, column: 6, scope: !4943)
!5037 = !DILocation(line: 3351, column: 2, scope: !4943)
!5038 = distinct !{!5038, !4933, !5039}
!5039 = !DILocation(line: 3352, column: 5, scope: !4845)
!5040 = !DILocation(line: 3356, column: 9, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3356, column: 9)
!5042 = !DILocation(line: 3356, column: 15, scope: !5041)
!5043 = !DILocation(line: 3356, column: 18, scope: !5041)
!5044 = !DILocation(line: 3356, column: 44, scope: !5041)
!5045 = !DILocation(line: 3356, column: 9, scope: !4845)
!5046 = !DILocation(line: 3357, column: 7, scope: !5041)
!5047 = !DILocation(line: 3363, column: 9, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3363, column: 9)
!5049 = !DILocation(line: 3363, column: 17, scope: !5048)
!5050 = !DILocation(line: 3363, column: 9, scope: !4845)
!5051 = !DILocation(line: 3363, column: 32, scope: !5048)
!5052 = !DILocation(line: 3363, column: 30, scope: !5048)
!5053 = !DILocation(line: 3363, column: 22, scope: !5048)
!5054 = !DILocation(line: 3364, column: 9, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3364, column: 9)
!5056 = !DILocation(line: 3364, column: 17, scope: !5055)
!5057 = !DILocation(line: 3364, column: 9, scope: !4845)
!5058 = !DILocation(line: 3364, column: 32, scope: !5055)
!5059 = !DILocation(line: 3364, column: 30, scope: !5055)
!5060 = !DILocation(line: 3364, column: 22, scope: !5055)
!5061 = !DILocation(line: 3366, column: 18, scope: !4845)
!5062 = !DILocation(line: 3366, column: 25, scope: !4845)
!5063 = !DILocation(line: 3366, column: 23, scope: !4845)
!5064 = !DILocation(line: 3366, column: 16, scope: !4845)
!5065 = !DILocation(line: 3370, column: 9, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3370, column: 9)
!5067 = !DILocation(line: 3370, column: 15, scope: !5066)
!5068 = !DILocation(line: 3370, column: 19, scope: !5066)
!5069 = !DILocation(line: 3370, column: 9, scope: !4845)
!5070 = !DILocation(line: 3371, column: 10, scope: !5071)
!5071 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 3370, column: 26)
!5072 = !DILocation(line: 3372, column: 3, scope: !5071)
!5073 = !DILocation(line: 3371, column: 2, scope: !5071)
!5074 = !DILocation(line: 3373, column: 5, scope: !5071)
!5075 = !DILocation(line: 3375, column: 10, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3375, column: 9)
!5077 = !DILocation(line: 3375, column: 16, scope: !5076)
!5078 = !DILocation(line: 3375, column: 21, scope: !5076)
!5079 = !DILocation(line: 3375, column: 25, scope: !5076)
!5080 = !DILocation(line: 3375, column: 37, scope: !5076)
!5081 = !DILocation(line: 3375, column: 40, scope: !5076)
!5082 = !DILocation(line: 3375, column: 46, scope: !5076)
!5083 = !DILocation(line: 3375, column: 9, scope: !4845)
!5084 = !DILocation(line: 3376, column: 17, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 3375, column: 60)
!5086 = !DILocation(line: 3377, column: 17, scope: !5085)
!5087 = !DILocation(line: 3377, column: 27, scope: !5085)
!5088 = !DILocation(line: 3376, column: 9, scope: !5085)
!5089 = !DILocation(line: 3378, column: 9, scope: !5085)
!5090 = !DILocation(line: 3379, column: 5, scope: !5085)
!5091 = !DILocation(line: 3380, column: 9, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3380, column: 9)
!5093 = !DILocation(line: 3380, column: 16, scope: !5092)
!5094 = !DILocation(line: 3380, column: 20, scope: !5092)
!5095 = !DILocation(line: 3380, column: 9, scope: !4845)
!5096 = !DILocation(line: 3380, column: 37, scope: !5092)
!5097 = !DILocation(line: 3380, column: 32, scope: !5092)
!5098 = !DILocation(line: 3395, column: 9, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3395, column: 9)
!5100 = !DILocation(line: 3395, column: 20, scope: !5099)
!5101 = !DILocation(line: 3395, column: 9, scope: !4845)
!5102 = !DILocation(line: 3396, column: 6, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 3396, column: 6)
!5104 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 3395, column: 26)
!5105 = !DILocation(line: 3396, column: 16, scope: !5103)
!5106 = !DILocation(line: 3396, column: 20, scope: !5103)
!5107 = !DILocation(line: 3396, column: 25, scope: !5103)
!5108 = !DILocation(line: 3396, column: 29, scope: !5103)
!5109 = !DILocation(line: 3396, column: 34, scope: !5103)
!5110 = !DILocation(line: 3396, column: 39, scope: !5103)
!5111 = !DILocation(line: 3396, column: 50, scope: !5103)
!5112 = !DILocation(line: 3396, column: 54, scope: !5103)
!5113 = !DILocation(line: 3396, column: 6, scope: !5104)
!5114 = !DILocation(line: 3398, column: 2, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5103, file: !3, line: 3396, column: 62)
!5116 = !DILocation(line: 3399, column: 9, scope: !5104)
!5117 = !DILocation(line: 3399, column: 16, scope: !5104)
!5118 = !DILocation(line: 3399, column: 25, scope: !5104)
!5119 = !DILocation(line: 3399, column: 23, scope: !5104)
!5120 = !DILocation(line: 3400, column: 17, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 3399, column: 31)
!5122 = !DILocation(line: 3400, column: 28, scope: !5121)
!5123 = !DILocation(line: 3400, column: 6, scope: !5121)
!5124 = distinct !{!5124, !5116, !5125}
!5125 = !DILocation(line: 3401, column: 2, scope: !5104)
!5126 = !DILocation(line: 3402, column: 5, scope: !5104)
!5127 = !DILocation(line: 3403, column: 2, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 3402, column: 12)
!5129 = !DILocation(line: 3405, column: 9, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 3405, column: 9)
!5131 = !DILocation(line: 3405, column: 14, scope: !5130)
!5132 = !DILocation(line: 3405, column: 18, scope: !5130)
!5133 = !DILocation(line: 3405, column: 24, scope: !5130)
!5134 = !DILocation(line: 3405, column: 27, scope: !5130)
!5135 = !DILocation(line: 3405, column: 38, scope: !5130)
!5136 = !DILocation(line: 3405, column: 9, scope: !4845)
!5137 = !DILocation(line: 3406, column: 2, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 3405, column: 43)
!5139 = !DILocation(line: 3407, column: 5, scope: !5138)
!5140 = !DILocation(line: 3408, column: 13, scope: !4845)
!5141 = !DILocation(line: 3408, column: 5, scope: !4845)
!5142 = !DILocation(line: 3409, column: 12, scope: !4845)
!5143 = !DILocation(line: 3409, column: 5, scope: !4845)
!5144 = distinct !DISubprogram(name: "add_envopt", scope: !3, file: !3, line: 8200, type: !5145, scopeLine: 8204, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5145 = !DISubroutineType(types: !5146)
!5146 = !{!19, !33, !5147, !19}
!5147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!5148 = !DILocalVariable(name: "argcp", arg: 1, scope: !5144, file: !3, line: 8201, type: !33)
!5149 = !DILocation(line: 8201, column: 10, scope: !5144)
!5150 = !DILocalVariable(name: "argvp", arg: 2, scope: !5144, file: !3, line: 8202, type: !5147)
!5151 = !DILocation(line: 8202, column: 13, scope: !5144)
!5152 = !DILocalVariable(name: "env", arg: 3, scope: !5144, file: !3, line: 8203, type: !19)
!5153 = !DILocation(line: 8203, column: 11, scope: !5144)
!5154 = !DILocalVariable(name: "p", scope: !5144, file: !3, line: 8205, type: !19)
!5155 = !DILocation(line: 8205, column: 11, scope: !5144)
!5156 = !DILocalVariable(name: "oargv", scope: !5144, file: !3, line: 8206, type: !23)
!5157 = !DILocation(line: 8206, column: 12, scope: !5144)
!5158 = !DILocalVariable(name: "nargv", scope: !5144, file: !3, line: 8207, type: !23)
!5159 = !DILocation(line: 8207, column: 12, scope: !5144)
!5160 = !DILocalVariable(name: "oargc", scope: !5144, file: !3, line: 8208, type: !12)
!5161 = !DILocation(line: 8208, column: 10, scope: !5144)
!5162 = !DILocation(line: 8208, column: 19, scope: !5144)
!5163 = !DILocation(line: 8208, column: 18, scope: !5144)
!5164 = !DILocalVariable(name: "nargc", scope: !5144, file: !3, line: 8209, type: !12)
!5165 = !DILocation(line: 8209, column: 10, scope: !5144)
!5166 = !DILocation(line: 8211, column: 25, scope: !5144)
!5167 = !DILocation(line: 8211, column: 18, scope: !5144)
!5168 = !DILocation(line: 8211, column: 9, scope: !5144)
!5169 = !DILocation(line: 8212, column: 9, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8212, column: 9)
!5171 = !DILocation(line: 8212, column: 13, scope: !5170)
!5172 = !DILocation(line: 8212, column: 9, scope: !5144)
!5173 = !DILocation(line: 8212, column: 22, scope: !5170)
!5174 = !DILocation(line: 8214, column: 31, scope: !5144)
!5175 = !DILocation(line: 8214, column: 24, scope: !5144)
!5176 = !DILocation(line: 8214, column: 35, scope: !5144)
!5177 = !DILocation(line: 8214, column: 16, scope: !5144)
!5178 = !DILocation(line: 8214, column: 7, scope: !5144)
!5179 = !DILocation(line: 8215, column: 18, scope: !5144)
!5180 = !DILocation(line: 8215, column: 21, scope: !5144)
!5181 = !DILocation(line: 8215, column: 11, scope: !5144)
!5182 = !DILocation(line: 8215, column: 9, scope: !5144)
!5183 = !DILocation(line: 8217, column: 14, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8217, column: 5)
!5185 = !DILocation(line: 8217, column: 12, scope: !5184)
!5186 = !DILocation(line: 8217, column: 10, scope: !5184)
!5187 = !DILocation(line: 8217, column: 20, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5184, file: !3, line: 8217, column: 5)
!5189 = !DILocation(line: 8217, column: 19, scope: !5188)
!5190 = !DILocation(line: 8217, column: 5, scope: !5184)
!5191 = !DILocation(line: 8218, column: 14, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5188, file: !3, line: 8217, column: 33)
!5193 = !DILocation(line: 8218, column: 7, scope: !5192)
!5194 = !DILocation(line: 8218, column: 4, scope: !5192)
!5195 = !DILocation(line: 8219, column: 7, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 8219, column: 6)
!5197 = !DILocation(line: 8219, column: 6, scope: !5196)
!5198 = !DILocation(line: 8219, column: 9, scope: !5196)
!5199 = !DILocation(line: 8219, column: 6, scope: !5192)
!5200 = !DILocation(line: 8219, column: 18, scope: !5196)
!5201 = !DILocation(line: 8221, column: 15, scope: !5192)
!5202 = !DILocation(line: 8221, column: 7, scope: !5192)
!5203 = !DILocation(line: 8221, column: 4, scope: !5192)
!5204 = !DILocation(line: 8222, column: 7, scope: !5205)
!5205 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 8222, column: 6)
!5206 = !DILocation(line: 8222, column: 6, scope: !5205)
!5207 = !DILocation(line: 8222, column: 6, scope: !5192)
!5208 = !DILocation(line: 8222, column: 12, scope: !5205)
!5209 = !DILocation(line: 8222, column: 15, scope: !5205)
!5210 = !DILocation(line: 8222, column: 10, scope: !5205)
!5211 = !DILocation(line: 8223, column: 5, scope: !5192)
!5212 = !DILocation(line: 8217, column: 28, scope: !5188)
!5213 = !DILocation(line: 8217, column: 5, scope: !5188)
!5214 = distinct !{!5214, !5190, !5215}
!5215 = !DILocation(line: 8223, column: 5, scope: !5184)
!5216 = !DILocation(line: 8224, column: 9, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8224, column: 9)
!5218 = !DILocation(line: 8224, column: 15, scope: !5217)
!5219 = !DILocation(line: 8224, column: 9, scope: !5144)
!5220 = !DILocation(line: 8225, column: 7, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 8224, column: 21)
!5222 = !DILocation(line: 8225, column: 2, scope: !5221)
!5223 = !DILocation(line: 8226, column: 2, scope: !5221)
!5224 = !DILocation(line: 8228, column: 15, scope: !5144)
!5225 = !DILocation(line: 8228, column: 6, scope: !5144)
!5226 = !DILocation(line: 8228, column: 12, scope: !5144)
!5227 = !DILocation(line: 8232, column: 29, scope: !5144)
!5228 = !DILocation(line: 8232, column: 28, scope: !5144)
!5229 = !DILocation(line: 8232, column: 34, scope: !5144)
!5230 = !DILocation(line: 8232, column: 21, scope: !5144)
!5231 = !DILocation(line: 8232, column: 13, scope: !5144)
!5232 = !DILocation(line: 8232, column: 11, scope: !5144)
!5233 = !DILocation(line: 8233, column: 9, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8233, column: 9)
!5235 = !DILocation(line: 8233, column: 15, scope: !5234)
!5236 = !DILocation(line: 8233, column: 9, scope: !5144)
!5237 = !DILocation(line: 8233, column: 24, scope: !5234)
!5238 = !DILocation(line: 8234, column: 15, scope: !5144)
!5239 = !DILocation(line: 8234, column: 14, scope: !5144)
!5240 = !DILocation(line: 8234, column: 12, scope: !5144)
!5241 = !DILocation(line: 8235, column: 14, scope: !5144)
!5242 = !DILocation(line: 8235, column: 6, scope: !5144)
!5243 = !DILocation(line: 8235, column: 12, scope: !5144)
!5244 = !DILocation(line: 8238, column: 14, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8238, column: 9)
!5246 = !DILocation(line: 8238, column: 17, scope: !5245)
!5247 = !DILocation(line: 8238, column: 9, scope: !5144)
!5248 = !DILocation(line: 8238, column: 22, scope: !5245)
!5249 = !DILocation(line: 8239, column: 25, scope: !5144)
!5250 = !DILocation(line: 8239, column: 18, scope: !5144)
!5251 = !DILocation(line: 8239, column: 12, scope: !5144)
!5252 = !DILocation(line: 8239, column: 16, scope: !5144)
!5253 = !DILocation(line: 8242, column: 14, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 8242, column: 5)
!5255 = !DILocation(line: 8242, column: 12, scope: !5254)
!5256 = !DILocation(line: 8242, column: 10, scope: !5254)
!5257 = !DILocation(line: 8242, column: 19, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 8242, column: 5)
!5259 = !DILocation(line: 8242, column: 25, scope: !5258)
!5260 = !DILocation(line: 8242, column: 5, scope: !5254)
!5261 = !DILocation(line: 8243, column: 14, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 8242, column: 39)
!5263 = !DILocation(line: 8243, column: 7, scope: !5262)
!5264 = !DILocation(line: 8243, column: 4, scope: !5262)
!5265 = !DILocation(line: 8244, column: 15, scope: !5262)
!5266 = !DILocation(line: 8244, column: 9, scope: !5262)
!5267 = !DILocation(line: 8244, column: 13, scope: !5262)
!5268 = !DILocation(line: 8245, column: 2, scope: !5262)
!5269 = !DILocation(line: 8245, column: 11, scope: !5262)
!5270 = !DILocation(line: 8245, column: 9, scope: !5262)
!5271 = distinct !{!5271, !5268, !5272}
!5272 = !DILocation(line: 8245, column: 15, scope: !5262)
!5273 = !DILocation(line: 8246, column: 5, scope: !5262)
!5274 = !DILocation(line: 8242, column: 35, scope: !5258)
!5275 = !DILocation(line: 8242, column: 5, scope: !5258)
!5276 = distinct !{!5276, !5260, !5277}
!5277 = !DILocation(line: 8246, column: 5, scope: !5254)
!5278 = !DILocation(line: 8249, column: 5, scope: !5144)
!5279 = !DILocation(line: 8249, column: 17, scope: !5144)
!5280 = !DILocation(line: 8249, column: 41, scope: !5144)
!5281 = !DILocation(line: 8249, column: 34, scope: !5144)
!5282 = !DILocation(line: 8249, column: 28, scope: !5144)
!5283 = !DILocation(line: 8249, column: 32, scope: !5144)
!5284 = distinct !{!5284, !5278, !5285}
!5285 = !DILocation(line: 8249, column: 43, scope: !5144)
!5286 = !DILocation(line: 8250, column: 6, scope: !5144)
!5287 = !DILocation(line: 8250, column: 12, scope: !5144)
!5288 = !DILocation(line: 8251, column: 12, scope: !5144)
!5289 = !DILocation(line: 8251, column: 5, scope: !5144)
!5290 = !DILocation(line: 8252, column: 1, scope: !5144)
!5291 = distinct !DISubprogram(name: "abort_gzip_signal", scope: !3, file: !3, line: 4644, type: !693, scopeLine: 4645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5292 = !DILocation(line: 4646, column: 2, scope: !5291)
!5293 = !DILocation(line: 4647, column: 2, scope: !5291)
!5294 = distinct !DISubprogram(name: "getopt_long", scope: !3, file: !3, line: 8583, type: !5295, scopeLine: 8589, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5295 = !DISubroutineType(types: !5296)
!5296 = !{!12, !12, !167, !29, !24, !33}
!5297 = !DILocalVariable(name: "argc", arg: 1, scope: !5294, file: !3, line: 8584, type: !12)
!5298 = !DILocation(line: 8584, column: 10, scope: !5294)
!5299 = !DILocalVariable(name: "argv", arg: 2, scope: !5294, file: !3, line: 8585, type: !167)
!5300 = !DILocation(line: 8585, column: 19, scope: !5294)
!5301 = !DILocalVariable(name: "options", arg: 3, scope: !5294, file: !3, line: 8586, type: !29)
!5302 = !DILocation(line: 8586, column: 18, scope: !5294)
!5303 = !DILocalVariable(name: "long_options", arg: 4, scope: !5294, file: !3, line: 8587, type: !24)
!5304 = !DILocation(line: 8587, column: 27, scope: !5294)
!5305 = !DILocalVariable(name: "opt_index", arg: 5, scope: !5294, file: !3, line: 8588, type: !33)
!5306 = !DILocation(line: 8588, column: 11, scope: !5294)
!5307 = !DILocation(line: 8590, column: 28, scope: !5294)
!5308 = !DILocation(line: 8590, column: 34, scope: !5294)
!5309 = !DILocation(line: 8590, column: 40, scope: !5294)
!5310 = !DILocation(line: 8590, column: 49, scope: !5294)
!5311 = !DILocation(line: 8590, column: 63, scope: !5294)
!5312 = !DILocation(line: 8590, column: 10, scope: !5294)
!5313 = !DILocation(line: 8590, column: 3, scope: !5294)
!5314 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 3096, type: !693, scopeLine: 3097, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5315 = !DILocation(line: 3099, column: 6, scope: !5314)
!5316 = !DILocation(line: 3098, column: 5, scope: !5314)
!5317 = !DILocation(line: 3101, column: 1, scope: !5314)
!5318 = !DILocalVariable(name: "p", scope: !692, file: !3, line: 3142, type: !23)
!5319 = !DILocation(line: 3142, column: 12, scope: !692)
!5320 = !DILocation(line: 3144, column: 30, scope: !692)
!5321 = !DILocation(line: 3144, column: 5, scope: !692)
!5322 = !DILocation(line: 3145, column: 5, scope: !692)
!5323 = !DILocation(line: 3146, column: 5, scope: !692)
!5324 = !DILocation(line: 3146, column: 13, scope: !692)
!5325 = !DILocation(line: 3146, column: 12, scope: !692)
!5326 = !DILocation(line: 3146, column: 34, scope: !692)
!5327 = !DILocation(line: 3146, column: 32, scope: !692)
!5328 = !DILocation(line: 3146, column: 16, scope: !692)
!5329 = distinct !{!5329, !5323, !5330}
!5330 = !DILocation(line: 3146, column: 36, scope: !692)
!5331 = !DILocation(line: 3147, column: 1, scope: !692)
!5332 = distinct !DISubprogram(name: "license", scope: !3, file: !3, line: 3150, type: !693, scopeLine: 3151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5333 = !DILocalVariable(name: "p", scope: !5332, file: !3, line: 3152, type: !23)
!5334 = !DILocation(line: 3152, column: 12, scope: !5332)
!5335 = !DILocation(line: 3154, column: 30, scope: !5332)
!5336 = !DILocation(line: 3154, column: 5, scope: !5332)
!5337 = !DILocation(line: 3155, column: 5, scope: !5332)
!5338 = !DILocation(line: 3155, column: 13, scope: !5332)
!5339 = !DILocation(line: 3155, column: 12, scope: !5332)
!5340 = !DILocation(line: 3155, column: 34, scope: !5332)
!5341 = !DILocation(line: 3155, column: 32, scope: !5332)
!5342 = !DILocation(line: 3155, column: 16, scope: !5332)
!5343 = distinct !{!5343, !5337, !5344}
!5344 = !DILocation(line: 3155, column: 36, scope: !5332)
!5345 = !DILocation(line: 3156, column: 1, scope: !5332)
!5346 = distinct !DISubprogram(name: "version", scope: !3, file: !3, line: 3159, type: !693, scopeLine: 3160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5347 = !DILocation(line: 3161, column: 5, scope: !5346)
!5348 = !DILocation(line: 3162, column: 5, scope: !5346)
!5349 = !DILocation(line: 3164, column: 5, scope: !5346)
!5350 = !DILocation(line: 3167, column: 5, scope: !5346)
!5351 = !DILocation(line: 3170, column: 5, scope: !5346)
!5352 = !DILocation(line: 3173, column: 5, scope: !5346)
!5353 = !DILocation(line: 3176, column: 5, scope: !5346)
!5354 = !DILocation(line: 3199, column: 5, scope: !5346)
!5355 = !DILocation(line: 3200, column: 5, scope: !5346)
!5356 = !DILocation(line: 3201, column: 1, scope: !5346)
!5357 = distinct !DISubprogram(name: "lzw", scope: !3, file: !3, line: 5636, type: !200, scopeLine: 5638, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5358 = !DILocalVariable(name: "in", arg: 1, scope: !5357, file: !3, line: 5637, type: !12)
!5359 = !DILocation(line: 5637, column: 9, scope: !5357)
!5360 = !DILocalVariable(name: "out", arg: 2, scope: !5357, file: !3, line: 5637, type: !12)
!5361 = !DILocation(line: 5637, column: 13, scope: !5357)
!5362 = !DILocation(line: 5639, column: 9, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5357, file: !3, line: 5639, column: 9)
!5364 = !DILocation(line: 5639, column: 9, scope: !5357)
!5365 = !DILocation(line: 5639, column: 19, scope: !5363)
!5366 = !DILocation(line: 5640, column: 14, scope: !5357)
!5367 = !DILocation(line: 5641, column: 13, scope: !5357)
!5368 = !DILocation(line: 5641, column: 5, scope: !5357)
!5369 = !DILocation(line: 5642, column: 9, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5357, file: !3, line: 5642, column: 9)
!5371 = !DILocation(line: 5642, column: 15, scope: !5370)
!5372 = !DILocation(line: 5642, column: 12, scope: !5370)
!5373 = !DILocation(line: 5642, column: 9, scope: !5357)
!5374 = !DILocation(line: 5643, column: 19, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 5642, column: 20)
!5376 = !DILocation(line: 5644, column: 5, scope: !5375)
!5377 = !DILocation(line: 5645, column: 5, scope: !5357)
!5378 = !DILocation(line: 5646, column: 1, scope: !5357)
!5379 = distinct !DISubprogram(name: "treat_file", scope: !3, file: !3, line: 3531, type: !2624, scopeLine: 3533, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5380 = !DILocalVariable(name: "iname", arg: 1, scope: !5379, file: !3, line: 3532, type: !19)
!5381 = !DILocation(line: 3532, column: 11, scope: !5379)
!5382 = !DILocation(line: 3535, column: 9, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3535, column: 9)
!5384 = !DILocation(line: 3535, column: 9, scope: !5379)
!5385 = !DILocalVariable(name: "cflag", scope: !5386, file: !3, line: 3536, type: !12)
!5386 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 3535, column: 29)
!5387 = !DILocation(line: 3536, column: 6, scope: !5386)
!5388 = !DILocation(line: 3536, column: 14, scope: !5386)
!5389 = !DILocation(line: 3537, column: 2, scope: !5386)
!5390 = !DILocation(line: 3538, column: 14, scope: !5386)
!5391 = !DILocation(line: 3538, column: 12, scope: !5386)
!5392 = !DILocation(line: 3539, column: 2, scope: !5386)
!5393 = !DILocation(line: 3543, column: 19, scope: !5394)
!5394 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3543, column: 9)
!5395 = !DILocation(line: 3543, column: 9, scope: !5394)
!5396 = !DILocation(line: 3543, column: 34, scope: !5394)
!5397 = !DILocation(line: 3543, column: 9, scope: !5379)
!5398 = !DILocation(line: 3543, column: 41, scope: !5394)
!5399 = !DILocation(line: 3546, column: 9, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3546, column: 9)
!5401 = !DILocation(line: 3546, column: 9, scope: !5379)
!5402 = !DILocation(line: 3548, column: 6, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5404, file: !3, line: 3548, column: 6)
!5404 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 3546, column: 33)
!5405 = !DILocation(line: 3548, column: 6, scope: !5404)
!5406 = !DILocalVariable(name: "st", scope: !5407, file: !3, line: 3549, type: !575)
!5407 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 3548, column: 17)
!5408 = !DILocation(line: 3549, column: 18, scope: !5407)
!5409 = !DILocation(line: 3550, column: 11, scope: !5407)
!5410 = !DILocation(line: 3551, column: 16, scope: !5407)
!5411 = !DILocation(line: 3551, column: 6, scope: !5407)
!5412 = !DILocation(line: 3554, column: 19, scope: !5407)
!5413 = !DILocation(line: 3554, column: 6, scope: !5407)
!5414 = !DILocation(line: 3556, column: 2, scope: !5407)
!5415 = !DILocation(line: 3558, column: 2, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 3558, column: 2)
!5417 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 3558, column: 2)
!5418 = !DILocation(line: 3558, column: 2, scope: !5417)
!5419 = !DILocation(line: 3558, column: 2, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 3558, column: 2)
!5421 = !DILocation(line: 3559, column: 2, scope: !5404)
!5422 = !DILocation(line: 3561, column: 10, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3561, column: 9)
!5424 = !DILocation(line: 3561, column: 9, scope: !5379)
!5425 = !DILocation(line: 3562, column: 2, scope: !5426)
!5426 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 3562, column: 2)
!5427 = distinct !DILexicalBlock(scope: !5428, file: !3, line: 3562, column: 2)
!5428 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 3561, column: 34)
!5429 = !DILocation(line: 3562, column: 2, scope: !5427)
!5430 = !DILocation(line: 3562, column: 2, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 3562, column: 2)
!5432 = !DILocation(line: 3565, column: 2, scope: !5428)
!5433 = !DILocation(line: 3567, column: 15, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3567, column: 9)
!5435 = !DILocation(line: 3567, column: 24, scope: !5434)
!5436 = !DILocation(line: 3567, column: 28, scope: !5434)
!5437 = !DILocation(line: 3567, column: 32, scope: !5434)
!5438 = !DILocation(line: 3567, column: 42, scope: !5434)
!5439 = !DILocation(line: 3567, column: 46, scope: !5434)
!5440 = !DILocation(line: 3567, column: 9, scope: !5379)
!5441 = !DILocation(line: 3568, column: 2, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 3568, column: 2)
!5443 = distinct !DILexicalBlock(scope: !5444, file: !3, line: 3568, column: 2)
!5444 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 3567, column: 53)
!5445 = !DILocation(line: 3568, column: 2, scope: !5443)
!5446 = !DILocation(line: 3568, column: 2, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 3568, column: 2)
!5448 = !DILocation(line: 3571, column: 2, scope: !5444)
!5449 = !DILocation(line: 3574, column: 24, scope: !5379)
!5450 = !DILocation(line: 3574, column: 16, scope: !5379)
!5451 = !DILocation(line: 3575, column: 18, scope: !5379)
!5452 = !DILocation(line: 3575, column: 26, scope: !5379)
!5453 = !DILocation(line: 3575, column: 30, scope: !5379)
!5454 = !DILocation(line: 3575, column: 47, scope: !5379)
!5455 = !DILocation(line: 3575, column: 16, scope: !5379)
!5456 = !DILocation(line: 3580, column: 9, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3580, column: 9)
!5458 = !DILocation(line: 3580, column: 19, scope: !5457)
!5459 = !DILocation(line: 3580, column: 23, scope: !5457)
!5460 = !DILocation(line: 3580, column: 28, scope: !5457)
!5461 = !DILocation(line: 3580, column: 32, scope: !5457)
!5462 = !DILocation(line: 3580, column: 9, scope: !5379)
!5463 = !DILocation(line: 3581, column: 2, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 3580, column: 38)
!5465 = !DILocation(line: 3583, column: 5, scope: !5464)
!5466 = !DILocation(line: 3583, column: 16, scope: !5467)
!5467 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 3583, column: 16)
!5468 = !DILocation(line: 3583, column: 30, scope: !5467)
!5469 = !DILocation(line: 3583, column: 16, scope: !5457)
!5470 = !DILocation(line: 3584, column: 2, scope: !5471)
!5471 = distinct !DILexicalBlock(scope: !5467, file: !3, line: 3583, column: 37)
!5472 = !DILocation(line: 3591, column: 11, scope: !5379)
!5473 = !DILocation(line: 0, scope: !5379)
!5474 = !DILocation(line: 3591, column: 9, scope: !5379)
!5475 = !DILocation(line: 3593, column: 9, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3593, column: 9)
!5477 = !DILocation(line: 3593, column: 13, scope: !5476)
!5478 = !DILocation(line: 3593, column: 9, scope: !5379)
!5479 = !DILocation(line: 3594, column: 2, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 3593, column: 20)
!5481 = !DILocation(line: 3595, column: 2, scope: !5480)
!5482 = !DILocation(line: 3597, column: 5, scope: !5379)
!5483 = !DILocation(line: 3598, column: 13, scope: !5379)
!5484 = !DILocation(line: 3600, column: 9, scope: !5485)
!5485 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3600, column: 9)
!5486 = !DILocation(line: 3600, column: 9, scope: !5379)
!5487 = !DILocation(line: 3601, column: 22, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5485, file: !3, line: 3600, column: 21)
!5489 = !DILocation(line: 3601, column: 11, scope: !5488)
!5490 = !DILocation(line: 3601, column: 9, scope: !5488)
!5491 = !DILocation(line: 3602, column: 6, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 3602, column: 6)
!5493 = !DILocation(line: 3602, column: 13, scope: !5492)
!5494 = !DILocation(line: 3602, column: 6, scope: !5488)
!5495 = !DILocation(line: 3603, column: 12, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 3602, column: 18)
!5497 = !DILocation(line: 3603, column: 6, scope: !5496)
!5498 = !DILocation(line: 3604, column: 6, scope: !5496)
!5499 = !DILocation(line: 3606, column: 5, scope: !5488)
!5500 = !DILocation(line: 3607, column: 9, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3607, column: 9)
!5502 = !DILocation(line: 3607, column: 9, scope: !5379)
!5503 = !DILocation(line: 3608, column: 17, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 3607, column: 15)
!5505 = !DILocation(line: 3608, column: 22, scope: !5504)
!5506 = !DILocation(line: 3608, column: 9, scope: !5504)
!5507 = !DILocation(line: 3609, column: 15, scope: !5504)
!5508 = !DILocation(line: 3609, column: 9, scope: !5504)
!5509 = !DILocation(line: 3610, column: 9, scope: !5504)
!5510 = !DILocation(line: 3617, column: 9, scope: !5511)
!5511 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3617, column: 9)
!5512 = !DILocation(line: 3617, column: 9, scope: !5379)
!5513 = !DILocation(line: 3618, column: 15, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 3617, column: 20)
!5515 = !DILocation(line: 3618, column: 8, scope: !5514)
!5516 = !DILocation(line: 3618, column: 6, scope: !5514)
!5517 = !DILocation(line: 3620, column: 5, scope: !5514)
!5518 = !DILocation(line: 3621, column: 6, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5520, file: !3, line: 3621, column: 6)
!5520 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 3620, column: 12)
!5521 = !DILocation(line: 3621, column: 23, scope: !5519)
!5522 = !DILocation(line: 3621, column: 6, scope: !5520)
!5523 = !DILocation(line: 3621, column: 30, scope: !5519)
!5524 = !DILocation(line: 3623, column: 7, scope: !5525)
!5525 = distinct !DILexicalBlock(scope: !5520, file: !3, line: 3623, column: 6)
!5526 = !DILocation(line: 3623, column: 18, scope: !5525)
!5527 = !DILocation(line: 3623, column: 21, scope: !5525)
!5528 = !DILocation(line: 3623, column: 36, scope: !5525)
!5529 = !DILocation(line: 3623, column: 40, scope: !5525)
!5530 = !DILocation(line: 3623, column: 48, scope: !5525)
!5531 = !DILocation(line: 3623, column: 52, scope: !5525)
!5532 = !DILocation(line: 3623, column: 6, scope: !5520)
!5533 = !DILocation(line: 3624, column: 14, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5525, file: !3, line: 3623, column: 59)
!5535 = !DILocation(line: 3625, column: 7, scope: !5534)
!5536 = !DILocation(line: 3624, column: 6, scope: !5534)
!5537 = !DILocation(line: 3626, column: 2, scope: !5534)
!5538 = !DILocation(line: 3629, column: 10, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3629, column: 9)
!5540 = !DILocation(line: 3629, column: 9, scope: !5379)
!5541 = !DILocation(line: 3629, column: 44, scope: !5539)
!5542 = !DILocation(line: 3629, column: 43, scope: !5539)
!5543 = !DILocation(line: 3629, column: 41, scope: !5539)
!5544 = !DILocation(line: 3629, column: 26, scope: !5539)
!5545 = !DILocation(line: 3631, column: 9, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3631, column: 9)
!5547 = !DILocation(line: 3631, column: 9, scope: !5379)
!5548 = !DILocation(line: 3632, column: 10, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5546, file: !3, line: 3631, column: 18)
!5550 = !DILocation(line: 3632, column: 2, scope: !5549)
!5551 = !DILocation(line: 3633, column: 5, scope: !5549)
!5552 = !DILocation(line: 3637, column: 5, scope: !5379)
!5553 = !DILocation(line: 3638, column: 8, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 3638, column: 6)
!5555 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 3637, column: 14)
!5556 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 3637, column: 5)
!5557 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3637, column: 5)
!5558 = !DILocation(line: 3638, column: 14, scope: !5554)
!5559 = !DILocation(line: 3638, column: 19, scope: !5554)
!5560 = !DILocation(line: 3638, column: 6, scope: !5554)
!5561 = !DILocation(line: 3638, column: 24, scope: !5554)
!5562 = !DILocation(line: 3638, column: 6, scope: !5555)
!5563 = !DILocation(line: 3639, column: 13, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 3638, column: 31)
!5565 = !DILocation(line: 3640, column: 6, scope: !5564)
!5566 = !DILocation(line: 3643, column: 6, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 3643, column: 6)
!5568 = !DILocation(line: 3643, column: 6, scope: !5555)
!5569 = !DILocation(line: 3644, column: 4, scope: !5567)
!5570 = !DILocation(line: 3646, column: 22, scope: !5555)
!5571 = !DILocation(line: 3646, column: 11, scope: !5555)
!5572 = !DILocation(line: 3646, column: 9, scope: !5555)
!5573 = !DILocation(line: 3647, column: 6, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 3647, column: 6)
!5575 = !DILocation(line: 3647, column: 13, scope: !5574)
!5576 = !DILocation(line: 3647, column: 6, scope: !5555)
!5577 = !DILocation(line: 3647, column: 18, scope: !5574)
!5578 = !DILocation(line: 3648, column: 12, scope: !5555)
!5579 = !DILocation(line: 3637, column: 5, scope: !5556)
!5580 = distinct !{!5580, !5581, !5582}
!5581 = !DILocation(line: 3637, column: 5, scope: !5557)
!5582 = !DILocation(line: 3649, column: 5, scope: !5557)
!5583 = !DILocation(line: 3651, column: 11, scope: !5379)
!5584 = !DILocation(line: 3651, column: 5, scope: !5379)
!5585 = !DILocation(line: 3652, column: 10, scope: !5586)
!5586 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3652, column: 9)
!5587 = !DILocation(line: 3652, column: 9, scope: !5379)
!5588 = !DILocation(line: 3654, column: 10, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5586, file: !3, line: 3652, column: 21)
!5590 = !DILocation(line: 3655, column: 20, scope: !5591)
!5591 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 3655, column: 14)
!5592 = !DILocation(line: 3655, column: 14, scope: !5591)
!5593 = !DILocation(line: 3655, column: 14, scope: !5589)
!5594 = !DILocation(line: 3656, column: 13, scope: !5591)
!5595 = !DILocation(line: 3657, column: 5, scope: !5589)
!5596 = !DILocation(line: 3658, column: 9, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3658, column: 9)
!5598 = !DILocation(line: 3658, column: 16, scope: !5597)
!5599 = !DILocation(line: 3658, column: 9, scope: !5379)
!5600 = !DILocation(line: 3659, column: 7, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5602, file: !3, line: 3659, column: 6)
!5602 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 3658, column: 23)
!5603 = !DILocation(line: 3659, column: 6, scope: !5602)
!5604 = !DILocation(line: 3659, column: 18, scope: !5601)
!5605 = !DILocation(line: 3660, column: 2, scope: !5602)
!5606 = !DILocation(line: 3663, column: 8, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 3663, column: 8)
!5608 = !DILocation(line: 3663, column: 8, scope: !5379)
!5609 = !DILocation(line: 3664, column: 6, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 3664, column: 6)
!5611 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 3663, column: 17)
!5612 = !DILocation(line: 3664, column: 6, scope: !5611)
!5613 = !DILocation(line: 3665, column: 14, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 3664, column: 12)
!5615 = !DILocation(line: 3665, column: 6, scope: !5614)
!5616 = !DILocation(line: 3666, column: 2, scope: !5614)
!5617 = !DILocation(line: 3666, column: 13, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 3666, column: 13)
!5619 = !DILocation(line: 3666, column: 13, scope: !5610)
!5620 = !DILocation(line: 3667, column: 20, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 3666, column: 25)
!5622 = !DILocation(line: 3667, column: 31, scope: !5621)
!5623 = !DILocation(line: 3667, column: 40, scope: !5621)
!5624 = !DILocation(line: 3667, column: 39, scope: !5621)
!5625 = !DILocation(line: 3667, column: 29, scope: !5621)
!5626 = !DILocation(line: 3667, column: 55, scope: !5621)
!5627 = !DILocation(line: 3667, column: 65, scope: !5621)
!5628 = !DILocation(line: 3667, column: 6, scope: !5621)
!5629 = !DILocation(line: 3668, column: 2, scope: !5621)
!5630 = !DILocation(line: 3669, column: 20, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 3668, column: 9)
!5632 = !DILocation(line: 3669, column: 30, scope: !5631)
!5633 = !DILocation(line: 3669, column: 40, scope: !5631)
!5634 = !DILocation(line: 3669, column: 39, scope: !5631)
!5635 = !DILocation(line: 3669, column: 28, scope: !5631)
!5636 = !DILocation(line: 3669, column: 55, scope: !5631)
!5637 = !DILocation(line: 3669, column: 65, scope: !5631)
!5638 = !DILocation(line: 3669, column: 6, scope: !5631)
!5639 = !DILocation(line: 3671, column: 7, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 3671, column: 6)
!5641 = !DILocation(line: 3671, column: 12, scope: !5640)
!5642 = !DILocation(line: 3671, column: 16, scope: !5640)
!5643 = !DILocation(line: 3671, column: 6, scope: !5611)
!5644 = !DILocation(line: 3672, column: 14, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 3671, column: 27)
!5646 = !DILocation(line: 3672, column: 6, scope: !5645)
!5647 = !DILocation(line: 3673, column: 2, scope: !5645)
!5648 = !DILocation(line: 3674, column: 10, scope: !5611)
!5649 = !DILocation(line: 3674, column: 2, scope: !5611)
!5650 = !DILocation(line: 3675, column: 5, scope: !5611)
!5651 = !DILocation(line: 3676, column: 1, scope: !5379)
!5652 = distinct !DISubprogram(name: "treat_stdin", scope: !3, file: !3, line: 3434, type: !693, scopeLine: 3435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!5653 = !DILocation(line: 3436, column: 10, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3436, column: 9)
!5655 = !DILocation(line: 3436, column: 16, scope: !5654)
!5656 = !DILocation(line: 3436, column: 20, scope: !5654)
!5657 = !DILocation(line: 3436, column: 25, scope: !5654)
!5658 = !DILocation(line: 3437, column: 25, scope: !5654)
!5659 = !DILocation(line: 3437, column: 38, scope: !5654)
!5660 = !DILocation(line: 3437, column: 46, scope: !5654)
!5661 = !DILocation(line: 3437, column: 9, scope: !5654)
!5662 = !DILocation(line: 3437, column: 2, scope: !5654)
!5663 = !DILocation(line: 3436, column: 9, scope: !5652)
!5664 = !DILocation(line: 3450, column: 10, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5654, file: !3, line: 3437, column: 57)
!5666 = !DILocation(line: 3452, column: 3, scope: !5665)
!5667 = !DILocation(line: 3452, column: 13, scope: !5665)
!5668 = !DILocation(line: 3453, column: 3, scope: !5665)
!5669 = !DILocation(line: 3450, column: 2, scope: !5665)
!5670 = !DILocation(line: 3454, column: 10, scope: !5665)
!5671 = !DILocation(line: 3454, column: 44, scope: !5665)
!5672 = !DILocation(line: 3454, column: 2, scope: !5665)
!5673 = !DILocation(line: 3455, column: 2, scope: !5665)
!5674 = !DILocation(line: 3456, column: 5, scope: !5665)
!5675 = !DILocation(line: 3458, column: 9, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3458, column: 9)
!5677 = !DILocation(line: 3458, column: 20, scope: !5676)
!5678 = !DILocation(line: 3458, column: 24, scope: !5676)
!5679 = !DILocation(line: 3458, column: 9, scope: !5652)
!5680 = !DILocation(line: 3460, column: 5, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 3458, column: 31)
!5682 = !DILocation(line: 3461, column: 10, scope: !5683)
!5683 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3461, column: 9)
!5684 = !DILocation(line: 3461, column: 15, scope: !5683)
!5685 = !DILocation(line: 3461, column: 19, scope: !5683)
!5686 = !DILocation(line: 3461, column: 24, scope: !5683)
!5687 = !DILocation(line: 3461, column: 29, scope: !5683)
!5688 = !DILocation(line: 3461, column: 40, scope: !5683)
!5689 = !DILocation(line: 3461, column: 44, scope: !5683)
!5690 = !DILocation(line: 3461, column: 9, scope: !5652)
!5691 = !DILocation(line: 3463, column: 5, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 3461, column: 52)
!5693 = !DILocation(line: 3464, column: 5, scope: !5652)
!5694 = !DILocation(line: 3465, column: 5, scope: !5652)
!5695 = !DILocation(line: 3468, column: 16, scope: !5652)
!5696 = !DILocation(line: 3471, column: 9, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3471, column: 9)
!5698 = !DILocation(line: 3471, column: 14, scope: !5697)
!5699 = !DILocation(line: 3471, column: 18, scope: !5697)
!5700 = !DILocation(line: 3471, column: 9, scope: !5652)
!5701 = !DILocation(line: 3472, column: 19, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 3472, column: 6)
!5703 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 3471, column: 27)
!5704 = !DILocation(line: 3472, column: 12, scope: !5702)
!5705 = !DILocation(line: 3472, column: 6, scope: !5702)
!5706 = !DILocation(line: 3472, column: 35, scope: !5702)
!5707 = !DILocation(line: 3472, column: 6, scope: !5703)
!5708 = !DILocation(line: 3473, column: 6, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 3472, column: 41)
!5710 = !DILocation(line: 3474, column: 6, scope: !5709)
!5711 = !DILocation(line: 3475, column: 2, scope: !5709)
!5712 = !DILocation(line: 3479, column: 25, scope: !5703)
!5713 = !DILocation(line: 3479, column: 17, scope: !5703)
!5714 = !DILocation(line: 3481, column: 5, scope: !5703)
!5715 = !DILocation(line: 3482, column: 16, scope: !5652)
!5716 = !DILocation(line: 3484, column: 5, scope: !5652)
!5717 = !DILocation(line: 3485, column: 15, scope: !5652)
!5718 = !DILocation(line: 3486, column: 13, scope: !5652)
!5719 = !DILocation(line: 3488, column: 9, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3488, column: 9)
!5721 = !DILocation(line: 3488, column: 9, scope: !5652)
!5722 = !DILocation(line: 3489, column: 22, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 3488, column: 21)
!5724 = !DILocation(line: 3489, column: 11, scope: !5723)
!5725 = !DILocation(line: 3489, column: 9, scope: !5723)
!5726 = !DILocation(line: 3490, column: 6, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 3490, column: 6)
!5728 = !DILocation(line: 3490, column: 13, scope: !5727)
!5729 = !DILocation(line: 3490, column: 6, scope: !5723)
!5730 = !DILocation(line: 3491, column: 14, scope: !5731)
!5731 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 3490, column: 18)
!5732 = !DILocation(line: 3491, column: 6, scope: !5731)
!5733 = !DILocation(line: 3492, column: 2, scope: !5731)
!5734 = !DILocation(line: 3493, column: 5, scope: !5723)
!5735 = !DILocation(line: 3494, column: 9, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3494, column: 9)
!5737 = !DILocation(line: 3494, column: 9, scope: !5652)
!5738 = !DILocation(line: 3495, column: 17, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5736, file: !3, line: 3494, column: 15)
!5740 = !DILocation(line: 3495, column: 22, scope: !5739)
!5741 = !DILocation(line: 3495, column: 9, scope: !5739)
!5742 = !DILocation(line: 3496, column: 9, scope: !5739)
!5743 = !DILocation(line: 3501, column: 5, scope: !5652)
!5744 = !DILocation(line: 3502, column: 8, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 3502, column: 6)
!5746 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 3501, column: 14)
!5747 = distinct !DILexicalBlock(scope: !5748, file: !3, line: 3501, column: 5)
!5748 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3501, column: 5)
!5749 = !DILocation(line: 3502, column: 21, scope: !5745)
!5750 = !DILocation(line: 3502, column: 14, scope: !5745)
!5751 = !DILocation(line: 3502, column: 36, scope: !5745)
!5752 = !DILocation(line: 3502, column: 29, scope: !5745)
!5753 = !DILocation(line: 3502, column: 6, scope: !5745)
!5754 = !DILocation(line: 3502, column: 45, scope: !5745)
!5755 = !DILocation(line: 3502, column: 6, scope: !5746)
!5756 = !DILocation(line: 3502, column: 52, scope: !5745)
!5757 = !DILocation(line: 3504, column: 6, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 3504, column: 6)
!5759 = !DILocation(line: 3504, column: 6, scope: !5746)
!5760 = !DILocation(line: 3505, column: 4, scope: !5758)
!5761 = !DILocation(line: 3507, column: 22, scope: !5746)
!5762 = !DILocation(line: 3507, column: 11, scope: !5746)
!5763 = !DILocation(line: 3507, column: 9, scope: !5746)
!5764 = !DILocation(line: 3508, column: 6, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 3508, column: 6)
!5766 = !DILocation(line: 3508, column: 13, scope: !5765)
!5767 = !DILocation(line: 3508, column: 6, scope: !5746)
!5768 = !DILocation(line: 3508, column: 18, scope: !5765)
!5769 = !DILocation(line: 3509, column: 12, scope: !5746)
!5770 = !DILocation(line: 3501, column: 5, scope: !5747)
!5771 = distinct !{!5771, !5772, !5773}
!5772 = !DILocation(line: 3501, column: 5, scope: !5748)
!5773 = !DILocation(line: 3510, column: 5, scope: !5748)
!5774 = !DILocation(line: 3512, column: 9, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 3512, column: 9)
!5776 = !DILocation(line: 3512, column: 9, scope: !5652)
!5777 = !DILocation(line: 3513, column: 6, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 3513, column: 6)
!5779 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 3512, column: 18)
!5780 = !DILocation(line: 3513, column: 6, scope: !5779)
!5781 = !DILocation(line: 3514, column: 14, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 3513, column: 12)
!5783 = !DILocation(line: 3514, column: 6, scope: !5782)
!5784 = !DILocation(line: 3516, column: 2, scope: !5782)
!5785 = !DILocation(line: 3516, column: 14, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 3516, column: 13)
!5787 = !DILocation(line: 3516, column: 13, scope: !5778)
!5788 = !DILocation(line: 3517, column: 20, scope: !5789)
!5789 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 3516, column: 26)
!5790 = !DILocation(line: 3517, column: 30, scope: !5789)
!5791 = !DILocation(line: 3517, column: 40, scope: !5789)
!5792 = !DILocation(line: 3517, column: 39, scope: !5789)
!5793 = !DILocation(line: 3517, column: 28, scope: !5789)
!5794 = !DILocation(line: 3517, column: 55, scope: !5789)
!5795 = !DILocation(line: 3517, column: 65, scope: !5789)
!5796 = !DILocation(line: 3517, column: 6, scope: !5789)
!5797 = !DILocation(line: 3518, column: 14, scope: !5789)
!5798 = !DILocation(line: 3518, column: 6, scope: !5789)
!5799 = !DILocation(line: 3524, column: 2, scope: !5789)
!5800 = !DILocation(line: 3525, column: 5, scope: !5779)
!5801 = !DILocation(line: 3526, column: 1, scope: !5652)
!5802 = !DILocalVariable(name: "ifd", arg: 1, scope: !710, file: !3, line: 4184, type: !12)
!5803 = !DILocation(line: 4184, column: 9, scope: !710)
!5804 = !DILocalVariable(name: "method", arg: 2, scope: !710, file: !3, line: 4185, type: !12)
!5805 = !DILocation(line: 4185, column: 9, scope: !710)
!5806 = !DILocalVariable(name: "crc", scope: !710, file: !3, line: 4187, type: !51)
!5807 = !DILocation(line: 4187, column: 9, scope: !710)
!5808 = !DILocalVariable(name: "date", scope: !710, file: !3, line: 4196, type: !19)
!5809 = !DILocation(line: 4196, column: 11, scope: !710)
!5810 = !DILocalVariable(name: "positive_off_t_width", scope: !710, file: !3, line: 4197, type: !12)
!5811 = !DILocation(line: 4197, column: 9, scope: !710)
!5812 = !DILocalVariable(name: "o", scope: !710, file: !3, line: 4198, type: !79)
!5813 = !DILocation(line: 4198, column: 11, scope: !710)
!5814 = !DILocation(line: 4200, column: 12, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4200, column: 5)
!5816 = !DILocation(line: 4200, column: 10, scope: !5815)
!5817 = !DILocation(line: 4200, column: 30, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 4200, column: 5)
!5819 = !DILocation(line: 4200, column: 28, scope: !5818)
!5820 = !DILocation(line: 4200, column: 5, scope: !5815)
!5821 = !DILocation(line: 4201, column: 22, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5818, file: !3, line: 4200, column: 43)
!5823 = !DILocation(line: 4202, column: 5, scope: !5822)
!5824 = !DILocation(line: 4200, column: 36, scope: !5818)
!5825 = !DILocation(line: 4200, column: 5, scope: !5818)
!5826 = distinct !{!5826, !5820, !5827}
!5827 = !DILocation(line: 4202, column: 5, scope: !5815)
!5828 = !DILocation(line: 4204, column: 9, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4204, column: 9)
!5830 = !DILocation(line: 4204, column: 20, scope: !5829)
!5831 = !DILocation(line: 4204, column: 23, scope: !5829)
!5832 = !DILocation(line: 4204, column: 30, scope: !5829)
!5833 = !DILocation(line: 4204, column: 9, scope: !710)
!5834 = !DILocation(line: 4205, column: 13, scope: !5835)
!5835 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 4204, column: 36)
!5836 = !DILocation(line: 4206, column: 6, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5835, file: !3, line: 4206, column: 6)
!5838 = !DILocation(line: 4206, column: 6, scope: !5835)
!5839 = !DILocation(line: 4207, column: 6, scope: !5840)
!5840 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 4206, column: 16)
!5841 = !DILocation(line: 4208, column: 2, scope: !5840)
!5842 = !DILocation(line: 4209, column: 7, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5835, file: !3, line: 4209, column: 6)
!5844 = !DILocation(line: 4209, column: 6, scope: !5835)
!5845 = !DILocation(line: 4211, column: 6, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 4209, column: 14)
!5847 = !DILocation(line: 4211, column: 28, scope: !5846)
!5848 = !DILocation(line: 4212, column: 6, scope: !5846)
!5849 = !DILocation(line: 4212, column: 28, scope: !5846)
!5850 = !DILocation(line: 4210, column: 6, scope: !5846)
!5851 = !DILocation(line: 4213, column: 2, scope: !5846)
!5852 = !DILocation(line: 4214, column: 5, scope: !5835)
!5853 = !DILocation(line: 4214, column: 16, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 4214, column: 16)
!5855 = !DILocation(line: 4214, column: 23, scope: !5854)
!5856 = !DILocation(line: 4214, column: 16, scope: !5829)
!5857 = !DILocation(line: 4215, column: 6, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 4215, column: 6)
!5859 = distinct !DILexicalBlock(scope: !5854, file: !3, line: 4214, column: 28)
!5860 = !DILocation(line: 4215, column: 15, scope: !5858)
!5861 = !DILocation(line: 4215, column: 20, scope: !5858)
!5862 = !DILocation(line: 4215, column: 23, scope: !5858)
!5863 = !DILocation(line: 4215, column: 33, scope: !5858)
!5864 = !DILocation(line: 4215, column: 6, scope: !5859)
!5865 = !DILocation(line: 4215, column: 39, scope: !5858)
!5866 = !DILocation(line: 4216, column: 6, scope: !5867)
!5867 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 4216, column: 6)
!5868 = !DILocation(line: 4216, column: 6, scope: !5859)
!5869 = !DILocation(line: 4217, column: 6, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5867, file: !3, line: 4216, column: 15)
!5871 = !DILocation(line: 4218, column: 2, scope: !5870)
!5872 = !DILocation(line: 4219, column: 6, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 4219, column: 6)
!5874 = !DILocation(line: 4219, column: 14, scope: !5873)
!5875 = !DILocation(line: 4219, column: 18, scope: !5873)
!5876 = !DILocation(line: 4219, column: 6, scope: !5859)
!5877 = !DILocation(line: 4220, column: 17, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 4219, column: 25)
!5879 = !DILocation(line: 4220, column: 25, scope: !5878)
!5880 = !DILocation(line: 4220, column: 35, scope: !5878)
!5881 = !DILocation(line: 4220, column: 6, scope: !5878)
!5882 = !DILocation(line: 4221, column: 6, scope: !5878)
!5883 = !DILocation(line: 4222, column: 17, scope: !5878)
!5884 = !DILocation(line: 4222, column: 25, scope: !5878)
!5885 = !DILocation(line: 4222, column: 36, scope: !5878)
!5886 = !DILocation(line: 4222, column: 6, scope: !5878)
!5887 = !DILocation(line: 4223, column: 6, scope: !5878)
!5888 = !DILocation(line: 4224, column: 2, scope: !5878)
!5889 = !DILocation(line: 4225, column: 16, scope: !5859)
!5890 = !DILocation(line: 4225, column: 27, scope: !5859)
!5891 = !DILocation(line: 4225, column: 36, scope: !5859)
!5892 = !DILocation(line: 4225, column: 35, scope: !5859)
!5893 = !DILocation(line: 4225, column: 25, scope: !5859)
!5894 = !DILocation(line: 4225, column: 51, scope: !5859)
!5895 = !DILocation(line: 4225, column: 62, scope: !5859)
!5896 = !DILocation(line: 4225, column: 2, scope: !5859)
!5897 = !DILocation(line: 4229, column: 2, scope: !5859)
!5898 = !DILocation(line: 4230, column: 2, scope: !5859)
!5899 = !DILocation(line: 4232, column: 9, scope: !710)
!5900 = !DILocation(line: 4233, column: 15, scope: !710)
!5901 = !DILocation(line: 4234, column: 16, scope: !710)
!5902 = !DILocation(line: 4234, column: 14, scope: !710)
!5903 = !DILocation(line: 4237, column: 9, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4237, column: 9)
!5905 = !DILocation(line: 4237, column: 16, scope: !5904)
!5906 = !DILocation(line: 4237, column: 28, scope: !5904)
!5907 = !DILocation(line: 4237, column: 32, scope: !5904)
!5908 = !DILocation(line: 4237, column: 9, scope: !710)
!5909 = !DILocation(line: 4244, column: 26, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 4237, column: 45)
!5911 = !DILocation(line: 4244, column: 20, scope: !5910)
!5912 = !DILocation(line: 4244, column: 18, scope: !5910)
!5913 = !DILocation(line: 4245, column: 13, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 4245, column: 13)
!5915 = !DILocation(line: 4245, column: 22, scope: !5914)
!5916 = !DILocation(line: 4245, column: 13, scope: !5910)
!5917 = !DILocalVariable(name: "buf", scope: !5918, file: !3, line: 4246, type: !401)
!5918 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 4245, column: 30)
!5919 = !DILocation(line: 4246, column: 17, scope: !5918)
!5920 = !DILocation(line: 4247, column: 22, scope: !5918)
!5921 = !DILocation(line: 4248, column: 22, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 4248, column: 17)
!5923 = !DILocation(line: 4248, column: 34, scope: !5922)
!5924 = !DILocation(line: 4248, column: 17, scope: !5922)
!5925 = !DILocation(line: 4248, column: 52, scope: !5922)
!5926 = !DILocation(line: 4248, column: 17, scope: !5918)
!5927 = !DILocation(line: 4249, column: 17, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 4248, column: 68)
!5929 = !DILocation(line: 4250, column: 13, scope: !5928)
!5930 = !DILocation(line: 4251, column: 25, scope: !5918)
!5931 = !DILocation(line: 4251, column: 23, scope: !5918)
!5932 = !DILocation(line: 4252, column: 18, scope: !5918)
!5933 = !DILocation(line: 4252, column: 16, scope: !5918)
!5934 = !DILocation(line: 4253, column: 2, scope: !5918)
!5935 = !DILocation(line: 4254, column: 5, scope: !5910)
!5936 = !DILocation(line: 4256, column: 12, scope: !710)
!5937 = !DILocation(line: 4256, column: 40, scope: !710)
!5938 = !DILocation(line: 4256, column: 10, scope: !710)
!5939 = !DILocation(line: 4257, column: 5, scope: !710)
!5940 = !DILocation(line: 4257, column: 14, scope: !710)
!5941 = !DILocation(line: 4258, column: 9, scope: !5942)
!5942 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4258, column: 9)
!5943 = !DILocation(line: 4258, column: 9, scope: !710)
!5944 = !DILocation(line: 4259, column: 43, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5942, file: !3, line: 4258, column: 18)
!5946 = !DILocation(line: 4259, column: 35, scope: !5945)
!5947 = !DILocation(line: 4259, column: 52, scope: !5945)
!5948 = !DILocation(line: 4259, column: 57, scope: !5945)
!5949 = !DILocation(line: 4259, column: 9, scope: !5945)
!5950 = !DILocation(line: 4260, column: 5, scope: !5945)
!5951 = !DILocation(line: 4261, column: 16, scope: !710)
!5952 = !DILocation(line: 4261, column: 24, scope: !710)
!5953 = !DILocation(line: 4261, column: 34, scope: !710)
!5954 = !DILocation(line: 4261, column: 5, scope: !710)
!5955 = !DILocation(line: 4262, column: 5, scope: !710)
!5956 = !DILocation(line: 4263, column: 16, scope: !710)
!5957 = !DILocation(line: 4263, column: 24, scope: !710)
!5958 = !DILocation(line: 4263, column: 35, scope: !710)
!5959 = !DILocation(line: 4263, column: 5, scope: !710)
!5960 = !DILocation(line: 4264, column: 5, scope: !710)
!5961 = !DILocation(line: 4265, column: 9, scope: !5962)
!5962 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4265, column: 9)
!5963 = !DILocation(line: 4265, column: 19, scope: !5962)
!5964 = !DILocation(line: 4265, column: 9, scope: !710)
!5965 = !DILocation(line: 4266, column: 11, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5962, file: !3, line: 4265, column: 27)
!5967 = !DILocation(line: 4267, column: 38, scope: !5966)
!5968 = !DILocation(line: 4267, column: 23, scope: !5966)
!5969 = !DILocation(line: 4267, column: 11, scope: !5966)
!5970 = !DILocation(line: 4268, column: 5, scope: !5966)
!5971 = !DILocation(line: 4268, column: 16, scope: !5972)
!5972 = distinct !DILexicalBlock(scope: !5962, file: !3, line: 4268, column: 16)
!5973 = !DILocation(line: 4268, column: 25, scope: !5972)
!5974 = !DILocation(line: 4268, column: 16, scope: !5962)
!5975 = !DILocation(line: 4269, column: 15, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5972, file: !3, line: 4268, column: 31)
!5977 = !DILocation(line: 4269, column: 12, scope: !5976)
!5978 = !DILocation(line: 4270, column: 5, scope: !5976)
!5979 = !DILocation(line: 4271, column: 9, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !710, file: !3, line: 4271, column: 9)
!5981 = !DILocation(line: 4271, column: 19, scope: !5980)
!5982 = !DILocation(line: 4271, column: 9, scope: !710)
!5983 = !DILocation(line: 4272, column: 12, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 4271, column: 27)
!5985 = !DILocation(line: 4273, column: 38, scope: !5984)
!5986 = !DILocation(line: 4273, column: 23, scope: !5984)
!5987 = !DILocation(line: 4273, column: 11, scope: !5984)
!5988 = !DILocation(line: 4274, column: 5, scope: !5984)
!5989 = !DILocation(line: 4274, column: 16, scope: !5990)
!5990 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 4274, column: 16)
!5991 = !DILocation(line: 4274, column: 26, scope: !5990)
!5992 = !DILocation(line: 4274, column: 16, scope: !5980)
!5993 = !DILocation(line: 4275, column: 15, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5990, file: !3, line: 4274, column: 32)
!5995 = !DILocation(line: 4275, column: 12, scope: !5994)
!5996 = !DILocation(line: 4276, column: 5, scope: !5994)
!5997 = !DILocation(line: 4277, column: 19, scope: !710)
!5998 = !DILocation(line: 4277, column: 30, scope: !710)
!5999 = !DILocation(line: 4277, column: 39, scope: !710)
!6000 = !DILocation(line: 4277, column: 38, scope: !710)
!6001 = !DILocation(line: 4277, column: 28, scope: !710)
!6002 = !DILocation(line: 4277, column: 54, scope: !710)
!6003 = !DILocation(line: 4277, column: 65, scope: !710)
!6004 = !DILocation(line: 4277, column: 5, scope: !710)
!6005 = !DILocation(line: 4278, column: 5, scope: !710)
!6006 = !DILocation(line: 4279, column: 1, scope: !710)
!6007 = distinct !DISubprogram(name: "fprint_off", scope: !3, file: !3, line: 8307, type: !6008, scopeLine: 8311, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6008 = !DISubroutineType(types: !6009)
!6009 = !{null, !87, !79, !12}
!6010 = !DILocalVariable(name: "file", arg: 1, scope: !6007, file: !3, line: 8308, type: !87)
!6011 = !DILocation(line: 8308, column: 11, scope: !6007)
!6012 = !DILocalVariable(name: "offset", arg: 2, scope: !6007, file: !3, line: 8309, type: !79)
!6013 = !DILocation(line: 8309, column: 11, scope: !6007)
!6014 = !DILocalVariable(name: "width", arg: 3, scope: !6007, file: !3, line: 8310, type: !12)
!6015 = !DILocation(line: 8310, column: 9, scope: !6007)
!6016 = !DILocalVariable(name: "buf", scope: !6007, file: !3, line: 8312, type: !319)
!6017 = !DILocation(line: 8312, column: 10, scope: !6007)
!6018 = !DILocalVariable(name: "p", scope: !6007, file: !3, line: 8313, type: !19)
!6019 = !DILocation(line: 8313, column: 11, scope: !6007)
!6020 = !DILocation(line: 8313, column: 15, scope: !6007)
!6021 = !DILocation(line: 8313, column: 19, scope: !6007)
!6022 = !DILocation(line: 8316, column: 9, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 8316, column: 9)
!6024 = !DILocation(line: 8316, column: 16, scope: !6023)
!6025 = !DILocation(line: 8316, column: 9, scope: !6007)
!6026 = !DILocation(line: 8317, column: 2, scope: !6027)
!6027 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 8316, column: 21)
!6028 = !DILocation(line: 8318, column: 17, scope: !6027)
!6029 = !DILocation(line: 8318, column: 24, scope: !6027)
!6030 = !DILocation(line: 8318, column: 15, scope: !6027)
!6031 = !DILocation(line: 8318, column: 11, scope: !6027)
!6032 = !DILocation(line: 8318, column: 5, scope: !6027)
!6033 = !DILocation(line: 8318, column: 9, scope: !6027)
!6034 = !DILocation(line: 8318, column: 4, scope: !6027)
!6035 = !DILocation(line: 8319, column: 17, scope: !6027)
!6036 = !DILocation(line: 8319, column: 24, scope: !6027)
!6037 = distinct !{!6037, !6026, !6038}
!6038 = !DILocation(line: 8319, column: 28, scope: !6027)
!6039 = !DILocation(line: 8321, column: 3, scope: !6027)
!6040 = !DILocation(line: 8321, column: 7, scope: !6027)
!6041 = !DILocation(line: 8322, column: 5, scope: !6027)
!6042 = !DILocation(line: 8323, column: 2, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 8322, column: 12)
!6044 = !DILocation(line: 8324, column: 17, scope: !6043)
!6045 = !DILocation(line: 8324, column: 24, scope: !6043)
!6046 = !DILocation(line: 8324, column: 15, scope: !6043)
!6047 = !DILocation(line: 8324, column: 11, scope: !6043)
!6048 = !DILocation(line: 8324, column: 5, scope: !6043)
!6049 = !DILocation(line: 8324, column: 9, scope: !6043)
!6050 = !DILocation(line: 8324, column: 4, scope: !6043)
!6051 = !DILocation(line: 8325, column: 17, scope: !6043)
!6052 = !DILocation(line: 8325, column: 24, scope: !6043)
!6053 = distinct !{!6053, !6042, !6054}
!6054 = !DILocation(line: 8325, column: 28, scope: !6043)
!6055 = !DILocation(line: 8328, column: 14, scope: !6007)
!6056 = !DILocation(line: 8328, column: 18, scope: !6007)
!6057 = !DILocation(line: 8328, column: 33, scope: !6007)
!6058 = !DILocation(line: 8328, column: 31, scope: !6007)
!6059 = !DILocation(line: 8328, column: 11, scope: !6007)
!6060 = !DILocation(line: 8329, column: 5, scope: !6007)
!6061 = !DILocation(line: 8329, column: 21, scope: !6007)
!6062 = !DILocation(line: 8329, column: 14, scope: !6007)
!6063 = !DILocation(line: 8330, column: 13, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 8329, column: 25)
!6065 = !DILocation(line: 8330, column: 2, scope: !6064)
!6066 = distinct !{!6066, !6060, !6067}
!6067 = !DILocation(line: 8331, column: 5, scope: !6007)
!6068 = !DILocation(line: 8332, column: 5, scope: !6007)
!6069 = !DILocation(line: 8332, column: 13, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6071, file: !3, line: 8332, column: 5)
!6071 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 8332, column: 5)
!6072 = !DILocation(line: 8332, column: 17, scope: !6070)
!6073 = !DILocation(line: 8332, column: 21, scope: !6070)
!6074 = !DILocation(line: 8332, column: 15, scope: !6070)
!6075 = !DILocation(line: 8332, column: 5, scope: !6071)
!6076 = !DILocation(line: 8333, column: 9, scope: !6070)
!6077 = !DILocation(line: 8333, column: 8, scope: !6070)
!6078 = !DILocation(line: 8333, column: 12, scope: !6070)
!6079 = !DILocation(line: 8333, column: 2, scope: !6070)
!6080 = !DILocation(line: 8332, column: 37, scope: !6070)
!6081 = !DILocation(line: 8332, column: 5, scope: !6070)
!6082 = distinct !{!6082, !6075, !6083}
!6083 = !DILocation(line: 8333, column: 16, scope: !6071)
!6084 = !DILocation(line: 8334, column: 1, scope: !6007)
!6085 = distinct !DISubprogram(name: "display_ratio", scope: !3, file: !3, line: 8295, type: !6086, scopeLine: 8299, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6086 = !DISubroutineType(types: !6087)
!6087 = !{null, !79, !79, !87}
!6088 = !DILocalVariable(name: "num", arg: 1, scope: !6085, file: !3, line: 8296, type: !79)
!6089 = !DILocation(line: 8296, column: 11, scope: !6085)
!6090 = !DILocalVariable(name: "den", arg: 2, scope: !6085, file: !3, line: 8297, type: !79)
!6091 = !DILocation(line: 8297, column: 11, scope: !6085)
!6092 = !DILocalVariable(name: "file", arg: 3, scope: !6085, file: !3, line: 8298, type: !87)
!6093 = !DILocation(line: 8298, column: 11, scope: !6085)
!6094 = !DILocation(line: 8300, column: 13, scope: !6085)
!6095 = !DILocation(line: 8300, column: 30, scope: !6085)
!6096 = !DILocation(line: 8300, column: 34, scope: !6085)
!6097 = !DILocation(line: 8300, column: 53, scope: !6085)
!6098 = !DILocation(line: 8300, column: 51, scope: !6085)
!6099 = !DILocation(line: 8300, column: 59, scope: !6085)
!6100 = !DILocation(line: 8300, column: 57, scope: !6085)
!6101 = !DILocation(line: 8300, column: 5, scope: !6085)
!6102 = !DILocation(line: 8301, column: 1, scope: !6085)
!6103 = distinct !DISubprogram(name: "progerror", scope: !3, file: !3, line: 3203, type: !2624, scopeLine: 3205, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6104 = !DILocalVariable(name: "string", arg: 1, scope: !6103, file: !3, line: 3204, type: !19)
!6105 = !DILocation(line: 3204, column: 11, scope: !6103)
!6106 = !DILocalVariable(name: "e", scope: !6103, file: !3, line: 3206, type: !12)
!6107 = !DILocation(line: 3206, column: 9, scope: !6103)
!6108 = !DILocation(line: 3206, column: 13, scope: !6103)
!6109 = !DILocation(line: 3207, column: 13, scope: !6103)
!6110 = !DILocation(line: 3207, column: 29, scope: !6103)
!6111 = !DILocation(line: 3207, column: 5, scope: !6103)
!6112 = !DILocation(line: 3208, column: 13, scope: !6103)
!6113 = !DILocation(line: 3208, column: 5, scope: !6103)
!6114 = !DILocation(line: 3208, column: 11, scope: !6103)
!6115 = !DILocation(line: 3209, column: 12, scope: !6103)
!6116 = !DILocation(line: 3209, column: 5, scope: !6103)
!6117 = !DILocation(line: 3210, column: 15, scope: !6103)
!6118 = !DILocation(line: 3211, column: 1, scope: !6103)
!6119 = distinct !DISubprogram(name: "clear_bufs", scope: !3, file: !3, line: 7973, type: !693, scopeLine: 7974, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6120 = !DILocation(line: 7975, column: 12, scope: !6119)
!6121 = !DILocation(line: 7976, column: 20, scope: !6119)
!6122 = !DILocation(line: 7976, column: 12, scope: !6119)
!6123 = !DILocation(line: 7977, column: 26, scope: !6119)
!6124 = !DILocation(line: 7977, column: 14, scope: !6119)
!6125 = !DILocation(line: 7978, column: 1, scope: !6119)
!6126 = distinct !DISubprogram(name: "get_method", scope: !3, file: !3, line: 3995, type: !6127, scopeLine: 3997, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6127 = !DISubroutineType(types: !6128)
!6128 = !{!12, !12}
!6129 = !DILocalVariable(name: "in", arg: 1, scope: !6126, file: !3, line: 3996, type: !12)
!6130 = !DILocation(line: 3996, column: 9, scope: !6126)
!6131 = !DILocalVariable(name: "flags", scope: !6126, file: !3, line: 3998, type: !13)
!6132 = !DILocation(line: 3998, column: 9, scope: !6126)
!6133 = !DILocalVariable(name: "magic", scope: !6126, file: !3, line: 3999, type: !330)
!6134 = !DILocation(line: 3999, column: 10, scope: !6126)
!6135 = !DILocalVariable(name: "imagic1", scope: !6126, file: !3, line: 4000, type: !12)
!6136 = !DILocation(line: 4000, column: 9, scope: !6126)
!6137 = !DILocalVariable(name: "stamp", scope: !6126, file: !3, line: 4001, type: !51)
!6138 = !DILocation(line: 4001, column: 9, scope: !6126)
!6139 = !DILocation(line: 4006, column: 9, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 4006, column: 9)
!6141 = !DILocation(line: 4006, column: 15, scope: !6140)
!6142 = !DILocation(line: 4006, column: 18, scope: !6140)
!6143 = !DILocation(line: 4006, column: 9, scope: !6126)
!6144 = !DILocation(line: 4007, column: 19, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 4006, column: 29)
!6146 = !DILocation(line: 4007, column: 13, scope: !6145)
!6147 = !DILocation(line: 4007, column: 2, scope: !6145)
!6148 = !DILocation(line: 4007, column: 11, scope: !6145)
!6149 = !DILocation(line: 4008, column: 12, scope: !6145)
!6150 = !DILocation(line: 4008, column: 10, scope: !6145)
!6151 = !DILocation(line: 4009, column: 20, scope: !6145)
!6152 = !DILocation(line: 4009, column: 13, scope: !6145)
!6153 = !DILocation(line: 4009, column: 2, scope: !6145)
!6154 = !DILocation(line: 4009, column: 11, scope: !6145)
!6155 = !DILocation(line: 4011, column: 5, scope: !6145)
!6156 = !DILocation(line: 4012, column: 19, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 4011, column: 12)
!6158 = !DILocation(line: 4012, column: 13, scope: !6157)
!6159 = !DILocation(line: 4012, column: 2, scope: !6157)
!6160 = !DILocation(line: 4012, column: 11, scope: !6157)
!6161 = !DILocation(line: 4013, column: 19, scope: !6157)
!6162 = !DILocation(line: 4013, column: 13, scope: !6157)
!6163 = !DILocation(line: 4013, column: 2, scope: !6157)
!6164 = !DILocation(line: 4013, column: 11, scope: !6157)
!6165 = !DILocation(line: 4014, column: 10, scope: !6157)
!6166 = !DILocation(line: 4016, column: 12, scope: !6126)
!6167 = !DILocation(line: 4017, column: 12, scope: !6126)
!6168 = !DILocation(line: 4018, column: 18, scope: !6126)
!6169 = !DILocation(line: 4019, column: 17, scope: !6126)
!6170 = !DILocation(line: 4022, column: 16, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 4022, column: 9)
!6172 = !DILocation(line: 4022, column: 9, scope: !6171)
!6173 = !DILocation(line: 4022, column: 38, scope: !6171)
!6174 = !DILocation(line: 4023, column: 9, scope: !6171)
!6175 = !DILocation(line: 4023, column: 19, scope: !6171)
!6176 = !DILocation(line: 4023, column: 12, scope: !6171)
!6177 = !DILocation(line: 4023, column: 45, scope: !6171)
!6178 = !DILocation(line: 4022, column: 9, scope: !6126)
!6179 = !DILocation(line: 4025, column: 16, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6171, file: !3, line: 4023, column: 51)
!6181 = !DILocation(line: 4025, column: 9, scope: !6180)
!6182 = !DILocation(line: 4026, column: 6, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4026, column: 6)
!6184 = !DILocation(line: 4026, column: 13, scope: !6183)
!6185 = !DILocation(line: 4026, column: 6, scope: !6180)
!6186 = !DILocation(line: 4027, column: 14, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 4026, column: 26)
!6188 = !DILocation(line: 4029, column: 7, scope: !6187)
!6189 = !DILocation(line: 4029, column: 25, scope: !6187)
!6190 = !DILocation(line: 4027, column: 6, scope: !6187)
!6191 = !DILocation(line: 4030, column: 16, scope: !6187)
!6192 = !DILocation(line: 4031, column: 6, scope: !6187)
!6193 = !DILocation(line: 4033, column: 7, scope: !6180)
!6194 = !DILocation(line: 4034, column: 16, scope: !6180)
!6195 = !DILocation(line: 4034, column: 11, scope: !6180)
!6196 = !DILocation(line: 4034, column: 9, scope: !6180)
!6197 = !DILocation(line: 4036, column: 7, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4036, column: 6)
!6199 = !DILocation(line: 4036, column: 13, scope: !6198)
!6200 = !DILocation(line: 4036, column: 26, scope: !6198)
!6201 = !DILocation(line: 4036, column: 6, scope: !6180)
!6202 = !DILocation(line: 4037, column: 14, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 4036, column: 32)
!6204 = !DILocation(line: 4039, column: 7, scope: !6203)
!6205 = !DILocation(line: 4037, column: 6, scope: !6203)
!6206 = !DILocation(line: 4040, column: 16, scope: !6203)
!6207 = !DILocation(line: 4041, column: 6, scope: !6203)
!6208 = !DILocation(line: 4043, column: 7, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4043, column: 6)
!6210 = !DILocation(line: 4043, column: 13, scope: !6209)
!6211 = !DILocation(line: 4043, column: 29, scope: !6209)
!6212 = !DILocation(line: 4043, column: 6, scope: !6180)
!6213 = !DILocation(line: 4044, column: 14, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6209, file: !3, line: 4043, column: 35)
!6215 = !DILocation(line: 4046, column: 7, scope: !6214)
!6216 = !DILocation(line: 4044, column: 6, scope: !6214)
!6217 = !DILocation(line: 4047, column: 16, scope: !6214)
!6218 = !DILocation(line: 4048, column: 10, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 4048, column: 10)
!6220 = !DILocation(line: 4048, column: 16, scope: !6219)
!6221 = !DILocation(line: 4048, column: 10, scope: !6214)
!6222 = !DILocation(line: 4048, column: 22, scope: !6219)
!6223 = !DILocation(line: 4049, column: 2, scope: !6214)
!6224 = !DILocation(line: 4050, column: 7, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4050, column: 6)
!6226 = !DILocation(line: 4050, column: 13, scope: !6225)
!6227 = !DILocation(line: 4050, column: 25, scope: !6225)
!6228 = !DILocation(line: 4050, column: 6, scope: !6180)
!6229 = !DILocation(line: 4051, column: 14, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 4050, column: 31)
!6231 = !DILocation(line: 4053, column: 7, scope: !6230)
!6232 = !DILocation(line: 4053, column: 25, scope: !6230)
!6233 = !DILocation(line: 4051, column: 6, scope: !6230)
!6234 = !DILocation(line: 4054, column: 16, scope: !6230)
!6235 = !DILocation(line: 4055, column: 10, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 4055, column: 10)
!6237 = !DILocation(line: 4055, column: 16, scope: !6236)
!6238 = !DILocation(line: 4055, column: 10, scope: !6230)
!6239 = !DILocation(line: 4055, column: 22, scope: !6236)
!6240 = !DILocation(line: 4056, column: 2, scope: !6230)
!6241 = !DILocation(line: 4057, column: 16, scope: !6180)
!6242 = !DILocation(line: 4057, column: 11, scope: !6180)
!6243 = !DILocation(line: 4057, column: 9, scope: !6180)
!6244 = !DILocation(line: 4058, column: 17, scope: !6180)
!6245 = !DILocation(line: 4058, column: 12, scope: !6180)
!6246 = !DILocation(line: 4058, column: 29, scope: !6180)
!6247 = !DILocation(line: 4058, column: 8, scope: !6180)
!6248 = !DILocation(line: 4059, column: 17, scope: !6180)
!6249 = !DILocation(line: 4059, column: 12, scope: !6180)
!6250 = !DILocation(line: 4059, column: 29, scope: !6180)
!6251 = !DILocation(line: 4059, column: 8, scope: !6180)
!6252 = !DILocation(line: 4060, column: 17, scope: !6180)
!6253 = !DILocation(line: 4060, column: 12, scope: !6180)
!6254 = !DILocation(line: 4060, column: 29, scope: !6180)
!6255 = !DILocation(line: 4060, column: 8, scope: !6180)
!6256 = !DILocation(line: 4061, column: 6, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4061, column: 6)
!6258 = !DILocation(line: 4061, column: 12, scope: !6257)
!6259 = !DILocation(line: 4061, column: 17, scope: !6257)
!6260 = !DILocation(line: 4061, column: 21, scope: !6257)
!6261 = !DILocation(line: 4061, column: 6, scope: !6180)
!6262 = !DILocation(line: 4061, column: 43, scope: !6257)
!6263 = !DILocation(line: 4061, column: 41, scope: !6257)
!6264 = !DILocation(line: 4061, column: 30, scope: !6257)
!6265 = !DILocation(line: 4063, column: 8, scope: !6180)
!6266 = !DILocation(line: 4064, column: 8, scope: !6180)
!6267 = !DILocation(line: 4066, column: 7, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4066, column: 6)
!6269 = !DILocation(line: 4066, column: 13, scope: !6268)
!6270 = !DILocation(line: 4066, column: 29, scope: !6268)
!6271 = !DILocation(line: 4066, column: 6, scope: !6180)
!6272 = !DILocalVariable(name: "part", scope: !6273, file: !3, line: 4067, type: !6)
!6273 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 4066, column: 35)
!6274 = !DILocation(line: 4067, column: 15, scope: !6273)
!6275 = !DILocation(line: 4067, column: 32, scope: !6273)
!6276 = !DILocation(line: 4068, column: 25, scope: !6273)
!6277 = !DILocation(line: 4068, column: 36, scope: !6273)
!6278 = !DILocation(line: 4068, column: 11, scope: !6273)
!6279 = !DILocation(line: 4069, column: 10, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 4069, column: 10)
!6281 = !DILocation(line: 4069, column: 10, scope: !6273)
!6282 = !DILocation(line: 4070, column: 11, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6280, file: !3, line: 4069, column: 19)
!6284 = !DILocation(line: 4071, column: 4, scope: !6283)
!6285 = !DILocation(line: 4071, column: 22, scope: !6283)
!6286 = !DILocation(line: 4070, column: 3, scope: !6283)
!6287 = !DILocation(line: 4072, column: 6, scope: !6283)
!6288 = !DILocation(line: 4073, column: 2, scope: !6273)
!6289 = !DILocation(line: 4074, column: 7, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4074, column: 6)
!6291 = !DILocation(line: 4074, column: 13, scope: !6290)
!6292 = !DILocation(line: 4074, column: 28, scope: !6290)
!6293 = !DILocation(line: 4074, column: 6, scope: !6180)
!6294 = !DILocalVariable(name: "len", scope: !6295, file: !3, line: 4075, type: !6)
!6295 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 4074, column: 34)
!6296 = !DILocation(line: 4075, column: 15, scope: !6295)
!6297 = !DILocation(line: 4075, column: 31, scope: !6295)
!6298 = !DILocation(line: 4076, column: 24, scope: !6295)
!6299 = !DILocation(line: 4076, column: 35, scope: !6295)
!6300 = !DILocation(line: 4076, column: 10, scope: !6295)
!6301 = !DILocation(line: 4077, column: 10, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6295, file: !3, line: 4077, column: 10)
!6303 = !DILocation(line: 4077, column: 10, scope: !6295)
!6304 = !DILocation(line: 4078, column: 11, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 4077, column: 19)
!6306 = !DILocation(line: 4079, column: 4, scope: !6305)
!6307 = !DILocation(line: 4079, column: 22, scope: !6305)
!6308 = !DILocation(line: 4078, column: 3, scope: !6305)
!6309 = !DILocation(line: 4080, column: 6, scope: !6305)
!6310 = !DILocation(line: 4081, column: 6, scope: !6295)
!6311 = !DILocation(line: 4081, column: 16, scope: !6295)
!6312 = !DILocation(line: 4081, column: 26, scope: !6295)
!6313 = distinct !{!6313, !6310, !6312}
!6314 = !DILocation(line: 4082, column: 2, scope: !6295)
!6315 = !DILocation(line: 4085, column: 7, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4085, column: 6)
!6317 = !DILocation(line: 4085, column: 13, scope: !6316)
!6318 = !DILocation(line: 4085, column: 26, scope: !6316)
!6319 = !DILocation(line: 4085, column: 6, scope: !6180)
!6320 = !DILocation(line: 4086, column: 10, scope: !6321)
!6321 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 4086, column: 10)
!6322 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 4085, column: 32)
!6323 = !DILocation(line: 4086, column: 18, scope: !6321)
!6324 = !DILocation(line: 4086, column: 22, scope: !6321)
!6325 = !DILocation(line: 4086, column: 32, scope: !6321)
!6326 = !DILocation(line: 4086, column: 36, scope: !6321)
!6327 = !DILocation(line: 4086, column: 42, scope: !6321)
!6328 = !DILocation(line: 4086, column: 45, scope: !6321)
!6329 = !DILocation(line: 4086, column: 53, scope: !6321)
!6330 = !DILocation(line: 4086, column: 10, scope: !6322)
!6331 = !DILocalVariable(name: "c", scope: !6332, file: !3, line: 4088, type: !20)
!6332 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 4086, column: 58)
!6333 = !DILocation(line: 4088, column: 8, scope: !6332)
!6334 = !DILocation(line: 4089, column: 3, scope: !6332)
!6335 = !DILocation(line: 4089, column: 9, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 4089, column: 6)
!6337 = !DILocation(line: 4089, column: 8, scope: !6336)
!6338 = !DILocation(line: 4089, column: 20, scope: !6336)
!6339 = !DILocation(line: 4089, column: 29, scope: !6332)
!6340 = !DILocation(line: 4089, column: 31, scope: !6332)
!6341 = distinct !{!6341, !6334, !6342}
!6342 = !DILocation(line: 4089, column: 35, scope: !6332)
!6343 = !DILocation(line: 4090, column: 6, scope: !6332)
!6344 = !DILocalVariable(name: "p", scope: !6345, file: !3, line: 4092, type: !19)
!6345 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 4090, column: 13)
!6346 = !DILocation(line: 4092, column: 23, scope: !6345)
!6347 = !DILocation(line: 4092, column: 27, scope: !6345)
!6348 = !DILocalVariable(name: "base", scope: !6345, file: !3, line: 4093, type: !19)
!6349 = !DILocation(line: 4093, column: 23, scope: !6345)
!6350 = !DILocation(line: 4093, column: 30, scope: !6345)
!6351 = !DILocalVariable(name: "base2", scope: !6345, file: !3, line: 4094, type: !19)
!6352 = !DILocation(line: 4094, column: 9, scope: !6345)
!6353 = !DILocation(line: 4095, column: 3, scope: !6345)
!6354 = !DILocation(line: 4096, column: 18, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 4095, column: 12)
!6356 = distinct !DILexicalBlock(scope: !6357, file: !3, line: 4095, column: 3)
!6357 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 4095, column: 3)
!6358 = !DILocation(line: 4096, column: 12, scope: !6355)
!6359 = !DILocation(line: 4096, column: 8, scope: !6355)
!6360 = !DILocation(line: 4096, column: 10, scope: !6355)
!6361 = !DILocation(line: 4097, column: 13, scope: !6362)
!6362 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 4097, column: 11)
!6363 = !DILocation(line: 4097, column: 11, scope: !6362)
!6364 = !DILocation(line: 4097, column: 16, scope: !6362)
!6365 = !DILocation(line: 4097, column: 11, scope: !6355)
!6366 = !DILocation(line: 4097, column: 25, scope: !6362)
!6367 = !DILocation(line: 4098, column: 11, scope: !6368)
!6368 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 4098, column: 11)
!6369 = !DILocation(line: 4098, column: 13, scope: !6368)
!6370 = !DILocation(line: 4098, column: 11, scope: !6355)
!6371 = !DILocation(line: 4099, column: 4, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 4098, column: 39)
!6373 = !DILocation(line: 4100, column: 7, scope: !6372)
!6374 = !DILocation(line: 4095, column: 3, scope: !6356)
!6375 = distinct !{!6375, !6376, !6377}
!6376 = !DILocation(line: 4095, column: 3, scope: !6357)
!6377 = !DILocation(line: 4101, column: 3, scope: !6357)
!6378 = !DILocation(line: 4102, column: 22, scope: !6345)
!6379 = !DILocation(line: 4102, column: 11, scope: !6345)
!6380 = !DILocation(line: 4102, column: 9, scope: !6345)
!6381 = !DILocation(line: 4103, column: 10, scope: !6345)
!6382 = !DILocation(line: 4103, column: 16, scope: !6345)
!6383 = !DILocation(line: 4103, column: 3, scope: !6345)
!6384 = !DILocation(line: 4105, column: 22, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 4105, column: 21)
!6386 = !DILocation(line: 4105, column: 21, scope: !6345)
!6387 = !DILocation(line: 4107, column: 10, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6389, file: !3, line: 4107, column: 10)
!6389 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 4105, column: 28)
!6390 = !DILocation(line: 4107, column: 10, scope: !6389)
!6391 = !DILocation(line: 4107, column: 20, scope: !6388)
!6392 = !DILocation(line: 4107, column: 16, scope: !6388)
!6393 = !DILocation(line: 4108, column: 17, scope: !6389)
!6394 = !DILocation(line: 4110, column: 2, scope: !6322)
!6395 = !DILocation(line: 4113, column: 7, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4113, column: 6)
!6397 = !DILocation(line: 4113, column: 13, scope: !6396)
!6398 = !DILocation(line: 4113, column: 24, scope: !6396)
!6399 = !DILocation(line: 4113, column: 6, scope: !6180)
!6400 = !DILocation(line: 4114, column: 6, scope: !6401)
!6401 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 4113, column: 30)
!6402 = !DILocation(line: 4114, column: 13, scope: !6401)
!6403 = !DILocation(line: 4114, column: 24, scope: !6401)
!6404 = distinct !{!6404, !6400, !6405}
!6405 = !DILocation(line: 4114, column: 41, scope: !6401)
!6406 = !DILocation(line: 4115, column: 2, scope: !6401)
!6407 = !DILocation(line: 4116, column: 6, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 4116, column: 6)
!6409 = !DILocation(line: 4116, column: 14, scope: !6408)
!6410 = !DILocation(line: 4116, column: 6, scope: !6180)
!6411 = !DILocation(line: 4117, column: 21, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 4116, column: 20)
!6413 = !DILocation(line: 4117, column: 27, scope: !6412)
!6414 = !DILocation(line: 4117, column: 19, scope: !6412)
!6415 = !DILocation(line: 4118, column: 2, scope: !6412)
!6416 = !DILocation(line: 4120, column: 5, scope: !6180)
!6417 = !DILocation(line: 4120, column: 23, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6171, file: !3, line: 4120, column: 16)
!6419 = !DILocation(line: 4120, column: 16, scope: !6418)
!6420 = !DILocation(line: 4120, column: 46, scope: !6418)
!6421 = !DILocation(line: 4120, column: 51, scope: !6418)
!6422 = !DILocation(line: 4120, column: 54, scope: !6418)
!6423 = !DILocation(line: 4120, column: 60, scope: !6418)
!6424 = !DILocation(line: 4121, column: 6, scope: !6418)
!6425 = !DILocation(line: 4121, column: 9, scope: !6418)
!6426 = !DILocation(line: 4121, column: 46, scope: !6418)
!6427 = !DILocation(line: 4120, column: 16, scope: !6171)
!6428 = !DILocation(line: 4125, column: 15, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 4121, column: 52)
!6430 = !DILocation(line: 4126, column: 7, scope: !6429)
!6431 = !DILocation(line: 4127, column: 20, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6429, file: !3, line: 4127, column: 6)
!6433 = !DILocation(line: 4127, column: 6, scope: !6432)
!6434 = !DILocation(line: 4127, column: 24, scope: !6432)
!6435 = !DILocation(line: 4127, column: 6, scope: !6429)
!6436 = !DILocation(line: 4127, column: 31, scope: !6432)
!6437 = !DILocation(line: 4129, column: 14, scope: !6429)
!6438 = !DILocation(line: 4131, column: 5, scope: !6429)
!6439 = !DILocation(line: 4131, column: 23, scope: !6440)
!6440 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 4131, column: 16)
!6441 = !DILocation(line: 4131, column: 16, scope: !6440)
!6442 = !DILocation(line: 4131, column: 45, scope: !6440)
!6443 = !DILocation(line: 4131, column: 16, scope: !6418)
!6444 = !DILocation(line: 4132, column: 7, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6440, file: !3, line: 4131, column: 51)
!6446 = !DILocation(line: 4133, column: 9, scope: !6445)
!6447 = !DILocation(line: 4135, column: 5, scope: !6445)
!6448 = !DILocation(line: 4135, column: 23, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6440, file: !3, line: 4135, column: 16)
!6450 = !DILocation(line: 4135, column: 16, scope: !6449)
!6451 = !DILocation(line: 4135, column: 44, scope: !6449)
!6452 = !DILocation(line: 4135, column: 16, scope: !6440)
!6453 = !DILocation(line: 4136, column: 7, scope: !6454)
!6454 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 4135, column: 50)
!6455 = !DILocation(line: 4137, column: 9, scope: !6454)
!6456 = !DILocation(line: 4138, column: 14, scope: !6454)
!6457 = !DILocation(line: 4140, column: 5, scope: !6454)
!6458 = !DILocation(line: 4140, column: 23, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 4140, column: 16)
!6460 = !DILocation(line: 4140, column: 16, scope: !6459)
!6461 = !DILocation(line: 4140, column: 44, scope: !6459)
!6462 = !DILocation(line: 4140, column: 16, scope: !6449)
!6463 = !DILocation(line: 4141, column: 7, scope: !6464)
!6464 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 4140, column: 50)
!6465 = !DILocation(line: 4142, column: 9, scope: !6464)
!6466 = !DILocation(line: 4143, column: 14, scope: !6464)
!6467 = !DILocation(line: 4145, column: 5, scope: !6464)
!6468 = !DILocation(line: 4145, column: 16, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 4145, column: 16)
!6470 = !DILocation(line: 4145, column: 22, scope: !6469)
!6471 = !DILocation(line: 4145, column: 25, scope: !6469)
!6472 = !DILocation(line: 4145, column: 35, scope: !6469)
!6473 = !DILocation(line: 4145, column: 39, scope: !6469)
!6474 = !DILocation(line: 4145, column: 16, scope: !6459)
!6475 = !DILocation(line: 4146, column: 9, scope: !6476)
!6476 = distinct !DILexicalBlock(scope: !6469, file: !3, line: 4145, column: 45)
!6477 = !DILocation(line: 4147, column: 7, scope: !6476)
!6478 = !DILocation(line: 4148, column: 15, scope: !6476)
!6479 = !DILocation(line: 4149, column: 14, scope: !6476)
!6480 = !DILocation(line: 4150, column: 5, scope: !6476)
!6481 = !DILocation(line: 4151, column: 9, scope: !6482)
!6482 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 4151, column: 9)
!6483 = !DILocation(line: 4151, column: 16, scope: !6482)
!6484 = !DILocation(line: 4151, column: 9, scope: !6126)
!6485 = !DILocation(line: 4151, column: 29, scope: !6482)
!6486 = !DILocation(line: 4151, column: 22, scope: !6482)
!6487 = !DILocation(line: 4153, column: 9, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 4153, column: 9)
!6489 = !DILocation(line: 4153, column: 17, scope: !6488)
!6490 = !DILocation(line: 4153, column: 9, scope: !6126)
!6491 = !DILocation(line: 4154, column: 10, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !6488, file: !3, line: 4153, column: 23)
!6493 = !DILocation(line: 4154, column: 52, scope: !6492)
!6494 = !DILocation(line: 4154, column: 2, scope: !6492)
!6495 = !DILocation(line: 4155, column: 12, scope: !6492)
!6496 = !DILocation(line: 4156, column: 2, scope: !6492)
!6497 = !DILocation(line: 4158, column: 6, scope: !6498)
!6498 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 4158, column: 6)
!6499 = distinct !DILexicalBlock(scope: !6488, file: !3, line: 4157, column: 12)
!6500 = !DILocation(line: 4158, column: 15, scope: !6498)
!6501 = !DILocation(line: 4158, column: 6, scope: !6499)
!6502 = !DILocalVariable(name: "inbyte", scope: !6503, file: !3, line: 4160, type: !12)
!6503 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 4159, column: 4)
!6504 = !DILocation(line: 4160, column: 10, scope: !6503)
!6505 = !DILocation(line: 4161, column: 20, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6503, file: !3, line: 4161, column: 6)
!6507 = !DILocation(line: 4161, column: 18, scope: !6506)
!6508 = !DILocation(line: 4161, column: 11, scope: !6506)
!6509 = !DILocation(line: 4161, column: 30, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 4161, column: 6)
!6511 = !DILocation(line: 4161, column: 37, scope: !6510)
!6512 = !DILocation(line: 4161, column: 6, scope: !6506)
!6513 = !DILocation(line: 4162, column: 8, scope: !6510)
!6514 = !DILocation(line: 4161, column: 53, scope: !6510)
!6515 = !DILocation(line: 4161, column: 51, scope: !6510)
!6516 = !DILocation(line: 4161, column: 6, scope: !6510)
!6517 = distinct !{!6517, !6512, !6518}
!6518 = !DILocation(line: 4162, column: 8, scope: !6506)
!6519 = !DILocation(line: 4163, column: 10, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6503, file: !3, line: 4163, column: 10)
!6521 = !DILocation(line: 4163, column: 17, scope: !6520)
!6522 = !DILocation(line: 4163, column: 10, scope: !6503)
!6523 = !DILocation(line: 4165, column: 7, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 4165, column: 7)
!6525 = distinct !DILexicalBlock(scope: !6520, file: !3, line: 4164, column: 8)
!6526 = !DILocation(line: 4165, column: 7, scope: !6525)
!6527 = !DILocation(line: 4166, column: 5, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 4166, column: 5)
!6529 = distinct !DILexicalBlock(scope: !6524, file: !3, line: 4166, column: 5)
!6530 = !DILocation(line: 4166, column: 5, scope: !6529)
!6531 = !DILocation(line: 4166, column: 5, scope: !6532)
!6532 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 4166, column: 5)
!6533 = !DILocation(line: 4168, column: 3, scope: !6525)
!6534 = !DILocation(line: 4170, column: 4, scope: !6503)
!6535 = !DILocation(line: 4172, column: 2, scope: !6536)
!6536 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 4172, column: 2)
!6537 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 4172, column: 2)
!6538 = !DILocation(line: 4172, column: 2, scope: !6537)
!6539 = !DILocation(line: 4172, column: 2, scope: !6540)
!6540 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 4172, column: 2)
!6541 = !DILocation(line: 4174, column: 2, scope: !6499)
!6542 = !DILocation(line: 4176, column: 1, scope: !6126)
!6543 = distinct !DISubprogram(name: "input_eof", scope: !3, file: !3, line: 3414, type: !2583, scopeLine: 3415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6544 = !DILocation(line: 3416, column: 8, scope: !6545)
!6545 = distinct !DILexicalBlock(scope: !6543, file: !3, line: 3416, column: 7)
!6546 = !DILocation(line: 3416, column: 19, scope: !6545)
!6547 = !DILocation(line: 3416, column: 22, scope: !6545)
!6548 = !DILocation(line: 3416, column: 7, scope: !6543)
!6549 = !DILocation(line: 3417, column: 5, scope: !6545)
!6550 = !DILocation(line: 3419, column: 7, scope: !6551)
!6551 = distinct !DILexicalBlock(scope: !6543, file: !3, line: 3419, column: 7)
!6552 = !DILocation(line: 3419, column: 16, scope: !6551)
!6553 = !DILocation(line: 3419, column: 13, scope: !6551)
!6554 = !DILocation(line: 3419, column: 7, scope: !6543)
!6555 = !DILocation(line: 3421, column: 11, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 3421, column: 11)
!6557 = distinct !DILexicalBlock(scope: !6551, file: !3, line: 3420, column: 5)
!6558 = !DILocation(line: 3421, column: 18, scope: !6556)
!6559 = !DILocation(line: 3421, column: 30, scope: !6556)
!6560 = !DILocation(line: 3421, column: 33, scope: !6556)
!6561 = !DILocation(line: 3421, column: 48, scope: !6556)
!6562 = !DILocation(line: 3421, column: 11, scope: !6557)
!6563 = !DILocation(line: 3422, column: 2, scope: !6556)
!6564 = !DILocation(line: 3425, column: 13, scope: !6557)
!6565 = !DILocation(line: 3426, column: 5, scope: !6557)
!6566 = !DILocation(line: 3428, column: 3, scope: !6543)
!6567 = !DILocation(line: 3429, column: 1, scope: !6543)
!6568 = distinct !DISubprogram(name: "fill_inbuf", scope: !3, file: !3, line: 7983, type: !6127, scopeLine: 7985, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6569 = !DILocalVariable(name: "eof_ok", arg: 1, scope: !6568, file: !3, line: 7984, type: !12)
!6570 = !DILocation(line: 7984, column: 9, scope: !6568)
!6571 = !DILocalVariable(name: "len", scope: !6568, file: !3, line: 7986, type: !12)
!6572 = !DILocation(line: 7986, column: 9, scope: !6568)
!6573 = !DILocation(line: 7989, column: 12, scope: !6568)
!6574 = !DILocation(line: 7990, column: 5, scope: !6568)
!6575 = !DILocation(line: 7991, column: 13, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 7990, column: 8)
!6577 = !DILocation(line: 7991, column: 31, scope: !6576)
!6578 = !DILocation(line: 7991, column: 30, scope: !6576)
!6579 = !DILocation(line: 7991, column: 48, scope: !6576)
!6580 = !DILocation(line: 7991, column: 47, scope: !6576)
!6581 = !DILocation(line: 7991, column: 39, scope: !6576)
!6582 = !DILocation(line: 7991, column: 8, scope: !6576)
!6583 = !DILocation(line: 7991, column: 6, scope: !6576)
!6584 = !DILocation(line: 7992, column: 6, scope: !6585)
!6585 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 7992, column: 6)
!6586 = !DILocation(line: 7992, column: 10, scope: !6585)
!6587 = !DILocation(line: 7992, column: 6, scope: !6576)
!6588 = !DILocation(line: 7992, column: 16, scope: !6585)
!6589 = !DILocation(line: 7993, column: 6, scope: !6590)
!6590 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 7993, column: 6)
!6591 = !DILocation(line: 7993, column: 10, scope: !6590)
!6592 = !DILocation(line: 7993, column: 6, scope: !6576)
!6593 = !DILocation(line: 7994, column: 4, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6590, file: !3, line: 7993, column: 17)
!6595 = !DILocation(line: 7995, column: 4, scope: !6594)
!6596 = !DILocation(line: 7997, column: 12, scope: !6576)
!6597 = !DILocation(line: 7997, column: 9, scope: !6576)
!6598 = !DILocation(line: 7998, column: 5, scope: !6576)
!6599 = !DILocation(line: 7998, column: 14, scope: !6568)
!6600 = !DILocation(line: 7998, column: 21, scope: !6568)
!6601 = distinct !{!6601, !6574, !6602}
!6602 = !DILocation(line: 7998, column: 31, scope: !6568)
!6603 = !DILocation(line: 8000, column: 9, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 8000, column: 9)
!6605 = !DILocation(line: 8000, column: 16, scope: !6604)
!6606 = !DILocation(line: 8000, column: 9, scope: !6568)
!6607 = !DILocation(line: 8001, column: 6, scope: !6608)
!6608 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 8001, column: 6)
!6609 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 8000, column: 22)
!6610 = !DILocation(line: 8001, column: 6, scope: !6609)
!6611 = !DILocation(line: 8001, column: 14, scope: !6608)
!6612 = !DILocation(line: 8002, column: 2, scope: !6609)
!6613 = !DILocation(line: 8003, column: 2, scope: !6609)
!6614 = !DILocation(line: 8003, column: 8, scope: !6609)
!6615 = !DILocation(line: 8004, column: 2, scope: !6609)
!6616 = !DILocation(line: 8005, column: 5, scope: !6609)
!6617 = !DILocation(line: 8006, column: 24, scope: !6568)
!6618 = !DILocation(line: 8006, column: 17, scope: !6568)
!6619 = !DILocation(line: 8006, column: 14, scope: !6568)
!6620 = !DILocation(line: 8007, column: 11, scope: !6568)
!6621 = !DILocation(line: 8008, column: 12, scope: !6568)
!6622 = !DILocation(line: 8008, column: 5, scope: !6568)
!6623 = !DILocation(line: 8009, column: 1, scope: !6568)
!6624 = distinct !DISubprogram(name: "flush_window", scope: !3, file: !3, line: 8028, type: !693, scopeLine: 8029, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6625 = !DILocation(line: 8030, column: 9, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 8030, column: 9)
!6627 = !DILocation(line: 8030, column: 16, scope: !6626)
!6628 = !DILocation(line: 8030, column: 9, scope: !6624)
!6629 = !DILocation(line: 8030, column: 22, scope: !6626)
!6630 = !DILocation(line: 8031, column: 20, scope: !6624)
!6631 = !DILocation(line: 8031, column: 5, scope: !6624)
!6632 = !DILocation(line: 8033, column: 10, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 8033, column: 9)
!6634 = !DILocation(line: 8033, column: 9, scope: !6624)
!6635 = !DILocation(line: 8034, column: 12, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6633, file: !3, line: 8033, column: 16)
!6637 = !DILocation(line: 8034, column: 33, scope: !6636)
!6638 = !DILocation(line: 8034, column: 2, scope: !6636)
!6639 = !DILocation(line: 8035, column: 5, scope: !6636)
!6640 = !DILocation(line: 8036, column: 25, scope: !6624)
!6641 = !DILocation(line: 8036, column: 18, scope: !6624)
!6642 = !DILocation(line: 8036, column: 15, scope: !6624)
!6643 = !DILocation(line: 8037, column: 12, scope: !6624)
!6644 = !DILocation(line: 8038, column: 1, scope: !6624)
!6645 = distinct !DISubprogram(name: "unzip", scope: !3, file: !3, line: 7804, type: !200, scopeLine: 7806, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6646 = !DILocalVariable(name: "in", arg: 1, scope: !6645, file: !3, line: 7805, type: !12)
!6647 = !DILocation(line: 7805, column: 9, scope: !6645)
!6648 = !DILocalVariable(name: "out", arg: 2, scope: !6645, file: !3, line: 7805, type: !12)
!6649 = !DILocation(line: 7805, column: 13, scope: !6645)
!6650 = !DILocalVariable(name: "orig_crc", scope: !6645, file: !3, line: 7807, type: !51)
!6651 = !DILocation(line: 7807, column: 9, scope: !6645)
!6652 = !DILocalVariable(name: "orig_len", scope: !6645, file: !3, line: 7808, type: !51)
!6653 = !DILocation(line: 7808, column: 9, scope: !6645)
!6654 = !DILocalVariable(name: "n", scope: !6645, file: !3, line: 7809, type: !12)
!6655 = !DILocation(line: 7809, column: 9, scope: !6645)
!6656 = !DILocalVariable(name: "buf", scope: !6645, file: !3, line: 7810, type: !291)
!6657 = !DILocation(line: 7810, column: 9, scope: !6645)
!6658 = !DILocalVariable(name: "err", scope: !6645, file: !3, line: 7811, type: !12)
!6659 = !DILocation(line: 7811, column: 9, scope: !6645)
!6660 = !DILocation(line: 7813, column: 11, scope: !6645)
!6661 = !DILocation(line: 7813, column: 9, scope: !6645)
!6662 = !DILocation(line: 7814, column: 11, scope: !6645)
!6663 = !DILocation(line: 7814, column: 9, scope: !6645)
!6664 = !DILocation(line: 7816, column: 5, scope: !6645)
!6665 = !DILocation(line: 7818, column: 9, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7818, column: 9)
!6667 = !DILocation(line: 7818, column: 15, scope: !6666)
!6668 = !DILocation(line: 7818, column: 19, scope: !6666)
!6669 = !DILocation(line: 7818, column: 9, scope: !6645)
!6670 = !DILocation(line: 7819, column: 13, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 7818, column: 31)
!6672 = !DILocation(line: 7819, column: 11, scope: !6671)
!6673 = !DILocation(line: 7820, column: 13, scope: !6671)
!6674 = !DILocation(line: 7820, column: 11, scope: !6671)
!6675 = !DILocation(line: 7821, column: 5, scope: !6671)
!6676 = !DILocation(line: 7824, column: 9, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7824, column: 9)
!6678 = !DILocation(line: 7824, column: 16, scope: !6677)
!6679 = !DILocation(line: 7824, column: 9, scope: !6645)
!6680 = !DILocalVariable(name: "res", scope: !6681, file: !3, line: 7826, type: !12)
!6681 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 7824, column: 30)
!6682 = !DILocation(line: 7826, column: 6, scope: !6681)
!6683 = !DILocation(line: 7826, column: 12, scope: !6681)
!6684 = !DILocation(line: 7828, column: 6, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 7828, column: 6)
!6686 = !DILocation(line: 7828, column: 10, scope: !6685)
!6687 = !DILocation(line: 7828, column: 6, scope: !6681)
!6688 = !DILocation(line: 7829, column: 6, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 7828, column: 16)
!6690 = !DILocation(line: 7830, column: 2, scope: !6689)
!6691 = !DILocation(line: 7830, column: 13, scope: !6692)
!6692 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 7830, column: 13)
!6693 = !DILocation(line: 7830, column: 17, scope: !6692)
!6694 = !DILocation(line: 7830, column: 13, scope: !6685)
!6695 = !DILocation(line: 7831, column: 6, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 7830, column: 23)
!6697 = !DILocation(line: 7832, column: 2, scope: !6696)
!6698 = !DILocation(line: 7834, column: 5, scope: !6681)
!6699 = !DILocation(line: 7834, column: 16, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 7834, column: 16)
!6701 = !DILocation(line: 7834, column: 22, scope: !6700)
!6702 = !DILocation(line: 7834, column: 25, scope: !6700)
!6703 = !DILocation(line: 7834, column: 32, scope: !6700)
!6704 = !DILocation(line: 7834, column: 16, scope: !6677)
!6705 = !DILocalVariable(name: "n", scope: !6706, file: !3, line: 7836, type: !51)
!6706 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 7834, column: 43)
!6707 = !DILocation(line: 7836, column: 15, scope: !6706)
!6708 = !DILocation(line: 7836, column: 19, scope: !6706)
!6709 = !DILocation(line: 7838, column: 6, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6706, file: !3, line: 7838, column: 6)
!6711 = !DILocation(line: 7838, column: 11, scope: !6710)
!6712 = !DILocation(line: 7838, column: 33, scope: !6710)
!6713 = !DILocation(line: 7838, column: 32, scope: !6710)
!6714 = !DILocation(line: 7838, column: 30, scope: !6710)
!6715 = !DILocation(line: 7838, column: 8, scope: !6710)
!6716 = !DILocation(line: 7838, column: 6, scope: !6706)
!6717 = !DILocation(line: 7840, column: 14, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 7838, column: 63)
!6719 = !DILocation(line: 7840, column: 44, scope: !6718)
!6720 = !DILocation(line: 7840, column: 47, scope: !6718)
!6721 = !DILocation(line: 7840, column: 6, scope: !6718)
!6722 = !DILocation(line: 7841, column: 6, scope: !6718)
!6723 = !DILocation(line: 7842, column: 2, scope: !6718)
!6724 = !DILocation(line: 7843, column: 2, scope: !6706)
!6725 = !DILocation(line: 7843, column: 10, scope: !6706)
!6726 = !DILocalVariable(name: "c", scope: !6727, file: !3, line: 7844, type: !13)
!6727 = distinct !DILexicalBlock(scope: !6706, file: !3, line: 7843, column: 14)
!6728 = !DILocation(line: 7844, column: 10, scope: !6727)
!6729 = !DILocation(line: 7844, column: 19, scope: !6727)
!6730 = !DILocation(line: 7844, column: 14, scope: !6727)
!6731 = !DILocation(line: 7845, column: 6, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 7845, column: 6)
!6733 = !DILocation(line: 7845, column: 6, scope: !6734)
!6734 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 7845, column: 6)
!6735 = distinct !{!6735, !6724, !6736}
!6736 = !DILocation(line: 7846, column: 2, scope: !6706)
!6737 = !DILocation(line: 7847, column: 2, scope: !6706)
!6738 = !DILocation(line: 7848, column: 5, scope: !6706)
!6739 = !DILocation(line: 7849, column: 2, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 7848, column: 12)
!6741 = !DILocation(line: 7853, column: 10, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7853, column: 9)
!6743 = !DILocation(line: 7853, column: 9, scope: !6645)
!6744 = !DILocation(line: 7857, column: 9, scope: !6745)
!6745 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 7857, column: 2)
!6746 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 7853, column: 17)
!6747 = !DILocation(line: 7857, column: 7, scope: !6745)
!6748 = !DILocation(line: 7857, column: 14, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 7857, column: 2)
!6750 = !DILocation(line: 7857, column: 16, scope: !6749)
!6751 = !DILocation(line: 7857, column: 2, scope: !6745)
!6752 = !DILocation(line: 7858, column: 20, scope: !6753)
!6753 = distinct !DILexicalBlock(scope: !6749, file: !3, line: 7857, column: 26)
!6754 = !DILocation(line: 7858, column: 15, scope: !6753)
!6755 = !DILocation(line: 7858, column: 10, scope: !6753)
!6756 = !DILocation(line: 7858, column: 6, scope: !6753)
!6757 = !DILocation(line: 7858, column: 13, scope: !6753)
!6758 = !DILocation(line: 7859, column: 2, scope: !6753)
!6759 = !DILocation(line: 7857, column: 22, scope: !6749)
!6760 = !DILocation(line: 7857, column: 2, scope: !6749)
!6761 = distinct !{!6761, !6751, !6762}
!6762 = !DILocation(line: 7859, column: 2, scope: !6745)
!6763 = !DILocation(line: 7860, column: 13, scope: !6746)
!6764 = !DILocation(line: 7860, column: 11, scope: !6746)
!6765 = !DILocation(line: 7861, column: 13, scope: !6746)
!6766 = !DILocation(line: 7861, column: 11, scope: !6746)
!6767 = !DILocation(line: 7863, column: 5, scope: !6746)
!6768 = !DILocation(line: 7863, column: 16, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 7863, column: 16)
!6770 = !DILocation(line: 7863, column: 16, scope: !6742)
!6771 = !DILocation(line: 7869, column: 9, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 7869, column: 2)
!6773 = distinct !DILexicalBlock(scope: !6769, file: !3, line: 7863, column: 28)
!6774 = !DILocation(line: 7869, column: 7, scope: !6772)
!6775 = !DILocation(line: 7869, column: 14, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6772, file: !3, line: 7869, column: 2)
!6777 = !DILocation(line: 7869, column: 16, scope: !6776)
!6778 = !DILocation(line: 7869, column: 2, scope: !6772)
!6779 = !DILocation(line: 7870, column: 20, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6776, file: !3, line: 7869, column: 31)
!6781 = !DILocation(line: 7870, column: 15, scope: !6780)
!6782 = !DILocation(line: 7870, column: 10, scope: !6780)
!6783 = !DILocation(line: 7870, column: 6, scope: !6780)
!6784 = !DILocation(line: 7870, column: 13, scope: !6780)
!6785 = !DILocation(line: 7871, column: 2, scope: !6780)
!6786 = !DILocation(line: 7869, column: 27, scope: !6776)
!6787 = !DILocation(line: 7869, column: 2, scope: !6776)
!6788 = distinct !{!6788, !6778, !6789}
!6789 = !DILocation(line: 7871, column: 2, scope: !6772)
!6790 = !DILocation(line: 7872, column: 13, scope: !6773)
!6791 = !DILocation(line: 7872, column: 11, scope: !6773)
!6792 = !DILocation(line: 7873, column: 13, scope: !6773)
!6793 = !DILocation(line: 7873, column: 11, scope: !6773)
!6794 = !DILocation(line: 7874, column: 5, scope: !6773)
!6795 = !DILocation(line: 7877, column: 9, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7877, column: 9)
!6797 = !DILocation(line: 7877, column: 21, scope: !6796)
!6798 = !DILocation(line: 7877, column: 18, scope: !6796)
!6799 = !DILocation(line: 7877, column: 9, scope: !6645)
!6800 = !DILocation(line: 7878, column: 10, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6796, file: !3, line: 7877, column: 40)
!6802 = !DILocation(line: 7879, column: 3, scope: !6801)
!6803 = !DILocation(line: 7878, column: 2, scope: !6801)
!6804 = !DILocation(line: 7880, column: 6, scope: !6801)
!6805 = !DILocation(line: 7881, column: 5, scope: !6801)
!6806 = !DILocation(line: 7882, column: 9, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7882, column: 9)
!6808 = !DILocation(line: 7882, column: 27, scope: !6807)
!6809 = !DILocation(line: 7882, column: 37, scope: !6807)
!6810 = !DILocation(line: 7882, column: 18, scope: !6807)
!6811 = !DILocation(line: 7882, column: 9, scope: !6645)
!6812 = !DILocation(line: 7883, column: 10, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6807, file: !3, line: 7882, column: 52)
!6814 = !DILocation(line: 7884, column: 3, scope: !6813)
!6815 = !DILocation(line: 7883, column: 2, scope: !6813)
!6816 = !DILocation(line: 7885, column: 6, scope: !6813)
!6817 = !DILocation(line: 7886, column: 5, scope: !6813)
!6818 = !DILocation(line: 7889, column: 9, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7889, column: 9)
!6820 = !DILocation(line: 7889, column: 15, scope: !6819)
!6821 = !DILocation(line: 7889, column: 18, scope: !6819)
!6822 = !DILocation(line: 7889, column: 24, scope: !6819)
!6823 = !DILocation(line: 7889, column: 30, scope: !6819)
!6824 = !DILocation(line: 7889, column: 28, scope: !6819)
!6825 = !DILocation(line: 7889, column: 37, scope: !6819)
!6826 = !DILocation(line: 7889, column: 40, scope: !6819)
!6827 = !DILocation(line: 7889, column: 56, scope: !6819)
!6828 = !DILocation(line: 7889, column: 9, scope: !6645)
!6829 = !DILocation(line: 7890, column: 6, scope: !6830)
!6830 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 7890, column: 6)
!6831 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 7889, column: 67)
!6832 = !DILocation(line: 7890, column: 6, scope: !6831)
!6833 = !DILocation(line: 7891, column: 6, scope: !6834)
!6834 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 7891, column: 6)
!6835 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 7891, column: 6)
!6836 = distinct !DILexicalBlock(scope: !6830, file: !3, line: 7890, column: 17)
!6837 = !DILocation(line: 7891, column: 6, scope: !6835)
!6838 = !DILocation(line: 7891, column: 6, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 7891, column: 6)
!6840 = !DILocation(line: 7894, column: 2, scope: !6836)
!6841 = !DILocation(line: 7896, column: 14, scope: !6842)
!6842 = distinct !DILexicalBlock(scope: !6830, file: !3, line: 7894, column: 9)
!6843 = !DILocation(line: 7898, column: 7, scope: !6842)
!6844 = !DILocation(line: 7896, column: 6, scope: !6842)
!6845 = !DILocation(line: 7899, column: 10, scope: !6842)
!6846 = !DILocation(line: 7901, column: 5, scope: !6831)
!6847 = !DILocation(line: 7902, column: 24, scope: !6645)
!6848 = !DILocation(line: 7902, column: 16, scope: !6645)
!6849 = !DILocation(line: 7903, column: 9, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7903, column: 9)
!6851 = !DILocation(line: 7903, column: 13, scope: !6850)
!6852 = !DILocation(line: 7903, column: 9, scope: !6645)
!6853 = !DILocation(line: 7903, column: 20, scope: !6850)
!6854 = !DILocation(line: 7904, column: 15, scope: !6645)
!6855 = !DILocation(line: 7905, column: 10, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 7905, column: 9)
!6857 = !DILocation(line: 7905, column: 9, scope: !6645)
!6858 = !DILocation(line: 7905, column: 16, scope: !6856)
!6859 = !DILocation(line: 7906, column: 12, scope: !6645)
!6860 = !DILocation(line: 7906, column: 5, scope: !6645)
!6861 = !DILocation(line: 7907, column: 1, scope: !6645)
!6862 = distinct !DISubprogram(name: "check_zipfile", scope: !3, file: !3, line: 7756, type: !6127, scopeLine: 7758, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6863 = !DILocalVariable(name: "in", arg: 1, scope: !6862, file: !3, line: 7757, type: !12)
!6864 = !DILocation(line: 7757, column: 9, scope: !6862)
!6865 = !DILocalVariable(name: "h", scope: !6862, file: !3, line: 7759, type: !85)
!6866 = !DILocation(line: 7759, column: 10, scope: !6862)
!6867 = !DILocation(line: 7759, column: 22, scope: !6862)
!6868 = !DILocation(line: 7759, column: 20, scope: !6862)
!6869 = !DILocation(line: 7761, column: 11, scope: !6862)
!6870 = !DILocation(line: 7761, column: 9, scope: !6862)
!6871 = !DILocation(line: 7764, column: 23, scope: !6862)
!6872 = !DILocation(line: 7764, column: 21, scope: !6862)
!6873 = !DILocation(line: 7764, column: 40, scope: !6862)
!6874 = !DILocation(line: 7764, column: 38, scope: !6862)
!6875 = !DILocation(line: 7764, column: 11, scope: !6862)
!6876 = !DILocation(line: 7766, column: 9, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6862, file: !3, line: 7766, column: 9)
!6878 = !DILocation(line: 7766, column: 17, scope: !6877)
!6879 = !DILocation(line: 7766, column: 15, scope: !6877)
!6880 = !DILocation(line: 7766, column: 24, scope: !6877)
!6881 = !DILocation(line: 7766, column: 27, scope: !6877)
!6882 = !DILocation(line: 7766, column: 33, scope: !6877)
!6883 = !DILocation(line: 7766, column: 9, scope: !6862)
!6884 = !DILocation(line: 7767, column: 10, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6877, file: !3, line: 7766, column: 44)
!6886 = !DILocation(line: 7768, column: 3, scope: !6885)
!6887 = !DILocation(line: 7767, column: 2, scope: !6885)
!6888 = !DILocation(line: 7769, column: 12, scope: !6885)
!6889 = !DILocation(line: 7770, column: 2, scope: !6885)
!6890 = !DILocation(line: 7772, column: 14, scope: !6862)
!6891 = !DILocation(line: 7772, column: 12, scope: !6862)
!6892 = !DILocation(line: 7773, column: 9, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6862, file: !3, line: 7773, column: 9)
!6894 = !DILocation(line: 7773, column: 16, scope: !6893)
!6895 = !DILocation(line: 7773, column: 26, scope: !6893)
!6896 = !DILocation(line: 7773, column: 29, scope: !6893)
!6897 = !DILocation(line: 7773, column: 36, scope: !6893)
!6898 = !DILocation(line: 7773, column: 9, scope: !6862)
!6899 = !DILocation(line: 7774, column: 10, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6893, file: !3, line: 7773, column: 49)
!6901 = !DILocation(line: 7776, column: 3, scope: !6900)
!6902 = !DILocation(line: 7774, column: 2, scope: !6900)
!6903 = !DILocation(line: 7777, column: 12, scope: !6900)
!6904 = !DILocation(line: 7778, column: 2, scope: !6900)
!6905 = !DILocation(line: 7782, column: 20, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6862, file: !3, line: 7782, column: 9)
!6907 = !DILocation(line: 7782, column: 30, scope: !6906)
!6908 = !DILocation(line: 7782, column: 18, scope: !6906)
!6909 = !DILocation(line: 7782, column: 40, scope: !6906)
!6910 = !DILocation(line: 7782, column: 9, scope: !6862)
!6911 = !DILocation(line: 7783, column: 10, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6906, file: !3, line: 7782, column: 46)
!6913 = !DILocation(line: 7784, column: 3, scope: !6912)
!6914 = !DILocation(line: 7783, column: 2, scope: !6912)
!6915 = !DILocation(line: 7785, column: 12, scope: !6912)
!6916 = !DILocation(line: 7786, column: 2, scope: !6912)
!6917 = !DILocation(line: 7790, column: 19, scope: !6862)
!6918 = !DILocation(line: 7790, column: 29, scope: !6862)
!6919 = !DILocation(line: 7790, column: 39, scope: !6862)
!6920 = !DILocation(line: 7790, column: 16, scope: !6862)
!6921 = !DILocation(line: 7791, column: 11, scope: !6862)
!6922 = !DILocation(line: 7794, column: 5, scope: !6862)
!6923 = !DILocation(line: 7795, column: 1, scope: !6862)
!6924 = distinct !DISubprogram(name: "unpack", scope: !3, file: !3, line: 7655, type: !200, scopeLine: 7657, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!6925 = !DILocalVariable(name: "in", arg: 1, scope: !6924, file: !3, line: 7656, type: !12)
!6926 = !DILocation(line: 7656, column: 9, scope: !6924)
!6927 = !DILocalVariable(name: "out", arg: 2, scope: !6924, file: !3, line: 7656, type: !12)
!6928 = !DILocation(line: 7656, column: 13, scope: !6924)
!6929 = !DILocalVariable(name: "len", scope: !6924, file: !3, line: 7658, type: !12)
!6930 = !DILocation(line: 7658, column: 9, scope: !6924)
!6931 = !DILocalVariable(name: "eob", scope: !6924, file: !3, line: 7659, type: !6)
!6932 = !DILocation(line: 7659, column: 14, scope: !6924)
!6933 = !DILocalVariable(name: "peek", scope: !6924, file: !3, line: 7660, type: !6)
!6934 = !DILocation(line: 7660, column: 23, scope: !6924)
!6935 = !DILocalVariable(name: "peek_mask", scope: !6924, file: !3, line: 7661, type: !6)
!6936 = !DILocation(line: 7661, column: 14, scope: !6924)
!6937 = !DILocation(line: 7663, column: 11, scope: !6924)
!6938 = !DILocation(line: 7663, column: 9, scope: !6924)
!6939 = !DILocation(line: 7664, column: 11, scope: !6924)
!6940 = !DILocation(line: 7664, column: 9, scope: !6924)
!6941 = !DILocation(line: 7666, column: 5, scope: !6924)
!6942 = !DILocation(line: 7667, column: 5, scope: !6924)
!6943 = !DILocation(line: 7668, column: 5, scope: !6924)
!6944 = !DILocation(line: 7669, column: 21, scope: !6924)
!6945 = !DILocation(line: 7669, column: 19, scope: !6924)
!6946 = !DILocation(line: 7669, column: 31, scope: !6924)
!6947 = !DILocation(line: 7669, column: 15, scope: !6924)
!6948 = !DILocation(line: 7672, column: 18, scope: !6924)
!6949 = !DILocation(line: 7672, column: 11, scope: !6924)
!6950 = !DILocation(line: 7672, column: 26, scope: !6924)
!6951 = !DILocation(line: 7672, column: 9, scope: !6924)
!6952 = !DILocation(line: 7676, column: 5, scope: !6924)
!6953 = !DILocation(line: 7681, column: 2, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 7681, column: 2)
!6955 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 7676, column: 14)
!6956 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 7676, column: 5)
!6957 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 7676, column: 5)
!6958 = distinct !{!6958, !6953, !6953}
!6959 = !DILocation(line: 7682, column: 19, scope: !6955)
!6960 = !DILocation(line: 7682, column: 8, scope: !6955)
!6961 = !DILocation(line: 7682, column: 6, scope: !6955)
!6962 = !DILocation(line: 7683, column: 6, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 7683, column: 6)
!6964 = !DILocation(line: 7683, column: 10, scope: !6963)
!6965 = !DILocation(line: 7683, column: 6, scope: !6955)
!6966 = !DILocation(line: 7684, column: 15, scope: !6967)
!6967 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 7683, column: 15)
!6968 = !DILocation(line: 7684, column: 27, scope: !6967)
!6969 = !DILocation(line: 7684, column: 25, scope: !6967)
!6970 = !DILocation(line: 7684, column: 11, scope: !6967)
!6971 = !DILocation(line: 7685, column: 2, scope: !6967)
!6972 = !DILocalVariable(name: "mask", scope: !6973, file: !3, line: 7687, type: !51)
!6973 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 7685, column: 9)
!6974 = !DILocation(line: 7687, column: 10, scope: !6973)
!6975 = !DILocation(line: 7687, column: 17, scope: !6973)
!6976 = !DILocation(line: 7688, column: 12, scope: !6973)
!6977 = !DILocation(line: 7688, column: 10, scope: !6973)
!6978 = !DILocation(line: 7689, column: 6, scope: !6973)
!6979 = !DILocation(line: 7690, column: 20, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 7689, column: 9)
!6981 = !DILocation(line: 7690, column: 32, scope: !6980)
!6982 = !DILocation(line: 7690, column: 36, scope: !6980)
!6983 = !DILocation(line: 7690, column: 40, scope: !6980)
!6984 = !DILocation(line: 7690, column: 29, scope: !6980)
!6985 = !DILocation(line: 7691, column: 3, scope: !6986)
!6986 = distinct !DILexicalBlock(scope: !6980, file: !3, line: 7691, column: 3)
!6987 = distinct !{!6987, !6985, !6985}
!6988 = !DILocation(line: 7692, column: 6, scope: !6980)
!6989 = !DILocation(line: 7692, column: 15, scope: !6973)
!6990 = !DILocation(line: 7692, column: 40, scope: !6973)
!6991 = !DILocation(line: 7692, column: 32, scope: !6973)
!6992 = !DILocation(line: 7692, column: 20, scope: !6973)
!6993 = distinct !{!6993, !6978, !6994}
!6994 = !DILocation(line: 7692, column: 44, scope: !6973)
!6995 = !DILocation(line: 7696, column: 6, scope: !6996)
!6996 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 7696, column: 6)
!6997 = !DILocation(line: 7696, column: 14, scope: !6996)
!6998 = !DILocation(line: 7696, column: 11, scope: !6996)
!6999 = !DILocation(line: 7696, column: 18, scope: !6996)
!7000 = !DILocation(line: 7696, column: 21, scope: !6996)
!7001 = !DILocation(line: 7696, column: 28, scope: !6996)
!7002 = !DILocation(line: 7696, column: 25, scope: !6996)
!7003 = !DILocation(line: 7696, column: 6, scope: !6955)
!7004 = !DILocation(line: 7696, column: 37, scope: !6996)
!7005 = !DILocation(line: 7697, column: 2, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 7697, column: 2)
!7007 = !DILocation(line: 7697, column: 2, scope: !7008)
!7008 = distinct !DILexicalBlock(scope: !7006, file: !3, line: 7697, column: 2)
!7009 = !DILocation(line: 7700, column: 2, scope: !6955)
!7010 = !DILocation(line: 7676, column: 5, scope: !6956)
!7011 = distinct !{!7011, !7012, !7013}
!7012 = !DILocation(line: 7676, column: 5, scope: !6957)
!7013 = !DILocation(line: 7701, column: 5, scope: !6957)
!7014 = !DILocation(line: 7703, column: 5, scope: !6924)
!7015 = !DILocation(line: 7704, column: 9, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 7704, column: 9)
!7017 = !DILocation(line: 7704, column: 27, scope: !7016)
!7018 = !DILocation(line: 7704, column: 37, scope: !7016)
!7019 = !DILocation(line: 7704, column: 18, scope: !7016)
!7020 = !DILocation(line: 7704, column: 9, scope: !6924)
!7021 = !DILocation(line: 7705, column: 2, scope: !7022)
!7022 = distinct !DILexicalBlock(scope: !7016, file: !3, line: 7704, column: 52)
!7023 = !DILocation(line: 7706, column: 5, scope: !7022)
!7024 = !DILocation(line: 7707, column: 5, scope: !6924)
!7025 = distinct !DISubprogram(name: "unlzw", scope: !3, file: !3, line: 7289, type: !200, scopeLine: 7291, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7026 = !DILocalVariable(name: "in", arg: 1, scope: !7025, file: !3, line: 7290, type: !12)
!7027 = !DILocation(line: 7290, column: 9, scope: !7025)
!7028 = !DILocalVariable(name: "out", arg: 2, scope: !7025, file: !3, line: 7290, type: !12)
!7029 = !DILocation(line: 7290, column: 13, scope: !7025)
!7030 = !DILocalVariable(name: "stackp", scope: !7025, file: !3, line: 7292, type: !83)
!7031 = !DILocation(line: 7292, column: 24, scope: !7025)
!7032 = !DILocalVariable(name: "code", scope: !7025, file: !3, line: 7293, type: !275)
!7033 = !DILocation(line: 7293, column: 23, scope: !7025)
!7034 = !DILocalVariable(name: "finchar", scope: !7025, file: !3, line: 7294, type: !12)
!7035 = !DILocation(line: 7294, column: 23, scope: !7025)
!7036 = !DILocalVariable(name: "oldcode", scope: !7025, file: !3, line: 7295, type: !275)
!7037 = !DILocation(line: 7295, column: 23, scope: !7025)
!7038 = !DILocalVariable(name: "incode", scope: !7025, file: !3, line: 7296, type: !275)
!7039 = !DILocation(line: 7296, column: 23, scope: !7025)
!7040 = !DILocalVariable(name: "inbits", scope: !7025, file: !3, line: 7297, type: !22)
!7041 = !DILocation(line: 7297, column: 23, scope: !7025)
!7042 = !DILocalVariable(name: "posbits", scope: !7025, file: !3, line: 7298, type: !22)
!7043 = !DILocation(line: 7298, column: 23, scope: !7025)
!7044 = !DILocalVariable(name: "outpos", scope: !7025, file: !3, line: 7299, type: !12)
!7045 = !DILocation(line: 7299, column: 23, scope: !7025)
!7046 = !DILocalVariable(name: "bitmask", scope: !7025, file: !3, line: 7301, type: !6)
!7047 = !DILocation(line: 7301, column: 23, scope: !7025)
!7048 = !DILocalVariable(name: "free_ent", scope: !7025, file: !3, line: 7302, type: !275)
!7049 = !DILocation(line: 7302, column: 23, scope: !7025)
!7050 = !DILocalVariable(name: "maxcode", scope: !7025, file: !3, line: 7303, type: !275)
!7051 = !DILocation(line: 7303, column: 23, scope: !7025)
!7052 = !DILocalVariable(name: "maxmaxcode", scope: !7025, file: !3, line: 7304, type: !275)
!7053 = !DILocation(line: 7304, column: 23, scope: !7025)
!7054 = !DILocalVariable(name: "n_bits", scope: !7025, file: !3, line: 7305, type: !12)
!7055 = !DILocation(line: 7305, column: 23, scope: !7025)
!7056 = !DILocalVariable(name: "rsize", scope: !7025, file: !3, line: 7306, type: !12)
!7057 = !DILocation(line: 7306, column: 23, scope: !7025)
!7058 = !DILocation(line: 7312, column: 15, scope: !7025)
!7059 = !DILocation(line: 7312, column: 13, scope: !7025)
!7060 = !DILocation(line: 7313, column: 18, scope: !7025)
!7061 = !DILocation(line: 7313, column: 26, scope: !7025)
!7062 = !DILocation(line: 7313, column: 16, scope: !7025)
!7063 = !DILocation(line: 7314, column: 10, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 7314, column: 9)
!7065 = !DILocation(line: 7314, column: 18, scope: !7064)
!7066 = !DILocation(line: 7314, column: 34, scope: !7064)
!7067 = !DILocation(line: 7314, column: 9, scope: !7025)
!7068 = !DILocation(line: 7315, column: 2, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7070, file: !3, line: 7315, column: 2)
!7070 = distinct !DILexicalBlock(scope: !7071, file: !3, line: 7315, column: 2)
!7071 = distinct !DILexicalBlock(scope: !7064, file: !3, line: 7314, column: 40)
!7072 = !DILocation(line: 7315, column: 2, scope: !7070)
!7073 = !DILocation(line: 7315, column: 2, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7070, file: !3, line: 7315, column: 2)
!7075 = !DILocation(line: 7317, column: 5, scope: !7071)
!7076 = !DILocation(line: 7318, column: 13, scope: !7025)
!7077 = !DILocation(line: 7319, column: 18, scope: !7025)
!7078 = !DILocation(line: 7319, column: 16, scope: !7025)
!7079 = !DILocation(line: 7321, column: 9, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 7321, column: 9)
!7081 = !DILocation(line: 7321, column: 17, scope: !7080)
!7082 = !DILocation(line: 7321, column: 9, scope: !7025)
!7083 = !DILocation(line: 7322, column: 10, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 7321, column: 25)
!7085 = !DILocation(line: 7324, column: 3, scope: !7084)
!7086 = !DILocation(line: 7324, column: 21, scope: !7084)
!7087 = !DILocation(line: 7322, column: 2, scope: !7084)
!7088 = !DILocation(line: 7325, column: 12, scope: !7084)
!7089 = !DILocation(line: 7326, column: 2, scope: !7084)
!7090 = !DILocation(line: 7328, column: 13, scope: !7025)
!7091 = !DILocation(line: 7328, column: 11, scope: !7025)
!7092 = !DILocation(line: 7329, column: 15, scope: !7025)
!7093 = !DILocation(line: 7329, column: 13, scope: !7025)
!7094 = !DILocation(line: 7330, column: 19, scope: !7025)
!7095 = !DILocation(line: 7330, column: 17, scope: !7025)
!7096 = !DILocation(line: 7330, column: 26, scope: !7025)
!7097 = !DILocation(line: 7330, column: 13, scope: !7025)
!7098 = !DILocation(line: 7331, column: 13, scope: !7025)
!7099 = !DILocation(line: 7332, column: 13, scope: !7025)
!7100 = !DILocation(line: 7333, column: 12, scope: !7025)
!7101 = !DILocation(line: 7334, column: 15, scope: !7025)
!7102 = !DILocation(line: 7334, column: 20, scope: !7025)
!7103 = !DILocation(line: 7334, column: 13, scope: !7025)
!7104 = !DILocation(line: 7336, column: 18, scope: !7025)
!7105 = !DILocation(line: 7336, column: 17, scope: !7025)
!7106 = !DILocation(line: 7336, column: 16, scope: !7025)
!7107 = !DILocation(line: 7336, column: 14, scope: !7025)
!7108 = !DILocation(line: 7338, column: 5, scope: !7025)
!7109 = !DILocation(line: 7340, column: 15, scope: !7110)
!7110 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 7340, column: 5)
!7111 = !DILocation(line: 7340, column: 10, scope: !7110)
!7112 = !DILocation(line: 7340, column: 23, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 7340, column: 5)
!7114 = !DILocation(line: 7340, column: 28, scope: !7113)
!7115 = !DILocation(line: 7340, column: 5, scope: !7110)
!7116 = !DILocation(line: 7341, column: 34, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 7340, column: 43)
!7118 = !DILocation(line: 7341, column: 23, scope: !7117)
!7119 = !DILocation(line: 7341, column: 2, scope: !7117)
!7120 = !DILocation(line: 7341, column: 21, scope: !7117)
!7121 = !DILocation(line: 7342, column: 5, scope: !7117)
!7122 = !DILocation(line: 7340, column: 35, scope: !7113)
!7123 = !DILocation(line: 7340, column: 5, scope: !7113)
!7124 = distinct !{!7124, !7115, !7125}
!7125 = !DILocation(line: 7342, column: 5, scope: !7110)
!7126 = !DILocation(line: 7343, column: 5, scope: !7025)
!7127 = !DILocalVariable(name: "i", scope: !7128, file: !3, line: 7344, type: !12)
!7128 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 7343, column: 8)
!7129 = !DILocation(line: 7344, column: 11, scope: !7128)
!7130 = !DILocalVariable(name: "e", scope: !7128, file: !3, line: 7345, type: !12)
!7131 = !DILocation(line: 7345, column: 7, scope: !7128)
!7132 = !DILocalVariable(name: "o", scope: !7128, file: !3, line: 7346, type: !12)
!7133 = !DILocation(line: 7346, column: 7, scope: !7128)
!7134 = !DILocation(line: 7346, column: 2, scope: !7128)
!7135 = !DILabel(scope: !7128, name: "resetbuf", file: !3, line: 7348)
!7136 = !DILocation(line: 7348, column: 5, scope: !7128)
!7137 = !DILocation(line: 7349, column: 6, scope: !7128)
!7138 = !DILocation(line: 7349, column: 19, scope: !7128)
!7139 = !DILocation(line: 7349, column: 26, scope: !7128)
!7140 = !DILocation(line: 7349, column: 18, scope: !7128)
!7141 = !DILocation(line: 7349, column: 16, scope: !7128)
!7142 = !DILocation(line: 7349, column: 12, scope: !7128)
!7143 = !DILocation(line: 7349, column: 4, scope: !7128)
!7144 = !DILocation(line: 7351, column: 9, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7128, file: !3, line: 7351, column: 2)
!7146 = !DILocation(line: 7351, column: 7, scope: !7145)
!7147 = !DILocation(line: 7351, column: 15, scope: !7148)
!7148 = distinct !DILexicalBlock(scope: !7145, file: !3, line: 7351, column: 2)
!7149 = !DILocation(line: 7351, column: 19, scope: !7148)
!7150 = !DILocation(line: 7351, column: 17, scope: !7148)
!7151 = !DILocation(line: 7351, column: 2, scope: !7145)
!7152 = !DILocation(line: 7352, column: 23, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7148, file: !3, line: 7351, column: 28)
!7154 = !DILocation(line: 7352, column: 25, scope: !7153)
!7155 = !DILocation(line: 7352, column: 24, scope: !7153)
!7156 = !DILocation(line: 7352, column: 17, scope: !7153)
!7157 = !DILocation(line: 7352, column: 12, scope: !7153)
!7158 = !DILocation(line: 7352, column: 6, scope: !7153)
!7159 = !DILocation(line: 7352, column: 15, scope: !7153)
!7160 = !DILocation(line: 7353, column: 2, scope: !7153)
!7161 = !DILocation(line: 7351, column: 23, scope: !7148)
!7162 = !DILocation(line: 7351, column: 2, scope: !7148)
!7163 = distinct !{!7163, !7151, !7164}
!7164 = !DILocation(line: 7353, column: 2, scope: !7145)
!7165 = !DILocation(line: 7354, column: 11, scope: !7128)
!7166 = !DILocation(line: 7354, column: 9, scope: !7128)
!7167 = !DILocation(line: 7355, column: 10, scope: !7128)
!7168 = !DILocation(line: 7357, column: 6, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7128, file: !3, line: 7357, column: 6)
!7170 = !DILocation(line: 7357, column: 13, scope: !7169)
!7171 = !DILocation(line: 7357, column: 6, scope: !7128)
!7172 = !DILocation(line: 7358, column: 24, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7174, file: !3, line: 7358, column: 10)
!7174 = distinct !DILexicalBlock(scope: !7169, file: !3, line: 7357, column: 28)
!7175 = !DILocation(line: 7358, column: 41, scope: !7173)
!7176 = !DILocation(line: 7358, column: 40, scope: !7173)
!7177 = !DILocation(line: 7358, column: 19, scope: !7173)
!7178 = !DILocation(line: 7358, column: 17, scope: !7173)
!7179 = !DILocation(line: 7358, column: 60, scope: !7173)
!7180 = !DILocation(line: 7358, column: 10, scope: !7174)
!7181 = !DILocation(line: 7359, column: 3, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 7358, column: 67)
!7183 = !DILocation(line: 7360, column: 6, scope: !7182)
!7184 = !DILocation(line: 7361, column: 16, scope: !7174)
!7185 = !DILocation(line: 7361, column: 13, scope: !7174)
!7186 = !DILocation(line: 7362, column: 25, scope: !7174)
!7187 = !DILocation(line: 7362, column: 18, scope: !7174)
!7188 = !DILocation(line: 7362, column: 15, scope: !7174)
!7189 = !DILocation(line: 7363, column: 2, scope: !7174)
!7190 = !DILocation(line: 7364, column: 13, scope: !7128)
!7191 = !DILocation(line: 7364, column: 19, scope: !7128)
!7192 = !DILocation(line: 7364, column: 12, scope: !7128)
!7193 = !DILocation(line: 7364, column: 34, scope: !7128)
!7194 = !DILocation(line: 7364, column: 28, scope: !7128)
!7195 = !DILocation(line: 7364, column: 43, scope: !7128)
!7196 = !DILocation(line: 7364, column: 50, scope: !7128)
!7197 = !DILocation(line: 7364, column: 49, scope: !7128)
!7198 = !DILocation(line: 7364, column: 41, scope: !7128)
!7199 = !DILocation(line: 7364, column: 57, scope: !7128)
!7200 = !DILocation(line: 7365, column: 12, scope: !7128)
!7201 = !DILocation(line: 7365, column: 6, scope: !7128)
!7202 = !DILocation(line: 7365, column: 18, scope: !7128)
!7203 = !DILocation(line: 7365, column: 24, scope: !7128)
!7204 = !DILocation(line: 7365, column: 30, scope: !7128)
!7205 = !DILocation(line: 7365, column: 23, scope: !7128)
!7206 = !DILocation(line: 7365, column: 22, scope: !7128)
!7207 = !DILocation(line: 7364, column: 9, scope: !7128)
!7208 = !DILocation(line: 7367, column: 2, scope: !7128)
!7209 = !DILocation(line: 7367, column: 9, scope: !7128)
!7210 = !DILocation(line: 7367, column: 18, scope: !7128)
!7211 = !DILocation(line: 7367, column: 16, scope: !7128)
!7212 = !DILocation(line: 7368, column: 10, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7368, column: 10)
!7214 = distinct !DILexicalBlock(scope: !7128, file: !3, line: 7367, column: 27)
!7215 = !DILocation(line: 7368, column: 21, scope: !7213)
!7216 = !DILocation(line: 7368, column: 19, scope: !7213)
!7217 = !DILocation(line: 7368, column: 10, scope: !7214)
!7218 = !DILocation(line: 7369, column: 15, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 7368, column: 30)
!7220 = !DILocation(line: 7369, column: 22, scope: !7219)
!7221 = !DILocation(line: 7370, column: 9, scope: !7219)
!7222 = !DILocation(line: 7370, column: 15, scope: !7219)
!7223 = !DILocation(line: 7370, column: 8, scope: !7219)
!7224 = !DILocation(line: 7370, column: 21, scope: !7219)
!7225 = !DILocation(line: 7370, column: 28, scope: !7219)
!7226 = !DILocation(line: 7370, column: 32, scope: !7219)
!7227 = !DILocation(line: 7370, column: 38, scope: !7219)
!7228 = !DILocation(line: 7370, column: 31, scope: !7219)
!7229 = !DILocation(line: 7370, column: 30, scope: !7219)
!7230 = !DILocation(line: 7370, column: 45, scope: !7219)
!7231 = !DILocation(line: 7370, column: 51, scope: !7219)
!7232 = !DILocation(line: 7370, column: 44, scope: !7219)
!7233 = !DILocation(line: 7370, column: 43, scope: !7219)
!7234 = !DILocation(line: 7370, column: 19, scope: !7219)
!7235 = !DILocation(line: 7369, column: 26, scope: !7219)
!7236 = !DILocation(line: 7369, column: 11, scope: !7219)
!7237 = !DILocation(line: 7371, column: 3, scope: !7219)
!7238 = !DILocation(line: 7372, column: 7, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 7372, column: 7)
!7240 = !DILocation(line: 7372, column: 17, scope: !7239)
!7241 = !DILocation(line: 7372, column: 14, scope: !7239)
!7242 = !DILocation(line: 7372, column: 7, scope: !7219)
!7243 = !DILocation(line: 7373, column: 17, scope: !7244)
!7244 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 7372, column: 26)
!7245 = !DILocation(line: 7373, column: 15, scope: !7244)
!7246 = !DILocation(line: 7374, column: 3, scope: !7244)
!7247 = !DILocation(line: 7375, column: 17, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 7374, column: 10)
!7249 = !DILocation(line: 7375, column: 32, scope: !7248)
!7250 = !DILocation(line: 7375, column: 15, scope: !7248)
!7251 = !DILocation(line: 7377, column: 17, scope: !7219)
!7252 = !DILocation(line: 7377, column: 15, scope: !7219)
!7253 = !DILocation(line: 7377, column: 24, scope: !7219)
!7254 = !DILocation(line: 7377, column: 11, scope: !7219)
!7255 = !DILocation(line: 7378, column: 3, scope: !7219)
!7256 = !DILocalVariable(name: "p", scope: !7257, file: !3, line: 7380, type: !83)
!7257 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7380, column: 6)
!7258 = !DILocation(line: 7380, column: 6, scope: !7257)
!7259 = !DILocation(line: 7383, column: 10, scope: !7260)
!7260 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7383, column: 10)
!7261 = !DILocation(line: 7383, column: 18, scope: !7260)
!7262 = !DILocation(line: 7383, column: 10, scope: !7214)
!7263 = !DILocation(line: 7384, column: 7, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7265, file: !3, line: 7384, column: 7)
!7265 = distinct !DILexicalBlock(scope: !7260, file: !3, line: 7383, column: 25)
!7266 = !DILocation(line: 7384, column: 12, scope: !7264)
!7267 = !DILocation(line: 7384, column: 7, scope: !7265)
!7268 = !DILocation(line: 7384, column: 20, scope: !7264)
!7269 = !DILocation(line: 7385, column: 58, scope: !7265)
!7270 = !DILocation(line: 7385, column: 57, scope: !7265)
!7271 = !DILocation(line: 7385, column: 44, scope: !7265)
!7272 = !DILocation(line: 7385, column: 42, scope: !7265)
!7273 = !DILocation(line: 7385, column: 22, scope: !7265)
!7274 = !DILocation(line: 7385, column: 16, scope: !7265)
!7275 = !DILocation(line: 7385, column: 3, scope: !7265)
!7276 = !DILocation(line: 7385, column: 20, scope: !7265)
!7277 = !DILocation(line: 7386, column: 3, scope: !7265)
!7278 = distinct !{!7278, !7208, !7279}
!7279 = !DILocation(line: 7466, column: 2, scope: !7128)
!7280 = !DILocation(line: 7388, column: 10, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7388, column: 10)
!7282 = !DILocation(line: 7388, column: 15, scope: !7281)
!7283 = !DILocation(line: 7388, column: 24, scope: !7281)
!7284 = !DILocation(line: 7388, column: 27, scope: !7281)
!7285 = !DILocation(line: 7388, column: 10, scope: !7214)
!7286 = !DILocation(line: 7389, column: 3, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7281, file: !3, line: 7388, column: 39)
!7288 = !DILocation(line: 7390, column: 12, scope: !7287)
!7289 = !DILocation(line: 7391, column: 15, scope: !7287)
!7290 = !DILocation(line: 7391, column: 22, scope: !7287)
!7291 = !DILocation(line: 7392, column: 9, scope: !7287)
!7292 = !DILocation(line: 7392, column: 15, scope: !7287)
!7293 = !DILocation(line: 7392, column: 8, scope: !7287)
!7294 = !DILocation(line: 7392, column: 21, scope: !7287)
!7295 = !DILocation(line: 7392, column: 28, scope: !7287)
!7296 = !DILocation(line: 7392, column: 32, scope: !7287)
!7297 = !DILocation(line: 7392, column: 38, scope: !7287)
!7298 = !DILocation(line: 7392, column: 31, scope: !7287)
!7299 = !DILocation(line: 7392, column: 30, scope: !7287)
!7300 = !DILocation(line: 7392, column: 45, scope: !7287)
!7301 = !DILocation(line: 7392, column: 51, scope: !7287)
!7302 = !DILocation(line: 7392, column: 44, scope: !7287)
!7303 = !DILocation(line: 7392, column: 43, scope: !7287)
!7304 = !DILocation(line: 7392, column: 19, scope: !7287)
!7305 = !DILocation(line: 7391, column: 26, scope: !7287)
!7306 = !DILocation(line: 7391, column: 11, scope: !7287)
!7307 = !DILocation(line: 7393, column: 13, scope: !7287)
!7308 = !DILocation(line: 7393, column: 11, scope: !7287)
!7309 = !DILocation(line: 7394, column: 17, scope: !7287)
!7310 = !DILocation(line: 7394, column: 15, scope: !7287)
!7311 = !DILocation(line: 7394, column: 24, scope: !7287)
!7312 = !DILocation(line: 7394, column: 11, scope: !7287)
!7313 = !DILocation(line: 7395, column: 3, scope: !7287)
!7314 = !DILocation(line: 7397, column: 15, scope: !7214)
!7315 = !DILocation(line: 7397, column: 13, scope: !7214)
!7316 = !DILocation(line: 7398, column: 13, scope: !7214)
!7317 = !DILocation(line: 7400, column: 10, scope: !7318)
!7318 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7400, column: 10)
!7319 = !DILocation(line: 7400, column: 18, scope: !7318)
!7320 = !DILocation(line: 7400, column: 15, scope: !7318)
!7321 = !DILocation(line: 7400, column: 10, scope: !7214)
!7322 = !DILocation(line: 7401, column: 7, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7324, file: !3, line: 7401, column: 7)
!7324 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 7400, column: 28)
!7325 = !DILocation(line: 7401, column: 14, scope: !7323)
!7326 = !DILocation(line: 7401, column: 12, scope: !7323)
!7327 = !DILocation(line: 7401, column: 7, scope: !7324)
!7328 = !DILocation(line: 7414, column: 12, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 7414, column: 11)
!7330 = distinct !DILexicalBlock(scope: !7323, file: !3, line: 7401, column: 24)
!7331 = !DILocation(line: 7414, column: 17, scope: !7329)
!7332 = !DILocation(line: 7414, column: 20, scope: !7329)
!7333 = !DILocation(line: 7414, column: 27, scope: !7329)
!7334 = !DILocation(line: 7414, column: 11, scope: !7330)
!7335 = !DILocation(line: 7415, column: 14, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7329, file: !3, line: 7414, column: 32)
!7337 = !DILocation(line: 7415, column: 34, scope: !7336)
!7338 = !DILocation(line: 7415, column: 4, scope: !7336)
!7339 = !DILocation(line: 7416, column: 24, scope: !7336)
!7340 = !DILocation(line: 7416, column: 17, scope: !7336)
!7341 = !DILocation(line: 7416, column: 14, scope: !7336)
!7342 = !DILocation(line: 7417, column: 7, scope: !7336)
!7343 = !DILocation(line: 7418, column: 13, scope: !7330)
!7344 = !DILocation(line: 7418, column: 7, scope: !7330)
!7345 = !DILocation(line: 7420, column: 3, scope: !7330)
!7346 = !DILocation(line: 7421, column: 26, scope: !7324)
!7347 = !DILocation(line: 7421, column: 15, scope: !7324)
!7348 = !DILocation(line: 7421, column: 4, scope: !7324)
!7349 = !DILocation(line: 7421, column: 13, scope: !7324)
!7350 = !DILocation(line: 7422, column: 10, scope: !7324)
!7351 = !DILocation(line: 7422, column: 8, scope: !7324)
!7352 = !DILocation(line: 7423, column: 6, scope: !7324)
!7353 = !DILocation(line: 7425, column: 6, scope: !7214)
!7354 = !DILocation(line: 7425, column: 27, scope: !7214)
!7355 = !DILocation(line: 7425, column: 32, scope: !7214)
!7356 = !DILocation(line: 7427, column: 15, scope: !7357)
!7357 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7425, column: 54)
!7358 = !DILocation(line: 7427, column: 4, scope: !7357)
!7359 = !DILocation(line: 7427, column: 13, scope: !7357)
!7360 = !DILocation(line: 7428, column: 10, scope: !7357)
!7361 = !DILocation(line: 7428, column: 8, scope: !7357)
!7362 = distinct !{!7362, !7353, !7363}
!7363 = !DILocation(line: 7429, column: 6, scope: !7214)
!7364 = !DILocation(line: 7430, column: 40, scope: !7214)
!7365 = !DILocation(line: 7430, column: 38, scope: !7214)
!7366 = !DILocation(line: 7430, column: 18, scope: !7214)
!7367 = !DILocation(line: 7430, column: 7, scope: !7214)
!7368 = !DILocation(line: 7430, column: 16, scope: !7214)
!7369 = !DILocalVariable(name: "i", scope: !7370, file: !3, line: 7434, type: !12)
!7370 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7433, column: 6)
!7371 = !DILocation(line: 7434, column: 12, scope: !7370)
!7372 = !DILocation(line: 7436, column: 7, scope: !7373)
!7373 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 7436, column: 7)
!7374 = !DILocation(line: 7436, column: 29, scope: !7373)
!7375 = !DILocation(line: 7436, column: 28, scope: !7373)
!7376 = !DILocation(line: 7436, column: 19, scope: !7373)
!7377 = !DILocation(line: 7436, column: 17, scope: !7373)
!7378 = !DILocation(line: 7436, column: 13, scope: !7373)
!7379 = !DILocation(line: 7436, column: 38, scope: !7373)
!7380 = !DILocation(line: 7436, column: 7, scope: !7370)
!7381 = !DILocation(line: 7437, column: 7, scope: !7382)
!7382 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 7436, column: 52)
!7383 = !DILocation(line: 7438, column: 8, scope: !7384)
!7384 = distinct !DILexicalBlock(scope: !7385, file: !3, line: 7438, column: 8)
!7385 = distinct !DILexicalBlock(scope: !7382, file: !3, line: 7437, column: 10)
!7386 = !DILocation(line: 7438, column: 22, scope: !7384)
!7387 = !DILocation(line: 7438, column: 21, scope: !7384)
!7388 = !DILocation(line: 7438, column: 10, scope: !7384)
!7389 = !DILocation(line: 7438, column: 8, scope: !7385)
!7390 = !DILocation(line: 7438, column: 44, scope: !7384)
!7391 = !DILocation(line: 7438, column: 43, scope: !7384)
!7392 = !DILocation(line: 7438, column: 32, scope: !7384)
!7393 = !DILocation(line: 7438, column: 30, scope: !7384)
!7394 = !DILocation(line: 7440, column: 8, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7385, file: !3, line: 7440, column: 8)
!7396 = !DILocation(line: 7440, column: 10, scope: !7395)
!7397 = !DILocation(line: 7440, column: 8, scope: !7385)
!7398 = !DILocation(line: 7441, column: 22, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7395, file: !3, line: 7440, column: 15)
!7400 = !DILocation(line: 7441, column: 21, scope: !7399)
!7401 = !DILocation(line: 7441, column: 30, scope: !7399)
!7402 = !DILocation(line: 7441, column: 38, scope: !7399)
!7403 = !DILocation(line: 7441, column: 8, scope: !7399)
!7404 = !DILocation(line: 7442, column: 18, scope: !7399)
!7405 = !DILocation(line: 7442, column: 15, scope: !7399)
!7406 = !DILocation(line: 7443, column: 4, scope: !7399)
!7407 = !DILocation(line: 7444, column: 8, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7385, file: !3, line: 7444, column: 8)
!7409 = !DILocation(line: 7444, column: 15, scope: !7408)
!7410 = !DILocation(line: 7444, column: 8, scope: !7385)
!7411 = !DILocation(line: 7445, column: 13, scope: !7412)
!7412 = distinct !DILexicalBlock(scope: !7413, file: !3, line: 7445, column: 12)
!7413 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 7444, column: 29)
!7414 = !DILocation(line: 7445, column: 12, scope: !7413)
!7415 = !DILocation(line: 7446, column: 15, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 7445, column: 19)
!7417 = !DILocation(line: 7446, column: 35, scope: !7416)
!7418 = !DILocation(line: 7446, column: 5, scope: !7416)
!7419 = !DILocation(line: 7447, column: 25, scope: !7416)
!7420 = !DILocation(line: 7447, column: 18, scope: !7416)
!7421 = !DILocation(line: 7447, column: 15, scope: !7416)
!7422 = !DILocation(line: 7448, column: 8, scope: !7416)
!7423 = !DILocation(line: 7449, column: 15, scope: !7413)
!7424 = !DILocation(line: 7450, column: 4, scope: !7413)
!7425 = !DILocation(line: 7451, column: 13, scope: !7385)
!7426 = !DILocation(line: 7451, column: 10, scope: !7385)
!7427 = !DILocation(line: 7452, column: 7, scope: !7385)
!7428 = !DILocation(line: 7452, column: 31, scope: !7382)
!7429 = !DILocation(line: 7452, column: 30, scope: !7382)
!7430 = !DILocation(line: 7452, column: 21, scope: !7382)
!7431 = !DILocation(line: 7452, column: 19, scope: !7382)
!7432 = !DILocation(line: 7452, column: 40, scope: !7382)
!7433 = distinct !{!7433, !7381, !7434}
!7434 = !DILocation(line: 7452, column: 43, scope: !7382)
!7435 = !DILocation(line: 7453, column: 3, scope: !7382)
!7436 = !DILocation(line: 7454, column: 21, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 7453, column: 10)
!7438 = !DILocation(line: 7454, column: 20, scope: !7437)
!7439 = !DILocation(line: 7454, column: 29, scope: !7437)
!7440 = !DILocation(line: 7454, column: 37, scope: !7437)
!7441 = !DILocation(line: 7454, column: 7, scope: !7437)
!7442 = !DILocation(line: 7455, column: 17, scope: !7437)
!7443 = !DILocation(line: 7455, column: 14, scope: !7437)
!7444 = !DILocation(line: 7459, column: 18, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 7459, column: 10)
!7446 = !DILocation(line: 7459, column: 16, scope: !7445)
!7447 = !DILocation(line: 7459, column: 30, scope: !7445)
!7448 = !DILocation(line: 7459, column: 28, scope: !7445)
!7449 = !DILocation(line: 7459, column: 10, scope: !7214)
!7450 = !DILocation(line: 7461, column: 40, scope: !7451)
!7451 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 7459, column: 42)
!7452 = !DILocation(line: 7461, column: 24, scope: !7451)
!7453 = !DILocation(line: 7461, column: 3, scope: !7451)
!7454 = !DILocation(line: 7461, column: 22, scope: !7451)
!7455 = !DILocation(line: 7462, column: 35, scope: !7451)
!7456 = !DILocation(line: 7462, column: 24, scope: !7451)
!7457 = !DILocation(line: 7462, column: 3, scope: !7451)
!7458 = !DILocation(line: 7462, column: 22, scope: !7451)
!7459 = !DILocation(line: 7463, column: 14, scope: !7451)
!7460 = !DILocation(line: 7463, column: 18, scope: !7451)
!7461 = !DILocation(line: 7463, column: 12, scope: !7451)
!7462 = !DILocation(line: 7464, column: 6, scope: !7451)
!7463 = !DILocation(line: 7465, column: 16, scope: !7214)
!7464 = !DILocation(line: 7465, column: 14, scope: !7214)
!7465 = !DILocation(line: 7467, column: 5, scope: !7128)
!7466 = !DILocation(line: 7467, column: 14, scope: !7025)
!7467 = !DILocation(line: 7467, column: 20, scope: !7025)
!7468 = distinct !{!7468, !7126, !7469}
!7469 = !DILocation(line: 7467, column: 24, scope: !7025)
!7470 = !DILocation(line: 7469, column: 10, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 7469, column: 9)
!7472 = !DILocation(line: 7469, column: 15, scope: !7471)
!7473 = !DILocation(line: 7469, column: 18, scope: !7471)
!7474 = !DILocation(line: 7469, column: 25, scope: !7471)
!7475 = !DILocation(line: 7469, column: 9, scope: !7025)
!7476 = !DILocation(line: 7470, column: 12, scope: !7477)
!7477 = distinct !DILexicalBlock(scope: !7471, file: !3, line: 7469, column: 30)
!7478 = !DILocation(line: 7470, column: 32, scope: !7477)
!7479 = !DILocation(line: 7470, column: 2, scope: !7477)
!7480 = !DILocation(line: 7471, column: 22, scope: !7477)
!7481 = !DILocation(line: 7471, column: 15, scope: !7477)
!7482 = !DILocation(line: 7471, column: 12, scope: !7477)
!7483 = !DILocation(line: 7472, column: 5, scope: !7477)
!7484 = !DILocation(line: 7473, column: 5, scope: !7025)
!7485 = !DILocation(line: 7474, column: 1, scope: !7025)
!7486 = distinct !DISubprogram(name: "unlzh", scope: !3, file: !3, line: 7095, type: !200, scopeLine: 7098, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7487 = !DILocalVariable(name: "in", arg: 1, scope: !7486, file: !3, line: 7096, type: !12)
!7488 = !DILocation(line: 7096, column: 9, scope: !7486)
!7489 = !DILocalVariable(name: "out", arg: 2, scope: !7486, file: !3, line: 7097, type: !12)
!7490 = !DILocation(line: 7097, column: 9, scope: !7486)
!7491 = !DILocalVariable(name: "n", scope: !7486, file: !3, line: 7099, type: !6)
!7492 = !DILocation(line: 7099, column: 14, scope: !7486)
!7493 = !DILocation(line: 7100, column: 11, scope: !7486)
!7494 = !DILocation(line: 7100, column: 9, scope: !7486)
!7495 = !DILocation(line: 7101, column: 11, scope: !7486)
!7496 = !DILocation(line: 7101, column: 9, scope: !7486)
!7497 = !DILocation(line: 7103, column: 5, scope: !7486)
!7498 = !DILocation(line: 7104, column: 5, scope: !7486)
!7499 = !DILocation(line: 7104, column: 13, scope: !7486)
!7500 = !DILocation(line: 7104, column: 12, scope: !7486)
!7501 = !DILocation(line: 7105, column: 6, scope: !7502)
!7502 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 7104, column: 19)
!7503 = !DILocation(line: 7105, column: 4, scope: !7502)
!7504 = !DILocation(line: 7106, column: 7, scope: !7505)
!7505 = distinct !DILexicalBlock(scope: !7502, file: !3, line: 7106, column: 6)
!7506 = !DILocation(line: 7106, column: 12, scope: !7505)
!7507 = !DILocation(line: 7106, column: 15, scope: !7505)
!7508 = !DILocation(line: 7106, column: 17, scope: !7505)
!7509 = !DILocation(line: 7106, column: 6, scope: !7502)
!7510 = !DILocation(line: 7107, column: 16, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7505, file: !3, line: 7106, column: 22)
!7512 = !DILocation(line: 7107, column: 36, scope: !7511)
!7513 = !DILocation(line: 7107, column: 6, scope: !7511)
!7514 = !DILocation(line: 7108, column: 2, scope: !7511)
!7515 = distinct !{!7515, !7498, !7516}
!7516 = !DILocation(line: 7109, column: 5, scope: !7486)
!7517 = !DILocation(line: 7110, column: 5, scope: !7486)
!7518 = distinct !DISubprogram(name: "copy", scope: !3, file: !3, line: 7929, type: !200, scopeLine: 7931, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7519 = !DILocalVariable(name: "in", arg: 1, scope: !7518, file: !3, line: 7930, type: !12)
!7520 = !DILocation(line: 7930, column: 9, scope: !7518)
!7521 = !DILocalVariable(name: "out", arg: 2, scope: !7518, file: !3, line: 7930, type: !12)
!7522 = !DILocation(line: 7930, column: 13, scope: !7518)
!7523 = !DILocation(line: 7932, column: 5, scope: !7518)
!7524 = !DILocation(line: 7932, column: 11, scope: !7518)
!7525 = !DILocation(line: 7933, column: 5, scope: !7518)
!7526 = !DILocation(line: 7933, column: 12, scope: !7518)
!7527 = !DILocation(line: 7933, column: 19, scope: !7518)
!7528 = !DILocation(line: 7933, column: 24, scope: !7518)
!7529 = !DILocation(line: 7933, column: 32, scope: !7518)
!7530 = !DILocation(line: 7933, column: 39, scope: !7518)
!7531 = !DILocation(line: 0, scope: !7518)
!7532 = !DILocation(line: 7934, column: 12, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7518, file: !3, line: 7933, column: 46)
!7534 = !DILocation(line: 7934, column: 31, scope: !7533)
!7535 = !DILocation(line: 7934, column: 2, scope: !7533)
!7536 = !DILocation(line: 7935, column: 15, scope: !7533)
!7537 = !DILocation(line: 7935, column: 12, scope: !7533)
!7538 = !DILocation(line: 7936, column: 16, scope: !7533)
!7539 = !DILocation(line: 7936, column: 11, scope: !7533)
!7540 = !DILocation(line: 7936, column: 9, scope: !7533)
!7541 = distinct !{!7541, !7525, !7542}
!7542 = !DILocation(line: 7937, column: 5, scope: !7518)
!7543 = !DILocation(line: 7938, column: 14, scope: !7544)
!7544 = distinct !DILexicalBlock(scope: !7518, file: !3, line: 7938, column: 9)
!7545 = !DILocation(line: 7938, column: 21, scope: !7544)
!7546 = !DILocation(line: 7938, column: 9, scope: !7518)
!7547 = !DILocation(line: 7939, column: 2, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7544, file: !3, line: 7938, column: 28)
!7549 = !DILocation(line: 7940, column: 5, scope: !7548)
!7550 = !DILocation(line: 7941, column: 16, scope: !7518)
!7551 = !DILocation(line: 7941, column: 14, scope: !7518)
!7552 = !DILocation(line: 7942, column: 5, scope: !7518)
!7553 = distinct !DISubprogram(name: "decode_start", scope: !3, file: !3, line: 7040, type: !693, scopeLine: 7041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7554 = !DILocation(line: 7042, column: 5, scope: !7553)
!7555 = !DILocation(line: 7043, column: 7, scope: !7553)
!7556 = !DILocation(line: 7044, column: 10, scope: !7553)
!7557 = !DILocation(line: 7045, column: 1, scope: !7553)
!7558 = !DILocalVariable(name: "count", arg: 1, scope: !766, file: !3, line: 7050, type: !6)
!7559 = !DILocation(line: 7050, column: 14, scope: !766)
!7560 = !DILocalVariable(name: "buffer", arg: 2, scope: !766, file: !3, line: 7051, type: !85)
!7561 = !DILocation(line: 7051, column: 9, scope: !766)
!7562 = !DILocalVariable(name: "r", scope: !766, file: !3, line: 7062, type: !6)
!7563 = !DILocation(line: 7062, column: 14, scope: !766)
!7564 = !DILocalVariable(name: "c", scope: !766, file: !3, line: 7062, type: !6)
!7565 = !DILocation(line: 7062, column: 17, scope: !766)
!7566 = !DILocation(line: 7064, column: 7, scope: !766)
!7567 = !DILocation(line: 7065, column: 5, scope: !766)
!7568 = !DILocation(line: 7065, column: 12, scope: !766)
!7569 = !DILocation(line: 7065, column: 16, scope: !766)
!7570 = !DILocation(line: 7066, column: 14, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !766, file: !3, line: 7065, column: 22)
!7572 = !DILocation(line: 7066, column: 21, scope: !7571)
!7573 = !DILocation(line: 7066, column: 2, scope: !7571)
!7574 = !DILocation(line: 7066, column: 9, scope: !7571)
!7575 = !DILocation(line: 7066, column: 12, scope: !7571)
!7576 = !DILocation(line: 7067, column: 7, scope: !7571)
!7577 = !DILocation(line: 7067, column: 9, scope: !7571)
!7578 = !DILocation(line: 7067, column: 14, scope: !7571)
!7579 = !DILocation(line: 7067, column: 4, scope: !7571)
!7580 = !DILocation(line: 7068, column: 6, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7571, file: !3, line: 7068, column: 6)
!7582 = !DILocation(line: 7068, column: 13, scope: !7581)
!7583 = !DILocation(line: 7068, column: 10, scope: !7581)
!7584 = !DILocation(line: 7068, column: 6, scope: !7571)
!7585 = !DILocation(line: 7068, column: 27, scope: !7581)
!7586 = !DILocation(line: 7068, column: 20, scope: !7581)
!7587 = distinct !{!7587, !7567, !7588}
!7588 = !DILocation(line: 7069, column: 5, scope: !766)
!7589 = !DILocation(line: 7070, column: 5, scope: !766)
!7590 = !DILocation(line: 7071, column: 6, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 7070, column: 17)
!7592 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 7070, column: 5)
!7593 = distinct !DILexicalBlock(scope: !766, file: !3, line: 7070, column: 5)
!7594 = !DILocation(line: 7071, column: 4, scope: !7591)
!7595 = !DILocation(line: 7072, column: 6, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7591, file: !3, line: 7072, column: 6)
!7597 = !DILocation(line: 7072, column: 8, scope: !7596)
!7598 = !DILocation(line: 7072, column: 6, scope: !7591)
!7599 = !DILocation(line: 7073, column: 11, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 7072, column: 15)
!7601 = !DILocation(line: 7074, column: 13, scope: !7600)
!7602 = !DILocation(line: 7074, column: 6, scope: !7600)
!7603 = !DILocation(line: 7076, column: 6, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !7591, file: !3, line: 7076, column: 6)
!7605 = !DILocation(line: 7076, column: 8, scope: !7604)
!7606 = !DILocation(line: 7076, column: 6, scope: !7591)
!7607 = !DILocation(line: 7077, column: 18, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 7076, column: 22)
!7609 = !DILocation(line: 7077, column: 6, scope: !7608)
!7610 = !DILocation(line: 7077, column: 13, scope: !7608)
!7611 = !DILocation(line: 7077, column: 16, scope: !7608)
!7612 = !DILocation(line: 7078, column: 10, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 7078, column: 10)
!7614 = !DILocation(line: 7078, column: 17, scope: !7613)
!7615 = !DILocation(line: 7078, column: 14, scope: !7613)
!7616 = !DILocation(line: 7078, column: 10, scope: !7608)
!7617 = !DILocation(line: 7078, column: 31, scope: !7613)
!7618 = !DILocation(line: 7078, column: 24, scope: !7613)
!7619 = !DILocation(line: 7079, column: 2, scope: !7608)
!7620 = !DILocation(line: 7080, column: 10, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 7079, column: 9)
!7622 = !DILocation(line: 7080, column: 12, scope: !7621)
!7623 = !DILocation(line: 7080, column: 8, scope: !7621)
!7624 = !DILocation(line: 7081, column: 11, scope: !7621)
!7625 = !DILocation(line: 7081, column: 15, scope: !7621)
!7626 = !DILocation(line: 7081, column: 13, scope: !7621)
!7627 = !DILocation(line: 7081, column: 26, scope: !7621)
!7628 = !DILocation(line: 7081, column: 31, scope: !7621)
!7629 = !DILocation(line: 7081, column: 8, scope: !7621)
!7630 = !DILocation(line: 7082, column: 6, scope: !7621)
!7631 = !DILocation(line: 7082, column: 13, scope: !7621)
!7632 = !DILocation(line: 7082, column: 17, scope: !7621)
!7633 = !DILocation(line: 7083, column: 15, scope: !7634)
!7634 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 7082, column: 23)
!7635 = !DILocation(line: 7083, column: 22, scope: !7634)
!7636 = !DILocation(line: 7083, column: 3, scope: !7634)
!7637 = !DILocation(line: 7083, column: 10, scope: !7634)
!7638 = !DILocation(line: 7083, column: 13, scope: !7634)
!7639 = !DILocation(line: 7084, column: 8, scope: !7634)
!7640 = !DILocation(line: 7084, column: 10, scope: !7634)
!7641 = !DILocation(line: 7084, column: 15, scope: !7634)
!7642 = !DILocation(line: 7084, column: 5, scope: !7634)
!7643 = !DILocation(line: 7085, column: 7, scope: !7644)
!7644 = distinct !DILexicalBlock(scope: !7634, file: !3, line: 7085, column: 7)
!7645 = !DILocation(line: 7085, column: 14, scope: !7644)
!7646 = !DILocation(line: 7085, column: 11, scope: !7644)
!7647 = !DILocation(line: 7085, column: 7, scope: !7634)
!7648 = !DILocation(line: 7085, column: 28, scope: !7644)
!7649 = !DILocation(line: 7085, column: 21, scope: !7644)
!7650 = distinct !{!7650, !7630, !7651}
!7651 = !DILocation(line: 7086, column: 6, scope: !7621)
!7652 = !DILocation(line: 7070, column: 5, scope: !7592)
!7653 = distinct !{!7653, !7654, !7655}
!7654 = !DILocation(line: 7070, column: 5, scope: !7593)
!7655 = !DILocation(line: 7088, column: 5, scope: !7593)
!7656 = !DILocation(line: 7089, column: 1, scope: !766)
!7657 = distinct !DISubprogram(name: "decode_c", scope: !3, file: !3, line: 6983, type: !7658, scopeLine: 6984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7658 = !DISubroutineType(types: !7659)
!7659 = !{!6}
!7660 = !DILocalVariable(name: "j", scope: !7657, file: !3, line: 6985, type: !6)
!7661 = !DILocation(line: 6985, column: 14, scope: !7657)
!7662 = !DILocalVariable(name: "mask", scope: !7657, file: !3, line: 6985, type: !6)
!7663 = !DILocation(line: 6985, column: 17, scope: !7657)
!7664 = !DILocation(line: 6987, column: 9, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 6987, column: 9)
!7666 = !DILocation(line: 6987, column: 19, scope: !7665)
!7667 = !DILocation(line: 6987, column: 9, scope: !7657)
!7668 = !DILocation(line: 6988, column: 14, scope: !7669)
!7669 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 6987, column: 25)
!7670 = !DILocation(line: 6988, column: 12, scope: !7669)
!7671 = !DILocation(line: 6989, column: 6, scope: !7672)
!7672 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 6989, column: 6)
!7673 = !DILocation(line: 6989, column: 16, scope: !7672)
!7674 = !DILocation(line: 6989, column: 6, scope: !7669)
!7675 = !DILocation(line: 6990, column: 6, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 6989, column: 22)
!7677 = !DILocation(line: 6992, column: 2, scope: !7669)
!7678 = !DILocation(line: 6993, column: 2, scope: !7669)
!7679 = !DILocation(line: 6994, column: 2, scope: !7669)
!7680 = !DILocation(line: 6995, column: 5, scope: !7669)
!7681 = !DILocation(line: 6996, column: 14, scope: !7657)
!7682 = !DILocation(line: 6997, column: 17, scope: !7657)
!7683 = !DILocation(line: 6997, column: 27, scope: !7657)
!7684 = !DILocation(line: 6997, column: 9, scope: !7657)
!7685 = !DILocation(line: 6997, column: 7, scope: !7657)
!7686 = !DILocation(line: 6998, column: 9, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 6998, column: 9)
!7688 = !DILocation(line: 6998, column: 11, scope: !7687)
!7689 = !DILocation(line: 6998, column: 9, scope: !7657)
!7690 = !DILocation(line: 6999, column: 7, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7687, file: !3, line: 6998, column: 18)
!7692 = !DILocation(line: 7000, column: 2, scope: !7691)
!7693 = !DILocation(line: 7001, column: 10, scope: !7694)
!7694 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 7001, column: 10)
!7695 = distinct !DILexicalBlock(scope: !7691, file: !3, line: 7000, column: 5)
!7696 = !DILocation(line: 7001, column: 22, scope: !7694)
!7697 = !DILocation(line: 7001, column: 20, scope: !7694)
!7698 = !DILocation(line: 7001, column: 10, scope: !7695)
!7699 = !DILocation(line: 7001, column: 38, scope: !7694)
!7700 = !DILocation(line: 7001, column: 32, scope: !7694)
!7701 = !DILocation(line: 7001, column: 30, scope: !7694)
!7702 = !DILocation(line: 7001, column: 28, scope: !7694)
!7703 = !DILocation(line: 7002, column: 35, scope: !7694)
!7704 = !DILocation(line: 7002, column: 29, scope: !7694)
!7705 = !DILocation(line: 7002, column: 27, scope: !7694)
!7706 = !DILocation(line: 7003, column: 11, scope: !7695)
!7707 = !DILocation(line: 7004, column: 2, scope: !7695)
!7708 = !DILocation(line: 7004, column: 11, scope: !7691)
!7709 = !DILocation(line: 7004, column: 13, scope: !7691)
!7710 = distinct !{!7710, !7692, !7711}
!7711 = !DILocation(line: 7004, column: 18, scope: !7691)
!7712 = !DILocation(line: 7005, column: 5, scope: !7691)
!7713 = !DILocation(line: 7006, column: 25, scope: !7657)
!7714 = !DILocation(line: 7006, column: 19, scope: !7657)
!7715 = !DILocation(line: 7006, column: 13, scope: !7657)
!7716 = !DILocation(line: 7006, column: 5, scope: !7657)
!7717 = !DILocation(line: 7007, column: 12, scope: !7657)
!7718 = !DILocation(line: 7007, column: 5, scope: !7657)
!7719 = !DILocation(line: 7008, column: 1, scope: !7657)
!7720 = distinct !DISubprogram(name: "decode_p", scope: !3, file: !3, line: 7010, type: !7658, scopeLine: 7011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7721 = !DILocalVariable(name: "j", scope: !7720, file: !3, line: 7012, type: !6)
!7722 = !DILocation(line: 7012, column: 14, scope: !7720)
!7723 = !DILocalVariable(name: "mask", scope: !7720, file: !3, line: 7012, type: !6)
!7724 = !DILocation(line: 7012, column: 17, scope: !7720)
!7725 = !DILocation(line: 7014, column: 18, scope: !7720)
!7726 = !DILocation(line: 7014, column: 28, scope: !7720)
!7727 = !DILocation(line: 7014, column: 9, scope: !7720)
!7728 = !DILocation(line: 7014, column: 7, scope: !7720)
!7729 = !DILocation(line: 7015, column: 9, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 7015, column: 9)
!7731 = !DILocation(line: 7015, column: 11, scope: !7730)
!7732 = !DILocation(line: 7015, column: 9, scope: !7720)
!7733 = !DILocation(line: 7016, column: 7, scope: !7734)
!7734 = distinct !DILexicalBlock(scope: !7730, file: !3, line: 7015, column: 18)
!7735 = !DILocation(line: 7017, column: 2, scope: !7734)
!7736 = !DILocation(line: 7018, column: 10, scope: !7737)
!7737 = distinct !DILexicalBlock(scope: !7738, file: !3, line: 7018, column: 10)
!7738 = distinct !DILexicalBlock(scope: !7734, file: !3, line: 7017, column: 5)
!7739 = !DILocation(line: 7018, column: 22, scope: !7737)
!7740 = !DILocation(line: 7018, column: 20, scope: !7737)
!7741 = !DILocation(line: 7018, column: 10, scope: !7738)
!7742 = !DILocation(line: 7018, column: 38, scope: !7737)
!7743 = !DILocation(line: 7018, column: 32, scope: !7737)
!7744 = !DILocation(line: 7018, column: 30, scope: !7737)
!7745 = !DILocation(line: 7018, column: 28, scope: !7737)
!7746 = !DILocation(line: 7019, column: 35, scope: !7737)
!7747 = !DILocation(line: 7019, column: 29, scope: !7737)
!7748 = !DILocation(line: 7019, column: 27, scope: !7737)
!7749 = !DILocation(line: 7020, column: 11, scope: !7738)
!7750 = !DILocation(line: 7021, column: 2, scope: !7738)
!7751 = !DILocation(line: 7021, column: 11, scope: !7734)
!7752 = !DILocation(line: 7021, column: 13, scope: !7734)
!7753 = distinct !{!7753, !7735, !7754}
!7754 = !DILocation(line: 7021, column: 18, scope: !7734)
!7755 = !DILocation(line: 7022, column: 5, scope: !7734)
!7756 = !DILocation(line: 7023, column: 26, scope: !7720)
!7757 = !DILocation(line: 7023, column: 19, scope: !7720)
!7758 = !DILocation(line: 7023, column: 13, scope: !7720)
!7759 = !DILocation(line: 7023, column: 5, scope: !7720)
!7760 = !DILocation(line: 7024, column: 9, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 7024, column: 9)
!7762 = !DILocation(line: 7024, column: 11, scope: !7761)
!7763 = !DILocation(line: 7024, column: 9, scope: !7720)
!7764 = !DILocation(line: 7024, column: 39, scope: !7761)
!7765 = !DILocation(line: 7024, column: 41, scope: !7761)
!7766 = !DILocation(line: 7024, column: 35, scope: !7761)
!7767 = !DILocation(line: 7024, column: 64, scope: !7761)
!7768 = !DILocation(line: 7024, column: 66, scope: !7761)
!7769 = !DILocation(line: 7024, column: 49, scope: !7761)
!7770 = !DILocation(line: 7024, column: 47, scope: !7761)
!7771 = !DILocation(line: 7024, column: 19, scope: !7761)
!7772 = !DILocation(line: 7024, column: 17, scope: !7761)
!7773 = !DILocation(line: 7025, column: 12, scope: !7720)
!7774 = !DILocation(line: 7025, column: 5, scope: !7720)
!7775 = distinct !DISubprogram(name: "fillbuf", scope: !3, file: !3, line: 6819, type: !38, scopeLine: 6821, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7776 = !DILocalVariable(name: "n", arg: 1, scope: !7775, file: !3, line: 6820, type: !12)
!7777 = !DILocation(line: 6820, column: 9, scope: !7775)
!7778 = !DILocation(line: 6822, column: 19, scope: !7775)
!7779 = !DILocation(line: 6822, column: 15, scope: !7775)
!7780 = !DILocation(line: 6823, column: 5, scope: !7775)
!7781 = !DILocation(line: 6823, column: 12, scope: !7775)
!7782 = !DILocation(line: 6823, column: 16, scope: !7775)
!7783 = !DILocation(line: 6823, column: 14, scope: !7775)
!7784 = !DILocation(line: 6824, column: 15, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 6823, column: 26)
!7786 = !DILocation(line: 6824, column: 34, scope: !7785)
!7787 = !DILocation(line: 6824, column: 31, scope: !7785)
!7788 = !DILocation(line: 6824, column: 25, scope: !7785)
!7789 = !DILocation(line: 6824, column: 12, scope: !7785)
!7790 = !DILocation(line: 6825, column: 24, scope: !7785)
!7791 = !DILocation(line: 6825, column: 12, scope: !7785)
!7792 = !DILocation(line: 6826, column: 11, scope: !7793)
!7793 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 6826, column: 6)
!7794 = !DILocation(line: 6826, column: 21, scope: !7793)
!7795 = !DILocation(line: 6826, column: 6, scope: !7785)
!7796 = !DILocation(line: 6826, column: 39, scope: !7793)
!7797 = !DILocation(line: 6826, column: 29, scope: !7793)
!7798 = !DILocation(line: 6827, column: 11, scope: !7785)
!7799 = distinct !{!7799, !7780, !7800}
!7800 = !DILocation(line: 6828, column: 5, scope: !7775)
!7801 = !DILocation(line: 6829, column: 18, scope: !7775)
!7802 = !DILocation(line: 6829, column: 44, scope: !7775)
!7803 = !DILocation(line: 6829, column: 41, scope: !7775)
!7804 = !DILocation(line: 6829, column: 28, scope: !7775)
!7805 = !DILocation(line: 6829, column: 15, scope: !7775)
!7806 = !DILocation(line: 6830, column: 1, scope: !7775)
!7807 = distinct !DISubprogram(name: "getbits", scope: !3, file: !3, line: 6832, type: !7808, scopeLine: 6834, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7808 = !DISubroutineType(types: !7809)
!7809 = !{!6, !12}
!7810 = !DILocalVariable(name: "n", arg: 1, scope: !7807, file: !3, line: 6833, type: !12)
!7811 = !DILocation(line: 6833, column: 9, scope: !7807)
!7812 = !DILocalVariable(name: "x", scope: !7807, file: !3, line: 6835, type: !6)
!7813 = !DILocation(line: 6835, column: 14, scope: !7807)
!7814 = !DILocation(line: 6837, column: 9, scope: !7807)
!7815 = !DILocation(line: 6837, column: 35, scope: !7807)
!7816 = !DILocation(line: 6837, column: 33, scope: !7807)
!7817 = !DILocation(line: 6837, column: 19, scope: !7807)
!7818 = !DILocation(line: 6837, column: 7, scope: !7807)
!7819 = !DILocation(line: 6837, column: 48, scope: !7807)
!7820 = !DILocation(line: 6837, column: 40, scope: !7807)
!7821 = !DILocation(line: 6838, column: 12, scope: !7807)
!7822 = !DILocation(line: 6838, column: 5, scope: !7807)
!7823 = distinct !DISubprogram(name: "read_pt_len", scope: !3, file: !3, line: 6915, type: !2838, scopeLine: 6919, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7824 = !DILocalVariable(name: "nn", arg: 1, scope: !7823, file: !3, line: 6916, type: !12)
!7825 = !DILocation(line: 6916, column: 9, scope: !7823)
!7826 = !DILocalVariable(name: "nbit", arg: 2, scope: !7823, file: !3, line: 6917, type: !12)
!7827 = !DILocation(line: 6917, column: 9, scope: !7823)
!7828 = !DILocalVariable(name: "i_special", arg: 3, scope: !7823, file: !3, line: 6918, type: !12)
!7829 = !DILocation(line: 6918, column: 9, scope: !7823)
!7830 = !DILocalVariable(name: "i", scope: !7823, file: !3, line: 6920, type: !12)
!7831 = !DILocation(line: 6920, column: 9, scope: !7823)
!7832 = !DILocalVariable(name: "c", scope: !7823, file: !3, line: 6920, type: !12)
!7833 = !DILocation(line: 6920, column: 12, scope: !7823)
!7834 = !DILocalVariable(name: "n", scope: !7823, file: !3, line: 6920, type: !12)
!7835 = !DILocation(line: 6920, column: 15, scope: !7823)
!7836 = !DILocalVariable(name: "mask", scope: !7823, file: !3, line: 6921, type: !6)
!7837 = !DILocation(line: 6921, column: 14, scope: !7823)
!7838 = !DILocation(line: 6923, column: 17, scope: !7823)
!7839 = !DILocation(line: 6923, column: 9, scope: !7823)
!7840 = !DILocation(line: 6923, column: 7, scope: !7823)
!7841 = !DILocation(line: 6924, column: 9, scope: !7842)
!7842 = distinct !DILexicalBlock(scope: !7823, file: !3, line: 6924, column: 9)
!7843 = !DILocation(line: 6924, column: 11, scope: !7842)
!7844 = !DILocation(line: 6924, column: 9, scope: !7823)
!7845 = !DILocation(line: 6925, column: 14, scope: !7846)
!7846 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 6924, column: 17)
!7847 = !DILocation(line: 6925, column: 6, scope: !7846)
!7848 = !DILocation(line: 6925, column: 4, scope: !7846)
!7849 = !DILocation(line: 6926, column: 9, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 6926, column: 2)
!7851 = !DILocation(line: 6926, column: 7, scope: !7850)
!7852 = !DILocation(line: 6926, column: 14, scope: !7853)
!7853 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 6926, column: 2)
!7854 = !DILocation(line: 6926, column: 18, scope: !7853)
!7855 = !DILocation(line: 6926, column: 16, scope: !7853)
!7856 = !DILocation(line: 6926, column: 2, scope: !7850)
!7857 = !DILocation(line: 6926, column: 34, scope: !7853)
!7858 = !DILocation(line: 6926, column: 27, scope: !7853)
!7859 = !DILocation(line: 6926, column: 37, scope: !7853)
!7860 = !DILocation(line: 6926, column: 23, scope: !7853)
!7861 = !DILocation(line: 6926, column: 2, scope: !7853)
!7862 = distinct !{!7862, !7856, !7863}
!7863 = !DILocation(line: 6926, column: 39, scope: !7850)
!7864 = !DILocation(line: 6927, column: 9, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7846, file: !3, line: 6927, column: 2)
!7866 = !DILocation(line: 6927, column: 7, scope: !7865)
!7867 = !DILocation(line: 6927, column: 14, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7865, file: !3, line: 6927, column: 2)
!7869 = !DILocation(line: 6927, column: 16, scope: !7868)
!7870 = !DILocation(line: 6927, column: 2, scope: !7865)
!7871 = !DILocation(line: 6927, column: 42, scope: !7868)
!7872 = !DILocation(line: 6927, column: 37, scope: !7868)
!7873 = !DILocation(line: 6927, column: 28, scope: !7868)
!7874 = !DILocation(line: 6927, column: 40, scope: !7868)
!7875 = !DILocation(line: 6927, column: 24, scope: !7868)
!7876 = !DILocation(line: 6927, column: 2, scope: !7868)
!7877 = distinct !{!7877, !7870, !7878}
!7878 = !DILocation(line: 6927, column: 42, scope: !7865)
!7879 = !DILocation(line: 6928, column: 5, scope: !7846)
!7880 = !DILocation(line: 6929, column: 4, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 6928, column: 12)
!7882 = !DILocation(line: 6930, column: 2, scope: !7881)
!7883 = !DILocation(line: 6930, column: 9, scope: !7881)
!7884 = !DILocation(line: 6930, column: 13, scope: !7881)
!7885 = !DILocation(line: 6930, column: 11, scope: !7881)
!7886 = !DILocation(line: 6931, column: 10, scope: !7887)
!7887 = distinct !DILexicalBlock(scope: !7881, file: !3, line: 6930, column: 16)
!7888 = !DILocation(line: 6931, column: 20, scope: !7887)
!7889 = !DILocation(line: 6931, column: 8, scope: !7887)
!7890 = !DILocation(line: 6932, column: 10, scope: !7891)
!7891 = distinct !DILexicalBlock(scope: !7887, file: !3, line: 6932, column: 10)
!7892 = !DILocation(line: 6932, column: 12, scope: !7891)
!7893 = !DILocation(line: 6932, column: 10, scope: !7887)
!7894 = !DILocation(line: 6933, column: 8, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7891, file: !3, line: 6932, column: 18)
!7896 = !DILocation(line: 6934, column: 3, scope: !7895)
!7897 = !DILocation(line: 6934, column: 10, scope: !7895)
!7898 = !DILocation(line: 6934, column: 17, scope: !7895)
!7899 = !DILocation(line: 6934, column: 15, scope: !7895)
!7900 = !DILocation(line: 6934, column: 36, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7895, file: !3, line: 6934, column: 28)
!7902 = !DILocation(line: 6934, column: 45, scope: !7901)
!7903 = distinct !{!7903, !7896, !7904}
!7904 = !DILocation(line: 6934, column: 50, scope: !7895)
!7905 = !DILocation(line: 6935, column: 6, scope: !7895)
!7906 = !DILocation(line: 6936, column: 15, scope: !7887)
!7907 = !DILocation(line: 6936, column: 17, scope: !7887)
!7908 = !DILocation(line: 6936, column: 14, scope: !7887)
!7909 = !DILocation(line: 6936, column: 28, scope: !7887)
!7910 = !DILocation(line: 6936, column: 30, scope: !7887)
!7911 = !DILocation(line: 6936, column: 6, scope: !7887)
!7912 = !DILocation(line: 6937, column: 20, scope: !7887)
!7913 = !DILocation(line: 6937, column: 14, scope: !7887)
!7914 = !DILocation(line: 6937, column: 6, scope: !7887)
!7915 = !DILocation(line: 6937, column: 18, scope: !7887)
!7916 = !DILocation(line: 6938, column: 10, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7887, file: !3, line: 6938, column: 10)
!7918 = !DILocation(line: 6938, column: 15, scope: !7917)
!7919 = !DILocation(line: 6938, column: 12, scope: !7917)
!7920 = !DILocation(line: 6938, column: 10, scope: !7887)
!7921 = !DILocation(line: 6939, column: 7, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 6938, column: 26)
!7923 = !DILocation(line: 6939, column: 5, scope: !7922)
!7924 = !DILocation(line: 6940, column: 3, scope: !7922)
!7925 = !DILocation(line: 6940, column: 10, scope: !7922)
!7926 = !DILocation(line: 6940, column: 14, scope: !7922)
!7927 = !DILocation(line: 6940, column: 28, scope: !7922)
!7928 = !DILocation(line: 6940, column: 20, scope: !7922)
!7929 = !DILocation(line: 6940, column: 32, scope: !7922)
!7930 = distinct !{!7930, !7924, !7931}
!7931 = !DILocation(line: 6940, column: 34, scope: !7922)
!7932 = !DILocation(line: 6941, column: 6, scope: !7922)
!7933 = distinct !{!7933, !7882, !7934}
!7934 = !DILocation(line: 6942, column: 2, scope: !7881)
!7935 = !DILocation(line: 6943, column: 2, scope: !7881)
!7936 = !DILocation(line: 6943, column: 9, scope: !7881)
!7937 = !DILocation(line: 6943, column: 13, scope: !7881)
!7938 = !DILocation(line: 6943, column: 11, scope: !7881)
!7939 = !DILocation(line: 6943, column: 25, scope: !7881)
!7940 = !DILocation(line: 6943, column: 17, scope: !7881)
!7941 = !DILocation(line: 6943, column: 29, scope: !7881)
!7942 = distinct !{!7942, !7935, !7943}
!7943 = !DILocation(line: 6943, column: 31, scope: !7881)
!7944 = !DILocation(line: 6944, column: 13, scope: !7881)
!7945 = !DILocation(line: 6944, column: 2, scope: !7881)
!7946 = !DILocation(line: 6946, column: 1, scope: !7823)
!7947 = distinct !DISubprogram(name: "read_c_len", scope: !3, file: !3, line: 6948, type: !693, scopeLine: 6949, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!7948 = !DILocalVariable(name: "i", scope: !7947, file: !3, line: 6950, type: !12)
!7949 = !DILocation(line: 6950, column: 9, scope: !7947)
!7950 = !DILocalVariable(name: "c", scope: !7947, file: !3, line: 6950, type: !12)
!7951 = !DILocation(line: 6950, column: 12, scope: !7947)
!7952 = !DILocalVariable(name: "n", scope: !7947, file: !3, line: 6950, type: !12)
!7953 = !DILocation(line: 6950, column: 15, scope: !7947)
!7954 = !DILocalVariable(name: "mask", scope: !7947, file: !3, line: 6951, type: !6)
!7955 = !DILocation(line: 6951, column: 14, scope: !7947)
!7956 = !DILocation(line: 6953, column: 9, scope: !7947)
!7957 = !DILocation(line: 6953, column: 7, scope: !7947)
!7958 = !DILocation(line: 6954, column: 9, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 6954, column: 9)
!7960 = !DILocation(line: 6954, column: 11, scope: !7959)
!7961 = !DILocation(line: 6954, column: 9, scope: !7947)
!7962 = !DILocation(line: 6955, column: 6, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7959, file: !3, line: 6954, column: 17)
!7964 = !DILocation(line: 6955, column: 4, scope: !7963)
!7965 = !DILocation(line: 6956, column: 9, scope: !7966)
!7966 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 6956, column: 2)
!7967 = !DILocation(line: 6956, column: 7, scope: !7966)
!7968 = !DILocation(line: 6956, column: 14, scope: !7969)
!7969 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 6956, column: 2)
!7970 = !DILocation(line: 6956, column: 16, scope: !7969)
!7971 = !DILocation(line: 6956, column: 2, scope: !7966)
!7972 = !DILocation(line: 6956, column: 33, scope: !7969)
!7973 = !DILocation(line: 6956, column: 27, scope: !7969)
!7974 = !DILocation(line: 6956, column: 36, scope: !7969)
!7975 = !DILocation(line: 6956, column: 23, scope: !7969)
!7976 = !DILocation(line: 6956, column: 2, scope: !7969)
!7977 = distinct !{!7977, !7971, !7978}
!7978 = !DILocation(line: 6956, column: 38, scope: !7966)
!7979 = !DILocation(line: 6957, column: 9, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 6957, column: 2)
!7981 = !DILocation(line: 6957, column: 7, scope: !7980)
!7982 = !DILocation(line: 6957, column: 14, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 6957, column: 2)
!7984 = !DILocation(line: 6957, column: 16, scope: !7983)
!7985 = !DILocation(line: 6957, column: 2, scope: !7980)
!7986 = !DILocation(line: 6957, column: 42, scope: !7983)
!7987 = !DILocation(line: 6957, column: 37, scope: !7983)
!7988 = !DILocation(line: 6957, column: 29, scope: !7983)
!7989 = !DILocation(line: 6957, column: 40, scope: !7983)
!7990 = !DILocation(line: 6957, column: 25, scope: !7983)
!7991 = !DILocation(line: 6957, column: 2, scope: !7983)
!7992 = distinct !{!7992, !7985, !7993}
!7993 = !DILocation(line: 6957, column: 42, scope: !7980)
!7994 = !DILocation(line: 6958, column: 5, scope: !7963)
!7995 = !DILocation(line: 6959, column: 4, scope: !7996)
!7996 = distinct !DILexicalBlock(scope: !7959, file: !3, line: 6958, column: 12)
!7997 = !DILocation(line: 6960, column: 2, scope: !7996)
!7998 = !DILocation(line: 6960, column: 9, scope: !7996)
!7999 = !DILocation(line: 6960, column: 13, scope: !7996)
!8000 = !DILocation(line: 6960, column: 11, scope: !7996)
!8001 = !DILocation(line: 6961, column: 19, scope: !8002)
!8002 = distinct !DILexicalBlock(scope: !7996, file: !3, line: 6960, column: 16)
!8003 = !DILocation(line: 6961, column: 29, scope: !8002)
!8004 = !DILocation(line: 6961, column: 10, scope: !8002)
!8005 = !DILocation(line: 6961, column: 8, scope: !8002)
!8006 = !DILocation(line: 6962, column: 10, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !8002, file: !3, line: 6962, column: 10)
!8008 = !DILocation(line: 6962, column: 12, scope: !8007)
!8009 = !DILocation(line: 6962, column: 10, scope: !8002)
!8010 = !DILocation(line: 6963, column: 8, scope: !8011)
!8011 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 6962, column: 19)
!8012 = !DILocation(line: 6964, column: 3, scope: !8011)
!8013 = !DILocation(line: 6965, column: 11, scope: !8014)
!8014 = distinct !DILexicalBlock(scope: !8015, file: !3, line: 6965, column: 11)
!8015 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 6964, column: 6)
!8016 = !DILocation(line: 6965, column: 23, scope: !8014)
!8017 = !DILocation(line: 6965, column: 21, scope: !8014)
!8018 = !DILocation(line: 6965, column: 11, scope: !8015)
!8019 = !DILocation(line: 6965, column: 39, scope: !8014)
!8020 = !DILocation(line: 6965, column: 33, scope: !8014)
!8021 = !DILocation(line: 6965, column: 31, scope: !8014)
!8022 = !DILocation(line: 6965, column: 29, scope: !8014)
!8023 = !DILocation(line: 6966, column: 36, scope: !8014)
!8024 = !DILocation(line: 6966, column: 30, scope: !8014)
!8025 = !DILocation(line: 6966, column: 28, scope: !8014)
!8026 = !DILocation(line: 6967, column: 12, scope: !8015)
!8027 = !DILocation(line: 6968, column: 3, scope: !8015)
!8028 = !DILocation(line: 6968, column: 12, scope: !8011)
!8029 = !DILocation(line: 6968, column: 14, scope: !8011)
!8030 = distinct !{!8030, !8012, !8031}
!8031 = !DILocation(line: 6968, column: 19, scope: !8011)
!8032 = !DILocation(line: 6969, column: 6, scope: !8011)
!8033 = !DILocation(line: 6970, column: 27, scope: !8002)
!8034 = !DILocation(line: 6970, column: 20, scope: !8002)
!8035 = !DILocation(line: 6970, column: 14, scope: !8002)
!8036 = !DILocation(line: 6970, column: 6, scope: !8002)
!8037 = !DILocation(line: 6971, column: 10, scope: !8038)
!8038 = distinct !DILexicalBlock(scope: !8002, file: !3, line: 6971, column: 10)
!8039 = !DILocation(line: 6971, column: 12, scope: !8038)
!8040 = !DILocation(line: 6971, column: 10, scope: !8002)
!8041 = !DILocation(line: 6972, column: 12, scope: !8042)
!8042 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 6972, column: 12)
!8043 = distinct !DILexicalBlock(scope: !8038, file: !3, line: 6971, column: 18)
!8044 = !DILocation(line: 6972, column: 14, scope: !8042)
!8045 = !DILocation(line: 6972, column: 12, scope: !8043)
!8046 = !DILocation(line: 6972, column: 22, scope: !8042)
!8047 = !DILocation(line: 6972, column: 20, scope: !8042)
!8048 = !DILocation(line: 6973, column: 12, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8042, file: !3, line: 6973, column: 12)
!8050 = !DILocation(line: 6973, column: 14, scope: !8049)
!8051 = !DILocation(line: 6973, column: 12, scope: !8042)
!8052 = !DILocation(line: 6973, column: 24, scope: !8049)
!8053 = !DILocation(line: 6973, column: 35, scope: !8049)
!8054 = !DILocation(line: 6973, column: 22, scope: !8049)
!8055 = !DILocation(line: 6973, column: 20, scope: !8049)
!8056 = !DILocation(line: 6974, column: 24, scope: !8049)
!8057 = !DILocation(line: 6974, column: 38, scope: !8049)
!8058 = !DILocation(line: 6974, column: 22, scope: !8049)
!8059 = !DILocation(line: 6975, column: 3, scope: !8043)
!8060 = !DILocation(line: 6975, column: 10, scope: !8043)
!8061 = !DILocation(line: 6975, column: 14, scope: !8043)
!8062 = !DILocation(line: 6975, column: 27, scope: !8043)
!8063 = !DILocation(line: 6975, column: 20, scope: !8043)
!8064 = !DILocation(line: 6975, column: 31, scope: !8043)
!8065 = distinct !{!8065, !8059, !8066}
!8066 = !DILocation(line: 6975, column: 33, scope: !8043)
!8067 = !DILocation(line: 6976, column: 6, scope: !8043)
!8068 = !DILocation(line: 6976, column: 26, scope: !8038)
!8069 = !DILocation(line: 6976, column: 28, scope: !8038)
!8070 = !DILocation(line: 6976, column: 20, scope: !8038)
!8071 = !DILocation(line: 6976, column: 13, scope: !8038)
!8072 = !DILocation(line: 6976, column: 24, scope: !8038)
!8073 = distinct !{!8073, !7997, !8074}
!8074 = !DILocation(line: 6977, column: 2, scope: !7996)
!8075 = !DILocation(line: 6978, column: 2, scope: !7996)
!8076 = !DILocation(line: 6978, column: 9, scope: !7996)
!8077 = !DILocation(line: 6978, column: 11, scope: !7996)
!8078 = !DILocation(line: 6978, column: 24, scope: !7996)
!8079 = !DILocation(line: 6978, column: 17, scope: !7996)
!8080 = !DILocation(line: 6978, column: 28, scope: !7996)
!8081 = distinct !{!8081, !8075, !8082}
!8082 = !DILocation(line: 6978, column: 30, scope: !7996)
!8083 = !DILocation(line: 6979, column: 2, scope: !7996)
!8084 = !DILocation(line: 6981, column: 1, scope: !7947)
!8085 = distinct !DISubprogram(name: "make_table", scope: !3, file: !3, line: 6851, type: !8086, scopeLine: 6856, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8086 = !DISubroutineType(types: !8087)
!8087 = !{null, !12, !85, !12, !166}
!8088 = !DILocalVariable(name: "nchar", arg: 1, scope: !8085, file: !3, line: 6852, type: !12)
!8089 = !DILocation(line: 6852, column: 9, scope: !8085)
!8090 = !DILocalVariable(name: "bitlen", arg: 2, scope: !8085, file: !3, line: 6853, type: !85)
!8091 = !DILocation(line: 6853, column: 9, scope: !8085)
!8092 = !DILocalVariable(name: "tablebits", arg: 3, scope: !8085, file: !3, line: 6854, type: !12)
!8093 = !DILocation(line: 6854, column: 9, scope: !8085)
!8094 = !DILocalVariable(name: "table", arg: 4, scope: !8085, file: !3, line: 6855, type: !166)
!8095 = !DILocation(line: 6855, column: 9, scope: !8085)
!8096 = !DILocalVariable(name: "count", scope: !8085, file: !3, line: 6857, type: !220)
!8097 = !DILocation(line: 6857, column: 9, scope: !8085)
!8098 = !DILocalVariable(name: "weight", scope: !8085, file: !3, line: 6857, type: !220)
!8099 = !DILocation(line: 6857, column: 20, scope: !8085)
!8100 = !DILocalVariable(name: "start", scope: !8085, file: !3, line: 6857, type: !408)
!8101 = !DILocation(line: 6857, column: 32, scope: !8085)
!8102 = !DILocalVariable(name: "p", scope: !8085, file: !3, line: 6857, type: !166)
!8103 = !DILocation(line: 6857, column: 44, scope: !8085)
!8104 = !DILocalVariable(name: "i", scope: !8085, file: !3, line: 6858, type: !6)
!8105 = !DILocation(line: 6858, column: 14, scope: !8085)
!8106 = !DILocalVariable(name: "k", scope: !8085, file: !3, line: 6858, type: !6)
!8107 = !DILocation(line: 6858, column: 17, scope: !8085)
!8108 = !DILocalVariable(name: "len", scope: !8085, file: !3, line: 6858, type: !6)
!8109 = !DILocation(line: 6858, column: 20, scope: !8085)
!8110 = !DILocalVariable(name: "ch", scope: !8085, file: !3, line: 6858, type: !6)
!8111 = !DILocation(line: 6858, column: 25, scope: !8085)
!8112 = !DILocalVariable(name: "jutbits", scope: !8085, file: !3, line: 6858, type: !6)
!8113 = !DILocation(line: 6858, column: 29, scope: !8085)
!8114 = !DILocalVariable(name: "avail", scope: !8085, file: !3, line: 6858, type: !6)
!8115 = !DILocation(line: 6858, column: 38, scope: !8085)
!8116 = !DILocalVariable(name: "nextcode", scope: !8085, file: !3, line: 6858, type: !6)
!8117 = !DILocation(line: 6858, column: 45, scope: !8085)
!8118 = !DILocalVariable(name: "mask", scope: !8085, file: !3, line: 6858, type: !6)
!8119 = !DILocation(line: 6858, column: 55, scope: !8085)
!8120 = !DILocation(line: 6860, column: 12, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6860, column: 5)
!8122 = !DILocation(line: 6860, column: 10, scope: !8121)
!8123 = !DILocation(line: 6860, column: 17, scope: !8124)
!8124 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 6860, column: 5)
!8125 = !DILocation(line: 6860, column: 19, scope: !8124)
!8126 = !DILocation(line: 6860, column: 5, scope: !8121)
!8127 = !DILocation(line: 6860, column: 37, scope: !8124)
!8128 = !DILocation(line: 6860, column: 31, scope: !8124)
!8129 = !DILocation(line: 6860, column: 40, scope: !8124)
!8130 = !DILocation(line: 6860, column: 27, scope: !8124)
!8131 = !DILocation(line: 6860, column: 5, scope: !8124)
!8132 = distinct !{!8132, !8126, !8133}
!8133 = !DILocation(line: 6860, column: 42, scope: !8121)
!8134 = !DILocation(line: 6861, column: 12, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6861, column: 5)
!8136 = !DILocation(line: 6861, column: 10, scope: !8135)
!8137 = !DILocation(line: 6861, column: 17, scope: !8138)
!8138 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 6861, column: 5)
!8139 = !DILocation(line: 6861, column: 31, scope: !8138)
!8140 = !DILocation(line: 6861, column: 19, scope: !8138)
!8141 = !DILocation(line: 6861, column: 5, scope: !8135)
!8142 = !DILocation(line: 6861, column: 49, scope: !8138)
!8143 = !DILocation(line: 6861, column: 56, scope: !8138)
!8144 = !DILocation(line: 6861, column: 43, scope: !8138)
!8145 = !DILocation(line: 6861, column: 59, scope: !8138)
!8146 = !DILocation(line: 6861, column: 39, scope: !8138)
!8147 = !DILocation(line: 6861, column: 5, scope: !8138)
!8148 = distinct !{!8148, !8141, !8149}
!8149 = !DILocation(line: 6861, column: 59, scope: !8135)
!8150 = !DILocation(line: 6863, column: 5, scope: !8085)
!8151 = !DILocation(line: 6863, column: 14, scope: !8085)
!8152 = !DILocation(line: 6864, column: 12, scope: !8153)
!8153 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6864, column: 5)
!8154 = !DILocation(line: 6864, column: 10, scope: !8153)
!8155 = !DILocation(line: 6864, column: 17, scope: !8156)
!8156 = distinct !DILexicalBlock(scope: !8153, file: !3, line: 6864, column: 5)
!8157 = !DILocation(line: 6864, column: 19, scope: !8156)
!8158 = !DILocation(line: 6864, column: 5, scope: !8153)
!8159 = !DILocation(line: 6865, column: 23, scope: !8156)
!8160 = !DILocation(line: 6865, column: 17, scope: !8156)
!8161 = !DILocation(line: 6865, column: 35, scope: !8156)
!8162 = !DILocation(line: 6865, column: 29, scope: !8156)
!8163 = !DILocation(line: 6865, column: 47, scope: !8156)
!8164 = !DILocation(line: 6865, column: 45, scope: !8156)
!8165 = !DILocation(line: 6865, column: 38, scope: !8156)
!8166 = !DILocation(line: 6865, column: 26, scope: !8156)
!8167 = !DILocation(line: 6865, column: 8, scope: !8156)
!8168 = !DILocation(line: 6865, column: 10, scope: !8156)
!8169 = !DILocation(line: 6865, column: 2, scope: !8156)
!8170 = !DILocation(line: 6865, column: 15, scope: !8156)
!8171 = !DILocation(line: 6864, column: 27, scope: !8156)
!8172 = !DILocation(line: 6864, column: 5, scope: !8156)
!8173 = distinct !{!8173, !8158, !8174}
!8174 = !DILocation(line: 6865, column: 49, scope: !8153)
!8175 = !DILocation(line: 6866, column: 10, scope: !8176)
!8176 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6866, column: 9)
!8177 = !DILocation(line: 6866, column: 20, scope: !8176)
!8178 = !DILocation(line: 6866, column: 30, scope: !8176)
!8179 = !DILocation(line: 6866, column: 9, scope: !8085)
!8180 = !DILocation(line: 6867, column: 2, scope: !8176)
!8181 = !DILocation(line: 6869, column: 20, scope: !8085)
!8182 = !DILocation(line: 6869, column: 18, scope: !8085)
!8183 = !DILocation(line: 6869, column: 13, scope: !8085)
!8184 = !DILocation(line: 6870, column: 12, scope: !8185)
!8185 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6870, column: 5)
!8186 = !DILocation(line: 6870, column: 10, scope: !8185)
!8187 = !DILocation(line: 6870, column: 17, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8185, file: !3, line: 6870, column: 5)
!8189 = !DILocation(line: 6870, column: 32, scope: !8188)
!8190 = !DILocation(line: 6870, column: 19, scope: !8188)
!8191 = !DILocation(line: 6870, column: 5, scope: !8185)
!8192 = !DILocation(line: 6871, column: 15, scope: !8193)
!8193 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 6870, column: 48)
!8194 = !DILocation(line: 6871, column: 8, scope: !8193)
!8195 = !DILocation(line: 6871, column: 2, scope: !8193)
!8196 = !DILocation(line: 6871, column: 11, scope: !8193)
!8197 = !DILocation(line: 6872, column: 31, scope: !8193)
!8198 = !DILocation(line: 6872, column: 43, scope: !8193)
!8199 = !DILocation(line: 6872, column: 41, scope: !8193)
!8200 = !DILocation(line: 6872, column: 27, scope: !8193)
!8201 = !DILocation(line: 6872, column: 14, scope: !8193)
!8202 = !DILocation(line: 6872, column: 9, scope: !8193)
!8203 = !DILocation(line: 6872, column: 2, scope: !8193)
!8204 = !DILocation(line: 6872, column: 12, scope: !8193)
!8205 = !DILocation(line: 6873, column: 5, scope: !8193)
!8206 = !DILocation(line: 6870, column: 44, scope: !8188)
!8207 = !DILocation(line: 6870, column: 5, scope: !8188)
!8208 = distinct !{!8208, !8191, !8209}
!8209 = !DILocation(line: 6873, column: 5, scope: !8185)
!8210 = !DILocation(line: 6874, column: 5, scope: !8085)
!8211 = !DILocation(line: 6874, column: 12, scope: !8085)
!8212 = !DILocation(line: 6874, column: 14, scope: !8085)
!8213 = !DILocation(line: 6875, column: 36, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6874, column: 21)
!8215 = !DILocation(line: 6875, column: 34, scope: !8214)
!8216 = !DILocation(line: 6875, column: 27, scope: !8214)
!8217 = !DILocation(line: 6875, column: 14, scope: !8214)
!8218 = !DILocation(line: 6875, column: 9, scope: !8214)
!8219 = !DILocation(line: 6875, column: 2, scope: !8214)
!8220 = !DILocation(line: 6875, column: 12, scope: !8214)
!8221 = !DILocation(line: 6876, column: 3, scope: !8214)
!8222 = distinct !{!8222, !8210, !8223}
!8223 = !DILocation(line: 6877, column: 5, scope: !8085)
!8224 = !DILocation(line: 6879, column: 15, scope: !8085)
!8225 = !DILocation(line: 6879, column: 25, scope: !8085)
!8226 = !DILocation(line: 6879, column: 9, scope: !8085)
!8227 = !DILocation(line: 6879, column: 33, scope: !8085)
!8228 = !DILocation(line: 6879, column: 30, scope: !8085)
!8229 = !DILocation(line: 6879, column: 7, scope: !8085)
!8230 = !DILocation(line: 6880, column: 9, scope: !8231)
!8231 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6880, column: 9)
!8232 = !DILocation(line: 6880, column: 11, scope: !8231)
!8233 = !DILocation(line: 6880, column: 9, scope: !8085)
!8234 = !DILocation(line: 6881, column: 11, scope: !8235)
!8235 = distinct !DILexicalBlock(scope: !8231, file: !3, line: 6880, column: 17)
!8236 = !DILocation(line: 6881, column: 8, scope: !8235)
!8237 = !DILocation(line: 6881, column: 4, scope: !8235)
!8238 = !DILocation(line: 6882, column: 2, scope: !8235)
!8239 = !DILocation(line: 6882, column: 9, scope: !8235)
!8240 = !DILocation(line: 6882, column: 14, scope: !8235)
!8241 = !DILocation(line: 6882, column: 11, scope: !8235)
!8242 = !DILocation(line: 6882, column: 17, scope: !8235)
!8243 = !DILocation(line: 6882, column: 24, scope: !8235)
!8244 = !DILocation(line: 6882, column: 28, scope: !8235)
!8245 = distinct !{!8245, !8238, !8246}
!8246 = !DILocation(line: 6882, column: 30, scope: !8235)
!8247 = !DILocation(line: 6883, column: 5, scope: !8235)
!8248 = !DILocation(line: 6885, column: 13, scope: !8085)
!8249 = !DILocation(line: 6885, column: 11, scope: !8085)
!8250 = !DILocation(line: 6886, column: 34, scope: !8085)
!8251 = !DILocation(line: 6886, column: 32, scope: !8085)
!8252 = !DILocation(line: 6886, column: 25, scope: !8085)
!8253 = !DILocation(line: 6886, column: 10, scope: !8085)
!8254 = !DILocation(line: 6887, column: 13, scope: !8255)
!8255 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 6887, column: 5)
!8256 = !DILocation(line: 6887, column: 10, scope: !8255)
!8257 = !DILocation(line: 6887, column: 18, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 6887, column: 5)
!8259 = !DILocation(line: 6887, column: 33, scope: !8258)
!8260 = !DILocation(line: 6887, column: 21, scope: !8258)
!8261 = !DILocation(line: 6887, column: 5, scope: !8255)
!8262 = !DILocation(line: 6888, column: 13, scope: !8263)
!8263 = distinct !DILexicalBlock(scope: !8264, file: !3, line: 6888, column: 6)
!8264 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 6887, column: 46)
!8265 = !DILocation(line: 6888, column: 20, scope: !8263)
!8266 = !DILocation(line: 6888, column: 11, scope: !8263)
!8267 = !DILocation(line: 6888, column: 25, scope: !8263)
!8268 = !DILocation(line: 6888, column: 6, scope: !8264)
!8269 = !DILocation(line: 6888, column: 31, scope: !8263)
!8270 = !DILocation(line: 6889, column: 19, scope: !8264)
!8271 = !DILocation(line: 6889, column: 13, scope: !8264)
!8272 = !DILocation(line: 6889, column: 33, scope: !8264)
!8273 = !DILocation(line: 6889, column: 26, scope: !8264)
!8274 = !DILocation(line: 6889, column: 24, scope: !8264)
!8275 = !DILocation(line: 6889, column: 11, scope: !8264)
!8276 = !DILocation(line: 6890, column: 6, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !8264, file: !3, line: 6890, column: 6)
!8278 = !DILocation(line: 6890, column: 23, scope: !8277)
!8279 = !DILocation(line: 6890, column: 10, scope: !8277)
!8280 = !DILocation(line: 6890, column: 6, scope: !8264)
!8281 = !DILocation(line: 6891, column: 21, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !8283, file: !3, line: 6891, column: 6)
!8283 = distinct !DILexicalBlock(scope: !8277, file: !3, line: 6890, column: 34)
!8284 = !DILocation(line: 6891, column: 15, scope: !8282)
!8285 = !DILocation(line: 6891, column: 13, scope: !8282)
!8286 = !DILocation(line: 6891, column: 11, scope: !8282)
!8287 = !DILocation(line: 6891, column: 27, scope: !8288)
!8288 = distinct !DILexicalBlock(scope: !8282, file: !3, line: 6891, column: 6)
!8289 = !DILocation(line: 6891, column: 31, scope: !8288)
!8290 = !DILocation(line: 6891, column: 29, scope: !8288)
!8291 = !DILocation(line: 6891, column: 6, scope: !8282)
!8292 = !DILocation(line: 6891, column: 57, scope: !8288)
!8293 = !DILocation(line: 6891, column: 46, scope: !8288)
!8294 = !DILocation(line: 6891, column: 52, scope: !8288)
!8295 = !DILocation(line: 6891, column: 55, scope: !8288)
!8296 = !DILocation(line: 6891, column: 42, scope: !8288)
!8297 = !DILocation(line: 6891, column: 6, scope: !8288)
!8298 = distinct !{!8298, !8291, !8299}
!8299 = !DILocation(line: 6891, column: 57, scope: !8282)
!8300 = !DILocation(line: 6892, column: 2, scope: !8283)
!8301 = !DILocation(line: 6893, column: 16, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8277, file: !3, line: 6892, column: 9)
!8303 = !DILocation(line: 6893, column: 10, scope: !8302)
!8304 = !DILocation(line: 6893, column: 8, scope: !8302)
!8305 = !DILocation(line: 6894, column: 11, scope: !8302)
!8306 = !DILocation(line: 6894, column: 17, scope: !8302)
!8307 = !DILocation(line: 6894, column: 22, scope: !8302)
!8308 = !DILocation(line: 6894, column: 19, scope: !8302)
!8309 = !DILocation(line: 6894, column: 8, scope: !8302)
!8310 = !DILocation(line: 6895, column: 10, scope: !8302)
!8311 = !DILocation(line: 6895, column: 16, scope: !8302)
!8312 = !DILocation(line: 6895, column: 14, scope: !8302)
!8313 = !DILocation(line: 6895, column: 8, scope: !8302)
!8314 = !DILocation(line: 6896, column: 6, scope: !8302)
!8315 = !DILocation(line: 6896, column: 13, scope: !8302)
!8316 = !DILocation(line: 6896, column: 15, scope: !8302)
!8317 = !DILocation(line: 6897, column: 8, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8319, file: !3, line: 6897, column: 7)
!8319 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 6896, column: 21)
!8320 = !DILocation(line: 6897, column: 7, scope: !8318)
!8321 = !DILocation(line: 6897, column: 10, scope: !8318)
!8322 = !DILocation(line: 6897, column: 7, scope: !8319)
!8323 = !DILocation(line: 6898, column: 27, scope: !8324)
!8324 = distinct !DILexicalBlock(scope: !8318, file: !3, line: 6897, column: 16)
!8325 = !DILocation(line: 6898, column: 22, scope: !8324)
!8326 = !DILocation(line: 6898, column: 34, scope: !8324)
!8327 = !DILocation(line: 6898, column: 13, scope: !8324)
!8328 = !DILocation(line: 6898, column: 7, scope: !8324)
!8329 = !DILocation(line: 6898, column: 20, scope: !8324)
!8330 = !DILocation(line: 6899, column: 17, scope: !8324)
!8331 = !DILocation(line: 6899, column: 12, scope: !8324)
!8332 = !DILocation(line: 6899, column: 8, scope: !8324)
!8333 = !DILocation(line: 6899, column: 10, scope: !8324)
!8334 = !DILocation(line: 6900, column: 3, scope: !8324)
!8335 = !DILocation(line: 6901, column: 7, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8319, file: !3, line: 6901, column: 7)
!8337 = !DILocation(line: 6901, column: 11, scope: !8336)
!8338 = !DILocation(line: 6901, column: 9, scope: !8336)
!8339 = !DILocation(line: 6901, column: 7, scope: !8319)
!8340 = !DILocation(line: 6901, column: 29, scope: !8336)
!8341 = !DILocation(line: 6901, column: 28, scope: !8336)
!8342 = !DILocation(line: 6901, column: 22, scope: !8336)
!8343 = !DILocation(line: 6901, column: 19, scope: !8336)
!8344 = !DILocation(line: 6901, column: 17, scope: !8336)
!8345 = !DILocation(line: 6902, column: 28, scope: !8336)
!8346 = !DILocation(line: 6902, column: 27, scope: !8336)
!8347 = !DILocation(line: 6902, column: 22, scope: !8336)
!8348 = !DILocation(line: 6902, column: 19, scope: !8336)
!8349 = !DILocation(line: 6903, column: 5, scope: !8319)
!8350 = !DILocation(line: 6903, column: 14, scope: !8319)
!8351 = distinct !{!8351, !8314, !8352}
!8352 = !DILocation(line: 6904, column: 6, scope: !8302)
!8353 = !DILocation(line: 6905, column: 11, scope: !8302)
!8354 = !DILocation(line: 6905, column: 7, scope: !8302)
!8355 = !DILocation(line: 6905, column: 9, scope: !8302)
!8356 = !DILocation(line: 6907, column: 15, scope: !8264)
!8357 = !DILocation(line: 6907, column: 8, scope: !8264)
!8358 = !DILocation(line: 6907, column: 2, scope: !8264)
!8359 = !DILocation(line: 6907, column: 13, scope: !8264)
!8360 = !DILocation(line: 6908, column: 5, scope: !8264)
!8361 = !DILocation(line: 6887, column: 42, scope: !8258)
!8362 = !DILocation(line: 6887, column: 5, scope: !8258)
!8363 = distinct !{!8363, !8261, !8364}
!8364 = !DILocation(line: 6908, column: 5, scope: !8255)
!8365 = !DILocation(line: 6909, column: 1, scope: !8085)
!8366 = distinct !DISubprogram(name: "huf_decode_start", scope: !3, file: !3, line: 7028, type: !693, scopeLine: 7029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8367 = !DILocation(line: 7030, column: 5, scope: !8366)
!8368 = !DILocation(line: 7030, column: 32, scope: !8366)
!8369 = !DILocation(line: 7031, column: 1, scope: !8366)
!8370 = distinct !DISubprogram(name: "init_getbits", scope: !3, file: !3, line: 6841, type: !693, scopeLine: 6842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8371 = !DILocation(line: 6843, column: 15, scope: !8370)
!8372 = !DILocation(line: 6843, column: 31, scope: !8370)
!8373 = !DILocation(line: 6843, column: 46, scope: !8370)
!8374 = !DILocation(line: 6844, column: 5, scope: !8370)
!8375 = !DILocation(line: 6845, column: 1, scope: !8370)
!8376 = distinct !DISubprogram(name: "read_tree", scope: !3, file: !3, line: 7564, type: !693, scopeLine: 7565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8377 = !DILocalVariable(name: "len", scope: !8376, file: !3, line: 7566, type: !12)
!8378 = !DILocation(line: 7566, column: 9, scope: !8376)
!8379 = !DILocalVariable(name: "base", scope: !8376, file: !3, line: 7567, type: !12)
!8380 = !DILocation(line: 7567, column: 9, scope: !8376)
!8381 = !DILocalVariable(name: "n", scope: !8376, file: !3, line: 7568, type: !12)
!8382 = !DILocation(line: 7568, column: 9, scope: !8376)
!8383 = !DILocation(line: 7571, column: 14, scope: !8376)
!8384 = !DILocation(line: 7572, column: 12, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 7572, column: 5)
!8386 = !DILocation(line: 7572, column: 10, scope: !8385)
!8387 = !DILocation(line: 7572, column: 17, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8385, file: !3, line: 7572, column: 5)
!8389 = !DILocation(line: 7572, column: 19, scope: !8388)
!8390 = !DILocation(line: 7572, column: 5, scope: !8385)
!8391 = !DILocation(line: 7572, column: 42, scope: !8388)
!8392 = !DILocation(line: 7572, column: 51, scope: !8388)
!8393 = !DILocation(line: 7572, column: 64, scope: !8388)
!8394 = !DILocation(line: 7572, column: 59, scope: !8388)
!8395 = !DILocation(line: 7572, column: 57, scope: !8388)
!8396 = !DILocation(line: 7572, column: 39, scope: !8388)
!8397 = !DILocation(line: 7572, column: 30, scope: !8388)
!8398 = !DILocation(line: 7572, column: 26, scope: !8388)
!8399 = !DILocation(line: 7572, column: 5, scope: !8388)
!8400 = distinct !{!8400, !8390, !8401}
!8401 = !DILocation(line: 7572, column: 64, scope: !8385)
!8402 = !DILocation(line: 7574, column: 20, scope: !8376)
!8403 = !DILocation(line: 7574, column: 13, scope: !8376)
!8404 = !DILocation(line: 7575, column: 9, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 7575, column: 9)
!8406 = !DILocation(line: 7575, column: 17, scope: !8405)
!8407 = !DILocation(line: 7575, column: 9, scope: !8376)
!8408 = !DILocation(line: 7576, column: 2, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8405, file: !3, line: 7575, column: 31)
!8410 = !DILocation(line: 7577, column: 5, scope: !8409)
!8411 = !DILocation(line: 7580, column: 7, scope: !8376)
!8412 = !DILocation(line: 7581, column: 14, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 7581, column: 5)
!8414 = !DILocation(line: 7581, column: 10, scope: !8413)
!8415 = !DILocation(line: 7581, column: 19, scope: !8416)
!8416 = distinct !DILexicalBlock(scope: !8413, file: !3, line: 7581, column: 5)
!8417 = !DILocation(line: 7581, column: 26, scope: !8416)
!8418 = !DILocation(line: 7581, column: 23, scope: !8416)
!8419 = !DILocation(line: 7581, column: 5, scope: !8413)
!8420 = !DILocation(line: 7582, column: 21, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8416, file: !3, line: 7581, column: 42)
!8422 = !DILocation(line: 7582, column: 9, scope: !8421)
!8423 = !DILocation(line: 7582, column: 2, scope: !8421)
!8424 = !DILocation(line: 7582, column: 14, scope: !8421)
!8425 = !DILocation(line: 7583, column: 14, scope: !8421)
!8426 = !DILocation(line: 7583, column: 7, scope: !8421)
!8427 = !DILocation(line: 7583, column: 4, scope: !8421)
!8428 = !DILocation(line: 7584, column: 5, scope: !8421)
!8429 = !DILocation(line: 7581, column: 38, scope: !8416)
!8430 = !DILocation(line: 7581, column: 5, scope: !8416)
!8431 = distinct !{!8431, !8419, !8432}
!8432 = !DILocation(line: 7584, column: 5, scope: !8413)
!8433 = !DILocation(line: 7585, column: 9, scope: !8434)
!8434 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 7585, column: 9)
!8435 = !DILocation(line: 7585, column: 11, scope: !8434)
!8436 = !DILocation(line: 7585, column: 9, scope: !8376)
!8437 = !DILocation(line: 7586, column: 2, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8434, file: !3, line: 7585, column: 23)
!8439 = !DILocation(line: 7587, column: 5, scope: !8438)
!8440 = !DILocation(line: 7597, column: 12, scope: !8376)
!8441 = !DILocation(line: 7597, column: 5, scope: !8376)
!8442 = !DILocation(line: 7597, column: 20, scope: !8376)
!8443 = !DILocation(line: 7600, column: 10, scope: !8376)
!8444 = !DILocation(line: 7601, column: 14, scope: !8445)
!8445 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 7601, column: 5)
!8446 = !DILocation(line: 7601, column: 10, scope: !8445)
!8447 = !DILocation(line: 7601, column: 19, scope: !8448)
!8448 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 7601, column: 5)
!8449 = !DILocation(line: 7601, column: 26, scope: !8448)
!8450 = !DILocation(line: 7601, column: 23, scope: !8448)
!8451 = !DILocation(line: 7601, column: 5, scope: !8445)
!8452 = !DILocation(line: 7603, column: 18, scope: !8453)
!8453 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 7601, column: 42)
!8454 = !DILocation(line: 7603, column: 11, scope: !8453)
!8455 = !DILocation(line: 7603, column: 2, scope: !8453)
!8456 = !DILocation(line: 7603, column: 16, scope: !8453)
!8457 = !DILocation(line: 7605, column: 18, scope: !8458)
!8458 = distinct !DILexicalBlock(scope: !8453, file: !3, line: 7605, column: 2)
!8459 = !DILocation(line: 7605, column: 11, scope: !8458)
!8460 = !DILocation(line: 7605, column: 9, scope: !8458)
!8461 = !DILocation(line: 7605, column: 7, scope: !8458)
!8462 = !DILocation(line: 7605, column: 24, scope: !8463)
!8463 = distinct !DILexicalBlock(scope: !8458, file: !3, line: 7605, column: 2)
!8464 = !DILocation(line: 7605, column: 26, scope: !8463)
!8465 = !DILocation(line: 7605, column: 2, scope: !8458)
!8466 = !DILocation(line: 7606, column: 29, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8463, file: !3, line: 7605, column: 36)
!8468 = !DILocation(line: 7606, column: 24, scope: !8467)
!8469 = !DILocation(line: 7606, column: 18, scope: !8467)
!8470 = !DILocation(line: 7606, column: 6, scope: !8467)
!8471 = !DILocation(line: 7606, column: 22, scope: !8467)
!8472 = !DILocation(line: 7607, column: 2, scope: !8467)
!8473 = !DILocation(line: 7605, column: 32, scope: !8463)
!8474 = !DILocation(line: 7605, column: 2, scope: !8463)
!8475 = distinct !{!8475, !8465, !8476}
!8476 = !DILocation(line: 7607, column: 2, scope: !8458)
!8477 = !DILocation(line: 7608, column: 5, scope: !8453)
!8478 = !DILocation(line: 7601, column: 38, scope: !8448)
!8479 = !DILocation(line: 7601, column: 5, scope: !8448)
!8480 = distinct !{!8480, !8451, !8481}
!8481 = !DILocation(line: 7608, column: 5, scope: !8445)
!8482 = !DILocation(line: 7609, column: 12, scope: !8376)
!8483 = !DILocation(line: 7609, column: 5, scope: !8376)
!8484 = !DILocation(line: 7609, column: 20, scope: !8376)
!8485 = !DILocation(line: 7610, column: 1, scope: !8376)
!8486 = distinct !DISubprogram(name: "build_tree", scope: !3, file: !3, line: 7615, type: !693, scopeLine: 7616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8487 = !DILocalVariable(name: "nodes", scope: !8486, file: !3, line: 7617, type: !12)
!8488 = !DILocation(line: 7617, column: 9, scope: !8486)
!8489 = !DILocalVariable(name: "len", scope: !8486, file: !3, line: 7618, type: !12)
!8490 = !DILocation(line: 7618, column: 9, scope: !8486)
!8491 = !DILocalVariable(name: "prefixp", scope: !8486, file: !3, line: 7619, type: !85)
!8492 = !DILocation(line: 7619, column: 10, scope: !8486)
!8493 = !DILocation(line: 7621, column: 16, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8486, file: !3, line: 7621, column: 5)
!8495 = !DILocation(line: 7621, column: 14, scope: !8494)
!8496 = !DILocation(line: 7621, column: 10, scope: !8494)
!8497 = !DILocation(line: 7621, column: 25, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 7621, column: 5)
!8499 = !DILocation(line: 7621, column: 29, scope: !8498)
!8500 = !DILocation(line: 7621, column: 5, scope: !8494)
!8501 = !DILocation(line: 7625, column: 8, scope: !8502)
!8502 = distinct !DILexicalBlock(scope: !8498, file: !3, line: 7621, column: 42)
!8503 = !DILocation(line: 7626, column: 17, scope: !8502)
!8504 = !DILocation(line: 7626, column: 10, scope: !8502)
!8505 = !DILocation(line: 7626, column: 2, scope: !8502)
!8506 = !DILocation(line: 7626, column: 15, scope: !8502)
!8507 = !DILocation(line: 7630, column: 19, scope: !8502)
!8508 = !DILocation(line: 7630, column: 11, scope: !8502)
!8509 = !DILocation(line: 7630, column: 2, scope: !8502)
!8510 = !DILocation(line: 7630, column: 16, scope: !8502)
!8511 = !DILocation(line: 7632, column: 18, scope: !8502)
!8512 = !DILocation(line: 7632, column: 11, scope: !8502)
!8513 = !DILocation(line: 7632, column: 8, scope: !8502)
!8514 = !DILocation(line: 7633, column: 5, scope: !8502)
!8515 = !DILocation(line: 7621, column: 38, scope: !8498)
!8516 = !DILocation(line: 7621, column: 5, scope: !8498)
!8517 = distinct !{!8517, !8500, !8518}
!8518 = !DILocation(line: 7633, column: 5, scope: !8494)
!8519 = !DILocation(line: 7637, column: 17, scope: !8486)
!8520 = !DILocation(line: 7637, column: 15, scope: !8486)
!8521 = !DILocation(line: 7638, column: 30, scope: !8486)
!8522 = !DILocation(line: 7638, column: 28, scope: !8486)
!8523 = !DILocation(line: 7638, column: 16, scope: !8486)
!8524 = !DILocation(line: 7638, column: 13, scope: !8486)
!8525 = !DILocation(line: 7639, column: 14, scope: !8526)
!8526 = distinct !DILexicalBlock(scope: !8486, file: !3, line: 7639, column: 5)
!8527 = !DILocation(line: 7639, column: 10, scope: !8526)
!8528 = !DILocation(line: 7639, column: 19, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8526, file: !3, line: 7639, column: 5)
!8530 = !DILocation(line: 7639, column: 26, scope: !8529)
!8531 = !DILocation(line: 7639, column: 23, scope: !8529)
!8532 = !DILocation(line: 7639, column: 5, scope: !8526)
!8533 = !DILocalVariable(name: "prefixes", scope: !8534, file: !3, line: 7640, type: !12)
!8534 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 7639, column: 44)
!8535 = !DILocation(line: 7640, column: 6, scope: !8534)
!8536 = !DILocation(line: 7640, column: 24, scope: !8534)
!8537 = !DILocation(line: 7640, column: 17, scope: !8534)
!8538 = !DILocation(line: 7640, column: 33, scope: !8534)
!8539 = !DILocation(line: 7640, column: 43, scope: !8534)
!8540 = !DILocation(line: 7640, column: 42, scope: !8534)
!8541 = !DILocation(line: 7640, column: 29, scope: !8534)
!8542 = !DILocation(line: 7641, column: 2, scope: !8534)
!8543 = !DILocation(line: 7641, column: 17, scope: !8534)
!8544 = !DILocation(line: 7641, column: 39, scope: !8534)
!8545 = !DILocation(line: 7641, column: 34, scope: !8534)
!8546 = !DILocation(line: 7641, column: 22, scope: !8534)
!8547 = !DILocation(line: 7641, column: 32, scope: !8534)
!8548 = distinct !{!8548, !8542, !8544}
!8549 = !DILocation(line: 7642, column: 5, scope: !8534)
!8550 = !DILocation(line: 7639, column: 40, scope: !8529)
!8551 = !DILocation(line: 7639, column: 5, scope: !8529)
!8552 = distinct !{!8552, !8532, !8553}
!8553 = !DILocation(line: 7642, column: 5, scope: !8526)
!8554 = !DILocation(line: 7644, column: 5, scope: !8486)
!8555 = !DILocation(line: 7644, column: 12, scope: !8486)
!8556 = !DILocation(line: 7644, column: 20, scope: !8486)
!8557 = !DILocation(line: 7644, column: 35, scope: !8486)
!8558 = !DILocation(line: 7644, column: 45, scope: !8486)
!8559 = distinct !{!8559, !8554, !8560}
!8560 = !DILocation(line: 7644, column: 47, scope: !8486)
!8561 = !DILocation(line: 7645, column: 1, scope: !8486)
!8562 = distinct !DISubprogram(name: "inflate", scope: !3, file: !3, line: 5583, type: !2583, scopeLine: 5585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8563 = !DILocalVariable(name: "e", scope: !8562, file: !3, line: 5586, type: !12)
!8564 = !DILocation(line: 5586, column: 7, scope: !8562)
!8565 = !DILocalVariable(name: "r", scope: !8562, file: !3, line: 5587, type: !12)
!8566 = !DILocation(line: 5587, column: 7, scope: !8562)
!8567 = !DILocalVariable(name: "h", scope: !8562, file: !3, line: 5588, type: !6)
!8568 = !DILocation(line: 5588, column: 12, scope: !8562)
!8569 = !DILocation(line: 5592, column: 6, scope: !8562)
!8570 = !DILocation(line: 5593, column: 6, scope: !8562)
!8571 = !DILocation(line: 5594, column: 6, scope: !8562)
!8572 = !DILocation(line: 5598, column: 5, scope: !8562)
!8573 = !DILocation(line: 5599, column: 3, scope: !8562)
!8574 = !DILocation(line: 5600, column: 11, scope: !8575)
!8575 = distinct !DILexicalBlock(scope: !8562, file: !3, line: 5599, column: 6)
!8576 = !DILocation(line: 5601, column: 14, scope: !8577)
!8577 = distinct !DILexicalBlock(scope: !8575, file: !3, line: 5601, column: 9)
!8578 = !DILocation(line: 5601, column: 12, scope: !8577)
!8579 = !DILocation(line: 5601, column: 33, scope: !8577)
!8580 = !DILocation(line: 5601, column: 9, scope: !8575)
!8581 = !DILocation(line: 5602, column: 14, scope: !8577)
!8582 = !DILocation(line: 5602, column: 7, scope: !8577)
!8583 = !DILocation(line: 5603, column: 9, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8575, file: !3, line: 5603, column: 9)
!8585 = !DILocation(line: 5603, column: 17, scope: !8584)
!8586 = !DILocation(line: 5603, column: 15, scope: !8584)
!8587 = !DILocation(line: 5603, column: 9, scope: !8575)
!8588 = !DILocation(line: 5604, column: 11, scope: !8584)
!8589 = !DILocation(line: 5604, column: 9, scope: !8584)
!8590 = !DILocation(line: 5604, column: 7, scope: !8584)
!8591 = !DILocation(line: 5605, column: 3, scope: !8575)
!8592 = !DILocation(line: 5605, column: 13, scope: !8562)
!8593 = !DILocation(line: 5605, column: 12, scope: !8562)
!8594 = distinct !{!8594, !8573, !8595}
!8595 = !DILocation(line: 5605, column: 14, scope: !8562)
!8596 = !DILocation(line: 5610, column: 3, scope: !8562)
!8597 = !DILocation(line: 5610, column: 10, scope: !8562)
!8598 = !DILocation(line: 5610, column: 13, scope: !8562)
!8599 = !DILocation(line: 5611, column: 8, scope: !8600)
!8600 = distinct !DILexicalBlock(scope: !8562, file: !3, line: 5610, column: 19)
!8601 = !DILocation(line: 5612, column: 10, scope: !8600)
!8602 = distinct !{!8602, !8596, !8603}
!8603 = !DILocation(line: 5613, column: 3, scope: !8562)
!8604 = !DILocation(line: 5616, column: 3, scope: !8562)
!8605 = !DILocation(line: 5623, column: 3, scope: !8562)
!8606 = !DILocation(line: 5624, column: 1, scope: !8562)
!8607 = distinct !DISubprogram(name: "inflate_block", scope: !3, file: !3, line: 5535, type: !8608, scopeLine: 5538, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8608 = !DISubroutineType(types: !8609)
!8609 = !{!12, !33}
!8610 = !DILocalVariable(name: "e", arg: 1, scope: !8607, file: !3, line: 5536, type: !33)
!8611 = !DILocation(line: 5536, column: 6, scope: !8607)
!8612 = !DILocalVariable(name: "t", scope: !8607, file: !3, line: 5539, type: !6)
!8613 = !DILocation(line: 5539, column: 12, scope: !8607)
!8614 = !DILocalVariable(name: "w", scope: !8607, file: !3, line: 5540, type: !6)
!8615 = !DILocation(line: 5540, column: 12, scope: !8607)
!8616 = !DILocalVariable(name: "b", scope: !8607, file: !3, line: 5541, type: !51)
!8617 = !DILocation(line: 5541, column: 16, scope: !8607)
!8618 = !DILocalVariable(name: "k", scope: !8607, file: !3, line: 5542, type: !6)
!8619 = !DILocation(line: 5542, column: 21, scope: !8607)
!8620 = !DILocation(line: 5546, column: 7, scope: !8607)
!8621 = !DILocation(line: 5546, column: 5, scope: !8607)
!8622 = !DILocation(line: 5547, column: 7, scope: !8607)
!8623 = !DILocation(line: 5547, column: 5, scope: !8607)
!8624 = !DILocation(line: 5548, column: 7, scope: !8607)
!8625 = !DILocation(line: 5548, column: 5, scope: !8607)
!8626 = !DILocation(line: 5552, column: 3, scope: !8627)
!8627 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5552, column: 3)
!8628 = !DILocation(line: 5552, column: 3, scope: !8629)
!8629 = distinct !DILexicalBlock(scope: !8627, file: !3, line: 5552, column: 3)
!8630 = distinct !{!8630, !8626, !8626}
!8631 = !DILocation(line: 5553, column: 13, scope: !8607)
!8632 = !DILocation(line: 5553, column: 8, scope: !8607)
!8633 = !DILocation(line: 5553, column: 15, scope: !8607)
!8634 = !DILocation(line: 5553, column: 4, scope: !8607)
!8635 = !DILocation(line: 5553, column: 6, scope: !8607)
!8636 = !DILocation(line: 5554, column: 3, scope: !8637)
!8637 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5554, column: 3)
!8638 = !DILocation(line: 5558, column: 3, scope: !8639)
!8639 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5558, column: 3)
!8640 = !DILocation(line: 5558, column: 3, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 5558, column: 3)
!8642 = distinct !{!8642, !8638, !8638}
!8643 = !DILocation(line: 5559, column: 17, scope: !8607)
!8644 = !DILocation(line: 5559, column: 7, scope: !8607)
!8645 = !DILocation(line: 5559, column: 19, scope: !8607)
!8646 = !DILocation(line: 5559, column: 5, scope: !8607)
!8647 = !DILocation(line: 5560, column: 3, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5560, column: 3)
!8649 = !DILocation(line: 5564, column: 8, scope: !8607)
!8650 = !DILocation(line: 5564, column: 6, scope: !8607)
!8651 = !DILocation(line: 5565, column: 8, scope: !8607)
!8652 = !DILocation(line: 5565, column: 6, scope: !8607)
!8653 = !DILocation(line: 5569, column: 7, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5569, column: 7)
!8655 = !DILocation(line: 5569, column: 9, scope: !8654)
!8656 = !DILocation(line: 5569, column: 7, scope: !8607)
!8657 = !DILocation(line: 5570, column: 12, scope: !8654)
!8658 = !DILocation(line: 5570, column: 5, scope: !8654)
!8659 = !DILocation(line: 5571, column: 7, scope: !8660)
!8660 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5571, column: 7)
!8661 = !DILocation(line: 5571, column: 9, scope: !8660)
!8662 = !DILocation(line: 5571, column: 7, scope: !8607)
!8663 = !DILocation(line: 5572, column: 12, scope: !8660)
!8664 = !DILocation(line: 5572, column: 5, scope: !8660)
!8665 = !DILocation(line: 5573, column: 7, scope: !8666)
!8666 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 5573, column: 7)
!8667 = !DILocation(line: 5573, column: 9, scope: !8666)
!8668 = !DILocation(line: 5573, column: 7, scope: !8607)
!8669 = !DILocation(line: 5574, column: 12, scope: !8666)
!8670 = !DILocation(line: 5574, column: 5, scope: !8666)
!8671 = !DILocation(line: 5578, column: 3, scope: !8607)
!8672 = !DILocation(line: 5579, column: 1, scope: !8607)
!8673 = distinct !DISubprogram(name: "inflate_dynamic", scope: !3, file: !3, line: 5367, type: !2583, scopeLine: 5369, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!8674 = !DILocalVariable(name: "i", scope: !8673, file: !3, line: 5370, type: !12)
!8675 = !DILocation(line: 5370, column: 7, scope: !8673)
!8676 = !DILocalVariable(name: "j", scope: !8673, file: !3, line: 5371, type: !6)
!8677 = !DILocation(line: 5371, column: 12, scope: !8673)
!8678 = !DILocalVariable(name: "l", scope: !8673, file: !3, line: 5372, type: !6)
!8679 = !DILocation(line: 5372, column: 12, scope: !8673)
!8680 = !DILocalVariable(name: "m", scope: !8673, file: !3, line: 5373, type: !6)
!8681 = !DILocation(line: 5373, column: 12, scope: !8673)
!8682 = !DILocalVariable(name: "n", scope: !8673, file: !3, line: 5374, type: !6)
!8683 = !DILocation(line: 5374, column: 12, scope: !8673)
!8684 = !DILocalVariable(name: "w", scope: !8673, file: !3, line: 5375, type: !6)
!8685 = !DILocation(line: 5375, column: 12, scope: !8673)
!8686 = !DILocalVariable(name: "tl", scope: !8673, file: !3, line: 5376, type: !41)
!8687 = !DILocation(line: 5376, column: 16, scope: !8673)
!8688 = !DILocalVariable(name: "td", scope: !8673, file: !3, line: 5377, type: !41)
!8689 = !DILocation(line: 5377, column: 16, scope: !8673)
!8690 = !DILocalVariable(name: "bl", scope: !8673, file: !3, line: 5378, type: !12)
!8691 = !DILocation(line: 5378, column: 7, scope: !8673)
!8692 = !DILocalVariable(name: "bd", scope: !8673, file: !3, line: 5379, type: !12)
!8693 = !DILocation(line: 5379, column: 7, scope: !8673)
!8694 = !DILocalVariable(name: "nb", scope: !8673, file: !3, line: 5380, type: !6)
!8695 = !DILocation(line: 5380, column: 12, scope: !8673)
!8696 = !DILocalVariable(name: "nl", scope: !8673, file: !3, line: 5381, type: !6)
!8697 = !DILocation(line: 5381, column: 12, scope: !8673)
!8698 = !DILocalVariable(name: "nd", scope: !8673, file: !3, line: 5382, type: !6)
!8699 = !DILocation(line: 5382, column: 12, scope: !8673)
!8700 = !DILocalVariable(name: "ll", scope: !8673, file: !3, line: 5386, type: !241)
!8701 = !DILocation(line: 5386, column: 12, scope: !8673)
!8702 = !DILocalVariable(name: "b", scope: !8673, file: !3, line: 5388, type: !51)
!8703 = !DILocation(line: 5388, column: 16, scope: !8673)
!8704 = !DILocalVariable(name: "k", scope: !8673, file: !3, line: 5389, type: !6)
!8705 = !DILocation(line: 5389, column: 21, scope: !8673)
!8706 = !DILocation(line: 5393, column: 7, scope: !8673)
!8707 = !DILocation(line: 5393, column: 5, scope: !8673)
!8708 = !DILocation(line: 5394, column: 7, scope: !8673)
!8709 = !DILocation(line: 5394, column: 5, scope: !8673)
!8710 = !DILocation(line: 5395, column: 7, scope: !8673)
!8711 = !DILocation(line: 5395, column: 5, scope: !8673)
!8712 = !DILocation(line: 5399, column: 3, scope: !8713)
!8713 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5399, column: 3)
!8714 = !DILocation(line: 5399, column: 3, scope: !8715)
!8715 = distinct !DILexicalBlock(scope: !8713, file: !3, line: 5399, column: 3)
!8716 = distinct !{!8716, !8712, !8712}
!8717 = !DILocation(line: 5400, column: 25, scope: !8673)
!8718 = !DILocation(line: 5400, column: 15, scope: !8673)
!8719 = !DILocation(line: 5400, column: 27, scope: !8673)
!8720 = !DILocation(line: 5400, column: 12, scope: !8673)
!8721 = !DILocation(line: 5400, column: 6, scope: !8673)
!8722 = !DILocation(line: 5401, column: 3, scope: !8723)
!8723 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5401, column: 3)
!8724 = !DILocation(line: 5402, column: 3, scope: !8725)
!8725 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5402, column: 3)
!8726 = !DILocation(line: 5402, column: 3, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8725, file: !3, line: 5402, column: 3)
!8728 = distinct !{!8728, !8724, !8724}
!8729 = !DILocation(line: 5403, column: 23, scope: !8673)
!8730 = !DILocation(line: 5403, column: 13, scope: !8673)
!8731 = !DILocation(line: 5403, column: 25, scope: !8673)
!8732 = !DILocation(line: 5403, column: 10, scope: !8673)
!8733 = !DILocation(line: 5403, column: 6, scope: !8673)
!8734 = !DILocation(line: 5404, column: 3, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5404, column: 3)
!8736 = !DILocation(line: 5405, column: 3, scope: !8737)
!8737 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5405, column: 3)
!8738 = !DILocation(line: 5405, column: 3, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8737, file: !3, line: 5405, column: 3)
!8740 = distinct !{!8740, !8736, !8736}
!8741 = !DILocation(line: 5406, column: 23, scope: !8673)
!8742 = !DILocation(line: 5406, column: 13, scope: !8673)
!8743 = !DILocation(line: 5406, column: 25, scope: !8673)
!8744 = !DILocation(line: 5406, column: 10, scope: !8673)
!8745 = !DILocation(line: 5406, column: 6, scope: !8673)
!8746 = !DILocation(line: 5407, column: 3, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5407, column: 3)
!8748 = !DILocation(line: 5411, column: 7, scope: !8749)
!8749 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5411, column: 7)
!8750 = !DILocation(line: 5411, column: 10, scope: !8749)
!8751 = !DILocation(line: 5411, column: 16, scope: !8749)
!8752 = !DILocation(line: 5411, column: 19, scope: !8749)
!8753 = !DILocation(line: 5411, column: 22, scope: !8749)
!8754 = !DILocation(line: 5411, column: 7, scope: !8673)
!8755 = !DILocation(line: 5413, column: 5, scope: !8749)
!8756 = !DILocation(line: 5417, column: 10, scope: !8757)
!8757 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5417, column: 3)
!8758 = !DILocation(line: 5417, column: 8, scope: !8757)
!8759 = !DILocation(line: 5417, column: 15, scope: !8760)
!8760 = distinct !DILexicalBlock(scope: !8757, file: !3, line: 5417, column: 3)
!8761 = !DILocation(line: 5417, column: 19, scope: !8760)
!8762 = !DILocation(line: 5417, column: 17, scope: !8760)
!8763 = !DILocation(line: 5417, column: 3, scope: !8757)
!8764 = !DILocation(line: 5419, column: 5, scope: !8765)
!8765 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 5419, column: 5)
!8766 = distinct !DILexicalBlock(scope: !8760, file: !3, line: 5418, column: 3)
!8767 = !DILocation(line: 5419, column: 5, scope: !8768)
!8768 = distinct !DILexicalBlock(scope: !8765, file: !3, line: 5419, column: 5)
!8769 = distinct !{!8769, !8764, !8764}
!8770 = !DILocation(line: 5420, column: 31, scope: !8766)
!8771 = !DILocation(line: 5420, column: 21, scope: !8766)
!8772 = !DILocation(line: 5420, column: 33, scope: !8766)
!8773 = !DILocation(line: 5420, column: 15, scope: !8766)
!8774 = !DILocation(line: 5420, column: 8, scope: !8766)
!8775 = !DILocation(line: 5420, column: 5, scope: !8766)
!8776 = !DILocation(line: 5420, column: 19, scope: !8766)
!8777 = !DILocation(line: 5421, column: 5, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 5421, column: 5)
!8779 = !DILocation(line: 5422, column: 3, scope: !8766)
!8780 = !DILocation(line: 5417, column: 24, scope: !8760)
!8781 = !DILocation(line: 5417, column: 3, scope: !8760)
!8782 = distinct !{!8782, !8763, !8783}
!8783 = !DILocation(line: 5422, column: 3, scope: !8757)
!8784 = !DILocation(line: 5423, column: 3, scope: !8673)
!8785 = !DILocation(line: 5423, column: 10, scope: !8786)
!8786 = distinct !DILexicalBlock(scope: !8787, file: !3, line: 5423, column: 3)
!8787 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5423, column: 3)
!8788 = !DILocation(line: 5423, column: 12, scope: !8786)
!8789 = !DILocation(line: 5423, column: 3, scope: !8787)
!8790 = !DILocation(line: 5424, column: 15, scope: !8786)
!8791 = !DILocation(line: 5424, column: 8, scope: !8786)
!8792 = !DILocation(line: 5424, column: 5, scope: !8786)
!8793 = !DILocation(line: 5424, column: 19, scope: !8786)
!8794 = !DILocation(line: 5423, column: 19, scope: !8786)
!8795 = !DILocation(line: 5423, column: 3, scope: !8786)
!8796 = distinct !{!8796, !8789, !8797}
!8797 = !DILocation(line: 5424, column: 21, scope: !8787)
!8798 = !DILocation(line: 5428, column: 6, scope: !8673)
!8799 = !DILocation(line: 5429, column: 23, scope: !8800)
!8800 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5429, column: 7)
!8801 = !DILocation(line: 5429, column: 12, scope: !8800)
!8802 = !DILocation(line: 5429, column: 10, scope: !8800)
!8803 = !DILocation(line: 5429, column: 58, scope: !8800)
!8804 = !DILocation(line: 5429, column: 7, scope: !8673)
!8805 = !DILocation(line: 5431, column: 9, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 5431, column: 9)
!8807 = distinct !DILexicalBlock(scope: !8800, file: !3, line: 5430, column: 3)
!8808 = !DILocation(line: 5431, column: 11, scope: !8806)
!8809 = !DILocation(line: 5431, column: 9, scope: !8807)
!8810 = !DILocation(line: 5432, column: 17, scope: !8806)
!8811 = !DILocation(line: 5432, column: 7, scope: !8806)
!8812 = !DILocation(line: 5433, column: 12, scope: !8807)
!8813 = !DILocation(line: 5433, column: 5, scope: !8807)
!8814 = !DILocation(line: 5436, column: 7, scope: !8815)
!8815 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5436, column: 7)
!8816 = !DILocation(line: 5436, column: 10, scope: !8815)
!8817 = !DILocation(line: 5436, column: 7, scope: !8673)
!8818 = !DILocation(line: 5437, column: 2, scope: !8815)
!8819 = !DILocation(line: 5440, column: 7, scope: !8673)
!8820 = !DILocation(line: 5440, column: 12, scope: !8673)
!8821 = !DILocation(line: 5440, column: 10, scope: !8673)
!8822 = !DILocation(line: 5440, column: 5, scope: !8673)
!8823 = !DILocation(line: 5441, column: 17, scope: !8673)
!8824 = !DILocation(line: 5441, column: 7, scope: !8673)
!8825 = !DILocation(line: 5441, column: 5, scope: !8673)
!8826 = !DILocation(line: 5442, column: 9, scope: !8673)
!8827 = !DILocation(line: 5442, column: 5, scope: !8673)
!8828 = !DILocation(line: 5443, column: 3, scope: !8673)
!8829 = !DILocation(line: 5443, column: 20, scope: !8673)
!8830 = !DILocation(line: 5443, column: 24, scope: !8673)
!8831 = !DILocation(line: 5443, column: 22, scope: !8673)
!8832 = !DILocation(line: 5445, column: 5, scope: !8833)
!8833 = distinct !DILexicalBlock(scope: !8834, file: !3, line: 5445, column: 5)
!8834 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5444, column: 3)
!8835 = !DILocation(line: 5445, column: 5, scope: !8836)
!8836 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 5445, column: 5)
!8837 = distinct !{!8837, !8832, !8832}
!8838 = !DILocation(line: 5446, column: 15, scope: !8834)
!8839 = !DILocation(line: 5446, column: 31, scope: !8834)
!8840 = !DILocation(line: 5446, column: 21, scope: !8834)
!8841 = !DILocation(line: 5446, column: 35, scope: !8834)
!8842 = !DILocation(line: 5446, column: 33, scope: !8834)
!8843 = !DILocation(line: 5446, column: 18, scope: !8834)
!8844 = !DILocation(line: 5446, column: 13, scope: !8834)
!8845 = !DILocation(line: 5446, column: 40, scope: !8834)
!8846 = !DILocation(line: 5446, column: 9, scope: !8834)
!8847 = !DILocation(line: 5446, column: 7, scope: !8834)
!8848 = !DILocation(line: 5447, column: 5, scope: !8849)
!8849 = distinct !DILexicalBlock(scope: !8834, file: !3, line: 5447, column: 5)
!8850 = !DILocation(line: 5448, column: 9, scope: !8834)
!8851 = !DILocation(line: 5448, column: 13, scope: !8834)
!8852 = !DILocation(line: 5448, column: 15, scope: !8834)
!8853 = !DILocation(line: 5448, column: 7, scope: !8834)
!8854 = !DILocation(line: 5449, column: 9, scope: !8855)
!8855 = distinct !DILexicalBlock(scope: !8834, file: !3, line: 5449, column: 9)
!8856 = !DILocation(line: 5449, column: 11, scope: !8855)
!8857 = !DILocation(line: 5449, column: 9, scope: !8834)
!8858 = !DILocation(line: 5450, column: 21, scope: !8855)
!8859 = !DILocation(line: 5450, column: 19, scope: !8855)
!8860 = !DILocation(line: 5450, column: 11, scope: !8855)
!8861 = !DILocation(line: 5450, column: 7, scope: !8855)
!8862 = !DILocation(line: 5450, column: 15, scope: !8855)
!8863 = !DILocation(line: 5451, column: 14, scope: !8864)
!8864 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 5451, column: 14)
!8865 = !DILocation(line: 5451, column: 16, scope: !8864)
!8866 = !DILocation(line: 5451, column: 14, scope: !8855)
!8867 = !DILocation(line: 5453, column: 7, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 5453, column: 7)
!8869 = distinct !DILexicalBlock(scope: !8864, file: !3, line: 5452, column: 5)
!8870 = !DILocation(line: 5453, column: 7, scope: !8871)
!8871 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 5453, column: 7)
!8872 = distinct !{!8872, !8867, !8867}
!8873 = !DILocation(line: 5454, column: 26, scope: !8869)
!8874 = !DILocation(line: 5454, column: 16, scope: !8869)
!8875 = !DILocation(line: 5454, column: 28, scope: !8869)
!8876 = !DILocation(line: 5454, column: 13, scope: !8869)
!8877 = !DILocation(line: 5454, column: 9, scope: !8869)
!8878 = !DILocation(line: 5455, column: 7, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 5455, column: 7)
!8880 = !DILocation(line: 5456, column: 21, scope: !8881)
!8881 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 5456, column: 11)
!8882 = !DILocation(line: 5456, column: 25, scope: !8881)
!8883 = !DILocation(line: 5456, column: 23, scope: !8881)
!8884 = !DILocation(line: 5456, column: 29, scope: !8881)
!8885 = !DILocation(line: 5456, column: 27, scope: !8881)
!8886 = !DILocation(line: 5456, column: 11, scope: !8869)
!8887 = !DILocation(line: 5457, column: 9, scope: !8881)
!8888 = !DILocation(line: 5458, column: 7, scope: !8869)
!8889 = !DILocation(line: 5458, column: 15, scope: !8869)
!8890 = !DILocation(line: 5459, column: 19, scope: !8869)
!8891 = !DILocation(line: 5459, column: 13, scope: !8869)
!8892 = !DILocation(line: 5459, column: 9, scope: !8869)
!8893 = !DILocation(line: 5459, column: 17, scope: !8869)
!8894 = distinct !{!8894, !8888, !8890}
!8895 = !DILocation(line: 5460, column: 5, scope: !8869)
!8896 = !DILocation(line: 5461, column: 14, scope: !8897)
!8897 = distinct !DILexicalBlock(scope: !8864, file: !3, line: 5461, column: 14)
!8898 = !DILocation(line: 5461, column: 16, scope: !8897)
!8899 = !DILocation(line: 5461, column: 14, scope: !8864)
!8900 = !DILocation(line: 5463, column: 7, scope: !8901)
!8901 = distinct !DILexicalBlock(scope: !8902, file: !3, line: 5463, column: 7)
!8902 = distinct !DILexicalBlock(scope: !8897, file: !3, line: 5462, column: 5)
!8903 = !DILocation(line: 5463, column: 7, scope: !8904)
!8904 = distinct !DILexicalBlock(scope: !8901, file: !3, line: 5463, column: 7)
!8905 = distinct !{!8905, !8900, !8900}
!8906 = !DILocation(line: 5464, column: 26, scope: !8902)
!8907 = !DILocation(line: 5464, column: 16, scope: !8902)
!8908 = !DILocation(line: 5464, column: 28, scope: !8902)
!8909 = !DILocation(line: 5464, column: 13, scope: !8902)
!8910 = !DILocation(line: 5464, column: 9, scope: !8902)
!8911 = !DILocation(line: 5465, column: 7, scope: !8912)
!8912 = distinct !DILexicalBlock(scope: !8902, file: !3, line: 5465, column: 7)
!8913 = !DILocation(line: 5466, column: 21, scope: !8914)
!8914 = distinct !DILexicalBlock(scope: !8902, file: !3, line: 5466, column: 11)
!8915 = !DILocation(line: 5466, column: 25, scope: !8914)
!8916 = !DILocation(line: 5466, column: 23, scope: !8914)
!8917 = !DILocation(line: 5466, column: 29, scope: !8914)
!8918 = !DILocation(line: 5466, column: 27, scope: !8914)
!8919 = !DILocation(line: 5466, column: 11, scope: !8902)
!8920 = !DILocation(line: 5467, column: 9, scope: !8914)
!8921 = !DILocation(line: 5468, column: 7, scope: !8902)
!8922 = !DILocation(line: 5468, column: 15, scope: !8902)
!8923 = !DILocation(line: 5469, column: 13, scope: !8902)
!8924 = !DILocation(line: 5469, column: 9, scope: !8902)
!8925 = !DILocation(line: 5469, column: 17, scope: !8902)
!8926 = distinct !{!8926, !8921, !8927}
!8927 = !DILocation(line: 5469, column: 19, scope: !8902)
!8928 = !DILocation(line: 5470, column: 9, scope: !8902)
!8929 = !DILocation(line: 5471, column: 5, scope: !8902)
!8930 = !DILocation(line: 5474, column: 7, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 5474, column: 7)
!8932 = distinct !DILexicalBlock(scope: !8897, file: !3, line: 5473, column: 5)
!8933 = !DILocation(line: 5474, column: 7, scope: !8934)
!8934 = distinct !DILexicalBlock(scope: !8931, file: !3, line: 5474, column: 7)
!8935 = distinct !{!8935, !8930, !8930}
!8936 = !DILocation(line: 5475, column: 27, scope: !8932)
!8937 = !DILocation(line: 5475, column: 17, scope: !8932)
!8938 = !DILocation(line: 5475, column: 29, scope: !8932)
!8939 = !DILocation(line: 5475, column: 14, scope: !8932)
!8940 = !DILocation(line: 5475, column: 9, scope: !8932)
!8941 = !DILocation(line: 5476, column: 7, scope: !8942)
!8942 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 5476, column: 7)
!8943 = !DILocation(line: 5477, column: 21, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 5477, column: 11)
!8945 = !DILocation(line: 5477, column: 25, scope: !8944)
!8946 = !DILocation(line: 5477, column: 23, scope: !8944)
!8947 = !DILocation(line: 5477, column: 29, scope: !8944)
!8948 = !DILocation(line: 5477, column: 27, scope: !8944)
!8949 = !DILocation(line: 5477, column: 11, scope: !8932)
!8950 = !DILocation(line: 5478, column: 9, scope: !8944)
!8951 = !DILocation(line: 5479, column: 7, scope: !8932)
!8952 = !DILocation(line: 5479, column: 15, scope: !8932)
!8953 = !DILocation(line: 5480, column: 13, scope: !8932)
!8954 = !DILocation(line: 5480, column: 9, scope: !8932)
!8955 = !DILocation(line: 5480, column: 17, scope: !8932)
!8956 = distinct !{!8956, !8951, !8957}
!8957 = !DILocation(line: 5480, column: 19, scope: !8932)
!8958 = !DILocation(line: 5481, column: 9, scope: !8932)
!8959 = distinct !{!8959, !8828, !8960}
!8960 = !DILocation(line: 5483, column: 3, scope: !8673)
!8961 = !DILocation(line: 5487, column: 13, scope: !8673)
!8962 = !DILocation(line: 5487, column: 3, scope: !8673)
!8963 = !DILocation(line: 5491, column: 8, scope: !8673)
!8964 = !DILocation(line: 5491, column: 6, scope: !8673)
!8965 = !DILocation(line: 5492, column: 8, scope: !8673)
!8966 = !DILocation(line: 5492, column: 6, scope: !8673)
!8967 = !DILocation(line: 5496, column: 8, scope: !8673)
!8968 = !DILocation(line: 5496, column: 6, scope: !8673)
!8969 = !DILocation(line: 5497, column: 23, scope: !8970)
!8970 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5497, column: 7)
!8971 = !DILocation(line: 5497, column: 27, scope: !8970)
!8972 = !DILocation(line: 5497, column: 12, scope: !8970)
!8973 = !DILocation(line: 5497, column: 10, scope: !8970)
!8974 = !DILocation(line: 5497, column: 63, scope: !8970)
!8975 = !DILocation(line: 5497, column: 7, scope: !8673)
!8976 = !DILocation(line: 5499, column: 9, scope: !8977)
!8977 = distinct !DILexicalBlock(scope: !8978, file: !3, line: 5499, column: 9)
!8978 = distinct !DILexicalBlock(scope: !8970, file: !3, line: 5498, column: 3)
!8979 = !DILocation(line: 5499, column: 11, scope: !8977)
!8980 = !DILocation(line: 5499, column: 9, scope: !8978)
!8981 = !DILocation(line: 5500, column: 15, scope: !8982)
!8982 = distinct !DILexicalBlock(scope: !8977, file: !3, line: 5499, column: 17)
!8983 = !DILocation(line: 5500, column: 7, scope: !8982)
!8984 = !DILocation(line: 5501, column: 17, scope: !8982)
!8985 = !DILocation(line: 5501, column: 7, scope: !8982)
!8986 = !DILocation(line: 5502, column: 5, scope: !8982)
!8987 = !DILocation(line: 5503, column: 12, scope: !8978)
!8988 = !DILocation(line: 5503, column: 5, scope: !8978)
!8989 = !DILocation(line: 5505, column: 8, scope: !8673)
!8990 = !DILocation(line: 5505, column: 6, scope: !8673)
!8991 = !DILocation(line: 5506, column: 23, scope: !8992)
!8992 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5506, column: 7)
!8993 = !DILocation(line: 5506, column: 28, scope: !8992)
!8994 = !DILocation(line: 5506, column: 26, scope: !8992)
!8995 = !DILocation(line: 5506, column: 32, scope: !8992)
!8996 = !DILocation(line: 5506, column: 12, scope: !8992)
!8997 = !DILocation(line: 5506, column: 10, scope: !8992)
!8998 = !DILocation(line: 5506, column: 66, scope: !8992)
!8999 = !DILocation(line: 5506, column: 7, scope: !8673)
!9000 = !DILocation(line: 5508, column: 9, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !9002, file: !3, line: 5508, column: 9)
!9002 = distinct !DILexicalBlock(scope: !8992, file: !3, line: 5507, column: 3)
!9003 = !DILocation(line: 5508, column: 11, scope: !9001)
!9004 = !DILocation(line: 5508, column: 9, scope: !9002)
!9005 = !DILocation(line: 5509, column: 15, scope: !9006)
!9006 = distinct !DILexicalBlock(scope: !9001, file: !3, line: 5508, column: 17)
!9007 = !DILocation(line: 5509, column: 7, scope: !9006)
!9008 = !DILocation(line: 5514, column: 17, scope: !9006)
!9009 = !DILocation(line: 5514, column: 7, scope: !9006)
!9010 = !DILocation(line: 5515, column: 5, scope: !9006)
!9011 = !DILocation(line: 5516, column: 15, scope: !9002)
!9012 = !DILocation(line: 5516, column: 5, scope: !9002)
!9013 = !DILocation(line: 5517, column: 12, scope: !9002)
!9014 = !DILocation(line: 5517, column: 5, scope: !9002)
!9015 = !DILocation(line: 5523, column: 21, scope: !9016)
!9016 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 5523, column: 7)
!9017 = !DILocation(line: 5523, column: 25, scope: !9016)
!9018 = !DILocation(line: 5523, column: 29, scope: !9016)
!9019 = !DILocation(line: 5523, column: 33, scope: !9016)
!9020 = !DILocation(line: 5523, column: 7, scope: !9016)
!9021 = !DILocation(line: 5523, column: 7, scope: !8673)
!9022 = !DILocation(line: 5524, column: 5, scope: !9016)
!9023 = !DILocation(line: 5528, column: 13, scope: !8673)
!9024 = !DILocation(line: 5528, column: 3, scope: !8673)
!9025 = !DILocation(line: 5529, column: 13, scope: !8673)
!9026 = !DILocation(line: 5529, column: 3, scope: !8673)
!9027 = !DILocation(line: 5530, column: 3, scope: !8673)
!9028 = !DILocation(line: 5531, column: 1, scope: !8673)
!9029 = distinct !DISubprogram(name: "inflate_stored", scope: !3, file: !3, line: 5263, type: !2583, scopeLine: 5265, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!9030 = !DILocalVariable(name: "n", scope: !9029, file: !3, line: 5266, type: !6)
!9031 = !DILocation(line: 5266, column: 12, scope: !9029)
!9032 = !DILocalVariable(name: "w", scope: !9029, file: !3, line: 5267, type: !6)
!9033 = !DILocation(line: 5267, column: 12, scope: !9029)
!9034 = !DILocalVariable(name: "b", scope: !9029, file: !3, line: 5268, type: !51)
!9035 = !DILocation(line: 5268, column: 16, scope: !9029)
!9036 = !DILocalVariable(name: "k", scope: !9029, file: !3, line: 5269, type: !6)
!9037 = !DILocation(line: 5269, column: 21, scope: !9029)
!9038 = !DILocation(line: 5273, column: 7, scope: !9029)
!9039 = !DILocation(line: 5273, column: 5, scope: !9029)
!9040 = !DILocation(line: 5274, column: 7, scope: !9029)
!9041 = !DILocation(line: 5274, column: 5, scope: !9029)
!9042 = !DILocation(line: 5275, column: 7, scope: !9029)
!9043 = !DILocation(line: 5275, column: 5, scope: !9029)
!9044 = !DILocation(line: 5279, column: 7, scope: !9029)
!9045 = !DILocation(line: 5279, column: 9, scope: !9029)
!9046 = !DILocation(line: 5279, column: 5, scope: !9029)
!9047 = !DILocation(line: 5280, column: 3, scope: !9048)
!9048 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5280, column: 3)
!9049 = !DILocation(line: 5284, column: 3, scope: !9050)
!9050 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5284, column: 3)
!9051 = !DILocation(line: 5284, column: 3, scope: !9052)
!9052 = distinct !DILexicalBlock(scope: !9050, file: !3, line: 5284, column: 3)
!9053 = distinct !{!9053, !9049, !9049}
!9054 = !DILocation(line: 5285, column: 18, scope: !9029)
!9055 = !DILocation(line: 5285, column: 8, scope: !9029)
!9056 = !DILocation(line: 5285, column: 20, scope: !9029)
!9057 = !DILocation(line: 5285, column: 5, scope: !9029)
!9058 = !DILocation(line: 5286, column: 3, scope: !9059)
!9059 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5286, column: 3)
!9060 = !DILocation(line: 5287, column: 3, scope: !9061)
!9061 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5287, column: 3)
!9062 = !DILocation(line: 5287, column: 3, scope: !9063)
!9063 = distinct !DILexicalBlock(scope: !9061, file: !3, line: 5287, column: 3)
!9064 = distinct !{!9064, !9060, !9060}
!9065 = !DILocation(line: 5288, column: 7, scope: !9066)
!9066 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5288, column: 7)
!9067 = !DILocation(line: 5288, column: 25, scope: !9066)
!9068 = !DILocation(line: 5288, column: 24, scope: !9066)
!9069 = !DILocation(line: 5288, column: 28, scope: !9066)
!9070 = !DILocation(line: 5288, column: 12, scope: !9066)
!9071 = !DILocation(line: 5288, column: 9, scope: !9066)
!9072 = !DILocation(line: 5288, column: 7, scope: !9029)
!9073 = !DILocation(line: 5289, column: 5, scope: !9066)
!9074 = !DILocation(line: 5290, column: 3, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5290, column: 3)
!9076 = !DILocation(line: 5294, column: 3, scope: !9029)
!9077 = !DILocation(line: 5294, column: 11, scope: !9029)
!9078 = !DILocation(line: 5296, column: 5, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 5296, column: 5)
!9080 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 5295, column: 3)
!9081 = !DILocation(line: 5296, column: 5, scope: !9082)
!9082 = distinct !DILexicalBlock(scope: !9079, file: !3, line: 5296, column: 5)
!9083 = distinct !{!9083, !9078, !9078}
!9084 = !DILocation(line: 5297, column: 23, scope: !9080)
!9085 = !DILocation(line: 5297, column: 18, scope: !9080)
!9086 = !DILocation(line: 5297, column: 12, scope: !9080)
!9087 = !DILocation(line: 5297, column: 5, scope: !9080)
!9088 = !DILocation(line: 5297, column: 16, scope: !9080)
!9089 = !DILocation(line: 5298, column: 9, scope: !9090)
!9090 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 5298, column: 9)
!9091 = !DILocation(line: 5298, column: 11, scope: !9090)
!9092 = !DILocation(line: 5298, column: 9, scope: !9080)
!9093 = !DILocation(line: 5300, column: 7, scope: !9094)
!9094 = distinct !DILexicalBlock(scope: !9090, file: !3, line: 5299, column: 5)
!9095 = !DILocation(line: 5301, column: 9, scope: !9094)
!9096 = !DILocation(line: 5302, column: 5, scope: !9094)
!9097 = !DILocation(line: 5303, column: 5, scope: !9098)
!9098 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 5303, column: 5)
!9099 = distinct !{!9099, !9076, !9100}
!9100 = !DILocation(line: 5304, column: 3, scope: !9029)
!9101 = !DILocation(line: 5308, column: 8, scope: !9029)
!9102 = !DILocation(line: 5308, column: 6, scope: !9029)
!9103 = !DILocation(line: 5309, column: 8, scope: !9029)
!9104 = !DILocation(line: 5309, column: 6, scope: !9029)
!9105 = !DILocation(line: 5310, column: 8, scope: !9029)
!9106 = !DILocation(line: 5310, column: 6, scope: !9029)
!9107 = !DILocation(line: 5311, column: 3, scope: !9029)
!9108 = !DILocation(line: 5312, column: 1, scope: !9029)
!9109 = distinct !DISubprogram(name: "inflate_fixed", scope: !3, file: !3, line: 5316, type: !2583, scopeLine: 5320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!9110 = !DILocalVariable(name: "i", scope: !9109, file: !3, line: 5321, type: !12)
!9111 = !DILocation(line: 5321, column: 7, scope: !9109)
!9112 = !DILocalVariable(name: "tl", scope: !9109, file: !3, line: 5322, type: !41)
!9113 = !DILocation(line: 5322, column: 16, scope: !9109)
!9114 = !DILocalVariable(name: "td", scope: !9109, file: !3, line: 5323, type: !41)
!9115 = !DILocation(line: 5323, column: 16, scope: !9109)
!9116 = !DILocalVariable(name: "bl", scope: !9109, file: !3, line: 5324, type: !12)
!9117 = !DILocation(line: 5324, column: 7, scope: !9109)
!9118 = !DILocalVariable(name: "bd", scope: !9109, file: !3, line: 5325, type: !12)
!9119 = !DILocation(line: 5325, column: 7, scope: !9109)
!9120 = !DILocalVariable(name: "l", scope: !9109, file: !3, line: 5326, type: !228)
!9121 = !DILocation(line: 5326, column: 12, scope: !9109)
!9122 = !DILocation(line: 5330, column: 10, scope: !9123)
!9123 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5330, column: 3)
!9124 = !DILocation(line: 5330, column: 8, scope: !9123)
!9125 = !DILocation(line: 5330, column: 15, scope: !9126)
!9126 = distinct !DILexicalBlock(scope: !9123, file: !3, line: 5330, column: 3)
!9127 = !DILocation(line: 5330, column: 17, scope: !9126)
!9128 = !DILocation(line: 5330, column: 3, scope: !9123)
!9129 = !DILocation(line: 5331, column: 7, scope: !9126)
!9130 = !DILocation(line: 5331, column: 5, scope: !9126)
!9131 = !DILocation(line: 5331, column: 10, scope: !9126)
!9132 = !DILocation(line: 5330, column: 25, scope: !9126)
!9133 = !DILocation(line: 5330, column: 3, scope: !9126)
!9134 = distinct !{!9134, !9128, !9135}
!9135 = !DILocation(line: 5331, column: 12, scope: !9123)
!9136 = !DILocation(line: 5332, column: 3, scope: !9109)
!9137 = !DILocation(line: 5332, column: 10, scope: !9138)
!9138 = distinct !DILexicalBlock(scope: !9139, file: !3, line: 5332, column: 3)
!9139 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5332, column: 3)
!9140 = !DILocation(line: 5332, column: 12, scope: !9138)
!9141 = !DILocation(line: 5332, column: 3, scope: !9139)
!9142 = !DILocation(line: 5333, column: 7, scope: !9138)
!9143 = !DILocation(line: 5333, column: 5, scope: !9138)
!9144 = !DILocation(line: 5333, column: 10, scope: !9138)
!9145 = !DILocation(line: 5332, column: 20, scope: !9138)
!9146 = !DILocation(line: 5332, column: 3, scope: !9138)
!9147 = distinct !{!9147, !9141, !9148}
!9148 = !DILocation(line: 5333, column: 12, scope: !9139)
!9149 = !DILocation(line: 5334, column: 3, scope: !9109)
!9150 = !DILocation(line: 5334, column: 10, scope: !9151)
!9151 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 5334, column: 3)
!9152 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5334, column: 3)
!9153 = !DILocation(line: 5334, column: 12, scope: !9151)
!9154 = !DILocation(line: 5334, column: 3, scope: !9152)
!9155 = !DILocation(line: 5335, column: 7, scope: !9151)
!9156 = !DILocation(line: 5335, column: 5, scope: !9151)
!9157 = !DILocation(line: 5335, column: 10, scope: !9151)
!9158 = !DILocation(line: 5334, column: 20, scope: !9151)
!9159 = !DILocation(line: 5334, column: 3, scope: !9151)
!9160 = distinct !{!9160, !9154, !9161}
!9161 = !DILocation(line: 5335, column: 12, scope: !9152)
!9162 = !DILocation(line: 5336, column: 3, scope: !9109)
!9163 = !DILocation(line: 5336, column: 10, scope: !9164)
!9164 = distinct !DILexicalBlock(scope: !9165, file: !3, line: 5336, column: 3)
!9165 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5336, column: 3)
!9166 = !DILocation(line: 5336, column: 12, scope: !9164)
!9167 = !DILocation(line: 5336, column: 3, scope: !9165)
!9168 = !DILocation(line: 5337, column: 7, scope: !9164)
!9169 = !DILocation(line: 5337, column: 5, scope: !9164)
!9170 = !DILocation(line: 5337, column: 10, scope: !9164)
!9171 = !DILocation(line: 5336, column: 20, scope: !9164)
!9172 = !DILocation(line: 5336, column: 3, scope: !9164)
!9173 = distinct !{!9173, !9167, !9174}
!9174 = !DILocation(line: 5337, column: 12, scope: !9165)
!9175 = !DILocation(line: 5338, column: 6, scope: !9109)
!9176 = !DILocation(line: 5339, column: 23, scope: !9177)
!9177 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5339, column: 7)
!9178 = !DILocation(line: 5339, column: 12, scope: !9177)
!9179 = !DILocation(line: 5339, column: 10, scope: !9177)
!9180 = !DILocation(line: 5339, column: 63, scope: !9177)
!9181 = !DILocation(line: 5339, column: 7, scope: !9109)
!9182 = !DILocation(line: 5340, column: 12, scope: !9177)
!9183 = !DILocation(line: 5340, column: 5, scope: !9177)
!9184 = !DILocation(line: 5344, column: 10, scope: !9185)
!9185 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5344, column: 3)
!9186 = !DILocation(line: 5344, column: 8, scope: !9185)
!9187 = !DILocation(line: 5344, column: 15, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9185, file: !3, line: 5344, column: 3)
!9189 = !DILocation(line: 5344, column: 17, scope: !9188)
!9190 = !DILocation(line: 5344, column: 3, scope: !9185)
!9191 = !DILocation(line: 5345, column: 7, scope: !9188)
!9192 = !DILocation(line: 5345, column: 5, scope: !9188)
!9193 = !DILocation(line: 5345, column: 10, scope: !9188)
!9194 = !DILocation(line: 5344, column: 24, scope: !9188)
!9195 = !DILocation(line: 5344, column: 3, scope: !9188)
!9196 = distinct !{!9196, !9190, !9197}
!9197 = !DILocation(line: 5345, column: 12, scope: !9185)
!9198 = !DILocation(line: 5346, column: 6, scope: !9109)
!9199 = !DILocation(line: 5347, column: 23, scope: !9200)
!9200 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5347, column: 7)
!9201 = !DILocation(line: 5347, column: 12, scope: !9200)
!9202 = !DILocation(line: 5347, column: 10, scope: !9200)
!9203 = !DILocation(line: 5347, column: 60, scope: !9200)
!9204 = !DILocation(line: 5347, column: 7, scope: !9109)
!9205 = !DILocation(line: 5349, column: 15, scope: !9206)
!9206 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 5348, column: 3)
!9207 = !DILocation(line: 5349, column: 5, scope: !9206)
!9208 = !DILocation(line: 5350, column: 12, scope: !9206)
!9209 = !DILocation(line: 5350, column: 5, scope: !9206)
!9210 = !DILocation(line: 5355, column: 21, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5355, column: 7)
!9212 = !DILocation(line: 5355, column: 25, scope: !9211)
!9213 = !DILocation(line: 5355, column: 29, scope: !9211)
!9214 = !DILocation(line: 5355, column: 33, scope: !9211)
!9215 = !DILocation(line: 5355, column: 7, scope: !9211)
!9216 = !DILocation(line: 5355, column: 7, scope: !9109)
!9217 = !DILocation(line: 5356, column: 5, scope: !9211)
!9218 = !DILocation(line: 5360, column: 13, scope: !9109)
!9219 = !DILocation(line: 5360, column: 3, scope: !9109)
!9220 = !DILocation(line: 5361, column: 13, scope: !9109)
!9221 = !DILocation(line: 5361, column: 3, scope: !9109)
!9222 = !DILocation(line: 5362, column: 3, scope: !9109)
!9223 = !DILocation(line: 5363, column: 1, scope: !9109)
!9224 = distinct !DISubprogram(name: "huft_build", scope: !3, file: !3, line: 4933, type: !9225, scopeLine: 4946, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!9225 = !DISubroutineType(types: !9226)
!9226 = !{!12, !224, !6, !6, !166, !166, !9227, !33}
!9227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!9228 = !DILocalVariable(name: "b", arg: 1, scope: !9224, file: !3, line: 4934, type: !224)
!9229 = !DILocation(line: 4934, column: 11, scope: !9224)
!9230 = !DILocalVariable(name: "n", arg: 2, scope: !9224, file: !3, line: 4935, type: !6)
!9231 = !DILocation(line: 4935, column: 10, scope: !9224)
!9232 = !DILocalVariable(name: "s", arg: 3, scope: !9224, file: !3, line: 4936, type: !6)
!9233 = !DILocation(line: 4936, column: 10, scope: !9224)
!9234 = !DILocalVariable(name: "d", arg: 4, scope: !9224, file: !3, line: 4937, type: !166)
!9235 = !DILocation(line: 4937, column: 6, scope: !9224)
!9236 = !DILocalVariable(name: "e", arg: 5, scope: !9224, file: !3, line: 4938, type: !166)
!9237 = !DILocation(line: 4938, column: 6, scope: !9224)
!9238 = !DILocalVariable(name: "t", arg: 6, scope: !9224, file: !3, line: 4939, type: !9227)
!9239 = !DILocation(line: 4939, column: 15, scope: !9224)
!9240 = !DILocalVariable(name: "m", arg: 7, scope: !9224, file: !3, line: 4940, type: !33)
!9241 = !DILocation(line: 4940, column: 6, scope: !9224)
!9242 = !DILocalVariable(name: "a", scope: !9224, file: !3, line: 4947, type: !6)
!9243 = !DILocation(line: 4947, column: 12, scope: !9224)
!9244 = !DILocalVariable(name: "c", scope: !9224, file: !3, line: 4948, type: !223)
!9245 = !DILocation(line: 4948, column: 12, scope: !9224)
!9246 = !DILocalVariable(name: "f", scope: !9224, file: !3, line: 4949, type: !6)
!9247 = !DILocation(line: 4949, column: 12, scope: !9224)
!9248 = !DILocalVariable(name: "g", scope: !9224, file: !3, line: 4950, type: !12)
!9249 = !DILocation(line: 4950, column: 7, scope: !9224)
!9250 = !DILocalVariable(name: "h", scope: !9224, file: !3, line: 4951, type: !12)
!9251 = !DILocation(line: 4951, column: 7, scope: !9224)
!9252 = !DILocalVariable(name: "i", scope: !9224, file: !3, line: 4952, type: !6)
!9253 = !DILocation(line: 4952, column: 21, scope: !9224)
!9254 = !DILocalVariable(name: "j", scope: !9224, file: !3, line: 4953, type: !6)
!9255 = !DILocation(line: 4953, column: 21, scope: !9224)
!9256 = !DILocalVariable(name: "k", scope: !9224, file: !3, line: 4954, type: !12)
!9257 = !DILocation(line: 4954, column: 16, scope: !9224)
!9258 = !DILocalVariable(name: "l", scope: !9224, file: !3, line: 4955, type: !12)
!9259 = !DILocation(line: 4955, column: 7, scope: !9224)
!9260 = !DILocalVariable(name: "p", scope: !9224, file: !3, line: 4956, type: !224)
!9261 = !DILocation(line: 4956, column: 22, scope: !9224)
!9262 = !DILocalVariable(name: "q", scope: !9224, file: !3, line: 4957, type: !41)
!9263 = !DILocation(line: 4957, column: 25, scope: !9224)
!9264 = !DILocalVariable(name: "r", scope: !9224, file: !3, line: 4958, type: !42)
!9265 = !DILocation(line: 4958, column: 15, scope: !9224)
!9266 = !DILocalVariable(name: "u", scope: !9224, file: !3, line: 4959, type: !225)
!9267 = !DILocation(line: 4959, column: 16, scope: !9224)
!9268 = !DILocalVariable(name: "v", scope: !9224, file: !3, line: 4960, type: !228)
!9269 = !DILocation(line: 4960, column: 12, scope: !9224)
!9270 = !DILocalVariable(name: "w", scope: !9224, file: !3, line: 4961, type: !12)
!9271 = !DILocation(line: 4961, column: 16, scope: !9224)
!9272 = !DILocalVariable(name: "x", scope: !9224, file: !3, line: 4962, type: !223)
!9273 = !DILocation(line: 4962, column: 12, scope: !9224)
!9274 = !DILocalVariable(name: "xp", scope: !9224, file: !3, line: 4963, type: !224)
!9275 = !DILocation(line: 4963, column: 13, scope: !9224)
!9276 = !DILocalVariable(name: "y", scope: !9224, file: !3, line: 4964, type: !12)
!9277 = !DILocation(line: 4964, column: 7, scope: !9224)
!9278 = !DILocalVariable(name: "z", scope: !9224, file: !3, line: 4965, type: !6)
!9279 = !DILocation(line: 4965, column: 12, scope: !9224)
!9280 = !DILocation(line: 4969, column: 3, scope: !9224)
!9281 = !DILocation(line: 4970, column: 7, scope: !9224)
!9282 = !DILocation(line: 4970, column: 5, scope: !9224)
!9283 = !DILocation(line: 4970, column: 15, scope: !9224)
!9284 = !DILocation(line: 4970, column: 13, scope: !9224)
!9285 = !DILocation(line: 4971, column: 3, scope: !9224)
!9286 = !DILocation(line: 4974, column: 8, scope: !9287)
!9287 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4971, column: 6)
!9288 = !DILocation(line: 4974, column: 7, scope: !9287)
!9289 = !DILocation(line: 4974, column: 5, scope: !9287)
!9290 = !DILocation(line: 4974, column: 10, scope: !9287)
!9291 = !DILocation(line: 4975, column: 6, scope: !9287)
!9292 = !DILocation(line: 4976, column: 3, scope: !9287)
!9293 = !DILocation(line: 4976, column: 12, scope: !9224)
!9294 = distinct !{!9294, !9285, !9295}
!9295 = !DILocation(line: 4976, column: 15, scope: !9224)
!9296 = !DILocation(line: 4977, column: 7, scope: !9297)
!9297 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4977, column: 7)
!9298 = !DILocation(line: 4977, column: 15, scope: !9297)
!9299 = !DILocation(line: 4977, column: 12, scope: !9297)
!9300 = !DILocation(line: 4977, column: 7, scope: !9224)
!9301 = !DILocation(line: 4979, column: 6, scope: !9302)
!9302 = distinct !DILexicalBlock(scope: !9297, file: !3, line: 4978, column: 3)
!9303 = !DILocation(line: 4979, column: 8, scope: !9302)
!9304 = !DILocation(line: 4980, column: 6, scope: !9302)
!9305 = !DILocation(line: 4980, column: 8, scope: !9302)
!9306 = !DILocation(line: 4981, column: 5, scope: !9302)
!9307 = !DILocation(line: 4986, column: 8, scope: !9224)
!9308 = !DILocation(line: 4986, column: 7, scope: !9224)
!9309 = !DILocation(line: 4986, column: 5, scope: !9224)
!9310 = !DILocation(line: 4987, column: 10, scope: !9311)
!9311 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4987, column: 3)
!9312 = !DILocation(line: 4987, column: 8, scope: !9311)
!9313 = !DILocation(line: 4987, column: 15, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !9311, file: !3, line: 4987, column: 3)
!9315 = !DILocation(line: 4987, column: 17, scope: !9314)
!9316 = !DILocation(line: 4987, column: 3, scope: !9311)
!9317 = !DILocation(line: 4988, column: 11, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9314, file: !3, line: 4988, column: 9)
!9319 = !DILocation(line: 4988, column: 9, scope: !9318)
!9320 = !DILocation(line: 4988, column: 9, scope: !9314)
!9321 = !DILocation(line: 4989, column: 7, scope: !9318)
!9322 = !DILocation(line: 4988, column: 12, scope: !9318)
!9323 = !DILocation(line: 4987, column: 27, scope: !9314)
!9324 = !DILocation(line: 4987, column: 3, scope: !9314)
!9325 = distinct !{!9325, !9316, !9326}
!9326 = !DILocation(line: 4989, column: 7, scope: !9311)
!9327 = !DILocation(line: 4990, column: 7, scope: !9224)
!9328 = !DILocation(line: 4990, column: 5, scope: !9224)
!9329 = !DILocation(line: 4991, column: 17, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4991, column: 7)
!9331 = !DILocation(line: 4991, column: 21, scope: !9330)
!9332 = !DILocation(line: 4991, column: 19, scope: !9330)
!9333 = !DILocation(line: 4991, column: 7, scope: !9224)
!9334 = !DILocation(line: 4992, column: 9, scope: !9330)
!9335 = !DILocation(line: 4992, column: 7, scope: !9330)
!9336 = !DILocation(line: 4992, column: 5, scope: !9330)
!9337 = !DILocation(line: 4993, column: 10, scope: !9338)
!9338 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4993, column: 3)
!9339 = !DILocation(line: 4993, column: 8, scope: !9338)
!9340 = !DILocation(line: 4993, column: 18, scope: !9341)
!9341 = distinct !DILexicalBlock(scope: !9338, file: !3, line: 4993, column: 3)
!9342 = !DILocation(line: 4993, column: 3, scope: !9338)
!9343 = !DILocation(line: 4994, column: 11, scope: !9344)
!9344 = distinct !DILexicalBlock(scope: !9341, file: !3, line: 4994, column: 9)
!9345 = !DILocation(line: 4994, column: 9, scope: !9344)
!9346 = !DILocation(line: 4994, column: 9, scope: !9341)
!9347 = !DILocation(line: 4995, column: 7, scope: !9344)
!9348 = !DILocation(line: 4994, column: 12, scope: !9344)
!9349 = !DILocation(line: 4993, column: 22, scope: !9341)
!9350 = !DILocation(line: 4993, column: 3, scope: !9341)
!9351 = distinct !{!9351, !9342, !9352}
!9352 = !DILocation(line: 4995, column: 7, scope: !9338)
!9353 = !DILocation(line: 4996, column: 7, scope: !9224)
!9354 = !DILocation(line: 4996, column: 5, scope: !9224)
!9355 = !DILocation(line: 4997, column: 17, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 4997, column: 7)
!9357 = !DILocation(line: 4997, column: 21, scope: !9356)
!9358 = !DILocation(line: 4997, column: 19, scope: !9356)
!9359 = !DILocation(line: 4997, column: 7, scope: !9224)
!9360 = !DILocation(line: 4998, column: 9, scope: !9356)
!9361 = !DILocation(line: 4998, column: 7, scope: !9356)
!9362 = !DILocation(line: 4998, column: 5, scope: !9356)
!9363 = !DILocation(line: 4999, column: 8, scope: !9224)
!9364 = !DILocation(line: 4999, column: 4, scope: !9224)
!9365 = !DILocation(line: 4999, column: 6, scope: !9224)
!9366 = !DILocation(line: 5003, column: 17, scope: !9367)
!9367 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 5003, column: 3)
!9368 = !DILocation(line: 5003, column: 14, scope: !9367)
!9369 = !DILocation(line: 5003, column: 10, scope: !9367)
!9370 = !DILocation(line: 5003, column: 8, scope: !9367)
!9371 = !DILocation(line: 5003, column: 20, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9367, file: !3, line: 5003, column: 3)
!9373 = !DILocation(line: 5003, column: 24, scope: !9372)
!9374 = !DILocation(line: 5003, column: 22, scope: !9372)
!9375 = !DILocation(line: 5003, column: 3, scope: !9367)
!9376 = !DILocation(line: 5004, column: 17, scope: !9377)
!9377 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 5004, column: 9)
!9378 = !DILocation(line: 5004, column: 15, scope: !9377)
!9379 = !DILocation(line: 5004, column: 12, scope: !9377)
!9380 = !DILocation(line: 5004, column: 21, scope: !9377)
!9381 = !DILocation(line: 5004, column: 9, scope: !9372)
!9382 = !DILocation(line: 5005, column: 7, scope: !9377)
!9383 = !DILocation(line: 5004, column: 23, scope: !9377)
!9384 = !DILocation(line: 5003, column: 28, scope: !9372)
!9385 = !DILocation(line: 5003, column: 34, scope: !9372)
!9386 = !DILocation(line: 5003, column: 3, scope: !9372)
!9387 = distinct !{!9387, !9375, !9388}
!9388 = !DILocation(line: 5005, column: 14, scope: !9367)
!9389 = !DILocation(line: 5006, column: 15, scope: !9390)
!9390 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 5006, column: 7)
!9391 = !DILocation(line: 5006, column: 13, scope: !9390)
!9392 = !DILocation(line: 5006, column: 10, scope: !9390)
!9393 = !DILocation(line: 5006, column: 19, scope: !9390)
!9394 = !DILocation(line: 5006, column: 7, scope: !9224)
!9395 = !DILocation(line: 5007, column: 5, scope: !9390)
!9396 = !DILocation(line: 5008, column: 11, scope: !9224)
!9397 = !DILocation(line: 5008, column: 5, scope: !9224)
!9398 = !DILocation(line: 5008, column: 3, scope: !9224)
!9399 = !DILocation(line: 5008, column: 8, scope: !9224)
!9400 = !DILocation(line: 5012, column: 12, scope: !9224)
!9401 = !DILocation(line: 5012, column: 3, scope: !9224)
!9402 = !DILocation(line: 5012, column: 8, scope: !9224)
!9403 = !DILocation(line: 5013, column: 7, scope: !9224)
!9404 = !DILocation(line: 5013, column: 9, scope: !9224)
!9405 = !DILocation(line: 5013, column: 5, scope: !9224)
!9406 = !DILocation(line: 5013, column: 20, scope: !9224)
!9407 = !DILocation(line: 5013, column: 22, scope: !9224)
!9408 = !DILocation(line: 5013, column: 18, scope: !9224)
!9409 = !DILocation(line: 5014, column: 3, scope: !9224)
!9410 = !DILocation(line: 5014, column: 10, scope: !9224)
!9411 = !DILocation(line: 5015, column: 21, scope: !9412)
!9412 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 5014, column: 15)
!9413 = !DILocation(line: 5015, column: 19, scope: !9412)
!9414 = !DILocation(line: 5015, column: 16, scope: !9412)
!9415 = !DILocation(line: 5015, column: 8, scope: !9412)
!9416 = !DILocation(line: 5015, column: 11, scope: !9412)
!9417 = distinct !{!9417, !9409, !9418}
!9418 = !DILocation(line: 5016, column: 3, scope: !9224)
!9419 = !DILocation(line: 5020, column: 7, scope: !9224)
!9420 = !DILocation(line: 5020, column: 5, scope: !9224)
!9421 = !DILocation(line: 5020, column: 13, scope: !9224)
!9422 = !DILocation(line: 5021, column: 3, scope: !9224)
!9423 = !DILocation(line: 5022, column: 16, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 5022, column: 9)
!9425 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 5021, column: 6)
!9426 = !DILocation(line: 5022, column: 14, scope: !9424)
!9427 = !DILocation(line: 5022, column: 12, scope: !9424)
!9428 = !DILocation(line: 5022, column: 20, scope: !9424)
!9429 = !DILocation(line: 5022, column: 9, scope: !9425)
!9430 = !DILocation(line: 5023, column: 19, scope: !9424)
!9431 = !DILocation(line: 5023, column: 11, scope: !9424)
!9432 = !DILocation(line: 5023, column: 9, scope: !9424)
!9433 = !DILocation(line: 5023, column: 13, scope: !9424)
!9434 = !DILocation(line: 5023, column: 7, scope: !9424)
!9435 = !DILocation(line: 5023, column: 17, scope: !9424)
!9436 = !DILocation(line: 5024, column: 3, scope: !9425)
!9437 = !DILocation(line: 5024, column: 12, scope: !9224)
!9438 = !DILocation(line: 5024, column: 18, scope: !9224)
!9439 = !DILocation(line: 5024, column: 16, scope: !9224)
!9440 = distinct !{!9440, !9422, !9441}
!9441 = !DILocation(line: 5024, column: 19, scope: !9224)
!9442 = !DILocation(line: 5025, column: 9, scope: !9224)
!9443 = !DILocation(line: 5025, column: 7, scope: !9224)
!9444 = !DILocation(line: 5025, column: 5, scope: !9224)
!9445 = !DILocation(line: 5029, column: 12, scope: !9224)
!9446 = !DILocation(line: 5029, column: 3, scope: !9224)
!9447 = !DILocation(line: 5029, column: 8, scope: !9224)
!9448 = !DILocation(line: 5030, column: 7, scope: !9224)
!9449 = !DILocation(line: 5030, column: 5, scope: !9224)
!9450 = !DILocation(line: 5031, column: 5, scope: !9224)
!9451 = !DILocation(line: 5032, column: 8, scope: !9224)
!9452 = !DILocation(line: 5032, column: 7, scope: !9224)
!9453 = !DILocation(line: 5032, column: 5, scope: !9224)
!9454 = !DILocation(line: 5033, column: 3, scope: !9224)
!9455 = !DILocation(line: 5033, column: 8, scope: !9224)
!9456 = !DILocation(line: 5034, column: 5, scope: !9224)
!9457 = !DILocation(line: 5035, column: 5, scope: !9224)
!9458 = !DILocation(line: 5038, column: 3, scope: !9224)
!9459 = !DILocation(line: 5038, column: 10, scope: !9460)
!9460 = distinct !DILexicalBlock(scope: !9461, file: !3, line: 5038, column: 3)
!9461 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 5038, column: 3)
!9462 = !DILocation(line: 5038, column: 15, scope: !9460)
!9463 = !DILocation(line: 5038, column: 12, scope: !9460)
!9464 = !DILocation(line: 5038, column: 3, scope: !9461)
!9465 = !DILocation(line: 5040, column: 11, scope: !9466)
!9466 = distinct !DILexicalBlock(scope: !9460, file: !3, line: 5039, column: 3)
!9467 = !DILocation(line: 5040, column: 9, scope: !9466)
!9468 = !DILocation(line: 5040, column: 7, scope: !9466)
!9469 = !DILocation(line: 5041, column: 5, scope: !9466)
!9470 = !DILocation(line: 5041, column: 13, scope: !9466)
!9471 = !DILocation(line: 5045, column: 7, scope: !9472)
!9472 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5042, column: 5)
!9473 = !DILocation(line: 5045, column: 14, scope: !9472)
!9474 = !DILocation(line: 5045, column: 18, scope: !9472)
!9475 = !DILocation(line: 5045, column: 22, scope: !9472)
!9476 = !DILocation(line: 5045, column: 20, scope: !9472)
!9477 = !DILocation(line: 5045, column: 16, scope: !9472)
!9478 = !DILocation(line: 5047, column: 10, scope: !9479)
!9479 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 5046, column: 7)
!9480 = !DILocation(line: 5048, column: 14, scope: !9479)
!9481 = !DILocation(line: 5048, column: 11, scope: !9479)
!9482 = !DILocation(line: 5051, column: 18, scope: !9479)
!9483 = !DILocation(line: 5051, column: 22, scope: !9479)
!9484 = !DILocation(line: 5051, column: 20, scope: !9479)
!9485 = !DILocation(line: 5051, column: 16, scope: !9479)
!9486 = !DILocation(line: 5051, column: 37, scope: !9479)
!9487 = !DILocation(line: 5051, column: 25, scope: !9479)
!9488 = !DILocation(line: 5051, column: 13, scope: !9479)
!9489 = !DILocation(line: 5051, column: 41, scope: !9479)
!9490 = !DILocation(line: 5051, column: 45, scope: !9479)
!9491 = !DILocation(line: 5051, column: 11, scope: !9479)
!9492 = !DILocation(line: 5052, column: 28, scope: !9493)
!9493 = distinct !DILexicalBlock(scope: !9479, file: !3, line: 5052, column: 13)
!9494 = !DILocation(line: 5052, column: 32, scope: !9493)
!9495 = !DILocation(line: 5052, column: 30, scope: !9493)
!9496 = !DILocation(line: 5052, column: 26, scope: !9493)
!9497 = !DILocation(line: 5052, column: 20, scope: !9493)
!9498 = !DILocation(line: 5052, column: 16, scope: !9493)
!9499 = !DILocation(line: 5052, column: 38, scope: !9493)
!9500 = !DILocation(line: 5052, column: 40, scope: !9493)
!9501 = !DILocation(line: 5052, column: 36, scope: !9493)
!9502 = !DILocation(line: 5052, column: 13, scope: !9479)
!9503 = !DILocation(line: 5054, column: 16, scope: !9504)
!9504 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 5053, column: 9)
!9505 = !DILocation(line: 5054, column: 18, scope: !9504)
!9506 = !DILocation(line: 5054, column: 13, scope: !9504)
!9507 = !DILocation(line: 5055, column: 16, scope: !9504)
!9508 = !DILocation(line: 5055, column: 20, scope: !9504)
!9509 = !DILocation(line: 5055, column: 18, scope: !9504)
!9510 = !DILocation(line: 5055, column: 14, scope: !9504)
!9511 = !DILocation(line: 5056, column: 8, scope: !9512)
!9512 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 5056, column: 8)
!9513 = !DILocation(line: 5056, column: 12, scope: !9512)
!9514 = !DILocation(line: 5056, column: 10, scope: !9512)
!9515 = !DILocation(line: 5056, column: 8, scope: !9504)
!9516 = !DILocation(line: 5057, column: 6, scope: !9512)
!9517 = !DILocation(line: 5057, column: 13, scope: !9512)
!9518 = !DILocation(line: 5057, column: 19, scope: !9512)
!9519 = !DILocation(line: 5057, column: 17, scope: !9512)
!9520 = !DILocation(line: 5059, column: 15, scope: !9521)
!9521 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 5059, column: 12)
!9522 = distinct !DILexicalBlock(scope: !9512, file: !3, line: 5058, column: 6)
!9523 = !DILocation(line: 5059, column: 26, scope: !9521)
!9524 = !DILocation(line: 5059, column: 25, scope: !9521)
!9525 = !DILocation(line: 5059, column: 22, scope: !9521)
!9526 = !DILocation(line: 5059, column: 12, scope: !9522)
!9527 = !DILocation(line: 5060, column: 3, scope: !9521)
!9528 = !DILocation(line: 5061, column: 14, scope: !9522)
!9529 = !DILocation(line: 5061, column: 13, scope: !9522)
!9530 = !DILocation(line: 5061, column: 10, scope: !9522)
!9531 = distinct !{!9531, !9516, !9532}
!9532 = !DILocation(line: 5062, column: 6, scope: !9512)
!9533 = !DILocation(line: 5063, column: 9, scope: !9504)
!9534 = !DILocation(line: 5064, column: 18, scope: !9479)
!9535 = !DILocation(line: 5064, column: 15, scope: !9479)
!9536 = !DILocation(line: 5064, column: 11, scope: !9479)
!9537 = !DILocation(line: 5067, column: 41, scope: !9538)
!9538 = distinct !DILexicalBlock(scope: !9479, file: !3, line: 5067, column: 13)
!9539 = !DILocation(line: 5067, column: 43, scope: !9538)
!9540 = !DILocation(line: 5067, column: 40, scope: !9538)
!9541 = !DILocation(line: 5067, column: 47, scope: !9538)
!9542 = !DILocation(line: 5067, column: 33, scope: !9538)
!9543 = !DILocation(line: 5067, column: 18, scope: !9538)
!9544 = !DILocation(line: 5067, column: 16, scope: !9538)
!9545 = !DILocation(line: 5067, column: 70, scope: !9538)
!9546 = !DILocation(line: 5067, column: 13, scope: !9479)
!9547 = !DILocation(line: 5070, column: 15, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 5070, column: 15)
!9549 = distinct !DILexicalBlock(scope: !9538, file: !3, line: 5069, column: 9)
!9550 = !DILocation(line: 5070, column: 15, scope: !9549)
!9551 = !DILocation(line: 5071, column: 23, scope: !9548)
!9552 = !DILocation(line: 5071, column: 13, scope: !9548)
!9553 = !DILocation(line: 5072, column: 11, scope: !9549)
!9554 = !DILocation(line: 5074, column: 18, scope: !9479)
!9555 = !DILocation(line: 5074, column: 20, scope: !9479)
!9556 = !DILocation(line: 5074, column: 15, scope: !9479)
!9557 = !DILocation(line: 5075, column: 14, scope: !9479)
!9558 = !DILocation(line: 5075, column: 16, scope: !9479)
!9559 = !DILocation(line: 5075, column: 10, scope: !9479)
!9560 = !DILocation(line: 5075, column: 12, scope: !9479)
!9561 = !DILocation(line: 5076, column: 17, scope: !9479)
!9562 = !DILocation(line: 5076, column: 20, scope: !9479)
!9563 = !DILocation(line: 5076, column: 22, scope: !9479)
!9564 = !DILocation(line: 5076, column: 13, scope: !9479)
!9565 = !DILocation(line: 5076, column: 26, scope: !9479)
!9566 = !DILocation(line: 5077, column: 16, scope: !9479)
!9567 = !DILocation(line: 5077, column: 11, scope: !9479)
!9568 = !DILocation(line: 5077, column: 9, scope: !9479)
!9569 = !DILocation(line: 5077, column: 14, scope: !9479)
!9570 = !DILocation(line: 5080, column: 13, scope: !9571)
!9571 = distinct !DILexicalBlock(scope: !9479, file: !3, line: 5080, column: 13)
!9572 = !DILocation(line: 5080, column: 13, scope: !9479)
!9573 = !DILocation(line: 5082, column: 18, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 5081, column: 9)
!9575 = !DILocation(line: 5082, column: 13, scope: !9574)
!9576 = !DILocation(line: 5082, column: 11, scope: !9574)
!9577 = !DILocation(line: 5082, column: 16, scope: !9574)
!9578 = !DILocation(line: 5083, column: 22, scope: !9574)
!9579 = !DILocation(line: 5083, column: 17, scope: !9574)
!9580 = !DILocation(line: 5083, column: 13, scope: !9574)
!9581 = !DILocation(line: 5083, column: 15, scope: !9574)
!9582 = !DILocation(line: 5084, column: 28, scope: !9574)
!9583 = !DILocation(line: 5084, column: 26, scope: !9574)
!9584 = !DILocation(line: 5084, column: 17, scope: !9574)
!9585 = !DILocation(line: 5084, column: 13, scope: !9574)
!9586 = !DILocation(line: 5084, column: 15, scope: !9574)
!9587 = !DILocation(line: 5085, column: 19, scope: !9574)
!9588 = !DILocation(line: 5085, column: 13, scope: !9574)
!9589 = !DILocation(line: 5085, column: 15, scope: !9574)
!9590 = !DILocation(line: 5085, column: 17, scope: !9574)
!9591 = !DILocation(line: 5086, column: 15, scope: !9574)
!9592 = !DILocation(line: 5086, column: 21, scope: !9574)
!9593 = !DILocation(line: 5086, column: 25, scope: !9574)
!9594 = !DILocation(line: 5086, column: 23, scope: !9574)
!9595 = !DILocation(line: 5086, column: 17, scope: !9574)
!9596 = !DILocation(line: 5086, column: 13, scope: !9574)
!9597 = !DILocation(line: 5087, column: 13, scope: !9574)
!9598 = !DILocation(line: 5087, column: 14, scope: !9574)
!9599 = !DILocation(line: 5087, column: 11, scope: !9574)
!9600 = !DILocation(line: 5087, column: 18, scope: !9574)
!9601 = !DILocation(line: 5087, column: 23, scope: !9574)
!9602 = !DILocation(line: 5088, column: 9, scope: !9574)
!9603 = distinct !{!9603, !9471, !9604}
!9604 = !DILocation(line: 5089, column: 7, scope: !9472)
!9605 = !DILocation(line: 5092, column: 19, scope: !9472)
!9606 = !DILocation(line: 5092, column: 23, scope: !9472)
!9607 = !DILocation(line: 5092, column: 21, scope: !9472)
!9608 = !DILocation(line: 5092, column: 13, scope: !9472)
!9609 = !DILocation(line: 5092, column: 9, scope: !9472)
!9610 = !DILocation(line: 5092, column: 11, scope: !9472)
!9611 = !DILocation(line: 5093, column: 11, scope: !9612)
!9612 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 5093, column: 11)
!9613 = !DILocation(line: 5093, column: 16, scope: !9612)
!9614 = !DILocation(line: 5093, column: 20, scope: !9612)
!9615 = !DILocation(line: 5093, column: 18, scope: !9612)
!9616 = !DILocation(line: 5093, column: 13, scope: !9612)
!9617 = !DILocation(line: 5093, column: 11, scope: !9472)
!9618 = !DILocation(line: 5094, column: 11, scope: !9612)
!9619 = !DILocation(line: 5094, column: 13, scope: !9612)
!9620 = !DILocation(line: 5094, column: 9, scope: !9612)
!9621 = !DILocation(line: 5095, column: 17, scope: !9622)
!9622 = distinct !DILexicalBlock(scope: !9612, file: !3, line: 5095, column: 16)
!9623 = !DILocation(line: 5095, column: 16, scope: !9622)
!9624 = !DILocation(line: 5095, column: 21, scope: !9622)
!9625 = !DILocation(line: 5095, column: 19, scope: !9622)
!9626 = !DILocation(line: 5095, column: 16, scope: !9612)
!9627 = !DILocation(line: 5097, column: 22, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9622, file: !3, line: 5096, column: 7)
!9629 = !DILocation(line: 5097, column: 21, scope: !9628)
!9630 = !DILocation(line: 5097, column: 24, scope: !9628)
!9631 = !DILocation(line: 5097, column: 15, scope: !9628)
!9632 = !DILocation(line: 5097, column: 11, scope: !9628)
!9633 = !DILocation(line: 5097, column: 13, scope: !9628)
!9634 = !DILocation(line: 5098, column: 24, scope: !9628)
!9635 = !DILocation(line: 5098, column: 23, scope: !9628)
!9636 = !DILocation(line: 5098, column: 17, scope: !9628)
!9637 = !DILocation(line: 5098, column: 11, scope: !9628)
!9638 = !DILocation(line: 5098, column: 13, scope: !9628)
!9639 = !DILocation(line: 5098, column: 15, scope: !9628)
!9640 = !DILocation(line: 5099, column: 3, scope: !9628)
!9641 = !DILocation(line: 5100, column: 7, scope: !9628)
!9642 = !DILocation(line: 5103, column: 20, scope: !9643)
!9643 = distinct !DILexicalBlock(scope: !9622, file: !3, line: 5102, column: 7)
!9644 = !DILocation(line: 5103, column: 23, scope: !9643)
!9645 = !DILocation(line: 5103, column: 22, scope: !9643)
!9646 = !DILocation(line: 5103, column: 27, scope: !9643)
!9647 = !DILocation(line: 5103, column: 25, scope: !9643)
!9648 = !DILocation(line: 5103, column: 15, scope: !9643)
!9649 = !DILocation(line: 5103, column: 11, scope: !9643)
!9650 = !DILocation(line: 5103, column: 13, scope: !9643)
!9651 = !DILocation(line: 5104, column: 17, scope: !9643)
!9652 = !DILocation(line: 5104, column: 21, scope: !9643)
!9653 = !DILocation(line: 5104, column: 19, scope: !9643)
!9654 = !DILocation(line: 5104, column: 26, scope: !9643)
!9655 = !DILocation(line: 5104, column: 24, scope: !9643)
!9656 = !DILocation(line: 5104, column: 11, scope: !9643)
!9657 = !DILocation(line: 5104, column: 13, scope: !9643)
!9658 = !DILocation(line: 5104, column: 15, scope: !9643)
!9659 = !DILocation(line: 5108, column: 17, scope: !9472)
!9660 = !DILocation(line: 5108, column: 21, scope: !9472)
!9661 = !DILocation(line: 5108, column: 19, scope: !9472)
!9662 = !DILocation(line: 5108, column: 13, scope: !9472)
!9663 = !DILocation(line: 5108, column: 9, scope: !9472)
!9664 = !DILocation(line: 5109, column: 16, scope: !9665)
!9665 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 5109, column: 7)
!9666 = !DILocation(line: 5109, column: 21, scope: !9665)
!9667 = !DILocation(line: 5109, column: 18, scope: !9665)
!9668 = !DILocation(line: 5109, column: 14, scope: !9665)
!9669 = !DILocation(line: 5109, column: 12, scope: !9665)
!9670 = !DILocation(line: 5109, column: 24, scope: !9671)
!9671 = distinct !DILexicalBlock(scope: !9665, file: !3, line: 5109, column: 7)
!9672 = !DILocation(line: 5109, column: 28, scope: !9671)
!9673 = !DILocation(line: 5109, column: 26, scope: !9671)
!9674 = !DILocation(line: 5109, column: 7, scope: !9665)
!9675 = !DILocation(line: 5110, column: 9, scope: !9671)
!9676 = !DILocation(line: 5110, column: 11, scope: !9671)
!9677 = !DILocation(line: 5110, column: 16, scope: !9671)
!9678 = !DILocation(line: 5109, column: 36, scope: !9671)
!9679 = !DILocation(line: 5109, column: 33, scope: !9671)
!9680 = !DILocation(line: 5109, column: 7, scope: !9671)
!9681 = distinct !{!9681, !9674, !9682}
!9682 = !DILocation(line: 5110, column: 16, scope: !9665)
!9683 = !DILocation(line: 5113, column: 22, scope: !9684)
!9684 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 5113, column: 7)
!9685 = !DILocation(line: 5113, column: 24, scope: !9684)
!9686 = !DILocation(line: 5113, column: 18, scope: !9684)
!9687 = !DILocation(line: 5113, column: 14, scope: !9684)
!9688 = !DILocation(line: 5113, column: 12, scope: !9684)
!9689 = !DILocation(line: 5113, column: 30, scope: !9690)
!9690 = distinct !DILexicalBlock(scope: !9684, file: !3, line: 5113, column: 7)
!9691 = !DILocation(line: 5113, column: 34, scope: !9690)
!9692 = !DILocation(line: 5113, column: 32, scope: !9690)
!9693 = !DILocation(line: 5113, column: 7, scope: !9684)
!9694 = !DILocation(line: 5114, column: 14, scope: !9690)
!9695 = !DILocation(line: 5114, column: 11, scope: !9690)
!9696 = !DILocation(line: 5114, column: 9, scope: !9690)
!9697 = !DILocation(line: 5113, column: 39, scope: !9690)
!9698 = !DILocation(line: 5113, column: 7, scope: !9690)
!9699 = distinct !{!9699, !9693, !9700}
!9700 = !DILocation(line: 5114, column: 14, scope: !9684)
!9701 = !DILocation(line: 5115, column: 12, scope: !9472)
!9702 = !DILocation(line: 5115, column: 9, scope: !9472)
!9703 = !DILocation(line: 5118, column: 7, scope: !9472)
!9704 = !DILocation(line: 5118, column: 15, scope: !9472)
!9705 = !DILocation(line: 5118, column: 26, scope: !9472)
!9706 = !DILocation(line: 5118, column: 23, scope: !9472)
!9707 = !DILocation(line: 5118, column: 29, scope: !9472)
!9708 = !DILocation(line: 5118, column: 17, scope: !9472)
!9709 = !DILocation(line: 5118, column: 40, scope: !9472)
!9710 = !DILocation(line: 5118, column: 38, scope: !9472)
!9711 = !DILocation(line: 5118, column: 35, scope: !9472)
!9712 = !DILocation(line: 5120, column: 10, scope: !9713)
!9713 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 5119, column: 7)
!9714 = !DILocation(line: 5121, column: 14, scope: !9713)
!9715 = !DILocation(line: 5121, column: 11, scope: !9713)
!9716 = distinct !{!9716, !9703, !9717}
!9717 = !DILocation(line: 5122, column: 7, scope: !9472)
!9718 = distinct !{!9718, !9469, !9719}
!9719 = !DILocation(line: 5123, column: 5, scope: !9466)
!9720 = !DILocation(line: 5124, column: 3, scope: !9466)
!9721 = !DILocation(line: 5038, column: 19, scope: !9460)
!9722 = !DILocation(line: 5038, column: 3, scope: !9460)
!9723 = distinct !{!9723, !9464, !9724}
!9724 = !DILocation(line: 5124, column: 3, scope: !9461)
!9725 = !DILocation(line: 5128, column: 10, scope: !9224)
!9726 = !DILocation(line: 5128, column: 12, scope: !9224)
!9727 = !DILocation(line: 5128, column: 17, scope: !9224)
!9728 = !DILocation(line: 5128, column: 20, scope: !9224)
!9729 = !DILocation(line: 5128, column: 22, scope: !9224)
!9730 = !DILocation(line: 0, scope: !9224)
!9731 = !DILocation(line: 5128, column: 3, scope: !9224)
!9732 = !DILocation(line: 5129, column: 1, scope: !9224)
!9733 = distinct !DISubprogram(name: "huft_free", scope: !3, file: !3, line: 5133, type: !9734, scopeLine: 5138, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!9734 = !DISubroutineType(types: !9735)
!9735 = !{!12, !41}
!9736 = !DILocalVariable(name: "t", arg: 1, scope: !9733, file: !3, line: 5134, type: !41)
!9737 = !DILocation(line: 5134, column: 14, scope: !9733)
!9738 = !DILocalVariable(name: "p", scope: !9733, file: !3, line: 5139, type: !41)
!9739 = !DILocation(line: 5139, column: 25, scope: !9733)
!9740 = !DILocalVariable(name: "q", scope: !9733, file: !3, line: 5139, type: !41)
!9741 = !DILocation(line: 5139, column: 29, scope: !9733)
!9742 = !DILocation(line: 5143, column: 7, scope: !9733)
!9743 = !DILocation(line: 5143, column: 5, scope: !9733)
!9744 = !DILocation(line: 5144, column: 3, scope: !9733)
!9745 = !DILocation(line: 5144, column: 10, scope: !9733)
!9746 = !DILocation(line: 5144, column: 12, scope: !9733)
!9747 = !DILocation(line: 5146, column: 10, scope: !9748)
!9748 = distinct !DILexicalBlock(scope: !9733, file: !3, line: 5145, column: 3)
!9749 = !DILocation(line: 5146, column: 16, scope: !9748)
!9750 = !DILocation(line: 5146, column: 18, scope: !9748)
!9751 = !DILocation(line: 5146, column: 7, scope: !9748)
!9752 = !DILocation(line: 5147, column: 17, scope: !9748)
!9753 = !DILocation(line: 5147, column: 10, scope: !9748)
!9754 = !DILocation(line: 5147, column: 5, scope: !9748)
!9755 = !DILocation(line: 5148, column: 9, scope: !9748)
!9756 = !DILocation(line: 5148, column: 7, scope: !9748)
!9757 = distinct !{!9757, !9744, !9758}
!9758 = !DILocation(line: 5149, column: 3, scope: !9733)
!9759 = !DILocation(line: 5150, column: 3, scope: !9733)
!9760 = distinct !DISubprogram(name: "inflate_codes", scope: !3, file: !3, line: 5154, type: !9761, scopeLine: 5159, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!9761 = !DISubroutineType(types: !9762)
!9762 = !{!12, !41, !41, !12, !12}
!9763 = !DILocalVariable(name: "tl", arg: 1, scope: !9760, file: !3, line: 5155, type: !41)
!9764 = !DILocation(line: 5155, column: 14, scope: !9760)
!9765 = !DILocalVariable(name: "td", arg: 2, scope: !9760, file: !3, line: 5155, type: !41)
!9766 = !DILocation(line: 5155, column: 19, scope: !9760)
!9767 = !DILocalVariable(name: "bl", arg: 3, scope: !9760, file: !3, line: 5156, type: !12)
!9768 = !DILocation(line: 5156, column: 5, scope: !9760)
!9769 = !DILocalVariable(name: "bd", arg: 4, scope: !9760, file: !3, line: 5156, type: !12)
!9770 = !DILocation(line: 5156, column: 9, scope: !9760)
!9771 = !DILocalVariable(name: "e", scope: !9760, file: !3, line: 5160, type: !6)
!9772 = !DILocation(line: 5160, column: 21, scope: !9760)
!9773 = !DILocalVariable(name: "n", scope: !9760, file: !3, line: 5161, type: !6)
!9774 = !DILocation(line: 5161, column: 12, scope: !9760)
!9775 = !DILocalVariable(name: "d", scope: !9760, file: !3, line: 5161, type: !6)
!9776 = !DILocation(line: 5161, column: 15, scope: !9760)
!9777 = !DILocalVariable(name: "w", scope: !9760, file: !3, line: 5162, type: !6)
!9778 = !DILocation(line: 5162, column: 12, scope: !9760)
!9779 = !DILocalVariable(name: "t", scope: !9760, file: !3, line: 5163, type: !41)
!9780 = !DILocation(line: 5163, column: 16, scope: !9760)
!9781 = !DILocalVariable(name: "ml", scope: !9760, file: !3, line: 5164, type: !6)
!9782 = !DILocation(line: 5164, column: 12, scope: !9760)
!9783 = !DILocalVariable(name: "md", scope: !9760, file: !3, line: 5164, type: !6)
!9784 = !DILocation(line: 5164, column: 16, scope: !9760)
!9785 = !DILocalVariable(name: "b", scope: !9760, file: !3, line: 5165, type: !51)
!9786 = !DILocation(line: 5165, column: 16, scope: !9760)
!9787 = !DILocalVariable(name: "k", scope: !9760, file: !3, line: 5166, type: !6)
!9788 = !DILocation(line: 5166, column: 21, scope: !9760)
!9789 = !DILocation(line: 5170, column: 7, scope: !9760)
!9790 = !DILocation(line: 5170, column: 5, scope: !9760)
!9791 = !DILocation(line: 5171, column: 7, scope: !9760)
!9792 = !DILocation(line: 5171, column: 5, scope: !9760)
!9793 = !DILocation(line: 5172, column: 7, scope: !9760)
!9794 = !DILocation(line: 5172, column: 5, scope: !9760)
!9795 = !DILocation(line: 5175, column: 18, scope: !9760)
!9796 = !DILocation(line: 5175, column: 8, scope: !9760)
!9797 = !DILocation(line: 5175, column: 6, scope: !9760)
!9798 = !DILocation(line: 5176, column: 18, scope: !9760)
!9799 = !DILocation(line: 5176, column: 8, scope: !9760)
!9800 = !DILocation(line: 5176, column: 6, scope: !9760)
!9801 = !DILocation(line: 5177, column: 3, scope: !9760)
!9802 = !DILocation(line: 5179, column: 5, scope: !9803)
!9803 = distinct !DILexicalBlock(scope: !9804, file: !3, line: 5179, column: 5)
!9804 = distinct !DILexicalBlock(scope: !9805, file: !3, line: 5178, column: 3)
!9805 = distinct !DILexicalBlock(scope: !9806, file: !3, line: 5177, column: 3)
!9806 = distinct !DILexicalBlock(scope: !9760, file: !3, line: 5177, column: 3)
!9807 = !DILocation(line: 5179, column: 5, scope: !9808)
!9808 = distinct !DILexicalBlock(scope: !9803, file: !3, line: 5179, column: 5)
!9809 = distinct !{!9809, !9802, !9802}
!9810 = !DILocation(line: 5180, column: 19, scope: !9811)
!9811 = distinct !DILexicalBlock(scope: !9804, file: !3, line: 5180, column: 9)
!9812 = !DILocation(line: 5180, column: 35, scope: !9811)
!9813 = !DILocation(line: 5180, column: 25, scope: !9811)
!9814 = !DILocation(line: 5180, column: 39, scope: !9811)
!9815 = !DILocation(line: 5180, column: 37, scope: !9811)
!9816 = !DILocation(line: 5180, column: 22, scope: !9811)
!9817 = !DILocation(line: 5180, column: 17, scope: !9811)
!9818 = !DILocation(line: 5180, column: 45, scope: !9811)
!9819 = !DILocation(line: 5180, column: 14, scope: !9811)
!9820 = !DILocation(line: 5180, column: 12, scope: !9811)
!9821 = !DILocation(line: 5180, column: 48, scope: !9811)
!9822 = !DILocation(line: 5180, column: 9, scope: !9804)
!9823 = !DILocation(line: 5181, column: 7, scope: !9811)
!9824 = !DILocation(line: 5182, column: 13, scope: !9825)
!9825 = distinct !DILexicalBlock(scope: !9826, file: !3, line: 5182, column: 13)
!9826 = distinct !DILexicalBlock(scope: !9811, file: !3, line: 5181, column: 10)
!9827 = !DILocation(line: 5182, column: 15, scope: !9825)
!9828 = !DILocation(line: 5182, column: 13, scope: !9826)
!9829 = !DILocation(line: 5183, column: 11, scope: !9825)
!9830 = !DILocation(line: 5184, column: 9, scope: !9831)
!9831 = distinct !DILexicalBlock(scope: !9826, file: !3, line: 5184, column: 9)
!9832 = !DILocation(line: 5185, column: 11, scope: !9826)
!9833 = !DILocation(line: 5186, column: 9, scope: !9834)
!9834 = distinct !DILexicalBlock(scope: !9826, file: !3, line: 5186, column: 9)
!9835 = !DILocation(line: 5186, column: 9, scope: !9836)
!9836 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 5186, column: 9)
!9837 = distinct !{!9837, !9833, !9833}
!9838 = !DILocation(line: 5187, column: 7, scope: !9826)
!9839 = !DILocation(line: 5187, column: 26, scope: !9811)
!9840 = !DILocation(line: 5187, column: 29, scope: !9811)
!9841 = !DILocation(line: 5187, column: 31, scope: !9811)
!9842 = !DILocation(line: 5187, column: 46, scope: !9811)
!9843 = !DILocation(line: 5187, column: 36, scope: !9811)
!9844 = !DILocation(line: 5187, column: 60, scope: !9811)
!9845 = !DILocation(line: 5187, column: 50, scope: !9811)
!9846 = !DILocation(line: 5187, column: 48, scope: !9811)
!9847 = !DILocation(line: 5187, column: 33, scope: !9811)
!9848 = !DILocation(line: 5187, column: 24, scope: !9811)
!9849 = !DILocation(line: 5187, column: 66, scope: !9811)
!9850 = !DILocation(line: 5187, column: 21, scope: !9811)
!9851 = !DILocation(line: 5187, column: 19, scope: !9811)
!9852 = !DILocation(line: 5187, column: 69, scope: !9811)
!9853 = distinct !{!9853, !9823, !9854}
!9854 = !DILocation(line: 5187, column: 73, scope: !9811)
!9855 = !DILocation(line: 5188, column: 5, scope: !9856)
!9856 = distinct !DILexicalBlock(scope: !9804, file: !3, line: 5188, column: 5)
!9857 = !DILocation(line: 5189, column: 9, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9804, file: !3, line: 5189, column: 9)
!9859 = !DILocation(line: 5189, column: 11, scope: !9858)
!9860 = !DILocation(line: 5189, column: 9, scope: !9804)
!9861 = !DILocation(line: 5191, column: 25, scope: !9862)
!9862 = distinct !DILexicalBlock(scope: !9858, file: !3, line: 5190, column: 5)
!9863 = !DILocation(line: 5191, column: 28, scope: !9862)
!9864 = !DILocation(line: 5191, column: 30, scope: !9862)
!9865 = !DILocation(line: 5191, column: 20, scope: !9862)
!9866 = !DILocation(line: 5191, column: 14, scope: !9862)
!9867 = !DILocation(line: 5191, column: 7, scope: !9862)
!9868 = !DILocation(line: 5191, column: 18, scope: !9862)
!9869 = !DILocation(line: 5193, column: 11, scope: !9870)
!9870 = distinct !DILexicalBlock(scope: !9862, file: !3, line: 5193, column: 11)
!9871 = !DILocation(line: 5193, column: 13, scope: !9870)
!9872 = !DILocation(line: 5193, column: 11, scope: !9862)
!9873 = !DILocation(line: 5195, column: 9, scope: !9874)
!9874 = distinct !DILexicalBlock(scope: !9870, file: !3, line: 5194, column: 7)
!9875 = !DILocation(line: 5196, column: 11, scope: !9874)
!9876 = !DILocation(line: 5197, column: 7, scope: !9874)
!9877 = !DILocation(line: 5198, column: 5, scope: !9862)
!9878 = !DILocation(line: 5202, column: 11, scope: !9879)
!9879 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5202, column: 11)
!9880 = distinct !DILexicalBlock(scope: !9858, file: !3, line: 5200, column: 5)
!9881 = !DILocation(line: 5202, column: 13, scope: !9879)
!9882 = !DILocation(line: 5202, column: 11, scope: !9880)
!9883 = !DILocation(line: 5203, column: 9, scope: !9879)
!9884 = !DILocation(line: 5206, column: 7, scope: !9885)
!9885 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5206, column: 7)
!9886 = !DILocation(line: 5206, column: 7, scope: !9887)
!9887 = distinct !DILexicalBlock(scope: !9885, file: !3, line: 5206, column: 7)
!9888 = distinct !{!9888, !9884, !9884}
!9889 = !DILocation(line: 5207, column: 11, scope: !9880)
!9890 = !DILocation(line: 5207, column: 14, scope: !9880)
!9891 = !DILocation(line: 5207, column: 16, scope: !9880)
!9892 = !DILocation(line: 5207, column: 31, scope: !9880)
!9893 = !DILocation(line: 5207, column: 21, scope: !9880)
!9894 = !DILocation(line: 5207, column: 45, scope: !9880)
!9895 = !DILocation(line: 5207, column: 35, scope: !9880)
!9896 = !DILocation(line: 5207, column: 33, scope: !9880)
!9897 = !DILocation(line: 5207, column: 18, scope: !9880)
!9898 = !DILocation(line: 5207, column: 9, scope: !9880)
!9899 = !DILocation(line: 5208, column: 7, scope: !9900)
!9900 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5208, column: 7)
!9901 = !DILocation(line: 5211, column: 7, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5211, column: 7)
!9903 = !DILocation(line: 5211, column: 7, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 5211, column: 7)
!9905 = distinct !{!9905, !9901, !9901}
!9906 = !DILocation(line: 5212, column: 21, scope: !9907)
!9907 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5212, column: 11)
!9908 = !DILocation(line: 5212, column: 37, scope: !9907)
!9909 = !DILocation(line: 5212, column: 27, scope: !9907)
!9910 = !DILocation(line: 5212, column: 41, scope: !9907)
!9911 = !DILocation(line: 5212, column: 39, scope: !9907)
!9912 = !DILocation(line: 5212, column: 24, scope: !9907)
!9913 = !DILocation(line: 5212, column: 19, scope: !9907)
!9914 = !DILocation(line: 5212, column: 47, scope: !9907)
!9915 = !DILocation(line: 5212, column: 16, scope: !9907)
!9916 = !DILocation(line: 5212, column: 14, scope: !9907)
!9917 = !DILocation(line: 5212, column: 50, scope: !9907)
!9918 = !DILocation(line: 5212, column: 11, scope: !9880)
!9919 = !DILocation(line: 5213, column: 9, scope: !9907)
!9920 = !DILocation(line: 5214, column: 15, scope: !9921)
!9921 = distinct !DILexicalBlock(scope: !9922, file: !3, line: 5214, column: 15)
!9922 = distinct !DILexicalBlock(scope: !9907, file: !3, line: 5213, column: 12)
!9923 = !DILocation(line: 5214, column: 17, scope: !9921)
!9924 = !DILocation(line: 5214, column: 15, scope: !9922)
!9925 = !DILocation(line: 5215, column: 13, scope: !9921)
!9926 = !DILocation(line: 5216, column: 11, scope: !9927)
!9927 = distinct !DILexicalBlock(scope: !9922, file: !3, line: 5216, column: 11)
!9928 = !DILocation(line: 5217, column: 13, scope: !9922)
!9929 = !DILocation(line: 5218, column: 11, scope: !9930)
!9930 = distinct !DILexicalBlock(scope: !9922, file: !3, line: 5218, column: 11)
!9931 = !DILocation(line: 5218, column: 11, scope: !9932)
!9932 = distinct !DILexicalBlock(scope: !9930, file: !3, line: 5218, column: 11)
!9933 = distinct !{!9933, !9929, !9929}
!9934 = !DILocation(line: 5219, column: 9, scope: !9922)
!9935 = !DILocation(line: 5219, column: 28, scope: !9907)
!9936 = !DILocation(line: 5219, column: 31, scope: !9907)
!9937 = !DILocation(line: 5219, column: 33, scope: !9907)
!9938 = !DILocation(line: 5219, column: 48, scope: !9907)
!9939 = !DILocation(line: 5219, column: 38, scope: !9907)
!9940 = !DILocation(line: 5219, column: 62, scope: !9907)
!9941 = !DILocation(line: 5219, column: 52, scope: !9907)
!9942 = !DILocation(line: 5219, column: 50, scope: !9907)
!9943 = !DILocation(line: 5219, column: 35, scope: !9907)
!9944 = !DILocation(line: 5219, column: 26, scope: !9907)
!9945 = !DILocation(line: 5219, column: 68, scope: !9907)
!9946 = !DILocation(line: 5219, column: 23, scope: !9907)
!9947 = !DILocation(line: 5219, column: 21, scope: !9907)
!9948 = !DILocation(line: 5219, column: 71, scope: !9907)
!9949 = distinct !{!9949, !9919, !9950}
!9950 = !DILocation(line: 5219, column: 75, scope: !9907)
!9951 = !DILocation(line: 5220, column: 7, scope: !9952)
!9952 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5220, column: 7)
!9953 = !DILocation(line: 5221, column: 7, scope: !9954)
!9954 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5221, column: 7)
!9955 = !DILocation(line: 5221, column: 7, scope: !9956)
!9956 = distinct !DILexicalBlock(scope: !9954, file: !3, line: 5221, column: 7)
!9957 = distinct !{!9957, !9953, !9953}
!9958 = !DILocation(line: 5222, column: 11, scope: !9880)
!9959 = !DILocation(line: 5222, column: 15, scope: !9880)
!9960 = !DILocation(line: 5222, column: 18, scope: !9880)
!9961 = !DILocation(line: 5222, column: 20, scope: !9880)
!9962 = !DILocation(line: 5222, column: 13, scope: !9880)
!9963 = !DILocation(line: 5222, column: 35, scope: !9880)
!9964 = !DILocation(line: 5222, column: 25, scope: !9880)
!9965 = !DILocation(line: 5222, column: 49, scope: !9880)
!9966 = !DILocation(line: 5222, column: 39, scope: !9880)
!9967 = !DILocation(line: 5222, column: 37, scope: !9880)
!9968 = !DILocation(line: 5222, column: 22, scope: !9880)
!9969 = !DILocation(line: 5222, column: 9, scope: !9880)
!9970 = !DILocation(line: 5223, column: 7, scope: !9971)
!9971 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5223, column: 7)
!9972 = !DILocation(line: 5227, column: 7, scope: !9880)
!9973 = !DILocation(line: 5228, column: 36, scope: !9974)
!9974 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5227, column: 10)
!9975 = !DILocation(line: 5228, column: 50, scope: !9974)
!9976 = !DILocation(line: 5228, column: 48, scope: !9974)
!9977 = !DILocation(line: 5228, column: 33, scope: !9974)
!9978 = !DILocation(line: 5228, column: 54, scope: !9974)
!9979 = !DILocation(line: 5228, column: 58, scope: !9974)
!9980 = !DILocation(line: 5228, column: 30, scope: !9974)
!9981 = !DILocation(line: 5228, column: 22, scope: !9974)
!9982 = !DILocation(line: 5228, column: 64, scope: !9974)
!9983 = !DILocation(line: 5228, column: 62, scope: !9974)
!9984 = !DILocation(line: 5228, column: 19, scope: !9974)
!9985 = !DILocation(line: 5228, column: 68, scope: !9974)
!9986 = !DILocation(line: 5228, column: 72, scope: !9974)
!9987 = !DILocation(line: 5228, column: 17, scope: !9974)
!9988 = !DILocation(line: 5228, column: 11, scope: !9974)
!9989 = !DILocation(line: 5230, column: 13, scope: !9990)
!9990 = distinct !DILexicalBlock(scope: !9974, file: !3, line: 5230, column: 13)
!9991 = !DILocation(line: 5230, column: 17, scope: !9990)
!9992 = !DILocation(line: 5230, column: 15, scope: !9990)
!9993 = !DILocation(line: 5230, column: 22, scope: !9990)
!9994 = !DILocation(line: 5230, column: 19, scope: !9990)
!9995 = !DILocation(line: 5230, column: 13, scope: !9974)
!9996 = !DILocation(line: 5232, column: 26, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9990, file: !3, line: 5231, column: 9)
!9998 = !DILocation(line: 5232, column: 24, scope: !9997)
!9999 = !DILocation(line: 5232, column: 37, scope: !9997)
!10000 = !DILocation(line: 5232, column: 35, scope: !9997)
!10001 = !DILocation(line: 5232, column: 40, scope: !9997)
!10002 = !DILocation(line: 5232, column: 11, scope: !9997)
!10003 = !DILocation(line: 5233, column: 16, scope: !9997)
!10004 = !DILocation(line: 5233, column: 13, scope: !9997)
!10005 = !DILocation(line: 5234, column: 16, scope: !9997)
!10006 = !DILocation(line: 5234, column: 13, scope: !9997)
!10007 = !DILocation(line: 5235, column: 9, scope: !9997)
!10008 = !DILocation(line: 5238, column: 11, scope: !9990)
!10009 = !DILocation(line: 5239, column: 33, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !9990, file: !3, line: 5238, column: 14)
!10011 = !DILocation(line: 5239, column: 26, scope: !10010)
!10012 = !DILocation(line: 5239, column: 20, scope: !10010)
!10013 = !DILocation(line: 5239, column: 13, scope: !10010)
!10014 = !DILocation(line: 5239, column: 24, scope: !10010)
!10015 = !DILocation(line: 5241, column: 11, scope: !10010)
!10016 = !DILocation(line: 5241, column: 20, scope: !9990)
!10017 = distinct !{!10017, !10008, !10018}
!10018 = !DILocation(line: 5241, column: 23, scope: !9990)
!10019 = !DILocation(line: 5242, column: 13, scope: !10020)
!10020 = distinct !DILexicalBlock(scope: !9974, file: !3, line: 5242, column: 13)
!10021 = !DILocation(line: 5242, column: 15, scope: !10020)
!10022 = !DILocation(line: 5242, column: 13, scope: !9974)
!10023 = !DILocation(line: 5244, column: 11, scope: !10024)
!10024 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 5243, column: 9)
!10025 = !DILocation(line: 5245, column: 13, scope: !10024)
!10026 = !DILocation(line: 5246, column: 9, scope: !10024)
!10027 = !DILocation(line: 5247, column: 7, scope: !9974)
!10028 = !DILocation(line: 5247, column: 16, scope: !9880)
!10029 = distinct !{!10029, !9972, !10030}
!10030 = !DILocation(line: 5247, column: 17, scope: !9880)
!10031 = !DILocation(line: 5177, column: 3, scope: !9805)
!10032 = distinct !{!10032, !10033, !10034}
!10033 = !DILocation(line: 5177, column: 3, scope: !9806)
!10034 = !DILocation(line: 5249, column: 3, scope: !9806)
!10035 = !DILocation(line: 5253, column: 8, scope: !9760)
!10036 = !DILocation(line: 5253, column: 6, scope: !9760)
!10037 = !DILocation(line: 5254, column: 8, scope: !9760)
!10038 = !DILocation(line: 5254, column: 6, scope: !9760)
!10039 = !DILocation(line: 5255, column: 8, scope: !9760)
!10040 = !DILocation(line: 5255, column: 6, scope: !9760)
!10041 = !DILocation(line: 5258, column: 3, scope: !9760)
!10042 = !DILocation(line: 5259, column: 1, scope: !9760)
!10043 = !DILocalVariable(name: "iname", arg: 1, scope: !699, file: !3, line: 3818, type: !19)
!10044 = !DILocation(line: 3818, column: 11, scope: !699)
!10045 = !DILocalVariable(name: "sbuf", arg: 2, scope: !699, file: !3, line: 3819, type: !702)
!10046 = !DILocation(line: 3819, column: 18, scope: !699)
!10047 = !DILocalVariable(name: "ilen", scope: !699, file: !3, line: 3821, type: !12)
!10048 = !DILocation(line: 3821, column: 9, scope: !699)
!10049 = !DILocalVariable(name: "z_suffix_errno", scope: !699, file: !3, line: 3822, type: !12)
!10050 = !DILocation(line: 3822, column: 9, scope: !699)
!10051 = !DILocalVariable(name: "suf", scope: !699, file: !3, line: 3824, type: !23)
!10052 = !DILocation(line: 3824, column: 12, scope: !699)
!10053 = !DILocalVariable(name: "s", scope: !699, file: !3, line: 3825, type: !19)
!10054 = !DILocation(line: 3825, column: 11, scope: !699)
!10055 = !DILocation(line: 3830, column: 12, scope: !699)
!10056 = !DILocation(line: 3830, column: 6, scope: !699)
!10057 = !DILocation(line: 3830, column: 10, scope: !699)
!10058 = !DILocation(line: 3832, column: 38, scope: !10059)
!10059 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3832, column: 9)
!10060 = !DILocation(line: 3832, column: 30, scope: !10059)
!10061 = !DILocation(line: 3832, column: 27, scope: !10059)
!10062 = !DILocation(line: 3832, column: 9, scope: !699)
!10063 = !DILocation(line: 3833, column: 2, scope: !10059)
!10064 = !DILocation(line: 3835, column: 20, scope: !699)
!10065 = !DILocation(line: 3835, column: 5, scope: !699)
!10066 = !DILocation(line: 3838, column: 25, scope: !10067)
!10067 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3838, column: 9)
!10068 = !DILocation(line: 3838, column: 9, scope: !10067)
!10069 = !DILocation(line: 3838, column: 31, scope: !10067)
!10070 = !DILocation(line: 3838, column: 9, scope: !699)
!10071 = !DILocation(line: 3838, column: 37, scope: !10067)
!10072 = !DILocation(line: 3840, column: 10, scope: !10073)
!10073 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3840, column: 9)
!10074 = !DILocation(line: 3840, column: 21, scope: !10073)
!10075 = !DILocation(line: 3840, column: 24, scope: !10073)
!10076 = !DILocation(line: 3840, column: 30, scope: !10073)
!10077 = !DILocation(line: 3840, column: 9, scope: !699)
!10078 = !DILocation(line: 3841, column: 2, scope: !10079)
!10079 = distinct !DILexicalBlock(scope: !10073, file: !3, line: 3840, column: 41)
!10080 = !DILocation(line: 3842, column: 2, scope: !10079)
!10081 = !DILocation(line: 3847, column: 9, scope: !699)
!10082 = !DILocation(line: 3847, column: 7, scope: !699)
!10083 = !DILocation(line: 3848, column: 9, scope: !10084)
!10084 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3848, column: 9)
!10085 = !DILocation(line: 3848, column: 11, scope: !10084)
!10086 = !DILocation(line: 3848, column: 9, scope: !699)
!10087 = !DILocation(line: 3849, column: 2, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10084, file: !3, line: 3848, column: 20)
!10089 = !DILocation(line: 3850, column: 2, scope: !10088)
!10090 = !DILocation(line: 3859, column: 12, scope: !699)
!10091 = !DILocation(line: 3859, column: 10, scope: !699)
!10092 = !DILocation(line: 3860, column: 9, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3860, column: 9)
!10094 = !DILocation(line: 3860, column: 9, scope: !699)
!10095 = !DILocation(line: 3860, column: 37, scope: !10093)
!10096 = !DILocation(line: 3860, column: 34, scope: !10093)
!10097 = !DILocation(line: 3863, column: 5, scope: !699)
!10098 = !DILocalVariable(name: "s0", scope: !10099, file: !3, line: 3864, type: !19)
!10099 = distinct !DILexicalBlock(scope: !699, file: !3, line: 3863, column: 8)
!10100 = !DILocation(line: 3864, column: 15, scope: !10099)
!10101 = !DILocation(line: 3864, column: 25, scope: !10099)
!10102 = !DILocation(line: 3864, column: 24, scope: !10099)
!10103 = !DILocation(line: 3864, column: 22, scope: !10099)
!10104 = !DILocation(line: 3865, column: 25, scope: !10099)
!10105 = !DILocation(line: 3865, column: 9, scope: !10099)
!10106 = !DILocation(line: 3874, column: 23, scope: !10107)
!10107 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3874, column: 6)
!10108 = !DILocation(line: 3874, column: 38, scope: !10107)
!10109 = !DILocation(line: 3874, column: 30, scope: !10107)
!10110 = !DILocation(line: 3874, column: 28, scope: !10107)
!10111 = !DILocation(line: 3874, column: 20, scope: !10107)
!10112 = !DILocation(line: 3874, column: 6, scope: !10099)
!10113 = !DILocation(line: 3875, column: 4, scope: !10107)
!10114 = !DILocation(line: 3876, column: 24, scope: !10099)
!10115 = !DILocation(line: 3876, column: 9, scope: !10099)
!10116 = !DILocation(line: 3877, column: 29, scope: !10117)
!10117 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3877, column: 13)
!10118 = !DILocation(line: 3877, column: 13, scope: !10117)
!10119 = !DILocation(line: 3877, column: 35, scope: !10117)
!10120 = !DILocation(line: 3877, column: 13, scope: !10099)
!10121 = !DILocation(line: 3877, column: 41, scope: !10117)
!10122 = !DILocation(line: 3878, column: 6, scope: !10123)
!10123 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3878, column: 6)
!10124 = !DILocation(line: 3878, column: 6, scope: !10099)
!10125 = !DILocation(line: 3879, column: 21, scope: !10123)
!10126 = !DILocation(line: 3879, column: 19, scope: !10123)
!10127 = !DILocation(line: 3879, column: 4, scope: !10123)
!10128 = !DILocation(line: 3880, column: 5, scope: !10099)
!10129 = !DILocation(line: 3880, column: 15, scope: !699)
!10130 = !DILocation(line: 3880, column: 14, scope: !699)
!10131 = !DILocation(line: 3880, column: 21, scope: !699)
!10132 = distinct !{!10132, !10097, !10133}
!10133 = !DILocation(line: 3880, column: 28, scope: !699)
!10134 = !DILocation(line: 3883, column: 20, scope: !699)
!10135 = !DILocation(line: 3883, column: 5, scope: !699)
!10136 = !DILocation(line: 3891, column: 20, scope: !699)
!10137 = !DILocation(line: 3891, column: 5, scope: !699)
!10138 = !DILocation(line: 3892, column: 13, scope: !699)
!10139 = !DILocation(line: 3892, column: 5, scope: !699)
!10140 = !DILocation(line: 3892, column: 11, scope: !699)
!10141 = !DILocation(line: 3893, column: 5, scope: !699)
!10142 = !DILocation(line: 3894, column: 5, scope: !699)
!10143 = !DILabel(scope: !699, name: "name_too_long", file: !3, line: 3896)
!10144 = !DILocation(line: 3896, column: 2, scope: !699)
!10145 = !DILocation(line: 3897, column: 14, scope: !699)
!10146 = !DILocation(line: 3897, column: 54, scope: !699)
!10147 = !DILocation(line: 3897, column: 64, scope: !699)
!10148 = !DILocation(line: 3897, column: 5, scope: !699)
!10149 = !DILocation(line: 3898, column: 15, scope: !699)
!10150 = !DILocation(line: 3899, column: 5, scope: !699)
!10151 = !DILocation(line: 3900, column: 1, scope: !699)
!10152 = distinct !DISubprogram(name: "treat_dir", scope: !3, file: !3, line: 4533, type: !2624, scopeLine: 4535, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10153 = !DILocalVariable(name: "dir", arg: 1, scope: !10152, file: !3, line: 4534, type: !19)
!10154 = !DILocation(line: 4534, column: 11, scope: !10152)
!10155 = !DILocalVariable(name: "dp", scope: !10152, file: !3, line: 4536, type: !374)
!10156 = !DILocation(line: 4536, column: 20, scope: !10152)
!10157 = !DILocalVariable(name: "dirp", scope: !10152, file: !3, line: 4537, type: !385)
!10158 = !DILocation(line: 4537, column: 15, scope: !10152)
!10159 = !DILocalVariable(name: "nbuf", scope: !10152, file: !3, line: 4538, type: !276)
!10160 = !DILocation(line: 4538, column: 14, scope: !10152)
!10161 = !DILocalVariable(name: "len", scope: !10152, file: !3, line: 4539, type: !12)
!10162 = !DILocation(line: 4539, column: 14, scope: !10152)
!10163 = !DILocation(line: 4541, column: 20, scope: !10152)
!10164 = !DILocation(line: 4541, column: 12, scope: !10152)
!10165 = !DILocation(line: 4541, column: 10, scope: !10152)
!10166 = !DILocation(line: 4543, column: 9, scope: !10167)
!10167 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 4543, column: 9)
!10168 = !DILocation(line: 4543, column: 14, scope: !10167)
!10169 = !DILocation(line: 4543, column: 9, scope: !10152)
!10170 = !DILocation(line: 4544, column: 12, scope: !10171)
!10171 = distinct !DILexicalBlock(scope: !10167, file: !3, line: 4543, column: 23)
!10172 = !DILocation(line: 4544, column: 2, scope: !10171)
!10173 = !DILocation(line: 4545, column: 2, scope: !10171)
!10174 = !DILocation(line: 4563, column: 5, scope: !10152)
!10175 = !DILocation(line: 4563, column: 13, scope: !10152)
!10176 = !DILocation(line: 4563, column: 19, scope: !10152)
!10177 = !DILocation(line: 4563, column: 37, scope: !10152)
!10178 = !DILocation(line: 4563, column: 29, scope: !10152)
!10179 = !DILocation(line: 4563, column: 27, scope: !10152)
!10180 = !DILocation(line: 4563, column: 44, scope: !10152)
!10181 = !DILocation(line: 4565, column: 6, scope: !10182)
!10182 = distinct !DILexicalBlock(scope: !10183, file: !3, line: 4565, column: 6)
!10183 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 4563, column: 53)
!10184 = !DILocation(line: 4565, column: 29, scope: !10182)
!10185 = !DILocation(line: 4565, column: 32, scope: !10182)
!10186 = !DILocation(line: 4565, column: 6, scope: !10183)
!10187 = !DILocation(line: 4566, column: 6, scope: !10188)
!10188 = distinct !DILexicalBlock(scope: !10182, file: !3, line: 4565, column: 57)
!10189 = distinct !{!10189, !10174, !10190}
!10190 = !DILocation(line: 4588, column: 5, scope: !10152)
!10191 = !DILocation(line: 4568, column: 15, scope: !10183)
!10192 = !DILocation(line: 4568, column: 8, scope: !10183)
!10193 = !DILocation(line: 4568, column: 6, scope: !10183)
!10194 = !DILocation(line: 4569, column: 6, scope: !10195)
!10195 = distinct !DILexicalBlock(scope: !10183, file: !3, line: 4569, column: 6)
!10196 = !DILocation(line: 4569, column: 12, scope: !10195)
!10197 = !DILocation(line: 4569, column: 10, scope: !10195)
!10198 = !DILocation(line: 4569, column: 23, scope: !10195)
!10199 = !DILocation(line: 4569, column: 27, scope: !10195)
!10200 = !DILocation(line: 4569, column: 6, scope: !10183)
!10201 = !DILocation(line: 4570, column: 13, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !10195, file: !3, line: 4569, column: 47)
!10203 = !DILocation(line: 4570, column: 18, scope: !10202)
!10204 = !DILocation(line: 4570, column: 6, scope: !10202)
!10205 = !DILocation(line: 4571, column: 10, scope: !10206)
!10206 = distinct !DILexicalBlock(scope: !10202, file: !3, line: 4571, column: 10)
!10207 = !DILocation(line: 4571, column: 14, scope: !10206)
!10208 = !DILocation(line: 4571, column: 10, scope: !10202)
!10209 = !DILocation(line: 4579, column: 11, scope: !10210)
!10210 = distinct !DILexicalBlock(scope: !10206, file: !3, line: 4578, column: 8)
!10211 = !DILocation(line: 4579, column: 3, scope: !10210)
!10212 = !DILocation(line: 4579, column: 15, scope: !10210)
!10213 = !DILocation(line: 4580, column: 6, scope: !10210)
!10214 = !DILocation(line: 4581, column: 13, scope: !10202)
!10215 = !DILocation(line: 4581, column: 18, scope: !10202)
!10216 = !DILocation(line: 4581, column: 17, scope: !10202)
!10217 = !DILocation(line: 4581, column: 23, scope: !10202)
!10218 = !DILocation(line: 4581, column: 27, scope: !10202)
!10219 = !DILocation(line: 4581, column: 6, scope: !10202)
!10220 = !DILocation(line: 4582, column: 17, scope: !10202)
!10221 = !DILocation(line: 4582, column: 6, scope: !10202)
!10222 = !DILocation(line: 4583, column: 2, scope: !10202)
!10223 = !DILocation(line: 4584, column: 14, scope: !10224)
!10224 = distinct !DILexicalBlock(scope: !10195, file: !3, line: 4583, column: 9)
!10225 = !DILocation(line: 4585, column: 7, scope: !10224)
!10226 = !DILocation(line: 4585, column: 17, scope: !10224)
!10227 = !DILocation(line: 4585, column: 22, scope: !10224)
!10228 = !DILocation(line: 4585, column: 26, scope: !10224)
!10229 = !DILocation(line: 4584, column: 6, scope: !10224)
!10230 = !DILocation(line: 4586, column: 16, scope: !10224)
!10231 = !DILocation(line: 4589, column: 9, scope: !10232)
!10232 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 4589, column: 9)
!10233 = !DILocation(line: 4589, column: 15, scope: !10232)
!10234 = !DILocation(line: 4589, column: 9, scope: !10152)
!10235 = !DILocation(line: 4590, column: 12, scope: !10232)
!10236 = !DILocation(line: 4590, column: 2, scope: !10232)
!10237 = !DILocation(line: 4591, column: 9, scope: !10238)
!10238 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 4591, column: 9)
!10239 = !DILocation(line: 4591, column: 24, scope: !10238)
!10240 = !DILocation(line: 4591, column: 9, scope: !10152)
!10241 = !DILocation(line: 4592, column: 12, scope: !10238)
!10242 = !DILocation(line: 4592, column: 2, scope: !10238)
!10243 = !DILocation(line: 4593, column: 1, scope: !10152)
!10244 = distinct !DISubprogram(name: "reset_times", scope: !3, file: !3, line: 4465, type: !10245, scopeLine: 4468, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10245 = !DISubroutineType(types: !10246)
!10246 = !{null, !19, !702}
!10247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utimbuf", file: !10248, line: 36, size: 128, elements: !10249)
!10248 = !DIFile(filename: "/usr/include/utime.h", directory: "")
!10249 = !{!10250, !10251}
!10250 = !DIDerivedType(tag: DW_TAG_member, name: "actime", scope: !10247, file: !10248, line: 38, baseType: !144, size: 64)
!10251 = !DIDerivedType(tag: DW_TAG_member, name: "modtime", scope: !10247, file: !10248, line: 39, baseType: !144, size: 64, offset: 64)
!10252 = !DILocalVariable(name: "name", arg: 1, scope: !10244, file: !3, line: 4466, type: !19)
!10253 = !DILocation(line: 4466, column: 11, scope: !10244)
!10254 = !DILocalVariable(name: "statb", arg: 2, scope: !10244, file: !3, line: 4467, type: !702)
!10255 = !DILocation(line: 4467, column: 18, scope: !10244)
!10256 = !DILocalVariable(name: "timep", scope: !10244, file: !3, line: 4469, type: !10247)
!10257 = !DILocation(line: 4469, column: 20, scope: !10244)
!10258 = !DILocation(line: 4472, column: 21, scope: !10244)
!10259 = !DILocation(line: 4472, column: 28, scope: !10244)
!10260 = !DILocation(line: 4472, column: 11, scope: !10244)
!10261 = !DILocation(line: 4472, column: 19, scope: !10244)
!10262 = !DILocation(line: 4473, column: 21, scope: !10244)
!10263 = !DILocation(line: 4473, column: 28, scope: !10244)
!10264 = !DILocation(line: 4473, column: 11, scope: !10244)
!10265 = !DILocation(line: 4473, column: 19, scope: !10244)
!10266 = !DILocation(line: 4476, column: 15, scope: !10267)
!10267 = distinct !DILexicalBlock(scope: !10244, file: !3, line: 4476, column: 9)
!10268 = !DILocation(line: 4476, column: 9, scope: !10267)
!10269 = !DILocation(line: 4476, column: 29, scope: !10267)
!10270 = !DILocation(line: 4476, column: 33, scope: !10267)
!10271 = !DILocation(line: 4476, column: 9, scope: !10244)
!10272 = !DILocalVariable(name: "e", scope: !10273, file: !3, line: 4477, type: !12)
!10273 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 4476, column: 58)
!10274 = !DILocation(line: 4477, column: 6, scope: !10273)
!10275 = !DILocation(line: 4477, column: 10, scope: !10273)
!10276 = !DILocation(line: 4478, column: 2, scope: !10277)
!10277 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 4478, column: 2)
!10278 = distinct !DILexicalBlock(scope: !10273, file: !3, line: 4478, column: 2)
!10279 = !DILocation(line: 4478, column: 2, scope: !10278)
!10280 = !DILocation(line: 4478, column: 2, scope: !10281)
!10281 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 4478, column: 2)
!10282 = !DILocation(line: 4479, column: 7, scope: !10283)
!10283 = distinct !DILexicalBlock(scope: !10273, file: !3, line: 4479, column: 6)
!10284 = !DILocation(line: 4479, column: 6, scope: !10273)
!10285 = !DILocation(line: 4480, column: 14, scope: !10286)
!10286 = distinct !DILexicalBlock(scope: !10283, file: !3, line: 4479, column: 14)
!10287 = !DILocation(line: 4480, column: 6, scope: !10286)
!10288 = !DILocation(line: 4480, column: 12, scope: !10286)
!10289 = !DILocation(line: 4481, column: 6, scope: !10286)
!10290 = !DILocation(line: 4482, column: 2, scope: !10286)
!10291 = !DILocation(line: 4483, column: 5, scope: !10273)
!10292 = !DILocation(line: 4484, column: 1, scope: !10244)
!10293 = distinct !DISubprogram(name: "make_ofname", scope: !3, file: !3, line: 3906, type: !2583, scopeLine: 3907, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10294 = !DILocalVariable(name: "suff", scope: !10293, file: !3, line: 3908, type: !19)
!10295 = !DILocation(line: 3908, column: 11, scope: !10293)
!10296 = !DILocation(line: 3910, column: 5, scope: !10293)
!10297 = !DILocation(line: 3912, column: 12, scope: !10293)
!10298 = !DILocation(line: 3912, column: 10, scope: !10293)
!10299 = !DILocation(line: 3914, column: 9, scope: !10300)
!10300 = distinct !DILexicalBlock(scope: !10293, file: !3, line: 3914, column: 9)
!10301 = !DILocation(line: 3914, column: 9, scope: !10293)
!10302 = !DILocation(line: 3915, column: 6, scope: !10303)
!10303 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 3915, column: 6)
!10304 = distinct !DILexicalBlock(scope: !10300, file: !3, line: 3914, column: 21)
!10305 = !DILocation(line: 3915, column: 11, scope: !10303)
!10306 = !DILocation(line: 3915, column: 6, scope: !10304)
!10307 = !DILocation(line: 3919, column: 18, scope: !10308)
!10308 = distinct !DILexicalBlock(scope: !10309, file: !3, line: 3919, column: 17)
!10309 = distinct !DILexicalBlock(scope: !10303, file: !3, line: 3915, column: 20)
!10310 = !DILocation(line: 3919, column: 28, scope: !10308)
!10311 = !DILocation(line: 3919, column: 32, scope: !10308)
!10312 = !DILocation(line: 3919, column: 37, scope: !10308)
!10313 = !DILocation(line: 3919, column: 40, scope: !10308)
!10314 = !DILocation(line: 3919, column: 17, scope: !10309)
!10315 = !DILocation(line: 3919, column: 47, scope: !10308)
!10316 = !DILocation(line: 3922, column: 10, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10309, file: !3, line: 3922, column: 10)
!10318 = !DILocation(line: 3922, column: 18, scope: !10317)
!10319 = !DILocation(line: 3922, column: 23, scope: !10317)
!10320 = !DILocation(line: 3922, column: 33, scope: !10317)
!10321 = !DILocation(line: 3922, column: 37, scope: !10317)
!10322 = !DILocation(line: 3922, column: 10, scope: !10309)
!10323 = !DILocation(line: 3923, column: 3, scope: !10324)
!10324 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3923, column: 3)
!10325 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 3923, column: 3)
!10326 = distinct !DILexicalBlock(scope: !10317, file: !3, line: 3922, column: 45)
!10327 = !DILocation(line: 3923, column: 3, scope: !10325)
!10328 = !DILocation(line: 3923, column: 3, scope: !10329)
!10329 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3923, column: 3)
!10330 = !DILocation(line: 3925, column: 6, scope: !10326)
!10331 = !DILocation(line: 3926, column: 6, scope: !10309)
!10332 = !DILocation(line: 3929, column: 9, scope: !10304)
!10333 = !DILocation(line: 3929, column: 2, scope: !10304)
!10334 = !DILocation(line: 3930, column: 6, scope: !10335)
!10335 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 3930, column: 6)
!10336 = !DILocation(line: 3930, column: 27, scope: !10335)
!10337 = !DILocation(line: 3930, column: 30, scope: !10335)
!10338 = !DILocation(line: 3930, column: 6, scope: !10304)
!10339 = !DILocation(line: 3931, column: 13, scope: !10340)
!10340 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 3930, column: 52)
!10341 = !DILocation(line: 3931, column: 6, scope: !10340)
!10342 = !DILocation(line: 3932, column: 2, scope: !10340)
!10343 = !DILocation(line: 3933, column: 7, scope: !10344)
!10344 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 3932, column: 9)
!10345 = !DILocation(line: 3933, column: 12, scope: !10344)
!10346 = !DILocation(line: 3937, column: 5, scope: !10304)
!10347 = !DILocation(line: 3937, column: 16, scope: !10348)
!10348 = distinct !DILexicalBlock(scope: !10300, file: !3, line: 3937, column: 16)
!10349 = !DILocation(line: 3937, column: 21, scope: !10348)
!10350 = !DILocation(line: 3937, column: 16, scope: !10300)
!10351 = !DILocation(line: 3939, column: 6, scope: !10352)
!10352 = distinct !DILexicalBlock(scope: !10353, file: !3, line: 3939, column: 6)
!10353 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 3937, column: 30)
!10354 = !DILocation(line: 3939, column: 14, scope: !10352)
!10355 = !DILocation(line: 3939, column: 19, scope: !10352)
!10356 = !DILocation(line: 3939, column: 29, scope: !10352)
!10357 = !DILocation(line: 3939, column: 33, scope: !10352)
!10358 = !DILocation(line: 3939, column: 6, scope: !10353)
!10359 = !DILocation(line: 3941, column: 14, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10352, file: !3, line: 3939, column: 41)
!10361 = !DILocation(line: 3942, column: 5, scope: !10360)
!10362 = !DILocation(line: 3942, column: 23, scope: !10360)
!10363 = !DILocation(line: 3941, column: 6, scope: !10360)
!10364 = !DILocation(line: 3943, column: 2, scope: !10360)
!10365 = !DILocation(line: 3944, column: 2, scope: !10353)
!10366 = !DILocation(line: 3946, column: 24, scope: !10367)
!10367 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 3945, column: 12)
!10368 = !DILocation(line: 3971, column: 23, scope: !10369)
!10369 = distinct !DILexicalBlock(scope: !10367, file: !3, line: 3971, column: 6)
!10370 = !DILocation(line: 3971, column: 41, scope: !10369)
!10371 = !DILocation(line: 3971, column: 39, scope: !10369)
!10372 = !DILocation(line: 3971, column: 20, scope: !10369)
!10373 = !DILocation(line: 3971, column: 6, scope: !10367)
!10374 = !DILocation(line: 3972, column: 6, scope: !10369)
!10375 = !DILocation(line: 3973, column: 17, scope: !10367)
!10376 = !DILocation(line: 3973, column: 2, scope: !10367)
!10377 = !DILocation(line: 3976, column: 5, scope: !10293)
!10378 = !DILabel(scope: !10293, name: "name_too_long", file: !3, line: 3978)
!10379 = !DILocation(line: 3978, column: 2, scope: !10293)
!10380 = !DILocation(line: 3979, column: 5, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10382, file: !3, line: 3979, column: 5)
!10382 = distinct !DILexicalBlock(scope: !10293, file: !3, line: 3979, column: 5)
!10383 = !DILocation(line: 3979, column: 5, scope: !10382)
!10384 = !DILocation(line: 3979, column: 5, scope: !10385)
!10385 = distinct !DILexicalBlock(scope: !10382, file: !3, line: 3979, column: 5)
!10386 = !DILocation(line: 3980, column: 5, scope: !10293)
!10387 = !DILocation(line: 3981, column: 1, scope: !10293)
!10388 = distinct !DISubprogram(name: "create_outfile", scope: !3, file: !3, line: 3687, type: !2583, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10389 = !DILocalVariable(name: "ostat", scope: !10388, file: !3, line: 3689, type: !575)
!10390 = !DILocation(line: 3689, column: 17, scope: !10388)
!10391 = !DILocalVariable(name: "flags", scope: !10388, file: !3, line: 3690, type: !12)
!10392 = !DILocation(line: 3690, column: 9, scope: !10388)
!10393 = !DILocation(line: 3692, column: 9, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 3692, column: 9)
!10395 = !DILocation(line: 3692, column: 15, scope: !10394)
!10396 = !DILocation(line: 3692, column: 18, scope: !10394)
!10397 = !DILocation(line: 3692, column: 9, scope: !10388)
!10398 = !DILocation(line: 3693, column: 8, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !10394, file: !3, line: 3692, column: 30)
!10400 = !DILocation(line: 3694, column: 5, scope: !10399)
!10401 = !DILocation(line: 3695, column: 5, scope: !10388)
!10402 = !DILocation(line: 3697, column: 6, scope: !10403)
!10403 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 3697, column: 6)
!10404 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 3695, column: 14)
!10405 = distinct !DILexicalBlock(scope: !10406, file: !3, line: 3695, column: 5)
!10406 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 3695, column: 5)
!10407 = !DILocation(line: 3697, column: 21, scope: !10403)
!10408 = !DILocation(line: 3697, column: 6, scope: !10404)
!10409 = !DILocation(line: 3698, column: 12, scope: !10410)
!10410 = distinct !DILexicalBlock(scope: !10403, file: !3, line: 3697, column: 28)
!10411 = !DILocation(line: 3698, column: 6, scope: !10410)
!10412 = !DILocation(line: 3699, column: 6, scope: !10410)
!10413 = !DILocation(line: 3702, column: 16, scope: !10404)
!10414 = !DILocation(line: 3703, column: 8, scope: !10404)
!10415 = !DILocation(line: 3703, column: 6, scope: !10404)
!10416 = !DILocation(line: 3704, column: 6, scope: !10417)
!10417 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 3704, column: 6)
!10418 = !DILocation(line: 3704, column: 10, scope: !10417)
!10419 = !DILocation(line: 3704, column: 6, scope: !10404)
!10420 = !DILocation(line: 3705, column: 6, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10417, file: !3, line: 3704, column: 17)
!10422 = !DILocation(line: 3706, column: 12, scope: !10421)
!10423 = !DILocation(line: 3706, column: 6, scope: !10421)
!10424 = !DILocation(line: 3707, column: 6, scope: !10421)
!10425 = !DILocation(line: 3714, column: 12, scope: !10426)
!10426 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 3714, column: 6)
!10427 = !DILocation(line: 3714, column: 6, scope: !10426)
!10428 = !DILocation(line: 3714, column: 25, scope: !10426)
!10429 = !DILocation(line: 3714, column: 6, scope: !10404)
!10430 = !DILocation(line: 3716, column: 6, scope: !10431)
!10431 = distinct !DILexicalBlock(scope: !10426, file: !3, line: 3714, column: 31)
!10432 = !DILocation(line: 3717, column: 12, scope: !10431)
!10433 = !DILocation(line: 3717, column: 6, scope: !10431)
!10434 = !DILocation(line: 3717, column: 24, scope: !10431)
!10435 = !DILocation(line: 3717, column: 18, scope: !10431)
!10436 = !DILocation(line: 3718, column: 6, scope: !10431)
!10437 = !DILocation(line: 3719, column: 6, scope: !10431)
!10438 = !DILocation(line: 3721, column: 7, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 3721, column: 6)
!10440 = !DILocation(line: 3721, column: 6, scope: !10404)
!10441 = !DILocation(line: 3721, column: 38, scope: !10439)
!10442 = !DILocation(line: 3723, column: 6, scope: !10443)
!10443 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 3723, column: 6)
!10444 = !DILocation(line: 3723, column: 6, scope: !10404)
!10445 = !DILocation(line: 3725, column: 6, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10447, file: !3, line: 3725, column: 6)
!10447 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 3725, column: 6)
!10448 = distinct !DILexicalBlock(scope: !10443, file: !3, line: 3723, column: 18)
!10449 = !DILocation(line: 3725, column: 6, scope: !10447)
!10450 = !DILocation(line: 3725, column: 6, scope: !10451)
!10451 = distinct !DILexicalBlock(scope: !10447, file: !3, line: 3725, column: 6)
!10452 = !DILocation(line: 3727, column: 6, scope: !10448)
!10453 = !DILocation(line: 3729, column: 8, scope: !10404)
!10454 = !DILocation(line: 3729, column: 2, scope: !10404)
!10455 = !DILocation(line: 3730, column: 2, scope: !10404)
!10456 = !DILocation(line: 3736, column: 2, scope: !10404)
!10457 = !DILocation(line: 3695, column: 5, scope: !10405)
!10458 = distinct !{!10458, !10459, !10460}
!10459 = !DILocation(line: 3695, column: 5, scope: !10406)
!10460 = !DILocation(line: 3737, column: 5, scope: !10406)
!10461 = !DILocation(line: 3738, column: 1, scope: !10388)
!10462 = distinct !DISubprogram(name: "copy_stat", scope: !3, file: !3, line: 4492, type: !10463, scopeLine: 4494, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10463 = !DISubroutineType(types: !10464)
!10464 = !{null, !702}
!10465 = !DILocalVariable(name: "ifstat", arg: 1, scope: !10462, file: !3, line: 4493, type: !702)
!10466 = !DILocation(line: 4493, column: 18, scope: !10462)
!10467 = !DILocation(line: 4496, column: 9, scope: !10468)
!10468 = distinct !DILexicalBlock(scope: !10462, file: !3, line: 4496, column: 9)
!10469 = !DILocation(line: 4496, column: 20, scope: !10468)
!10470 = !DILocation(line: 4496, column: 23, scope: !10468)
!10471 = !DILocation(line: 4496, column: 34, scope: !10468)
!10472 = !DILocation(line: 4496, column: 39, scope: !10468)
!10473 = !DILocation(line: 4496, column: 42, scope: !10468)
!10474 = !DILocation(line: 4496, column: 50, scope: !10468)
!10475 = !DILocation(line: 4496, column: 62, scope: !10468)
!10476 = !DILocation(line: 4496, column: 59, scope: !10468)
!10477 = !DILocation(line: 4496, column: 9, scope: !10462)
!10478 = !DILocation(line: 4497, column: 21, scope: !10479)
!10479 = distinct !DILexicalBlock(scope: !10468, file: !3, line: 4496, column: 74)
!10480 = !DILocation(line: 4497, column: 2, scope: !10479)
!10481 = !DILocation(line: 4497, column: 10, scope: !10479)
!10482 = !DILocation(line: 4497, column: 19, scope: !10479)
!10483 = !DILocation(line: 4498, column: 6, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10479, file: !3, line: 4498, column: 6)
!10485 = !DILocation(line: 4498, column: 14, scope: !10484)
!10486 = !DILocation(line: 4498, column: 6, scope: !10479)
!10487 = !DILocation(line: 4499, column: 14, scope: !10488)
!10488 = distinct !DILexicalBlock(scope: !10484, file: !3, line: 4498, column: 19)
!10489 = !DILocation(line: 4499, column: 6, scope: !10488)
!10490 = !DILocation(line: 4500, column: 2, scope: !10488)
!10491 = !DILocation(line: 4501, column: 5, scope: !10479)
!10492 = !DILocation(line: 4502, column: 25, scope: !10462)
!10493 = !DILocation(line: 4502, column: 5, scope: !10462)
!10494 = !DILocation(line: 4505, column: 16, scope: !10495)
!10495 = distinct !DILexicalBlock(scope: !10462, file: !3, line: 4505, column: 9)
!10496 = !DILocation(line: 4505, column: 21, scope: !10495)
!10497 = !DILocation(line: 4505, column: 29, scope: !10495)
!10498 = !DILocation(line: 4505, column: 37, scope: !10495)
!10499 = !DILocation(line: 4505, column: 9, scope: !10495)
!10500 = !DILocation(line: 4505, column: 9, scope: !10462)
!10501 = !DILocalVariable(name: "e", scope: !10502, file: !3, line: 4506, type: !12)
!10502 = distinct !DILexicalBlock(scope: !10495, file: !3, line: 4505, column: 47)
!10503 = !DILocation(line: 4506, column: 6, scope: !10502)
!10504 = !DILocation(line: 4506, column: 10, scope: !10502)
!10505 = !DILocation(line: 4507, column: 2, scope: !10506)
!10506 = distinct !DILexicalBlock(scope: !10507, file: !3, line: 4507, column: 2)
!10507 = distinct !DILexicalBlock(scope: !10502, file: !3, line: 4507, column: 2)
!10508 = !DILocation(line: 4507, column: 2, scope: !10507)
!10509 = !DILocation(line: 4507, column: 2, scope: !10510)
!10510 = distinct !DILexicalBlock(scope: !10507, file: !3, line: 4507, column: 2)
!10511 = !DILocation(line: 4508, column: 7, scope: !10512)
!10512 = distinct !DILexicalBlock(scope: !10502, file: !3, line: 4508, column: 6)
!10513 = !DILocation(line: 4508, column: 6, scope: !10502)
!10514 = !DILocation(line: 4509, column: 14, scope: !10515)
!10515 = distinct !DILexicalBlock(scope: !10512, file: !3, line: 4508, column: 14)
!10516 = !DILocation(line: 4509, column: 6, scope: !10515)
!10517 = !DILocation(line: 4509, column: 12, scope: !10515)
!10518 = !DILocation(line: 4510, column: 6, scope: !10515)
!10519 = !DILocation(line: 4511, column: 2, scope: !10515)
!10520 = !DILocation(line: 4512, column: 5, scope: !10502)
!10521 = !DILocation(line: 4514, column: 12, scope: !10462)
!10522 = !DILocation(line: 4514, column: 17, scope: !10462)
!10523 = !DILocation(line: 4514, column: 25, scope: !10462)
!10524 = !DILocation(line: 4514, column: 33, scope: !10462)
!10525 = !DILocation(line: 4514, column: 41, scope: !10462)
!10526 = !DILocation(line: 4514, column: 5, scope: !10462)
!10527 = !DILocation(line: 4516, column: 19, scope: !10462)
!10528 = !DILocation(line: 4518, column: 9, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10462, file: !3, line: 4518, column: 9)
!10530 = !DILocation(line: 4518, column: 9, scope: !10462)
!10531 = !DILocalVariable(name: "e", scope: !10532, file: !3, line: 4519, type: !12)
!10532 = distinct !DILexicalBlock(scope: !10529, file: !3, line: 4518, column: 27)
!10533 = !DILocation(line: 4519, column: 6, scope: !10532)
!10534 = !DILocation(line: 4519, column: 10, scope: !10532)
!10535 = !DILocation(line: 4520, column: 2, scope: !10536)
!10536 = distinct !DILexicalBlock(scope: !10537, file: !3, line: 4520, column: 2)
!10537 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 4520, column: 2)
!10538 = !DILocation(line: 4520, column: 2, scope: !10537)
!10539 = !DILocation(line: 4520, column: 2, scope: !10540)
!10540 = distinct !DILexicalBlock(scope: !10537, file: !3, line: 4520, column: 2)
!10541 = !DILocation(line: 4521, column: 7, scope: !10542)
!10542 = distinct !DILexicalBlock(scope: !10532, file: !3, line: 4521, column: 6)
!10543 = !DILocation(line: 4521, column: 6, scope: !10532)
!10544 = !DILocation(line: 4522, column: 14, scope: !10545)
!10545 = distinct !DILexicalBlock(scope: !10542, file: !3, line: 4521, column: 14)
!10546 = !DILocation(line: 4522, column: 6, scope: !10545)
!10547 = !DILocation(line: 4522, column: 12, scope: !10545)
!10548 = !DILocation(line: 4523, column: 6, scope: !10545)
!10549 = !DILocation(line: 4524, column: 2, scope: !10545)
!10550 = !DILocation(line: 4525, column: 5, scope: !10532)
!10551 = !DILocation(line: 4526, column: 1, scope: !10462)
!10552 = distinct !DISubprogram(name: "check_ofname", scope: !3, file: !3, line: 4399, type: !2583, scopeLine: 4400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10553 = !DILocalVariable(name: "ostat", scope: !10552, file: !3, line: 4401, type: !575)
!10554 = !DILocation(line: 4401, column: 17, scope: !10552)
!10555 = !DILocation(line: 4407, column: 5, scope: !10552)
!10556 = !DILocation(line: 4407, column: 11, scope: !10552)
!10557 = !DILocation(line: 4408, column: 5, scope: !10552)
!10558 = !DILocation(line: 4408, column: 12, scope: !10552)
!10559 = !DILocation(line: 4408, column: 34, scope: !10552)
!10560 = !DILocation(line: 4409, column: 13, scope: !10561)
!10561 = distinct !DILexicalBlock(scope: !10562, file: !3, line: 4409, column: 13)
!10562 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 4408, column: 40)
!10563 = !DILocation(line: 4409, column: 19, scope: !10561)
!10564 = !DILocation(line: 4409, column: 13, scope: !10562)
!10565 = !DILocation(line: 4409, column: 36, scope: !10561)
!10566 = !DILocation(line: 4410, column: 2, scope: !10562)
!10567 = distinct !{!10567, !10557, !10568}
!10568 = !DILocation(line: 4411, column: 5, scope: !10552)
!10569 = !DILocation(line: 4419, column: 10, scope: !10570)
!10570 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 4419, column: 9)
!10571 = !DILocation(line: 4419, column: 21, scope: !10570)
!10572 = !DILocation(line: 4419, column: 24, scope: !10570)
!10573 = !DILocation(line: 4419, column: 9, scope: !10552)
!10574 = !DILocation(line: 4420, column: 2, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10570, file: !3, line: 4419, column: 55)
!10576 = !DILocation(line: 4421, column: 6, scope: !10577)
!10577 = distinct !DILexicalBlock(scope: !10575, file: !3, line: 4421, column: 6)
!10578 = !DILocation(line: 4421, column: 28, scope: !10577)
!10579 = !DILocation(line: 4421, column: 6, scope: !10575)
!10580 = !DILocation(line: 4421, column: 34, scope: !10577)
!10581 = !DILocation(line: 4422, column: 5, scope: !10575)
!10582 = !DILocation(line: 4427, column: 9, scope: !10583)
!10583 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 4427, column: 9)
!10584 = !DILocation(line: 4427, column: 9, scope: !10552)
!10585 = !DILocation(line: 4428, column: 6, scope: !10586)
!10586 = distinct !DILexicalBlock(scope: !10587, file: !3, line: 4428, column: 6)
!10587 = distinct !DILexicalBlock(scope: !10583, file: !3, line: 4427, column: 36)
!10588 = !DILocation(line: 4428, column: 6, scope: !10587)
!10589 = !DILocation(line: 4429, column: 14, scope: !10590)
!10590 = distinct !DILexicalBlock(scope: !10586, file: !3, line: 4428, column: 30)
!10591 = !DILocation(line: 4430, column: 7, scope: !10590)
!10592 = !DILocation(line: 4430, column: 25, scope: !10590)
!10593 = !DILocation(line: 4429, column: 6, scope: !10590)
!10594 = !DILocation(line: 4431, column: 2, scope: !10590)
!10595 = !DILocation(line: 4432, column: 14, scope: !10596)
!10596 = distinct !DILexicalBlock(scope: !10586, file: !3, line: 4431, column: 9)
!10597 = !DILocation(line: 4433, column: 7, scope: !10596)
!10598 = !DILocation(line: 4432, column: 6, scope: !10596)
!10599 = !DILocation(line: 4435, column: 12, scope: !10587)
!10600 = !DILocation(line: 4436, column: 2, scope: !10587)
!10601 = !DILocation(line: 4439, column: 10, scope: !10602)
!10602 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 4439, column: 9)
!10603 = !DILocation(line: 4439, column: 9, scope: !10552)
!10604 = !DILocalVariable(name: "ok", scope: !10605, file: !3, line: 4440, type: !12)
!10605 = distinct !DILexicalBlock(scope: !10602, file: !3, line: 4439, column: 17)
!10606 = !DILocation(line: 4440, column: 6, scope: !10605)
!10607 = !DILocation(line: 4441, column: 10, scope: !10605)
!10608 = !DILocation(line: 4441, column: 44, scope: !10605)
!10609 = !DILocation(line: 4441, column: 2, scope: !10605)
!10610 = !DILocation(line: 4442, column: 6, scope: !10611)
!10611 = distinct !DILexicalBlock(scope: !10605, file: !3, line: 4442, column: 6)
!10612 = !DILocation(line: 4442, column: 17, scope: !10611)
!10613 = !DILocation(line: 4442, column: 34, scope: !10611)
!10614 = !DILocation(line: 4442, column: 27, scope: !10611)
!10615 = !DILocation(line: 4442, column: 20, scope: !10611)
!10616 = !DILocation(line: 4442, column: 6, scope: !10605)
!10617 = !DILocation(line: 4443, column: 14, scope: !10618)
!10618 = distinct !DILexicalBlock(scope: !10611, file: !3, line: 4442, column: 43)
!10619 = !DILocation(line: 4443, column: 6, scope: !10618)
!10620 = !DILocation(line: 4444, column: 13, scope: !10618)
!10621 = !DILocation(line: 4444, column: 6, scope: !10618)
!10622 = !DILocation(line: 4445, column: 11, scope: !10618)
!10623 = !DILocation(line: 4445, column: 9, scope: !10618)
!10624 = !DILocation(line: 4446, column: 2, scope: !10618)
!10625 = !DILocation(line: 4447, column: 7, scope: !10626)
!10626 = distinct !DILexicalBlock(scope: !10605, file: !3, line: 4447, column: 6)
!10627 = !DILocation(line: 4447, column: 6, scope: !10605)
!10628 = !DILocation(line: 4448, column: 14, scope: !10629)
!10629 = distinct !DILexicalBlock(scope: !10626, file: !3, line: 4447, column: 11)
!10630 = !DILocation(line: 4448, column: 6, scope: !10629)
!10631 = !DILocation(line: 4449, column: 10, scope: !10632)
!10632 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 4449, column: 10)
!10633 = !DILocation(line: 4449, column: 20, scope: !10632)
!10634 = !DILocation(line: 4449, column: 10, scope: !10629)
!10635 = !DILocation(line: 4449, column: 37, scope: !10632)
!10636 = !DILocation(line: 4449, column: 27, scope: !10632)
!10637 = !DILocation(line: 4450, column: 6, scope: !10629)
!10638 = !DILocation(line: 4452, column: 5, scope: !10605)
!10639 = !DILocation(line: 4453, column: 9, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 4453, column: 9)
!10641 = !DILocation(line: 4453, column: 9, scope: !10552)
!10642 = !DILocation(line: 4454, column: 2, scope: !10643)
!10643 = distinct !DILexicalBlock(scope: !10640, file: !3, line: 4453, column: 27)
!10644 = !DILocation(line: 4455, column: 2, scope: !10643)
!10645 = !DILocation(line: 4457, column: 5, scope: !10552)
!10646 = !DILocation(line: 4458, column: 1, scope: !10552)
!10647 = distinct !DISubprogram(name: "name_too_long", scope: !3, file: !3, line: 4307, type: !700, scopeLine: 4310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10648 = !DILocalVariable(name: "name", arg: 1, scope: !10647, file: !3, line: 4308, type: !19)
!10649 = !DILocation(line: 4308, column: 11, scope: !10647)
!10650 = !DILocalVariable(name: "statb", arg: 2, scope: !10647, file: !3, line: 4309, type: !702)
!10651 = !DILocation(line: 4309, column: 18, scope: !10647)
!10652 = !DILocalVariable(name: "s", scope: !10647, file: !3, line: 4311, type: !12)
!10653 = !DILocation(line: 4311, column: 9, scope: !10647)
!10654 = !DILocation(line: 4311, column: 20, scope: !10647)
!10655 = !DILocation(line: 4311, column: 13, scope: !10647)
!10656 = !DILocalVariable(name: "c", scope: !10647, file: !3, line: 4312, type: !20)
!10657 = !DILocation(line: 4312, column: 10, scope: !10647)
!10658 = !DILocation(line: 4312, column: 14, scope: !10647)
!10659 = !DILocation(line: 4312, column: 19, scope: !10647)
!10660 = !DILocation(line: 4312, column: 20, scope: !10647)
!10661 = !DILocalVariable(name: "tstat", scope: !10647, file: !3, line: 4313, type: !575)
!10662 = !DILocation(line: 4313, column: 17, scope: !10647)
!10663 = !DILocalVariable(name: "res", scope: !10647, file: !3, line: 4314, type: !12)
!10664 = !DILocation(line: 4314, column: 9, scope: !10647)
!10665 = !DILocation(line: 4316, column: 14, scope: !10647)
!10666 = !DILocation(line: 4316, column: 13, scope: !10647)
!10667 = !DILocation(line: 4317, column: 5, scope: !10647)
!10668 = !DILocation(line: 4317, column: 10, scope: !10647)
!10669 = !DILocation(line: 4317, column: 11, scope: !10647)
!10670 = !DILocation(line: 4317, column: 15, scope: !10647)
!10671 = !DILocation(line: 4318, column: 17, scope: !10647)
!10672 = !DILocation(line: 4318, column: 11, scope: !10647)
!10673 = !DILocation(line: 4318, column: 31, scope: !10647)
!10674 = !DILocation(line: 4318, column: 36, scope: !10647)
!10675 = !DILocation(line: 4318, column: 49, scope: !10647)
!10676 = !DILocation(line: 4318, column: 39, scope: !10647)
!10677 = !DILocation(line: 0, scope: !10647)
!10678 = !DILocation(line: 4318, column: 9, scope: !10647)
!10679 = !DILocation(line: 4319, column: 17, scope: !10647)
!10680 = !DILocation(line: 4319, column: 5, scope: !10647)
!10681 = !DILocation(line: 4319, column: 10, scope: !10647)
!10682 = !DILocation(line: 4319, column: 11, scope: !10647)
!10683 = !DILocation(line: 4319, column: 15, scope: !10647)
!10684 = !DILocation(line: 4321, column: 12, scope: !10647)
!10685 = !DILocation(line: 4321, column: 5, scope: !10647)
!10686 = distinct !DISubprogram(name: "shorten_name", scope: !3, file: !3, line: 4333, type: !2624, scopeLine: 4335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10687 = !DILocalVariable(name: "name", arg: 1, scope: !10686, file: !3, line: 4334, type: !19)
!10688 = !DILocation(line: 4334, column: 11, scope: !10686)
!10689 = !DILocalVariable(name: "len", scope: !10686, file: !3, line: 4336, type: !12)
!10690 = !DILocation(line: 4336, column: 9, scope: !10686)
!10691 = !DILocalVariable(name: "trunc", scope: !10686, file: !3, line: 4337, type: !19)
!10692 = !DILocation(line: 4337, column: 11, scope: !10686)
!10693 = !DILocalVariable(name: "plen", scope: !10686, file: !3, line: 4338, type: !12)
!10694 = !DILocation(line: 4338, column: 9, scope: !10686)
!10695 = !DILocalVariable(name: "min_part", scope: !10686, file: !3, line: 4339, type: !12)
!10696 = !DILocation(line: 4339, column: 9, scope: !10686)
!10697 = !DILocalVariable(name: "p", scope: !10686, file: !3, line: 4340, type: !19)
!10698 = !DILocation(line: 4340, column: 11, scope: !10686)
!10699 = !DILocation(line: 4342, column: 18, scope: !10686)
!10700 = !DILocation(line: 4342, column: 11, scope: !10686)
!10701 = !DILocation(line: 4342, column: 9, scope: !10686)
!10702 = !DILocation(line: 4343, column: 9, scope: !10703)
!10703 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 4343, column: 9)
!10704 = !DILocation(line: 4343, column: 9, scope: !10686)
!10705 = !DILocation(line: 4344, column: 6, scope: !10706)
!10706 = distinct !DILexicalBlock(scope: !10707, file: !3, line: 4344, column: 6)
!10707 = distinct !DILexicalBlock(scope: !10703, file: !3, line: 4343, column: 21)
!10708 = !DILocation(line: 4344, column: 10, scope: !10706)
!10709 = !DILocation(line: 4344, column: 6, scope: !10707)
!10710 = !DILocation(line: 4344, column: 16, scope: !10706)
!10711 = !DILocation(line: 4345, column: 2, scope: !10707)
!10712 = !DILocation(line: 4345, column: 7, scope: !10707)
!10713 = !DILocation(line: 4345, column: 10, scope: !10707)
!10714 = !DILocation(line: 4345, column: 14, scope: !10707)
!10715 = !DILocation(line: 4346, column: 2, scope: !10707)
!10716 = !DILocation(line: 4348, column: 20, scope: !10686)
!10717 = !DILocation(line: 4348, column: 9, scope: !10686)
!10718 = !DILocation(line: 4348, column: 7, scope: !10686)
!10719 = !DILocation(line: 4349, column: 9, scope: !10720)
!10720 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 4349, column: 9)
!10721 = !DILocation(line: 4349, column: 11, scope: !10720)
!10722 = !DILocation(line: 4349, column: 9, scope: !10686)
!10723 = !DILocation(line: 4349, column: 20, scope: !10720)
!10724 = !DILocation(line: 4350, column: 6, scope: !10686)
!10725 = !DILocation(line: 4350, column: 8, scope: !10686)
!10726 = !DILocation(line: 4351, column: 20, scope: !10686)
!10727 = !DILocation(line: 4354, column: 9, scope: !10728)
!10728 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 4354, column: 9)
!10729 = !DILocation(line: 4354, column: 13, scope: !10728)
!10730 = !DILocation(line: 4354, column: 17, scope: !10728)
!10731 = !DILocation(line: 4354, column: 20, scope: !10728)
!10732 = !DILocation(line: 4354, column: 9, scope: !10686)
!10733 = !DILocation(line: 4355, column: 9, scope: !10734)
!10734 = distinct !DILexicalBlock(scope: !10728, file: !3, line: 4354, column: 41)
!10735 = !DILocation(line: 4355, column: 10, scope: !10734)
!10736 = !DILocation(line: 4355, column: 2, scope: !10734)
!10737 = !DILocation(line: 4356, column: 2, scope: !10734)
!10738 = !DILocation(line: 4361, column: 5, scope: !10686)
!10739 = !DILocation(line: 4362, column: 14, scope: !10740)
!10740 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 4361, column: 8)
!10741 = !DILocation(line: 4362, column: 6, scope: !10740)
!10742 = !DILocation(line: 4362, column: 4, scope: !10740)
!10743 = !DILocation(line: 4363, column: 6, scope: !10740)
!10744 = !DILocation(line: 4363, column: 10, scope: !10740)
!10745 = !DILocation(line: 4363, column: 11, scope: !10740)
!10746 = !DILocation(line: 4363, column: 16, scope: !10740)
!10747 = !DILocation(line: 4363, column: 4, scope: !10740)
!10748 = !DILocation(line: 4364, column: 2, scope: !10740)
!10749 = !DILocation(line: 4364, column: 10, scope: !10740)
!10750 = !DILocation(line: 4364, column: 9, scope: !10740)
!10751 = !DILocation(line: 4365, column: 21, scope: !10752)
!10752 = distinct !DILexicalBlock(scope: !10740, file: !3, line: 4364, column: 13)
!10753 = !DILocation(line: 4365, column: 13, scope: !10752)
!10754 = !DILocation(line: 4365, column: 11, scope: !10752)
!10755 = !DILocation(line: 4366, column: 11, scope: !10752)
!10756 = !DILocation(line: 4366, column: 8, scope: !10752)
!10757 = !DILocation(line: 4367, column: 10, scope: !10758)
!10758 = distinct !DILexicalBlock(scope: !10752, file: !3, line: 4367, column: 10)
!10759 = !DILocation(line: 4367, column: 17, scope: !10758)
!10760 = !DILocation(line: 4367, column: 15, scope: !10758)
!10761 = !DILocation(line: 4367, column: 10, scope: !10752)
!10762 = !DILocation(line: 4367, column: 35, scope: !10758)
!10763 = !DILocation(line: 4367, column: 36, scope: !10758)
!10764 = !DILocation(line: 4367, column: 33, scope: !10758)
!10765 = !DILocation(line: 4367, column: 27, scope: !10758)
!10766 = !DILocation(line: 4368, column: 11, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10752, file: !3, line: 4368, column: 10)
!10768 = !DILocation(line: 4368, column: 10, scope: !10767)
!10769 = !DILocation(line: 4368, column: 10, scope: !10752)
!10770 = !DILocation(line: 4368, column: 15, scope: !10767)
!10771 = !DILocation(line: 4368, column: 14, scope: !10767)
!10772 = distinct !{!10772, !10748, !10773}
!10773 = !DILocation(line: 4369, column: 2, scope: !10740)
!10774 = !DILocation(line: 4370, column: 5, scope: !10740)
!10775 = !DILocation(line: 4370, column: 14, scope: !10686)
!10776 = !DILocation(line: 4370, column: 20, scope: !10686)
!10777 = !DILocation(line: 4370, column: 28, scope: !10686)
!10778 = !DILocation(line: 4370, column: 31, scope: !10686)
!10779 = !DILocation(line: 4370, column: 42, scope: !10686)
!10780 = !DILocation(line: 0, scope: !10686)
!10781 = distinct !{!10781, !10738, !10782}
!10782 = !DILocation(line: 4370, column: 46, scope: !10686)
!10783 = !DILocation(line: 4372, column: 9, scope: !10784)
!10784 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 4372, column: 9)
!10785 = !DILocation(line: 4372, column: 15, scope: !10784)
!10786 = !DILocation(line: 4372, column: 9, scope: !10686)
!10787 = !DILocation(line: 4373, column: 2, scope: !10788)
!10788 = distinct !DILexicalBlock(scope: !10784, file: !3, line: 4372, column: 24)
!10789 = !DILocation(line: 4374, column: 17, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10788, file: !3, line: 4373, column: 5)
!10791 = !DILocation(line: 4374, column: 6, scope: !10790)
!10792 = !DILocation(line: 4374, column: 15, scope: !10790)
!10793 = !DILocation(line: 4375, column: 2, scope: !10790)
!10794 = !DILocation(line: 4375, column: 17, scope: !10788)
!10795 = !DILocation(line: 4375, column: 11, scope: !10788)
!10796 = distinct !{!10796, !10787, !10797}
!10797 = !DILocation(line: 4375, column: 19, scope: !10788)
!10798 = !DILocation(line: 4376, column: 7, scope: !10788)
!10799 = !DILocation(line: 4377, column: 5, scope: !10788)
!10800 = !DILocation(line: 4378, column: 18, scope: !10801)
!10801 = distinct !DILexicalBlock(scope: !10784, file: !3, line: 4377, column: 12)
!10802 = !DILocation(line: 4378, column: 24, scope: !10801)
!10803 = !DILocation(line: 4378, column: 10, scope: !10801)
!10804 = !DILocation(line: 4378, column: 8, scope: !10801)
!10805 = !DILocation(line: 4379, column: 6, scope: !10806)
!10806 = distinct !DILexicalBlock(scope: !10801, file: !3, line: 4379, column: 6)
!10807 = !DILocation(line: 4379, column: 12, scope: !10806)
!10808 = !DILocation(line: 4379, column: 6, scope: !10801)
!10809 = !DILocation(line: 4379, column: 21, scope: !10806)
!10810 = !DILocation(line: 4380, column: 6, scope: !10811)
!10811 = distinct !DILexicalBlock(scope: !10801, file: !3, line: 4380, column: 6)
!10812 = !DILocation(line: 4380, column: 15, scope: !10811)
!10813 = !DILocation(line: 4380, column: 6, scope: !10801)
!10814 = !DILocation(line: 4380, column: 29, scope: !10811)
!10815 = !DILocation(line: 4380, column: 24, scope: !10811)
!10816 = !DILocation(line: 4382, column: 12, scope: !10686)
!10817 = !DILocation(line: 4382, column: 19, scope: !10686)
!10818 = !DILocation(line: 4382, column: 5, scope: !10686)
!10819 = !DILocation(line: 4383, column: 1, scope: !10686)
!10820 = !DILocalVariable(name: "name", arg: 1, scope: !705, file: !3, line: 3768, type: !19)
!10821 = !DILocation(line: 3768, column: 11, scope: !705)
!10822 = !DILocalVariable(name: "nlen", scope: !705, file: !3, line: 3770, type: !12)
!10823 = !DILocation(line: 3770, column: 9, scope: !705)
!10824 = !DILocalVariable(name: "slen", scope: !705, file: !3, line: 3770, type: !12)
!10825 = !DILocation(line: 3770, column: 15, scope: !705)
!10826 = !DILocalVariable(name: "suffix", scope: !705, file: !3, line: 3771, type: !190)
!10827 = !DILocation(line: 3771, column: 10, scope: !705)
!10828 = !DILocalVariable(name: "suf", scope: !705, file: !3, line: 3778, type: !23)
!10829 = !DILocation(line: 3778, column: 12, scope: !705)
!10830 = !DILocation(line: 3780, column: 12, scope: !705)
!10831 = !DILocation(line: 3780, column: 6, scope: !705)
!10832 = !DILocation(line: 3780, column: 10, scope: !705)
!10833 = !DILocation(line: 3781, column: 9, scope: !10834)
!10834 = distinct !DILexicalBlock(scope: !705, file: !3, line: 3781, column: 9)
!10835 = !DILocation(line: 3781, column: 9, scope: !705)
!10836 = !DILocation(line: 3781, column: 35, scope: !10834)
!10837 = !DILocation(line: 3781, column: 32, scope: !10834)
!10838 = !DILocation(line: 3790, column: 19, scope: !705)
!10839 = !DILocation(line: 3790, column: 12, scope: !705)
!10840 = !DILocation(line: 3790, column: 10, scope: !705)
!10841 = !DILocation(line: 3791, column: 9, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !705, file: !3, line: 3791, column: 9)
!10843 = !DILocation(line: 3791, column: 14, scope: !10842)
!10844 = !DILocation(line: 3791, column: 9, scope: !705)
!10845 = !DILocation(line: 3792, column: 16, scope: !10846)
!10846 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 3791, column: 31)
!10847 = !DILocation(line: 3792, column: 24, scope: !10846)
!10848 = !DILocation(line: 3792, column: 9, scope: !10846)
!10849 = !DILocation(line: 3793, column: 5, scope: !10846)
!10850 = !DILocation(line: 3794, column: 16, scope: !10851)
!10851 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 3793, column: 12)
!10852 = !DILocation(line: 3794, column: 24, scope: !10851)
!10853 = !DILocation(line: 3794, column: 29, scope: !10851)
!10854 = !DILocation(line: 3794, column: 28, scope: !10851)
!10855 = !DILocation(line: 3794, column: 33, scope: !10851)
!10856 = !DILocation(line: 3794, column: 44, scope: !10851)
!10857 = !DILocation(line: 3794, column: 9, scope: !10851)
!10858 = !DILocation(line: 3796, column: 12, scope: !705)
!10859 = !DILocation(line: 3796, column: 5, scope: !705)
!10860 = !DILocation(line: 3797, column: 19, scope: !705)
!10861 = !DILocation(line: 3797, column: 12, scope: !705)
!10862 = !DILocation(line: 3797, column: 10, scope: !705)
!10863 = !DILocation(line: 3798, column: 5, scope: !705)
!10864 = !DILocalVariable(name: "s", scope: !10865, file: !3, line: 3799, type: !12)
!10865 = distinct !DILexicalBlock(scope: !705, file: !3, line: 3798, column: 8)
!10866 = !DILocation(line: 3799, column: 12, scope: !10865)
!10867 = !DILocation(line: 3799, column: 24, scope: !10865)
!10868 = !DILocation(line: 3799, column: 23, scope: !10865)
!10869 = !DILocation(line: 3799, column: 16, scope: !10865)
!10870 = !DILocation(line: 3800, column: 12, scope: !10871)
!10871 = distinct !DILexicalBlock(scope: !10865, file: !3, line: 3800, column: 12)
!10872 = !DILocation(line: 3800, column: 19, scope: !10871)
!10873 = !DILocation(line: 3800, column: 17, scope: !10871)
!10874 = !DILocation(line: 3800, column: 21, scope: !10871)
!10875 = !DILocation(line: 3800, column: 31, scope: !10871)
!10876 = !DILocation(line: 3800, column: 36, scope: !10871)
!10877 = !DILocation(line: 3800, column: 35, scope: !10871)
!10878 = !DILocation(line: 3800, column: 37, scope: !10871)
!10879 = !DILocation(line: 3800, column: 24, scope: !10871)
!10880 = !DILocation(line: 3800, column: 41, scope: !10871)
!10881 = !DILocation(line: 3801, column: 12, scope: !10871)
!10882 = !DILocation(line: 3801, column: 15, scope: !10871)
!10883 = !DILocation(line: 3800, column: 12, scope: !10865)
!10884 = !DILocation(line: 3802, column: 19, scope: !10885)
!10885 = distinct !DILexicalBlock(scope: !10871, file: !3, line: 3801, column: 48)
!10886 = !DILocation(line: 3802, column: 24, scope: !10885)
!10887 = !DILocation(line: 3802, column: 23, scope: !10885)
!10888 = !DILocation(line: 3802, column: 29, scope: !10885)
!10889 = !DILocation(line: 3802, column: 28, scope: !10885)
!10890 = !DILocation(line: 3802, column: 12, scope: !10885)
!10891 = !DILocation(line: 3804, column: 5, scope: !10865)
!10892 = !DILocation(line: 3804, column: 15, scope: !705)
!10893 = !DILocation(line: 3804, column: 14, scope: !705)
!10894 = !DILocation(line: 3804, column: 21, scope: !705)
!10895 = distinct !{!10895, !10863, !10896}
!10896 = !DILocation(line: 3804, column: 28, scope: !705)
!10897 = !DILocation(line: 3806, column: 5, scope: !705)
!10898 = !DILocation(line: 3807, column: 1, scope: !705)
!10899 = distinct !DISubprogram(name: "strlwr", scope: !3, file: !3, line: 8063, type: !706, scopeLine: 8065, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10900 = !DILocalVariable(name: "s", arg: 1, scope: !10899, file: !3, line: 8064, type: !19)
!10901 = !DILocation(line: 8064, column: 11, scope: !10899)
!10902 = !DILocalVariable(name: "t", scope: !10899, file: !3, line: 8066, type: !19)
!10903 = !DILocation(line: 8066, column: 11, scope: !10899)
!10904 = !DILocation(line: 8067, column: 14, scope: !10905)
!10905 = distinct !DILexicalBlock(scope: !10899, file: !3, line: 8067, column: 5)
!10906 = !DILocation(line: 8067, column: 12, scope: !10905)
!10907 = !DILocation(line: 8067, column: 10, scope: !10905)
!10908 = !DILocation(line: 8067, column: 18, scope: !10909)
!10909 = distinct !DILexicalBlock(scope: !10905, file: !3, line: 8067, column: 5)
!10910 = !DILocation(line: 8067, column: 17, scope: !10909)
!10911 = !DILocation(line: 8067, column: 5, scope: !10905)
!10912 = !DILocation(line: 8068, column: 12, scope: !10909)
!10913 = !DILocation(line: 8068, column: 8, scope: !10909)
!10914 = !DILocation(line: 8068, column: 10, scope: !10909)
!10915 = !DILocation(line: 8068, column: 7, scope: !10909)
!10916 = !DILocation(line: 8067, column: 22, scope: !10909)
!10917 = !DILocation(line: 8067, column: 5, scope: !10909)
!10918 = distinct !{!10918, !10911, !10919}
!10919 = !DILocation(line: 8068, column: 12, scope: !10905)
!10920 = !DILocation(line: 8069, column: 12, scope: !10899)
!10921 = !DILocation(line: 8069, column: 5, scope: !10899)
!10922 = distinct !DISubprogram(name: "same_file", scope: !3, file: !3, line: 4284, type: !10923, scopeLine: 4287, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10923 = !DISubroutineType(types: !10924)
!10924 = !{!12, !702, !702}
!10925 = !DILocalVariable(name: "stat1", arg: 1, scope: !10922, file: !3, line: 4285, type: !702)
!10926 = !DILocation(line: 4285, column: 18, scope: !10922)
!10927 = !DILocalVariable(name: "stat2", arg: 2, scope: !10922, file: !3, line: 4286, type: !702)
!10928 = !DILocation(line: 4286, column: 18, scope: !10922)
!10929 = !DILocation(line: 4288, column: 12, scope: !10922)
!10930 = !DILocation(line: 4288, column: 19, scope: !10922)
!10931 = !DILocation(line: 4288, column: 31, scope: !10922)
!10932 = !DILocation(line: 4288, column: 38, scope: !10922)
!10933 = !DILocation(line: 4288, column: 28, scope: !10922)
!10934 = !DILocation(line: 4289, column: 2, scope: !10922)
!10935 = !DILocation(line: 4289, column: 5, scope: !10922)
!10936 = !DILocation(line: 4289, column: 12, scope: !10922)
!10937 = !DILocation(line: 4289, column: 24, scope: !10922)
!10938 = !DILocation(line: 4289, column: 31, scope: !10922)
!10939 = !DILocation(line: 4289, column: 21, scope: !10922)
!10940 = !DILocation(line: 0, scope: !10922)
!10941 = !DILocation(line: 4288, column: 5, scope: !10922)
!10942 = distinct !DISubprogram(name: "yesno", scope: !3, file: !3, line: 8429, type: !2583, scopeLine: 8430, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10943 = !DILocalVariable(name: "buf", scope: !10942, file: !3, line: 8436, type: !323)
!10944 = !DILocation(line: 8436, column: 8, scope: !10942)
!10945 = !DILocalVariable(name: "len", scope: !10942, file: !3, line: 8437, type: !12)
!10946 = !DILocation(line: 8437, column: 7, scope: !10942)
!10947 = !DILocalVariable(name: "c", scope: !10942, file: !3, line: 8438, type: !12)
!10948 = !DILocation(line: 8438, column: 7, scope: !10942)
!10949 = !DILocation(line: 8440, column: 3, scope: !10942)
!10950 = !DILocation(line: 8440, column: 15, scope: !10942)
!10951 = !DILocation(line: 8440, column: 13, scope: !10942)
!10952 = !DILocation(line: 8440, column: 27, scope: !10942)
!10953 = !DILocation(line: 8440, column: 34, scope: !10942)
!10954 = !DILocation(line: 8440, column: 37, scope: !10942)
!10955 = !DILocation(line: 8440, column: 39, scope: !10942)
!10956 = !DILocation(line: 0, scope: !10942)
!10957 = !DILocation(line: 8441, column: 10, scope: !10958)
!10958 = distinct !DILexicalBlock(scope: !10942, file: !3, line: 8441, column: 9)
!10959 = !DILocation(line: 8441, column: 14, scope: !10958)
!10960 = !DILocation(line: 8441, column: 18, scope: !10958)
!10961 = !DILocation(line: 8441, column: 21, scope: !10958)
!10962 = !DILocation(line: 8441, column: 25, scope: !10958)
!10963 = !DILocation(line: 8441, column: 32, scope: !10958)
!10964 = !DILocation(line: 8441, column: 36, scope: !10958)
!10965 = !DILocation(line: 8441, column: 40, scope: !10958)
!10966 = !DILocation(line: 8441, column: 45, scope: !10958)
!10967 = !DILocation(line: 8441, column: 49, scope: !10958)
!10968 = !DILocation(line: 8441, column: 9, scope: !10942)
!10969 = !DILocation(line: 8442, column: 20, scope: !10958)
!10970 = !DILocation(line: 8442, column: 14, scope: !10958)
!10971 = !DILocation(line: 8442, column: 7, scope: !10958)
!10972 = !DILocation(line: 8442, column: 18, scope: !10958)
!10973 = distinct !{!10973, !10949, !10974}
!10974 = !DILocation(line: 8442, column: 20, scope: !10942)
!10975 = !DILocation(line: 8443, column: 7, scope: !10942)
!10976 = !DILocation(line: 8443, column: 3, scope: !10942)
!10977 = !DILocation(line: 8443, column: 12, scope: !10942)
!10978 = !DILocation(line: 8445, column: 19, scope: !10942)
!10979 = !DILocation(line: 8445, column: 10, scope: !10942)
!10980 = !DILocation(line: 8445, column: 24, scope: !10942)
!10981 = !DILocation(line: 8445, column: 3, scope: !10942)
!10982 = distinct !DISubprogram(name: "rpmatch", scope: !3, file: !3, line: 8574, type: !10983, scopeLine: 8575, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!10983 = !DISubroutineType(types: !10984)
!10984 = !{!12, !29}
!10985 = !DILocalVariable(name: "response", arg: 1, scope: !10982, file: !3, line: 8574, type: !29)
!10986 = !DILocation(line: 8574, column: 22, scope: !10982)
!10987 = !DILocation(line: 8577, column: 12, scope: !10982)
!10988 = !DILocation(line: 8577, column: 11, scope: !10982)
!10989 = !DILocation(line: 8577, column: 21, scope: !10982)
!10990 = !DILocation(line: 8577, column: 28, scope: !10982)
!10991 = !DILocation(line: 8577, column: 32, scope: !10982)
!10992 = !DILocation(line: 8577, column: 31, scope: !10982)
!10993 = !DILocation(line: 8577, column: 41, scope: !10982)
!10994 = !DILocation(line: 8578, column: 7, scope: !10982)
!10995 = !DILocation(line: 8578, column: 6, scope: !10982)
!10996 = !DILocation(line: 8578, column: 16, scope: !10982)
!10997 = !DILocation(line: 8578, column: 23, scope: !10982)
!10998 = !DILocation(line: 8578, column: 27, scope: !10982)
!10999 = !DILocation(line: 8578, column: 26, scope: !10982)
!11000 = !DILocation(line: 8578, column: 36, scope: !10982)
!11001 = !DILocation(line: 8577, column: 3, scope: !10982)
!11002 = distinct !DISubprogram(name: "do_stat", scope: !3, file: !3, line: 3744, type: !700, scopeLine: 3747, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !480)
!11003 = !DILocalVariable(name: "name", arg: 1, scope: !11002, file: !3, line: 3745, type: !19)
!11004 = !DILocation(line: 3745, column: 11, scope: !11002)
!11005 = !DILocalVariable(name: "sbuf", arg: 2, scope: !11002, file: !3, line: 3746, type: !702)
!11006 = !DILocation(line: 3746, column: 18, scope: !11002)
!11007 = !DILocation(line: 3748, column: 5, scope: !11002)
!11008 = !DILocation(line: 3748, column: 11, scope: !11002)
!11009 = !DILocation(line: 3749, column: 10, scope: !11010)
!11010 = distinct !DILexicalBlock(scope: !11002, file: !3, line: 3749, column: 9)
!11011 = !DILocation(line: 3749, column: 20, scope: !11010)
!11012 = !DILocation(line: 3749, column: 24, scope: !11010)
!11013 = !DILocation(line: 3749, column: 9, scope: !11002)
!11014 = !DILocation(line: 3750, column: 15, scope: !11015)
!11015 = distinct !DILexicalBlock(scope: !11010, file: !3, line: 3749, column: 31)
!11016 = !DILocation(line: 3750, column: 21, scope: !11015)
!11017 = !DILocation(line: 3750, column: 9, scope: !11015)
!11018 = !DILocation(line: 3750, column: 2, scope: !11015)
!11019 = !DILocation(line: 3752, column: 17, scope: !11002)
!11020 = !DILocation(line: 3752, column: 23, scope: !11002)
!11021 = !DILocation(line: 3752, column: 12, scope: !11002)
!11022 = !DILocation(line: 3752, column: 5, scope: !11002)
!11023 = !DILocation(line: 3753, column: 1, scope: !11002)
!11024 = distinct !DISubprogram(name: "xmalloc", scope: !3, file: !3, line: 8339, type: !11025, scopeLine: 8341, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!11025 = !DISubroutineType(types: !11026)
!11026 = !{!17, !6}
!11027 = !DILocalVariable(name: "size", arg: 1, scope: !11024, file: !3, line: 8340, type: !6)
!11028 = !DILocation(line: 8340, column: 14, scope: !11024)
!11029 = !DILocalVariable(name: "cp", scope: !11024, file: !3, line: 8342, type: !17)
!11030 = !DILocation(line: 8342, column: 11, scope: !11024)
!11031 = !DILocation(line: 8342, column: 31, scope: !11024)
!11032 = !DILocation(line: 8342, column: 23, scope: !11024)
!11033 = !DILocation(line: 8344, column: 9, scope: !11034)
!11034 = distinct !DILexicalBlock(scope: !11024, file: !3, line: 8344, column: 9)
!11035 = !DILocation(line: 8344, column: 12, scope: !11034)
!11036 = !DILocation(line: 8344, column: 9, scope: !11024)
!11037 = !DILocation(line: 8344, column: 21, scope: !11034)
!11038 = !DILocation(line: 8345, column: 12, scope: !11024)
!11039 = !DILocation(line: 8345, column: 5, scope: !11024)
!11040 = distinct !DISubprogram(name: "make_simple_name", scope: !3, file: !3, line: 8129, type: !2624, scopeLine: 8131, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!11041 = !DILocalVariable(name: "name", arg: 1, scope: !11040, file: !3, line: 8130, type: !19)
!11042 = !DILocation(line: 8130, column: 11, scope: !11040)
!11043 = !DILocalVariable(name: "p", scope: !11040, file: !3, line: 8132, type: !19)
!11044 = !DILocation(line: 8132, column: 11, scope: !11040)
!11045 = !DILocation(line: 8132, column: 23, scope: !11040)
!11046 = !DILocation(line: 8132, column: 15, scope: !11040)
!11047 = !DILocation(line: 8133, column: 9, scope: !11048)
!11048 = distinct !DILexicalBlock(scope: !11040, file: !3, line: 8133, column: 9)
!11049 = !DILocation(line: 8133, column: 11, scope: !11048)
!11050 = !DILocation(line: 8133, column: 9, scope: !11040)
!11051 = !DILocation(line: 8133, column: 20, scope: !11048)
!11052 = !DILocation(line: 8134, column: 9, scope: !11053)
!11053 = distinct !DILexicalBlock(scope: !11040, file: !3, line: 8134, column: 9)
!11054 = !DILocation(line: 8134, column: 14, scope: !11053)
!11055 = !DILocation(line: 8134, column: 11, scope: !11053)
!11056 = !DILocation(line: 8134, column: 9, scope: !11040)
!11057 = !DILocation(line: 8134, column: 21, scope: !11053)
!11058 = !DILocation(line: 8134, column: 20, scope: !11053)
!11059 = !DILocation(line: 8135, column: 5, scope: !11040)
!11060 = !DILocation(line: 8136, column: 14, scope: !11061)
!11061 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 8136, column: 13)
!11062 = distinct !DILexicalBlock(scope: !11040, file: !3, line: 8135, column: 8)
!11063 = !DILocation(line: 8136, column: 13, scope: !11061)
!11064 = !DILocation(line: 8136, column: 18, scope: !11061)
!11065 = !DILocation(line: 8136, column: 13, scope: !11062)
!11066 = !DILocation(line: 8136, column: 27, scope: !11061)
!11067 = !DILocation(line: 8136, column: 29, scope: !11061)
!11068 = !DILocation(line: 8136, column: 26, scope: !11061)
!11069 = !DILocation(line: 8137, column: 5, scope: !11062)
!11070 = !DILocation(line: 8137, column: 14, scope: !11040)
!11071 = !DILocation(line: 8137, column: 19, scope: !11040)
!11072 = !DILocation(line: 8137, column: 16, scope: !11040)
!11073 = distinct !{!11073, !11059, !11074}
!11074 = !DILocation(line: 8137, column: 23, scope: !11040)
!11075 = !DILocation(line: 8138, column: 1, scope: !11040)
!11076 = distinct !DISubprogram(name: "getopt_long_only", scope: !3, file: !3, line: 8599, type: !5295, scopeLine: 8605, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !480)
!11077 = !DILocalVariable(name: "argc", arg: 1, scope: !11076, file: !3, line: 8600, type: !12)
!11078 = !DILocation(line: 8600, column: 10, scope: !11076)
!11079 = !DILocalVariable(name: "argv", arg: 2, scope: !11076, file: !3, line: 8601, type: !167)
!11080 = !DILocation(line: 8601, column: 19, scope: !11076)
!11081 = !DILocalVariable(name: "options", arg: 3, scope: !11076, file: !3, line: 8602, type: !29)
!11082 = !DILocation(line: 8602, column: 18, scope: !11076)
!11083 = !DILocalVariable(name: "long_options", arg: 4, scope: !11076, file: !3, line: 8603, type: !24)
!11084 = !DILocation(line: 8603, column: 27, scope: !11076)
!11085 = !DILocalVariable(name: "opt_index", arg: 5, scope: !11076, file: !3, line: 8604, type: !33)
!11086 = !DILocation(line: 8604, column: 11, scope: !11076)
!11087 = !DILocation(line: 8606, column: 28, scope: !11076)
!11088 = !DILocation(line: 8606, column: 34, scope: !11076)
!11089 = !DILocation(line: 8606, column: 40, scope: !11076)
!11090 = !DILocation(line: 8606, column: 49, scope: !11076)
!11091 = !DILocation(line: 8606, column: 63, scope: !11076)
!11092 = !DILocation(line: 8606, column: 10, scope: !11076)
!11093 = !DILocation(line: 8606, column: 3, scope: !11076)
