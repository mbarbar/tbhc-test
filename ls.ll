; ModuleID = 'ls.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pending = type { i8*, i8*, i8, %struct.pending* }
%struct.dev_ino = type { i64, i64 }
%struct.hash_table = type { %struct.hash_entry*, %struct.hash_entry*, i64, i64, i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*, %struct.hash_entry* }
%struct.hash_tuning = type { float, float, float, float, i8 }
%struct.hash_entry = type { i8*, %struct.hash_entry* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, %union.anon, i64, %union.anon.0, %union.anon.1, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [0 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i8* (i64)* }
%union.anon.1 = type { void (i8*)* }
%struct.tm_zone = type { %struct.tm_zone*, i8, [0 x i8] }
%struct.fileinfo = type { i8*, i8*, i8*, %struct.stat, i32, i32, i8*, i8, i8, i32, i8, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.bin_str = type { i64, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.__sigset_t = type { [16 x i64] }
%struct.ignore_pattern = type { i8*, %struct.ignore_pattern* }
%struct.color_ext_type = type { %struct.bin_str, %struct.bin_str, %struct.color_ext_type* }
%struct.column_info = type { i8, i64, i64* }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.infomap = type { i8*, i8* }
%struct.userid = type { %union.anon.12, %struct.userid*, [0 x i8] }
%union.anon.12 = type { i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.sigaction = type { %union.anon.2, %struct.__sigset_t, i32, void ()* }
%union.anon.2 = type { void (i32)* }
%struct.__mbstate_t = type { i32, %union.anon.12 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct._cap_struct = type opaque
%struct.F_triple = type { i8*, i64, i64 }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@exit_status = internal global i32 0, align 4, !dbg !0, !ctir !27
@print_dir_name = internal global i8 0, align 1, !dbg !898, !ctir !141
@pending_dirs = internal global %struct.pending* null, align 8, !dbg !866, !ctir !235
@current_time = internal global %struct.dev_ino zeroinitializer, align 8, !dbg !868, !ctir !214
@print_with_color = internal global i8 0, align 1, !dbg !882, !ctir !141
@directories_first = internal global i8 0, align 1, !dbg !894, !ctir !141
@check_symlink_mode = internal global i8 0, align 1, !dbg !886, !ctir !141
@color_symlink_as_referent = internal global i8 0, align 1, !dbg !862, !ctir !141
@format = internal global i32 0, align 4, !dbg !872, !ctir !5
@dereference = internal global i32 0, align 4, !dbg !888, !ctir !13
@immediate_dirs = internal global i8 0, align 1, !dbg !892, !ctir !141
@indicator_style = internal global i32 0, align 4, !dbg !880, !ctir !20
@recursive = internal global i8 0, align 1, !dbg !890, !ctir !141
@active_dir_set = internal global %struct.hash_table* null, align 8, !dbg !854, !ctir !251
@dev_ino_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !916, !ctir !458
@.str.3 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@localtz = internal global %struct.tm_zone* null, align 8, !dbg !900, !ctir !256
@sort_type = internal global i32 0, align 4, !dbg !874, !ctir !26
@print_scontext = internal global i8 0, align 1, !dbg !870, !ctir !141
@print_block_size = internal global i8 0, align 1, !dbg !876, !ctir !141
@format_needs_stat = internal global i8 0, align 1, !dbg !902, !ctir !141
@format_needs_type = internal global i8 0, align 1, !dbg !904, !ctir !141
@dired = internal global i8 0, align 1, !dbg !878, !ctir !141
@dired_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !912, !ctir !458
@subdired_obstack = internal global %struct.obstack zeroinitializer, align 8, !dbg !914, !ctir !458
@print_hyperlink = internal global i8 0, align 1, !dbg !884, !ctir !141
@hostname = internal global i8* null, align 8, !dbg !864, !ctir !146
@cwd_n_alloc = internal global i64 0, align 8, !dbg !858, !ctir !149
@cwd_file = internal global %struct.fileinfo* null, align 8, !dbg !856, !ctir !260
@cwd_n_used = internal global i64 0, align 8, !dbg !860, !ctir !149
@.str.4 = private unnamed_addr constant [2 x i8] c".\00", align 1
@dired_pos = internal global i64 0, align 8, !dbg !910, !ctir !149
@.str.5 = private unnamed_addr constant [6 x i8] c"found\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"src/ls.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1
@used_color = internal global i8 0, align 1, !dbg !920, !ctir !141
@color_indicator = internal global [24 x %struct.bin_str] [%struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0) }, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0) }, %struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i32 0, i32 0) }], align 16, !dbg !922, !ctir !281
@.str.7 = private unnamed_addr constant [3 x i8] c"\1B[\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8, !ctir !286
@stop_signal_count = internal global i32 0, align 4, !dbg !908, !ctir !335
@interrupt_signal = internal global i32 0, align 4, !dbg !906, !ctir !335
@.str.8 = private unnamed_addr constant [10 x i8] c"//DIRED//\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"//SUBDIRED//\00", align 1
@filename_quoting_options = internal global %struct.quoting_options* null, align 8, !dbg !896, !ctir !349
@.str.10 = private unnamed_addr constant [38 x i8] c"//DIRED-OPTIONS// --quoting-style=%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"hash_get_n_entries (active_dir_set) == 0\00", align 1
@.str.62 = private unnamed_addr constant [5 x i8] c" %lu\00", align 1
@caught_signals = internal global %struct.__sigset_t zeroinitializer, align 8, !dbg !929, !ctir !509
@signal_setup.sig = internal constant [12 x i32] [i32 20, i32 14, i32 1, i32 2, i32 13, i32 3, i32 15, i32 29, i32 27, i32 26, i32 24, i32 25], align 16, !dbg !924
@.str.48 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.45 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"01;34\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"01;36\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"01;35\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"01;33\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"01;32\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"37;41\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"30;43\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"37;44\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"34;42\00", align 1
@.str.59 = private unnamed_addr constant [6 x i8] c"30;42\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"30;41\00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"\1B[K\00", align 1
@.str.203 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.204 = private unnamed_addr constant [40 x i8] c"cannot determine device and inode of %s\00", align 1
@.str.205 = private unnamed_addr constant [41 x i8] c"%s: not listing already-listed directory\00", align 1
@print_dir.first = internal global i8 1, align 1, !dbg !1017
@.str.206 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.207 = private unnamed_addr constant [24 x i8] c"error canonicalizing %s\00", align 1
@dirname_quoting_options = internal global %struct.quoting_options* null, align 8, !dbg !996, !ctir !349
@.str.208 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.209 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.210 = private unnamed_addr constant [21 x i8] c"closing directory %s\00", align 1
@.str.211 = private unnamed_addr constant [6 x i8] c"total\00", align 1
@human_output_opts = internal global i32 0, align 4, !dbg !960, !ctir !27
@output_block_size = internal global i64 0, align 8, !dbg !964, !ctir !168
@ignore_mode = internal global i32 0, align 4, !dbg !946, !ctir !85
@hide_patterns = internal global %struct.ignore_pattern* null, align 8, !dbg !950, !ctir !617
@ignore_patterns = internal global %struct.ignore_pattern* null, align 8, !dbg !948, !ctir !617
@align_variable_outer_quotes = internal global i8 0, align 1, !dbg !994, !ctir !141
@cwd_some_quoted = internal global i8 0, align 1, !dbg !1022, !ctir !141
@.str.213 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.212 = private unnamed_addr constant [20 x i8] c"\1B]8;;file://%s%s%s\07\00", align 1
@.str.214 = private unnamed_addr constant [7 x i8] c"\1B]8;;\07\00", align 1
@RFC3986 = internal global [256 x i8] zeroinitializer, align 16, !dbg !918, !ctir !453
@.str.215 = private unnamed_addr constant [7 x i8] c"%%%02x\00", align 1
@qmark_funny_chars = internal global i8 0, align 1, !dbg !936, !ctir !141
@.str.47 = private unnamed_addr constant [55 x i8] c"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\00", align 1
@__PRETTY_FUNCTION__.dev_ino_pop = private unnamed_addr constant [33 x i8] c"struct dev_ino dev_ino_pop(void)\00", align 1
@sorted_file = internal global i8** null, align 8, !dbg !1024, !ctir !767
@line_length = internal global i64 0, align 8, !dbg !952, !ctir !149
@filetype_letter = internal constant [11 x i8] c"?pcdb-lswd\00", align 1, !dbg !1081, !ctir !825
@any_has_acl = internal global i8 0, align 1, !dbg !1028, !ctir !141
@time_type = internal global i32 0, align 4, !dbg !938, !ctir !79
@print_inode = internal global i8 0, align 1, !dbg !944, !ctir !141
@inode_number_width = internal global i32 0, align 4, !dbg !1030, !ctir !27
@.str.224 = private unnamed_addr constant [5 x i8] c"%*s \00", align 1
@.str.225 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@block_size_width = internal global i32 0, align 4, !dbg !1032, !ctir !27
@nlink_width = internal global i32 0, align 4, !dbg !1034, !ctir !27
@.str.227 = private unnamed_addr constant [8 x i8] c"%s %*s \00", align 1
@print_owner = internal global i8 1, align 1, !dbg !958, !ctir !141
@print_group = internal global i8 1, align 1, !dbg !968, !ctir !141
@print_author = internal global i8 0, align 1, !dbg !970, !ctir !141
@owner_width = internal global i32 0, align 4, !dbg !1036, !ctir !27
@group_width = internal global i32 0, align 4, !dbg !1038, !ctir !27
@author_width = internal global i32 0, align 4, !dbg !1040, !ctir !27
@scontext_width = internal global i32 0, align 4, !dbg !1042, !ctir !27
@file_size_width = internal global i32 0, align 4, !dbg !1048, !ctir !27
@major_device_number_width = internal global i32 0, align 4, !dbg !1044, !ctir !27
@minor_device_number_width = internal global i32 0, align 4, !dbg !1046, !ctir !27
@.str.228 = private unnamed_addr constant [10 x i8] c"%*s, %*s \00", align 1
@file_human_output_opts = internal global i32 0, align 4, !dbg !962, !ctir !27
@file_output_block_size = internal global i64 1, align 8, !dbg !966, !ctir !168
@.str.229 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@get_color_indicator.filetype_indicator = internal global [10 x i32] [i32 13, i32 8, i32 11, i32 6, i32 10, i32 5, i32 7, i32 9, i32 5, i32 6], align 16, !dbg !1071
@color_ext_list = internal global %struct.color_ext_type* null, align 8, !dbg !1013, !ctir !710
@long_time_expected_width.width = internal global i32 -1, align 4, !dbg !1083
@use_abformat = internal global i8 0, align 1, !dbg !1006, !ctir !141
@abformat = internal global [2 x [12 x [128 x i8]]] zeroinitializer, align 16, !dbg !1004, !ctir !703
@long_time_format = internal global [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0)], align 16, !dbg !998, !ctir !686
@.str.166 = private unnamed_addr constant [10 x i8] c"%b %e  %Y\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@.str.230 = private unnamed_addr constant [6 x i8] c"%*lu \00", align 1
@numeric_ids = internal global i8 0, align 1, !dbg !942, !ctir !141
@.str.226 = private unnamed_addr constant [40 x i8] c"INT_BUFSIZE_BOUND (uintmax_t) <= buflen\00", align 1
@__PRETTY_FUNCTION__.format_inode = private unnamed_addr constant [60 x i8] c"char *format_inode(char *, size_t, const struct fileinfo *)\00", align 1
@column_info = internal global %struct.column_info* null, align 8, !dbg !1079, !ctir !821
@tabsize = internal global i64 0, align 8, !dbg !954, !ctir !149
@max_idx = internal global i64 0, align 8, !dbg !992, !ctir !149
@init_column_info.column_info_alloc = internal global i64 0, align 8, !dbg !1076
@UNKNOWN_SECURITY_CONTEXT = internal global [2 x i8] c"?\00", align 1, !dbg !1026, !ctir !261
@sorted_file_alloc = internal global i64 0, align 8, !dbg !1065, !ctir !149
@failed_strcoll = internal global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16, !dbg !1067, !ctir !776
@.str.222 = private unnamed_addr constant [26 x i8] c"sort_type != sort_version\00", align 1
@__PRETTY_FUNCTION__.sort_files = private unnamed_addr constant [22 x i8] c"void sort_files(void)\00", align 1
@sort_functions = internal constant [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]] [[2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_name, i32 (i8*, i8*)* @xstrcoll_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_name, i32 (i8*, i8*)* @rev_xstrcoll_df_name]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_name, i32 (i8*, i8*)* @strcmp_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_name, i32 (i8*, i8*)* @rev_strcmp_df_name]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_extension, i32 (i8*, i8*)* @xstrcoll_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_extension, i32 (i8*, i8*)* @rev_xstrcoll_df_extension]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_extension, i32 (i8*, i8*)* @strcmp_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_extension, i32 (i8*, i8*)* @rev_strcmp_df_extension]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_size, i32 (i8*, i8*)* @xstrcoll_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_size, i32 (i8*, i8*)* @rev_xstrcoll_df_size]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_size, i32 (i8*, i8*)* @strcmp_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_size, i32 (i8*, i8*)* @rev_strcmp_df_size]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_version, i32 (i8*, i8*)* @xstrcoll_df_version], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_version, i32 (i8*, i8*)* @rev_xstrcoll_df_version]], [2 x [2 x i32 (i8*, i8*)*]] zeroinitializer], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_mtime, i32 (i8*, i8*)* @xstrcoll_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_mtime, i32 (i8*, i8*)* @rev_xstrcoll_df_mtime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_mtime, i32 (i8*, i8*)* @strcmp_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_mtime, i32 (i8*, i8*)* @rev_strcmp_df_mtime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_ctime, i32 (i8*, i8*)* @xstrcoll_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_ctime, i32 (i8*, i8*)* @rev_xstrcoll_df_ctime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_ctime, i32 (i8*, i8*)* @strcmp_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_ctime, i32 (i8*, i8*)* @rev_strcmp_df_ctime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_atime, i32 (i8*, i8*)* @xstrcoll_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_atime, i32 (i8*, i8*)* @rev_xstrcoll_df_atime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_atime, i32 (i8*, i8*)* @strcmp_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_atime, i32 (i8*, i8*)* @rev_strcmp_df_atime]]]], align 16, !dbg !1069, !ctir !791
@sort_reverse = internal global i8 0, align 1, !dbg !940, !ctir !141
@.str.223 = private unnamed_addr constant [36 x i8] c"cannot compare file names %s and %s\00", align 1
@.str.216 = private unnamed_addr constant [51 x i8] c"! command_line_arg || inode == NOT_AN_INODE_NUMBER\00", align 1
@__PRETTY_FUNCTION__.gobble_file = private unnamed_addr constant [79 x i8] c"uintmax_t gobble_file(const char *, enum filetype, ino_t, _Bool, const char *)\00", align 1
@.str.217 = private unnamed_addr constant [17 x i8] c"cannot access %s\00", align 1
@.str.218 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"unlabeled\00", align 1
@.str.170 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.221 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.220 = private unnamed_addr constant [29 x i8] c"cannot read symbolic link %s\00", align 1
@file_has_acl_cache.unsupported_device = internal global i64 0, align 8, !dbg !1060
@getfilecon_cache.unsupported_device = internal global i64 0, align 8, !dbg !1055
@has_capability_cache.unsupported_device = internal global i64 0, align 8, !dbg !1050
@.str.46 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.172 = private unnamed_addr constant [10 x i8] c"LS_COLORS\00", align 1
@.str.173 = private unnamed_addr constant [10 x i8] c"COLORTERM\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"??\00", align 1
@color_buf = internal global i8* null, align 8, !dbg !1011, !ctir !143
@indicator_name = internal constant [25 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.202, i32 0, i32 0), i8* null], align 16, !dbg !1015, !ctir !716
@.str.175 = private unnamed_addr constant [24 x i8] c"unrecognized prefix: %s\00", align 1
@.str.176 = private unnamed_addr constant [52 x i8] c"unparsable value for LS_COLORS environment variable\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@.str.180 = private unnamed_addr constant [3 x i8] c"lc\00", align 1
@.str.181 = private unnamed_addr constant [3 x i8] c"rc\00", align 1
@.str.182 = private unnamed_addr constant [3 x i8] c"ec\00", align 1
@.str.183 = private unnamed_addr constant [3 x i8] c"rs\00", align 1
@.str.161 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.184 = private unnamed_addr constant [3 x i8] c"fi\00", align 1
@.str.185 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.186 = private unnamed_addr constant [3 x i8] c"ln\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"pi\00", align 1
@.str.188 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.189 = private unnamed_addr constant [3 x i8] c"bd\00", align 1
@.str.190 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.191 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.192 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@.str.193 = private unnamed_addr constant [3 x i8] c"ex\00", align 1
@.str.194 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@.str.195 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.196 = private unnamed_addr constant [3 x i8] c"sg\00", align 1
@.str.197 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"ow\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"tw\00", align 1
@.str.200 = private unnamed_addr constant [3 x i8] c"ca\00", align 1
@.str.201 = private unnamed_addr constant [3 x i8] c"mh\00", align 1
@.str.202 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.178 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@G_line = internal constant [4292 x i8] c"# Configuration file for dircolors, a utility to help you set the\00# LS_COLORS environment variable used by GNU ls with the --color option.\00# Copyright (C) 1996-2019 Free Software Foundation, Inc.\00# Copying and distribution of this file, with or without modification,\00# are permitted provided the copyright notice and this notice are preserved.\00# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the\00# slackware version of dircolors) are recognized but ignored.\00# Below are TERM entries, which can be a glob patterns, to match\00# against the TERM environment variable to determine if it is colorizable.\00TERM Eterm\00TERM ansi\00TERM *color*\00TERM con[0-9]*x[0-9]*\00TERM cons25\00TERM console\00TERM cygwin\00TERM dtterm\00TERM gnome\00TERM hurd\00TERM jfbterm\00TERM konsole\00TERM kterm\00TERM linux\00TERM linux-c\00TERM mlterm\00TERM putty\00TERM rxvt*\00TERM screen*\00TERM st\00TERM terminator\00TERM tmux*\00TERM vt100\00TERM xterm*\00# Below are the color init strings for the basic file types.\00# One can use codes for 256 or more colors supported by modern terminals.\00# The default color codes use the capabilities of an 8 color terminal\00# with some additional attributes as per the following codes:\00# Attribute codes:\00# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed\00# Text color codes:\00# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white\00# Background color codes:\00# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white\00#NORMAL 00 # no color code at all\00#FILE 00 # regular file: use no color at all\00RESET 0 # reset to \22normal\22 color\00DIR 01;34 # directory\00LINK 01;36 # symbolic link. (If you set this to 'target' instead of a\00 # numerical value, the color is as for the file pointed to.)\00MULTIHARDLINK 00 # regular file with more than one link\00FIFO 40;33 # pipe\00SOCK 01;35 # socket\00DOOR 01;35 # door\00BLK 40;33;01 # block device driver\00CHR 40;33;01 # character device driver\00ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat'able file ...\00MISSING 00 # ... and the files they point to\00SETUID 37;41 # file that is setuid (u+s)\00SETGID 30;43 # file that is setgid (g+s)\00CAPABILITY 30;41 # file with capability\00STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writable (+t,o+w)\00OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not sticky\00STICKY 37;44 # dir with the sticky bit set (+t) and not other-writable\00# This is for files with execute permission:\00EXEC 01;32\00# List any file extensions like '.gz' or '.tar' that you would like ls\00# to colorize below. Put the extension, a space, and the color init string.\00# (and any comments you want to add after a '#')\00# If you use DOS-style suffixes, you may want to uncomment the following:\00#.cmd 01;32 # executables (bright green)\00#.exe 01;32\00#.com 01;32\00#.btm 01;32\00#.bat 01;32\00# Or if you want to colorize scripts even if they do not have the\00# executable bit actually set.\00#.sh 01;32\00#.csh 01;32\00 # archives or compressed (bright red)\00.tar 01;31\00.tgz 01;31\00.arc 01;31\00.arj 01;31\00.taz 01;31\00.lha 01;31\00.lz4 01;31\00.lzh 01;31\00.lzma 01;31\00.tlz 01;31\00.txz 01;31\00.tzo 01;31\00.t7z 01;31\00.zip 01;31\00.z 01;31\00.dz 01;31\00.gz 01;31\00.lrz 01;31\00.lz 01;31\00.lzo 01;31\00.xz 01;31\00.zst 01;31\00.tzst 01;31\00.bz2 01;31\00.bz 01;31\00.tbz 01;31\00.tbz2 01;31\00.tz 01;31\00.deb 01;31\00.rpm 01;31\00.jar 01;31\00.war 01;31\00.ear 01;31\00.sar 01;31\00.rar 01;31\00.alz 01;31\00.ace 01;31\00.zoo 01;31\00.cpio 01;31\00.7z 01;31\00.rz 01;31\00.cab 01;31\00.wim 01;31\00.swm 01;31\00.dwm 01;31\00.esd 01;31\00# image formats\00.jpg 01;35\00.jpeg 01;35\00.mjpg 01;35\00.mjpeg 01;35\00.gif 01;35\00.bmp 01;35\00.pbm 01;35\00.pgm 01;35\00.ppm 01;35\00.tga 01;35\00.xbm 01;35\00.xpm 01;35\00.tif 01;35\00.tiff 01;35\00.png 01;35\00.svg 01;35\00.svgz 01;35\00.mng 01;35\00.pcx 01;35\00.mov 01;35\00.mpg 01;35\00.mpeg 01;35\00.m2v 01;35\00.mkv 01;35\00.webm 01;35\00.ogm 01;35\00.mp4 01;35\00.m4v 01;35\00.mp4v 01;35\00.vob 01;35\00.qt 01;35\00.nuv 01;35\00.wmv 01;35\00.asf 01;35\00.rm 01;35\00.rmvb 01;35\00.flc 01;35\00.avi 01;35\00.fli 01;35\00.flv 01;35\00.gl 01;35\00.dl 01;35\00.xcf 01;35\00.xwd 01;35\00.yuv 01;35\00.cgm 01;35\00.emf 01;35\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.ogv 01;35\00.ogx 01;35\00# audio formats\00.aac 00;36\00.au 00;36\00.flac 00;36\00.m4a 00;36\00.mid 00;36\00.midi 00;36\00.mka 00;36\00.mp3 00;36\00.mpc 00;36\00.ogg 00;36\00.ra 00;36\00.wav 00;36\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.oga 00;36\00.opus 00;36\00.spx 00;36\00.xspf 00;36\00", align 16, !dbg !1008, !ctir !722
@.str.179 = private unnamed_addr constant [6 x i8] c"TERM \00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@.str.64 = private unnamed_addr constant [59 x i8] c"ignoring invalid width in environment variable COLUMNS: %s\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"TABSIZE\00", align 1
@.str.66 = private unnamed_addr constant [62 x i8] c"ignoring invalid tab size in environment variable TABSIZE: %s\00", align 1
@.str.67 = private unnamed_addr constant [44 x i8] c"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\00", align 1
@long_options = internal constant [44 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.102, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i32 0, i32 0), i32 0, i32* null, i32 68 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0), i32 0, i32* null, i32 134 }, %struct.option { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.105, i32 0, i32 0), i32 0, i32* null, i32 135 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.108, i32 0, i32 0), i32 0, i32* null, i32 107 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.109, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.111, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), i32 1, i32* null, i32 119 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i32 0, i32 0), i32 0, i32* null, i32 65 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.116, i32 0, i32 0), i32 0, i32* null, i32 66 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117, i32 0, i32 0), i32 0, i32* null, i32 70 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.118, i32 0, i32 0), i32 0, i32* null, i32 132 }, %struct.option { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i32 0, i32* null, i32 141 }, %struct.option { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.120, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.121, i32 0, i32 0), i32 0, i32* null, i32 131 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i32 1, i32* null, i32 136 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.123, i32 0, i32 0), i32 1, i32* null, i32 73 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i32 1, i32* null, i32 138 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.125, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.126, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i32 0, i32* null, i32 81 }, %struct.option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.128, i32 0, i32 0), i32 1, i32* null, i32 139 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.129, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130, i32 0, i32 0), i32 1, i32* null, i32 133 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i32 0, i32* null, i32 140 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132, i32 0, i32 0), i32 1, i32* null, i32 142 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0), i32 1, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i32 0, i32 0), i32 1, i32* null, i32 143 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i32 0, i32 0), i32 1, i32* null, i32 144 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.136, i32 0, i32 0), i32 2, i32* null, i32 130 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137, i32 0, i32 0), i32 2, i32* null, i32 137 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i32 0, i32 0), i32 1, i32* null, i32 129 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.139, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.141, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !956, !ctir !634
@optarg = external dso_local global i8*, align 8, !ctir !143
@.str.69 = private unnamed_addr constant [19 x i8] c"invalid line width\00", align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"*~\00", align 1
@.str.71 = private unnamed_addr constant [4 x i8] c".*~\00", align 1
@.str.72 = private unnamed_addr constant [17 x i8] c"invalid tab size\00", align 1
@.str.73 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@sort_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), i8* null], align 16, !dbg !974, !ctir !655
@sort_types = internal constant [5 x i32] [i32 -1, i32 4, i32 2, i32 1, i32 3], align 16, !dbg !972, !ctir !653
@.str.74 = private unnamed_addr constant [7 x i8] c"--time\00", align 1
@time_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149, i32 0, i32 0), i8* null], align 16, !dbg !978, !ctir !655
@time_types = internal constant [5 x i32] [i32 2, i32 2, i32 2, i32 1, i32 1], align 16, !dbg !976, !ctir !658
@.str.75 = private unnamed_addr constant [9 x i8] c"--format\00", align 1
@format_args = internal constant [8 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.156, i32 0, i32 0), i8* null], align 16, !dbg !982, !ctir !662
@format_types = internal constant [7 x i32] [i32 0, i32 0, i32 4, i32 3, i32 3, i32 2, i32 1], align 16, !dbg !980, !ctir !660
@.str.76 = private unnamed_addr constant [9 x i8] c"full-iso\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"--color\00", align 1
@when_args = internal constant [10 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.164, i32 0, i32 0), i8* null], align 16, !dbg !986, !ctir !665
@when_types = internal constant [9 x i32] [i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2], align 16, !dbg !984, !ctir !663
@.str.78 = private unnamed_addr constant [12 x i8] c"--hyperlink\00", align 1
@.str.79 = private unnamed_addr constant [18 x i8] c"--indicator-style\00", align 1
@indicator_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117, i32 0, i32 0), i8* null], align 16, !dbg !990, !ctir !672
@indicator_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16, !dbg !988, !ctir !667
@.str.80 = private unnamed_addr constant [16 x i8] c"--quoting-style\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"vdir\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"ls\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.82 = private unnamed_addr constant [20 x i8] c"Richard M. Stallman\00", align 1
@.str.83 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"LS_BLOCK_SIZE\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"*=>@|\00", align 1
@.str.87 = private unnamed_addr constant [11 x i8] c"TIME_STYLE\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@decode_switches.posix_prefix = internal constant [7 x i8] c"posix-\00", align 1, !dbg !931
@optind = external dso_local global i32, align 4, !ctir !27
@.str.89 = private unnamed_addr constant [29 x i8] c"invalid time style format %s\00", align 1
@time_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0), i8* null], align 16, !dbg !1000, !ctir !672
@time_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16, !dbg !1002, !ctir !688
@.str.90 = private unnamed_addr constant [11 x i8] c"time style\00", align 1
@.str.91 = private unnamed_addr constant [22 x i8] c"Valid arguments are:\0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8, !ctir !286
@.str.92 = private unnamed_addr constant [16 x i8] c"  - [posix-]%s\0A\00", align 1
@.str.93 = private unnamed_addr constant [54 x i8] c"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\0A\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"%Y-%m-%d %H:%M:%S.%N %z\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"%Y-%m-%d \00", align 1
@.str.97 = private unnamed_addr constant [12 x i8] c"%m-%d %H:%M\00", align 1
@.str.171 = private unnamed_addr constant [9 x i8] c"%.*s%s%s\00", align 1
@.str.168 = private unnamed_addr constant [9 x i8] c"long-iso\00", align 1
@.str.169 = private unnamed_addr constant [4 x i8] c"iso\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [FILE]...\0A\00", align 1
@.str.14 = private unnamed_addr constant [144 x i8] c"List information about the FILEs (the current directory by default).\0ASort entries alphabetically if none of -cftuvSUX nor --sort is specified.\0A\00", align 1
@.str.15 = private unnamed_addr constant [271 x i8] c"  -a, --all                  do not ignore entries starting with .\0A  -A, --almost-all           do not list implied . and ..\0A      --author               with -l, print the author of each file\0A  -b, --escape               print C-style escapes for nongraphic characters\0A\00", align 1
@.str.16 = private unnamed_addr constant [156 x i8] c"      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\0A                               e.g., '--block-size=M'; see SIZE format below\0A\00", align 1
@.str.17 = private unnamed_addr constant [362 x i8] c"  -B, --ignore-backups       do not list implied entries ending with ~\0A  -c                         with -lt: sort by, and show, ctime (time of last\0A                               modification of file status information);\0A                               with -l: show ctime and sort by name;\0A                               otherwise: sort by ctime, newest first\0A\00", align 1
@.str.18 = private unnamed_addr constant [367 x i8] c"  -C                         list entries by columns\0A      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\0A                               if omitted), 'auto', or 'never'; more info below\0A  -d, --directory            list directories themselves, not their contents\0A  -D, --dired                generate output designed for Emacs' dired mode\0A\00", align 1
@.str.19 = private unnamed_addr constant [419 x i8] c"  -f                         do not sort, enable -aU, disable -ls --color\0A  -F, --classify             append indicator (one of */=>@|) to entries\0A      --file-type            likewise, except do not append '*'\0A      --format=WORD          across -x, commas -m, horizontal -x, long -l,\0A                               single-column -1, verbose -l, vertical -C\0A      --full-time            like -l --time-style=full-iso\0A\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"  -g                         like -l, but do not list owner\0A\00", align 1
@.str.21 = private unnamed_addr constant [245 x i8] c"      --group-directories-first\0A                             group directories before files;\0A                               can be augmented with a --sort option, but any\0A                               use of --sort=none (-U) disables grouping\0A\00", align 1
@.str.22 = private unnamed_addr constant [73 x i8] c"  -G, --no-group             in a long listing, don't print group names\0A\00", align 1
@.str.23 = private unnamed_addr constant [150 x i8] c"  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\0A      --si                   likewise, but use powers of 1000 not 1024\0A\00", align 1
@.str.24 = private unnamed_addr constant [422 x i8] c"  -H, --dereference-command-line\0A                             follow symbolic links listed on the command line\0A      --dereference-command-line-symlink-to-dir\0A                             follow each command line symbolic link\0A                               that points to a directory\0A      --hide=PATTERN         do not list implied entries matching shell PATTERN\0A                               (overridden by -a or -A)\0A\00", align 1
@.str.25 = private unnamed_addr constant [145 x i8] c"      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\0A                               (default if omitted), 'auto', or 'never'\0A\00", align 1
@.str.26 = private unnamed_addr constant [354 x i8] c"      --indicator-style=WORD  append indicator with style WORD to entry names:\0A                               none (default), slash (-p),\0A                               file-type (--file-type), classify (-F)\0A  -i, --inode                print the index number of each file\0A  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\0A\00", align 1
@.str.27 = private unnamed_addr constant [148 x i8] c"  -k, --kibibytes            default to 1024-byte blocks for disk usage;\0A                               used only with -s and per directory totals\0A\00", align 1
@.str.28 = private unnamed_addr constant [359 x i8] c"  -l                         use a long listing format\0A  -L, --dereference          when showing file information for a symbolic\0A                               link, show information for the file the link\0A                               references rather than for the link itself\0A  -m                         fill width with a comma separated list of entries\0A\00", align 1
@.str.29 = private unnamed_addr constant [303 x i8] c"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\0A  -N, --literal              print entry names without quoting\0A  -o                         like -l, but do not list group information\0A  -p, --indicator-style=slash\0A                             append / indicator to directories\0A\00", align 1
@.str.30 = private unnamed_addr constant [585 x i8] c"  -q, --hide-control-chars   print ? instead of nongraphic characters\0A      --show-control-chars   show nongraphic characters as-is (the default,\0A                               unless program is 'ls' and output is a terminal)\0A  -Q, --quote-name           enclose entry names in double quotes\0A      --quoting-style=WORD   use quoting style WORD for entry names:\0A                               literal, locale, shell, shell-always,\0A                               shell-escape, shell-escape-always, c, escape\0A                               (overrides QUOTING_STYLE environment variable)\0A\00", align 1
@.str.31 = private unnamed_addr constant [197 x i8] c"  -r, --reverse              reverse order while sorting\0A  -R, --recursive            list subdirectories recursively\0A  -s, --size                 print the allocated size of each file, in blocks\0A\00", align 1
@.str.32 = private unnamed_addr constant [519 x i8] c"  -S                         sort by file size, largest first\0A      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\0A                               time (-t), version (-v), extension (-X)\0A      --time=WORD            with -l, show time as WORD instead of default\0A                               modification time: atime or access or use (-u);\0A                               ctime or status (-c); also use specified time\0A                               as sort key if --sort=time (newest first)\0A\00", align 1
@.str.33 = private unnamed_addr constant [79 x i8] c"      --time-style=TIME_STYLE  time/date format with -l; see TIME_STYLE below\0A\00", align 1
@.str.34 = private unnamed_addr constant [142 x i8] c"  -t                         sort by modification time, newest first\0A  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\0A\00", align 1
@.str.35 = private unnamed_addr constant [372 x i8] c"  -u                         with -lt: sort by, and show, access time;\0A                               with -l: show access time and sort by name;\0A                               otherwise: sort by access time, newest first\0A  -U                         do not sort; list entries in directory order\0A  -v                         natural sort of (version) numbers within text\0A\00", align 1
@.str.36 = private unnamed_addr constant [363 x i8] c"  -w, --width=COLS           set output width to COLS.  0 means no limit\0A  -x                         list entries by lines instead of by columns\0A  -X                         sort alphabetically by entry extension\0A  -Z, --context              print any security context of each file\0A  -1                         list one file per line.  Avoid '\5Cn' with -q or -b\0A\00", align 1
@.str.37 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.39 = private unnamed_addr constant [376 x i8] c"\0AThe TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\0AFORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newline>FORMAT2,\0Athen FORMAT1 applies to non-recent files and FORMAT2 to recent files.\0ATIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\0AAlso the TIME_STYLE environment variable sets the default style to use.\0A\00", align 1
@.str.40 = private unnamed_addr constant [286 x i8] c"\0AUsing color to distinguish file types is disabled both by default and\0Awith --color=never.  With --color=auto, ls emits color codes only when\0Astandard output is connected to a terminal.  The LS_COLORS environment\0Avariable can change the settings.  Use the dircolors command to set it.\0A\00", align 1
@.str.41 = private unnamed_addr constant [152 x i8] c"\0AExit status:\0A 0  if OK,\0A 1  if minor problems (e.g., cannot access subdirectory),\0A 2  if serious trouble (e.g., cannot access command-line argument).\0A\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.234, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.235, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.241 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.242 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.244 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.245 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.246 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.247 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.233 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.234 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.235 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.236 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.237 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.238 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.239 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.240 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.232 = private unnamed_addr constant [212 x i8] c"\0AThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\0AUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\0ABinary prefixes can be used, too: KiB=K, MiB=M, and so on.\0A\00", align 1
@.str.231 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.165 = private unnamed_addr constant [6 x i8] c"slash\00", align 1
@.str.118 = private unnamed_addr constant [10 x i8] c"file-type\00", align 1
@.str.117 = private unnamed_addr constant [9 x i8] c"classify\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"always\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.159 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.160 = private unnamed_addr constant [6 x i8] c"never\00", align 1
@.str.162 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"tty\00", align 1
@.str.164 = private unnamed_addr constant [7 x i8] c"if-tty\00", align 1
@.str.150 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.151 = private unnamed_addr constant [5 x i8] c"long\00", align 1
@.str.152 = private unnamed_addr constant [7 x i8] c"commas\00", align 1
@.str.153 = private unnamed_addr constant [11 x i8] c"horizontal\00", align 1
@.str.154 = private unnamed_addr constant [7 x i8] c"across\00", align 1
@.str.155 = private unnamed_addr constant [9 x i8] c"vertical\00", align 1
@.str.156 = private unnamed_addr constant [14 x i8] c"single-column\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"atime\00", align 1
@.str.146 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"use\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"ctime\00", align 1
@.str.149 = private unnamed_addr constant [7 x i8] c"status\00", align 1
@.str.134 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.144 = private unnamed_addr constant [10 x i8] c"extension\00", align 1
@.str.142 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"directory\00", align 1
@.str.103 = private unnamed_addr constant [6 x i8] c"dired\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"full-time\00", align 1
@.str.105 = private unnamed_addr constant [24 x i8] c"group-directories-first\00", align 1
@.str.106 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.107 = private unnamed_addr constant [6 x i8] c"inode\00", align 1
@.str.108 = private unnamed_addr constant [10 x i8] c"kibibytes\00", align 1
@.str.109 = private unnamed_addr constant [16 x i8] c"numeric-uid-gid\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"no-group\00", align 1
@.str.111 = private unnamed_addr constant [19 x i8] c"hide-control-chars\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"almost-all\00", align 1
@.str.116 = private unnamed_addr constant [15 x i8] c"ignore-backups\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@.str.120 = private unnamed_addr constant [25 x i8] c"dereference-command-line\00", align 1
@.str.121 = private unnamed_addr constant [40 x i8] c"dereference-command-line-symlink-to-dir\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"hide\00", align 1
@.str.123 = private unnamed_addr constant [7 x i8] c"ignore\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"indicator-style\00", align 1
@.str.125 = private unnamed_addr constant [12 x i8] c"dereference\00", align 1
@.str.126 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"quote-name\00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"quoting-style\00", align 1
@.str.129 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@.str.131 = private unnamed_addr constant [19 x i8] c"show-control-chars\00", align 1
@.str.132 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.133 = private unnamed_addr constant [8 x i8] c"tabsize\00", align 1
@.str.135 = private unnamed_addr constant [11 x i8] c"time-style\00", align 1
@.str.136 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.137 = private unnamed_addr constant [10 x i8] c"hyperlink\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"block-size\00", align 1
@.str.139 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.140 = private unnamed_addr constant [7 x i8] c"author\00", align 1
@.str.141 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.98 = private unnamed_addr constant [14 x i8] c"QUOTING_STYLE\00", align 1
@.str.99 = private unnamed_addr constant [65 x i8] c"ignoring invalid value of environment variable QUOTING_STYLE: %s\00", align 1
@ls_mode = dso_local global i32 1, align 4, !dbg !1088, !ctir !27
@Version = dso_local global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.248, i32 0, i32 0), align 8, !dbg !1093, !ctir !146
@.str.248 = private unnamed_addr constant [5 x i8] c"8.31\00", align 1
@argmatch_die = dso_local global void ()* @__argmatch_die, align 8, !dbg !1099, !ctir !656
@.str.257 = private unnamed_addr constant [27 x i8] c"invalid argument %s for %s\00", align 1
@.str.1.258 = private unnamed_addr constant [29 x i8] c"ambiguous argument %s for %s\00", align 1
@.str.2.259 = private unnamed_addr constant [21 x i8] c"Valid arguments are:\00", align 1
@.str.3.260 = private unnamed_addr constant [8 x i8] c"\0A  - %s\00", align 1
@.str.4.261 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@.str.270 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@file_name = internal global i8* null, align 8, !dbg !1140, !ctir !146
@ignore_EPIPE = internal global i8 0, align 1, !dbg !1180, !ctir !141
@.str.273 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.1.274 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.275 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = dso_local global i32 1, align 4, !dbg !1183, !ctir !450
@.str.284 = private unnamed_addr constant [24 x i8] c"system.posix_acl_access\00", align 1
@.str.1.285 = private unnamed_addr constant [25 x i8] c"system.posix_acl_default\00", align 1
@.str.298 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.299 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.304 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.305 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.308 = private unnamed_addr constant [24 x i8] c"# entries:         %lu\0A\00", align 1
@.str.1.309 = private unnamed_addr constant [24 x i8] c"# buckets:         %lu\0A\00", align 1
@.str.2.310 = private unnamed_addr constant [33 x i8] c"# buckets used:    %lu (%.2f%%)\0A\00", align 1
@.str.3.311 = private unnamed_addr constant [24 x i8] c"max bucket length: %lu\0A\00", align 1
@default_tuning = internal constant %struct.hash_tuning { float 0.000000e+00, float 1.000000e+00, float 0x3FE99999A0000000, float 0x3FF69FBE80000000, i8 0 }, align 4, !dbg !1190, !ctir !1214
@.str.330 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.331 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.332 = private unnamed_addr constant [6 x i8] c"%.0Lf\00", align 1
@.str.3.333 = private unnamed_addr constant [6 x i8] c"%.1Lf\00", align 1
@power_letter = internal constant [9 x i8] c"\00KMGTPEZY", align 1, !dbg !1239, !ctir !1275
@.str.9.336 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.4.337 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@.str.5.338 = private unnamed_addr constant [10 x i8] c"BLOCKSIZE\00", align 1
@block_size_args = internal constant [3 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7.340, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8.341, i32 0, i32 0), i8* null], align 16, !dbg !1280, !ctir !1277
@block_size_opts = internal constant [2 x i32] [i32 176, i32 144], align 4, !dbg !1283, !ctir !1278
@.str.6.339 = private unnamed_addr constant [18 x i8] c"eEgGkKmMpPtTyYzZ0\00", align 1
@.str.7.340 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.8.341 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@user_alist = internal global %struct.userid* null, align 8, !dbg !1285, !ctir !1290
@.str.344 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@nouser_alist = internal global %struct.userid* null, align 8, !dbg !1323, !ctir !1290
@group_alist = internal global %struct.userid* null, align 8, !dbg !1325, !ctir !1290
@nogroup_alist = internal global %struct.userid* null, align 8, !dbg !1327, !ctir !1290
@.str.361 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.362 = private unnamed_addr constant [9 x i8] c"%m/%d/%y\00", align 1
@.str.2.363 = private unnamed_addr constant [9 x i8] c"%Y-%m-%d\00", align 1
@.str.3.364 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str.4.365 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@program_name = dso_local global i8* null, align 8, !dbg !1329, !ctir !146
@.str.370 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.371 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.372 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8, !ctir !143
@program_invocation_name = external dso_local global i8*, align 8, !ctir !143
@quoting_style_args = dso_local constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.375, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.376, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.377, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.378, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.379, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.380, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.381, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.382, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.383, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.384, i32 0, i32 0), i8* null], align 16, !dbg !1373, !ctir !1379
@.str.375 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.376 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.377 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.378 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.379 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.380 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.381 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.382 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.383 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.384 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16, !dbg !1413, !ctir !1380
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !1415, !ctir !1382
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !1417, !ctir !1382
@.str.10.397 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.398 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.399 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.400 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.401 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.402 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.403 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.404 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.405 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal global %struct.bin_str* @slotvec0, align 8, !dbg !1421, !ctir !1395
@nslots = internal global i32 1, align 4, !dbg !1423, !ctir !27
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !1419, !ctir !453
@slotvec0 = internal global %struct.bin_str { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !1425, !ctir !1396
@.str.420 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.435 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.436 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.437 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.438 = private unnamed_addr constant [204 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00", align 1
@.str.4.439 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.5.440 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.6.441 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.7.442 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.8.443 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.9.444 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.10.445 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.11.446 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.12.447 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.13.448 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.14.451 = private unnamed_addr constant [21 x i8] c"\0AReport bugs to: %s\0A\00", align 1
@.str.15.452 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.16.453 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.17.454 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.18.455 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.19.456 = private unnamed_addr constant [65 x i8] c"General help using GNU software: <https://www.gnu.org/gethelp/>\0A\00", align 1
@version_etc_copyright = dso_local constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !1427, !ctir !1432
@.str.1.475 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.476 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.479 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.486 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.487 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.490 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.1.491 = private unnamed_addr constant [27 x i8] c"invalid %s%s argument '%s'\00", align 1
@.str.2.492 = private unnamed_addr constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00", align 1
@.str.3.493 = private unnamed_addr constant [29 x i8] c"%s%s argument '%s' too large\00", align 1
@.str.496 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.497 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoumax = private unnamed_addr constant [79 x i8] c"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\00", align 1
@obstack_alloc_failed_handler = dso_local global void ()* @print_and_abort, align 8, !dbg !1437, !ctir !531
@.str.1.502 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.503 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.512 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str.1.513 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.530 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.531 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !1847 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %i = alloca i32, align 4, !ctir !27
  %thispend = alloca %struct.pending*, align 8, !ctir !235
  %n_files = alloca i32, align 4, !ctir !27
  %di = alloca %struct.dev_ino, align 8, !ctir !265
  %found = alloca %struct.dev_ino*, align 8, !ctir !264
  %j = alloca i32, align 4, !ctir !27
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !1848, metadata !DIExpression()), !dbg !1849
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !1850, metadata !DIExpression()), !dbg !1851
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1852, metadata !DIExpression()), !dbg !1853
  call void @llvm.dbg.declare(metadata %struct.pending** %thispend, metadata !1854, metadata !DIExpression()), !dbg !1855
  call void @llvm.dbg.declare(metadata i32* %n_files, metadata !1856, metadata !DIExpression()), !dbg !1857
  %0 = load i8**, i8*** %argv.addr, align 8, !dbg !1858
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0, !dbg !1858, !ctir !142
  %1 = load i8*, i8** %arrayidx, align 8, !dbg !1858
  call void @set_program_name(i8* %1), !dbg !1859
  %call = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #13, !dbg !1860
  %call1 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #13, !dbg !1861
  %call2 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #13, !dbg !1862
  call void @initialize_exit_failure(i32 2), !dbg !1863
  %call3 = call i32 @atexit(void ()* @close_stdout) #13, !dbg !1864
  store i32 0, i32* @exit_status, align 4, !dbg !1865
  store i8 1, i8* @print_dir_name, align 1, !dbg !1866
  store %struct.pending* null, %struct.pending** @pending_dirs, align 8, !dbg !1867
  store i64 -9223372036854775808, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 0), align 8, !dbg !1868, !ctir !164
  store i64 -1, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 1), align 8, !dbg !1869, !ctir !219
  %2 = load i32, i32* %argc.addr, align 4, !dbg !1870
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !1871
  %call4 = call i32 @decode_switches(i32 %2, i8** %3), !dbg !1872
  store i32 %call4, i32* %i, align 4, !dbg !1873
  %4 = load i8, i8* @print_with_color, align 1, !dbg !1874
  %tobool = trunc i8 %4 to i1, !dbg !1874
  br i1 %tobool, label %if.then, label %if.end, !dbg !1876

if.then:                                          ; preds = %entry
  call void @parse_ls_color(), !dbg !1877
  br label %if.end, !dbg !1877

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* @directories_first, align 1, !dbg !1878
  %tobool5 = trunc i8 %5 to i1, !dbg !1878
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !1880

if.then6:                                         ; preds = %if.end
  store i8 1, i8* @check_symlink_mode, align 1, !dbg !1881
  br label %if.end18, !dbg !1882

if.else:                                          ; preds = %if.end
  %6 = load i8, i8* @print_with_color, align 1, !dbg !1883
  %tobool7 = trunc i8 %6 to i1, !dbg !1883
  br i1 %tobool7, label %if.then8, label %if.end17, !dbg !1885

if.then8:                                         ; preds = %if.else
  %call9 = call zeroext i1 @is_colored(i32 13), !dbg !1886
  br i1 %call9, label %if.then15, label %lor.lhs.false, !dbg !1889

lor.lhs.false:                                    ; preds = %if.then8
  %call10 = call zeroext i1 @is_colored(i32 14), !dbg !1890
  br i1 %call10, label %land.lhs.true, label %lor.lhs.false12, !dbg !1891

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load i8, i8* @color_symlink_as_referent, align 1, !dbg !1892
  %tobool11 = trunc i8 %7 to i1, !dbg !1892
  br i1 %tobool11, label %if.then15, label %lor.lhs.false12, !dbg !1893

lor.lhs.false12:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %call13 = call zeroext i1 @is_colored(i32 12), !dbg !1894
  br i1 %call13, label %land.lhs.true14, label %if.end16, !dbg !1895

land.lhs.true14:                                  ; preds = %lor.lhs.false12
  %8 = load i32, i32* @format, align 4, !dbg !1896
  %cmp = icmp eq i32 %8, 0, !dbg !1897
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !1898

if.then15:                                        ; preds = %land.lhs.true14, %land.lhs.true, %if.then8
  store i8 1, i8* @check_symlink_mode, align 1, !dbg !1899
  br label %if.end16, !dbg !1900

if.end16:                                         ; preds = %if.then15, %land.lhs.true14, %lor.lhs.false12
  br label %if.end17, !dbg !1901

if.end17:                                         ; preds = %if.end16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then6
  %9 = load i32, i32* @dereference, align 4, !dbg !1902
  %cmp19 = icmp eq i32 %9, 1, !dbg !1904
  br i1 %cmp19, label %if.then20, label %if.end25, !dbg !1905

if.then20:                                        ; preds = %if.end18
  %10 = load i8, i8* @immediate_dirs, align 1, !dbg !1906
  %tobool21 = trunc i8 %10 to i1, !dbg !1906
  br i1 %tobool21, label %lor.end, label %lor.lhs.false22, !dbg !1907

lor.lhs.false22:                                  ; preds = %if.then20
  %11 = load i32, i32* @indicator_style, align 4, !dbg !1908
  %cmp23 = icmp eq i32 %11, 3, !dbg !1909
  br i1 %cmp23, label %lor.end, label %lor.rhs, !dbg !1910

lor.rhs:                                          ; preds = %lor.lhs.false22
  %12 = load i32, i32* @format, align 4, !dbg !1911
  %cmp24 = icmp eq i32 %12, 0, !dbg !1912
  br label %lor.end, !dbg !1910

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false22, %if.then20
  %13 = phi i1 [ true, %lor.lhs.false22 ], [ true, %if.then20 ], [ %cmp24, %lor.rhs ]
  %14 = zext i1 %13 to i64, !dbg !1913
  %cond = select i1 %13, i32 2, i32 4, !dbg !1913
  store i32 %cond, i32* @dereference, align 4, !dbg !1914
  br label %if.end25, !dbg !1915

if.end25:                                         ; preds = %lor.end, %if.end18
  %15 = load i8, i8* @recursive, align 1, !dbg !1916
  %tobool26 = trunc i8 %15 to i1, !dbg !1916
  br i1 %tobool26, label %if.then27, label %if.end33, !dbg !1918

if.then27:                                        ; preds = %if.end25
  %call28 = call %struct.hash_table* @hash_initialize(i64 30, %struct.hash_tuning* null, i64 (i8*, i64)* @dev_ino_hash, i1 (i8*, i8*)* @dev_ino_compare, void (i8*)* @dev_ino_free), !dbg !1919
  store %struct.hash_table* %call28, %struct.hash_table** @active_dir_set, align 8, !dbg !1921
  %16 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !1922
  %cmp29 = icmp eq %struct.hash_table* %16, null, !dbg !1924
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !1925

if.then30:                                        ; preds = %if.then27
  call void @xalloc_die() #14, !dbg !1926
  unreachable, !dbg !1926

if.end31:                                         ; preds = %if.then27
  %call32 = call i32 @_obstack_begin(%struct.obstack* @dev_ino_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !1927
  br label %if.end33, !dbg !1928

if.end33:                                         ; preds = %if.end31, %if.end25
  %call34 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #13, !dbg !1929
  %call35 = call %struct.tm_zone* @tzalloc(i8* %call34), !dbg !1930
  store %struct.tm_zone* %call35, %struct.tm_zone** @localtz, align 8, !dbg !1931
  %17 = load i32, i32* @sort_type, align 4, !dbg !1932
  %cmp36 = icmp eq i32 %17, 4, !dbg !1933
  br i1 %cmp36, label %lor.end45, label %lor.lhs.false37, !dbg !1934

lor.lhs.false37:                                  ; preds = %if.end33
  %18 = load i32, i32* @sort_type, align 4, !dbg !1935
  %cmp38 = icmp eq i32 %18, 2, !dbg !1936
  br i1 %cmp38, label %lor.end45, label %lor.lhs.false39, !dbg !1937

lor.lhs.false39:                                  ; preds = %lor.lhs.false37
  %19 = load i32, i32* @format, align 4, !dbg !1938
  %cmp40 = icmp eq i32 %19, 0, !dbg !1939
  br i1 %cmp40, label %lor.end45, label %lor.lhs.false41, !dbg !1940

lor.lhs.false41:                                  ; preds = %lor.lhs.false39
  %20 = load i8, i8* @print_scontext, align 1, !dbg !1941
  %tobool42 = trunc i8 %20 to i1, !dbg !1941
  br i1 %tobool42, label %lor.end45, label %lor.rhs43, !dbg !1942

lor.rhs43:                                        ; preds = %lor.lhs.false41
  %21 = load i8, i8* @print_block_size, align 1, !dbg !1943
  %tobool44 = trunc i8 %21 to i1, !dbg !1943
  br label %lor.end45, !dbg !1942

lor.end45:                                        ; preds = %lor.rhs43, %lor.lhs.false41, %lor.lhs.false39, %lor.lhs.false37, %if.end33
  %22 = phi i1 [ true, %lor.lhs.false41 ], [ true, %lor.lhs.false39 ], [ true, %lor.lhs.false37 ], [ true, %if.end33 ], [ %tobool44, %lor.rhs43 ]
  %frombool = zext i1 %22 to i8, !dbg !1944
  store i8 %frombool, i8* @format_needs_stat, align 1, !dbg !1944
  %23 = load i8, i8* @format_needs_stat, align 1, !dbg !1945
  %tobool46 = trunc i8 %23 to i1, !dbg !1945
  br i1 %tobool46, label %land.end, label %land.rhs, !dbg !1946

land.rhs:                                         ; preds = %lor.end45
  %24 = load i8, i8* @recursive, align 1, !dbg !1947
  %tobool47 = trunc i8 %24 to i1, !dbg !1947
  br i1 %tobool47, label %lor.end54, label %lor.lhs.false48, !dbg !1948

lor.lhs.false48:                                  ; preds = %land.rhs
  %25 = load i8, i8* @print_with_color, align 1, !dbg !1949
  %tobool49 = trunc i8 %25 to i1, !dbg !1949
  br i1 %tobool49, label %lor.end54, label %lor.lhs.false50, !dbg !1950

lor.lhs.false50:                                  ; preds = %lor.lhs.false48
  %26 = load i32, i32* @indicator_style, align 4, !dbg !1951
  %cmp51 = icmp ne i32 %26, 0, !dbg !1952
  br i1 %cmp51, label %lor.end54, label %lor.rhs52, !dbg !1953

lor.rhs52:                                        ; preds = %lor.lhs.false50
  %27 = load i8, i8* @directories_first, align 1, !dbg !1954
  %tobool53 = trunc i8 %27 to i1, !dbg !1954
  br label %lor.end54, !dbg !1953

lor.end54:                                        ; preds = %lor.rhs52, %lor.lhs.false50, %lor.lhs.false48, %land.rhs
  %28 = phi i1 [ true, %lor.lhs.false50 ], [ true, %lor.lhs.false48 ], [ true, %land.rhs ], [ %tobool53, %lor.rhs52 ]
  br label %land.end

land.end:                                         ; preds = %lor.end54, %lor.end45
  %29 = phi i1 [ false, %lor.end45 ], [ %28, %lor.end54 ], !dbg !1955
  %frombool55 = zext i1 %29 to i8, !dbg !1956
  store i8 %frombool55, i8* @format_needs_type, align 1, !dbg !1956
  %30 = load i8, i8* @dired, align 1, !dbg !1957
  %tobool56 = trunc i8 %30 to i1, !dbg !1957
  br i1 %tobool56, label %if.then57, label %if.end60, !dbg !1959

if.then57:                                        ; preds = %land.end
  %call58 = call i32 @_obstack_begin(%struct.obstack* @dired_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !1960
  %call59 = call i32 @_obstack_begin(%struct.obstack* @subdired_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !1962
  br label %if.end60, !dbg !1963

if.end60:                                         ; preds = %if.then57, %land.end
  %31 = load i8, i8* @print_hyperlink, align 1, !dbg !1964
  %tobool61 = trunc i8 %31 to i1, !dbg !1964
  br i1 %tobool61, label %if.then62, label %if.end67, !dbg !1966

if.then62:                                        ; preds = %if.end60
  call void @file_escape_init(), !dbg !1967
  %call63 = call i8* @xgethostname(), !dbg !1969
  store i8* %call63, i8** @hostname, align 8, !dbg !1970
  %32 = load i8*, i8** @hostname, align 8, !dbg !1971
  %tobool64 = icmp ne i8* %32, null, !dbg !1971
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !1973

if.then65:                                        ; preds = %if.then62
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8** @hostname, align 8, !dbg !1974
  br label %if.end66, !dbg !1975

if.end66:                                         ; preds = %if.then65, %if.then62
  br label %if.end67, !dbg !1976

if.end67:                                         ; preds = %if.end66, %if.end60
  store i64 100, i64* @cwd_n_alloc, align 8, !dbg !1977
  %33 = load i64, i64* @cwd_n_alloc, align 8, !dbg !1978
  %call68 = call noalias i8* @xnmalloc(i64 %33, i64 200), !dbg !1979
  %34 = bitcast i8* %call68 to %struct.fileinfo*, !dbg !1979
  store %struct.fileinfo* %34, %struct.fileinfo** @cwd_file, align 8, !dbg !1980
  store i64 0, i64* @cwd_n_used, align 8, !dbg !1981
  call void @clear_files(), !dbg !1982
  %35 = load i32, i32* %argc.addr, align 4, !dbg !1983
  %36 = load i32, i32* %i, align 4, !dbg !1984
  %sub = sub nsw i32 %35, %36, !dbg !1985
  store i32 %sub, i32* %n_files, align 4, !dbg !1986
  %37 = load i32, i32* %n_files, align 4, !dbg !1987
  %cmp69 = icmp sle i32 %37, 0, !dbg !1989
  br i1 %cmp69, label %if.then70, label %if.else76, !dbg !1990

if.then70:                                        ; preds = %if.end67
  %38 = load i8, i8* @immediate_dirs, align 1, !dbg !1991
  %tobool71 = trunc i8 %38 to i1, !dbg !1991
  br i1 %tobool71, label %if.then72, label %if.else74, !dbg !1994

if.then72:                                        ; preds = %if.then70
  %call73 = call i64 @gobble_file(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 3, i64 0, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)), !dbg !1995
  br label %if.end75, !dbg !1995

if.else74:                                        ; preds = %if.then70
  call void @queue_directory(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* null, i1 zeroext true), !dbg !1996
  br label %if.end75

if.end75:                                         ; preds = %if.else74, %if.then72
  br label %if.end80, !dbg !1997

if.else76:                                        ; preds = %if.end67
  br label %do.body, !dbg !1998

do.body:                                          ; preds = %do.cond, %if.else76
  %39 = load i8**, i8*** %argv.addr, align 8, !dbg !1999
  %40 = load i32, i32* %i, align 4, !dbg !2000
  %inc = add nsw i32 %40, 1, !dbg !2000
  store i32 %inc, i32* %i, align 4, !dbg !2000
  %idxprom = sext i32 %40 to i64, !dbg !1999
  %arrayidx77 = getelementptr inbounds i8*, i8** %39, i64 %idxprom, !dbg !1999, !ctir !142
  %41 = load i8*, i8** %arrayidx77, align 8, !dbg !1999
  %call78 = call i64 @gobble_file(i8* %41, i32 0, i64 0, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)), !dbg !2001
  br label %do.cond, !dbg !2001

do.cond:                                          ; preds = %do.body
  %42 = load i32, i32* %i, align 4, !dbg !2002
  %43 = load i32, i32* %argc.addr, align 4, !dbg !2003
  %cmp79 = icmp slt i32 %42, %43, !dbg !2004
  br i1 %cmp79, label %do.body, label %do.end, !dbg !2001, !llvm.loop !2005

do.end:                                           ; preds = %do.cond
  br label %if.end80

if.end80:                                         ; preds = %do.end, %if.end75
  %44 = load i64, i64* @cwd_n_used, align 8, !dbg !2007
  %tobool81 = icmp ne i64 %44, 0, !dbg !2007
  br i1 %tobool81, label %if.then82, label %if.end86, !dbg !2009

if.then82:                                        ; preds = %if.end80
  call void @sort_files(), !dbg !2010
  %45 = load i8, i8* @immediate_dirs, align 1, !dbg !2012
  %tobool83 = trunc i8 %45 to i1, !dbg !2012
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !2014

if.then84:                                        ; preds = %if.then82
  call void @extract_dirs_from_files(i8* null, i1 zeroext true), !dbg !2015
  br label %if.end85, !dbg !2015

if.end85:                                         ; preds = %if.then84, %if.then82
  br label %if.end86, !dbg !2016

if.end86:                                         ; preds = %if.end85, %if.end80
  %46 = load i64, i64* @cwd_n_used, align 8, !dbg !2017
  %tobool87 = icmp ne i64 %46, 0, !dbg !2017
  br i1 %tobool87, label %if.then88, label %if.else97, !dbg !2019

if.then88:                                        ; preds = %if.end86
  call void @print_current_files(), !dbg !2020
  %47 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2022
  %tobool89 = icmp ne %struct.pending* %47, null, !dbg !2022
  br i1 %tobool89, label %if.then90, label %if.end96, !dbg !2024

if.then90:                                        ; preds = %if.then88
  br label %do.body91, !dbg !2025

do.body91:                                        ; preds = %if.then90
  %call92 = call i32 @putchar_unlocked(i32 10), !dbg !2026
  %48 = load i64, i64* @dired_pos, align 8, !dbg !2026
  %inc93 = add i64 %48, 1, !dbg !2026
  store i64 %inc93, i64* @dired_pos, align 8, !dbg !2026
  br label %do.end95, !dbg !2026

do.end95:                                         ; preds = %do.body91
  br label %if.end96, !dbg !2026

if.end96:                                         ; preds = %do.end95, %if.then88
  br label %if.end105, !dbg !2028

if.else97:                                        ; preds = %if.end86
  %49 = load i32, i32* %n_files, align 4, !dbg !2029
  %cmp98 = icmp sle i32 %49, 1, !dbg !2031
  br i1 %cmp98, label %land.lhs.true99, label %if.end104, !dbg !2032

land.lhs.true99:                                  ; preds = %if.else97
  %50 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2033
  %tobool100 = icmp ne %struct.pending* %50, null, !dbg !2033
  br i1 %tobool100, label %land.lhs.true101, label %if.end104, !dbg !2034

land.lhs.true101:                                 ; preds = %land.lhs.true99
  %51 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2035
  %next = getelementptr inbounds %struct.pending, %struct.pending* %51, i32 0, i32 3, !dbg !2036, !ctir !236
  %52 = load %struct.pending*, %struct.pending** %next, align 8, !dbg !2036, !ctir !235
  %cmp102 = icmp eq %struct.pending* %52, null, !dbg !2037
  br i1 %cmp102, label %if.then103, label %if.end104, !dbg !2038

if.then103:                                       ; preds = %land.lhs.true101
  store i8 0, i8* @print_dir_name, align 1, !dbg !2039
  br label %if.end104, !dbg !2040

if.end104:                                        ; preds = %if.then103, %land.lhs.true101, %land.lhs.true99, %if.else97
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end96
  br label %while.cond, !dbg !2041

while.cond:                                       ; preds = %if.end119, %if.end117, %if.end105
  %53 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2042
  %tobool106 = icmp ne %struct.pending* %53, null, !dbg !2041
  br i1 %tobool106, label %while.body, label %while.end, !dbg !2041

while.body:                                       ; preds = %while.cond
  %54 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2043
  store %struct.pending* %54, %struct.pending** %thispend, align 8, !dbg !2045
  %55 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !2046
  %next107 = getelementptr inbounds %struct.pending, %struct.pending* %55, i32 0, i32 3, !dbg !2047, !ctir !236
  %56 = load %struct.pending*, %struct.pending** %next107, align 8, !dbg !2047, !ctir !235
  store %struct.pending* %56, %struct.pending** @pending_dirs, align 8, !dbg !2048
  %57 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !2049
  %tobool108 = icmp ne %struct.hash_table* %57, null, !dbg !2049
  br i1 %tobool108, label %if.then109, label %if.end119, !dbg !2051

if.then109:                                       ; preds = %while.body
  %58 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2052
  %name = getelementptr inbounds %struct.pending, %struct.pending* %58, i32 0, i32 0, !dbg !2055, !ctir !236
  %59 = load i8*, i8** %name, align 8, !dbg !2055, !ctir !143
  %cmp110 = icmp eq i8* %59, null, !dbg !2056
  br i1 %cmp110, label %if.then111, label %if.end118, !dbg !2057

if.then111:                                       ; preds = %if.then109
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %di, metadata !2058, metadata !DIExpression()), !dbg !2060
  %call112 = call { i64, i64 } @dev_ino_pop(), !dbg !2061
  %60 = bitcast %struct.dev_ino* %di to { i64, i64 }*, !dbg !2061
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 0, !dbg !2061
  %62 = extractvalue { i64, i64 } %call112, 0, !dbg !2061
  store i64 %62, i64* %61, align 8, !dbg !2061
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 1, !dbg !2061
  %64 = extractvalue { i64, i64 } %call112, 1, !dbg !2061
  store i64 %64, i64* %63, align 8, !dbg !2061
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %found, metadata !2062, metadata !DIExpression()), !dbg !2063
  %65 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !2064
  %66 = bitcast %struct.dev_ino* %di to i8*, !dbg !2065
  %call113 = call i8* @hash_delete(%struct.hash_table* %65, i8* %66), !dbg !2066
  %67 = bitcast i8* %call113 to %struct.dev_ino*, !dbg !2066
  store %struct.dev_ino* %67, %struct.dev_ino** %found, align 8, !dbg !2063
  %68 = load %struct.dev_ino*, %struct.dev_ino** %found, align 8, !dbg !2067
  %tobool114 = icmp ne %struct.dev_ino* %68, null, !dbg !2067
  br i1 %tobool114, label %if.then115, label %if.else116, !dbg !2070

if.then115:                                       ; preds = %if.then111
  br label %if.end117, !dbg !2070

if.else116:                                       ; preds = %if.then111
  call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1600, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #15, !dbg !2067
  unreachable, !dbg !2067

if.end117:                                        ; preds = %if.then115
  %69 = load %struct.dev_ino*, %struct.dev_ino** %found, align 8, !dbg !2071
  %70 = bitcast %struct.dev_ino* %69 to i8*, !dbg !2071
  call void @dev_ino_free(i8* %70), !dbg !2072
  %71 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2073
  call void @free_pending_ent(%struct.pending* %71), !dbg !2074
  br label %while.cond, !dbg !2075, !llvm.loop !2076

if.end118:                                        ; preds = %if.then109
  br label %if.end119, !dbg !2078

if.end119:                                        ; preds = %if.end118, %while.body
  %72 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2079
  %name120 = getelementptr inbounds %struct.pending, %struct.pending* %72, i32 0, i32 0, !dbg !2080, !ctir !236
  %73 = load i8*, i8** %name120, align 8, !dbg !2080, !ctir !143
  %74 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2081
  %realname = getelementptr inbounds %struct.pending, %struct.pending* %74, i32 0, i32 1, !dbg !2082, !ctir !236
  %75 = load i8*, i8** %realname, align 8, !dbg !2082, !ctir !143
  %76 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2083
  %command_line_arg = getelementptr inbounds %struct.pending, %struct.pending* %76, i32 0, i32 2, !dbg !2084, !ctir !236
  %77 = load i8, i8* %command_line_arg, align 8, !dbg !2084
  %tobool121 = trunc i8 %77 to i1, !dbg !2084, !ctir !141
  call void @print_dir(i8* %73, i8* %75, i1 zeroext %tobool121), !dbg !2085
  %78 = load %struct.pending*, %struct.pending** %thispend, align 8, !dbg !2086
  call void @free_pending_ent(%struct.pending* %78), !dbg !2087
  store i8 1, i8* @print_dir_name, align 1, !dbg !2088
  br label %while.cond, !dbg !2041, !llvm.loop !2076

while.end:                                        ; preds = %while.cond
  %79 = load i8, i8* @print_with_color, align 1, !dbg !2089
  %tobool122 = trunc i8 %79 to i1, !dbg !2089
  br i1 %tobool122, label %land.lhs.true123, label %if.end145, !dbg !2091

land.lhs.true123:                                 ; preds = %while.end
  %80 = load i8, i8* @used_color, align 1, !dbg !2092
  %tobool124 = trunc i8 %80 to i1, !dbg !2092
  br i1 %tobool124, label %if.then125, label %if.end145, !dbg !2093

if.then125:                                       ; preds = %land.lhs.true123
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2094, metadata !DIExpression()), !dbg !2096
  %81 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16, !dbg !2097, !ctir !149
  %cmp126 = icmp eq i64 %81, 2, !dbg !2099
  br i1 %cmp126, label %land.lhs.true127, label %if.then136, !dbg !2100

land.lhs.true127:                                 ; preds = %if.then125
  %82 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8, !dbg !2101, !ctir !146
  %call128 = call i32 @memcmp(i8* %82, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2) #16, !dbg !2102
  %cmp129 = icmp eq i32 %call128, 0, !dbg !2103
  br i1 %cmp129, label %land.lhs.true130, label %if.then136, !dbg !2104

land.lhs.true130:                                 ; preds = %land.lhs.true127
  %83 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16, !dbg !2105, !ctir !149
  %cmp131 = icmp eq i64 %83, 1, !dbg !2106
  br i1 %cmp131, label %land.lhs.true132, label %if.then136, !dbg !2107

land.lhs.true132:                                 ; preds = %land.lhs.true130
  %84 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8, !dbg !2108, !ctir !146
  %arrayidx133 = getelementptr inbounds i8, i8* %84, i64 0, !dbg !2109, !ctir !146
  %85 = load i8, i8* %arrayidx133, align 1, !dbg !2109
  %conv = sext i8 %85 to i32, !dbg !2109
  %cmp134 = icmp eq i32 %conv, 109, !dbg !2110
  br i1 %cmp134, label %if.end137, label %if.then136, !dbg !2111

if.then136:                                       ; preds = %land.lhs.true132, %land.lhs.true130, %land.lhs.true127, %if.then125
  call void @restore_default_color(), !dbg !2112
  br label %if.end137, !dbg !2112

if.end137:                                        ; preds = %if.then136, %land.lhs.true132
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2113
  %call138 = call i32 @fflush_unlocked(%struct._IO_FILE* %86), !dbg !2113
  call void @signal_restore(), !dbg !2114
  %87 = load volatile i32, i32* @stop_signal_count, align 4, !dbg !2115
  store i32 %87, i32* %j, align 4, !dbg !2117
  br label %for.cond, !dbg !2118

for.cond:                                         ; preds = %for.inc, %if.end137
  %88 = load i32, i32* %j, align 4, !dbg !2119
  %tobool139 = icmp ne i32 %88, 0, !dbg !2121
  br i1 %tobool139, label %for.body, label %for.end, !dbg !2121

for.body:                                         ; preds = %for.cond
  %call140 = call i32 @raise(i32 19) #13, !dbg !2122
  br label %for.inc, !dbg !2122

for.inc:                                          ; preds = %for.body
  %89 = load i32, i32* %j, align 4, !dbg !2123
  %dec = add nsw i32 %89, -1, !dbg !2123
  store i32 %dec, i32* %j, align 4, !dbg !2123
  br label %for.cond, !dbg !2124, !llvm.loop !2125

for.end:                                          ; preds = %for.cond
  %90 = load volatile i32, i32* @interrupt_signal, align 4, !dbg !2127
  store i32 %90, i32* %j, align 4, !dbg !2128
  %91 = load i32, i32* %j, align 4, !dbg !2129
  %tobool141 = icmp ne i32 %91, 0, !dbg !2129
  br i1 %tobool141, label %if.then142, label %if.end144, !dbg !2131

if.then142:                                       ; preds = %for.end
  %92 = load i32, i32* %j, align 4, !dbg !2132
  %call143 = call i32 @raise(i32 %92) #13, !dbg !2133
  br label %if.end144, !dbg !2133

if.end144:                                        ; preds = %if.then142, %for.end
  br label %if.end145, !dbg !2134

if.end145:                                        ; preds = %if.end144, %land.lhs.true123, %while.end
  %93 = load i8, i8* @dired, align 1, !dbg !2135
  %tobool146 = trunc i8 %93 to i1, !dbg !2135
  br i1 %tobool146, label %if.then147, label %if.end152, !dbg !2137

if.then147:                                       ; preds = %if.end145
  call void @dired_dump_obstack(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), %struct.obstack* @dired_obstack), !dbg !2138
  call void @dired_dump_obstack(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), %struct.obstack* @subdired_obstack), !dbg !2140
  %94 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !2141
  %call148 = call i32 @get_quoting_style(%struct.quoting_options* %94), !dbg !2142
  %idxprom149 = zext i32 %call148 to i64, !dbg !2143
  %arrayidx150 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([11 x i8*]* @quoting_style_args to [0 x i8*]*), i64 0, i64 %idxprom149, !dbg !2143, !ctir !345
  %95 = load i8*, i8** %arrayidx150, align 8, !dbg !2143
  %call151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %95), !dbg !2144
  br label %if.end152, !dbg !2145

if.end152:                                        ; preds = %if.then147, %if.end145
  %96 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !2146
  %tobool153 = icmp ne %struct.hash_table* %96, null, !dbg !2146
  br i1 %tobool153, label %if.then154, label %if.end161, !dbg !2148

if.then154:                                       ; preds = %if.end152
  %97 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !2149
  %call155 = call i64 @hash_get_n_entries(%struct.hash_table* %97) #16, !dbg !2149
  %cmp156 = icmp eq i64 %call155, 0, !dbg !2149
  br i1 %cmp156, label %if.then158, label %if.else159, !dbg !2153

if.then158:                                       ; preds = %if.then154
  br label %if.end160, !dbg !2153

if.else159:                                       ; preds = %if.then154
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1652, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #15, !dbg !2149
  unreachable, !dbg !2149

if.end160:                                        ; preds = %if.then158
  %98 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !2154
  call void @hash_free(%struct.hash_table* %98), !dbg !2155
  br label %if.end161, !dbg !2156

if.end161:                                        ; preds = %if.end160, %if.end152
  %99 = load i32, i32* @exit_status, align 4, !dbg !2157
  ret i32 %99, !dbg !2158
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initialize_exit_failure(i32 %status) #0 !dbg !2159 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !2160, metadata !DIExpression()), !dbg !2161
  %0 = load i32, i32* %status.addr, align 4, !dbg !2162
  %cmp = icmp ne i32 %0, 1, !dbg !2164
  br i1 %cmp, label %if.then, label %if.end, !dbg !2165

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %status.addr, align 4, !dbg !2166
  store volatile i32 %1, i32* @exit_failure, align 4, !dbg !2167
  br label %if.end, !dbg !2168

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2169
}

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32 %argc, i8** %argv) #0 !dbg !933 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %time_style_option = alloca i8*, align 8, !ctir !143
  %sort_type_specified = alloca i8, align 1, !ctir !141
  %kibibytes_specified = alloca i8, align 1, !ctir !141
  %p = alloca i8*, align 8, !ctir !146
  %ws = alloca %struct.winsize, align 2, !ctir !2170
  %p29 = alloca i8*, align 8, !ctir !146
  %tmp_ulong = alloca i64, align 8, !ctir !151
  %oi = alloca i32, align 4, !ctir !27
  %c = alloca i32, align 4, !ctir !27
  %hide = alloca %struct.ignore_pattern*, align 8, !ctir !617
  %i = alloca i32, align 4, !ctir !27
  %i139 = alloca i32, align 4, !ctir !27
  %e = alloca i32, align 4, !ctir !109
  %ls_block_size = alloca i8*, align 8, !ctir !146
  %qs = alloca i32, align 4, !ctir !95
  %p231 = alloca i8*, align 8, !ctir !146
  %style = alloca i8*, align 8, !ctir !143
  %p0 = alloca i8*, align 8, !ctir !143
  %p1 = alloca i8*, align 8, !ctir !143
  %res = alloca i64, align 8, !ctir !687
  %p304 = alloca i8**, align 8, !ctir !693
  %i320 = alloca i32, align 4, !ctir !27
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !2177, metadata !DIExpression()), !dbg !2178
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !2179, metadata !DIExpression()), !dbg !2180
  call void @llvm.dbg.declare(metadata i8** %time_style_option, metadata !2181, metadata !DIExpression()), !dbg !2182
  store i8* null, i8** %time_style_option, align 8, !dbg !2182
  call void @llvm.dbg.declare(metadata i8* %sort_type_specified, metadata !2183, metadata !DIExpression()), !dbg !2184
  store i8 0, i8* %sort_type_specified, align 1, !dbg !2184
  call void @llvm.dbg.declare(metadata i8* %kibibytes_specified, metadata !2185, metadata !DIExpression()), !dbg !2186
  store i8 0, i8* %kibibytes_specified, align 1, !dbg !2186
  store i8 0, i8* @qmark_funny_chars, align 1, !dbg !2187
  %0 = load i32, i32* @ls_mode, align 4, !dbg !2188
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !2189

sw.bb:                                            ; preds = %entry
  store i32 2, i32* @format, align 4, !dbg !2190
  call void @set_quoting_style(%struct.quoting_options* null, i32 7), !dbg !2192
  br label %sw.epilog, !dbg !2193

sw.bb1:                                           ; preds = %entry
  store i32 0, i32* @format, align 4, !dbg !2194
  call void @set_quoting_style(%struct.quoting_options* null, i32 7), !dbg !2195
  br label %sw.epilog, !dbg !2196

sw.bb2:                                           ; preds = %entry
  %call = call i32 @isatty(i32 1) #13, !dbg !2197
  %tobool = icmp ne i32 %call, 0, !dbg !2197
  br i1 %tobool, label %if.then, label %if.else, !dbg !2199

if.then:                                          ; preds = %sw.bb2
  store i32 2, i32* @format, align 4, !dbg !2200
  call void @set_quoting_style(%struct.quoting_options* null, i32 3), !dbg !2202
  store i8 1, i8* @qmark_funny_chars, align 1, !dbg !2203
  br label %if.end, !dbg !2204

if.else:                                          ; preds = %sw.bb2
  store i32 1, i32* @format, align 4, !dbg !2205
  store i8 0, i8* @qmark_funny_chars, align 1, !dbg !2207
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !2208

sw.default:                                       ; preds = %entry
  call void @abort() #15, !dbg !2209
  unreachable, !dbg !2209

sw.epilog:                                        ; preds = %if.end, %sw.bb1, %sw.bb
  store i32 0, i32* @time_type, align 4, !dbg !2210
  store i32 0, i32* @sort_type, align 4, !dbg !2211
  store i8 0, i8* @sort_reverse, align 1, !dbg !2212
  store i8 0, i8* @numeric_ids, align 1, !dbg !2213
  store i8 0, i8* @print_block_size, align 1, !dbg !2214
  store i32 0, i32* @indicator_style, align 4, !dbg !2215
  store i8 0, i8* @print_inode, align 1, !dbg !2216
  store i32 1, i32* @dereference, align 4, !dbg !2217
  store i8 0, i8* @recursive, align 1, !dbg !2218
  store i8 0, i8* @immediate_dirs, align 1, !dbg !2219
  store i32 0, i32* @ignore_mode, align 4, !dbg !2220
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @ignore_patterns, align 8, !dbg !2221
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @hide_patterns, align 8, !dbg !2222
  store i8 0, i8* @print_scontext, align 1, !dbg !2223
  call void @getenv_quoting_style(), !dbg !2224
  store i64 80, i64* @line_length, align 8, !dbg !2225
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2226, metadata !DIExpression()), !dbg !2228
  %call3 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i64 0, i64 0)) #13, !dbg !2229
  store i8* %call3, i8** %p, align 8, !dbg !2228
  %1 = load i8*, i8** %p, align 8, !dbg !2230
  %tobool4 = icmp ne i8* %1, null, !dbg !2230
  br i1 %tobool4, label %land.lhs.true, label %if.end11, !dbg !2232

land.lhs.true:                                    ; preds = %sw.epilog
  %2 = load i8*, i8** %p, align 8, !dbg !2233
  %3 = load i8, i8* %2, align 1, !dbg !2234, !ctir !147
  %conv = sext i8 %3 to i32, !dbg !2234
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2234
  br i1 %tobool5, label %land.lhs.true6, label %if.end11, !dbg !2235

land.lhs.true6:                                   ; preds = %land.lhs.true
  %4 = load i8*, i8** %p, align 8, !dbg !2236
  %call7 = call zeroext i1 @set_line_length(i8* %4), !dbg !2237
  br i1 %call7, label %if.end11, label %if.then8, !dbg !2238

if.then8:                                         ; preds = %land.lhs.true6
  %call9 = call i8* @gettext(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.64, i64 0, i64 0)) #13, !dbg !2239
  %5 = load i8*, i8** %p, align 8, !dbg !2240
  %call10 = call i8* @quote(i8* %5), !dbg !2241
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call9, i8* %call10), !dbg !2242
  br label %if.end11, !dbg !2242

if.end11:                                         ; preds = %if.then8, %land.lhs.true6, %land.lhs.true, %sw.epilog
  call void @llvm.dbg.declare(metadata %struct.winsize* %ws, metadata !2243, metadata !DIExpression()), !dbg !2245
  %call12 = call i32 (i32, i64, ...) @ioctl(i32 1, i64 21523, %struct.winsize* %ws) #13, !dbg !2246
  %cmp = icmp ne i32 %call12, -1, !dbg !2248
  br i1 %cmp, label %land.lhs.true14, label %if.end28, !dbg !2249

land.lhs.true14:                                  ; preds = %if.end11
  %ws_col = getelementptr inbounds %struct.winsize, %struct.winsize* %ws, i32 0, i32 1, !dbg !2250, !ctir !2170
  %6 = load i16, i16* %ws_col, align 2, !dbg !2250, !ctir !176
  %conv15 = zext i16 %6 to i32, !dbg !2251
  %cmp16 = icmp slt i32 0, %conv15, !dbg !2252
  br i1 %cmp16, label %land.lhs.true18, label %if.end28, !dbg !2253

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %ws_col19 = getelementptr inbounds %struct.winsize, %struct.winsize* %ws, i32 0, i32 1, !dbg !2254, !ctir !2170
  %7 = load i16, i16* %ws_col19, align 2, !dbg !2254, !ctir !176
  %conv20 = zext i16 %7 to i64, !dbg !2255
  %ws_col21 = getelementptr inbounds %struct.winsize, %struct.winsize* %ws, i32 0, i32 1, !dbg !2256, !ctir !2170
  %8 = load i16, i16* %ws_col21, align 2, !dbg !2256, !ctir !176
  %conv22 = zext i16 %8 to i64, !dbg !2257
  %cmp23 = icmp eq i64 %conv20, %conv22, !dbg !2258
  br i1 %cmp23, label %if.then25, label %if.end28, !dbg !2259

if.then25:                                        ; preds = %land.lhs.true18
  %ws_col26 = getelementptr inbounds %struct.winsize, %struct.winsize* %ws, i32 0, i32 1, !dbg !2260, !ctir !2170
  %9 = load i16, i16* %ws_col26, align 2, !dbg !2260, !ctir !176
  %conv27 = zext i16 %9 to i64, !dbg !2261
  store i64 %conv27, i64* @line_length, align 8, !dbg !2262
  br label %if.end28, !dbg !2263

if.end28:                                         ; preds = %if.then25, %land.lhs.true18, %land.lhs.true14, %if.end11
  call void @llvm.dbg.declare(metadata i8** %p29, metadata !2264, metadata !DIExpression()), !dbg !2266
  %call30 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i64 0, i64 0)) #13, !dbg !2267
  store i8* %call30, i8** %p29, align 8, !dbg !2266
  store i64 8, i64* @tabsize, align 8, !dbg !2268
  %10 = load i8*, i8** %p29, align 8, !dbg !2269
  %tobool31 = icmp ne i8* %10, null, !dbg !2269
  br i1 %tobool31, label %if.then32, label %if.end44, !dbg !2271

if.then32:                                        ; preds = %if.end28
  call void @llvm.dbg.declare(metadata i64* %tmp_ulong, metadata !2272, metadata !DIExpression()), !dbg !2274
  %11 = load i8*, i8** %p29, align 8, !dbg !2275
  %call33 = call i32 @xstrtoul(i8* %11, i8** null, i32 0, i64* %tmp_ulong, i8* null), !dbg !2277
  %cmp34 = icmp eq i32 %call33, 0, !dbg !2278
  br i1 %cmp34, label %land.lhs.true36, label %if.else40, !dbg !2279

land.lhs.true36:                                  ; preds = %if.then32
  %12 = load i64, i64* %tmp_ulong, align 8, !dbg !2280
  %cmp37 = icmp ule i64 %12, -1, !dbg !2281
  br i1 %cmp37, label %if.then39, label %if.else40, !dbg !2282

if.then39:                                        ; preds = %land.lhs.true36
  %13 = load i64, i64* %tmp_ulong, align 8, !dbg !2283
  store i64 %13, i64* @tabsize, align 8, !dbg !2285
  br label %if.end43, !dbg !2286

if.else40:                                        ; preds = %land.lhs.true36, %if.then32
  %call41 = call i8* @gettext(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.66, i64 0, i64 0)) #13, !dbg !2287
  %14 = load i8*, i8** %p29, align 8, !dbg !2289
  %call42 = call i8* @quote(i8* %14), !dbg !2290
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call41, i8* %call42), !dbg !2291
  br label %if.end43

if.end43:                                         ; preds = %if.else40, %if.then39
  br label %if.end44, !dbg !2292

if.end44:                                         ; preds = %if.end43, %if.end28
  br label %while.body, !dbg !2293

while.body:                                       ; preds = %if.end44, %sw.epilog182
  call void @llvm.dbg.declare(metadata i32* %oi, metadata !2294, metadata !DIExpression()), !dbg !2296
  store i32 -1, i32* %oi, align 4, !dbg !2296
  call void @llvm.dbg.declare(metadata i32* %c, metadata !2297, metadata !DIExpression()), !dbg !2298
  %15 = load i32, i32* %argc.addr, align 4, !dbg !2299
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !2300
  %call45 = call i32 @getopt_long(i32 %15, i8** %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.67, i64 0, i64 0), %struct.option* getelementptr inbounds ([44 x %struct.option], [44 x %struct.option]* @long_options, i64 0, i64 0), i32* %oi) #13, !dbg !2301
  store i32 %call45, i32* %c, align 4, !dbg !2298
  %17 = load i32, i32* %c, align 4, !dbg !2302
  %cmp46 = icmp eq i32 %17, -1, !dbg !2304
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !2305

if.then48:                                        ; preds = %while.body
  br label %while.end, !dbg !2306

if.end49:                                         ; preds = %while.body
  %18 = load i32, i32* %c, align 4, !dbg !2307
  switch i32 %18, label %sw.default181 [
    i32 97, label %sw.bb50
    i32 98, label %sw.bb51
    i32 99, label %sw.bb52
    i32 100, label %sw.bb53
    i32 102, label %sw.bb54
    i32 132, label %sw.bb61
    i32 103, label %sw.bb62
    i32 104, label %sw.bb63
    i32 105, label %sw.bb64
    i32 107, label %sw.bb65
    i32 108, label %sw.bb66
    i32 109, label %sw.bb67
    i32 110, label %sw.bb68
    i32 111, label %sw.bb69
    i32 112, label %sw.bb70
    i32 113, label %sw.bb71
    i32 114, label %sw.bb72
    i32 115, label %sw.bb73
    i32 116, label %sw.bb74
    i32 117, label %sw.bb75
    i32 118, label %sw.bb76
    i32 119, label %sw.bb77
    i32 120, label %sw.bb83
    i32 65, label %sw.bb84
    i32 66, label %sw.bb85
    i32 67, label %sw.bb86
    i32 68, label %sw.bb87
    i32 70, label %sw.bb88
    i32 71, label %sw.bb89
    i32 72, label %sw.bb90
    i32 131, label %sw.bb91
    i32 73, label %sw.bb92
    i32 76, label %sw.bb93
    i32 78, label %sw.bb94
    i32 81, label %sw.bb95
    i32 82, label %sw.bb96
    i32 83, label %sw.bb97
    i32 84, label %sw.bb98
    i32 85, label %sw.bb101
    i32 88, label %sw.bb102
    i32 49, label %sw.bb103
    i32 128, label %sw.bb108
    i32 136, label %sw.bb109
    i32 142, label %sw.bb111
    i32 135, label %sw.bb113
    i32 143, label %sw.bb114
    i32 133, label %sw.bb117
    i32 134, label %sw.bb120
    i32 130, label %sw.bb122
    i32 137, label %sw.bb138
    i32 138, label %sw.bb157
    i32 139, label %sw.bb160
    i32 144, label %sw.bb163
    i32 140, label %sw.bb164
    i32 129, label %sw.bb165
    i32 141, label %sw.bb171
    i32 90, label %sw.bb172
    i32 -130, label %sw.bb173
    i32 -131, label %sw.bb174
  ], !dbg !2308

sw.bb50:                                          ; preds = %if.end49
  store i32 2, i32* @ignore_mode, align 4, !dbg !2309
  br label %sw.epilog182, !dbg !2311

sw.bb51:                                          ; preds = %if.end49
  call void @set_quoting_style(%struct.quoting_options* null, i32 7), !dbg !2312
  br label %sw.epilog182, !dbg !2313

sw.bb52:                                          ; preds = %if.end49
  store i32 1, i32* @time_type, align 4, !dbg !2314
  br label %sw.epilog182, !dbg !2315

sw.bb53:                                          ; preds = %if.end49
  store i8 1, i8* @immediate_dirs, align 1, !dbg !2316
  br label %sw.epilog182, !dbg !2317

sw.bb54:                                          ; preds = %if.end49
  store i32 2, i32* @ignore_mode, align 4, !dbg !2318
  store i32 -1, i32* @sort_type, align 4, !dbg !2319
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2320
  %19 = load i32, i32* @format, align 4, !dbg !2321
  %cmp55 = icmp eq i32 %19, 0, !dbg !2323
  br i1 %cmp55, label %if.then57, label %if.end60, !dbg !2324

if.then57:                                        ; preds = %sw.bb54
  %call58 = call i32 @isatty(i32 1) #13, !dbg !2325
  %tobool59 = icmp ne i32 %call58, 0, !dbg !2325
  %20 = zext i1 %tobool59 to i64, !dbg !2325
  %cond = select i1 %tobool59, i32 2, i32 1, !dbg !2325
  store i32 %cond, i32* @format, align 4, !dbg !2326
  br label %if.end60, !dbg !2327

if.end60:                                         ; preds = %if.then57, %sw.bb54
  store i8 0, i8* @print_block_size, align 1, !dbg !2328
  store i8 0, i8* @print_with_color, align 1, !dbg !2329
  store i8 0, i8* @print_hyperlink, align 1, !dbg !2330
  br label %sw.epilog182, !dbg !2331

sw.bb61:                                          ; preds = %if.end49
  store i32 2, i32* @indicator_style, align 4, !dbg !2332
  br label %sw.epilog182, !dbg !2333

sw.bb62:                                          ; preds = %if.end49
  store i32 0, i32* @format, align 4, !dbg !2334
  store i8 0, i8* @print_owner, align 1, !dbg !2335
  br label %sw.epilog182, !dbg !2336

sw.bb63:                                          ; preds = %if.end49
  store i32 176, i32* @human_output_opts, align 4, !dbg !2337
  store i32 176, i32* @file_human_output_opts, align 4, !dbg !2338
  store i64 1, i64* @output_block_size, align 8, !dbg !2339
  store i64 1, i64* @file_output_block_size, align 8, !dbg !2340
  br label %sw.epilog182, !dbg !2341

sw.bb64:                                          ; preds = %if.end49
  store i8 1, i8* @print_inode, align 1, !dbg !2342
  br label %sw.epilog182, !dbg !2343

sw.bb65:                                          ; preds = %if.end49
  store i8 1, i8* %kibibytes_specified, align 1, !dbg !2344
  br label %sw.epilog182, !dbg !2345

sw.bb66:                                          ; preds = %if.end49
  store i32 0, i32* @format, align 4, !dbg !2346
  br label %sw.epilog182, !dbg !2347

sw.bb67:                                          ; preds = %if.end49
  store i32 4, i32* @format, align 4, !dbg !2348
  br label %sw.epilog182, !dbg !2349

sw.bb68:                                          ; preds = %if.end49
  store i8 1, i8* @numeric_ids, align 1, !dbg !2350
  store i32 0, i32* @format, align 4, !dbg !2351
  br label %sw.epilog182, !dbg !2352

sw.bb69:                                          ; preds = %if.end49
  store i32 0, i32* @format, align 4, !dbg !2353
  store i8 0, i8* @print_group, align 1, !dbg !2354
  br label %sw.epilog182, !dbg !2355

sw.bb70:                                          ; preds = %if.end49
  store i32 1, i32* @indicator_style, align 4, !dbg !2356
  br label %sw.epilog182, !dbg !2357

sw.bb71:                                          ; preds = %if.end49
  store i8 1, i8* @qmark_funny_chars, align 1, !dbg !2358
  br label %sw.epilog182, !dbg !2359

sw.bb72:                                          ; preds = %if.end49
  store i8 1, i8* @sort_reverse, align 1, !dbg !2360
  br label %sw.epilog182, !dbg !2361

sw.bb73:                                          ; preds = %if.end49
  store i8 1, i8* @print_block_size, align 1, !dbg !2362
  br label %sw.epilog182, !dbg !2363

sw.bb74:                                          ; preds = %if.end49
  store i32 4, i32* @sort_type, align 4, !dbg !2364
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2365
  br label %sw.epilog182, !dbg !2366

sw.bb75:                                          ; preds = %if.end49
  store i32 2, i32* @time_type, align 4, !dbg !2367
  br label %sw.epilog182, !dbg !2368

sw.bb76:                                          ; preds = %if.end49
  store i32 3, i32* @sort_type, align 4, !dbg !2369
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2370
  br label %sw.epilog182, !dbg !2371

sw.bb77:                                          ; preds = %if.end49
  %21 = load i8*, i8** @optarg, align 8, !dbg !2372
  %call78 = call zeroext i1 @set_line_length(i8* %21), !dbg !2374
  br i1 %call78, label %if.end82, label %if.then79, !dbg !2375

if.then79:                                        ; preds = %sw.bb77
  %call80 = call i8* @gettext(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.69, i64 0, i64 0)) #13, !dbg !2376
  %22 = load i8*, i8** @optarg, align 8, !dbg !2376
  %call81 = call i8* @quote(i8* %22), !dbg !2376
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0), i8* %call80, i8* %call81), !dbg !2376
  unreachable, !dbg !2376

if.end82:                                         ; preds = %sw.bb77
  br label %sw.epilog182, !dbg !2377

sw.bb83:                                          ; preds = %if.end49
  store i32 3, i32* @format, align 4, !dbg !2378
  br label %sw.epilog182, !dbg !2379

sw.bb84:                                          ; preds = %if.end49
  store i32 1, i32* @ignore_mode, align 4, !dbg !2380
  br label %sw.epilog182, !dbg !2381

sw.bb85:                                          ; preds = %if.end49
  call void @add_ignore_pattern(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i64 0, i64 0)), !dbg !2382
  call void @add_ignore_pattern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.71, i64 0, i64 0)), !dbg !2383
  br label %sw.epilog182, !dbg !2384

sw.bb86:                                          ; preds = %if.end49
  store i32 2, i32* @format, align 4, !dbg !2385
  br label %sw.epilog182, !dbg !2386

sw.bb87:                                          ; preds = %if.end49
  store i8 1, i8* @dired, align 1, !dbg !2387
  br label %sw.epilog182, !dbg !2388

sw.bb88:                                          ; preds = %if.end49
  store i32 3, i32* @indicator_style, align 4, !dbg !2389
  br label %sw.epilog182, !dbg !2390

sw.bb89:                                          ; preds = %if.end49
  store i8 0, i8* @print_group, align 1, !dbg !2391
  br label %sw.epilog182, !dbg !2392

sw.bb90:                                          ; preds = %if.end49
  store i32 3, i32* @dereference, align 4, !dbg !2393
  br label %sw.epilog182, !dbg !2394

sw.bb91:                                          ; preds = %if.end49
  store i32 4, i32* @dereference, align 4, !dbg !2395
  br label %sw.epilog182, !dbg !2396

sw.bb92:                                          ; preds = %if.end49
  %23 = load i8*, i8** @optarg, align 8, !dbg !2397
  call void @add_ignore_pattern(i8* %23), !dbg !2398
  br label %sw.epilog182, !dbg !2399

sw.bb93:                                          ; preds = %if.end49
  store i32 5, i32* @dereference, align 4, !dbg !2400
  br label %sw.epilog182, !dbg !2401

sw.bb94:                                          ; preds = %if.end49
  call void @set_quoting_style(%struct.quoting_options* null, i32 0), !dbg !2402
  br label %sw.epilog182, !dbg !2403

sw.bb95:                                          ; preds = %if.end49
  call void @set_quoting_style(%struct.quoting_options* null, i32 5), !dbg !2404
  br label %sw.epilog182, !dbg !2405

sw.bb96:                                          ; preds = %if.end49
  store i8 1, i8* @recursive, align 1, !dbg !2406
  br label %sw.epilog182, !dbg !2407

sw.bb97:                                          ; preds = %if.end49
  store i32 2, i32* @sort_type, align 4, !dbg !2408
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2409
  br label %sw.epilog182, !dbg !2410

sw.bb98:                                          ; preds = %if.end49
  %24 = load i8*, i8** @optarg, align 8, !dbg !2411
  %call99 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.72, i64 0, i64 0)) #13, !dbg !2412
  %call100 = call i64 @xnumtoumax(i8* %24, i32 0, i64 0, i64 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %call99, i32 2), !dbg !2413
  store i64 %call100, i64* @tabsize, align 8, !dbg !2414
  br label %sw.epilog182, !dbg !2415

sw.bb101:                                         ; preds = %if.end49
  store i32 -1, i32* @sort_type, align 4, !dbg !2416
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2417
  br label %sw.epilog182, !dbg !2418

sw.bb102:                                         ; preds = %if.end49
  store i32 1, i32* @sort_type, align 4, !dbg !2419
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2420
  br label %sw.epilog182, !dbg !2421

sw.bb103:                                         ; preds = %if.end49
  %25 = load i32, i32* @format, align 4, !dbg !2422
  %cmp104 = icmp ne i32 %25, 0, !dbg !2424
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !2425

if.then106:                                       ; preds = %sw.bb103
  store i32 1, i32* @format, align 4, !dbg !2426
  br label %if.end107, !dbg !2427

if.end107:                                        ; preds = %if.then106, %sw.bb103
  br label %sw.epilog182, !dbg !2428

sw.bb108:                                         ; preds = %if.end49
  store i8 1, i8* @print_author, align 1, !dbg !2429
  br label %sw.epilog182, !dbg !2430

sw.bb109:                                         ; preds = %if.end49
  call void @llvm.dbg.declare(metadata %struct.ignore_pattern** %hide, metadata !2431, metadata !DIExpression()), !dbg !2433
  %call110 = call noalias i8* @xmalloc(i64 16), !dbg !2434
  %26 = bitcast i8* %call110 to %struct.ignore_pattern*, !dbg !2434
  store %struct.ignore_pattern* %26, %struct.ignore_pattern** %hide, align 8, !dbg !2433
  %27 = load i8*, i8** @optarg, align 8, !dbg !2435
  %28 = load %struct.ignore_pattern*, %struct.ignore_pattern** %hide, align 8, !dbg !2436
  %pattern = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %28, i32 0, i32 0, !dbg !2437, !ctir !618
  store i8* %27, i8** %pattern, align 8, !dbg !2438, !ctir !146
  %29 = load %struct.ignore_pattern*, %struct.ignore_pattern** @hide_patterns, align 8, !dbg !2439
  %30 = load %struct.ignore_pattern*, %struct.ignore_pattern** %hide, align 8, !dbg !2440
  %next = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %30, i32 0, i32 1, !dbg !2441, !ctir !618
  store %struct.ignore_pattern* %29, %struct.ignore_pattern** %next, align 8, !dbg !2442, !ctir !617
  %31 = load %struct.ignore_pattern*, %struct.ignore_pattern** %hide, align 8, !dbg !2443
  store %struct.ignore_pattern* %31, %struct.ignore_pattern** @hide_patterns, align 8, !dbg !2444
  br label %sw.epilog182, !dbg !2445

sw.bb111:                                         ; preds = %if.end49
  %32 = load i8*, i8** @optarg, align 8, !dbg !2446
  %33 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2446
  %call112 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i64 0, i64 0), i8* %32, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @sort_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @sort_types to i8*), i64 4, void ()* %33), !dbg !2446
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @sort_types, i64 0, i64 %call112, !dbg !2446, !ctir !653
  %34 = load i32, i32* %arrayidx, align 4, !dbg !2446
  store i32 %34, i32* @sort_type, align 4, !dbg !2447
  store i8 1, i8* %sort_type_specified, align 1, !dbg !2448
  br label %sw.epilog182, !dbg !2449

sw.bb113:                                         ; preds = %if.end49
  store i8 1, i8* @directories_first, align 1, !dbg !2450
  br label %sw.epilog182, !dbg !2451

sw.bb114:                                         ; preds = %if.end49
  %35 = load i8*, i8** @optarg, align 8, !dbg !2452
  %36 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2452
  %call115 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.74, i64 0, i64 0), i8* %35, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @time_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @time_types to i8*), i64 4, void ()* %36), !dbg !2452
  %arrayidx116 = getelementptr inbounds [5 x i32], [5 x i32]* @time_types, i64 0, i64 %call115, !dbg !2452, !ctir !658
  %37 = load i32, i32* %arrayidx116, align 4, !dbg !2452
  store i32 %37, i32* @time_type, align 4, !dbg !2453
  br label %sw.epilog182, !dbg !2454

sw.bb117:                                         ; preds = %if.end49
  %38 = load i8*, i8** @optarg, align 8, !dbg !2455
  %39 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2455
  %call118 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i64 0, i64 0), i8* %38, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @format_args, i64 0, i64 0), i8* bitcast ([7 x i32]* @format_types to i8*), i64 4, void ()* %39), !dbg !2455
  %arrayidx119 = getelementptr inbounds [7 x i32], [7 x i32]* @format_types, i64 0, i64 %call118, !dbg !2455, !ctir !660
  %40 = load i32, i32* %arrayidx119, align 4, !dbg !2455
  store i32 %40, i32* @format, align 4, !dbg !2456
  br label %sw.epilog182, !dbg !2457

sw.bb120:                                         ; preds = %if.end49
  store i32 0, i32* @format, align 4, !dbg !2458
  %call121 = call i8* @bad_cast(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i64 0, i64 0)), !dbg !2459
  store i8* %call121, i8** %time_style_option, align 8, !dbg !2460
  br label %sw.epilog182, !dbg !2461

sw.bb122:                                         ; preds = %if.end49
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2462, metadata !DIExpression()), !dbg !2464
  %41 = load i8*, i8** @optarg, align 8, !dbg !2465
  %tobool123 = icmp ne i8* %41, null, !dbg !2465
  br i1 %tobool123, label %if.then124, label %if.else127, !dbg !2467

if.then124:                                       ; preds = %sw.bb122
  %42 = load i8*, i8** @optarg, align 8, !dbg !2468
  %43 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2468
  %call125 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %42, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @when_args, i64 0, i64 0), i8* bitcast ([9 x i32]* @when_types to i8*), i64 4, void ()* %43), !dbg !2468
  %arrayidx126 = getelementptr inbounds [9 x i32], [9 x i32]* @when_types, i64 0, i64 %call125, !dbg !2468, !ctir !663
  %44 = load i32, i32* %arrayidx126, align 4, !dbg !2468
  store i32 %44, i32* %i, align 4, !dbg !2469
  br label %if.end128, !dbg !2470

if.else127:                                       ; preds = %sw.bb122
  store i32 1, i32* %i, align 4, !dbg !2471
  br label %if.end128

if.end128:                                        ; preds = %if.else127, %if.then124
  %45 = load i32, i32* %i, align 4, !dbg !2472
  %cmp129 = icmp eq i32 %45, 1, !dbg !2473
  br i1 %cmp129, label %lor.end, label %lor.rhs, !dbg !2474

lor.rhs:                                          ; preds = %if.end128
  %46 = load i32, i32* %i, align 4, !dbg !2475
  %cmp131 = icmp eq i32 %46, 2, !dbg !2476
  br i1 %cmp131, label %land.rhs, label %land.end, !dbg !2477

land.rhs:                                         ; preds = %lor.rhs
  %call133 = call i32 @isatty(i32 1) #13, !dbg !2478
  %tobool134 = icmp ne i32 %call133, 0, !dbg !2477
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %47 = phi i1 [ false, %lor.rhs ], [ %tobool134, %land.rhs ], !dbg !2479
  br label %lor.end, !dbg !2474

lor.end:                                          ; preds = %land.end, %if.end128
  %48 = phi i1 [ true, %if.end128 ], [ %47, %land.end ]
  %frombool = zext i1 %48 to i8, !dbg !2480
  store i8 %frombool, i8* @print_with_color, align 1, !dbg !2480
  %49 = load i8, i8* @print_with_color, align 1, !dbg !2481
  %tobool135 = trunc i8 %49 to i1, !dbg !2481
  br i1 %tobool135, label %if.then136, label %if.end137, !dbg !2483

if.then136:                                       ; preds = %lor.end
  store i64 0, i64* @tabsize, align 8, !dbg !2484
  br label %if.end137, !dbg !2486

if.end137:                                        ; preds = %if.then136, %lor.end
  br label %sw.epilog182, !dbg !2487

sw.bb138:                                         ; preds = %if.end49
  call void @llvm.dbg.declare(metadata i32* %i139, metadata !2488, metadata !DIExpression()), !dbg !2490
  %50 = load i8*, i8** @optarg, align 8, !dbg !2491
  %tobool140 = icmp ne i8* %50, null, !dbg !2491
  br i1 %tobool140, label %if.then141, label %if.else144, !dbg !2493

if.then141:                                       ; preds = %sw.bb138
  %51 = load i8*, i8** @optarg, align 8, !dbg !2494
  %52 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2494
  %call142 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i64 0, i64 0), i8* %51, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @when_args, i64 0, i64 0), i8* bitcast ([9 x i32]* @when_types to i8*), i64 4, void ()* %52), !dbg !2494
  %arrayidx143 = getelementptr inbounds [9 x i32], [9 x i32]* @when_types, i64 0, i64 %call142, !dbg !2494, !ctir !663
  %53 = load i32, i32* %arrayidx143, align 4, !dbg !2494
  store i32 %53, i32* %i139, align 4, !dbg !2495
  br label %if.end145, !dbg !2496

if.else144:                                       ; preds = %sw.bb138
  store i32 1, i32* %i139, align 4, !dbg !2497
  br label %if.end145

if.end145:                                        ; preds = %if.else144, %if.then141
  %54 = load i32, i32* %i139, align 4, !dbg !2498
  %cmp146 = icmp eq i32 %54, 1, !dbg !2499
  br i1 %cmp146, label %lor.end155, label %lor.rhs148, !dbg !2500

lor.rhs148:                                       ; preds = %if.end145
  %55 = load i32, i32* %i139, align 4, !dbg !2501
  %cmp149 = icmp eq i32 %55, 2, !dbg !2502
  br i1 %cmp149, label %land.rhs151, label %land.end154, !dbg !2503

land.rhs151:                                      ; preds = %lor.rhs148
  %call152 = call i32 @isatty(i32 1) #13, !dbg !2504
  %tobool153 = icmp ne i32 %call152, 0, !dbg !2503
  br label %land.end154

land.end154:                                      ; preds = %land.rhs151, %lor.rhs148
  %56 = phi i1 [ false, %lor.rhs148 ], [ %tobool153, %land.rhs151 ], !dbg !2505
  br label %lor.end155, !dbg !2500

lor.end155:                                       ; preds = %land.end154, %if.end145
  %57 = phi i1 [ true, %if.end145 ], [ %56, %land.end154 ]
  %frombool156 = zext i1 %57 to i8, !dbg !2506
  store i8 %frombool156, i8* @print_hyperlink, align 1, !dbg !2506
  br label %sw.epilog182, !dbg !2507

sw.bb157:                                         ; preds = %if.end49
  %58 = load i8*, i8** @optarg, align 8, !dbg !2508
  %59 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2508
  %call158 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.79, i64 0, i64 0), i8* %58, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @indicator_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @indicator_style_types to i8*), i64 4, void ()* %59), !dbg !2508
  %arrayidx159 = getelementptr inbounds [4 x i32], [4 x i32]* @indicator_style_types, i64 0, i64 %call158, !dbg !2508, !ctir !667
  %60 = load i32, i32* %arrayidx159, align 4, !dbg !2508
  store i32 %60, i32* @indicator_style, align 4, !dbg !2509
  br label %sw.epilog182, !dbg !2510

sw.bb160:                                         ; preds = %if.end49
  %61 = load i8*, i8** @optarg, align 8, !dbg !2511
  %62 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2511
  %call161 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.80, i64 0, i64 0), i8* %61, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4, void ()* %62), !dbg !2511
  %arrayidx162 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %call161, !dbg !2511, !ctir !673
  %63 = load i32, i32* %arrayidx162, align 4, !dbg !2511
  call void @set_quoting_style(%struct.quoting_options* null, i32 %63), !dbg !2512
  br label %sw.epilog182, !dbg !2513

sw.bb163:                                         ; preds = %if.end49
  %64 = load i8*, i8** @optarg, align 8, !dbg !2514
  store i8* %64, i8** %time_style_option, align 8, !dbg !2515
  br label %sw.epilog182, !dbg !2516

sw.bb164:                                         ; preds = %if.end49
  store i8 0, i8* @qmark_funny_chars, align 1, !dbg !2517
  br label %sw.epilog182, !dbg !2518

sw.bb165:                                         ; preds = %if.end49
  call void @llvm.dbg.declare(metadata i32* %e, metadata !2519, metadata !DIExpression()), !dbg !2521
  %65 = load i8*, i8** @optarg, align 8, !dbg !2522
  %call166 = call i32 @human_options(i8* %65, i32* @human_output_opts, i64* @output_block_size), !dbg !2523
  store i32 %call166, i32* %e, align 4, !dbg !2521
  %66 = load i32, i32* %e, align 4, !dbg !2524
  %cmp167 = icmp ne i32 %66, 0, !dbg !2526
  br i1 %cmp167, label %if.then169, label %if.end170, !dbg !2527

if.then169:                                       ; preds = %sw.bb165
  %67 = load i32, i32* %e, align 4, !dbg !2528
  %68 = load i32, i32* %oi, align 4, !dbg !2529
  %69 = load i8*, i8** @optarg, align 8, !dbg !2530
  call void @xstrtol_fatal(i32 %67, i32 %68, i8 signext 0, %struct.option* getelementptr inbounds ([44 x %struct.option], [44 x %struct.option]* @long_options, i64 0, i64 0), i8* %69) #14, !dbg !2531
  unreachable, !dbg !2531

if.end170:                                        ; preds = %sw.bb165
  %70 = load i32, i32* @human_output_opts, align 4, !dbg !2532
  store i32 %70, i32* @file_human_output_opts, align 4, !dbg !2533
  %71 = load i64, i64* @output_block_size, align 8, !dbg !2534
  store i64 %71, i64* @file_output_block_size, align 8, !dbg !2535
  br label %sw.epilog182, !dbg !2536

sw.bb171:                                         ; preds = %if.end49
  store i32 144, i32* @human_output_opts, align 4, !dbg !2537
  store i32 144, i32* @file_human_output_opts, align 4, !dbg !2538
  store i64 1, i64* @output_block_size, align 8, !dbg !2539
  store i64 1, i64* @file_output_block_size, align 8, !dbg !2540
  br label %sw.epilog182, !dbg !2541

sw.bb172:                                         ; preds = %if.end49
  store i8 1, i8* @print_scontext, align 1, !dbg !2542
  br label %sw.epilog182, !dbg !2543

sw.bb173:                                         ; preds = %if.end49
  call void @usage(i32 0) #14, !dbg !2544
  unreachable, !dbg !2544

sw.bb174:                                         ; preds = %if.end49
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2545
  %73 = load i32, i32* @ls_mode, align 4, !dbg !2545
  %cmp175 = icmp eq i32 %73, 1, !dbg !2545
  br i1 %cmp175, label %cond.true, label %cond.false, !dbg !2545

cond.true:                                        ; preds = %sw.bb174
  br label %cond.end, !dbg !2545

cond.false:                                       ; preds = %sw.bb174
  %74 = load i32, i32* @ls_mode, align 4, !dbg !2545
  %cmp177 = icmp eq i32 %74, 2, !dbg !2545
  %75 = zext i1 %cmp177 to i64, !dbg !2545
  %cond179 = select i1 %cmp177, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), !dbg !2545
  br label %cond.end, !dbg !2545

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond180 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), %cond.true ], [ %cond179, %cond.false ], !dbg !2545
  %76 = load i8*, i8** @Version, align 8, !dbg !2545
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %72, i8* %cond180, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i8* %76, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.83, i64 0, i64 0), i8* null), !dbg !2545
  call void @exit(i32 0) #15, !dbg !2545
  unreachable, !dbg !2545

sw.default181:                                    ; preds = %if.end49
  call void @usage(i32 2) #14, !dbg !2546
  unreachable, !dbg !2546

sw.epilog182:                                     ; preds = %sw.bb172, %sw.bb171, %if.end170, %sw.bb164, %sw.bb163, %sw.bb160, %sw.bb157, %lor.end155, %if.end137, %sw.bb120, %sw.bb117, %sw.bb114, %sw.bb113, %sw.bb111, %sw.bb109, %sw.bb108, %if.end107, %sw.bb102, %sw.bb101, %sw.bb98, %sw.bb97, %sw.bb96, %sw.bb95, %sw.bb94, %sw.bb93, %sw.bb92, %sw.bb91, %sw.bb90, %sw.bb89, %sw.bb88, %sw.bb87, %sw.bb86, %sw.bb85, %sw.bb84, %sw.bb83, %if.end82, %sw.bb76, %sw.bb75, %sw.bb74, %sw.bb73, %sw.bb72, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb68, %sw.bb67, %sw.bb66, %sw.bb65, %sw.bb64, %sw.bb63, %sw.bb62, %sw.bb61, %if.end60, %sw.bb53, %sw.bb52, %sw.bb51, %sw.bb50
  br label %while.body, !dbg !2293, !llvm.loop !2547

while.end:                                        ; preds = %if.then48
  %77 = load i64, i64* @output_block_size, align 8, !dbg !2549
  %tobool183 = icmp ne i64 %77, 0, !dbg !2549
  br i1 %tobool183, label %if.end195, label %if.then184, !dbg !2551

if.then184:                                       ; preds = %while.end
  call void @llvm.dbg.declare(metadata i8** %ls_block_size, metadata !2552, metadata !DIExpression()), !dbg !2554
  %call185 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i64 0, i64 0)) #13, !dbg !2555
  store i8* %call185, i8** %ls_block_size, align 8, !dbg !2554
  %78 = load i8*, i8** %ls_block_size, align 8, !dbg !2556
  %call186 = call i32 @human_options(i8* %78, i32* @human_output_opts, i64* @output_block_size), !dbg !2557
  %79 = load i8*, i8** %ls_block_size, align 8, !dbg !2558
  %tobool187 = icmp ne i8* %79, null, !dbg !2558
  br i1 %tobool187, label %if.then190, label %lor.lhs.false, !dbg !2560

lor.lhs.false:                                    ; preds = %if.then184
  %call188 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i64 0, i64 0)) #13, !dbg !2561
  %tobool189 = icmp ne i8* %call188, null, !dbg !2561
  br i1 %tobool189, label %if.then190, label %if.end191, !dbg !2562

if.then190:                                       ; preds = %lor.lhs.false, %if.then184
  %80 = load i32, i32* @human_output_opts, align 4, !dbg !2563
  store i32 %80, i32* @file_human_output_opts, align 4, !dbg !2565
  %81 = load i64, i64* @output_block_size, align 8, !dbg !2566
  store i64 %81, i64* @file_output_block_size, align 8, !dbg !2567
  br label %if.end191, !dbg !2568

if.end191:                                        ; preds = %if.then190, %lor.lhs.false
  %82 = load i8, i8* %kibibytes_specified, align 1, !dbg !2569
  %tobool192 = trunc i8 %82 to i1, !dbg !2569
  br i1 %tobool192, label %if.then193, label %if.end194, !dbg !2571

if.then193:                                       ; preds = %if.end191
  store i32 0, i32* @human_output_opts, align 4, !dbg !2572
  store i64 1024, i64* @output_block_size, align 8, !dbg !2574
  br label %if.end194, !dbg !2575

if.end194:                                        ; preds = %if.then193, %if.end191
  br label %if.end195, !dbg !2576

if.end195:                                        ; preds = %if.end194, %while.end
  %83 = load i64, i64* @line_length, align 8, !dbg !2577
  %div = udiv i64 %83, 3, !dbg !2578
  store i64 %div, i64* @max_idx, align 8, !dbg !2579
  %84 = load i64, i64* @line_length, align 8, !dbg !2580
  %rem = urem i64 %84, 3, !dbg !2581
  %cmp196 = icmp ne i64 %rem, 0, !dbg !2582
  %conv197 = zext i1 %cmp196 to i32, !dbg !2582
  %conv198 = sext i32 %conv197 to i64, !dbg !2580
  %85 = load i64, i64* @max_idx, align 8, !dbg !2583
  %add = add i64 %85, %conv198, !dbg !2583
  store i64 %add, i64* @max_idx, align 8, !dbg !2583
  call void @llvm.dbg.declare(metadata i32* %qs, metadata !2584, metadata !DIExpression()), !dbg !2585
  %call199 = call i32 @get_quoting_style(%struct.quoting_options* null), !dbg !2586
  store i32 %call199, i32* %qs, align 4, !dbg !2585
  %86 = load i32, i32* @format, align 4, !dbg !2587
  %cmp200 = icmp ne i32 %86, 4, !dbg !2588
  br i1 %cmp200, label %land.lhs.true202, label %land.end220, !dbg !2589

land.lhs.true202:                                 ; preds = %if.end195
  %87 = load i32, i32* @format, align 4, !dbg !2590
  %cmp203 = icmp ne i32 %87, 1, !dbg !2591
  br i1 %cmp203, label %land.lhs.true205, label %land.end220, !dbg !2592

land.lhs.true205:                                 ; preds = %land.lhs.true202
  %88 = load i64, i64* @line_length, align 8, !dbg !2593
  %tobool206 = icmp ne i64 %88, 0, !dbg !2593
  br i1 %tobool206, label %land.rhs210, label %lor.lhs.false207, !dbg !2594

lor.lhs.false207:                                 ; preds = %land.lhs.true205
  %89 = load i32, i32* @format, align 4, !dbg !2595
  %cmp208 = icmp eq i32 %89, 0, !dbg !2596
  br i1 %cmp208, label %land.rhs210, label %land.end220, !dbg !2597

land.rhs210:                                      ; preds = %lor.lhs.false207, %land.lhs.true205
  %90 = load i32, i32* %qs, align 4, !dbg !2598
  %cmp211 = icmp eq i32 %90, 1, !dbg !2599
  br i1 %cmp211, label %lor.end219, label %lor.lhs.false213, !dbg !2600

lor.lhs.false213:                                 ; preds = %land.rhs210
  %91 = load i32, i32* %qs, align 4, !dbg !2601
  %cmp214 = icmp eq i32 %91, 3, !dbg !2602
  br i1 %cmp214, label %lor.end219, label %lor.rhs216, !dbg !2603

lor.rhs216:                                       ; preds = %lor.lhs.false213
  %92 = load i32, i32* %qs, align 4, !dbg !2604
  %cmp217 = icmp eq i32 %92, 6, !dbg !2605
  br label %lor.end219, !dbg !2603

lor.end219:                                       ; preds = %lor.rhs216, %lor.lhs.false213, %land.rhs210
  %93 = phi i1 [ true, %lor.lhs.false213 ], [ true, %land.rhs210 ], [ %cmp217, %lor.rhs216 ]
  br label %land.end220

land.end220:                                      ; preds = %lor.end219, %lor.lhs.false207, %land.lhs.true202, %if.end195
  %94 = phi i1 [ false, %lor.lhs.false207 ], [ false, %land.lhs.true202 ], [ false, %if.end195 ], [ %93, %lor.end219 ], !dbg !2606
  %frombool221 = zext i1 %94 to i8, !dbg !2607
  store i8 %frombool221, i8* @align_variable_outer_quotes, align 1, !dbg !2607
  %call222 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null), !dbg !2608
  store %struct.quoting_options* %call222, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !2609
  %95 = load i32, i32* %qs, align 4, !dbg !2610
  %cmp223 = icmp eq i32 %95, 7, !dbg !2612
  br i1 %cmp223, label %if.then225, label %if.end227, !dbg !2613

if.then225:                                       ; preds = %land.end220
  %96 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !2614
  %call226 = call i32 @set_char_quoting(%struct.quoting_options* %96, i8 signext 32, i32 1), !dbg !2615
  br label %if.end227, !dbg !2615

if.end227:                                        ; preds = %if.then225, %land.end220
  %97 = load i32, i32* @indicator_style, align 4, !dbg !2616
  %cmp228 = icmp ule i32 2, %97, !dbg !2618
  br i1 %cmp228, label %if.then230, label %if.end235, !dbg !2619

if.then230:                                       ; preds = %if.end227
  call void @llvm.dbg.declare(metadata i8** %p231, metadata !2620, metadata !DIExpression()), !dbg !2622
  %98 = load i32, i32* @indicator_style, align 4, !dbg !2623
  %sub = sub i32 %98, 2, !dbg !2625
  %idxprom = zext i32 %sub to i64, !dbg !2626
  %arrayidx232 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.86, i64 0, i64 %idxprom, !dbg !2626, !ctir !272
  store i8* %arrayidx232, i8** %p231, align 8, !dbg !2627
  br label %for.cond, !dbg !2628

for.cond:                                         ; preds = %for.inc, %if.then230
  %99 = load i8*, i8** %p231, align 8, !dbg !2629
  %100 = load i8, i8* %99, align 1, !dbg !2631, !ctir !147
  %tobool233 = icmp ne i8 %100, 0, !dbg !2632
  br i1 %tobool233, label %for.body, label %for.end, !dbg !2632

for.body:                                         ; preds = %for.cond
  %101 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !2633
  %102 = load i8*, i8** %p231, align 8, !dbg !2634
  %103 = load i8, i8* %102, align 1, !dbg !2635, !ctir !147
  %call234 = call i32 @set_char_quoting(%struct.quoting_options* %101, i8 signext %103, i32 1), !dbg !2636
  br label %for.inc, !dbg !2636

for.inc:                                          ; preds = %for.body
  %104 = load i8*, i8** %p231, align 8, !dbg !2637
  %incdec.ptr = getelementptr inbounds i8, i8* %104, i32 1, !dbg !2637, !ctir !147
  store i8* %incdec.ptr, i8** %p231, align 8, !dbg !2637
  br label %for.cond, !dbg !2638, !llvm.loop !2639

for.end:                                          ; preds = %for.cond
  br label %if.end235, !dbg !2641

if.end235:                                        ; preds = %for.end, %if.end227
  %call236 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null), !dbg !2642
  store %struct.quoting_options* %call236, %struct.quoting_options** @dirname_quoting_options, align 8, !dbg !2643
  %105 = load %struct.quoting_options*, %struct.quoting_options** @dirname_quoting_options, align 8, !dbg !2644
  %call237 = call i32 @set_char_quoting(%struct.quoting_options* %105, i8 signext 58, i32 1), !dbg !2645
  %106 = load i8, i8* @dired, align 1, !dbg !2646
  %tobool238 = trunc i8 %106 to i1, !dbg !2646
  br i1 %tobool238, label %land.lhs.true240, label %if.end247, !dbg !2648

land.lhs.true240:                                 ; preds = %if.end235
  %107 = load i32, i32* @format, align 4, !dbg !2649
  %cmp241 = icmp ne i32 %107, 0, !dbg !2650
  br i1 %cmp241, label %if.then246, label %lor.lhs.false243, !dbg !2651

lor.lhs.false243:                                 ; preds = %land.lhs.true240
  %108 = load i8, i8* @print_hyperlink, align 1, !dbg !2652
  %tobool244 = trunc i8 %108 to i1, !dbg !2652
  br i1 %tobool244, label %if.then246, label %if.end247, !dbg !2653

if.then246:                                       ; preds = %lor.lhs.false243, %land.lhs.true240
  store i8 0, i8* @dired, align 1, !dbg !2654
  br label %if.end247, !dbg !2655

if.end247:                                        ; preds = %if.then246, %lor.lhs.false243, %if.end235
  %109 = load i32, i32* @time_type, align 4, !dbg !2656
  %cmp248 = icmp eq i32 %109, 1, !dbg !2658
  br i1 %cmp248, label %land.lhs.true253, label %lor.lhs.false250, !dbg !2659

lor.lhs.false250:                                 ; preds = %if.end247
  %110 = load i32, i32* @time_type, align 4, !dbg !2660
  %cmp251 = icmp eq i32 %110, 2, !dbg !2661
  br i1 %cmp251, label %land.lhs.true253, label %if.end259, !dbg !2662

land.lhs.true253:                                 ; preds = %lor.lhs.false250, %if.end247
  %111 = load i8, i8* %sort_type_specified, align 1, !dbg !2663
  %tobool254 = trunc i8 %111 to i1, !dbg !2663
  br i1 %tobool254, label %if.end259, label %land.lhs.true255, !dbg !2664

land.lhs.true255:                                 ; preds = %land.lhs.true253
  %112 = load i32, i32* @format, align 4, !dbg !2665
  %cmp256 = icmp ne i32 %112, 0, !dbg !2666
  br i1 %cmp256, label %if.then258, label %if.end259, !dbg !2667

if.then258:                                       ; preds = %land.lhs.true255
  store i32 4, i32* @sort_type, align 4, !dbg !2668
  br label %if.end259, !dbg !2670

if.end259:                                        ; preds = %if.then258, %land.lhs.true255, %land.lhs.true253, %lor.lhs.false250
  %113 = load i32, i32* @format, align 4, !dbg !2671
  %cmp260 = icmp eq i32 %113, 0, !dbg !2673
  br i1 %cmp260, label %if.then262, label %if.end335, !dbg !2674

if.then262:                                       ; preds = %if.end259
  call void @llvm.dbg.declare(metadata i8** %style, metadata !2675, metadata !DIExpression()), !dbg !2677
  %114 = load i8*, i8** %time_style_option, align 8, !dbg !2678
  store i8* %114, i8** %style, align 8, !dbg !2677
  %115 = load i8*, i8** %style, align 8, !dbg !2679
  %tobool263 = icmp ne i8* %115, null, !dbg !2679
  br i1 %tobool263, label %if.end270, label %if.then264, !dbg !2681

if.then264:                                       ; preds = %if.then262
  %call265 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87, i64 0, i64 0)) #13, !dbg !2682
  store i8* %call265, i8** %style, align 8, !dbg !2684
  %tobool266 = icmp ne i8* %call265, null, !dbg !2684
  br i1 %tobool266, label %if.end269, label %if.then267, !dbg !2685

if.then267:                                       ; preds = %if.then264
  %call268 = call i8* @bad_cast(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0)), !dbg !2686
  store i8* %call268, i8** %style, align 8, !dbg !2687
  br label %if.end269, !dbg !2688

if.end269:                                        ; preds = %if.then267, %if.then264
  br label %if.end270, !dbg !2689

if.end270:                                        ; preds = %if.end269, %if.then262
  br label %while.cond, !dbg !2690

while.cond:                                       ; preds = %if.end277, %if.end270
  %116 = load i8*, i8** %style, align 8, !dbg !2691
  %call271 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @decode_switches.posix_prefix, i64 0, i64 0), i64 6) #16, !dbg !2691
  %cmp272 = icmp eq i32 %call271, 0, !dbg !2691
  br i1 %cmp272, label %while.body274, label %while.end278, !dbg !2690

while.body274:                                    ; preds = %while.cond
  %call275 = call zeroext i1 @hard_locale(i32 2), !dbg !2692
  br i1 %call275, label %if.end277, label %if.then276, !dbg !2695

if.then276:                                       ; preds = %while.body274
  %117 = load i32, i32* @optind, align 4, !dbg !2696
  store i32 %117, i32* %retval, align 4, !dbg !2697
  br label %return, !dbg !2697

if.end277:                                        ; preds = %while.body274
  %118 = load i8*, i8** %style, align 8, !dbg !2698
  %add.ptr = getelementptr inbounds i8, i8* %118, i64 6, !dbg !2698, !ctir !144
  store i8* %add.ptr, i8** %style, align 8, !dbg !2698
  br label %while.cond, !dbg !2690, !llvm.loop !2699

while.end278:                                     ; preds = %while.cond
  %119 = load i8*, i8** %style, align 8, !dbg !2701
  %120 = load i8, i8* %119, align 1, !dbg !2703, !ctir !144
  %conv279 = sext i8 %120 to i32, !dbg !2703
  %cmp280 = icmp eq i32 %conv279, 43, !dbg !2704
  br i1 %cmp280, label %if.then282, label %if.else297, !dbg !2705

if.then282:                                       ; preds = %while.end278
  call void @llvm.dbg.declare(metadata i8** %p0, metadata !2706, metadata !DIExpression()), !dbg !2708
  %121 = load i8*, i8** %style, align 8, !dbg !2709
  %add.ptr283 = getelementptr inbounds i8, i8* %121, i64 1, !dbg !2710, !ctir !144
  store i8* %add.ptr283, i8** %p0, align 8, !dbg !2708
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !2711, metadata !DIExpression()), !dbg !2712
  %122 = load i8*, i8** %p0, align 8, !dbg !2713
  %call284 = call i8* @strchr(i8* %122, i32 10) #16, !dbg !2714
  store i8* %call284, i8** %p1, align 8, !dbg !2712
  %123 = load i8*, i8** %p1, align 8, !dbg !2715
  %tobool285 = icmp ne i8* %123, null, !dbg !2715
  br i1 %tobool285, label %if.else287, label %if.then286, !dbg !2717

if.then286:                                       ; preds = %if.then282
  %124 = load i8*, i8** %p0, align 8, !dbg !2718
  store i8* %124, i8** %p1, align 8, !dbg !2719
  br label %if.end296, !dbg !2720

if.else287:                                       ; preds = %if.then282
  %125 = load i8*, i8** %p1, align 8, !dbg !2721
  %add.ptr288 = getelementptr inbounds i8, i8* %125, i64 1, !dbg !2724, !ctir !144
  %call289 = call i8* @strchr(i8* %add.ptr288, i32 10) #16, !dbg !2725
  %tobool290 = icmp ne i8* %call289, null, !dbg !2725
  br i1 %tobool290, label %if.then291, label %if.end294, !dbg !2726

if.then291:                                       ; preds = %if.else287
  %call292 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.89, i64 0, i64 0)) #13, !dbg !2727
  %126 = load i8*, i8** %p0, align 8, !dbg !2727
  %call293 = call i8* @quote(i8* %126), !dbg !2727
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call292, i8* %call293), !dbg !2727
  unreachable, !dbg !2727

if.end294:                                        ; preds = %if.else287
  %127 = load i8*, i8** %p1, align 8, !dbg !2728
  %incdec.ptr295 = getelementptr inbounds i8, i8* %127, i32 1, !dbg !2728, !ctir !144
  store i8* %incdec.ptr295, i8** %p1, align 8, !dbg !2728
  store i8 0, i8* %127, align 1, !dbg !2729, !ctir !144
  br label %if.end296

if.end296:                                        ; preds = %if.end294, %if.then286
  %128 = load i8*, i8** %p0, align 8, !dbg !2730
  store i8* %128, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16, !dbg !2731
  %129 = load i8*, i8** %p1, align 8, !dbg !2732
  store i8* %129, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8, !dbg !2733
  br label %if.end334, !dbg !2734

if.else297:                                       ; preds = %while.end278
  call void @llvm.dbg.declare(metadata i64* %res, metadata !2735, metadata !DIExpression()), !dbg !2737
  %130 = load i8*, i8** %style, align 8, !dbg !2738
  %call298 = call i64 @argmatch(i8* %130, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @time_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @time_style_types to i8*), i64 4) #16, !dbg !2739
  store i64 %call298, i64* %res, align 8, !dbg !2737
  %131 = load i64, i64* %res, align 8, !dbg !2740
  %cmp299 = icmp slt i64 %131, 0, !dbg !2742
  br i1 %cmp299, label %if.then301, label %if.end313, !dbg !2743

if.then301:                                       ; preds = %if.else297
  %132 = load i8*, i8** %style, align 8, !dbg !2744
  %133 = load i64, i64* %res, align 8, !dbg !2746
  call void @argmatch_invalid(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i64 0, i64 0), i8* %132, i64 %133), !dbg !2747
  %call302 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91, i64 0, i64 0)) #13, !dbg !2748
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2748
  %call303 = call i32 @fputs_unlocked(i8* %call302, %struct._IO_FILE* %134), !dbg !2748
  call void @llvm.dbg.declare(metadata i8*** %p304, metadata !2749, metadata !DIExpression()), !dbg !2750
  store i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @time_style_args, i64 0, i64 0), i8*** %p304, align 8, !dbg !2750
  br label %while.cond305, !dbg !2751

while.cond305:                                    ; preds = %while.body307, %if.then301
  %135 = load i8**, i8*** %p304, align 8, !dbg !2752
  %136 = load i8*, i8** %135, align 8, !dbg !2753, !ctir !346
  %tobool306 = icmp ne i8* %136, null, !dbg !2751
  br i1 %tobool306, label %while.body307, label %while.end310, !dbg !2751

while.body307:                                    ; preds = %while.cond305
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2754
  %138 = load i8**, i8*** %p304, align 8, !dbg !2755
  %incdec.ptr308 = getelementptr inbounds i8*, i8** %138, i32 1, !dbg !2755, !ctir !346
  store i8** %incdec.ptr308, i8*** %p304, align 8, !dbg !2755
  %139 = load i8*, i8** %138, align 8, !dbg !2756, !ctir !346
  %call309 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.92, i64 0, i64 0), i8* %139), !dbg !2757
  br label %while.cond305, !dbg !2751, !llvm.loop !2758

while.end310:                                     ; preds = %while.cond305
  %call311 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.93, i64 0, i64 0)) #13, !dbg !2760
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2760
  %call312 = call i32 @fputs_unlocked(i8* %call311, %struct._IO_FILE* %140), !dbg !2760
  call void @usage(i32 2) #14, !dbg !2761
  unreachable, !dbg !2761

if.end313:                                        ; preds = %if.else297
  %141 = load i64, i64* %res, align 8, !dbg !2762
  switch i64 %141, label %sw.epilog333 [
    i64 0, label %sw.bb314
    i64 1, label %sw.bb315
    i64 2, label %sw.bb316
    i64 3, label %sw.bb317
  ], !dbg !2763

sw.bb314:                                         ; preds = %if.end313
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8, !dbg !2764
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16, !dbg !2766
  br label %sw.epilog333, !dbg !2767

sw.bb315:                                         ; preds = %if.end313
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8, !dbg !2768
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16, !dbg !2769
  br label %sw.epilog333, !dbg !2770

sw.bb316:                                         ; preds = %if.end313
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16, !dbg !2771
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.97, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8, !dbg !2772
  br label %sw.epilog333, !dbg !2773

sw.bb317:                                         ; preds = %if.end313
  %call318 = call zeroext i1 @hard_locale(i32 2), !dbg !2774
  br i1 %call318, label %if.then319, label %if.end332, !dbg !2776

if.then319:                                       ; preds = %sw.bb317
  call void @llvm.dbg.declare(metadata i32* %i320, metadata !2777, metadata !DIExpression()), !dbg !2780
  store i32 0, i32* %i320, align 4, !dbg !2780
  br label %for.cond321, !dbg !2781

for.cond321:                                      ; preds = %for.inc330, %if.then319
  %142 = load i32, i32* %i320, align 4, !dbg !2782
  %cmp322 = icmp slt i32 %142, 2, !dbg !2784
  br i1 %cmp322, label %for.body324, label %for.end331, !dbg !2785

for.body324:                                      ; preds = %for.cond321
  %143 = load i32, i32* %i320, align 4, !dbg !2786
  %idxprom325 = sext i32 %143 to i64, !dbg !2787
  %arrayidx326 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %idxprom325, !dbg !2787, !ctir !686
  %144 = load i8*, i8** %arrayidx326, align 8, !dbg !2787
  %call327 = call i8* @dcgettext(i8* null, i8* %144, i32 2) #13, !dbg !2788
  %145 = load i32, i32* %i320, align 4, !dbg !2789
  %idxprom328 = sext i32 %145 to i64, !dbg !2790
  %arrayidx329 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %idxprom328, !dbg !2790, !ctir !686
  store i8* %call327, i8** %arrayidx329, align 8, !dbg !2791
  br label %for.inc330, !dbg !2790

for.inc330:                                       ; preds = %for.body324
  %146 = load i32, i32* %i320, align 4, !dbg !2792
  %inc = add nsw i32 %146, 1, !dbg !2792
  store i32 %inc, i32* %i320, align 4, !dbg !2792
  br label %for.cond321, !dbg !2793, !llvm.loop !2794

for.end331:                                       ; preds = %for.cond321
  br label %if.end332, !dbg !2796

if.end332:                                        ; preds = %for.end331, %sw.bb317
  br label %sw.epilog333, !dbg !2797

sw.epilog333:                                     ; preds = %if.end332, %if.end313, %sw.bb316, %sw.bb315, %sw.bb314
  br label %if.end334

if.end334:                                        ; preds = %sw.epilog333, %if.end296
  call void @abformat_init(), !dbg !2798
  br label %if.end335, !dbg !2799

if.end335:                                        ; preds = %if.end334, %if.end259
  %147 = load i32, i32* @optind, align 4, !dbg !2800
  store i32 %147, i32* %retval, align 4, !dbg !2801
  br label %return, !dbg !2801

return:                                           ; preds = %if.end335, %if.then276
  %148 = load i32, i32* %retval, align 4, !dbg !2802
  ret i32 %148, !dbg !2802
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @parse_ls_color() #0 !dbg !2803 {
entry:
  %p = alloca i8*, align 8, !ctir !146
  %buf = alloca i8*, align 8, !ctir !143
  %ind_no = alloca i32, align 4, !ctir !27
  %label = alloca [3 x i8], align 1, !ctir !255
  %ext = alloca %struct.color_ext_type*, align 8, !ctir !710
  %colorterm = alloca i8*, align 8, !ctir !146
  %state = alloca i32, align 4, !ctir !129
  %e = alloca %struct.color_ext_type*, align 8, !ctir !710
  %e2 = alloca %struct.color_ext_type*, align 8, !ctir !710
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2804, metadata !DIExpression()), !dbg !2805
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !2806, metadata !DIExpression()), !dbg !2807
  call void @llvm.dbg.declare(metadata i32* %ind_no, metadata !2808, metadata !DIExpression()), !dbg !2809
  call void @llvm.dbg.declare(metadata [3 x i8]* %label, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata %struct.color_ext_type** %ext, metadata !2812, metadata !DIExpression()), !dbg !2813
  %call = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.172, i64 0, i64 0)) #13, !dbg !2814
  store i8* %call, i8** %p, align 8, !dbg !2816
  %cmp = icmp eq i8* %call, null, !dbg !2817
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2818

lor.lhs.false:                                    ; preds = %entry
  %0 = load i8*, i8** %p, align 8, !dbg !2819
  %1 = load i8, i8* %0, align 1, !dbg !2820, !ctir !147
  %conv = sext i8 %1 to i32, !dbg !2820
  %cmp1 = icmp eq i32 %conv, 0, !dbg !2821
  br i1 %cmp1, label %if.then, label %if.end9, !dbg !2822

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i8** %colorterm, metadata !2823, metadata !DIExpression()), !dbg !2825
  %call3 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.173, i64 0, i64 0)) #13, !dbg !2826
  store i8* %call3, i8** %colorterm, align 8, !dbg !2825
  %2 = load i8*, i8** %colorterm, align 8, !dbg !2827
  %tobool = icmp ne i8* %2, null, !dbg !2827
  br i1 %tobool, label %land.lhs.true, label %land.lhs.true6, !dbg !2829

land.lhs.true:                                    ; preds = %if.then
  %3 = load i8*, i8** %colorterm, align 8, !dbg !2830
  %4 = load i8, i8* %3, align 1, !dbg !2831, !ctir !147
  %conv4 = sext i8 %4 to i32, !dbg !2831
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !2831
  br i1 %tobool5, label %if.end, label %land.lhs.true6, !dbg !2832

land.lhs.true6:                                   ; preds = %land.lhs.true, %if.then
  %call7 = call zeroext i1 @known_term_type(), !dbg !2833
  br i1 %call7, label %if.end, label %if.then8, !dbg !2834

if.then8:                                         ; preds = %land.lhs.true6
  store i8 0, i8* @print_with_color, align 1, !dbg !2835
  br label %if.end, !dbg !2836

if.end:                                           ; preds = %if.then8, %land.lhs.true6, %land.lhs.true
  br label %if.end97, !dbg !2837

if.end9:                                          ; preds = %lor.lhs.false
  store %struct.color_ext_type* null, %struct.color_ext_type** %ext, align 8, !dbg !2838
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %label, i64 0, i64 0, !dbg !2839, !ctir !255
  %call10 = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i64 0, i64 0)) #13, !dbg !2840
  %5 = load i8*, i8** %p, align 8, !dbg !2841
  %call11 = call noalias i8* @xstrdup(i8* %5), !dbg !2842
  store i8* %call11, i8** @color_buf, align 8, !dbg !2843
  store i8* %call11, i8** %buf, align 8, !dbg !2844
  call void @llvm.dbg.declare(metadata i32* %state, metadata !2845, metadata !DIExpression()), !dbg !2846
  store i32 1, i32* %state, align 4, !dbg !2846
  br label %while.body, !dbg !2847

while.body:                                       ; preds = %if.end9, %sw.epilog79
  %6 = load i32, i32* %state, align 4, !dbg !2848
  switch i32 %6, label %sw.default78 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb23
    i32 3, label %sw.bb29
    i32 4, label %sw.bb63
    i32 6, label %sw.bb77
  ], !dbg !2850

sw.bb:                                            ; preds = %while.body
  %7 = load i8*, i8** %p, align 8, !dbg !2851
  %8 = load i8, i8* %7, align 1, !dbg !2853, !ctir !147
  %conv12 = sext i8 %8 to i32, !dbg !2853
  switch i32 %conv12, label %sw.default [
    i32 58, label %sw.bb13
    i32 42, label %sw.bb14
    i32 0, label %sw.bb21
  ], !dbg !2854

sw.bb13:                                          ; preds = %sw.bb
  %9 = load i8*, i8** %p, align 8, !dbg !2855
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !2855, !ctir !147
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !2855
  br label %sw.epilog, !dbg !2857

sw.bb14:                                          ; preds = %sw.bb
  %call15 = call noalias i8* @xmalloc(i64 40), !dbg !2858
  %10 = bitcast i8* %call15 to %struct.color_ext_type*, !dbg !2858
  store %struct.color_ext_type* %10, %struct.color_ext_type** %ext, align 8, !dbg !2859
  %11 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8, !dbg !2860
  %12 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2861
  %next = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %12, i32 0, i32 2, !dbg !2862, !ctir !711
  store %struct.color_ext_type* %11, %struct.color_ext_type** %next, align 8, !dbg !2863, !ctir !710
  %13 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2864
  store %struct.color_ext_type* %13, %struct.color_ext_type** @color_ext_list, align 8, !dbg !2865
  %14 = load i8*, i8** %p, align 8, !dbg !2866
  %incdec.ptr16 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !2866, !ctir !147
  store i8* %incdec.ptr16, i8** %p, align 8, !dbg !2866
  %15 = load i8*, i8** %buf, align 8, !dbg !2867
  %16 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2868
  %ext17 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %16, i32 0, i32 0, !dbg !2869, !ctir !711
  %string = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext17, i32 0, i32 1, !dbg !2870, !ctir !282
  store i8* %15, i8** %string, align 8, !dbg !2871, !ctir !146
  %17 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2872
  %ext18 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %17, i32 0, i32 0, !dbg !2873, !ctir !711
  %len = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext18, i32 0, i32 0, !dbg !2874, !ctir !282
  %call19 = call zeroext i1 @get_funky_string(i8** %buf, i8** %p, i1 zeroext true, i64* %len), !dbg !2875
  %18 = zext i1 %call19 to i64, !dbg !2875
  %cond = select i1 %call19, i32 4, i32 6, !dbg !2875
  store i32 %cond, i32* %state, align 4, !dbg !2876
  br label %sw.epilog, !dbg !2877

sw.bb21:                                          ; preds = %sw.bb
  store i32 5, i32* %state, align 4, !dbg !2878
  br label %done, !dbg !2879

sw.default:                                       ; preds = %sw.bb
  %19 = load i8*, i8** %p, align 8, !dbg !2880
  %incdec.ptr22 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !2880, !ctir !147
  store i8* %incdec.ptr22, i8** %p, align 8, !dbg !2880
  %20 = load i8, i8* %19, align 1, !dbg !2881, !ctir !147
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %label, i64 0, i64 0, !dbg !2882, !ctir !255
  store i8 %20, i8* %arrayidx, align 1, !dbg !2883
  store i32 2, i32* %state, align 4, !dbg !2884
  br label %sw.epilog, !dbg !2885

sw.epilog:                                        ; preds = %sw.default, %sw.bb14, %sw.bb13
  br label %sw.epilog79, !dbg !2886

sw.bb23:                                          ; preds = %while.body
  %21 = load i8*, i8** %p, align 8, !dbg !2887
  %22 = load i8, i8* %21, align 1, !dbg !2889, !ctir !147
  %tobool24 = icmp ne i8 %22, 0, !dbg !2889
  br i1 %tobool24, label %if.then25, label %if.else, !dbg !2890

if.then25:                                        ; preds = %sw.bb23
  %23 = load i8*, i8** %p, align 8, !dbg !2891
  %incdec.ptr26 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !2891, !ctir !147
  store i8* %incdec.ptr26, i8** %p, align 8, !dbg !2891
  %24 = load i8, i8* %23, align 1, !dbg !2893, !ctir !147
  %arrayidx27 = getelementptr inbounds [3 x i8], [3 x i8]* %label, i64 0, i64 1, !dbg !2894, !ctir !255
  store i8 %24, i8* %arrayidx27, align 1, !dbg !2895
  store i32 3, i32* %state, align 4, !dbg !2896
  br label %if.end28, !dbg !2897

if.else:                                          ; preds = %sw.bb23
  store i32 6, i32* %state, align 4, !dbg !2898
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then25
  br label %sw.epilog79, !dbg !2899

sw.bb29:                                          ; preds = %while.body
  store i32 6, i32* %state, align 4, !dbg !2900
  %25 = load i8*, i8** %p, align 8, !dbg !2901
  %incdec.ptr30 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !2901, !ctir !147
  store i8* %incdec.ptr30, i8** %p, align 8, !dbg !2901
  %26 = load i8, i8* %25, align 1, !dbg !2903, !ctir !147
  %conv31 = sext i8 %26 to i32, !dbg !2903
  %cmp32 = icmp eq i32 %conv31, 61, !dbg !2904
  br i1 %cmp32, label %if.then34, label %if.end62, !dbg !2905

if.then34:                                        ; preds = %sw.bb29
  store i32 0, i32* %ind_no, align 4, !dbg !2906
  br label %for.cond, !dbg !2909

for.cond:                                         ; preds = %for.inc, %if.then34
  %27 = load i32, i32* %ind_no, align 4, !dbg !2910
  %idxprom = sext i32 %27 to i64, !dbg !2912
  %arrayidx35 = getelementptr inbounds [25 x i8*], [25 x i8*]* @indicator_name, i64 0, i64 %idxprom, !dbg !2912, !ctir !716
  %28 = load i8*, i8** %arrayidx35, align 8, !dbg !2912
  %cmp36 = icmp ne i8* %28, null, !dbg !2913
  br i1 %cmp36, label %for.body, label %for.end, !dbg !2914

for.body:                                         ; preds = %for.cond
  %arraydecay38 = getelementptr inbounds [3 x i8], [3 x i8]* %label, i64 0, i64 0, !dbg !2915, !ctir !255
  %29 = load i32, i32* %ind_no, align 4, !dbg !2915
  %idxprom39 = sext i32 %29 to i64, !dbg !2915
  %arrayidx40 = getelementptr inbounds [25 x i8*], [25 x i8*]* @indicator_name, i64 0, i64 %idxprom39, !dbg !2915, !ctir !716
  %30 = load i8*, i8** %arrayidx40, align 8, !dbg !2915
  %call41 = call i32 @strcmp(i8* %arraydecay38, i8* %30) #16, !dbg !2915
  %cmp42 = icmp eq i32 %call41, 0, !dbg !2915
  br i1 %cmp42, label %if.then44, label %if.end54, !dbg !2918

if.then44:                                        ; preds = %for.body
  %31 = load i8*, i8** %buf, align 8, !dbg !2919
  %32 = load i32, i32* %ind_no, align 4, !dbg !2921
  %idxprom45 = sext i32 %32 to i64, !dbg !2922
  %arrayidx46 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %idxprom45, !dbg !2922, !ctir !281
  %string47 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx46, i32 0, i32 1, !dbg !2923, !ctir !282
  store i8* %31, i8** %string47, align 8, !dbg !2924, !ctir !146
  %33 = load i32, i32* %ind_no, align 4, !dbg !2925
  %idxprom48 = sext i32 %33 to i64, !dbg !2926
  %arrayidx49 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %idxprom48, !dbg !2926, !ctir !281
  %len50 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx49, i32 0, i32 0, !dbg !2927, !ctir !282
  %call51 = call zeroext i1 @get_funky_string(i8** %buf, i8** %p, i1 zeroext false, i64* %len50), !dbg !2928
  %34 = zext i1 %call51 to i64, !dbg !2928
  %cond53 = select i1 %call51, i32 1, i32 6, !dbg !2928
  store i32 %cond53, i32* %state, align 4, !dbg !2929
  br label %for.end, !dbg !2930

if.end54:                                         ; preds = %for.body
  br label %for.inc, !dbg !2931

for.inc:                                          ; preds = %if.end54
  %35 = load i32, i32* %ind_no, align 4, !dbg !2932
  %inc = add nsw i32 %35, 1, !dbg !2932
  store i32 %inc, i32* %ind_no, align 4, !dbg !2932
  br label %for.cond, !dbg !2933, !llvm.loop !2934

for.end:                                          ; preds = %if.then44, %for.cond
  %36 = load i32, i32* %state, align 4, !dbg !2936
  %cmp55 = icmp eq i32 %36, 6, !dbg !2938
  br i1 %cmp55, label %if.then57, label %if.end61, !dbg !2939

if.then57:                                        ; preds = %for.end
  %call58 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.175, i64 0, i64 0)) #13, !dbg !2940
  %arraydecay59 = getelementptr inbounds [3 x i8], [3 x i8]* %label, i64 0, i64 0, !dbg !2941, !ctir !255
  %call60 = call i8* @quote(i8* %arraydecay59), !dbg !2942
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call58, i8* %call60), !dbg !2943
  br label %if.end61, !dbg !2943

if.end61:                                         ; preds = %if.then57, %for.end
  br label %if.end62, !dbg !2944

if.end62:                                         ; preds = %if.end61, %sw.bb29
  br label %sw.epilog79, !dbg !2945

sw.bb63:                                          ; preds = %while.body
  %37 = load i8*, i8** %p, align 8, !dbg !2946
  %incdec.ptr64 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !2946, !ctir !147
  store i8* %incdec.ptr64, i8** %p, align 8, !dbg !2946
  %38 = load i8, i8* %37, align 1, !dbg !2948, !ctir !147
  %conv65 = sext i8 %38 to i32, !dbg !2948
  %cmp66 = icmp eq i32 %conv65, 61, !dbg !2949
  br i1 %cmp66, label %if.then68, label %if.else75, !dbg !2950

if.then68:                                        ; preds = %sw.bb63
  %39 = load i8*, i8** %buf, align 8, !dbg !2951
  %40 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2953
  %seq = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %40, i32 0, i32 1, !dbg !2954, !ctir !711
  %string69 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %seq, i32 0, i32 1, !dbg !2955, !ctir !282
  store i8* %39, i8** %string69, align 8, !dbg !2956, !ctir !146
  %41 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !2957
  %seq70 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %41, i32 0, i32 1, !dbg !2958, !ctir !711
  %len71 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %seq70, i32 0, i32 0, !dbg !2959, !ctir !282
  %call72 = call zeroext i1 @get_funky_string(i8** %buf, i8** %p, i1 zeroext false, i64* %len71), !dbg !2960
  %42 = zext i1 %call72 to i64, !dbg !2960
  %cond74 = select i1 %call72, i32 1, i32 6, !dbg !2960
  store i32 %cond74, i32* %state, align 4, !dbg !2961
  br label %if.end76, !dbg !2962

if.else75:                                        ; preds = %sw.bb63
  store i32 6, i32* %state, align 4, !dbg !2963
  br label %if.end76

if.end76:                                         ; preds = %if.else75, %if.then68
  br label %sw.epilog79, !dbg !2964

sw.bb77:                                          ; preds = %while.body
  br label %done, !dbg !2965

sw.default78:                                     ; preds = %while.body
  call void @abort() #15, !dbg !2966
  unreachable, !dbg !2966

sw.epilog79:                                      ; preds = %if.end76, %if.end62, %if.end28, %sw.epilog
  br label %while.body, !dbg !2847, !llvm.loop !2967

done:                                             ; preds = %sw.bb77, %sw.bb21
  call void @llvm.dbg.label(metadata !2969), !dbg !2970
  %43 = load i32, i32* %state, align 4, !dbg !2971
  %cmp80 = icmp eq i32 %43, 6, !dbg !2973
  br i1 %cmp80, label %if.then82, label %if.end90, !dbg !2974

if.then82:                                        ; preds = %done
  call void @llvm.dbg.declare(metadata %struct.color_ext_type** %e, metadata !2975, metadata !DIExpression()), !dbg !2977
  call void @llvm.dbg.declare(metadata %struct.color_ext_type** %e2, metadata !2978, metadata !DIExpression()), !dbg !2979
  %call83 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.176, i64 0, i64 0)) #13, !dbg !2980
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call83), !dbg !2981
  %44 = load i8*, i8** @color_buf, align 8, !dbg !2982
  call void @free(i8* %44) #13, !dbg !2983
  %45 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8, !dbg !2984
  store %struct.color_ext_type* %45, %struct.color_ext_type** %e, align 8, !dbg !2986
  br label %for.cond84, !dbg !2987

for.cond84:                                       ; preds = %for.body87, %if.then82
  %46 = load %struct.color_ext_type*, %struct.color_ext_type** %e, align 8, !dbg !2988
  %cmp85 = icmp ne %struct.color_ext_type* %46, null, !dbg !2990
  br i1 %cmp85, label %for.body87, label %for.end89, !dbg !2991

for.body87:                                       ; preds = %for.cond84
  %47 = load %struct.color_ext_type*, %struct.color_ext_type** %e, align 8, !dbg !2992
  store %struct.color_ext_type* %47, %struct.color_ext_type** %e2, align 8, !dbg !2994
  %48 = load %struct.color_ext_type*, %struct.color_ext_type** %e, align 8, !dbg !2995
  %next88 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %48, i32 0, i32 2, !dbg !2996, !ctir !711
  %49 = load %struct.color_ext_type*, %struct.color_ext_type** %next88, align 8, !dbg !2996, !ctir !710
  store %struct.color_ext_type* %49, %struct.color_ext_type** %e, align 8, !dbg !2997
  %50 = load %struct.color_ext_type*, %struct.color_ext_type** %e2, align 8, !dbg !2998
  %51 = bitcast %struct.color_ext_type* %50 to i8*, !dbg !2998
  call void @free(i8* %51) #13, !dbg !2999
  br label %for.cond84, !dbg !3000, !llvm.loop !3001

for.end89:                                        ; preds = %for.cond84
  store i8 0, i8* @print_with_color, align 1, !dbg !3003
  br label %if.end90, !dbg !3004

if.end90:                                         ; preds = %for.end89, %done
  %52 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 0), align 16, !dbg !3005, !ctir !149
  %cmp91 = icmp eq i64 %52, 6, !dbg !3007
  br i1 %cmp91, label %land.lhs.true93, label %if.end97, !dbg !3008

land.lhs.true93:                                  ; preds = %if.end90
  %53 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 1), align 8, !dbg !3009, !ctir !146
  %call94 = call i32 @strncmp(i8* %53, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i64 0, i64 0), i64 6) #16, !dbg !3009
  %tobool95 = icmp ne i32 %call94, 0, !dbg !3009
  br i1 %tobool95, label %if.end97, label %if.then96, !dbg !3010

if.then96:                                        ; preds = %land.lhs.true93
  store i8 1, i8* @color_symlink_as_referent, align 1, !dbg !3011
  br label %if.end97, !dbg !3012

if.end97:                                         ; preds = %if.end, %if.then96, %land.lhs.true93, %if.end90
  ret void, !dbg !3013
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_colored(i32 %type) #0 !dbg !3014 {
entry:
  %type.addr = alloca i32, align 4
  %len = alloca i64, align 8, !ctir !149
  %s = alloca i8*, align 8, !ctir !146
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3017, metadata !DIExpression()), !dbg !3018
  call void @llvm.dbg.declare(metadata i64* %len, metadata !3019, metadata !DIExpression()), !dbg !3020
  %0 = load i32, i32* %type.addr, align 4, !dbg !3021
  %idxprom = zext i32 %0 to i64, !dbg !3022
  %arrayidx = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %idxprom, !dbg !3022, !ctir !281
  %len1 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx, i32 0, i32 0, !dbg !3023, !ctir !282
  %1 = load i64, i64* %len1, align 16, !dbg !3023, !ctir !149
  store i64 %1, i64* %len, align 8, !dbg !3020
  call void @llvm.dbg.declare(metadata i8** %s, metadata !3024, metadata !DIExpression()), !dbg !3025
  %2 = load i32, i32* %type.addr, align 4, !dbg !3026
  %idxprom2 = zext i32 %2 to i64, !dbg !3027
  %arrayidx3 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %idxprom2, !dbg !3027, !ctir !281
  %string = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx3, i32 0, i32 1, !dbg !3028, !ctir !282
  %3 = load i8*, i8** %string, align 8, !dbg !3028, !ctir !146
  store i8* %3, i8** %s, align 8, !dbg !3025
  %4 = load i64, i64* %len, align 8, !dbg !3029
  %cmp = icmp eq i64 %4, 0, !dbg !3030
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !3031

lor.lhs.false:                                    ; preds = %entry
  %5 = load i64, i64* %len, align 8, !dbg !3032
  %cmp4 = icmp eq i64 %5, 1, !dbg !3033
  br i1 %cmp4, label %land.lhs.true, label %lor.rhs, !dbg !3034

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i8*, i8** %s, align 8, !dbg !3035
  %call = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0), i64 1) #16, !dbg !3035
  %cmp5 = icmp eq i32 %call, 0, !dbg !3036
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !3037

lor.rhs:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %7 = load i64, i64* %len, align 8, !dbg !3038
  %cmp6 = icmp eq i64 %7, 2, !dbg !3039
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !3040

land.rhs:                                         ; preds = %lor.rhs
  %8 = load i8*, i8** %s, align 8, !dbg !3041
  %call7 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i64 0, i64 0), i64 2) #16, !dbg !3041
  %cmp8 = icmp eq i32 %call7, 0, !dbg !3042
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %cmp8, %land.rhs ], !dbg !3043
  br label %lor.end, !dbg !3037

lor.end:                                          ; preds = %land.end, %land.lhs.true, %entry
  %10 = phi i1 [ true, %land.lhs.true ], [ true, %entry ], [ %9, %land.end ]
  %lnot = xor i1 %10, true, !dbg !3044
  ret i1 %lnot, !dbg !3045
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @dev_ino_hash(i8* %x, i64 %table_size) #0 !dbg !3046 {
entry:
  %x.addr = alloca i8*, align 8
  %table_size.addr = alloca i64, align 8
  %p = alloca %struct.dev_ino*, align 8, !ctir !451
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !3047, metadata !DIExpression()), !dbg !3048
  store i64 %table_size, i64* %table_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %table_size.addr, metadata !3049, metadata !DIExpression()), !dbg !3050
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %p, metadata !3051, metadata !DIExpression()), !dbg !3052
  %0 = load i8*, i8** %x.addr, align 8, !dbg !3053
  %1 = bitcast i8* %0 to %struct.dev_ino*, !dbg !3053
  store %struct.dev_ino* %1, %struct.dev_ino** %p, align 8, !dbg !3052
  %2 = load %struct.dev_ino*, %struct.dev_ino** %p, align 8, !dbg !3054
  %st_ino = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %2, i32 0, i32 0, !dbg !3055, !ctir !452
  %3 = load i64, i64* %st_ino, align 8, !dbg !3055, !ctir !269
  %4 = load i64, i64* %table_size.addr, align 8, !dbg !3056
  %rem = urem i64 %3, %4, !dbg !3057
  ret i64 %rem, !dbg !3058
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dev_ino_compare(i8* %x, i8* %y) #0 !dbg !3059 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %a = alloca %struct.dev_ino*, align 8, !ctir !451
  %b = alloca %struct.dev_ino*, align 8, !ctir !451
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !3062, metadata !DIExpression()), !dbg !3063
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %a, metadata !3064, metadata !DIExpression()), !dbg !3065
  %0 = load i8*, i8** %x.addr, align 8, !dbg !3066
  %1 = bitcast i8* %0 to %struct.dev_ino*, !dbg !3066
  store %struct.dev_ino* %1, %struct.dev_ino** %a, align 8, !dbg !3065
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %b, metadata !3067, metadata !DIExpression()), !dbg !3068
  %2 = load i8*, i8** %y.addr, align 8, !dbg !3069
  %3 = bitcast i8* %2 to %struct.dev_ino*, !dbg !3069
  store %struct.dev_ino* %3, %struct.dev_ino** %b, align 8, !dbg !3068
  %4 = load %struct.dev_ino*, %struct.dev_ino** %a, align 8, !dbg !3070
  %st_ino = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %4, i32 0, i32 0, !dbg !3070, !ctir !452
  %5 = load i64, i64* %st_ino, align 8, !dbg !3070, !ctir !269
  %6 = load %struct.dev_ino*, %struct.dev_ino** %b, align 8, !dbg !3070
  %st_ino1 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 0, !dbg !3070, !ctir !452
  %7 = load i64, i64* %st_ino1, align 8, !dbg !3070, !ctir !269
  %cmp = icmp eq i64 %5, %7, !dbg !3070
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3070

land.rhs:                                         ; preds = %entry
  %8 = load %struct.dev_ino*, %struct.dev_ino** %a, align 8, !dbg !3070
  %st_dev = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %8, i32 0, i32 1, !dbg !3070, !ctir !452
  %9 = load i64, i64* %st_dev, align 8, !dbg !3070, !ctir !271
  %10 = load %struct.dev_ino*, %struct.dev_ino** %b, align 8, !dbg !3070
  %st_dev2 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %10, i32 0, i32 1, !dbg !3070, !ctir !452
  %11 = load i64, i64* %st_dev2, align 8, !dbg !3070, !ctir !271
  %cmp3 = icmp eq i64 %9, %11, !dbg !3070
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !3071
  %13 = zext i1 %12 to i64, !dbg !3070
  %cond = select i1 %12, i32 1, i32 0, !dbg !3070
  %tobool = icmp ne i32 %cond, 0, !dbg !3070
  ret i1 %tobool, !dbg !3072
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_ino_free(i8* %x) #0 !dbg !3073 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  %0 = load i8*, i8** %x.addr, align 8, !dbg !3076
  call void @free(i8* %0) #13, !dbg !3077
  ret void, !dbg !3078
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_escape_init() #0 !dbg !3079 {
entry:
  %i = alloca i32, align 4, !ctir !27
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3080, metadata !DIExpression()), !dbg !3082
  store i32 0, i32* %i, align 4, !dbg !3082
  br label %for.cond, !dbg !3083

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3084
  %cmp = icmp slt i32 %0, 256, !dbg !3086
  br i1 %cmp, label %for.body, label %for.end, !dbg !3087

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3088
  %call = call zeroext i1 @c_isalnum(i32 %1), !dbg !3089
  br i1 %call, label %lor.end, label %lor.lhs.false, !dbg !3090

lor.lhs.false:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !3091
  %cmp1 = icmp eq i32 %2, 126, !dbg !3092
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2, !dbg !3093

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %i, align 4, !dbg !3094
  %cmp3 = icmp eq i32 %3, 45, !dbg !3095
  br i1 %cmp3, label %lor.end, label %lor.lhs.false4, !dbg !3096

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %i, align 4, !dbg !3097
  %cmp5 = icmp eq i32 %4, 46, !dbg !3098
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !3099

lor.rhs:                                          ; preds = %lor.lhs.false4
  %5 = load i32, i32* %i, align 4, !dbg !3100
  %cmp6 = icmp eq i32 %5, 95, !dbg !3101
  br label %lor.end, !dbg !3099

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %for.body
  %6 = phi i1 [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %for.body ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !3099
  %7 = load i32, i32* %i, align 4, !dbg !3102
  %idxprom = sext i32 %7 to i64, !dbg !3103
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @RFC3986, i64 0, i64 %idxprom, !dbg !3103, !ctir !453
  %8 = load i8, i8* %arrayidx, align 1, !dbg !3104
  %conv = sext i8 %8 to i32, !dbg !3104
  %or = or i32 %conv, %lor.ext, !dbg !3104
  %conv7 = trunc i32 %or to i8, !dbg !3104
  store i8 %conv7, i8* %arrayidx, align 1, !dbg !3104
  br label %for.inc, !dbg !3103

for.inc:                                          ; preds = %lor.end
  %9 = load i32, i32* %i, align 4, !dbg !3105
  %inc = add nsw i32 %9, 1, !dbg !3105
  store i32 %inc, i32* %i, align 4, !dbg !3105
  br label %for.cond, !dbg !3106, !llvm.loop !3107

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3109
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_files() #0 !dbg !3110 {
entry:
  %i = alloca i64, align 8, !ctir !149
  %f = alloca %struct.fileinfo*, align 8, !ctir !260
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3111, metadata !DIExpression()), !dbg !3113
  store i64 0, i64* %i, align 8, !dbg !3113
  br label %for.cond, !dbg !3114

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !3115
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !3117
  %cmp = icmp ult i64 %0, %1, !dbg !3118
  br i1 %cmp, label %for.body, label %for.end, !dbg !3119

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !3120, metadata !DIExpression()), !dbg !3122
  %2 = load i8**, i8*** @sorted_file, align 8, !dbg !3123
  %3 = load i64, i64* %i, align 8, !dbg !3124
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3, !dbg !3123, !ctir !767
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !3123
  %5 = bitcast i8* %4 to %struct.fileinfo*, !dbg !3123
  store %struct.fileinfo* %5, %struct.fileinfo** %f, align 8, !dbg !3122
  %6 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3125
  call void @free_ent(%struct.fileinfo* %6), !dbg !3126
  br label %for.inc, !dbg !3127

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !3128
  %inc = add i64 %7, 1, !dbg !3128
  store i64 %inc, i64* %i, align 8, !dbg !3128
  br label %for.cond, !dbg !3129, !llvm.loop !3130

for.end:                                          ; preds = %for.cond
  store i64 0, i64* @cwd_n_used, align 8, !dbg !3132
  store i8 0, i8* @cwd_some_quoted, align 1, !dbg !3133
  store i8 0, i8* @any_has_acl, align 1, !dbg !3134
  store i32 0, i32* @inode_number_width, align 4, !dbg !3135
  store i32 0, i32* @block_size_width, align 4, !dbg !3136
  store i32 0, i32* @nlink_width, align 4, !dbg !3137
  store i32 0, i32* @owner_width, align 4, !dbg !3138
  store i32 0, i32* @group_width, align 4, !dbg !3139
  store i32 0, i32* @author_width, align 4, !dbg !3140
  store i32 0, i32* @scontext_width, align 4, !dbg !3141
  store i32 0, i32* @major_device_number_width, align 4, !dbg !3142
  store i32 0, i32* @minor_device_number_width, align 4, !dbg !3143
  store i32 0, i32* @file_size_width, align 4, !dbg !3144
  ret void, !dbg !3145
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @gobble_file(i8* %name, i32 %type, i64 %inode, i1 zeroext %command_line_arg, i8* %dirname) #0 !dbg !3146 {
entry:
  %retval = alloca i64, align 8
  %name.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %inode.addr = alloca i64, align 8
  %command_line_arg.addr = alloca i8, align 1
  %dirname.addr = alloca i8*, align 8
  %blocks = alloca i64, align 8, !ctir !168
  %f = alloca %struct.fileinfo*, align 8, !ctir !260
  %full_name = alloca i8*, align 8, !ctir !143
  %do_deref = alloca i8, align 1, !ctir !141
  %err = alloca i32, align 4, !ctir !27
  %need_lstat = alloca i8, align 1, !ctir !141
  %have_scontext = alloca i8, align 1, !ctir !141
  %have_acl = alloca i8, align 1, !ctir !141
  %attr_len = alloca i32, align 4, !ctir !27
  %n = alloca i32, align 4, !ctir !27
  %linkstats = alloca %struct.stat, align 8, !ctir !191
  %linkname = alloca i8*, align 8, !ctir !143
  %buf = alloca [652 x i8], align 16, !ctir !746
  %len = alloca i32, align 4, !ctir !27
  %len345 = alloca i32, align 4, !ctir !27
  %len355 = alloca i32, align 4, !ctir !27
  %len365 = alloca i32, align 4, !ctir !27
  %len377 = alloca i32, align 4, !ctir !27
  %b = alloca [21 x i8], align 16, !ctir !743
  %b_len = alloca i32, align 4, !ctir !27
  %buf410 = alloca [21 x i8], align 16, !ctir !743
  %len411 = alloca i32, align 4, !ctir !27
  %buf442 = alloca [652 x i8], align 16, !ctir !746
  %size = alloca i64, align 8, !ctir !168
  %len445 = alloca i32, align 4, !ctir !27
  %buf458 = alloca [21 x i8], align 16, !ctir !743
  %len459 = alloca i32, align 4, !ctir !27
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3149, metadata !DIExpression()), !dbg !3150
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !3151, metadata !DIExpression()), !dbg !3152
  store i64 %inode, i64* %inode.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %inode.addr, metadata !3153, metadata !DIExpression()), !dbg !3154
  %frombool = zext i1 %command_line_arg to i8
  store i8 %frombool, i8* %command_line_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %command_line_arg.addr, metadata !3155, metadata !DIExpression()), !dbg !3156
  store i8* %dirname, i8** %dirname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dirname.addr, metadata !3157, metadata !DIExpression()), !dbg !3158
  call void @llvm.dbg.declare(metadata i64* %blocks, metadata !3159, metadata !DIExpression()), !dbg !3160
  store i64 0, i64* %blocks, align 8, !dbg !3160
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !3161, metadata !DIExpression()), !dbg !3162
  %0 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3163
  %tobool = trunc i8 %0 to i1, !dbg !3163
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3163

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %inode.addr, align 8, !dbg !3163
  %cmp = icmp eq i64 %1, 0, !dbg !3163
  br i1 %cmp, label %if.then, label %if.else, !dbg !3166

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end, !dbg !3166

if.else:                                          ; preds = %lor.lhs.false
  call void @__assert_fail(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.216, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 3119, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.gobble_file, i64 0, i64 0)) #15, !dbg !3163
  unreachable, !dbg !3163

if.end:                                           ; preds = %if.then
  %2 = load i64, i64* @cwd_n_used, align 8, !dbg !3167
  %3 = load i64, i64* @cwd_n_alloc, align 8, !dbg !3169
  %cmp1 = icmp eq i64 %2, %3, !dbg !3170
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3171

if.then2:                                         ; preds = %if.end
  %4 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8, !dbg !3172
  %5 = bitcast %struct.fileinfo* %4 to i8*, !dbg !3172
  %6 = load i64, i64* @cwd_n_alloc, align 8, !dbg !3174
  %call = call i8* @xnrealloc(i8* %5, i64 %6, i64 400), !dbg !3175
  %7 = bitcast i8* %call to %struct.fileinfo*, !dbg !3175
  store %struct.fileinfo* %7, %struct.fileinfo** @cwd_file, align 8, !dbg !3176
  %8 = load i64, i64* @cwd_n_alloc, align 8, !dbg !3177
  %mul = mul i64 %8, 2, !dbg !3177
  store i64 %mul, i64* @cwd_n_alloc, align 8, !dbg !3177
  br label %if.end3, !dbg !3178

if.end3:                                          ; preds = %if.then2, %if.end
  %9 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8, !dbg !3179
  %10 = load i64, i64* @cwd_n_used, align 8, !dbg !3180
  %arrayidx = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %9, i64 %10, !dbg !3179, !ctir !260
  store %struct.fileinfo* %arrayidx, %struct.fileinfo** %f, align 8, !dbg !3181
  %11 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3182
  %12 = bitcast %struct.fileinfo* %11 to i8*, !dbg !3183
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 200, i1 false), !dbg !3183
  %13 = load i64, i64* %inode.addr, align 8, !dbg !3184
  %14 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3185
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %14, i32 0, i32 3, !dbg !3186, !ctir !185
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 1, !dbg !3187, !ctir !191
  store i64 %13, i64* %st_ino, align 8, !dbg !3188, !ctir !197
  %15 = load i32, i32* %type.addr, align 4, !dbg !3189
  %16 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3190
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %16, i32 0, i32 4, !dbg !3191, !ctir !185
  store i32 %15, i32* %filetype, align 8, !dbg !3192, !ctir !36
  %17 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3193
  %quoted = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %17, i32 0, i32 11, !dbg !3194, !ctir !185
  store i32 -1, i32* %quoted, align 4, !dbg !3195, !ctir !27
  %18 = load i8, i8* @cwd_some_quoted, align 1, !dbg !3196
  %tobool4 = trunc i8 %18 to i1, !dbg !3196
  br i1 %tobool4, label %if.end13, label %land.lhs.true, !dbg !3198

land.lhs.true:                                    ; preds = %if.end3
  %19 = load i8, i8* @align_variable_outer_quotes, align 1, !dbg !3199
  %tobool5 = trunc i8 %19 to i1, !dbg !3199
  br i1 %tobool5, label %if.then6, label %if.end13, !dbg !3200

if.then6:                                         ; preds = %land.lhs.true
  %20 = load i8*, i8** %name.addr, align 8, !dbg !3201
  %call7 = call zeroext i1 @needs_quoting(i8* %20), !dbg !3203
  %conv = zext i1 %call7 to i32, !dbg !3203
  %21 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3204
  %quoted8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %21, i32 0, i32 11, !dbg !3205, !ctir !185
  store i32 %conv, i32* %quoted8, align 4, !dbg !3206, !ctir !27
  %22 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3207
  %quoted9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %22, i32 0, i32 11, !dbg !3209, !ctir !185
  %23 = load i32, i32* %quoted9, align 4, !dbg !3209, !ctir !27
  %tobool10 = icmp ne i32 %23, 0, !dbg !3207
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !3210

if.then11:                                        ; preds = %if.then6
  store i8 1, i8* @cwd_some_quoted, align 1, !dbg !3211
  br label %if.end12, !dbg !3212

if.end12:                                         ; preds = %if.then11, %if.then6
  br label %if.end13, !dbg !3213

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %if.end3
  %24 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3214
  %tobool14 = trunc i8 %24 to i1, !dbg !3214
  br i1 %tobool14, label %if.then94, label %lor.lhs.false16, !dbg !3216

lor.lhs.false16:                                  ; preds = %if.end13
  %25 = load i8, i8* @print_hyperlink, align 1, !dbg !3217
  %tobool17 = trunc i8 %25 to i1, !dbg !3217
  br i1 %tobool17, label %if.then94, label %lor.lhs.false19, !dbg !3218

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %26 = load i8, i8* @format_needs_stat, align 1, !dbg !3219
  %tobool20 = trunc i8 %26 to i1, !dbg !3219
  br i1 %tobool20, label %if.then94, label %lor.lhs.false22, !dbg !3220

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %27 = load i32, i32* %type.addr, align 4, !dbg !3221
  %cmp23 = icmp eq i32 %27, 3, !dbg !3222
  br i1 %cmp23, label %land.lhs.true25, label %lor.lhs.false37, !dbg !3223

land.lhs.true25:                                  ; preds = %lor.lhs.false22
  %28 = load i8, i8* @print_with_color, align 1, !dbg !3224
  %tobool26 = trunc i8 %28 to i1, !dbg !3224
  br i1 %tobool26, label %land.lhs.true28, label %lor.lhs.false37, !dbg !3225

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %call29 = call zeroext i1 @is_colored(i32 19), !dbg !3226
  br i1 %call29, label %if.then94, label %lor.lhs.false31, !dbg !3227

lor.lhs.false31:                                  ; preds = %land.lhs.true28
  %call32 = call zeroext i1 @is_colored(i32 18), !dbg !3228
  br i1 %call32, label %if.then94, label %lor.lhs.false34, !dbg !3229

lor.lhs.false34:                                  ; preds = %lor.lhs.false31
  %call35 = call zeroext i1 @is_colored(i32 20), !dbg !3230
  br i1 %call35, label %if.then94, label %lor.lhs.false37, !dbg !3231

lor.lhs.false37:                                  ; preds = %lor.lhs.false34, %land.lhs.true25, %lor.lhs.false22
  %29 = load i8, i8* @print_inode, align 1, !dbg !3232
  %tobool38 = trunc i8 %29 to i1, !dbg !3232
  br i1 %tobool38, label %land.lhs.true43, label %lor.lhs.false40, !dbg !3233

lor.lhs.false40:                                  ; preds = %lor.lhs.false37
  %30 = load i8, i8* @format_needs_type, align 1, !dbg !3234
  %tobool41 = trunc i8 %30 to i1, !dbg !3234
  br i1 %tobool41, label %land.lhs.true43, label %lor.lhs.false58, !dbg !3235

land.lhs.true43:                                  ; preds = %lor.lhs.false40, %lor.lhs.false37
  %31 = load i32, i32* %type.addr, align 4, !dbg !3236
  %cmp44 = icmp eq i32 %31, 6, !dbg !3237
  br i1 %cmp44, label %land.lhs.true49, label %lor.lhs.false46, !dbg !3238

lor.lhs.false46:                                  ; preds = %land.lhs.true43
  %32 = load i32, i32* %type.addr, align 4, !dbg !3239
  %cmp47 = icmp eq i32 %32, 0, !dbg !3240
  br i1 %cmp47, label %land.lhs.true49, label %lor.lhs.false58, !dbg !3241

land.lhs.true49:                                  ; preds = %lor.lhs.false46, %land.lhs.true43
  %33 = load i32, i32* @dereference, align 4, !dbg !3242
  %cmp50 = icmp eq i32 %33, 5, !dbg !3243
  br i1 %cmp50, label %if.then94, label %lor.lhs.false52, !dbg !3244

lor.lhs.false52:                                  ; preds = %land.lhs.true49
  %34 = load i8, i8* @color_symlink_as_referent, align 1, !dbg !3245
  %tobool53 = trunc i8 %34 to i1, !dbg !3245
  br i1 %tobool53, label %if.then94, label %lor.lhs.false55, !dbg !3246

lor.lhs.false55:                                  ; preds = %lor.lhs.false52
  %35 = load i8, i8* @check_symlink_mode, align 1, !dbg !3247
  %tobool56 = trunc i8 %35 to i1, !dbg !3247
  br i1 %tobool56, label %if.then94, label %lor.lhs.false58, !dbg !3248

lor.lhs.false58:                                  ; preds = %lor.lhs.false55, %lor.lhs.false46, %lor.lhs.false40
  %36 = load i8, i8* @print_inode, align 1, !dbg !3249
  %tobool59 = trunc i8 %36 to i1, !dbg !3249
  br i1 %tobool59, label %land.lhs.true61, label %lor.lhs.false64, !dbg !3250

land.lhs.true61:                                  ; preds = %lor.lhs.false58
  %37 = load i64, i64* %inode.addr, align 8, !dbg !3251
  %cmp62 = icmp eq i64 %37, 0, !dbg !3252
  br i1 %cmp62, label %if.then94, label %lor.lhs.false64, !dbg !3253

lor.lhs.false64:                                  ; preds = %land.lhs.true61, %lor.lhs.false58
  %38 = load i8, i8* @format_needs_type, align 1, !dbg !3254
  %tobool65 = trunc i8 %38 to i1, !dbg !3254
  br i1 %tobool65, label %land.lhs.true67, label %if.end455, !dbg !3255

land.lhs.true67:                                  ; preds = %lor.lhs.false64
  %39 = load i32, i32* %type.addr, align 4, !dbg !3256
  %cmp68 = icmp eq i32 %39, 0, !dbg !3257
  br i1 %cmp68, label %if.then94, label %lor.lhs.false70, !dbg !3258

lor.lhs.false70:                                  ; preds = %land.lhs.true67
  %40 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3259
  %tobool71 = trunc i8 %40 to i1, !dbg !3259
  br i1 %tobool71, label %if.then94, label %lor.lhs.false73, !dbg !3260

lor.lhs.false73:                                  ; preds = %lor.lhs.false70
  %41 = load i32, i32* %type.addr, align 4, !dbg !3261
  %cmp74 = icmp eq i32 %41, 5, !dbg !3262
  br i1 %cmp74, label %land.lhs.true76, label %if.end455, !dbg !3263

land.lhs.true76:                                  ; preds = %lor.lhs.false73
  %42 = load i32, i32* @indicator_style, align 4, !dbg !3264
  %cmp77 = icmp eq i32 %42, 3, !dbg !3265
  br i1 %cmp77, label %if.then94, label %lor.lhs.false79, !dbg !3266

lor.lhs.false79:                                  ; preds = %land.lhs.true76
  %43 = load i8, i8* @print_with_color, align 1, !dbg !3267
  %tobool80 = trunc i8 %43 to i1, !dbg !3267
  br i1 %tobool80, label %land.lhs.true82, label %if.end455, !dbg !3268

land.lhs.true82:                                  ; preds = %lor.lhs.false79
  %call83 = call zeroext i1 @is_colored(i32 14), !dbg !3269
  br i1 %call83, label %if.then94, label %lor.lhs.false85, !dbg !3270

lor.lhs.false85:                                  ; preds = %land.lhs.true82
  %call86 = call zeroext i1 @is_colored(i32 16), !dbg !3271
  br i1 %call86, label %if.then94, label %lor.lhs.false88, !dbg !3272

lor.lhs.false88:                                  ; preds = %lor.lhs.false85
  %call89 = call zeroext i1 @is_colored(i32 17), !dbg !3273
  br i1 %call89, label %if.then94, label %lor.lhs.false91, !dbg !3274

lor.lhs.false91:                                  ; preds = %lor.lhs.false88
  %call92 = call zeroext i1 @is_colored(i32 21), !dbg !3275
  br i1 %call92, label %if.then94, label %if.end455, !dbg !3276

if.then94:                                        ; preds = %lor.lhs.false91, %lor.lhs.false88, %lor.lhs.false85, %land.lhs.true82, %land.lhs.true76, %lor.lhs.false70, %land.lhs.true67, %land.lhs.true61, %lor.lhs.false55, %lor.lhs.false52, %land.lhs.true49, %lor.lhs.false34, %lor.lhs.false31, %land.lhs.true28, %lor.lhs.false19, %lor.lhs.false16, %if.end13
  call void @llvm.dbg.declare(metadata i8** %full_name, metadata !3277, metadata !DIExpression()), !dbg !3279
  call void @llvm.dbg.declare(metadata i8* %do_deref, metadata !3280, metadata !DIExpression()), !dbg !3281
  call void @llvm.dbg.declare(metadata i32* %err, metadata !3282, metadata !DIExpression()), !dbg !3283
  %44 = load i8*, i8** %name.addr, align 8, !dbg !3284
  %arrayidx95 = getelementptr inbounds i8, i8* %44, i64 0, !dbg !3284, !ctir !146
  %45 = load i8, i8* %arrayidx95, align 1, !dbg !3284
  %conv96 = sext i8 %45 to i32, !dbg !3284
  %cmp97 = icmp eq i32 %conv96, 47, !dbg !3286
  br i1 %cmp97, label %if.then104, label %lor.lhs.false99, !dbg !3287

lor.lhs.false99:                                  ; preds = %if.then94
  %46 = load i8*, i8** %dirname.addr, align 8, !dbg !3288
  %arrayidx100 = getelementptr inbounds i8, i8* %46, i64 0, !dbg !3288, !ctir !146
  %47 = load i8, i8* %arrayidx100, align 1, !dbg !3288
  %conv101 = sext i8 %47 to i32, !dbg !3288
  %cmp102 = icmp eq i32 %conv101, 0, !dbg !3289
  br i1 %cmp102, label %if.then104, label %if.else105, !dbg !3290

if.then104:                                       ; preds = %lor.lhs.false99, %if.then94
  %48 = load i8*, i8** %name.addr, align 8, !dbg !3291
  store i8* %48, i8** %full_name, align 8, !dbg !3292
  br label %if.end109, !dbg !3293

if.else105:                                       ; preds = %lor.lhs.false99
  %49 = load i8*, i8** %name.addr, align 8, !dbg !3294
  %call106 = call i64 @strlen(i8* %49) #16, !dbg !3296
  %50 = load i8*, i8** %dirname.addr, align 8, !dbg !3297
  %call107 = call i64 @strlen(i8* %50) #16, !dbg !3298
  %add = add i64 %call106, %call107, !dbg !3299
  %add108 = add i64 %add, 2, !dbg !3300
  %51 = alloca i8, i64 %add108, align 16, !dbg !3301
  store i8* %51, i8** %full_name, align 8, !dbg !3302
  %52 = load i8*, i8** %full_name, align 8, !dbg !3303
  %53 = load i8*, i8** %dirname.addr, align 8, !dbg !3304
  %54 = load i8*, i8** %name.addr, align 8, !dbg !3305
  call void @attach(i8* %52, i8* %53, i8* %54), !dbg !3306
  br label %if.end109

if.end109:                                        ; preds = %if.else105, %if.then104
  %55 = load i8, i8* @print_hyperlink, align 1, !dbg !3307
  %tobool110 = trunc i8 %55 to i1, !dbg !3307
  br i1 %tobool110, label %if.then111, label %if.end119, !dbg !3309

if.then111:                                       ; preds = %if.end109
  %56 = load i8*, i8** %full_name, align 8, !dbg !3310
  %call112 = call i8* @canonicalize_filename_mode(i8* %56, i32 2), !dbg !3312
  %57 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3313
  %absolute_name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %57, i32 0, i32 2, !dbg !3314, !ctir !185
  store i8* %call112, i8** %absolute_name, align 8, !dbg !3315, !ctir !143
  %58 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3316
  %absolute_name113 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %58, i32 0, i32 2, !dbg !3318, !ctir !185
  %59 = load i8*, i8** %absolute_name113, align 8, !dbg !3318, !ctir !143
  %tobool114 = icmp ne i8* %59, null, !dbg !3316
  br i1 %tobool114, label %if.end118, label %if.then115, !dbg !3319

if.then115:                                       ; preds = %if.then111
  %60 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3320
  %tobool116 = trunc i8 %60 to i1, !dbg !3320
  %call117 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.207, i64 0, i64 0)) #13, !dbg !3321
  %61 = load i8*, i8** %full_name, align 8, !dbg !3322
  call void @file_failure(i1 zeroext %tobool116, i8* %call117, i8* %61), !dbg !3323
  br label %if.end118, !dbg !3323

if.end118:                                        ; preds = %if.then115, %if.then111
  br label %if.end119, !dbg !3324

if.end119:                                        ; preds = %if.end118, %if.end109
  %62 = load i32, i32* @dereference, align 4, !dbg !3325
  switch i32 %62, label %sw.default [
    i32 5, label %sw.bb
    i32 3, label %sw.bb122
    i32 4, label %sw.bb122
  ], !dbg !3326

sw.bb:                                            ; preds = %if.end119
  %63 = load i8*, i8** %full_name, align 8, !dbg !3327
  %64 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3329
  %stat120 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %64, i32 0, i32 3, !dbg !3330, !ctir !185
  %call121 = call i32 @stat(i8* %63, %struct.stat* %stat120) #13, !dbg !3331
  store i32 %call121, i32* %err, align 4, !dbg !3332
  store i8 1, i8* %do_deref, align 1, !dbg !3333
  br label %sw.epilog, !dbg !3334

sw.bb122:                                         ; preds = %if.end119, %if.end119
  %65 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3335
  %tobool123 = trunc i8 %65 to i1, !dbg !3335
  br i1 %tobool123, label %if.then124, label %if.end144, !dbg !3337

if.then124:                                       ; preds = %sw.bb122
  call void @llvm.dbg.declare(metadata i8* %need_lstat, metadata !3338, metadata !DIExpression()), !dbg !3340
  %66 = load i8*, i8** %full_name, align 8, !dbg !3341
  %67 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3342
  %stat125 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %67, i32 0, i32 3, !dbg !3343, !ctir !185
  %call126 = call i32 @stat(i8* %66, %struct.stat* %stat125) #13, !dbg !3344
  store i32 %call126, i32* %err, align 4, !dbg !3345
  store i8 1, i8* %do_deref, align 1, !dbg !3346
  %68 = load i32, i32* @dereference, align 4, !dbg !3347
  %cmp127 = icmp eq i32 %68, 3, !dbg !3349
  br i1 %cmp127, label %if.then129, label %if.end130, !dbg !3350

if.then129:                                       ; preds = %if.then124
  br label %sw.epilog, !dbg !3351

if.end130:                                        ; preds = %if.then124
  %69 = load i32, i32* %err, align 4, !dbg !3352
  %cmp131 = icmp slt i32 %69, 0, !dbg !3353
  br i1 %cmp131, label %cond.true, label %cond.false, !dbg !3352

cond.true:                                        ; preds = %if.end130
  %call133 = call i32* @__errno_location() #17, !dbg !3354
  %70 = load i32, i32* %call133, align 4, !dbg !3354, !ctir !27
  %cmp134 = icmp eq i32 %70, 2, !dbg !3355
  %conv135 = zext i1 %cmp134 to i32, !dbg !3355
  br label %cond.end, !dbg !3352

cond.false:                                       ; preds = %if.end130
  %71 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3356
  %stat136 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %71, i32 0, i32 3, !dbg !3356, !ctir !185
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %stat136, i32 0, i32 3, !dbg !3356, !ctir !191
  %72 = load i32, i32* %st_mode, align 8, !dbg !3356, !ctir !201
  %and = and i32 %72, 61440, !dbg !3356
  %cmp137 = icmp eq i32 %and, 16384, !dbg !3356
  %lnot = xor i1 %cmp137, true, !dbg !3357
  %lnot.ext = zext i1 %lnot to i32, !dbg !3357
  br label %cond.end, !dbg !3352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv135, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3352
  %tobool139 = icmp ne i32 %cond, 0, !dbg !3358
  %frombool140 = zext i1 %tobool139 to i8, !dbg !3359
  store i8 %frombool140, i8* %need_lstat, align 1, !dbg !3359
  %73 = load i8, i8* %need_lstat, align 1, !dbg !3360
  %tobool141 = trunc i8 %73 to i1, !dbg !3360
  br i1 %tobool141, label %if.end143, label %if.then142, !dbg !3362

if.then142:                                       ; preds = %cond.end
  br label %sw.epilog, !dbg !3363

if.end143:                                        ; preds = %cond.end
  br label %if.end144, !dbg !3364

if.end144:                                        ; preds = %if.end143, %sw.bb122
  br label %sw.default, !dbg !3365

sw.default:                                       ; preds = %if.end119, %if.end144
  %74 = load i8*, i8** %full_name, align 8, !dbg !3366
  %75 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3367
  %stat145 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i32 0, i32 3, !dbg !3368, !ctir !185
  %call146 = call i32 @lstat(i8* %74, %struct.stat* %stat145) #13, !dbg !3369
  store i32 %call146, i32* %err, align 4, !dbg !3370
  store i8 0, i8* %do_deref, align 1, !dbg !3371
  br label %sw.epilog, !dbg !3372

sw.epilog:                                        ; preds = %sw.default, %if.then142, %if.then129, %sw.bb
  %76 = load i32, i32* %err, align 4, !dbg !3373
  %cmp147 = icmp ne i32 %76, 0, !dbg !3375
  br i1 %cmp147, label %if.then149, label %if.end157, !dbg !3376

if.then149:                                       ; preds = %sw.epilog
  %77 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3377
  %tobool150 = trunc i8 %77 to i1, !dbg !3377
  %call151 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.217, i64 0, i64 0)) #13, !dbg !3379
  %78 = load i8*, i8** %full_name, align 8, !dbg !3380
  call void @file_failure(i1 zeroext %tobool150, i8* %call151, i8* %78), !dbg !3381
  %79 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3382
  %tobool152 = trunc i8 %79 to i1, !dbg !3382
  br i1 %tobool152, label %if.then153, label %if.end154, !dbg !3384

if.then153:                                       ; preds = %if.then149
  store i64 0, i64* %retval, align 8, !dbg !3385
  br label %return, !dbg !3385

if.end154:                                        ; preds = %if.then149
  %80 = load i8*, i8** %name.addr, align 8, !dbg !3386
  %call155 = call noalias i8* @xstrdup(i8* %80), !dbg !3387
  %81 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3388
  %name156 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %81, i32 0, i32 0, !dbg !3389, !ctir !185
  store i8* %call155, i8** %name156, align 8, !dbg !3390, !ctir !143
  %82 = load i64, i64* @cwd_n_used, align 8, !dbg !3391
  %inc = add i64 %82, 1, !dbg !3391
  store i64 %inc, i64* @cwd_n_used, align 8, !dbg !3391
  store i64 0, i64* %retval, align 8, !dbg !3392
  br label %return, !dbg !3392

if.end157:                                        ; preds = %sw.epilog
  %83 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3393
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %83, i32 0, i32 7, !dbg !3394, !ctir !185
  store i8 1, i8* %stat_ok, align 8, !dbg !3395, !ctir !141
  %84 = load i32, i32* %type.addr, align 4, !dbg !3396
  %cmp158 = icmp eq i32 %84, 5, !dbg !3398
  br i1 %cmp158, label %land.lhs.true166, label %lor.lhs.false160, !dbg !3399

lor.lhs.false160:                                 ; preds = %if.end157
  %85 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3400
  %stat161 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %85, i32 0, i32 3, !dbg !3400, !ctir !185
  %st_mode162 = getelementptr inbounds %struct.stat, %struct.stat* %stat161, i32 0, i32 3, !dbg !3400, !ctir !191
  %86 = load i32, i32* %st_mode162, align 8, !dbg !3400, !ctir !201
  %and163 = and i32 %86, 61440, !dbg !3400
  %cmp164 = icmp eq i32 %and163, 32768, !dbg !3400
  br i1 %cmp164, label %land.lhs.true166, label %if.end175, !dbg !3401

land.lhs.true166:                                 ; preds = %lor.lhs.false160, %if.end157
  %87 = load i8, i8* @print_with_color, align 1, !dbg !3402
  %tobool167 = trunc i8 %87 to i1, !dbg !3402
  br i1 %tobool167, label %land.lhs.true169, label %if.end175, !dbg !3403

land.lhs.true169:                                 ; preds = %land.lhs.true166
  %call170 = call zeroext i1 @is_colored(i32 21), !dbg !3404
  br i1 %call170, label %if.then172, label %if.end175, !dbg !3405

if.then172:                                       ; preds = %land.lhs.true169
  %88 = load i8*, i8** %full_name, align 8, !dbg !3406
  %89 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3407
  %call173 = call zeroext i1 @has_capability_cache(i8* %88, %struct.fileinfo* %89), !dbg !3408
  %90 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3409
  %has_capability = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %90, i32 0, i32 10, !dbg !3410, !ctir !185
  %frombool174 = zext i1 %call173 to i8, !dbg !3411
  store i8 %frombool174, i8* %has_capability, align 8, !dbg !3411, !ctir !141
  br label %if.end175, !dbg !3409

if.end175:                                        ; preds = %if.then172, %land.lhs.true169, %land.lhs.true166, %lor.lhs.false160
  %91 = load i32, i32* @format, align 4, !dbg !3412
  %cmp176 = icmp eq i32 %91, 0, !dbg !3414
  br i1 %cmp176, label %if.then181, label %lor.lhs.false178, !dbg !3415

lor.lhs.false178:                                 ; preds = %if.end175
  %92 = load i8, i8* @print_scontext, align 1, !dbg !3416
  %tobool179 = trunc i8 %92 to i1, !dbg !3416
  br i1 %tobool179, label %if.then181, label %if.end256, !dbg !3417

if.then181:                                       ; preds = %lor.lhs.false178, %if.end175
  call void @llvm.dbg.declare(metadata i8* %have_scontext, metadata !3418, metadata !DIExpression()), !dbg !3420
  store i8 0, i8* %have_scontext, align 1, !dbg !3420
  call void @llvm.dbg.declare(metadata i8* %have_acl, metadata !3421, metadata !DIExpression()), !dbg !3422
  store i8 0, i8* %have_acl, align 1, !dbg !3422
  call void @llvm.dbg.declare(metadata i32* %attr_len, metadata !3423, metadata !DIExpression()), !dbg !3424
  %93 = load i8*, i8** %full_name, align 8, !dbg !3425
  %94 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3426
  %95 = load i8, i8* %do_deref, align 1, !dbg !3427
  %tobool182 = trunc i8 %95 to i1, !dbg !3427
  %call183 = call i32 @getfilecon_cache(i8* %93, %struct.fileinfo* %94, i1 zeroext %tobool182), !dbg !3428
  store i32 %call183, i32* %attr_len, align 4, !dbg !3424
  %96 = load i32, i32* %attr_len, align 4, !dbg !3429
  %cmp184 = icmp slt i32 %96, 0, !dbg !3430
  %conv185 = zext i1 %cmp184 to i32, !dbg !3430
  store i32 %conv185, i32* %err, align 4, !dbg !3431
  %97 = load i32, i32* %err, align 4, !dbg !3432
  %cmp186 = icmp eq i32 %97, 0, !dbg !3434
  br i1 %cmp186, label %if.then188, label %if.else206, !dbg !3435

if.then188:                                       ; preds = %if.then181
  %call189 = call zeroext i1 @is_smack_enabled(), !dbg !3436
  br i1 %call189, label %if.then190, label %if.else197, !dbg !3439

if.then190:                                       ; preds = %if.then188
  %98 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3440
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %98, i32 0, i32 6, !dbg !3440, !ctir !185
  %99 = load i8*, i8** %scontext, align 8, !dbg !3440, !ctir !143
  %call191 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.218, i64 0, i64 0), i8* %99) #16, !dbg !3440
  %cmp192 = icmp eq i32 %call191, 0, !dbg !3440
  %lnot194 = xor i1 %cmp192, true, !dbg !3441
  %frombool196 = zext i1 %lnot194 to i8, !dbg !3442
  store i8 %frombool196, i8* %have_scontext, align 1, !dbg !3442
  br label %if.end205, !dbg !3443

if.else197:                                       ; preds = %if.then188
  %100 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3444
  %scontext198 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %100, i32 0, i32 6, !dbg !3444, !ctir !185
  %101 = load i8*, i8** %scontext198, align 8, !dbg !3444, !ctir !143
  %call199 = call i32 @strcmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i64 0, i64 0), i8* %101) #16, !dbg !3444
  %cmp200 = icmp eq i32 %call199, 0, !dbg !3444
  %lnot202 = xor i1 %cmp200, true, !dbg !3445
  %frombool204 = zext i1 %lnot202 to i8, !dbg !3446
  store i8 %frombool204, i8* %have_scontext, align 1, !dbg !3446
  br label %if.end205

if.end205:                                        ; preds = %if.else197, %if.then190
  br label %if.end217, !dbg !3447

if.else206:                                       ; preds = %if.then181
  %102 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3448
  %scontext207 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %102, i32 0, i32 6, !dbg !3450, !ctir !185
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @UNKNOWN_SECURITY_CONTEXT, i64 0, i64 0), i8** %scontext207, align 8, !dbg !3451, !ctir !143
  %call208 = call i32* @__errno_location() #17, !dbg !3452
  %103 = load i32, i32* %call208, align 4, !dbg !3452, !ctir !27
  %call209 = call zeroext i1 @is_ENOTSUP(i32 %103), !dbg !3454
  br i1 %call209, label %if.then215, label %lor.lhs.false211, !dbg !3455

lor.lhs.false211:                                 ; preds = %if.else206
  %call212 = call i32* @__errno_location() #17, !dbg !3456
  %104 = load i32, i32* %call212, align 4, !dbg !3456, !ctir !27
  %cmp213 = icmp eq i32 %104, 61, !dbg !3457
  br i1 %cmp213, label %if.then215, label %if.end216, !dbg !3458

if.then215:                                       ; preds = %lor.lhs.false211, %if.else206
  store i32 0, i32* %err, align 4, !dbg !3459
  br label %if.end216, !dbg !3460

if.end216:                                        ; preds = %if.then215, %lor.lhs.false211
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.end205
  %105 = load i32, i32* %err, align 4, !dbg !3461
  %cmp218 = icmp eq i32 %105, 0, !dbg !3463
  br i1 %cmp218, label %land.lhs.true220, label %if.end230, !dbg !3464

land.lhs.true220:                                 ; preds = %if.end217
  %106 = load i32, i32* @format, align 4, !dbg !3465
  %cmp221 = icmp eq i32 %106, 0, !dbg !3466
  br i1 %cmp221, label %if.then223, label %if.end230, !dbg !3467

if.then223:                                       ; preds = %land.lhs.true220
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3468, metadata !DIExpression()), !dbg !3470
  %107 = load i8*, i8** %full_name, align 8, !dbg !3471
  %108 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3472
  %call224 = call i32 @file_has_acl_cache(i8* %107, %struct.fileinfo* %108), !dbg !3473
  store i32 %call224, i32* %n, align 4, !dbg !3470
  %109 = load i32, i32* %n, align 4, !dbg !3474
  %cmp225 = icmp slt i32 %109, 0, !dbg !3475
  %conv226 = zext i1 %cmp225 to i32, !dbg !3475
  store i32 %conv226, i32* %err, align 4, !dbg !3476
  %110 = load i32, i32* %n, align 4, !dbg !3477
  %cmp227 = icmp slt i32 0, %110, !dbg !3478
  %frombool229 = zext i1 %cmp227 to i8, !dbg !3479
  store i8 %frombool229, i8* %have_acl, align 1, !dbg !3479
  br label %if.end230, !dbg !3480

if.end230:                                        ; preds = %if.then223, %land.lhs.true220, %if.end217
  %111 = load i8, i8* %have_scontext, align 1, !dbg !3481
  %tobool231 = trunc i8 %111 to i1, !dbg !3481
  br i1 %tobool231, label %cond.false235, label %land.lhs.true232, !dbg !3482

land.lhs.true232:                                 ; preds = %if.end230
  %112 = load i8, i8* %have_acl, align 1, !dbg !3483
  %tobool233 = trunc i8 %112 to i1, !dbg !3483
  br i1 %tobool233, label %cond.false235, label %cond.true234, !dbg !3484

cond.true234:                                     ; preds = %land.lhs.true232
  br label %cond.end242, !dbg !3484

cond.false235:                                    ; preds = %land.lhs.true232, %if.end230
  %113 = load i8, i8* %have_scontext, align 1, !dbg !3485
  %tobool236 = trunc i8 %113 to i1, !dbg !3485
  br i1 %tobool236, label %land.rhs, label %land.end, !dbg !3486

land.rhs:                                         ; preds = %cond.false235
  %114 = load i8, i8* %have_acl, align 1, !dbg !3487
  %tobool238 = trunc i8 %114 to i1, !dbg !3487
  %lnot239 = xor i1 %tobool238, true, !dbg !3488
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false235
  %115 = phi i1 [ false, %cond.false235 ], [ %lnot239, %land.rhs ], !dbg !3489
  %116 = zext i1 %115 to i64, !dbg !3485
  %cond241 = select i1 %115, i32 1, i32 2, !dbg !3485
  br label %cond.end242, !dbg !3484

cond.end242:                                      ; preds = %land.end, %cond.true234
  %cond243 = phi i32 [ 0, %cond.true234 ], [ %cond241, %land.end ], !dbg !3484
  %117 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3490
  %acl_type = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %117, i32 0, i32 9, !dbg !3491, !ctir !185
  store i32 %cond243, i32* %acl_type, align 4, !dbg !3492, !ctir !48
  %118 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3493
  %acl_type244 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %118, i32 0, i32 9, !dbg !3494, !ctir !185
  %119 = load i32, i32* %acl_type244, align 4, !dbg !3494, !ctir !48
  %cmp245 = icmp ne i32 %119, 0, !dbg !3495
  %conv246 = zext i1 %cmp245 to i32, !dbg !3495
  %120 = load i8, i8* @any_has_acl, align 1, !dbg !3496
  %tobool247 = trunc i8 %120 to i1, !dbg !3496
  %conv248 = zext i1 %tobool247 to i32, !dbg !3496
  %or = or i32 %conv248, %conv246, !dbg !3496
  %tobool249 = icmp ne i32 %or, 0, !dbg !3496
  %frombool250 = zext i1 %tobool249 to i8, !dbg !3496
  store i8 %frombool250, i8* @any_has_acl, align 1, !dbg !3496
  %121 = load i32, i32* %err, align 4, !dbg !3497
  %tobool251 = icmp ne i32 %121, 0, !dbg !3497
  br i1 %tobool251, label %if.then252, label %if.end255, !dbg !3499

if.then252:                                       ; preds = %cond.end242
  %call253 = call i32* @__errno_location() #17, !dbg !3500
  %122 = load i32, i32* %call253, align 4, !dbg !3500, !ctir !27
  %123 = load i8*, i8** %full_name, align 8, !dbg !3501
  %call254 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %123), !dbg !3501
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i64 0, i64 0), i8* %call254), !dbg !3502
  br label %if.end255, !dbg !3502

if.end255:                                        ; preds = %if.then252, %cond.end242
  br label %if.end256, !dbg !3503

if.end256:                                        ; preds = %if.end255, %lor.lhs.false178
  %124 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3504
  %stat257 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %124, i32 0, i32 3, !dbg !3504, !ctir !185
  %st_mode258 = getelementptr inbounds %struct.stat, %struct.stat* %stat257, i32 0, i32 3, !dbg !3504, !ctir !191
  %125 = load i32, i32* %st_mode258, align 8, !dbg !3504, !ctir !201
  %and259 = and i32 %125, 61440, !dbg !3504
  %cmp260 = icmp eq i32 %and259, 40960, !dbg !3504
  br i1 %cmp260, label %land.lhs.true262, label %if.end298, !dbg !3506

land.lhs.true262:                                 ; preds = %if.end256
  %126 = load i32, i32* @format, align 4, !dbg !3507
  %cmp263 = icmp eq i32 %126, 0, !dbg !3508
  br i1 %cmp263, label %if.then268, label %lor.lhs.false265, !dbg !3509

lor.lhs.false265:                                 ; preds = %land.lhs.true262
  %127 = load i8, i8* @check_symlink_mode, align 1, !dbg !3510
  %tobool266 = trunc i8 %127 to i1, !dbg !3510
  br i1 %tobool266, label %if.then268, label %if.end298, !dbg !3511

if.then268:                                       ; preds = %lor.lhs.false265, %land.lhs.true262
  call void @llvm.dbg.declare(metadata %struct.stat* %linkstats, metadata !3512, metadata !DIExpression()), !dbg !3514
  %128 = load i8*, i8** %full_name, align 8, !dbg !3515
  %129 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3516
  %130 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3517
  %tobool269 = trunc i8 %130 to i1, !dbg !3517
  call void @get_link_name(i8* %128, %struct.fileinfo* %129, i1 zeroext %tobool269), !dbg !3518
  call void @llvm.dbg.declare(metadata i8** %linkname, metadata !3519, metadata !DIExpression()), !dbg !3520
  %131 = load i8*, i8** %full_name, align 8, !dbg !3521
  %132 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3522
  %linkname270 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %132, i32 0, i32 1, !dbg !3523, !ctir !185
  %133 = load i8*, i8** %linkname270, align 8, !dbg !3523, !ctir !143
  %call271 = call i8* @make_link_name(i8* %131, i8* %133), !dbg !3524
  store i8* %call271, i8** %linkname, align 8, !dbg !3520
  %134 = load i8*, i8** %linkname, align 8, !dbg !3525
  %tobool272 = icmp ne i8* %134, null, !dbg !3525
  br i1 %tobool272, label %land.lhs.true273, label %if.end283, !dbg !3527

land.lhs.true273:                                 ; preds = %if.then268
  %135 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3528
  %quoted274 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %135, i32 0, i32 11, !dbg !3529, !ctir !185
  %136 = load i32, i32* %quoted274, align 4, !dbg !3529, !ctir !27
  %cmp275 = icmp eq i32 %136, 0, !dbg !3530
  br i1 %cmp275, label %land.lhs.true277, label %if.end283, !dbg !3531

land.lhs.true277:                                 ; preds = %land.lhs.true273
  %137 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3532
  %linkname278 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %137, i32 0, i32 1, !dbg !3533, !ctir !185
  %138 = load i8*, i8** %linkname278, align 8, !dbg !3533, !ctir !143
  %call279 = call zeroext i1 @needs_quoting(i8* %138), !dbg !3534
  br i1 %call279, label %if.then281, label %if.end283, !dbg !3535

if.then281:                                       ; preds = %land.lhs.true277
  %139 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3536
  %quoted282 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %139, i32 0, i32 11, !dbg !3537, !ctir !185
  store i32 -1, i32* %quoted282, align 4, !dbg !3538, !ctir !27
  br label %if.end283, !dbg !3536

if.end283:                                        ; preds = %if.then281, %land.lhs.true277, %land.lhs.true273, %if.then268
  %140 = load i8*, i8** %linkname, align 8, !dbg !3539
  %tobool284 = icmp ne i8* %140, null, !dbg !3539
  br i1 %tobool284, label %land.lhs.true285, label %if.end297, !dbg !3541

land.lhs.true285:                                 ; preds = %if.end283
  %141 = load i32, i32* @indicator_style, align 4, !dbg !3542
  %cmp286 = icmp ule i32 2, %141, !dbg !3543
  br i1 %cmp286, label %land.lhs.true291, label %lor.lhs.false288, !dbg !3544

lor.lhs.false288:                                 ; preds = %land.lhs.true285
  %142 = load i8, i8* @check_symlink_mode, align 1, !dbg !3545
  %tobool289 = trunc i8 %142 to i1, !dbg !3545
  br i1 %tobool289, label %land.lhs.true291, label %if.end297, !dbg !3546

land.lhs.true291:                                 ; preds = %lor.lhs.false288, %land.lhs.true285
  %143 = load i8*, i8** %linkname, align 8, !dbg !3547
  %call292 = call i32 @stat(i8* %143, %struct.stat* %linkstats) #13, !dbg !3548
  %cmp293 = icmp eq i32 %call292, 0, !dbg !3549
  br i1 %cmp293, label %if.then295, label %if.end297, !dbg !3550

if.then295:                                       ; preds = %land.lhs.true291
  %144 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3551
  %linkok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %144, i32 0, i32 8, !dbg !3553, !ctir !185
  store i8 1, i8* %linkok, align 1, !dbg !3554, !ctir !141
  %st_mode296 = getelementptr inbounds %struct.stat, %struct.stat* %linkstats, i32 0, i32 3, !dbg !3555, !ctir !191
  %145 = load i32, i32* %st_mode296, align 8, !dbg !3555, !ctir !201
  %146 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3556
  %linkmode = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %146, i32 0, i32 5, !dbg !3557, !ctir !185
  store i32 %145, i32* %linkmode, align 4, !dbg !3558, !ctir !228
  br label %if.end297, !dbg !3559

if.end297:                                        ; preds = %if.then295, %land.lhs.true291, %lor.lhs.false288, %if.end283
  %147 = load i8*, i8** %linkname, align 8, !dbg !3560
  call void @free(i8* %147) #13, !dbg !3561
  br label %if.end298, !dbg !3562

if.end298:                                        ; preds = %if.end297, %lor.lhs.false265, %if.end256
  %148 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3563
  %stat299 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %148, i32 0, i32 3, !dbg !3563, !ctir !185
  %st_mode300 = getelementptr inbounds %struct.stat, %struct.stat* %stat299, i32 0, i32 3, !dbg !3563, !ctir !191
  %149 = load i32, i32* %st_mode300, align 8, !dbg !3563, !ctir !201
  %and301 = and i32 %149, 61440, !dbg !3563
  %cmp302 = icmp eq i32 %and301, 40960, !dbg !3563
  br i1 %cmp302, label %if.then304, label %if.else306, !dbg !3565

if.then304:                                       ; preds = %if.end298
  %150 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3566
  %filetype305 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %150, i32 0, i32 4, !dbg !3567, !ctir !185
  store i32 6, i32* %filetype305, align 8, !dbg !3568, !ctir !36
  br label %if.end325, !dbg !3566

if.else306:                                       ; preds = %if.end298
  %151 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3569
  %stat307 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %151, i32 0, i32 3, !dbg !3569, !ctir !185
  %st_mode308 = getelementptr inbounds %struct.stat, %struct.stat* %stat307, i32 0, i32 3, !dbg !3569, !ctir !191
  %152 = load i32, i32* %st_mode308, align 8, !dbg !3569, !ctir !201
  %and309 = and i32 %152, 61440, !dbg !3569
  %cmp310 = icmp eq i32 %and309, 16384, !dbg !3569
  br i1 %cmp310, label %if.then312, label %if.else322, !dbg !3571

if.then312:                                       ; preds = %if.else306
  %153 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3572
  %tobool313 = trunc i8 %153 to i1, !dbg !3572
  br i1 %tobool313, label %land.lhs.true315, label %if.else319, !dbg !3575

land.lhs.true315:                                 ; preds = %if.then312
  %154 = load i8, i8* @immediate_dirs, align 1, !dbg !3576
  %tobool316 = trunc i8 %154 to i1, !dbg !3576
  br i1 %tobool316, label %if.else319, label %if.then317, !dbg !3577

if.then317:                                       ; preds = %land.lhs.true315
  %155 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3578
  %filetype318 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %155, i32 0, i32 4, !dbg !3579, !ctir !185
  store i32 9, i32* %filetype318, align 8, !dbg !3580, !ctir !36
  br label %if.end321, !dbg !3578

if.else319:                                       ; preds = %land.lhs.true315, %if.then312
  %156 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3581
  %filetype320 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %156, i32 0, i32 4, !dbg !3582, !ctir !185
  store i32 3, i32* %filetype320, align 8, !dbg !3583, !ctir !36
  br label %if.end321

if.end321:                                        ; preds = %if.else319, %if.then317
  br label %if.end324, !dbg !3584

if.else322:                                       ; preds = %if.else306
  %157 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3585
  %filetype323 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %157, i32 0, i32 4, !dbg !3586, !ctir !185
  store i32 5, i32* %filetype323, align 8, !dbg !3587, !ctir !36
  br label %if.end324

if.end324:                                        ; preds = %if.else322, %if.end321
  br label %if.end325

if.end325:                                        ; preds = %if.end324, %if.then304
  %158 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3588
  %stat326 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %158, i32 0, i32 3, !dbg !3588, !ctir !185
  %st_blocks = getelementptr inbounds %struct.stat, %struct.stat* %stat326, i32 0, i32 10, !dbg !3588, !ctir !191
  %159 = load i64, i64* %st_blocks, align 8, !dbg !3588, !ctir !212
  store i64 %159, i64* %blocks, align 8, !dbg !3589
  %160 = load i32, i32* @format, align 4, !dbg !3590
  %cmp327 = icmp eq i32 %160, 0, !dbg !3592
  br i1 %cmp327, label %if.then332, label %lor.lhs.false329, !dbg !3593

lor.lhs.false329:                                 ; preds = %if.end325
  %161 = load i8, i8* @print_block_size, align 1, !dbg !3594
  %tobool330 = trunc i8 %161 to i1, !dbg !3594
  br i1 %tobool330, label %if.then332, label %if.end339, !dbg !3595

if.then332:                                       ; preds = %lor.lhs.false329, %if.end325
  call void @llvm.dbg.declare(metadata [652 x i8]* %buf, metadata !3596, metadata !DIExpression()), !dbg !3598
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3599, metadata !DIExpression()), !dbg !3600
  %162 = load i64, i64* %blocks, align 8, !dbg !3601
  %arraydecay = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !3602, !ctir !746
  %163 = load i32, i32* @human_output_opts, align 4, !dbg !3603
  %164 = load i64, i64* @output_block_size, align 8, !dbg !3604
  %call333 = call i8* @human_readable(i64 %162, i8* %arraydecay, i32 %163, i64 512, i64 %164), !dbg !3605
  %call334 = call i32 @gnu_mbswidth(i8* %call333, i32 0), !dbg !3606
  store i32 %call334, i32* %len, align 4, !dbg !3600
  %165 = load i32, i32* @block_size_width, align 4, !dbg !3607
  %166 = load i32, i32* %len, align 4, !dbg !3609
  %cmp335 = icmp slt i32 %165, %166, !dbg !3610
  br i1 %cmp335, label %if.then337, label %if.end338, !dbg !3611

if.then337:                                       ; preds = %if.then332
  %167 = load i32, i32* %len, align 4, !dbg !3612
  store i32 %167, i32* @block_size_width, align 4, !dbg !3613
  br label %if.end338, !dbg !3614

if.end338:                                        ; preds = %if.then337, %if.then332
  br label %if.end339, !dbg !3615

if.end339:                                        ; preds = %if.end338, %lor.lhs.false329
  %168 = load i32, i32* @format, align 4, !dbg !3616
  %cmp340 = icmp eq i32 %168, 0, !dbg !3618
  br i1 %cmp340, label %if.then342, label %if.end374, !dbg !3619

if.then342:                                       ; preds = %if.end339
  %169 = load i8, i8* @print_owner, align 1, !dbg !3620
  %tobool343 = trunc i8 %169 to i1, !dbg !3620
  br i1 %tobool343, label %if.then344, label %if.end352, !dbg !3623

if.then344:                                       ; preds = %if.then342
  call void @llvm.dbg.declare(metadata i32* %len345, metadata !3624, metadata !DIExpression()), !dbg !3626
  %170 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3627
  %stat346 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %170, i32 0, i32 3, !dbg !3628, !ctir !185
  %st_uid = getelementptr inbounds %struct.stat, %struct.stat* %stat346, i32 0, i32 4, !dbg !3629, !ctir !191
  %171 = load i32, i32* %st_uid, align 4, !dbg !3629, !ctir !203
  %call347 = call i32 @format_user_width(i32 %171), !dbg !3630
  store i32 %call347, i32* %len345, align 4, !dbg !3626
  %172 = load i32, i32* @owner_width, align 4, !dbg !3631
  %173 = load i32, i32* %len345, align 4, !dbg !3633
  %cmp348 = icmp slt i32 %172, %173, !dbg !3634
  br i1 %cmp348, label %if.then350, label %if.end351, !dbg !3635

if.then350:                                       ; preds = %if.then344
  %174 = load i32, i32* %len345, align 4, !dbg !3636
  store i32 %174, i32* @owner_width, align 4, !dbg !3637
  br label %if.end351, !dbg !3638

if.end351:                                        ; preds = %if.then350, %if.then344
  br label %if.end352, !dbg !3639

if.end352:                                        ; preds = %if.end351, %if.then342
  %175 = load i8, i8* @print_group, align 1, !dbg !3640
  %tobool353 = trunc i8 %175 to i1, !dbg !3640
  br i1 %tobool353, label %if.then354, label %if.end362, !dbg !3642

if.then354:                                       ; preds = %if.end352
  call void @llvm.dbg.declare(metadata i32* %len355, metadata !3643, metadata !DIExpression()), !dbg !3645
  %176 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3646
  %stat356 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %176, i32 0, i32 3, !dbg !3647, !ctir !185
  %st_gid = getelementptr inbounds %struct.stat, %struct.stat* %stat356, i32 0, i32 5, !dbg !3648, !ctir !191
  %177 = load i32, i32* %st_gid, align 8, !dbg !3648, !ctir !205
  %call357 = call i32 @format_group_width(i32 %177), !dbg !3649
  store i32 %call357, i32* %len355, align 4, !dbg !3645
  %178 = load i32, i32* @group_width, align 4, !dbg !3650
  %179 = load i32, i32* %len355, align 4, !dbg !3652
  %cmp358 = icmp slt i32 %178, %179, !dbg !3653
  br i1 %cmp358, label %if.then360, label %if.end361, !dbg !3654

if.then360:                                       ; preds = %if.then354
  %180 = load i32, i32* %len355, align 4, !dbg !3655
  store i32 %180, i32* @group_width, align 4, !dbg !3656
  br label %if.end361, !dbg !3657

if.end361:                                        ; preds = %if.then360, %if.then354
  br label %if.end362, !dbg !3658

if.end362:                                        ; preds = %if.end361, %if.end352
  %181 = load i8, i8* @print_author, align 1, !dbg !3659
  %tobool363 = trunc i8 %181 to i1, !dbg !3659
  br i1 %tobool363, label %if.then364, label %if.end373, !dbg !3661

if.then364:                                       ; preds = %if.end362
  call void @llvm.dbg.declare(metadata i32* %len365, metadata !3662, metadata !DIExpression()), !dbg !3664
  %182 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3665
  %stat366 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %182, i32 0, i32 3, !dbg !3666, !ctir !185
  %st_uid367 = getelementptr inbounds %struct.stat, %struct.stat* %stat366, i32 0, i32 4, !dbg !3667, !ctir !191
  %183 = load i32, i32* %st_uid367, align 4, !dbg !3667, !ctir !203
  %call368 = call i32 @format_user_width(i32 %183), !dbg !3668
  store i32 %call368, i32* %len365, align 4, !dbg !3664
  %184 = load i32, i32* @author_width, align 4, !dbg !3669
  %185 = load i32, i32* %len365, align 4, !dbg !3671
  %cmp369 = icmp slt i32 %184, %185, !dbg !3672
  br i1 %cmp369, label %if.then371, label %if.end372, !dbg !3673

if.then371:                                       ; preds = %if.then364
  %186 = load i32, i32* %len365, align 4, !dbg !3674
  store i32 %186, i32* @author_width, align 4, !dbg !3675
  br label %if.end372, !dbg !3676

if.end372:                                        ; preds = %if.then371, %if.then364
  br label %if.end373, !dbg !3677

if.end373:                                        ; preds = %if.end372, %if.end362
  br label %if.end374, !dbg !3678

if.end374:                                        ; preds = %if.end373, %if.end339
  %187 = load i8, i8* @print_scontext, align 1, !dbg !3679
  %tobool375 = trunc i8 %187 to i1, !dbg !3679
  br i1 %tobool375, label %if.then376, label %if.end385, !dbg !3681

if.then376:                                       ; preds = %if.end374
  call void @llvm.dbg.declare(metadata i32* %len377, metadata !3682, metadata !DIExpression()), !dbg !3684
  %188 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3685
  %scontext378 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %188, i32 0, i32 6, !dbg !3686, !ctir !185
  %189 = load i8*, i8** %scontext378, align 8, !dbg !3686, !ctir !143
  %call379 = call i64 @strlen(i8* %189) #16, !dbg !3687
  %conv380 = trunc i64 %call379 to i32, !dbg !3687
  store i32 %conv380, i32* %len377, align 4, !dbg !3684
  %190 = load i32, i32* @scontext_width, align 4, !dbg !3688
  %191 = load i32, i32* %len377, align 4, !dbg !3690
  %cmp381 = icmp slt i32 %190, %191, !dbg !3691
  br i1 %cmp381, label %if.then383, label %if.end384, !dbg !3692

if.then383:                                       ; preds = %if.then376
  %192 = load i32, i32* %len377, align 4, !dbg !3693
  store i32 %192, i32* @scontext_width, align 4, !dbg !3694
  br label %if.end384, !dbg !3695

if.end384:                                        ; preds = %if.then383, %if.then376
  br label %if.end385, !dbg !3696

if.end385:                                        ; preds = %if.end384, %if.end374
  %193 = load i32, i32* @format, align 4, !dbg !3697
  %cmp386 = icmp eq i32 %193, 0, !dbg !3699
  br i1 %cmp386, label %if.then388, label %if.end454, !dbg !3700

if.then388:                                       ; preds = %if.end385
  call void @llvm.dbg.declare(metadata [21 x i8]* %b, metadata !3701, metadata !DIExpression()), !dbg !3703
  call void @llvm.dbg.declare(metadata i32* %b_len, metadata !3704, metadata !DIExpression()), !dbg !3705
  %194 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3706
  %stat389 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %194, i32 0, i32 3, !dbg !3707, !ctir !185
  %st_nlink = getelementptr inbounds %struct.stat, %struct.stat* %stat389, i32 0, i32 2, !dbg !3708, !ctir !191
  %195 = load i64, i64* %st_nlink, align 8, !dbg !3708, !ctir !199
  %arraydecay390 = getelementptr inbounds [21 x i8], [21 x i8]* %b, i64 0, i64 0, !dbg !3709, !ctir !743
  %call391 = call i8* @umaxtostr(i64 %195, i8* %arraydecay390), !dbg !3710
  %call392 = call i64 @strlen(i8* %call391) #16, !dbg !3711
  %conv393 = trunc i64 %call392 to i32, !dbg !3711
  store i32 %conv393, i32* %b_len, align 4, !dbg !3705
  %196 = load i32, i32* @nlink_width, align 4, !dbg !3712
  %197 = load i32, i32* %b_len, align 4, !dbg !3714
  %cmp394 = icmp slt i32 %196, %197, !dbg !3715
  br i1 %cmp394, label %if.then396, label %if.end397, !dbg !3716

if.then396:                                       ; preds = %if.then388
  %198 = load i32, i32* %b_len, align 4, !dbg !3717
  store i32 %198, i32* @nlink_width, align 4, !dbg !3718
  br label %if.end397, !dbg !3719

if.end397:                                        ; preds = %if.then396, %if.then388
  %199 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3720
  %stat398 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %199, i32 0, i32 3, !dbg !3720, !ctir !185
  %st_mode399 = getelementptr inbounds %struct.stat, %struct.stat* %stat398, i32 0, i32 3, !dbg !3720, !ctir !191
  %200 = load i32, i32* %st_mode399, align 8, !dbg !3720, !ctir !201
  %and400 = and i32 %200, 61440, !dbg !3720
  %cmp401 = icmp eq i32 %and400, 8192, !dbg !3720
  br i1 %cmp401, label %if.then409, label %lor.lhs.false403, !dbg !3722

lor.lhs.false403:                                 ; preds = %if.end397
  %201 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3723
  %stat404 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %201, i32 0, i32 3, !dbg !3723, !ctir !185
  %st_mode405 = getelementptr inbounds %struct.stat, %struct.stat* %stat404, i32 0, i32 3, !dbg !3723, !ctir !191
  %202 = load i32, i32* %st_mode405, align 8, !dbg !3723, !ctir !201
  %and406 = and i32 %202, 61440, !dbg !3723
  %cmp407 = icmp eq i32 %and406, 24576, !dbg !3723
  br i1 %cmp407, label %if.then409, label %if.else441, !dbg !3724

if.then409:                                       ; preds = %lor.lhs.false403, %if.end397
  call void @llvm.dbg.declare(metadata [21 x i8]* %buf410, metadata !3725, metadata !DIExpression()), !dbg !3727
  call void @llvm.dbg.declare(metadata i32* %len411, metadata !3728, metadata !DIExpression()), !dbg !3729
  %203 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3730
  %stat412 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %203, i32 0, i32 3, !dbg !3730, !ctir !185
  %st_rdev = getelementptr inbounds %struct.stat, %struct.stat* %stat412, i32 0, i32 7, !dbg !3730, !ctir !191
  %204 = load i64, i64* %st_rdev, align 8, !dbg !3730, !ctir !195
  %call413 = call i32 @gnu_dev_major(i64 %204) #17, !dbg !3730
  %conv414 = zext i32 %call413 to i64, !dbg !3730
  %arraydecay415 = getelementptr inbounds [21 x i8], [21 x i8]* %buf410, i64 0, i64 0, !dbg !3731, !ctir !743
  %call416 = call i8* @umaxtostr(i64 %conv414, i8* %arraydecay415), !dbg !3732
  %call417 = call i64 @strlen(i8* %call416) #16, !dbg !3733
  %conv418 = trunc i64 %call417 to i32, !dbg !3733
  store i32 %conv418, i32* %len411, align 4, !dbg !3729
  %205 = load i32, i32* @major_device_number_width, align 4, !dbg !3734
  %206 = load i32, i32* %len411, align 4, !dbg !3736
  %cmp419 = icmp slt i32 %205, %206, !dbg !3737
  br i1 %cmp419, label %if.then421, label %if.end422, !dbg !3738

if.then421:                                       ; preds = %if.then409
  %207 = load i32, i32* %len411, align 4, !dbg !3739
  store i32 %207, i32* @major_device_number_width, align 4, !dbg !3740
  br label %if.end422, !dbg !3741

if.end422:                                        ; preds = %if.then421, %if.then409
  %208 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3742
  %stat423 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %208, i32 0, i32 3, !dbg !3742, !ctir !185
  %st_rdev424 = getelementptr inbounds %struct.stat, %struct.stat* %stat423, i32 0, i32 7, !dbg !3742, !ctir !191
  %209 = load i64, i64* %st_rdev424, align 8, !dbg !3742, !ctir !195
  %call425 = call i32 @gnu_dev_minor(i64 %209) #17, !dbg !3742
  %conv426 = zext i32 %call425 to i64, !dbg !3742
  %arraydecay427 = getelementptr inbounds [21 x i8], [21 x i8]* %buf410, i64 0, i64 0, !dbg !3743, !ctir !743
  %call428 = call i8* @umaxtostr(i64 %conv426, i8* %arraydecay427), !dbg !3744
  %call429 = call i64 @strlen(i8* %call428) #16, !dbg !3745
  %conv430 = trunc i64 %call429 to i32, !dbg !3745
  store i32 %conv430, i32* %len411, align 4, !dbg !3746
  %210 = load i32, i32* @minor_device_number_width, align 4, !dbg !3747
  %211 = load i32, i32* %len411, align 4, !dbg !3749
  %cmp431 = icmp slt i32 %210, %211, !dbg !3750
  br i1 %cmp431, label %if.then433, label %if.end434, !dbg !3751

if.then433:                                       ; preds = %if.end422
  %212 = load i32, i32* %len411, align 4, !dbg !3752
  store i32 %212, i32* @minor_device_number_width, align 4, !dbg !3753
  br label %if.end434, !dbg !3754

if.end434:                                        ; preds = %if.then433, %if.end422
  %213 = load i32, i32* @major_device_number_width, align 4, !dbg !3755
  %add435 = add nsw i32 %213, 2, !dbg !3756
  %214 = load i32, i32* @minor_device_number_width, align 4, !dbg !3757
  %add436 = add nsw i32 %add435, %214, !dbg !3758
  store i32 %add436, i32* %len411, align 4, !dbg !3759
  %215 = load i32, i32* @file_size_width, align 4, !dbg !3760
  %216 = load i32, i32* %len411, align 4, !dbg !3762
  %cmp437 = icmp slt i32 %215, %216, !dbg !3763
  br i1 %cmp437, label %if.then439, label %if.end440, !dbg !3764

if.then439:                                       ; preds = %if.end434
  %217 = load i32, i32* %len411, align 4, !dbg !3765
  store i32 %217, i32* @file_size_width, align 4, !dbg !3766
  br label %if.end440, !dbg !3767

if.end440:                                        ; preds = %if.then439, %if.end434
  br label %if.end453, !dbg !3768

if.else441:                                       ; preds = %lor.lhs.false403
  call void @llvm.dbg.declare(metadata [652 x i8]* %buf442, metadata !3769, metadata !DIExpression()), !dbg !3771
  call void @llvm.dbg.declare(metadata i64* %size, metadata !3772, metadata !DIExpression()), !dbg !3773
  %218 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3774
  %stat443 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %218, i32 0, i32 3, !dbg !3775, !ctir !185
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %stat443, i32 0, i32 8, !dbg !3776, !ctir !191
  %219 = load i64, i64* %st_size, align 8, !dbg !3776, !ctir !179
  %call444 = call i64 @unsigned_file_size(i64 %219), !dbg !3777
  store i64 %call444, i64* %size, align 8, !dbg !3773
  call void @llvm.dbg.declare(metadata i32* %len445, metadata !3778, metadata !DIExpression()), !dbg !3779
  %220 = load i64, i64* %size, align 8, !dbg !3780
  %arraydecay446 = getelementptr inbounds [652 x i8], [652 x i8]* %buf442, i64 0, i64 0, !dbg !3781, !ctir !746
  %221 = load i32, i32* @file_human_output_opts, align 4, !dbg !3782
  %222 = load i64, i64* @file_output_block_size, align 8, !dbg !3783
  %call447 = call i8* @human_readable(i64 %220, i8* %arraydecay446, i32 %221, i64 1, i64 %222), !dbg !3784
  %call448 = call i32 @gnu_mbswidth(i8* %call447, i32 0), !dbg !3785
  store i32 %call448, i32* %len445, align 4, !dbg !3779
  %223 = load i32, i32* @file_size_width, align 4, !dbg !3786
  %224 = load i32, i32* %len445, align 4, !dbg !3788
  %cmp449 = icmp slt i32 %223, %224, !dbg !3789
  br i1 %cmp449, label %if.then451, label %if.end452, !dbg !3790

if.then451:                                       ; preds = %if.else441
  %225 = load i32, i32* %len445, align 4, !dbg !3791
  store i32 %225, i32* @file_size_width, align 4, !dbg !3792
  br label %if.end452, !dbg !3793

if.end452:                                        ; preds = %if.then451, %if.else441
  br label %if.end453

if.end453:                                        ; preds = %if.end452, %if.end440
  br label %if.end454, !dbg !3794

if.end454:                                        ; preds = %if.end453, %if.end385
  br label %if.end455, !dbg !3795

if.end455:                                        ; preds = %if.end454, %lor.lhs.false91, %lor.lhs.false79, %lor.lhs.false73, %lor.lhs.false64
  %226 = load i8, i8* @print_inode, align 1, !dbg !3796
  %tobool456 = trunc i8 %226 to i1, !dbg !3796
  br i1 %tobool456, label %if.then457, label %if.end470, !dbg !3798

if.then457:                                       ; preds = %if.end455
  call void @llvm.dbg.declare(metadata [21 x i8]* %buf458, metadata !3799, metadata !DIExpression()), !dbg !3801
  call void @llvm.dbg.declare(metadata i32* %len459, metadata !3802, metadata !DIExpression()), !dbg !3803
  %227 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3804
  %stat460 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %227, i32 0, i32 3, !dbg !3805, !ctir !185
  %st_ino461 = getelementptr inbounds %struct.stat, %struct.stat* %stat460, i32 0, i32 1, !dbg !3806, !ctir !191
  %228 = load i64, i64* %st_ino461, align 8, !dbg !3806, !ctir !197
  %arraydecay462 = getelementptr inbounds [21 x i8], [21 x i8]* %buf458, i64 0, i64 0, !dbg !3807, !ctir !743
  %call463 = call i8* @umaxtostr(i64 %228, i8* %arraydecay462), !dbg !3808
  %call464 = call i64 @strlen(i8* %call463) #16, !dbg !3809
  %conv465 = trunc i64 %call464 to i32, !dbg !3809
  store i32 %conv465, i32* %len459, align 4, !dbg !3803
  %229 = load i32, i32* @inode_number_width, align 4, !dbg !3810
  %230 = load i32, i32* %len459, align 4, !dbg !3812
  %cmp466 = icmp slt i32 %229, %230, !dbg !3813
  br i1 %cmp466, label %if.then468, label %if.end469, !dbg !3814

if.then468:                                       ; preds = %if.then457
  %231 = load i32, i32* %len459, align 4, !dbg !3815
  store i32 %231, i32* @inode_number_width, align 4, !dbg !3816
  br label %if.end469, !dbg !3817

if.end469:                                        ; preds = %if.then468, %if.then457
  br label %if.end470, !dbg !3818

if.end470:                                        ; preds = %if.end469, %if.end455
  %232 = load i8*, i8** %name.addr, align 8, !dbg !3819
  %call471 = call noalias i8* @xstrdup(i8* %232), !dbg !3820
  %233 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3821
  %name472 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %233, i32 0, i32 0, !dbg !3822, !ctir !185
  store i8* %call471, i8** %name472, align 8, !dbg !3823, !ctir !143
  %234 = load i64, i64* @cwd_n_used, align 8, !dbg !3824
  %inc473 = add i64 %234, 1, !dbg !3824
  store i64 %inc473, i64* @cwd_n_used, align 8, !dbg !3824
  %235 = load i64, i64* %blocks, align 8, !dbg !3825
  store i64 %235, i64* %retval, align 8, !dbg !3826
  br label %return, !dbg !3826

return:                                           ; preds = %if.end470, %if.end154, %if.then153
  %236 = load i64, i64* %retval, align 8, !dbg !3827
  ret i64 %236, !dbg !3827
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_directory(i8* %name, i8* %realname, i1 zeroext %command_line_arg) #0 !dbg !3828 {
entry:
  %name.addr = alloca i8*, align 8
  %realname.addr = alloca i8*, align 8
  %command_line_arg.addr = alloca i8, align 1
  %new = alloca %struct.pending*, align 8, !ctir !235
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3829, metadata !DIExpression()), !dbg !3830
  store i8* %realname, i8** %realname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %realname.addr, metadata !3831, metadata !DIExpression()), !dbg !3832
  %frombool = zext i1 %command_line_arg to i8
  store i8 %frombool, i8* %command_line_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %command_line_arg.addr, metadata !3833, metadata !DIExpression()), !dbg !3834
  call void @llvm.dbg.declare(metadata %struct.pending** %new, metadata !3835, metadata !DIExpression()), !dbg !3836
  %call = call noalias i8* @xmalloc(i64 32), !dbg !3837
  %0 = bitcast i8* %call to %struct.pending*, !dbg !3837
  store %struct.pending* %0, %struct.pending** %new, align 8, !dbg !3836
  %1 = load i8*, i8** %realname.addr, align 8, !dbg !3838
  %tobool = icmp ne i8* %1, null, !dbg !3838
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3838

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %realname.addr, align 8, !dbg !3839
  %call1 = call noalias i8* @xstrdup(i8* %2), !dbg !3840
  br label %cond.end, !dbg !3838

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !3838
  %3 = load %struct.pending*, %struct.pending** %new, align 8, !dbg !3841
  %realname2 = getelementptr inbounds %struct.pending, %struct.pending* %3, i32 0, i32 1, !dbg !3842, !ctir !236
  store i8* %cond, i8** %realname2, align 8, !dbg !3843, !ctir !143
  %4 = load i8*, i8** %name.addr, align 8, !dbg !3844
  %tobool3 = icmp ne i8* %4, null, !dbg !3844
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !3844

cond.true4:                                       ; preds = %cond.end
  %5 = load i8*, i8** %name.addr, align 8, !dbg !3845
  %call5 = call noalias i8* @xstrdup(i8* %5), !dbg !3846
  br label %cond.end7, !dbg !3844

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !3844

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi i8* [ %call5, %cond.true4 ], [ null, %cond.false6 ], !dbg !3844
  %6 = load %struct.pending*, %struct.pending** %new, align 8, !dbg !3847
  %name9 = getelementptr inbounds %struct.pending, %struct.pending* %6, i32 0, i32 0, !dbg !3848, !ctir !236
  store i8* %cond8, i8** %name9, align 8, !dbg !3849, !ctir !143
  %7 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3850
  %tobool10 = trunc i8 %7 to i1, !dbg !3850
  %8 = load %struct.pending*, %struct.pending** %new, align 8, !dbg !3851
  %command_line_arg11 = getelementptr inbounds %struct.pending, %struct.pending* %8, i32 0, i32 2, !dbg !3852, !ctir !236
  %frombool12 = zext i1 %tobool10 to i8, !dbg !3853
  store i8 %frombool12, i8* %command_line_arg11, align 8, !dbg !3853, !ctir !141
  %9 = load %struct.pending*, %struct.pending** @pending_dirs, align 8, !dbg !3854
  %10 = load %struct.pending*, %struct.pending** %new, align 8, !dbg !3855
  %next = getelementptr inbounds %struct.pending, %struct.pending* %10, i32 0, i32 3, !dbg !3856, !ctir !236
  store %struct.pending* %9, %struct.pending** %next, align 8, !dbg !3857, !ctir !235
  %11 = load %struct.pending*, %struct.pending** %new, align 8, !dbg !3858
  store %struct.pending* %11, %struct.pending** @pending_dirs, align 8, !dbg !3859
  ret void, !dbg !3860
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sort_files() #0 !dbg !3861 {
entry:
  %use_strcmp = alloca i8, align 1, !ctir !141
  call void @llvm.dbg.declare(metadata i8* %use_strcmp, metadata !3862, metadata !DIExpression()), !dbg !3863
  %0 = load i64, i64* @sorted_file_alloc, align 8, !dbg !3864
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !3866
  %2 = load i64, i64* @cwd_n_used, align 8, !dbg !3867
  %div = udiv i64 %2, 2, !dbg !3868
  %add = add i64 %1, %div, !dbg !3869
  %cmp = icmp ult i64 %0, %add, !dbg !3870
  br i1 %cmp, label %if.then, label %if.end, !dbg !3871

if.then:                                          ; preds = %entry
  %3 = load i8**, i8*** @sorted_file, align 8, !dbg !3872
  %4 = bitcast i8** %3 to i8*, !dbg !3872
  call void @free(i8* %4) #13, !dbg !3874
  %5 = load i64, i64* @cwd_n_used, align 8, !dbg !3875
  %call = call noalias i8* @xnmalloc(i64 %5, i64 24), !dbg !3876
  %6 = bitcast i8* %call to i8**, !dbg !3876
  store i8** %6, i8*** @sorted_file, align 8, !dbg !3877
  %7 = load i64, i64* @cwd_n_used, align 8, !dbg !3878
  %mul = mul i64 3, %7, !dbg !3879
  store i64 %mul, i64* @sorted_file_alloc, align 8, !dbg !3880
  br label %if.end, !dbg !3881

if.end:                                           ; preds = %if.then, %entry
  call void @initialize_ordering_vector(), !dbg !3882
  %8 = load i32, i32* @sort_type, align 4, !dbg !3883
  %cmp1 = icmp eq i32 %8, -1, !dbg !3885
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3886

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !3887

if.end3:                                          ; preds = %if.end
  %call4 = call i32 @_setjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @failed_strcoll, i64 0, i64 0)) #18, !dbg !3888
  %tobool = icmp ne i32 %call4, 0, !dbg !3888
  br i1 %tobool, label %if.else, label %if.then5, !dbg !3890

if.then5:                                         ; preds = %if.end3
  store i8 0, i8* %use_strcmp, align 1, !dbg !3891
  br label %if.end10, !dbg !3892

if.else:                                          ; preds = %if.end3
  store i8 1, i8* %use_strcmp, align 1, !dbg !3893
  %9 = load i32, i32* @sort_type, align 4, !dbg !3895
  %cmp6 = icmp ne i32 %9, 3, !dbg !3895
  br i1 %cmp6, label %if.then7, label %if.else8, !dbg !3898

if.then7:                                         ; preds = %if.else
  br label %if.end9, !dbg !3898

if.else8:                                         ; preds = %if.else
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.222, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 3818, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__PRETTY_FUNCTION__.sort_files, i64 0, i64 0)) #15, !dbg !3895
  unreachable, !dbg !3895

if.end9:                                          ; preds = %if.then7
  call void @initialize_ordering_vector(), !dbg !3899
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then5
  %10 = load i8**, i8*** @sorted_file, align 8, !dbg !3900
  %11 = load i64, i64* @cwd_n_used, align 8, !dbg !3901
  %12 = load i32, i32* @sort_type, align 4, !dbg !3902
  %13 = load i32, i32* @sort_type, align 4, !dbg !3903
  %cmp11 = icmp eq i32 %13, 4, !dbg !3904
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !3903

cond.true:                                        ; preds = %if.end10
  %14 = load i32, i32* @time_type, align 4, !dbg !3905
  br label %cond.end, !dbg !3903

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !3903

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 0, %cond.false ], !dbg !3903
  %add12 = add i32 %12, %cond, !dbg !3906
  %idxprom = zext i32 %add12 to i64, !dbg !3907
  %arrayidx = getelementptr inbounds [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]], [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]]* @sort_functions, i64 0, i64 %idxprom, !dbg !3907, !ctir !791
  %15 = load i8, i8* %use_strcmp, align 1, !dbg !3908
  %tobool13 = trunc i8 %15 to i1, !dbg !3908
  %idxprom14 = zext i1 %tobool13 to i64, !dbg !3907
  %arrayidx15 = getelementptr inbounds [2 x [2 x [2 x i32 (i8*, i8*)*]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]]* %arrayidx, i64 0, i64 %idxprom14, !dbg !3907, !ctir !799
  %16 = load i8, i8* @sort_reverse, align 1, !dbg !3909
  %tobool16 = trunc i8 %16 to i1, !dbg !3909
  %idxprom17 = zext i1 %tobool16 to i64, !dbg !3907
  %arrayidx18 = getelementptr inbounds [2 x [2 x i32 (i8*, i8*)*]], [2 x [2 x i32 (i8*, i8*)*]]* %arrayidx15, i64 0, i64 %idxprom17, !dbg !3907, !ctir !801
  %17 = load i8, i8* @directories_first, align 1, !dbg !3910
  %tobool19 = trunc i8 %17 to i1, !dbg !3910
  %idxprom20 = zext i1 %tobool19 to i64, !dbg !3907
  %arrayidx21 = getelementptr inbounds [2 x i32 (i8*, i8*)*], [2 x i32 (i8*, i8*)*]* %arrayidx18, i64 0, i64 %idxprom20, !dbg !3907, !ctir !803
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %arrayidx21, align 8, !dbg !3907
  call void @mpsort(i8** %10, i64 %11, i32 (i8*, i8*)* %18), !dbg !3911
  br label %return, !dbg !3912

return:                                           ; preds = %cond.end, %if.then2
  ret void, !dbg !3912
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @extract_dirs_from_files(i8* %dirname, i1 zeroext %command_line_arg) #0 !dbg !3913 {
entry:
  %dirname.addr = alloca i8*, align 8
  %command_line_arg.addr = alloca i8, align 1
  %i = alloca i64, align 8, !ctir !149
  %j = alloca i64, align 8, !ctir !149
  %ignore_dot_and_dot_dot = alloca i8, align 1, !ctir !141
  %f = alloca %struct.fileinfo*, align 8, !ctir !260
  %name17 = alloca i8*, align 8, !ctir !143
  %f32 = alloca %struct.fileinfo*, align 8, !ctir !260
  store i8* %dirname, i8** %dirname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dirname.addr, metadata !3916, metadata !DIExpression()), !dbg !3917
  %frombool = zext i1 %command_line_arg to i8
  store i8 %frombool, i8* %command_line_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %command_line_arg.addr, metadata !3918, metadata !DIExpression()), !dbg !3919
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3920, metadata !DIExpression()), !dbg !3921
  call void @llvm.dbg.declare(metadata i64* %j, metadata !3922, metadata !DIExpression()), !dbg !3923
  call void @llvm.dbg.declare(metadata i8* %ignore_dot_and_dot_dot, metadata !3924, metadata !DIExpression()), !dbg !3925
  %0 = load i8*, i8** %dirname.addr, align 8, !dbg !3926
  %cmp = icmp ne i8* %0, null, !dbg !3927
  %frombool1 = zext i1 %cmp to i8, !dbg !3925
  store i8 %frombool1, i8* %ignore_dot_and_dot_dot, align 1, !dbg !3925
  %1 = load i8*, i8** %dirname.addr, align 8, !dbg !3928
  %tobool = icmp ne i8* %1, null, !dbg !3928
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3930

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !3931
  %tobool2 = icmp ne %struct.hash_table* %2, null, !dbg !3931
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3932

if.then:                                          ; preds = %land.lhs.true
  %3 = load i8*, i8** %dirname.addr, align 8, !dbg !3933
  call void @queue_directory(i8* null, i8* %3, i1 zeroext false), !dbg !3935
  br label %if.end, !dbg !3936

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load i64, i64* @cwd_n_used, align 8, !dbg !3937
  store i64 %4, i64* %i, align 8, !dbg !3939
  br label %for.cond, !dbg !3940

for.cond:                                         ; preds = %if.end27, %if.end
  %5 = load i64, i64* %i, align 8, !dbg !3941
  %dec = add i64 %5, -1, !dbg !3941
  store i64 %dec, i64* %i, align 8, !dbg !3941
  %cmp3 = icmp ne i64 %5, 0, !dbg !3943
  br i1 %cmp3, label %for.body, label %for.end, !dbg !3944

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !3945, metadata !DIExpression()), !dbg !3947
  %6 = load i8**, i8*** @sorted_file, align 8, !dbg !3948
  %7 = load i64, i64* %i, align 8, !dbg !3949
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %7, !dbg !3948, !ctir !767
  %8 = load i8*, i8** %arrayidx, align 8, !dbg !3948
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !3948
  store %struct.fileinfo* %9, %struct.fileinfo** %f, align 8, !dbg !3947
  %10 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3950
  %call = call zeroext i1 @is_directory(%struct.fileinfo* %10), !dbg !3952
  br i1 %call, label %land.lhs.true4, label %if.end27, !dbg !3953

land.lhs.true4:                                   ; preds = %for.body
  %11 = load i8, i8* %ignore_dot_and_dot_dot, align 1, !dbg !3954
  %tobool5 = trunc i8 %11 to i1, !dbg !3954
  br i1 %tobool5, label %lor.lhs.false, label %if.then7, !dbg !3955

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %12 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3956
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 0, !dbg !3957, !ctir !185
  %13 = load i8*, i8** %name, align 8, !dbg !3957, !ctir !143
  %call6 = call zeroext i1 @basename_is_dot_or_dotdot(i8* %13), !dbg !3958
  br i1 %call6, label %if.end27, label %if.then7, !dbg !3959

if.then7:                                         ; preds = %lor.lhs.false, %land.lhs.true4
  %14 = load i8*, i8** %dirname.addr, align 8, !dbg !3960
  %tobool8 = icmp ne i8* %14, null, !dbg !3960
  br i1 %tobool8, label %lor.lhs.false9, label %if.then14, !dbg !3963

lor.lhs.false9:                                   ; preds = %if.then7
  %15 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3964
  %name10 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %15, i32 0, i32 0, !dbg !3965, !ctir !185
  %16 = load i8*, i8** %name10, align 8, !dbg !3965, !ctir !143
  %arrayidx11 = getelementptr inbounds i8, i8* %16, i64 0, !dbg !3964, !ctir !143
  %17 = load i8, i8* %arrayidx11, align 1, !dbg !3964
  %conv = sext i8 %17 to i32, !dbg !3964
  %cmp12 = icmp eq i32 %conv, 47, !dbg !3966
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !3967

if.then14:                                        ; preds = %lor.lhs.false9, %if.then7
  %18 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3968
  %name15 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 0, !dbg !3969, !ctir !185
  %19 = load i8*, i8** %name15, align 8, !dbg !3969, !ctir !143
  %20 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3970
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i32 0, i32 1, !dbg !3971, !ctir !185
  %21 = load i8*, i8** %linkname, align 8, !dbg !3971, !ctir !143
  %22 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3972
  %tobool16 = trunc i8 %22 to i1, !dbg !3972
  call void @queue_directory(i8* %19, i8* %21, i1 zeroext %tobool16), !dbg !3973
  br label %if.end22, !dbg !3973

if.else:                                          ; preds = %lor.lhs.false9
  call void @llvm.dbg.declare(metadata i8** %name17, metadata !3974, metadata !DIExpression()), !dbg !3976
  %23 = load i8*, i8** %dirname.addr, align 8, !dbg !3977
  %24 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3978
  %name18 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %24, i32 0, i32 0, !dbg !3979, !ctir !185
  %25 = load i8*, i8** %name18, align 8, !dbg !3979, !ctir !143
  %call19 = call i8* @file_name_concat(i8* %23, i8* %25, i8** null), !dbg !3980
  store i8* %call19, i8** %name17, align 8, !dbg !3976
  %26 = load i8*, i8** %name17, align 8, !dbg !3981
  %27 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3982
  %linkname20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %27, i32 0, i32 1, !dbg !3983, !ctir !185
  %28 = load i8*, i8** %linkname20, align 8, !dbg !3983, !ctir !143
  %29 = load i8, i8* %command_line_arg.addr, align 1, !dbg !3984
  %tobool21 = trunc i8 %29 to i1, !dbg !3984
  call void @queue_directory(i8* %26, i8* %28, i1 zeroext %tobool21), !dbg !3985
  %30 = load i8*, i8** %name17, align 8, !dbg !3986
  call void @free(i8* %30) #13, !dbg !3987
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then14
  %31 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3988
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %31, i32 0, i32 4, !dbg !3990, !ctir !185
  %32 = load i32, i32* %filetype, align 8, !dbg !3990, !ctir !36
  %cmp23 = icmp eq i32 %32, 9, !dbg !3991
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !3992

if.then25:                                        ; preds = %if.end22
  %33 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !3993
  call void @free_ent(%struct.fileinfo* %33), !dbg !3994
  br label %if.end26, !dbg !3994

if.end26:                                         ; preds = %if.then25, %if.end22
  br label %if.end27, !dbg !3995

if.end27:                                         ; preds = %if.end26, %lor.lhs.false, %for.body
  br label %for.cond, !dbg !3996, !llvm.loop !3997

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i, align 8, !dbg !3999
  store i64 0, i64* %j, align 8, !dbg !4001
  br label %for.cond28, !dbg !4002

for.cond28:                                       ; preds = %for.inc, %for.end
  %34 = load i64, i64* %i, align 8, !dbg !4003
  %35 = load i64, i64* @cwd_n_used, align 8, !dbg !4005
  %cmp29 = icmp ult i64 %34, %35, !dbg !4006
  br i1 %cmp29, label %for.body31, label %for.end39, !dbg !4007

for.body31:                                       ; preds = %for.cond28
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f32, metadata !4008, metadata !DIExpression()), !dbg !4010
  %36 = load i8**, i8*** @sorted_file, align 8, !dbg !4011
  %37 = load i64, i64* %i, align 8, !dbg !4012
  %arrayidx33 = getelementptr inbounds i8*, i8** %36, i64 %37, !dbg !4011, !ctir !767
  %38 = load i8*, i8** %arrayidx33, align 8, !dbg !4011
  %39 = bitcast i8* %38 to %struct.fileinfo*, !dbg !4011
  store %struct.fileinfo* %39, %struct.fileinfo** %f32, align 8, !dbg !4010
  %40 = load %struct.fileinfo*, %struct.fileinfo** %f32, align 8, !dbg !4013
  %41 = bitcast %struct.fileinfo* %40 to i8*, !dbg !4013
  %42 = load i8**, i8*** @sorted_file, align 8, !dbg !4014
  %43 = load i64, i64* %j, align 8, !dbg !4015
  %arrayidx34 = getelementptr inbounds i8*, i8** %42, i64 %43, !dbg !4014, !ctir !767
  store i8* %41, i8** %arrayidx34, align 8, !dbg !4016
  %44 = load %struct.fileinfo*, %struct.fileinfo** %f32, align 8, !dbg !4017
  %filetype35 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %44, i32 0, i32 4, !dbg !4018, !ctir !185
  %45 = load i32, i32* %filetype35, align 8, !dbg !4018, !ctir !36
  %cmp36 = icmp ne i32 %45, 9, !dbg !4019
  %conv37 = zext i1 %cmp36 to i32, !dbg !4019
  %conv38 = sext i32 %conv37 to i64, !dbg !4020
  %46 = load i64, i64* %j, align 8, !dbg !4021
  %add = add i64 %46, %conv38, !dbg !4021
  store i64 %add, i64* %j, align 8, !dbg !4021
  br label %for.inc, !dbg !4022

for.inc:                                          ; preds = %for.body31
  %47 = load i64, i64* %i, align 8, !dbg !4023
  %inc = add i64 %47, 1, !dbg !4023
  store i64 %inc, i64* %i, align 8, !dbg !4023
  br label %for.cond28, !dbg !4024, !llvm.loop !4025

for.end39:                                        ; preds = %for.cond28
  %48 = load i64, i64* %j, align 8, !dbg !4027
  store i64 %48, i64* @cwd_n_used, align 8, !dbg !4028
  ret void, !dbg !4029
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_current_files() #0 !dbg !4030 {
entry:
  %i = alloca i64, align 8, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4031, metadata !DIExpression()), !dbg !4032
  %0 = load i32, i32* @format, align 4, !dbg !4033
  switch i32 %0, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb8
    i32 0, label %sw.bb9
  ], !dbg !4034

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !4035
  br label %for.cond, !dbg !4038

for.cond:                                         ; preds = %for.inc, %sw.bb
  %1 = load i64, i64* %i, align 8, !dbg !4039
  %2 = load i64, i64* @cwd_n_used, align 8, !dbg !4041
  %cmp = icmp ult i64 %1, %2, !dbg !4042
  br i1 %cmp, label %for.body, label %for.end, !dbg !4043

for.body:                                         ; preds = %for.cond
  %3 = load i8**, i8*** @sorted_file, align 8, !dbg !4044
  %4 = load i64, i64* %i, align 8, !dbg !4046
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %4, !dbg !4044, !ctir !767
  %5 = load i8*, i8** %arrayidx, align 8, !dbg !4044
  %6 = bitcast i8* %5 to %struct.fileinfo*, !dbg !4044
  %call = call i64 @print_file_name_and_frills(%struct.fileinfo* %6, i64 0), !dbg !4047
  %call1 = call i32 @putchar_unlocked(i32 10), !dbg !4048
  br label %for.inc, !dbg !4049

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !4050
  %inc = add i64 %7, 1, !dbg !4050
  store i64 %inc, i64* %i, align 8, !dbg !4050
  br label %for.cond, !dbg !4051, !llvm.loop !4052

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !4054

sw.bb2:                                           ; preds = %entry
  %8 = load i64, i64* @line_length, align 8, !dbg !4055
  %tobool = icmp ne i64 %8, 0, !dbg !4055
  br i1 %tobool, label %if.else, label %if.then, !dbg !4057

if.then:                                          ; preds = %sw.bb2
  call void @print_with_separator(i8 signext 32), !dbg !4058
  br label %if.end, !dbg !4058

if.else:                                          ; preds = %sw.bb2
  call void @print_many_per_line(), !dbg !4059
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !4060

sw.bb3:                                           ; preds = %entry
  %9 = load i64, i64* @line_length, align 8, !dbg !4061
  %tobool4 = icmp ne i64 %9, 0, !dbg !4061
  br i1 %tobool4, label %if.else6, label %if.then5, !dbg !4063

if.then5:                                         ; preds = %sw.bb3
  call void @print_with_separator(i8 signext 32), !dbg !4064
  br label %if.end7, !dbg !4064

if.else6:                                         ; preds = %sw.bb3
  call void @print_horizontal(), !dbg !4065
  br label %if.end7

if.end7:                                          ; preds = %if.else6, %if.then5
  br label %sw.epilog, !dbg !4066

sw.bb8:                                           ; preds = %entry
  call void @print_with_separator(i8 signext 44), !dbg !4067
  br label %sw.epilog, !dbg !4068

sw.bb9:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !4069
  br label %for.cond10, !dbg !4071

for.cond10:                                       ; preds = %for.inc16, %sw.bb9
  %10 = load i64, i64* %i, align 8, !dbg !4072
  %11 = load i64, i64* @cwd_n_used, align 8, !dbg !4074
  %cmp11 = icmp ult i64 %10, %11, !dbg !4075
  br i1 %cmp11, label %for.body12, label %for.end18, !dbg !4076

for.body12:                                       ; preds = %for.cond10
  call void @set_normal_color(), !dbg !4077
  %12 = load i8**, i8*** @sorted_file, align 8, !dbg !4079
  %13 = load i64, i64* %i, align 8, !dbg !4080
  %arrayidx13 = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !4079, !ctir !767
  %14 = load i8*, i8** %arrayidx13, align 8, !dbg !4079
  %15 = bitcast i8* %14 to %struct.fileinfo*, !dbg !4079
  call void @print_long_format(%struct.fileinfo* %15), !dbg !4081
  br label %do.body, !dbg !4082

do.body:                                          ; preds = %for.body12
  %call14 = call i32 @putchar_unlocked(i32 10), !dbg !4083
  %16 = load i64, i64* @dired_pos, align 8, !dbg !4083
  %inc15 = add i64 %16, 1, !dbg !4083
  store i64 %inc15, i64* @dired_pos, align 8, !dbg !4083
  br label %do.end, !dbg !4083

do.end:                                           ; preds = %do.body
  br label %for.inc16, !dbg !4085

for.inc16:                                        ; preds = %do.end
  %17 = load i64, i64* %i, align 8, !dbg !4086
  %inc17 = add i64 %17, 1, !dbg !4086
  store i64 %inc17, i64* %i, align 8, !dbg !4086
  br label %for.cond10, !dbg !4087, !llvm.loop !4088

for.end18:                                        ; preds = %for.cond10
  br label %sw.epilog, !dbg !4090

sw.epilog:                                        ; preds = %entry, %for.end18, %sw.bb8, %if.end7, %if.end, %for.end
  ret void, !dbg !4091
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @dev_ino_pop() #0 !dbg !4092 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %vdi = alloca i8*, align 8, !ctir !167
  %di = alloca %struct.dev_ino*, align 8, !ctir !264
  %dev_ino_size = alloca i32, align 4, !ctir !27
  %__o = alloca %struct.obstack*, align 8, !ctir !456
  %tmp = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i8** %vdi, metadata !4095, metadata !DIExpression()), !dbg !4096
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %di, metadata !4097, metadata !DIExpression()), !dbg !4098
  call void @llvm.dbg.declare(metadata i32* %dev_ino_size, metadata !4099, metadata !DIExpression()), !dbg !4100
  store i32 16, i32* %dev_ino_size, align 4, !dbg !4100
  %0 = load i32, i32* %dev_ino_size, align 4, !dbg !4101
  %conv = sext i32 %0 to i64, !dbg !4101
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !4104, metadata !DIExpression()), !dbg !4106
  store %struct.obstack* @dev_ino_obstack, %struct.obstack** %__o, align 8, !dbg !4106
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4106
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 3, !dbg !4106, !ctir !457
  %2 = load i8*, i8** %next_free, align 8, !dbg !4106, !ctir !143
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4106
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 2, !dbg !4106, !ctir !457
  %4 = load i8*, i8** %object_base, align 8, !dbg !4106, !ctir !143
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !4106
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !4106
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4106
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !4106
  %5 = load i64, i64* %tmp, align 8, !dbg !4106
  %cmp = icmp ule i64 %conv, %5, !dbg !4101
  br i1 %cmp, label %if.then, label %if.else, !dbg !4107

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !4107

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1027, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__PRETTY_FUNCTION__.dev_ino_pop, i64 0, i64 0)) #15, !dbg !4101
  unreachable, !dbg !4101

if.end:                                           ; preds = %if.then
  %6 = load i32, i32* %dev_ino_size, align 4, !dbg !4108
  %sub = sub nsw i32 0, %6, !dbg !4108
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8, !dbg !4108, !ctir !143
  %idx.ext = sext i32 %sub to i64, !dbg !4108
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !4108, !ctir !144
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8, !dbg !4108, !ctir !143
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8, !dbg !4109, !ctir !143
  store i8* %8, i8** %vdi, align 8, !dbg !4110
  %9 = load i8*, i8** %vdi, align 8, !dbg !4111
  %10 = bitcast i8* %9 to %struct.dev_ino*, !dbg !4111
  store %struct.dev_ino* %10, %struct.dev_ino** %di, align 8, !dbg !4112
  %11 = load %struct.dev_ino*, %struct.dev_ino** %di, align 8, !dbg !4113
  %12 = bitcast %struct.dev_ino* %retval to i8*, !dbg !4114
  %13 = bitcast %struct.dev_ino* %11 to i8*, !dbg !4114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !4114
  %14 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !4115
  %15 = load { i64, i64 }, { i64, i64 }* %14, align 8, !dbg !4115
  ret { i64, i64 } %15, !dbg !4115
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_pending_ent(%struct.pending* %p) #0 !dbg !4116 {
entry:
  %p.addr = alloca %struct.pending*, align 8
  store %struct.pending* %p, %struct.pending** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pending** %p.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  %0 = load %struct.pending*, %struct.pending** %p.addr, align 8, !dbg !4121
  %name = getelementptr inbounds %struct.pending, %struct.pending* %0, i32 0, i32 0, !dbg !4122, !ctir !236
  %1 = load i8*, i8** %name, align 8, !dbg !4122, !ctir !143
  call void @free(i8* %1) #13, !dbg !4123
  %2 = load %struct.pending*, %struct.pending** %p.addr, align 8, !dbg !4124
  %realname = getelementptr inbounds %struct.pending, %struct.pending* %2, i32 0, i32 1, !dbg !4125, !ctir !236
  %3 = load i8*, i8** %realname, align 8, !dbg !4125, !ctir !143
  call void @free(i8* %3) #13, !dbg !4126
  %4 = load %struct.pending*, %struct.pending** %p.addr, align 8, !dbg !4127
  %5 = bitcast %struct.pending* %4 to i8*, !dbg !4127
  call void @free(i8* %5) #13, !dbg !4128
  ret void, !dbg !4129
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_dir(i8* %name, i8* %realname, i1 zeroext %command_line_arg) #0 !dbg !1019 {
entry:
  %name.addr = alloca i8*, align 8
  %realname.addr = alloca i8*, align 8
  %command_line_arg.addr = alloca i8, align 1
  %dirp = alloca %struct.__dirstream*, align 8, !ctir !725
  %next = alloca %struct.dirent*, align 8, !ctir !729
  %total_blocks = alloca i64, align 8, !ctir !168
  %dir_stat = alloca %struct.stat, align 8, !ctir !191
  %fd = alloca i32, align 4, !ctir !27
  %absolute_name = alloca i8*, align 8, !ctir !143
  %type = alloca i32, align 4, !ctir !36
  %p = alloca i8*, align 8, !ctir !146
  %buf = alloca [652 x i8], align 16, !ctir !746
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4130, metadata !DIExpression()), !dbg !4131
  store i8* %realname, i8** %realname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %realname.addr, metadata !4132, metadata !DIExpression()), !dbg !4133
  %frombool = zext i1 %command_line_arg to i8
  store i8 %frombool, i8* %command_line_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %command_line_arg.addr, metadata !4134, metadata !DIExpression()), !dbg !4135
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %dirp, metadata !4136, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.declare(metadata %struct.dirent** %next, metadata !4138, metadata !DIExpression()), !dbg !4139
  call void @llvm.dbg.declare(metadata i64* %total_blocks, metadata !4140, metadata !DIExpression()), !dbg !4141
  store i64 0, i64* %total_blocks, align 8, !dbg !4141
  %call = call i32* @__errno_location() #17, !dbg !4142
  store i32 0, i32* %call, align 4, !dbg !4143, !ctir !27
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4144
  %call1 = call %struct.__dirstream* @opendir(i8* %0), !dbg !4145
  store %struct.__dirstream* %call1, %struct.__dirstream** %dirp, align 8, !dbg !4146
  %1 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4147
  %tobool = icmp ne %struct.__dirstream* %1, null, !dbg !4147
  br i1 %tobool, label %if.end, label %if.then, !dbg !4149

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %command_line_arg.addr, align 1, !dbg !4150
  %tobool2 = trunc i8 %2 to i1, !dbg !4150
  %call3 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.203, i64 0, i64 0)) #13, !dbg !4152
  %3 = load i8*, i8** %name.addr, align 8, !dbg !4153
  call void @file_failure(i1 zeroext %tobool2, i8* %call3, i8* %3), !dbg !4154
  br label %if.end150, !dbg !4155

if.end:                                           ; preds = %entry
  %4 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !4156
  %tobool4 = icmp ne %struct.hash_table* %4, null, !dbg !4156
  br i1 %tobool4, label %if.then5, label %if.end23, !dbg !4158

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.stat* %dir_stat, metadata !4159, metadata !DIExpression()), !dbg !4161
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !4162, metadata !DIExpression()), !dbg !4163
  %5 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4164
  %call6 = call i32 @dirfd(%struct.__dirstream* %5) #13, !dbg !4165
  store i32 %call6, i32* %fd, align 4, !dbg !4163
  %6 = load i32, i32* %fd, align 4, !dbg !4166
  %cmp = icmp sle i32 0, %6, !dbg !4168
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4169

cond.true:                                        ; preds = %if.then5
  %7 = load i32, i32* %fd, align 4, !dbg !4170
  %call7 = call i32 @fstat(i32 %7, %struct.stat* %dir_stat) #13, !dbg !4171
  br label %cond.end, !dbg !4169

cond.false:                                       ; preds = %if.then5
  %8 = load i8*, i8** %name.addr, align 8, !dbg !4172
  %call8 = call i32 @stat(i8* %8, %struct.stat* %dir_stat) #13, !dbg !4173
  br label %cond.end, !dbg !4169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call7, %cond.true ], [ %call8, %cond.false ], !dbg !4169
  %cmp9 = icmp slt i32 %cond, 0, !dbg !4174
  br i1 %cmp9, label %if.then10, label %if.end14, !dbg !4175

if.then10:                                        ; preds = %cond.end
  %9 = load i8, i8* %command_line_arg.addr, align 1, !dbg !4176
  %tobool11 = trunc i8 %9 to i1, !dbg !4176
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.204, i64 0, i64 0)) #13, !dbg !4178
  %10 = load i8*, i8** %name.addr, align 8, !dbg !4179
  call void @file_failure(i1 zeroext %tobool11, i8* %call12, i8* %10), !dbg !4180
  %11 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4181
  %call13 = call i32 @closedir(%struct.__dirstream* %11), !dbg !4182
  br label %if.end150, !dbg !4183

if.end14:                                         ; preds = %cond.end
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %dir_stat, i32 0, i32 0, !dbg !4184, !ctir !191
  %12 = load i64, i64* %st_dev, align 8, !dbg !4184, !ctir !195
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %dir_stat, i32 0, i32 1, !dbg !4186, !ctir !191
  %13 = load i64, i64* %st_ino, align 8, !dbg !4186, !ctir !197
  %call15 = call zeroext i1 @visit_dir(i64 %12, i64 %13), !dbg !4187
  br i1 %call15, label %if.then16, label %if.end20, !dbg !4188

if.then16:                                        ; preds = %if.end14
  %call17 = call i8* @gettext(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.205, i64 0, i64 0)) #13, !dbg !4189
  %14 = load i8*, i8** %name.addr, align 8, !dbg !4191
  %call18 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %14), !dbg !4191
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call17, i8* %call18), !dbg !4192
  %15 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4193
  %call19 = call i32 @closedir(%struct.__dirstream* %15), !dbg !4194
  call void @set_exit_status(i1 zeroext true), !dbg !4195
  br label %if.end150, !dbg !4196

if.end20:                                         ; preds = %if.end14
  %st_dev21 = getelementptr inbounds %struct.stat, %struct.stat* %dir_stat, i32 0, i32 0, !dbg !4197, !ctir !191
  %16 = load i64, i64* %st_dev21, align 8, !dbg !4197, !ctir !195
  %st_ino22 = getelementptr inbounds %struct.stat, %struct.stat* %dir_stat, i32 0, i32 1, !dbg !4198, !ctir !191
  %17 = load i64, i64* %st_ino22, align 8, !dbg !4198, !ctir !197
  call void @dev_ino_push(i64 %16, i64 %17), !dbg !4199
  br label %if.end23, !dbg !4200

if.end23:                                         ; preds = %if.end20, %if.end
  call void @clear_files(), !dbg !4201
  %18 = load i8, i8* @recursive, align 1, !dbg !4202
  %tobool24 = trunc i8 %18 to i1, !dbg !4202
  br i1 %tobool24, label %if.then26, label %lor.lhs.false, !dbg !4204

lor.lhs.false:                                    ; preds = %if.end23
  %19 = load i8, i8* @print_dir_name, align 1, !dbg !4205
  %tobool25 = trunc i8 %19 to i1, !dbg !4205
  br i1 %tobool25, label %if.then26, label %if.end58, !dbg !4206

if.then26:                                        ; preds = %lor.lhs.false, %if.end23
  %20 = load i8, i8* @print_dir.first, align 1, !dbg !4207
  %tobool27 = trunc i8 %20 to i1, !dbg !4207
  br i1 %tobool27, label %if.end30, label %if.then28, !dbg !4210

if.then28:                                        ; preds = %if.then26
  br label %do.body, !dbg !4211

do.body:                                          ; preds = %if.then28
  %call29 = call i32 @putchar_unlocked(i32 10), !dbg !4212
  %21 = load i64, i64* @dired_pos, align 8, !dbg !4212
  %inc = add i64 %21, 1, !dbg !4212
  store i64 %inc, i64* @dired_pos, align 8, !dbg !4212
  br label %do.end, !dbg !4212

do.end:                                           ; preds = %do.body
  br label %if.end30, !dbg !4212

if.end30:                                         ; preds = %do.end, %if.then26
  store i8 0, i8* @print_dir.first, align 1, !dbg !4214
  br label %do.body31, !dbg !4215

do.body31:                                        ; preds = %if.end30
  %22 = load i8, i8* @dired, align 1, !dbg !4216
  %tobool32 = trunc i8 %22 to i1, !dbg !4216
  br i1 %tobool32, label %if.then33, label %if.end37, !dbg !4219

if.then33:                                        ; preds = %do.body31
  br label %do.body34, !dbg !4216

do.body34:                                        ; preds = %if.then33
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4220
  %call35 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %23), !dbg !4220
  %24 = load i64, i64* @dired_pos, align 8, !dbg !4220
  %add = add i64 %24, 2, !dbg !4220
  store i64 %add, i64* @dired_pos, align 8, !dbg !4220
  br label %do.end36, !dbg !4220

do.end36:                                         ; preds = %do.body34
  br label %if.end37, !dbg !4220

if.end37:                                         ; preds = %do.end36, %do.body31
  br label %do.end38, !dbg !4219

do.end38:                                         ; preds = %if.end37
  call void @llvm.dbg.declare(metadata i8** %absolute_name, metadata !4222, metadata !DIExpression()), !dbg !4223
  store i8* null, i8** %absolute_name, align 8, !dbg !4223
  %25 = load i8, i8* @print_hyperlink, align 1, !dbg !4224
  %tobool39 = trunc i8 %25 to i1, !dbg !4224
  br i1 %tobool39, label %if.then40, label %if.end47, !dbg !4226

if.then40:                                        ; preds = %do.end38
  %26 = load i8*, i8** %name.addr, align 8, !dbg !4227
  %call41 = call i8* @canonicalize_filename_mode(i8* %26, i32 2), !dbg !4229
  store i8* %call41, i8** %absolute_name, align 8, !dbg !4230
  %27 = load i8*, i8** %absolute_name, align 8, !dbg !4231
  %tobool42 = icmp ne i8* %27, null, !dbg !4231
  br i1 %tobool42, label %if.end46, label %if.then43, !dbg !4233

if.then43:                                        ; preds = %if.then40
  %28 = load i8, i8* %command_line_arg.addr, align 1, !dbg !4234
  %tobool44 = trunc i8 %28 to i1, !dbg !4234
  %call45 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.207, i64 0, i64 0)) #13, !dbg !4235
  %29 = load i8*, i8** %name.addr, align 8, !dbg !4236
  call void @file_failure(i1 zeroext %tobool44, i8* %call45, i8* %29), !dbg !4237
  br label %if.end46, !dbg !4237

if.end46:                                         ; preds = %if.then43, %if.then40
  br label %if.end47, !dbg !4238

if.end47:                                         ; preds = %if.end46, %do.end38
  %30 = load i8*, i8** %realname.addr, align 8, !dbg !4239
  %tobool48 = icmp ne i8* %30, null, !dbg !4239
  br i1 %tobool48, label %cond.true49, label %cond.false50, !dbg !4239

cond.true49:                                      ; preds = %if.end47
  %31 = load i8*, i8** %realname.addr, align 8, !dbg !4240
  br label %cond.end51, !dbg !4239

cond.false50:                                     ; preds = %if.end47
  %32 = load i8*, i8** %name.addr, align 8, !dbg !4241
  br label %cond.end51, !dbg !4239

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi i8* [ %31, %cond.true49 ], [ %32, %cond.false50 ], !dbg !4239
  %33 = load %struct.quoting_options*, %struct.quoting_options** @dirname_quoting_options, align 8, !dbg !4242
  %34 = load i8*, i8** %absolute_name, align 8, !dbg !4243
  %call53 = call i64 @quote_name(i8* %cond52, %struct.quoting_options* %33, i32 -1, %struct.bin_str* null, i1 zeroext true, %struct.obstack* @subdired_obstack, i8* %34), !dbg !4244
  %35 = load i8*, i8** %absolute_name, align 8, !dbg !4245
  call void @free(i8* %35) #13, !dbg !4246
  br label %do.body54, !dbg !4247

do.body54:                                        ; preds = %cond.end51
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4248
  %call55 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.208, i64 0, i64 0), %struct._IO_FILE* %36), !dbg !4248
  %37 = load i64, i64* @dired_pos, align 8, !dbg !4248
  %add56 = add i64 %37, 2, !dbg !4248
  store i64 %add56, i64* @dired_pos, align 8, !dbg !4248
  br label %do.end57, !dbg !4248

do.end57:                                         ; preds = %do.body54
  br label %if.end58, !dbg !4250

if.end58:                                         ; preds = %do.end57, %lor.lhs.false
  br label %while.body, !dbg !4251

while.body:                                       ; preds = %if.end58, %if.end100
  %call59 = call i32* @__errno_location() #17, !dbg !4252
  store i32 0, i32* %call59, align 4, !dbg !4254, !ctir !27
  %38 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4255
  %call60 = call %struct.dirent* @readdir(%struct.__dirstream* %38), !dbg !4256
  store %struct.dirent* %call60, %struct.dirent** %next, align 8, !dbg !4257
  %39 = load %struct.dirent*, %struct.dirent** %next, align 8, !dbg !4258
  %tobool61 = icmp ne %struct.dirent* %39, null, !dbg !4258
  br i1 %tobool61, label %if.then62, label %if.else, !dbg !4260

if.then62:                                        ; preds = %while.body
  %40 = load %struct.dirent*, %struct.dirent** %next, align 8, !dbg !4261
  %d_name = getelementptr inbounds %struct.dirent, %struct.dirent* %40, i32 0, i32 4, !dbg !4264, !ctir !730
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %d_name, i64 0, i64 0, !dbg !4261, !ctir !453
  %call63 = call zeroext i1 @file_ignored(i8* %arraydecay), !dbg !4265
  br i1 %call63, label %if.end86, label %if.then64, !dbg !4266

if.then64:                                        ; preds = %if.then62
  call void @llvm.dbg.declare(metadata i32* %type, metadata !4267, metadata !DIExpression()), !dbg !4269
  store i32 0, i32* %type, align 4, !dbg !4269
  %41 = load %struct.dirent*, %struct.dirent** %next, align 8, !dbg !4270
  %d_type = getelementptr inbounds %struct.dirent, %struct.dirent* %41, i32 0, i32 3, !dbg !4271, !ctir !730
  %42 = load i8, i8* %d_type, align 2, !dbg !4271, !ctir !737
  %conv = zext i8 %42 to i32, !dbg !4270
  switch i32 %conv, label %sw.epilog [
    i32 6, label %sw.bb
    i32 2, label %sw.bb65
    i32 4, label %sw.bb66
    i32 1, label %sw.bb67
    i32 10, label %sw.bb68
    i32 8, label %sw.bb69
    i32 12, label %sw.bb70
    i32 14, label %sw.bb71
  ], !dbg !4272

sw.bb:                                            ; preds = %if.then64
  store i32 4, i32* %type, align 4, !dbg !4273
  br label %sw.epilog, !dbg !4275

sw.bb65:                                          ; preds = %if.then64
  store i32 2, i32* %type, align 4, !dbg !4276
  br label %sw.epilog, !dbg !4277

sw.bb66:                                          ; preds = %if.then64
  store i32 3, i32* %type, align 4, !dbg !4278
  br label %sw.epilog, !dbg !4279

sw.bb67:                                          ; preds = %if.then64
  store i32 1, i32* %type, align 4, !dbg !4280
  br label %sw.epilog, !dbg !4281

sw.bb68:                                          ; preds = %if.then64
  store i32 6, i32* %type, align 4, !dbg !4282
  br label %sw.epilog, !dbg !4283

sw.bb69:                                          ; preds = %if.then64
  store i32 5, i32* %type, align 4, !dbg !4284
  br label %sw.epilog, !dbg !4285

sw.bb70:                                          ; preds = %if.then64
  store i32 7, i32* %type, align 4, !dbg !4286
  br label %sw.epilog, !dbg !4287

sw.bb71:                                          ; preds = %if.then64
  store i32 8, i32* %type, align 4, !dbg !4288
  br label %sw.epilog, !dbg !4289

sw.epilog:                                        ; preds = %if.then64, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb68, %sw.bb67, %sw.bb66, %sw.bb65, %sw.bb
  %43 = load %struct.dirent*, %struct.dirent** %next, align 8, !dbg !4290
  %d_name72 = getelementptr inbounds %struct.dirent, %struct.dirent* %43, i32 0, i32 4, !dbg !4291, !ctir !730
  %arraydecay73 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name72, i64 0, i64 0, !dbg !4290, !ctir !453
  %44 = load i32, i32* %type, align 4, !dbg !4292
  %45 = load i8*, i8** %name.addr, align 8, !dbg !4293
  %call74 = call i64 @gobble_file(i8* %arraydecay73, i32 %44, i64 0, i1 zeroext false, i8* %45), !dbg !4294
  %46 = load i64, i64* %total_blocks, align 8, !dbg !4295
  %add75 = add i64 %46, %call74, !dbg !4295
  store i64 %add75, i64* %total_blocks, align 8, !dbg !4295
  %47 = load i32, i32* @format, align 4, !dbg !4296
  %cmp76 = icmp eq i32 %47, 1, !dbg !4298
  br i1 %cmp76, label %land.lhs.true, label %if.end85, !dbg !4299

land.lhs.true:                                    ; preds = %sw.epilog
  %48 = load i32, i32* @sort_type, align 4, !dbg !4300
  %cmp78 = icmp eq i32 %48, -1, !dbg !4301
  br i1 %cmp78, label %land.lhs.true80, label %if.end85, !dbg !4302

land.lhs.true80:                                  ; preds = %land.lhs.true
  %49 = load i8, i8* @print_block_size, align 1, !dbg !4303
  %tobool81 = trunc i8 %49 to i1, !dbg !4303
  br i1 %tobool81, label %if.end85, label %land.lhs.true82, !dbg !4304

land.lhs.true82:                                  ; preds = %land.lhs.true80
  %50 = load i8, i8* @recursive, align 1, !dbg !4305
  %tobool83 = trunc i8 %50 to i1, !dbg !4305
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !4306

if.then84:                                        ; preds = %land.lhs.true82
  call void @sort_files(), !dbg !4307
  call void @print_current_files(), !dbg !4309
  call void @clear_files(), !dbg !4310
  br label %if.end85, !dbg !4311

if.end85:                                         ; preds = %if.then84, %land.lhs.true82, %land.lhs.true80, %land.lhs.true, %sw.epilog
  br label %if.end86, !dbg !4312

if.end86:                                         ; preds = %if.end85, %if.then62
  br label %if.end100, !dbg !4313

if.else:                                          ; preds = %while.body
  %call87 = call i32* @__errno_location() #17, !dbg !4314
  %51 = load i32, i32* %call87, align 4, !dbg !4314, !ctir !27
  %cmp88 = icmp ne i32 %51, 0, !dbg !4316
  br i1 %cmp88, label %if.then90, label %if.else98, !dbg !4317

if.then90:                                        ; preds = %if.else
  %52 = load i8, i8* %command_line_arg.addr, align 1, !dbg !4318
  %tobool91 = trunc i8 %52 to i1, !dbg !4318
  %call92 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.209, i64 0, i64 0)) #13, !dbg !4320
  %53 = load i8*, i8** %name.addr, align 8, !dbg !4321
  call void @file_failure(i1 zeroext %tobool91, i8* %call92, i8* %53), !dbg !4322
  %call93 = call i32* @__errno_location() #17, !dbg !4323
  %54 = load i32, i32* %call93, align 4, !dbg !4323, !ctir !27
  %cmp94 = icmp ne i32 %54, 75, !dbg !4325
  br i1 %cmp94, label %if.then96, label %if.end97, !dbg !4326

if.then96:                                        ; preds = %if.then90
  br label %while.end, !dbg !4327

if.end97:                                         ; preds = %if.then90
  br label %if.end99, !dbg !4328

if.else98:                                        ; preds = %if.else
  br label %while.end, !dbg !4329

if.end99:                                         ; preds = %if.end97
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end86
  call void @process_signals(), !dbg !4330
  br label %while.body, !dbg !4251, !llvm.loop !4331

while.end:                                        ; preds = %if.else98, %if.then96
  %55 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !4333
  %call101 = call i32 @closedir(%struct.__dirstream* %55), !dbg !4335
  %cmp102 = icmp ne i32 %call101, 0, !dbg !4336
  br i1 %cmp102, label %if.then104, label %if.end107, !dbg !4337

if.then104:                                       ; preds = %while.end
  %56 = load i8, i8* %command_line_arg.addr, align 1, !dbg !4338
  %tobool105 = trunc i8 %56 to i1, !dbg !4338
  %call106 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.210, i64 0, i64 0)) #13, !dbg !4340
  %57 = load i8*, i8** %name.addr, align 8, !dbg !4341
  call void @file_failure(i1 zeroext %tobool105, i8* %call106, i8* %57), !dbg !4342
  br label %if.end107, !dbg !4343

if.end107:                                        ; preds = %if.then104, %while.end
  call void @sort_files(), !dbg !4344
  %58 = load i8, i8* @recursive, align 1, !dbg !4345
  %tobool108 = trunc i8 %58 to i1, !dbg !4345
  br i1 %tobool108, label %if.then109, label %if.end110, !dbg !4347

if.then109:                                       ; preds = %if.end107
  %59 = load i8*, i8** %name.addr, align 8, !dbg !4348
  call void @extract_dirs_from_files(i8* %59, i1 zeroext false), !dbg !4349
  br label %if.end110, !dbg !4349

if.end110:                                        ; preds = %if.then109, %if.end107
  %60 = load i32, i32* @format, align 4, !dbg !4350
  %cmp111 = icmp eq i32 %60, 0, !dbg !4352
  br i1 %cmp111, label %if.then116, label %lor.lhs.false113, !dbg !4353

lor.lhs.false113:                                 ; preds = %if.end110
  %61 = load i8, i8* @print_block_size, align 1, !dbg !4354
  %tobool114 = trunc i8 %61 to i1, !dbg !4354
  br i1 %tobool114, label %if.then116, label %if.end147, !dbg !4355

if.then116:                                       ; preds = %lor.lhs.false113, %if.end110
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4356, metadata !DIExpression()), !dbg !4358
  call void @llvm.dbg.declare(metadata [652 x i8]* %buf, metadata !4359, metadata !DIExpression()), !dbg !4360
  br label %do.body117, !dbg !4361

do.body117:                                       ; preds = %if.then116
  %62 = load i8, i8* @dired, align 1, !dbg !4362
  %tobool118 = trunc i8 %62 to i1, !dbg !4362
  br i1 %tobool118, label %if.then119, label %if.end124, !dbg !4365

if.then119:                                       ; preds = %do.body117
  br label %do.body120, !dbg !4362

do.body120:                                       ; preds = %if.then119
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4366
  %call121 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %63), !dbg !4366
  %64 = load i64, i64* @dired_pos, align 8, !dbg !4366
  %add122 = add i64 %64, 2, !dbg !4366
  store i64 %add122, i64* @dired_pos, align 8, !dbg !4366
  br label %do.end123, !dbg !4366

do.end123:                                        ; preds = %do.body120
  br label %if.end124, !dbg !4366

if.end124:                                        ; preds = %do.end123, %do.body117
  br label %do.end125, !dbg !4365

do.end125:                                        ; preds = %if.end124
  %call126 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.211, i64 0, i64 0)) #13, !dbg !4368
  store i8* %call126, i8** %p, align 8, !dbg !4369
  br label %do.body127, !dbg !4370

do.body127:                                       ; preds = %do.end125
  %65 = load i8*, i8** %p, align 8, !dbg !4371
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4371
  %call128 = call i32 @fputs_unlocked(i8* %65, %struct._IO_FILE* %66), !dbg !4371
  %67 = load i8*, i8** %p, align 8, !dbg !4371
  %call129 = call i64 @strlen(i8* %67) #16, !dbg !4371
  %68 = load i64, i64* @dired_pos, align 8, !dbg !4371
  %add130 = add i64 %68, %call129, !dbg !4371
  store i64 %add130, i64* @dired_pos, align 8, !dbg !4371
  br label %do.end131, !dbg !4371

do.end131:                                        ; preds = %do.body127
  br label %do.body132, !dbg !4373

do.body132:                                       ; preds = %do.end131
  %call133 = call i32 @putchar_unlocked(i32 32), !dbg !4374
  %69 = load i64, i64* @dired_pos, align 8, !dbg !4374
  %inc134 = add i64 %69, 1, !dbg !4374
  store i64 %inc134, i64* @dired_pos, align 8, !dbg !4374
  br label %do.end135, !dbg !4374

do.end135:                                        ; preds = %do.body132
  %70 = load i64, i64* %total_blocks, align 8, !dbg !4376
  %arraydecay136 = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !4377, !ctir !746
  %71 = load i32, i32* @human_output_opts, align 4, !dbg !4378
  %72 = load i64, i64* @output_block_size, align 8, !dbg !4379
  %call137 = call i8* @human_readable(i64 %70, i8* %arraydecay136, i32 %71, i64 512, i64 %72), !dbg !4380
  store i8* %call137, i8** %p, align 8, !dbg !4381
  br label %do.body138, !dbg !4382

do.body138:                                       ; preds = %do.end135
  %73 = load i8*, i8** %p, align 8, !dbg !4383
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4383
  %call139 = call i32 @fputs_unlocked(i8* %73, %struct._IO_FILE* %74), !dbg !4383
  %75 = load i8*, i8** %p, align 8, !dbg !4383
  %call140 = call i64 @strlen(i8* %75) #16, !dbg !4383
  %76 = load i64, i64* @dired_pos, align 8, !dbg !4383
  %add141 = add i64 %76, %call140, !dbg !4383
  store i64 %add141, i64* @dired_pos, align 8, !dbg !4383
  br label %do.end142, !dbg !4383

do.end142:                                        ; preds = %do.body138
  br label %do.body143, !dbg !4385

do.body143:                                       ; preds = %do.end142
  %call144 = call i32 @putchar_unlocked(i32 10), !dbg !4386
  %77 = load i64, i64* @dired_pos, align 8, !dbg !4386
  %inc145 = add i64 %77, 1, !dbg !4386
  store i64 %inc145, i64* @dired_pos, align 8, !dbg !4386
  br label %do.end146, !dbg !4386

do.end146:                                        ; preds = %do.body143
  br label %if.end147, !dbg !4388

if.end147:                                        ; preds = %do.end146, %lor.lhs.false113
  %78 = load i64, i64* @cwd_n_used, align 8, !dbg !4389
  %tobool148 = icmp ne i64 %78, 0, !dbg !4389
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !4391

if.then149:                                       ; preds = %if.end147
  call void @print_current_files(), !dbg !4392
  br label %if.end150, !dbg !4392

if.end150:                                        ; preds = %if.then, %if.then10, %if.then16, %if.then149, %if.end147
  ret void, !dbg !4393
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @restore_default_color() #0 !dbg !4394 {
entry:
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)), !dbg !4395
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)), !dbg !4396
  ret void, !dbg !4397
}

declare dso_local i32 @fflush_unlocked(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_restore() #0 !dbg !4398 {
entry:
  call void @signal_setup(i1 zeroext false), !dbg !4399
  ret void, !dbg !4400
}

; Function Attrs: nounwind
declare dso_local i32 @raise(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dired_dump_obstack(i8* %prefix, %struct.obstack* %os) #0 !dbg !4401 {
entry:
  %prefix.addr = alloca i8*, align 8
  %os.addr = alloca %struct.obstack*, align 8
  %n_pos = alloca i64, align 8, !ctir !149
  %__o = alloca %struct.obstack*, align 8, !ctir !456
  %tmp = alloca i64, align 8
  %pos = alloca i64*, align 8, !ctir !148
  %__o1 = alloca %struct.obstack*, align 8, !ctir !616
  %__value = alloca i8*, align 8, !ctir !167
  %tmp25 = alloca i8*, align 8
  %i = alloca i64, align 8, !ctir !149
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !4404, metadata !DIExpression()), !dbg !4405
  store %struct.obstack* %os, %struct.obstack** %os.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %os.addr, metadata !4406, metadata !DIExpression()), !dbg !4407
  call void @llvm.dbg.declare(metadata i64* %n_pos, metadata !4408, metadata !DIExpression()), !dbg !4409
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !4410, metadata !DIExpression()), !dbg !4412
  %0 = load %struct.obstack*, %struct.obstack** %os.addr, align 8, !dbg !4412
  store %struct.obstack* %0, %struct.obstack** %__o, align 8, !dbg !4412
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4412
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 3, !dbg !4412, !ctir !457
  %2 = load i8*, i8** %next_free, align 8, !dbg !4412, !ctir !143
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4412
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 2, !dbg !4412, !ctir !457
  %4 = load i8*, i8** %object_base, align 8, !dbg !4412, !ctir !143
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !4412
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !4412
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4412
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !4412
  %5 = load i64, i64* %tmp, align 8, !dbg !4412
  %div = udiv i64 %5, 8, !dbg !4413
  store i64 %div, i64* %n_pos, align 8, !dbg !4414
  %6 = load i64, i64* %n_pos, align 8, !dbg !4415
  %cmp = icmp ugt i64 %6, 0, !dbg !4417
  br i1 %cmp, label %if.then, label %if.end29, !dbg !4418

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64** %pos, metadata !4419, metadata !DIExpression()), !dbg !4421
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o1, metadata !4422, metadata !DIExpression()), !dbg !4424
  %7 = load %struct.obstack*, %struct.obstack** %os.addr, align 8, !dbg !4424
  store %struct.obstack* %7, %struct.obstack** %__o1, align 8, !dbg !4424
  call void @llvm.dbg.declare(metadata i8** %__value, metadata !4425, metadata !DIExpression()), !dbg !4424
  %8 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %object_base1 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 2, !dbg !4424, !ctir !458
  %9 = load i8*, i8** %object_base1, align 8, !dbg !4424, !ctir !143
  store i8* %9, i8** %__value, align 8, !dbg !4424
  %10 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4426
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 3, !dbg !4426, !ctir !458
  %11 = load i8*, i8** %next_free2, align 8, !dbg !4426, !ctir !143
  %12 = load i8*, i8** %__value, align 8, !dbg !4426
  %cmp3 = icmp eq i8* %11, %12, !dbg !4426
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !4424

if.then4:                                         ; preds = %if.then
  %13 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4426
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %13, i32 0, i32 10, !dbg !4426, !ctir !458
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !4426
  %bf.clear = and i8 %bf.load, -3, !dbg !4426
  %bf.set = or i8 %bf.clear, 2, !dbg !4426
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !4426
  br label %if.end, !dbg !4426

if.end:                                           ; preds = %if.then4, %if.then
  %14 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3, !dbg !4424, !ctir !458
  %15 = load i8*, i8** %next_free5, align 8, !dbg !4424, !ctir !143
  %sub.ptr.lhs.cast6 = ptrtoint i8* %15 to i64, !dbg !4424
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast6, 0, !dbg !4424
  %16 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 6, !dbg !4424, !ctir !458
  %17 = load i64, i64* %alignment_mask, align 8, !dbg !4424, !ctir !149
  %add = add i64 %sub.ptr.sub7, %17, !dbg !4424
  %18 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %alignment_mask8 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 6, !dbg !4424, !ctir !458
  %19 = load i64, i64* %alignment_mask8, align 8, !dbg !4424, !ctir !149
  %neg = xor i64 %19, -1, !dbg !4424
  %and = and i64 %add, %neg, !dbg !4424
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and, !dbg !4424, !ctir !144
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %next_free9 = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 3, !dbg !4424, !ctir !458
  store i8* %add.ptr, i8** %next_free9, align 8, !dbg !4424, !ctir !143
  %21 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %next_free10 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 3, !dbg !4428, !ctir !458
  %22 = load i8*, i8** %next_free10, align 8, !dbg !4428, !ctir !143
  %23 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 1, !dbg !4428, !ctir !458
  %24 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !4428, !ctir !463
  %25 = bitcast %struct._obstack_chunk* %24 to i8*, !dbg !4428
  %sub.ptr.lhs.cast11 = ptrtoint i8* %22 to i64, !dbg !4428
  %sub.ptr.rhs.cast12 = ptrtoint i8* %25 to i64, !dbg !4428
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12, !dbg !4428
  %26 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 4, !dbg !4428, !ctir !458
  %27 = load i8*, i8** %chunk_limit, align 8, !dbg !4428, !ctir !143
  %28 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %chunk14 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 1, !dbg !4428, !ctir !458
  %29 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk14, align 8, !dbg !4428, !ctir !463
  %30 = bitcast %struct._obstack_chunk* %29 to i8*, !dbg !4428
  %sub.ptr.lhs.cast15 = ptrtoint i8* %27 to i64, !dbg !4428
  %sub.ptr.rhs.cast16 = ptrtoint i8* %30 to i64, !dbg !4428
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast15, %sub.ptr.rhs.cast16, !dbg !4428
  %cmp18 = icmp ugt i64 %sub.ptr.sub13, %sub.ptr.sub17, !dbg !4428
  br i1 %cmp18, label %if.then19, label %if.end22, !dbg !4424

if.then19:                                        ; preds = %if.end
  %31 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %chunk_limit20 = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 4, !dbg !4428, !ctir !458
  %32 = load i8*, i8** %chunk_limit20, align 8, !dbg !4428, !ctir !143
  %33 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4428
  %next_free21 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 3, !dbg !4428, !ctir !458
  store i8* %32, i8** %next_free21, align 8, !dbg !4428, !ctir !143
  br label %if.end22, !dbg !4428

if.end22:                                         ; preds = %if.then19, %if.end
  %34 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %34, i32 0, i32 3, !dbg !4424, !ctir !458
  %35 = load i8*, i8** %next_free23, align 8, !dbg !4424, !ctir !143
  %36 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4424
  %object_base24 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 2, !dbg !4424, !ctir !458
  store i8* %35, i8** %object_base24, align 8, !dbg !4424, !ctir !143
  %37 = load i8*, i8** %__value, align 8, !dbg !4424
  store i8* %37, i8** %tmp25, align 8, !dbg !4424
  %38 = load i8*, i8** %tmp25, align 8, !dbg !4424
  %39 = bitcast i8* %38 to i64*, !dbg !4430
  store i64* %39, i64** %pos, align 8, !dbg !4421
  %40 = load i8*, i8** %prefix.addr, align 8, !dbg !4431
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4431
  %call = call i32 @fputs_unlocked(i8* %40, %struct._IO_FILE* %41), !dbg !4431
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4432, metadata !DIExpression()), !dbg !4434
  store i64 0, i64* %i, align 8, !dbg !4434
  br label %for.cond, !dbg !4435

for.cond:                                         ; preds = %for.inc, %if.end22
  %42 = load i64, i64* %i, align 8, !dbg !4436
  %43 = load i64, i64* %n_pos, align 8, !dbg !4438
  %cmp26 = icmp ult i64 %42, %43, !dbg !4439
  br i1 %cmp26, label %for.body, label %for.end, !dbg !4440

for.body:                                         ; preds = %for.cond
  %44 = load i64*, i64** %pos, align 8, !dbg !4441
  %45 = load i64, i64* %i, align 8, !dbg !4442
  %arrayidx = getelementptr inbounds i64, i64* %44, i64 %45, !dbg !4441, !ctir !148
  %46 = load i64, i64* %arrayidx, align 8, !dbg !4441
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0), i64 %46), !dbg !4443
  br label %for.inc, !dbg !4443

for.inc:                                          ; preds = %for.body
  %47 = load i64, i64* %i, align 8, !dbg !4444
  %inc = add i64 %47, 1, !dbg !4444
  store i64 %inc, i64* %i, align 8, !dbg !4444
  br label %for.cond, !dbg !4445, !llvm.loop !4446

for.end:                                          ; preds = %for.cond
  %call28 = call i32 @putchar_unlocked(i32 10), !dbg !4448
  br label %if.end29, !dbg !4449

if.end29:                                         ; preds = %for.end, %entry
  ret void, !dbg !4450
}

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_setup(i1 zeroext %init) #0 !dbg !926 {
entry:
  %init.addr = alloca i8, align 1
  %j = alloca i32, align 4, !ctir !27
  %act = alloca %struct.sigaction, align 8, !ctir !525
  %frombool = zext i1 %init to i8
  store i8 %frombool, i8* %init.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %init.addr, metadata !4451, metadata !DIExpression()), !dbg !4452
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4453, metadata !DIExpression()), !dbg !4454
  %0 = load i8, i8* %init.addr, align 1, !dbg !4455
  %tobool = trunc i8 %0 to i1, !dbg !4455
  br i1 %tobool, label %if.then, label %if.else, !dbg !4457

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.sigaction* %act, metadata !4458, metadata !DIExpression()), !dbg !4460
  %call = call i32 @sigemptyset(%struct.__sigset_t* @caught_signals) #13, !dbg !4461
  store i32 0, i32* %j, align 4, !dbg !4462
  br label %for.cond, !dbg !4464

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %j, align 4, !dbg !4465
  %cmp = icmp slt i32 %1, 12, !dbg !4467
  br i1 %cmp, label %for.body, label %for.end, !dbg !4468

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4, !dbg !4469
  %idxprom = sext i32 %2 to i64, !dbg !4471
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom, !dbg !4471, !ctir !519
  %3 = load i32, i32* %arrayidx, align 4, !dbg !4471
  %call1 = call i32 @sigaction(i32 %3, %struct.sigaction* null, %struct.sigaction* %act) #13, !dbg !4472
  %__sigaction_handler = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0, !dbg !4473, !ctir !525
  %sa_handler = bitcast %union.anon.2* %__sigaction_handler to void (i32)**, !dbg !4473
  %4 = load void (i32)*, void (i32)** %sa_handler, align 8, !dbg !4473, !ctir !523
  %cmp2 = icmp ne void (i32)* %4, inttoptr (i64 1 to void (i32)*), !dbg !4475
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !4476

if.then3:                                         ; preds = %for.body
  %5 = load i32, i32* %j, align 4, !dbg !4477
  %idxprom4 = sext i32 %5 to i64, !dbg !4478
  %arrayidx5 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom4, !dbg !4478, !ctir !519
  %6 = load i32, i32* %arrayidx5, align 4, !dbg !4478
  %call6 = call i32 @sigaddset(%struct.__sigset_t* @caught_signals, i32 %6) #13, !dbg !4479
  br label %if.end, !dbg !4479

if.end:                                           ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !4480

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %j, align 4, !dbg !4481
  %inc = add nsw i32 %7, 1, !dbg !4481
  store i32 %inc, i32* %j, align 4, !dbg !4481
  br label %for.cond, !dbg !4482, !llvm.loop !4483

for.end:                                          ; preds = %for.cond
  %sa_mask = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 1, !dbg !4485, !ctir !525
  %8 = bitcast %struct.__sigset_t* %sa_mask to i8*, !dbg !4486
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.__sigset_t* @caught_signals to i8*), i64 128, i1 false), !dbg !4486
  %sa_flags = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 2, !dbg !4487, !ctir !525
  store i32 268435456, i32* %sa_flags, align 8, !dbg !4488, !ctir !27
  store i32 0, i32* %j, align 4, !dbg !4489
  br label %for.cond7, !dbg !4491

for.cond7:                                        ; preds = %for.inc24, %for.end
  %9 = load i32, i32* %j, align 4, !dbg !4492
  %cmp8 = icmp slt i32 %9, 12, !dbg !4494
  br i1 %cmp8, label %for.body9, label %for.end26, !dbg !4495

for.body9:                                        ; preds = %for.cond7
  %10 = load i32, i32* %j, align 4, !dbg !4496
  %idxprom10 = sext i32 %10 to i64, !dbg !4498
  %arrayidx11 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom10, !dbg !4498, !ctir !519
  %11 = load i32, i32* %arrayidx11, align 4, !dbg !4498
  %call12 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %11) #13, !dbg !4499
  %tobool13 = icmp ne i32 %call12, 0, !dbg !4499
  br i1 %tobool13, label %if.then14, label %if.end23, !dbg !4500

if.then14:                                        ; preds = %for.body9
  %12 = load i32, i32* %j, align 4, !dbg !4501
  %idxprom15 = sext i32 %12 to i64, !dbg !4503
  %arrayidx16 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom15, !dbg !4503, !ctir !519
  %13 = load i32, i32* %arrayidx16, align 4, !dbg !4503
  %cmp17 = icmp eq i32 %13, 20, !dbg !4504
  %14 = zext i1 %cmp17 to i64, !dbg !4503
  %cond = select i1 %cmp17, void (i32)* @stophandler, void (i32)* @sighandler, !dbg !4503
  %__sigaction_handler18 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0, !dbg !4505, !ctir !525
  %sa_handler19 = bitcast %union.anon.2* %__sigaction_handler18 to void (i32)**, !dbg !4505
  store void (i32)* %cond, void (i32)** %sa_handler19, align 8, !dbg !4506, !ctir !523
  %15 = load i32, i32* %j, align 4, !dbg !4507
  %idxprom20 = sext i32 %15 to i64, !dbg !4508
  %arrayidx21 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom20, !dbg !4508, !ctir !519
  %16 = load i32, i32* %arrayidx21, align 4, !dbg !4508
  %call22 = call i32 @sigaction(i32 %16, %struct.sigaction* %act, %struct.sigaction* null) #13, !dbg !4509
  br label %if.end23, !dbg !4510

if.end23:                                         ; preds = %if.then14, %for.body9
  br label %for.inc24, !dbg !4511

for.inc24:                                        ; preds = %if.end23
  %17 = load i32, i32* %j, align 4, !dbg !4512
  %inc25 = add nsw i32 %17, 1, !dbg !4512
  store i32 %inc25, i32* %j, align 4, !dbg !4512
  br label %for.cond7, !dbg !4513, !llvm.loop !4514

for.end26:                                        ; preds = %for.cond7
  br label %if.end42, !dbg !4516

if.else:                                          ; preds = %entry
  store i32 0, i32* %j, align 4, !dbg !4517
  br label %for.cond27, !dbg !4520

for.cond27:                                       ; preds = %for.inc39, %if.else
  %18 = load i32, i32* %j, align 4, !dbg !4521
  %cmp28 = icmp slt i32 %18, 12, !dbg !4523
  br i1 %cmp28, label %for.body29, label %for.end41, !dbg !4524

for.body29:                                       ; preds = %for.cond27
  %19 = load i32, i32* %j, align 4, !dbg !4525
  %idxprom30 = sext i32 %19 to i64, !dbg !4527
  %arrayidx31 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom30, !dbg !4527, !ctir !519
  %20 = load i32, i32* %arrayidx31, align 4, !dbg !4527
  %call32 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %20) #13, !dbg !4528
  %tobool33 = icmp ne i32 %call32, 0, !dbg !4528
  br i1 %tobool33, label %if.then34, label %if.end38, !dbg !4529

if.then34:                                        ; preds = %for.body29
  %21 = load i32, i32* %j, align 4, !dbg !4530
  %idxprom35 = sext i32 %21 to i64, !dbg !4531
  %arrayidx36 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %idxprom35, !dbg !4531, !ctir !519
  %22 = load i32, i32* %arrayidx36, align 4, !dbg !4531
  %call37 = call void (i32)* @signal(i32 %22, void (i32)* null) #13, !dbg !4532
  br label %if.end38, !dbg !4532

if.end38:                                         ; preds = %if.then34, %for.body29
  br label %for.inc39, !dbg !4533

for.inc39:                                        ; preds = %if.end38
  %23 = load i32, i32* %j, align 4, !dbg !4534
  %inc40 = add nsw i32 %23, 1, !dbg !4534
  store i32 %inc40, i32* %j, align 4, !dbg !4534
  br label %for.cond27, !dbg !4535, !llvm.loop !4536

for.end41:                                        ; preds = %for.cond27
  br label %if.end42

if.end42:                                         ; preds = %for.end41, %for.end26
  ret void, !dbg !4538
}

; Function Attrs: nounwind
declare dso_local i32 @sigemptyset(%struct.__sigset_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #2

; Function Attrs: nounwind
declare dso_local i32 @sigaddset(%struct.__sigset_t*, i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind
declare dso_local i32 @sigismember(%struct.__sigset_t*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @stophandler(i32 %sig) #0 !dbg !4539 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sig.addr, metadata !4540, metadata !DIExpression()), !dbg !4541
  %0 = load volatile i32, i32* @interrupt_signal, align 4, !dbg !4542
  %tobool = icmp ne i32 %0, 0, !dbg !4542
  br i1 %tobool, label %if.end, label %if.then, !dbg !4544

if.then:                                          ; preds = %entry
  %1 = load volatile i32, i32* @stop_signal_count, align 4, !dbg !4545
  %inc = add nsw i32 %1, 1, !dbg !4545
  store volatile i32 %inc, i32* @stop_signal_count, align 4, !dbg !4545
  br label %if.end, !dbg !4546

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4547
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sighandler(i32 %sig) #0 !dbg !4548 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sig.addr, metadata !4549, metadata !DIExpression()), !dbg !4550
  %0 = load volatile i32, i32* @interrupt_signal, align 4, !dbg !4551
  %tobool = icmp ne i32 %0, 0, !dbg !4551
  br i1 %tobool, label %if.end, label %if.then, !dbg !4553

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %sig.addr, align 4, !dbg !4554
  store volatile i32 %1, i32* @interrupt_signal, align 4, !dbg !4555
  br label %if.end, !dbg !4556

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4557
}

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @put_indicator(%struct.bin_str* %ind) #0 !dbg !4558 {
entry:
  %ind.addr = alloca %struct.bin_str*, align 8
  store %struct.bin_str* %ind, %struct.bin_str** %ind.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bin_str** %ind.addr, metadata !4561, metadata !DIExpression()), !dbg !4562
  %0 = load i8, i8* @used_color, align 1, !dbg !4563
  %tobool = trunc i8 %0 to i1, !dbg !4563
  br i1 %tobool, label %if.end2, label %if.then, !dbg !4565

if.then:                                          ; preds = %entry
  store i8 1, i8* @used_color, align 1, !dbg !4566
  %call = call i32 @tcgetpgrp(i32 1) #13, !dbg !4568
  %cmp = icmp sle i32 0, %call, !dbg !4570
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4571

if.then1:                                         ; preds = %if.then
  call void @signal_init(), !dbg !4572
  br label %if.end, !dbg !4572

if.end:                                           ; preds = %if.then1, %if.then
  call void @prep_non_filename_text(), !dbg !4573
  br label %if.end2, !dbg !4574

if.end2:                                          ; preds = %if.end, %entry
  %1 = load %struct.bin_str*, %struct.bin_str** %ind.addr, align 8, !dbg !4575
  %string = getelementptr inbounds %struct.bin_str, %struct.bin_str* %1, i32 0, i32 1, !dbg !4575, !ctir !811
  %2 = load i8*, i8** %string, align 8, !dbg !4575, !ctir !146
  %3 = load %struct.bin_str*, %struct.bin_str** %ind.addr, align 8, !dbg !4575
  %len = getelementptr inbounds %struct.bin_str, %struct.bin_str* %3, i32 0, i32 0, !dbg !4575, !ctir !811
  %4 = load i64, i64* %len, align 8, !dbg !4575, !ctir !149
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4575
  %call3 = call i64 @fwrite_unlocked(i8* %2, i64 %4, i64 1, %struct._IO_FILE* %5), !dbg !4575
  ret void, !dbg !4576
}

; Function Attrs: nounwind
declare dso_local i32 @tcgetpgrp(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_init() #0 !dbg !4577 {
entry:
  call void @signal_setup(i1 zeroext true), !dbg !4578
  ret void, !dbg !4579
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prep_non_filename_text() #0 !dbg !4580 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8, !dbg !4581, !ctir !146
  %cmp = icmp ne i8* %0, null, !dbg !4583
  br i1 %cmp, label %if.then, label %if.else, !dbg !4584

if.then:                                          ; preds = %entry
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2)), !dbg !4585
  br label %if.end, !dbg !4585

if.else:                                          ; preds = %entry
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)), !dbg !4586
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3)), !dbg !4588
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)), !dbg !4589
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4590
}

declare dso_local i64 @fwrite_unlocked(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #7

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_failure(i1 zeroext %serious, i8* %message, i8* %file) #0 !dbg !4591 {
entry:
  %serious.addr = alloca i8, align 1
  %message.addr = alloca i8*, align 8
  %file.addr = alloca i8*, align 8
  %frombool = zext i1 %serious to i8
  store i8 %frombool, i8* %serious.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %serious.addr, metadata !4594, metadata !DIExpression()), !dbg !4595
  store i8* %message, i8** %message.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %message.addr, metadata !4596, metadata !DIExpression()), !dbg !4597
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !4598, metadata !DIExpression()), !dbg !4599
  %call = call i32* @__errno_location() #17, !dbg !4600
  %0 = load i32, i32* %call, align 4, !dbg !4600, !ctir !27
  %1 = load i8*, i8** %message.addr, align 8, !dbg !4601
  %2 = load i8*, i8** %file.addr, align 8, !dbg !4602
  %call1 = call i8* @quotearg_style(i32 4, i8* %2), !dbg !4602
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %0, i8* %1, i8* %call1), !dbg !4603
  %3 = load i8, i8* %serious.addr, align 1, !dbg !4604
  %tobool = trunc i8 %3 to i1, !dbg !4604
  call void @set_exit_status(i1 zeroext %tobool), !dbg !4605
  ret void, !dbg !4606
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @visit_dir(i64 %dev, i64 %ino) #0 !dbg !4607 {
entry:
  %dev.addr = alloca i64, align 8
  %ino.addr = alloca i64, align 8
  %ent = alloca %struct.dev_ino*, align 8, !ctir !264
  %ent_from_table = alloca %struct.dev_ino*, align 8, !ctir !264
  %found_match = alloca i8, align 1, !ctir !141
  store i64 %dev, i64* %dev.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dev.addr, metadata !4610, metadata !DIExpression()), !dbg !4611
  store i64 %ino, i64* %ino.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ino.addr, metadata !4612, metadata !DIExpression()), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %ent, metadata !4614, metadata !DIExpression()), !dbg !4615
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %ent_from_table, metadata !4616, metadata !DIExpression()), !dbg !4617
  call void @llvm.dbg.declare(metadata i8* %found_match, metadata !4618, metadata !DIExpression()), !dbg !4619
  %call = call noalias i8* @xmalloc(i64 16), !dbg !4620
  %0 = bitcast i8* %call to %struct.dev_ino*, !dbg !4620
  store %struct.dev_ino* %0, %struct.dev_ino** %ent, align 8, !dbg !4621
  %1 = load i64, i64* %ino.addr, align 8, !dbg !4622
  %2 = load %struct.dev_ino*, %struct.dev_ino** %ent, align 8, !dbg !4623
  %st_ino = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %2, i32 0, i32 0, !dbg !4624, !ctir !265
  store i64 %1, i64* %st_ino, align 8, !dbg !4625, !ctir !269
  %3 = load i64, i64* %dev.addr, align 8, !dbg !4626
  %4 = load %struct.dev_ino*, %struct.dev_ino** %ent, align 8, !dbg !4627
  %st_dev = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %4, i32 0, i32 1, !dbg !4628, !ctir !265
  store i64 %3, i64* %st_dev, align 8, !dbg !4629, !ctir !271
  %5 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8, !dbg !4630
  %6 = load %struct.dev_ino*, %struct.dev_ino** %ent, align 8, !dbg !4631
  %7 = bitcast %struct.dev_ino* %6 to i8*, !dbg !4631
  %call1 = call i8* @hash_insert(%struct.hash_table* %5, i8* %7), !dbg !4632
  %8 = bitcast i8* %call1 to %struct.dev_ino*, !dbg !4632
  store %struct.dev_ino* %8, %struct.dev_ino** %ent_from_table, align 8, !dbg !4633
  %9 = load %struct.dev_ino*, %struct.dev_ino** %ent_from_table, align 8, !dbg !4634
  %cmp = icmp eq %struct.dev_ino* %9, null, !dbg !4636
  br i1 %cmp, label %if.then, label %if.end, !dbg !4637

if.then:                                          ; preds = %entry
  call void @xalloc_die() #14, !dbg !4638
  unreachable, !dbg !4638

if.end:                                           ; preds = %entry
  %10 = load %struct.dev_ino*, %struct.dev_ino** %ent_from_table, align 8, !dbg !4640
  %11 = load %struct.dev_ino*, %struct.dev_ino** %ent, align 8, !dbg !4641
  %cmp2 = icmp ne %struct.dev_ino* %10, %11, !dbg !4642
  %frombool = zext i1 %cmp2 to i8, !dbg !4643
  store i8 %frombool, i8* %found_match, align 1, !dbg !4643
  %12 = load i8, i8* %found_match, align 1, !dbg !4644
  %tobool = trunc i8 %12 to i1, !dbg !4644
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !4646

if.then3:                                         ; preds = %if.end
  %13 = load %struct.dev_ino*, %struct.dev_ino** %ent, align 8, !dbg !4647
  %14 = bitcast %struct.dev_ino* %13 to i8*, !dbg !4647
  call void @free(i8* %14) #13, !dbg !4649
  br label %if.end4, !dbg !4650

if.end4:                                          ; preds = %if.then3, %if.end
  %15 = load i8, i8* %found_match, align 1, !dbg !4651
  %tobool5 = trunc i8 %15 to i1, !dbg !4651
  ret i1 %tobool5, !dbg !4652
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_exit_status(i1 zeroext %serious) #0 !dbg !4653 {
entry:
  %serious.addr = alloca i8, align 1
  %frombool = zext i1 %serious to i8
  store i8 %frombool, i8* %serious.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %serious.addr, metadata !4654, metadata !DIExpression()), !dbg !4655
  %0 = load i8, i8* %serious.addr, align 1, !dbg !4656
  %tobool = trunc i8 %0 to i1, !dbg !4656
  br i1 %tobool, label %if.then, label %if.else, !dbg !4658

if.then:                                          ; preds = %entry
  store i32 2, i32* @exit_status, align 4, !dbg !4659
  br label %if.end2, !dbg !4660

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @exit_status, align 4, !dbg !4661
  %cmp = icmp eq i32 %1, 0, !dbg !4663
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4664

if.then1:                                         ; preds = %if.else
  store i32 1, i32* @exit_status, align 4, !dbg !4665
  br label %if.end, !dbg !4666

if.end:                                           ; preds = %if.then1, %if.else
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then
  ret void, !dbg !4667
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_ino_push(i64 %dev, i64 %ino) #0 !dbg !4668 {
entry:
  %dev.addr = alloca i64, align 8
  %ino.addr = alloca i64, align 8
  %vdi = alloca i8*, align 8, !ctir !167
  %di = alloca %struct.dev_ino*, align 8, !ctir !264
  %dev_ino_size = alloca i32, align 4, !ctir !27
  %__o = alloca %struct.obstack*, align 8, !ctir !616
  %__len = alloca i64, align 8, !ctir !149
  %__o1 = alloca %struct.obstack*, align 8, !ctir !456
  %tmp = alloca i64, align 8
  store i64 %dev, i64* %dev.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dev.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  store i64 %ino, i64* %ino.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ino.addr, metadata !4673, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata i8** %vdi, metadata !4675, metadata !DIExpression()), !dbg !4676
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %di, metadata !4677, metadata !DIExpression()), !dbg !4678
  call void @llvm.dbg.declare(metadata i32* %dev_ino_size, metadata !4679, metadata !DIExpression()), !dbg !4680
  store i32 16, i32* %dev_ino_size, align 4, !dbg !4680
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !4681, metadata !DIExpression()), !dbg !4683
  store %struct.obstack* @dev_ino_obstack, %struct.obstack** %__o, align 8, !dbg !4683
  call void @llvm.dbg.declare(metadata i64* %__len, metadata !4684, metadata !DIExpression()), !dbg !4683
  %0 = load i32, i32* %dev_ino_size, align 4, !dbg !4683
  %conv = sext i32 %0 to i64, !dbg !4683
  store i64 %conv, i64* %__len, align 8, !dbg !4683
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o1, metadata !4685, metadata !DIExpression()), !dbg !4688
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4688
  store %struct.obstack* %1, %struct.obstack** %__o1, align 8, !dbg !4688
  %2 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4688
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 4, !dbg !4688, !ctir !457
  %3 = load i8*, i8** %chunk_limit, align 8, !dbg !4688, !ctir !143
  %4 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4688
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 3, !dbg !4688, !ctir !457
  %5 = load i8*, i8** %next_free, align 8, !dbg !4688, !ctir !143
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !4688
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !4688
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4688
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !4688
  %6 = load i64, i64* %tmp, align 8, !dbg !4688
  %7 = load i64, i64* %__len, align 8, !dbg !4689
  %cmp = icmp ult i64 %6, %7, !dbg !4689
  br i1 %cmp, label %if.then, label %if.end, !dbg !4683

if.then:                                          ; preds = %entry
  %8 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4689
  %9 = load i64, i64* %__len, align 8, !dbg !4689
  call void @_obstack_newchunk(%struct.obstack* %8, i64 %9), !dbg !4689
  br label %if.end, !dbg !4689

if.end:                                           ; preds = %if.then, %entry
  %10 = load i64, i64* %__len, align 8, !dbg !4683
  %11 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4683
  %next_free2 = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 3, !dbg !4683, !ctir !458
  %12 = load i8*, i8** %next_free2, align 8, !dbg !4683, !ctir !143
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %10, !dbg !4683, !ctir !144
  store i8* %add.ptr, i8** %next_free2, align 8, !dbg !4683, !ctir !143
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8, !dbg !4690, !ctir !143
  store i8* %13, i8** %vdi, align 8, !dbg !4691
  %14 = load i8*, i8** %vdi, align 8, !dbg !4692
  %15 = bitcast i8* %14 to %struct.dev_ino*, !dbg !4692
  store %struct.dev_ino* %15, %struct.dev_ino** %di, align 8, !dbg !4693
  %16 = load %struct.dev_ino*, %struct.dev_ino** %di, align 8, !dbg !4694
  %incdec.ptr = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %16, i32 -1, !dbg !4694, !ctir !265
  store %struct.dev_ino* %incdec.ptr, %struct.dev_ino** %di, align 8, !dbg !4694
  %17 = load i64, i64* %dev.addr, align 8, !dbg !4695
  %18 = load %struct.dev_ino*, %struct.dev_ino** %di, align 8, !dbg !4696
  %st_dev = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %18, i32 0, i32 1, !dbg !4697, !ctir !265
  store i64 %17, i64* %st_dev, align 8, !dbg !4698, !ctir !271
  %19 = load i64, i64* %ino.addr, align 8, !dbg !4699
  %20 = load %struct.dev_ino*, %struct.dev_ino** %di, align 8, !dbg !4700
  %st_ino = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %20, i32 0, i32 0, !dbg !4701, !ctir !265
  store i64 %19, i64* %st_ino, align 8, !dbg !4702, !ctir !269
  ret void, !dbg !4703
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name(i8* %name, %struct.quoting_options* %options, i32 %needs_general_quoting, %struct.bin_str* %color, i1 zeroext %allow_pad, %struct.obstack* %stack, i8* %absolute_name) #0 !dbg !4704 {
entry:
  %name.addr = alloca i8*, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %needs_general_quoting.addr = alloca i32, align 4
  %color.addr = alloca %struct.bin_str*, align 8
  %allow_pad.addr = alloca i8, align 1
  %stack.addr = alloca %struct.obstack*, align 8
  %absolute_name.addr = alloca i8*, align 8
  %smallbuf = alloca [8192 x i8], align 16, !ctir !749
  %buf = alloca i8*, align 8, !ctir !143
  %len = alloca i64, align 8, !ctir !149
  %pad = alloca i8, align 1, !ctir !141
  %skip_quotes = alloca i8, align 1, !ctir !141
  %h = alloca i8*, align 8, !ctir !143
  %n = alloca i8*, align 8, !ctir !143
  %__o = alloca %struct.obstack*, align 8, !ctir !616
  %__len = alloca i64, align 8, !ctir !149
  %__o1 = alloca %struct.obstack*, align 8, !ctir !456
  %tmp = alloca i64, align 8
  %__o49 = alloca %struct.obstack*, align 8, !ctir !616
  %__len50 = alloca i64, align 8, !ctir !149
  %__o151 = alloca %struct.obstack*, align 8, !ctir !456
  %tmp52 = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4709, metadata !DIExpression()), !dbg !4710
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %options.addr, metadata !4711, metadata !DIExpression()), !dbg !4712
  store i32 %needs_general_quoting, i32* %needs_general_quoting.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %needs_general_quoting.addr, metadata !4713, metadata !DIExpression()), !dbg !4714
  store %struct.bin_str* %color, %struct.bin_str** %color.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bin_str** %color.addr, metadata !4715, metadata !DIExpression()), !dbg !4716
  %frombool = zext i1 %allow_pad to i8
  store i8 %frombool, i8* %allow_pad.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_pad.addr, metadata !4717, metadata !DIExpression()), !dbg !4718
  store %struct.obstack* %stack, %struct.obstack** %stack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %stack.addr, metadata !4719, metadata !DIExpression()), !dbg !4720
  store i8* %absolute_name, i8** %absolute_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %absolute_name.addr, metadata !4721, metadata !DIExpression()), !dbg !4722
  call void @llvm.dbg.declare(metadata [8192 x i8]* %smallbuf, metadata !4723, metadata !DIExpression()), !dbg !4724
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !4725, metadata !DIExpression()), !dbg !4726
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %smallbuf, i64 0, i64 0, !dbg !4727, !ctir !749
  store i8* %arraydecay, i8** %buf, align 8, !dbg !4726
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4728, metadata !DIExpression()), !dbg !4729
  call void @llvm.dbg.declare(metadata i8* %pad, metadata !4730, metadata !DIExpression()), !dbg !4731
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4732
  %1 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !4733
  %2 = load i32, i32* %needs_general_quoting.addr, align 4, !dbg !4734
  %call = call i64 @quote_name_buf(i8** %buf, i64 8192, i8* %0, %struct.quoting_options* %1, i32 %2, i64* null, i8* %pad), !dbg !4735
  store i64 %call, i64* %len, align 8, !dbg !4736
  %3 = load i8, i8* %pad, align 1, !dbg !4737
  %tobool = trunc i8 %3 to i1, !dbg !4737
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4739

land.lhs.true:                                    ; preds = %entry
  %4 = load i8, i8* %allow_pad.addr, align 1, !dbg !4740
  %tobool1 = trunc i8 %4 to i1, !dbg !4740
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4741

if.then:                                          ; preds = %land.lhs.true
  br label %do.body, !dbg !4742

do.body:                                          ; preds = %if.then
  %call2 = call i32 @putchar_unlocked(i32 32), !dbg !4743
  %5 = load i64, i64* @dired_pos, align 8, !dbg !4743
  %inc = add i64 %5, 1, !dbg !4743
  store i64 %inc, i64* @dired_pos, align 8, !dbg !4743
  br label %do.end, !dbg !4743

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !4743

if.end:                                           ; preds = %do.end, %land.lhs.true, %entry
  %6 = load %struct.bin_str*, %struct.bin_str** %color.addr, align 8, !dbg !4745
  %tobool3 = icmp ne %struct.bin_str* %6, null, !dbg !4745
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !4747

if.then4:                                         ; preds = %if.end
  %7 = load %struct.bin_str*, %struct.bin_str** %color.addr, align 8, !dbg !4748
  %call5 = call zeroext i1 @print_color_indicator(%struct.bin_str* %7), !dbg !4749
  br label %if.end6, !dbg !4749

if.end6:                                          ; preds = %if.then4, %if.end
  call void @llvm.dbg.declare(metadata i8* %skip_quotes, metadata !4750, metadata !DIExpression()), !dbg !4751
  store i8 0, i8* %skip_quotes, align 1, !dbg !4751
  %8 = load i8*, i8** %absolute_name.addr, align 8, !dbg !4752
  %tobool7 = icmp ne i8* %8, null, !dbg !4752
  br i1 %tobool7, label %if.then8, label %if.end22, !dbg !4754

if.then8:                                         ; preds = %if.end6
  %9 = load i8, i8* @align_variable_outer_quotes, align 1, !dbg !4755
  %tobool9 = trunc i8 %9 to i1, !dbg !4755
  br i1 %tobool9, label %land.lhs.true10, label %if.end16, !dbg !4758

land.lhs.true10:                                  ; preds = %if.then8
  %10 = load i8, i8* @cwd_some_quoted, align 1, !dbg !4759
  %tobool11 = trunc i8 %10 to i1, !dbg !4759
  br i1 %tobool11, label %land.lhs.true12, label %if.end16, !dbg !4760

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %11 = load i8, i8* %pad, align 1, !dbg !4761
  %tobool13 = trunc i8 %11 to i1, !dbg !4761
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !4762

if.then14:                                        ; preds = %land.lhs.true12
  store i8 1, i8* %skip_quotes, align 1, !dbg !4763
  %12 = load i8*, i8** %buf, align 8, !dbg !4765
  %13 = load i8, i8* %12, align 1, !dbg !4765, !ctir !144
  %conv = sext i8 %13 to i32, !dbg !4765
  %call15 = call i32 @putchar_unlocked(i32 %conv), !dbg !4765
  br label %if.end16, !dbg !4766

if.end16:                                         ; preds = %if.then14, %land.lhs.true12, %land.lhs.true10, %if.then8
  call void @llvm.dbg.declare(metadata i8** %h, metadata !4767, metadata !DIExpression()), !dbg !4768
  %14 = load i8*, i8** @hostname, align 8, !dbg !4769
  %call17 = call i8* @file_escape(i8* %14, i1 zeroext false), !dbg !4770
  store i8* %call17, i8** %h, align 8, !dbg !4768
  call void @llvm.dbg.declare(metadata i8** %n, metadata !4771, metadata !DIExpression()), !dbg !4772
  %15 = load i8*, i8** %absolute_name.addr, align 8, !dbg !4773
  %call18 = call i8* @file_escape(i8* %15, i1 zeroext true), !dbg !4774
  store i8* %call18, i8** %n, align 8, !dbg !4772
  %16 = load i8*, i8** %h, align 8, !dbg !4775
  %17 = load i8*, i8** %n, align 8, !dbg !4776
  %18 = load i8, i8* %17, align 1, !dbg !4777, !ctir !144
  %conv19 = sext i8 %18 to i32, !dbg !4777
  %cmp = icmp eq i32 %conv19, 47, !dbg !4778
  %19 = zext i1 %cmp to i64, !dbg !4777
  %cond = select i1 %cmp, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0), !dbg !4777
  %20 = load i8*, i8** %n, align 8, !dbg !4779
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.212, i64 0, i64 0), i8* %16, i8* %cond, i8* %20), !dbg !4780
  %21 = load i8*, i8** %h, align 8, !dbg !4781
  call void @free(i8* %21) #13, !dbg !4782
  %22 = load i8*, i8** %n, align 8, !dbg !4783
  call void @free(i8* %22) #13, !dbg !4784
  br label %if.end22, !dbg !4785

if.end22:                                         ; preds = %if.end16, %if.end6
  %23 = load %struct.obstack*, %struct.obstack** %stack.addr, align 8, !dbg !4786
  %tobool23 = icmp ne %struct.obstack* %23, null, !dbg !4786
  br i1 %tobool23, label %if.then24, label %if.end36, !dbg !4788

if.then24:                                        ; preds = %if.end22
  br label %do.body25, !dbg !4789

do.body25:                                        ; preds = %if.then24
  %24 = load i8, i8* @dired, align 1, !dbg !4790
  %tobool26 = trunc i8 %24 to i1, !dbg !4790
  br i1 %tobool26, label %if.then27, label %if.end34, !dbg !4793

if.then27:                                        ; preds = %do.body25
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !4794, metadata !DIExpression()), !dbg !4796
  %25 = load %struct.obstack*, %struct.obstack** %stack.addr, align 8, !dbg !4796
  store %struct.obstack* %25, %struct.obstack** %__o, align 8, !dbg !4796
  call void @llvm.dbg.declare(metadata i64* %__len, metadata !4797, metadata !DIExpression()), !dbg !4796
  store i64 8, i64* %__len, align 8, !dbg !4796
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o1, metadata !4798, metadata !DIExpression()), !dbg !4801
  %26 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4801
  store %struct.obstack* %26, %struct.obstack** %__o1, align 8, !dbg !4801
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4801
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 4, !dbg !4801, !ctir !457
  %28 = load i8*, i8** %chunk_limit, align 8, !dbg !4801, !ctir !143
  %29 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !4801
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !4801, !ctir !457
  %30 = load i8*, i8** %next_free, align 8, !dbg !4801, !ctir !143
  %sub.ptr.lhs.cast = ptrtoint i8* %28 to i64, !dbg !4801
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64, !dbg !4801
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4801
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !4801
  %31 = load i64, i64* %tmp, align 8, !dbg !4801
  %32 = load i64, i64* %__len, align 8, !dbg !4802
  %cmp28 = icmp ult i64 %31, %32, !dbg !4802
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !4796

if.then30:                                        ; preds = %if.then27
  %33 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4802
  %34 = load i64, i64* %__len, align 8, !dbg !4802
  call void @_obstack_newchunk(%struct.obstack* %33, i64 %34), !dbg !4802
  br label %if.end31, !dbg !4802

if.end31:                                         ; preds = %if.then30, %if.then27
  %35 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4796
  %next_free32 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 3, !dbg !4796, !ctir !458
  %36 = load i8*, i8** %next_free32, align 8, !dbg !4796, !ctir !143
  %37 = load i64, i64* %__len, align 8, !dbg !4796
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 8 bitcast (i64* @dired_pos to i8*), i64 %37, i1 false), !dbg !4796
  %38 = load i64, i64* %__len, align 8, !dbg !4796
  %39 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !4796
  %next_free33 = getelementptr inbounds %struct.obstack, %struct.obstack* %39, i32 0, i32 3, !dbg !4796, !ctir !458
  %40 = load i8*, i8** %next_free33, align 8, !dbg !4796, !ctir !143
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 %38, !dbg !4796, !ctir !144
  store i8* %add.ptr, i8** %next_free33, align 8, !dbg !4796, !ctir !143
  br label %if.end34, !dbg !4790

if.end34:                                         ; preds = %if.end31, %do.body25
  br label %do.end35, !dbg !4793

do.end35:                                         ; preds = %if.end34
  br label %if.end36, !dbg !4793

if.end36:                                         ; preds = %do.end35, %if.end22
  %41 = load i8*, i8** %buf, align 8, !dbg !4803
  %42 = load i8, i8* %skip_quotes, align 1, !dbg !4803
  %tobool37 = trunc i8 %42 to i1, !dbg !4803
  %conv38 = zext i1 %tobool37 to i32, !dbg !4803
  %idx.ext = sext i32 %conv38 to i64, !dbg !4803
  %add.ptr39 = getelementptr inbounds i8, i8* %41, i64 %idx.ext, !dbg !4803, !ctir !144
  %43 = load i64, i64* %len, align 8, !dbg !4803
  %44 = load i8, i8* %skip_quotes, align 1, !dbg !4803
  %tobool40 = trunc i8 %44 to i1, !dbg !4803
  %conv41 = zext i1 %tobool40 to i32, !dbg !4803
  %mul = mul nsw i32 %conv41, 2, !dbg !4803
  %conv42 = sext i32 %mul to i64, !dbg !4803
  %sub = sub i64 %43, %conv42, !dbg !4803
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4803
  %call43 = call i64 @fwrite_unlocked(i8* %add.ptr39, i64 1, i64 %sub, %struct._IO_FILE* %45), !dbg !4803
  %46 = load i64, i64* %len, align 8, !dbg !4804
  %47 = load i64, i64* @dired_pos, align 8, !dbg !4805
  %add = add i64 %47, %46, !dbg !4805
  store i64 %add, i64* @dired_pos, align 8, !dbg !4805
  %48 = load %struct.obstack*, %struct.obstack** %stack.addr, align 8, !dbg !4806
  %tobool44 = icmp ne %struct.obstack* %48, null, !dbg !4806
  br i1 %tobool44, label %if.then45, label %if.end67, !dbg !4808

if.then45:                                        ; preds = %if.end36
  br label %do.body46, !dbg !4809

do.body46:                                        ; preds = %if.then45
  %49 = load i8, i8* @dired, align 1, !dbg !4810
  %tobool47 = trunc i8 %49 to i1, !dbg !4810
  br i1 %tobool47, label %if.then48, label %if.end65, !dbg !4813

if.then48:                                        ; preds = %do.body46
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o49, metadata !4814, metadata !DIExpression()), !dbg !4816
  %50 = load %struct.obstack*, %struct.obstack** %stack.addr, align 8, !dbg !4816
  store %struct.obstack* %50, %struct.obstack** %__o49, align 8, !dbg !4816
  call void @llvm.dbg.declare(metadata i64* %__len50, metadata !4817, metadata !DIExpression()), !dbg !4816
  store i64 8, i64* %__len50, align 8, !dbg !4816
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o151, metadata !4818, metadata !DIExpression()), !dbg !4821
  %51 = load %struct.obstack*, %struct.obstack** %__o49, align 8, !dbg !4821
  store %struct.obstack* %51, %struct.obstack** %__o151, align 8, !dbg !4821
  %52 = load %struct.obstack*, %struct.obstack** %__o151, align 8, !dbg !4821
  %chunk_limit53 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 4, !dbg !4821, !ctir !457
  %53 = load i8*, i8** %chunk_limit53, align 8, !dbg !4821, !ctir !143
  %54 = load %struct.obstack*, %struct.obstack** %__o151, align 8, !dbg !4821
  %next_free54 = getelementptr inbounds %struct.obstack, %struct.obstack* %54, i32 0, i32 3, !dbg !4821, !ctir !457
  %55 = load i8*, i8** %next_free54, align 8, !dbg !4821, !ctir !143
  %sub.ptr.lhs.cast55 = ptrtoint i8* %53 to i64, !dbg !4821
  %sub.ptr.rhs.cast56 = ptrtoint i8* %55 to i64, !dbg !4821
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56, !dbg !4821
  store i64 %sub.ptr.sub57, i64* %tmp52, align 8, !dbg !4821
  %56 = load i64, i64* %tmp52, align 8, !dbg !4821
  %57 = load i64, i64* %__len50, align 8, !dbg !4822
  %cmp58 = icmp ult i64 %56, %57, !dbg !4822
  br i1 %cmp58, label %if.then60, label %if.end61, !dbg !4816

if.then60:                                        ; preds = %if.then48
  %58 = load %struct.obstack*, %struct.obstack** %__o49, align 8, !dbg !4822
  %59 = load i64, i64* %__len50, align 8, !dbg !4822
  call void @_obstack_newchunk(%struct.obstack* %58, i64 %59), !dbg !4822
  br label %if.end61, !dbg !4822

if.end61:                                         ; preds = %if.then60, %if.then48
  %60 = load %struct.obstack*, %struct.obstack** %__o49, align 8, !dbg !4816
  %next_free62 = getelementptr inbounds %struct.obstack, %struct.obstack* %60, i32 0, i32 3, !dbg !4816, !ctir !458
  %61 = load i8*, i8** %next_free62, align 8, !dbg !4816, !ctir !143
  %62 = load i64, i64* %__len50, align 8, !dbg !4816
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 8 bitcast (i64* @dired_pos to i8*), i64 %62, i1 false), !dbg !4816
  %63 = load i64, i64* %__len50, align 8, !dbg !4816
  %64 = load %struct.obstack*, %struct.obstack** %__o49, align 8, !dbg !4816
  %next_free63 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 3, !dbg !4816, !ctir !458
  %65 = load i8*, i8** %next_free63, align 8, !dbg !4816, !ctir !143
  %add.ptr64 = getelementptr inbounds i8, i8* %65, i64 %63, !dbg !4816, !ctir !144
  store i8* %add.ptr64, i8** %next_free63, align 8, !dbg !4816, !ctir !143
  br label %if.end65, !dbg !4810

if.end65:                                         ; preds = %if.end61, %do.body46
  br label %do.end66, !dbg !4813

do.end66:                                         ; preds = %if.end65
  br label %if.end67, !dbg !4813

if.end67:                                         ; preds = %do.end66, %if.end36
  %66 = load i8*, i8** %absolute_name.addr, align 8, !dbg !4823
  %tobool68 = icmp ne i8* %66, null, !dbg !4823
  br i1 %tobool68, label %if.then69, label %if.end78, !dbg !4825

if.then69:                                        ; preds = %if.end67
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4826
  %call70 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.214, i64 0, i64 0), %struct._IO_FILE* %67), !dbg !4826
  %68 = load i8, i8* %skip_quotes, align 1, !dbg !4828
  %tobool71 = trunc i8 %68 to i1, !dbg !4828
  br i1 %tobool71, label %if.then72, label %if.end77, !dbg !4830

if.then72:                                        ; preds = %if.then69
  %69 = load i8*, i8** %buf, align 8, !dbg !4831
  %70 = load i64, i64* %len, align 8, !dbg !4831
  %add.ptr73 = getelementptr inbounds i8, i8* %69, i64 %70, !dbg !4831, !ctir !144
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr73, i64 -1, !dbg !4831, !ctir !144
  %71 = load i8, i8* %add.ptr74, align 1, !dbg !4831, !ctir !144
  %conv75 = sext i8 %71 to i32, !dbg !4831
  %call76 = call i32 @putchar_unlocked(i32 %conv75), !dbg !4831
  br label %if.end77, !dbg !4831

if.end77:                                         ; preds = %if.then72, %if.then69
  br label %if.end78, !dbg !4832

if.end78:                                         ; preds = %if.end77, %if.end67
  %72 = load i8*, i8** %buf, align 8, !dbg !4833
  %arraydecay79 = getelementptr inbounds [8192 x i8], [8192 x i8]* %smallbuf, i64 0, i64 0, !dbg !4835, !ctir !749
  %cmp80 = icmp ne i8* %72, %arraydecay79, !dbg !4836
  br i1 %cmp80, label %land.lhs.true82, label %if.end86, !dbg !4837

land.lhs.true82:                                  ; preds = %if.end78
  %73 = load i8*, i8** %buf, align 8, !dbg !4838
  %74 = load i8*, i8** %name.addr, align 8, !dbg !4839
  %cmp83 = icmp ne i8* %73, %74, !dbg !4840
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !4841

if.then85:                                        ; preds = %land.lhs.true82
  %75 = load i8*, i8** %buf, align 8, !dbg !4842
  call void @free(i8* %75) #13, !dbg !4843
  br label %if.end86, !dbg !4843

if.end86:                                         ; preds = %if.then85, %land.lhs.true82, %if.end78
  %76 = load i64, i64* %len, align 8, !dbg !4844
  %77 = load i8, i8* %pad, align 1, !dbg !4845
  %tobool87 = trunc i8 %77 to i1, !dbg !4845
  %conv88 = zext i1 %tobool87 to i64, !dbg !4845
  %add89 = add i64 %76, %conv88, !dbg !4846
  ret i64 %add89, !dbg !4847
}

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @file_ignored(i8* %name) #0 !dbg !4848 {
entry:
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4851, metadata !DIExpression()), !dbg !4852
  %0 = load i32, i32* @ignore_mode, align 4, !dbg !4853
  %cmp = icmp ne i32 %0, 2, !dbg !4854
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false11, !dbg !4855

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !4856
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !4856, !ctir !146
  %2 = load i8, i8* %arrayidx, align 1, !dbg !4856
  %conv = sext i8 %2 to i32, !dbg !4856
  %cmp1 = icmp eq i32 %conv, 46, !dbg !4857
  br i1 %cmp1, label %land.lhs.true3, label %lor.lhs.false11, !dbg !4858

land.lhs.true3:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* @ignore_mode, align 4, !dbg !4859
  %cmp4 = icmp eq i32 %3, 0, !dbg !4860
  br i1 %cmp4, label %lor.end, label %lor.lhs.false, !dbg !4861

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %4 = load i8*, i8** %name.addr, align 8, !dbg !4862
  %5 = load i8*, i8** %name.addr, align 8, !dbg !4863
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 1, !dbg !4863, !ctir !146
  %6 = load i8, i8* %arrayidx6, align 1, !dbg !4863
  %conv7 = sext i8 %6 to i32, !dbg !4863
  %cmp8 = icmp eq i32 %conv7, 46, !dbg !4864
  %conv9 = zext i1 %cmp8 to i32, !dbg !4864
  %add = add nsw i32 1, %conv9, !dbg !4865
  %idxprom = sext i32 %add to i64, !dbg !4862
  %arrayidx10 = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !4862, !ctir !146
  %7 = load i8, i8* %arrayidx10, align 1, !dbg !4862
  %tobool = icmp ne i8 %7, 0, !dbg !4862
  br i1 %tobool, label %lor.lhs.false11, label %lor.end, !dbg !4866

lor.lhs.false11:                                  ; preds = %lor.lhs.false, %land.lhs.true, %entry
  %8 = load i32, i32* @ignore_mode, align 4, !dbg !4867
  %cmp12 = icmp eq i32 %8, 0, !dbg !4868
  br i1 %cmp12, label %land.lhs.true14, label %lor.rhs, !dbg !4869

land.lhs.true14:                                  ; preds = %lor.lhs.false11
  %9 = load %struct.ignore_pattern*, %struct.ignore_pattern** @hide_patterns, align 8, !dbg !4870
  %10 = load i8*, i8** %name.addr, align 8, !dbg !4871
  %call = call zeroext i1 @patterns_match(%struct.ignore_pattern* %9, i8* %10), !dbg !4872
  br i1 %call, label %lor.end, label %lor.rhs, !dbg !4873

lor.rhs:                                          ; preds = %land.lhs.true14, %lor.lhs.false11
  %11 = load %struct.ignore_pattern*, %struct.ignore_pattern** @ignore_patterns, align 8, !dbg !4874
  %12 = load i8*, i8** %name.addr, align 8, !dbg !4875
  %call16 = call zeroext i1 @patterns_match(%struct.ignore_pattern* %11, i8* %12), !dbg !4876
  br label %lor.end, !dbg !4873

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true14, %lor.lhs.false, %land.lhs.true3
  %13 = phi i1 [ true, %land.lhs.true14 ], [ true, %lor.lhs.false ], [ true, %land.lhs.true3 ], [ %call16, %lor.rhs ]
  ret i1 %13, !dbg !4877
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @process_signals() #0 !dbg !4878 {
entry:
  %sig = alloca i32, align 4, !ctir !27
  %stops = alloca i32, align 4, !ctir !27
  %oldset = alloca %struct.__sigset_t, align 8, !ctir !509
  br label %while.cond, !dbg !4879

while.cond:                                       ; preds = %if.end7, %entry
  %0 = load volatile i32, i32* @interrupt_signal, align 4, !dbg !4880
  %tobool = icmp ne i32 %0, 0, !dbg !4880
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !4881

lor.rhs:                                          ; preds = %while.cond
  %1 = load volatile i32, i32* @stop_signal_count, align 4, !dbg !4882
  %tobool1 = icmp ne i32 %1, 0, !dbg !4881
  br label %lor.end, !dbg !4881

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %2 = phi i1 [ true, %while.cond ], [ %tobool1, %lor.rhs ]
  br i1 %2, label %while.body, label %while.end, !dbg !4879

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i32* %sig, metadata !4883, metadata !DIExpression()), !dbg !4885
  call void @llvm.dbg.declare(metadata i32* %stops, metadata !4886, metadata !DIExpression()), !dbg !4887
  call void @llvm.dbg.declare(metadata %struct.__sigset_t* %oldset, metadata !4888, metadata !DIExpression()), !dbg !4889
  %3 = load i8, i8* @used_color, align 1, !dbg !4890
  %tobool2 = trunc i8 %3 to i1, !dbg !4890
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4892

if.then:                                          ; preds = %while.body
  call void @restore_default_color(), !dbg !4893
  br label %if.end, !dbg !4893

if.end:                                           ; preds = %if.then, %while.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !4894
  %call = call i32 @fflush_unlocked(%struct._IO_FILE* %4), !dbg !4894
  %call3 = call i32 @sigprocmask(i32 0, %struct.__sigset_t* @caught_signals, %struct.__sigset_t* %oldset) #13, !dbg !4895
  %5 = load volatile i32, i32* @interrupt_signal, align 4, !dbg !4896
  store i32 %5, i32* %sig, align 4, !dbg !4897
  %6 = load volatile i32, i32* @stop_signal_count, align 4, !dbg !4898
  store i32 %6, i32* %stops, align 4, !dbg !4899
  %7 = load i32, i32* %stops, align 4, !dbg !4900
  %tobool4 = icmp ne i32 %7, 0, !dbg !4900
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !4902

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %stops, align 4, !dbg !4903
  %sub = sub nsw i32 %8, 1, !dbg !4905
  store volatile i32 %sub, i32* @stop_signal_count, align 4, !dbg !4906
  store i32 19, i32* %sig, align 4, !dbg !4907
  br label %if.end7, !dbg !4908

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %sig, align 4, !dbg !4909
  %call6 = call void (i32)* @signal(i32 %9, void (i32)* null) #13, !dbg !4910
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then5
  %10 = load i32, i32* %sig, align 4, !dbg !4911
  %call8 = call i32 @raise(i32 %10) #13, !dbg !4912
  %call9 = call i32 @sigprocmask(i32 2, %struct.__sigset_t* %oldset, %struct.__sigset_t* null) #13, !dbg !4913
  br label %while.cond, !dbg !4879, !llvm.loop !4914

while.end:                                        ; preds = %lor.end
  ret void, !dbg !4916
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #5

; Function Attrs: nounwind
declare dso_local i32 @sigprocmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @patterns_match(%struct.ignore_pattern* %patterns, i8* %file) #0 !dbg !4917 {
entry:
  %retval = alloca i1, align 1
  %patterns.addr = alloca %struct.ignore_pattern*, align 8
  %file.addr = alloca i8*, align 8
  %p = alloca %struct.ignore_pattern*, align 8, !ctir !765
  store %struct.ignore_pattern* %patterns, %struct.ignore_pattern** %patterns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ignore_pattern** %patterns.addr, metadata !4920, metadata !DIExpression()), !dbg !4921
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !4922, metadata !DIExpression()), !dbg !4923
  call void @llvm.dbg.declare(metadata %struct.ignore_pattern** %p, metadata !4924, metadata !DIExpression()), !dbg !4925
  %0 = load %struct.ignore_pattern*, %struct.ignore_pattern** %patterns.addr, align 8, !dbg !4926
  store %struct.ignore_pattern* %0, %struct.ignore_pattern** %p, align 8, !dbg !4928
  br label %for.cond, !dbg !4929

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.ignore_pattern*, %struct.ignore_pattern** %p, align 8, !dbg !4930
  %tobool = icmp ne %struct.ignore_pattern* %1, null, !dbg !4932
  br i1 %tobool, label %for.body, label %for.end, !dbg !4932

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ignore_pattern*, %struct.ignore_pattern** %p, align 8, !dbg !4933
  %pattern = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %2, i32 0, i32 0, !dbg !4935, !ctir !766
  %3 = load i8*, i8** %pattern, align 8, !dbg !4935, !ctir !146
  %4 = load i8*, i8** %file.addr, align 8, !dbg !4936
  %call = call i32 @fnmatch(i8* %3, i8* %4, i32 4), !dbg !4937
  %cmp = icmp eq i32 %call, 0, !dbg !4938
  br i1 %cmp, label %if.then, label %if.end, !dbg !4939

if.then:                                          ; preds = %for.body
  store i1 true, i1* %retval, align 1, !dbg !4940
  br label %return, !dbg !4940

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4941

for.inc:                                          ; preds = %if.end
  %5 = load %struct.ignore_pattern*, %struct.ignore_pattern** %p, align 8, !dbg !4942
  %next = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %5, i32 0, i32 1, !dbg !4943, !ctir !766
  %6 = load %struct.ignore_pattern*, %struct.ignore_pattern** %next, align 8, !dbg !4943, !ctir !617
  store %struct.ignore_pattern* %6, %struct.ignore_pattern** %p, align 8, !dbg !4944
  br label %for.cond, !dbg !4945, !llvm.loop !4946

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval, align 1, !dbg !4948
  br label %return, !dbg !4948

return:                                           ; preds = %for.end, %if.then
  %7 = load i1, i1* %retval, align 1, !dbg !4949
  ret i1 %7, !dbg !4949
}

declare dso_local i32 @fnmatch(i8*, i8*, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name_buf(i8** %inbuf, i64 %bufsize, i8* %name, %struct.quoting_options* %options, i32 %needs_general_quoting, i64* %width, i8* %pad) #0 !dbg !4950 {
entry:
  %inbuf.addr = alloca i8**, align 8
  %bufsize.addr = alloca i64, align 8
  %name.addr = alloca i8*, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %needs_general_quoting.addr = alloca i32, align 4
  %width.addr = alloca i64*, align 8
  %pad.addr = alloca i8*, align 8
  %buf = alloca i8*, align 8, !ctir !143
  %displayed_width = alloca i64, align 8, !ctir !149
  %len = alloca i64, align 8, !ctir !149
  %quoted = alloca i8, align 1, !ctir !141
  %qs = alloca i32, align 4, !ctir !95
  %needs_further_quoting = alloca i8, align 1, !ctir !141
  %p = alloca i8*, align 8, !ctir !146
  %plimit = alloca i8*, align 8, !ctir !146
  %q = alloca i8*, align 8, !ctir !143
  %mbstate = alloca %struct.__mbstate_t, align 4, !ctir !752
  %wc = alloca i32, align 4, !ctir !764
  %bytes = alloca i64, align 8, !ctir !149
  %w = alloca i32, align 4, !ctir !27
  %p83 = alloca i8*, align 8, !ctir !143
  %plimit84 = alloca i8*, align 8, !ctir !146
  %p111 = alloca i8*, align 8, !ctir !146
  %plimit112 = alloca i8*, align 8, !ctir !146
  store i8** %inbuf, i8*** %inbuf.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %inbuf.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  store i64 %bufsize, i64* %bufsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bufsize.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4958, metadata !DIExpression()), !dbg !4959
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %options.addr, metadata !4960, metadata !DIExpression()), !dbg !4961
  store i32 %needs_general_quoting, i32* %needs_general_quoting.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %needs_general_quoting.addr, metadata !4962, metadata !DIExpression()), !dbg !4963
  store i64* %width, i64** %width.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %width.addr, metadata !4964, metadata !DIExpression()), !dbg !4965
  store i8* %pad, i8** %pad.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pad.addr, metadata !4966, metadata !DIExpression()), !dbg !4967
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !4968, metadata !DIExpression()), !dbg !4969
  %0 = load i8**, i8*** %inbuf.addr, align 8, !dbg !4970
  %1 = load i8*, i8** %0, align 8, !dbg !4971, !ctir !143
  store i8* %1, i8** %buf, align 8, !dbg !4969
  call void @llvm.dbg.declare(metadata i64* %displayed_width, metadata !4972, metadata !DIExpression()), !dbg !4973
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4974, metadata !DIExpression()), !dbg !4975
  store i64 0, i64* %len, align 8, !dbg !4975
  call void @llvm.dbg.declare(metadata i8* %quoted, metadata !4976, metadata !DIExpression()), !dbg !4977
  call void @llvm.dbg.declare(metadata i32* %qs, metadata !4978, metadata !DIExpression()), !dbg !4979
  %2 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !4980
  %call = call i32 @get_quoting_style(%struct.quoting_options* %2), !dbg !4981
  store i32 %call, i32* %qs, align 4, !dbg !4979
  call void @llvm.dbg.declare(metadata i8* %needs_further_quoting, metadata !4982, metadata !DIExpression()), !dbg !4983
  %3 = load i8, i8* @qmark_funny_chars, align 1, !dbg !4984
  %tobool = trunc i8 %3 to i1, !dbg !4984
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4985

land.rhs:                                         ; preds = %entry
  %4 = load i32, i32* %qs, align 4, !dbg !4986
  %cmp = icmp eq i32 %4, 1, !dbg !4987
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !4988

lor.lhs.false:                                    ; preds = %land.rhs
  %5 = load i32, i32* %qs, align 4, !dbg !4989
  %cmp1 = icmp eq i32 %5, 2, !dbg !4990
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !4991

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load i32, i32* %qs, align 4, !dbg !4992
  %cmp2 = icmp eq i32 %6, 0, !dbg !4993
  br label %lor.end, !dbg !4991

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %7 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %8 = phi i1 [ false, %entry ], [ %7, %lor.end ], !dbg !4994
  %frombool = zext i1 %8 to i8, !dbg !4983
  store i8 %frombool, i8* %needs_further_quoting, align 1, !dbg !4983
  %9 = load i32, i32* %needs_general_quoting.addr, align 4, !dbg !4995
  %cmp3 = icmp ne i32 %9, 0, !dbg !4997
  br i1 %cmp3, label %if.then, label %if.else, !dbg !4998

if.then:                                          ; preds = %land.end
  %10 = load i8*, i8** %buf, align 8, !dbg !4999
  %11 = load i64, i64* %bufsize.addr, align 8, !dbg !5001
  %12 = load i8*, i8** %name.addr, align 8, !dbg !5002
  %13 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !5003
  %call4 = call i64 @quotearg_buffer(i8* %10, i64 %11, i8* %12, i64 -1, %struct.quoting_options* %13), !dbg !5004
  store i64 %call4, i64* %len, align 8, !dbg !5005
  %14 = load i64, i64* %bufsize.addr, align 8, !dbg !5006
  %15 = load i64, i64* %len, align 8, !dbg !5008
  %cmp5 = icmp ule i64 %14, %15, !dbg !5009
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !5010

if.then6:                                         ; preds = %if.then
  %16 = load i64, i64* %len, align 8, !dbg !5011
  %add = add i64 %16, 1, !dbg !5013
  %call7 = call noalias i8* @xmalloc(i64 %add), !dbg !5014
  store i8* %call7, i8** %buf, align 8, !dbg !5015
  %17 = load i8*, i8** %buf, align 8, !dbg !5016
  %18 = load i64, i64* %len, align 8, !dbg !5017
  %add8 = add i64 %18, 1, !dbg !5018
  %19 = load i8*, i8** %name.addr, align 8, !dbg !5019
  %20 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !5020
  %call9 = call i64 @quotearg_buffer(i8* %17, i64 %add8, i8* %19, i64 -1, %struct.quoting_options* %20), !dbg !5021
  br label %if.end, !dbg !5022

if.end:                                           ; preds = %if.then6, %if.then
  %21 = load i8*, i8** %name.addr, align 8, !dbg !5023
  %22 = load i8, i8* %21, align 1, !dbg !5024, !ctir !144
  %conv = sext i8 %22 to i32, !dbg !5024
  %23 = load i8*, i8** %buf, align 8, !dbg !5025
  %24 = load i8, i8* %23, align 1, !dbg !5026, !ctir !144
  %conv10 = sext i8 %24 to i32, !dbg !5026
  %cmp11 = icmp ne i32 %conv, %conv10, !dbg !5027
  br i1 %cmp11, label %lor.end17, label %lor.rhs13, !dbg !5028

lor.rhs13:                                        ; preds = %if.end
  %25 = load i8*, i8** %name.addr, align 8, !dbg !5029
  %call14 = call i64 @strlen(i8* %25) #16, !dbg !5030
  %26 = load i64, i64* %len, align 8, !dbg !5031
  %cmp15 = icmp ne i64 %call14, %26, !dbg !5032
  br label %lor.end17, !dbg !5028

lor.end17:                                        ; preds = %lor.rhs13, %if.end
  %27 = phi i1 [ true, %if.end ], [ %cmp15, %lor.rhs13 ]
  %frombool18 = zext i1 %27 to i8, !dbg !5033
  store i8 %frombool18, i8* %quoted, align 1, !dbg !5033
  br label %if.end32, !dbg !5034

if.else:                                          ; preds = %land.end
  %28 = load i8, i8* %needs_further_quoting, align 1, !dbg !5035
  %tobool19 = trunc i8 %28 to i1, !dbg !5035
  br i1 %tobool19, label %if.then20, label %if.else29, !dbg !5037

if.then20:                                        ; preds = %if.else
  %29 = load i8*, i8** %name.addr, align 8, !dbg !5038
  %call21 = call i64 @strlen(i8* %29) #16, !dbg !5040
  store i64 %call21, i64* %len, align 8, !dbg !5041
  %30 = load i64, i64* %bufsize.addr, align 8, !dbg !5042
  %31 = load i64, i64* %len, align 8, !dbg !5044
  %cmp22 = icmp ule i64 %30, %31, !dbg !5045
  br i1 %cmp22, label %if.then24, label %if.end27, !dbg !5046

if.then24:                                        ; preds = %if.then20
  %32 = load i64, i64* %len, align 8, !dbg !5047
  %add25 = add i64 %32, 1, !dbg !5048
  %call26 = call noalias i8* @xmalloc(i64 %add25), !dbg !5049
  store i8* %call26, i8** %buf, align 8, !dbg !5050
  br label %if.end27, !dbg !5051

if.end27:                                         ; preds = %if.then24, %if.then20
  %33 = load i8*, i8** %buf, align 8, !dbg !5052
  %34 = load i8*, i8** %name.addr, align 8, !dbg !5053
  %35 = load i64, i64* %len, align 8, !dbg !5054
  %add28 = add i64 %35, 1, !dbg !5055
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %34, i64 %add28, i1 false), !dbg !5056
  store i8 0, i8* %quoted, align 1, !dbg !5057
  br label %if.end31, !dbg !5058

if.else29:                                        ; preds = %if.else
  %36 = load i8*, i8** %name.addr, align 8, !dbg !5059
  %call30 = call i64 @strlen(i8* %36) #16, !dbg !5061
  store i64 %call30, i64* %len, align 8, !dbg !5062
  %37 = load i8*, i8** %name.addr, align 8, !dbg !5063
  store i8* %37, i8** %buf, align 8, !dbg !5064
  store i8 0, i8* %quoted, align 1, !dbg !5065
  br label %if.end31

if.end31:                                         ; preds = %if.else29, %if.end27
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %lor.end17
  %38 = load i8, i8* %needs_further_quoting, align 1, !dbg !5066
  %tobool33 = trunc i8 %38 to i1, !dbg !5066
  br i1 %tobool33, label %if.then34, label %if.else100, !dbg !5068

if.then34:                                        ; preds = %if.end32
  %call35 = call i64 @__ctype_get_mb_cur_max() #13, !dbg !5069
  %cmp36 = icmp ugt i64 %call35, 1, !dbg !5072
  br i1 %cmp36, label %if.then38, label %if.else82, !dbg !5073

if.then38:                                        ; preds = %if.then34
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5074, metadata !DIExpression()), !dbg !5076
  %39 = load i8*, i8** %buf, align 8, !dbg !5077
  store i8* %39, i8** %p, align 8, !dbg !5076
  call void @llvm.dbg.declare(metadata i8** %plimit, metadata !5078, metadata !DIExpression()), !dbg !5079
  %40 = load i8*, i8** %buf, align 8, !dbg !5080
  %41 = load i64, i64* %len, align 8, !dbg !5081
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !5082, !ctir !144
  store i8* %add.ptr, i8** %plimit, align 8, !dbg !5079
  call void @llvm.dbg.declare(metadata i8** %q, metadata !5083, metadata !DIExpression()), !dbg !5084
  %42 = load i8*, i8** %buf, align 8, !dbg !5085
  store i8* %42, i8** %q, align 8, !dbg !5084
  store i64 0, i64* %displayed_width, align 8, !dbg !5086
  br label %while.cond, !dbg !5087

while.cond:                                       ; preds = %sw.epilog, %if.then38
  %43 = load i8*, i8** %p, align 8, !dbg !5088
  %44 = load i8*, i8** %plimit, align 8, !dbg !5089
  %cmp39 = icmp ult i8* %43, %44, !dbg !5090
  br i1 %cmp39, label %while.body, label %while.end, !dbg !5087

while.body:                                       ; preds = %while.cond
  %45 = load i8*, i8** %p, align 8, !dbg !5091
  %46 = load i8, i8* %45, align 1, !dbg !5092, !ctir !147
  %conv41 = sext i8 %46 to i32, !dbg !5092
  switch i32 %conv41, label %sw.default [
    i32 32, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ], !dbg !5093

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %47 = load i8*, i8** %p, align 8, !dbg !5094
  %incdec.ptr = getelementptr inbounds i8, i8* %47, i32 1, !dbg !5094, !ctir !147
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5094
  %48 = load i8, i8* %47, align 1, !dbg !5096, !ctir !147
  %49 = load i8*, i8** %q, align 8, !dbg !5097
  %incdec.ptr42 = getelementptr inbounds i8, i8* %49, i32 1, !dbg !5097, !ctir !144
  store i8* %incdec.ptr42, i8** %q, align 8, !dbg !5097
  store i8 %48, i8* %49, align 1, !dbg !5098, !ctir !144
  %50 = load i64, i64* %displayed_width, align 8, !dbg !5099
  %add43 = add i64 %50, 1, !dbg !5099
  store i64 %add43, i64* %displayed_width, align 8, !dbg !5099
  br label %sw.epilog, !dbg !5100

sw.default:                                       ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %mbstate, metadata !5101, metadata !DIExpression()), !dbg !5103
  %51 = bitcast %struct.__mbstate_t* %mbstate to i8*, !dbg !5103
  call void @llvm.memset.p0i8.i64(i8* align 4 %51, i8 0, i64 8, i1 false), !dbg !5103
  br label %do.body, !dbg !5104

do.body:                                          ; preds = %do.cond, %sw.default
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !5105, metadata !DIExpression()), !dbg !5107
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !5108, metadata !DIExpression()), !dbg !5109
  call void @llvm.dbg.declare(metadata i32* %w, metadata !5110, metadata !DIExpression()), !dbg !5111
  %52 = load i8*, i8** %p, align 8, !dbg !5112
  %53 = load i8*, i8** %plimit, align 8, !dbg !5113
  %54 = load i8*, i8** %p, align 8, !dbg !5114
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64, !dbg !5115
  %sub.ptr.rhs.cast = ptrtoint i8* %54 to i64, !dbg !5115
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5115
  %call44 = call i64 @rpl_mbrtowc(i32* %wc, i8* %52, i64 %sub.ptr.sub, %struct.__mbstate_t* %mbstate), !dbg !5116
  store i64 %call44, i64* %bytes, align 8, !dbg !5117
  %55 = load i64, i64* %bytes, align 8, !dbg !5118
  %cmp45 = icmp eq i64 %55, -1, !dbg !5120
  br i1 %cmp45, label %if.then47, label %if.end51, !dbg !5121

if.then47:                                        ; preds = %do.body
  %56 = load i8*, i8** %p, align 8, !dbg !5122
  %incdec.ptr48 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !5122, !ctir !147
  store i8* %incdec.ptr48, i8** %p, align 8, !dbg !5122
  %57 = load i8*, i8** %q, align 8, !dbg !5124
  %incdec.ptr49 = getelementptr inbounds i8, i8* %57, i32 1, !dbg !5124, !ctir !144
  store i8* %incdec.ptr49, i8** %q, align 8, !dbg !5124
  store i8 63, i8* %57, align 1, !dbg !5125, !ctir !144
  %58 = load i64, i64* %displayed_width, align 8, !dbg !5126
  %add50 = add i64 %58, 1, !dbg !5126
  store i64 %add50, i64* %displayed_width, align 8, !dbg !5126
  br label %do.end, !dbg !5127

if.end51:                                         ; preds = %do.body
  %59 = load i64, i64* %bytes, align 8, !dbg !5128
  %cmp52 = icmp eq i64 %59, -2, !dbg !5130
  br i1 %cmp52, label %if.then54, label %if.end57, !dbg !5131

if.then54:                                        ; preds = %if.end51
  %60 = load i8*, i8** %plimit, align 8, !dbg !5132
  store i8* %60, i8** %p, align 8, !dbg !5134
  %61 = load i8*, i8** %q, align 8, !dbg !5135
  %incdec.ptr55 = getelementptr inbounds i8, i8* %61, i32 1, !dbg !5135, !ctir !144
  store i8* %incdec.ptr55, i8** %q, align 8, !dbg !5135
  store i8 63, i8* %61, align 1, !dbg !5136, !ctir !144
  %62 = load i64, i64* %displayed_width, align 8, !dbg !5137
  %add56 = add i64 %62, 1, !dbg !5137
  store i64 %add56, i64* %displayed_width, align 8, !dbg !5137
  br label %do.end, !dbg !5138

if.end57:                                         ; preds = %if.end51
  %63 = load i64, i64* %bytes, align 8, !dbg !5139
  %cmp58 = icmp eq i64 %63, 0, !dbg !5141
  br i1 %cmp58, label %if.then60, label %if.end61, !dbg !5142

if.then60:                                        ; preds = %if.end57
  store i64 1, i64* %bytes, align 8, !dbg !5143
  br label %if.end61, !dbg !5144

if.end61:                                         ; preds = %if.then60, %if.end57
  %64 = load i32, i32* %wc, align 4, !dbg !5145
  %call62 = call i32 @wcwidth(i32 %64) #13, !dbg !5146
  store i32 %call62, i32* %w, align 4, !dbg !5147
  %65 = load i32, i32* %w, align 4, !dbg !5148
  %cmp63 = icmp sge i32 %65, 0, !dbg !5150
  br i1 %cmp63, label %if.then65, label %if.else72, !dbg !5151

if.then65:                                        ; preds = %if.end61
  br label %for.cond, !dbg !5152

for.cond:                                         ; preds = %for.inc, %if.then65
  %66 = load i64, i64* %bytes, align 8, !dbg !5154
  %cmp66 = icmp ugt i64 %66, 0, !dbg !5157
  br i1 %cmp66, label %for.body, label %for.end, !dbg !5158

for.body:                                         ; preds = %for.cond
  %67 = load i8*, i8** %p, align 8, !dbg !5159
  %incdec.ptr68 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !5159, !ctir !147
  store i8* %incdec.ptr68, i8** %p, align 8, !dbg !5159
  %68 = load i8, i8* %67, align 1, !dbg !5160, !ctir !147
  %69 = load i8*, i8** %q, align 8, !dbg !5161
  %incdec.ptr69 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !5161, !ctir !144
  store i8* %incdec.ptr69, i8** %q, align 8, !dbg !5161
  store i8 %68, i8* %69, align 1, !dbg !5162, !ctir !144
  br label %for.inc, !dbg !5163

for.inc:                                          ; preds = %for.body
  %70 = load i64, i64* %bytes, align 8, !dbg !5164
  %dec = add i64 %70, -1, !dbg !5164
  store i64 %dec, i64* %bytes, align 8, !dbg !5164
  br label %for.cond, !dbg !5165, !llvm.loop !5166

for.end:                                          ; preds = %for.cond
  %71 = load i32, i32* %w, align 4, !dbg !5168
  %conv70 = sext i32 %71 to i64, !dbg !5168
  %72 = load i64, i64* %displayed_width, align 8, !dbg !5169
  %add71 = add i64 %72, %conv70, !dbg !5169
  store i64 %add71, i64* %displayed_width, align 8, !dbg !5169
  br label %if.end76, !dbg !5170

if.else72:                                        ; preds = %if.end61
  %73 = load i64, i64* %bytes, align 8, !dbg !5171
  %74 = load i8*, i8** %p, align 8, !dbg !5173
  %add.ptr73 = getelementptr inbounds i8, i8* %74, i64 %73, !dbg !5173, !ctir !147
  store i8* %add.ptr73, i8** %p, align 8, !dbg !5173
  %75 = load i8*, i8** %q, align 8, !dbg !5174
  %incdec.ptr74 = getelementptr inbounds i8, i8* %75, i32 1, !dbg !5174, !ctir !144
  store i8* %incdec.ptr74, i8** %q, align 8, !dbg !5174
  store i8 63, i8* %75, align 1, !dbg !5175, !ctir !144
  %76 = load i64, i64* %displayed_width, align 8, !dbg !5176
  %add75 = add i64 %76, 1, !dbg !5176
  store i64 %add75, i64* %displayed_width, align 8, !dbg !5176
  br label %if.end76

if.end76:                                         ; preds = %if.else72, %for.end
  br label %do.cond, !dbg !5177

do.cond:                                          ; preds = %if.end76
  %call77 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #16, !dbg !5178
  %tobool78 = icmp ne i32 %call77, 0, !dbg !5179
  %lnot = xor i1 %tobool78, true, !dbg !5179
  br i1 %lnot, label %do.body, label %do.end, !dbg !5177, !llvm.loop !5180

do.end:                                           ; preds = %do.cond, %if.then54, %if.then47
  br label %sw.epilog, !dbg !5182

sw.epilog:                                        ; preds = %do.end, %sw.bb
  br label %while.cond, !dbg !5087, !llvm.loop !5183

while.end:                                        ; preds = %while.cond
  %77 = load i8*, i8** %q, align 8, !dbg !5185
  %78 = load i8*, i8** %buf, align 8, !dbg !5186
  %sub.ptr.lhs.cast79 = ptrtoint i8* %77 to i64, !dbg !5187
  %sub.ptr.rhs.cast80 = ptrtoint i8* %78 to i64, !dbg !5187
  %sub.ptr.sub81 = sub i64 %sub.ptr.lhs.cast79, %sub.ptr.rhs.cast80, !dbg !5187
  store i64 %sub.ptr.sub81, i64* %len, align 8, !dbg !5188
  br label %if.end99, !dbg !5189

if.else82:                                        ; preds = %if.then34
  call void @llvm.dbg.declare(metadata i8** %p83, metadata !5190, metadata !DIExpression()), !dbg !5192
  %79 = load i8*, i8** %buf, align 8, !dbg !5193
  store i8* %79, i8** %p83, align 8, !dbg !5192
  call void @llvm.dbg.declare(metadata i8** %plimit84, metadata !5194, metadata !DIExpression()), !dbg !5195
  %80 = load i8*, i8** %buf, align 8, !dbg !5196
  %81 = load i64, i64* %len, align 8, !dbg !5197
  %add.ptr85 = getelementptr inbounds i8, i8* %80, i64 %81, !dbg !5198, !ctir !144
  store i8* %add.ptr85, i8** %plimit84, align 8, !dbg !5195
  br label %while.cond86, !dbg !5199

while.cond86:                                     ; preds = %if.end96, %if.else82
  %82 = load i8*, i8** %p83, align 8, !dbg !5200
  %83 = load i8*, i8** %plimit84, align 8, !dbg !5201
  %cmp87 = icmp ult i8* %82, %83, !dbg !5202
  br i1 %cmp87, label %while.body89, label %while.end98, !dbg !5199

while.body89:                                     ; preds = %while.cond86
  %call90 = call i16** @__ctype_b_loc() #17, !dbg !5203
  %84 = load i16*, i16** %call90, align 8, !dbg !5203, !ctir !708
  %85 = load i8*, i8** %p83, align 8, !dbg !5203
  %86 = load i8, i8* %85, align 1, !dbg !5203, !ctir !144
  %call91 = call zeroext i8 @to_uchar(i8 signext %86), !dbg !5203
  %conv92 = zext i8 %call91 to i32, !dbg !5203
  %idxprom = sext i32 %conv92 to i64, !dbg !5203
  %arrayidx = getelementptr inbounds i16, i16* %84, i64 %idxprom, !dbg !5203, !ctir !708
  %87 = load i16, i16* %arrayidx, align 2, !dbg !5203
  %conv93 = zext i16 %87 to i32, !dbg !5203
  %and = and i32 %conv93, 16384, !dbg !5203
  %tobool94 = icmp ne i32 %and, 0, !dbg !5203
  br i1 %tobool94, label %if.end96, label %if.then95, !dbg !5206

if.then95:                                        ; preds = %while.body89
  %88 = load i8*, i8** %p83, align 8, !dbg !5207
  store i8 63, i8* %88, align 1, !dbg !5208, !ctir !144
  br label %if.end96, !dbg !5209

if.end96:                                         ; preds = %if.then95, %while.body89
  %89 = load i8*, i8** %p83, align 8, !dbg !5210
  %incdec.ptr97 = getelementptr inbounds i8, i8* %89, i32 1, !dbg !5210, !ctir !144
  store i8* %incdec.ptr97, i8** %p83, align 8, !dbg !5210
  br label %while.cond86, !dbg !5199, !llvm.loop !5211

while.end98:                                      ; preds = %while.cond86
  %90 = load i64, i64* %len, align 8, !dbg !5213
  store i64 %90, i64* %displayed_width, align 8, !dbg !5214
  br label %if.end99

if.end99:                                         ; preds = %while.end98, %while.end
  br label %if.end132, !dbg !5215

if.else100:                                       ; preds = %if.end32
  %91 = load i64*, i64** %width.addr, align 8, !dbg !5216
  %cmp101 = icmp ne i64* %91, null, !dbg !5218
  br i1 %cmp101, label %if.then103, label %if.end131, !dbg !5219

if.then103:                                       ; preds = %if.else100
  %call104 = call i64 @__ctype_get_mb_cur_max() #13, !dbg !5220
  %cmp105 = icmp ugt i64 %call104, 1, !dbg !5223
  br i1 %cmp105, label %if.then107, label %if.else110, !dbg !5224

if.then107:                                       ; preds = %if.then103
  %92 = load i8*, i8** %buf, align 8, !dbg !5225
  %93 = load i64, i64* %len, align 8, !dbg !5226
  %call108 = call i32 @mbsnwidth(i8* %92, i64 %93, i32 0), !dbg !5227
  %conv109 = sext i32 %call108 to i64, !dbg !5227
  store i64 %conv109, i64* %displayed_width, align 8, !dbg !5228
  br label %if.end130, !dbg !5229

if.else110:                                       ; preds = %if.then103
  call void @llvm.dbg.declare(metadata i8** %p111, metadata !5230, metadata !DIExpression()), !dbg !5232
  %94 = load i8*, i8** %buf, align 8, !dbg !5233
  store i8* %94, i8** %p111, align 8, !dbg !5232
  call void @llvm.dbg.declare(metadata i8** %plimit112, metadata !5234, metadata !DIExpression()), !dbg !5235
  %95 = load i8*, i8** %buf, align 8, !dbg !5236
  %96 = load i64, i64* %len, align 8, !dbg !5237
  %add.ptr113 = getelementptr inbounds i8, i8* %95, i64 %96, !dbg !5238, !ctir !144
  store i8* %add.ptr113, i8** %plimit112, align 8, !dbg !5235
  store i64 0, i64* %displayed_width, align 8, !dbg !5239
  br label %while.cond114, !dbg !5240

while.cond114:                                    ; preds = %if.end127, %if.else110
  %97 = load i8*, i8** %p111, align 8, !dbg !5241
  %98 = load i8*, i8** %plimit112, align 8, !dbg !5242
  %cmp115 = icmp ult i8* %97, %98, !dbg !5243
  br i1 %cmp115, label %while.body117, label %while.end129, !dbg !5240

while.body117:                                    ; preds = %while.cond114
  %call118 = call i16** @__ctype_b_loc() #17, !dbg !5244
  %99 = load i16*, i16** %call118, align 8, !dbg !5244, !ctir !708
  %100 = load i8*, i8** %p111, align 8, !dbg !5244
  %101 = load i8, i8* %100, align 1, !dbg !5244, !ctir !147
  %call119 = call zeroext i8 @to_uchar(i8 signext %101), !dbg !5244
  %conv120 = zext i8 %call119 to i32, !dbg !5244
  %idxprom121 = sext i32 %conv120 to i64, !dbg !5244
  %arrayidx122 = getelementptr inbounds i16, i16* %99, i64 %idxprom121, !dbg !5244, !ctir !708
  %102 = load i16, i16* %arrayidx122, align 2, !dbg !5244
  %conv123 = zext i16 %102 to i32, !dbg !5244
  %and124 = and i32 %conv123, 16384, !dbg !5244
  %tobool125 = icmp ne i32 %and124, 0, !dbg !5244
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !5247

if.then126:                                       ; preds = %while.body117
  %103 = load i64, i64* %displayed_width, align 8, !dbg !5248
  %inc = add i64 %103, 1, !dbg !5248
  store i64 %inc, i64* %displayed_width, align 8, !dbg !5248
  br label %if.end127, !dbg !5249

if.end127:                                        ; preds = %if.then126, %while.body117
  %104 = load i8*, i8** %p111, align 8, !dbg !5250
  %incdec.ptr128 = getelementptr inbounds i8, i8* %104, i32 1, !dbg !5250, !ctir !147
  store i8* %incdec.ptr128, i8** %p111, align 8, !dbg !5250
  br label %while.cond114, !dbg !5240, !llvm.loop !5251

while.end129:                                     ; preds = %while.cond114
  br label %if.end130

if.end130:                                        ; preds = %while.end129, %if.then107
  br label %if.end131, !dbg !5253

if.end131:                                        ; preds = %if.end130, %if.else100
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end99
  %105 = load i8, i8* @align_variable_outer_quotes, align 1, !dbg !5254
  %tobool133 = trunc i8 %105 to i1, !dbg !5254
  br i1 %tobool133, label %land.lhs.true, label %land.end140, !dbg !5255

land.lhs.true:                                    ; preds = %if.end132
  %106 = load i8, i8* @cwd_some_quoted, align 1, !dbg !5256
  %tobool135 = trunc i8 %106 to i1, !dbg !5256
  br i1 %tobool135, label %land.rhs137, label %land.end140, !dbg !5257

land.rhs137:                                      ; preds = %land.lhs.true
  %107 = load i8, i8* %quoted, align 1, !dbg !5258
  %tobool138 = trunc i8 %107 to i1, !dbg !5258
  %lnot139 = xor i1 %tobool138, true, !dbg !5259
  br label %land.end140

land.end140:                                      ; preds = %land.rhs137, %land.lhs.true, %if.end132
  %108 = phi i1 [ false, %land.lhs.true ], [ false, %if.end132 ], [ %lnot139, %land.rhs137 ], !dbg !4994
  %109 = load i8*, i8** %pad.addr, align 8, !dbg !5260
  %frombool141 = zext i1 %108 to i8, !dbg !5261
  store i8 %frombool141, i8* %109, align 1, !dbg !5261, !ctir !141
  %110 = load i64*, i64** %width.addr, align 8, !dbg !5262
  %cmp142 = icmp ne i64* %110, null, !dbg !5264
  br i1 %cmp142, label %if.then144, label %if.end145, !dbg !5265

if.then144:                                       ; preds = %land.end140
  %111 = load i64, i64* %displayed_width, align 8, !dbg !5266
  %112 = load i64*, i64** %width.addr, align 8, !dbg !5267
  store i64 %111, i64* %112, align 8, !dbg !5268, !ctir !149
  br label %if.end145, !dbg !5269

if.end145:                                        ; preds = %if.then144, %land.end140
  %113 = load i8*, i8** %buf, align 8, !dbg !5270
  %114 = load i8**, i8*** %inbuf.addr, align 8, !dbg !5271
  store i8* %113, i8** %114, align 8, !dbg !5272, !ctir !143
  %115 = load i64, i64* %len, align 8, !dbg !5273
  ret i64 %115, !dbg !5274
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_color_indicator(%struct.bin_str* %ind) #0 !dbg !5275 {
entry:
  %ind.addr = alloca %struct.bin_str*, align 8
  store %struct.bin_str* %ind, %struct.bin_str** %ind.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bin_str** %ind.addr, metadata !5278, metadata !DIExpression()), !dbg !5279
  %0 = load %struct.bin_str*, %struct.bin_str** %ind.addr, align 8, !dbg !5280
  %tobool = icmp ne %struct.bin_str* %0, null, !dbg !5280
  br i1 %tobool, label %if.then, label %if.end2, !dbg !5282

if.then:                                          ; preds = %entry
  %call = call zeroext i1 @is_colored(i32 4), !dbg !5283
  br i1 %call, label %if.then1, label %if.end, !dbg !5286

if.then1:                                         ; preds = %if.then
  call void @restore_default_color(), !dbg !5287
  br label %if.end, !dbg !5287

if.end:                                           ; preds = %if.then1, %if.then
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)), !dbg !5288
  %1 = load %struct.bin_str*, %struct.bin_str** %ind.addr, align 8, !dbg !5289
  call void @put_indicator(%struct.bin_str* %1), !dbg !5290
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)), !dbg !5291
  br label %if.end2, !dbg !5292

if.end2:                                          ; preds = %if.end, %entry
  %2 = load %struct.bin_str*, %struct.bin_str** %ind.addr, align 8, !dbg !5293
  %cmp = icmp ne %struct.bin_str* %2, null, !dbg !5294
  ret i1 %cmp, !dbg !5295
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @file_escape(i8* %str, i1 zeroext %path) #0 !dbg !5296 {
entry:
  %str.addr = alloca i8*, align 8
  %path.addr = alloca i8, align 1
  %esc = alloca i8*, align 8, !ctir !143
  %p = alloca i8*, align 8, !ctir !143
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !5299, metadata !DIExpression()), !dbg !5300
  %frombool = zext i1 %path to i8
  store i8 %frombool, i8* %path.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %path.addr, metadata !5301, metadata !DIExpression()), !dbg !5302
  call void @llvm.dbg.declare(metadata i8** %esc, metadata !5303, metadata !DIExpression()), !dbg !5304
  %0 = load i8*, i8** %str.addr, align 8, !dbg !5305
  %call = call i64 @strlen(i8* %0) #16, !dbg !5306
  %add = add i64 %call, 1, !dbg !5307
  %call1 = call noalias i8* @xnmalloc(i64 3, i64 %add), !dbg !5308
  store i8* %call1, i8** %esc, align 8, !dbg !5304
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5309, metadata !DIExpression()), !dbg !5310
  %1 = load i8*, i8** %esc, align 8, !dbg !5311
  store i8* %1, i8** %p, align 8, !dbg !5310
  br label %while.cond, !dbg !5312

while.cond:                                       ; preds = %if.end15, %entry
  %2 = load i8*, i8** %str.addr, align 8, !dbg !5313
  %3 = load i8, i8* %2, align 1, !dbg !5314, !ctir !147
  %tobool = icmp ne i8 %3, 0, !dbg !5312
  br i1 %tobool, label %while.body, label %while.end, !dbg !5312

while.body:                                       ; preds = %while.cond
  %4 = load i8, i8* %path.addr, align 1, !dbg !5315
  %tobool2 = trunc i8 %4 to i1, !dbg !5315
  br i1 %tobool2, label %land.lhs.true, label %if.else, !dbg !5318

land.lhs.true:                                    ; preds = %while.body
  %5 = load i8*, i8** %str.addr, align 8, !dbg !5319
  %6 = load i8, i8* %5, align 1, !dbg !5319, !ctir !147
  %conv = sext i8 %6 to i32, !dbg !5319
  %cmp = icmp eq i32 %conv, 47, !dbg !5319
  br i1 %cmp, label %if.then, label %if.else, !dbg !5320

if.then:                                          ; preds = %land.lhs.true
  %7 = load i8*, i8** %p, align 8, !dbg !5321
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !5321, !ctir !144
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5321
  store i8 47, i8* %7, align 1, !dbg !5323, !ctir !144
  %8 = load i8*, i8** %str.addr, align 8, !dbg !5324
  %incdec.ptr4 = getelementptr inbounds i8, i8* %8, i32 1, !dbg !5324, !ctir !147
  store i8* %incdec.ptr4, i8** %str.addr, align 8, !dbg !5324
  br label %if.end15, !dbg !5325

if.else:                                          ; preds = %land.lhs.true, %while.body
  %9 = load i8*, i8** %str.addr, align 8, !dbg !5326
  %10 = load i8, i8* %9, align 1, !dbg !5328, !ctir !147
  %call5 = call zeroext i8 @to_uchar(i8 signext %10), !dbg !5329
  %idxprom = zext i8 %call5 to i64, !dbg !5330
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @RFC3986, i64 0, i64 %idxprom, !dbg !5330, !ctir !453
  %11 = load i8, i8* %arrayidx, align 1, !dbg !5330
  %tobool6 = icmp ne i8 %11, 0, !dbg !5330
  br i1 %tobool6, label %if.then7, label %if.else10, !dbg !5331

if.then7:                                         ; preds = %if.else
  %12 = load i8*, i8** %str.addr, align 8, !dbg !5332
  %incdec.ptr8 = getelementptr inbounds i8, i8* %12, i32 1, !dbg !5332, !ctir !147
  store i8* %incdec.ptr8, i8** %str.addr, align 8, !dbg !5332
  %13 = load i8, i8* %12, align 1, !dbg !5333, !ctir !147
  %14 = load i8*, i8** %p, align 8, !dbg !5334
  %incdec.ptr9 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !5334, !ctir !144
  store i8* %incdec.ptr9, i8** %p, align 8, !dbg !5334
  store i8 %13, i8* %14, align 1, !dbg !5335, !ctir !144
  br label %if.end, !dbg !5336

if.else10:                                        ; preds = %if.else
  %15 = load i8*, i8** %p, align 8, !dbg !5337
  %16 = load i8*, i8** %str.addr, align 8, !dbg !5338
  %incdec.ptr11 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !5338, !ctir !147
  store i8* %incdec.ptr11, i8** %str.addr, align 8, !dbg !5338
  %17 = load i8, i8* %16, align 1, !dbg !5339, !ctir !147
  %call12 = call zeroext i8 @to_uchar(i8 signext %17), !dbg !5340
  %conv13 = zext i8 %call12 to i32, !dbg !5340
  %call14 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.215, i64 0, i64 0), i32 %conv13) #13, !dbg !5341
  %18 = load i8*, i8** %p, align 8, !dbg !5342
  %idx.ext = sext i32 %call14 to i64, !dbg !5342
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext, !dbg !5342, !ctir !144
  store i8* %add.ptr, i8** %p, align 8, !dbg !5342
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then7
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %while.cond, !dbg !5312, !llvm.loop !5343

while.end:                                        ; preds = %while.cond
  %19 = load i8*, i8** %p, align 8, !dbg !5345
  store i8 0, i8* %19, align 1, !dbg !5346, !ctir !144
  %20 = load i8*, i8** %esc, align 8, !dbg !5347
  ret i8* %20, !dbg !5348
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @to_uchar(i8 signext %ch) #0 !dbg !5349 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !5352, metadata !DIExpression()), !dbg !5353
  %0 = load i8, i8* %ch.addr, align 1, !dbg !5354
  ret i8 %0, !dbg !5355
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind
declare dso_local i32 @wcwidth(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #5

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @print_file_name_and_frills(%struct.fileinfo* %f, i64 %start_col) #0 !dbg !5356 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  %start_col.addr = alloca i64, align 8
  %buf = alloca [652 x i8], align 16, !ctir !746
  %width = alloca i64, align 8, !ctir !149
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !5359, metadata !DIExpression()), !dbg !5360
  store i64 %start_col, i64* %start_col.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %start_col.addr, metadata !5361, metadata !DIExpression()), !dbg !5362
  call void @llvm.dbg.declare(metadata [652 x i8]* %buf, metadata !5363, metadata !DIExpression()), !dbg !5364
  call void @set_normal_color(), !dbg !5365
  %0 = load i8, i8* @print_inode, align 1, !dbg !5366
  %tobool = trunc i8 %0 to i1, !dbg !5366
  br i1 %tobool, label %if.then, label %if.end, !dbg !5368

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @format, align 4, !dbg !5369
  %cmp = icmp eq i32 %1, 4, !dbg !5370
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5369

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !5369

cond.false:                                       ; preds = %if.then
  %2 = load i32, i32* @inode_number_width, align 4, !dbg !5371
  br label %cond.end, !dbg !5369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %2, %cond.false ], !dbg !5369
  %arraydecay = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !5372, !ctir !746
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5373
  %call = call i8* @format_inode(i8* %arraydecay, i64 652, %struct.fileinfo* %3), !dbg !5374
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %cond, i8* %call), !dbg !5375
  br label %if.end, !dbg !5375

if.end:                                           ; preds = %cond.end, %entry
  %4 = load i8, i8* @print_block_size, align 1, !dbg !5376
  %tobool2 = trunc i8 %4 to i1, !dbg !5376
  br i1 %tobool2, label %if.then3, label %if.end17, !dbg !5378

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* @format, align 4, !dbg !5379
  %cmp4 = icmp eq i32 %5, 4, !dbg !5380
  br i1 %cmp4, label %cond.true5, label %cond.false6, !dbg !5379

cond.true5:                                       ; preds = %if.then3
  br label %cond.end7, !dbg !5379

cond.false6:                                      ; preds = %if.then3
  %6 = load i32, i32* @block_size_width, align 4, !dbg !5381
  br label %cond.end7, !dbg !5379

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ %6, %cond.false6 ], !dbg !5379
  %7 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5382
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 7, !dbg !5383, !ctir !184
  %8 = load i8, i8* %stat_ok, align 8, !dbg !5383
  %tobool9 = trunc i8 %8 to i1, !dbg !5383, !ctir !141
  br i1 %tobool9, label %cond.false11, label %cond.true10, !dbg !5384

cond.true10:                                      ; preds = %cond.end7
  br label %cond.end14, !dbg !5384

cond.false11:                                     ; preds = %cond.end7
  %9 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5385
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %9, i32 0, i32 3, !dbg !5385, !ctir !184
  %st_blocks = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 10, !dbg !5385, !ctir !191
  %10 = load i64, i64* %st_blocks, align 8, !dbg !5385, !ctir !212
  %arraydecay12 = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !5386, !ctir !746
  %11 = load i32, i32* @human_output_opts, align 4, !dbg !5387
  %12 = load i64, i64* @output_block_size, align 8, !dbg !5388
  %call13 = call i8* @human_readable(i64 %10, i8* %arraydecay12, i32 %11, i64 512, i64 %12), !dbg !5389
  br label %cond.end14, !dbg !5384

cond.end14:                                       ; preds = %cond.false11, %cond.true10
  %cond15 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true10 ], [ %call13, %cond.false11 ], !dbg !5384
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %cond8, i8* %cond15), !dbg !5390
  br label %if.end17, !dbg !5390

if.end17:                                         ; preds = %cond.end14, %if.end
  %13 = load i8, i8* @print_scontext, align 1, !dbg !5391
  %tobool18 = trunc i8 %13 to i1, !dbg !5391
  br i1 %tobool18, label %if.then19, label %if.end26, !dbg !5393

if.then19:                                        ; preds = %if.end17
  %14 = load i32, i32* @format, align 4, !dbg !5394
  %cmp20 = icmp eq i32 %14, 4, !dbg !5395
  br i1 %cmp20, label %cond.true21, label %cond.false22, !dbg !5394

cond.true21:                                      ; preds = %if.then19
  br label %cond.end23, !dbg !5394

cond.false22:                                     ; preds = %if.then19
  %15 = load i32, i32* @scontext_width, align 4, !dbg !5396
  br label %cond.end23, !dbg !5394

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ %15, %cond.false22 ], !dbg !5394
  %16 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5397
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %16, i32 0, i32 6, !dbg !5398, !ctir !184
  %17 = load i8*, i8** %scontext, align 8, !dbg !5398, !ctir !143
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %cond24, i8* %17), !dbg !5399
  br label %if.end26, !dbg !5399

if.end26:                                         ; preds = %cond.end23, %if.end17
  call void @llvm.dbg.declare(metadata i64* %width, metadata !5400, metadata !DIExpression()), !dbg !5401
  %18 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5402
  %19 = load i64, i64* %start_col.addr, align 8, !dbg !5403
  %call27 = call i64 @print_name_with_quoting(%struct.fileinfo* %18, i1 zeroext false, %struct.obstack* null, i64 %19), !dbg !5404
  store i64 %call27, i64* %width, align 8, !dbg !5401
  %20 = load i32, i32* @indicator_style, align 4, !dbg !5405
  %cmp28 = icmp ne i32 %20, 0, !dbg !5407
  br i1 %cmp28, label %if.then29, label %if.end34, !dbg !5408

if.then29:                                        ; preds = %if.end26
  %21 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5409
  %stat_ok30 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %21, i32 0, i32 7, !dbg !5410, !ctir !184
  %22 = load i8, i8* %stat_ok30, align 8, !dbg !5410
  %tobool31 = trunc i8 %22 to i1, !dbg !5410, !ctir !141
  %23 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5411
  %stat32 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %23, i32 0, i32 3, !dbg !5412, !ctir !184
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %stat32, i32 0, i32 3, !dbg !5413, !ctir !191
  %24 = load i32, i32* %st_mode, align 8, !dbg !5413, !ctir !201
  %25 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5414
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %25, i32 0, i32 4, !dbg !5415, !ctir !184
  %26 = load i32, i32* %filetype, align 8, !dbg !5415, !ctir !36
  %call33 = call zeroext i1 @print_type_indicator(i1 zeroext %tobool31, i32 %24, i32 %26), !dbg !5416
  %conv = zext i1 %call33 to i64, !dbg !5416
  %27 = load i64, i64* %width, align 8, !dbg !5417
  %add = add i64 %27, %conv, !dbg !5417
  store i64 %add, i64* %width, align 8, !dbg !5417
  br label %if.end34, !dbg !5418

if.end34:                                         ; preds = %if.then29, %if.end26
  %28 = load i64, i64* %width, align 8, !dbg !5419
  ret i64 %28, !dbg !5420
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_with_separator(i8 signext %sep) #0 !dbg !5421 {
entry:
  %sep.addr = alloca i8, align 1
  %filesno = alloca i64, align 8, !ctir !149
  %pos = alloca i64, align 8, !ctir !149
  %f = alloca %struct.fileinfo*, align 8, !ctir !183
  %len = alloca i64, align 8, !ctir !149
  %separator = alloca i8, align 1, !ctir !144
  store i8 %sep, i8* %sep.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %sep.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata i64* %filesno, metadata !5426, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !5428, metadata !DIExpression()), !dbg !5429
  store i64 0, i64* %pos, align 8, !dbg !5429
  store i64 0, i64* %filesno, align 8, !dbg !5430
  br label %for.cond, !dbg !5432

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %filesno, align 8, !dbg !5433
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !5435
  %cmp = icmp ult i64 %0, %1, !dbg !5436
  br i1 %cmp, label %for.body, label %for.end, !dbg !5437

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !5438, metadata !DIExpression()), !dbg !5440
  %2 = load i8**, i8*** @sorted_file, align 8, !dbg !5441
  %3 = load i64, i64* %filesno, align 8, !dbg !5442
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3, !dbg !5441, !ctir !767
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !5441
  %5 = bitcast i8* %4 to %struct.fileinfo*, !dbg !5441
  store %struct.fileinfo* %5, %struct.fileinfo** %f, align 8, !dbg !5440
  call void @llvm.dbg.declare(metadata i64* %len, metadata !5443, metadata !DIExpression()), !dbg !5444
  %6 = load i64, i64* @line_length, align 8, !dbg !5445
  %tobool = icmp ne i64 %6, 0, !dbg !5445
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5445

cond.true:                                        ; preds = %for.body
  %7 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5446
  %call = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %7), !dbg !5447
  br label %cond.end, !dbg !5445

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5445

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ], !dbg !5445
  store i64 %cond, i64* %len, align 8, !dbg !5444
  %8 = load i64, i64* %filesno, align 8, !dbg !5448
  %cmp1 = icmp ne i64 %8, 0, !dbg !5450
  br i1 %cmp1, label %if.then, label %if.end12, !dbg !5451

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %separator, metadata !5452, metadata !DIExpression()), !dbg !5454
  %9 = load i64, i64* @line_length, align 8, !dbg !5455
  %tobool2 = icmp ne i64 %9, 0, !dbg !5455
  br i1 %tobool2, label %lor.lhs.false, label %if.then7, !dbg !5457

lor.lhs.false:                                    ; preds = %if.then
  %10 = load i64, i64* %pos, align 8, !dbg !5458
  %11 = load i64, i64* %len, align 8, !dbg !5459
  %add = add i64 %10, %11, !dbg !5460
  %add3 = add i64 %add, 2, !dbg !5461
  %12 = load i64, i64* @line_length, align 8, !dbg !5462
  %cmp4 = icmp ult i64 %add3, %12, !dbg !5463
  br i1 %cmp4, label %land.lhs.true, label %if.else, !dbg !5464

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load i64, i64* %pos, align 8, !dbg !5465
  %14 = load i64, i64* %len, align 8, !dbg !5466
  %sub = sub i64 -1, %14, !dbg !5467
  %sub5 = sub i64 %sub, 2, !dbg !5468
  %cmp6 = icmp ule i64 %13, %sub5, !dbg !5469
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !5470

if.then7:                                         ; preds = %land.lhs.true, %if.then
  %15 = load i64, i64* %pos, align 8, !dbg !5471
  %add8 = add i64 %15, 2, !dbg !5471
  store i64 %add8, i64* %pos, align 8, !dbg !5471
  store i8 32, i8* %separator, align 1, !dbg !5473
  br label %if.end, !dbg !5474

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  store i64 0, i64* %pos, align 8, !dbg !5475
  store i8 10, i8* %separator, align 1, !dbg !5477
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %16 = load i8, i8* %sep.addr, align 1, !dbg !5478
  %conv = sext i8 %16 to i32, !dbg !5478
  %call9 = call i32 @putchar_unlocked(i32 %conv), !dbg !5478
  %17 = load i8, i8* %separator, align 1, !dbg !5479
  %conv10 = sext i8 %17 to i32, !dbg !5479
  %call11 = call i32 @putchar_unlocked(i32 %conv10), !dbg !5479
  br label %if.end12, !dbg !5480

if.end12:                                         ; preds = %if.end, %cond.end
  %18 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5481
  %19 = load i64, i64* %pos, align 8, !dbg !5482
  %call13 = call i64 @print_file_name_and_frills(%struct.fileinfo* %18, i64 %19), !dbg !5483
  %20 = load i64, i64* %len, align 8, !dbg !5484
  %21 = load i64, i64* %pos, align 8, !dbg !5485
  %add14 = add i64 %21, %20, !dbg !5485
  store i64 %add14, i64* %pos, align 8, !dbg !5485
  br label %for.inc, !dbg !5486

for.inc:                                          ; preds = %if.end12
  %22 = load i64, i64* %filesno, align 8, !dbg !5487
  %inc = add i64 %22, 1, !dbg !5487
  store i64 %inc, i64* %filesno, align 8, !dbg !5487
  br label %for.cond, !dbg !5488, !llvm.loop !5489

for.end:                                          ; preds = %for.cond
  %call15 = call i32 @putchar_unlocked(i32 10), !dbg !5491
  ret void, !dbg !5492
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_many_per_line() #0 !dbg !5493 {
entry:
  %row = alloca i64, align 8, !ctir !149
  %cols = alloca i64, align 8, !ctir !149
  %line_fmt = alloca %struct.column_info*, align 8, !ctir !814
  %rows = alloca i64, align 8, !ctir !149
  %col = alloca i64, align 8, !ctir !149
  %filesno = alloca i64, align 8, !ctir !149
  %pos = alloca i64, align 8, !ctir !149
  %f = alloca %struct.fileinfo*, align 8, !ctir !183
  %name_length = alloca i64, align 8, !ctir !149
  %max_name_length = alloca i64, align 8, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %row, metadata !5494, metadata !DIExpression()), !dbg !5495
  call void @llvm.dbg.declare(metadata i64* %cols, metadata !5496, metadata !DIExpression()), !dbg !5497
  %call = call i64 @calculate_columns(i1 zeroext true), !dbg !5498
  store i64 %call, i64* %cols, align 8, !dbg !5497
  call void @llvm.dbg.declare(metadata %struct.column_info** %line_fmt, metadata !5499, metadata !DIExpression()), !dbg !5500
  %0 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !5501
  %1 = load i64, i64* %cols, align 8, !dbg !5502
  %sub = sub i64 %1, 1, !dbg !5503
  %arrayidx = getelementptr inbounds %struct.column_info, %struct.column_info* %0, i64 %sub, !dbg !5501, !ctir !821
  store %struct.column_info* %arrayidx, %struct.column_info** %line_fmt, align 8, !dbg !5500
  call void @llvm.dbg.declare(metadata i64* %rows, metadata !5504, metadata !DIExpression()), !dbg !5505
  %2 = load i64, i64* @cwd_n_used, align 8, !dbg !5506
  %3 = load i64, i64* %cols, align 8, !dbg !5507
  %div = udiv i64 %2, %3, !dbg !5508
  %4 = load i64, i64* @cwd_n_used, align 8, !dbg !5509
  %5 = load i64, i64* %cols, align 8, !dbg !5510
  %rem = urem i64 %4, %5, !dbg !5511
  %cmp = icmp ne i64 %rem, 0, !dbg !5512
  %conv = zext i1 %cmp to i32, !dbg !5512
  %conv1 = sext i32 %conv to i64, !dbg !5513
  %add = add i64 %div, %conv1, !dbg !5514
  store i64 %add, i64* %rows, align 8, !dbg !5505
  store i64 0, i64* %row, align 8, !dbg !5515
  br label %for.cond, !dbg !5517

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i64, i64* %row, align 8, !dbg !5518
  %7 = load i64, i64* %rows, align 8, !dbg !5520
  %cmp2 = icmp ult i64 %6, %7, !dbg !5521
  br i1 %cmp2, label %for.body, label %for.end, !dbg !5522

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %col, metadata !5523, metadata !DIExpression()), !dbg !5525
  store i64 0, i64* %col, align 8, !dbg !5525
  call void @llvm.dbg.declare(metadata i64* %filesno, metadata !5526, metadata !DIExpression()), !dbg !5527
  %8 = load i64, i64* %row, align 8, !dbg !5528
  store i64 %8, i64* %filesno, align 8, !dbg !5527
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !5529, metadata !DIExpression()), !dbg !5530
  store i64 0, i64* %pos, align 8, !dbg !5530
  br label %while.body, !dbg !5531

while.body:                                       ; preds = %for.body, %if.end
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !5532, metadata !DIExpression()), !dbg !5534
  %9 = load i8**, i8*** @sorted_file, align 8, !dbg !5535
  %10 = load i64, i64* %filesno, align 8, !dbg !5536
  %arrayidx4 = getelementptr inbounds i8*, i8** %9, i64 %10, !dbg !5535, !ctir !767
  %11 = load i8*, i8** %arrayidx4, align 8, !dbg !5535
  %12 = bitcast i8* %11 to %struct.fileinfo*, !dbg !5535
  store %struct.fileinfo* %12, %struct.fileinfo** %f, align 8, !dbg !5534
  call void @llvm.dbg.declare(metadata i64* %name_length, metadata !5537, metadata !DIExpression()), !dbg !5538
  %13 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5539
  %call5 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %13), !dbg !5540
  store i64 %call5, i64* %name_length, align 8, !dbg !5538
  call void @llvm.dbg.declare(metadata i64* %max_name_length, metadata !5541, metadata !DIExpression()), !dbg !5542
  %14 = load %struct.column_info*, %struct.column_info** %line_fmt, align 8, !dbg !5543
  %col_arr = getelementptr inbounds %struct.column_info, %struct.column_info* %14, i32 0, i32 2, !dbg !5544, !ctir !815
  %15 = load i64*, i64** %col_arr, align 8, !dbg !5544, !ctir !148
  %16 = load i64, i64* %col, align 8, !dbg !5545
  %inc = add i64 %16, 1, !dbg !5545
  store i64 %inc, i64* %col, align 8, !dbg !5545
  %arrayidx6 = getelementptr inbounds i64, i64* %15, i64 %16, !dbg !5543, !ctir !148
  %17 = load i64, i64* %arrayidx6, align 8, !dbg !5543
  store i64 %17, i64* %max_name_length, align 8, !dbg !5542
  %18 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5546
  %19 = load i64, i64* %pos, align 8, !dbg !5547
  %call7 = call i64 @print_file_name_and_frills(%struct.fileinfo* %18, i64 %19), !dbg !5548
  %20 = load i64, i64* %rows, align 8, !dbg !5549
  %21 = load i64, i64* %filesno, align 8, !dbg !5550
  %add8 = add i64 %21, %20, !dbg !5550
  store i64 %add8, i64* %filesno, align 8, !dbg !5550
  %22 = load i64, i64* %filesno, align 8, !dbg !5551
  %23 = load i64, i64* @cwd_n_used, align 8, !dbg !5553
  %cmp9 = icmp uge i64 %22, %23, !dbg !5554
  br i1 %cmp9, label %if.then, label %if.end, !dbg !5555

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !5556

if.end:                                           ; preds = %while.body
  %24 = load i64, i64* %pos, align 8, !dbg !5557
  %25 = load i64, i64* %name_length, align 8, !dbg !5558
  %add11 = add i64 %24, %25, !dbg !5559
  %26 = load i64, i64* %pos, align 8, !dbg !5560
  %27 = load i64, i64* %max_name_length, align 8, !dbg !5561
  %add12 = add i64 %26, %27, !dbg !5562
  call void @indent(i64 %add11, i64 %add12), !dbg !5563
  %28 = load i64, i64* %max_name_length, align 8, !dbg !5564
  %29 = load i64, i64* %pos, align 8, !dbg !5565
  %add13 = add i64 %29, %28, !dbg !5565
  store i64 %add13, i64* %pos, align 8, !dbg !5565
  br label %while.body, !dbg !5531, !llvm.loop !5566

while.end:                                        ; preds = %if.then
  %call14 = call i32 @putchar_unlocked(i32 10), !dbg !5568
  br label %for.inc, !dbg !5569

for.inc:                                          ; preds = %while.end
  %30 = load i64, i64* %row, align 8, !dbg !5570
  %inc15 = add i64 %30, 1, !dbg !5570
  store i64 %inc15, i64* %row, align 8, !dbg !5570
  br label %for.cond, !dbg !5571, !llvm.loop !5572

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5574
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_horizontal() #0 !dbg !5575 {
entry:
  %filesno = alloca i64, align 8, !ctir !149
  %pos = alloca i64, align 8, !ctir !149
  %cols = alloca i64, align 8, !ctir !149
  %line_fmt = alloca %struct.column_info*, align 8, !ctir !814
  %f = alloca %struct.fileinfo*, align 8, !ctir !183
  %name_length = alloca i64, align 8, !ctir !149
  %max_name_length = alloca i64, align 8, !ctir !149
  %col = alloca i64, align 8, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %filesno, metadata !5576, metadata !DIExpression()), !dbg !5577
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !5578, metadata !DIExpression()), !dbg !5579
  store i64 0, i64* %pos, align 8, !dbg !5579
  call void @llvm.dbg.declare(metadata i64* %cols, metadata !5580, metadata !DIExpression()), !dbg !5581
  %call = call i64 @calculate_columns(i1 zeroext false), !dbg !5582
  store i64 %call, i64* %cols, align 8, !dbg !5581
  call void @llvm.dbg.declare(metadata %struct.column_info** %line_fmt, metadata !5583, metadata !DIExpression()), !dbg !5584
  %0 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !5585
  %1 = load i64, i64* %cols, align 8, !dbg !5586
  %sub = sub i64 %1, 1, !dbg !5587
  %arrayidx = getelementptr inbounds %struct.column_info, %struct.column_info* %0, i64 %sub, !dbg !5585, !ctir !821
  store %struct.column_info* %arrayidx, %struct.column_info** %line_fmt, align 8, !dbg !5584
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !5588, metadata !DIExpression()), !dbg !5589
  %2 = load i8**, i8*** @sorted_file, align 8, !dbg !5590
  %arrayidx1 = getelementptr inbounds i8*, i8** %2, i64 0, !dbg !5590, !ctir !767
  %3 = load i8*, i8** %arrayidx1, align 8, !dbg !5590
  %4 = bitcast i8* %3 to %struct.fileinfo*, !dbg !5590
  store %struct.fileinfo* %4, %struct.fileinfo** %f, align 8, !dbg !5589
  call void @llvm.dbg.declare(metadata i64* %name_length, metadata !5591, metadata !DIExpression()), !dbg !5592
  %5 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5593
  %call2 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %5), !dbg !5594
  store i64 %call2, i64* %name_length, align 8, !dbg !5592
  call void @llvm.dbg.declare(metadata i64* %max_name_length, metadata !5595, metadata !DIExpression()), !dbg !5596
  %6 = load %struct.column_info*, %struct.column_info** %line_fmt, align 8, !dbg !5597
  %col_arr = getelementptr inbounds %struct.column_info, %struct.column_info* %6, i32 0, i32 2, !dbg !5598, !ctir !815
  %7 = load i64*, i64** %col_arr, align 8, !dbg !5598, !ctir !148
  %arrayidx3 = getelementptr inbounds i64, i64* %7, i64 0, !dbg !5597, !ctir !148
  %8 = load i64, i64* %arrayidx3, align 8, !dbg !5597
  store i64 %8, i64* %max_name_length, align 8, !dbg !5596
  %9 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5599
  %call4 = call i64 @print_file_name_and_frills(%struct.fileinfo* %9, i64 0), !dbg !5600
  store i64 1, i64* %filesno, align 8, !dbg !5601
  br label %for.cond, !dbg !5603

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i64, i64* %filesno, align 8, !dbg !5604
  %11 = load i64, i64* @cwd_n_used, align 8, !dbg !5606
  %cmp = icmp ult i64 %10, %11, !dbg !5607
  br i1 %cmp, label %for.body, label %for.end, !dbg !5608

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %col, metadata !5609, metadata !DIExpression()), !dbg !5611
  %12 = load i64, i64* %filesno, align 8, !dbg !5612
  %13 = load i64, i64* %cols, align 8, !dbg !5613
  %rem = urem i64 %12, %13, !dbg !5614
  store i64 %rem, i64* %col, align 8, !dbg !5611
  %14 = load i64, i64* %col, align 8, !dbg !5615
  %cmp5 = icmp eq i64 %14, 0, !dbg !5617
  br i1 %cmp5, label %if.then, label %if.else, !dbg !5618

if.then:                                          ; preds = %for.body
  %call6 = call i32 @putchar_unlocked(i32 10), !dbg !5619
  store i64 0, i64* %pos, align 8, !dbg !5621
  br label %if.end, !dbg !5622

if.else:                                          ; preds = %for.body
  %15 = load i64, i64* %pos, align 8, !dbg !5623
  %16 = load i64, i64* %name_length, align 8, !dbg !5625
  %add = add i64 %15, %16, !dbg !5626
  %17 = load i64, i64* %pos, align 8, !dbg !5627
  %18 = load i64, i64* %max_name_length, align 8, !dbg !5628
  %add7 = add i64 %17, %18, !dbg !5629
  call void @indent(i64 %add, i64 %add7), !dbg !5630
  %19 = load i64, i64* %max_name_length, align 8, !dbg !5631
  %20 = load i64, i64* %pos, align 8, !dbg !5632
  %add8 = add i64 %20, %19, !dbg !5632
  store i64 %add8, i64* %pos, align 8, !dbg !5632
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %21 = load i8**, i8*** @sorted_file, align 8, !dbg !5633
  %22 = load i64, i64* %filesno, align 8, !dbg !5634
  %arrayidx9 = getelementptr inbounds i8*, i8** %21, i64 %22, !dbg !5633, !ctir !767
  %23 = load i8*, i8** %arrayidx9, align 8, !dbg !5633
  %24 = bitcast i8* %23 to %struct.fileinfo*, !dbg !5633
  store %struct.fileinfo* %24, %struct.fileinfo** %f, align 8, !dbg !5635
  %25 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5636
  %26 = load i64, i64* %pos, align 8, !dbg !5637
  %call10 = call i64 @print_file_name_and_frills(%struct.fileinfo* %25, i64 %26), !dbg !5638
  %27 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !5639
  %call11 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %27), !dbg !5640
  store i64 %call11, i64* %name_length, align 8, !dbg !5641
  %28 = load %struct.column_info*, %struct.column_info** %line_fmt, align 8, !dbg !5642
  %col_arr12 = getelementptr inbounds %struct.column_info, %struct.column_info* %28, i32 0, i32 2, !dbg !5643, !ctir !815
  %29 = load i64*, i64** %col_arr12, align 8, !dbg !5643, !ctir !148
  %30 = load i64, i64* %col, align 8, !dbg !5644
  %arrayidx13 = getelementptr inbounds i64, i64* %29, i64 %30, !dbg !5642, !ctir !148
  %31 = load i64, i64* %arrayidx13, align 8, !dbg !5642
  store i64 %31, i64* %max_name_length, align 8, !dbg !5645
  br label %for.inc, !dbg !5646

for.inc:                                          ; preds = %if.end
  %32 = load i64, i64* %filesno, align 8, !dbg !5647
  %inc = add i64 %32, 1, !dbg !5647
  store i64 %inc, i64* %filesno, align 8, !dbg !5647
  br label %for.cond, !dbg !5648, !llvm.loop !5649

for.end:                                          ; preds = %for.cond
  %call14 = call i32 @putchar_unlocked(i32 10), !dbg !5651
  ret void, !dbg !5652
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_normal_color() #0 !dbg !5653 {
entry:
  %0 = load i8, i8* @print_with_color, align 1, !dbg !5654
  %tobool = trunc i8 %0 to i1, !dbg !5654
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5656

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i1 @is_colored(i32 4), !dbg !5657
  br i1 %call, label %if.then, label %if.end, !dbg !5658

if.then:                                          ; preds = %land.lhs.true
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0)), !dbg !5659
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4)), !dbg !5661
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1)), !dbg !5662
  br label %if.end, !dbg !5663

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !5664
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_long_format(%struct.fileinfo* %f) #0 !dbg !5665 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  %modebuf = alloca [12 x i8], align 1, !ctir !666
  %buf = alloca [3643 x i8], align 16, !ctir !822
  %s = alloca i64, align 8, !ctir !149
  %p = alloca i8*, align 8, !ctir !143
  %when_timespec = alloca %struct.dev_ino, align 8, !ctir !214
  %when_local = alloca %struct.tm, align 8, !ctir !5668
  %tmp = alloca %struct.dev_ino, align 8
  %tmp20 = alloca %struct.dev_ino, align 8
  %tmp24 = alloca %struct.dev_ino, align 8
  %hbuf = alloca [21 x i8], align 16, !ctir !743
  %hbuf38 = alloca [652 x i8], align 16, !ctir !746
  %blocks = alloca i8*, align 8, !ctir !146
  %pad = alloca i32, align 4, !ctir !27
  %hbuf51 = alloca [21 x i8], align 16, !ctir !743
  %majorbuf = alloca [21 x i8], align 16, !ctir !743
  %minorbuf = alloca [21 x i8], align 16, !ctir !743
  %blanks_width = alloca i32, align 4, !ctir !27
  %hbuf141 = alloca [652 x i8], align 16, !ctir !746
  %size = alloca i8*, align 8, !ctir !146
  %pad152 = alloca i32, align 4, !ctir !27
  %six_months_ago = alloca %struct.dev_ino, align 8, !ctir !214
  %recent = alloca i8, align 1, !ctir !141
  %hbuf203 = alloca [21 x i8], align 16, !ctir !743
  %w = alloca i64, align 8, !ctir !149
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !5682, metadata !DIExpression()), !dbg !5683
  call void @llvm.dbg.declare(metadata [12 x i8]* %modebuf, metadata !5684, metadata !DIExpression()), !dbg !5685
  call void @llvm.dbg.declare(metadata [3643 x i8]* %buf, metadata !5686, metadata !DIExpression()), !dbg !5687
  call void @llvm.dbg.declare(metadata i64* %s, metadata !5688, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5690, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %when_timespec, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.tm* %when_local, metadata !5694, metadata !DIExpression()), !dbg !5695
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5696
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 7, !dbg !5698, !ctir !184
  %1 = load i8, i8* %stat_ok, align 8, !dbg !5698
  %tobool = trunc i8 %1 to i1, !dbg !5698, !ctir !141
  br i1 %tobool, label %if.then, label %if.else, !dbg !5699

if.then:                                          ; preds = %entry
  %2 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5700
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 3, !dbg !5701, !ctir !184
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 0, !dbg !5702, !ctir !666
  call void @filemodestring(%struct.stat* %stat, i8* %arraydecay), !dbg !5703
  br label %if.end, !dbg !5703

if.else:                                          ; preds = %entry
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5704
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 4, !dbg !5706, !ctir !184
  %4 = load i32, i32* %filetype, align 8, !dbg !5706, !ctir !36
  %idxprom = zext i32 %4 to i64, !dbg !5707
  %arrayidx = getelementptr inbounds [11 x i8], [11 x i8]* @filetype_letter, i64 0, i64 %idxprom, !dbg !5707, !ctir !825
  %5 = load i8, i8* %arrayidx, align 1, !dbg !5707
  %arrayidx1 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 0, !dbg !5708, !ctir !666
  store i8 %5, i8* %arrayidx1, align 1, !dbg !5709
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 0, !dbg !5710, !ctir !666
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 1, !dbg !5711, !ctir !144
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 63, i64 10, i1 false), !dbg !5712
  %arrayidx3 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 11, !dbg !5713, !ctir !666
  store i8 0, i8* %arrayidx3, align 1, !dbg !5714
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8, i8* @any_has_acl, align 1, !dbg !5715
  %tobool4 = trunc i8 %6 to i1, !dbg !5715
  br i1 %tobool4, label %if.else7, label %if.then5, !dbg !5717

if.then5:                                         ; preds = %if.end
  %arrayidx6 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 10, !dbg !5718, !ctir !666
  store i8 0, i8* %arrayidx6, align 1, !dbg !5719
  br label %if.end17, !dbg !5718

if.else7:                                         ; preds = %if.end
  %7 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5720
  %acl_type = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 9, !dbg !5722, !ctir !184
  %8 = load i32, i32* %acl_type, align 4, !dbg !5722, !ctir !48
  %cmp = icmp eq i32 %8, 1, !dbg !5723
  br i1 %cmp, label %if.then8, label %if.else10, !dbg !5724

if.then8:                                         ; preds = %if.else7
  %arrayidx9 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 10, !dbg !5725, !ctir !666
  store i8 46, i8* %arrayidx9, align 1, !dbg !5726
  br label %if.end16, !dbg !5725

if.else10:                                        ; preds = %if.else7
  %9 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5727
  %acl_type11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %9, i32 0, i32 9, !dbg !5729, !ctir !184
  %10 = load i32, i32* %acl_type11, align 4, !dbg !5729, !ctir !48
  %cmp12 = icmp eq i32 %10, 2, !dbg !5730
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !5731

if.then13:                                        ; preds = %if.else10
  %arrayidx14 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 10, !dbg !5732, !ctir !666
  store i8 43, i8* %arrayidx14, align 1, !dbg !5733
  br label %if.end15, !dbg !5732

if.end15:                                         ; preds = %if.then13, %if.else10
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then8
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then5
  %11 = load i32, i32* @time_type, align 4, !dbg !5734
  switch i32 %11, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb19
    i32 2, label %sw.bb23
  ], !dbg !5735

sw.bb:                                            ; preds = %if.end17
  %12 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5736
  %stat18 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 3, !dbg !5738, !ctir !184
  %call = call { i64, i64 } @get_stat_ctime(%struct.stat* %stat18) #16, !dbg !5739
  %13 = bitcast %struct.dev_ino* %tmp to { i64, i64 }*, !dbg !5739
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !5739
  %15 = extractvalue { i64, i64 } %call, 0, !dbg !5739
  store i64 %15, i64* %14, align 8, !dbg !5739
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !5739
  %17 = extractvalue { i64, i64 } %call, 1, !dbg !5739
  store i64 %17, i64* %16, align 8, !dbg !5739
  %18 = bitcast %struct.dev_ino* %when_timespec to i8*, !dbg !5739
  %19 = bitcast %struct.dev_ino* %tmp to i8*, !dbg !5739
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !5739
  br label %sw.epilog, !dbg !5740

sw.bb19:                                          ; preds = %if.end17
  %20 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5741
  %stat21 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i32 0, i32 3, !dbg !5742, !ctir !184
  %call22 = call { i64, i64 } @get_stat_mtime(%struct.stat* %stat21) #16, !dbg !5743
  %21 = bitcast %struct.dev_ino* %tmp20 to { i64, i64 }*, !dbg !5743
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0, !dbg !5743
  %23 = extractvalue { i64, i64 } %call22, 0, !dbg !5743
  store i64 %23, i64* %22, align 8, !dbg !5743
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1, !dbg !5743
  %25 = extractvalue { i64, i64 } %call22, 1, !dbg !5743
  store i64 %25, i64* %24, align 8, !dbg !5743
  %26 = bitcast %struct.dev_ino* %when_timespec to i8*, !dbg !5743
  %27 = bitcast %struct.dev_ino* %tmp20 to i8*, !dbg !5743
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !5743
  br label %sw.epilog, !dbg !5744

sw.bb23:                                          ; preds = %if.end17
  %28 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5745
  %stat25 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %28, i32 0, i32 3, !dbg !5746, !ctir !184
  %call26 = call { i64, i64 } @get_stat_atime(%struct.stat* %stat25) #16, !dbg !5747
  %29 = bitcast %struct.dev_ino* %tmp24 to { i64, i64 }*, !dbg !5747
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !5747
  %31 = extractvalue { i64, i64 } %call26, 0, !dbg !5747
  store i64 %31, i64* %30, align 8, !dbg !5747
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !5747
  %33 = extractvalue { i64, i64 } %call26, 1, !dbg !5747
  store i64 %33, i64* %32, align 8, !dbg !5747
  %34 = bitcast %struct.dev_ino* %when_timespec to i8*, !dbg !5747
  %35 = bitcast %struct.dev_ino* %tmp24 to i8*, !dbg !5747
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false), !dbg !5747
  br label %sw.epilog, !dbg !5748

sw.default:                                       ; preds = %if.end17
  call void @abort() #15, !dbg !5749
  unreachable, !dbg !5749

sw.epilog:                                        ; preds = %sw.bb23, %sw.bb19, %sw.bb
  %arraydecay27 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !5750, !ctir !822
  store i8* %arraydecay27, i8** %p, align 8, !dbg !5751
  %36 = load i8, i8* @print_inode, align 1, !dbg !5752
  %tobool28 = trunc i8 %36 to i1, !dbg !5752
  br i1 %tobool28, label %if.then29, label %if.end35, !dbg !5754

if.then29:                                        ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata [21 x i8]* %hbuf, metadata !5755, metadata !DIExpression()), !dbg !5757
  %37 = load i8*, i8** %p, align 8, !dbg !5758
  %38 = load i32, i32* @inode_number_width, align 4, !dbg !5759
  %arraydecay30 = getelementptr inbounds [21 x i8], [21 x i8]* %hbuf, i64 0, i64 0, !dbg !5760, !ctir !743
  %39 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5761
  %call31 = call i8* @format_inode(i8* %arraydecay30, i64 21, %struct.fileinfo* %39), !dbg !5762
  %call32 = call i32 (i8*, i8*, ...) @sprintf(i8* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %38, i8* %call31) #13, !dbg !5763
  %40 = load i8*, i8** %p, align 8, !dbg !5764
  %call33 = call i64 @strlen(i8* %40) #16, !dbg !5765
  %41 = load i8*, i8** %p, align 8, !dbg !5766
  %add.ptr34 = getelementptr inbounds i8, i8* %41, i64 %call33, !dbg !5766, !ctir !144
  store i8* %add.ptr34, i8** %p, align 8, !dbg !5766
  br label %if.end35, !dbg !5767

if.end35:                                         ; preds = %if.then29, %sw.epilog
  %42 = load i8, i8* @print_block_size, align 1, !dbg !5768
  %tobool36 = trunc i8 %42 to i1, !dbg !5768
  br i1 %tobool36, label %if.then37, label %if.end50, !dbg !5770

if.then37:                                        ; preds = %if.end35
  call void @llvm.dbg.declare(metadata [652 x i8]* %hbuf38, metadata !5771, metadata !DIExpression()), !dbg !5773
  call void @llvm.dbg.declare(metadata i8** %blocks, metadata !5774, metadata !DIExpression()), !dbg !5775
  %43 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5776
  %stat_ok39 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %43, i32 0, i32 7, !dbg !5777, !ctir !184
  %44 = load i8, i8* %stat_ok39, align 8, !dbg !5777
  %tobool40 = trunc i8 %44 to i1, !dbg !5777, !ctir !141
  br i1 %tobool40, label %cond.false, label %cond.true, !dbg !5778

cond.true:                                        ; preds = %if.then37
  br label %cond.end, !dbg !5778

cond.false:                                       ; preds = %if.then37
  %45 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5779
  %stat41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %45, i32 0, i32 3, !dbg !5779, !ctir !184
  %st_blocks = getelementptr inbounds %struct.stat, %struct.stat* %stat41, i32 0, i32 10, !dbg !5779, !ctir !191
  %46 = load i64, i64* %st_blocks, align 8, !dbg !5779, !ctir !212
  %arraydecay42 = getelementptr inbounds [652 x i8], [652 x i8]* %hbuf38, i64 0, i64 0, !dbg !5780, !ctir !746
  %47 = load i32, i32* @human_output_opts, align 4, !dbg !5781
  %48 = load i64, i64* @output_block_size, align 8, !dbg !5782
  %call43 = call i8* @human_readable(i64 %46, i8* %arraydecay42, i32 %47, i64 512, i64 %48), !dbg !5783
  br label %cond.end, !dbg !5778

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true ], [ %call43, %cond.false ], !dbg !5778
  store i8* %cond, i8** %blocks, align 8, !dbg !5775
  call void @llvm.dbg.declare(metadata i32* %pad, metadata !5784, metadata !DIExpression()), !dbg !5785
  %49 = load i32, i32* @block_size_width, align 4, !dbg !5786
  %50 = load i8*, i8** %blocks, align 8, !dbg !5788
  %call44 = call i32 @gnu_mbswidth(i8* %50, i32 0), !dbg !5789
  %sub = sub nsw i32 %49, %call44, !dbg !5790
  store i32 %sub, i32* %pad, align 4, !dbg !5791
  br label %for.cond, !dbg !5792

for.cond:                                         ; preds = %for.inc, %cond.end
  %51 = load i32, i32* %pad, align 4, !dbg !5793
  %cmp45 = icmp slt i32 0, %51, !dbg !5795
  br i1 %cmp45, label %for.body, label %for.end, !dbg !5796

for.body:                                         ; preds = %for.cond
  %52 = load i8*, i8** %p, align 8, !dbg !5797
  %incdec.ptr = getelementptr inbounds i8, i8* %52, i32 1, !dbg !5797, !ctir !144
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5797
  store i8 32, i8* %52, align 1, !dbg !5798, !ctir !144
  br label %for.inc, !dbg !5799

for.inc:                                          ; preds = %for.body
  %53 = load i32, i32* %pad, align 4, !dbg !5800
  %dec = add nsw i32 %53, -1, !dbg !5800
  store i32 %dec, i32* %pad, align 4, !dbg !5800
  br label %for.cond, !dbg !5801, !llvm.loop !5802

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !5804

while.cond:                                       ; preds = %while.body, %for.end
  %54 = load i8*, i8** %blocks, align 8, !dbg !5805
  %incdec.ptr46 = getelementptr inbounds i8, i8* %54, i32 1, !dbg !5805, !ctir !147
  store i8* %incdec.ptr46, i8** %blocks, align 8, !dbg !5805
  %55 = load i8, i8* %54, align 1, !dbg !5806, !ctir !147
  %56 = load i8*, i8** %p, align 8, !dbg !5807
  %incdec.ptr47 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !5807, !ctir !144
  store i8* %incdec.ptr47, i8** %p, align 8, !dbg !5807
  store i8 %55, i8* %56, align 1, !dbg !5808, !ctir !144
  %tobool48 = icmp ne i8 %55, 0, !dbg !5804
  br i1 %tobool48, label %while.body, label %while.end, !dbg !5804

while.body:                                       ; preds = %while.cond
  br label %while.cond, !dbg !5809, !llvm.loop !5810

while.end:                                        ; preds = %while.cond
  %57 = load i8*, i8** %p, align 8, !dbg !5811
  %arrayidx49 = getelementptr inbounds i8, i8* %57, i64 -1, !dbg !5811, !ctir !143
  store i8 32, i8* %arrayidx49, align 1, !dbg !5812
  br label %if.end50, !dbg !5813

if.end50:                                         ; preds = %while.end, %if.end35
  call void @llvm.dbg.declare(metadata [21 x i8]* %hbuf51, metadata !5814, metadata !DIExpression()), !dbg !5816
  %58 = load i8*, i8** %p, align 8, !dbg !5817
  %arraydecay52 = getelementptr inbounds [12 x i8], [12 x i8]* %modebuf, i64 0, i64 0, !dbg !5818, !ctir !666
  %59 = load i32, i32* @nlink_width, align 4, !dbg !5819
  %60 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5820
  %stat_ok53 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i32 0, i32 7, !dbg !5821, !ctir !184
  %61 = load i8, i8* %stat_ok53, align 8, !dbg !5821
  %tobool54 = trunc i8 %61 to i1, !dbg !5821, !ctir !141
  br i1 %tobool54, label %cond.false56, label %cond.true55, !dbg !5822

cond.true55:                                      ; preds = %if.end50
  br label %cond.end60, !dbg !5822

cond.false56:                                     ; preds = %if.end50
  %62 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5823
  %stat57 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %62, i32 0, i32 3, !dbg !5824, !ctir !184
  %st_nlink = getelementptr inbounds %struct.stat, %struct.stat* %stat57, i32 0, i32 2, !dbg !5825, !ctir !191
  %63 = load i64, i64* %st_nlink, align 8, !dbg !5825, !ctir !199
  %arraydecay58 = getelementptr inbounds [21 x i8], [21 x i8]* %hbuf51, i64 0, i64 0, !dbg !5826, !ctir !743
  %call59 = call i8* @umaxtostr(i64 %63, i8* %arraydecay58), !dbg !5827
  br label %cond.end60, !dbg !5822

cond.end60:                                       ; preds = %cond.false56, %cond.true55
  %cond61 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true55 ], [ %call59, %cond.false56 ], !dbg !5822
  %call62 = call i32 (i8*, i8*, ...) @sprintf(i8* %58, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i64 0, i64 0), i8* %arraydecay52, i32 %59, i8* %cond61) #13, !dbg !5828
  %64 = load i8*, i8** %p, align 8, !dbg !5829
  %call63 = call i64 @strlen(i8* %64) #16, !dbg !5830
  %65 = load i8*, i8** %p, align 8, !dbg !5831
  %add.ptr64 = getelementptr inbounds i8, i8* %65, i64 %call63, !dbg !5831, !ctir !144
  store i8* %add.ptr64, i8** %p, align 8, !dbg !5831
  br label %do.body, !dbg !5832

do.body:                                          ; preds = %cond.end60
  %66 = load i8, i8* @dired, align 1, !dbg !5833
  %tobool65 = trunc i8 %66 to i1, !dbg !5833
  br i1 %tobool65, label %if.then66, label %if.end69, !dbg !5836

if.then66:                                        ; preds = %do.body
  br label %do.body67, !dbg !5833

do.body67:                                        ; preds = %if.then66
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5837
  %call68 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %67), !dbg !5837
  %68 = load i64, i64* @dired_pos, align 8, !dbg !5837
  %add = add i64 %68, 2, !dbg !5837
  store i64 %add, i64* @dired_pos, align 8, !dbg !5837
  br label %do.end, !dbg !5837

do.end:                                           ; preds = %do.body67
  br label %if.end69, !dbg !5837

if.end69:                                         ; preds = %do.end, %do.body
  br label %do.end70, !dbg !5836

do.end70:                                         ; preds = %if.end69
  %69 = load i8, i8* @print_owner, align 1, !dbg !5839
  %tobool71 = trunc i8 %69 to i1, !dbg !5839
  br i1 %tobool71, label %if.then77, label %lor.lhs.false, !dbg !5841

lor.lhs.false:                                    ; preds = %do.end70
  %70 = load i8, i8* @print_group, align 1, !dbg !5842
  %tobool72 = trunc i8 %70 to i1, !dbg !5842
  br i1 %tobool72, label %if.then77, label %lor.lhs.false73, !dbg !5843

lor.lhs.false73:                                  ; preds = %lor.lhs.false
  %71 = load i8, i8* @print_author, align 1, !dbg !5844
  %tobool74 = trunc i8 %71 to i1, !dbg !5844
  br i1 %tobool74, label %if.then77, label %lor.lhs.false75, !dbg !5845

lor.lhs.false75:                                  ; preds = %lor.lhs.false73
  %72 = load i8, i8* @print_scontext, align 1, !dbg !5846
  %tobool76 = trunc i8 %72 to i1, !dbg !5846
  br i1 %tobool76, label %if.then77, label %if.end107, !dbg !5847

if.then77:                                        ; preds = %lor.lhs.false75, %lor.lhs.false73, %lor.lhs.false, %do.end70
  br label %do.body78, !dbg !5848

do.body78:                                        ; preds = %if.then77
  %arraydecay79 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !5850, !ctir !822
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !5850
  %call80 = call i32 @fputs_unlocked(i8* %arraydecay79, %struct._IO_FILE* %73), !dbg !5850
  %74 = load i8*, i8** %p, align 8, !dbg !5850
  %arraydecay81 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !5850, !ctir !822
  %sub.ptr.lhs.cast = ptrtoint i8* %74 to i64, !dbg !5850
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay81 to i64, !dbg !5850
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5850
  %75 = load i64, i64* @dired_pos, align 8, !dbg !5850
  %add82 = add i64 %75, %sub.ptr.sub, !dbg !5850
  store i64 %add82, i64* @dired_pos, align 8, !dbg !5850
  br label %do.end83, !dbg !5850

do.end83:                                         ; preds = %do.body78
  %76 = load i8, i8* @print_owner, align 1, !dbg !5852
  %tobool84 = trunc i8 %76 to i1, !dbg !5852
  br i1 %tobool84, label %if.then85, label %if.end89, !dbg !5854

if.then85:                                        ; preds = %do.end83
  %77 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5855
  %stat86 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %77, i32 0, i32 3, !dbg !5856, !ctir !184
  %st_uid = getelementptr inbounds %struct.stat, %struct.stat* %stat86, i32 0, i32 4, !dbg !5857, !ctir !191
  %78 = load i32, i32* %st_uid, align 4, !dbg !5857, !ctir !203
  %79 = load i32, i32* @owner_width, align 4, !dbg !5858
  %80 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5859
  %stat_ok87 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %80, i32 0, i32 7, !dbg !5860, !ctir !184
  %81 = load i8, i8* %stat_ok87, align 8, !dbg !5860
  %tobool88 = trunc i8 %81 to i1, !dbg !5860, !ctir !141
  call void @format_user(i32 %78, i32 %79, i1 zeroext %tobool88), !dbg !5861
  br label %if.end89, !dbg !5861

if.end89:                                         ; preds = %if.then85, %do.end83
  %82 = load i8, i8* @print_group, align 1, !dbg !5862
  %tobool90 = trunc i8 %82 to i1, !dbg !5862
  br i1 %tobool90, label %if.then91, label %if.end95, !dbg !5864

if.then91:                                        ; preds = %if.end89
  %83 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5865
  %stat92 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %83, i32 0, i32 3, !dbg !5866, !ctir !184
  %st_gid = getelementptr inbounds %struct.stat, %struct.stat* %stat92, i32 0, i32 5, !dbg !5867, !ctir !191
  %84 = load i32, i32* %st_gid, align 8, !dbg !5867, !ctir !205
  %85 = load i32, i32* @group_width, align 4, !dbg !5868
  %86 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5869
  %stat_ok93 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %86, i32 0, i32 7, !dbg !5870, !ctir !184
  %87 = load i8, i8* %stat_ok93, align 8, !dbg !5870
  %tobool94 = trunc i8 %87 to i1, !dbg !5870, !ctir !141
  call void @format_group(i32 %84, i32 %85, i1 zeroext %tobool94), !dbg !5871
  br label %if.end95, !dbg !5871

if.end95:                                         ; preds = %if.then91, %if.end89
  %88 = load i8, i8* @print_author, align 1, !dbg !5872
  %tobool96 = trunc i8 %88 to i1, !dbg !5872
  br i1 %tobool96, label %if.then97, label %if.end102, !dbg !5874

if.then97:                                        ; preds = %if.end95
  %89 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5875
  %stat98 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %89, i32 0, i32 3, !dbg !5876, !ctir !184
  %st_uid99 = getelementptr inbounds %struct.stat, %struct.stat* %stat98, i32 0, i32 4, !dbg !5877, !ctir !191
  %90 = load i32, i32* %st_uid99, align 4, !dbg !5877, !ctir !203
  %91 = load i32, i32* @author_width, align 4, !dbg !5878
  %92 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5879
  %stat_ok100 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %92, i32 0, i32 7, !dbg !5880, !ctir !184
  %93 = load i8, i8* %stat_ok100, align 8, !dbg !5880
  %tobool101 = trunc i8 %93 to i1, !dbg !5880, !ctir !141
  call void @format_user(i32 %90, i32 %91, i1 zeroext %tobool101), !dbg !5881
  br label %if.end102, !dbg !5881

if.end102:                                        ; preds = %if.then97, %if.end95
  %94 = load i8, i8* @print_scontext, align 1, !dbg !5882
  %tobool103 = trunc i8 %94 to i1, !dbg !5882
  br i1 %tobool103, label %if.then104, label %if.end105, !dbg !5884

if.then104:                                       ; preds = %if.end102
  %95 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5885
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %95, i32 0, i32 6, !dbg !5886, !ctir !184
  %96 = load i8*, i8** %scontext, align 8, !dbg !5886, !ctir !143
  %97 = load i32, i32* @scontext_width, align 4, !dbg !5887
  call void @format_user_or_group(i8* %96, i64 0, i32 %97), !dbg !5888
  br label %if.end105, !dbg !5888

if.end105:                                        ; preds = %if.then104, %if.end102
  %arraydecay106 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !5889, !ctir !822
  store i8* %arraydecay106, i8** %p, align 8, !dbg !5890
  br label %if.end107, !dbg !5891

if.end107:                                        ; preds = %if.end105, %lor.lhs.false75
  %98 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5892
  %stat_ok108 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %98, i32 0, i32 7, !dbg !5894, !ctir !184
  %99 = load i8, i8* %stat_ok108, align 8, !dbg !5894
  %tobool109 = trunc i8 %99 to i1, !dbg !5894, !ctir !141
  br i1 %tobool109, label %land.lhs.true, label %if.else140, !dbg !5895

land.lhs.true:                                    ; preds = %if.end107
  %100 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5896
  %stat110 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %100, i32 0, i32 3, !dbg !5896, !ctir !184
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %stat110, i32 0, i32 3, !dbg !5896, !ctir !191
  %101 = load i32, i32* %st_mode, align 8, !dbg !5896, !ctir !201
  %and = and i32 %101, 61440, !dbg !5896
  %cmp111 = icmp eq i32 %and, 8192, !dbg !5896
  br i1 %cmp111, label %if.then117, label %lor.lhs.false112, !dbg !5897

lor.lhs.false112:                                 ; preds = %land.lhs.true
  %102 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5898
  %stat113 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %102, i32 0, i32 3, !dbg !5898, !ctir !184
  %st_mode114 = getelementptr inbounds %struct.stat, %struct.stat* %stat113, i32 0, i32 3, !dbg !5898, !ctir !191
  %103 = load i32, i32* %st_mode114, align 8, !dbg !5898, !ctir !201
  %and115 = and i32 %103, 61440, !dbg !5898
  %cmp116 = icmp eq i32 %and115, 24576, !dbg !5898
  br i1 %cmp116, label %if.then117, label %if.else140, !dbg !5899

if.then117:                                       ; preds = %lor.lhs.false112, %land.lhs.true
  call void @llvm.dbg.declare(metadata [21 x i8]* %majorbuf, metadata !5900, metadata !DIExpression()), !dbg !5902
  call void @llvm.dbg.declare(metadata [21 x i8]* %minorbuf, metadata !5903, metadata !DIExpression()), !dbg !5904
  call void @llvm.dbg.declare(metadata i32* %blanks_width, metadata !5905, metadata !DIExpression()), !dbg !5906
  %104 = load i32, i32* @file_size_width, align 4, !dbg !5907
  %105 = load i32, i32* @major_device_number_width, align 4, !dbg !5908
  %add118 = add nsw i32 %105, 2, !dbg !5909
  %106 = load i32, i32* @minor_device_number_width, align 4, !dbg !5910
  %add119 = add nsw i32 %add118, %106, !dbg !5911
  %sub120 = sub nsw i32 %104, %add119, !dbg !5912
  store i32 %sub120, i32* %blanks_width, align 4, !dbg !5906
  %107 = load i8*, i8** %p, align 8, !dbg !5913
  %108 = load i32, i32* @major_device_number_width, align 4, !dbg !5914
  %109 = load i32, i32* %blanks_width, align 4, !dbg !5915
  %cmp121 = icmp sgt i32 0, %109, !dbg !5915
  br i1 %cmp121, label %cond.true122, label %cond.false123, !dbg !5915

cond.true122:                                     ; preds = %if.then117
  br label %cond.end124, !dbg !5915

cond.false123:                                    ; preds = %if.then117
  %110 = load i32, i32* %blanks_width, align 4, !dbg !5915
  br label %cond.end124, !dbg !5915

cond.end124:                                      ; preds = %cond.false123, %cond.true122
  %cond125 = phi i32 [ 0, %cond.true122 ], [ %110, %cond.false123 ], !dbg !5915
  %add126 = add nsw i32 %108, %cond125, !dbg !5916
  %111 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5917
  %stat127 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %111, i32 0, i32 3, !dbg !5917, !ctir !184
  %st_rdev = getelementptr inbounds %struct.stat, %struct.stat* %stat127, i32 0, i32 7, !dbg !5917, !ctir !191
  %112 = load i64, i64* %st_rdev, align 8, !dbg !5917, !ctir !195
  %call128 = call i32 @gnu_dev_major(i64 %112) #17, !dbg !5917
  %conv = zext i32 %call128 to i64, !dbg !5917
  %arraydecay129 = getelementptr inbounds [21 x i8], [21 x i8]* %majorbuf, i64 0, i64 0, !dbg !5918, !ctir !743
  %call130 = call i8* @umaxtostr(i64 %conv, i8* %arraydecay129), !dbg !5919
  %113 = load i32, i32* @minor_device_number_width, align 4, !dbg !5920
  %114 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5921
  %stat131 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %114, i32 0, i32 3, !dbg !5921, !ctir !184
  %st_rdev132 = getelementptr inbounds %struct.stat, %struct.stat* %stat131, i32 0, i32 7, !dbg !5921, !ctir !191
  %115 = load i64, i64* %st_rdev132, align 8, !dbg !5921, !ctir !195
  %call133 = call i32 @gnu_dev_minor(i64 %115) #17, !dbg !5921
  %conv134 = zext i32 %call133 to i64, !dbg !5921
  %arraydecay135 = getelementptr inbounds [21 x i8], [21 x i8]* %minorbuf, i64 0, i64 0, !dbg !5922, !ctir !743
  %call136 = call i8* @umaxtostr(i64 %conv134, i8* %arraydecay135), !dbg !5923
  %call137 = call i32 (i8*, i8*, ...) @sprintf(i8* %107, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i64 0, i64 0), i32 %add126, i8* %call130, i32 %113, i8* %call136) #13, !dbg !5924
  %116 = load i32, i32* @file_size_width, align 4, !dbg !5925
  %add138 = add nsw i32 %116, 1, !dbg !5926
  %117 = load i8*, i8** %p, align 8, !dbg !5927
  %idx.ext = sext i32 %add138 to i64, !dbg !5927
  %add.ptr139 = getelementptr inbounds i8, i8* %117, i64 %idx.ext, !dbg !5927, !ctir !144
  store i8* %add.ptr139, i8** %p, align 8, !dbg !5927
  br label %if.end170, !dbg !5928

if.else140:                                       ; preds = %lor.lhs.false112, %if.end107
  call void @llvm.dbg.declare(metadata [652 x i8]* %hbuf141, metadata !5929, metadata !DIExpression()), !dbg !5931
  call void @llvm.dbg.declare(metadata i8** %size, metadata !5932, metadata !DIExpression()), !dbg !5933
  %118 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5934
  %stat_ok142 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %118, i32 0, i32 7, !dbg !5935, !ctir !184
  %119 = load i8, i8* %stat_ok142, align 8, !dbg !5935
  %tobool143 = trunc i8 %119 to i1, !dbg !5935, !ctir !141
  br i1 %tobool143, label %cond.false145, label %cond.true144, !dbg !5936

cond.true144:                                     ; preds = %if.else140
  br label %cond.end150, !dbg !5936

cond.false145:                                    ; preds = %if.else140
  %120 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5937
  %stat146 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %120, i32 0, i32 3, !dbg !5938, !ctir !184
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %stat146, i32 0, i32 8, !dbg !5939, !ctir !191
  %121 = load i64, i64* %st_size, align 8, !dbg !5939, !ctir !179
  %call147 = call i64 @unsigned_file_size(i64 %121), !dbg !5940
  %arraydecay148 = getelementptr inbounds [652 x i8], [652 x i8]* %hbuf141, i64 0, i64 0, !dbg !5941, !ctir !746
  %122 = load i32, i32* @file_human_output_opts, align 4, !dbg !5942
  %123 = load i64, i64* @file_output_block_size, align 8, !dbg !5943
  %call149 = call i8* @human_readable(i64 %call147, i8* %arraydecay148, i32 %122, i64 1, i64 %123), !dbg !5944
  br label %cond.end150, !dbg !5936

cond.end150:                                      ; preds = %cond.false145, %cond.true144
  %cond151 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true144 ], [ %call149, %cond.false145 ], !dbg !5936
  store i8* %cond151, i8** %size, align 8, !dbg !5933
  call void @llvm.dbg.declare(metadata i32* %pad152, metadata !5945, metadata !DIExpression()), !dbg !5946
  %124 = load i32, i32* @file_size_width, align 4, !dbg !5947
  %125 = load i8*, i8** %size, align 8, !dbg !5949
  %call153 = call i32 @gnu_mbswidth(i8* %125, i32 0), !dbg !5950
  %sub154 = sub nsw i32 %124, %call153, !dbg !5951
  store i32 %sub154, i32* %pad152, align 4, !dbg !5952
  br label %for.cond155, !dbg !5953

for.cond155:                                      ; preds = %for.inc160, %cond.end150
  %126 = load i32, i32* %pad152, align 4, !dbg !5954
  %cmp156 = icmp slt i32 0, %126, !dbg !5956
  br i1 %cmp156, label %for.body158, label %for.end162, !dbg !5957

for.body158:                                      ; preds = %for.cond155
  %127 = load i8*, i8** %p, align 8, !dbg !5958
  %incdec.ptr159 = getelementptr inbounds i8, i8* %127, i32 1, !dbg !5958, !ctir !144
  store i8* %incdec.ptr159, i8** %p, align 8, !dbg !5958
  store i8 32, i8* %127, align 1, !dbg !5959, !ctir !144
  br label %for.inc160, !dbg !5960

for.inc160:                                       ; preds = %for.body158
  %128 = load i32, i32* %pad152, align 4, !dbg !5961
  %dec161 = add nsw i32 %128, -1, !dbg !5961
  store i32 %dec161, i32* %pad152, align 4, !dbg !5961
  br label %for.cond155, !dbg !5962, !llvm.loop !5963

for.end162:                                       ; preds = %for.cond155
  br label %while.cond163, !dbg !5965

while.cond163:                                    ; preds = %while.body167, %for.end162
  %129 = load i8*, i8** %size, align 8, !dbg !5966
  %incdec.ptr164 = getelementptr inbounds i8, i8* %129, i32 1, !dbg !5966, !ctir !147
  store i8* %incdec.ptr164, i8** %size, align 8, !dbg !5966
  %130 = load i8, i8* %129, align 1, !dbg !5967, !ctir !147
  %131 = load i8*, i8** %p, align 8, !dbg !5968
  %incdec.ptr165 = getelementptr inbounds i8, i8* %131, i32 1, !dbg !5968, !ctir !144
  store i8* %incdec.ptr165, i8** %p, align 8, !dbg !5968
  store i8 %130, i8* %131, align 1, !dbg !5969, !ctir !144
  %tobool166 = icmp ne i8 %130, 0, !dbg !5965
  br i1 %tobool166, label %while.body167, label %while.end168, !dbg !5965

while.body167:                                    ; preds = %while.cond163
  br label %while.cond163, !dbg !5970, !llvm.loop !5971

while.end168:                                     ; preds = %while.cond163
  %132 = load i8*, i8** %p, align 8, !dbg !5972
  %arrayidx169 = getelementptr inbounds i8, i8* %132, i64 -1, !dbg !5972, !ctir !143
  store i8 32, i8* %arrayidx169, align 1, !dbg !5973
  br label %if.end170

if.end170:                                        ; preds = %while.end168, %cond.end124
  store i64 0, i64* %s, align 8, !dbg !5974
  %133 = load i8*, i8** %p, align 8, !dbg !5975
  store i8 1, i8* %133, align 1, !dbg !5976, !ctir !144
  %134 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !5977
  %stat_ok171 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %134, i32 0, i32 7, !dbg !5979, !ctir !184
  %135 = load i8, i8* %stat_ok171, align 8, !dbg !5979
  %tobool172 = trunc i8 %135 to i1, !dbg !5979, !ctir !141
  br i1 %tobool172, label %land.lhs.true174, label %if.end195, !dbg !5980

land.lhs.true174:                                 ; preds = %if.end170
  %136 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8, !dbg !5981
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %when_timespec, i32 0, i32 0, !dbg !5982, !ctir !214
  %call175 = call %struct.tm* @localtime_rz(%struct.tm_zone* %136, i64* %tv_sec, %struct.tm* %when_local), !dbg !5983
  %tobool176 = icmp ne %struct.tm* %call175, null, !dbg !5983
  br i1 %tobool176, label %if.then177, label %if.end195, !dbg !5984

if.then177:                                       ; preds = %land.lhs.true174
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %six_months_ago, metadata !5985, metadata !DIExpression()), !dbg !5987
  call void @llvm.dbg.declare(metadata i8* %recent, metadata !5988, metadata !DIExpression()), !dbg !5989
  %137 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 0), align 8, !dbg !5990
  %138 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 1), align 8, !dbg !5990
  %139 = bitcast %struct.dev_ino* %when_timespec to { i64, i64 }*, !dbg !5990
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %139, i32 0, i32 0, !dbg !5990
  %141 = load i64, i64* %140, align 8, !dbg !5990
  %142 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %139, i32 0, i32 1, !dbg !5990
  %143 = load i64, i64* %142, align 8, !dbg !5990
  %call178 = call i32 @timespec_cmp(i64 %137, i64 %138, i64 %141, i64 %143) #16, !dbg !5990
  %cmp179 = icmp slt i32 %call178, 0, !dbg !5992
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !5993

if.then181:                                       ; preds = %if.then177
  call void @gettime(%struct.dev_ino* @current_time), !dbg !5994
  br label %if.end182, !dbg !5994

if.end182:                                        ; preds = %if.then181, %if.then177
  %144 = load i64, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 0), align 8, !dbg !5995, !ctir !164
  %sub183 = sub nsw i64 %144, 15778476, !dbg !5996
  %tv_sec184 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %six_months_ago, i32 0, i32 0, !dbg !5997, !ctir !214
  store i64 %sub183, i64* %tv_sec184, align 8, !dbg !5998, !ctir !164
  %145 = load i64, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 1), align 8, !dbg !5999, !ctir !219
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %six_months_ago, i32 0, i32 1, !dbg !6000, !ctir !214
  store i64 %145, i64* %tv_nsec, align 8, !dbg !6001, !ctir !219
  %146 = bitcast %struct.dev_ino* %six_months_ago to { i64, i64 }*, !dbg !6002
  %147 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %146, i32 0, i32 0, !dbg !6002
  %148 = load i64, i64* %147, align 8, !dbg !6002
  %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %146, i32 0, i32 1, !dbg !6002
  %150 = load i64, i64* %149, align 8, !dbg !6002
  %151 = bitcast %struct.dev_ino* %when_timespec to { i64, i64 }*, !dbg !6002
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %151, i32 0, i32 0, !dbg !6002
  %153 = load i64, i64* %152, align 8, !dbg !6002
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %151, i32 0, i32 1, !dbg !6002
  %155 = load i64, i64* %154, align 8, !dbg !6002
  %call185 = call i32 @timespec_cmp(i64 %148, i64 %150, i64 %153, i64 %155) #16, !dbg !6002
  %cmp186 = icmp slt i32 %call185, 0, !dbg !6003
  br i1 %cmp186, label %land.rhs, label %land.end, !dbg !6004

land.rhs:                                         ; preds = %if.end182
  %156 = bitcast %struct.dev_ino* %when_timespec to { i64, i64 }*, !dbg !6005
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %156, i32 0, i32 0, !dbg !6005
  %158 = load i64, i64* %157, align 8, !dbg !6005
  %159 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %156, i32 0, i32 1, !dbg !6005
  %160 = load i64, i64* %159, align 8, !dbg !6005
  %161 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 0), align 8, !dbg !6005
  %162 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 1), align 8, !dbg !6005
  %call188 = call i32 @timespec_cmp(i64 %158, i64 %160, i64 %161, i64 %162) #16, !dbg !6005
  %cmp189 = icmp slt i32 %call188, 0, !dbg !6006
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end182
  %163 = phi i1 [ false, %if.end182 ], [ %cmp189, %land.rhs ], !dbg !6007
  %frombool = zext i1 %163 to i8, !dbg !6008
  store i8 %frombool, i8* %recent, align 1, !dbg !6008
  %164 = load i8*, i8** %p, align 8, !dbg !6009
  %165 = load i8, i8* %recent, align 1, !dbg !6010
  %tobool191 = trunc i8 %165 to i1, !dbg !6010
  %166 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8, !dbg !6011
  %tv_nsec192 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %when_timespec, i32 0, i32 1, !dbg !6012, !ctir !214
  %167 = load i64, i64* %tv_nsec192, align 8, !dbg !6012, !ctir !219
  %conv193 = trunc i64 %167 to i32, !dbg !6013
  %call194 = call i64 @align_nstrftime(i8* %164, i64 1001, i1 zeroext %tobool191, %struct.tm* %when_local, %struct.tm_zone* %166, i32 %conv193), !dbg !6014
  store i64 %call194, i64* %s, align 8, !dbg !6015
  br label %if.end195, !dbg !6016

if.end195:                                        ; preds = %land.end, %land.lhs.true174, %if.end170
  %168 = load i64, i64* %s, align 8, !dbg !6017
  %tobool196 = icmp ne i64 %168, 0, !dbg !6017
  br i1 %tobool196, label %if.then199, label %lor.lhs.false197, !dbg !6019

lor.lhs.false197:                                 ; preds = %if.end195
  %169 = load i8*, i8** %p, align 8, !dbg !6020
  %170 = load i8, i8* %169, align 1, !dbg !6021, !ctir !144
  %tobool198 = icmp ne i8 %170, 0, !dbg !6021
  br i1 %tobool198, label %if.else202, label %if.then199, !dbg !6022

if.then199:                                       ; preds = %lor.lhs.false197, %if.end195
  %171 = load i64, i64* %s, align 8, !dbg !6023
  %172 = load i8*, i8** %p, align 8, !dbg !6025
  %add.ptr200 = getelementptr inbounds i8, i8* %172, i64 %171, !dbg !6025, !ctir !144
  store i8* %add.ptr200, i8** %p, align 8, !dbg !6025
  %173 = load i8*, i8** %p, align 8, !dbg !6026
  %incdec.ptr201 = getelementptr inbounds i8, i8* %173, i32 1, !dbg !6026, !ctir !144
  store i8* %incdec.ptr201, i8** %p, align 8, !dbg !6026
  store i8 32, i8* %173, align 1, !dbg !6027, !ctir !144
  %174 = load i8*, i8** %p, align 8, !dbg !6028
  store i8 0, i8* %174, align 1, !dbg !6029, !ctir !144
  br label %if.end217, !dbg !6030

if.else202:                                       ; preds = %lor.lhs.false197
  call void @llvm.dbg.declare(metadata [21 x i8]* %hbuf203, metadata !6031, metadata !DIExpression()), !dbg !6033
  %175 = load i8*, i8** %p, align 8, !dbg !6034
  %call204 = call i32 @long_time_expected_width(), !dbg !6035
  %176 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6036
  %stat_ok205 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %176, i32 0, i32 7, !dbg !6037, !ctir !184
  %177 = load i8, i8* %stat_ok205, align 8, !dbg !6037
  %tobool206 = trunc i8 %177 to i1, !dbg !6037, !ctir !141
  br i1 %tobool206, label %cond.false208, label %cond.true207, !dbg !6038

cond.true207:                                     ; preds = %if.else202
  br label %cond.end212, !dbg !6038

cond.false208:                                    ; preds = %if.else202
  %tv_sec209 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %when_timespec, i32 0, i32 0, !dbg !6039, !ctir !214
  %178 = load i64, i64* %tv_sec209, align 8, !dbg !6039, !ctir !164
  %arraydecay210 = getelementptr inbounds [21 x i8], [21 x i8]* %hbuf203, i64 0, i64 0, !dbg !6040, !ctir !743
  %call211 = call i8* @timetostr(i64 %178, i8* %arraydecay210), !dbg !6041
  br label %cond.end212, !dbg !6038

cond.end212:                                      ; preds = %cond.false208, %cond.true207
  %cond213 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true207 ], [ %call211, %cond.false208 ], !dbg !6038
  %call214 = call i32 (i8*, i8*, ...) @sprintf(i8* %175, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %call204, i8* %cond213) #13, !dbg !6042
  %179 = load i8*, i8** %p, align 8, !dbg !6043
  %call215 = call i64 @strlen(i8* %179) #16, !dbg !6044
  %180 = load i8*, i8** %p, align 8, !dbg !6045
  %add.ptr216 = getelementptr inbounds i8, i8* %180, i64 %call215, !dbg !6045, !ctir !144
  store i8* %add.ptr216, i8** %p, align 8, !dbg !6045
  br label %if.end217

if.end217:                                        ; preds = %cond.end212, %if.then199
  br label %do.body218, !dbg !6046

do.body218:                                       ; preds = %if.end217
  %arraydecay219 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !6047, !ctir !822
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !6047
  %call220 = call i32 @fputs_unlocked(i8* %arraydecay219, %struct._IO_FILE* %181), !dbg !6047
  %182 = load i8*, i8** %p, align 8, !dbg !6047
  %arraydecay221 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !6047, !ctir !822
  %sub.ptr.lhs.cast222 = ptrtoint i8* %182 to i64, !dbg !6047
  %sub.ptr.rhs.cast223 = ptrtoint i8* %arraydecay221 to i64, !dbg !6047
  %sub.ptr.sub224 = sub i64 %sub.ptr.lhs.cast222, %sub.ptr.rhs.cast223, !dbg !6047
  %183 = load i64, i64* @dired_pos, align 8, !dbg !6047
  %add225 = add i64 %183, %sub.ptr.sub224, !dbg !6047
  store i64 %add225, i64* @dired_pos, align 8, !dbg !6047
  br label %do.end226, !dbg !6047

do.end226:                                        ; preds = %do.body218
  call void @llvm.dbg.declare(metadata i64* %w, metadata !6049, metadata !DIExpression()), !dbg !6050
  %184 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6051
  %185 = load i8*, i8** %p, align 8, !dbg !6052
  %arraydecay227 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !6053, !ctir !822
  %sub.ptr.lhs.cast228 = ptrtoint i8* %185 to i64, !dbg !6054
  %sub.ptr.rhs.cast229 = ptrtoint i8* %arraydecay227 to i64, !dbg !6054
  %sub.ptr.sub230 = sub i64 %sub.ptr.lhs.cast228, %sub.ptr.rhs.cast229, !dbg !6054
  %call231 = call i64 @print_name_with_quoting(%struct.fileinfo* %184, i1 zeroext false, %struct.obstack* @dired_obstack, i64 %sub.ptr.sub230), !dbg !6055
  store i64 %call231, i64* %w, align 8, !dbg !6050
  %186 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6056
  %filetype232 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %186, i32 0, i32 4, !dbg !6058, !ctir !184
  %187 = load i32, i32* %filetype232, align 8, !dbg !6058, !ctir !36
  %cmp233 = icmp eq i32 %187, 6, !dbg !6059
  br i1 %cmp233, label %if.then235, label %if.else255, !dbg !6060

if.then235:                                       ; preds = %do.end226
  %188 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6061
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %188, i32 0, i32 1, !dbg !6064, !ctir !184
  %189 = load i8*, i8** %linkname, align 8, !dbg !6064, !ctir !143
  %tobool236 = icmp ne i8* %189, null, !dbg !6061
  br i1 %tobool236, label %if.then237, label %if.end254, !dbg !6065

if.then237:                                       ; preds = %if.then235
  br label %do.body238, !dbg !6066

do.body238:                                       ; preds = %if.then237
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !6068
  %call239 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.229, i64 0, i64 0), %struct._IO_FILE* %190), !dbg !6068
  %191 = load i64, i64* @dired_pos, align 8, !dbg !6068
  %add240 = add i64 %191, 4, !dbg !6068
  store i64 %add240, i64* @dired_pos, align 8, !dbg !6068
  br label %do.end241, !dbg !6068

do.end241:                                        ; preds = %do.body238
  %192 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6070
  %193 = load i8*, i8** %p, align 8, !dbg !6071
  %arraydecay242 = getelementptr inbounds [3643 x i8], [3643 x i8]* %buf, i64 0, i64 0, !dbg !6072, !ctir !822
  %sub.ptr.lhs.cast243 = ptrtoint i8* %193 to i64, !dbg !6073
  %sub.ptr.rhs.cast244 = ptrtoint i8* %arraydecay242 to i64, !dbg !6073
  %sub.ptr.sub245 = sub i64 %sub.ptr.lhs.cast243, %sub.ptr.rhs.cast244, !dbg !6073
  %194 = load i64, i64* %w, align 8, !dbg !6074
  %add246 = add i64 %sub.ptr.sub245, %194, !dbg !6075
  %add247 = add i64 %add246, 4, !dbg !6076
  %call248 = call i64 @print_name_with_quoting(%struct.fileinfo* %192, i1 zeroext true, %struct.obstack* null, i64 %add247), !dbg !6077
  %195 = load i32, i32* @indicator_style, align 4, !dbg !6078
  %cmp249 = icmp ne i32 %195, 0, !dbg !6080
  br i1 %cmp249, label %if.then251, label %if.end253, !dbg !6081

if.then251:                                       ; preds = %do.end241
  %196 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6082
  %linkmode = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %196, i32 0, i32 5, !dbg !6083, !ctir !184
  %197 = load i32, i32* %linkmode, align 4, !dbg !6083, !ctir !228
  %call252 = call zeroext i1 @print_type_indicator(i1 zeroext true, i32 %197, i32 0), !dbg !6084
  br label %if.end253, !dbg !6084

if.end253:                                        ; preds = %if.then251, %do.end241
  br label %if.end254, !dbg !6085

if.end254:                                        ; preds = %if.end253, %if.then235
  br label %if.end266, !dbg !6086

if.else255:                                       ; preds = %do.end226
  %198 = load i32, i32* @indicator_style, align 4, !dbg !6087
  %cmp256 = icmp ne i32 %198, 0, !dbg !6089
  br i1 %cmp256, label %if.then258, label %if.end265, !dbg !6090

if.then258:                                       ; preds = %if.else255
  %199 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6091
  %stat_ok259 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %199, i32 0, i32 7, !dbg !6092, !ctir !184
  %200 = load i8, i8* %stat_ok259, align 8, !dbg !6092
  %tobool260 = trunc i8 %200 to i1, !dbg !6092, !ctir !141
  %201 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6093
  %stat261 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %201, i32 0, i32 3, !dbg !6094, !ctir !184
  %st_mode262 = getelementptr inbounds %struct.stat, %struct.stat* %stat261, i32 0, i32 3, !dbg !6095, !ctir !191
  %202 = load i32, i32* %st_mode262, align 8, !dbg !6095, !ctir !201
  %203 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6096
  %filetype263 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %203, i32 0, i32 4, !dbg !6097, !ctir !184
  %204 = load i32, i32* %filetype263, align 8, !dbg !6097, !ctir !36
  %call264 = call zeroext i1 @print_type_indicator(i1 zeroext %tobool260, i32 %202, i32 %204), !dbg !6098
  br label %if.end265, !dbg !6098

if.end265:                                        ; preds = %if.then258, %if.else255
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.end254
  ret void, !dbg !6099
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @format_inode(i8* %buf, i64 %buflen, %struct.fileinfo* %f) #0 !dbg !6100 {
entry:
  %buf.addr = alloca i8*, align 8
  %buflen.addr = alloca i64, align 8
  %f.addr = alloca %struct.fileinfo*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6103, metadata !DIExpression()), !dbg !6104
  store i64 %buflen, i64* %buflen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buflen.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  %0 = load i64, i64* %buflen.addr, align 8, !dbg !6109
  %cmp = icmp ule i64 21, %0, !dbg !6109
  br i1 %cmp, label %if.then, label %if.else, !dbg !6112

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !6112

if.else:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.226, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 4012, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.format_inode, i64 0, i64 0)) #15, !dbg !6109
  unreachable, !dbg !6109

if.end:                                           ; preds = %if.then
  %1 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6113
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 7, !dbg !6114, !ctir !184
  %2 = load i8, i8* %stat_ok, align 8, !dbg !6114
  %tobool = trunc i8 %2 to i1, !dbg !6114, !ctir !141
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !6115

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6116
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 3, !dbg !6117, !ctir !184
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 1, !dbg !6118, !ctir !191
  %4 = load i64, i64* %st_ino, align 8, !dbg !6118, !ctir !197
  %cmp1 = icmp ne i64 %4, 0, !dbg !6119
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !6113

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6120
  %stat2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 3, !dbg !6121, !ctir !184
  %st_ino3 = getelementptr inbounds %struct.stat, %struct.stat* %stat2, i32 0, i32 1, !dbg !6122, !ctir !191
  %6 = load i64, i64* %st_ino3, align 8, !dbg !6122, !ctir !197
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !6123
  %call = call i8* @umaxtostr(i64 %6, i8* %7), !dbg !6124
  br label %cond.end, !dbg !6113

cond.false:                                       ; preds = %land.lhs.true, %if.end
  br label %cond.end, !dbg !6113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.false ], !dbg !6113
  ret i8* %cond, !dbg !6125
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_user(i32 %u, i32 %width, i1 zeroext %stat_ok) #0 !dbg !6126 {
entry:
  %u.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %stat_ok.addr = alloca i8, align 1
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6131, metadata !DIExpression()), !dbg !6132
  %frombool = zext i1 %stat_ok to i8
  store i8 %frombool, i8* %stat_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stat_ok.addr, metadata !6133, metadata !DIExpression()), !dbg !6134
  %0 = load i8, i8* %stat_ok.addr, align 1, !dbg !6135
  %tobool = trunc i8 %0 to i1, !dbg !6135
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6136

cond.true:                                        ; preds = %entry
  br label %cond.end4, !dbg !6136

cond.false:                                       ; preds = %entry
  %1 = load i8, i8* @numeric_ids, align 1, !dbg !6137
  %tobool1 = trunc i8 %1 to i1, !dbg !6137
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !6137

cond.true2:                                       ; preds = %cond.false
  br label %cond.end, !dbg !6137

cond.false3:                                      ; preds = %cond.false
  %2 = load i32, i32* %u.addr, align 4, !dbg !6138
  %call = call i8* @getuser(i32 %2), !dbg !6139
  br label %cond.end, !dbg !6137

cond.end:                                         ; preds = %cond.false3, %cond.true2
  %cond = phi i8* [ null, %cond.true2 ], [ %call, %cond.false3 ], !dbg !6137
  br label %cond.end4, !dbg !6136

cond.end4:                                        ; preds = %cond.end, %cond.true
  %cond5 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true ], [ %cond, %cond.end ], !dbg !6136
  %3 = load i32, i32* %u.addr, align 4, !dbg !6140
  %conv = zext i32 %3 to i64, !dbg !6140
  %4 = load i32, i32* %width.addr, align 4, !dbg !6141
  call void @format_user_or_group(i8* %cond5, i64 %conv, i32 %4), !dbg !6142
  ret void, !dbg !6143
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_group(i32 %g, i32 %width, i1 zeroext %stat_ok) #0 !dbg !6144 {
entry:
  %g.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %stat_ok.addr = alloca i8, align 1
  store i32 %g, i32* %g.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %g.addr, metadata !6147, metadata !DIExpression()), !dbg !6148
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6149, metadata !DIExpression()), !dbg !6150
  %frombool = zext i1 %stat_ok to i8
  store i8 %frombool, i8* %stat_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stat_ok.addr, metadata !6151, metadata !DIExpression()), !dbg !6152
  %0 = load i8, i8* %stat_ok.addr, align 1, !dbg !6153
  %tobool = trunc i8 %0 to i1, !dbg !6153
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6154

cond.true:                                        ; preds = %entry
  br label %cond.end4, !dbg !6154

cond.false:                                       ; preds = %entry
  %1 = load i8, i8* @numeric_ids, align 1, !dbg !6155
  %tobool1 = trunc i8 %1 to i1, !dbg !6155
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !6155

cond.true2:                                       ; preds = %cond.false
  br label %cond.end, !dbg !6155

cond.false3:                                      ; preds = %cond.false
  %2 = load i32, i32* %g.addr, align 4, !dbg !6156
  %call = call i8* @getgroup(i32 %2), !dbg !6157
  br label %cond.end, !dbg !6155

cond.end:                                         ; preds = %cond.false3, %cond.true2
  %cond = phi i8* [ null, %cond.true2 ], [ %call, %cond.false3 ], !dbg !6155
  br label %cond.end4, !dbg !6154

cond.end4:                                        ; preds = %cond.end, %cond.true
  %cond5 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true ], [ %cond, %cond.end ], !dbg !6154
  %3 = load i32, i32* %g.addr, align 4, !dbg !6158
  %conv = zext i32 %3 to i64, !dbg !6158
  %4 = load i32, i32* %width.addr, align 4, !dbg !6159
  call void @format_user_or_group(i8* %cond5, i64 %conv, i32 %4), !dbg !6160
  ret void, !dbg !6161
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_user_or_group(i8* %name, i64 %id, i32 %width) #0 !dbg !6162 {
entry:
  %name.addr = alloca i8*, align 8
  %id.addr = alloca i64, align 8
  %width.addr = alloca i32, align 4
  %len = alloca i64, align 8, !ctir !149
  %width_gap = alloca i32, align 4, !ctir !27
  %pad = alloca i32, align 4, !ctir !27
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6165, metadata !DIExpression()), !dbg !6166
  store i64 %id, i64* %id.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %id.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6171, metadata !DIExpression()), !dbg !6172
  %0 = load i8*, i8** %name.addr, align 8, !dbg !6173
  %tobool = icmp ne i8* %0, null, !dbg !6173
  br i1 %tobool, label %if.then, label %if.else, !dbg !6175

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %width_gap, metadata !6176, metadata !DIExpression()), !dbg !6178
  %1 = load i32, i32* %width.addr, align 4, !dbg !6179
  %2 = load i8*, i8** %name.addr, align 8, !dbg !6180
  %call = call i32 @gnu_mbswidth(i8* %2, i32 0), !dbg !6181
  %sub = sub nsw i32 %1, %call, !dbg !6182
  store i32 %sub, i32* %width_gap, align 4, !dbg !6178
  call void @llvm.dbg.declare(metadata i32* %pad, metadata !6183, metadata !DIExpression()), !dbg !6184
  %3 = load i32, i32* %width_gap, align 4, !dbg !6185
  %cmp = icmp sgt i32 0, %3, !dbg !6185
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6185

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !6185

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* %width_gap, align 4, !dbg !6185
  br label %cond.end, !dbg !6185

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ], !dbg !6185
  store i32 %cond, i32* %pad, align 4, !dbg !6184
  %5 = load i8*, i8** %name.addr, align 8, !dbg !6186
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !6186
  %call1 = call i32 @fputs_unlocked(i8* %5, %struct._IO_FILE* %6), !dbg !6186
  %7 = load i8*, i8** %name.addr, align 8, !dbg !6187
  %call2 = call i64 @strlen(i8* %7) #16, !dbg !6188
  %8 = load i32, i32* %pad, align 4, !dbg !6189
  %conv = sext i32 %8 to i64, !dbg !6189
  %add = add i64 %call2, %conv, !dbg !6190
  store i64 %add, i64* %len, align 8, !dbg !6191
  br label %do.body, !dbg !6192

do.body:                                          ; preds = %do.cond, %cond.end
  %call3 = call i32 @putchar_unlocked(i32 32), !dbg !6193
  br label %do.cond, !dbg !6193

do.cond:                                          ; preds = %do.body
  %9 = load i32, i32* %pad, align 4, !dbg !6194
  %dec = add nsw i32 %9, -1, !dbg !6194
  store i32 %dec, i32* %pad, align 4, !dbg !6194
  %tobool4 = icmp ne i32 %9, 0, !dbg !6193
  br i1 %tobool4, label %do.body, label %do.end, !dbg !6193, !llvm.loop !6195

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !6197

if.else:                                          ; preds = %entry
  %10 = load i32, i32* %width.addr, align 4, !dbg !6198
  %11 = load i64, i64* %id.addr, align 8, !dbg !6200
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.230, i64 0, i64 0), i32 %10, i64 %11), !dbg !6201
  %12 = load i32, i32* %width.addr, align 4, !dbg !6202
  %conv6 = sext i32 %12 to i64, !dbg !6202
  store i64 %conv6, i64* %len, align 8, !dbg !6203
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %13 = load i64, i64* %len, align 8, !dbg !6204
  %add7 = add i64 %13, 1, !dbg !6205
  %14 = load i64, i64* @dired_pos, align 8, !dbg !6206
  %add8 = add i64 %14, %add7, !dbg !6206
  store i64 %add8, i64* @dired_pos, align 8, !dbg !6206
  ret void, !dbg !6207
}

; Function Attrs: nounwind readnone
declare dso_local i32 @gnu_dev_major(i64) #7

; Function Attrs: nounwind readnone
declare dso_local i32 @gnu_dev_minor(i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @unsigned_file_size(i64 %size) #0 !dbg !6208 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  %0 = load i64, i64* %size.addr, align 8, !dbg !6213
  %1 = load i64, i64* %size.addr, align 8, !dbg !6214
  %cmp = icmp slt i64 %1, 0, !dbg !6215
  %conv = zext i1 %cmp to i32, !dbg !6215
  %conv1 = sext i32 %conv to i64, !dbg !6216
  %mul = mul i64 %conv1, 0, !dbg !6217
  %add = add i64 %0, %mul, !dbg !6218
  ret i64 %add, !dbg !6219
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @align_nstrftime(i8* %buf, i64 %size, i1 zeroext %recent, %struct.tm* %tm, %struct.tm_zone* %tz, i32 %ns) #0 !dbg !6220 {
entry:
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %recent.addr = alloca i8, align 1
  %tm.addr = alloca %struct.tm*, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %ns.addr = alloca i32, align 4
  %nfmt = alloca i8*, align 8, !ctir !146
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6225, metadata !DIExpression()), !dbg !6226
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !6227, metadata !DIExpression()), !dbg !6228
  %frombool = zext i1 %recent to i8
  store i8 %frombool, i8* %recent.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %recent.addr, metadata !6229, metadata !DIExpression()), !dbg !6230
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tm.addr, metadata !6231, metadata !DIExpression()), !dbg !6232
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !6233, metadata !DIExpression()), !dbg !6234
  store i32 %ns, i32* %ns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ns.addr, metadata !6235, metadata !DIExpression()), !dbg !6236
  call void @llvm.dbg.declare(metadata i8** %nfmt, metadata !6237, metadata !DIExpression()), !dbg !6238
  %0 = load i8, i8* @use_abformat, align 1, !dbg !6239
  %tobool = trunc i8 %0 to i1, !dbg !6239
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6239

cond.true:                                        ; preds = %entry
  %1 = load i8, i8* %recent.addr, align 1, !dbg !6240
  %tobool1 = trunc i8 %1 to i1, !dbg !6240
  %idxprom = zext i1 %tobool1 to i64, !dbg !6241
  %arrayidx = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 %idxprom, !dbg !6241, !ctir !703
  %2 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !6242
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %2, i32 0, i32 4, !dbg !6243, !ctir !6224
  %3 = load i32, i32* %tm_mon, align 8, !dbg !6243, !ctir !27
  %idxprom2 = sext i32 %3 to i64, !dbg !6241
  %arrayidx3 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %arrayidx, i64 0, i64 %idxprom2, !dbg !6241, !ctir !700
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %arrayidx3, i64 0, i64 0, !dbg !6241, !ctir !705
  br label %cond.end, !dbg !6239

cond.false:                                       ; preds = %entry
  %4 = load i8, i8* %recent.addr, align 1, !dbg !6244
  %tobool4 = trunc i8 %4 to i1, !dbg !6244
  %idxprom5 = zext i1 %tobool4 to i64, !dbg !6245
  %arrayidx6 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %idxprom5, !dbg !6245, !ctir !686
  %5 = load i8*, i8** %arrayidx6, align 8, !dbg !6245
  br label %cond.end, !dbg !6239

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arraydecay, %cond.true ], [ %5, %cond.false ], !dbg !6239
  store i8* %cond, i8** %nfmt, align 8, !dbg !6238
  %6 = load i8*, i8** %buf.addr, align 8, !dbg !6246
  %7 = load i64, i64* %size.addr, align 8, !dbg !6247
  %8 = load i8*, i8** %nfmt, align 8, !dbg !6248
  %9 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !6249
  %10 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !6250
  %11 = load i32, i32* %ns.addr, align 4, !dbg !6251
  %call = call i64 @nstrftime(i8* %6, i64 %7, i8* %8, %struct.tm* %9, %struct.tm_zone* %10, i32 %11), !dbg !6252
  ret i64 %call, !dbg !6253
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @long_time_expected_width() #0 !dbg !1085 {
entry:
  %epoch = alloca i64, align 8, !ctir !162
  %tm = alloca %struct.tm, align 8, !ctir !5668
  %buf = alloca [1001 x i8], align 16, !ctir !826
  %len = alloca i64, align 8, !ctir !149
  %0 = load i32, i32* @long_time_expected_width.width, align 4, !dbg !6254
  %cmp = icmp slt i32 %0, 0, !dbg !6256
  br i1 %cmp, label %if.then, label %if.end11, !dbg !6257

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %epoch, metadata !6258, metadata !DIExpression()), !dbg !6260
  store i64 0, i64* %epoch, align 8, !dbg !6260
  call void @llvm.dbg.declare(metadata %struct.tm* %tm, metadata !6261, metadata !DIExpression()), !dbg !6262
  call void @llvm.dbg.declare(metadata [1001 x i8]* %buf, metadata !6263, metadata !DIExpression()), !dbg !6264
  %1 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8, !dbg !6265
  %call = call %struct.tm* @localtime_rz(%struct.tm_zone* %1, i64* %epoch, %struct.tm* %tm), !dbg !6267
  %tobool = icmp ne %struct.tm* %call, null, !dbg !6267
  br i1 %tobool, label %if.then1, label %if.end7, !dbg !6268

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6269, metadata !DIExpression()), !dbg !6271
  %arraydecay = getelementptr inbounds [1001 x i8], [1001 x i8]* %buf, i64 0, i64 0, !dbg !6272, !ctir !826
  %2 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8, !dbg !6273
  %call2 = call i64 @align_nstrftime(i8* %arraydecay, i64 1001, i1 zeroext false, %struct.tm* %tm, %struct.tm_zone* %2, i32 0), !dbg !6274
  store i64 %call2, i64* %len, align 8, !dbg !6271
  %3 = load i64, i64* %len, align 8, !dbg !6275
  %cmp3 = icmp ne i64 %3, 0, !dbg !6277
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !6278

if.then4:                                         ; preds = %if.then1
  %arraydecay5 = getelementptr inbounds [1001 x i8], [1001 x i8]* %buf, i64 0, i64 0, !dbg !6279, !ctir !826
  %4 = load i64, i64* %len, align 8, !dbg !6280
  %call6 = call i32 @mbsnwidth(i8* %arraydecay5, i64 %4, i32 0), !dbg !6281
  store i32 %call6, i32* @long_time_expected_width.width, align 4, !dbg !6282
  br label %if.end, !dbg !6283

if.end:                                           ; preds = %if.then4, %if.then1
  br label %if.end7, !dbg !6284

if.end7:                                          ; preds = %if.end, %if.then
  %5 = load i32, i32* @long_time_expected_width.width, align 4, !dbg !6285
  %cmp8 = icmp slt i32 %5, 0, !dbg !6287
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6288

if.then9:                                         ; preds = %if.end7
  store i32 0, i32* @long_time_expected_width.width, align 4, !dbg !6289
  br label %if.end10, !dbg !6290

if.end10:                                         ; preds = %if.then9, %if.end7
  br label %if.end11, !dbg !6291

if.end11:                                         ; preds = %if.end10, %entry
  %6 = load i32, i32* @long_time_expected_width.width, align 4, !dbg !6292
  ret i32 %6, !dbg !6293
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @timetostr(i64 %t, i8* %buf) #0 !dbg !6294 {
entry:
  %t.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  store i64 %t, i64* %t.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %t.addr, metadata !6297, metadata !DIExpression()), !dbg !6298
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  %0 = load i64, i64* %t.addr, align 8, !dbg !6301
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !6302
  %call = call i8* @imaxtostr(i64 %0, i8* %1), !dbg !6303
  ret i8* %call, !dbg !6304
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @print_name_with_quoting(%struct.fileinfo* %f, i1 zeroext %symlink_target, %struct.obstack* %stack, i64 %start_col) #0 !dbg !6305 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  %symlink_target.addr = alloca i8, align 1
  %stack.addr = alloca %struct.obstack*, align 8
  %start_col.addr = alloca i64, align 8
  %name = alloca i8*, align 8, !ctir !146
  %color = alloca %struct.bin_str*, align 8, !ctir !810
  %used_color_this_time = alloca i8, align 1, !ctir !141
  %len = alloca i64, align 8, !ctir !149
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !6308, metadata !DIExpression()), !dbg !6309
  %frombool = zext i1 %symlink_target to i8
  store i8 %frombool, i8* %symlink_target.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %symlink_target.addr, metadata !6310, metadata !DIExpression()), !dbg !6311
  store %struct.obstack* %stack, %struct.obstack** %stack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %stack.addr, metadata !6312, metadata !DIExpression()), !dbg !6313
  store i64 %start_col, i64* %start_col.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %start_col.addr, metadata !6314, metadata !DIExpression()), !dbg !6315
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6316, metadata !DIExpression()), !dbg !6317
  %0 = load i8, i8* %symlink_target.addr, align 1, !dbg !6318
  %tobool = trunc i8 %0 to i1, !dbg !6318
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6318

cond.true:                                        ; preds = %entry
  %1 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6319
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 1, !dbg !6320, !ctir !184
  %2 = load i8*, i8** %linkname, align 8, !dbg !6320, !ctir !143
  br label %cond.end, !dbg !6318

cond.false:                                       ; preds = %entry
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6321
  %name1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 0, !dbg !6322, !ctir !184
  %4 = load i8*, i8** %name1, align 8, !dbg !6322, !ctir !143
  br label %cond.end, !dbg !6318

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ %4, %cond.false ], !dbg !6318
  store i8* %cond, i8** %name, align 8, !dbg !6317
  call void @llvm.dbg.declare(metadata %struct.bin_str** %color, metadata !6323, metadata !DIExpression()), !dbg !6324
  %5 = load i8, i8* @print_with_color, align 1, !dbg !6325
  %tobool2 = trunc i8 %5 to i1, !dbg !6325
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !6325

cond.true3:                                       ; preds = %cond.end
  %6 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6326
  %7 = load i8, i8* %symlink_target.addr, align 1, !dbg !6327
  %tobool4 = trunc i8 %7 to i1, !dbg !6327
  %call = call %struct.bin_str* @get_color_indicator(%struct.fileinfo* %6, i1 zeroext %tobool4), !dbg !6328
  br label %cond.end6, !dbg !6325

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !6325

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.bin_str* [ %call, %cond.true3 ], [ null, %cond.false5 ], !dbg !6325
  store %struct.bin_str* %cond7, %struct.bin_str** %color, align 8, !dbg !6324
  call void @llvm.dbg.declare(metadata i8* %used_color_this_time, metadata !6329, metadata !DIExpression()), !dbg !6330
  %8 = load i8, i8* @print_with_color, align 1, !dbg !6331
  %tobool8 = trunc i8 %8 to i1, !dbg !6331
  br i1 %tobool8, label %land.rhs, label %land.end, !dbg !6332

land.rhs:                                         ; preds = %cond.end6
  %9 = load %struct.bin_str*, %struct.bin_str** %color, align 8, !dbg !6333
  %tobool9 = icmp ne %struct.bin_str* %9, null, !dbg !6333
  br i1 %tobool9, label %lor.end, label %lor.rhs, !dbg !6334

lor.rhs:                                          ; preds = %land.rhs
  %call10 = call zeroext i1 @is_colored(i32 4), !dbg !6335
  br label %lor.end, !dbg !6334

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %10 = phi i1 [ true, %land.rhs ], [ %call10, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %cond.end6
  %11 = phi i1 [ false, %cond.end6 ], [ %10, %lor.end ], !dbg !6336
  %frombool11 = zext i1 %11 to i8, !dbg !6330
  store i8 %frombool11, i8* %used_color_this_time, align 1, !dbg !6330
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6337, metadata !DIExpression()), !dbg !6338
  %12 = load i8*, i8** %name, align 8, !dbg !6339
  %13 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !6340
  %14 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6341
  %quoted = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %14, i32 0, i32 11, !dbg !6342, !ctir !184
  %15 = load i32, i32* %quoted, align 4, !dbg !6342, !ctir !27
  %16 = load %struct.bin_str*, %struct.bin_str** %color, align 8, !dbg !6343
  %17 = load i8, i8* %symlink_target.addr, align 1, !dbg !6344
  %tobool12 = trunc i8 %17 to i1, !dbg !6344
  %lnot = xor i1 %tobool12, true, !dbg !6345
  %18 = load %struct.obstack*, %struct.obstack** %stack.addr, align 8, !dbg !6346
  %19 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6347
  %absolute_name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %19, i32 0, i32 2, !dbg !6348, !ctir !184
  %20 = load i8*, i8** %absolute_name, align 8, !dbg !6348, !ctir !143
  %call13 = call i64 @quote_name(i8* %12, %struct.quoting_options* %13, i32 %15, %struct.bin_str* %16, i1 zeroext %lnot, %struct.obstack* %18, i8* %20), !dbg !6349
  store i64 %call13, i64* %len, align 8, !dbg !6338
  call void @process_signals(), !dbg !6350
  %21 = load i8, i8* %used_color_this_time, align 1, !dbg !6351
  %tobool14 = trunc i8 %21 to i1, !dbg !6351
  br i1 %tobool14, label %if.then, label %if.end18, !dbg !6353

if.then:                                          ; preds = %land.end
  call void @prep_non_filename_text(), !dbg !6354
  %22 = load i64, i64* @line_length, align 8, !dbg !6356
  %tobool15 = icmp ne i64 %22, 0, !dbg !6356
  br i1 %tobool15, label %land.lhs.true, label %if.end, !dbg !6358

land.lhs.true:                                    ; preds = %if.then
  %23 = load i64, i64* %start_col.addr, align 8, !dbg !6359
  %24 = load i64, i64* @line_length, align 8, !dbg !6360
  %div = udiv i64 %23, %24, !dbg !6361
  %25 = load i64, i64* %start_col.addr, align 8, !dbg !6362
  %26 = load i64, i64* %len, align 8, !dbg !6363
  %add = add i64 %25, %26, !dbg !6364
  %sub = sub i64 %add, 1, !dbg !6365
  %27 = load i64, i64* @line_length, align 8, !dbg !6366
  %div16 = udiv i64 %sub, %27, !dbg !6367
  %cmp = icmp ne i64 %div, %div16, !dbg !6368
  br i1 %cmp, label %if.then17, label %if.end, !dbg !6369

if.then17:                                        ; preds = %land.lhs.true
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 23)), !dbg !6370
  br label %if.end, !dbg !6370

if.end:                                           ; preds = %if.then17, %land.lhs.true, %if.then
  br label %if.end18, !dbg !6371

if.end18:                                         ; preds = %if.end, %land.end
  %28 = load i64, i64* %len, align 8, !dbg !6372
  ret i64 %28, !dbg !6373
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_type_indicator(i1 zeroext %stat_ok, i32 %mode, i32 %type) #0 !dbg !6374 {
entry:
  %stat_ok.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %c = alloca i8, align 1, !ctir !144
  %frombool = zext i1 %stat_ok to i8
  store i8 %frombool, i8* %stat_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stat_ok.addr, metadata !6377, metadata !DIExpression()), !dbg !6378
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6379, metadata !DIExpression()), !dbg !6380
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6381, metadata !DIExpression()), !dbg !6382
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6383, metadata !DIExpression()), !dbg !6384
  %0 = load i8, i8* %stat_ok.addr, align 1, !dbg !6385
  %tobool = trunc i8 %0 to i1, !dbg !6385
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6386
  %2 = load i32, i32* %type.addr, align 4, !dbg !6387
  %call = call signext i8 @get_type_indicator(i1 zeroext %tobool, i32 %1, i32 %2), !dbg !6388
  store i8 %call, i8* %c, align 1, !dbg !6384
  %3 = load i8, i8* %c, align 1, !dbg !6389
  %tobool1 = icmp ne i8 %3, 0, !dbg !6389
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6391

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !6392

do.body:                                          ; preds = %if.then
  %4 = load i8, i8* %c, align 1, !dbg !6393
  %conv = sext i8 %4 to i32, !dbg !6393
  %call2 = call i32 @putchar_unlocked(i32 %conv), !dbg !6393
  %5 = load i64, i64* @dired_pos, align 8, !dbg !6393
  %inc = add i64 %5, 1, !dbg !6393
  store i64 %inc, i64* @dired_pos, align 8, !dbg !6393
  br label %do.end, !dbg !6393

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !6393

if.end:                                           ; preds = %do.end, %entry
  %6 = load i8, i8* %c, align 1, !dbg !6395
  %tobool3 = icmp ne i8 %6, 0, !dbg !6396
  %lnot = xor i1 %tobool3, true, !dbg !6396
  %lnot4 = xor i1 %lnot, true, !dbg !6397
  ret i1 %lnot4, !dbg !6398
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @get_type_indicator(i1 zeroext %stat_ok, i32 %mode, i32 %type) #0 !dbg !6399 {
entry:
  %stat_ok.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %c = alloca i8, align 1, !ctir !144
  %frombool = zext i1 %stat_ok to i8
  store i8 %frombool, i8* %stat_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stat_ok.addr, metadata !6402, metadata !DIExpression()), !dbg !6403
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6404, metadata !DIExpression()), !dbg !6405
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6406, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6408, metadata !DIExpression()), !dbg !6409
  %0 = load i8, i8* %stat_ok.addr, align 1, !dbg !6410
  %tobool = trunc i8 %0 to i1, !dbg !6410
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6412

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6413
  %and = and i32 %1, 61440, !dbg !6413
  %cmp = icmp eq i32 %and, 32768, !dbg !6413
  br i1 %cmp, label %if.then, label %if.else8, !dbg !6410

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %type.addr, align 4, !dbg !6414
  %cmp1 = icmp eq i32 %2, 5, !dbg !6415
  br i1 %cmp1, label %if.then, label %if.else8, !dbg !6412

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i8, i8* %stat_ok.addr, align 1, !dbg !6416
  %tobool2 = trunc i8 %3 to i1, !dbg !6416
  br i1 %tobool2, label %land.lhs.true, label %if.else, !dbg !6419

land.lhs.true:                                    ; preds = %if.then
  %4 = load i32, i32* @indicator_style, align 4, !dbg !6420
  %cmp3 = icmp eq i32 %4, 3, !dbg !6421
  br i1 %cmp3, label %land.lhs.true4, label %if.else, !dbg !6422

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load i32, i32* %mode.addr, align 4, !dbg !6423
  %and5 = and i32 %5, 73, !dbg !6424
  %tobool6 = icmp ne i32 %and5, 0, !dbg !6424
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !6425

if.then7:                                         ; preds = %land.lhs.true4
  store i8 42, i8* %c, align 1, !dbg !6426
  br label %if.end, !dbg !6427

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %if.then
  store i8 0, i8* %c, align 1, !dbg !6428
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end55, !dbg !6429

if.else8:                                         ; preds = %cond.false, %cond.true
  %6 = load i8, i8* %stat_ok.addr, align 1, !dbg !6430
  %tobool9 = trunc i8 %6 to i1, !dbg !6430
  br i1 %tobool9, label %cond.true10, label %cond.false13, !dbg !6433

cond.true10:                                      ; preds = %if.else8
  %7 = load i32, i32* %mode.addr, align 4, !dbg !6434
  %and11 = and i32 %7, 61440, !dbg !6434
  %cmp12 = icmp eq i32 %and11, 16384, !dbg !6434
  br i1 %cmp12, label %if.then16, label %if.else17, !dbg !6430

cond.false13:                                     ; preds = %if.else8
  %8 = load i32, i32* %type.addr, align 4, !dbg !6435
  %cmp14 = icmp eq i32 %8, 3, !dbg !6436
  br i1 %cmp14, label %if.then16, label %lor.lhs.false, !dbg !6437

lor.lhs.false:                                    ; preds = %cond.false13
  %9 = load i32, i32* %type.addr, align 4, !dbg !6438
  %cmp15 = icmp eq i32 %9, 9, !dbg !6439
  br i1 %cmp15, label %if.then16, label %if.else17, !dbg !6433

if.then16:                                        ; preds = %lor.lhs.false, %cond.false13, %cond.true10
  store i8 47, i8* %c, align 1, !dbg !6440
  br label %if.end54, !dbg !6441

if.else17:                                        ; preds = %lor.lhs.false, %cond.true10
  %10 = load i32, i32* @indicator_style, align 4, !dbg !6442
  %cmp18 = icmp eq i32 %10, 1, !dbg !6444
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !6445

if.then19:                                        ; preds = %if.else17
  store i8 0, i8* %c, align 1, !dbg !6446
  br label %if.end53, !dbg !6447

if.else20:                                        ; preds = %if.else17
  %11 = load i8, i8* %stat_ok.addr, align 1, !dbg !6448
  %tobool21 = trunc i8 %11 to i1, !dbg !6448
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !6450

cond.true22:                                      ; preds = %if.else20
  %12 = load i32, i32* %mode.addr, align 4, !dbg !6451
  %and23 = and i32 %12, 61440, !dbg !6451
  %cmp24 = icmp eq i32 %and23, 40960, !dbg !6451
  br i1 %cmp24, label %if.then27, label %if.else28, !dbg !6448

cond.false25:                                     ; preds = %if.else20
  %13 = load i32, i32* %type.addr, align 4, !dbg !6452
  %cmp26 = icmp eq i32 %13, 6, !dbg !6453
  br i1 %cmp26, label %if.then27, label %if.else28, !dbg !6450

if.then27:                                        ; preds = %cond.false25, %cond.true22
  store i8 64, i8* %c, align 1, !dbg !6454
  br label %if.end52, !dbg !6455

if.else28:                                        ; preds = %cond.false25, %cond.true22
  %14 = load i8, i8* %stat_ok.addr, align 1, !dbg !6456
  %tobool29 = trunc i8 %14 to i1, !dbg !6456
  br i1 %tobool29, label %cond.true30, label %cond.false33, !dbg !6458

cond.true30:                                      ; preds = %if.else28
  %15 = load i32, i32* %mode.addr, align 4, !dbg !6459
  %and31 = and i32 %15, 61440, !dbg !6459
  %cmp32 = icmp eq i32 %and31, 4096, !dbg !6459
  br i1 %cmp32, label %if.then35, label %if.else36, !dbg !6456

cond.false33:                                     ; preds = %if.else28
  %16 = load i32, i32* %type.addr, align 4, !dbg !6460
  %cmp34 = icmp eq i32 %16, 1, !dbg !6461
  br i1 %cmp34, label %if.then35, label %if.else36, !dbg !6458

if.then35:                                        ; preds = %cond.false33, %cond.true30
  store i8 124, i8* %c, align 1, !dbg !6462
  br label %if.end51, !dbg !6463

if.else36:                                        ; preds = %cond.false33, %cond.true30
  %17 = load i8, i8* %stat_ok.addr, align 1, !dbg !6464
  %tobool37 = trunc i8 %17 to i1, !dbg !6464
  br i1 %tobool37, label %cond.true38, label %cond.false41, !dbg !6466

cond.true38:                                      ; preds = %if.else36
  %18 = load i32, i32* %mode.addr, align 4, !dbg !6467
  %and39 = and i32 %18, 61440, !dbg !6467
  %cmp40 = icmp eq i32 %and39, 49152, !dbg !6467
  br i1 %cmp40, label %if.then43, label %if.else44, !dbg !6464

cond.false41:                                     ; preds = %if.else36
  %19 = load i32, i32* %type.addr, align 4, !dbg !6468
  %cmp42 = icmp eq i32 %19, 7, !dbg !6469
  br i1 %cmp42, label %if.then43, label %if.else44, !dbg !6466

if.then43:                                        ; preds = %cond.false41, %cond.true38
  store i8 61, i8* %c, align 1, !dbg !6470
  br label %if.end50, !dbg !6471

if.else44:                                        ; preds = %cond.false41, %cond.true38
  %20 = load i8, i8* %stat_ok.addr, align 1, !dbg !6472
  %tobool45 = trunc i8 %20 to i1, !dbg !6472
  br i1 %tobool45, label %land.lhs.true46, label %if.else48, !dbg !6474

land.lhs.true46:                                  ; preds = %if.else44
  br i1 false, label %if.then47, label %if.else48, !dbg !6475

if.then47:                                        ; preds = %land.lhs.true46
  store i8 62, i8* %c, align 1, !dbg !6476
  br label %if.end49, !dbg !6477

if.else48:                                        ; preds = %land.lhs.true46, %if.else44
  store i8 0, i8* %c, align 1, !dbg !6478
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then47
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then43
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then35
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then27
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then19
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then16
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end
  %21 = load i8, i8* %c, align 1, !dbg !6479
  ret i8 %21, !dbg !6480
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.bin_str* @get_color_indicator(%struct.fileinfo* %f, i1 zeroext %symlink_target) #0 !dbg !1073 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  %symlink_target.addr = alloca i8, align 1
  %type = alloca i32, align 4, !ctir !53
  %ext = alloca %struct.color_ext_type*, align 8, !ctir !710
  %len = alloca i64, align 8, !ctir !149
  %name = alloca i8*, align 8, !ctir !146
  %mode = alloca i32, align 4, !ctir !228
  %linkok = alloca i32, align 4, !ctir !27
  %s = alloca %struct.bin_str*, align 8, !ctir !813
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !6481, metadata !DIExpression()), !dbg !6482
  %frombool = zext i1 %symlink_target to i8
  store i8 %frombool, i8* %symlink_target.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %symlink_target.addr, metadata !6483, metadata !DIExpression()), !dbg !6484
  call void @llvm.dbg.declare(metadata i32* %type, metadata !6485, metadata !DIExpression()), !dbg !6486
  call void @llvm.dbg.declare(metadata %struct.color_ext_type** %ext, metadata !6487, metadata !DIExpression()), !dbg !6488
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6489, metadata !DIExpression()), !dbg !6490
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6491, metadata !DIExpression()), !dbg !6492
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6493, metadata !DIExpression()), !dbg !6494
  call void @llvm.dbg.declare(metadata i32* %linkok, metadata !6495, metadata !DIExpression()), !dbg !6496
  %0 = load i8, i8* %symlink_target.addr, align 1, !dbg !6497
  %tobool = trunc i8 %0 to i1, !dbg !6497
  br i1 %tobool, label %if.then, label %if.else, !dbg !6499

if.then:                                          ; preds = %entry
  %1 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6500
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 1, !dbg !6502, !ctir !184
  %2 = load i8*, i8** %linkname, align 8, !dbg !6502, !ctir !143
  store i8* %2, i8** %name, align 8, !dbg !6503
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6504
  %linkmode = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 5, !dbg !6505, !ctir !184
  %4 = load i32, i32* %linkmode, align 4, !dbg !6505, !ctir !228
  store i32 %4, i32* %mode, align 4, !dbg !6506
  %5 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6507
  %linkok1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 8, !dbg !6508, !ctir !184
  %6 = load i8, i8* %linkok1, align 1, !dbg !6508
  %tobool2 = trunc i8 %6 to i1, !dbg !6508, !ctir !141
  %7 = zext i1 %tobool2 to i64, !dbg !6507
  %cond = select i1 %tobool2, i32 0, i32 -1, !dbg !6507
  store i32 %cond, i32* %linkok, align 4, !dbg !6509
  br label %if.end, !dbg !6510

if.else:                                          ; preds = %entry
  %8 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6511
  %name3 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 0, !dbg !6513, !ctir !184
  %9 = load i8*, i8** %name3, align 8, !dbg !6513, !ctir !143
  store i8* %9, i8** %name, align 8, !dbg !6514
  %10 = load i8, i8* @color_symlink_as_referent, align 1, !dbg !6515
  %tobool4 = trunc i8 %10 to i1, !dbg !6515
  br i1 %tobool4, label %land.lhs.true, label %cond.false, !dbg !6515

land.lhs.true:                                    ; preds = %if.else
  %11 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6515
  %linkok5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %11, i32 0, i32 8, !dbg !6515, !ctir !184
  %12 = load i8, i8* %linkok5, align 1, !dbg !6515
  %tobool6 = trunc i8 %12 to i1, !dbg !6515, !ctir !141
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !6515

cond.true:                                        ; preds = %land.lhs.true
  %13 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6515
  %linkmode7 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %13, i32 0, i32 5, !dbg !6515, !ctir !184
  %14 = load i32, i32* %linkmode7, align 4, !dbg !6515, !ctir !228
  br label %cond.end, !dbg !6515

cond.false:                                       ; preds = %land.lhs.true, %if.else
  %15 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6515
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %15, i32 0, i32 3, !dbg !6515, !ctir !184
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 3, !dbg !6515, !ctir !191
  %16 = load i32, i32* %st_mode, align 8, !dbg !6515, !ctir !201
  br label %cond.end, !dbg !6515

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi i32 [ %14, %cond.true ], [ %16, %cond.false ], !dbg !6515
  store i32 %cond8, i32* %mode, align 4, !dbg !6516
  %17 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6517
  %linkok9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %17, i32 0, i32 8, !dbg !6518, !ctir !184
  %18 = load i8, i8* %linkok9, align 1, !dbg !6518
  %tobool10 = trunc i8 %18 to i1, !dbg !6518, !ctir !141
  %conv = zext i1 %tobool10 to i32, !dbg !6517
  store i32 %conv, i32* %linkok, align 4, !dbg !6519
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %19 = load i32, i32* %linkok, align 4, !dbg !6520
  %cmp = icmp eq i32 %19, -1, !dbg !6522
  br i1 %cmp, label %land.lhs.true12, label %if.else15, !dbg !6523

land.lhs.true12:                                  ; preds = %if.end
  %call = call zeroext i1 @is_colored(i32 12), !dbg !6524
  br i1 %call, label %if.then14, label %if.else15, !dbg !6525

if.then14:                                        ; preds = %land.lhs.true12
  store i32 12, i32* %type, align 4, !dbg !6526
  br label %if.end132, !dbg !6527

if.else15:                                        ; preds = %land.lhs.true12, %if.end
  %20 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6528
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %20, i32 0, i32 7, !dbg !6530, !ctir !184
  %21 = load i8, i8* %stat_ok, align 8, !dbg !6530
  %tobool16 = trunc i8 %21 to i1, !dbg !6530, !ctir !141
  br i1 %tobool16, label %if.else18, label %if.then17, !dbg !6531

if.then17:                                        ; preds = %if.else15
  %22 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6532
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %22, i32 0, i32 4, !dbg !6534, !ctir !184
  %23 = load i32, i32* %filetype, align 8, !dbg !6534, !ctir !36
  %idxprom = zext i32 %23 to i64, !dbg !6535
  %arrayidx = getelementptr inbounds [10 x i32], [10 x i32]* @get_color_indicator.filetype_indicator, i64 0, i64 %idxprom, !dbg !6535, !ctir !812
  %24 = load i32, i32* %arrayidx, align 4, !dbg !6535
  store i32 %24, i32* %type, align 4, !dbg !6536
  br label %if.end131, !dbg !6537

if.else18:                                        ; preds = %if.else15
  %25 = load i32, i32* %mode, align 4, !dbg !6538
  %and = and i32 %25, 61440, !dbg !6538
  %cmp19 = icmp eq i32 %and, 32768, !dbg !6538
  br i1 %cmp19, label %if.then21, label %if.else65, !dbg !6541

if.then21:                                        ; preds = %if.else18
  store i32 5, i32* %type, align 4, !dbg !6542
  %26 = load i32, i32* %mode, align 4, !dbg !6544
  %and22 = and i32 %26, 2048, !dbg !6546
  %cmp23 = icmp ne i32 %and22, 0, !dbg !6547
  br i1 %cmp23, label %land.lhs.true25, label %if.else29, !dbg !6548

land.lhs.true25:                                  ; preds = %if.then21
  %call26 = call zeroext i1 @is_colored(i32 16), !dbg !6549
  br i1 %call26, label %if.then28, label %if.else29, !dbg !6550

if.then28:                                        ; preds = %land.lhs.true25
  store i32 16, i32* %type, align 4, !dbg !6551
  br label %if.end64, !dbg !6552

if.else29:                                        ; preds = %land.lhs.true25, %if.then21
  %27 = load i32, i32* %mode, align 4, !dbg !6553
  %and30 = and i32 %27, 1024, !dbg !6555
  %cmp31 = icmp ne i32 %and30, 0, !dbg !6556
  br i1 %cmp31, label %land.lhs.true33, label %if.else37, !dbg !6557

land.lhs.true33:                                  ; preds = %if.else29
  %call34 = call zeroext i1 @is_colored(i32 17), !dbg !6558
  br i1 %call34, label %if.then36, label %if.else37, !dbg !6559

if.then36:                                        ; preds = %land.lhs.true33
  store i32 17, i32* %type, align 4, !dbg !6560
  br label %if.end63, !dbg !6561

if.else37:                                        ; preds = %land.lhs.true33, %if.else29
  %call38 = call zeroext i1 @is_colored(i32 21), !dbg !6562
  br i1 %call38, label %land.lhs.true40, label %if.else44, !dbg !6564

land.lhs.true40:                                  ; preds = %if.else37
  %28 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6565
  %has_capability = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %28, i32 0, i32 10, !dbg !6566, !ctir !184
  %29 = load i8, i8* %has_capability, align 8, !dbg !6566
  %tobool41 = trunc i8 %29 to i1, !dbg !6566, !ctir !141
  br i1 %tobool41, label %if.then43, label %if.else44, !dbg !6567

if.then43:                                        ; preds = %land.lhs.true40
  store i32 21, i32* %type, align 4, !dbg !6568
  br label %if.end62, !dbg !6569

if.else44:                                        ; preds = %land.lhs.true40, %if.else37
  %30 = load i32, i32* %mode, align 4, !dbg !6570
  %and45 = and i32 %30, 73, !dbg !6572
  %cmp46 = icmp ne i32 %and45, 0, !dbg !6573
  br i1 %cmp46, label %land.lhs.true48, label %if.else52, !dbg !6574

land.lhs.true48:                                  ; preds = %if.else44
  %call49 = call zeroext i1 @is_colored(i32 14), !dbg !6575
  br i1 %call49, label %if.then51, label %if.else52, !dbg !6576

if.then51:                                        ; preds = %land.lhs.true48
  store i32 14, i32* %type, align 4, !dbg !6577
  br label %if.end61, !dbg !6578

if.else52:                                        ; preds = %land.lhs.true48, %if.else44
  %31 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6579
  %stat53 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %31, i32 0, i32 3, !dbg !6581, !ctir !184
  %st_nlink = getelementptr inbounds %struct.stat, %struct.stat* %stat53, i32 0, i32 2, !dbg !6582, !ctir !191
  %32 = load i64, i64* %st_nlink, align 8, !dbg !6582, !ctir !199
  %cmp54 = icmp ult i64 1, %32, !dbg !6583
  br i1 %cmp54, label %land.lhs.true56, label %if.end60, !dbg !6584

land.lhs.true56:                                  ; preds = %if.else52
  %call57 = call zeroext i1 @is_colored(i32 22), !dbg !6585
  br i1 %call57, label %if.then59, label %if.end60, !dbg !6586

if.then59:                                        ; preds = %land.lhs.true56
  store i32 22, i32* %type, align 4, !dbg !6587
  br label %if.end60, !dbg !6588

if.end60:                                         ; preds = %if.then59, %land.lhs.true56, %if.else52
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then51
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then43
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then36
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then28
  br label %if.end130, !dbg !6589

if.else65:                                        ; preds = %if.else18
  %33 = load i32, i32* %mode, align 4, !dbg !6590
  %and66 = and i32 %33, 61440, !dbg !6590
  %cmp67 = icmp eq i32 %and66, 16384, !dbg !6590
  br i1 %cmp67, label %if.then69, label %if.else98, !dbg !6592

if.then69:                                        ; preds = %if.else65
  store i32 6, i32* %type, align 4, !dbg !6593
  %34 = load i32, i32* %mode, align 4, !dbg !6595
  %and70 = and i32 %34, 512, !dbg !6597
  %tobool71 = icmp ne i32 %and70, 0, !dbg !6597
  br i1 %tobool71, label %land.lhs.true72, label %if.else79, !dbg !6598

land.lhs.true72:                                  ; preds = %if.then69
  %35 = load i32, i32* %mode, align 4, !dbg !6599
  %and73 = and i32 %35, 2, !dbg !6600
  %tobool74 = icmp ne i32 %and73, 0, !dbg !6600
  br i1 %tobool74, label %land.lhs.true75, label %if.else79, !dbg !6601

land.lhs.true75:                                  ; preds = %land.lhs.true72
  %call76 = call zeroext i1 @is_colored(i32 20), !dbg !6602
  br i1 %call76, label %if.then78, label %if.else79, !dbg !6603

if.then78:                                        ; preds = %land.lhs.true75
  store i32 20, i32* %type, align 4, !dbg !6604
  br label %if.end97, !dbg !6605

if.else79:                                        ; preds = %land.lhs.true75, %land.lhs.true72, %if.then69
  %36 = load i32, i32* %mode, align 4, !dbg !6606
  %and80 = and i32 %36, 2, !dbg !6608
  %cmp81 = icmp ne i32 %and80, 0, !dbg !6609
  br i1 %cmp81, label %land.lhs.true83, label %if.else87, !dbg !6610

land.lhs.true83:                                  ; preds = %if.else79
  %call84 = call zeroext i1 @is_colored(i32 19), !dbg !6611
  br i1 %call84, label %if.then86, label %if.else87, !dbg !6612

if.then86:                                        ; preds = %land.lhs.true83
  store i32 19, i32* %type, align 4, !dbg !6613
  br label %if.end96, !dbg !6614

if.else87:                                        ; preds = %land.lhs.true83, %if.else79
  %37 = load i32, i32* %mode, align 4, !dbg !6615
  %and88 = and i32 %37, 512, !dbg !6617
  %cmp89 = icmp ne i32 %and88, 0, !dbg !6618
  br i1 %cmp89, label %land.lhs.true91, label %if.end95, !dbg !6619

land.lhs.true91:                                  ; preds = %if.else87
  %call92 = call zeroext i1 @is_colored(i32 18), !dbg !6620
  br i1 %call92, label %if.then94, label %if.end95, !dbg !6621

if.then94:                                        ; preds = %land.lhs.true91
  store i32 18, i32* %type, align 4, !dbg !6622
  br label %if.end95, !dbg !6623

if.end95:                                         ; preds = %if.then94, %land.lhs.true91, %if.else87
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then86
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.then78
  br label %if.end129, !dbg !6624

if.else98:                                        ; preds = %if.else65
  %38 = load i32, i32* %mode, align 4, !dbg !6625
  %and99 = and i32 %38, 61440, !dbg !6625
  %cmp100 = icmp eq i32 %and99, 40960, !dbg !6625
  br i1 %cmp100, label %if.then102, label %if.else103, !dbg !6627

if.then102:                                       ; preds = %if.else98
  store i32 7, i32* %type, align 4, !dbg !6628
  br label %if.end128, !dbg !6629

if.else103:                                       ; preds = %if.else98
  %39 = load i32, i32* %mode, align 4, !dbg !6630
  %and104 = and i32 %39, 61440, !dbg !6630
  %cmp105 = icmp eq i32 %and104, 4096, !dbg !6630
  br i1 %cmp105, label %if.then107, label %if.else108, !dbg !6632

if.then107:                                       ; preds = %if.else103
  store i32 8, i32* %type, align 4, !dbg !6633
  br label %if.end127, !dbg !6634

if.else108:                                       ; preds = %if.else103
  %40 = load i32, i32* %mode, align 4, !dbg !6635
  %and109 = and i32 %40, 61440, !dbg !6635
  %cmp110 = icmp eq i32 %and109, 49152, !dbg !6635
  br i1 %cmp110, label %if.then112, label %if.else113, !dbg !6637

if.then112:                                       ; preds = %if.else108
  store i32 9, i32* %type, align 4, !dbg !6638
  br label %if.end126, !dbg !6639

if.else113:                                       ; preds = %if.else108
  %41 = load i32, i32* %mode, align 4, !dbg !6640
  %and114 = and i32 %41, 61440, !dbg !6640
  %cmp115 = icmp eq i32 %and114, 24576, !dbg !6640
  br i1 %cmp115, label %if.then117, label %if.else118, !dbg !6642

if.then117:                                       ; preds = %if.else113
  store i32 10, i32* %type, align 4, !dbg !6643
  br label %if.end125, !dbg !6644

if.else118:                                       ; preds = %if.else113
  %42 = load i32, i32* %mode, align 4, !dbg !6645
  %and119 = and i32 %42, 61440, !dbg !6645
  %cmp120 = icmp eq i32 %and119, 8192, !dbg !6645
  br i1 %cmp120, label %if.then122, label %if.else123, !dbg !6647

if.then122:                                       ; preds = %if.else118
  store i32 11, i32* %type, align 4, !dbg !6648
  br label %if.end124, !dbg !6649

if.else123:                                       ; preds = %if.else118
  store i32 13, i32* %type, align 4, !dbg !6650
  br label %if.end124

if.end124:                                        ; preds = %if.else123, %if.then122
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.then117
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then112
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.then107
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.then102
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end97
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end64
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %if.then17
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.then14
  store %struct.color_ext_type* null, %struct.color_ext_type** %ext, align 8, !dbg !6653
  %43 = load i32, i32* %type, align 4, !dbg !6654
  %cmp133 = icmp eq i32 %43, 5, !dbg !6656
  br i1 %cmp133, label %if.then135, label %if.end155, !dbg !6657

if.then135:                                       ; preds = %if.end132
  %44 = load i8*, i8** %name, align 8, !dbg !6658
  %call136 = call i64 @strlen(i8* %44) #16, !dbg !6660
  store i64 %call136, i64* %len, align 8, !dbg !6661
  %45 = load i64, i64* %len, align 8, !dbg !6662
  %46 = load i8*, i8** %name, align 8, !dbg !6663
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 %45, !dbg !6663, !ctir !147
  store i8* %add.ptr, i8** %name, align 8, !dbg !6663
  %47 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8, !dbg !6664
  store %struct.color_ext_type* %47, %struct.color_ext_type** %ext, align 8, !dbg !6666
  br label %for.cond, !dbg !6667

for.cond:                                         ; preds = %for.inc, %if.then135
  %48 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6668
  %cmp137 = icmp ne %struct.color_ext_type* %48, null, !dbg !6670
  br i1 %cmp137, label %for.body, label %for.end, !dbg !6671

for.body:                                         ; preds = %for.cond
  %49 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6672
  %ext139 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %49, i32 0, i32 0, !dbg !6675, !ctir !711
  %len140 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext139, i32 0, i32 0, !dbg !6676, !ctir !282
  %50 = load i64, i64* %len140, align 8, !dbg !6676, !ctir !149
  %51 = load i64, i64* %len, align 8, !dbg !6677
  %cmp141 = icmp ule i64 %50, %51, !dbg !6678
  br i1 %cmp141, label %land.lhs.true143, label %if.end154, !dbg !6679

land.lhs.true143:                                 ; preds = %for.body
  %52 = load i8*, i8** %name, align 8, !dbg !6680
  %53 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6681
  %ext144 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %53, i32 0, i32 0, !dbg !6682, !ctir !711
  %len145 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext144, i32 0, i32 0, !dbg !6683, !ctir !282
  %54 = load i64, i64* %len145, align 8, !dbg !6683, !ctir !149
  %idx.neg = sub i64 0, %54, !dbg !6684
  %add.ptr146 = getelementptr inbounds i8, i8* %52, i64 %idx.neg, !dbg !6684, !ctir !147
  %55 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6685
  %ext147 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %55, i32 0, i32 0, !dbg !6686, !ctir !711
  %string = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext147, i32 0, i32 1, !dbg !6687, !ctir !282
  %56 = load i8*, i8** %string, align 8, !dbg !6687, !ctir !146
  %57 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6688
  %ext148 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %57, i32 0, i32 0, !dbg !6689, !ctir !711
  %len149 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %ext148, i32 0, i32 0, !dbg !6690, !ctir !282
  %58 = load i64, i64* %len149, align 8, !dbg !6690, !ctir !149
  %call150 = call i32 @c_strncasecmp(i8* %add.ptr146, i8* %56, i64 %58) #16, !dbg !6691
  %cmp151 = icmp eq i32 %call150, 0, !dbg !6692
  br i1 %cmp151, label %if.then153, label %if.end154, !dbg !6693

if.then153:                                       ; preds = %land.lhs.true143
  br label %for.end, !dbg !6694

if.end154:                                        ; preds = %land.lhs.true143, %for.body
  br label %for.inc, !dbg !6695

for.inc:                                          ; preds = %if.end154
  %59 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6696
  %next = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %59, i32 0, i32 2, !dbg !6697, !ctir !711
  %60 = load %struct.color_ext_type*, %struct.color_ext_type** %next, align 8, !dbg !6697, !ctir !710
  store %struct.color_ext_type* %60, %struct.color_ext_type** %ext, align 8, !dbg !6698
  br label %for.cond, !dbg !6699, !llvm.loop !6700

for.end:                                          ; preds = %if.then153, %for.cond
  br label %if.end155, !dbg !6702

if.end155:                                        ; preds = %for.end, %if.end132
  %61 = load i32, i32* %type, align 4, !dbg !6703
  %cmp156 = icmp eq i32 %61, 7, !dbg !6705
  br i1 %cmp156, label %land.lhs.true158, label %if.end167, !dbg !6706

land.lhs.true158:                                 ; preds = %if.end155
  %62 = load i32, i32* %linkok, align 4, !dbg !6707
  %tobool159 = icmp ne i32 %62, 0, !dbg !6707
  br i1 %tobool159, label %if.end167, label %if.then160, !dbg !6708

if.then160:                                       ; preds = %land.lhs.true158
  %63 = load i8, i8* @color_symlink_as_referent, align 1, !dbg !6709
  %tobool161 = trunc i8 %63 to i1, !dbg !6709
  br i1 %tobool161, label %if.then165, label %lor.lhs.false, !dbg !6712

lor.lhs.false:                                    ; preds = %if.then160
  %call163 = call zeroext i1 @is_colored(i32 13), !dbg !6713
  br i1 %call163, label %if.then165, label %if.end166, !dbg !6714

if.then165:                                       ; preds = %lor.lhs.false, %if.then160
  store i32 13, i32* %type, align 4, !dbg !6715
  br label %if.end166, !dbg !6716

if.end166:                                        ; preds = %if.then165, %lor.lhs.false
  br label %if.end167, !dbg !6717

if.end167:                                        ; preds = %if.end166, %land.lhs.true158, %if.end155
  call void @llvm.dbg.declare(metadata %struct.bin_str** %s, metadata !6718, metadata !DIExpression()), !dbg !6719
  %64 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6720
  %tobool168 = icmp ne %struct.color_ext_type* %64, null, !dbg !6720
  br i1 %tobool168, label %cond.true169, label %cond.false170, !dbg !6720

cond.true169:                                     ; preds = %if.end167
  %65 = load %struct.color_ext_type*, %struct.color_ext_type** %ext, align 8, !dbg !6721
  %seq = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %65, i32 0, i32 1, !dbg !6722, !ctir !711
  br label %cond.end173, !dbg !6720

cond.false170:                                    ; preds = %if.end167
  %66 = load i32, i32* %type, align 4, !dbg !6723
  %idxprom171 = zext i32 %66 to i64, !dbg !6724
  %arrayidx172 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %idxprom171, !dbg !6724, !ctir !281
  br label %cond.end173, !dbg !6720

cond.end173:                                      ; preds = %cond.false170, %cond.true169
  %cond174 = phi %struct.bin_str* [ %seq, %cond.true169 ], [ %arrayidx172, %cond.false170 ], !dbg !6720
  store %struct.bin_str* %cond174, %struct.bin_str** %s, align 8, !dbg !6719
  %67 = load %struct.bin_str*, %struct.bin_str** %s, align 8, !dbg !6725
  %string175 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %67, i32 0, i32 1, !dbg !6726, !ctir !811
  %68 = load i8*, i8** %string175, align 8, !dbg !6726, !ctir !146
  %tobool176 = icmp ne i8* %68, null, !dbg !6725
  br i1 %tobool176, label %cond.true177, label %cond.false178, !dbg !6725

cond.true177:                                     ; preds = %cond.end173
  %69 = load %struct.bin_str*, %struct.bin_str** %s, align 8, !dbg !6727
  br label %cond.end179, !dbg !6725

cond.false178:                                    ; preds = %cond.end173
  br label %cond.end179, !dbg !6725

cond.end179:                                      ; preds = %cond.false178, %cond.true177
  %cond180 = phi %struct.bin_str* [ %69, %cond.true177 ], [ null, %cond.false178 ], !dbg !6725
  ret %struct.bin_str* %cond180, !dbg !6728
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @calculate_columns(i1 zeroext %by_columns) #0 !dbg !6729 {
entry:
  %by_columns.addr = alloca i8, align 1
  %filesno = alloca i64, align 8, !ctir !149
  %cols = alloca i64, align 8, !ctir !149
  %max_cols = alloca i64, align 8, !ctir !149
  %f = alloca %struct.fileinfo*, align 8, !ctir !183
  %name_length = alloca i64, align 8, !ctir !149
  %i = alloca i64, align 8, !ctir !149
  %idx = alloca i64, align 8, !ctir !149
  %real_length = alloca i64, align 8, !ctir !149
  %frombool = zext i1 %by_columns to i8
  store i8 %frombool, i8* %by_columns.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %by_columns.addr, metadata !6732, metadata !DIExpression()), !dbg !6733
  call void @llvm.dbg.declare(metadata i64* %filesno, metadata !6734, metadata !DIExpression()), !dbg !6735
  call void @llvm.dbg.declare(metadata i64* %cols, metadata !6736, metadata !DIExpression()), !dbg !6737
  call void @llvm.dbg.declare(metadata i64* %max_cols, metadata !6738, metadata !DIExpression()), !dbg !6739
  %0 = load i64, i64* @max_idx, align 8, !dbg !6740
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !6740
  %cmp = icmp ult i64 %0, %1, !dbg !6740
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6740

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* @max_idx, align 8, !dbg !6740
  br label %cond.end, !dbg !6740

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* @cwd_n_used, align 8, !dbg !6740
  br label %cond.end, !dbg !6740

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !6740
  store i64 %cond, i64* %max_cols, align 8, !dbg !6739
  call void @init_column_info(), !dbg !6741
  store i64 0, i64* %filesno, align 8, !dbg !6742
  br label %for.cond, !dbg !6744

for.cond:                                         ; preds = %for.inc38, %cond.end
  %4 = load i64, i64* %filesno, align 8, !dbg !6745
  %5 = load i64, i64* @cwd_n_used, align 8, !dbg !6747
  %cmp1 = icmp ult i64 %4, %5, !dbg !6748
  br i1 %cmp1, label %for.body, label %for.end40, !dbg !6749

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f, metadata !6750, metadata !DIExpression()), !dbg !6752
  %6 = load i8**, i8*** @sorted_file, align 8, !dbg !6753
  %7 = load i64, i64* %filesno, align 8, !dbg !6754
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %7, !dbg !6753, !ctir !767
  %8 = load i8*, i8** %arrayidx, align 8, !dbg !6753
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !6753
  store %struct.fileinfo* %9, %struct.fileinfo** %f, align 8, !dbg !6752
  call void @llvm.dbg.declare(metadata i64* %name_length, metadata !6755, metadata !DIExpression()), !dbg !6756
  %10 = load %struct.fileinfo*, %struct.fileinfo** %f, align 8, !dbg !6757
  %call = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %10), !dbg !6758
  store i64 %call, i64* %name_length, align 8, !dbg !6756
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6759, metadata !DIExpression()), !dbg !6761
  store i64 0, i64* %i, align 8, !dbg !6761
  br label %for.cond2, !dbg !6762

for.cond2:                                        ; preds = %for.inc, %for.body
  %11 = load i64, i64* %i, align 8, !dbg !6763
  %12 = load i64, i64* %max_cols, align 8, !dbg !6765
  %cmp3 = icmp ult i64 %11, %12, !dbg !6766
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !6767

for.body4:                                        ; preds = %for.cond2
  %13 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6768
  %14 = load i64, i64* %i, align 8, !dbg !6771
  %arrayidx5 = getelementptr inbounds %struct.column_info, %struct.column_info* %13, i64 %14, !dbg !6768, !ctir !821
  %valid_len = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx5, i32 0, i32 0, !dbg !6772, !ctir !816
  %15 = load i8, i8* %valid_len, align 8, !dbg !6772
  %tobool = trunc i8 %15 to i1, !dbg !6772, !ctir !141
  br i1 %tobool, label %if.then, label %if.end37, !dbg !6773

if.then:                                          ; preds = %for.body4
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !6774, metadata !DIExpression()), !dbg !6776
  %16 = load i8, i8* %by_columns.addr, align 1, !dbg !6777
  %tobool6 = trunc i8 %16 to i1, !dbg !6777
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !6777

cond.true7:                                       ; preds = %if.then
  %17 = load i64, i64* %filesno, align 8, !dbg !6778
  %18 = load i64, i64* @cwd_n_used, align 8, !dbg !6779
  %19 = load i64, i64* %i, align 8, !dbg !6780
  %add = add i64 %18, %19, !dbg !6781
  %20 = load i64, i64* %i, align 8, !dbg !6782
  %add8 = add i64 %20, 1, !dbg !6783
  %div = udiv i64 %add, %add8, !dbg !6784
  %div9 = udiv i64 %17, %div, !dbg !6785
  br label %cond.end12, !dbg !6777

cond.false10:                                     ; preds = %if.then
  %21 = load i64, i64* %filesno, align 8, !dbg !6786
  %22 = load i64, i64* %i, align 8, !dbg !6787
  %add11 = add i64 %22, 1, !dbg !6788
  %rem = urem i64 %21, %add11, !dbg !6789
  br label %cond.end12, !dbg !6777

cond.end12:                                       ; preds = %cond.false10, %cond.true7
  %cond13 = phi i64 [ %div9, %cond.true7 ], [ %rem, %cond.false10 ], !dbg !6777
  store i64 %cond13, i64* %idx, align 8, !dbg !6776
  call void @llvm.dbg.declare(metadata i64* %real_length, metadata !6790, metadata !DIExpression()), !dbg !6791
  %23 = load i64, i64* %name_length, align 8, !dbg !6792
  %24 = load i64, i64* %idx, align 8, !dbg !6793
  %25 = load i64, i64* %i, align 8, !dbg !6794
  %cmp14 = icmp eq i64 %24, %25, !dbg !6795
  %26 = zext i1 %cmp14 to i64, !dbg !6793
  %cond15 = select i1 %cmp14, i32 0, i32 2, !dbg !6793
  %conv = sext i32 %cond15 to i64, !dbg !6796
  %add16 = add i64 %23, %conv, !dbg !6797
  store i64 %add16, i64* %real_length, align 8, !dbg !6791
  %27 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6798
  %28 = load i64, i64* %i, align 8, !dbg !6800
  %arrayidx17 = getelementptr inbounds %struct.column_info, %struct.column_info* %27, i64 %28, !dbg !6798, !ctir !821
  %col_arr = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx17, i32 0, i32 2, !dbg !6801, !ctir !816
  %29 = load i64*, i64** %col_arr, align 8, !dbg !6801, !ctir !148
  %30 = load i64, i64* %idx, align 8, !dbg !6802
  %arrayidx18 = getelementptr inbounds i64, i64* %29, i64 %30, !dbg !6798, !ctir !148
  %31 = load i64, i64* %arrayidx18, align 8, !dbg !6798
  %32 = load i64, i64* %real_length, align 8, !dbg !6803
  %cmp19 = icmp ult i64 %31, %32, !dbg !6804
  br i1 %cmp19, label %if.then21, label %if.end, !dbg !6805

if.then21:                                        ; preds = %cond.end12
  %33 = load i64, i64* %real_length, align 8, !dbg !6806
  %34 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6808
  %35 = load i64, i64* %i, align 8, !dbg !6809
  %arrayidx22 = getelementptr inbounds %struct.column_info, %struct.column_info* %34, i64 %35, !dbg !6808, !ctir !821
  %col_arr23 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx22, i32 0, i32 2, !dbg !6810, !ctir !816
  %36 = load i64*, i64** %col_arr23, align 8, !dbg !6810, !ctir !148
  %37 = load i64, i64* %idx, align 8, !dbg !6811
  %arrayidx24 = getelementptr inbounds i64, i64* %36, i64 %37, !dbg !6808, !ctir !148
  %38 = load i64, i64* %arrayidx24, align 8, !dbg !6808
  %sub = sub i64 %33, %38, !dbg !6812
  %39 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6813
  %40 = load i64, i64* %i, align 8, !dbg !6814
  %arrayidx25 = getelementptr inbounds %struct.column_info, %struct.column_info* %39, i64 %40, !dbg !6813, !ctir !821
  %line_len = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx25, i32 0, i32 1, !dbg !6815, !ctir !816
  %41 = load i64, i64* %line_len, align 8, !dbg !6816, !ctir !149
  %add26 = add i64 %41, %sub, !dbg !6816
  store i64 %add26, i64* %line_len, align 8, !dbg !6816, !ctir !149
  %42 = load i64, i64* %real_length, align 8, !dbg !6817
  %43 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6818
  %44 = load i64, i64* %i, align 8, !dbg !6819
  %arrayidx27 = getelementptr inbounds %struct.column_info, %struct.column_info* %43, i64 %44, !dbg !6818, !ctir !821
  %col_arr28 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx27, i32 0, i32 2, !dbg !6820, !ctir !816
  %45 = load i64*, i64** %col_arr28, align 8, !dbg !6820, !ctir !148
  %46 = load i64, i64* %idx, align 8, !dbg !6821
  %arrayidx29 = getelementptr inbounds i64, i64* %45, i64 %46, !dbg !6818, !ctir !148
  store i64 %42, i64* %arrayidx29, align 8, !dbg !6822
  %47 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6823
  %48 = load i64, i64* %i, align 8, !dbg !6824
  %arrayidx30 = getelementptr inbounds %struct.column_info, %struct.column_info* %47, i64 %48, !dbg !6823, !ctir !821
  %line_len31 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx30, i32 0, i32 1, !dbg !6825, !ctir !816
  %49 = load i64, i64* %line_len31, align 8, !dbg !6825, !ctir !149
  %50 = load i64, i64* @line_length, align 8, !dbg !6826
  %cmp32 = icmp ult i64 %49, %50, !dbg !6827
  %51 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6828
  %52 = load i64, i64* %i, align 8, !dbg !6829
  %arrayidx34 = getelementptr inbounds %struct.column_info, %struct.column_info* %51, i64 %52, !dbg !6828, !ctir !821
  %valid_len35 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx34, i32 0, i32 0, !dbg !6830, !ctir !816
  %frombool36 = zext i1 %cmp32 to i8, !dbg !6831
  store i8 %frombool36, i8* %valid_len35, align 8, !dbg !6831, !ctir !141
  br label %if.end, !dbg !6832

if.end:                                           ; preds = %if.then21, %cond.end12
  br label %if.end37, !dbg !6833

if.end37:                                         ; preds = %if.end, %for.body4
  br label %for.inc, !dbg !6834

for.inc:                                          ; preds = %if.end37
  %53 = load i64, i64* %i, align 8, !dbg !6835
  %inc = add i64 %53, 1, !dbg !6835
  store i64 %inc, i64* %i, align 8, !dbg !6835
  br label %for.cond2, !dbg !6836, !llvm.loop !6837

for.end:                                          ; preds = %for.cond2
  br label %for.inc38, !dbg !6839

for.inc38:                                        ; preds = %for.end
  %54 = load i64, i64* %filesno, align 8, !dbg !6840
  %inc39 = add i64 %54, 1, !dbg !6840
  store i64 %inc39, i64* %filesno, align 8, !dbg !6840
  br label %for.cond, !dbg !6841, !llvm.loop !6842

for.end40:                                        ; preds = %for.cond
  %55 = load i64, i64* %max_cols, align 8, !dbg !6844
  store i64 %55, i64* %cols, align 8, !dbg !6846
  br label %for.cond41, !dbg !6847

for.cond41:                                       ; preds = %for.inc51, %for.end40
  %56 = load i64, i64* %cols, align 8, !dbg !6848
  %cmp42 = icmp ult i64 1, %56, !dbg !6850
  br i1 %cmp42, label %for.body44, label %for.end52, !dbg !6851

for.body44:                                       ; preds = %for.cond41
  %57 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !6852
  %58 = load i64, i64* %cols, align 8, !dbg !6855
  %sub45 = sub i64 %58, 1, !dbg !6856
  %arrayidx46 = getelementptr inbounds %struct.column_info, %struct.column_info* %57, i64 %sub45, !dbg !6852, !ctir !821
  %valid_len47 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx46, i32 0, i32 0, !dbg !6857, !ctir !816
  %59 = load i8, i8* %valid_len47, align 8, !dbg !6857
  %tobool48 = trunc i8 %59 to i1, !dbg !6857, !ctir !141
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !6858

if.then49:                                        ; preds = %for.body44
  br label %for.end52, !dbg !6859

if.end50:                                         ; preds = %for.body44
  br label %for.inc51, !dbg !6860

for.inc51:                                        ; preds = %if.end50
  %60 = load i64, i64* %cols, align 8, !dbg !6861
  %dec = add i64 %60, -1, !dbg !6861
  store i64 %dec, i64* %cols, align 8, !dbg !6861
  br label %for.cond41, !dbg !6862, !llvm.loop !6863

for.end52:                                        ; preds = %if.then49, %for.cond41
  %61 = load i64, i64* %cols, align 8, !dbg !6865
  ret i64 %61, !dbg !6866
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @length_of_file_name_and_frills(%struct.fileinfo* %f) #0 !dbg !6867 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  %len = alloca i64, align 8, !ctir !149
  %buf = alloca [652 x i8], align 16, !ctir !746
  %c = alloca i8, align 1, !ctir !144
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6872, metadata !DIExpression()), !dbg !6873
  store i64 0, i64* %len, align 8, !dbg !6873
  call void @llvm.dbg.declare(metadata [652 x i8]* %buf, metadata !6874, metadata !DIExpression()), !dbg !6875
  %0 = load i8, i8* @print_inode, align 1, !dbg !6876
  %tobool = trunc i8 %0 to i1, !dbg !6876
  br i1 %tobool, label %if.then, label %if.end, !dbg !6878

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @format, align 4, !dbg !6879
  %cmp = icmp eq i32 %1, 4, !dbg !6880
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6879

cond.true:                                        ; preds = %if.then
  %2 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6881
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 3, !dbg !6882, !ctir !184
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 1, !dbg !6883, !ctir !191
  %3 = load i64, i64* %st_ino, align 8, !dbg !6883, !ctir !197
  %arraydecay = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !6884, !ctir !746
  %call = call i8* @umaxtostr(i64 %3, i8* %arraydecay), !dbg !6885
  %call1 = call i64 @strlen(i8* %call) #16, !dbg !6886
  br label %cond.end, !dbg !6879

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* @inode_number_width, align 4, !dbg !6887
  %conv = sext i32 %4 to i64, !dbg !6887
  br label %cond.end, !dbg !6879

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %conv, %cond.false ], !dbg !6879
  %add = add i64 1, %cond, !dbg !6888
  %5 = load i64, i64* %len, align 8, !dbg !6889
  %add2 = add i64 %5, %add, !dbg !6889
  store i64 %add2, i64* %len, align 8, !dbg !6889
  br label %if.end, !dbg !6890

if.end:                                           ; preds = %cond.end, %entry
  %6 = load i8, i8* @print_block_size, align 1, !dbg !6891
  %tobool3 = trunc i8 %6 to i1, !dbg !6891
  br i1 %tobool3, label %if.then4, label %if.end23, !dbg !6893

if.then4:                                         ; preds = %if.end
  %7 = load i32, i32* @format, align 4, !dbg !6894
  %cmp5 = icmp eq i32 %7, 4, !dbg !6895
  br i1 %cmp5, label %cond.true7, label %cond.false17, !dbg !6894

cond.true7:                                       ; preds = %if.then4
  %8 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6896
  %stat_ok = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 7, !dbg !6897, !ctir !184
  %9 = load i8, i8* %stat_ok, align 8, !dbg !6897
  %tobool8 = trunc i8 %9 to i1, !dbg !6897, !ctir !141
  br i1 %tobool8, label %cond.false10, label %cond.true9, !dbg !6898

cond.true9:                                       ; preds = %cond.true7
  br label %cond.end14, !dbg !6898

cond.false10:                                     ; preds = %cond.true7
  %10 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6899
  %stat11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3, !dbg !6899, !ctir !184
  %st_blocks = getelementptr inbounds %struct.stat, %struct.stat* %stat11, i32 0, i32 10, !dbg !6899, !ctir !191
  %11 = load i64, i64* %st_blocks, align 8, !dbg !6899, !ctir !212
  %arraydecay12 = getelementptr inbounds [652 x i8], [652 x i8]* %buf, i64 0, i64 0, !dbg !6900, !ctir !746
  %12 = load i32, i32* @human_output_opts, align 4, !dbg !6901
  %13 = load i64, i64* @output_block_size, align 8, !dbg !6902
  %call13 = call i8* @human_readable(i64 %11, i8* %arraydecay12, i32 %12, i64 512, i64 %13), !dbg !6903
  br label %cond.end14, !dbg !6898

cond.end14:                                       ; preds = %cond.false10, %cond.true9
  %cond15 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %cond.true9 ], [ %call13, %cond.false10 ], !dbg !6898
  %call16 = call i64 @strlen(i8* %cond15) #16, !dbg !6904
  br label %cond.end19, !dbg !6894

cond.false17:                                     ; preds = %if.then4
  %14 = load i32, i32* @block_size_width, align 4, !dbg !6905
  %conv18 = sext i32 %14 to i64, !dbg !6905
  br label %cond.end19, !dbg !6894

cond.end19:                                       ; preds = %cond.false17, %cond.end14
  %cond20 = phi i64 [ %call16, %cond.end14 ], [ %conv18, %cond.false17 ], !dbg !6894
  %add21 = add i64 1, %cond20, !dbg !6906
  %15 = load i64, i64* %len, align 8, !dbg !6907
  %add22 = add i64 %15, %add21, !dbg !6907
  store i64 %add22, i64* %len, align 8, !dbg !6907
  br label %if.end23, !dbg !6908

if.end23:                                         ; preds = %cond.end19, %if.end
  %16 = load i8, i8* @print_scontext, align 1, !dbg !6909
  %tobool24 = trunc i8 %16 to i1, !dbg !6909
  br i1 %tobool24, label %if.then25, label %if.end36, !dbg !6911

if.then25:                                        ; preds = %if.end23
  %17 = load i32, i32* @format, align 4, !dbg !6912
  %cmp26 = icmp eq i32 %17, 4, !dbg !6913
  br i1 %cmp26, label %cond.true28, label %cond.false30, !dbg !6912

cond.true28:                                      ; preds = %if.then25
  %18 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6914
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 6, !dbg !6915, !ctir !184
  %19 = load i8*, i8** %scontext, align 8, !dbg !6915, !ctir !143
  %call29 = call i64 @strlen(i8* %19) #16, !dbg !6916
  br label %cond.end32, !dbg !6912

cond.false30:                                     ; preds = %if.then25
  %20 = load i32, i32* @scontext_width, align 4, !dbg !6917
  %conv31 = sext i32 %20 to i64, !dbg !6917
  br label %cond.end32, !dbg !6912

cond.end32:                                       ; preds = %cond.false30, %cond.true28
  %cond33 = phi i64 [ %call29, %cond.true28 ], [ %conv31, %cond.false30 ], !dbg !6912
  %add34 = add i64 1, %cond33, !dbg !6918
  %21 = load i64, i64* %len, align 8, !dbg !6919
  %add35 = add i64 %21, %add34, !dbg !6919
  store i64 %add35, i64* %len, align 8, !dbg !6919
  br label %if.end36, !dbg !6920

if.end36:                                         ; preds = %cond.end32, %if.end23
  %22 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6921
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %22, i32 0, i32 0, !dbg !6922, !ctir !184
  %23 = load i8*, i8** %name, align 8, !dbg !6922, !ctir !143
  %24 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !6923
  %25 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6924
  %quoted = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %25, i32 0, i32 11, !dbg !6925, !ctir !184
  %26 = load i32, i32* %quoted, align 4, !dbg !6925, !ctir !27
  %call37 = call i64 @quote_name_width(i8* %23, %struct.quoting_options* %24, i32 %26), !dbg !6926
  %27 = load i64, i64* %len, align 8, !dbg !6927
  %add38 = add i64 %27, %call37, !dbg !6927
  store i64 %add38, i64* %len, align 8, !dbg !6927
  %28 = load i32, i32* @indicator_style, align 4, !dbg !6928
  %cmp39 = icmp ne i32 %28, 0, !dbg !6930
  br i1 %cmp39, label %if.then41, label %if.end51, !dbg !6931

if.then41:                                        ; preds = %if.end36
  call void @llvm.dbg.declare(metadata i8* %c, metadata !6932, metadata !DIExpression()), !dbg !6934
  %29 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6935
  %stat_ok42 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %29, i32 0, i32 7, !dbg !6936, !ctir !184
  %30 = load i8, i8* %stat_ok42, align 8, !dbg !6936
  %tobool43 = trunc i8 %30 to i1, !dbg !6936, !ctir !141
  %31 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6937
  %stat44 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %31, i32 0, i32 3, !dbg !6938, !ctir !184
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %stat44, i32 0, i32 3, !dbg !6939, !ctir !191
  %32 = load i32, i32* %st_mode, align 8, !dbg !6939, !ctir !201
  %33 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !6940
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %33, i32 0, i32 4, !dbg !6941, !ctir !184
  %34 = load i32, i32* %filetype, align 8, !dbg !6941, !ctir !36
  %call45 = call signext i8 @get_type_indicator(i1 zeroext %tobool43, i32 %32, i32 %34), !dbg !6942
  store i8 %call45, i8* %c, align 1, !dbg !6934
  %35 = load i8, i8* %c, align 1, !dbg !6943
  %conv46 = sext i8 %35 to i32, !dbg !6943
  %cmp47 = icmp ne i32 %conv46, 0, !dbg !6944
  %conv48 = zext i1 %cmp47 to i32, !dbg !6944
  %conv49 = sext i32 %conv48 to i64, !dbg !6945
  %36 = load i64, i64* %len, align 8, !dbg !6946
  %add50 = add i64 %36, %conv49, !dbg !6946
  store i64 %add50, i64* %len, align 8, !dbg !6946
  br label %if.end51, !dbg !6947

if.end51:                                         ; preds = %if.then41, %if.end36
  %37 = load i64, i64* %len, align 8, !dbg !6948
  ret i64 %37, !dbg !6949
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @indent(i64 %from, i64 %to) #0 !dbg !6950 {
entry:
  %from.addr = alloca i64, align 8
  %to.addr = alloca i64, align 8
  store i64 %from, i64* %from.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %from.addr, metadata !6953, metadata !DIExpression()), !dbg !6954
  store i64 %to, i64* %to.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to.addr, metadata !6955, metadata !DIExpression()), !dbg !6956
  br label %while.cond, !dbg !6957

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i64, i64* %from.addr, align 8, !dbg !6958
  %1 = load i64, i64* %to.addr, align 8, !dbg !6959
  %cmp = icmp ult i64 %0, %1, !dbg !6960
  br i1 %cmp, label %while.body, label %while.end, !dbg !6957

while.body:                                       ; preds = %while.cond
  %2 = load i64, i64* @tabsize, align 8, !dbg !6961
  %cmp1 = icmp ne i64 %2, 0, !dbg !6964
  br i1 %cmp1, label %land.lhs.true, label %if.else, !dbg !6965

land.lhs.true:                                    ; preds = %while.body
  %3 = load i64, i64* %to.addr, align 8, !dbg !6966
  %4 = load i64, i64* @tabsize, align 8, !dbg !6967
  %div = udiv i64 %3, %4, !dbg !6968
  %5 = load i64, i64* %from.addr, align 8, !dbg !6969
  %add = add i64 %5, 1, !dbg !6970
  %6 = load i64, i64* @tabsize, align 8, !dbg !6971
  %div2 = udiv i64 %add, %6, !dbg !6972
  %cmp3 = icmp ugt i64 %div, %div2, !dbg !6973
  br i1 %cmp3, label %if.then, label %if.else, !dbg !6974

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 @putchar_unlocked(i32 9), !dbg !6975
  %7 = load i64, i64* @tabsize, align 8, !dbg !6977
  %8 = load i64, i64* %from.addr, align 8, !dbg !6978
  %9 = load i64, i64* @tabsize, align 8, !dbg !6979
  %rem = urem i64 %8, %9, !dbg !6980
  %sub = sub i64 %7, %rem, !dbg !6981
  %10 = load i64, i64* %from.addr, align 8, !dbg !6982
  %add4 = add i64 %10, %sub, !dbg !6982
  store i64 %add4, i64* %from.addr, align 8, !dbg !6982
  br label %if.end, !dbg !6983

if.else:                                          ; preds = %land.lhs.true, %while.body
  %call5 = call i32 @putchar_unlocked(i32 32), !dbg !6984
  %11 = load i64, i64* %from.addr, align 8, !dbg !6986
  %inc = add i64 %11, 1, !dbg !6986
  store i64 %inc, i64* %from.addr, align 8, !dbg !6986
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !dbg !6957, !llvm.loop !6987

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6989
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name_width(i8* %name, %struct.quoting_options* %options, i32 %needs_general_quoting) #0 !dbg !6990 {
entry:
  %name.addr = alloca i8*, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %needs_general_quoting.addr = alloca i32, align 4
  %smallbuf = alloca [8192 x i8], align 16, !ctir !749
  %buf = alloca i8*, align 8, !ctir !143
  %width = alloca i64, align 8, !ctir !149
  %pad = alloca i8, align 1, !ctir !141
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6993, metadata !DIExpression()), !dbg !6994
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %options.addr, metadata !6995, metadata !DIExpression()), !dbg !6996
  store i32 %needs_general_quoting, i32* %needs_general_quoting.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %needs_general_quoting.addr, metadata !6997, metadata !DIExpression()), !dbg !6998
  call void @llvm.dbg.declare(metadata [8192 x i8]* %smallbuf, metadata !6999, metadata !DIExpression()), !dbg !7000
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !7001, metadata !DIExpression()), !dbg !7002
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %smallbuf, i64 0, i64 0, !dbg !7003, !ctir !749
  store i8* %arraydecay, i8** %buf, align 8, !dbg !7002
  call void @llvm.dbg.declare(metadata i64* %width, metadata !7004, metadata !DIExpression()), !dbg !7005
  call void @llvm.dbg.declare(metadata i8* %pad, metadata !7006, metadata !DIExpression()), !dbg !7007
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7008
  %1 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !7009
  %2 = load i32, i32* %needs_general_quoting.addr, align 4, !dbg !7010
  %call = call i64 @quote_name_buf(i8** %buf, i64 8192, i8* %0, %struct.quoting_options* %1, i32 %2, i64* %width, i8* %pad), !dbg !7011
  %3 = load i8*, i8** %buf, align 8, !dbg !7012
  %arraydecay1 = getelementptr inbounds [8192 x i8], [8192 x i8]* %smallbuf, i64 0, i64 0, !dbg !7014, !ctir !749
  %cmp = icmp ne i8* %3, %arraydecay1, !dbg !7015
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7016

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %buf, align 8, !dbg !7017
  %5 = load i8*, i8** %name.addr, align 8, !dbg !7018
  %cmp2 = icmp ne i8* %4, %5, !dbg !7019
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7020

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %buf, align 8, !dbg !7021
  call void @free(i8* %6) #13, !dbg !7022
  br label %if.end, !dbg !7022

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i8, i8* %pad, align 1, !dbg !7023
  %tobool = trunc i8 %7 to i1, !dbg !7023
  %conv = zext i1 %tobool to i64, !dbg !7023
  %8 = load i64, i64* %width, align 8, !dbg !7024
  %add = add i64 %8, %conv, !dbg !7024
  store i64 %add, i64* %width, align 8, !dbg !7024
  %9 = load i64, i64* %width, align 8, !dbg !7025
  ret i64 %9, !dbg !7026
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_column_info() #0 !dbg !1078 {
entry:
  %i = alloca i64, align 8, !ctir !149
  %max_cols = alloca i64, align 8, !ctir !149
  %new_column_info_alloc = alloca i64, align 8, !ctir !149
  %p = alloca i64*, align 8, !ctir !148
  %column_info_growth = alloca i64, align 8, !ctir !149
  %s = alloca i64, align 8, !ctir !149
  %t = alloca i64, align 8, !ctir !149
  %j = alloca i64, align 8, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7027, metadata !DIExpression()), !dbg !7028
  call void @llvm.dbg.declare(metadata i64* %max_cols, metadata !7029, metadata !DIExpression()), !dbg !7030
  %0 = load i64, i64* @max_idx, align 8, !dbg !7031
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !7031
  %cmp = icmp ult i64 %0, %1, !dbg !7031
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7031

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* @max_idx, align 8, !dbg !7031
  br label %cond.end, !dbg !7031

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* @cwd_n_used, align 8, !dbg !7031
  br label %cond.end, !dbg !7031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !7031
  store i64 %cond, i64* %max_cols, align 8, !dbg !7030
  %4 = load i64, i64* @init_column_info.column_info_alloc, align 8, !dbg !7032
  %5 = load i64, i64* %max_cols, align 8, !dbg !7034
  %cmp1 = icmp ult i64 %4, %5, !dbg !7035
  br i1 %cmp1, label %if.then, label %if.end16, !dbg !7036

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %new_column_info_alloc, metadata !7037, metadata !DIExpression()), !dbg !7039
  call void @llvm.dbg.declare(metadata i64** %p, metadata !7040, metadata !DIExpression()), !dbg !7041
  %6 = load i64, i64* %max_cols, align 8, !dbg !7042
  %7 = load i64, i64* @max_idx, align 8, !dbg !7044
  %div = udiv i64 %7, 2, !dbg !7045
  %cmp2 = icmp ult i64 %6, %div, !dbg !7046
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7047

if.then3:                                         ; preds = %if.then
  %8 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7048
  %9 = bitcast %struct.column_info* %8 to i8*, !dbg !7048
  %10 = load i64, i64* %max_cols, align 8, !dbg !7050
  %call = call i8* @xnrealloc(i8* %9, i64 %10, i64 48), !dbg !7051
  %11 = bitcast i8* %call to %struct.column_info*, !dbg !7051
  store %struct.column_info* %11, %struct.column_info** @column_info, align 8, !dbg !7052
  %12 = load i64, i64* %max_cols, align 8, !dbg !7053
  %mul = mul i64 2, %12, !dbg !7054
  store i64 %mul, i64* %new_column_info_alloc, align 8, !dbg !7055
  br label %if.end, !dbg !7056

if.else:                                          ; preds = %if.then
  %13 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7057
  %14 = bitcast %struct.column_info* %13 to i8*, !dbg !7057
  %15 = load i64, i64* @max_idx, align 8, !dbg !7059
  %call4 = call i8* @xnrealloc(i8* %14, i64 %15, i64 24), !dbg !7060
  %16 = bitcast i8* %call4 to %struct.column_info*, !dbg !7060
  store %struct.column_info* %16, %struct.column_info** @column_info, align 8, !dbg !7061
  %17 = load i64, i64* @max_idx, align 8, !dbg !7062
  store i64 %17, i64* %new_column_info_alloc, align 8, !dbg !7063
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  call void @llvm.dbg.declare(metadata i64* %column_info_growth, metadata !7064, metadata !DIExpression()), !dbg !7066
  %18 = load i64, i64* %new_column_info_alloc, align 8, !dbg !7067
  %19 = load i64, i64* @init_column_info.column_info_alloc, align 8, !dbg !7068
  %sub = sub i64 %18, %19, !dbg !7069
  store i64 %sub, i64* %column_info_growth, align 8, !dbg !7066
  call void @llvm.dbg.declare(metadata i64* %s, metadata !7070, metadata !DIExpression()), !dbg !7071
  %20 = load i64, i64* @init_column_info.column_info_alloc, align 8, !dbg !7072
  %add = add i64 %20, 1, !dbg !7073
  %21 = load i64, i64* %new_column_info_alloc, align 8, !dbg !7074
  %add5 = add i64 %add, %21, !dbg !7075
  store i64 %add5, i64* %s, align 8, !dbg !7071
  call void @llvm.dbg.declare(metadata i64* %t, metadata !7076, metadata !DIExpression()), !dbg !7077
  %22 = load i64, i64* %s, align 8, !dbg !7078
  %23 = load i64, i64* %column_info_growth, align 8, !dbg !7079
  %mul6 = mul i64 %22, %23, !dbg !7080
  store i64 %mul6, i64* %t, align 8, !dbg !7077
  %24 = load i64, i64* %s, align 8, !dbg !7081
  %25 = load i64, i64* %new_column_info_alloc, align 8, !dbg !7083
  %cmp7 = icmp ult i64 %24, %25, !dbg !7084
  br i1 %cmp7, label %if.then10, label %lor.lhs.false, !dbg !7085

lor.lhs.false:                                    ; preds = %if.end
  %26 = load i64, i64* %t, align 8, !dbg !7086
  %27 = load i64, i64* %column_info_growth, align 8, !dbg !7087
  %div8 = udiv i64 %26, %27, !dbg !7088
  %28 = load i64, i64* %s, align 8, !dbg !7089
  %cmp9 = icmp ne i64 %div8, %28, !dbg !7090
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !7091

if.then10:                                        ; preds = %lor.lhs.false, %if.end
  call void @xalloc_die() #14, !dbg !7092
  unreachable, !dbg !7092

if.end11:                                         ; preds = %lor.lhs.false
  %29 = load i64, i64* %t, align 8, !dbg !7093
  %div12 = udiv i64 %29, 2, !dbg !7094
  %call13 = call noalias i8* @xnmalloc(i64 %div12, i64 8), !dbg !7095
  %30 = bitcast i8* %call13 to i64*, !dbg !7095
  store i64* %30, i64** %p, align 8, !dbg !7096
  %31 = load i64, i64* @init_column_info.column_info_alloc, align 8, !dbg !7097
  store i64 %31, i64* %i, align 8, !dbg !7099
  br label %for.cond, !dbg !7100

for.cond:                                         ; preds = %for.inc, %if.end11
  %32 = load i64, i64* %i, align 8, !dbg !7101
  %33 = load i64, i64* %new_column_info_alloc, align 8, !dbg !7103
  %cmp14 = icmp ult i64 %32, %33, !dbg !7104
  br i1 %cmp14, label %for.body, label %for.end, !dbg !7105

for.body:                                         ; preds = %for.cond
  %34 = load i64*, i64** %p, align 8, !dbg !7106
  %35 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7108
  %36 = load i64, i64* %i, align 8, !dbg !7109
  %arrayidx = getelementptr inbounds %struct.column_info, %struct.column_info* %35, i64 %36, !dbg !7108, !ctir !821
  %col_arr = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx, i32 0, i32 2, !dbg !7110, !ctir !816
  store i64* %34, i64** %col_arr, align 8, !dbg !7111, !ctir !148
  %37 = load i64, i64* %i, align 8, !dbg !7112
  %add15 = add i64 %37, 1, !dbg !7113
  %38 = load i64*, i64** %p, align 8, !dbg !7114
  %add.ptr = getelementptr inbounds i64, i64* %38, i64 %add15, !dbg !7114, !ctir !149
  store i64* %add.ptr, i64** %p, align 8, !dbg !7114
  br label %for.inc, !dbg !7115

for.inc:                                          ; preds = %for.body
  %39 = load i64, i64* %i, align 8, !dbg !7116
  %inc = add i64 %39, 1, !dbg !7116
  store i64 %inc, i64* %i, align 8, !dbg !7116
  br label %for.cond, !dbg !7117, !llvm.loop !7118

for.end:                                          ; preds = %for.cond
  %40 = load i64, i64* %new_column_info_alloc, align 8, !dbg !7120
  store i64 %40, i64* @init_column_info.column_info_alloc, align 8, !dbg !7121
  br label %if.end16, !dbg !7122

if.end16:                                         ; preds = %for.end, %cond.end
  store i64 0, i64* %i, align 8, !dbg !7123
  br label %for.cond17, !dbg !7125

for.cond17:                                       ; preds = %for.inc33, %if.end16
  %41 = load i64, i64* %i, align 8, !dbg !7126
  %42 = load i64, i64* %max_cols, align 8, !dbg !7128
  %cmp18 = icmp ult i64 %41, %42, !dbg !7129
  br i1 %cmp18, label %for.body19, label %for.end35, !dbg !7130

for.body19:                                       ; preds = %for.cond17
  call void @llvm.dbg.declare(metadata i64* %j, metadata !7131, metadata !DIExpression()), !dbg !7133
  %43 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7134
  %44 = load i64, i64* %i, align 8, !dbg !7135
  %arrayidx20 = getelementptr inbounds %struct.column_info, %struct.column_info* %43, i64 %44, !dbg !7134, !ctir !821
  %valid_len = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx20, i32 0, i32 0, !dbg !7136, !ctir !816
  store i8 1, i8* %valid_len, align 8, !dbg !7137, !ctir !141
  %45 = load i64, i64* %i, align 8, !dbg !7138
  %add21 = add i64 %45, 1, !dbg !7139
  %mul22 = mul i64 %add21, 3, !dbg !7140
  %46 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7141
  %47 = load i64, i64* %i, align 8, !dbg !7142
  %arrayidx23 = getelementptr inbounds %struct.column_info, %struct.column_info* %46, i64 %47, !dbg !7141, !ctir !821
  %line_len = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx23, i32 0, i32 1, !dbg !7143, !ctir !816
  store i64 %mul22, i64* %line_len, align 8, !dbg !7144, !ctir !149
  store i64 0, i64* %j, align 8, !dbg !7145
  br label %for.cond24, !dbg !7147

for.cond24:                                       ; preds = %for.inc30, %for.body19
  %48 = load i64, i64* %j, align 8, !dbg !7148
  %49 = load i64, i64* %i, align 8, !dbg !7150
  %cmp25 = icmp ule i64 %48, %49, !dbg !7151
  br i1 %cmp25, label %for.body26, label %for.end32, !dbg !7152

for.body26:                                       ; preds = %for.cond24
  %50 = load %struct.column_info*, %struct.column_info** @column_info, align 8, !dbg !7153
  %51 = load i64, i64* %i, align 8, !dbg !7154
  %arrayidx27 = getelementptr inbounds %struct.column_info, %struct.column_info* %50, i64 %51, !dbg !7153, !ctir !821
  %col_arr28 = getelementptr inbounds %struct.column_info, %struct.column_info* %arrayidx27, i32 0, i32 2, !dbg !7155, !ctir !816
  %52 = load i64*, i64** %col_arr28, align 8, !dbg !7155, !ctir !148
  %53 = load i64, i64* %j, align 8, !dbg !7156
  %arrayidx29 = getelementptr inbounds i64, i64* %52, i64 %53, !dbg !7153, !ctir !148
  store i64 3, i64* %arrayidx29, align 8, !dbg !7157
  br label %for.inc30, !dbg !7153

for.inc30:                                        ; preds = %for.body26
  %54 = load i64, i64* %j, align 8, !dbg !7158
  %inc31 = add i64 %54, 1, !dbg !7158
  store i64 %inc31, i64* %j, align 8, !dbg !7158
  br label %for.cond24, !dbg !7159, !llvm.loop !7160

for.end32:                                        ; preds = %for.cond24
  br label %for.inc33, !dbg !7162

for.inc33:                                        ; preds = %for.end32
  %55 = load i64, i64* %i, align 8, !dbg !7163
  %inc34 = add i64 %55, 1, !dbg !7163
  store i64 %inc34, i64* %i, align 8, !dbg !7163
  br label %for.cond17, !dbg !7164, !llvm.loop !7165

for.end35:                                        ; preds = %for.cond17
  ret void, !dbg !7167
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_directory(%struct.fileinfo* %f) #0 !dbg !7168 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7173
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 4, !dbg !7174, !ctir !184
  %1 = load i32, i32* %filetype, align 8, !dbg !7174, !ctir !36
  %cmp = icmp eq i32 %1, 3, !dbg !7175
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7176

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7177
  %filetype1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 4, !dbg !7178, !ctir !184
  %3 = load i32, i32* %filetype1, align 8, !dbg !7178, !ctir !36
  %cmp2 = icmp eq i32 %3, 9, !dbg !7179
  br label %lor.end, !dbg !7176

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  ret i1 %4, !dbg !7180
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @basename_is_dot_or_dotdot(i8* %name) #0 !dbg !7181 {
entry:
  %name.addr = alloca i8*, align 8
  %base = alloca i8*, align 8, !ctir !146
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  call void @llvm.dbg.declare(metadata i8** %base, metadata !7184, metadata !DIExpression()), !dbg !7185
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7186
  %call = call i8* @last_component(i8* %0) #16, !dbg !7187
  store i8* %call, i8** %base, align 8, !dbg !7185
  %1 = load i8*, i8** %base, align 8, !dbg !7188
  %call1 = call zeroext i1 @dot_or_dotdot(i8* %1), !dbg !7189
  ret i1 %call1, !dbg !7190
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_ent(%struct.fileinfo* %f) #0 !dbg !7191 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !7194, metadata !DIExpression()), !dbg !7195
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7196
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 0, !dbg !7197, !ctir !185
  %1 = load i8*, i8** %name, align 8, !dbg !7197, !ctir !143
  call void @free(i8* %1) #13, !dbg !7198
  %2 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7199
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 1, !dbg !7200, !ctir !185
  %3 = load i8*, i8** %linkname, align 8, !dbg !7200, !ctir !143
  call void @free(i8* %3) #13, !dbg !7201
  %4 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7202
  %absolute_name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 2, !dbg !7203, !ctir !185
  %5 = load i8*, i8** %absolute_name, align 8, !dbg !7203, !ctir !143
  call void @free(i8* %5) #13, !dbg !7204
  %6 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7205
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 6, !dbg !7207, !ctir !185
  %7 = load i8*, i8** %scontext, align 8, !dbg !7207, !ctir !143
  %cmp = icmp ne i8* %7, getelementptr inbounds ([2 x i8], [2 x i8]* @UNKNOWN_SECURITY_CONTEXT, i64 0, i64 0), !dbg !7208
  br i1 %cmp, label %if.then, label %if.end4, !dbg !7209

if.then:                                          ; preds = %entry
  %call = call zeroext i1 @is_smack_enabled(), !dbg !7210
  br i1 %call, label %if.then1, label %if.else, !dbg !7213

if.then1:                                         ; preds = %if.then
  %8 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7214
  %scontext2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 6, !dbg !7215, !ctir !185
  %9 = load i8*, i8** %scontext2, align 8, !dbg !7215, !ctir !143
  call void @free(i8* %9) #13, !dbg !7216
  br label %if.end, !dbg !7216

if.else:                                          ; preds = %if.then
  %10 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7217
  %scontext3 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 6, !dbg !7218, !ctir !185
  %11 = load i8*, i8** %scontext3, align 8, !dbg !7218, !ctir !143
  call void @freecon(i8* %11), !dbg !7219
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end4, !dbg !7220

if.end4:                                          ; preds = %if.end, %entry
  ret void, !dbg !7221
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_smack_enabled() #0 !dbg !7222 {
entry:
  ret i1 false, !dbg !7226
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8* %file_name) #0 !dbg !7227 {
entry:
  %retval = alloca i1, align 1
  %file_name.addr = alloca i8*, align 8
  %sep = alloca i8, align 1, !ctir !144
  store i8* %file_name, i8** %file_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file_name.addr, metadata !7228, metadata !DIExpression()), !dbg !7229
  %0 = load i8*, i8** %file_name.addr, align 8, !dbg !7230
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !7230, !ctir !146
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7230
  %conv = sext i8 %1 to i32, !dbg !7230
  %cmp = icmp eq i32 %conv, 46, !dbg !7232
  br i1 %cmp, label %if.then, label %if.else, !dbg !7233

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %sep, metadata !7234, metadata !DIExpression()), !dbg !7236
  %2 = load i8*, i8** %file_name.addr, align 8, !dbg !7237
  %3 = load i8*, i8** %file_name.addr, align 8, !dbg !7238
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 1, !dbg !7238, !ctir !146
  %4 = load i8, i8* %arrayidx2, align 1, !dbg !7238
  %conv3 = sext i8 %4 to i32, !dbg !7238
  %cmp4 = icmp eq i32 %conv3, 46, !dbg !7239
  %conv5 = zext i1 %cmp4 to i32, !dbg !7239
  %add = add nsw i32 %conv5, 1, !dbg !7240
  %idxprom = sext i32 %add to i64, !dbg !7237
  %arrayidx6 = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !7237, !ctir !146
  %5 = load i8, i8* %arrayidx6, align 1, !dbg !7237
  store i8 %5, i8* %sep, align 1, !dbg !7236
  %6 = load i8, i8* %sep, align 1, !dbg !7241
  %tobool = icmp ne i8 %6, 0, !dbg !7241
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !7242

lor.rhs:                                          ; preds = %if.then
  %7 = load i8, i8* %sep, align 1, !dbg !7243
  %conv7 = sext i8 %7 to i32, !dbg !7243
  %cmp8 = icmp eq i32 %conv7, 47, !dbg !7243
  br label %lor.end, !dbg !7242

lor.end:                                          ; preds = %lor.rhs, %if.then
  %8 = phi i1 [ true, %if.then ], [ %cmp8, %lor.rhs ]
  store i1 %8, i1* %retval, align 1, !dbg !7244
  br label %return, !dbg !7244

if.else:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !7245
  br label %return, !dbg !7245

return:                                           ; preds = %if.else, %lor.end
  %9 = load i1, i1* %retval, align 1, !dbg !7246
  ret i1 %9, !dbg !7246
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initialize_ordering_vector() #0 !dbg !7247 {
entry:
  %i = alloca i64, align 8, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7248, metadata !DIExpression()), !dbg !7250
  store i64 0, i64* %i, align 8, !dbg !7250
  br label %for.cond, !dbg !7251

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !7252
  %1 = load i64, i64* @cwd_n_used, align 8, !dbg !7254
  %cmp = icmp ult i64 %0, %1, !dbg !7255
  br i1 %cmp, label %for.body, label %for.end, !dbg !7256

for.body:                                         ; preds = %for.cond
  %2 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8, !dbg !7257
  %3 = load i64, i64* %i, align 8, !dbg !7258
  %arrayidx = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i64 %3, !dbg !7257, !ctir !260
  %4 = bitcast %struct.fileinfo* %arrayidx to i8*, !dbg !7259
  %5 = load i8**, i8*** @sorted_file, align 8, !dbg !7260
  %6 = load i64, i64* %i, align 8, !dbg !7261
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i64 %6, !dbg !7260, !ctir !767
  store i8* %4, i8** %arrayidx1, align 8, !dbg !7262
  br label %for.inc, !dbg !7260

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !7263
  %inc = add i64 %7, 1, !dbg !7263
  store i64 %inc, i64* %i, align 8, !dbg !7263
  br label %for.cond, !dbg !7264, !llvm.loop !7265

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7267
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @_setjmp(%struct.__jmp_buf_tag*) #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_name(i8* %a, i8* %b) #0 !dbg !7268 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7269, metadata !DIExpression()), !dbg !7270
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7271, metadata !DIExpression()), !dbg !7270
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7270
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7270
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7270
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7270
  %call = call i32 @cmp_name(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7270
  ret i32 %call, !dbg !7270
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_name(i8* %a, i8* %b) #0 !dbg !7272 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7273, metadata !DIExpression()), !dbg !7274
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7275, metadata !DIExpression()), !dbg !7274
  br label %do.body, !dbg !7274

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7276, metadata !DIExpression()), !dbg !7278
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7278
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7278
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7278
  %frombool = zext i1 %call to i8, !dbg !7278
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7278
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7279, metadata !DIExpression()), !dbg !7278
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7278
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7278
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7278
  %frombool2 = zext i1 %call1 to i8, !dbg !7278
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7278
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7280
  %tobool = trunc i8 %4 to i1, !dbg !7280
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7280

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7280
  %tobool3 = trunc i8 %5 to i1, !dbg !7280
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7278

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7280
  br label %return, !dbg !7280

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7282
  %tobool4 = trunc i8 %6 to i1, !dbg !7282
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7282

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7282
  %tobool6 = trunc i8 %7 to i1, !dbg !7282
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7278

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7282
  br label %return, !dbg !7282

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7278

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7274
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7274
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7274
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7274
  %call9 = call i32 @cmp_name(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7274
  store i32 %call9, i32* %retval, align 4, !dbg !7274
  br label %return, !dbg !7274

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7274
  ret i32 %12, !dbg !7274
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_name(i8* %a, i8* %b) #0 !dbg !7284 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7285, metadata !DIExpression()), !dbg !7286
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7287, metadata !DIExpression()), !dbg !7286
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7286
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7286
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7286
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7286
  %call = call i32 @cmp_name(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7286
  ret i32 %call, !dbg !7286
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_name(i8* %a, i8* %b) #0 !dbg !7288 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7291, metadata !DIExpression()), !dbg !7290
  br label %do.body, !dbg !7290

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7292, metadata !DIExpression()), !dbg !7294
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7294
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7294
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7294
  %frombool = zext i1 %call to i8, !dbg !7294
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7294
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7295, metadata !DIExpression()), !dbg !7294
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7294
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7294
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7294
  %frombool2 = zext i1 %call1 to i8, !dbg !7294
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7294
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7296
  %tobool = trunc i8 %4 to i1, !dbg !7296
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7296

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7296
  %tobool3 = trunc i8 %5 to i1, !dbg !7296
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7294

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7296
  br label %return, !dbg !7296

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7298
  %tobool4 = trunc i8 %6 to i1, !dbg !7298
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7298

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7298
  %tobool6 = trunc i8 %7 to i1, !dbg !7298
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7294

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7298
  br label %return, !dbg !7298

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7294

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7290
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7290
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7290
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7290
  %call9 = call i32 @cmp_name(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7290
  store i32 %call9, i32* %retval, align 4, !dbg !7290
  br label %return, !dbg !7290

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7290
  ret i32 %12, !dbg !7290
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_name(i8* %a, i8* %b) #9 !dbg !7300 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7303, metadata !DIExpression()), !dbg !7302
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7302
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7302
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7302
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7302
  %call = call i32 @cmp_name(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7302
  ret i32 %call, !dbg !7302
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_name(i8* %a, i8* %b) #9 !dbg !7304 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7307, metadata !DIExpression()), !dbg !7306
  br label %do.body, !dbg !7306

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7308, metadata !DIExpression()), !dbg !7310
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7310
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7310
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7310
  %frombool = zext i1 %call to i8, !dbg !7310
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7310
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7311, metadata !DIExpression()), !dbg !7310
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7310
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7310
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7310
  %frombool2 = zext i1 %call1 to i8, !dbg !7310
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7310
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7312
  %tobool = trunc i8 %4 to i1, !dbg !7312
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7312

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7312
  %tobool3 = trunc i8 %5 to i1, !dbg !7312
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7310

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7312
  br label %return, !dbg !7312

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7314
  %tobool4 = trunc i8 %6 to i1, !dbg !7314
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7314

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7314
  %tobool6 = trunc i8 %7 to i1, !dbg !7314
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7310

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7314
  br label %return, !dbg !7314

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7310

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7306
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7306
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7306
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7306
  %call9 = call i32 @cmp_name(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7306
  store i32 %call9, i32* %retval, align 4, !dbg !7306
  br label %return, !dbg !7306

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7306
  ret i32 %12, !dbg !7306
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_name(i8* %a, i8* %b) #9 !dbg !7316 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7317, metadata !DIExpression()), !dbg !7318
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7319, metadata !DIExpression()), !dbg !7318
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7318
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7318
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7318
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7318
  %call = call i32 @cmp_name(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7318
  ret i32 %call, !dbg !7318
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_name(i8* %a, i8* %b) #9 !dbg !7320 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7321, metadata !DIExpression()), !dbg !7322
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7323, metadata !DIExpression()), !dbg !7322
  br label %do.body, !dbg !7322

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7324, metadata !DIExpression()), !dbg !7326
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7326
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7326
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7326
  %frombool = zext i1 %call to i8, !dbg !7326
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7326
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7327, metadata !DIExpression()), !dbg !7326
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7326
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7326
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7326
  %frombool2 = zext i1 %call1 to i8, !dbg !7326
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7326
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7328
  %tobool = trunc i8 %4 to i1, !dbg !7328
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7328

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7328
  %tobool3 = trunc i8 %5 to i1, !dbg !7328
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7326

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7328
  br label %return, !dbg !7328

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7330
  %tobool4 = trunc i8 %6 to i1, !dbg !7330
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7330

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7330
  %tobool6 = trunc i8 %7 to i1, !dbg !7330
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7326

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7330
  br label %return, !dbg !7330

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7326

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7322
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7322
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7322
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7322
  %call9 = call i32 @cmp_name(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7322
  store i32 %call9, i32* %retval, align 4, !dbg !7322
  br label %return, !dbg !7322

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7322
  ret i32 %12, !dbg !7322
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_extension(i8* %a, i8* %b) #0 !dbg !7332 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7333, metadata !DIExpression()), !dbg !7334
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7335, metadata !DIExpression()), !dbg !7334
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7334
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7334
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7334
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7334
  %call = call i32 @cmp_extension(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7334
  ret i32 %call, !dbg !7334
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_extension(i8* %a, i8* %b) #0 !dbg !7336 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7337, metadata !DIExpression()), !dbg !7338
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7339, metadata !DIExpression()), !dbg !7338
  br label %do.body, !dbg !7338

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7340, metadata !DIExpression()), !dbg !7342
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7342
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7342
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7342
  %frombool = zext i1 %call to i8, !dbg !7342
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7342
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7343, metadata !DIExpression()), !dbg !7342
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7342
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7342
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7342
  %frombool2 = zext i1 %call1 to i8, !dbg !7342
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7342
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7344
  %tobool = trunc i8 %4 to i1, !dbg !7344
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7344

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7344
  %tobool3 = trunc i8 %5 to i1, !dbg !7344
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7342

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7344
  br label %return, !dbg !7344

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7346
  %tobool4 = trunc i8 %6 to i1, !dbg !7346
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7346

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7346
  %tobool6 = trunc i8 %7 to i1, !dbg !7346
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7342

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7346
  br label %return, !dbg !7346

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7342

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7338
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7338
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7338
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7338
  %call9 = call i32 @cmp_extension(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7338
  store i32 %call9, i32* %retval, align 4, !dbg !7338
  br label %return, !dbg !7338

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7338
  ret i32 %12, !dbg !7338
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_extension(i8* %a, i8* %b) #0 !dbg !7348 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7351, metadata !DIExpression()), !dbg !7350
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7350
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7350
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7350
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7350
  %call = call i32 @cmp_extension(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7350
  ret i32 %call, !dbg !7350
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_extension(i8* %a, i8* %b) #0 !dbg !7352 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7353, metadata !DIExpression()), !dbg !7354
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7355, metadata !DIExpression()), !dbg !7354
  br label %do.body, !dbg !7354

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7356, metadata !DIExpression()), !dbg !7358
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7358
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7358
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7358
  %frombool = zext i1 %call to i8, !dbg !7358
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7358
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7359, metadata !DIExpression()), !dbg !7358
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7358
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7358
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7358
  %frombool2 = zext i1 %call1 to i8, !dbg !7358
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7358
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7360
  %tobool = trunc i8 %4 to i1, !dbg !7360
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7360

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7360
  %tobool3 = trunc i8 %5 to i1, !dbg !7360
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7358

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7360
  br label %return, !dbg !7360

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7362
  %tobool4 = trunc i8 %6 to i1, !dbg !7362
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7362

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7362
  %tobool6 = trunc i8 %7 to i1, !dbg !7362
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7358

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7362
  br label %return, !dbg !7362

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7358

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7354
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7354
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7354
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7354
  %call9 = call i32 @cmp_extension(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7354
  store i32 %call9, i32* %retval, align 4, !dbg !7354
  br label %return, !dbg !7354

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7354
  ret i32 %12, !dbg !7354
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_extension(i8* %a, i8* %b) #9 !dbg !7364 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7365, metadata !DIExpression()), !dbg !7366
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7367, metadata !DIExpression()), !dbg !7366
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7366
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7366
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7366
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7366
  %call = call i32 @cmp_extension(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7366
  ret i32 %call, !dbg !7366
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_extension(i8* %a, i8* %b) #9 !dbg !7368 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7369, metadata !DIExpression()), !dbg !7370
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7371, metadata !DIExpression()), !dbg !7370
  br label %do.body, !dbg !7370

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7372, metadata !DIExpression()), !dbg !7374
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7374
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7374
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7374
  %frombool = zext i1 %call to i8, !dbg !7374
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7374
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7375, metadata !DIExpression()), !dbg !7374
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7374
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7374
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7374
  %frombool2 = zext i1 %call1 to i8, !dbg !7374
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7374
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7376
  %tobool = trunc i8 %4 to i1, !dbg !7376
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7376

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7376
  %tobool3 = trunc i8 %5 to i1, !dbg !7376
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7374

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7376
  br label %return, !dbg !7376

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7378
  %tobool4 = trunc i8 %6 to i1, !dbg !7378
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7378

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7378
  %tobool6 = trunc i8 %7 to i1, !dbg !7378
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7374

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7378
  br label %return, !dbg !7378

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7374

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7370
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7370
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7370
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7370
  %call9 = call i32 @cmp_extension(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7370
  store i32 %call9, i32* %retval, align 4, !dbg !7370
  br label %return, !dbg !7370

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7370
  ret i32 %12, !dbg !7370
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_extension(i8* %a, i8* %b) #9 !dbg !7380 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7381, metadata !DIExpression()), !dbg !7382
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7383, metadata !DIExpression()), !dbg !7382
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7382
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7382
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7382
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7382
  %call = call i32 @cmp_extension(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7382
  ret i32 %call, !dbg !7382
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_extension(i8* %a, i8* %b) #9 !dbg !7384 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7385, metadata !DIExpression()), !dbg !7386
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7387, metadata !DIExpression()), !dbg !7386
  br label %do.body, !dbg !7386

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7388, metadata !DIExpression()), !dbg !7390
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7390
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7390
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7390
  %frombool = zext i1 %call to i8, !dbg !7390
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7390
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7391, metadata !DIExpression()), !dbg !7390
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7390
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7390
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7390
  %frombool2 = zext i1 %call1 to i8, !dbg !7390
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7390
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7392
  %tobool = trunc i8 %4 to i1, !dbg !7392
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7392

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7392
  %tobool3 = trunc i8 %5 to i1, !dbg !7392
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7390

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7392
  br label %return, !dbg !7392

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7394
  %tobool4 = trunc i8 %6 to i1, !dbg !7394
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7394

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7394
  %tobool6 = trunc i8 %7 to i1, !dbg !7394
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7390

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7394
  br label %return, !dbg !7394

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7390

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7386
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7386
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7386
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7386
  %call9 = call i32 @cmp_extension(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7386
  store i32 %call9, i32* %retval, align 4, !dbg !7386
  br label %return, !dbg !7386

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7386
  ret i32 %12, !dbg !7386
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_size(i8* %a, i8* %b) #0 !dbg !7396 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7397, metadata !DIExpression()), !dbg !7398
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7399, metadata !DIExpression()), !dbg !7398
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7398
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7398
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7398
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7398
  %call = call i32 @cmp_size(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7398
  ret i32 %call, !dbg !7398
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_size(i8* %a, i8* %b) #0 !dbg !7400 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7401, metadata !DIExpression()), !dbg !7402
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7403, metadata !DIExpression()), !dbg !7402
  br label %do.body, !dbg !7402

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7404, metadata !DIExpression()), !dbg !7406
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7406
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7406
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7406
  %frombool = zext i1 %call to i8, !dbg !7406
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7406
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7407, metadata !DIExpression()), !dbg !7406
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7406
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7406
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7406
  %frombool2 = zext i1 %call1 to i8, !dbg !7406
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7406
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7408
  %tobool = trunc i8 %4 to i1, !dbg !7408
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7408

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7408
  %tobool3 = trunc i8 %5 to i1, !dbg !7408
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7406

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7408
  br label %return, !dbg !7408

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7410
  %tobool4 = trunc i8 %6 to i1, !dbg !7410
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7410

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7410
  %tobool6 = trunc i8 %7 to i1, !dbg !7410
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7406

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7410
  br label %return, !dbg !7410

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7406

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7402
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7402
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7402
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7402
  %call9 = call i32 @cmp_size(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7402
  store i32 %call9, i32* %retval, align 4, !dbg !7402
  br label %return, !dbg !7402

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7402
  ret i32 %12, !dbg !7402
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_size(i8* %a, i8* %b) #0 !dbg !7412 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7413, metadata !DIExpression()), !dbg !7414
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7415, metadata !DIExpression()), !dbg !7414
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7414
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7414
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7414
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7414
  %call = call i32 @cmp_size(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7414
  ret i32 %call, !dbg !7414
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_size(i8* %a, i8* %b) #0 !dbg !7416 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7417, metadata !DIExpression()), !dbg !7418
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7419, metadata !DIExpression()), !dbg !7418
  br label %do.body, !dbg !7418

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7420, metadata !DIExpression()), !dbg !7422
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7422
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7422
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7422
  %frombool = zext i1 %call to i8, !dbg !7422
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7422
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7423, metadata !DIExpression()), !dbg !7422
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7422
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7422
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7422
  %frombool2 = zext i1 %call1 to i8, !dbg !7422
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7422
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7424
  %tobool = trunc i8 %4 to i1, !dbg !7424
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7424

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7424
  %tobool3 = trunc i8 %5 to i1, !dbg !7424
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7422

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7424
  br label %return, !dbg !7424

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7426
  %tobool4 = trunc i8 %6 to i1, !dbg !7426
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7426

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7426
  %tobool6 = trunc i8 %7 to i1, !dbg !7426
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7422

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7426
  br label %return, !dbg !7426

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7422

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7418
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7418
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7418
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7418
  %call9 = call i32 @cmp_size(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7418
  store i32 %call9, i32* %retval, align 4, !dbg !7418
  br label %return, !dbg !7418

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7418
  ret i32 %12, !dbg !7418
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_size(i8* %a, i8* %b) #9 !dbg !7428 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7429, metadata !DIExpression()), !dbg !7430
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7431, metadata !DIExpression()), !dbg !7430
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7430
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7430
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7430
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7430
  %call = call i32 @cmp_size(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7430
  ret i32 %call, !dbg !7430
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_size(i8* %a, i8* %b) #9 !dbg !7432 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7433, metadata !DIExpression()), !dbg !7434
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7435, metadata !DIExpression()), !dbg !7434
  br label %do.body, !dbg !7434

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7436, metadata !DIExpression()), !dbg !7438
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7438
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7438
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7438
  %frombool = zext i1 %call to i8, !dbg !7438
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7438
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7439, metadata !DIExpression()), !dbg !7438
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7438
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7438
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7438
  %frombool2 = zext i1 %call1 to i8, !dbg !7438
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7438
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7440
  %tobool = trunc i8 %4 to i1, !dbg !7440
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7440

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7440
  %tobool3 = trunc i8 %5 to i1, !dbg !7440
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7438

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7440
  br label %return, !dbg !7440

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7442
  %tobool4 = trunc i8 %6 to i1, !dbg !7442
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7442

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7442
  %tobool6 = trunc i8 %7 to i1, !dbg !7442
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7438

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7442
  br label %return, !dbg !7442

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7438

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7434
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7434
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7434
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7434
  %call9 = call i32 @cmp_size(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7434
  store i32 %call9, i32* %retval, align 4, !dbg !7434
  br label %return, !dbg !7434

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7434
  ret i32 %12, !dbg !7434
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_size(i8* %a, i8* %b) #9 !dbg !7444 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7445, metadata !DIExpression()), !dbg !7446
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7447, metadata !DIExpression()), !dbg !7446
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7446
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7446
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7446
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7446
  %call = call i32 @cmp_size(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7446
  ret i32 %call, !dbg !7446
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_size(i8* %a, i8* %b) #9 !dbg !7448 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7449, metadata !DIExpression()), !dbg !7450
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7451, metadata !DIExpression()), !dbg !7450
  br label %do.body, !dbg !7450

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7452, metadata !DIExpression()), !dbg !7454
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7454
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7454
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7454
  %frombool = zext i1 %call to i8, !dbg !7454
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7454
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7455, metadata !DIExpression()), !dbg !7454
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7454
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7454
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7454
  %frombool2 = zext i1 %call1 to i8, !dbg !7454
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7454
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7456
  %tobool = trunc i8 %4 to i1, !dbg !7456
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7456

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7456
  %tobool3 = trunc i8 %5 to i1, !dbg !7456
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7454

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7456
  br label %return, !dbg !7456

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7458
  %tobool4 = trunc i8 %6 to i1, !dbg !7458
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7458

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7458
  %tobool6 = trunc i8 %7 to i1, !dbg !7458
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7454

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7458
  br label %return, !dbg !7458

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7454

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7450
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7450
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7450
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7450
  %call9 = call i32 @cmp_size(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7450
  store i32 %call9, i32* %retval, align 4, !dbg !7450
  br label %return, !dbg !7450

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7450
  ret i32 %12, !dbg !7450
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_version(i8* %a, i8* %b) #0 !dbg !7460 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7461, metadata !DIExpression()), !dbg !7462
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7463, metadata !DIExpression()), !dbg !7464
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7465
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7465
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7466
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7466
  %call = call i32 @cmp_version(%struct.fileinfo* %1, %struct.fileinfo* %3), !dbg !7467
  ret i32 %call, !dbg !7468
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_version(i8* %a, i8* %b) #0 !dbg !7469 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7470, metadata !DIExpression()), !dbg !7471
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7472, metadata !DIExpression()), !dbg !7473
  br label %do.body, !dbg !7474

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7475, metadata !DIExpression()), !dbg !7477
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7477
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7477
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7477
  %frombool = zext i1 %call to i8, !dbg !7477
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7477
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7478, metadata !DIExpression()), !dbg !7477
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7477
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7477
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7477
  %frombool2 = zext i1 %call1 to i8, !dbg !7477
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7477
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7479
  %tobool = trunc i8 %4 to i1, !dbg !7479
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7479

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7479
  %tobool3 = trunc i8 %5 to i1, !dbg !7479
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7477

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7479
  br label %return, !dbg !7479

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7481
  %tobool4 = trunc i8 %6 to i1, !dbg !7481
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7481

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7481
  %tobool6 = trunc i8 %7 to i1, !dbg !7481
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7477

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7481
  br label %return, !dbg !7481

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7477

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7483
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7483
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7484
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7484
  %call9 = call i32 @cmp_version(%struct.fileinfo* %9, %struct.fileinfo* %11), !dbg !7485
  store i32 %call9, i32* %retval, align 4, !dbg !7486
  br label %return, !dbg !7486

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7487
  ret i32 %12, !dbg !7487
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_version(i8* %a, i8* %b) #0 !dbg !7488 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7489, metadata !DIExpression()), !dbg !7490
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7491, metadata !DIExpression()), !dbg !7492
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7493
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7493
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7494
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7494
  %call = call i32 @cmp_version(%struct.fileinfo* %1, %struct.fileinfo* %3), !dbg !7495
  ret i32 %call, !dbg !7496
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_version(i8* %a, i8* %b) #0 !dbg !7497 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7498, metadata !DIExpression()), !dbg !7499
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7500, metadata !DIExpression()), !dbg !7501
  br label %do.body, !dbg !7502

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7503, metadata !DIExpression()), !dbg !7505
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7505
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7505
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7505
  %frombool = zext i1 %call to i8, !dbg !7505
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7505
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7506, metadata !DIExpression()), !dbg !7505
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7505
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7505
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7505
  %frombool2 = zext i1 %call1 to i8, !dbg !7505
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7505
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7507
  %tobool = trunc i8 %4 to i1, !dbg !7507
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7507

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7507
  %tobool3 = trunc i8 %5 to i1, !dbg !7507
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7505

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7507
  br label %return, !dbg !7507

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7509
  %tobool4 = trunc i8 %6 to i1, !dbg !7509
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7509

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7509
  %tobool6 = trunc i8 %7 to i1, !dbg !7509
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7505

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7509
  br label %return, !dbg !7509

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7505

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7511
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7511
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7512
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7512
  %call9 = call i32 @cmp_version(%struct.fileinfo* %9, %struct.fileinfo* %11), !dbg !7513
  store i32 %call9, i32* %retval, align 4, !dbg !7514
  br label %return, !dbg !7514

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7515
  ret i32 %12, !dbg !7515
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_mtime(i8* %a, i8* %b) #0 !dbg !7516 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7517, metadata !DIExpression()), !dbg !7518
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7519, metadata !DIExpression()), !dbg !7518
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7518
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7518
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7518
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7518
  %call = call i32 @cmp_mtime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7518
  ret i32 %call, !dbg !7518
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_mtime(i8* %a, i8* %b) #0 !dbg !7520 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7521, metadata !DIExpression()), !dbg !7522
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7523, metadata !DIExpression()), !dbg !7522
  br label %do.body, !dbg !7522

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7524, metadata !DIExpression()), !dbg !7526
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7526
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7526
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7526
  %frombool = zext i1 %call to i8, !dbg !7526
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7526
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7527, metadata !DIExpression()), !dbg !7526
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7526
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7526
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7526
  %frombool2 = zext i1 %call1 to i8, !dbg !7526
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7526
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7528
  %tobool = trunc i8 %4 to i1, !dbg !7528
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7528

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7528
  %tobool3 = trunc i8 %5 to i1, !dbg !7528
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7526

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7528
  br label %return, !dbg !7528

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7530
  %tobool4 = trunc i8 %6 to i1, !dbg !7530
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7530

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7530
  %tobool6 = trunc i8 %7 to i1, !dbg !7530
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7526

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7530
  br label %return, !dbg !7530

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7526

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7522
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7522
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7522
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7522
  %call9 = call i32 @cmp_mtime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7522
  store i32 %call9, i32* %retval, align 4, !dbg !7522
  br label %return, !dbg !7522

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7522
  ret i32 %12, !dbg !7522
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_mtime(i8* %a, i8* %b) #0 !dbg !7532 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7533, metadata !DIExpression()), !dbg !7534
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7535, metadata !DIExpression()), !dbg !7534
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7534
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7534
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7534
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7534
  %call = call i32 @cmp_mtime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7534
  ret i32 %call, !dbg !7534
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_mtime(i8* %a, i8* %b) #0 !dbg !7536 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7537, metadata !DIExpression()), !dbg !7538
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7539, metadata !DIExpression()), !dbg !7538
  br label %do.body, !dbg !7538

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7540, metadata !DIExpression()), !dbg !7542
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7542
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7542
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7542
  %frombool = zext i1 %call to i8, !dbg !7542
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7542
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7543, metadata !DIExpression()), !dbg !7542
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7542
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7542
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7542
  %frombool2 = zext i1 %call1 to i8, !dbg !7542
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7542
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7544
  %tobool = trunc i8 %4 to i1, !dbg !7544
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7544

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7544
  %tobool3 = trunc i8 %5 to i1, !dbg !7544
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7542

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7544
  br label %return, !dbg !7544

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7546
  %tobool4 = trunc i8 %6 to i1, !dbg !7546
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7546

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7546
  %tobool6 = trunc i8 %7 to i1, !dbg !7546
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7542

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7546
  br label %return, !dbg !7546

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7542

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7538
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7538
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7538
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7538
  %call9 = call i32 @cmp_mtime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7538
  store i32 %call9, i32* %retval, align 4, !dbg !7538
  br label %return, !dbg !7538

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7538
  ret i32 %12, !dbg !7538
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_mtime(i8* %a, i8* %b) #9 !dbg !7548 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7549, metadata !DIExpression()), !dbg !7550
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7551, metadata !DIExpression()), !dbg !7550
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7550
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7550
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7550
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7550
  %call = call i32 @cmp_mtime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7550
  ret i32 %call, !dbg !7550
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_mtime(i8* %a, i8* %b) #9 !dbg !7552 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7553, metadata !DIExpression()), !dbg !7554
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7555, metadata !DIExpression()), !dbg !7554
  br label %do.body, !dbg !7554

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7556, metadata !DIExpression()), !dbg !7558
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7558
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7558
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7558
  %frombool = zext i1 %call to i8, !dbg !7558
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7558
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7559, metadata !DIExpression()), !dbg !7558
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7558
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7558
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7558
  %frombool2 = zext i1 %call1 to i8, !dbg !7558
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7558
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7560
  %tobool = trunc i8 %4 to i1, !dbg !7560
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7560

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7560
  %tobool3 = trunc i8 %5 to i1, !dbg !7560
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7558

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7560
  br label %return, !dbg !7560

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7562
  %tobool4 = trunc i8 %6 to i1, !dbg !7562
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7562

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7562
  %tobool6 = trunc i8 %7 to i1, !dbg !7562
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7558

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7562
  br label %return, !dbg !7562

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7558

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7554
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7554
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7554
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7554
  %call9 = call i32 @cmp_mtime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7554
  store i32 %call9, i32* %retval, align 4, !dbg !7554
  br label %return, !dbg !7554

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7554
  ret i32 %12, !dbg !7554
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_mtime(i8* %a, i8* %b) #9 !dbg !7564 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7565, metadata !DIExpression()), !dbg !7566
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7567, metadata !DIExpression()), !dbg !7566
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7566
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7566
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7566
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7566
  %call = call i32 @cmp_mtime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7566
  ret i32 %call, !dbg !7566
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_mtime(i8* %a, i8* %b) #9 !dbg !7568 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7569, metadata !DIExpression()), !dbg !7570
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7571, metadata !DIExpression()), !dbg !7570
  br label %do.body, !dbg !7570

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7572, metadata !DIExpression()), !dbg !7574
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7574
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7574
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7574
  %frombool = zext i1 %call to i8, !dbg !7574
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7574
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7575, metadata !DIExpression()), !dbg !7574
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7574
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7574
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7574
  %frombool2 = zext i1 %call1 to i8, !dbg !7574
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7574
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7576
  %tobool = trunc i8 %4 to i1, !dbg !7576
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7576

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7576
  %tobool3 = trunc i8 %5 to i1, !dbg !7576
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7574

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7576
  br label %return, !dbg !7576

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7578
  %tobool4 = trunc i8 %6 to i1, !dbg !7578
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7578

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7578
  %tobool6 = trunc i8 %7 to i1, !dbg !7578
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7574

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7578
  br label %return, !dbg !7578

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7574

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7570
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7570
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7570
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7570
  %call9 = call i32 @cmp_mtime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7570
  store i32 %call9, i32* %retval, align 4, !dbg !7570
  br label %return, !dbg !7570

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7570
  ret i32 %12, !dbg !7570
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_ctime(i8* %a, i8* %b) #0 !dbg !7580 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7581, metadata !DIExpression()), !dbg !7582
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7583, metadata !DIExpression()), !dbg !7582
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7582
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7582
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7582
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7582
  %call = call i32 @cmp_ctime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7582
  ret i32 %call, !dbg !7582
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_ctime(i8* %a, i8* %b) #0 !dbg !7584 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7587, metadata !DIExpression()), !dbg !7586
  br label %do.body, !dbg !7586

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7588, metadata !DIExpression()), !dbg !7590
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7590
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7590
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7590
  %frombool = zext i1 %call to i8, !dbg !7590
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7590
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7591, metadata !DIExpression()), !dbg !7590
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7590
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7590
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7590
  %frombool2 = zext i1 %call1 to i8, !dbg !7590
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7590
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7592
  %tobool = trunc i8 %4 to i1, !dbg !7592
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7592

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7592
  %tobool3 = trunc i8 %5 to i1, !dbg !7592
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7590

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7592
  br label %return, !dbg !7592

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7594
  %tobool4 = trunc i8 %6 to i1, !dbg !7594
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7594

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7594
  %tobool6 = trunc i8 %7 to i1, !dbg !7594
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7590

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7594
  br label %return, !dbg !7594

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7590

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7586
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7586
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7586
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7586
  %call9 = call i32 @cmp_ctime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7586
  store i32 %call9, i32* %retval, align 4, !dbg !7586
  br label %return, !dbg !7586

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7586
  ret i32 %12, !dbg !7586
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_ctime(i8* %a, i8* %b) #0 !dbg !7596 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7597, metadata !DIExpression()), !dbg !7598
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7599, metadata !DIExpression()), !dbg !7598
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7598
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7598
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7598
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7598
  %call = call i32 @cmp_ctime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7598
  ret i32 %call, !dbg !7598
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_ctime(i8* %a, i8* %b) #0 !dbg !7600 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7601, metadata !DIExpression()), !dbg !7602
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7603, metadata !DIExpression()), !dbg !7602
  br label %do.body, !dbg !7602

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7604, metadata !DIExpression()), !dbg !7606
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7606
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7606
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7606
  %frombool = zext i1 %call to i8, !dbg !7606
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7606
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7607, metadata !DIExpression()), !dbg !7606
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7606
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7606
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7606
  %frombool2 = zext i1 %call1 to i8, !dbg !7606
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7606
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7608
  %tobool = trunc i8 %4 to i1, !dbg !7608
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7608

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7608
  %tobool3 = trunc i8 %5 to i1, !dbg !7608
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7606

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7608
  br label %return, !dbg !7608

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7610
  %tobool4 = trunc i8 %6 to i1, !dbg !7610
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7610

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7610
  %tobool6 = trunc i8 %7 to i1, !dbg !7610
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7606

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7610
  br label %return, !dbg !7610

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7606

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7602
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7602
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7602
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7602
  %call9 = call i32 @cmp_ctime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7602
  store i32 %call9, i32* %retval, align 4, !dbg !7602
  br label %return, !dbg !7602

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7602
  ret i32 %12, !dbg !7602
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_ctime(i8* %a, i8* %b) #9 !dbg !7612 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7613, metadata !DIExpression()), !dbg !7614
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7615, metadata !DIExpression()), !dbg !7614
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7614
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7614
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7614
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7614
  %call = call i32 @cmp_ctime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7614
  ret i32 %call, !dbg !7614
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_ctime(i8* %a, i8* %b) #9 !dbg !7616 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7617, metadata !DIExpression()), !dbg !7618
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7619, metadata !DIExpression()), !dbg !7618
  br label %do.body, !dbg !7618

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7620, metadata !DIExpression()), !dbg !7622
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7622
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7622
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7622
  %frombool = zext i1 %call to i8, !dbg !7622
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7622
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7623, metadata !DIExpression()), !dbg !7622
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7622
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7622
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7622
  %frombool2 = zext i1 %call1 to i8, !dbg !7622
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7622
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7624
  %tobool = trunc i8 %4 to i1, !dbg !7624
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7624

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7624
  %tobool3 = trunc i8 %5 to i1, !dbg !7624
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7622

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7624
  br label %return, !dbg !7624

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7626
  %tobool4 = trunc i8 %6 to i1, !dbg !7626
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7626

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7626
  %tobool6 = trunc i8 %7 to i1, !dbg !7626
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7622

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7626
  br label %return, !dbg !7626

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7622

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7618
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7618
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7618
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7618
  %call9 = call i32 @cmp_ctime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7618
  store i32 %call9, i32* %retval, align 4, !dbg !7618
  br label %return, !dbg !7618

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7618
  ret i32 %12, !dbg !7618
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_ctime(i8* %a, i8* %b) #9 !dbg !7628 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7629, metadata !DIExpression()), !dbg !7630
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7631, metadata !DIExpression()), !dbg !7630
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7630
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7630
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7630
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7630
  %call = call i32 @cmp_ctime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7630
  ret i32 %call, !dbg !7630
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_ctime(i8* %a, i8* %b) #9 !dbg !7632 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7633, metadata !DIExpression()), !dbg !7634
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7635, metadata !DIExpression()), !dbg !7634
  br label %do.body, !dbg !7634

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7636, metadata !DIExpression()), !dbg !7638
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7638
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7638
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7638
  %frombool = zext i1 %call to i8, !dbg !7638
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7638
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7639, metadata !DIExpression()), !dbg !7638
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7638
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7638
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7638
  %frombool2 = zext i1 %call1 to i8, !dbg !7638
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7638
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7640
  %tobool = trunc i8 %4 to i1, !dbg !7640
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7640

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7640
  %tobool3 = trunc i8 %5 to i1, !dbg !7640
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7638

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7640
  br label %return, !dbg !7640

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7642
  %tobool4 = trunc i8 %6 to i1, !dbg !7642
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7642

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7642
  %tobool6 = trunc i8 %7 to i1, !dbg !7642
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7638

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7642
  br label %return, !dbg !7642

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7638

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7634
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7634
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7634
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7634
  %call9 = call i32 @cmp_ctime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7634
  store i32 %call9, i32* %retval, align 4, !dbg !7634
  br label %return, !dbg !7634

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7634
  ret i32 %12, !dbg !7634
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_atime(i8* %a, i8* %b) #0 !dbg !7644 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7645, metadata !DIExpression()), !dbg !7646
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7647, metadata !DIExpression()), !dbg !7646
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7646
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7646
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7646
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7646
  %call = call i32 @cmp_atime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7646
  ret i32 %call, !dbg !7646
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_atime(i8* %a, i8* %b) #0 !dbg !7648 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7649, metadata !DIExpression()), !dbg !7650
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7651, metadata !DIExpression()), !dbg !7650
  br label %do.body, !dbg !7650

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7652, metadata !DIExpression()), !dbg !7654
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7654
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7654
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7654
  %frombool = zext i1 %call to i8, !dbg !7654
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7654
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7655, metadata !DIExpression()), !dbg !7654
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7654
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7654
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7654
  %frombool2 = zext i1 %call1 to i8, !dbg !7654
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7654
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7656
  %tobool = trunc i8 %4 to i1, !dbg !7656
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7656

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7656
  %tobool3 = trunc i8 %5 to i1, !dbg !7656
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7654

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7656
  br label %return, !dbg !7656

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7658
  %tobool4 = trunc i8 %6 to i1, !dbg !7658
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7658

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7658
  %tobool6 = trunc i8 %7 to i1, !dbg !7658
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7654

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7658
  br label %return, !dbg !7658

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7654

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7650
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7650
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7650
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7650
  %call9 = call i32 @cmp_atime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7650
  store i32 %call9, i32* %retval, align 4, !dbg !7650
  br label %return, !dbg !7650

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7650
  ret i32 %12, !dbg !7650
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_atime(i8* %a, i8* %b) #0 !dbg !7660 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7661, metadata !DIExpression()), !dbg !7662
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7663, metadata !DIExpression()), !dbg !7662
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7662
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7662
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7662
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7662
  %call = call i32 @cmp_atime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @xstrcoll), !dbg !7662
  ret i32 %call, !dbg !7662
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_atime(i8* %a, i8* %b) #0 !dbg !7664 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7667, metadata !DIExpression()), !dbg !7666
  br label %do.body, !dbg !7666

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7668, metadata !DIExpression()), !dbg !7670
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7670
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7670
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7670
  %frombool = zext i1 %call to i8, !dbg !7670
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7670
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7671, metadata !DIExpression()), !dbg !7670
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7670
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7670
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7670
  %frombool2 = zext i1 %call1 to i8, !dbg !7670
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7670
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7672
  %tobool = trunc i8 %4 to i1, !dbg !7672
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7672

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7672
  %tobool3 = trunc i8 %5 to i1, !dbg !7672
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7670

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7672
  br label %return, !dbg !7672

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7674
  %tobool4 = trunc i8 %6 to i1, !dbg !7674
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7674

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7674
  %tobool6 = trunc i8 %7 to i1, !dbg !7674
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7670

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7674
  br label %return, !dbg !7674

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7670

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7666
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7666
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7666
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7666
  %call9 = call i32 @cmp_atime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @xstrcoll), !dbg !7666
  store i32 %call9, i32* %retval, align 4, !dbg !7666
  br label %return, !dbg !7666

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7666
  ret i32 %12, !dbg !7666
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_atime(i8* %a, i8* %b) #9 !dbg !7676 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7677, metadata !DIExpression()), !dbg !7678
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7679, metadata !DIExpression()), !dbg !7678
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7678
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7678
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7678
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7678
  %call = call i32 @cmp_atime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7678
  ret i32 %call, !dbg !7678
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_atime(i8* %a, i8* %b) #9 !dbg !7680 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7681, metadata !DIExpression()), !dbg !7682
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7683, metadata !DIExpression()), !dbg !7682
  br label %do.body, !dbg !7682

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7684, metadata !DIExpression()), !dbg !7686
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7686
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7686
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7686
  %frombool = zext i1 %call to i8, !dbg !7686
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7686
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7687, metadata !DIExpression()), !dbg !7686
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7686
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7686
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7686
  %frombool2 = zext i1 %call1 to i8, !dbg !7686
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7686
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7688
  %tobool = trunc i8 %4 to i1, !dbg !7688
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7688

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7688
  %tobool3 = trunc i8 %5 to i1, !dbg !7688
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7686

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7688
  br label %return, !dbg !7688

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7690
  %tobool4 = trunc i8 %6 to i1, !dbg !7690
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7690

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7690
  %tobool6 = trunc i8 %7 to i1, !dbg !7690
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7686

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7690
  br label %return, !dbg !7690

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7686

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %a.addr, align 8, !dbg !7682
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7682
  %10 = load i8*, i8** %b.addr, align 8, !dbg !7682
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7682
  %call9 = call i32 @cmp_atime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7682
  store i32 %call9, i32* %retval, align 4, !dbg !7682
  br label %return, !dbg !7682

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7682
  ret i32 %12, !dbg !7682
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_atime(i8* %a, i8* %b) #9 !dbg !7692 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7693, metadata !DIExpression()), !dbg !7694
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7695, metadata !DIExpression()), !dbg !7694
  %0 = load i8*, i8** %b.addr, align 8, !dbg !7694
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7694
  %2 = load i8*, i8** %a.addr, align 8, !dbg !7694
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7694
  %call = call i32 @cmp_atime(%struct.fileinfo* %1, %struct.fileinfo* %3, i32 (i8*, i8*)* @strcmp), !dbg !7694
  ret i32 %call, !dbg !7694
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_atime(i8* %a, i8* %b) #9 !dbg !7696 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a_is_dir = alloca i8, align 1, !ctir !141
  %b_is_dir = alloca i8, align 1, !ctir !141
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7697, metadata !DIExpression()), !dbg !7698
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7699, metadata !DIExpression()), !dbg !7698
  br label %do.body, !dbg !7698

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %a_is_dir, metadata !7700, metadata !DIExpression()), !dbg !7702
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7702
  %1 = bitcast i8* %0 to %struct.fileinfo*, !dbg !7702
  %call = call zeroext i1 @is_linked_directory(%struct.fileinfo* %1), !dbg !7702
  %frombool = zext i1 %call to i8, !dbg !7702
  store i8 %frombool, i8* %a_is_dir, align 1, !dbg !7702
  call void @llvm.dbg.declare(metadata i8* %b_is_dir, metadata !7703, metadata !DIExpression()), !dbg !7702
  %2 = load i8*, i8** %b.addr, align 8, !dbg !7702
  %3 = bitcast i8* %2 to %struct.fileinfo*, !dbg !7702
  %call1 = call zeroext i1 @is_linked_directory(%struct.fileinfo* %3), !dbg !7702
  %frombool2 = zext i1 %call1 to i8, !dbg !7702
  store i8 %frombool2, i8* %b_is_dir, align 1, !dbg !7702
  %4 = load i8, i8* %a_is_dir, align 1, !dbg !7704
  %tobool = trunc i8 %4 to i1, !dbg !7704
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7704

land.lhs.true:                                    ; preds = %do.body
  %5 = load i8, i8* %b_is_dir, align 1, !dbg !7704
  %tobool3 = trunc i8 %5 to i1, !dbg !7704
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7702

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !7704
  br label %return, !dbg !7704

if.end:                                           ; preds = %land.lhs.true, %do.body
  %6 = load i8, i8* %a_is_dir, align 1, !dbg !7706
  %tobool4 = trunc i8 %6 to i1, !dbg !7706
  br i1 %tobool4, label %if.end8, label %land.lhs.true5, !dbg !7706

land.lhs.true5:                                   ; preds = %if.end
  %7 = load i8, i8* %b_is_dir, align 1, !dbg !7706
  %tobool6 = trunc i8 %7 to i1, !dbg !7706
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7702

if.then7:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !7706
  br label %return, !dbg !7706

if.end8:                                          ; preds = %land.lhs.true5, %if.end
  br label %do.end, !dbg !7702

do.end:                                           ; preds = %if.end8
  %8 = load i8*, i8** %b.addr, align 8, !dbg !7698
  %9 = bitcast i8* %8 to %struct.fileinfo*, !dbg !7698
  %10 = load i8*, i8** %a.addr, align 8, !dbg !7698
  %11 = bitcast i8* %10 to %struct.fileinfo*, !dbg !7698
  %call9 = call i32 @cmp_atime(%struct.fileinfo* %9, %struct.fileinfo* %11, i32 (i8*, i8*)* @strcmp), !dbg !7698
  store i32 %call9, i32* %retval, align 4, !dbg !7698
  br label %return, !dbg !7698

return:                                           ; preds = %do.end, %if.then7, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7698
  ret i32 %12, !dbg !7698
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_linked_directory(%struct.fileinfo* %f) #0 !dbg !7708 {
entry:
  %f.addr = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !7709, metadata !DIExpression()), !dbg !7710
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7711
  %filetype = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 4, !dbg !7712, !ctir !184
  %1 = load i32, i32* %filetype, align 8, !dbg !7712, !ctir !36
  %cmp = icmp eq i32 %1, 3, !dbg !7713
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !7714

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7715
  %filetype1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 4, !dbg !7716, !ctir !184
  %3 = load i32, i32* %filetype1, align 8, !dbg !7716, !ctir !36
  %cmp2 = icmp eq i32 %3, 9, !dbg !7717
  br i1 %cmp2, label %lor.end, label %lor.rhs, !dbg !7718

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7719
  %linkmode = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 5, !dbg !7719, !ctir !184
  %5 = load i32, i32* %linkmode, align 4, !dbg !7719, !ctir !228
  %and = and i32 %5, 61440, !dbg !7719
  %cmp3 = icmp eq i32 %and, 16384, !dbg !7719
  br label %lor.end, !dbg !7718

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp3, %lor.rhs ]
  ret i1 %6, !dbg !7720
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_atime(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7721 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %diff = alloca i32, align 4, !ctir !27
  %agg.tmp = alloca %struct.dev_ino, align 8
  %agg.tmp1 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7727, metadata !DIExpression()), !dbg !7728
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7729, metadata !DIExpression()), !dbg !7730
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7731, metadata !DIExpression()), !dbg !7732
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7733, metadata !DIExpression()), !dbg !7734
  %0 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7735
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !7736, !ctir !184
  %call = call { i64, i64 } @get_stat_atime(%struct.stat* %stat) #16, !dbg !7737
  %1 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7737
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !7737
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !7737
  store i64 %3, i64* %2, align 8, !dbg !7737
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !7737
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !7737
  store i64 %5, i64* %4, align 8, !dbg !7737
  %6 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7738
  %stat2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3, !dbg !7739, !ctir !184
  %call3 = call { i64, i64 } @get_stat_atime(%struct.stat* %stat2) #16, !dbg !7740
  %7 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7740
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !7740
  %9 = extractvalue { i64, i64 } %call3, 0, !dbg !7740
  store i64 %9, i64* %8, align 8, !dbg !7740
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !7740
  %11 = extractvalue { i64, i64 } %call3, 1, !dbg !7740
  store i64 %11, i64* %10, align 8, !dbg !7740
  %12 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7741
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !7741
  %14 = load i64, i64* %13, align 8, !dbg !7741
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !7741
  %16 = load i64, i64* %15, align 8, !dbg !7741
  %17 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7741
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !7741
  %19 = load i64, i64* %18, align 8, !dbg !7741
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !7741
  %21 = load i64, i64* %20, align 8, !dbg !7741
  %call4 = call i32 @timespec_cmp(i64 %14, i64 %16, i64 %19, i64 %21) #16, !dbg !7741
  store i32 %call4, i32* %diff, align 4, !dbg !7734
  %22 = load i32, i32* %diff, align 4, !dbg !7742
  %tobool = icmp ne i32 %22, 0, !dbg !7742
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7742

cond.true:                                        ; preds = %entry
  %23 = load i32, i32* %diff, align 4, !dbg !7743
  br label %cond.end, !dbg !7742

cond.false:                                       ; preds = %entry
  %24 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7744
  %25 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7745
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %25, i32 0, i32 0, !dbg !7746, !ctir !184
  %26 = load i8*, i8** %name, align 8, !dbg !7746, !ctir !143
  %27 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7747
  %name5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %27, i32 0, i32 0, !dbg !7748, !ctir !184
  %28 = load i8*, i8** %name5, align 8, !dbg !7748, !ctir !143
  %call6 = call i32 %24(i8* %26, i8* %28), !dbg !7744
  br label %cond.end, !dbg !7742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %23, %cond.true ], [ %call6, %cond.false ], !dbg !7742
  ret i32 %cond, !dbg !7749
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll(i8* %a, i8* %b) #0 !dbg !7750 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %diff = alloca i32, align 4, !ctir !27
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7751, metadata !DIExpression()), !dbg !7752
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7755, metadata !DIExpression()), !dbg !7756
  %call = call i32* @__errno_location() #17, !dbg !7757
  store i32 0, i32* %call, align 4, !dbg !7758, !ctir !27
  %0 = load i8*, i8** %a.addr, align 8, !dbg !7759
  %1 = load i8*, i8** %b.addr, align 8, !dbg !7760
  %call1 = call i32 @strcoll(i8* %0, i8* %1) #16, !dbg !7761
  store i32 %call1, i32* %diff, align 4, !dbg !7762
  %call2 = call i32* @__errno_location() #17, !dbg !7763
  %2 = load i32, i32* %call2, align 4, !dbg !7763, !ctir !27
  %tobool = icmp ne i32 %2, 0, !dbg !7763
  br i1 %tobool, label %if.then, label %if.end, !dbg !7765

if.then:                                          ; preds = %entry
  %call3 = call i32* @__errno_location() #17, !dbg !7766
  %3 = load i32, i32* %call3, align 4, !dbg !7766, !ctir !27
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.223, i64 0, i64 0)) #13, !dbg !7768
  %4 = load i8*, i8** %a.addr, align 8, !dbg !7769
  %call5 = call i8* @quote_n(i32 0, i8* %4), !dbg !7770
  %5 = load i8*, i8** %b.addr, align 8, !dbg !7771
  %call6 = call i8* @quote_n(i32 1, i8* %5), !dbg !7772
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %3, i8* %call4, i8* %call5, i8* %call6), !dbg !7773
  call void @set_exit_status(i1 zeroext false), !dbg !7774
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @failed_strcoll, i64 0, i64 0), i32 1) #15, !dbg !7775
  unreachable, !dbg !7775

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %diff, align 4, !dbg !7776
  ret i32 %6, !dbg !7777
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcoll(i8*, i8*) #5

; Function Attrs: noreturn nounwind
declare dso_local void @longjmp(%struct.__jmp_buf_tag*, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_ctime(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7778 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %diff = alloca i32, align 4, !ctir !27
  %agg.tmp = alloca %struct.dev_ino, align 8
  %agg.tmp1 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7779, metadata !DIExpression()), !dbg !7780
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7781, metadata !DIExpression()), !dbg !7782
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7783, metadata !DIExpression()), !dbg !7784
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7785, metadata !DIExpression()), !dbg !7786
  %0 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7787
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !7788, !ctir !184
  %call = call { i64, i64 } @get_stat_ctime(%struct.stat* %stat) #16, !dbg !7789
  %1 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7789
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !7789
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !7789
  store i64 %3, i64* %2, align 8, !dbg !7789
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !7789
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !7789
  store i64 %5, i64* %4, align 8, !dbg !7789
  %6 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7790
  %stat2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3, !dbg !7791, !ctir !184
  %call3 = call { i64, i64 } @get_stat_ctime(%struct.stat* %stat2) #16, !dbg !7792
  %7 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7792
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !7792
  %9 = extractvalue { i64, i64 } %call3, 0, !dbg !7792
  store i64 %9, i64* %8, align 8, !dbg !7792
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !7792
  %11 = extractvalue { i64, i64 } %call3, 1, !dbg !7792
  store i64 %11, i64* %10, align 8, !dbg !7792
  %12 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7793
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !7793
  %14 = load i64, i64* %13, align 8, !dbg !7793
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !7793
  %16 = load i64, i64* %15, align 8, !dbg !7793
  %17 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7793
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !7793
  %19 = load i64, i64* %18, align 8, !dbg !7793
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !7793
  %21 = load i64, i64* %20, align 8, !dbg !7793
  %call4 = call i32 @timespec_cmp(i64 %14, i64 %16, i64 %19, i64 %21) #16, !dbg !7793
  store i32 %call4, i32* %diff, align 4, !dbg !7786
  %22 = load i32, i32* %diff, align 4, !dbg !7794
  %tobool = icmp ne i32 %22, 0, !dbg !7794
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7794

cond.true:                                        ; preds = %entry
  %23 = load i32, i32* %diff, align 4, !dbg !7795
  br label %cond.end, !dbg !7794

cond.false:                                       ; preds = %entry
  %24 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7796
  %25 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7797
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %25, i32 0, i32 0, !dbg !7798, !ctir !184
  %26 = load i8*, i8** %name, align 8, !dbg !7798, !ctir !143
  %27 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7799
  %name5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %27, i32 0, i32 0, !dbg !7800, !ctir !184
  %28 = load i8*, i8** %name5, align 8, !dbg !7800, !ctir !143
  %call6 = call i32 %24(i8* %26, i8* %28), !dbg !7796
  br label %cond.end, !dbg !7794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %23, %cond.true ], [ %call6, %cond.false ], !dbg !7794
  ret i32 %cond, !dbg !7801
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_mtime(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7802 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %diff = alloca i32, align 4, !ctir !27
  %agg.tmp = alloca %struct.dev_ino, align 8
  %agg.tmp1 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7803, metadata !DIExpression()), !dbg !7804
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7805, metadata !DIExpression()), !dbg !7806
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7807, metadata !DIExpression()), !dbg !7808
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7809, metadata !DIExpression()), !dbg !7810
  %0 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7811
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !7812, !ctir !184
  %call = call { i64, i64 } @get_stat_mtime(%struct.stat* %stat) #16, !dbg !7813
  %1 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7813
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !7813
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !7813
  store i64 %3, i64* %2, align 8, !dbg !7813
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !7813
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !7813
  store i64 %5, i64* %4, align 8, !dbg !7813
  %6 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7814
  %stat2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3, !dbg !7815, !ctir !184
  %call3 = call { i64, i64 } @get_stat_mtime(%struct.stat* %stat2) #16, !dbg !7816
  %7 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7816
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !7816
  %9 = extractvalue { i64, i64 } %call3, 0, !dbg !7816
  store i64 %9, i64* %8, align 8, !dbg !7816
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !7816
  %11 = extractvalue { i64, i64 } %call3, 1, !dbg !7816
  store i64 %11, i64* %10, align 8, !dbg !7816
  %12 = bitcast %struct.dev_ino* %agg.tmp to { i64, i64 }*, !dbg !7817
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !7817
  %14 = load i64, i64* %13, align 8, !dbg !7817
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !7817
  %16 = load i64, i64* %15, align 8, !dbg !7817
  %17 = bitcast %struct.dev_ino* %agg.tmp1 to { i64, i64 }*, !dbg !7817
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !7817
  %19 = load i64, i64* %18, align 8, !dbg !7817
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !7817
  %21 = load i64, i64* %20, align 8, !dbg !7817
  %call4 = call i32 @timespec_cmp(i64 %14, i64 %16, i64 %19, i64 %21) #16, !dbg !7817
  store i32 %call4, i32* %diff, align 4, !dbg !7810
  %22 = load i32, i32* %diff, align 4, !dbg !7818
  %tobool = icmp ne i32 %22, 0, !dbg !7818
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7818

cond.true:                                        ; preds = %entry
  %23 = load i32, i32* %diff, align 4, !dbg !7819
  br label %cond.end, !dbg !7818

cond.false:                                       ; preds = %entry
  %24 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7820
  %25 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7821
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %25, i32 0, i32 0, !dbg !7822, !ctir !184
  %26 = load i8*, i8** %name, align 8, !dbg !7822, !ctir !143
  %27 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7823
  %name5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %27, i32 0, i32 0, !dbg !7824, !ctir !184
  %28 = load i8*, i8** %name5, align 8, !dbg !7824, !ctir !143
  %call6 = call i32 %24(i8* %26, i8* %28), !dbg !7820
  br label %cond.end, !dbg !7818

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %23, %cond.true ], [ %call6, %cond.false ], !dbg !7818
  ret i32 %cond, !dbg !7825
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_version(%struct.fileinfo* %a, %struct.fileinfo* %b) #0 !dbg !7826 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7829, metadata !DIExpression()), !dbg !7830
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7831, metadata !DIExpression()), !dbg !7832
  %0 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7833
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 0, !dbg !7834, !ctir !184
  %1 = load i8*, i8** %name, align 8, !dbg !7834, !ctir !143
  %2 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7835
  %name1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 0, !dbg !7836, !ctir !184
  %3 = load i8*, i8** %name1, align 8, !dbg !7836, !ctir !143
  %call = call i32 @filevercmp(i8* %1, i8* %3) #16, !dbg !7837
  ret i32 %call, !dbg !7838
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_size(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7839 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %diff = alloca i32, align 4, !ctir !27
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7840, metadata !DIExpression()), !dbg !7841
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7844, metadata !DIExpression()), !dbg !7845
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7846, metadata !DIExpression()), !dbg !7847
  %0 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7848
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !7848, !ctir !184
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 8, !dbg !7848, !ctir !191
  %1 = load i64, i64* %st_size, align 8, !dbg !7848, !ctir !179
  %2 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7848
  %stat1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 3, !dbg !7848, !ctir !184
  %st_size2 = getelementptr inbounds %struct.stat, %struct.stat* %stat1, i32 0, i32 8, !dbg !7848, !ctir !191
  %3 = load i64, i64* %st_size2, align 8, !dbg !7848, !ctir !179
  %cmp3 = icmp slt i64 %1, %3, !dbg !7848
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !7848

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !7848

cond.false:                                       ; preds = %entry
  %4 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7848
  %stat4 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 3, !dbg !7848, !ctir !184
  %st_size5 = getelementptr inbounds %struct.stat, %struct.stat* %stat4, i32 0, i32 8, !dbg !7848, !ctir !191
  %5 = load i64, i64* %st_size5, align 8, !dbg !7848, !ctir !179
  %6 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7848
  %stat6 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3, !dbg !7848, !ctir !184
  %st_size7 = getelementptr inbounds %struct.stat, %struct.stat* %stat6, i32 0, i32 8, !dbg !7848, !ctir !191
  %7 = load i64, i64* %st_size7, align 8, !dbg !7848, !ctir !179
  %cmp8 = icmp sgt i64 %5, %7, !dbg !7848
  %conv = zext i1 %cmp8 to i32, !dbg !7848
  br label %cond.end, !dbg !7848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ], !dbg !7848
  store i32 %cond, i32* %diff, align 4, !dbg !7847
  %8 = load i32, i32* %diff, align 4, !dbg !7849
  %tobool = icmp ne i32 %8, 0, !dbg !7849
  br i1 %tobool, label %cond.true9, label %cond.false10, !dbg !7849

cond.true9:                                       ; preds = %cond.end
  %9 = load i32, i32* %diff, align 4, !dbg !7850
  br label %cond.end12, !dbg !7849

cond.false10:                                     ; preds = %cond.end
  %10 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7851
  %11 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7852
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %11, i32 0, i32 0, !dbg !7853, !ctir !184
  %12 = load i8*, i8** %name, align 8, !dbg !7853, !ctir !143
  %13 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7854
  %name11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %13, i32 0, i32 0, !dbg !7855, !ctir !184
  %14 = load i8*, i8** %name11, align 8, !dbg !7855, !ctir !143
  %call = call i32 %10(i8* %12, i8* %14), !dbg !7851
  br label %cond.end12, !dbg !7849

cond.end12:                                       ; preds = %cond.false10, %cond.true9
  %cond13 = phi i32 [ %9, %cond.true9 ], [ %call, %cond.false10 ], !dbg !7849
  ret i32 %cond13, !dbg !7856
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_extension(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7857 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %base1 = alloca i8*, align 8, !ctir !146
  %base2 = alloca i8*, align 8, !ctir !146
  %diff = alloca i32, align 4, !ctir !27
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7858, metadata !DIExpression()), !dbg !7859
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7860, metadata !DIExpression()), !dbg !7861
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7862, metadata !DIExpression()), !dbg !7863
  call void @llvm.dbg.declare(metadata i8** %base1, metadata !7864, metadata !DIExpression()), !dbg !7865
  %0 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7866
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 0, !dbg !7867, !ctir !184
  %1 = load i8*, i8** %name, align 8, !dbg !7867, !ctir !143
  %call = call i8* @strrchr(i8* %1, i32 46) #16, !dbg !7868
  store i8* %call, i8** %base1, align 8, !dbg !7865
  call void @llvm.dbg.declare(metadata i8** %base2, metadata !7869, metadata !DIExpression()), !dbg !7870
  %2 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7871
  %name1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %2, i32 0, i32 0, !dbg !7872, !ctir !184
  %3 = load i8*, i8** %name1, align 8, !dbg !7872, !ctir !143
  %call2 = call i8* @strrchr(i8* %3, i32 46) #16, !dbg !7873
  store i8* %call2, i8** %base2, align 8, !dbg !7870
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7874, metadata !DIExpression()), !dbg !7875
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7876
  %5 = load i8*, i8** %base1, align 8, !dbg !7877
  %tobool = icmp ne i8* %5, null, !dbg !7877
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7877

cond.true:                                        ; preds = %entry
  %6 = load i8*, i8** %base1, align 8, !dbg !7878
  br label %cond.end, !dbg !7877

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7877

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %cond.false ], !dbg !7877
  %7 = load i8*, i8** %base2, align 8, !dbg !7879
  %tobool3 = icmp ne i8* %7, null, !dbg !7879
  br i1 %tobool3, label %cond.true4, label %cond.false5, !dbg !7879

cond.true4:                                       ; preds = %cond.end
  %8 = load i8*, i8** %base2, align 8, !dbg !7880
  br label %cond.end6, !dbg !7879

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !7879

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i8* [ %8, %cond.true4 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %cond.false5 ], !dbg !7879
  %call8 = call i32 %4(i8* %cond, i8* %cond7), !dbg !7876
  store i32 %call8, i32* %diff, align 4, !dbg !7875
  %9 = load i32, i32* %diff, align 4, !dbg !7881
  %tobool9 = icmp ne i32 %9, 0, !dbg !7881
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7881

cond.true10:                                      ; preds = %cond.end6
  %10 = load i32, i32* %diff, align 4, !dbg !7882
  br label %cond.end15, !dbg !7881

cond.false11:                                     ; preds = %cond.end6
  %11 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7883
  %12 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7884
  %name12 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 0, !dbg !7885, !ctir !184
  %13 = load i8*, i8** %name12, align 8, !dbg !7885, !ctir !143
  %14 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7886
  %name13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %14, i32 0, i32 0, !dbg !7887, !ctir !184
  %15 = load i8*, i8** %name13, align 8, !dbg !7887, !ctir !143
  %call14 = call i32 %11(i8* %13, i8* %15), !dbg !7883
  br label %cond.end15, !dbg !7881

cond.end15:                                       ; preds = %cond.false11, %cond.true10
  %cond16 = phi i32 [ %10, %cond.true10 ], [ %call14, %cond.false11 ], !dbg !7881
  ret i32 %cond16, !dbg !7888
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_name(%struct.fileinfo* %a, %struct.fileinfo* %b, i32 (i8*, i8*)* %cmp) #0 !dbg !7889 {
entry:
  %a.addr = alloca %struct.fileinfo*, align 8
  %b.addr = alloca %struct.fileinfo*, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  store %struct.fileinfo* %a, %struct.fileinfo** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %a.addr, metadata !7890, metadata !DIExpression()), !dbg !7891
  store %struct.fileinfo* %b, %struct.fileinfo** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %b.addr, metadata !7892, metadata !DIExpression()), !dbg !7893
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !7894, metadata !DIExpression()), !dbg !7895
  %0 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !7896
  %1 = load %struct.fileinfo*, %struct.fileinfo** %a.addr, align 8, !dbg !7897
  %name = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 0, !dbg !7898, !ctir !184
  %2 = load i8*, i8** %name, align 8, !dbg !7898, !ctir !143
  %3 = load %struct.fileinfo*, %struct.fileinfo** %b.addr, align 8, !dbg !7899
  %name1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 0, !dbg !7900, !ctir !184
  %4 = load i8*, i8** %name1, align 8, !dbg !7900, !ctir !143
  %call = call i32 %0(i8* %2, i8* %4), !dbg !7896
  ret i32 %call, !dbg !7901
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @needs_quoting(i8* %name) #0 !dbg !7902 {
entry:
  %name.addr = alloca i8*, align 8
  %test = alloca [2 x i8], align 1, !ctir !261
  %len = alloca i64, align 8, !ctir !149
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7903, metadata !DIExpression()), !dbg !7904
  call void @llvm.dbg.declare(metadata [2 x i8]* %test, metadata !7905, metadata !DIExpression()), !dbg !7906
  call void @llvm.dbg.declare(metadata i64* %len, metadata !7907, metadata !DIExpression()), !dbg !7908
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %test, i64 0, i64 0, !dbg !7909, !ctir !261
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7910
  %1 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8, !dbg !7911
  %call = call i64 @quotearg_buffer(i8* %arraydecay, i64 2, i8* %0, i64 -1, %struct.quoting_options* %1), !dbg !7912
  store i64 %call, i64* %len, align 8, !dbg !7908
  %2 = load i8*, i8** %name.addr, align 8, !dbg !7913
  %3 = load i8, i8* %2, align 1, !dbg !7914, !ctir !147
  %conv = sext i8 %3 to i32, !dbg !7914
  %arraydecay1 = getelementptr inbounds [2 x i8], [2 x i8]* %test, i64 0, i64 0, !dbg !7915, !ctir !261
  %4 = load i8, i8* %arraydecay1, align 1, !dbg !7915, !ctir !144
  %conv2 = sext i8 %4 to i32, !dbg !7915
  %cmp = icmp ne i32 %conv, %conv2, !dbg !7916
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7917

lor.rhs:                                          ; preds = %entry
  %5 = load i8*, i8** %name.addr, align 8, !dbg !7918
  %call4 = call i64 @strlen(i8* %5) #16, !dbg !7919
  %6 = load i64, i64* %len, align 8, !dbg !7920
  %cmp5 = icmp ne i64 %call4, %6, !dbg !7921
  br label %lor.end, !dbg !7917

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  ret i1 %7, !dbg !7922
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @attach(i8* %dest, i8* %dirname, i8* %name) #0 !dbg !7923 {
entry:
  %dest.addr = alloca i8*, align 8
  %dirname.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %dirnamep = alloca i8*, align 8, !ctir !146
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7926, metadata !DIExpression()), !dbg !7927
  store i8* %dirname, i8** %dirname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dirname.addr, metadata !7928, metadata !DIExpression()), !dbg !7929
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7930, metadata !DIExpression()), !dbg !7931
  call void @llvm.dbg.declare(metadata i8** %dirnamep, metadata !7932, metadata !DIExpression()), !dbg !7933
  %0 = load i8*, i8** %dirname.addr, align 8, !dbg !7934
  store i8* %0, i8** %dirnamep, align 8, !dbg !7933
  %1 = load i8*, i8** %dirname.addr, align 8, !dbg !7935
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !7935, !ctir !146
  %2 = load i8, i8* %arrayidx, align 1, !dbg !7935
  %conv = sext i8 %2 to i32, !dbg !7935
  %cmp = icmp ne i32 %conv, 46, !dbg !7937
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7938

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8*, i8** %dirname.addr, align 8, !dbg !7939
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 1, !dbg !7939, !ctir !146
  %4 = load i8, i8* %arrayidx2, align 1, !dbg !7939
  %conv3 = sext i8 %4 to i32, !dbg !7939
  %cmp4 = icmp ne i32 %conv3, 0, !dbg !7940
  br i1 %cmp4, label %if.then, label %if.end15, !dbg !7941

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %while.cond, !dbg !7942

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i8*, i8** %dirnamep, align 8, !dbg !7944
  %6 = load i8, i8* %5, align 1, !dbg !7945, !ctir !147
  %tobool = icmp ne i8 %6, 0, !dbg !7942
  br i1 %tobool, label %while.body, label %while.end, !dbg !7942

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %dirnamep, align 8, !dbg !7946
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !7946, !ctir !147
  store i8* %incdec.ptr, i8** %dirnamep, align 8, !dbg !7946
  %8 = load i8, i8* %7, align 1, !dbg !7947, !ctir !147
  %9 = load i8*, i8** %dest.addr, align 8, !dbg !7948
  %incdec.ptr6 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !7948, !ctir !144
  store i8* %incdec.ptr6, i8** %dest.addr, align 8, !dbg !7948
  store i8 %8, i8* %9, align 1, !dbg !7949, !ctir !144
  br label %while.cond, !dbg !7942, !llvm.loop !7950

while.end:                                        ; preds = %while.cond
  %10 = load i8*, i8** %dirnamep, align 8, !dbg !7951
  %11 = load i8*, i8** %dirname.addr, align 8, !dbg !7953
  %cmp7 = icmp ugt i8* %10, %11, !dbg !7954
  br i1 %cmp7, label %land.lhs.true, label %if.end, !dbg !7955

land.lhs.true:                                    ; preds = %while.end
  %12 = load i8*, i8** %dirnamep, align 8, !dbg !7956
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 -1, !dbg !7956, !ctir !146
  %13 = load i8, i8* %arrayidx9, align 1, !dbg !7956
  %conv10 = sext i8 %13 to i32, !dbg !7956
  %cmp11 = icmp ne i32 %conv10, 47, !dbg !7957
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !7958

if.then13:                                        ; preds = %land.lhs.true
  %14 = load i8*, i8** %dest.addr, align 8, !dbg !7959
  %incdec.ptr14 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !7959, !ctir !144
  store i8* %incdec.ptr14, i8** %dest.addr, align 8, !dbg !7959
  store i8 47, i8* %14, align 1, !dbg !7960, !ctir !144
  br label %if.end, !dbg !7961

if.end:                                           ; preds = %if.then13, %land.lhs.true, %while.end
  br label %if.end15, !dbg !7962

if.end15:                                         ; preds = %if.end, %lor.lhs.false
  br label %while.cond16, !dbg !7963

while.cond16:                                     ; preds = %while.body18, %if.end15
  %15 = load i8*, i8** %name.addr, align 8, !dbg !7964
  %16 = load i8, i8* %15, align 1, !dbg !7965, !ctir !147
  %tobool17 = icmp ne i8 %16, 0, !dbg !7963
  br i1 %tobool17, label %while.body18, label %while.end21, !dbg !7963

while.body18:                                     ; preds = %while.cond16
  %17 = load i8*, i8** %name.addr, align 8, !dbg !7966
  %incdec.ptr19 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !7966, !ctir !147
  store i8* %incdec.ptr19, i8** %name.addr, align 8, !dbg !7966
  %18 = load i8, i8* %17, align 1, !dbg !7967, !ctir !147
  %19 = load i8*, i8** %dest.addr, align 8, !dbg !7968
  %incdec.ptr20 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !7968, !ctir !144
  store i8* %incdec.ptr20, i8** %dest.addr, align 8, !dbg !7968
  store i8 %18, i8* %19, align 1, !dbg !7969, !ctir !144
  br label %while.cond16, !dbg !7963, !llvm.loop !7970

while.end21:                                      ; preds = %while.cond16
  %20 = load i8*, i8** %dest.addr, align 8, !dbg !7971
  store i8 0, i8* %20, align 1, !dbg !7972, !ctir !144
  ret void, !dbg !7973
}

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @has_capability_cache(i8* %file, %struct.fileinfo* %f) #0 !dbg !1052 {
entry:
  %retval = alloca i1, align 1
  %file.addr = alloca i8*, align 8
  %f.addr = alloca %struct.fileinfo*, align 8
  %b = alloca i8, align 1, !ctir !141
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !7974, metadata !DIExpression()), !dbg !7975
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !7976, metadata !DIExpression()), !dbg !7977
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7978
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !7980, !ctir !185
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 0, !dbg !7981, !ctir !191
  %1 = load i64, i64* %st_dev, align 8, !dbg !7981, !ctir !195
  %2 = load i64, i64* @has_capability_cache.unsupported_device, align 8, !dbg !7982
  %cmp = icmp eq i64 %1, %2, !dbg !7983
  br i1 %cmp, label %if.then, label %if.end, !dbg !7984

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #17, !dbg !7985
  store i32 95, i32* %call, align 4, !dbg !7987, !ctir !27
  store i1 false, i1* %retval, align 1, !dbg !7988
  br label %return, !dbg !7988

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %b, metadata !7989, metadata !DIExpression()), !dbg !7990
  %3 = load i8*, i8** %file.addr, align 8, !dbg !7991
  %call1 = call zeroext i1 @has_capability(i8* %3), !dbg !7992
  %frombool = zext i1 %call1 to i8, !dbg !7990
  store i8 %frombool, i8* %b, align 1, !dbg !7990
  %4 = load i8, i8* %b, align 1, !dbg !7993
  %tobool = trunc i8 %4 to i1, !dbg !7993
  br i1 %tobool, label %if.end7, label %land.lhs.true, !dbg !7995

land.lhs.true:                                    ; preds = %if.end
  %call2 = call i32* @__errno_location() #17, !dbg !7996
  %5 = load i32, i32* %call2, align 4, !dbg !7996, !ctir !27
  %call3 = call zeroext i1 @errno_unsupported(i32 %5), !dbg !7997
  br i1 %call3, label %if.then4, label %if.end7, !dbg !7998

if.then4:                                         ; preds = %land.lhs.true
  %6 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !7999
  %stat5 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 3, !dbg !8000, !ctir !185
  %st_dev6 = getelementptr inbounds %struct.stat, %struct.stat* %stat5, i32 0, i32 0, !dbg !8001, !ctir !191
  %7 = load i64, i64* %st_dev6, align 8, !dbg !8001, !ctir !195
  store i64 %7, i64* @has_capability_cache.unsupported_device, align 8, !dbg !8002
  br label %if.end7, !dbg !8003

if.end7:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %8 = load i8, i8* %b, align 1, !dbg !8004
  %tobool8 = trunc i8 %8 to i1, !dbg !8004
  store i1 %tobool8, i1* %retval, align 1, !dbg !8005
  br label %return, !dbg !8005

return:                                           ; preds = %if.end7, %if.then
  %9 = load i1, i1* %retval, align 1, !dbg !8006
  ret i1 %9, !dbg !8006
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getfilecon_cache(i8* %file, %struct.fileinfo* %f, i1 zeroext %deref) #0 !dbg !1057 {
entry:
  %retval = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %f.addr = alloca %struct.fileinfo*, align 8
  %deref.addr = alloca i8, align 1
  %r = alloca i32, align 4, !ctir !27
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !8007, metadata !DIExpression()), !dbg !8008
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !8009, metadata !DIExpression()), !dbg !8010
  %frombool = zext i1 %deref to i8
  store i8 %frombool, i8* %deref.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %deref.addr, metadata !8011, metadata !DIExpression()), !dbg !8012
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8013
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !8015, !ctir !185
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 0, !dbg !8016, !ctir !191
  %1 = load i64, i64* %st_dev, align 8, !dbg !8016, !ctir !195
  %2 = load i64, i64* @getfilecon_cache.unsupported_device, align 8, !dbg !8017
  %cmp = icmp eq i64 %1, %2, !dbg !8018
  br i1 %cmp, label %if.then, label %if.end, !dbg !8019

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #17, !dbg !8020
  store i32 95, i32* %call, align 4, !dbg !8022, !ctir !27
  store i32 -1, i32* %retval, align 4, !dbg !8023
  br label %return, !dbg !8023

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %r, metadata !8024, metadata !DIExpression()), !dbg !8025
  store i32 0, i32* %r, align 4, !dbg !8025
  %3 = load i8, i8* %deref.addr, align 1, !dbg !8026
  %tobool = trunc i8 %3 to i1, !dbg !8026
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8026

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %file.addr, align 8, !dbg !8027
  %5 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8028
  %scontext = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 6, !dbg !8029, !ctir !185
  %call1 = call i32 @getfilecon(i8* %4, i8** %scontext), !dbg !8030
  br label %cond.end, !dbg !8026

cond.false:                                       ; preds = %if.end
  %6 = load i8*, i8** %file.addr, align 8, !dbg !8031
  %7 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8032
  %scontext2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 6, !dbg !8033, !ctir !185
  %call3 = call i32 @lgetfilecon(i8* %6, i8** %scontext2), !dbg !8034
  br label %cond.end, !dbg !8026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call1, %cond.true ], [ %call3, %cond.false ], !dbg !8026
  store i32 %cond, i32* %r, align 4, !dbg !8035
  %8 = load i32, i32* %r, align 4, !dbg !8036
  %cmp4 = icmp slt i32 %8, 0, !dbg !8038
  br i1 %cmp4, label %land.lhs.true, label %if.end10, !dbg !8039

land.lhs.true:                                    ; preds = %cond.end
  %call5 = call i32* @__errno_location() #17, !dbg !8040
  %9 = load i32, i32* %call5, align 4, !dbg !8040, !ctir !27
  %call6 = call zeroext i1 @errno_unsupported(i32 %9), !dbg !8041
  br i1 %call6, label %if.then7, label %if.end10, !dbg !8042

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8043
  %stat8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3, !dbg !8044, !ctir !185
  %st_dev9 = getelementptr inbounds %struct.stat, %struct.stat* %stat8, i32 0, i32 0, !dbg !8045, !ctir !191
  %11 = load i64, i64* %st_dev9, align 8, !dbg !8045, !ctir !195
  store i64 %11, i64* @getfilecon_cache.unsupported_device, align 8, !dbg !8046
  br label %if.end10, !dbg !8047

if.end10:                                         ; preds = %if.then7, %land.lhs.true, %cond.end
  %12 = load i32, i32* %r, align 4, !dbg !8048
  store i32 %12, i32* %retval, align 4, !dbg !8049
  br label %return, !dbg !8049

return:                                           ; preds = %if.end10, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !8050
  ret i32 %13, !dbg !8050
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_ENOTSUP(i32 %err) #0 !dbg !8051 {
entry:
  %err.addr = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !8054, metadata !DIExpression()), !dbg !8055
  %0 = load i32, i32* %err.addr, align 4, !dbg !8056
  %cmp = icmp eq i32 %0, 95, !dbg !8057
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !8058

lor.rhs:                                          ; preds = %entry
  br label %lor.end, !dbg !8058

lor.end:                                          ; preds = %lor.rhs, %entry
  %1 = phi i1 [ true, %entry ], [ false, %lor.rhs ]
  ret i1 %1, !dbg !8059
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @file_has_acl_cache(i8* %file, %struct.fileinfo* %f) #0 !dbg !1062 {
entry:
  %retval = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %f.addr = alloca %struct.fileinfo*, align 8
  %n = alloca i32, align 4, !ctir !27
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  %0 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8064
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %0, i32 0, i32 3, !dbg !8066, !ctir !185
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 0, !dbg !8067, !ctir !191
  %1 = load i64, i64* %st_dev, align 8, !dbg !8067, !ctir !195
  %2 = load i64, i64* @file_has_acl_cache.unsupported_device, align 8, !dbg !8068
  %cmp = icmp eq i64 %1, %2, !dbg !8069
  br i1 %cmp, label %if.then, label %if.end, !dbg !8070

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #17, !dbg !8071
  store i32 95, i32* %call, align 4, !dbg !8073, !ctir !27
  store i32 0, i32* %retval, align 4, !dbg !8074
  br label %return, !dbg !8074

if.end:                                           ; preds = %entry
  %call1 = call i32* @__errno_location() #17, !dbg !8075
  store i32 0, i32* %call1, align 4, !dbg !8076, !ctir !27
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8077, metadata !DIExpression()), !dbg !8078
  %3 = load i8*, i8** %file.addr, align 8, !dbg !8079
  %4 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8080
  %stat2 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 3, !dbg !8081, !ctir !185
  %call3 = call i32 @file_has_acl(i8* %3, %struct.stat* %stat2), !dbg !8082
  store i32 %call3, i32* %n, align 4, !dbg !8078
  %5 = load i32, i32* %n, align 4, !dbg !8083
  %cmp4 = icmp sle i32 %5, 0, !dbg !8085
  br i1 %cmp4, label %land.lhs.true, label %if.end10, !dbg !8086

land.lhs.true:                                    ; preds = %if.end
  %call5 = call i32* @__errno_location() #17, !dbg !8087
  %6 = load i32, i32* %call5, align 4, !dbg !8087, !ctir !27
  %call6 = call zeroext i1 @errno_unsupported(i32 %6), !dbg !8088
  br i1 %call6, label %if.then7, label %if.end10, !dbg !8089

if.then7:                                         ; preds = %land.lhs.true
  %7 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8090
  %stat8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 3, !dbg !8091, !ctir !185
  %st_dev9 = getelementptr inbounds %struct.stat, %struct.stat* %stat8, i32 0, i32 0, !dbg !8092, !ctir !191
  %8 = load i64, i64* %st_dev9, align 8, !dbg !8092, !ctir !195
  store i64 %8, i64* @file_has_acl_cache.unsupported_device, align 8, !dbg !8093
  br label %if.end10, !dbg !8094

if.end10:                                         ; preds = %if.then7, %land.lhs.true, %if.end
  %9 = load i32, i32* %n, align 4, !dbg !8095
  store i32 %9, i32* %retval, align 4, !dbg !8096
  br label %return, !dbg !8096

return:                                           ; preds = %if.end10, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !8097
  ret i32 %10, !dbg !8097
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @get_link_name(i8* %filename, %struct.fileinfo* %f, i1 zeroext %command_line_arg) #0 !dbg !8098 {
entry:
  %filename.addr = alloca i8*, align 8
  %f.addr = alloca %struct.fileinfo*, align 8
  %command_line_arg.addr = alloca i8, align 1
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !8101, metadata !DIExpression()), !dbg !8102
  store %struct.fileinfo* %f, %struct.fileinfo** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fileinfo** %f.addr, metadata !8103, metadata !DIExpression()), !dbg !8104
  %frombool = zext i1 %command_line_arg to i8
  store i8 %frombool, i8* %command_line_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %command_line_arg.addr, metadata !8105, metadata !DIExpression()), !dbg !8106
  %0 = load i8*, i8** %filename.addr, align 8, !dbg !8107
  %1 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8108
  %stat = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %1, i32 0, i32 3, !dbg !8109, !ctir !185
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %stat, i32 0, i32 8, !dbg !8110, !ctir !191
  %2 = load i64, i64* %st_size, align 8, !dbg !8110, !ctir !179
  %call = call i8* @areadlink_with_size(i8* %0, i64 %2), !dbg !8111
  %3 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8112
  %linkname = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 1, !dbg !8113, !ctir !185
  store i8* %call, i8** %linkname, align 8, !dbg !8114, !ctir !143
  %4 = load %struct.fileinfo*, %struct.fileinfo** %f.addr, align 8, !dbg !8115
  %linkname1 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %4, i32 0, i32 1, !dbg !8117, !ctir !185
  %5 = load i8*, i8** %linkname1, align 8, !dbg !8117, !ctir !143
  %cmp = icmp eq i8* %5, null, !dbg !8118
  br i1 %cmp, label %if.then, label %if.end, !dbg !8119

if.then:                                          ; preds = %entry
  %6 = load i8, i8* %command_line_arg.addr, align 1, !dbg !8120
  %tobool = trunc i8 %6 to i1, !dbg !8120
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.220, i64 0, i64 0)) #13, !dbg !8121
  %7 = load i8*, i8** %filename.addr, align 8, !dbg !8122
  call void @file_failure(i1 zeroext %tobool, i8* %call2, i8* %7), !dbg !8123
  br label %if.end, !dbg !8123

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8124
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @make_link_name(i8* %name, i8* %linkname) #0 !dbg !8125 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %linkname.addr = alloca i8*, align 8
  %prefix_len = alloca i64, align 8, !ctir !149
  %p = alloca i8*, align 8, !ctir !143
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8128, metadata !DIExpression()), !dbg !8129
  store i8* %linkname, i8** %linkname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %linkname.addr, metadata !8130, metadata !DIExpression()), !dbg !8131
  %0 = load i8*, i8** %linkname.addr, align 8, !dbg !8132
  %tobool = icmp ne i8* %0, null, !dbg !8132
  br i1 %tobool, label %if.end, label %if.then, !dbg !8134

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !8135
  br label %return, !dbg !8135

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %linkname.addr, align 8, !dbg !8136
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !8136, !ctir !146
  %2 = load i8, i8* %arrayidx, align 1, !dbg !8136
  %conv = sext i8 %2 to i32, !dbg !8136
  %cmp = icmp eq i32 %conv, 47, !dbg !8136
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !8138

if.then2:                                         ; preds = %if.end
  %3 = load i8*, i8** %linkname.addr, align 8, !dbg !8139
  %call = call noalias i8* @xstrdup(i8* %3), !dbg !8140
  store i8* %call, i8** %retval, align 8, !dbg !8141
  br label %return, !dbg !8141

if.end3:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %prefix_len, metadata !8142, metadata !DIExpression()), !dbg !8143
  %4 = load i8*, i8** %name.addr, align 8, !dbg !8144
  %call4 = call i64 @dir_len(i8* %4) #16, !dbg !8145
  store i64 %call4, i64* %prefix_len, align 8, !dbg !8143
  %5 = load i64, i64* %prefix_len, align 8, !dbg !8146
  %cmp5 = icmp eq i64 %5, 0, !dbg !8148
  br i1 %cmp5, label %if.then7, label %if.end9, !dbg !8149

if.then7:                                         ; preds = %if.end3
  %6 = load i8*, i8** %linkname.addr, align 8, !dbg !8150
  %call8 = call noalias i8* @xstrdup(i8* %6), !dbg !8151
  store i8* %call8, i8** %retval, align 8, !dbg !8152
  br label %return, !dbg !8152

if.end9:                                          ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8153, metadata !DIExpression()), !dbg !8154
  %7 = load i64, i64* %prefix_len, align 8, !dbg !8155
  %add = add i64 %7, 1, !dbg !8156
  %8 = load i8*, i8** %linkname.addr, align 8, !dbg !8157
  %call10 = call i64 @strlen(i8* %8) #16, !dbg !8158
  %add11 = add i64 %add, %call10, !dbg !8159
  %add12 = add i64 %add11, 1, !dbg !8160
  %call13 = call noalias i8* @xmalloc(i64 %add12), !dbg !8161
  store i8* %call13, i8** %p, align 8, !dbg !8154
  %9 = load i8*, i8** %name.addr, align 8, !dbg !8162
  %10 = load i64, i64* %prefix_len, align 8, !dbg !8162
  %sub = sub i64 %10, 1, !dbg !8162
  %arrayidx14 = getelementptr inbounds i8, i8* %9, i64 %sub, !dbg !8162, !ctir !146
  %11 = load i8, i8* %arrayidx14, align 1, !dbg !8162
  %conv15 = sext i8 %11 to i32, !dbg !8162
  %cmp16 = icmp eq i32 %conv15, 47, !dbg !8162
  br i1 %cmp16, label %if.end19, label %if.then18, !dbg !8164

if.then18:                                        ; preds = %if.end9
  %12 = load i64, i64* %prefix_len, align 8, !dbg !8165
  %inc = add i64 %12, 1, !dbg !8165
  store i64 %inc, i64* %prefix_len, align 8, !dbg !8165
  br label %if.end19, !dbg !8165

if.end19:                                         ; preds = %if.then18, %if.end9
  %13 = load i8*, i8** %p, align 8, !dbg !8166
  %14 = load i8*, i8** %name.addr, align 8, !dbg !8167
  %15 = load i64, i64* %prefix_len, align 8, !dbg !8168
  %call20 = call i8* @stpncpy(i8* %13, i8* %14, i64 %15) #13, !dbg !8169
  %16 = load i8*, i8** %linkname.addr, align 8, !dbg !8170
  %call21 = call i8* @stpcpy(i8* %call20, i8* %16) #13, !dbg !8171
  %17 = load i8*, i8** %p, align 8, !dbg !8172
  store i8* %17, i8** %retval, align 8, !dbg !8173
  br label %return, !dbg !8173

return:                                           ; preds = %if.end19, %if.then7, %if.then2, %if.then
  %18 = load i8*, i8** %retval, align 8, !dbg !8174
  ret i8* %18, !dbg !8174
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_user_width(i32 %u) #0 !dbg !8175 {
entry:
  %u.addr = alloca i32, align 4
  store i32 %u, i32* %u.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %u.addr, metadata !8178, metadata !DIExpression()), !dbg !8179
  %0 = load i8, i8* @numeric_ids, align 1, !dbg !8180
  %tobool = trunc i8 %0 to i1, !dbg !8180
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8180

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !8180

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %u.addr, align 4, !dbg !8181
  %call = call i8* @getuser(i32 %1), !dbg !8182
  br label %cond.end, !dbg !8180

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call, %cond.false ], !dbg !8180
  %2 = load i32, i32* %u.addr, align 4, !dbg !8183
  %conv = zext i32 %2 to i64, !dbg !8183
  %call1 = call i32 @format_user_or_group_width(i8* %cond, i64 %conv), !dbg !8184
  ret i32 %call1, !dbg !8185
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_group_width(i32 %g) #0 !dbg !8186 {
entry:
  %g.addr = alloca i32, align 4
  store i32 %g, i32* %g.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %g.addr, metadata !8189, metadata !DIExpression()), !dbg !8190
  %0 = load i8, i8* @numeric_ids, align 1, !dbg !8191
  %tobool = trunc i8 %0 to i1, !dbg !8191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8191

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !8191

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %g.addr, align 4, !dbg !8192
  %call = call i8* @getgroup(i32 %1), !dbg !8193
  br label %cond.end, !dbg !8191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call, %cond.false ], !dbg !8191
  %2 = load i32, i32* %g.addr, align 4, !dbg !8194
  %conv = zext i32 %2 to i64, !dbg !8194
  %call1 = call i32 @format_user_or_group_width(i8* %cond, i64 %conv), !dbg !8195
  ret i32 %call1, !dbg !8196
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_user_or_group_width(i8* %name, i64 %id) #0 !dbg !8197 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %id.addr = alloca i64, align 8
  %len = alloca i32, align 4, !ctir !27
  %buf = alloca [21 x i8], align 16, !ctir !743
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8200, metadata !DIExpression()), !dbg !8201
  store i64 %id, i64* %id.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %id.addr, metadata !8202, metadata !DIExpression()), !dbg !8203
  %0 = load i8*, i8** %name.addr, align 8, !dbg !8204
  %tobool = icmp ne i8* %0, null, !dbg !8204
  br i1 %tobool, label %if.then, label %if.else, !dbg !8206

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8207, metadata !DIExpression()), !dbg !8209
  %1 = load i8*, i8** %name.addr, align 8, !dbg !8210
  %call = call i32 @gnu_mbswidth(i8* %1, i32 0), !dbg !8211
  store i32 %call, i32* %len, align 4, !dbg !8209
  %2 = load i32, i32* %len, align 4, !dbg !8212
  %cmp = icmp sgt i32 0, %2, !dbg !8212
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8212

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !8212

cond.false:                                       ; preds = %if.then
  %3 = load i32, i32* %len, align 4, !dbg !8212
  br label %cond.end, !dbg !8212

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %3, %cond.false ], !dbg !8212
  store i32 %cond, i32* %retval, align 4, !dbg !8213
  br label %return, !dbg !8213

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [21 x i8]* %buf, metadata !8214, metadata !DIExpression()), !dbg !8216
  %arraydecay = getelementptr inbounds [21 x i8], [21 x i8]* %buf, i64 0, i64 0, !dbg !8217, !ctir !743
  %4 = load i64, i64* %id.addr, align 8, !dbg !8218
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.221, i64 0, i64 0), i64 %4) #13, !dbg !8219
  %arraydecay2 = getelementptr inbounds [21 x i8], [21 x i8]* %buf, i64 0, i64 0, !dbg !8220, !ctir !743
  %call3 = call i64 @strlen(i8* %arraydecay2) #16, !dbg !8221
  %conv = trunc i64 %call3 to i32, !dbg !8221
  store i32 %conv, i32* %retval, align 4, !dbg !8222
  br label %return, !dbg !8222

return:                                           ; preds = %if.else, %cond.end
  %5 = load i32, i32* %retval, align 4, !dbg !8223
  ret i32 %5, !dbg !8223
}

; Function Attrs: nounwind
declare dso_local i8* @stpncpy(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @errno_unsupported(i32 %err) #0 !dbg !8224 {
entry:
  %err.addr = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !8225, metadata !DIExpression()), !dbg !8226
  %0 = load i32, i32* %err.addr, align 4, !dbg !8227
  %cmp = icmp eq i32 %0, 22, !dbg !8228
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !8229

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %err.addr, align 4, !dbg !8230
  %cmp1 = icmp eq i32 %1, 38, !dbg !8231
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !8232

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load i32, i32* %err.addr, align 4, !dbg !8233
  %call = call zeroext i1 @is_ENOTSUP(i32 %2), !dbg !8234
  br label %lor.end, !dbg !8232

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %3 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %call, %lor.rhs ]
  ret i1 %3, !dbg !8235
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @has_capability(i8* %name) #0 !dbg !8236 {
entry:
  %retval = alloca i1, align 1
  %name.addr = alloca i8*, align 8
  %result = alloca i8*, align 8, !ctir !143
  %has_cap = alloca i8, align 1, !ctir !141
  %cap_d = alloca %struct._cap_struct*, align 8, !ctir !772
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8237, metadata !DIExpression()), !dbg !8238
  call void @llvm.dbg.declare(metadata i8** %result, metadata !8239, metadata !DIExpression()), !dbg !8240
  call void @llvm.dbg.declare(metadata i8* %has_cap, metadata !8241, metadata !DIExpression()), !dbg !8242
  call void @llvm.dbg.declare(metadata %struct._cap_struct** %cap_d, metadata !8243, metadata !DIExpression()), !dbg !8244
  %0 = load i8*, i8** %name.addr, align 8, !dbg !8245
  %call = call %struct._cap_struct* @cap_get_file(i8* %0), !dbg !8246
  store %struct._cap_struct* %call, %struct._cap_struct** %cap_d, align 8, !dbg !8244
  %1 = load %struct._cap_struct*, %struct._cap_struct** %cap_d, align 8, !dbg !8247
  %cmp = icmp eq %struct._cap_struct* %1, null, !dbg !8249
  br i1 %cmp, label %if.then, label %if.end, !dbg !8250

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !8251
  br label %return, !dbg !8251

if.end:                                           ; preds = %entry
  %2 = load %struct._cap_struct*, %struct._cap_struct** %cap_d, align 8, !dbg !8252
  %call1 = call i8* @cap_to_text(%struct._cap_struct* %2, i64* null), !dbg !8253
  store i8* %call1, i8** %result, align 8, !dbg !8254
  %3 = load %struct._cap_struct*, %struct._cap_struct** %cap_d, align 8, !dbg !8255
  %4 = bitcast %struct._cap_struct* %3 to i8*, !dbg !8255
  %call2 = call i32 @cap_free(i8* %4), !dbg !8256
  %5 = load i8*, i8** %result, align 8, !dbg !8257
  %tobool = icmp ne i8* %5, null, !dbg !8257
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !8259

if.then3:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1, !dbg !8260
  br label %return, !dbg !8260

if.end4:                                          ; preds = %if.end
  %6 = load i8*, i8** %result, align 8, !dbg !8261
  %7 = load i8, i8* %6, align 1, !dbg !8262, !ctir !144
  %tobool5 = icmp ne i8 %7, 0, !dbg !8263
  %lnot = xor i1 %tobool5, true, !dbg !8263
  %lnot6 = xor i1 %lnot, true, !dbg !8264
  %frombool = zext i1 %lnot6 to i8, !dbg !8265
  store i8 %frombool, i8* %has_cap, align 1, !dbg !8265
  %8 = load i8*, i8** %result, align 8, !dbg !8266
  %call7 = call i32 @cap_free(i8* %8), !dbg !8267
  %9 = load i8, i8* %has_cap, align 1, !dbg !8268
  %tobool8 = trunc i8 %9 to i1, !dbg !8268
  store i1 %tobool8, i1* %retval, align 1, !dbg !8269
  br label %return, !dbg !8269

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %10 = load i1, i1* %retval, align 1, !dbg !8270
  ret i1 %10, !dbg !8270
}

declare dso_local %struct._cap_struct* @cap_get_file(i8*) #3

declare dso_local i8* @cap_to_text(%struct._cap_struct*, i64*) #3

declare dso_local i32 @cap_free(i8*) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @known_term_type() #0 !dbg !8271 {
entry:
  %retval = alloca i1, align 1
  %term = alloca i8*, align 8, !ctir !146
  %line = alloca i8*, align 8, !ctir !146
  call void @llvm.dbg.declare(metadata i8** %term, metadata !8272, metadata !DIExpression()), !dbg !8273
  %call = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.178, i64 0, i64 0)) #13, !dbg !8274
  store i8* %call, i8** %term, align 8, !dbg !8273
  %0 = load i8*, i8** %term, align 8, !dbg !8275
  %tobool = icmp ne i8* %0, null, !dbg !8275
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8277

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %term, align 8, !dbg !8278
  %2 = load i8, i8* %1, align 1, !dbg !8279, !ctir !147
  %tobool1 = icmp ne i8 %2, 0, !dbg !8279
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8280

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i1 false, i1* %retval, align 1, !dbg !8281
  br label %return, !dbg !8281

if.end:                                           ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %line, metadata !8282, metadata !DIExpression()), !dbg !8283
  store i8* getelementptr inbounds ([4292 x i8], [4292 x i8]* @G_line, i64 0, i64 0), i8** %line, align 8, !dbg !8283
  br label %while.cond, !dbg !8284

while.cond:                                       ; preds = %if.end9, %if.end
  %3 = load i8*, i8** %line, align 8, !dbg !8285
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !8286
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([4292 x i8]* @G_line to i64), !dbg !8286
  %cmp = icmp ult i64 %sub.ptr.sub, 4292, !dbg !8287
  br i1 %cmp, label %while.body, label %while.end, !dbg !8284

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %line, align 8, !dbg !8288
  %call2 = call i32 @strncmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i64 0, i64 0), i64 5) #16, !dbg !8288
  %cmp3 = icmp eq i32 %call2, 0, !dbg !8291
  br i1 %cmp3, label %if.then4, label %if.end9, !dbg !8292

if.then4:                                         ; preds = %while.body
  %5 = load i8*, i8** %line, align 8, !dbg !8293
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 5, !dbg !8296, !ctir !147
  %6 = load i8*, i8** %term, align 8, !dbg !8297
  %call5 = call i32 @fnmatch(i8* %add.ptr, i8* %6, i32 0), !dbg !8298
  %cmp6 = icmp eq i32 %call5, 0, !dbg !8299
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !8300

if.then7:                                         ; preds = %if.then4
  store i1 true, i1* %retval, align 1, !dbg !8301
  br label %return, !dbg !8301

if.end8:                                          ; preds = %if.then4
  br label %if.end9, !dbg !8302

if.end9:                                          ; preds = %if.end8, %while.body
  %7 = load i8*, i8** %line, align 8, !dbg !8303
  %call10 = call i64 @strlen(i8* %7) #16, !dbg !8304
  %add = add i64 %call10, 1, !dbg !8305
  %8 = load i8*, i8** %line, align 8, !dbg !8306
  %add.ptr11 = getelementptr inbounds i8, i8* %8, i64 %add, !dbg !8306, !ctir !147
  store i8* %add.ptr11, i8** %line, align 8, !dbg !8306
  br label %while.cond, !dbg !8284, !llvm.loop !8307

while.end:                                        ; preds = %while.cond
  store i1 false, i1* %retval, align 1, !dbg !8309
  br label %return, !dbg !8309

return:                                           ; preds = %while.end, %if.then7, %if.then
  %9 = load i1, i1* %retval, align 1, !dbg !8310
  ret i1 %9, !dbg !8310
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @get_funky_string(i8** %dest, i8** %src, i1 zeroext %equals_end, i64* %output_count) #0 !dbg !138 {
entry:
  %dest.addr = alloca i8**, align 8
  %src.addr = alloca i8**, align 8
  %equals_end.addr = alloca i8, align 1
  %output_count.addr = alloca i64*, align 8
  %num = alloca i8, align 1, !ctir !144
  %count = alloca i64, align 8, !ctir !149
  %state = alloca i32, align 4, !ctir !137
  %p = alloca i8*, align 8, !ctir !146
  %q = alloca i8*, align 8, !ctir !143
  store i8** %dest, i8*** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %dest.addr, metadata !8311, metadata !DIExpression()), !dbg !8312
  store i8** %src, i8*** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %src.addr, metadata !8313, metadata !DIExpression()), !dbg !8314
  %frombool = zext i1 %equals_end to i8
  store i8 %frombool, i8* %equals_end.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %equals_end.addr, metadata !8315, metadata !DIExpression()), !dbg !8316
  store i64* %output_count, i64** %output_count.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %output_count.addr, metadata !8317, metadata !DIExpression()), !dbg !8318
  call void @llvm.dbg.declare(metadata i8* %num, metadata !8319, metadata !DIExpression()), !dbg !8320
  call void @llvm.dbg.declare(metadata i64* %count, metadata !8321, metadata !DIExpression()), !dbg !8322
  call void @llvm.dbg.declare(metadata i32* %state, metadata !8323, metadata !DIExpression()), !dbg !8324
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8325, metadata !DIExpression()), !dbg !8326
  call void @llvm.dbg.declare(metadata i8** %q, metadata !8327, metadata !DIExpression()), !dbg !8328
  %0 = load i8**, i8*** %src.addr, align 8, !dbg !8329
  %1 = load i8*, i8** %0, align 8, !dbg !8330, !ctir !146
  store i8* %1, i8** %p, align 8, !dbg !8331
  %2 = load i8**, i8*** %dest.addr, align 8, !dbg !8332
  %3 = load i8*, i8** %2, align 8, !dbg !8333, !ctir !143
  store i8* %3, i8** %q, align 8, !dbg !8334
  store i64 0, i64* %count, align 8, !dbg !8335
  store i8 0, i8* %num, align 1, !dbg !8336
  store i32 0, i32* %state, align 4, !dbg !8337
  br label %while.cond, !dbg !8338

while.cond:                                       ; preds = %sw.epilog106, %entry
  %4 = load i32, i32* %state, align 4, !dbg !8339
  %cmp = icmp ult i32 %4, 5, !dbg !8340
  br i1 %cmp, label %while.body, label %while.end, !dbg !8338

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %state, align 4, !dbg !8341
  switch i32 %5, label %sw.default105 [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb34
    i32 3, label %sw.bb50
    i32 4, label %sw.bb82
  ], !dbg !8343

sw.bb:                                            ; preds = %while.body
  %6 = load i8*, i8** %p, align 8, !dbg !8344
  %7 = load i8, i8* %6, align 1, !dbg !8346, !ctir !147
  %conv = sext i8 %7 to i32, !dbg !8346
  switch i32 %conv, label %sw.default [
    i32 58, label %sw.bb1
    i32 0, label %sw.bb1
    i32 92, label %sw.bb2
    i32 94, label %sw.bb3
    i32 61, label %sw.bb5
  ], !dbg !8347

sw.bb1:                                           ; preds = %sw.bb, %sw.bb
  store i32 5, i32* %state, align 4, !dbg !8348
  br label %sw.epilog, !dbg !8350

sw.bb2:                                           ; preds = %sw.bb
  store i32 1, i32* %state, align 4, !dbg !8351
  %8 = load i8*, i8** %p, align 8, !dbg !8352
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !8352, !ctir !147
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !8352
  br label %sw.epilog, !dbg !8353

sw.bb3:                                           ; preds = %sw.bb
  store i32 4, i32* %state, align 4, !dbg !8354
  %9 = load i8*, i8** %p, align 8, !dbg !8355
  %incdec.ptr4 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !8355, !ctir !147
  store i8* %incdec.ptr4, i8** %p, align 8, !dbg !8355
  br label %sw.epilog, !dbg !8356

sw.bb5:                                           ; preds = %sw.bb
  %10 = load i8, i8* %equals_end.addr, align 1, !dbg !8357
  %tobool = trunc i8 %10 to i1, !dbg !8357
  br i1 %tobool, label %if.then, label %if.end, !dbg !8359

if.then:                                          ; preds = %sw.bb5
  store i32 5, i32* %state, align 4, !dbg !8360
  br label %sw.epilog, !dbg !8362

if.end:                                           ; preds = %sw.bb5
  br label %sw.default, !dbg !8363

sw.default:                                       ; preds = %sw.bb, %if.end
  %11 = load i8*, i8** %p, align 8, !dbg !8364
  %incdec.ptr6 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !8364, !ctir !147
  store i8* %incdec.ptr6, i8** %p, align 8, !dbg !8364
  %12 = load i8, i8* %11, align 1, !dbg !8365, !ctir !147
  %13 = load i8*, i8** %q, align 8, !dbg !8366
  %incdec.ptr7 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !8366, !ctir !144
  store i8* %incdec.ptr7, i8** %q, align 8, !dbg !8366
  store i8 %12, i8* %13, align 1, !dbg !8367, !ctir !144
  %14 = load i64, i64* %count, align 8, !dbg !8368
  %inc = add i64 %14, 1, !dbg !8368
  store i64 %inc, i64* %count, align 8, !dbg !8368
  br label %sw.epilog, !dbg !8369

sw.epilog:                                        ; preds = %sw.default, %if.then, %sw.bb3, %sw.bb2, %sw.bb1
  br label %sw.epilog106, !dbg !8370

sw.bb8:                                           ; preds = %while.body
  %15 = load i8*, i8** %p, align 8, !dbg !8371
  %16 = load i8, i8* %15, align 1, !dbg !8372, !ctir !147
  %conv9 = sext i8 %16 to i32, !dbg !8372
  switch i32 %conv9, label %sw.default25 [
    i32 48, label %sw.bb10
    i32 49, label %sw.bb10
    i32 50, label %sw.bb10
    i32 51, label %sw.bb10
    i32 52, label %sw.bb10
    i32 53, label %sw.bb10
    i32 54, label %sw.bb10
    i32 55, label %sw.bb10
    i32 120, label %sw.bb13
    i32 88, label %sw.bb13
    i32 97, label %sw.bb14
    i32 98, label %sw.bb15
    i32 101, label %sw.bb16
    i32 102, label %sw.bb17
    i32 110, label %sw.bb18
    i32 114, label %sw.bb19
    i32 116, label %sw.bb20
    i32 118, label %sw.bb21
    i32 63, label %sw.bb22
    i32 95, label %sw.bb23
    i32 0, label %sw.bb24
  ], !dbg !8373

sw.bb10:                                          ; preds = %sw.bb8, %sw.bb8, %sw.bb8, %sw.bb8, %sw.bb8, %sw.bb8, %sw.bb8, %sw.bb8
  store i32 2, i32* %state, align 4, !dbg !8374
  %17 = load i8*, i8** %p, align 8, !dbg !8376
  %18 = load i8, i8* %17, align 1, !dbg !8377, !ctir !147
  %conv11 = sext i8 %18 to i32, !dbg !8377
  %sub = sub nsw i32 %conv11, 48, !dbg !8378
  %conv12 = trunc i32 %sub to i8, !dbg !8377
  store i8 %conv12, i8* %num, align 1, !dbg !8379
  br label %sw.epilog26, !dbg !8380

sw.bb13:                                          ; preds = %sw.bb8, %sw.bb8
  store i32 3, i32* %state, align 4, !dbg !8381
  store i8 0, i8* %num, align 1, !dbg !8382
  br label %sw.epilog26, !dbg !8383

sw.bb14:                                          ; preds = %sw.bb8
  store i8 7, i8* %num, align 1, !dbg !8384
  br label %sw.epilog26, !dbg !8385

sw.bb15:                                          ; preds = %sw.bb8
  store i8 8, i8* %num, align 1, !dbg !8386
  br label %sw.epilog26, !dbg !8387

sw.bb16:                                          ; preds = %sw.bb8
  store i8 27, i8* %num, align 1, !dbg !8388
  br label %sw.epilog26, !dbg !8389

sw.bb17:                                          ; preds = %sw.bb8
  store i8 12, i8* %num, align 1, !dbg !8390
  br label %sw.epilog26, !dbg !8391

sw.bb18:                                          ; preds = %sw.bb8
  store i8 10, i8* %num, align 1, !dbg !8392
  br label %sw.epilog26, !dbg !8393

sw.bb19:                                          ; preds = %sw.bb8
  store i8 13, i8* %num, align 1, !dbg !8394
  br label %sw.epilog26, !dbg !8395

sw.bb20:                                          ; preds = %sw.bb8
  store i8 9, i8* %num, align 1, !dbg !8396
  br label %sw.epilog26, !dbg !8397

sw.bb21:                                          ; preds = %sw.bb8
  store i8 11, i8* %num, align 1, !dbg !8398
  br label %sw.epilog26, !dbg !8399

sw.bb22:                                          ; preds = %sw.bb8
  store i8 127, i8* %num, align 1, !dbg !8400
  br label %sw.epilog26, !dbg !8401

sw.bb23:                                          ; preds = %sw.bb8
  store i8 32, i8* %num, align 1, !dbg !8402
  br label %sw.epilog26, !dbg !8403

sw.bb24:                                          ; preds = %sw.bb8
  store i32 6, i32* %state, align 4, !dbg !8404
  br label %sw.epilog26, !dbg !8405

sw.default25:                                     ; preds = %sw.bb8
  %19 = load i8*, i8** %p, align 8, !dbg !8406
  %20 = load i8, i8* %19, align 1, !dbg !8407, !ctir !147
  store i8 %20, i8* %num, align 1, !dbg !8408
  br label %sw.epilog26, !dbg !8409

sw.epilog26:                                      ; preds = %sw.default25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb10
  %21 = load i32, i32* %state, align 4, !dbg !8410
  %cmp27 = icmp eq i32 %21, 1, !dbg !8412
  br i1 %cmp27, label %if.then29, label %if.end32, !dbg !8413

if.then29:                                        ; preds = %sw.epilog26
  %22 = load i8, i8* %num, align 1, !dbg !8414
  %23 = load i8*, i8** %q, align 8, !dbg !8416
  %incdec.ptr30 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !8416, !ctir !144
  store i8* %incdec.ptr30, i8** %q, align 8, !dbg !8416
  store i8 %22, i8* %23, align 1, !dbg !8417, !ctir !144
  %24 = load i64, i64* %count, align 8, !dbg !8418
  %inc31 = add i64 %24, 1, !dbg !8418
  store i64 %inc31, i64* %count, align 8, !dbg !8418
  store i32 0, i32* %state, align 4, !dbg !8419
  br label %if.end32, !dbg !8420

if.end32:                                         ; preds = %if.then29, %sw.epilog26
  %25 = load i8*, i8** %p, align 8, !dbg !8421
  %incdec.ptr33 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !8421, !ctir !147
  store i8* %incdec.ptr33, i8** %p, align 8, !dbg !8421
  br label %sw.epilog106, !dbg !8422

sw.bb34:                                          ; preds = %while.body
  %26 = load i8*, i8** %p, align 8, !dbg !8423
  %27 = load i8, i8* %26, align 1, !dbg !8425, !ctir !147
  %conv35 = sext i8 %27 to i32, !dbg !8425
  %cmp36 = icmp slt i32 %conv35, 48, !dbg !8426
  br i1 %cmp36, label %if.then41, label %lor.lhs.false, !dbg !8427

lor.lhs.false:                                    ; preds = %sw.bb34
  %28 = load i8*, i8** %p, align 8, !dbg !8428
  %29 = load i8, i8* %28, align 1, !dbg !8429, !ctir !147
  %conv38 = sext i8 %29 to i32, !dbg !8429
  %cmp39 = icmp sgt i32 %conv38, 55, !dbg !8430
  br i1 %cmp39, label %if.then41, label %if.else, !dbg !8431

if.then41:                                        ; preds = %lor.lhs.false, %sw.bb34
  %30 = load i8, i8* %num, align 1, !dbg !8432
  %31 = load i8*, i8** %q, align 8, !dbg !8434
  %incdec.ptr42 = getelementptr inbounds i8, i8* %31, i32 1, !dbg !8434, !ctir !144
  store i8* %incdec.ptr42, i8** %q, align 8, !dbg !8434
  store i8 %30, i8* %31, align 1, !dbg !8435, !ctir !144
  %32 = load i64, i64* %count, align 8, !dbg !8436
  %inc43 = add i64 %32, 1, !dbg !8436
  store i64 %inc43, i64* %count, align 8, !dbg !8436
  store i32 0, i32* %state, align 4, !dbg !8437
  br label %if.end49, !dbg !8438

if.else:                                          ; preds = %lor.lhs.false
  %33 = load i8, i8* %num, align 1, !dbg !8439
  %conv44 = sext i8 %33 to i32, !dbg !8439
  %shl = shl i32 %conv44, 3, !dbg !8440
  %34 = load i8*, i8** %p, align 8, !dbg !8441
  %incdec.ptr45 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !8441, !ctir !147
  store i8* %incdec.ptr45, i8** %p, align 8, !dbg !8441
  %35 = load i8, i8* %34, align 1, !dbg !8442, !ctir !147
  %conv46 = sext i8 %35 to i32, !dbg !8442
  %sub47 = sub nsw i32 %conv46, 48, !dbg !8443
  %add = add nsw i32 %shl, %sub47, !dbg !8444
  %conv48 = trunc i32 %add to i8, !dbg !8445
  store i8 %conv48, i8* %num, align 1, !dbg !8446
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then41
  br label %sw.epilog106, !dbg !8447

sw.bb50:                                          ; preds = %while.body
  %36 = load i8*, i8** %p, align 8, !dbg !8448
  %37 = load i8, i8* %36, align 1, !dbg !8449, !ctir !147
  %conv51 = sext i8 %37 to i32, !dbg !8449
  switch i32 %conv51, label %sw.default78 [
    i32 48, label %sw.bb52
    i32 49, label %sw.bb52
    i32 50, label %sw.bb52
    i32 51, label %sw.bb52
    i32 52, label %sw.bb52
    i32 53, label %sw.bb52
    i32 54, label %sw.bb52
    i32 55, label %sw.bb52
    i32 56, label %sw.bb52
    i32 57, label %sw.bb52
    i32 97, label %sw.bb60
    i32 98, label %sw.bb60
    i32 99, label %sw.bb60
    i32 100, label %sw.bb60
    i32 101, label %sw.bb60
    i32 102, label %sw.bb60
    i32 65, label %sw.bb69
    i32 66, label %sw.bb69
    i32 67, label %sw.bb69
    i32 68, label %sw.bb69
    i32 69, label %sw.bb69
    i32 70, label %sw.bb69
  ], !dbg !8450

sw.bb52:                                          ; preds = %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50
  %38 = load i8, i8* %num, align 1, !dbg !8451
  %conv53 = sext i8 %38 to i32, !dbg !8451
  %shl54 = shl i32 %conv53, 4, !dbg !8453
  %39 = load i8*, i8** %p, align 8, !dbg !8454
  %incdec.ptr55 = getelementptr inbounds i8, i8* %39, i32 1, !dbg !8454, !ctir !147
  store i8* %incdec.ptr55, i8** %p, align 8, !dbg !8454
  %40 = load i8, i8* %39, align 1, !dbg !8455, !ctir !147
  %conv56 = sext i8 %40 to i32, !dbg !8455
  %sub57 = sub nsw i32 %conv56, 48, !dbg !8456
  %add58 = add nsw i32 %shl54, %sub57, !dbg !8457
  %conv59 = trunc i32 %add58 to i8, !dbg !8458
  store i8 %conv59, i8* %num, align 1, !dbg !8459
  br label %sw.epilog81, !dbg !8460

sw.bb60:                                          ; preds = %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50
  %41 = load i8, i8* %num, align 1, !dbg !8461
  %conv61 = sext i8 %41 to i32, !dbg !8461
  %shl62 = shl i32 %conv61, 4, !dbg !8462
  %42 = load i8*, i8** %p, align 8, !dbg !8463
  %incdec.ptr63 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !8463, !ctir !147
  store i8* %incdec.ptr63, i8** %p, align 8, !dbg !8463
  %43 = load i8, i8* %42, align 1, !dbg !8464, !ctir !147
  %conv64 = sext i8 %43 to i32, !dbg !8464
  %sub65 = sub nsw i32 %conv64, 97, !dbg !8465
  %add66 = add nsw i32 %shl62, %sub65, !dbg !8466
  %add67 = add nsw i32 %add66, 10, !dbg !8467
  %conv68 = trunc i32 %add67 to i8, !dbg !8468
  store i8 %conv68, i8* %num, align 1, !dbg !8469
  br label %sw.epilog81, !dbg !8470

sw.bb69:                                          ; preds = %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50, %sw.bb50
  %44 = load i8, i8* %num, align 1, !dbg !8471
  %conv70 = sext i8 %44 to i32, !dbg !8471
  %shl71 = shl i32 %conv70, 4, !dbg !8472
  %45 = load i8*, i8** %p, align 8, !dbg !8473
  %incdec.ptr72 = getelementptr inbounds i8, i8* %45, i32 1, !dbg !8473, !ctir !147
  store i8* %incdec.ptr72, i8** %p, align 8, !dbg !8473
  %46 = load i8, i8* %45, align 1, !dbg !8474, !ctir !147
  %conv73 = sext i8 %46 to i32, !dbg !8474
  %sub74 = sub nsw i32 %conv73, 65, !dbg !8475
  %add75 = add nsw i32 %shl71, %sub74, !dbg !8476
  %add76 = add nsw i32 %add75, 10, !dbg !8477
  %conv77 = trunc i32 %add76 to i8, !dbg !8478
  store i8 %conv77, i8* %num, align 1, !dbg !8479
  br label %sw.epilog81, !dbg !8480

sw.default78:                                     ; preds = %sw.bb50
  %47 = load i8, i8* %num, align 1, !dbg !8481
  %48 = load i8*, i8** %q, align 8, !dbg !8482
  %incdec.ptr79 = getelementptr inbounds i8, i8* %48, i32 1, !dbg !8482, !ctir !144
  store i8* %incdec.ptr79, i8** %q, align 8, !dbg !8482
  store i8 %47, i8* %48, align 1, !dbg !8483, !ctir !144
  %49 = load i64, i64* %count, align 8, !dbg !8484
  %inc80 = add i64 %49, 1, !dbg !8484
  store i64 %inc80, i64* %count, align 8, !dbg !8484
  store i32 0, i32* %state, align 4, !dbg !8485
  br label %sw.epilog81, !dbg !8486

sw.epilog81:                                      ; preds = %sw.default78, %sw.bb69, %sw.bb60, %sw.bb52
  br label %sw.epilog106, !dbg !8487

sw.bb82:                                          ; preds = %while.body
  store i32 0, i32* %state, align 4, !dbg !8488
  %50 = load i8*, i8** %p, align 8, !dbg !8489
  %51 = load i8, i8* %50, align 1, !dbg !8491, !ctir !147
  %conv83 = sext i8 %51 to i32, !dbg !8491
  %cmp84 = icmp sge i32 %conv83, 64, !dbg !8492
  br i1 %cmp84, label %land.lhs.true, label %if.else95, !dbg !8493

land.lhs.true:                                    ; preds = %sw.bb82
  %52 = load i8*, i8** %p, align 8, !dbg !8494
  %53 = load i8, i8* %52, align 1, !dbg !8495, !ctir !147
  %conv86 = sext i8 %53 to i32, !dbg !8495
  %cmp87 = icmp sle i32 %conv86, 126, !dbg !8496
  br i1 %cmp87, label %if.then89, label %if.else95, !dbg !8497

if.then89:                                        ; preds = %land.lhs.true
  %54 = load i8*, i8** %p, align 8, !dbg !8498
  %incdec.ptr90 = getelementptr inbounds i8, i8* %54, i32 1, !dbg !8498, !ctir !147
  store i8* %incdec.ptr90, i8** %p, align 8, !dbg !8498
  %55 = load i8, i8* %54, align 1, !dbg !8500, !ctir !147
  %conv91 = sext i8 %55 to i32, !dbg !8500
  %and = and i32 %conv91, 31, !dbg !8501
  %conv92 = trunc i32 %and to i8, !dbg !8500
  %56 = load i8*, i8** %q, align 8, !dbg !8502
  %incdec.ptr93 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !8502, !ctir !144
  store i8* %incdec.ptr93, i8** %q, align 8, !dbg !8502
  store i8 %conv92, i8* %56, align 1, !dbg !8503, !ctir !144
  %57 = load i64, i64* %count, align 8, !dbg !8504
  %inc94 = add i64 %57, 1, !dbg !8504
  store i64 %inc94, i64* %count, align 8, !dbg !8504
  br label %if.end104, !dbg !8505

if.else95:                                        ; preds = %land.lhs.true, %sw.bb82
  %58 = load i8*, i8** %p, align 8, !dbg !8506
  %59 = load i8, i8* %58, align 1, !dbg !8508, !ctir !147
  %conv96 = sext i8 %59 to i32, !dbg !8508
  %cmp97 = icmp eq i32 %conv96, 63, !dbg !8509
  br i1 %cmp97, label %if.then99, label %if.else102, !dbg !8510

if.then99:                                        ; preds = %if.else95
  %60 = load i8*, i8** %q, align 8, !dbg !8511
  %incdec.ptr100 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !8511, !ctir !144
  store i8* %incdec.ptr100, i8** %q, align 8, !dbg !8511
  store i8 127, i8* %60, align 1, !dbg !8513, !ctir !144
  %61 = load i64, i64* %count, align 8, !dbg !8514
  %inc101 = add i64 %61, 1, !dbg !8514
  store i64 %inc101, i64* %count, align 8, !dbg !8514
  br label %if.end103, !dbg !8515

if.else102:                                       ; preds = %if.else95
  store i32 6, i32* %state, align 4, !dbg !8516
  br label %if.end103

if.end103:                                        ; preds = %if.else102, %if.then99
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then89
  br label %sw.epilog106, !dbg !8517

sw.default105:                                    ; preds = %while.body
  call void @abort() #15, !dbg !8518
  unreachable, !dbg !8518

sw.epilog106:                                     ; preds = %if.end104, %sw.epilog81, %if.end49, %if.end32, %sw.epilog
  br label %while.cond, !dbg !8338, !llvm.loop !8519

while.end:                                        ; preds = %while.cond
  %62 = load i8*, i8** %q, align 8, !dbg !8521
  %63 = load i8**, i8*** %dest.addr, align 8, !dbg !8522
  store i8* %62, i8** %63, align 8, !dbg !8523, !ctir !143
  %64 = load i8*, i8** %p, align 8, !dbg !8524
  %65 = load i8**, i8*** %src.addr, align 8, !dbg !8525
  store i8* %64, i8** %65, align 8, !dbg !8526, !ctir !146
  %66 = load i64, i64* %count, align 8, !dbg !8527
  %67 = load i64*, i64** %output_count.addr, align 8, !dbg !8528
  store i64 %66, i64* %67, align 8, !dbg !8529, !ctir !149
  %68 = load i32, i32* %state, align 4, !dbg !8530
  %cmp107 = icmp ne i32 %68, 6, !dbg !8531
  ret i1 %cmp107, !dbg !8532
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getenv_quoting_style() #0 !dbg !8533 {
entry:
  %q_style = alloca i8*, align 8, !ctir !146
  %i = alloca i32, align 4, !ctir !27
  call void @llvm.dbg.declare(metadata i8** %q_style, metadata !8534, metadata !DIExpression()), !dbg !8535
  %call = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98, i64 0, i64 0)) #13, !dbg !8536
  store i8* %call, i8** %q_style, align 8, !dbg !8535
  %0 = load i8*, i8** %q_style, align 8, !dbg !8537
  %tobool = icmp ne i8* %0, null, !dbg !8537
  br i1 %tobool, label %if.then, label %if.end6, !dbg !8539

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8540, metadata !DIExpression()), !dbg !8542
  %1 = load i8*, i8** %q_style, align 8, !dbg !8543
  %call1 = call i64 @argmatch(i8* %1, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4) #16, !dbg !8543
  %conv = trunc i64 %call1 to i32, !dbg !8543
  store i32 %conv, i32* %i, align 4, !dbg !8542
  %2 = load i32, i32* %i, align 4, !dbg !8544
  %cmp = icmp sle i32 0, %2, !dbg !8546
  br i1 %cmp, label %if.then3, label %if.else, !dbg !8547

if.then3:                                         ; preds = %if.then
  %3 = load i32, i32* %i, align 4, !dbg !8548
  %idxprom = sext i32 %3 to i64, !dbg !8549
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %idxprom, !dbg !8549, !ctir !673
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8549
  call void @set_quoting_style(%struct.quoting_options* null, i32 %4), !dbg !8550
  br label %if.end, !dbg !8550

if.else:                                          ; preds = %if.then
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.99, i64 0, i64 0)) #13, !dbg !8551
  %5 = load i8*, i8** %q_style, align 8, !dbg !8552
  %call5 = call i8* @quote(i8* %5), !dbg !8553
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call4, i8* %call5), !dbg !8554
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end6, !dbg !8555

if.end6:                                          ; preds = %if.end, %entry
  ret void, !dbg !8556
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @set_line_length(i8* %spec) #0 !dbg !8557 {
entry:
  %retval = alloca i1, align 1
  %spec.addr = alloca i8*, align 8
  %val = alloca i64, align 8, !ctir !168
  store i8* %spec, i8** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %spec.addr, metadata !8558, metadata !DIExpression()), !dbg !8559
  call void @llvm.dbg.declare(metadata i64* %val, metadata !8560, metadata !DIExpression()), !dbg !8561
  %0 = load i8*, i8** %spec.addr, align 8, !dbg !8562
  %call = call i32 @xstrtoumax(i8* %0, i8** null, i32 0, i64* %val, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)), !dbg !8563
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
  ], !dbg !8564

sw.bb:                                            ; preds = %entry
  %1 = load i64, i64* %val, align 8, !dbg !8565
  %cmp = icmp ult i64 %1, -1, !dbg !8565
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8565

cond.true:                                        ; preds = %sw.bb
  %2 = load i64, i64* %val, align 8, !dbg !8565
  br label %cond.end, !dbg !8565

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !8565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ -1, %cond.false ], !dbg !8565
  store i64 %cond, i64* @line_length, align 8, !dbg !8567
  store i1 true, i1* %retval, align 1, !dbg !8568
  br label %return, !dbg !8568

sw.bb1:                                           ; preds = %entry
  store i64 -1, i64* @line_length, align 8, !dbg !8569
  store i1 true, i1* %retval, align 1, !dbg !8570
  br label %return, !dbg !8570

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !8571
  br label %return, !dbg !8571

return:                                           ; preds = %sw.default, %sw.bb1, %cond.end
  %3 = load i1, i1* %retval, align 1, !dbg !8572
  ret i1 %3, !dbg !8572
}

; Function Attrs: nounwind
declare dso_local i32 @ioctl(i32, i64, ...) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_ignore_pattern(i8* %pattern) #0 !dbg !8573 {
entry:
  %pattern.addr = alloca i8*, align 8
  %ignore = alloca %struct.ignore_pattern*, align 8, !ctir !617
  store i8* %pattern, i8** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pattern.addr, metadata !8574, metadata !DIExpression()), !dbg !8575
  call void @llvm.dbg.declare(metadata %struct.ignore_pattern** %ignore, metadata !8576, metadata !DIExpression()), !dbg !8577
  %call = call noalias i8* @xmalloc(i64 16), !dbg !8578
  %0 = bitcast i8* %call to %struct.ignore_pattern*, !dbg !8578
  store %struct.ignore_pattern* %0, %struct.ignore_pattern** %ignore, align 8, !dbg !8579
  %1 = load i8*, i8** %pattern.addr, align 8, !dbg !8580
  %2 = load %struct.ignore_pattern*, %struct.ignore_pattern** %ignore, align 8, !dbg !8581
  %pattern1 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %2, i32 0, i32 0, !dbg !8582, !ctir !618
  store i8* %1, i8** %pattern1, align 8, !dbg !8583, !ctir !146
  %3 = load %struct.ignore_pattern*, %struct.ignore_pattern** @ignore_patterns, align 8, !dbg !8584
  %4 = load %struct.ignore_pattern*, %struct.ignore_pattern** %ignore, align 8, !dbg !8585
  %next = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %4, i32 0, i32 1, !dbg !8586, !ctir !618
  store %struct.ignore_pattern* %3, %struct.ignore_pattern** %next, align 8, !dbg !8587, !ctir !617
  %5 = load %struct.ignore_pattern*, %struct.ignore_pattern** %ignore, align 8, !dbg !8588
  store %struct.ignore_pattern* %5, %struct.ignore_pattern** @ignore_patterns, align 8, !dbg !8589
  ret void, !dbg !8590
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @bad_cast(i8* %s) #0 !dbg !8591 {
entry:
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !8594, metadata !DIExpression()), !dbg !8595
  %0 = load i8*, i8** %s.addr, align 8, !dbg !8596
  ret i8* %0, !dbg !8597
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @usage(i32 %status) #10 !dbg !8598 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !8599, metadata !DIExpression()), !dbg !8600
  %0 = load i32, i32* %status.addr, align 4, !dbg !8601
  %cmp = icmp ne i32 %0, 0, !dbg !8603
  br i1 %cmp, label %if.then, label %if.else, !dbg !8604

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !8605

do.body:                                          ; preds = %if.then
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !8606
  %call = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0)) #13, !dbg !8606
  %2 = load i8*, i8** @program_name, align 8, !dbg !8606
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %call, i8* %2), !dbg !8606
  br label %do.end, !dbg !8606

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !8606

if.else:                                          ; preds = %entry
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)) #13, !dbg !8608
  %3 = load i8*, i8** @program_name, align 8, !dbg !8610
  %call3 = call i32 (i8*, ...) @printf(i8* %call2, i8* %3), !dbg !8611
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.14, i64 0, i64 0)) #13, !dbg !8612
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8612
  %call5 = call i32 @fputs_unlocked(i8* %call4, %struct._IO_FILE* %4), !dbg !8612
  call void @emit_mandatory_arg_note(), !dbg !8613
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.15, i64 0, i64 0)) #13, !dbg !8614
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8614
  %call7 = call i32 @fputs_unlocked(i8* %call6, %struct._IO_FILE* %5), !dbg !8614
  %call8 = call i8* @gettext(i8* getelementptr inbounds ([156 x i8], [156 x i8]* @.str.16, i64 0, i64 0)) #13, !dbg !8615
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8615
  %call9 = call i32 @fputs_unlocked(i8* %call8, %struct._IO_FILE* %6), !dbg !8615
  %call10 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.17, i64 0, i64 0)) #13, !dbg !8616
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8616
  %call11 = call i32 @fputs_unlocked(i8* %call10, %struct._IO_FILE* %7), !dbg !8616
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([367 x i8], [367 x i8]* @.str.18, i64 0, i64 0)) #13, !dbg !8617
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8617
  %call13 = call i32 @fputs_unlocked(i8* %call12, %struct._IO_FILE* %8), !dbg !8617
  %call14 = call i8* @gettext(i8* getelementptr inbounds ([419 x i8], [419 x i8]* @.str.19, i64 0, i64 0)) #13, !dbg !8618
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8618
  %call15 = call i32 @fputs_unlocked(i8* %call14, %struct._IO_FILE* %9), !dbg !8618
  %call16 = call i8* @gettext(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.20, i64 0, i64 0)) #13, !dbg !8619
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8619
  %call17 = call i32 @fputs_unlocked(i8* %call16, %struct._IO_FILE* %10), !dbg !8619
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.21, i64 0, i64 0)) #13, !dbg !8620
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8620
  %call19 = call i32 @fputs_unlocked(i8* %call18, %struct._IO_FILE* %11), !dbg !8620
  %call20 = call i8* @gettext(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.22, i64 0, i64 0)) #13, !dbg !8621
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8621
  %call21 = call i32 @fputs_unlocked(i8* %call20, %struct._IO_FILE* %12), !dbg !8621
  %call22 = call i8* @gettext(i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.23, i64 0, i64 0)) #13, !dbg !8622
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8622
  %call23 = call i32 @fputs_unlocked(i8* %call22, %struct._IO_FILE* %13), !dbg !8622
  %call24 = call i8* @gettext(i8* getelementptr inbounds ([422 x i8], [422 x i8]* @.str.24, i64 0, i64 0)) #13, !dbg !8623
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8623
  %call25 = call i32 @fputs_unlocked(i8* %call24, %struct._IO_FILE* %14), !dbg !8623
  %call26 = call i8* @gettext(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.25, i64 0, i64 0)) #13, !dbg !8624
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8624
  %call27 = call i32 @fputs_unlocked(i8* %call26, %struct._IO_FILE* %15), !dbg !8624
  %call28 = call i8* @gettext(i8* getelementptr inbounds ([354 x i8], [354 x i8]* @.str.26, i64 0, i64 0)) #13, !dbg !8625
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8625
  %call29 = call i32 @fputs_unlocked(i8* %call28, %struct._IO_FILE* %16), !dbg !8625
  %call30 = call i8* @gettext(i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.27, i64 0, i64 0)) #13, !dbg !8626
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8626
  %call31 = call i32 @fputs_unlocked(i8* %call30, %struct._IO_FILE* %17), !dbg !8626
  %call32 = call i8* @gettext(i8* getelementptr inbounds ([359 x i8], [359 x i8]* @.str.28, i64 0, i64 0)) #13, !dbg !8627
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8627
  %call33 = call i32 @fputs_unlocked(i8* %call32, %struct._IO_FILE* %18), !dbg !8627
  %call34 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.29, i64 0, i64 0)) #13, !dbg !8628
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8628
  %call35 = call i32 @fputs_unlocked(i8* %call34, %struct._IO_FILE* %19), !dbg !8628
  %call36 = call i8* @gettext(i8* getelementptr inbounds ([585 x i8], [585 x i8]* @.str.30, i64 0, i64 0)) #13, !dbg !8629
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8629
  %call37 = call i32 @fputs_unlocked(i8* %call36, %struct._IO_FILE* %20), !dbg !8629
  %call38 = call i8* @gettext(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.31, i64 0, i64 0)) #13, !dbg !8630
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8630
  %call39 = call i32 @fputs_unlocked(i8* %call38, %struct._IO_FILE* %21), !dbg !8630
  %call40 = call i8* @gettext(i8* getelementptr inbounds ([519 x i8], [519 x i8]* @.str.32, i64 0, i64 0)) #13, !dbg !8631
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8631
  %call41 = call i32 @fputs_unlocked(i8* %call40, %struct._IO_FILE* %22), !dbg !8631
  %call42 = call i8* @gettext(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.33, i64 0, i64 0)) #13, !dbg !8632
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8632
  %call43 = call i32 @fputs_unlocked(i8* %call42, %struct._IO_FILE* %23), !dbg !8632
  %call44 = call i8* @gettext(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.34, i64 0, i64 0)) #13, !dbg !8633
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8633
  %call45 = call i32 @fputs_unlocked(i8* %call44, %struct._IO_FILE* %24), !dbg !8633
  %call46 = call i8* @gettext(i8* getelementptr inbounds ([372 x i8], [372 x i8]* @.str.35, i64 0, i64 0)) #13, !dbg !8634
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8634
  %call47 = call i32 @fputs_unlocked(i8* %call46, %struct._IO_FILE* %25), !dbg !8634
  %call48 = call i8* @gettext(i8* getelementptr inbounds ([363 x i8], [363 x i8]* @.str.36, i64 0, i64 0)) #13, !dbg !8635
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8635
  %call49 = call i32 @fputs_unlocked(i8* %call48, %struct._IO_FILE* %26), !dbg !8635
  %call50 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !8636
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8636
  %call51 = call i32 @fputs_unlocked(i8* %call50, %struct._IO_FILE* %27), !dbg !8636
  %call52 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i64 0, i64 0)) #13, !dbg !8637
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8637
  %call53 = call i32 @fputs_unlocked(i8* %call52, %struct._IO_FILE* %28), !dbg !8637
  call void @emit_size_note(), !dbg !8638
  %call54 = call i8* @gettext(i8* getelementptr inbounds ([376 x i8], [376 x i8]* @.str.39, i64 0, i64 0)) #13, !dbg !8639
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8639
  %call55 = call i32 @fputs_unlocked(i8* %call54, %struct._IO_FILE* %29), !dbg !8639
  %call56 = call i8* @gettext(i8* getelementptr inbounds ([286 x i8], [286 x i8]* @.str.40, i64 0, i64 0)) #13, !dbg !8640
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8640
  %call57 = call i32 @fputs_unlocked(i8* %call56, %struct._IO_FILE* %30), !dbg !8640
  %call58 = call i8* @gettext(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.41, i64 0, i64 0)) #13, !dbg !8641
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8641
  %call59 = call i32 @fputs_unlocked(i8* %call58, %struct._IO_FILE* %31), !dbg !8641
  %32 = load i32, i32* @ls_mode, align 4, !dbg !8642
  %cmp60 = icmp eq i32 %32, 1, !dbg !8642
  br i1 %cmp60, label %cond.true, label %cond.false, !dbg !8642

cond.true:                                        ; preds = %if.else
  br label %cond.end, !dbg !8642

cond.false:                                       ; preds = %if.else
  %33 = load i32, i32* @ls_mode, align 4, !dbg !8642
  %cmp61 = icmp eq i32 %33, 2, !dbg !8642
  %34 = zext i1 %cmp61 to i64, !dbg !8642
  %cond = select i1 %cmp61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), !dbg !8642
  br label %cond.end, !dbg !8642

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), %cond.true ], [ %cond, %cond.false ], !dbg !8642
  call void @emit_ancillary_info(i8* %cond62), !dbg !8643
  br label %if.end

if.end:                                           ; preds = %cond.end, %do.end
  %35 = load i32, i32* %status.addr, align 4, !dbg !8644
  call void @exit(i32 %35) #15, !dbg !8645
  unreachable, !dbg !8645
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind
declare dso_local i8* @dcgettext(i8*, i8*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @abformat_init() #0 !dbg !8646 {
entry:
  %pb = alloca [2 x i8*], align 16, !ctir !686
  %recent = alloca i32, align 4, !ctir !27
  %abmon = alloca [12 x [128 x i8]], align 16, !ctir !700
  %recent9 = alloca i32, align 4, !ctir !27
  %fmt = alloca i8*, align 8, !ctir !146
  %i = alloca i32, align 4, !ctir !27
  %nfmt = alloca i8*, align 8, !ctir !143
  %nbytes = alloca i32, align 4, !ctir !27
  %prefix_len = alloca i32, align 4, !ctir !27
  call void @llvm.dbg.declare(metadata [2 x i8*]* %pb, metadata !8647, metadata !DIExpression()), !dbg !8648
  call void @llvm.dbg.declare(metadata i32* %recent, metadata !8649, metadata !DIExpression()), !dbg !8651
  store i32 0, i32* %recent, align 4, !dbg !8651
  br label %for.cond, !dbg !8652

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %recent, align 4, !dbg !8653
  %cmp = icmp slt i32 %0, 2, !dbg !8655
  br i1 %cmp, label %for.body, label %for.end, !dbg !8656

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %recent, align 4, !dbg !8657
  %idxprom = sext i32 %1 to i64, !dbg !8658
  %arrayidx = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %idxprom, !dbg !8658, !ctir !686
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !8658
  %call = call i8* @first_percent_b(i8* %2) #16, !dbg !8659
  %3 = load i32, i32* %recent, align 4, !dbg !8660
  %idxprom1 = sext i32 %3 to i64, !dbg !8661
  %arrayidx2 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 %idxprom1, !dbg !8661, !ctir !686
  store i8* %call, i8** %arrayidx2, align 8, !dbg !8662
  br label %for.inc, !dbg !8661

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %recent, align 4, !dbg !8663
  %inc = add nsw i32 %4, 1, !dbg !8663
  store i32 %inc, i32* %recent, align 4, !dbg !8663
  br label %for.cond, !dbg !8664, !llvm.loop !8665

for.end:                                          ; preds = %for.cond
  %arrayidx3 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 0, !dbg !8667, !ctir !686
  %5 = load i8*, i8** %arrayidx3, align 16, !dbg !8667
  %tobool = icmp ne i8* %5, null, !dbg !8667
  br i1 %tobool, label %if.end, label %lor.lhs.false, !dbg !8669

lor.lhs.false:                                    ; preds = %for.end
  %arrayidx4 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 1, !dbg !8670, !ctir !686
  %6 = load i8*, i8** %arrayidx4, align 8, !dbg !8670
  %tobool5 = icmp ne i8* %6, null, !dbg !8670
  br i1 %tobool5, label %if.end, label %if.then, !dbg !8671

if.then:                                          ; preds = %lor.lhs.false
  br label %return, !dbg !8672

if.end:                                           ; preds = %lor.lhs.false, %for.end
  call void @llvm.dbg.declare(metadata [12 x [128 x i8]]* %abmon, metadata !8673, metadata !DIExpression()), !dbg !8674
  %arraydecay = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %abmon, i64 0, i64 0, !dbg !8675, !ctir !700
  %call6 = call zeroext i1 @abmon_init([128 x i8]* %arraydecay), !dbg !8677
  br i1 %call6, label %if.end8, label %if.then7, !dbg !8678

if.then7:                                         ; preds = %if.end
  br label %return, !dbg !8679

if.end8:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %recent9, metadata !8680, metadata !DIExpression()), !dbg !8682
  store i32 0, i32* %recent9, align 4, !dbg !8682
  br label %for.cond10, !dbg !8683

for.cond10:                                       ; preds = %for.inc54, %if.end8
  %7 = load i32, i32* %recent9, align 4, !dbg !8684
  %cmp11 = icmp slt i32 %7, 2, !dbg !8686
  br i1 %cmp11, label %for.body12, label %for.end56, !dbg !8687

for.body12:                                       ; preds = %for.cond10
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !8688, metadata !DIExpression()), !dbg !8690
  %8 = load i32, i32* %recent9, align 4, !dbg !8691
  %idxprom13 = sext i32 %8 to i64, !dbg !8692
  %arrayidx14 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %idxprom13, !dbg !8692, !ctir !686
  %9 = load i8*, i8** %arrayidx14, align 8, !dbg !8692
  store i8* %9, i8** %fmt, align 8, !dbg !8690
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8693, metadata !DIExpression()), !dbg !8695
  store i32 0, i32* %i, align 4, !dbg !8695
  br label %for.cond15, !dbg !8696

for.cond15:                                       ; preds = %for.inc51, %for.body12
  %10 = load i32, i32* %i, align 4, !dbg !8697
  %cmp16 = icmp slt i32 %10, 12, !dbg !8699
  br i1 %cmp16, label %for.body17, label %for.end53, !dbg !8700

for.body17:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i8** %nfmt, metadata !8701, metadata !DIExpression()), !dbg !8703
  %11 = load i32, i32* %recent9, align 4, !dbg !8704
  %idxprom18 = sext i32 %11 to i64, !dbg !8705
  %arrayidx19 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 %idxprom18, !dbg !8705, !ctir !703
  %12 = load i32, i32* %i, align 4, !dbg !8706
  %idxprom20 = sext i32 %12 to i64, !dbg !8705
  %arrayidx21 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %arrayidx19, i64 0, i64 %idxprom20, !dbg !8705, !ctir !700
  %arraydecay22 = getelementptr inbounds [128 x i8], [128 x i8]* %arrayidx21, i64 0, i64 0, !dbg !8705, !ctir !705
  store i8* %arraydecay22, i8** %nfmt, align 8, !dbg !8703
  call void @llvm.dbg.declare(metadata i32* %nbytes, metadata !8707, metadata !DIExpression()), !dbg !8708
  %13 = load i32, i32* %recent9, align 4, !dbg !8709
  %idxprom23 = sext i32 %13 to i64, !dbg !8711
  %arrayidx24 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 %idxprom23, !dbg !8711, !ctir !686
  %14 = load i8*, i8** %arrayidx24, align 8, !dbg !8711
  %tobool25 = icmp ne i8* %14, null, !dbg !8711
  br i1 %tobool25, label %if.else, label %if.then26, !dbg !8712

if.then26:                                        ; preds = %for.body17
  %15 = load i8*, i8** %nfmt, align 8, !dbg !8713
  %16 = load i8*, i8** %fmt, align 8, !dbg !8714
  %call27 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %15, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i64 0, i64 0), i8* %16) #13, !dbg !8715
  store i32 %call27, i32* %nbytes, align 4, !dbg !8716
  br label %if.end44, !dbg !8717

if.else:                                          ; preds = %for.body17
  %17 = load i32, i32* %recent9, align 4, !dbg !8718
  %idxprom28 = sext i32 %17 to i64, !dbg !8721
  %arrayidx29 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 %idxprom28, !dbg !8721, !ctir !686
  %18 = load i8*, i8** %arrayidx29, align 8, !dbg !8721
  %19 = load i8*, i8** %fmt, align 8, !dbg !8722
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64, !dbg !8723
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64, !dbg !8723
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8723
  %cmp30 = icmp sle i64 %sub.ptr.sub, 128, !dbg !8724
  br i1 %cmp30, label %if.end32, label %if.then31, !dbg !8725

if.then31:                                        ; preds = %if.else
  br label %return, !dbg !8726

if.end32:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %prefix_len, metadata !8727, metadata !DIExpression()), !dbg !8728
  %20 = load i32, i32* %recent9, align 4, !dbg !8729
  %idxprom33 = sext i32 %20 to i64, !dbg !8730
  %arrayidx34 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 %idxprom33, !dbg !8730, !ctir !686
  %21 = load i8*, i8** %arrayidx34, align 8, !dbg !8730
  %22 = load i8*, i8** %fmt, align 8, !dbg !8731
  %sub.ptr.lhs.cast35 = ptrtoint i8* %21 to i64, !dbg !8732
  %sub.ptr.rhs.cast36 = ptrtoint i8* %22 to i64, !dbg !8732
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36, !dbg !8732
  %conv = trunc i64 %sub.ptr.sub37 to i32, !dbg !8730
  store i32 %conv, i32* %prefix_len, align 4, !dbg !8728
  %23 = load i8*, i8** %nfmt, align 8, !dbg !8733
  %24 = load i32, i32* %prefix_len, align 4, !dbg !8734
  %25 = load i8*, i8** %fmt, align 8, !dbg !8735
  %26 = load i32, i32* %i, align 4, !dbg !8736
  %idxprom38 = sext i32 %26 to i64, !dbg !8737
  %arrayidx39 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %abmon, i64 0, i64 %idxprom38, !dbg !8737, !ctir !700
  %arraydecay40 = getelementptr inbounds [128 x i8], [128 x i8]* %arrayidx39, i64 0, i64 0, !dbg !8737, !ctir !705
  %27 = load i32, i32* %recent9, align 4, !dbg !8738
  %idxprom41 = sext i32 %27 to i64, !dbg !8739
  %arrayidx42 = getelementptr inbounds [2 x i8*], [2 x i8*]* %pb, i64 0, i64 %idxprom41, !dbg !8739, !ctir !686
  %28 = load i8*, i8** %arrayidx42, align 8, !dbg !8739
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 2, !dbg !8740, !ctir !147
  %call43 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %23, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.171, i64 0, i64 0), i32 %24, i8* %25, i8* %arraydecay40, i8* %add.ptr) #13, !dbg !8741
  store i32 %call43, i32* %nbytes, align 4, !dbg !8742
  br label %if.end44

if.end44:                                         ; preds = %if.end32, %if.then26
  %29 = load i32, i32* %nbytes, align 4, !dbg !8743
  %cmp45 = icmp sle i32 0, %29, !dbg !8745
  br i1 %cmp45, label %land.lhs.true, label %if.then49, !dbg !8746

land.lhs.true:                                    ; preds = %if.end44
  %30 = load i32, i32* %nbytes, align 4, !dbg !8747
  %cmp47 = icmp slt i32 %30, 128, !dbg !8748
  br i1 %cmp47, label %if.end50, label %if.then49, !dbg !8749

if.then49:                                        ; preds = %land.lhs.true, %if.end44
  br label %return, !dbg !8750

if.end50:                                         ; preds = %land.lhs.true
  br label %for.inc51, !dbg !8751

for.inc51:                                        ; preds = %if.end50
  %31 = load i32, i32* %i, align 4, !dbg !8752
  %inc52 = add nsw i32 %31, 1, !dbg !8752
  store i32 %inc52, i32* %i, align 4, !dbg !8752
  br label %for.cond15, !dbg !8753, !llvm.loop !8754

for.end53:                                        ; preds = %for.cond15
  br label %for.inc54, !dbg !8756

for.inc54:                                        ; preds = %for.end53
  %32 = load i32, i32* %recent9, align 4, !dbg !8757
  %inc55 = add nsw i32 %32, 1, !dbg !8757
  store i32 %inc55, i32* %recent9, align 4, !dbg !8757
  br label %for.cond10, !dbg !8758, !llvm.loop !8759

for.end56:                                        ; preds = %for.cond10
  store i8 1, i8* @use_abformat, align 1, !dbg !8761
  br label %return, !dbg !8762

return:                                           ; preds = %for.end56, %if.then49, %if.then31, %if.then7, %if.then
  ret void, !dbg !8762
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i8* @first_percent_b(i8* %fmt) #9 !dbg !8763 {
entry:
  %retval = alloca i8*, align 8
  %fmt.addr = alloca i8*, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fmt.addr, metadata !8766, metadata !DIExpression()), !dbg !8767
  br label %for.cond, !dbg !8768

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %fmt.addr, align 8, !dbg !8769
  %1 = load i8, i8* %0, align 1, !dbg !8772, !ctir !147
  %tobool = icmp ne i8 %1, 0, !dbg !8773
  br i1 %tobool, label %for.body, label %for.end, !dbg !8773

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %fmt.addr, align 8, !dbg !8774
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !8774, !ctir !146
  %3 = load i8, i8* %arrayidx, align 1, !dbg !8774
  %conv = sext i8 %3 to i32, !dbg !8774
  %cmp = icmp eq i32 %conv, 37, !dbg !8776
  br i1 %cmp, label %if.then, label %if.end, !dbg !8777

if.then:                                          ; preds = %for.body
  %4 = load i8*, i8** %fmt.addr, align 8, !dbg !8778
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !8778, !ctir !146
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !8778
  %conv3 = sext i8 %5 to i32, !dbg !8778
  switch i32 %conv3, label %sw.epilog [
    i32 98, label %sw.bb
    i32 37, label %sw.bb4
  ], !dbg !8779

sw.bb:                                            ; preds = %if.then
  %6 = load i8*, i8** %fmt.addr, align 8, !dbg !8780
  store i8* %6, i8** %retval, align 8, !dbg !8782
  br label %return, !dbg !8782

sw.bb4:                                           ; preds = %if.then
  %7 = load i8*, i8** %fmt.addr, align 8, !dbg !8783
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !8783, !ctir !147
  store i8* %incdec.ptr, i8** %fmt.addr, align 8, !dbg !8783
  br label %sw.epilog, !dbg !8784

sw.epilog:                                        ; preds = %if.then, %sw.bb4
  br label %if.end, !dbg !8785

if.end:                                           ; preds = %sw.epilog, %for.body
  br label %for.inc, !dbg !8786

for.inc:                                          ; preds = %if.end
  %8 = load i8*, i8** %fmt.addr, align 8, !dbg !8787
  %incdec.ptr5 = getelementptr inbounds i8, i8* %8, i32 1, !dbg !8787, !ctir !147
  store i8* %incdec.ptr5, i8** %fmt.addr, align 8, !dbg !8787
  br label %for.cond, !dbg !8788, !llvm.loop !8789

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !8791
  br label %return, !dbg !8791

return:                                           ; preds = %for.end, %sw.bb
  %9 = load i8*, i8** %retval, align 8, !dbg !8792
  ret i8* %9, !dbg !8792
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @abmon_init([128 x i8]* %abmon) #0 !dbg !8793 {
entry:
  %retval = alloca i1, align 1
  %abmon.addr = alloca [128 x i8]*, align 8
  %required_mon_width = alloca i64, align 8, !ctir !149
  %curr_max_width = alloca i64, align 8, !ctir !149
  %i = alloca i32, align 4, !ctir !27
  %width = alloca i64, align 8, !ctir !149
  %abbr = alloca i8*, align 8, !ctir !146
  %alignment = alloca i32, align 4, !ctir !707
  %req = alloca i64, align 8, !ctir !149
  store [128 x i8]* %abmon, [128 x i8]** %abmon.addr, align 8
  call void @llvm.dbg.declare(metadata [128 x i8]** %abmon.addr, metadata !8797, metadata !DIExpression()), !dbg !8798
  call void @llvm.dbg.declare(metadata i64* %required_mon_width, metadata !8799, metadata !DIExpression()), !dbg !8800
  store i64 12, i64* %required_mon_width, align 8, !dbg !8800
  call void @llvm.dbg.declare(metadata i64* %curr_max_width, metadata !8801, metadata !DIExpression()), !dbg !8802
  br label %do.body, !dbg !8803

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %required_mon_width, align 8, !dbg !8804
  store i64 %0, i64* %curr_max_width, align 8, !dbg !8806
  store i64 0, i64* %required_mon_width, align 8, !dbg !8807
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8808, metadata !DIExpression()), !dbg !8810
  store i32 0, i32* %i, align 4, !dbg !8810
  br label %for.cond, !dbg !8811

for.cond:                                         ; preds = %for.inc, %do.body
  %1 = load i32, i32* %i, align 4, !dbg !8812
  %cmp = icmp slt i32 %1, 12, !dbg !8814
  br i1 %cmp, label %for.body, label %for.end, !dbg !8815

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %width, metadata !8816, metadata !DIExpression()), !dbg !8818
  %2 = load i64, i64* %curr_max_width, align 8, !dbg !8819
  store i64 %2, i64* %width, align 8, !dbg !8818
  call void @llvm.dbg.declare(metadata i8** %abbr, metadata !8820, metadata !DIExpression()), !dbg !8821
  %3 = load i32, i32* %i, align 4, !dbg !8822
  %add = add nsw i32 131086, %3, !dbg !8823
  %call = call i8* @nl_langinfo(i32 %add) #13, !dbg !8824
  store i8* %call, i8** %abbr, align 8, !dbg !8821
  %4 = load i8*, i8** %abbr, align 8, !dbg !8825
  %call1 = call i8* @strchr(i8* %4, i32 37) #16, !dbg !8827
  %tobool = icmp ne i8* %call1, null, !dbg !8827
  br i1 %tobool, label %if.then, label %if.end, !dbg !8828

if.then:                                          ; preds = %for.body
  store i1 false, i1* %retval, align 1, !dbg !8829
  br label %return, !dbg !8829

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !8830, metadata !DIExpression()), !dbg !8831
  %call2 = call i16** @__ctype_b_loc() #17, !dbg !8832
  %5 = load i16*, i16** %call2, align 8, !dbg !8832, !ctir !708
  %6 = load i8*, i8** %abbr, align 8, !dbg !8832
  %7 = load i8, i8* %6, align 1, !dbg !8832, !ctir !147
  %call3 = call zeroext i8 @to_uchar(i8 signext %7), !dbg !8832
  %conv = zext i8 %call3 to i32, !dbg !8832
  %idxprom = sext i32 %conv to i64, !dbg !8832
  %arrayidx = getelementptr inbounds i16, i16* %5, i64 %idxprom, !dbg !8832, !ctir !708
  %8 = load i16, i16* %arrayidx, align 2, !dbg !8832
  %conv4 = zext i16 %8 to i32, !dbg !8832
  %and = and i32 %conv4, 2048, !dbg !8832
  %tobool5 = icmp ne i32 %and, 0, !dbg !8832
  %9 = zext i1 %tobool5 to i64, !dbg !8832
  %cond = select i1 %tobool5, i32 1, i32 0, !dbg !8832
  store i32 %cond, i32* %alignment, align 4, !dbg !8831
  call void @llvm.dbg.declare(metadata i64* %req, metadata !8833, metadata !DIExpression()), !dbg !8834
  %10 = load i8*, i8** %abbr, align 8, !dbg !8835
  %11 = load [128 x i8]*, [128 x i8]** %abmon.addr, align 8, !dbg !8836
  %12 = load i32, i32* %i, align 4, !dbg !8837
  %idxprom6 = sext i32 %12 to i64, !dbg !8836
  %arrayidx7 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 %idxprom6, !dbg !8836, !ctir !8796
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %arrayidx7, i64 0, i64 0, !dbg !8836, !ctir !705
  %13 = load i32, i32* %alignment, align 4, !dbg !8838
  %call8 = call i64 @mbsalign(i8* %10, i8* %arraydecay, i64 128, i64* %width, i32 %13, i32 0), !dbg !8839
  store i64 %call8, i64* %req, align 8, !dbg !8834
  %14 = load i64, i64* %req, align 8, !dbg !8840
  %cmp9 = icmp ult i64 %14, 128, !dbg !8842
  br i1 %cmp9, label %if.end12, label %if.then11, !dbg !8843

if.then11:                                        ; preds = %if.end
  store i1 false, i1* %retval, align 1, !dbg !8844
  br label %return, !dbg !8844

if.end12:                                         ; preds = %if.end
  %15 = load i64, i64* %required_mon_width, align 8, !dbg !8845
  %16 = load i64, i64* %width, align 8, !dbg !8845
  %cmp13 = icmp ugt i64 %15, %16, !dbg !8845
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !8845

cond.true:                                        ; preds = %if.end12
  %17 = load i64, i64* %required_mon_width, align 8, !dbg !8845
  br label %cond.end, !dbg !8845

cond.false:                                       ; preds = %if.end12
  %18 = load i64, i64* %width, align 8, !dbg !8845
  br label %cond.end, !dbg !8845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond15 = phi i64 [ %17, %cond.true ], [ %18, %cond.false ], !dbg !8845
  store i64 %cond15, i64* %required_mon_width, align 8, !dbg !8846
  br label %for.inc, !dbg !8847

for.inc:                                          ; preds = %cond.end
  %19 = load i32, i32* %i, align 4, !dbg !8848
  %inc = add nsw i32 %19, 1, !dbg !8848
  store i32 %inc, i32* %i, align 4, !dbg !8848
  br label %for.cond, !dbg !8849, !llvm.loop !8850

for.end:                                          ; preds = %for.cond
  br label %do.cond, !dbg !8852

do.cond:                                          ; preds = %for.end
  %20 = load i64, i64* %curr_max_width, align 8, !dbg !8853
  %21 = load i64, i64* %required_mon_width, align 8, !dbg !8854
  %cmp16 = icmp ugt i64 %20, %21, !dbg !8855
  br i1 %cmp16, label %do.body, label %do.end, !dbg !8852, !llvm.loop !8856

do.end:                                           ; preds = %do.cond
  store i1 true, i1* %retval, align 1, !dbg !8858
  br label %return, !dbg !8858

return:                                           ; preds = %do.end, %if.then11, %if.then
  %22 = load i1, i1* %retval, align 1, !dbg !8859
  ret i1 %22, !dbg !8859
}

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_mandatory_arg_note() #0 !dbg !8860 {
entry:
  %call = call i8* @gettext(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.231, i64 0, i64 0)) #13, !dbg !8861
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8861
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !8861
  ret void, !dbg !8862
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_size_note() #0 !dbg !8863 {
entry:
  %call = call i8* @gettext(i8* getelementptr inbounds ([212 x i8], [212 x i8]* @.str.232, i64 0, i64 0)) #13, !dbg !8864
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8864
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !8864
  ret void, !dbg !8865
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8* %program) #0 !dbg !839 {
entry:
  %program.addr = alloca i8*, align 8
  %infomap = alloca [7 x %struct.infomap], align 16, !ctir !835
  %node = alloca i8*, align 8, !ctir !146
  %map_prog = alloca %struct.infomap*, align 8, !ctir !845
  %lc_messages = alloca i8*, align 8, !ctir !146
  store i8* %program, i8** %program.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %program.addr, metadata !8866, metadata !DIExpression()), !dbg !8867
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %infomap, metadata !8868, metadata !DIExpression()), !dbg !8869
  %0 = bitcast [7 x %struct.infomap]* %infomap to i8*, !dbg !8869
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !8869
  call void @llvm.dbg.declare(metadata i8** %node, metadata !8870, metadata !DIExpression()), !dbg !8871
  %1 = load i8*, i8** %program.addr, align 8, !dbg !8872
  store i8* %1, i8** %node, align 8, !dbg !8871
  call void @llvm.dbg.declare(metadata %struct.infomap** %map_prog, metadata !8873, metadata !DIExpression()), !dbg !8874
  %arraydecay = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %infomap, i64 0, i64 0, !dbg !8875, !ctir !835
  store %struct.infomap* %arraydecay, %struct.infomap** %map_prog, align 8, !dbg !8874
  br label %while.cond, !dbg !8876

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !8877
  %program1 = getelementptr inbounds %struct.infomap, %struct.infomap* %2, i32 0, i32 0, !dbg !8878, !ctir !836
  %3 = load i8*, i8** %program1, align 8, !dbg !8878, !ctir !146
  %tobool = icmp ne i8* %3, null, !dbg !8877
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8879

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %program.addr, align 8, !dbg !8880
  %5 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !8880
  %program2 = getelementptr inbounds %struct.infomap, %struct.infomap* %5, i32 0, i32 0, !dbg !8880, !ctir !836
  %6 = load i8*, i8** %program2, align 8, !dbg !8880, !ctir !146
  %call = call i32 @strcmp(i8* %4, i8* %6) #16, !dbg !8880
  %cmp = icmp eq i32 %call, 0, !dbg !8880
  %lnot = xor i1 %cmp, true, !dbg !8881
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !8882
  br i1 %7, label %while.body, label %while.end, !dbg !8876

while.body:                                       ; preds = %land.end
  %8 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !8883
  %incdec.ptr = getelementptr inbounds %struct.infomap, %struct.infomap* %8, i32 1, !dbg !8883, !ctir !836
  store %struct.infomap* %incdec.ptr, %struct.infomap** %map_prog, align 8, !dbg !8883
  br label %while.cond, !dbg !8876, !llvm.loop !8884

while.end:                                        ; preds = %land.end
  %9 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !8885
  %node3 = getelementptr inbounds %struct.infomap, %struct.infomap* %9, i32 0, i32 1, !dbg !8887, !ctir !836
  %10 = load i8*, i8** %node3, align 8, !dbg !8887, !ctir !146
  %tobool4 = icmp ne i8* %10, null, !dbg !8885
  br i1 %tobool4, label %if.then, label %if.end, !dbg !8888

if.then:                                          ; preds = %while.end
  %11 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !8889
  %node5 = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 0, i32 1, !dbg !8890, !ctir !836
  %12 = load i8*, i8** %node5, align 8, !dbg !8890, !ctir !146
  store i8* %12, i8** %node, align 8, !dbg !8891
  br label %if.end, !dbg !8892

if.end:                                           ; preds = %if.then, %while.end
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.241, i64 0, i64 0)) #13, !dbg !8893
  %call7 = call i32 (i8*, ...) @printf(i8* %call6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.242, i64 0, i64 0)), !dbg !8894
  call void @llvm.dbg.declare(metadata i8** %lc_messages, metadata !8895, metadata !DIExpression()), !dbg !8896
  %call8 = call i8* @setlocale(i32 5, i8* null) #13, !dbg !8897
  store i8* %call8, i8** %lc_messages, align 8, !dbg !8896
  %13 = load i8*, i8** %lc_messages, align 8, !dbg !8898
  %tobool9 = icmp ne i8* %13, null, !dbg !8898
  br i1 %tobool9, label %land.lhs.true, label %if.end15, !dbg !8900

land.lhs.true:                                    ; preds = %if.end
  %14 = load i8*, i8** %lc_messages, align 8, !dbg !8901
  %call10 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.243, i64 0, i64 0), i64 3) #16, !dbg !8901
  %tobool11 = icmp ne i32 %call10, 0, !dbg !8901
  br i1 %tobool11, label %if.then12, label %if.end15, !dbg !8902

if.then12:                                        ; preds = %land.lhs.true
  %call13 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.244, i64 0, i64 0)) #13, !dbg !8903
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8903
  %call14 = call i32 @fputs_unlocked(i8* %call13, %struct._IO_FILE* %15), !dbg !8903
  br label %if.end15, !dbg !8905

if.end15:                                         ; preds = %if.then12, %land.lhs.true, %if.end
  %call16 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.245, i64 0, i64 0)) #13, !dbg !8906
  %16 = load i8*, i8** %program.addr, align 8, !dbg !8907
  %call17 = call i32 (i8*, ...) @printf(i8* %call16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.242, i64 0, i64 0), i8* %16), !dbg !8908
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.246, i64 0, i64 0)) #13, !dbg !8909
  %17 = load i8*, i8** %node, align 8, !dbg !8910
  %18 = load i8*, i8** %node, align 8, !dbg !8911
  %19 = load i8*, i8** %program.addr, align 8, !dbg !8912
  %cmp19 = icmp eq i8* %18, %19, !dbg !8913
  %20 = zext i1 %cmp19 to i64, !dbg !8911
  %cond = select i1 %cmp19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.247, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), !dbg !8911
  %call20 = call i32 (i8*, ...) @printf(i8* %call18, i8* %17, i8* %cond), !dbg !8914
  ret void, !dbg !8915
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @areadlink_with_size(i8* %file, i64 %size) #0 !dbg !8916 {
entry:
  %retval = alloca i8*, align 8
  %file.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %symlink_max = alloca i64, align 8, !ctir !149
  %INITIAL_LIMIT_BOUND = alloca i64, align 8, !ctir !149
  %initial_limit = alloca i64, align 8, !ctir !149
  %buf_size = alloca i64, align 8, !ctir !149
  %r = alloca i64, align 8, !ctir !1514
  %link_length = alloca i64, align 8, !ctir !149
  %buffer = alloca i8*, align 8, !ctir !143
  %saved_errno = alloca i32, align 4, !ctir !27
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !8920, metadata !DIExpression()), !dbg !8921
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !8922, metadata !DIExpression()), !dbg !8923
  call void @llvm.dbg.declare(metadata i64* %symlink_max, metadata !8924, metadata !DIExpression()), !dbg !8925
  store i64 1024, i64* %symlink_max, align 8, !dbg !8925
  call void @llvm.dbg.declare(metadata i64* %INITIAL_LIMIT_BOUND, metadata !8926, metadata !DIExpression()), !dbg !8927
  store i64 8192, i64* %INITIAL_LIMIT_BOUND, align 8, !dbg !8927
  call void @llvm.dbg.declare(metadata i64* %initial_limit, metadata !8928, metadata !DIExpression()), !dbg !8929
  %0 = load i64, i64* %symlink_max, align 8, !dbg !8930
  %1 = load i64, i64* %INITIAL_LIMIT_BOUND, align 8, !dbg !8931
  %cmp = icmp ult i64 %0, %1, !dbg !8932
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8930

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %symlink_max, align 8, !dbg !8933
  %add = add i64 %2, 1, !dbg !8934
  br label %cond.end, !dbg !8930

cond.false:                                       ; preds = %entry
  %3 = load i64, i64* %INITIAL_LIMIT_BOUND, align 8, !dbg !8935
  br label %cond.end, !dbg !8930

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %3, %cond.false ], !dbg !8930
  store i64 %cond, i64* %initial_limit, align 8, !dbg !8929
  call void @llvm.dbg.declare(metadata i64* %buf_size, metadata !8936, metadata !DIExpression()), !dbg !8937
  %4 = load i64, i64* %size.addr, align 8, !dbg !8938
  %5 = load i64, i64* %initial_limit, align 8, !dbg !8939
  %cmp1 = icmp ult i64 %4, %5, !dbg !8940
  br i1 %cmp1, label %cond.true2, label %cond.false4, !dbg !8938

cond.true2:                                       ; preds = %cond.end
  %6 = load i64, i64* %size.addr, align 8, !dbg !8941
  %add3 = add i64 %6, 1, !dbg !8942
  br label %cond.end5, !dbg !8938

cond.false4:                                      ; preds = %cond.end
  %7 = load i64, i64* %initial_limit, align 8, !dbg !8943
  br label %cond.end5, !dbg !8938

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi i64 [ %add3, %cond.true2 ], [ %7, %cond.false4 ], !dbg !8938
  store i64 %cond6, i64* %buf_size, align 8, !dbg !8937
  br label %while.body, !dbg !8944

while.body:                                       ; preds = %cond.end5, %if.end26
  call void @llvm.dbg.declare(metadata i64* %r, metadata !8945, metadata !DIExpression()), !dbg !8947
  call void @llvm.dbg.declare(metadata i64* %link_length, metadata !8948, metadata !DIExpression()), !dbg !8949
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !8950, metadata !DIExpression()), !dbg !8951
  %8 = load i64, i64* %buf_size, align 8, !dbg !8952
  %call = call noalias i8* @malloc(i64 %8) #13, !dbg !8953
  store i8* %call, i8** %buffer, align 8, !dbg !8951
  %9 = load i8*, i8** %buffer, align 8, !dbg !8954
  %cmp7 = icmp eq i8* %9, null, !dbg !8956
  br i1 %cmp7, label %if.then, label %if.end, !dbg !8957

if.then:                                          ; preds = %while.body
  store i8* null, i8** %retval, align 8, !dbg !8958
  br label %return, !dbg !8958

if.end:                                           ; preds = %while.body
  %10 = load i8*, i8** %file.addr, align 8, !dbg !8959
  %11 = load i8*, i8** %buffer, align 8, !dbg !8960
  %12 = load i64, i64* %buf_size, align 8, !dbg !8961
  %call8 = call i64 @readlink(i8* %10, i8* %11, i64 %12) #13, !dbg !8962
  store i64 %call8, i64* %r, align 8, !dbg !8963
  %13 = load i64, i64* %r, align 8, !dbg !8964
  store i64 %13, i64* %link_length, align 8, !dbg !8965
  %14 = load i64, i64* %r, align 8, !dbg !8966
  %cmp9 = icmp slt i64 %14, 0, !dbg !8968
  br i1 %cmp9, label %land.lhs.true, label %if.end15, !dbg !8969

land.lhs.true:                                    ; preds = %if.end
  %call10 = call i32* @__errno_location() #17, !dbg !8970
  %15 = load i32, i32* %call10, align 4, !dbg !8970, !ctir !27
  %cmp11 = icmp ne i32 %15, 34, !dbg !8971
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !8972

if.then12:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !8973, metadata !DIExpression()), !dbg !8975
  %call13 = call i32* @__errno_location() #17, !dbg !8976
  %16 = load i32, i32* %call13, align 4, !dbg !8976, !ctir !27
  store i32 %16, i32* %saved_errno, align 4, !dbg !8975
  %17 = load i8*, i8** %buffer, align 8, !dbg !8977
  call void @free(i8* %17) #13, !dbg !8978
  %18 = load i32, i32* %saved_errno, align 4, !dbg !8979
  %call14 = call i32* @__errno_location() #17, !dbg !8980
  store i32 %18, i32* %call14, align 4, !dbg !8981, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !8982
  br label %return, !dbg !8982

if.end15:                                         ; preds = %land.lhs.true, %if.end
  %19 = load i64, i64* %link_length, align 8, !dbg !8983
  %20 = load i64, i64* %buf_size, align 8, !dbg !8985
  %cmp16 = icmp ult i64 %19, %20, !dbg !8986
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !8987

if.then17:                                        ; preds = %if.end15
  %21 = load i8*, i8** %buffer, align 8, !dbg !8988
  %22 = load i64, i64* %link_length, align 8, !dbg !8990
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 %22, !dbg !8988, !ctir !143
  store i8 0, i8* %arrayidx, align 1, !dbg !8991
  %23 = load i8*, i8** %buffer, align 8, !dbg !8992
  store i8* %23, i8** %retval, align 8, !dbg !8993
  br label %return, !dbg !8993

if.end18:                                         ; preds = %if.end15
  %24 = load i8*, i8** %buffer, align 8, !dbg !8994
  call void @free(i8* %24) #13, !dbg !8995
  %25 = load i64, i64* %buf_size, align 8, !dbg !8996
  %cmp19 = icmp ule i64 %25, 4611686018427387903, !dbg !8998
  br i1 %cmp19, label %if.then20, label %if.else, !dbg !8999

if.then20:                                        ; preds = %if.end18
  %26 = load i64, i64* %buf_size, align 8, !dbg !9000
  %mul = mul i64 %26, 2, !dbg !9000
  store i64 %mul, i64* %buf_size, align 8, !dbg !9000
  br label %if.end26, !dbg !9001

if.else:                                          ; preds = %if.end18
  %27 = load i64, i64* %buf_size, align 8, !dbg !9002
  %cmp21 = icmp ult i64 %27, 9223372036854775807, !dbg !9004
  br i1 %cmp21, label %if.then22, label %if.else23, !dbg !9005

if.then22:                                        ; preds = %if.else
  store i64 9223372036854775807, i64* %buf_size, align 8, !dbg !9006
  br label %if.end25, !dbg !9007

if.else23:                                        ; preds = %if.else
  %call24 = call i32* @__errno_location() #17, !dbg !9008
  store i32 12, i32* %call24, align 4, !dbg !9010, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !9011
  br label %return, !dbg !9011

if.end25:                                         ; preds = %if.then22
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then20
  br label %while.body, !dbg !8944, !llvm.loop !9012

return:                                           ; preds = %if.else23, %if.then17, %if.then12, %if.then
  %28 = load i8*, i8** %retval, align 8, !dbg !9014
  ret i8* %28, !dbg !9014
}

; Function Attrs: nounwind
declare dso_local i64 @readlink(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__argmatch_die() #0 !dbg !9015 {
entry:
  call void @usage(i32 1), !dbg !9016
  ret void, !dbg !9017
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @argmatch(i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize) #9 !dbg !9018 {
entry:
  %retval = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !149
  %arglen = alloca i64, align 8, !ctir !149
  %matchind = alloca i64, align 8, !ctir !687
  %ambiguous = alloca i8, align 1, !ctir !141
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !9021, metadata !DIExpression()), !dbg !9022
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9023, metadata !DIExpression()), !dbg !9024
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9025, metadata !DIExpression()), !dbg !9026
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9027, metadata !DIExpression()), !dbg !9028
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9029, metadata !DIExpression()), !dbg !9030
  call void @llvm.dbg.declare(metadata i64* %arglen, metadata !9031, metadata !DIExpression()), !dbg !9032
  call void @llvm.dbg.declare(metadata i64* %matchind, metadata !9033, metadata !DIExpression()), !dbg !9034
  store i64 -1, i64* %matchind, align 8, !dbg !9034
  call void @llvm.dbg.declare(metadata i8* %ambiguous, metadata !9035, metadata !DIExpression()), !dbg !9036
  store i8 0, i8* %ambiguous, align 1, !dbg !9036
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !9037
  %call = call i64 @strlen(i8* %0) #16, !dbg !9038
  store i64 %call, i64* %arglen, align 8, !dbg !9039
  store i64 0, i64* %i, align 8, !dbg !9040
  br label %for.cond, !dbg !9042

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9043
  %2 = load i64, i64* %i, align 8, !dbg !9045
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2, !dbg !9043, !ctir !693
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !9043
  %tobool = icmp ne i8* %3, null, !dbg !9046
  br i1 %tobool, label %for.body, label %for.end, !dbg !9046

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %arglist.addr, align 8, !dbg !9047
  %5 = load i64, i64* %i, align 8, !dbg !9050
  %arrayidx1 = getelementptr inbounds i8*, i8** %4, i64 %5, !dbg !9047, !ctir !693
  %6 = load i8*, i8** %arrayidx1, align 8, !dbg !9047
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !9051
  %8 = load i64, i64* %arglen, align 8, !dbg !9052
  %call2 = call i32 @strncmp(i8* %6, i8* %7, i64 %8) #16, !dbg !9053
  %tobool3 = icmp ne i32 %call2, 0, !dbg !9053
  br i1 %tobool3, label %if.end18, label %if.then, !dbg !9054

if.then:                                          ; preds = %for.body
  %9 = load i8**, i8*** %arglist.addr, align 8, !dbg !9055
  %10 = load i64, i64* %i, align 8, !dbg !9058
  %arrayidx4 = getelementptr inbounds i8*, i8** %9, i64 %10, !dbg !9055, !ctir !693
  %11 = load i8*, i8** %arrayidx4, align 8, !dbg !9055
  %call5 = call i64 @strlen(i8* %11) #16, !dbg !9059
  %12 = load i64, i64* %arglen, align 8, !dbg !9060
  %cmp = icmp eq i64 %call5, %12, !dbg !9061
  br i1 %cmp, label %if.then6, label %if.else, !dbg !9062

if.then6:                                         ; preds = %if.then
  %13 = load i64, i64* %i, align 8, !dbg !9063
  store i64 %13, i64* %retval, align 8, !dbg !9064
  br label %return, !dbg !9064

if.else:                                          ; preds = %if.then
  %14 = load i64, i64* %matchind, align 8, !dbg !9065
  %cmp7 = icmp eq i64 %14, -1, !dbg !9067
  br i1 %cmp7, label %if.then8, label %if.else9, !dbg !9068

if.then8:                                         ; preds = %if.else
  %15 = load i64, i64* %i, align 8, !dbg !9069
  store i64 %15, i64* %matchind, align 8, !dbg !9070
  br label %if.end16, !dbg !9071

if.else9:                                         ; preds = %if.else
  %16 = load i8*, i8** %vallist.addr, align 8, !dbg !9072
  %cmp10 = icmp eq i8* %16, null, !dbg !9075
  br i1 %cmp10, label %if.then15, label %lor.lhs.false, !dbg !9076

lor.lhs.false:                                    ; preds = %if.else9
  %17 = load i8*, i8** %vallist.addr, align 8, !dbg !9077
  %18 = load i64, i64* %valsize.addr, align 8, !dbg !9078
  %19 = load i64, i64* %matchind, align 8, !dbg !9079
  %mul = mul i64 %18, %19, !dbg !9080
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %mul, !dbg !9081, !ctir !147
  %20 = load i8*, i8** %vallist.addr, align 8, !dbg !9082
  %21 = load i64, i64* %valsize.addr, align 8, !dbg !9083
  %22 = load i64, i64* %i, align 8, !dbg !9084
  %mul11 = mul i64 %21, %22, !dbg !9085
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %mul11, !dbg !9086, !ctir !147
  %23 = load i64, i64* %valsize.addr, align 8, !dbg !9087
  %call13 = call i32 @memcmp(i8* %add.ptr, i8* %add.ptr12, i64 %23) #16, !dbg !9088
  %tobool14 = icmp ne i32 %call13, 0, !dbg !9088
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !9089

if.then15:                                        ; preds = %lor.lhs.false, %if.else9
  store i8 1, i8* %ambiguous, align 1, !dbg !9090
  br label %if.end, !dbg !9092

if.end:                                           ; preds = %if.then15, %lor.lhs.false
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then8
  br label %if.end17

if.end17:                                         ; preds = %if.end16
  br label %if.end18, !dbg !9093

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc, !dbg !9094

for.inc:                                          ; preds = %if.end18
  %24 = load i64, i64* %i, align 8, !dbg !9095
  %inc = add i64 %24, 1, !dbg !9095
  store i64 %inc, i64* %i, align 8, !dbg !9095
  br label %for.cond, !dbg !9096, !llvm.loop !9097

for.end:                                          ; preds = %for.cond
  %25 = load i8, i8* %ambiguous, align 1, !dbg !9099
  %tobool19 = trunc i8 %25 to i1, !dbg !9099
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !9101

if.then20:                                        ; preds = %for.end
  store i64 -2, i64* %retval, align 8, !dbg !9102
  br label %return, !dbg !9102

if.else21:                                        ; preds = %for.end
  %26 = load i64, i64* %matchind, align 8, !dbg !9103
  store i64 %26, i64* %retval, align 8, !dbg !9104
  br label %return, !dbg !9104

return:                                           ; preds = %if.else21, %if.then20, %if.then6
  %27 = load i64, i64* %retval, align 8, !dbg !9105
  ret i64 %27, !dbg !9105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @argmatch_invalid(i8* %context, i8* %value, i64 %problem) #0 !dbg !9106 {
entry:
  %context.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %problem.addr = alloca i64, align 8
  %format = alloca i8*, align 8, !ctir !146
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !9109, metadata !DIExpression()), !dbg !9110
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !9111, metadata !DIExpression()), !dbg !9112
  store i64 %problem, i64* %problem.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %problem.addr, metadata !9113, metadata !DIExpression()), !dbg !9114
  call void @llvm.dbg.declare(metadata i8** %format, metadata !9115, metadata !DIExpression()), !dbg !9116
  %0 = load i64, i64* %problem.addr, align 8, !dbg !9117
  %cmp = icmp eq i64 %0, -1, !dbg !9118
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9117

cond.true:                                        ; preds = %entry
  %call = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.257, i64 0, i64 0)) #13, !dbg !9119
  br label %cond.end, !dbg !9117

cond.false:                                       ; preds = %entry
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.258, i64 0, i64 0)) #13, !dbg !9120
  br label %cond.end, !dbg !9117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %call1, %cond.false ], !dbg !9117
  store i8* %cond, i8** %format, align 8, !dbg !9116
  %1 = load i8*, i8** %format, align 8, !dbg !9121
  %2 = load i8*, i8** %value.addr, align 8, !dbg !9122
  %call2 = call i8* @quotearg_n_style(i32 0, i32 8, i8* %2), !dbg !9123
  %3 = load i8*, i8** %context.addr, align 8, !dbg !9124
  %call3 = call i8* @quote_n(i32 1, i8* %3), !dbg !9125
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %1, i8* %call2, i8* %call3), !dbg !9126
  ret void, !dbg !9127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @argmatch_valid(i8** %arglist, i8* %vallist, i64 %valsize) #0 !dbg !9128 {
entry:
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !149
  %last_val = alloca i8*, align 8, !ctir !146
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9131, metadata !DIExpression()), !dbg !9132
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9133, metadata !DIExpression()), !dbg !9134
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9135, metadata !DIExpression()), !dbg !9136
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9137, metadata !DIExpression()), !dbg !9138
  call void @llvm.dbg.declare(metadata i8** %last_val, metadata !9139, metadata !DIExpression()), !dbg !9140
  store i8* null, i8** %last_val, align 8, !dbg !9140
  %call = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.259, i64 0, i64 0)) #13, !dbg !9141
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9141
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !9141
  store i64 0, i64* %i, align 8, !dbg !9142
  br label %for.cond, !dbg !9144

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9145
  %2 = load i64, i64* %i, align 8, !dbg !9147
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2, !dbg !9145, !ctir !693
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !9145
  %tobool = icmp ne i8* %3, null, !dbg !9148
  br i1 %tobool, label %for.body, label %for.end, !dbg !9148

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8, !dbg !9149
  %cmp = icmp eq i64 %4, 0, !dbg !9151
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9152

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i8*, i8** %last_val, align 8, !dbg !9153
  %6 = load i8*, i8** %vallist.addr, align 8, !dbg !9154
  %7 = load i64, i64* %valsize.addr, align 8, !dbg !9155
  %8 = load i64, i64* %i, align 8, !dbg !9156
  %mul = mul i64 %7, %8, !dbg !9157
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %mul, !dbg !9158, !ctir !147
  %9 = load i64, i64* %valsize.addr, align 8, !dbg !9159
  %call2 = call i32 @memcmp(i8* %5, i8* %add.ptr, i64 %9) #16, !dbg !9160
  %tobool3 = icmp ne i32 %call2, 0, !dbg !9160
  br i1 %tobool3, label %if.then, label %if.else, !dbg !9161

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9162
  %11 = load i8**, i8*** %arglist.addr, align 8, !dbg !9164
  %12 = load i64, i64* %i, align 8, !dbg !9165
  %arrayidx4 = getelementptr inbounds i8*, i8** %11, i64 %12, !dbg !9164, !ctir !693
  %13 = load i8*, i8** %arrayidx4, align 8, !dbg !9164
  %call5 = call i8* @quote(i8* %13), !dbg !9166
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.260, i64 0, i64 0), i8* %call5), !dbg !9167
  %14 = load i8*, i8** %vallist.addr, align 8, !dbg !9168
  %15 = load i64, i64* %valsize.addr, align 8, !dbg !9169
  %16 = load i64, i64* %i, align 8, !dbg !9170
  %mul7 = mul i64 %15, %16, !dbg !9171
  %add.ptr8 = getelementptr inbounds i8, i8* %14, i64 %mul7, !dbg !9172, !ctir !147
  store i8* %add.ptr8, i8** %last_val, align 8, !dbg !9173
  br label %if.end, !dbg !9174

if.else:                                          ; preds = %lor.lhs.false
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9175
  %18 = load i8**, i8*** %arglist.addr, align 8, !dbg !9177
  %19 = load i64, i64* %i, align 8, !dbg !9178
  %arrayidx9 = getelementptr inbounds i8*, i8** %18, i64 %19, !dbg !9177, !ctir !693
  %20 = load i8*, i8** %arrayidx9, align 8, !dbg !9177
  %call10 = call i8* @quote(i8* %20), !dbg !9179
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.261, i64 0, i64 0), i8* %call10), !dbg !9180
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !9181

for.inc:                                          ; preds = %if.end
  %21 = load i64, i64* %i, align 8, !dbg !9182
  %inc = add i64 %21, 1, !dbg !9182
  store i64 %inc, i64* %i, align 8, !dbg !9182
  br label %for.cond, !dbg !9183, !llvm.loop !9184

for.end:                                          ; preds = %for.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9186
  %call12 = call i32 @putc_unlocked(i32 10, %struct._IO_FILE* %22), !dbg !9186
  ret void, !dbg !9187
}

declare dso_local i32 @putc_unlocked(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @__xargmatch_internal(i8* %context, i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize, void ()* %exit_fn) #0 !dbg !9188 {
entry:
  %retval = alloca i64, align 8
  %context.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %exit_fn.addr = alloca void ()*, align 8
  %res = alloca i64, align 8, !ctir !687
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !9191, metadata !DIExpression()), !dbg !9192
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !9193, metadata !DIExpression()), !dbg !9194
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9195, metadata !DIExpression()), !dbg !9196
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9197, metadata !DIExpression()), !dbg !9198
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9199, metadata !DIExpression()), !dbg !9200
  store void ()* %exit_fn, void ()** %exit_fn.addr, align 8
  call void @llvm.dbg.declare(metadata void ()** %exit_fn.addr, metadata !9201, metadata !DIExpression()), !dbg !9202
  call void @llvm.dbg.declare(metadata i64* %res, metadata !9203, metadata !DIExpression()), !dbg !9204
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !9205
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9206
  %2 = load i8*, i8** %vallist.addr, align 8, !dbg !9207
  %3 = load i64, i64* %valsize.addr, align 8, !dbg !9208
  %call = call i64 @argmatch(i8* %0, i8** %1, i8* %2, i64 %3) #16, !dbg !9209
  store i64 %call, i64* %res, align 8, !dbg !9204
  %4 = load i64, i64* %res, align 8, !dbg !9210
  %cmp = icmp sge i64 %4, 0, !dbg !9212
  br i1 %cmp, label %if.then, label %if.end, !dbg !9213

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %res, align 8, !dbg !9214
  store i64 %5, i64* %retval, align 8, !dbg !9215
  br label %return, !dbg !9215

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %context.addr, align 8, !dbg !9216
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !9217
  %8 = load i64, i64* %res, align 8, !dbg !9218
  call void @argmatch_invalid(i8* %6, i8* %7, i64 %8), !dbg !9219
  %9 = load i8**, i8*** %arglist.addr, align 8, !dbg !9220
  %10 = load i8*, i8** %vallist.addr, align 8, !dbg !9221
  %11 = load i64, i64* %valsize.addr, align 8, !dbg !9222
  call void @argmatch_valid(i8** %9, i8* %10, i64 %11), !dbg !9223
  %12 = load void ()*, void ()** %exit_fn.addr, align 8, !dbg !9224
  call void %12(), !dbg !9225
  store i64 -1, i64* %retval, align 8, !dbg !9226
  br label %return, !dbg !9226

return:                                           ; preds = %if.end, %if.then
  %13 = load i64, i64* %retval, align 8, !dbg !9227
  ret i64 %13, !dbg !9227
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i8* @argmatch_to_argument(i8* %value, i8** %arglist, i8* %vallist, i64 %valsize) #9 !dbg !9228 {
entry:
  %retval = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !149
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !9231, metadata !DIExpression()), !dbg !9232
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9233, metadata !DIExpression()), !dbg !9234
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9235, metadata !DIExpression()), !dbg !9236
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9237, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9239, metadata !DIExpression()), !dbg !9240
  store i64 0, i64* %i, align 8, !dbg !9241
  br label %for.cond, !dbg !9243

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8**, i8*** %arglist.addr, align 8, !dbg !9244
  %1 = load i64, i64* %i, align 8, !dbg !9246
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !9244, !ctir !693
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !9244
  %tobool = icmp ne i8* %2, null, !dbg !9247
  br i1 %tobool, label %for.body, label %for.end, !dbg !9247

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %value.addr, align 8, !dbg !9248
  %4 = load i8*, i8** %vallist.addr, align 8, !dbg !9250
  %5 = load i64, i64* %valsize.addr, align 8, !dbg !9251
  %6 = load i64, i64* %i, align 8, !dbg !9252
  %mul = mul i64 %5, %6, !dbg !9253
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %mul, !dbg !9254, !ctir !147
  %7 = load i64, i64* %valsize.addr, align 8, !dbg !9255
  %call = call i32 @memcmp(i8* %3, i8* %add.ptr, i64 %7) #16, !dbg !9256
  %tobool1 = icmp ne i32 %call, 0, !dbg !9256
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9257

if.then:                                          ; preds = %for.body
  %8 = load i8**, i8*** %arglist.addr, align 8, !dbg !9258
  %9 = load i64, i64* %i, align 8, !dbg !9259
  %arrayidx2 = getelementptr inbounds i8*, i8** %8, i64 %9, !dbg !9258, !ctir !693
  %10 = load i8*, i8** %arrayidx2, align 8, !dbg !9258
  store i8* %10, i8** %retval, align 8, !dbg !9260
  br label %return, !dbg !9260

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9261

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %i, align 8, !dbg !9262
  %inc = add i64 %11, 1, !dbg !9262
  store i64 %inc, i64* %i, align 8, !dbg !9262
  br label %for.cond, !dbg !9263, !llvm.loop !9264

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !9266
  br label %return, !dbg !9266

return:                                           ; preds = %for.end, %if.then
  %12 = load i8*, i8** %retval, align 8, !dbg !9267
  ret i8* %12, !dbg !9267
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isalnum(i32 %c) #0 !dbg !9268 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9270, metadata !DIExpression()), !dbg !9271
  %0 = load i32, i32* %c.addr, align 4, !dbg !9272
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9273

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9274
  br label %return, !dbg !9274

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9276
  br label %return, !dbg !9276

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9277
  ret i1 %1, !dbg !9277
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isalpha(i32 %c) #0 !dbg !9278 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9279, metadata !DIExpression()), !dbg !9280
  %0 = load i32, i32* %c.addr, align 4, !dbg !9281
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9282

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9283
  br label %return, !dbg !9283

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9285
  br label %return, !dbg !9285

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9286
  ret i1 %1, !dbg !9286
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isascii(i32 %c) #0 !dbg !9287 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9288, metadata !DIExpression()), !dbg !9289
  %0 = load i32, i32* %c.addr, align 4, !dbg !9290
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9291

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9292
  br label %return, !dbg !9292

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9294
  br label %return, !dbg !9294

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9295
  ret i1 %1, !dbg !9295
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isblank(i32 %c) #0 !dbg !9296 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9297, metadata !DIExpression()), !dbg !9298
  %0 = load i32, i32* %c.addr, align 4, !dbg !9299
  %cmp = icmp eq i32 %0, 32, !dbg !9300
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !9301

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !9302
  %cmp1 = icmp eq i32 %1, 9, !dbg !9303
  br label %lor.end, !dbg !9301

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  ret i1 %2, !dbg !9304
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_iscntrl(i32 %c) #0 !dbg !9305 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9306, metadata !DIExpression()), !dbg !9307
  %0 = load i32, i32* %c.addr, align 4, !dbg !9308
  switch i32 %0, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
  ], !dbg !9309

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9310
  br label %return, !dbg !9310

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9312
  br label %return, !dbg !9312

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9313
  ret i1 %1, !dbg !9313
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isdigit(i32 %c) #0 !dbg !9314 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  %0 = load i32, i32* %c.addr, align 4, !dbg !9317
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
  ], !dbg !9318

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9319
  br label %return, !dbg !9319

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9321
  br label %return, !dbg !9321

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9322
  ret i1 %1, !dbg !9322
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isgraph(i32 %c) #0 !dbg !9323 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9324, metadata !DIExpression()), !dbg !9325
  %0 = load i32, i32* %c.addr, align 4, !dbg !9326
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9327

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9328
  br label %return, !dbg !9328

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9330
  br label %return, !dbg !9330

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9331
  ret i1 %1, !dbg !9331
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_islower(i32 %c) #0 !dbg !9332 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9333, metadata !DIExpression()), !dbg !9334
  %0 = load i32, i32* %c.addr, align 4, !dbg !9335
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ], !dbg !9336

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9337
  br label %return, !dbg !9337

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9339
  br label %return, !dbg !9339

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9340
  ret i1 %1, !dbg !9340
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isprint(i32 %c) #0 !dbg !9341 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9342, metadata !DIExpression()), !dbg !9343
  %0 = load i32, i32* %c.addr, align 4, !dbg !9344
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9345

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9346
  br label %return, !dbg !9346

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9348
  br label %return, !dbg !9348

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9349
  ret i1 %1, !dbg !9349
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_ispunct(i32 %c) #0 !dbg !9350 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9351, metadata !DIExpression()), !dbg !9352
  %0 = load i32, i32* %c.addr, align 4, !dbg !9353
  switch i32 %0, label %sw.default [
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ], !dbg !9354

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9355
  br label %return, !dbg !9355

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9357
  br label %return, !dbg !9357

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9358
  ret i1 %1, !dbg !9358
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isspace(i32 %c) #0 !dbg !9359 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9360, metadata !DIExpression()), !dbg !9361
  %0 = load i32, i32* %c.addr, align 4, !dbg !9362
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !9363

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9364
  br label %return, !dbg !9364

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9366
  br label %return, !dbg !9366

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9367
  ret i1 %1, !dbg !9367
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isupper(i32 %c) #0 !dbg !9368 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9369, metadata !DIExpression()), !dbg !9370
  %0 = load i32, i32* %c.addr, align 4, !dbg !9371
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9372

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9373
  br label %return, !dbg !9373

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9375
  br label %return, !dbg !9375

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9376
  ret i1 %1, !dbg !9376
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isxdigit(i32 %c) #0 !dbg !9377 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  %0 = load i32, i32* %c.addr, align 4, !dbg !9380
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
  ], !dbg !9381

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !9382
  br label %return, !dbg !9382

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !9384
  br label %return, !dbg !9384

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !9385
  ret i1 %1, !dbg !9385
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c_tolower(i32 %c) #0 !dbg !9386 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9389, metadata !DIExpression()), !dbg !9390
  %0 = load i32, i32* %c.addr, align 4, !dbg !9391
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !9392

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !9393
  %sub = sub nsw i32 %1, 65, !dbg !9395
  %add = add nsw i32 %sub, 97, !dbg !9396
  store i32 %add, i32* %retval, align 4, !dbg !9397
  br label %return, !dbg !9397

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !9398
  store i32 %2, i32* %retval, align 4, !dbg !9399
  br label %return, !dbg !9399

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4, !dbg !9400
  ret i32 %3, !dbg !9400
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c_toupper(i32 %c) #0 !dbg !9401 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !9402, metadata !DIExpression()), !dbg !9403
  %0 = load i32, i32* %c.addr, align 4, !dbg !9404
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ], !dbg !9405

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !9406
  %sub = sub nsw i32 %1, 97, !dbg !9408
  %add = add nsw i32 %sub, 65, !dbg !9409
  store i32 %add, i32* %retval, align 4, !dbg !9410
  br label %return, !dbg !9410

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !9411
  store i32 %2, i32* %retval, align 4, !dbg !9412
  br label %return, !dbg !9412

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4, !dbg !9413
  ret i32 %3, !dbg !9413
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @c_strncasecmp(i8* %s1, i8* %s2, i64 %n) #9 !dbg !9414 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p1 = alloca i8*, align 8, !ctir !1521
  %p2 = alloca i8*, align 8, !ctir !1521
  %c1 = alloca i8, align 1, !ctir !737
  %c2 = alloca i8, align 1, !ctir !737
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !9418, metadata !DIExpression()), !dbg !9419
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !9420, metadata !DIExpression()), !dbg !9421
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !9422, metadata !DIExpression()), !dbg !9423
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !9424, metadata !DIExpression()), !dbg !9425
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !9426
  store i8* %0, i8** %p1, align 8, !dbg !9425
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !9427, metadata !DIExpression()), !dbg !9428
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !9429
  store i8* %1, i8** %p2, align 8, !dbg !9428
  call void @llvm.dbg.declare(metadata i8* %c1, metadata !9430, metadata !DIExpression()), !dbg !9431
  call void @llvm.dbg.declare(metadata i8* %c2, metadata !9432, metadata !DIExpression()), !dbg !9433
  %2 = load i8*, i8** %p1, align 8, !dbg !9434
  %3 = load i8*, i8** %p2, align 8, !dbg !9436
  %cmp = icmp eq i8* %2, %3, !dbg !9437
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9438

lor.lhs.false:                                    ; preds = %entry
  %4 = load i64, i64* %n.addr, align 8, !dbg !9439
  %cmp1 = icmp eq i64 %4, 0, !dbg !9440
  br i1 %cmp1, label %if.then, label %if.end, !dbg !9441

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !9442
  br label %return, !dbg !9442

if.end:                                           ; preds = %lor.lhs.false
  br label %do.body, !dbg !9443

do.body:                                          ; preds = %do.cond, %if.end
  %5 = load i8*, i8** %p1, align 8, !dbg !9444
  %6 = load i8, i8* %5, align 1, !dbg !9446, !ctir !1522
  %conv = zext i8 %6 to i32, !dbg !9446
  %call = call i32 @c_tolower(i32 %conv), !dbg !9447
  %conv2 = trunc i32 %call to i8, !dbg !9447
  store i8 %conv2, i8* %c1, align 1, !dbg !9448
  %7 = load i8*, i8** %p2, align 8, !dbg !9449
  %8 = load i8, i8* %7, align 1, !dbg !9450, !ctir !1522
  %conv3 = zext i8 %8 to i32, !dbg !9450
  %call4 = call i32 @c_tolower(i32 %conv3), !dbg !9451
  %conv5 = trunc i32 %call4 to i8, !dbg !9451
  store i8 %conv5, i8* %c2, align 1, !dbg !9452
  %9 = load i64, i64* %n.addr, align 8, !dbg !9453
  %dec = add i64 %9, -1, !dbg !9453
  store i64 %dec, i64* %n.addr, align 8, !dbg !9453
  %cmp6 = icmp eq i64 %dec, 0, !dbg !9455
  br i1 %cmp6, label %if.then12, label %lor.lhs.false8, !dbg !9456

lor.lhs.false8:                                   ; preds = %do.body
  %10 = load i8, i8* %c1, align 1, !dbg !9457
  %conv9 = zext i8 %10 to i32, !dbg !9457
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !9458
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !9459

if.then12:                                        ; preds = %lor.lhs.false8, %do.body
  br label %do.end, !dbg !9460

if.end13:                                         ; preds = %lor.lhs.false8
  %11 = load i8*, i8** %p1, align 8, !dbg !9461
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !9461, !ctir !1522
  store i8* %incdec.ptr, i8** %p1, align 8, !dbg !9461
  %12 = load i8*, i8** %p2, align 8, !dbg !9462
  %incdec.ptr14 = getelementptr inbounds i8, i8* %12, i32 1, !dbg !9462, !ctir !1522
  store i8* %incdec.ptr14, i8** %p2, align 8, !dbg !9462
  br label %do.cond, !dbg !9463

do.cond:                                          ; preds = %if.end13
  %13 = load i8, i8* %c1, align 1, !dbg !9464
  %conv15 = zext i8 %13 to i32, !dbg !9464
  %14 = load i8, i8* %c2, align 1, !dbg !9465
  %conv16 = zext i8 %14 to i32, !dbg !9465
  %cmp17 = icmp eq i32 %conv15, %conv16, !dbg !9466
  br i1 %cmp17, label %do.body, label %do.end, !dbg !9463, !llvm.loop !9467

do.end:                                           ; preds = %do.cond, %if.then12
  %15 = load i8, i8* %c1, align 1, !dbg !9469
  %conv19 = zext i8 %15 to i32, !dbg !9469
  %16 = load i8, i8* %c2, align 1, !dbg !9471
  %conv20 = zext i8 %16 to i32, !dbg !9471
  %sub = sub nsw i32 %conv19, %conv20, !dbg !9472
  store i32 %sub, i32* %retval, align 4, !dbg !9473
  br label %return, !dbg !9473

return:                                           ; preds = %do.end, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !9474
  ret i32 %17, !dbg !9474
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @canonicalize_filename_mode(i8* %name, i32 %can_mode) #0 !dbg !9475 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %can_mode.addr = alloca i32, align 4
  %rname = alloca i8*, align 8, !ctir !143
  %dest = alloca i8*, align 8, !ctir !143
  %extra_buf = alloca i8*, align 8, !ctir !143
  %start = alloca i8*, align 8, !ctir !146
  %end = alloca i8*, align 8, !ctir !146
  %rname_limit = alloca i8*, align 8, !ctir !146
  %extra_len = alloca i64, align 8, !ctir !149
  %ht = alloca %struct.hash_table*, align 8, !ctir !251
  %saved_errno = alloca i32, align 4, !ctir !27
  %can_flags = alloca i32, align 4, !ctir !27
  %logical = alloca i8, align 1, !ctir !141
  %prefix_len = alloca i64, align 8, !ctir !149
  %p = alloca i8*, align 8, !ctir !143
  %st = alloca %struct.stat, align 8, !ctir !9480
  %dest_offset = alloca i64, align 8, !ctir !687
  %new_size = alloca i64, align 8, !ctir !149
  %buf = alloca i8*, align 8, !ctir !143
  %n = alloca i64, align 8, !ctir !149
  %len = alloca i64, align 8, !ctir !149
  %pfxlen = alloca i64, align 8, !ctir !149
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !9501, metadata !DIExpression()), !dbg !9502
  store i32 %can_mode, i32* %can_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %can_mode.addr, metadata !9503, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.declare(metadata i8** %rname, metadata !9505, metadata !DIExpression()), !dbg !9506
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !9507, metadata !DIExpression()), !dbg !9508
  call void @llvm.dbg.declare(metadata i8** %extra_buf, metadata !9509, metadata !DIExpression()), !dbg !9510
  store i8* null, i8** %extra_buf, align 8, !dbg !9510
  call void @llvm.dbg.declare(metadata i8** %start, metadata !9511, metadata !DIExpression()), !dbg !9512
  call void @llvm.dbg.declare(metadata i8** %end, metadata !9513, metadata !DIExpression()), !dbg !9514
  call void @llvm.dbg.declare(metadata i8** %rname_limit, metadata !9515, metadata !DIExpression()), !dbg !9516
  call void @llvm.dbg.declare(metadata i64* %extra_len, metadata !9517, metadata !DIExpression()), !dbg !9518
  store i64 0, i64* %extra_len, align 8, !dbg !9518
  call void @llvm.dbg.declare(metadata %struct.hash_table** %ht, metadata !9519, metadata !DIExpression()), !dbg !9520
  store %struct.hash_table* null, %struct.hash_table** %ht, align 8, !dbg !9520
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !9521, metadata !DIExpression()), !dbg !9522
  call void @llvm.dbg.declare(metadata i32* %can_flags, metadata !9523, metadata !DIExpression()), !dbg !9524
  %0 = load i32, i32* %can_mode.addr, align 4, !dbg !9525
  %and = and i32 %0, -4, !dbg !9526
  store i32 %and, i32* %can_flags, align 4, !dbg !9524
  call void @llvm.dbg.declare(metadata i8* %logical, metadata !9527, metadata !DIExpression()), !dbg !9528
  %1 = load i32, i32* %can_flags, align 4, !dbg !9529
  %and1 = and i32 %1, 4, !dbg !9530
  %tobool = icmp ne i32 %and1, 0, !dbg !9529
  %frombool = zext i1 %tobool to i8, !dbg !9528
  store i8 %frombool, i8* %logical, align 1, !dbg !9528
  call void @llvm.dbg.declare(metadata i64* %prefix_len, metadata !9531, metadata !DIExpression()), !dbg !9532
  %2 = load i32, i32* %can_mode.addr, align 4, !dbg !9533
  %and2 = and i32 %2, 3, !dbg !9533
  store i32 %and2, i32* %can_mode.addr, align 4, !dbg !9533
  %3 = load i32, i32* %can_mode.addr, align 4, !dbg !9534
  %4 = load i32, i32* %can_mode.addr, align 4, !dbg !9534
  %sub = sub i32 %4, 1, !dbg !9534
  %and3 = and i32 %3, %sub, !dbg !9534
  %cmp = icmp ne i32 %and3, 0, !dbg !9534
  br i1 %cmp, label %if.then, label %if.end, !dbg !9536

if.then:                                          ; preds = %entry
  %call = call i32* @__errno_location() #17, !dbg !9537
  store i32 22, i32* %call, align 4, !dbg !9539, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !9540
  br label %return, !dbg !9540

if.end:                                           ; preds = %entry
  %5 = load i8*, i8** %name.addr, align 8, !dbg !9541
  %cmp4 = icmp eq i8* %5, null, !dbg !9543
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !9544

if.then5:                                         ; preds = %if.end
  %call6 = call i32* @__errno_location() #17, !dbg !9545
  store i32 22, i32* %call6, align 4, !dbg !9547, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !9548
  br label %return, !dbg !9548

if.end7:                                          ; preds = %if.end
  %6 = load i8*, i8** %name.addr, align 8, !dbg !9549
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0, !dbg !9549, !ctir !146
  %7 = load i8, i8* %arrayidx, align 1, !dbg !9549
  %conv = sext i8 %7 to i32, !dbg !9549
  %cmp8 = icmp eq i32 %conv, 0, !dbg !9551
  br i1 %cmp8, label %if.then10, label %if.end12, !dbg !9552

if.then10:                                        ; preds = %if.end7
  %call11 = call i32* @__errno_location() #17, !dbg !9553
  store i32 2, i32* %call11, align 4, !dbg !9555, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !9556
  br label %return, !dbg !9556

if.end12:                                         ; preds = %if.end7
  store i64 0, i64* %prefix_len, align 8, !dbg !9557
  %8 = load i8*, i8** %name.addr, align 8, !dbg !9558
  %arrayidx13 = getelementptr inbounds i8, i8* %8, i64 0, !dbg !9558, !ctir !146
  %9 = load i8, i8* %arrayidx13, align 1, !dbg !9558
  %conv14 = sext i8 %9 to i32, !dbg !9558
  %cmp15 = icmp eq i32 %conv14, 47, !dbg !9558
  br i1 %cmp15, label %if.else32, label %if.then17, !dbg !9560

if.then17:                                        ; preds = %if.end12
  %call18 = call i8* @xgetcwd(), !dbg !9561
  store i8* %call18, i8** %rname, align 8, !dbg !9563
  %10 = load i8*, i8** %rname, align 8, !dbg !9564
  %tobool19 = icmp ne i8* %10, null, !dbg !9564
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !9566

if.then20:                                        ; preds = %if.then17
  store i8* null, i8** %retval, align 8, !dbg !9567
  br label %return, !dbg !9567

if.end21:                                         ; preds = %if.then17
  %11 = load i8*, i8** %rname, align 8, !dbg !9568
  %call22 = call i8* @strchr(i8* %11, i32 0) #16, !dbg !9569
  store i8* %call22, i8** %dest, align 8, !dbg !9570
  %12 = load i8*, i8** %dest, align 8, !dbg !9571
  %13 = load i8*, i8** %rname, align 8, !dbg !9573
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64, !dbg !9574
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64, !dbg !9574
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !9574
  %cmp23 = icmp slt i64 %sub.ptr.sub, 4096, !dbg !9575
  br i1 %cmp23, label %if.then25, label %if.else, !dbg !9576

if.then25:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata i8** %p, metadata !9577, metadata !DIExpression()), !dbg !9579
  %14 = load i8*, i8** %rname, align 8, !dbg !9580
  %call26 = call i8* @xrealloc(i8* %14, i64 4096), !dbg !9581
  store i8* %call26, i8** %p, align 8, !dbg !9579
  %15 = load i8*, i8** %p, align 8, !dbg !9582
  %16 = load i8*, i8** %dest, align 8, !dbg !9583
  %17 = load i8*, i8** %rname, align 8, !dbg !9584
  %sub.ptr.lhs.cast27 = ptrtoint i8* %16 to i64, !dbg !9585
  %sub.ptr.rhs.cast28 = ptrtoint i8* %17 to i64, !dbg !9585
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28, !dbg !9585
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %sub.ptr.sub29, !dbg !9586, !ctir !144
  store i8* %add.ptr, i8** %dest, align 8, !dbg !9587
  %18 = load i8*, i8** %p, align 8, !dbg !9588
  store i8* %18, i8** %rname, align 8, !dbg !9589
  %19 = load i8*, i8** %rname, align 8, !dbg !9590
  %add.ptr30 = getelementptr inbounds i8, i8* %19, i64 4096, !dbg !9591, !ctir !144
  store i8* %add.ptr30, i8** %rname_limit, align 8, !dbg !9592
  br label %if.end31, !dbg !9593

if.else:                                          ; preds = %if.end21
  %20 = load i8*, i8** %dest, align 8, !dbg !9594
  store i8* %20, i8** %rname_limit, align 8, !dbg !9596
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then25
  %21 = load i8*, i8** %name.addr, align 8, !dbg !9597
  store i8* %21, i8** %start, align 8, !dbg !9598
  store i64 0, i64* %prefix_len, align 8, !dbg !9599
  br label %if.end40, !dbg !9600

if.else32:                                        ; preds = %if.end12
  %call33 = call noalias i8* @xmalloc(i64 4096), !dbg !9601
  store i8* %call33, i8** %rname, align 8, !dbg !9603
  %22 = load i8*, i8** %rname, align 8, !dbg !9604
  %add.ptr34 = getelementptr inbounds i8, i8* %22, i64 4096, !dbg !9605, !ctir !144
  store i8* %add.ptr34, i8** %rname_limit, align 8, !dbg !9606
  %23 = load i8*, i8** %rname, align 8, !dbg !9607
  store i8* %23, i8** %dest, align 8, !dbg !9608
  %24 = load i64, i64* %prefix_len, align 8, !dbg !9609
  %tobool35 = icmp ne i64 %24, 0, !dbg !9609
  br i1 %tobool35, label %if.then36, label %if.end38, !dbg !9611

if.then36:                                        ; preds = %if.else32
  %25 = load i8*, i8** %rname, align 8, !dbg !9612
  %26 = load i8*, i8** %name.addr, align 8, !dbg !9614
  %27 = load i64, i64* %prefix_len, align 8, !dbg !9615
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %26, i64 %27, i1 false), !dbg !9616
  %28 = load i64, i64* %prefix_len, align 8, !dbg !9617
  %29 = load i8*, i8** %dest, align 8, !dbg !9618
  %add.ptr37 = getelementptr inbounds i8, i8* %29, i64 %28, !dbg !9618, !ctir !144
  store i8* %add.ptr37, i8** %dest, align 8, !dbg !9618
  br label %if.end38, !dbg !9619

if.end38:                                         ; preds = %if.then36, %if.else32
  %30 = load i8*, i8** %dest, align 8, !dbg !9620
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1, !dbg !9620, !ctir !144
  store i8* %incdec.ptr, i8** %dest, align 8, !dbg !9620
  store i8 47, i8* %30, align 1, !dbg !9621, !ctir !144
  %31 = load i8*, i8** %name.addr, align 8, !dbg !9622
  %32 = load i64, i64* %prefix_len, align 8, !dbg !9623
  %add.ptr39 = getelementptr inbounds i8, i8* %31, i64 %32, !dbg !9624, !ctir !147
  store i8* %add.ptr39, i8** %start, align 8, !dbg !9625
  br label %if.end40

if.end40:                                         ; preds = %if.end38, %if.end31
  br label %for.cond, !dbg !9626

for.cond:                                         ; preds = %for.inc292, %if.end40
  %33 = load i8*, i8** %start, align 8, !dbg !9627
  %34 = load i8, i8* %33, align 1, !dbg !9630, !ctir !147
  %tobool41 = icmp ne i8 %34, 0, !dbg !9631
  br i1 %tobool41, label %for.body, label %for.end293, !dbg !9631

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !9632

while.cond:                                       ; preds = %while.body, %for.body
  %35 = load i8*, i8** %start, align 8, !dbg !9634
  %36 = load i8, i8* %35, align 1, !dbg !9634, !ctir !147
  %conv42 = sext i8 %36 to i32, !dbg !9634
  %cmp43 = icmp eq i32 %conv42, 47, !dbg !9634
  br i1 %cmp43, label %while.body, label %while.end, !dbg !9632

while.body:                                       ; preds = %while.cond
  %37 = load i8*, i8** %start, align 8, !dbg !9635
  %incdec.ptr45 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !9635, !ctir !147
  store i8* %incdec.ptr45, i8** %start, align 8, !dbg !9635
  br label %while.cond, !dbg !9632, !llvm.loop !9636

while.end:                                        ; preds = %while.cond
  %38 = load i8*, i8** %start, align 8, !dbg !9638
  store i8* %38, i8** %end, align 8, !dbg !9640
  br label %for.cond46, !dbg !9641

for.cond46:                                       ; preds = %for.inc, %while.end
  %39 = load i8*, i8** %end, align 8, !dbg !9642
  %40 = load i8, i8* %39, align 1, !dbg !9644, !ctir !147
  %conv47 = sext i8 %40 to i32, !dbg !9644
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !9644
  br i1 %tobool48, label %land.rhs, label %land.end, !dbg !9645

land.rhs:                                         ; preds = %for.cond46
  %41 = load i8*, i8** %end, align 8, !dbg !9646
  %42 = load i8, i8* %41, align 1, !dbg !9646, !ctir !147
  %conv49 = sext i8 %42 to i32, !dbg !9646
  %cmp50 = icmp eq i32 %conv49, 47, !dbg !9646
  %lnot = xor i1 %cmp50, true, !dbg !9647
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond46
  %43 = phi i1 [ false, %for.cond46 ], [ %lnot, %land.rhs ], !dbg !9648
  br i1 %43, label %for.body52, label %for.end, !dbg !9649

for.body52:                                       ; preds = %land.end
  br label %for.inc, !dbg !9649

for.inc:                                          ; preds = %for.body52
  %44 = load i8*, i8** %end, align 8, !dbg !9650
  %incdec.ptr53 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !9650, !ctir !147
  store i8* %incdec.ptr53, i8** %end, align 8, !dbg !9650
  br label %for.cond46, !dbg !9651, !llvm.loop !9652

for.end:                                          ; preds = %land.end
  %45 = load i8*, i8** %end, align 8, !dbg !9654
  %46 = load i8*, i8** %start, align 8, !dbg !9656
  %sub.ptr.lhs.cast54 = ptrtoint i8* %45 to i64, !dbg !9657
  %sub.ptr.rhs.cast55 = ptrtoint i8* %46 to i64, !dbg !9657
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55, !dbg !9657
  %cmp57 = icmp eq i64 %sub.ptr.sub56, 0, !dbg !9658
  br i1 %cmp57, label %if.then59, label %if.else60, !dbg !9659

if.then59:                                        ; preds = %for.end
  br label %for.end293, !dbg !9660

if.else60:                                        ; preds = %for.end
  %47 = load i8*, i8** %end, align 8, !dbg !9661
  %48 = load i8*, i8** %start, align 8, !dbg !9663
  %sub.ptr.lhs.cast61 = ptrtoint i8* %47 to i64, !dbg !9664
  %sub.ptr.rhs.cast62 = ptrtoint i8* %48 to i64, !dbg !9664
  %sub.ptr.sub63 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast62, !dbg !9664
  %cmp64 = icmp eq i64 %sub.ptr.sub63, 1, !dbg !9665
  br i1 %cmp64, label %land.lhs.true, label %if.else71, !dbg !9666

land.lhs.true:                                    ; preds = %if.else60
  %49 = load i8*, i8** %start, align 8, !dbg !9667
  %arrayidx66 = getelementptr inbounds i8, i8* %49, i64 0, !dbg !9667, !ctir !146
  %50 = load i8, i8* %arrayidx66, align 1, !dbg !9667
  %conv67 = sext i8 %50 to i32, !dbg !9667
  %cmp68 = icmp eq i32 %conv67, 46, !dbg !9668
  br i1 %cmp68, label %if.then70, label %if.else71, !dbg !9669

if.then70:                                        ; preds = %land.lhs.true
  br label %if.end290, !dbg !9669

if.else71:                                        ; preds = %land.lhs.true, %if.else60
  %51 = load i8*, i8** %end, align 8, !dbg !9670
  %52 = load i8*, i8** %start, align 8, !dbg !9672
  %sub.ptr.lhs.cast72 = ptrtoint i8* %51 to i64, !dbg !9673
  %sub.ptr.rhs.cast73 = ptrtoint i8* %52 to i64, !dbg !9673
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73, !dbg !9673
  %cmp75 = icmp eq i64 %sub.ptr.sub74, 2, !dbg !9674
  br i1 %cmp75, label %land.lhs.true77, label %if.else109, !dbg !9675

land.lhs.true77:                                  ; preds = %if.else71
  %53 = load i8*, i8** %start, align 8, !dbg !9676
  %arrayidx78 = getelementptr inbounds i8, i8* %53, i64 0, !dbg !9676, !ctir !146
  %54 = load i8, i8* %arrayidx78, align 1, !dbg !9676
  %conv79 = sext i8 %54 to i32, !dbg !9676
  %cmp80 = icmp eq i32 %conv79, 46, !dbg !9677
  br i1 %cmp80, label %land.lhs.true82, label %if.else109, !dbg !9678

land.lhs.true82:                                  ; preds = %land.lhs.true77
  %55 = load i8*, i8** %start, align 8, !dbg !9679
  %arrayidx83 = getelementptr inbounds i8, i8* %55, i64 1, !dbg !9679, !ctir !146
  %56 = load i8, i8* %arrayidx83, align 1, !dbg !9679
  %conv84 = sext i8 %56 to i32, !dbg !9679
  %cmp85 = icmp eq i32 %conv84, 46, !dbg !9680
  br i1 %cmp85, label %if.then87, label %if.else109, !dbg !9681

if.then87:                                        ; preds = %land.lhs.true82
  %57 = load i8*, i8** %dest, align 8, !dbg !9682
  %58 = load i8*, i8** %rname, align 8, !dbg !9685
  %59 = load i64, i64* %prefix_len, align 8, !dbg !9686
  %add.ptr88 = getelementptr inbounds i8, i8* %58, i64 %59, !dbg !9687, !ctir !144
  %add.ptr89 = getelementptr inbounds i8, i8* %add.ptr88, i64 1, !dbg !9688, !ctir !144
  %cmp90 = icmp ugt i8* %57, %add.ptr89, !dbg !9689
  br i1 %cmp90, label %if.then92, label %if.end108, !dbg !9690

if.then92:                                        ; preds = %if.then87
  %60 = load i8*, i8** %dest, align 8, !dbg !9691
  %incdec.ptr93 = getelementptr inbounds i8, i8* %60, i32 -1, !dbg !9691, !ctir !144
  store i8* %incdec.ptr93, i8** %dest, align 8, !dbg !9691
  br label %for.cond94, !dbg !9691

for.cond94:                                       ; preds = %for.inc105, %if.then92
  %61 = load i8*, i8** %dest, align 8, !dbg !9693
  %62 = load i8*, i8** %rname, align 8, !dbg !9695
  %cmp95 = icmp ugt i8* %61, %62, !dbg !9696
  br i1 %cmp95, label %land.rhs97, label %land.end103, !dbg !9697

land.rhs97:                                       ; preds = %for.cond94
  %63 = load i8*, i8** %dest, align 8, !dbg !9698
  %arrayidx98 = getelementptr inbounds i8, i8* %63, i64 -1, !dbg !9698, !ctir !143
  %64 = load i8, i8* %arrayidx98, align 1, !dbg !9698
  %conv99 = sext i8 %64 to i32, !dbg !9698
  %cmp100 = icmp eq i32 %conv99, 47, !dbg !9698
  %lnot102 = xor i1 %cmp100, true, !dbg !9699
  br label %land.end103

land.end103:                                      ; preds = %land.rhs97, %for.cond94
  %65 = phi i1 [ false, %for.cond94 ], [ %lnot102, %land.rhs97 ], !dbg !9700
  br i1 %65, label %for.body104, label %for.end107, !dbg !9701

for.body104:                                      ; preds = %land.end103
  br label %for.inc105, !dbg !9702

for.inc105:                                       ; preds = %for.body104
  %66 = load i8*, i8** %dest, align 8, !dbg !9703
  %incdec.ptr106 = getelementptr inbounds i8, i8* %66, i32 -1, !dbg !9703, !ctir !144
  store i8* %incdec.ptr106, i8** %dest, align 8, !dbg !9703
  br label %for.cond94, !dbg !9704, !llvm.loop !9705

for.end107:                                       ; preds = %land.end103
  br label %if.end108, !dbg !9706

if.end108:                                        ; preds = %for.end107, %if.then87
  br label %if.end289, !dbg !9707

if.else109:                                       ; preds = %land.lhs.true82, %land.lhs.true77, %if.else71
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !9708, metadata !DIExpression()), !dbg !9710
  %67 = load i8*, i8** %dest, align 8, !dbg !9711
  %arrayidx110 = getelementptr inbounds i8, i8* %67, i64 -1, !dbg !9711, !ctir !143
  %68 = load i8, i8* %arrayidx110, align 1, !dbg !9711
  %conv111 = sext i8 %68 to i32, !dbg !9711
  %cmp112 = icmp eq i32 %conv111, 47, !dbg !9711
  br i1 %cmp112, label %if.end116, label %if.then114, !dbg !9713

if.then114:                                       ; preds = %if.else109
  %69 = load i8*, i8** %dest, align 8, !dbg !9714
  %incdec.ptr115 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !9714, !ctir !144
  store i8* %incdec.ptr115, i8** %dest, align 8, !dbg !9714
  store i8 47, i8* %69, align 1, !dbg !9715, !ctir !144
  br label %if.end116, !dbg !9716

if.end116:                                        ; preds = %if.then114, %if.else109
  %70 = load i8*, i8** %dest, align 8, !dbg !9717
  %71 = load i8*, i8** %end, align 8, !dbg !9719
  %72 = load i8*, i8** %start, align 8, !dbg !9720
  %sub.ptr.lhs.cast117 = ptrtoint i8* %71 to i64, !dbg !9721
  %sub.ptr.rhs.cast118 = ptrtoint i8* %72 to i64, !dbg !9721
  %sub.ptr.sub119 = sub i64 %sub.ptr.lhs.cast117, %sub.ptr.rhs.cast118, !dbg !9721
  %add.ptr120 = getelementptr inbounds i8, i8* %70, i64 %sub.ptr.sub119, !dbg !9722, !ctir !144
  %73 = load i8*, i8** %rname_limit, align 8, !dbg !9723
  %cmp121 = icmp uge i8* %add.ptr120, %73, !dbg !9724
  br i1 %cmp121, label %if.then123, label %if.end147, !dbg !9725

if.then123:                                       ; preds = %if.end116
  call void @llvm.dbg.declare(metadata i64* %dest_offset, metadata !9726, metadata !DIExpression()), !dbg !9728
  %74 = load i8*, i8** %dest, align 8, !dbg !9729
  %75 = load i8*, i8** %rname, align 8, !dbg !9730
  %sub.ptr.lhs.cast124 = ptrtoint i8* %74 to i64, !dbg !9731
  %sub.ptr.rhs.cast125 = ptrtoint i8* %75 to i64, !dbg !9731
  %sub.ptr.sub126 = sub i64 %sub.ptr.lhs.cast124, %sub.ptr.rhs.cast125, !dbg !9731
  store i64 %sub.ptr.sub126, i64* %dest_offset, align 8, !dbg !9728
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !9732, metadata !DIExpression()), !dbg !9733
  %76 = load i8*, i8** %rname_limit, align 8, !dbg !9734
  %77 = load i8*, i8** %rname, align 8, !dbg !9735
  %sub.ptr.lhs.cast127 = ptrtoint i8* %76 to i64, !dbg !9736
  %sub.ptr.rhs.cast128 = ptrtoint i8* %77 to i64, !dbg !9736
  %sub.ptr.sub129 = sub i64 %sub.ptr.lhs.cast127, %sub.ptr.rhs.cast128, !dbg !9736
  store i64 %sub.ptr.sub129, i64* %new_size, align 8, !dbg !9733
  %78 = load i8*, i8** %end, align 8, !dbg !9737
  %79 = load i8*, i8** %start, align 8, !dbg !9739
  %sub.ptr.lhs.cast130 = ptrtoint i8* %78 to i64, !dbg !9740
  %sub.ptr.rhs.cast131 = ptrtoint i8* %79 to i64, !dbg !9740
  %sub.ptr.sub132 = sub i64 %sub.ptr.lhs.cast130, %sub.ptr.rhs.cast131, !dbg !9740
  %add = add nsw i64 %sub.ptr.sub132, 1, !dbg !9741
  %cmp133 = icmp sgt i64 %add, 4096, !dbg !9742
  br i1 %cmp133, label %if.then135, label %if.else141, !dbg !9743

if.then135:                                       ; preds = %if.then123
  %80 = load i8*, i8** %end, align 8, !dbg !9744
  %81 = load i8*, i8** %start, align 8, !dbg !9745
  %sub.ptr.lhs.cast136 = ptrtoint i8* %80 to i64, !dbg !9746
  %sub.ptr.rhs.cast137 = ptrtoint i8* %81 to i64, !dbg !9746
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137, !dbg !9746
  %add139 = add nsw i64 %sub.ptr.sub138, 1, !dbg !9747
  %82 = load i64, i64* %new_size, align 8, !dbg !9748
  %add140 = add i64 %82, %add139, !dbg !9748
  store i64 %add140, i64* %new_size, align 8, !dbg !9748
  br label %if.end143, !dbg !9749

if.else141:                                       ; preds = %if.then123
  %83 = load i64, i64* %new_size, align 8, !dbg !9750
  %add142 = add i64 %83, 4096, !dbg !9750
  store i64 %add142, i64* %new_size, align 8, !dbg !9750
  br label %if.end143

if.end143:                                        ; preds = %if.else141, %if.then135
  %84 = load i8*, i8** %rname, align 8, !dbg !9751
  %85 = load i64, i64* %new_size, align 8, !dbg !9752
  %call144 = call i8* @xrealloc(i8* %84, i64 %85), !dbg !9753
  store i8* %call144, i8** %rname, align 8, !dbg !9754
  %86 = load i8*, i8** %rname, align 8, !dbg !9755
  %87 = load i64, i64* %new_size, align 8, !dbg !9756
  %add.ptr145 = getelementptr inbounds i8, i8* %86, i64 %87, !dbg !9757, !ctir !144
  store i8* %add.ptr145, i8** %rname_limit, align 8, !dbg !9758
  %88 = load i8*, i8** %rname, align 8, !dbg !9759
  %89 = load i64, i64* %dest_offset, align 8, !dbg !9760
  %add.ptr146 = getelementptr inbounds i8, i8* %88, i64 %89, !dbg !9761, !ctir !144
  store i8* %add.ptr146, i8** %dest, align 8, !dbg !9762
  br label %if.end147, !dbg !9763

if.end147:                                        ; preds = %if.end143, %if.end116
  %90 = load i8*, i8** %dest, align 8, !dbg !9764
  %91 = load i8*, i8** %start, align 8, !dbg !9765
  %92 = load i8*, i8** %end, align 8, !dbg !9766
  %93 = load i8*, i8** %start, align 8, !dbg !9767
  %sub.ptr.lhs.cast148 = ptrtoint i8* %92 to i64, !dbg !9768
  %sub.ptr.rhs.cast149 = ptrtoint i8* %93 to i64, !dbg !9768
  %sub.ptr.sub150 = sub i64 %sub.ptr.lhs.cast148, %sub.ptr.rhs.cast149, !dbg !9768
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %91, i64 %sub.ptr.sub150, i1 false), !dbg !9769
  store i8* %90, i8** %dest, align 8, !dbg !9770
  %94 = load i8*, i8** %end, align 8, !dbg !9771
  %95 = load i8*, i8** %start, align 8, !dbg !9772
  %sub.ptr.lhs.cast151 = ptrtoint i8* %94 to i64, !dbg !9773
  %sub.ptr.rhs.cast152 = ptrtoint i8* %95 to i64, !dbg !9773
  %sub.ptr.sub153 = sub i64 %sub.ptr.lhs.cast151, %sub.ptr.rhs.cast152, !dbg !9773
  %96 = load i8*, i8** %dest, align 8, !dbg !9774
  %add.ptr154 = getelementptr inbounds i8, i8* %96, i64 %sub.ptr.sub153, !dbg !9774, !ctir !144
  store i8* %add.ptr154, i8** %dest, align 8, !dbg !9774
  %97 = load i8*, i8** %dest, align 8, !dbg !9775
  store i8 0, i8* %97, align 1, !dbg !9776, !ctir !144
  %98 = load i8, i8* %logical, align 1, !dbg !9777
  %tobool155 = trunc i8 %98 to i1, !dbg !9777
  br i1 %tobool155, label %land.lhs.true157, label %if.else161, !dbg !9779

land.lhs.true157:                                 ; preds = %if.end147
  %99 = load i32, i32* %can_mode.addr, align 4, !dbg !9780
  %cmp158 = icmp eq i32 %99, 2, !dbg !9781
  br i1 %cmp158, label %if.then160, label %if.else161, !dbg !9782

if.then160:                                       ; preds = %land.lhs.true157
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !9783, !ctir !9480
  store i32 0, i32* %st_mode, align 8, !dbg !9785, !ctir !201
  br label %if.end188, !dbg !9786

if.else161:                                       ; preds = %land.lhs.true157, %if.end147
  %100 = load i8, i8* %logical, align 1, !dbg !9787
  %tobool162 = trunc i8 %100 to i1, !dbg !9787
  br i1 %tobool162, label %cond.true, label %cond.false, !dbg !9787

cond.true:                                        ; preds = %if.else161
  %101 = load i8*, i8** %rname, align 8, !dbg !9789
  %call164 = call i32 @stat(i8* %101, %struct.stat* %st) #13, !dbg !9790
  br label %cond.end, !dbg !9787

cond.false:                                       ; preds = %if.else161
  %102 = load i8*, i8** %rname, align 8, !dbg !9791
  %call165 = call i32 @lstat(i8* %102, %struct.stat* %st) #13, !dbg !9792
  br label %cond.end, !dbg !9787

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call164, %cond.true ], [ %call165, %cond.false ], !dbg !9787
  %cmp166 = icmp ne i32 %cond, 0, !dbg !9793
  br i1 %cmp166, label %if.then168, label %if.end187, !dbg !9794

if.then168:                                       ; preds = %cond.end
  %call169 = call i32* @__errno_location() #17, !dbg !9795
  %103 = load i32, i32* %call169, align 4, !dbg !9795, !ctir !27
  store i32 %103, i32* %saved_errno, align 4, !dbg !9797
  %104 = load i32, i32* %can_mode.addr, align 4, !dbg !9798
  %cmp170 = icmp eq i32 %104, 0, !dbg !9800
  br i1 %cmp170, label %if.then172, label %if.end173, !dbg !9801

if.then172:                                       ; preds = %if.then168
  br label %error, !dbg !9802

if.end173:                                        ; preds = %if.then168
  %105 = load i32, i32* %can_mode.addr, align 4, !dbg !9803
  %cmp174 = icmp eq i32 %105, 1, !dbg !9805
  br i1 %cmp174, label %if.then176, label %if.end185, !dbg !9806

if.then176:                                       ; preds = %if.end173
  %106 = load i8*, i8** %end, align 8, !dbg !9807
  %107 = load i8*, i8** %end, align 8, !dbg !9810
  %call177 = call i64 @strspn(i8* %107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.270, i64 0, i64 0)) #16, !dbg !9811
  %arrayidx178 = getelementptr inbounds i8, i8* %106, i64 %call177, !dbg !9807, !ctir !146
  %108 = load i8, i8* %arrayidx178, align 1, !dbg !9807
  %conv179 = sext i8 %108 to i32, !dbg !9807
  %tobool180 = icmp ne i32 %conv179, 0, !dbg !9807
  br i1 %tobool180, label %if.then183, label %lor.lhs.false, !dbg !9812

lor.lhs.false:                                    ; preds = %if.then176
  %109 = load i32, i32* %saved_errno, align 4, !dbg !9813
  %cmp181 = icmp ne i32 %109, 2, !dbg !9814
  br i1 %cmp181, label %if.then183, label %if.end184, !dbg !9815

if.then183:                                       ; preds = %lor.lhs.false, %if.then176
  br label %error, !dbg !9816

if.end184:                                        ; preds = %lor.lhs.false
  br label %for.inc292, !dbg !9817

if.end185:                                        ; preds = %if.end173
  %st_mode186 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !9818, !ctir !9480
  store i32 0, i32* %st_mode186, align 8, !dbg !9819, !ctir !201
  br label %if.end187, !dbg !9820

if.end187:                                        ; preds = %if.end185, %cond.end
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then160
  %st_mode189 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !9821, !ctir !9480
  %110 = load i32, i32* %st_mode189, align 8, !dbg !9821, !ctir !201
  %and190 = and i32 %110, 61440, !dbg !9821
  %cmp191 = icmp eq i32 %and190, 40960, !dbg !9821
  br i1 %cmp191, label %if.then193, label %if.else275, !dbg !9823

if.then193:                                       ; preds = %if.end188
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !9824, metadata !DIExpression()), !dbg !9826
  call void @llvm.dbg.declare(metadata i64* %n, metadata !9827, metadata !DIExpression()), !dbg !9828
  call void @llvm.dbg.declare(metadata i64* %len, metadata !9829, metadata !DIExpression()), !dbg !9830
  %111 = load i8*, i8** %name.addr, align 8, !dbg !9831
  %call194 = call zeroext i1 @seen_triple(%struct.hash_table** %ht, i8* %111, %struct.stat* %st), !dbg !9833
  br i1 %call194, label %if.then195, label %if.end200, !dbg !9834

if.then195:                                       ; preds = %if.then193
  %112 = load i32, i32* %can_mode.addr, align 4, !dbg !9835
  %cmp196 = icmp eq i32 %112, 2, !dbg !9838
  br i1 %cmp196, label %if.then198, label %if.end199, !dbg !9839

if.then198:                                       ; preds = %if.then195
  br label %for.inc292, !dbg !9840

if.end199:                                        ; preds = %if.then195
  store i32 40, i32* %saved_errno, align 4, !dbg !9841
  br label %error, !dbg !9842

if.end200:                                        ; preds = %if.then193
  %113 = load i8*, i8** %rname, align 8, !dbg !9843
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8, !dbg !9844, !ctir !9480
  %114 = load i64, i64* %st_size, align 8, !dbg !9844, !ctir !179
  %call201 = call i8* @areadlink_with_size(i8* %113, i64 %114), !dbg !9845
  store i8* %call201, i8** %buf, align 8, !dbg !9846
  %115 = load i8*, i8** %buf, align 8, !dbg !9847
  %tobool202 = icmp ne i8* %115, null, !dbg !9847
  br i1 %tobool202, label %if.end213, label %if.then203, !dbg !9849

if.then203:                                       ; preds = %if.end200
  %116 = load i32, i32* %can_mode.addr, align 4, !dbg !9850
  %cmp204 = icmp eq i32 %116, 2, !dbg !9853
  br i1 %cmp204, label %land.lhs.true206, label %if.end211, !dbg !9854

land.lhs.true206:                                 ; preds = %if.then203
  %call207 = call i32* @__errno_location() #17, !dbg !9855
  %117 = load i32, i32* %call207, align 4, !dbg !9855, !ctir !27
  %cmp208 = icmp ne i32 %117, 12, !dbg !9856
  br i1 %cmp208, label %if.then210, label %if.end211, !dbg !9857

if.then210:                                       ; preds = %land.lhs.true206
  br label %for.inc292, !dbg !9858

if.end211:                                        ; preds = %land.lhs.true206, %if.then203
  %call212 = call i32* @__errno_location() #17, !dbg !9859
  %118 = load i32, i32* %call212, align 4, !dbg !9859, !ctir !27
  store i32 %118, i32* %saved_errno, align 4, !dbg !9860
  br label %error, !dbg !9861

if.end213:                                        ; preds = %if.end200
  %119 = load i8*, i8** %buf, align 8, !dbg !9862
  %call214 = call i64 @strlen(i8* %119) #16, !dbg !9863
  store i64 %call214, i64* %n, align 8, !dbg !9864
  %120 = load i8*, i8** %end, align 8, !dbg !9865
  %call215 = call i64 @strlen(i8* %120) #16, !dbg !9866
  store i64 %call215, i64* %len, align 8, !dbg !9867
  %121 = load i64, i64* %extra_len, align 8, !dbg !9868
  %tobool216 = icmp ne i64 %121, 0, !dbg !9868
  br i1 %tobool216, label %if.else229, label %if.then217, !dbg !9870

if.then217:                                       ; preds = %if.end213
  %122 = load i64, i64* %n, align 8, !dbg !9871
  %123 = load i64, i64* %len, align 8, !dbg !9873
  %add218 = add i64 %122, %123, !dbg !9874
  %add219 = add i64 %add218, 1, !dbg !9875
  %cmp220 = icmp ugt i64 %add219, 4096, !dbg !9876
  br i1 %cmp220, label %cond.true222, label %cond.false225, !dbg !9877

cond.true222:                                     ; preds = %if.then217
  %124 = load i64, i64* %n, align 8, !dbg !9878
  %125 = load i64, i64* %len, align 8, !dbg !9879
  %add223 = add i64 %124, %125, !dbg !9880
  %add224 = add i64 %add223, 1, !dbg !9881
  br label %cond.end226, !dbg !9877

cond.false225:                                    ; preds = %if.then217
  br label %cond.end226, !dbg !9877

cond.end226:                                      ; preds = %cond.false225, %cond.true222
  %cond227 = phi i64 [ %add224, %cond.true222 ], [ 4096, %cond.false225 ], !dbg !9877
  store i64 %cond227, i64* %extra_len, align 8, !dbg !9882
  %126 = load i64, i64* %extra_len, align 8, !dbg !9883
  %call228 = call noalias i8* @xmalloc(i64 %126), !dbg !9884
  store i8* %call228, i8** %extra_buf, align 8, !dbg !9885
  br label %if.end239, !dbg !9886

if.else229:                                       ; preds = %if.end213
  %127 = load i64, i64* %n, align 8, !dbg !9887
  %128 = load i64, i64* %len, align 8, !dbg !9889
  %add230 = add i64 %127, %128, !dbg !9890
  %add231 = add i64 %add230, 1, !dbg !9891
  %129 = load i64, i64* %extra_len, align 8, !dbg !9892
  %cmp232 = icmp ugt i64 %add231, %129, !dbg !9893
  br i1 %cmp232, label %if.then234, label %if.end238, !dbg !9894

if.then234:                                       ; preds = %if.else229
  %130 = load i64, i64* %n, align 8, !dbg !9895
  %131 = load i64, i64* %len, align 8, !dbg !9897
  %add235 = add i64 %130, %131, !dbg !9898
  %add236 = add i64 %add235, 1, !dbg !9899
  store i64 %add236, i64* %extra_len, align 8, !dbg !9900
  %132 = load i8*, i8** %extra_buf, align 8, !dbg !9901
  %133 = load i64, i64* %extra_len, align 8, !dbg !9902
  %call237 = call i8* @xrealloc(i8* %132, i64 %133), !dbg !9903
  store i8* %call237, i8** %extra_buf, align 8, !dbg !9904
  br label %if.end238, !dbg !9905

if.end238:                                        ; preds = %if.then234, %if.else229
  br label %if.end239

if.end239:                                        ; preds = %if.end238, %cond.end226
  %134 = load i8*, i8** %extra_buf, align 8, !dbg !9906
  %135 = load i64, i64* %n, align 8, !dbg !9907
  %arrayidx240 = getelementptr inbounds i8, i8* %134, i64 %135, !dbg !9906, !ctir !143
  %136 = load i8*, i8** %end, align 8, !dbg !9908
  %137 = load i64, i64* %len, align 8, !dbg !9909
  %add241 = add i64 %137, 1, !dbg !9910
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %arrayidx240, i8* align 1 %136, i64 %add241, i1 false), !dbg !9911
  %138 = load i8*, i8** %extra_buf, align 8, !dbg !9912
  %139 = load i8*, i8** %buf, align 8, !dbg !9913
  %140 = load i64, i64* %n, align 8, !dbg !9914
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %139, i64 %140, i1 false), !dbg !9915
  store i8* %138, i8** %end, align 8, !dbg !9916
  store i8* %138, i8** %name.addr, align 8, !dbg !9917
  %141 = load i8*, i8** %buf, align 8, !dbg !9918
  %arrayidx242 = getelementptr inbounds i8, i8* %141, i64 0, !dbg !9918, !ctir !143
  %142 = load i8, i8* %arrayidx242, align 1, !dbg !9918
  %conv243 = sext i8 %142 to i32, !dbg !9918
  %cmp244 = icmp eq i32 %conv243, 47, !dbg !9918
  br i1 %cmp244, label %if.then246, label %if.else252, !dbg !9920

if.then246:                                       ; preds = %if.end239
  call void @llvm.dbg.declare(metadata i64* %pfxlen, metadata !9921, metadata !DIExpression()), !dbg !9923
  store i64 0, i64* %pfxlen, align 8, !dbg !9923
  %143 = load i64, i64* %pfxlen, align 8, !dbg !9924
  %tobool247 = icmp ne i64 %143, 0, !dbg !9924
  br i1 %tobool247, label %if.then248, label %if.end249, !dbg !9926

if.then248:                                       ; preds = %if.then246
  %144 = load i8*, i8** %rname, align 8, !dbg !9927
  %145 = load i8*, i8** %buf, align 8, !dbg !9928
  %146 = load i64, i64* %pfxlen, align 8, !dbg !9929
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 1 %145, i64 %146, i1 false), !dbg !9930
  br label %if.end249, !dbg !9930

if.end249:                                        ; preds = %if.then248, %if.then246
  %147 = load i8*, i8** %rname, align 8, !dbg !9931
  %148 = load i64, i64* %pfxlen, align 8, !dbg !9932
  %add.ptr250 = getelementptr inbounds i8, i8* %147, i64 %148, !dbg !9933, !ctir !144
  store i8* %add.ptr250, i8** %dest, align 8, !dbg !9934
  %149 = load i8*, i8** %dest, align 8, !dbg !9935
  %incdec.ptr251 = getelementptr inbounds i8, i8* %149, i32 1, !dbg !9935, !ctir !144
  store i8* %incdec.ptr251, i8** %dest, align 8, !dbg !9935
  store i8 47, i8* %149, align 1, !dbg !9936, !ctir !144
  %150 = load i64, i64* %pfxlen, align 8, !dbg !9937
  store i64 %150, i64* %prefix_len, align 8, !dbg !9938
  br label %if.end274, !dbg !9939

if.else252:                                       ; preds = %if.end239
  %151 = load i8*, i8** %dest, align 8, !dbg !9940
  %152 = load i8*, i8** %rname, align 8, !dbg !9943
  %153 = load i64, i64* %prefix_len, align 8, !dbg !9944
  %add.ptr253 = getelementptr inbounds i8, i8* %152, i64 %153, !dbg !9945, !ctir !144
  %add.ptr254 = getelementptr inbounds i8, i8* %add.ptr253, i64 1, !dbg !9946, !ctir !144
  %cmp255 = icmp ugt i8* %151, %add.ptr254, !dbg !9947
  br i1 %cmp255, label %if.then257, label %if.end273, !dbg !9948

if.then257:                                       ; preds = %if.else252
  %154 = load i8*, i8** %dest, align 8, !dbg !9949
  %incdec.ptr258 = getelementptr inbounds i8, i8* %154, i32 -1, !dbg !9949, !ctir !144
  store i8* %incdec.ptr258, i8** %dest, align 8, !dbg !9949
  br label %for.cond259, !dbg !9949

for.cond259:                                      ; preds = %for.inc270, %if.then257
  %155 = load i8*, i8** %dest, align 8, !dbg !9951
  %156 = load i8*, i8** %rname, align 8, !dbg !9953
  %cmp260 = icmp ugt i8* %155, %156, !dbg !9954
  br i1 %cmp260, label %land.rhs262, label %land.end268, !dbg !9955

land.rhs262:                                      ; preds = %for.cond259
  %157 = load i8*, i8** %dest, align 8, !dbg !9956
  %arrayidx263 = getelementptr inbounds i8, i8* %157, i64 -1, !dbg !9956, !ctir !143
  %158 = load i8, i8* %arrayidx263, align 1, !dbg !9956
  %conv264 = sext i8 %158 to i32, !dbg !9956
  %cmp265 = icmp eq i32 %conv264, 47, !dbg !9956
  %lnot267 = xor i1 %cmp265, true, !dbg !9957
  br label %land.end268

land.end268:                                      ; preds = %land.rhs262, %for.cond259
  %159 = phi i1 [ false, %for.cond259 ], [ %lnot267, %land.rhs262 ], !dbg !9958
  br i1 %159, label %for.body269, label %for.end272, !dbg !9959

for.body269:                                      ; preds = %land.end268
  br label %for.inc270, !dbg !9960

for.inc270:                                       ; preds = %for.body269
  %160 = load i8*, i8** %dest, align 8, !dbg !9961
  %incdec.ptr271 = getelementptr inbounds i8, i8* %160, i32 -1, !dbg !9961, !ctir !144
  store i8* %incdec.ptr271, i8** %dest, align 8, !dbg !9961
  br label %for.cond259, !dbg !9962, !llvm.loop !9963

for.end272:                                       ; preds = %land.end268
  br label %if.end273, !dbg !9964

if.end273:                                        ; preds = %for.end272, %if.else252
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %if.end249
  %161 = load i8*, i8** %buf, align 8, !dbg !9965
  call void @free(i8* %161) #13, !dbg !9966
  br label %if.end288, !dbg !9967

if.else275:                                       ; preds = %if.end188
  %st_mode276 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !9968, !ctir !9480
  %162 = load i32, i32* %st_mode276, align 8, !dbg !9968, !ctir !201
  %and277 = and i32 %162, 61440, !dbg !9968
  %cmp278 = icmp eq i32 %and277, 16384, !dbg !9968
  br i1 %cmp278, label %if.end287, label %land.lhs.true280, !dbg !9971

land.lhs.true280:                                 ; preds = %if.else275
  %163 = load i8*, i8** %end, align 8, !dbg !9972
  %164 = load i8, i8* %163, align 1, !dbg !9973, !ctir !147
  %conv281 = sext i8 %164 to i32, !dbg !9973
  %tobool282 = icmp ne i32 %conv281, 0, !dbg !9973
  br i1 %tobool282, label %land.lhs.true283, label %if.end287, !dbg !9974

land.lhs.true283:                                 ; preds = %land.lhs.true280
  %165 = load i32, i32* %can_mode.addr, align 4, !dbg !9975
  %cmp284 = icmp ne i32 %165, 2, !dbg !9976
  br i1 %cmp284, label %if.then286, label %if.end287, !dbg !9977

if.then286:                                       ; preds = %land.lhs.true283
  store i32 20, i32* %saved_errno, align 4, !dbg !9978
  br label %error, !dbg !9980

if.end287:                                        ; preds = %land.lhs.true283, %land.lhs.true280, %if.else275
  br label %if.end288

if.end288:                                        ; preds = %if.end287, %if.end274
  br label %if.end289

if.end289:                                        ; preds = %if.end288, %if.end108
  br label %if.end290

if.end290:                                        ; preds = %if.end289, %if.then70
  br label %if.end291

if.end291:                                        ; preds = %if.end290
  br label %for.inc292, !dbg !9981

for.inc292:                                       ; preds = %if.end291, %if.then210, %if.then198, %if.end184
  %166 = load i8*, i8** %end, align 8, !dbg !9982
  store i8* %166, i8** %start, align 8, !dbg !9983
  br label %for.cond, !dbg !9984, !llvm.loop !9985

for.end293:                                       ; preds = %if.then59, %for.cond
  %167 = load i8*, i8** %dest, align 8, !dbg !9987
  %168 = load i8*, i8** %rname, align 8, !dbg !9989
  %169 = load i64, i64* %prefix_len, align 8, !dbg !9990
  %add.ptr294 = getelementptr inbounds i8, i8* %168, i64 %169, !dbg !9991, !ctir !144
  %add.ptr295 = getelementptr inbounds i8, i8* %add.ptr294, i64 1, !dbg !9992, !ctir !144
  %cmp296 = icmp ugt i8* %167, %add.ptr295, !dbg !9993
  br i1 %cmp296, label %land.lhs.true298, label %if.end305, !dbg !9994

land.lhs.true298:                                 ; preds = %for.end293
  %170 = load i8*, i8** %dest, align 8, !dbg !9995
  %arrayidx299 = getelementptr inbounds i8, i8* %170, i64 -1, !dbg !9995, !ctir !143
  %171 = load i8, i8* %arrayidx299, align 1, !dbg !9995
  %conv300 = sext i8 %171 to i32, !dbg !9995
  %cmp301 = icmp eq i32 %conv300, 47, !dbg !9995
  br i1 %cmp301, label %if.then303, label %if.end305, !dbg !9996

if.then303:                                       ; preds = %land.lhs.true298
  %172 = load i8*, i8** %dest, align 8, !dbg !9997
  %incdec.ptr304 = getelementptr inbounds i8, i8* %172, i32 -1, !dbg !9997, !ctir !144
  store i8* %incdec.ptr304, i8** %dest, align 8, !dbg !9997
  br label %if.end305, !dbg !9997

if.end305:                                        ; preds = %if.then303, %land.lhs.true298, %for.end293
  %173 = load i8*, i8** %dest, align 8, !dbg !9998
  store i8 0, i8* %173, align 1, !dbg !9999, !ctir !144
  %174 = load i8*, i8** %rname_limit, align 8, !dbg !10000
  %175 = load i8*, i8** %dest, align 8, !dbg !10002
  %add.ptr306 = getelementptr inbounds i8, i8* %175, i64 1, !dbg !10003, !ctir !144
  %cmp307 = icmp ne i8* %174, %add.ptr306, !dbg !10004
  br i1 %cmp307, label %if.then309, label %if.end315, !dbg !10005

if.then309:                                       ; preds = %if.end305
  %176 = load i8*, i8** %rname, align 8, !dbg !10006
  %177 = load i8*, i8** %dest, align 8, !dbg !10007
  %178 = load i8*, i8** %rname, align 8, !dbg !10008
  %sub.ptr.lhs.cast310 = ptrtoint i8* %177 to i64, !dbg !10009
  %sub.ptr.rhs.cast311 = ptrtoint i8* %178 to i64, !dbg !10009
  %sub.ptr.sub312 = sub i64 %sub.ptr.lhs.cast310, %sub.ptr.rhs.cast311, !dbg !10009
  %add313 = add nsw i64 %sub.ptr.sub312, 1, !dbg !10010
  %call314 = call i8* @xrealloc(i8* %176, i64 %add313), !dbg !10011
  store i8* %call314, i8** %rname, align 8, !dbg !10012
  br label %if.end315, !dbg !10013

if.end315:                                        ; preds = %if.then309, %if.end305
  %179 = load i8*, i8** %extra_buf, align 8, !dbg !10014
  call void @free(i8* %179) #13, !dbg !10015
  %180 = load %struct.hash_table*, %struct.hash_table** %ht, align 8, !dbg !10016
  %tobool316 = icmp ne %struct.hash_table* %180, null, !dbg !10016
  br i1 %tobool316, label %if.then317, label %if.end318, !dbg !10018

if.then317:                                       ; preds = %if.end315
  %181 = load %struct.hash_table*, %struct.hash_table** %ht, align 8, !dbg !10019
  call void @hash_free(%struct.hash_table* %181), !dbg !10020
  br label %if.end318, !dbg !10020

if.end318:                                        ; preds = %if.then317, %if.end315
  %182 = load i8*, i8** %rname, align 8, !dbg !10021
  store i8* %182, i8** %retval, align 8, !dbg !10022
  br label %return, !dbg !10022

error:                                            ; preds = %if.then286, %if.end211, %if.end199, %if.then183, %if.then172
  call void @llvm.dbg.label(metadata !10023), !dbg !10024
  %183 = load i8*, i8** %extra_buf, align 8, !dbg !10025
  call void @free(i8* %183) #13, !dbg !10026
  %184 = load i8*, i8** %rname, align 8, !dbg !10027
  call void @free(i8* %184) #13, !dbg !10028
  %185 = load %struct.hash_table*, %struct.hash_table** %ht, align 8, !dbg !10029
  %tobool319 = icmp ne %struct.hash_table* %185, null, !dbg !10029
  br i1 %tobool319, label %if.then320, label %if.end321, !dbg !10031

if.then320:                                       ; preds = %error
  %186 = load %struct.hash_table*, %struct.hash_table** %ht, align 8, !dbg !10032
  call void @hash_free(%struct.hash_table* %186), !dbg !10033
  br label %if.end321, !dbg !10033

if.end321:                                        ; preds = %if.then320, %error
  %187 = load i32, i32* %saved_errno, align 4, !dbg !10034
  %call322 = call i32* @__errno_location() #17, !dbg !10035
  store i32 %187, i32* %call322, align 4, !dbg !10036, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !10037
  br label %return, !dbg !10037

return:                                           ; preds = %if.end321, %if.end318, %if.then20, %if.then10, %if.then5, %if.then
  %188 = load i8*, i8** %retval, align 8, !dbg !10038
  ret i8* %188, !dbg !10038
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strspn(i8*, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @seen_triple(%struct.hash_table** %ht, i8* %filename, %struct.stat* %st) #0 !dbg !10039 {
entry:
  %retval = alloca i1, align 1
  %ht.addr = alloca %struct.hash_table**, align 8
  %filename.addr = alloca i8*, align 8
  %st.addr = alloca %struct.stat*, align 8
  %initial_capacity = alloca i64, align 8, !ctir !149
  store %struct.hash_table** %ht, %struct.hash_table*** %ht.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table*** %ht.addr, metadata !10045, metadata !DIExpression()), !dbg !10046
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !10047, metadata !DIExpression()), !dbg !10048
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !10049, metadata !DIExpression()), !dbg !10050
  %0 = load %struct.hash_table**, %struct.hash_table*** %ht.addr, align 8, !dbg !10051
  %1 = load %struct.hash_table*, %struct.hash_table** %0, align 8, !dbg !10053, !ctir !251
  %cmp = icmp eq %struct.hash_table* %1, null, !dbg !10054
  br i1 %cmp, label %if.then, label %if.end3, !dbg !10055

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %initial_capacity, metadata !10056, metadata !DIExpression()), !dbg !10058
  store i64 7, i64* %initial_capacity, align 8, !dbg !10058
  %2 = load i64, i64* %initial_capacity, align 8, !dbg !10059
  %call = call %struct.hash_table* @hash_initialize(i64 %2, %struct.hash_tuning* null, i64 (i8*, i64)* @triple_hash, i1 (i8*, i8*)* @triple_compare_ino_str, void (i8*)* @triple_free), !dbg !10060
  %3 = load %struct.hash_table**, %struct.hash_table*** %ht.addr, align 8, !dbg !10061
  store %struct.hash_table* %call, %struct.hash_table** %3, align 8, !dbg !10062, !ctir !251
  %4 = load %struct.hash_table**, %struct.hash_table*** %ht.addr, align 8, !dbg !10063
  %5 = load %struct.hash_table*, %struct.hash_table** %4, align 8, !dbg !10065, !ctir !251
  %cmp1 = icmp eq %struct.hash_table* %5, null, !dbg !10066
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !10067

if.then2:                                         ; preds = %if.then
  call void @xalloc_die() #14, !dbg !10068
  unreachable, !dbg !10068

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !10069

if.end3:                                          ; preds = %if.end, %entry
  %6 = load %struct.hash_table**, %struct.hash_table*** %ht.addr, align 8, !dbg !10070
  %7 = load %struct.hash_table*, %struct.hash_table** %6, align 8, !dbg !10072, !ctir !251
  %8 = load i8*, i8** %filename.addr, align 8, !dbg !10073
  %9 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !10074
  %call4 = call zeroext i1 @seen_file(%struct.hash_table* %7, i8* %8, %struct.stat* %9), !dbg !10075
  br i1 %call4, label %if.then5, label %if.end6, !dbg !10076

if.then5:                                         ; preds = %if.end3
  store i1 true, i1* %retval, align 1, !dbg !10077
  br label %return, !dbg !10077

if.end6:                                          ; preds = %if.end3
  %10 = load %struct.hash_table**, %struct.hash_table*** %ht.addr, align 8, !dbg !10078
  %11 = load %struct.hash_table*, %struct.hash_table** %10, align 8, !dbg !10079, !ctir !251
  %12 = load i8*, i8** %filename.addr, align 8, !dbg !10080
  %13 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !10081
  call void @record_file(%struct.hash_table* %11, i8* %12, %struct.stat* %13), !dbg !10082
  store i1 false, i1* %retval, align 1, !dbg !10083
  br label %return, !dbg !10083

return:                                           ; preds = %if.end6, %if.then5
  %14 = load i1, i1* %retval, align 1, !dbg !10084
  ret i1 %14, !dbg !10084
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_file_name(i8* %file) #0 !dbg !10085 {
entry:
  %file.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !10086, metadata !DIExpression()), !dbg !10087
  %0 = load i8*, i8** %file.addr, align 8, !dbg !10088
  store i8* %0, i8** @file_name, align 8, !dbg !10089
  ret void, !dbg !10090
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_ignore_EPIPE(i1 zeroext %ignore) #0 !dbg !10091 {
entry:
  %ignore.addr = alloca i8, align 1
  %frombool = zext i1 %ignore to i8
  store i8 %frombool, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !10092, metadata !DIExpression()), !dbg !10093
  %0 = load i8, i8* %ignore.addr, align 1, !dbg !10094
  %tobool = trunc i8 %0 to i1, !dbg !10094
  %frombool1 = zext i1 %tobool to i8, !dbg !10095
  store i8 %frombool1, i8* @ignore_EPIPE, align 1, !dbg !10095
  ret void, !dbg !10096
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout() #0 !dbg !10097 {
entry:
  %write_error = alloca i8*, align 8, !ctir !146
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !10098
  %call = call i32 @close_stream(%struct._IO_FILE* %0), !dbg !10100
  %cmp = icmp ne i32 %call, 0, !dbg !10101
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !10102

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* @ignore_EPIPE, align 1, !dbg !10103
  %tobool = trunc i8 %1 to i1, !dbg !10103
  br i1 %tobool, label %land.lhs.true1, label %if.then, !dbg !10104

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #17, !dbg !10105
  %2 = load i32, i32* %call2, align 4, !dbg !10105, !ctir !27
  %cmp3 = icmp eq i32 %2, 32, !dbg !10106
  br i1 %cmp3, label %if.end10, label %if.then, !dbg !10107

if.then:                                          ; preds = %land.lhs.true1, %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %write_error, metadata !10108, metadata !DIExpression()), !dbg !10110
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.273, i64 0, i64 0)) #13, !dbg !10111
  store i8* %call4, i8** %write_error, align 8, !dbg !10110
  %3 = load i8*, i8** @file_name, align 8, !dbg !10112
  %tobool5 = icmp ne i8* %3, null, !dbg !10112
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !10114

if.then6:                                         ; preds = %if.then
  %call7 = call i32* @__errno_location() #17, !dbg !10115
  %4 = load i32, i32* %call7, align 4, !dbg !10115, !ctir !27
  %5 = load i8*, i8** @file_name, align 8, !dbg !10116
  %call8 = call i8* @quotearg_colon(i8* %5), !dbg !10117
  %6 = load i8*, i8** %write_error, align 8, !dbg !10118
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.274, i64 0, i64 0), i8* %call8, i8* %6), !dbg !10119
  br label %if.end, !dbg !10119

if.else:                                          ; preds = %if.then
  %call9 = call i32* @__errno_location() #17, !dbg !10120
  %7 = load i32, i32* %call9, align 4, !dbg !10120, !ctir !27
  %8 = load i8*, i8** %write_error, align 8, !dbg !10121
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.275, i64 0, i64 0), i8* %8), !dbg !10122
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !10123
  call void @_exit(i32 %9) #14, !dbg !10124
  unreachable, !dbg !10124

if.end10:                                         ; preds = %land.lhs.true1, %entry
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10125
  %call11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !10127
  %cmp12 = icmp ne i32 %call11, 0, !dbg !10128
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !10129

if.then13:                                        ; preds = %if.end10
  %11 = load volatile i32, i32* @exit_failure, align 4, !dbg !10130
  call void @_exit(i32 %11) #14, !dbg !10131
  unreachable, !dbg !10131

if.end14:                                         ; preds = %if.end10
  ret void, !dbg !10132
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #11

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @dir_len(i8* %file) #9 !dbg !10133 {
entry:
  %file.addr = alloca i8*, align 8
  %prefix_length = alloca i64, align 8, !ctir !149
  %length = alloca i64, align 8, !ctir !149
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !10137, metadata !DIExpression()), !dbg !10138
  call void @llvm.dbg.declare(metadata i64* %prefix_length, metadata !10139, metadata !DIExpression()), !dbg !10140
  store i64 0, i64* %prefix_length, align 8, !dbg !10140
  call void @llvm.dbg.declare(metadata i64* %length, metadata !10141, metadata !DIExpression()), !dbg !10142
  %0 = load i64, i64* %prefix_length, align 8, !dbg !10143
  %cmp = icmp ne i64 %0, 0, !dbg !10144
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10143

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !10143

cond.false:                                       ; preds = %entry
  %1 = load i8*, i8** %file.addr, align 8, !dbg !10145
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !10145, !ctir !146
  %2 = load i8, i8* %arrayidx, align 1, !dbg !10145
  %conv = sext i8 %2 to i32, !dbg !10145
  %cmp1 = icmp eq i32 %conv, 47, !dbg !10145
  %3 = zext i1 %cmp1 to i64, !dbg !10145
  %cond = select i1 %cmp1, i32 1, i32 0, !dbg !10145
  br label %cond.end, !dbg !10143

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond3 = phi i32 [ 0, %cond.true ], [ %cond, %cond.false ], !dbg !10143
  %conv4 = sext i32 %cond3 to i64, !dbg !10146
  %4 = load i64, i64* %prefix_length, align 8, !dbg !10147
  %add = add i64 %4, %conv4, !dbg !10147
  store i64 %add, i64* %prefix_length, align 8, !dbg !10147
  %5 = load i8*, i8** %file.addr, align 8, !dbg !10148
  %call = call i8* @last_component(i8* %5) #16, !dbg !10150
  %6 = load i8*, i8** %file.addr, align 8, !dbg !10151
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64, !dbg !10152
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !10152
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10152
  store i64 %sub.ptr.sub, i64* %length, align 8, !dbg !10153
  br label %for.cond, !dbg !10154

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i64, i64* %prefix_length, align 8, !dbg !10155
  %8 = load i64, i64* %length, align 8, !dbg !10157
  %cmp5 = icmp ult i64 %7, %8, !dbg !10158
  br i1 %cmp5, label %for.body, label %for.end, !dbg !10159

for.body:                                         ; preds = %for.cond
  %9 = load i8*, i8** %file.addr, align 8, !dbg !10160
  %10 = load i64, i64* %length, align 8, !dbg !10160
  %sub = sub i64 %10, 1, !dbg !10160
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i64 %sub, !dbg !10160, !ctir !146
  %11 = load i8, i8* %arrayidx7, align 1, !dbg !10160
  %conv8 = sext i8 %11 to i32, !dbg !10160
  %cmp9 = icmp eq i32 %conv8, 47, !dbg !10160
  br i1 %cmp9, label %if.end, label %if.then, !dbg !10162

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !10163

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !10160

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %length, align 8, !dbg !10164
  %dec = add i64 %12, -1, !dbg !10164
  store i64 %dec, i64* %length, align 8, !dbg !10164
  br label %for.cond, !dbg !10165, !llvm.loop !10166

for.end:                                          ; preds = %if.then, %for.cond
  %13 = load i64, i64* %length, align 8, !dbg !10168
  ret i64 %13, !dbg !10169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mdir_name(i8* %file) #0 !dbg !10170 {
entry:
  %retval = alloca i8*, align 8
  %file.addr = alloca i8*, align 8
  %length = alloca i64, align 8, !ctir !149
  %append_dot = alloca i8, align 1, !ctir !141
  %dir = alloca i8*, align 8, !ctir !143
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !10171, metadata !DIExpression()), !dbg !10172
  call void @llvm.dbg.declare(metadata i64* %length, metadata !10173, metadata !DIExpression()), !dbg !10174
  %0 = load i8*, i8** %file.addr, align 8, !dbg !10175
  %call = call i64 @dir_len(i8* %0) #16, !dbg !10176
  store i64 %call, i64* %length, align 8, !dbg !10174
  call void @llvm.dbg.declare(metadata i8* %append_dot, metadata !10177, metadata !DIExpression()), !dbg !10178
  %1 = load i64, i64* %length, align 8, !dbg !10179
  %cmp = icmp eq i64 %1, 0, !dbg !10180
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !10181

lor.rhs:                                          ; preds = %entry
  br label %lor.end, !dbg !10181

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ false, %lor.rhs ]
  %frombool = zext i1 %2 to i8, !dbg !10178
  store i8 %frombool, i8* %append_dot, align 1, !dbg !10178
  call void @llvm.dbg.declare(metadata i8** %dir, metadata !10182, metadata !DIExpression()), !dbg !10183
  %3 = load i64, i64* %length, align 8, !dbg !10184
  %4 = load i8, i8* %append_dot, align 1, !dbg !10185
  %tobool = trunc i8 %4 to i1, !dbg !10185
  %conv = zext i1 %tobool to i64, !dbg !10185
  %add = add i64 %3, %conv, !dbg !10186
  %add1 = add i64 %add, 1, !dbg !10187
  %call2 = call noalias i8* @malloc(i64 %add1) #13, !dbg !10188
  store i8* %call2, i8** %dir, align 8, !dbg !10183
  %5 = load i8*, i8** %dir, align 8, !dbg !10189
  %tobool3 = icmp ne i8* %5, null, !dbg !10189
  br i1 %tobool3, label %if.end, label %if.then, !dbg !10191

if.then:                                          ; preds = %lor.end
  store i8* null, i8** %retval, align 8, !dbg !10192
  br label %return, !dbg !10192

if.end:                                           ; preds = %lor.end
  %6 = load i8*, i8** %dir, align 8, !dbg !10193
  %7 = load i8*, i8** %file.addr, align 8, !dbg !10194
  %8 = load i64, i64* %length, align 8, !dbg !10195
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 %8, i1 false), !dbg !10196
  %9 = load i8, i8* %append_dot, align 1, !dbg !10197
  %tobool4 = trunc i8 %9 to i1, !dbg !10197
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !10199

if.then5:                                         ; preds = %if.end
  %10 = load i8*, i8** %dir, align 8, !dbg !10200
  %11 = load i64, i64* %length, align 8, !dbg !10201
  %inc = add i64 %11, 1, !dbg !10201
  store i64 %inc, i64* %length, align 8, !dbg !10201
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !10200, !ctir !143
  store i8 46, i8* %arrayidx, align 1, !dbg !10202
  br label %if.end6, !dbg !10200

if.end6:                                          ; preds = %if.then5, %if.end
  %12 = load i8*, i8** %dir, align 8, !dbg !10203
  %13 = load i64, i64* %length, align 8, !dbg !10204
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !10203, !ctir !143
  store i8 0, i8* %arrayidx7, align 1, !dbg !10205
  %14 = load i8*, i8** %dir, align 8, !dbg !10206
  store i8* %14, i8** %retval, align 8, !dbg !10207
  br label %return, !dbg !10207

return:                                           ; preds = %if.end6, %if.then
  %15 = load i8*, i8** %retval, align 8, !dbg !10208
  ret i8* %15, !dbg !10208
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i8* @last_component(i8* %name) #9 !dbg !10209 {
entry:
  %name.addr = alloca i8*, align 8
  %base = alloca i8*, align 8, !ctir !146
  %p = alloca i8*, align 8, !ctir !146
  %saw_slash = alloca i8, align 1, !ctir !141
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10211, metadata !DIExpression()), !dbg !10212
  call void @llvm.dbg.declare(metadata i8** %base, metadata !10213, metadata !DIExpression()), !dbg !10214
  %0 = load i8*, i8** %name.addr, align 8, !dbg !10215
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 0, !dbg !10216, !ctir !147
  store i8* %add.ptr, i8** %base, align 8, !dbg !10214
  call void @llvm.dbg.declare(metadata i8** %p, metadata !10217, metadata !DIExpression()), !dbg !10218
  call void @llvm.dbg.declare(metadata i8* %saw_slash, metadata !10219, metadata !DIExpression()), !dbg !10220
  store i8 0, i8* %saw_slash, align 1, !dbg !10220
  br label %while.cond, !dbg !10221

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i8*, i8** %base, align 8, !dbg !10222
  %2 = load i8, i8* %1, align 1, !dbg !10222, !ctir !147
  %conv = sext i8 %2 to i32, !dbg !10222
  %cmp = icmp eq i32 %conv, 47, !dbg !10222
  br i1 %cmp, label %while.body, label %while.end, !dbg !10221

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %base, align 8, !dbg !10223
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !10223, !ctir !147
  store i8* %incdec.ptr, i8** %base, align 8, !dbg !10223
  br label %while.cond, !dbg !10221, !llvm.loop !10224

while.end:                                        ; preds = %while.cond
  %4 = load i8*, i8** %base, align 8, !dbg !10225
  store i8* %4, i8** %p, align 8, !dbg !10227
  br label %for.cond, !dbg !10228

for.cond:                                         ; preds = %for.inc, %while.end
  %5 = load i8*, i8** %p, align 8, !dbg !10229
  %6 = load i8, i8* %5, align 1, !dbg !10231, !ctir !147
  %tobool = icmp ne i8 %6, 0, !dbg !10232
  br i1 %tobool, label %for.body, label %for.end, !dbg !10232

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %p, align 8, !dbg !10233
  %8 = load i8, i8* %7, align 1, !dbg !10233, !ctir !147
  %conv2 = sext i8 %8 to i32, !dbg !10233
  %cmp3 = icmp eq i32 %conv2, 47, !dbg !10233
  br i1 %cmp3, label %if.then, label %if.else, !dbg !10236

if.then:                                          ; preds = %for.body
  store i8 1, i8* %saw_slash, align 1, !dbg !10237
  br label %if.end7, !dbg !10238

if.else:                                          ; preds = %for.body
  %9 = load i8, i8* %saw_slash, align 1, !dbg !10239
  %tobool5 = trunc i8 %9 to i1, !dbg !10239
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !10241

if.then6:                                         ; preds = %if.else
  %10 = load i8*, i8** %p, align 8, !dbg !10242
  store i8* %10, i8** %base, align 8, !dbg !10244
  store i8 0, i8* %saw_slash, align 1, !dbg !10245
  br label %if.end, !dbg !10246

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  br label %for.inc, !dbg !10247

for.inc:                                          ; preds = %if.end7
  %11 = load i8*, i8** %p, align 8, !dbg !10248
  %incdec.ptr8 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !10248, !ctir !147
  store i8* %incdec.ptr8, i8** %p, align 8, !dbg !10248
  br label %for.cond, !dbg !10249, !llvm.loop !10250

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %base, align 8, !dbg !10252
  ret i8* %12, !dbg !10253
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @base_len(i8* %name) #9 !dbg !10254 {
entry:
  %name.addr = alloca i8*, align 8
  %len = alloca i64, align 8, !ctir !149
  %prefix_len = alloca i64, align 8, !ctir !149
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10255, metadata !DIExpression()), !dbg !10256
  call void @llvm.dbg.declare(metadata i64* %len, metadata !10257, metadata !DIExpression()), !dbg !10258
  call void @llvm.dbg.declare(metadata i64* %prefix_len, metadata !10259, metadata !DIExpression()), !dbg !10260
  store i64 0, i64* %prefix_len, align 8, !dbg !10260
  %0 = load i8*, i8** %name.addr, align 8, !dbg !10261
  %call = call i64 @strlen(i8* %0) #16, !dbg !10263
  store i64 %call, i64* %len, align 8, !dbg !10264
  br label %for.cond, !dbg !10265

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %len, align 8, !dbg !10266
  %cmp = icmp ult i64 1, %1, !dbg !10268
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10269

land.rhs:                                         ; preds = %for.cond
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10270
  %3 = load i64, i64* %len, align 8, !dbg !10270
  %sub = sub i64 %3, 1, !dbg !10270
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %sub, !dbg !10270, !ctir !146
  %4 = load i8, i8* %arrayidx, align 1, !dbg !10270
  %conv = sext i8 %4 to i32, !dbg !10270
  %cmp1 = icmp eq i32 %conv, 47, !dbg !10270
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ], !dbg !10271
  br i1 %5, label %for.body, label %for.end, !dbg !10272

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !10273

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %len, align 8, !dbg !10274
  %dec = add i64 %6, -1, !dbg !10274
  store i64 %dec, i64* %len, align 8, !dbg !10274
  br label %for.cond, !dbg !10275, !llvm.loop !10276

for.end:                                          ; preds = %land.end
  %7 = load i64, i64* %len, align 8, !dbg !10278
  ret i64 %7, !dbg !10279
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @file_has_acl(i8* %name, %struct.stat* %sb) #0 !dbg !10280 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %sb.addr = alloca %struct.stat*, align 8
  %ret = alloca i64, align 8, !ctir !1514
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10307, metadata !DIExpression()), !dbg !10308
  store %struct.stat* %sb, %struct.stat** %sb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %sb.addr, metadata !10309, metadata !DIExpression()), !dbg !10310
  %0 = load %struct.stat*, %struct.stat** %sb.addr, align 8, !dbg !10311
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 3, !dbg !10311, !ctir !10285
  %1 = load i32, i32* %st_mode, align 8, !dbg !10311, !ctir !201
  %and = and i32 %1, 61440, !dbg !10311
  %cmp = icmp eq i32 %and, 40960, !dbg !10311
  br i1 %cmp, label %if.end32, label %if.then, !dbg !10313

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !10314, metadata !DIExpression()), !dbg !10316
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10317
  %call = call i64 @getxattr(i8* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.284, i64 0, i64 0), i8* null, i64 0) #13, !dbg !10318
  store i64 %call, i64* %ret, align 8, !dbg !10319
  %3 = load i64, i64* %ret, align 8, !dbg !10320
  %cmp1 = icmp slt i64 %3, 0, !dbg !10322
  br i1 %cmp1, label %land.lhs.true, label %if.else, !dbg !10323

land.lhs.true:                                    ; preds = %if.then
  %call2 = call i32* @__errno_location() #17, !dbg !10324
  %4 = load i32, i32* %call2, align 4, !dbg !10324, !ctir !27
  %cmp3 = icmp eq i32 %4, 61, !dbg !10325
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !10326

if.then4:                                         ; preds = %land.lhs.true
  store i64 0, i64* %ret, align 8, !dbg !10327
  br label %if.end7, !dbg !10328

if.else:                                          ; preds = %land.lhs.true, %if.then
  %5 = load i64, i64* %ret, align 8, !dbg !10329
  %cmp5 = icmp sgt i64 %5, 0, !dbg !10331
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !10332

if.then6:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !10333
  br label %return, !dbg !10333

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then4
  %6 = load i64, i64* %ret, align 8, !dbg !10334
  %cmp8 = icmp eq i64 %6, 0, !dbg !10336
  br i1 %cmp8, label %land.lhs.true9, label %if.end25, !dbg !10337

land.lhs.true9:                                   ; preds = %if.end7
  %7 = load %struct.stat*, %struct.stat** %sb.addr, align 8, !dbg !10338
  %st_mode10 = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 3, !dbg !10338, !ctir !10285
  %8 = load i32, i32* %st_mode10, align 8, !dbg !10338, !ctir !201
  %and11 = and i32 %8, 61440, !dbg !10338
  %cmp12 = icmp eq i32 %and11, 16384, !dbg !10338
  br i1 %cmp12, label %if.then13, label %if.end25, !dbg !10339

if.then13:                                        ; preds = %land.lhs.true9
  %9 = load i8*, i8** %name.addr, align 8, !dbg !10340
  %call14 = call i64 @getxattr(i8* %9, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1.285, i64 0, i64 0), i8* null, i64 0) #13, !dbg !10342
  store i64 %call14, i64* %ret, align 8, !dbg !10343
  %10 = load i64, i64* %ret, align 8, !dbg !10344
  %cmp15 = icmp slt i64 %10, 0, !dbg !10346
  br i1 %cmp15, label %land.lhs.true16, label %if.else20, !dbg !10347

land.lhs.true16:                                  ; preds = %if.then13
  %call17 = call i32* @__errno_location() #17, !dbg !10348
  %11 = load i32, i32* %call17, align 4, !dbg !10348, !ctir !27
  %cmp18 = icmp eq i32 %11, 61, !dbg !10349
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !10350

if.then19:                                        ; preds = %land.lhs.true16
  store i64 0, i64* %ret, align 8, !dbg !10351
  br label %if.end24, !dbg !10352

if.else20:                                        ; preds = %land.lhs.true16, %if.then13
  %12 = load i64, i64* %ret, align 8, !dbg !10353
  %cmp21 = icmp sgt i64 %12, 0, !dbg !10355
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !10356

if.then22:                                        ; preds = %if.else20
  store i32 1, i32* %retval, align 4, !dbg !10357
  br label %return, !dbg !10357

if.end23:                                         ; preds = %if.else20
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then19
  br label %if.end25, !dbg !10358

if.end25:                                         ; preds = %if.end24, %land.lhs.true9, %if.end7
  %13 = load i64, i64* %ret, align 8, !dbg !10359
  %cmp26 = icmp slt i64 %13, 0, !dbg !10361
  br i1 %cmp26, label %if.then27, label %if.end30, !dbg !10362

if.then27:                                        ; preds = %if.end25
  %call28 = call i32* @__errno_location() #17, !dbg !10363
  %14 = load i32, i32* %call28, align 4, !dbg !10363, !ctir !27
  %call29 = call zeroext i1 @acl_errno_valid(i32 %14) #17, !dbg !10364
  %conv = zext i1 %call29 to i32, !dbg !10364
  %sub = sub nsw i32 0, %conv, !dbg !10365
  store i32 %sub, i32* %retval, align 4, !dbg !10366
  br label %return, !dbg !10366

if.end30:                                         ; preds = %if.end25
  %15 = load i64, i64* %ret, align 8, !dbg !10367
  %conv31 = trunc i64 %15 to i32, !dbg !10367
  store i32 %conv31, i32* %retval, align 4, !dbg !10368
  br label %return, !dbg !10368

if.end32:                                         ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10369
  br label %return, !dbg !10369

return:                                           ; preds = %if.end32, %if.end30, %if.then27, %if.then22, %if.then6
  %16 = load i32, i32* %retval, align 4, !dbg !10370
  ret i32 %16, !dbg !10370
}

; Function Attrs: nounwind
declare dso_local i64 @getxattr(i8*, i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @record_file(%struct.hash_table* %ht, i8* nonnull %file, %struct.stat* nonnull %stats) #0 !dbg !10371 {
entry:
  %ht.addr = alloca %struct.hash_table*, align 8
  %file.addr = alloca i8*, align 8
  %stats.addr = alloca %struct.stat*, align 8
  %ent = alloca %struct.F_triple*, align 8, !ctir !1546
  %ent_from_table = alloca %struct.F_triple*, align 8, !ctir !1546
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %ht.addr, metadata !10398, metadata !DIExpression()), !dbg !10399
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !10400, metadata !DIExpression()), !dbg !10401
  store %struct.stat* %stats, %struct.stat** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %stats.addr, metadata !10402, metadata !DIExpression()), !dbg !10403
  call void @llvm.dbg.declare(metadata %struct.F_triple** %ent, metadata !10404, metadata !DIExpression()), !dbg !10405
  %0 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8, !dbg !10406
  %cmp = icmp eq %struct.hash_table* %0, null, !dbg !10408
  br i1 %cmp, label %if.then, label %if.end, !dbg !10409

if.then:                                          ; preds = %entry
  br label %if.end10, !dbg !10410

if.end:                                           ; preds = %entry
  %call = call noalias i8* @xmalloc(i64 24), !dbg !10411
  %1 = bitcast i8* %call to %struct.F_triple*, !dbg !10411
  store %struct.F_triple* %1, %struct.F_triple** %ent, align 8, !dbg !10412
  %2 = load i8*, i8** %file.addr, align 8, !dbg !10413
  %call1 = call noalias i8* @xstrdup(i8* %2), !dbg !10414
  %3 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10415
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %3, i32 0, i32 0, !dbg !10416, !ctir !1547
  store i8* %call1, i8** %name, align 8, !dbg !10417, !ctir !143
  %4 = load %struct.stat*, %struct.stat** %stats.addr, align 8, !dbg !10418
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 1, !dbg !10419, !ctir !10376
  %5 = load i64, i64* %st_ino, align 8, !dbg !10419, !ctir !197
  %6 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10420
  %st_ino2 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %6, i32 0, i32 1, !dbg !10421, !ctir !1547
  store i64 %5, i64* %st_ino2, align 8, !dbg !10422, !ctir !269
  %7 = load %struct.stat*, %struct.stat** %stats.addr, align 8, !dbg !10423
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %7, i32 0, i32 0, !dbg !10424, !ctir !10376
  %8 = load i64, i64* %st_dev, align 8, !dbg !10424, !ctir !195
  %9 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10425
  %st_dev3 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %9, i32 0, i32 2, !dbg !10426, !ctir !1547
  store i64 %8, i64* %st_dev3, align 8, !dbg !10427, !ctir !271
  call void @llvm.dbg.declare(metadata %struct.F_triple** %ent_from_table, metadata !10428, metadata !DIExpression()), !dbg !10430
  %10 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8, !dbg !10431
  %11 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10432
  %12 = bitcast %struct.F_triple* %11 to i8*, !dbg !10432
  %call4 = call i8* @hash_insert(%struct.hash_table* %10, i8* %12), !dbg !10433
  %13 = bitcast i8* %call4 to %struct.F_triple*, !dbg !10433
  store %struct.F_triple* %13, %struct.F_triple** %ent_from_table, align 8, !dbg !10430
  %14 = load %struct.F_triple*, %struct.F_triple** %ent_from_table, align 8, !dbg !10434
  %cmp5 = icmp eq %struct.F_triple* %14, null, !dbg !10436
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !10437

if.then6:                                         ; preds = %if.end
  call void @xalloc_die() #14, !dbg !10438
  unreachable, !dbg !10438

if.end7:                                          ; preds = %if.end
  %15 = load %struct.F_triple*, %struct.F_triple** %ent_from_table, align 8, !dbg !10440
  %16 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10442
  %cmp8 = icmp ne %struct.F_triple* %15, %16, !dbg !10443
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !10444

if.then9:                                         ; preds = %if.end7
  %17 = load %struct.F_triple*, %struct.F_triple** %ent, align 8, !dbg !10445
  %18 = bitcast %struct.F_triple* %17 to i8*, !dbg !10445
  call void @triple_free(i8* %18), !dbg !10447
  br label %if.end10, !dbg !10448

if.end10:                                         ; preds = %if.then, %if.then9, %if.end7
  ret void, !dbg !10449
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @seen_file(%struct.hash_table* %ht, i8* %file, %struct.stat* %stats) #0 !dbg !10450 {
entry:
  %retval = alloca i1, align 1
  %ht.addr = alloca %struct.hash_table*, align 8
  %file.addr = alloca i8*, align 8
  %stats.addr = alloca %struct.stat*, align 8
  %new_ent = alloca %struct.F_triple, align 8, !ctir !1547
  store %struct.hash_table* %ht, %struct.hash_table** %ht.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %ht.addr, metadata !10455, metadata !DIExpression()), !dbg !10456
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !10457, metadata !DIExpression()), !dbg !10458
  store %struct.stat* %stats, %struct.stat** %stats.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %stats.addr, metadata !10459, metadata !DIExpression()), !dbg !10460
  call void @llvm.dbg.declare(metadata %struct.F_triple* %new_ent, metadata !10461, metadata !DIExpression()), !dbg !10462
  %0 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8, !dbg !10463
  %cmp = icmp eq %struct.hash_table* %0, null, !dbg !10465
  br i1 %cmp, label %if.then, label %if.end, !dbg !10466

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !10467
  br label %return, !dbg !10467

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %file.addr, align 8, !dbg !10468
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %new_ent, i32 0, i32 0, !dbg !10469, !ctir !1547
  store i8* %1, i8** %name, align 8, !dbg !10470, !ctir !143
  %2 = load %struct.stat*, %struct.stat** %stats.addr, align 8, !dbg !10471
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1, !dbg !10472, !ctir !10376
  %3 = load i64, i64* %st_ino, align 8, !dbg !10472, !ctir !197
  %st_ino1 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %new_ent, i32 0, i32 1, !dbg !10473, !ctir !1547
  store i64 %3, i64* %st_ino1, align 8, !dbg !10474, !ctir !269
  %4 = load %struct.stat*, %struct.stat** %stats.addr, align 8, !dbg !10475
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 0, !dbg !10476, !ctir !10376
  %5 = load i64, i64* %st_dev, align 8, !dbg !10476, !ctir !195
  %st_dev2 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %new_ent, i32 0, i32 2, !dbg !10477, !ctir !1547
  store i64 %5, i64* %st_dev2, align 8, !dbg !10478, !ctir !271
  %6 = load %struct.hash_table*, %struct.hash_table** %ht.addr, align 8, !dbg !10479
  %7 = bitcast %struct.F_triple* %new_ent to i8*, !dbg !10480
  %call = call i8* @hash_lookup(%struct.hash_table* %6, i8* %7), !dbg !10481
  %tobool = icmp ne i8* %call, null, !dbg !10482
  %lnot = xor i1 %tobool, true, !dbg !10482
  %lnot3 = xor i1 %lnot, true, !dbg !10483
  store i1 %lnot3, i1* %retval, align 1, !dbg !10484
  br label %return, !dbg !10484

return:                                           ; preds = %if.end, %if.then
  %8 = load i1, i1* %retval, align 1, !dbg !10485
  ret i1 %8, !dbg !10485
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @strmode(i32 %mode, i8* %str) #0 !dbg !10486 {
entry:
  %mode.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10490, metadata !DIExpression()), !dbg !10491
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !10492, metadata !DIExpression()), !dbg !10493
  %0 = load i32, i32* %mode.addr, align 4, !dbg !10494
  %call = call signext i8 @ftypelet(i32 %0), !dbg !10495
  %1 = load i8*, i8** %str.addr, align 8, !dbg !10496
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !10496, !ctir !143
  store i8 %call, i8* %arrayidx, align 1, !dbg !10497
  %2 = load i32, i32* %mode.addr, align 4, !dbg !10498
  %and = and i32 %2, 256, !dbg !10499
  %tobool = icmp ne i32 %and, 0, !dbg !10498
  %3 = zext i1 %tobool to i64, !dbg !10498
  %cond = select i1 %tobool, i32 114, i32 45, !dbg !10498
  %conv = trunc i32 %cond to i8, !dbg !10498
  %4 = load i8*, i8** %str.addr, align 8, !dbg !10500
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !10500, !ctir !143
  store i8 %conv, i8* %arrayidx1, align 1, !dbg !10501
  %5 = load i32, i32* %mode.addr, align 4, !dbg !10502
  %and2 = and i32 %5, 128, !dbg !10503
  %tobool3 = icmp ne i32 %and2, 0, !dbg !10502
  %6 = zext i1 %tobool3 to i64, !dbg !10502
  %cond4 = select i1 %tobool3, i32 119, i32 45, !dbg !10502
  %conv5 = trunc i32 %cond4 to i8, !dbg !10502
  %7 = load i8*, i8** %str.addr, align 8, !dbg !10504
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 2, !dbg !10504, !ctir !143
  store i8 %conv5, i8* %arrayidx6, align 1, !dbg !10505
  %8 = load i32, i32* %mode.addr, align 4, !dbg !10506
  %and7 = and i32 %8, 2048, !dbg !10507
  %tobool8 = icmp ne i32 %and7, 0, !dbg !10507
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !10506

cond.true:                                        ; preds = %entry
  %9 = load i32, i32* %mode.addr, align 4, !dbg !10508
  %and9 = and i32 %9, 64, !dbg !10509
  %tobool10 = icmp ne i32 %and9, 0, !dbg !10508
  %10 = zext i1 %tobool10 to i64, !dbg !10508
  %cond11 = select i1 %tobool10, i32 115, i32 83, !dbg !10508
  br label %cond.end, !dbg !10506

cond.false:                                       ; preds = %entry
  %11 = load i32, i32* %mode.addr, align 4, !dbg !10510
  %and12 = and i32 %11, 64, !dbg !10511
  %tobool13 = icmp ne i32 %and12, 0, !dbg !10510
  %12 = zext i1 %tobool13 to i64, !dbg !10510
  %cond14 = select i1 %tobool13, i32 120, i32 45, !dbg !10510
  br label %cond.end, !dbg !10506

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond15 = phi i32 [ %cond11, %cond.true ], [ %cond14, %cond.false ], !dbg !10506
  %conv16 = trunc i32 %cond15 to i8, !dbg !10512
  %13 = load i8*, i8** %str.addr, align 8, !dbg !10513
  %arrayidx17 = getelementptr inbounds i8, i8* %13, i64 3, !dbg !10513, !ctir !143
  store i8 %conv16, i8* %arrayidx17, align 1, !dbg !10514
  %14 = load i32, i32* %mode.addr, align 4, !dbg !10515
  %and18 = and i32 %14, 32, !dbg !10516
  %tobool19 = icmp ne i32 %and18, 0, !dbg !10515
  %15 = zext i1 %tobool19 to i64, !dbg !10515
  %cond20 = select i1 %tobool19, i32 114, i32 45, !dbg !10515
  %conv21 = trunc i32 %cond20 to i8, !dbg !10515
  %16 = load i8*, i8** %str.addr, align 8, !dbg !10517
  %arrayidx22 = getelementptr inbounds i8, i8* %16, i64 4, !dbg !10517, !ctir !143
  store i8 %conv21, i8* %arrayidx22, align 1, !dbg !10518
  %17 = load i32, i32* %mode.addr, align 4, !dbg !10519
  %and23 = and i32 %17, 16, !dbg !10520
  %tobool24 = icmp ne i32 %and23, 0, !dbg !10519
  %18 = zext i1 %tobool24 to i64, !dbg !10519
  %cond25 = select i1 %tobool24, i32 119, i32 45, !dbg !10519
  %conv26 = trunc i32 %cond25 to i8, !dbg !10519
  %19 = load i8*, i8** %str.addr, align 8, !dbg !10521
  %arrayidx27 = getelementptr inbounds i8, i8* %19, i64 5, !dbg !10521, !ctir !143
  store i8 %conv26, i8* %arrayidx27, align 1, !dbg !10522
  %20 = load i32, i32* %mode.addr, align 4, !dbg !10523
  %and28 = and i32 %20, 1024, !dbg !10524
  %tobool29 = icmp ne i32 %and28, 0, !dbg !10524
  br i1 %tobool29, label %cond.true30, label %cond.false34, !dbg !10523

cond.true30:                                      ; preds = %cond.end
  %21 = load i32, i32* %mode.addr, align 4, !dbg !10525
  %and31 = and i32 %21, 8, !dbg !10526
  %tobool32 = icmp ne i32 %and31, 0, !dbg !10525
  %22 = zext i1 %tobool32 to i64, !dbg !10525
  %cond33 = select i1 %tobool32, i32 115, i32 83, !dbg !10525
  br label %cond.end38, !dbg !10523

cond.false34:                                     ; preds = %cond.end
  %23 = load i32, i32* %mode.addr, align 4, !dbg !10527
  %and35 = and i32 %23, 8, !dbg !10528
  %tobool36 = icmp ne i32 %and35, 0, !dbg !10527
  %24 = zext i1 %tobool36 to i64, !dbg !10527
  %cond37 = select i1 %tobool36, i32 120, i32 45, !dbg !10527
  br label %cond.end38, !dbg !10523

cond.end38:                                       ; preds = %cond.false34, %cond.true30
  %cond39 = phi i32 [ %cond33, %cond.true30 ], [ %cond37, %cond.false34 ], !dbg !10523
  %conv40 = trunc i32 %cond39 to i8, !dbg !10529
  %25 = load i8*, i8** %str.addr, align 8, !dbg !10530
  %arrayidx41 = getelementptr inbounds i8, i8* %25, i64 6, !dbg !10530, !ctir !143
  store i8 %conv40, i8* %arrayidx41, align 1, !dbg !10531
  %26 = load i32, i32* %mode.addr, align 4, !dbg !10532
  %and42 = and i32 %26, 4, !dbg !10533
  %tobool43 = icmp ne i32 %and42, 0, !dbg !10532
  %27 = zext i1 %tobool43 to i64, !dbg !10532
  %cond44 = select i1 %tobool43, i32 114, i32 45, !dbg !10532
  %conv45 = trunc i32 %cond44 to i8, !dbg !10532
  %28 = load i8*, i8** %str.addr, align 8, !dbg !10534
  %arrayidx46 = getelementptr inbounds i8, i8* %28, i64 7, !dbg !10534, !ctir !143
  store i8 %conv45, i8* %arrayidx46, align 1, !dbg !10535
  %29 = load i32, i32* %mode.addr, align 4, !dbg !10536
  %and47 = and i32 %29, 2, !dbg !10537
  %tobool48 = icmp ne i32 %and47, 0, !dbg !10536
  %30 = zext i1 %tobool48 to i64, !dbg !10536
  %cond49 = select i1 %tobool48, i32 119, i32 45, !dbg !10536
  %conv50 = trunc i32 %cond49 to i8, !dbg !10536
  %31 = load i8*, i8** %str.addr, align 8, !dbg !10538
  %arrayidx51 = getelementptr inbounds i8, i8* %31, i64 8, !dbg !10538, !ctir !143
  store i8 %conv50, i8* %arrayidx51, align 1, !dbg !10539
  %32 = load i32, i32* %mode.addr, align 4, !dbg !10540
  %and52 = and i32 %32, 512, !dbg !10541
  %tobool53 = icmp ne i32 %and52, 0, !dbg !10541
  br i1 %tobool53, label %cond.true54, label %cond.false58, !dbg !10540

cond.true54:                                      ; preds = %cond.end38
  %33 = load i32, i32* %mode.addr, align 4, !dbg !10542
  %and55 = and i32 %33, 1, !dbg !10543
  %tobool56 = icmp ne i32 %and55, 0, !dbg !10542
  %34 = zext i1 %tobool56 to i64, !dbg !10542
  %cond57 = select i1 %tobool56, i32 116, i32 84, !dbg !10542
  br label %cond.end62, !dbg !10540

cond.false58:                                     ; preds = %cond.end38
  %35 = load i32, i32* %mode.addr, align 4, !dbg !10544
  %and59 = and i32 %35, 1, !dbg !10545
  %tobool60 = icmp ne i32 %and59, 0, !dbg !10544
  %36 = zext i1 %tobool60 to i64, !dbg !10544
  %cond61 = select i1 %tobool60, i32 120, i32 45, !dbg !10544
  br label %cond.end62, !dbg !10540

cond.end62:                                       ; preds = %cond.false58, %cond.true54
  %cond63 = phi i32 [ %cond57, %cond.true54 ], [ %cond61, %cond.false58 ], !dbg !10540
  %conv64 = trunc i32 %cond63 to i8, !dbg !10546
  %37 = load i8*, i8** %str.addr, align 8, !dbg !10547
  %arrayidx65 = getelementptr inbounds i8, i8* %37, i64 9, !dbg !10547, !ctir !143
  store i8 %conv64, i8* %arrayidx65, align 1, !dbg !10548
  %38 = load i8*, i8** %str.addr, align 8, !dbg !10549
  %arrayidx66 = getelementptr inbounds i8, i8* %38, i64 10, !dbg !10549, !ctir !143
  store i8 32, i8* %arrayidx66, align 1, !dbg !10550
  %39 = load i8*, i8** %str.addr, align 8, !dbg !10551
  %arrayidx67 = getelementptr inbounds i8, i8* %39, i64 11, !dbg !10551, !ctir !143
  store i8 0, i8* %arrayidx67, align 1, !dbg !10552
  ret void, !dbg !10553
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @ftypelet(i32 %bits) #0 !dbg !10554 {
entry:
  %retval = alloca i8, align 1
  %bits.addr = alloca i32, align 4
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !10557, metadata !DIExpression()), !dbg !10558
  %0 = load i32, i32* %bits.addr, align 4, !dbg !10559
  %and = and i32 %0, 61440, !dbg !10559
  %cmp = icmp eq i32 %and, 32768, !dbg !10559
  br i1 %cmp, label %if.then, label %if.end, !dbg !10561

if.then:                                          ; preds = %entry
  store i8 45, i8* %retval, align 1, !dbg !10562
  br label %return, !dbg !10562

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %bits.addr, align 4, !dbg !10563
  %and1 = and i32 %1, 61440, !dbg !10563
  %cmp2 = icmp eq i32 %and1, 16384, !dbg !10563
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !10565

if.then3:                                         ; preds = %if.end
  store i8 100, i8* %retval, align 1, !dbg !10566
  br label %return, !dbg !10566

if.end4:                                          ; preds = %if.end
  %2 = load i32, i32* %bits.addr, align 4, !dbg !10567
  %and5 = and i32 %2, 61440, !dbg !10567
  %cmp6 = icmp eq i32 %and5, 24576, !dbg !10567
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !10569

if.then7:                                         ; preds = %if.end4
  store i8 98, i8* %retval, align 1, !dbg !10570
  br label %return, !dbg !10570

if.end8:                                          ; preds = %if.end4
  %3 = load i32, i32* %bits.addr, align 4, !dbg !10571
  %and9 = and i32 %3, 61440, !dbg !10571
  %cmp10 = icmp eq i32 %and9, 8192, !dbg !10571
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !10573

if.then11:                                        ; preds = %if.end8
  store i8 99, i8* %retval, align 1, !dbg !10574
  br label %return, !dbg !10574

if.end12:                                         ; preds = %if.end8
  %4 = load i32, i32* %bits.addr, align 4, !dbg !10575
  %and13 = and i32 %4, 61440, !dbg !10575
  %cmp14 = icmp eq i32 %and13, 40960, !dbg !10575
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !10577

if.then15:                                        ; preds = %if.end12
  store i8 108, i8* %retval, align 1, !dbg !10578
  br label %return, !dbg !10578

if.end16:                                         ; preds = %if.end12
  %5 = load i32, i32* %bits.addr, align 4, !dbg !10579
  %and17 = and i32 %5, 61440, !dbg !10579
  %cmp18 = icmp eq i32 %and17, 4096, !dbg !10579
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !10581

if.then19:                                        ; preds = %if.end16
  store i8 112, i8* %retval, align 1, !dbg !10582
  br label %return, !dbg !10582

if.end20:                                         ; preds = %if.end16
  %6 = load i32, i32* %bits.addr, align 4, !dbg !10583
  %and21 = and i32 %6, 61440, !dbg !10583
  %cmp22 = icmp eq i32 %and21, 49152, !dbg !10583
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !10585

if.then23:                                        ; preds = %if.end20
  store i8 115, i8* %retval, align 1, !dbg !10586
  br label %return, !dbg !10586

if.end24:                                         ; preds = %if.end20
  store i8 63, i8* %retval, align 1, !dbg !10587
  br label %return, !dbg !10587

return:                                           ; preds = %if.end24, %if.then23, %if.then19, %if.then15, %if.then11, %if.then7, %if.then3, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !10588
  ret i8 %7, !dbg !10588
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @filemodestring(%struct.stat* %statp, i8* %str) #0 !dbg !10589 {
entry:
  %statp.addr = alloca %struct.stat*, align 8
  %str.addr = alloca i8*, align 8
  store %struct.stat* %statp, %struct.stat** %statp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %statp.addr, metadata !10615, metadata !DIExpression()), !dbg !10616
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !10617, metadata !DIExpression()), !dbg !10618
  %0 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10619
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 3, !dbg !10620, !ctir !10593
  %1 = load i32, i32* %st_mode, align 8, !dbg !10620, !ctir !201
  %2 = load i8*, i8** %str.addr, align 8, !dbg !10621
  call void @strmode(i32 %1, i8* %2), !dbg !10622
  %3 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10623
  %st_mode1 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 3, !dbg !10623, !ctir !10593
  %4 = load i32, i32* %st_mode1, align 8, !dbg !10623, !ctir !201
  %5 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10623
  %st_mode2 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 3, !dbg !10623, !ctir !10593
  %6 = load i32, i32* %st_mode2, align 8, !dbg !10623, !ctir !201
  %sub = sub i32 %4, %6, !dbg !10623
  %tobool = icmp ne i32 %sub, 0, !dbg !10623
  br i1 %tobool, label %if.then, label %if.else, !dbg !10625

if.then:                                          ; preds = %entry
  %7 = load i8*, i8** %str.addr, align 8, !dbg !10626
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0, !dbg !10626, !ctir !143
  store i8 70, i8* %arrayidx, align 1, !dbg !10627
  br label %if.end18, !dbg !10626

if.else:                                          ; preds = %entry
  %8 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10628
  %st_mode3 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 3, !dbg !10628, !ctir !10593
  %9 = load i32, i32* %st_mode3, align 8, !dbg !10628, !ctir !201
  %10 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10628
  %st_mode4 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 3, !dbg !10628, !ctir !10593
  %11 = load i32, i32* %st_mode4, align 8, !dbg !10628, !ctir !201
  %sub5 = sub i32 %9, %11, !dbg !10628
  %tobool6 = icmp ne i32 %sub5, 0, !dbg !10628
  br i1 %tobool6, label %if.then7, label %if.else9, !dbg !10631

if.then7:                                         ; preds = %if.else
  %12 = load i8*, i8** %str.addr, align 8, !dbg !10632
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 0, !dbg !10632, !ctir !143
  store i8 81, i8* %arrayidx8, align 1, !dbg !10633
  br label %if.end17, !dbg !10632

if.else9:                                         ; preds = %if.else
  %13 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10634
  %st_mode10 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 3, !dbg !10634, !ctir !10593
  %14 = load i32, i32* %st_mode10, align 8, !dbg !10634, !ctir !201
  %15 = load %struct.stat*, %struct.stat** %statp.addr, align 8, !dbg !10634
  %st_mode11 = getelementptr inbounds %struct.stat, %struct.stat* %15, i32 0, i32 3, !dbg !10634, !ctir !10593
  %16 = load i32, i32* %st_mode11, align 8, !dbg !10634, !ctir !201
  %sub12 = sub i32 %14, %16, !dbg !10634
  %tobool13 = icmp ne i32 %sub12, 0, !dbg !10634
  br i1 %tobool13, label %if.then14, label %if.else16, !dbg !10636

if.then14:                                        ; preds = %if.else9
  %17 = load i8*, i8** %str.addr, align 8, !dbg !10637
  %arrayidx15 = getelementptr inbounds i8, i8* %17, i64 0, !dbg !10637, !ctir !143
  store i8 83, i8* %arrayidx15, align 1, !dbg !10638
  br label %if.end, !dbg !10637

if.else16:                                        ; preds = %if.else9
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then14
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then7
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  ret void, !dbg !10639
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @file_name_concat(i8* %dir, i8* %base, i8** %base_in_result) #0 !dbg !10640 {
entry:
  %dir.addr = alloca i8*, align 8
  %base.addr = alloca i8*, align 8
  %base_in_result.addr = alloca i8**, align 8
  %p = alloca i8*, align 8, !ctir !143
  store i8* %dir, i8** %dir.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dir.addr, metadata !10644, metadata !DIExpression()), !dbg !10645
  store i8* %base, i8** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %base.addr, metadata !10646, metadata !DIExpression()), !dbg !10647
  store i8** %base_in_result, i8*** %base_in_result.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %base_in_result.addr, metadata !10648, metadata !DIExpression()), !dbg !10649
  call void @llvm.dbg.declare(metadata i8** %p, metadata !10650, metadata !DIExpression()), !dbg !10651
  %0 = load i8*, i8** %dir.addr, align 8, !dbg !10652
  %1 = load i8*, i8** %base.addr, align 8, !dbg !10653
  %2 = load i8**, i8*** %base_in_result.addr, align 8, !dbg !10654
  %call = call i8* @mfile_name_concat(i8* %0, i8* %1, i8** %2), !dbg !10655
  store i8* %call, i8** %p, align 8, !dbg !10651
  %3 = load i8*, i8** %p, align 8, !dbg !10656
  %cmp = icmp eq i8* %3, null, !dbg !10658
  br i1 %cmp, label %if.then, label %if.end, !dbg !10659

if.then:                                          ; preds = %entry
  call void @xalloc_die() #14, !dbg !10660
  unreachable, !dbg !10660

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %p, align 8, !dbg !10661
  ret i8* %4, !dbg !10662
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mfile_name_concat(i8* %dir, i8* %base, i8** %base_in_result) #0 !dbg !10663 {
entry:
  %retval = alloca i8*, align 8
  %dir.addr = alloca i8*, align 8
  %base.addr = alloca i8*, align 8
  %base_in_result.addr = alloca i8**, align 8
  %dirbase = alloca i8*, align 8, !ctir !146
  %dirbaselen = alloca i64, align 8, !ctir !149
  %dirlen = alloca i64, align 8, !ctir !149
  %baselen = alloca i64, align 8, !ctir !149
  %sep = alloca i8, align 1, !ctir !144
  %p_concat = alloca i8*, align 8, !ctir !143
  %p = alloca i8*, align 8, !ctir !143
  store i8* %dir, i8** %dir.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dir.addr, metadata !10665, metadata !DIExpression()), !dbg !10666
  store i8* %base, i8** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %base.addr, metadata !10667, metadata !DIExpression()), !dbg !10668
  store i8** %base_in_result, i8*** %base_in_result.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %base_in_result.addr, metadata !10669, metadata !DIExpression()), !dbg !10670
  call void @llvm.dbg.declare(metadata i8** %dirbase, metadata !10671, metadata !DIExpression()), !dbg !10672
  %0 = load i8*, i8** %dir.addr, align 8, !dbg !10673
  %call = call i8* @last_component(i8* %0) #16, !dbg !10674
  store i8* %call, i8** %dirbase, align 8, !dbg !10672
  call void @llvm.dbg.declare(metadata i64* %dirbaselen, metadata !10675, metadata !DIExpression()), !dbg !10676
  %1 = load i8*, i8** %dirbase, align 8, !dbg !10677
  %call1 = call i64 @base_len(i8* %1) #16, !dbg !10678
  store i64 %call1, i64* %dirbaselen, align 8, !dbg !10676
  call void @llvm.dbg.declare(metadata i64* %dirlen, metadata !10679, metadata !DIExpression()), !dbg !10680
  %2 = load i8*, i8** %dirbase, align 8, !dbg !10681
  %3 = load i8*, i8** %dir.addr, align 8, !dbg !10682
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !10683
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64, !dbg !10683
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10683
  %4 = load i64, i64* %dirbaselen, align 8, !dbg !10684
  %add = add i64 %sub.ptr.sub, %4, !dbg !10685
  store i64 %add, i64* %dirlen, align 8, !dbg !10680
  call void @llvm.dbg.declare(metadata i64* %baselen, metadata !10686, metadata !DIExpression()), !dbg !10687
  %5 = load i8*, i8** %base.addr, align 8, !dbg !10688
  %call2 = call i64 @strlen(i8* %5) #16, !dbg !10689
  store i64 %call2, i64* %baselen, align 8, !dbg !10687
  call void @llvm.dbg.declare(metadata i8* %sep, metadata !10690, metadata !DIExpression()), !dbg !10691
  store i8 0, i8* %sep, align 1, !dbg !10691
  %6 = load i64, i64* %dirbaselen, align 8, !dbg !10692
  %tobool = icmp ne i64 %6, 0, !dbg !10692
  br i1 %tobool, label %if.then, label %if.else, !dbg !10694

if.then:                                          ; preds = %entry
  %7 = load i8*, i8** %dir.addr, align 8, !dbg !10695
  %8 = load i64, i64* %dirlen, align 8, !dbg !10695
  %sub = sub i64 %8, 1, !dbg !10695
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %sub, !dbg !10695, !ctir !146
  %9 = load i8, i8* %arrayidx, align 1, !dbg !10695
  %conv = sext i8 %9 to i32, !dbg !10695
  %cmp = icmp eq i32 %conv, 47, !dbg !10695
  br i1 %cmp, label %if.end, label %land.lhs.true, !dbg !10698

land.lhs.true:                                    ; preds = %if.then
  %10 = load i8*, i8** %base.addr, align 8, !dbg !10699
  %11 = load i8, i8* %10, align 1, !dbg !10699, !ctir !147
  %conv4 = sext i8 %11 to i32, !dbg !10699
  %cmp5 = icmp eq i32 %conv4, 47, !dbg !10699
  br i1 %cmp5, label %if.end, label %if.then7, !dbg !10700

if.then7:                                         ; preds = %land.lhs.true
  store i8 47, i8* %sep, align 1, !dbg !10701
  br label %if.end, !dbg !10702

if.end:                                           ; preds = %if.then7, %land.lhs.true, %if.then
  br label %if.end13, !dbg !10703

if.else:                                          ; preds = %entry
  %12 = load i8*, i8** %base.addr, align 8, !dbg !10704
  %13 = load i8, i8* %12, align 1, !dbg !10704, !ctir !147
  %conv8 = sext i8 %13 to i32, !dbg !10704
  %cmp9 = icmp eq i32 %conv8, 47, !dbg !10704
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !10706

if.then11:                                        ; preds = %if.else
  store i8 46, i8* %sep, align 1, !dbg !10707
  br label %if.end12, !dbg !10709

if.end12:                                         ; preds = %if.then11, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  call void @llvm.dbg.declare(metadata i8** %p_concat, metadata !10710, metadata !DIExpression()), !dbg !10711
  %14 = load i64, i64* %dirlen, align 8, !dbg !10712
  %15 = load i8, i8* %sep, align 1, !dbg !10713
  %conv14 = sext i8 %15 to i32, !dbg !10713
  %cmp15 = icmp ne i32 %conv14, 0, !dbg !10714
  %conv16 = zext i1 %cmp15 to i32, !dbg !10714
  %conv17 = sext i32 %conv16 to i64, !dbg !10715
  %add18 = add i64 %14, %conv17, !dbg !10716
  %16 = load i64, i64* %baselen, align 8, !dbg !10717
  %add19 = add i64 %add18, %16, !dbg !10718
  %add20 = add i64 %add19, 1, !dbg !10719
  %call21 = call noalias i8* @malloc(i64 %add20) #13, !dbg !10720
  store i8* %call21, i8** %p_concat, align 8, !dbg !10711
  call void @llvm.dbg.declare(metadata i8** %p, metadata !10721, metadata !DIExpression()), !dbg !10722
  %17 = load i8*, i8** %p_concat, align 8, !dbg !10723
  %cmp22 = icmp eq i8* %17, null, !dbg !10725
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !10726

if.then24:                                        ; preds = %if.end13
  store i8* null, i8** %retval, align 8, !dbg !10727
  br label %return, !dbg !10727

if.end25:                                         ; preds = %if.end13
  %18 = load i8*, i8** %p_concat, align 8, !dbg !10728
  %19 = load i8*, i8** %dir.addr, align 8, !dbg !10729
  %20 = load i64, i64* %dirlen, align 8, !dbg !10730
  %call26 = call i8* @mempcpy(i8* %18, i8* %19, i64 %20) #13, !dbg !10731
  store i8* %call26, i8** %p, align 8, !dbg !10732
  %21 = load i8, i8* %sep, align 1, !dbg !10733
  %22 = load i8*, i8** %p, align 8, !dbg !10734
  store i8 %21, i8* %22, align 1, !dbg !10735, !ctir !144
  %23 = load i8, i8* %sep, align 1, !dbg !10736
  %conv27 = sext i8 %23 to i32, !dbg !10736
  %cmp28 = icmp ne i32 %conv27, 0, !dbg !10737
  %conv29 = zext i1 %cmp28 to i32, !dbg !10737
  %24 = load i8*, i8** %p, align 8, !dbg !10738
  %idx.ext = sext i32 %conv29 to i64, !dbg !10738
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext, !dbg !10738, !ctir !144
  store i8* %add.ptr, i8** %p, align 8, !dbg !10738
  %25 = load i8**, i8*** %base_in_result.addr, align 8, !dbg !10739
  %tobool30 = icmp ne i8** %25, null, !dbg !10739
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !10741

if.then31:                                        ; preds = %if.end25
  %26 = load i8*, i8** %p, align 8, !dbg !10742
  %27 = load i8**, i8*** %base_in_result.addr, align 8, !dbg !10743
  store i8* %26, i8** %27, align 8, !dbg !10744, !ctir !143
  br label %if.end32, !dbg !10745

if.end32:                                         ; preds = %if.then31, %if.end25
  %28 = load i8*, i8** %p, align 8, !dbg !10746
  %29 = load i8*, i8** %base.addr, align 8, !dbg !10747
  %30 = load i64, i64* %baselen, align 8, !dbg !10748
  %call33 = call i8* @mempcpy(i8* %28, i8* %29, i64 %30) #13, !dbg !10749
  store i8* %call33, i8** %p, align 8, !dbg !10750
  %31 = load i8*, i8** %p, align 8, !dbg !10751
  store i8 0, i8* %31, align 1, !dbg !10752, !ctir !144
  %32 = load i8*, i8** %p_concat, align 8, !dbg !10753
  store i8* %32, i8** %retval, align 8, !dbg !10754
  br label %return, !dbg !10754

return:                                           ; preds = %if.end32, %if.then24
  %33 = load i8*, i8** %retval, align 8, !dbg !10755
  ret i8* %33, !dbg !10755
}

; Function Attrs: nounwind
declare dso_local i8* @mempcpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @filevercmp(i8* %s1, i8* %s2) #9 !dbg !10756 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %s1_pos = alloca i8*, align 8, !ctir !146
  %s2_pos = alloca i8*, align 8, !ctir !146
  %s1_suffix = alloca i8*, align 8, !ctir !146
  %s2_suffix = alloca i8*, align 8, !ctir !146
  %s1_len = alloca i64, align 8, !ctir !149
  %s2_len = alloca i64, align 8, !ctir !149
  %result = alloca i32, align 4, !ctir !27
  %simple_cmp = alloca i32, align 4, !ctir !27
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !10758, metadata !DIExpression()), !dbg !10759
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !10760, metadata !DIExpression()), !dbg !10761
  call void @llvm.dbg.declare(metadata i8** %s1_pos, metadata !10762, metadata !DIExpression()), !dbg !10763
  call void @llvm.dbg.declare(metadata i8** %s2_pos, metadata !10764, metadata !DIExpression()), !dbg !10765
  call void @llvm.dbg.declare(metadata i8** %s1_suffix, metadata !10766, metadata !DIExpression()), !dbg !10767
  call void @llvm.dbg.declare(metadata i8** %s2_suffix, metadata !10768, metadata !DIExpression()), !dbg !10769
  call void @llvm.dbg.declare(metadata i64* %s1_len, metadata !10770, metadata !DIExpression()), !dbg !10771
  call void @llvm.dbg.declare(metadata i64* %s2_len, metadata !10772, metadata !DIExpression()), !dbg !10773
  call void @llvm.dbg.declare(metadata i32* %result, metadata !10774, metadata !DIExpression()), !dbg !10775
  call void @llvm.dbg.declare(metadata i32* %simple_cmp, metadata !10776, metadata !DIExpression()), !dbg !10777
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !10778
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !10779
  %call = call i32 @strcmp(i8* %0, i8* %1) #16, !dbg !10780
  store i32 %call, i32* %simple_cmp, align 4, !dbg !10777
  %2 = load i32, i32* %simple_cmp, align 4, !dbg !10781
  %cmp = icmp eq i32 %2, 0, !dbg !10783
  br i1 %cmp, label %if.then, label %if.end, !dbg !10784

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10785
  br label %return, !dbg !10785

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %s1.addr, align 8, !dbg !10786
  %4 = load i8, i8* %3, align 1, !dbg !10788, !ctir !147
  %tobool = icmp ne i8 %4, 0, !dbg !10788
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !10789

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !10790
  br label %return, !dbg !10790

if.end2:                                          ; preds = %if.end
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !10791
  %6 = load i8, i8* %5, align 1, !dbg !10793, !ctir !147
  %tobool3 = icmp ne i8 %6, 0, !dbg !10793
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !10794

if.then4:                                         ; preds = %if.end2
  store i32 1, i32* %retval, align 4, !dbg !10795
  br label %return, !dbg !10795

if.end5:                                          ; preds = %if.end2
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !10796
  %call6 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.298, i64 0, i64 0), i8* %7) #16, !dbg !10798
  %cmp7 = icmp eq i32 0, %call6, !dbg !10799
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !10800

if.then8:                                         ; preds = %if.end5
  store i32 -1, i32* %retval, align 4, !dbg !10801
  br label %return, !dbg !10801

if.end9:                                          ; preds = %if.end5
  %8 = load i8*, i8** %s2.addr, align 8, !dbg !10802
  %call10 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.298, i64 0, i64 0), i8* %8) #16, !dbg !10804
  %cmp11 = icmp eq i32 0, %call10, !dbg !10805
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !10806

if.then12:                                        ; preds = %if.end9
  store i32 1, i32* %retval, align 4, !dbg !10807
  br label %return, !dbg !10807

if.end13:                                         ; preds = %if.end9
  %9 = load i8*, i8** %s1.addr, align 8, !dbg !10808
  %call14 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.299, i64 0, i64 0), i8* %9) #16, !dbg !10810
  %cmp15 = icmp eq i32 0, %call14, !dbg !10811
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !10812

if.then16:                                        ; preds = %if.end13
  store i32 -1, i32* %retval, align 4, !dbg !10813
  br label %return, !dbg !10813

if.end17:                                         ; preds = %if.end13
  %10 = load i8*, i8** %s2.addr, align 8, !dbg !10814
  %call18 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.299, i64 0, i64 0), i8* %10) #16, !dbg !10816
  %cmp19 = icmp eq i32 0, %call18, !dbg !10817
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !10818

if.then20:                                        ; preds = %if.end17
  store i32 1, i32* %retval, align 4, !dbg !10819
  br label %return, !dbg !10819

if.end21:                                         ; preds = %if.end17
  %11 = load i8*, i8** %s1.addr, align 8, !dbg !10820
  %12 = load i8, i8* %11, align 1, !dbg !10822, !ctir !147
  %conv = sext i8 %12 to i32, !dbg !10822
  %cmp22 = icmp eq i32 %conv, 46, !dbg !10823
  br i1 %cmp22, label %land.lhs.true, label %if.end28, !dbg !10824

land.lhs.true:                                    ; preds = %if.end21
  %13 = load i8*, i8** %s2.addr, align 8, !dbg !10825
  %14 = load i8, i8* %13, align 1, !dbg !10826, !ctir !147
  %conv24 = sext i8 %14 to i32, !dbg !10826
  %cmp25 = icmp ne i32 %conv24, 46, !dbg !10827
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !10828

if.then27:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !10829
  br label %return, !dbg !10829

if.end28:                                         ; preds = %land.lhs.true, %if.end21
  %15 = load i8*, i8** %s1.addr, align 8, !dbg !10830
  %16 = load i8, i8* %15, align 1, !dbg !10832, !ctir !147
  %conv29 = sext i8 %16 to i32, !dbg !10832
  %cmp30 = icmp ne i32 %conv29, 46, !dbg !10833
  br i1 %cmp30, label %land.lhs.true32, label %if.end37, !dbg !10834

land.lhs.true32:                                  ; preds = %if.end28
  %17 = load i8*, i8** %s2.addr, align 8, !dbg !10835
  %18 = load i8, i8* %17, align 1, !dbg !10836, !ctir !147
  %conv33 = sext i8 %18 to i32, !dbg !10836
  %cmp34 = icmp eq i32 %conv33, 46, !dbg !10837
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !10838

if.then36:                                        ; preds = %land.lhs.true32
  store i32 1, i32* %retval, align 4, !dbg !10839
  br label %return, !dbg !10839

if.end37:                                         ; preds = %land.lhs.true32, %if.end28
  %19 = load i8*, i8** %s1.addr, align 8, !dbg !10840
  %20 = load i8, i8* %19, align 1, !dbg !10842, !ctir !147
  %conv38 = sext i8 %20 to i32, !dbg !10842
  %cmp39 = icmp eq i32 %conv38, 46, !dbg !10843
  br i1 %cmp39, label %land.lhs.true41, label %if.end47, !dbg !10844

land.lhs.true41:                                  ; preds = %if.end37
  %21 = load i8*, i8** %s2.addr, align 8, !dbg !10845
  %22 = load i8, i8* %21, align 1, !dbg !10846, !ctir !147
  %conv42 = sext i8 %22 to i32, !dbg !10846
  %cmp43 = icmp eq i32 %conv42, 46, !dbg !10847
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !10848

if.then45:                                        ; preds = %land.lhs.true41
  %23 = load i8*, i8** %s1.addr, align 8, !dbg !10849
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !10849, !ctir !147
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !dbg !10849
  %24 = load i8*, i8** %s2.addr, align 8, !dbg !10851
  %incdec.ptr46 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !10851, !ctir !147
  store i8* %incdec.ptr46, i8** %s2.addr, align 8, !dbg !10851
  br label %if.end47, !dbg !10852

if.end47:                                         ; preds = %if.then45, %land.lhs.true41, %if.end37
  %25 = load i8*, i8** %s1.addr, align 8, !dbg !10853
  store i8* %25, i8** %s1_pos, align 8, !dbg !10854
  %26 = load i8*, i8** %s2.addr, align 8, !dbg !10855
  store i8* %26, i8** %s2_pos, align 8, !dbg !10856
  %call48 = call i8* @match_suffix(i8** %s1_pos), !dbg !10857
  store i8* %call48, i8** %s1_suffix, align 8, !dbg !10858
  %call49 = call i8* @match_suffix(i8** %s2_pos), !dbg !10859
  store i8* %call49, i8** %s2_suffix, align 8, !dbg !10860
  %27 = load i8*, i8** %s1_suffix, align 8, !dbg !10861
  %tobool50 = icmp ne i8* %27, null, !dbg !10861
  br i1 %tobool50, label %cond.true, label %cond.false, !dbg !10861

cond.true:                                        ; preds = %if.end47
  %28 = load i8*, i8** %s1_suffix, align 8, !dbg !10862
  br label %cond.end, !dbg !10861

cond.false:                                       ; preds = %if.end47
  %29 = load i8*, i8** %s1_pos, align 8, !dbg !10863
  br label %cond.end, !dbg !10861

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %28, %cond.true ], [ %29, %cond.false ], !dbg !10861
  %30 = load i8*, i8** %s1.addr, align 8, !dbg !10864
  %sub.ptr.lhs.cast = ptrtoint i8* %cond to i64, !dbg !10865
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64, !dbg !10865
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10865
  store i64 %sub.ptr.sub, i64* %s1_len, align 8, !dbg !10866
  %31 = load i8*, i8** %s2_suffix, align 8, !dbg !10867
  %tobool51 = icmp ne i8* %31, null, !dbg !10867
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !10867

cond.true52:                                      ; preds = %cond.end
  %32 = load i8*, i8** %s2_suffix, align 8, !dbg !10868
  br label %cond.end54, !dbg !10867

cond.false53:                                     ; preds = %cond.end
  %33 = load i8*, i8** %s2_pos, align 8, !dbg !10869
  br label %cond.end54, !dbg !10867

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i8* [ %32, %cond.true52 ], [ %33, %cond.false53 ], !dbg !10867
  %34 = load i8*, i8** %s2.addr, align 8, !dbg !10870
  %sub.ptr.lhs.cast56 = ptrtoint i8* %cond55 to i64, !dbg !10871
  %sub.ptr.rhs.cast57 = ptrtoint i8* %34 to i64, !dbg !10871
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57, !dbg !10871
  store i64 %sub.ptr.sub58, i64* %s2_len, align 8, !dbg !10872
  %35 = load i8*, i8** %s1_suffix, align 8, !dbg !10873
  %tobool59 = icmp ne i8* %35, null, !dbg !10873
  br i1 %tobool59, label %land.lhs.true61, label %lor.lhs.false, !dbg !10875

lor.lhs.false:                                    ; preds = %cond.end54
  %36 = load i8*, i8** %s2_suffix, align 8, !dbg !10876
  %tobool60 = icmp ne i8* %36, null, !dbg !10876
  br i1 %tobool60, label %land.lhs.true61, label %if.end75, !dbg !10877

land.lhs.true61:                                  ; preds = %lor.lhs.false, %cond.end54
  %37 = load i64, i64* %s1_len, align 8, !dbg !10878
  %38 = load i64, i64* %s2_len, align 8, !dbg !10879
  %cmp62 = icmp eq i64 %37, %38, !dbg !10880
  br i1 %cmp62, label %land.lhs.true64, label %if.end75, !dbg !10881

land.lhs.true64:                                  ; preds = %land.lhs.true61
  %39 = load i8*, i8** %s1.addr, align 8, !dbg !10882
  %40 = load i8*, i8** %s2.addr, align 8, !dbg !10883
  %41 = load i64, i64* %s1_len, align 8, !dbg !10884
  %call65 = call i32 @strncmp(i8* %39, i8* %40, i64 %41) #16, !dbg !10885
  %cmp66 = icmp eq i32 0, %call65, !dbg !10886
  br i1 %cmp66, label %if.then68, label %if.end75, !dbg !10887

if.then68:                                        ; preds = %land.lhs.true64
  %42 = load i8*, i8** %s1_pos, align 8, !dbg !10888
  %43 = load i8*, i8** %s1.addr, align 8, !dbg !10890
  %sub.ptr.lhs.cast69 = ptrtoint i8* %42 to i64, !dbg !10891
  %sub.ptr.rhs.cast70 = ptrtoint i8* %43 to i64, !dbg !10891
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70, !dbg !10891
  store i64 %sub.ptr.sub71, i64* %s1_len, align 8, !dbg !10892
  %44 = load i8*, i8** %s2_pos, align 8, !dbg !10893
  %45 = load i8*, i8** %s2.addr, align 8, !dbg !10894
  %sub.ptr.lhs.cast72 = ptrtoint i8* %44 to i64, !dbg !10895
  %sub.ptr.rhs.cast73 = ptrtoint i8* %45 to i64, !dbg !10895
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73, !dbg !10895
  store i64 %sub.ptr.sub74, i64* %s2_len, align 8, !dbg !10896
  br label %if.end75, !dbg !10897

if.end75:                                         ; preds = %if.then68, %land.lhs.true64, %land.lhs.true61, %lor.lhs.false
  %46 = load i8*, i8** %s1.addr, align 8, !dbg !10898
  %47 = load i64, i64* %s1_len, align 8, !dbg !10899
  %48 = load i8*, i8** %s2.addr, align 8, !dbg !10900
  %49 = load i64, i64* %s2_len, align 8, !dbg !10901
  %call76 = call i32 @verrevcmp(i8* %46, i64 %47, i8* %48, i64 %49) #16, !dbg !10902
  store i32 %call76, i32* %result, align 4, !dbg !10903
  %50 = load i32, i32* %result, align 4, !dbg !10904
  %cmp77 = icmp eq i32 %50, 0, !dbg !10905
  br i1 %cmp77, label %cond.true79, label %cond.false80, !dbg !10904

cond.true79:                                      ; preds = %if.end75
  %51 = load i32, i32* %simple_cmp, align 4, !dbg !10906
  br label %cond.end81, !dbg !10904

cond.false80:                                     ; preds = %if.end75
  %52 = load i32, i32* %result, align 4, !dbg !10907
  br label %cond.end81, !dbg !10904

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ %51, %cond.true79 ], [ %52, %cond.false80 ], !dbg !10904
  store i32 %cond82, i32* %retval, align 4, !dbg !10908
  br label %return, !dbg !10908

return:                                           ; preds = %cond.end81, %if.then36, %if.then27, %if.then20, %if.then16, %if.then12, %if.then8, %if.then4, %if.then1, %if.then
  %53 = load i32, i32* %retval, align 4, !dbg !10909
  ret i32 %53, !dbg !10909
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @match_suffix(i8** %str) #0 !dbg !10910 {
entry:
  %str.addr = alloca i8**, align 8
  %match = alloca i8*, align 8, !ctir !146
  %read_alpha = alloca i8, align 1, !ctir !141
  store i8** %str, i8*** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %str.addr, metadata !10913, metadata !DIExpression()), !dbg !10914
  call void @llvm.dbg.declare(metadata i8** %match, metadata !10915, metadata !DIExpression()), !dbg !10916
  store i8* null, i8** %match, align 8, !dbg !10916
  call void @llvm.dbg.declare(metadata i8* %read_alpha, metadata !10917, metadata !DIExpression()), !dbg !10918
  store i8 0, i8* %read_alpha, align 1, !dbg !10918
  br label %while.cond, !dbg !10919

while.cond:                                       ; preds = %if.end22, %entry
  %0 = load i8**, i8*** %str.addr, align 8, !dbg !10920
  %1 = load i8*, i8** %0, align 8, !dbg !10921, !ctir !146
  %2 = load i8, i8* %1, align 1, !dbg !10922, !ctir !147
  %tobool = icmp ne i8 %2, 0, !dbg !10919
  br i1 %tobool, label %while.body, label %while.end, !dbg !10919

while.body:                                       ; preds = %while.cond
  %3 = load i8, i8* %read_alpha, align 1, !dbg !10923
  %tobool1 = trunc i8 %3 to i1, !dbg !10923
  br i1 %tobool1, label %if.then, label %if.else, !dbg !10926

if.then:                                          ; preds = %while.body
  store i8 0, i8* %read_alpha, align 1, !dbg !10927
  %4 = load i8**, i8*** %str.addr, align 8, !dbg !10929
  %5 = load i8*, i8** %4, align 8, !dbg !10931, !ctir !146
  %6 = load i8, i8* %5, align 1, !dbg !10932, !ctir !147
  %conv = sext i8 %6 to i32, !dbg !10932
  %call = call zeroext i1 @c_isalpha(i32 %conv), !dbg !10933
  br i1 %call, label %if.end, label %land.lhs.true, !dbg !10934

land.lhs.true:                                    ; preds = %if.then
  %7 = load i8**, i8*** %str.addr, align 8, !dbg !10935
  %8 = load i8*, i8** %7, align 8, !dbg !10936, !ctir !146
  %9 = load i8, i8* %8, align 1, !dbg !10937, !ctir !147
  %conv2 = sext i8 %9 to i32, !dbg !10937
  %cmp = icmp ne i32 126, %conv2, !dbg !10938
  br i1 %cmp, label %if.then4, label %if.end, !dbg !10939

if.then4:                                         ; preds = %land.lhs.true
  store i8* null, i8** %match, align 8, !dbg !10940
  br label %if.end, !dbg !10941

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %if.end22, !dbg !10942

if.else:                                          ; preds = %while.body
  %10 = load i8**, i8*** %str.addr, align 8, !dbg !10943
  %11 = load i8*, i8** %10, align 8, !dbg !10945, !ctir !146
  %12 = load i8, i8* %11, align 1, !dbg !10946, !ctir !147
  %conv5 = sext i8 %12 to i32, !dbg !10946
  %cmp6 = icmp eq i32 46, %conv5, !dbg !10947
  br i1 %cmp6, label %if.then8, label %if.else12, !dbg !10948

if.then8:                                         ; preds = %if.else
  store i8 1, i8* %read_alpha, align 1, !dbg !10949
  %13 = load i8*, i8** %match, align 8, !dbg !10951
  %tobool9 = icmp ne i8* %13, null, !dbg !10951
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !10953

if.then10:                                        ; preds = %if.then8
  %14 = load i8**, i8*** %str.addr, align 8, !dbg !10954
  %15 = load i8*, i8** %14, align 8, !dbg !10955, !ctir !146
  store i8* %15, i8** %match, align 8, !dbg !10956
  br label %if.end11, !dbg !10957

if.end11:                                         ; preds = %if.then10, %if.then8
  br label %if.end21, !dbg !10958

if.else12:                                        ; preds = %if.else
  %16 = load i8**, i8*** %str.addr, align 8, !dbg !10959
  %17 = load i8*, i8** %16, align 8, !dbg !10961, !ctir !146
  %18 = load i8, i8* %17, align 1, !dbg !10962, !ctir !147
  %conv13 = sext i8 %18 to i32, !dbg !10962
  %call14 = call zeroext i1 @c_isalnum(i32 %conv13), !dbg !10963
  br i1 %call14, label %if.end20, label %land.lhs.true15, !dbg !10964

land.lhs.true15:                                  ; preds = %if.else12
  %19 = load i8**, i8*** %str.addr, align 8, !dbg !10965
  %20 = load i8*, i8** %19, align 8, !dbg !10966, !ctir !146
  %21 = load i8, i8* %20, align 1, !dbg !10967, !ctir !147
  %conv16 = sext i8 %21 to i32, !dbg !10967
  %cmp17 = icmp ne i32 126, %conv16, !dbg !10968
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !10969

if.then19:                                        ; preds = %land.lhs.true15
  store i8* null, i8** %match, align 8, !dbg !10970
  br label %if.end20, !dbg !10971

if.end20:                                         ; preds = %if.then19, %land.lhs.true15, %if.else12
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end11
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end
  %22 = load i8**, i8*** %str.addr, align 8, !dbg !10972
  %23 = load i8*, i8** %22, align 8, !dbg !10973, !ctir !146
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !10973, !ctir !147
  store i8* %incdec.ptr, i8** %22, align 8, !dbg !10973, !ctir !146
  br label %while.cond, !dbg !10919, !llvm.loop !10974

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %match, align 8, !dbg !10976
  ret i8* %24, !dbg !10977
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @verrevcmp(i8* %s1, i64 %s1_len, i8* %s2, i64 %s2_len) #9 !dbg !10978 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1_len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2_len.addr = alloca i64, align 8
  %s1_pos = alloca i64, align 8, !ctir !149
  %s2_pos = alloca i64, align 8, !ctir !149
  %first_diff = alloca i32, align 4, !ctir !27
  %s1_c = alloca i32, align 4, !ctir !27
  %s2_c = alloca i32, align 4, !ctir !27
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !10981, metadata !DIExpression()), !dbg !10982
  store i64 %s1_len, i64* %s1_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1_len.addr, metadata !10983, metadata !DIExpression()), !dbg !10984
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !10985, metadata !DIExpression()), !dbg !10986
  store i64 %s2_len, i64* %s2_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2_len.addr, metadata !10987, metadata !DIExpression()), !dbg !10988
  call void @llvm.dbg.declare(metadata i64* %s1_pos, metadata !10989, metadata !DIExpression()), !dbg !10990
  store i64 0, i64* %s1_pos, align 8, !dbg !10990
  call void @llvm.dbg.declare(metadata i64* %s2_pos, metadata !10991, metadata !DIExpression()), !dbg !10992
  store i64 0, i64* %s2_pos, align 8, !dbg !10992
  br label %while.cond, !dbg !10993

while.cond:                                       ; preds = %if.end77, %entry
  %0 = load i64, i64* %s1_pos, align 8, !dbg !10994
  %1 = load i64, i64* %s1_len.addr, align 8, !dbg !10995
  %cmp = icmp ult i64 %0, %1, !dbg !10996
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !10997

lor.rhs:                                          ; preds = %while.cond
  %2 = load i64, i64* %s2_pos, align 8, !dbg !10998
  %3 = load i64, i64* %s2_len.addr, align 8, !dbg !10999
  %cmp1 = icmp ult i64 %2, %3, !dbg !11000
  br label %lor.end, !dbg !10997

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %4 = phi i1 [ true, %while.cond ], [ %cmp1, %lor.rhs ]
  br i1 %4, label %while.body, label %while.end78, !dbg !10993

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i32* %first_diff, metadata !11001, metadata !DIExpression()), !dbg !11003
  store i32 0, i32* %first_diff, align 4, !dbg !11003
  br label %while.cond2, !dbg !11004

while.cond2:                                      ; preds = %if.end, %while.body
  %5 = load i64, i64* %s1_pos, align 8, !dbg !11005
  %6 = load i64, i64* %s1_len.addr, align 8, !dbg !11006
  %cmp3 = icmp ult i64 %5, %6, !dbg !11007
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs4, !dbg !11008

land.lhs.true:                                    ; preds = %while.cond2
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !11009
  %8 = load i64, i64* %s1_pos, align 8, !dbg !11010
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %8, !dbg !11009, !ctir !146
  %9 = load i8, i8* %arrayidx, align 1, !dbg !11009
  %conv = sext i8 %9 to i32, !dbg !11009
  %call = call zeroext i1 @c_isdigit(i32 %conv), !dbg !11011
  br i1 %call, label %lor.rhs4, label %lor.end10, !dbg !11012

lor.rhs4:                                         ; preds = %land.lhs.true, %while.cond2
  %10 = load i64, i64* %s2_pos, align 8, !dbg !11013
  %11 = load i64, i64* %s2_len.addr, align 8, !dbg !11014
  %cmp5 = icmp ult i64 %10, %11, !dbg !11015
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !11016

land.rhs:                                         ; preds = %lor.rhs4
  %12 = load i8*, i8** %s2.addr, align 8, !dbg !11017
  %13 = load i64, i64* %s2_pos, align 8, !dbg !11018
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !11017, !ctir !146
  %14 = load i8, i8* %arrayidx7, align 1, !dbg !11017
  %conv8 = sext i8 %14 to i32, !dbg !11017
  %call9 = call zeroext i1 @c_isdigit(i32 %conv8), !dbg !11019
  %lnot = xor i1 %call9, true, !dbg !11020
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs4
  %15 = phi i1 [ false, %lor.rhs4 ], [ %lnot, %land.rhs ], !dbg !11021
  br label %lor.end10, !dbg !11012

lor.end10:                                        ; preds = %land.end, %land.lhs.true
  %16 = phi i1 [ true, %land.lhs.true ], [ %15, %land.end ]
  br i1 %16, label %while.body11, label %while.end, !dbg !11004

while.body11:                                     ; preds = %lor.end10
  call void @llvm.dbg.declare(metadata i32* %s1_c, metadata !11022, metadata !DIExpression()), !dbg !11024
  %17 = load i64, i64* %s1_pos, align 8, !dbg !11025
  %18 = load i64, i64* %s1_len.addr, align 8, !dbg !11026
  %cmp12 = icmp eq i64 %17, %18, !dbg !11027
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !11028

cond.true:                                        ; preds = %while.body11
  br label %cond.end, !dbg !11028

cond.false:                                       ; preds = %while.body11
  %19 = load i8*, i8** %s1.addr, align 8, !dbg !11029
  %20 = load i64, i64* %s1_pos, align 8, !dbg !11030
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !11029, !ctir !146
  %21 = load i8, i8* %arrayidx14, align 1, !dbg !11029
  %call15 = call i32 @order(i8 zeroext %21), !dbg !11031
  br label %cond.end, !dbg !11028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call15, %cond.false ], !dbg !11028
  store i32 %cond, i32* %s1_c, align 4, !dbg !11024
  call void @llvm.dbg.declare(metadata i32* %s2_c, metadata !11032, metadata !DIExpression()), !dbg !11033
  %22 = load i64, i64* %s2_pos, align 8, !dbg !11034
  %23 = load i64, i64* %s2_len.addr, align 8, !dbg !11035
  %cmp16 = icmp eq i64 %22, %23, !dbg !11036
  br i1 %cmp16, label %cond.true18, label %cond.false19, !dbg !11037

cond.true18:                                      ; preds = %cond.end
  br label %cond.end22, !dbg !11037

cond.false19:                                     ; preds = %cond.end
  %24 = load i8*, i8** %s2.addr, align 8, !dbg !11038
  %25 = load i64, i64* %s2_pos, align 8, !dbg !11039
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %25, !dbg !11038, !ctir !146
  %26 = load i8, i8* %arrayidx20, align 1, !dbg !11038
  %call21 = call i32 @order(i8 zeroext %26), !dbg !11040
  br label %cond.end22, !dbg !11037

cond.end22:                                       ; preds = %cond.false19, %cond.true18
  %cond23 = phi i32 [ 0, %cond.true18 ], [ %call21, %cond.false19 ], !dbg !11037
  store i32 %cond23, i32* %s2_c, align 4, !dbg !11033
  %27 = load i32, i32* %s1_c, align 4, !dbg !11041
  %28 = load i32, i32* %s2_c, align 4, !dbg !11043
  %cmp24 = icmp ne i32 %27, %28, !dbg !11044
  br i1 %cmp24, label %if.then, label %if.end, !dbg !11045

if.then:                                          ; preds = %cond.end22
  %29 = load i32, i32* %s1_c, align 4, !dbg !11046
  %30 = load i32, i32* %s2_c, align 4, !dbg !11047
  %sub = sub nsw i32 %29, %30, !dbg !11048
  store i32 %sub, i32* %retval, align 4, !dbg !11049
  br label %return, !dbg !11049

if.end:                                           ; preds = %cond.end22
  %31 = load i64, i64* %s1_pos, align 8, !dbg !11050
  %inc = add i64 %31, 1, !dbg !11050
  store i64 %inc, i64* %s1_pos, align 8, !dbg !11050
  %32 = load i64, i64* %s2_pos, align 8, !dbg !11051
  %inc26 = add i64 %32, 1, !dbg !11051
  store i64 %inc26, i64* %s2_pos, align 8, !dbg !11051
  br label %while.cond2, !dbg !11004, !llvm.loop !11052

while.end:                                        ; preds = %lor.end10
  br label %while.cond27, !dbg !11054

while.cond27:                                     ; preds = %while.body32, %while.end
  %33 = load i8*, i8** %s1.addr, align 8, !dbg !11055
  %34 = load i64, i64* %s1_pos, align 8, !dbg !11056
  %arrayidx28 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !11055, !ctir !146
  %35 = load i8, i8* %arrayidx28, align 1, !dbg !11055
  %conv29 = sext i8 %35 to i32, !dbg !11055
  %cmp30 = icmp eq i32 %conv29, 48, !dbg !11057
  br i1 %cmp30, label %while.body32, label %while.end34, !dbg !11054

while.body32:                                     ; preds = %while.cond27
  %36 = load i64, i64* %s1_pos, align 8, !dbg !11058
  %inc33 = add i64 %36, 1, !dbg !11058
  store i64 %inc33, i64* %s1_pos, align 8, !dbg !11058
  br label %while.cond27, !dbg !11054, !llvm.loop !11059

while.end34:                                      ; preds = %while.cond27
  br label %while.cond35, !dbg !11060

while.cond35:                                     ; preds = %while.body40, %while.end34
  %37 = load i8*, i8** %s2.addr, align 8, !dbg !11061
  %38 = load i64, i64* %s2_pos, align 8, !dbg !11062
  %arrayidx36 = getelementptr inbounds i8, i8* %37, i64 %38, !dbg !11061, !ctir !146
  %39 = load i8, i8* %arrayidx36, align 1, !dbg !11061
  %conv37 = sext i8 %39 to i32, !dbg !11061
  %cmp38 = icmp eq i32 %conv37, 48, !dbg !11063
  br i1 %cmp38, label %while.body40, label %while.end42, !dbg !11060

while.body40:                                     ; preds = %while.cond35
  %40 = load i64, i64* %s2_pos, align 8, !dbg !11064
  %inc41 = add i64 %40, 1, !dbg !11064
  store i64 %inc41, i64* %s2_pos, align 8, !dbg !11064
  br label %while.cond35, !dbg !11060, !llvm.loop !11065

while.end42:                                      ; preds = %while.cond35
  br label %while.cond43, !dbg !11066

while.cond43:                                     ; preds = %if.end61, %while.end42
  %41 = load i8*, i8** %s1.addr, align 8, !dbg !11067
  %42 = load i64, i64* %s1_pos, align 8, !dbg !11068
  %arrayidx44 = getelementptr inbounds i8, i8* %41, i64 %42, !dbg !11067, !ctir !146
  %43 = load i8, i8* %arrayidx44, align 1, !dbg !11067
  %conv45 = sext i8 %43 to i32, !dbg !11067
  %call46 = call zeroext i1 @c_isdigit(i32 %conv45), !dbg !11069
  br i1 %call46, label %land.rhs48, label %land.end53, !dbg !11070

land.rhs48:                                       ; preds = %while.cond43
  %44 = load i8*, i8** %s2.addr, align 8, !dbg !11071
  %45 = load i64, i64* %s2_pos, align 8, !dbg !11072
  %arrayidx49 = getelementptr inbounds i8, i8* %44, i64 %45, !dbg !11071, !ctir !146
  %46 = load i8, i8* %arrayidx49, align 1, !dbg !11071
  %conv50 = sext i8 %46 to i32, !dbg !11071
  %call51 = call zeroext i1 @c_isdigit(i32 %conv50), !dbg !11073
  br label %land.end53

land.end53:                                       ; preds = %land.rhs48, %while.cond43
  %47 = phi i1 [ false, %while.cond43 ], [ %call51, %land.rhs48 ], !dbg !11021
  br i1 %47, label %while.body54, label %while.end64, !dbg !11066

while.body54:                                     ; preds = %land.end53
  %48 = load i32, i32* %first_diff, align 4, !dbg !11074
  %tobool = icmp ne i32 %48, 0, !dbg !11074
  br i1 %tobool, label %if.end61, label %if.then55, !dbg !11077

if.then55:                                        ; preds = %while.body54
  %49 = load i8*, i8** %s1.addr, align 8, !dbg !11078
  %50 = load i64, i64* %s1_pos, align 8, !dbg !11079
  %arrayidx56 = getelementptr inbounds i8, i8* %49, i64 %50, !dbg !11078, !ctir !146
  %51 = load i8, i8* %arrayidx56, align 1, !dbg !11078
  %conv57 = sext i8 %51 to i32, !dbg !11078
  %52 = load i8*, i8** %s2.addr, align 8, !dbg !11080
  %53 = load i64, i64* %s2_pos, align 8, !dbg !11081
  %arrayidx58 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !11080, !ctir !146
  %54 = load i8, i8* %arrayidx58, align 1, !dbg !11080
  %conv59 = sext i8 %54 to i32, !dbg !11080
  %sub60 = sub nsw i32 %conv57, %conv59, !dbg !11082
  store i32 %sub60, i32* %first_diff, align 4, !dbg !11083
  br label %if.end61, !dbg !11084

if.end61:                                         ; preds = %if.then55, %while.body54
  %55 = load i64, i64* %s1_pos, align 8, !dbg !11085
  %inc62 = add i64 %55, 1, !dbg !11085
  store i64 %inc62, i64* %s1_pos, align 8, !dbg !11085
  %56 = load i64, i64* %s2_pos, align 8, !dbg !11086
  %inc63 = add i64 %56, 1, !dbg !11086
  store i64 %inc63, i64* %s2_pos, align 8, !dbg !11086
  br label %while.cond43, !dbg !11066, !llvm.loop !11087

while.end64:                                      ; preds = %land.end53
  %57 = load i8*, i8** %s1.addr, align 8, !dbg !11089
  %58 = load i64, i64* %s1_pos, align 8, !dbg !11091
  %arrayidx65 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !11089, !ctir !146
  %59 = load i8, i8* %arrayidx65, align 1, !dbg !11089
  %conv66 = sext i8 %59 to i32, !dbg !11089
  %call67 = call zeroext i1 @c_isdigit(i32 %conv66), !dbg !11092
  br i1 %call67, label %if.then68, label %if.end69, !dbg !11093

if.then68:                                        ; preds = %while.end64
  store i32 1, i32* %retval, align 4, !dbg !11094
  br label %return, !dbg !11094

if.end69:                                         ; preds = %while.end64
  %60 = load i8*, i8** %s2.addr, align 8, !dbg !11095
  %61 = load i64, i64* %s2_pos, align 8, !dbg !11097
  %arrayidx70 = getelementptr inbounds i8, i8* %60, i64 %61, !dbg !11095, !ctir !146
  %62 = load i8, i8* %arrayidx70, align 1, !dbg !11095
  %conv71 = sext i8 %62 to i32, !dbg !11095
  %call72 = call zeroext i1 @c_isdigit(i32 %conv71), !dbg !11098
  br i1 %call72, label %if.then73, label %if.end74, !dbg !11099

if.then73:                                        ; preds = %if.end69
  store i32 -1, i32* %retval, align 4, !dbg !11100
  br label %return, !dbg !11100

if.end74:                                         ; preds = %if.end69
  %63 = load i32, i32* %first_diff, align 4, !dbg !11101
  %tobool75 = icmp ne i32 %63, 0, !dbg !11101
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !11103

if.then76:                                        ; preds = %if.end74
  %64 = load i32, i32* %first_diff, align 4, !dbg !11104
  store i32 %64, i32* %retval, align 4, !dbg !11105
  br label %return, !dbg !11105

if.end77:                                         ; preds = %if.end74
  br label %while.cond, !dbg !10993, !llvm.loop !11106

while.end78:                                      ; preds = %lor.end
  store i32 0, i32* %retval, align 4, !dbg !11108
  br label %return, !dbg !11108

return:                                           ; preds = %while.end78, %if.then76, %if.then73, %if.then68, %if.then
  %65 = load i32, i32* %retval, align 4, !dbg !11109
  ret i32 %65, !dbg !11109
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @order(i8 zeroext %c) #0 !dbg !11110 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !11113, metadata !DIExpression()), !dbg !11114
  %0 = load i8, i8* %c.addr, align 1, !dbg !11115
  %conv = zext i8 %0 to i32, !dbg !11115
  %call = call zeroext i1 @c_isdigit(i32 %conv), !dbg !11117
  br i1 %call, label %if.then, label %if.else, !dbg !11118

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11119
  br label %return, !dbg !11119

if.else:                                          ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1, !dbg !11120
  %conv1 = zext i8 %1 to i32, !dbg !11120
  %call2 = call zeroext i1 @c_isalpha(i32 %conv1), !dbg !11122
  br i1 %call2, label %if.then3, label %if.else5, !dbg !11123

if.then3:                                         ; preds = %if.else
  %2 = load i8, i8* %c.addr, align 1, !dbg !11124
  %conv4 = zext i8 %2 to i32, !dbg !11124
  store i32 %conv4, i32* %retval, align 4, !dbg !11125
  br label %return, !dbg !11125

if.else5:                                         ; preds = %if.else
  %3 = load i8, i8* %c.addr, align 1, !dbg !11126
  %conv6 = zext i8 %3 to i32, !dbg !11126
  %cmp = icmp eq i32 %conv6, 126, !dbg !11128
  br i1 %cmp, label %if.then8, label %if.else9, !dbg !11129

if.then8:                                         ; preds = %if.else5
  store i32 -1, i32* %retval, align 4, !dbg !11130
  br label %return, !dbg !11130

if.else9:                                         ; preds = %if.else5
  %4 = load i8, i8* %c.addr, align 1, !dbg !11131
  %conv10 = zext i8 %4 to i32, !dbg !11132
  %add = add nsw i32 %conv10, 255, !dbg !11133
  %add11 = add nsw i32 %add, 1, !dbg !11134
  store i32 %add11, i32* %retval, align 4, !dbg !11135
  br label %return, !dbg !11135

return:                                           ; preds = %if.else9, %if.then8, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !11136
  ret i32 %5, !dbg !11136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gettime(%struct.dev_ino* nonnull %ts) #0 !dbg !11137 {
entry:
  %ts.addr = alloca %struct.dev_ino*, align 8
  store %struct.dev_ino* %ts, %struct.dev_ino** %ts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %ts.addr, metadata !11146, metadata !DIExpression()), !dbg !11147
  %0 = load %struct.dev_ino*, %struct.dev_ino** %ts.addr, align 8, !dbg !11148
  %call = call i32 @clock_gettime(i32 0, %struct.dev_ino* %0) #13, !dbg !11149
  ret void, !dbg !11150
}

; Function Attrs: nounwind
declare dso_local i32 @clock_gettime(i32, %struct.dev_ino*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local { i64, i64 } @current_timespec() #0 !dbg !11151 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %retval, metadata !11154, metadata !DIExpression()), !dbg !11155
  call void @gettime(%struct.dev_ino* %retval), !dbg !11156
  %0 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !11157
  %1 = load { i64, i64 }, { i64, i64 }* %0, align 8, !dbg !11157
  ret { i64, i64 } %1, !dbg !11157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hard_locale(i32 %category) #0 !dbg !11158 {
entry:
  %category.addr = alloca i32, align 4
  %hard = alloca i8, align 1, !ctir !141
  %p = alloca i8*, align 8, !ctir !146
  store i32 %category, i32* %category.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %category.addr, metadata !11160, metadata !DIExpression()), !dbg !11161
  call void @llvm.dbg.declare(metadata i8* %hard, metadata !11162, metadata !DIExpression()), !dbg !11163
  store i8 1, i8* %hard, align 1, !dbg !11163
  call void @llvm.dbg.declare(metadata i8** %p, metadata !11164, metadata !DIExpression()), !dbg !11165
  %0 = load i32, i32* %category.addr, align 4, !dbg !11166
  %call = call i8* @setlocale(i32 %0, i8* null) #13, !dbg !11167
  store i8* %call, i8** %p, align 8, !dbg !11165
  %1 = load i8*, i8** %p, align 8, !dbg !11168
  %tobool = icmp ne i8* %1, null, !dbg !11168
  br i1 %tobool, label %if.then, label %if.end5, !dbg !11170

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %p, align 8, !dbg !11171
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.304, i64 0, i64 0)) #16, !dbg !11176
  %cmp = icmp eq i32 %call1, 0, !dbg !11177
  br i1 %cmp, label %if.then4, label %lor.lhs.false, !dbg !11178

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i8*, i8** %p, align 8, !dbg !11179
  %call2 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.305, i64 0, i64 0)) #16, !dbg !11180
  %cmp3 = icmp eq i32 %call2, 0, !dbg !11181
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !11182

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i8 0, i8* %hard, align 1, !dbg !11183
  br label %if.end, !dbg !11184

if.end:                                           ; preds = %if.then4, %lor.lhs.false
  br label %if.end5, !dbg !11185

if.end5:                                          ; preds = %if.end, %entry
  %4 = load i8, i8* %hard, align 1, !dbg !11186
  %tobool6 = trunc i8 %4 to i1, !dbg !11186
  ret i1 %tobool6, !dbg !11187
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_buckets(%struct.hash_table* %table) #9 !dbg !11188 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11192, metadata !DIExpression()), !dbg !11193
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11194
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2, !dbg !11195, !ctir !1195
  %1 = load i64, i64* %n_buckets, align 8, !dbg !11195, !ctir !149
  ret i64 %1, !dbg !11196
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_buckets_used(%struct.hash_table* %table) #9 !dbg !11197 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11198, metadata !DIExpression()), !dbg !11199
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11200
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3, !dbg !11201, !ctir !1195
  %1 = load i64, i64* %n_buckets_used, align 8, !dbg !11201, !ctir !149
  ret i64 %1, !dbg !11202
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_entries(%struct.hash_table* %table) #9 !dbg !11203 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11204, metadata !DIExpression()), !dbg !11205
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11206
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4, !dbg !11207, !ctir !1195
  %1 = load i64, i64* %n_entries, align 8, !dbg !11207, !ctir !149
  ret i64 %1, !dbg !11208
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_max_bucket_length(%struct.hash_table* %table) #9 !dbg !11209 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %max_bucket_length = alloca i64, align 8, !ctir !149
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  %bucket_length = alloca i64, align 8, !ctir !149
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11210, metadata !DIExpression()), !dbg !11211
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11212, metadata !DIExpression()), !dbg !11213
  call void @llvm.dbg.declare(metadata i64* %max_bucket_length, metadata !11214, metadata !DIExpression()), !dbg !11215
  store i64 0, i64* %max_bucket_length, align 8, !dbg !11215
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11216
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11218, !ctir !1195
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11218, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11219
  br label %for.cond, !dbg !11220

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11221
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11223
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11224, !ctir !1195
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11224, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11225
  br i1 %cmp, label %for.body, label %for.end, !dbg !11226

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11227
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11230, !ctir !1208
  %6 = load i8*, i8** %data, align 8, !dbg !11230, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !11227
  br i1 %tobool, label %if.then, label %if.end5, !dbg !11231

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11232, metadata !DIExpression()), !dbg !11234
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11235
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11234
  call void @llvm.dbg.declare(metadata i64* %bucket_length, metadata !11236, metadata !DIExpression()), !dbg !11237
  store i64 1, i64* %bucket_length, align 8, !dbg !11237
  br label %while.cond, !dbg !11238

while.cond:                                       ; preds = %while.body, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11239
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 1, !dbg !11240, !ctir !1208
  %9 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11240, !ctir !1201
  store %struct.hash_entry* %9, %struct.hash_entry** %cursor, align 8, !dbg !11241
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11242
  %tobool2 = icmp ne %struct.hash_entry* %10, null, !dbg !11238
  br i1 %tobool2, label %while.body, label %while.end, !dbg !11238

while.body:                                       ; preds = %while.cond
  %11 = load i64, i64* %bucket_length, align 8, !dbg !11243
  %inc = add i64 %11, 1, !dbg !11243
  store i64 %inc, i64* %bucket_length, align 8, !dbg !11243
  br label %while.cond, !dbg !11238, !llvm.loop !11244

while.end:                                        ; preds = %while.cond
  %12 = load i64, i64* %bucket_length, align 8, !dbg !11245
  %13 = load i64, i64* %max_bucket_length, align 8, !dbg !11247
  %cmp3 = icmp ugt i64 %12, %13, !dbg !11248
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !11249

if.then4:                                         ; preds = %while.end
  %14 = load i64, i64* %bucket_length, align 8, !dbg !11250
  store i64 %14, i64* %max_bucket_length, align 8, !dbg !11251
  br label %if.end, !dbg !11252

if.end:                                           ; preds = %if.then4, %while.end
  br label %if.end5, !dbg !11253

if.end5:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !11254

for.inc:                                          ; preds = %if.end5
  %15 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11255
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 1, !dbg !11255, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11255
  br label %for.cond, !dbg !11256, !llvm.loop !11257

for.end:                                          ; preds = %for.cond
  %16 = load i64, i64* %max_bucket_length, align 8, !dbg !11259
  ret i64 %16, !dbg !11260
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local zeroext i1 @hash_table_ok(%struct.hash_table* %table) #9 !dbg !11261 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %n_buckets_used = alloca i64, align 8, !ctir !149
  %n_entries = alloca i64, align 8, !ctir !149
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11264, metadata !DIExpression()), !dbg !11265
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11266, metadata !DIExpression()), !dbg !11267
  call void @llvm.dbg.declare(metadata i64* %n_buckets_used, metadata !11268, metadata !DIExpression()), !dbg !11269
  store i64 0, i64* %n_buckets_used, align 8, !dbg !11269
  call void @llvm.dbg.declare(metadata i64* %n_entries, metadata !11270, metadata !DIExpression()), !dbg !11271
  store i64 0, i64* %n_entries, align 8, !dbg !11271
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11272
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11274, !ctir !1195
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11274, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11275
  br label %for.cond, !dbg !11276

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11277
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11279
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11280, !ctir !1195
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11280, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11281
  br i1 %cmp, label %for.body, label %for.end, !dbg !11282

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11283
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11286, !ctir !1208
  %6 = load i8*, i8** %data, align 8, !dbg !11286, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !11283
  br i1 %tobool, label %if.then, label %if.end, !dbg !11287

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11288, metadata !DIExpression()), !dbg !11290
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11291
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11290
  %8 = load i64, i64* %n_buckets_used, align 8, !dbg !11292
  %inc = add i64 %8, 1, !dbg !11292
  store i64 %inc, i64* %n_buckets_used, align 8, !dbg !11292
  %9 = load i64, i64* %n_entries, align 8, !dbg !11293
  %inc2 = add i64 %9, 1, !dbg !11293
  store i64 %inc2, i64* %n_entries, align 8, !dbg !11293
  br label %while.cond, !dbg !11294

while.cond:                                       ; preds = %while.body, %if.then
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11295
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 1, !dbg !11296, !ctir !1208
  %11 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11296, !ctir !1201
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !dbg !11297
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11298
  %tobool3 = icmp ne %struct.hash_entry* %12, null, !dbg !11294
  br i1 %tobool3, label %while.body, label %while.end, !dbg !11294

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %n_entries, align 8, !dbg !11299
  %inc4 = add i64 %13, 1, !dbg !11299
  store i64 %inc4, i64* %n_entries, align 8, !dbg !11299
  br label %while.cond, !dbg !11294, !llvm.loop !11300

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !11301

if.end:                                           ; preds = %while.end, %for.body
  br label %for.inc, !dbg !11302

for.inc:                                          ; preds = %if.end
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11303
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 1, !dbg !11303, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11303
  br label %for.cond, !dbg !11304, !llvm.loop !11305

for.end:                                          ; preds = %for.cond
  %15 = load i64, i64* %n_buckets_used, align 8, !dbg !11307
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11309
  %n_buckets_used5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 3, !dbg !11310, !ctir !1195
  %17 = load i64, i64* %n_buckets_used5, align 8, !dbg !11310, !ctir !149
  %cmp6 = icmp eq i64 %15, %17, !dbg !11311
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !11312

land.lhs.true:                                    ; preds = %for.end
  %18 = load i64, i64* %n_entries, align 8, !dbg !11313
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11314
  %n_entries7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 4, !dbg !11315, !ctir !1195
  %20 = load i64, i64* %n_entries7, align 8, !dbg !11315, !ctir !149
  %cmp8 = icmp eq i64 %18, %20, !dbg !11316
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !11317

if.then9:                                         ; preds = %land.lhs.true
  store i1 true, i1* %retval, align 1, !dbg !11318
  br label %return, !dbg !11318

if.end10:                                         ; preds = %land.lhs.true, %for.end
  store i1 false, i1* %retval, align 1, !dbg !11319
  br label %return, !dbg !11319

return:                                           ; preds = %if.end10, %if.then9
  %21 = load i1, i1* %retval, align 1, !dbg !11320
  ret i1 %21, !dbg !11320
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_print_statistics(%struct.hash_table* %table, %struct._IO_FILE* %stream) #0 !dbg !11321 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %n_entries = alloca i64, align 8, !ctir !149
  %n_buckets = alloca i64, align 8, !ctir !149
  %n_buckets_used = alloca i64, align 8, !ctir !149
  %max_bucket_length = alloca i64, align 8, !ctir !149
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11358, metadata !DIExpression()), !dbg !11359
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11360, metadata !DIExpression()), !dbg !11361
  call void @llvm.dbg.declare(metadata i64* %n_entries, metadata !11362, metadata !DIExpression()), !dbg !11363
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11364
  %call = call i64 @hash_get_n_entries(%struct.hash_table* %0) #16, !dbg !11365
  store i64 %call, i64* %n_entries, align 8, !dbg !11363
  call void @llvm.dbg.declare(metadata i64* %n_buckets, metadata !11366, metadata !DIExpression()), !dbg !11367
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11368
  %call1 = call i64 @hash_get_n_buckets(%struct.hash_table* %1) #16, !dbg !11369
  store i64 %call1, i64* %n_buckets, align 8, !dbg !11367
  call void @llvm.dbg.declare(metadata i64* %n_buckets_used, metadata !11370, metadata !DIExpression()), !dbg !11371
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11372
  %call2 = call i64 @hash_get_n_buckets_used(%struct.hash_table* %2) #16, !dbg !11373
  store i64 %call2, i64* %n_buckets_used, align 8, !dbg !11371
  call void @llvm.dbg.declare(metadata i64* %max_bucket_length, metadata !11374, metadata !DIExpression()), !dbg !11375
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11376
  %call3 = call i64 @hash_get_max_bucket_length(%struct.hash_table* %3) #16, !dbg !11377
  store i64 %call3, i64* %max_bucket_length, align 8, !dbg !11375
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11378
  %5 = load i64, i64* %n_entries, align 8, !dbg !11379
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.308, i64 0, i64 0), i64 %5), !dbg !11380
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11381
  %7 = load i64, i64* %n_buckets, align 8, !dbg !11382
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.309, i64 0, i64 0), i64 %7), !dbg !11383
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11384
  %9 = load i64, i64* %n_buckets_used, align 8, !dbg !11385
  %10 = load i64, i64* %n_buckets_used, align 8, !dbg !11386
  %conv = uitofp i64 %10 to double, !dbg !11386
  %mul = fmul double 1.000000e+02, %conv, !dbg !11387
  %11 = load i64, i64* %n_buckets, align 8, !dbg !11388
  %conv6 = uitofp i64 %11 to double, !dbg !11388
  %div = fdiv double %mul, %conv6, !dbg !11389
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.310, i64 0, i64 0), i64 %9, double %div), !dbg !11390
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11391
  %13 = load i64, i64* %max_bucket_length, align 8, !dbg !11392
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3.311, i64 0, i64 0), i64 %13), !dbg !11393
  ret void, !dbg !11394
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_lookup(%struct.hash_table* %table, i8* %entry1) #0 !dbg !11395 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11398, metadata !DIExpression()), !dbg !11399
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !11400, metadata !DIExpression()), !dbg !11401
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11402, metadata !DIExpression()), !dbg !11403
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11404
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !11405
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !11406
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !11403
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11407, metadata !DIExpression()), !dbg !11408
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11409
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %2, i32 0, i32 0, !dbg !11411, !ctir !1208
  %3 = load i8*, i8** %data, align 8, !dbg !11411, !ctir !167
  %cmp = icmp eq i8* %3, null, !dbg !11412
  br i1 %cmp, label %if.then, label %if.end, !dbg !11413

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11414
  br label %return, !dbg !11414

if.end:                                           ; preds = %entry
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11415
  store %struct.hash_entry* %4, %struct.hash_entry** %cursor, align 8, !dbg !11417
  br label %for.cond, !dbg !11418

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11419
  %tobool = icmp ne %struct.hash_entry* %5, null, !dbg !11421
  br i1 %tobool, label %for.body, label %for.end, !dbg !11421

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %entry.addr, align 8, !dbg !11422
  %7 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11424
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !11425, !ctir !1208
  %8 = load i8*, i8** %data2, align 8, !dbg !11425, !ctir !167
  %cmp3 = icmp eq i8* %6, %8, !dbg !11426
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !11427

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11428
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 7, !dbg !11429, !ctir !1195
  %10 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !11429, !ctir !1230
  %11 = load i8*, i8** %entry.addr, align 8, !dbg !11430
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11431
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !11432, !ctir !1208
  %13 = load i8*, i8** %data4, align 8, !dbg !11432, !ctir !167
  %call5 = call zeroext i1 %10(i8* %11, i8* %13), !dbg !11428
  br i1 %call5, label %if.then6, label %if.end8, !dbg !11433

if.then6:                                         ; preds = %lor.lhs.false, %for.body
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11434
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !11435, !ctir !1208
  %15 = load i8*, i8** %data7, align 8, !dbg !11435, !ctir !167
  store i8* %15, i8** %retval, align 8, !dbg !11436
  br label %return, !dbg !11436

if.end8:                                          ; preds = %lor.lhs.false
  br label %for.inc, !dbg !11437

for.inc:                                          ; preds = %if.end8
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11438
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 1, !dbg !11439, !ctir !1208
  %17 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11439, !ctir !1201
  store %struct.hash_entry* %17, %struct.hash_entry** %cursor, align 8, !dbg !11440
  br label %for.cond, !dbg !11441, !llvm.loop !11442

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !11444
  br label %return, !dbg !11444

return:                                           ; preds = %for.end, %if.then6, %if.then
  %18 = load i8*, i8** %retval, align 8, !dbg !11445
  ret i8* %18, !dbg !11445
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @safe_hasher(%struct.hash_table* %table, i8* %key) #0 !dbg !11446 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %key.addr = alloca i8*, align 8
  %n = alloca i64, align 8, !ctir !149
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11449, metadata !DIExpression()), !dbg !11450
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !11451, metadata !DIExpression()), !dbg !11452
  call void @llvm.dbg.declare(metadata i64* %n, metadata !11453, metadata !DIExpression()), !dbg !11454
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11455
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 6, !dbg !11456, !ctir !1195
  %1 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !dbg !11456, !ctir !1225
  %2 = load i8*, i8** %key.addr, align 8, !dbg !11457
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11458
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 2, !dbg !11459, !ctir !1195
  %4 = load i64, i64* %n_buckets, align 8, !dbg !11459, !ctir !149
  %call = call i64 %1(i8* %2, i64 %4), !dbg !11455
  store i64 %call, i64* %n, align 8, !dbg !11454
  %5 = load i64, i64* %n, align 8, !dbg !11460
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11462
  %n_buckets1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 2, !dbg !11463, !ctir !1195
  %7 = load i64, i64* %n_buckets1, align 8, !dbg !11463, !ctir !149
  %cmp = icmp ult i64 %5, %7, !dbg !11464
  br i1 %cmp, label %if.end, label %if.then, !dbg !11465

if.then:                                          ; preds = %entry
  call void @abort() #15, !dbg !11466
  unreachable, !dbg !11466

if.end:                                           ; preds = %entry
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11467
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 0, !dbg !11468, !ctir !1195
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11468, !ctir !1201
  %10 = load i64, i64* %n, align 8, !dbg !11469
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i64 %10, !dbg !11470, !ctir !1202
  ret %struct.hash_entry* %add.ptr, !dbg !11471
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i8* @hash_get_first(%struct.hash_table* %table) #9 !dbg !11472 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11475, metadata !DIExpression()), !dbg !11476
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11477, metadata !DIExpression()), !dbg !11478
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11479
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4, !dbg !11481, !ctir !1195
  %1 = load i64, i64* %n_entries, align 8, !dbg !11481, !ctir !149
  %cmp = icmp eq i64 %1, 0, !dbg !11482
  br i1 %cmp, label %if.then, label %if.end, !dbg !11483

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11484
  br label %return, !dbg !11484

if.end:                                           ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11485
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 0, !dbg !11487, !ctir !1195
  %3 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11487, !ctir !1201
  store %struct.hash_entry* %3, %struct.hash_entry** %bucket, align 8, !dbg !11488
  br label %for.cond, !dbg !11489

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11490
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11493
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 1, !dbg !11494, !ctir !1195
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11494, !ctir !1207
  %cmp2 = icmp ult %struct.hash_entry* %4, %6, !dbg !11495
  br i1 %cmp2, label %if.else, label %if.then3, !dbg !11496

if.then3:                                         ; preds = %for.cond
  call void @abort() #15, !dbg !11497
  unreachable, !dbg !11497

if.else:                                          ; preds = %for.cond
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11498
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !11500, !ctir !1208
  %8 = load i8*, i8** %data, align 8, !dbg !11500, !ctir !167
  %tobool = icmp ne i8* %8, null, !dbg !11498
  br i1 %tobool, label %if.then4, label %if.end6, !dbg !11501

if.then4:                                         ; preds = %if.else
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11502
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !11503, !ctir !1208
  %10 = load i8*, i8** %data5, align 8, !dbg !11503, !ctir !167
  store i8* %10, i8** %retval, align 8, !dbg !11504
  br label %return, !dbg !11504

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6
  br label %for.inc, !dbg !11505

for.inc:                                          ; preds = %if.end7
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11506
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 1, !dbg !11506, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11506
  br label %for.cond, !dbg !11507, !llvm.loop !11508

return:                                           ; preds = %if.then4, %if.then
  %12 = load i8*, i8** %retval, align 8, !dbg !11511
  ret i8* %12, !dbg !11511
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_get_next(%struct.hash_table* %table, i8* %entry1) #0 !dbg !11512 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11513, metadata !DIExpression()), !dbg !11514
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !11515, metadata !DIExpression()), !dbg !11516
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11517, metadata !DIExpression()), !dbg !11518
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11519
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !11520
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !11521
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !11518
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11522, metadata !DIExpression()), !dbg !11523
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11524
  store %struct.hash_entry* %2, %struct.hash_entry** %cursor, align 8, !dbg !11525
  br label %do.body, !dbg !11526

do.body:                                          ; preds = %do.cond, %entry
  %3 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11527
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i32 0, i32 0, !dbg !11530, !ctir !1208
  %4 = load i8*, i8** %data, align 8, !dbg !11530, !ctir !167
  %5 = load i8*, i8** %entry.addr, align 8, !dbg !11531
  %cmp = icmp eq i8* %4, %5, !dbg !11532
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11533

land.lhs.true:                                    ; preds = %do.body
  %6 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11534
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %6, i32 0, i32 1, !dbg !11535, !ctir !1208
  %7 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11535, !ctir !1201
  %tobool = icmp ne %struct.hash_entry* %7, null, !dbg !11534
  br i1 %tobool, label %if.then, label %if.end, !dbg !11536

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11537
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 1, !dbg !11538, !ctir !1208
  %9 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !dbg !11538, !ctir !1201
  %data3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !11539, !ctir !1202
  %10 = load i8*, i8** %data3, align 8, !dbg !11539, !ctir !167
  store i8* %10, i8** %retval, align 8, !dbg !11540
  br label %return, !dbg !11540

if.end:                                           ; preds = %land.lhs.true, %do.body
  %11 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11541
  %next4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 0, i32 1, !dbg !11542, !ctir !1208
  %12 = load %struct.hash_entry*, %struct.hash_entry** %next4, align 8, !dbg !11542, !ctir !1201
  store %struct.hash_entry* %12, %struct.hash_entry** %cursor, align 8, !dbg !11543
  br label %do.cond, !dbg !11544

do.cond:                                          ; preds = %if.end
  %13 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11545
  %cmp5 = icmp ne %struct.hash_entry* %13, null, !dbg !11546
  br i1 %cmp5, label %do.body, label %do.end, !dbg !11544, !llvm.loop !11547

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !11549

while.cond:                                       ; preds = %if.end11, %do.end
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11550
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 1, !dbg !11550, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11550
  %15 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11551
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 1, !dbg !11552, !ctir !1195
  %16 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11552, !ctir !1207
  %cmp6 = icmp ult %struct.hash_entry* %incdec.ptr, %16, !dbg !11553
  br i1 %cmp6, label %while.body, label %while.end, !dbg !11549

while.body:                                       ; preds = %while.cond
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11554
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 0, !dbg !11556, !ctir !1208
  %18 = load i8*, i8** %data7, align 8, !dbg !11556, !ctir !167
  %tobool8 = icmp ne i8* %18, null, !dbg !11554
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !11557

if.then9:                                         ; preds = %while.body
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11558
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 0, !dbg !11559, !ctir !1208
  %20 = load i8*, i8** %data10, align 8, !dbg !11559, !ctir !167
  store i8* %20, i8** %retval, align 8, !dbg !11560
  br label %return, !dbg !11560

if.end11:                                         ; preds = %while.body
  br label %while.cond, !dbg !11549, !llvm.loop !11561

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !11563
  br label %return, !dbg !11563

return:                                           ; preds = %while.end, %if.then9, %if.then
  %21 = load i8*, i8** %retval, align 8, !dbg !11564
  ret i8* %21, !dbg !11564
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @hash_get_entries(%struct.hash_table* %table, i8** %buffer, i64 %buffer_size) #0 !dbg !11565 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_size.addr = alloca i64, align 8
  %counter = alloca i64, align 8, !ctir !149
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11568, metadata !DIExpression()), !dbg !11569
  store i8** %buffer, i8*** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %buffer.addr, metadata !11570, metadata !DIExpression()), !dbg !11571
  store i64 %buffer_size, i64* %buffer_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffer_size.addr, metadata !11572, metadata !DIExpression()), !dbg !11573
  call void @llvm.dbg.declare(metadata i64* %counter, metadata !11574, metadata !DIExpression()), !dbg !11575
  store i64 0, i64* %counter, align 8, !dbg !11575
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11576, metadata !DIExpression()), !dbg !11577
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11578, metadata !DIExpression()), !dbg !11579
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11580
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11582, !ctir !1195
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11582, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11583
  br label %for.cond, !dbg !11584

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11585
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11587
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11588, !ctir !1195
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11588, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11589
  br i1 %cmp, label %for.body, label %for.end10, !dbg !11590

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11591
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11594, !ctir !1208
  %6 = load i8*, i8** %data, align 8, !dbg !11594, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !11591
  br i1 %tobool, label %if.then, label %if.end8, !dbg !11595

if.then:                                          ; preds = %for.body
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11596
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11599
  br label %for.cond2, !dbg !11600

for.cond2:                                        ; preds = %for.inc, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11601
  %tobool3 = icmp ne %struct.hash_entry* %8, null, !dbg !11603
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !11603

for.body4:                                        ; preds = %for.cond2
  %9 = load i64, i64* %counter, align 8, !dbg !11604
  %10 = load i64, i64* %buffer_size.addr, align 8, !dbg !11607
  %cmp5 = icmp uge i64 %9, %10, !dbg !11608
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !11609

if.then6:                                         ; preds = %for.body4
  %11 = load i64, i64* %counter, align 8, !dbg !11610
  store i64 %11, i64* %retval, align 8, !dbg !11611
  br label %return, !dbg !11611

if.end:                                           ; preds = %for.body4
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11612
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !11613, !ctir !1208
  %13 = load i8*, i8** %data7, align 8, !dbg !11613, !ctir !167
  %14 = load i8**, i8*** %buffer.addr, align 8, !dbg !11614
  %15 = load i64, i64* %counter, align 8, !dbg !11615
  %inc = add i64 %15, 1, !dbg !11615
  store i64 %inc, i64* %counter, align 8, !dbg !11615
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %15, !dbg !11614, !ctir !767
  store i8* %13, i8** %arrayidx, align 8, !dbg !11616
  br label %for.inc, !dbg !11617

for.inc:                                          ; preds = %if.end
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11618
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 1, !dbg !11619, !ctir !1208
  %17 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11619, !ctir !1201
  store %struct.hash_entry* %17, %struct.hash_entry** %cursor, align 8, !dbg !11620
  br label %for.cond2, !dbg !11621, !llvm.loop !11622

for.end:                                          ; preds = %for.cond2
  br label %if.end8, !dbg !11624

if.end8:                                          ; preds = %for.end, %for.body
  br label %for.inc9, !dbg !11625

for.inc9:                                         ; preds = %if.end8
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11626
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 1, !dbg !11626, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11626
  br label %for.cond, !dbg !11627, !llvm.loop !11628

for.end10:                                        ; preds = %for.cond
  %19 = load i64, i64* %counter, align 8, !dbg !11630
  store i64 %19, i64* %retval, align 8, !dbg !11631
  br label %return, !dbg !11631

return:                                           ; preds = %for.end10, %if.then6
  %20 = load i64, i64* %retval, align 8, !dbg !11632
  ret i64 %20, !dbg !11632
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @hash_do_for_each(%struct.hash_table* %table, i1 (i8*, i8*)* %processor, i8* %processor_data) #0 !dbg !11633 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %processor.addr = alloca i1 (i8*, i8*)*, align 8
  %processor_data.addr = alloca i8*, align 8
  %counter = alloca i64, align 8, !ctir !149
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1207
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1207
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11640, metadata !DIExpression()), !dbg !11641
  store i1 (i8*, i8*)* %processor, i1 (i8*, i8*)** %processor.addr, align 8
  call void @llvm.dbg.declare(metadata i1 (i8*, i8*)** %processor.addr, metadata !11642, metadata !DIExpression()), !dbg !11643
  store i8* %processor_data, i8** %processor_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %processor_data.addr, metadata !11644, metadata !DIExpression()), !dbg !11645
  call void @llvm.dbg.declare(metadata i64* %counter, metadata !11646, metadata !DIExpression()), !dbg !11647
  store i64 0, i64* %counter, align 8, !dbg !11647
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11648, metadata !DIExpression()), !dbg !11649
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11650, metadata !DIExpression()), !dbg !11651
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11652
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11654, !ctir !1195
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11654, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11655
  br label %for.cond, !dbg !11656

for.cond:                                         ; preds = %for.inc8, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11657
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11659
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11660, !ctir !1195
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11660, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11661
  br i1 %cmp, label %for.body, label %for.end9, !dbg !11662

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11663
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11666, !ctir !1208
  %6 = load i8*, i8** %data, align 8, !dbg !11666, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !11663
  br i1 %tobool, label %if.then, label %if.end7, !dbg !11667

if.then:                                          ; preds = %for.body
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11668
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11671
  br label %for.cond2, !dbg !11672

for.cond2:                                        ; preds = %for.inc, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11673
  %tobool3 = icmp ne %struct.hash_entry* %8, null, !dbg !11675
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !11675

for.body4:                                        ; preds = %for.cond2
  %9 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %processor.addr, align 8, !dbg !11676
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11679
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 0, !dbg !11680, !ctir !1208
  %11 = load i8*, i8** %data5, align 8, !dbg !11680, !ctir !167
  %12 = load i8*, i8** %processor_data.addr, align 8, !dbg !11681
  %call = call zeroext i1 %9(i8* %11, i8* %12), !dbg !11676
  br i1 %call, label %if.end, label %if.then6, !dbg !11682

if.then6:                                         ; preds = %for.body4
  %13 = load i64, i64* %counter, align 8, !dbg !11683
  store i64 %13, i64* %retval, align 8, !dbg !11684
  br label %return, !dbg !11684

if.end:                                           ; preds = %for.body4
  %14 = load i64, i64* %counter, align 8, !dbg !11685
  %inc = add i64 %14, 1, !dbg !11685
  store i64 %inc, i64* %counter, align 8, !dbg !11685
  br label %for.inc, !dbg !11686

for.inc:                                          ; preds = %if.end
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11687
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 1, !dbg !11688, !ctir !1208
  %16 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11688, !ctir !1201
  store %struct.hash_entry* %16, %struct.hash_entry** %cursor, align 8, !dbg !11689
  br label %for.cond2, !dbg !11690, !llvm.loop !11691

for.end:                                          ; preds = %for.cond2
  br label %if.end7, !dbg !11693

if.end7:                                          ; preds = %for.end, %for.body
  br label %for.inc8, !dbg !11694

for.inc8:                                         ; preds = %if.end7
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11695
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 1, !dbg !11695, !ctir !1208
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11695
  br label %for.cond, !dbg !11696, !llvm.loop !11697

for.end9:                                         ; preds = %for.cond
  %18 = load i64, i64* %counter, align 8, !dbg !11699
  store i64 %18, i64* %retval, align 8, !dbg !11700
  br label %return, !dbg !11700

return:                                           ; preds = %for.end9, %if.then6
  %19 = load i64, i64* %retval, align 8, !dbg !11701
  ret i64 %19, !dbg !11701
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_string(i8* %string, i64 %n_buckets) #9 !dbg !11702 {
entry:
  %string.addr = alloca i8*, align 8
  %n_buckets.addr = alloca i64, align 8
  %value = alloca i64, align 8, !ctir !149
  %ch = alloca i8, align 1, !ctir !737
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !11705, metadata !DIExpression()), !dbg !11706
  store i64 %n_buckets, i64* %n_buckets.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_buckets.addr, metadata !11707, metadata !DIExpression()), !dbg !11708
  call void @llvm.dbg.declare(metadata i64* %value, metadata !11709, metadata !DIExpression()), !dbg !11710
  store i64 0, i64* %value, align 8, !dbg !11710
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !11711, metadata !DIExpression()), !dbg !11712
  br label %for.cond, !dbg !11713

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %string.addr, align 8, !dbg !11714
  %1 = load i8, i8* %0, align 1, !dbg !11717, !ctir !147
  store i8 %1, i8* %ch, align 1, !dbg !11718
  %tobool = icmp ne i8 %1, 0, !dbg !11719
  br i1 %tobool, label %for.body, label %for.end, !dbg !11719

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %value, align 8, !dbg !11720
  %mul = mul i64 %2, 31, !dbg !11721
  %3 = load i8, i8* %ch, align 1, !dbg !11722
  %conv = zext i8 %3 to i64, !dbg !11722
  %add = add i64 %mul, %conv, !dbg !11723
  %4 = load i64, i64* %n_buckets.addr, align 8, !dbg !11724
  %rem = urem i64 %add, %4, !dbg !11725
  store i64 %rem, i64* %value, align 8, !dbg !11726
  br label %for.inc, !dbg !11727

for.inc:                                          ; preds = %for.body
  %5 = load i8*, i8** %string.addr, align 8, !dbg !11728
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !11728, !ctir !147
  store i8* %incdec.ptr, i8** %string.addr, align 8, !dbg !11728
  br label %for.cond, !dbg !11729, !llvm.loop !11730

for.end:                                          ; preds = %for.cond
  %6 = load i64, i64* %value, align 8, !dbg !11732
  ret i64 %6, !dbg !11733
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_reset_tuning(%struct.hash_tuning* %tuning) #0 !dbg !11734 {
entry:
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !11738, metadata !DIExpression()), !dbg !11739
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11740
  %1 = bitcast %struct.hash_tuning* %0 to i8*, !dbg !11741
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 bitcast (%struct.hash_tuning* @default_tuning to i8*), i64 20, i1 false), !dbg !11741
  ret void, !dbg !11742
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.hash_table* @hash_initialize(i64 %candidate, %struct.hash_tuning* %tuning, i64 (i8*, i64)* %hasher, i1 (i8*, i8*)* %comparator, void (i8*)* %data_freer) #0 !dbg !11743 {
entry:
  %retval = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %hasher.addr = alloca i64 (i8*, i64)*, align 8
  %comparator.addr = alloca i1 (i8*, i8*)*, align 8
  %data_freer.addr = alloca void (i8*)*, align 8
  %table = alloca %struct.hash_table*, align 8, !ctir !1237
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !11746, metadata !DIExpression()), !dbg !11747
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !11748, metadata !DIExpression()), !dbg !11749
  store i64 (i8*, i64)* %hasher, i64 (i8*, i64)** %hasher.addr, align 8
  call void @llvm.dbg.declare(metadata i64 (i8*, i64)** %hasher.addr, metadata !11750, metadata !DIExpression()), !dbg !11751
  store i1 (i8*, i8*)* %comparator, i1 (i8*, i8*)** %comparator.addr, align 8
  call void @llvm.dbg.declare(metadata i1 (i8*, i8*)** %comparator.addr, metadata !11752, metadata !DIExpression()), !dbg !11753
  store void (i8*)* %data_freer, void (i8*)** %data_freer.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %data_freer.addr, metadata !11754, metadata !DIExpression()), !dbg !11755
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table, metadata !11756, metadata !DIExpression()), !dbg !11757
  %0 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11758
  %cmp = icmp eq i64 (i8*, i64)* %0, null, !dbg !11760
  br i1 %cmp, label %if.then, label %if.end, !dbg !11761

if.then:                                          ; preds = %entry
  store i64 (i8*, i64)* @raw_hasher, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11762
  br label %if.end, !dbg !11763

if.end:                                           ; preds = %if.then, %entry
  %1 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11764
  %cmp1 = icmp eq i1 (i8*, i8*)* %1, null, !dbg !11766
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !11767

if.then2:                                         ; preds = %if.end
  store i1 (i8*, i8*)* @raw_comparator, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11768
  br label %if.end3, !dbg !11769

if.end3:                                          ; preds = %if.then2, %if.end
  %call = call noalias i8* @malloc(i64 80) #13, !dbg !11770
  %2 = bitcast i8* %call to %struct.hash_table*, !dbg !11770
  store %struct.hash_table* %2, %struct.hash_table** %table, align 8, !dbg !11771
  %3 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11772
  %cmp4 = icmp eq %struct.hash_table* %3, null, !dbg !11774
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !11775

if.then5:                                         ; preds = %if.end3
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8, !dbg !11776
  br label %return, !dbg !11776

if.end6:                                          ; preds = %if.end3
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11777
  %tobool = icmp ne %struct.hash_tuning* %4, null, !dbg !11777
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !11779

if.then7:                                         ; preds = %if.end6
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11780
  br label %if.end8, !dbg !11781

if.end8:                                          ; preds = %if.then7, %if.end6
  %5 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11782
  %6 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11783
  %tuning9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 5, !dbg !11784, !ctir !1196
  store %struct.hash_tuning* %5, %struct.hash_tuning** %tuning9, align 8, !dbg !11785, !ctir !1213
  %7 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11786
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %7), !dbg !11788
  br i1 %call10, label %if.end12, label %if.then11, !dbg !11789

if.then11:                                        ; preds = %if.end8
  br label %fail, !dbg !11790

if.end12:                                         ; preds = %if.end8
  %8 = load i64, i64* %candidate.addr, align 8, !dbg !11792
  %9 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11793
  %call13 = call i64 @compute_bucket_size(i64 %8, %struct.hash_tuning* %9) #16, !dbg !11794
  %10 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11795
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 2, !dbg !11796, !ctir !1196
  store i64 %call13, i64* %n_buckets, align 8, !dbg !11797, !ctir !149
  %11 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11798
  %n_buckets14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 2, !dbg !11800, !ctir !1196
  %12 = load i64, i64* %n_buckets14, align 8, !dbg !11800, !ctir !149
  %tobool15 = icmp ne i64 %12, 0, !dbg !11798
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !11801

if.then16:                                        ; preds = %if.end12
  br label %fail, !dbg !11802

if.end17:                                         ; preds = %if.end12
  %13 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11803
  %n_buckets18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 2, !dbg !11804, !ctir !1196
  %14 = load i64, i64* %n_buckets18, align 8, !dbg !11804, !ctir !149
  %call19 = call noalias i8* @calloc(i64 %14, i64 16) #13, !dbg !11805
  %15 = bitcast i8* %call19 to %struct.hash_entry*, !dbg !11805
  %16 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11806
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 0, !dbg !11807, !ctir !1196
  store %struct.hash_entry* %15, %struct.hash_entry** %bucket, align 8, !dbg !11808, !ctir !1201
  %17 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11809
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 0, !dbg !11811, !ctir !1196
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket20, align 8, !dbg !11811, !ctir !1201
  %cmp21 = icmp eq %struct.hash_entry* %18, null, !dbg !11812
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !11813

if.then22:                                        ; preds = %if.end17
  br label %fail, !dbg !11814

if.end23:                                         ; preds = %if.end17
  %19 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11815
  %bucket24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 0, !dbg !11816, !ctir !1196
  %20 = load %struct.hash_entry*, %struct.hash_entry** %bucket24, align 8, !dbg !11816, !ctir !1201
  %21 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11817
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 2, !dbg !11818, !ctir !1196
  %22 = load i64, i64* %n_buckets25, align 8, !dbg !11818, !ctir !149
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i64 %22, !dbg !11819, !ctir !1202
  %23 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11820
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 1, !dbg !11821, !ctir !1196
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !dbg !11822, !ctir !1207
  %24 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11823
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 3, !dbg !11824, !ctir !1196
  store i64 0, i64* %n_buckets_used, align 8, !dbg !11825, !ctir !149
  %25 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11826
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 4, !dbg !11827, !ctir !1196
  store i64 0, i64* %n_entries, align 8, !dbg !11828, !ctir !149
  %26 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11829
  %27 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11830
  %hasher26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %27, i32 0, i32 6, !dbg !11831, !ctir !1196
  store i64 (i8*, i64)* %26, i64 (i8*, i64)** %hasher26, align 8, !dbg !11832, !ctir !1225
  %28 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11833
  %29 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11834
  %comparator27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 7, !dbg !11835, !ctir !1196
  store i1 (i8*, i8*)* %28, i1 (i8*, i8*)** %comparator27, align 8, !dbg !11836, !ctir !1230
  %30 = load void (i8*)*, void (i8*)** %data_freer.addr, align 8, !dbg !11837
  %31 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11838
  %data_freer28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %31, i32 0, i32 8, !dbg !11839, !ctir !1196
  store void (i8*)* %30, void (i8*)** %data_freer28, align 8, !dbg !11840, !ctir !1235
  %32 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11841
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 9, !dbg !11842, !ctir !1196
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list, align 8, !dbg !11843, !ctir !1201
  %33 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11844
  store %struct.hash_table* %33, %struct.hash_table** %retval, align 8, !dbg !11845
  br label %return, !dbg !11845

fail:                                             ; preds = %if.then22, %if.then16, %if.then11
  call void @llvm.dbg.label(metadata !11846), !dbg !11847
  %34 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11848
  %35 = bitcast %struct.hash_table* %34 to i8*, !dbg !11848
  call void @free(i8* %35) #13, !dbg !11849
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8, !dbg !11850
  br label %return, !dbg !11850

return:                                           ; preds = %fail, %if.end23, %if.then5
  %36 = load %struct.hash_table*, %struct.hash_table** %retval, align 8, !dbg !11851
  ret %struct.hash_table* %36, !dbg !11851
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @raw_hasher(i8* %data, i64 %n) #0 !dbg !11852 {
entry:
  %data.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %val = alloca i64, align 8, !ctir !149
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11853, metadata !DIExpression()), !dbg !11854
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !11855, metadata !DIExpression()), !dbg !11856
  call void @llvm.dbg.declare(metadata i64* %val, metadata !11857, metadata !DIExpression()), !dbg !11858
  %0 = load i8*, i8** %data.addr, align 8, !dbg !11859
  %1 = ptrtoint i8* %0 to i64, !dbg !11860
  %call = call i64 @rotr_sz(i64 %1, i32 3), !dbg !11861
  store i64 %call, i64* %val, align 8, !dbg !11858
  %2 = load i64, i64* %val, align 8, !dbg !11862
  %3 = load i64, i64* %n.addr, align 8, !dbg !11863
  %rem = urem i64 %2, %3, !dbg !11864
  ret i64 %rem, !dbg !11865
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @raw_comparator(i8* %a, i8* %b) #0 !dbg !11866 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !11867, metadata !DIExpression()), !dbg !11868
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !11869, metadata !DIExpression()), !dbg !11870
  %0 = load i8*, i8** %a.addr, align 8, !dbg !11871
  %1 = load i8*, i8** %b.addr, align 8, !dbg !11872
  %cmp = icmp eq i8* %0, %1, !dbg !11873
  ret i1 %cmp, !dbg !11874
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @check_tuning(%struct.hash_table* %table) #0 !dbg !11875 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %tuning = alloca %struct.hash_tuning*, align 8, !ctir !1213
  %epsilon = alloca float, align 4, !ctir !1219
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11878, metadata !DIExpression()), !dbg !11879
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning, metadata !11880, metadata !DIExpression()), !dbg !11881
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11882
  %tuning1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 5, !dbg !11883, !ctir !1196
  %1 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning1, align 8, !dbg !11883, !ctir !1213
  store %struct.hash_tuning* %1, %struct.hash_tuning** %tuning, align 8, !dbg !11881
  call void @llvm.dbg.declare(metadata float* %epsilon, metadata !11884, metadata !DIExpression()), !dbg !11885
  %2 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11886
  %cmp = icmp eq %struct.hash_tuning* %2, @default_tuning, !dbg !11888
  br i1 %cmp, label %if.then, label %if.end, !dbg !11889

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1, !dbg !11890
  br label %return, !dbg !11890

if.end:                                           ; preds = %entry
  store float 0x3FB99999A0000000, float* %epsilon, align 4, !dbg !11891
  %3 = load float, float* %epsilon, align 4, !dbg !11892
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11894
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %4, i32 0, i32 2, !dbg !11895, !ctir !1214
  %5 = load float, float* %growth_threshold, align 4, !dbg !11895, !ctir !1219
  %cmp2 = fcmp olt float %3, %5, !dbg !11896
  br i1 %cmp2, label %land.lhs.true, label %if.end22, !dbg !11897

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11898
  %growth_threshold3 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %6, i32 0, i32 2, !dbg !11899, !ctir !1214
  %7 = load float, float* %growth_threshold3, align 4, !dbg !11899, !ctir !1219
  %8 = load float, float* %epsilon, align 4, !dbg !11900
  %sub = fsub float 1.000000e+00, %8, !dbg !11901
  %cmp4 = fcmp olt float %7, %sub, !dbg !11902
  br i1 %cmp4, label %land.lhs.true5, label %if.end22, !dbg !11903

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load float, float* %epsilon, align 4, !dbg !11904
  %add = fadd float 1.000000e+00, %9, !dbg !11905
  %10 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11906
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %10, i32 0, i32 3, !dbg !11907, !ctir !1214
  %11 = load float, float* %growth_factor, align 4, !dbg !11907, !ctir !1219
  %cmp6 = fcmp olt float %add, %11, !dbg !11908
  br i1 %cmp6, label %land.lhs.true7, label %if.end22, !dbg !11909

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11910
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %12, i32 0, i32 0, !dbg !11911, !ctir !1214
  %13 = load float, float* %shrink_threshold, align 4, !dbg !11911, !ctir !1219
  %cmp8 = fcmp ole float 0.000000e+00, %13, !dbg !11912
  br i1 %cmp8, label %land.lhs.true9, label %if.end22, !dbg !11913

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11914
  %shrink_threshold10 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 0, !dbg !11915, !ctir !1214
  %15 = load float, float* %shrink_threshold10, align 4, !dbg !11915, !ctir !1219
  %16 = load float, float* %epsilon, align 4, !dbg !11916
  %add11 = fadd float %15, %16, !dbg !11917
  %17 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11918
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %17, i32 0, i32 1, !dbg !11919, !ctir !1214
  %18 = load float, float* %shrink_factor, align 4, !dbg !11919, !ctir !1219
  %cmp12 = fcmp olt float %add11, %18, !dbg !11920
  br i1 %cmp12, label %land.lhs.true13, label %if.end22, !dbg !11921

land.lhs.true13:                                  ; preds = %land.lhs.true9
  %19 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11922
  %shrink_factor14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %19, i32 0, i32 1, !dbg !11923, !ctir !1214
  %20 = load float, float* %shrink_factor14, align 4, !dbg !11923, !ctir !1219
  %cmp15 = fcmp ole float %20, 1.000000e+00, !dbg !11924
  br i1 %cmp15, label %land.lhs.true16, label %if.end22, !dbg !11925

land.lhs.true16:                                  ; preds = %land.lhs.true13
  %21 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11926
  %shrink_threshold17 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %21, i32 0, i32 0, !dbg !11927, !ctir !1214
  %22 = load float, float* %shrink_threshold17, align 4, !dbg !11927, !ctir !1219
  %23 = load float, float* %epsilon, align 4, !dbg !11928
  %add18 = fadd float %22, %23, !dbg !11929
  %24 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11930
  %growth_threshold19 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %24, i32 0, i32 2, !dbg !11931, !ctir !1214
  %25 = load float, float* %growth_threshold19, align 4, !dbg !11931, !ctir !1219
  %cmp20 = fcmp olt float %add18, %25, !dbg !11932
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !11933

if.then21:                                        ; preds = %land.lhs.true16
  store i1 true, i1* %retval, align 1, !dbg !11934
  br label %return, !dbg !11934

if.end22:                                         ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %land.lhs.true, %if.end
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11935
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 5, !dbg !11936, !ctir !1196
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning23, align 8, !dbg !11937, !ctir !1213
  store i1 false, i1* %retval, align 1, !dbg !11938
  br label %return, !dbg !11938

return:                                           ; preds = %if.end22, %if.then21, %if.then
  %27 = load i1, i1* %retval, align 1, !dbg !11939
  ret i1 %27, !dbg !11939
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @compute_bucket_size(i64 %candidate, %struct.hash_tuning* %tuning) #9 !dbg !11940 {
entry:
  %retval = alloca i64, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %new_candidate = alloca float, align 4, !ctir !1219
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !11943, metadata !DIExpression()), !dbg !11944
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !11945, metadata !DIExpression()), !dbg !11946
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11947
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %0, i32 0, i32 4, !dbg !11949, !ctir !1214
  %1 = load i8, i8* %is_n_buckets, align 4, !dbg !11949
  %tobool = trunc i8 %1 to i1, !dbg !11949, !ctir !141
  br i1 %tobool, label %if.end4, label %if.then, !dbg !11950

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float* %new_candidate, metadata !11951, metadata !DIExpression()), !dbg !11953
  %2 = load i64, i64* %candidate.addr, align 8, !dbg !11954
  %conv = uitofp i64 %2 to float, !dbg !11954
  %3 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11955
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %3, i32 0, i32 2, !dbg !11956, !ctir !1214
  %4 = load float, float* %growth_threshold, align 4, !dbg !11956, !ctir !1219
  %div = fdiv float %conv, %4, !dbg !11957
  store float %div, float* %new_candidate, align 4, !dbg !11953
  %5 = load float, float* %new_candidate, align 4, !dbg !11958
  %cmp = fcmp ole float 0x43F0000000000000, %5, !dbg !11960
  br i1 %cmp, label %if.then2, label %if.end, !dbg !11961

if.then2:                                         ; preds = %if.then
  store i64 0, i64* %retval, align 8, !dbg !11962
  br label %return, !dbg !11962

if.end:                                           ; preds = %if.then
  %6 = load float, float* %new_candidate, align 4, !dbg !11963
  %conv3 = fptoui float %6 to i64, !dbg !11963
  store i64 %conv3, i64* %candidate.addr, align 8, !dbg !11964
  br label %if.end4, !dbg !11965

if.end4:                                          ; preds = %if.end, %entry
  %7 = load i64, i64* %candidate.addr, align 8, !dbg !11966
  %call = call i64 @next_prime(i64 %7) #17, !dbg !11967
  store i64 %call, i64* %candidate.addr, align 8, !dbg !11968
  %8 = load i64, i64* %candidate.addr, align 8, !dbg !11969
  %cmp5 = icmp ult i64 1152921504606846975, %8, !dbg !11969
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !11971

if.then7:                                         ; preds = %if.end4
  store i64 0, i64* %retval, align 8, !dbg !11972
  br label %return, !dbg !11972

if.end8:                                          ; preds = %if.end4
  %9 = load i64, i64* %candidate.addr, align 8, !dbg !11973
  store i64 %9, i64* %retval, align 8, !dbg !11974
  br label %return, !dbg !11974

return:                                           ; preds = %if.end8, %if.then7, %if.then2
  %10 = load i64, i64* %retval, align 8, !dbg !11975
  ret i64 %10, !dbg !11975
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal i64 @next_prime(i64 %candidate) #12 !dbg !11976 {
entry:
  %candidate.addr = alloca i64, align 8
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !11979, metadata !DIExpression()), !dbg !11980
  %0 = load i64, i64* %candidate.addr, align 8, !dbg !11981
  %cmp = icmp ult i64 %0, 10, !dbg !11983
  br i1 %cmp, label %if.then, label %if.end, !dbg !11984

if.then:                                          ; preds = %entry
  store i64 10, i64* %candidate.addr, align 8, !dbg !11985
  br label %if.end, !dbg !11986

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %candidate.addr, align 8, !dbg !11987
  %or = or i64 %1, 1, !dbg !11987
  store i64 %or, i64* %candidate.addr, align 8, !dbg !11987
  br label %while.cond, !dbg !11988

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i64, i64* %candidate.addr, align 8, !dbg !11989
  %cmp1 = icmp ne i64 -1, %2, !dbg !11990
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !11991

land.rhs:                                         ; preds = %while.cond
  %3 = load i64, i64* %candidate.addr, align 8, !dbg !11992
  %call = call zeroext i1 @is_prime(i64 %3) #17, !dbg !11993
  %lnot = xor i1 %call, true, !dbg !11994
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !11995
  br i1 %4, label %while.body, label %while.end, !dbg !11988

while.body:                                       ; preds = %land.end
  %5 = load i64, i64* %candidate.addr, align 8, !dbg !11996
  %add = add i64 %5, 2, !dbg !11996
  store i64 %add, i64* %candidate.addr, align 8, !dbg !11996
  br label %while.cond, !dbg !11988, !llvm.loop !11997

while.end:                                        ; preds = %land.end
  %6 = load i64, i64* %candidate.addr, align 8, !dbg !11999
  ret i64 %6, !dbg !12000
}

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal zeroext i1 @is_prime(i64 %candidate) #12 !dbg !12001 {
entry:
  %candidate.addr = alloca i64, align 8
  %divisor = alloca i64, align 8, !ctir !149
  %square = alloca i64, align 8, !ctir !149
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12004, metadata !DIExpression()), !dbg !12005
  call void @llvm.dbg.declare(metadata i64* %divisor, metadata !12006, metadata !DIExpression()), !dbg !12007
  store i64 3, i64* %divisor, align 8, !dbg !12007
  call void @llvm.dbg.declare(metadata i64* %square, metadata !12008, metadata !DIExpression()), !dbg !12009
  %0 = load i64, i64* %divisor, align 8, !dbg !12010
  %1 = load i64, i64* %divisor, align 8, !dbg !12011
  %mul = mul i64 %0, %1, !dbg !12012
  store i64 %mul, i64* %square, align 8, !dbg !12009
  br label %while.cond, !dbg !12013

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %square, align 8, !dbg !12014
  %3 = load i64, i64* %candidate.addr, align 8, !dbg !12015
  %cmp = icmp ult i64 %2, %3, !dbg !12016
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12017

land.rhs:                                         ; preds = %while.cond
  %4 = load i64, i64* %candidate.addr, align 8, !dbg !12018
  %5 = load i64, i64* %divisor, align 8, !dbg !12019
  %rem = urem i64 %4, %5, !dbg !12020
  %tobool = icmp ne i64 %rem, 0, !dbg !12017
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !12021
  br i1 %6, label %while.body, label %while.end, !dbg !12013

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %divisor, align 8, !dbg !12022
  %inc = add i64 %7, 1, !dbg !12022
  store i64 %inc, i64* %divisor, align 8, !dbg !12022
  %8 = load i64, i64* %divisor, align 8, !dbg !12024
  %mul1 = mul i64 4, %8, !dbg !12025
  %9 = load i64, i64* %square, align 8, !dbg !12026
  %add = add i64 %9, %mul1, !dbg !12026
  store i64 %add, i64* %square, align 8, !dbg !12026
  %10 = load i64, i64* %divisor, align 8, !dbg !12027
  %inc2 = add i64 %10, 1, !dbg !12027
  store i64 %inc2, i64* %divisor, align 8, !dbg !12027
  br label %while.cond, !dbg !12013, !llvm.loop !12028

while.end:                                        ; preds = %land.end
  %11 = load i64, i64* %candidate.addr, align 8, !dbg !12030
  %12 = load i64, i64* %divisor, align 8, !dbg !12031
  %rem3 = urem i64 %11, %12, !dbg !12032
  %tobool4 = icmp ne i64 %rem3, 0, !dbg !12030
  %13 = zext i1 %tobool4 to i64, !dbg !12030
  %cond = select i1 %tobool4, i32 1, i32 0, !dbg !12030
  %tobool5 = icmp ne i32 %cond, 0, !dbg !12033
  ret i1 %tobool5, !dbg !12034
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_clear(%struct.hash_table* %table) #0 !dbg !12035 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1201
  %next = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12038, metadata !DIExpression()), !dbg !12039
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12040, metadata !DIExpression()), !dbg !12041
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12042
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !12044, !ctir !1196
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !12044, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !12045
  br label %for.cond, !dbg !12046

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12047
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12049
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !12050, !ctir !1196
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12050, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !12051
  br i1 %cmp, label %for.body, label %for.end24, !dbg !12052

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12053
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12056, !ctir !1202
  %6 = load i8*, i8** %data, align 8, !dbg !12056, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !12053
  br i1 %tobool, label %if.then, label %if.end22, !dbg !12057

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12058, metadata !DIExpression()), !dbg !12060
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12061, metadata !DIExpression()), !dbg !12062
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12063
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 1, !dbg !12065, !ctir !1202
  %8 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !dbg !12065, !ctir !1201
  store %struct.hash_entry* %8, %struct.hash_entry** %cursor, align 8, !dbg !12066
  br label %for.cond3, !dbg !12067

for.cond3:                                        ; preds = %for.inc, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12068
  %tobool4 = icmp ne %struct.hash_entry* %9, null, !dbg !12070
  br i1 %tobool4, label %for.body5, label %for.end, !dbg !12070

for.body5:                                        ; preds = %for.cond3
  %10 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12071
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 8, !dbg !12074, !ctir !1196
  %11 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12074, !ctir !1235
  %tobool6 = icmp ne void (i8*)* %11, null, !dbg !12071
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !12075

if.then7:                                         ; preds = %for.body5
  %12 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12076
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %12, i32 0, i32 8, !dbg !12077, !ctir !1196
  %13 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !dbg !12077, !ctir !1235
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12078
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !12079, !ctir !1202
  %15 = load i8*, i8** %data9, align 8, !dbg !12079, !ctir !167
  call void %13(i8* %15), !dbg !12076
  br label %if.end, !dbg !12076

if.end:                                           ; preds = %if.then7, %for.body5
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12080
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 0, !dbg !12081, !ctir !1202
  store i8* null, i8** %data10, align 8, !dbg !12082, !ctir !167
  %17 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12083
  %next11 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12084, !ctir !1202
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next11, align 8, !dbg !12084, !ctir !1201
  store %struct.hash_entry* %18, %struct.hash_entry** %next, align 8, !dbg !12085
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12086
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 9, !dbg !12087, !ctir !1196
  %20 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12087, !ctir !1201
  %21 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12088
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 0, i32 1, !dbg !12089, !ctir !1202
  store %struct.hash_entry* %20, %struct.hash_entry** %next12, align 8, !dbg !12090, !ctir !1201
  %22 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12091
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12092
  %free_entry_list13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 9, !dbg !12093, !ctir !1196
  store %struct.hash_entry* %22, %struct.hash_entry** %free_entry_list13, align 8, !dbg !12094, !ctir !1201
  br label %for.inc, !dbg !12095

for.inc:                                          ; preds = %if.end
  %24 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12096
  store %struct.hash_entry* %24, %struct.hash_entry** %cursor, align 8, !dbg !12097
  br label %for.cond3, !dbg !12098, !llvm.loop !12099

for.end:                                          ; preds = %for.cond3
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12101
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 8, !dbg !12103, !ctir !1196
  %26 = load void (i8*)*, void (i8*)** %data_freer14, align 8, !dbg !12103, !ctir !1235
  %tobool15 = icmp ne void (i8*)* %26, null, !dbg !12101
  br i1 %tobool15, label %if.then16, label %if.end19, !dbg !12104

if.then16:                                        ; preds = %for.end
  %27 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12105
  %data_freer17 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %27, i32 0, i32 8, !dbg !12106, !ctir !1196
  %28 = load void (i8*)*, void (i8*)** %data_freer17, align 8, !dbg !12106, !ctir !1235
  %29 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12107
  %data18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %29, i32 0, i32 0, !dbg !12108, !ctir !1202
  %30 = load i8*, i8** %data18, align 8, !dbg !12108, !ctir !167
  call void %28(i8* %30), !dbg !12105
  br label %if.end19, !dbg !12105

if.end19:                                         ; preds = %if.then16, %for.end
  %31 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12109
  %data20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %31, i32 0, i32 0, !dbg !12110, !ctir !1202
  store i8* null, i8** %data20, align 8, !dbg !12111, !ctir !167
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12112
  %next21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 1, !dbg !12113, !ctir !1202
  store %struct.hash_entry* null, %struct.hash_entry** %next21, align 8, !dbg !12114, !ctir !1201
  br label %if.end22, !dbg !12115

if.end22:                                         ; preds = %if.end19, %for.body
  br label %for.inc23, !dbg !12116

for.inc23:                                        ; preds = %if.end22
  %33 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12117
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 1, !dbg !12117, !ctir !1202
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12117
  br label %for.cond, !dbg !12118, !llvm.loop !12119

for.end24:                                        ; preds = %for.cond
  %34 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12121
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 3, !dbg !12122, !ctir !1196
  store i64 0, i64* %n_buckets_used, align 8, !dbg !12123, !ctir !149
  %35 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12124
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %35, i32 0, i32 4, !dbg !12125, !ctir !1196
  store i64 0, i64* %n_entries, align 8, !dbg !12126, !ctir !149
  ret void, !dbg !12127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_free(%struct.hash_table* %table) #0 !dbg !12128 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1201
  %next = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12129, metadata !DIExpression()), !dbg !12130
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12131, metadata !DIExpression()), !dbg !12132
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12133, metadata !DIExpression()), !dbg !12134
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12135, metadata !DIExpression()), !dbg !12136
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12137
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 8, !dbg !12139, !ctir !1196
  %1 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12139, !ctir !1235
  %tobool = icmp ne void (i8*)* %1, null, !dbg !12137
  br i1 %tobool, label %land.lhs.true, label %if.end13, !dbg !12140

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12141
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 4, !dbg !12142, !ctir !1196
  %3 = load i64, i64* %n_entries, align 8, !dbg !12142, !ctir !149
  %tobool1 = icmp ne i64 %3, 0, !dbg !12141
  br i1 %tobool1, label %if.then, label %if.end13, !dbg !12143

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12144
  %bucket2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 0, !dbg !12147, !ctir !1196
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket2, align 8, !dbg !12147, !ctir !1201
  store %struct.hash_entry* %5, %struct.hash_entry** %bucket, align 8, !dbg !12148
  br label %for.cond, !dbg !12149

for.cond:                                         ; preds = %for.inc11, %if.then
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12150
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12152
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 1, !dbg !12153, !ctir !1196
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12153, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %6, %8, !dbg !12154
  br i1 %cmp, label %for.body, label %for.end12, !dbg !12155

for.body:                                         ; preds = %for.cond
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12156
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !12159, !ctir !1202
  %10 = load i8*, i8** %data, align 8, !dbg !12159, !ctir !167
  %tobool3 = icmp ne i8* %10, null, !dbg !12156
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !12160

if.then4:                                         ; preds = %for.body
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12161
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !dbg !12164
  br label %for.cond5, !dbg !12165

for.cond5:                                        ; preds = %for.inc, %if.then4
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12166
  %tobool6 = icmp ne %struct.hash_entry* %12, null, !dbg !12168
  br i1 %tobool6, label %for.body7, label %for.end, !dbg !12168

for.body7:                                        ; preds = %for.cond5
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12169
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 8, !dbg !12170, !ctir !1196
  %14 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !dbg !12170, !ctir !1235
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12171
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 0, !dbg !12172, !ctir !1202
  %16 = load i8*, i8** %data9, align 8, !dbg !12172, !ctir !167
  call void %14(i8* %16), !dbg !12169
  br label %for.inc, !dbg !12169

for.inc:                                          ; preds = %for.body7
  %17 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12173
  %next10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12174, !ctir !1202
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next10, align 8, !dbg !12174, !ctir !1201
  store %struct.hash_entry* %18, %struct.hash_entry** %cursor, align 8, !dbg !12175
  br label %for.cond5, !dbg !12176, !llvm.loop !12177

for.end:                                          ; preds = %for.cond5
  br label %if.end, !dbg !12179

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc11, !dbg !12180

for.inc11:                                        ; preds = %if.end
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12181
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 1, !dbg !12181, !ctir !1202
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12181
  br label %for.cond, !dbg !12182, !llvm.loop !12183

for.end12:                                        ; preds = %for.cond
  br label %if.end13, !dbg !12185

if.end13:                                         ; preds = %for.end12, %land.lhs.true, %entry
  %20 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12186
  %bucket14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 0, !dbg !12188, !ctir !1196
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket14, align 8, !dbg !12188, !ctir !1201
  store %struct.hash_entry* %21, %struct.hash_entry** %bucket, align 8, !dbg !12189
  br label %for.cond15, !dbg !12190

for.cond15:                                       ; preds = %for.inc26, %if.end13
  %22 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12191
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12193
  %bucket_limit16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 1, !dbg !12194, !ctir !1196
  %24 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit16, align 8, !dbg !12194, !ctir !1207
  %cmp17 = icmp ult %struct.hash_entry* %22, %24, !dbg !12195
  br i1 %cmp17, label %for.body18, label %for.end28, !dbg !12196

for.body18:                                       ; preds = %for.cond15
  %25 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12197
  %next19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i32 0, i32 1, !dbg !12200, !ctir !1202
  %26 = load %struct.hash_entry*, %struct.hash_entry** %next19, align 8, !dbg !12200, !ctir !1201
  store %struct.hash_entry* %26, %struct.hash_entry** %cursor, align 8, !dbg !12201
  br label %for.cond20, !dbg !12202

for.cond20:                                       ; preds = %for.inc24, %for.body18
  %27 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12203
  %tobool21 = icmp ne %struct.hash_entry* %27, null, !dbg !12205
  br i1 %tobool21, label %for.body22, label %for.end25, !dbg !12205

for.body22:                                       ; preds = %for.cond20
  %28 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12206
  %next23 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %28, i32 0, i32 1, !dbg !12208, !ctir !1202
  %29 = load %struct.hash_entry*, %struct.hash_entry** %next23, align 8, !dbg !12208, !ctir !1201
  store %struct.hash_entry* %29, %struct.hash_entry** %next, align 8, !dbg !12209
  %30 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12210
  %31 = bitcast %struct.hash_entry* %30 to i8*, !dbg !12210
  call void @free(i8* %31) #13, !dbg !12211
  br label %for.inc24, !dbg !12212

for.inc24:                                        ; preds = %for.body22
  %32 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12213
  store %struct.hash_entry* %32, %struct.hash_entry** %cursor, align 8, !dbg !12214
  br label %for.cond20, !dbg !12215, !llvm.loop !12216

for.end25:                                        ; preds = %for.cond20
  br label %for.inc26, !dbg !12218

for.inc26:                                        ; preds = %for.end25
  %33 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12219
  %incdec.ptr27 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 1, !dbg !12219, !ctir !1202
  store %struct.hash_entry* %incdec.ptr27, %struct.hash_entry** %bucket, align 8, !dbg !12219
  br label %for.cond15, !dbg !12220, !llvm.loop !12221

for.end28:                                        ; preds = %for.cond15
  %34 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12223
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 9, !dbg !12225, !ctir !1196
  %35 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12225, !ctir !1201
  store %struct.hash_entry* %35, %struct.hash_entry** %cursor, align 8, !dbg !12226
  br label %for.cond29, !dbg !12227

for.cond29:                                       ; preds = %for.inc33, %for.end28
  %36 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12228
  %tobool30 = icmp ne %struct.hash_entry* %36, null, !dbg !12230
  br i1 %tobool30, label %for.body31, label %for.end34, !dbg !12230

for.body31:                                       ; preds = %for.cond29
  %37 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12231
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %37, i32 0, i32 1, !dbg !12233, !ctir !1202
  %38 = load %struct.hash_entry*, %struct.hash_entry** %next32, align 8, !dbg !12233, !ctir !1201
  store %struct.hash_entry* %38, %struct.hash_entry** %next, align 8, !dbg !12234
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12235
  %40 = bitcast %struct.hash_entry* %39 to i8*, !dbg !12235
  call void @free(i8* %40) #13, !dbg !12236
  br label %for.inc33, !dbg !12237

for.inc33:                                        ; preds = %for.body31
  %41 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12238
  store %struct.hash_entry* %41, %struct.hash_entry** %cursor, align 8, !dbg !12239
  br label %for.cond29, !dbg !12240, !llvm.loop !12241

for.end34:                                        ; preds = %for.cond29
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12243
  %bucket35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %42, i32 0, i32 0, !dbg !12244, !ctir !1196
  %43 = load %struct.hash_entry*, %struct.hash_entry** %bucket35, align 8, !dbg !12244, !ctir !1201
  %44 = bitcast %struct.hash_entry* %43 to i8*, !dbg !12243
  call void @free(i8* %44) #13, !dbg !12245
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12246
  %46 = bitcast %struct.hash_table* %45 to i8*, !dbg !12246
  call void @free(i8* %46) #13, !dbg !12247
  ret void, !dbg !12248
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hash_rehash(%struct.hash_table* %table, i64 %candidate) #0 !dbg !12249 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %storage = alloca %struct.hash_table, align 8, !ctir !1196
  %new_table = alloca %struct.hash_table*, align 8, !ctir !1237
  %new_size = alloca i64, align 8, !ctir !149
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12252, metadata !DIExpression()), !dbg !12253
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12254, metadata !DIExpression()), !dbg !12255
  call void @llvm.dbg.declare(metadata %struct.hash_table* %storage, metadata !12256, metadata !DIExpression()), !dbg !12257
  call void @llvm.dbg.declare(metadata %struct.hash_table** %new_table, metadata !12258, metadata !DIExpression()), !dbg !12259
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !12260, metadata !DIExpression()), !dbg !12261
  %0 = load i64, i64* %candidate.addr, align 8, !dbg !12262
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12263
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 5, !dbg !12264, !ctir !1196
  %2 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12264, !ctir !1213
  %call = call i64 @compute_bucket_size(i64 %0, %struct.hash_tuning* %2) #16, !dbg !12265
  store i64 %call, i64* %new_size, align 8, !dbg !12261
  %3 = load i64, i64* %new_size, align 8, !dbg !12266
  %tobool = icmp ne i64 %3, 0, !dbg !12266
  br i1 %tobool, label %if.end, label %if.then, !dbg !12268

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !12269
  br label %return, !dbg !12269

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %new_size, align 8, !dbg !12270
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12272
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 2, !dbg !12273, !ctir !1196
  %6 = load i64, i64* %n_buckets, align 8, !dbg !12273, !ctir !149
  %cmp = icmp eq i64 %4, %6, !dbg !12274
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !12275

if.then1:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !12276
  br label %return, !dbg !12276

if.end2:                                          ; preds = %if.end
  store %struct.hash_table* %storage, %struct.hash_table** %new_table, align 8, !dbg !12277
  %7 = load i64, i64* %new_size, align 8, !dbg !12278
  %call3 = call noalias i8* @calloc(i64 %7, i64 16) #13, !dbg !12279
  %8 = bitcast i8* %call3 to %struct.hash_entry*, !dbg !12279
  %9 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12280
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 0, !dbg !12281, !ctir !1196
  store %struct.hash_entry* %8, %struct.hash_entry** %bucket, align 8, !dbg !12282, !ctir !1201
  %10 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12283
  %bucket4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 0, !dbg !12285, !ctir !1196
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket4, align 8, !dbg !12285, !ctir !1201
  %cmp5 = icmp eq %struct.hash_entry* %11, null, !dbg !12286
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !12287

if.then6:                                         ; preds = %if.end2
  store i1 false, i1* %retval, align 1, !dbg !12288
  br label %return, !dbg !12288

if.end7:                                          ; preds = %if.end2
  %12 = load i64, i64* %new_size, align 8, !dbg !12289
  %13 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12290
  %n_buckets8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 2, !dbg !12291, !ctir !1196
  store i64 %12, i64* %n_buckets8, align 8, !dbg !12292, !ctir !149
  %14 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12293
  %bucket9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 0, !dbg !12294, !ctir !1196
  %15 = load %struct.hash_entry*, %struct.hash_entry** %bucket9, align 8, !dbg !12294, !ctir !1201
  %16 = load i64, i64* %new_size, align 8, !dbg !12295
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i64 %16, !dbg !12296, !ctir !1202
  %17 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12297
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 1, !dbg !12298, !ctir !1196
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !dbg !12299, !ctir !1207
  %18 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12300
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %18, i32 0, i32 3, !dbg !12301, !ctir !1196
  store i64 0, i64* %n_buckets_used, align 8, !dbg !12302, !ctir !149
  %19 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12303
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 4, !dbg !12304, !ctir !1196
  store i64 0, i64* %n_entries, align 8, !dbg !12305, !ctir !149
  %20 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12306
  %tuning10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 5, !dbg !12307, !ctir !1196
  %21 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning10, align 8, !dbg !12307, !ctir !1213
  %22 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12308
  %tuning11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 5, !dbg !12309, !ctir !1196
  store %struct.hash_tuning* %21, %struct.hash_tuning** %tuning11, align 8, !dbg !12310, !ctir !1213
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12311
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 6, !dbg !12312, !ctir !1196
  %24 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !dbg !12312, !ctir !1225
  %25 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12313
  %hasher12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 6, !dbg !12314, !ctir !1196
  store i64 (i8*, i64)* %24, i64 (i8*, i64)** %hasher12, align 8, !dbg !12315, !ctir !1225
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12316
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 7, !dbg !12317, !ctir !1196
  %27 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !12317, !ctir !1230
  %28 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12318
  %comparator13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 7, !dbg !12319, !ctir !1196
  store i1 (i8*, i8*)* %27, i1 (i8*, i8*)** %comparator13, align 8, !dbg !12320, !ctir !1230
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12321
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 8, !dbg !12322, !ctir !1196
  %30 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12322, !ctir !1235
  %31 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12323
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %31, i32 0, i32 8, !dbg !12324, !ctir !1196
  store void (i8*)* %30, void (i8*)** %data_freer14, align 8, !dbg !12325, !ctir !1235
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12326
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 9, !dbg !12327, !ctir !1196
  %33 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12327, !ctir !1201
  %34 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12328
  %free_entry_list15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 9, !dbg !12329, !ctir !1196
  store %struct.hash_entry* %33, %struct.hash_entry** %free_entry_list15, align 8, !dbg !12330, !ctir !1201
  %35 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12331
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12333
  %call16 = call zeroext i1 @transfer_entries(%struct.hash_table* %35, %struct.hash_table* %36, i1 zeroext false), !dbg !12334
  br i1 %call16, label %if.then17, label %if.end29, !dbg !12335

if.then17:                                        ; preds = %if.end7
  %37 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12336
  %bucket18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %37, i32 0, i32 0, !dbg !12338, !ctir !1196
  %38 = load %struct.hash_entry*, %struct.hash_entry** %bucket18, align 8, !dbg !12338, !ctir !1201
  %39 = bitcast %struct.hash_entry* %38 to i8*, !dbg !12336
  call void @free(i8* %39) #13, !dbg !12339
  %40 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12340
  %bucket19 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 0, !dbg !12341, !ctir !1196
  %41 = load %struct.hash_entry*, %struct.hash_entry** %bucket19, align 8, !dbg !12341, !ctir !1201
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12342
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %42, i32 0, i32 0, !dbg !12343, !ctir !1196
  store %struct.hash_entry* %41, %struct.hash_entry** %bucket20, align 8, !dbg !12344, !ctir !1201
  %43 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12345
  %bucket_limit21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %43, i32 0, i32 1, !dbg !12346, !ctir !1196
  %44 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit21, align 8, !dbg !12346, !ctir !1207
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12347
  %bucket_limit22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %45, i32 0, i32 1, !dbg !12348, !ctir !1196
  store %struct.hash_entry* %44, %struct.hash_entry** %bucket_limit22, align 8, !dbg !12349, !ctir !1207
  %46 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12350
  %n_buckets23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %46, i32 0, i32 2, !dbg !12351, !ctir !1196
  %47 = load i64, i64* %n_buckets23, align 8, !dbg !12351, !ctir !149
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12352
  %n_buckets24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 2, !dbg !12353, !ctir !1196
  store i64 %47, i64* %n_buckets24, align 8, !dbg !12354, !ctir !149
  %49 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12355
  %n_buckets_used25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 3, !dbg !12356, !ctir !1196
  %50 = load i64, i64* %n_buckets_used25, align 8, !dbg !12356, !ctir !149
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12357
  %n_buckets_used26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 3, !dbg !12358, !ctir !1196
  store i64 %50, i64* %n_buckets_used26, align 8, !dbg !12359, !ctir !149
  %52 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12360
  %free_entry_list27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %52, i32 0, i32 9, !dbg !12361, !ctir !1196
  %53 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list27, align 8, !dbg !12361, !ctir !1201
  %54 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12362
  %free_entry_list28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 9, !dbg !12363, !ctir !1196
  store %struct.hash_entry* %53, %struct.hash_entry** %free_entry_list28, align 8, !dbg !12364, !ctir !1201
  store i1 true, i1* %retval, align 1, !dbg !12365
  br label %return, !dbg !12365

if.end29:                                         ; preds = %if.end7
  %55 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12366
  %free_entry_list30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 9, !dbg !12367, !ctir !1196
  %56 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list30, align 8, !dbg !12367, !ctir !1201
  %57 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12368
  %free_entry_list31 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %57, i32 0, i32 9, !dbg !12369, !ctir !1196
  store %struct.hash_entry* %56, %struct.hash_entry** %free_entry_list31, align 8, !dbg !12370, !ctir !1201
  %58 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12371
  %59 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12373
  %call32 = call zeroext i1 @transfer_entries(%struct.hash_table* %58, %struct.hash_table* %59, i1 zeroext true), !dbg !12374
  br i1 %call32, label %land.lhs.true, label %if.then34, !dbg !12375

land.lhs.true:                                    ; preds = %if.end29
  %60 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12376
  %61 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12377
  %call33 = call zeroext i1 @transfer_entries(%struct.hash_table* %60, %struct.hash_table* %61, i1 zeroext false), !dbg !12378
  br i1 %call33, label %if.end35, label %if.then34, !dbg !12379

if.then34:                                        ; preds = %land.lhs.true, %if.end29
  call void @abort() #15, !dbg !12380
  unreachable, !dbg !12380

if.end35:                                         ; preds = %land.lhs.true
  %62 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12381
  %bucket36 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %62, i32 0, i32 0, !dbg !12382, !ctir !1196
  %63 = load %struct.hash_entry*, %struct.hash_entry** %bucket36, align 8, !dbg !12382, !ctir !1201
  %64 = bitcast %struct.hash_entry* %63 to i8*, !dbg !12381
  call void @free(i8* %64) #13, !dbg !12383
  store i1 false, i1* %retval, align 1, !dbg !12384
  br label %return, !dbg !12384

return:                                           ; preds = %if.end35, %if.then17, %if.then6, %if.then1, %if.then
  %65 = load i1, i1* %retval, align 1, !dbg !12385
  ret i1 %65, !dbg !12385
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @transfer_entries(%struct.hash_table* %dst, %struct.hash_table* %src, i1 zeroext %safe) #0 !dbg !12386 {
entry:
  %retval = alloca i1, align 1
  %dst.addr = alloca %struct.hash_table*, align 8
  %src.addr = alloca %struct.hash_table*, align 8
  %safe.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1201
  %next = alloca %struct.hash_entry*, align 8, !ctir !1201
  %data2 = alloca i8*, align 8, !ctir !167
  %new_bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %new_entry = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %dst, %struct.hash_table** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %dst.addr, metadata !12389, metadata !DIExpression()), !dbg !12390
  store %struct.hash_table* %src, %struct.hash_table** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %src.addr, metadata !12391, metadata !DIExpression()), !dbg !12392
  %frombool = zext i1 %safe to i8
  store i8 %frombool, i8* %safe.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %safe.addr, metadata !12393, metadata !DIExpression()), !dbg !12394
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12395, metadata !DIExpression()), !dbg !12396
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12397, metadata !DIExpression()), !dbg !12398
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12399, metadata !DIExpression()), !dbg !12400
  %0 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12401
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !12403, !ctir !1196
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !12403, !ctir !1201
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !12404
  br label %for.cond, !dbg !12405

for.cond:                                         ; preds = %for.inc41, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12406
  %3 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12408
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !12409, !ctir !1196
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12409, !ctir !1207
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !12410
  br i1 %cmp, label %for.body, label %for.end42, !dbg !12411

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12412
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12414, !ctir !1202
  %6 = load i8*, i8** %data, align 8, !dbg !12414, !ctir !167
  %tobool = icmp ne i8* %6, null, !dbg !12412
  br i1 %tobool, label %if.then, label %if.end40, !dbg !12415

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i8** %data2, metadata !12416, metadata !DIExpression()), !dbg !12418
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_bucket, metadata !12419, metadata !DIExpression()), !dbg !12420
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12421
  %next3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 1, !dbg !12423, !ctir !1202
  %8 = load %struct.hash_entry*, %struct.hash_entry** %next3, align 8, !dbg !12423, !ctir !1201
  store %struct.hash_entry* %8, %struct.hash_entry** %cursor, align 8, !dbg !12424
  br label %for.cond4, !dbg !12425

for.cond4:                                        ; preds = %for.inc, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12426
  %tobool5 = icmp ne %struct.hash_entry* %9, null, !dbg !12428
  br i1 %tobool5, label %for.body6, label %for.end, !dbg !12428

for.body6:                                        ; preds = %for.cond4
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12429
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 0, !dbg !12431, !ctir !1202
  %11 = load i8*, i8** %data7, align 8, !dbg !12431, !ctir !167
  store i8* %11, i8** %data2, align 8, !dbg !12432
  %12 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12433
  %13 = load i8*, i8** %data2, align 8, !dbg !12434
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %12, i8* %13), !dbg !12435
  store %struct.hash_entry* %call, %struct.hash_entry** %new_bucket, align 8, !dbg !12436
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12437
  %next8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 1, !dbg !12438, !ctir !1202
  %15 = load %struct.hash_entry*, %struct.hash_entry** %next8, align 8, !dbg !12438, !ctir !1201
  store %struct.hash_entry* %15, %struct.hash_entry** %next, align 8, !dbg !12439
  %16 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12440
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 0, !dbg !12442, !ctir !1202
  %17 = load i8*, i8** %data9, align 8, !dbg !12442, !ctir !167
  %tobool10 = icmp ne i8* %17, null, !dbg !12440
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !12443

if.then11:                                        ; preds = %for.body6
  %18 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12444
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 0, i32 1, !dbg !12446, !ctir !1202
  %19 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12446, !ctir !1201
  %20 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12447
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 0, i32 1, !dbg !12448, !ctir !1202
  store %struct.hash_entry* %19, %struct.hash_entry** %next13, align 8, !dbg !12449, !ctir !1201
  %21 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12450
  %22 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12451
  %next14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %22, i32 0, i32 1, !dbg !12452, !ctir !1202
  store %struct.hash_entry* %21, %struct.hash_entry** %next14, align 8, !dbg !12453, !ctir !1201
  br label %if.end, !dbg !12454

if.else:                                          ; preds = %for.body6
  %23 = load i8*, i8** %data2, align 8, !dbg !12455
  %24 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12457
  %data15 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %24, i32 0, i32 0, !dbg !12458, !ctir !1202
  store i8* %23, i8** %data15, align 8, !dbg !12459, !ctir !167
  %25 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12460
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 3, !dbg !12461, !ctir !1196
  %26 = load i64, i64* %n_buckets_used, align 8, !dbg !12462, !ctir !149
  %inc = add i64 %26, 1, !dbg !12462
  store i64 %inc, i64* %n_buckets_used, align 8, !dbg !12462, !ctir !149
  %27 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12463
  %28 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12464
  call void @free_entry(%struct.hash_table* %27, %struct.hash_entry* %28), !dbg !12465
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then11
  br label %for.inc, !dbg !12466

for.inc:                                          ; preds = %if.end
  %29 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12467
  store %struct.hash_entry* %29, %struct.hash_entry** %cursor, align 8, !dbg !12468
  br label %for.cond4, !dbg !12469, !llvm.loop !12470

for.end:                                          ; preds = %for.cond4
  %30 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12472
  %data16 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i32 0, i32 0, !dbg !12473, !ctir !1202
  %31 = load i8*, i8** %data16, align 8, !dbg !12473, !ctir !167
  store i8* %31, i8** %data2, align 8, !dbg !12474
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12475
  %next17 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 1, !dbg !12476, !ctir !1202
  store %struct.hash_entry* null, %struct.hash_entry** %next17, align 8, !dbg !12477, !ctir !1201
  %33 = load i8, i8* %safe.addr, align 1, !dbg !12478
  %tobool18 = trunc i8 %33 to i1, !dbg !12478
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !12480

if.then19:                                        ; preds = %for.end
  br label %for.inc41, !dbg !12481

if.end20:                                         ; preds = %for.end
  %34 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12482
  %35 = load i8*, i8** %data2, align 8, !dbg !12483
  %call21 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %34, i8* %35), !dbg !12484
  store %struct.hash_entry* %call21, %struct.hash_entry** %new_bucket, align 8, !dbg !12485
  %36 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12486
  %data22 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %36, i32 0, i32 0, !dbg !12488, !ctir !1202
  %37 = load i8*, i8** %data22, align 8, !dbg !12488, !ctir !167
  %tobool23 = icmp ne i8* %37, null, !dbg !12486
  br i1 %tobool23, label %if.then24, label %if.else33, !dbg !12489

if.then24:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_entry, metadata !12490, metadata !DIExpression()), !dbg !12492
  %38 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12493
  %call25 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %38), !dbg !12494
  store %struct.hash_entry* %call25, %struct.hash_entry** %new_entry, align 8, !dbg !12492
  %39 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12495
  %cmp26 = icmp eq %struct.hash_entry* %39, null, !dbg !12497
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !12498

if.then27:                                        ; preds = %if.then24
  store i1 false, i1* %retval, align 1, !dbg !12499
  br label %return, !dbg !12499

if.end28:                                         ; preds = %if.then24
  %40 = load i8*, i8** %data2, align 8, !dbg !12500
  %41 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12501
  %data29 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i32 0, i32 0, !dbg !12502, !ctir !1202
  store i8* %40, i8** %data29, align 8, !dbg !12503, !ctir !167
  %42 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12504
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i32 0, i32 1, !dbg !12505, !ctir !1202
  %43 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !dbg !12505, !ctir !1201
  %44 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12506
  %next31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %44, i32 0, i32 1, !dbg !12507, !ctir !1202
  store %struct.hash_entry* %43, %struct.hash_entry** %next31, align 8, !dbg !12508, !ctir !1201
  %45 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12509
  %46 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12510
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12511, !ctir !1202
  store %struct.hash_entry* %45, %struct.hash_entry** %next32, align 8, !dbg !12512, !ctir !1201
  br label %if.end37, !dbg !12513

if.else33:                                        ; preds = %if.end20
  %47 = load i8*, i8** %data2, align 8, !dbg !12514
  %48 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12516
  %data34 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 0, !dbg !12517, !ctir !1202
  store i8* %47, i8** %data34, align 8, !dbg !12518, !ctir !167
  %49 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12519
  %n_buckets_used35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 3, !dbg !12520, !ctir !1196
  %50 = load i64, i64* %n_buckets_used35, align 8, !dbg !12521, !ctir !149
  %inc36 = add i64 %50, 1, !dbg !12521
  store i64 %inc36, i64* %n_buckets_used35, align 8, !dbg !12521, !ctir !149
  br label %if.end37

if.end37:                                         ; preds = %if.else33, %if.end28
  %51 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12522
  %data38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %51, i32 0, i32 0, !dbg !12523, !ctir !1202
  store i8* null, i8** %data38, align 8, !dbg !12524, !ctir !167
  %52 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12525
  %n_buckets_used39 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %52, i32 0, i32 3, !dbg !12526, !ctir !1196
  %53 = load i64, i64* %n_buckets_used39, align 8, !dbg !12527, !ctir !149
  %dec = add i64 %53, -1, !dbg !12527
  store i64 %dec, i64* %n_buckets_used39, align 8, !dbg !12527, !ctir !149
  br label %if.end40, !dbg !12528

if.end40:                                         ; preds = %if.end37, %for.body
  br label %for.inc41, !dbg !12414

for.inc41:                                        ; preds = %if.end40, %if.then19
  %54 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12529
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 1, !dbg !12529, !ctir !1202
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12529
  br label %for.cond, !dbg !12530, !llvm.loop !12531

for.end42:                                        ; preds = %for.cond
  store i1 true, i1* %retval, align 1, !dbg !12533
  br label %return, !dbg !12533

return:                                           ; preds = %for.end42, %if.then27
  %55 = load i1, i1* %retval, align 1, !dbg !12534
  ret i1 %55, !dbg !12534
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_entry(%struct.hash_table* %table, %struct.hash_entry* %entry1) #0 !dbg !12535 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12538, metadata !DIExpression()), !dbg !12539
  store %struct.hash_entry* %entry1, %struct.hash_entry** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %entry.addr, metadata !12540, metadata !DIExpression()), !dbg !12541
  %0 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12542
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %0, i32 0, i32 0, !dbg !12543, !ctir !1202
  store i8* null, i8** %data, align 8, !dbg !12544, !ctir !167
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12545
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 9, !dbg !12546, !ctir !1196
  %2 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12546, !ctir !1201
  %3 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12547
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i32 0, i32 1, !dbg !12548, !ctir !1202
  store %struct.hash_entry* %2, %struct.hash_entry** %next, align 8, !dbg !12549, !ctir !1201
  %4 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12550
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12551
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 9, !dbg !12552, !ctir !1196
  store %struct.hash_entry* %4, %struct.hash_entry** %free_entry_list2, align 8, !dbg !12553, !ctir !1201
  ret void, !dbg !12554
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @allocate_entry(%struct.hash_table* %table) #0 !dbg !12555 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %new = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12558, metadata !DIExpression()), !dbg !12559
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new, metadata !12560, metadata !DIExpression()), !dbg !12561
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12562
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 9, !dbg !12564, !ctir !1196
  %1 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12564, !ctir !1201
  %tobool = icmp ne %struct.hash_entry* %1, null, !dbg !12562
  br i1 %tobool, label %if.then, label %if.else, !dbg !12565

if.then:                                          ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12566
  %free_entry_list1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 9, !dbg !12568, !ctir !1196
  %3 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list1, align 8, !dbg !12568, !ctir !1201
  store %struct.hash_entry* %3, %struct.hash_entry** %new, align 8, !dbg !12569
  %4 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !dbg !12570
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %4, i32 0, i32 1, !dbg !12571, !ctir !1202
  %5 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12571, !ctir !1201
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12572
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 9, !dbg !12573, !ctir !1196
  store %struct.hash_entry* %5, %struct.hash_entry** %free_entry_list2, align 8, !dbg !12574, !ctir !1201
  br label %if.end, !dbg !12575

if.else:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i64 16) #13, !dbg !12576
  %7 = bitcast i8* %call to %struct.hash_entry*, !dbg !12576
  store %struct.hash_entry* %7, %struct.hash_entry** %new, align 8, !dbg !12578
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !dbg !12579
  ret %struct.hash_entry* %8, !dbg !12580
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @hash_insert_if_absent(%struct.hash_table* %table, i8* %entry1, i8** %matched_ent) #0 !dbg !12581 {
entry:
  %retval = alloca i32, align 4
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent.addr = alloca i8**, align 8
  %data = alloca i8*, align 8, !ctir !167
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %tuning22 = alloca %struct.hash_tuning*, align 8, !ctir !1213
  %candidate = alloca float, align 4, !ctir !1219
  %new_entry = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12584, metadata !DIExpression()), !dbg !12585
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12586, metadata !DIExpression()), !dbg !12587
  store i8** %matched_ent, i8*** %matched_ent.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %matched_ent.addr, metadata !12588, metadata !DIExpression()), !dbg !12589
  call void @llvm.dbg.declare(metadata i8** %data, metadata !12590, metadata !DIExpression()), !dbg !12591
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12592, metadata !DIExpression()), !dbg !12593
  %0 = load i8*, i8** %entry.addr, align 8, !dbg !12594
  %tobool = icmp ne i8* %0, null, !dbg !12594
  br i1 %tobool, label %if.end, label %if.then, !dbg !12596

if.then:                                          ; preds = %entry
  call void @abort() #15, !dbg !12597
  unreachable, !dbg !12597

if.end:                                           ; preds = %entry
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12598
  %2 = load i8*, i8** %entry.addr, align 8, !dbg !12600
  %call = call i8* @hash_find_entry(%struct.hash_table* %1, i8* %2, %struct.hash_entry** %bucket, i1 zeroext false), !dbg !12601
  store i8* %call, i8** %data, align 8, !dbg !12602
  %cmp = icmp ne i8* %call, null, !dbg !12603
  br i1 %cmp, label %if.then2, label %if.end6, !dbg !12604

if.then2:                                         ; preds = %if.end
  %3 = load i8**, i8*** %matched_ent.addr, align 8, !dbg !12605
  %tobool3 = icmp ne i8** %3, null, !dbg !12605
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !12608

if.then4:                                         ; preds = %if.then2
  %4 = load i8*, i8** %data, align 8, !dbg !12609
  %5 = load i8**, i8*** %matched_ent.addr, align 8, !dbg !12610
  store i8* %4, i8** %5, align 8, !dbg !12611, !ctir !181
  br label %if.end5, !dbg !12612

if.end5:                                          ; preds = %if.then4, %if.then2
  store i32 0, i32* %retval, align 4, !dbg !12613
  br label %return, !dbg !12613

if.end6:                                          ; preds = %if.end
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12614
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 3, !dbg !12616, !ctir !1196
  %7 = load i64, i64* %n_buckets_used, align 8, !dbg !12616, !ctir !149
  %conv = uitofp i64 %7 to float, !dbg !12614
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12617
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 5, !dbg !12618, !ctir !1196
  %9 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12618, !ctir !1213
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %9, i32 0, i32 2, !dbg !12619, !ctir !1214
  %10 = load float, float* %growth_threshold, align 4, !dbg !12619, !ctir !1219
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12620
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 2, !dbg !12621, !ctir !1196
  %12 = load i64, i64* %n_buckets, align 8, !dbg !12621, !ctir !149
  %conv7 = uitofp i64 %12 to float, !dbg !12620
  %mul = fmul float %10, %conv7, !dbg !12622
  %cmp8 = fcmp ogt float %conv, %mul, !dbg !12623
  br i1 %cmp8, label %if.then10, label %if.end49, !dbg !12624

if.then10:                                        ; preds = %if.end6
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12625
  %call11 = call zeroext i1 @check_tuning(%struct.hash_table* %13), !dbg !12627
  %14 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12628
  %n_buckets_used12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 3, !dbg !12630, !ctir !1196
  %15 = load i64, i64* %n_buckets_used12, align 8, !dbg !12630, !ctir !149
  %conv13 = uitofp i64 %15 to float, !dbg !12628
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12631
  %tuning14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 5, !dbg !12632, !ctir !1196
  %17 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning14, align 8, !dbg !12632, !ctir !1213
  %growth_threshold15 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %17, i32 0, i32 2, !dbg !12633, !ctir !1214
  %18 = load float, float* %growth_threshold15, align 4, !dbg !12633, !ctir !1219
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12634
  %n_buckets16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 2, !dbg !12635, !ctir !1196
  %20 = load i64, i64* %n_buckets16, align 8, !dbg !12635, !ctir !149
  %conv17 = uitofp i64 %20 to float, !dbg !12634
  %mul18 = fmul float %18, %conv17, !dbg !12636
  %cmp19 = fcmp ogt float %conv13, %mul18, !dbg !12637
  br i1 %cmp19, label %if.then21, label %if.end48, !dbg !12638

if.then21:                                        ; preds = %if.then10
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning22, metadata !12639, metadata !DIExpression()), !dbg !12641
  %21 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12642
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 5, !dbg !12643, !ctir !1196
  %22 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning23, align 8, !dbg !12643, !ctir !1213
  store %struct.hash_tuning* %22, %struct.hash_tuning** %tuning22, align 8, !dbg !12641
  call void @llvm.dbg.declare(metadata float* %candidate, metadata !12644, metadata !DIExpression()), !dbg !12645
  %23 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12646
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %23, i32 0, i32 4, !dbg !12647, !ctir !1214
  %24 = load i8, i8* %is_n_buckets, align 4, !dbg !12647
  %tobool24 = trunc i8 %24 to i1, !dbg !12647, !ctir !141
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !12646

cond.true:                                        ; preds = %if.then21
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12648
  %n_buckets26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 2, !dbg !12649, !ctir !1196
  %26 = load i64, i64* %n_buckets26, align 8, !dbg !12649, !ctir !149
  %conv27 = uitofp i64 %26 to float, !dbg !12648
  %27 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12650
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %27, i32 0, i32 3, !dbg !12651, !ctir !1214
  %28 = load float, float* %growth_factor, align 4, !dbg !12651, !ctir !1219
  %mul28 = fmul float %conv27, %28, !dbg !12652
  br label %cond.end, !dbg !12646

cond.false:                                       ; preds = %if.then21
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12653
  %n_buckets29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 2, !dbg !12654, !ctir !1196
  %30 = load i64, i64* %n_buckets29, align 8, !dbg !12654, !ctir !149
  %conv30 = uitofp i64 %30 to float, !dbg !12653
  %31 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12655
  %growth_factor31 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %31, i32 0, i32 3, !dbg !12656, !ctir !1214
  %32 = load float, float* %growth_factor31, align 4, !dbg !12656, !ctir !1219
  %mul32 = fmul float %conv30, %32, !dbg !12657
  %33 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12658
  %growth_threshold33 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %33, i32 0, i32 2, !dbg !12659, !ctir !1214
  %34 = load float, float* %growth_threshold33, align 4, !dbg !12659, !ctir !1219
  %mul34 = fmul float %mul32, %34, !dbg !12660
  br label %cond.end, !dbg !12646

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul28, %cond.true ], [ %mul34, %cond.false ], !dbg !12646
  store float %cond, float* %candidate, align 4, !dbg !12645
  %35 = load float, float* %candidate, align 4, !dbg !12661
  %cmp35 = fcmp ole float 0x43F0000000000000, %35, !dbg !12663
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !12664

if.then37:                                        ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !12665
  br label %return, !dbg !12665

if.end38:                                         ; preds = %cond.end
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12666
  %37 = load float, float* %candidate, align 4, !dbg !12668
  %conv39 = fptoui float %37 to i64, !dbg !12668
  %call40 = call zeroext i1 @hash_rehash(%struct.hash_table* %36, i64 %conv39), !dbg !12669
  br i1 %call40, label %if.end42, label %if.then41, !dbg !12670

if.then41:                                        ; preds = %if.end38
  store i32 -1, i32* %retval, align 4, !dbg !12671
  br label %return, !dbg !12671

if.end42:                                         ; preds = %if.end38
  %38 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12672
  %39 = load i8*, i8** %entry.addr, align 8, !dbg !12674
  %call43 = call i8* @hash_find_entry(%struct.hash_table* %38, i8* %39, %struct.hash_entry** %bucket, i1 zeroext false), !dbg !12675
  %cmp44 = icmp ne i8* %call43, null, !dbg !12676
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !12677

if.then46:                                        ; preds = %if.end42
  call void @abort() #15, !dbg !12678
  unreachable, !dbg !12678

if.end47:                                         ; preds = %if.end42
  br label %if.end48, !dbg !12679

if.end48:                                         ; preds = %if.end47, %if.then10
  br label %if.end49, !dbg !12680

if.end49:                                         ; preds = %if.end48, %if.end6
  %40 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12681
  %data50 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 0, !dbg !12683, !ctir !1202
  %41 = load i8*, i8** %data50, align 8, !dbg !12683, !ctir !167
  %tobool51 = icmp ne i8* %41, null, !dbg !12681
  br i1 %tobool51, label %if.then52, label %if.end61, !dbg !12684

if.then52:                                        ; preds = %if.end49
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_entry, metadata !12685, metadata !DIExpression()), !dbg !12687
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12688
  %call53 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %42), !dbg !12689
  store %struct.hash_entry* %call53, %struct.hash_entry** %new_entry, align 8, !dbg !12687
  %43 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12690
  %cmp54 = icmp eq %struct.hash_entry* %43, null, !dbg !12692
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !12693

if.then56:                                        ; preds = %if.then52
  store i32 -1, i32* %retval, align 4, !dbg !12694
  br label %return, !dbg !12694

if.end57:                                         ; preds = %if.then52
  %44 = load i8*, i8** %entry.addr, align 8, !dbg !12695
  %45 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12696
  %data58 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i32 0, i32 0, !dbg !12697, !ctir !1202
  store i8* %44, i8** %data58, align 8, !dbg !12698, !ctir !167
  %46 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12699
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12700, !ctir !1202
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12700, !ctir !1201
  %48 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12701
  %next59 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 1, !dbg !12702, !ctir !1202
  store %struct.hash_entry* %47, %struct.hash_entry** %next59, align 8, !dbg !12703, !ctir !1201
  %49 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12704
  %50 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12705
  %next60 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 1, !dbg !12706, !ctir !1202
  store %struct.hash_entry* %49, %struct.hash_entry** %next60, align 8, !dbg !12707, !ctir !1201
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12708
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 4, !dbg !12709, !ctir !1196
  %52 = load i64, i64* %n_entries, align 8, !dbg !12710, !ctir !149
  %inc = add i64 %52, 1, !dbg !12710
  store i64 %inc, i64* %n_entries, align 8, !dbg !12710, !ctir !149
  store i32 1, i32* %retval, align 4, !dbg !12711
  br label %return, !dbg !12711

if.end61:                                         ; preds = %if.end49
  %53 = load i8*, i8** %entry.addr, align 8, !dbg !12712
  %54 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12713
  %data62 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 0, !dbg !12714, !ctir !1202
  store i8* %53, i8** %data62, align 8, !dbg !12715, !ctir !167
  %55 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12716
  %n_entries63 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 4, !dbg !12717, !ctir !1196
  %56 = load i64, i64* %n_entries63, align 8, !dbg !12718, !ctir !149
  %inc64 = add i64 %56, 1, !dbg !12718
  store i64 %inc64, i64* %n_entries63, align 8, !dbg !12718, !ctir !149
  %57 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12719
  %n_buckets_used65 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %57, i32 0, i32 3, !dbg !12720, !ctir !1196
  %58 = load i64, i64* %n_buckets_used65, align 8, !dbg !12721, !ctir !149
  %inc66 = add i64 %58, 1, !dbg !12721
  store i64 %inc66, i64* %n_buckets_used65, align 8, !dbg !12721, !ctir !149
  store i32 1, i32* %retval, align 4, !dbg !12722
  br label %return, !dbg !12722

return:                                           ; preds = %if.end61, %if.end57, %if.then56, %if.then41, %if.then37, %if.end5
  %59 = load i32, i32* %retval, align 4, !dbg !12723
  ret i32 %59, !dbg !12723
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_find_entry(%struct.hash_table* %table, i8* %entry1, %struct.hash_entry** %bucket_head, i1 zeroext %delete) #0 !dbg !12724 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket_head.addr = alloca %struct.hash_entry**, align 8
  %delete.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1201
  %data7 = alloca i8*, align 8, !ctir !167
  %next12 = alloca %struct.hash_entry*, align 8, !ctir !1201
  %data29 = alloca i8*, align 8, !ctir !167
  %next34 = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12728, metadata !DIExpression()), !dbg !12729
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12730, metadata !DIExpression()), !dbg !12731
  store %struct.hash_entry** %bucket_head, %struct.hash_entry*** %bucket_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_entry*** %bucket_head.addr, metadata !12732, metadata !DIExpression()), !dbg !12733
  %frombool = zext i1 %delete to i8
  store i8 %frombool, i8* %delete.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %delete.addr, metadata !12734, metadata !DIExpression()), !dbg !12735
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12736, metadata !DIExpression()), !dbg !12737
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12738
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12739
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !12740
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !12737
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12741, metadata !DIExpression()), !dbg !12742
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12743
  %3 = load %struct.hash_entry**, %struct.hash_entry*** %bucket_head.addr, align 8, !dbg !12744
  store %struct.hash_entry* %2, %struct.hash_entry** %3, align 8, !dbg !12745, !ctir !1201
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12746
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %4, i32 0, i32 0, !dbg !12748, !ctir !1202
  %5 = load i8*, i8** %data, align 8, !dbg !12748, !ctir !167
  %cmp = icmp eq i8* %5, null, !dbg !12749
  br i1 %cmp, label %if.then, label %if.end, !dbg !12750

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !12751
  br label %return, !dbg !12751

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %entry.addr, align 8, !dbg !12752
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12754
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !12755, !ctir !1202
  %8 = load i8*, i8** %data2, align 8, !dbg !12755, !ctir !167
  %cmp3 = icmp eq i8* %6, %8, !dbg !12756
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !12757

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12758
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 7, !dbg !12759, !ctir !1196
  %10 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !12759, !ctir !1230
  %11 = load i8*, i8** %entry.addr, align 8, !dbg !12760
  %12 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12761
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !12762, !ctir !1202
  %13 = load i8*, i8** %data4, align 8, !dbg !12762, !ctir !167
  %call5 = call zeroext i1 %10(i8* %11, i8* %13), !dbg !12758
  br i1 %call5, label %if.then6, label %if.end17, !dbg !12763

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata i8** %data7, metadata !12764, metadata !DIExpression()), !dbg !12766
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12767
  %data8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !12768, !ctir !1202
  %15 = load i8*, i8** %data8, align 8, !dbg !12768, !ctir !167
  store i8* %15, i8** %data7, align 8, !dbg !12766
  %16 = load i8, i8* %delete.addr, align 1, !dbg !12769
  %tobool = trunc i8 %16 to i1, !dbg !12769
  br i1 %tobool, label %if.then9, label %if.end16, !dbg !12771

if.then9:                                         ; preds = %if.then6
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12772
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12775, !ctir !1202
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12775, !ctir !1201
  %tobool10 = icmp ne %struct.hash_entry* %18, null, !dbg !12772
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !12776

if.then11:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next12, metadata !12777, metadata !DIExpression()), !dbg !12779
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12780
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 1, !dbg !12781, !ctir !1202
  %20 = load %struct.hash_entry*, %struct.hash_entry** %next13, align 8, !dbg !12781, !ctir !1201
  store %struct.hash_entry* %20, %struct.hash_entry** %next12, align 8, !dbg !12779
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12782
  %22 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12783
  %23 = bitcast %struct.hash_entry* %21 to i8*, !dbg !12784
  %24 = bitcast %struct.hash_entry* %22 to i8*, !dbg !12784
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !12784
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12785
  %26 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12786
  call void @free_entry(%struct.hash_table* %25, %struct.hash_entry* %26), !dbg !12787
  br label %if.end15, !dbg !12788

if.else:                                          ; preds = %if.then9
  %27 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12789
  %data14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i32 0, i32 0, !dbg !12791, !ctir !1202
  store i8* null, i8** %data14, align 8, !dbg !12792, !ctir !167
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then11
  br label %if.end16, !dbg !12793

if.end16:                                         ; preds = %if.end15, %if.then6
  %28 = load i8*, i8** %data7, align 8, !dbg !12794
  store i8* %28, i8** %retval, align 8, !dbg !12795
  br label %return, !dbg !12795

if.end17:                                         ; preds = %lor.lhs.false
  %29 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12796
  store %struct.hash_entry* %29, %struct.hash_entry** %cursor, align 8, !dbg !12798
  br label %for.cond, !dbg !12799

for.cond:                                         ; preds = %for.inc, %if.end17
  %30 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12800
  %next18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i32 0, i32 1, !dbg !12802, !ctir !1202
  %31 = load %struct.hash_entry*, %struct.hash_entry** %next18, align 8, !dbg !12802, !ctir !1201
  %tobool19 = icmp ne %struct.hash_entry* %31, null, !dbg !12803
  br i1 %tobool19, label %for.body, label %for.end, !dbg !12803

for.body:                                         ; preds = %for.cond
  %32 = load i8*, i8** %entry.addr, align 8, !dbg !12804
  %33 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12807
  %next20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 0, i32 1, !dbg !12808, !ctir !1202
  %34 = load %struct.hash_entry*, %struct.hash_entry** %next20, align 8, !dbg !12808, !ctir !1201
  %data21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i32 0, i32 0, !dbg !12809, !ctir !1202
  %35 = load i8*, i8** %data21, align 8, !dbg !12809, !ctir !167
  %cmp22 = icmp eq i8* %32, %35, !dbg !12810
  br i1 %cmp22, label %if.then28, label %lor.lhs.false23, !dbg !12811

lor.lhs.false23:                                  ; preds = %for.body
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12812
  %comparator24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %36, i32 0, i32 7, !dbg !12813, !ctir !1196
  %37 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator24, align 8, !dbg !12813, !ctir !1230
  %38 = load i8*, i8** %entry.addr, align 8, !dbg !12814
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12815
  %next25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i32 0, i32 1, !dbg !12816, !ctir !1202
  %40 = load %struct.hash_entry*, %struct.hash_entry** %next25, align 8, !dbg !12816, !ctir !1201
  %data26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 0, !dbg !12817, !ctir !1202
  %41 = load i8*, i8** %data26, align 8, !dbg !12817, !ctir !167
  %call27 = call zeroext i1 %37(i8* %38, i8* %41), !dbg !12812
  br i1 %call27, label %if.then28, label %if.end39, !dbg !12818

if.then28:                                        ; preds = %lor.lhs.false23, %for.body
  call void @llvm.dbg.declare(metadata i8** %data29, metadata !12819, metadata !DIExpression()), !dbg !12821
  %42 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12822
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i32 0, i32 1, !dbg !12823, !ctir !1202
  %43 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !dbg !12823, !ctir !1201
  %data31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 0, !dbg !12824, !ctir !1202
  %44 = load i8*, i8** %data31, align 8, !dbg !12824, !ctir !167
  store i8* %44, i8** %data29, align 8, !dbg !12821
  %45 = load i8, i8* %delete.addr, align 1, !dbg !12825
  %tobool32 = trunc i8 %45 to i1, !dbg !12825
  br i1 %tobool32, label %if.then33, label %if.end38, !dbg !12827

if.then33:                                        ; preds = %if.then28
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next34, metadata !12828, metadata !DIExpression()), !dbg !12830
  %46 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12831
  %next35 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12832, !ctir !1202
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next35, align 8, !dbg !12832, !ctir !1201
  store %struct.hash_entry* %47, %struct.hash_entry** %next34, align 8, !dbg !12830
  %48 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !dbg !12833
  %next36 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 1, !dbg !12834, !ctir !1202
  %49 = load %struct.hash_entry*, %struct.hash_entry** %next36, align 8, !dbg !12834, !ctir !1201
  %50 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12835
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 1, !dbg !12836, !ctir !1202
  store %struct.hash_entry* %49, %struct.hash_entry** %next37, align 8, !dbg !12837, !ctir !1201
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12838
  %52 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !dbg !12839
  call void @free_entry(%struct.hash_table* %51, %struct.hash_entry* %52), !dbg !12840
  br label %if.end38, !dbg !12841

if.end38:                                         ; preds = %if.then33, %if.then28
  %53 = load i8*, i8** %data29, align 8, !dbg !12842
  store i8* %53, i8** %retval, align 8, !dbg !12843
  br label %return, !dbg !12843

if.end39:                                         ; preds = %lor.lhs.false23
  br label %for.inc, !dbg !12844

for.inc:                                          ; preds = %if.end39
  %54 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12845
  %next40 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 1, !dbg !12846, !ctir !1202
  %55 = load %struct.hash_entry*, %struct.hash_entry** %next40, align 8, !dbg !12846, !ctir !1201
  store %struct.hash_entry* %55, %struct.hash_entry** %cursor, align 8, !dbg !12847
  br label %for.cond, !dbg !12848, !llvm.loop !12849

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !12851
  br label %return, !dbg !12851

return:                                           ; preds = %for.end, %if.end38, %if.end16, %if.then
  %56 = load i8*, i8** %retval, align 8, !dbg !12852
  ret i8* %56, !dbg !12852
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_insert(%struct.hash_table* %table, i8* %entry1) #0 !dbg !12853 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent = alloca i8*, align 8, !ctir !181
  %err = alloca i32, align 4, !ctir !27
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12856, metadata !DIExpression()), !dbg !12857
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12858, metadata !DIExpression()), !dbg !12859
  call void @llvm.dbg.declare(metadata i8** %matched_ent, metadata !12860, metadata !DIExpression()), !dbg !12861
  call void @llvm.dbg.declare(metadata i32* %err, metadata !12862, metadata !DIExpression()), !dbg !12863
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12864
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12865
  %call = call i32 @hash_insert_if_absent(%struct.hash_table* %0, i8* %1, i8** %matched_ent), !dbg !12866
  store i32 %call, i32* %err, align 4, !dbg !12863
  %2 = load i32, i32* %err, align 4, !dbg !12867
  %cmp = icmp eq i32 %2, -1, !dbg !12868
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12867

cond.true:                                        ; preds = %entry
  br label %cond.end5, !dbg !12867

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %err, align 4, !dbg !12869
  %cmp2 = icmp eq i32 %3, 0, !dbg !12870
  br i1 %cmp2, label %cond.true3, label %cond.false4, !dbg !12869

cond.true3:                                       ; preds = %cond.false
  %4 = load i8*, i8** %matched_ent, align 8, !dbg !12871
  br label %cond.end, !dbg !12869

cond.false4:                                      ; preds = %cond.false
  %5 = load i8*, i8** %entry.addr, align 8, !dbg !12872
  br label %cond.end, !dbg !12869

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i8* [ %4, %cond.true3 ], [ %5, %cond.false4 ], !dbg !12869
  br label %cond.end5, !dbg !12867

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i8* [ null, %cond.true ], [ %cond, %cond.end ], !dbg !12867
  ret i8* %cond6, !dbg !12873
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_delete(%struct.hash_table* %table, i8* %entry1) #0 !dbg !12874 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %data = alloca i8*, align 8, !ctir !167
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !1201
  %tuning21 = alloca %struct.hash_tuning*, align 8, !ctir !1213
  %candidate = alloca i64, align 8, !ctir !149
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !1201
  %next = alloca %struct.hash_entry*, align 8, !ctir !1201
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12875, metadata !DIExpression()), !dbg !12876
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12877, metadata !DIExpression()), !dbg !12878
  call void @llvm.dbg.declare(metadata i8** %data, metadata !12879, metadata !DIExpression()), !dbg !12880
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12881, metadata !DIExpression()), !dbg !12882
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12883
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12884
  %call = call i8* @hash_find_entry(%struct.hash_table* %0, i8* %1, %struct.hash_entry** %bucket, i1 zeroext true), !dbg !12885
  store i8* %call, i8** %data, align 8, !dbg !12886
  %2 = load i8*, i8** %data, align 8, !dbg !12887
  %tobool = icmp ne i8* %2, null, !dbg !12887
  br i1 %tobool, label %if.end, label %if.then, !dbg !12889

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !12890
  br label %return, !dbg !12890

if.end:                                           ; preds = %entry
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12891
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 4, !dbg !12892, !ctir !1196
  %4 = load i64, i64* %n_entries, align 8, !dbg !12893, !ctir !149
  %dec = add i64 %4, -1, !dbg !12893
  store i64 %dec, i64* %n_entries, align 8, !dbg !12893, !ctir !149
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12894
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12896, !ctir !1202
  %6 = load i8*, i8** %data2, align 8, !dbg !12896, !ctir !167
  %tobool3 = icmp ne i8* %6, null, !dbg !12894
  br i1 %tobool3, label %if.end42, label %if.then4, !dbg !12897

if.then4:                                         ; preds = %if.end
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12898
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 3, !dbg !12900, !ctir !1196
  %8 = load i64, i64* %n_buckets_used, align 8, !dbg !12901, !ctir !149
  %dec5 = add i64 %8, -1, !dbg !12901
  store i64 %dec5, i64* %n_buckets_used, align 8, !dbg !12901, !ctir !149
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12902
  %n_buckets_used6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 3, !dbg !12904, !ctir !1196
  %10 = load i64, i64* %n_buckets_used6, align 8, !dbg !12904, !ctir !149
  %conv = uitofp i64 %10 to float, !dbg !12902
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12905
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 5, !dbg !12906, !ctir !1196
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12906, !ctir !1213
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %12, i32 0, i32 0, !dbg !12907, !ctir !1214
  %13 = load float, float* %shrink_threshold, align 4, !dbg !12907, !ctir !1219
  %14 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12908
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 2, !dbg !12909, !ctir !1196
  %15 = load i64, i64* %n_buckets, align 8, !dbg !12909, !ctir !149
  %conv7 = uitofp i64 %15 to float, !dbg !12908
  %mul = fmul float %13, %conv7, !dbg !12910
  %cmp = fcmp olt float %conv, %mul, !dbg !12911
  br i1 %cmp, label %if.then9, label %if.end41, !dbg !12912

if.then9:                                         ; preds = %if.then4
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12913
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %16), !dbg !12915
  %17 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12916
  %n_buckets_used11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 3, !dbg !12918, !ctir !1196
  %18 = load i64, i64* %n_buckets_used11, align 8, !dbg !12918, !ctir !149
  %conv12 = uitofp i64 %18 to float, !dbg !12916
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12919
  %tuning13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 5, !dbg !12920, !ctir !1196
  %20 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning13, align 8, !dbg !12920, !ctir !1213
  %shrink_threshold14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %20, i32 0, i32 0, !dbg !12921, !ctir !1214
  %21 = load float, float* %shrink_threshold14, align 4, !dbg !12921, !ctir !1219
  %22 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12922
  %n_buckets15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 2, !dbg !12923, !ctir !1196
  %23 = load i64, i64* %n_buckets15, align 8, !dbg !12923, !ctir !149
  %conv16 = uitofp i64 %23 to float, !dbg !12922
  %mul17 = fmul float %21, %conv16, !dbg !12924
  %cmp18 = fcmp olt float %conv12, %mul17, !dbg !12925
  br i1 %cmp18, label %if.then20, label %if.end40, !dbg !12926

if.then20:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning21, metadata !12927, metadata !DIExpression()), !dbg !12929
  %24 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12930
  %tuning22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 5, !dbg !12931, !ctir !1196
  %25 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12931, !ctir !1213
  store %struct.hash_tuning* %25, %struct.hash_tuning** %tuning21, align 8, !dbg !12929
  call void @llvm.dbg.declare(metadata i64* %candidate, metadata !12932, metadata !DIExpression()), !dbg !12933
  %26 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !12934
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %26, i32 0, i32 4, !dbg !12935, !ctir !1214
  %27 = load i8, i8* %is_n_buckets, align 4, !dbg !12935
  %tobool23 = trunc i8 %27 to i1, !dbg !12935, !ctir !141
  br i1 %tobool23, label %cond.true, label %cond.false, !dbg !12934

cond.true:                                        ; preds = %if.then20
  %28 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12936
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 2, !dbg !12937, !ctir !1196
  %29 = load i64, i64* %n_buckets25, align 8, !dbg !12937, !ctir !149
  %conv26 = uitofp i64 %29 to float, !dbg !12936
  %30 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !12938
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %30, i32 0, i32 1, !dbg !12939, !ctir !1214
  %31 = load float, float* %shrink_factor, align 4, !dbg !12939, !ctir !1219
  %mul27 = fmul float %conv26, %31, !dbg !12940
  br label %cond.end, !dbg !12934

cond.false:                                       ; preds = %if.then20
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12941
  %n_buckets28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 2, !dbg !12942, !ctir !1196
  %33 = load i64, i64* %n_buckets28, align 8, !dbg !12942, !ctir !149
  %conv29 = uitofp i64 %33 to float, !dbg !12941
  %34 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !12943
  %shrink_factor30 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %34, i32 0, i32 1, !dbg !12944, !ctir !1214
  %35 = load float, float* %shrink_factor30, align 4, !dbg !12944, !ctir !1219
  %mul31 = fmul float %conv29, %35, !dbg !12945
  %36 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !12946
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %36, i32 0, i32 2, !dbg !12947, !ctir !1214
  %37 = load float, float* %growth_threshold, align 4, !dbg !12947, !ctir !1219
  %mul32 = fmul float %mul31, %37, !dbg !12948
  br label %cond.end, !dbg !12934

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul27, %cond.true ], [ %mul32, %cond.false ], !dbg !12934
  %conv33 = fptoui float %cond to i64, !dbg !12949
  store i64 %conv33, i64* %candidate, align 8, !dbg !12933
  %38 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12950
  %39 = load i64, i64* %candidate, align 8, !dbg !12952
  %call34 = call zeroext i1 @hash_rehash(%struct.hash_table* %38, i64 %39), !dbg !12953
  br i1 %call34, label %if.end39, label %if.then35, !dbg !12954

if.then35:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12955, metadata !DIExpression()), !dbg !12957
  %40 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12958
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 9, !dbg !12959, !ctir !1196
  %41 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12959, !ctir !1201
  store %struct.hash_entry* %41, %struct.hash_entry** %cursor, align 8, !dbg !12957
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12960, metadata !DIExpression()), !dbg !12961
  br label %while.cond, !dbg !12962

while.cond:                                       ; preds = %while.body, %if.then35
  %42 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12963
  %tobool36 = icmp ne %struct.hash_entry* %42, null, !dbg !12962
  br i1 %tobool36, label %while.body, label %while.end, !dbg !12962

while.body:                                       ; preds = %while.cond
  %43 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12964
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 1, !dbg !12966, !ctir !1202
  %44 = load %struct.hash_entry*, %struct.hash_entry** %next37, align 8, !dbg !12966, !ctir !1201
  store %struct.hash_entry* %44, %struct.hash_entry** %next, align 8, !dbg !12967
  %45 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12968
  %46 = bitcast %struct.hash_entry* %45 to i8*, !dbg !12968
  call void @free(i8* %46) #13, !dbg !12969
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12970
  store %struct.hash_entry* %47, %struct.hash_entry** %cursor, align 8, !dbg !12971
  br label %while.cond, !dbg !12962, !llvm.loop !12972

while.end:                                        ; preds = %while.cond
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12974
  %free_entry_list38 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 9, !dbg !12975, !ctir !1196
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list38, align 8, !dbg !12976, !ctir !1201
  br label %if.end39, !dbg !12977

if.end39:                                         ; preds = %while.end, %cond.end
  br label %if.end40, !dbg !12978

if.end40:                                         ; preds = %if.end39, %if.then9
  br label %if.end41, !dbg !12979

if.end41:                                         ; preds = %if.end40, %if.then4
  br label %if.end42, !dbg !12980

if.end42:                                         ; preds = %if.end41, %if.end
  %49 = load i8*, i8** %data, align 8, !dbg !12981
  store i8* %49, i8** %retval, align 8, !dbg !12982
  br label %return, !dbg !12982

return:                                           ; preds = %if.end42, %if.then
  %50 = load i8*, i8** %retval, align 8, !dbg !12983
  ret i8* %50, !dbg !12983
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @triple_hash(i8* %x, i64 %table_size) #9 !dbg !12984 {
entry:
  %x.addr = alloca i8*, align 8
  %table_size.addr = alloca i64, align 8
  %p = alloca %struct.F_triple*, align 8, !ctir !1573
  %tmp = alloca i64, align 8, !ctir !149
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !12986, metadata !DIExpression()), !dbg !12987
  store i64 %table_size, i64* %table_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %table_size.addr, metadata !12988, metadata !DIExpression()), !dbg !12989
  call void @llvm.dbg.declare(metadata %struct.F_triple** %p, metadata !12990, metadata !DIExpression()), !dbg !12991
  %0 = load i8*, i8** %x.addr, align 8, !dbg !12992
  %1 = bitcast i8* %0 to %struct.F_triple*, !dbg !12992
  store %struct.F_triple* %1, %struct.F_triple** %p, align 8, !dbg !12991
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !12993, metadata !DIExpression()), !dbg !12994
  %2 = load %struct.F_triple*, %struct.F_triple** %p, align 8, !dbg !12995
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %2, i32 0, i32 0, !dbg !12996, !ctir !1574
  %3 = load i8*, i8** %name, align 8, !dbg !12996, !ctir !143
  %4 = load i64, i64* %table_size.addr, align 8, !dbg !12997
  %call = call i64 @hash_pjw(i8* %3, i64 %4) #16, !dbg !12998
  store i64 %call, i64* %tmp, align 8, !dbg !12994
  %5 = load i64, i64* %tmp, align 8, !dbg !12999
  %6 = load %struct.F_triple*, %struct.F_triple** %p, align 8, !dbg !13000
  %st_ino = getelementptr inbounds %struct.F_triple, %struct.F_triple* %6, i32 0, i32 1, !dbg !13001, !ctir !1574
  %7 = load i64, i64* %st_ino, align 8, !dbg !13001, !ctir !269
  %xor = xor i64 %5, %7, !dbg !13002
  %8 = load i64, i64* %table_size.addr, align 8, !dbg !13003
  %rem = urem i64 %xor, %8, !dbg !13004
  ret i64 %rem, !dbg !13005
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @triple_hash_no_name(i8* %x, i64 %table_size) #9 !dbg !13006 {
entry:
  %x.addr = alloca i8*, align 8
  %table_size.addr = alloca i64, align 8
  %p = alloca %struct.F_triple*, align 8, !ctir !1573
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !13007, metadata !DIExpression()), !dbg !13008
  store i64 %table_size, i64* %table_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %table_size.addr, metadata !13009, metadata !DIExpression()), !dbg !13010
  call void @llvm.dbg.declare(metadata %struct.F_triple** %p, metadata !13011, metadata !DIExpression()), !dbg !13012
  %0 = load i8*, i8** %x.addr, align 8, !dbg !13013
  %1 = bitcast i8* %0 to %struct.F_triple*, !dbg !13013
  store %struct.F_triple* %1, %struct.F_triple** %p, align 8, !dbg !13012
  %2 = load %struct.F_triple*, %struct.F_triple** %p, align 8, !dbg !13014
  %st_ino = getelementptr inbounds %struct.F_triple, %struct.F_triple* %2, i32 0, i32 1, !dbg !13015, !ctir !1574
  %3 = load i64, i64* %st_ino, align 8, !dbg !13015, !ctir !269
  %4 = load i64, i64* %table_size.addr, align 8, !dbg !13016
  %rem = urem i64 %3, %4, !dbg !13017
  ret i64 %rem, !dbg !13018
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @triple_compare(i8* %x, i8* %y) #0 !dbg !13019 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %a = alloca %struct.F_triple*, align 8, !ctir !1573
  %b = alloca %struct.F_triple*, align 8, !ctir !1573
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !13020, metadata !DIExpression()), !dbg !13021
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !13022, metadata !DIExpression()), !dbg !13023
  call void @llvm.dbg.declare(metadata %struct.F_triple** %a, metadata !13024, metadata !DIExpression()), !dbg !13025
  %0 = load i8*, i8** %x.addr, align 8, !dbg !13026
  %1 = bitcast i8* %0 to %struct.F_triple*, !dbg !13026
  store %struct.F_triple* %1, %struct.F_triple** %a, align 8, !dbg !13025
  call void @llvm.dbg.declare(metadata %struct.F_triple** %b, metadata !13027, metadata !DIExpression()), !dbg !13028
  %2 = load i8*, i8** %y.addr, align 8, !dbg !13029
  %3 = bitcast i8* %2 to %struct.F_triple*, !dbg !13029
  store %struct.F_triple* %3, %struct.F_triple** %b, align 8, !dbg !13028
  %4 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13030
  %st_ino = getelementptr inbounds %struct.F_triple, %struct.F_triple* %4, i32 0, i32 1, !dbg !13030, !ctir !1574
  %5 = load i64, i64* %st_ino, align 8, !dbg !13030, !ctir !269
  %6 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13030
  %st_ino1 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %6, i32 0, i32 1, !dbg !13030, !ctir !1574
  %7 = load i64, i64* %st_ino1, align 8, !dbg !13030, !ctir !269
  %cmp = icmp eq i64 %5, %7, !dbg !13030
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !13030

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13030
  %st_dev = getelementptr inbounds %struct.F_triple, %struct.F_triple* %8, i32 0, i32 2, !dbg !13030, !ctir !1574
  %9 = load i64, i64* %st_dev, align 8, !dbg !13030, !ctir !271
  %10 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13030
  %st_dev2 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %10, i32 0, i32 2, !dbg !13030, !ctir !1574
  %11 = load i64, i64* %st_dev2, align 8, !dbg !13030, !ctir !271
  %cmp3 = icmp eq i64 %9, %11, !dbg !13030
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !13031

land.rhs:                                         ; preds = %land.lhs.true
  %12 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13032
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %12, i32 0, i32 0, !dbg !13033, !ctir !1574
  %13 = load i8*, i8** %name, align 8, !dbg !13033, !ctir !143
  %14 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13034
  %name4 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %14, i32 0, i32 0, !dbg !13035, !ctir !1574
  %15 = load i8*, i8** %name4, align 8, !dbg !13035, !ctir !143
  %call = call zeroext i1 @same_name(i8* %13, i8* %15), !dbg !13036
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %call, %land.rhs ], !dbg !13037
  %17 = zext i1 %16 to i64, !dbg !13038
  %cond = select i1 %16, i32 1, i32 0, !dbg !13038
  %tobool = icmp ne i32 %cond, 0, !dbg !13038
  ret i1 %tobool, !dbg !13039
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local zeroext i1 @triple_compare_ino_str(i8* %x, i8* %y) #9 !dbg !13040 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %a = alloca %struct.F_triple*, align 8, !ctir !1573
  %b = alloca %struct.F_triple*, align 8, !ctir !1573
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !13041, metadata !DIExpression()), !dbg !13042
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !13043, metadata !DIExpression()), !dbg !13044
  call void @llvm.dbg.declare(metadata %struct.F_triple** %a, metadata !13045, metadata !DIExpression()), !dbg !13046
  %0 = load i8*, i8** %x.addr, align 8, !dbg !13047
  %1 = bitcast i8* %0 to %struct.F_triple*, !dbg !13047
  store %struct.F_triple* %1, %struct.F_triple** %a, align 8, !dbg !13046
  call void @llvm.dbg.declare(metadata %struct.F_triple** %b, metadata !13048, metadata !DIExpression()), !dbg !13049
  %2 = load i8*, i8** %y.addr, align 8, !dbg !13050
  %3 = bitcast i8* %2 to %struct.F_triple*, !dbg !13050
  store %struct.F_triple* %3, %struct.F_triple** %b, align 8, !dbg !13049
  %4 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13051
  %st_ino = getelementptr inbounds %struct.F_triple, %struct.F_triple* %4, i32 0, i32 1, !dbg !13051, !ctir !1574
  %5 = load i64, i64* %st_ino, align 8, !dbg !13051, !ctir !269
  %6 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13051
  %st_ino1 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %6, i32 0, i32 1, !dbg !13051, !ctir !1574
  %7 = load i64, i64* %st_ino1, align 8, !dbg !13051, !ctir !269
  %cmp = icmp eq i64 %5, %7, !dbg !13051
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !13051

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13051
  %st_dev = getelementptr inbounds %struct.F_triple, %struct.F_triple* %8, i32 0, i32 2, !dbg !13051, !ctir !1574
  %9 = load i64, i64* %st_dev, align 8, !dbg !13051, !ctir !271
  %10 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13051
  %st_dev2 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %10, i32 0, i32 2, !dbg !13051, !ctir !1574
  %11 = load i64, i64* %st_dev2, align 8, !dbg !13051, !ctir !271
  %cmp3 = icmp eq i64 %9, %11, !dbg !13051
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !13052

land.rhs:                                         ; preds = %land.lhs.true
  %12 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13053
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %12, i32 0, i32 0, !dbg !13053, !ctir !1574
  %13 = load i8*, i8** %name, align 8, !dbg !13053, !ctir !143
  %14 = load %struct.F_triple*, %struct.F_triple** %b, align 8, !dbg !13053
  %name4 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %14, i32 0, i32 0, !dbg !13053, !ctir !1574
  %15 = load i8*, i8** %name4, align 8, !dbg !13053, !ctir !143
  %call = call i32 @strcmp(i8* %13, i8* %15) #16, !dbg !13053
  %cmp5 = icmp eq i32 %call, 0, !dbg !13053
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !13054
  %17 = zext i1 %16 to i64, !dbg !13055
  %cond = select i1 %16, i32 1, i32 0, !dbg !13055
  %tobool = icmp ne i32 %cond, 0, !dbg !13055
  ret i1 %tobool, !dbg !13056
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @triple_free(i8* %x) #0 !dbg !13057 {
entry:
  %x.addr = alloca i8*, align 8
  %a = alloca %struct.F_triple*, align 8, !ctir !1580
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !13058, metadata !DIExpression()), !dbg !13059
  call void @llvm.dbg.declare(metadata %struct.F_triple** %a, metadata !13060, metadata !DIExpression()), !dbg !13061
  %0 = load i8*, i8** %x.addr, align 8, !dbg !13062
  %1 = bitcast i8* %0 to %struct.F_triple*, !dbg !13062
  store %struct.F_triple* %1, %struct.F_triple** %a, align 8, !dbg !13061
  %2 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13063
  %name = getelementptr inbounds %struct.F_triple, %struct.F_triple* %2, i32 0, i32 0, !dbg !13064, !ctir !1575
  %3 = load i8*, i8** %name, align 8, !dbg !13064, !ctir !143
  call void @free(i8* %3) #13, !dbg !13065
  %4 = load %struct.F_triple*, %struct.F_triple** %a, align 8, !dbg !13066
  %5 = bitcast %struct.F_triple* %4 to i8*, !dbg !13066
  call void @free(i8* %5) #13, !dbg !13067
  ret void, !dbg !13068
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @human_readable(i64 %n, i8* %buf, i32 %opts, i64 %from_block_size, i64 %to_block_size) #0 !dbg !13069 {
entry:
  %n.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %opts.addr = alloca i32, align 4
  %from_block_size.addr = alloca i64, align 8
  %to_block_size.addr = alloca i64, align 8
  %inexact_style = alloca i32, align 4, !ctir !27
  %base = alloca i32, align 4, !ctir !6
  %amt = alloca i64, align 8, !ctir !168
  %tenths = alloca i32, align 4, !ctir !27
  %exponent = alloca i32, align 4, !ctir !27
  %exponent_max = alloca i32, align 4, !ctir !27
  %p = alloca i8*, align 8, !ctir !143
  %psuffix = alloca i8*, align 8, !ctir !143
  %integerlim = alloca i8*, align 8, !ctir !146
  %rounding = alloca i32, align 4, !ctir !27
  %decimal_point = alloca i8*, align 8, !ctir !146
  %decimal_pointlen = alloca i64, align 8, !ctir !149
  %grouping = alloca i8*, align 8, !ctir !146
  %thousands_sep = alloca i8*, align 8, !ctir !146
  %l = alloca %struct.lconv*, align 8, !ctir !1245
  %pointlen = alloca i64, align 8, !ctir !149
  %multiplier = alloca i64, align 8, !ctir !168
  %divisor = alloca i64, align 8, !ctir !168
  %r10 = alloca i64, align 8, !ctir !168
  %r2 = alloca i64, align 8, !ctir !168
  %dto_block_size = alloca x86_fp80, align 16, !ctir !1274
  %damt = alloca x86_fp80, align 16, !ctir !1274
  %buflen = alloca i64, align 8, !ctir !149
  %nonintegerlen = alloca i64, align 8, !ctir !149
  %e = alloca x86_fp80, align 16, !ctir !1274
  %r10103 = alloca i32, align 4, !ctir !6
  %r2110 = alloca i32, align 4, !ctir !6
  %digit = alloca i32, align 4, !ctir !27
  %power = alloca i64, align 8, !ctir !168
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !13072, metadata !DIExpression()), !dbg !13073
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !13074, metadata !DIExpression()), !dbg !13075
  store i32 %opts, i32* %opts.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opts.addr, metadata !13076, metadata !DIExpression()), !dbg !13077
  store i64 %from_block_size, i64* %from_block_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %from_block_size.addr, metadata !13078, metadata !DIExpression()), !dbg !13079
  store i64 %to_block_size, i64* %to_block_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to_block_size.addr, metadata !13080, metadata !DIExpression()), !dbg !13081
  call void @llvm.dbg.declare(metadata i32* %inexact_style, metadata !13082, metadata !DIExpression()), !dbg !13083
  %0 = load i32, i32* %opts.addr, align 4, !dbg !13084
  %and = and i32 %0, 3, !dbg !13085
  store i32 %and, i32* %inexact_style, align 4, !dbg !13083
  call void @llvm.dbg.declare(metadata i32* %base, metadata !13086, metadata !DIExpression()), !dbg !13087
  %1 = load i32, i32* %opts.addr, align 4, !dbg !13088
  %and1 = and i32 %1, 32, !dbg !13089
  %tobool = icmp ne i32 %and1, 0, !dbg !13088
  %2 = zext i1 %tobool to i64, !dbg !13088
  %cond = select i1 %tobool, i32 1024, i32 1000, !dbg !13088
  store i32 %cond, i32* %base, align 4, !dbg !13087
  call void @llvm.dbg.declare(metadata i64* %amt, metadata !13090, metadata !DIExpression()), !dbg !13091
  call void @llvm.dbg.declare(metadata i32* %tenths, metadata !13092, metadata !DIExpression()), !dbg !13093
  call void @llvm.dbg.declare(metadata i32* %exponent, metadata !13094, metadata !DIExpression()), !dbg !13095
  store i32 -1, i32* %exponent, align 4, !dbg !13095
  call void @llvm.dbg.declare(metadata i32* %exponent_max, metadata !13096, metadata !DIExpression()), !dbg !13097
  store i32 8, i32* %exponent_max, align 4, !dbg !13097
  call void @llvm.dbg.declare(metadata i8** %p, metadata !13098, metadata !DIExpression()), !dbg !13099
  call void @llvm.dbg.declare(metadata i8** %psuffix, metadata !13100, metadata !DIExpression()), !dbg !13101
  call void @llvm.dbg.declare(metadata i8** %integerlim, metadata !13102, metadata !DIExpression()), !dbg !13103
  call void @llvm.dbg.declare(metadata i32* %rounding, metadata !13104, metadata !DIExpression()), !dbg !13105
  call void @llvm.dbg.declare(metadata i8** %decimal_point, metadata !13106, metadata !DIExpression()), !dbg !13107
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.330, i64 0, i64 0), i8** %decimal_point, align 8, !dbg !13107
  call void @llvm.dbg.declare(metadata i64* %decimal_pointlen, metadata !13108, metadata !DIExpression()), !dbg !13109
  store i64 1, i64* %decimal_pointlen, align 8, !dbg !13109
  call void @llvm.dbg.declare(metadata i8** %grouping, metadata !13110, metadata !DIExpression()), !dbg !13111
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.331, i64 0, i64 0), i8** %grouping, align 8, !dbg !13111
  call void @llvm.dbg.declare(metadata i8** %thousands_sep, metadata !13112, metadata !DIExpression()), !dbg !13113
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.331, i64 0, i64 0), i8** %thousands_sep, align 8, !dbg !13113
  call void @llvm.dbg.declare(metadata %struct.lconv** %l, metadata !13114, metadata !DIExpression()), !dbg !13115
  %call = call %struct.lconv* @localeconv() #13, !dbg !13116
  store %struct.lconv* %call, %struct.lconv** %l, align 8, !dbg !13115
  call void @llvm.dbg.declare(metadata i64* %pointlen, metadata !13117, metadata !DIExpression()), !dbg !13118
  %3 = load %struct.lconv*, %struct.lconv** %l, align 8, !dbg !13119
  %decimal_point2 = getelementptr inbounds %struct.lconv, %struct.lconv* %3, i32 0, i32 0, !dbg !13120, !ctir !1246
  %4 = load i8*, i8** %decimal_point2, align 8, !dbg !13120, !ctir !143
  %call3 = call i64 @strlen(i8* %4) #16, !dbg !13121
  store i64 %call3, i64* %pointlen, align 8, !dbg !13118
  %5 = load i64, i64* %pointlen, align 8, !dbg !13122
  %cmp = icmp ult i64 0, %5, !dbg !13124
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13125

land.lhs.true:                                    ; preds = %entry
  %6 = load i64, i64* %pointlen, align 8, !dbg !13126
  %cmp4 = icmp ule i64 %6, 16, !dbg !13127
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13128

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.lconv*, %struct.lconv** %l, align 8, !dbg !13129
  %decimal_point5 = getelementptr inbounds %struct.lconv, %struct.lconv* %7, i32 0, i32 0, !dbg !13131, !ctir !1246
  %8 = load i8*, i8** %decimal_point5, align 8, !dbg !13131, !ctir !143
  store i8* %8, i8** %decimal_point, align 8, !dbg !13132
  %9 = load i64, i64* %pointlen, align 8, !dbg !13133
  store i64 %9, i64* %decimal_pointlen, align 8, !dbg !13134
  br label %if.end, !dbg !13135

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.lconv*, %struct.lconv** %l, align 8, !dbg !13136
  %grouping6 = getelementptr inbounds %struct.lconv, %struct.lconv* %10, i32 0, i32 2, !dbg !13137, !ctir !1246
  %11 = load i8*, i8** %grouping6, align 8, !dbg !13137, !ctir !143
  store i8* %11, i8** %grouping, align 8, !dbg !13138
  %12 = load %struct.lconv*, %struct.lconv** %l, align 8, !dbg !13139
  %thousands_sep7 = getelementptr inbounds %struct.lconv, %struct.lconv* %12, i32 0, i32 1, !dbg !13141, !ctir !1246
  %13 = load i8*, i8** %thousands_sep7, align 8, !dbg !13141, !ctir !143
  %call8 = call i64 @strlen(i8* %13) #16, !dbg !13142
  %cmp9 = icmp ule i64 %call8, 16, !dbg !13143
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !13144

if.then10:                                        ; preds = %if.end
  %14 = load %struct.lconv*, %struct.lconv** %l, align 8, !dbg !13145
  %thousands_sep11 = getelementptr inbounds %struct.lconv, %struct.lconv* %14, i32 0, i32 1, !dbg !13146, !ctir !1246
  %15 = load i8*, i8** %thousands_sep11, align 8, !dbg !13146, !ctir !143
  store i8* %15, i8** %thousands_sep, align 8, !dbg !13147
  br label %if.end12, !dbg !13148

if.end12:                                         ; preds = %if.then10, %if.end
  %16 = load i8*, i8** %buf.addr, align 8, !dbg !13149
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 651, !dbg !13150, !ctir !144
  %add.ptr13 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !13151, !ctir !144
  %add.ptr14 = getelementptr inbounds i8, i8* %add.ptr13, i64 -3, !dbg !13152, !ctir !144
  store i8* %add.ptr14, i8** %psuffix, align 8, !dbg !13153
  %17 = load i8*, i8** %psuffix, align 8, !dbg !13154
  store i8* %17, i8** %p, align 8, !dbg !13155
  %18 = load i64, i64* %to_block_size.addr, align 8, !dbg !13156
  %19 = load i64, i64* %from_block_size.addr, align 8, !dbg !13158
  %cmp15 = icmp ule i64 %18, %19, !dbg !13159
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !13160

if.then16:                                        ; preds = %if.end12
  %20 = load i64, i64* %from_block_size.addr, align 8, !dbg !13161
  %21 = load i64, i64* %to_block_size.addr, align 8, !dbg !13164
  %rem = urem i64 %20, %21, !dbg !13165
  %cmp17 = icmp eq i64 %rem, 0, !dbg !13166
  br i1 %cmp17, label %if.then18, label %if.end23, !dbg !13167

if.then18:                                        ; preds = %if.then16
  call void @llvm.dbg.declare(metadata i64* %multiplier, metadata !13168, metadata !DIExpression()), !dbg !13170
  %22 = load i64, i64* %from_block_size.addr, align 8, !dbg !13171
  %23 = load i64, i64* %to_block_size.addr, align 8, !dbg !13172
  %div = udiv i64 %22, %23, !dbg !13173
  store i64 %div, i64* %multiplier, align 8, !dbg !13170
  %24 = load i64, i64* %n.addr, align 8, !dbg !13174
  %25 = load i64, i64* %multiplier, align 8, !dbg !13175
  %mul = mul i64 %24, %25, !dbg !13176
  store i64 %mul, i64* %amt, align 8, !dbg !13177
  %26 = load i64, i64* %amt, align 8, !dbg !13178
  %27 = load i64, i64* %multiplier, align 8, !dbg !13180
  %div19 = udiv i64 %26, %27, !dbg !13181
  %28 = load i64, i64* %n.addr, align 8, !dbg !13182
  %cmp20 = icmp eq i64 %div19, %28, !dbg !13183
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !13184

if.then21:                                        ; preds = %if.then18
  store i32 0, i32* %tenths, align 4, !dbg !13185
  store i32 0, i32* %rounding, align 4, !dbg !13187
  br label %use_integer_arithmetic, !dbg !13188

if.end22:                                         ; preds = %if.then18
  br label %if.end23, !dbg !13189

if.end23:                                         ; preds = %if.end22, %if.then16
  br label %if.end44, !dbg !13190

if.else:                                          ; preds = %if.end12
  %29 = load i64, i64* %from_block_size.addr, align 8, !dbg !13191
  %cmp24 = icmp ne i64 %29, 0, !dbg !13193
  br i1 %cmp24, label %land.lhs.true25, label %if.end43, !dbg !13194

land.lhs.true25:                                  ; preds = %if.else
  %30 = load i64, i64* %to_block_size.addr, align 8, !dbg !13195
  %31 = load i64, i64* %from_block_size.addr, align 8, !dbg !13196
  %rem26 = urem i64 %30, %31, !dbg !13197
  %cmp27 = icmp eq i64 %rem26, 0, !dbg !13198
  br i1 %cmp27, label %if.then28, label %if.end43, !dbg !13199

if.then28:                                        ; preds = %land.lhs.true25
  call void @llvm.dbg.declare(metadata i64* %divisor, metadata !13200, metadata !DIExpression()), !dbg !13202
  %32 = load i64, i64* %to_block_size.addr, align 8, !dbg !13203
  %33 = load i64, i64* %from_block_size.addr, align 8, !dbg !13204
  %div29 = udiv i64 %32, %33, !dbg !13205
  store i64 %div29, i64* %divisor, align 8, !dbg !13202
  call void @llvm.dbg.declare(metadata i64* %r10, metadata !13206, metadata !DIExpression()), !dbg !13207
  %34 = load i64, i64* %n.addr, align 8, !dbg !13208
  %35 = load i64, i64* %divisor, align 8, !dbg !13209
  %rem30 = urem i64 %34, %35, !dbg !13210
  %mul31 = mul i64 %rem30, 10, !dbg !13211
  store i64 %mul31, i64* %r10, align 8, !dbg !13207
  call void @llvm.dbg.declare(metadata i64* %r2, metadata !13212, metadata !DIExpression()), !dbg !13213
  %36 = load i64, i64* %r10, align 8, !dbg !13214
  %37 = load i64, i64* %divisor, align 8, !dbg !13215
  %rem32 = urem i64 %36, %37, !dbg !13216
  %mul33 = mul i64 %rem32, 2, !dbg !13217
  store i64 %mul33, i64* %r2, align 8, !dbg !13213
  %38 = load i64, i64* %n.addr, align 8, !dbg !13218
  %39 = load i64, i64* %divisor, align 8, !dbg !13219
  %div34 = udiv i64 %38, %39, !dbg !13220
  store i64 %div34, i64* %amt, align 8, !dbg !13221
  %40 = load i64, i64* %r10, align 8, !dbg !13222
  %41 = load i64, i64* %divisor, align 8, !dbg !13223
  %div35 = udiv i64 %40, %41, !dbg !13224
  %conv = trunc i64 %div35 to i32, !dbg !13222
  store i32 %conv, i32* %tenths, align 4, !dbg !13225
  %42 = load i64, i64* %r2, align 8, !dbg !13226
  %43 = load i64, i64* %divisor, align 8, !dbg !13227
  %cmp36 = icmp ult i64 %42, %43, !dbg !13228
  br i1 %cmp36, label %cond.true, label %cond.false, !dbg !13226

cond.true:                                        ; preds = %if.then28
  %44 = load i64, i64* %r2, align 8, !dbg !13229
  %cmp38 = icmp ult i64 0, %44, !dbg !13230
  %conv39 = zext i1 %cmp38 to i32, !dbg !13230
  br label %cond.end, !dbg !13226

cond.false:                                       ; preds = %if.then28
  %45 = load i64, i64* %divisor, align 8, !dbg !13231
  %46 = load i64, i64* %r2, align 8, !dbg !13232
  %cmp40 = icmp ult i64 %45, %46, !dbg !13233
  %conv41 = zext i1 %cmp40 to i32, !dbg !13233
  %add = add nsw i32 2, %conv41, !dbg !13234
  br label %cond.end, !dbg !13226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond42 = phi i32 [ %conv39, %cond.true ], [ %add, %cond.false ], !dbg !13226
  store i32 %cond42, i32* %rounding, align 4, !dbg !13235
  br label %use_integer_arithmetic, !dbg !13236

if.end43:                                         ; preds = %land.lhs.true25, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end23
  call void @llvm.dbg.declare(metadata x86_fp80* %dto_block_size, metadata !13237, metadata !DIExpression()), !dbg !13239
  %47 = load i64, i64* %to_block_size.addr, align 8, !dbg !13240
  %conv45 = uitofp i64 %47 to x86_fp80, !dbg !13240
  store x86_fp80 %conv45, x86_fp80* %dto_block_size, align 16, !dbg !13239
  call void @llvm.dbg.declare(metadata x86_fp80* %damt, metadata !13241, metadata !DIExpression()), !dbg !13242
  %48 = load i64, i64* %n.addr, align 8, !dbg !13243
  %conv46 = uitofp i64 %48 to x86_fp80, !dbg !13243
  %49 = load i64, i64* %from_block_size.addr, align 8, !dbg !13244
  %conv47 = uitofp i64 %49 to x86_fp80, !dbg !13244
  %50 = load x86_fp80, x86_fp80* %dto_block_size, align 16, !dbg !13245
  %div48 = fdiv x86_fp80 %conv47, %50, !dbg !13246
  %mul49 = fmul x86_fp80 %conv46, %div48, !dbg !13247
  store x86_fp80 %mul49, x86_fp80* %damt, align 16, !dbg !13242
  call void @llvm.dbg.declare(metadata i64* %buflen, metadata !13248, metadata !DIExpression()), !dbg !13249
  call void @llvm.dbg.declare(metadata i64* %nonintegerlen, metadata !13250, metadata !DIExpression()), !dbg !13251
  %51 = load i32, i32* %opts.addr, align 4, !dbg !13252
  %and50 = and i32 %51, 16, !dbg !13254
  %tobool51 = icmp ne i32 %and50, 0, !dbg !13254
  br i1 %tobool51, label %if.else56, label %if.then52, !dbg !13255

if.then52:                                        ; preds = %if.end44
  %52 = load i8*, i8** %buf.addr, align 8, !dbg !13256
  %53 = load i32, i32* %inexact_style, align 4, !dbg !13258
  %54 = load x86_fp80, x86_fp80* %damt, align 16, !dbg !13259
  %call53 = call x86_fp80 @adjust_value(i32 %53, x86_fp80 %54), !dbg !13260
  %call54 = call i32 (i8*, i8*, ...) @sprintf(i8* %52, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.332, i64 0, i64 0), x86_fp80 %call53) #13, !dbg !13261
  %55 = load i8*, i8** %buf.addr, align 8, !dbg !13262
  %call55 = call i64 @strlen(i8* %55) #16, !dbg !13263
  store i64 %call55, i64* %buflen, align 8, !dbg !13264
  store i64 0, i64* %nonintegerlen, align 8, !dbg !13265
  br label %if.end90, !dbg !13266

if.else56:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata x86_fp80* %e, metadata !13267, metadata !DIExpression()), !dbg !13269
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %e, align 16, !dbg !13269
  store i32 0, i32* %exponent, align 4, !dbg !13270
  br label %do.body, !dbg !13271

do.body:                                          ; preds = %land.end, %if.else56
  %56 = load i32, i32* %base, align 4, !dbg !13272
  %conv57 = uitofp i32 %56 to x86_fp80, !dbg !13272
  %57 = load x86_fp80, x86_fp80* %e, align 16, !dbg !13274
  %mul58 = fmul x86_fp80 %57, %conv57, !dbg !13274
  store x86_fp80 %mul58, x86_fp80* %e, align 16, !dbg !13274
  %58 = load i32, i32* %exponent, align 4, !dbg !13275
  %inc = add nsw i32 %58, 1, !dbg !13275
  store i32 %inc, i32* %exponent, align 4, !dbg !13275
  br label %do.cond, !dbg !13276

do.cond:                                          ; preds = %do.body
  %59 = load x86_fp80, x86_fp80* %e, align 16, !dbg !13277
  %60 = load i32, i32* %base, align 4, !dbg !13278
  %conv59 = uitofp i32 %60 to x86_fp80, !dbg !13278
  %mul60 = fmul x86_fp80 %59, %conv59, !dbg !13279
  %61 = load x86_fp80, x86_fp80* %damt, align 16, !dbg !13280
  %cmp61 = fcmp ole x86_fp80 %mul60, %61, !dbg !13281
  br i1 %cmp61, label %land.rhs, label %land.end, !dbg !13282

land.rhs:                                         ; preds = %do.cond
  %62 = load i32, i32* %exponent, align 4, !dbg !13283
  %63 = load i32, i32* %exponent_max, align 4, !dbg !13284
  %cmp63 = icmp slt i32 %62, %63, !dbg !13285
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %64 = phi i1 [ false, %do.cond ], [ %cmp63, %land.rhs ], !dbg !13286
  br i1 %64, label %do.body, label %do.end, !dbg !13276, !llvm.loop !13287

do.end:                                           ; preds = %land.end
  %65 = load x86_fp80, x86_fp80* %e, align 16, !dbg !13289
  %66 = load x86_fp80, x86_fp80* %damt, align 16, !dbg !13290
  %div65 = fdiv x86_fp80 %66, %65, !dbg !13290
  store x86_fp80 %div65, x86_fp80* %damt, align 16, !dbg !13290
  %67 = load i8*, i8** %buf.addr, align 8, !dbg !13291
  %68 = load i32, i32* %inexact_style, align 4, !dbg !13292
  %69 = load x86_fp80, x86_fp80* %damt, align 16, !dbg !13293
  %call66 = call x86_fp80 @adjust_value(i32 %68, x86_fp80 %69), !dbg !13294
  %call67 = call i32 (i8*, i8*, ...) @sprintf(i8* %67, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.333, i64 0, i64 0), x86_fp80 %call66) #13, !dbg !13295
  %70 = load i8*, i8** %buf.addr, align 8, !dbg !13296
  %call68 = call i64 @strlen(i8* %70) #16, !dbg !13297
  store i64 %call68, i64* %buflen, align 8, !dbg !13298
  %71 = load i64, i64* %decimal_pointlen, align 8, !dbg !13299
  %add69 = add i64 %71, 1, !dbg !13300
  store i64 %add69, i64* %nonintegerlen, align 8, !dbg !13301
  %72 = load i64, i64* %nonintegerlen, align 8, !dbg !13302
  %add70 = add i64 1, %72, !dbg !13304
  %73 = load i32, i32* %opts.addr, align 4, !dbg !13305
  %and71 = and i32 %73, 32, !dbg !13306
  %tobool72 = icmp ne i32 %and71, 0, !dbg !13307
  %lnot = xor i1 %tobool72, true, !dbg !13307
  %lnot.ext = zext i1 %lnot to i32, !dbg !13307
  %conv73 = sext i32 %lnot.ext to i64, !dbg !13307
  %add74 = add i64 %add70, %conv73, !dbg !13308
  %74 = load i64, i64* %buflen, align 8, !dbg !13309
  %cmp75 = icmp ult i64 %add74, %74, !dbg !13310
  br i1 %cmp75, label %if.then83, label %lor.lhs.false, !dbg !13311

lor.lhs.false:                                    ; preds = %do.end
  %75 = load i32, i32* %opts.addr, align 4, !dbg !13312
  %and77 = and i32 %75, 8, !dbg !13313
  %tobool78 = icmp ne i32 %and77, 0, !dbg !13313
  br i1 %tobool78, label %land.lhs.true79, label %if.end89, !dbg !13314

land.lhs.true79:                                  ; preds = %lor.lhs.false
  %76 = load i8*, i8** %buf.addr, align 8, !dbg !13315
  %77 = load i64, i64* %buflen, align 8, !dbg !13316
  %sub = sub i64 %77, 1, !dbg !13317
  %arrayidx = getelementptr inbounds i8, i8* %76, i64 %sub, !dbg !13315, !ctir !143
  %78 = load i8, i8* %arrayidx, align 1, !dbg !13315
  %conv80 = sext i8 %78 to i32, !dbg !13315
  %cmp81 = icmp eq i32 %conv80, 48, !dbg !13318
  br i1 %cmp81, label %if.then83, label %if.end89, !dbg !13319

if.then83:                                        ; preds = %land.lhs.true79, %do.end
  %79 = load i8*, i8** %buf.addr, align 8, !dbg !13320
  %80 = load i32, i32* %inexact_style, align 4, !dbg !13322
  %81 = load x86_fp80, x86_fp80* %damt, align 16, !dbg !13323
  %mul84 = fmul x86_fp80 %81, 0xK4002A000000000000000, !dbg !13324
  %call85 = call x86_fp80 @adjust_value(i32 %80, x86_fp80 %mul84), !dbg !13325
  %div86 = fdiv x86_fp80 %call85, 0xK4002A000000000000000, !dbg !13326
  %call87 = call i32 (i8*, i8*, ...) @sprintf(i8* %79, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.332, i64 0, i64 0), x86_fp80 %div86) #13, !dbg !13327
  %82 = load i8*, i8** %buf.addr, align 8, !dbg !13328
  %call88 = call i64 @strlen(i8* %82) #16, !dbg !13329
  store i64 %call88, i64* %buflen, align 8, !dbg !13330
  store i64 0, i64* %nonintegerlen, align 8, !dbg !13331
  br label %if.end89, !dbg !13332

if.end89:                                         ; preds = %if.then83, %land.lhs.true79, %lor.lhs.false
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then52
  %83 = load i8*, i8** %psuffix, align 8, !dbg !13333
  %84 = load i64, i64* %buflen, align 8, !dbg !13334
  %idx.neg = sub i64 0, %84, !dbg !13335
  %add.ptr91 = getelementptr inbounds i8, i8* %83, i64 %idx.neg, !dbg !13335, !ctir !144
  store i8* %add.ptr91, i8** %p, align 8, !dbg !13336
  %85 = load i8*, i8** %p, align 8, !dbg !13337
  %86 = load i8*, i8** %buf.addr, align 8, !dbg !13338
  %87 = load i64, i64* %buflen, align 8, !dbg !13339
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %86, i64 %87, i1 false), !dbg !13340
  %88 = load i8*, i8** %p, align 8, !dbg !13341
  %89 = load i64, i64* %buflen, align 8, !dbg !13342
  %add.ptr92 = getelementptr inbounds i8, i8* %88, i64 %89, !dbg !13343, !ctir !144
  %90 = load i64, i64* %nonintegerlen, align 8, !dbg !13344
  %idx.neg93 = sub i64 0, %90, !dbg !13345
  %add.ptr94 = getelementptr inbounds i8, i8* %add.ptr92, i64 %idx.neg93, !dbg !13345, !ctir !144
  store i8* %add.ptr94, i8** %integerlim, align 8, !dbg !13346
  br label %do_grouping, !dbg !13347

use_integer_arithmetic:                           ; preds = %cond.end, %if.then21
  call void @llvm.dbg.label(metadata !13348), !dbg !13349
  %91 = load i32, i32* %opts.addr, align 4, !dbg !13350
  %and95 = and i32 %91, 16, !dbg !13353
  %tobool96 = icmp ne i32 %and95, 0, !dbg !13353
  br i1 %tobool96, label %if.then97, label %if.end179, !dbg !13354

if.then97:                                        ; preds = %use_integer_arithmetic
  store i32 0, i32* %exponent, align 4, !dbg !13355
  %92 = load i32, i32* %base, align 4, !dbg !13357
  %conv98 = zext i32 %92 to i64, !dbg !13357
  %93 = load i64, i64* %amt, align 8, !dbg !13359
  %cmp99 = icmp ule i64 %conv98, %93, !dbg !13360
  br i1 %cmp99, label %if.then101, label %if.end178, !dbg !13361

if.then101:                                       ; preds = %if.then97
  br label %do.body102, !dbg !13362

do.body102:                                       ; preds = %land.end138, %if.then101
  call void @llvm.dbg.declare(metadata i32* %r10103, metadata !13364, metadata !DIExpression()), !dbg !13366
  %94 = load i64, i64* %amt, align 8, !dbg !13367
  %95 = load i32, i32* %base, align 4, !dbg !13368
  %conv104 = zext i32 %95 to i64, !dbg !13368
  %rem105 = urem i64 %94, %conv104, !dbg !13369
  %mul106 = mul i64 %rem105, 10, !dbg !13370
  %96 = load i32, i32* %tenths, align 4, !dbg !13371
  %conv107 = sext i32 %96 to i64, !dbg !13371
  %add108 = add i64 %mul106, %conv107, !dbg !13372
  %conv109 = trunc i64 %add108 to i32, !dbg !13373
  store i32 %conv109, i32* %r10103, align 4, !dbg !13366
  call void @llvm.dbg.declare(metadata i32* %r2110, metadata !13374, metadata !DIExpression()), !dbg !13375
  %97 = load i32, i32* %r10103, align 4, !dbg !13376
  %98 = load i32, i32* %base, align 4, !dbg !13377
  %rem111 = urem i32 %97, %98, !dbg !13378
  %mul112 = mul i32 %rem111, 2, !dbg !13379
  %99 = load i32, i32* %rounding, align 4, !dbg !13380
  %shr = ashr i32 %99, 1, !dbg !13381
  %add113 = add i32 %mul112, %shr, !dbg !13382
  store i32 %add113, i32* %r2110, align 4, !dbg !13375
  %100 = load i32, i32* %base, align 4, !dbg !13383
  %conv114 = zext i32 %100 to i64, !dbg !13383
  %101 = load i64, i64* %amt, align 8, !dbg !13384
  %div115 = udiv i64 %101, %conv114, !dbg !13384
  store i64 %div115, i64* %amt, align 8, !dbg !13384
  %102 = load i32, i32* %r10103, align 4, !dbg !13385
  %103 = load i32, i32* %base, align 4, !dbg !13386
  %div116 = udiv i32 %102, %103, !dbg !13387
  store i32 %div116, i32* %tenths, align 4, !dbg !13388
  %104 = load i32, i32* %r2110, align 4, !dbg !13389
  %105 = load i32, i32* %base, align 4, !dbg !13390
  %cmp117 = icmp ult i32 %104, %105, !dbg !13391
  br i1 %cmp117, label %cond.true119, label %cond.false123, !dbg !13389

cond.true119:                                     ; preds = %do.body102
  %106 = load i32, i32* %r2110, align 4, !dbg !13392
  %107 = load i32, i32* %rounding, align 4, !dbg !13393
  %add120 = add i32 %106, %107, !dbg !13394
  %cmp121 = icmp ne i32 %add120, 0, !dbg !13395
  %conv122 = zext i1 %cmp121 to i32, !dbg !13395
  br label %cond.end128, !dbg !13389

cond.false123:                                    ; preds = %do.body102
  %108 = load i32, i32* %base, align 4, !dbg !13396
  %109 = load i32, i32* %r2110, align 4, !dbg !13397
  %110 = load i32, i32* %rounding, align 4, !dbg !13398
  %add124 = add i32 %109, %110, !dbg !13399
  %cmp125 = icmp ult i32 %108, %add124, !dbg !13400
  %conv126 = zext i1 %cmp125 to i32, !dbg !13400
  %add127 = add nsw i32 2, %conv126, !dbg !13401
  br label %cond.end128, !dbg !13389

cond.end128:                                      ; preds = %cond.false123, %cond.true119
  %cond129 = phi i32 [ %conv122, %cond.true119 ], [ %add127, %cond.false123 ], !dbg !13389
  store i32 %cond129, i32* %rounding, align 4, !dbg !13402
  %111 = load i32, i32* %exponent, align 4, !dbg !13403
  %inc130 = add nsw i32 %111, 1, !dbg !13403
  store i32 %inc130, i32* %exponent, align 4, !dbg !13403
  br label %do.cond131, !dbg !13404

do.cond131:                                       ; preds = %cond.end128
  %112 = load i32, i32* %base, align 4, !dbg !13405
  %conv132 = zext i32 %112 to i64, !dbg !13405
  %113 = load i64, i64* %amt, align 8, !dbg !13406
  %cmp133 = icmp ule i64 %conv132, %113, !dbg !13407
  br i1 %cmp133, label %land.rhs135, label %land.end138, !dbg !13408

land.rhs135:                                      ; preds = %do.cond131
  %114 = load i32, i32* %exponent, align 4, !dbg !13409
  %115 = load i32, i32* %exponent_max, align 4, !dbg !13410
  %cmp136 = icmp slt i32 %114, %115, !dbg !13411
  br label %land.end138

land.end138:                                      ; preds = %land.rhs135, %do.cond131
  %116 = phi i1 [ false, %do.cond131 ], [ %cmp136, %land.rhs135 ], !dbg !13412
  br i1 %116, label %do.body102, label %do.end139, !dbg !13404, !llvm.loop !13413

do.end139:                                        ; preds = %land.end138
  %117 = load i64, i64* %amt, align 8, !dbg !13415
  %cmp140 = icmp ult i64 %117, 10, !dbg !13417
  br i1 %cmp140, label %if.then142, label %if.end177, !dbg !13418

if.then142:                                       ; preds = %do.end139
  %118 = load i32, i32* %inexact_style, align 4, !dbg !13419
  %cmp143 = icmp eq i32 %118, 1, !dbg !13422
  br i1 %cmp143, label %cond.true145, label %cond.false150, !dbg !13423

cond.true145:                                     ; preds = %if.then142
  %119 = load i32, i32* %rounding, align 4, !dbg !13424
  %120 = load i32, i32* %tenths, align 4, !dbg !13425
  %and146 = and i32 %120, 1, !dbg !13426
  %add147 = add nsw i32 %119, %and146, !dbg !13427
  %cmp148 = icmp slt i32 2, %add147, !dbg !13428
  br i1 %cmp148, label %if.then156, label %if.end163, !dbg !13419

cond.false150:                                    ; preds = %if.then142
  %121 = load i32, i32* %inexact_style, align 4, !dbg !13429
  %cmp151 = icmp eq i32 %121, 0, !dbg !13430
  br i1 %cmp151, label %land.lhs.true153, label %if.end163, !dbg !13431

land.lhs.true153:                                 ; preds = %cond.false150
  %122 = load i32, i32* %rounding, align 4, !dbg !13432
  %cmp154 = icmp slt i32 0, %122, !dbg !13433
  br i1 %cmp154, label %if.then156, label %if.end163, !dbg !13423

if.then156:                                       ; preds = %land.lhs.true153, %cond.true145
  %123 = load i32, i32* %tenths, align 4, !dbg !13434
  %inc157 = add nsw i32 %123, 1, !dbg !13434
  store i32 %inc157, i32* %tenths, align 4, !dbg !13434
  store i32 0, i32* %rounding, align 4, !dbg !13436
  %124 = load i32, i32* %tenths, align 4, !dbg !13437
  %cmp158 = icmp eq i32 %124, 10, !dbg !13439
  br i1 %cmp158, label %if.then160, label %if.end162, !dbg !13440

if.then160:                                       ; preds = %if.then156
  %125 = load i64, i64* %amt, align 8, !dbg !13441
  %inc161 = add i64 %125, 1, !dbg !13441
  store i64 %inc161, i64* %amt, align 8, !dbg !13441
  store i32 0, i32* %tenths, align 4, !dbg !13443
  br label %if.end162, !dbg !13444

if.end162:                                        ; preds = %if.then160, %if.then156
  br label %if.end163, !dbg !13445

if.end163:                                        ; preds = %if.end162, %land.lhs.true153, %cond.false150, %cond.true145
  %126 = load i64, i64* %amt, align 8, !dbg !13446
  %cmp164 = icmp ult i64 %126, 10, !dbg !13448
  br i1 %cmp164, label %land.lhs.true166, label %if.end176, !dbg !13449

land.lhs.true166:                                 ; preds = %if.end163
  %127 = load i32, i32* %tenths, align 4, !dbg !13450
  %tobool167 = icmp ne i32 %127, 0, !dbg !13450
  br i1 %tobool167, label %if.then171, label %lor.lhs.false168, !dbg !13451

lor.lhs.false168:                                 ; preds = %land.lhs.true166
  %128 = load i32, i32* %opts.addr, align 4, !dbg !13452
  %and169 = and i32 %128, 8, !dbg !13453
  %tobool170 = icmp ne i32 %and169, 0, !dbg !13453
  br i1 %tobool170, label %if.end176, label %if.then171, !dbg !13454

if.then171:                                       ; preds = %lor.lhs.false168, %land.lhs.true166
  %129 = load i32, i32* %tenths, align 4, !dbg !13455
  %add172 = add nsw i32 48, %129, !dbg !13457
  %conv173 = trunc i32 %add172 to i8, !dbg !13458
  %130 = load i8*, i8** %p, align 8, !dbg !13459
  %incdec.ptr = getelementptr inbounds i8, i8* %130, i32 -1, !dbg !13459, !ctir !144
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !13459
  store i8 %conv173, i8* %incdec.ptr, align 1, !dbg !13460, !ctir !144
  %131 = load i64, i64* %decimal_pointlen, align 8, !dbg !13461
  %132 = load i8*, i8** %p, align 8, !dbg !13462
  %idx.neg174 = sub i64 0, %131, !dbg !13462
  %add.ptr175 = getelementptr inbounds i8, i8* %132, i64 %idx.neg174, !dbg !13462, !ctir !144
  store i8* %add.ptr175, i8** %p, align 8, !dbg !13462
  %133 = load i8*, i8** %p, align 8, !dbg !13463
  %134 = load i8*, i8** %decimal_point, align 8, !dbg !13464
  %135 = load i64, i64* %decimal_pointlen, align 8, !dbg !13465
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* align 1 %134, i64 %135, i1 false), !dbg !13466
  store i32 0, i32* %rounding, align 4, !dbg !13467
  store i32 0, i32* %tenths, align 4, !dbg !13468
  br label %if.end176, !dbg !13469

if.end176:                                        ; preds = %if.then171, %lor.lhs.false168, %if.end163
  br label %if.end177, !dbg !13470

if.end177:                                        ; preds = %if.end176, %do.end139
  br label %if.end178, !dbg !13471

if.end178:                                        ; preds = %if.end177, %if.then97
  br label %if.end179, !dbg !13472

if.end179:                                        ; preds = %if.end178, %use_integer_arithmetic
  %136 = load i32, i32* %inexact_style, align 4, !dbg !13473
  %cmp180 = icmp eq i32 %136, 1, !dbg !13475
  br i1 %cmp180, label %cond.true182, label %cond.false191, !dbg !13476

cond.true182:                                     ; preds = %if.end179
  %137 = load i32, i32* %tenths, align 4, !dbg !13477
  %138 = load i32, i32* %rounding, align 4, !dbg !13478
  %conv183 = sext i32 %138 to i64, !dbg !13478
  %139 = load i64, i64* %amt, align 8, !dbg !13479
  %and184 = and i64 %139, 1, !dbg !13480
  %add185 = add i64 %conv183, %and184, !dbg !13481
  %cmp186 = icmp ult i64 0, %add185, !dbg !13482
  %conv187 = zext i1 %cmp186 to i32, !dbg !13482
  %add188 = add nsw i32 %137, %conv187, !dbg !13483
  %cmp189 = icmp slt i32 5, %add188, !dbg !13484
  br i1 %cmp189, label %if.then198, label %if.end219, !dbg !13473

cond.false191:                                    ; preds = %if.end179
  %140 = load i32, i32* %inexact_style, align 4, !dbg !13485
  %cmp192 = icmp eq i32 %140, 0, !dbg !13486
  br i1 %cmp192, label %land.lhs.true194, label %if.end219, !dbg !13487

land.lhs.true194:                                 ; preds = %cond.false191
  %141 = load i32, i32* %tenths, align 4, !dbg !13488
  %142 = load i32, i32* %rounding, align 4, !dbg !13489
  %add195 = add nsw i32 %141, %142, !dbg !13490
  %cmp196 = icmp slt i32 0, %add195, !dbg !13491
  br i1 %cmp196, label %if.then198, label %if.end219, !dbg !13476

if.then198:                                       ; preds = %land.lhs.true194, %cond.true182
  %143 = load i64, i64* %amt, align 8, !dbg !13492
  %inc199 = add i64 %143, 1, !dbg !13492
  store i64 %inc199, i64* %amt, align 8, !dbg !13492
  %144 = load i32, i32* %opts.addr, align 4, !dbg !13494
  %and200 = and i32 %144, 16, !dbg !13496
  %tobool201 = icmp ne i32 %and200, 0, !dbg !13496
  br i1 %tobool201, label %land.lhs.true202, label %if.end218, !dbg !13497

land.lhs.true202:                                 ; preds = %if.then198
  %145 = load i64, i64* %amt, align 8, !dbg !13498
  %146 = load i32, i32* %base, align 4, !dbg !13499
  %conv203 = zext i32 %146 to i64, !dbg !13499
  %cmp204 = icmp eq i64 %145, %conv203, !dbg !13500
  br i1 %cmp204, label %land.lhs.true206, label %if.end218, !dbg !13501

land.lhs.true206:                                 ; preds = %land.lhs.true202
  %147 = load i32, i32* %exponent, align 4, !dbg !13502
  %148 = load i32, i32* %exponent_max, align 4, !dbg !13503
  %cmp207 = icmp slt i32 %147, %148, !dbg !13504
  br i1 %cmp207, label %if.then209, label %if.end218, !dbg !13505

if.then209:                                       ; preds = %land.lhs.true206
  %149 = load i32, i32* %exponent, align 4, !dbg !13506
  %inc210 = add nsw i32 %149, 1, !dbg !13506
  store i32 %inc210, i32* %exponent, align 4, !dbg !13506
  %150 = load i32, i32* %opts.addr, align 4, !dbg !13508
  %and211 = and i32 %150, 8, !dbg !13510
  %tobool212 = icmp ne i32 %and211, 0, !dbg !13510
  br i1 %tobool212, label %if.end217, label %if.then213, !dbg !13511

if.then213:                                       ; preds = %if.then209
  %151 = load i8*, i8** %p, align 8, !dbg !13512
  %incdec.ptr214 = getelementptr inbounds i8, i8* %151, i32 -1, !dbg !13512, !ctir !144
  store i8* %incdec.ptr214, i8** %p, align 8, !dbg !13512
  store i8 48, i8* %incdec.ptr214, align 1, !dbg !13514, !ctir !144
  %152 = load i64, i64* %decimal_pointlen, align 8, !dbg !13515
  %153 = load i8*, i8** %p, align 8, !dbg !13516
  %idx.neg215 = sub i64 0, %152, !dbg !13516
  %add.ptr216 = getelementptr inbounds i8, i8* %153, i64 %idx.neg215, !dbg !13516, !ctir !144
  store i8* %add.ptr216, i8** %p, align 8, !dbg !13516
  %154 = load i8*, i8** %p, align 8, !dbg !13517
  %155 = load i8*, i8** %decimal_point, align 8, !dbg !13518
  %156 = load i64, i64* %decimal_pointlen, align 8, !dbg !13519
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %154, i8* align 1 %155, i64 %156, i1 false), !dbg !13520
  br label %if.end217, !dbg !13521

if.end217:                                        ; preds = %if.then213, %if.then209
  store i64 1, i64* %amt, align 8, !dbg !13522
  br label %if.end218, !dbg !13523

if.end218:                                        ; preds = %if.end217, %land.lhs.true206, %land.lhs.true202, %if.then198
  br label %if.end219, !dbg !13524

if.end219:                                        ; preds = %if.end218, %land.lhs.true194, %cond.false191, %cond.true182
  %157 = load i8*, i8** %p, align 8, !dbg !13525
  store i8* %157, i8** %integerlim, align 8, !dbg !13526
  br label %do.body220, !dbg !13527

do.body220:                                       ; preds = %do.cond226, %if.end219
  call void @llvm.dbg.declare(metadata i32* %digit, metadata !13528, metadata !DIExpression()), !dbg !13530
  %158 = load i64, i64* %amt, align 8, !dbg !13531
  %rem221 = urem i64 %158, 10, !dbg !13532
  %conv222 = trunc i64 %rem221 to i32, !dbg !13531
  store i32 %conv222, i32* %digit, align 4, !dbg !13530
  %159 = load i32, i32* %digit, align 4, !dbg !13533
  %add223 = add nsw i32 %159, 48, !dbg !13534
  %conv224 = trunc i32 %add223 to i8, !dbg !13533
  %160 = load i8*, i8** %p, align 8, !dbg !13535
  %incdec.ptr225 = getelementptr inbounds i8, i8* %160, i32 -1, !dbg !13535, !ctir !144
  store i8* %incdec.ptr225, i8** %p, align 8, !dbg !13535
  store i8 %conv224, i8* %incdec.ptr225, align 1, !dbg !13536, !ctir !144
  br label %do.cond226, !dbg !13537

do.cond226:                                       ; preds = %do.body220
  %161 = load i64, i64* %amt, align 8, !dbg !13538
  %div227 = udiv i64 %161, 10, !dbg !13538
  store i64 %div227, i64* %amt, align 8, !dbg !13538
  %cmp228 = icmp ne i64 %div227, 0, !dbg !13539
  br i1 %cmp228, label %do.body220, label %do.end230, !dbg !13537, !llvm.loop !13540

do.end230:                                        ; preds = %do.cond226
  br label %do_grouping, !dbg !13542

do_grouping:                                      ; preds = %do.end230, %if.end90
  call void @llvm.dbg.label(metadata !13543), !dbg !13544
  %162 = load i32, i32* %opts.addr, align 4, !dbg !13545
  %and231 = and i32 %162, 4, !dbg !13547
  %tobool232 = icmp ne i32 %and231, 0, !dbg !13547
  br i1 %tobool232, label %if.then233, label %if.end235, !dbg !13548

if.then233:                                       ; preds = %do_grouping
  %163 = load i8*, i8** %p, align 8, !dbg !13549
  %164 = load i8*, i8** %integerlim, align 8, !dbg !13550
  %165 = load i8*, i8** %p, align 8, !dbg !13551
  %sub.ptr.lhs.cast = ptrtoint i8* %164 to i64, !dbg !13552
  %sub.ptr.rhs.cast = ptrtoint i8* %165 to i64, !dbg !13552
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !13552
  %166 = load i8*, i8** %grouping, align 8, !dbg !13553
  %167 = load i8*, i8** %thousands_sep, align 8, !dbg !13554
  %call234 = call i8* @group_number(i8* %163, i64 %sub.ptr.sub, i8* %166, i8* %167), !dbg !13555
  store i8* %call234, i8** %p, align 8, !dbg !13556
  br label %if.end235, !dbg !13557

if.end235:                                        ; preds = %if.then233, %do_grouping
  %168 = load i32, i32* %opts.addr, align 4, !dbg !13558
  %and236 = and i32 %168, 128, !dbg !13560
  %tobool237 = icmp ne i32 %and236, 0, !dbg !13560
  br i1 %tobool237, label %if.then238, label %if.end288, !dbg !13561

if.then238:                                       ; preds = %if.end235
  %169 = load i32, i32* %exponent, align 4, !dbg !13562
  %cmp239 = icmp slt i32 %169, 0, !dbg !13565
  br i1 %cmp239, label %if.then241, label %if.end251, !dbg !13566

if.then241:                                       ; preds = %if.then238
  call void @llvm.dbg.declare(metadata i64* %power, metadata !13567, metadata !DIExpression()), !dbg !13569
  store i32 0, i32* %exponent, align 4, !dbg !13570
  store i64 1, i64* %power, align 8, !dbg !13571
  br label %for.cond, !dbg !13573

for.cond:                                         ; preds = %for.inc, %if.then241
  %170 = load i64, i64* %power, align 8, !dbg !13574
  %171 = load i64, i64* %to_block_size.addr, align 8, !dbg !13576
  %cmp242 = icmp ult i64 %170, %171, !dbg !13577
  br i1 %cmp242, label %for.body, label %for.end, !dbg !13578

for.body:                                         ; preds = %for.cond
  %172 = load i32, i32* %exponent, align 4, !dbg !13579
  %inc244 = add nsw i32 %172, 1, !dbg !13579
  store i32 %inc244, i32* %exponent, align 4, !dbg !13579
  %173 = load i32, i32* %exponent_max, align 4, !dbg !13581
  %cmp245 = icmp eq i32 %inc244, %173, !dbg !13582
  br i1 %cmp245, label %if.then247, label %if.end248, !dbg !13583

if.then247:                                       ; preds = %for.body
  br label %for.end, !dbg !13584

if.end248:                                        ; preds = %for.body
  br label %for.inc, !dbg !13581

for.inc:                                          ; preds = %if.end248
  %174 = load i32, i32* %base, align 4, !dbg !13585
  %conv249 = zext i32 %174 to i64, !dbg !13585
  %175 = load i64, i64* %power, align 8, !dbg !13586
  %mul250 = mul i64 %175, %conv249, !dbg !13586
  store i64 %mul250, i64* %power, align 8, !dbg !13586
  br label %for.cond, !dbg !13587, !llvm.loop !13588

for.end:                                          ; preds = %if.then247, %for.cond
  br label %if.end251, !dbg !13590

if.end251:                                        ; preds = %for.end, %if.then238
  %176 = load i32, i32* %exponent, align 4, !dbg !13591
  %177 = load i32, i32* %opts.addr, align 4, !dbg !13593
  %and252 = and i32 %177, 256, !dbg !13594
  %or = or i32 %176, %and252, !dbg !13595
  %tobool253 = icmp ne i32 %or, 0, !dbg !13595
  br i1 %tobool253, label %land.lhs.true254, label %if.end259, !dbg !13596

land.lhs.true254:                                 ; preds = %if.end251
  %178 = load i32, i32* %opts.addr, align 4, !dbg !13597
  %and255 = and i32 %178, 64, !dbg !13598
  %tobool256 = icmp ne i32 %and255, 0, !dbg !13598
  br i1 %tobool256, label %if.then257, label %if.end259, !dbg !13599

if.then257:                                       ; preds = %land.lhs.true254
  %179 = load i8*, i8** %psuffix, align 8, !dbg !13600
  %incdec.ptr258 = getelementptr inbounds i8, i8* %179, i32 1, !dbg !13600, !ctir !144
  store i8* %incdec.ptr258, i8** %psuffix, align 8, !dbg !13600
  store i8 32, i8* %179, align 1, !dbg !13601, !ctir !144
  br label %if.end259, !dbg !13602

if.end259:                                        ; preds = %if.then257, %land.lhs.true254, %if.end251
  %180 = load i32, i32* %exponent, align 4, !dbg !13603
  %tobool260 = icmp ne i32 %180, 0, !dbg !13603
  br i1 %tobool260, label %if.then261, label %if.end275, !dbg !13605

if.then261:                                       ; preds = %if.end259
  %181 = load i32, i32* %opts.addr, align 4, !dbg !13606
  %and262 = and i32 %181, 32, !dbg !13607
  %tobool263 = icmp ne i32 %and262, 0, !dbg !13607
  br i1 %tobool263, label %cond.false268, label %land.lhs.true264, !dbg !13608

land.lhs.true264:                                 ; preds = %if.then261
  %182 = load i32, i32* %exponent, align 4, !dbg !13609
  %cmp265 = icmp eq i32 %182, 1, !dbg !13610
  br i1 %cmp265, label %cond.true267, label %cond.false268, !dbg !13611

cond.true267:                                     ; preds = %land.lhs.true264
  br label %cond.end271, !dbg !13611

cond.false268:                                    ; preds = %land.lhs.true264, %if.then261
  %183 = load i32, i32* %exponent, align 4, !dbg !13612
  %idxprom = sext i32 %183 to i64, !dbg !13613
  %arrayidx269 = getelementptr inbounds [9 x i8], [9 x i8]* @power_letter, i64 0, i64 %idxprom, !dbg !13613, !ctir !1275
  %184 = load i8, i8* %arrayidx269, align 1, !dbg !13613
  %conv270 = sext i8 %184 to i32, !dbg !13613
  br label %cond.end271, !dbg !13611

cond.end271:                                      ; preds = %cond.false268, %cond.true267
  %cond272 = phi i32 [ 107, %cond.true267 ], [ %conv270, %cond.false268 ], !dbg !13611
  %conv273 = trunc i32 %cond272 to i8, !dbg !13614
  %185 = load i8*, i8** %psuffix, align 8, !dbg !13615
  %incdec.ptr274 = getelementptr inbounds i8, i8* %185, i32 1, !dbg !13615, !ctir !144
  store i8* %incdec.ptr274, i8** %psuffix, align 8, !dbg !13615
  store i8 %conv273, i8* %185, align 1, !dbg !13616, !ctir !144
  br label %if.end275, !dbg !13617

if.end275:                                        ; preds = %cond.end271, %if.end259
  %186 = load i32, i32* %opts.addr, align 4, !dbg !13618
  %and276 = and i32 %186, 256, !dbg !13620
  %tobool277 = icmp ne i32 %and276, 0, !dbg !13620
  br i1 %tobool277, label %if.then278, label %if.end287, !dbg !13621

if.then278:                                       ; preds = %if.end275
  %187 = load i32, i32* %opts.addr, align 4, !dbg !13622
  %and279 = and i32 %187, 32, !dbg !13625
  %tobool280 = icmp ne i32 %and279, 0, !dbg !13625
  br i1 %tobool280, label %land.lhs.true281, label %if.end285, !dbg !13626

land.lhs.true281:                                 ; preds = %if.then278
  %188 = load i32, i32* %exponent, align 4, !dbg !13627
  %tobool282 = icmp ne i32 %188, 0, !dbg !13627
  br i1 %tobool282, label %if.then283, label %if.end285, !dbg !13628

if.then283:                                       ; preds = %land.lhs.true281
  %189 = load i8*, i8** %psuffix, align 8, !dbg !13629
  %incdec.ptr284 = getelementptr inbounds i8, i8* %189, i32 1, !dbg !13629, !ctir !144
  store i8* %incdec.ptr284, i8** %psuffix, align 8, !dbg !13629
  store i8 105, i8* %189, align 1, !dbg !13630, !ctir !144
  br label %if.end285, !dbg !13631

if.end285:                                        ; preds = %if.then283, %land.lhs.true281, %if.then278
  %190 = load i8*, i8** %psuffix, align 8, !dbg !13632
  %incdec.ptr286 = getelementptr inbounds i8, i8* %190, i32 1, !dbg !13632, !ctir !144
  store i8* %incdec.ptr286, i8** %psuffix, align 8, !dbg !13632
  store i8 66, i8* %190, align 1, !dbg !13633, !ctir !144
  br label %if.end287, !dbg !13634

if.end287:                                        ; preds = %if.end285, %if.end275
  br label %if.end288, !dbg !13635

if.end288:                                        ; preds = %if.end287, %if.end235
  %191 = load i8*, i8** %psuffix, align 8, !dbg !13636
  store i8 0, i8* %191, align 1, !dbg !13637, !ctir !144
  %192 = load i8*, i8** %p, align 8, !dbg !13638
  ret i8* %192, !dbg !13639
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal x86_fp80 @adjust_value(i32 %inexact_style, x86_fp80 %value) #0 !dbg !13640 {
entry:
  %inexact_style.addr = alloca i32, align 4
  %value.addr = alloca x86_fp80, align 16
  %u = alloca i64, align 8, !ctir !168
  store i32 %inexact_style, i32* %inexact_style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %inexact_style.addr, metadata !13643, metadata !DIExpression()), !dbg !13644
  store x86_fp80 %value, x86_fp80* %value.addr, align 16
  call void @llvm.dbg.declare(metadata x86_fp80* %value.addr, metadata !13645, metadata !DIExpression()), !dbg !13646
  %0 = load i32, i32* %inexact_style.addr, align 4, !dbg !13647
  %cmp = icmp ne i32 %0, 1, !dbg !13649
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13650

land.lhs.true:                                    ; preds = %entry
  %1 = load x86_fp80, x86_fp80* %value.addr, align 16, !dbg !13651
  %cmp1 = fcmp olt x86_fp80 %1, 0xK403EFFFFFFFFFFFFFFFF, !dbg !13652
  br i1 %cmp1, label %if.then, label %if.end, !dbg !13653

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %u, metadata !13654, metadata !DIExpression()), !dbg !13656
  %2 = load x86_fp80, x86_fp80* %value.addr, align 16, !dbg !13657
  %conv = fptoui x86_fp80 %2 to i64, !dbg !13657
  store i64 %conv, i64* %u, align 8, !dbg !13656
  %3 = load i64, i64* %u, align 8, !dbg !13658
  %4 = load i32, i32* %inexact_style.addr, align 4, !dbg !13659
  %cmp2 = icmp eq i32 %4, 0, !dbg !13660
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !13661

land.rhs:                                         ; preds = %if.then
  %5 = load i64, i64* %u, align 8, !dbg !13662
  %conv4 = uitofp i64 %5 to x86_fp80, !dbg !13662
  %6 = load x86_fp80, x86_fp80* %value.addr, align 16, !dbg !13663
  %cmp5 = fcmp une x86_fp80 %conv4, %6, !dbg !13664
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %7 = phi i1 [ false, %if.then ], [ %cmp5, %land.rhs ], !dbg !13665
  %land.ext = zext i1 %7 to i32, !dbg !13661
  %conv7 = sext i32 %land.ext to i64, !dbg !13666
  %add = add i64 %3, %conv7, !dbg !13667
  %conv8 = uitofp i64 %add to x86_fp80, !dbg !13658
  store x86_fp80 %conv8, x86_fp80* %value.addr, align 16, !dbg !13668
  br label %if.end, !dbg !13669

if.end:                                           ; preds = %land.end, %land.lhs.true, %entry
  %8 = load x86_fp80, x86_fp80* %value.addr, align 16, !dbg !13670
  ret x86_fp80 %8, !dbg !13671
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @group_number(i8* %number, i64 %numberlen, i8* %grouping, i8* %thousands_sep) #0 !dbg !13672 {
entry:
  %number.addr = alloca i8*, align 8
  %numberlen.addr = alloca i64, align 8
  %grouping.addr = alloca i8*, align 8
  %thousands_sep.addr = alloca i8*, align 8
  %d = alloca i8*, align 8, !ctir !143
  %grouplen = alloca i64, align 8, !ctir !149
  %thousands_seplen = alloca i64, align 8, !ctir !149
  %i = alloca i64, align 8, !ctir !149
  %buf = alloca [41 x i8], align 16, !ctir !351
  %g = alloca i8, align 1, !ctir !737
  store i8* %number, i8** %number.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %number.addr, metadata !13675, metadata !DIExpression()), !dbg !13676
  store i64 %numberlen, i64* %numberlen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %numberlen.addr, metadata !13677, metadata !DIExpression()), !dbg !13678
  store i8* %grouping, i8** %grouping.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %grouping.addr, metadata !13679, metadata !DIExpression()), !dbg !13680
  store i8* %thousands_sep, i8** %thousands_sep.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %thousands_sep.addr, metadata !13681, metadata !DIExpression()), !dbg !13682
  call void @llvm.dbg.declare(metadata i8** %d, metadata !13683, metadata !DIExpression()), !dbg !13684
  call void @llvm.dbg.declare(metadata i64* %grouplen, metadata !13685, metadata !DIExpression()), !dbg !13686
  store i64 -1, i64* %grouplen, align 8, !dbg !13686
  call void @llvm.dbg.declare(metadata i64* %thousands_seplen, metadata !13687, metadata !DIExpression()), !dbg !13688
  %0 = load i8*, i8** %thousands_sep.addr, align 8, !dbg !13689
  %call = call i64 @strlen(i8* %0) #16, !dbg !13690
  store i64 %call, i64* %thousands_seplen, align 8, !dbg !13688
  call void @llvm.dbg.declare(metadata i64* %i, metadata !13691, metadata !DIExpression()), !dbg !13692
  %1 = load i64, i64* %numberlen.addr, align 8, !dbg !13693
  store i64 %1, i64* %i, align 8, !dbg !13692
  call void @llvm.dbg.declare(metadata [41 x i8]* %buf, metadata !13694, metadata !DIExpression()), !dbg !13695
  %arraydecay = getelementptr inbounds [41 x i8], [41 x i8]* %buf, i64 0, i64 0, !dbg !13696, !ctir !351
  %2 = load i8*, i8** %number.addr, align 8, !dbg !13697
  %3 = load i64, i64* %numberlen.addr, align 8, !dbg !13698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay, i8* align 1 %2, i64 %3, i1 false), !dbg !13696
  %4 = load i8*, i8** %number.addr, align 8, !dbg !13699
  %5 = load i64, i64* %numberlen.addr, align 8, !dbg !13700
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !13701, !ctir !144
  store i8* %add.ptr, i8** %d, align 8, !dbg !13702
  br label %for.cond, !dbg !13703

for.cond:                                         ; preds = %if.end13, %entry
  call void @llvm.dbg.declare(metadata i8* %g, metadata !13704, metadata !DIExpression()), !dbg !13708
  %6 = load i8*, i8** %grouping.addr, align 8, !dbg !13709
  %7 = load i8, i8* %6, align 1, !dbg !13710, !ctir !147
  store i8 %7, i8* %g, align 1, !dbg !13708
  %8 = load i8, i8* %g, align 1, !dbg !13711
  %tobool = icmp ne i8 %8, 0, !dbg !13711
  br i1 %tobool, label %if.then, label %if.end, !dbg !13713

if.then:                                          ; preds = %for.cond
  %9 = load i8, i8* %g, align 1, !dbg !13714
  %conv = zext i8 %9 to i32, !dbg !13714
  %cmp = icmp slt i32 %conv, 127, !dbg !13716
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !13714

cond.true:                                        ; preds = %if.then
  %10 = load i8, i8* %g, align 1, !dbg !13717
  %conv2 = zext i8 %10 to i64, !dbg !13717
  br label %cond.end, !dbg !13714

cond.false:                                       ; preds = %if.then
  %11 = load i64, i64* %i, align 8, !dbg !13718
  br label %cond.end, !dbg !13714

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv2, %cond.true ], [ %11, %cond.false ], !dbg !13714
  store i64 %cond, i64* %grouplen, align 8, !dbg !13719
  %12 = load i8*, i8** %grouping.addr, align 8, !dbg !13720
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !13720, !ctir !147
  store i8* %incdec.ptr, i8** %grouping.addr, align 8, !dbg !13720
  br label %if.end, !dbg !13721

if.end:                                           ; preds = %cond.end, %for.cond
  %13 = load i64, i64* %i, align 8, !dbg !13722
  %14 = load i64, i64* %grouplen, align 8, !dbg !13724
  %cmp3 = icmp ult i64 %13, %14, !dbg !13725
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !13726

if.then5:                                         ; preds = %if.end
  %15 = load i64, i64* %i, align 8, !dbg !13727
  store i64 %15, i64* %grouplen, align 8, !dbg !13728
  br label %if.end6, !dbg !13729

if.end6:                                          ; preds = %if.then5, %if.end
  %16 = load i64, i64* %grouplen, align 8, !dbg !13730
  %17 = load i8*, i8** %d, align 8, !dbg !13731
  %idx.neg = sub i64 0, %16, !dbg !13731
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 %idx.neg, !dbg !13731, !ctir !144
  store i8* %add.ptr7, i8** %d, align 8, !dbg !13731
  %18 = load i64, i64* %grouplen, align 8, !dbg !13732
  %19 = load i64, i64* %i, align 8, !dbg !13733
  %sub = sub i64 %19, %18, !dbg !13733
  store i64 %sub, i64* %i, align 8, !dbg !13733
  %20 = load i8*, i8** %d, align 8, !dbg !13734
  %arraydecay8 = getelementptr inbounds [41 x i8], [41 x i8]* %buf, i64 0, i64 0, !dbg !13735, !ctir !351
  %21 = load i64, i64* %i, align 8, !dbg !13736
  %add.ptr9 = getelementptr inbounds i8, i8* %arraydecay8, i64 %21, !dbg !13737, !ctir !144
  %22 = load i64, i64* %grouplen, align 8, !dbg !13738
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %add.ptr9, i64 %22, i1 false), !dbg !13739
  %23 = load i64, i64* %i, align 8, !dbg !13740
  %cmp10 = icmp eq i64 %23, 0, !dbg !13742
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !13743

if.then12:                                        ; preds = %if.end6
  %24 = load i8*, i8** %d, align 8, !dbg !13744
  ret i8* %24, !dbg !13745

if.end13:                                         ; preds = %if.end6
  %25 = load i64, i64* %thousands_seplen, align 8, !dbg !13746
  %26 = load i8*, i8** %d, align 8, !dbg !13747
  %idx.neg14 = sub i64 0, %25, !dbg !13747
  %add.ptr15 = getelementptr inbounds i8, i8* %26, i64 %idx.neg14, !dbg !13747, !ctir !144
  store i8* %add.ptr15, i8** %d, align 8, !dbg !13747
  %27 = load i8*, i8** %d, align 8, !dbg !13748
  %28 = load i8*, i8** %thousands_sep.addr, align 8, !dbg !13749
  %29 = load i64, i64* %thousands_seplen, align 8, !dbg !13750
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 %29, i1 false), !dbg !13751
  br label %for.cond, !dbg !13752, !llvm.loop !13753
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @human_options(i8* %spec, i32* %opts, i64* %block_size) #0 !dbg !13756 {
entry:
  %spec.addr = alloca i8*, align 8
  %opts.addr = alloca i32*, align 8
  %block_size.addr = alloca i64*, align 8
  %e = alloca i32, align 4, !ctir !1276
  store i8* %spec, i8** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %spec.addr, metadata !13760, metadata !DIExpression()), !dbg !13761
  store i32* %opts, i32** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %opts.addr, metadata !13762, metadata !DIExpression()), !dbg !13763
  store i64* %block_size, i64** %block_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %block_size.addr, metadata !13764, metadata !DIExpression()), !dbg !13765
  call void @llvm.dbg.declare(metadata i32* %e, metadata !13766, metadata !DIExpression()), !dbg !13767
  %0 = load i8*, i8** %spec.addr, align 8, !dbg !13768
  %1 = load i64*, i64** %block_size.addr, align 8, !dbg !13769
  %2 = load i32*, i32** %opts.addr, align 8, !dbg !13770
  %call = call i32 @humblock(i8* %0, i64* %1, i32* %2), !dbg !13771
  store i32 %call, i32* %e, align 4, !dbg !13767
  %3 = load i64*, i64** %block_size.addr, align 8, !dbg !13772
  %4 = load i64, i64* %3, align 8, !dbg !13774, !ctir !168
  %cmp = icmp eq i64 %4, 0, !dbg !13775
  br i1 %cmp, label %if.then, label %if.end, !dbg !13776

if.then:                                          ; preds = %entry
  %call1 = call i64 @default_block_size(), !dbg !13777
  %5 = load i64*, i64** %block_size.addr, align 8, !dbg !13779
  store i64 %call1, i64* %5, align 8, !dbg !13780, !ctir !168
  store i32 4, i32* %e, align 4, !dbg !13781
  br label %if.end, !dbg !13782

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %e, align 4, !dbg !13783
  ret i32 %6, !dbg !13784
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @humblock(i8* %spec, i64* %block_size, i32* %options) #0 !dbg !13785 {
entry:
  %retval = alloca i32, align 4
  %spec.addr = alloca i8*, align 8
  %block_size.addr = alloca i64*, align 8
  %options.addr = alloca i32*, align 8
  %i = alloca i32, align 4, !ctir !27
  %opts = alloca i32, align 4, !ctir !27
  %ptr = alloca i8*, align 8, !ctir !143
  %e = alloca i32, align 4, !ctir !1276
  store i8* %spec, i8** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %spec.addr, metadata !13788, metadata !DIExpression()), !dbg !13789
  store i64* %block_size, i64** %block_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %block_size.addr, metadata !13790, metadata !DIExpression()), !dbg !13791
  store i32* %options, i32** %options.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %options.addr, metadata !13792, metadata !DIExpression()), !dbg !13793
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13794, metadata !DIExpression()), !dbg !13795
  call void @llvm.dbg.declare(metadata i32* %opts, metadata !13796, metadata !DIExpression()), !dbg !13797
  store i32 0, i32* %opts, align 4, !dbg !13797
  %0 = load i8*, i8** %spec.addr, align 8, !dbg !13798
  %tobool = icmp ne i8* %0, null, !dbg !13798
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !13800

land.lhs.true:                                    ; preds = %entry
  %call = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.337, i64 0, i64 0)) #13, !dbg !13801
  store i8* %call, i8** %spec.addr, align 8, !dbg !13802
  %tobool1 = icmp ne i8* %call, null, !dbg !13802
  br i1 %tobool1, label %if.else, label %land.lhs.true2, !dbg !13803

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call3 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.338, i64 0, i64 0)) #13, !dbg !13804
  store i8* %call3, i8** %spec.addr, align 8, !dbg !13805
  %tobool4 = icmp ne i8* %call3, null, !dbg !13805
  br i1 %tobool4, label %if.else, label %if.then, !dbg !13806

if.then:                                          ; preds = %land.lhs.true2
  %call5 = call i64 @default_block_size(), !dbg !13807
  %1 = load i64*, i64** %block_size.addr, align 8, !dbg !13808
  store i64 %call5, i64* %1, align 8, !dbg !13809, !ctir !168
  br label %if.end51, !dbg !13810

if.else:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %2 = load i8*, i8** %spec.addr, align 8, !dbg !13811
  %3 = load i8, i8* %2, align 1, !dbg !13814, !ctir !147
  %conv = sext i8 %3 to i32, !dbg !13814
  %cmp = icmp eq i32 %conv, 39, !dbg !13815
  br i1 %cmp, label %if.then7, label %if.end, !dbg !13816

if.then7:                                         ; preds = %if.else
  %4 = load i32, i32* %opts, align 4, !dbg !13817
  %or = or i32 %4, 4, !dbg !13817
  store i32 %or, i32* %opts, align 4, !dbg !13817
  %5 = load i8*, i8** %spec.addr, align 8, !dbg !13819
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !13819, !ctir !147
  store i8* %incdec.ptr, i8** %spec.addr, align 8, !dbg !13819
  br label %if.end, !dbg !13820

if.end:                                           ; preds = %if.then7, %if.else
  %6 = load i8*, i8** %spec.addr, align 8, !dbg !13821
  %call8 = call i64 @argmatch(i8* %6, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @block_size_args, i64 0, i64 0), i8* bitcast ([2 x i32]* @block_size_opts to i8*), i64 4) #16, !dbg !13821
  %conv9 = trunc i64 %call8 to i32, !dbg !13821
  store i32 %conv9, i32* %i, align 4, !dbg !13823
  %cmp10 = icmp sle i32 0, %conv9, !dbg !13824
  br i1 %cmp10, label %if.then12, label %if.else14, !dbg !13825

if.then12:                                        ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !13826
  %idxprom = sext i32 %7 to i64, !dbg !13828
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* @block_size_opts, i64 0, i64 %idxprom, !dbg !13828, !ctir !1278
  %8 = load i32, i32* %arrayidx, align 4, !dbg !13828
  %9 = load i32, i32* %opts, align 4, !dbg !13829
  %or13 = or i32 %9, %8, !dbg !13829
  store i32 %or13, i32* %opts, align 4, !dbg !13829
  %10 = load i64*, i64** %block_size.addr, align 8, !dbg !13830
  store i64 1, i64* %10, align 8, !dbg !13831, !ctir !168
  br label %if.end50, !dbg !13832

if.else14:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !13833, metadata !DIExpression()), !dbg !13835
  call void @llvm.dbg.declare(metadata i32* %e, metadata !13836, metadata !DIExpression()), !dbg !13837
  %11 = load i8*, i8** %spec.addr, align 8, !dbg !13838
  %12 = load i64*, i64** %block_size.addr, align 8, !dbg !13839
  %call15 = call i32 @xstrtoumax(i8* %11, i8** %ptr, i32 0, i64* %12, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6.339, i64 0, i64 0)), !dbg !13840
  store i32 %call15, i32* %e, align 4, !dbg !13837
  %13 = load i32, i32* %e, align 4, !dbg !13841
  %cmp16 = icmp ne i32 %13, 0, !dbg !13843
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !13844

if.then18:                                        ; preds = %if.else14
  %14 = load i32*, i32** %options.addr, align 8, !dbg !13845
  store i32 0, i32* %14, align 4, !dbg !13847, !ctir !27
  %15 = load i32, i32* %e, align 4, !dbg !13848
  store i32 %15, i32* %retval, align 4, !dbg !13849
  br label %return, !dbg !13849

if.end19:                                         ; preds = %if.else14
  br label %for.cond, !dbg !13850

for.cond:                                         ; preds = %for.inc, %if.end19
  %16 = load i8*, i8** %spec.addr, align 8, !dbg !13851
  %17 = load i8, i8* %16, align 1, !dbg !13854, !ctir !147
  %conv20 = sext i8 %17 to i32, !dbg !13854
  %cmp21 = icmp sle i32 48, %conv20, !dbg !13855
  br i1 %cmp21, label %land.rhs, label %land.end, !dbg !13856

land.rhs:                                         ; preds = %for.cond
  %18 = load i8*, i8** %spec.addr, align 8, !dbg !13857
  %19 = load i8, i8* %18, align 1, !dbg !13858, !ctir !147
  %conv23 = sext i8 %19 to i32, !dbg !13858
  %cmp24 = icmp sle i32 %conv23, 57, !dbg !13859
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %20 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ], !dbg !13860
  %lnot = xor i1 %20, true, !dbg !13861
  br i1 %lnot, label %for.body, label %for.end, !dbg !13862

for.body:                                         ; preds = %land.end
  %21 = load i8*, i8** %spec.addr, align 8, !dbg !13863
  %22 = load i8*, i8** %ptr, align 8, !dbg !13865
  %cmp26 = icmp eq i8* %21, %22, !dbg !13866
  br i1 %cmp26, label %if.then28, label %if.end48, !dbg !13867

if.then28:                                        ; preds = %for.body
  %23 = load i32, i32* %opts, align 4, !dbg !13868
  %or29 = or i32 %23, 128, !dbg !13868
  store i32 %or29, i32* %opts, align 4, !dbg !13868
  %24 = load i8*, i8** %ptr, align 8, !dbg !13870
  %arrayidx30 = getelementptr inbounds i8, i8* %24, i64 -1, !dbg !13870, !ctir !143
  %25 = load i8, i8* %arrayidx30, align 1, !dbg !13870
  %conv31 = sext i8 %25 to i32, !dbg !13870
  %cmp32 = icmp eq i32 %conv31, 66, !dbg !13872
  br i1 %cmp32, label %if.then34, label %if.end36, !dbg !13873

if.then34:                                        ; preds = %if.then28
  %26 = load i32, i32* %opts, align 4, !dbg !13874
  %or35 = or i32 %26, 256, !dbg !13874
  store i32 %or35, i32* %opts, align 4, !dbg !13874
  br label %if.end36, !dbg !13875

if.end36:                                         ; preds = %if.then34, %if.then28
  %27 = load i8*, i8** %ptr, align 8, !dbg !13876
  %arrayidx37 = getelementptr inbounds i8, i8* %27, i64 -1, !dbg !13876, !ctir !143
  %28 = load i8, i8* %arrayidx37, align 1, !dbg !13876
  %conv38 = sext i8 %28 to i32, !dbg !13876
  %cmp39 = icmp ne i32 %conv38, 66, !dbg !13878
  br i1 %cmp39, label %if.then45, label %lor.lhs.false, !dbg !13879

lor.lhs.false:                                    ; preds = %if.end36
  %29 = load i8*, i8** %ptr, align 8, !dbg !13880
  %arrayidx41 = getelementptr inbounds i8, i8* %29, i64 -2, !dbg !13880, !ctir !143
  %30 = load i8, i8* %arrayidx41, align 1, !dbg !13880
  %conv42 = sext i8 %30 to i32, !dbg !13880
  %cmp43 = icmp eq i32 %conv42, 105, !dbg !13881
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !13882

if.then45:                                        ; preds = %lor.lhs.false, %if.end36
  %31 = load i32, i32* %opts, align 4, !dbg !13883
  %or46 = or i32 %31, 32, !dbg !13883
  store i32 %or46, i32* %opts, align 4, !dbg !13883
  br label %if.end47, !dbg !13884

if.end47:                                         ; preds = %if.then45, %lor.lhs.false
  br label %for.end, !dbg !13885

if.end48:                                         ; preds = %for.body
  br label %for.inc, !dbg !13865

for.inc:                                          ; preds = %if.end48
  %32 = load i8*, i8** %spec.addr, align 8, !dbg !13886
  %incdec.ptr49 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !13886, !ctir !147
  store i8* %incdec.ptr49, i8** %spec.addr, align 8, !dbg !13886
  br label %for.cond, !dbg !13887, !llvm.loop !13888

for.end:                                          ; preds = %if.end47, %land.end
  br label %if.end50

if.end50:                                         ; preds = %for.end, %if.then12
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  %33 = load i32, i32* %opts, align 4, !dbg !13890
  %34 = load i32*, i32** %options.addr, align 8, !dbg !13891
  store i32 %33, i32* %34, align 4, !dbg !13892, !ctir !27
  store i32 0, i32* %retval, align 4, !dbg !13893
  br label %return, !dbg !13893

return:                                           ; preds = %if.end51, %if.then18
  %35 = load i32, i32* %retval, align 4, !dbg !13894
  ret i32 %35, !dbg !13894
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @default_block_size() #0 !dbg !13895 {
entry:
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.336, i64 0, i64 0)) #13, !dbg !13898
  %tobool = icmp ne i8* %call, null, !dbg !13898
  %0 = zext i1 %tobool to i64, !dbg !13898
  %cond = select i1 %tobool, i32 512, i32 1024, !dbg !13898
  %conv = sext i32 %cond to i64, !dbg !13898
  ret i64 %conv, !dbg !13899
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getuser(i32 %uid) #0 !dbg !13900 {
entry:
  %uid.addr = alloca i32, align 4
  %tail = alloca %struct.userid*, align 8, !ctir !1290
  %match = alloca %struct.userid*, align 8, !ctir !1290
  %pwent = alloca %struct.passwd*, align 8, !ctir !1303
  %name = alloca i8*, align 8, !ctir !146
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !13903, metadata !DIExpression()), !dbg !13904
  call void @llvm.dbg.declare(metadata %struct.userid** %tail, metadata !13905, metadata !DIExpression()), !dbg !13906
  call void @llvm.dbg.declare(metadata %struct.userid** %match, metadata !13907, metadata !DIExpression()), !dbg !13908
  store %struct.userid* null, %struct.userid** %match, align 8, !dbg !13908
  %0 = load %struct.userid*, %struct.userid** @user_alist, align 8, !dbg !13909
  store %struct.userid* %0, %struct.userid** %tail, align 8, !dbg !13911
  br label %for.cond, !dbg !13912

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13913
  %tobool = icmp ne %struct.userid* %1, null, !dbg !13915
  br i1 %tobool, label %for.body, label %for.end, !dbg !13915

for.body:                                         ; preds = %for.cond
  %2 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13916
  %id = getelementptr inbounds %struct.userid, %struct.userid* %2, i32 0, i32 0, !dbg !13919, !ctir !1291
  %u = bitcast %union.anon.12* %id to i32*, !dbg !13920
  %3 = load i32, i32* %u, align 8, !dbg !13920, !ctir !1295
  %4 = load i32, i32* %uid.addr, align 4, !dbg !13921
  %cmp = icmp eq i32 %3, %4, !dbg !13922
  br i1 %cmp, label %if.then, label %if.end, !dbg !13923

if.then:                                          ; preds = %for.body
  %5 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13924
  store %struct.userid* %5, %struct.userid** %match, align 8, !dbg !13926
  br label %for.end, !dbg !13927

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !13928

for.inc:                                          ; preds = %if.end
  %6 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13929
  %next = getelementptr inbounds %struct.userid, %struct.userid* %6, i32 0, i32 1, !dbg !13930, !ctir !1291
  %7 = load %struct.userid*, %struct.userid** %next, align 8, !dbg !13930, !ctir !1290
  store %struct.userid* %7, %struct.userid** %tail, align 8, !dbg !13931
  br label %for.cond, !dbg !13932, !llvm.loop !13933

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13935
  %cmp1 = icmp eq %struct.userid* %8, null, !dbg !13937
  br i1 %cmp1, label %if.then2, label %if.end12, !dbg !13938

if.then2:                                         ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.passwd** %pwent, metadata !13939, metadata !DIExpression()), !dbg !13941
  %9 = load i32, i32* %uid.addr, align 4, !dbg !13942
  %call = call %struct.passwd* @getpwuid(i32 %9), !dbg !13943
  store %struct.passwd* %call, %struct.passwd** %pwent, align 8, !dbg !13941
  call void @llvm.dbg.declare(metadata i8** %name, metadata !13944, metadata !DIExpression()), !dbg !13945
  %10 = load %struct.passwd*, %struct.passwd** %pwent, align 8, !dbg !13946
  %tobool3 = icmp ne %struct.passwd* %10, null, !dbg !13946
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !13946

cond.true:                                        ; preds = %if.then2
  %11 = load %struct.passwd*, %struct.passwd** %pwent, align 8, !dbg !13947
  %pw_name = getelementptr inbounds %struct.passwd, %struct.passwd* %11, i32 0, i32 0, !dbg !13948, !ctir !1304
  %12 = load i8*, i8** %pw_name, align 8, !dbg !13948, !ctir !143
  br label %cond.end, !dbg !13946

cond.false:                                       ; preds = %if.then2
  br label %cond.end, !dbg !13946

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.344, i64 0, i64 0), %cond.false ], !dbg !13946
  store i8* %cond, i8** %name, align 8, !dbg !13945
  %13 = load i8*, i8** %name, align 8, !dbg !13949
  %call4 = call i64 @strlen(i8* %13) #16, !dbg !13949
  %add = add i64 %call4, 1, !dbg !13949
  %add5 = add i64 23, %add, !dbg !13949
  %and = and i64 %add5, -8, !dbg !13949
  %call6 = call noalias i8* @xmalloc(i64 %and), !dbg !13950
  %14 = bitcast i8* %call6 to %struct.userid*, !dbg !13950
  store %struct.userid* %14, %struct.userid** %match, align 8, !dbg !13951
  %15 = load i32, i32* %uid.addr, align 4, !dbg !13952
  %16 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13953
  %id7 = getelementptr inbounds %struct.userid, %struct.userid* %16, i32 0, i32 0, !dbg !13954, !ctir !1291
  %u8 = bitcast %union.anon.12* %id7 to i32*, !dbg !13955
  store i32 %15, i32* %u8, align 8, !dbg !13956, !ctir !1295
  %17 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13957
  %name9 = getelementptr inbounds %struct.userid, %struct.userid* %17, i32 0, i32 2, !dbg !13958, !ctir !1291
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name9, i64 0, i64 0, !dbg !13957, !ctir !469
  %18 = load i8*, i8** %name, align 8, !dbg !13959
  %call10 = call i8* @strcpy(i8* %arraydecay, i8* %18) #13, !dbg !13960
  %19 = load %struct.userid*, %struct.userid** @user_alist, align 8, !dbg !13961
  %20 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13962
  %next11 = getelementptr inbounds %struct.userid, %struct.userid* %20, i32 0, i32 1, !dbg !13963, !ctir !1291
  store %struct.userid* %19, %struct.userid** %next11, align 8, !dbg !13964, !ctir !1290
  %21 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13965
  store %struct.userid* %21, %struct.userid** @user_alist, align 8, !dbg !13966
  br label %if.end12, !dbg !13967

if.end12:                                         ; preds = %cond.end, %for.end
  %22 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13968
  %name13 = getelementptr inbounds %struct.userid, %struct.userid* %22, i32 0, i32 2, !dbg !13969, !ctir !1291
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* %name13, i64 0, i64 0, !dbg !13968, !ctir !469
  %23 = load i8, i8* %arrayidx, align 8, !dbg !13968
  %conv = sext i8 %23 to i32, !dbg !13968
  %tobool14 = icmp ne i32 %conv, 0, !dbg !13968
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !13968

cond.true15:                                      ; preds = %if.end12
  %24 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !13970
  %name16 = getelementptr inbounds %struct.userid, %struct.userid* %24, i32 0, i32 2, !dbg !13971, !ctir !1291
  %arraydecay17 = getelementptr inbounds [0 x i8], [0 x i8]* %name16, i64 0, i64 0, !dbg !13970, !ctir !469
  br label %cond.end19, !dbg !13968

cond.false18:                                     ; preds = %if.end12
  br label %cond.end19, !dbg !13968

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi i8* [ %arraydecay17, %cond.true15 ], [ null, %cond.false18 ], !dbg !13968
  ret i8* %cond20, !dbg !13972
}

declare dso_local %struct.passwd* @getpwuid(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @getuidbyname(i8* %user) #0 !dbg !13973 {
entry:
  %retval = alloca i32*, align 8
  %user.addr = alloca i8*, align 8
  %tail = alloca %struct.userid*, align 8, !ctir !1290
  %pwent = alloca %struct.passwd*, align 8, !ctir !1303
  store i8* %user, i8** %user.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %user.addr, metadata !13977, metadata !DIExpression()), !dbg !13978
  call void @llvm.dbg.declare(metadata %struct.userid** %tail, metadata !13979, metadata !DIExpression()), !dbg !13980
  call void @llvm.dbg.declare(metadata %struct.passwd** %pwent, metadata !13981, metadata !DIExpression()), !dbg !13982
  %0 = load %struct.userid*, %struct.userid** @user_alist, align 8, !dbg !13983
  store %struct.userid* %0, %struct.userid** %tail, align 8, !dbg !13985
  br label %for.cond, !dbg !13986

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13987
  %tobool = icmp ne %struct.userid* %1, null, !dbg !13989
  br i1 %tobool, label %for.body, label %for.end, !dbg !13989

for.body:                                         ; preds = %for.cond
  %2 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13990
  %name = getelementptr inbounds %struct.userid, %struct.userid* %2, i32 0, i32 2, !dbg !13992, !ctir !1291
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !13993, !ctir !469
  %3 = load i8, i8* %arraydecay, align 8, !dbg !13993, !ctir !144
  %conv = sext i8 %3 to i32, !dbg !13993
  %4 = load i8*, i8** %user.addr, align 8, !dbg !13994
  %5 = load i8, i8* %4, align 1, !dbg !13995, !ctir !147
  %conv1 = sext i8 %5 to i32, !dbg !13995
  %cmp = icmp eq i32 %conv, %conv1, !dbg !13996
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13997

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !13998
  %name3 = getelementptr inbounds %struct.userid, %struct.userid* %6, i32 0, i32 2, !dbg !13999, !ctir !1291
  %arraydecay4 = getelementptr inbounds [0 x i8], [0 x i8]* %name3, i64 0, i64 0, !dbg !13998, !ctir !469
  %7 = load i8*, i8** %user.addr, align 8, !dbg !14000
  %call = call i32 @strcmp(i8* %arraydecay4, i8* %7) #16, !dbg !14001
  %tobool5 = icmp ne i32 %call, 0, !dbg !14001
  br i1 %tobool5, label %if.end, label %if.then, !dbg !14002

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14003
  %id = getelementptr inbounds %struct.userid, %struct.userid* %8, i32 0, i32 0, !dbg !14004, !ctir !1291
  %u = bitcast %union.anon.12* %id to i32*, !dbg !14005
  store i32* %u, i32** %retval, align 8, !dbg !14006
  br label %return, !dbg !14006

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !14007

for.inc:                                          ; preds = %if.end
  %9 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14008
  %next = getelementptr inbounds %struct.userid, %struct.userid* %9, i32 0, i32 1, !dbg !14009, !ctir !1291
  %10 = load %struct.userid*, %struct.userid** %next, align 8, !dbg !14009, !ctir !1290
  store %struct.userid* %10, %struct.userid** %tail, align 8, !dbg !14010
  br label %for.cond, !dbg !14011, !llvm.loop !14012

for.end:                                          ; preds = %for.cond
  %11 = load %struct.userid*, %struct.userid** @nouser_alist, align 8, !dbg !14014
  store %struct.userid* %11, %struct.userid** %tail, align 8, !dbg !14016
  br label %for.cond6, !dbg !14017

for.cond6:                                        ; preds = %for.inc22, %for.end
  %12 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14018
  %tobool7 = icmp ne %struct.userid* %12, null, !dbg !14020
  br i1 %tobool7, label %for.body8, label %for.end24, !dbg !14020

for.body8:                                        ; preds = %for.cond6
  %13 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14021
  %name9 = getelementptr inbounds %struct.userid, %struct.userid* %13, i32 0, i32 2, !dbg !14023, !ctir !1291
  %arraydecay10 = getelementptr inbounds [0 x i8], [0 x i8]* %name9, i64 0, i64 0, !dbg !14024, !ctir !469
  %14 = load i8, i8* %arraydecay10, align 8, !dbg !14024, !ctir !144
  %conv11 = sext i8 %14 to i32, !dbg !14024
  %15 = load i8*, i8** %user.addr, align 8, !dbg !14025
  %16 = load i8, i8* %15, align 1, !dbg !14026, !ctir !147
  %conv12 = sext i8 %16 to i32, !dbg !14026
  %cmp13 = icmp eq i32 %conv11, %conv12, !dbg !14027
  br i1 %cmp13, label %land.lhs.true15, label %if.end21, !dbg !14028

land.lhs.true15:                                  ; preds = %for.body8
  %17 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14029
  %name16 = getelementptr inbounds %struct.userid, %struct.userid* %17, i32 0, i32 2, !dbg !14030, !ctir !1291
  %arraydecay17 = getelementptr inbounds [0 x i8], [0 x i8]* %name16, i64 0, i64 0, !dbg !14029, !ctir !469
  %18 = load i8*, i8** %user.addr, align 8, !dbg !14031
  %call18 = call i32 @strcmp(i8* %arraydecay17, i8* %18) #16, !dbg !14032
  %tobool19 = icmp ne i32 %call18, 0, !dbg !14032
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !14033

if.then20:                                        ; preds = %land.lhs.true15
  store i32* null, i32** %retval, align 8, !dbg !14034
  br label %return, !dbg !14034

if.end21:                                         ; preds = %land.lhs.true15, %for.body8
  br label %for.inc22, !dbg !14035

for.inc22:                                        ; preds = %if.end21
  %19 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14036
  %next23 = getelementptr inbounds %struct.userid, %struct.userid* %19, i32 0, i32 1, !dbg !14037, !ctir !1291
  %20 = load %struct.userid*, %struct.userid** %next23, align 8, !dbg !14037, !ctir !1290
  store %struct.userid* %20, %struct.userid** %tail, align 8, !dbg !14038
  br label %for.cond6, !dbg !14039, !llvm.loop !14040

for.end24:                                        ; preds = %for.cond6
  %21 = load i8*, i8** %user.addr, align 8, !dbg !14042
  %call25 = call %struct.passwd* @getpwnam(i8* %21), !dbg !14043
  store %struct.passwd* %call25, %struct.passwd** %pwent, align 8, !dbg !14044
  %22 = load i8*, i8** %user.addr, align 8, !dbg !14045
  %call26 = call i64 @strlen(i8* %22) #16, !dbg !14045
  %add = add i64 %call26, 1, !dbg !14045
  %add27 = add i64 23, %add, !dbg !14045
  %and = and i64 %add27, -8, !dbg !14045
  %call28 = call noalias i8* @xmalloc(i64 %and), !dbg !14046
  %23 = bitcast i8* %call28 to %struct.userid*, !dbg !14046
  store %struct.userid* %23, %struct.userid** %tail, align 8, !dbg !14047
  %24 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14048
  %name29 = getelementptr inbounds %struct.userid, %struct.userid* %24, i32 0, i32 2, !dbg !14049, !ctir !1291
  %arraydecay30 = getelementptr inbounds [0 x i8], [0 x i8]* %name29, i64 0, i64 0, !dbg !14048, !ctir !469
  %25 = load i8*, i8** %user.addr, align 8, !dbg !14050
  %call31 = call i8* @strcpy(i8* %arraydecay30, i8* %25) #13, !dbg !14051
  %26 = load %struct.passwd*, %struct.passwd** %pwent, align 8, !dbg !14052
  %tobool32 = icmp ne %struct.passwd* %26, null, !dbg !14052
  br i1 %tobool32, label %if.then33, label %if.end39, !dbg !14054

if.then33:                                        ; preds = %for.end24
  %27 = load %struct.passwd*, %struct.passwd** %pwent, align 8, !dbg !14055
  %pw_uid = getelementptr inbounds %struct.passwd, %struct.passwd* %27, i32 0, i32 2, !dbg !14057, !ctir !1304
  %28 = load i32, i32* %pw_uid, align 8, !dbg !14057, !ctir !203
  %29 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14058
  %id34 = getelementptr inbounds %struct.userid, %struct.userid* %29, i32 0, i32 0, !dbg !14059, !ctir !1291
  %u35 = bitcast %union.anon.12* %id34 to i32*, !dbg !14060
  store i32 %28, i32* %u35, align 8, !dbg !14061, !ctir !1295
  %30 = load %struct.userid*, %struct.userid** @user_alist, align 8, !dbg !14062
  %31 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14063
  %next36 = getelementptr inbounds %struct.userid, %struct.userid* %31, i32 0, i32 1, !dbg !14064, !ctir !1291
  store %struct.userid* %30, %struct.userid** %next36, align 8, !dbg !14065, !ctir !1290
  %32 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14066
  store %struct.userid* %32, %struct.userid** @user_alist, align 8, !dbg !14067
  %33 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14068
  %id37 = getelementptr inbounds %struct.userid, %struct.userid* %33, i32 0, i32 0, !dbg !14069, !ctir !1291
  %u38 = bitcast %union.anon.12* %id37 to i32*, !dbg !14070
  store i32* %u38, i32** %retval, align 8, !dbg !14071
  br label %return, !dbg !14071

if.end39:                                         ; preds = %for.end24
  %34 = load %struct.userid*, %struct.userid** @nouser_alist, align 8, !dbg !14072
  %35 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14073
  %next40 = getelementptr inbounds %struct.userid, %struct.userid* %35, i32 0, i32 1, !dbg !14074, !ctir !1291
  store %struct.userid* %34, %struct.userid** %next40, align 8, !dbg !14075, !ctir !1290
  %36 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14076
  store %struct.userid* %36, %struct.userid** @nouser_alist, align 8, !dbg !14077
  store i32* null, i32** %retval, align 8, !dbg !14078
  br label %return, !dbg !14078

return:                                           ; preds = %if.end39, %if.then33, %if.then20, %if.then
  %37 = load i32*, i32** %retval, align 8, !dbg !14079
  ret i32* %37, !dbg !14079
}

declare dso_local %struct.passwd* @getpwnam(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @getgroup(i32 %gid) #0 !dbg !14080 {
entry:
  %gid.addr = alloca i32, align 4
  %tail = alloca %struct.userid*, align 8, !ctir !1290
  %match = alloca %struct.userid*, align 8, !ctir !1290
  %grent = alloca %struct.group*, align 8, !ctir !1314
  %name = alloca i8*, align 8, !ctir !146
  store i32 %gid, i32* %gid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gid.addr, metadata !14083, metadata !DIExpression()), !dbg !14084
  call void @llvm.dbg.declare(metadata %struct.userid** %tail, metadata !14085, metadata !DIExpression()), !dbg !14086
  call void @llvm.dbg.declare(metadata %struct.userid** %match, metadata !14087, metadata !DIExpression()), !dbg !14088
  store %struct.userid* null, %struct.userid** %match, align 8, !dbg !14088
  %0 = load %struct.userid*, %struct.userid** @group_alist, align 8, !dbg !14089
  store %struct.userid* %0, %struct.userid** %tail, align 8, !dbg !14091
  br label %for.cond, !dbg !14092

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14093
  %tobool = icmp ne %struct.userid* %1, null, !dbg !14095
  br i1 %tobool, label %for.body, label %for.end, !dbg !14095

for.body:                                         ; preds = %for.cond
  %2 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14096
  %id = getelementptr inbounds %struct.userid, %struct.userid* %2, i32 0, i32 0, !dbg !14099, !ctir !1291
  %g = bitcast %union.anon.12* %id to i32*, !dbg !14100
  %3 = load i32, i32* %g, align 8, !dbg !14100, !ctir !1295
  %4 = load i32, i32* %gid.addr, align 4, !dbg !14101
  %cmp = icmp eq i32 %3, %4, !dbg !14102
  br i1 %cmp, label %if.then, label %if.end, !dbg !14103

if.then:                                          ; preds = %for.body
  %5 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14104
  store %struct.userid* %5, %struct.userid** %match, align 8, !dbg !14106
  br label %for.end, !dbg !14107

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !14108

for.inc:                                          ; preds = %if.end
  %6 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14109
  %next = getelementptr inbounds %struct.userid, %struct.userid* %6, i32 0, i32 1, !dbg !14110, !ctir !1291
  %7 = load %struct.userid*, %struct.userid** %next, align 8, !dbg !14110, !ctir !1290
  store %struct.userid* %7, %struct.userid** %tail, align 8, !dbg !14111
  br label %for.cond, !dbg !14112, !llvm.loop !14113

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14115
  %cmp1 = icmp eq %struct.userid* %8, null, !dbg !14117
  br i1 %cmp1, label %if.then2, label %if.end12, !dbg !14118

if.then2:                                         ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.group** %grent, metadata !14119, metadata !DIExpression()), !dbg !14121
  %9 = load i32, i32* %gid.addr, align 4, !dbg !14122
  %call = call %struct.group* @getgrgid(i32 %9), !dbg !14123
  store %struct.group* %call, %struct.group** %grent, align 8, !dbg !14121
  call void @llvm.dbg.declare(metadata i8** %name, metadata !14124, metadata !DIExpression()), !dbg !14125
  %10 = load %struct.group*, %struct.group** %grent, align 8, !dbg !14126
  %tobool3 = icmp ne %struct.group* %10, null, !dbg !14126
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !14126

cond.true:                                        ; preds = %if.then2
  %11 = load %struct.group*, %struct.group** %grent, align 8, !dbg !14127
  %gr_name = getelementptr inbounds %struct.group, %struct.group* %11, i32 0, i32 0, !dbg !14128, !ctir !1315
  %12 = load i8*, i8** %gr_name, align 8, !dbg !14128, !ctir !143
  br label %cond.end, !dbg !14126

cond.false:                                       ; preds = %if.then2
  br label %cond.end, !dbg !14126

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.344, i64 0, i64 0), %cond.false ], !dbg !14126
  store i8* %cond, i8** %name, align 8, !dbg !14125
  %13 = load i8*, i8** %name, align 8, !dbg !14129
  %call4 = call i64 @strlen(i8* %13) #16, !dbg !14129
  %add = add i64 %call4, 1, !dbg !14129
  %add5 = add i64 23, %add, !dbg !14129
  %and = and i64 %add5, -8, !dbg !14129
  %call6 = call noalias i8* @xmalloc(i64 %and), !dbg !14130
  %14 = bitcast i8* %call6 to %struct.userid*, !dbg !14130
  store %struct.userid* %14, %struct.userid** %match, align 8, !dbg !14131
  %15 = load i32, i32* %gid.addr, align 4, !dbg !14132
  %16 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14133
  %id7 = getelementptr inbounds %struct.userid, %struct.userid* %16, i32 0, i32 0, !dbg !14134, !ctir !1291
  %g8 = bitcast %union.anon.12* %id7 to i32*, !dbg !14135
  store i32 %15, i32* %g8, align 8, !dbg !14136, !ctir !1295
  %17 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14137
  %name9 = getelementptr inbounds %struct.userid, %struct.userid* %17, i32 0, i32 2, !dbg !14138, !ctir !1291
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name9, i64 0, i64 0, !dbg !14137, !ctir !469
  %18 = load i8*, i8** %name, align 8, !dbg !14139
  %call10 = call i8* @strcpy(i8* %arraydecay, i8* %18) #13, !dbg !14140
  %19 = load %struct.userid*, %struct.userid** @group_alist, align 8, !dbg !14141
  %20 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14142
  %next11 = getelementptr inbounds %struct.userid, %struct.userid* %20, i32 0, i32 1, !dbg !14143, !ctir !1291
  store %struct.userid* %19, %struct.userid** %next11, align 8, !dbg !14144, !ctir !1290
  %21 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14145
  store %struct.userid* %21, %struct.userid** @group_alist, align 8, !dbg !14146
  br label %if.end12, !dbg !14147

if.end12:                                         ; preds = %cond.end, %for.end
  %22 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14148
  %name13 = getelementptr inbounds %struct.userid, %struct.userid* %22, i32 0, i32 2, !dbg !14149, !ctir !1291
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* %name13, i64 0, i64 0, !dbg !14148, !ctir !469
  %23 = load i8, i8* %arrayidx, align 8, !dbg !14148
  %conv = sext i8 %23 to i32, !dbg !14148
  %tobool14 = icmp ne i32 %conv, 0, !dbg !14148
  br i1 %tobool14, label %cond.true15, label %cond.false18, !dbg !14148

cond.true15:                                      ; preds = %if.end12
  %24 = load %struct.userid*, %struct.userid** %match, align 8, !dbg !14150
  %name16 = getelementptr inbounds %struct.userid, %struct.userid* %24, i32 0, i32 2, !dbg !14151, !ctir !1291
  %arraydecay17 = getelementptr inbounds [0 x i8], [0 x i8]* %name16, i64 0, i64 0, !dbg !14150, !ctir !469
  br label %cond.end19, !dbg !14148

cond.false18:                                     ; preds = %if.end12
  br label %cond.end19, !dbg !14148

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi i8* [ %arraydecay17, %cond.true15 ], [ null, %cond.false18 ], !dbg !14148
  ret i8* %cond20, !dbg !14152
}

declare dso_local %struct.group* @getgrgid(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @getgidbyname(i8* %group) #0 !dbg !14153 {
entry:
  %retval = alloca i32*, align 8
  %group.addr = alloca i8*, align 8
  %tail = alloca %struct.userid*, align 8, !ctir !1290
  %grent = alloca %struct.group*, align 8, !ctir !1314
  store i8* %group, i8** %group.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %group.addr, metadata !14157, metadata !DIExpression()), !dbg !14158
  call void @llvm.dbg.declare(metadata %struct.userid** %tail, metadata !14159, metadata !DIExpression()), !dbg !14160
  call void @llvm.dbg.declare(metadata %struct.group** %grent, metadata !14161, metadata !DIExpression()), !dbg !14162
  %0 = load %struct.userid*, %struct.userid** @group_alist, align 8, !dbg !14163
  store %struct.userid* %0, %struct.userid** %tail, align 8, !dbg !14165
  br label %for.cond, !dbg !14166

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14167
  %tobool = icmp ne %struct.userid* %1, null, !dbg !14169
  br i1 %tobool, label %for.body, label %for.end, !dbg !14169

for.body:                                         ; preds = %for.cond
  %2 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14170
  %name = getelementptr inbounds %struct.userid, %struct.userid* %2, i32 0, i32 2, !dbg !14172, !ctir !1291
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !14173, !ctir !469
  %3 = load i8, i8* %arraydecay, align 8, !dbg !14173, !ctir !144
  %conv = sext i8 %3 to i32, !dbg !14173
  %4 = load i8*, i8** %group.addr, align 8, !dbg !14174
  %5 = load i8, i8* %4, align 1, !dbg !14175, !ctir !147
  %conv1 = sext i8 %5 to i32, !dbg !14175
  %cmp = icmp eq i32 %conv, %conv1, !dbg !14176
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14177

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14178
  %name3 = getelementptr inbounds %struct.userid, %struct.userid* %6, i32 0, i32 2, !dbg !14179, !ctir !1291
  %arraydecay4 = getelementptr inbounds [0 x i8], [0 x i8]* %name3, i64 0, i64 0, !dbg !14178, !ctir !469
  %7 = load i8*, i8** %group.addr, align 8, !dbg !14180
  %call = call i32 @strcmp(i8* %arraydecay4, i8* %7) #16, !dbg !14181
  %tobool5 = icmp ne i32 %call, 0, !dbg !14181
  br i1 %tobool5, label %if.end, label %if.then, !dbg !14182

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14183
  %id = getelementptr inbounds %struct.userid, %struct.userid* %8, i32 0, i32 0, !dbg !14184, !ctir !1291
  %g = bitcast %union.anon.12* %id to i32*, !dbg !14185
  store i32* %g, i32** %retval, align 8, !dbg !14186
  br label %return, !dbg !14186

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !14187

for.inc:                                          ; preds = %if.end
  %9 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14188
  %next = getelementptr inbounds %struct.userid, %struct.userid* %9, i32 0, i32 1, !dbg !14189, !ctir !1291
  %10 = load %struct.userid*, %struct.userid** %next, align 8, !dbg !14189, !ctir !1290
  store %struct.userid* %10, %struct.userid** %tail, align 8, !dbg !14190
  br label %for.cond, !dbg !14191, !llvm.loop !14192

for.end:                                          ; preds = %for.cond
  %11 = load %struct.userid*, %struct.userid** @nogroup_alist, align 8, !dbg !14194
  store %struct.userid* %11, %struct.userid** %tail, align 8, !dbg !14196
  br label %for.cond6, !dbg !14197

for.cond6:                                        ; preds = %for.inc22, %for.end
  %12 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14198
  %tobool7 = icmp ne %struct.userid* %12, null, !dbg !14200
  br i1 %tobool7, label %for.body8, label %for.end24, !dbg !14200

for.body8:                                        ; preds = %for.cond6
  %13 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14201
  %name9 = getelementptr inbounds %struct.userid, %struct.userid* %13, i32 0, i32 2, !dbg !14203, !ctir !1291
  %arraydecay10 = getelementptr inbounds [0 x i8], [0 x i8]* %name9, i64 0, i64 0, !dbg !14204, !ctir !469
  %14 = load i8, i8* %arraydecay10, align 8, !dbg !14204, !ctir !144
  %conv11 = sext i8 %14 to i32, !dbg !14204
  %15 = load i8*, i8** %group.addr, align 8, !dbg !14205
  %16 = load i8, i8* %15, align 1, !dbg !14206, !ctir !147
  %conv12 = sext i8 %16 to i32, !dbg !14206
  %cmp13 = icmp eq i32 %conv11, %conv12, !dbg !14207
  br i1 %cmp13, label %land.lhs.true15, label %if.end21, !dbg !14208

land.lhs.true15:                                  ; preds = %for.body8
  %17 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14209
  %name16 = getelementptr inbounds %struct.userid, %struct.userid* %17, i32 0, i32 2, !dbg !14210, !ctir !1291
  %arraydecay17 = getelementptr inbounds [0 x i8], [0 x i8]* %name16, i64 0, i64 0, !dbg !14209, !ctir !469
  %18 = load i8*, i8** %group.addr, align 8, !dbg !14211
  %call18 = call i32 @strcmp(i8* %arraydecay17, i8* %18) #16, !dbg !14212
  %tobool19 = icmp ne i32 %call18, 0, !dbg !14212
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !14213

if.then20:                                        ; preds = %land.lhs.true15
  store i32* null, i32** %retval, align 8, !dbg !14214
  br label %return, !dbg !14214

if.end21:                                         ; preds = %land.lhs.true15, %for.body8
  br label %for.inc22, !dbg !14215

for.inc22:                                        ; preds = %if.end21
  %19 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14216
  %next23 = getelementptr inbounds %struct.userid, %struct.userid* %19, i32 0, i32 1, !dbg !14217, !ctir !1291
  %20 = load %struct.userid*, %struct.userid** %next23, align 8, !dbg !14217, !ctir !1290
  store %struct.userid* %20, %struct.userid** %tail, align 8, !dbg !14218
  br label %for.cond6, !dbg !14219, !llvm.loop !14220

for.end24:                                        ; preds = %for.cond6
  %21 = load i8*, i8** %group.addr, align 8, !dbg !14222
  %call25 = call %struct.group* @getgrnam(i8* %21), !dbg !14223
  store %struct.group* %call25, %struct.group** %grent, align 8, !dbg !14224
  %22 = load i8*, i8** %group.addr, align 8, !dbg !14225
  %call26 = call i64 @strlen(i8* %22) #16, !dbg !14225
  %add = add i64 %call26, 1, !dbg !14225
  %add27 = add i64 23, %add, !dbg !14225
  %and = and i64 %add27, -8, !dbg !14225
  %call28 = call noalias i8* @xmalloc(i64 %and), !dbg !14226
  %23 = bitcast i8* %call28 to %struct.userid*, !dbg !14226
  store %struct.userid* %23, %struct.userid** %tail, align 8, !dbg !14227
  %24 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14228
  %name29 = getelementptr inbounds %struct.userid, %struct.userid* %24, i32 0, i32 2, !dbg !14229, !ctir !1291
  %arraydecay30 = getelementptr inbounds [0 x i8], [0 x i8]* %name29, i64 0, i64 0, !dbg !14228, !ctir !469
  %25 = load i8*, i8** %group.addr, align 8, !dbg !14230
  %call31 = call i8* @strcpy(i8* %arraydecay30, i8* %25) #13, !dbg !14231
  %26 = load %struct.group*, %struct.group** %grent, align 8, !dbg !14232
  %tobool32 = icmp ne %struct.group* %26, null, !dbg !14232
  br i1 %tobool32, label %if.then33, label %if.end39, !dbg !14234

if.then33:                                        ; preds = %for.end24
  %27 = load %struct.group*, %struct.group** %grent, align 8, !dbg !14235
  %gr_gid = getelementptr inbounds %struct.group, %struct.group* %27, i32 0, i32 2, !dbg !14237, !ctir !1315
  %28 = load i32, i32* %gr_gid, align 8, !dbg !14237, !ctir !205
  %29 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14238
  %id34 = getelementptr inbounds %struct.userid, %struct.userid* %29, i32 0, i32 0, !dbg !14239, !ctir !1291
  %g35 = bitcast %union.anon.12* %id34 to i32*, !dbg !14240
  store i32 %28, i32* %g35, align 8, !dbg !14241, !ctir !1295
  %30 = load %struct.userid*, %struct.userid** @group_alist, align 8, !dbg !14242
  %31 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14243
  %next36 = getelementptr inbounds %struct.userid, %struct.userid* %31, i32 0, i32 1, !dbg !14244, !ctir !1291
  store %struct.userid* %30, %struct.userid** %next36, align 8, !dbg !14245, !ctir !1290
  %32 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14246
  store %struct.userid* %32, %struct.userid** @group_alist, align 8, !dbg !14247
  %33 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14248
  %id37 = getelementptr inbounds %struct.userid, %struct.userid* %33, i32 0, i32 0, !dbg !14249, !ctir !1291
  %g38 = bitcast %union.anon.12* %id37 to i32*, !dbg !14250
  store i32* %g38, i32** %retval, align 8, !dbg !14251
  br label %return, !dbg !14251

if.end39:                                         ; preds = %for.end24
  %34 = load %struct.userid*, %struct.userid** @nogroup_alist, align 8, !dbg !14252
  %35 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14253
  %next40 = getelementptr inbounds %struct.userid, %struct.userid* %35, i32 0, i32 1, !dbg !14254, !ctir !1291
  store %struct.userid* %34, %struct.userid** %next40, align 8, !dbg !14255, !ctir !1290
  %36 = load %struct.userid*, %struct.userid** %tail, align 8, !dbg !14256
  store %struct.userid* %36, %struct.userid** @nogroup_alist, align 8, !dbg !14257
  store i32* null, i32** %retval, align 8, !dbg !14258
  br label %return, !dbg !14258

return:                                           ; preds = %if.end39, %if.then33, %if.then20, %if.then
  %37 = load i32*, i32** %retval, align 8, !dbg !14259
  ret i32* %37, !dbg !14259
}

declare dso_local %struct.group* @getgrnam(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @imaxtostr(i64 %i, i8* %buf) #0 !dbg !14260 {
entry:
  %i.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !143
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !14264, metadata !DIExpression()), !dbg !14265
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !14266, metadata !DIExpression()), !dbg !14267
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14268, metadata !DIExpression()), !dbg !14269
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !14270
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 20, !dbg !14271, !ctir !144
  store i8* %add.ptr, i8** %p, align 8, !dbg !14269
  %1 = load i8*, i8** %p, align 8, !dbg !14272
  store i8 0, i8* %1, align 1, !dbg !14273, !ctir !144
  %2 = load i64, i64* %i.addr, align 8, !dbg !14274
  %cmp = icmp slt i64 %2, 0, !dbg !14276
  br i1 %cmp, label %if.then, label %if.else, !dbg !14277

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !14278

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i64, i64* %i.addr, align 8, !dbg !14280
  %rem = srem i64 %3, 10, !dbg !14281
  %sub = sub nsw i64 48, %rem, !dbg !14282
  %conv = trunc i64 %sub to i8, !dbg !14283
  %4 = load i8*, i8** %p, align 8, !dbg !14284
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !14284, !ctir !144
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !14284
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !14285, !ctir !144
  br label %do.cond, !dbg !14286

do.cond:                                          ; preds = %do.body
  %5 = load i64, i64* %i.addr, align 8, !dbg !14287
  %div = sdiv i64 %5, 10, !dbg !14287
  store i64 %div, i64* %i.addr, align 8, !dbg !14287
  %cmp1 = icmp ne i64 %div, 0, !dbg !14288
  br i1 %cmp1, label %do.body, label %do.end, !dbg !14286, !llvm.loop !14289

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %p, align 8, !dbg !14291
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !14291, !ctir !144
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !14291
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !14292, !ctir !144
  br label %if.end, !dbg !14293

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !14294

do.body4:                                         ; preds = %do.cond8, %if.else
  %7 = load i64, i64* %i.addr, align 8, !dbg !14296
  %rem5 = srem i64 %7, 10, !dbg !14297
  %add = add nsw i64 48, %rem5, !dbg !14298
  %conv6 = trunc i64 %add to i8, !dbg !14299
  %8 = load i8*, i8** %p, align 8, !dbg !14300
  %incdec.ptr7 = getelementptr inbounds i8, i8* %8, i32 -1, !dbg !14300, !ctir !144
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !14300
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !14301, !ctir !144
  br label %do.cond8, !dbg !14302

do.cond8:                                         ; preds = %do.body4
  %9 = load i64, i64* %i.addr, align 8, !dbg !14303
  %div9 = sdiv i64 %9, 10, !dbg !14303
  store i64 %div9, i64* %i.addr, align 8, !dbg !14303
  %cmp10 = icmp ne i64 %div9, 0, !dbg !14304
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !14302, !llvm.loop !14305

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %10 = load i8*, i8** %p, align 8, !dbg !14307
  ret i8* %10, !dbg !14308
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @umaxtostr(i64 %i, i8* %buf) #0 !dbg !14309 {
entry:
  %i.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !143
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !14312, metadata !DIExpression()), !dbg !14313
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !14314, metadata !DIExpression()), !dbg !14315
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14316, metadata !DIExpression()), !dbg !14317
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !14318
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 20, !dbg !14319, !ctir !144
  store i8* %add.ptr, i8** %p, align 8, !dbg !14317
  %1 = load i8*, i8** %p, align 8, !dbg !14320
  store i8 0, i8* %1, align 1, !dbg !14321, !ctir !144
  %2 = load i64, i64* %i.addr, align 8, !dbg !14322
  %cmp = icmp ult i64 %2, 0, !dbg !14324
  br i1 %cmp, label %if.then, label %if.else, !dbg !14325

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !14326

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i64, i64* %i.addr, align 8, !dbg !14328
  %rem = urem i64 %3, 10, !dbg !14329
  %sub = sub i64 48, %rem, !dbg !14330
  %conv = trunc i64 %sub to i8, !dbg !14331
  %4 = load i8*, i8** %p, align 8, !dbg !14332
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !14332, !ctir !144
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !14332
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !14333, !ctir !144
  br label %do.cond, !dbg !14334

do.cond:                                          ; preds = %do.body
  %5 = load i64, i64* %i.addr, align 8, !dbg !14335
  %div = udiv i64 %5, 10, !dbg !14335
  store i64 %div, i64* %i.addr, align 8, !dbg !14335
  %cmp1 = icmp ne i64 %div, 0, !dbg !14336
  br i1 %cmp1, label %do.body, label %do.end, !dbg !14334, !llvm.loop !14337

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %p, align 8, !dbg !14339
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !14339, !ctir !144
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !14339
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !14340, !ctir !144
  br label %if.end, !dbg !14341

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !14342

do.body4:                                         ; preds = %do.cond8, %if.else
  %7 = load i64, i64* %i.addr, align 8, !dbg !14344
  %rem5 = urem i64 %7, 10, !dbg !14345
  %add = add i64 48, %rem5, !dbg !14346
  %conv6 = trunc i64 %add to i8, !dbg !14347
  %8 = load i8*, i8** %p, align 8, !dbg !14348
  %incdec.ptr7 = getelementptr inbounds i8, i8* %8, i32 -1, !dbg !14348, !ctir !144
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !14348
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !14349, !ctir !144
  br label %do.cond8, !dbg !14350

do.cond8:                                         ; preds = %do.body4
  %9 = load i64, i64* %i.addr, align 8, !dbg !14351
  %div9 = udiv i64 %9, 10, !dbg !14351
  store i64 %div9, i64* %i.addr, align 8, !dbg !14351
  %cmp10 = icmp ne i64 %div9, 0, !dbg !14352
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !14350, !llvm.loop !14353

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %10 = load i8*, i8** %p, align 8, !dbg !14355
  ret i8* %10, !dbg !14356
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @mbsalign(i8* %src, i8* %dest, i64 %dest_size, i64* %width, i32 %align, i32 %flags) #0 !dbg !14357 {
entry:
  %src.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %dest_size.addr = alloca i64, align 8
  %width.addr = alloca i64*, align 8
  %align.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %ret = alloca i64, align 8, !ctir !149
  %src_size = alloca i64, align 8, !ctir !149
  %newstr = alloca i8*, align 8, !ctir !143
  %str_wc = alloca i32*, align 8, !ctir !1595
  %str_to_print = alloca i8*, align 8, !ctir !146
  %n_cols = alloca i64, align 8, !ctir !149
  %n_used_bytes = alloca i64, align 8, !ctir !149
  %n_spaces = alloca i64, align 8, !ctir !149
  %conversion = alloca i8, align 1, !ctir !141
  %wc_enabled = alloca i8, align 1, !ctir !141
  %src_chars = alloca i64, align 8, !ctir !149
  %start_spaces = alloca i64, align 8, !ctir !149
  %end_spaces = alloca i64, align 8, !ctir !149
  %space_left = alloca i64, align 8, !ctir !149
  %dest_end = alloca i8*, align 8, !ctir !143
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !14361, metadata !DIExpression()), !dbg !14362
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !14363, metadata !DIExpression()), !dbg !14364
  store i64 %dest_size, i64* %dest_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %dest_size.addr, metadata !14365, metadata !DIExpression()), !dbg !14366
  store i64* %width, i64** %width.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %width.addr, metadata !14367, metadata !DIExpression()), !dbg !14368
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !14369, metadata !DIExpression()), !dbg !14370
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14371, metadata !DIExpression()), !dbg !14372
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !14373, metadata !DIExpression()), !dbg !14374
  store i64 -1, i64* %ret, align 8, !dbg !14374
  call void @llvm.dbg.declare(metadata i64* %src_size, metadata !14375, metadata !DIExpression()), !dbg !14376
  %0 = load i8*, i8** %src.addr, align 8, !dbg !14377
  %call = call i64 @strlen(i8* %0) #16, !dbg !14378
  %add = add i64 %call, 1, !dbg !14379
  store i64 %add, i64* %src_size, align 8, !dbg !14376
  call void @llvm.dbg.declare(metadata i8** %newstr, metadata !14380, metadata !DIExpression()), !dbg !14381
  store i8* null, i8** %newstr, align 8, !dbg !14381
  call void @llvm.dbg.declare(metadata i32** %str_wc, metadata !14382, metadata !DIExpression()), !dbg !14383
  store i32* null, i32** %str_wc, align 8, !dbg !14383
  call void @llvm.dbg.declare(metadata i8** %str_to_print, metadata !14384, metadata !DIExpression()), !dbg !14385
  %1 = load i8*, i8** %src.addr, align 8, !dbg !14386
  store i8* %1, i8** %str_to_print, align 8, !dbg !14385
  call void @llvm.dbg.declare(metadata i64* %n_cols, metadata !14387, metadata !DIExpression()), !dbg !14388
  %2 = load i64, i64* %src_size, align 8, !dbg !14389
  %sub = sub i64 %2, 1, !dbg !14390
  store i64 %sub, i64* %n_cols, align 8, !dbg !14388
  call void @llvm.dbg.declare(metadata i64* %n_used_bytes, metadata !14391, metadata !DIExpression()), !dbg !14392
  %3 = load i64, i64* %n_cols, align 8, !dbg !14393
  store i64 %3, i64* %n_used_bytes, align 8, !dbg !14392
  call void @llvm.dbg.declare(metadata i64* %n_spaces, metadata !14394, metadata !DIExpression()), !dbg !14395
  store i64 0, i64* %n_spaces, align 8, !dbg !14395
  call void @llvm.dbg.declare(metadata i8* %conversion, metadata !14396, metadata !DIExpression()), !dbg !14397
  store i8 0, i8* %conversion, align 1, !dbg !14397
  call void @llvm.dbg.declare(metadata i8* %wc_enabled, metadata !14398, metadata !DIExpression()), !dbg !14399
  store i8 0, i8* %wc_enabled, align 1, !dbg !14399
  %4 = load i32, i32* %flags.addr, align 4, !dbg !14400
  %and = and i32 %4, 2, !dbg !14402
  %tobool = icmp ne i32 %and, 0, !dbg !14402
  br i1 %tobool, label %if.end24, label %land.lhs.true, !dbg !14403

land.lhs.true:                                    ; preds = %entry
  %call1 = call i64 @__ctype_get_mb_cur_max() #13, !dbg !14404
  %cmp = icmp ugt i64 %call1, 1, !dbg !14405
  br i1 %cmp, label %if.then, label %if.end24, !dbg !14406

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %src_chars, metadata !14407, metadata !DIExpression()), !dbg !14409
  %5 = load i8*, i8** %src.addr, align 8, !dbg !14410
  %call2 = call i64 @mbstowcs(i32* null, i8* %5, i64 0) #13, !dbg !14411
  store i64 %call2, i64* %src_chars, align 8, !dbg !14409
  %6 = load i64, i64* %src_chars, align 8, !dbg !14412
  %cmp3 = icmp eq i64 %6, -1, !dbg !14414
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !14415

if.then4:                                         ; preds = %if.then
  %7 = load i32, i32* %flags.addr, align 4, !dbg !14416
  %and5 = and i32 %7, 1, !dbg !14419
  %tobool6 = icmp ne i32 %and5, 0, !dbg !14419
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !14420

if.then7:                                         ; preds = %if.then4
  br label %mbsalign_unibyte, !dbg !14421

if.else:                                          ; preds = %if.then4
  br label %mbsalign_cleanup, !dbg !14422

if.end:                                           ; preds = %if.then
  %8 = load i64, i64* %src_chars, align 8, !dbg !14423
  %add8 = add i64 %8, 1, !dbg !14423
  store i64 %add8, i64* %src_chars, align 8, !dbg !14423
  %9 = load i64, i64* %src_chars, align 8, !dbg !14424
  %mul = mul i64 %9, 4, !dbg !14425
  %call9 = call noalias i8* @malloc(i64 %mul) #13, !dbg !14426
  %10 = bitcast i8* %call9 to i32*, !dbg !14426
  store i32* %10, i32** %str_wc, align 8, !dbg !14427
  %11 = load i32*, i32** %str_wc, align 8, !dbg !14428
  %cmp10 = icmp eq i32* %11, null, !dbg !14430
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !14431

if.then11:                                        ; preds = %if.end
  %12 = load i32, i32* %flags.addr, align 4, !dbg !14432
  %and12 = and i32 %12, 1, !dbg !14435
  %tobool13 = icmp ne i32 %and12, 0, !dbg !14435
  br i1 %tobool13, label %if.then14, label %if.else15, !dbg !14436

if.then14:                                        ; preds = %if.then11
  br label %mbsalign_unibyte, !dbg !14437

if.else15:                                        ; preds = %if.then11
  br label %mbsalign_cleanup, !dbg !14438

if.end16:                                         ; preds = %if.end
  %13 = load i32*, i32** %str_wc, align 8, !dbg !14439
  %14 = load i8*, i8** %src.addr, align 8, !dbg !14441
  %15 = load i64, i64* %src_chars, align 8, !dbg !14442
  %call17 = call i64 @mbstowcs(i32* %13, i8* %14, i64 %15) #13, !dbg !14443
  %cmp18 = icmp ne i64 %call17, 0, !dbg !14444
  br i1 %cmp18, label %if.then19, label %if.end23, !dbg !14445

if.then19:                                        ; preds = %if.end16
  %16 = load i32*, i32** %str_wc, align 8, !dbg !14446
  %17 = load i64, i64* %src_chars, align 8, !dbg !14448
  %sub20 = sub i64 %17, 1, !dbg !14449
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %sub20, !dbg !14446, !ctir !1595
  store i32 0, i32* %arrayidx, align 4, !dbg !14450
  store i8 1, i8* %wc_enabled, align 1, !dbg !14451
  %18 = load i32*, i32** %str_wc, align 8, !dbg !14452
  %call21 = call zeroext i1 @wc_ensure_printable(i32* %18), !dbg !14453
  %frombool = zext i1 %call21 to i8, !dbg !14454
  store i8 %frombool, i8* %conversion, align 1, !dbg !14454
  %19 = load i32*, i32** %str_wc, align 8, !dbg !14455
  %20 = load i64, i64* %src_chars, align 8, !dbg !14456
  %call22 = call i32 @wcswidth(i32* %19, i64 %20) #13, !dbg !14457
  %conv = sext i32 %call22 to i64, !dbg !14457
  store i64 %conv, i64* %n_cols, align 8, !dbg !14458
  br label %if.end23, !dbg !14459

if.end23:                                         ; preds = %if.then19, %if.end16
  br label %if.end24, !dbg !14460

if.end24:                                         ; preds = %if.end23, %land.lhs.true, %entry
  %21 = load i8, i8* %wc_enabled, align 1, !dbg !14461
  %tobool25 = trunc i8 %21 to i1, !dbg !14461
  br i1 %tobool25, label %land.lhs.true27, label %if.end49, !dbg !14463

land.lhs.true27:                                  ; preds = %if.end24
  %22 = load i8, i8* %conversion, align 1, !dbg !14464
  %tobool28 = trunc i8 %22 to i1, !dbg !14464
  br i1 %tobool28, label %if.then32, label %lor.lhs.false, !dbg !14465

lor.lhs.false:                                    ; preds = %land.lhs.true27
  %23 = load i64, i64* %n_cols, align 8, !dbg !14466
  %24 = load i64*, i64** %width.addr, align 8, !dbg !14467
  %25 = load i64, i64* %24, align 8, !dbg !14468, !ctir !149
  %cmp30 = icmp ugt i64 %23, %25, !dbg !14469
  br i1 %cmp30, label %if.then32, label %if.end49, !dbg !14470

if.then32:                                        ; preds = %lor.lhs.false, %land.lhs.true27
  %26 = load i8, i8* %conversion, align 1, !dbg !14471
  %tobool33 = trunc i8 %26 to i1, !dbg !14471
  br i1 %tobool33, label %if.then34, label %if.end37, !dbg !14474

if.then34:                                        ; preds = %if.then32
  %27 = load i32*, i32** %str_wc, align 8, !dbg !14475
  %call35 = call i64 @wcstombs(i8* null, i32* %27, i64 0) #13, !dbg !14477
  %add36 = add i64 %call35, 1, !dbg !14478
  store i64 %add36, i64* %src_size, align 8, !dbg !14479
  br label %if.end37, !dbg !14480

if.end37:                                         ; preds = %if.then34, %if.then32
  %28 = load i64, i64* %src_size, align 8, !dbg !14481
  %call38 = call noalias i8* @malloc(i64 %28) #13, !dbg !14482
  store i8* %call38, i8** %newstr, align 8, !dbg !14483
  %29 = load i8*, i8** %newstr, align 8, !dbg !14484
  %cmp39 = icmp eq i8* %29, null, !dbg !14486
  br i1 %cmp39, label %if.then41, label %if.end46, !dbg !14487

if.then41:                                        ; preds = %if.end37
  %30 = load i32, i32* %flags.addr, align 4, !dbg !14488
  %and42 = and i32 %30, 1, !dbg !14491
  %tobool43 = icmp ne i32 %and42, 0, !dbg !14491
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !14492

if.then44:                                        ; preds = %if.then41
  br label %mbsalign_unibyte, !dbg !14493

if.else45:                                        ; preds = %if.then41
  br label %mbsalign_cleanup, !dbg !14494

if.end46:                                         ; preds = %if.end37
  %31 = load i8*, i8** %newstr, align 8, !dbg !14495
  store i8* %31, i8** %str_to_print, align 8, !dbg !14496
  %32 = load i32*, i32** %str_wc, align 8, !dbg !14497
  %33 = load i64*, i64** %width.addr, align 8, !dbg !14498
  %34 = load i64, i64* %33, align 8, !dbg !14499, !ctir !149
  %call47 = call i64 @wc_truncate(i32* %32, i64 %34), !dbg !14500
  store i64 %call47, i64* %n_cols, align 8, !dbg !14501
  %35 = load i8*, i8** %newstr, align 8, !dbg !14502
  %36 = load i32*, i32** %str_wc, align 8, !dbg !14503
  %37 = load i64, i64* %src_size, align 8, !dbg !14504
  %call48 = call i64 @wcstombs(i8* %35, i32* %36, i64 %37) #13, !dbg !14505
  store i64 %call48, i64* %n_used_bytes, align 8, !dbg !14506
  br label %if.end49, !dbg !14507

if.end49:                                         ; preds = %if.end46, %lor.lhs.false, %if.end24
  br label %mbsalign_unibyte, !dbg !14508

mbsalign_unibyte:                                 ; preds = %if.end49, %if.then44, %if.then14, %if.then7
  call void @llvm.dbg.label(metadata !14509), !dbg !14510
  %38 = load i64, i64* %n_cols, align 8, !dbg !14511
  %39 = load i64*, i64** %width.addr, align 8, !dbg !14513
  %40 = load i64, i64* %39, align 8, !dbg !14514, !ctir !149
  %cmp50 = icmp ugt i64 %38, %40, !dbg !14515
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !14516

if.then52:                                        ; preds = %mbsalign_unibyte
  %41 = load i64*, i64** %width.addr, align 8, !dbg !14517
  %42 = load i64, i64* %41, align 8, !dbg !14519, !ctir !149
  store i64 %42, i64* %n_cols, align 8, !dbg !14520
  %43 = load i64, i64* %n_cols, align 8, !dbg !14521
  store i64 %43, i64* %n_used_bytes, align 8, !dbg !14522
  br label %if.end53, !dbg !14523

if.end53:                                         ; preds = %if.then52, %mbsalign_unibyte
  %44 = load i64*, i64** %width.addr, align 8, !dbg !14524
  %45 = load i64, i64* %44, align 8, !dbg !14526, !ctir !149
  %46 = load i64, i64* %n_cols, align 8, !dbg !14527
  %cmp54 = icmp ugt i64 %45, %46, !dbg !14528
  br i1 %cmp54, label %if.then56, label %if.end58, !dbg !14529

if.then56:                                        ; preds = %if.end53
  %47 = load i64*, i64** %width.addr, align 8, !dbg !14530
  %48 = load i64, i64* %47, align 8, !dbg !14531, !ctir !149
  %49 = load i64, i64* %n_cols, align 8, !dbg !14532
  %sub57 = sub i64 %48, %49, !dbg !14533
  store i64 %sub57, i64* %n_spaces, align 8, !dbg !14534
  br label %if.end58, !dbg !14535

if.end58:                                         ; preds = %if.then56, %if.end53
  %50 = load i64, i64* %n_cols, align 8, !dbg !14536
  %51 = load i64*, i64** %width.addr, align 8, !dbg !14537
  store i64 %50, i64* %51, align 8, !dbg !14538, !ctir !149
  call void @llvm.dbg.declare(metadata i64* %start_spaces, metadata !14539, metadata !DIExpression()), !dbg !14541
  call void @llvm.dbg.declare(metadata i64* %end_spaces, metadata !14542, metadata !DIExpression()), !dbg !14543
  %52 = load i32, i32* %align.addr, align 4, !dbg !14544
  switch i32 %52, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb59
    i32 2, label %sw.bb60
  ], !dbg !14545

sw.bb:                                            ; preds = %if.end58
  store i64 0, i64* %start_spaces, align 8, !dbg !14546
  %53 = load i64, i64* %n_spaces, align 8, !dbg !14548
  store i64 %53, i64* %end_spaces, align 8, !dbg !14549
  br label %sw.epilog, !dbg !14550

sw.bb59:                                          ; preds = %if.end58
  %54 = load i64, i64* %n_spaces, align 8, !dbg !14551
  store i64 %54, i64* %start_spaces, align 8, !dbg !14552
  store i64 0, i64* %end_spaces, align 8, !dbg !14553
  br label %sw.epilog, !dbg !14554

sw.bb60:                                          ; preds = %if.end58
  br label %sw.default, !dbg !14554

sw.default:                                       ; preds = %if.end58, %sw.bb60
  %55 = load i64, i64* %n_spaces, align 8, !dbg !14555
  %div = udiv i64 %55, 2, !dbg !14556
  %56 = load i64, i64* %n_spaces, align 8, !dbg !14557
  %rem = urem i64 %56, 2, !dbg !14558
  %add61 = add i64 %div, %rem, !dbg !14559
  store i64 %add61, i64* %start_spaces, align 8, !dbg !14560
  %57 = load i64, i64* %n_spaces, align 8, !dbg !14561
  %div62 = udiv i64 %57, 2, !dbg !14562
  store i64 %div62, i64* %end_spaces, align 8, !dbg !14563
  br label %sw.epilog, !dbg !14564

sw.epilog:                                        ; preds = %sw.default, %sw.bb59, %sw.bb
  %58 = load i32, i32* %flags.addr, align 4, !dbg !14565
  %and63 = and i32 %58, 4, !dbg !14567
  %tobool64 = icmp ne i32 %and63, 0, !dbg !14567
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !14568

if.then65:                                        ; preds = %sw.epilog
  store i64 0, i64* %start_spaces, align 8, !dbg !14569
  br label %if.end66, !dbg !14570

if.end66:                                         ; preds = %if.then65, %sw.epilog
  %59 = load i32, i32* %flags.addr, align 4, !dbg !14571
  %and67 = and i32 %59, 8, !dbg !14573
  %tobool68 = icmp ne i32 %and67, 0, !dbg !14573
  br i1 %tobool68, label %if.then69, label %if.end70, !dbg !14574

if.then69:                                        ; preds = %if.end66
  store i64 0, i64* %end_spaces, align 8, !dbg !14575
  br label %if.end70, !dbg !14576

if.end70:                                         ; preds = %if.then69, %if.end66
  %60 = load i64, i64* %dest_size.addr, align 8, !dbg !14577
  %cmp71 = icmp ne i64 %60, 0, !dbg !14579
  br i1 %cmp71, label %if.then73, label %if.end80, !dbg !14580

if.then73:                                        ; preds = %if.end70
  call void @llvm.dbg.declare(metadata i64* %space_left, metadata !14581, metadata !DIExpression()), !dbg !14583
  call void @llvm.dbg.declare(metadata i8** %dest_end, metadata !14584, metadata !DIExpression()), !dbg !14585
  %61 = load i8*, i8** %dest.addr, align 8, !dbg !14586
  %62 = load i64, i64* %dest_size.addr, align 8, !dbg !14587
  %add.ptr = getelementptr inbounds i8, i8* %61, i64 %62, !dbg !14588, !ctir !144
  %add.ptr74 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !14589, !ctir !144
  store i8* %add.ptr74, i8** %dest_end, align 8, !dbg !14585
  %63 = load i8*, i8** %dest.addr, align 8, !dbg !14590
  %64 = load i8*, i8** %dest_end, align 8, !dbg !14591
  %65 = load i64, i64* %start_spaces, align 8, !dbg !14592
  %call75 = call i8* @mbs_align_pad(i8* %63, i8* %64, i64 %65), !dbg !14593
  store i8* %call75, i8** %dest.addr, align 8, !dbg !14594
  %66 = load i8*, i8** %dest_end, align 8, !dbg !14595
  %67 = load i8*, i8** %dest.addr, align 8, !dbg !14596
  %sub.ptr.lhs.cast = ptrtoint i8* %66 to i64, !dbg !14597
  %sub.ptr.rhs.cast = ptrtoint i8* %67 to i64, !dbg !14597
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !14597
  store i64 %sub.ptr.sub, i64* %space_left, align 8, !dbg !14598
  %68 = load i8*, i8** %dest.addr, align 8, !dbg !14599
  %69 = load i8*, i8** %str_to_print, align 8, !dbg !14600
  %70 = load i64, i64* %n_used_bytes, align 8, !dbg !14601
  %71 = load i64, i64* %space_left, align 8, !dbg !14601
  %cmp76 = icmp ult i64 %70, %71, !dbg !14601
  br i1 %cmp76, label %cond.true, label %cond.false, !dbg !14601

cond.true:                                        ; preds = %if.then73
  %72 = load i64, i64* %n_used_bytes, align 8, !dbg !14601
  br label %cond.end, !dbg !14601

cond.false:                                       ; preds = %if.then73
  %73 = load i64, i64* %space_left, align 8, !dbg !14601
  br label %cond.end, !dbg !14601

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %72, %cond.true ], [ %73, %cond.false ], !dbg !14601
  %call78 = call i8* @mempcpy(i8* %68, i8* %69, i64 %cond) #13, !dbg !14602
  store i8* %call78, i8** %dest.addr, align 8, !dbg !14603
  %74 = load i8*, i8** %dest.addr, align 8, !dbg !14604
  %75 = load i8*, i8** %dest_end, align 8, !dbg !14605
  %76 = load i64, i64* %end_spaces, align 8, !dbg !14606
  %call79 = call i8* @mbs_align_pad(i8* %74, i8* %75, i64 %76), !dbg !14607
  br label %if.end80, !dbg !14608

if.end80:                                         ; preds = %cond.end, %if.end70
  %77 = load i64, i64* %n_used_bytes, align 8, !dbg !14609
  %78 = load i64, i64* %start_spaces, align 8, !dbg !14610
  %79 = load i64, i64* %end_spaces, align 8, !dbg !14611
  %add81 = add i64 %78, %79, !dbg !14612
  %mul82 = mul i64 %add81, 1, !dbg !14613
  %add83 = add i64 %77, %mul82, !dbg !14614
  store i64 %add83, i64* %ret, align 8, !dbg !14615
  br label %mbsalign_cleanup, !dbg !14616

mbsalign_cleanup:                                 ; preds = %if.end80, %if.else45, %if.else15, %if.else
  call void @llvm.dbg.label(metadata !14617), !dbg !14618
  %80 = load i32*, i32** %str_wc, align 8, !dbg !14619
  %81 = bitcast i32* %80 to i8*, !dbg !14619
  call void @free(i8* %81) #13, !dbg !14620
  %82 = load i8*, i8** %newstr, align 8, !dbg !14621
  call void @free(i8* %82) #13, !dbg !14622
  %83 = load i64, i64* %ret, align 8, !dbg !14623
  ret i64 %83, !dbg !14624
}

; Function Attrs: nounwind
declare dso_local i64 @mbstowcs(i32*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @wc_ensure_printable(i32* %wchars) #0 !dbg !14625 {
entry:
  %wchars.addr = alloca i32*, align 8
  %replaced = alloca i8, align 1, !ctir !141
  %wc = alloca i32*, align 8, !ctir !1595
  store i32* %wchars, i32** %wchars.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %wchars.addr, metadata !14628, metadata !DIExpression()), !dbg !14629
  call void @llvm.dbg.declare(metadata i8* %replaced, metadata !14630, metadata !DIExpression()), !dbg !14631
  store i8 0, i8* %replaced, align 1, !dbg !14631
  call void @llvm.dbg.declare(metadata i32** %wc, metadata !14632, metadata !DIExpression()), !dbg !14633
  %0 = load i32*, i32** %wchars.addr, align 8, !dbg !14634
  store i32* %0, i32** %wc, align 8, !dbg !14633
  br label %while.cond, !dbg !14635

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i32*, i32** %wc, align 8, !dbg !14636
  %2 = load i32, i32* %1, align 4, !dbg !14637, !ctir !764
  %tobool = icmp ne i32 %2, 0, !dbg !14635
  br i1 %tobool, label %while.body, label %while.end, !dbg !14635

while.body:                                       ; preds = %while.cond
  %3 = load i32*, i32** %wc, align 8, !dbg !14638
  %4 = load i32, i32* %3, align 4, !dbg !14641, !ctir !764
  %call = call i32 @iswprint(i32 %4) #13, !dbg !14642
  %tobool1 = icmp ne i32 %call, 0, !dbg !14642
  br i1 %tobool1, label %if.end, label %if.then, !dbg !14643

if.then:                                          ; preds = %while.body
  %5 = load i32*, i32** %wc, align 8, !dbg !14644
  store i32 65533, i32* %5, align 4, !dbg !14646, !ctir !764
  store i8 1, i8* %replaced, align 1, !dbg !14647
  br label %if.end, !dbg !14648

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i32*, i32** %wc, align 8, !dbg !14649
  %incdec.ptr = getelementptr inbounds i32, i32* %6, i32 1, !dbg !14649, !ctir !764
  store i32* %incdec.ptr, i32** %wc, align 8, !dbg !14649
  br label %while.cond, !dbg !14635, !llvm.loop !14650

while.end:                                        ; preds = %while.cond
  %7 = load i8, i8* %replaced, align 1, !dbg !14652
  %tobool2 = trunc i8 %7 to i1, !dbg !14652
  ret i1 %tobool2, !dbg !14653
}

; Function Attrs: nounwind
declare dso_local i32 @wcswidth(i32*, i64) #2

; Function Attrs: nounwind
declare dso_local i64 @wcstombs(i8*, i32*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @wc_truncate(i32* %wc, i64 %width) #0 !dbg !14654 {
entry:
  %wc.addr = alloca i32*, align 8
  %width.addr = alloca i64, align 8
  %cells = alloca i64, align 8, !ctir !149
  %next_cells = alloca i32, align 4, !ctir !27
  store i32* %wc, i32** %wc.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %wc.addr, metadata !14657, metadata !DIExpression()), !dbg !14658
  store i64 %width, i64* %width.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %width.addr, metadata !14659, metadata !DIExpression()), !dbg !14660
  call void @llvm.dbg.declare(metadata i64* %cells, metadata !14661, metadata !DIExpression()), !dbg !14662
  store i64 0, i64* %cells, align 8, !dbg !14662
  call void @llvm.dbg.declare(metadata i32* %next_cells, metadata !14663, metadata !DIExpression()), !dbg !14664
  store i32 0, i32* %next_cells, align 4, !dbg !14664
  br label %while.cond, !dbg !14665

while.cond:                                       ; preds = %if.end4, %entry
  %0 = load i32*, i32** %wc.addr, align 8, !dbg !14666
  %1 = load i32, i32* %0, align 4, !dbg !14667, !ctir !764
  %tobool = icmp ne i32 %1, 0, !dbg !14665
  br i1 %tobool, label %while.body, label %while.end, !dbg !14665

while.body:                                       ; preds = %while.cond
  %2 = load i32*, i32** %wc.addr, align 8, !dbg !14668
  %3 = load i32, i32* %2, align 4, !dbg !14670, !ctir !764
  %call = call i32 @wcwidth(i32 %3) #13, !dbg !14671
  store i32 %call, i32* %next_cells, align 4, !dbg !14672
  %4 = load i32, i32* %next_cells, align 4, !dbg !14673
  %cmp = icmp eq i32 %4, -1, !dbg !14675
  br i1 %cmp, label %if.then, label %if.end, !dbg !14676

if.then:                                          ; preds = %while.body
  %5 = load i32*, i32** %wc.addr, align 8, !dbg !14677
  store i32 65533, i32* %5, align 4, !dbg !14679, !ctir !764
  store i32 1, i32* %next_cells, align 4, !dbg !14680
  br label %if.end, !dbg !14681

if.end:                                           ; preds = %if.then, %while.body
  %6 = load i64, i64* %cells, align 8, !dbg !14682
  %7 = load i32, i32* %next_cells, align 4, !dbg !14684
  %conv = sext i32 %7 to i64, !dbg !14684
  %add = add i64 %6, %conv, !dbg !14685
  %8 = load i64, i64* %width.addr, align 8, !dbg !14686
  %cmp1 = icmp ugt i64 %add, %8, !dbg !14687
  br i1 %cmp1, label %if.then3, label %if.end4, !dbg !14688

if.then3:                                         ; preds = %if.end
  br label %while.end, !dbg !14689

if.end4:                                          ; preds = %if.end
  %9 = load i32, i32* %next_cells, align 4, !dbg !14690
  %conv5 = sext i32 %9 to i64, !dbg !14690
  %10 = load i64, i64* %cells, align 8, !dbg !14691
  %add6 = add i64 %10, %conv5, !dbg !14691
  store i64 %add6, i64* %cells, align 8, !dbg !14691
  %11 = load i32*, i32** %wc.addr, align 8, !dbg !14692
  %incdec.ptr = getelementptr inbounds i32, i32* %11, i32 1, !dbg !14692, !ctir !764
  store i32* %incdec.ptr, i32** %wc.addr, align 8, !dbg !14692
  br label %while.cond, !dbg !14665, !llvm.loop !14693

while.end:                                        ; preds = %if.then3, %while.cond
  %12 = load i32*, i32** %wc.addr, align 8, !dbg !14695
  store i32 0, i32* %12, align 4, !dbg !14696, !ctir !764
  %13 = load i64, i64* %cells, align 8, !dbg !14697
  ret i64 %13, !dbg !14698
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @mbs_align_pad(i8* %dest, i8* %dest_end, i64 %n_spaces) #0 !dbg !14699 {
entry:
  %dest.addr = alloca i8*, align 8
  %dest_end.addr = alloca i8*, align 8
  %n_spaces.addr = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !14702, metadata !DIExpression()), !dbg !14703
  store i8* %dest_end, i8** %dest_end.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest_end.addr, metadata !14704, metadata !DIExpression()), !dbg !14705
  store i64 %n_spaces, i64* %n_spaces.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_spaces.addr, metadata !14706, metadata !DIExpression()), !dbg !14707
  br label %while.cond, !dbg !14708

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %n_spaces.addr, align 8, !dbg !14709
  %dec = add i64 %0, -1, !dbg !14709
  store i64 %dec, i64* %n_spaces.addr, align 8, !dbg !14709
  %tobool = icmp ne i64 %0, 0, !dbg !14709
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !14710

land.rhs:                                         ; preds = %while.cond
  %1 = load i8*, i8** %dest.addr, align 8, !dbg !14711
  %2 = load i8*, i8** %dest_end.addr, align 8, !dbg !14712
  %cmp = icmp ult i8* %1, %2, !dbg !14713
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !14714
  br i1 %3, label %while.body, label %while.end, !dbg !14708

while.body:                                       ; preds = %land.end
  %4 = load i8*, i8** %dest.addr, align 8, !dbg !14715
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !14715, !ctir !144
  store i8* %incdec.ptr, i8** %dest.addr, align 8, !dbg !14715
  store i8 32, i8* %4, align 1, !dbg !14716, !ctir !144
  br label %while.cond, !dbg !14708, !llvm.loop !14717

while.end:                                        ; preds = %land.end
  %5 = load i8*, i8** %dest.addr, align 8, !dbg !14719
  store i8 0, i8* %5, align 1, !dbg !14720, !ctir !144
  %6 = load i8*, i8** %dest.addr, align 8, !dbg !14721
  ret i8* %6, !dbg !14722
}

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @ambsalign(i8* %src, i64* %width, i32 %align, i32 %flags) #0 !dbg !14723 {
entry:
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i64*, align 8
  %align.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %orig_width = alloca i64, align 8, !ctir !149
  %size = alloca i64, align 8, !ctir !149
  %req = alloca i64, align 8, !ctir !149
  %buf = alloca i8*, align 8, !ctir !143
  %nbuf = alloca i8*, align 8, !ctir !143
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !14726, metadata !DIExpression()), !dbg !14727
  store i64* %width, i64** %width.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %width.addr, metadata !14728, metadata !DIExpression()), !dbg !14729
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !14730, metadata !DIExpression()), !dbg !14731
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14732, metadata !DIExpression()), !dbg !14733
  call void @llvm.dbg.declare(metadata i64* %orig_width, metadata !14734, metadata !DIExpression()), !dbg !14735
  %0 = load i64*, i64** %width.addr, align 8, !dbg !14736
  %1 = load i64, i64* %0, align 8, !dbg !14737, !ctir !149
  store i64 %1, i64* %orig_width, align 8, !dbg !14735
  call void @llvm.dbg.declare(metadata i64* %size, metadata !14738, metadata !DIExpression()), !dbg !14739
  %2 = load i64*, i64** %width.addr, align 8, !dbg !14740
  %3 = load i64, i64* %2, align 8, !dbg !14741, !ctir !149
  store i64 %3, i64* %size, align 8, !dbg !14739
  call void @llvm.dbg.declare(metadata i64* %req, metadata !14742, metadata !DIExpression()), !dbg !14743
  %4 = load i64, i64* %size, align 8, !dbg !14744
  store i64 %4, i64* %req, align 8, !dbg !14743
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !14745, metadata !DIExpression()), !dbg !14746
  store i8* null, i8** %buf, align 8, !dbg !14746
  br label %while.cond, !dbg !14747

while.cond:                                       ; preds = %if.end5, %entry
  %5 = load i64, i64* %req, align 8, !dbg !14748
  %6 = load i64, i64* %size, align 8, !dbg !14749
  %cmp = icmp uge i64 %5, %6, !dbg !14750
  br i1 %cmp, label %while.body, label %while.end, !dbg !14747

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %nbuf, metadata !14751, metadata !DIExpression()), !dbg !14753
  %7 = load i64, i64* %req, align 8, !dbg !14754
  %add = add i64 %7, 1, !dbg !14755
  store i64 %add, i64* %size, align 8, !dbg !14756
  %8 = load i8*, i8** %buf, align 8, !dbg !14757
  %9 = load i64, i64* %size, align 8, !dbg !14758
  %call = call i8* @realloc(i8* %8, i64 %9) #13, !dbg !14759
  store i8* %call, i8** %nbuf, align 8, !dbg !14760
  %10 = load i8*, i8** %nbuf, align 8, !dbg !14761
  %cmp1 = icmp eq i8* %10, null, !dbg !14763
  br i1 %cmp1, label %if.then, label %if.end, !dbg !14764

if.then:                                          ; preds = %while.body
  %11 = load i8*, i8** %buf, align 8, !dbg !14765
  call void @free(i8* %11) #13, !dbg !14767
  store i8* null, i8** %buf, align 8, !dbg !14768
  br label %while.end, !dbg !14769

if.end:                                           ; preds = %while.body
  %12 = load i8*, i8** %nbuf, align 8, !dbg !14770
  store i8* %12, i8** %buf, align 8, !dbg !14771
  %13 = load i64, i64* %orig_width, align 8, !dbg !14772
  %14 = load i64*, i64** %width.addr, align 8, !dbg !14773
  store i64 %13, i64* %14, align 8, !dbg !14774, !ctir !149
  %15 = load i8*, i8** %src.addr, align 8, !dbg !14775
  %16 = load i8*, i8** %buf, align 8, !dbg !14776
  %17 = load i64, i64* %size, align 8, !dbg !14777
  %18 = load i64*, i64** %width.addr, align 8, !dbg !14778
  %19 = load i32, i32* %align.addr, align 4, !dbg !14779
  %20 = load i32, i32* %flags.addr, align 4, !dbg !14780
  %call2 = call i64 @mbsalign(i8* %15, i8* %16, i64 %17, i64* %18, i32 %19, i32 %20), !dbg !14781
  store i64 %call2, i64* %req, align 8, !dbg !14782
  %21 = load i64, i64* %req, align 8, !dbg !14783
  %cmp3 = icmp eq i64 %21, -1, !dbg !14785
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !14786

if.then4:                                         ; preds = %if.end
  %22 = load i8*, i8** %buf, align 8, !dbg !14787
  call void @free(i8* %22) #13, !dbg !14789
  store i8* null, i8** %buf, align 8, !dbg !14790
  br label %while.end, !dbg !14791

if.end5:                                          ; preds = %if.end
  br label %while.cond, !dbg !14747, !llvm.loop !14792

while.end:                                        ; preds = %if.then4, %if.then, %while.cond
  %23 = load i8*, i8** %buf, align 8, !dbg !14794
  ret i8* %23, !dbg !14795
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @gnu_mbswidth(i8* %string, i32 %flags) #0 !dbg !14796 {
entry:
  %string.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !14800, metadata !DIExpression()), !dbg !14801
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14802, metadata !DIExpression()), !dbg !14803
  %0 = load i8*, i8** %string.addr, align 8, !dbg !14804
  %1 = load i8*, i8** %string.addr, align 8, !dbg !14805
  %call = call i64 @strlen(i8* %1) #16, !dbg !14806
  %2 = load i32, i32* %flags.addr, align 4, !dbg !14807
  %call1 = call i32 @mbsnwidth(i8* %0, i64 %call, i32 %2), !dbg !14808
  ret i32 %call1, !dbg !14809
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mbsnwidth(i8* %string, i64 %nbytes, i32 %flags) #0 !dbg !14810 {
entry:
  %retval = alloca i32, align 4
  %string.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %p = alloca i8*, align 8, !ctir !146
  %plimit = alloca i8*, align 8, !ctir !146
  %width = alloca i32, align 4, !ctir !27
  %mbstate = alloca %struct.__mbstate_t, align 4, !ctir !1599
  %wc = alloca i32, align 4, !ctir !764
  %bytes = alloca i64, align 8, !ctir !149
  %w = alloca i32, align 4, !ctir !27
  %c = alloca i8, align 1, !ctir !737
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !14813, metadata !DIExpression()), !dbg !14814
  store i64 %nbytes, i64* %nbytes.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nbytes.addr, metadata !14815, metadata !DIExpression()), !dbg !14816
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14817, metadata !DIExpression()), !dbg !14818
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14819, metadata !DIExpression()), !dbg !14820
  %0 = load i8*, i8** %string.addr, align 8, !dbg !14821
  store i8* %0, i8** %p, align 8, !dbg !14820
  call void @llvm.dbg.declare(metadata i8** %plimit, metadata !14822, metadata !DIExpression()), !dbg !14823
  %1 = load i8*, i8** %p, align 8, !dbg !14824
  %2 = load i64, i64* %nbytes.addr, align 8, !dbg !14825
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !14826, !ctir !147
  store i8* %add.ptr, i8** %plimit, align 8, !dbg !14823
  call void @llvm.dbg.declare(metadata i32* %width, metadata !14827, metadata !DIExpression()), !dbg !14828
  store i32 0, i32* %width, align 4, !dbg !14829
  %call = call i64 @__ctype_get_mb_cur_max() #13, !dbg !14830
  %cmp = icmp ugt i64 %call, 1, !dbg !14832
  br i1 %cmp, label %if.then, label %if.end49, !dbg !14833

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !14834

while.cond:                                       ; preds = %sw.epilog, %if.then
  %3 = load i8*, i8** %p, align 8, !dbg !14836
  %4 = load i8*, i8** %plimit, align 8, !dbg !14837
  %cmp1 = icmp ult i8* %3, %4, !dbg !14838
  br i1 %cmp1, label %while.body, label %while.end, !dbg !14834

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8, !dbg !14839
  %6 = load i8, i8* %5, align 1, !dbg !14840, !ctir !147
  %conv = sext i8 %6 to i32, !dbg !14840
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ], !dbg !14841

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %7 = load i8*, i8** %p, align 8, !dbg !14842
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !14842, !ctir !147
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !14842
  %8 = load i32, i32* %width, align 4, !dbg !14844
  %inc = add nsw i32 %8, 1, !dbg !14844
  store i32 %inc, i32* %width, align 4, !dbg !14844
  br label %sw.epilog, !dbg !14845

sw.default:                                       ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %mbstate, metadata !14846, metadata !DIExpression()), !dbg !14848
  %9 = bitcast %struct.__mbstate_t* %mbstate to i8*, !dbg !14849
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 8, i1 false), !dbg !14849
  br label %do.body, !dbg !14850

do.body:                                          ; preds = %do.cond, %sw.default
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !14851, metadata !DIExpression()), !dbg !14853
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !14854, metadata !DIExpression()), !dbg !14855
  call void @llvm.dbg.declare(metadata i32* %w, metadata !14856, metadata !DIExpression()), !dbg !14857
  %10 = load i8*, i8** %p, align 8, !dbg !14858
  %11 = load i8*, i8** %plimit, align 8, !dbg !14859
  %12 = load i8*, i8** %p, align 8, !dbg !14860
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64, !dbg !14861
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64, !dbg !14861
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !14861
  %call2 = call i64 @rpl_mbrtowc(i32* %wc, i8* %10, i64 %sub.ptr.sub, %struct.__mbstate_t* %mbstate), !dbg !14862
  store i64 %call2, i64* %bytes, align 8, !dbg !14863
  %13 = load i64, i64* %bytes, align 8, !dbg !14864
  %cmp3 = icmp eq i64 %13, -1, !dbg !14866
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !14867

if.then5:                                         ; preds = %do.body
  %14 = load i32, i32* %flags.addr, align 4, !dbg !14868
  %and = and i32 %14, 1, !dbg !14871
  %tobool = icmp ne i32 %and, 0, !dbg !14871
  br i1 %tobool, label %if.else, label %if.then6, !dbg !14872

if.then6:                                         ; preds = %if.then5
  %15 = load i8*, i8** %p, align 8, !dbg !14873
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !14873, !ctir !147
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !14873
  %16 = load i32, i32* %width, align 4, !dbg !14875
  %inc8 = add nsw i32 %16, 1, !dbg !14875
  store i32 %inc8, i32* %width, align 4, !dbg !14875
  br label %do.end, !dbg !14876

if.else:                                          ; preds = %if.then5
  store i32 -1, i32* %retval, align 4, !dbg !14877
  br label %return, !dbg !14877

if.end:                                           ; preds = %do.body
  %17 = load i64, i64* %bytes, align 8, !dbg !14878
  %cmp9 = icmp eq i64 %17, -2, !dbg !14880
  br i1 %cmp9, label %if.then11, label %if.end17, !dbg !14881

if.then11:                                        ; preds = %if.end
  %18 = load i32, i32* %flags.addr, align 4, !dbg !14882
  %and12 = and i32 %18, 1, !dbg !14885
  %tobool13 = icmp ne i32 %and12, 0, !dbg !14885
  br i1 %tobool13, label %if.else16, label %if.then14, !dbg !14886

if.then14:                                        ; preds = %if.then11
  %19 = load i8*, i8** %plimit, align 8, !dbg !14887
  store i8* %19, i8** %p, align 8, !dbg !14889
  %20 = load i32, i32* %width, align 4, !dbg !14890
  %inc15 = add nsw i32 %20, 1, !dbg !14890
  store i32 %inc15, i32* %width, align 4, !dbg !14890
  br label %do.end, !dbg !14891

if.else16:                                        ; preds = %if.then11
  store i32 -1, i32* %retval, align 4, !dbg !14892
  br label %return, !dbg !14892

if.end17:                                         ; preds = %if.end
  %21 = load i64, i64* %bytes, align 8, !dbg !14893
  %cmp18 = icmp eq i64 %21, 0, !dbg !14895
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !14896

if.then20:                                        ; preds = %if.end17
  store i64 1, i64* %bytes, align 8, !dbg !14897
  br label %if.end21, !dbg !14898

if.end21:                                         ; preds = %if.then20, %if.end17
  %22 = load i32, i32* %wc, align 4, !dbg !14899
  %call22 = call i32 @wcwidth(i32 %22) #13, !dbg !14900
  store i32 %call22, i32* %w, align 4, !dbg !14901
  %23 = load i32, i32* %w, align 4, !dbg !14902
  %cmp23 = icmp sge i32 %23, 0, !dbg !14904
  br i1 %cmp23, label %if.then25, label %if.else30, !dbg !14905

if.then25:                                        ; preds = %if.end21
  %24 = load i32, i32* %w, align 4, !dbg !14906
  %25 = load i32, i32* %width, align 4, !dbg !14909
  %sub = sub nsw i32 2147483647, %25, !dbg !14910
  %cmp26 = icmp sgt i32 %24, %sub, !dbg !14911
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !14912

if.then28:                                        ; preds = %if.then25
  br label %overflow, !dbg !14913

if.end29:                                         ; preds = %if.then25
  %26 = load i32, i32* %w, align 4, !dbg !14914
  %27 = load i32, i32* %width, align 4, !dbg !14915
  %add = add nsw i32 %27, %26, !dbg !14915
  store i32 %add, i32* %width, align 4, !dbg !14915
  br label %if.end45, !dbg !14916

if.else30:                                        ; preds = %if.end21
  %28 = load i32, i32* %flags.addr, align 4, !dbg !14917
  %and31 = and i32 %28, 2, !dbg !14919
  %tobool32 = icmp ne i32 %and31, 0, !dbg !14919
  br i1 %tobool32, label %if.else43, label %if.then33, !dbg !14920

if.then33:                                        ; preds = %if.else30
  %29 = load i32, i32* %wc, align 4, !dbg !14921
  %call34 = call i32 @iswcntrl(i32 %29) #13, !dbg !14924
  %tobool35 = icmp ne i32 %call34, 0, !dbg !14924
  br i1 %tobool35, label %if.end42, label %if.then36, !dbg !14925

if.then36:                                        ; preds = %if.then33
  %30 = load i32, i32* %width, align 4, !dbg !14926
  %cmp37 = icmp eq i32 %30, 2147483647, !dbg !14929
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !14930

if.then39:                                        ; preds = %if.then36
  br label %overflow, !dbg !14931

if.end40:                                         ; preds = %if.then36
  %31 = load i32, i32* %width, align 4, !dbg !14932
  %inc41 = add nsw i32 %31, 1, !dbg !14932
  store i32 %inc41, i32* %width, align 4, !dbg !14932
  br label %if.end42, !dbg !14933

if.end42:                                         ; preds = %if.end40, %if.then33
  br label %if.end44, !dbg !14934

if.else43:                                        ; preds = %if.else30
  store i32 -1, i32* %retval, align 4, !dbg !14935
  br label %return, !dbg !14935

if.end44:                                         ; preds = %if.end42
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end29
  %32 = load i64, i64* %bytes, align 8, !dbg !14936
  %33 = load i8*, i8** %p, align 8, !dbg !14937
  %add.ptr46 = getelementptr inbounds i8, i8* %33, i64 %32, !dbg !14937, !ctir !147
  store i8* %add.ptr46, i8** %p, align 8, !dbg !14937
  br label %do.cond, !dbg !14938

do.cond:                                          ; preds = %if.end45
  %call47 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #16, !dbg !14939
  %tobool48 = icmp ne i32 %call47, 0, !dbg !14940
  %lnot = xor i1 %tobool48, true, !dbg !14940
  br i1 %lnot, label %do.body, label %do.end, !dbg !14938, !llvm.loop !14941

do.end:                                           ; preds = %do.cond, %if.then14, %if.then6
  br label %sw.epilog, !dbg !14943

sw.epilog:                                        ; preds = %do.end, %sw.bb
  br label %while.cond, !dbg !14834, !llvm.loop !14944

while.end:                                        ; preds = %while.cond
  %34 = load i32, i32* %width, align 4, !dbg !14946
  store i32 %34, i32* %retval, align 4, !dbg !14947
  br label %return, !dbg !14947

if.end49:                                         ; preds = %entry
  br label %while.cond50, !dbg !14948

while.cond50:                                     ; preds = %if.end86, %if.end49
  %35 = load i8*, i8** %p, align 8, !dbg !14949
  %36 = load i8*, i8** %plimit, align 8, !dbg !14950
  %cmp51 = icmp ult i8* %35, %36, !dbg !14951
  br i1 %cmp51, label %while.body53, label %while.end87, !dbg !14948

while.body53:                                     ; preds = %while.cond50
  call void @llvm.dbg.declare(metadata i8* %c, metadata !14952, metadata !DIExpression()), !dbg !14954
  %37 = load i8*, i8** %p, align 8, !dbg !14955
  %incdec.ptr54 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !14955, !ctir !147
  store i8* %incdec.ptr54, i8** %p, align 8, !dbg !14955
  %38 = load i8, i8* %37, align 1, !dbg !14956, !ctir !147
  store i8 %38, i8* %c, align 1, !dbg !14954
  %call55 = call i16** @__ctype_b_loc() #17, !dbg !14957
  %39 = load i16*, i16** %call55, align 8, !dbg !14957, !ctir !708
  %40 = load i8, i8* %c, align 1, !dbg !14957
  %conv56 = zext i8 %40 to i32, !dbg !14957
  %idxprom = sext i32 %conv56 to i64, !dbg !14957
  %arrayidx = getelementptr inbounds i16, i16* %39, i64 %idxprom, !dbg !14957, !ctir !708
  %41 = load i16, i16* %arrayidx, align 2, !dbg !14957
  %conv57 = zext i16 %41 to i32, !dbg !14957
  %and58 = and i32 %conv57, 16384, !dbg !14957
  %tobool59 = icmp ne i32 %and58, 0, !dbg !14957
  br i1 %tobool59, label %if.then60, label %if.else66, !dbg !14959

if.then60:                                        ; preds = %while.body53
  %42 = load i32, i32* %width, align 4, !dbg !14960
  %cmp61 = icmp eq i32 %42, 2147483647, !dbg !14963
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !14964

if.then63:                                        ; preds = %if.then60
  br label %overflow, !dbg !14965

if.end64:                                         ; preds = %if.then60
  %43 = load i32, i32* %width, align 4, !dbg !14966
  %inc65 = add nsw i32 %43, 1, !dbg !14966
  store i32 %inc65, i32* %width, align 4, !dbg !14966
  br label %if.end86, !dbg !14967

if.else66:                                        ; preds = %while.body53
  %44 = load i32, i32* %flags.addr, align 4, !dbg !14968
  %and67 = and i32 %44, 2, !dbg !14970
  %tobool68 = icmp ne i32 %and67, 0, !dbg !14970
  br i1 %tobool68, label %if.else84, label %if.then69, !dbg !14971

if.then69:                                        ; preds = %if.else66
  %call70 = call i16** @__ctype_b_loc() #17, !dbg !14972
  %45 = load i16*, i16** %call70, align 8, !dbg !14972, !ctir !708
  %46 = load i8, i8* %c, align 1, !dbg !14972
  %conv71 = zext i8 %46 to i32, !dbg !14972
  %idxprom72 = sext i32 %conv71 to i64, !dbg !14972
  %arrayidx73 = getelementptr inbounds i16, i16* %45, i64 %idxprom72, !dbg !14972, !ctir !708
  %47 = load i16, i16* %arrayidx73, align 2, !dbg !14972
  %conv74 = zext i16 %47 to i32, !dbg !14972
  %and75 = and i32 %conv74, 2, !dbg !14972
  %tobool76 = icmp ne i32 %and75, 0, !dbg !14972
  br i1 %tobool76, label %if.end83, label %if.then77, !dbg !14975

if.then77:                                        ; preds = %if.then69
  %48 = load i32, i32* %width, align 4, !dbg !14976
  %cmp78 = icmp eq i32 %48, 2147483647, !dbg !14979
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !14980

if.then80:                                        ; preds = %if.then77
  br label %overflow, !dbg !14981

if.end81:                                         ; preds = %if.then77
  %49 = load i32, i32* %width, align 4, !dbg !14982
  %inc82 = add nsw i32 %49, 1, !dbg !14982
  store i32 %inc82, i32* %width, align 4, !dbg !14982
  br label %if.end83, !dbg !14983

if.end83:                                         ; preds = %if.end81, %if.then69
  br label %if.end85, !dbg !14984

if.else84:                                        ; preds = %if.else66
  store i32 -1, i32* %retval, align 4, !dbg !14985
  br label %return, !dbg !14985

if.end85:                                         ; preds = %if.end83
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end64
  br label %while.cond50, !dbg !14948, !llvm.loop !14986

while.end87:                                      ; preds = %while.cond50
  %50 = load i32, i32* %width, align 4, !dbg !14988
  store i32 %50, i32* %retval, align 4, !dbg !14989
  br label %return, !dbg !14989

overflow:                                         ; preds = %if.then80, %if.then63, %if.then39, %if.then28
  call void @llvm.dbg.label(metadata !14990), !dbg !14991
  store i32 2147483647, i32* %retval, align 4, !dbg !14992
  br label %return, !dbg !14992

return:                                           ; preds = %overflow, %while.end87, %if.else84, %while.end, %if.else43, %if.else16, %if.else
  %51 = load i32, i32* %retval, align 4, !dbg !14993
  ret i32 %51, !dbg !14993
}

; Function Attrs: nounwind
declare dso_local i32 @iswcntrl(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @mpsort(i8** %base, i64 %n, i32 (i8*, i8*)* %cmp) #0 !dbg !14994 {
entry:
  %base.addr = alloca i8**, align 8
  %n.addr = alloca i64, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  store i8** %base, i8*** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %base.addr, metadata !15002, metadata !DIExpression()), !dbg !15003
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !15004, metadata !DIExpression()), !dbg !15005
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !15006, metadata !DIExpression()), !dbg !15007
  %0 = load i8**, i8*** %base.addr, align 8, !dbg !15008
  %1 = load i64, i64* %n.addr, align 8, !dbg !15009
  %2 = load i8**, i8*** %base.addr, align 8, !dbg !15010
  %3 = load i64, i64* %n.addr, align 8, !dbg !15011
  %add.ptr = getelementptr inbounds i8*, i8** %2, i64 %3, !dbg !15012, !ctir !181
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15013
  call void @mpsort_with_tmp(i8** %0, i64 %1, i8** %add.ptr, i32 (i8*, i8*)* %4), !dbg !15014
  ret void, !dbg !15015
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mpsort_with_tmp(i8** noalias %base, i64 %n, i8** noalias %tmp, i32 (i8*, i8*)* %cmp) #0 !dbg !15016 {
entry:
  %base.addr = alloca i8**, align 8
  %n.addr = alloca i64, align 8
  %tmp.addr = alloca i8**, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %p0 = alloca i8*, align 8, !ctir !181
  %p1 = alloca i8*, align 8, !ctir !181
  %n1 = alloca i64, align 8, !ctir !149
  %n2 = alloca i64, align 8, !ctir !149
  %i = alloca i64, align 8, !ctir !149
  %t = alloca i64, align 8, !ctir !149
  %tlim = alloca i64, align 8, !ctir !149
  %b = alloca i64, align 8, !ctir !149
  %blim = alloca i64, align 8, !ctir !149
  %bb = alloca i8*, align 8, !ctir !181
  %tt = alloca i8*, align 8, !ctir !181
  store i8** %base, i8*** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %base.addr, metadata !15020, metadata !DIExpression()), !dbg !15021
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !15022, metadata !DIExpression()), !dbg !15023
  store i8** %tmp, i8*** %tmp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %tmp.addr, metadata !15024, metadata !DIExpression()), !dbg !15025
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !15026, metadata !DIExpression()), !dbg !15027
  %0 = load i64, i64* %n.addr, align 8, !dbg !15028
  %cmp1 = icmp ule i64 %0, 2, !dbg !15030
  br i1 %cmp1, label %if.then, label %if.else, !dbg !15031

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !15032
  %cmp2 = icmp eq i64 %1, 2, !dbg !15035
  br i1 %cmp2, label %if.then3, label %if.end9, !dbg !15036

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %p0, metadata !15037, metadata !DIExpression()), !dbg !15039
  %2 = load i8**, i8*** %base.addr, align 8, !dbg !15040
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 0, !dbg !15040, !ctir !180
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !15040
  store i8* %3, i8** %p0, align 8, !dbg !15039
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !15041, metadata !DIExpression()), !dbg !15042
  %4 = load i8**, i8*** %base.addr, align 8, !dbg !15043
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i64 1, !dbg !15043, !ctir !180
  %5 = load i8*, i8** %arrayidx4, align 8, !dbg !15043
  store i8* %5, i8** %p1, align 8, !dbg !15042
  %6 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15044
  %7 = load i8*, i8** %p0, align 8, !dbg !15046
  %8 = load i8*, i8** %p1, align 8, !dbg !15047
  %call = call i32 %6(i8* %7, i8* %8), !dbg !15044
  %cmp5 = icmp sle i32 %call, 0, !dbg !15048
  br i1 %cmp5, label %if.end, label %if.then6, !dbg !15049

if.then6:                                         ; preds = %if.then3
  %9 = load i8*, i8** %p1, align 8, !dbg !15050
  %10 = load i8**, i8*** %base.addr, align 8, !dbg !15052
  %arrayidx7 = getelementptr inbounds i8*, i8** %10, i64 0, !dbg !15052, !ctir !180
  store i8* %9, i8** %arrayidx7, align 8, !dbg !15053
  %11 = load i8*, i8** %p0, align 8, !dbg !15054
  %12 = load i8**, i8*** %base.addr, align 8, !dbg !15055
  %arrayidx8 = getelementptr inbounds i8*, i8** %12, i64 1, !dbg !15055, !ctir !180
  store i8* %11, i8** %arrayidx8, align 8, !dbg !15056
  br label %if.end, !dbg !15057

if.end:                                           ; preds = %if.then6, %if.then3
  br label %if.end9, !dbg !15058

if.end9:                                          ; preds = %if.end, %if.then
  br label %if.end39, !dbg !15059

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %n1, metadata !15060, metadata !DIExpression()), !dbg !15062
  %13 = load i64, i64* %n.addr, align 8, !dbg !15063
  %div = udiv i64 %13, 2, !dbg !15064
  store i64 %div, i64* %n1, align 8, !dbg !15062
  call void @llvm.dbg.declare(metadata i64* %n2, metadata !15065, metadata !DIExpression()), !dbg !15066
  %14 = load i64, i64* %n.addr, align 8, !dbg !15067
  %15 = load i64, i64* %n1, align 8, !dbg !15068
  %sub = sub i64 %14, %15, !dbg !15069
  store i64 %sub, i64* %n2, align 8, !dbg !15066
  call void @llvm.dbg.declare(metadata i64* %i, metadata !15070, metadata !DIExpression()), !dbg !15071
  call void @llvm.dbg.declare(metadata i64* %t, metadata !15072, metadata !DIExpression()), !dbg !15073
  store i64 0, i64* %t, align 8, !dbg !15073
  call void @llvm.dbg.declare(metadata i64* %tlim, metadata !15074, metadata !DIExpression()), !dbg !15075
  %16 = load i64, i64* %n1, align 8, !dbg !15076
  store i64 %16, i64* %tlim, align 8, !dbg !15075
  call void @llvm.dbg.declare(metadata i64* %b, metadata !15077, metadata !DIExpression()), !dbg !15078
  %17 = load i64, i64* %n1, align 8, !dbg !15079
  store i64 %17, i64* %b, align 8, !dbg !15078
  call void @llvm.dbg.declare(metadata i64* %blim, metadata !15080, metadata !DIExpression()), !dbg !15081
  %18 = load i64, i64* %n.addr, align 8, !dbg !15082
  store i64 %18, i64* %blim, align 8, !dbg !15081
  call void @llvm.dbg.declare(metadata i8** %bb, metadata !15083, metadata !DIExpression()), !dbg !15084
  call void @llvm.dbg.declare(metadata i8** %tt, metadata !15085, metadata !DIExpression()), !dbg !15086
  %19 = load i8**, i8*** %base.addr, align 8, !dbg !15087
  %20 = load i64, i64* %n1, align 8, !dbg !15088
  %add.ptr = getelementptr inbounds i8*, i8** %19, i64 %20, !dbg !15089, !ctir !181
  %21 = load i64, i64* %n2, align 8, !dbg !15090
  %22 = load i8**, i8*** %tmp.addr, align 8, !dbg !15091
  %23 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15092
  call void @mpsort_with_tmp(i8** %add.ptr, i64 %21, i8** %22, i32 (i8*, i8*)* %23), !dbg !15093
  %24 = load i64, i64* %n1, align 8, !dbg !15094
  %cmp10 = icmp ult i64 %24, 2, !dbg !15096
  br i1 %cmp10, label %if.then11, label %if.else14, !dbg !15097

if.then11:                                        ; preds = %if.else
  %25 = load i8**, i8*** %base.addr, align 8, !dbg !15098
  %arrayidx12 = getelementptr inbounds i8*, i8** %25, i64 0, !dbg !15098, !ctir !180
  %26 = load i8*, i8** %arrayidx12, align 8, !dbg !15098
  %27 = load i8**, i8*** %tmp.addr, align 8, !dbg !15099
  %arrayidx13 = getelementptr inbounds i8*, i8** %27, i64 0, !dbg !15099, !ctir !180
  store i8* %26, i8** %arrayidx13, align 8, !dbg !15100
  br label %if.end15, !dbg !15099

if.else14:                                        ; preds = %if.else
  %28 = load i8**, i8*** %base.addr, align 8, !dbg !15101
  %29 = load i64, i64* %n1, align 8, !dbg !15102
  %30 = load i8**, i8*** %tmp.addr, align 8, !dbg !15103
  %31 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15104
  call void @mpsort_into_tmp(i8** %28, i64 %29, i8** %30, i32 (i8*, i8*)* %31), !dbg !15105
  br label %if.end15

if.end15:                                         ; preds = %if.else14, %if.then11
  %32 = load i8**, i8*** %tmp.addr, align 8, !dbg !15106
  %33 = load i64, i64* %t, align 8, !dbg !15107
  %arrayidx16 = getelementptr inbounds i8*, i8** %32, i64 %33, !dbg !15106, !ctir !180
  %34 = load i8*, i8** %arrayidx16, align 8, !dbg !15106
  store i8* %34, i8** %tt, align 8, !dbg !15108
  %35 = load i8**, i8*** %base.addr, align 8, !dbg !15109
  %36 = load i64, i64* %b, align 8, !dbg !15110
  %arrayidx17 = getelementptr inbounds i8*, i8** %35, i64 %36, !dbg !15109, !ctir !180
  %37 = load i8*, i8** %arrayidx17, align 8, !dbg !15109
  store i8* %37, i8** %bb, align 8, !dbg !15111
  store i64 0, i64* %i, align 8, !dbg !15112
  br label %for.cond, !dbg !15114

for.cond:                                         ; preds = %if.end38, %if.end15
  %38 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15115
  %39 = load i8*, i8** %tt, align 8, !dbg !15118
  %40 = load i8*, i8** %bb, align 8, !dbg !15119
  %call18 = call i32 %38(i8* %39, i8* %40), !dbg !15115
  %cmp19 = icmp sle i32 %call18, 0, !dbg !15120
  br i1 %cmp19, label %if.then20, label %if.else27, !dbg !15121

if.then20:                                        ; preds = %for.cond
  %41 = load i8*, i8** %tt, align 8, !dbg !15122
  %42 = load i8**, i8*** %base.addr, align 8, !dbg !15124
  %43 = load i64, i64* %i, align 8, !dbg !15125
  %inc = add i64 %43, 1, !dbg !15125
  store i64 %inc, i64* %i, align 8, !dbg !15125
  %arrayidx21 = getelementptr inbounds i8*, i8** %42, i64 %43, !dbg !15124, !ctir !180
  store i8* %41, i8** %arrayidx21, align 8, !dbg !15126
  %44 = load i64, i64* %t, align 8, !dbg !15127
  %inc22 = add i64 %44, 1, !dbg !15127
  store i64 %inc22, i64* %t, align 8, !dbg !15127
  %45 = load i64, i64* %t, align 8, !dbg !15128
  %46 = load i64, i64* %tlim, align 8, !dbg !15130
  %cmp23 = icmp eq i64 %45, %46, !dbg !15131
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !15132

if.then24:                                        ; preds = %if.then20
  br label %for.end, !dbg !15133

if.end25:                                         ; preds = %if.then20
  %47 = load i8**, i8*** %tmp.addr, align 8, !dbg !15134
  %48 = load i64, i64* %t, align 8, !dbg !15135
  %arrayidx26 = getelementptr inbounds i8*, i8** %47, i64 %48, !dbg !15134, !ctir !180
  %49 = load i8*, i8** %arrayidx26, align 8, !dbg !15134
  store i8* %49, i8** %tt, align 8, !dbg !15136
  br label %if.end38, !dbg !15137

if.else27:                                        ; preds = %for.cond
  %50 = load i8*, i8** %bb, align 8, !dbg !15138
  %51 = load i8**, i8*** %base.addr, align 8, !dbg !15140
  %52 = load i64, i64* %i, align 8, !dbg !15141
  %inc28 = add i64 %52, 1, !dbg !15141
  store i64 %inc28, i64* %i, align 8, !dbg !15141
  %arrayidx29 = getelementptr inbounds i8*, i8** %51, i64 %52, !dbg !15140, !ctir !180
  store i8* %50, i8** %arrayidx29, align 8, !dbg !15142
  %53 = load i64, i64* %b, align 8, !dbg !15143
  %inc30 = add i64 %53, 1, !dbg !15143
  store i64 %inc30, i64* %b, align 8, !dbg !15143
  %54 = load i64, i64* %b, align 8, !dbg !15144
  %55 = load i64, i64* %blim, align 8, !dbg !15146
  %cmp31 = icmp eq i64 %54, %55, !dbg !15147
  br i1 %cmp31, label %if.then32, label %if.end36, !dbg !15148

if.then32:                                        ; preds = %if.else27
  %56 = load i8**, i8*** %base.addr, align 8, !dbg !15149
  %57 = load i64, i64* %i, align 8, !dbg !15151
  %add.ptr33 = getelementptr inbounds i8*, i8** %56, i64 %57, !dbg !15152, !ctir !181
  %58 = bitcast i8** %add.ptr33 to i8*, !dbg !15153
  %59 = load i8**, i8*** %tmp.addr, align 8, !dbg !15154
  %60 = load i64, i64* %t, align 8, !dbg !15155
  %add.ptr34 = getelementptr inbounds i8*, i8** %59, i64 %60, !dbg !15156, !ctir !181
  %61 = bitcast i8** %add.ptr34 to i8*, !dbg !15153
  %62 = load i64, i64* %tlim, align 8, !dbg !15157
  %63 = load i64, i64* %t, align 8, !dbg !15158
  %sub35 = sub i64 %62, %63, !dbg !15159
  %mul = mul i64 %sub35, 8, !dbg !15160
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %61, i64 %mul, i1 false), !dbg !15153
  br label %for.end, !dbg !15161

if.end36:                                         ; preds = %if.else27
  %64 = load i8**, i8*** %base.addr, align 8, !dbg !15162
  %65 = load i64, i64* %b, align 8, !dbg !15163
  %arrayidx37 = getelementptr inbounds i8*, i8** %64, i64 %65, !dbg !15162, !ctir !180
  %66 = load i8*, i8** %arrayidx37, align 8, !dbg !15162
  store i8* %66, i8** %bb, align 8, !dbg !15164
  br label %if.end38

if.end38:                                         ; preds = %if.end36, %if.end25
  br label %for.cond, !dbg !15165, !llvm.loop !15166

for.end:                                          ; preds = %if.then32, %if.then24
  br label %if.end39

if.end39:                                         ; preds = %for.end, %if.end9
  ret void, !dbg !15169
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mpsort_into_tmp(i8** noalias %base, i64 %n, i8** noalias %tmp, i32 (i8*, i8*)* %cmp) #0 !dbg !15170 {
entry:
  %base.addr = alloca i8**, align 8
  %n.addr = alloca i64, align 8
  %tmp.addr = alloca i8**, align 8
  %cmp.addr = alloca i32 (i8*, i8*)*, align 8
  %n1 = alloca i64, align 8, !ctir !149
  %n2 = alloca i64, align 8, !ctir !149
  %a = alloca i64, align 8, !ctir !149
  %alim = alloca i64, align 8, !ctir !149
  %b = alloca i64, align 8, !ctir !149
  %blim = alloca i64, align 8, !ctir !149
  %ba = alloca i8*, align 8, !ctir !181
  %bb = alloca i8*, align 8, !ctir !181
  store i8** %base, i8*** %base.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %base.addr, metadata !15171, metadata !DIExpression()), !dbg !15172
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !15173, metadata !DIExpression()), !dbg !15174
  store i8** %tmp, i8*** %tmp.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %tmp.addr, metadata !15175, metadata !DIExpression()), !dbg !15176
  store i32 (i8*, i8*)* %cmp, i32 (i8*, i8*)** %cmp.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %cmp.addr, metadata !15177, metadata !DIExpression()), !dbg !15178
  call void @llvm.dbg.declare(metadata i64* %n1, metadata !15179, metadata !DIExpression()), !dbg !15180
  %0 = load i64, i64* %n.addr, align 8, !dbg !15181
  %div = udiv i64 %0, 2, !dbg !15182
  store i64 %div, i64* %n1, align 8, !dbg !15180
  call void @llvm.dbg.declare(metadata i64* %n2, metadata !15183, metadata !DIExpression()), !dbg !15184
  %1 = load i64, i64* %n.addr, align 8, !dbg !15185
  %2 = load i64, i64* %n1, align 8, !dbg !15186
  %sub = sub i64 %1, %2, !dbg !15187
  store i64 %sub, i64* %n2, align 8, !dbg !15184
  call void @llvm.dbg.declare(metadata i64* %a, metadata !15188, metadata !DIExpression()), !dbg !15189
  store i64 0, i64* %a, align 8, !dbg !15189
  call void @llvm.dbg.declare(metadata i64* %alim, metadata !15190, metadata !DIExpression()), !dbg !15191
  %3 = load i64, i64* %n1, align 8, !dbg !15192
  store i64 %3, i64* %alim, align 8, !dbg !15191
  call void @llvm.dbg.declare(metadata i64* %b, metadata !15193, metadata !DIExpression()), !dbg !15194
  %4 = load i64, i64* %n1, align 8, !dbg !15195
  store i64 %4, i64* %b, align 8, !dbg !15194
  call void @llvm.dbg.declare(metadata i64* %blim, metadata !15196, metadata !DIExpression()), !dbg !15197
  %5 = load i64, i64* %n.addr, align 8, !dbg !15198
  store i64 %5, i64* %blim, align 8, !dbg !15197
  call void @llvm.dbg.declare(metadata i8** %ba, metadata !15199, metadata !DIExpression()), !dbg !15200
  call void @llvm.dbg.declare(metadata i8** %bb, metadata !15201, metadata !DIExpression()), !dbg !15202
  %6 = load i8**, i8*** %base.addr, align 8, !dbg !15203
  %7 = load i64, i64* %n1, align 8, !dbg !15204
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %7, !dbg !15205, !ctir !181
  %8 = load i64, i64* %n2, align 8, !dbg !15206
  %9 = load i8**, i8*** %tmp.addr, align 8, !dbg !15207
  %10 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15208
  call void @mpsort_with_tmp(i8** %add.ptr, i64 %8, i8** %9, i32 (i8*, i8*)* %10), !dbg !15209
  %11 = load i8**, i8*** %base.addr, align 8, !dbg !15210
  %12 = load i64, i64* %n1, align 8, !dbg !15211
  %13 = load i8**, i8*** %tmp.addr, align 8, !dbg !15212
  %14 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15213
  call void @mpsort_with_tmp(i8** %11, i64 %12, i8** %13, i32 (i8*, i8*)* %14), !dbg !15214
  %15 = load i8**, i8*** %base.addr, align 8, !dbg !15215
  %16 = load i64, i64* %a, align 8, !dbg !15216
  %arrayidx = getelementptr inbounds i8*, i8** %15, i64 %16, !dbg !15215, !ctir !180
  %17 = load i8*, i8** %arrayidx, align 8, !dbg !15215
  store i8* %17, i8** %ba, align 8, !dbg !15217
  %18 = load i8**, i8*** %base.addr, align 8, !dbg !15218
  %19 = load i64, i64* %b, align 8, !dbg !15219
  %arrayidx1 = getelementptr inbounds i8*, i8** %18, i64 %19, !dbg !15218, !ctir !180
  %20 = load i8*, i8** %arrayidx1, align 8, !dbg !15218
  store i8* %20, i8** %bb, align 8, !dbg !15220
  br label %for.cond, !dbg !15221

for.cond:                                         ; preds = %if.end12, %entry
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %cmp.addr, align 8, !dbg !15222
  %22 = load i8*, i8** %ba, align 8, !dbg !15226
  %23 = load i8*, i8** %bb, align 8, !dbg !15227
  %call = call i32 %21(i8* %22, i8* %23), !dbg !15222
  %cmp2 = icmp sle i32 %call, 0, !dbg !15228
  br i1 %cmp2, label %if.then, label %if.else, !dbg !15229

if.then:                                          ; preds = %for.cond
  %24 = load i8*, i8** %ba, align 8, !dbg !15230
  %25 = load i8**, i8*** %tmp.addr, align 8, !dbg !15232
  %incdec.ptr = getelementptr inbounds i8*, i8** %25, i32 1, !dbg !15232, !ctir !181
  store i8** %incdec.ptr, i8*** %tmp.addr, align 8, !dbg !15232
  store i8* %24, i8** %25, align 8, !dbg !15233, !ctir !181
  %26 = load i64, i64* %a, align 8, !dbg !15234
  %inc = add i64 %26, 1, !dbg !15234
  store i64 %inc, i64* %a, align 8, !dbg !15234
  %27 = load i64, i64* %a, align 8, !dbg !15235
  %28 = load i64, i64* %alim, align 8, !dbg !15237
  %cmp3 = icmp eq i64 %27, %28, !dbg !15238
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !15239

if.then4:                                         ; preds = %if.then
  %29 = load i64, i64* %b, align 8, !dbg !15240
  store i64 %29, i64* %a, align 8, !dbg !15242
  %30 = load i64, i64* %blim, align 8, !dbg !15243
  store i64 %30, i64* %alim, align 8, !dbg !15244
  br label %for.end, !dbg !15245

if.end:                                           ; preds = %if.then
  %31 = load i8**, i8*** %base.addr, align 8, !dbg !15246
  %32 = load i64, i64* %a, align 8, !dbg !15247
  %arrayidx5 = getelementptr inbounds i8*, i8** %31, i64 %32, !dbg !15246, !ctir !180
  %33 = load i8*, i8** %arrayidx5, align 8, !dbg !15246
  store i8* %33, i8** %ba, align 8, !dbg !15248
  br label %if.end12, !dbg !15249

if.else:                                          ; preds = %for.cond
  %34 = load i8*, i8** %bb, align 8, !dbg !15250
  %35 = load i8**, i8*** %tmp.addr, align 8, !dbg !15252
  %incdec.ptr6 = getelementptr inbounds i8*, i8** %35, i32 1, !dbg !15252, !ctir !181
  store i8** %incdec.ptr6, i8*** %tmp.addr, align 8, !dbg !15252
  store i8* %34, i8** %35, align 8, !dbg !15253, !ctir !181
  %36 = load i64, i64* %b, align 8, !dbg !15254
  %inc7 = add i64 %36, 1, !dbg !15254
  store i64 %inc7, i64* %b, align 8, !dbg !15254
  %37 = load i64, i64* %b, align 8, !dbg !15255
  %38 = load i64, i64* %blim, align 8, !dbg !15257
  %cmp8 = icmp eq i64 %37, %38, !dbg !15258
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !15259

if.then9:                                         ; preds = %if.else
  br label %for.end, !dbg !15260

if.end10:                                         ; preds = %if.else
  %39 = load i8**, i8*** %base.addr, align 8, !dbg !15261
  %40 = load i64, i64* %b, align 8, !dbg !15262
  %arrayidx11 = getelementptr inbounds i8*, i8** %39, i64 %40, !dbg !15261, !ctir !180
  %41 = load i8*, i8** %arrayidx11, align 8, !dbg !15261
  store i8* %41, i8** %bb, align 8, !dbg !15263
  br label %if.end12

if.end12:                                         ; preds = %if.end10, %if.end
  br label %for.cond, !dbg !15264, !llvm.loop !15265

for.end:                                          ; preds = %if.then9, %if.then4
  %42 = load i8**, i8*** %tmp.addr, align 8, !dbg !15268
  %43 = bitcast i8** %42 to i8*, !dbg !15269
  %44 = load i8**, i8*** %base.addr, align 8, !dbg !15270
  %45 = load i64, i64* %a, align 8, !dbg !15271
  %add.ptr13 = getelementptr inbounds i8*, i8** %44, i64 %45, !dbg !15272, !ctir !181
  %46 = bitcast i8** %add.ptr13 to i8*, !dbg !15269
  %47 = load i64, i64* %alim, align 8, !dbg !15273
  %48 = load i64, i64* %a, align 8, !dbg !15274
  %sub14 = sub i64 %47, %48, !dbg !15275
  %mul = mul i64 %sub14, 8, !dbg !15276
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %46, i64 %mul, i1 false), !dbg !15269
  ret void, !dbg !15277
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @nstrftime(i8* %s, i64 %maxsize, i8* %format, %struct.tm* %tp, %struct.tm_zone* %tz, i32 %ns) #0 !dbg !15278 {
entry:
  %s.addr = alloca i8*, align 8
  %maxsize.addr = alloca i64, align 8
  %format.addr = alloca i8*, align 8
  %tp.addr = alloca %struct.tm*, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %ns.addr = alloca i32, align 4
  %tzset_called = alloca i8, align 1, !ctir !141
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !15304, metadata !DIExpression()), !dbg !15305
  store i64 %maxsize, i64* %maxsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %maxsize.addr, metadata !15306, metadata !DIExpression()), !dbg !15307
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !15308, metadata !DIExpression()), !dbg !15309
  store %struct.tm* %tp, %struct.tm** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tp.addr, metadata !15310, metadata !DIExpression()), !dbg !15311
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !15312, metadata !DIExpression()), !dbg !15313
  store i32 %ns, i32* %ns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ns.addr, metadata !15314, metadata !DIExpression()), !dbg !15313
  call void @llvm.dbg.declare(metadata i8* %tzset_called, metadata !15315, metadata !DIExpression()), !dbg !15316
  store i8 0, i8* %tzset_called, align 1, !dbg !15316
  %0 = load i8*, i8** %s.addr, align 8, !dbg !15317
  %1 = load i64, i64* %maxsize.addr, align 8, !dbg !15318
  %2 = load i8*, i8** %format.addr, align 8, !dbg !15319
  %3 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15320
  %4 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !15321
  %5 = load i32, i32* %ns.addr, align 4, !dbg !15321
  %call = call i64 @__strftime_internal(i8* %0, i64 %1, i8* %2, %struct.tm* %3, i1 zeroext false, i32 0, i32 -1, i8* %tzset_called, %struct.tm_zone* %4, i32 %5), !dbg !15322
  ret i64 %call, !dbg !15323
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @__strftime_internal(i8* %s, i64 %maxsize, i8* %format, %struct.tm* %tp, i1 zeroext %upcase, i32 %yr_spec, i32 %width, i8* %tzset_called, %struct.tm_zone* %tz, i32 %ns) #0 !dbg !15324 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca i8*, align 8
  %maxsize.addr = alloca i64, align 8
  %format.addr = alloca i8*, align 8
  %tp.addr = alloca %struct.tm*, align 8
  %upcase.addr = alloca i8, align 1
  %yr_spec.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %tzset_called.addr = alloca i8*, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %ns.addr = alloca i32, align 4
  %hour12 = alloca i32, align 4, !ctir !27
  %zone = alloca i8*, align 8, !ctir !146
  %i = alloca i64, align 8, !ctir !149
  %p = alloca i8*, align 8, !ctir !143
  %f = alloca i8*, align 8, !ctir !146
  %pad = alloca i32, align 4, !ctir !27
  %modifier = alloca i32, align 4, !ctir !27
  %digits = alloca i32, align 4, !ctir !27
  %number_value = alloca i32, align 4, !ctir !27
  %u_number_value = alloca i32, align 4, !ctir !6
  %negative_number = alloca i8, align 1, !ctir !141
  %always_output_a_sign = alloca i8, align 1, !ctir !141
  %tz_colon_mask = alloca i32, align 4, !ctir !27
  %subfmt = alloca i8*, align 8, !ctir !146
  %sign_char = alloca i8, align 1, !ctir !144
  %bufp = alloca i8*, align 8, !ctir !143
  %buf = alloca [23 x i8], align 16, !ctir !846
  %to_lowcase = alloca i8, align 1, !ctir !141
  %to_uppcase = alloca i8, align 1, !ctir !141
  %colons = alloca i64, align 8, !ctir !149
  %change_case = alloca i8, align 1, !ctir !141
  %format_char = alloca i32, align 4, !ctir !27
  %subwidth = alloca i32, align 4, !ctir !27
  %_n = alloca i64, align 8, !ctir !149
  %_w = alloca i64, align 8, !ctir !149
  %_incr = alloca i64, align 8, !ctir !149
  %_delta = alloca i64, align 8, !ctir !149
  %_n95 = alloca i64, align 8, !ctir !149
  %_w96 = alloca i64, align 8, !ctir !149
  %_incr104 = alloca i64, align 8, !ctir !149
  %_delta124 = alloca i64, align 8, !ctir !149
  %len = alloca i64, align 8, !ctir !149
  %_n182 = alloca i64, align 8, !ctir !149
  %_w183 = alloca i64, align 8, !ctir !149
  %_incr191 = alloca i64, align 8, !ctir !149
  %_delta211 = alloca i64, align 8, !ctir !149
  %ufmt = alloca [5 x i8], align 1, !ctir !447
  %u = alloca i8*, align 8, !ctir !143
  %ubuf = alloca [1024 x i8], align 16, !ctir !1615
  %len233 = alloca i64, align 8, !ctir !149
  %_n251 = alloca i64, align 8, !ctir !149
  %_w253 = alloca i64, align 8, !ctir !149
  %_incr261 = alloca i64, align 8, !ctir !149
  %_delta281 = alloca i64, align 8, !ctir !149
  %century = alloca i32, align 4, !ctir !27
  %_n437 = alloca i64, align 8, !ctir !149
  %_w438 = alloca i64, align 8, !ctir !149
  %_incr446 = alloca i64, align 8, !ctir !149
  %_delta466 = alloca i64, align 8, !ctir !149
  %padding = alloca i32, align 4, !ctir !27
  %_n525 = alloca i64, align 8, !ctir !149
  %_w526 = alloca i64, align 8, !ctir !149
  %_incr534 = alloca i64, align 8, !ctir !149
  %_delta554 = alloca i64, align 8, !ctir !149
  %_n584 = alloca i64, align 8, !ctir !149
  %_w585 = alloca i64, align 8, !ctir !149
  %_incr593 = alloca i64, align 8, !ctir !149
  %_delta613 = alloca i64, align 8, !ctir !149
  %_n646 = alloca i64, align 8, !ctir !149
  %_w647 = alloca i64, align 8, !ctir !149
  %_incr655 = alloca i64, align 8, !ctir !149
  %_delta675 = alloca i64, align 8, !ctir !149
  %_n698 = alloca i64, align 8, !ctir !149
  %_w704 = alloca i64, align 8, !ctir !149
  %_incr712 = alloca i64, align 8, !ctir !149
  %_delta732 = alloca i64, align 8, !ctir !149
  %j = alloca i32, align 4, !ctir !27
  %_n867 = alloca i64, align 8, !ctir !149
  %_w868 = alloca i64, align 8, !ctir !149
  %_incr876 = alloca i64, align 8, !ctir !149
  %_delta896 = alloca i64, align 8, !ctir !149
  %ltm = alloca %struct.tm, align 8, !ctir !15284
  %t = alloca i64, align 8, !ctir !162
  %d = alloca i32, align 4, !ctir !27
  %_n971 = alloca i64, align 8, !ctir !149
  %_w972 = alloca i64, align 8, !ctir !149
  %_incr980 = alloca i64, align 8, !ctir !149
  %_delta1000 = alloca i64, align 8, !ctir !149
  %year = alloca i32, align 4, !ctir !27
  %year_adjust = alloca i32, align 4, !ctir !27
  %days = alloca i32, align 4, !ctir !27
  %d1080 = alloca i32, align 4, !ctir !27
  %yy = alloca i32, align 4, !ctir !27
  %yy1197 = alloca i32, align 4, !ctir !27
  %_n1221 = alloca i64, align 8, !ctir !149
  %_w1223 = alloca i64, align 8, !ctir !149
  %_incr1231 = alloca i64, align 8, !ctir !149
  %_delta1251 = alloca i64, align 8, !ctir !149
  %diff = alloca i32, align 4, !ctir !27
  %hour_diff = alloca i32, align 4, !ctir !27
  %min_diff = alloca i32, align 4, !ctir !27
  %sec_diff = alloca i32, align 4, !ctir !27
  %flen = alloca i32, align 4, !ctir !27
  %_n1367 = alloca i64, align 8, !ctir !149
  %_w1369 = alloca i64, align 8, !ctir !149
  %_incr1377 = alloca i64, align 8, !ctir !149
  %_delta1397 = alloca i64, align 8, !ctir !149
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !15327, metadata !DIExpression()), !dbg !15328
  store i64 %maxsize, i64* %maxsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %maxsize.addr, metadata !15329, metadata !DIExpression()), !dbg !15330
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !15331, metadata !DIExpression()), !dbg !15332
  store %struct.tm* %tp, %struct.tm** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tp.addr, metadata !15333, metadata !DIExpression()), !dbg !15334
  %frombool = zext i1 %upcase to i8
  store i8 %frombool, i8* %upcase.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %upcase.addr, metadata !15335, metadata !DIExpression()), !dbg !15336
  store i32 %yr_spec, i32* %yr_spec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %yr_spec.addr, metadata !15337, metadata !DIExpression()), !dbg !15338
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !15339, metadata !DIExpression()), !dbg !15340
  store i8* %tzset_called, i8** %tzset_called.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tzset_called.addr, metadata !15341, metadata !DIExpression()), !dbg !15342
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !15343, metadata !DIExpression()), !dbg !15344
  store i32 %ns, i32* %ns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ns.addr, metadata !15345, metadata !DIExpression()), !dbg !15344
  call void @llvm.dbg.declare(metadata i32* %hour12, metadata !15346, metadata !DIExpression()), !dbg !15347
  %0 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15348
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 2, !dbg !15349, !ctir !15283
  %1 = load i32, i32* %tm_hour, align 8, !dbg !15349, !ctir !27
  store i32 %1, i32* %hour12, align 4, !dbg !15347
  call void @llvm.dbg.declare(metadata i8** %zone, metadata !15350, metadata !DIExpression()), !dbg !15351
  call void @llvm.dbg.declare(metadata i64* %i, metadata !15352, metadata !DIExpression()), !dbg !15353
  store i64 0, i64* %i, align 8, !dbg !15353
  call void @llvm.dbg.declare(metadata i8** %p, metadata !15354, metadata !DIExpression()), !dbg !15355
  %2 = load i8*, i8** %s.addr, align 8, !dbg !15356
  store i8* %2, i8** %p, align 8, !dbg !15355
  call void @llvm.dbg.declare(metadata i8** %f, metadata !15357, metadata !DIExpression()), !dbg !15358
  store i8* null, i8** %zone, align 8, !dbg !15359
  %3 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15360
  %tm_zone = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 10, !dbg !15361, !ctir !15283
  %4 = load i8*, i8** %tm_zone, align 8, !dbg !15361, !ctir !146
  store i8* %4, i8** %zone, align 8, !dbg !15362
  %5 = load i8*, i8** %zone, align 8, !dbg !15363
  %tobool = icmp ne i8* %5, null, !dbg !15363
  br i1 %tobool, label %if.end, label %if.then, !dbg !15365

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.361, i64 0, i64 0), i8** %zone, align 8, !dbg !15366
  br label %if.end, !dbg !15367

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %hour12, align 4, !dbg !15368
  %cmp = icmp sgt i32 %6, 12, !dbg !15370
  br i1 %cmp, label %if.then1, label %if.else, !dbg !15371

if.then1:                                         ; preds = %if.end
  %7 = load i32, i32* %hour12, align 4, !dbg !15372
  %sub = sub nsw i32 %7, 12, !dbg !15372
  store i32 %sub, i32* %hour12, align 4, !dbg !15372
  br label %if.end5, !dbg !15373

if.else:                                          ; preds = %if.end
  %8 = load i32, i32* %hour12, align 4, !dbg !15374
  %cmp2 = icmp eq i32 %8, 0, !dbg !15376
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !15377

if.then3:                                         ; preds = %if.else
  store i32 12, i32* %hour12, align 4, !dbg !15378
  br label %if.end4, !dbg !15379

if.end4:                                          ; preds = %if.then3, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end4, %if.then1
  %9 = load i8*, i8** %format.addr, align 8, !dbg !15380
  store i8* %9, i8** %f, align 8, !dbg !15382
  br label %for.cond, !dbg !15383

for.cond:                                         ; preds = %for.inc1436, %if.end5
  %10 = load i8*, i8** %f, align 8, !dbg !15384
  %11 = load i8, i8* %10, align 1, !dbg !15386, !ctir !147
  %conv = sext i8 %11 to i32, !dbg !15386
  %cmp6 = icmp ne i32 %conv, 0, !dbg !15387
  br i1 %cmp6, label %for.body, label %for.end1438, !dbg !15388

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %pad, metadata !15389, metadata !DIExpression()), !dbg !15391
  store i32 0, i32* %pad, align 4, !dbg !15391
  call void @llvm.dbg.declare(metadata i32* %modifier, metadata !15392, metadata !DIExpression()), !dbg !15393
  call void @llvm.dbg.declare(metadata i32* %digits, metadata !15394, metadata !DIExpression()), !dbg !15395
  store i32 0, i32* %digits, align 4, !dbg !15395
  call void @llvm.dbg.declare(metadata i32* %number_value, metadata !15396, metadata !DIExpression()), !dbg !15397
  call void @llvm.dbg.declare(metadata i32* %u_number_value, metadata !15398, metadata !DIExpression()), !dbg !15399
  call void @llvm.dbg.declare(metadata i8* %negative_number, metadata !15400, metadata !DIExpression()), !dbg !15401
  call void @llvm.dbg.declare(metadata i8* %always_output_a_sign, metadata !15402, metadata !DIExpression()), !dbg !15403
  call void @llvm.dbg.declare(metadata i32* %tz_colon_mask, metadata !15404, metadata !DIExpression()), !dbg !15405
  call void @llvm.dbg.declare(metadata i8** %subfmt, metadata !15406, metadata !DIExpression()), !dbg !15407
  call void @llvm.dbg.declare(metadata i8* %sign_char, metadata !15408, metadata !DIExpression()), !dbg !15409
  call void @llvm.dbg.declare(metadata i8** %bufp, metadata !15410, metadata !DIExpression()), !dbg !15411
  call void @llvm.dbg.declare(metadata [23 x i8]* %buf, metadata !15412, metadata !DIExpression()), !dbg !15413
  call void @llvm.dbg.declare(metadata i8* %to_lowcase, metadata !15414, metadata !DIExpression()), !dbg !15415
  store i8 0, i8* %to_lowcase, align 1, !dbg !15415
  call void @llvm.dbg.declare(metadata i8* %to_uppcase, metadata !15416, metadata !DIExpression()), !dbg !15417
  %12 = load i8, i8* %upcase.addr, align 1, !dbg !15418
  %tobool8 = trunc i8 %12 to i1, !dbg !15418
  %frombool9 = zext i1 %tobool8 to i8, !dbg !15417
  store i8 %frombool9, i8* %to_uppcase, align 1, !dbg !15417
  call void @llvm.dbg.declare(metadata i64* %colons, metadata !15419, metadata !DIExpression()), !dbg !15420
  call void @llvm.dbg.declare(metadata i8* %change_case, metadata !15421, metadata !DIExpression()), !dbg !15422
  store i8 0, i8* %change_case, align 1, !dbg !15422
  call void @llvm.dbg.declare(metadata i32* %format_char, metadata !15423, metadata !DIExpression()), !dbg !15424
  call void @llvm.dbg.declare(metadata i32* %subwidth, metadata !15425, metadata !DIExpression()), !dbg !15426
  %13 = load i8*, i8** %f, align 8, !dbg !15427
  %14 = load i8, i8* %13, align 1, !dbg !15429, !ctir !147
  %conv10 = sext i8 %14 to i32, !dbg !15429
  %cmp11 = icmp ne i32 %conv10, 37, !dbg !15430
  br i1 %cmp11, label %if.then13, label %if.end48, !dbg !15431

if.then13:                                        ; preds = %for.body
  br label %do.body, !dbg !15432

do.body:                                          ; preds = %if.then13
  call void @llvm.dbg.declare(metadata i64* %_n, metadata !15434, metadata !DIExpression()), !dbg !15436
  store i64 1, i64* %_n, align 8, !dbg !15436
  call void @llvm.dbg.declare(metadata i64* %_w, metadata !15437, metadata !DIExpression()), !dbg !15436
  %15 = load i32, i32* %width.addr, align 4, !dbg !15436
  %cmp14 = icmp slt i32 %15, 0, !dbg !15436
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !15436

cond.true:                                        ; preds = %do.body
  br label %cond.end, !dbg !15436

cond.false:                                       ; preds = %do.body
  %16 = load i32, i32* %width.addr, align 4, !dbg !15436
  br label %cond.end, !dbg !15436

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %16, %cond.false ], !dbg !15436
  %conv16 = sext i32 %cond to i64, !dbg !15436
  store i64 %conv16, i64* %_w, align 8, !dbg !15436
  call void @llvm.dbg.declare(metadata i64* %_incr, metadata !15438, metadata !DIExpression()), !dbg !15436
  %17 = load i64, i64* %_n, align 8, !dbg !15436
  %18 = load i64, i64* %_w, align 8, !dbg !15436
  %cmp17 = icmp ult i64 %17, %18, !dbg !15436
  br i1 %cmp17, label %cond.true19, label %cond.false20, !dbg !15436

cond.true19:                                      ; preds = %cond.end
  %19 = load i64, i64* %_w, align 8, !dbg !15436
  br label %cond.end21, !dbg !15436

cond.false20:                                     ; preds = %cond.end
  %20 = load i64, i64* %_n, align 8, !dbg !15436
  br label %cond.end21, !dbg !15436

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i64 [ %19, %cond.true19 ], [ %20, %cond.false20 ], !dbg !15436
  store i64 %cond22, i64* %_incr, align 8, !dbg !15436
  %21 = load i64, i64* %_incr, align 8, !dbg !15439
  %22 = load i64, i64* %maxsize.addr, align 8, !dbg !15439
  %23 = load i64, i64* %i, align 8, !dbg !15439
  %sub23 = sub i64 %22, %23, !dbg !15439
  %cmp24 = icmp uge i64 %21, %sub23, !dbg !15439
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !15436

if.then26:                                        ; preds = %cond.end21
  store i64 0, i64* %retval, align 8, !dbg !15439
  br label %return, !dbg !15439

if.end27:                                         ; preds = %cond.end21
  %24 = load i8*, i8** %p, align 8, !dbg !15441
  %tobool28 = icmp ne i8* %24, null, !dbg !15441
  br i1 %tobool28, label %if.then29, label %if.end47, !dbg !15436

if.then29:                                        ; preds = %if.end27
  %25 = load i32, i32* %digits, align 4, !dbg !15443
  %cmp30 = icmp eq i32 %25, 0, !dbg !15443
  br i1 %cmp30, label %land.lhs.true, label %if.end45, !dbg !15443

land.lhs.true:                                    ; preds = %if.then29
  %26 = load i64, i64* %_n, align 8, !dbg !15443
  %27 = load i64, i64* %_w, align 8, !dbg !15443
  %cmp32 = icmp ult i64 %26, %27, !dbg !15443
  br i1 %cmp32, label %if.then34, label %if.end45, !dbg !15446

if.then34:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %_delta, metadata !15447, metadata !DIExpression()), !dbg !15449
  %28 = load i32, i32* %width.addr, align 4, !dbg !15449
  %conv35 = sext i32 %28 to i64, !dbg !15449
  %29 = load i64, i64* %_n, align 8, !dbg !15449
  %sub36 = sub i64 %conv35, %29, !dbg !15449
  store i64 %sub36, i64* %_delta, align 8, !dbg !15449
  %30 = load i32, i32* %pad, align 4, !dbg !15450
  %cmp37 = icmp eq i32 %30, 48, !dbg !15450
  br i1 %cmp37, label %if.then41, label %lor.lhs.false, !dbg !15450

lor.lhs.false:                                    ; preds = %if.then34
  %31 = load i32, i32* %pad, align 4, !dbg !15450
  %cmp39 = icmp eq i32 %31, 43, !dbg !15450
  br i1 %cmp39, label %if.then41, label %if.else42, !dbg !15449

if.then41:                                        ; preds = %lor.lhs.false, %if.then34
  %32 = load i8*, i8** %p, align 8, !dbg !15450
  %33 = load i64, i64* %_delta, align 8, !dbg !15450
  call void @llvm.memset.p0i8.i64(i8* align 1 %32, i8 48, i64 %33, i1 false), !dbg !15450
  %34 = load i64, i64* %_delta, align 8, !dbg !15450
  %35 = load i8*, i8** %p, align 8, !dbg !15450
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %34, !dbg !15450, !ctir !144
  store i8* %add.ptr, i8** %p, align 8, !dbg !15450
  br label %if.end44, !dbg !15450

if.else42:                                        ; preds = %lor.lhs.false
  %36 = load i8*, i8** %p, align 8, !dbg !15450
  %37 = load i64, i64* %_delta, align 8, !dbg !15450
  call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 32, i64 %37, i1 false), !dbg !15450
  %38 = load i64, i64* %_delta, align 8, !dbg !15450
  %39 = load i8*, i8** %p, align 8, !dbg !15450
  %add.ptr43 = getelementptr inbounds i8, i8* %39, i64 %38, !dbg !15450, !ctir !144
  store i8* %add.ptr43, i8** %p, align 8, !dbg !15450
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then41
  br label %if.end45, !dbg !15449

if.end45:                                         ; preds = %if.end44, %land.lhs.true, %if.then29
  %40 = load i8*, i8** %f, align 8, !dbg !15446
  %41 = load i8, i8* %40, align 1, !dbg !15446, !ctir !147
  %42 = load i8*, i8** %p, align 8, !dbg !15446
  store i8 %41, i8* %42, align 1, !dbg !15446, !ctir !144
  %43 = load i64, i64* %_n, align 8, !dbg !15446
  %44 = load i8*, i8** %p, align 8, !dbg !15446
  %add.ptr46 = getelementptr inbounds i8, i8* %44, i64 %43, !dbg !15446, !ctir !144
  store i8* %add.ptr46, i8** %p, align 8, !dbg !15446
  br label %if.end47, !dbg !15446

if.end47:                                         ; preds = %if.end45, %if.end27
  %45 = load i64, i64* %_incr, align 8, !dbg !15436
  %46 = load i64, i64* %i, align 8, !dbg !15436
  %add = add i64 %46, %45, !dbg !15436
  store i64 %add, i64* %i, align 8, !dbg !15436
  br label %do.end, !dbg !15436

do.end:                                           ; preds = %if.end47
  br label %for.inc1436, !dbg !15452

if.end48:                                         ; preds = %for.body
  br label %while.body, !dbg !15453

while.body:                                       ; preds = %if.end48, %sw.bb, %sw.bb51, %sw.bb52
  %47 = load i8*, i8** %f, align 8, !dbg !15454
  %incdec.ptr = getelementptr inbounds i8, i8* %47, i32 1, !dbg !15454, !ctir !147
  store i8* %incdec.ptr, i8** %f, align 8, !dbg !15454
  %48 = load i8, i8* %incdec.ptr, align 1, !dbg !15456, !ctir !147
  %conv49 = sext i8 %48 to i32, !dbg !15456
  switch i32 %conv49, label %sw.default [
    i32 95, label %sw.bb
    i32 45, label %sw.bb
    i32 43, label %sw.bb
    i32 48, label %sw.bb
    i32 94, label %sw.bb51
    i32 35, label %sw.bb52
  ], !dbg !15457

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body
  %49 = load i8*, i8** %f, align 8, !dbg !15458
  %50 = load i8, i8* %49, align 1, !dbg !15460, !ctir !147
  %conv50 = sext i8 %50 to i32, !dbg !15460
  store i32 %conv50, i32* %pad, align 4, !dbg !15461
  br label %while.body, !dbg !15462, !llvm.loop !15463

sw.bb51:                                          ; preds = %while.body
  store i8 1, i8* %to_uppcase, align 1, !dbg !15465
  br label %while.body, !dbg !15466, !llvm.loop !15463

sw.bb52:                                          ; preds = %while.body
  store i8 1, i8* %change_case, align 1, !dbg !15467
  br label %while.body, !dbg !15468, !llvm.loop !15463

sw.default:                                       ; preds = %while.body
  br label %sw.epilog, !dbg !15469

sw.epilog:                                        ; preds = %sw.default
  br label %while.end, !dbg !15470

while.end:                                        ; preds = %sw.epilog
  %51 = load i8*, i8** %f, align 8, !dbg !15471
  %52 = load i8, i8* %51, align 1, !dbg !15471, !ctir !147
  %conv53 = sext i8 %52 to i32, !dbg !15471
  %sub54 = sub i32 %conv53, 48, !dbg !15471
  %cmp55 = icmp ule i32 %sub54, 9, !dbg !15471
  br i1 %cmp55, label %if.then57, label %if.end81, !dbg !15473

if.then57:                                        ; preds = %while.end
  store i32 0, i32* %width.addr, align 4, !dbg !15474
  br label %do.body58, !dbg !15476

do.body58:                                        ; preds = %do.cond, %if.then57
  %53 = load i32, i32* %width.addr, align 4, !dbg !15477
  %cmp59 = icmp sgt i32 %53, 214748364, !dbg !15480
  br i1 %cmp59, label %if.then69, label %lor.lhs.false61, !dbg !15481

lor.lhs.false61:                                  ; preds = %do.body58
  %54 = load i32, i32* %width.addr, align 4, !dbg !15482
  %cmp62 = icmp eq i32 %54, 214748364, !dbg !15483
  br i1 %cmp62, label %land.lhs.true64, label %if.else70, !dbg !15484

land.lhs.true64:                                  ; preds = %lor.lhs.false61
  %55 = load i8*, i8** %f, align 8, !dbg !15485
  %56 = load i8, i8* %55, align 1, !dbg !15486, !ctir !147
  %conv65 = sext i8 %56 to i32, !dbg !15486
  %sub66 = sub nsw i32 %conv65, 48, !dbg !15487
  %cmp67 = icmp sgt i32 %sub66, 7, !dbg !15488
  br i1 %cmp67, label %if.then69, label %if.else70, !dbg !15489

if.then69:                                        ; preds = %land.lhs.true64, %do.body58
  store i32 2147483647, i32* %width.addr, align 4, !dbg !15490
  br label %if.end74, !dbg !15491

if.else70:                                        ; preds = %land.lhs.true64, %lor.lhs.false61
  %57 = load i32, i32* %width.addr, align 4, !dbg !15492
  %mul = mul nsw i32 %57, 10, !dbg !15492
  store i32 %mul, i32* %width.addr, align 4, !dbg !15492
  %58 = load i8*, i8** %f, align 8, !dbg !15494
  %59 = load i8, i8* %58, align 1, !dbg !15495, !ctir !147
  %conv71 = sext i8 %59 to i32, !dbg !15495
  %sub72 = sub nsw i32 %conv71, 48, !dbg !15496
  %60 = load i32, i32* %width.addr, align 4, !dbg !15497
  %add73 = add nsw i32 %60, %sub72, !dbg !15497
  store i32 %add73, i32* %width.addr, align 4, !dbg !15497
  br label %if.end74

if.end74:                                         ; preds = %if.else70, %if.then69
  %61 = load i8*, i8** %f, align 8, !dbg !15498
  %incdec.ptr75 = getelementptr inbounds i8, i8* %61, i32 1, !dbg !15498, !ctir !147
  store i8* %incdec.ptr75, i8** %f, align 8, !dbg !15498
  br label %do.cond, !dbg !15499

do.cond:                                          ; preds = %if.end74
  %62 = load i8*, i8** %f, align 8, !dbg !15500
  %63 = load i8, i8* %62, align 1, !dbg !15500, !ctir !147
  %conv76 = sext i8 %63 to i32, !dbg !15500
  %sub77 = sub i32 %conv76, 48, !dbg !15500
  %cmp78 = icmp ule i32 %sub77, 9, !dbg !15500
  br i1 %cmp78, label %do.body58, label %do.end80, !dbg !15499, !llvm.loop !15501

do.end80:                                         ; preds = %do.cond
  br label %if.end81, !dbg !15503

if.end81:                                         ; preds = %do.end80, %while.end
  %64 = load i8*, i8** %f, align 8, !dbg !15504
  %65 = load i8, i8* %64, align 1, !dbg !15505, !ctir !147
  %conv82 = sext i8 %65 to i32, !dbg !15505
  switch i32 %conv82, label %sw.default86 [
    i32 69, label %sw.bb83
    i32 79, label %sw.bb83
  ], !dbg !15506

sw.bb83:                                          ; preds = %if.end81, %if.end81
  %66 = load i8*, i8** %f, align 8, !dbg !15507
  %incdec.ptr84 = getelementptr inbounds i8, i8* %66, i32 1, !dbg !15507, !ctir !147
  store i8* %incdec.ptr84, i8** %f, align 8, !dbg !15507
  %67 = load i8, i8* %66, align 1, !dbg !15509, !ctir !147
  %conv85 = sext i8 %67 to i32, !dbg !15509
  store i32 %conv85, i32* %modifier, align 4, !dbg !15510
  br label %sw.epilog87, !dbg !15511

sw.default86:                                     ; preds = %if.end81
  store i32 0, i32* %modifier, align 4, !dbg !15512
  br label %sw.epilog87, !dbg !15513

sw.epilog87:                                      ; preds = %sw.default86, %sw.bb83
  %68 = load i8*, i8** %f, align 8, !dbg !15514
  %69 = load i8, i8* %68, align 1, !dbg !15515, !ctir !147
  %conv88 = sext i8 %69 to i32, !dbg !15515
  store i32 %conv88, i32* %format_char, align 4, !dbg !15516
  %70 = load i32, i32* %format_char, align 4, !dbg !15517
  switch i32 %70, label %sw.default1355 [
    i32 37, label %sw.bb89
    i32 97, label %sw.bb143
    i32 65, label %sw.bb151
    i32 98, label %sw.bb159
    i32 104, label %sw.bb159
    i32 66, label %sw.bb167
    i32 99, label %sw.bb175
    i32 67, label %sw.bb317
    i32 120, label %sw.bb336
    i32 68, label %sw.bb341
    i32 100, label %sw.bb346
    i32 101, label %sw.bb354
    i32 70, label %sw.bb761
    i32 72, label %sw.bb779
    i32 73, label %sw.bb788
    i32 107, label %sw.bb796
    i32 108, label %sw.bb805
    i32 106, label %sw.bb813
    i32 77, label %sw.bb826
    i32 109, label %sw.bb834
    i32 78, label %sw.bb847
    i32 110, label %sw.bb865
    i32 80, label %sw.bb915
    i32 112, label %sw.bb916
    i32 113, label %sw.bb920
    i32 82, label %sw.bb928
    i32 114, label %sw.bb929
    i32 83, label %sw.bb930
    i32 115, label %sw.bb938
    i32 88, label %sw.bb963
    i32 84, label %sw.bb968
    i32 116, label %sw.bb969
    i32 117, label %sw.bb1019
    i32 85, label %sw.bb1027
    i32 86, label %sw.bb1040
    i32 103, label %sw.bb1040
    i32 71, label %sw.bb1040
    i32 87, label %sw.bb1149
    i32 119, label %sw.bb1165
    i32 89, label %sw.bb1174
    i32 121, label %sw.bb1192
    i32 90, label %sw.bb1216
    i32 58, label %sw.bb1280
    i32 122, label %sw.bb1296
    i32 0, label %sw.bb1353
  ], !dbg !15518

sw.bb89:                                          ; preds = %sw.epilog87
  %71 = load i32, i32* %modifier, align 4, !dbg !15519
  %cmp90 = icmp ne i32 %71, 0, !dbg !15522
  br i1 %cmp90, label %if.then92, label %if.end93, !dbg !15523

if.then92:                                        ; preds = %sw.bb89
  br label %bad_format, !dbg !15524

if.end93:                                         ; preds = %sw.bb89
  br label %do.body94, !dbg !15525

do.body94:                                        ; preds = %if.end93
  call void @llvm.dbg.declare(metadata i64* %_n95, metadata !15526, metadata !DIExpression()), !dbg !15528
  store i64 1, i64* %_n95, align 8, !dbg !15528
  call void @llvm.dbg.declare(metadata i64* %_w96, metadata !15529, metadata !DIExpression()), !dbg !15528
  %72 = load i32, i32* %width.addr, align 4, !dbg !15528
  %cmp97 = icmp slt i32 %72, 0, !dbg !15528
  br i1 %cmp97, label %cond.true99, label %cond.false100, !dbg !15528

cond.true99:                                      ; preds = %do.body94
  br label %cond.end101, !dbg !15528

cond.false100:                                    ; preds = %do.body94
  %73 = load i32, i32* %width.addr, align 4, !dbg !15528
  br label %cond.end101, !dbg !15528

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi i32 [ 0, %cond.true99 ], [ %73, %cond.false100 ], !dbg !15528
  %conv103 = sext i32 %cond102 to i64, !dbg !15528
  store i64 %conv103, i64* %_w96, align 8, !dbg !15528
  call void @llvm.dbg.declare(metadata i64* %_incr104, metadata !15530, metadata !DIExpression()), !dbg !15528
  %74 = load i64, i64* %_n95, align 8, !dbg !15528
  %75 = load i64, i64* %_w96, align 8, !dbg !15528
  %cmp105 = icmp ult i64 %74, %75, !dbg !15528
  br i1 %cmp105, label %cond.true107, label %cond.false108, !dbg !15528

cond.true107:                                     ; preds = %cond.end101
  %76 = load i64, i64* %_w96, align 8, !dbg !15528
  br label %cond.end109, !dbg !15528

cond.false108:                                    ; preds = %cond.end101
  %77 = load i64, i64* %_n95, align 8, !dbg !15528
  br label %cond.end109, !dbg !15528

cond.end109:                                      ; preds = %cond.false108, %cond.true107
  %cond110 = phi i64 [ %76, %cond.true107 ], [ %77, %cond.false108 ], !dbg !15528
  store i64 %cond110, i64* %_incr104, align 8, !dbg !15528
  %78 = load i64, i64* %_incr104, align 8, !dbg !15531
  %79 = load i64, i64* %maxsize.addr, align 8, !dbg !15531
  %80 = load i64, i64* %i, align 8, !dbg !15531
  %sub111 = sub i64 %79, %80, !dbg !15531
  %cmp112 = icmp uge i64 %78, %sub111, !dbg !15531
  br i1 %cmp112, label %if.then114, label %if.end115, !dbg !15528

if.then114:                                       ; preds = %cond.end109
  store i64 0, i64* %retval, align 8, !dbg !15531
  br label %return, !dbg !15531

if.end115:                                        ; preds = %cond.end109
  %81 = load i8*, i8** %p, align 8, !dbg !15533
  %tobool116 = icmp ne i8* %81, null, !dbg !15533
  br i1 %tobool116, label %if.then117, label %if.end139, !dbg !15528

if.then117:                                       ; preds = %if.end115
  %82 = load i32, i32* %digits, align 4, !dbg !15535
  %cmp118 = icmp eq i32 %82, 0, !dbg !15535
  br i1 %cmp118, label %land.lhs.true120, label %if.end137, !dbg !15535

land.lhs.true120:                                 ; preds = %if.then117
  %83 = load i64, i64* %_n95, align 8, !dbg !15535
  %84 = load i64, i64* %_w96, align 8, !dbg !15535
  %cmp121 = icmp ult i64 %83, %84, !dbg !15535
  br i1 %cmp121, label %if.then123, label %if.end137, !dbg !15538

if.then123:                                       ; preds = %land.lhs.true120
  call void @llvm.dbg.declare(metadata i64* %_delta124, metadata !15539, metadata !DIExpression()), !dbg !15541
  %85 = load i32, i32* %width.addr, align 4, !dbg !15541
  %conv125 = sext i32 %85 to i64, !dbg !15541
  %86 = load i64, i64* %_n95, align 8, !dbg !15541
  %sub126 = sub i64 %conv125, %86, !dbg !15541
  store i64 %sub126, i64* %_delta124, align 8, !dbg !15541
  %87 = load i32, i32* %pad, align 4, !dbg !15542
  %cmp127 = icmp eq i32 %87, 48, !dbg !15542
  br i1 %cmp127, label %if.then132, label %lor.lhs.false129, !dbg !15542

lor.lhs.false129:                                 ; preds = %if.then123
  %88 = load i32, i32* %pad, align 4, !dbg !15542
  %cmp130 = icmp eq i32 %88, 43, !dbg !15542
  br i1 %cmp130, label %if.then132, label %if.else134, !dbg !15541

if.then132:                                       ; preds = %lor.lhs.false129, %if.then123
  %89 = load i8*, i8** %p, align 8, !dbg !15542
  %90 = load i64, i64* %_delta124, align 8, !dbg !15542
  call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 48, i64 %90, i1 false), !dbg !15542
  %91 = load i64, i64* %_delta124, align 8, !dbg !15542
  %92 = load i8*, i8** %p, align 8, !dbg !15542
  %add.ptr133 = getelementptr inbounds i8, i8* %92, i64 %91, !dbg !15542, !ctir !144
  store i8* %add.ptr133, i8** %p, align 8, !dbg !15542
  br label %if.end136, !dbg !15542

if.else134:                                       ; preds = %lor.lhs.false129
  %93 = load i8*, i8** %p, align 8, !dbg !15542
  %94 = load i64, i64* %_delta124, align 8, !dbg !15542
  call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 32, i64 %94, i1 false), !dbg !15542
  %95 = load i64, i64* %_delta124, align 8, !dbg !15542
  %96 = load i8*, i8** %p, align 8, !dbg !15542
  %add.ptr135 = getelementptr inbounds i8, i8* %96, i64 %95, !dbg !15542, !ctir !144
  store i8* %add.ptr135, i8** %p, align 8, !dbg !15542
  br label %if.end136

if.end136:                                        ; preds = %if.else134, %if.then132
  br label %if.end137, !dbg !15541

if.end137:                                        ; preds = %if.end136, %land.lhs.true120, %if.then117
  %97 = load i8*, i8** %f, align 8, !dbg !15538
  %98 = load i8, i8* %97, align 1, !dbg !15538, !ctir !147
  %99 = load i8*, i8** %p, align 8, !dbg !15538
  store i8 %98, i8* %99, align 1, !dbg !15538, !ctir !144
  %100 = load i64, i64* %_n95, align 8, !dbg !15538
  %101 = load i8*, i8** %p, align 8, !dbg !15538
  %add.ptr138 = getelementptr inbounds i8, i8* %101, i64 %100, !dbg !15538, !ctir !144
  store i8* %add.ptr138, i8** %p, align 8, !dbg !15538
  br label %if.end139, !dbg !15538

if.end139:                                        ; preds = %if.end137, %if.end115
  %102 = load i64, i64* %_incr104, align 8, !dbg !15528
  %103 = load i64, i64* %i, align 8, !dbg !15528
  %add140 = add i64 %103, %102, !dbg !15528
  store i64 %add140, i64* %i, align 8, !dbg !15528
  br label %do.end142, !dbg !15528

do.end142:                                        ; preds = %if.end139
  br label %sw.epilog1435, !dbg !15544

sw.bb143:                                         ; preds = %sw.epilog87
  %104 = load i32, i32* %modifier, align 4, !dbg !15545
  %cmp144 = icmp ne i32 %104, 0, !dbg !15547
  br i1 %cmp144, label %if.then146, label %if.end147, !dbg !15548

if.then146:                                       ; preds = %sw.bb143
  br label %bad_format, !dbg !15549

if.end147:                                        ; preds = %sw.bb143
  %105 = load i8, i8* %change_case, align 1, !dbg !15550
  %tobool148 = trunc i8 %105 to i1, !dbg !15550
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !15552

if.then149:                                       ; preds = %if.end147
  store i8 1, i8* %to_uppcase, align 1, !dbg !15553
  store i8 0, i8* %to_lowcase, align 1, !dbg !15555
  br label %if.end150, !dbg !15556

if.end150:                                        ; preds = %if.then149, %if.end147
  br label %underlying_strftime, !dbg !15557

sw.bb151:                                         ; preds = %sw.epilog87
  %106 = load i32, i32* %modifier, align 4, !dbg !15558
  %cmp152 = icmp ne i32 %106, 0, !dbg !15560
  br i1 %cmp152, label %if.then154, label %if.end155, !dbg !15561

if.then154:                                       ; preds = %sw.bb151
  br label %bad_format, !dbg !15562

if.end155:                                        ; preds = %sw.bb151
  %107 = load i8, i8* %change_case, align 1, !dbg !15563
  %tobool156 = trunc i8 %107 to i1, !dbg !15563
  br i1 %tobool156, label %if.then157, label %if.end158, !dbg !15565

if.then157:                                       ; preds = %if.end155
  store i8 1, i8* %to_uppcase, align 1, !dbg !15566
  store i8 0, i8* %to_lowcase, align 1, !dbg !15568
  br label %if.end158, !dbg !15569

if.end158:                                        ; preds = %if.then157, %if.end155
  br label %underlying_strftime, !dbg !15570

sw.bb159:                                         ; preds = %sw.epilog87, %sw.epilog87
  %108 = load i8, i8* %change_case, align 1, !dbg !15571
  %tobool160 = trunc i8 %108 to i1, !dbg !15571
  br i1 %tobool160, label %if.then161, label %if.end162, !dbg !15573

if.then161:                                       ; preds = %sw.bb159
  store i8 1, i8* %to_uppcase, align 1, !dbg !15574
  store i8 0, i8* %to_lowcase, align 1, !dbg !15576
  br label %if.end162, !dbg !15577

if.end162:                                        ; preds = %if.then161, %sw.bb159
  %109 = load i32, i32* %modifier, align 4, !dbg !15578
  %cmp163 = icmp eq i32 %109, 69, !dbg !15580
  br i1 %cmp163, label %if.then165, label %if.end166, !dbg !15581

if.then165:                                       ; preds = %if.end162
  br label %bad_format, !dbg !15582

if.end166:                                        ; preds = %if.end162
  br label %underlying_strftime, !dbg !15583

sw.bb167:                                         ; preds = %sw.epilog87
  %110 = load i32, i32* %modifier, align 4, !dbg !15584
  %cmp168 = icmp eq i32 %110, 69, !dbg !15586
  br i1 %cmp168, label %if.then170, label %if.end171, !dbg !15587

if.then170:                                       ; preds = %sw.bb167
  br label %bad_format, !dbg !15588

if.end171:                                        ; preds = %sw.bb167
  %111 = load i8, i8* %change_case, align 1, !dbg !15589
  %tobool172 = trunc i8 %111 to i1, !dbg !15589
  br i1 %tobool172, label %if.then173, label %if.end174, !dbg !15591

if.then173:                                       ; preds = %if.end171
  store i8 1, i8* %to_uppcase, align 1, !dbg !15592
  store i8 0, i8* %to_lowcase, align 1, !dbg !15594
  br label %if.end174, !dbg !15595

if.end174:                                        ; preds = %if.then173, %if.end171
  br label %underlying_strftime, !dbg !15596

sw.bb175:                                         ; preds = %sw.epilog87
  %112 = load i32, i32* %modifier, align 4, !dbg !15597
  %cmp176 = icmp eq i32 %112, 79, !dbg !15599
  br i1 %cmp176, label %if.then178, label %if.end179, !dbg !15600

if.then178:                                       ; preds = %sw.bb175
  br label %bad_format, !dbg !15601

if.end179:                                        ; preds = %sw.bb175
  br label %underlying_strftime, !dbg !15602

subformat:                                        ; preds = %sw.bb968, %sw.bb928, %if.end345
  call void @llvm.dbg.label(metadata !15603), !dbg !15604
  store i32 -1, i32* %subwidth, align 4, !dbg !15605
  br label %subformat_width, !dbg !15606

subformat_width:                                  ; preds = %if.end778, %subformat
  call void @llvm.dbg.label(metadata !15607), !dbg !15608
  call void @llvm.dbg.declare(metadata i64* %len, metadata !15609, metadata !DIExpression()), !dbg !15611
  %113 = load i8*, i8** %subfmt, align 8, !dbg !15612
  %114 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15613
  %115 = load i8, i8* %to_uppcase, align 1, !dbg !15614
  %tobool180 = trunc i8 %115 to i1, !dbg !15614
  %116 = load i32, i32* %pad, align 4, !dbg !15615
  %117 = load i32, i32* %subwidth, align 4, !dbg !15616
  %118 = load i8*, i8** %tzset_called.addr, align 8, !dbg !15617
  %119 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !15618
  %120 = load i32, i32* %ns.addr, align 4, !dbg !15618
  %call = call i64 @__strftime_internal(i8* null, i64 -1, i8* %113, %struct.tm* %114, i1 zeroext %tobool180, i32 %116, i32 %117, i8* %118, %struct.tm_zone* %119, i32 %120), !dbg !15619
  store i64 %call, i64* %len, align 8, !dbg !15611
  br label %do.body181, !dbg !15620

do.body181:                                       ; preds = %subformat_width
  call void @llvm.dbg.declare(metadata i64* %_n182, metadata !15621, metadata !DIExpression()), !dbg !15623
  %121 = load i64, i64* %len, align 8, !dbg !15623
  store i64 %121, i64* %_n182, align 8, !dbg !15623
  call void @llvm.dbg.declare(metadata i64* %_w183, metadata !15624, metadata !DIExpression()), !dbg !15623
  %122 = load i32, i32* %width.addr, align 4, !dbg !15623
  %cmp184 = icmp slt i32 %122, 0, !dbg !15623
  br i1 %cmp184, label %cond.true186, label %cond.false187, !dbg !15623

cond.true186:                                     ; preds = %do.body181
  br label %cond.end188, !dbg !15623

cond.false187:                                    ; preds = %do.body181
  %123 = load i32, i32* %width.addr, align 4, !dbg !15623
  br label %cond.end188, !dbg !15623

cond.end188:                                      ; preds = %cond.false187, %cond.true186
  %cond189 = phi i32 [ 0, %cond.true186 ], [ %123, %cond.false187 ], !dbg !15623
  %conv190 = sext i32 %cond189 to i64, !dbg !15623
  store i64 %conv190, i64* %_w183, align 8, !dbg !15623
  call void @llvm.dbg.declare(metadata i64* %_incr191, metadata !15625, metadata !DIExpression()), !dbg !15623
  %124 = load i64, i64* %_n182, align 8, !dbg !15623
  %125 = load i64, i64* %_w183, align 8, !dbg !15623
  %cmp192 = icmp ult i64 %124, %125, !dbg !15623
  br i1 %cmp192, label %cond.true194, label %cond.false195, !dbg !15623

cond.true194:                                     ; preds = %cond.end188
  %126 = load i64, i64* %_w183, align 8, !dbg !15623
  br label %cond.end196, !dbg !15623

cond.false195:                                    ; preds = %cond.end188
  %127 = load i64, i64* %_n182, align 8, !dbg !15623
  br label %cond.end196, !dbg !15623

cond.end196:                                      ; preds = %cond.false195, %cond.true194
  %cond197 = phi i64 [ %126, %cond.true194 ], [ %127, %cond.false195 ], !dbg !15623
  store i64 %cond197, i64* %_incr191, align 8, !dbg !15623
  %128 = load i64, i64* %_incr191, align 8, !dbg !15626
  %129 = load i64, i64* %maxsize.addr, align 8, !dbg !15626
  %130 = load i64, i64* %i, align 8, !dbg !15626
  %sub198 = sub i64 %129, %130, !dbg !15626
  %cmp199 = icmp uge i64 %128, %sub198, !dbg !15626
  br i1 %cmp199, label %if.then201, label %if.end202, !dbg !15623

if.then201:                                       ; preds = %cond.end196
  store i64 0, i64* %retval, align 8, !dbg !15626
  br label %return, !dbg !15626

if.end202:                                        ; preds = %cond.end196
  %131 = load i8*, i8** %p, align 8, !dbg !15628
  %tobool203 = icmp ne i8* %131, null, !dbg !15628
  br i1 %tobool203, label %if.then204, label %if.end229, !dbg !15623

if.then204:                                       ; preds = %if.end202
  %132 = load i32, i32* %digits, align 4, !dbg !15630
  %cmp205 = icmp eq i32 %132, 0, !dbg !15630
  br i1 %cmp205, label %land.lhs.true207, label %if.end224, !dbg !15630

land.lhs.true207:                                 ; preds = %if.then204
  %133 = load i64, i64* %_n182, align 8, !dbg !15630
  %134 = load i64, i64* %_w183, align 8, !dbg !15630
  %cmp208 = icmp ult i64 %133, %134, !dbg !15630
  br i1 %cmp208, label %if.then210, label %if.end224, !dbg !15633

if.then210:                                       ; preds = %land.lhs.true207
  call void @llvm.dbg.declare(metadata i64* %_delta211, metadata !15634, metadata !DIExpression()), !dbg !15636
  %135 = load i32, i32* %width.addr, align 4, !dbg !15636
  %conv212 = sext i32 %135 to i64, !dbg !15636
  %136 = load i64, i64* %_n182, align 8, !dbg !15636
  %sub213 = sub i64 %conv212, %136, !dbg !15636
  store i64 %sub213, i64* %_delta211, align 8, !dbg !15636
  %137 = load i32, i32* %pad, align 4, !dbg !15637
  %cmp214 = icmp eq i32 %137, 48, !dbg !15637
  br i1 %cmp214, label %if.then219, label %lor.lhs.false216, !dbg !15637

lor.lhs.false216:                                 ; preds = %if.then210
  %138 = load i32, i32* %pad, align 4, !dbg !15637
  %cmp217 = icmp eq i32 %138, 43, !dbg !15637
  br i1 %cmp217, label %if.then219, label %if.else221, !dbg !15636

if.then219:                                       ; preds = %lor.lhs.false216, %if.then210
  %139 = load i8*, i8** %p, align 8, !dbg !15637
  %140 = load i64, i64* %_delta211, align 8, !dbg !15637
  call void @llvm.memset.p0i8.i64(i8* align 1 %139, i8 48, i64 %140, i1 false), !dbg !15637
  %141 = load i64, i64* %_delta211, align 8, !dbg !15637
  %142 = load i8*, i8** %p, align 8, !dbg !15637
  %add.ptr220 = getelementptr inbounds i8, i8* %142, i64 %141, !dbg !15637, !ctir !144
  store i8* %add.ptr220, i8** %p, align 8, !dbg !15637
  br label %if.end223, !dbg !15637

if.else221:                                       ; preds = %lor.lhs.false216
  %143 = load i8*, i8** %p, align 8, !dbg !15637
  %144 = load i64, i64* %_delta211, align 8, !dbg !15637
  call void @llvm.memset.p0i8.i64(i8* align 1 %143, i8 32, i64 %144, i1 false), !dbg !15637
  %145 = load i64, i64* %_delta211, align 8, !dbg !15637
  %146 = load i8*, i8** %p, align 8, !dbg !15637
  %add.ptr222 = getelementptr inbounds i8, i8* %146, i64 %145, !dbg !15637, !ctir !144
  store i8* %add.ptr222, i8** %p, align 8, !dbg !15637
  br label %if.end223

if.end223:                                        ; preds = %if.else221, %if.then219
  br label %if.end224, !dbg !15636

if.end224:                                        ; preds = %if.end223, %land.lhs.true207, %if.then204
  %147 = load i8*, i8** %p, align 8, !dbg !15633
  %148 = load i64, i64* %maxsize.addr, align 8, !dbg !15633
  %149 = load i64, i64* %i, align 8, !dbg !15633
  %sub225 = sub i64 %148, %149, !dbg !15633
  %150 = load i8*, i8** %subfmt, align 8, !dbg !15633
  %151 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15633
  %152 = load i8, i8* %to_uppcase, align 1, !dbg !15633
  %tobool226 = trunc i8 %152 to i1, !dbg !15633
  %153 = load i32, i32* %pad, align 4, !dbg !15633
  %154 = load i32, i32* %subwidth, align 4, !dbg !15633
  %155 = load i8*, i8** %tzset_called.addr, align 8, !dbg !15633
  %156 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !15633
  %157 = load i32, i32* %ns.addr, align 4, !dbg !15633
  %call227 = call i64 @__strftime_internal(i8* %147, i64 %sub225, i8* %150, %struct.tm* %151, i1 zeroext %tobool226, i32 %153, i32 %154, i8* %155, %struct.tm_zone* %156, i32 %157), !dbg !15633
  %158 = load i64, i64* %_n182, align 8, !dbg !15633
  %159 = load i8*, i8** %p, align 8, !dbg !15633
  %add.ptr228 = getelementptr inbounds i8, i8* %159, i64 %158, !dbg !15633, !ctir !144
  store i8* %add.ptr228, i8** %p, align 8, !dbg !15633
  br label %if.end229, !dbg !15633

if.end229:                                        ; preds = %if.end224, %if.end202
  %160 = load i64, i64* %_incr191, align 8, !dbg !15623
  %161 = load i64, i64* %i, align 8, !dbg !15623
  %add230 = add i64 %161, %160, !dbg !15623
  store i64 %add230, i64* %i, align 8, !dbg !15623
  br label %do.end232, !dbg !15623

do.end232:                                        ; preds = %if.end229
  br label %sw.epilog1435, !dbg !15639

underlying_strftime:                              ; preds = %if.then1195, %if.then1177, %if.end967, %sw.bb929, %if.end919, %if.then391, %if.end340, %if.then320, %if.end179, %if.end174, %if.end166, %if.end158, %if.end150
  call void @llvm.dbg.label(metadata !15640), !dbg !15641
  call void @llvm.dbg.declare(metadata [5 x i8]* %ufmt, metadata !15642, metadata !DIExpression()), !dbg !15644
  call void @llvm.dbg.declare(metadata i8** %u, metadata !15645, metadata !DIExpression()), !dbg !15646
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %ufmt, i64 0, i64 0, !dbg !15647, !ctir !447
  store i8* %arraydecay, i8** %u, align 8, !dbg !15646
  call void @llvm.dbg.declare(metadata [1024 x i8]* %ubuf, metadata !15648, metadata !DIExpression()), !dbg !15649
  call void @llvm.dbg.declare(metadata i64* %len233, metadata !15650, metadata !DIExpression()), !dbg !15651
  %162 = load i8*, i8** %u, align 8, !dbg !15652
  %incdec.ptr234 = getelementptr inbounds i8, i8* %162, i32 1, !dbg !15652, !ctir !144
  store i8* %incdec.ptr234, i8** %u, align 8, !dbg !15652
  store i8 32, i8* %162, align 1, !dbg !15653, !ctir !144
  %163 = load i8*, i8** %u, align 8, !dbg !15654
  %incdec.ptr235 = getelementptr inbounds i8, i8* %163, i32 1, !dbg !15654, !ctir !144
  store i8* %incdec.ptr235, i8** %u, align 8, !dbg !15654
  store i8 37, i8* %163, align 1, !dbg !15655, !ctir !144
  %164 = load i32, i32* %modifier, align 4, !dbg !15656
  %cmp236 = icmp ne i32 %164, 0, !dbg !15658
  br i1 %cmp236, label %if.then238, label %if.end241, !dbg !15659

if.then238:                                       ; preds = %underlying_strftime
  %165 = load i32, i32* %modifier, align 4, !dbg !15660
  %conv239 = trunc i32 %165 to i8, !dbg !15660
  %166 = load i8*, i8** %u, align 8, !dbg !15661
  %incdec.ptr240 = getelementptr inbounds i8, i8* %166, i32 1, !dbg !15661, !ctir !144
  store i8* %incdec.ptr240, i8** %u, align 8, !dbg !15661
  store i8 %conv239, i8* %166, align 1, !dbg !15662, !ctir !144
  br label %if.end241, !dbg !15663

if.end241:                                        ; preds = %if.then238, %underlying_strftime
  %167 = load i32, i32* %format_char, align 4, !dbg !15664
  %conv242 = trunc i32 %167 to i8, !dbg !15664
  %168 = load i8*, i8** %u, align 8, !dbg !15665
  %incdec.ptr243 = getelementptr inbounds i8, i8* %168, i32 1, !dbg !15665, !ctir !144
  store i8* %incdec.ptr243, i8** %u, align 8, !dbg !15665
  store i8 %conv242, i8* %168, align 1, !dbg !15666, !ctir !144
  %169 = load i8*, i8** %u, align 8, !dbg !15667
  store i8 0, i8* %169, align 1, !dbg !15668, !ctir !144
  %arraydecay244 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ubuf, i64 0, i64 0, !dbg !15669, !ctir !1615
  %arraydecay245 = getelementptr inbounds [5 x i8], [5 x i8]* %ufmt, i64 0, i64 0, !dbg !15670, !ctir !447
  %170 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15671
  %call246 = call i64 @strftime(i8* %arraydecay244, i64 1024, i8* %arraydecay245, %struct.tm* %170) #13, !dbg !15672
  store i64 %call246, i64* %len233, align 8, !dbg !15673
  %171 = load i64, i64* %len233, align 8, !dbg !15674
  %cmp247 = icmp ne i64 %171, 0, !dbg !15676
  br i1 %cmp247, label %if.then249, label %if.end316, !dbg !15677

if.then249:                                       ; preds = %if.end241
  br label %do.body250, !dbg !15678

do.body250:                                       ; preds = %if.then249
  call void @llvm.dbg.declare(metadata i64* %_n251, metadata !15679, metadata !DIExpression()), !dbg !15681
  %172 = load i64, i64* %len233, align 8, !dbg !15681
  %sub252 = sub i64 %172, 1, !dbg !15681
  store i64 %sub252, i64* %_n251, align 8, !dbg !15681
  call void @llvm.dbg.declare(metadata i64* %_w253, metadata !15682, metadata !DIExpression()), !dbg !15681
  %173 = load i32, i32* %width.addr, align 4, !dbg !15681
  %cmp254 = icmp slt i32 %173, 0, !dbg !15681
  br i1 %cmp254, label %cond.true256, label %cond.false257, !dbg !15681

cond.true256:                                     ; preds = %do.body250
  br label %cond.end258, !dbg !15681

cond.false257:                                    ; preds = %do.body250
  %174 = load i32, i32* %width.addr, align 4, !dbg !15681
  br label %cond.end258, !dbg !15681

cond.end258:                                      ; preds = %cond.false257, %cond.true256
  %cond259 = phi i32 [ 0, %cond.true256 ], [ %174, %cond.false257 ], !dbg !15681
  %conv260 = sext i32 %cond259 to i64, !dbg !15681
  store i64 %conv260, i64* %_w253, align 8, !dbg !15681
  call void @llvm.dbg.declare(metadata i64* %_incr261, metadata !15683, metadata !DIExpression()), !dbg !15681
  %175 = load i64, i64* %_n251, align 8, !dbg !15681
  %176 = load i64, i64* %_w253, align 8, !dbg !15681
  %cmp262 = icmp ult i64 %175, %176, !dbg !15681
  br i1 %cmp262, label %cond.true264, label %cond.false265, !dbg !15681

cond.true264:                                     ; preds = %cond.end258
  %177 = load i64, i64* %_w253, align 8, !dbg !15681
  br label %cond.end266, !dbg !15681

cond.false265:                                    ; preds = %cond.end258
  %178 = load i64, i64* %_n251, align 8, !dbg !15681
  br label %cond.end266, !dbg !15681

cond.end266:                                      ; preds = %cond.false265, %cond.true264
  %cond267 = phi i64 [ %177, %cond.true264 ], [ %178, %cond.false265 ], !dbg !15681
  store i64 %cond267, i64* %_incr261, align 8, !dbg !15681
  %179 = load i64, i64* %_incr261, align 8, !dbg !15684
  %180 = load i64, i64* %maxsize.addr, align 8, !dbg !15684
  %181 = load i64, i64* %i, align 8, !dbg !15684
  %sub268 = sub i64 %180, %181, !dbg !15684
  %cmp269 = icmp uge i64 %179, %sub268, !dbg !15684
  br i1 %cmp269, label %if.then271, label %if.end272, !dbg !15681

if.then271:                                       ; preds = %cond.end266
  store i64 0, i64* %retval, align 8, !dbg !15684
  br label %return, !dbg !15684

if.end272:                                        ; preds = %cond.end266
  %182 = load i8*, i8** %p, align 8, !dbg !15686
  %tobool273 = icmp ne i8* %182, null, !dbg !15686
  br i1 %tobool273, label %if.then274, label %if.end312, !dbg !15681

if.then274:                                       ; preds = %if.end272
  %183 = load i32, i32* %digits, align 4, !dbg !15688
  %cmp275 = icmp eq i32 %183, 0, !dbg !15688
  br i1 %cmp275, label %land.lhs.true277, label %if.end294, !dbg !15688

land.lhs.true277:                                 ; preds = %if.then274
  %184 = load i64, i64* %_n251, align 8, !dbg !15688
  %185 = load i64, i64* %_w253, align 8, !dbg !15688
  %cmp278 = icmp ult i64 %184, %185, !dbg !15688
  br i1 %cmp278, label %if.then280, label %if.end294, !dbg !15691

if.then280:                                       ; preds = %land.lhs.true277
  call void @llvm.dbg.declare(metadata i64* %_delta281, metadata !15692, metadata !DIExpression()), !dbg !15694
  %186 = load i32, i32* %width.addr, align 4, !dbg !15694
  %conv282 = sext i32 %186 to i64, !dbg !15694
  %187 = load i64, i64* %_n251, align 8, !dbg !15694
  %sub283 = sub i64 %conv282, %187, !dbg !15694
  store i64 %sub283, i64* %_delta281, align 8, !dbg !15694
  %188 = load i32, i32* %pad, align 4, !dbg !15695
  %cmp284 = icmp eq i32 %188, 48, !dbg !15695
  br i1 %cmp284, label %if.then289, label %lor.lhs.false286, !dbg !15695

lor.lhs.false286:                                 ; preds = %if.then280
  %189 = load i32, i32* %pad, align 4, !dbg !15695
  %cmp287 = icmp eq i32 %189, 43, !dbg !15695
  br i1 %cmp287, label %if.then289, label %if.else291, !dbg !15694

if.then289:                                       ; preds = %lor.lhs.false286, %if.then280
  %190 = load i8*, i8** %p, align 8, !dbg !15695
  %191 = load i64, i64* %_delta281, align 8, !dbg !15695
  call void @llvm.memset.p0i8.i64(i8* align 1 %190, i8 48, i64 %191, i1 false), !dbg !15695
  %192 = load i64, i64* %_delta281, align 8, !dbg !15695
  %193 = load i8*, i8** %p, align 8, !dbg !15695
  %add.ptr290 = getelementptr inbounds i8, i8* %193, i64 %192, !dbg !15695, !ctir !144
  store i8* %add.ptr290, i8** %p, align 8, !dbg !15695
  br label %if.end293, !dbg !15695

if.else291:                                       ; preds = %lor.lhs.false286
  %194 = load i8*, i8** %p, align 8, !dbg !15695
  %195 = load i64, i64* %_delta281, align 8, !dbg !15695
  call void @llvm.memset.p0i8.i64(i8* align 1 %194, i8 32, i64 %195, i1 false), !dbg !15695
  %196 = load i64, i64* %_delta281, align 8, !dbg !15695
  %197 = load i8*, i8** %p, align 8, !dbg !15695
  %add.ptr292 = getelementptr inbounds i8, i8* %197, i64 %196, !dbg !15695, !ctir !144
  store i8* %add.ptr292, i8** %p, align 8, !dbg !15695
  br label %if.end293

if.end293:                                        ; preds = %if.else291, %if.then289
  br label %if.end294, !dbg !15694

if.end294:                                        ; preds = %if.end293, %land.lhs.true277, %if.then274
  %198 = load i8, i8* %to_lowcase, align 1, !dbg !15697
  %tobool295 = trunc i8 %198 to i1, !dbg !15697
  br i1 %tobool295, label %if.then296, label %if.else300, !dbg !15691

if.then296:                                       ; preds = %if.end294
  %199 = load i8*, i8** %p, align 8, !dbg !15697
  %arraydecay297 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ubuf, i64 0, i64 0, !dbg !15697, !ctir !1615
  %add.ptr298 = getelementptr inbounds i8, i8* %arraydecay297, i64 1, !dbg !15697, !ctir !144
  %200 = load i64, i64* %_n251, align 8, !dbg !15697
  %call299 = call i8* @memcpy_lowcase(i8* %199, i8* %add.ptr298, i64 %200), !dbg !15697
  br label %if.end310, !dbg !15697

if.else300:                                       ; preds = %if.end294
  %201 = load i8, i8* %to_uppcase, align 1, !dbg !15699
  %tobool301 = trunc i8 %201 to i1, !dbg !15699
  br i1 %tobool301, label %if.then302, label %if.else306, !dbg !15697

if.then302:                                       ; preds = %if.else300
  %202 = load i8*, i8** %p, align 8, !dbg !15699
  %arraydecay303 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ubuf, i64 0, i64 0, !dbg !15699, !ctir !1615
  %add.ptr304 = getelementptr inbounds i8, i8* %arraydecay303, i64 1, !dbg !15699, !ctir !144
  %203 = load i64, i64* %_n251, align 8, !dbg !15699
  %call305 = call i8* @memcpy_uppcase(i8* %202, i8* %add.ptr304, i64 %203), !dbg !15699
  br label %if.end309, !dbg !15699

if.else306:                                       ; preds = %if.else300
  %204 = load i8*, i8** %p, align 8, !dbg !15699
  %arraydecay307 = getelementptr inbounds [1024 x i8], [1024 x i8]* %ubuf, i64 0, i64 0, !dbg !15699, !ctir !1615
  %add.ptr308 = getelementptr inbounds i8, i8* %arraydecay307, i64 1, !dbg !15699, !ctir !144
  %205 = load i64, i64* %_n251, align 8, !dbg !15699
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %add.ptr308, i64 %205, i1 false), !dbg !15699
  br label %if.end309

if.end309:                                        ; preds = %if.else306, %if.then302
  br label %if.end310

if.end310:                                        ; preds = %if.end309, %if.then296
  %206 = load i64, i64* %_n251, align 8, !dbg !15691
  %207 = load i8*, i8** %p, align 8, !dbg !15691
  %add.ptr311 = getelementptr inbounds i8, i8* %207, i64 %206, !dbg !15691, !ctir !144
  store i8* %add.ptr311, i8** %p, align 8, !dbg !15691
  br label %if.end312, !dbg !15691

if.end312:                                        ; preds = %if.end310, %if.end272
  %208 = load i64, i64* %_incr261, align 8, !dbg !15681
  %209 = load i64, i64* %i, align 8, !dbg !15681
  %add313 = add i64 %209, %208, !dbg !15681
  store i64 %add313, i64* %i, align 8, !dbg !15681
  br label %do.end315, !dbg !15681

do.end315:                                        ; preds = %if.end312
  br label %if.end316, !dbg !15681

if.end316:                                        ; preds = %do.end315, %if.end241
  br label %sw.epilog1435, !dbg !15701

sw.bb317:                                         ; preds = %sw.epilog87
  %210 = load i32, i32* %modifier, align 4, !dbg !15702
  %cmp318 = icmp eq i32 %210, 69, !dbg !15704
  br i1 %cmp318, label %if.then320, label %if.end321, !dbg !15705

if.then320:                                       ; preds = %sw.bb317
  br label %underlying_strftime, !dbg !15706

if.end321:                                        ; preds = %sw.bb317
  call void @llvm.dbg.declare(metadata i32* %century, metadata !15708, metadata !DIExpression()), !dbg !15710
  %211 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15711
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %211, i32 0, i32 5, !dbg !15712, !ctir !15283
  %212 = load i32, i32* %tm_year, align 4, !dbg !15712, !ctir !27
  %div = sdiv i32 %212, 100, !dbg !15713
  %add322 = add nsw i32 %div, 19, !dbg !15714
  store i32 %add322, i32* %century, align 4, !dbg !15710
  %213 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15715
  %tm_year323 = getelementptr inbounds %struct.tm, %struct.tm* %213, i32 0, i32 5, !dbg !15716, !ctir !15283
  %214 = load i32, i32* %tm_year323, align 4, !dbg !15716, !ctir !27
  %rem = srem i32 %214, 100, !dbg !15717
  %cmp324 = icmp slt i32 %rem, 0, !dbg !15718
  br i1 %cmp324, label %land.rhs, label %land.end, !dbg !15719

land.rhs:                                         ; preds = %if.end321
  %215 = load i32, i32* %century, align 4, !dbg !15720
  %cmp326 = icmp slt i32 0, %215, !dbg !15721
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end321
  %216 = phi i1 [ false, %if.end321 ], [ %cmp326, %land.rhs ], !dbg !15722
  %land.ext = zext i1 %216 to i32, !dbg !15719
  %217 = load i32, i32* %century, align 4, !dbg !15723
  %sub328 = sub nsw i32 %217, %land.ext, !dbg !15723
  store i32 %sub328, i32* %century, align 4, !dbg !15723
  br label %do.body329, !dbg !15724

do.body329:                                       ; preds = %land.end
  store i32 2, i32* %digits, align 4, !dbg !15725
  %218 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15725
  %tm_year330 = getelementptr inbounds %struct.tm, %struct.tm* %218, i32 0, i32 5, !dbg !15725, !ctir !15283
  %219 = load i32, i32* %tm_year330, align 4, !dbg !15725, !ctir !27
  %cmp331 = icmp slt i32 %219, -1900, !dbg !15725
  %frombool333 = zext i1 %cmp331 to i8, !dbg !15725
  store i8 %frombool333, i8* %negative_number, align 1, !dbg !15725
  %220 = load i32, i32* %century, align 4, !dbg !15725
  store i32 %220, i32* %u_number_value, align 4, !dbg !15725
  br label %do_yearish, !dbg !15725

do.end335:                                        ; No predecessors!
  br label %sw.bb336, !dbg !15727

sw.bb336:                                         ; preds = %sw.epilog87, %do.end335
  %221 = load i32, i32* %modifier, align 4, !dbg !15728
  %cmp337 = icmp eq i32 %221, 79, !dbg !15730
  br i1 %cmp337, label %if.then339, label %if.end340, !dbg !15731

if.then339:                                       ; preds = %sw.bb336
  br label %bad_format, !dbg !15732

if.end340:                                        ; preds = %sw.bb336
  br label %underlying_strftime, !dbg !15733

sw.bb341:                                         ; preds = %sw.epilog87
  %222 = load i32, i32* %modifier, align 4, !dbg !15734
  %cmp342 = icmp ne i32 %222, 0, !dbg !15736
  br i1 %cmp342, label %if.then344, label %if.end345, !dbg !15737

if.then344:                                       ; preds = %sw.bb341
  br label %bad_format, !dbg !15738

if.end345:                                        ; preds = %sw.bb341
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.362, i64 0, i64 0), i8** %subfmt, align 8, !dbg !15739
  br label %subformat, !dbg !15740

sw.bb346:                                         ; preds = %sw.epilog87
  %223 = load i32, i32* %modifier, align 4, !dbg !15741
  %cmp347 = icmp eq i32 %223, 69, !dbg !15743
  br i1 %cmp347, label %if.then349, label %if.end350, !dbg !15744

if.then349:                                       ; preds = %sw.bb346
  br label %bad_format, !dbg !15745

if.end350:                                        ; preds = %sw.bb346
  br label %do.body351, !dbg !15746

do.body351:                                       ; preds = %if.end350
  store i32 2, i32* %digits, align 4, !dbg !15747
  %224 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15747
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %224, i32 0, i32 3, !dbg !15747, !ctir !15283
  %225 = load i32, i32* %tm_mday, align 4, !dbg !15747, !ctir !27
  store i32 %225, i32* %number_value, align 4, !dbg !15747
  br label %do_number, !dbg !15747

do.end353:                                        ; No predecessors!
  br label %sw.bb354, !dbg !15747

sw.bb354:                                         ; preds = %sw.epilog87, %do.end353
  %226 = load i32, i32* %modifier, align 4, !dbg !15749
  %cmp355 = icmp eq i32 %226, 69, !dbg !15751
  br i1 %cmp355, label %if.then357, label %if.end358, !dbg !15752

if.then357:                                       ; preds = %sw.bb354
  br label %bad_format, !dbg !15753

if.end358:                                        ; preds = %sw.bb354
  br label %do.body359, !dbg !15754

do.body359:                                       ; preds = %if.end358
  store i32 2, i32* %digits, align 4, !dbg !15755
  %227 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !15755
  %tm_mday360 = getelementptr inbounds %struct.tm, %struct.tm* %227, i32 0, i32 3, !dbg !15755, !ctir !15283
  %228 = load i32, i32* %tm_mday360, align 4, !dbg !15755, !ctir !27
  store i32 %228, i32* %number_value, align 4, !dbg !15755
  br label %do_number_spacepad, !dbg !15755

do.end362:                                        ; No predecessors!
  br label %do_tz_offset, !dbg !15755

do_tz_offset:                                     ; preds = %do.body1349, %do.body1333, %do.body1327, %do.body1321, %do.end362
  call void @llvm.dbg.label(metadata !15757), !dbg !15758
  store i8 1, i8* %always_output_a_sign, align 1, !dbg !15759
  br label %do_number_body, !dbg !15760

do_yearish:                                       ; preds = %do.body1213, %do.body1183, %do.body1131, %cond.end1126, %do.body329
  call void @llvm.dbg.label(metadata !15761), !dbg !15762
  %229 = load i32, i32* %pad, align 4, !dbg !15763
  %cmp363 = icmp eq i32 %229, 0, !dbg !15765
  br i1 %cmp363, label %if.then365, label %if.end366, !dbg !15766

if.then365:                                       ; preds = %do_yearish
  %230 = load i32, i32* %yr_spec.addr, align 4, !dbg !15767
  store i32 %230, i32* %pad, align 4, !dbg !15768
  br label %if.end366, !dbg !15769

if.end366:                                        ; preds = %if.then365, %do_yearish
  %231 = load i32, i32* %pad, align 4, !dbg !15770
  %cmp367 = icmp eq i32 %231, 43, !dbg !15771
  br i1 %cmp367, label %land.rhs369, label %land.end377, !dbg !15772

land.rhs369:                                      ; preds = %if.end366
  %232 = load i32, i32* %digits, align 4, !dbg !15773
  %cmp370 = icmp eq i32 %232, 2, !dbg !15774
  %233 = zext i1 %cmp370 to i64, !dbg !15773
  %cond372 = select i1 %cmp370, i32 99, i32 9999, !dbg !15773
  %234 = load i32, i32* %u_number_value, align 4, !dbg !15775
  %cmp373 = icmp ult i32 %cond372, %234, !dbg !15776
  br i1 %cmp373, label %lor.end, label %lor.rhs, !dbg !15777

lor.rhs:                                          ; preds = %land.rhs369
  %235 = load i32, i32* %digits, align 4, !dbg !15778
  %236 = load i32, i32* %width.addr, align 4, !dbg !15779
  %cmp375 = icmp slt i32 %235, %236, !dbg !15780
  br label %lor.end, !dbg !15777

lor.end:                                          ; preds = %lor.rhs, %land.rhs369
  %237 = phi i1 [ true, %land.rhs369 ], [ %cmp375, %lor.rhs ]
  br label %land.end377

land.end377:                                      ; preds = %lor.end, %if.end366
  %238 = phi i1 [ false, %if.end366 ], [ %237, %lor.end ], !dbg !15781
  %frombool379 = zext i1 %238 to i8, !dbg !15782
  store i8 %frombool379, i8* %always_output_a_sign, align 1, !dbg !15782
  br label %do_maybe_signed_number, !dbg !15783

do_number_spacepad:                               ; preds = %do.body810, %do.body801, %do.body359
  call void @llvm.dbg.label(metadata !15784), !dbg !15785
  %239 = load i32, i32* %pad, align 4, !dbg !15786
  %cmp380 = icmp eq i32 %239, 0, !dbg !15788
  br i1 %cmp380, label %if.then382, label %if.end383, !dbg !15789

if.then382:                                       ; preds = %do_number_spacepad
  store i32 95, i32* %pad, align 4, !dbg !15790
  br label %if.end383, !dbg !15791

if.end383:                                        ; preds = %if.then382, %do_number_spacepad
  br label %do_number, !dbg !15792

do_number:                                        ; preds = %do.body1170, %do.body1154, %do.body1143, %do.body1032, %do.body1020, %do.body935, %do.body862, %do.body831, %do.body793, %do.body784, %if.end383, %do.body351
  call void @llvm.dbg.label(metadata !15793), !dbg !15794
  %240 = load i32, i32* %number_value, align 4, !dbg !15795
  %cmp384 = icmp slt i32 %240, 0, !dbg !15796
  %frombool386 = zext i1 %cmp384 to i8, !dbg !15797
  store i8 %frombool386, i8* %negative_number, align 1, !dbg !15797
  %241 = load i32, i32* %number_value, align 4, !dbg !15798
  store i32 %241, i32* %u_number_value, align 4, !dbg !15799
  br label %do_signed_number, !dbg !15800

do_signed_number:                                 ; preds = %do.body921, %do.body839, %do.body818, %do_number
  call void @llvm.dbg.label(metadata !15801), !dbg !15802
  store i8 0, i8* %always_output_a_sign, align 1, !dbg !15803
  br label %do_maybe_signed_number, !dbg !15804

do_maybe_signed_number:                           ; preds = %do_signed_number, %land.end377
  call void @llvm.dbg.label(metadata !15805), !dbg !15806
  store i32 0, i32* %tz_colon_mask, align 4, !dbg !15807
  br label %do_number_body, !dbg !15808

do_number_body:                                   ; preds = %do_maybe_signed_number, %do_tz_offset
  call void @llvm.dbg.label(metadata !15809), !dbg !15810
  %242 = load i32, i32* %modifier, align 4, !dbg !15811
  %cmp387 = icmp eq i32 %242, 79, !dbg !15813
  br i1 %cmp387, label %land.lhs.true389, label %if.end392, !dbg !15814

land.lhs.true389:                                 ; preds = %do_number_body
  %243 = load i8, i8* %negative_number, align 1, !dbg !15815
  %tobool390 = trunc i8 %243 to i1, !dbg !15815
  br i1 %tobool390, label %if.end392, label %if.then391, !dbg !15816

if.then391:                                       ; preds = %land.lhs.true389
  br label %underlying_strftime, !dbg !15817

if.end392:                                        ; preds = %land.lhs.true389, %do_number_body
  %arraydecay393 = getelementptr inbounds [23 x i8], [23 x i8]* %buf, i64 0, i64 0, !dbg !15819, !ctir !846
  %add.ptr394 = getelementptr inbounds i8, i8* %arraydecay393, i64 23, !dbg !15820, !ctir !144
  store i8* %add.ptr394, i8** %bufp, align 8, !dbg !15821
  %244 = load i8, i8* %negative_number, align 1, !dbg !15822
  %tobool395 = trunc i8 %244 to i1, !dbg !15822
  br i1 %tobool395, label %if.then396, label %if.end398, !dbg !15824

if.then396:                                       ; preds = %if.end392
  %245 = load i32, i32* %u_number_value, align 4, !dbg !15825
  %sub397 = sub i32 0, %245, !dbg !15826
  store i32 %sub397, i32* %u_number_value, align 4, !dbg !15827
  br label %if.end398, !dbg !15828

if.end398:                                        ; preds = %if.then396, %if.end392
  br label %do.body399, !dbg !15829

do.body399:                                       ; preds = %lor.end415, %if.end398
  %246 = load i32, i32* %tz_colon_mask, align 4, !dbg !15830
  %and = and i32 %246, 1, !dbg !15833
  %tobool400 = icmp ne i32 %and, 0, !dbg !15833
  br i1 %tobool400, label %if.then401, label %if.end403, !dbg !15834

if.then401:                                       ; preds = %do.body399
  %247 = load i8*, i8** %bufp, align 8, !dbg !15835
  %incdec.ptr402 = getelementptr inbounds i8, i8* %247, i32 -1, !dbg !15835, !ctir !144
  store i8* %incdec.ptr402, i8** %bufp, align 8, !dbg !15835
  store i8 58, i8* %incdec.ptr402, align 1, !dbg !15836, !ctir !144
  br label %if.end403, !dbg !15837

if.end403:                                        ; preds = %if.then401, %do.body399
  %248 = load i32, i32* %tz_colon_mask, align 4, !dbg !15838
  %shr = ashr i32 %248, 1, !dbg !15838
  store i32 %shr, i32* %tz_colon_mask, align 4, !dbg !15838
  %249 = load i32, i32* %u_number_value, align 4, !dbg !15839
  %rem404 = urem i32 %249, 10, !dbg !15840
  %add405 = add i32 %rem404, 48, !dbg !15841
  %conv406 = trunc i32 %add405 to i8, !dbg !15839
  %250 = load i8*, i8** %bufp, align 8, !dbg !15842
  %incdec.ptr407 = getelementptr inbounds i8, i8* %250, i32 -1, !dbg !15842, !ctir !144
  store i8* %incdec.ptr407, i8** %bufp, align 8, !dbg !15842
  store i8 %conv406, i8* %incdec.ptr407, align 1, !dbg !15843, !ctir !144
  %251 = load i32, i32* %u_number_value, align 4, !dbg !15844
  %div408 = udiv i32 %251, 10, !dbg !15844
  store i32 %div408, i32* %u_number_value, align 4, !dbg !15844
  br label %do.cond409, !dbg !15845

do.cond409:                                       ; preds = %if.end403
  %252 = load i32, i32* %u_number_value, align 4, !dbg !15846
  %cmp410 = icmp ne i32 %252, 0, !dbg !15847
  br i1 %cmp410, label %lor.end415, label %lor.rhs412, !dbg !15848

lor.rhs412:                                       ; preds = %do.cond409
  %253 = load i32, i32* %tz_colon_mask, align 4, !dbg !15849
  %cmp413 = icmp ne i32 %253, 0, !dbg !15850
  br label %lor.end415, !dbg !15848

lor.end415:                                       ; preds = %lor.rhs412, %do.cond409
  %254 = phi i1 [ true, %do.cond409 ], [ %cmp413, %lor.rhs412 ]
  br i1 %254, label %do.body399, label %do.end416, !dbg !15845, !llvm.loop !15851

do.end416:                                        ; preds = %lor.end415
  br label %do_number_sign_and_padding, !dbg !15845

do_number_sign_and_padding:                       ; preds = %do.end962, %do.end416
  call void @llvm.dbg.label(metadata !15853), !dbg !15854
  %255 = load i32, i32* %digits, align 4, !dbg !15855
  %256 = load i32, i32* %width.addr, align 4, !dbg !15857
  %cmp417 = icmp slt i32 %255, %256, !dbg !15858
  br i1 %cmp417, label %if.then419, label %if.end420, !dbg !15859

if.then419:                                       ; preds = %do_number_sign_and_padding
  %257 = load i32, i32* %width.addr, align 4, !dbg !15860
  store i32 %257, i32* %digits, align 4, !dbg !15861
  br label %if.end420, !dbg !15862

if.end420:                                        ; preds = %if.then419, %do_number_sign_and_padding
  %258 = load i8, i8* %negative_number, align 1, !dbg !15863
  %tobool421 = trunc i8 %258 to i1, !dbg !15863
  br i1 %tobool421, label %cond.true423, label %cond.false424, !dbg !15863

cond.true423:                                     ; preds = %if.end420
  br label %cond.end428, !dbg !15863

cond.false424:                                    ; preds = %if.end420
  %259 = load i8, i8* %always_output_a_sign, align 1, !dbg !15864
  %tobool425 = trunc i8 %259 to i1, !dbg !15864
  %260 = zext i1 %tobool425 to i64, !dbg !15864
  %cond427 = select i1 %tobool425, i32 43, i32 0, !dbg !15864
  br label %cond.end428, !dbg !15863

cond.end428:                                      ; preds = %cond.false424, %cond.true423
  %cond429 = phi i32 [ 45, %cond.true423 ], [ %cond427, %cond.false424 ], !dbg !15863
  %conv430 = trunc i32 %cond429 to i8, !dbg !15865
  store i8 %conv430, i8* %sign_char, align 1, !dbg !15866
  %261 = load i32, i32* %pad, align 4, !dbg !15867
  %cmp431 = icmp eq i32 %261, 45, !dbg !15869
  br i1 %cmp431, label %if.then433, label %if.else486, !dbg !15870

if.then433:                                       ; preds = %cond.end428
  %262 = load i8, i8* %sign_char, align 1, !dbg !15871
  %tobool434 = icmp ne i8 %262, 0, !dbg !15871
  br i1 %tobool434, label %if.then435, label %if.end485, !dbg !15874

if.then435:                                       ; preds = %if.then433
  br label %do.body436, !dbg !15875

do.body436:                                       ; preds = %if.then435
  call void @llvm.dbg.declare(metadata i64* %_n437, metadata !15876, metadata !DIExpression()), !dbg !15878
  store i64 1, i64* %_n437, align 8, !dbg !15878
  call void @llvm.dbg.declare(metadata i64* %_w438, metadata !15879, metadata !DIExpression()), !dbg !15878
  %263 = load i32, i32* %width.addr, align 4, !dbg !15878
  %cmp439 = icmp slt i32 %263, 0, !dbg !15878
  br i1 %cmp439, label %cond.true441, label %cond.false442, !dbg !15878

cond.true441:                                     ; preds = %do.body436
  br label %cond.end443, !dbg !15878

cond.false442:                                    ; preds = %do.body436
  %264 = load i32, i32* %width.addr, align 4, !dbg !15878
  br label %cond.end443, !dbg !15878

cond.end443:                                      ; preds = %cond.false442, %cond.true441
  %cond444 = phi i32 [ 0, %cond.true441 ], [ %264, %cond.false442 ], !dbg !15878
  %conv445 = sext i32 %cond444 to i64, !dbg !15878
  store i64 %conv445, i64* %_w438, align 8, !dbg !15878
  call void @llvm.dbg.declare(metadata i64* %_incr446, metadata !15880, metadata !DIExpression()), !dbg !15878
  %265 = load i64, i64* %_n437, align 8, !dbg !15878
  %266 = load i64, i64* %_w438, align 8, !dbg !15878
  %cmp447 = icmp ult i64 %265, %266, !dbg !15878
  br i1 %cmp447, label %cond.true449, label %cond.false450, !dbg !15878

cond.true449:                                     ; preds = %cond.end443
  %267 = load i64, i64* %_w438, align 8, !dbg !15878
  br label %cond.end451, !dbg !15878

cond.false450:                                    ; preds = %cond.end443
  %268 = load i64, i64* %_n437, align 8, !dbg !15878
  br label %cond.end451, !dbg !15878

cond.end451:                                      ; preds = %cond.false450, %cond.true449
  %cond452 = phi i64 [ %267, %cond.true449 ], [ %268, %cond.false450 ], !dbg !15878
  store i64 %cond452, i64* %_incr446, align 8, !dbg !15878
  %269 = load i64, i64* %_incr446, align 8, !dbg !15881
  %270 = load i64, i64* %maxsize.addr, align 8, !dbg !15881
  %271 = load i64, i64* %i, align 8, !dbg !15881
  %sub453 = sub i64 %270, %271, !dbg !15881
  %cmp454 = icmp uge i64 %269, %sub453, !dbg !15881
  br i1 %cmp454, label %if.then456, label %if.end457, !dbg !15878

if.then456:                                       ; preds = %cond.end451
  store i64 0, i64* %retval, align 8, !dbg !15881
  br label %return, !dbg !15881

if.end457:                                        ; preds = %cond.end451
  %272 = load i8*, i8** %p, align 8, !dbg !15883
  %tobool458 = icmp ne i8* %272, null, !dbg !15883
  br i1 %tobool458, label %if.then459, label %if.end481, !dbg !15878

if.then459:                                       ; preds = %if.end457
  %273 = load i32, i32* %digits, align 4, !dbg !15885
  %cmp460 = icmp eq i32 %273, 0, !dbg !15885
  br i1 %cmp460, label %land.lhs.true462, label %if.end479, !dbg !15885

land.lhs.true462:                                 ; preds = %if.then459
  %274 = load i64, i64* %_n437, align 8, !dbg !15885
  %275 = load i64, i64* %_w438, align 8, !dbg !15885
  %cmp463 = icmp ult i64 %274, %275, !dbg !15885
  br i1 %cmp463, label %if.then465, label %if.end479, !dbg !15888

if.then465:                                       ; preds = %land.lhs.true462
  call void @llvm.dbg.declare(metadata i64* %_delta466, metadata !15889, metadata !DIExpression()), !dbg !15891
  %276 = load i32, i32* %width.addr, align 4, !dbg !15891
  %conv467 = sext i32 %276 to i64, !dbg !15891
  %277 = load i64, i64* %_n437, align 8, !dbg !15891
  %sub468 = sub i64 %conv467, %277, !dbg !15891
  store i64 %sub468, i64* %_delta466, align 8, !dbg !15891
  %278 = load i32, i32* %pad, align 4, !dbg !15892
  %cmp469 = icmp eq i32 %278, 48, !dbg !15892
  br i1 %cmp469, label %if.then474, label %lor.lhs.false471, !dbg !15892

lor.lhs.false471:                                 ; preds = %if.then465
  %279 = load i32, i32* %pad, align 4, !dbg !15892
  %cmp472 = icmp eq i32 %279, 43, !dbg !15892
  br i1 %cmp472, label %if.then474, label %if.else476, !dbg !15891

if.then474:                                       ; preds = %lor.lhs.false471, %if.then465
  %280 = load i8*, i8** %p, align 8, !dbg !15892
  %281 = load i64, i64* %_delta466, align 8, !dbg !15892
  call void @llvm.memset.p0i8.i64(i8* align 1 %280, i8 48, i64 %281, i1 false), !dbg !15892
  %282 = load i64, i64* %_delta466, align 8, !dbg !15892
  %283 = load i8*, i8** %p, align 8, !dbg !15892
  %add.ptr475 = getelementptr inbounds i8, i8* %283, i64 %282, !dbg !15892, !ctir !144
  store i8* %add.ptr475, i8** %p, align 8, !dbg !15892
  br label %if.end478, !dbg !15892

if.else476:                                       ; preds = %lor.lhs.false471
  %284 = load i8*, i8** %p, align 8, !dbg !15892
  %285 = load i64, i64* %_delta466, align 8, !dbg !15892
  call void @llvm.memset.p0i8.i64(i8* align 1 %284, i8 32, i64 %285, i1 false), !dbg !15892
  %286 = load i64, i64* %_delta466, align 8, !dbg !15892
  %287 = load i8*, i8** %p, align 8, !dbg !15892
  %add.ptr477 = getelementptr inbounds i8, i8* %287, i64 %286, !dbg !15892, !ctir !144
  store i8* %add.ptr477, i8** %p, align 8, !dbg !15892
  br label %if.end478

if.end478:                                        ; preds = %if.else476, %if.then474
  br label %if.end479, !dbg !15891

if.end479:                                        ; preds = %if.end478, %land.lhs.true462, %if.then459
  %288 = load i8, i8* %sign_char, align 1, !dbg !15888
  %289 = load i8*, i8** %p, align 8, !dbg !15888
  store i8 %288, i8* %289, align 1, !dbg !15888, !ctir !144
  %290 = load i64, i64* %_n437, align 8, !dbg !15888
  %291 = load i8*, i8** %p, align 8, !dbg !15888
  %add.ptr480 = getelementptr inbounds i8, i8* %291, i64 %290, !dbg !15888, !ctir !144
  store i8* %add.ptr480, i8** %p, align 8, !dbg !15888
  br label %if.end481, !dbg !15888

if.end481:                                        ; preds = %if.end479, %if.end457
  %292 = load i64, i64* %_incr446, align 8, !dbg !15878
  %293 = load i64, i64* %i, align 8, !dbg !15878
  %add482 = add i64 %293, %292, !dbg !15878
  store i64 %add482, i64* %i, align 8, !dbg !15878
  br label %do.end484, !dbg !15878

do.end484:                                        ; preds = %if.end481
  br label %if.end485, !dbg !15878

if.end485:                                        ; preds = %do.end484, %if.then433
  br label %if.end696, !dbg !15894

if.else486:                                       ; preds = %cond.end428
  call void @llvm.dbg.declare(metadata i32* %padding, metadata !15895, metadata !DIExpression()), !dbg !15897
  %294 = load i32, i32* %digits, align 4, !dbg !15898
  %conv487 = sext i32 %294 to i64, !dbg !15898
  %arraydecay488 = getelementptr inbounds [23 x i8], [23 x i8]* %buf, i64 0, i64 0, !dbg !15899, !ctir !846
  %add.ptr489 = getelementptr inbounds i8, i8* %arraydecay488, i64 23, !dbg !15900, !ctir !144
  %295 = load i8*, i8** %bufp, align 8, !dbg !15901
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr489 to i64, !dbg !15902
  %sub.ptr.rhs.cast = ptrtoint i8* %295 to i64, !dbg !15902
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !15902
  %sub490 = sub nsw i64 %conv487, %sub.ptr.sub, !dbg !15903
  %296 = load i8, i8* %sign_char, align 1, !dbg !15904
  %tobool491 = icmp ne i8 %296, 0, !dbg !15905
  %lnot = xor i1 %tobool491, true, !dbg !15905
  %lnot492 = xor i1 %lnot, true, !dbg !15906
  %lnot.ext = zext i1 %lnot492 to i32, !dbg !15906
  %conv493 = sext i32 %lnot.ext to i64, !dbg !15906
  %sub494 = sub nsw i64 %sub490, %conv493, !dbg !15907
  %conv495 = trunc i64 %sub494 to i32, !dbg !15898
  store i32 %conv495, i32* %padding, align 4, !dbg !15897
  %297 = load i32, i32* %padding, align 4, !dbg !15908
  %cmp496 = icmp sgt i32 %297, 0, !dbg !15910
  br i1 %cmp496, label %if.then498, label %if.else642, !dbg !15911

if.then498:                                       ; preds = %if.else486
  %298 = load i32, i32* %pad, align 4, !dbg !15912
  %cmp499 = icmp eq i32 %298, 95, !dbg !15915
  br i1 %cmp499, label %if.then501, label %if.else574, !dbg !15916

if.then501:                                       ; preds = %if.then498
  %299 = load i32, i32* %padding, align 4, !dbg !15917
  %conv502 = sext i32 %299 to i64, !dbg !15920
  %300 = load i64, i64* %maxsize.addr, align 8, !dbg !15921
  %301 = load i64, i64* %i, align 8, !dbg !15922
  %sub503 = sub i64 %300, %301, !dbg !15923
  %cmp504 = icmp uge i64 %conv502, %sub503, !dbg !15924
  br i1 %cmp504, label %if.then506, label %if.end507, !dbg !15925

if.then506:                                       ; preds = %if.then501
  store i64 0, i64* %retval, align 8, !dbg !15926
  br label %return, !dbg !15926

if.end507:                                        ; preds = %if.then501
  %302 = load i8*, i8** %p, align 8, !dbg !15927
  %tobool508 = icmp ne i8* %302, null, !dbg !15927
  br i1 %tobool508, label %if.then509, label %if.end512, !dbg !15929

if.then509:                                       ; preds = %if.end507
  %303 = load i8*, i8** %p, align 8, !dbg !15930
  %304 = load i32, i32* %padding, align 4, !dbg !15930
  %conv510 = sext i32 %304 to i64, !dbg !15930
  call void @llvm.memset.p0i8.i64(i8* align 1 %303, i8 32, i64 %conv510, i1 false), !dbg !15930
  %305 = load i32, i32* %padding, align 4, !dbg !15930
  %306 = load i8*, i8** %p, align 8, !dbg !15930
  %idx.ext = sext i32 %305 to i64, !dbg !15930
  %add.ptr511 = getelementptr inbounds i8, i8* %306, i64 %idx.ext, !dbg !15930, !ctir !144
  store i8* %add.ptr511, i8** %p, align 8, !dbg !15930
  br label %if.end512, !dbg !15930

if.end512:                                        ; preds = %if.then509, %if.end507
  %307 = load i32, i32* %padding, align 4, !dbg !15931
  %conv513 = sext i32 %307 to i64, !dbg !15931
  %308 = load i64, i64* %i, align 8, !dbg !15932
  %add514 = add i64 %308, %conv513, !dbg !15932
  store i64 %add514, i64* %i, align 8, !dbg !15932
  %309 = load i32, i32* %width.addr, align 4, !dbg !15933
  %310 = load i32, i32* %padding, align 4, !dbg !15934
  %cmp515 = icmp sgt i32 %309, %310, !dbg !15935
  br i1 %cmp515, label %cond.true517, label %cond.false519, !dbg !15933

cond.true517:                                     ; preds = %if.end512
  %311 = load i32, i32* %width.addr, align 4, !dbg !15936
  %312 = load i32, i32* %padding, align 4, !dbg !15937
  %sub518 = sub nsw i32 %311, %312, !dbg !15938
  br label %cond.end520, !dbg !15933

cond.false519:                                    ; preds = %if.end512
  br label %cond.end520, !dbg !15933

cond.end520:                                      ; preds = %cond.false519, %cond.true517
  %cond521 = phi i32 [ %sub518, %cond.true517 ], [ 0, %cond.false519 ], !dbg !15933
  store i32 %cond521, i32* %width.addr, align 4, !dbg !15939
  %313 = load i8, i8* %sign_char, align 1, !dbg !15940
  %tobool522 = icmp ne i8 %313, 0, !dbg !15940
  br i1 %tobool522, label %if.then523, label %if.end573, !dbg !15942

if.then523:                                       ; preds = %cond.end520
  br label %do.body524, !dbg !15943

do.body524:                                       ; preds = %if.then523
  call void @llvm.dbg.declare(metadata i64* %_n525, metadata !15944, metadata !DIExpression()), !dbg !15946
  store i64 1, i64* %_n525, align 8, !dbg !15946
  call void @llvm.dbg.declare(metadata i64* %_w526, metadata !15947, metadata !DIExpression()), !dbg !15946
  %314 = load i32, i32* %width.addr, align 4, !dbg !15946
  %cmp527 = icmp slt i32 %314, 0, !dbg !15946
  br i1 %cmp527, label %cond.true529, label %cond.false530, !dbg !15946

cond.true529:                                     ; preds = %do.body524
  br label %cond.end531, !dbg !15946

cond.false530:                                    ; preds = %do.body524
  %315 = load i32, i32* %width.addr, align 4, !dbg !15946
  br label %cond.end531, !dbg !15946

cond.end531:                                      ; preds = %cond.false530, %cond.true529
  %cond532 = phi i32 [ 0, %cond.true529 ], [ %315, %cond.false530 ], !dbg !15946
  %conv533 = sext i32 %cond532 to i64, !dbg !15946
  store i64 %conv533, i64* %_w526, align 8, !dbg !15946
  call void @llvm.dbg.declare(metadata i64* %_incr534, metadata !15948, metadata !DIExpression()), !dbg !15946
  %316 = load i64, i64* %_n525, align 8, !dbg !15946
  %317 = load i64, i64* %_w526, align 8, !dbg !15946
  %cmp535 = icmp ult i64 %316, %317, !dbg !15946
  br i1 %cmp535, label %cond.true537, label %cond.false538, !dbg !15946

cond.true537:                                     ; preds = %cond.end531
  %318 = load i64, i64* %_w526, align 8, !dbg !15946
  br label %cond.end539, !dbg !15946

cond.false538:                                    ; preds = %cond.end531
  %319 = load i64, i64* %_n525, align 8, !dbg !15946
  br label %cond.end539, !dbg !15946

cond.end539:                                      ; preds = %cond.false538, %cond.true537
  %cond540 = phi i64 [ %318, %cond.true537 ], [ %319, %cond.false538 ], !dbg !15946
  store i64 %cond540, i64* %_incr534, align 8, !dbg !15946
  %320 = load i64, i64* %_incr534, align 8, !dbg !15949
  %321 = load i64, i64* %maxsize.addr, align 8, !dbg !15949
  %322 = load i64, i64* %i, align 8, !dbg !15949
  %sub541 = sub i64 %321, %322, !dbg !15949
  %cmp542 = icmp uge i64 %320, %sub541, !dbg !15949
  br i1 %cmp542, label %if.then544, label %if.end545, !dbg !15946

if.then544:                                       ; preds = %cond.end539
  store i64 0, i64* %retval, align 8, !dbg !15949
  br label %return, !dbg !15949

if.end545:                                        ; preds = %cond.end539
  %323 = load i8*, i8** %p, align 8, !dbg !15951
  %tobool546 = icmp ne i8* %323, null, !dbg !15951
  br i1 %tobool546, label %if.then547, label %if.end569, !dbg !15946

if.then547:                                       ; preds = %if.end545
  %324 = load i32, i32* %digits, align 4, !dbg !15953
  %cmp548 = icmp eq i32 %324, 0, !dbg !15953
  br i1 %cmp548, label %land.lhs.true550, label %if.end567, !dbg !15953

land.lhs.true550:                                 ; preds = %if.then547
  %325 = load i64, i64* %_n525, align 8, !dbg !15953
  %326 = load i64, i64* %_w526, align 8, !dbg !15953
  %cmp551 = icmp ult i64 %325, %326, !dbg !15953
  br i1 %cmp551, label %if.then553, label %if.end567, !dbg !15956

if.then553:                                       ; preds = %land.lhs.true550
  call void @llvm.dbg.declare(metadata i64* %_delta554, metadata !15957, metadata !DIExpression()), !dbg !15959
  %327 = load i32, i32* %width.addr, align 4, !dbg !15959
  %conv555 = sext i32 %327 to i64, !dbg !15959
  %328 = load i64, i64* %_n525, align 8, !dbg !15959
  %sub556 = sub i64 %conv555, %328, !dbg !15959
  store i64 %sub556, i64* %_delta554, align 8, !dbg !15959
  %329 = load i32, i32* %pad, align 4, !dbg !15960
  %cmp557 = icmp eq i32 %329, 48, !dbg !15960
  br i1 %cmp557, label %if.then562, label %lor.lhs.false559, !dbg !15960

lor.lhs.false559:                                 ; preds = %if.then553
  %330 = load i32, i32* %pad, align 4, !dbg !15960
  %cmp560 = icmp eq i32 %330, 43, !dbg !15960
  br i1 %cmp560, label %if.then562, label %if.else564, !dbg !15959

if.then562:                                       ; preds = %lor.lhs.false559, %if.then553
  %331 = load i8*, i8** %p, align 8, !dbg !15960
  %332 = load i64, i64* %_delta554, align 8, !dbg !15960
  call void @llvm.memset.p0i8.i64(i8* align 1 %331, i8 48, i64 %332, i1 false), !dbg !15960
  %333 = load i64, i64* %_delta554, align 8, !dbg !15960
  %334 = load i8*, i8** %p, align 8, !dbg !15960
  %add.ptr563 = getelementptr inbounds i8, i8* %334, i64 %333, !dbg !15960, !ctir !144
  store i8* %add.ptr563, i8** %p, align 8, !dbg !15960
  br label %if.end566, !dbg !15960

if.else564:                                       ; preds = %lor.lhs.false559
  %335 = load i8*, i8** %p, align 8, !dbg !15960
  %336 = load i64, i64* %_delta554, align 8, !dbg !15960
  call void @llvm.memset.p0i8.i64(i8* align 1 %335, i8 32, i64 %336, i1 false), !dbg !15960
  %337 = load i64, i64* %_delta554, align 8, !dbg !15960
  %338 = load i8*, i8** %p, align 8, !dbg !15960
  %add.ptr565 = getelementptr inbounds i8, i8* %338, i64 %337, !dbg !15960, !ctir !144
  store i8* %add.ptr565, i8** %p, align 8, !dbg !15960
  br label %if.end566

if.end566:                                        ; preds = %if.else564, %if.then562
  br label %if.end567, !dbg !15959

if.end567:                                        ; preds = %if.end566, %land.lhs.true550, %if.then547
  %339 = load i8, i8* %sign_char, align 1, !dbg !15956
  %340 = load i8*, i8** %p, align 8, !dbg !15956
  store i8 %339, i8* %340, align 1, !dbg !15956, !ctir !144
  %341 = load i64, i64* %_n525, align 8, !dbg !15956
  %342 = load i8*, i8** %p, align 8, !dbg !15956
  %add.ptr568 = getelementptr inbounds i8, i8* %342, i64 %341, !dbg !15956, !ctir !144
  store i8* %add.ptr568, i8** %p, align 8, !dbg !15956
  br label %if.end569, !dbg !15956

if.end569:                                        ; preds = %if.end567, %if.end545
  %343 = load i64, i64* %_incr534, align 8, !dbg !15946
  %344 = load i64, i64* %i, align 8, !dbg !15946
  %add570 = add i64 %344, %343, !dbg !15946
  store i64 %add570, i64* %i, align 8, !dbg !15946
  br label %do.end572, !dbg !15946

do.end572:                                        ; preds = %if.end569
  br label %if.end573, !dbg !15946

if.end573:                                        ; preds = %do.end572, %cond.end520
  br label %if.end641, !dbg !15962

if.else574:                                       ; preds = %if.then498
  %345 = load i32, i32* %digits, align 4, !dbg !15963
  %conv575 = sext i32 %345 to i64, !dbg !15966
  %346 = load i64, i64* %maxsize.addr, align 8, !dbg !15967
  %347 = load i64, i64* %i, align 8, !dbg !15968
  %sub576 = sub i64 %346, %347, !dbg !15969
  %cmp577 = icmp uge i64 %conv575, %sub576, !dbg !15970
  br i1 %cmp577, label %if.then579, label %if.end580, !dbg !15971

if.then579:                                       ; preds = %if.else574
  store i64 0, i64* %retval, align 8, !dbg !15972
  br label %return, !dbg !15972

if.end580:                                        ; preds = %if.else574
  %348 = load i8, i8* %sign_char, align 1, !dbg !15973
  %tobool581 = icmp ne i8 %348, 0, !dbg !15973
  br i1 %tobool581, label %if.then582, label %if.end632, !dbg !15975

if.then582:                                       ; preds = %if.end580
  br label %do.body583, !dbg !15976

do.body583:                                       ; preds = %if.then582
  call void @llvm.dbg.declare(metadata i64* %_n584, metadata !15977, metadata !DIExpression()), !dbg !15979
  store i64 1, i64* %_n584, align 8, !dbg !15979
  call void @llvm.dbg.declare(metadata i64* %_w585, metadata !15980, metadata !DIExpression()), !dbg !15979
  %349 = load i32, i32* %width.addr, align 4, !dbg !15979
  %cmp586 = icmp slt i32 %349, 0, !dbg !15979
  br i1 %cmp586, label %cond.true588, label %cond.false589, !dbg !15979

cond.true588:                                     ; preds = %do.body583
  br label %cond.end590, !dbg !15979

cond.false589:                                    ; preds = %do.body583
  %350 = load i32, i32* %width.addr, align 4, !dbg !15979
  br label %cond.end590, !dbg !15979

cond.end590:                                      ; preds = %cond.false589, %cond.true588
  %cond591 = phi i32 [ 0, %cond.true588 ], [ %350, %cond.false589 ], !dbg !15979
  %conv592 = sext i32 %cond591 to i64, !dbg !15979
  store i64 %conv592, i64* %_w585, align 8, !dbg !15979
  call void @llvm.dbg.declare(metadata i64* %_incr593, metadata !15981, metadata !DIExpression()), !dbg !15979
  %351 = load i64, i64* %_n584, align 8, !dbg !15979
  %352 = load i64, i64* %_w585, align 8, !dbg !15979
  %cmp594 = icmp ult i64 %351, %352, !dbg !15979
  br i1 %cmp594, label %cond.true596, label %cond.false597, !dbg !15979

cond.true596:                                     ; preds = %cond.end590
  %353 = load i64, i64* %_w585, align 8, !dbg !15979
  br label %cond.end598, !dbg !15979

cond.false597:                                    ; preds = %cond.end590
  %354 = load i64, i64* %_n584, align 8, !dbg !15979
  br label %cond.end598, !dbg !15979

cond.end598:                                      ; preds = %cond.false597, %cond.true596
  %cond599 = phi i64 [ %353, %cond.true596 ], [ %354, %cond.false597 ], !dbg !15979
  store i64 %cond599, i64* %_incr593, align 8, !dbg !15979
  %355 = load i64, i64* %_incr593, align 8, !dbg !15982
  %356 = load i64, i64* %maxsize.addr, align 8, !dbg !15982
  %357 = load i64, i64* %i, align 8, !dbg !15982
  %sub600 = sub i64 %356, %357, !dbg !15982
  %cmp601 = icmp uge i64 %355, %sub600, !dbg !15982
  br i1 %cmp601, label %if.then603, label %if.end604, !dbg !15979

if.then603:                                       ; preds = %cond.end598
  store i64 0, i64* %retval, align 8, !dbg !15982
  br label %return, !dbg !15982

if.end604:                                        ; preds = %cond.end598
  %358 = load i8*, i8** %p, align 8, !dbg !15984
  %tobool605 = icmp ne i8* %358, null, !dbg !15984
  br i1 %tobool605, label %if.then606, label %if.end628, !dbg !15979

if.then606:                                       ; preds = %if.end604
  %359 = load i32, i32* %digits, align 4, !dbg !15986
  %cmp607 = icmp eq i32 %359, 0, !dbg !15986
  br i1 %cmp607, label %land.lhs.true609, label %if.end626, !dbg !15986

land.lhs.true609:                                 ; preds = %if.then606
  %360 = load i64, i64* %_n584, align 8, !dbg !15986
  %361 = load i64, i64* %_w585, align 8, !dbg !15986
  %cmp610 = icmp ult i64 %360, %361, !dbg !15986
  br i1 %cmp610, label %if.then612, label %if.end626, !dbg !15989

if.then612:                                       ; preds = %land.lhs.true609
  call void @llvm.dbg.declare(metadata i64* %_delta613, metadata !15990, metadata !DIExpression()), !dbg !15992
  %362 = load i32, i32* %width.addr, align 4, !dbg !15992
  %conv614 = sext i32 %362 to i64, !dbg !15992
  %363 = load i64, i64* %_n584, align 8, !dbg !15992
  %sub615 = sub i64 %conv614, %363, !dbg !15992
  store i64 %sub615, i64* %_delta613, align 8, !dbg !15992
  %364 = load i32, i32* %pad, align 4, !dbg !15993
  %cmp616 = icmp eq i32 %364, 48, !dbg !15993
  br i1 %cmp616, label %if.then621, label %lor.lhs.false618, !dbg !15993

lor.lhs.false618:                                 ; preds = %if.then612
  %365 = load i32, i32* %pad, align 4, !dbg !15993
  %cmp619 = icmp eq i32 %365, 43, !dbg !15993
  br i1 %cmp619, label %if.then621, label %if.else623, !dbg !15992

if.then621:                                       ; preds = %lor.lhs.false618, %if.then612
  %366 = load i8*, i8** %p, align 8, !dbg !15993
  %367 = load i64, i64* %_delta613, align 8, !dbg !15993
  call void @llvm.memset.p0i8.i64(i8* align 1 %366, i8 48, i64 %367, i1 false), !dbg !15993
  %368 = load i64, i64* %_delta613, align 8, !dbg !15993
  %369 = load i8*, i8** %p, align 8, !dbg !15993
  %add.ptr622 = getelementptr inbounds i8, i8* %369, i64 %368, !dbg !15993, !ctir !144
  store i8* %add.ptr622, i8** %p, align 8, !dbg !15993
  br label %if.end625, !dbg !15993

if.else623:                                       ; preds = %lor.lhs.false618
  %370 = load i8*, i8** %p, align 8, !dbg !15993
  %371 = load i64, i64* %_delta613, align 8, !dbg !15993
  call void @llvm.memset.p0i8.i64(i8* align 1 %370, i8 32, i64 %371, i1 false), !dbg !15993
  %372 = load i64, i64* %_delta613, align 8, !dbg !15993
  %373 = load i8*, i8** %p, align 8, !dbg !15993
  %add.ptr624 = getelementptr inbounds i8, i8* %373, i64 %372, !dbg !15993, !ctir !144
  store i8* %add.ptr624, i8** %p, align 8, !dbg !15993
  br label %if.end625

if.end625:                                        ; preds = %if.else623, %if.then621
  br label %if.end626, !dbg !15992

if.end626:                                        ; preds = %if.end625, %land.lhs.true609, %if.then606
  %374 = load i8, i8* %sign_char, align 1, !dbg !15989
  %375 = load i8*, i8** %p, align 8, !dbg !15989
  store i8 %374, i8* %375, align 1, !dbg !15989, !ctir !144
  %376 = load i64, i64* %_n584, align 8, !dbg !15989
  %377 = load i8*, i8** %p, align 8, !dbg !15989
  %add.ptr627 = getelementptr inbounds i8, i8* %377, i64 %376, !dbg !15989, !ctir !144
  store i8* %add.ptr627, i8** %p, align 8, !dbg !15989
  br label %if.end628, !dbg !15989

if.end628:                                        ; preds = %if.end626, %if.end604
  %378 = load i64, i64* %_incr593, align 8, !dbg !15979
  %379 = load i64, i64* %i, align 8, !dbg !15979
  %add629 = add i64 %379, %378, !dbg !15979
  store i64 %add629, i64* %i, align 8, !dbg !15979
  br label %do.end631, !dbg !15979

do.end631:                                        ; preds = %if.end628
  br label %if.end632, !dbg !15979

if.end632:                                        ; preds = %do.end631, %if.end580
  %380 = load i8*, i8** %p, align 8, !dbg !15995
  %tobool633 = icmp ne i8* %380, null, !dbg !15995
  br i1 %tobool633, label %if.then634, label %if.end638, !dbg !15997

if.then634:                                       ; preds = %if.end632
  %381 = load i8*, i8** %p, align 8, !dbg !15998
  %382 = load i32, i32* %padding, align 4, !dbg !15998
  %conv635 = sext i32 %382 to i64, !dbg !15998
  call void @llvm.memset.p0i8.i64(i8* align 1 %381, i8 48, i64 %conv635, i1 false), !dbg !15998
  %383 = load i32, i32* %padding, align 4, !dbg !15998
  %384 = load i8*, i8** %p, align 8, !dbg !15998
  %idx.ext636 = sext i32 %383 to i64, !dbg !15998
  %add.ptr637 = getelementptr inbounds i8, i8* %384, i64 %idx.ext636, !dbg !15998, !ctir !144
  store i8* %add.ptr637, i8** %p, align 8, !dbg !15998
  br label %if.end638, !dbg !15998

if.end638:                                        ; preds = %if.then634, %if.end632
  %385 = load i32, i32* %padding, align 4, !dbg !15999
  %conv639 = sext i32 %385 to i64, !dbg !15999
  %386 = load i64, i64* %i, align 8, !dbg !16000
  %add640 = add i64 %386, %conv639, !dbg !16000
  store i64 %add640, i64* %i, align 8, !dbg !16000
  store i32 0, i32* %width.addr, align 4, !dbg !16001
  br label %if.end641

if.end641:                                        ; preds = %if.end638, %if.end573
  br label %if.end695, !dbg !16002

if.else642:                                       ; preds = %if.else486
  %387 = load i8, i8* %sign_char, align 1, !dbg !16003
  %tobool643 = icmp ne i8 %387, 0, !dbg !16003
  br i1 %tobool643, label %if.then644, label %if.end694, !dbg !16006

if.then644:                                       ; preds = %if.else642
  br label %do.body645, !dbg !16007

do.body645:                                       ; preds = %if.then644
  call void @llvm.dbg.declare(metadata i64* %_n646, metadata !16008, metadata !DIExpression()), !dbg !16010
  store i64 1, i64* %_n646, align 8, !dbg !16010
  call void @llvm.dbg.declare(metadata i64* %_w647, metadata !16011, metadata !DIExpression()), !dbg !16010
  %388 = load i32, i32* %width.addr, align 4, !dbg !16010
  %cmp648 = icmp slt i32 %388, 0, !dbg !16010
  br i1 %cmp648, label %cond.true650, label %cond.false651, !dbg !16010

cond.true650:                                     ; preds = %do.body645
  br label %cond.end652, !dbg !16010

cond.false651:                                    ; preds = %do.body645
  %389 = load i32, i32* %width.addr, align 4, !dbg !16010
  br label %cond.end652, !dbg !16010

cond.end652:                                      ; preds = %cond.false651, %cond.true650
  %cond653 = phi i32 [ 0, %cond.true650 ], [ %389, %cond.false651 ], !dbg !16010
  %conv654 = sext i32 %cond653 to i64, !dbg !16010
  store i64 %conv654, i64* %_w647, align 8, !dbg !16010
  call void @llvm.dbg.declare(metadata i64* %_incr655, metadata !16012, metadata !DIExpression()), !dbg !16010
  %390 = load i64, i64* %_n646, align 8, !dbg !16010
  %391 = load i64, i64* %_w647, align 8, !dbg !16010
  %cmp656 = icmp ult i64 %390, %391, !dbg !16010
  br i1 %cmp656, label %cond.true658, label %cond.false659, !dbg !16010

cond.true658:                                     ; preds = %cond.end652
  %392 = load i64, i64* %_w647, align 8, !dbg !16010
  br label %cond.end660, !dbg !16010

cond.false659:                                    ; preds = %cond.end652
  %393 = load i64, i64* %_n646, align 8, !dbg !16010
  br label %cond.end660, !dbg !16010

cond.end660:                                      ; preds = %cond.false659, %cond.true658
  %cond661 = phi i64 [ %392, %cond.true658 ], [ %393, %cond.false659 ], !dbg !16010
  store i64 %cond661, i64* %_incr655, align 8, !dbg !16010
  %394 = load i64, i64* %_incr655, align 8, !dbg !16013
  %395 = load i64, i64* %maxsize.addr, align 8, !dbg !16013
  %396 = load i64, i64* %i, align 8, !dbg !16013
  %sub662 = sub i64 %395, %396, !dbg !16013
  %cmp663 = icmp uge i64 %394, %sub662, !dbg !16013
  br i1 %cmp663, label %if.then665, label %if.end666, !dbg !16010

if.then665:                                       ; preds = %cond.end660
  store i64 0, i64* %retval, align 8, !dbg !16013
  br label %return, !dbg !16013

if.end666:                                        ; preds = %cond.end660
  %397 = load i8*, i8** %p, align 8, !dbg !16015
  %tobool667 = icmp ne i8* %397, null, !dbg !16015
  br i1 %tobool667, label %if.then668, label %if.end690, !dbg !16010

if.then668:                                       ; preds = %if.end666
  %398 = load i32, i32* %digits, align 4, !dbg !16017
  %cmp669 = icmp eq i32 %398, 0, !dbg !16017
  br i1 %cmp669, label %land.lhs.true671, label %if.end688, !dbg !16017

land.lhs.true671:                                 ; preds = %if.then668
  %399 = load i64, i64* %_n646, align 8, !dbg !16017
  %400 = load i64, i64* %_w647, align 8, !dbg !16017
  %cmp672 = icmp ult i64 %399, %400, !dbg !16017
  br i1 %cmp672, label %if.then674, label %if.end688, !dbg !16020

if.then674:                                       ; preds = %land.lhs.true671
  call void @llvm.dbg.declare(metadata i64* %_delta675, metadata !16021, metadata !DIExpression()), !dbg !16023
  %401 = load i32, i32* %width.addr, align 4, !dbg !16023
  %conv676 = sext i32 %401 to i64, !dbg !16023
  %402 = load i64, i64* %_n646, align 8, !dbg !16023
  %sub677 = sub i64 %conv676, %402, !dbg !16023
  store i64 %sub677, i64* %_delta675, align 8, !dbg !16023
  %403 = load i32, i32* %pad, align 4, !dbg !16024
  %cmp678 = icmp eq i32 %403, 48, !dbg !16024
  br i1 %cmp678, label %if.then683, label %lor.lhs.false680, !dbg !16024

lor.lhs.false680:                                 ; preds = %if.then674
  %404 = load i32, i32* %pad, align 4, !dbg !16024
  %cmp681 = icmp eq i32 %404, 43, !dbg !16024
  br i1 %cmp681, label %if.then683, label %if.else685, !dbg !16023

if.then683:                                       ; preds = %lor.lhs.false680, %if.then674
  %405 = load i8*, i8** %p, align 8, !dbg !16024
  %406 = load i64, i64* %_delta675, align 8, !dbg !16024
  call void @llvm.memset.p0i8.i64(i8* align 1 %405, i8 48, i64 %406, i1 false), !dbg !16024
  %407 = load i64, i64* %_delta675, align 8, !dbg !16024
  %408 = load i8*, i8** %p, align 8, !dbg !16024
  %add.ptr684 = getelementptr inbounds i8, i8* %408, i64 %407, !dbg !16024, !ctir !144
  store i8* %add.ptr684, i8** %p, align 8, !dbg !16024
  br label %if.end687, !dbg !16024

if.else685:                                       ; preds = %lor.lhs.false680
  %409 = load i8*, i8** %p, align 8, !dbg !16024
  %410 = load i64, i64* %_delta675, align 8, !dbg !16024
  call void @llvm.memset.p0i8.i64(i8* align 1 %409, i8 32, i64 %410, i1 false), !dbg !16024
  %411 = load i64, i64* %_delta675, align 8, !dbg !16024
  %412 = load i8*, i8** %p, align 8, !dbg !16024
  %add.ptr686 = getelementptr inbounds i8, i8* %412, i64 %411, !dbg !16024, !ctir !144
  store i8* %add.ptr686, i8** %p, align 8, !dbg !16024
  br label %if.end687

if.end687:                                        ; preds = %if.else685, %if.then683
  br label %if.end688, !dbg !16023

if.end688:                                        ; preds = %if.end687, %land.lhs.true671, %if.then668
  %413 = load i8, i8* %sign_char, align 1, !dbg !16020
  %414 = load i8*, i8** %p, align 8, !dbg !16020
  store i8 %413, i8* %414, align 1, !dbg !16020, !ctir !144
  %415 = load i64, i64* %_n646, align 8, !dbg !16020
  %416 = load i8*, i8** %p, align 8, !dbg !16020
  %add.ptr689 = getelementptr inbounds i8, i8* %416, i64 %415, !dbg !16020, !ctir !144
  store i8* %add.ptr689, i8** %p, align 8, !dbg !16020
  br label %if.end690, !dbg !16020

if.end690:                                        ; preds = %if.end688, %if.end666
  %417 = load i64, i64* %_incr655, align 8, !dbg !16010
  %418 = load i64, i64* %i, align 8, !dbg !16010
  %add691 = add i64 %418, %417, !dbg !16010
  store i64 %add691, i64* %i, align 8, !dbg !16010
  br label %do.end693, !dbg !16010

do.end693:                                        ; preds = %if.end690
  br label %if.end694, !dbg !16010

if.end694:                                        ; preds = %do.end693, %if.else642
  br label %if.end695

if.end695:                                        ; preds = %if.end694, %if.end641
  br label %if.end696

if.end696:                                        ; preds = %if.end695, %if.end485
  br label %do.body697, !dbg !16026

do.body697:                                       ; preds = %if.end696
  call void @llvm.dbg.declare(metadata i64* %_n698, metadata !16027, metadata !DIExpression()), !dbg !16029
  %arraydecay699 = getelementptr inbounds [23 x i8], [23 x i8]* %buf, i64 0, i64 0, !dbg !16029, !ctir !846
  %add.ptr700 = getelementptr inbounds i8, i8* %arraydecay699, i64 23, !dbg !16029, !ctir !144
  %419 = load i8*, i8** %bufp, align 8, !dbg !16029
  %sub.ptr.lhs.cast701 = ptrtoint i8* %add.ptr700 to i64, !dbg !16029
  %sub.ptr.rhs.cast702 = ptrtoint i8* %419 to i64, !dbg !16029
  %sub.ptr.sub703 = sub i64 %sub.ptr.lhs.cast701, %sub.ptr.rhs.cast702, !dbg !16029
  store i64 %sub.ptr.sub703, i64* %_n698, align 8, !dbg !16029
  call void @llvm.dbg.declare(metadata i64* %_w704, metadata !16030, metadata !DIExpression()), !dbg !16029
  %420 = load i32, i32* %width.addr, align 4, !dbg !16029
  %cmp705 = icmp slt i32 %420, 0, !dbg !16029
  br i1 %cmp705, label %cond.true707, label %cond.false708, !dbg !16029

cond.true707:                                     ; preds = %do.body697
  br label %cond.end709, !dbg !16029

cond.false708:                                    ; preds = %do.body697
  %421 = load i32, i32* %width.addr, align 4, !dbg !16029
  br label %cond.end709, !dbg !16029

cond.end709:                                      ; preds = %cond.false708, %cond.true707
  %cond710 = phi i32 [ 0, %cond.true707 ], [ %421, %cond.false708 ], !dbg !16029
  %conv711 = sext i32 %cond710 to i64, !dbg !16029
  store i64 %conv711, i64* %_w704, align 8, !dbg !16029
  call void @llvm.dbg.declare(metadata i64* %_incr712, metadata !16031, metadata !DIExpression()), !dbg !16029
  %422 = load i64, i64* %_n698, align 8, !dbg !16029
  %423 = load i64, i64* %_w704, align 8, !dbg !16029
  %cmp713 = icmp ult i64 %422, %423, !dbg !16029
  br i1 %cmp713, label %cond.true715, label %cond.false716, !dbg !16029

cond.true715:                                     ; preds = %cond.end709
  %424 = load i64, i64* %_w704, align 8, !dbg !16029
  br label %cond.end717, !dbg !16029

cond.false716:                                    ; preds = %cond.end709
  %425 = load i64, i64* %_n698, align 8, !dbg !16029
  br label %cond.end717, !dbg !16029

cond.end717:                                      ; preds = %cond.false716, %cond.true715
  %cond718 = phi i64 [ %424, %cond.true715 ], [ %425, %cond.false716 ], !dbg !16029
  store i64 %cond718, i64* %_incr712, align 8, !dbg !16029
  %426 = load i64, i64* %_incr712, align 8, !dbg !16032
  %427 = load i64, i64* %maxsize.addr, align 8, !dbg !16032
  %428 = load i64, i64* %i, align 8, !dbg !16032
  %sub719 = sub i64 %427, %428, !dbg !16032
  %cmp720 = icmp uge i64 %426, %sub719, !dbg !16032
  br i1 %cmp720, label %if.then722, label %if.end723, !dbg !16029

if.then722:                                       ; preds = %cond.end717
  store i64 0, i64* %retval, align 8, !dbg !16032
  br label %return, !dbg !16032

if.end723:                                        ; preds = %cond.end717
  %429 = load i8*, i8** %p, align 8, !dbg !16034
  %tobool724 = icmp ne i8* %429, null, !dbg !16034
  br i1 %tobool724, label %if.then725, label %if.end757, !dbg !16029

if.then725:                                       ; preds = %if.end723
  %430 = load i32, i32* %digits, align 4, !dbg !16036
  %cmp726 = icmp eq i32 %430, 0, !dbg !16036
  br i1 %cmp726, label %land.lhs.true728, label %if.end745, !dbg !16036

land.lhs.true728:                                 ; preds = %if.then725
  %431 = load i64, i64* %_n698, align 8, !dbg !16036
  %432 = load i64, i64* %_w704, align 8, !dbg !16036
  %cmp729 = icmp ult i64 %431, %432, !dbg !16036
  br i1 %cmp729, label %if.then731, label %if.end745, !dbg !16039

if.then731:                                       ; preds = %land.lhs.true728
  call void @llvm.dbg.declare(metadata i64* %_delta732, metadata !16040, metadata !DIExpression()), !dbg !16042
  %433 = load i32, i32* %width.addr, align 4, !dbg !16042
  %conv733 = sext i32 %433 to i64, !dbg !16042
  %434 = load i64, i64* %_n698, align 8, !dbg !16042
  %sub734 = sub i64 %conv733, %434, !dbg !16042
  store i64 %sub734, i64* %_delta732, align 8, !dbg !16042
  %435 = load i32, i32* %pad, align 4, !dbg !16043
  %cmp735 = icmp eq i32 %435, 48, !dbg !16043
  br i1 %cmp735, label %if.then740, label %lor.lhs.false737, !dbg !16043

lor.lhs.false737:                                 ; preds = %if.then731
  %436 = load i32, i32* %pad, align 4, !dbg !16043
  %cmp738 = icmp eq i32 %436, 43, !dbg !16043
  br i1 %cmp738, label %if.then740, label %if.else742, !dbg !16042

if.then740:                                       ; preds = %lor.lhs.false737, %if.then731
  %437 = load i8*, i8** %p, align 8, !dbg !16043
  %438 = load i64, i64* %_delta732, align 8, !dbg !16043
  call void @llvm.memset.p0i8.i64(i8* align 1 %437, i8 48, i64 %438, i1 false), !dbg !16043
  %439 = load i64, i64* %_delta732, align 8, !dbg !16043
  %440 = load i8*, i8** %p, align 8, !dbg !16043
  %add.ptr741 = getelementptr inbounds i8, i8* %440, i64 %439, !dbg !16043, !ctir !144
  store i8* %add.ptr741, i8** %p, align 8, !dbg !16043
  br label %if.end744, !dbg !16043

if.else742:                                       ; preds = %lor.lhs.false737
  %441 = load i8*, i8** %p, align 8, !dbg !16043
  %442 = load i64, i64* %_delta732, align 8, !dbg !16043
  call void @llvm.memset.p0i8.i64(i8* align 1 %441, i8 32, i64 %442, i1 false), !dbg !16043
  %443 = load i64, i64* %_delta732, align 8, !dbg !16043
  %444 = load i8*, i8** %p, align 8, !dbg !16043
  %add.ptr743 = getelementptr inbounds i8, i8* %444, i64 %443, !dbg !16043, !ctir !144
  store i8* %add.ptr743, i8** %p, align 8, !dbg !16043
  br label %if.end744

if.end744:                                        ; preds = %if.else742, %if.then740
  br label %if.end745, !dbg !16042

if.end745:                                        ; preds = %if.end744, %land.lhs.true728, %if.then725
  %445 = load i8, i8* %to_lowcase, align 1, !dbg !16045
  %tobool746 = trunc i8 %445 to i1, !dbg !16045
  br i1 %tobool746, label %if.then747, label %if.else749, !dbg !16039

if.then747:                                       ; preds = %if.end745
  %446 = load i8*, i8** %p, align 8, !dbg !16045
  %447 = load i8*, i8** %bufp, align 8, !dbg !16045
  %448 = load i64, i64* %_n698, align 8, !dbg !16045
  %call748 = call i8* @memcpy_lowcase(i8* %446, i8* %447, i64 %448), !dbg !16045
  br label %if.end755, !dbg !16045

if.else749:                                       ; preds = %if.end745
  %449 = load i8, i8* %to_uppcase, align 1, !dbg !16047
  %tobool750 = trunc i8 %449 to i1, !dbg !16047
  br i1 %tobool750, label %if.then751, label %if.else753, !dbg !16045

if.then751:                                       ; preds = %if.else749
  %450 = load i8*, i8** %p, align 8, !dbg !16047
  %451 = load i8*, i8** %bufp, align 8, !dbg !16047
  %452 = load i64, i64* %_n698, align 8, !dbg !16047
  %call752 = call i8* @memcpy_uppcase(i8* %450, i8* %451, i64 %452), !dbg !16047
  br label %if.end754, !dbg !16047

if.else753:                                       ; preds = %if.else749
  %453 = load i8*, i8** %p, align 8, !dbg !16047
  %454 = load i8*, i8** %bufp, align 8, !dbg !16047
  %455 = load i64, i64* %_n698, align 8, !dbg !16047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %453, i8* align 1 %454, i64 %455, i1 false), !dbg !16047
  br label %if.end754

if.end754:                                        ; preds = %if.else753, %if.then751
  br label %if.end755

if.end755:                                        ; preds = %if.end754, %if.then747
  %456 = load i64, i64* %_n698, align 8, !dbg !16039
  %457 = load i8*, i8** %p, align 8, !dbg !16039
  %add.ptr756 = getelementptr inbounds i8, i8* %457, i64 %456, !dbg !16039, !ctir !144
  store i8* %add.ptr756, i8** %p, align 8, !dbg !16039
  br label %if.end757, !dbg !16039

if.end757:                                        ; preds = %if.end755, %if.end723
  %458 = load i64, i64* %_incr712, align 8, !dbg !16029
  %459 = load i64, i64* %i, align 8, !dbg !16029
  %add758 = add i64 %459, %458, !dbg !16029
  store i64 %add758, i64* %i, align 8, !dbg !16029
  br label %do.end760, !dbg !16029

do.end760:                                        ; preds = %if.end757
  br label %sw.epilog1435, !dbg !16049

sw.bb761:                                         ; preds = %sw.epilog87
  %460 = load i32, i32* %modifier, align 4, !dbg !16050
  %cmp762 = icmp ne i32 %460, 0, !dbg !16052
  br i1 %cmp762, label %if.then764, label %if.end765, !dbg !16053

if.then764:                                       ; preds = %sw.bb761
  br label %bad_format, !dbg !16054

if.end765:                                        ; preds = %sw.bb761
  %461 = load i32, i32* %pad, align 4, !dbg !16055
  %cmp766 = icmp eq i32 %461, 0, !dbg !16057
  br i1 %cmp766, label %land.lhs.true768, label %if.else772, !dbg !16058

land.lhs.true768:                                 ; preds = %if.end765
  %462 = load i32, i32* %width.addr, align 4, !dbg !16059
  %cmp769 = icmp slt i32 %462, 0, !dbg !16060
  br i1 %cmp769, label %if.then771, label %if.else772, !dbg !16061

if.then771:                                       ; preds = %land.lhs.true768
  store i32 43, i32* %pad, align 4, !dbg !16062
  store i32 4, i32* %subwidth, align 4, !dbg !16064
  br label %if.end778, !dbg !16065

if.else772:                                       ; preds = %land.lhs.true768, %if.end765
  %463 = load i32, i32* %width.addr, align 4, !dbg !16066
  %sub773 = sub nsw i32 %463, 6, !dbg !16068
  store i32 %sub773, i32* %subwidth, align 4, !dbg !16069
  %464 = load i32, i32* %subwidth, align 4, !dbg !16070
  %cmp774 = icmp slt i32 %464, 0, !dbg !16072
  br i1 %cmp774, label %if.then776, label %if.end777, !dbg !16073

if.then776:                                       ; preds = %if.else772
  store i32 0, i32* %subwidth, align 4, !dbg !16074
  br label %if.end777, !dbg !16075

if.end777:                                        ; preds = %if.then776, %if.else772
  br label %if.end778

if.end778:                                        ; preds = %if.end777, %if.then771
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.363, i64 0, i64 0), i8** %subfmt, align 8, !dbg !16076
  br label %subformat_width, !dbg !16077

sw.bb779:                                         ; preds = %sw.epilog87
  %465 = load i32, i32* %modifier, align 4, !dbg !16078
  %cmp780 = icmp eq i32 %465, 69, !dbg !16080
  br i1 %cmp780, label %if.then782, label %if.end783, !dbg !16081

if.then782:                                       ; preds = %sw.bb779
  br label %bad_format, !dbg !16082

if.end783:                                        ; preds = %sw.bb779
  br label %do.body784, !dbg !16083

do.body784:                                       ; preds = %if.end783
  store i32 2, i32* %digits, align 4, !dbg !16084
  %466 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16084
  %tm_hour785 = getelementptr inbounds %struct.tm, %struct.tm* %466, i32 0, i32 2, !dbg !16084, !ctir !15283
  %467 = load i32, i32* %tm_hour785, align 8, !dbg !16084, !ctir !27
  store i32 %467, i32* %number_value, align 4, !dbg !16084
  br label %do_number, !dbg !16084

do.end787:                                        ; No predecessors!
  br label %sw.bb788, !dbg !16084

sw.bb788:                                         ; preds = %sw.epilog87, %do.end787
  %468 = load i32, i32* %modifier, align 4, !dbg !16086
  %cmp789 = icmp eq i32 %468, 69, !dbg !16088
  br i1 %cmp789, label %if.then791, label %if.end792, !dbg !16089

if.then791:                                       ; preds = %sw.bb788
  br label %bad_format, !dbg !16090

if.end792:                                        ; preds = %sw.bb788
  br label %do.body793, !dbg !16091

do.body793:                                       ; preds = %if.end792
  store i32 2, i32* %digits, align 4, !dbg !16092
  %469 = load i32, i32* %hour12, align 4, !dbg !16092
  store i32 %469, i32* %number_value, align 4, !dbg !16092
  br label %do_number, !dbg !16092

do.end795:                                        ; No predecessors!
  br label %sw.bb796, !dbg !16092

sw.bb796:                                         ; preds = %sw.epilog87, %do.end795
  %470 = load i32, i32* %modifier, align 4, !dbg !16094
  %cmp797 = icmp eq i32 %470, 69, !dbg !16096
  br i1 %cmp797, label %if.then799, label %if.end800, !dbg !16097

if.then799:                                       ; preds = %sw.bb796
  br label %bad_format, !dbg !16098

if.end800:                                        ; preds = %sw.bb796
  br label %do.body801, !dbg !16099

do.body801:                                       ; preds = %if.end800
  store i32 2, i32* %digits, align 4, !dbg !16100
  %471 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16100
  %tm_hour802 = getelementptr inbounds %struct.tm, %struct.tm* %471, i32 0, i32 2, !dbg !16100, !ctir !15283
  %472 = load i32, i32* %tm_hour802, align 8, !dbg !16100, !ctir !27
  store i32 %472, i32* %number_value, align 4, !dbg !16100
  br label %do_number_spacepad, !dbg !16100

do.end804:                                        ; No predecessors!
  br label %sw.bb805, !dbg !16100

sw.bb805:                                         ; preds = %sw.epilog87, %do.end804
  %473 = load i32, i32* %modifier, align 4, !dbg !16102
  %cmp806 = icmp eq i32 %473, 69, !dbg !16104
  br i1 %cmp806, label %if.then808, label %if.end809, !dbg !16105

if.then808:                                       ; preds = %sw.bb805
  br label %bad_format, !dbg !16106

if.end809:                                        ; preds = %sw.bb805
  br label %do.body810, !dbg !16107

do.body810:                                       ; preds = %if.end809
  store i32 2, i32* %digits, align 4, !dbg !16108
  %474 = load i32, i32* %hour12, align 4, !dbg !16108
  store i32 %474, i32* %number_value, align 4, !dbg !16108
  br label %do_number_spacepad, !dbg !16108

do.end812:                                        ; No predecessors!
  br label %sw.bb813, !dbg !16108

sw.bb813:                                         ; preds = %sw.epilog87, %do.end812
  %475 = load i32, i32* %modifier, align 4, !dbg !16110
  %cmp814 = icmp eq i32 %475, 69, !dbg !16112
  br i1 %cmp814, label %if.then816, label %if.end817, !dbg !16113

if.then816:                                       ; preds = %sw.bb813
  br label %bad_format, !dbg !16114

if.end817:                                        ; preds = %sw.bb813
  br label %do.body818, !dbg !16115

do.body818:                                       ; preds = %if.end817
  store i32 3, i32* %digits, align 4, !dbg !16116
  %476 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16116
  %tm_yday = getelementptr inbounds %struct.tm, %struct.tm* %476, i32 0, i32 7, !dbg !16116, !ctir !15283
  %477 = load i32, i32* %tm_yday, align 4, !dbg !16116, !ctir !27
  %cmp819 = icmp slt i32 %477, -1, !dbg !16116
  %frombool821 = zext i1 %cmp819 to i8, !dbg !16116
  store i8 %frombool821, i8* %negative_number, align 1, !dbg !16116
  %478 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16116
  %tm_yday822 = getelementptr inbounds %struct.tm, %struct.tm* %478, i32 0, i32 7, !dbg !16116, !ctir !15283
  %479 = load i32, i32* %tm_yday822, align 4, !dbg !16116, !ctir !27
  %add823 = add i32 %479, 1, !dbg !16116
  store i32 %add823, i32* %u_number_value, align 4, !dbg !16116
  br label %do_signed_number, !dbg !16116

do.end825:                                        ; No predecessors!
  br label %sw.bb826, !dbg !16116

sw.bb826:                                         ; preds = %sw.epilog87, %do.end825
  %480 = load i32, i32* %modifier, align 4, !dbg !16118
  %cmp827 = icmp eq i32 %480, 69, !dbg !16120
  br i1 %cmp827, label %if.then829, label %if.end830, !dbg !16121

if.then829:                                       ; preds = %sw.bb826
  br label %bad_format, !dbg !16122

if.end830:                                        ; preds = %sw.bb826
  br label %do.body831, !dbg !16123

do.body831:                                       ; preds = %if.end830
  store i32 2, i32* %digits, align 4, !dbg !16124
  %481 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16124
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %481, i32 0, i32 1, !dbg !16124, !ctir !15283
  %482 = load i32, i32* %tm_min, align 4, !dbg !16124, !ctir !27
  store i32 %482, i32* %number_value, align 4, !dbg !16124
  br label %do_number, !dbg !16124

do.end833:                                        ; No predecessors!
  br label %sw.bb834, !dbg !16124

sw.bb834:                                         ; preds = %sw.epilog87, %do.end833
  %483 = load i32, i32* %modifier, align 4, !dbg !16126
  %cmp835 = icmp eq i32 %483, 69, !dbg !16128
  br i1 %cmp835, label %if.then837, label %if.end838, !dbg !16129

if.then837:                                       ; preds = %sw.bb834
  br label %bad_format, !dbg !16130

if.end838:                                        ; preds = %sw.bb834
  br label %do.body839, !dbg !16131

do.body839:                                       ; preds = %if.end838
  store i32 2, i32* %digits, align 4, !dbg !16132
  %484 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16132
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %484, i32 0, i32 4, !dbg !16132, !ctir !15283
  %485 = load i32, i32* %tm_mon, align 8, !dbg !16132, !ctir !27
  %cmp840 = icmp slt i32 %485, -1, !dbg !16132
  %frombool842 = zext i1 %cmp840 to i8, !dbg !16132
  store i8 %frombool842, i8* %negative_number, align 1, !dbg !16132
  %486 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16132
  %tm_mon843 = getelementptr inbounds %struct.tm, %struct.tm* %486, i32 0, i32 4, !dbg !16132, !ctir !15283
  %487 = load i32, i32* %tm_mon843, align 8, !dbg !16132, !ctir !27
  %add844 = add i32 %487, 1, !dbg !16132
  store i32 %add844, i32* %u_number_value, align 4, !dbg !16132
  br label %do_signed_number, !dbg !16132

do.end846:                                        ; No predecessors!
  br label %sw.bb847, !dbg !16132

sw.bb847:                                         ; preds = %sw.epilog87, %do.end846
  %488 = load i32, i32* %modifier, align 4, !dbg !16134
  %cmp848 = icmp eq i32 %488, 69, !dbg !16136
  br i1 %cmp848, label %if.then850, label %if.end851, !dbg !16137

if.then850:                                       ; preds = %sw.bb847
  br label %bad_format, !dbg !16138

if.end851:                                        ; preds = %sw.bb847
  %489 = load i32, i32* %ns.addr, align 4, !dbg !16139
  store i32 %489, i32* %number_value, align 4, !dbg !16140
  %490 = load i32, i32* %width.addr, align 4, !dbg !16141
  %cmp852 = icmp eq i32 %490, -1, !dbg !16143
  br i1 %cmp852, label %if.then854, label %if.else855, !dbg !16144

if.then854:                                       ; preds = %if.end851
  store i32 9, i32* %width.addr, align 4, !dbg !16145
  br label %if.end861, !dbg !16146

if.else855:                                       ; preds = %if.end851
  call void @llvm.dbg.declare(metadata i32* %j, metadata !16147, metadata !DIExpression()), !dbg !16149
  %491 = load i32, i32* %width.addr, align 4, !dbg !16150
  store i32 %491, i32* %j, align 4, !dbg !16152
  br label %for.cond856, !dbg !16153

for.cond856:                                      ; preds = %for.inc, %if.else855
  %492 = load i32, i32* %j, align 4, !dbg !16154
  %cmp857 = icmp slt i32 %492, 9, !dbg !16156
  br i1 %cmp857, label %for.body859, label %for.end, !dbg !16157

for.body859:                                      ; preds = %for.cond856
  %493 = load i32, i32* %number_value, align 4, !dbg !16158
  %div860 = sdiv i32 %493, 10, !dbg !16158
  store i32 %div860, i32* %number_value, align 4, !dbg !16158
  br label %for.inc, !dbg !16159

for.inc:                                          ; preds = %for.body859
  %494 = load i32, i32* %j, align 4, !dbg !16160
  %inc = add nsw i32 %494, 1, !dbg !16160
  store i32 %inc, i32* %j, align 4, !dbg !16160
  br label %for.cond856, !dbg !16161, !llvm.loop !16162

for.end:                                          ; preds = %for.cond856
  br label %if.end861

if.end861:                                        ; preds = %for.end, %if.then854
  br label %do.body862, !dbg !16164

do.body862:                                       ; preds = %if.end861
  %495 = load i32, i32* %width.addr, align 4, !dbg !16165
  store i32 %495, i32* %digits, align 4, !dbg !16165
  %496 = load i32, i32* %number_value, align 4, !dbg !16165
  store i32 %496, i32* %number_value, align 4, !dbg !16165
  br label %do_number, !dbg !16165

do.end864:                                        ; No predecessors!
  br label %sw.bb865, !dbg !16165

sw.bb865:                                         ; preds = %sw.epilog87, %do.end864
  br label %do.body866, !dbg !16167

do.body866:                                       ; preds = %sw.bb865
  call void @llvm.dbg.declare(metadata i64* %_n867, metadata !16168, metadata !DIExpression()), !dbg !16170
  store i64 1, i64* %_n867, align 8, !dbg !16170
  call void @llvm.dbg.declare(metadata i64* %_w868, metadata !16171, metadata !DIExpression()), !dbg !16170
  %497 = load i32, i32* %width.addr, align 4, !dbg !16170
  %cmp869 = icmp slt i32 %497, 0, !dbg !16170
  br i1 %cmp869, label %cond.true871, label %cond.false872, !dbg !16170

cond.true871:                                     ; preds = %do.body866
  br label %cond.end873, !dbg !16170

cond.false872:                                    ; preds = %do.body866
  %498 = load i32, i32* %width.addr, align 4, !dbg !16170
  br label %cond.end873, !dbg !16170

cond.end873:                                      ; preds = %cond.false872, %cond.true871
  %cond874 = phi i32 [ 0, %cond.true871 ], [ %498, %cond.false872 ], !dbg !16170
  %conv875 = sext i32 %cond874 to i64, !dbg !16170
  store i64 %conv875, i64* %_w868, align 8, !dbg !16170
  call void @llvm.dbg.declare(metadata i64* %_incr876, metadata !16172, metadata !DIExpression()), !dbg !16170
  %499 = load i64, i64* %_n867, align 8, !dbg !16170
  %500 = load i64, i64* %_w868, align 8, !dbg !16170
  %cmp877 = icmp ult i64 %499, %500, !dbg !16170
  br i1 %cmp877, label %cond.true879, label %cond.false880, !dbg !16170

cond.true879:                                     ; preds = %cond.end873
  %501 = load i64, i64* %_w868, align 8, !dbg !16170
  br label %cond.end881, !dbg !16170

cond.false880:                                    ; preds = %cond.end873
  %502 = load i64, i64* %_n867, align 8, !dbg !16170
  br label %cond.end881, !dbg !16170

cond.end881:                                      ; preds = %cond.false880, %cond.true879
  %cond882 = phi i64 [ %501, %cond.true879 ], [ %502, %cond.false880 ], !dbg !16170
  store i64 %cond882, i64* %_incr876, align 8, !dbg !16170
  %503 = load i64, i64* %_incr876, align 8, !dbg !16173
  %504 = load i64, i64* %maxsize.addr, align 8, !dbg !16173
  %505 = load i64, i64* %i, align 8, !dbg !16173
  %sub883 = sub i64 %504, %505, !dbg !16173
  %cmp884 = icmp uge i64 %503, %sub883, !dbg !16173
  br i1 %cmp884, label %if.then886, label %if.end887, !dbg !16170

if.then886:                                       ; preds = %cond.end881
  store i64 0, i64* %retval, align 8, !dbg !16173
  br label %return, !dbg !16173

if.end887:                                        ; preds = %cond.end881
  %506 = load i8*, i8** %p, align 8, !dbg !16175
  %tobool888 = icmp ne i8* %506, null, !dbg !16175
  br i1 %tobool888, label %if.then889, label %if.end911, !dbg !16170

if.then889:                                       ; preds = %if.end887
  %507 = load i32, i32* %digits, align 4, !dbg !16177
  %cmp890 = icmp eq i32 %507, 0, !dbg !16177
  br i1 %cmp890, label %land.lhs.true892, label %if.end909, !dbg !16177

land.lhs.true892:                                 ; preds = %if.then889
  %508 = load i64, i64* %_n867, align 8, !dbg !16177
  %509 = load i64, i64* %_w868, align 8, !dbg !16177
  %cmp893 = icmp ult i64 %508, %509, !dbg !16177
  br i1 %cmp893, label %if.then895, label %if.end909, !dbg !16180

if.then895:                                       ; preds = %land.lhs.true892
  call void @llvm.dbg.declare(metadata i64* %_delta896, metadata !16181, metadata !DIExpression()), !dbg !16183
  %510 = load i32, i32* %width.addr, align 4, !dbg !16183
  %conv897 = sext i32 %510 to i64, !dbg !16183
  %511 = load i64, i64* %_n867, align 8, !dbg !16183
  %sub898 = sub i64 %conv897, %511, !dbg !16183
  store i64 %sub898, i64* %_delta896, align 8, !dbg !16183
  %512 = load i32, i32* %pad, align 4, !dbg !16184
  %cmp899 = icmp eq i32 %512, 48, !dbg !16184
  br i1 %cmp899, label %if.then904, label %lor.lhs.false901, !dbg !16184

lor.lhs.false901:                                 ; preds = %if.then895
  %513 = load i32, i32* %pad, align 4, !dbg !16184
  %cmp902 = icmp eq i32 %513, 43, !dbg !16184
  br i1 %cmp902, label %if.then904, label %if.else906, !dbg !16183

if.then904:                                       ; preds = %lor.lhs.false901, %if.then895
  %514 = load i8*, i8** %p, align 8, !dbg !16184
  %515 = load i64, i64* %_delta896, align 8, !dbg !16184
  call void @llvm.memset.p0i8.i64(i8* align 1 %514, i8 48, i64 %515, i1 false), !dbg !16184
  %516 = load i64, i64* %_delta896, align 8, !dbg !16184
  %517 = load i8*, i8** %p, align 8, !dbg !16184
  %add.ptr905 = getelementptr inbounds i8, i8* %517, i64 %516, !dbg !16184, !ctir !144
  store i8* %add.ptr905, i8** %p, align 8, !dbg !16184
  br label %if.end908, !dbg !16184

if.else906:                                       ; preds = %lor.lhs.false901
  %518 = load i8*, i8** %p, align 8, !dbg !16184
  %519 = load i64, i64* %_delta896, align 8, !dbg !16184
  call void @llvm.memset.p0i8.i64(i8* align 1 %518, i8 32, i64 %519, i1 false), !dbg !16184
  %520 = load i64, i64* %_delta896, align 8, !dbg !16184
  %521 = load i8*, i8** %p, align 8, !dbg !16184
  %add.ptr907 = getelementptr inbounds i8, i8* %521, i64 %520, !dbg !16184, !ctir !144
  store i8* %add.ptr907, i8** %p, align 8, !dbg !16184
  br label %if.end908

if.end908:                                        ; preds = %if.else906, %if.then904
  br label %if.end909, !dbg !16183

if.end909:                                        ; preds = %if.end908, %land.lhs.true892, %if.then889
  %522 = load i8*, i8** %p, align 8, !dbg !16180
  store i8 10, i8* %522, align 1, !dbg !16180, !ctir !144
  %523 = load i64, i64* %_n867, align 8, !dbg !16180
  %524 = load i8*, i8** %p, align 8, !dbg !16180
  %add.ptr910 = getelementptr inbounds i8, i8* %524, i64 %523, !dbg !16180, !ctir !144
  store i8* %add.ptr910, i8** %p, align 8, !dbg !16180
  br label %if.end911, !dbg !16180

if.end911:                                        ; preds = %if.end909, %if.end887
  %525 = load i64, i64* %_incr876, align 8, !dbg !16170
  %526 = load i64, i64* %i, align 8, !dbg !16170
  %add912 = add i64 %526, %525, !dbg !16170
  store i64 %add912, i64* %i, align 8, !dbg !16170
  br label %do.end914, !dbg !16170

do.end914:                                        ; preds = %if.end911
  br label %sw.epilog1435, !dbg !16186

sw.bb915:                                         ; preds = %sw.epilog87
  store i8 1, i8* %to_lowcase, align 1, !dbg !16187
  store i32 112, i32* %format_char, align 4, !dbg !16188
  br label %sw.bb916, !dbg !16189

sw.bb916:                                         ; preds = %sw.epilog87, %sw.bb915
  %527 = load i8, i8* %change_case, align 1, !dbg !16190
  %tobool917 = trunc i8 %527 to i1, !dbg !16190
  br i1 %tobool917, label %if.then918, label %if.end919, !dbg !16192

if.then918:                                       ; preds = %sw.bb916
  store i8 0, i8* %to_uppcase, align 1, !dbg !16193
  store i8 1, i8* %to_lowcase, align 1, !dbg !16195
  br label %if.end919, !dbg !16196

if.end919:                                        ; preds = %if.then918, %sw.bb916
  br label %underlying_strftime, !dbg !16197

sw.bb920:                                         ; preds = %sw.epilog87
  br label %do.body921, !dbg !16198

do.body921:                                       ; preds = %sw.bb920
  store i32 1, i32* %digits, align 4, !dbg !16199
  store i8 0, i8* %negative_number, align 1, !dbg !16199
  %528 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16199
  %tm_mon922 = getelementptr inbounds %struct.tm, %struct.tm* %528, i32 0, i32 4, !dbg !16199, !ctir !15283
  %529 = load i32, i32* %tm_mon922, align 8, !dbg !16199, !ctir !27
  %mul923 = mul nsw i32 %529, 11, !dbg !16199
  %shr924 = ashr i32 %mul923, 5, !dbg !16199
  %add925 = add nsw i32 %shr924, 1, !dbg !16199
  store i32 %add925, i32* %u_number_value, align 4, !dbg !16199
  br label %do_signed_number, !dbg !16199

do.end927:                                        ; No predecessors!
  br label %sw.epilog1435, !dbg !16201

sw.bb928:                                         ; preds = %sw.epilog87
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.364, i64 0, i64 0), i8** %subfmt, align 8, !dbg !16202
  br label %subformat, !dbg !16203

sw.bb929:                                         ; preds = %sw.epilog87
  br label %underlying_strftime, !dbg !16204

sw.bb930:                                         ; preds = %sw.epilog87
  %530 = load i32, i32* %modifier, align 4, !dbg !16205
  %cmp931 = icmp eq i32 %530, 69, !dbg !16207
  br i1 %cmp931, label %if.then933, label %if.end934, !dbg !16208

if.then933:                                       ; preds = %sw.bb930
  br label %bad_format, !dbg !16209

if.end934:                                        ; preds = %sw.bb930
  br label %do.body935, !dbg !16210

do.body935:                                       ; preds = %if.end934
  store i32 2, i32* %digits, align 4, !dbg !16211
  %531 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16211
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %531, i32 0, i32 0, !dbg !16211, !ctir !15283
  %532 = load i32, i32* %tm_sec, align 8, !dbg !16211, !ctir !27
  store i32 %532, i32* %number_value, align 4, !dbg !16211
  br label %do_number, !dbg !16211

do.end937:                                        ; No predecessors!
  br label %sw.bb938, !dbg !16211

sw.bb938:                                         ; preds = %sw.epilog87, %do.end937
  call void @llvm.dbg.declare(metadata %struct.tm* %ltm, metadata !16213, metadata !DIExpression()), !dbg !16215
  call void @llvm.dbg.declare(metadata i64* %t, metadata !16216, metadata !DIExpression()), !dbg !16217
  %533 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16218
  %534 = bitcast %struct.tm* %ltm to i8*, !dbg !16219
  %535 = bitcast %struct.tm* %533 to i8*, !dbg !16219
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %534, i8* align 8 %535, i64 56, i1 false), !dbg !16219
  %536 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !16220
  %call939 = call i64 @mktime_z(%struct.tm_zone* %536, %struct.tm* %ltm), !dbg !16221
  store i64 %call939, i64* %t, align 8, !dbg !16222
  %arraydecay940 = getelementptr inbounds [23 x i8], [23 x i8]* %buf, i64 0, i64 0, !dbg !16223, !ctir !846
  %add.ptr941 = getelementptr inbounds i8, i8* %arraydecay940, i64 23, !dbg !16224, !ctir !144
  store i8* %add.ptr941, i8** %bufp, align 8, !dbg !16225
  %537 = load i64, i64* %t, align 8, !dbg !16226
  %cmp942 = icmp slt i64 %537, 0, !dbg !16227
  %frombool944 = zext i1 %cmp942 to i8, !dbg !16228
  store i8 %frombool944, i8* %negative_number, align 1, !dbg !16228
  br label %do.body945, !dbg !16229

do.body945:                                       ; preds = %do.cond959, %sw.bb938
  call void @llvm.dbg.declare(metadata i32* %d, metadata !16230, metadata !DIExpression()), !dbg !16232
  %538 = load i64, i64* %t, align 8, !dbg !16233
  %rem946 = srem i64 %538, 10, !dbg !16234
  %conv947 = trunc i64 %rem946 to i32, !dbg !16233
  store i32 %conv947, i32* %d, align 4, !dbg !16232
  %539 = load i64, i64* %t, align 8, !dbg !16235
  %div948 = sdiv i64 %539, 10, !dbg !16235
  store i64 %div948, i64* %t, align 8, !dbg !16235
  %540 = load i8, i8* %negative_number, align 1, !dbg !16236
  %tobool949 = trunc i8 %540 to i1, !dbg !16236
  br i1 %tobool949, label %cond.true951, label %cond.false953, !dbg !16236

cond.true951:                                     ; preds = %do.body945
  %541 = load i32, i32* %d, align 4, !dbg !16237
  %sub952 = sub nsw i32 0, %541, !dbg !16238
  br label %cond.end954, !dbg !16236

cond.false953:                                    ; preds = %do.body945
  %542 = load i32, i32* %d, align 4, !dbg !16239
  br label %cond.end954, !dbg !16236

cond.end954:                                      ; preds = %cond.false953, %cond.true951
  %cond955 = phi i32 [ %sub952, %cond.true951 ], [ %542, %cond.false953 ], !dbg !16236
  %add956 = add nsw i32 %cond955, 48, !dbg !16240
  %conv957 = trunc i32 %add956 to i8, !dbg !16241
  %543 = load i8*, i8** %bufp, align 8, !dbg !16242
  %incdec.ptr958 = getelementptr inbounds i8, i8* %543, i32 -1, !dbg !16242, !ctir !144
  store i8* %incdec.ptr958, i8** %bufp, align 8, !dbg !16242
  store i8 %conv957, i8* %incdec.ptr958, align 1, !dbg !16243, !ctir !144
  br label %do.cond959, !dbg !16244

do.cond959:                                       ; preds = %cond.end954
  %544 = load i64, i64* %t, align 8, !dbg !16245
  %cmp960 = icmp ne i64 %544, 0, !dbg !16246
  br i1 %cmp960, label %do.body945, label %do.end962, !dbg !16244, !llvm.loop !16247

do.end962:                                        ; preds = %do.cond959
  store i32 1, i32* %digits, align 4, !dbg !16249
  store i8 0, i8* %always_output_a_sign, align 1, !dbg !16250
  br label %do_number_sign_and_padding, !dbg !16251

sw.bb963:                                         ; preds = %sw.epilog87
  %545 = load i32, i32* %modifier, align 4, !dbg !16252
  %cmp964 = icmp eq i32 %545, 79, !dbg !16254
  br i1 %cmp964, label %if.then966, label %if.end967, !dbg !16255

if.then966:                                       ; preds = %sw.bb963
  br label %bad_format, !dbg !16256

if.end967:                                        ; preds = %sw.bb963
  br label %underlying_strftime, !dbg !16257

sw.bb968:                                         ; preds = %sw.epilog87
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4.365, i64 0, i64 0), i8** %subfmt, align 8, !dbg !16258
  br label %subformat, !dbg !16259

sw.bb969:                                         ; preds = %sw.epilog87
  br label %do.body970, !dbg !16260

do.body970:                                       ; preds = %sw.bb969
  call void @llvm.dbg.declare(metadata i64* %_n971, metadata !16261, metadata !DIExpression()), !dbg !16263
  store i64 1, i64* %_n971, align 8, !dbg !16263
  call void @llvm.dbg.declare(metadata i64* %_w972, metadata !16264, metadata !DIExpression()), !dbg !16263
  %546 = load i32, i32* %width.addr, align 4, !dbg !16263
  %cmp973 = icmp slt i32 %546, 0, !dbg !16263
  br i1 %cmp973, label %cond.true975, label %cond.false976, !dbg !16263

cond.true975:                                     ; preds = %do.body970
  br label %cond.end977, !dbg !16263

cond.false976:                                    ; preds = %do.body970
  %547 = load i32, i32* %width.addr, align 4, !dbg !16263
  br label %cond.end977, !dbg !16263

cond.end977:                                      ; preds = %cond.false976, %cond.true975
  %cond978 = phi i32 [ 0, %cond.true975 ], [ %547, %cond.false976 ], !dbg !16263
  %conv979 = sext i32 %cond978 to i64, !dbg !16263
  store i64 %conv979, i64* %_w972, align 8, !dbg !16263
  call void @llvm.dbg.declare(metadata i64* %_incr980, metadata !16265, metadata !DIExpression()), !dbg !16263
  %548 = load i64, i64* %_n971, align 8, !dbg !16263
  %549 = load i64, i64* %_w972, align 8, !dbg !16263
  %cmp981 = icmp ult i64 %548, %549, !dbg !16263
  br i1 %cmp981, label %cond.true983, label %cond.false984, !dbg !16263

cond.true983:                                     ; preds = %cond.end977
  %550 = load i64, i64* %_w972, align 8, !dbg !16263
  br label %cond.end985, !dbg !16263

cond.false984:                                    ; preds = %cond.end977
  %551 = load i64, i64* %_n971, align 8, !dbg !16263
  br label %cond.end985, !dbg !16263

cond.end985:                                      ; preds = %cond.false984, %cond.true983
  %cond986 = phi i64 [ %550, %cond.true983 ], [ %551, %cond.false984 ], !dbg !16263
  store i64 %cond986, i64* %_incr980, align 8, !dbg !16263
  %552 = load i64, i64* %_incr980, align 8, !dbg !16266
  %553 = load i64, i64* %maxsize.addr, align 8, !dbg !16266
  %554 = load i64, i64* %i, align 8, !dbg !16266
  %sub987 = sub i64 %553, %554, !dbg !16266
  %cmp988 = icmp uge i64 %552, %sub987, !dbg !16266
  br i1 %cmp988, label %if.then990, label %if.end991, !dbg !16263

if.then990:                                       ; preds = %cond.end985
  store i64 0, i64* %retval, align 8, !dbg !16266
  br label %return, !dbg !16266

if.end991:                                        ; preds = %cond.end985
  %555 = load i8*, i8** %p, align 8, !dbg !16268
  %tobool992 = icmp ne i8* %555, null, !dbg !16268
  br i1 %tobool992, label %if.then993, label %if.end1015, !dbg !16263

if.then993:                                       ; preds = %if.end991
  %556 = load i32, i32* %digits, align 4, !dbg !16270
  %cmp994 = icmp eq i32 %556, 0, !dbg !16270
  br i1 %cmp994, label %land.lhs.true996, label %if.end1013, !dbg !16270

land.lhs.true996:                                 ; preds = %if.then993
  %557 = load i64, i64* %_n971, align 8, !dbg !16270
  %558 = load i64, i64* %_w972, align 8, !dbg !16270
  %cmp997 = icmp ult i64 %557, %558, !dbg !16270
  br i1 %cmp997, label %if.then999, label %if.end1013, !dbg !16273

if.then999:                                       ; preds = %land.lhs.true996
  call void @llvm.dbg.declare(metadata i64* %_delta1000, metadata !16274, metadata !DIExpression()), !dbg !16276
  %559 = load i32, i32* %width.addr, align 4, !dbg !16276
  %conv1001 = sext i32 %559 to i64, !dbg !16276
  %560 = load i64, i64* %_n971, align 8, !dbg !16276
  %sub1002 = sub i64 %conv1001, %560, !dbg !16276
  store i64 %sub1002, i64* %_delta1000, align 8, !dbg !16276
  %561 = load i32, i32* %pad, align 4, !dbg !16277
  %cmp1003 = icmp eq i32 %561, 48, !dbg !16277
  br i1 %cmp1003, label %if.then1008, label %lor.lhs.false1005, !dbg !16277

lor.lhs.false1005:                                ; preds = %if.then999
  %562 = load i32, i32* %pad, align 4, !dbg !16277
  %cmp1006 = icmp eq i32 %562, 43, !dbg !16277
  br i1 %cmp1006, label %if.then1008, label %if.else1010, !dbg !16276

if.then1008:                                      ; preds = %lor.lhs.false1005, %if.then999
  %563 = load i8*, i8** %p, align 8, !dbg !16277
  %564 = load i64, i64* %_delta1000, align 8, !dbg !16277
  call void @llvm.memset.p0i8.i64(i8* align 1 %563, i8 48, i64 %564, i1 false), !dbg !16277
  %565 = load i64, i64* %_delta1000, align 8, !dbg !16277
  %566 = load i8*, i8** %p, align 8, !dbg !16277
  %add.ptr1009 = getelementptr inbounds i8, i8* %566, i64 %565, !dbg !16277, !ctir !144
  store i8* %add.ptr1009, i8** %p, align 8, !dbg !16277
  br label %if.end1012, !dbg !16277

if.else1010:                                      ; preds = %lor.lhs.false1005
  %567 = load i8*, i8** %p, align 8, !dbg !16277
  %568 = load i64, i64* %_delta1000, align 8, !dbg !16277
  call void @llvm.memset.p0i8.i64(i8* align 1 %567, i8 32, i64 %568, i1 false), !dbg !16277
  %569 = load i64, i64* %_delta1000, align 8, !dbg !16277
  %570 = load i8*, i8** %p, align 8, !dbg !16277
  %add.ptr1011 = getelementptr inbounds i8, i8* %570, i64 %569, !dbg !16277, !ctir !144
  store i8* %add.ptr1011, i8** %p, align 8, !dbg !16277
  br label %if.end1012

if.end1012:                                       ; preds = %if.else1010, %if.then1008
  br label %if.end1013, !dbg !16276

if.end1013:                                       ; preds = %if.end1012, %land.lhs.true996, %if.then993
  %571 = load i8*, i8** %p, align 8, !dbg !16273
  store i8 9, i8* %571, align 1, !dbg !16273, !ctir !144
  %572 = load i64, i64* %_n971, align 8, !dbg !16273
  %573 = load i8*, i8** %p, align 8, !dbg !16273
  %add.ptr1014 = getelementptr inbounds i8, i8* %573, i64 %572, !dbg !16273, !ctir !144
  store i8* %add.ptr1014, i8** %p, align 8, !dbg !16273
  br label %if.end1015, !dbg !16273

if.end1015:                                       ; preds = %if.end1013, %if.end991
  %574 = load i64, i64* %_incr980, align 8, !dbg !16263
  %575 = load i64, i64* %i, align 8, !dbg !16263
  %add1016 = add i64 %575, %574, !dbg !16263
  store i64 %add1016, i64* %i, align 8, !dbg !16263
  br label %do.end1018, !dbg !16263

do.end1018:                                       ; preds = %if.end1015
  br label %sw.epilog1435, !dbg !16279

sw.bb1019:                                        ; preds = %sw.epilog87
  br label %do.body1020, !dbg !16280

do.body1020:                                      ; preds = %sw.bb1019
  store i32 1, i32* %digits, align 4, !dbg !16281
  %576 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16281
  %tm_wday = getelementptr inbounds %struct.tm, %struct.tm* %576, i32 0, i32 6, !dbg !16281, !ctir !15283
  %577 = load i32, i32* %tm_wday, align 8, !dbg !16281, !ctir !27
  %sub1021 = sub nsw i32 %577, 1, !dbg !16281
  %add1022 = add nsw i32 %sub1021, 7, !dbg !16281
  %rem1023 = srem i32 %add1022, 7, !dbg !16281
  %add1024 = add nsw i32 %rem1023, 1, !dbg !16281
  store i32 %add1024, i32* %number_value, align 4, !dbg !16281
  br label %do_number, !dbg !16281

do.end1026:                                       ; No predecessors!
  br label %sw.bb1027, !dbg !16281

sw.bb1027:                                        ; preds = %sw.epilog87, %do.end1026
  %578 = load i32, i32* %modifier, align 4, !dbg !16283
  %cmp1028 = icmp eq i32 %578, 69, !dbg !16285
  br i1 %cmp1028, label %if.then1030, label %if.end1031, !dbg !16286

if.then1030:                                      ; preds = %sw.bb1027
  br label %bad_format, !dbg !16287

if.end1031:                                       ; preds = %sw.bb1027
  br label %do.body1032, !dbg !16288

do.body1032:                                      ; preds = %if.end1031
  store i32 2, i32* %digits, align 4, !dbg !16289
  %579 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16289
  %tm_yday1033 = getelementptr inbounds %struct.tm, %struct.tm* %579, i32 0, i32 7, !dbg !16289, !ctir !15283
  %580 = load i32, i32* %tm_yday1033, align 4, !dbg !16289, !ctir !27
  %581 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16289
  %tm_wday1034 = getelementptr inbounds %struct.tm, %struct.tm* %581, i32 0, i32 6, !dbg !16289, !ctir !15283
  %582 = load i32, i32* %tm_wday1034, align 8, !dbg !16289, !ctir !27
  %sub1035 = sub nsw i32 %580, %582, !dbg !16289
  %add1036 = add nsw i32 %sub1035, 7, !dbg !16289
  %div1037 = sdiv i32 %add1036, 7, !dbg !16289
  store i32 %div1037, i32* %number_value, align 4, !dbg !16289
  br label %do_number, !dbg !16289

do.end1039:                                       ; No predecessors!
  br label %sw.bb1040, !dbg !16289

sw.bb1040:                                        ; preds = %sw.epilog87, %sw.epilog87, %sw.epilog87, %do.end1039
  %583 = load i32, i32* %modifier, align 4, !dbg !16291
  %cmp1041 = icmp eq i32 %583, 69, !dbg !16293
  br i1 %cmp1041, label %if.then1043, label %if.end1044, !dbg !16294

if.then1043:                                      ; preds = %sw.bb1040
  br label %bad_format, !dbg !16295

if.end1044:                                       ; preds = %sw.bb1040
  call void @llvm.dbg.declare(metadata i32* %year, metadata !16296, metadata !DIExpression()), !dbg !16298
  %584 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16299
  %tm_year1045 = getelementptr inbounds %struct.tm, %struct.tm* %584, i32 0, i32 5, !dbg !16300, !ctir !15283
  %585 = load i32, i32* %tm_year1045, align 4, !dbg !16300, !ctir !27
  %586 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16301
  %tm_year1046 = getelementptr inbounds %struct.tm, %struct.tm* %586, i32 0, i32 5, !dbg !16302, !ctir !15283
  %587 = load i32, i32* %tm_year1046, align 4, !dbg !16302, !ctir !27
  %cmp1047 = icmp slt i32 %587, 0, !dbg !16303
  %588 = zext i1 %cmp1047 to i64, !dbg !16301
  %cond1049 = select i1 %cmp1047, i32 300, i32 -100, !dbg !16301
  %add1050 = add nsw i32 %585, %cond1049, !dbg !16304
  store i32 %add1050, i32* %year, align 4, !dbg !16298
  call void @llvm.dbg.declare(metadata i32* %year_adjust, metadata !16305, metadata !DIExpression()), !dbg !16306
  store i32 0, i32* %year_adjust, align 4, !dbg !16306
  call void @llvm.dbg.declare(metadata i32* %days, metadata !16307, metadata !DIExpression()), !dbg !16308
  %589 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16309
  %tm_yday1051 = getelementptr inbounds %struct.tm, %struct.tm* %589, i32 0, i32 7, !dbg !16310, !ctir !15283
  %590 = load i32, i32* %tm_yday1051, align 4, !dbg !16310, !ctir !27
  %591 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16311
  %tm_wday1052 = getelementptr inbounds %struct.tm, %struct.tm* %591, i32 0, i32 6, !dbg !16312, !ctir !15283
  %592 = load i32, i32* %tm_wday1052, align 8, !dbg !16312, !ctir !27
  %call1053 = call i32 @iso_week_days(i32 %590, i32 %592), !dbg !16313
  store i32 %call1053, i32* %days, align 4, !dbg !16308
  %593 = load i32, i32* %days, align 4, !dbg !16314
  %cmp1054 = icmp slt i32 %593, 0, !dbg !16316
  br i1 %cmp1054, label %if.then1056, label %if.else1079, !dbg !16317

if.then1056:                                      ; preds = %if.end1044
  store i32 -1, i32* %year_adjust, align 4, !dbg !16318
  %594 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16320
  %tm_yday1057 = getelementptr inbounds %struct.tm, %struct.tm* %594, i32 0, i32 7, !dbg !16321, !ctir !15283
  %595 = load i32, i32* %tm_yday1057, align 4, !dbg !16321, !ctir !27
  %596 = load i32, i32* %year, align 4, !dbg !16322
  %sub1058 = sub nsw i32 %596, 1, !dbg !16322
  %rem1059 = srem i32 %sub1058, 4, !dbg !16322
  %cmp1060 = icmp eq i32 %rem1059, 0, !dbg !16322
  br i1 %cmp1060, label %land.rhs1062, label %land.end1073, !dbg !16322

land.rhs1062:                                     ; preds = %if.then1056
  %597 = load i32, i32* %year, align 4, !dbg !16322
  %sub1063 = sub nsw i32 %597, 1, !dbg !16322
  %rem1064 = srem i32 %sub1063, 100, !dbg !16322
  %cmp1065 = icmp ne i32 %rem1064, 0, !dbg !16322
  br i1 %cmp1065, label %lor.end1072, label %lor.rhs1067, !dbg !16322

lor.rhs1067:                                      ; preds = %land.rhs1062
  %598 = load i32, i32* %year, align 4, !dbg !16322
  %sub1068 = sub nsw i32 %598, 1, !dbg !16322
  %rem1069 = srem i32 %sub1068, 400, !dbg !16322
  %cmp1070 = icmp eq i32 %rem1069, 0, !dbg !16322
  br label %lor.end1072, !dbg !16322

lor.end1072:                                      ; preds = %lor.rhs1067, %land.rhs1062
  %599 = phi i1 [ true, %land.rhs1062 ], [ %cmp1070, %lor.rhs1067 ]
  br label %land.end1073

land.end1073:                                     ; preds = %lor.end1072, %if.then1056
  %600 = phi i1 [ false, %if.then1056 ], [ %599, %lor.end1072 ], !dbg !16323
  %land.ext1074 = zext i1 %600 to i32, !dbg !16322
  %add1075 = add nsw i32 365, %land.ext1074, !dbg !16324
  %add1076 = add nsw i32 %595, %add1075, !dbg !16325
  %601 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16326
  %tm_wday1077 = getelementptr inbounds %struct.tm, %struct.tm* %601, i32 0, i32 6, !dbg !16327, !ctir !15283
  %602 = load i32, i32* %tm_wday1077, align 8, !dbg !16327, !ctir !27
  %call1078 = call i32 @iso_week_days(i32 %add1076, i32 %602), !dbg !16328
  store i32 %call1078, i32* %days, align 4, !dbg !16329
  br label %if.end1104, !dbg !16330

if.else1079:                                      ; preds = %if.end1044
  call void @llvm.dbg.declare(metadata i32* %d1080, metadata !16331, metadata !DIExpression()), !dbg !16333
  %603 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16334
  %tm_yday1081 = getelementptr inbounds %struct.tm, %struct.tm* %603, i32 0, i32 7, !dbg !16335, !ctir !15283
  %604 = load i32, i32* %tm_yday1081, align 4, !dbg !16335, !ctir !27
  %605 = load i32, i32* %year, align 4, !dbg !16336
  %rem1082 = srem i32 %605, 4, !dbg !16336
  %cmp1083 = icmp eq i32 %rem1082, 0, !dbg !16336
  br i1 %cmp1083, label %land.rhs1085, label %land.end1094, !dbg !16336

land.rhs1085:                                     ; preds = %if.else1079
  %606 = load i32, i32* %year, align 4, !dbg !16336
  %rem1086 = srem i32 %606, 100, !dbg !16336
  %cmp1087 = icmp ne i32 %rem1086, 0, !dbg !16336
  br i1 %cmp1087, label %lor.end1093, label %lor.rhs1089, !dbg !16336

lor.rhs1089:                                      ; preds = %land.rhs1085
  %607 = load i32, i32* %year, align 4, !dbg !16336
  %rem1090 = srem i32 %607, 400, !dbg !16336
  %cmp1091 = icmp eq i32 %rem1090, 0, !dbg !16336
  br label %lor.end1093, !dbg !16336

lor.end1093:                                      ; preds = %lor.rhs1089, %land.rhs1085
  %608 = phi i1 [ true, %land.rhs1085 ], [ %cmp1091, %lor.rhs1089 ]
  br label %land.end1094

land.end1094:                                     ; preds = %lor.end1093, %if.else1079
  %609 = phi i1 [ false, %if.else1079 ], [ %608, %lor.end1093 ], !dbg !16337
  %land.ext1095 = zext i1 %609 to i32, !dbg !16336
  %add1096 = add nsw i32 365, %land.ext1095, !dbg !16338
  %sub1097 = sub nsw i32 %604, %add1096, !dbg !16339
  %610 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16340
  %tm_wday1098 = getelementptr inbounds %struct.tm, %struct.tm* %610, i32 0, i32 6, !dbg !16341, !ctir !15283
  %611 = load i32, i32* %tm_wday1098, align 8, !dbg !16341, !ctir !27
  %call1099 = call i32 @iso_week_days(i32 %sub1097, i32 %611), !dbg !16342
  store i32 %call1099, i32* %d1080, align 4, !dbg !16333
  %612 = load i32, i32* %d1080, align 4, !dbg !16343
  %cmp1100 = icmp sle i32 0, %612, !dbg !16345
  br i1 %cmp1100, label %if.then1102, label %if.end1103, !dbg !16346

if.then1102:                                      ; preds = %land.end1094
  store i32 1, i32* %year_adjust, align 4, !dbg !16347
  %613 = load i32, i32* %d1080, align 4, !dbg !16349
  store i32 %613, i32* %days, align 4, !dbg !16350
  br label %if.end1103, !dbg !16351

if.end1103:                                       ; preds = %if.then1102, %land.end1094
  br label %if.end1104

if.end1104:                                       ; preds = %if.end1103, %land.end1073
  %614 = load i8*, i8** %f, align 8, !dbg !16352
  %615 = load i8, i8* %614, align 1, !dbg !16353, !ctir !147
  %conv1105 = sext i8 %615 to i32, !dbg !16353
  switch i32 %conv1105, label %sw.default1142 [
    i32 103, label %sw.bb1106
    i32 71, label %sw.bb1130
  ], !dbg !16354

sw.bb1106:                                        ; preds = %if.end1104
  call void @llvm.dbg.declare(metadata i32* %yy, metadata !16355, metadata !DIExpression()), !dbg !16358
  %616 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16359
  %tm_year1107 = getelementptr inbounds %struct.tm, %struct.tm* %616, i32 0, i32 5, !dbg !16360, !ctir !15283
  %617 = load i32, i32* %tm_year1107, align 4, !dbg !16360, !ctir !27
  %rem1108 = srem i32 %617, 100, !dbg !16361
  %618 = load i32, i32* %year_adjust, align 4, !dbg !16362
  %add1109 = add nsw i32 %rem1108, %618, !dbg !16363
  %rem1110 = srem i32 %add1109, 100, !dbg !16364
  store i32 %rem1110, i32* %yy, align 4, !dbg !16358
  br label %do.body1111, !dbg !16365

do.body1111:                                      ; preds = %sw.bb1106
  store i32 2, i32* %digits, align 4, !dbg !16366
  store i8 0, i8* %negative_number, align 1, !dbg !16366
  %619 = load i32, i32* %yy, align 4, !dbg !16366
  %cmp1112 = icmp sle i32 0, %619, !dbg !16366
  br i1 %cmp1112, label %cond.true1114, label %cond.false1115, !dbg !16366

cond.true1114:                                    ; preds = %do.body1111
  %620 = load i32, i32* %yy, align 4, !dbg !16366
  br label %cond.end1126, !dbg !16366

cond.false1115:                                   ; preds = %do.body1111
  %621 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16366
  %tm_year1116 = getelementptr inbounds %struct.tm, %struct.tm* %621, i32 0, i32 5, !dbg !16366, !ctir !15283
  %622 = load i32, i32* %tm_year1116, align 4, !dbg !16366, !ctir !27
  %623 = load i32, i32* %year_adjust, align 4, !dbg !16366
  %sub1117 = sub nsw i32 -1900, %623, !dbg !16366
  %cmp1118 = icmp slt i32 %622, %sub1117, !dbg !16366
  br i1 %cmp1118, label %cond.true1120, label %cond.false1122, !dbg !16366

cond.true1120:                                    ; preds = %cond.false1115
  %624 = load i32, i32* %yy, align 4, !dbg !16366
  %sub1121 = sub nsw i32 0, %624, !dbg !16366
  br label %cond.end1124, !dbg !16366

cond.false1122:                                   ; preds = %cond.false1115
  %625 = load i32, i32* %yy, align 4, !dbg !16366
  %add1123 = add nsw i32 %625, 100, !dbg !16366
  br label %cond.end1124, !dbg !16366

cond.end1124:                                     ; preds = %cond.false1122, %cond.true1120
  %cond1125 = phi i32 [ %sub1121, %cond.true1120 ], [ %add1123, %cond.false1122 ], !dbg !16366
  br label %cond.end1126, !dbg !16366

cond.end1126:                                     ; preds = %cond.end1124, %cond.true1114
  %cond1127 = phi i32 [ %620, %cond.true1114 ], [ %cond1125, %cond.end1124 ], !dbg !16366
  store i32 %cond1127, i32* %u_number_value, align 4, !dbg !16366
  br label %do_yearish, !dbg !16366

do.end1129:                                       ; No predecessors!
  br label %sw.bb1130, !dbg !16368

sw.bb1130:                                        ; preds = %if.end1104, %do.end1129
  br label %do.body1131, !dbg !16369

do.body1131:                                      ; preds = %sw.bb1130
  store i32 4, i32* %digits, align 4, !dbg !16370
  %626 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16370
  %tm_year1132 = getelementptr inbounds %struct.tm, %struct.tm* %626, i32 0, i32 5, !dbg !16370, !ctir !15283
  %627 = load i32, i32* %tm_year1132, align 4, !dbg !16370, !ctir !27
  %628 = load i32, i32* %year_adjust, align 4, !dbg !16370
  %sub1133 = sub nsw i32 -1900, %628, !dbg !16370
  %cmp1134 = icmp slt i32 %627, %sub1133, !dbg !16370
  %frombool1136 = zext i1 %cmp1134 to i8, !dbg !16370
  store i8 %frombool1136, i8* %negative_number, align 1, !dbg !16370
  %629 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16370
  %tm_year1137 = getelementptr inbounds %struct.tm, %struct.tm* %629, i32 0, i32 5, !dbg !16370, !ctir !15283
  %630 = load i32, i32* %tm_year1137, align 4, !dbg !16370, !ctir !27
  %add1138 = add i32 %630, 1900, !dbg !16370
  %631 = load i32, i32* %year_adjust, align 4, !dbg !16370
  %add1139 = add i32 %add1138, %631, !dbg !16370
  store i32 %add1139, i32* %u_number_value, align 4, !dbg !16370
  br label %do_yearish, !dbg !16370

do.end1141:                                       ; No predecessors!
  br label %sw.default1142, !dbg !16370

sw.default1142:                                   ; preds = %if.end1104, %do.end1141
  br label %do.body1143, !dbg !16372

do.body1143:                                      ; preds = %sw.default1142
  store i32 2, i32* %digits, align 4, !dbg !16373
  %632 = load i32, i32* %days, align 4, !dbg !16373
  %div1144 = sdiv i32 %632, 7, !dbg !16373
  %add1145 = add nsw i32 %div1144, 1, !dbg !16373
  store i32 %add1145, i32* %number_value, align 4, !dbg !16373
  br label %do_number, !dbg !16373

do.end1147:                                       ; No predecessors!
  br label %sw.epilog1148, !dbg !16375

sw.epilog1148:                                    ; preds = %do.end1147
  br label %sw.bb1149, !dbg !16376

sw.bb1149:                                        ; preds = %sw.epilog87, %sw.epilog1148
  %633 = load i32, i32* %modifier, align 4, !dbg !16377
  %cmp1150 = icmp eq i32 %633, 69, !dbg !16379
  br i1 %cmp1150, label %if.then1152, label %if.end1153, !dbg !16380

if.then1152:                                      ; preds = %sw.bb1149
  br label %bad_format, !dbg !16381

if.end1153:                                       ; preds = %sw.bb1149
  br label %do.body1154, !dbg !16382

do.body1154:                                      ; preds = %if.end1153
  store i32 2, i32* %digits, align 4, !dbg !16383
  %634 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16383
  %tm_yday1155 = getelementptr inbounds %struct.tm, %struct.tm* %634, i32 0, i32 7, !dbg !16383, !ctir !15283
  %635 = load i32, i32* %tm_yday1155, align 4, !dbg !16383, !ctir !27
  %636 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16383
  %tm_wday1156 = getelementptr inbounds %struct.tm, %struct.tm* %636, i32 0, i32 6, !dbg !16383, !ctir !15283
  %637 = load i32, i32* %tm_wday1156, align 8, !dbg !16383, !ctir !27
  %sub1157 = sub nsw i32 %637, 1, !dbg !16383
  %add1158 = add nsw i32 %sub1157, 7, !dbg !16383
  %rem1159 = srem i32 %add1158, 7, !dbg !16383
  %sub1160 = sub nsw i32 %635, %rem1159, !dbg !16383
  %add1161 = add nsw i32 %sub1160, 7, !dbg !16383
  %div1162 = sdiv i32 %add1161, 7, !dbg !16383
  store i32 %div1162, i32* %number_value, align 4, !dbg !16383
  br label %do_number, !dbg !16383

do.end1164:                                       ; No predecessors!
  br label %sw.bb1165, !dbg !16383

sw.bb1165:                                        ; preds = %sw.epilog87, %do.end1164
  %638 = load i32, i32* %modifier, align 4, !dbg !16385
  %cmp1166 = icmp eq i32 %638, 69, !dbg !16387
  br i1 %cmp1166, label %if.then1168, label %if.end1169, !dbg !16388

if.then1168:                                      ; preds = %sw.bb1165
  br label %bad_format, !dbg !16389

if.end1169:                                       ; preds = %sw.bb1165
  br label %do.body1170, !dbg !16390

do.body1170:                                      ; preds = %if.end1169
  store i32 1, i32* %digits, align 4, !dbg !16391
  %639 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16391
  %tm_wday1171 = getelementptr inbounds %struct.tm, %struct.tm* %639, i32 0, i32 6, !dbg !16391, !ctir !15283
  %640 = load i32, i32* %tm_wday1171, align 8, !dbg !16391, !ctir !27
  store i32 %640, i32* %number_value, align 4, !dbg !16391
  br label %do_number, !dbg !16391

do.end1173:                                       ; No predecessors!
  br label %sw.bb1174, !dbg !16391

sw.bb1174:                                        ; preds = %sw.epilog87, %do.end1173
  %641 = load i32, i32* %modifier, align 4, !dbg !16393
  %cmp1175 = icmp eq i32 %641, 69, !dbg !16395
  br i1 %cmp1175, label %if.then1177, label %if.end1178, !dbg !16396

if.then1177:                                      ; preds = %sw.bb1174
  br label %underlying_strftime, !dbg !16397

if.end1178:                                       ; preds = %sw.bb1174
  %642 = load i32, i32* %modifier, align 4, !dbg !16399
  %cmp1179 = icmp eq i32 %642, 79, !dbg !16401
  br i1 %cmp1179, label %if.then1181, label %if.end1182, !dbg !16402

if.then1181:                                      ; preds = %if.end1178
  br label %bad_format, !dbg !16403

if.end1182:                                       ; preds = %if.end1178
  br label %do.body1183, !dbg !16404

do.body1183:                                      ; preds = %if.end1182
  store i32 4, i32* %digits, align 4, !dbg !16405
  %643 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16405
  %tm_year1184 = getelementptr inbounds %struct.tm, %struct.tm* %643, i32 0, i32 5, !dbg !16405, !ctir !15283
  %644 = load i32, i32* %tm_year1184, align 4, !dbg !16405, !ctir !27
  %cmp1185 = icmp slt i32 %644, -1900, !dbg !16405
  %frombool1187 = zext i1 %cmp1185 to i8, !dbg !16405
  store i8 %frombool1187, i8* %negative_number, align 1, !dbg !16405
  %645 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16405
  %tm_year1188 = getelementptr inbounds %struct.tm, %struct.tm* %645, i32 0, i32 5, !dbg !16405, !ctir !15283
  %646 = load i32, i32* %tm_year1188, align 4, !dbg !16405, !ctir !27
  %add1189 = add i32 %646, 1900, !dbg !16405
  store i32 %add1189, i32* %u_number_value, align 4, !dbg !16405
  br label %do_yearish, !dbg !16405

do.end1191:                                       ; No predecessors!
  br label %sw.bb1192, !dbg !16405

sw.bb1192:                                        ; preds = %sw.epilog87, %do.end1191
  %647 = load i32, i32* %modifier, align 4, !dbg !16407
  %cmp1193 = icmp eq i32 %647, 69, !dbg !16409
  br i1 %cmp1193, label %if.then1195, label %if.end1196, !dbg !16410

if.then1195:                                      ; preds = %sw.bb1192
  br label %underlying_strftime, !dbg !16411

if.end1196:                                       ; preds = %sw.bb1192
  call void @llvm.dbg.declare(metadata i32* %yy1197, metadata !16413, metadata !DIExpression()), !dbg !16415
  %648 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16416
  %tm_year1198 = getelementptr inbounds %struct.tm, %struct.tm* %648, i32 0, i32 5, !dbg !16417, !ctir !15283
  %649 = load i32, i32* %tm_year1198, align 4, !dbg !16417, !ctir !27
  %rem1199 = srem i32 %649, 100, !dbg !16418
  store i32 %rem1199, i32* %yy1197, align 4, !dbg !16415
  %650 = load i32, i32* %yy1197, align 4, !dbg !16419
  %cmp1200 = icmp slt i32 %650, 0, !dbg !16421
  br i1 %cmp1200, label %if.then1202, label %if.end1212, !dbg !16422

if.then1202:                                      ; preds = %if.end1196
  %651 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16423
  %tm_year1203 = getelementptr inbounds %struct.tm, %struct.tm* %651, i32 0, i32 5, !dbg !16424, !ctir !15283
  %652 = load i32, i32* %tm_year1203, align 4, !dbg !16424, !ctir !27
  %cmp1204 = icmp slt i32 %652, -1900, !dbg !16425
  br i1 %cmp1204, label %cond.true1206, label %cond.false1208, !dbg !16423

cond.true1206:                                    ; preds = %if.then1202
  %653 = load i32, i32* %yy1197, align 4, !dbg !16426
  %sub1207 = sub nsw i32 0, %653, !dbg !16427
  br label %cond.end1210, !dbg !16423

cond.false1208:                                   ; preds = %if.then1202
  %654 = load i32, i32* %yy1197, align 4, !dbg !16428
  %add1209 = add nsw i32 %654, 100, !dbg !16429
  br label %cond.end1210, !dbg !16423

cond.end1210:                                     ; preds = %cond.false1208, %cond.true1206
  %cond1211 = phi i32 [ %sub1207, %cond.true1206 ], [ %add1209, %cond.false1208 ], !dbg !16423
  store i32 %cond1211, i32* %yy1197, align 4, !dbg !16430
  br label %if.end1212, !dbg !16431

if.end1212:                                       ; preds = %cond.end1210, %if.end1196
  br label %do.body1213, !dbg !16432

do.body1213:                                      ; preds = %if.end1212
  store i32 2, i32* %digits, align 4, !dbg !16433
  store i8 0, i8* %negative_number, align 1, !dbg !16433
  %655 = load i32, i32* %yy1197, align 4, !dbg !16433
  store i32 %655, i32* %u_number_value, align 4, !dbg !16433
  br label %do_yearish, !dbg !16433

do.end1215:                                       ; No predecessors!
  br label %sw.bb1216, !dbg !16435

sw.bb1216:                                        ; preds = %sw.epilog87, %do.end1215
  %656 = load i8, i8* %change_case, align 1, !dbg !16436
  %tobool1217 = trunc i8 %656 to i1, !dbg !16436
  br i1 %tobool1217, label %if.then1218, label %if.end1219, !dbg !16438

if.then1218:                                      ; preds = %sw.bb1216
  store i8 0, i8* %to_uppcase, align 1, !dbg !16439
  store i8 1, i8* %to_lowcase, align 1, !dbg !16441
  br label %if.end1219, !dbg !16442

if.end1219:                                       ; preds = %if.then1218, %sw.bb1216
  br label %do.body1220, !dbg !16443

do.body1220:                                      ; preds = %if.end1219
  call void @llvm.dbg.declare(metadata i64* %_n1221, metadata !16444, metadata !DIExpression()), !dbg !16446
  %657 = load i8*, i8** %zone, align 8, !dbg !16446
  %call1222 = call i64 @strlen(i8* %657) #16, !dbg !16446
  store i64 %call1222, i64* %_n1221, align 8, !dbg !16446
  call void @llvm.dbg.declare(metadata i64* %_w1223, metadata !16447, metadata !DIExpression()), !dbg !16446
  %658 = load i32, i32* %width.addr, align 4, !dbg !16446
  %cmp1224 = icmp slt i32 %658, 0, !dbg !16446
  br i1 %cmp1224, label %cond.true1226, label %cond.false1227, !dbg !16446

cond.true1226:                                    ; preds = %do.body1220
  br label %cond.end1228, !dbg !16446

cond.false1227:                                   ; preds = %do.body1220
  %659 = load i32, i32* %width.addr, align 4, !dbg !16446
  br label %cond.end1228, !dbg !16446

cond.end1228:                                     ; preds = %cond.false1227, %cond.true1226
  %cond1229 = phi i32 [ 0, %cond.true1226 ], [ %659, %cond.false1227 ], !dbg !16446
  %conv1230 = sext i32 %cond1229 to i64, !dbg !16446
  store i64 %conv1230, i64* %_w1223, align 8, !dbg !16446
  call void @llvm.dbg.declare(metadata i64* %_incr1231, metadata !16448, metadata !DIExpression()), !dbg !16446
  %660 = load i64, i64* %_n1221, align 8, !dbg !16446
  %661 = load i64, i64* %_w1223, align 8, !dbg !16446
  %cmp1232 = icmp ult i64 %660, %661, !dbg !16446
  br i1 %cmp1232, label %cond.true1234, label %cond.false1235, !dbg !16446

cond.true1234:                                    ; preds = %cond.end1228
  %662 = load i64, i64* %_w1223, align 8, !dbg !16446
  br label %cond.end1236, !dbg !16446

cond.false1235:                                   ; preds = %cond.end1228
  %663 = load i64, i64* %_n1221, align 8, !dbg !16446
  br label %cond.end1236, !dbg !16446

cond.end1236:                                     ; preds = %cond.false1235, %cond.true1234
  %cond1237 = phi i64 [ %662, %cond.true1234 ], [ %663, %cond.false1235 ], !dbg !16446
  store i64 %cond1237, i64* %_incr1231, align 8, !dbg !16446
  %664 = load i64, i64* %_incr1231, align 8, !dbg !16449
  %665 = load i64, i64* %maxsize.addr, align 8, !dbg !16449
  %666 = load i64, i64* %i, align 8, !dbg !16449
  %sub1238 = sub i64 %665, %666, !dbg !16449
  %cmp1239 = icmp uge i64 %664, %sub1238, !dbg !16449
  br i1 %cmp1239, label %if.then1241, label %if.end1242, !dbg !16446

if.then1241:                                      ; preds = %cond.end1236
  store i64 0, i64* %retval, align 8, !dbg !16449
  br label %return, !dbg !16449

if.end1242:                                       ; preds = %cond.end1236
  %667 = load i8*, i8** %p, align 8, !dbg !16451
  %tobool1243 = icmp ne i8* %667, null, !dbg !16451
  br i1 %tobool1243, label %if.then1244, label %if.end1276, !dbg !16446

if.then1244:                                      ; preds = %if.end1242
  %668 = load i32, i32* %digits, align 4, !dbg !16453
  %cmp1245 = icmp eq i32 %668, 0, !dbg !16453
  br i1 %cmp1245, label %land.lhs.true1247, label %if.end1264, !dbg !16453

land.lhs.true1247:                                ; preds = %if.then1244
  %669 = load i64, i64* %_n1221, align 8, !dbg !16453
  %670 = load i64, i64* %_w1223, align 8, !dbg !16453
  %cmp1248 = icmp ult i64 %669, %670, !dbg !16453
  br i1 %cmp1248, label %if.then1250, label %if.end1264, !dbg !16456

if.then1250:                                      ; preds = %land.lhs.true1247
  call void @llvm.dbg.declare(metadata i64* %_delta1251, metadata !16457, metadata !DIExpression()), !dbg !16459
  %671 = load i32, i32* %width.addr, align 4, !dbg !16459
  %conv1252 = sext i32 %671 to i64, !dbg !16459
  %672 = load i64, i64* %_n1221, align 8, !dbg !16459
  %sub1253 = sub i64 %conv1252, %672, !dbg !16459
  store i64 %sub1253, i64* %_delta1251, align 8, !dbg !16459
  %673 = load i32, i32* %pad, align 4, !dbg !16460
  %cmp1254 = icmp eq i32 %673, 48, !dbg !16460
  br i1 %cmp1254, label %if.then1259, label %lor.lhs.false1256, !dbg !16460

lor.lhs.false1256:                                ; preds = %if.then1250
  %674 = load i32, i32* %pad, align 4, !dbg !16460
  %cmp1257 = icmp eq i32 %674, 43, !dbg !16460
  br i1 %cmp1257, label %if.then1259, label %if.else1261, !dbg !16459

if.then1259:                                      ; preds = %lor.lhs.false1256, %if.then1250
  %675 = load i8*, i8** %p, align 8, !dbg !16460
  %676 = load i64, i64* %_delta1251, align 8, !dbg !16460
  call void @llvm.memset.p0i8.i64(i8* align 1 %675, i8 48, i64 %676, i1 false), !dbg !16460
  %677 = load i64, i64* %_delta1251, align 8, !dbg !16460
  %678 = load i8*, i8** %p, align 8, !dbg !16460
  %add.ptr1260 = getelementptr inbounds i8, i8* %678, i64 %677, !dbg !16460, !ctir !144
  store i8* %add.ptr1260, i8** %p, align 8, !dbg !16460
  br label %if.end1263, !dbg !16460

if.else1261:                                      ; preds = %lor.lhs.false1256
  %679 = load i8*, i8** %p, align 8, !dbg !16460
  %680 = load i64, i64* %_delta1251, align 8, !dbg !16460
  call void @llvm.memset.p0i8.i64(i8* align 1 %679, i8 32, i64 %680, i1 false), !dbg !16460
  %681 = load i64, i64* %_delta1251, align 8, !dbg !16460
  %682 = load i8*, i8** %p, align 8, !dbg !16460
  %add.ptr1262 = getelementptr inbounds i8, i8* %682, i64 %681, !dbg !16460, !ctir !144
  store i8* %add.ptr1262, i8** %p, align 8, !dbg !16460
  br label %if.end1263

if.end1263:                                       ; preds = %if.else1261, %if.then1259
  br label %if.end1264, !dbg !16459

if.end1264:                                       ; preds = %if.end1263, %land.lhs.true1247, %if.then1244
  %683 = load i8, i8* %to_lowcase, align 1, !dbg !16462
  %tobool1265 = trunc i8 %683 to i1, !dbg !16462
  br i1 %tobool1265, label %if.then1266, label %if.else1268, !dbg !16456

if.then1266:                                      ; preds = %if.end1264
  %684 = load i8*, i8** %p, align 8, !dbg !16462
  %685 = load i8*, i8** %zone, align 8, !dbg !16462
  %686 = load i64, i64* %_n1221, align 8, !dbg !16462
  %call1267 = call i8* @memcpy_lowcase(i8* %684, i8* %685, i64 %686), !dbg !16462
  br label %if.end1274, !dbg !16462

if.else1268:                                      ; preds = %if.end1264
  %687 = load i8, i8* %to_uppcase, align 1, !dbg !16464
  %tobool1269 = trunc i8 %687 to i1, !dbg !16464
  br i1 %tobool1269, label %if.then1270, label %if.else1272, !dbg !16462

if.then1270:                                      ; preds = %if.else1268
  %688 = load i8*, i8** %p, align 8, !dbg !16464
  %689 = load i8*, i8** %zone, align 8, !dbg !16464
  %690 = load i64, i64* %_n1221, align 8, !dbg !16464
  %call1271 = call i8* @memcpy_uppcase(i8* %688, i8* %689, i64 %690), !dbg !16464
  br label %if.end1273, !dbg !16464

if.else1272:                                      ; preds = %if.else1268
  %691 = load i8*, i8** %p, align 8, !dbg !16464
  %692 = load i8*, i8** %zone, align 8, !dbg !16464
  %693 = load i64, i64* %_n1221, align 8, !dbg !16464
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %691, i8* align 1 %692, i64 %693, i1 false), !dbg !16464
  br label %if.end1273

if.end1273:                                       ; preds = %if.else1272, %if.then1270
  br label %if.end1274

if.end1274:                                       ; preds = %if.end1273, %if.then1266
  %694 = load i64, i64* %_n1221, align 8, !dbg !16456
  %695 = load i8*, i8** %p, align 8, !dbg !16456
  %add.ptr1275 = getelementptr inbounds i8, i8* %695, i64 %694, !dbg !16456, !ctir !144
  store i8* %add.ptr1275, i8** %p, align 8, !dbg !16456
  br label %if.end1276, !dbg !16456

if.end1276:                                       ; preds = %if.end1274, %if.end1242
  %696 = load i64, i64* %_incr1231, align 8, !dbg !16446
  %697 = load i64, i64* %i, align 8, !dbg !16446
  %add1277 = add i64 %697, %696, !dbg !16446
  store i64 %add1277, i64* %i, align 8, !dbg !16446
  br label %do.end1279, !dbg !16446

do.end1279:                                       ; preds = %if.end1276
  br label %sw.epilog1435, !dbg !16466

sw.bb1280:                                        ; preds = %sw.epilog87
  store i64 1, i64* %colons, align 8, !dbg !16467
  br label %for.cond1281, !dbg !16469

for.cond1281:                                     ; preds = %for.inc1286, %sw.bb1280
  %698 = load i8*, i8** %f, align 8, !dbg !16470
  %699 = load i64, i64* %colons, align 8, !dbg !16472
  %arrayidx = getelementptr inbounds i8, i8* %698, i64 %699, !dbg !16470, !ctir !146
  %700 = load i8, i8* %arrayidx, align 1, !dbg !16470
  %conv1282 = sext i8 %700 to i32, !dbg !16470
  %cmp1283 = icmp eq i32 %conv1282, 58, !dbg !16473
  br i1 %cmp1283, label %for.body1285, label %for.end1288, !dbg !16474

for.body1285:                                     ; preds = %for.cond1281
  br label %for.inc1286, !dbg !16475

for.inc1286:                                      ; preds = %for.body1285
  %701 = load i64, i64* %colons, align 8, !dbg !16476
  %inc1287 = add i64 %701, 1, !dbg !16476
  store i64 %inc1287, i64* %colons, align 8, !dbg !16476
  br label %for.cond1281, !dbg !16477, !llvm.loop !16478

for.end1288:                                      ; preds = %for.cond1281
  %702 = load i8*, i8** %f, align 8, !dbg !16480
  %703 = load i64, i64* %colons, align 8, !dbg !16482
  %arrayidx1289 = getelementptr inbounds i8, i8* %702, i64 %703, !dbg !16480, !ctir !146
  %704 = load i8, i8* %arrayidx1289, align 1, !dbg !16480
  %conv1290 = sext i8 %704 to i32, !dbg !16480
  %cmp1291 = icmp ne i32 %conv1290, 122, !dbg !16483
  br i1 %cmp1291, label %if.then1293, label %if.end1294, !dbg !16484

if.then1293:                                      ; preds = %for.end1288
  br label %bad_format, !dbg !16485

if.end1294:                                       ; preds = %for.end1288
  %705 = load i64, i64* %colons, align 8, !dbg !16486
  %706 = load i8*, i8** %f, align 8, !dbg !16487
  %add.ptr1295 = getelementptr inbounds i8, i8* %706, i64 %705, !dbg !16487, !ctir !147
  store i8* %add.ptr1295, i8** %f, align 8, !dbg !16487
  br label %do_z_conversion, !dbg !16488

sw.bb1296:                                        ; preds = %sw.epilog87
  store i64 0, i64* %colons, align 8, !dbg !16489
  br label %do_z_conversion, !dbg !16490

do_z_conversion:                                  ; preds = %sw.bb1296, %if.end1294
  call void @llvm.dbg.label(metadata !16491), !dbg !16492
  %707 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16493
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %707, i32 0, i32 8, !dbg !16495, !ctir !15283
  %708 = load i32, i32* %tm_isdst, align 8, !dbg !16495, !ctir !27
  %cmp1297 = icmp slt i32 %708, 0, !dbg !16496
  br i1 %cmp1297, label %if.then1299, label %if.end1300, !dbg !16497

if.then1299:                                      ; preds = %do_z_conversion
  br label %sw.epilog1435, !dbg !16498

if.end1300:                                       ; preds = %do_z_conversion
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !16499, metadata !DIExpression()), !dbg !16501
  call void @llvm.dbg.declare(metadata i32* %hour_diff, metadata !16502, metadata !DIExpression()), !dbg !16503
  call void @llvm.dbg.declare(metadata i32* %min_diff, metadata !16504, metadata !DIExpression()), !dbg !16505
  call void @llvm.dbg.declare(metadata i32* %sec_diff, metadata !16506, metadata !DIExpression()), !dbg !16507
  %709 = load %struct.tm*, %struct.tm** %tp.addr, align 8, !dbg !16508
  %tm_gmtoff = getelementptr inbounds %struct.tm, %struct.tm* %709, i32 0, i32 9, !dbg !16509, !ctir !15283
  %710 = load i64, i64* %tm_gmtoff, align 8, !dbg !16509, !ctir !166
  %conv1301 = trunc i64 %710 to i32, !dbg !16508
  store i32 %conv1301, i32* %diff, align 4, !dbg !16510
  %711 = load i32, i32* %diff, align 4, !dbg !16511
  %cmp1302 = icmp slt i32 %711, 0, !dbg !16512
  br i1 %cmp1302, label %lor.end1313, label %lor.rhs1304, !dbg !16513

lor.rhs1304:                                      ; preds = %if.end1300
  %712 = load i32, i32* %diff, align 4, !dbg !16514
  %cmp1305 = icmp eq i32 %712, 0, !dbg !16515
  br i1 %cmp1305, label %land.rhs1307, label %land.end1311, !dbg !16516

land.rhs1307:                                     ; preds = %lor.rhs1304
  %713 = load i8*, i8** %zone, align 8, !dbg !16517
  %714 = load i8, i8* %713, align 1, !dbg !16518, !ctir !147
  %conv1308 = sext i8 %714 to i32, !dbg !16518
  %cmp1309 = icmp eq i32 %conv1308, 45, !dbg !16519
  br label %land.end1311

land.end1311:                                     ; preds = %land.rhs1307, %lor.rhs1304
  %715 = phi i1 [ false, %lor.rhs1304 ], [ %cmp1309, %land.rhs1307 ], !dbg !16520
  br label %lor.end1313, !dbg !16513

lor.end1313:                                      ; preds = %land.end1311, %if.end1300
  %716 = phi i1 [ true, %if.end1300 ], [ %715, %land.end1311 ]
  %frombool1314 = zext i1 %716 to i8, !dbg !16521
  store i8 %frombool1314, i8* %negative_number, align 1, !dbg !16521
  %717 = load i32, i32* %diff, align 4, !dbg !16522
  %div1315 = sdiv i32 %717, 60, !dbg !16523
  %div1316 = sdiv i32 %div1315, 60, !dbg !16524
  store i32 %div1316, i32* %hour_diff, align 4, !dbg !16525
  %718 = load i32, i32* %diff, align 4, !dbg !16526
  %div1317 = sdiv i32 %718, 60, !dbg !16527
  %rem1318 = srem i32 %div1317, 60, !dbg !16528
  store i32 %rem1318, i32* %min_diff, align 4, !dbg !16529
  %719 = load i32, i32* %diff, align 4, !dbg !16530
  %rem1319 = srem i32 %719, 60, !dbg !16531
  store i32 %rem1319, i32* %sec_diff, align 4, !dbg !16532
  %720 = load i64, i64* %colons, align 8, !dbg !16533
  switch i64 %720, label %sw.default1352 [
    i64 0, label %sw.bb1320
    i64 1, label %sw.bb1326
    i64 2, label %sw.bb1332
    i64 3, label %sw.bb1340
  ], !dbg !16534

sw.bb1320:                                        ; preds = %lor.end1313
  br label %do.body1321, !dbg !16535

do.body1321:                                      ; preds = %sw.bb1320
  store i32 5, i32* %digits, align 4, !dbg !16537
  store i32 0, i32* %tz_colon_mask, align 4, !dbg !16537
  %721 = load i32, i32* %hour_diff, align 4, !dbg !16537
  %mul1322 = mul nsw i32 %721, 100, !dbg !16537
  %722 = load i32, i32* %min_diff, align 4, !dbg !16537
  %add1323 = add nsw i32 %mul1322, %722, !dbg !16537
  store i32 %add1323, i32* %u_number_value, align 4, !dbg !16537
  br label %do_tz_offset, !dbg !16537

do.end1325:                                       ; No predecessors!
  br label %sw.bb1326, !dbg !16537

sw.bb1326:                                        ; preds = %lor.end1313, %do.end1325
  br label %tz_hh_mm, !dbg !16537

tz_hh_mm:                                         ; preds = %if.then1347, %sw.bb1326
  call void @llvm.dbg.label(metadata !16539), !dbg !16540
  br label %do.body1327, !dbg !16541

do.body1327:                                      ; preds = %tz_hh_mm
  store i32 6, i32* %digits, align 4, !dbg !16542
  store i32 4, i32* %tz_colon_mask, align 4, !dbg !16542
  %723 = load i32, i32* %hour_diff, align 4, !dbg !16542
  %mul1328 = mul nsw i32 %723, 100, !dbg !16542
  %724 = load i32, i32* %min_diff, align 4, !dbg !16542
  %add1329 = add nsw i32 %mul1328, %724, !dbg !16542
  store i32 %add1329, i32* %u_number_value, align 4, !dbg !16542
  br label %do_tz_offset, !dbg !16542

do.end1331:                                       ; No predecessors!
  br label %sw.bb1332, !dbg !16542

sw.bb1332:                                        ; preds = %lor.end1313, %do.end1331
  br label %tz_hh_mm_ss, !dbg !16542

tz_hh_mm_ss:                                      ; preds = %if.then1343, %sw.bb1332
  call void @llvm.dbg.label(metadata !16544), !dbg !16545
  br label %do.body1333, !dbg !16546

do.body1333:                                      ; preds = %tz_hh_mm_ss
  store i32 9, i32* %digits, align 4, !dbg !16547
  store i32 20, i32* %tz_colon_mask, align 4, !dbg !16547
  %725 = load i32, i32* %hour_diff, align 4, !dbg !16547
  %mul1334 = mul nsw i32 %725, 10000, !dbg !16547
  %726 = load i32, i32* %min_diff, align 4, !dbg !16547
  %mul1335 = mul nsw i32 %726, 100, !dbg !16547
  %add1336 = add nsw i32 %mul1334, %mul1335, !dbg !16547
  %727 = load i32, i32* %sec_diff, align 4, !dbg !16547
  %add1337 = add nsw i32 %add1336, %727, !dbg !16547
  store i32 %add1337, i32* %u_number_value, align 4, !dbg !16547
  br label %do_tz_offset, !dbg !16547

do.end1339:                                       ; No predecessors!
  br label %sw.bb1340, !dbg !16547

sw.bb1340:                                        ; preds = %lor.end1313, %do.end1339
  %728 = load i32, i32* %sec_diff, align 4, !dbg !16549
  %cmp1341 = icmp ne i32 %728, 0, !dbg !16551
  br i1 %cmp1341, label %if.then1343, label %if.end1344, !dbg !16552

if.then1343:                                      ; preds = %sw.bb1340
  br label %tz_hh_mm_ss, !dbg !16553

if.end1344:                                       ; preds = %sw.bb1340
  %729 = load i32, i32* %min_diff, align 4, !dbg !16554
  %cmp1345 = icmp ne i32 %729, 0, !dbg !16556
  br i1 %cmp1345, label %if.then1347, label %if.end1348, !dbg !16557

if.then1347:                                      ; preds = %if.end1344
  br label %tz_hh_mm, !dbg !16558

if.end1348:                                       ; preds = %if.end1344
  br label %do.body1349, !dbg !16559

do.body1349:                                      ; preds = %if.end1348
  store i32 3, i32* %digits, align 4, !dbg !16560
  store i32 0, i32* %tz_colon_mask, align 4, !dbg !16560
  %730 = load i32, i32* %hour_diff, align 4, !dbg !16560
  store i32 %730, i32* %u_number_value, align 4, !dbg !16560
  br label %do_tz_offset, !dbg !16560

do.end1351:                                       ; No predecessors!
  br label %sw.default1352, !dbg !16560

sw.default1352:                                   ; preds = %lor.end1313, %do.end1351
  br label %bad_format, !dbg !16562

sw.bb1353:                                        ; preds = %sw.epilog87
  %731 = load i8*, i8** %f, align 8, !dbg !16563
  %incdec.ptr1354 = getelementptr inbounds i8, i8* %731, i32 -1, !dbg !16563, !ctir !147
  store i8* %incdec.ptr1354, i8** %f, align 8, !dbg !16563
  br label %sw.default1355, !dbg !16564

sw.default1355:                                   ; preds = %sw.epilog87, %sw.bb1353
  br label %bad_format, !dbg !16564

bad_format:                                       ; preds = %sw.default1355, %sw.default1352, %if.then1293, %if.then1181, %if.then1168, %if.then1152, %if.then1043, %if.then1030, %if.then966, %if.then933, %if.then850, %if.then837, %if.then829, %if.then816, %if.then808, %if.then799, %if.then791, %if.then782, %if.then764, %if.then357, %if.then349, %if.then344, %if.then339, %if.then178, %if.then170, %if.then165, %if.then154, %if.then146, %if.then92
  call void @llvm.dbg.label(metadata !16565), !dbg !16566
  call void @llvm.dbg.declare(metadata i32* %flen, metadata !16567, metadata !DIExpression()), !dbg !16569
  store i32 1, i32* %flen, align 4, !dbg !16570
  br label %for.cond1356, !dbg !16572

for.cond1356:                                     ; preds = %for.inc1363, %bad_format
  %732 = load i8*, i8** %f, align 8, !dbg !16573
  %733 = load i32, i32* %flen, align 4, !dbg !16575
  %sub1357 = sub nsw i32 1, %733, !dbg !16576
  %idxprom = sext i32 %sub1357 to i64, !dbg !16573
  %arrayidx1358 = getelementptr inbounds i8, i8* %732, i64 %idxprom, !dbg !16573, !ctir !146
  %734 = load i8, i8* %arrayidx1358, align 1, !dbg !16573
  %conv1359 = sext i8 %734 to i32, !dbg !16573
  %cmp1360 = icmp ne i32 %conv1359, 37, !dbg !16577
  br i1 %cmp1360, label %for.body1362, label %for.end1365, !dbg !16578

for.body1362:                                     ; preds = %for.cond1356
  br label %for.inc1363, !dbg !16579

for.inc1363:                                      ; preds = %for.body1362
  %735 = load i32, i32* %flen, align 4, !dbg !16580
  %inc1364 = add nsw i32 %735, 1, !dbg !16580
  store i32 %inc1364, i32* %flen, align 4, !dbg !16580
  br label %for.cond1356, !dbg !16581, !llvm.loop !16582

for.end1365:                                      ; preds = %for.cond1356
  br label %do.body1366, !dbg !16584

do.body1366:                                      ; preds = %for.end1365
  call void @llvm.dbg.declare(metadata i64* %_n1367, metadata !16585, metadata !DIExpression()), !dbg !16587
  %736 = load i32, i32* %flen, align 4, !dbg !16587
  %conv1368 = sext i32 %736 to i64, !dbg !16587
  store i64 %conv1368, i64* %_n1367, align 8, !dbg !16587
  call void @llvm.dbg.declare(metadata i64* %_w1369, metadata !16588, metadata !DIExpression()), !dbg !16587
  %737 = load i32, i32* %width.addr, align 4, !dbg !16587
  %cmp1370 = icmp slt i32 %737, 0, !dbg !16587
  br i1 %cmp1370, label %cond.true1372, label %cond.false1373, !dbg !16587

cond.true1372:                                    ; preds = %do.body1366
  br label %cond.end1374, !dbg !16587

cond.false1373:                                   ; preds = %do.body1366
  %738 = load i32, i32* %width.addr, align 4, !dbg !16587
  br label %cond.end1374, !dbg !16587

cond.end1374:                                     ; preds = %cond.false1373, %cond.true1372
  %cond1375 = phi i32 [ 0, %cond.true1372 ], [ %738, %cond.false1373 ], !dbg !16587
  %conv1376 = sext i32 %cond1375 to i64, !dbg !16587
  store i64 %conv1376, i64* %_w1369, align 8, !dbg !16587
  call void @llvm.dbg.declare(metadata i64* %_incr1377, metadata !16589, metadata !DIExpression()), !dbg !16587
  %739 = load i64, i64* %_n1367, align 8, !dbg !16587
  %740 = load i64, i64* %_w1369, align 8, !dbg !16587
  %cmp1378 = icmp ult i64 %739, %740, !dbg !16587
  br i1 %cmp1378, label %cond.true1380, label %cond.false1381, !dbg !16587

cond.true1380:                                    ; preds = %cond.end1374
  %741 = load i64, i64* %_w1369, align 8, !dbg !16587
  br label %cond.end1382, !dbg !16587

cond.false1381:                                   ; preds = %cond.end1374
  %742 = load i64, i64* %_n1367, align 8, !dbg !16587
  br label %cond.end1382, !dbg !16587

cond.end1382:                                     ; preds = %cond.false1381, %cond.true1380
  %cond1383 = phi i64 [ %741, %cond.true1380 ], [ %742, %cond.false1381 ], !dbg !16587
  store i64 %cond1383, i64* %_incr1377, align 8, !dbg !16587
  %743 = load i64, i64* %_incr1377, align 8, !dbg !16590
  %744 = load i64, i64* %maxsize.addr, align 8, !dbg !16590
  %745 = load i64, i64* %i, align 8, !dbg !16590
  %sub1384 = sub i64 %744, %745, !dbg !16590
  %cmp1385 = icmp uge i64 %743, %sub1384, !dbg !16590
  br i1 %cmp1385, label %if.then1387, label %if.end1388, !dbg !16587

if.then1387:                                      ; preds = %cond.end1382
  store i64 0, i64* %retval, align 8, !dbg !16590
  br label %return, !dbg !16590

if.end1388:                                       ; preds = %cond.end1382
  %746 = load i8*, i8** %p, align 8, !dbg !16592
  %tobool1389 = icmp ne i8* %746, null, !dbg !16592
  br i1 %tobool1389, label %if.then1390, label %if.end1431, !dbg !16587

if.then1390:                                      ; preds = %if.end1388
  %747 = load i32, i32* %digits, align 4, !dbg !16594
  %cmp1391 = icmp eq i32 %747, 0, !dbg !16594
  br i1 %cmp1391, label %land.lhs.true1393, label %if.end1410, !dbg !16594

land.lhs.true1393:                                ; preds = %if.then1390
  %748 = load i64, i64* %_n1367, align 8, !dbg !16594
  %749 = load i64, i64* %_w1369, align 8, !dbg !16594
  %cmp1394 = icmp ult i64 %748, %749, !dbg !16594
  br i1 %cmp1394, label %if.then1396, label %if.end1410, !dbg !16597

if.then1396:                                      ; preds = %land.lhs.true1393
  call void @llvm.dbg.declare(metadata i64* %_delta1397, metadata !16598, metadata !DIExpression()), !dbg !16600
  %750 = load i32, i32* %width.addr, align 4, !dbg !16600
  %conv1398 = sext i32 %750 to i64, !dbg !16600
  %751 = load i64, i64* %_n1367, align 8, !dbg !16600
  %sub1399 = sub i64 %conv1398, %751, !dbg !16600
  store i64 %sub1399, i64* %_delta1397, align 8, !dbg !16600
  %752 = load i32, i32* %pad, align 4, !dbg !16601
  %cmp1400 = icmp eq i32 %752, 48, !dbg !16601
  br i1 %cmp1400, label %if.then1405, label %lor.lhs.false1402, !dbg !16601

lor.lhs.false1402:                                ; preds = %if.then1396
  %753 = load i32, i32* %pad, align 4, !dbg !16601
  %cmp1403 = icmp eq i32 %753, 43, !dbg !16601
  br i1 %cmp1403, label %if.then1405, label %if.else1407, !dbg !16600

if.then1405:                                      ; preds = %lor.lhs.false1402, %if.then1396
  %754 = load i8*, i8** %p, align 8, !dbg !16601
  %755 = load i64, i64* %_delta1397, align 8, !dbg !16601
  call void @llvm.memset.p0i8.i64(i8* align 1 %754, i8 48, i64 %755, i1 false), !dbg !16601
  %756 = load i64, i64* %_delta1397, align 8, !dbg !16601
  %757 = load i8*, i8** %p, align 8, !dbg !16601
  %add.ptr1406 = getelementptr inbounds i8, i8* %757, i64 %756, !dbg !16601, !ctir !144
  store i8* %add.ptr1406, i8** %p, align 8, !dbg !16601
  br label %if.end1409, !dbg !16601

if.else1407:                                      ; preds = %lor.lhs.false1402
  %758 = load i8*, i8** %p, align 8, !dbg !16601
  %759 = load i64, i64* %_delta1397, align 8, !dbg !16601
  call void @llvm.memset.p0i8.i64(i8* align 1 %758, i8 32, i64 %759, i1 false), !dbg !16601
  %760 = load i64, i64* %_delta1397, align 8, !dbg !16601
  %761 = load i8*, i8** %p, align 8, !dbg !16601
  %add.ptr1408 = getelementptr inbounds i8, i8* %761, i64 %760, !dbg !16601, !ctir !144
  store i8* %add.ptr1408, i8** %p, align 8, !dbg !16601
  br label %if.end1409

if.end1409:                                       ; preds = %if.else1407, %if.then1405
  br label %if.end1410, !dbg !16600

if.end1410:                                       ; preds = %if.end1409, %land.lhs.true1393, %if.then1390
  %762 = load i8, i8* %to_lowcase, align 1, !dbg !16603
  %tobool1411 = trunc i8 %762 to i1, !dbg !16603
  br i1 %tobool1411, label %if.then1412, label %if.else1417, !dbg !16597

if.then1412:                                      ; preds = %if.end1410
  %763 = load i8*, i8** %p, align 8, !dbg !16603
  %764 = load i8*, i8** %f, align 8, !dbg !16603
  %765 = load i32, i32* %flen, align 4, !dbg !16603
  %sub1413 = sub nsw i32 1, %765, !dbg !16603
  %idxprom1414 = sext i32 %sub1413 to i64, !dbg !16603
  %arrayidx1415 = getelementptr inbounds i8, i8* %764, i64 %idxprom1414, !dbg !16603, !ctir !146
  %766 = load i64, i64* %_n1367, align 8, !dbg !16603
  %call1416 = call i8* @memcpy_lowcase(i8* %763, i8* %arrayidx1415, i64 %766), !dbg !16603
  br label %if.end1429, !dbg !16603

if.else1417:                                      ; preds = %if.end1410
  %767 = load i8, i8* %to_uppcase, align 1, !dbg !16605
  %tobool1418 = trunc i8 %767 to i1, !dbg !16605
  br i1 %tobool1418, label %if.then1419, label %if.else1424, !dbg !16603

if.then1419:                                      ; preds = %if.else1417
  %768 = load i8*, i8** %p, align 8, !dbg !16605
  %769 = load i8*, i8** %f, align 8, !dbg !16605
  %770 = load i32, i32* %flen, align 4, !dbg !16605
  %sub1420 = sub nsw i32 1, %770, !dbg !16605
  %idxprom1421 = sext i32 %sub1420 to i64, !dbg !16605
  %arrayidx1422 = getelementptr inbounds i8, i8* %769, i64 %idxprom1421, !dbg !16605, !ctir !146
  %771 = load i64, i64* %_n1367, align 8, !dbg !16605
  %call1423 = call i8* @memcpy_uppcase(i8* %768, i8* %arrayidx1422, i64 %771), !dbg !16605
  br label %if.end1428, !dbg !16605

if.else1424:                                      ; preds = %if.else1417
  %772 = load i8*, i8** %p, align 8, !dbg !16605
  %773 = load i8*, i8** %f, align 8, !dbg !16605
  %774 = load i32, i32* %flen, align 4, !dbg !16605
  %sub1425 = sub nsw i32 1, %774, !dbg !16605
  %idxprom1426 = sext i32 %sub1425 to i64, !dbg !16605
  %arrayidx1427 = getelementptr inbounds i8, i8* %773, i64 %idxprom1426, !dbg !16605, !ctir !146
  %775 = load i64, i64* %_n1367, align 8, !dbg !16605
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %772, i8* align 1 %arrayidx1427, i64 %775, i1 false), !dbg !16605
  br label %if.end1428

if.end1428:                                       ; preds = %if.else1424, %if.then1419
  br label %if.end1429

if.end1429:                                       ; preds = %if.end1428, %if.then1412
  %776 = load i64, i64* %_n1367, align 8, !dbg !16597
  %777 = load i8*, i8** %p, align 8, !dbg !16597
  %add.ptr1430 = getelementptr inbounds i8, i8* %777, i64 %776, !dbg !16597, !ctir !144
  store i8* %add.ptr1430, i8** %p, align 8, !dbg !16597
  br label %if.end1431, !dbg !16597

if.end1431:                                       ; preds = %if.end1429, %if.end1388
  %778 = load i64, i64* %_incr1377, align 8, !dbg !16587
  %779 = load i64, i64* %i, align 8, !dbg !16587
  %add1432 = add i64 %779, %778, !dbg !16587
  store i64 %add1432, i64* %i, align 8, !dbg !16587
  br label %do.end1434, !dbg !16587

do.end1434:                                       ; preds = %if.end1431
  br label %sw.epilog1435, !dbg !16607

sw.epilog1435:                                    ; preds = %do.end1434, %if.then1299, %do.end1279, %do.end1018, %do.end927, %do.end914, %do.end760, %if.end316, %do.end232, %do.end142
  br label %for.inc1436, !dbg !16608

for.inc1436:                                      ; preds = %sw.epilog1435, %do.end
  store i32 -1, i32* %width.addr, align 4, !dbg !16609
  %780 = load i8*, i8** %f, align 8, !dbg !16610
  %incdec.ptr1437 = getelementptr inbounds i8, i8* %780, i32 1, !dbg !16610, !ctir !147
  store i8* %incdec.ptr1437, i8** %f, align 8, !dbg !16610
  br label %for.cond, !dbg !16611, !llvm.loop !16612

for.end1438:                                      ; preds = %for.cond
  %781 = load i8*, i8** %p, align 8, !dbg !16614
  %tobool1439 = icmp ne i8* %781, null, !dbg !16614
  br i1 %tobool1439, label %land.lhs.true1440, label %if.end1444, !dbg !16616

land.lhs.true1440:                                ; preds = %for.end1438
  %782 = load i64, i64* %maxsize.addr, align 8, !dbg !16617
  %cmp1441 = icmp ne i64 %782, 0, !dbg !16618
  br i1 %cmp1441, label %if.then1443, label %if.end1444, !dbg !16619

if.then1443:                                      ; preds = %land.lhs.true1440
  %783 = load i8*, i8** %p, align 8, !dbg !16620
  store i8 0, i8* %783, align 1, !dbg !16621, !ctir !144
  br label %if.end1444, !dbg !16622

if.end1444:                                       ; preds = %if.then1443, %land.lhs.true1440, %for.end1438
  %784 = load i64, i64* %i, align 8, !dbg !16623
  store i64 %784, i64* %retval, align 8, !dbg !16624
  br label %return, !dbg !16624

return:                                           ; preds = %if.end1444, %if.then1387, %if.then1241, %if.then990, %if.then886, %if.then722, %if.then665, %if.then603, %if.then579, %if.then544, %if.then506, %if.then456, %if.then271, %if.then201, %if.then114, %if.then26
  %785 = load i64, i64* %retval, align 8, !dbg !16625
  ret i64 %785, !dbg !16625
}

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @memcpy_lowcase(i8* %dest, i8* %src, i64 %len) #0 !dbg !16626 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !16627, metadata !DIExpression()), !dbg !16628
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !16629, metadata !DIExpression()), !dbg !16630
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !16631, metadata !DIExpression()), !dbg !16632
  br label %while.cond, !dbg !16633

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %len.addr, align 8, !dbg !16634
  %dec = add i64 %0, -1, !dbg !16634
  store i64 %dec, i64* %len.addr, align 8, !dbg !16634
  %cmp = icmp ugt i64 %0, 0, !dbg !16635
  br i1 %cmp, label %while.body, label %while.end, !dbg !16633

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %src.addr, align 8, !dbg !16636
  %2 = load i64, i64* %len.addr, align 8, !dbg !16636
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !16636, !ctir !146
  %3 = load i8, i8* %arrayidx, align 1, !dbg !16636
  %conv = zext i8 %3 to i32, !dbg !16636
  %call = call i32 @tolower(i32 %conv) #16, !dbg !16636
  %conv1 = trunc i32 %call to i8, !dbg !16636
  %4 = load i8*, i8** %dest.addr, align 8, !dbg !16637
  %5 = load i64, i64* %len.addr, align 8, !dbg !16638
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !16637, !ctir !143
  store i8 %conv1, i8* %arrayidx2, align 1, !dbg !16639
  br label %while.cond, !dbg !16633, !llvm.loop !16640

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %dest.addr, align 8, !dbg !16641
  ret i8* %6, !dbg !16642
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @memcpy_uppcase(i8* %dest, i8* %src, i64 %len) #0 !dbg !16643 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !16644, metadata !DIExpression()), !dbg !16645
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !16646, metadata !DIExpression()), !dbg !16647
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !16648, metadata !DIExpression()), !dbg !16649
  br label %while.cond, !dbg !16650

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %len.addr, align 8, !dbg !16651
  %dec = add i64 %0, -1, !dbg !16651
  store i64 %dec, i64* %len.addr, align 8, !dbg !16651
  %cmp = icmp ugt i64 %0, 0, !dbg !16652
  br i1 %cmp, label %while.body, label %while.end, !dbg !16650

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %src.addr, align 8, !dbg !16653
  %2 = load i64, i64* %len.addr, align 8, !dbg !16653
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !16653, !ctir !146
  %3 = load i8, i8* %arrayidx, align 1, !dbg !16653
  %conv = zext i8 %3 to i32, !dbg !16653
  %call = call i32 @toupper(i32 %conv) #16, !dbg !16653
  %conv1 = trunc i32 %call to i8, !dbg !16653
  %4 = load i8*, i8** %dest.addr, align 8, !dbg !16654
  %5 = load i64, i64* %len.addr, align 8, !dbg !16655
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !16654, !ctir !143
  store i8 %conv1, i8* %arrayidx2, align 1, !dbg !16656
  br label %while.cond, !dbg !16650, !llvm.loop !16657

while.end:                                        ; preds = %while.cond
  %6 = load i8*, i8** %dest.addr, align 8, !dbg !16658
  ret i8* %6, !dbg !16659
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @iso_week_days(i32 %yday, i32 %wday) #0 !dbg !16660 {
entry:
  %yday.addr = alloca i32, align 4
  %wday.addr = alloca i32, align 4
  %big_enough_multiple_of_7 = alloca i32, align 4, !ctir !27
  store i32 %yday, i32* %yday.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %yday.addr, metadata !16663, metadata !DIExpression()), !dbg !16664
  store i32 %wday, i32* %wday.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %wday.addr, metadata !16665, metadata !DIExpression()), !dbg !16666
  call void @llvm.dbg.declare(metadata i32* %big_enough_multiple_of_7, metadata !16667, metadata !DIExpression()), !dbg !16668
  store i32 378, i32* %big_enough_multiple_of_7, align 4, !dbg !16668
  %0 = load i32, i32* %yday.addr, align 4, !dbg !16669
  %1 = load i32, i32* %yday.addr, align 4, !dbg !16670
  %2 = load i32, i32* %wday.addr, align 4, !dbg !16671
  %sub = sub nsw i32 %1, %2, !dbg !16672
  %add = add nsw i32 %sub, 4, !dbg !16673
  %3 = load i32, i32* %big_enough_multiple_of_7, align 4, !dbg !16674
  %add1 = add nsw i32 %add, %3, !dbg !16675
  %rem = srem i32 %add1, 7, !dbg !16676
  %sub2 = sub nsw i32 %0, %rem, !dbg !16677
  %add3 = add nsw i32 %sub2, 4, !dbg !16678
  %sub4 = sub nsw i32 %add3, 1, !dbg !16679
  ret i32 %sub4, !dbg !16680
}

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #5

; Function Attrs: nounwind readonly
declare dso_local i32 @tolower(i32) #5

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_program_name(i8* %argv0) #0 !dbg !16681 {
entry:
  %argv0.addr = alloca i8*, align 8
  %slash = alloca i8*, align 8, !ctir !146
  %base = alloca i8*, align 8, !ctir !146
  store i8* %argv0, i8** %argv0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %argv0.addr, metadata !16682, metadata !DIExpression()), !dbg !16683
  call void @llvm.dbg.declare(metadata i8** %slash, metadata !16684, metadata !DIExpression()), !dbg !16685
  call void @llvm.dbg.declare(metadata i8** %base, metadata !16686, metadata !DIExpression()), !dbg !16687
  %0 = load i8*, i8** %argv0.addr, align 8, !dbg !16688
  %cmp = icmp eq i8* %0, null, !dbg !16690
  br i1 %cmp, label %if.then, label %if.end, !dbg !16691

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !16692
  %call = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.370, i64 0, i64 0), %struct._IO_FILE* %1), !dbg !16694
  call void @abort() #15, !dbg !16695
  unreachable, !dbg !16695

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %argv0.addr, align 8, !dbg !16696
  %call1 = call i8* @strrchr(i8* %2, i32 47) #16, !dbg !16697
  store i8* %call1, i8** %slash, align 8, !dbg !16698
  %3 = load i8*, i8** %slash, align 8, !dbg !16699
  %cmp2 = icmp ne i8* %3, null, !dbg !16700
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !16699

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %slash, align 8, !dbg !16701
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 1, !dbg !16702, !ctir !147
  br label %cond.end, !dbg !16699

cond.false:                                       ; preds = %if.end
  %5 = load i8*, i8** %argv0.addr, align 8, !dbg !16703
  br label %cond.end, !dbg !16699

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %5, %cond.false ], !dbg !16699
  store i8* %cond, i8** %base, align 8, !dbg !16704
  %6 = load i8*, i8** %base, align 8, !dbg !16705
  %7 = load i8*, i8** %argv0.addr, align 8, !dbg !16707
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !16708
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64, !dbg !16708
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !16708
  %cmp3 = icmp sge i64 %sub.ptr.sub, 7, !dbg !16709
  br i1 %cmp3, label %land.lhs.true, label %if.end13, !dbg !16710

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i8*, i8** %base, align 8, !dbg !16711
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 -7, !dbg !16712, !ctir !147
  %call5 = call i32 @strncmp(i8* %add.ptr4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.371, i64 0, i64 0), i64 7) #16, !dbg !16713
  %cmp6 = icmp eq i32 %call5, 0, !dbg !16714
  br i1 %cmp6, label %if.then7, label %if.end13, !dbg !16715

if.then7:                                         ; preds = %land.lhs.true
  %9 = load i8*, i8** %base, align 8, !dbg !16716
  store i8* %9, i8** %argv0.addr, align 8, !dbg !16718
  %10 = load i8*, i8** %base, align 8, !dbg !16719
  %call8 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.372, i64 0, i64 0), i64 3) #16, !dbg !16721
  %cmp9 = icmp eq i32 %call8, 0, !dbg !16722
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !16723

if.then10:                                        ; preds = %if.then7
  %11 = load i8*, i8** %base, align 8, !dbg !16724
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 3, !dbg !16726, !ctir !147
  store i8* %add.ptr11, i8** %argv0.addr, align 8, !dbg !16727
  %12 = load i8*, i8** %argv0.addr, align 8, !dbg !16728
  store i8* %12, i8** @program_invocation_short_name, align 8, !dbg !16729
  br label %if.end12, !dbg !16730

if.end12:                                         ; preds = %if.then10, %if.then7
  br label %if.end13, !dbg !16731

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %cond.end
  %13 = load i8*, i8** %argv0.addr, align 8, !dbg !16732
  store i8* %13, i8** @program_name, align 8, !dbg !16733
  %14 = load i8*, i8** %argv0.addr, align 8, !dbg !16734
  store i8* %14, i8** @program_invocation_name, align 8, !dbg !16735
  ret void, !dbg !16736
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* %o) #0 !dbg !16737 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4, !ctir !27
  %p = alloca %struct.quoting_options*, align 8, !ctir !1381
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16740, metadata !DIExpression()), !dbg !16741
  call void @llvm.dbg.declare(metadata i32* %e, metadata !16742, metadata !DIExpression()), !dbg !16743
  %call = call i32* @__errno_location() #17, !dbg !16744
  %0 = load i32, i32* %call, align 4, !dbg !16744, !ctir !27
  store i32 %0, i32* %e, align 4, !dbg !16743
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !16745, metadata !DIExpression()), !dbg !16746
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16747
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !16747
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16747

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16748
  br label %cond.end, !dbg !16747

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16747

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !16747
  %3 = bitcast %struct.quoting_options* %cond to i8*, !dbg !16747
  %call1 = call i8* @xmemdup(i8* %3, i64 56), !dbg !16749
  %4 = bitcast i8* %call1 to %struct.quoting_options*, !dbg !16749
  store %struct.quoting_options* %4, %struct.quoting_options** %p, align 8, !dbg !16746
  %5 = load i32, i32* %e, align 4, !dbg !16750
  %call2 = call i32* @__errno_location() #17, !dbg !16751
  store i32 %5, i32* %call2, align 4, !dbg !16752, !ctir !27
  %6 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16753
  ret %struct.quoting_options* %6, !dbg !16754
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_quoting_style(%struct.quoting_options* %o) #0 !dbg !16755 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16758, metadata !DIExpression()), !dbg !16759
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16760
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !16760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16760

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16761
  br label %cond.end, !dbg !16760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !16760
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0, !dbg !16762, !ctir !1393
  %2 = load i32, i32* %style, align 8, !dbg !16762, !ctir !95
  ret i32 %2, !dbg !16763
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_quoting_style(%struct.quoting_options* %o, i32 %s) #0 !dbg !16764 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %s.addr = alloca i32, align 4
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16767, metadata !DIExpression()), !dbg !16768
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !16769, metadata !DIExpression()), !dbg !16770
  %0 = load i32, i32* %s.addr, align 4, !dbg !16771
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16772
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !16772
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16772

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16773
  br label %cond.end, !dbg !16772

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16772

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !16772
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0, !dbg !16774, !ctir !1382
  store i32 %0, i32* %style, align 8, !dbg !16775, !ctir !95
  ret void, !dbg !16776
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_char_quoting(%struct.quoting_options* %o, i8 signext %c, i32 %i) #0 !dbg !16777 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %c.addr = alloca i8, align 1
  %i.addr = alloca i32, align 4
  %uc = alloca i8, align 1, !ctir !737
  %p = alloca i32*, align 8, !ctir !1391
  %shift = alloca i32, align 4, !ctir !27
  %r = alloca i32, align 4, !ctir !27
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16780, metadata !DIExpression()), !dbg !16781
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !16782, metadata !DIExpression()), !dbg !16783
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !16784, metadata !DIExpression()), !dbg !16785
  call void @llvm.dbg.declare(metadata i8* %uc, metadata !16786, metadata !DIExpression()), !dbg !16787
  %0 = load i8, i8* %c.addr, align 1, !dbg !16788
  store i8 %0, i8* %uc, align 1, !dbg !16787
  call void @llvm.dbg.declare(metadata i32** %p, metadata !16789, metadata !DIExpression()), !dbg !16790
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16791
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !16791
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16791

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16792
  br label %cond.end, !dbg !16791

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !16791
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 2, !dbg !16793, !ctir !1382
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !16794, !ctir !1388
  %3 = load i8, i8* %uc, align 1, !dbg !16795
  %conv = zext i8 %3 to i64, !dbg !16795
  %div = udiv i64 %conv, 32, !dbg !16796
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i64 %div, !dbg !16797, !ctir !6
  store i32* %add.ptr, i32** %p, align 8, !dbg !16790
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !16798, metadata !DIExpression()), !dbg !16799
  %4 = load i8, i8* %uc, align 1, !dbg !16800
  %conv1 = zext i8 %4 to i64, !dbg !16800
  %rem = urem i64 %conv1, 32, !dbg !16801
  %conv2 = trunc i64 %rem to i32, !dbg !16800
  store i32 %conv2, i32* %shift, align 4, !dbg !16799
  call void @llvm.dbg.declare(metadata i32* %r, metadata !16802, metadata !DIExpression()), !dbg !16803
  %5 = load i32*, i32** %p, align 8, !dbg !16804
  %6 = load i32, i32* %5, align 4, !dbg !16805, !ctir !6
  %7 = load i32, i32* %shift, align 4, !dbg !16806
  %shr = lshr i32 %6, %7, !dbg !16807
  %and = and i32 %shr, 1, !dbg !16808
  store i32 %and, i32* %r, align 4, !dbg !16803
  %8 = load i32, i32* %i.addr, align 4, !dbg !16809
  %and3 = and i32 %8, 1, !dbg !16810
  %9 = load i32, i32* %r, align 4, !dbg !16811
  %xor = xor i32 %and3, %9, !dbg !16812
  %10 = load i32, i32* %shift, align 4, !dbg !16813
  %shl = shl i32 %xor, %10, !dbg !16814
  %11 = load i32*, i32** %p, align 8, !dbg !16815
  %12 = load i32, i32* %11, align 4, !dbg !16816, !ctir !6
  %xor4 = xor i32 %12, %shl, !dbg !16816
  store i32 %xor4, i32* %11, align 4, !dbg !16816, !ctir !6
  %13 = load i32, i32* %r, align 4, !dbg !16817
  ret i32 %13, !dbg !16818
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_quoting_flags(%struct.quoting_options* %o, i32 %i) #0 !dbg !16819 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %i.addr = alloca i32, align 4
  %r = alloca i32, align 4, !ctir !27
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16822, metadata !DIExpression()), !dbg !16823
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !16824, metadata !DIExpression()), !dbg !16825
  call void @llvm.dbg.declare(metadata i32* %r, metadata !16826, metadata !DIExpression()), !dbg !16827
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16828
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !16828
  br i1 %tobool, label %if.end, label %if.then, !dbg !16830

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !dbg !16831
  br label %if.end, !dbg !16832

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16833
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %1, i32 0, i32 1, !dbg !16834, !ctir !1382
  %2 = load i32, i32* %flags, align 4, !dbg !16834, !ctir !27
  store i32 %2, i32* %r, align 4, !dbg !16835
  %3 = load i32, i32* %i.addr, align 4, !dbg !16836
  %4 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16837
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i32 0, i32 1, !dbg !16838, !ctir !1382
  store i32 %3, i32* %flags1, align 4, !dbg !16839, !ctir !27
  %5 = load i32, i32* %r, align 4, !dbg !16840
  ret i32 %5, !dbg !16841
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_custom_quoting(%struct.quoting_options* %o, i8* %left_quote, i8* %right_quote) #0 !dbg !16842 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16845, metadata !DIExpression()), !dbg !16846
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !16847, metadata !DIExpression()), !dbg !16848
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !16849, metadata !DIExpression()), !dbg !16850
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16851
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !16851
  br i1 %tobool, label %if.end, label %if.then, !dbg !16853

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !dbg !16854
  br label %if.end, !dbg !16855

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16856
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %1, i32 0, i32 0, !dbg !16857, !ctir !1382
  store i32 10, i32* %style, align 8, !dbg !16858, !ctir !95
  %2 = load i8*, i8** %left_quote.addr, align 8, !dbg !16859
  %tobool1 = icmp ne i8* %2, null, !dbg !16859
  br i1 %tobool1, label %lor.lhs.false, label %if.then3, !dbg !16861

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8*, i8** %right_quote.addr, align 8, !dbg !16862
  %tobool2 = icmp ne i8* %3, null, !dbg !16862
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !16863

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void @abort() #15, !dbg !16864
  unreachable, !dbg !16864

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load i8*, i8** %left_quote.addr, align 8, !dbg !16865
  %5 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16866
  %left_quote5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i32 0, i32 3, !dbg !16867, !ctir !1382
  store i8* %4, i8** %left_quote5, align 8, !dbg !16868, !ctir !146
  %6 = load i8*, i8** %right_quote.addr, align 8, !dbg !16869
  %7 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16870
  %right_quote6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i32 0, i32 4, !dbg !16871, !ctir !1382
  store i8* %6, i8** %right_quote6, align 8, !dbg !16872, !ctir !146
  ret void, !dbg !16873
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @quotearg_buffer(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, %struct.quoting_options* %o) #0 !dbg !16874 {
entry:
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8, !ctir !1392
  %e = alloca i32, align 4, !ctir !27
  %r = alloca i64, align 8, !ctir !149
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !16877, metadata !DIExpression()), !dbg !16878
  store i64 %buffersize, i64* %buffersize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffersize.addr, metadata !16879, metadata !DIExpression()), !dbg !16880
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !16881, metadata !DIExpression()), !dbg !16882
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !16883, metadata !DIExpression()), !dbg !16884
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !16885, metadata !DIExpression()), !dbg !16886
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !16887, metadata !DIExpression()), !dbg !16888
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16889
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !16889
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16889

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !16890
  br label %cond.end, !dbg !16889

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !16889
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !dbg !16888
  call void @llvm.dbg.declare(metadata i32* %e, metadata !16891, metadata !DIExpression()), !dbg !16892
  %call = call i32* @__errno_location() #17, !dbg !16893
  %2 = load i32, i32* %call, align 4, !dbg !16893, !ctir !27
  store i32 %2, i32* %e, align 4, !dbg !16892
  call void @llvm.dbg.declare(metadata i64* %r, metadata !16894, metadata !DIExpression()), !dbg !16895
  %3 = load i8*, i8** %buffer.addr, align 8, !dbg !16896
  %4 = load i64, i64* %buffersize.addr, align 8, !dbg !16897
  %5 = load i8*, i8** %arg.addr, align 8, !dbg !16898
  %6 = load i64, i64* %argsize.addr, align 8, !dbg !16899
  %7 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16900
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i32 0, i32 0, !dbg !16901, !ctir !1393
  %8 = load i32, i32* %style, align 8, !dbg !16901, !ctir !95
  %9 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16902
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %9, i32 0, i32 1, !dbg !16903, !ctir !1393
  %10 = load i32, i32* %flags, align 4, !dbg !16903, !ctir !27
  %11 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16904
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %11, i32 0, i32 2, !dbg !16905, !ctir !1393
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !16904, !ctir !1394
  %12 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16906
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 3, !dbg !16907, !ctir !1393
  %13 = load i8*, i8** %left_quote, align 8, !dbg !16907, !ctir !146
  %14 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !16908
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %14, i32 0, i32 4, !dbg !16909, !ctir !1393
  %15 = load i8*, i8** %right_quote, align 8, !dbg !16909, !ctir !146
  %call1 = call i64 @quotearg_buffer_restyled(i8* %3, i64 %4, i8* %5, i64 %6, i32 %8, i32 %10, i32* %arraydecay, i8* %13, i8* %15), !dbg !16910
  store i64 %call1, i64* %r, align 8, !dbg !16895
  %16 = load i32, i32* %e, align 4, !dbg !16911
  %call2 = call i32* @__errno_location() #17, !dbg !16912
  store i32 %16, i32* %call2, align 4, !dbg !16913, !ctir !27
  %17 = load i64, i64* %r, align 8, !dbg !16914
  ret i64 %17, !dbg !16915
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, i32 %quoting_style, i32 %flags, i32* %quote_these_too, i8* %left_quote, i8* %right_quote) #0 !dbg !16916 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %quoting_style.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %quote_these_too.addr = alloca i32*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %i = alloca i64, align 8, !ctir !149
  %len = alloca i64, align 8, !ctir !149
  %orig_buffersize = alloca i64, align 8, !ctir !149
  %quote_string = alloca i8*, align 8, !ctir !146
  %quote_string_len = alloca i64, align 8, !ctir !149
  %backslash_escapes = alloca i8, align 1, !ctir !141
  %unibyte_locale = alloca i8, align 1, !ctir !141
  %elide_outer_quotes = alloca i8, align 1, !ctir !141
  %pending_shell_escape_end = alloca i8, align 1, !ctir !141
  %encountered_single_quote = alloca i8, align 1, !ctir !141
  %all_c_and_shell_quote_compat = alloca i8, align 1, !ctir !141
  %c = alloca i8, align 1, !ctir !737
  %esc = alloca i8, align 1, !ctir !737
  %is_right_quote = alloca i8, align 1, !ctir !141
  %escaping = alloca i8, align 1, !ctir !141
  %c_and_shell_quote_compat = alloca i8, align 1, !ctir !141
  %m = alloca i64, align 8, !ctir !149
  %printable = alloca i8, align 1, !ctir !141
  %mbstate = alloca %struct.__mbstate_t, align 4, !ctir !1400
  %w = alloca i32, align 4, !ctir !764
  %bytes = alloca i64, align 8, !ctir !149
  %j = alloca i64, align 8, !ctir !149
  %ilim = alloca i64, align 8, !ctir !149
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !16919, metadata !DIExpression()), !dbg !16920
  store i64 %buffersize, i64* %buffersize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffersize.addr, metadata !16921, metadata !DIExpression()), !dbg !16922
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !16923, metadata !DIExpression()), !dbg !16924
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !16925, metadata !DIExpression()), !dbg !16926
  store i32 %quoting_style, i32* %quoting_style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %quoting_style.addr, metadata !16927, metadata !DIExpression()), !dbg !16928
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !16929, metadata !DIExpression()), !dbg !16930
  store i32* %quote_these_too, i32** %quote_these_too.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %quote_these_too.addr, metadata !16931, metadata !DIExpression()), !dbg !16932
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !16933, metadata !DIExpression()), !dbg !16934
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !16935, metadata !DIExpression()), !dbg !16936
  call void @llvm.dbg.declare(metadata i64* %i, metadata !16937, metadata !DIExpression()), !dbg !16938
  call void @llvm.dbg.declare(metadata i64* %len, metadata !16939, metadata !DIExpression()), !dbg !16940
  store i64 0, i64* %len, align 8, !dbg !16940
  call void @llvm.dbg.declare(metadata i64* %orig_buffersize, metadata !16941, metadata !DIExpression()), !dbg !16942
  store i64 0, i64* %orig_buffersize, align 8, !dbg !16942
  call void @llvm.dbg.declare(metadata i8** %quote_string, metadata !16943, metadata !DIExpression()), !dbg !16944
  store i8* null, i8** %quote_string, align 8, !dbg !16944
  call void @llvm.dbg.declare(metadata i64* %quote_string_len, metadata !16945, metadata !DIExpression()), !dbg !16946
  store i64 0, i64* %quote_string_len, align 8, !dbg !16946
  call void @llvm.dbg.declare(metadata i8* %backslash_escapes, metadata !16947, metadata !DIExpression()), !dbg !16948
  store i8 0, i8* %backslash_escapes, align 1, !dbg !16948
  call void @llvm.dbg.declare(metadata i8* %unibyte_locale, metadata !16949, metadata !DIExpression()), !dbg !16950
  %call = call i64 @__ctype_get_mb_cur_max() #13, !dbg !16951
  %cmp = icmp eq i64 %call, 1, !dbg !16952
  %frombool = zext i1 %cmp to i8, !dbg !16950
  store i8 %frombool, i8* %unibyte_locale, align 1, !dbg !16950
  call void @llvm.dbg.declare(metadata i8* %elide_outer_quotes, metadata !16953, metadata !DIExpression()), !dbg !16954
  %0 = load i32, i32* %flags.addr, align 4, !dbg !16955
  %and = and i32 %0, 2, !dbg !16956
  %cmp1 = icmp ne i32 %and, 0, !dbg !16957
  %frombool2 = zext i1 %cmp1 to i8, !dbg !16954
  store i8 %frombool2, i8* %elide_outer_quotes, align 1, !dbg !16954
  call void @llvm.dbg.declare(metadata i8* %pending_shell_escape_end, metadata !16958, metadata !DIExpression()), !dbg !16959
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !16959
  call void @llvm.dbg.declare(metadata i8* %encountered_single_quote, metadata !16960, metadata !DIExpression()), !dbg !16961
  store i8 0, i8* %encountered_single_quote, align 1, !dbg !16961
  call void @llvm.dbg.declare(metadata i8* %all_c_and_shell_quote_compat, metadata !16962, metadata !DIExpression()), !dbg !16963
  store i8 1, i8* %all_c_and_shell_quote_compat, align 1, !dbg !16963
  br label %process_input, !dbg !16964

process_input:                                    ; preds = %if.then701, %entry
  call void @llvm.dbg.label(metadata !16965), !dbg !16966
  %1 = load i32, i32* %quoting_style.addr, align 4, !dbg !16967
  switch i32 %1, label %sw.default [
    i32 6, label %sw.bb
    i32 5, label %sw.bb3
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb8
    i32 3, label %sw.bb26
    i32 1, label %sw.bb27
    i32 4, label %sw.bb28
    i32 2, label %sw.bb32
    i32 0, label %sw.bb43
  ], !dbg !16968

sw.bb:                                            ; preds = %process_input
  store i32 5, i32* %quoting_style.addr, align 4, !dbg !16969
  store i8 1, i8* %elide_outer_quotes, align 1, !dbg !16971
  br label %sw.bb3, !dbg !16972

sw.bb3:                                           ; preds = %process_input, %sw.bb
  %2 = load i8, i8* %elide_outer_quotes, align 1, !dbg !16973
  %tobool = trunc i8 %2 to i1, !dbg !16973
  br i1 %tobool, label %if.end6, label %if.then, !dbg !16975

if.then:                                          ; preds = %sw.bb3
  br label %do.body, !dbg !16976

do.body:                                          ; preds = %if.then
  %3 = load i64, i64* %len, align 8, !dbg !16977
  %4 = load i64, i64* %buffersize.addr, align 8, !dbg !16977
  %cmp4 = icmp ult i64 %3, %4, !dbg !16977
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !16980

if.then5:                                         ; preds = %do.body
  %5 = load i8*, i8** %buffer.addr, align 8, !dbg !16977
  %6 = load i64, i64* %len, align 8, !dbg !16977
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !16977, !ctir !143
  store i8 34, i8* %arrayidx, align 1, !dbg !16977
  br label %if.end, !dbg !16977

if.end:                                           ; preds = %if.then5, %do.body
  %7 = load i64, i64* %len, align 8, !dbg !16980
  %inc = add i64 %7, 1, !dbg !16980
  store i64 %inc, i64* %len, align 8, !dbg !16980
  br label %do.end, !dbg !16980

do.end:                                           ; preds = %if.end
  br label %if.end6, !dbg !16980

if.end6:                                          ; preds = %do.end, %sw.bb3
  store i8 1, i8* %backslash_escapes, align 1, !dbg !16981
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.397, i64 0, i64 0), i8** %quote_string, align 8, !dbg !16982
  store i64 1, i64* %quote_string_len, align 8, !dbg !16983
  br label %sw.epilog, !dbg !16984

sw.bb7:                                           ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !dbg !16985
  store i8 0, i8* %elide_outer_quotes, align 1, !dbg !16986
  br label %sw.epilog, !dbg !16987

sw.bb8:                                           ; preds = %process_input, %process_input, %process_input
  %8 = load i32, i32* %quoting_style.addr, align 4, !dbg !16988
  %cmp9 = icmp ne i32 %8, 10, !dbg !16991
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !16992

if.then10:                                        ; preds = %sw.bb8
  %9 = load i32, i32* %quoting_style.addr, align 4, !dbg !16993
  %call11 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.398, i64 0, i64 0), i32 %9), !dbg !16995
  store i8* %call11, i8** %left_quote.addr, align 8, !dbg !16996
  %10 = load i32, i32* %quoting_style.addr, align 4, !dbg !16997
  %call12 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.399, i64 0, i64 0), i32 %10), !dbg !16998
  store i8* %call12, i8** %right_quote.addr, align 8, !dbg !16999
  br label %if.end13, !dbg !17000

if.end13:                                         ; preds = %if.then10, %sw.bb8
  %11 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17001
  %tobool14 = trunc i8 %11 to i1, !dbg !17001
  br i1 %tobool14, label %if.end24, label %if.then15, !dbg !17003

if.then15:                                        ; preds = %if.end13
  %12 = load i8*, i8** %left_quote.addr, align 8, !dbg !17004
  store i8* %12, i8** %quote_string, align 8, !dbg !17006
  br label %for.cond, !dbg !17007

for.cond:                                         ; preds = %for.inc, %if.then15
  %13 = load i8*, i8** %quote_string, align 8, !dbg !17008
  %14 = load i8, i8* %13, align 1, !dbg !17010, !ctir !147
  %tobool16 = icmp ne i8 %14, 0, !dbg !17011
  br i1 %tobool16, label %for.body, label %for.end, !dbg !17011

for.body:                                         ; preds = %for.cond
  br label %do.body17, !dbg !17012

do.body17:                                        ; preds = %for.body
  %15 = load i64, i64* %len, align 8, !dbg !17013
  %16 = load i64, i64* %buffersize.addr, align 8, !dbg !17013
  %cmp18 = icmp ult i64 %15, %16, !dbg !17013
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !17016

if.then19:                                        ; preds = %do.body17
  %17 = load i8*, i8** %quote_string, align 8, !dbg !17013
  %18 = load i8, i8* %17, align 1, !dbg !17013, !ctir !147
  %19 = load i8*, i8** %buffer.addr, align 8, !dbg !17013
  %20 = load i64, i64* %len, align 8, !dbg !17013
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !17013, !ctir !143
  store i8 %18, i8* %arrayidx20, align 1, !dbg !17013
  br label %if.end21, !dbg !17013

if.end21:                                         ; preds = %if.then19, %do.body17
  %21 = load i64, i64* %len, align 8, !dbg !17016
  %inc22 = add i64 %21, 1, !dbg !17016
  store i64 %inc22, i64* %len, align 8, !dbg !17016
  br label %do.end23, !dbg !17016

do.end23:                                         ; preds = %if.end21
  br label %for.inc, !dbg !17016

for.inc:                                          ; preds = %do.end23
  %22 = load i8*, i8** %quote_string, align 8, !dbg !17017
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1, !dbg !17017, !ctir !147
  store i8* %incdec.ptr, i8** %quote_string, align 8, !dbg !17017
  br label %for.cond, !dbg !17018, !llvm.loop !17019

for.end:                                          ; preds = %for.cond
  br label %if.end24, !dbg !17020

if.end24:                                         ; preds = %for.end, %if.end13
  store i8 1, i8* %backslash_escapes, align 1, !dbg !17021
  %23 = load i8*, i8** %right_quote.addr, align 8, !dbg !17022
  store i8* %23, i8** %quote_string, align 8, !dbg !17023
  %24 = load i8*, i8** %quote_string, align 8, !dbg !17024
  %call25 = call i64 @strlen(i8* %24) #16, !dbg !17025
  store i64 %call25, i64* %quote_string_len, align 8, !dbg !17026
  br label %sw.epilog, !dbg !17027

sw.bb26:                                          ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !dbg !17028
  br label %sw.bb27, !dbg !17029

sw.bb27:                                          ; preds = %process_input, %sw.bb26
  store i8 1, i8* %elide_outer_quotes, align 1, !dbg !17030
  br label %sw.bb28, !dbg !17031

sw.bb28:                                          ; preds = %process_input, %sw.bb27
  %25 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17032
  %tobool29 = trunc i8 %25 to i1, !dbg !17032
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !17034

if.then30:                                        ; preds = %sw.bb28
  store i8 1, i8* %backslash_escapes, align 1, !dbg !17035
  br label %if.end31, !dbg !17036

if.end31:                                         ; preds = %if.then30, %sw.bb28
  br label %sw.bb32, !dbg !17037

sw.bb32:                                          ; preds = %process_input, %if.end31
  store i32 2, i32* %quoting_style.addr, align 4, !dbg !17038
  %26 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17039
  %tobool33 = trunc i8 %26 to i1, !dbg !17039
  br i1 %tobool33, label %if.end42, label %if.then34, !dbg !17041

if.then34:                                        ; preds = %sw.bb32
  br label %do.body35, !dbg !17042

do.body35:                                        ; preds = %if.then34
  %27 = load i64, i64* %len, align 8, !dbg !17043
  %28 = load i64, i64* %buffersize.addr, align 8, !dbg !17043
  %cmp36 = icmp ult i64 %27, %28, !dbg !17043
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !17046

if.then37:                                        ; preds = %do.body35
  %29 = load i8*, i8** %buffer.addr, align 8, !dbg !17043
  %30 = load i64, i64* %len, align 8, !dbg !17043
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 %30, !dbg !17043, !ctir !143
  store i8 39, i8* %arrayidx38, align 1, !dbg !17043
  br label %if.end39, !dbg !17043

if.end39:                                         ; preds = %if.then37, %do.body35
  %31 = load i64, i64* %len, align 8, !dbg !17046
  %inc40 = add i64 %31, 1, !dbg !17046
  store i64 %inc40, i64* %len, align 8, !dbg !17046
  br label %do.end41, !dbg !17046

do.end41:                                         ; preds = %if.end39
  br label %if.end42, !dbg !17046

if.end42:                                         ; preds = %do.end41, %sw.bb32
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.399, i64 0, i64 0), i8** %quote_string, align 8, !dbg !17047
  store i64 1, i64* %quote_string_len, align 8, !dbg !17048
  br label %sw.epilog, !dbg !17049

sw.bb43:                                          ; preds = %process_input
  store i8 0, i8* %elide_outer_quotes, align 1, !dbg !17050
  br label %sw.epilog, !dbg !17051

sw.default:                                       ; preds = %process_input
  call void @abort() #15, !dbg !17052
  unreachable, !dbg !17052

sw.epilog:                                        ; preds = %sw.bb43, %if.end42, %if.end24, %sw.bb7, %if.end6
  store i64 0, i64* %i, align 8, !dbg !17053
  br label %for.cond44, !dbg !17055

for.cond44:                                       ; preds = %for.inc673, %sw.epilog
  %32 = load i64, i64* %argsize.addr, align 8, !dbg !17056
  %cmp45 = icmp eq i64 %32, -1, !dbg !17058
  br i1 %cmp45, label %cond.true, label %cond.false, !dbg !17056

cond.true:                                        ; preds = %for.cond44
  %33 = load i8*, i8** %arg.addr, align 8, !dbg !17059
  %34 = load i64, i64* %i, align 8, !dbg !17060
  %arrayidx46 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !17059, !ctir !146
  %35 = load i8, i8* %arrayidx46, align 1, !dbg !17059
  %conv = sext i8 %35 to i32, !dbg !17059
  %cmp47 = icmp eq i32 %conv, 0, !dbg !17061
  %conv48 = zext i1 %cmp47 to i32, !dbg !17061
  br label %cond.end, !dbg !17056

cond.false:                                       ; preds = %for.cond44
  %36 = load i64, i64* %i, align 8, !dbg !17062
  %37 = load i64, i64* %argsize.addr, align 8, !dbg !17063
  %cmp49 = icmp eq i64 %36, %37, !dbg !17064
  %conv50 = zext i1 %cmp49 to i32, !dbg !17064
  br label %cond.end, !dbg !17056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv48, %cond.true ], [ %conv50, %cond.false ], !dbg !17056
  %tobool51 = icmp ne i32 %cond, 0, !dbg !17065
  %lnot = xor i1 %tobool51, true, !dbg !17065
  br i1 %lnot, label %for.body52, label %for.end675, !dbg !17066

for.body52:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %c, metadata !17067, metadata !DIExpression()), !dbg !17069
  call void @llvm.dbg.declare(metadata i8* %esc, metadata !17070, metadata !DIExpression()), !dbg !17071
  call void @llvm.dbg.declare(metadata i8* %is_right_quote, metadata !17072, metadata !DIExpression()), !dbg !17073
  store i8 0, i8* %is_right_quote, align 1, !dbg !17073
  call void @llvm.dbg.declare(metadata i8* %escaping, metadata !17074, metadata !DIExpression()), !dbg !17075
  store i8 0, i8* %escaping, align 1, !dbg !17075
  call void @llvm.dbg.declare(metadata i8* %c_and_shell_quote_compat, metadata !17076, metadata !DIExpression()), !dbg !17077
  store i8 0, i8* %c_and_shell_quote_compat, align 1, !dbg !17077
  %38 = load i8, i8* %backslash_escapes, align 1, !dbg !17078
  %tobool53 = trunc i8 %38 to i1, !dbg !17078
  br i1 %tobool53, label %land.lhs.true, label %if.end80, !dbg !17080

land.lhs.true:                                    ; preds = %for.body52
  %39 = load i32, i32* %quoting_style.addr, align 4, !dbg !17081
  %cmp55 = icmp ne i32 %39, 2, !dbg !17082
  br i1 %cmp55, label %land.lhs.true57, label %if.end80, !dbg !17083

land.lhs.true57:                                  ; preds = %land.lhs.true
  %40 = load i64, i64* %quote_string_len, align 8, !dbg !17084
  %tobool58 = icmp ne i64 %40, 0, !dbg !17084
  br i1 %tobool58, label %land.lhs.true59, label %if.end80, !dbg !17085

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %41 = load i64, i64* %i, align 8, !dbg !17086
  %42 = load i64, i64* %quote_string_len, align 8, !dbg !17087
  %add = add i64 %41, %42, !dbg !17088
  %43 = load i64, i64* %argsize.addr, align 8, !dbg !17089
  %cmp60 = icmp eq i64 %43, -1, !dbg !17090
  br i1 %cmp60, label %land.lhs.true62, label %cond.false67, !dbg !17091

land.lhs.true62:                                  ; preds = %land.lhs.true59
  %44 = load i64, i64* %quote_string_len, align 8, !dbg !17092
  %cmp63 = icmp ult i64 1, %44, !dbg !17093
  br i1 %cmp63, label %cond.true65, label %cond.false67, !dbg !17089

cond.true65:                                      ; preds = %land.lhs.true62
  %45 = load i8*, i8** %arg.addr, align 8, !dbg !17094
  %call66 = call i64 @strlen(i8* %45) #16, !dbg !17095
  store i64 %call66, i64* %argsize.addr, align 8, !dbg !17096
  br label %cond.end68, !dbg !17089

cond.false67:                                     ; preds = %land.lhs.true62, %land.lhs.true59
  %46 = load i64, i64* %argsize.addr, align 8, !dbg !17097
  br label %cond.end68, !dbg !17089

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i64 [ %call66, %cond.true65 ], [ %46, %cond.false67 ], !dbg !17089
  %cmp70 = icmp ule i64 %add, %cond69, !dbg !17098
  br i1 %cmp70, label %land.lhs.true72, label %if.end80, !dbg !17099

land.lhs.true72:                                  ; preds = %cond.end68
  %47 = load i8*, i8** %arg.addr, align 8, !dbg !17100
  %48 = load i64, i64* %i, align 8, !dbg !17101
  %add.ptr = getelementptr inbounds i8, i8* %47, i64 %48, !dbg !17102, !ctir !147
  %49 = load i8*, i8** %quote_string, align 8, !dbg !17103
  %50 = load i64, i64* %quote_string_len, align 8, !dbg !17104
  %call73 = call i32 @memcmp(i8* %add.ptr, i8* %49, i64 %50) #16, !dbg !17105
  %cmp74 = icmp eq i32 %call73, 0, !dbg !17106
  br i1 %cmp74, label %if.then76, label %if.end80, !dbg !17107

if.then76:                                        ; preds = %land.lhs.true72
  %51 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17108
  %tobool77 = trunc i8 %51 to i1, !dbg !17108
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !17111

if.then78:                                        ; preds = %if.then76
  br label %force_outer_quoting_style, !dbg !17112

if.end79:                                         ; preds = %if.then76
  store i8 1, i8* %is_right_quote, align 1, !dbg !17113
  br label %if.end80, !dbg !17114

if.end80:                                         ; preds = %if.end79, %land.lhs.true72, %cond.end68, %land.lhs.true57, %land.lhs.true, %for.body52
  %52 = load i8*, i8** %arg.addr, align 8, !dbg !17115
  %53 = load i64, i64* %i, align 8, !dbg !17116
  %arrayidx81 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !17115, !ctir !146
  %54 = load i8, i8* %arrayidx81, align 1, !dbg !17115
  store i8 %54, i8* %c, align 1, !dbg !17117
  %55 = load i8, i8* %c, align 1, !dbg !17118
  %conv82 = zext i8 %55 to i32, !dbg !17118
  switch i32 %conv82, label %sw.default335 [
    i32 0, label %sw.bb83
    i32 63, label %sw.bb170
    i32 7, label %sw.bb236
    i32 8, label %sw.bb237
    i32 12, label %sw.bb238
    i32 10, label %sw.bb239
    i32 13, label %sw.bb240
    i32 9, label %sw.bb241
    i32 11, label %sw.bb242
    i32 92, label %sw.bb243
    i32 123, label %sw.bb270
    i32 125, label %sw.bb270
    i32 35, label %sw.bb283
    i32 126, label %sw.bb283
    i32 32, label %sw.bb288
    i32 33, label %sw.bb289
    i32 34, label %sw.bb289
    i32 36, label %sw.bb289
    i32 38, label %sw.bb289
    i32 40, label %sw.bb289
    i32 41, label %sw.bb289
    i32 42, label %sw.bb289
    i32 59, label %sw.bb289
    i32 60, label %sw.bb289
    i32 61, label %sw.bb289
    i32 62, label %sw.bb289
    i32 91, label %sw.bb289
    i32 94, label %sw.bb289
    i32 96, label %sw.bb289
    i32 124, label %sw.bb289
    i32 39, label %sw.bb297
    i32 37, label %sw.bb334
    i32 43, label %sw.bb334
    i32 44, label %sw.bb334
    i32 45, label %sw.bb334
    i32 46, label %sw.bb334
    i32 47, label %sw.bb334
    i32 48, label %sw.bb334
    i32 49, label %sw.bb334
    i32 50, label %sw.bb334
    i32 51, label %sw.bb334
    i32 52, label %sw.bb334
    i32 53, label %sw.bb334
    i32 54, label %sw.bb334
    i32 55, label %sw.bb334
    i32 56, label %sw.bb334
    i32 57, label %sw.bb334
    i32 58, label %sw.bb334
    i32 65, label %sw.bb334
    i32 66, label %sw.bb334
    i32 67, label %sw.bb334
    i32 68, label %sw.bb334
    i32 69, label %sw.bb334
    i32 70, label %sw.bb334
    i32 71, label %sw.bb334
    i32 72, label %sw.bb334
    i32 73, label %sw.bb334
    i32 74, label %sw.bb334
    i32 75, label %sw.bb334
    i32 76, label %sw.bb334
    i32 77, label %sw.bb334
    i32 78, label %sw.bb334
    i32 79, label %sw.bb334
    i32 80, label %sw.bb334
    i32 81, label %sw.bb334
    i32 82, label %sw.bb334
    i32 83, label %sw.bb334
    i32 84, label %sw.bb334
    i32 85, label %sw.bb334
    i32 86, label %sw.bb334
    i32 87, label %sw.bb334
    i32 88, label %sw.bb334
    i32 89, label %sw.bb334
    i32 90, label %sw.bb334
    i32 93, label %sw.bb334
    i32 95, label %sw.bb334
    i32 97, label %sw.bb334
    i32 98, label %sw.bb334
    i32 99, label %sw.bb334
    i32 100, label %sw.bb334
    i32 101, label %sw.bb334
    i32 102, label %sw.bb334
    i32 103, label %sw.bb334
    i32 104, label %sw.bb334
    i32 105, label %sw.bb334
    i32 106, label %sw.bb334
    i32 107, label %sw.bb334
    i32 108, label %sw.bb334
    i32 109, label %sw.bb334
    i32 110, label %sw.bb334
    i32 111, label %sw.bb334
    i32 112, label %sw.bb334
    i32 113, label %sw.bb334
    i32 114, label %sw.bb334
    i32 115, label %sw.bb334
    i32 116, label %sw.bb334
    i32 117, label %sw.bb334
    i32 118, label %sw.bb334
    i32 119, label %sw.bb334
    i32 120, label %sw.bb334
    i32 121, label %sw.bb334
    i32 122, label %sw.bb334
  ], !dbg !17119

sw.bb83:                                          ; preds = %if.end80
  %56 = load i8, i8* %backslash_escapes, align 1, !dbg !17120
  %tobool84 = trunc i8 %56 to i1, !dbg !17120
  br i1 %tobool84, label %if.then85, label %if.else, !dbg !17123

if.then85:                                        ; preds = %sw.bb83
  br label %do.body86, !dbg !17124

do.body86:                                        ; preds = %if.then85
  %57 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17126
  %tobool87 = trunc i8 %57 to i1, !dbg !17126
  br i1 %tobool87, label %if.then88, label %if.end89, !dbg !17129

if.then88:                                        ; preds = %do.body86
  br label %force_outer_quoting_style, !dbg !17126

if.end89:                                         ; preds = %do.body86
  store i8 1, i8* %escaping, align 1, !dbg !17129
  %58 = load i32, i32* %quoting_style.addr, align 4, !dbg !17130
  %cmp90 = icmp eq i32 %58, 2, !dbg !17130
  br i1 %cmp90, label %land.lhs.true92, label %if.end119, !dbg !17130

land.lhs.true92:                                  ; preds = %if.end89
  %59 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !17130
  %tobool93 = trunc i8 %59 to i1, !dbg !17130
  br i1 %tobool93, label %if.end119, label %if.then94, !dbg !17129

if.then94:                                        ; preds = %land.lhs.true92
  br label %do.body95, !dbg !17132

do.body95:                                        ; preds = %if.then94
  %60 = load i64, i64* %len, align 8, !dbg !17134
  %61 = load i64, i64* %buffersize.addr, align 8, !dbg !17134
  %cmp96 = icmp ult i64 %60, %61, !dbg !17134
  br i1 %cmp96, label %if.then98, label %if.end100, !dbg !17137

if.then98:                                        ; preds = %do.body95
  %62 = load i8*, i8** %buffer.addr, align 8, !dbg !17134
  %63 = load i64, i64* %len, align 8, !dbg !17134
  %arrayidx99 = getelementptr inbounds i8, i8* %62, i64 %63, !dbg !17134, !ctir !143
  store i8 39, i8* %arrayidx99, align 1, !dbg !17134
  br label %if.end100, !dbg !17134

if.end100:                                        ; preds = %if.then98, %do.body95
  %64 = load i64, i64* %len, align 8, !dbg !17137
  %inc101 = add i64 %64, 1, !dbg !17137
  store i64 %inc101, i64* %len, align 8, !dbg !17137
  br label %do.end102, !dbg !17137

do.end102:                                        ; preds = %if.end100
  br label %do.body103, !dbg !17132

do.body103:                                       ; preds = %do.end102
  %65 = load i64, i64* %len, align 8, !dbg !17138
  %66 = load i64, i64* %buffersize.addr, align 8, !dbg !17138
  %cmp104 = icmp ult i64 %65, %66, !dbg !17138
  br i1 %cmp104, label %if.then106, label %if.end108, !dbg !17141

if.then106:                                       ; preds = %do.body103
  %67 = load i8*, i8** %buffer.addr, align 8, !dbg !17138
  %68 = load i64, i64* %len, align 8, !dbg !17138
  %arrayidx107 = getelementptr inbounds i8, i8* %67, i64 %68, !dbg !17138, !ctir !143
  store i8 36, i8* %arrayidx107, align 1, !dbg !17138
  br label %if.end108, !dbg !17138

if.end108:                                        ; preds = %if.then106, %do.body103
  %69 = load i64, i64* %len, align 8, !dbg !17141
  %inc109 = add i64 %69, 1, !dbg !17141
  store i64 %inc109, i64* %len, align 8, !dbg !17141
  br label %do.end110, !dbg !17141

do.end110:                                        ; preds = %if.end108
  br label %do.body111, !dbg !17132

do.body111:                                       ; preds = %do.end110
  %70 = load i64, i64* %len, align 8, !dbg !17142
  %71 = load i64, i64* %buffersize.addr, align 8, !dbg !17142
  %cmp112 = icmp ult i64 %70, %71, !dbg !17142
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !17145

if.then114:                                       ; preds = %do.body111
  %72 = load i8*, i8** %buffer.addr, align 8, !dbg !17142
  %73 = load i64, i64* %len, align 8, !dbg !17142
  %arrayidx115 = getelementptr inbounds i8, i8* %72, i64 %73, !dbg !17142, !ctir !143
  store i8 39, i8* %arrayidx115, align 1, !dbg !17142
  br label %if.end116, !dbg !17142

if.end116:                                        ; preds = %if.then114, %do.body111
  %74 = load i64, i64* %len, align 8, !dbg !17145
  %inc117 = add i64 %74, 1, !dbg !17145
  store i64 %inc117, i64* %len, align 8, !dbg !17145
  br label %do.end118, !dbg !17145

do.end118:                                        ; preds = %if.end116
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !17132
  br label %if.end119, !dbg !17132

if.end119:                                        ; preds = %do.end118, %land.lhs.true92, %if.end89
  br label %do.body120, !dbg !17129

do.body120:                                       ; preds = %if.end119
  %75 = load i64, i64* %len, align 8, !dbg !17146
  %76 = load i64, i64* %buffersize.addr, align 8, !dbg !17146
  %cmp121 = icmp ult i64 %75, %76, !dbg !17146
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !17149

if.then123:                                       ; preds = %do.body120
  %77 = load i8*, i8** %buffer.addr, align 8, !dbg !17146
  %78 = load i64, i64* %len, align 8, !dbg !17146
  %arrayidx124 = getelementptr inbounds i8, i8* %77, i64 %78, !dbg !17146, !ctir !143
  store i8 92, i8* %arrayidx124, align 1, !dbg !17146
  br label %if.end125, !dbg !17146

if.end125:                                        ; preds = %if.then123, %do.body120
  %79 = load i64, i64* %len, align 8, !dbg !17149
  %inc126 = add i64 %79, 1, !dbg !17149
  store i64 %inc126, i64* %len, align 8, !dbg !17149
  br label %do.end127, !dbg !17149

do.end127:                                        ; preds = %if.end125
  br label %do.end128, !dbg !17129

do.end128:                                        ; preds = %do.end127
  %80 = load i32, i32* %quoting_style.addr, align 4, !dbg !17150
  %cmp129 = icmp ne i32 %80, 2, !dbg !17152
  br i1 %cmp129, label %land.lhs.true131, label %if.end164, !dbg !17153

land.lhs.true131:                                 ; preds = %do.end128
  %81 = load i64, i64* %i, align 8, !dbg !17154
  %add132 = add i64 %81, 1, !dbg !17155
  %82 = load i64, i64* %argsize.addr, align 8, !dbg !17156
  %cmp133 = icmp ult i64 %add132, %82, !dbg !17157
  br i1 %cmp133, label %land.lhs.true135, label %if.end164, !dbg !17158

land.lhs.true135:                                 ; preds = %land.lhs.true131
  %83 = load i8*, i8** %arg.addr, align 8, !dbg !17159
  %84 = load i64, i64* %i, align 8, !dbg !17160
  %add136 = add i64 %84, 1, !dbg !17161
  %arrayidx137 = getelementptr inbounds i8, i8* %83, i64 %add136, !dbg !17159, !ctir !146
  %85 = load i8, i8* %arrayidx137, align 1, !dbg !17159
  %conv138 = sext i8 %85 to i32, !dbg !17159
  %cmp139 = icmp sle i32 48, %conv138, !dbg !17162
  br i1 %cmp139, label %land.lhs.true141, label %if.end164, !dbg !17163

land.lhs.true141:                                 ; preds = %land.lhs.true135
  %86 = load i8*, i8** %arg.addr, align 8, !dbg !17164
  %87 = load i64, i64* %i, align 8, !dbg !17165
  %add142 = add i64 %87, 1, !dbg !17166
  %arrayidx143 = getelementptr inbounds i8, i8* %86, i64 %add142, !dbg !17164, !ctir !146
  %88 = load i8, i8* %arrayidx143, align 1, !dbg !17164
  %conv144 = sext i8 %88 to i32, !dbg !17164
  %cmp145 = icmp sle i32 %conv144, 57, !dbg !17167
  br i1 %cmp145, label %if.then147, label %if.end164, !dbg !17168

if.then147:                                       ; preds = %land.lhs.true141
  br label %do.body148, !dbg !17169

do.body148:                                       ; preds = %if.then147
  %89 = load i64, i64* %len, align 8, !dbg !17171
  %90 = load i64, i64* %buffersize.addr, align 8, !dbg !17171
  %cmp149 = icmp ult i64 %89, %90, !dbg !17171
  br i1 %cmp149, label %if.then151, label %if.end153, !dbg !17174

if.then151:                                       ; preds = %do.body148
  %91 = load i8*, i8** %buffer.addr, align 8, !dbg !17171
  %92 = load i64, i64* %len, align 8, !dbg !17171
  %arrayidx152 = getelementptr inbounds i8, i8* %91, i64 %92, !dbg !17171, !ctir !143
  store i8 48, i8* %arrayidx152, align 1, !dbg !17171
  br label %if.end153, !dbg !17171

if.end153:                                        ; preds = %if.then151, %do.body148
  %93 = load i64, i64* %len, align 8, !dbg !17174
  %inc154 = add i64 %93, 1, !dbg !17174
  store i64 %inc154, i64* %len, align 8, !dbg !17174
  br label %do.end155, !dbg !17174

do.end155:                                        ; preds = %if.end153
  br label %do.body156, !dbg !17175

do.body156:                                       ; preds = %do.end155
  %94 = load i64, i64* %len, align 8, !dbg !17176
  %95 = load i64, i64* %buffersize.addr, align 8, !dbg !17176
  %cmp157 = icmp ult i64 %94, %95, !dbg !17176
  br i1 %cmp157, label %if.then159, label %if.end161, !dbg !17179

if.then159:                                       ; preds = %do.body156
  %96 = load i8*, i8** %buffer.addr, align 8, !dbg !17176
  %97 = load i64, i64* %len, align 8, !dbg !17176
  %arrayidx160 = getelementptr inbounds i8, i8* %96, i64 %97, !dbg !17176, !ctir !143
  store i8 48, i8* %arrayidx160, align 1, !dbg !17176
  br label %if.end161, !dbg !17176

if.end161:                                        ; preds = %if.then159, %do.body156
  %98 = load i64, i64* %len, align 8, !dbg !17179
  %inc162 = add i64 %98, 1, !dbg !17179
  store i64 %inc162, i64* %len, align 8, !dbg !17179
  br label %do.end163, !dbg !17179

do.end163:                                        ; preds = %if.end161
  br label %if.end164, !dbg !17180

if.end164:                                        ; preds = %do.end163, %land.lhs.true141, %land.lhs.true135, %land.lhs.true131, %do.end128
  store i8 48, i8* %c, align 1, !dbg !17181
  br label %if.end169, !dbg !17182

if.else:                                          ; preds = %sw.bb83
  %99 = load i32, i32* %flags.addr, align 4, !dbg !17183
  %and165 = and i32 %99, 1, !dbg !17185
  %tobool166 = icmp ne i32 %and165, 0, !dbg !17185
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !17186

if.then167:                                       ; preds = %if.else
  br label %for.inc673, !dbg !17187

if.end168:                                        ; preds = %if.else
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end164
  br label %sw.epilog564, !dbg !17188

sw.bb170:                                         ; preds = %if.end80
  %100 = load i32, i32* %quoting_style.addr, align 4, !dbg !17189
  switch i32 %100, label %sw.default234 [
    i32 2, label %sw.bb171
    i32 5, label %sw.bb175
  ], !dbg !17190

sw.bb171:                                         ; preds = %sw.bb170
  %101 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17191
  %tobool172 = trunc i8 %101 to i1, !dbg !17191
  br i1 %tobool172, label %if.then173, label %if.end174, !dbg !17194

if.then173:                                       ; preds = %sw.bb171
  br label %force_outer_quoting_style, !dbg !17195

if.end174:                                        ; preds = %sw.bb171
  br label %sw.epilog235, !dbg !17196

sw.bb175:                                         ; preds = %sw.bb170
  %102 = load i32, i32* %flags.addr, align 4, !dbg !17197
  %and176 = and i32 %102, 4, !dbg !17199
  %tobool177 = icmp ne i32 %and176, 0, !dbg !17199
  br i1 %tobool177, label %land.lhs.true178, label %if.end233, !dbg !17200

land.lhs.true178:                                 ; preds = %sw.bb175
  %103 = load i64, i64* %i, align 8, !dbg !17201
  %add179 = add i64 %103, 2, !dbg !17202
  %104 = load i64, i64* %argsize.addr, align 8, !dbg !17203
  %cmp180 = icmp ult i64 %add179, %104, !dbg !17204
  br i1 %cmp180, label %land.lhs.true182, label %if.end233, !dbg !17205

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %105 = load i8*, i8** %arg.addr, align 8, !dbg !17206
  %106 = load i64, i64* %i, align 8, !dbg !17207
  %add183 = add i64 %106, 1, !dbg !17208
  %arrayidx184 = getelementptr inbounds i8, i8* %105, i64 %add183, !dbg !17206, !ctir !146
  %107 = load i8, i8* %arrayidx184, align 1, !dbg !17206
  %conv185 = sext i8 %107 to i32, !dbg !17206
  %cmp186 = icmp eq i32 %conv185, 63, !dbg !17209
  br i1 %cmp186, label %if.then188, label %if.end233, !dbg !17210

if.then188:                                       ; preds = %land.lhs.true182
  %108 = load i8*, i8** %arg.addr, align 8, !dbg !17211
  %109 = load i64, i64* %i, align 8, !dbg !17212
  %add189 = add i64 %109, 2, !dbg !17213
  %arrayidx190 = getelementptr inbounds i8, i8* %108, i64 %add189, !dbg !17211, !ctir !146
  %110 = load i8, i8* %arrayidx190, align 1, !dbg !17211
  %conv191 = sext i8 %110 to i32, !dbg !17211
  switch i32 %conv191, label %sw.default231 [
    i32 33, label %sw.bb192
    i32 39, label %sw.bb192
    i32 40, label %sw.bb192
    i32 41, label %sw.bb192
    i32 45, label %sw.bb192
    i32 47, label %sw.bb192
    i32 60, label %sw.bb192
    i32 61, label %sw.bb192
    i32 62, label %sw.bb192
  ], !dbg !17214

sw.bb192:                                         ; preds = %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188
  %111 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17215
  %tobool193 = trunc i8 %111 to i1, !dbg !17215
  br i1 %tobool193, label %if.then194, label %if.end195, !dbg !17218

if.then194:                                       ; preds = %sw.bb192
  br label %force_outer_quoting_style, !dbg !17219

if.end195:                                        ; preds = %sw.bb192
  %112 = load i8*, i8** %arg.addr, align 8, !dbg !17220
  %113 = load i64, i64* %i, align 8, !dbg !17221
  %add196 = add i64 %113, 2, !dbg !17222
  %arrayidx197 = getelementptr inbounds i8, i8* %112, i64 %add196, !dbg !17220, !ctir !146
  %114 = load i8, i8* %arrayidx197, align 1, !dbg !17220
  store i8 %114, i8* %c, align 1, !dbg !17223
  %115 = load i64, i64* %i, align 8, !dbg !17224
  %add198 = add i64 %115, 2, !dbg !17224
  store i64 %add198, i64* %i, align 8, !dbg !17224
  br label %do.body199, !dbg !17225

do.body199:                                       ; preds = %if.end195
  %116 = load i64, i64* %len, align 8, !dbg !17226
  %117 = load i64, i64* %buffersize.addr, align 8, !dbg !17226
  %cmp200 = icmp ult i64 %116, %117, !dbg !17226
  br i1 %cmp200, label %if.then202, label %if.end204, !dbg !17229

if.then202:                                       ; preds = %do.body199
  %118 = load i8*, i8** %buffer.addr, align 8, !dbg !17226
  %119 = load i64, i64* %len, align 8, !dbg !17226
  %arrayidx203 = getelementptr inbounds i8, i8* %118, i64 %119, !dbg !17226, !ctir !143
  store i8 63, i8* %arrayidx203, align 1, !dbg !17226
  br label %if.end204, !dbg !17226

if.end204:                                        ; preds = %if.then202, %do.body199
  %120 = load i64, i64* %len, align 8, !dbg !17229
  %inc205 = add i64 %120, 1, !dbg !17229
  store i64 %inc205, i64* %len, align 8, !dbg !17229
  br label %do.end206, !dbg !17229

do.end206:                                        ; preds = %if.end204
  br label %do.body207, !dbg !17230

do.body207:                                       ; preds = %do.end206
  %121 = load i64, i64* %len, align 8, !dbg !17231
  %122 = load i64, i64* %buffersize.addr, align 8, !dbg !17231
  %cmp208 = icmp ult i64 %121, %122, !dbg !17231
  br i1 %cmp208, label %if.then210, label %if.end212, !dbg !17234

if.then210:                                       ; preds = %do.body207
  %123 = load i8*, i8** %buffer.addr, align 8, !dbg !17231
  %124 = load i64, i64* %len, align 8, !dbg !17231
  %arrayidx211 = getelementptr inbounds i8, i8* %123, i64 %124, !dbg !17231, !ctir !143
  store i8 34, i8* %arrayidx211, align 1, !dbg !17231
  br label %if.end212, !dbg !17231

if.end212:                                        ; preds = %if.then210, %do.body207
  %125 = load i64, i64* %len, align 8, !dbg !17234
  %inc213 = add i64 %125, 1, !dbg !17234
  store i64 %inc213, i64* %len, align 8, !dbg !17234
  br label %do.end214, !dbg !17234

do.end214:                                        ; preds = %if.end212
  br label %do.body215, !dbg !17235

do.body215:                                       ; preds = %do.end214
  %126 = load i64, i64* %len, align 8, !dbg !17236
  %127 = load i64, i64* %buffersize.addr, align 8, !dbg !17236
  %cmp216 = icmp ult i64 %126, %127, !dbg !17236
  br i1 %cmp216, label %if.then218, label %if.end220, !dbg !17239

if.then218:                                       ; preds = %do.body215
  %128 = load i8*, i8** %buffer.addr, align 8, !dbg !17236
  %129 = load i64, i64* %len, align 8, !dbg !17236
  %arrayidx219 = getelementptr inbounds i8, i8* %128, i64 %129, !dbg !17236, !ctir !143
  store i8 34, i8* %arrayidx219, align 1, !dbg !17236
  br label %if.end220, !dbg !17236

if.end220:                                        ; preds = %if.then218, %do.body215
  %130 = load i64, i64* %len, align 8, !dbg !17239
  %inc221 = add i64 %130, 1, !dbg !17239
  store i64 %inc221, i64* %len, align 8, !dbg !17239
  br label %do.end222, !dbg !17239

do.end222:                                        ; preds = %if.end220
  br label %do.body223, !dbg !17240

do.body223:                                       ; preds = %do.end222
  %131 = load i64, i64* %len, align 8, !dbg !17241
  %132 = load i64, i64* %buffersize.addr, align 8, !dbg !17241
  %cmp224 = icmp ult i64 %131, %132, !dbg !17241
  br i1 %cmp224, label %if.then226, label %if.end228, !dbg !17244

if.then226:                                       ; preds = %do.body223
  %133 = load i8*, i8** %buffer.addr, align 8, !dbg !17241
  %134 = load i64, i64* %len, align 8, !dbg !17241
  %arrayidx227 = getelementptr inbounds i8, i8* %133, i64 %134, !dbg !17241, !ctir !143
  store i8 63, i8* %arrayidx227, align 1, !dbg !17241
  br label %if.end228, !dbg !17241

if.end228:                                        ; preds = %if.then226, %do.body223
  %135 = load i64, i64* %len, align 8, !dbg !17244
  %inc229 = add i64 %135, 1, !dbg !17244
  store i64 %inc229, i64* %len, align 8, !dbg !17244
  br label %do.end230, !dbg !17244

do.end230:                                        ; preds = %if.end228
  br label %sw.epilog232, !dbg !17245

sw.default231:                                    ; preds = %if.then188
  br label %sw.epilog232, !dbg !17246

sw.epilog232:                                     ; preds = %sw.default231, %do.end230
  br label %if.end233, !dbg !17247

if.end233:                                        ; preds = %sw.epilog232, %land.lhs.true182, %land.lhs.true178, %sw.bb175
  br label %sw.epilog235, !dbg !17248

sw.default234:                                    ; preds = %sw.bb170
  br label %sw.epilog235, !dbg !17249

sw.epilog235:                                     ; preds = %sw.default234, %if.end233, %if.end174
  br label %sw.epilog564, !dbg !17250

sw.bb236:                                         ; preds = %if.end80
  store i8 97, i8* %esc, align 1, !dbg !17251
  br label %c_escape, !dbg !17252

sw.bb237:                                         ; preds = %if.end80
  store i8 98, i8* %esc, align 1, !dbg !17253
  br label %c_escape, !dbg !17254

sw.bb238:                                         ; preds = %if.end80
  store i8 102, i8* %esc, align 1, !dbg !17255
  br label %c_escape, !dbg !17256

sw.bb239:                                         ; preds = %if.end80
  store i8 110, i8* %esc, align 1, !dbg !17257
  br label %c_and_shell_escape, !dbg !17258

sw.bb240:                                         ; preds = %if.end80
  store i8 114, i8* %esc, align 1, !dbg !17259
  br label %c_and_shell_escape, !dbg !17260

sw.bb241:                                         ; preds = %if.end80
  store i8 116, i8* %esc, align 1, !dbg !17261
  br label %c_and_shell_escape, !dbg !17262

sw.bb242:                                         ; preds = %if.end80
  store i8 118, i8* %esc, align 1, !dbg !17263
  br label %c_escape, !dbg !17264

sw.bb243:                                         ; preds = %if.end80
  %136 = load i8, i8* %c, align 1, !dbg !17265
  store i8 %136, i8* %esc, align 1, !dbg !17266
  %137 = load i32, i32* %quoting_style.addr, align 4, !dbg !17267
  %cmp244 = icmp eq i32 %137, 2, !dbg !17269
  br i1 %cmp244, label %if.then246, label %if.end250, !dbg !17270

if.then246:                                       ; preds = %sw.bb243
  %138 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17271
  %tobool247 = trunc i8 %138 to i1, !dbg !17271
  br i1 %tobool247, label %if.then248, label %if.end249, !dbg !17274

if.then248:                                       ; preds = %if.then246
  br label %force_outer_quoting_style, !dbg !17275

if.end249:                                        ; preds = %if.then246
  br label %store_c, !dbg !17276

if.end250:                                        ; preds = %sw.bb243
  %139 = load i8, i8* %backslash_escapes, align 1, !dbg !17277
  %tobool251 = trunc i8 %139 to i1, !dbg !17277
  br i1 %tobool251, label %land.lhs.true253, label %if.end259, !dbg !17279

land.lhs.true253:                                 ; preds = %if.end250
  %140 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17280
  %tobool254 = trunc i8 %140 to i1, !dbg !17280
  br i1 %tobool254, label %land.lhs.true256, label %if.end259, !dbg !17281

land.lhs.true256:                                 ; preds = %land.lhs.true253
  %141 = load i64, i64* %quote_string_len, align 8, !dbg !17282
  %tobool257 = icmp ne i64 %141, 0, !dbg !17282
  br i1 %tobool257, label %if.then258, label %if.end259, !dbg !17283

if.then258:                                       ; preds = %land.lhs.true256
  br label %store_c, !dbg !17284

if.end259:                                        ; preds = %land.lhs.true256, %land.lhs.true253, %if.end250
  br label %c_and_shell_escape, !dbg !17282

c_and_shell_escape:                               ; preds = %if.end259, %sw.bb241, %sw.bb240, %sw.bb239
  call void @llvm.dbg.label(metadata !17285), !dbg !17286
  %142 = load i32, i32* %quoting_style.addr, align 4, !dbg !17287
  %cmp260 = icmp eq i32 %142, 2, !dbg !17289
  br i1 %cmp260, label %land.lhs.true262, label %if.end266, !dbg !17290

land.lhs.true262:                                 ; preds = %c_and_shell_escape
  %143 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17291
  %tobool263 = trunc i8 %143 to i1, !dbg !17291
  br i1 %tobool263, label %if.then265, label %if.end266, !dbg !17292

if.then265:                                       ; preds = %land.lhs.true262
  br label %force_outer_quoting_style, !dbg !17293

if.end266:                                        ; preds = %land.lhs.true262, %c_and_shell_escape
  br label %c_escape, !dbg !17291

c_escape:                                         ; preds = %if.end266, %sw.bb242, %sw.bb238, %sw.bb237, %sw.bb236
  call void @llvm.dbg.label(metadata !17294), !dbg !17295
  %144 = load i8, i8* %backslash_escapes, align 1, !dbg !17296
  %tobool267 = trunc i8 %144 to i1, !dbg !17296
  br i1 %tobool267, label %if.then268, label %if.end269, !dbg !17298

if.then268:                                       ; preds = %c_escape
  %145 = load i8, i8* %esc, align 1, !dbg !17299
  store i8 %145, i8* %c, align 1, !dbg !17301
  br label %store_escape, !dbg !17302

if.end269:                                        ; preds = %c_escape
  br label %sw.epilog564, !dbg !17303

sw.bb270:                                         ; preds = %if.end80, %if.end80
  %146 = load i64, i64* %argsize.addr, align 8, !dbg !17304
  %cmp271 = icmp eq i64 %146, -1, !dbg !17306
  br i1 %cmp271, label %cond.true273, label %cond.false278, !dbg !17307

cond.true273:                                     ; preds = %sw.bb270
  %147 = load i8*, i8** %arg.addr, align 8, !dbg !17308
  %arrayidx274 = getelementptr inbounds i8, i8* %147, i64 1, !dbg !17308, !ctir !146
  %148 = load i8, i8* %arrayidx274, align 1, !dbg !17308
  %conv275 = sext i8 %148 to i32, !dbg !17308
  %cmp276 = icmp eq i32 %conv275, 0, !dbg !17309
  br i1 %cmp276, label %if.end282, label %if.then281, !dbg !17304

cond.false278:                                    ; preds = %sw.bb270
  %149 = load i64, i64* %argsize.addr, align 8, !dbg !17310
  %cmp279 = icmp eq i64 %149, 1, !dbg !17311
  br i1 %cmp279, label %if.end282, label %if.then281, !dbg !17307

if.then281:                                       ; preds = %cond.false278, %cond.true273
  br label %sw.epilog564, !dbg !17312

if.end282:                                        ; preds = %cond.false278, %cond.true273
  br label %sw.bb283, !dbg !17313

sw.bb283:                                         ; preds = %if.end80, %if.end80, %if.end282
  %150 = load i64, i64* %i, align 8, !dbg !17314
  %cmp284 = icmp ne i64 %150, 0, !dbg !17316
  br i1 %cmp284, label %if.then286, label %if.end287, !dbg !17317

if.then286:                                       ; preds = %sw.bb283
  br label %sw.epilog564, !dbg !17318

if.end287:                                        ; preds = %sw.bb283
  br label %sw.bb288, !dbg !17319

sw.bb288:                                         ; preds = %if.end80, %if.end287
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !17320
  br label %sw.bb289, !dbg !17321

sw.bb289:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %sw.bb288
  %151 = load i32, i32* %quoting_style.addr, align 4, !dbg !17322
  %cmp290 = icmp eq i32 %151, 2, !dbg !17324
  br i1 %cmp290, label %land.lhs.true292, label %if.end296, !dbg !17325

land.lhs.true292:                                 ; preds = %sw.bb289
  %152 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17326
  %tobool293 = trunc i8 %152 to i1, !dbg !17326
  br i1 %tobool293, label %if.then295, label %if.end296, !dbg !17327

if.then295:                                       ; preds = %land.lhs.true292
  br label %force_outer_quoting_style, !dbg !17328

if.end296:                                        ; preds = %land.lhs.true292, %sw.bb289
  br label %sw.epilog564, !dbg !17329

sw.bb297:                                         ; preds = %if.end80
  store i8 1, i8* %encountered_single_quote, align 1, !dbg !17330
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !17331
  %153 = load i32, i32* %quoting_style.addr, align 4, !dbg !17332
  %cmp298 = icmp eq i32 %153, 2, !dbg !17334
  br i1 %cmp298, label %if.then300, label %if.end333, !dbg !17335

if.then300:                                       ; preds = %sw.bb297
  %154 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17336
  %tobool301 = trunc i8 %154 to i1, !dbg !17336
  br i1 %tobool301, label %if.then302, label %if.end303, !dbg !17339

if.then302:                                       ; preds = %if.then300
  br label %force_outer_quoting_style, !dbg !17340

if.end303:                                        ; preds = %if.then300
  %155 = load i64, i64* %buffersize.addr, align 8, !dbg !17341
  %tobool304 = icmp ne i64 %155, 0, !dbg !17341
  br i1 %tobool304, label %land.lhs.true305, label %if.end308, !dbg !17343

land.lhs.true305:                                 ; preds = %if.end303
  %156 = load i64, i64* %orig_buffersize, align 8, !dbg !17344
  %tobool306 = icmp ne i64 %156, 0, !dbg !17344
  br i1 %tobool306, label %if.end308, label %if.then307, !dbg !17345

if.then307:                                       ; preds = %land.lhs.true305
  %157 = load i64, i64* %buffersize.addr, align 8, !dbg !17346
  store i64 %157, i64* %orig_buffersize, align 8, !dbg !17348
  store i64 0, i64* %buffersize.addr, align 8, !dbg !17349
  br label %if.end308, !dbg !17350

if.end308:                                        ; preds = %if.then307, %land.lhs.true305, %if.end303
  br label %do.body309, !dbg !17351

do.body309:                                       ; preds = %if.end308
  %158 = load i64, i64* %len, align 8, !dbg !17352
  %159 = load i64, i64* %buffersize.addr, align 8, !dbg !17352
  %cmp310 = icmp ult i64 %158, %159, !dbg !17352
  br i1 %cmp310, label %if.then312, label %if.end314, !dbg !17355

if.then312:                                       ; preds = %do.body309
  %160 = load i8*, i8** %buffer.addr, align 8, !dbg !17352
  %161 = load i64, i64* %len, align 8, !dbg !17352
  %arrayidx313 = getelementptr inbounds i8, i8* %160, i64 %161, !dbg !17352, !ctir !143
  store i8 39, i8* %arrayidx313, align 1, !dbg !17352
  br label %if.end314, !dbg !17352

if.end314:                                        ; preds = %if.then312, %do.body309
  %162 = load i64, i64* %len, align 8, !dbg !17355
  %inc315 = add i64 %162, 1, !dbg !17355
  store i64 %inc315, i64* %len, align 8, !dbg !17355
  br label %do.end316, !dbg !17355

do.end316:                                        ; preds = %if.end314
  br label %do.body317, !dbg !17356

do.body317:                                       ; preds = %do.end316
  %163 = load i64, i64* %len, align 8, !dbg !17357
  %164 = load i64, i64* %buffersize.addr, align 8, !dbg !17357
  %cmp318 = icmp ult i64 %163, %164, !dbg !17357
  br i1 %cmp318, label %if.then320, label %if.end322, !dbg !17360

if.then320:                                       ; preds = %do.body317
  %165 = load i8*, i8** %buffer.addr, align 8, !dbg !17357
  %166 = load i64, i64* %len, align 8, !dbg !17357
  %arrayidx321 = getelementptr inbounds i8, i8* %165, i64 %166, !dbg !17357, !ctir !143
  store i8 92, i8* %arrayidx321, align 1, !dbg !17357
  br label %if.end322, !dbg !17357

if.end322:                                        ; preds = %if.then320, %do.body317
  %167 = load i64, i64* %len, align 8, !dbg !17360
  %inc323 = add i64 %167, 1, !dbg !17360
  store i64 %inc323, i64* %len, align 8, !dbg !17360
  br label %do.end324, !dbg !17360

do.end324:                                        ; preds = %if.end322
  br label %do.body325, !dbg !17361

do.body325:                                       ; preds = %do.end324
  %168 = load i64, i64* %len, align 8, !dbg !17362
  %169 = load i64, i64* %buffersize.addr, align 8, !dbg !17362
  %cmp326 = icmp ult i64 %168, %169, !dbg !17362
  br i1 %cmp326, label %if.then328, label %if.end330, !dbg !17365

if.then328:                                       ; preds = %do.body325
  %170 = load i8*, i8** %buffer.addr, align 8, !dbg !17362
  %171 = load i64, i64* %len, align 8, !dbg !17362
  %arrayidx329 = getelementptr inbounds i8, i8* %170, i64 %171, !dbg !17362, !ctir !143
  store i8 39, i8* %arrayidx329, align 1, !dbg !17362
  br label %if.end330, !dbg !17362

if.end330:                                        ; preds = %if.then328, %do.body325
  %172 = load i64, i64* %len, align 8, !dbg !17365
  %inc331 = add i64 %172, 1, !dbg !17365
  store i64 %inc331, i64* %len, align 8, !dbg !17365
  br label %do.end332, !dbg !17365

do.end332:                                        ; preds = %if.end330
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !17366
  br label %if.end333, !dbg !17367

if.end333:                                        ; preds = %do.end332, %sw.bb297
  br label %sw.epilog564, !dbg !17368

sw.bb334:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !17369
  br label %sw.epilog564, !dbg !17370

sw.default335:                                    ; preds = %if.end80
  call void @llvm.dbg.declare(metadata i64* %m, metadata !17371, metadata !DIExpression()), !dbg !17373
  call void @llvm.dbg.declare(metadata i8* %printable, metadata !17374, metadata !DIExpression()), !dbg !17375
  %173 = load i8, i8* %unibyte_locale, align 1, !dbg !17376
  %tobool336 = trunc i8 %173 to i1, !dbg !17376
  br i1 %tobool336, label %if.then337, label %if.else346, !dbg !17378

if.then337:                                       ; preds = %sw.default335
  store i64 1, i64* %m, align 8, !dbg !17379
  %call338 = call i16** @__ctype_b_loc() #17, !dbg !17381
  %174 = load i16*, i16** %call338, align 8, !dbg !17381, !ctir !708
  %175 = load i8, i8* %c, align 1, !dbg !17381
  %conv339 = zext i8 %175 to i32, !dbg !17381
  %idxprom = sext i32 %conv339 to i64, !dbg !17381
  %arrayidx340 = getelementptr inbounds i16, i16* %174, i64 %idxprom, !dbg !17381, !ctir !708
  %176 = load i16, i16* %arrayidx340, align 2, !dbg !17381
  %conv341 = zext i16 %176 to i32, !dbg !17381
  %and342 = and i32 %conv341, 16384, !dbg !17381
  %cmp343 = icmp ne i32 %and342, 0, !dbg !17382
  %frombool345 = zext i1 %cmp343 to i8, !dbg !17383
  store i8 %frombool345, i8* %printable, align 1, !dbg !17383
  br label %if.end410, !dbg !17384

if.else346:                                       ; preds = %sw.default335
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %mbstate, metadata !17385, metadata !DIExpression()), !dbg !17387
  %177 = bitcast %struct.__mbstate_t* %mbstate to i8*, !dbg !17388
  call void @llvm.memset.p0i8.i64(i8* align 4 %177, i8 0, i64 8, i1 false), !dbg !17388
  store i64 0, i64* %m, align 8, !dbg !17389
  store i8 1, i8* %printable, align 1, !dbg !17390
  %178 = load i64, i64* %argsize.addr, align 8, !dbg !17391
  %cmp347 = icmp eq i64 %178, -1, !dbg !17393
  br i1 %cmp347, label %if.then349, label %if.end351, !dbg !17394

if.then349:                                       ; preds = %if.else346
  %179 = load i8*, i8** %arg.addr, align 8, !dbg !17395
  %call350 = call i64 @strlen(i8* %179) #16, !dbg !17396
  store i64 %call350, i64* %argsize.addr, align 8, !dbg !17397
  br label %if.end351, !dbg !17398

if.end351:                                        ; preds = %if.then349, %if.else346
  br label %do.body352, !dbg !17399

do.body352:                                       ; preds = %do.cond, %if.end351
  call void @llvm.dbg.declare(metadata i32* %w, metadata !17400, metadata !DIExpression()), !dbg !17402
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !17403, metadata !DIExpression()), !dbg !17404
  %180 = load i8*, i8** %arg.addr, align 8, !dbg !17405
  %181 = load i64, i64* %i, align 8, !dbg !17406
  %182 = load i64, i64* %m, align 8, !dbg !17407
  %add353 = add i64 %181, %182, !dbg !17408
  %arrayidx354 = getelementptr inbounds i8, i8* %180, i64 %add353, !dbg !17405, !ctir !146
  %183 = load i64, i64* %argsize.addr, align 8, !dbg !17409
  %184 = load i64, i64* %i, align 8, !dbg !17410
  %185 = load i64, i64* %m, align 8, !dbg !17411
  %add355 = add i64 %184, %185, !dbg !17412
  %sub = sub i64 %183, %add355, !dbg !17413
  %call356 = call i64 @rpl_mbrtowc(i32* %w, i8* %arrayidx354, i64 %sub, %struct.__mbstate_t* %mbstate), !dbg !17414
  store i64 %call356, i64* %bytes, align 8, !dbg !17404
  %186 = load i64, i64* %bytes, align 8, !dbg !17415
  %cmp357 = icmp eq i64 %186, 0, !dbg !17417
  br i1 %cmp357, label %if.then359, label %if.else360, !dbg !17418

if.then359:                                       ; preds = %do.body352
  br label %do.end409, !dbg !17419

if.else360:                                       ; preds = %do.body352
  %187 = load i64, i64* %bytes, align 8, !dbg !17420
  %cmp361 = icmp eq i64 %187, -1, !dbg !17422
  br i1 %cmp361, label %if.then363, label %if.else364, !dbg !17423

if.then363:                                       ; preds = %if.else360
  store i8 0, i8* %printable, align 1, !dbg !17424
  br label %do.end409, !dbg !17426

if.else364:                                       ; preds = %if.else360
  %188 = load i64, i64* %bytes, align 8, !dbg !17427
  %cmp365 = icmp eq i64 %188, -2, !dbg !17429
  br i1 %cmp365, label %if.then367, label %if.else376, !dbg !17430

if.then367:                                       ; preds = %if.else364
  store i8 0, i8* %printable, align 1, !dbg !17431
  br label %while.cond, !dbg !17433

while.cond:                                       ; preds = %while.body, %if.then367
  %189 = load i64, i64* %i, align 8, !dbg !17434
  %190 = load i64, i64* %m, align 8, !dbg !17435
  %add368 = add i64 %189, %190, !dbg !17436
  %191 = load i64, i64* %argsize.addr, align 8, !dbg !17437
  %cmp369 = icmp ult i64 %add368, %191, !dbg !17438
  br i1 %cmp369, label %land.rhs, label %land.end, !dbg !17439

land.rhs:                                         ; preds = %while.cond
  %192 = load i8*, i8** %arg.addr, align 8, !dbg !17440
  %193 = load i64, i64* %i, align 8, !dbg !17441
  %194 = load i64, i64* %m, align 8, !dbg !17442
  %add371 = add i64 %193, %194, !dbg !17443
  %arrayidx372 = getelementptr inbounds i8, i8* %192, i64 %add371, !dbg !17440, !ctir !146
  %195 = load i8, i8* %arrayidx372, align 1, !dbg !17440
  %conv373 = sext i8 %195 to i32, !dbg !17440
  %tobool374 = icmp ne i32 %conv373, 0, !dbg !17439
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %196 = phi i1 [ false, %while.cond ], [ %tobool374, %land.rhs ], !dbg !17444
  br i1 %196, label %while.body, label %while.end, !dbg !17433

while.body:                                       ; preds = %land.end
  %197 = load i64, i64* %m, align 8, !dbg !17445
  %inc375 = add i64 %197, 1, !dbg !17445
  store i64 %inc375, i64* %m, align 8, !dbg !17445
  br label %while.cond, !dbg !17433, !llvm.loop !17446

while.end:                                        ; preds = %land.end
  br label %do.end409, !dbg !17447

if.else376:                                       ; preds = %if.else364
  %198 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17448
  %tobool377 = trunc i8 %198 to i1, !dbg !17448
  br i1 %tobool377, label %land.lhs.true379, label %if.end397, !dbg !17451

land.lhs.true379:                                 ; preds = %if.else376
  %199 = load i32, i32* %quoting_style.addr, align 4, !dbg !17452
  %cmp380 = icmp eq i32 %199, 2, !dbg !17453
  br i1 %cmp380, label %if.then382, label %if.end397, !dbg !17454

if.then382:                                       ; preds = %land.lhs.true379
  call void @llvm.dbg.declare(metadata i64* %j, metadata !17455, metadata !DIExpression()), !dbg !17457
  store i64 1, i64* %j, align 8, !dbg !17458
  br label %for.cond383, !dbg !17460

for.cond383:                                      ; preds = %for.inc394, %if.then382
  %200 = load i64, i64* %j, align 8, !dbg !17461
  %201 = load i64, i64* %bytes, align 8, !dbg !17463
  %cmp384 = icmp ult i64 %200, %201, !dbg !17464
  br i1 %cmp384, label %for.body386, label %for.end396, !dbg !17465

for.body386:                                      ; preds = %for.cond383
  %202 = load i8*, i8** %arg.addr, align 8, !dbg !17466
  %203 = load i64, i64* %i, align 8, !dbg !17467
  %204 = load i64, i64* %m, align 8, !dbg !17468
  %add387 = add i64 %203, %204, !dbg !17469
  %205 = load i64, i64* %j, align 8, !dbg !17470
  %add388 = add i64 %add387, %205, !dbg !17471
  %arrayidx389 = getelementptr inbounds i8, i8* %202, i64 %add388, !dbg !17466, !ctir !146
  %206 = load i8, i8* %arrayidx389, align 1, !dbg !17466
  %conv390 = sext i8 %206 to i32, !dbg !17466
  switch i32 %conv390, label %sw.default392 [
    i32 91, label %sw.bb391
    i32 92, label %sw.bb391
    i32 94, label %sw.bb391
    i32 96, label %sw.bb391
    i32 124, label %sw.bb391
  ], !dbg !17472

sw.bb391:                                         ; preds = %for.body386, %for.body386, %for.body386, %for.body386, %for.body386
  br label %force_outer_quoting_style, !dbg !17473

sw.default392:                                    ; preds = %for.body386
  br label %sw.epilog393, !dbg !17475

sw.epilog393:                                     ; preds = %sw.default392
  br label %for.inc394, !dbg !17476

for.inc394:                                       ; preds = %sw.epilog393
  %207 = load i64, i64* %j, align 8, !dbg !17477
  %inc395 = add i64 %207, 1, !dbg !17477
  store i64 %inc395, i64* %j, align 8, !dbg !17477
  br label %for.cond383, !dbg !17478, !llvm.loop !17479

for.end396:                                       ; preds = %for.cond383
  br label %if.end397, !dbg !17481

if.end397:                                        ; preds = %for.end396, %land.lhs.true379, %if.else376
  %208 = load i32, i32* %w, align 4, !dbg !17482
  %call398 = call i32 @iswprint(i32 %208) #13, !dbg !17484
  %tobool399 = icmp ne i32 %call398, 0, !dbg !17484
  br i1 %tobool399, label %if.end401, label %if.then400, !dbg !17485

if.then400:                                       ; preds = %if.end397
  store i8 0, i8* %printable, align 1, !dbg !17486
  br label %if.end401, !dbg !17487

if.end401:                                        ; preds = %if.then400, %if.end397
  %209 = load i64, i64* %bytes, align 8, !dbg !17488
  %210 = load i64, i64* %m, align 8, !dbg !17489
  %add402 = add i64 %210, %209, !dbg !17489
  store i64 %add402, i64* %m, align 8, !dbg !17489
  br label %if.end403

if.end403:                                        ; preds = %if.end401
  br label %if.end404

if.end404:                                        ; preds = %if.end403
  br label %if.end405

if.end405:                                        ; preds = %if.end404
  br label %do.cond, !dbg !17490

do.cond:                                          ; preds = %if.end405
  %call406 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #16, !dbg !17491
  %tobool407 = icmp ne i32 %call406, 0, !dbg !17492
  %lnot408 = xor i1 %tobool407, true, !dbg !17492
  br i1 %lnot408, label %do.body352, label %do.end409, !dbg !17490, !llvm.loop !17493

do.end409:                                        ; preds = %do.cond, %while.end, %if.then363, %if.then359
  br label %if.end410

if.end410:                                        ; preds = %do.end409, %if.then337
  %211 = load i8, i8* %printable, align 1, !dbg !17495
  %tobool411 = trunc i8 %211 to i1, !dbg !17495
  %frombool412 = zext i1 %tobool411 to i8, !dbg !17496
  store i8 %frombool412, i8* %c_and_shell_quote_compat, align 1, !dbg !17496
  %212 = load i64, i64* %m, align 8, !dbg !17497
  %cmp413 = icmp ult i64 1, %212, !dbg !17499
  br i1 %cmp413, label %if.then419, label %lor.lhs.false, !dbg !17500

lor.lhs.false:                                    ; preds = %if.end410
  %213 = load i8, i8* %backslash_escapes, align 1, !dbg !17501
  %tobool415 = trunc i8 %213 to i1, !dbg !17501
  br i1 %tobool415, label %land.lhs.true417, label %if.end563, !dbg !17502

land.lhs.true417:                                 ; preds = %lor.lhs.false
  %214 = load i8, i8* %printable, align 1, !dbg !17503
  %tobool418 = trunc i8 %214 to i1, !dbg !17503
  br i1 %tobool418, label %if.end563, label %if.then419, !dbg !17504

if.then419:                                       ; preds = %land.lhs.true417, %if.end410
  call void @llvm.dbg.declare(metadata i64* %ilim, metadata !17505, metadata !DIExpression()), !dbg !17507
  %215 = load i64, i64* %i, align 8, !dbg !17508
  %216 = load i64, i64* %m, align 8, !dbg !17509
  %add420 = add i64 %215, %216, !dbg !17510
  store i64 %add420, i64* %ilim, align 8, !dbg !17507
  br label %for.cond421, !dbg !17511

for.cond421:                                      ; preds = %do.end559, %if.then419
  %217 = load i8, i8* %backslash_escapes, align 1, !dbg !17512
  %tobool422 = trunc i8 %217 to i1, !dbg !17512
  br i1 %tobool422, label %land.lhs.true424, label %if.else505, !dbg !17517

land.lhs.true424:                                 ; preds = %for.cond421
  %218 = load i8, i8* %printable, align 1, !dbg !17518
  %tobool425 = trunc i8 %218 to i1, !dbg !17518
  br i1 %tobool425, label %if.else505, label %if.then426, !dbg !17519

if.then426:                                       ; preds = %land.lhs.true424
  br label %do.body427, !dbg !17520

do.body427:                                       ; preds = %if.then426
  %219 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17522
  %tobool428 = trunc i8 %219 to i1, !dbg !17522
  br i1 %tobool428, label %if.then429, label %if.end430, !dbg !17525

if.then429:                                       ; preds = %do.body427
  br label %force_outer_quoting_style, !dbg !17522

if.end430:                                        ; preds = %do.body427
  store i8 1, i8* %escaping, align 1, !dbg !17525
  %220 = load i32, i32* %quoting_style.addr, align 4, !dbg !17526
  %cmp431 = icmp eq i32 %220, 2, !dbg !17526
  br i1 %cmp431, label %land.lhs.true433, label %if.end463, !dbg !17526

land.lhs.true433:                                 ; preds = %if.end430
  %221 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !17526
  %tobool434 = trunc i8 %221 to i1, !dbg !17526
  br i1 %tobool434, label %if.end463, label %if.then435, !dbg !17525

if.then435:                                       ; preds = %land.lhs.true433
  br label %do.body436, !dbg !17528

do.body436:                                       ; preds = %if.then435
  %222 = load i64, i64* %len, align 8, !dbg !17530
  %223 = load i64, i64* %buffersize.addr, align 8, !dbg !17530
  %cmp437 = icmp ult i64 %222, %223, !dbg !17530
  br i1 %cmp437, label %if.then439, label %if.end441, !dbg !17533

if.then439:                                       ; preds = %do.body436
  %224 = load i8*, i8** %buffer.addr, align 8, !dbg !17530
  %225 = load i64, i64* %len, align 8, !dbg !17530
  %arrayidx440 = getelementptr inbounds i8, i8* %224, i64 %225, !dbg !17530, !ctir !143
  store i8 39, i8* %arrayidx440, align 1, !dbg !17530
  br label %if.end441, !dbg !17530

if.end441:                                        ; preds = %if.then439, %do.body436
  %226 = load i64, i64* %len, align 8, !dbg !17533
  %inc442 = add i64 %226, 1, !dbg !17533
  store i64 %inc442, i64* %len, align 8, !dbg !17533
  br label %do.end444, !dbg !17533

do.end444:                                        ; preds = %if.end441
  br label %do.body445, !dbg !17528

do.body445:                                       ; preds = %do.end444
  %227 = load i64, i64* %len, align 8, !dbg !17534
  %228 = load i64, i64* %buffersize.addr, align 8, !dbg !17534
  %cmp446 = icmp ult i64 %227, %228, !dbg !17534
  br i1 %cmp446, label %if.then448, label %if.end450, !dbg !17537

if.then448:                                       ; preds = %do.body445
  %229 = load i8*, i8** %buffer.addr, align 8, !dbg !17534
  %230 = load i64, i64* %len, align 8, !dbg !17534
  %arrayidx449 = getelementptr inbounds i8, i8* %229, i64 %230, !dbg !17534, !ctir !143
  store i8 36, i8* %arrayidx449, align 1, !dbg !17534
  br label %if.end450, !dbg !17534

if.end450:                                        ; preds = %if.then448, %do.body445
  %231 = load i64, i64* %len, align 8, !dbg !17537
  %inc451 = add i64 %231, 1, !dbg !17537
  store i64 %inc451, i64* %len, align 8, !dbg !17537
  br label %do.end453, !dbg !17537

do.end453:                                        ; preds = %if.end450
  br label %do.body454, !dbg !17528

do.body454:                                       ; preds = %do.end453
  %232 = load i64, i64* %len, align 8, !dbg !17538
  %233 = load i64, i64* %buffersize.addr, align 8, !dbg !17538
  %cmp455 = icmp ult i64 %232, %233, !dbg !17538
  br i1 %cmp455, label %if.then457, label %if.end459, !dbg !17541

if.then457:                                       ; preds = %do.body454
  %234 = load i8*, i8** %buffer.addr, align 8, !dbg !17538
  %235 = load i64, i64* %len, align 8, !dbg !17538
  %arrayidx458 = getelementptr inbounds i8, i8* %234, i64 %235, !dbg !17538, !ctir !143
  store i8 39, i8* %arrayidx458, align 1, !dbg !17538
  br label %if.end459, !dbg !17538

if.end459:                                        ; preds = %if.then457, %do.body454
  %236 = load i64, i64* %len, align 8, !dbg !17541
  %inc460 = add i64 %236, 1, !dbg !17541
  store i64 %inc460, i64* %len, align 8, !dbg !17541
  br label %do.end462, !dbg !17541

do.end462:                                        ; preds = %if.end459
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !17528
  br label %if.end463, !dbg !17528

if.end463:                                        ; preds = %do.end462, %land.lhs.true433, %if.end430
  br label %do.body464, !dbg !17525

do.body464:                                       ; preds = %if.end463
  %237 = load i64, i64* %len, align 8, !dbg !17542
  %238 = load i64, i64* %buffersize.addr, align 8, !dbg !17542
  %cmp465 = icmp ult i64 %237, %238, !dbg !17542
  br i1 %cmp465, label %if.then467, label %if.end469, !dbg !17545

if.then467:                                       ; preds = %do.body464
  %239 = load i8*, i8** %buffer.addr, align 8, !dbg !17542
  %240 = load i64, i64* %len, align 8, !dbg !17542
  %arrayidx468 = getelementptr inbounds i8, i8* %239, i64 %240, !dbg !17542, !ctir !143
  store i8 92, i8* %arrayidx468, align 1, !dbg !17542
  br label %if.end469, !dbg !17542

if.end469:                                        ; preds = %if.then467, %do.body464
  %241 = load i64, i64* %len, align 8, !dbg !17545
  %inc470 = add i64 %241, 1, !dbg !17545
  store i64 %inc470, i64* %len, align 8, !dbg !17545
  br label %do.end472, !dbg !17545

do.end472:                                        ; preds = %if.end469
  br label %do.end474, !dbg !17525

do.end474:                                        ; preds = %do.end472
  br label %do.body475, !dbg !17546

do.body475:                                       ; preds = %do.end474
  %242 = load i64, i64* %len, align 8, !dbg !17547
  %243 = load i64, i64* %buffersize.addr, align 8, !dbg !17547
  %cmp476 = icmp ult i64 %242, %243, !dbg !17547
  br i1 %cmp476, label %if.then478, label %if.end483, !dbg !17550

if.then478:                                       ; preds = %do.body475
  %244 = load i8, i8* %c, align 1, !dbg !17547
  %conv479 = zext i8 %244 to i32, !dbg !17547
  %shr = ashr i32 %conv479, 6, !dbg !17547
  %add480 = add nsw i32 48, %shr, !dbg !17547
  %conv481 = trunc i32 %add480 to i8, !dbg !17547
  %245 = load i8*, i8** %buffer.addr, align 8, !dbg !17547
  %246 = load i64, i64* %len, align 8, !dbg !17547
  %arrayidx482 = getelementptr inbounds i8, i8* %245, i64 %246, !dbg !17547, !ctir !143
  store i8 %conv481, i8* %arrayidx482, align 1, !dbg !17547
  br label %if.end483, !dbg !17547

if.end483:                                        ; preds = %if.then478, %do.body475
  %247 = load i64, i64* %len, align 8, !dbg !17550
  %inc484 = add i64 %247, 1, !dbg !17550
  store i64 %inc484, i64* %len, align 8, !dbg !17550
  br label %do.end486, !dbg !17550

do.end486:                                        ; preds = %if.end483
  br label %do.body487, !dbg !17551

do.body487:                                       ; preds = %do.end486
  %248 = load i64, i64* %len, align 8, !dbg !17552
  %249 = load i64, i64* %buffersize.addr, align 8, !dbg !17552
  %cmp488 = icmp ult i64 %248, %249, !dbg !17552
  br i1 %cmp488, label %if.then490, label %if.end497, !dbg !17555

if.then490:                                       ; preds = %do.body487
  %250 = load i8, i8* %c, align 1, !dbg !17552
  %conv491 = zext i8 %250 to i32, !dbg !17552
  %shr492 = ashr i32 %conv491, 3, !dbg !17552
  %and493 = and i32 %shr492, 7, !dbg !17552
  %add494 = add nsw i32 48, %and493, !dbg !17552
  %conv495 = trunc i32 %add494 to i8, !dbg !17552
  %251 = load i8*, i8** %buffer.addr, align 8, !dbg !17552
  %252 = load i64, i64* %len, align 8, !dbg !17552
  %arrayidx496 = getelementptr inbounds i8, i8* %251, i64 %252, !dbg !17552, !ctir !143
  store i8 %conv495, i8* %arrayidx496, align 1, !dbg !17552
  br label %if.end497, !dbg !17552

if.end497:                                        ; preds = %if.then490, %do.body487
  %253 = load i64, i64* %len, align 8, !dbg !17555
  %inc498 = add i64 %253, 1, !dbg !17555
  store i64 %inc498, i64* %len, align 8, !dbg !17555
  br label %do.end500, !dbg !17555

do.end500:                                        ; preds = %if.end497
  %254 = load i8, i8* %c, align 1, !dbg !17556
  %conv501 = zext i8 %254 to i32, !dbg !17556
  %and502 = and i32 %conv501, 7, !dbg !17557
  %add503 = add nsw i32 48, %and502, !dbg !17558
  %conv504 = trunc i32 %add503 to i8, !dbg !17559
  store i8 %conv504, i8* %c, align 1, !dbg !17560
  br label %if.end518, !dbg !17561

if.else505:                                       ; preds = %land.lhs.true424, %for.cond421
  %255 = load i8, i8* %is_right_quote, align 1, !dbg !17562
  %tobool506 = trunc i8 %255 to i1, !dbg !17562
  br i1 %tobool506, label %if.then507, label %if.end517, !dbg !17564

if.then507:                                       ; preds = %if.else505
  br label %do.body508, !dbg !17565

do.body508:                                       ; preds = %if.then507
  %256 = load i64, i64* %len, align 8, !dbg !17567
  %257 = load i64, i64* %buffersize.addr, align 8, !dbg !17567
  %cmp509 = icmp ult i64 %256, %257, !dbg !17567
  br i1 %cmp509, label %if.then511, label %if.end513, !dbg !17570

if.then511:                                       ; preds = %do.body508
  %258 = load i8*, i8** %buffer.addr, align 8, !dbg !17567
  %259 = load i64, i64* %len, align 8, !dbg !17567
  %arrayidx512 = getelementptr inbounds i8, i8* %258, i64 %259, !dbg !17567, !ctir !143
  store i8 92, i8* %arrayidx512, align 1, !dbg !17567
  br label %if.end513, !dbg !17567

if.end513:                                        ; preds = %if.then511, %do.body508
  %260 = load i64, i64* %len, align 8, !dbg !17570
  %inc514 = add i64 %260, 1, !dbg !17570
  store i64 %inc514, i64* %len, align 8, !dbg !17570
  br label %do.end516, !dbg !17570

do.end516:                                        ; preds = %if.end513
  store i8 0, i8* %is_right_quote, align 1, !dbg !17571
  br label %if.end517, !dbg !17572

if.end517:                                        ; preds = %do.end516, %if.else505
  br label %if.end518

if.end518:                                        ; preds = %if.end517, %do.end500
  %261 = load i64, i64* %ilim, align 8, !dbg !17573
  %262 = load i64, i64* %i, align 8, !dbg !17575
  %add519 = add i64 %262, 1, !dbg !17576
  %cmp520 = icmp ule i64 %261, %add519, !dbg !17577
  br i1 %cmp520, label %if.then522, label %if.end523, !dbg !17578

if.then522:                                       ; preds = %if.end518
  br label %for.end562, !dbg !17579

if.end523:                                        ; preds = %if.end518
  br label %do.body524, !dbg !17580

do.body524:                                       ; preds = %if.end523
  %263 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !17581
  %tobool525 = trunc i8 %263 to i1, !dbg !17581
  br i1 %tobool525, label %land.lhs.true527, label %if.end548, !dbg !17581

land.lhs.true527:                                 ; preds = %do.body524
  %264 = load i8, i8* %escaping, align 1, !dbg !17581
  %tobool528 = trunc i8 %264 to i1, !dbg !17581
  br i1 %tobool528, label %if.end548, label %if.then529, !dbg !17584

if.then529:                                       ; preds = %land.lhs.true527
  br label %do.body530, !dbg !17585

do.body530:                                       ; preds = %if.then529
  %265 = load i64, i64* %len, align 8, !dbg !17587
  %266 = load i64, i64* %buffersize.addr, align 8, !dbg !17587
  %cmp531 = icmp ult i64 %265, %266, !dbg !17587
  br i1 %cmp531, label %if.then533, label %if.end535, !dbg !17590

if.then533:                                       ; preds = %do.body530
  %267 = load i8*, i8** %buffer.addr, align 8, !dbg !17587
  %268 = load i64, i64* %len, align 8, !dbg !17587
  %arrayidx534 = getelementptr inbounds i8, i8* %267, i64 %268, !dbg !17587, !ctir !143
  store i8 39, i8* %arrayidx534, align 1, !dbg !17587
  br label %if.end535, !dbg !17587

if.end535:                                        ; preds = %if.then533, %do.body530
  %269 = load i64, i64* %len, align 8, !dbg !17590
  %inc536 = add i64 %269, 1, !dbg !17590
  store i64 %inc536, i64* %len, align 8, !dbg !17590
  br label %do.end538, !dbg !17590

do.end538:                                        ; preds = %if.end535
  br label %do.body539, !dbg !17585

do.body539:                                       ; preds = %do.end538
  %270 = load i64, i64* %len, align 8, !dbg !17591
  %271 = load i64, i64* %buffersize.addr, align 8, !dbg !17591
  %cmp540 = icmp ult i64 %270, %271, !dbg !17591
  br i1 %cmp540, label %if.then542, label %if.end544, !dbg !17594

if.then542:                                       ; preds = %do.body539
  %272 = load i8*, i8** %buffer.addr, align 8, !dbg !17591
  %273 = load i64, i64* %len, align 8, !dbg !17591
  %arrayidx543 = getelementptr inbounds i8, i8* %272, i64 %273, !dbg !17591, !ctir !143
  store i8 39, i8* %arrayidx543, align 1, !dbg !17591
  br label %if.end544, !dbg !17591

if.end544:                                        ; preds = %if.then542, %do.body539
  %274 = load i64, i64* %len, align 8, !dbg !17594
  %inc545 = add i64 %274, 1, !dbg !17594
  store i64 %inc545, i64* %len, align 8, !dbg !17594
  br label %do.end547, !dbg !17594

do.end547:                                        ; preds = %if.end544
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !17585
  br label %if.end548, !dbg !17585

if.end548:                                        ; preds = %do.end547, %land.lhs.true527, %do.body524
  br label %do.end550, !dbg !17584

do.end550:                                        ; preds = %if.end548
  br label %do.body551, !dbg !17595

do.body551:                                       ; preds = %do.end550
  %275 = load i64, i64* %len, align 8, !dbg !17596
  %276 = load i64, i64* %buffersize.addr, align 8, !dbg !17596
  %cmp552 = icmp ult i64 %275, %276, !dbg !17596
  br i1 %cmp552, label %if.then554, label %if.end556, !dbg !17599

if.then554:                                       ; preds = %do.body551
  %277 = load i8, i8* %c, align 1, !dbg !17596
  %278 = load i8*, i8** %buffer.addr, align 8, !dbg !17596
  %279 = load i64, i64* %len, align 8, !dbg !17596
  %arrayidx555 = getelementptr inbounds i8, i8* %278, i64 %279, !dbg !17596, !ctir !143
  store i8 %277, i8* %arrayidx555, align 1, !dbg !17596
  br label %if.end556, !dbg !17596

if.end556:                                        ; preds = %if.then554, %do.body551
  %280 = load i64, i64* %len, align 8, !dbg !17599
  %inc557 = add i64 %280, 1, !dbg !17599
  store i64 %inc557, i64* %len, align 8, !dbg !17599
  br label %do.end559, !dbg !17599

do.end559:                                        ; preds = %if.end556
  %281 = load i8*, i8** %arg.addr, align 8, !dbg !17600
  %282 = load i64, i64* %i, align 8, !dbg !17601
  %inc560 = add i64 %282, 1, !dbg !17601
  store i64 %inc560, i64* %i, align 8, !dbg !17601
  %arrayidx561 = getelementptr inbounds i8, i8* %281, i64 %inc560, !dbg !17600, !ctir !146
  %283 = load i8, i8* %arrayidx561, align 1, !dbg !17600
  store i8 %283, i8* %c, align 1, !dbg !17602
  br label %for.cond421, !dbg !17603, !llvm.loop !17604

for.end562:                                       ; preds = %if.then522
  br label %store_c, !dbg !17607

if.end563:                                        ; preds = %land.lhs.true417, %lor.lhs.false
  br label %sw.epilog564, !dbg !17608

sw.epilog564:                                     ; preds = %if.end563, %sw.bb334, %if.end333, %if.end296, %if.then286, %if.then281, %if.end269, %sw.epilog235, %if.end169
  %284 = load i8, i8* %backslash_escapes, align 1, !dbg !17609
  %tobool565 = trunc i8 %284 to i1, !dbg !17609
  br i1 %tobool565, label %land.lhs.true567, label %lor.lhs.false570, !dbg !17611

land.lhs.true567:                                 ; preds = %sw.epilog564
  %285 = load i32, i32* %quoting_style.addr, align 4, !dbg !17612
  %cmp568 = icmp ne i32 %285, 2, !dbg !17613
  br i1 %cmp568, label %land.lhs.true573, label %lor.lhs.false570, !dbg !17614

lor.lhs.false570:                                 ; preds = %land.lhs.true567, %sw.epilog564
  %286 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17615
  %tobool571 = trunc i8 %286 to i1, !dbg !17615
  br i1 %tobool571, label %land.lhs.true573, label %land.lhs.true582, !dbg !17616

land.lhs.true573:                                 ; preds = %lor.lhs.false570, %land.lhs.true567
  %287 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !17617
  %tobool574 = icmp ne i32* %287, null, !dbg !17617
  br i1 %tobool574, label %land.lhs.true575, label %land.lhs.true582, !dbg !17618

land.lhs.true575:                                 ; preds = %land.lhs.true573
  %288 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !17619
  %289 = load i8, i8* %c, align 1, !dbg !17620
  %conv576 = zext i8 %289 to i64, !dbg !17620
  %div = udiv i64 %conv576, 32, !dbg !17621
  %arrayidx577 = getelementptr inbounds i32, i32* %288, i64 %div, !dbg !17619, !ctir !1410
  %290 = load i32, i32* %arrayidx577, align 4, !dbg !17619
  %291 = load i8, i8* %c, align 1, !dbg !17622
  %conv578 = zext i8 %291 to i64, !dbg !17622
  %rem = urem i64 %conv578, 32, !dbg !17623
  %sh_prom = trunc i64 %rem to i32, !dbg !17624
  %shr579 = lshr i32 %290, %sh_prom, !dbg !17624
  %and580 = and i32 %shr579, 1, !dbg !17625
  %tobool581 = icmp ne i32 %and580, 0, !dbg !17625
  br i1 %tobool581, label %if.end585, label %land.lhs.true582, !dbg !17626

land.lhs.true582:                                 ; preds = %land.lhs.true575, %land.lhs.true573, %lor.lhs.false570
  %292 = load i8, i8* %is_right_quote, align 1, !dbg !17627
  %tobool583 = trunc i8 %292 to i1, !dbg !17627
  br i1 %tobool583, label %if.end585, label %if.then584, !dbg !17628

if.then584:                                       ; preds = %land.lhs.true582
  br label %store_c, !dbg !17629

if.end585:                                        ; preds = %land.lhs.true582, %land.lhs.true575
  br label %store_escape, !dbg !17627

store_escape:                                     ; preds = %if.end585, %if.then268
  call void @llvm.dbg.label(metadata !17630), !dbg !17631
  br label %do.body586, !dbg !17632

do.body586:                                       ; preds = %store_escape
  %293 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17633
  %tobool587 = trunc i8 %293 to i1, !dbg !17633
  br i1 %tobool587, label %if.then588, label %if.end589, !dbg !17636

if.then588:                                       ; preds = %do.body586
  br label %force_outer_quoting_style, !dbg !17633

if.end589:                                        ; preds = %do.body586
  store i8 1, i8* %escaping, align 1, !dbg !17636
  %294 = load i32, i32* %quoting_style.addr, align 4, !dbg !17637
  %cmp590 = icmp eq i32 %294, 2, !dbg !17637
  br i1 %cmp590, label %land.lhs.true592, label %if.end622, !dbg !17637

land.lhs.true592:                                 ; preds = %if.end589
  %295 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !17637
  %tobool593 = trunc i8 %295 to i1, !dbg !17637
  br i1 %tobool593, label %if.end622, label %if.then594, !dbg !17636

if.then594:                                       ; preds = %land.lhs.true592
  br label %do.body595, !dbg !17639

do.body595:                                       ; preds = %if.then594
  %296 = load i64, i64* %len, align 8, !dbg !17641
  %297 = load i64, i64* %buffersize.addr, align 8, !dbg !17641
  %cmp596 = icmp ult i64 %296, %297, !dbg !17641
  br i1 %cmp596, label %if.then598, label %if.end600, !dbg !17644

if.then598:                                       ; preds = %do.body595
  %298 = load i8*, i8** %buffer.addr, align 8, !dbg !17641
  %299 = load i64, i64* %len, align 8, !dbg !17641
  %arrayidx599 = getelementptr inbounds i8, i8* %298, i64 %299, !dbg !17641, !ctir !143
  store i8 39, i8* %arrayidx599, align 1, !dbg !17641
  br label %if.end600, !dbg !17641

if.end600:                                        ; preds = %if.then598, %do.body595
  %300 = load i64, i64* %len, align 8, !dbg !17644
  %inc601 = add i64 %300, 1, !dbg !17644
  store i64 %inc601, i64* %len, align 8, !dbg !17644
  br label %do.end603, !dbg !17644

do.end603:                                        ; preds = %if.end600
  br label %do.body604, !dbg !17639

do.body604:                                       ; preds = %do.end603
  %301 = load i64, i64* %len, align 8, !dbg !17645
  %302 = load i64, i64* %buffersize.addr, align 8, !dbg !17645
  %cmp605 = icmp ult i64 %301, %302, !dbg !17645
  br i1 %cmp605, label %if.then607, label %if.end609, !dbg !17648

if.then607:                                       ; preds = %do.body604
  %303 = load i8*, i8** %buffer.addr, align 8, !dbg !17645
  %304 = load i64, i64* %len, align 8, !dbg !17645
  %arrayidx608 = getelementptr inbounds i8, i8* %303, i64 %304, !dbg !17645, !ctir !143
  store i8 36, i8* %arrayidx608, align 1, !dbg !17645
  br label %if.end609, !dbg !17645

if.end609:                                        ; preds = %if.then607, %do.body604
  %305 = load i64, i64* %len, align 8, !dbg !17648
  %inc610 = add i64 %305, 1, !dbg !17648
  store i64 %inc610, i64* %len, align 8, !dbg !17648
  br label %do.end612, !dbg !17648

do.end612:                                        ; preds = %if.end609
  br label %do.body613, !dbg !17639

do.body613:                                       ; preds = %do.end612
  %306 = load i64, i64* %len, align 8, !dbg !17649
  %307 = load i64, i64* %buffersize.addr, align 8, !dbg !17649
  %cmp614 = icmp ult i64 %306, %307, !dbg !17649
  br i1 %cmp614, label %if.then616, label %if.end618, !dbg !17652

if.then616:                                       ; preds = %do.body613
  %308 = load i8*, i8** %buffer.addr, align 8, !dbg !17649
  %309 = load i64, i64* %len, align 8, !dbg !17649
  %arrayidx617 = getelementptr inbounds i8, i8* %308, i64 %309, !dbg !17649, !ctir !143
  store i8 39, i8* %arrayidx617, align 1, !dbg !17649
  br label %if.end618, !dbg !17649

if.end618:                                        ; preds = %if.then616, %do.body613
  %310 = load i64, i64* %len, align 8, !dbg !17652
  %inc619 = add i64 %310, 1, !dbg !17652
  store i64 %inc619, i64* %len, align 8, !dbg !17652
  br label %do.end621, !dbg !17652

do.end621:                                        ; preds = %if.end618
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !17639
  br label %if.end622, !dbg !17639

if.end622:                                        ; preds = %do.end621, %land.lhs.true592, %if.end589
  br label %do.body623, !dbg !17636

do.body623:                                       ; preds = %if.end622
  %311 = load i64, i64* %len, align 8, !dbg !17653
  %312 = load i64, i64* %buffersize.addr, align 8, !dbg !17653
  %cmp624 = icmp ult i64 %311, %312, !dbg !17653
  br i1 %cmp624, label %if.then626, label %if.end628, !dbg !17656

if.then626:                                       ; preds = %do.body623
  %313 = load i8*, i8** %buffer.addr, align 8, !dbg !17653
  %314 = load i64, i64* %len, align 8, !dbg !17653
  %arrayidx627 = getelementptr inbounds i8, i8* %313, i64 %314, !dbg !17653, !ctir !143
  store i8 92, i8* %arrayidx627, align 1, !dbg !17653
  br label %if.end628, !dbg !17653

if.end628:                                        ; preds = %if.then626, %do.body623
  %315 = load i64, i64* %len, align 8, !dbg !17656
  %inc629 = add i64 %315, 1, !dbg !17656
  store i64 %inc629, i64* %len, align 8, !dbg !17656
  br label %do.end631, !dbg !17656

do.end631:                                        ; preds = %if.end628
  br label %do.end633, !dbg !17636

do.end633:                                        ; preds = %do.end631
  br label %store_c, !dbg !17636

store_c:                                          ; preds = %do.end633, %if.then584, %for.end562, %if.then258, %if.end249
  call void @llvm.dbg.label(metadata !17657), !dbg !17658
  br label %do.body634, !dbg !17659

do.body634:                                       ; preds = %store_c
  %316 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !17660
  %tobool635 = trunc i8 %316 to i1, !dbg !17660
  br i1 %tobool635, label %land.lhs.true637, label %if.end658, !dbg !17660

land.lhs.true637:                                 ; preds = %do.body634
  %317 = load i8, i8* %escaping, align 1, !dbg !17660
  %tobool638 = trunc i8 %317 to i1, !dbg !17660
  br i1 %tobool638, label %if.end658, label %if.then639, !dbg !17663

if.then639:                                       ; preds = %land.lhs.true637
  br label %do.body640, !dbg !17664

do.body640:                                       ; preds = %if.then639
  %318 = load i64, i64* %len, align 8, !dbg !17666
  %319 = load i64, i64* %buffersize.addr, align 8, !dbg !17666
  %cmp641 = icmp ult i64 %318, %319, !dbg !17666
  br i1 %cmp641, label %if.then643, label %if.end645, !dbg !17669

if.then643:                                       ; preds = %do.body640
  %320 = load i8*, i8** %buffer.addr, align 8, !dbg !17666
  %321 = load i64, i64* %len, align 8, !dbg !17666
  %arrayidx644 = getelementptr inbounds i8, i8* %320, i64 %321, !dbg !17666, !ctir !143
  store i8 39, i8* %arrayidx644, align 1, !dbg !17666
  br label %if.end645, !dbg !17666

if.end645:                                        ; preds = %if.then643, %do.body640
  %322 = load i64, i64* %len, align 8, !dbg !17669
  %inc646 = add i64 %322, 1, !dbg !17669
  store i64 %inc646, i64* %len, align 8, !dbg !17669
  br label %do.end648, !dbg !17669

do.end648:                                        ; preds = %if.end645
  br label %do.body649, !dbg !17664

do.body649:                                       ; preds = %do.end648
  %323 = load i64, i64* %len, align 8, !dbg !17670
  %324 = load i64, i64* %buffersize.addr, align 8, !dbg !17670
  %cmp650 = icmp ult i64 %323, %324, !dbg !17670
  br i1 %cmp650, label %if.then652, label %if.end654, !dbg !17673

if.then652:                                       ; preds = %do.body649
  %325 = load i8*, i8** %buffer.addr, align 8, !dbg !17670
  %326 = load i64, i64* %len, align 8, !dbg !17670
  %arrayidx653 = getelementptr inbounds i8, i8* %325, i64 %326, !dbg !17670, !ctir !143
  store i8 39, i8* %arrayidx653, align 1, !dbg !17670
  br label %if.end654, !dbg !17670

if.end654:                                        ; preds = %if.then652, %do.body649
  %327 = load i64, i64* %len, align 8, !dbg !17673
  %inc655 = add i64 %327, 1, !dbg !17673
  store i64 %inc655, i64* %len, align 8, !dbg !17673
  br label %do.end657, !dbg !17673

do.end657:                                        ; preds = %if.end654
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !17664
  br label %if.end658, !dbg !17664

if.end658:                                        ; preds = %do.end657, %land.lhs.true637, %do.body634
  br label %do.end660, !dbg !17663

do.end660:                                        ; preds = %if.end658
  br label %do.body661, !dbg !17674

do.body661:                                       ; preds = %do.end660
  %328 = load i64, i64* %len, align 8, !dbg !17675
  %329 = load i64, i64* %buffersize.addr, align 8, !dbg !17675
  %cmp662 = icmp ult i64 %328, %329, !dbg !17675
  br i1 %cmp662, label %if.then664, label %if.end666, !dbg !17678

if.then664:                                       ; preds = %do.body661
  %330 = load i8, i8* %c, align 1, !dbg !17675
  %331 = load i8*, i8** %buffer.addr, align 8, !dbg !17675
  %332 = load i64, i64* %len, align 8, !dbg !17675
  %arrayidx665 = getelementptr inbounds i8, i8* %331, i64 %332, !dbg !17675, !ctir !143
  store i8 %330, i8* %arrayidx665, align 1, !dbg !17675
  br label %if.end666, !dbg !17675

if.end666:                                        ; preds = %if.then664, %do.body661
  %333 = load i64, i64* %len, align 8, !dbg !17678
  %inc667 = add i64 %333, 1, !dbg !17678
  store i64 %inc667, i64* %len, align 8, !dbg !17678
  br label %do.end669, !dbg !17678

do.end669:                                        ; preds = %if.end666
  %334 = load i8, i8* %c_and_shell_quote_compat, align 1, !dbg !17679
  %tobool670 = trunc i8 %334 to i1, !dbg !17679
  br i1 %tobool670, label %if.end672, label %if.then671, !dbg !17681

if.then671:                                       ; preds = %do.end669
  store i8 0, i8* %all_c_and_shell_quote_compat, align 1, !dbg !17682
  br label %if.end672, !dbg !17683

if.end672:                                        ; preds = %if.then671, %do.end669
  br label %for.inc673, !dbg !17684

for.inc673:                                       ; preds = %if.end672, %if.then167
  %335 = load i64, i64* %i, align 8, !dbg !17685
  %inc674 = add i64 %335, 1, !dbg !17685
  store i64 %inc674, i64* %i, align 8, !dbg !17685
  br label %for.cond44, !dbg !17686, !llvm.loop !17687

for.end675:                                       ; preds = %cond.end
  %336 = load i64, i64* %len, align 8, !dbg !17689
  %cmp676 = icmp eq i64 %336, 0, !dbg !17691
  br i1 %cmp676, label %land.lhs.true678, label %if.end685, !dbg !17692

land.lhs.true678:                                 ; preds = %for.end675
  %337 = load i32, i32* %quoting_style.addr, align 4, !dbg !17693
  %cmp679 = icmp eq i32 %337, 2, !dbg !17694
  br i1 %cmp679, label %land.lhs.true681, label %if.end685, !dbg !17695

land.lhs.true681:                                 ; preds = %land.lhs.true678
  %338 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17696
  %tobool682 = trunc i8 %338 to i1, !dbg !17696
  br i1 %tobool682, label %if.then684, label %if.end685, !dbg !17697

if.then684:                                       ; preds = %land.lhs.true681
  br label %force_outer_quoting_style, !dbg !17698

if.end685:                                        ; preds = %land.lhs.true681, %land.lhs.true678, %for.end675
  %339 = load i32, i32* %quoting_style.addr, align 4, !dbg !17699
  %cmp686 = icmp eq i32 %339, 2, !dbg !17701
  br i1 %cmp686, label %land.lhs.true688, label %if.end704, !dbg !17702

land.lhs.true688:                                 ; preds = %if.end685
  %340 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17703
  %tobool689 = trunc i8 %340 to i1, !dbg !17703
  br i1 %tobool689, label %if.end704, label %land.lhs.true690, !dbg !17704

land.lhs.true690:                                 ; preds = %land.lhs.true688
  %341 = load i8, i8* %encountered_single_quote, align 1, !dbg !17705
  %tobool691 = trunc i8 %341 to i1, !dbg !17705
  br i1 %tobool691, label %if.then693, label %if.end704, !dbg !17706

if.then693:                                       ; preds = %land.lhs.true690
  %342 = load i8, i8* %all_c_and_shell_quote_compat, align 1, !dbg !17707
  %tobool694 = trunc i8 %342 to i1, !dbg !17707
  br i1 %tobool694, label %if.then695, label %if.else697, !dbg !17710

if.then695:                                       ; preds = %if.then693
  %343 = load i8*, i8** %buffer.addr, align 8, !dbg !17711
  %344 = load i64, i64* %orig_buffersize, align 8, !dbg !17712
  %345 = load i8*, i8** %arg.addr, align 8, !dbg !17713
  %346 = load i64, i64* %argsize.addr, align 8, !dbg !17714
  %347 = load i32, i32* %flags.addr, align 4, !dbg !17715
  %348 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !17716
  %349 = load i8*, i8** %left_quote.addr, align 8, !dbg !17717
  %350 = load i8*, i8** %right_quote.addr, align 8, !dbg !17718
  %call696 = call i64 @quotearg_buffer_restyled(i8* %343, i64 %344, i8* %345, i64 %346, i32 5, i32 %347, i32* %348, i8* %349, i8* %350), !dbg !17719
  store i64 %call696, i64* %retval, align 8, !dbg !17720
  br label %return, !dbg !17720

if.else697:                                       ; preds = %if.then693
  %351 = load i64, i64* %buffersize.addr, align 8, !dbg !17721
  %tobool698 = icmp ne i64 %351, 0, !dbg !17721
  br i1 %tobool698, label %if.end702, label %land.lhs.true699, !dbg !17723

land.lhs.true699:                                 ; preds = %if.else697
  %352 = load i64, i64* %orig_buffersize, align 8, !dbg !17724
  %tobool700 = icmp ne i64 %352, 0, !dbg !17724
  br i1 %tobool700, label %if.then701, label %if.end702, !dbg !17725

if.then701:                                       ; preds = %land.lhs.true699
  %353 = load i64, i64* %orig_buffersize, align 8, !dbg !17726
  store i64 %353, i64* %buffersize.addr, align 8, !dbg !17728
  store i64 0, i64* %len, align 8, !dbg !17729
  br label %process_input, !dbg !17730

if.end702:                                        ; preds = %land.lhs.true699, %if.else697
  br label %if.end703

if.end703:                                        ; preds = %if.end702
  br label %if.end704, !dbg !17731

if.end704:                                        ; preds = %if.end703, %land.lhs.true690, %land.lhs.true688, %if.end685
  %354 = load i8*, i8** %quote_string, align 8, !dbg !17732
  %tobool705 = icmp ne i8* %354, null, !dbg !17732
  br i1 %tobool705, label %land.lhs.true706, label %if.end724, !dbg !17734

land.lhs.true706:                                 ; preds = %if.end704
  %355 = load i8, i8* %elide_outer_quotes, align 1, !dbg !17735
  %tobool707 = trunc i8 %355 to i1, !dbg !17735
  br i1 %tobool707, label %if.end724, label %if.then708, !dbg !17736

if.then708:                                       ; preds = %land.lhs.true706
  br label %for.cond709, !dbg !17737

for.cond709:                                      ; preds = %for.inc721, %if.then708
  %356 = load i8*, i8** %quote_string, align 8, !dbg !17738
  %357 = load i8, i8* %356, align 1, !dbg !17741, !ctir !147
  %tobool710 = icmp ne i8 %357, 0, !dbg !17742
  br i1 %tobool710, label %for.body711, label %for.end723, !dbg !17742

for.body711:                                      ; preds = %for.cond709
  br label %do.body712, !dbg !17743

do.body712:                                       ; preds = %for.body711
  %358 = load i64, i64* %len, align 8, !dbg !17744
  %359 = load i64, i64* %buffersize.addr, align 8, !dbg !17744
  %cmp713 = icmp ult i64 %358, %359, !dbg !17744
  br i1 %cmp713, label %if.then715, label %if.end717, !dbg !17747

if.then715:                                       ; preds = %do.body712
  %360 = load i8*, i8** %quote_string, align 8, !dbg !17744
  %361 = load i8, i8* %360, align 1, !dbg !17744, !ctir !147
  %362 = load i8*, i8** %buffer.addr, align 8, !dbg !17744
  %363 = load i64, i64* %len, align 8, !dbg !17744
  %arrayidx716 = getelementptr inbounds i8, i8* %362, i64 %363, !dbg !17744, !ctir !143
  store i8 %361, i8* %arrayidx716, align 1, !dbg !17744
  br label %if.end717, !dbg !17744

if.end717:                                        ; preds = %if.then715, %do.body712
  %364 = load i64, i64* %len, align 8, !dbg !17747
  %inc718 = add i64 %364, 1, !dbg !17747
  store i64 %inc718, i64* %len, align 8, !dbg !17747
  br label %do.end720, !dbg !17747

do.end720:                                        ; preds = %if.end717
  br label %for.inc721, !dbg !17747

for.inc721:                                       ; preds = %do.end720
  %365 = load i8*, i8** %quote_string, align 8, !dbg !17748
  %incdec.ptr722 = getelementptr inbounds i8, i8* %365, i32 1, !dbg !17748, !ctir !147
  store i8* %incdec.ptr722, i8** %quote_string, align 8, !dbg !17748
  br label %for.cond709, !dbg !17749, !llvm.loop !17750

for.end723:                                       ; preds = %for.cond709
  br label %if.end724, !dbg !17751

if.end724:                                        ; preds = %for.end723, %land.lhs.true706, %if.end704
  %366 = load i64, i64* %len, align 8, !dbg !17752
  %367 = load i64, i64* %buffersize.addr, align 8, !dbg !17754
  %cmp725 = icmp ult i64 %366, %367, !dbg !17755
  br i1 %cmp725, label %if.then727, label %if.end729, !dbg !17756

if.then727:                                       ; preds = %if.end724
  %368 = load i8*, i8** %buffer.addr, align 8, !dbg !17757
  %369 = load i64, i64* %len, align 8, !dbg !17758
  %arrayidx728 = getelementptr inbounds i8, i8* %368, i64 %369, !dbg !17757, !ctir !143
  store i8 0, i8* %arrayidx728, align 1, !dbg !17759
  br label %if.end729, !dbg !17757

if.end729:                                        ; preds = %if.then727, %if.end724
  %370 = load i64, i64* %len, align 8, !dbg !17760
  store i64 %370, i64* %retval, align 8, !dbg !17761
  br label %return, !dbg !17761

force_outer_quoting_style:                        ; preds = %if.then684, %if.then588, %if.then429, %sw.bb391, %if.then302, %if.then295, %if.then265, %if.then248, %if.then194, %if.then173, %if.then88, %if.then78
  call void @llvm.dbg.label(metadata !17762), !dbg !17763
  %371 = load i32, i32* %quoting_style.addr, align 4, !dbg !17764
  %cmp730 = icmp eq i32 %371, 2, !dbg !17766
  br i1 %cmp730, label %land.lhs.true732, label %if.end736, !dbg !17767

land.lhs.true732:                                 ; preds = %force_outer_quoting_style
  %372 = load i8, i8* %backslash_escapes, align 1, !dbg !17768
  %tobool733 = trunc i8 %372 to i1, !dbg !17768
  br i1 %tobool733, label %if.then735, label %if.end736, !dbg !17769

if.then735:                                       ; preds = %land.lhs.true732
  store i32 4, i32* %quoting_style.addr, align 4, !dbg !17770
  br label %if.end736, !dbg !17771

if.end736:                                        ; preds = %if.then735, %land.lhs.true732, %force_outer_quoting_style
  %373 = load i8*, i8** %buffer.addr, align 8, !dbg !17772
  %374 = load i64, i64* %buffersize.addr, align 8, !dbg !17773
  %375 = load i8*, i8** %arg.addr, align 8, !dbg !17774
  %376 = load i64, i64* %argsize.addr, align 8, !dbg !17775
  %377 = load i32, i32* %quoting_style.addr, align 4, !dbg !17776
  %378 = load i32, i32* %flags.addr, align 4, !dbg !17777
  %and737 = and i32 %378, -3, !dbg !17778
  %379 = load i8*, i8** %left_quote.addr, align 8, !dbg !17779
  %380 = load i8*, i8** %right_quote.addr, align 8, !dbg !17780
  %call738 = call i64 @quotearg_buffer_restyled(i8* %373, i64 %374, i8* %375, i64 %376, i32 %377, i32 %and737, i32* null, i8* %379, i8* %380), !dbg !17781
  store i64 %call738, i64* %retval, align 8, !dbg !17782
  br label %return, !dbg !17782

return:                                           ; preds = %if.end736, %if.end729, %if.then695
  %381 = load i64, i64* %retval, align 8, !dbg !17783
  ret i64 %381, !dbg !17783
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8* %msgid, i32 %s) #0 !dbg !17784 {
entry:
  %retval = alloca i8*, align 8
  %msgid.addr = alloca i8*, align 8
  %s.addr = alloca i32, align 4
  %translation = alloca i8*, align 8, !ctir !146
  %locale_code = alloca i8*, align 8, !ctir !146
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !17787, metadata !DIExpression()), !dbg !17788
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !17789, metadata !DIExpression()), !dbg !17790
  call void @llvm.dbg.declare(metadata i8** %translation, metadata !17791, metadata !DIExpression()), !dbg !17792
  %0 = load i8*, i8** %msgid.addr, align 8, !dbg !17793
  %call = call i8* @gettext(i8* %0) #13, !dbg !17793
  store i8* %call, i8** %translation, align 8, !dbg !17792
  call void @llvm.dbg.declare(metadata i8** %locale_code, metadata !17794, metadata !DIExpression()), !dbg !17795
  %1 = load i8*, i8** %translation, align 8, !dbg !17796
  %2 = load i8*, i8** %msgid.addr, align 8, !dbg !17798
  %cmp = icmp ne i8* %1, %2, !dbg !17799
  br i1 %cmp, label %if.then, label %if.end, !dbg !17800

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %translation, align 8, !dbg !17801
  store i8* %3, i8** %retval, align 8, !dbg !17802
  br label %return, !dbg !17802

if.end:                                           ; preds = %entry
  %call1 = call i8* @locale_charset(), !dbg !17803
  store i8* %call1, i8** %locale_code, align 8, !dbg !17804
  %4 = load i8*, i8** %locale_code, align 8, !dbg !17805
  %call2 = call i32 @c_strcasecmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.400, i64 0, i64 0)) #16, !dbg !17805
  %cmp3 = icmp eq i32 %call2, 0, !dbg !17805
  br i1 %cmp3, label %if.then4, label %if.end7, !dbg !17807

if.then4:                                         ; preds = %if.end
  %5 = load i8*, i8** %msgid.addr, align 8, !dbg !17808
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0, !dbg !17808, !ctir !146
  %6 = load i8, i8* %arrayidx, align 1, !dbg !17808
  %conv = sext i8 %6 to i32, !dbg !17808
  %cmp5 = icmp eq i32 %conv, 96, !dbg !17809
  %7 = zext i1 %cmp5 to i64, !dbg !17808
  %cond = select i1 %cmp5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.401, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.402, i64 0, i64 0), !dbg !17808
  store i8* %cond, i8** %retval, align 8, !dbg !17810
  br label %return, !dbg !17810

if.end7:                                          ; preds = %if.end
  %8 = load i8*, i8** %locale_code, align 8, !dbg !17811
  %call8 = call i32 @c_strcasecmp(i8* %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.403, i64 0, i64 0)) #16, !dbg !17811
  %cmp9 = icmp eq i32 %call8, 0, !dbg !17811
  br i1 %cmp9, label %if.then11, label %if.end17, !dbg !17813

if.then11:                                        ; preds = %if.end7
  %9 = load i8*, i8** %msgid.addr, align 8, !dbg !17814
  %arrayidx12 = getelementptr inbounds i8, i8* %9, i64 0, !dbg !17814, !ctir !146
  %10 = load i8, i8* %arrayidx12, align 1, !dbg !17814
  %conv13 = sext i8 %10 to i32, !dbg !17814
  %cmp14 = icmp eq i32 %conv13, 96, !dbg !17815
  %11 = zext i1 %cmp14 to i64, !dbg !17814
  %cond16 = select i1 %cmp14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.404, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.405, i64 0, i64 0), !dbg !17814
  store i8* %cond16, i8** %retval, align 8, !dbg !17816
  br label %return, !dbg !17816

if.end17:                                         ; preds = %if.end7
  %12 = load i32, i32* %s.addr, align 4, !dbg !17817
  %cmp18 = icmp eq i32 %12, 9, !dbg !17818
  %13 = zext i1 %cmp18 to i64, !dbg !17817
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.397, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.399, i64 0, i64 0), !dbg !17817
  store i8* %cond20, i8** %retval, align 8, !dbg !17819
  br label %return, !dbg !17819

return:                                           ; preds = %if.end17, %if.then11, %if.then4, %if.then
  %14 = load i8*, i8** %retval, align 8, !dbg !17820
  ret i8* %14, !dbg !17820
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_alloc(i8* %arg, i64 %argsize, %struct.quoting_options* %o) #0 !dbg !17821 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !17824, metadata !DIExpression()), !dbg !17825
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !17826, metadata !DIExpression()), !dbg !17827
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !17828, metadata !DIExpression()), !dbg !17829
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !17830
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !17831
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !17832
  %call = call i8* @quotearg_alloc_mem(i8* %0, i64 %1, i64* null, %struct.quoting_options* %2), !dbg !17833
  ret i8* %call, !dbg !17834
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_alloc_mem(i8* %arg, i64 %argsize, i64* %size, %struct.quoting_options* %o) #0 !dbg !17835 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %size.addr = alloca i64*, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8, !ctir !1392
  %e = alloca i32, align 4, !ctir !27
  %flags = alloca i32, align 4, !ctir !27
  %bufsize = alloca i64, align 8, !ctir !149
  %buf = alloca i8*, align 8, !ctir !143
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !17838, metadata !DIExpression()), !dbg !17839
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !17840, metadata !DIExpression()), !dbg !17841
  store i64* %size, i64** %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %size.addr, metadata !17842, metadata !DIExpression()), !dbg !17843
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !17844, metadata !DIExpression()), !dbg !17845
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !17846, metadata !DIExpression()), !dbg !17847
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !17848
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !17848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17848

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !17849
  br label %cond.end, !dbg !17848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !17848
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !dbg !17847
  call void @llvm.dbg.declare(metadata i32* %e, metadata !17850, metadata !DIExpression()), !dbg !17851
  %call = call i32* @__errno_location() #17, !dbg !17852
  %2 = load i32, i32* %call, align 4, !dbg !17852, !ctir !27
  store i32 %2, i32* %e, align 4, !dbg !17851
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !17853, metadata !DIExpression()), !dbg !17854
  %3 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17855
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 1, !dbg !17856, !ctir !1393
  %4 = load i32, i32* %flags1, align 4, !dbg !17856, !ctir !27
  %5 = load i64*, i64** %size.addr, align 8, !dbg !17857
  %tobool2 = icmp ne i64* %5, null, !dbg !17857
  %6 = zext i1 %tobool2 to i64, !dbg !17857
  %cond3 = select i1 %tobool2, i32 0, i32 1, !dbg !17857
  %or = or i32 %4, %cond3, !dbg !17858
  store i32 %or, i32* %flags, align 4, !dbg !17854
  call void @llvm.dbg.declare(metadata i64* %bufsize, metadata !17859, metadata !DIExpression()), !dbg !17860
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !17861
  %8 = load i64, i64* %argsize.addr, align 8, !dbg !17862
  %9 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17863
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %9, i32 0, i32 0, !dbg !17864, !ctir !1393
  %10 = load i32, i32* %style, align 8, !dbg !17864, !ctir !95
  %11 = load i32, i32* %flags, align 4, !dbg !17865
  %12 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17866
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 2, !dbg !17867, !ctir !1393
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !17866, !ctir !1394
  %13 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17868
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %13, i32 0, i32 3, !dbg !17869, !ctir !1393
  %14 = load i8*, i8** %left_quote, align 8, !dbg !17869, !ctir !146
  %15 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17870
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %15, i32 0, i32 4, !dbg !17871, !ctir !1393
  %16 = load i8*, i8** %right_quote, align 8, !dbg !17871, !ctir !146
  %call4 = call i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %7, i64 %8, i32 %10, i32 %11, i32* %arraydecay, i8* %14, i8* %16), !dbg !17872
  %add = add i64 %call4, 1, !dbg !17873
  store i64 %add, i64* %bufsize, align 8, !dbg !17860
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !17874, metadata !DIExpression()), !dbg !17875
  %17 = load i64, i64* %bufsize, align 8, !dbg !17876
  %call5 = call noalias i8* @xcharalloc(i64 %17), !dbg !17877
  store i8* %call5, i8** %buf, align 8, !dbg !17875
  %18 = load i8*, i8** %buf, align 8, !dbg !17878
  %19 = load i64, i64* %bufsize, align 8, !dbg !17879
  %20 = load i8*, i8** %arg.addr, align 8, !dbg !17880
  %21 = load i64, i64* %argsize.addr, align 8, !dbg !17881
  %22 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17882
  %style6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %22, i32 0, i32 0, !dbg !17883, !ctir !1393
  %23 = load i32, i32* %style6, align 8, !dbg !17883, !ctir !95
  %24 = load i32, i32* %flags, align 4, !dbg !17884
  %25 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17885
  %quote_these_too7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %25, i32 0, i32 2, !dbg !17886, !ctir !1393
  %arraydecay8 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too7, i64 0, i64 0, !dbg !17885, !ctir !1394
  %26 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17887
  %left_quote9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %26, i32 0, i32 3, !dbg !17888, !ctir !1393
  %27 = load i8*, i8** %left_quote9, align 8, !dbg !17888, !ctir !146
  %28 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !17889
  %right_quote10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %28, i32 0, i32 4, !dbg !17890, !ctir !1393
  %29 = load i8*, i8** %right_quote10, align 8, !dbg !17890, !ctir !146
  %call11 = call i64 @quotearg_buffer_restyled(i8* %18, i64 %19, i8* %20, i64 %21, i32 %23, i32 %24, i32* %arraydecay8, i8* %27, i8* %29), !dbg !17891
  %30 = load i32, i32* %e, align 4, !dbg !17892
  %call12 = call i32* @__errno_location() #17, !dbg !17893
  store i32 %30, i32* %call12, align 4, !dbg !17894, !ctir !27
  %31 = load i64*, i64** %size.addr, align 8, !dbg !17895
  %tobool13 = icmp ne i64* %31, null, !dbg !17895
  br i1 %tobool13, label %if.then, label %if.end, !dbg !17897

if.then:                                          ; preds = %cond.end
  %32 = load i64, i64* %bufsize, align 8, !dbg !17898
  %sub = sub i64 %32, 1, !dbg !17899
  %33 = load i64*, i64** %size.addr, align 8, !dbg !17900
  store i64 %sub, i64* %33, align 8, !dbg !17901, !ctir !149
  br label %if.end, !dbg !17902

if.end:                                           ; preds = %if.then, %cond.end
  %34 = load i8*, i8** %buf, align 8, !dbg !17903
  ret i8* %34, !dbg !17904
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @quotearg_free() #0 !dbg !17905 {
entry:
  %sv = alloca %struct.bin_str*, align 8, !ctir !1395
  %i = alloca i32, align 4, !ctir !27
  call void @llvm.dbg.declare(metadata %struct.bin_str** %sv, metadata !17906, metadata !DIExpression()), !dbg !17907
  %0 = load %struct.bin_str*, %struct.bin_str** @slotvec, align 8, !dbg !17908
  store %struct.bin_str* %0, %struct.bin_str** %sv, align 8, !dbg !17907
  call void @llvm.dbg.declare(metadata i32* %i, metadata !17909, metadata !DIExpression()), !dbg !17910
  store i32 1, i32* %i, align 4, !dbg !17911
  br label %for.cond, !dbg !17913

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !17914
  %2 = load i32, i32* @nslots, align 4, !dbg !17916
  %cmp = icmp slt i32 %1, %2, !dbg !17917
  br i1 %cmp, label %for.body, label %for.end, !dbg !17918

for.body:                                         ; preds = %for.cond
  %3 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17919
  %4 = load i32, i32* %i, align 4, !dbg !17920
  %idxprom = sext i32 %4 to i64, !dbg !17919
  %arrayidx = getelementptr inbounds %struct.bin_str, %struct.bin_str* %3, i64 %idxprom, !dbg !17919, !ctir !1395
  %val = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx, i32 0, i32 1, !dbg !17921, !ctir !1396
  %5 = load i8*, i8** %val, align 8, !dbg !17921, !ctir !143
  call void @free(i8* %5) #13, !dbg !17922
  br label %for.inc, !dbg !17922

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !17923
  %inc = add nsw i32 %6, 1, !dbg !17923
  store i32 %inc, i32* %i, align 4, !dbg !17923
  br label %for.cond, !dbg !17924, !llvm.loop !17925

for.end:                                          ; preds = %for.cond
  %7 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17927
  %arrayidx1 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %7, i64 0, !dbg !17927, !ctir !1395
  %val2 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx1, i32 0, i32 1, !dbg !17929, !ctir !1396
  %8 = load i8*, i8** %val2, align 8, !dbg !17929, !ctir !143
  %cmp3 = icmp ne i8* %8, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !17930
  br i1 %cmp3, label %if.then, label %if.end, !dbg !17931

if.then:                                          ; preds = %for.end
  %9 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17932
  %arrayidx4 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %9, i64 0, !dbg !17932, !ctir !1395
  %val5 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx4, i32 0, i32 1, !dbg !17934, !ctir !1396
  %10 = load i8*, i8** %val5, align 8, !dbg !17934, !ctir !143
  call void @free(i8* %10) #13, !dbg !17935
  store i64 256, i64* getelementptr inbounds (%struct.bin_str, %struct.bin_str* @slotvec0, i32 0, i32 0), align 8, !dbg !17936, !ctir !149
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), i8** getelementptr inbounds (%struct.bin_str, %struct.bin_str* @slotvec0, i32 0, i32 1), align 8, !dbg !17937, !ctir !143
  br label %if.end, !dbg !17938

if.end:                                           ; preds = %if.then, %for.end
  %11 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17939
  %cmp6 = icmp ne %struct.bin_str* %11, @slotvec0, !dbg !17941
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !17942

if.then7:                                         ; preds = %if.end
  %12 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17943
  %13 = bitcast %struct.bin_str* %12 to i8*, !dbg !17943
  call void @free(i8* %13) #13, !dbg !17945
  store %struct.bin_str* @slotvec0, %struct.bin_str** @slotvec, align 8, !dbg !17946
  br label %if.end8, !dbg !17947

if.end8:                                          ; preds = %if.then7, %if.end
  store i32 1, i32* @nslots, align 4, !dbg !17948
  ret void, !dbg !17949
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n(i32 %n, i8* %arg) #0 !dbg !17950 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !17953, metadata !DIExpression()), !dbg !17954
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !17955, metadata !DIExpression()), !dbg !17956
  %0 = load i32, i32* %n.addr, align 4, !dbg !17957
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !17958
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* @default_quoting_options), !dbg !17959
  ret i8* %call, !dbg !17960
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32 %n, i8* %arg, i64 %argsize, %struct.quoting_options* %options) #0 !dbg !17961 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4, !ctir !27
  %sv = alloca %struct.bin_str*, align 8, !ctir !1395
  %preallocated = alloca i8, align 1, !ctir !141
  %nmax = alloca i32, align 4, !ctir !27
  %size = alloca i64, align 8, !ctir !149
  %val = alloca i8*, align 8, !ctir !143
  %flags = alloca i32, align 4, !ctir !27
  %qsize = alloca i64, align 8, !ctir !149
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !17964, metadata !DIExpression()), !dbg !17965
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !17966, metadata !DIExpression()), !dbg !17967
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !17968, metadata !DIExpression()), !dbg !17969
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %options.addr, metadata !17970, metadata !DIExpression()), !dbg !17971
  call void @llvm.dbg.declare(metadata i32* %e, metadata !17972, metadata !DIExpression()), !dbg !17973
  %call = call i32* @__errno_location() #17, !dbg !17974
  %0 = load i32, i32* %call, align 4, !dbg !17974, !ctir !27
  store i32 %0, i32* %e, align 4, !dbg !17973
  call void @llvm.dbg.declare(metadata %struct.bin_str** %sv, metadata !17975, metadata !DIExpression()), !dbg !17976
  %1 = load %struct.bin_str*, %struct.bin_str** @slotvec, align 8, !dbg !17977
  store %struct.bin_str* %1, %struct.bin_str** %sv, align 8, !dbg !17976
  %2 = load i32, i32* %n.addr, align 4, !dbg !17978
  %cmp = icmp slt i32 %2, 0, !dbg !17980
  br i1 %cmp, label %if.then, label %if.end, !dbg !17981

if.then:                                          ; preds = %entry
  call void @abort() #15, !dbg !17982
  unreachable, !dbg !17982

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @nslots, align 4, !dbg !17983
  %4 = load i32, i32* %n.addr, align 4, !dbg !17985
  %cmp1 = icmp sle i32 %3, %4, !dbg !17986
  br i1 %cmp1, label %if.then2, label %if.end15, !dbg !17987

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %preallocated, metadata !17988, metadata !DIExpression()), !dbg !17990
  %5 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !17991
  %cmp3 = icmp eq %struct.bin_str* %5, @slotvec0, !dbg !17992
  %frombool = zext i1 %cmp3 to i8, !dbg !17990
  store i8 %frombool, i8* %preallocated, align 1, !dbg !17990
  call void @llvm.dbg.declare(metadata i32* %nmax, metadata !17993, metadata !DIExpression()), !dbg !17994
  store i32 2147483646, i32* %nmax, align 4, !dbg !17994
  %6 = load i32, i32* %nmax, align 4, !dbg !17995
  %7 = load i32, i32* %n.addr, align 4, !dbg !17997
  %cmp4 = icmp slt i32 %6, %7, !dbg !17998
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !17999

if.then5:                                         ; preds = %if.then2
  call void @xalloc_die() #14, !dbg !18000
  unreachable, !dbg !18000

if.end6:                                          ; preds = %if.then2
  %8 = load i8, i8* %preallocated, align 1, !dbg !18001
  %tobool = trunc i8 %8 to i1, !dbg !18001
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !18001

cond.true:                                        ; preds = %if.end6
  br label %cond.end, !dbg !18001

cond.false:                                       ; preds = %if.end6
  %9 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18002
  br label %cond.end, !dbg !18001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.bin_str* [ null, %cond.true ], [ %9, %cond.false ], !dbg !18001
  %10 = bitcast %struct.bin_str* %cond to i8*, !dbg !18001
  %11 = load i32, i32* %n.addr, align 4, !dbg !18003
  %add = add nsw i32 %11, 1, !dbg !18004
  %conv = sext i32 %add to i64, !dbg !18005
  %mul = mul i64 %conv, 16, !dbg !18006
  %call7 = call i8* @xrealloc(i8* %10, i64 %mul), !dbg !18007
  %12 = bitcast i8* %call7 to %struct.bin_str*, !dbg !18007
  store %struct.bin_str* %12, %struct.bin_str** %sv, align 8, !dbg !18008
  store %struct.bin_str* %12, %struct.bin_str** @slotvec, align 8, !dbg !18009
  %13 = load i8, i8* %preallocated, align 1, !dbg !18010
  %tobool8 = trunc i8 %13 to i1, !dbg !18010
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !18012

if.then9:                                         ; preds = %cond.end
  %14 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18013
  %15 = bitcast %struct.bin_str* %14 to i8*, !dbg !18014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 bitcast (%struct.bin_str* @slotvec0 to i8*), i64 16, i1 false), !dbg !18014
  br label %if.end10, !dbg !18015

if.end10:                                         ; preds = %if.then9, %cond.end
  %16 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18016
  %17 = load i32, i32* @nslots, align 4, !dbg !18017
  %idx.ext = sext i32 %17 to i64, !dbg !18018
  %add.ptr = getelementptr inbounds %struct.bin_str, %struct.bin_str* %16, i64 %idx.ext, !dbg !18018, !ctir !1396
  %18 = bitcast %struct.bin_str* %add.ptr to i8*, !dbg !18019
  %19 = load i32, i32* %n.addr, align 4, !dbg !18020
  %add11 = add nsw i32 %19, 1, !dbg !18021
  %20 = load i32, i32* @nslots, align 4, !dbg !18022
  %sub = sub nsw i32 %add11, %20, !dbg !18023
  %conv12 = sext i32 %sub to i64, !dbg !18024
  %mul13 = mul i64 %conv12, 16, !dbg !18025
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 %mul13, i1 false), !dbg !18019
  %21 = load i32, i32* %n.addr, align 4, !dbg !18026
  %add14 = add nsw i32 %21, 1, !dbg !18027
  store i32 %add14, i32* @nslots, align 4, !dbg !18028
  br label %if.end15, !dbg !18029

if.end15:                                         ; preds = %if.end10, %if.end
  call void @llvm.dbg.declare(metadata i64* %size, metadata !18030, metadata !DIExpression()), !dbg !18032
  %22 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18033
  %23 = load i32, i32* %n.addr, align 4, !dbg !18034
  %idxprom = sext i32 %23 to i64, !dbg !18033
  %arrayidx = getelementptr inbounds %struct.bin_str, %struct.bin_str* %22, i64 %idxprom, !dbg !18033, !ctir !1395
  %size16 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx, i32 0, i32 0, !dbg !18035, !ctir !1396
  %24 = load i64, i64* %size16, align 8, !dbg !18035, !ctir !149
  store i64 %24, i64* %size, align 8, !dbg !18032
  call void @llvm.dbg.declare(metadata i8** %val, metadata !18036, metadata !DIExpression()), !dbg !18037
  %25 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18038
  %26 = load i32, i32* %n.addr, align 4, !dbg !18039
  %idxprom17 = sext i32 %26 to i64, !dbg !18038
  %arrayidx18 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %25, i64 %idxprom17, !dbg !18038, !ctir !1395
  %val19 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx18, i32 0, i32 1, !dbg !18040, !ctir !1396
  %27 = load i8*, i8** %val19, align 8, !dbg !18040, !ctir !143
  store i8* %27, i8** %val, align 8, !dbg !18037
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !18041, metadata !DIExpression()), !dbg !18042
  %28 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18043
  %flags20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %28, i32 0, i32 1, !dbg !18044, !ctir !1393
  %29 = load i32, i32* %flags20, align 4, !dbg !18044, !ctir !27
  %or = or i32 %29, 1, !dbg !18045
  store i32 %or, i32* %flags, align 4, !dbg !18042
  call void @llvm.dbg.declare(metadata i64* %qsize, metadata !18046, metadata !DIExpression()), !dbg !18047
  %30 = load i8*, i8** %val, align 8, !dbg !18048
  %31 = load i64, i64* %size, align 8, !dbg !18049
  %32 = load i8*, i8** %arg.addr, align 8, !dbg !18050
  %33 = load i64, i64* %argsize.addr, align 8, !dbg !18051
  %34 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18052
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %34, i32 0, i32 0, !dbg !18053, !ctir !1393
  %35 = load i32, i32* %style, align 8, !dbg !18053, !ctir !95
  %36 = load i32, i32* %flags, align 4, !dbg !18054
  %37 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18055
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %37, i32 0, i32 2, !dbg !18056, !ctir !1393
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !18055, !ctir !1394
  %38 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18057
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %38, i32 0, i32 3, !dbg !18058, !ctir !1393
  %39 = load i8*, i8** %left_quote, align 8, !dbg !18058, !ctir !146
  %40 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18059
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %40, i32 0, i32 4, !dbg !18060, !ctir !1393
  %41 = load i8*, i8** %right_quote, align 8, !dbg !18060, !ctir !146
  %call21 = call i64 @quotearg_buffer_restyled(i8* %30, i64 %31, i8* %32, i64 %33, i32 %35, i32 %36, i32* %arraydecay, i8* %39, i8* %41), !dbg !18061
  store i64 %call21, i64* %qsize, align 8, !dbg !18047
  %42 = load i64, i64* %size, align 8, !dbg !18062
  %43 = load i64, i64* %qsize, align 8, !dbg !18064
  %cmp22 = icmp ule i64 %42, %43, !dbg !18065
  br i1 %cmp22, label %if.then24, label %if.end43, !dbg !18066

if.then24:                                        ; preds = %if.end15
  %44 = load i64, i64* %qsize, align 8, !dbg !18067
  %add25 = add i64 %44, 1, !dbg !18069
  store i64 %add25, i64* %size, align 8, !dbg !18070
  %45 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18071
  %46 = load i32, i32* %n.addr, align 4, !dbg !18072
  %idxprom26 = sext i32 %46 to i64, !dbg !18071
  %arrayidx27 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %45, i64 %idxprom26, !dbg !18071, !ctir !1395
  %size28 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx27, i32 0, i32 0, !dbg !18073, !ctir !1396
  store i64 %add25, i64* %size28, align 8, !dbg !18074, !ctir !149
  %47 = load i8*, i8** %val, align 8, !dbg !18075
  %cmp29 = icmp ne i8* %47, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !18077
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !18078

if.then31:                                        ; preds = %if.then24
  %48 = load i8*, i8** %val, align 8, !dbg !18079
  call void @free(i8* %48) #13, !dbg !18080
  br label %if.end32, !dbg !18080

if.end32:                                         ; preds = %if.then31, %if.then24
  %49 = load i64, i64* %size, align 8, !dbg !18081
  %call33 = call noalias i8* @xcharalloc(i64 %49), !dbg !18082
  store i8* %call33, i8** %val, align 8, !dbg !18083
  %50 = load %struct.bin_str*, %struct.bin_str** %sv, align 8, !dbg !18084
  %51 = load i32, i32* %n.addr, align 4, !dbg !18085
  %idxprom34 = sext i32 %51 to i64, !dbg !18084
  %arrayidx35 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %50, i64 %idxprom34, !dbg !18084, !ctir !1395
  %val36 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %arrayidx35, i32 0, i32 1, !dbg !18086, !ctir !1396
  store i8* %call33, i8** %val36, align 8, !dbg !18087, !ctir !143
  %52 = load i8*, i8** %val, align 8, !dbg !18088
  %53 = load i64, i64* %size, align 8, !dbg !18089
  %54 = load i8*, i8** %arg.addr, align 8, !dbg !18090
  %55 = load i64, i64* %argsize.addr, align 8, !dbg !18091
  %56 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18092
  %style37 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %56, i32 0, i32 0, !dbg !18093, !ctir !1393
  %57 = load i32, i32* %style37, align 8, !dbg !18093, !ctir !95
  %58 = load i32, i32* %flags, align 4, !dbg !18094
  %59 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18095
  %quote_these_too38 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %59, i32 0, i32 2, !dbg !18096, !ctir !1393
  %arraydecay39 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too38, i64 0, i64 0, !dbg !18095, !ctir !1394
  %60 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18097
  %left_quote40 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %60, i32 0, i32 3, !dbg !18098, !ctir !1393
  %61 = load i8*, i8** %left_quote40, align 8, !dbg !18098, !ctir !146
  %62 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !18099
  %right_quote41 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %62, i32 0, i32 4, !dbg !18100, !ctir !1393
  %63 = load i8*, i8** %right_quote41, align 8, !dbg !18100, !ctir !146
  %call42 = call i64 @quotearg_buffer_restyled(i8* %52, i64 %53, i8* %54, i64 %55, i32 %57, i32 %58, i32* %arraydecay39, i8* %61, i8* %63), !dbg !18101
  br label %if.end43, !dbg !18102

if.end43:                                         ; preds = %if.end32, %if.end15
  %64 = load i32, i32* %e, align 4, !dbg !18103
  %call44 = call i32* @__errno_location() #17, !dbg !18104
  store i32 %64, i32* %call44, align 4, !dbg !18105, !ctir !27
  %65 = load i8*, i8** %val, align 8, !dbg !18106
  ret i8* %65, !dbg !18107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_mem(i32 %n, i8* %arg, i64 %argsize) #0 !dbg !18108 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18111, metadata !DIExpression()), !dbg !18112
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18113, metadata !DIExpression()), !dbg !18114
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18115, metadata !DIExpression()), !dbg !18116
  %0 = load i32, i32* %n.addr, align 4, !dbg !18117
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !18118
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !18119
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @default_quoting_options), !dbg !18120
  ret i8* %call, !dbg !18121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg(i8* %arg) #0 !dbg !18122 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18123, metadata !DIExpression()), !dbg !18124
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18125
  %call = call i8* @quotearg_n(i32 0, i8* %0), !dbg !18126
  ret i8* %call, !dbg !18127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_mem(i8* %arg, i64 %argsize) #0 !dbg !18128 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18129, metadata !DIExpression()), !dbg !18130
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18131, metadata !DIExpression()), !dbg !18132
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18133
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !18134
  %call = call i8* @quotearg_n_mem(i32 0, i8* %0, i64 %1), !dbg !18135
  ret i8* %call, !dbg !18136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style(i32 %n, i32 %s, i8* %arg) #0 !dbg !18137 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1393
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18140, metadata !DIExpression()), !dbg !18141
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !18142, metadata !DIExpression()), !dbg !18143
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18144, metadata !DIExpression()), !dbg !18145
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !18146, metadata !DIExpression()), !dbg !18147
  %0 = load i32, i32* %s.addr, align 4, !dbg !18148
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %0), !dbg !18149
  %1 = load i32, i32* %n.addr, align 4, !dbg !18150
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !18151
  %call = call i8* @quotearg_n_options(i32 %1, i8* %2, i64 -1, %struct.quoting_options* %o), !dbg !18152
  ret i8* %call, !dbg !18153
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret %agg.result, i32 %style) #0 !dbg !18154 {
entry:
  %style.addr = alloca i32, align 4
  store i32 %style, i32* %style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %style.addr, metadata !18157, metadata !DIExpression()), !dbg !18158
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %agg.result, metadata !18159, metadata !DIExpression()), !dbg !18160
  %0 = bitcast %struct.quoting_options* %agg.result to i8*, !dbg !18160
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !18160
  %1 = load i32, i32* %style.addr, align 4, !dbg !18161
  %cmp = icmp eq i32 %1, 10, !dbg !18163
  br i1 %cmp, label %if.then, label %if.end, !dbg !18164

if.then:                                          ; preds = %entry
  call void @abort() #15, !dbg !18165
  unreachable, !dbg !18165

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %style.addr, align 4, !dbg !18166
  %style1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %agg.result, i32 0, i32 0, !dbg !18167, !ctir !1382
  store i32 %2, i32* %style1, align 8, !dbg !18168, !ctir !95
  ret void, !dbg !18169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style_mem(i32 %n, i32 %s, i8* %arg, i64 %argsize) #0 !dbg !18170 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1393
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18173, metadata !DIExpression()), !dbg !18174
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !18175, metadata !DIExpression()), !dbg !18176
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18177, metadata !DIExpression()), !dbg !18178
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18179, metadata !DIExpression()), !dbg !18180
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !18181, metadata !DIExpression()), !dbg !18182
  %0 = load i32, i32* %s.addr, align 4, !dbg !18183
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %0), !dbg !18184
  %1 = load i32, i32* %n.addr, align 4, !dbg !18185
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !18186
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !18187
  %call = call i8* @quotearg_n_options(i32 %1, i8* %2, i64 %3, %struct.quoting_options* %o), !dbg !18188
  ret i8* %call, !dbg !18189
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_style(i32 %s, i8* %arg) #0 !dbg !18190 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !18193, metadata !DIExpression()), !dbg !18194
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18195, metadata !DIExpression()), !dbg !18196
  %0 = load i32, i32* %s.addr, align 4, !dbg !18197
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !18198
  %call = call i8* @quotearg_n_style(i32 0, i32 %0, i8* %1), !dbg !18199
  ret i8* %call, !dbg !18200
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_style_mem(i32 %s, i8* %arg, i64 %argsize) #0 !dbg !18201 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !18204, metadata !DIExpression()), !dbg !18205
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18206, metadata !DIExpression()), !dbg !18207
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18208, metadata !DIExpression()), !dbg !18209
  %0 = load i32, i32* %s.addr, align 4, !dbg !18210
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !18211
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !18212
  %call = call i8* @quotearg_n_style_mem(i32 0, i32 %0, i8* %1, i64 %2), !dbg !18213
  ret i8* %call, !dbg !18214
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_char_mem(i8* %arg, i64 %argsize, i8 signext %ch) #0 !dbg !18215 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %options = alloca %struct.quoting_options, align 8, !ctir !1382
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18218, metadata !DIExpression()), !dbg !18219
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18220, metadata !DIExpression()), !dbg !18221
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !18222, metadata !DIExpression()), !dbg !18223
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %options, metadata !18224, metadata !DIExpression()), !dbg !18225
  %0 = bitcast %struct.quoting_options* %options to i8*, !dbg !18226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !18226
  %1 = load i8, i8* %ch.addr, align 1, !dbg !18227
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext %1, i32 1), !dbg !18228
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !18229
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !18230
  %call1 = call i8* @quotearg_n_options(i32 0, i8* %2, i64 %3, %struct.quoting_options* %options), !dbg !18231
  ret i8* %call1, !dbg !18232
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_char(i8* %arg, i8 signext %ch) #0 !dbg !18233 {
entry:
  %arg.addr = alloca i8*, align 8
  %ch.addr = alloca i8, align 1
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18236, metadata !DIExpression()), !dbg !18237
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !18238, metadata !DIExpression()), !dbg !18239
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18240
  %1 = load i8, i8* %ch.addr, align 1, !dbg !18241
  %call = call i8* @quotearg_char_mem(i8* %0, i64 -1, i8 signext %1), !dbg !18242
  ret i8* %call, !dbg !18243
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_colon(i8* %arg) #0 !dbg !18244 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18245, metadata !DIExpression()), !dbg !18246
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18247
  %call = call i8* @quotearg_char(i8* %0, i8 signext 58), !dbg !18248
  ret i8* %call, !dbg !18249
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_colon_mem(i8* %arg, i64 %argsize) #0 !dbg !18250 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18251, metadata !DIExpression()), !dbg !18252
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18253, metadata !DIExpression()), !dbg !18254
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18255
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !18256
  %call = call i8* @quotearg_char_mem(i8* %0, i64 %1, i8 signext 58), !dbg !18257
  ret i8* %call, !dbg !18258
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style_colon(i32 %n, i32 %s, i8* %arg) #0 !dbg !18259 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %options = alloca %struct.quoting_options, align 8, !ctir !1382
  %tmp = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18260, metadata !DIExpression()), !dbg !18261
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !18262, metadata !DIExpression()), !dbg !18263
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18264, metadata !DIExpression()), !dbg !18265
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %options, metadata !18266, metadata !DIExpression()), !dbg !18267
  %0 = load i32, i32* %s.addr, align 4, !dbg !18268
  call void @quoting_options_from_style(%struct.quoting_options* sret %tmp, i32 %0), !dbg !18269
  %1 = bitcast %struct.quoting_options* %options to i8*, !dbg !18269
  %2 = bitcast %struct.quoting_options* %tmp to i8*, !dbg !18269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 56, i1 false), !dbg !18269
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext 58, i32 1), !dbg !18270
  %3 = load i32, i32* %n.addr, align 4, !dbg !18271
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !18272
  %call1 = call i8* @quotearg_n_options(i32 %3, i8* %4, i64 -1, %struct.quoting_options* %options), !dbg !18273
  ret i8* %call1, !dbg !18274
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_custom(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg) #0 !dbg !18275 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18278, metadata !DIExpression()), !dbg !18279
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !18280, metadata !DIExpression()), !dbg !18281
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !18282, metadata !DIExpression()), !dbg !18283
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18284, metadata !DIExpression()), !dbg !18285
  %0 = load i32, i32* %n.addr, align 4, !dbg !18286
  %1 = load i8*, i8** %left_quote.addr, align 8, !dbg !18287
  %2 = load i8*, i8** %right_quote.addr, align 8, !dbg !18288
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !18289
  %call = call i8* @quotearg_n_custom_mem(i32 %0, i8* %1, i8* %2, i8* %3, i64 -1), !dbg !18290
  ret i8* %call, !dbg !18291
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_custom_mem(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #0 !dbg !18292 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1382
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18295, metadata !DIExpression()), !dbg !18296
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !18297, metadata !DIExpression()), !dbg !18298
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !18299, metadata !DIExpression()), !dbg !18300
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18301, metadata !DIExpression()), !dbg !18302
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18303, metadata !DIExpression()), !dbg !18304
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !18305, metadata !DIExpression()), !dbg !18306
  %0 = bitcast %struct.quoting_options* %o to i8*, !dbg !18307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !18307
  %1 = load i8*, i8** %left_quote.addr, align 8, !dbg !18308
  %2 = load i8*, i8** %right_quote.addr, align 8, !dbg !18309
  call void @set_custom_quoting(%struct.quoting_options* %o, i8* %1, i8* %2), !dbg !18310
  %3 = load i32, i32* %n.addr, align 4, !dbg !18311
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !18312
  %5 = load i64, i64* %argsize.addr, align 8, !dbg !18313
  %call = call i8* @quotearg_n_options(i32 %3, i8* %4, i64 %5, %struct.quoting_options* %o), !dbg !18314
  ret i8* %call, !dbg !18315
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_custom(i8* %left_quote, i8* %right_quote, i8* %arg) #0 !dbg !18316 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !18319, metadata !DIExpression()), !dbg !18320
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !18321, metadata !DIExpression()), !dbg !18322
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18323, metadata !DIExpression()), !dbg !18324
  %0 = load i8*, i8** %left_quote.addr, align 8, !dbg !18325
  %1 = load i8*, i8** %right_quote.addr, align 8, !dbg !18326
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !18327
  %call = call i8* @quotearg_n_custom(i32 0, i8* %0, i8* %1, i8* %2), !dbg !18328
  ret i8* %call, !dbg !18329
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_custom_mem(i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #0 !dbg !18330 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !18333, metadata !DIExpression()), !dbg !18334
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !18335, metadata !DIExpression()), !dbg !18336
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18337, metadata !DIExpression()), !dbg !18338
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18339, metadata !DIExpression()), !dbg !18340
  %0 = load i8*, i8** %left_quote.addr, align 8, !dbg !18341
  %1 = load i8*, i8** %right_quote.addr, align 8, !dbg !18342
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !18343
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !18344
  %call = call i8* @quotearg_n_custom_mem(i32 0, i8* %0, i8* %1, i8* %2, i64 %3), !dbg !18345
  ret i8* %call, !dbg !18346
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_n_mem(i32 %n, i8* %arg, i64 %argsize) #0 !dbg !18347 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18350, metadata !DIExpression()), !dbg !18351
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18352, metadata !DIExpression()), !dbg !18353
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18354, metadata !DIExpression()), !dbg !18355
  %0 = load i32, i32* %n.addr, align 4, !dbg !18356
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !18357
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !18358
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @quote_quoting_options), !dbg !18359
  ret i8* %call, !dbg !18360
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_mem(i8* %arg, i64 %argsize) #0 !dbg !18361 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18364, metadata !DIExpression()), !dbg !18365
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !18366, metadata !DIExpression()), !dbg !18367
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18368
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !18369
  %call = call i8* @quote_n_mem(i32 0, i8* %0, i64 %1), !dbg !18370
  ret i8* %call, !dbg !18371
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_n(i32 %n, i8* %arg) #0 !dbg !18372 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !18375, metadata !DIExpression()), !dbg !18376
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18377, metadata !DIExpression()), !dbg !18378
  %0 = load i32, i32* %n.addr, align 4, !dbg !18379
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !18380
  %call = call i8* @quote_n_mem(i32 %0, i8* %1, i64 -1), !dbg !18381
  ret i8* %call, !dbg !18382
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote(i8* %arg) #0 !dbg !18383 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18384, metadata !DIExpression()), !dbg !18385
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !18386
  %call = call i8* @quote_n(i32 0, i8* %0), !dbg !18387
  ret i8* %call, !dbg !18388
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @same_name(i8* %source, i8* %dest) #0 !dbg !18389 {
entry:
  %source.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !18393, metadata !DIExpression()), !dbg !18394
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !18395, metadata !DIExpression()), !dbg !18396
  %0 = load i8*, i8** %source.addr, align 8, !dbg !18397
  %1 = load i8*, i8** %dest.addr, align 8, !dbg !18398
  %call = call zeroext i1 @same_nameat(i32 -100, i8* %0, i32 -100, i8* %1), !dbg !18399
  ret i1 %call, !dbg !18400
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @same_nameat(i32 %source_dfd, i8* %source, i32 %dest_dfd, i8* %dest) #0 !dbg !18401 {
entry:
  %source_dfd.addr = alloca i32, align 4
  %source.addr = alloca i8*, align 8
  %dest_dfd.addr = alloca i32, align 4
  %dest.addr = alloca i8*, align 8
  %source_basename = alloca i8*, align 8, !ctir !146
  %dest_basename = alloca i8*, align 8, !ctir !146
  %source_baselen = alloca i64, align 8, !ctir !149
  %dest_baselen = alloca i64, align 8, !ctir !149
  %identical_basenames = alloca i8, align 1, !ctir !141
  %compare_dirs = alloca i8, align 1, !ctir !141
  %same = alloca i8, align 1, !ctir !141
  %source_dir_stats = alloca %struct.stat, align 8, !ctir !18404
  %dest_dir_stats = alloca %struct.stat, align 8, !ctir !18404
  %source_dirname = alloca i8*, align 8, !ctir !143
  %flags = alloca i32, align 4, !ctir !27
  %dest_dirname = alloca i8*, align 8, !ctir !143
  store i32 %source_dfd, i32* %source_dfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %source_dfd.addr, metadata !18425, metadata !DIExpression()), !dbg !18426
  store i8* %source, i8** %source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %source.addr, metadata !18427, metadata !DIExpression()), !dbg !18428
  store i32 %dest_dfd, i32* %dest_dfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dest_dfd.addr, metadata !18429, metadata !DIExpression()), !dbg !18430
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !18431, metadata !DIExpression()), !dbg !18432
  call void @llvm.dbg.declare(metadata i8** %source_basename, metadata !18433, metadata !DIExpression()), !dbg !18434
  %0 = load i8*, i8** %source.addr, align 8, !dbg !18435
  %call = call i8* @last_component(i8* %0) #16, !dbg !18436
  store i8* %call, i8** %source_basename, align 8, !dbg !18434
  call void @llvm.dbg.declare(metadata i8** %dest_basename, metadata !18437, metadata !DIExpression()), !dbg !18438
  %1 = load i8*, i8** %dest.addr, align 8, !dbg !18439
  %call1 = call i8* @last_component(i8* %1) #16, !dbg !18440
  store i8* %call1, i8** %dest_basename, align 8, !dbg !18438
  call void @llvm.dbg.declare(metadata i64* %source_baselen, metadata !18441, metadata !DIExpression()), !dbg !18442
  %2 = load i8*, i8** %source_basename, align 8, !dbg !18443
  %call2 = call i64 @base_len(i8* %2) #16, !dbg !18444
  store i64 %call2, i64* %source_baselen, align 8, !dbg !18442
  call void @llvm.dbg.declare(metadata i64* %dest_baselen, metadata !18445, metadata !DIExpression()), !dbg !18446
  %3 = load i8*, i8** %dest_basename, align 8, !dbg !18447
  %call3 = call i64 @base_len(i8* %3) #16, !dbg !18448
  store i64 %call3, i64* %dest_baselen, align 8, !dbg !18446
  call void @llvm.dbg.declare(metadata i8* %identical_basenames, metadata !18449, metadata !DIExpression()), !dbg !18450
  %4 = load i64, i64* %source_baselen, align 8, !dbg !18451
  %5 = load i64, i64* %dest_baselen, align 8, !dbg !18452
  %cmp = icmp eq i64 %4, %5, !dbg !18453
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !18454

land.rhs:                                         ; preds = %entry
  %6 = load i8*, i8** %source_basename, align 8, !dbg !18455
  %7 = load i8*, i8** %dest_basename, align 8, !dbg !18456
  %8 = load i64, i64* %dest_baselen, align 8, !dbg !18457
  %call4 = call i32 @memcmp(i8* %6, i8* %7, i64 %8) #16, !dbg !18458
  %cmp5 = icmp eq i32 %call4, 0, !dbg !18459
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %9 = phi i1 [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !18460
  %frombool = zext i1 %9 to i8, !dbg !18450
  store i8 %frombool, i8* %identical_basenames, align 1, !dbg !18450
  call void @llvm.dbg.declare(metadata i8* %compare_dirs, metadata !18461, metadata !DIExpression()), !dbg !18462
  %10 = load i8, i8* %identical_basenames, align 1, !dbg !18463
  %tobool = trunc i8 %10 to i1, !dbg !18463
  %frombool6 = zext i1 %tobool to i8, !dbg !18462
  store i8 %frombool6, i8* %compare_dirs, align 1, !dbg !18462
  call void @llvm.dbg.declare(metadata i8* %same, metadata !18464, metadata !DIExpression()), !dbg !18465
  store i8 0, i8* %same, align 1, !dbg !18465
  %11 = load i8, i8* %compare_dirs, align 1, !dbg !18466
  %tobool7 = trunc i8 %11 to i1, !dbg !18466
  br i1 %tobool7, label %if.then, label %if.end26, !dbg !18468

if.then:                                          ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.stat* %source_dir_stats, metadata !18469, metadata !DIExpression()), !dbg !18471
  call void @llvm.dbg.declare(metadata %struct.stat* %dest_dir_stats, metadata !18472, metadata !DIExpression()), !dbg !18473
  call void @llvm.dbg.declare(metadata i8** %source_dirname, metadata !18474, metadata !DIExpression()), !dbg !18475
  %12 = load i8*, i8** %source.addr, align 8, !dbg !18476
  %call8 = call i8* @dir_name(i8* %12), !dbg !18477
  store i8* %call8, i8** %source_dirname, align 8, !dbg !18475
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !18478, metadata !DIExpression()), !dbg !18479
  store i32 256, i32* %flags, align 4, !dbg !18479
  %13 = load i32, i32* %source_dfd.addr, align 4, !dbg !18480
  %14 = load i8*, i8** %source_dirname, align 8, !dbg !18482
  %15 = load i32, i32* %flags, align 4, !dbg !18483
  %call9 = call i32 @fstatat(i32 %13, i8* %14, %struct.stat* %source_dir_stats, i32 %15) #13, !dbg !18484
  %cmp10 = icmp ne i32 %call9, 0, !dbg !18485
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !18486

if.then11:                                        ; preds = %if.then
  %call12 = call i32* @__errno_location() #17, !dbg !18487
  %16 = load i32, i32* %call12, align 4, !dbg !18487, !ctir !27
  %17 = load i8*, i8** %source_dirname, align 8, !dbg !18489
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.420, i64 0, i64 0), i8* %17), !dbg !18490
  br label %if.end, !dbg !18491

if.end:                                           ; preds = %if.then11, %if.then
  %18 = load i8*, i8** %source_dirname, align 8, !dbg !18492
  call void @free(i8* %18) #13, !dbg !18493
  call void @llvm.dbg.declare(metadata i8** %dest_dirname, metadata !18494, metadata !DIExpression()), !dbg !18495
  %19 = load i8*, i8** %dest.addr, align 8, !dbg !18496
  %call13 = call i8* @dir_name(i8* %19), !dbg !18497
  store i8* %call13, i8** %dest_dirname, align 8, !dbg !18495
  %20 = load i32, i32* %dest_dfd.addr, align 4, !dbg !18498
  %21 = load i8*, i8** %dest_dirname, align 8, !dbg !18500
  %22 = load i32, i32* %flags, align 4, !dbg !18501
  %call14 = call i32 @fstatat(i32 %20, i8* %21, %struct.stat* %dest_dir_stats, i32 %22) #13, !dbg !18502
  %cmp15 = icmp ne i32 %call14, 0, !dbg !18503
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !18504

if.then16:                                        ; preds = %if.end
  %call17 = call i32* @__errno_location() #17, !dbg !18505
  %23 = load i32, i32* %call17, align 4, !dbg !18505, !ctir !27
  %24 = load i8*, i8** %dest_dirname, align 8, !dbg !18507
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.420, i64 0, i64 0), i8* %24), !dbg !18508
  br label %if.end18, !dbg !18509

if.end18:                                         ; preds = %if.then16, %if.end
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %source_dir_stats, i32 0, i32 1, !dbg !18510, !ctir !18404
  %25 = load i64, i64* %st_ino, align 8, !dbg !18510, !ctir !197
  %st_ino19 = getelementptr inbounds %struct.stat, %struct.stat* %dest_dir_stats, i32 0, i32 1, !dbg !18510, !ctir !18404
  %26 = load i64, i64* %st_ino19, align 8, !dbg !18510, !ctir !197
  %cmp20 = icmp eq i64 %25, %26, !dbg !18510
  br i1 %cmp20, label %land.rhs21, label %land.end24, !dbg !18510

land.rhs21:                                       ; preds = %if.end18
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %source_dir_stats, i32 0, i32 0, !dbg !18510, !ctir !18404
  %27 = load i64, i64* %st_dev, align 8, !dbg !18510, !ctir !195
  %st_dev22 = getelementptr inbounds %struct.stat, %struct.stat* %dest_dir_stats, i32 0, i32 0, !dbg !18510, !ctir !18404
  %28 = load i64, i64* %st_dev22, align 8, !dbg !18510, !ctir !195
  %cmp23 = icmp eq i64 %27, %28, !dbg !18510
  br label %land.end24

land.end24:                                       ; preds = %land.rhs21, %if.end18
  %29 = phi i1 [ false, %if.end18 ], [ %cmp23, %land.rhs21 ], !dbg !18511
  %frombool25 = zext i1 %29 to i8, !dbg !18512
  store i8 %frombool25, i8* %same, align 1, !dbg !18512
  %30 = load i8*, i8** %dest_dirname, align 8, !dbg !18513
  call void @free(i8* %30) #13, !dbg !18514
  br label %if.end26, !dbg !18515

if.end26:                                         ; preds = %land.end24, %land.end
  %31 = load i8, i8* %same, align 1, !dbg !18516
  %tobool27 = trunc i8 %31 to i1, !dbg !18516
  ret i1 %tobool27, !dbg !18517
}

; Function Attrs: nounwind
declare dso_local i32 @fstatat(i32, i8*, %struct.stat*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getcon(i8** %con) #0 !dbg !18518 {
entry:
  %con.addr = alloca i8**, align 8
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18524, metadata !DIExpression()), !dbg !18525
  %call = call i32* @__errno_location() #17, !dbg !18526
  store i32 95, i32* %call, align 4, !dbg !18527, !ctir !27
  ret i32 -1, !dbg !18528
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @freecon(i8* %con) #0 !dbg !18529 {
entry:
  %con.addr = alloca i8*, align 8
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18532, metadata !DIExpression()), !dbg !18533
  ret void, !dbg !18534
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getfscreatecon(i8** %con) #0 !dbg !18535 {
entry:
  %con.addr = alloca i8**, align 8
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18536, metadata !DIExpression()), !dbg !18537
  %call = call i32* @__errno_location() #17, !dbg !18538
  store i32 95, i32* %call, align 4, !dbg !18539, !ctir !27
  ret i32 -1, !dbg !18540
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setfscreatecon(i8* %con) #0 !dbg !18541 {
entry:
  %con.addr = alloca i8*, align 8
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18544, metadata !DIExpression()), !dbg !18545
  %call = call i32* @__errno_location() #17, !dbg !18546
  store i32 95, i32* %call, align 4, !dbg !18547, !ctir !27
  ret i32 -1, !dbg !18548
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @matchpathcon(i8* %file, i32 %m, i8** %con) #0 !dbg !18549 {
entry:
  %file.addr = alloca i8*, align 8
  %m.addr = alloca i32, align 4
  %con.addr = alloca i8**, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !18552, metadata !DIExpression()), !dbg !18553
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !18554, metadata !DIExpression()), !dbg !18555
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18556, metadata !DIExpression()), !dbg !18557
  %call = call i32* @__errno_location() #17, !dbg !18558
  store i32 95, i32* %call, align 4, !dbg !18559, !ctir !27
  ret i32 -1, !dbg !18560
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @getfilecon(i8* %file, i8** %con) #0 !dbg !18561 {
entry:
  %file.addr = alloca i8*, align 8
  %con.addr = alloca i8**, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !18564, metadata !DIExpression()), !dbg !18565
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18566, metadata !DIExpression()), !dbg !18567
  %call = call i32* @__errno_location() #17, !dbg !18568
  store i32 95, i32* %call, align 4, !dbg !18569, !ctir !27
  ret i32 -1, !dbg !18570
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @lgetfilecon(i8* %file, i8** %con) #0 !dbg !18571 {
entry:
  %file.addr = alloca i8*, align 8
  %con.addr = alloca i8**, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !18572, metadata !DIExpression()), !dbg !18573
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18574, metadata !DIExpression()), !dbg !18575
  %call = call i32* @__errno_location() #17, !dbg !18576
  store i32 95, i32* %call, align 4, !dbg !18577, !ctir !27
  ret i32 -1, !dbg !18578
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fgetfilecon(i32 %fd, i8** %con) #0 !dbg !18579 {
entry:
  %fd.addr = alloca i32, align 4
  %con.addr = alloca i8**, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !18582, metadata !DIExpression()), !dbg !18583
  store i8** %con, i8*** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %con.addr, metadata !18584, metadata !DIExpression()), !dbg !18585
  %call = call i32* @__errno_location() #17, !dbg !18586
  store i32 95, i32* %call, align 4, !dbg !18587, !ctir !27
  ret i32 -1, !dbg !18588
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setfilecon(i8* %file, i8* %con) #0 !dbg !18589 {
entry:
  %file.addr = alloca i8*, align 8
  %con.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !18592, metadata !DIExpression()), !dbg !18593
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18594, metadata !DIExpression()), !dbg !18595
  %call = call i32* @__errno_location() #17, !dbg !18596
  store i32 95, i32* %call, align 4, !dbg !18597, !ctir !27
  ret i32 -1, !dbg !18598
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @lsetfilecon(i8* %file, i8* %con) #0 !dbg !18599 {
entry:
  %file.addr = alloca i8*, align 8
  %con.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !18600, metadata !DIExpression()), !dbg !18601
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18602, metadata !DIExpression()), !dbg !18603
  %call = call i32* @__errno_location() #17, !dbg !18604
  store i32 95, i32* %call, align 4, !dbg !18605, !ctir !27
  ret i32 -1, !dbg !18606
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fsetfilecon(i32 %fd, i8* %con) #0 !dbg !18607 {
entry:
  %fd.addr = alloca i32, align 4
  %con.addr = alloca i8*, align 8
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !18610, metadata !DIExpression()), !dbg !18611
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18612, metadata !DIExpression()), !dbg !18613
  %call = call i32* @__errno_location() #17, !dbg !18614
  store i32 95, i32* %call, align 4, !dbg !18615, !ctir !27
  ret i32 -1, !dbg !18616
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @security_check_context(i8* %con) #0 !dbg !18617 {
entry:
  %con.addr = alloca i8*, align 8
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18618, metadata !DIExpression()), !dbg !18619
  %call = call i32* @__errno_location() #17, !dbg !18620
  store i32 95, i32* %call, align 4, !dbg !18621, !ctir !27
  ret i32 -1, !dbg !18622
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @security_check_context_raw(i8* %con) #0 !dbg !18623 {
entry:
  %con.addr = alloca i8*, align 8
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18624, metadata !DIExpression()), !dbg !18625
  %call = call i32* @__errno_location() #17, !dbg !18626
  store i32 95, i32* %call, align 4, !dbg !18627, !ctir !27
  ret i32 -1, !dbg !18628
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setexeccon(i8* %con) #0 !dbg !18629 {
entry:
  %con.addr = alloca i8*, align 8
  store i8* %con, i8** %con.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %con.addr, metadata !18630, metadata !DIExpression()), !dbg !18631
  %call = call i32* @__errno_location() #17, !dbg !18632
  store i32 95, i32* %call, align 4, !dbg !18633, !ctir !27
  ret i32 -1, !dbg !18634
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @security_compute_create(i8* %scon, i8* %tcon, i16 zeroext %tclass, i8** %newcon) #0 !dbg !18635 {
entry:
  %scon.addr = alloca i8*, align 8
  %tcon.addr = alloca i8*, align 8
  %tclass.addr = alloca i16, align 2
  %newcon.addr = alloca i8**, align 8
  store i8* %scon, i8** %scon.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %scon.addr, metadata !18639, metadata !DIExpression()), !dbg !18640
  store i8* %tcon, i8** %tcon.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tcon.addr, metadata !18641, metadata !DIExpression()), !dbg !18642
  store i16 %tclass, i16* %tclass.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %tclass.addr, metadata !18643, metadata !DIExpression()), !dbg !18644
  store i8** %newcon, i8*** %newcon.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %newcon.addr, metadata !18645, metadata !DIExpression()), !dbg !18646
  %call = call i32* @__errno_location() #17, !dbg !18647
  store i32 95, i32* %call, align 4, !dbg !18648, !ctir !27
  ret i32 -1, !dbg !18649
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @string_to_security_class(i8* %name) #0 !dbg !18650 {
entry:
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !18653, metadata !DIExpression()), !dbg !18654
  %call = call i32* @__errno_location() #17, !dbg !18655
  store i32 95, i32* %call, align 4, !dbg !18656, !ctir !27
  ret i16 0, !dbg !18657
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @matchpathcon_init_prefix(i8* %path, i8* %prefix) #0 !dbg !18658 {
entry:
  %path.addr = alloca i8*, align 8
  %prefix.addr = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !18659, metadata !DIExpression()), !dbg !18660
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !18661, metadata !DIExpression()), !dbg !18662
  %call = call i32* @__errno_location() #17, !dbg !18663
  store i32 95, i32* %call, align 4, !dbg !18664, !ctir !27
  ret i32 -1, !dbg !18665
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @get_stat_atime_ns(%struct.stat* %st) #9 !dbg !18666 {
entry:
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18693, metadata !DIExpression()), !dbg !18694
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18695
  %st_atim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 11, !dbg !18695, !ctir !18671
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %st_atim, i32 0, i32 1, !dbg !18696, !ctir !18686
  %1 = load i64, i64* %tv_nsec, align 8, !dbg !18696, !ctir !219
  ret i64 %1, !dbg !18697
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @get_stat_ctime_ns(%struct.stat* %st) #9 !dbg !18698 {
entry:
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18699, metadata !DIExpression()), !dbg !18700
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18701
  %st_ctim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 13, !dbg !18701, !ctir !18671
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %st_ctim, i32 0, i32 1, !dbg !18702, !ctir !18686
  %1 = load i64, i64* %tv_nsec, align 8, !dbg !18702, !ctir !219
  ret i64 %1, !dbg !18703
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @get_stat_mtime_ns(%struct.stat* %st) #9 !dbg !18704 {
entry:
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18705, metadata !DIExpression()), !dbg !18706
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18707
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 12, !dbg !18707, !ctir !18671
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %st_mtim, i32 0, i32 1, !dbg !18708, !ctir !18686
  %1 = load i64, i64* %tv_nsec, align 8, !dbg !18708, !ctir !219
  ret i64 %1, !dbg !18709
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @get_stat_birthtime_ns(%struct.stat* %st) #9 !dbg !18710 {
entry:
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18711, metadata !DIExpression()), !dbg !18712
  ret i64 0, !dbg !18713
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local { i64, i64 } @get_stat_atime(%struct.stat* %st) #9 !dbg !18714 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18717, metadata !DIExpression()), !dbg !18718
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18719
  %st_atim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 11, !dbg !18719, !ctir !18671
  %1 = bitcast %struct.dev_ino* %retval to i8*, !dbg !18719
  %2 = bitcast %struct.dev_ino* %st_atim to i8*, !dbg !18719
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !dbg !18719
  %3 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !18720
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !18720
  ret { i64, i64 } %4, !dbg !18720
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local { i64, i64 } @get_stat_ctime(%struct.stat* %st) #9 !dbg !18721 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18722, metadata !DIExpression()), !dbg !18723
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18724
  %st_ctim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 13, !dbg !18724, !ctir !18671
  %1 = bitcast %struct.dev_ino* %retval to i8*, !dbg !18724
  %2 = bitcast %struct.dev_ino* %st_ctim to i8*, !dbg !18724
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !dbg !18724
  %3 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !18725
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !18725
  ret { i64, i64 } %4, !dbg !18725
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local { i64, i64 } @get_stat_mtime(%struct.stat* %st) #9 !dbg !18726 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18727, metadata !DIExpression()), !dbg !18728
  %0 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !18729
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 12, !dbg !18729, !ctir !18671
  %1 = bitcast %struct.dev_ino* %retval to i8*, !dbg !18729
  %2 = bitcast %struct.dev_ino* %st_mtim to i8*, !dbg !18729
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !dbg !18729
  %3 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !18730
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !18730
  ret { i64, i64 } %4, !dbg !18730
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local { i64, i64 } @get_stat_birthtime(%struct.stat* %st) #9 !dbg !18731 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %st.addr = alloca %struct.stat*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18732, metadata !DIExpression()), !dbg !18733
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %retval, metadata !18734, metadata !DIExpression()), !dbg !18735
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %retval, i32 0, i32 0, !dbg !18736, !ctir !18686
  store i64 -1, i64* %tv_sec, align 8, !dbg !18737, !ctir !164
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %retval, i32 0, i32 1, !dbg !18738, !ctir !18686
  store i64 -1, i64* %tv_nsec, align 8, !dbg !18739, !ctir !219
  %0 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !18740
  %1 = load { i64, i64 }, { i64, i64 }* %0, align 8, !dbg !18740
  ret { i64, i64 } %1, !dbg !18740
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @stat_time_normalize(i32 %result, %struct.stat* %st) #0 !dbg !18741 {
entry:
  %result.addr = alloca i32, align 4
  %st.addr = alloca %struct.stat*, align 8
  store i32 %result, i32* %result.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %result.addr, metadata !18745, metadata !DIExpression()), !dbg !18746
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !18747, metadata !DIExpression()), !dbg !18748
  %0 = load i32, i32* %result.addr, align 4, !dbg !18749
  ret i32 %0, !dbg !18750
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local { i64, i64 } @make_timespec(i64 %s, i64 %ns) #0 !dbg !18751 {
entry:
  %retval = alloca %struct.dev_ino, align 8
  %s.addr = alloca i64, align 8
  %ns.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !18759, metadata !DIExpression()), !dbg !18760
  store i64 %ns, i64* %ns.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ns.addr, metadata !18761, metadata !DIExpression()), !dbg !18762
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %retval, metadata !18763, metadata !DIExpression()), !dbg !18764
  %0 = load i64, i64* %s.addr, align 8, !dbg !18765
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %retval, i32 0, i32 0, !dbg !18766, !ctir !18755
  store i64 %0, i64* %tv_sec, align 8, !dbg !18767, !ctir !164
  %1 = load i64, i64* %ns.addr, align 8, !dbg !18768
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %retval, i32 0, i32 1, !dbg !18769, !ctir !18755
  store i64 %1, i64* %tv_nsec, align 8, !dbg !18770, !ctir !219
  %2 = bitcast %struct.dev_ino* %retval to { i64, i64 }*, !dbg !18771
  %3 = load { i64, i64 }, { i64, i64 }* %2, align 8, !dbg !18771
  ret { i64, i64 } %3, !dbg !18771
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @timespec_cmp(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #9 !dbg !18772 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.dev_ino, align 8
  %b = alloca %struct.dev_ino, align 8
  %0 = bitcast %struct.dev_ino* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.dev_ino* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %a, metadata !18775, metadata !DIExpression()), !dbg !18776
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %b, metadata !18777, metadata !DIExpression()), !dbg !18778
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 0, !dbg !18779, !ctir !18755
  %6 = load i64, i64* %tv_sec, align 8, !dbg !18779, !ctir !164
  %tv_sec1 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %b, i32 0, i32 0, !dbg !18781, !ctir !18755
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !18781, !ctir !164
  %cmp = icmp slt i64 %6, %7, !dbg !18782
  br i1 %cmp, label %if.then, label %if.end, !dbg !18783

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !18784
  br label %return, !dbg !18784

if.end:                                           ; preds = %entry
  %tv_sec2 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 0, !dbg !18785, !ctir !18755
  %8 = load i64, i64* %tv_sec2, align 8, !dbg !18785, !ctir !164
  %tv_sec3 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %b, i32 0, i32 0, !dbg !18787, !ctir !18755
  %9 = load i64, i64* %tv_sec3, align 8, !dbg !18787, !ctir !164
  %cmp4 = icmp sgt i64 %8, %9, !dbg !18788
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !18789

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !18790
  br label %return, !dbg !18790

if.end6:                                          ; preds = %if.end
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 1, !dbg !18791, !ctir !18755
  %10 = load i64, i64* %tv_nsec, align 8, !dbg !18791, !ctir !219
  %cmp7 = icmp sle i64 -1, %10, !dbg !18791
  br i1 %cmp7, label %land.lhs.true, label %cond.false, !dbg !18791

land.lhs.true:                                    ; preds = %if.end6
  %tv_nsec8 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 1, !dbg !18791, !ctir !18755
  %11 = load i64, i64* %tv_nsec8, align 8, !dbg !18791, !ctir !219
  %cmp9 = icmp sle i64 %11, 2000000000, !dbg !18791
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !18791

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !18791

cond.false:                                       ; preds = %land.lhs.true, %if.end6
  unreachable, !dbg !18791

unreachable.cont:                                 ; No predecessors!
  br label %cond.end, !dbg !18791

cond.end:                                         ; preds = %unreachable.cont, %cond.true
  %tv_nsec10 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %b, i32 0, i32 1, !dbg !18792, !ctir !18755
  %12 = load i64, i64* %tv_nsec10, align 8, !dbg !18792, !ctir !219
  %cmp11 = icmp sle i64 -1, %12, !dbg !18792
  br i1 %cmp11, label %land.lhs.true12, label %cond.false16, !dbg !18792

land.lhs.true12:                                  ; preds = %cond.end
  %tv_nsec13 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %b, i32 0, i32 1, !dbg !18792, !ctir !18755
  %13 = load i64, i64* %tv_nsec13, align 8, !dbg !18792, !ctir !219
  %cmp14 = icmp sle i64 %13, 2000000000, !dbg !18792
  br i1 %cmp14, label %cond.true15, label %cond.false16, !dbg !18792

cond.true15:                                      ; preds = %land.lhs.true12
  br label %cond.end18, !dbg !18792

cond.false16:                                     ; preds = %land.lhs.true12, %cond.end
  unreachable, !dbg !18792

unreachable.cont17:                               ; No predecessors!
  br label %cond.end18, !dbg !18792

cond.end18:                                       ; preds = %unreachable.cont17, %cond.true15
  %tv_nsec19 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 1, !dbg !18793, !ctir !18755
  %14 = load i64, i64* %tv_nsec19, align 8, !dbg !18793, !ctir !219
  %tv_nsec20 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %b, i32 0, i32 1, !dbg !18794, !ctir !18755
  %15 = load i64, i64* %tv_nsec20, align 8, !dbg !18794, !ctir !219
  %sub = sub nsw i64 %14, %15, !dbg !18795
  %conv = trunc i64 %sub to i32, !dbg !18796
  store i32 %conv, i32* %retval, align 4, !dbg !18797
  br label %return, !dbg !18797

return:                                           ; preds = %cond.end18, %if.then5, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !18798
  ret i32 %16, !dbg !18798
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @timespec_sign(i64 %a.coerce0, i64 %a.coerce1) #9 !dbg !18799 {
entry:
  %a = alloca %struct.dev_ino, align 8
  %0 = bitcast %struct.dev_ino* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %a, metadata !18802, metadata !DIExpression()), !dbg !18803
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 0, !dbg !18804, !ctir !18755
  %3 = load i64, i64* %tv_sec, align 8, !dbg !18804, !ctir !164
  %cmp = icmp slt i64 %3, 0, !dbg !18805
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !18806

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !18806

cond.false:                                       ; preds = %entry
  %tv_sec1 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 0, !dbg !18807, !ctir !18755
  %4 = load i64, i64* %tv_sec1, align 8, !dbg !18807, !ctir !164
  %tobool = icmp ne i64 %4, 0, !dbg !18808
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !18809

lor.rhs:                                          ; preds = %cond.false
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 1, !dbg !18810, !ctir !18755
  %5 = load i64, i64* %tv_nsec, align 8, !dbg !18810, !ctir !219
  %tobool2 = icmp ne i64 %5, 0, !dbg !18809
  br label %lor.end, !dbg !18809

lor.end:                                          ; preds = %lor.rhs, %cond.false
  %6 = phi i1 [ true, %cond.false ], [ %tobool2, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !18809
  br label %cond.end, !dbg !18806

cond.end:                                         ; preds = %lor.end, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %lor.ext, %lor.end ], !dbg !18806
  ret i32 %cond, !dbg !18811
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @timespectod(i64 %a.coerce0, i64 %a.coerce1) #0 !dbg !18812 {
entry:
  %a = alloca %struct.dev_ino, align 8
  %0 = bitcast %struct.dev_ino* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %a, metadata !18816, metadata !DIExpression()), !dbg !18817
  %tv_sec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 0, !dbg !18818, !ctir !18755
  %3 = load i64, i64* %tv_sec, align 8, !dbg !18818, !ctir !164
  %conv = sitofp i64 %3 to double, !dbg !18819
  %tv_nsec = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %a, i32 0, i32 1, !dbg !18820, !ctir !18755
  %4 = load i64, i64* %tv_nsec, align 8, !dbg !18820, !ctir !219
  %conv1 = sitofp i64 %4 to double, !dbg !18821
  %div = fdiv double %conv1, 1.000000e+09, !dbg !18822
  %add = fadd double %conv, %div, !dbg !18823
  ret double %add, !dbg !18824
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_arn(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors, i64 %n_authors) #0 !dbg !18825 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors.addr = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !18829, metadata !DIExpression()), !dbg !18830
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !18831, metadata !DIExpression()), !dbg !18832
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !18833, metadata !DIExpression()), !dbg !18834
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !18835, metadata !DIExpression()), !dbg !18836
  store i8** %authors, i8*** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %authors.addr, metadata !18837, metadata !DIExpression()), !dbg !18838
  store i64 %n_authors, i64* %n_authors.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_authors.addr, metadata !18839, metadata !DIExpression()), !dbg !18840
  %0 = load i8*, i8** %command_name.addr, align 8, !dbg !18841
  %tobool = icmp ne i8* %0, null, !dbg !18841
  br i1 %tobool, label %if.then, label %if.else, !dbg !18843

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18844
  %2 = load i8*, i8** %command_name.addr, align 8, !dbg !18845
  %3 = load i8*, i8** %package.addr, align 8, !dbg !18846
  %4 = load i8*, i8** %version.addr, align 8, !dbg !18847
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.435, i64 0, i64 0), i8* %2, i8* %3, i8* %4), !dbg !18848
  br label %if.end, !dbg !18848

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18849
  %6 = load i8*, i8** %package.addr, align 8, !dbg !18850
  %7 = load i8*, i8** %version.addr, align 8, !dbg !18851
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.436, i64 0, i64 0), i8* %6, i8* %7), !dbg !18852
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18853
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.437, i64 0, i64 0)) #13, !dbg !18854
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %call2, i32 2019), !dbg !18855
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.3.438, i64 0, i64 0)) #13, !dbg !18856
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18856
  %call5 = call i32 @fputs_unlocked(i8* %call4, %struct._IO_FILE* %9), !dbg !18856
  %10 = load i64, i64* %n_authors.addr, align 8, !dbg !18857
  switch i64 %10, label %sw.default [
    i64 0, label %sw.bb
    i64 1, label %sw.bb6
    i64 2, label %sw.bb9
    i64 3, label %sw.bb14
    i64 4, label %sw.bb20
    i64 5, label %sw.bb27
    i64 6, label %sw.bb35
    i64 7, label %sw.bb44
    i64 8, label %sw.bb54
    i64 9, label %sw.bb65
  ], !dbg !18858

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog, !dbg !18859

sw.bb6:                                           ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18861
  %call7 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.439, i64 0, i64 0)) #13, !dbg !18862
  %12 = load i8**, i8*** %authors.addr, align 8, !dbg !18863
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 0, !dbg !18863, !ctir !693
  %13 = load i8*, i8** %arrayidx, align 8, !dbg !18863
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* %call7, i8* %13), !dbg !18864
  br label %sw.epilog, !dbg !18865

sw.bb9:                                           ; preds = %if.end
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18866
  %call10 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5.440, i64 0, i64 0)) #13, !dbg !18867
  %15 = load i8**, i8*** %authors.addr, align 8, !dbg !18868
  %arrayidx11 = getelementptr inbounds i8*, i8** %15, i64 0, !dbg !18868, !ctir !693
  %16 = load i8*, i8** %arrayidx11, align 8, !dbg !18868
  %17 = load i8**, i8*** %authors.addr, align 8, !dbg !18869
  %arrayidx12 = getelementptr inbounds i8*, i8** %17, i64 1, !dbg !18869, !ctir !693
  %18 = load i8*, i8** %arrayidx12, align 8, !dbg !18869
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* %call10, i8* %16, i8* %18), !dbg !18870
  br label %sw.epilog, !dbg !18871

sw.bb14:                                          ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18872
  %call15 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.441, i64 0, i64 0)) #13, !dbg !18873
  %20 = load i8**, i8*** %authors.addr, align 8, !dbg !18874
  %arrayidx16 = getelementptr inbounds i8*, i8** %20, i64 0, !dbg !18874, !ctir !693
  %21 = load i8*, i8** %arrayidx16, align 8, !dbg !18874
  %22 = load i8**, i8*** %authors.addr, align 8, !dbg !18875
  %arrayidx17 = getelementptr inbounds i8*, i8** %22, i64 1, !dbg !18875, !ctir !693
  %23 = load i8*, i8** %arrayidx17, align 8, !dbg !18875
  %24 = load i8**, i8*** %authors.addr, align 8, !dbg !18876
  %arrayidx18 = getelementptr inbounds i8*, i8** %24, i64 2, !dbg !18876, !ctir !693
  %25 = load i8*, i8** %arrayidx18, align 8, !dbg !18876
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* %call15, i8* %21, i8* %23, i8* %25), !dbg !18877
  br label %sw.epilog, !dbg !18878

sw.bb20:                                          ; preds = %if.end
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18879
  %call21 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7.442, i64 0, i64 0)) #13, !dbg !18880
  %27 = load i8**, i8*** %authors.addr, align 8, !dbg !18881
  %arrayidx22 = getelementptr inbounds i8*, i8** %27, i64 0, !dbg !18881, !ctir !693
  %28 = load i8*, i8** %arrayidx22, align 8, !dbg !18881
  %29 = load i8**, i8*** %authors.addr, align 8, !dbg !18882
  %arrayidx23 = getelementptr inbounds i8*, i8** %29, i64 1, !dbg !18882, !ctir !693
  %30 = load i8*, i8** %arrayidx23, align 8, !dbg !18882
  %31 = load i8**, i8*** %authors.addr, align 8, !dbg !18883
  %arrayidx24 = getelementptr inbounds i8*, i8** %31, i64 2, !dbg !18883, !ctir !693
  %32 = load i8*, i8** %arrayidx24, align 8, !dbg !18883
  %33 = load i8**, i8*** %authors.addr, align 8, !dbg !18884
  %arrayidx25 = getelementptr inbounds i8*, i8** %33, i64 3, !dbg !18884, !ctir !693
  %34 = load i8*, i8** %arrayidx25, align 8, !dbg !18884
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* %call21, i8* %28, i8* %30, i8* %32, i8* %34), !dbg !18885
  br label %sw.epilog, !dbg !18886

sw.bb27:                                          ; preds = %if.end
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18887
  %call28 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.443, i64 0, i64 0)) #13, !dbg !18888
  %36 = load i8**, i8*** %authors.addr, align 8, !dbg !18889
  %arrayidx29 = getelementptr inbounds i8*, i8** %36, i64 0, !dbg !18889, !ctir !693
  %37 = load i8*, i8** %arrayidx29, align 8, !dbg !18889
  %38 = load i8**, i8*** %authors.addr, align 8, !dbg !18890
  %arrayidx30 = getelementptr inbounds i8*, i8** %38, i64 1, !dbg !18890, !ctir !693
  %39 = load i8*, i8** %arrayidx30, align 8, !dbg !18890
  %40 = load i8**, i8*** %authors.addr, align 8, !dbg !18891
  %arrayidx31 = getelementptr inbounds i8*, i8** %40, i64 2, !dbg !18891, !ctir !693
  %41 = load i8*, i8** %arrayidx31, align 8, !dbg !18891
  %42 = load i8**, i8*** %authors.addr, align 8, !dbg !18892
  %arrayidx32 = getelementptr inbounds i8*, i8** %42, i64 3, !dbg !18892, !ctir !693
  %43 = load i8*, i8** %arrayidx32, align 8, !dbg !18892
  %44 = load i8**, i8*** %authors.addr, align 8, !dbg !18893
  %arrayidx33 = getelementptr inbounds i8*, i8** %44, i64 4, !dbg !18893, !ctir !693
  %45 = load i8*, i8** %arrayidx33, align 8, !dbg !18893
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* %call28, i8* %37, i8* %39, i8* %41, i8* %43, i8* %45), !dbg !18894
  br label %sw.epilog, !dbg !18895

sw.bb35:                                          ; preds = %if.end
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18896
  %call36 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9.444, i64 0, i64 0)) #13, !dbg !18897
  %47 = load i8**, i8*** %authors.addr, align 8, !dbg !18898
  %arrayidx37 = getelementptr inbounds i8*, i8** %47, i64 0, !dbg !18898, !ctir !693
  %48 = load i8*, i8** %arrayidx37, align 8, !dbg !18898
  %49 = load i8**, i8*** %authors.addr, align 8, !dbg !18899
  %arrayidx38 = getelementptr inbounds i8*, i8** %49, i64 1, !dbg !18899, !ctir !693
  %50 = load i8*, i8** %arrayidx38, align 8, !dbg !18899
  %51 = load i8**, i8*** %authors.addr, align 8, !dbg !18900
  %arrayidx39 = getelementptr inbounds i8*, i8** %51, i64 2, !dbg !18900, !ctir !693
  %52 = load i8*, i8** %arrayidx39, align 8, !dbg !18900
  %53 = load i8**, i8*** %authors.addr, align 8, !dbg !18901
  %arrayidx40 = getelementptr inbounds i8*, i8** %53, i64 3, !dbg !18901, !ctir !693
  %54 = load i8*, i8** %arrayidx40, align 8, !dbg !18901
  %55 = load i8**, i8*** %authors.addr, align 8, !dbg !18902
  %arrayidx41 = getelementptr inbounds i8*, i8** %55, i64 4, !dbg !18902, !ctir !693
  %56 = load i8*, i8** %arrayidx41, align 8, !dbg !18902
  %57 = load i8**, i8*** %authors.addr, align 8, !dbg !18903
  %arrayidx42 = getelementptr inbounds i8*, i8** %57, i64 5, !dbg !18903, !ctir !693
  %58 = load i8*, i8** %arrayidx42, align 8, !dbg !18903
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* %call36, i8* %48, i8* %50, i8* %52, i8* %54, i8* %56, i8* %58), !dbg !18904
  br label %sw.epilog, !dbg !18905

sw.bb44:                                          ; preds = %if.end
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18906
  %call45 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10.445, i64 0, i64 0)) #13, !dbg !18907
  %60 = load i8**, i8*** %authors.addr, align 8, !dbg !18908
  %arrayidx46 = getelementptr inbounds i8*, i8** %60, i64 0, !dbg !18908, !ctir !693
  %61 = load i8*, i8** %arrayidx46, align 8, !dbg !18908
  %62 = load i8**, i8*** %authors.addr, align 8, !dbg !18909
  %arrayidx47 = getelementptr inbounds i8*, i8** %62, i64 1, !dbg !18909, !ctir !693
  %63 = load i8*, i8** %arrayidx47, align 8, !dbg !18909
  %64 = load i8**, i8*** %authors.addr, align 8, !dbg !18910
  %arrayidx48 = getelementptr inbounds i8*, i8** %64, i64 2, !dbg !18910, !ctir !693
  %65 = load i8*, i8** %arrayidx48, align 8, !dbg !18910
  %66 = load i8**, i8*** %authors.addr, align 8, !dbg !18911
  %arrayidx49 = getelementptr inbounds i8*, i8** %66, i64 3, !dbg !18911, !ctir !693
  %67 = load i8*, i8** %arrayidx49, align 8, !dbg !18911
  %68 = load i8**, i8*** %authors.addr, align 8, !dbg !18912
  %arrayidx50 = getelementptr inbounds i8*, i8** %68, i64 4, !dbg !18912, !ctir !693
  %69 = load i8*, i8** %arrayidx50, align 8, !dbg !18912
  %70 = load i8**, i8*** %authors.addr, align 8, !dbg !18913
  %arrayidx51 = getelementptr inbounds i8*, i8** %70, i64 5, !dbg !18913, !ctir !693
  %71 = load i8*, i8** %arrayidx51, align 8, !dbg !18913
  %72 = load i8**, i8*** %authors.addr, align 8, !dbg !18914
  %arrayidx52 = getelementptr inbounds i8*, i8** %72, i64 6, !dbg !18914, !ctir !693
  %73 = load i8*, i8** %arrayidx52, align 8, !dbg !18914
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* %call45, i8* %61, i8* %63, i8* %65, i8* %67, i8* %69, i8* %71, i8* %73), !dbg !18915
  br label %sw.epilog, !dbg !18916

sw.bb54:                                          ; preds = %if.end
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18917
  %call55 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.446, i64 0, i64 0)) #13, !dbg !18918
  %75 = load i8**, i8*** %authors.addr, align 8, !dbg !18919
  %arrayidx56 = getelementptr inbounds i8*, i8** %75, i64 0, !dbg !18919, !ctir !693
  %76 = load i8*, i8** %arrayidx56, align 8, !dbg !18919
  %77 = load i8**, i8*** %authors.addr, align 8, !dbg !18920
  %arrayidx57 = getelementptr inbounds i8*, i8** %77, i64 1, !dbg !18920, !ctir !693
  %78 = load i8*, i8** %arrayidx57, align 8, !dbg !18920
  %79 = load i8**, i8*** %authors.addr, align 8, !dbg !18921
  %arrayidx58 = getelementptr inbounds i8*, i8** %79, i64 2, !dbg !18921, !ctir !693
  %80 = load i8*, i8** %arrayidx58, align 8, !dbg !18921
  %81 = load i8**, i8*** %authors.addr, align 8, !dbg !18922
  %arrayidx59 = getelementptr inbounds i8*, i8** %81, i64 3, !dbg !18922, !ctir !693
  %82 = load i8*, i8** %arrayidx59, align 8, !dbg !18922
  %83 = load i8**, i8*** %authors.addr, align 8, !dbg !18923
  %arrayidx60 = getelementptr inbounds i8*, i8** %83, i64 4, !dbg !18923, !ctir !693
  %84 = load i8*, i8** %arrayidx60, align 8, !dbg !18923
  %85 = load i8**, i8*** %authors.addr, align 8, !dbg !18924
  %arrayidx61 = getelementptr inbounds i8*, i8** %85, i64 5, !dbg !18924, !ctir !693
  %86 = load i8*, i8** %arrayidx61, align 8, !dbg !18924
  %87 = load i8**, i8*** %authors.addr, align 8, !dbg !18925
  %arrayidx62 = getelementptr inbounds i8*, i8** %87, i64 6, !dbg !18925, !ctir !693
  %88 = load i8*, i8** %arrayidx62, align 8, !dbg !18925
  %89 = load i8**, i8*** %authors.addr, align 8, !dbg !18926
  %arrayidx63 = getelementptr inbounds i8*, i8** %89, i64 7, !dbg !18926, !ctir !693
  %90 = load i8*, i8** %arrayidx63, align 8, !dbg !18926
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* %call55, i8* %76, i8* %78, i8* %80, i8* %82, i8* %84, i8* %86, i8* %88, i8* %90), !dbg !18927
  br label %sw.epilog, !dbg !18928

sw.bb65:                                          ; preds = %if.end
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18929
  %call66 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.12.447, i64 0, i64 0)) #13, !dbg !18930
  %92 = load i8**, i8*** %authors.addr, align 8, !dbg !18931
  %arrayidx67 = getelementptr inbounds i8*, i8** %92, i64 0, !dbg !18931, !ctir !693
  %93 = load i8*, i8** %arrayidx67, align 8, !dbg !18931
  %94 = load i8**, i8*** %authors.addr, align 8, !dbg !18932
  %arrayidx68 = getelementptr inbounds i8*, i8** %94, i64 1, !dbg !18932, !ctir !693
  %95 = load i8*, i8** %arrayidx68, align 8, !dbg !18932
  %96 = load i8**, i8*** %authors.addr, align 8, !dbg !18933
  %arrayidx69 = getelementptr inbounds i8*, i8** %96, i64 2, !dbg !18933, !ctir !693
  %97 = load i8*, i8** %arrayidx69, align 8, !dbg !18933
  %98 = load i8**, i8*** %authors.addr, align 8, !dbg !18934
  %arrayidx70 = getelementptr inbounds i8*, i8** %98, i64 3, !dbg !18934, !ctir !693
  %99 = load i8*, i8** %arrayidx70, align 8, !dbg !18934
  %100 = load i8**, i8*** %authors.addr, align 8, !dbg !18935
  %arrayidx71 = getelementptr inbounds i8*, i8** %100, i64 4, !dbg !18935, !ctir !693
  %101 = load i8*, i8** %arrayidx71, align 8, !dbg !18935
  %102 = load i8**, i8*** %authors.addr, align 8, !dbg !18936
  %arrayidx72 = getelementptr inbounds i8*, i8** %102, i64 5, !dbg !18936, !ctir !693
  %103 = load i8*, i8** %arrayidx72, align 8, !dbg !18936
  %104 = load i8**, i8*** %authors.addr, align 8, !dbg !18937
  %arrayidx73 = getelementptr inbounds i8*, i8** %104, i64 6, !dbg !18937, !ctir !693
  %105 = load i8*, i8** %arrayidx73, align 8, !dbg !18937
  %106 = load i8**, i8*** %authors.addr, align 8, !dbg !18938
  %arrayidx74 = getelementptr inbounds i8*, i8** %106, i64 7, !dbg !18938, !ctir !693
  %107 = load i8*, i8** %arrayidx74, align 8, !dbg !18938
  %108 = load i8**, i8*** %authors.addr, align 8, !dbg !18939
  %arrayidx75 = getelementptr inbounds i8*, i8** %108, i64 8, !dbg !18939, !ctir !693
  %109 = load i8*, i8** %arrayidx75, align 8, !dbg !18939
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* %call66, i8* %93, i8* %95, i8* %97, i8* %99, i8* %101, i8* %103, i8* %105, i8* %107, i8* %109), !dbg !18940
  br label %sw.epilog, !dbg !18941

sw.default:                                       ; preds = %if.end
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18942
  %call77 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.13.448, i64 0, i64 0)) #13, !dbg !18943
  %111 = load i8**, i8*** %authors.addr, align 8, !dbg !18944
  %arrayidx78 = getelementptr inbounds i8*, i8** %111, i64 0, !dbg !18944, !ctir !693
  %112 = load i8*, i8** %arrayidx78, align 8, !dbg !18944
  %113 = load i8**, i8*** %authors.addr, align 8, !dbg !18945
  %arrayidx79 = getelementptr inbounds i8*, i8** %113, i64 1, !dbg !18945, !ctir !693
  %114 = load i8*, i8** %arrayidx79, align 8, !dbg !18945
  %115 = load i8**, i8*** %authors.addr, align 8, !dbg !18946
  %arrayidx80 = getelementptr inbounds i8*, i8** %115, i64 2, !dbg !18946, !ctir !693
  %116 = load i8*, i8** %arrayidx80, align 8, !dbg !18946
  %117 = load i8**, i8*** %authors.addr, align 8, !dbg !18947
  %arrayidx81 = getelementptr inbounds i8*, i8** %117, i64 3, !dbg !18947, !ctir !693
  %118 = load i8*, i8** %arrayidx81, align 8, !dbg !18947
  %119 = load i8**, i8*** %authors.addr, align 8, !dbg !18948
  %arrayidx82 = getelementptr inbounds i8*, i8** %119, i64 4, !dbg !18948, !ctir !693
  %120 = load i8*, i8** %arrayidx82, align 8, !dbg !18948
  %121 = load i8**, i8*** %authors.addr, align 8, !dbg !18949
  %arrayidx83 = getelementptr inbounds i8*, i8** %121, i64 5, !dbg !18949, !ctir !693
  %122 = load i8*, i8** %arrayidx83, align 8, !dbg !18949
  %123 = load i8**, i8*** %authors.addr, align 8, !dbg !18950
  %arrayidx84 = getelementptr inbounds i8*, i8** %123, i64 6, !dbg !18950, !ctir !693
  %124 = load i8*, i8** %arrayidx84, align 8, !dbg !18950
  %125 = load i8**, i8*** %authors.addr, align 8, !dbg !18951
  %arrayidx85 = getelementptr inbounds i8*, i8** %125, i64 7, !dbg !18951, !ctir !693
  %126 = load i8*, i8** %arrayidx85, align 8, !dbg !18951
  %127 = load i8**, i8*** %authors.addr, align 8, !dbg !18952
  %arrayidx86 = getelementptr inbounds i8*, i8** %127, i64 8, !dbg !18952, !ctir !693
  %128 = load i8*, i8** %arrayidx86, align 8, !dbg !18952
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* %call77, i8* %112, i8* %114, i8* %116, i8* %118, i8* %120, i8* %122, i8* %124, i8* %126, i8* %128), !dbg !18953
  br label %sw.epilog, !dbg !18954

sw.epilog:                                        ; preds = %sw.default, %sw.bb65, %sw.bb54, %sw.bb44, %sw.bb35, %sw.bb27, %sw.bb20, %sw.bb14, %sw.bb9, %sw.bb6, %sw.bb
  ret void, !dbg !18955
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_ar(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors) #0 !dbg !18956 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors = alloca i64, align 8, !ctir !149
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !18959, metadata !DIExpression()), !dbg !18960
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !18961, metadata !DIExpression()), !dbg !18962
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !18963, metadata !DIExpression()), !dbg !18964
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !18965, metadata !DIExpression()), !dbg !18966
  store i8** %authors, i8*** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %authors.addr, metadata !18967, metadata !DIExpression()), !dbg !18968
  call void @llvm.dbg.declare(metadata i64* %n_authors, metadata !18969, metadata !DIExpression()), !dbg !18970
  store i64 0, i64* %n_authors, align 8, !dbg !18971
  br label %for.cond, !dbg !18973

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8**, i8*** %authors.addr, align 8, !dbg !18974
  %1 = load i64, i64* %n_authors, align 8, !dbg !18976
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !18974, !ctir !693
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !18974
  %tobool = icmp ne i8* %2, null, !dbg !18977
  br i1 %tobool, label %for.body, label %for.end, !dbg !18977

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !18977

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %n_authors, align 8, !dbg !18978
  %inc = add i64 %3, 1, !dbg !18978
  store i64 %inc, i64* %n_authors, align 8, !dbg !18978
  br label %for.cond, !dbg !18979, !llvm.loop !18980

for.end:                                          ; preds = %for.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18982
  %5 = load i8*, i8** %command_name.addr, align 8, !dbg !18983
  %6 = load i8*, i8** %package.addr, align 8, !dbg !18984
  %7 = load i8*, i8** %version.addr, align 8, !dbg !18985
  %8 = load i8**, i8*** %authors.addr, align 8, !dbg !18986
  %9 = load i64, i64* %n_authors, align 8, !dbg !18987
  call void @version_etc_arn(%struct._IO_FILE* %4, i8* %5, i8* %6, i8* %7, i8** %8, i64 %9), !dbg !18988
  ret void, !dbg !18989
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_va(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, %struct.__va_list_tag* %authors) #0 !dbg !18990 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca %struct.__va_list_tag*, align 8
  %n_authors = alloca i64, align 8, !ctir !149
  %authtab = alloca [10 x i8*], align 16, !ctir !1644
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !18994, metadata !DIExpression()), !dbg !18995
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !18996, metadata !DIExpression()), !dbg !18997
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !18998, metadata !DIExpression()), !dbg !18999
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !19000, metadata !DIExpression()), !dbg !19001
  store %struct.__va_list_tag* %authors, %struct.__va_list_tag** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %authors.addr, metadata !19002, metadata !DIExpression()), !dbg !19003
  call void @llvm.dbg.declare(metadata i64* %n_authors, metadata !19004, metadata !DIExpression()), !dbg !19005
  call void @llvm.dbg.declare(metadata [10 x i8*]* %authtab, metadata !19006, metadata !DIExpression()), !dbg !19007
  store i64 0, i64* %n_authors, align 8, !dbg !19008
  br label %for.cond, !dbg !19010

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n_authors, align 8, !dbg !19011
  %cmp = icmp ult i64 %0, 10, !dbg !19013
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !19014

land.rhs:                                         ; preds = %for.cond
  %1 = load %struct.__va_list_tag*, %struct.__va_list_tag** %authors.addr, align 8, !dbg !19015
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 0, !dbg !19015
  %gp_offset = load i32, i32* %gp_offset_p, align 8, !dbg !19015
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !19015
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !19015

vaarg.in_reg:                                     ; preds = %land.rhs
  %2 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 3, !dbg !19015
  %reg_save_area = load i8*, i8** %2, align 8, !dbg !19015
  %3 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !19015
  %4 = bitcast i8* %3 to i8**, !dbg !19015
  %5 = add i32 %gp_offset, 8, !dbg !19015
  store i32 %5, i32* %gp_offset_p, align 8, !dbg !19015
  br label %vaarg.end, !dbg !19015

vaarg.in_mem:                                     ; preds = %land.rhs
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 2, !dbg !19015
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !19015
  %6 = bitcast i8* %overflow_arg_area to i8**, !dbg !19015
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !19015
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !19015
  br label %vaarg.end, !dbg !19015

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %4, %vaarg.in_reg ], [ %6, %vaarg.in_mem ], !dbg !19015
  %7 = load i8*, i8** %vaarg.addr, align 8, !dbg !19015
  %8 = load i64, i64* %n_authors, align 8, !dbg !19016
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 %8, !dbg !19017, !ctir !1644
  store i8* %7, i8** %arrayidx, align 8, !dbg !19018
  %cmp1 = icmp ne i8* %7, null, !dbg !19019
  br label %land.end

land.end:                                         ; preds = %vaarg.end, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp1, %vaarg.end ], !dbg !19020
  br i1 %9, label %for.body, label %for.end, !dbg !19021

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !19021

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %n_authors, align 8, !dbg !19022
  %inc = add i64 %10, 1, !dbg !19022
  store i64 %inc, i64* %n_authors, align 8, !dbg !19022
  br label %for.cond, !dbg !19023, !llvm.loop !19024

for.end:                                          ; preds = %land.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !19026
  %12 = load i8*, i8** %command_name.addr, align 8, !dbg !19027
  %13 = load i8*, i8** %package.addr, align 8, !dbg !19028
  %14 = load i8*, i8** %version.addr, align 8, !dbg !19029
  %arraydecay = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 0, !dbg !19030, !ctir !1644
  %15 = load i64, i64* %n_authors, align 8, !dbg !19031
  call void @version_etc_arn(%struct._IO_FILE* %11, i8* %12, i8* %13, i8* %14, i8** %arraydecay, i64 %15), !dbg !19032
  ret void, !dbg !19033
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, ...) #0 !dbg !19034 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors = alloca [1 x %struct.__va_list_tag], align 16, !ctir !1645
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !19037, metadata !DIExpression()), !dbg !19038
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !19039, metadata !DIExpression()), !dbg !19040
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !19041, metadata !DIExpression()), !dbg !19042
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !19043, metadata !DIExpression()), !dbg !19044
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %authors, metadata !19045, metadata !DIExpression()), !dbg !19046
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !19047, !ctir !1645
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !19047
  call void @llvm.va_start(i8* %arraydecay1), !dbg !19047
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !19048
  %1 = load i8*, i8** %command_name.addr, align 8, !dbg !19049
  %2 = load i8*, i8** %package.addr, align 8, !dbg !19050
  %3 = load i8*, i8** %version.addr, align 8, !dbg !19051
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !19052, !ctir !1645
  call void @version_etc_va(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, %struct.__va_list_tag* %arraydecay2), !dbg !19053
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !19054, !ctir !1645
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !19054
  call void @llvm.va_end(i8* %arraydecay34), !dbg !19054
  ret void, !dbg !19055
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #13

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #13

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @emit_bug_reporting_address() #0 !dbg !19056 {
entry:
  %call = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14.451, i64 0, i64 0)) #13, !dbg !19057
  %call1 = call i32 (i8*, ...) @printf(i8* %call, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15.452, i64 0, i64 0)), !dbg !19058
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.453, i64 0, i64 0)) #13, !dbg !19059
  %call3 = call i32 (i8*, ...) @printf(i8* %call2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.454, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.18.455, i64 0, i64 0)), !dbg !19060
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.19.456, i64 0, i64 0)) #13, !dbg !19061
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !19061
  %call5 = call i32 @fputs_unlocked(i8* %call4, %struct._IO_FILE* %0), !dbg !19061
  ret void, !dbg !19062
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xnmalloc(i64 %n, i64 %s) #0 !dbg !19063 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19067, metadata !DIExpression()), !dbg !19068
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19069, metadata !DIExpression()), !dbg !19070
  %0 = load i64, i64* %s.addr, align 8, !dbg !19071
  %div = udiv i64 9223372036854775807, %0, !dbg !19071
  %1 = load i64, i64* %n.addr, align 8, !dbg !19071
  %cmp = icmp ult i64 %div, %1, !dbg !19071
  br i1 %cmp, label %if.then, label %if.end, !dbg !19073

if.then:                                          ; preds = %entry
  call void @xalloc_die() #14, !dbg !19074
  unreachable, !dbg !19074

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !19075
  %3 = load i64, i64* %s.addr, align 8, !dbg !19076
  %mul = mul i64 %2, %3, !dbg !19077
  %call = call noalias i8* @xmalloc(i64 %mul), !dbg !19078
  ret i8* %call, !dbg !19079
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xmalloc(i64 %n) #0 !dbg !19080 {
entry:
  %n.addr = alloca i64, align 8
  %p = alloca i8*, align 8, !ctir !167
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19082, metadata !DIExpression()), !dbg !19083
  call void @llvm.dbg.declare(metadata i8** %p, metadata !19084, metadata !DIExpression()), !dbg !19085
  %0 = load i64, i64* %n.addr, align 8, !dbg !19086
  %call = call noalias i8* @malloc(i64 %0) #13, !dbg !19087
  store i8* %call, i8** %p, align 8, !dbg !19085
  %1 = load i8*, i8** %p, align 8, !dbg !19088
  %tobool = icmp ne i8* %1, null, !dbg !19088
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !19090

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !19091
  %cmp = icmp ne i64 %2, 0, !dbg !19092
  br i1 %cmp, label %if.then, label %if.end, !dbg !19093

if.then:                                          ; preds = %land.lhs.true
  call void @xalloc_die() #14, !dbg !19094
  unreachable, !dbg !19094

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8*, i8** %p, align 8, !dbg !19095
  ret i8* %3, !dbg !19096
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xnrealloc(i8* %p, i64 %n, i64 %s) #0 !dbg !19097 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19100, metadata !DIExpression()), !dbg !19101
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19102, metadata !DIExpression()), !dbg !19103
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19104, metadata !DIExpression()), !dbg !19105
  %0 = load i64, i64* %s.addr, align 8, !dbg !19106
  %div = udiv i64 9223372036854775807, %0, !dbg !19106
  %1 = load i64, i64* %n.addr, align 8, !dbg !19106
  %cmp = icmp ult i64 %div, %1, !dbg !19106
  br i1 %cmp, label %if.then, label %if.end, !dbg !19108

if.then:                                          ; preds = %entry
  call void @xalloc_die() #14, !dbg !19109
  unreachable, !dbg !19109

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %p.addr, align 8, !dbg !19110
  %3 = load i64, i64* %n.addr, align 8, !dbg !19111
  %4 = load i64, i64* %s.addr, align 8, !dbg !19112
  %mul = mul i64 %3, %4, !dbg !19113
  %call = call i8* @xrealloc(i8* %2, i64 %mul), !dbg !19114
  ret i8* %call, !dbg !19115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xrealloc(i8* %p, i64 %n) #0 !dbg !19116 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19117, metadata !DIExpression()), !dbg !19118
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19119, metadata !DIExpression()), !dbg !19120
  %0 = load i64, i64* %n.addr, align 8, !dbg !19121
  %tobool = icmp ne i64 %0, 0, !dbg !19121
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !19123

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !dbg !19124
  %tobool1 = icmp ne i8* %1, null, !dbg !19124
  br i1 %tobool1, label %if.then, label %if.end, !dbg !19125

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** %p.addr, align 8, !dbg !19126
  call void @free(i8* %2) #13, !dbg !19128
  store i8* null, i8** %retval, align 8, !dbg !19129
  br label %return, !dbg !19129

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8*, i8** %p.addr, align 8, !dbg !19130
  %4 = load i64, i64* %n.addr, align 8, !dbg !19131
  %call = call i8* @realloc(i8* %3, i64 %4) #13, !dbg !19132
  store i8* %call, i8** %p.addr, align 8, !dbg !19133
  %5 = load i8*, i8** %p.addr, align 8, !dbg !19134
  %tobool2 = icmp ne i8* %5, null, !dbg !19134
  br i1 %tobool2, label %if.end6, label %land.lhs.true3, !dbg !19136

land.lhs.true3:                                   ; preds = %if.end
  %6 = load i64, i64* %n.addr, align 8, !dbg !19137
  %tobool4 = icmp ne i64 %6, 0, !dbg !19137
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !19138

if.then5:                                         ; preds = %land.lhs.true3
  call void @xalloc_die() #14, !dbg !19139
  unreachable, !dbg !19139

if.end6:                                          ; preds = %land.lhs.true3, %if.end
  %7 = load i8*, i8** %p.addr, align 8, !dbg !19140
  store i8* %7, i8** %retval, align 8, !dbg !19141
  br label %return, !dbg !19141

return:                                           ; preds = %if.end6, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !19142
  ret i8* %8, !dbg !19142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @x2nrealloc(i8* %p, i64* %pn, i64 %s) #0 !dbg !19143 {
entry:
  %p.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  %s.addr = alloca i64, align 8
  %n = alloca i64, align 8, !ctir !149
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19146, metadata !DIExpression()), !dbg !19147
  store i64* %pn, i64** %pn.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pn.addr, metadata !19148, metadata !DIExpression()), !dbg !19149
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19150, metadata !DIExpression()), !dbg !19151
  call void @llvm.dbg.declare(metadata i64* %n, metadata !19152, metadata !DIExpression()), !dbg !19153
  %0 = load i64*, i64** %pn.addr, align 8, !dbg !19154
  %1 = load i64, i64* %0, align 8, !dbg !19155, !ctir !149
  store i64 %1, i64* %n, align 8, !dbg !19153
  %2 = load i8*, i8** %p.addr, align 8, !dbg !19156
  %tobool = icmp ne i8* %2, null, !dbg !19156
  br i1 %tobool, label %if.else, label %if.then, !dbg !19158

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %n, align 8, !dbg !19159
  %tobool1 = icmp ne i64 %3, 0, !dbg !19159
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !19162

if.then2:                                         ; preds = %if.then
  %4 = load i64, i64* %s.addr, align 8, !dbg !19163
  %div = udiv i64 128, %4, !dbg !19165
  store i64 %div, i64* %n, align 8, !dbg !19166
  %5 = load i64, i64* %n, align 8, !dbg !19167
  %tobool3 = icmp ne i64 %5, 0, !dbg !19168
  %lnot = xor i1 %tobool3, true, !dbg !19168
  %lnot.ext = zext i1 %lnot to i32, !dbg !19168
  %conv = sext i32 %lnot.ext to i64, !dbg !19168
  %6 = load i64, i64* %n, align 8, !dbg !19169
  %add = add i64 %6, %conv, !dbg !19169
  store i64 %add, i64* %n, align 8, !dbg !19169
  br label %if.end, !dbg !19170

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load i64, i64* %s.addr, align 8, !dbg !19171
  %div4 = udiv i64 9223372036854775807, %7, !dbg !19171
  %8 = load i64, i64* %n, align 8, !dbg !19171
  %cmp = icmp ult i64 %div4, %8, !dbg !19171
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !19173

if.then6:                                         ; preds = %if.end
  call void @xalloc_die() #14, !dbg !19174
  unreachable, !dbg !19174

if.end7:                                          ; preds = %if.end
  br label %if.end16, !dbg !19175

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %s.addr, align 8, !dbg !19176
  %div8 = udiv i64 6148914691236517204, %9, !dbg !19179
  %10 = load i64, i64* %n, align 8, !dbg !19180
  %cmp9 = icmp ule i64 %div8, %10, !dbg !19181
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !19182

if.then11:                                        ; preds = %if.else
  call void @xalloc_die() #14, !dbg !19183
  unreachable, !dbg !19183

if.end12:                                         ; preds = %if.else
  %11 = load i64, i64* %n, align 8, !dbg !19184
  %div13 = udiv i64 %11, 2, !dbg !19185
  %add14 = add i64 %div13, 1, !dbg !19186
  %12 = load i64, i64* %n, align 8, !dbg !19187
  %add15 = add i64 %12, %add14, !dbg !19187
  store i64 %add15, i64* %n, align 8, !dbg !19187
  br label %if.end16

if.end16:                                         ; preds = %if.end12, %if.end7
  %13 = load i64, i64* %n, align 8, !dbg !19188
  %14 = load i64*, i64** %pn.addr, align 8, !dbg !19189
  store i64 %13, i64* %14, align 8, !dbg !19190, !ctir !149
  %15 = load i8*, i8** %p.addr, align 8, !dbg !19191
  %16 = load i64, i64* %n, align 8, !dbg !19192
  %17 = load i64, i64* %s.addr, align 8, !dbg !19193
  %mul = mul i64 %16, %17, !dbg !19194
  %call = call i8* @xrealloc(i8* %15, i64 %mul), !dbg !19195
  ret i8* %call, !dbg !19196
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xcharalloc(i64 %n) #0 !dbg !19197 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19200, metadata !DIExpression()), !dbg !19201
  %0 = load i64, i64* %n.addr, align 8, !dbg !19202
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !19202
  ret i8* %call, !dbg !19203
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @x2realloc(i8* %p, i64* %pn) #0 !dbg !19204 {
entry:
  %p.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19207, metadata !DIExpression()), !dbg !19208
  store i64* %pn, i64** %pn.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pn.addr, metadata !19209, metadata !DIExpression()), !dbg !19210
  %0 = load i8*, i8** %p.addr, align 8, !dbg !19211
  %1 = load i64*, i64** %pn.addr, align 8, !dbg !19212
  %call = call i8* @x2nrealloc(i8* %0, i64* %1, i64 1), !dbg !19213
  ret i8* %call, !dbg !19214
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xzalloc(i64 %s) #0 !dbg !19215 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19216, metadata !DIExpression()), !dbg !19217
  %0 = load i64, i64* %s.addr, align 8, !dbg !19218
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !19219
  %1 = load i64, i64* %s.addr, align 8, !dbg !19220
  call void @llvm.memset.p0i8.i64(i8* align 1 %call, i8 0, i64 %1, i1 false), !dbg !19221
  ret i8* %call, !dbg !19222
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xcalloc(i64 %n, i64 %s) #0 !dbg !19223 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %p = alloca i8*, align 8, !ctir !167
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !19224, metadata !DIExpression()), !dbg !19225
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19226, metadata !DIExpression()), !dbg !19227
  call void @llvm.dbg.declare(metadata i8** %p, metadata !19228, metadata !DIExpression()), !dbg !19229
  %0 = load i64, i64* %s.addr, align 8, !dbg !19230
  %div = udiv i64 9223372036854775807, %0, !dbg !19230
  %1 = load i64, i64* %n.addr, align 8, !dbg !19230
  %cmp = icmp ult i64 %div, %1, !dbg !19230
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !19232

lor.lhs.false:                                    ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !19233
  %3 = load i64, i64* %s.addr, align 8, !dbg !19234
  %call = call noalias i8* @calloc(i64 %2, i64 %3) #13, !dbg !19235
  store i8* %call, i8** %p, align 8, !dbg !19236
  %tobool = icmp ne i8* %call, null, !dbg !19236
  br i1 %tobool, label %if.end, label %if.then, !dbg !19237

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @xalloc_die() #14, !dbg !19238
  unreachable, !dbg !19238

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %p, align 8, !dbg !19239
  ret i8* %4, !dbg !19240
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xmemdup(i8* %p, i64 %s) #0 !dbg !19241 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19244, metadata !DIExpression()), !dbg !19245
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !19246, metadata !DIExpression()), !dbg !19247
  %0 = load i64, i64* %s.addr, align 8, !dbg !19248
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !19249
  %1 = load i8*, i8** %p.addr, align 8, !dbg !19250
  %2 = load i64, i64* %s.addr, align 8, !dbg !19251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %1, i64 %2, i1 false), !dbg !19252
  ret i8* %call, !dbg !19253
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xstrdup(i8* %string) #0 !dbg !19254 {
entry:
  %string.addr = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !19255, metadata !DIExpression()), !dbg !19256
  %0 = load i8*, i8** %string.addr, align 8, !dbg !19257
  %1 = load i8*, i8** %string.addr, align 8, !dbg !19258
  %call = call i64 @strlen(i8* %1) #16, !dbg !19259
  %add = add i64 %call, 1, !dbg !19260
  %call1 = call i8* @xmemdup(i8* %0, i64 %add), !dbg !19261
  ret i8* %call1, !dbg !19262
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xalloc_die() #10 !dbg !19263 {
entry:
  %0 = load volatile i32, i32* @exit_failure, align 4, !dbg !19265
  %call = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.475, i64 0, i64 0)) #13, !dbg !19266
  call void (i32, i32, i8*, ...) @error(i32 %0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.476, i64 0, i64 0), i8* %call), !dbg !19267
  call void @abort() #15, !dbg !19268
  unreachable, !dbg !19268
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @xnumtoumax(i8* %n_str, i32 %base, i64 %min, i64 %max, i8* %suffixes, i8* %err, i32 %err_exit) #0 !dbg !19269 {
entry:
  %n_str.addr = alloca i8*, align 8
  %base.addr = alloca i32, align 4
  %min.addr = alloca i64, align 8
  %max.addr = alloca i64, align 8
  %suffixes.addr = alloca i8*, align 8
  %err.addr = alloca i8*, align 8
  %err_exit.addr = alloca i32, align 4
  %s_err = alloca i32, align 4, !ctir !1276
  %tnum = alloca i64, align 8, !ctir !168
  store i8* %n_str, i8** %n_str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %n_str.addr, metadata !19273, metadata !DIExpression()), !dbg !19274
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !19275, metadata !DIExpression()), !dbg !19276
  store i64 %min, i64* %min.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %min.addr, metadata !19277, metadata !DIExpression()), !dbg !19278
  store i64 %max, i64* %max.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %max.addr, metadata !19279, metadata !DIExpression()), !dbg !19280
  store i8* %suffixes, i8** %suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %suffixes.addr, metadata !19281, metadata !DIExpression()), !dbg !19282
  store i8* %err, i8** %err.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %err.addr, metadata !19283, metadata !DIExpression()), !dbg !19284
  store i32 %err_exit, i32* %err_exit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err_exit.addr, metadata !19285, metadata !DIExpression()), !dbg !19286
  call void @llvm.dbg.declare(metadata i32* %s_err, metadata !19287, metadata !DIExpression()), !dbg !19288
  call void @llvm.dbg.declare(metadata i64* %tnum, metadata !19289, metadata !DIExpression()), !dbg !19290
  %0 = load i8*, i8** %n_str.addr, align 8, !dbg !19291
  %1 = load i32, i32* %base.addr, align 4, !dbg !19292
  %2 = load i8*, i8** %suffixes.addr, align 8, !dbg !19293
  %call = call i32 @xstrtoumax(i8* %0, i8** null, i32 %1, i64* %tnum, i8* %2), !dbg !19294
  store i32 %call, i32* %s_err, align 4, !dbg !19295
  %3 = load i32, i32* %s_err, align 4, !dbg !19296
  %cmp = icmp eq i32 %3, 0, !dbg !19298
  br i1 %cmp, label %if.then, label %if.else9, !dbg !19299

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %tnum, align 8, !dbg !19300
  %5 = load i64, i64* %min.addr, align 8, !dbg !19303
  %cmp1 = icmp ult i64 %4, %5, !dbg !19304
  br i1 %cmp1, label %if.then3, label %lor.lhs.false, !dbg !19305

lor.lhs.false:                                    ; preds = %if.then
  %6 = load i64, i64* %max.addr, align 8, !dbg !19306
  %7 = load i64, i64* %tnum, align 8, !dbg !19307
  %cmp2 = icmp ult i64 %6, %7, !dbg !19308
  br i1 %cmp2, label %if.then3, label %if.end8, !dbg !19309

if.then3:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, i32* %s_err, align 4, !dbg !19310
  %8 = load i64, i64* %tnum, align 8, !dbg !19312
  %cmp4 = icmp ugt i64 %8, 1073741823, !dbg !19314
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !19315

if.then5:                                         ; preds = %if.then3
  %call6 = call i32* @__errno_location() #17, !dbg !19316
  store i32 75, i32* %call6, align 4, !dbg !19317, !ctir !27
  br label %if.end, !dbg !19316

if.else:                                          ; preds = %if.then3
  %call7 = call i32* @__errno_location() #17, !dbg !19318
  store i32 34, i32* %call7, align 4, !dbg !19319, !ctir !27
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end8, !dbg !19320

if.end8:                                          ; preds = %if.end, %lor.lhs.false
  br label %if.end19, !dbg !19321

if.else9:                                         ; preds = %entry
  %9 = load i32, i32* %s_err, align 4, !dbg !19322
  %cmp10 = icmp eq i32 %9, 1, !dbg !19324
  br i1 %cmp10, label %if.then11, label %if.else13, !dbg !19325

if.then11:                                        ; preds = %if.else9
  %call12 = call i32* @__errno_location() #17, !dbg !19326
  store i32 75, i32* %call12, align 4, !dbg !19327, !ctir !27
  br label %if.end18, !dbg !19326

if.else13:                                        ; preds = %if.else9
  %10 = load i32, i32* %s_err, align 4, !dbg !19328
  %cmp14 = icmp eq i32 %10, 3, !dbg !19330
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !19331

if.then15:                                        ; preds = %if.else13
  %call16 = call i32* @__errno_location() #17, !dbg !19332
  store i32 0, i32* %call16, align 4, !dbg !19333, !ctir !27
  br label %if.end17, !dbg !19332

if.end17:                                         ; preds = %if.then15, %if.else13
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then11
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end8
  %11 = load i32, i32* %s_err, align 4, !dbg !19334
  %cmp20 = icmp ne i32 %11, 0, !dbg !19336
  br i1 %cmp20, label %if.then21, label %if.end30, !dbg !19337

if.then21:                                        ; preds = %if.end19
  %12 = load i32, i32* %err_exit.addr, align 4, !dbg !19338
  %tobool = icmp ne i32 %12, 0, !dbg !19338
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !19338

cond.true:                                        ; preds = %if.then21
  %13 = load i32, i32* %err_exit.addr, align 4, !dbg !19340
  br label %cond.end, !dbg !19338

cond.false:                                       ; preds = %if.then21
  br label %cond.end, !dbg !19338

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ 1, %cond.false ], !dbg !19338
  %call22 = call i32* @__errno_location() #17, !dbg !19341
  %14 = load i32, i32* %call22, align 4, !dbg !19341, !ctir !27
  %cmp23 = icmp eq i32 %14, 22, !dbg !19342
  br i1 %cmp23, label %cond.true24, label %cond.false25, !dbg !19341

cond.true24:                                      ; preds = %cond.end
  br label %cond.end27, !dbg !19341

cond.false25:                                     ; preds = %cond.end
  %call26 = call i32* @__errno_location() #17, !dbg !19343
  %15 = load i32, i32* %call26, align 4, !dbg !19343, !ctir !27
  br label %cond.end27, !dbg !19341

cond.end27:                                       ; preds = %cond.false25, %cond.true24
  %cond28 = phi i32 [ 0, %cond.true24 ], [ %15, %cond.false25 ], !dbg !19341
  %16 = load i8*, i8** %err.addr, align 8, !dbg !19344
  %17 = load i8*, i8** %n_str.addr, align 8, !dbg !19345
  %call29 = call i8* @quote(i8* %17), !dbg !19346
  call void (i32, i32, i8*, ...) @error(i32 %cond, i32 %cond28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.479, i64 0, i64 0), i8* %16, i8* %call29), !dbg !19347
  br label %if.end30, !dbg !19348

if.end30:                                         ; preds = %cond.end27, %if.end19
  %18 = load i64, i64* %tnum, align 8, !dbg !19349
  ret i64 %18, !dbg !19350
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @xdectoumax(i8* %n_str, i64 %min, i64 %max, i8* %suffixes, i8* %err, i32 %err_exit) #0 !dbg !19351 {
entry:
  %n_str.addr = alloca i8*, align 8
  %min.addr = alloca i64, align 8
  %max.addr = alloca i64, align 8
  %suffixes.addr = alloca i8*, align 8
  %err.addr = alloca i8*, align 8
  %err_exit.addr = alloca i32, align 4
  store i8* %n_str, i8** %n_str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %n_str.addr, metadata !19354, metadata !DIExpression()), !dbg !19355
  store i64 %min, i64* %min.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %min.addr, metadata !19356, metadata !DIExpression()), !dbg !19357
  store i64 %max, i64* %max.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %max.addr, metadata !19358, metadata !DIExpression()), !dbg !19359
  store i8* %suffixes, i8** %suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %suffixes.addr, metadata !19360, metadata !DIExpression()), !dbg !19361
  store i8* %err, i8** %err.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %err.addr, metadata !19362, metadata !DIExpression()), !dbg !19363
  store i32 %err_exit, i32* %err_exit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err_exit.addr, metadata !19364, metadata !DIExpression()), !dbg !19365
  %0 = load i8*, i8** %n_str.addr, align 8, !dbg !19366
  %1 = load i64, i64* %min.addr, align 8, !dbg !19367
  %2 = load i64, i64* %max.addr, align 8, !dbg !19368
  %3 = load i8*, i8** %suffixes.addr, align 8, !dbg !19369
  %4 = load i8*, i8** %err.addr, align 8, !dbg !19370
  %5 = load i32, i32* %err_exit.addr, align 4, !dbg !19371
  %call = call i64 @xnumtoumax(i8* %0, i32 10, i64 %1, i64 %2, i8* %3, i8* %4, i32 %5), !dbg !19372
  ret i64 %call, !dbg !19373
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xgetcwd() #0 !dbg !19374 {
entry:
  %cwd = alloca i8*, align 8, !ctir !143
  call void @llvm.dbg.declare(metadata i8** %cwd, metadata !19377, metadata !DIExpression()), !dbg !19378
  %call = call i8* @getcwd(i8* null, i64 0) #13, !dbg !19379
  store i8* %call, i8** %cwd, align 8, !dbg !19378
  %0 = load i8*, i8** %cwd, align 8, !dbg !19380
  %tobool = icmp ne i8* %0, null, !dbg !19380
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !19382

land.lhs.true:                                    ; preds = %entry
  %call1 = call i32* @__errno_location() #17, !dbg !19383
  %1 = load i32, i32* %call1, align 4, !dbg !19383, !ctir !27
  %cmp = icmp eq i32 %1, 12, !dbg !19384
  br i1 %cmp, label %if.then, label %if.end, !dbg !19385

if.then:                                          ; preds = %land.lhs.true
  call void @xalloc_die() #14, !dbg !19386
  unreachable, !dbg !19386

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i8*, i8** %cwd, align 8, !dbg !19387
  ret i8* %2, !dbg !19388
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xgethostname() #0 !dbg !19389 {
entry:
  %retval = alloca i8*, align 8
  %hostname = alloca i8*, align 8, !ctir !143
  %size = alloca i64, align 8, !ctir !149
  %size_1 = alloca i64, align 8, !ctir !149
  %saved_errno = alloca i32, align 4, !ctir !27
  call void @llvm.dbg.declare(metadata i8** %hostname, metadata !19391, metadata !DIExpression()), !dbg !19392
  store i8* null, i8** %hostname, align 8, !dbg !19392
  call void @llvm.dbg.declare(metadata i64* %size, metadata !19393, metadata !DIExpression()), !dbg !19394
  store i64 34, i64* %size, align 8, !dbg !19394
  br label %while.body, !dbg !19395

while.body:                                       ; preds = %entry, %if.end21
  call void @llvm.dbg.declare(metadata i64* %size_1, metadata !19396, metadata !DIExpression()), !dbg !19398
  %0 = load i8*, i8** %hostname, align 8, !dbg !19399
  %call = call i8* @x2realloc(i8* %0, i64* %size), !dbg !19400
  store i8* %call, i8** %hostname, align 8, !dbg !19401
  %1 = load i64, i64* %size, align 8, !dbg !19402
  %sub = sub i64 %1, 1, !dbg !19403
  store i64 %sub, i64* %size_1, align 8, !dbg !19404
  %2 = load i8*, i8** %hostname, align 8, !dbg !19405
  %3 = load i64, i64* %size_1, align 8, !dbg !19406
  %sub1 = sub i64 %3, 1, !dbg !19407
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %sub1, !dbg !19405, !ctir !143
  store i8 0, i8* %arrayidx, align 1, !dbg !19408
  %call2 = call i32* @__errno_location() #17, !dbg !19409
  store i32 0, i32* %call2, align 4, !dbg !19410, !ctir !27
  %4 = load i8*, i8** %hostname, align 8, !dbg !19411
  %5 = load i64, i64* %size_1, align 8, !dbg !19413
  %call3 = call i32 @gethostname(i8* %4, i64 %5) #13, !dbg !19414
  %cmp = icmp eq i32 %call3, 0, !dbg !19415
  br i1 %cmp, label %if.then, label %if.else, !dbg !19416

if.then:                                          ; preds = %while.body
  %6 = load i8*, i8** %hostname, align 8, !dbg !19417
  %7 = load i64, i64* %size_1, align 8, !dbg !19420
  %sub4 = sub i64 %7, 1, !dbg !19421
  %arrayidx5 = getelementptr inbounds i8, i8* %6, i64 %sub4, !dbg !19417, !ctir !143
  %8 = load i8, i8* %arrayidx5, align 1, !dbg !19417
  %tobool = icmp ne i8 %8, 0, !dbg !19417
  br i1 %tobool, label %if.end, label %if.then6, !dbg !19422

if.then6:                                         ; preds = %if.then
  br label %while.end, !dbg !19423

if.end:                                           ; preds = %if.then
  br label %if.end21, !dbg !19424

if.else:                                          ; preds = %while.body
  %call7 = call i32* @__errno_location() #17, !dbg !19425
  %9 = load i32, i32* %call7, align 4, !dbg !19425, !ctir !27
  %cmp8 = icmp ne i32 %9, 0, !dbg !19427
  br i1 %cmp8, label %land.lhs.true, label %if.end20, !dbg !19428

land.lhs.true:                                    ; preds = %if.else
  %call9 = call i32* @__errno_location() #17, !dbg !19429
  %10 = load i32, i32* %call9, align 4, !dbg !19429, !ctir !27
  %cmp10 = icmp ne i32 %10, 36, !dbg !19430
  br i1 %cmp10, label %land.lhs.true11, label %if.end20, !dbg !19431

land.lhs.true11:                                  ; preds = %land.lhs.true
  %call12 = call i32* @__errno_location() #17, !dbg !19432
  %11 = load i32, i32* %call12, align 4, !dbg !19432, !ctir !27
  %cmp13 = icmp ne i32 %11, 22, !dbg !19433
  br i1 %cmp13, label %land.lhs.true14, label %if.end20, !dbg !19434

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %call15 = call i32* @__errno_location() #17, !dbg !19435
  %12 = load i32, i32* %call15, align 4, !dbg !19435, !ctir !27
  %cmp16 = icmp ne i32 %12, 12, !dbg !19436
  br i1 %cmp16, label %if.then17, label %if.end20, !dbg !19437

if.then17:                                        ; preds = %land.lhs.true14
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !19438, metadata !DIExpression()), !dbg !19440
  %call18 = call i32* @__errno_location() #17, !dbg !19441
  %13 = load i32, i32* %call18, align 4, !dbg !19441, !ctir !27
  store i32 %13, i32* %saved_errno, align 4, !dbg !19440
  %14 = load i8*, i8** %hostname, align 8, !dbg !19442
  call void @free(i8* %14) #13, !dbg !19443
  %15 = load i32, i32* %saved_errno, align 4, !dbg !19444
  %call19 = call i32* @__errno_location() #17, !dbg !19445
  store i32 %15, i32* %call19, align 4, !dbg !19446, !ctir !27
  store i8* null, i8** %retval, align 8, !dbg !19447
  br label %return, !dbg !19447

if.end20:                                         ; preds = %land.lhs.true14, %land.lhs.true11, %land.lhs.true, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end
  br label %while.body, !dbg !19395, !llvm.loop !19448

while.end:                                        ; preds = %if.then6
  %16 = load i8*, i8** %hostname, align 8, !dbg !19450
  store i8* %16, i8** %retval, align 8, !dbg !19451
  br label %return, !dbg !19451

return:                                           ; preds = %while.end, %if.then17
  %17 = load i8*, i8** %retval, align 8, !dbg !19452
  ret i8* %17, !dbg !19452
}

; Function Attrs: nounwind
declare dso_local i32 @gethostname(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoul(i8* %s, i8** %ptr, i32 %strtol_base, i64* %val, i8* %valid_suffixes) #0 !dbg !19453 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %ptr.addr = alloca i8**, align 8
  %strtol_base.addr = alloca i32, align 4
  %val.addr = alloca i64*, align 8
  %valid_suffixes.addr = alloca i8*, align 8
  %t_ptr = alloca i8*, align 8, !ctir !143
  %p = alloca i8**, align 8, !ctir !142
  %tmp = alloca i64, align 8, !ctir !151
  %err = alloca i32, align 4, !ctir !1276
  %q = alloca i8*, align 8, !ctir !146
  %ch = alloca i8, align 1, !ctir !737
  %base = alloca i32, align 4, !ctir !27
  %suffixes = alloca i32, align 4, !ctir !27
  %overflow = alloca i32, align 4, !ctir !1276
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !19458, metadata !DIExpression()), !dbg !19459
  store i8** %ptr, i8*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %ptr.addr, metadata !19460, metadata !DIExpression()), !dbg !19461
  store i32 %strtol_base, i32* %strtol_base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %strtol_base.addr, metadata !19462, metadata !DIExpression()), !dbg !19463
  store i64* %val, i64** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %val.addr, metadata !19464, metadata !DIExpression()), !dbg !19465
  store i8* %valid_suffixes, i8** %valid_suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %valid_suffixes.addr, metadata !19466, metadata !DIExpression()), !dbg !19467
  call void @llvm.dbg.declare(metadata i8** %t_ptr, metadata !19468, metadata !DIExpression()), !dbg !19469
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !19470, metadata !DIExpression()), !dbg !19471
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !19472, metadata !DIExpression()), !dbg !19473
  call void @llvm.dbg.declare(metadata i32* %err, metadata !19474, metadata !DIExpression()), !dbg !19475
  store i32 0, i32* %err, align 4, !dbg !19475
  %0 = load i32, i32* %strtol_base.addr, align 4, !dbg !19476
  %cmp = icmp sle i32 0, %0, !dbg !19476
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !19476

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %strtol_base.addr, align 4, !dbg !19476
  %cmp1 = icmp sle i32 %1, 36, !dbg !19476
  br i1 %cmp1, label %if.then, label %if.else, !dbg !19479

if.then:                                          ; preds = %land.lhs.true
  br label %if.end, !dbg !19479

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.486, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.487, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #15, !dbg !19476
  unreachable, !dbg !19476

if.end:                                           ; preds = %if.then
  %2 = load i8**, i8*** %ptr.addr, align 8, !dbg !19480
  %tobool = icmp ne i8** %2, null, !dbg !19480
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !19480

cond.true:                                        ; preds = %if.end
  %3 = load i8**, i8*** %ptr.addr, align 8, !dbg !19481
  br label %cond.end, !dbg !19480

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !19480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8** [ %3, %cond.true ], [ %t_ptr, %cond.false ], !dbg !19480
  store i8** %cond, i8*** %p, align 8, !dbg !19482
  %call = call i32* @__errno_location() #17, !dbg !19483
  store i32 0, i32* %call, align 4, !dbg !19484, !ctir !27
  call void @llvm.dbg.declare(metadata i8** %q, metadata !19485, metadata !DIExpression()), !dbg !19488
  %4 = load i8*, i8** %s.addr, align 8, !dbg !19489
  store i8* %4, i8** %q, align 8, !dbg !19488
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !19490, metadata !DIExpression()), !dbg !19491
  %5 = load i8*, i8** %q, align 8, !dbg !19492
  %6 = load i8, i8* %5, align 1, !dbg !19493, !ctir !147
  store i8 %6, i8* %ch, align 1, !dbg !19491
  br label %while.cond, !dbg !19494

while.cond:                                       ; preds = %while.body, %cond.end
  %call2 = call i16** @__ctype_b_loc() #17, !dbg !19495
  %7 = load i16*, i16** %call2, align 8, !dbg !19495, !ctir !708
  %8 = load i8, i8* %ch, align 1, !dbg !19495
  %conv = zext i8 %8 to i32, !dbg !19495
  %idxprom = sext i32 %conv to i64, !dbg !19495
  %arrayidx = getelementptr inbounds i16, i16* %7, i64 %idxprom, !dbg !19495, !ctir !708
  %9 = load i16, i16* %arrayidx, align 2, !dbg !19495
  %conv3 = zext i16 %9 to i32, !dbg !19495
  %and = and i32 %conv3, 8192, !dbg !19495
  %tobool4 = icmp ne i32 %and, 0, !dbg !19494
  br i1 %tobool4, label %while.body, label %while.end, !dbg !19494

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %q, align 8, !dbg !19496
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !19496, !ctir !147
  store i8* %incdec.ptr, i8** %q, align 8, !dbg !19496
  %11 = load i8, i8* %incdec.ptr, align 1, !dbg !19497, !ctir !147
  store i8 %11, i8* %ch, align 1, !dbg !19498
  br label %while.cond, !dbg !19494, !llvm.loop !19499

while.end:                                        ; preds = %while.cond
  %12 = load i8, i8* %ch, align 1, !dbg !19501
  %conv5 = zext i8 %12 to i32, !dbg !19501
  %cmp6 = icmp eq i32 %conv5, 45, !dbg !19503
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !19504

if.then8:                                         ; preds = %while.end
  store i32 4, i32* %retval, align 4, !dbg !19505
  br label %return, !dbg !19505

if.end9:                                          ; preds = %while.end
  %13 = load i8*, i8** %s.addr, align 8, !dbg !19506
  %14 = load i8**, i8*** %p, align 8, !dbg !19507
  %15 = load i32, i32* %strtol_base.addr, align 4, !dbg !19508
  %call10 = call i64 @strtoul(i8* %13, i8** %14, i32 %15) #13, !dbg !19509
  store i64 %call10, i64* %tmp, align 8, !dbg !19510
  %16 = load i8**, i8*** %p, align 8, !dbg !19511
  %17 = load i8*, i8** %16, align 8, !dbg !19513, !ctir !143
  %18 = load i8*, i8** %s.addr, align 8, !dbg !19514
  %cmp11 = icmp eq i8* %17, %18, !dbg !19515
  br i1 %cmp11, label %if.then13, label %if.else25, !dbg !19516

if.then13:                                        ; preds = %if.end9
  %19 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19517
  %tobool14 = icmp ne i8* %19, null, !dbg !19517
  br i1 %tobool14, label %land.lhs.true15, label %if.else23, !dbg !19520

land.lhs.true15:                                  ; preds = %if.then13
  %20 = load i8**, i8*** %p, align 8, !dbg !19521
  %21 = load i8*, i8** %20, align 8, !dbg !19522, !ctir !143
  %22 = load i8, i8* %21, align 1, !dbg !19523, !ctir !144
  %conv16 = sext i8 %22 to i32, !dbg !19523
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !19523
  br i1 %tobool17, label %land.lhs.true18, label %if.else23, !dbg !19524

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %23 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19525
  %24 = load i8**, i8*** %p, align 8, !dbg !19526
  %25 = load i8*, i8** %24, align 8, !dbg !19527, !ctir !143
  %26 = load i8, i8* %25, align 1, !dbg !19528, !ctir !144
  %conv19 = sext i8 %26 to i32, !dbg !19528
  %call20 = call i8* @strchr(i8* %23, i32 %conv19) #16, !dbg !19529
  %tobool21 = icmp ne i8* %call20, null, !dbg !19529
  br i1 %tobool21, label %if.then22, label %if.else23, !dbg !19530

if.then22:                                        ; preds = %land.lhs.true18
  store i64 1, i64* %tmp, align 8, !dbg !19531
  br label %if.end24, !dbg !19532

if.else23:                                        ; preds = %land.lhs.true18, %land.lhs.true15, %if.then13
  store i32 4, i32* %retval, align 4, !dbg !19533
  br label %return, !dbg !19533

if.end24:                                         ; preds = %if.then22
  br label %if.end36, !dbg !19534

if.else25:                                        ; preds = %if.end9
  %call26 = call i32* @__errno_location() #17, !dbg !19535
  %27 = load i32, i32* %call26, align 4, !dbg !19535, !ctir !27
  %cmp27 = icmp ne i32 %27, 0, !dbg !19537
  br i1 %cmp27, label %if.then29, label %if.end35, !dbg !19538

if.then29:                                        ; preds = %if.else25
  %call30 = call i32* @__errno_location() #17, !dbg !19539
  %28 = load i32, i32* %call30, align 4, !dbg !19539, !ctir !27
  %cmp31 = icmp ne i32 %28, 34, !dbg !19542
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !19543

if.then33:                                        ; preds = %if.then29
  store i32 4, i32* %retval, align 4, !dbg !19544
  br label %return, !dbg !19544

if.end34:                                         ; preds = %if.then29
  store i32 1, i32* %err, align 4, !dbg !19545
  br label %if.end35, !dbg !19546

if.end35:                                         ; preds = %if.end34, %if.else25
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end24
  %29 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19547
  %tobool37 = icmp ne i8* %29, null, !dbg !19547
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !19549

if.then38:                                        ; preds = %if.end36
  %30 = load i64, i64* %tmp, align 8, !dbg !19550
  %31 = load i64*, i64** %val.addr, align 8, !dbg !19552
  store i64 %30, i64* %31, align 8, !dbg !19553, !ctir !151
  %32 = load i32, i32* %err, align 4, !dbg !19554
  store i32 %32, i32* %retval, align 4, !dbg !19555
  br label %return, !dbg !19555

if.end39:                                         ; preds = %if.end36
  %33 = load i8**, i8*** %p, align 8, !dbg !19556
  %34 = load i8*, i8** %33, align 8, !dbg !19558, !ctir !143
  %35 = load i8, i8* %34, align 1, !dbg !19559, !ctir !144
  %conv40 = sext i8 %35 to i32, !dbg !19559
  %cmp41 = icmp ne i32 %conv40, 0, !dbg !19560
  br i1 %cmp41, label %if.then43, label %if.end98, !dbg !19561

if.then43:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata i32* %base, metadata !19562, metadata !DIExpression()), !dbg !19564
  store i32 1024, i32* %base, align 4, !dbg !19564
  call void @llvm.dbg.declare(metadata i32* %suffixes, metadata !19565, metadata !DIExpression()), !dbg !19566
  store i32 1, i32* %suffixes, align 4, !dbg !19566
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !19567, metadata !DIExpression()), !dbg !19568
  %36 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19569
  %37 = load i8**, i8*** %p, align 8, !dbg !19571
  %38 = load i8*, i8** %37, align 8, !dbg !19572, !ctir !143
  %39 = load i8, i8* %38, align 1, !dbg !19573, !ctir !144
  %conv44 = sext i8 %39 to i32, !dbg !19573
  %call45 = call i8* @strchr(i8* %36, i32 %conv44) #16, !dbg !19574
  %tobool46 = icmp ne i8* %call45, null, !dbg !19574
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !19575

if.then47:                                        ; preds = %if.then43
  %40 = load i64, i64* %tmp, align 8, !dbg !19576
  %41 = load i64*, i64** %val.addr, align 8, !dbg !19578
  store i64 %40, i64* %41, align 8, !dbg !19579, !ctir !151
  %42 = load i32, i32* %err, align 4, !dbg !19580
  %or = or i32 %42, 2, !dbg !19581
  store i32 %or, i32* %retval, align 4, !dbg !19582
  br label %return, !dbg !19582

if.end48:                                         ; preds = %if.then43
  %43 = load i8**, i8*** %p, align 8, !dbg !19583
  %44 = load i8*, i8** %43, align 8, !dbg !19584, !ctir !143
  %45 = load i8, i8* %44, align 1, !dbg !19585, !ctir !144
  %conv49 = sext i8 %45 to i32, !dbg !19585
  switch i32 %conv49, label %sw.epilog66 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19586

sw.bb:                                            ; preds = %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48
  %46 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19587
  %call50 = call i8* @strchr(i8* %46, i32 48) #16, !dbg !19590
  %tobool51 = icmp ne i8* %call50, null, !dbg !19590
  br i1 %tobool51, label %if.then52, label %if.end65, !dbg !19591

if.then52:                                        ; preds = %sw.bb
  %47 = load i8**, i8*** %p, align 8, !dbg !19592
  %arrayidx53 = getelementptr inbounds i8*, i8** %47, i64 0, !dbg !19592, !ctir !142
  %48 = load i8*, i8** %arrayidx53, align 8, !dbg !19592
  %arrayidx54 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !19592, !ctir !143
  %49 = load i8, i8* %arrayidx54, align 1, !dbg !19592
  %conv55 = sext i8 %49 to i32, !dbg !19592
  switch i32 %conv55, label %sw.epilog [
    i32 105, label %sw.bb56
    i32 66, label %sw.bb64
    i32 68, label %sw.bb64
  ], !dbg !19593

sw.bb56:                                          ; preds = %if.then52
  %50 = load i8**, i8*** %p, align 8, !dbg !19594
  %arrayidx57 = getelementptr inbounds i8*, i8** %50, i64 0, !dbg !19594, !ctir !142
  %51 = load i8*, i8** %arrayidx57, align 8, !dbg !19594
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i64 2, !dbg !19594, !ctir !143
  %52 = load i8, i8* %arrayidx58, align 1, !dbg !19594
  %conv59 = sext i8 %52 to i32, !dbg !19594
  %cmp60 = icmp eq i32 %conv59, 66, !dbg !19597
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !19598

if.then62:                                        ; preds = %sw.bb56
  %53 = load i32, i32* %suffixes, align 4, !dbg !19599
  %add = add nsw i32 %53, 2, !dbg !19599
  store i32 %add, i32* %suffixes, align 4, !dbg !19599
  br label %if.end63, !dbg !19600

if.end63:                                         ; preds = %if.then62, %sw.bb56
  br label %sw.epilog, !dbg !19601

sw.bb64:                                          ; preds = %if.then52, %if.then52
  store i32 1000, i32* %base, align 4, !dbg !19602
  %54 = load i32, i32* %suffixes, align 4, !dbg !19603
  %inc = add nsw i32 %54, 1, !dbg !19603
  store i32 %inc, i32* %suffixes, align 4, !dbg !19603
  br label %sw.epilog, !dbg !19604

sw.epilog:                                        ; preds = %if.then52, %sw.bb64, %if.end63
  br label %if.end65, !dbg !19605

if.end65:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog66, !dbg !19606

sw.epilog66:                                      ; preds = %if.end65, %if.end48
  %55 = load i8**, i8*** %p, align 8, !dbg !19607
  %56 = load i8*, i8** %55, align 8, !dbg !19608, !ctir !143
  %57 = load i8, i8* %56, align 1, !dbg !19609, !ctir !144
  %conv67 = sext i8 %57 to i32, !dbg !19609
  switch i32 %conv67, label %sw.default [
    i32 98, label %sw.bb68
    i32 66, label %sw.bb70
    i32 99, label %sw.bb72
    i32 69, label %sw.bb73
    i32 71, label %sw.bb75
    i32 103, label %sw.bb75
    i32 107, label %sw.bb77
    i32 75, label %sw.bb77
    i32 77, label %sw.bb79
    i32 109, label %sw.bb79
    i32 80, label %sw.bb81
    i32 84, label %sw.bb83
    i32 116, label %sw.bb83
    i32 119, label %sw.bb85
    i32 89, label %sw.bb87
    i32 90, label %sw.bb89
  ], !dbg !19610

sw.bb68:                                          ; preds = %sw.epilog66
  %call69 = call i32 @bkm_scale(i64* %tmp, i32 512), !dbg !19611
  store i32 %call69, i32* %overflow, align 4, !dbg !19613
  br label %sw.epilog92, !dbg !19614

sw.bb70:                                          ; preds = %sw.epilog66
  %call71 = call i32 @bkm_scale(i64* %tmp, i32 1024), !dbg !19615
  store i32 %call71, i32* %overflow, align 4, !dbg !19616
  br label %sw.epilog92, !dbg !19617

sw.bb72:                                          ; preds = %sw.epilog66
  store i32 0, i32* %overflow, align 4, !dbg !19618
  br label %sw.epilog92, !dbg !19619

sw.bb73:                                          ; preds = %sw.epilog66
  %58 = load i32, i32* %base, align 4, !dbg !19620
  %call74 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %58, i32 6), !dbg !19621
  store i32 %call74, i32* %overflow, align 4, !dbg !19622
  br label %sw.epilog92, !dbg !19623

sw.bb75:                                          ; preds = %sw.epilog66, %sw.epilog66
  %59 = load i32, i32* %base, align 4, !dbg !19624
  %call76 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %59, i32 3), !dbg !19625
  store i32 %call76, i32* %overflow, align 4, !dbg !19626
  br label %sw.epilog92, !dbg !19627

sw.bb77:                                          ; preds = %sw.epilog66, %sw.epilog66
  %60 = load i32, i32* %base, align 4, !dbg !19628
  %call78 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %60, i32 1), !dbg !19629
  store i32 %call78, i32* %overflow, align 4, !dbg !19630
  br label %sw.epilog92, !dbg !19631

sw.bb79:                                          ; preds = %sw.epilog66, %sw.epilog66
  %61 = load i32, i32* %base, align 4, !dbg !19632
  %call80 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %61, i32 2), !dbg !19633
  store i32 %call80, i32* %overflow, align 4, !dbg !19634
  br label %sw.epilog92, !dbg !19635

sw.bb81:                                          ; preds = %sw.epilog66
  %62 = load i32, i32* %base, align 4, !dbg !19636
  %call82 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %62, i32 5), !dbg !19637
  store i32 %call82, i32* %overflow, align 4, !dbg !19638
  br label %sw.epilog92, !dbg !19639

sw.bb83:                                          ; preds = %sw.epilog66, %sw.epilog66
  %63 = load i32, i32* %base, align 4, !dbg !19640
  %call84 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %63, i32 4), !dbg !19641
  store i32 %call84, i32* %overflow, align 4, !dbg !19642
  br label %sw.epilog92, !dbg !19643

sw.bb85:                                          ; preds = %sw.epilog66
  %call86 = call i32 @bkm_scale(i64* %tmp, i32 2), !dbg !19644
  store i32 %call86, i32* %overflow, align 4, !dbg !19645
  br label %sw.epilog92, !dbg !19646

sw.bb87:                                          ; preds = %sw.epilog66
  %64 = load i32, i32* %base, align 4, !dbg !19647
  %call88 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %64, i32 8), !dbg !19648
  store i32 %call88, i32* %overflow, align 4, !dbg !19649
  br label %sw.epilog92, !dbg !19650

sw.bb89:                                          ; preds = %sw.epilog66
  %65 = load i32, i32* %base, align 4, !dbg !19651
  %call90 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %65, i32 7), !dbg !19652
  store i32 %call90, i32* %overflow, align 4, !dbg !19653
  br label %sw.epilog92, !dbg !19654

sw.default:                                       ; preds = %sw.epilog66
  %66 = load i64, i64* %tmp, align 8, !dbg !19655
  %67 = load i64*, i64** %val.addr, align 8, !dbg !19656
  store i64 %66, i64* %67, align 8, !dbg !19657, !ctir !151
  %68 = load i32, i32* %err, align 4, !dbg !19658
  %or91 = or i32 %68, 2, !dbg !19659
  store i32 %or91, i32* %retval, align 4, !dbg !19660
  br label %return, !dbg !19660

sw.epilog92:                                      ; preds = %sw.bb89, %sw.bb87, %sw.bb85, %sw.bb83, %sw.bb81, %sw.bb79, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb72, %sw.bb70, %sw.bb68
  %69 = load i32, i32* %overflow, align 4, !dbg !19661
  %70 = load i32, i32* %err, align 4, !dbg !19662
  %or93 = or i32 %70, %69, !dbg !19662
  store i32 %or93, i32* %err, align 4, !dbg !19662
  %71 = load i32, i32* %suffixes, align 4, !dbg !19663
  %72 = load i8**, i8*** %p, align 8, !dbg !19664
  %73 = load i8*, i8** %72, align 8, !dbg !19665, !ctir !143
  %idx.ext = sext i32 %71 to i64, !dbg !19665
  %add.ptr = getelementptr inbounds i8, i8* %73, i64 %idx.ext, !dbg !19665, !ctir !144
  store i8* %add.ptr, i8** %72, align 8, !dbg !19665, !ctir !143
  %74 = load i8**, i8*** %p, align 8, !dbg !19666
  %75 = load i8*, i8** %74, align 8, !dbg !19668, !ctir !143
  %76 = load i8, i8* %75, align 1, !dbg !19669, !ctir !144
  %tobool94 = icmp ne i8 %76, 0, !dbg !19669
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !19670

if.then95:                                        ; preds = %sw.epilog92
  %77 = load i32, i32* %err, align 4, !dbg !19671
  %or96 = or i32 %77, 2, !dbg !19671
  store i32 %or96, i32* %err, align 4, !dbg !19671
  br label %if.end97, !dbg !19672

if.end97:                                         ; preds = %if.then95, %sw.epilog92
  br label %if.end98, !dbg !19673

if.end98:                                         ; preds = %if.end97, %if.end39
  %78 = load i64, i64* %tmp, align 8, !dbg !19674
  %79 = load i64*, i64** %val.addr, align 8, !dbg !19675
  store i64 %78, i64* %79, align 8, !dbg !19676, !ctir !151
  %80 = load i32, i32* %err, align 4, !dbg !19677
  store i32 %80, i32* %retval, align 4, !dbg !19678
  br label %return, !dbg !19678

return:                                           ; preds = %if.end98, %sw.default, %if.then47, %if.then38, %if.then33, %if.else23, %if.then8
  %81 = load i32, i32* %retval, align 4, !dbg !19679
  ret i32 %81, !dbg !19679
}

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64* %x, i32 %scale_factor) #0 !dbg !19680 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i64*, align 8
  %scale_factor.addr = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !19683, metadata !DIExpression()), !dbg !19684
  store i32 %scale_factor, i32* %scale_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %scale_factor.addr, metadata !19685, metadata !DIExpression()), !dbg !19686
  %0 = load i32, i32* %scale_factor.addr, align 4, !dbg !19687
  %conv = sext i32 %0 to i64, !dbg !19687
  %div = udiv i64 -1, %conv, !dbg !19689
  %1 = load i64*, i64** %x.addr, align 8, !dbg !19690
  %2 = load i64, i64* %1, align 8, !dbg !19691, !ctir !151
  %cmp = icmp ult i64 %div, %2, !dbg !19692
  br i1 %cmp, label %if.then, label %if.end, !dbg !19693

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %x.addr, align 8, !dbg !19694
  store i64 -1, i64* %3, align 8, !dbg !19696, !ctir !151
  store i32 1, i32* %retval, align 4, !dbg !19697
  br label %return, !dbg !19697

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %scale_factor.addr, align 4, !dbg !19698
  %conv2 = sext i32 %4 to i64, !dbg !19698
  %5 = load i64*, i64** %x.addr, align 8, !dbg !19699
  %6 = load i64, i64* %5, align 8, !dbg !19700, !ctir !151
  %mul = mul i64 %6, %conv2, !dbg !19700
  store i64 %mul, i64* %5, align 8, !dbg !19700, !ctir !151
  store i32 0, i32* %retval, align 4, !dbg !19701
  br label %return, !dbg !19701

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !19702
  ret i32 %7, !dbg !19702
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64* %x, i32 %base, i32 %power) #0 !dbg !19703 {
entry:
  %x.addr = alloca i64*, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4, !ctir !1276
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !19706, metadata !DIExpression()), !dbg !19707
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !19708, metadata !DIExpression()), !dbg !19709
  store i32 %power, i32* %power.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %power.addr, metadata !19710, metadata !DIExpression()), !dbg !19711
  call void @llvm.dbg.declare(metadata i32* %err, metadata !19712, metadata !DIExpression()), !dbg !19713
  store i32 0, i32* %err, align 4, !dbg !19713
  br label %while.cond, !dbg !19714

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %power.addr, align 4, !dbg !19715
  %dec = add nsw i32 %0, -1, !dbg !19715
  store i32 %dec, i32* %power.addr, align 4, !dbg !19715
  %tobool = icmp ne i32 %0, 0, !dbg !19714
  br i1 %tobool, label %while.body, label %while.end, !dbg !19714

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %x.addr, align 8, !dbg !19716
  %2 = load i32, i32* %base.addr, align 4, !dbg !19717
  %call = call i32 @bkm_scale(i64* %1, i32 %2), !dbg !19718
  %3 = load i32, i32* %err, align 4, !dbg !19719
  %or = or i32 %3, %call, !dbg !19719
  store i32 %or, i32* %err, align 4, !dbg !19719
  br label %while.cond, !dbg !19714, !llvm.loop !19720

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %err, align 4, !dbg !19722
  ret i32 %4, !dbg !19723
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xstrtol_fatal(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg) #10 !dbg !19724 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !19728, metadata !DIExpression()), !dbg !19729
  store i32 %opt_idx, i32* %opt_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_idx.addr, metadata !19730, metadata !DIExpression()), !dbg !19731
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !19732, metadata !DIExpression()), !dbg !19733
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !19734, metadata !DIExpression()), !dbg !19735
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !19736, metadata !DIExpression()), !dbg !19737
  %0 = load i32, i32* %err.addr, align 4, !dbg !19738
  %1 = load i32, i32* %opt_idx.addr, align 4, !dbg !19739
  %2 = load i8, i8* %c.addr, align 1, !dbg !19740
  %3 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !19741
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !19742
  %5 = load volatile i32, i32* @exit_failure, align 4, !dbg !19743
  call void @xstrtol_error(i32 %0, i32 %1, i8 signext %2, %struct.option* %3, i8* %4, i32 %5), !dbg !19744
  call void @abort() #15, !dbg !19745
  unreachable, !dbg !19745
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @xstrtol_error(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg, i32 %exit_status) #0 !dbg !19746 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  %exit_status.addr = alloca i32, align 4
  %hyphens = alloca i8*, align 8, !ctir !146
  %msgid = alloca i8*, align 8, !ctir !146
  %option = alloca i8*, align 8, !ctir !146
  %option_buffer = alloca [2 x i8], align 1, !ctir !261
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !19749, metadata !DIExpression()), !dbg !19750
  store i32 %opt_idx, i32* %opt_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_idx.addr, metadata !19751, metadata !DIExpression()), !dbg !19752
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !19753, metadata !DIExpression()), !dbg !19754
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !19755, metadata !DIExpression()), !dbg !19756
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !19757, metadata !DIExpression()), !dbg !19758
  store i32 %exit_status, i32* %exit_status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exit_status.addr, metadata !19759, metadata !DIExpression()), !dbg !19760
  call void @llvm.dbg.declare(metadata i8** %hyphens, metadata !19761, metadata !DIExpression()), !dbg !19762
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.490, i64 0, i64 0), i8** %hyphens, align 8, !dbg !19762
  call void @llvm.dbg.declare(metadata i8** %msgid, metadata !19763, metadata !DIExpression()), !dbg !19764
  call void @llvm.dbg.declare(metadata i8** %option, metadata !19765, metadata !DIExpression()), !dbg !19766
  call void @llvm.dbg.declare(metadata [2 x i8]* %option_buffer, metadata !19767, metadata !DIExpression()), !dbg !19768
  %0 = load i32, i32* %err.addr, align 4, !dbg !19769
  switch i32 %0, label %sw.default [
    i32 4, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !19770

sw.default:                                       ; preds = %entry
  call void @abort() #15, !dbg !19771
  unreachable, !dbg !19771

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.491, i64 0, i64 0), i8** %msgid, align 8, !dbg !19773
  br label %sw.epilog, !dbg !19774

sw.bb1:                                           ; preds = %entry, %entry
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.492, i64 0, i64 0), i8** %msgid, align 8, !dbg !19775
  br label %sw.epilog, !dbg !19776

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.493, i64 0, i64 0), i8** %msgid, align 8, !dbg !19777
  br label %sw.epilog, !dbg !19778

sw.epilog:                                        ; preds = %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %opt_idx.addr, align 4, !dbg !19779
  %cmp = icmp slt i32 %1, 0, !dbg !19781
  br i1 %cmp, label %if.then, label %if.else, !dbg !19782

if.then:                                          ; preds = %sw.epilog
  %2 = load i32, i32* %opt_idx.addr, align 4, !dbg !19783
  %3 = load i8*, i8** %hyphens, align 8, !dbg !19785
  %idx.ext = sext i32 %2 to i64, !dbg !19785
  %idx.neg = sub i64 0, %idx.ext, !dbg !19785
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.neg, !dbg !19785, !ctir !147
  store i8* %add.ptr, i8** %hyphens, align 8, !dbg !19785
  %4 = load i8, i8* %c.addr, align 1, !dbg !19786
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0, !dbg !19787, !ctir !261
  store i8 %4, i8* %arrayidx, align 1, !dbg !19788
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 1, !dbg !19789, !ctir !261
  store i8 0, i8* %arrayidx3, align 1, !dbg !19790
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0, !dbg !19791, !ctir !261
  store i8* %arraydecay, i8** %option, align 8, !dbg !19792
  br label %if.end, !dbg !19793

if.else:                                          ; preds = %sw.epilog
  %5 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !19794
  %6 = load i32, i32* %opt_idx.addr, align 4, !dbg !19795
  %idxprom = sext i32 %6 to i64, !dbg !19794
  %arrayidx4 = getelementptr inbounds %struct.option, %struct.option* %5, i64 %idxprom, !dbg !19794, !ctir !1718
  %name = getelementptr inbounds %struct.option, %struct.option* %arrayidx4, i32 0, i32 0, !dbg !19796, !ctir !1719
  %7 = load i8*, i8** %name, align 8, !dbg !19796, !ctir !146
  store i8* %7, i8** %option, align 8, !dbg !19797
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %exit_status.addr, align 4, !dbg !19798
  %9 = load i8*, i8** %msgid, align 8, !dbg !19799
  %call = call i8* @gettext(i8* %9) #13, !dbg !19800
  %10 = load i8*, i8** %hyphens, align 8, !dbg !19801
  %11 = load i8*, i8** %option, align 8, !dbg !19802
  %12 = load i8*, i8** %arg.addr, align 8, !dbg !19803
  call void (i32, i32, i8*, ...) @error(i32 %8, i32 0, i8* %call, i8* %10, i8* %11, i8* %12), !dbg !19804
  ret void, !dbg !19805
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoumax(i8* %s, i8** %ptr, i32 %strtol_base, i64* %val, i8* %valid_suffixes) #0 !dbg !19806 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %ptr.addr = alloca i8**, align 8
  %strtol_base.addr = alloca i32, align 4
  %val.addr = alloca i64*, align 8
  %valid_suffixes.addr = alloca i8*, align 8
  %t_ptr = alloca i8*, align 8, !ctir !143
  %p = alloca i8**, align 8, !ctir !142
  %tmp = alloca i64, align 8, !ctir !168
  %err = alloca i32, align 4, !ctir !1276
  %q = alloca i8*, align 8, !ctir !146
  %ch = alloca i8, align 1, !ctir !737
  %base = alloca i32, align 4, !ctir !27
  %suffixes = alloca i32, align 4, !ctir !27
  %overflow = alloca i32, align 4, !ctir !1276
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !19809, metadata !DIExpression()), !dbg !19810
  store i8** %ptr, i8*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %ptr.addr, metadata !19811, metadata !DIExpression()), !dbg !19812
  store i32 %strtol_base, i32* %strtol_base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %strtol_base.addr, metadata !19813, metadata !DIExpression()), !dbg !19814
  store i64* %val, i64** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %val.addr, metadata !19815, metadata !DIExpression()), !dbg !19816
  store i8* %valid_suffixes, i8** %valid_suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %valid_suffixes.addr, metadata !19817, metadata !DIExpression()), !dbg !19818
  call void @llvm.dbg.declare(metadata i8** %t_ptr, metadata !19819, metadata !DIExpression()), !dbg !19820
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !19821, metadata !DIExpression()), !dbg !19822
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !19823, metadata !DIExpression()), !dbg !19824
  call void @llvm.dbg.declare(metadata i32* %err, metadata !19825, metadata !DIExpression()), !dbg !19826
  store i32 0, i32* %err, align 4, !dbg !19826
  %0 = load i32, i32* %strtol_base.addr, align 4, !dbg !19827
  %cmp = icmp sle i32 0, %0, !dbg !19827
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !19827

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %strtol_base.addr, align 4, !dbg !19827
  %cmp1 = icmp sle i32 %1, 36, !dbg !19827
  br i1 %cmp1, label %if.then, label %if.else, !dbg !19830

if.then:                                          ; preds = %land.lhs.true
  br label %if.end, !dbg !19830

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.496, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.497, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.xstrtoumax, i64 0, i64 0)) #15, !dbg !19827
  unreachable, !dbg !19827

if.end:                                           ; preds = %if.then
  %2 = load i8**, i8*** %ptr.addr, align 8, !dbg !19831
  %tobool = icmp ne i8** %2, null, !dbg !19831
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !19831

cond.true:                                        ; preds = %if.end
  %3 = load i8**, i8*** %ptr.addr, align 8, !dbg !19832
  br label %cond.end, !dbg !19831

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !19831

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8** [ %3, %cond.true ], [ %t_ptr, %cond.false ], !dbg !19831
  store i8** %cond, i8*** %p, align 8, !dbg !19833
  %call = call i32* @__errno_location() #17, !dbg !19834
  store i32 0, i32* %call, align 4, !dbg !19835, !ctir !27
  call void @llvm.dbg.declare(metadata i8** %q, metadata !19836, metadata !DIExpression()), !dbg !19839
  %4 = load i8*, i8** %s.addr, align 8, !dbg !19840
  store i8* %4, i8** %q, align 8, !dbg !19839
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !19841, metadata !DIExpression()), !dbg !19842
  %5 = load i8*, i8** %q, align 8, !dbg !19843
  %6 = load i8, i8* %5, align 1, !dbg !19844, !ctir !147
  store i8 %6, i8* %ch, align 1, !dbg !19842
  br label %while.cond, !dbg !19845

while.cond:                                       ; preds = %while.body, %cond.end
  %call2 = call i16** @__ctype_b_loc() #17, !dbg !19846
  %7 = load i16*, i16** %call2, align 8, !dbg !19846, !ctir !708
  %8 = load i8, i8* %ch, align 1, !dbg !19846
  %conv = zext i8 %8 to i32, !dbg !19846
  %idxprom = sext i32 %conv to i64, !dbg !19846
  %arrayidx = getelementptr inbounds i16, i16* %7, i64 %idxprom, !dbg !19846, !ctir !708
  %9 = load i16, i16* %arrayidx, align 2, !dbg !19846
  %conv3 = zext i16 %9 to i32, !dbg !19846
  %and = and i32 %conv3, 8192, !dbg !19846
  %tobool4 = icmp ne i32 %and, 0, !dbg !19845
  br i1 %tobool4, label %while.body, label %while.end, !dbg !19845

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %q, align 8, !dbg !19847
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !19847, !ctir !147
  store i8* %incdec.ptr, i8** %q, align 8, !dbg !19847
  %11 = load i8, i8* %incdec.ptr, align 1, !dbg !19848, !ctir !147
  store i8 %11, i8* %ch, align 1, !dbg !19849
  br label %while.cond, !dbg !19845, !llvm.loop !19850

while.end:                                        ; preds = %while.cond
  %12 = load i8, i8* %ch, align 1, !dbg !19852
  %conv5 = zext i8 %12 to i32, !dbg !19852
  %cmp6 = icmp eq i32 %conv5, 45, !dbg !19854
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !19855

if.then8:                                         ; preds = %while.end
  store i32 4, i32* %retval, align 4, !dbg !19856
  br label %return, !dbg !19856

if.end9:                                          ; preds = %while.end
  %13 = load i8*, i8** %s.addr, align 8, !dbg !19857
  %14 = load i8**, i8*** %p, align 8, !dbg !19858
  %15 = load i32, i32* %strtol_base.addr, align 4, !dbg !19859
  %call10 = call i64 @strtoumax(i8* %13, i8** %14, i32 %15) #13, !dbg !19860
  store i64 %call10, i64* %tmp, align 8, !dbg !19861
  %16 = load i8**, i8*** %p, align 8, !dbg !19862
  %17 = load i8*, i8** %16, align 8, !dbg !19864, !ctir !143
  %18 = load i8*, i8** %s.addr, align 8, !dbg !19865
  %cmp11 = icmp eq i8* %17, %18, !dbg !19866
  br i1 %cmp11, label %if.then13, label %if.else25, !dbg !19867

if.then13:                                        ; preds = %if.end9
  %19 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19868
  %tobool14 = icmp ne i8* %19, null, !dbg !19868
  br i1 %tobool14, label %land.lhs.true15, label %if.else23, !dbg !19871

land.lhs.true15:                                  ; preds = %if.then13
  %20 = load i8**, i8*** %p, align 8, !dbg !19872
  %21 = load i8*, i8** %20, align 8, !dbg !19873, !ctir !143
  %22 = load i8, i8* %21, align 1, !dbg !19874, !ctir !144
  %conv16 = sext i8 %22 to i32, !dbg !19874
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !19874
  br i1 %tobool17, label %land.lhs.true18, label %if.else23, !dbg !19875

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %23 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19876
  %24 = load i8**, i8*** %p, align 8, !dbg !19877
  %25 = load i8*, i8** %24, align 8, !dbg !19878, !ctir !143
  %26 = load i8, i8* %25, align 1, !dbg !19879, !ctir !144
  %conv19 = sext i8 %26 to i32, !dbg !19879
  %call20 = call i8* @strchr(i8* %23, i32 %conv19) #16, !dbg !19880
  %tobool21 = icmp ne i8* %call20, null, !dbg !19880
  br i1 %tobool21, label %if.then22, label %if.else23, !dbg !19881

if.then22:                                        ; preds = %land.lhs.true18
  store i64 1, i64* %tmp, align 8, !dbg !19882
  br label %if.end24, !dbg !19883

if.else23:                                        ; preds = %land.lhs.true18, %land.lhs.true15, %if.then13
  store i32 4, i32* %retval, align 4, !dbg !19884
  br label %return, !dbg !19884

if.end24:                                         ; preds = %if.then22
  br label %if.end36, !dbg !19885

if.else25:                                        ; preds = %if.end9
  %call26 = call i32* @__errno_location() #17, !dbg !19886
  %27 = load i32, i32* %call26, align 4, !dbg !19886, !ctir !27
  %cmp27 = icmp ne i32 %27, 0, !dbg !19888
  br i1 %cmp27, label %if.then29, label %if.end35, !dbg !19889

if.then29:                                        ; preds = %if.else25
  %call30 = call i32* @__errno_location() #17, !dbg !19890
  %28 = load i32, i32* %call30, align 4, !dbg !19890, !ctir !27
  %cmp31 = icmp ne i32 %28, 34, !dbg !19893
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !19894

if.then33:                                        ; preds = %if.then29
  store i32 4, i32* %retval, align 4, !dbg !19895
  br label %return, !dbg !19895

if.end34:                                         ; preds = %if.then29
  store i32 1, i32* %err, align 4, !dbg !19896
  br label %if.end35, !dbg !19897

if.end35:                                         ; preds = %if.end34, %if.else25
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end24
  %29 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19898
  %tobool37 = icmp ne i8* %29, null, !dbg !19898
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !19900

if.then38:                                        ; preds = %if.end36
  %30 = load i64, i64* %tmp, align 8, !dbg !19901
  %31 = load i64*, i64** %val.addr, align 8, !dbg !19903
  store i64 %30, i64* %31, align 8, !dbg !19904, !ctir !168
  %32 = load i32, i32* %err, align 4, !dbg !19905
  store i32 %32, i32* %retval, align 4, !dbg !19906
  br label %return, !dbg !19906

if.end39:                                         ; preds = %if.end36
  %33 = load i8**, i8*** %p, align 8, !dbg !19907
  %34 = load i8*, i8** %33, align 8, !dbg !19909, !ctir !143
  %35 = load i8, i8* %34, align 1, !dbg !19910, !ctir !144
  %conv40 = sext i8 %35 to i32, !dbg !19910
  %cmp41 = icmp ne i32 %conv40, 0, !dbg !19911
  br i1 %cmp41, label %if.then43, label %if.end98, !dbg !19912

if.then43:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata i32* %base, metadata !19913, metadata !DIExpression()), !dbg !19915
  store i32 1024, i32* %base, align 4, !dbg !19915
  call void @llvm.dbg.declare(metadata i32* %suffixes, metadata !19916, metadata !DIExpression()), !dbg !19917
  store i32 1, i32* %suffixes, align 4, !dbg !19917
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !19918, metadata !DIExpression()), !dbg !19919
  %36 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19920
  %37 = load i8**, i8*** %p, align 8, !dbg !19922
  %38 = load i8*, i8** %37, align 8, !dbg !19923, !ctir !143
  %39 = load i8, i8* %38, align 1, !dbg !19924, !ctir !144
  %conv44 = sext i8 %39 to i32, !dbg !19924
  %call45 = call i8* @strchr(i8* %36, i32 %conv44) #16, !dbg !19925
  %tobool46 = icmp ne i8* %call45, null, !dbg !19925
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !19926

if.then47:                                        ; preds = %if.then43
  %40 = load i64, i64* %tmp, align 8, !dbg !19927
  %41 = load i64*, i64** %val.addr, align 8, !dbg !19929
  store i64 %40, i64* %41, align 8, !dbg !19930, !ctir !168
  %42 = load i32, i32* %err, align 4, !dbg !19931
  %or = or i32 %42, 2, !dbg !19932
  store i32 %or, i32* %retval, align 4, !dbg !19933
  br label %return, !dbg !19933

if.end48:                                         ; preds = %if.then43
  %43 = load i8**, i8*** %p, align 8, !dbg !19934
  %44 = load i8*, i8** %43, align 8, !dbg !19935, !ctir !143
  %45 = load i8, i8* %44, align 1, !dbg !19936, !ctir !144
  %conv49 = sext i8 %45 to i32, !dbg !19936
  switch i32 %conv49, label %sw.epilog66 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19937

sw.bb:                                            ; preds = %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48
  %46 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !19938
  %call50 = call i8* @strchr(i8* %46, i32 48) #16, !dbg !19941
  %tobool51 = icmp ne i8* %call50, null, !dbg !19941
  br i1 %tobool51, label %if.then52, label %if.end65, !dbg !19942

if.then52:                                        ; preds = %sw.bb
  %47 = load i8**, i8*** %p, align 8, !dbg !19943
  %arrayidx53 = getelementptr inbounds i8*, i8** %47, i64 0, !dbg !19943, !ctir !142
  %48 = load i8*, i8** %arrayidx53, align 8, !dbg !19943
  %arrayidx54 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !19943, !ctir !143
  %49 = load i8, i8* %arrayidx54, align 1, !dbg !19943
  %conv55 = sext i8 %49 to i32, !dbg !19943
  switch i32 %conv55, label %sw.epilog [
    i32 105, label %sw.bb56
    i32 66, label %sw.bb64
    i32 68, label %sw.bb64
  ], !dbg !19944

sw.bb56:                                          ; preds = %if.then52
  %50 = load i8**, i8*** %p, align 8, !dbg !19945
  %arrayidx57 = getelementptr inbounds i8*, i8** %50, i64 0, !dbg !19945, !ctir !142
  %51 = load i8*, i8** %arrayidx57, align 8, !dbg !19945
  %arrayidx58 = getelementptr inbounds i8, i8* %51, i64 2, !dbg !19945, !ctir !143
  %52 = load i8, i8* %arrayidx58, align 1, !dbg !19945
  %conv59 = sext i8 %52 to i32, !dbg !19945
  %cmp60 = icmp eq i32 %conv59, 66, !dbg !19948
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !19949

if.then62:                                        ; preds = %sw.bb56
  %53 = load i32, i32* %suffixes, align 4, !dbg !19950
  %add = add nsw i32 %53, 2, !dbg !19950
  store i32 %add, i32* %suffixes, align 4, !dbg !19950
  br label %if.end63, !dbg !19951

if.end63:                                         ; preds = %if.then62, %sw.bb56
  br label %sw.epilog, !dbg !19952

sw.bb64:                                          ; preds = %if.then52, %if.then52
  store i32 1000, i32* %base, align 4, !dbg !19953
  %54 = load i32, i32* %suffixes, align 4, !dbg !19954
  %inc = add nsw i32 %54, 1, !dbg !19954
  store i32 %inc, i32* %suffixes, align 4, !dbg !19954
  br label %sw.epilog, !dbg !19955

sw.epilog:                                        ; preds = %if.then52, %sw.bb64, %if.end63
  br label %if.end65, !dbg !19956

if.end65:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog66, !dbg !19957

sw.epilog66:                                      ; preds = %if.end65, %if.end48
  %55 = load i8**, i8*** %p, align 8, !dbg !19958
  %56 = load i8*, i8** %55, align 8, !dbg !19959, !ctir !143
  %57 = load i8, i8* %56, align 1, !dbg !19960, !ctir !144
  %conv67 = sext i8 %57 to i32, !dbg !19960
  switch i32 %conv67, label %sw.default [
    i32 98, label %sw.bb68
    i32 66, label %sw.bb70
    i32 99, label %sw.bb72
    i32 69, label %sw.bb73
    i32 71, label %sw.bb75
    i32 103, label %sw.bb75
    i32 107, label %sw.bb77
    i32 75, label %sw.bb77
    i32 77, label %sw.bb79
    i32 109, label %sw.bb79
    i32 80, label %sw.bb81
    i32 84, label %sw.bb83
    i32 116, label %sw.bb83
    i32 119, label %sw.bb85
    i32 89, label %sw.bb87
    i32 90, label %sw.bb89
  ], !dbg !19961

sw.bb68:                                          ; preds = %sw.epilog66
  %call69 = call i32 @bkm_scale.498(i64* %tmp, i32 512), !dbg !19962
  store i32 %call69, i32* %overflow, align 4, !dbg !19964
  br label %sw.epilog92, !dbg !19965

sw.bb70:                                          ; preds = %sw.epilog66
  %call71 = call i32 @bkm_scale.498(i64* %tmp, i32 1024), !dbg !19966
  store i32 %call71, i32* %overflow, align 4, !dbg !19967
  br label %sw.epilog92, !dbg !19968

sw.bb72:                                          ; preds = %sw.epilog66
  store i32 0, i32* %overflow, align 4, !dbg !19969
  br label %sw.epilog92, !dbg !19970

sw.bb73:                                          ; preds = %sw.epilog66
  %58 = load i32, i32* %base, align 4, !dbg !19971
  %call74 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %58, i32 6), !dbg !19972
  store i32 %call74, i32* %overflow, align 4, !dbg !19973
  br label %sw.epilog92, !dbg !19974

sw.bb75:                                          ; preds = %sw.epilog66, %sw.epilog66
  %59 = load i32, i32* %base, align 4, !dbg !19975
  %call76 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %59, i32 3), !dbg !19976
  store i32 %call76, i32* %overflow, align 4, !dbg !19977
  br label %sw.epilog92, !dbg !19978

sw.bb77:                                          ; preds = %sw.epilog66, %sw.epilog66
  %60 = load i32, i32* %base, align 4, !dbg !19979
  %call78 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %60, i32 1), !dbg !19980
  store i32 %call78, i32* %overflow, align 4, !dbg !19981
  br label %sw.epilog92, !dbg !19982

sw.bb79:                                          ; preds = %sw.epilog66, %sw.epilog66
  %61 = load i32, i32* %base, align 4, !dbg !19983
  %call80 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %61, i32 2), !dbg !19984
  store i32 %call80, i32* %overflow, align 4, !dbg !19985
  br label %sw.epilog92, !dbg !19986

sw.bb81:                                          ; preds = %sw.epilog66
  %62 = load i32, i32* %base, align 4, !dbg !19987
  %call82 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %62, i32 5), !dbg !19988
  store i32 %call82, i32* %overflow, align 4, !dbg !19989
  br label %sw.epilog92, !dbg !19990

sw.bb83:                                          ; preds = %sw.epilog66, %sw.epilog66
  %63 = load i32, i32* %base, align 4, !dbg !19991
  %call84 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %63, i32 4), !dbg !19992
  store i32 %call84, i32* %overflow, align 4, !dbg !19993
  br label %sw.epilog92, !dbg !19994

sw.bb85:                                          ; preds = %sw.epilog66
  %call86 = call i32 @bkm_scale.498(i64* %tmp, i32 2), !dbg !19995
  store i32 %call86, i32* %overflow, align 4, !dbg !19996
  br label %sw.epilog92, !dbg !19997

sw.bb87:                                          ; preds = %sw.epilog66
  %64 = load i32, i32* %base, align 4, !dbg !19998
  %call88 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %64, i32 8), !dbg !19999
  store i32 %call88, i32* %overflow, align 4, !dbg !20000
  br label %sw.epilog92, !dbg !20001

sw.bb89:                                          ; preds = %sw.epilog66
  %65 = load i32, i32* %base, align 4, !dbg !20002
  %call90 = call i32 @bkm_scale_by_power.499(i64* %tmp, i32 %65, i32 7), !dbg !20003
  store i32 %call90, i32* %overflow, align 4, !dbg !20004
  br label %sw.epilog92, !dbg !20005

sw.default:                                       ; preds = %sw.epilog66
  %66 = load i64, i64* %tmp, align 8, !dbg !20006
  %67 = load i64*, i64** %val.addr, align 8, !dbg !20007
  store i64 %66, i64* %67, align 8, !dbg !20008, !ctir !168
  %68 = load i32, i32* %err, align 4, !dbg !20009
  %or91 = or i32 %68, 2, !dbg !20010
  store i32 %or91, i32* %retval, align 4, !dbg !20011
  br label %return, !dbg !20011

sw.epilog92:                                      ; preds = %sw.bb89, %sw.bb87, %sw.bb85, %sw.bb83, %sw.bb81, %sw.bb79, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb72, %sw.bb70, %sw.bb68
  %69 = load i32, i32* %overflow, align 4, !dbg !20012
  %70 = load i32, i32* %err, align 4, !dbg !20013
  %or93 = or i32 %70, %69, !dbg !20013
  store i32 %or93, i32* %err, align 4, !dbg !20013
  %71 = load i32, i32* %suffixes, align 4, !dbg !20014
  %72 = load i8**, i8*** %p, align 8, !dbg !20015
  %73 = load i8*, i8** %72, align 8, !dbg !20016, !ctir !143
  %idx.ext = sext i32 %71 to i64, !dbg !20016
  %add.ptr = getelementptr inbounds i8, i8* %73, i64 %idx.ext, !dbg !20016, !ctir !144
  store i8* %add.ptr, i8** %72, align 8, !dbg !20016, !ctir !143
  %74 = load i8**, i8*** %p, align 8, !dbg !20017
  %75 = load i8*, i8** %74, align 8, !dbg !20019, !ctir !143
  %76 = load i8, i8* %75, align 1, !dbg !20020, !ctir !144
  %tobool94 = icmp ne i8 %76, 0, !dbg !20020
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !20021

if.then95:                                        ; preds = %sw.epilog92
  %77 = load i32, i32* %err, align 4, !dbg !20022
  %or96 = or i32 %77, 2, !dbg !20022
  store i32 %or96, i32* %err, align 4, !dbg !20022
  br label %if.end97, !dbg !20023

if.end97:                                         ; preds = %if.then95, %sw.epilog92
  br label %if.end98, !dbg !20024

if.end98:                                         ; preds = %if.end97, %if.end39
  %78 = load i64, i64* %tmp, align 8, !dbg !20025
  %79 = load i64*, i64** %val.addr, align 8, !dbg !20026
  store i64 %78, i64* %79, align 8, !dbg !20027, !ctir !168
  %80 = load i32, i32* %err, align 4, !dbg !20028
  store i32 %80, i32* %retval, align 4, !dbg !20029
  br label %return, !dbg !20029

return:                                           ; preds = %if.end98, %sw.default, %if.then47, %if.then38, %if.then33, %if.else23, %if.then8
  %81 = load i32, i32* %retval, align 4, !dbg !20030
  ret i32 %81, !dbg !20030
}

; Function Attrs: nounwind
declare dso_local i64 @strtoumax(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale.498(i64* %x, i32 %scale_factor) #0 !dbg !20031 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i64*, align 8
  %scale_factor.addr = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !20034, metadata !DIExpression()), !dbg !20035
  store i32 %scale_factor, i32* %scale_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %scale_factor.addr, metadata !20036, metadata !DIExpression()), !dbg !20037
  %0 = load i32, i32* %scale_factor.addr, align 4, !dbg !20038
  %conv = sext i32 %0 to i64, !dbg !20038
  %div = udiv i64 -1, %conv, !dbg !20040
  %1 = load i64*, i64** %x.addr, align 8, !dbg !20041
  %2 = load i64, i64* %1, align 8, !dbg !20042, !ctir !168
  %cmp = icmp ult i64 %div, %2, !dbg !20043
  br i1 %cmp, label %if.then, label %if.end, !dbg !20044

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %x.addr, align 8, !dbg !20045
  store i64 -1, i64* %3, align 8, !dbg !20047, !ctir !168
  store i32 1, i32* %retval, align 4, !dbg !20048
  br label %return, !dbg !20048

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %scale_factor.addr, align 4, !dbg !20049
  %conv2 = sext i32 %4 to i64, !dbg !20049
  %5 = load i64*, i64** %x.addr, align 8, !dbg !20050
  %6 = load i64, i64* %5, align 8, !dbg !20051, !ctir !168
  %mul = mul i64 %6, %conv2, !dbg !20051
  store i64 %mul, i64* %5, align 8, !dbg !20051, !ctir !168
  store i32 0, i32* %retval, align 4, !dbg !20052
  br label %return, !dbg !20052

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !20053
  ret i32 %7, !dbg !20053
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power.499(i64* %x, i32 %base, i32 %power) #0 !dbg !20054 {
entry:
  %x.addr = alloca i64*, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4, !ctir !1276
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !20057, metadata !DIExpression()), !dbg !20058
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !20059, metadata !DIExpression()), !dbg !20060
  store i32 %power, i32* %power.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %power.addr, metadata !20061, metadata !DIExpression()), !dbg !20062
  call void @llvm.dbg.declare(metadata i32* %err, metadata !20063, metadata !DIExpression()), !dbg !20064
  store i32 0, i32* %err, align 4, !dbg !20064
  br label %while.cond, !dbg !20065

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %power.addr, align 4, !dbg !20066
  %dec = add nsw i32 %0, -1, !dbg !20066
  store i32 %dec, i32* %power.addr, align 4, !dbg !20066
  %tobool = icmp ne i32 %0, 0, !dbg !20065
  br i1 %tobool, label %while.body, label %while.end, !dbg !20065

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %x.addr, align 8, !dbg !20067
  %2 = load i32, i32* %base.addr, align 4, !dbg !20068
  %call = call i32 @bkm_scale.498(i64* %1, i32 %2), !dbg !20069
  %3 = load i32, i32* %err, align 4, !dbg !20070
  %or = or i32 %3, %call, !dbg !20070
  store i32 %or, i32* %err, align 4, !dbg !20070
  br label %while.cond, !dbg !20065, !llvm.loop !20071

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %err, align 4, !dbg !20073
  ret i32 %4, !dbg !20074
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrtowc(i32* %pwc, i8* %s, i64 %n, %struct.__mbstate_t* %ps) #0 !dbg !20075 {
entry:
  %retval = alloca i64, align 8
  %pwc.addr = alloca i32*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca %struct.__mbstate_t*, align 8
  %ret = alloca i64, align 8, !ctir !149
  %wc = alloca i32, align 4, !ctir !764
  %uc = alloca i8, align 1, !ctir !737
  store i32* %pwc, i32** %pwc.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pwc.addr, metadata !20090, metadata !DIExpression()), !dbg !20091
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !20092, metadata !DIExpression()), !dbg !20093
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !20094, metadata !DIExpression()), !dbg !20095
  store %struct.__mbstate_t* %ps, %struct.__mbstate_t** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %ps.addr, metadata !20096, metadata !DIExpression()), !dbg !20097
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !20098, metadata !DIExpression()), !dbg !20099
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !20100, metadata !DIExpression()), !dbg !20101
  %0 = load i32*, i32** %pwc.addr, align 8, !dbg !20102
  %tobool = icmp ne i32* %0, null, !dbg !20102
  br i1 %tobool, label %if.end, label %if.then, !dbg !20104

if.then:                                          ; preds = %entry
  store i32* %wc, i32** %pwc.addr, align 8, !dbg !20105
  br label %if.end, !dbg !20106

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %pwc.addr, align 8, !dbg !20107
  %2 = load i8*, i8** %s.addr, align 8, !dbg !20108
  %3 = load i64, i64* %n.addr, align 8, !dbg !20109
  %4 = load %struct.__mbstate_t*, %struct.__mbstate_t** %ps.addr, align 8, !dbg !20110
  %call = call i64 @mbrtowc(i32* %1, i8* %2, i64 %3, %struct.__mbstate_t* %4) #13, !dbg !20111
  store i64 %call, i64* %ret, align 8, !dbg !20112
  %5 = load i64, i64* %ret, align 8, !dbg !20113
  %cmp = icmp ule i64 -2, %5, !dbg !20115
  br i1 %cmp, label %land.lhs.true, label %if.end5, !dbg !20116

land.lhs.true:                                    ; preds = %if.end
  %6 = load i64, i64* %n.addr, align 8, !dbg !20117
  %cmp1 = icmp ne i64 %6, 0, !dbg !20118
  br i1 %cmp1, label %land.lhs.true2, label %if.end5, !dbg !20119

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call3 = call zeroext i1 @hard_locale(i32 0), !dbg !20120
  br i1 %call3, label %if.end5, label %if.then4, !dbg !20121

if.then4:                                         ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i8* %uc, metadata !20122, metadata !DIExpression()), !dbg !20124
  %7 = load i8*, i8** %s.addr, align 8, !dbg !20125
  %8 = load i8, i8* %7, align 1, !dbg !20126, !ctir !147
  store i8 %8, i8* %uc, align 1, !dbg !20124
  %9 = load i8, i8* %uc, align 1, !dbg !20127
  %conv = zext i8 %9 to i32, !dbg !20127
  %10 = load i32*, i32** %pwc.addr, align 8, !dbg !20128
  store i32 %conv, i32* %10, align 4, !dbg !20129, !ctir !764
  store i64 1, i64* %retval, align 8, !dbg !20130
  br label %return, !dbg !20130

if.end5:                                          ; preds = %land.lhs.true2, %land.lhs.true, %if.end
  %11 = load i64, i64* %ret, align 8, !dbg !20131
  store i64 %11, i64* %retval, align 8, !dbg !20132
  br label %return, !dbg !20132

return:                                           ; preds = %if.end5, %if.then4
  %12 = load i64, i64* %retval, align 8, !dbg !20133
  ret i64 %12, !dbg !20133
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @print_and_abort() #10 !dbg !20134 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !20135
  %call = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.502, i64 0, i64 0)) #13, !dbg !20136
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.503, i64 0, i64 0), i8* %call), !dbg !20137
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !20138
  call void @exit(i32 %1) #15, !dbg !20139
  unreachable, !dbg !20139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i64)* %chunkfun, void (i8*)* %freefun) #0 !dbg !20140 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i64)*, align 8
  %freefun.addr = alloca void (i8*)*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20144, metadata !DIExpression()), !dbg !20145
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !20146, metadata !DIExpression()), !dbg !20147
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !20148, metadata !DIExpression()), !dbg !20149
  store i8* (i64)* %chunkfun, i8* (i64)** %chunkfun.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i64)** %chunkfun.addr, metadata !20150, metadata !DIExpression()), !dbg !20151
  store void (i8*)* %freefun, void (i8*)** %freefun.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %freefun.addr, metadata !20152, metadata !DIExpression()), !dbg !20153
  %0 = load i8* (i64)*, i8* (i64)** %chunkfun.addr, align 8, !dbg !20154
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20155
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !20156, !ctir !1443
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**, !dbg !20157
  store i8* (i64)* %0, i8* (i64)** %plain, align 8, !dbg !20158, !ctir !1442
  %2 = load void (i8*)*, void (i8*)** %freefun.addr, align 8, !dbg !20159
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20160
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8, !dbg !20161, !ctir !1443
  %plain3 = bitcast %union.anon.1* %freefun2 to void (i8*)**, !dbg !20162
  store void (i8*)* %2, void (i8*)** %plain3, align 8, !dbg !20163, !ctir !1464
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20164
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 10, !dbg !20165, !ctir !1443
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !20166
  %bf.clear = and i8 %bf.load, -2, !dbg !20166
  store i8 %bf.clear, i8* %use_extra_arg, align 8, !dbg !20166
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20167
  %6 = load i64, i64* %size.addr, align 8, !dbg !20168
  %7 = load i64, i64* %alignment.addr, align 8, !dbg !20169
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %5, i64 %6, i64 %7), !dbg !20170
  ret i32 %call, !dbg !20171
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_obstack_begin_worker(%struct.obstack* %h, i64 %size, i64 %alignment) #0 !dbg !20172 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %extra = alloca i32, align 4, !ctir !27
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20175, metadata !DIExpression()), !dbg !20176
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !20177, metadata !DIExpression()), !dbg !20178
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !20179, metadata !DIExpression()), !dbg !20180
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %chunk, metadata !20181, metadata !DIExpression()), !dbg !20182
  %0 = load i64, i64* %alignment.addr, align 8, !dbg !20183
  %cmp = icmp eq i64 %0, 0, !dbg !20185
  br i1 %cmp, label %if.then, label %if.end, !dbg !20186

if.then:                                          ; preds = %entry
  store i64 16, i64* %alignment.addr, align 8, !dbg !20187
  br label %if.end, !dbg !20188

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %size.addr, align 8, !dbg !20189
  %cmp1 = icmp eq i64 %1, 0, !dbg !20191
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !20192

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %extra, metadata !20193, metadata !DIExpression()), !dbg !20195
  store i32 32, i32* %extra, align 4, !dbg !20195
  %2 = load i32, i32* %extra, align 4, !dbg !20196
  %sub = sub nsw i32 4096, %2, !dbg !20197
  %conv = sext i32 %sub to i64, !dbg !20198
  store i64 %conv, i64* %size.addr, align 8, !dbg !20199
  br label %if.end3, !dbg !20200

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i64, i64* %size.addr, align 8, !dbg !20201
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20202
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 0, !dbg !20203, !ctir !1443
  store i64 %3, i64* %chunk_size, align 8, !dbg !20204, !ctir !149
  %5 = load i64, i64* %alignment.addr, align 8, !dbg !20205
  %sub4 = sub i64 %5, 1, !dbg !20206
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20207
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 6, !dbg !20208, !ctir !1443
  store i64 %sub4, i64* %alignment_mask, align 8, !dbg !20209, !ctir !149
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20210
  %8 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20211
  %chunk_size5 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 0, !dbg !20212, !ctir !1443
  %9 = load i64, i64* %chunk_size5, align 8, !dbg !20212, !ctir !149
  %call = call i8* @call_chunkfun(%struct.obstack* %7, i64 %9), !dbg !20213
  %10 = bitcast i8* %call to %struct._obstack_chunk*, !dbg !20213
  %11 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20214
  %chunk6 = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 1, !dbg !20215, !ctir !1443
  store %struct._obstack_chunk* %10, %struct._obstack_chunk** %chunk6, align 8, !dbg !20216, !ctir !1447
  store %struct._obstack_chunk* %10, %struct._obstack_chunk** %chunk, align 8, !dbg !20217
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20218
  %tobool = icmp ne %struct._obstack_chunk* %12, null, !dbg !20218
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !20220

if.then7:                                         ; preds = %if.end3
  %13 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !dbg !20221
  call void %13() #14, !dbg !20222
  unreachable, !dbg !20222

if.end8:                                          ; preds = %if.end3
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20223
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %14, i32 0, i32 2, !dbg !20223, !ctir !1448
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0, !dbg !20223, !ctir !469
  %sub.ptr.lhs.cast = ptrtoint i8* %arraydecay to i64, !dbg !20223
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, 0, !dbg !20223
  %15 = load i64, i64* %alignment.addr, align 8, !dbg !20223
  %sub9 = sub i64 %15, 1, !dbg !20223
  %add = add i64 %sub.ptr.sub, %sub9, !dbg !20223
  %16 = load i64, i64* %alignment.addr, align 8, !dbg !20223
  %sub10 = sub i64 %16, 1, !dbg !20223
  %neg = xor i64 %sub10, -1, !dbg !20223
  %and = and i64 %add, %neg, !dbg !20223
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and, !dbg !20223, !ctir !144
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20224
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 2, !dbg !20225, !ctir !1443
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !20226, !ctir !143
  %18 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20227
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3, !dbg !20228, !ctir !1443
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !20229, !ctir !143
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20230
  %20 = bitcast %struct._obstack_chunk* %19 to i8*, !dbg !20231
  %21 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20232
  %chunk_size11 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 0, !dbg !20233, !ctir !1443
  %22 = load i64, i64* %chunk_size11, align 8, !dbg !20233, !ctir !149
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %22, !dbg !20234, !ctir !144
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20235
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %23, i32 0, i32 0, !dbg !20236, !ctir !1448
  store i8* %add.ptr12, i8** %limit, align 8, !dbg !20237, !ctir !143
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20238
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 4, !dbg !20239, !ctir !1443
  store i8* %add.ptr12, i8** %chunk_limit, align 8, !dbg !20240, !ctir !143
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20241
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %25, i32 0, i32 1, !dbg !20242, !ctir !1448
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %prev, align 8, !dbg !20243, !ctir !1447
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20244
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 10, !dbg !20245, !ctir !1443
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !20246
  %bf.clear = and i8 %bf.load, -3, !dbg !20246
  store i8 %bf.clear, i8* %maybe_empty_object, align 8, !dbg !20246
  %27 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20247
  %alloc_failed = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 10, !dbg !20248, !ctir !1443
  %bf.load13 = load i8, i8* %alloc_failed, align 8, !dbg !20249
  %bf.clear14 = and i8 %bf.load13, -5, !dbg !20249
  store i8 %bf.clear14, i8* %alloc_failed, align 8, !dbg !20249
  ret i32 1, !dbg !20250
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @call_chunkfun(%struct.obstack* %h, i64 %size) #0 !dbg !20251 {
entry:
  %retval = alloca i8*, align 8
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20254, metadata !DIExpression()), !dbg !20255
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !20256, metadata !DIExpression()), !dbg !20257
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20258
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10, !dbg !20260, !ctir !1443
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !20260
  %bf.clear = and i8 %bf.load, 1, !dbg !20260
  %bf.cast = zext i8 %bf.clear to i32, !dbg !20260
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !20258
  br i1 %tobool, label %if.then, label %if.else, !dbg !20261

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20262
  %chunkfun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !20263, !ctir !1443
  %extra = bitcast %union.anon.0* %chunkfun to i8* (i8*, i64)**, !dbg !20264
  %2 = load i8* (i8*, i64)*, i8* (i8*, i64)** %extra, align 8, !dbg !20264, !ctir !1442
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20265
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9, !dbg !20266, !ctir !1443
  %4 = load i8*, i8** %extra_arg, align 8, !dbg !20266, !ctir !167
  %5 = load i64, i64* %size.addr, align 8, !dbg !20267
  %call = call i8* %2(i8* %4, i64 %5), !dbg !20262
  store i8* %call, i8** %retval, align 8, !dbg !20268
  br label %return, !dbg !20268

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20269
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 7, !dbg !20270, !ctir !1443
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**, !dbg !20271
  %7 = load i8* (i64)*, i8* (i64)** %plain, align 8, !dbg !20271, !ctir !1442
  %8 = load i64, i64* %size.addr, align 8, !dbg !20272
  %call2 = call i8* %7(i64 %8), !dbg !20269
  store i8* %call2, i8** %retval, align 8, !dbg !20273
  br label %return, !dbg !20273

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 8, !dbg !20274
  ret i8* %9, !dbg !20274
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin_1(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i8*, i64)* %chunkfun, void (i8*, i8*)* %freefun, i8* %arg) #0 !dbg !20275 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i8*, i64)*, align 8
  %freefun.addr = alloca void (i8*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20278, metadata !DIExpression()), !dbg !20279
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !20280, metadata !DIExpression()), !dbg !20281
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !20282, metadata !DIExpression()), !dbg !20283
  store i8* (i8*, i64)* %chunkfun, i8* (i8*, i64)** %chunkfun.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i8*, i64)** %chunkfun.addr, metadata !20284, metadata !DIExpression()), !dbg !20285
  store void (i8*, i8*)* %freefun, void (i8*, i8*)** %freefun.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %freefun.addr, metadata !20286, metadata !DIExpression()), !dbg !20287
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !20288, metadata !DIExpression()), !dbg !20289
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** %chunkfun.addr, align 8, !dbg !20290
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20291
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !20292, !ctir !1443
  %extra = bitcast %union.anon.0* %chunkfun1 to i8* (i8*, i64)**, !dbg !20293
  store i8* (i8*, i64)* %0, i8* (i8*, i64)** %extra, align 8, !dbg !20294, !ctir !1442
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %freefun.addr, align 8, !dbg !20295
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20296
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8, !dbg !20297, !ctir !1443
  %extra3 = bitcast %union.anon.1* %freefun2 to void (i8*, i8*)**, !dbg !20298
  store void (i8*, i8*)* %2, void (i8*, i8*)** %extra3, align 8, !dbg !20299, !ctir !1464
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !20300
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20301
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 9, !dbg !20302, !ctir !1443
  store i8* %4, i8** %extra_arg, align 8, !dbg !20303, !ctir !167
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20304
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 10, !dbg !20305, !ctir !1443
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !20306
  %bf.clear = and i8 %bf.load, -2, !dbg !20306
  %bf.set = or i8 %bf.clear, 1, !dbg !20306
  store i8 %bf.set, i8* %use_extra_arg, align 8, !dbg !20306
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20307
  %8 = load i64, i64* %size.addr, align 8, !dbg !20308
  %9 = load i64, i64* %alignment.addr, align 8, !dbg !20309
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %7, i64 %8, i64 %9), !dbg !20310
  ret i32 %call, !dbg !20311
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_newchunk(%struct.obstack* %h, i64 %length) #0 !dbg !20312 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %length.addr = alloca i64, align 8
  %old_chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %new_chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %obj_size = alloca i64, align 8, !ctir !149
  %object_base1 = alloca i8*, align 8, !ctir !143
  %sum1 = alloca i64, align 8, !ctir !149
  %sum2 = alloca i64, align 8, !ctir !149
  %new_size = alloca i64, align 8, !ctir !149
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20315, metadata !DIExpression()), !dbg !20316
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !20317, metadata !DIExpression()), !dbg !20318
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %old_chunk, metadata !20319, metadata !DIExpression()), !dbg !20320
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20321
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !20322, !ctir !1443
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20322, !ctir !1447
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %old_chunk, align 8, !dbg !20320
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %new_chunk, metadata !20323, metadata !DIExpression()), !dbg !20324
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20324
  call void @llvm.dbg.declare(metadata i64* %obj_size, metadata !20325, metadata !DIExpression()), !dbg !20326
  %2 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20327
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 3, !dbg !20328, !ctir !1443
  %3 = load i8*, i8** %next_free, align 8, !dbg !20328, !ctir !143
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20329
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 2, !dbg !20330, !ctir !1443
  %5 = load i8*, i8** %object_base, align 8, !dbg !20330, !ctir !143
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !20331
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !20331
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !20331
  store i64 %sub.ptr.sub, i64* %obj_size, align 8, !dbg !20326
  call void @llvm.dbg.declare(metadata i8** %object_base1, metadata !20332, metadata !DIExpression()), !dbg !20333
  call void @llvm.dbg.declare(metadata i64* %sum1, metadata !20334, metadata !DIExpression()), !dbg !20335
  %6 = load i64, i64* %obj_size, align 8, !dbg !20336
  %7 = load i64, i64* %length.addr, align 8, !dbg !20337
  %add = add i64 %6, %7, !dbg !20338
  store i64 %add, i64* %sum1, align 8, !dbg !20335
  call void @llvm.dbg.declare(metadata i64* %sum2, metadata !20339, metadata !DIExpression()), !dbg !20340
  %8 = load i64, i64* %sum1, align 8, !dbg !20341
  %9 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20342
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 6, !dbg !20343, !ctir !1443
  %10 = load i64, i64* %alignment_mask, align 8, !dbg !20343, !ctir !149
  %add2 = add i64 %8, %10, !dbg !20344
  store i64 %add2, i64* %sum2, align 8, !dbg !20340
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !20345, metadata !DIExpression()), !dbg !20346
  %11 = load i64, i64* %sum2, align 8, !dbg !20347
  %12 = load i64, i64* %obj_size, align 8, !dbg !20348
  %shr = lshr i64 %12, 3, !dbg !20349
  %add3 = add i64 %11, %shr, !dbg !20350
  %add4 = add i64 %add3, 100, !dbg !20351
  store i64 %add4, i64* %new_size, align 8, !dbg !20346
  %13 = load i64, i64* %new_size, align 8, !dbg !20352
  %14 = load i64, i64* %sum2, align 8, !dbg !20354
  %cmp = icmp ult i64 %13, %14, !dbg !20355
  br i1 %cmp, label %if.then, label %if.end, !dbg !20356

if.then:                                          ; preds = %entry
  %15 = load i64, i64* %sum2, align 8, !dbg !20357
  store i64 %15, i64* %new_size, align 8, !dbg !20358
  br label %if.end, !dbg !20359

if.end:                                           ; preds = %if.then, %entry
  %16 = load i64, i64* %new_size, align 8, !dbg !20360
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20362
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 0, !dbg !20363, !ctir !1443
  %18 = load i64, i64* %chunk_size, align 8, !dbg !20363, !ctir !149
  %cmp5 = icmp ult i64 %16, %18, !dbg !20364
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !20365

if.then6:                                         ; preds = %if.end
  %19 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20366
  %chunk_size7 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 0, !dbg !20367, !ctir !1443
  %20 = load i64, i64* %chunk_size7, align 8, !dbg !20367, !ctir !149
  store i64 %20, i64* %new_size, align 8, !dbg !20368
  br label %if.end8, !dbg !20369

if.end8:                                          ; preds = %if.then6, %if.end
  %21 = load i64, i64* %obj_size, align 8, !dbg !20370
  %22 = load i64, i64* %sum1, align 8, !dbg !20372
  %cmp9 = icmp ule i64 %21, %22, !dbg !20373
  br i1 %cmp9, label %land.lhs.true, label %if.end12, !dbg !20374

land.lhs.true:                                    ; preds = %if.end8
  %23 = load i64, i64* %sum1, align 8, !dbg !20375
  %24 = load i64, i64* %sum2, align 8, !dbg !20376
  %cmp10 = icmp ule i64 %23, %24, !dbg !20377
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !20378

if.then11:                                        ; preds = %land.lhs.true
  %25 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20379
  %26 = load i64, i64* %new_size, align 8, !dbg !20380
  %call = call i8* @call_chunkfun(%struct.obstack* %25, i64 %26), !dbg !20381
  %27 = bitcast i8* %call to %struct._obstack_chunk*, !dbg !20381
  store %struct._obstack_chunk* %27, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20382
  br label %if.end12, !dbg !20383

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20384
  %tobool = icmp ne %struct._obstack_chunk* %28, null, !dbg !20384
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !20386

if.then13:                                        ; preds = %if.end12
  %29 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !dbg !20387
  call void %29() #14, !dbg !20388
  unreachable, !dbg !20388

if.end14:                                         ; preds = %if.end12
  %30 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20389
  %31 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20390
  %chunk15 = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 1, !dbg !20391, !ctir !1443
  store %struct._obstack_chunk* %30, %struct._obstack_chunk** %chunk15, align 8, !dbg !20392, !ctir !1447
  %32 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !20393
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20394
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %33, i32 0, i32 1, !dbg !20395, !ctir !1448
  store %struct._obstack_chunk* %32, %struct._obstack_chunk** %prev, align 8, !dbg !20396, !ctir !1447
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20397
  %35 = bitcast %struct._obstack_chunk* %34 to i8*, !dbg !20398
  %36 = load i64, i64* %new_size, align 8, !dbg !20399
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !20400, !ctir !144
  %37 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20401
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 4, !dbg !20402, !ctir !1443
  store i8* %add.ptr, i8** %chunk_limit, align 8, !dbg !20403, !ctir !143
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20404
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %38, i32 0, i32 0, !dbg !20405, !ctir !1448
  store i8* %add.ptr, i8** %limit, align 8, !dbg !20406, !ctir !143
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20407
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %39, i32 0, i32 2, !dbg !20407, !ctir !1448
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0, !dbg !20407, !ctir !469
  %sub.ptr.lhs.cast16 = ptrtoint i8* %arraydecay to i64, !dbg !20407
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast16, 0, !dbg !20407
  %40 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20407
  %alignment_mask18 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 6, !dbg !20407, !ctir !1443
  %41 = load i64, i64* %alignment_mask18, align 8, !dbg !20407, !ctir !149
  %add19 = add i64 %sub.ptr.sub17, %41, !dbg !20407
  %42 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20407
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 6, !dbg !20407, !ctir !1443
  %43 = load i64, i64* %alignment_mask20, align 8, !dbg !20407, !ctir !149
  %neg = xor i64 %43, -1, !dbg !20407
  %and = and i64 %add19, %neg, !dbg !20407
  %add.ptr21 = getelementptr inbounds i8, i8* null, i64 %and, !dbg !20407, !ctir !144
  store i8* %add.ptr21, i8** %object_base1, align 8, !dbg !20408
  %44 = load i8*, i8** %object_base1, align 8, !dbg !20409
  %45 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20410
  %object_base22 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !20411, !ctir !1443
  %46 = load i8*, i8** %object_base22, align 8, !dbg !20411, !ctir !143
  %47 = load i64, i64* %obj_size, align 8, !dbg !20412
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %46, i64 %47, i1 false), !dbg !20413
  %48 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20414
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %48, i32 0, i32 10, !dbg !20416, !ctir !1443
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !20416
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !20416
  %bf.clear = and i8 %bf.lshr, 1, !dbg !20416
  %bf.cast = zext i8 %bf.clear to i32, !dbg !20416
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !20414
  br i1 %tobool23, label %if.end40, label %land.lhs.true24, !dbg !20417

land.lhs.true24:                                  ; preds = %if.end14
  %49 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20418
  %object_base25 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 2, !dbg !20419, !ctir !1443
  %50 = load i8*, i8** %object_base25, align 8, !dbg !20419, !ctir !143
  %51 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !20420
  %contents26 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %51, i32 0, i32 2, !dbg !20420, !ctir !1448
  %arraydecay27 = getelementptr inbounds [0 x i8], [0 x i8]* %contents26, i64 0, i64 0, !dbg !20420, !ctir !469
  %sub.ptr.lhs.cast28 = ptrtoint i8* %arraydecay27 to i64, !dbg !20420
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast28, 0, !dbg !20420
  %52 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20420
  %alignment_mask30 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 6, !dbg !20420, !ctir !1443
  %53 = load i64, i64* %alignment_mask30, align 8, !dbg !20420, !ctir !149
  %add31 = add i64 %sub.ptr.sub29, %53, !dbg !20420
  %54 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20420
  %alignment_mask32 = getelementptr inbounds %struct.obstack, %struct.obstack* %54, i32 0, i32 6, !dbg !20420, !ctir !1443
  %55 = load i64, i64* %alignment_mask32, align 8, !dbg !20420, !ctir !149
  %neg33 = xor i64 %55, -1, !dbg !20420
  %and34 = and i64 %add31, %neg33, !dbg !20420
  %add.ptr35 = getelementptr inbounds i8, i8* null, i64 %and34, !dbg !20420, !ctir !144
  %cmp36 = icmp eq i8* %50, %add.ptr35, !dbg !20421
  br i1 %cmp36, label %if.then37, label %if.end40, !dbg !20422

if.then37:                                        ; preds = %land.lhs.true24
  %56 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !20423
  %prev38 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %56, i32 0, i32 1, !dbg !20425, !ctir !1448
  %57 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev38, align 8, !dbg !20425, !ctir !1447
  %58 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !20426
  %prev39 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %58, i32 0, i32 1, !dbg !20427, !ctir !1448
  store %struct._obstack_chunk* %57, %struct._obstack_chunk** %prev39, align 8, !dbg !20428, !ctir !1447
  %59 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20429
  %60 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !20430
  %61 = bitcast %struct._obstack_chunk* %60 to i8*, !dbg !20430
  call void @call_freefun(%struct.obstack* %59, i8* %61), !dbg !20431
  br label %if.end40, !dbg !20432

if.end40:                                         ; preds = %if.then37, %land.lhs.true24, %if.end14
  %62 = load i8*, i8** %object_base1, align 8, !dbg !20433
  %63 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20434
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %63, i32 0, i32 2, !dbg !20435, !ctir !1443
  store i8* %62, i8** %object_base41, align 8, !dbg !20436, !ctir !143
  %64 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20437
  %object_base42 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 2, !dbg !20438, !ctir !1443
  %65 = load i8*, i8** %object_base42, align 8, !dbg !20438, !ctir !143
  %66 = load i64, i64* %obj_size, align 8, !dbg !20439
  %add.ptr43 = getelementptr inbounds i8, i8* %65, i64 %66, !dbg !20440, !ctir !144
  %67 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20441
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %67, i32 0, i32 3, !dbg !20442, !ctir !1443
  store i8* %add.ptr43, i8** %next_free44, align 8, !dbg !20443, !ctir !143
  %68 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20444
  %maybe_empty_object45 = getelementptr inbounds %struct.obstack, %struct.obstack* %68, i32 0, i32 10, !dbg !20445, !ctir !1443
  %bf.load46 = load i8, i8* %maybe_empty_object45, align 8, !dbg !20446
  %bf.clear47 = and i8 %bf.load46, -3, !dbg !20446
  store i8 %bf.clear47, i8* %maybe_empty_object45, align 8, !dbg !20446
  ret void, !dbg !20447
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @call_freefun(%struct.obstack* %h, i8* %old_chunk) #0 !dbg !20448 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %old_chunk.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20451, metadata !DIExpression()), !dbg !20452
  store i8* %old_chunk, i8** %old_chunk.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %old_chunk.addr, metadata !20453, metadata !DIExpression()), !dbg !20454
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20455
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10, !dbg !20457, !ctir !1443
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !20457
  %bf.clear = and i8 %bf.load, 1, !dbg !20457
  %bf.cast = zext i8 %bf.clear to i32, !dbg !20457
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !20455
  br i1 %tobool, label %if.then, label %if.else, !dbg !20458

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20459
  %freefun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 8, !dbg !20460, !ctir !1443
  %extra = bitcast %union.anon.1* %freefun to void (i8*, i8*)**, !dbg !20461
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %extra, align 8, !dbg !20461, !ctir !1464
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20462
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9, !dbg !20463, !ctir !1443
  %4 = load i8*, i8** %extra_arg, align 8, !dbg !20463, !ctir !167
  %5 = load i8*, i8** %old_chunk.addr, align 8, !dbg !20464
  call void %2(i8* %4, i8* %5), !dbg !20459
  br label %if.end, !dbg !20459

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20465
  %freefun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 8, !dbg !20466, !ctir !1443
  %plain = bitcast %union.anon.1* %freefun1 to void (i8*)**, !dbg !20467
  %7 = load void (i8*)*, void (i8*)** %plain, align 8, !dbg !20467, !ctir !1464
  %8 = load i8*, i8** %old_chunk.addr, align 8, !dbg !20468
  call void %7(i8* %8), !dbg !20465
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !20469
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @_obstack_allocated_p(%struct.obstack* %h, i8* %obj) #9 !dbg !20470 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %plp = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20473, metadata !DIExpression()), !dbg !20474
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !20475, metadata !DIExpression()), !dbg !20476
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !20477, metadata !DIExpression()), !dbg !20478
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %plp, metadata !20479, metadata !DIExpression()), !dbg !20480
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20481
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !20482, !ctir !1443
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20482, !ctir !1447
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !20483
  br label %while.cond, !dbg !20484

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20485
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !20486
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !20487

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20488
  %4 = bitcast %struct._obstack_chunk* %3 to i8*, !dbg !20489
  %5 = load i8*, i8** %obj.addr, align 8, !dbg !20490
  %cmp1 = icmp uge i8* %4, %5, !dbg !20491
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !20492

lor.rhs:                                          ; preds = %land.rhs
  %6 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20493
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %6, i32 0, i32 0, !dbg !20494, !ctir !1448
  %7 = load i8*, i8** %limit, align 8, !dbg !20494, !ctir !143
  %8 = load i8*, i8** %obj.addr, align 8, !dbg !20495
  %cmp2 = icmp ult i8* %7, %8, !dbg !20496
  br label %lor.end, !dbg !20492

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %9, %lor.end ], !dbg !20497
  br i1 %10, label %while.body, label %while.end, !dbg !20484

while.body:                                       ; preds = %land.end
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20498
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %11, i32 0, i32 1, !dbg !20500, !ctir !1448
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !20500, !ctir !1447
  store %struct._obstack_chunk* %12, %struct._obstack_chunk** %plp, align 8, !dbg !20501
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !dbg !20502
  store %struct._obstack_chunk* %13, %struct._obstack_chunk** %lp, align 8, !dbg !20503
  br label %while.cond, !dbg !20484, !llvm.loop !20504

while.end:                                        ; preds = %land.end
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20506
  %cmp3 = icmp ne %struct._obstack_chunk* %14, null, !dbg !20507
  %conv = zext i1 %cmp3 to i32, !dbg !20507
  ret i32 %conv, !dbg !20508
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_free(%struct.obstack* %h, i8* %obj) #0 !dbg !20509 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %plp = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20510, metadata !DIExpression()), !dbg !20511
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !20512, metadata !DIExpression()), !dbg !20513
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !20514, metadata !DIExpression()), !dbg !20515
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %plp, metadata !20516, metadata !DIExpression()), !dbg !20517
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20518
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !20519, !ctir !1443
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20519, !ctir !1447
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !20520
  br label %while.cond, !dbg !20521

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20522
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !20523
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !20524

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20525
  %4 = bitcast %struct._obstack_chunk* %3 to i8*, !dbg !20526
  %5 = load i8*, i8** %obj.addr, align 8, !dbg !20527
  %cmp1 = icmp uge i8* %4, %5, !dbg !20528
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !20529

lor.rhs:                                          ; preds = %land.rhs
  %6 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20530
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %6, i32 0, i32 0, !dbg !20531, !ctir !1448
  %7 = load i8*, i8** %limit, align 8, !dbg !20531, !ctir !143
  %8 = load i8*, i8** %obj.addr, align 8, !dbg !20532
  %cmp2 = icmp ult i8* %7, %8, !dbg !20533
  br label %lor.end, !dbg !20529

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %9, %lor.end ], !dbg !20534
  br i1 %10, label %while.body, label %while.end, !dbg !20521

while.body:                                       ; preds = %land.end
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20535
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %11, i32 0, i32 1, !dbg !20537, !ctir !1448
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !20537, !ctir !1447
  store %struct._obstack_chunk* %12, %struct._obstack_chunk** %plp, align 8, !dbg !20538
  %13 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20539
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20540
  %15 = bitcast %struct._obstack_chunk* %14 to i8*, !dbg !20540
  call void @call_freefun(%struct.obstack* %13, i8* %15), !dbg !20541
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !dbg !20542
  store %struct._obstack_chunk* %16, %struct._obstack_chunk** %lp, align 8, !dbg !20543
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20544
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10, !dbg !20545, !ctir !1443
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !20546
  %bf.clear = and i8 %bf.load, -3, !dbg !20546
  %bf.set = or i8 %bf.clear, 2, !dbg !20546
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !20546
  br label %while.cond, !dbg !20521, !llvm.loop !20547

while.end:                                        ; preds = %land.end
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20549
  %tobool = icmp ne %struct._obstack_chunk* %18, null, !dbg !20549
  br i1 %tobool, label %if.then, label %if.else, !dbg !20551

if.then:                                          ; preds = %while.end
  %19 = load i8*, i8** %obj.addr, align 8, !dbg !20552
  %20 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20554
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 3, !dbg !20555, !ctir !1443
  store i8* %19, i8** %next_free, align 8, !dbg !20556, !ctir !143
  %21 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20557
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 2, !dbg !20558, !ctir !1443
  store i8* %19, i8** %object_base, align 8, !dbg !20559, !ctir !143
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20560
  %limit3 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %22, i32 0, i32 0, !dbg !20561, !ctir !1448
  %23 = load i8*, i8** %limit3, align 8, !dbg !20561, !ctir !143
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20562
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 4, !dbg !20563, !ctir !1443
  store i8* %23, i8** %chunk_limit, align 8, !dbg !20564, !ctir !143
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20565
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20566
  %chunk4 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 1, !dbg !20567, !ctir !1443
  store %struct._obstack_chunk* %25, %struct._obstack_chunk** %chunk4, align 8, !dbg !20568, !ctir !1447
  br label %if.end7, !dbg !20569

if.else:                                          ; preds = %while.end
  %27 = load i8*, i8** %obj.addr, align 8, !dbg !20570
  %cmp5 = icmp ne i8* %27, null, !dbg !20572
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !20573

if.then6:                                         ; preds = %if.else
  call void @abort() #15, !dbg !20574
  unreachable, !dbg !20574

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  ret void, !dbg !20575
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @_obstack_memory_used(%struct.obstack* %h) #9 !dbg !20576 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1447
  %nbytes = alloca i64, align 8, !ctir !149
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !20579, metadata !DIExpression()), !dbg !20580
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !20581, metadata !DIExpression()), !dbg !20582
  call void @llvm.dbg.declare(metadata i64* %nbytes, metadata !20583, metadata !DIExpression()), !dbg !20584
  store i64 0, i64* %nbytes, align 8, !dbg !20584
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !20585
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !20587, !ctir !1443
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !20587, !ctir !1447
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !20588
  br label %for.cond, !dbg !20589

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20590
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !20592
  br i1 %cmp, label %for.body, label %for.end, !dbg !20593

for.body:                                         ; preds = %for.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20594
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %3, i32 0, i32 0, !dbg !20596, !ctir !1448
  %4 = load i8*, i8** %limit, align 8, !dbg !20596, !ctir !143
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20597
  %6 = bitcast %struct._obstack_chunk* %5 to i8*, !dbg !20598
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64, !dbg !20599
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !20599
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !20599
  %7 = load i64, i64* %nbytes, align 8, !dbg !20600
  %add = add i64 %7, %sub.ptr.sub, !dbg !20600
  store i64 %add, i64* %nbytes, align 8, !dbg !20600
  br label %for.inc, !dbg !20601

for.inc:                                          ; preds = %for.body
  %8 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !20602
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i32 0, i32 1, !dbg !20603, !ctir !1448
  %9 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !20603, !ctir !1447
  store %struct._obstack_chunk* %9, %struct._obstack_chunk** %lp, align 8, !dbg !20604
  br label %for.cond, !dbg !20605, !llvm.loop !20606

for.end:                                          ; preds = %for.cond
  %10 = load i64, i64* %nbytes, align 8, !dbg !20608
  ret i64 %10, !dbg !20609
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.tm_zone* @tzalloc(i8* %name) #0 !dbg !20610 {
entry:
  %name.addr = alloca i8*, align 8
  %name_size = alloca i64, align 8, !ctir !149
  %abbr_size = alloca i64, align 8, !ctir !149
  %tz = alloca %struct.tm_zone*, align 8, !ctir !1735
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !20613, metadata !DIExpression()), !dbg !20614
  call void @llvm.dbg.declare(metadata i64* %name_size, metadata !20615, metadata !DIExpression()), !dbg !20616
  %0 = load i8*, i8** %name.addr, align 8, !dbg !20617
  %tobool = icmp ne i8* %0, null, !dbg !20617
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !20617

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !20618
  %call = call i64 @strlen(i8* %1) #16, !dbg !20619
  %add = add i64 %call, 1, !dbg !20620
  br label %cond.end, !dbg !20617

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !20617

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ], !dbg !20617
  store i64 %cond, i64* %name_size, align 8, !dbg !20616
  call void @llvm.dbg.declare(metadata i64* %abbr_size, metadata !20621, metadata !DIExpression()), !dbg !20622
  %2 = load i64, i64* %name_size, align 8, !dbg !20623
  %cmp = icmp ult i64 %2, 119, !dbg !20624
  br i1 %cmp, label %cond.true1, label %cond.false2, !dbg !20623

cond.true1:                                       ; preds = %cond.end
  br label %cond.end4, !dbg !20623

cond.false2:                                      ; preds = %cond.end
  %3 = load i64, i64* %name_size, align 8, !dbg !20625
  %add3 = add i64 %3, 1, !dbg !20626
  br label %cond.end4, !dbg !20623

cond.end4:                                        ; preds = %cond.false2, %cond.true1
  %cond5 = phi i64 [ 119, %cond.true1 ], [ %add3, %cond.false2 ], !dbg !20623
  store i64 %cond5, i64* %abbr_size, align 8, !dbg !20622
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz, metadata !20627, metadata !DIExpression()), !dbg !20628
  %4 = load i64, i64* %abbr_size, align 8, !dbg !20629
  %add6 = add i64 16, %4, !dbg !20629
  %and = and i64 %add6, -8, !dbg !20629
  %call7 = call noalias i8* @malloc(i64 %and) #13, !dbg !20630
  %5 = bitcast i8* %call7 to %struct.tm_zone*, !dbg !20630
  store %struct.tm_zone* %5, %struct.tm_zone** %tz, align 8, !dbg !20628
  %6 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20631
  %tobool8 = icmp ne %struct.tm_zone* %6, null, !dbg !20631
  br i1 %tobool8, label %if.then, label %if.end14, !dbg !20633

if.then:                                          ; preds = %cond.end4
  %7 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20634
  %next = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %7, i32 0, i32 0, !dbg !20636, !ctir !1737
  store %struct.tm_zone* null, %struct.tm_zone** %next, align 8, !dbg !20637, !ctir !1736
  %8 = load i8*, i8** %name.addr, align 8, !dbg !20638
  %tobool9 = icmp ne i8* %8, null, !dbg !20639
  %lnot = xor i1 %tobool9, true, !dbg !20639
  %lnot10 = xor i1 %lnot, true, !dbg !20640
  %lnot.ext = zext i1 %lnot10 to i32, !dbg !20640
  %conv = trunc i32 %lnot.ext to i8, !dbg !20640
  %9 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20641
  %tz_is_set = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %9, i32 0, i32 1, !dbg !20642, !ctir !1737
  store i8 %conv, i8* %tz_is_set, align 8, !dbg !20643, !ctir !144
  %10 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20644
  %abbrs = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %10, i32 0, i32 2, !dbg !20645, !ctir !1737
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs, i64 0, i64 0, !dbg !20644, !ctir !469
  store i8 0, i8* %arrayidx, align 1, !dbg !20646
  %11 = load i8*, i8** %name.addr, align 8, !dbg !20647
  %tobool11 = icmp ne i8* %11, null, !dbg !20647
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !20649

if.then12:                                        ; preds = %if.then
  %12 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20650
  %abbrs13 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %12, i32 0, i32 2, !dbg !20651, !ctir !1737
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs13, i64 0, i64 0, !dbg !20650, !ctir !469
  %13 = load i8*, i8** %name.addr, align 8, !dbg !20652
  %14 = load i64, i64* %name_size, align 8, !dbg !20653
  call void @extend_abbrs(i8* %arraydecay, i8* %13, i64 %14), !dbg !20654
  br label %if.end, !dbg !20654

if.end:                                           ; preds = %if.then12, %if.then
  br label %if.end14, !dbg !20655

if.end14:                                         ; preds = %if.end, %cond.end4
  %15 = load %struct.tm_zone*, %struct.tm_zone** %tz, align 8, !dbg !20656
  ret %struct.tm_zone* %15, !dbg !20657
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @extend_abbrs(i8* %abbrs, i8* %abbr, i64 %abbr_size) #0 !dbg !20658 {
entry:
  %abbrs.addr = alloca i8*, align 8
  %abbr.addr = alloca i8*, align 8
  %abbr_size.addr = alloca i64, align 8
  store i8* %abbrs, i8** %abbrs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %abbrs.addr, metadata !20661, metadata !DIExpression()), !dbg !20662
  store i8* %abbr, i8** %abbr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %abbr.addr, metadata !20663, metadata !DIExpression()), !dbg !20664
  store i64 %abbr_size, i64* %abbr_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %abbr_size.addr, metadata !20665, metadata !DIExpression()), !dbg !20666
  %0 = load i8*, i8** %abbrs.addr, align 8, !dbg !20667
  %1 = load i8*, i8** %abbr.addr, align 8, !dbg !20668
  %2 = load i64, i64* %abbr_size.addr, align 8, !dbg !20669
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %2, i1 false), !dbg !20670
  %3 = load i8*, i8** %abbrs.addr, align 8, !dbg !20671
  %4 = load i64, i64* %abbr_size.addr, align 8, !dbg !20672
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !20671, !ctir !143
  store i8 0, i8* %arrayidx, align 1, !dbg !20673
  ret void, !dbg !20674
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @tzfree(%struct.tm_zone* %tz) #0 !dbg !20675 {
entry:
  %tz.addr = alloca %struct.tm_zone*, align 8
  %next = alloca %struct.tm_zone*, align 8, !ctir !1735
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20678, metadata !DIExpression()), !dbg !20679
  %0 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20680
  %cmp = icmp ne %struct.tm_zone* %0, inttoptr (i64 1 to %struct.tm_zone*), !dbg !20682
  br i1 %cmp, label %if.then, label %if.end, !dbg !20683

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !20684

while.cond:                                       ; preds = %while.body, %if.then
  %1 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20685
  %tobool = icmp ne %struct.tm_zone* %1, null, !dbg !20684
  br i1 %tobool, label %while.body, label %while.end, !dbg !20684

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %next, metadata !20686, metadata !DIExpression()), !dbg !20688
  %2 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20689
  %next1 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %2, i32 0, i32 0, !dbg !20690, !ctir !1737
  %3 = load %struct.tm_zone*, %struct.tm_zone** %next1, align 8, !dbg !20690, !ctir !1736
  store %struct.tm_zone* %3, %struct.tm_zone** %next, align 8, !dbg !20688
  %4 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20691
  %5 = bitcast %struct.tm_zone* %4 to i8*, !dbg !20691
  call void @free(i8* %5) #13, !dbg !20692
  %6 = load %struct.tm_zone*, %struct.tm_zone** %next, align 8, !dbg !20693
  store %struct.tm_zone* %6, %struct.tm_zone** %tz.addr, align 8, !dbg !20694
  br label %while.cond, !dbg !20684, !llvm.loop !20695

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !20684

if.end:                                           ; preds = %while.end, %entry
  ret void, !dbg !20697
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.tm* @localtime_rz(%struct.tm_zone* %tz, i64* nonnull %t, %struct.tm* nonnull %tm) #0 !dbg !20698 {
entry:
  %retval = alloca %struct.tm*, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %t.addr = alloca i64*, align 8
  %tm.addr = alloca %struct.tm*, align 8
  %old_tz = alloca %struct.tm_zone*, align 8, !ctir !1735
  %abbr_saved = alloca i8, align 1, !ctir !141
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20717, metadata !DIExpression()), !dbg !20718
  store i64* %t, i64** %t.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %t.addr, metadata !20719, metadata !DIExpression()), !dbg !20720
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tm.addr, metadata !20721, metadata !DIExpression()), !dbg !20722
  %0 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20723
  %tobool = icmp ne %struct.tm_zone* %0, null, !dbg !20723
  br i1 %tobool, label %if.else, label %if.then, !dbg !20725

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %t.addr, align 8, !dbg !20726
  %2 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20727
  %call = call %struct.tm* @gmtime_r(i64* %1, %struct.tm* %2) #13, !dbg !20728
  store %struct.tm* %call, %struct.tm** %retval, align 8, !dbg !20729
  br label %return, !dbg !20729

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %old_tz, metadata !20730, metadata !DIExpression()), !dbg !20732
  %3 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20733
  %call1 = call %struct.tm_zone* @set_tz(%struct.tm_zone* %3), !dbg !20734
  store %struct.tm_zone* %call1, %struct.tm_zone** %old_tz, align 8, !dbg !20732
  %4 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20735
  %tobool2 = icmp ne %struct.tm_zone* %4, null, !dbg !20735
  br i1 %tobool2, label %if.then3, label %if.end10, !dbg !20737

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i8* %abbr_saved, metadata !20738, metadata !DIExpression()), !dbg !20740
  %5 = load i64*, i64** %t.addr, align 8, !dbg !20741
  %6 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20742
  %call4 = call %struct.tm* @localtime_r(i64* %5, %struct.tm* %6) #13, !dbg !20743
  %tobool5 = icmp ne %struct.tm* %call4, null, !dbg !20743
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !20744

land.rhs:                                         ; preds = %if.then3
  %7 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20745
  %8 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20746
  %call6 = call zeroext i1 @save_abbr(%struct.tm_zone* %7, %struct.tm* %8), !dbg !20747
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then3
  %9 = phi i1 [ false, %if.then3 ], [ %call6, %land.rhs ], !dbg !20748
  %frombool = zext i1 %9 to i8, !dbg !20740
  store i8 %frombool, i8* %abbr_saved, align 1, !dbg !20740
  %10 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20749
  %call7 = call zeroext i1 @revert_tz(%struct.tm_zone* %10), !dbg !20751
  br i1 %call7, label %land.lhs.true, label %if.end, !dbg !20752

land.lhs.true:                                    ; preds = %land.end
  %11 = load i8, i8* %abbr_saved, align 1, !dbg !20753
  %tobool8 = trunc i8 %11 to i1, !dbg !20753
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !20754

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20755
  store %struct.tm* %12, %struct.tm** %retval, align 8, !dbg !20756
  br label %return, !dbg !20756

if.end:                                           ; preds = %land.lhs.true, %land.end
  br label %if.end10, !dbg !20757

if.end10:                                         ; preds = %if.end, %if.else
  store %struct.tm* null, %struct.tm** %retval, align 8, !dbg !20758
  br label %return, !dbg !20758

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %13 = load %struct.tm*, %struct.tm** %retval, align 8, !dbg !20759
  ret %struct.tm* %13, !dbg !20759
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @gmtime_r(i64*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tm_zone* @set_tz(%struct.tm_zone* %tz) #0 !dbg !20760 {
entry:
  %retval = alloca %struct.tm_zone*, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %env_tz = alloca i8*, align 8, !ctir !143
  %old_tz = alloca %struct.tm_zone*, align 8, !ctir !1735
  %saved_errno = alloca i32, align 4, !ctir !27
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20763, metadata !DIExpression()), !dbg !20764
  call void @llvm.dbg.declare(metadata i8** %env_tz, metadata !20765, metadata !DIExpression()), !dbg !20766
  %call = call i8* @getenv_TZ(), !dbg !20767
  store i8* %call, i8** %env_tz, align 8, !dbg !20766
  %0 = load i8*, i8** %env_tz, align 8, !dbg !20768
  %tobool = icmp ne i8* %0, null, !dbg !20768
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !20770

cond.true:                                        ; preds = %entry
  %1 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20771
  %tz_is_set = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %1, i32 0, i32 1, !dbg !20772, !ctir !1737
  %2 = load i8, i8* %tz_is_set, align 8, !dbg !20772, !ctir !144
  %conv = sext i8 %2 to i32, !dbg !20771
  %tobool1 = icmp ne i32 %conv, 0, !dbg !20771
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !20773

land.lhs.true:                                    ; preds = %cond.true
  %3 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20774
  %abbrs = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %3, i32 0, i32 2, !dbg !20775, !ctir !1737
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs, i64 0, i64 0, !dbg !20774, !ctir !469
  %4 = load i8*, i8** %env_tz, align 8, !dbg !20776
  %call2 = call i32 @strcmp(i8* %arraydecay, i8* %4) #16, !dbg !20777
  %cmp = icmp eq i32 %call2, 0, !dbg !20778
  br i1 %cmp, label %if.then, label %if.else, !dbg !20768

cond.false:                                       ; preds = %entry
  %5 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20779
  %tz_is_set4 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %5, i32 0, i32 1, !dbg !20780, !ctir !1737
  %6 = load i8, i8* %tz_is_set4, align 8, !dbg !20780, !ctir !144
  %tobool5 = icmp ne i8 %6, 0, !dbg !20779
  br i1 %tobool5, label %if.else, label %if.then, !dbg !20770

if.then:                                          ; preds = %cond.false, %land.lhs.true
  store %struct.tm_zone* inttoptr (i64 1 to %struct.tm_zone*), %struct.tm_zone** %retval, align 8, !dbg !20781
  br label %return, !dbg !20781

if.else:                                          ; preds = %cond.false, %land.lhs.true, %cond.true
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %old_tz, metadata !20782, metadata !DIExpression()), !dbg !20784
  %7 = load i8*, i8** %env_tz, align 8, !dbg !20785
  %call6 = call %struct.tm_zone* @tzalloc(i8* %7), !dbg !20786
  store %struct.tm_zone* %call6, %struct.tm_zone** %old_tz, align 8, !dbg !20784
  %8 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20787
  %tobool7 = icmp ne %struct.tm_zone* %8, null, !dbg !20787
  br i1 %tobool7, label %if.end, label %if.then8, !dbg !20789

if.then8:                                         ; preds = %if.else
  %9 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20790
  store %struct.tm_zone* %9, %struct.tm_zone** %retval, align 8, !dbg !20791
  br label %return, !dbg !20791

if.end:                                           ; preds = %if.else
  %10 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20792
  %call9 = call zeroext i1 @change_env(%struct.tm_zone* %10), !dbg !20794
  br i1 %call9, label %if.end13, label %if.then10, !dbg !20795

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !20796, metadata !DIExpression()), !dbg !20798
  %call11 = call i32* @__errno_location() #17, !dbg !20799
  %11 = load i32, i32* %call11, align 4, !dbg !20799, !ctir !27
  store i32 %11, i32* %saved_errno, align 4, !dbg !20798
  %12 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20800
  call void @tzfree(%struct.tm_zone* %12), !dbg !20801
  %13 = load i32, i32* %saved_errno, align 4, !dbg !20802
  %call12 = call i32* @__errno_location() #17, !dbg !20803
  store i32 %13, i32* %call12, align 4, !dbg !20804, !ctir !27
  store %struct.tm_zone* null, %struct.tm_zone** %retval, align 8, !dbg !20805
  br label %return, !dbg !20805

if.end13:                                         ; preds = %if.end
  %14 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !20806
  store %struct.tm_zone* %14, %struct.tm_zone** %retval, align 8, !dbg !20807
  br label %return, !dbg !20807

return:                                           ; preds = %if.end13, %if.then10, %if.then8, %if.then
  %15 = load %struct.tm_zone*, %struct.tm_zone** %retval, align 8, !dbg !20808
  ret %struct.tm_zone* %15, !dbg !20808
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime_r(i64*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @save_abbr(%struct.tm_zone* %tz, %struct.tm* %tm) #0 !dbg !20809 {
entry:
  %retval = alloca i1, align 1
  %tz.addr = alloca %struct.tm_zone*, align 8
  %tm.addr = alloca %struct.tm*, align 8
  %zone = alloca i8*, align 8, !ctir !146
  %zone_copy = alloca i8*, align 8, !ctir !143
  %zone_size = alloca i64, align 8, !ctir !149
  %zone_used = alloca i64, align 8, !ctir !149
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20812, metadata !DIExpression()), !dbg !20813
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tm.addr, metadata !20814, metadata !DIExpression()), !dbg !20815
  call void @llvm.dbg.declare(metadata i8** %zone, metadata !20816, metadata !DIExpression()), !dbg !20817
  store i8* null, i8** %zone, align 8, !dbg !20817
  call void @llvm.dbg.declare(metadata i8** %zone_copy, metadata !20818, metadata !DIExpression()), !dbg !20819
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.513, i64 0, i64 0), i8** %zone_copy, align 8, !dbg !20819
  %0 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20820
  %tm_zone = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 10, !dbg !20821, !ctir !20702
  %1 = load i8*, i8** %tm_zone, align 8, !dbg !20821, !ctir !146
  store i8* %1, i8** %zone, align 8, !dbg !20822
  %2 = load i8*, i8** %zone, align 8, !dbg !20823
  %tobool = icmp ne i8* %2, null, !dbg !20823
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !20825

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20826
  %4 = bitcast %struct.tm* %3 to i8*, !dbg !20827
  %5 = load i8*, i8** %zone, align 8, !dbg !20828
  %cmp = icmp ule i8* %4, %5, !dbg !20829
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !20830

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i8*, i8** %zone, align 8, !dbg !20831
  %7 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20832
  %add.ptr = getelementptr inbounds %struct.tm, %struct.tm* %7, i64 1, !dbg !20833, !ctir !20702
  %8 = bitcast %struct.tm* %add.ptr to i8*, !dbg !20834
  %cmp1 = icmp ult i8* %6, %8, !dbg !20835
  br i1 %cmp1, label %if.then, label %if.end, !dbg !20836

if.then:                                          ; preds = %land.lhs.true, %entry
  store i1 true, i1* %retval, align 1, !dbg !20837
  br label %return, !dbg !20837

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %9 = load i8*, i8** %zone, align 8, !dbg !20838
  %10 = load i8, i8* %9, align 1, !dbg !20840, !ctir !147
  %tobool2 = icmp ne i8 %10, 0, !dbg !20840
  br i1 %tobool2, label %if.then3, label %if.end48, !dbg !20841

if.then3:                                         ; preds = %if.end
  %11 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20842
  %abbrs = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %11, i32 0, i32 2, !dbg !20844, !ctir !1737
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs, i64 0, i64 0, !dbg !20842, !ctir !469
  store i8* %arraydecay, i8** %zone_copy, align 8, !dbg !20845
  br label %while.cond, !dbg !20846

while.cond:                                       ; preds = %if.end47, %if.then3
  %12 = load i8*, i8** %zone_copy, align 8, !dbg !20847
  %13 = load i8*, i8** %zone, align 8, !dbg !20848
  %call = call i32 @strcmp(i8* %12, i8* %13) #16, !dbg !20849
  %cmp4 = icmp ne i32 %call, 0, !dbg !20850
  br i1 %cmp4, label %while.body, label %while.end, !dbg !20846

while.body:                                       ; preds = %while.cond
  %14 = load i8*, i8** %zone_copy, align 8, !dbg !20851
  %15 = load i8, i8* %14, align 1, !dbg !20854, !ctir !144
  %conv = sext i8 %15 to i32, !dbg !20854
  %tobool5 = icmp ne i32 %conv, 0, !dbg !20854
  br i1 %tobool5, label %if.end35, label %lor.lhs.false6, !dbg !20855

lor.lhs.false6:                                   ; preds = %while.body
  %16 = load i8*, i8** %zone_copy, align 8, !dbg !20856
  %17 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20857
  %abbrs7 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %17, i32 0, i32 2, !dbg !20858, !ctir !1737
  %arraydecay8 = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs7, i64 0, i64 0, !dbg !20857, !ctir !469
  %cmp9 = icmp eq i8* %16, %arraydecay8, !dbg !20859
  br i1 %cmp9, label %land.lhs.true11, label %if.then14, !dbg !20860

land.lhs.true11:                                  ; preds = %lor.lhs.false6
  %18 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20861
  %tz_is_set = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %18, i32 0, i32 1, !dbg !20862, !ctir !1737
  %19 = load i8, i8* %tz_is_set, align 8, !dbg !20862, !ctir !144
  %conv12 = sext i8 %19 to i32, !dbg !20861
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !20861
  br i1 %tobool13, label %if.end35, label %if.then14, !dbg !20863

if.then14:                                        ; preds = %land.lhs.true11, %lor.lhs.false6
  call void @llvm.dbg.declare(metadata i64* %zone_size, metadata !20864, metadata !DIExpression()), !dbg !20866
  %20 = load i8*, i8** %zone, align 8, !dbg !20867
  %call15 = call i64 @strlen(i8* %20) #16, !dbg !20868
  %add = add i64 %call15, 1, !dbg !20869
  store i64 %add, i64* %zone_size, align 8, !dbg !20866
  call void @llvm.dbg.declare(metadata i64* %zone_used, metadata !20870, metadata !DIExpression()), !dbg !20871
  %21 = load i8*, i8** %zone_copy, align 8, !dbg !20872
  %22 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20873
  %abbrs16 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %22, i32 0, i32 2, !dbg !20874, !ctir !1737
  %arraydecay17 = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs16, i64 0, i64 0, !dbg !20873, !ctir !469
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64, !dbg !20875
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay17 to i64, !dbg !20875
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !20875
  store i64 %sub.ptr.sub, i64* %zone_used, align 8, !dbg !20871
  %23 = load i64, i64* %zone_used, align 8, !dbg !20876
  %sub = sub i64 -1, %23, !dbg !20878
  %24 = load i64, i64* %zone_size, align 8, !dbg !20879
  %cmp18 = icmp ult i64 %sub, %24, !dbg !20880
  br i1 %cmp18, label %if.then20, label %if.end22, !dbg !20881

if.then20:                                        ; preds = %if.then14
  %call21 = call i32* @__errno_location() #17, !dbg !20882
  store i32 12, i32* %call21, align 4, !dbg !20884, !ctir !27
  store i1 false, i1* %retval, align 1, !dbg !20885
  br label %return, !dbg !20885

if.end22:                                         ; preds = %if.then14
  %25 = load i64, i64* %zone_used, align 8, !dbg !20886
  %26 = load i64, i64* %zone_size, align 8, !dbg !20888
  %add23 = add i64 %25, %26, !dbg !20889
  %cmp24 = icmp ult i64 %add23, 119, !dbg !20890
  br i1 %cmp24, label %if.then26, label %if.else, !dbg !20891

if.then26:                                        ; preds = %if.end22
  %27 = load i8*, i8** %zone_copy, align 8, !dbg !20892
  %28 = load i8*, i8** %zone, align 8, !dbg !20893
  %29 = load i64, i64* %zone_size, align 8, !dbg !20894
  call void @extend_abbrs(i8* %27, i8* %28, i64 %29), !dbg !20895
  br label %if.end34, !dbg !20895

if.else:                                          ; preds = %if.end22
  %30 = load i8*, i8** %zone, align 8, !dbg !20896
  %call27 = call %struct.tm_zone* @tzalloc(i8* %30), !dbg !20898
  %31 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20899
  %next = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %31, i32 0, i32 0, !dbg !20900, !ctir !1737
  store %struct.tm_zone* %call27, %struct.tm_zone** %next, align 8, !dbg !20901, !ctir !1736
  store %struct.tm_zone* %call27, %struct.tm_zone** %tz.addr, align 8, !dbg !20902
  %32 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20903
  %tobool28 = icmp ne %struct.tm_zone* %32, null, !dbg !20903
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !20905

if.then29:                                        ; preds = %if.else
  store i1 false, i1* %retval, align 1, !dbg !20906
  br label %return, !dbg !20906

if.end30:                                         ; preds = %if.else
  %33 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20907
  %tz_is_set31 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %33, i32 0, i32 1, !dbg !20908, !ctir !1737
  store i8 0, i8* %tz_is_set31, align 8, !dbg !20909, !ctir !144
  %34 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20910
  %abbrs32 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %34, i32 0, i32 2, !dbg !20911, !ctir !1737
  %arraydecay33 = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs32, i64 0, i64 0, !dbg !20910, !ctir !469
  store i8* %arraydecay33, i8** %zone_copy, align 8, !dbg !20912
  br label %if.end34

if.end34:                                         ; preds = %if.end30, %if.then26
  br label %while.end, !dbg !20913

if.end35:                                         ; preds = %land.lhs.true11, %while.body
  %35 = load i8*, i8** %zone_copy, align 8, !dbg !20914
  %call36 = call i64 @strlen(i8* %35) #16, !dbg !20915
  %add37 = add i64 %call36, 1, !dbg !20916
  %36 = load i8*, i8** %zone_copy, align 8, !dbg !20917
  %add.ptr38 = getelementptr inbounds i8, i8* %36, i64 %add37, !dbg !20917, !ctir !144
  store i8* %add.ptr38, i8** %zone_copy, align 8, !dbg !20917
  %37 = load i8*, i8** %zone_copy, align 8, !dbg !20918
  %38 = load i8, i8* %37, align 1, !dbg !20920, !ctir !144
  %tobool39 = icmp ne i8 %38, 0, !dbg !20920
  br i1 %tobool39, label %if.end47, label %land.lhs.true40, !dbg !20921

land.lhs.true40:                                  ; preds = %if.end35
  %39 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20922
  %next41 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %39, i32 0, i32 0, !dbg !20923, !ctir !1737
  %40 = load %struct.tm_zone*, %struct.tm_zone** %next41, align 8, !dbg !20923, !ctir !1736
  %tobool42 = icmp ne %struct.tm_zone* %40, null, !dbg !20922
  br i1 %tobool42, label %if.then43, label %if.end47, !dbg !20924

if.then43:                                        ; preds = %land.lhs.true40
  %41 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20925
  %next44 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %41, i32 0, i32 0, !dbg !20927, !ctir !1737
  %42 = load %struct.tm_zone*, %struct.tm_zone** %next44, align 8, !dbg !20927, !ctir !1736
  store %struct.tm_zone* %42, %struct.tm_zone** %tz.addr, align 8, !dbg !20928
  %43 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20929
  %abbrs45 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %43, i32 0, i32 2, !dbg !20930, !ctir !1737
  %arraydecay46 = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs45, i64 0, i64 0, !dbg !20929, !ctir !469
  store i8* %arraydecay46, i8** %zone_copy, align 8, !dbg !20931
  br label %if.end47, !dbg !20932

if.end47:                                         ; preds = %if.then43, %land.lhs.true40, %if.end35
  br label %while.cond, !dbg !20846, !llvm.loop !20933

while.end:                                        ; preds = %if.end34, %while.cond
  br label %if.end48, !dbg !20935

if.end48:                                         ; preds = %while.end, %if.end
  %44 = load i8*, i8** %zone_copy, align 8, !dbg !20936
  %45 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !20937
  %tm_zone49 = getelementptr inbounds %struct.tm, %struct.tm* %45, i32 0, i32 10, !dbg !20938, !ctir !20702
  store i8* %44, i8** %tm_zone49, align 8, !dbg !20939, !ctir !146
  store i1 true, i1* %retval, align 1, !dbg !20940
  br label %return, !dbg !20940

return:                                           ; preds = %if.end48, %if.then29, %if.then20, %if.then
  %46 = load i1, i1* %retval, align 1, !dbg !20941
  ret i1 %46, !dbg !20941
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @revert_tz(%struct.tm_zone* %tz) #0 !dbg !20942 {
entry:
  %retval = alloca i1, align 1
  %tz.addr = alloca %struct.tm_zone*, align 8
  %saved_errno = alloca i32, align 4, !ctir !27
  %ok = alloca i8, align 1, !ctir !141
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20945, metadata !DIExpression()), !dbg !20946
  %0 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20947
  %cmp = icmp eq %struct.tm_zone* %0, inttoptr (i64 1 to %struct.tm_zone*), !dbg !20949
  br i1 %cmp, label %if.then, label %if.else, !dbg !20950

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1, !dbg !20951
  br label %return, !dbg !20951

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !20952, metadata !DIExpression()), !dbg !20954
  %call = call i32* @__errno_location() #17, !dbg !20955
  %1 = load i32, i32* %call, align 4, !dbg !20955, !ctir !27
  store i32 %1, i32* %saved_errno, align 4, !dbg !20954
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !20956, metadata !DIExpression()), !dbg !20957
  %2 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20958
  %call1 = call zeroext i1 @change_env(%struct.tm_zone* %2), !dbg !20959
  %frombool = zext i1 %call1 to i8, !dbg !20957
  store i8 %frombool, i8* %ok, align 1, !dbg !20957
  %3 = load i8, i8* %ok, align 1, !dbg !20960
  %tobool = trunc i8 %3 to i1, !dbg !20960
  br i1 %tobool, label %if.end, label %if.then2, !dbg !20962

if.then2:                                         ; preds = %if.else
  %call3 = call i32* @__errno_location() #17, !dbg !20963
  %4 = load i32, i32* %call3, align 4, !dbg !20963, !ctir !27
  store i32 %4, i32* %saved_errno, align 4, !dbg !20964
  br label %if.end, !dbg !20965

if.end:                                           ; preds = %if.then2, %if.else
  %5 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20966
  call void @tzfree(%struct.tm_zone* %5), !dbg !20967
  %6 = load i32, i32* %saved_errno, align 4, !dbg !20968
  %call4 = call i32* @__errno_location() #17, !dbg !20969
  store i32 %6, i32* %call4, align 4, !dbg !20970, !ctir !27
  %7 = load i8, i8* %ok, align 1, !dbg !20971
  %tobool5 = trunc i8 %7 to i1, !dbg !20971
  store i1 %tobool5, i1* %retval, align 1, !dbg !20972
  br label %return, !dbg !20972

return:                                           ; preds = %if.end, %if.then
  %8 = load i1, i1* %retval, align 1, !dbg !20973
  ret i1 %8, !dbg !20973
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @change_env(%struct.tm_zone* %tz) #0 !dbg !20974 {
entry:
  %retval = alloca i1, align 1
  %tz.addr = alloca %struct.tm_zone*, align 8
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !20975, metadata !DIExpression()), !dbg !20976
  %0 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20977
  %tz_is_set = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %0, i32 0, i32 1, !dbg !20979, !ctir !1737
  %1 = load i8, i8* %tz_is_set, align 8, !dbg !20979, !ctir !144
  %conv = sext i8 %1 to i32, !dbg !20977
  %tobool = icmp ne i32 %conv, 0, !dbg !20977
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !20977

cond.true:                                        ; preds = %entry
  %2 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !20980
  %abbrs = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %2, i32 0, i32 2, !dbg !20981, !ctir !1737
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %abbrs, i64 0, i64 0, !dbg !20980, !ctir !469
  br label %cond.end, !dbg !20977

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !20977

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !20977
  %call = call i32 @setenv_TZ(i8* %cond), !dbg !20982
  %cmp = icmp ne i32 %call, 0, !dbg !20983
  br i1 %cmp, label %if.then, label %if.end, !dbg !20984

if.then:                                          ; preds = %cond.end
  store i1 false, i1* %retval, align 1, !dbg !20985
  br label %return, !dbg !20985

if.end:                                           ; preds = %cond.end
  call void @tzset() #13, !dbg !20986
  store i1 true, i1* %retval, align 1, !dbg !20987
  br label %return, !dbg !20987

return:                                           ; preds = %if.end, %if.then
  %3 = load i1, i1* %retval, align 1, !dbg !20988
  ret i1 %3, !dbg !20988
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setenv_TZ(i8* %tz) #0 !dbg !20989 {
entry:
  %tz.addr = alloca i8*, align 8
  store i8* %tz, i8** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tz.addr, metadata !20992, metadata !DIExpression()), !dbg !20993
  %0 = load i8*, i8** %tz.addr, align 8, !dbg !20994
  %tobool = icmp ne i8* %0, null, !dbg !20994
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !20994

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %tz.addr, align 8, !dbg !20995
  %call = call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.512, i64 0, i64 0), i8* %1, i32 1) #13, !dbg !20996
  br label %cond.end, !dbg !20994

cond.false:                                       ; preds = %entry
  %call1 = call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.512, i64 0, i64 0)) #13, !dbg !20997
  br label %cond.end, !dbg !20994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %call1, %cond.false ], !dbg !20994
  ret i32 %cond, !dbg !20998
}

; Function Attrs: nounwind
declare dso_local void @tzset() #2

; Function Attrs: nounwind
declare dso_local i32 @setenv(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @unsetenv(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @getenv_TZ() #0 !dbg !20999 {
entry:
  %call = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.512, i64 0, i64 0)) #13, !dbg !21000
  ret i8* %call, !dbg !21001
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @mktime_z(%struct.tm_zone* %tz, %struct.tm* nonnull %tm) #0 !dbg !21002 {
entry:
  %retval = alloca i64, align 8
  %tz.addr = alloca %struct.tm_zone*, align 8
  %tm.addr = alloca %struct.tm*, align 8
  %old_tz = alloca %struct.tm_zone*, align 8, !ctir !1735
  %t = alloca i64, align 8, !ctir !162
  %badtime = alloca i64, align 8, !ctir !162
  %tm_1 = alloca %struct.tm, align 8, !ctir !20702
  store %struct.tm_zone* %tz, %struct.tm_zone** %tz.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %tz.addr, metadata !21005, metadata !DIExpression()), !dbg !21006
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tm.addr, metadata !21007, metadata !DIExpression()), !dbg !21008
  %0 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !21009
  %tobool = icmp ne %struct.tm_zone* %0, null, !dbg !21009
  br i1 %tobool, label %if.else, label %if.then, !dbg !21011

if.then:                                          ; preds = %entry
  %1 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !21012
  %call = call i64 @timegm(%struct.tm* %1) #13, !dbg !21013
  store i64 %call, i64* %retval, align 8, !dbg !21014
  br label %return, !dbg !21014

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.tm_zone** %old_tz, metadata !21015, metadata !DIExpression()), !dbg !21017
  %2 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !21018
  %call1 = call %struct.tm_zone* @set_tz(%struct.tm_zone* %2), !dbg !21019
  store %struct.tm_zone* %call1, %struct.tm_zone** %old_tz, align 8, !dbg !21017
  %3 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !21020
  %tobool2 = icmp ne %struct.tm_zone* %3, null, !dbg !21020
  br i1 %tobool2, label %if.then3, label %if.end15, !dbg !21022

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %t, metadata !21023, metadata !DIExpression()), !dbg !21025
  %4 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !21026
  %call4 = call i64 @mktime(%struct.tm* %4) #13, !dbg !21027
  store i64 %call4, i64* %t, align 8, !dbg !21025
  call void @llvm.dbg.declare(metadata i64* %badtime, metadata !21028, metadata !DIExpression()), !dbg !21029
  store i64 -1, i64* %badtime, align 8, !dbg !21029
  call void @llvm.dbg.declare(metadata %struct.tm* %tm_1, metadata !21030, metadata !DIExpression()), !dbg !21031
  %5 = load i64, i64* %t, align 8, !dbg !21032
  %6 = load i64, i64* %badtime, align 8, !dbg !21034
  %cmp = icmp ne i64 %5, %6, !dbg !21035
  br i1 %cmp, label %land.lhs.true9, label %lor.lhs.false, !dbg !21036

lor.lhs.false:                                    ; preds = %if.then3
  %call5 = call %struct.tm* @localtime_r(i64* %t, %struct.tm* %tm_1) #13, !dbg !21037
  %tobool6 = icmp ne %struct.tm* %call5, null, !dbg !21037
  br i1 %tobool6, label %land.lhs.true, label %if.end, !dbg !21038

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !21039
  %call7 = call i32 @equal_tm(%struct.tm* %7, %struct.tm* %tm_1), !dbg !21040
  %tobool8 = icmp ne i32 %call7, 0, !dbg !21040
  br i1 %tobool8, label %land.lhs.true9, label %if.end, !dbg !21041

land.lhs.true9:                                   ; preds = %land.lhs.true, %if.then3
  %8 = load %struct.tm_zone*, %struct.tm_zone** %tz.addr, align 8, !dbg !21042
  %9 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !21043
  %call10 = call zeroext i1 @save_abbr(%struct.tm_zone* %8, %struct.tm* %9), !dbg !21044
  br i1 %call10, label %if.end, label %if.then11, !dbg !21045

if.then11:                                        ; preds = %land.lhs.true9
  %10 = load i64, i64* %badtime, align 8, !dbg !21046
  store i64 %10, i64* %t, align 8, !dbg !21047
  br label %if.end, !dbg !21048

if.end:                                           ; preds = %if.then11, %land.lhs.true9, %land.lhs.true, %lor.lhs.false
  %11 = load %struct.tm_zone*, %struct.tm_zone** %old_tz, align 8, !dbg !21049
  %call12 = call zeroext i1 @revert_tz(%struct.tm_zone* %11), !dbg !21051
  br i1 %call12, label %if.then13, label %if.end14, !dbg !21052

if.then13:                                        ; preds = %if.end
  %12 = load i64, i64* %t, align 8, !dbg !21053
  store i64 %12, i64* %retval, align 8, !dbg !21054
  br label %return, !dbg !21054

if.end14:                                         ; preds = %if.end
  br label %if.end15, !dbg !21055

if.end15:                                         ; preds = %if.end14, %if.else
  store i64 -1, i64* %retval, align 8, !dbg !21056
  br label %return, !dbg !21056

return:                                           ; preds = %if.end15, %if.then13, %if.then
  %13 = load i64, i64* %retval, align 8, !dbg !21057
  ret i64 %13, !dbg !21057
}

; Function Attrs: nounwind
declare dso_local i64 @timegm(%struct.tm*) #2

; Function Attrs: nounwind
declare dso_local i64 @mktime(%struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @equal_tm(%struct.tm* %a, %struct.tm* %b) #0 !dbg !21058 {
entry:
  %a.addr = alloca %struct.tm*, align 8
  %b.addr = alloca %struct.tm*, align 8
  store %struct.tm* %a, %struct.tm** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %a.addr, metadata !21063, metadata !DIExpression()), !dbg !21064
  store %struct.tm* %b, %struct.tm** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %b.addr, metadata !21065, metadata !DIExpression()), !dbg !21066
  %0 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21067
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 0, !dbg !21068, !ctir !21062
  %1 = load i32, i32* %tm_sec, align 8, !dbg !21068, !ctir !27
  %2 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21069
  %tm_sec1 = getelementptr inbounds %struct.tm, %struct.tm* %2, i32 0, i32 0, !dbg !21070, !ctir !21062
  %3 = load i32, i32* %tm_sec1, align 8, !dbg !21070, !ctir !27
  %xor = xor i32 %1, %3, !dbg !21071
  %4 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21072
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 1, !dbg !21073, !ctir !21062
  %5 = load i32, i32* %tm_min, align 4, !dbg !21073, !ctir !27
  %6 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21074
  %tm_min2 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 1, !dbg !21075, !ctir !21062
  %7 = load i32, i32* %tm_min2, align 4, !dbg !21075, !ctir !27
  %xor3 = xor i32 %5, %7, !dbg !21076
  %or = or i32 %xor, %xor3, !dbg !21077
  %8 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21078
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 2, !dbg !21079, !ctir !21062
  %9 = load i32, i32* %tm_hour, align 8, !dbg !21079, !ctir !27
  %10 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21080
  %tm_hour4 = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 2, !dbg !21081, !ctir !21062
  %11 = load i32, i32* %tm_hour4, align 8, !dbg !21081, !ctir !27
  %xor5 = xor i32 %9, %11, !dbg !21082
  %or6 = or i32 %or, %xor5, !dbg !21083
  %12 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21084
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 3, !dbg !21085, !ctir !21062
  %13 = load i32, i32* %tm_mday, align 4, !dbg !21085, !ctir !27
  %14 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21086
  %tm_mday7 = getelementptr inbounds %struct.tm, %struct.tm* %14, i32 0, i32 3, !dbg !21087, !ctir !21062
  %15 = load i32, i32* %tm_mday7, align 4, !dbg !21087, !ctir !27
  %xor8 = xor i32 %13, %15, !dbg !21088
  %or9 = or i32 %or6, %xor8, !dbg !21089
  %16 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21090
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 4, !dbg !21091, !ctir !21062
  %17 = load i32, i32* %tm_mon, align 8, !dbg !21091, !ctir !27
  %18 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21092
  %tm_mon10 = getelementptr inbounds %struct.tm, %struct.tm* %18, i32 0, i32 4, !dbg !21093, !ctir !21062
  %19 = load i32, i32* %tm_mon10, align 8, !dbg !21093, !ctir !27
  %xor11 = xor i32 %17, %19, !dbg !21094
  %or12 = or i32 %or9, %xor11, !dbg !21095
  %20 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21096
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %20, i32 0, i32 5, !dbg !21097, !ctir !21062
  %21 = load i32, i32* %tm_year, align 4, !dbg !21097, !ctir !27
  %22 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21098
  %tm_year13 = getelementptr inbounds %struct.tm, %struct.tm* %22, i32 0, i32 5, !dbg !21099, !ctir !21062
  %23 = load i32, i32* %tm_year13, align 4, !dbg !21099, !ctir !27
  %xor14 = xor i32 %21, %23, !dbg !21100
  %or15 = or i32 %or12, %xor14, !dbg !21101
  %24 = load %struct.tm*, %struct.tm** %a.addr, align 8, !dbg !21102
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %24, i32 0, i32 8, !dbg !21103, !ctir !21062
  %25 = load i32, i32* %tm_isdst, align 8, !dbg !21103, !ctir !27
  %26 = load %struct.tm*, %struct.tm** %b.addr, align 8, !dbg !21104
  %tm_isdst16 = getelementptr inbounds %struct.tm, %struct.tm* %26, i32 0, i32 8, !dbg !21105, !ctir !21062
  %27 = load i32, i32* %tm_isdst16, align 8, !dbg !21105, !ctir !27
  %call = call zeroext i1 @isdst_differ(i32 %25, i32 %27), !dbg !21106
  %conv = zext i1 %call to i32, !dbg !21106
  %or17 = or i32 %or15, %conv, !dbg !21107
  %tobool = icmp ne i32 %or17, 0, !dbg !21108
  %lnot = xor i1 %tobool, true, !dbg !21108
  %lnot.ext = zext i1 %lnot to i32, !dbg !21108
  ret i32 %lnot.ext, !dbg !21109
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @isdst_differ(i32 %a, i32 %b) #0 !dbg !21110 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !21113, metadata !DIExpression()), !dbg !21114
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !21115, metadata !DIExpression()), !dbg !21116
  %0 = load i32, i32* %a.addr, align 4, !dbg !21117
  %tobool = icmp ne i32 %0, 0, !dbg !21118
  %lnot = xor i1 %tobool, true, !dbg !21118
  %lnot.ext = zext i1 %lnot to i32, !dbg !21118
  %1 = load i32, i32* %b.addr, align 4, !dbg !21119
  %tobool1 = icmp ne i32 %1, 0, !dbg !21120
  %lnot2 = xor i1 %tobool1, true, !dbg !21120
  %lnot.ext3 = zext i1 %lnot2 to i32, !dbg !21120
  %cmp = icmp ne i32 %lnot.ext, %lnot.ext3, !dbg !21121
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !21122

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !21123
  %cmp4 = icmp sle i32 0, %2, !dbg !21124
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !21125

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32, i32* %b.addr, align 4, !dbg !21126
  %cmp5 = icmp sle i32 0, %3, !dbg !21127
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !21128
  ret i1 %4, !dbg !21129
}

; Function Attrs: noinline nounwind optnone readnone uwtable
define dso_local zeroext i1 @acl_errno_valid(i32 %errnum) #12 !dbg !21130 {
entry:
  %retval = alloca i1, align 1
  %errnum.addr = alloca i32, align 4
  store i32 %errnum, i32* %errnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %errnum.addr, metadata !21132, metadata !DIExpression()), !dbg !21133
  %0 = load i32, i32* %errnum.addr, align 4, !dbg !21134
  switch i32 %0, label %sw.default [
    i32 16, label %sw.bb
    i32 22, label %sw.bb1
    i32 38, label %sw.bb2
    i32 95, label %sw.bb3
  ], !dbg !21135

sw.bb:                                            ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !21136
  br label %return, !dbg !21136

sw.bb1:                                           ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !21138
  br label %return, !dbg !21138

sw.bb2:                                           ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !21139
  br label %return, !dbg !21139

sw.bb3:                                           ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !21140
  br label %return, !dbg !21140

sw.default:                                       ; preds = %entry
  store i1 true, i1* %retval, align 1, !dbg !21141
  br label %return, !dbg !21141

return:                                           ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !21142
  ret i1 %1, !dbg !21142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotl64(i64 %x, i32 %n) #0 !dbg !21143 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !21150, metadata !DIExpression()), !dbg !21151
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21152, metadata !DIExpression()), !dbg !21153
  %0 = load i64, i64* %x.addr, align 8, !dbg !21154
  %1 = load i32, i32* %n.addr, align 4, !dbg !21155
  %sh_prom = zext i32 %1 to i64, !dbg !21156
  %shl = shl i64 %0, %sh_prom, !dbg !21156
  %2 = load i64, i64* %x.addr, align 8, !dbg !21157
  %3 = load i32, i32* %n.addr, align 4, !dbg !21158
  %sub = sub nsw i32 64, %3, !dbg !21159
  %sh_prom1 = zext i32 %sub to i64, !dbg !21160
  %shr = lshr i64 %2, %sh_prom1, !dbg !21160
  %or = or i64 %shl, %shr, !dbg !21161
  ret i64 %or, !dbg !21162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotr64(i64 %x, i32 %n) #0 !dbg !21163 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !21164, metadata !DIExpression()), !dbg !21165
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21166, metadata !DIExpression()), !dbg !21167
  %0 = load i64, i64* %x.addr, align 8, !dbg !21168
  %1 = load i32, i32* %n.addr, align 4, !dbg !21169
  %sh_prom = zext i32 %1 to i64, !dbg !21170
  %shr = lshr i64 %0, %sh_prom, !dbg !21170
  %2 = load i64, i64* %x.addr, align 8, !dbg !21171
  %3 = load i32, i32* %n.addr, align 4, !dbg !21172
  %sub = sub nsw i32 64, %3, !dbg !21173
  %sh_prom1 = zext i32 %sub to i64, !dbg !21174
  %shl = shl i64 %2, %sh_prom1, !dbg !21174
  %or = or i64 %shr, %shl, !dbg !21175
  ret i64 %or, !dbg !21176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rotl32(i32 %x, i32 %n) #0 !dbg !21177 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !21181, metadata !DIExpression()), !dbg !21182
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21183, metadata !DIExpression()), !dbg !21184
  %0 = load i32, i32* %x.addr, align 4, !dbg !21185
  %1 = load i32, i32* %n.addr, align 4, !dbg !21186
  %shl = shl i32 %0, %1, !dbg !21187
  %2 = load i32, i32* %x.addr, align 4, !dbg !21188
  %3 = load i32, i32* %n.addr, align 4, !dbg !21189
  %sub = sub nsw i32 32, %3, !dbg !21190
  %shr = lshr i32 %2, %sub, !dbg !21191
  %or = or i32 %shl, %shr, !dbg !21192
  ret i32 %or, !dbg !21193
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rotr32(i32 %x, i32 %n) #0 !dbg !21194 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !21195, metadata !DIExpression()), !dbg !21196
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21197, metadata !DIExpression()), !dbg !21198
  %0 = load i32, i32* %x.addr, align 4, !dbg !21199
  %1 = load i32, i32* %n.addr, align 4, !dbg !21200
  %shr = lshr i32 %0, %1, !dbg !21201
  %2 = load i32, i32* %x.addr, align 4, !dbg !21202
  %3 = load i32, i32* %n.addr, align 4, !dbg !21203
  %sub = sub nsw i32 32, %3, !dbg !21204
  %shl = shl i32 %2, %sub, !dbg !21205
  %or = or i32 %shr, %shl, !dbg !21206
  ret i32 %or, !dbg !21207
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotl_sz(i64 %x, i32 %n) #0 !dbg !21208 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !21211, metadata !DIExpression()), !dbg !21212
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21213, metadata !DIExpression()), !dbg !21214
  %0 = load i64, i64* %x.addr, align 8, !dbg !21215
  %1 = load i32, i32* %n.addr, align 4, !dbg !21216
  %sh_prom = zext i32 %1 to i64, !dbg !21217
  %shl = shl i64 %0, %sh_prom, !dbg !21217
  %2 = load i64, i64* %x.addr, align 8, !dbg !21218
  %3 = load i32, i32* %n.addr, align 4, !dbg !21219
  %conv = sext i32 %3 to i64, !dbg !21219
  %sub = sub i64 64, %conv, !dbg !21220
  %shr = lshr i64 %2, %sub, !dbg !21221
  %or = or i64 %shl, %shr, !dbg !21222
  ret i64 %or, !dbg !21223
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotr_sz(i64 %x, i32 %n) #0 !dbg !21224 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !21225, metadata !DIExpression()), !dbg !21226
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21227, metadata !DIExpression()), !dbg !21228
  %0 = load i64, i64* %x.addr, align 8, !dbg !21229
  %1 = load i32, i32* %n.addr, align 4, !dbg !21230
  %sh_prom = zext i32 %1 to i64, !dbg !21231
  %shr = lshr i64 %0, %sh_prom, !dbg !21231
  %2 = load i64, i64* %x.addr, align 8, !dbg !21232
  %3 = load i32, i32* %n.addr, align 4, !dbg !21233
  %conv = sext i32 %3 to i64, !dbg !21233
  %sub = sub i64 64, %conv, !dbg !21234
  %shl = shl i64 %2, %sub, !dbg !21235
  %or = or i64 %shr, %shl, !dbg !21236
  ret i64 %or, !dbg !21237
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @rotl16(i16 zeroext %x, i32 %n) #0 !dbg !21238 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %x.addr, metadata !21243, metadata !DIExpression()), !dbg !21244
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21245, metadata !DIExpression()), !dbg !21246
  %0 = load i16, i16* %x.addr, align 2, !dbg !21247
  %conv = zext i16 %0 to i32, !dbg !21247
  %1 = load i32, i32* %n.addr, align 4, !dbg !21248
  %shl = shl i32 %conv, %1, !dbg !21249
  %2 = load i16, i16* %x.addr, align 2, !dbg !21250
  %conv1 = zext i16 %2 to i32, !dbg !21250
  %3 = load i32, i32* %n.addr, align 4, !dbg !21251
  %sub = sub nsw i32 16, %3, !dbg !21252
  %shr = ashr i32 %conv1, %sub, !dbg !21253
  %or = or i32 %shl, %shr, !dbg !21254
  %and = and i32 %or, 65535, !dbg !21255
  %conv2 = trunc i32 %and to i16, !dbg !21256
  ret i16 %conv2, !dbg !21257
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @rotr16(i16 zeroext %x, i32 %n) #0 !dbg !21258 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %x.addr, metadata !21259, metadata !DIExpression()), !dbg !21260
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21261, metadata !DIExpression()), !dbg !21262
  %0 = load i16, i16* %x.addr, align 2, !dbg !21263
  %conv = zext i16 %0 to i32, !dbg !21263
  %1 = load i32, i32* %n.addr, align 4, !dbg !21264
  %shr = ashr i32 %conv, %1, !dbg !21265
  %2 = load i16, i16* %x.addr, align 2, !dbg !21266
  %conv1 = zext i16 %2 to i32, !dbg !21266
  %3 = load i32, i32* %n.addr, align 4, !dbg !21267
  %sub = sub nsw i32 16, %3, !dbg !21268
  %shl = shl i32 %conv1, %sub, !dbg !21269
  %or = or i32 %shr, %shl, !dbg !21270
  %and = and i32 %or, 65535, !dbg !21271
  %conv2 = trunc i32 %and to i16, !dbg !21272
  ret i16 %conv2, !dbg !21273
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @rotl8(i8 zeroext %x, i32 %n) #0 !dbg !21274 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !21279, metadata !DIExpression()), !dbg !21280
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21281, metadata !DIExpression()), !dbg !21282
  %0 = load i8, i8* %x.addr, align 1, !dbg !21283
  %conv = zext i8 %0 to i32, !dbg !21283
  %1 = load i32, i32* %n.addr, align 4, !dbg !21284
  %shl = shl i32 %conv, %1, !dbg !21285
  %2 = load i8, i8* %x.addr, align 1, !dbg !21286
  %conv1 = zext i8 %2 to i32, !dbg !21286
  %3 = load i32, i32* %n.addr, align 4, !dbg !21287
  %sub = sub nsw i32 8, %3, !dbg !21288
  %shr = ashr i32 %conv1, %sub, !dbg !21289
  %or = or i32 %shl, %shr, !dbg !21290
  %and = and i32 %or, 255, !dbg !21291
  %conv2 = trunc i32 %and to i8, !dbg !21292
  ret i8 %conv2, !dbg !21293
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @rotr8(i8 zeroext %x, i32 %n) #0 !dbg !21294 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !21295, metadata !DIExpression()), !dbg !21296
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !21297, metadata !DIExpression()), !dbg !21298
  %0 = load i8, i8* %x.addr, align 1, !dbg !21299
  %conv = zext i8 %0 to i32, !dbg !21299
  %1 = load i32, i32* %n.addr, align 4, !dbg !21300
  %shr = ashr i32 %conv, %1, !dbg !21301
  %2 = load i8, i8* %x.addr, align 1, !dbg !21302
  %conv1 = zext i8 %2 to i32, !dbg !21302
  %3 = load i32, i32* %n.addr, align 4, !dbg !21303
  %sub = sub nsw i32 8, %3, !dbg !21304
  %shl = shl i32 %conv1, %sub, !dbg !21305
  %or = or i32 %shr, %shl, !dbg !21306
  %and = and i32 %or, 255, !dbg !21307
  %conv2 = trunc i32 %and to i8, !dbg !21308
  ret i8 %conv2, !dbg !21309
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @c_strcasecmp(i8* %s1, i8* %s2) #9 !dbg !21310 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %p1 = alloca i8*, align 8, !ctir !1521
  %p2 = alloca i8*, align 8, !ctir !1521
  %c1 = alloca i8, align 1, !ctir !737
  %c2 = alloca i8, align 1, !ctir !737
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !21312, metadata !DIExpression()), !dbg !21313
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !21314, metadata !DIExpression()), !dbg !21315
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !21316, metadata !DIExpression()), !dbg !21317
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !21318
  store i8* %0, i8** %p1, align 8, !dbg !21317
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !21319, metadata !DIExpression()), !dbg !21320
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !21321
  store i8* %1, i8** %p2, align 8, !dbg !21320
  call void @llvm.dbg.declare(metadata i8* %c1, metadata !21322, metadata !DIExpression()), !dbg !21323
  call void @llvm.dbg.declare(metadata i8* %c2, metadata !21324, metadata !DIExpression()), !dbg !21325
  %2 = load i8*, i8** %p1, align 8, !dbg !21326
  %3 = load i8*, i8** %p2, align 8, !dbg !21328
  %cmp = icmp eq i8* %2, %3, !dbg !21329
  br i1 %cmp, label %if.then, label %if.end, !dbg !21330

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !21331
  br label %return, !dbg !21331

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !21332

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load i8*, i8** %p1, align 8, !dbg !21333
  %5 = load i8, i8* %4, align 1, !dbg !21335, !ctir !1522
  %conv = zext i8 %5 to i32, !dbg !21335
  %call = call i32 @c_tolower(i32 %conv), !dbg !21336
  %conv1 = trunc i32 %call to i8, !dbg !21336
  store i8 %conv1, i8* %c1, align 1, !dbg !21337
  %6 = load i8*, i8** %p2, align 8, !dbg !21338
  %7 = load i8, i8* %6, align 1, !dbg !21339, !ctir !1522
  %conv2 = zext i8 %7 to i32, !dbg !21339
  %call3 = call i32 @c_tolower(i32 %conv2), !dbg !21340
  %conv4 = trunc i32 %call3 to i8, !dbg !21340
  store i8 %conv4, i8* %c2, align 1, !dbg !21341
  %8 = load i8, i8* %c1, align 1, !dbg !21342
  %conv5 = zext i8 %8 to i32, !dbg !21342
  %cmp6 = icmp eq i32 %conv5, 0, !dbg !21344
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !21345

if.then8:                                         ; preds = %do.body
  br label %do.end, !dbg !21346

if.end9:                                          ; preds = %do.body
  %9 = load i8*, i8** %p1, align 8, !dbg !21347
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !21347, !ctir !1522
  store i8* %incdec.ptr, i8** %p1, align 8, !dbg !21347
  %10 = load i8*, i8** %p2, align 8, !dbg !21348
  %incdec.ptr10 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !21348, !ctir !1522
  store i8* %incdec.ptr10, i8** %p2, align 8, !dbg !21348
  br label %do.cond, !dbg !21349

do.cond:                                          ; preds = %if.end9
  %11 = load i8, i8* %c1, align 1, !dbg !21350
  %conv11 = zext i8 %11 to i32, !dbg !21350
  %12 = load i8, i8* %c2, align 1, !dbg !21351
  %conv12 = zext i8 %12 to i32, !dbg !21351
  %cmp13 = icmp eq i32 %conv11, %conv12, !dbg !21352
  br i1 %cmp13, label %do.body, label %do.end, !dbg !21349, !llvm.loop !21353

do.end:                                           ; preds = %do.cond, %if.then8
  %13 = load i8, i8* %c1, align 1, !dbg !21355
  %conv15 = zext i8 %13 to i32, !dbg !21355
  %14 = load i8, i8* %c2, align 1, !dbg !21357
  %conv16 = zext i8 %14 to i32, !dbg !21357
  %sub = sub nsw i32 %conv15, %conv16, !dbg !21358
  store i32 %sub, i32* %retval, align 4, !dbg !21359
  br label %return, !dbg !21359

return:                                           ; preds = %do.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !21360
  ret i32 %15, !dbg !21360
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @close_stream(%struct._IO_FILE* %stream) #0 !dbg !21361 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %some_pending = alloca i8, align 1, !ctir !1757
  %prev_fail = alloca i8, align 1, !ctir !1757
  %fclose_fail = alloca i8, align 1, !ctir !1757
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !21399, metadata !DIExpression()), !dbg !21400
  call void @llvm.dbg.declare(metadata i8* %some_pending, metadata !21401, metadata !DIExpression()), !dbg !21402
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21403
  %call = call i64 @__fpending(%struct._IO_FILE* %0) #13, !dbg !21404
  %cmp = icmp ne i64 %call, 0, !dbg !21405
  %frombool = zext i1 %cmp to i8, !dbg !21402
  store i8 %frombool, i8* %some_pending, align 1, !dbg !21402
  call void @llvm.dbg.declare(metadata i8* %prev_fail, metadata !21406, metadata !DIExpression()), !dbg !21407
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21408
  %call1 = call i32 @ferror_unlocked(%struct._IO_FILE* %1) #13, !dbg !21408
  %cmp2 = icmp ne i32 %call1, 0, !dbg !21409
  %frombool3 = zext i1 %cmp2 to i8, !dbg !21407
  store i8 %frombool3, i8* %prev_fail, align 1, !dbg !21407
  call void @llvm.dbg.declare(metadata i8* %fclose_fail, metadata !21410, metadata !DIExpression()), !dbg !21411
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21412
  %call4 = call i32 @rpl_fclose(%struct._IO_FILE* %2), !dbg !21413
  %cmp5 = icmp ne i32 %call4, 0, !dbg !21414
  %frombool6 = zext i1 %cmp5 to i8, !dbg !21411
  store i8 %frombool6, i8* %fclose_fail, align 1, !dbg !21411
  %3 = load i8, i8* %prev_fail, align 1, !dbg !21415
  %tobool = trunc i8 %3 to i1, !dbg !21415
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !21417

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, i8* %fclose_fail, align 1, !dbg !21418
  %tobool7 = trunc i8 %4 to i1, !dbg !21418
  br i1 %tobool7, label %land.lhs.true, label %if.end15, !dbg !21419

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i8, i8* %some_pending, align 1, !dbg !21420
  %tobool8 = trunc i8 %5 to i1, !dbg !21420
  br i1 %tobool8, label %if.then, label %lor.lhs.false9, !dbg !21421

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %call10 = call i32* @__errno_location() #17, !dbg !21422
  %6 = load i32, i32* %call10, align 4, !dbg !21422, !ctir !27
  %cmp11 = icmp ne i32 %6, 9, !dbg !21423
  br i1 %cmp11, label %if.then, label %if.end15, !dbg !21424

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %entry
  %7 = load i8, i8* %fclose_fail, align 1, !dbg !21425
  %tobool12 = trunc i8 %7 to i1, !dbg !21425
  br i1 %tobool12, label %if.end, label %if.then13, !dbg !21428

if.then13:                                        ; preds = %if.then
  %call14 = call i32* @__errno_location() #17, !dbg !21429
  store i32 0, i32* %call14, align 4, !dbg !21430, !ctir !27
  br label %if.end, !dbg !21429

if.end:                                           ; preds = %if.then13, %if.then
  store i32 -1, i32* %retval, align 4, !dbg !21431
  br label %return, !dbg !21431

if.end15:                                         ; preds = %lor.lhs.false9, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !21432
  br label %return, !dbg !21432

return:                                           ; preds = %if.end15, %if.end
  %8 = load i32, i32* %retval, align 4, !dbg !21433
  ret i32 %8, !dbg !21433
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @dir_name(i8* %file) #0 !dbg !21434 {
entry:
  %file.addr = alloca i8*, align 8
  %result = alloca i8*, align 8, !ctir !143
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !21436, metadata !DIExpression()), !dbg !21437
  call void @llvm.dbg.declare(metadata i8** %result, metadata !21438, metadata !DIExpression()), !dbg !21439
  %0 = load i8*, i8** %file.addr, align 8, !dbg !21440
  %call = call i8* @mdir_name(i8* %0), !dbg !21441
  store i8* %call, i8** %result, align 8, !dbg !21439
  %1 = load i8*, i8** %result, align 8, !dbg !21442
  %tobool = icmp ne i8* %1, null, !dbg !21442
  br i1 %tobool, label %if.end, label %if.then, !dbg !21444

if.then:                                          ; preds = %entry
  call void @xalloc_die() #14, !dbg !21445
  unreachable, !dbg !21445

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %result, align 8, !dbg !21446
  ret i8* %2, !dbg !21447
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_pjw(i8* %x, i64 %tablesize) #9 !dbg !21448 {
entry:
  %x.addr = alloca i8*, align 8
  %tablesize.addr = alloca i64, align 8
  %s = alloca i8*, align 8, !ctir !146
  %h = alloca i64, align 8, !ctir !149
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !21450, metadata !DIExpression()), !dbg !21451
  store i64 %tablesize, i64* %tablesize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %tablesize.addr, metadata !21452, metadata !DIExpression()), !dbg !21453
  call void @llvm.dbg.declare(metadata i8** %s, metadata !21454, metadata !DIExpression()), !dbg !21455
  call void @llvm.dbg.declare(metadata i64* %h, metadata !21456, metadata !DIExpression()), !dbg !21457
  store i64 0, i64* %h, align 8, !dbg !21457
  %0 = load i8*, i8** %x.addr, align 8, !dbg !21458
  store i8* %0, i8** %s, align 8, !dbg !21460
  br label %for.cond, !dbg !21461

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %s, align 8, !dbg !21462
  %2 = load i8, i8* %1, align 1, !dbg !21464, !ctir !147
  %tobool = icmp ne i8 %2, 0, !dbg !21465
  br i1 %tobool, label %for.body, label %for.end, !dbg !21465

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %s, align 8, !dbg !21466
  %4 = load i8, i8* %3, align 1, !dbg !21467, !ctir !147
  %conv = sext i8 %4 to i64, !dbg !21467
  %5 = load i64, i64* %h, align 8, !dbg !21468
  %shl = shl i64 %5, 9, !dbg !21469
  %6 = load i64, i64* %h, align 8, !dbg !21470
  %shr = lshr i64 %6, 55, !dbg !21471
  %or = or i64 %shl, %shr, !dbg !21472
  %add = add i64 %conv, %or, !dbg !21473
  store i64 %add, i64* %h, align 8, !dbg !21474
  br label %for.inc, !dbg !21475

for.inc:                                          ; preds = %for.body
  %7 = load i8*, i8** %s, align 8, !dbg !21476
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !21476, !ctir !147
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !21476
  br label %for.cond, !dbg !21477, !llvm.loop !21478

for.end:                                          ; preds = %for.cond
  %8 = load i64, i64* %h, align 8, !dbg !21480
  %9 = load i64, i64* %tablesize.addr, align 8, !dbg !21481
  %rem = urem i64 %8, %9, !dbg !21482
  ret i64 %rem, !dbg !21483
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @locale_charset() #0 !dbg !21484 {
entry:
  %codeset = alloca i8*, align 8, !ctir !146
  call void @llvm.dbg.declare(metadata i8** %codeset, metadata !21487, metadata !DIExpression()), !dbg !21488
  %call = call i8* @nl_langinfo(i32 14) #13, !dbg !21489
  store i8* %call, i8** %codeset, align 8, !dbg !21490
  %0 = load i8*, i8** %codeset, align 8, !dbg !21491
  %cmp = icmp eq i8* %0, null, !dbg !21493
  br i1 %cmp, label %if.then, label %if.end, !dbg !21494

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.530, i64 0, i64 0), i8** %codeset, align 8, !dbg !21495
  br label %if.end, !dbg !21496

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %codeset, align 8, !dbg !21497
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !21497, !ctir !146
  %2 = load i8, i8* %arrayidx, align 1, !dbg !21497
  %conv = sext i8 %2 to i32, !dbg !21497
  %cmp1 = icmp eq i32 %conv, 0, !dbg !21501
  br i1 %cmp1, label %if.then3, label %if.end4, !dbg !21502

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.531, i64 0, i64 0), i8** %codeset, align 8, !dbg !21503
  br label %if.end4, !dbg !21504

if.end4:                                          ; preds = %if.then3, %if.end
  %3 = load i8*, i8** %codeset, align 8, !dbg !21505
  ret i8* %3, !dbg !21506
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fclose(%struct._IO_FILE* nonnull %fp) #0 !dbg !21507 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %saved_errno = alloca i32, align 4, !ctir !27
  %fd = alloca i32, align 4, !ctir !27
  %result = alloca i32, align 4, !ctir !27
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !21545, metadata !DIExpression()), !dbg !21546
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !21547, metadata !DIExpression()), !dbg !21548
  store i32 0, i32* %saved_errno, align 4, !dbg !21548
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !21549, metadata !DIExpression()), !dbg !21550
  call void @llvm.dbg.declare(metadata i32* %result, metadata !21551, metadata !DIExpression()), !dbg !21552
  store i32 0, i32* %result, align 4, !dbg !21552
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21553
  %call = call i32 @fileno(%struct._IO_FILE* %0) #13, !dbg !21554
  store i32 %call, i32* %fd, align 4, !dbg !21555
  %1 = load i32, i32* %fd, align 4, !dbg !21556
  %cmp = icmp slt i32 %1, 0, !dbg !21558
  br i1 %cmp, label %if.then, label %if.end, !dbg !21559

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21560
  %call1 = call i32 @fclose(%struct._IO_FILE* %2), !dbg !21561
  store i32 %call1, i32* %retval, align 4, !dbg !21562
  br label %return, !dbg !21562

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21563
  %call2 = call i32 @__freading(%struct._IO_FILE* %3) #13, !dbg !21563
  %cmp3 = icmp ne i32 %call2, 0, !dbg !21563
  br i1 %cmp3, label %lor.lhs.false, label %land.lhs.true, !dbg !21565

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21566
  %call4 = call i32 @fileno(%struct._IO_FILE* %4) #13, !dbg !21567
  %call5 = call i64 @lseek(i32 %call4, i64 0, i32 1) #13, !dbg !21568
  %cmp6 = icmp ne i64 %call5, -1, !dbg !21569
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !21570

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21571
  %call7 = call i32 @rpl_fflush(%struct._IO_FILE* %5), !dbg !21572
  %tobool = icmp ne i32 %call7, 0, !dbg !21572
  br i1 %tobool, label %if.then8, label %if.end10, !dbg !21573

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call i32* @__errno_location() #17, !dbg !21574
  %6 = load i32, i32* %call9, align 4, !dbg !21574, !ctir !27
  store i32 %6, i32* %saved_errno, align 4, !dbg !21575
  br label %if.end10, !dbg !21576

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %lor.lhs.false
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21577
  %call11 = call i32 @fclose(%struct._IO_FILE* %7), !dbg !21578
  store i32 %call11, i32* %result, align 4, !dbg !21579
  %8 = load i32, i32* %saved_errno, align 4, !dbg !21580
  %cmp12 = icmp ne i32 %8, 0, !dbg !21582
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !21583

if.then13:                                        ; preds = %if.end10
  %9 = load i32, i32* %saved_errno, align 4, !dbg !21584
  %call14 = call i32* @__errno_location() #17, !dbg !21586
  store i32 %9, i32* %call14, align 4, !dbg !21587, !ctir !27
  store i32 -1, i32* %result, align 4, !dbg !21588
  br label %if.end15, !dbg !21589

if.end15:                                         ; preds = %if.then13, %if.end10
  %10 = load i32, i32* %result, align 4, !dbg !21590
  store i32 %10, i32* %retval, align 4, !dbg !21591
  br label %return, !dbg !21591

return:                                           ; preds = %if.end15, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !21592
  ret i32 %11, !dbg !21592
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fflush(%struct._IO_FILE* %stream) #0 !dbg !21593 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !21598, metadata !DIExpression()), !dbg !21599
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21600
  %cmp = icmp eq %struct._IO_FILE* %0, null, !dbg !21602
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !21603

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21604
  %call = call i32 @__freading(%struct._IO_FILE* %1) #13, !dbg !21604
  %cmp1 = icmp ne i32 %call, 0, !dbg !21604
  br i1 %cmp1, label %if.end, label %if.then, !dbg !21605

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21606
  %call2 = call i32 @fflush(%struct._IO_FILE* %2), !dbg !21607
  store i32 %call2, i32* %retval, align 4, !dbg !21608
  br label %return, !dbg !21608

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21609
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %3), !dbg !21610
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !21611
  %call3 = call i32 @fflush(%struct._IO_FILE* %4), !dbg !21612
  store i32 %call3, i32* %retval, align 4, !dbg !21613
  br label %return, !dbg !21613

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !21614
  ret i32 %5, !dbg !21614
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %fp) #0 !dbg !21615 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !21618, metadata !DIExpression()), !dbg !21619
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21620
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 0, !dbg !21622, !ctir !1772
  %1 = load i32, i32* %_flags, align 8, !dbg !21622, !ctir !27
  %and = and i32 %1, 256, !dbg !21623
  %tobool = icmp ne i32 %and, 0, !dbg !21623
  br i1 %tobool, label %if.then, label %if.end, !dbg !21624

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21625
  %call = call i32 @rpl_fseeko(%struct._IO_FILE* %2, i64 0, i32 1), !dbg !21626
  br label %if.end, !dbg !21626

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !21627
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fseeko(%struct._IO_FILE* nonnull %fp, i64 %offset, i32 %whence) #0 !dbg !21628 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %pos = alloca i64, align 8, !ctir !1841
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !21633, metadata !DIExpression()), !dbg !21634
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !21635, metadata !DIExpression()), !dbg !21636
  store i32 %whence, i32* %whence.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %whence.addr, metadata !21637, metadata !DIExpression()), !dbg !21638
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21639
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 2, !dbg !21641, !ctir !1808
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !21641, !ctir !143
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21642
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %2, i32 0, i32 1, !dbg !21643, !ctir !1808
  %3 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !21643, !ctir !143
  %cmp = icmp eq i8* %1, %3, !dbg !21644
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !21645

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21646
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %4, i32 0, i32 5, !dbg !21647, !ctir !1808
  %5 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !21647, !ctir !143
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21648
  %_IO_write_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %6, i32 0, i32 4, !dbg !21649, !ctir !1808
  %7 = load i8*, i8** %_IO_write_base, align 8, !dbg !21649, !ctir !143
  %cmp1 = icmp eq i8* %5, %7, !dbg !21650
  br i1 %cmp1, label %land.lhs.true2, label %if.end7, !dbg !21651

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21652
  %_IO_save_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %8, i32 0, i32 9, !dbg !21653, !ctir !1808
  %9 = load i8*, i8** %_IO_save_base, align 8, !dbg !21653, !ctir !143
  %cmp3 = icmp eq i8* %9, null, !dbg !21654
  br i1 %cmp3, label %if.then, label %if.end7, !dbg !21655

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !21656, metadata !DIExpression()), !dbg !21658
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21659
  %call = call i32 @fileno(%struct._IO_FILE* %10) #13, !dbg !21660
  %11 = load i64, i64* %offset.addr, align 8, !dbg !21661
  %12 = load i32, i32* %whence.addr, align 4, !dbg !21662
  %call4 = call i64 @lseek(i32 %call, i64 %11, i32 %12) #13, !dbg !21663
  store i64 %call4, i64* %pos, align 8, !dbg !21658
  %13 = load i64, i64* %pos, align 8, !dbg !21664
  %cmp5 = icmp eq i64 %13, -1, !dbg !21666
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !21667

if.then6:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !21668
  br label %return, !dbg !21668

if.end:                                           ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21670
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %14, i32 0, i32 0, !dbg !21671, !ctir !1808
  %15 = load i32, i32* %_flags, align 8, !dbg !21672, !ctir !27
  %and = and i32 %15, -17, !dbg !21672
  store i32 %and, i32* %_flags, align 8, !dbg !21672, !ctir !27
  %16 = load i64, i64* %pos, align 8, !dbg !21673
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21674
  %_offset = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 21, !dbg !21675, !ctir !1808
  store i64 %16, i64* %_offset, align 8, !dbg !21676, !ctir !320
  store i32 0, i32* %retval, align 4, !dbg !21677
  br label %return, !dbg !21677

if.end7:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !21678
  %19 = load i64, i64* %offset.addr, align 8, !dbg !21679
  %20 = load i32, i32* %whence.addr, align 4, !dbg !21680
  %call8 = call i32 @fseeko(%struct._IO_FILE* %18, i64 %19, i32 %20), !dbg !21681
  store i32 %call8, i32* %retval, align 4, !dbg !21682
  br label %return, !dbg !21682

return:                                           ; preds = %if.end7, %if.end, %if.then6
  %21 = load i32, i32* %retval, align 4, !dbg !21683
  ret i32 %21, !dbg !21683
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind optnone readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readonly }
attributes #17 = { nounwind readnone }
attributes #18 = { nounwind returns_twice }

!llvm.dbg.cu = !{!2, !1090, !1095, !1511, !1101, !1516, !1518, !1523, !1142, !1534, !1537, !1185, !1540, !1543, !1553, !1556, !1559, !1562, !1565, !1567, !1192, !1570, !1241, !1287, !1581, !1586, !1589, !1596, !1609, !1612, !1331, !1375, !1618, !1621, !1623, !1626, !1629, !1429, !1691, !1694, !1697, !1700, !1703, !1706, !1712, !1726, !1729, !1439, !1732, !1748, !1750, !1752, !1754, !1758, !1761, !1764, !1767, !1769, !1805}
!llvm.ident = !{!1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842, !1842}
!llvm.module.flags = !{!1843, !1844, !1845, !1846}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "exit_status", scope: !2, file: !3, line: 800, type: !27, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !161, globals: !853, nameTableKind: None)
!3 = !DIFile(filename: "src/ls.c", directory: "/home/mbarbar/software/coreutils-8.31")
!4 = !{!5, !13, !20, !26, !36, !48, !53, !79, !85, !90, !95, !109, !117, !123, !129, !137}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "format", file: !3, line: 419, baseType: !6, size: 32, elements: !7)
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !{!8, !9, !10, !11, !12}
!8 = !DIEnumerator(name: "long_format", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "one_per_line", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "many_per_line", value: 2, isUnsigned: true)
!11 = !DIEnumerator(name: "horizontal", value: 3, isUnsigned: true)
!12 = !DIEnumerator(name: "with_commas", value: 4, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Dereference_symlink", file: !3, line: 576, baseType: !6, size: 32, elements: !14)
!14 = !{!15, !16, !17, !18, !19}
!15 = !DIEnumerator(name: "DEREF_UNDEFINED", value: 1, isUnsigned: true)
!16 = !DIEnumerator(name: "DEREF_NEVER", value: 2, isUnsigned: true)
!17 = !DIEnumerator(name: "DEREF_COMMAND_LINE_ARGUMENTS", value: 3, isUnsigned: true)
!18 = !DIEnumerator(name: "DEREF_COMMAND_LINE_SYMLINK_TO_DIR", value: 4, isUnsigned: true)
!19 = !DIEnumerator(name: "DEREF_ALWAYS", value: 5, isUnsigned: true)
!20 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "indicator_style", file: !3, line: 534, baseType: !6, size: 32, elements: !21)
!21 = !{!22, !23, !24, !25}
!22 = !DIEnumerator(name: "none", value: 0, isUnsigned: true)
!23 = !DIEnumerator(name: "slash", value: 1, isUnsigned: true)
!24 = !DIEnumerator(name: "file_type", value: 2, isUnsigned: true)
!25 = !DIEnumerator(name: "classify", value: 3, isUnsigned: true)
!26 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sort_type", file: !3, line: 470, baseType: !27, size: 32, elements: !28)
!27 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!28 = !{!29, !30, !31, !32, !33, !34, !35}
!29 = !DIEnumerator(name: "sort_none", value: -1)
!30 = !DIEnumerator(name: "sort_name", value: 0)
!31 = !DIEnumerator(name: "sort_extension", value: 1)
!32 = !DIEnumerator(name: "sort_size", value: 2)
!33 = !DIEnumerator(name: "sort_version", value: 3)
!34 = !DIEnumerator(name: "sort_time", value: 4)
!35 = !DIEnumerator(name: "sort_numtypes", value: 5)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "filetype", file: !3, line: 164, baseType: !6, size: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44, !45, !46, !47}
!38 = !DIEnumerator(name: "unknown", value: 0, isUnsigned: true)
!39 = !DIEnumerator(name: "fifo", value: 1, isUnsigned: true)
!40 = !DIEnumerator(name: "chardev", value: 2, isUnsigned: true)
!41 = !DIEnumerator(name: "directory", value: 3, isUnsigned: true)
!42 = !DIEnumerator(name: "blockdev", value: 4, isUnsigned: true)
!43 = !DIEnumerator(name: "normal", value: 5, isUnsigned: true)
!44 = !DIEnumerator(name: "symbolic_link", value: 6, isUnsigned: true)
!45 = !DIEnumerator(name: "sock", value: 7, isUnsigned: true)
!46 = !DIEnumerator(name: "whiteout", value: 8, isUnsigned: true)
!47 = !DIEnumerator(name: "arg_directory", value: 9, isUnsigned: true)
!48 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "acl_type", file: !3, line: 192, baseType: !6, size: 32, elements: !49)
!49 = !{!50, !51, !52}
!50 = !DIEnumerator(name: "ACL_T_NONE", value: 0, isUnsigned: true)
!51 = !DIEnumerator(name: "ACL_T_LSM_CONTEXT_ONLY", value: 1, isUnsigned: true)
!52 = !DIEnumerator(name: "ACL_T_YES", value: 2, isUnsigned: true)
!53 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "indicator_no", file: !3, line: 585, baseType: !6, size: 32, elements: !54)
!54 = !{!55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78}
!55 = !DIEnumerator(name: "C_LEFT", value: 0, isUnsigned: true)
!56 = !DIEnumerator(name: "C_RIGHT", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "C_END", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "C_RESET", value: 3, isUnsigned: true)
!59 = !DIEnumerator(name: "C_NORM", value: 4, isUnsigned: true)
!60 = !DIEnumerator(name: "C_FILE", value: 5, isUnsigned: true)
!61 = !DIEnumerator(name: "C_DIR", value: 6, isUnsigned: true)
!62 = !DIEnumerator(name: "C_LINK", value: 7, isUnsigned: true)
!63 = !DIEnumerator(name: "C_FIFO", value: 8, isUnsigned: true)
!64 = !DIEnumerator(name: "C_SOCK", value: 9, isUnsigned: true)
!65 = !DIEnumerator(name: "C_BLK", value: 10, isUnsigned: true)
!66 = !DIEnumerator(name: "C_CHR", value: 11, isUnsigned: true)
!67 = !DIEnumerator(name: "C_MISSING", value: 12, isUnsigned: true)
!68 = !DIEnumerator(name: "C_ORPHAN", value: 13, isUnsigned: true)
!69 = !DIEnumerator(name: "C_EXEC", value: 14, isUnsigned: true)
!70 = !DIEnumerator(name: "C_DOOR", value: 15, isUnsigned: true)
!71 = !DIEnumerator(name: "C_SETUID", value: 16, isUnsigned: true)
!72 = !DIEnumerator(name: "C_SETGID", value: 17, isUnsigned: true)
!73 = !DIEnumerator(name: "C_STICKY", value: 18, isUnsigned: true)
!74 = !DIEnumerator(name: "C_OTHER_WRITABLE", value: 19, isUnsigned: true)
!75 = !DIEnumerator(name: "C_STICKY_OTHER_WRITABLE", value: 20, isUnsigned: true)
!76 = !DIEnumerator(name: "C_CAP", value: 21, isUnsigned: true)
!77 = !DIEnumerator(name: "C_MULTIHARDLINK", value: 22, isUnsigned: true)
!78 = !DIEnumerator(name: "C_CLR_TO_EOL", value: 23, isUnsigned: true)
!79 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "time_type", file: !3, line: 456, baseType: !6, size: 32, elements: !80)
!80 = !{!81, !82, !83, !84}
!81 = !DIEnumerator(name: "time_mtime", value: 0, isUnsigned: true)
!82 = !DIEnumerator(name: "time_ctime", value: 1, isUnsigned: true)
!83 = !DIEnumerator(name: "time_atime", value: 2, isUnsigned: true)
!84 = !DIEnumerator(name: "time_numtypes", value: 3, isUnsigned: true)
!85 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 672, baseType: !6, size: 32, elements: !86)
!86 = !{!87, !88, !89}
!87 = !DIEnumerator(name: "IGNORE_DEFAULT", value: 0, isUnsigned: true)
!88 = !DIEnumerator(name: "IGNORE_DOT_AND_DOTDOT", value: 1, isUnsigned: true)
!89 = !DIEnumerator(name: "IGNORE_MINIMAL", value: 2, isUnsigned: true)
!90 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "when_type", file: !3, line: 569, baseType: !6, size: 32, elements: !91)
!91 = !{!92, !93, !94}
!92 = !DIEnumerator(name: "when_never", value: 0, isUnsigned: true)
!93 = !DIEnumerator(name: "when_always", value: 1, isUnsigned: true)
!94 = !DIEnumerator(name: "when_if_tty", value: 2, isUnsigned: true)
!95 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !96, line: 32, baseType: !6, size: 32, elements: !97)
!96 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/mbarbar/software/coreutils-8.31")
!97 = !{!98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108}
!98 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!99 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!100 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!101 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!102 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!103 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!104 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!105 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!106 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!107 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!108 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!109 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "strtol_error", file: !110, line: 26, baseType: !6, size: 32, elements: !111)
!110 = !DIFile(filename: "./lib/xstrtol.h", directory: "/home/mbarbar/software/coreutils-8.31")
!111 = !{!112, !113, !114, !115, !116}
!112 = !DIEnumerator(name: "LONGINT_OK", value: 0, isUnsigned: true)
!113 = !DIEnumerator(name: "LONGINT_OVERFLOW", value: 1, isUnsigned: true)
!114 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR", value: 2, isUnsigned: true)
!115 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW", value: 3, isUnsigned: true)
!116 = !DIEnumerator(name: "LONGINT_INVALID", value: 4, isUnsigned: true)
!117 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "time_style", file: !3, line: 433, baseType: !6, size: 32, elements: !118)
!118 = !{!119, !120, !121, !122}
!119 = !DIEnumerator(name: "full_iso_time_style", value: 0, isUnsigned: true)
!120 = !DIEnumerator(name: "long_iso_time_style", value: 1, isUnsigned: true)
!121 = !DIEnumerator(name: "iso_time_style", value: 2, isUnsigned: true)
!122 = !DIEnumerator(name: "locale_time_style", value: 3, isUnsigned: true)
!123 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !124, line: 19, baseType: !6, size: 32, elements: !125)
!124 = !DIFile(filename: "./lib/mbsalign.h", directory: "/home/mbarbar/software/coreutils-8.31")
!125 = !{!126, !127, !128}
!126 = !DIEnumerator(name: "MBS_ALIGN_LEFT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MBS_ALIGN_RIGHT", value: 1, isUnsigned: true)
!128 = !DIEnumerator(name: "MBS_ALIGN_CENTER", value: 2, isUnsigned: true)
!129 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "parse_state", file: !3, line: 2475, baseType: !6, size: 32, elements: !130)
!130 = !{!131, !132, !133, !134, !135, !136}
!131 = !DIEnumerator(name: "PS_START", value: 1, isUnsigned: true)
!132 = !DIEnumerator(name: "PS_2", value: 2, isUnsigned: true)
!133 = !DIEnumerator(name: "PS_3", value: 3, isUnsigned: true)
!134 = !DIEnumerator(name: "PS_4", value: 4, isUnsigned: true)
!135 = !DIEnumerator(name: "PS_DONE", value: 5, isUnsigned: true)
!136 = !DIEnumerator(name: "PS_FAIL", value: 6, isUnsigned: true)
!137 = !DICompositeType(tag: DW_TAG_enumeration_type, scope: !138, file: !3, line: 2286, baseType: !6, size: 32, elements: !153)
!138 = distinct !DISubprogram(name: "get_funky_string", scope: !3, file: !3, line: 2281, type: !139, scopeLine: 2283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!139 = !DISubroutineType(types: !140)
!140 = !{!141, !142, !145, !141, !148}
!141 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64)
!143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !144, size: 64)
!144 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !146, size: 64)
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !144)
!148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !149, size: 64)
!149 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !150, line: 46, baseType: !151)
!150 = !DIFile(filename: "llvm9/build/lib/clang/9.0.0/include/stddef.h", directory: "/home/mbarbar/software")
!151 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!152 = !{}
!153 = !{!154, !155, !156, !157, !158, !159, !160}
!154 = !DIEnumerator(name: "ST_GND", value: 0, isUnsigned: true)
!155 = !DIEnumerator(name: "ST_BACKSLASH", value: 1, isUnsigned: true)
!156 = !DIEnumerator(name: "ST_OCTAL", value: 2, isUnsigned: true)
!157 = !DIEnumerator(name: "ST_HEX", value: 3, isUnsigned: true)
!158 = !DIEnumerator(name: "ST_CARET", value: 4, isUnsigned: true)
!159 = !DIEnumerator(name: "ST_END", value: 5, isUnsigned: true)
!160 = !DIEnumerator(name: "ST_ERROR", value: 6, isUnsigned: true)
!161 = !{!162, !167, !168, !149, !171, !148, !143, !151, !146, !27, !176, !177, !180, !183, !235, !142, !242, !245, !248, !141, !164, !219, !251, !255, !256, !260, !261, !264, !272, !275, !278, !281, !286, !335, !339, !342, !345, !349, !351, !354, !357, !360, !363, !366, !369, !372, !375, !378, !381, !384, !387, !390, !393, !396, !399, !402, !405, !408, !411, !414, !417, !420, !423, !426, !429, !432, !435, !438, !441, !444, !447, !450, !451, !269, !271, !453, !456, !505, !508, !144, !509, !519, !523, !616, !463, !617, !622, !147, !625, !628, !631, !634, !644, !647, !650, !653, !655, !656, !658, !660, !662, !663, !665, !666, !667, !669, !672, !673, !675, !676, !332, !679, !682, !683, !686, !687, !688, !690, !693, !346, !694, !697, !700, !703, !705, !707, !708, !710, !716, !719, !722, !725, !729, !739, !740, !195, !197, !737, !743, !746, !749, !752, !764, !765, !767, !768, !771, !201, !228, !212, !203, !205, !199, !179, !772, !776, !787, !790, !791, !799, !801, !803, !804, !807, !810, !812, !813, !814, !821, !822, !825, !826, !829, !832, !835, !845, !846, !847, !850}
!162 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !163, line: 7, baseType: !164)
!163 = !DIFile(filename: "/usr/include/bits/types/time_t.h", directory: "")
!164 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !165, line: 160, baseType: !166)
!165 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!166 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!168 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !169, line: 102, baseType: !170)
!169 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!170 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !165, line: 73, baseType: !151)
!171 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !172, line: 72, baseType: !173)
!172 = !DIFile(filename: "/usr/include/signal.h", directory: "")
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !27}
!176 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !178, line: 85, baseType: !179)
!178 = !DIFile(filename: "/usr/include/sys/types.h", directory: "")
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !165, line: 152, baseType: !166)
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !181, size: 64)
!181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !182, size: 64)
!182 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !184, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !185)
!185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fileinfo", file: !3, line: 199, size: 1600, elements: !186)
!186 = !{!187, !188, !189, !190, !226, !227, !229, !230, !231, !232, !233, !234}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !185, file: !3, line: 202, baseType: !143, size: 64)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "linkname", scope: !185, file: !3, line: 205, baseType: !143, size: 64, offset: 64)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "absolute_name", scope: !185, file: !3, line: 208, baseType: !143, size: 64, offset: 128)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "stat", scope: !185, file: !3, line: 210, baseType: !191, size: 1152, offset: 192)
!191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !193)
!192 = !DIFile(filename: "/usr/include/bits/stat.h", directory: "")
!193 = !{!194, !196, !198, !200, !202, !204, !206, !207, !208, !209, !211, !213, !220, !221, !222}
!194 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !191, file: !192, line: 48, baseType: !195, size: 64)
!195 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !165, line: 145, baseType: !151)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !191, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!197 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !165, line: 148, baseType: !151)
!198 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !191, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!199 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !165, line: 151, baseType: !151)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !191, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!201 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !165, line: 150, baseType: !6)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !191, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!203 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !165, line: 146, baseType: !6)
!204 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !191, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !165, line: 147, baseType: !6)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !191, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !191, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !191, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !191, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!210 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !165, line: 174, baseType: !166)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !191, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!212 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !165, line: 179, baseType: !166)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !191, file: !192, line: 91, baseType: !214, size: 128, offset: 576)
!214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !216)
!215 = !DIFile(filename: "/usr/include/bits/types/struct_timespec.h", directory: "")
!216 = !{!217, !218}
!217 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !214, file: !215, line: 11, baseType: !164, size: 64)
!218 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !214, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!219 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !165, line: 196, baseType: !166)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !191, file: !192, line: 92, baseType: !214, size: 128, offset: 704)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !191, file: !192, line: 93, baseType: !214, size: 128, offset: 832)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !191, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !219, size: 192, elements: !224)
!224 = !{!225}
!225 = !DISubrange(count: 3)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "filetype", scope: !185, file: !3, line: 212, baseType: !36, size: 32, offset: 1344)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "linkmode", scope: !185, file: !3, line: 216, baseType: !228, size: 32, offset: 1376)
!228 = !DIDerivedType(tag: DW_TAG_typedef, name: "mode_t", file: !178, line: 69, baseType: !201)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "scontext", scope: !185, file: !3, line: 219, baseType: !143, size: 64, offset: 1408)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "stat_ok", scope: !185, file: !3, line: 221, baseType: !141, size: 8, offset: 1472)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "linkok", scope: !185, file: !3, line: 225, baseType: !141, size: 8, offset: 1480)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "acl_type", scope: !185, file: !3, line: 229, baseType: !48, size: 32, offset: 1504)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "has_capability", scope: !185, file: !3, line: 232, baseType: !141, size: 8, offset: 1536)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "quoted", scope: !185, file: !3, line: 235, baseType: !27, size: 32, offset: 1568)
!235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !236, size: 64)
!236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pending", file: !3, line: 367, size: 256, elements: !237)
!237 = !{!238, !239, !240, !241}
!238 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !236, file: !3, line: 369, baseType: !143, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "realname", scope: !236, file: !3, line: 373, baseType: !143, size: 64, offset: 64)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "command_line_arg", scope: !236, file: !3, line: 374, baseType: !141, size: 8, offset: 128)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !236, file: !3, line: 375, baseType: !235, size: 64, offset: 192)
!242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 8, elements: !243)
!243 = !{!244}
!244 = !DISubrange(count: 1)
!245 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 80, elements: !246)
!246 = !{!247}
!247 = !DISubrange(count: 10)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 192, elements: !249)
!249 = !{!250}
!250 = !DISubrange(count: 24)
!251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64)
!252 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_table", file: !253, line: 69, baseType: !254)
!253 = !DIFile(filename: "./lib/hash.h", directory: "/home/mbarbar/software/coreutils-8.31")
!254 = !DICompositeType(tag: DW_TAG_structure_type, name: "hash_table", file: !253, line: 67, flags: DIFlagFwdDecl)
!255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 24, elements: !224)
!256 = !DIDerivedType(tag: DW_TAG_typedef, name: "timezone_t", file: !257, line: 764, baseType: !258)
!257 = !DIFile(filename: "./lib/time.h", directory: "/home/mbarbar/software/coreutils-8.31")
!258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !259, size: 64)
!259 = !DICompositeType(tag: DW_TAG_structure_type, name: "tm_zone", file: !257, line: 764, flags: DIFlagFwdDecl)
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64)
!261 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 16, elements: !262)
!262 = !{!263}
!263 = !DISubrange(count: 2)
!264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !265, size: 64)
!265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !266, line: 7, size: 128, elements: !267)
!266 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/mbarbar/software/coreutils-8.31")
!267 = !{!268, !270}
!268 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !265, file: !266, line: 9, baseType: !269, size: 64)
!269 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !178, line: 47, baseType: !197)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !265, file: !266, line: 10, baseType: !271, size: 64, offset: 64)
!271 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !178, line: 59, baseType: !195)
!272 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 48, elements: !273)
!273 = !{!274}
!274 = !DISubrange(count: 6)
!275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 72, elements: !276)
!276 = !{!277}
!277 = !DISubrange(count: 9)
!278 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 184, elements: !279)
!279 = !{!280}
!280 = !DISubrange(count: 23)
!281 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 3072, elements: !249)
!282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bin_str", file: !3, line: 244, size: 128, elements: !283)
!283 = !{!284, !285}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !282, file: !3, line: 246, baseType: !149, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !282, file: !3, line: 247, baseType: !146, size: 64, offset: 64)
!286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !287, size: 64)
!287 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !289)
!288 = !DIFile(filename: "/usr/include/bits/types/FILE.h", directory: "")
!289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !291)
!290 = !DIFile(filename: "/usr/include/bits/types/struct_FILE.h", directory: "")
!291 = !{!292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !307, !309, !310, !311, !312, !313, !315, !316, !319, !321, !324, !327, !328, !329, !330, !331}
!292 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !289, file: !290, line: 51, baseType: !27, size: 32)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !289, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !289, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !289, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !289, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !289, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !289, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !289, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !289, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !289, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !289, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !289, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !289, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !306, size: 64)
!306 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !290, line: 36, flags: DIFlagFwdDecl)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !289, file: !290, line: 70, baseType: !308, size: 64, offset: 832)
!308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !289, size: 64)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !289, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !289, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !289, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !289, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !289, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!314 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!315 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !289, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !289, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !318, size: 64)
!318 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !290, line: 43, baseType: null)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !289, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!320 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !165, line: 153, baseType: !166)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !289, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !323, size: 64)
!323 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !290, line: 37, flags: DIFlagFwdDecl)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !289, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !326, size: 64)
!326 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !290, line: 38, flags: DIFlagFwdDecl)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !289, file: !290, line: 93, baseType: !308, size: 64, offset: 1344)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !289, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !289, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !289, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !289, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!332 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 160, elements: !333)
!333 = !{!334}
!334 = !DISubrange(count: 20)
!335 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !336)
!336 = !DIDerivedType(tag: DW_TAG_typedef, name: "sig_atomic_t", file: !337, line: 8, baseType: !338)
!337 = !DIFile(filename: "/usr/include/bits/types/sig_atomic_t.h", directory: "")
!338 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sig_atomic_t", file: !165, line: 214, baseType: !27)
!339 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 104, elements: !340)
!340 = !{!341}
!341 = !DISubrange(count: 13)
!342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 304, elements: !343)
!343 = !{!344}
!344 = !DISubrange(count: 38)
!345 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, elements: !347)
!346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !146)
!347 = !{!348}
!348 = !DISubrange(count: -1)
!349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !350, size: 64)
!350 = !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !96, line: 270, flags: DIFlagFwdDecl)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 328, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 41)
!354 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 312, elements: !355)
!355 = !{!356}
!356 = !DISubrange(count: 39)
!357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 264, elements: !358)
!358 = !{!359}
!359 = !DISubrange(count: 33)
!360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1152, elements: !361)
!361 = !{!362}
!362 = !DISubrange(count: 144)
!363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2168, elements: !364)
!364 = !{!365}
!365 = !DISubrange(count: 271)
!366 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1248, elements: !367)
!367 = !{!368}
!368 = !DISubrange(count: 156)
!369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2896, elements: !370)
!370 = !{!371}
!371 = !DISubrange(count: 362)
!372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2936, elements: !373)
!373 = !{!374}
!374 = !DISubrange(count: 367)
!375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 3352, elements: !376)
!376 = !{!377}
!377 = !DISubrange(count: 419)
!378 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 488, elements: !379)
!379 = !{!380}
!380 = !DISubrange(count: 61)
!381 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1960, elements: !382)
!382 = !{!383}
!383 = !DISubrange(count: 245)
!384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 584, elements: !385)
!385 = !{!386}
!386 = !DISubrange(count: 73)
!387 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1200, elements: !388)
!388 = !{!389}
!389 = !DISubrange(count: 150)
!390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 3376, elements: !391)
!391 = !{!392}
!392 = !DISubrange(count: 422)
!393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1160, elements: !394)
!394 = !{!395}
!395 = !DISubrange(count: 145)
!396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2832, elements: !397)
!397 = !{!398}
!398 = !DISubrange(count: 354)
!399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1184, elements: !400)
!400 = !{!401}
!401 = !DISubrange(count: 148)
!402 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2872, elements: !403)
!403 = !{!404}
!404 = !DISubrange(count: 359)
!405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2424, elements: !406)
!406 = !{!407}
!407 = !DISubrange(count: 303)
!408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 4680, elements: !409)
!409 = !{!410}
!410 = !DISubrange(count: 585)
!411 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1576, elements: !412)
!412 = !{!413}
!413 = !DISubrange(count: 197)
!414 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 4152, elements: !415)
!415 = !{!416}
!416 = !DISubrange(count: 519)
!417 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 632, elements: !418)
!418 = !{!419}
!419 = !DISubrange(count: 79)
!420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1136, elements: !421)
!421 = !{!422}
!422 = !DISubrange(count: 142)
!423 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2976, elements: !424)
!424 = !{!425}
!425 = !DISubrange(count: 372)
!426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2904, elements: !427)
!427 = !{!428}
!428 = !DISubrange(count: 363)
!429 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 360, elements: !430)
!430 = !{!431}
!431 = !DISubrange(count: 45)
!432 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 432, elements: !433)
!433 = !{!434}
!434 = !DISubrange(count: 54)
!435 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 3008, elements: !436)
!436 = !{!437}
!437 = !DISubrange(count: 376)
!438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2288, elements: !439)
!439 = !{!440}
!440 = !DISubrange(count: 286)
!441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1216, elements: !442)
!442 = !{!443}
!443 = !DISubrange(count: 152)
!444 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 32, elements: !445)
!445 = !{!446}
!446 = !DISubrange(count: 4)
!447 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 40, elements: !448)
!448 = !{!449}
!449 = !DISubrange(count: 5)
!450 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !27)
!451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !452, size: 64)
!452 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !265)
!453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2048, elements: !454)
!454 = !{!455}
!455 = !DISubrange(count: 256)
!456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !457, size: 64)
!457 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !458)
!458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !459, line: 174, size: 704, elements: !460)
!459 = !DIFile(filename: "./lib/obstack.h", directory: "/home/mbarbar/software/coreutils-8.31")
!460 = !{!461, !462, !470, !471, !472, !473, !478, !479, !490, !501, !502, !503, !504}
!461 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !458, file: !459, line: 176, baseType: !149, size: 64)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !458, file: !459, line: 177, baseType: !463, size: 64, offset: 64)
!463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !464, size: 64)
!464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !459, line: 167, size: 128, elements: !465)
!465 = !{!466, !467, !468}
!466 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !464, file: !459, line: 169, baseType: !143, size: 64)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !464, file: !459, line: 170, baseType: !463, size: 64, offset: 64)
!468 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !464, file: !459, line: 171, baseType: !469, offset: 128)
!469 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, elements: !347)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !458, file: !459, line: 178, baseType: !143, size: 64, offset: 128)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !458, file: !459, line: 179, baseType: !143, size: 64, offset: 192)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !458, file: !459, line: 180, baseType: !143, size: 64, offset: 256)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !458, file: !459, line: 185, baseType: !474, size: 64, offset: 320)
!474 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !458, file: !459, line: 181, size: 64, elements: !475)
!475 = !{!476, !477}
!476 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !474, file: !459, line: 183, baseType: !149, size: 64)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !474, file: !459, line: 184, baseType: !167, size: 64)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !458, file: !459, line: 186, baseType: !149, size: 64, offset: 384)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !458, file: !459, line: 193, baseType: !480, size: 64, offset: 448)
!480 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !458, file: !459, line: 189, size: 64, elements: !481)
!481 = !{!482, !486}
!482 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !480, file: !459, line: 191, baseType: !483, size: 64)
!483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !484, size: 64)
!484 = !DISubroutineType(types: !485)
!485 = !{!167, !149}
!486 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !480, file: !459, line: 192, baseType: !487, size: 64)
!487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !488, size: 64)
!488 = !DISubroutineType(types: !489)
!489 = !{!167, !167, !149}
!490 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !458, file: !459, line: 198, baseType: !491, size: 64, offset: 512)
!491 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !458, file: !459, line: 194, size: 64, elements: !492)
!492 = !{!493, !497}
!493 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !491, file: !459, line: 196, baseType: !494, size: 64)
!494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !495, size: 64)
!495 = !DISubroutineType(types: !496)
!496 = !{null, !167}
!497 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !491, file: !459, line: 197, baseType: !498, size: 64)
!498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !499, size: 64)
!499 = !DISubroutineType(types: !500)
!500 = !{null, !167, !167}
!501 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !458, file: !459, line: 200, baseType: !167, size: 64, offset: 576)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !458, file: !459, line: 201, baseType: !6, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !458, file: !459, line: 202, baseType: !6, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !458, file: !459, line: 206, baseType: !6, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!505 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 440, elements: !506)
!506 = !{!507}
!507 = !DISubrange(count: 55)
!508 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 264, elements: !358)
!509 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigset_t", file: !510, line: 7, baseType: !511)
!510 = !DIFile(filename: "/usr/include/bits/types/sigset_t.h", directory: "")
!511 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigset_t", file: !512, line: 8, baseType: !513)
!512 = !DIFile(filename: "/usr/include/bits/types/__sigset_t.h", directory: "")
!513 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !512, line: 5, size: 1024, elements: !514)
!514 = !{!515}
!515 = !DIDerivedType(tag: DW_TAG_member, name: "__val", scope: !513, file: !512, line: 7, baseType: !516, size: 1024)
!516 = !DICompositeType(tag: DW_TAG_array_type, baseType: !151, size: 1024, elements: !517)
!517 = !{!518}
!518 = !DISubrange(count: 16)
!519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !520, size: 384, elements: !521)
!520 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!521 = !{!522}
!522 = !DISubrange(count: 12)
!523 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !525, file: !524, line: 31, size: 64, elements: !534)
!524 = !DIFile(filename: "/usr/include/bits/sigaction.h", directory: "")
!525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigaction", file: !524, line: 27, size: 1216, elements: !526)
!526 = !{!527, !528, !529, !530}
!527 = !DIDerivedType(tag: DW_TAG_member, name: "__sigaction_handler", scope: !525, file: !524, line: 38, baseType: !523, size: 64)
!528 = !DIDerivedType(tag: DW_TAG_member, name: "sa_mask", scope: !525, file: !524, line: 46, baseType: !511, size: 1024, offset: 64)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "sa_flags", scope: !525, file: !524, line: 49, baseType: !27, size: 32, offset: 1088)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "sa_restorer", scope: !525, file: !524, line: 52, baseType: !531, size: 64, offset: 1152)
!531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !532, size: 64)
!532 = !DISubroutineType(types: !533)
!533 = !{null}
!534 = !{!535, !536}
!535 = !DIDerivedType(tag: DW_TAG_member, name: "sa_handler", scope: !523, file: !524, line: 34, baseType: !171, size: 64)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "sa_sigaction", scope: !523, file: !524, line: 36, baseType: !537, size: 64)
!537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !538, size: 64)
!538 = !DISubroutineType(types: !539)
!539 = !{null, !27, !540, !167}
!540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !541, size: 64)
!541 = !DIDerivedType(tag: DW_TAG_typedef, name: "siginfo_t", file: !542, line: 124, baseType: !543)
!542 = !DIFile(filename: "/usr/include/bits/types/siginfo_t.h", directory: "")
!543 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !542, line: 36, size: 1024, elements: !544)
!544 = !{!545, !546, !547, !548, !549}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !543, file: !542, line: 38, baseType: !27, size: 32)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !543, file: !542, line: 40, baseType: !27, size: 32, offset: 32)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !543, file: !542, line: 42, baseType: !27, size: 32, offset: 64)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !543, file: !542, line: 48, baseType: !27, size: 32, offset: 96)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !543, file: !542, line: 123, baseType: !550, size: 896, offset: 128)
!550 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !543, file: !542, line: 51, size: 896, elements: !551)
!551 = !{!552, !556, !562, !574, !580, !589, !605, !610}
!552 = !DIDerivedType(tag: DW_TAG_member, name: "_pad", scope: !550, file: !542, line: 53, baseType: !553, size: 896)
!553 = !DICompositeType(tag: DW_TAG_array_type, baseType: !27, size: 896, elements: !554)
!554 = !{!555}
!555 = !DISubrange(count: 28)
!556 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !550, file: !542, line: 60, baseType: !557, size: 64)
!557 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 56, size: 64, elements: !558)
!558 = !{!559, !561}
!559 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !557, file: !542, line: 58, baseType: !560, size: 32)
!560 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !165, line: 154, baseType: !27)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !557, file: !542, line: 59, baseType: !203, size: 32, offset: 32)
!562 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !550, file: !542, line: 68, baseType: !563, size: 128)
!563 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 63, size: 128, elements: !564)
!564 = !{!565, !566, !567}
!565 = !DIDerivedType(tag: DW_TAG_member, name: "si_tid", scope: !563, file: !542, line: 65, baseType: !27, size: 32)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "si_overrun", scope: !563, file: !542, line: 66, baseType: !27, size: 32, offset: 32)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !563, file: !542, line: 67, baseType: !568, size: 64, offset: 64)
!568 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigval_t", file: !569, line: 30, baseType: !570)
!569 = !DIFile(filename: "/usr/include/bits/types/__sigval_t.h", directory: "")
!570 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !569, line: 24, size: 64, elements: !571)
!571 = !{!572, !573}
!572 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !570, file: !569, line: 26, baseType: !27, size: 32)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !570, file: !569, line: 27, baseType: !167, size: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !550, file: !542, line: 76, baseType: !575, size: 128)
!575 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 71, size: 128, elements: !576)
!576 = !{!577, !578, !579}
!577 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !575, file: !542, line: 73, baseType: !560, size: 32)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !575, file: !542, line: 74, baseType: !203, size: 32, offset: 32)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !575, file: !542, line: 75, baseType: !568, size: 64, offset: 64)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !550, file: !542, line: 86, baseType: !581, size: 256)
!581 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 79, size: 256, elements: !582)
!582 = !{!583, !584, !585, !586, !588}
!583 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !581, file: !542, line: 81, baseType: !560, size: 32)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !581, file: !542, line: 82, baseType: !203, size: 32, offset: 32)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "si_status", scope: !581, file: !542, line: 83, baseType: !27, size: 32, offset: 64)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "si_utime", scope: !581, file: !542, line: 84, baseType: !587, size: 64, offset: 128)
!587 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clock_t", file: !165, line: 156, baseType: !166)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "si_stime", scope: !581, file: !542, line: 85, baseType: !587, size: 64, offset: 192)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !550, file: !542, line: 105, baseType: !590, size: 256)
!590 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 89, size: 256, elements: !591)
!591 = !{!592, !593, !595}
!592 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr", scope: !590, file: !542, line: 91, baseType: !167, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr_lsb", scope: !590, file: !542, line: 93, baseType: !594, size: 16, offset: 64)
!594 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "_bounds", scope: !590, file: !542, line: 104, baseType: !596, size: 128, offset: 128)
!596 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !590, file: !542, line: 94, size: 128, elements: !597)
!597 = !{!598, !603}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_bnd", scope: !596, file: !542, line: 101, baseType: !599, size: 128)
!599 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !596, file: !542, line: 97, size: 128, elements: !600)
!600 = !{!601, !602}
!601 = !DIDerivedType(tag: DW_TAG_member, name: "_lower", scope: !599, file: !542, line: 99, baseType: !167, size: 64)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "_upper", scope: !599, file: !542, line: 100, baseType: !167, size: 64, offset: 64)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "_pkey", scope: !596, file: !542, line: 103, baseType: !604, size: 32)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !165, line: 42, baseType: !6)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !550, file: !542, line: 112, baseType: !606, size: 128)
!606 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 108, size: 128, elements: !607)
!607 = !{!608, !609}
!608 = !DIDerivedType(tag: DW_TAG_member, name: "si_band", scope: !606, file: !542, line: 110, baseType: !166, size: 64)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "si_fd", scope: !606, file: !542, line: 111, baseType: !27, size: 32, offset: 64)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !550, file: !542, line: 121, baseType: !611, size: 128)
!611 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !550, file: !542, line: 116, size: 128, elements: !612)
!612 = !{!613, !614, !615}
!613 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !611, file: !542, line: 118, baseType: !167, size: 64)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !611, file: !542, line: 119, baseType: !27, size: 32, offset: 64)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !611, file: !542, line: 120, baseType: !6, size: 32, offset: 96)
!616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !458, size: 64)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ignore_pattern", file: !3, line: 690, size: 128, elements: !619)
!619 = !{!620, !621}
!620 = !DIDerivedType(tag: DW_TAG_member, name: "pattern", scope: !618, file: !3, line: 692, baseType: !146, size: 64)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !618, file: !3, line: 693, baseType: !617, size: 64, offset: 64)
!622 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 64, elements: !623)
!623 = !{!624}
!624 = !DISubrange(count: 8)
!625 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 472, elements: !626)
!626 = !{!627}
!627 = !DISubrange(count: 59)
!628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 496, elements: !629)
!629 = !{!630}
!630 = !DISubrange(count: 62)
!631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 352, elements: !632)
!632 = !{!633}
!633 = !DISubrange(count: 44)
!634 = !DICompositeType(tag: DW_TAG_array_type, baseType: !635, size: 11264, elements: !632)
!635 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !636)
!636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !637, line: 50, size: 256, elements: !638)
!637 = !DIFile(filename: "/usr/include/bits/getopt_ext.h", directory: "")
!638 = !{!639, !640, !641, !643}
!639 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !636, file: !637, line: 52, baseType: !146, size: 64)
!640 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !636, file: !637, line: 55, baseType: !27, size: 32, offset: 64)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !636, file: !637, line: 56, baseType: !642, size: 64, offset: 128)
!642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !636, file: !637, line: 57, baseType: !27, size: 32, offset: 192)
!644 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 56, elements: !645)
!645 = !{!646}
!646 = !DISubrange(count: 7)
!647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 152, elements: !648)
!648 = !{!649}
!649 = !DISubrange(count: 19)
!650 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 136, elements: !651)
!651 = !{!652}
!652 = !DISubrange(count: 17)
!653 = !DICompositeType(tag: DW_TAG_array_type, baseType: !654, size: 160, elements: !448)
!654 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !26)
!655 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 384, elements: !273)
!656 = !DIDerivedType(tag: DW_TAG_typedef, name: "argmatch_exit_fn", file: !657, line: 55, baseType: !531)
!657 = !DIFile(filename: "./lib/argmatch.h", directory: "/home/mbarbar/software/coreutils-8.31")
!658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !659, size: 160, elements: !448)
!659 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !79)
!660 = !DICompositeType(tag: DW_TAG_array_type, baseType: !661, size: 224, elements: !645)
!661 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 512, elements: !623)
!663 = !DICompositeType(tag: DW_TAG_array_type, baseType: !664, size: 288, elements: !276)
!664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !90)
!665 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 640, elements: !246)
!666 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 96, elements: !521)
!667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !668, size: 128, elements: !445)
!668 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20)
!669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 144, elements: !670)
!670 = !{!671}
!671 = !DISubrange(count: 18)
!672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 320, elements: !448)
!673 = !DICompositeType(tag: DW_TAG_array_type, baseType: !674, elements: !347)
!674 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !95)
!675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 128, elements: !517)
!676 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 112, elements: !677)
!677 = !{!678}
!678 = !DISubrange(count: 14)
!679 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 88, elements: !680)
!680 = !{!681}
!681 = !DISubrange(count: 11)
!682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 56, elements: !645)
!683 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 232, elements: !684)
!684 = !{!685}
!685 = !DISubrange(count: 29)
!686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !146, size: 128, elements: !262)
!687 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !150, line: 35, baseType: !166)
!688 = !DICompositeType(tag: DW_TAG_array_type, baseType: !689, size: 128, elements: !445)
!689 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !117)
!690 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 176, elements: !691)
!691 = !{!692}
!692 = !DISubrange(count: 22)
!693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !346, size: 64)
!694 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 120, elements: !695)
!695 = !{!696}
!696 = !DISubrange(count: 15)
!697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 520, elements: !698)
!698 = !{!699}
!699 = !DISubrange(count: 65)
!700 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 12288, elements: !701)
!701 = !{!522, !702}
!702 = !DISubrange(count: 128)
!703 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 24576, elements: !704)
!704 = !{!263, !522, !702}
!705 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1024, elements: !706)
!706 = !{!702}
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbs_align_t", file: !124, line: 19, baseType: !123)
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !709, size: 64)
!709 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !176)
!710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !711, size: 64)
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "color_ext_type", file: !3, line: 601, size: 320, elements: !712)
!712 = !{!713, !714, !715}
!713 = !DIDerivedType(tag: DW_TAG_member, name: "ext", scope: !711, file: !3, line: 603, baseType: !282, size: 128)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !711, file: !3, line: 604, baseType: !282, size: 128, offset: 128)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !711, file: !3, line: 605, baseType: !710, size: 64, offset: 256)
!716 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 1600, elements: !717)
!717 = !{!718}
!718 = !DISubrange(count: 25)
!719 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 416, elements: !720)
!720 = !{!721}
!721 = !DISubrange(count: 52)
!722 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 34336, elements: !723)
!723 = !{!724}
!724 = !DISubrange(count: 4292)
!725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !726, size: 64)
!726 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !727, line: 127, baseType: !728)
!727 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!728 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !727, line: 127, flags: DIFlagFwdDecl)
!729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !730, size: 64)
!730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !731, line: 22, size: 2240, elements: !732)
!731 = !DIFile(filename: "/usr/include/bits/dirent.h", directory: "")
!732 = !{!733, !734, !735, !736, !738}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !730, file: !731, line: 25, baseType: !197, size: 64)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !730, file: !731, line: 26, baseType: !179, size: 64, offset: 64)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !730, file: !731, line: 31, baseType: !176, size: 16, offset: 128)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !730, file: !731, line: 32, baseType: !737, size: 8, offset: 144)
!737 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !730, file: !731, line: 33, baseType: !453, size: 2048, offset: 152)
!739 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 200, elements: !717)
!740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 320, elements: !741)
!741 = !{!742}
!742 = !DISubrange(count: 40)
!743 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 168, elements: !744)
!744 = !{!745}
!745 = !DISubrange(count: 21)
!746 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 5216, elements: !747)
!747 = !{!748}
!748 = !DISubrange(count: 652)
!749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 65536, elements: !750)
!750 = !{!751}
!751 = !DISubrange(count: 8192)
!752 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !753, line: 6, baseType: !754)
!753 = !DIFile(filename: "/usr/include/bits/types/mbstate_t.h", directory: "")
!754 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !755, line: 21, baseType: !756)
!755 = !DIFile(filename: "/usr/include/bits/types/__mbstate_t.h", directory: "")
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !755, line: 13, size: 64, elements: !757)
!757 = !{!758, !759}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !756, file: !755, line: 15, baseType: !27, size: 32)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !756, file: !755, line: 20, baseType: !760, size: 32, offset: 32)
!760 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !756, file: !755, line: 16, size: 32, elements: !761)
!761 = !{!762, !763}
!762 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !760, file: !755, line: 18, baseType: !6, size: 32)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !760, file: !755, line: 19, baseType: !444, size: 32)
!764 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !150, line: 74, baseType: !27)
!765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !766, size: 64)
!766 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !618)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !167, size: 64)
!768 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 408, elements: !769)
!769 = !{!770}
!770 = !DISubrange(count: 51)
!771 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 632, elements: !418)
!772 = !DIDerivedType(tag: DW_TAG_typedef, name: "cap_t", file: !773, line: 39, baseType: !774)
!773 = !DIFile(filename: "/usr/include/sys/capability.h", directory: "")
!774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!775 = !DICompositeType(tag: DW_TAG_structure_type, name: "_cap_struct", file: !773, line: 39, flags: DIFlagFwdDecl)
!776 = !DIDerivedType(tag: DW_TAG_typedef, name: "jmp_buf", file: !777, line: 45, baseType: !778)
!777 = !DIFile(filename: "/usr/include/setjmp.h", directory: "")
!778 = !DICompositeType(tag: DW_TAG_array_type, baseType: !779, size: 1600, elements: !243)
!779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__jmp_buf_tag", file: !777, line: 33, size: 1600, elements: !780)
!780 = !{!781, !785, !786}
!781 = !DIDerivedType(tag: DW_TAG_member, name: "__jmpbuf", scope: !779, file: !777, line: 39, baseType: !782, size: 512)
!782 = !DIDerivedType(tag: DW_TAG_typedef, name: "__jmp_buf", file: !783, line: 31, baseType: !784)
!783 = !DIFile(filename: "/usr/include/bits/setjmp.h", directory: "")
!784 = !DICompositeType(tag: DW_TAG_array_type, baseType: !166, size: 512, elements: !623)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "__mask_was_saved", scope: !779, file: !777, line: 40, baseType: !27, size: 32, offset: 512)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "__saved_mask", scope: !779, file: !777, line: 41, baseType: !511, size: 1024, offset: 576)
!787 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 208, elements: !788)
!788 = !{!789}
!789 = !DISubrange(count: 26)
!790 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 176, elements: !691)
!791 = !DICompositeType(tag: DW_TAG_array_type, baseType: !792, size: 3584, elements: !798)
!792 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !793)
!793 = !DIDerivedType(tag: DW_TAG_typedef, name: "qsortFunc", file: !3, line: 3585, baseType: !794)
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !795, size: 64)
!795 = !DISubroutineType(types: !796)
!796 = !{!27, !797, !797}
!797 = !DIDerivedType(tag: DW_TAG_typedef, name: "V", file: !3, line: 3584, baseType: !181)
!798 = !{!646, !263, !263, !263}
!799 = !DICompositeType(tag: DW_TAG_array_type, baseType: !792, size: 512, elements: !800)
!800 = !{!263, !263, !263}
!801 = !DICompositeType(tag: DW_TAG_array_type, baseType: !792, size: 256, elements: !802)
!802 = !{!263, !263}
!803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !792, size: 128, elements: !262)
!804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 288, elements: !805)
!805 = !{!806}
!806 = !DISubrange(count: 36)
!807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 480, elements: !808)
!808 = !{!809}
!809 = !DISubrange(count: 60)
!810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !811, size: 64)
!811 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !282)
!812 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 320, elements: !246)
!813 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !810)
!814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !815, size: 64)
!815 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !816)
!816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "column_info", file: !3, line: 937, size: 192, elements: !817)
!817 = !{!818, !819, !820}
!818 = !DIDerivedType(tag: DW_TAG_member, name: "valid_len", scope: !816, file: !3, line: 939, baseType: !141, size: 8)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "line_len", scope: !816, file: !3, line: 940, baseType: !149, size: 64, offset: 64)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "col_arr", scope: !816, file: !3, line: 941, baseType: !148, size: 64, offset: 128)
!821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !816, size: 64)
!822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 29144, elements: !823)
!823 = !{!824}
!824 = !DISubrange(count: 3643)
!825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 88, elements: !680)
!826 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 8008, elements: !827)
!827 = !{!828}
!828 = !DISubrange(count: 1001)
!829 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 600, elements: !830)
!830 = !{!831}
!831 = !DISubrange(count: 75)
!832 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1696, elements: !833)
!833 = !{!834}
!834 = !DISubrange(count: 212)
!835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !836, size: 896, elements: !645)
!836 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !837)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !839, file: !838, line: 633, size: 128, elements: !842)
!838 = !DIFile(filename: "src/system.h", directory: "/home/mbarbar/software/coreutils-8.31")
!839 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !838, file: !838, line: 631, type: !840, scopeLine: 632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!840 = !DISubroutineType(types: !841)
!841 = !{null, !146}
!842 = !{!843, !844}
!843 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !837, file: !838, line: 633, baseType: !146, size: 64)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !837, file: !838, line: 633, baseType: !146, size: 64, offset: 64)
!845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !836, size: 64)
!846 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 184, elements: !279)
!847 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 568, elements: !848)
!848 = !{!849}
!849 = !DISubrange(count: 71)
!850 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 216, elements: !851)
!851 = !{!852}
!852 = !DISubrange(count: 27)
!853 = !{!854, !856, !858, !860, !862, !864, !866, !868, !870, !872, !874, !876, !878, !880, !882, !884, !886, !888, !890, !892, !894, !896, !898, !900, !902, !904, !906, !908, !0, !910, !912, !914, !916, !918, !920, !922, !924, !929, !931, !936, !938, !940, !942, !944, !946, !948, !950, !952, !954, !956, !958, !960, !962, !964, !966, !968, !970, !972, !974, !976, !978, !980, !982, !984, !986, !988, !990, !992, !994, !996, !998, !1000, !1002, !1004, !1006, !1008, !1011, !1013, !1015, !1017, !1022, !1024, !1026, !1028, !1030, !1032, !1034, !1036, !1038, !1040, !1042, !1044, !1046, !1048, !1050, !1055, !1060, !1065, !1067, !1069, !1071, !1076, !1079, !1081, !1083}
!854 = !DIGlobalVariableExpression(var: !855, expr: !DIExpression())
!855 = distinct !DIGlobalVariable(name: "active_dir_set", scope: !2, file: !3, line: 319, type: !251, isLocal: true, isDefinition: true)
!856 = !DIGlobalVariableExpression(var: !857, expr: !DIExpression())
!857 = distinct !DIGlobalVariable(name: "cwd_file", scope: !2, file: !3, line: 330, type: !260, isLocal: true, isDefinition: true)
!858 = !DIGlobalVariableExpression(var: !859, expr: !DIExpression())
!859 = distinct !DIGlobalVariable(name: "cwd_n_alloc", scope: !2, file: !3, line: 333, type: !149, isLocal: true, isDefinition: true)
!860 = !DIGlobalVariableExpression(var: !861, expr: !DIExpression())
!861 = distinct !DIGlobalVariable(name: "cwd_n_used", scope: !2, file: !3, line: 336, type: !149, isLocal: true, isDefinition: true)
!862 = !DIGlobalVariableExpression(var: !863, expr: !DIExpression())
!863 = distinct !DIGlobalVariable(name: "color_symlink_as_referent", scope: !2, file: !3, line: 355, type: !141, isLocal: true, isDefinition: true)
!864 = !DIGlobalVariableExpression(var: !865, expr: !DIExpression())
!865 = distinct !DIGlobalVariable(name: "hostname", scope: !2, file: !3, line: 357, type: !146, isLocal: true, isDefinition: true)
!866 = !DIGlobalVariableExpression(var: !867, expr: !DIExpression())
!867 = distinct !DIGlobalVariable(name: "pending_dirs", scope: !2, file: !3, line: 378, type: !235, isLocal: true, isDefinition: true)
!868 = !DIGlobalVariableExpression(var: !869, expr: !DIExpression())
!869 = distinct !DIGlobalVariable(name: "current_time", scope: !2, file: !3, line: 383, type: !214, isLocal: true, isDefinition: true)
!870 = !DIGlobalVariableExpression(var: !871, expr: !DIExpression())
!871 = distinct !DIGlobalVariable(name: "print_scontext", scope: !2, file: !3, line: 385, type: !141, isLocal: true, isDefinition: true)
!872 = !DIGlobalVariableExpression(var: !873, expr: !DIExpression())
!873 = distinct !DIGlobalVariable(name: "format", scope: !2, file: !3, line: 428, type: !5, isLocal: true, isDefinition: true)
!874 = !DIGlobalVariableExpression(var: !875, expr: !DIExpression())
!875 = distinct !DIGlobalVariable(name: "sort_type", scope: !2, file: !3, line: 481, type: !26, isLocal: true, isDefinition: true)
!876 = !DIGlobalVariableExpression(var: !877, expr: !DIExpression())
!877 = distinct !DIGlobalVariable(name: "print_block_size", scope: !2, file: !3, line: 510, type: !141, isLocal: true, isDefinition: true)
!878 = !DIGlobalVariableExpression(var: !879, expr: !DIExpression())
!879 = distinct !DIGlobalVariable(name: "dired", scope: !2, file: !3, line: 525, type: !141, isLocal: true, isDefinition: true)
!880 = !DIGlobalVariableExpression(var: !881, expr: !DIExpression())
!881 = distinct !DIGlobalVariable(name: "indicator_style", scope: !2, file: !3, line: 542, type: !20, isLocal: true, isDefinition: true)
!882 = !DIGlobalVariableExpression(var: !883, expr: !DIExpression())
!883 = distinct !DIGlobalVariable(name: "print_with_color", scope: !2, file: !3, line: 559, type: !141, isLocal: true, isDefinition: true)
!884 = !DIGlobalVariableExpression(var: !885, expr: !DIExpression())
!885 = distinct !DIGlobalVariable(name: "print_hyperlink", scope: !2, file: !3, line: 561, type: !141, isLocal: true, isDefinition: true)
!886 = !DIGlobalVariableExpression(var: !887, expr: !DIExpression())
!887 = distinct !DIGlobalVariable(name: "check_symlink_mode", scope: !2, file: !3, line: 645, type: !141, isLocal: true, isDefinition: true)
!888 = !DIGlobalVariableExpression(var: !889, expr: !DIExpression())
!889 = distinct !DIGlobalVariable(name: "dereference", scope: !2, file: !3, line: 654, type: !13, isLocal: true, isDefinition: true)
!890 = !DIGlobalVariableExpression(var: !891, expr: !DIExpression())
!891 = distinct !DIGlobalVariable(name: "recursive", scope: !2, file: !3, line: 659, type: !141, isLocal: true, isDefinition: true)
!892 = !DIGlobalVariableExpression(var: !893, expr: !DIExpression())
!893 = distinct !DIGlobalVariable(name: "immediate_dirs", scope: !2, file: !3, line: 664, type: !141, isLocal: true, isDefinition: true)
!894 = !DIGlobalVariableExpression(var: !895, expr: !DIExpression())
!895 = distinct !DIGlobalVariable(name: "directories_first", scope: !2, file: !3, line: 668, type: !141, isLocal: true, isDefinition: true)
!896 = !DIGlobalVariableExpression(var: !897, expr: !DIExpression())
!897 = distinct !DIGlobalVariable(name: "filename_quoting_options", scope: !2, file: !3, line: 715, type: !349, isLocal: true, isDefinition: true)
!898 = !DIGlobalVariableExpression(var: !899, expr: !DIExpression())
!899 = distinct !DIGlobalVariable(name: "print_dir_name", scope: !2, file: !3, line: 724, type: !141, isLocal: true, isDefinition: true)
!900 = !DIGlobalVariableExpression(var: !901, expr: !DIExpression())
!901 = distinct !DIGlobalVariable(name: "localtz", scope: !2, file: !3, line: 733, type: !256, isLocal: true, isDefinition: true)
!902 = !DIGlobalVariableExpression(var: !903, expr: !DIExpression())
!903 = distinct !DIGlobalVariable(name: "format_needs_stat", scope: !2, file: !3, line: 738, type: !141, isLocal: true, isDefinition: true)
!904 = !DIGlobalVariableExpression(var: !905, expr: !DIExpression())
!905 = distinct !DIGlobalVariable(name: "format_needs_type", scope: !2, file: !3, line: 743, type: !141, isLocal: true, isDefinition: true)
!906 = !DIGlobalVariableExpression(var: !907, expr: !DIExpression())
!907 = distinct !DIGlobalVariable(name: "interrupt_signal", scope: !2, file: !3, line: 792, type: !335, isLocal: true, isDefinition: true)
!908 = !DIGlobalVariableExpression(var: !909, expr: !DIExpression())
!909 = distinct !DIGlobalVariable(name: "stop_signal_count", scope: !2, file: !3, line: 796, type: !335, isLocal: true, isDefinition: true)
!910 = !DIGlobalVariableExpression(var: !911, expr: !DIExpression())
!911 = distinct !DIGlobalVariable(name: "dired_pos", scope: !2, file: !3, line: 960, type: !149, isLocal: true, isDefinition: true)
!912 = !DIGlobalVariableExpression(var: !913, expr: !DIExpression())
!913 = distinct !DIGlobalVariable(name: "dired_obstack", scope: !2, file: !3, line: 981, type: !458, isLocal: true, isDefinition: true)
!914 = !DIGlobalVariableExpression(var: !915, expr: !DIExpression())
!915 = distinct !DIGlobalVariable(name: "subdired_obstack", scope: !2, file: !3, line: 988, type: !458, isLocal: true, isDefinition: true)
!916 = !DIGlobalVariableExpression(var: !917, expr: !DIExpression())
!917 = distinct !DIGlobalVariable(name: "dev_ino_obstack", scope: !2, file: !3, line: 1002, type: !458, isLocal: true, isDefinition: true)
!918 = !DIGlobalVariableExpression(var: !919, expr: !DIExpression())
!919 = distinct !DIGlobalVariable(name: "RFC3986", scope: !2, file: !3, line: 1083, type: !453, isLocal: true, isDefinition: true)
!920 = !DIGlobalVariableExpression(var: !921, expr: !DIExpression())
!921 = distinct !DIGlobalVariable(name: "used_color", scope: !2, file: !3, line: 567, type: !141, isLocal: true, isDefinition: true)
!922 = !DIGlobalVariableExpression(var: !923, expr: !DIExpression())
!923 = distinct !DIGlobalVariable(name: "color_indicator", scope: !2, file: !3, line: 608, type: !281, isLocal: true, isDefinition: true)
!924 = !DIGlobalVariableExpression(var: !925, expr: !DIExpression())
!925 = distinct !DIGlobalVariable(name: "sig", scope: !926, file: !3, line: 1358, type: !519, isLocal: true, isDefinition: true)
!926 = distinct !DISubprogram(name: "signal_setup", scope: !3, file: !3, line: 1355, type: !927, scopeLine: 1356, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!927 = !DISubroutineType(types: !928)
!928 = !{null, !141}
!929 = !DIGlobalVariableExpression(var: !930, expr: !DIExpression())
!930 = distinct !DIGlobalVariable(name: "caught_signals", scope: !2, file: !3, line: 788, type: !509, isLocal: true, isDefinition: true)
!931 = !DIGlobalVariableExpression(var: !932, expr: !DIExpression())
!932 = distinct !DIGlobalVariable(name: "posix_prefix", scope: !933, file: !3, line: 2181, type: !682, isLocal: true, isDefinition: true)
!933 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 1688, type: !934, scopeLine: 1689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!934 = !DISubroutineType(types: !935)
!935 = !{!27, !27, !142}
!936 = !DIGlobalVariableExpression(var: !937, expr: !DIExpression())
!937 = distinct !DIGlobalVariable(name: "qmark_funny_chars", scope: !2, file: !3, line: 711, type: !141, isLocal: true, isDefinition: true)
!938 = !DIGlobalVariableExpression(var: !939, expr: !DIExpression())
!939 = distinct !DIGlobalVariable(name: "time_type", scope: !2, file: !3, line: 464, type: !79, isLocal: true, isDefinition: true)
!940 = !DIGlobalVariableExpression(var: !941, expr: !DIExpression())
!941 = distinct !DIGlobalVariable(name: "sort_reverse", scope: !2, file: !3, line: 489, type: !141, isLocal: true, isDefinition: true)
!942 = !DIGlobalVariableExpression(var: !943, expr: !DIExpression())
!943 = distinct !DIGlobalVariable(name: "numeric_ids", scope: !2, file: !3, line: 506, type: !141, isLocal: true, isDefinition: true)
!944 = !DIGlobalVariableExpression(var: !945, expr: !DIExpression())
!945 = distinct !DIGlobalVariable(name: "print_inode", scope: !2, file: !3, line: 649, type: !141, isLocal: true, isDefinition: true)
!946 = !DIGlobalVariableExpression(var: !947, expr: !DIExpression())
!947 = distinct !DIGlobalVariable(name: "ignore_mode", scope: !2, file: !3, line: 683, type: !85, isLocal: true, isDefinition: true)
!948 = !DIGlobalVariableExpression(var: !949, expr: !DIExpression())
!949 = distinct !DIGlobalVariable(name: "ignore_patterns", scope: !2, file: !3, line: 696, type: !617, isLocal: true, isDefinition: true)
!950 = !DIGlobalVariableExpression(var: !951, expr: !DIExpression())
!951 = distinct !DIGlobalVariable(name: "hide_patterns", scope: !2, file: !3, line: 700, type: !617, isLocal: true, isDefinition: true)
!952 = !DIGlobalVariableExpression(var: !953, expr: !DIExpression())
!953 = distinct !DIGlobalVariable(name: "line_length", scope: !2, file: !3, line: 729, type: !149, isLocal: true, isDefinition: true)
!954 = !DIGlobalVariableExpression(var: !955, expr: !DIExpression())
!955 = distinct !DIGlobalVariable(name: "tabsize", scope: !2, file: !3, line: 720, type: !149, isLocal: true, isDefinition: true)
!956 = !DIGlobalVariableExpression(var: !957, expr: !DIExpression())
!957 = distinct !DIGlobalVariable(name: "long_options", scope: !2, file: !3, line: 839, type: !634, isLocal: true, isDefinition: true)
!958 = !DIGlobalVariableExpression(var: !959, expr: !DIExpression())
!959 = distinct !DIGlobalVariable(name: "print_owner", scope: !2, file: !3, line: 493, type: !141, isLocal: true, isDefinition: true)
!960 = !DIGlobalVariableExpression(var: !961, expr: !DIExpression())
!961 = distinct !DIGlobalVariable(name: "human_output_opts", scope: !2, file: !3, line: 513, type: !27, isLocal: true, isDefinition: true)
!962 = !DIGlobalVariableExpression(var: !963, expr: !DIExpression())
!963 = distinct !DIGlobalVariable(name: "file_human_output_opts", scope: !2, file: !3, line: 519, type: !27, isLocal: true, isDefinition: true)
!964 = !DIGlobalVariableExpression(var: !965, expr: !DIExpression())
!965 = distinct !DIGlobalVariable(name: "output_block_size", scope: !2, file: !3, line: 516, type: !168, isLocal: true, isDefinition: true)
!966 = !DIGlobalVariableExpression(var: !967, expr: !DIExpression())
!967 = distinct !DIGlobalVariable(name: "file_output_block_size", scope: !2, file: !3, line: 520, type: !168, isLocal: true, isDefinition: true)
!968 = !DIGlobalVariableExpression(var: !969, expr: !DIExpression())
!969 = distinct !DIGlobalVariable(name: "print_group", scope: !2, file: !3, line: 501, type: !141, isLocal: true, isDefinition: true)
!970 = !DIGlobalVariableExpression(var: !971, expr: !DIExpression())
!971 = distinct !DIGlobalVariable(name: "print_author", scope: !2, file: !3, line: 497, type: !141, isLocal: true, isDefinition: true)
!972 = !DIGlobalVariableExpression(var: !973, expr: !DIExpression())
!973 = distinct !DIGlobalVariable(name: "sort_types", scope: !2, file: !3, line: 905, type: !653, isLocal: true, isDefinition: true)
!974 = !DIGlobalVariableExpression(var: !975, expr: !DIExpression())
!975 = distinct !DIGlobalVariable(name: "sort_args", scope: !2, file: !3, line: 901, type: !655, isLocal: true, isDefinition: true)
!976 = !DIGlobalVariableExpression(var: !977, expr: !DIExpression())
!977 = distinct !DIGlobalVariable(name: "time_types", scope: !2, file: !3, line: 915, type: !658, isLocal: true, isDefinition: true)
!978 = !DIGlobalVariableExpression(var: !979, expr: !DIExpression())
!979 = distinct !DIGlobalVariable(name: "time_args", scope: !2, file: !3, line: 911, type: !655, isLocal: true, isDefinition: true)
!980 = !DIGlobalVariableExpression(var: !981, expr: !DIExpression())
!981 = distinct !DIGlobalVariable(name: "format_types", scope: !2, file: !3, line: 894, type: !660, isLocal: true, isDefinition: true)
!982 = !DIGlobalVariableExpression(var: !983, expr: !DIExpression())
!983 = distinct !DIGlobalVariable(name: "format_args", scope: !2, file: !3, line: 889, type: !662, isLocal: true, isDefinition: true)
!984 = !DIGlobalVariableExpression(var: !985, expr: !DIExpression())
!985 = distinct !DIGlobalVariable(name: "when_types", scope: !2, file: !3, line: 928, type: !663, isLocal: true, isDefinition: true)
!986 = !DIGlobalVariableExpression(var: !987, expr: !DIExpression())
!987 = distinct !DIGlobalVariable(name: "when_args", scope: !2, file: !3, line: 921, type: !665, isLocal: true, isDefinition: true)
!988 = !DIGlobalVariableExpression(var: !989, expr: !DIExpression())
!989 = distinct !DIGlobalVariable(name: "indicator_style_types", scope: !2, file: !3, line: 549, type: !667, isLocal: true, isDefinition: true)
!990 = !DIGlobalVariableExpression(var: !991, expr: !DIExpression())
!991 = distinct !DIGlobalVariable(name: "indicator_style_args", scope: !2, file: !3, line: 545, type: !672, isLocal: true, isDefinition: true)
!992 = !DIGlobalVariableExpression(var: !993, expr: !DIExpression())
!993 = distinct !DIGlobalVariable(name: "max_idx", scope: !2, file: !3, line: 948, type: !149, isLocal: true, isDefinition: true)
!994 = !DIGlobalVariableExpression(var: !995, expr: !DIExpression())
!995 = distinct !DIGlobalVariable(name: "align_variable_outer_quotes", scope: !2, file: !3, line: 343, type: !141, isLocal: true, isDefinition: true)
!996 = !DIGlobalVariableExpression(var: !997, expr: !DIExpression())
!997 = distinct !DIGlobalVariable(name: "dirname_quoting_options", scope: !2, file: !3, line: 716, type: !349, isLocal: true, isDefinition: true)
!998 = !DIGlobalVariableExpression(var: !999, expr: !DIExpression())
!999 = distinct !DIGlobalVariable(name: "long_time_format", scope: !2, file: !3, line: 756, type: !686, isLocal: true, isDefinition: true)
!1000 = !DIGlobalVariableExpression(var: !1001, expr: !DIExpression())
!1001 = distinct !DIGlobalVariable(name: "time_style_args", scope: !2, file: !3, line: 441, type: !672, isLocal: true, isDefinition: true)
!1002 = !DIGlobalVariableExpression(var: !1003, expr: !DIExpression())
!1003 = distinct !DIGlobalVariable(name: "time_style_types", scope: !2, file: !3, line: 445, type: !688, isLocal: true, isDefinition: true)
!1004 = !DIGlobalVariableExpression(var: !1005, expr: !DIExpression())
!1005 = distinct !DIGlobalVariable(name: "abformat", scope: !2, file: !3, line: 1107, type: !703, isLocal: true, isDefinition: true)
!1006 = !DIGlobalVariableExpression(var: !1007, expr: !DIExpression())
!1007 = distinct !DIGlobalVariable(name: "use_abformat", scope: !2, file: !3, line: 1111, type: !141, isLocal: true, isDefinition: true)
!1008 = !DIGlobalVariableExpression(var: !1009, expr: !DIExpression())
!1009 = distinct !DIGlobalVariable(name: "G_line", scope: !2, file: !1010, line: 1, type: !722, isLocal: true, isDefinition: true)
!1010 = !DIFile(filename: "src/dircolors.h", directory: "/home/mbarbar/software/coreutils-8.31")
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "color_buf", scope: !2, file: !3, line: 640, type: !143, isLocal: true, isDefinition: true)
!1013 = !DIGlobalVariableExpression(var: !1014, expr: !DIExpression())
!1014 = distinct !DIGlobalVariable(name: "color_ext_list", scope: !2, file: !3, line: 637, type: !710, isLocal: true, isDefinition: true)
!1015 = !DIGlobalVariableExpression(var: !1016, expr: !DIExpression())
!1016 = distinct !DIGlobalVariable(name: "indicator_name", scope: !2, file: !3, line: 594, type: !716, isLocal: true, isDefinition: true)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "first", scope: !1019, file: !3, line: 2725, type: !141, isLocal: true, isDefinition: true)
!1019 = distinct !DISubprogram(name: "print_dir", scope: !3, file: !3, line: 2720, type: !1020, scopeLine: 2721, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1020 = !DISubroutineType(types: !1021)
!1021 = !{null, !146, !146, !141}
!1022 = !DIGlobalVariableExpression(var: !1023, expr: !DIExpression())
!1023 = distinct !DIGlobalVariable(name: "cwd_some_quoted", scope: !2, file: !3, line: 339, type: !141, isLocal: true, isDefinition: true)
!1024 = !DIGlobalVariableExpression(var: !1025, expr: !DIExpression())
!1025 = distinct !DIGlobalVariable(name: "sorted_file", scope: !2, file: !3, line: 347, type: !767, isLocal: true, isDefinition: true)
!1026 = !DIGlobalVariableExpression(var: !1027, expr: !DIExpression())
!1027 = distinct !DIGlobalVariable(name: "UNKNOWN_SECURITY_CONTEXT", scope: !2, file: !3, line: 386, type: !261, isLocal: true, isDefinition: true)
!1028 = !DIGlobalVariableExpression(var: !1029, expr: !DIExpression())
!1029 = distinct !DIGlobalVariable(name: "any_has_acl", scope: !2, file: !3, line: 391, type: !141, isLocal: true, isDefinition: true)
!1030 = !DIGlobalVariableExpression(var: !1031, expr: !DIExpression())
!1031 = distinct !DIGlobalVariable(name: "inode_number_width", scope: !2, file: !3, line: 397, type: !27, isLocal: true, isDefinition: true)
!1032 = !DIGlobalVariableExpression(var: !1033, expr: !DIExpression())
!1033 = distinct !DIGlobalVariable(name: "block_size_width", scope: !2, file: !3, line: 398, type: !27, isLocal: true, isDefinition: true)
!1034 = !DIGlobalVariableExpression(var: !1035, expr: !DIExpression())
!1035 = distinct !DIGlobalVariable(name: "nlink_width", scope: !2, file: !3, line: 399, type: !27, isLocal: true, isDefinition: true)
!1036 = !DIGlobalVariableExpression(var: !1037, expr: !DIExpression())
!1037 = distinct !DIGlobalVariable(name: "owner_width", scope: !2, file: !3, line: 401, type: !27, isLocal: true, isDefinition: true)
!1038 = !DIGlobalVariableExpression(var: !1039, expr: !DIExpression())
!1039 = distinct !DIGlobalVariable(name: "group_width", scope: !2, file: !3, line: 402, type: !27, isLocal: true, isDefinition: true)
!1040 = !DIGlobalVariableExpression(var: !1041, expr: !DIExpression())
!1041 = distinct !DIGlobalVariable(name: "author_width", scope: !2, file: !3, line: 403, type: !27, isLocal: true, isDefinition: true)
!1042 = !DIGlobalVariableExpression(var: !1043, expr: !DIExpression())
!1043 = distinct !DIGlobalVariable(name: "scontext_width", scope: !2, file: !3, line: 400, type: !27, isLocal: true, isDefinition: true)
!1044 = !DIGlobalVariableExpression(var: !1045, expr: !DIExpression())
!1045 = distinct !DIGlobalVariable(name: "major_device_number_width", scope: !2, file: !3, line: 404, type: !27, isLocal: true, isDefinition: true)
!1046 = !DIGlobalVariableExpression(var: !1047, expr: !DIExpression())
!1047 = distinct !DIGlobalVariable(name: "minor_device_number_width", scope: !2, file: !3, line: 405, type: !27, isLocal: true, isDefinition: true)
!1048 = !DIGlobalVariableExpression(var: !1049, expr: !DIExpression())
!1049 = distinct !DIGlobalVariable(name: "file_size_width", scope: !2, file: !3, line: 406, type: !27, isLocal: true, isDefinition: true)
!1050 = !DIGlobalVariableExpression(var: !1051, expr: !DIExpression())
!1051 = distinct !DIGlobalVariable(name: "unsupported_device", scope: !1052, file: !3, line: 3084, type: !271, isLocal: true, isDefinition: true)
!1052 = distinct !DISubprogram(name: "has_capability_cache", scope: !3, file: !3, line: 3080, type: !1053, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1053 = !DISubroutineType(types: !1054)
!1054 = !{!141, !146, !260}
!1055 = !DIGlobalVariableExpression(var: !1056, expr: !DIExpression())
!1056 = distinct !DIGlobalVariable(name: "unsupported_device", scope: !1057, file: !3, line: 3029, type: !271, isLocal: true, isDefinition: true)
!1057 = distinct !DISubprogram(name: "getfilecon_cache", scope: !3, file: !3, line: 3025, type: !1058, scopeLine: 3026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1058 = !DISubroutineType(types: !1059)
!1059 = !{!27, !146, !260, !141}
!1060 = !DIGlobalVariableExpression(var: !1061, expr: !DIExpression())
!1061 = distinct !DIGlobalVariable(name: "unsupported_device", scope: !1062, file: !3, line: 3059, type: !271, isLocal: true, isDefinition: true)
!1062 = distinct !DISubprogram(name: "file_has_acl_cache", scope: !3, file: !3, line: 3055, type: !1063, scopeLine: 3056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!27, !146, !260}
!1065 = !DIGlobalVariableExpression(var: !1066, expr: !DIExpression())
!1066 = distinct !DIGlobalVariable(name: "sorted_file_alloc", scope: !2, file: !3, line: 348, type: !149, isLocal: true, isDefinition: true)
!1067 = !DIGlobalVariableExpression(var: !1068, expr: !DIExpression())
!1068 = distinct !DIGlobalVariable(name: "failed_strcoll", scope: !2, file: !3, line: 3564, type: !776, isLocal: true, isDefinition: true)
!1069 = !DIGlobalVariableExpression(var: !1070, expr: !DIExpression())
!1070 = distinct !DIGlobalVariable(name: "sort_functions", scope: !2, file: !3, line: 3741, type: !791, isLocal: true, isDefinition: true)
!1071 = !DIGlobalVariableExpression(var: !1072, expr: !DIExpression())
!1072 = distinct !DIGlobalVariable(name: "filetype_indicator", scope: !1073, file: !3, line: 4710, type: !812, isLocal: true, isDefinition: true)
!1073 = distinct !DISubprogram(name: "get_color_indicator", scope: !3, file: !3, line: 4682, type: !1074, scopeLine: 4683, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1074 = !DISubroutineType(types: !1075)
!1075 = !{!810, !183, !141}
!1076 = !DIGlobalVariableExpression(var: !1077, expr: !DIExpression())
!1077 = distinct !DIGlobalVariable(name: "column_info_alloc", scope: !1078, file: !3, line: 5015, type: !149, isLocal: true, isDefinition: true)
!1078 = distinct !DISubprogram(name: "init_column_info", scope: !3, file: !3, line: 5009, type: !532, scopeLine: 5010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1079 = !DIGlobalVariableExpression(var: !1080, expr: !DIExpression())
!1080 = distinct !DIGlobalVariable(name: "column_info", scope: !2, file: !3, line: 945, type: !821, isLocal: true, isDefinition: true)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "filetype_letter", scope: !2, file: !3, line: 180, type: !825, isLocal: true, isDefinition: true)
!1083 = !DIGlobalVariableExpression(var: !1084, expr: !DIExpression())
!1084 = distinct !DIGlobalVariable(name: "width", scope: !1085, file: !3, line: 3895, type: !27, isLocal: true, isDefinition: true)
!1085 = distinct !DISubprogram(name: "long_time_expected_width", scope: !3, file: !3, line: 3893, type: !1086, scopeLine: 3894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{!27}
!1088 = !DIGlobalVariableExpression(var: !1089, expr: !DIExpression())
!1089 = distinct !DIGlobalVariable(name: "ls_mode", scope: !1090, file: !1091, line: 2, type: !27, isLocal: false, isDefinition: true)
!1090 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1091, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1087, globals: !1092, nameTableKind: None)
!1091 = !DIFile(filename: "src/ls-ls.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1092 = !{!1088}
!1093 = !DIGlobalVariableExpression(var: !1094, expr: !DIExpression())
!1094 = distinct !DIGlobalVariable(name: "Version", scope: !1095, file: !1096, line: 2, type: !146, isLocal: false, isDefinition: true)
!1095 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1096, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1097, globals: !1098, nameTableKind: None)
!1096 = !DIFile(filename: "src/version.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1097 = !{!146}
!1098 = !{!1093}
!1099 = !DIGlobalVariableExpression(var: !1100, expr: !DIExpression())
!1100 = distinct !DIGlobalVariable(name: "argmatch_die", scope: !1101, file: !1139, line: 69, type: !656, isLocal: false, isDefinition: true)
!1101 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1102, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1103, globals: !1138, nameTableKind: None)
!1102 = !DIFile(filename: "./lib/argmatch.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1103 = !{!167, !656, !149, !687, !141, !693, !147, !146, !850, !683, !743, !1104, !622, !447}
!1104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1105, size: 64)
!1105 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1106)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1107)
!1107 = !{!1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1106, file: !290, line: 51, baseType: !27, size: 32)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1106, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1106, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1106, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1106, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1106, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1106, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1106, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1106, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1106, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1106, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1106, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1106, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1106, file: !290, line: 70, baseType: !1122, size: 64, offset: 832)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1106, size: 64)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1106, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1106, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1106, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1106, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1106, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1106, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1106, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1106, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1106, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1106, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1106, file: !290, line: 93, baseType: !1122, size: 64, offset: 1344)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1106, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1106, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1106, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1106, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1138 = !{!1099}
!1139 = !DIFile(filename: "lib/argmatch.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1140 = !DIGlobalVariableExpression(var: !1141, expr: !DIExpression())
!1141 = distinct !DIGlobalVariable(name: "file_name", scope: !1142, file: !1182, line: 46, type: !146, isLocal: true, isDefinition: true)
!1142 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1143, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1144, globals: !1179, nameTableKind: None)
!1143 = !DIFile(filename: "./lib/closeout.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1144 = !{!146, !141, !1145, !27, !666, !644, !255, !450}
!1145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1146, size: 64)
!1146 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1147)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1148)
!1148 = !{!1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1147, file: !290, line: 51, baseType: !27, size: 32)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1147, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1147, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1147, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1147, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1147, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1147, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1147, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1147, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1147, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1147, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1147, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1147, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1147, file: !290, line: 70, baseType: !1163, size: 64, offset: 832)
!1163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1147, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1147, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1147, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1147, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1147, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1147, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1147, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1147, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1147, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1147, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1147, file: !290, line: 93, baseType: !1163, size: 64, offset: 1344)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1147, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1147, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1147, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1147, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1179 = !{!1140, !1180}
!1180 = !DIGlobalVariableExpression(var: !1181, expr: !DIExpression())
!1181 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !1142, file: !1182, line: 56, type: !141, isLocal: true, isDefinition: true)
!1182 = !DIFile(filename: "lib/closeout.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1183 = !DIGlobalVariableExpression(var: !1184, expr: !DIExpression())
!1184 = distinct !DIGlobalVariable(name: "exit_failure", scope: !1185, file: !1189, line: 24, type: !450, isLocal: false, isDefinition: true)
!1185 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1186, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1187, globals: !1188, nameTableKind: None)
!1186 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1187 = !{!450}
!1188 = !{!1183}
!1189 = !DIFile(filename: "lib/exitfail.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1190 = !DIGlobalVariableExpression(var: !1191, expr: !DIExpression())
!1191 = distinct !DIGlobalVariable(name: "default_tuning", scope: !1192, file: !1198, line: 130, type: !1214, isLocal: true, isDefinition: true)
!1192 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1193, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1194, globals: !1238, nameTableKind: None)
!1193 = !DIFile(filename: "./lib/hash.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1194 = !{!151, !167, !149, !1195, !1207, !1201, !248, !357, !1230, !767, !737, !147, !1214, !1237, !1196, !1213, !1225, !1235, !181, !1219, !141, !27}
!1195 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_table", file: !253, line: 69, baseType: !1197)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_table", file: !1198, line: 52, size: 640, elements: !1199)
!1198 = !DIFile(filename: "lib/hash.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1199 = !{!1200, !1206, !1209, !1210, !1211, !1212, !1224, !1229, !1234, !1236}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "bucket", scope: !1197, file: !1198, line: 57, baseType: !1201, size: 64)
!1201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1202, size: 64)
!1202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_entry", file: !1198, line: 46, size: 128, elements: !1203)
!1203 = !{!1204, !1205}
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1202, file: !1198, line: 48, baseType: !167, size: 64)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1202, file: !1198, line: 49, baseType: !1201, size: 64, offset: 64)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "bucket_limit", scope: !1197, file: !1198, line: 58, baseType: !1207, size: 64, offset: 64)
!1207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1208 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1202)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "n_buckets", scope: !1197, file: !1198, line: 59, baseType: !149, size: 64, offset: 128)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "n_buckets_used", scope: !1197, file: !1198, line: 60, baseType: !149, size: 64, offset: 192)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "n_entries", scope: !1197, file: !1198, line: 61, baseType: !149, size: 64, offset: 256)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "tuning", scope: !1197, file: !1198, line: 64, baseType: !1213, size: 64, offset: 320)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1214, size: 64)
!1214 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1215)
!1215 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_tuning", file: !253, line: 65, baseType: !1216)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_tuning", file: !253, line: 53, size: 160, elements: !1217)
!1217 = !{!1218, !1220, !1221, !1222, !1223}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "shrink_threshold", scope: !1216, file: !253, line: 58, baseType: !1219, size: 32)
!1219 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "shrink_factor", scope: !1216, file: !253, line: 59, baseType: !1219, size: 32, offset: 32)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "growth_threshold", scope: !1216, file: !253, line: 60, baseType: !1219, size: 32, offset: 64)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "growth_factor", scope: !1216, file: !253, line: 61, baseType: !1219, size: 32, offset: 96)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "is_n_buckets", scope: !1216, file: !253, line: 62, baseType: !141, size: 8, offset: 128)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "hasher", scope: !1197, file: !1198, line: 71, baseType: !1225, size: 64, offset: 384)
!1225 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_hasher", file: !253, line: 48, baseType: !1226)
!1226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1227, size: 64)
!1227 = !DISubroutineType(types: !1228)
!1228 = !{!149, !181, !149}
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "comparator", scope: !1197, file: !1198, line: 72, baseType: !1230, size: 64, offset: 448)
!1230 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_comparator", file: !253, line: 49, baseType: !1231)
!1231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1232, size: 64)
!1232 = !DISubroutineType(types: !1233)
!1233 = !{!141, !181, !181}
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "data_freer", scope: !1197, file: !1198, line: 73, baseType: !1235, size: 64, offset: 512)
!1235 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_data_freer", file: !253, line: 50, baseType: !494)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "free_entry_list", scope: !1197, file: !1198, line: 76, baseType: !1201, size: 64, offset: 576)
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1238 = !{!1190}
!1239 = !DIGlobalVariableExpression(var: !1240, expr: !DIExpression())
!1240 = distinct !DIGlobalVariable(name: "power_letter", scope: !1241, file: !1282, line: 36, type: !1275, isLocal: true, isDefinition: true)
!1241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1242, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1243, retainedTypes: !1244, globals: !1279, nameTableKind: None)
!1242 = !DIFile(filename: "./lib/human.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1243 = !{!109}
!1244 = !{!146, !27, !6, !168, !143, !261, !149, !242, !1245, !144, !1274, !272, !1275, !1276, !351, !737, !147, !679, !245, !1277, !1278, !669, !675}
!1245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1246, size: 64)
!1246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1247)
!1247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !1248, line: 51, size: 768, elements: !1249)
!1248 = !DIFile(filename: "/usr/include/locale.h", directory: "")
!1249 = !{!1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273}
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "decimal_point", scope: !1247, file: !1248, line: 55, baseType: !143, size: 64)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "thousands_sep", scope: !1247, file: !1248, line: 56, baseType: !143, size: 64, offset: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "grouping", scope: !1247, file: !1248, line: 62, baseType: !143, size: 64, offset: 128)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "int_curr_symbol", scope: !1247, file: !1248, line: 68, baseType: !143, size: 64, offset: 192)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "currency_symbol", scope: !1247, file: !1248, line: 69, baseType: !143, size: 64, offset: 256)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "mon_decimal_point", scope: !1247, file: !1248, line: 70, baseType: !143, size: 64, offset: 320)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "mon_thousands_sep", scope: !1247, file: !1248, line: 71, baseType: !143, size: 64, offset: 384)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "mon_grouping", scope: !1247, file: !1248, line: 72, baseType: !143, size: 64, offset: 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "positive_sign", scope: !1247, file: !1248, line: 73, baseType: !143, size: 64, offset: 512)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "negative_sign", scope: !1247, file: !1248, line: 74, baseType: !143, size: 64, offset: 576)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "int_frac_digits", scope: !1247, file: !1248, line: 75, baseType: !144, size: 8, offset: 640)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "frac_digits", scope: !1247, file: !1248, line: 76, baseType: !144, size: 8, offset: 648)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "p_cs_precedes", scope: !1247, file: !1248, line: 78, baseType: !144, size: 8, offset: 656)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "p_sep_by_space", scope: !1247, file: !1248, line: 80, baseType: !144, size: 8, offset: 664)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "n_cs_precedes", scope: !1247, file: !1248, line: 82, baseType: !144, size: 8, offset: 672)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "n_sep_by_space", scope: !1247, file: !1248, line: 84, baseType: !144, size: 8, offset: 680)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "p_sign_posn", scope: !1247, file: !1248, line: 91, baseType: !144, size: 8, offset: 688)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "n_sign_posn", scope: !1247, file: !1248, line: 92, baseType: !144, size: 8, offset: 696)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_cs_precedes", scope: !1247, file: !1248, line: 95, baseType: !144, size: 8, offset: 704)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_sep_by_space", scope: !1247, file: !1248, line: 97, baseType: !144, size: 8, offset: 712)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_cs_precedes", scope: !1247, file: !1248, line: 99, baseType: !144, size: 8, offset: 720)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_sep_by_space", scope: !1247, file: !1248, line: 101, baseType: !144, size: 8, offset: 728)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_sign_posn", scope: !1247, file: !1248, line: 108, baseType: !144, size: 8, offset: 736)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_sign_posn", scope: !1247, file: !1248, line: 109, baseType: !144, size: 8, offset: 744)
!1274 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!1275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 72, elements: !276)
!1276 = !DIDerivedType(tag: DW_TAG_typedef, name: "strtol_error", file: !110, line: 39, baseType: !109)
!1277 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 192, elements: !224)
!1278 = !DICompositeType(tag: DW_TAG_array_type, baseType: !520, size: 64, elements: !262)
!1279 = !{!1239, !1280, !1283}
!1280 = !DIGlobalVariableExpression(var: !1281, expr: !DIExpression())
!1281 = distinct !DIGlobalVariable(name: "block_size_args", scope: !1241, file: !1282, line: 398, type: !1277, isLocal: true, isDefinition: true)
!1282 = !DIFile(filename: "lib/human.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1283 = !DIGlobalVariableExpression(var: !1284, expr: !DIExpression())
!1284 = distinct !DIGlobalVariable(name: "block_size_opts", scope: !1241, file: !1282, line: 399, type: !1278, isLocal: true, isDefinition: true)
!1285 = !DIGlobalVariableExpression(var: !1286, expr: !DIExpression())
!1286 = distinct !DIGlobalVariable(name: "user_alist", scope: !1287, file: !1292, line: 55, type: !1290, isLocal: true, isDefinition: true)
!1287 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1288, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1289, globals: !1322, nameTableKind: None)
!1288 = !DIFile(filename: "./lib/idcache.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1289 = !{!167, !1290, !1295, !1303, !146, !143, !242, !469, !144, !147, !203, !1314, !205}
!1290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1291, size: 64)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "userid", file: !1292, line: 37, size: 128, elements: !1293)
!1292 = !DIFile(filename: "lib/idcache.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1293 = !{!1294, !1301, !1302}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1291, file: !1292, line: 43, baseType: !1295, size: 32)
!1295 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1291, file: !1292, line: 39, size: 32, elements: !1296)
!1296 = !{!1297, !1299}
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1295, file: !1292, line: 41, baseType: !1298, size: 32)
!1298 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !178, line: 79, baseType: !203)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1295, file: !1292, line: 42, baseType: !1300, size: 32)
!1300 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !178, line: 64, baseType: !205)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1291, file: !1292, line: 44, baseType: !1290, size: 64, offset: 64)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1291, file: !1292, line: 45, baseType: !469, offset: 128)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !1305, line: 49, size: 384, elements: !1306)
!1305 = !DIFile(filename: "/usr/include/pwd.h", directory: "")
!1306 = !{!1307, !1308, !1309, !1310, !1311, !1312, !1313}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1304, file: !1305, line: 51, baseType: !143, size: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1304, file: !1305, line: 52, baseType: !143, size: 64, offset: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1304, file: !1305, line: 54, baseType: !203, size: 32, offset: 128)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1304, file: !1305, line: 55, baseType: !205, size: 32, offset: 160)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1304, file: !1305, line: 56, baseType: !143, size: 64, offset: 192)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1304, file: !1305, line: 57, baseType: !143, size: 64, offset: 256)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1304, file: !1305, line: 58, baseType: !143, size: 64, offset: 320)
!1314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1315, size: 64)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1316, line: 42, size: 256, elements: !1317)
!1316 = !DIFile(filename: "/usr/include/grp.h", directory: "")
!1317 = !{!1318, !1319, !1320, !1321}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1315, file: !1316, line: 44, baseType: !143, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1315, file: !1316, line: 45, baseType: !143, size: 64, offset: 64)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1315, file: !1316, line: 46, baseType: !205, size: 32, offset: 128)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1315, file: !1316, line: 47, baseType: !142, size: 64, offset: 192)
!1322 = !{!1285, !1323, !1325, !1327}
!1323 = !DIGlobalVariableExpression(var: !1324, expr: !DIExpression())
!1324 = distinct !DIGlobalVariable(name: "nouser_alist", scope: !1287, file: !1292, line: 58, type: !1290, isLocal: true, isDefinition: true)
!1325 = !DIGlobalVariableExpression(var: !1326, expr: !DIExpression())
!1326 = distinct !DIGlobalVariable(name: "group_alist", scope: !1287, file: !1292, line: 61, type: !1290, isLocal: true, isDefinition: true)
!1327 = !DIGlobalVariableExpression(var: !1328, expr: !DIExpression())
!1328 = distinct !DIGlobalVariable(name: "nogroup_alist", scope: !1287, file: !1292, line: 64, type: !1290, isLocal: true, isDefinition: true)
!1329 = !DIGlobalVariableExpression(var: !1330, expr: !DIExpression())
!1330 = distinct !DIGlobalVariable(name: "program_name", scope: !1331, file: !1372, line: 33, type: !146, isLocal: false, isDefinition: true)
!1331 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1332, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1333, globals: !1371, nameTableKind: None)
!1332 = !DIFile(filename: "./lib/progname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1333 = !{!167, !143, !146, !1334, !1337, !147, !622, !444}
!1334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 448, elements: !1335)
!1335 = !{!1336}
!1336 = !DISubrange(count: 56)
!1337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1338, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1339)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1340)
!1340 = !{!1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1339, file: !290, line: 51, baseType: !27, size: 32)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1339, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1339, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1339, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1339, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1339, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1339, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1339, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1339, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1339, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1339, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1339, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1339, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1339, file: !290, line: 70, baseType: !1355, size: 64, offset: 832)
!1355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1339, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1339, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1339, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1339, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1339, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1339, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1339, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1339, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1339, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1339, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1339, file: !290, line: 93, baseType: !1355, size: 64, offset: 1344)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1339, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1339, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1339, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1339, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1371 = !{!1329}
!1372 = !DIFile(filename: "lib/progname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1373 = !DIGlobalVariableExpression(var: !1374, expr: !DIExpression())
!1374 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1375, file: !1383, line: 85, type: !1379, isLocal: false, isDefinition: true)
!1375 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1376, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1377, retainedTypes: !1378, globals: !1412, nameTableKind: None)
!1376 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1377 = !{!95}
!1378 = !{!27, !176, !149, !1379, !1380, !1381, !737, !1391, !1388, !6, !146, !1392, !1394, !143, !1395, !453, !141, !261, !147, !708, !1400, !764, !1410, !272, !444, !622, !255}
!1379 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 704, elements: !680)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !674, size: 320, elements: !246)
!1381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1382, size: 64)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !1383, line: 65, size: 448, elements: !1384)
!1383 = !DIFile(filename: "lib/quotearg.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1384 = !{!1385, !1386, !1387, !1389, !1390}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1382, file: !1383, line: 68, baseType: !95, size: 32)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1382, file: !1383, line: 71, baseType: !27, size: 32, offset: 32)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1382, file: !1383, line: 75, baseType: !1388, size: 256, offset: 64)
!1388 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, elements: !623)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1382, file: !1383, line: 78, baseType: !146, size: 64, offset: 320)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1382, file: !1383, line: 81, baseType: !146, size: 64, offset: 384)
!1391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1382)
!1394 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1388)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !1383, line: 834, size: 128, elements: !1397)
!1397 = !{!1398, !1399}
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1396, file: !1383, line: 836, baseType: !149, size: 64)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1396, file: !1383, line: 837, baseType: !143, size: 64, offset: 64)
!1400 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !753, line: 6, baseType: !1401)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !755, line: 21, baseType: !1402)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !755, line: 13, size: 64, elements: !1403)
!1403 = !{!1404, !1405}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1402, file: !755, line: 15, baseType: !27, size: 32)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1402, file: !755, line: 20, baseType: !1406, size: 32, offset: 32)
!1406 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1402, file: !755, line: 16, size: 32, elements: !1407)
!1407 = !{!1408, !1409}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1406, file: !755, line: 18, baseType: !6, size: 32)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1406, file: !755, line: 19, baseType: !444, size: 32)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!1411 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!1412 = !{!1373, !1413, !1415, !1417, !1419, !1421, !1423, !1425}
!1413 = !DIGlobalVariableExpression(var: !1414, expr: !DIExpression())
!1414 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1375, file: !1383, line: 101, type: !1380, isLocal: false, isDefinition: true)
!1415 = !DIGlobalVariableExpression(var: !1416, expr: !DIExpression())
!1416 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1375, file: !1383, line: 1052, type: !1382, isLocal: false, isDefinition: true)
!1417 = !DIGlobalVariableExpression(var: !1418, expr: !DIExpression())
!1418 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1375, file: !1383, line: 116, type: !1382, isLocal: true, isDefinition: true)
!1419 = !DIGlobalVariableExpression(var: !1420, expr: !DIExpression())
!1420 = distinct !DIGlobalVariable(name: "slot0", scope: !1375, file: !1383, line: 842, type: !453, isLocal: true, isDefinition: true)
!1421 = !DIGlobalVariableExpression(var: !1422, expr: !DIExpression())
!1422 = distinct !DIGlobalVariable(name: "slotvec", scope: !1375, file: !1383, line: 845, type: !1395, isLocal: true, isDefinition: true)
!1423 = !DIGlobalVariableExpression(var: !1424, expr: !DIExpression())
!1424 = distinct !DIGlobalVariable(name: "nslots", scope: !1375, file: !1383, line: 843, type: !27, isLocal: true, isDefinition: true)
!1425 = !DIGlobalVariableExpression(var: !1426, expr: !DIExpression())
!1426 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1375, file: !1383, line: 844, type: !1396, isLocal: true, isDefinition: true)
!1427 = !DIGlobalVariableExpression(var: !1428, expr: !DIExpression())
!1428 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !1429, file: !1436, line: 26, type: !1432, isLocal: false, isDefinition: true)
!1429 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1430, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1431, globals: !1435, nameTableKind: None)
!1430 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1431 = !{!1432}
!1432 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 376, elements: !1433)
!1433 = !{!1434}
!1434 = !DISubrange(count: 47)
!1435 = !{!1427}
!1436 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1437 = !DIGlobalVariableExpression(var: !1438, expr: !DIExpression())
!1438 = distinct !DIGlobalVariable(name: "obstack_alloc_failed_handler", scope: !1439, file: !1510, line: 351, type: !531, isLocal: false, isDefinition: true)
!1439 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1440, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1441, globals: !1509, nameTableKind: None)
!1440 = !DIFile(filename: "./lib/obstack.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1441 = !{!143, !167, !1442, !1464, !1447, !149, !531, !144, !469, !27, !1475, !444, !650, !450}
!1442 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1443, file: !459, line: 189, size: 64, elements: !1472)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !459, line: 174, size: 704, elements: !1444)
!1444 = !{!1445, !1446, !1453, !1454, !1455, !1456, !1461, !1462, !1463, !1468, !1469, !1470, !1471}
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1443, file: !459, line: 176, baseType: !149, size: 64)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1443, file: !459, line: 177, baseType: !1447, size: 64, offset: 64)
!1447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1448, size: 64)
!1448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !459, line: 167, size: 128, elements: !1449)
!1449 = !{!1450, !1451, !1452}
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1448, file: !459, line: 169, baseType: !143, size: 64)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1448, file: !459, line: 170, baseType: !1447, size: 64, offset: 64)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1448, file: !459, line: 171, baseType: !469, offset: 128)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1443, file: !459, line: 178, baseType: !143, size: 64, offset: 128)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1443, file: !459, line: 179, baseType: !143, size: 64, offset: 192)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1443, file: !459, line: 180, baseType: !143, size: 64, offset: 256)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1443, file: !459, line: 185, baseType: !1457, size: 64, offset: 320)
!1457 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1443, file: !459, line: 181, size: 64, elements: !1458)
!1458 = !{!1459, !1460}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1457, file: !459, line: 183, baseType: !149, size: 64)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !1457, file: !459, line: 184, baseType: !167, size: 64)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1443, file: !459, line: 186, baseType: !149, size: 64, offset: 384)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1443, file: !459, line: 193, baseType: !1442, size: 64, offset: 448)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1443, file: !459, line: 198, baseType: !1464, size: 64, offset: 512)
!1464 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1443, file: !459, line: 194, size: 64, elements: !1465)
!1465 = !{!1466, !1467}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1464, file: !459, line: 196, baseType: !494, size: 64)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1464, file: !459, line: 197, baseType: !498, size: 64)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1443, file: !459, line: 200, baseType: !167, size: 64, offset: 576)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1443, file: !459, line: 201, baseType: !6, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1443, file: !459, line: 202, baseType: !6, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1443, file: !459, line: 206, baseType: !6, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1472 = !{!1473, !1474}
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1442, file: !459, line: 191, baseType: !483, size: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1442, file: !459, line: 192, baseType: !487, size: 64)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1477)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1478)
!1478 = !{!1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1477, file: !290, line: 51, baseType: !27, size: 32)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1477, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1477, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1477, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1477, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1477, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1477, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1477, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1477, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1477, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1477, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1477, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1477, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1477, file: !290, line: 70, baseType: !1493, size: 64, offset: 832)
!1493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1477, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1477, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1477, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1477, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1477, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1477, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1477, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1477, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1477, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1477, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1477, file: !290, line: 93, baseType: !1493, size: 64, offset: 1344)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1477, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1477, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1477, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1477, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1509 = !{!1437}
!1510 = !DIFile(filename: "lib/obstack.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1511 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1512, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1513, nameTableKind: None)
!1512 = !DIFile(filename: "./lib/areadlink-with-size.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1513 = !{!167, !149, !1514, !143, !27}
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !178, line: 108, baseType: !1515)
!1515 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !165, line: 193, baseType: !166)
!1516 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1517, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, nameTableKind: None)
!1517 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1518 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1519, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1520, nameTableKind: None)
!1519 = !DIFile(filename: "./lib/c-strncasecmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1520 = !{!1521, !737, !1522}
!1521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1522, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !737)
!1523 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1524, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1525, retainedTypes: !1533, nameTableKind: None)
!1524 = !DIFile(filename: "./lib/canonicalize.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1525 = !{!1526}
!1526 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "canonicalize_mode_t", file: !1527, line: 24, baseType: !6, size: 32, elements: !1528)
!1527 = !DIFile(filename: "./lib/canonicalize.h", directory: "/home/mbarbar/software/coreutils-8.31")
!1528 = !{!1529, !1530, !1531, !1532}
!1529 = !DIEnumerator(name: "CAN_EXISTING", value: 0, isUnsigned: true)
!1530 = !DIEnumerator(name: "CAN_ALL_BUT_LAST", value: 1, isUnsigned: true)
!1531 = !DIEnumerator(name: "CAN_MISSING", value: 2, isUnsigned: true)
!1532 = !DIEnumerator(name: "CAN_NOLINKS", value: 4, isUnsigned: true)
!1533 = !{!167, !143, !146, !149, !251, !27, !141, !144, !147, !687, !201, !261, !179}
!1534 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1535, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1536, nameTableKind: None)
!1535 = !DIFile(filename: "./lib/dirname-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1536 = !{!149, !146, !141, !143}
!1537 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1538, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1539, nameTableKind: None)
!1538 = !DIFile(filename: "./lib/basename-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1539 = !{!143, !146, !147, !141, !149}
!1540 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1541, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1542, nameTableKind: None)
!1541 = !DIFile(filename: "./lib/file-has-acl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1542 = !{!167, !201, !1514, !248, !27, !739}
!1543 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1544, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1545, nameTableKind: None)
!1544 = !DIFile(filename: "./lib/file-set.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1545 = !{!167, !143, !1546, !197, !269, !195, !271}
!1546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1547, size: 64)
!1547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "F_triple", file: !1548, line: 9, size: 192, elements: !1549)
!1548 = !DIFile(filename: "./lib/hash-triple.h", directory: "/home/mbarbar/software/coreutils-8.31")
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1547, file: !1548, line: 11, baseType: !143, size: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1547, file: !1548, line: 12, baseType: !269, size: 64, offset: 64)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1547, file: !1548, line: 13, baseType: !271, size: 64, offset: 128)
!1553 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1554, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1555, nameTableKind: None)
!1554 = !DIFile(filename: "./lib/filemode.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1555 = !{!143, !201}
!1556 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1557, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1558, nameTableKind: None)
!1557 = !DIFile(filename: "./lib/filenamecat.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1558 = !{!167, !143}
!1559 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1560, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1561, nameTableKind: None)
!1560 = !DIFile(filename: "./lib/filenamecat-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1561 = !{!167, !146, !149, !144, !147, !143}
!1562 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1563, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1564, nameTableKind: None)
!1563 = !DIFile(filename: "./lib/filevercmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1564 = !{!27, !146, !149, !147, !261, !255, !141}
!1565 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1566, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, nameTableKind: None)
!1566 = !DIFile(filename: "./lib/gettime.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1567 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1568, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1569, nameTableKind: None)
!1568 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1569 = !{!141, !146, !261, !272}
!1570 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1571, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1572, nameTableKind: None)
!1571 = !DIFile(filename: "./lib/hash-triple.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1572 = !{!1573, !149, !143, !269, !271, !1580}
!1573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1574, size: 64)
!1574 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1575)
!1575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "F_triple", file: !1548, line: 9, size: 192, elements: !1576)
!1576 = !{!1577, !1578, !1579}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1575, file: !1548, line: 11, baseType: !143, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1575, file: !1548, line: 12, baseType: !269, size: 64, offset: 64)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1575, file: !1548, line: 13, baseType: !271, size: 64, offset: 128)
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1581 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1582, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1583, nameTableKind: None)
!1582 = !DIFile(filename: "./lib/imaxtostr.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1583 = !{!1584, !143, !144}
!1584 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !169, line: 101, baseType: !1585)
!1585 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !165, line: 72, baseType: !166)
!1586 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1587, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1588, nameTableKind: None)
!1587 = !DIFile(filename: "./lib/umaxtostr.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1588 = !{!168, !143, !144}
!1589 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1590, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1591, retainedTypes: !1592, nameTableKind: None)
!1590 = !DIFile(filename: "./lib/mbsalign.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1591 = !{!123}
!1592 = !{!167, !1593, !149, !143, !1595, !146, !141, !144, !764, !27}
!1593 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !1594, line: 20, baseType: !6)
!1594 = !DIFile(filename: "/usr/include/bits/types/wint_t.h", directory: "")
!1595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !764, size: 64)
!1596 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1597, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1598, nameTableKind: None)
!1597 = !DIFile(filename: "./lib/mbswidth.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1598 = !{!149, !737, !27, !176, !146, !147, !1599, !764, !708}
!1599 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !753, line: 6, baseType: !1600)
!1600 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !755, line: 21, baseType: !1601)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !755, line: 13, size: 64, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1601, file: !755, line: 15, baseType: !27, size: 32)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1601, file: !755, line: 20, baseType: !1605, size: 32, offset: 32)
!1605 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1601, file: !755, line: 16, size: 32, elements: !1606)
!1606 = !{!1607, !1608}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1605, file: !755, line: 18, baseType: !6, size: 32)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1605, file: !755, line: 19, baseType: !444, size: 32)
!1609 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1610, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1611, nameTableKind: None)
!1610 = !DIFile(filename: "./lib/mpsort.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1611 = !{!181, !180, !149}
!1612 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1613, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1614, nameTableKind: None)
!1613 = !DIFile(filename: "./lib/nstrftime.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1614 = !{!146, !6, !149, !167, !181, !737, !141, !27, !143, !242, !147, !144, !846, !447, !1615, !275, !272, !162, !166}
!1615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 8192, elements: !1616)
!1616 = !{!1617}
!1617 = !DISubrange(count: 1024)
!1618 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1619, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1620, nameTableKind: None)
!1619 = !DIFile(filename: "./lib/same.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1620 = !{!146, !149, !141, !143, !27, !255, !197, !195}
!1621 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1622, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1087, nameTableKind: None)
!1622 = !DIFile(filename: "./lib/se-selinux.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1623 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1624, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1625, nameTableKind: None)
!1624 = !DIFile(filename: "./lib/stat-time.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1625 = !{!219, !164}
!1626 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1627, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1628, nameTableKind: None)
!1627 = !DIFile(filename: "./lib/timespec.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1628 = !{!164, !219}
!1629 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1630, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1631, nameTableKind: None)
!1630 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1631 = !{!167, !666, !644, !1632, !444, !1633, !675, !693, !846, !1636, !1637, !804, !740, !631, !1640, !719, !1643, !149, !1644, !1645, !743, !690, !332, !676, !697, !1657}
!1632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, elements: !347)
!1633 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1632, elements: !1634)
!1634 = !{!1635}
!1635 = !DISubrange(count: 204)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 224, elements: !554)
!1637 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 256, elements: !1638)
!1638 = !{!1639}
!1639 = !DISubrange(count: 32)
!1640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 384, elements: !1641)
!1641 = !{!1642}
!1642 = !DISubrange(count: 48)
!1643 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 480, elements: !808)
!1644 = !DICompositeType(tag: DW_TAG_array_type, baseType: !146, size: 640, elements: !246)
!1645 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !1646, line: 52, baseType: !1647)
!1646 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!1647 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !1648, line: 32, baseType: !1649)
!1648 = !DIFile(filename: "llvm9/build/lib/clang/9.0.0/include/stdarg.h", directory: "/home/mbarbar/software")
!1649 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !1630, line: 231, baseType: !1650)
!1650 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1651, size: 192, elements: !243)
!1651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1630, line: 189, size: 192, elements: !1652)
!1652 = !{!1653, !1654, !1655, !1656}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1651, file: !1630, line: 189, baseType: !6, size: 32)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1651, file: !1630, line: 189, baseType: !6, size: 32, offset: 32)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1651, file: !1630, line: 189, baseType: !167, size: 64, offset: 64)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1651, file: !1630, line: 189, baseType: !167, size: 64, offset: 128)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1659)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1660)
!1660 = !{!1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1659, file: !290, line: 51, baseType: !27, size: 32)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1659, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1659, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1659, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1659, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1659, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1659, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1659, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1659, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1659, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1659, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1659, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1659, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1659, file: !290, line: 70, baseType: !1675, size: 64, offset: 832)
!1675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1659, size: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1659, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1659, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1659, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1659, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1659, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1659, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1659, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1659, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1659, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1659, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1659, file: !290, line: 93, baseType: !1675, size: 64, offset: 1344)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1659, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1659, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1659, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1659, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1691 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1692, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1693, nameTableKind: None)
!1692 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1693 = !{!149, !143, !167}
!1694 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1695, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1696, nameTableKind: None)
!1695 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1696 = !{!450, !255, !650}
!1697 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1698, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1243, retainedTypes: !1699, nameTableKind: None)
!1698 = !DIFile(filename: "./lib/xdectoumax.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1699 = !{!1276, !168, !27, !644}
!1700 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1701, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1702, nameTableKind: None)
!1701 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1702 = !{!143, !27}
!1703 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1704, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1705, nameTableKind: None)
!1704 = !DIFile(filename: "./lib/xgethostname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1705 = !{!143, !149, !27}
!1706 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1707, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1243, retainedTypes: !1708, nameTableKind: None)
!1707 = !DIFile(filename: "./lib/xstrtoul.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1708 = !{!27, !176, !143, !142, !151, !1276, !342, !675, !1709, !146, !737, !147, !708, !144}
!1709 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 648, elements: !1710)
!1710 = !{!1711}
!1711 = !DISubrange(count: 81)
!1712 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1713, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1243, retainedTypes: !1714, nameTableKind: None)
!1713 = !DIFile(filename: "./lib/xstrtol-error.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1714 = !{!450, !146, !255, !261, !850, !1715, !683, !147, !1718}
!1715 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 296, elements: !1716)
!1716 = !{!1717}
!1717 = !DISubrange(count: 37)
!1718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1719, size: 64)
!1719 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1720)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !637, line: 50, size: 256, elements: !1721)
!1721 = !{!1722, !1723, !1724, !1725}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1720, file: !637, line: 52, baseType: !146, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1720, file: !637, line: 55, baseType: !27, size: 32, offset: 64)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1720, file: !637, line: 56, baseType: !642, size: 64, offset: 128)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1720, file: !637, line: 57, baseType: !27, size: 32, offset: 192)
!1726 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1727, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1243, retainedTypes: !1728, nameTableKind: None)
!1727 = !DIFile(filename: "./lib/xstrtoumax.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1728 = !{!27, !176, !143, !142, !168, !1276, !342, !675, !771, !146, !737, !147, !708, !144}
!1729 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1730, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1731, nameTableKind: None)
!1730 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1731 = !{!149, !764, !737, !147}
!1732 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1733, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1734, globals: !1743, nameTableKind: None)
!1733 = !DIFile(filename: "./lib/time_rz.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1734 = !{!143, !149, !1735, !1736, !144, !469, !141, !162, !27, !255, !146, !242, !147}
!1735 = !DIDerivedType(tag: DW_TAG_typedef, name: "timezone_t", file: !257, line: 764, baseType: !1736)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm_zone", file: !1738, line: 21, size: 128, elements: !1739)
!1738 = !DIFile(filename: "./lib/time-internal.h", directory: "/home/mbarbar/software/coreutils-8.31")
!1739 = !{!1740, !1741, !1742}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1737, file: !1738, line: 25, baseType: !1736, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "tz_is_set", scope: !1737, file: !1738, line: 36, baseType: !144, size: 8, offset: 64)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "abbrs", scope: !1737, file: !1738, line: 48, baseType: !469, offset: 72)
!1743 = !{!1744}
!1744 = !DIGlobalVariableExpression(var: !1745, expr: !DIExpression())
!1745 = distinct !DIGlobalVariable(name: "local_tz", scope: !1732, file: !1746, line: 55, type: !1747, isLocal: true, isDefinition: true)
!1746 = !DIFile(filename: "lib/time_rz.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1747 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1735)
!1748 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1749, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, nameTableKind: None)
!1749 = !DIFile(filename: "./lib/acl-errno-valid.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1750 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1751, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, nameTableKind: None)
!1751 = !DIFile(filename: "./lib/bitrotate.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1752 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1753, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1520, nameTableKind: None)
!1753 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1754 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1755, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1756, nameTableKind: None)
!1755 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1756 = !{!1757, !27}
!1757 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !141)
!1758 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1759, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1760, nameTableKind: None)
!1759 = !DIFile(filename: "./lib/dirname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1760 = !{!143}
!1761 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1762, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1763, nameTableKind: None)
!1762 = !DIFile(filename: "./lib/hash-pjw.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1763 = !{!146, !149, !147}
!1764 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1765, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1766, nameTableKind: None)
!1765 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1766 = !{!167, !146, !242, !272}
!1767 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1768, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1087, nameTableKind: None)
!1768 = !DIFile(filename: "./lib/fclose.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1769 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1770, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1771, nameTableKind: None)
!1770 = !DIFile(filename: "./lib/fflush.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1771 = !{!167, !1772, !27}
!1772 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1773)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1774)
!1774 = !{!1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1773, file: !290, line: 51, baseType: !27, size: 32)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1773, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1773, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1773, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1773, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1773, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1773, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1773, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1773, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1773, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1773, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1773, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1773, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1773, file: !290, line: 70, baseType: !1789, size: 64, offset: 832)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1773, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1773, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1773, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1773, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1773, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1773, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1773, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1773, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1773, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1773, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1773, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1773, file: !290, line: 93, baseType: !1789, size: 64, offset: 1344)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1773, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1773, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1773, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1773, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1805 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1806, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !152, retainedTypes: !1807, nameTableKind: None)
!1806 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/mbarbar/software/coreutils-8.31")
!1807 = !{!167, !1808, !143, !1841, !27, !320}
!1808 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !1809)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !1810)
!1810 = !{!1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1809, file: !290, line: 51, baseType: !27, size: 32)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1809, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1809, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1809, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1809, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1809, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1809, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1809, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1809, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1809, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1809, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1809, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1809, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1809, file: !290, line: 70, baseType: !1825, size: 64, offset: 832)
!1825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1809, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1809, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1809, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1809, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1809, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1809, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1809, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1809, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1809, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1809, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1809, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1809, file: !290, line: 93, baseType: !1825, size: 64, offset: 1344)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1809, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1809, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1809, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1809, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!1841 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !1646, line: 63, baseType: !179)
!1842 = !{!"clang version 9.0.0 (https://github.com/mbarbar/tir-clang d012922f3e8c9bc45ccedab14991e1215aab9113)"}
!1843 = !{i32 2, !"ctir", i32 1}
!1844 = !{i32 2, !"Dwarf Version", i32 4}
!1845 = !{i32 2, !"Debug Info Version", i32 3}
!1846 = !{i32 1, !"wchar_size", i32 4}
!1847 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 1450, type: !934, scopeLine: 1451, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !152)
!1848 = !DILocalVariable(name: "argc", arg: 1, scope: !1847, file: !3, line: 1450, type: !27)
!1849 = !DILocation(line: 1450, column: 11, scope: !1847)
!1850 = !DILocalVariable(name: "argv", arg: 2, scope: !1847, file: !3, line: 1450, type: !142)
!1851 = !DILocation(line: 1450, column: 24, scope: !1847)
!1852 = !DILocalVariable(name: "i", scope: !1847, file: !3, line: 1452, type: !27)
!1853 = !DILocation(line: 1452, column: 7, scope: !1847)
!1854 = !DILocalVariable(name: "thispend", scope: !1847, file: !3, line: 1453, type: !235)
!1855 = !DILocation(line: 1453, column: 19, scope: !1847)
!1856 = !DILocalVariable(name: "n_files", scope: !1847, file: !3, line: 1454, type: !27)
!1857 = !DILocation(line: 1454, column: 7, scope: !1847)
!1858 = !DILocation(line: 1457, column: 21, scope: !1847)
!1859 = !DILocation(line: 1457, column: 3, scope: !1847)
!1860 = !DILocation(line: 1458, column: 3, scope: !1847)
!1861 = !DILocation(line: 1459, column: 3, scope: !1847)
!1862 = !DILocation(line: 1460, column: 3, scope: !1847)
!1863 = !DILocation(line: 1462, column: 3, scope: !1847)
!1864 = !DILocation(line: 1463, column: 3, scope: !1847)
!1865 = !DILocation(line: 1468, column: 15, scope: !1847)
!1866 = !DILocation(line: 1469, column: 18, scope: !1847)
!1867 = !DILocation(line: 1470, column: 16, scope: !1847)
!1868 = !DILocation(line: 1472, column: 23, scope: !1847)
!1869 = !DILocation(line: 1473, column: 24, scope: !1847)
!1870 = !DILocation(line: 1475, column: 24, scope: !1847)
!1871 = !DILocation(line: 1475, column: 30, scope: !1847)
!1872 = !DILocation(line: 1475, column: 7, scope: !1847)
!1873 = !DILocation(line: 1475, column: 5, scope: !1847)
!1874 = !DILocation(line: 1477, column: 7, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1477, column: 7)
!1876 = !DILocation(line: 1477, column: 7, scope: !1847)
!1877 = !DILocation(line: 1478, column: 5, scope: !1875)
!1878 = !DILocation(line: 1482, column: 7, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1482, column: 7)
!1880 = !DILocation(line: 1482, column: 7, scope: !1847)
!1881 = !DILocation(line: 1483, column: 24, scope: !1879)
!1882 = !DILocation(line: 1483, column: 5, scope: !1879)
!1883 = !DILocation(line: 1484, column: 12, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1879, file: !3, line: 1484, column: 12)
!1885 = !DILocation(line: 1484, column: 12, scope: !1879)
!1886 = !DILocation(line: 1487, column: 11, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1888, file: !3, line: 1487, column: 11)
!1888 = distinct !DILexicalBlock(scope: !1884, file: !3, line: 1485, column: 5)
!1889 = !DILocation(line: 1488, column: 11, scope: !1887)
!1890 = !DILocation(line: 1488, column: 15, scope: !1887)
!1891 = !DILocation(line: 1488, column: 35, scope: !1887)
!1892 = !DILocation(line: 1488, column: 38, scope: !1887)
!1893 = !DILocation(line: 1489, column: 11, scope: !1887)
!1894 = !DILocation(line: 1489, column: 15, scope: !1887)
!1895 = !DILocation(line: 1489, column: 38, scope: !1887)
!1896 = !DILocation(line: 1489, column: 41, scope: !1887)
!1897 = !DILocation(line: 1489, column: 48, scope: !1887)
!1898 = !DILocation(line: 1487, column: 11, scope: !1888)
!1899 = !DILocation(line: 1490, column: 28, scope: !1887)
!1900 = !DILocation(line: 1490, column: 9, scope: !1887)
!1901 = !DILocation(line: 1491, column: 5, scope: !1888)
!1902 = !DILocation(line: 1493, column: 7, scope: !1903)
!1903 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1493, column: 7)
!1904 = !DILocation(line: 1493, column: 19, scope: !1903)
!1905 = !DILocation(line: 1493, column: 7, scope: !1847)
!1906 = !DILocation(line: 1494, column: 21, scope: !1903)
!1907 = !DILocation(line: 1495, column: 21, scope: !1903)
!1908 = !DILocation(line: 1495, column: 24, scope: !1903)
!1909 = !DILocation(line: 1495, column: 40, scope: !1903)
!1910 = !DILocation(line: 1496, column: 21, scope: !1903)
!1911 = !DILocation(line: 1496, column: 24, scope: !1903)
!1912 = !DILocation(line: 1496, column: 31, scope: !1903)
!1913 = !DILocation(line: 1494, column: 20, scope: !1903)
!1914 = !DILocation(line: 1494, column: 17, scope: !1903)
!1915 = !DILocation(line: 1494, column: 5, scope: !1903)
!1916 = !DILocation(line: 1502, column: 7, scope: !1917)
!1917 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1502, column: 7)
!1918 = !DILocation(line: 1502, column: 7, scope: !1847)
!1919 = !DILocation(line: 1504, column: 24, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1917, file: !3, line: 1503, column: 5)
!1921 = !DILocation(line: 1504, column: 22, scope: !1920)
!1922 = !DILocation(line: 1508, column: 11, scope: !1923)
!1923 = distinct !DILexicalBlock(scope: !1920, file: !3, line: 1508, column: 11)
!1924 = !DILocation(line: 1508, column: 26, scope: !1923)
!1925 = !DILocation(line: 1508, column: 11, scope: !1920)
!1926 = !DILocation(line: 1509, column: 9, scope: !1923)
!1927 = !DILocation(line: 1511, column: 7, scope: !1920)
!1928 = !DILocation(line: 1512, column: 5, scope: !1920)
!1929 = !DILocation(line: 1514, column: 22, scope: !1847)
!1930 = !DILocation(line: 1514, column: 13, scope: !1847)
!1931 = !DILocation(line: 1514, column: 11, scope: !1847)
!1932 = !DILocation(line: 1516, column: 23, scope: !1847)
!1933 = !DILocation(line: 1516, column: 33, scope: !1847)
!1934 = !DILocation(line: 1516, column: 46, scope: !1847)
!1935 = !DILocation(line: 1516, column: 49, scope: !1847)
!1936 = !DILocation(line: 1516, column: 59, scope: !1847)
!1937 = !DILocation(line: 1517, column: 5, scope: !1847)
!1938 = !DILocation(line: 1517, column: 8, scope: !1847)
!1939 = !DILocation(line: 1517, column: 15, scope: !1847)
!1940 = !DILocation(line: 1518, column: 5, scope: !1847)
!1941 = !DILocation(line: 1518, column: 8, scope: !1847)
!1942 = !DILocation(line: 1519, column: 5, scope: !1847)
!1943 = !DILocation(line: 1519, column: 8, scope: !1847)
!1944 = !DILocation(line: 1516, column: 21, scope: !1847)
!1945 = !DILocation(line: 1520, column: 26, scope: !1847)
!1946 = !DILocation(line: 1521, column: 24, scope: !1847)
!1947 = !DILocation(line: 1521, column: 28, scope: !1847)
!1948 = !DILocation(line: 1522, column: 28, scope: !1847)
!1949 = !DILocation(line: 1522, column: 31, scope: !1847)
!1950 = !DILocation(line: 1523, column: 28, scope: !1847)
!1951 = !DILocation(line: 1523, column: 31, scope: !1847)
!1952 = !DILocation(line: 1523, column: 47, scope: !1847)
!1953 = !DILocation(line: 1524, column: 28, scope: !1847)
!1954 = !DILocation(line: 1524, column: 31, scope: !1847)
!1955 = !DILocation(line: 0, scope: !1847)
!1956 = !DILocation(line: 1520, column: 21, scope: !1847)
!1957 = !DILocation(line: 1526, column: 7, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1526, column: 7)
!1959 = !DILocation(line: 1526, column: 7, scope: !1847)
!1960 = !DILocation(line: 1528, column: 7, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1958, file: !3, line: 1527, column: 5)
!1962 = !DILocation(line: 1529, column: 7, scope: !1961)
!1963 = !DILocation(line: 1530, column: 5, scope: !1961)
!1964 = !DILocation(line: 1532, column: 7, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1532, column: 7)
!1966 = !DILocation(line: 1532, column: 7, scope: !1847)
!1967 = !DILocation(line: 1534, column: 7, scope: !1968)
!1968 = distinct !DILexicalBlock(scope: !1965, file: !3, line: 1533, column: 5)
!1969 = !DILocation(line: 1536, column: 18, scope: !1968)
!1970 = !DILocation(line: 1536, column: 16, scope: !1968)
!1971 = !DILocation(line: 1539, column: 13, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1968, file: !3, line: 1539, column: 11)
!1973 = !DILocation(line: 1539, column: 11, scope: !1968)
!1974 = !DILocation(line: 1540, column: 18, scope: !1972)
!1975 = !DILocation(line: 1540, column: 9, scope: !1972)
!1976 = !DILocation(line: 1541, column: 5, scope: !1968)
!1977 = !DILocation(line: 1543, column: 15, scope: !1847)
!1978 = !DILocation(line: 1544, column: 24, scope: !1847)
!1979 = !DILocation(line: 1544, column: 14, scope: !1847)
!1980 = !DILocation(line: 1544, column: 12, scope: !1847)
!1981 = !DILocation(line: 1545, column: 14, scope: !1847)
!1982 = !DILocation(line: 1547, column: 3, scope: !1847)
!1983 = !DILocation(line: 1549, column: 13, scope: !1847)
!1984 = !DILocation(line: 1549, column: 20, scope: !1847)
!1985 = !DILocation(line: 1549, column: 18, scope: !1847)
!1986 = !DILocation(line: 1549, column: 11, scope: !1847)
!1987 = !DILocation(line: 1551, column: 7, scope: !1988)
!1988 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1551, column: 7)
!1989 = !DILocation(line: 1551, column: 15, scope: !1988)
!1990 = !DILocation(line: 1551, column: 7, scope: !1847)
!1991 = !DILocation(line: 1553, column: 11, scope: !1992)
!1992 = distinct !DILexicalBlock(scope: !1993, file: !3, line: 1553, column: 11)
!1993 = distinct !DILexicalBlock(scope: !1988, file: !3, line: 1552, column: 5)
!1994 = !DILocation(line: 1553, column: 11, scope: !1993)
!1995 = !DILocation(line: 1554, column: 9, scope: !1992)
!1996 = !DILocation(line: 1556, column: 9, scope: !1992)
!1997 = !DILocation(line: 1557, column: 5, scope: !1993)
!1998 = !DILocation(line: 1559, column: 5, scope: !1988)
!1999 = !DILocation(line: 1560, column: 20, scope: !1988)
!2000 = !DILocation(line: 1560, column: 26, scope: !1988)
!2001 = !DILocation(line: 1560, column: 7, scope: !1988)
!2002 = !DILocation(line: 1561, column: 12, scope: !1988)
!2003 = !DILocation(line: 1561, column: 16, scope: !1988)
!2004 = !DILocation(line: 1561, column: 14, scope: !1988)
!2005 = distinct !{!2005, !1998, !2006}
!2006 = !DILocation(line: 1561, column: 20, scope: !1988)
!2007 = !DILocation(line: 1563, column: 7, scope: !2008)
!2008 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1563, column: 7)
!2009 = !DILocation(line: 1563, column: 7, scope: !1847)
!2010 = !DILocation(line: 1565, column: 7, scope: !2011)
!2011 = distinct !DILexicalBlock(scope: !2008, file: !3, line: 1564, column: 5)
!2012 = !DILocation(line: 1566, column: 12, scope: !2013)
!2013 = distinct !DILexicalBlock(scope: !2011, file: !3, line: 1566, column: 11)
!2014 = !DILocation(line: 1566, column: 11, scope: !2011)
!2015 = !DILocation(line: 1567, column: 9, scope: !2013)
!2016 = !DILocation(line: 1569, column: 5, scope: !2011)
!2017 = !DILocation(line: 1575, column: 7, scope: !2018)
!2018 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1575, column: 7)
!2019 = !DILocation(line: 1575, column: 7, scope: !1847)
!2020 = !DILocation(line: 1577, column: 7, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2018, file: !3, line: 1576, column: 5)
!2022 = !DILocation(line: 1578, column: 11, scope: !2023)
!2023 = distinct !DILexicalBlock(scope: !2021, file: !3, line: 1578, column: 11)
!2024 = !DILocation(line: 1578, column: 11, scope: !2021)
!2025 = !DILocation(line: 1579, column: 9, scope: !2023)
!2026 = !DILocation(line: 1579, column: 9, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2023, file: !3, line: 1579, column: 9)
!2028 = !DILocation(line: 1580, column: 5, scope: !2021)
!2029 = !DILocation(line: 1581, column: 12, scope: !2030)
!2030 = distinct !DILexicalBlock(scope: !2018, file: !3, line: 1581, column: 12)
!2031 = !DILocation(line: 1581, column: 20, scope: !2030)
!2032 = !DILocation(line: 1581, column: 25, scope: !2030)
!2033 = !DILocation(line: 1581, column: 28, scope: !2030)
!2034 = !DILocation(line: 1581, column: 41, scope: !2030)
!2035 = !DILocation(line: 1581, column: 44, scope: !2030)
!2036 = !DILocation(line: 1581, column: 58, scope: !2030)
!2037 = !DILocation(line: 1581, column: 63, scope: !2030)
!2038 = !DILocation(line: 1581, column: 12, scope: !2018)
!2039 = !DILocation(line: 1582, column: 20, scope: !2030)
!2040 = !DILocation(line: 1582, column: 5, scope: !2030)
!2041 = !DILocation(line: 1584, column: 3, scope: !1847)
!2042 = !DILocation(line: 1584, column: 10, scope: !1847)
!2043 = !DILocation(line: 1586, column: 18, scope: !2044)
!2044 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1585, column: 5)
!2045 = !DILocation(line: 1586, column: 16, scope: !2044)
!2046 = !DILocation(line: 1587, column: 22, scope: !2044)
!2047 = !DILocation(line: 1587, column: 36, scope: !2044)
!2048 = !DILocation(line: 1587, column: 20, scope: !2044)
!2049 = !DILocation(line: 1589, column: 11, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2044, file: !3, line: 1589, column: 11)
!2051 = !DILocation(line: 1589, column: 11, scope: !2044)
!2052 = !DILocation(line: 1591, column: 15, scope: !2053)
!2053 = distinct !DILexicalBlock(scope: !2054, file: !3, line: 1591, column: 15)
!2054 = distinct !DILexicalBlock(scope: !2050, file: !3, line: 1590, column: 9)
!2055 = !DILocation(line: 1591, column: 25, scope: !2053)
!2056 = !DILocation(line: 1591, column: 30, scope: !2053)
!2057 = !DILocation(line: 1591, column: 15, scope: !2054)
!2058 = !DILocalVariable(name: "di", scope: !2059, file: !3, line: 1597, type: !265)
!2059 = distinct !DILexicalBlock(scope: !2053, file: !3, line: 1592, column: 13)
!2060 = !DILocation(line: 1597, column: 30, scope: !2059)
!2061 = !DILocation(line: 1597, column: 35, scope: !2059)
!2062 = !DILocalVariable(name: "found", scope: !2059, file: !3, line: 1598, type: !264)
!2063 = !DILocation(line: 1598, column: 31, scope: !2059)
!2064 = !DILocation(line: 1598, column: 52, scope: !2059)
!2065 = !DILocation(line: 1598, column: 68, scope: !2059)
!2066 = !DILocation(line: 1598, column: 39, scope: !2059)
!2067 = !DILocation(line: 1600, column: 15, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2069, file: !3, line: 1600, column: 15)
!2069 = distinct !DILexicalBlock(scope: !2059, file: !3, line: 1600, column: 15)
!2070 = !DILocation(line: 1600, column: 15, scope: !2069)
!2071 = !DILocation(line: 1601, column: 29, scope: !2059)
!2072 = !DILocation(line: 1601, column: 15, scope: !2059)
!2073 = !DILocation(line: 1602, column: 33, scope: !2059)
!2074 = !DILocation(line: 1602, column: 15, scope: !2059)
!2075 = !DILocation(line: 1603, column: 15, scope: !2059)
!2076 = distinct !{!2076, !2041, !2077}
!2077 = !DILocation(line: 1612, column: 5, scope: !1847)
!2078 = !DILocation(line: 1605, column: 9, scope: !2054)
!2079 = !DILocation(line: 1607, column: 18, scope: !2044)
!2080 = !DILocation(line: 1607, column: 28, scope: !2044)
!2081 = !DILocation(line: 1607, column: 34, scope: !2044)
!2082 = !DILocation(line: 1607, column: 44, scope: !2044)
!2083 = !DILocation(line: 1608, column: 18, scope: !2044)
!2084 = !DILocation(line: 1608, column: 28, scope: !2044)
!2085 = !DILocation(line: 1607, column: 7, scope: !2044)
!2086 = !DILocation(line: 1610, column: 25, scope: !2044)
!2087 = !DILocation(line: 1610, column: 7, scope: !2044)
!2088 = !DILocation(line: 1611, column: 22, scope: !2044)
!2089 = !DILocation(line: 1614, column: 7, scope: !2090)
!2090 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1614, column: 7)
!2091 = !DILocation(line: 1614, column: 24, scope: !2090)
!2092 = !DILocation(line: 1614, column: 27, scope: !2090)
!2093 = !DILocation(line: 1614, column: 7, scope: !1847)
!2094 = !DILocalVariable(name: "j", scope: !2095, file: !3, line: 1616, type: !27)
!2095 = distinct !DILexicalBlock(scope: !2090, file: !3, line: 1615, column: 5)
!2096 = !DILocation(line: 1616, column: 11, scope: !2095)
!2097 = !DILocation(line: 1620, column: 37, scope: !2098)
!2098 = distinct !DILexicalBlock(scope: !2095, file: !3, line: 1620, column: 11)
!2099 = !DILocation(line: 1620, column: 41, scope: !2098)
!2100 = !DILocation(line: 1621, column: 13, scope: !2098)
!2101 = !DILocation(line: 1621, column: 48, scope: !2098)
!2102 = !DILocation(line: 1621, column: 16, scope: !2098)
!2103 = !DILocation(line: 1621, column: 68, scope: !2098)
!2104 = !DILocation(line: 1622, column: 13, scope: !2098)
!2105 = !DILocation(line: 1622, column: 41, scope: !2098)
!2106 = !DILocation(line: 1622, column: 45, scope: !2098)
!2107 = !DILocation(line: 1623, column: 13, scope: !2098)
!2108 = !DILocation(line: 1623, column: 41, scope: !2098)
!2109 = !DILocation(line: 1623, column: 16, scope: !2098)
!2110 = !DILocation(line: 1623, column: 51, scope: !2098)
!2111 = !DILocation(line: 1620, column: 11, scope: !2095)
!2112 = !DILocation(line: 1624, column: 9, scope: !2098)
!2113 = !DILocation(line: 1626, column: 7, scope: !2095)
!2114 = !DILocation(line: 1628, column: 7, scope: !2095)
!2115 = !DILocation(line: 1634, column: 16, scope: !2116)
!2116 = distinct !DILexicalBlock(scope: !2095, file: !3, line: 1634, column: 7)
!2117 = !DILocation(line: 1634, column: 14, scope: !2116)
!2118 = !DILocation(line: 1634, column: 12, scope: !2116)
!2119 = !DILocation(line: 1634, column: 35, scope: !2120)
!2120 = distinct !DILexicalBlock(scope: !2116, file: !3, line: 1634, column: 7)
!2121 = !DILocation(line: 1634, column: 7, scope: !2116)
!2122 = !DILocation(line: 1635, column: 9, scope: !2120)
!2123 = !DILocation(line: 1634, column: 39, scope: !2120)
!2124 = !DILocation(line: 1634, column: 7, scope: !2120)
!2125 = distinct !{!2125, !2121, !2126}
!2126 = !DILocation(line: 1635, column: 23, scope: !2116)
!2127 = !DILocation(line: 1636, column: 11, scope: !2095)
!2128 = !DILocation(line: 1636, column: 9, scope: !2095)
!2129 = !DILocation(line: 1637, column: 11, scope: !2130)
!2130 = distinct !DILexicalBlock(scope: !2095, file: !3, line: 1637, column: 11)
!2131 = !DILocation(line: 1637, column: 11, scope: !2095)
!2132 = !DILocation(line: 1638, column: 16, scope: !2130)
!2133 = !DILocation(line: 1638, column: 9, scope: !2130)
!2134 = !DILocation(line: 1639, column: 5, scope: !2095)
!2135 = !DILocation(line: 1641, column: 7, scope: !2136)
!2136 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1641, column: 7)
!2137 = !DILocation(line: 1641, column: 7, scope: !1847)
!2138 = !DILocation(line: 1644, column: 7, scope: !2139)
!2139 = distinct !DILexicalBlock(scope: !2136, file: !3, line: 1642, column: 5)
!2140 = !DILocation(line: 1645, column: 7, scope: !2139)
!2141 = !DILocation(line: 1647, column: 53, scope: !2139)
!2142 = !DILocation(line: 1647, column: 34, scope: !2139)
!2143 = !DILocation(line: 1647, column: 15, scope: !2139)
!2144 = !DILocation(line: 1646, column: 7, scope: !2139)
!2145 = !DILocation(line: 1648, column: 5, scope: !2139)
!2146 = !DILocation(line: 1650, column: 7, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 1650, column: 7)
!2148 = !DILocation(line: 1650, column: 7, scope: !1847)
!2149 = !DILocation(line: 1652, column: 7, scope: !2150)
!2150 = distinct !DILexicalBlock(scope: !2151, file: !3, line: 1652, column: 7)
!2151 = distinct !DILexicalBlock(scope: !2152, file: !3, line: 1652, column: 7)
!2152 = distinct !DILexicalBlock(scope: !2147, file: !3, line: 1651, column: 5)
!2153 = !DILocation(line: 1652, column: 7, scope: !2151)
!2154 = !DILocation(line: 1653, column: 18, scope: !2152)
!2155 = !DILocation(line: 1653, column: 7, scope: !2152)
!2156 = !DILocation(line: 1654, column: 5, scope: !2152)
!2157 = !DILocation(line: 1656, column: 10, scope: !1847)
!2158 = !DILocation(line: 1656, column: 3, scope: !1847)
!2159 = distinct !DISubprogram(name: "initialize_exit_failure", scope: !838, file: !838, line: 99, type: !174, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!2160 = !DILocalVariable(name: "status", arg: 1, scope: !2159, file: !838, line: 99, type: !27)
!2161 = !DILocation(line: 99, column: 30, scope: !2159)
!2162 = !DILocation(line: 101, column: 7, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !2159, file: !838, line: 101, column: 7)
!2164 = !DILocation(line: 101, column: 14, scope: !2163)
!2165 = !DILocation(line: 101, column: 7, scope: !2159)
!2166 = !DILocation(line: 102, column: 20, scope: !2163)
!2167 = !DILocation(line: 102, column: 18, scope: !2163)
!2168 = !DILocation(line: 102, column: 5, scope: !2163)
!2169 = !DILocation(line: 103, column: 1, scope: !2159)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "winsize", file: !2171, line: 27, size: 64, elements: !2172)
!2171 = !DIFile(filename: "/usr/include/bits/ioctl-types.h", directory: "")
!2172 = !{!2173, !2174, !2175, !2176}
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "ws_row", scope: !2170, file: !2171, line: 29, baseType: !176, size: 16)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "ws_col", scope: !2170, file: !2171, line: 30, baseType: !176, size: 16, offset: 16)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "ws_xpixel", scope: !2170, file: !2171, line: 31, baseType: !176, size: 16, offset: 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "ws_ypixel", scope: !2170, file: !2171, line: 32, baseType: !176, size: 16, offset: 48)
!2177 = !DILocalVariable(name: "argc", arg: 1, scope: !933, file: !3, line: 1688, type: !27)
!2178 = !DILocation(line: 1688, column: 22, scope: !933)
!2179 = !DILocalVariable(name: "argv", arg: 2, scope: !933, file: !3, line: 1688, type: !142)
!2180 = !DILocation(line: 1688, column: 35, scope: !933)
!2181 = !DILocalVariable(name: "time_style_option", scope: !933, file: !3, line: 1690, type: !143)
!2182 = !DILocation(line: 1690, column: 9, scope: !933)
!2183 = !DILocalVariable(name: "sort_type_specified", scope: !933, file: !3, line: 1692, type: !141)
!2184 = !DILocation(line: 1692, column: 8, scope: !933)
!2185 = !DILocalVariable(name: "kibibytes_specified", scope: !933, file: !3, line: 1693, type: !141)
!2186 = !DILocation(line: 1693, column: 8, scope: !933)
!2187 = !DILocation(line: 1695, column: 21, scope: !933)
!2188 = !DILocation(line: 1699, column: 11, scope: !933)
!2189 = !DILocation(line: 1699, column: 3, scope: !933)
!2190 = !DILocation(line: 1703, column: 14, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !933, file: !3, line: 1700, column: 5)
!2192 = !DILocation(line: 1704, column: 7, scope: !2191)
!2193 = !DILocation(line: 1705, column: 7, scope: !2191)
!2194 = !DILocation(line: 1709, column: 14, scope: !2191)
!2195 = !DILocation(line: 1710, column: 7, scope: !2191)
!2196 = !DILocation(line: 1711, column: 7, scope: !2191)
!2197 = !DILocation(line: 1715, column: 11, scope: !2198)
!2198 = distinct !DILexicalBlock(scope: !2191, file: !3, line: 1715, column: 11)
!2199 = !DILocation(line: 1715, column: 11, scope: !2191)
!2200 = !DILocation(line: 1717, column: 18, scope: !2201)
!2201 = distinct !DILexicalBlock(scope: !2198, file: !3, line: 1716, column: 9)
!2202 = !DILocation(line: 1718, column: 11, scope: !2201)
!2203 = !DILocation(line: 1720, column: 29, scope: !2201)
!2204 = !DILocation(line: 1721, column: 9, scope: !2201)
!2205 = !DILocation(line: 1724, column: 18, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2198, file: !3, line: 1723, column: 9)
!2207 = !DILocation(line: 1725, column: 29, scope: !2206)
!2208 = !DILocation(line: 1727, column: 7, scope: !2191)
!2209 = !DILocation(line: 1730, column: 7, scope: !2191)
!2210 = !DILocation(line: 1733, column: 13, scope: !933)
!2211 = !DILocation(line: 1734, column: 13, scope: !933)
!2212 = !DILocation(line: 1735, column: 16, scope: !933)
!2213 = !DILocation(line: 1736, column: 15, scope: !933)
!2214 = !DILocation(line: 1737, column: 20, scope: !933)
!2215 = !DILocation(line: 1738, column: 19, scope: !933)
!2216 = !DILocation(line: 1739, column: 15, scope: !933)
!2217 = !DILocation(line: 1740, column: 15, scope: !933)
!2218 = !DILocation(line: 1741, column: 13, scope: !933)
!2219 = !DILocation(line: 1742, column: 18, scope: !933)
!2220 = !DILocation(line: 1743, column: 15, scope: !933)
!2221 = !DILocation(line: 1744, column: 19, scope: !933)
!2222 = !DILocation(line: 1745, column: 17, scope: !933)
!2223 = !DILocation(line: 1746, column: 18, scope: !933)
!2224 = !DILocation(line: 1748, column: 3, scope: !933)
!2225 = !DILocation(line: 1750, column: 15, scope: !933)
!2226 = !DILocalVariable(name: "p", scope: !2227, file: !3, line: 1752, type: !146)
!2227 = distinct !DILexicalBlock(scope: !933, file: !3, line: 1751, column: 3)
!2228 = !DILocation(line: 1752, column: 17, scope: !2227)
!2229 = !DILocation(line: 1752, column: 21, scope: !2227)
!2230 = !DILocation(line: 1753, column: 9, scope: !2231)
!2231 = distinct !DILexicalBlock(scope: !2227, file: !3, line: 1753, column: 9)
!2232 = !DILocation(line: 1753, column: 11, scope: !2231)
!2233 = !DILocation(line: 1753, column: 15, scope: !2231)
!2234 = !DILocation(line: 1753, column: 14, scope: !2231)
!2235 = !DILocation(line: 1753, column: 17, scope: !2231)
!2236 = !DILocation(line: 1753, column: 39, scope: !2231)
!2237 = !DILocation(line: 1753, column: 22, scope: !2231)
!2238 = !DILocation(line: 1753, column: 9, scope: !2227)
!2239 = !DILocation(line: 1755, column: 14, scope: !2231)
!2240 = !DILocation(line: 1756, column: 21, scope: !2231)
!2241 = !DILocation(line: 1756, column: 14, scope: !2231)
!2242 = !DILocation(line: 1754, column: 7, scope: !2231)
!2243 = !DILocalVariable(name: "ws", scope: !2244, file: !3, line: 1761, type: !2170)
!2244 = distinct !DILexicalBlock(scope: !933, file: !3, line: 1760, column: 3)
!2245 = !DILocation(line: 1761, column: 20, scope: !2244)
!2246 = !DILocation(line: 1763, column: 9, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2244, file: !3, line: 1763, column: 9)
!2248 = !DILocation(line: 1763, column: 48, scope: !2247)
!2249 = !DILocation(line: 1764, column: 9, scope: !2247)
!2250 = !DILocation(line: 1764, column: 19, scope: !2247)
!2251 = !DILocation(line: 1764, column: 16, scope: !2247)
!2252 = !DILocation(line: 1764, column: 14, scope: !2247)
!2253 = !DILocation(line: 1764, column: 26, scope: !2247)
!2254 = !DILocation(line: 1764, column: 32, scope: !2247)
!2255 = !DILocation(line: 1764, column: 29, scope: !2247)
!2256 = !DILocation(line: 1764, column: 54, scope: !2247)
!2257 = !DILocation(line: 1764, column: 42, scope: !2247)
!2258 = !DILocation(line: 1764, column: 39, scope: !2247)
!2259 = !DILocation(line: 1763, column: 9, scope: !2244)
!2260 = !DILocation(line: 1765, column: 24, scope: !2247)
!2261 = !DILocation(line: 1765, column: 21, scope: !2247)
!2262 = !DILocation(line: 1765, column: 19, scope: !2247)
!2263 = !DILocation(line: 1765, column: 7, scope: !2247)
!2264 = !DILocalVariable(name: "p", scope: !2265, file: !3, line: 1770, type: !146)
!2265 = distinct !DILexicalBlock(scope: !933, file: !3, line: 1769, column: 3)
!2266 = !DILocation(line: 1770, column: 17, scope: !2265)
!2267 = !DILocation(line: 1770, column: 21, scope: !2265)
!2268 = !DILocation(line: 1771, column: 13, scope: !2265)
!2269 = !DILocation(line: 1772, column: 9, scope: !2270)
!2270 = distinct !DILexicalBlock(scope: !2265, file: !3, line: 1772, column: 9)
!2271 = !DILocation(line: 1772, column: 9, scope: !2265)
!2272 = !DILocalVariable(name: "tmp_ulong", scope: !2273, file: !3, line: 1774, type: !151)
!2273 = distinct !DILexicalBlock(scope: !2270, file: !3, line: 1773, column: 7)
!2274 = !DILocation(line: 1774, column: 27, scope: !2273)
!2275 = !DILocation(line: 1775, column: 23, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2273, file: !3, line: 1775, column: 13)
!2277 = !DILocation(line: 1775, column: 13, scope: !2276)
!2278 = !DILocation(line: 1775, column: 53, scope: !2276)
!2279 = !DILocation(line: 1776, column: 13, scope: !2276)
!2280 = !DILocation(line: 1776, column: 16, scope: !2276)
!2281 = !DILocation(line: 1776, column: 26, scope: !2276)
!2282 = !DILocation(line: 1775, column: 13, scope: !2273)
!2283 = !DILocation(line: 1778, column: 23, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2276, file: !3, line: 1777, column: 11)
!2285 = !DILocation(line: 1778, column: 21, scope: !2284)
!2286 = !DILocation(line: 1779, column: 11, scope: !2284)
!2287 = !DILocation(line: 1783, column: 14, scope: !2288)
!2288 = distinct !DILexicalBlock(scope: !2276, file: !3, line: 1781, column: 11)
!2289 = !DILocation(line: 1784, column: 27, scope: !2288)
!2290 = !DILocation(line: 1784, column: 20, scope: !2288)
!2291 = !DILocation(line: 1782, column: 13, scope: !2288)
!2292 = !DILocation(line: 1786, column: 7, scope: !2273)
!2293 = !DILocation(line: 1789, column: 3, scope: !933)
!2294 = !DILocalVariable(name: "oi", scope: !2295, file: !3, line: 1791, type: !27)
!2295 = distinct !DILexicalBlock(scope: !933, file: !3, line: 1790, column: 5)
!2296 = !DILocation(line: 1791, column: 11, scope: !2295)
!2297 = !DILocalVariable(name: "c", scope: !2295, file: !3, line: 1792, type: !27)
!2298 = !DILocation(line: 1792, column: 11, scope: !2295)
!2299 = !DILocation(line: 1792, column: 28, scope: !2295)
!2300 = !DILocation(line: 1792, column: 34, scope: !2295)
!2301 = !DILocation(line: 1792, column: 15, scope: !2295)
!2302 = !DILocation(line: 1795, column: 11, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 1795, column: 11)
!2304 = !DILocation(line: 1795, column: 13, scope: !2303)
!2305 = !DILocation(line: 1795, column: 11, scope: !2295)
!2306 = !DILocation(line: 1796, column: 9, scope: !2303)
!2307 = !DILocation(line: 1798, column: 15, scope: !2295)
!2308 = !DILocation(line: 1798, column: 7, scope: !2295)
!2309 = !DILocation(line: 1801, column: 23, scope: !2310)
!2310 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 1799, column: 9)
!2311 = !DILocation(line: 1802, column: 11, scope: !2310)
!2312 = !DILocation(line: 1805, column: 11, scope: !2310)
!2313 = !DILocation(line: 1806, column: 11, scope: !2310)
!2314 = !DILocation(line: 1809, column: 21, scope: !2310)
!2315 = !DILocation(line: 1810, column: 11, scope: !2310)
!2316 = !DILocation(line: 1813, column: 26, scope: !2310)
!2317 = !DILocation(line: 1814, column: 11, scope: !2310)
!2318 = !DILocation(line: 1818, column: 23, scope: !2310)
!2319 = !DILocation(line: 1819, column: 21, scope: !2310)
!2320 = !DILocation(line: 1820, column: 31, scope: !2310)
!2321 = !DILocation(line: 1822, column: 15, scope: !2322)
!2322 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 1822, column: 15)
!2323 = !DILocation(line: 1822, column: 22, scope: !2322)
!2324 = !DILocation(line: 1822, column: 15, scope: !2310)
!2325 = !DILocation(line: 1823, column: 23, scope: !2322)
!2326 = !DILocation(line: 1823, column: 20, scope: !2322)
!2327 = !DILocation(line: 1823, column: 13, scope: !2322)
!2328 = !DILocation(line: 1824, column: 28, scope: !2310)
!2329 = !DILocation(line: 1825, column: 28, scope: !2310)
!2330 = !DILocation(line: 1826, column: 27, scope: !2310)
!2331 = !DILocation(line: 1827, column: 11, scope: !2310)
!2332 = !DILocation(line: 1830, column: 27, scope: !2310)
!2333 = !DILocation(line: 1831, column: 11, scope: !2310)
!2334 = !DILocation(line: 1834, column: 18, scope: !2310)
!2335 = !DILocation(line: 1835, column: 23, scope: !2310)
!2336 = !DILocation(line: 1836, column: 11, scope: !2310)
!2337 = !DILocation(line: 1839, column: 54, scope: !2310)
!2338 = !DILocation(line: 1839, column: 34, scope: !2310)
!2339 = !DILocation(line: 1841, column: 54, scope: !2310)
!2340 = !DILocation(line: 1841, column: 34, scope: !2310)
!2341 = !DILocation(line: 1842, column: 11, scope: !2310)
!2342 = !DILocation(line: 1845, column: 23, scope: !2310)
!2343 = !DILocation(line: 1846, column: 11, scope: !2310)
!2344 = !DILocation(line: 1849, column: 31, scope: !2310)
!2345 = !DILocation(line: 1850, column: 11, scope: !2310)
!2346 = !DILocation(line: 1853, column: 18, scope: !2310)
!2347 = !DILocation(line: 1854, column: 11, scope: !2310)
!2348 = !DILocation(line: 1857, column: 18, scope: !2310)
!2349 = !DILocation(line: 1858, column: 11, scope: !2310)
!2350 = !DILocation(line: 1861, column: 23, scope: !2310)
!2351 = !DILocation(line: 1862, column: 18, scope: !2310)
!2352 = !DILocation(line: 1863, column: 11, scope: !2310)
!2353 = !DILocation(line: 1866, column: 18, scope: !2310)
!2354 = !DILocation(line: 1867, column: 23, scope: !2310)
!2355 = !DILocation(line: 1868, column: 11, scope: !2310)
!2356 = !DILocation(line: 1871, column: 27, scope: !2310)
!2357 = !DILocation(line: 1872, column: 11, scope: !2310)
!2358 = !DILocation(line: 1875, column: 29, scope: !2310)
!2359 = !DILocation(line: 1876, column: 11, scope: !2310)
!2360 = !DILocation(line: 1879, column: 24, scope: !2310)
!2361 = !DILocation(line: 1880, column: 11, scope: !2310)
!2362 = !DILocation(line: 1883, column: 28, scope: !2310)
!2363 = !DILocation(line: 1884, column: 11, scope: !2310)
!2364 = !DILocation(line: 1887, column: 21, scope: !2310)
!2365 = !DILocation(line: 1888, column: 31, scope: !2310)
!2366 = !DILocation(line: 1889, column: 11, scope: !2310)
!2367 = !DILocation(line: 1892, column: 21, scope: !2310)
!2368 = !DILocation(line: 1893, column: 11, scope: !2310)
!2369 = !DILocation(line: 1896, column: 21, scope: !2310)
!2370 = !DILocation(line: 1897, column: 31, scope: !2310)
!2371 = !DILocation(line: 1898, column: 11, scope: !2310)
!2372 = !DILocation(line: 1901, column: 34, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 1901, column: 15)
!2374 = !DILocation(line: 1901, column: 17, scope: !2373)
!2375 = !DILocation(line: 1901, column: 15, scope: !2310)
!2376 = !DILocation(line: 1902, column: 13, scope: !2373)
!2377 = !DILocation(line: 1904, column: 11, scope: !2310)
!2378 = !DILocation(line: 1907, column: 18, scope: !2310)
!2379 = !DILocation(line: 1908, column: 11, scope: !2310)
!2380 = !DILocation(line: 1911, column: 23, scope: !2310)
!2381 = !DILocation(line: 1912, column: 11, scope: !2310)
!2382 = !DILocation(line: 1915, column: 11, scope: !2310)
!2383 = !DILocation(line: 1916, column: 11, scope: !2310)
!2384 = !DILocation(line: 1917, column: 11, scope: !2310)
!2385 = !DILocation(line: 1920, column: 18, scope: !2310)
!2386 = !DILocation(line: 1921, column: 11, scope: !2310)
!2387 = !DILocation(line: 1924, column: 17, scope: !2310)
!2388 = !DILocation(line: 1925, column: 11, scope: !2310)
!2389 = !DILocation(line: 1928, column: 27, scope: !2310)
!2390 = !DILocation(line: 1929, column: 11, scope: !2310)
!2391 = !DILocation(line: 1932, column: 23, scope: !2310)
!2392 = !DILocation(line: 1933, column: 11, scope: !2310)
!2393 = !DILocation(line: 1936, column: 23, scope: !2310)
!2394 = !DILocation(line: 1937, column: 11, scope: !2310)
!2395 = !DILocation(line: 1940, column: 23, scope: !2310)
!2396 = !DILocation(line: 1941, column: 11, scope: !2310)
!2397 = !DILocation(line: 1944, column: 31, scope: !2310)
!2398 = !DILocation(line: 1944, column: 11, scope: !2310)
!2399 = !DILocation(line: 1945, column: 11, scope: !2310)
!2400 = !DILocation(line: 1948, column: 23, scope: !2310)
!2401 = !DILocation(line: 1949, column: 11, scope: !2310)
!2402 = !DILocation(line: 1952, column: 11, scope: !2310)
!2403 = !DILocation(line: 1953, column: 11, scope: !2310)
!2404 = !DILocation(line: 1956, column: 11, scope: !2310)
!2405 = !DILocation(line: 1957, column: 11, scope: !2310)
!2406 = !DILocation(line: 1960, column: 21, scope: !2310)
!2407 = !DILocation(line: 1961, column: 11, scope: !2310)
!2408 = !DILocation(line: 1964, column: 21, scope: !2310)
!2409 = !DILocation(line: 1965, column: 31, scope: !2310)
!2410 = !DILocation(line: 1966, column: 11, scope: !2310)
!2411 = !DILocation(line: 1969, column: 33, scope: !2310)
!2412 = !DILocation(line: 1970, column: 33, scope: !2310)
!2413 = !DILocation(line: 1969, column: 21, scope: !2310)
!2414 = !DILocation(line: 1969, column: 19, scope: !2310)
!2415 = !DILocation(line: 1971, column: 11, scope: !2310)
!2416 = !DILocation(line: 1974, column: 21, scope: !2310)
!2417 = !DILocation(line: 1975, column: 31, scope: !2310)
!2418 = !DILocation(line: 1976, column: 11, scope: !2310)
!2419 = !DILocation(line: 1979, column: 21, scope: !2310)
!2420 = !DILocation(line: 1980, column: 31, scope: !2310)
!2421 = !DILocation(line: 1981, column: 11, scope: !2310)
!2422 = !DILocation(line: 1985, column: 15, scope: !2423)
!2423 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 1985, column: 15)
!2424 = !DILocation(line: 1985, column: 22, scope: !2423)
!2425 = !DILocation(line: 1985, column: 15, scope: !2310)
!2426 = !DILocation(line: 1986, column: 20, scope: !2423)
!2427 = !DILocation(line: 1986, column: 13, scope: !2423)
!2428 = !DILocation(line: 1987, column: 11, scope: !2310)
!2429 = !DILocation(line: 1990, column: 24, scope: !2310)
!2430 = !DILocation(line: 1991, column: 11, scope: !2310)
!2431 = !DILocalVariable(name: "hide", scope: !2432, file: !3, line: 1995, type: !617)
!2432 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 1994, column: 11)
!2433 = !DILocation(line: 1995, column: 36, scope: !2432)
!2434 = !DILocation(line: 1995, column: 43, scope: !2432)
!2435 = !DILocation(line: 1996, column: 29, scope: !2432)
!2436 = !DILocation(line: 1996, column: 13, scope: !2432)
!2437 = !DILocation(line: 1996, column: 19, scope: !2432)
!2438 = !DILocation(line: 1996, column: 27, scope: !2432)
!2439 = !DILocation(line: 1997, column: 26, scope: !2432)
!2440 = !DILocation(line: 1997, column: 13, scope: !2432)
!2441 = !DILocation(line: 1997, column: 19, scope: !2432)
!2442 = !DILocation(line: 1997, column: 24, scope: !2432)
!2443 = !DILocation(line: 1998, column: 29, scope: !2432)
!2444 = !DILocation(line: 1998, column: 27, scope: !2432)
!2445 = !DILocation(line: 2000, column: 11, scope: !2310)
!2446 = !DILocation(line: 2003, column: 23, scope: !2310)
!2447 = !DILocation(line: 2003, column: 21, scope: !2310)
!2448 = !DILocation(line: 2004, column: 31, scope: !2310)
!2449 = !DILocation(line: 2005, column: 11, scope: !2310)
!2450 = !DILocation(line: 2008, column: 29, scope: !2310)
!2451 = !DILocation(line: 2009, column: 11, scope: !2310)
!2452 = !DILocation(line: 2012, column: 23, scope: !2310)
!2453 = !DILocation(line: 2012, column: 21, scope: !2310)
!2454 = !DILocation(line: 2013, column: 11, scope: !2310)
!2455 = !DILocation(line: 2016, column: 20, scope: !2310)
!2456 = !DILocation(line: 2016, column: 18, scope: !2310)
!2457 = !DILocation(line: 2017, column: 11, scope: !2310)
!2458 = !DILocation(line: 2020, column: 18, scope: !2310)
!2459 = !DILocation(line: 2021, column: 31, scope: !2310)
!2460 = !DILocation(line: 2021, column: 29, scope: !2310)
!2461 = !DILocation(line: 2022, column: 11, scope: !2310)
!2462 = !DILocalVariable(name: "i", scope: !2463, file: !3, line: 2026, type: !27)
!2463 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 2025, column: 11)
!2464 = !DILocation(line: 2026, column: 17, scope: !2463)
!2465 = !DILocation(line: 2027, column: 17, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 2027, column: 17)
!2467 = !DILocation(line: 2027, column: 17, scope: !2463)
!2468 = !DILocation(line: 2028, column: 19, scope: !2466)
!2469 = !DILocation(line: 2028, column: 17, scope: !2466)
!2470 = !DILocation(line: 2028, column: 15, scope: !2466)
!2471 = !DILocation(line: 2032, column: 17, scope: !2466)
!2472 = !DILocation(line: 2034, column: 33, scope: !2463)
!2473 = !DILocation(line: 2034, column: 35, scope: !2463)
!2474 = !DILocation(line: 2035, column: 33, scope: !2463)
!2475 = !DILocation(line: 2035, column: 37, scope: !2463)
!2476 = !DILocation(line: 2035, column: 39, scope: !2463)
!2477 = !DILocation(line: 2036, column: 37, scope: !2463)
!2478 = !DILocation(line: 2036, column: 40, scope: !2463)
!2479 = !DILocation(line: 0, scope: !2463)
!2480 = !DILocation(line: 2034, column: 30, scope: !2463)
!2481 = !DILocation(line: 2038, column: 17, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 2038, column: 17)
!2483 = !DILocation(line: 2038, column: 17, scope: !2463)
!2484 = !DILocation(line: 2043, column: 25, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2482, file: !3, line: 2039, column: 15)
!2486 = !DILocation(line: 2044, column: 15, scope: !2485)
!2487 = !DILocation(line: 2045, column: 13, scope: !2463)
!2488 = !DILocalVariable(name: "i", scope: !2489, file: !3, line: 2050, type: !27)
!2489 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 2049, column: 11)
!2490 = !DILocation(line: 2050, column: 17, scope: !2489)
!2491 = !DILocation(line: 2051, column: 17, scope: !2492)
!2492 = distinct !DILexicalBlock(scope: !2489, file: !3, line: 2051, column: 17)
!2493 = !DILocation(line: 2051, column: 17, scope: !2489)
!2494 = !DILocation(line: 2052, column: 19, scope: !2492)
!2495 = !DILocation(line: 2052, column: 17, scope: !2492)
!2496 = !DILocation(line: 2052, column: 15, scope: !2492)
!2497 = !DILocation(line: 2056, column: 17, scope: !2492)
!2498 = !DILocation(line: 2058, column: 32, scope: !2489)
!2499 = !DILocation(line: 2058, column: 34, scope: !2489)
!2500 = !DILocation(line: 2059, column: 32, scope: !2489)
!2501 = !DILocation(line: 2059, column: 36, scope: !2489)
!2502 = !DILocation(line: 2059, column: 38, scope: !2489)
!2503 = !DILocation(line: 2060, column: 36, scope: !2489)
!2504 = !DILocation(line: 2060, column: 39, scope: !2489)
!2505 = !DILocation(line: 0, scope: !2489)
!2506 = !DILocation(line: 2058, column: 29, scope: !2489)
!2507 = !DILocation(line: 2061, column: 13, scope: !2489)
!2508 = !DILocation(line: 2065, column: 29, scope: !2310)
!2509 = !DILocation(line: 2065, column: 27, scope: !2310)
!2510 = !DILocation(line: 2068, column: 11, scope: !2310)
!2511 = !DILocation(line: 2072, column: 30, scope: !2310)
!2512 = !DILocation(line: 2071, column: 11, scope: !2310)
!2513 = !DILocation(line: 2075, column: 11, scope: !2310)
!2514 = !DILocation(line: 2078, column: 31, scope: !2310)
!2515 = !DILocation(line: 2078, column: 29, scope: !2310)
!2516 = !DILocation(line: 2079, column: 11, scope: !2310)
!2517 = !DILocation(line: 2082, column: 29, scope: !2310)
!2518 = !DILocation(line: 2083, column: 11, scope: !2310)
!2519 = !DILocalVariable(name: "e", scope: !2520, file: !3, line: 2087, type: !109)
!2520 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 2086, column: 11)
!2521 = !DILocation(line: 2087, column: 31, scope: !2520)
!2522 = !DILocation(line: 2087, column: 50, scope: !2520)
!2523 = !DILocation(line: 2087, column: 35, scope: !2520)
!2524 = !DILocation(line: 2089, column: 17, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2520, file: !3, line: 2089, column: 17)
!2526 = !DILocation(line: 2089, column: 19, scope: !2525)
!2527 = !DILocation(line: 2089, column: 17, scope: !2520)
!2528 = !DILocation(line: 2090, column: 30, scope: !2525)
!2529 = !DILocation(line: 2090, column: 33, scope: !2525)
!2530 = !DILocation(line: 2090, column: 54, scope: !2525)
!2531 = !DILocation(line: 2090, column: 15, scope: !2525)
!2532 = !DILocation(line: 2091, column: 38, scope: !2520)
!2533 = !DILocation(line: 2091, column: 36, scope: !2520)
!2534 = !DILocation(line: 2092, column: 38, scope: !2520)
!2535 = !DILocation(line: 2092, column: 36, scope: !2520)
!2536 = !DILocation(line: 2094, column: 11, scope: !2310)
!2537 = !DILocation(line: 2097, column: 54, scope: !2310)
!2538 = !DILocation(line: 2097, column: 34, scope: !2310)
!2539 = !DILocation(line: 2099, column: 54, scope: !2310)
!2540 = !DILocation(line: 2099, column: 34, scope: !2310)
!2541 = !DILocation(line: 2100, column: 11, scope: !2310)
!2542 = !DILocation(line: 2103, column: 26, scope: !2310)
!2543 = !DILocation(line: 2104, column: 11, scope: !2310)
!2544 = !DILocation(line: 2106, column: 9, scope: !2310)
!2545 = !DILocation(line: 2108, column: 9, scope: !2310)
!2546 = !DILocation(line: 2111, column: 11, scope: !2310)
!2547 = distinct !{!2547, !2293, !2548}
!2548 = !DILocation(line: 2113, column: 5, scope: !933)
!2549 = !DILocation(line: 2115, column: 9, scope: !2550)
!2550 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2115, column: 7)
!2551 = !DILocation(line: 2115, column: 7, scope: !933)
!2552 = !DILocalVariable(name: "ls_block_size", scope: !2553, file: !3, line: 2117, type: !146)
!2553 = distinct !DILexicalBlock(scope: !2550, file: !3, line: 2116, column: 5)
!2554 = !DILocation(line: 2117, column: 19, scope: !2553)
!2555 = !DILocation(line: 2117, column: 35, scope: !2553)
!2556 = !DILocation(line: 2118, column: 22, scope: !2553)
!2557 = !DILocation(line: 2118, column: 7, scope: !2553)
!2558 = !DILocation(line: 2120, column: 11, scope: !2559)
!2559 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 2120, column: 11)
!2560 = !DILocation(line: 2120, column: 25, scope: !2559)
!2561 = !DILocation(line: 2120, column: 28, scope: !2559)
!2562 = !DILocation(line: 2120, column: 11, scope: !2553)
!2563 = !DILocation(line: 2122, column: 36, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2559, file: !3, line: 2121, column: 9)
!2565 = !DILocation(line: 2122, column: 34, scope: !2564)
!2566 = !DILocation(line: 2123, column: 36, scope: !2564)
!2567 = !DILocation(line: 2123, column: 34, scope: !2564)
!2568 = !DILocation(line: 2124, column: 9, scope: !2564)
!2569 = !DILocation(line: 2125, column: 11, scope: !2570)
!2570 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 2125, column: 11)
!2571 = !DILocation(line: 2125, column: 11, scope: !2553)
!2572 = !DILocation(line: 2127, column: 29, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2570, file: !3, line: 2126, column: 9)
!2574 = !DILocation(line: 2128, column: 29, scope: !2573)
!2575 = !DILocation(line: 2129, column: 9, scope: !2573)
!2576 = !DILocation(line: 2130, column: 5, scope: !2553)
!2577 = !DILocation(line: 2133, column: 13, scope: !933)
!2578 = !DILocation(line: 2133, column: 25, scope: !933)
!2579 = !DILocation(line: 2133, column: 11, scope: !933)
!2580 = !DILocation(line: 2136, column: 14, scope: !933)
!2581 = !DILocation(line: 2136, column: 26, scope: !933)
!2582 = !DILocation(line: 2136, column: 45, scope: !933)
!2583 = !DILocation(line: 2136, column: 11, scope: !933)
!2584 = !DILocalVariable(name: "qs", scope: !933, file: !3, line: 2138, type: !95)
!2585 = !DILocation(line: 2138, column: 22, scope: !933)
!2586 = !DILocation(line: 2138, column: 27, scope: !933)
!2587 = !DILocation(line: 2139, column: 33, scope: !933)
!2588 = !DILocation(line: 2139, column: 40, scope: !933)
!2589 = !DILocation(line: 2140, column: 33, scope: !933)
!2590 = !DILocation(line: 2140, column: 36, scope: !933)
!2591 = !DILocation(line: 2140, column: 43, scope: !933)
!2592 = !DILocation(line: 2141, column: 33, scope: !933)
!2593 = !DILocation(line: 2141, column: 37, scope: !933)
!2594 = !DILocation(line: 2141, column: 49, scope: !933)
!2595 = !DILocation(line: 2141, column: 52, scope: !933)
!2596 = !DILocation(line: 2141, column: 59, scope: !933)
!2597 = !DILocation(line: 2142, column: 33, scope: !933)
!2598 = !DILocation(line: 2142, column: 37, scope: !933)
!2599 = !DILocation(line: 2142, column: 40, scope: !933)
!2600 = !DILocation(line: 2143, column: 37, scope: !933)
!2601 = !DILocation(line: 2143, column: 40, scope: !933)
!2602 = !DILocation(line: 2143, column: 43, scope: !933)
!2603 = !DILocation(line: 2144, column: 37, scope: !933)
!2604 = !DILocation(line: 2144, column: 40, scope: !933)
!2605 = !DILocation(line: 2144, column: 43, scope: !933)
!2606 = !DILocation(line: 0, scope: !933)
!2607 = !DILocation(line: 2139, column: 31, scope: !933)
!2608 = !DILocation(line: 2145, column: 30, scope: !933)
!2609 = !DILocation(line: 2145, column: 28, scope: !933)
!2610 = !DILocation(line: 2146, column: 7, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2146, column: 7)
!2612 = !DILocation(line: 2146, column: 10, scope: !2611)
!2613 = !DILocation(line: 2146, column: 7, scope: !933)
!2614 = !DILocation(line: 2147, column: 23, scope: !2611)
!2615 = !DILocation(line: 2147, column: 5, scope: !2611)
!2616 = !DILocation(line: 2148, column: 20, scope: !2617)
!2617 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2148, column: 7)
!2618 = !DILocation(line: 2148, column: 17, scope: !2617)
!2619 = !DILocation(line: 2148, column: 7, scope: !933)
!2620 = !DILocalVariable(name: "p", scope: !2621, file: !3, line: 2150, type: !146)
!2621 = distinct !DILexicalBlock(scope: !2617, file: !3, line: 2149, column: 5)
!2622 = !DILocation(line: 2150, column: 19, scope: !2621)
!2623 = !DILocation(line: 2151, column: 25, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2621, file: !3, line: 2151, column: 7)
!2625 = !DILocation(line: 2151, column: 41, scope: !2624)
!2626 = !DILocation(line: 2151, column: 17, scope: !2624)
!2627 = !DILocation(line: 2151, column: 14, scope: !2624)
!2628 = !DILocation(line: 2151, column: 12, scope: !2624)
!2629 = !DILocation(line: 2151, column: 56, scope: !2630)
!2630 = distinct !DILexicalBlock(scope: !2624, file: !3, line: 2151, column: 7)
!2631 = !DILocation(line: 2151, column: 55, scope: !2630)
!2632 = !DILocation(line: 2151, column: 7, scope: !2624)
!2633 = !DILocation(line: 2152, column: 27, scope: !2630)
!2634 = !DILocation(line: 2152, column: 54, scope: !2630)
!2635 = !DILocation(line: 2152, column: 53, scope: !2630)
!2636 = !DILocation(line: 2152, column: 9, scope: !2630)
!2637 = !DILocation(line: 2151, column: 60, scope: !2630)
!2638 = !DILocation(line: 2151, column: 7, scope: !2630)
!2639 = distinct !{!2639, !2632, !2640}
!2640 = !DILocation(line: 2152, column: 58, scope: !2624)
!2641 = !DILocation(line: 2153, column: 5, scope: !2621)
!2642 = !DILocation(line: 2155, column: 29, scope: !933)
!2643 = !DILocation(line: 2155, column: 27, scope: !933)
!2644 = !DILocation(line: 2156, column: 21, scope: !933)
!2645 = !DILocation(line: 2156, column: 3, scope: !933)
!2646 = !DILocation(line: 2161, column: 7, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2161, column: 7)
!2648 = !DILocation(line: 2161, column: 13, scope: !2647)
!2649 = !DILocation(line: 2161, column: 17, scope: !2647)
!2650 = !DILocation(line: 2161, column: 24, scope: !2647)
!2651 = !DILocation(line: 2161, column: 39, scope: !2647)
!2652 = !DILocation(line: 2161, column: 42, scope: !2647)
!2653 = !DILocation(line: 2161, column: 7, scope: !933)
!2654 = !DILocation(line: 2162, column: 11, scope: !2647)
!2655 = !DILocation(line: 2162, column: 5, scope: !2647)
!2656 = !DILocation(line: 2172, column: 8, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2172, column: 7)
!2658 = !DILocation(line: 2172, column: 18, scope: !2657)
!2659 = !DILocation(line: 2172, column: 32, scope: !2657)
!2660 = !DILocation(line: 2172, column: 35, scope: !2657)
!2661 = !DILocation(line: 2172, column: 45, scope: !2657)
!2662 = !DILocation(line: 2173, column: 7, scope: !2657)
!2663 = !DILocation(line: 2173, column: 11, scope: !2657)
!2664 = !DILocation(line: 2173, column: 31, scope: !2657)
!2665 = !DILocation(line: 2173, column: 34, scope: !2657)
!2666 = !DILocation(line: 2173, column: 41, scope: !2657)
!2667 = !DILocation(line: 2172, column: 7, scope: !933)
!2668 = !DILocation(line: 2175, column: 17, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !2657, file: !3, line: 2174, column: 5)
!2670 = !DILocation(line: 2176, column: 5, scope: !2669)
!2671 = !DILocation(line: 2178, column: 7, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !933, file: !3, line: 2178, column: 7)
!2673 = !DILocation(line: 2178, column: 14, scope: !2672)
!2674 = !DILocation(line: 2178, column: 7, scope: !933)
!2675 = !DILocalVariable(name: "style", scope: !2676, file: !3, line: 2180, type: !143)
!2676 = distinct !DILexicalBlock(scope: !2672, file: !3, line: 2179, column: 5)
!2677 = !DILocation(line: 2180, column: 13, scope: !2676)
!2678 = !DILocation(line: 2180, column: 21, scope: !2676)
!2679 = !DILocation(line: 2183, column: 13, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2676, file: !3, line: 2183, column: 11)
!2681 = !DILocation(line: 2183, column: 11, scope: !2676)
!2682 = !DILocation(line: 2184, column: 24, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2680, file: !3, line: 2184, column: 13)
!2684 = !DILocation(line: 2184, column: 22, scope: !2683)
!2685 = !DILocation(line: 2184, column: 13, scope: !2680)
!2686 = !DILocation(line: 2185, column: 19, scope: !2683)
!2687 = !DILocation(line: 2185, column: 17, scope: !2683)
!2688 = !DILocation(line: 2185, column: 11, scope: !2683)
!2689 = !DILocation(line: 2184, column: 45, scope: !2683)
!2690 = !DILocation(line: 2187, column: 7, scope: !2676)
!2691 = !DILocation(line: 2187, column: 14, scope: !2676)
!2692 = !DILocation(line: 2189, column: 17, scope: !2693)
!2693 = distinct !DILexicalBlock(scope: !2694, file: !3, line: 2189, column: 15)
!2694 = distinct !DILexicalBlock(scope: !2676, file: !3, line: 2188, column: 9)
!2695 = !DILocation(line: 2189, column: 15, scope: !2694)
!2696 = !DILocation(line: 2190, column: 20, scope: !2693)
!2697 = !DILocation(line: 2190, column: 13, scope: !2693)
!2698 = !DILocation(line: 2191, column: 17, scope: !2694)
!2699 = distinct !{!2699, !2690, !2700}
!2700 = !DILocation(line: 2192, column: 9, scope: !2676)
!2701 = !DILocation(line: 2194, column: 12, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !2676, file: !3, line: 2194, column: 11)
!2703 = !DILocation(line: 2194, column: 11, scope: !2702)
!2704 = !DILocation(line: 2194, column: 18, scope: !2702)
!2705 = !DILocation(line: 2194, column: 11, scope: !2676)
!2706 = !DILocalVariable(name: "p0", scope: !2707, file: !3, line: 2196, type: !143)
!2707 = distinct !DILexicalBlock(scope: !2702, file: !3, line: 2195, column: 9)
!2708 = !DILocation(line: 2196, column: 17, scope: !2707)
!2709 = !DILocation(line: 2196, column: 22, scope: !2707)
!2710 = !DILocation(line: 2196, column: 28, scope: !2707)
!2711 = !DILocalVariable(name: "p1", scope: !2707, file: !3, line: 2197, type: !143)
!2712 = !DILocation(line: 2197, column: 17, scope: !2707)
!2713 = !DILocation(line: 2197, column: 30, scope: !2707)
!2714 = !DILocation(line: 2197, column: 22, scope: !2707)
!2715 = !DILocation(line: 2198, column: 17, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2707, file: !3, line: 2198, column: 15)
!2717 = !DILocation(line: 2198, column: 15, scope: !2707)
!2718 = !DILocation(line: 2199, column: 18, scope: !2716)
!2719 = !DILocation(line: 2199, column: 16, scope: !2716)
!2720 = !DILocation(line: 2199, column: 13, scope: !2716)
!2721 = !DILocation(line: 2202, column: 27, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2723, file: !3, line: 2202, column: 19)
!2723 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 2201, column: 13)
!2724 = !DILocation(line: 2202, column: 30, scope: !2722)
!2725 = !DILocation(line: 2202, column: 19, scope: !2722)
!2726 = !DILocation(line: 2202, column: 19, scope: !2723)
!2727 = !DILocation(line: 2203, column: 17, scope: !2722)
!2728 = !DILocation(line: 2205, column: 18, scope: !2723)
!2729 = !DILocation(line: 2205, column: 21, scope: !2723)
!2730 = !DILocation(line: 2207, column: 33, scope: !2707)
!2731 = !DILocation(line: 2207, column: 31, scope: !2707)
!2732 = !DILocation(line: 2208, column: 33, scope: !2707)
!2733 = !DILocation(line: 2208, column: 31, scope: !2707)
!2734 = !DILocation(line: 2209, column: 9, scope: !2707)
!2735 = !DILocalVariable(name: "res", scope: !2736, file: !3, line: 2212, type: !687)
!2736 = distinct !DILexicalBlock(scope: !2702, file: !3, line: 2211, column: 9)
!2737 = !DILocation(line: 2212, column: 21, scope: !2736)
!2738 = !DILocation(line: 2212, column: 37, scope: !2736)
!2739 = !DILocation(line: 2212, column: 27, scope: !2736)
!2740 = !DILocation(line: 2215, column: 15, scope: !2741)
!2741 = distinct !DILexicalBlock(scope: !2736, file: !3, line: 2215, column: 15)
!2742 = !DILocation(line: 2215, column: 19, scope: !2741)
!2743 = !DILocation(line: 2215, column: 15, scope: !2736)
!2744 = !DILocation(line: 2220, column: 47, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2741, file: !3, line: 2216, column: 13)
!2746 = !DILocation(line: 2220, column: 54, scope: !2745)
!2747 = !DILocation(line: 2220, column: 15, scope: !2745)
!2748 = !DILocation(line: 2227, column: 15, scope: !2745)
!2749 = !DILocalVariable(name: "p", scope: !2745, file: !3, line: 2228, type: !693)
!2750 = !DILocation(line: 2228, column: 34, scope: !2745)
!2751 = !DILocation(line: 2229, column: 15, scope: !2745)
!2752 = !DILocation(line: 2229, column: 23, scope: !2745)
!2753 = !DILocation(line: 2229, column: 22, scope: !2745)
!2754 = !DILocation(line: 2230, column: 26, scope: !2745)
!2755 = !DILocation(line: 2230, column: 56, scope: !2745)
!2756 = !DILocation(line: 2230, column: 54, scope: !2745)
!2757 = !DILocation(line: 2230, column: 17, scope: !2745)
!2758 = distinct !{!2758, !2751, !2759}
!2759 = !DILocation(line: 2230, column: 58, scope: !2745)
!2760 = !DILocation(line: 2231, column: 15, scope: !2745)
!2761 = !DILocation(line: 2233, column: 15, scope: !2745)
!2762 = !DILocation(line: 2235, column: 19, scope: !2736)
!2763 = !DILocation(line: 2235, column: 11, scope: !2736)
!2764 = !DILocation(line: 2238, column: 57, scope: !2765)
!2765 = distinct !DILexicalBlock(scope: !2736, file: !3, line: 2236, column: 13)
!2766 = !DILocation(line: 2238, column: 35, scope: !2765)
!2767 = !DILocation(line: 2240, column: 15, scope: !2765)
!2768 = !DILocation(line: 2243, column: 57, scope: !2765)
!2769 = !DILocation(line: 2243, column: 35, scope: !2765)
!2770 = !DILocation(line: 2244, column: 15, scope: !2765)
!2771 = !DILocation(line: 2247, column: 35, scope: !2765)
!2772 = !DILocation(line: 2248, column: 35, scope: !2765)
!2773 = !DILocation(line: 2249, column: 15, scope: !2765)
!2774 = !DILocation(line: 2252, column: 19, scope: !2775)
!2775 = distinct !DILexicalBlock(scope: !2765, file: !3, line: 2252, column: 19)
!2776 = !DILocation(line: 2252, column: 19, scope: !2765)
!2777 = !DILocalVariable(name: "i", scope: !2778, file: !3, line: 2254, type: !27)
!2778 = distinct !DILexicalBlock(scope: !2779, file: !3, line: 2254, column: 19)
!2779 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2253, column: 17)
!2780 = !DILocation(line: 2254, column: 28, scope: !2778)
!2781 = !DILocation(line: 2254, column: 24, scope: !2778)
!2782 = !DILocation(line: 2254, column: 35, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !2778, file: !3, line: 2254, column: 19)
!2784 = !DILocation(line: 2254, column: 37, scope: !2783)
!2785 = !DILocation(line: 2254, column: 19, scope: !2778)
!2786 = !DILocation(line: 2256, column: 57, scope: !2783)
!2787 = !DILocation(line: 2256, column: 40, scope: !2783)
!2788 = !DILocation(line: 2256, column: 23, scope: !2783)
!2789 = !DILocation(line: 2255, column: 38, scope: !2783)
!2790 = !DILocation(line: 2255, column: 21, scope: !2783)
!2791 = !DILocation(line: 2255, column: 41, scope: !2783)
!2792 = !DILocation(line: 2254, column: 43, scope: !2783)
!2793 = !DILocation(line: 2254, column: 19, scope: !2783)
!2794 = distinct !{!2794, !2785, !2795}
!2795 = !DILocation(line: 2256, column: 68, scope: !2778)
!2796 = !DILocation(line: 2257, column: 17, scope: !2779)
!2797 = !DILocation(line: 2258, column: 13, scope: !2765)
!2798 = !DILocation(line: 2261, column: 7, scope: !2676)
!2799 = !DILocation(line: 2262, column: 5, scope: !2676)
!2800 = !DILocation(line: 2264, column: 10, scope: !933)
!2801 = !DILocation(line: 2264, column: 3, scope: !933)
!2802 = !DILocation(line: 2265, column: 1, scope: !933)
!2803 = distinct !DISubprogram(name: "parse_ls_color", scope: !3, file: !3, line: 2510, type: !532, scopeLine: 2511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!2804 = !DILocalVariable(name: "p", scope: !2803, file: !3, line: 2512, type: !146)
!2805 = !DILocation(line: 2512, column: 15, scope: !2803)
!2806 = !DILocalVariable(name: "buf", scope: !2803, file: !3, line: 2513, type: !143)
!2807 = !DILocation(line: 2513, column: 9, scope: !2803)
!2808 = !DILocalVariable(name: "ind_no", scope: !2803, file: !3, line: 2514, type: !27)
!2809 = !DILocation(line: 2514, column: 7, scope: !2803)
!2810 = !DILocalVariable(name: "label", scope: !2803, file: !3, line: 2515, type: !255)
!2811 = !DILocation(line: 2515, column: 8, scope: !2803)
!2812 = !DILocalVariable(name: "ext", scope: !2803, file: !3, line: 2516, type: !710)
!2813 = !DILocation(line: 2516, column: 26, scope: !2803)
!2814 = !DILocation(line: 2518, column: 12, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 2518, column: 7)
!2816 = !DILocation(line: 2518, column: 10, scope: !2815)
!2817 = !DILocation(line: 2518, column: 34, scope: !2815)
!2818 = !DILocation(line: 2518, column: 42, scope: !2815)
!2819 = !DILocation(line: 2518, column: 46, scope: !2815)
!2820 = !DILocation(line: 2518, column: 45, scope: !2815)
!2821 = !DILocation(line: 2518, column: 48, scope: !2815)
!2822 = !DILocation(line: 2518, column: 7, scope: !2803)
!2823 = !DILocalVariable(name: "colorterm", scope: !2824, file: !3, line: 2524, type: !146)
!2824 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 2519, column: 5)
!2825 = !DILocation(line: 2524, column: 19, scope: !2824)
!2826 = !DILocation(line: 2524, column: 31, scope: !2824)
!2827 = !DILocation(line: 2525, column: 14, scope: !2828)
!2828 = distinct !DILexicalBlock(scope: !2824, file: !3, line: 2525, column: 11)
!2829 = !DILocation(line: 2525, column: 24, scope: !2828)
!2830 = !DILocation(line: 2525, column: 28, scope: !2828)
!2831 = !DILocation(line: 2525, column: 27, scope: !2828)
!2832 = !DILocation(line: 2525, column: 39, scope: !2828)
!2833 = !DILocation(line: 2525, column: 44, scope: !2828)
!2834 = !DILocation(line: 2525, column: 11, scope: !2824)
!2835 = !DILocation(line: 2526, column: 26, scope: !2828)
!2836 = !DILocation(line: 2526, column: 9, scope: !2828)
!2837 = !DILocation(line: 2527, column: 7, scope: !2824)
!2838 = !DILocation(line: 2530, column: 7, scope: !2803)
!2839 = !DILocation(line: 2531, column: 11, scope: !2803)
!2840 = !DILocation(line: 2531, column: 3, scope: !2803)
!2841 = !DILocation(line: 2537, column: 30, scope: !2803)
!2842 = !DILocation(line: 2537, column: 21, scope: !2803)
!2843 = !DILocation(line: 2537, column: 19, scope: !2803)
!2844 = !DILocation(line: 2537, column: 7, scope: !2803)
!2845 = !DILocalVariable(name: "state", scope: !2803, file: !3, line: 2539, type: !129)
!2846 = !DILocation(line: 2539, column: 20, scope: !2803)
!2847 = !DILocation(line: 2540, column: 3, scope: !2803)
!2848 = !DILocation(line: 2542, column: 15, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 2541, column: 5)
!2850 = !DILocation(line: 2542, column: 7, scope: !2849)
!2851 = !DILocation(line: 2545, column: 20, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2849, file: !3, line: 2543, column: 9)
!2853 = !DILocation(line: 2545, column: 19, scope: !2852)
!2854 = !DILocation(line: 2545, column: 11, scope: !2852)
!2855 = !DILocation(line: 2548, column: 15, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 2546, column: 13)
!2857 = !DILocation(line: 2549, column: 15, scope: !2856)
!2858 = !DILocation(line: 2557, column: 21, scope: !2856)
!2859 = !DILocation(line: 2557, column: 19, scope: !2856)
!2860 = !DILocation(line: 2558, column: 27, scope: !2856)
!2861 = !DILocation(line: 2558, column: 15, scope: !2856)
!2862 = !DILocation(line: 2558, column: 20, scope: !2856)
!2863 = !DILocation(line: 2558, column: 25, scope: !2856)
!2864 = !DILocation(line: 2559, column: 32, scope: !2856)
!2865 = !DILocation(line: 2559, column: 30, scope: !2856)
!2866 = !DILocation(line: 2561, column: 15, scope: !2856)
!2867 = !DILocation(line: 2562, column: 33, scope: !2856)
!2868 = !DILocation(line: 2562, column: 15, scope: !2856)
!2869 = !DILocation(line: 2562, column: 20, scope: !2856)
!2870 = !DILocation(line: 2562, column: 24, scope: !2856)
!2871 = !DILocation(line: 2562, column: 31, scope: !2856)
!2872 = !DILocation(line: 2564, column: 59, scope: !2856)
!2873 = !DILocation(line: 2564, column: 64, scope: !2856)
!2874 = !DILocation(line: 2564, column: 68, scope: !2856)
!2875 = !DILocation(line: 2564, column: 24, scope: !2856)
!2876 = !DILocation(line: 2564, column: 21, scope: !2856)
!2877 = !DILocation(line: 2566, column: 15, scope: !2856)
!2878 = !DILocation(line: 2569, column: 21, scope: !2856)
!2879 = !DILocation(line: 2570, column: 15, scope: !2856)
!2880 = !DILocation(line: 2573, column: 29, scope: !2856)
!2881 = !DILocation(line: 2573, column: 26, scope: !2856)
!2882 = !DILocation(line: 2573, column: 15, scope: !2856)
!2883 = !DILocation(line: 2573, column: 24, scope: !2856)
!2884 = !DILocation(line: 2574, column: 21, scope: !2856)
!2885 = !DILocation(line: 2575, column: 15, scope: !2856)
!2886 = !DILocation(line: 2577, column: 11, scope: !2852)
!2887 = !DILocation(line: 2580, column: 16, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 2580, column: 15)
!2889 = !DILocation(line: 2580, column: 15, scope: !2888)
!2890 = !DILocation(line: 2580, column: 15, scope: !2852)
!2891 = !DILocation(line: 2582, column: 29, scope: !2892)
!2892 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 2581, column: 13)
!2893 = !DILocation(line: 2582, column: 26, scope: !2892)
!2894 = !DILocation(line: 2582, column: 15, scope: !2892)
!2895 = !DILocation(line: 2582, column: 24, scope: !2892)
!2896 = !DILocation(line: 2583, column: 21, scope: !2892)
!2897 = !DILocation(line: 2584, column: 13, scope: !2892)
!2898 = !DILocation(line: 2586, column: 19, scope: !2888)
!2899 = !DILocation(line: 2587, column: 11, scope: !2852)
!2900 = !DILocation(line: 2590, column: 17, scope: !2852)
!2901 = !DILocation(line: 2591, column: 18, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 2591, column: 15)
!2903 = !DILocation(line: 2591, column: 15, scope: !2902)
!2904 = !DILocation(line: 2591, column: 22, scope: !2902)
!2905 = !DILocation(line: 2591, column: 15, scope: !2852)
!2906 = !DILocation(line: 2593, column: 27, scope: !2907)
!2907 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 2593, column: 15)
!2908 = distinct !DILexicalBlock(scope: !2902, file: !3, line: 2592, column: 13)
!2909 = !DILocation(line: 2593, column: 20, scope: !2907)
!2910 = !DILocation(line: 2593, column: 47, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2907, file: !3, line: 2593, column: 15)
!2912 = !DILocation(line: 2593, column: 32, scope: !2911)
!2913 = !DILocation(line: 2593, column: 55, scope: !2911)
!2914 = !DILocation(line: 2593, column: 15, scope: !2907)
!2915 = !DILocation(line: 2595, column: 23, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2917, file: !3, line: 2595, column: 23)
!2917 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 2594, column: 17)
!2918 = !DILocation(line: 2595, column: 23, scope: !2917)
!2919 = !DILocation(line: 2597, column: 56, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2916, file: !3, line: 2596, column: 21)
!2921 = !DILocation(line: 2597, column: 39, scope: !2920)
!2922 = !DILocation(line: 2597, column: 23, scope: !2920)
!2923 = !DILocation(line: 2597, column: 47, scope: !2920)
!2924 = !DILocation(line: 2597, column: 54, scope: !2920)
!2925 = !DILocation(line: 2599, column: 67, scope: !2920)
!2926 = !DILocation(line: 2599, column: 51, scope: !2920)
!2927 = !DILocation(line: 2599, column: 75, scope: !2920)
!2928 = !DILocation(line: 2598, column: 32, scope: !2920)
!2929 = !DILocation(line: 2598, column: 29, scope: !2920)
!2930 = !DILocation(line: 2601, column: 23, scope: !2920)
!2931 = !DILocation(line: 2603, column: 17, scope: !2917)
!2932 = !DILocation(line: 2593, column: 64, scope: !2911)
!2933 = !DILocation(line: 2593, column: 15, scope: !2911)
!2934 = distinct !{!2934, !2914, !2935}
!2935 = !DILocation(line: 2603, column: 17, scope: !2907)
!2936 = !DILocation(line: 2604, column: 19, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2908, file: !3, line: 2604, column: 19)
!2938 = !DILocation(line: 2604, column: 25, scope: !2937)
!2939 = !DILocation(line: 2604, column: 19, scope: !2908)
!2940 = !DILocation(line: 2605, column: 30, scope: !2937)
!2941 = !DILocation(line: 2605, column: 67, scope: !2937)
!2942 = !DILocation(line: 2605, column: 60, scope: !2937)
!2943 = !DILocation(line: 2605, column: 17, scope: !2937)
!2944 = !DILocation(line: 2606, column: 13, scope: !2908)
!2945 = !DILocation(line: 2607, column: 11, scope: !2852)
!2946 = !DILocation(line: 2610, column: 18, scope: !2947)
!2947 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 2610, column: 15)
!2948 = !DILocation(line: 2610, column: 15, scope: !2947)
!2949 = !DILocation(line: 2610, column: 22, scope: !2947)
!2950 = !DILocation(line: 2610, column: 15, scope: !2852)
!2951 = !DILocation(line: 2612, column: 33, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 2611, column: 13)
!2953 = !DILocation(line: 2612, column: 15, scope: !2952)
!2954 = !DILocation(line: 2612, column: 20, scope: !2952)
!2955 = !DILocation(line: 2612, column: 24, scope: !2952)
!2956 = !DILocation(line: 2612, column: 31, scope: !2952)
!2957 = !DILocation(line: 2613, column: 60, scope: !2952)
!2958 = !DILocation(line: 2613, column: 65, scope: !2952)
!2959 = !DILocation(line: 2613, column: 69, scope: !2952)
!2960 = !DILocation(line: 2613, column: 24, scope: !2952)
!2961 = !DILocation(line: 2613, column: 21, scope: !2952)
!2962 = !DILocation(line: 2615, column: 13, scope: !2952)
!2963 = !DILocation(line: 2617, column: 19, scope: !2947)
!2964 = !DILocation(line: 2618, column: 11, scope: !2852)
!2965 = !DILocation(line: 2621, column: 11, scope: !2852)
!2966 = !DILocation(line: 2624, column: 11, scope: !2852)
!2967 = distinct !{!2967, !2847, !2968}
!2968 = !DILocation(line: 2626, column: 5, scope: !2803)
!2969 = !DILabel(scope: !2803, name: "done", file: !3, line: 2627)
!2970 = !DILocation(line: 2627, column: 2, scope: !2803)
!2971 = !DILocation(line: 2629, column: 7, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 2629, column: 7)
!2973 = !DILocation(line: 2629, column: 13, scope: !2972)
!2974 = !DILocation(line: 2629, column: 7, scope: !2803)
!2975 = !DILocalVariable(name: "e", scope: !2976, file: !3, line: 2631, type: !710)
!2976 = distinct !DILexicalBlock(scope: !2972, file: !3, line: 2630, column: 5)
!2977 = !DILocation(line: 2631, column: 30, scope: !2976)
!2978 = !DILocalVariable(name: "e2", scope: !2976, file: !3, line: 2632, type: !710)
!2979 = !DILocation(line: 2632, column: 30, scope: !2976)
!2980 = !DILocation(line: 2635, column: 14, scope: !2976)
!2981 = !DILocation(line: 2634, column: 7, scope: !2976)
!2982 = !DILocation(line: 2636, column: 13, scope: !2976)
!2983 = !DILocation(line: 2636, column: 7, scope: !2976)
!2984 = !DILocation(line: 2637, column: 16, scope: !2985)
!2985 = distinct !DILexicalBlock(scope: !2976, file: !3, line: 2637, column: 7)
!2986 = !DILocation(line: 2637, column: 14, scope: !2985)
!2987 = !DILocation(line: 2637, column: 12, scope: !2985)
!2988 = !DILocation(line: 2637, column: 32, scope: !2989)
!2989 = distinct !DILexicalBlock(scope: !2985, file: !3, line: 2637, column: 7)
!2990 = !DILocation(line: 2637, column: 34, scope: !2989)
!2991 = !DILocation(line: 2637, column: 7, scope: !2985)
!2992 = !DILocation(line: 2639, column: 16, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2989, file: !3, line: 2638, column: 9)
!2994 = !DILocation(line: 2639, column: 14, scope: !2993)
!2995 = !DILocation(line: 2640, column: 15, scope: !2993)
!2996 = !DILocation(line: 2640, column: 18, scope: !2993)
!2997 = !DILocation(line: 2640, column: 13, scope: !2993)
!2998 = !DILocation(line: 2641, column: 17, scope: !2993)
!2999 = !DILocation(line: 2641, column: 11, scope: !2993)
!3000 = !DILocation(line: 2637, column: 7, scope: !2989)
!3001 = distinct !{!3001, !2991, !3002}
!3002 = !DILocation(line: 2642, column: 9, scope: !2985)
!3003 = !DILocation(line: 2643, column: 24, scope: !2976)
!3004 = !DILocation(line: 2644, column: 5, scope: !2976)
!3005 = !DILocation(line: 2646, column: 31, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 2646, column: 7)
!3007 = !DILocation(line: 2646, column: 35, scope: !3006)
!3008 = !DILocation(line: 2647, column: 7, scope: !3006)
!3009 = !DILocation(line: 2647, column: 11, scope: !3006)
!3010 = !DILocation(line: 2646, column: 7, scope: !2803)
!3011 = !DILocation(line: 2648, column: 31, scope: !3006)
!3012 = !DILocation(line: 2648, column: 5, scope: !3006)
!3013 = !DILocation(line: 2649, column: 1, scope: !2803)
!3014 = distinct !DISubprogram(name: "is_colored", scope: !3, file: !3, line: 1256, type: !3015, scopeLine: 1257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3015 = !DISubroutineType(types: !3016)
!3016 = !{!141, !53}
!3017 = !DILocalVariable(name: "type", arg: 1, scope: !3014, file: !3, line: 1256, type: !53)
!3018 = !DILocation(line: 1256, column: 31, scope: !3014)
!3019 = !DILocalVariable(name: "len", scope: !3014, file: !3, line: 1258, type: !149)
!3020 = !DILocation(line: 1258, column: 10, scope: !3014)
!3021 = !DILocation(line: 1258, column: 32, scope: !3014)
!3022 = !DILocation(line: 1258, column: 16, scope: !3014)
!3023 = !DILocation(line: 1258, column: 38, scope: !3014)
!3024 = !DILocalVariable(name: "s", scope: !3014, file: !3, line: 1259, type: !146)
!3025 = !DILocation(line: 1259, column: 15, scope: !3014)
!3026 = !DILocation(line: 1259, column: 35, scope: !3014)
!3027 = !DILocation(line: 1259, column: 19, scope: !3014)
!3028 = !DILocation(line: 1259, column: 41, scope: !3014)
!3029 = !DILocation(line: 1260, column: 13, scope: !3014)
!3030 = !DILocation(line: 1260, column: 17, scope: !3014)
!3031 = !DILocation(line: 1261, column: 13, scope: !3014)
!3032 = !DILocation(line: 1261, column: 17, scope: !3014)
!3033 = !DILocation(line: 1261, column: 21, scope: !3014)
!3034 = !DILocation(line: 1261, column: 26, scope: !3014)
!3035 = !DILocation(line: 1261, column: 29, scope: !3014)
!3036 = !DILocation(line: 1261, column: 50, scope: !3014)
!3037 = !DILocation(line: 1262, column: 13, scope: !3014)
!3038 = !DILocation(line: 1262, column: 17, scope: !3014)
!3039 = !DILocation(line: 1262, column: 21, scope: !3014)
!3040 = !DILocation(line: 1262, column: 26, scope: !3014)
!3041 = !DILocation(line: 1262, column: 29, scope: !3014)
!3042 = !DILocation(line: 1262, column: 51, scope: !3014)
!3043 = !DILocation(line: 0, scope: !3014)
!3044 = !DILocation(line: 1260, column: 10, scope: !3014)
!3045 = !DILocation(line: 1260, column: 3, scope: !3014)
!3046 = distinct !DISubprogram(name: "dev_ino_hash", scope: !3, file: !3, line: 1192, type: !1227, scopeLine: 1193, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3047 = !DILocalVariable(name: "x", arg: 1, scope: !3046, file: !3, line: 1192, type: !181)
!3048 = !DILocation(line: 1192, column: 27, scope: !3046)
!3049 = !DILocalVariable(name: "table_size", arg: 2, scope: !3046, file: !3, line: 1192, type: !149)
!3050 = !DILocation(line: 1192, column: 37, scope: !3046)
!3051 = !DILocalVariable(name: "p", scope: !3046, file: !3, line: 1194, type: !451)
!3052 = !DILocation(line: 1194, column: 25, scope: !3046)
!3053 = !DILocation(line: 1194, column: 29, scope: !3046)
!3054 = !DILocation(line: 1195, column: 22, scope: !3046)
!3055 = !DILocation(line: 1195, column: 25, scope: !3046)
!3056 = !DILocation(line: 1195, column: 34, scope: !3046)
!3057 = !DILocation(line: 1195, column: 32, scope: !3046)
!3058 = !DILocation(line: 1195, column: 3, scope: !3046)
!3059 = distinct !DISubprogram(name: "dev_ino_compare", scope: !3, file: !3, line: 1199, type: !1232, scopeLine: 1200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3060 = !DILocalVariable(name: "x", arg: 1, scope: !3059, file: !3, line: 1199, type: !181)
!3061 = !DILocation(line: 1199, column: 30, scope: !3059)
!3062 = !DILocalVariable(name: "y", arg: 2, scope: !3059, file: !3, line: 1199, type: !181)
!3063 = !DILocation(line: 1199, column: 45, scope: !3059)
!3064 = !DILocalVariable(name: "a", scope: !3059, file: !3, line: 1201, type: !451)
!3065 = !DILocation(line: 1201, column: 25, scope: !3059)
!3066 = !DILocation(line: 1201, column: 29, scope: !3059)
!3067 = !DILocalVariable(name: "b", scope: !3059, file: !3, line: 1202, type: !451)
!3068 = !DILocation(line: 1202, column: 25, scope: !3059)
!3069 = !DILocation(line: 1202, column: 29, scope: !3059)
!3070 = !DILocation(line: 1203, column: 10, scope: !3059)
!3071 = !DILocation(line: 0, scope: !3059)
!3072 = !DILocation(line: 1203, column: 3, scope: !3059)
!3073 = distinct !DISubprogram(name: "dev_ino_free", scope: !3, file: !3, line: 1207, type: !495, scopeLine: 1208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3074 = !DILocalVariable(name: "x", arg: 1, scope: !3073, file: !3, line: 1207, type: !167)
!3075 = !DILocation(line: 1207, column: 21, scope: !3073)
!3076 = !DILocation(line: 1209, column: 9, scope: !3073)
!3077 = !DILocation(line: 1209, column: 3, scope: !3073)
!3078 = !DILocation(line: 1210, column: 1, scope: !3073)
!3079 = distinct !DISubprogram(name: "file_escape_init", scope: !3, file: !3, line: 1085, type: !532, scopeLine: 1086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3080 = !DILocalVariable(name: "i", scope: !3081, file: !3, line: 1087, type: !27)
!3081 = distinct !DILexicalBlock(scope: !3079, file: !3, line: 1087, column: 3)
!3082 = !DILocation(line: 1087, column: 12, scope: !3081)
!3083 = !DILocation(line: 1087, column: 8, scope: !3081)
!3084 = !DILocation(line: 1087, column: 19, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 1087, column: 3)
!3086 = !DILocation(line: 1087, column: 21, scope: !3085)
!3087 = !DILocation(line: 1087, column: 3, scope: !3081)
!3088 = !DILocation(line: 1088, column: 30, scope: !3085)
!3089 = !DILocation(line: 1088, column: 19, scope: !3085)
!3090 = !DILocation(line: 1088, column: 33, scope: !3085)
!3091 = !DILocation(line: 1088, column: 36, scope: !3085)
!3092 = !DILocation(line: 1088, column: 38, scope: !3085)
!3093 = !DILocation(line: 1088, column: 45, scope: !3085)
!3094 = !DILocation(line: 1088, column: 48, scope: !3085)
!3095 = !DILocation(line: 1088, column: 50, scope: !3085)
!3096 = !DILocation(line: 1088, column: 57, scope: !3085)
!3097 = !DILocation(line: 1088, column: 60, scope: !3085)
!3098 = !DILocation(line: 1088, column: 62, scope: !3085)
!3099 = !DILocation(line: 1088, column: 69, scope: !3085)
!3100 = !DILocation(line: 1088, column: 72, scope: !3085)
!3101 = !DILocation(line: 1088, column: 74, scope: !3085)
!3102 = !DILocation(line: 1088, column: 13, scope: !3085)
!3103 = !DILocation(line: 1088, column: 5, scope: !3085)
!3104 = !DILocation(line: 1088, column: 16, scope: !3085)
!3105 = !DILocation(line: 1087, column: 29, scope: !3085)
!3106 = !DILocation(line: 1087, column: 3, scope: !3085)
!3107 = distinct !{!3107, !3087, !3108}
!3108 = !DILocation(line: 1088, column: 77, scope: !3081)
!3109 = !DILocation(line: 1089, column: 1, scope: !3079)
!3110 = distinct !DISubprogram(name: "clear_files", scope: !3, file: !3, line: 2990, type: !532, scopeLine: 2991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3111 = !DILocalVariable(name: "i", scope: !3112, file: !3, line: 2992, type: !149)
!3112 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 2992, column: 3)
!3113 = !DILocation(line: 2992, column: 15, scope: !3112)
!3114 = !DILocation(line: 2992, column: 8, scope: !3112)
!3115 = !DILocation(line: 2992, column: 22, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3112, file: !3, line: 2992, column: 3)
!3117 = !DILocation(line: 2992, column: 26, scope: !3116)
!3118 = !DILocation(line: 2992, column: 24, scope: !3116)
!3119 = !DILocation(line: 2992, column: 3, scope: !3112)
!3120 = !DILocalVariable(name: "f", scope: !3121, file: !3, line: 2994, type: !260)
!3121 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 2993, column: 5)
!3122 = !DILocation(line: 2994, column: 24, scope: !3121)
!3123 = !DILocation(line: 2994, column: 28, scope: !3121)
!3124 = !DILocation(line: 2994, column: 40, scope: !3121)
!3125 = !DILocation(line: 2995, column: 17, scope: !3121)
!3126 = !DILocation(line: 2995, column: 7, scope: !3121)
!3127 = !DILocation(line: 2996, column: 5, scope: !3121)
!3128 = !DILocation(line: 2992, column: 39, scope: !3116)
!3129 = !DILocation(line: 2992, column: 3, scope: !3116)
!3130 = distinct !{!3130, !3119, !3131}
!3131 = !DILocation(line: 2996, column: 5, scope: !3112)
!3132 = !DILocation(line: 2998, column: 14, scope: !3110)
!3133 = !DILocation(line: 2999, column: 19, scope: !3110)
!3134 = !DILocation(line: 3000, column: 15, scope: !3110)
!3135 = !DILocation(line: 3001, column: 22, scope: !3110)
!3136 = !DILocation(line: 3002, column: 20, scope: !3110)
!3137 = !DILocation(line: 3003, column: 15, scope: !3110)
!3138 = !DILocation(line: 3004, column: 15, scope: !3110)
!3139 = !DILocation(line: 3005, column: 15, scope: !3110)
!3140 = !DILocation(line: 3006, column: 16, scope: !3110)
!3141 = !DILocation(line: 3007, column: 18, scope: !3110)
!3142 = !DILocation(line: 3008, column: 29, scope: !3110)
!3143 = !DILocation(line: 3009, column: 29, scope: !3110)
!3144 = !DILocation(line: 3010, column: 19, scope: !3110)
!3145 = !DILocation(line: 3011, column: 1, scope: !3110)
!3146 = distinct !DISubprogram(name: "gobble_file", scope: !3, file: !3, line: 3111, type: !3147, scopeLine: 3113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3147 = !DISubroutineType(types: !3148)
!3148 = !{!168, !146, !36, !269, !141, !146}
!3149 = !DILocalVariable(name: "name", arg: 1, scope: !3146, file: !3, line: 3111, type: !146)
!3150 = !DILocation(line: 3111, column: 26, scope: !3146)
!3151 = !DILocalVariable(name: "type", arg: 2, scope: !3146, file: !3, line: 3111, type: !36)
!3152 = !DILocation(line: 3111, column: 46, scope: !3146)
!3153 = !DILocalVariable(name: "inode", arg: 3, scope: !3146, file: !3, line: 3111, type: !269)
!3154 = !DILocation(line: 3111, column: 58, scope: !3146)
!3155 = !DILocalVariable(name: "command_line_arg", arg: 4, scope: !3146, file: !3, line: 3112, type: !141)
!3156 = !DILocation(line: 3112, column: 19, scope: !3146)
!3157 = !DILocalVariable(name: "dirname", arg: 5, scope: !3146, file: !3, line: 3112, type: !146)
!3158 = !DILocation(line: 3112, column: 49, scope: !3146)
!3159 = !DILocalVariable(name: "blocks", scope: !3146, file: !3, line: 3114, type: !168)
!3160 = !DILocation(line: 3114, column: 13, scope: !3146)
!3161 = !DILocalVariable(name: "f", scope: !3146, file: !3, line: 3115, type: !260)
!3162 = !DILocation(line: 3115, column: 20, scope: !3146)
!3163 = !DILocation(line: 3119, column: 3, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3165, file: !3, line: 3119, column: 3)
!3165 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 3119, column: 3)
!3166 = !DILocation(line: 3119, column: 3, scope: !3165)
!3167 = !DILocation(line: 3121, column: 7, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 3121, column: 7)
!3169 = !DILocation(line: 3121, column: 21, scope: !3168)
!3170 = !DILocation(line: 3121, column: 18, scope: !3168)
!3171 = !DILocation(line: 3121, column: 7, scope: !3146)
!3172 = !DILocation(line: 3123, column: 29, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3168, file: !3, line: 3122, column: 5)
!3174 = !DILocation(line: 3123, column: 39, scope: !3173)
!3175 = !DILocation(line: 3123, column: 18, scope: !3173)
!3176 = !DILocation(line: 3123, column: 16, scope: !3173)
!3177 = !DILocation(line: 3124, column: 19, scope: !3173)
!3178 = !DILocation(line: 3125, column: 5, scope: !3173)
!3179 = !DILocation(line: 3127, column: 8, scope: !3146)
!3180 = !DILocation(line: 3127, column: 17, scope: !3146)
!3181 = !DILocation(line: 3127, column: 5, scope: !3146)
!3182 = !DILocation(line: 3128, column: 11, scope: !3146)
!3183 = !DILocation(line: 3128, column: 3, scope: !3146)
!3184 = !DILocation(line: 3129, column: 20, scope: !3146)
!3185 = !DILocation(line: 3129, column: 3, scope: !3146)
!3186 = !DILocation(line: 3129, column: 6, scope: !3146)
!3187 = !DILocation(line: 3129, column: 11, scope: !3146)
!3188 = !DILocation(line: 3129, column: 18, scope: !3146)
!3189 = !DILocation(line: 3130, column: 17, scope: !3146)
!3190 = !DILocation(line: 3130, column: 3, scope: !3146)
!3191 = !DILocation(line: 3130, column: 6, scope: !3146)
!3192 = !DILocation(line: 3130, column: 15, scope: !3146)
!3193 = !DILocation(line: 3132, column: 3, scope: !3146)
!3194 = !DILocation(line: 3132, column: 6, scope: !3146)
!3195 = !DILocation(line: 3132, column: 13, scope: !3146)
!3196 = !DILocation(line: 3133, column: 10, scope: !3197)
!3197 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 3133, column: 7)
!3198 = !DILocation(line: 3133, column: 27, scope: !3197)
!3199 = !DILocation(line: 3133, column: 30, scope: !3197)
!3200 = !DILocation(line: 3133, column: 7, scope: !3146)
!3201 = !DILocation(line: 3136, column: 34, scope: !3202)
!3202 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 3134, column: 5)
!3203 = !DILocation(line: 3136, column: 19, scope: !3202)
!3204 = !DILocation(line: 3136, column: 7, scope: !3202)
!3205 = !DILocation(line: 3136, column: 10, scope: !3202)
!3206 = !DILocation(line: 3136, column: 17, scope: !3202)
!3207 = !DILocation(line: 3137, column: 11, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3202, file: !3, line: 3137, column: 11)
!3209 = !DILocation(line: 3137, column: 14, scope: !3208)
!3210 = !DILocation(line: 3137, column: 11, scope: !3202)
!3211 = !DILocation(line: 3138, column: 25, scope: !3208)
!3212 = !DILocation(line: 3138, column: 9, scope: !3208)
!3213 = !DILocation(line: 3139, column: 5, scope: !3202)
!3214 = !DILocation(line: 3141, column: 7, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 3141, column: 7)
!3216 = !DILocation(line: 3142, column: 7, scope: !3215)
!3217 = !DILocation(line: 3142, column: 10, scope: !3215)
!3218 = !DILocation(line: 3143, column: 7, scope: !3215)
!3219 = !DILocation(line: 3143, column: 10, scope: !3215)
!3220 = !DILocation(line: 3147, column: 7, scope: !3215)
!3221 = !DILocation(line: 3147, column: 11, scope: !3215)
!3222 = !DILocation(line: 3147, column: 16, scope: !3215)
!3223 = !DILocation(line: 3147, column: 29, scope: !3215)
!3224 = !DILocation(line: 3147, column: 32, scope: !3215)
!3225 = !DILocation(line: 3148, column: 11, scope: !3215)
!3226 = !DILocation(line: 3148, column: 15, scope: !3215)
!3227 = !DILocation(line: 3149, column: 15, scope: !3215)
!3228 = !DILocation(line: 3149, column: 18, scope: !3215)
!3229 = !DILocation(line: 3150, column: 15, scope: !3215)
!3230 = !DILocation(line: 3150, column: 18, scope: !3215)
!3231 = !DILocation(line: 3153, column: 7, scope: !3215)
!3232 = !DILocation(line: 3153, column: 12, scope: !3215)
!3233 = !DILocation(line: 3153, column: 24, scope: !3215)
!3234 = !DILocation(line: 3153, column: 27, scope: !3215)
!3235 = !DILocation(line: 3154, column: 11, scope: !3215)
!3236 = !DILocation(line: 3154, column: 15, scope: !3215)
!3237 = !DILocation(line: 3154, column: 20, scope: !3215)
!3238 = !DILocation(line: 3154, column: 37, scope: !3215)
!3239 = !DILocation(line: 3154, column: 40, scope: !3215)
!3240 = !DILocation(line: 3154, column: 45, scope: !3215)
!3241 = !DILocation(line: 3155, column: 11, scope: !3215)
!3242 = !DILocation(line: 3155, column: 15, scope: !3215)
!3243 = !DILocation(line: 3155, column: 27, scope: !3215)
!3244 = !DILocation(line: 3156, column: 15, scope: !3215)
!3245 = !DILocation(line: 3156, column: 18, scope: !3215)
!3246 = !DILocation(line: 3156, column: 44, scope: !3215)
!3247 = !DILocation(line: 3156, column: 47, scope: !3215)
!3248 = !DILocation(line: 3159, column: 7, scope: !3215)
!3249 = !DILocation(line: 3159, column: 11, scope: !3215)
!3250 = !DILocation(line: 3159, column: 23, scope: !3215)
!3251 = !DILocation(line: 3159, column: 26, scope: !3215)
!3252 = !DILocation(line: 3159, column: 32, scope: !3215)
!3253 = !DILocation(line: 3160, column: 7, scope: !3215)
!3254 = !DILocation(line: 3160, column: 11, scope: !3215)
!3255 = !DILocation(line: 3161, column: 11, scope: !3215)
!3256 = !DILocation(line: 3161, column: 15, scope: !3215)
!3257 = !DILocation(line: 3161, column: 20, scope: !3215)
!3258 = !DILocation(line: 3161, column: 31, scope: !3215)
!3259 = !DILocation(line: 3161, column: 34, scope: !3215)
!3260 = !DILocation(line: 3165, column: 15, scope: !3215)
!3261 = !DILocation(line: 3165, column: 19, scope: !3215)
!3262 = !DILocation(line: 3165, column: 24, scope: !3215)
!3263 = !DILocation(line: 3165, column: 34, scope: !3215)
!3264 = !DILocation(line: 3165, column: 38, scope: !3215)
!3265 = !DILocation(line: 3165, column: 54, scope: !3215)
!3266 = !DILocation(line: 3172, column: 38, scope: !3215)
!3267 = !DILocation(line: 3172, column: 42, scope: !3215)
!3268 = !DILocation(line: 3173, column: 42, scope: !3215)
!3269 = !DILocation(line: 3173, column: 46, scope: !3215)
!3270 = !DILocation(line: 3174, column: 46, scope: !3215)
!3271 = !DILocation(line: 3174, column: 49, scope: !3215)
!3272 = !DILocation(line: 3175, column: 46, scope: !3215)
!3273 = !DILocation(line: 3175, column: 49, scope: !3215)
!3274 = !DILocation(line: 3176, column: 46, scope: !3215)
!3275 = !DILocation(line: 3176, column: 49, scope: !3215)
!3276 = !DILocation(line: 3141, column: 7, scope: !3146)
!3277 = !DILocalVariable(name: "full_name", scope: !3278, file: !3, line: 3181, type: !143)
!3278 = distinct !DILexicalBlock(scope: !3215, file: !3, line: 3179, column: 5)
!3279 = !DILocation(line: 3181, column: 13, scope: !3278)
!3280 = !DILocalVariable(name: "do_deref", scope: !3278, file: !3, line: 3182, type: !141)
!3281 = !DILocation(line: 3182, column: 12, scope: !3278)
!3282 = !DILocalVariable(name: "err", scope: !3278, file: !3, line: 3183, type: !27)
!3283 = !DILocation(line: 3183, column: 11, scope: !3278)
!3284 = !DILocation(line: 3185, column: 11, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3185, column: 11)
!3286 = !DILocation(line: 3185, column: 19, scope: !3285)
!3287 = !DILocation(line: 3185, column: 26, scope: !3285)
!3288 = !DILocation(line: 3185, column: 29, scope: !3285)
!3289 = !DILocation(line: 3185, column: 40, scope: !3285)
!3290 = !DILocation(line: 3185, column: 11, scope: !3278)
!3291 = !DILocation(line: 3186, column: 30, scope: !3285)
!3292 = !DILocation(line: 3186, column: 19, scope: !3285)
!3293 = !DILocation(line: 3186, column: 9, scope: !3285)
!3294 = !DILocation(line: 3189, column: 39, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3285, file: !3, line: 3188, column: 9)
!3296 = !DILocation(line: 3189, column: 31, scope: !3295)
!3297 = !DILocation(line: 3189, column: 55, scope: !3295)
!3298 = !DILocation(line: 3189, column: 47, scope: !3295)
!3299 = !DILocation(line: 3189, column: 45, scope: !3295)
!3300 = !DILocation(line: 3189, column: 64, scope: !3295)
!3301 = !DILocation(line: 3189, column: 23, scope: !3295)
!3302 = !DILocation(line: 3189, column: 21, scope: !3295)
!3303 = !DILocation(line: 3190, column: 19, scope: !3295)
!3304 = !DILocation(line: 3190, column: 30, scope: !3295)
!3305 = !DILocation(line: 3190, column: 39, scope: !3295)
!3306 = !DILocation(line: 3190, column: 11, scope: !3295)
!3307 = !DILocation(line: 3193, column: 11, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3193, column: 11)
!3309 = !DILocation(line: 3193, column: 11, scope: !3278)
!3310 = !DILocation(line: 3195, column: 58, scope: !3311)
!3311 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 3194, column: 9)
!3312 = !DILocation(line: 3195, column: 30, scope: !3311)
!3313 = !DILocation(line: 3195, column: 11, scope: !3311)
!3314 = !DILocation(line: 3195, column: 14, scope: !3311)
!3315 = !DILocation(line: 3195, column: 28, scope: !3311)
!3316 = !DILocation(line: 3197, column: 17, scope: !3317)
!3317 = distinct !DILexicalBlock(scope: !3311, file: !3, line: 3197, column: 15)
!3318 = !DILocation(line: 3197, column: 20, scope: !3317)
!3319 = !DILocation(line: 3197, column: 15, scope: !3311)
!3320 = !DILocation(line: 3198, column: 27, scope: !3317)
!3321 = !DILocation(line: 3199, column: 27, scope: !3317)
!3322 = !DILocation(line: 3199, column: 57, scope: !3317)
!3323 = !DILocation(line: 3198, column: 13, scope: !3317)
!3324 = !DILocation(line: 3200, column: 9, scope: !3311)
!3325 = !DILocation(line: 3202, column: 15, scope: !3278)
!3326 = !DILocation(line: 3202, column: 7, scope: !3278)
!3327 = !DILocation(line: 3205, column: 23, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3203, column: 9)
!3329 = !DILocation(line: 3205, column: 35, scope: !3328)
!3330 = !DILocation(line: 3205, column: 38, scope: !3328)
!3331 = !DILocation(line: 3205, column: 17, scope: !3328)
!3332 = !DILocation(line: 3205, column: 15, scope: !3328)
!3333 = !DILocation(line: 3206, column: 20, scope: !3328)
!3334 = !DILocation(line: 3207, column: 11, scope: !3328)
!3335 = !DILocation(line: 3211, column: 15, scope: !3336)
!3336 = distinct !DILexicalBlock(scope: !3328, file: !3, line: 3211, column: 15)
!3337 = !DILocation(line: 3211, column: 15, scope: !3328)
!3338 = !DILocalVariable(name: "need_lstat", scope: !3339, file: !3, line: 3213, type: !141)
!3339 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 3212, column: 13)
!3340 = !DILocation(line: 3213, column: 20, scope: !3339)
!3341 = !DILocation(line: 3214, column: 27, scope: !3339)
!3342 = !DILocation(line: 3214, column: 39, scope: !3339)
!3343 = !DILocation(line: 3214, column: 42, scope: !3339)
!3344 = !DILocation(line: 3214, column: 21, scope: !3339)
!3345 = !DILocation(line: 3214, column: 19, scope: !3339)
!3346 = !DILocation(line: 3215, column: 24, scope: !3339)
!3347 = !DILocation(line: 3217, column: 19, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 3217, column: 19)
!3349 = !DILocation(line: 3217, column: 31, scope: !3348)
!3350 = !DILocation(line: 3217, column: 19, scope: !3339)
!3351 = !DILocation(line: 3218, column: 17, scope: !3348)
!3352 = !DILocation(line: 3220, column: 29, scope: !3339)
!3353 = !DILocation(line: 3220, column: 33, scope: !3339)
!3354 = !DILocation(line: 3221, column: 31, scope: !3339)
!3355 = !DILocation(line: 3221, column: 37, scope: !3339)
!3356 = !DILocation(line: 3222, column: 33, scope: !3339)
!3357 = !DILocation(line: 3222, column: 31, scope: !3339)
!3358 = !DILocation(line: 3220, column: 28, scope: !3339)
!3359 = !DILocation(line: 3220, column: 26, scope: !3339)
!3360 = !DILocation(line: 3223, column: 20, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 3223, column: 19)
!3362 = !DILocation(line: 3223, column: 19, scope: !3339)
!3363 = !DILocation(line: 3224, column: 17, scope: !3361)
!3364 = !DILocation(line: 3230, column: 13, scope: !3339)
!3365 = !DILocation(line: 3231, column: 11, scope: !3328)
!3366 = !DILocation(line: 3234, column: 24, scope: !3328)
!3367 = !DILocation(line: 3234, column: 36, scope: !3328)
!3368 = !DILocation(line: 3234, column: 39, scope: !3328)
!3369 = !DILocation(line: 3234, column: 17, scope: !3328)
!3370 = !DILocation(line: 3234, column: 15, scope: !3328)
!3371 = !DILocation(line: 3235, column: 20, scope: !3328)
!3372 = !DILocation(line: 3236, column: 11, scope: !3328)
!3373 = !DILocation(line: 3239, column: 11, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3239, column: 11)
!3375 = !DILocation(line: 3239, column: 15, scope: !3374)
!3376 = !DILocation(line: 3239, column: 11, scope: !3278)
!3377 = !DILocation(line: 3244, column: 25, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 3240, column: 9)
!3379 = !DILocation(line: 3245, column: 25, scope: !3378)
!3380 = !DILocation(line: 3245, column: 48, scope: !3378)
!3381 = !DILocation(line: 3244, column: 11, scope: !3378)
!3382 = !DILocation(line: 3246, column: 15, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3378, file: !3, line: 3246, column: 15)
!3384 = !DILocation(line: 3246, column: 15, scope: !3378)
!3385 = !DILocation(line: 3247, column: 13, scope: !3383)
!3386 = !DILocation(line: 3249, column: 30, scope: !3378)
!3387 = !DILocation(line: 3249, column: 21, scope: !3378)
!3388 = !DILocation(line: 3249, column: 11, scope: !3378)
!3389 = !DILocation(line: 3249, column: 14, scope: !3378)
!3390 = !DILocation(line: 3249, column: 19, scope: !3378)
!3391 = !DILocation(line: 3250, column: 21, scope: !3378)
!3392 = !DILocation(line: 3252, column: 11, scope: !3378)
!3393 = !DILocation(line: 3255, column: 7, scope: !3278)
!3394 = !DILocation(line: 3255, column: 10, scope: !3278)
!3395 = !DILocation(line: 3255, column: 18, scope: !3278)
!3396 = !DILocation(line: 3258, column: 12, scope: !3397)
!3397 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3258, column: 11)
!3398 = !DILocation(line: 3258, column: 17, scope: !3397)
!3399 = !DILocation(line: 3258, column: 27, scope: !3397)
!3400 = !DILocation(line: 3258, column: 30, scope: !3397)
!3401 = !DILocation(line: 3259, column: 11, scope: !3397)
!3402 = !DILocation(line: 3259, column: 14, scope: !3397)
!3403 = !DILocation(line: 3259, column: 31, scope: !3397)
!3404 = !DILocation(line: 3259, column: 34, scope: !3397)
!3405 = !DILocation(line: 3258, column: 11, scope: !3278)
!3406 = !DILocation(line: 3260, column: 51, scope: !3397)
!3407 = !DILocation(line: 3260, column: 62, scope: !3397)
!3408 = !DILocation(line: 3260, column: 29, scope: !3397)
!3409 = !DILocation(line: 3260, column: 9, scope: !3397)
!3410 = !DILocation(line: 3260, column: 12, scope: !3397)
!3411 = !DILocation(line: 3260, column: 27, scope: !3397)
!3412 = !DILocation(line: 3262, column: 11, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3262, column: 11)
!3414 = !DILocation(line: 3262, column: 18, scope: !3413)
!3415 = !DILocation(line: 3262, column: 33, scope: !3413)
!3416 = !DILocation(line: 3262, column: 36, scope: !3413)
!3417 = !DILocation(line: 3262, column: 11, scope: !3278)
!3418 = !DILocalVariable(name: "have_scontext", scope: !3419, file: !3, line: 3264, type: !141)
!3419 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 3263, column: 9)
!3420 = !DILocation(line: 3264, column: 16, scope: !3419)
!3421 = !DILocalVariable(name: "have_acl", scope: !3419, file: !3, line: 3265, type: !141)
!3422 = !DILocation(line: 3265, column: 16, scope: !3419)
!3423 = !DILocalVariable(name: "attr_len", scope: !3419, file: !3, line: 3266, type: !27)
!3424 = !DILocation(line: 3266, column: 15, scope: !3419)
!3425 = !DILocation(line: 3266, column: 44, scope: !3419)
!3426 = !DILocation(line: 3266, column: 55, scope: !3419)
!3427 = !DILocation(line: 3266, column: 58, scope: !3419)
!3428 = !DILocation(line: 3266, column: 26, scope: !3419)
!3429 = !DILocation(line: 3267, column: 18, scope: !3419)
!3430 = !DILocation(line: 3267, column: 27, scope: !3419)
!3431 = !DILocation(line: 3267, column: 15, scope: !3419)
!3432 = !DILocation(line: 3269, column: 15, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 3269, column: 15)
!3434 = !DILocation(line: 3269, column: 19, scope: !3433)
!3435 = !DILocation(line: 3269, column: 15, scope: !3419)
!3436 = !DILocation(line: 3271, column: 19, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 3271, column: 19)
!3438 = distinct !DILexicalBlock(scope: !3433, file: !3, line: 3270, column: 13)
!3439 = !DILocation(line: 3271, column: 19, scope: !3438)
!3440 = !DILocation(line: 3272, column: 35, scope: !3437)
!3441 = !DILocation(line: 3272, column: 33, scope: !3437)
!3442 = !DILocation(line: 3272, column: 31, scope: !3437)
!3443 = !DILocation(line: 3272, column: 17, scope: !3437)
!3444 = !DILocation(line: 3274, column: 35, scope: !3437)
!3445 = !DILocation(line: 3274, column: 33, scope: !3437)
!3446 = !DILocation(line: 3274, column: 31, scope: !3437)
!3447 = !DILocation(line: 3275, column: 13, scope: !3438)
!3448 = !DILocation(line: 3278, column: 15, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3433, file: !3, line: 3277, column: 13)
!3450 = !DILocation(line: 3278, column: 18, scope: !3449)
!3451 = !DILocation(line: 3278, column: 27, scope: !3449)
!3452 = !DILocation(line: 3284, column: 31, scope: !3453)
!3453 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 3284, column: 19)
!3454 = !DILocation(line: 3284, column: 19, scope: !3453)
!3455 = !DILocation(line: 3284, column: 38, scope: !3453)
!3456 = !DILocation(line: 3284, column: 41, scope: !3453)
!3457 = !DILocation(line: 3284, column: 47, scope: !3453)
!3458 = !DILocation(line: 3284, column: 19, scope: !3449)
!3459 = !DILocation(line: 3285, column: 21, scope: !3453)
!3460 = !DILocation(line: 3285, column: 17, scope: !3453)
!3461 = !DILocation(line: 3288, column: 15, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 3288, column: 15)
!3463 = !DILocation(line: 3288, column: 19, scope: !3462)
!3464 = !DILocation(line: 3288, column: 24, scope: !3462)
!3465 = !DILocation(line: 3288, column: 27, scope: !3462)
!3466 = !DILocation(line: 3288, column: 34, scope: !3462)
!3467 = !DILocation(line: 3288, column: 15, scope: !3419)
!3468 = !DILocalVariable(name: "n", scope: !3469, file: !3, line: 3290, type: !27)
!3469 = distinct !DILexicalBlock(scope: !3462, file: !3, line: 3289, column: 13)
!3470 = !DILocation(line: 3290, column: 19, scope: !3469)
!3471 = !DILocation(line: 3290, column: 43, scope: !3469)
!3472 = !DILocation(line: 3290, column: 54, scope: !3469)
!3473 = !DILocation(line: 3290, column: 23, scope: !3469)
!3474 = !DILocation(line: 3291, column: 22, scope: !3469)
!3475 = !DILocation(line: 3291, column: 24, scope: !3469)
!3476 = !DILocation(line: 3291, column: 19, scope: !3469)
!3477 = !DILocation(line: 3292, column: 31, scope: !3469)
!3478 = !DILocation(line: 3292, column: 29, scope: !3469)
!3479 = !DILocation(line: 3292, column: 24, scope: !3469)
!3480 = !DILocation(line: 3293, column: 13, scope: !3469)
!3481 = !DILocation(line: 3295, column: 27, scope: !3419)
!3482 = !DILocation(line: 3295, column: 41, scope: !3419)
!3483 = !DILocation(line: 3295, column: 45, scope: !3419)
!3484 = !DILocation(line: 3295, column: 26, scope: !3419)
!3485 = !DILocation(line: 3297, column: 29, scope: !3419)
!3486 = !DILocation(line: 3297, column: 43, scope: !3419)
!3487 = !DILocation(line: 3297, column: 47, scope: !3419)
!3488 = !DILocation(line: 3297, column: 46, scope: !3419)
!3489 = !DILocation(line: 0, scope: !3419)
!3490 = !DILocation(line: 3295, column: 11, scope: !3419)
!3491 = !DILocation(line: 3295, column: 14, scope: !3419)
!3492 = !DILocation(line: 3295, column: 23, scope: !3419)
!3493 = !DILocation(line: 3300, column: 26, scope: !3419)
!3494 = !DILocation(line: 3300, column: 29, scope: !3419)
!3495 = !DILocation(line: 3300, column: 38, scope: !3419)
!3496 = !DILocation(line: 3300, column: 23, scope: !3419)
!3497 = !DILocation(line: 3302, column: 15, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 3302, column: 15)
!3499 = !DILocation(line: 3302, column: 15, scope: !3419)
!3500 = !DILocation(line: 3303, column: 23, scope: !3498)
!3501 = !DILocation(line: 3303, column: 36, scope: !3498)
!3502 = !DILocation(line: 3303, column: 13, scope: !3498)
!3503 = !DILocation(line: 3304, column: 9, scope: !3419)
!3504 = !DILocation(line: 3306, column: 11, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3306, column: 11)
!3506 = !DILocation(line: 3307, column: 11, scope: !3505)
!3507 = !DILocation(line: 3307, column: 15, scope: !3505)
!3508 = !DILocation(line: 3307, column: 22, scope: !3505)
!3509 = !DILocation(line: 3307, column: 37, scope: !3505)
!3510 = !DILocation(line: 3307, column: 40, scope: !3505)
!3511 = !DILocation(line: 3306, column: 11, scope: !3278)
!3512 = !DILocalVariable(name: "linkstats", scope: !3513, file: !3, line: 3309, type: !191)
!3513 = distinct !DILexicalBlock(scope: !3505, file: !3, line: 3308, column: 9)
!3514 = !DILocation(line: 3309, column: 23, scope: !3513)
!3515 = !DILocation(line: 3311, column: 26, scope: !3513)
!3516 = !DILocation(line: 3311, column: 37, scope: !3513)
!3517 = !DILocation(line: 3311, column: 40, scope: !3513)
!3518 = !DILocation(line: 3311, column: 11, scope: !3513)
!3519 = !DILocalVariable(name: "linkname", scope: !3513, file: !3, line: 3312, type: !143)
!3520 = !DILocation(line: 3312, column: 17, scope: !3513)
!3521 = !DILocation(line: 3312, column: 44, scope: !3513)
!3522 = !DILocation(line: 3312, column: 55, scope: !3513)
!3523 = !DILocation(line: 3312, column: 58, scope: !3513)
!3524 = !DILocation(line: 3312, column: 28, scope: !3513)
!3525 = !DILocation(line: 3316, column: 15, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3513, file: !3, line: 3316, column: 15)
!3527 = !DILocation(line: 3316, column: 24, scope: !3526)
!3528 = !DILocation(line: 3316, column: 27, scope: !3526)
!3529 = !DILocation(line: 3316, column: 30, scope: !3526)
!3530 = !DILocation(line: 3316, column: 37, scope: !3526)
!3531 = !DILocation(line: 3316, column: 42, scope: !3526)
!3532 = !DILocation(line: 3316, column: 60, scope: !3526)
!3533 = !DILocation(line: 3316, column: 63, scope: !3526)
!3534 = !DILocation(line: 3316, column: 45, scope: !3526)
!3535 = !DILocation(line: 3316, column: 15, scope: !3513)
!3536 = !DILocation(line: 3317, column: 13, scope: !3526)
!3537 = !DILocation(line: 3317, column: 16, scope: !3526)
!3538 = !DILocation(line: 3317, column: 23, scope: !3526)
!3539 = !DILocation(line: 3321, column: 15, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3513, file: !3, line: 3321, column: 15)
!3541 = !DILocation(line: 3322, column: 15, scope: !3540)
!3542 = !DILocation(line: 3322, column: 32, scope: !3540)
!3543 = !DILocation(line: 3322, column: 29, scope: !3540)
!3544 = !DILocation(line: 3322, column: 48, scope: !3540)
!3545 = !DILocation(line: 3322, column: 51, scope: !3540)
!3546 = !DILocation(line: 3323, column: 15, scope: !3540)
!3547 = !DILocation(line: 3323, column: 24, scope: !3540)
!3548 = !DILocation(line: 3323, column: 18, scope: !3540)
!3549 = !DILocation(line: 3323, column: 46, scope: !3540)
!3550 = !DILocation(line: 3321, column: 15, scope: !3513)
!3551 = !DILocation(line: 3325, column: 15, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3540, file: !3, line: 3324, column: 13)
!3553 = !DILocation(line: 3325, column: 18, scope: !3552)
!3554 = !DILocation(line: 3325, column: 25, scope: !3552)
!3555 = !DILocation(line: 3326, column: 39, scope: !3552)
!3556 = !DILocation(line: 3326, column: 15, scope: !3552)
!3557 = !DILocation(line: 3326, column: 18, scope: !3552)
!3558 = !DILocation(line: 3326, column: 27, scope: !3552)
!3559 = !DILocation(line: 3327, column: 13, scope: !3552)
!3560 = !DILocation(line: 3328, column: 17, scope: !3513)
!3561 = !DILocation(line: 3328, column: 11, scope: !3513)
!3562 = !DILocation(line: 3329, column: 9, scope: !3513)
!3563 = !DILocation(line: 3331, column: 11, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3331, column: 11)
!3565 = !DILocation(line: 3331, column: 11, scope: !3278)
!3566 = !DILocation(line: 3332, column: 9, scope: !3564)
!3567 = !DILocation(line: 3332, column: 12, scope: !3564)
!3568 = !DILocation(line: 3332, column: 21, scope: !3564)
!3569 = !DILocation(line: 3333, column: 16, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 3333, column: 16)
!3571 = !DILocation(line: 3333, column: 16, scope: !3564)
!3572 = !DILocation(line: 3335, column: 15, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 3335, column: 15)
!3574 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 3334, column: 9)
!3575 = !DILocation(line: 3335, column: 32, scope: !3573)
!3576 = !DILocation(line: 3335, column: 36, scope: !3573)
!3577 = !DILocation(line: 3335, column: 15, scope: !3574)
!3578 = !DILocation(line: 3336, column: 13, scope: !3573)
!3579 = !DILocation(line: 3336, column: 16, scope: !3573)
!3580 = !DILocation(line: 3336, column: 25, scope: !3573)
!3581 = !DILocation(line: 3338, column: 13, scope: !3573)
!3582 = !DILocation(line: 3338, column: 16, scope: !3573)
!3583 = !DILocation(line: 3338, column: 25, scope: !3573)
!3584 = !DILocation(line: 3339, column: 9, scope: !3574)
!3585 = !DILocation(line: 3341, column: 9, scope: !3570)
!3586 = !DILocation(line: 3341, column: 12, scope: !3570)
!3587 = !DILocation(line: 3341, column: 21, scope: !3570)
!3588 = !DILocation(line: 3343, column: 16, scope: !3278)
!3589 = !DILocation(line: 3343, column: 14, scope: !3278)
!3590 = !DILocation(line: 3344, column: 11, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3344, column: 11)
!3592 = !DILocation(line: 3344, column: 18, scope: !3591)
!3593 = !DILocation(line: 3344, column: 33, scope: !3591)
!3594 = !DILocation(line: 3344, column: 36, scope: !3591)
!3595 = !DILocation(line: 3344, column: 11, scope: !3278)
!3596 = !DILocalVariable(name: "buf", scope: !3597, file: !3, line: 3346, type: !746)
!3597 = distinct !DILexicalBlock(scope: !3591, file: !3, line: 3345, column: 9)
!3598 = !DILocation(line: 3346, column: 16, scope: !3597)
!3599 = !DILocalVariable(name: "len", scope: !3597, file: !3, line: 3347, type: !27)
!3600 = !DILocation(line: 3347, column: 15, scope: !3597)
!3601 = !DILocation(line: 3347, column: 47, scope: !3597)
!3602 = !DILocation(line: 3347, column: 55, scope: !3597)
!3603 = !DILocation(line: 3347, column: 60, scope: !3597)
!3604 = !DILocation(line: 3348, column: 62, scope: !3597)
!3605 = !DILocation(line: 3347, column: 31, scope: !3597)
!3606 = !DILocation(line: 3347, column: 21, scope: !3597)
!3607 = !DILocation(line: 3350, column: 15, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3597, file: !3, line: 3350, column: 15)
!3609 = !DILocation(line: 3350, column: 34, scope: !3608)
!3610 = !DILocation(line: 3350, column: 32, scope: !3608)
!3611 = !DILocation(line: 3350, column: 15, scope: !3597)
!3612 = !DILocation(line: 3351, column: 32, scope: !3608)
!3613 = !DILocation(line: 3351, column: 30, scope: !3608)
!3614 = !DILocation(line: 3351, column: 13, scope: !3608)
!3615 = !DILocation(line: 3352, column: 9, scope: !3597)
!3616 = !DILocation(line: 3354, column: 11, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3354, column: 11)
!3618 = !DILocation(line: 3354, column: 18, scope: !3617)
!3619 = !DILocation(line: 3354, column: 11, scope: !3278)
!3620 = !DILocation(line: 3356, column: 15, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 3356, column: 15)
!3622 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 3355, column: 9)
!3623 = !DILocation(line: 3356, column: 15, scope: !3622)
!3624 = !DILocalVariable(name: "len", scope: !3625, file: !3, line: 3358, type: !27)
!3625 = distinct !DILexicalBlock(scope: !3621, file: !3, line: 3357, column: 13)
!3626 = !DILocation(line: 3358, column: 19, scope: !3625)
!3627 = !DILocation(line: 3358, column: 44, scope: !3625)
!3628 = !DILocation(line: 3358, column: 47, scope: !3625)
!3629 = !DILocation(line: 3358, column: 52, scope: !3625)
!3630 = !DILocation(line: 3358, column: 25, scope: !3625)
!3631 = !DILocation(line: 3359, column: 19, scope: !3632)
!3632 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 3359, column: 19)
!3633 = !DILocation(line: 3359, column: 33, scope: !3632)
!3634 = !DILocation(line: 3359, column: 31, scope: !3632)
!3635 = !DILocation(line: 3359, column: 19, scope: !3625)
!3636 = !DILocation(line: 3360, column: 31, scope: !3632)
!3637 = !DILocation(line: 3360, column: 29, scope: !3632)
!3638 = !DILocation(line: 3360, column: 17, scope: !3632)
!3639 = !DILocation(line: 3361, column: 13, scope: !3625)
!3640 = !DILocation(line: 3363, column: 15, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 3363, column: 15)
!3642 = !DILocation(line: 3363, column: 15, scope: !3622)
!3643 = !DILocalVariable(name: "len", scope: !3644, file: !3, line: 3365, type: !27)
!3644 = distinct !DILexicalBlock(scope: !3641, file: !3, line: 3364, column: 13)
!3645 = !DILocation(line: 3365, column: 19, scope: !3644)
!3646 = !DILocation(line: 3365, column: 45, scope: !3644)
!3647 = !DILocation(line: 3365, column: 48, scope: !3644)
!3648 = !DILocation(line: 3365, column: 53, scope: !3644)
!3649 = !DILocation(line: 3365, column: 25, scope: !3644)
!3650 = !DILocation(line: 3366, column: 19, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 3366, column: 19)
!3652 = !DILocation(line: 3366, column: 33, scope: !3651)
!3653 = !DILocation(line: 3366, column: 31, scope: !3651)
!3654 = !DILocation(line: 3366, column: 19, scope: !3644)
!3655 = !DILocation(line: 3367, column: 31, scope: !3651)
!3656 = !DILocation(line: 3367, column: 29, scope: !3651)
!3657 = !DILocation(line: 3367, column: 17, scope: !3651)
!3658 = !DILocation(line: 3368, column: 13, scope: !3644)
!3659 = !DILocation(line: 3370, column: 15, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3622, file: !3, line: 3370, column: 15)
!3661 = !DILocation(line: 3370, column: 15, scope: !3622)
!3662 = !DILocalVariable(name: "len", scope: !3663, file: !3, line: 3372, type: !27)
!3663 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 3371, column: 13)
!3664 = !DILocation(line: 3372, column: 19, scope: !3663)
!3665 = !DILocation(line: 3372, column: 44, scope: !3663)
!3666 = !DILocation(line: 3372, column: 47, scope: !3663)
!3667 = !DILocation(line: 3372, column: 52, scope: !3663)
!3668 = !DILocation(line: 3372, column: 25, scope: !3663)
!3669 = !DILocation(line: 3373, column: 19, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3663, file: !3, line: 3373, column: 19)
!3671 = !DILocation(line: 3373, column: 34, scope: !3670)
!3672 = !DILocation(line: 3373, column: 32, scope: !3670)
!3673 = !DILocation(line: 3373, column: 19, scope: !3663)
!3674 = !DILocation(line: 3374, column: 32, scope: !3670)
!3675 = !DILocation(line: 3374, column: 30, scope: !3670)
!3676 = !DILocation(line: 3374, column: 17, scope: !3670)
!3677 = !DILocation(line: 3375, column: 13, scope: !3663)
!3678 = !DILocation(line: 3376, column: 9, scope: !3622)
!3679 = !DILocation(line: 3378, column: 11, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3378, column: 11)
!3681 = !DILocation(line: 3378, column: 11, scope: !3278)
!3682 = !DILocalVariable(name: "len", scope: !3683, file: !3, line: 3380, type: !27)
!3683 = distinct !DILexicalBlock(scope: !3680, file: !3, line: 3379, column: 9)
!3684 = !DILocation(line: 3380, column: 15, scope: !3683)
!3685 = !DILocation(line: 3380, column: 29, scope: !3683)
!3686 = !DILocation(line: 3380, column: 32, scope: !3683)
!3687 = !DILocation(line: 3380, column: 21, scope: !3683)
!3688 = !DILocation(line: 3381, column: 15, scope: !3689)
!3689 = distinct !DILexicalBlock(scope: !3683, file: !3, line: 3381, column: 15)
!3690 = !DILocation(line: 3381, column: 32, scope: !3689)
!3691 = !DILocation(line: 3381, column: 30, scope: !3689)
!3692 = !DILocation(line: 3381, column: 15, scope: !3683)
!3693 = !DILocation(line: 3382, column: 30, scope: !3689)
!3694 = !DILocation(line: 3382, column: 28, scope: !3689)
!3695 = !DILocation(line: 3382, column: 13, scope: !3689)
!3696 = !DILocation(line: 3383, column: 9, scope: !3683)
!3697 = !DILocation(line: 3385, column: 11, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 3385, column: 11)
!3699 = !DILocation(line: 3385, column: 18, scope: !3698)
!3700 = !DILocation(line: 3385, column: 11, scope: !3278)
!3701 = !DILocalVariable(name: "b", scope: !3702, file: !3, line: 3387, type: !743)
!3702 = distinct !DILexicalBlock(scope: !3698, file: !3, line: 3386, column: 9)
!3703 = !DILocation(line: 3387, column: 16, scope: !3702)
!3704 = !DILocalVariable(name: "b_len", scope: !3702, file: !3, line: 3388, type: !27)
!3705 = !DILocation(line: 3388, column: 15, scope: !3702)
!3706 = !DILocation(line: 3388, column: 42, scope: !3702)
!3707 = !DILocation(line: 3388, column: 45, scope: !3702)
!3708 = !DILocation(line: 3388, column: 50, scope: !3702)
!3709 = !DILocation(line: 3388, column: 60, scope: !3702)
!3710 = !DILocation(line: 3388, column: 31, scope: !3702)
!3711 = !DILocation(line: 3388, column: 23, scope: !3702)
!3712 = !DILocation(line: 3389, column: 15, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 3389, column: 15)
!3714 = !DILocation(line: 3389, column: 29, scope: !3713)
!3715 = !DILocation(line: 3389, column: 27, scope: !3713)
!3716 = !DILocation(line: 3389, column: 15, scope: !3702)
!3717 = !DILocation(line: 3390, column: 27, scope: !3713)
!3718 = !DILocation(line: 3390, column: 25, scope: !3713)
!3719 = !DILocation(line: 3390, column: 13, scope: !3713)
!3720 = !DILocation(line: 3392, column: 15, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 3392, column: 15)
!3722 = !DILocation(line: 3392, column: 41, scope: !3721)
!3723 = !DILocation(line: 3392, column: 44, scope: !3721)
!3724 = !DILocation(line: 3392, column: 15, scope: !3702)
!3725 = !DILocalVariable(name: "buf", scope: !3726, file: !3, line: 3394, type: !743)
!3726 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 3393, column: 13)
!3727 = !DILocation(line: 3394, column: 20, scope: !3726)
!3728 = !DILocalVariable(name: "len", scope: !3726, file: !3, line: 3395, type: !27)
!3729 = !DILocation(line: 3395, column: 19, scope: !3726)
!3730 = !DILocation(line: 3395, column: 44, scope: !3726)
!3731 = !DILocation(line: 3395, column: 69, scope: !3726)
!3732 = !DILocation(line: 3395, column: 33, scope: !3726)
!3733 = !DILocation(line: 3395, column: 25, scope: !3726)
!3734 = !DILocation(line: 3396, column: 19, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 3396, column: 19)
!3736 = !DILocation(line: 3396, column: 47, scope: !3735)
!3737 = !DILocation(line: 3396, column: 45, scope: !3735)
!3738 = !DILocation(line: 3396, column: 19, scope: !3726)
!3739 = !DILocation(line: 3397, column: 45, scope: !3735)
!3740 = !DILocation(line: 3397, column: 43, scope: !3735)
!3741 = !DILocation(line: 3397, column: 17, scope: !3735)
!3742 = !DILocation(line: 3398, column: 40, scope: !3726)
!3743 = !DILocation(line: 3398, column: 65, scope: !3726)
!3744 = !DILocation(line: 3398, column: 29, scope: !3726)
!3745 = !DILocation(line: 3398, column: 21, scope: !3726)
!3746 = !DILocation(line: 3398, column: 19, scope: !3726)
!3747 = !DILocation(line: 3399, column: 19, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 3399, column: 19)
!3749 = !DILocation(line: 3399, column: 47, scope: !3748)
!3750 = !DILocation(line: 3399, column: 45, scope: !3748)
!3751 = !DILocation(line: 3399, column: 19, scope: !3726)
!3752 = !DILocation(line: 3400, column: 45, scope: !3748)
!3753 = !DILocation(line: 3400, column: 43, scope: !3748)
!3754 = !DILocation(line: 3400, column: 17, scope: !3748)
!3755 = !DILocation(line: 3401, column: 21, scope: !3726)
!3756 = !DILocation(line: 3401, column: 47, scope: !3726)
!3757 = !DILocation(line: 3401, column: 53, scope: !3726)
!3758 = !DILocation(line: 3401, column: 51, scope: !3726)
!3759 = !DILocation(line: 3401, column: 19, scope: !3726)
!3760 = !DILocation(line: 3402, column: 19, scope: !3761)
!3761 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 3402, column: 19)
!3762 = !DILocation(line: 3402, column: 37, scope: !3761)
!3763 = !DILocation(line: 3402, column: 35, scope: !3761)
!3764 = !DILocation(line: 3402, column: 19, scope: !3726)
!3765 = !DILocation(line: 3403, column: 35, scope: !3761)
!3766 = !DILocation(line: 3403, column: 33, scope: !3761)
!3767 = !DILocation(line: 3403, column: 17, scope: !3761)
!3768 = !DILocation(line: 3404, column: 13, scope: !3726)
!3769 = !DILocalVariable(name: "buf", scope: !3770, file: !3, line: 3407, type: !746)
!3770 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 3406, column: 13)
!3771 = !DILocation(line: 3407, column: 20, scope: !3770)
!3772 = !DILocalVariable(name: "size", scope: !3770, file: !3, line: 3408, type: !168)
!3773 = !DILocation(line: 3408, column: 25, scope: !3770)
!3774 = !DILocation(line: 3408, column: 52, scope: !3770)
!3775 = !DILocation(line: 3408, column: 55, scope: !3770)
!3776 = !DILocation(line: 3408, column: 60, scope: !3770)
!3777 = !DILocation(line: 3408, column: 32, scope: !3770)
!3778 = !DILocalVariable(name: "len", scope: !3770, file: !3, line: 3409, type: !27)
!3779 = !DILocation(line: 3409, column: 19, scope: !3770)
!3780 = !DILocation(line: 3409, column: 51, scope: !3770)
!3781 = !DILocation(line: 3409, column: 57, scope: !3770)
!3782 = !DILocation(line: 3410, column: 51, scope: !3770)
!3783 = !DILocation(line: 3411, column: 54, scope: !3770)
!3784 = !DILocation(line: 3409, column: 35, scope: !3770)
!3785 = !DILocation(line: 3409, column: 25, scope: !3770)
!3786 = !DILocation(line: 3413, column: 19, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 3413, column: 19)
!3788 = !DILocation(line: 3413, column: 37, scope: !3787)
!3789 = !DILocation(line: 3413, column: 35, scope: !3787)
!3790 = !DILocation(line: 3413, column: 19, scope: !3770)
!3791 = !DILocation(line: 3414, column: 35, scope: !3787)
!3792 = !DILocation(line: 3414, column: 33, scope: !3787)
!3793 = !DILocation(line: 3414, column: 17, scope: !3787)
!3794 = !DILocation(line: 3416, column: 9, scope: !3702)
!3795 = !DILocation(line: 3417, column: 5, scope: !3278)
!3796 = !DILocation(line: 3419, column: 7, scope: !3797)
!3797 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 3419, column: 7)
!3798 = !DILocation(line: 3419, column: 7, scope: !3146)
!3799 = !DILocalVariable(name: "buf", scope: !3800, file: !3, line: 3421, type: !743)
!3800 = distinct !DILexicalBlock(scope: !3797, file: !3, line: 3420, column: 5)
!3801 = !DILocation(line: 3421, column: 12, scope: !3800)
!3802 = !DILocalVariable(name: "len", scope: !3800, file: !3, line: 3422, type: !27)
!3803 = !DILocation(line: 3422, column: 11, scope: !3800)
!3804 = !DILocation(line: 3422, column: 36, scope: !3800)
!3805 = !DILocation(line: 3422, column: 39, scope: !3800)
!3806 = !DILocation(line: 3422, column: 44, scope: !3800)
!3807 = !DILocation(line: 3422, column: 52, scope: !3800)
!3808 = !DILocation(line: 3422, column: 25, scope: !3800)
!3809 = !DILocation(line: 3422, column: 17, scope: !3800)
!3810 = !DILocation(line: 3423, column: 11, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3800, file: !3, line: 3423, column: 11)
!3812 = !DILocation(line: 3423, column: 32, scope: !3811)
!3813 = !DILocation(line: 3423, column: 30, scope: !3811)
!3814 = !DILocation(line: 3423, column: 11, scope: !3800)
!3815 = !DILocation(line: 3424, column: 30, scope: !3811)
!3816 = !DILocation(line: 3424, column: 28, scope: !3811)
!3817 = !DILocation(line: 3424, column: 9, scope: !3811)
!3818 = !DILocation(line: 3425, column: 5, scope: !3800)
!3819 = !DILocation(line: 3427, column: 22, scope: !3146)
!3820 = !DILocation(line: 3427, column: 13, scope: !3146)
!3821 = !DILocation(line: 3427, column: 3, scope: !3146)
!3822 = !DILocation(line: 3427, column: 6, scope: !3146)
!3823 = !DILocation(line: 3427, column: 11, scope: !3146)
!3824 = !DILocation(line: 3428, column: 13, scope: !3146)
!3825 = !DILocation(line: 3430, column: 10, scope: !3146)
!3826 = !DILocation(line: 3430, column: 3, scope: !3146)
!3827 = !DILocation(line: 3431, column: 1, scope: !3146)
!3828 = distinct !DISubprogram(name: "queue_directory", scope: !3, file: !3, line: 2704, type: !1020, scopeLine: 2705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3829 = !DILocalVariable(name: "name", arg: 1, scope: !3828, file: !3, line: 2704, type: !146)
!3830 = !DILocation(line: 2704, column: 30, scope: !3828)
!3831 = !DILocalVariable(name: "realname", arg: 2, scope: !3828, file: !3, line: 2704, type: !146)
!3832 = !DILocation(line: 2704, column: 48, scope: !3828)
!3833 = !DILocalVariable(name: "command_line_arg", arg: 3, scope: !3828, file: !3, line: 2704, type: !141)
!3834 = !DILocation(line: 2704, column: 63, scope: !3828)
!3835 = !DILocalVariable(name: "new", scope: !3828, file: !3, line: 2706, type: !235)
!3836 = !DILocation(line: 2706, column: 19, scope: !3828)
!3837 = !DILocation(line: 2706, column: 25, scope: !3828)
!3838 = !DILocation(line: 2707, column: 19, scope: !3828)
!3839 = !DILocation(line: 2707, column: 39, scope: !3828)
!3840 = !DILocation(line: 2707, column: 30, scope: !3828)
!3841 = !DILocation(line: 2707, column: 3, scope: !3828)
!3842 = !DILocation(line: 2707, column: 8, scope: !3828)
!3843 = !DILocation(line: 2707, column: 17, scope: !3828)
!3844 = !DILocation(line: 2708, column: 15, scope: !3828)
!3845 = !DILocation(line: 2708, column: 31, scope: !3828)
!3846 = !DILocation(line: 2708, column: 22, scope: !3828)
!3847 = !DILocation(line: 2708, column: 3, scope: !3828)
!3848 = !DILocation(line: 2708, column: 8, scope: !3828)
!3849 = !DILocation(line: 2708, column: 13, scope: !3828)
!3850 = !DILocation(line: 2709, column: 27, scope: !3828)
!3851 = !DILocation(line: 2709, column: 3, scope: !3828)
!3852 = !DILocation(line: 2709, column: 8, scope: !3828)
!3853 = !DILocation(line: 2709, column: 25, scope: !3828)
!3854 = !DILocation(line: 2710, column: 15, scope: !3828)
!3855 = !DILocation(line: 2710, column: 3, scope: !3828)
!3856 = !DILocation(line: 2710, column: 8, scope: !3828)
!3857 = !DILocation(line: 2710, column: 13, scope: !3828)
!3858 = !DILocation(line: 2711, column: 18, scope: !3828)
!3859 = !DILocation(line: 2711, column: 16, scope: !3828)
!3860 = !DILocation(line: 2712, column: 1, scope: !3828)
!3861 = distinct !DISubprogram(name: "sort_files", scope: !3, file: !3, line: 3792, type: !532, scopeLine: 3793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3862 = !DILocalVariable(name: "use_strcmp", scope: !3861, file: !3, line: 3794, type: !141)
!3863 = !DILocation(line: 3794, column: 8, scope: !3861)
!3864 = !DILocation(line: 3796, column: 7, scope: !3865)
!3865 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 3796, column: 7)
!3866 = !DILocation(line: 3796, column: 27, scope: !3865)
!3867 = !DILocation(line: 3796, column: 40, scope: !3865)
!3868 = !DILocation(line: 3796, column: 51, scope: !3865)
!3869 = !DILocation(line: 3796, column: 38, scope: !3865)
!3870 = !DILocation(line: 3796, column: 25, scope: !3865)
!3871 = !DILocation(line: 3796, column: 7, scope: !3861)
!3872 = !DILocation(line: 3798, column: 13, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3865, file: !3, line: 3797, column: 5)
!3874 = !DILocation(line: 3798, column: 7, scope: !3873)
!3875 = !DILocation(line: 3799, column: 31, scope: !3873)
!3876 = !DILocation(line: 3799, column: 21, scope: !3873)
!3877 = !DILocation(line: 3799, column: 19, scope: !3873)
!3878 = !DILocation(line: 3800, column: 31, scope: !3873)
!3879 = !DILocation(line: 3800, column: 29, scope: !3873)
!3880 = !DILocation(line: 3800, column: 25, scope: !3873)
!3881 = !DILocation(line: 3801, column: 5, scope: !3873)
!3882 = !DILocation(line: 3803, column: 3, scope: !3861)
!3883 = !DILocation(line: 3805, column: 7, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 3805, column: 7)
!3885 = !DILocation(line: 3805, column: 17, scope: !3884)
!3886 = !DILocation(line: 3805, column: 7, scope: !3861)
!3887 = !DILocation(line: 3806, column: 5, scope: !3884)
!3888 = !DILocation(line: 3813, column: 9, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 3813, column: 7)
!3890 = !DILocation(line: 3813, column: 7, scope: !3861)
!3891 = !DILocation(line: 3814, column: 16, scope: !3889)
!3892 = !DILocation(line: 3814, column: 5, scope: !3889)
!3893 = !DILocation(line: 3817, column: 18, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 3816, column: 5)
!3895 = !DILocation(line: 3818, column: 7, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 3818, column: 7)
!3897 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 3818, column: 7)
!3898 = !DILocation(line: 3818, column: 7, scope: !3897)
!3899 = !DILocation(line: 3819, column: 7, scope: !3894)
!3900 = !DILocation(line: 3823, column: 27, scope: !3861)
!3901 = !DILocation(line: 3823, column: 40, scope: !3861)
!3902 = !DILocation(line: 3824, column: 26, scope: !3861)
!3903 = !DILocation(line: 3824, column: 39, scope: !3861)
!3904 = !DILocation(line: 3824, column: 49, scope: !3861)
!3905 = !DILocation(line: 3824, column: 64, scope: !3861)
!3906 = !DILocation(line: 3824, column: 36, scope: !3861)
!3907 = !DILocation(line: 3824, column: 11, scope: !3861)
!3908 = !DILocation(line: 3825, column: 26, scope: !3861)
!3909 = !DILocation(line: 3825, column: 38, scope: !3861)
!3910 = !DILocation(line: 3826, column: 26, scope: !3861)
!3911 = !DILocation(line: 3823, column: 3, scope: !3861)
!3912 = !DILocation(line: 3827, column: 1, scope: !3861)
!3913 = distinct !DISubprogram(name: "extract_dirs_from_files", scope: !3, file: !3, line: 3512, type: !3914, scopeLine: 3513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!3914 = !DISubroutineType(types: !3915)
!3915 = !{null, !146, !141}
!3916 = !DILocalVariable(name: "dirname", arg: 1, scope: !3913, file: !3, line: 3512, type: !146)
!3917 = !DILocation(line: 3512, column: 38, scope: !3913)
!3918 = !DILocalVariable(name: "command_line_arg", arg: 2, scope: !3913, file: !3, line: 3512, type: !141)
!3919 = !DILocation(line: 3512, column: 52, scope: !3913)
!3920 = !DILocalVariable(name: "i", scope: !3913, file: !3, line: 3514, type: !149)
!3921 = !DILocation(line: 3514, column: 10, scope: !3913)
!3922 = !DILocalVariable(name: "j", scope: !3913, file: !3, line: 3515, type: !149)
!3923 = !DILocation(line: 3515, column: 10, scope: !3913)
!3924 = !DILocalVariable(name: "ignore_dot_and_dot_dot", scope: !3913, file: !3, line: 3516, type: !141)
!3925 = !DILocation(line: 3516, column: 8, scope: !3913)
!3926 = !DILocation(line: 3516, column: 34, scope: !3913)
!3927 = !DILocation(line: 3516, column: 42, scope: !3913)
!3928 = !DILocation(line: 3518, column: 7, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 3518, column: 7)
!3930 = !DILocation(line: 3518, column: 15, scope: !3929)
!3931 = !DILocation(line: 3518, column: 18, scope: !3929)
!3932 = !DILocation(line: 3518, column: 7, scope: !3913)
!3933 = !DILocation(line: 3523, column: 30, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 3519, column: 5)
!3935 = !DILocation(line: 3523, column: 7, scope: !3934)
!3936 = !DILocation(line: 3524, column: 5, scope: !3934)
!3937 = !DILocation(line: 3528, column: 12, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 3528, column: 3)
!3939 = !DILocation(line: 3528, column: 10, scope: !3938)
!3940 = !DILocation(line: 3528, column: 8, scope: !3938)
!3941 = !DILocation(line: 3528, column: 25, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3938, file: !3, line: 3528, column: 3)
!3943 = !DILocation(line: 3528, column: 28, scope: !3942)
!3944 = !DILocation(line: 3528, column: 3, scope: !3938)
!3945 = !DILocalVariable(name: "f", scope: !3946, file: !3, line: 3530, type: !260)
!3946 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 3529, column: 5)
!3947 = !DILocation(line: 3530, column: 24, scope: !3946)
!3948 = !DILocation(line: 3530, column: 28, scope: !3946)
!3949 = !DILocation(line: 3530, column: 40, scope: !3946)
!3950 = !DILocation(line: 3532, column: 25, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 3532, column: 11)
!3952 = !DILocation(line: 3532, column: 11, scope: !3951)
!3953 = !DILocation(line: 3533, column: 11, scope: !3951)
!3954 = !DILocation(line: 3533, column: 17, scope: !3951)
!3955 = !DILocation(line: 3534, column: 15, scope: !3951)
!3956 = !DILocation(line: 3534, column: 47, scope: !3951)
!3957 = !DILocation(line: 3534, column: 50, scope: !3951)
!3958 = !DILocation(line: 3534, column: 20, scope: !3951)
!3959 = !DILocation(line: 3532, column: 11, scope: !3946)
!3960 = !DILocation(line: 3536, column: 16, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 3536, column: 15)
!3962 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 3535, column: 9)
!3963 = !DILocation(line: 3536, column: 24, scope: !3961)
!3964 = !DILocation(line: 3536, column: 27, scope: !3961)
!3965 = !DILocation(line: 3536, column: 30, scope: !3961)
!3966 = !DILocation(line: 3536, column: 38, scope: !3961)
!3967 = !DILocation(line: 3536, column: 15, scope: !3962)
!3968 = !DILocation(line: 3537, column: 30, scope: !3961)
!3969 = !DILocation(line: 3537, column: 33, scope: !3961)
!3970 = !DILocation(line: 3537, column: 39, scope: !3961)
!3971 = !DILocation(line: 3537, column: 42, scope: !3961)
!3972 = !DILocation(line: 3537, column: 52, scope: !3961)
!3973 = !DILocation(line: 3537, column: 13, scope: !3961)
!3974 = !DILocalVariable(name: "name", scope: !3975, file: !3, line: 3540, type: !143)
!3975 = distinct !DILexicalBlock(scope: !3961, file: !3, line: 3539, column: 13)
!3976 = !DILocation(line: 3540, column: 21, scope: !3975)
!3977 = !DILocation(line: 3540, column: 46, scope: !3975)
!3978 = !DILocation(line: 3540, column: 55, scope: !3975)
!3979 = !DILocation(line: 3540, column: 58, scope: !3975)
!3980 = !DILocation(line: 3540, column: 28, scope: !3975)
!3981 = !DILocation(line: 3541, column: 32, scope: !3975)
!3982 = !DILocation(line: 3541, column: 38, scope: !3975)
!3983 = !DILocation(line: 3541, column: 41, scope: !3975)
!3984 = !DILocation(line: 3541, column: 51, scope: !3975)
!3985 = !DILocation(line: 3541, column: 15, scope: !3975)
!3986 = !DILocation(line: 3542, column: 21, scope: !3975)
!3987 = !DILocation(line: 3542, column: 15, scope: !3975)
!3988 = !DILocation(line: 3544, column: 15, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 3544, column: 15)
!3990 = !DILocation(line: 3544, column: 18, scope: !3989)
!3991 = !DILocation(line: 3544, column: 27, scope: !3989)
!3992 = !DILocation(line: 3544, column: 15, scope: !3962)
!3993 = !DILocation(line: 3545, column: 23, scope: !3989)
!3994 = !DILocation(line: 3545, column: 13, scope: !3989)
!3995 = !DILocation(line: 3546, column: 9, scope: !3962)
!3996 = !DILocation(line: 3528, column: 3, scope: !3942)
!3997 = distinct !{!3997, !3944, !3998}
!3998 = !DILocation(line: 3547, column: 5, scope: !3938)
!3999 = !DILocation(line: 3552, column: 10, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 3552, column: 3)
!4001 = !DILocation(line: 3552, column: 17, scope: !4000)
!4002 = !DILocation(line: 3552, column: 8, scope: !4000)
!4003 = !DILocation(line: 3552, column: 22, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 3552, column: 3)
!4005 = !DILocation(line: 3552, column: 26, scope: !4004)
!4006 = !DILocation(line: 3552, column: 24, scope: !4004)
!4007 = !DILocation(line: 3552, column: 3, scope: !4000)
!4008 = !DILocalVariable(name: "f", scope: !4009, file: !3, line: 3554, type: !260)
!4009 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 3553, column: 5)
!4010 = !DILocation(line: 3554, column: 24, scope: !4009)
!4011 = !DILocation(line: 3554, column: 28, scope: !4009)
!4012 = !DILocation(line: 3554, column: 40, scope: !4009)
!4013 = !DILocation(line: 3555, column: 24, scope: !4009)
!4014 = !DILocation(line: 3555, column: 7, scope: !4009)
!4015 = !DILocation(line: 3555, column: 19, scope: !4009)
!4016 = !DILocation(line: 3555, column: 22, scope: !4009)
!4017 = !DILocation(line: 3556, column: 13, scope: !4009)
!4018 = !DILocation(line: 3556, column: 16, scope: !4009)
!4019 = !DILocation(line: 3556, column: 25, scope: !4009)
!4020 = !DILocation(line: 3556, column: 12, scope: !4009)
!4021 = !DILocation(line: 3556, column: 9, scope: !4009)
!4022 = !DILocation(line: 3557, column: 5, scope: !4009)
!4023 = !DILocation(line: 3552, column: 39, scope: !4004)
!4024 = !DILocation(line: 3552, column: 3, scope: !4004)
!4025 = distinct !{!4025, !4007, !4026}
!4026 = !DILocation(line: 3557, column: 5, scope: !4000)
!4027 = !DILocation(line: 3558, column: 16, scope: !3913)
!4028 = !DILocation(line: 3558, column: 14, scope: !3913)
!4029 = !DILocation(line: 3559, column: 1, scope: !3913)
!4030 = distinct !DISubprogram(name: "print_current_files", scope: !3, file: !3, line: 3832, type: !532, scopeLine: 3833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4031 = !DILocalVariable(name: "i", scope: !4030, file: !3, line: 3834, type: !149)
!4032 = !DILocation(line: 3834, column: 10, scope: !4030)
!4033 = !DILocation(line: 3836, column: 11, scope: !4030)
!4034 = !DILocation(line: 3836, column: 3, scope: !4030)
!4035 = !DILocation(line: 3839, column: 14, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 3839, column: 7)
!4037 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 3837, column: 5)
!4038 = !DILocation(line: 3839, column: 12, scope: !4036)
!4039 = !DILocation(line: 3839, column: 19, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 3839, column: 7)
!4041 = !DILocation(line: 3839, column: 23, scope: !4040)
!4042 = !DILocation(line: 3839, column: 21, scope: !4040)
!4043 = !DILocation(line: 3839, column: 7, scope: !4036)
!4044 = !DILocation(line: 3841, column: 39, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 3840, column: 9)
!4046 = !DILocation(line: 3841, column: 51, scope: !4045)
!4047 = !DILocation(line: 3841, column: 11, scope: !4045)
!4048 = !DILocation(line: 3842, column: 11, scope: !4045)
!4049 = !DILocation(line: 3843, column: 9, scope: !4045)
!4050 = !DILocation(line: 3839, column: 36, scope: !4040)
!4051 = !DILocation(line: 3839, column: 7, scope: !4040)
!4052 = distinct !{!4052, !4043, !4053}
!4053 = !DILocation(line: 3843, column: 9, scope: !4036)
!4054 = !DILocation(line: 3844, column: 7, scope: !4037)
!4055 = !DILocation(line: 3847, column: 13, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 3847, column: 11)
!4057 = !DILocation(line: 3847, column: 11, scope: !4037)
!4058 = !DILocation(line: 3848, column: 9, scope: !4056)
!4059 = !DILocation(line: 3850, column: 9, scope: !4056)
!4060 = !DILocation(line: 3851, column: 7, scope: !4037)
!4061 = !DILocation(line: 3854, column: 13, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 3854, column: 11)
!4063 = !DILocation(line: 3854, column: 11, scope: !4037)
!4064 = !DILocation(line: 3855, column: 9, scope: !4062)
!4065 = !DILocation(line: 3857, column: 9, scope: !4062)
!4066 = !DILocation(line: 3858, column: 7, scope: !4037)
!4067 = !DILocation(line: 3861, column: 7, scope: !4037)
!4068 = !DILocation(line: 3862, column: 7, scope: !4037)
!4069 = !DILocation(line: 3865, column: 14, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 3865, column: 7)
!4071 = !DILocation(line: 3865, column: 12, scope: !4070)
!4072 = !DILocation(line: 3865, column: 19, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4070, file: !3, line: 3865, column: 7)
!4074 = !DILocation(line: 3865, column: 23, scope: !4073)
!4075 = !DILocation(line: 3865, column: 21, scope: !4073)
!4076 = !DILocation(line: 3865, column: 7, scope: !4070)
!4077 = !DILocation(line: 3867, column: 11, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !4073, file: !3, line: 3866, column: 9)
!4079 = !DILocation(line: 3868, column: 30, scope: !4078)
!4080 = !DILocation(line: 3868, column: 42, scope: !4078)
!4081 = !DILocation(line: 3868, column: 11, scope: !4078)
!4082 = !DILocation(line: 3869, column: 11, scope: !4078)
!4083 = !DILocation(line: 3869, column: 11, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 3869, column: 11)
!4085 = !DILocation(line: 3870, column: 9, scope: !4078)
!4086 = !DILocation(line: 3865, column: 36, scope: !4073)
!4087 = !DILocation(line: 3865, column: 7, scope: !4073)
!4088 = distinct !{!4088, !4076, !4089}
!4089 = !DILocation(line: 3870, column: 9, scope: !4070)
!4090 = !DILocation(line: 3871, column: 7, scope: !4037)
!4091 = !DILocation(line: 3873, column: 1, scope: !4030)
!4092 = distinct !DISubprogram(name: "dev_ino_pop", scope: !3, file: !3, line: 1022, type: !4093, scopeLine: 1023, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4093 = !DISubroutineType(types: !4094)
!4094 = !{!265}
!4095 = !DILocalVariable(name: "vdi", scope: !4092, file: !3, line: 1024, type: !167)
!4096 = !DILocation(line: 1024, column: 9, scope: !4092)
!4097 = !DILocalVariable(name: "di", scope: !4092, file: !3, line: 1025, type: !264)
!4098 = !DILocation(line: 1025, column: 19, scope: !4092)
!4099 = !DILocalVariable(name: "dev_ino_size", scope: !4092, file: !3, line: 1026, type: !27)
!4100 = !DILocation(line: 1026, column: 7, scope: !4092)
!4101 = !DILocation(line: 1027, column: 3, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 1027, column: 3)
!4103 = distinct !DILexicalBlock(scope: !4092, file: !3, line: 1027, column: 3)
!4104 = !DILocalVariable(name: "__o", scope: !4105, file: !3, line: 1027, type: !456)
!4105 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 1027, column: 3)
!4106 = !DILocation(line: 1027, column: 3, scope: !4105)
!4107 = !DILocation(line: 1027, column: 3, scope: !4103)
!4108 = !DILocation(line: 1028, column: 3, scope: !4092)
!4109 = !DILocation(line: 1029, column: 9, scope: !4092)
!4110 = !DILocation(line: 1029, column: 7, scope: !4092)
!4111 = !DILocation(line: 1030, column: 8, scope: !4092)
!4112 = !DILocation(line: 1030, column: 6, scope: !4092)
!4113 = !DILocation(line: 1031, column: 11, scope: !4092)
!4114 = !DILocation(line: 1031, column: 10, scope: !4092)
!4115 = !DILocation(line: 1031, column: 3, scope: !4092)
!4116 = distinct !DISubprogram(name: "free_pending_ent", scope: !3, file: !3, line: 1248, type: !4117, scopeLine: 1249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4117 = !DISubroutineType(types: !4118)
!4118 = !{null, !235}
!4119 = !DILocalVariable(name: "p", arg: 1, scope: !4116, file: !3, line: 1248, type: !235)
!4120 = !DILocation(line: 1248, column: 35, scope: !4116)
!4121 = !DILocation(line: 1250, column: 9, scope: !4116)
!4122 = !DILocation(line: 1250, column: 12, scope: !4116)
!4123 = !DILocation(line: 1250, column: 3, scope: !4116)
!4124 = !DILocation(line: 1251, column: 9, scope: !4116)
!4125 = !DILocation(line: 1251, column: 12, scope: !4116)
!4126 = !DILocation(line: 1251, column: 3, scope: !4116)
!4127 = !DILocation(line: 1252, column: 9, scope: !4116)
!4128 = !DILocation(line: 1252, column: 3, scope: !4116)
!4129 = !DILocation(line: 1253, column: 1, scope: !4116)
!4130 = !DILocalVariable(name: "name", arg: 1, scope: !1019, file: !3, line: 2720, type: !146)
!4131 = !DILocation(line: 2720, column: 24, scope: !1019)
!4132 = !DILocalVariable(name: "realname", arg: 2, scope: !1019, file: !3, line: 2720, type: !146)
!4133 = !DILocation(line: 2720, column: 42, scope: !1019)
!4134 = !DILocalVariable(name: "command_line_arg", arg: 3, scope: !1019, file: !3, line: 2720, type: !141)
!4135 = !DILocation(line: 2720, column: 57, scope: !1019)
!4136 = !DILocalVariable(name: "dirp", scope: !1019, file: !3, line: 2722, type: !725)
!4137 = !DILocation(line: 2722, column: 8, scope: !1019)
!4138 = !DILocalVariable(name: "next", scope: !1019, file: !3, line: 2723, type: !729)
!4139 = !DILocation(line: 2723, column: 18, scope: !1019)
!4140 = !DILocalVariable(name: "total_blocks", scope: !1019, file: !3, line: 2724, type: !168)
!4141 = !DILocation(line: 2724, column: 13, scope: !1019)
!4142 = !DILocation(line: 2727, column: 3, scope: !1019)
!4143 = !DILocation(line: 2727, column: 9, scope: !1019)
!4144 = !DILocation(line: 2728, column: 19, scope: !1019)
!4145 = !DILocation(line: 2728, column: 10, scope: !1019)
!4146 = !DILocation(line: 2728, column: 8, scope: !1019)
!4147 = !DILocation(line: 2729, column: 8, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2729, column: 7)
!4149 = !DILocation(line: 2729, column: 7, scope: !1019)
!4150 = !DILocation(line: 2731, column: 21, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 2730, column: 5)
!4152 = !DILocation(line: 2731, column: 39, scope: !4151)
!4153 = !DILocation(line: 2731, column: 70, scope: !4151)
!4154 = !DILocation(line: 2731, column: 7, scope: !4151)
!4155 = !DILocation(line: 2732, column: 7, scope: !4151)
!4156 = !DILocation(line: 2735, column: 7, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2735, column: 7)
!4158 = !DILocation(line: 2735, column: 7, scope: !1019)
!4159 = !DILocalVariable(name: "dir_stat", scope: !4160, file: !3, line: 2737, type: !191)
!4160 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 2736, column: 5)
!4161 = !DILocation(line: 2737, column: 19, scope: !4160)
!4162 = !DILocalVariable(name: "fd", scope: !4160, file: !3, line: 2738, type: !27)
!4163 = !DILocation(line: 2738, column: 11, scope: !4160)
!4164 = !DILocation(line: 2738, column: 23, scope: !4160)
!4165 = !DILocation(line: 2738, column: 16, scope: !4160)
!4166 = !DILocation(line: 2741, column: 17, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 2741, column: 11)
!4168 = !DILocation(line: 2741, column: 14, scope: !4167)
!4169 = !DILocation(line: 2741, column: 12, scope: !4167)
!4170 = !DILocation(line: 2742, column: 21, scope: !4167)
!4171 = !DILocation(line: 2742, column: 14, scope: !4167)
!4172 = !DILocation(line: 2743, column: 20, scope: !4167)
!4173 = !DILocation(line: 2743, column: 14, scope: !4167)
!4174 = !DILocation(line: 2743, column: 38, scope: !4167)
!4175 = !DILocation(line: 2741, column: 11, scope: !4160)
!4176 = !DILocation(line: 2745, column: 25, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4167, file: !3, line: 2744, column: 9)
!4178 = !DILocation(line: 2746, column: 25, scope: !4177)
!4179 = !DILocation(line: 2746, column: 71, scope: !4177)
!4180 = !DILocation(line: 2745, column: 11, scope: !4177)
!4181 = !DILocation(line: 2747, column: 21, scope: !4177)
!4182 = !DILocation(line: 2747, column: 11, scope: !4177)
!4183 = !DILocation(line: 2748, column: 11, scope: !4177)
!4184 = !DILocation(line: 2753, column: 31, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 2753, column: 11)
!4186 = !DILocation(line: 2753, column: 48, scope: !4185)
!4187 = !DILocation(line: 2753, column: 11, scope: !4185)
!4188 = !DILocation(line: 2753, column: 11, scope: !4160)
!4189 = !DILocation(line: 2755, column: 24, scope: !4190)
!4190 = distinct !DILexicalBlock(scope: !4185, file: !3, line: 2754, column: 9)
!4191 = !DILocation(line: 2756, column: 18, scope: !4190)
!4192 = !DILocation(line: 2755, column: 11, scope: !4190)
!4193 = !DILocation(line: 2757, column: 21, scope: !4190)
!4194 = !DILocation(line: 2757, column: 11, scope: !4190)
!4195 = !DILocation(line: 2758, column: 11, scope: !4190)
!4196 = !DILocation(line: 2759, column: 11, scope: !4190)
!4197 = !DILocation(line: 2762, column: 30, scope: !4160)
!4198 = !DILocation(line: 2762, column: 47, scope: !4160)
!4199 = !DILocation(line: 2762, column: 7, scope: !4160)
!4200 = !DILocation(line: 2763, column: 5, scope: !4160)
!4201 = !DILocation(line: 2765, column: 3, scope: !1019)
!4202 = !DILocation(line: 2767, column: 7, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2767, column: 7)
!4204 = !DILocation(line: 2767, column: 17, scope: !4203)
!4205 = !DILocation(line: 2767, column: 20, scope: !4203)
!4206 = !DILocation(line: 2767, column: 7, scope: !1019)
!4207 = !DILocation(line: 2769, column: 12, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 2769, column: 11)
!4209 = distinct !DILexicalBlock(scope: !4203, file: !3, line: 2768, column: 5)
!4210 = !DILocation(line: 2769, column: 11, scope: !4209)
!4211 = !DILocation(line: 2770, column: 9, scope: !4208)
!4212 = !DILocation(line: 2770, column: 9, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 2770, column: 9)
!4214 = !DILocation(line: 2771, column: 13, scope: !4209)
!4215 = !DILocation(line: 2772, column: 7, scope: !4209)
!4216 = !DILocation(line: 2772, column: 7, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 2772, column: 7)
!4218 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 2772, column: 7)
!4219 = !DILocation(line: 2772, column: 7, scope: !4218)
!4220 = !DILocation(line: 2772, column: 7, scope: !4221)
!4221 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 2772, column: 7)
!4222 = !DILocalVariable(name: "absolute_name", scope: !4209, file: !3, line: 2774, type: !143)
!4223 = !DILocation(line: 2774, column: 13, scope: !4209)
!4224 = !DILocation(line: 2775, column: 11, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 2775, column: 11)
!4226 = !DILocation(line: 2775, column: 11, scope: !4209)
!4227 = !DILocation(line: 2777, column: 55, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 2776, column: 9)
!4229 = !DILocation(line: 2777, column: 27, scope: !4228)
!4230 = !DILocation(line: 2777, column: 25, scope: !4228)
!4231 = !DILocation(line: 2778, column: 17, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 2778, column: 15)
!4233 = !DILocation(line: 2778, column: 15, scope: !4228)
!4234 = !DILocation(line: 2779, column: 27, scope: !4232)
!4235 = !DILocation(line: 2780, column: 27, scope: !4232)
!4236 = !DILocation(line: 2780, column: 57, scope: !4232)
!4237 = !DILocation(line: 2779, column: 13, scope: !4232)
!4238 = !DILocation(line: 2781, column: 9, scope: !4228)
!4239 = !DILocation(line: 2782, column: 19, scope: !4209)
!4240 = !DILocation(line: 2782, column: 30, scope: !4209)
!4241 = !DILocation(line: 2782, column: 41, scope: !4209)
!4242 = !DILocation(line: 2782, column: 47, scope: !4209)
!4243 = !DILocation(line: 2783, column: 50, scope: !4209)
!4244 = !DILocation(line: 2782, column: 7, scope: !4209)
!4245 = !DILocation(line: 2785, column: 13, scope: !4209)
!4246 = !DILocation(line: 2785, column: 7, scope: !4209)
!4247 = !DILocation(line: 2787, column: 7, scope: !4209)
!4248 = !DILocation(line: 2787, column: 7, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 2787, column: 7)
!4250 = !DILocation(line: 2788, column: 5, scope: !4209)
!4251 = !DILocation(line: 2793, column: 3, scope: !1019)
!4252 = !DILocation(line: 2797, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2794, column: 5)
!4254 = !DILocation(line: 2797, column: 13, scope: !4253)
!4255 = !DILocation(line: 2798, column: 23, scope: !4253)
!4256 = !DILocation(line: 2798, column: 14, scope: !4253)
!4257 = !DILocation(line: 2798, column: 12, scope: !4253)
!4258 = !DILocation(line: 2799, column: 11, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2799, column: 11)
!4260 = !DILocation(line: 2799, column: 11, scope: !4253)
!4261 = !DILocation(line: 2801, column: 31, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 2801, column: 15)
!4263 = distinct !DILexicalBlock(scope: !4259, file: !3, line: 2800, column: 9)
!4264 = !DILocation(line: 2801, column: 37, scope: !4262)
!4265 = !DILocation(line: 2801, column: 17, scope: !4262)
!4266 = !DILocation(line: 2801, column: 15, scope: !4263)
!4267 = !DILocalVariable(name: "type", scope: !4268, file: !3, line: 2803, type: !36)
!4268 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 2802, column: 13)
!4269 = !DILocation(line: 2803, column: 29, scope: !4268)
!4270 = !DILocation(line: 2806, column: 23, scope: !4268)
!4271 = !DILocation(line: 2806, column: 29, scope: !4268)
!4272 = !DILocation(line: 2806, column: 15, scope: !4268)
!4273 = !DILocation(line: 2808, column: 36, scope: !4274)
!4274 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 2807, column: 17)
!4275 = !DILocation(line: 2808, column: 49, scope: !4274)
!4276 = !DILocation(line: 2809, column: 36, scope: !4274)
!4277 = !DILocation(line: 2809, column: 48, scope: !4274)
!4278 = !DILocation(line: 2810, column: 36, scope: !4274)
!4279 = !DILocation(line: 2810, column: 50, scope: !4274)
!4280 = !DILocation(line: 2811, column: 36, scope: !4274)
!4281 = !DILocation(line: 2811, column: 45, scope: !4274)
!4282 = !DILocation(line: 2812, column: 36, scope: !4274)
!4283 = !DILocation(line: 2812, column: 53, scope: !4274)
!4284 = !DILocation(line: 2813, column: 36, scope: !4274)
!4285 = !DILocation(line: 2813, column: 47, scope: !4274)
!4286 = !DILocation(line: 2814, column: 36, scope: !4274)
!4287 = !DILocation(line: 2814, column: 45, scope: !4274)
!4288 = !DILocation(line: 2816, column: 36, scope: !4274)
!4289 = !DILocation(line: 2816, column: 49, scope: !4274)
!4290 = !DILocation(line: 2820, column: 44, scope: !4268)
!4291 = !DILocation(line: 2820, column: 50, scope: !4268)
!4292 = !DILocation(line: 2820, column: 58, scope: !4268)
!4293 = !DILocation(line: 2822, column: 51, scope: !4268)
!4294 = !DILocation(line: 2820, column: 31, scope: !4268)
!4295 = !DILocation(line: 2820, column: 28, scope: !4268)
!4296 = !DILocation(line: 2828, column: 19, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 2828, column: 19)
!4298 = !DILocation(line: 2828, column: 26, scope: !4297)
!4299 = !DILocation(line: 2828, column: 42, scope: !4297)
!4300 = !DILocation(line: 2828, column: 45, scope: !4297)
!4301 = !DILocation(line: 2828, column: 55, scope: !4297)
!4302 = !DILocation(line: 2829, column: 23, scope: !4297)
!4303 = !DILocation(line: 2829, column: 27, scope: !4297)
!4304 = !DILocation(line: 2829, column: 44, scope: !4297)
!4305 = !DILocation(line: 2829, column: 48, scope: !4297)
!4306 = !DILocation(line: 2828, column: 19, scope: !4268)
!4307 = !DILocation(line: 2834, column: 19, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 2830, column: 17)
!4309 = !DILocation(line: 2835, column: 19, scope: !4308)
!4310 = !DILocation(line: 2836, column: 19, scope: !4308)
!4311 = !DILocation(line: 2837, column: 17, scope: !4308)
!4312 = !DILocation(line: 2838, column: 13, scope: !4268)
!4313 = !DILocation(line: 2839, column: 9, scope: !4263)
!4314 = !DILocation(line: 2840, column: 16, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4259, file: !3, line: 2840, column: 16)
!4316 = !DILocation(line: 2840, column: 22, scope: !4315)
!4317 = !DILocation(line: 2840, column: 16, scope: !4259)
!4318 = !DILocation(line: 2842, column: 25, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 2841, column: 9)
!4320 = !DILocation(line: 2842, column: 43, scope: !4319)
!4321 = !DILocation(line: 2842, column: 70, scope: !4319)
!4322 = !DILocation(line: 2842, column: 11, scope: !4319)
!4323 = !DILocation(line: 2843, column: 15, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 2843, column: 15)
!4325 = !DILocation(line: 2843, column: 21, scope: !4324)
!4326 = !DILocation(line: 2843, column: 15, scope: !4319)
!4327 = !DILocation(line: 2844, column: 13, scope: !4324)
!4328 = !DILocation(line: 2845, column: 9, scope: !4319)
!4329 = !DILocation(line: 2847, column: 9, scope: !4315)
!4330 = !DILocation(line: 2852, column: 7, scope: !4253)
!4331 = distinct !{!4331, !4251, !4332}
!4332 = !DILocation(line: 2853, column: 5, scope: !1019)
!4333 = !DILocation(line: 2855, column: 17, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2855, column: 7)
!4335 = !DILocation(line: 2855, column: 7, scope: !4334)
!4336 = !DILocation(line: 2855, column: 23, scope: !4334)
!4337 = !DILocation(line: 2855, column: 7, scope: !1019)
!4338 = !DILocation(line: 2857, column: 21, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4334, file: !3, line: 2856, column: 5)
!4340 = !DILocation(line: 2857, column: 39, scope: !4339)
!4341 = !DILocation(line: 2857, column: 66, scope: !4339)
!4342 = !DILocation(line: 2857, column: 7, scope: !4339)
!4343 = !DILocation(line: 2859, column: 5, scope: !4339)
!4344 = !DILocation(line: 2862, column: 3, scope: !1019)
!4345 = !DILocation(line: 2867, column: 7, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2867, column: 7)
!4347 = !DILocation(line: 2867, column: 7, scope: !1019)
!4348 = !DILocation(line: 2868, column: 30, scope: !4346)
!4349 = !DILocation(line: 2868, column: 5, scope: !4346)
!4350 = !DILocation(line: 2870, column: 7, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2870, column: 7)
!4352 = !DILocation(line: 2870, column: 14, scope: !4351)
!4353 = !DILocation(line: 2870, column: 29, scope: !4351)
!4354 = !DILocation(line: 2870, column: 32, scope: !4351)
!4355 = !DILocation(line: 2870, column: 7, scope: !1019)
!4356 = !DILocalVariable(name: "p", scope: !4357, file: !3, line: 2872, type: !146)
!4357 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 2871, column: 5)
!4358 = !DILocation(line: 2872, column: 19, scope: !4357)
!4359 = !DILocalVariable(name: "buf", scope: !4357, file: !3, line: 2873, type: !746)
!4360 = !DILocation(line: 2873, column: 12, scope: !4357)
!4361 = !DILocation(line: 2875, column: 7, scope: !4357)
!4362 = !DILocation(line: 2875, column: 7, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 2875, column: 7)
!4364 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2875, column: 7)
!4365 = !DILocation(line: 2875, column: 7, scope: !4364)
!4366 = !DILocation(line: 2875, column: 7, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 2875, column: 7)
!4368 = !DILocation(line: 2876, column: 11, scope: !4357)
!4369 = !DILocation(line: 2876, column: 9, scope: !4357)
!4370 = !DILocation(line: 2877, column: 7, scope: !4357)
!4371 = !DILocation(line: 2877, column: 7, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2877, column: 7)
!4373 = !DILocation(line: 2878, column: 7, scope: !4357)
!4374 = !DILocation(line: 2878, column: 7, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2878, column: 7)
!4376 = !DILocation(line: 2879, column: 27, scope: !4357)
!4377 = !DILocation(line: 2879, column: 41, scope: !4357)
!4378 = !DILocation(line: 2879, column: 46, scope: !4357)
!4379 = !DILocation(line: 2880, column: 42, scope: !4357)
!4380 = !DILocation(line: 2879, column: 11, scope: !4357)
!4381 = !DILocation(line: 2879, column: 9, scope: !4357)
!4382 = !DILocation(line: 2881, column: 7, scope: !4357)
!4383 = !DILocation(line: 2881, column: 7, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2881, column: 7)
!4385 = !DILocation(line: 2882, column: 7, scope: !4357)
!4386 = !DILocation(line: 2882, column: 7, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 2882, column: 7)
!4388 = !DILocation(line: 2883, column: 5, scope: !4357)
!4389 = !DILocation(line: 2885, column: 7, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 2885, column: 7)
!4391 = !DILocation(line: 2885, column: 7, scope: !1019)
!4392 = !DILocation(line: 2886, column: 5, scope: !4390)
!4393 = !DILocation(line: 2887, column: 1, scope: !1019)
!4394 = distinct !DISubprogram(name: "restore_default_color", scope: !3, file: !3, line: 1266, type: !532, scopeLine: 1267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4395 = !DILocation(line: 1268, column: 3, scope: !4394)
!4396 = !DILocation(line: 1269, column: 3, scope: !4394)
!4397 = !DILocation(line: 1270, column: 1, scope: !4394)
!4398 = distinct !DISubprogram(name: "signal_restore", scope: !3, file: !3, line: 1444, type: !532, scopeLine: 1445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4399 = !DILocation(line: 1446, column: 3, scope: !4398)
!4400 = !DILocation(line: 1447, column: 1, scope: !4398)
!4401 = distinct !DISubprogram(name: "dired_dump_obstack", scope: !3, file: !3, line: 1051, type: !4402, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4402 = !DISubroutineType(types: !4403)
!4403 = !{null, !146, !616}
!4404 = !DILocalVariable(name: "prefix", arg: 1, scope: !4401, file: !3, line: 1051, type: !146)
!4405 = !DILocation(line: 1051, column: 33, scope: !4401)
!4406 = !DILocalVariable(name: "os", arg: 2, scope: !4401, file: !3, line: 1051, type: !616)
!4407 = !DILocation(line: 1051, column: 57, scope: !4401)
!4408 = !DILocalVariable(name: "n_pos", scope: !4401, file: !3, line: 1053, type: !149)
!4409 = !DILocation(line: 1053, column: 10, scope: !4401)
!4410 = !DILocalVariable(name: "__o", scope: !4411, file: !3, line: 1055, type: !456)
!4411 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1055, column: 11)
!4412 = !DILocation(line: 1055, column: 11, scope: !4411)
!4413 = !DILocation(line: 1055, column: 36, scope: !4401)
!4414 = !DILocation(line: 1055, column: 9, scope: !4401)
!4415 = !DILocation(line: 1056, column: 7, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1056, column: 7)
!4417 = !DILocation(line: 1056, column: 13, scope: !4416)
!4418 = !DILocation(line: 1056, column: 7, scope: !4401)
!4419 = !DILocalVariable(name: "pos", scope: !4420, file: !3, line: 1058, type: !148)
!4420 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 1057, column: 5)
!4421 = !DILocation(line: 1058, column: 15, scope: !4420)
!4422 = !DILocalVariable(name: "__o1", scope: !4423, file: !3, line: 1058, type: !616)
!4423 = distinct !DILexicalBlock(scope: !4420, file: !3, line: 1058, column: 32)
!4424 = !DILocation(line: 1058, column: 32, scope: !4423)
!4425 = !DILocalVariable(name: "__value", scope: !4423, file: !3, line: 1058, type: !167)
!4426 = !DILocation(line: 1058, column: 32, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1058, column: 32)
!4428 = !DILocation(line: 1058, column: 32, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 1058, column: 32)
!4430 = !DILocation(line: 1058, column: 21, scope: !4420)
!4431 = !DILocation(line: 1059, column: 7, scope: !4420)
!4432 = !DILocalVariable(name: "i", scope: !4433, file: !3, line: 1060, type: !149)
!4433 = distinct !DILexicalBlock(scope: !4420, file: !3, line: 1060, column: 7)
!4434 = !DILocation(line: 1060, column: 19, scope: !4433)
!4435 = !DILocation(line: 1060, column: 12, scope: !4433)
!4436 = !DILocation(line: 1060, column: 26, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4433, file: !3, line: 1060, column: 7)
!4438 = !DILocation(line: 1060, column: 30, scope: !4437)
!4439 = !DILocation(line: 1060, column: 28, scope: !4437)
!4440 = !DILocation(line: 1060, column: 7, scope: !4433)
!4441 = !DILocation(line: 1061, column: 45, scope: !4437)
!4442 = !DILocation(line: 1061, column: 49, scope: !4437)
!4443 = !DILocation(line: 1061, column: 9, scope: !4437)
!4444 = !DILocation(line: 1060, column: 38, scope: !4437)
!4445 = !DILocation(line: 1060, column: 7, scope: !4437)
!4446 = distinct !{!4446, !4440, !4447}
!4447 = !DILocation(line: 1061, column: 51, scope: !4433)
!4448 = !DILocation(line: 1062, column: 7, scope: !4420)
!4449 = !DILocation(line: 1063, column: 5, scope: !4420)
!4450 = !DILocation(line: 1064, column: 1, scope: !4401)
!4451 = !DILocalVariable(name: "init", arg: 1, scope: !926, file: !3, line: 1355, type: !141)
!4452 = !DILocation(line: 1355, column: 20, scope: !926)
!4453 = !DILocalVariable(name: "j", scope: !926, file: !3, line: 1387, type: !27)
!4454 = !DILocation(line: 1387, column: 7, scope: !926)
!4455 = !DILocation(line: 1389, column: 7, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !926, file: !3, line: 1389, column: 7)
!4457 = !DILocation(line: 1389, column: 7, scope: !926)
!4458 = !DILocalVariable(name: "act", scope: !4459, file: !3, line: 1392, type: !525)
!4459 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1390, column: 5)
!4460 = !DILocation(line: 1392, column: 24, scope: !4459)
!4461 = !DILocation(line: 1394, column: 7, scope: !4459)
!4462 = !DILocation(line: 1395, column: 14, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1395, column: 7)
!4464 = !DILocation(line: 1395, column: 12, scope: !4463)
!4465 = !DILocation(line: 1395, column: 19, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 1395, column: 7)
!4467 = !DILocation(line: 1395, column: 21, scope: !4466)
!4468 = !DILocation(line: 1395, column: 7, scope: !4463)
!4469 = !DILocation(line: 1397, column: 26, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 1396, column: 9)
!4471 = !DILocation(line: 1397, column: 22, scope: !4470)
!4472 = !DILocation(line: 1397, column: 11, scope: !4470)
!4473 = !DILocation(line: 1398, column: 19, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 1398, column: 15)
!4475 = !DILocation(line: 1398, column: 30, scope: !4474)
!4476 = !DILocation(line: 1398, column: 15, scope: !4470)
!4477 = !DILocation(line: 1399, column: 45, scope: !4474)
!4478 = !DILocation(line: 1399, column: 41, scope: !4474)
!4479 = !DILocation(line: 1399, column: 13, scope: !4474)
!4480 = !DILocation(line: 1400, column: 9, scope: !4470)
!4481 = !DILocation(line: 1395, column: 31, scope: !4466)
!4482 = !DILocation(line: 1395, column: 7, scope: !4466)
!4483 = distinct !{!4483, !4468, !4484}
!4484 = !DILocation(line: 1400, column: 9, scope: !4463)
!4485 = !DILocation(line: 1402, column: 11, scope: !4459)
!4486 = !DILocation(line: 1402, column: 21, scope: !4459)
!4487 = !DILocation(line: 1403, column: 11, scope: !4459)
!4488 = !DILocation(line: 1403, column: 20, scope: !4459)
!4489 = !DILocation(line: 1405, column: 14, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1405, column: 7)
!4491 = !DILocation(line: 1405, column: 12, scope: !4490)
!4492 = !DILocation(line: 1405, column: 19, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1405, column: 7)
!4494 = !DILocation(line: 1405, column: 21, scope: !4493)
!4495 = !DILocation(line: 1405, column: 7, scope: !4490)
!4496 = !DILocation(line: 1406, column: 47, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 1406, column: 13)
!4498 = !DILocation(line: 1406, column: 43, scope: !4497)
!4499 = !DILocation(line: 1406, column: 13, scope: !4497)
!4500 = !DILocation(line: 1406, column: 13, scope: !4493)
!4501 = !DILocation(line: 1408, column: 34, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 1407, column: 11)
!4503 = !DILocation(line: 1408, column: 30, scope: !4502)
!4504 = !DILocation(line: 1408, column: 37, scope: !4502)
!4505 = !DILocation(line: 1408, column: 17, scope: !4502)
!4506 = !DILocation(line: 1408, column: 28, scope: !4502)
!4507 = !DILocation(line: 1409, column: 28, scope: !4502)
!4508 = !DILocation(line: 1409, column: 24, scope: !4502)
!4509 = !DILocation(line: 1409, column: 13, scope: !4502)
!4510 = !DILocation(line: 1410, column: 11, scope: !4502)
!4511 = !DILocation(line: 1406, column: 49, scope: !4497)
!4512 = !DILocation(line: 1405, column: 31, scope: !4493)
!4513 = !DILocation(line: 1405, column: 7, scope: !4493)
!4514 = distinct !{!4514, !4495, !4515}
!4515 = !DILocation(line: 1410, column: 11, scope: !4490)
!4516 = !DILocation(line: 1422, column: 5, scope: !4459)
!4517 = !DILocation(line: 1426, column: 14, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 1426, column: 7)
!4519 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1424, column: 5)
!4520 = !DILocation(line: 1426, column: 12, scope: !4518)
!4521 = !DILocation(line: 1426, column: 19, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 1426, column: 7)
!4523 = !DILocation(line: 1426, column: 21, scope: !4522)
!4524 = !DILocation(line: 1426, column: 7, scope: !4518)
!4525 = !DILocation(line: 1427, column: 47, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4522, file: !3, line: 1427, column: 13)
!4527 = !DILocation(line: 1427, column: 43, scope: !4526)
!4528 = !DILocation(line: 1427, column: 13, scope: !4526)
!4529 = !DILocation(line: 1427, column: 13, scope: !4522)
!4530 = !DILocation(line: 1428, column: 23, scope: !4526)
!4531 = !DILocation(line: 1428, column: 19, scope: !4526)
!4532 = !DILocation(line: 1428, column: 11, scope: !4526)
!4533 = !DILocation(line: 1427, column: 49, scope: !4526)
!4534 = !DILocation(line: 1426, column: 31, scope: !4522)
!4535 = !DILocation(line: 1426, column: 7, scope: !4522)
!4536 = distinct !{!4536, !4524, !4537}
!4537 = !DILocation(line: 1428, column: 34, scope: !4518)
!4538 = !DILocation(line: 1435, column: 1, scope: !926)
!4539 = distinct !DISubprogram(name: "stophandler", scope: !3, file: !3, line: 1297, type: !174, scopeLine: 1298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4540 = !DILocalVariable(name: "sig", arg: 1, scope: !4539, file: !3, line: 1297, type: !27)
!4541 = !DILocation(line: 1297, column: 18, scope: !4539)
!4542 = !DILocation(line: 1301, column: 9, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 1301, column: 7)
!4544 = !DILocation(line: 1301, column: 7, scope: !4539)
!4545 = !DILocation(line: 1302, column: 22, scope: !4543)
!4546 = !DILocation(line: 1302, column: 5, scope: !4543)
!4547 = !DILocation(line: 1303, column: 1, scope: !4539)
!4548 = distinct !DISubprogram(name: "sighandler", scope: !3, file: !3, line: 1286, type: !174, scopeLine: 1287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4549 = !DILocalVariable(name: "sig", arg: 1, scope: !4548, file: !3, line: 1286, type: !27)
!4550 = !DILocation(line: 1286, column: 17, scope: !4548)
!4551 = !DILocation(line: 1290, column: 9, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 1290, column: 7)
!4553 = !DILocation(line: 1290, column: 7, scope: !4548)
!4554 = !DILocation(line: 1291, column: 24, scope: !4552)
!4555 = !DILocation(line: 1291, column: 22, scope: !4552)
!4556 = !DILocation(line: 1291, column: 5, scope: !4552)
!4557 = !DILocation(line: 1292, column: 1, scope: !4548)
!4558 = distinct !DISubprogram(name: "put_indicator", scope: !3, file: !3, line: 4793, type: !4559, scopeLine: 4794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4559 = !DISubroutineType(types: !4560)
!4560 = !{null, !810}
!4561 = !DILocalVariable(name: "ind", arg: 1, scope: !4558, file: !3, line: 4793, type: !810)
!4562 = !DILocation(line: 4793, column: 38, scope: !4558)
!4563 = !DILocation(line: 4795, column: 9, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 4795, column: 7)
!4565 = !DILocation(line: 4795, column: 7, scope: !4558)
!4566 = !DILocation(line: 4797, column: 18, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4564, file: !3, line: 4796, column: 5)
!4568 = !DILocation(line: 4803, column: 16, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 4803, column: 11)
!4570 = !DILocation(line: 4803, column: 13, scope: !4569)
!4571 = !DILocation(line: 4803, column: 11, scope: !4567)
!4572 = !DILocation(line: 4804, column: 9, scope: !4569)
!4573 = !DILocation(line: 4806, column: 7, scope: !4567)
!4574 = !DILocation(line: 4807, column: 5, scope: !4567)
!4575 = !DILocation(line: 4809, column: 3, scope: !4558)
!4576 = !DILocation(line: 4810, column: 1, scope: !4558)
!4577 = distinct !DISubprogram(name: "signal_init", scope: !3, file: !3, line: 1438, type: !532, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4578 = !DILocation(line: 1440, column: 3, scope: !4577)
!4579 = !DILocation(line: 1441, column: 1, scope: !4577)
!4580 = distinct !DISubprogram(name: "prep_non_filename_text", scope: !3, file: !3, line: 4576, type: !532, scopeLine: 4577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4581 = !DILocation(line: 4578, column: 30, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 4578, column: 7)
!4583 = !DILocation(line: 4578, column: 37, scope: !4582)
!4584 = !DILocation(line: 4578, column: 7, scope: !4580)
!4585 = !DILocation(line: 4579, column: 5, scope: !4582)
!4586 = !DILocation(line: 4582, column: 7, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4582, file: !3, line: 4581, column: 5)
!4588 = !DILocation(line: 4583, column: 7, scope: !4587)
!4589 = !DILocation(line: 4584, column: 7, scope: !4587)
!4590 = !DILocation(line: 4586, column: 1, scope: !4580)
!4591 = distinct !DISubprogram(name: "file_failure", scope: !3, file: !3, line: 2687, type: !4592, scopeLine: 2688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4592 = !DISubroutineType(types: !4593)
!4593 = !{null, !141, !146, !146}
!4594 = !DILocalVariable(name: "serious", arg: 1, scope: !4591, file: !3, line: 2687, type: !141)
!4595 = !DILocation(line: 2687, column: 20, scope: !4591)
!4596 = !DILocalVariable(name: "message", arg: 2, scope: !4591, file: !3, line: 2687, type: !146)
!4597 = !DILocation(line: 2687, column: 41, scope: !4591)
!4598 = !DILocalVariable(name: "file", arg: 3, scope: !4591, file: !3, line: 2687, type: !146)
!4599 = !DILocation(line: 2687, column: 62, scope: !4591)
!4600 = !DILocation(line: 2689, column: 13, scope: !4591)
!4601 = !DILocation(line: 2689, column: 20, scope: !4591)
!4602 = !DILocation(line: 2689, column: 29, scope: !4591)
!4603 = !DILocation(line: 2689, column: 3, scope: !4591)
!4604 = !DILocation(line: 2690, column: 20, scope: !4591)
!4605 = !DILocation(line: 2690, column: 3, scope: !4591)
!4606 = !DILocation(line: 2691, column: 1, scope: !4591)
!4607 = distinct !DISubprogram(name: "visit_dir", scope: !3, file: !3, line: 1217, type: !4608, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4608 = !DISubroutineType(types: !4609)
!4609 = !{!141, !271, !269}
!4610 = !DILocalVariable(name: "dev", arg: 1, scope: !4607, file: !3, line: 1217, type: !271)
!4611 = !DILocation(line: 1217, column: 18, scope: !4607)
!4612 = !DILocalVariable(name: "ino", arg: 2, scope: !4607, file: !3, line: 1217, type: !269)
!4613 = !DILocation(line: 1217, column: 29, scope: !4607)
!4614 = !DILocalVariable(name: "ent", scope: !4607, file: !3, line: 1219, type: !264)
!4615 = !DILocation(line: 1219, column: 19, scope: !4607)
!4616 = !DILocalVariable(name: "ent_from_table", scope: !4607, file: !3, line: 1220, type: !264)
!4617 = !DILocation(line: 1220, column: 19, scope: !4607)
!4618 = !DILocalVariable(name: "found_match", scope: !4607, file: !3, line: 1221, type: !141)
!4619 = !DILocation(line: 1221, column: 8, scope: !4607)
!4620 = !DILocation(line: 1223, column: 9, scope: !4607)
!4621 = !DILocation(line: 1223, column: 7, scope: !4607)
!4622 = !DILocation(line: 1224, column: 17, scope: !4607)
!4623 = !DILocation(line: 1224, column: 3, scope: !4607)
!4624 = !DILocation(line: 1224, column: 8, scope: !4607)
!4625 = !DILocation(line: 1224, column: 15, scope: !4607)
!4626 = !DILocation(line: 1225, column: 17, scope: !4607)
!4627 = !DILocation(line: 1225, column: 3, scope: !4607)
!4628 = !DILocation(line: 1225, column: 8, scope: !4607)
!4629 = !DILocation(line: 1225, column: 15, scope: !4607)
!4630 = !DILocation(line: 1228, column: 33, scope: !4607)
!4631 = !DILocation(line: 1228, column: 49, scope: !4607)
!4632 = !DILocation(line: 1228, column: 20, scope: !4607)
!4633 = !DILocation(line: 1228, column: 18, scope: !4607)
!4634 = !DILocation(line: 1230, column: 7, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 1230, column: 7)
!4636 = !DILocation(line: 1230, column: 22, scope: !4635)
!4637 = !DILocation(line: 1230, column: 7, scope: !4607)
!4638 = !DILocation(line: 1233, column: 7, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 1231, column: 5)
!4640 = !DILocation(line: 1236, column: 18, scope: !4607)
!4641 = !DILocation(line: 1236, column: 36, scope: !4607)
!4642 = !DILocation(line: 1236, column: 33, scope: !4607)
!4643 = !DILocation(line: 1236, column: 15, scope: !4607)
!4644 = !DILocation(line: 1238, column: 7, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 1238, column: 7)
!4646 = !DILocation(line: 1238, column: 7, scope: !4607)
!4647 = !DILocation(line: 1241, column: 13, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 1239, column: 5)
!4649 = !DILocation(line: 1241, column: 7, scope: !4648)
!4650 = !DILocation(line: 1242, column: 5, scope: !4648)
!4651 = !DILocation(line: 1244, column: 10, scope: !4607)
!4652 = !DILocation(line: 1244, column: 3, scope: !4607)
!4653 = distinct !DISubprogram(name: "set_exit_status", scope: !3, file: !3, line: 2674, type: !927, scopeLine: 2675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4654 = !DILocalVariable(name: "serious", arg: 1, scope: !4653, file: !3, line: 2674, type: !141)
!4655 = !DILocation(line: 2674, column: 23, scope: !4653)
!4656 = !DILocation(line: 2676, column: 7, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 2676, column: 7)
!4658 = !DILocation(line: 2676, column: 7, scope: !4653)
!4659 = !DILocation(line: 2677, column: 17, scope: !4657)
!4660 = !DILocation(line: 2677, column: 5, scope: !4657)
!4661 = !DILocation(line: 2678, column: 12, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4657, file: !3, line: 2678, column: 12)
!4663 = !DILocation(line: 2678, column: 24, scope: !4662)
!4664 = !DILocation(line: 2678, column: 12, scope: !4657)
!4665 = !DILocation(line: 2679, column: 17, scope: !4662)
!4666 = !DILocation(line: 2679, column: 5, scope: !4662)
!4667 = !DILocation(line: 2680, column: 1, scope: !4653)
!4668 = distinct !DISubprogram(name: "dev_ino_push", scope: !3, file: !3, line: 1006, type: !4669, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4669 = !DISubroutineType(types: !4670)
!4670 = !{null, !271, !269}
!4671 = !DILocalVariable(name: "dev", arg: 1, scope: !4668, file: !3, line: 1006, type: !271)
!4672 = !DILocation(line: 1006, column: 21, scope: !4668)
!4673 = !DILocalVariable(name: "ino", arg: 2, scope: !4668, file: !3, line: 1006, type: !269)
!4674 = !DILocation(line: 1006, column: 32, scope: !4668)
!4675 = !DILocalVariable(name: "vdi", scope: !4668, file: !3, line: 1008, type: !167)
!4676 = !DILocation(line: 1008, column: 9, scope: !4668)
!4677 = !DILocalVariable(name: "di", scope: !4668, file: !3, line: 1009, type: !264)
!4678 = !DILocation(line: 1009, column: 19, scope: !4668)
!4679 = !DILocalVariable(name: "dev_ino_size", scope: !4668, file: !3, line: 1010, type: !27)
!4680 = !DILocation(line: 1010, column: 7, scope: !4668)
!4681 = !DILocalVariable(name: "__o", scope: !4682, file: !3, line: 1011, type: !616)
!4682 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 1011, column: 3)
!4683 = !DILocation(line: 1011, column: 3, scope: !4682)
!4684 = !DILocalVariable(name: "__len", scope: !4682, file: !3, line: 1011, type: !149)
!4685 = !DILocalVariable(name: "__o1", scope: !4686, file: !3, line: 1011, type: !456)
!4686 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 1011, column: 3)
!4687 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 1011, column: 3)
!4688 = !DILocation(line: 1011, column: 3, scope: !4686)
!4689 = !DILocation(line: 1011, column: 3, scope: !4687)
!4690 = !DILocation(line: 1012, column: 9, scope: !4668)
!4691 = !DILocation(line: 1012, column: 7, scope: !4668)
!4692 = !DILocation(line: 1013, column: 8, scope: !4668)
!4693 = !DILocation(line: 1013, column: 6, scope: !4668)
!4694 = !DILocation(line: 1014, column: 5, scope: !4668)
!4695 = !DILocation(line: 1015, column: 16, scope: !4668)
!4696 = !DILocation(line: 1015, column: 3, scope: !4668)
!4697 = !DILocation(line: 1015, column: 7, scope: !4668)
!4698 = !DILocation(line: 1015, column: 14, scope: !4668)
!4699 = !DILocation(line: 1016, column: 16, scope: !4668)
!4700 = !DILocation(line: 1016, column: 3, scope: !4668)
!4701 = !DILocation(line: 1016, column: 7, scope: !4668)
!4702 = !DILocation(line: 1016, column: 14, scope: !4668)
!4703 = !DILocation(line: 1017, column: 1, scope: !4668)
!4704 = distinct !DISubprogram(name: "quote_name", scope: !3, file: !3, line: 4475, type: !4705, scopeLine: 4478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4705 = !DISubroutineType(types: !4706)
!4706 = !{!149, !146, !4707, !27, !810, !141, !616, !146}
!4707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4708, size: 64)
!4708 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !350)
!4709 = !DILocalVariable(name: "name", arg: 1, scope: !4704, file: !3, line: 4475, type: !146)
!4710 = !DILocation(line: 4475, column: 25, scope: !4704)
!4711 = !DILocalVariable(name: "options", arg: 2, scope: !4704, file: !3, line: 4475, type: !4707)
!4712 = !DILocation(line: 4475, column: 61, scope: !4704)
!4713 = !DILocalVariable(name: "needs_general_quoting", arg: 3, scope: !4704, file: !3, line: 4476, type: !27)
!4714 = !DILocation(line: 4476, column: 17, scope: !4704)
!4715 = !DILocalVariable(name: "color", arg: 4, scope: !4704, file: !3, line: 4476, type: !810)
!4716 = !DILocation(line: 4476, column: 62, scope: !4704)
!4717 = !DILocalVariable(name: "allow_pad", arg: 5, scope: !4704, file: !3, line: 4477, type: !141)
!4718 = !DILocation(line: 4477, column: 18, scope: !4704)
!4719 = !DILocalVariable(name: "stack", arg: 6, scope: !4704, file: !3, line: 4477, type: !616)
!4720 = !DILocation(line: 4477, column: 45, scope: !4704)
!4721 = !DILocalVariable(name: "absolute_name", arg: 7, scope: !4704, file: !3, line: 4477, type: !146)
!4722 = !DILocation(line: 4477, column: 64, scope: !4704)
!4723 = !DILocalVariable(name: "smallbuf", scope: !4704, file: !3, line: 4479, type: !749)
!4724 = !DILocation(line: 4479, column: 8, scope: !4704)
!4725 = !DILocalVariable(name: "buf", scope: !4704, file: !3, line: 4480, type: !143)
!4726 = !DILocation(line: 4480, column: 9, scope: !4704)
!4727 = !DILocation(line: 4480, column: 15, scope: !4704)
!4728 = !DILocalVariable(name: "len", scope: !4704, file: !3, line: 4481, type: !149)
!4729 = !DILocation(line: 4481, column: 10, scope: !4704)
!4730 = !DILocalVariable(name: "pad", scope: !4704, file: !3, line: 4482, type: !141)
!4731 = !DILocation(line: 4482, column: 8, scope: !4704)
!4732 = !DILocation(line: 4484, column: 57, scope: !4704)
!4733 = !DILocation(line: 4484, column: 63, scope: !4704)
!4734 = !DILocation(line: 4485, column: 25, scope: !4704)
!4735 = !DILocation(line: 4484, column: 9, scope: !4704)
!4736 = !DILocation(line: 4484, column: 7, scope: !4704)
!4737 = !DILocation(line: 4487, column: 7, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4487, column: 7)
!4739 = !DILocation(line: 4487, column: 11, scope: !4738)
!4740 = !DILocation(line: 4487, column: 14, scope: !4738)
!4741 = !DILocation(line: 4487, column: 7, scope: !4704)
!4742 = !DILocation(line: 4488, column: 7, scope: !4738)
!4743 = !DILocation(line: 4488, column: 7, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 4488, column: 7)
!4745 = !DILocation(line: 4490, column: 7, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4490, column: 7)
!4747 = !DILocation(line: 4490, column: 7, scope: !4704)
!4748 = !DILocation(line: 4491, column: 28, scope: !4746)
!4749 = !DILocation(line: 4491, column: 5, scope: !4746)
!4750 = !DILocalVariable(name: "skip_quotes", scope: !4704, file: !3, line: 4495, type: !141)
!4751 = !DILocation(line: 4495, column: 8, scope: !4704)
!4752 = !DILocation(line: 4497, column: 7, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4497, column: 7)
!4754 = !DILocation(line: 4497, column: 7, scope: !4704)
!4755 = !DILocation(line: 4499, column: 11, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 4499, column: 11)
!4757 = distinct !DILexicalBlock(scope: !4753, file: !3, line: 4498, column: 5)
!4758 = !DILocation(line: 4499, column: 39, scope: !4756)
!4759 = !DILocation(line: 4499, column: 42, scope: !4756)
!4760 = !DILocation(line: 4499, column: 58, scope: !4756)
!4761 = !DILocation(line: 4499, column: 63, scope: !4756)
!4762 = !DILocation(line: 4499, column: 11, scope: !4757)
!4763 = !DILocation(line: 4501, column: 23, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 4500, column: 9)
!4765 = !DILocation(line: 4502, column: 11, scope: !4764)
!4766 = !DILocation(line: 4503, column: 9, scope: !4764)
!4767 = !DILocalVariable(name: "h", scope: !4757, file: !3, line: 4504, type: !143)
!4768 = !DILocation(line: 4504, column: 13, scope: !4757)
!4769 = !DILocation(line: 4504, column: 30, scope: !4757)
!4770 = !DILocation(line: 4504, column: 17, scope: !4757)
!4771 = !DILocalVariable(name: "n", scope: !4757, file: !3, line: 4505, type: !143)
!4772 = !DILocation(line: 4505, column: 13, scope: !4757)
!4773 = !DILocation(line: 4505, column: 30, scope: !4757)
!4774 = !DILocation(line: 4505, column: 17, scope: !4757)
!4775 = !DILocation(line: 4511, column: 42, scope: !4757)
!4776 = !DILocation(line: 4511, column: 46, scope: !4757)
!4777 = !DILocation(line: 4511, column: 45, scope: !4757)
!4778 = !DILocation(line: 4511, column: 48, scope: !4757)
!4779 = !DILocation(line: 4511, column: 67, scope: !4757)
!4780 = !DILocation(line: 4511, column: 7, scope: !4757)
!4781 = !DILocation(line: 4512, column: 13, scope: !4757)
!4782 = !DILocation(line: 4512, column: 7, scope: !4757)
!4783 = !DILocation(line: 4513, column: 13, scope: !4757)
!4784 = !DILocation(line: 4513, column: 7, scope: !4757)
!4785 = !DILocation(line: 4514, column: 5, scope: !4757)
!4786 = !DILocation(line: 4516, column: 7, scope: !4787)
!4787 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4516, column: 7)
!4788 = !DILocation(line: 4516, column: 7, scope: !4704)
!4789 = !DILocation(line: 4517, column: 5, scope: !4787)
!4790 = !DILocation(line: 4517, column: 5, scope: !4791)
!4791 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 4517, column: 5)
!4792 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 4517, column: 5)
!4793 = !DILocation(line: 4517, column: 5, scope: !4792)
!4794 = !DILocalVariable(name: "__o", scope: !4795, file: !3, line: 4517, type: !616)
!4795 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 4517, column: 5)
!4796 = !DILocation(line: 4517, column: 5, scope: !4795)
!4797 = !DILocalVariable(name: "__len", scope: !4795, file: !3, line: 4517, type: !149)
!4798 = !DILocalVariable(name: "__o1", scope: !4799, file: !3, line: 4517, type: !456)
!4799 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 4517, column: 5)
!4800 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 4517, column: 5)
!4801 = !DILocation(line: 4517, column: 5, scope: !4799)
!4802 = !DILocation(line: 4517, column: 5, scope: !4800)
!4803 = !DILocation(line: 4519, column: 3, scope: !4704)
!4804 = !DILocation(line: 4521, column: 16, scope: !4704)
!4805 = !DILocation(line: 4521, column: 13, scope: !4704)
!4806 = !DILocation(line: 4523, column: 7, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4523, column: 7)
!4808 = !DILocation(line: 4523, column: 7, scope: !4704)
!4809 = !DILocation(line: 4524, column: 5, scope: !4807)
!4810 = !DILocation(line: 4524, column: 5, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 4524, column: 5)
!4812 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 4524, column: 5)
!4813 = !DILocation(line: 4524, column: 5, scope: !4812)
!4814 = !DILocalVariable(name: "__o", scope: !4815, file: !3, line: 4524, type: !616)
!4815 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 4524, column: 5)
!4816 = !DILocation(line: 4524, column: 5, scope: !4815)
!4817 = !DILocalVariable(name: "__len", scope: !4815, file: !3, line: 4524, type: !149)
!4818 = !DILocalVariable(name: "__o1", scope: !4819, file: !3, line: 4524, type: !456)
!4819 = distinct !DILexicalBlock(scope: !4820, file: !3, line: 4524, column: 5)
!4820 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 4524, column: 5)
!4821 = !DILocation(line: 4524, column: 5, scope: !4819)
!4822 = !DILocation(line: 4524, column: 5, scope: !4820)
!4823 = !DILocation(line: 4526, column: 7, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4526, column: 7)
!4825 = !DILocation(line: 4526, column: 7, scope: !4704)
!4826 = !DILocation(line: 4528, column: 7, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 4527, column: 5)
!4828 = !DILocation(line: 4529, column: 11, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 4529, column: 11)
!4830 = !DILocation(line: 4529, column: 11, scope: !4827)
!4831 = !DILocation(line: 4530, column: 9, scope: !4829)
!4832 = !DILocation(line: 4531, column: 5, scope: !4827)
!4833 = !DILocation(line: 4533, column: 7, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 4533, column: 7)
!4835 = !DILocation(line: 4533, column: 14, scope: !4834)
!4836 = !DILocation(line: 4533, column: 11, scope: !4834)
!4837 = !DILocation(line: 4533, column: 23, scope: !4834)
!4838 = !DILocation(line: 4533, column: 26, scope: !4834)
!4839 = !DILocation(line: 4533, column: 33, scope: !4834)
!4840 = !DILocation(line: 4533, column: 30, scope: !4834)
!4841 = !DILocation(line: 4533, column: 7, scope: !4704)
!4842 = !DILocation(line: 4534, column: 11, scope: !4834)
!4843 = !DILocation(line: 4534, column: 5, scope: !4834)
!4844 = !DILocation(line: 4536, column: 10, scope: !4704)
!4845 = !DILocation(line: 4536, column: 16, scope: !4704)
!4846 = !DILocation(line: 4536, column: 14, scope: !4704)
!4847 = !DILocation(line: 4536, column: 3, scope: !4704)
!4848 = distinct !DISubprogram(name: "file_ignored", scope: !3, file: !3, line: 2919, type: !4849, scopeLine: 2920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4849 = !DISubroutineType(types: !4850)
!4850 = !{!141, !146}
!4851 = !DILocalVariable(name: "name", arg: 1, scope: !4848, file: !3, line: 2919, type: !146)
!4852 = !DILocation(line: 2919, column: 27, scope: !4848)
!4853 = !DILocation(line: 2921, column: 12, scope: !4848)
!4854 = !DILocation(line: 2921, column: 24, scope: !4848)
!4855 = !DILocation(line: 2922, column: 12, scope: !4848)
!4856 = !DILocation(line: 2922, column: 15, scope: !4848)
!4857 = !DILocation(line: 2922, column: 23, scope: !4848)
!4858 = !DILocation(line: 2923, column: 12, scope: !4848)
!4859 = !DILocation(line: 2923, column: 16, scope: !4848)
!4860 = !DILocation(line: 2923, column: 28, scope: !4848)
!4861 = !DILocation(line: 2923, column: 46, scope: !4848)
!4862 = !DILocation(line: 2923, column: 51, scope: !4848)
!4863 = !DILocation(line: 2923, column: 61, scope: !4848)
!4864 = !DILocation(line: 2923, column: 69, scope: !4848)
!4865 = !DILocation(line: 2923, column: 58, scope: !4848)
!4866 = !DILocation(line: 2924, column: 11, scope: !4848)
!4867 = !DILocation(line: 2924, column: 15, scope: !4848)
!4868 = !DILocation(line: 2924, column: 27, scope: !4848)
!4869 = !DILocation(line: 2925, column: 15, scope: !4848)
!4870 = !DILocation(line: 2925, column: 34, scope: !4848)
!4871 = !DILocation(line: 2925, column: 49, scope: !4848)
!4872 = !DILocation(line: 2925, column: 18, scope: !4848)
!4873 = !DILocation(line: 2926, column: 11, scope: !4848)
!4874 = !DILocation(line: 2926, column: 30, scope: !4848)
!4875 = !DILocation(line: 2926, column: 47, scope: !4848)
!4876 = !DILocation(line: 2926, column: 14, scope: !4848)
!4877 = !DILocation(line: 2921, column: 3, scope: !4848)
!4878 = distinct !DISubprogram(name: "process_signals", scope: !3, file: !3, line: 1312, type: !532, scopeLine: 1313, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4879 = !DILocation(line: 1314, column: 3, scope: !4878)
!4880 = !DILocation(line: 1314, column: 10, scope: !4878)
!4881 = !DILocation(line: 1314, column: 27, scope: !4878)
!4882 = !DILocation(line: 1314, column: 30, scope: !4878)
!4883 = !DILocalVariable(name: "sig", scope: !4884, file: !3, line: 1316, type: !27)
!4884 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 1315, column: 5)
!4885 = !DILocation(line: 1316, column: 11, scope: !4884)
!4886 = !DILocalVariable(name: "stops", scope: !4884, file: !3, line: 1317, type: !27)
!4887 = !DILocation(line: 1317, column: 11, scope: !4884)
!4888 = !DILocalVariable(name: "oldset", scope: !4884, file: !3, line: 1318, type: !509)
!4889 = !DILocation(line: 1318, column: 16, scope: !4884)
!4890 = !DILocation(line: 1320, column: 11, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 1320, column: 11)
!4892 = !DILocation(line: 1320, column: 11, scope: !4884)
!4893 = !DILocation(line: 1321, column: 9, scope: !4891)
!4894 = !DILocation(line: 1322, column: 7, scope: !4884)
!4895 = !DILocation(line: 1324, column: 7, scope: !4884)
!4896 = !DILocation(line: 1328, column: 13, scope: !4884)
!4897 = !DILocation(line: 1328, column: 11, scope: !4884)
!4898 = !DILocation(line: 1329, column: 15, scope: !4884)
!4899 = !DILocation(line: 1329, column: 13, scope: !4884)
!4900 = !DILocation(line: 1334, column: 11, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 1334, column: 11)
!4902 = !DILocation(line: 1334, column: 11, scope: !4884)
!4903 = !DILocation(line: 1336, column: 31, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 1335, column: 9)
!4905 = !DILocation(line: 1336, column: 37, scope: !4904)
!4906 = !DILocation(line: 1336, column: 29, scope: !4904)
!4907 = !DILocation(line: 1337, column: 15, scope: !4904)
!4908 = !DILocation(line: 1338, column: 9, scope: !4904)
!4909 = !DILocation(line: 1340, column: 17, scope: !4901)
!4910 = !DILocation(line: 1340, column: 9, scope: !4901)
!4911 = !DILocation(line: 1343, column: 14, scope: !4884)
!4912 = !DILocation(line: 1343, column: 7, scope: !4884)
!4913 = !DILocation(line: 1344, column: 7, scope: !4884)
!4914 = distinct !{!4914, !4879, !4915}
!4915 = !DILocation(line: 1348, column: 5, scope: !4878)
!4916 = !DILocation(line: 1349, column: 1, scope: !4878)
!4917 = distinct !DISubprogram(name: "patterns_match", scope: !3, file: !3, line: 2907, type: !4918, scopeLine: 2908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4918 = !DISubroutineType(types: !4919)
!4919 = !{!141, !765, !146}
!4920 = !DILocalVariable(name: "patterns", arg: 1, scope: !4917, file: !3, line: 2907, type: !765)
!4921 = !DILocation(line: 2907, column: 46, scope: !4917)
!4922 = !DILocalVariable(name: "file", arg: 2, scope: !4917, file: !3, line: 2907, type: !146)
!4923 = !DILocation(line: 2907, column: 68, scope: !4917)
!4924 = !DILocalVariable(name: "p", scope: !4917, file: !3, line: 2909, type: !765)
!4925 = !DILocation(line: 2909, column: 32, scope: !4917)
!4926 = !DILocation(line: 2910, column: 12, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4917, file: !3, line: 2910, column: 3)
!4928 = !DILocation(line: 2910, column: 10, scope: !4927)
!4929 = !DILocation(line: 2910, column: 8, scope: !4927)
!4930 = !DILocation(line: 2910, column: 22, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4927, file: !3, line: 2910, column: 3)
!4932 = !DILocation(line: 2910, column: 3, scope: !4927)
!4933 = !DILocation(line: 2911, column: 18, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 2911, column: 9)
!4935 = !DILocation(line: 2911, column: 21, scope: !4934)
!4936 = !DILocation(line: 2911, column: 30, scope: !4934)
!4937 = !DILocation(line: 2911, column: 9, scope: !4934)
!4938 = !DILocation(line: 2911, column: 48, scope: !4934)
!4939 = !DILocation(line: 2911, column: 9, scope: !4931)
!4940 = !DILocation(line: 2912, column: 7, scope: !4934)
!4941 = !DILocation(line: 2911, column: 51, scope: !4934)
!4942 = !DILocation(line: 2910, column: 29, scope: !4931)
!4943 = !DILocation(line: 2910, column: 32, scope: !4931)
!4944 = !DILocation(line: 2910, column: 27, scope: !4931)
!4945 = !DILocation(line: 2910, column: 3, scope: !4931)
!4946 = distinct !{!4946, !4932, !4947}
!4947 = !DILocation(line: 2912, column: 14, scope: !4927)
!4948 = !DILocation(line: 2913, column: 3, scope: !4917)
!4949 = !DILocation(line: 2914, column: 1, scope: !4917)
!4950 = distinct !DISubprogram(name: "quote_name_buf", scope: !3, file: !3, line: 4240, type: !4951, scopeLine: 4243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!4951 = !DISubroutineType(types: !4952)
!4952 = !{!149, !142, !149, !143, !4707, !27, !148, !4953}
!4953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!4954 = !DILocalVariable(name: "inbuf", arg: 1, scope: !4950, file: !3, line: 4240, type: !142)
!4955 = !DILocation(line: 4240, column: 24, scope: !4950)
!4956 = !DILocalVariable(name: "bufsize", arg: 2, scope: !4950, file: !3, line: 4240, type: !149)
!4957 = !DILocation(line: 4240, column: 38, scope: !4950)
!4958 = !DILocalVariable(name: "name", arg: 3, scope: !4950, file: !3, line: 4240, type: !143)
!4959 = !DILocation(line: 4240, column: 53, scope: !4950)
!4960 = !DILocalVariable(name: "options", arg: 4, scope: !4950, file: !3, line: 4241, type: !4707)
!4961 = !DILocation(line: 4241, column: 47, scope: !4950)
!4962 = !DILocalVariable(name: "needs_general_quoting", arg: 5, scope: !4950, file: !3, line: 4242, type: !27)
!4963 = !DILocation(line: 4242, column: 21, scope: !4950)
!4964 = !DILocalVariable(name: "width", arg: 6, scope: !4950, file: !3, line: 4242, type: !148)
!4965 = !DILocation(line: 4242, column: 52, scope: !4950)
!4966 = !DILocalVariable(name: "pad", arg: 7, scope: !4950, file: !3, line: 4242, type: !4953)
!4967 = !DILocation(line: 4242, column: 65, scope: !4950)
!4968 = !DILocalVariable(name: "buf", scope: !4950, file: !3, line: 4244, type: !143)
!4969 = !DILocation(line: 4244, column: 9, scope: !4950)
!4970 = !DILocation(line: 4244, column: 16, scope: !4950)
!4971 = !DILocation(line: 4244, column: 15, scope: !4950)
!4972 = !DILocalVariable(name: "displayed_width", scope: !4950, file: !3, line: 4245, type: !149)
!4973 = !DILocation(line: 4245, column: 10, scope: !4950)
!4974 = !DILocalVariable(name: "len", scope: !4950, file: !3, line: 4246, type: !149)
!4975 = !DILocation(line: 4246, column: 10, scope: !4950)
!4976 = !DILocalVariable(name: "quoted", scope: !4950, file: !3, line: 4247, type: !141)
!4977 = !DILocation(line: 4247, column: 8, scope: !4950)
!4978 = !DILocalVariable(name: "qs", scope: !4950, file: !3, line: 4249, type: !95)
!4979 = !DILocation(line: 4249, column: 22, scope: !4950)
!4980 = !DILocation(line: 4249, column: 46, scope: !4950)
!4981 = !DILocation(line: 4249, column: 27, scope: !4950)
!4982 = !DILocalVariable(name: "needs_further_quoting", scope: !4950, file: !3, line: 4250, type: !141)
!4983 = !DILocation(line: 4250, column: 8, scope: !4950)
!4984 = !DILocation(line: 4250, column: 32, scope: !4950)
!4985 = !DILocation(line: 4251, column: 32, scope: !4950)
!4986 = !DILocation(line: 4251, column: 36, scope: !4950)
!4987 = !DILocation(line: 4251, column: 39, scope: !4950)
!4988 = !DILocation(line: 4252, column: 36, scope: !4950)
!4989 = !DILocation(line: 4252, column: 39, scope: !4950)
!4990 = !DILocation(line: 4252, column: 42, scope: !4950)
!4991 = !DILocation(line: 4253, column: 36, scope: !4950)
!4992 = !DILocation(line: 4253, column: 39, scope: !4950)
!4993 = !DILocation(line: 4253, column: 42, scope: !4950)
!4994 = !DILocation(line: 0, scope: !4950)
!4995 = !DILocation(line: 4255, column: 7, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 4255, column: 7)
!4997 = !DILocation(line: 4255, column: 29, scope: !4996)
!4998 = !DILocation(line: 4255, column: 7, scope: !4950)
!4999 = !DILocation(line: 4257, column: 30, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 4256, column: 5)
!5001 = !DILocation(line: 4257, column: 35, scope: !5000)
!5002 = !DILocation(line: 4257, column: 44, scope: !5000)
!5003 = !DILocation(line: 4257, column: 54, scope: !5000)
!5004 = !DILocation(line: 4257, column: 13, scope: !5000)
!5005 = !DILocation(line: 4257, column: 11, scope: !5000)
!5006 = !DILocation(line: 4258, column: 11, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 4258, column: 11)
!5008 = !DILocation(line: 4258, column: 22, scope: !5007)
!5009 = !DILocation(line: 4258, column: 19, scope: !5007)
!5010 = !DILocation(line: 4258, column: 11, scope: !5000)
!5011 = !DILocation(line: 4260, column: 26, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 4259, column: 9)
!5013 = !DILocation(line: 4260, column: 30, scope: !5012)
!5014 = !DILocation(line: 4260, column: 17, scope: !5012)
!5015 = !DILocation(line: 4260, column: 15, scope: !5012)
!5016 = !DILocation(line: 4261, column: 28, scope: !5012)
!5017 = !DILocation(line: 4261, column: 33, scope: !5012)
!5018 = !DILocation(line: 4261, column: 37, scope: !5012)
!5019 = !DILocation(line: 4261, column: 42, scope: !5012)
!5020 = !DILocation(line: 4261, column: 52, scope: !5012)
!5021 = !DILocation(line: 4261, column: 11, scope: !5012)
!5022 = !DILocation(line: 4262, column: 9, scope: !5012)
!5023 = !DILocation(line: 4264, column: 18, scope: !5000)
!5024 = !DILocation(line: 4264, column: 17, scope: !5000)
!5025 = !DILocation(line: 4264, column: 27, scope: !5000)
!5026 = !DILocation(line: 4264, column: 26, scope: !5000)
!5027 = !DILocation(line: 4264, column: 23, scope: !5000)
!5028 = !DILocation(line: 4264, column: 32, scope: !5000)
!5029 = !DILocation(line: 4264, column: 43, scope: !5000)
!5030 = !DILocation(line: 4264, column: 35, scope: !5000)
!5031 = !DILocation(line: 4264, column: 52, scope: !5000)
!5032 = !DILocation(line: 4264, column: 49, scope: !5000)
!5033 = !DILocation(line: 4264, column: 14, scope: !5000)
!5034 = !DILocation(line: 4265, column: 5, scope: !5000)
!5035 = !DILocation(line: 4266, column: 12, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 4266, column: 12)
!5037 = !DILocation(line: 4266, column: 12, scope: !4996)
!5038 = !DILocation(line: 4268, column: 21, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5036, file: !3, line: 4267, column: 5)
!5040 = !DILocation(line: 4268, column: 13, scope: !5039)
!5041 = !DILocation(line: 4268, column: 11, scope: !5039)
!5042 = !DILocation(line: 4269, column: 11, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 4269, column: 11)
!5044 = !DILocation(line: 4269, column: 22, scope: !5043)
!5045 = !DILocation(line: 4269, column: 19, scope: !5043)
!5046 = !DILocation(line: 4269, column: 11, scope: !5039)
!5047 = !DILocation(line: 4270, column: 24, scope: !5043)
!5048 = !DILocation(line: 4270, column: 28, scope: !5043)
!5049 = !DILocation(line: 4270, column: 15, scope: !5043)
!5050 = !DILocation(line: 4270, column: 13, scope: !5043)
!5051 = !DILocation(line: 4270, column: 9, scope: !5043)
!5052 = !DILocation(line: 4271, column: 15, scope: !5039)
!5053 = !DILocation(line: 4271, column: 20, scope: !5039)
!5054 = !DILocation(line: 4271, column: 26, scope: !5039)
!5055 = !DILocation(line: 4271, column: 30, scope: !5039)
!5056 = !DILocation(line: 4271, column: 7, scope: !5039)
!5057 = !DILocation(line: 4273, column: 14, scope: !5039)
!5058 = !DILocation(line: 4274, column: 5, scope: !5039)
!5059 = !DILocation(line: 4277, column: 21, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5036, file: !3, line: 4276, column: 5)
!5061 = !DILocation(line: 4277, column: 13, scope: !5060)
!5062 = !DILocation(line: 4277, column: 11, scope: !5060)
!5063 = !DILocation(line: 4278, column: 13, scope: !5060)
!5064 = !DILocation(line: 4278, column: 11, scope: !5060)
!5065 = !DILocation(line: 4279, column: 14, scope: !5060)
!5066 = !DILocation(line: 4282, column: 7, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 4282, column: 7)
!5068 = !DILocation(line: 4282, column: 7, scope: !4950)
!5069 = !DILocation(line: 4284, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 4284, column: 11)
!5071 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 4283, column: 5)
!5072 = !DILocation(line: 4284, column: 22, scope: !5070)
!5073 = !DILocation(line: 4284, column: 11, scope: !5071)
!5074 = !DILocalVariable(name: "p", scope: !5075, file: !3, line: 4286, type: !146)
!5075 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 4285, column: 9)
!5076 = !DILocation(line: 4286, column: 23, scope: !5075)
!5077 = !DILocation(line: 4286, column: 27, scope: !5075)
!5078 = !DILocalVariable(name: "plimit", scope: !5075, file: !3, line: 4287, type: !146)
!5079 = !DILocation(line: 4287, column: 23, scope: !5075)
!5080 = !DILocation(line: 4287, column: 32, scope: !5075)
!5081 = !DILocation(line: 4287, column: 38, scope: !5075)
!5082 = !DILocation(line: 4287, column: 36, scope: !5075)
!5083 = !DILocalVariable(name: "q", scope: !5075, file: !3, line: 4288, type: !143)
!5084 = !DILocation(line: 4288, column: 17, scope: !5075)
!5085 = !DILocation(line: 4288, column: 21, scope: !5075)
!5086 = !DILocation(line: 4289, column: 27, scope: !5075)
!5087 = !DILocation(line: 4291, column: 11, scope: !5075)
!5088 = !DILocation(line: 4291, column: 18, scope: !5075)
!5089 = !DILocation(line: 4291, column: 22, scope: !5075)
!5090 = !DILocation(line: 4291, column: 20, scope: !5075)
!5091 = !DILocation(line: 4292, column: 22, scope: !5075)
!5092 = !DILocation(line: 4292, column: 21, scope: !5075)
!5093 = !DILocation(line: 4292, column: 13, scope: !5075)
!5094 = !DILocation(line: 4315, column: 28, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 4293, column: 15)
!5096 = !DILocation(line: 4315, column: 26, scope: !5095)
!5097 = !DILocation(line: 4315, column: 21, scope: !5095)
!5098 = !DILocation(line: 4315, column: 24, scope: !5095)
!5099 = !DILocation(line: 4316, column: 35, scope: !5095)
!5100 = !DILocation(line: 4317, column: 19, scope: !5095)
!5101 = !DILocalVariable(name: "mbstate", scope: !5102, file: !3, line: 4323, type: !752)
!5102 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 4322, column: 19)
!5103 = !DILocation(line: 4323, column: 31, scope: !5102)
!5104 = !DILocation(line: 4324, column: 21, scope: !5102)
!5105 = !DILocalVariable(name: "wc", scope: !5106, file: !3, line: 4326, type: !764)
!5106 = distinct !DILexicalBlock(scope: !5102, file: !3, line: 4325, column: 23)
!5107 = !DILocation(line: 4326, column: 33, scope: !5106)
!5108 = !DILocalVariable(name: "bytes", scope: !5106, file: !3, line: 4327, type: !149)
!5109 = !DILocation(line: 4327, column: 32, scope: !5106)
!5110 = !DILocalVariable(name: "w", scope: !5106, file: !3, line: 4328, type: !27)
!5111 = !DILocation(line: 4328, column: 29, scope: !5106)
!5112 = !DILocation(line: 4330, column: 47, scope: !5106)
!5113 = !DILocation(line: 4330, column: 50, scope: !5106)
!5114 = !DILocation(line: 4330, column: 59, scope: !5106)
!5115 = !DILocation(line: 4330, column: 57, scope: !5106)
!5116 = !DILocation(line: 4330, column: 33, scope: !5106)
!5117 = !DILocation(line: 4330, column: 31, scope: !5106)
!5118 = !DILocation(line: 4332, column: 29, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 4332, column: 29)
!5120 = !DILocation(line: 4332, column: 35, scope: !5119)
!5121 = !DILocation(line: 4332, column: 29, scope: !5106)
!5122 = !DILocation(line: 4337, column: 30, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 4333, column: 27)
!5124 = !DILocation(line: 4338, column: 31, scope: !5123)
!5125 = !DILocation(line: 4338, column: 34, scope: !5123)
!5126 = !DILocation(line: 4339, column: 45, scope: !5123)
!5127 = !DILocation(line: 4340, column: 29, scope: !5123)
!5128 = !DILocation(line: 4343, column: 29, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 4343, column: 29)
!5130 = !DILocation(line: 4343, column: 35, scope: !5129)
!5131 = !DILocation(line: 4343, column: 29, scope: !5106)
!5132 = !DILocation(line: 4348, column: 33, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5129, file: !3, line: 4344, column: 27)
!5134 = !DILocation(line: 4348, column: 31, scope: !5133)
!5135 = !DILocation(line: 4349, column: 31, scope: !5133)
!5136 = !DILocation(line: 4349, column: 34, scope: !5133)
!5137 = !DILocation(line: 4350, column: 45, scope: !5133)
!5138 = !DILocation(line: 4351, column: 29, scope: !5133)
!5139 = !DILocation(line: 4354, column: 29, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 4354, column: 29)
!5141 = !DILocation(line: 4354, column: 35, scope: !5140)
!5142 = !DILocation(line: 4354, column: 29, scope: !5106)
!5143 = !DILocation(line: 4356, column: 33, scope: !5140)
!5144 = !DILocation(line: 4356, column: 27, scope: !5140)
!5145 = !DILocation(line: 4358, column: 38, scope: !5106)
!5146 = !DILocation(line: 4358, column: 29, scope: !5106)
!5147 = !DILocation(line: 4358, column: 27, scope: !5106)
!5148 = !DILocation(line: 4359, column: 29, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5106, file: !3, line: 4359, column: 29)
!5150 = !DILocation(line: 4359, column: 31, scope: !5149)
!5151 = !DILocation(line: 4359, column: 29, scope: !5106)
!5152 = !DILocation(line: 4363, column: 29, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 4360, column: 27)
!5154 = !DILocation(line: 4363, column: 36, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 4363, column: 29)
!5156 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 4363, column: 29)
!5157 = !DILocation(line: 4363, column: 42, scope: !5155)
!5158 = !DILocation(line: 4363, column: 29, scope: !5156)
!5159 = !DILocation(line: 4364, column: 40, scope: !5155)
!5160 = !DILocation(line: 4364, column: 38, scope: !5155)
!5161 = !DILocation(line: 4364, column: 33, scope: !5155)
!5162 = !DILocation(line: 4364, column: 36, scope: !5155)
!5163 = !DILocation(line: 4364, column: 31, scope: !5155)
!5164 = !DILocation(line: 4363, column: 47, scope: !5155)
!5165 = !DILocation(line: 4363, column: 29, scope: !5155)
!5166 = distinct !{!5166, !5158, !5167}
!5167 = !DILocation(line: 4364, column: 40, scope: !5156)
!5168 = !DILocation(line: 4365, column: 48, scope: !5153)
!5169 = !DILocation(line: 4365, column: 45, scope: !5153)
!5170 = !DILocation(line: 4366, column: 27, scope: !5153)
!5171 = !DILocation(line: 4372, column: 34, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 4368, column: 27)
!5173 = !DILocation(line: 4372, column: 31, scope: !5172)
!5174 = !DILocation(line: 4373, column: 31, scope: !5172)
!5175 = !DILocation(line: 4373, column: 34, scope: !5172)
!5176 = !DILocation(line: 4374, column: 45, scope: !5172)
!5177 = !DILocation(line: 4376, column: 23, scope: !5106)
!5178 = !DILocation(line: 4377, column: 30, scope: !5102)
!5179 = !DILocation(line: 4377, column: 28, scope: !5102)
!5180 = distinct !{!5180, !5104, !5181}
!5181 = !DILocation(line: 4377, column: 48, scope: !5102)
!5182 = !DILocation(line: 4379, column: 19, scope: !5095)
!5183 = distinct !{!5183, !5087, !5184}
!5184 = !DILocation(line: 4380, column: 15, scope: !5075)
!5185 = !DILocation(line: 4383, column: 17, scope: !5075)
!5186 = !DILocation(line: 4383, column: 21, scope: !5075)
!5187 = !DILocation(line: 4383, column: 19, scope: !5075)
!5188 = !DILocation(line: 4383, column: 15, scope: !5075)
!5189 = !DILocation(line: 4384, column: 9, scope: !5075)
!5190 = !DILocalVariable(name: "p", scope: !5191, file: !3, line: 4387, type: !143)
!5191 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 4386, column: 9)
!5192 = !DILocation(line: 4387, column: 17, scope: !5191)
!5193 = !DILocation(line: 4387, column: 21, scope: !5191)
!5194 = !DILocalVariable(name: "plimit", scope: !5191, file: !3, line: 4388, type: !146)
!5195 = !DILocation(line: 4388, column: 23, scope: !5191)
!5196 = !DILocation(line: 4388, column: 32, scope: !5191)
!5197 = !DILocation(line: 4388, column: 38, scope: !5191)
!5198 = !DILocation(line: 4388, column: 36, scope: !5191)
!5199 = !DILocation(line: 4390, column: 11, scope: !5191)
!5200 = !DILocation(line: 4390, column: 18, scope: !5191)
!5201 = !DILocation(line: 4390, column: 22, scope: !5191)
!5202 = !DILocation(line: 4390, column: 20, scope: !5191)
!5203 = !DILocation(line: 4392, column: 21, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5205, file: !3, line: 4392, column: 19)
!5205 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 4391, column: 13)
!5206 = !DILocation(line: 4392, column: 19, scope: !5205)
!5207 = !DILocation(line: 4393, column: 18, scope: !5204)
!5208 = !DILocation(line: 4393, column: 20, scope: !5204)
!5209 = !DILocation(line: 4393, column: 17, scope: !5204)
!5210 = !DILocation(line: 4394, column: 16, scope: !5205)
!5211 = distinct !{!5211, !5199, !5212}
!5212 = !DILocation(line: 4395, column: 13, scope: !5191)
!5213 = !DILocation(line: 4396, column: 29, scope: !5191)
!5214 = !DILocation(line: 4396, column: 27, scope: !5191)
!5215 = !DILocation(line: 4398, column: 5, scope: !5071)
!5216 = !DILocation(line: 4399, column: 12, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 4399, column: 12)
!5218 = !DILocation(line: 4399, column: 18, scope: !5217)
!5219 = !DILocation(line: 4399, column: 12, scope: !5067)
!5220 = !DILocation(line: 4401, column: 11, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 4401, column: 11)
!5222 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 4400, column: 5)
!5223 = !DILocation(line: 4401, column: 22, scope: !5221)
!5224 = !DILocation(line: 4401, column: 11, scope: !5222)
!5225 = !DILocation(line: 4402, column: 38, scope: !5221)
!5226 = !DILocation(line: 4402, column: 43, scope: !5221)
!5227 = !DILocation(line: 4402, column: 27, scope: !5221)
!5228 = !DILocation(line: 4402, column: 25, scope: !5221)
!5229 = !DILocation(line: 4402, column: 9, scope: !5221)
!5230 = !DILocalVariable(name: "p", scope: !5231, file: !3, line: 4405, type: !146)
!5231 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 4404, column: 9)
!5232 = !DILocation(line: 4405, column: 23, scope: !5231)
!5233 = !DILocation(line: 4405, column: 27, scope: !5231)
!5234 = !DILocalVariable(name: "plimit", scope: !5231, file: !3, line: 4406, type: !146)
!5235 = !DILocation(line: 4406, column: 23, scope: !5231)
!5236 = !DILocation(line: 4406, column: 32, scope: !5231)
!5237 = !DILocation(line: 4406, column: 38, scope: !5231)
!5238 = !DILocation(line: 4406, column: 36, scope: !5231)
!5239 = !DILocation(line: 4408, column: 27, scope: !5231)
!5240 = !DILocation(line: 4409, column: 11, scope: !5231)
!5241 = !DILocation(line: 4409, column: 18, scope: !5231)
!5242 = !DILocation(line: 4409, column: 22, scope: !5231)
!5243 = !DILocation(line: 4409, column: 20, scope: !5231)
!5244 = !DILocation(line: 4411, column: 19, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5246, file: !3, line: 4411, column: 19)
!5246 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 4410, column: 13)
!5247 = !DILocation(line: 4411, column: 19, scope: !5246)
!5248 = !DILocation(line: 4412, column: 32, scope: !5245)
!5249 = !DILocation(line: 4412, column: 17, scope: !5245)
!5250 = !DILocation(line: 4413, column: 16, scope: !5246)
!5251 = distinct !{!5251, !5240, !5252}
!5252 = !DILocation(line: 4414, column: 13, scope: !5231)
!5253 = !DILocation(line: 4416, column: 5, scope: !5222)
!5254 = !DILocation(line: 4421, column: 11, scope: !4950)
!5255 = !DILocation(line: 4421, column: 39, scope: !4950)
!5256 = !DILocation(line: 4421, column: 42, scope: !4950)
!5257 = !DILocation(line: 4421, column: 58, scope: !4950)
!5258 = !DILocation(line: 4421, column: 63, scope: !4950)
!5259 = !DILocation(line: 4421, column: 61, scope: !4950)
!5260 = !DILocation(line: 4421, column: 4, scope: !4950)
!5261 = !DILocation(line: 4421, column: 8, scope: !4950)
!5262 = !DILocation(line: 4423, column: 7, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 4423, column: 7)
!5264 = !DILocation(line: 4423, column: 13, scope: !5263)
!5265 = !DILocation(line: 4423, column: 7, scope: !4950)
!5266 = !DILocation(line: 4424, column: 14, scope: !5263)
!5267 = !DILocation(line: 4424, column: 6, scope: !5263)
!5268 = !DILocation(line: 4424, column: 12, scope: !5263)
!5269 = !DILocation(line: 4424, column: 5, scope: !5263)
!5270 = !DILocation(line: 4426, column: 12, scope: !4950)
!5271 = !DILocation(line: 4426, column: 4, scope: !4950)
!5272 = !DILocation(line: 4426, column: 10, scope: !4950)
!5273 = !DILocation(line: 4428, column: 10, scope: !4950)
!5274 = !DILocation(line: 4428, column: 3, scope: !4950)
!5275 = distinct !DISubprogram(name: "print_color_indicator", scope: !3, file: !3, line: 4665, type: !5276, scopeLine: 4666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5276 = !DISubroutineType(types: !5277)
!5277 = !{!141, !810}
!5278 = !DILocalVariable(name: "ind", arg: 1, scope: !5275, file: !3, line: 4665, type: !810)
!5279 = !DILocation(line: 4665, column: 46, scope: !5275)
!5280 = !DILocation(line: 4667, column: 7, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 4667, column: 7)
!5282 = !DILocation(line: 4667, column: 7, scope: !5275)
!5283 = !DILocation(line: 4670, column: 11, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 4670, column: 11)
!5285 = distinct !DILexicalBlock(scope: !5281, file: !3, line: 4668, column: 5)
!5286 = !DILocation(line: 4670, column: 11, scope: !5285)
!5287 = !DILocation(line: 4671, column: 9, scope: !5284)
!5288 = !DILocation(line: 4672, column: 7, scope: !5285)
!5289 = !DILocation(line: 4673, column: 22, scope: !5285)
!5290 = !DILocation(line: 4673, column: 7, scope: !5285)
!5291 = !DILocation(line: 4674, column: 7, scope: !5285)
!5292 = !DILocation(line: 4675, column: 5, scope: !5285)
!5293 = !DILocation(line: 4677, column: 10, scope: !5275)
!5294 = !DILocation(line: 4677, column: 14, scope: !5275)
!5295 = !DILocation(line: 4677, column: 3, scope: !5275)
!5296 = distinct !DISubprogram(name: "file_escape", scope: !3, file: !3, line: 4454, type: !5297, scopeLine: 4455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5297 = !DISubroutineType(types: !5298)
!5298 = !{!143, !146, !141}
!5299 = !DILocalVariable(name: "str", arg: 1, scope: !5296, file: !3, line: 4454, type: !146)
!5300 = !DILocation(line: 4454, column: 26, scope: !5296)
!5301 = !DILocalVariable(name: "path", arg: 2, scope: !5296, file: !3, line: 4454, type: !141)
!5302 = !DILocation(line: 4454, column: 36, scope: !5296)
!5303 = !DILocalVariable(name: "esc", scope: !5296, file: !3, line: 4456, type: !143)
!5304 = !DILocation(line: 4456, column: 9, scope: !5296)
!5305 = !DILocation(line: 4456, column: 36, scope: !5296)
!5306 = !DILocation(line: 4456, column: 28, scope: !5296)
!5307 = !DILocation(line: 4456, column: 41, scope: !5296)
!5308 = !DILocation(line: 4456, column: 15, scope: !5296)
!5309 = !DILocalVariable(name: "p", scope: !5296, file: !3, line: 4457, type: !143)
!5310 = !DILocation(line: 4457, column: 9, scope: !5296)
!5311 = !DILocation(line: 4457, column: 13, scope: !5296)
!5312 = !DILocation(line: 4458, column: 3, scope: !5296)
!5313 = !DILocation(line: 4458, column: 11, scope: !5296)
!5314 = !DILocation(line: 4458, column: 10, scope: !5296)
!5315 = !DILocation(line: 4460, column: 11, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 4460, column: 11)
!5317 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 4459, column: 5)
!5318 = !DILocation(line: 4460, column: 16, scope: !5316)
!5319 = !DILocation(line: 4460, column: 19, scope: !5316)
!5320 = !DILocation(line: 4460, column: 11, scope: !5317)
!5321 = !DILocation(line: 4462, column: 13, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 4461, column: 9)
!5323 = !DILocation(line: 4462, column: 16, scope: !5322)
!5324 = !DILocation(line: 4463, column: 14, scope: !5322)
!5325 = !DILocation(line: 4464, column: 9, scope: !5322)
!5326 = !DILocation(line: 4465, column: 35, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 4465, column: 16)
!5328 = !DILocation(line: 4465, column: 34, scope: !5327)
!5329 = !DILocation(line: 4465, column: 24, scope: !5327)
!5330 = !DILocation(line: 4465, column: 16, scope: !5327)
!5331 = !DILocation(line: 4465, column: 16, scope: !5316)
!5332 = !DILocation(line: 4466, column: 20, scope: !5327)
!5333 = !DILocation(line: 4466, column: 16, scope: !5327)
!5334 = !DILocation(line: 4466, column: 11, scope: !5327)
!5335 = !DILocation(line: 4466, column: 14, scope: !5327)
!5336 = !DILocation(line: 4466, column: 9, scope: !5327)
!5337 = !DILocation(line: 4468, column: 23, scope: !5327)
!5338 = !DILocation(line: 4468, column: 50, scope: !5327)
!5339 = !DILocation(line: 4468, column: 46, scope: !5327)
!5340 = !DILocation(line: 4468, column: 36, scope: !5327)
!5341 = !DILocation(line: 4468, column: 14, scope: !5327)
!5342 = !DILocation(line: 4468, column: 11, scope: !5327)
!5343 = distinct !{!5343, !5312, !5344}
!5344 = !DILocation(line: 4469, column: 5, scope: !5296)
!5345 = !DILocation(line: 4470, column: 4, scope: !5296)
!5346 = !DILocation(line: 4470, column: 6, scope: !5296)
!5347 = !DILocation(line: 4471, column: 10, scope: !5296)
!5348 = !DILocation(line: 4471, column: 3, scope: !5296)
!5349 = distinct !DISubprogram(name: "to_uchar", scope: !838, file: !838, line: 156, type: !5350, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5350 = !DISubroutineType(types: !5351)
!5351 = !{!737, !144}
!5352 = !DILocalVariable(name: "ch", arg: 1, scope: !5349, file: !838, line: 156, type: !144)
!5353 = !DILocation(line: 156, column: 44, scope: !5349)
!5354 = !DILocation(line: 156, column: 57, scope: !5349)
!5355 = !DILocation(line: 156, column: 50, scope: !5349)
!5356 = distinct !DISubprogram(name: "print_file_name_and_frills", scope: !3, file: !3, line: 4593, type: !5357, scopeLine: 4594, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5357 = !DISubroutineType(types: !5358)
!5358 = !{!149, !183, !149}
!5359 = !DILocalVariable(name: "f", arg: 1, scope: !5356, file: !3, line: 4593, type: !183)
!5360 = !DILocation(line: 4593, column: 52, scope: !5356)
!5361 = !DILocalVariable(name: "start_col", arg: 2, scope: !5356, file: !3, line: 4593, type: !149)
!5362 = !DILocation(line: 4593, column: 62, scope: !5356)
!5363 = !DILocalVariable(name: "buf", scope: !5356, file: !3, line: 4595, type: !746)
!5364 = !DILocation(line: 4595, column: 8, scope: !5356)
!5365 = !DILocation(line: 4597, column: 3, scope: !5356)
!5366 = !DILocation(line: 4599, column: 7, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 4599, column: 7)
!5368 = !DILocation(line: 4599, column: 7, scope: !5356)
!5369 = !DILocation(line: 4600, column: 21, scope: !5367)
!5370 = !DILocation(line: 4600, column: 28, scope: !5367)
!5371 = !DILocation(line: 4600, column: 49, scope: !5367)
!5372 = !DILocation(line: 4601, column: 27, scope: !5367)
!5373 = !DILocation(line: 4601, column: 44, scope: !5367)
!5374 = !DILocation(line: 4601, column: 13, scope: !5367)
!5375 = !DILocation(line: 4600, column: 5, scope: !5367)
!5376 = !DILocation(line: 4603, column: 7, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 4603, column: 7)
!5378 = !DILocation(line: 4603, column: 7, scope: !5356)
!5379 = !DILocation(line: 4604, column: 21, scope: !5377)
!5380 = !DILocation(line: 4604, column: 28, scope: !5377)
!5381 = !DILocation(line: 4604, column: 49, scope: !5377)
!5382 = !DILocation(line: 4605, column: 15, scope: !5377)
!5383 = !DILocation(line: 4605, column: 18, scope: !5377)
!5384 = !DILocation(line: 4605, column: 13, scope: !5377)
!5385 = !DILocation(line: 4606, column: 31, scope: !5377)
!5386 = !DILocation(line: 4606, column: 53, scope: !5377)
!5387 = !DILocation(line: 4606, column: 58, scope: !5377)
!5388 = !DILocation(line: 4607, column: 46, scope: !5377)
!5389 = !DILocation(line: 4606, column: 15, scope: !5377)
!5390 = !DILocation(line: 4604, column: 5, scope: !5377)
!5391 = !DILocation(line: 4609, column: 7, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 4609, column: 7)
!5393 = !DILocation(line: 4609, column: 7, scope: !5356)
!5394 = !DILocation(line: 4610, column: 21, scope: !5392)
!5395 = !DILocation(line: 4610, column: 28, scope: !5392)
!5396 = !DILocation(line: 4610, column: 49, scope: !5392)
!5397 = !DILocation(line: 4610, column: 65, scope: !5392)
!5398 = !DILocation(line: 4610, column: 68, scope: !5392)
!5399 = !DILocation(line: 4610, column: 5, scope: !5392)
!5400 = !DILocalVariable(name: "width", scope: !5356, file: !3, line: 4612, type: !149)
!5401 = !DILocation(line: 4612, column: 10, scope: !5356)
!5402 = !DILocation(line: 4612, column: 43, scope: !5356)
!5403 = !DILocation(line: 4612, column: 59, scope: !5356)
!5404 = !DILocation(line: 4612, column: 18, scope: !5356)
!5405 = !DILocation(line: 4614, column: 7, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 4614, column: 7)
!5407 = !DILocation(line: 4614, column: 23, scope: !5406)
!5408 = !DILocation(line: 4614, column: 7, scope: !5356)
!5409 = !DILocation(line: 4615, column: 36, scope: !5406)
!5410 = !DILocation(line: 4615, column: 39, scope: !5406)
!5411 = !DILocation(line: 4615, column: 48, scope: !5406)
!5412 = !DILocation(line: 4615, column: 51, scope: !5406)
!5413 = !DILocation(line: 4615, column: 56, scope: !5406)
!5414 = !DILocation(line: 4615, column: 65, scope: !5406)
!5415 = !DILocation(line: 4615, column: 68, scope: !5406)
!5416 = !DILocation(line: 4615, column: 14, scope: !5406)
!5417 = !DILocation(line: 4615, column: 11, scope: !5406)
!5418 = !DILocation(line: 4615, column: 5, scope: !5406)
!5419 = !DILocation(line: 4617, column: 10, scope: !5356)
!5420 = !DILocation(line: 4617, column: 3, scope: !5356)
!5421 = distinct !DISubprogram(name: "print_with_separator", scope: !3, file: !3, line: 4923, type: !5422, scopeLine: 4924, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5422 = !DISubroutineType(types: !5423)
!5423 = !{null, !144}
!5424 = !DILocalVariable(name: "sep", arg: 1, scope: !5421, file: !3, line: 4923, type: !144)
!5425 = !DILocation(line: 4923, column: 28, scope: !5421)
!5426 = !DILocalVariable(name: "filesno", scope: !5421, file: !3, line: 4925, type: !149)
!5427 = !DILocation(line: 4925, column: 10, scope: !5421)
!5428 = !DILocalVariable(name: "pos", scope: !5421, file: !3, line: 4926, type: !149)
!5429 = !DILocation(line: 4926, column: 10, scope: !5421)
!5430 = !DILocation(line: 4928, column: 16, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 4928, column: 3)
!5432 = !DILocation(line: 4928, column: 8, scope: !5431)
!5433 = !DILocation(line: 4928, column: 21, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 4928, column: 3)
!5435 = !DILocation(line: 4928, column: 31, scope: !5434)
!5436 = !DILocation(line: 4928, column: 29, scope: !5434)
!5437 = !DILocation(line: 4928, column: 3, scope: !5431)
!5438 = !DILocalVariable(name: "f", scope: !5439, file: !3, line: 4930, type: !183)
!5439 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 4929, column: 5)
!5440 = !DILocation(line: 4930, column: 30, scope: !5439)
!5441 = !DILocation(line: 4930, column: 34, scope: !5439)
!5442 = !DILocation(line: 4930, column: 46, scope: !5439)
!5443 = !DILocalVariable(name: "len", scope: !5439, file: !3, line: 4931, type: !149)
!5444 = !DILocation(line: 4931, column: 14, scope: !5439)
!5445 = !DILocation(line: 4931, column: 20, scope: !5439)
!5446 = !DILocation(line: 4931, column: 66, scope: !5439)
!5447 = !DILocation(line: 4931, column: 34, scope: !5439)
!5448 = !DILocation(line: 4933, column: 11, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 4933, column: 11)
!5450 = !DILocation(line: 4933, column: 19, scope: !5449)
!5451 = !DILocation(line: 4933, column: 11, scope: !5439)
!5452 = !DILocalVariable(name: "separator", scope: !5453, file: !3, line: 4935, type: !144)
!5453 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 4934, column: 9)
!5454 = !DILocation(line: 4935, column: 16, scope: !5453)
!5455 = !DILocation(line: 4937, column: 17, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 4937, column: 15)
!5457 = !DILocation(line: 4938, column: 15, scope: !5456)
!5458 = !DILocation(line: 4938, column: 20, scope: !5456)
!5459 = !DILocation(line: 4938, column: 26, scope: !5456)
!5460 = !DILocation(line: 4938, column: 24, scope: !5456)
!5461 = !DILocation(line: 4938, column: 30, scope: !5456)
!5462 = !DILocation(line: 4938, column: 36, scope: !5456)
!5463 = !DILocation(line: 4938, column: 34, scope: !5456)
!5464 = !DILocation(line: 4939, column: 19, scope: !5456)
!5465 = !DILocation(line: 4939, column: 23, scope: !5456)
!5466 = !DILocation(line: 4939, column: 41, scope: !5456)
!5467 = !DILocation(line: 4939, column: 39, scope: !5456)
!5468 = !DILocation(line: 4939, column: 45, scope: !5456)
!5469 = !DILocation(line: 4939, column: 27, scope: !5456)
!5470 = !DILocation(line: 4937, column: 15, scope: !5453)
!5471 = !DILocation(line: 4941, column: 19, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5456, file: !3, line: 4940, column: 13)
!5473 = !DILocation(line: 4942, column: 25, scope: !5472)
!5474 = !DILocation(line: 4943, column: 13, scope: !5472)
!5475 = !DILocation(line: 4946, column: 19, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5456, file: !3, line: 4945, column: 13)
!5477 = !DILocation(line: 4947, column: 25, scope: !5476)
!5478 = !DILocation(line: 4950, column: 11, scope: !5453)
!5479 = !DILocation(line: 4951, column: 11, scope: !5453)
!5480 = !DILocation(line: 4952, column: 9, scope: !5453)
!5481 = !DILocation(line: 4954, column: 35, scope: !5439)
!5482 = !DILocation(line: 4954, column: 38, scope: !5439)
!5483 = !DILocation(line: 4954, column: 7, scope: !5439)
!5484 = !DILocation(line: 4955, column: 14, scope: !5439)
!5485 = !DILocation(line: 4955, column: 11, scope: !5439)
!5486 = !DILocation(line: 4956, column: 5, scope: !5439)
!5487 = !DILocation(line: 4928, column: 50, scope: !5434)
!5488 = !DILocation(line: 4928, column: 3, scope: !5434)
!5489 = distinct !{!5489, !5437, !5490}
!5490 = !DILocation(line: 4956, column: 5, scope: !5431)
!5491 = !DILocation(line: 4957, column: 3, scope: !5421)
!5492 = !DILocation(line: 4958, column: 1, scope: !5421)
!5493 = distinct !DISubprogram(name: "print_many_per_line", scope: !3, file: !3, line: 4846, type: !532, scopeLine: 4847, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5494 = !DILocalVariable(name: "row", scope: !5493, file: !3, line: 4848, type: !149)
!5495 = !DILocation(line: 4848, column: 10, scope: !5493)
!5496 = !DILocalVariable(name: "cols", scope: !5493, file: !3, line: 4849, type: !149)
!5497 = !DILocation(line: 4849, column: 10, scope: !5493)
!5498 = !DILocation(line: 4849, column: 17, scope: !5493)
!5499 = !DILocalVariable(name: "line_fmt", scope: !5493, file: !3, line: 4850, type: !814)
!5500 = !DILocation(line: 4850, column: 29, scope: !5493)
!5501 = !DILocation(line: 4850, column: 41, scope: !5493)
!5502 = !DILocation(line: 4850, column: 53, scope: !5493)
!5503 = !DILocation(line: 4850, column: 58, scope: !5493)
!5504 = !DILocalVariable(name: "rows", scope: !5493, file: !3, line: 4854, type: !149)
!5505 = !DILocation(line: 4854, column: 10, scope: !5493)
!5506 = !DILocation(line: 4854, column: 17, scope: !5493)
!5507 = !DILocation(line: 4854, column: 30, scope: !5493)
!5508 = !DILocation(line: 4854, column: 28, scope: !5493)
!5509 = !DILocation(line: 4854, column: 38, scope: !5493)
!5510 = !DILocation(line: 4854, column: 51, scope: !5493)
!5511 = !DILocation(line: 4854, column: 49, scope: !5493)
!5512 = !DILocation(line: 4854, column: 56, scope: !5493)
!5513 = !DILocation(line: 4854, column: 37, scope: !5493)
!5514 = !DILocation(line: 4854, column: 35, scope: !5493)
!5515 = !DILocation(line: 4856, column: 12, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 4856, column: 3)
!5517 = !DILocation(line: 4856, column: 8, scope: !5516)
!5518 = !DILocation(line: 4856, column: 17, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 4856, column: 3)
!5520 = !DILocation(line: 4856, column: 23, scope: !5519)
!5521 = !DILocation(line: 4856, column: 21, scope: !5519)
!5522 = !DILocation(line: 4856, column: 3, scope: !5516)
!5523 = !DILocalVariable(name: "col", scope: !5524, file: !3, line: 4858, type: !149)
!5524 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 4857, column: 5)
!5525 = !DILocation(line: 4858, column: 14, scope: !5524)
!5526 = !DILocalVariable(name: "filesno", scope: !5524, file: !3, line: 4859, type: !149)
!5527 = !DILocation(line: 4859, column: 14, scope: !5524)
!5528 = !DILocation(line: 4859, column: 24, scope: !5524)
!5529 = !DILocalVariable(name: "pos", scope: !5524, file: !3, line: 4860, type: !149)
!5530 = !DILocation(line: 4860, column: 14, scope: !5524)
!5531 = !DILocation(line: 4863, column: 7, scope: !5524)
!5532 = !DILocalVariable(name: "f", scope: !5533, file: !3, line: 4865, type: !183)
!5533 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 4864, column: 9)
!5534 = !DILocation(line: 4865, column: 34, scope: !5533)
!5535 = !DILocation(line: 4865, column: 38, scope: !5533)
!5536 = !DILocation(line: 4865, column: 50, scope: !5533)
!5537 = !DILocalVariable(name: "name_length", scope: !5533, file: !3, line: 4866, type: !149)
!5538 = !DILocation(line: 4866, column: 18, scope: !5533)
!5539 = !DILocation(line: 4866, column: 64, scope: !5533)
!5540 = !DILocation(line: 4866, column: 32, scope: !5533)
!5541 = !DILocalVariable(name: "max_name_length", scope: !5533, file: !3, line: 4867, type: !149)
!5542 = !DILocation(line: 4867, column: 18, scope: !5533)
!5543 = !DILocation(line: 4867, column: 36, scope: !5533)
!5544 = !DILocation(line: 4867, column: 46, scope: !5533)
!5545 = !DILocation(line: 4867, column: 57, scope: !5533)
!5546 = !DILocation(line: 4868, column: 39, scope: !5533)
!5547 = !DILocation(line: 4868, column: 42, scope: !5533)
!5548 = !DILocation(line: 4868, column: 11, scope: !5533)
!5549 = !DILocation(line: 4870, column: 22, scope: !5533)
!5550 = !DILocation(line: 4870, column: 19, scope: !5533)
!5551 = !DILocation(line: 4871, column: 15, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5533, file: !3, line: 4871, column: 15)
!5553 = !DILocation(line: 4871, column: 26, scope: !5552)
!5554 = !DILocation(line: 4871, column: 23, scope: !5552)
!5555 = !DILocation(line: 4871, column: 15, scope: !5533)
!5556 = !DILocation(line: 4872, column: 13, scope: !5552)
!5557 = !DILocation(line: 4874, column: 19, scope: !5533)
!5558 = !DILocation(line: 4874, column: 25, scope: !5533)
!5559 = !DILocation(line: 4874, column: 23, scope: !5533)
!5560 = !DILocation(line: 4874, column: 38, scope: !5533)
!5561 = !DILocation(line: 4874, column: 44, scope: !5533)
!5562 = !DILocation(line: 4874, column: 42, scope: !5533)
!5563 = !DILocation(line: 4874, column: 11, scope: !5533)
!5564 = !DILocation(line: 4875, column: 18, scope: !5533)
!5565 = !DILocation(line: 4875, column: 15, scope: !5533)
!5566 = distinct !{!5566, !5531, !5567}
!5567 = !DILocation(line: 4876, column: 9, scope: !5524)
!5568 = !DILocation(line: 4877, column: 7, scope: !5524)
!5569 = !DILocation(line: 4878, column: 5, scope: !5524)
!5570 = !DILocation(line: 4856, column: 32, scope: !5519)
!5571 = !DILocation(line: 4856, column: 3, scope: !5519)
!5572 = distinct !{!5572, !5522, !5573}
!5573 = !DILocation(line: 4878, column: 5, scope: !5516)
!5574 = !DILocation(line: 4879, column: 1, scope: !5493)
!5575 = distinct !DISubprogram(name: "print_horizontal", scope: !3, file: !3, line: 4882, type: !532, scopeLine: 4883, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5576 = !DILocalVariable(name: "filesno", scope: !5575, file: !3, line: 4884, type: !149)
!5577 = !DILocation(line: 4884, column: 10, scope: !5575)
!5578 = !DILocalVariable(name: "pos", scope: !5575, file: !3, line: 4885, type: !149)
!5579 = !DILocation(line: 4885, column: 10, scope: !5575)
!5580 = !DILocalVariable(name: "cols", scope: !5575, file: !3, line: 4886, type: !149)
!5581 = !DILocation(line: 4886, column: 10, scope: !5575)
!5582 = !DILocation(line: 4886, column: 17, scope: !5575)
!5583 = !DILocalVariable(name: "line_fmt", scope: !5575, file: !3, line: 4887, type: !814)
!5584 = !DILocation(line: 4887, column: 29, scope: !5575)
!5585 = !DILocation(line: 4887, column: 41, scope: !5575)
!5586 = !DILocation(line: 4887, column: 53, scope: !5575)
!5587 = !DILocation(line: 4887, column: 58, scope: !5575)
!5588 = !DILocalVariable(name: "f", scope: !5575, file: !3, line: 4888, type: !183)
!5589 = !DILocation(line: 4888, column: 26, scope: !5575)
!5590 = !DILocation(line: 4888, column: 30, scope: !5575)
!5591 = !DILocalVariable(name: "name_length", scope: !5575, file: !3, line: 4889, type: !149)
!5592 = !DILocation(line: 4889, column: 10, scope: !5575)
!5593 = !DILocation(line: 4889, column: 56, scope: !5575)
!5594 = !DILocation(line: 4889, column: 24, scope: !5575)
!5595 = !DILocalVariable(name: "max_name_length", scope: !5575, file: !3, line: 4890, type: !149)
!5596 = !DILocation(line: 4890, column: 10, scope: !5575)
!5597 = !DILocation(line: 4890, column: 28, scope: !5575)
!5598 = !DILocation(line: 4890, column: 38, scope: !5575)
!5599 = !DILocation(line: 4893, column: 31, scope: !5575)
!5600 = !DILocation(line: 4893, column: 3, scope: !5575)
!5601 = !DILocation(line: 4896, column: 16, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 4896, column: 3)
!5603 = !DILocation(line: 4896, column: 8, scope: !5602)
!5604 = !DILocation(line: 4896, column: 21, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5602, file: !3, line: 4896, column: 3)
!5606 = !DILocation(line: 4896, column: 31, scope: !5605)
!5607 = !DILocation(line: 4896, column: 29, scope: !5605)
!5608 = !DILocation(line: 4896, column: 3, scope: !5602)
!5609 = !DILocalVariable(name: "col", scope: !5610, file: !3, line: 4898, type: !149)
!5610 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 4897, column: 5)
!5611 = !DILocation(line: 4898, column: 14, scope: !5610)
!5612 = !DILocation(line: 4898, column: 20, scope: !5610)
!5613 = !DILocation(line: 4898, column: 30, scope: !5610)
!5614 = !DILocation(line: 4898, column: 28, scope: !5610)
!5615 = !DILocation(line: 4900, column: 11, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 4900, column: 11)
!5617 = !DILocation(line: 4900, column: 15, scope: !5616)
!5618 = !DILocation(line: 4900, column: 11, scope: !5610)
!5619 = !DILocation(line: 4902, column: 11, scope: !5620)
!5620 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 4901, column: 9)
!5621 = !DILocation(line: 4903, column: 15, scope: !5620)
!5622 = !DILocation(line: 4904, column: 9, scope: !5620)
!5623 = !DILocation(line: 4907, column: 19, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 4906, column: 9)
!5625 = !DILocation(line: 4907, column: 25, scope: !5624)
!5626 = !DILocation(line: 4907, column: 23, scope: !5624)
!5627 = !DILocation(line: 4907, column: 38, scope: !5624)
!5628 = !DILocation(line: 4907, column: 44, scope: !5624)
!5629 = !DILocation(line: 4907, column: 42, scope: !5624)
!5630 = !DILocation(line: 4907, column: 11, scope: !5624)
!5631 = !DILocation(line: 4908, column: 18, scope: !5624)
!5632 = !DILocation(line: 4908, column: 15, scope: !5624)
!5633 = !DILocation(line: 4911, column: 11, scope: !5610)
!5634 = !DILocation(line: 4911, column: 23, scope: !5610)
!5635 = !DILocation(line: 4911, column: 9, scope: !5610)
!5636 = !DILocation(line: 4912, column: 35, scope: !5610)
!5637 = !DILocation(line: 4912, column: 38, scope: !5610)
!5638 = !DILocation(line: 4912, column: 7, scope: !5610)
!5639 = !DILocation(line: 4914, column: 53, scope: !5610)
!5640 = !DILocation(line: 4914, column: 21, scope: !5610)
!5641 = !DILocation(line: 4914, column: 19, scope: !5610)
!5642 = !DILocation(line: 4915, column: 25, scope: !5610)
!5643 = !DILocation(line: 4915, column: 35, scope: !5610)
!5644 = !DILocation(line: 4915, column: 43, scope: !5610)
!5645 = !DILocation(line: 4915, column: 23, scope: !5610)
!5646 = !DILocation(line: 4916, column: 5, scope: !5610)
!5647 = !DILocation(line: 4896, column: 43, scope: !5605)
!5648 = !DILocation(line: 4896, column: 3, scope: !5605)
!5649 = distinct !{!5649, !5608, !5650}
!5650 = !DILocation(line: 4916, column: 5, scope: !5602)
!5651 = !DILocation(line: 4917, column: 3, scope: !5575)
!5652 = !DILocation(line: 4918, column: 1, scope: !5575)
!5653 = distinct !DISubprogram(name: "set_normal_color", scope: !3, file: !3, line: 1273, type: !532, scopeLine: 1274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5654 = !DILocation(line: 1275, column: 7, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5653, file: !3, line: 1275, column: 7)
!5656 = !DILocation(line: 1275, column: 24, scope: !5655)
!5657 = !DILocation(line: 1275, column: 27, scope: !5655)
!5658 = !DILocation(line: 1275, column: 7, scope: !5653)
!5659 = !DILocation(line: 1277, column: 7, scope: !5660)
!5660 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 1276, column: 5)
!5661 = !DILocation(line: 1278, column: 7, scope: !5660)
!5662 = !DILocation(line: 1279, column: 7, scope: !5660)
!5663 = !DILocation(line: 1280, column: 5, scope: !5660)
!5664 = !DILocation(line: 1281, column: 1, scope: !5653)
!5665 = distinct !DISubprogram(name: "print_long_format", scope: !3, file: !3, line: 4020, type: !5666, scopeLine: 4021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!5666 = !DISubroutineType(types: !5667)
!5667 = !{null, !183}
!5668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !5669, line: 7, size: 448, elements: !5670)
!5669 = !DIFile(filename: "/usr/include/bits/types/struct_tm.h", directory: "")
!5670 = !{!5671, !5672, !5673, !5674, !5675, !5676, !5677, !5678, !5679, !5680, !5681}
!5671 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !5668, file: !5669, line: 9, baseType: !27, size: 32)
!5672 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !5668, file: !5669, line: 10, baseType: !27, size: 32, offset: 32)
!5673 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !5668, file: !5669, line: 11, baseType: !27, size: 32, offset: 64)
!5674 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !5668, file: !5669, line: 12, baseType: !27, size: 32, offset: 96)
!5675 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !5668, file: !5669, line: 13, baseType: !27, size: 32, offset: 128)
!5676 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !5668, file: !5669, line: 14, baseType: !27, size: 32, offset: 160)
!5677 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !5668, file: !5669, line: 15, baseType: !27, size: 32, offset: 192)
!5678 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !5668, file: !5669, line: 16, baseType: !27, size: 32, offset: 224)
!5679 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !5668, file: !5669, line: 17, baseType: !27, size: 32, offset: 256)
!5680 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !5668, file: !5669, line: 20, baseType: !166, size: 64, offset: 320)
!5681 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !5668, file: !5669, line: 21, baseType: !146, size: 64, offset: 384)
!5682 = !DILocalVariable(name: "f", arg: 1, scope: !5665, file: !3, line: 4020, type: !183)
!5683 = !DILocation(line: 4020, column: 43, scope: !5665)
!5684 = !DILocalVariable(name: "modebuf", scope: !5665, file: !3, line: 4022, type: !666)
!5685 = !DILocation(line: 4022, column: 8, scope: !5665)
!5686 = !DILocalVariable(name: "buf", scope: !5665, file: !3, line: 4023, type: !822)
!5687 = !DILocation(line: 4023, column: 8, scope: !5665)
!5688 = !DILocalVariable(name: "s", scope: !5665, file: !3, line: 4032, type: !149)
!5689 = !DILocation(line: 4032, column: 10, scope: !5665)
!5690 = !DILocalVariable(name: "p", scope: !5665, file: !3, line: 4033, type: !143)
!5691 = !DILocation(line: 4033, column: 9, scope: !5665)
!5692 = !DILocalVariable(name: "when_timespec", scope: !5665, file: !3, line: 4034, type: !214)
!5693 = !DILocation(line: 4034, column: 19, scope: !5665)
!5694 = !DILocalVariable(name: "when_local", scope: !5665, file: !3, line: 4035, type: !5668)
!5695 = !DILocation(line: 4035, column: 13, scope: !5665)
!5696 = !DILocation(line: 4039, column: 7, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4039, column: 7)
!5698 = !DILocation(line: 4039, column: 10, scope: !5697)
!5699 = !DILocation(line: 4039, column: 7, scope: !5665)
!5700 = !DILocation(line: 4040, column: 22, scope: !5697)
!5701 = !DILocation(line: 4040, column: 25, scope: !5697)
!5702 = !DILocation(line: 4040, column: 31, scope: !5697)
!5703 = !DILocation(line: 4040, column: 5, scope: !5697)
!5704 = !DILocation(line: 4043, column: 36, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 4042, column: 5)
!5706 = !DILocation(line: 4043, column: 39, scope: !5705)
!5707 = !DILocation(line: 4043, column: 20, scope: !5705)
!5708 = !DILocation(line: 4043, column: 7, scope: !5705)
!5709 = !DILocation(line: 4043, column: 18, scope: !5705)
!5710 = !DILocation(line: 4044, column: 15, scope: !5705)
!5711 = !DILocation(line: 4044, column: 23, scope: !5705)
!5712 = !DILocation(line: 4044, column: 7, scope: !5705)
!5713 = !DILocation(line: 4045, column: 7, scope: !5705)
!5714 = !DILocation(line: 4045, column: 19, scope: !5705)
!5715 = !DILocation(line: 4047, column: 9, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4047, column: 7)
!5717 = !DILocation(line: 4047, column: 7, scope: !5665)
!5718 = !DILocation(line: 4048, column: 5, scope: !5716)
!5719 = !DILocation(line: 4048, column: 17, scope: !5716)
!5720 = !DILocation(line: 4049, column: 12, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5716, file: !3, line: 4049, column: 12)
!5722 = !DILocation(line: 4049, column: 15, scope: !5721)
!5723 = !DILocation(line: 4049, column: 24, scope: !5721)
!5724 = !DILocation(line: 4049, column: 12, scope: !5716)
!5725 = !DILocation(line: 4050, column: 5, scope: !5721)
!5726 = !DILocation(line: 4050, column: 17, scope: !5721)
!5727 = !DILocation(line: 4051, column: 12, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5721, file: !3, line: 4051, column: 12)
!5729 = !DILocation(line: 4051, column: 15, scope: !5728)
!5730 = !DILocation(line: 4051, column: 24, scope: !5728)
!5731 = !DILocation(line: 4051, column: 12, scope: !5721)
!5732 = !DILocation(line: 4052, column: 5, scope: !5728)
!5733 = !DILocation(line: 4052, column: 17, scope: !5728)
!5734 = !DILocation(line: 4054, column: 11, scope: !5665)
!5735 = !DILocation(line: 4054, column: 3, scope: !5665)
!5736 = !DILocation(line: 4057, column: 40, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4055, column: 5)
!5738 = !DILocation(line: 4057, column: 43, scope: !5737)
!5739 = !DILocation(line: 4057, column: 23, scope: !5737)
!5740 = !DILocation(line: 4058, column: 7, scope: !5737)
!5741 = !DILocation(line: 4060, column: 40, scope: !5737)
!5742 = !DILocation(line: 4060, column: 43, scope: !5737)
!5743 = !DILocation(line: 4060, column: 23, scope: !5737)
!5744 = !DILocation(line: 4061, column: 7, scope: !5737)
!5745 = !DILocation(line: 4063, column: 40, scope: !5737)
!5746 = !DILocation(line: 4063, column: 43, scope: !5737)
!5747 = !DILocation(line: 4063, column: 23, scope: !5737)
!5748 = !DILocation(line: 4064, column: 7, scope: !5737)
!5749 = !DILocation(line: 4066, column: 7, scope: !5737)
!5750 = !DILocation(line: 4069, column: 7, scope: !5665)
!5751 = !DILocation(line: 4069, column: 5, scope: !5665)
!5752 = !DILocation(line: 4071, column: 7, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4071, column: 7)
!5754 = !DILocation(line: 4071, column: 7, scope: !5665)
!5755 = !DILocalVariable(name: "hbuf", scope: !5756, file: !3, line: 4073, type: !743)
!5756 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 4072, column: 5)
!5757 = !DILocation(line: 4073, column: 12, scope: !5756)
!5758 = !DILocation(line: 4074, column: 16, scope: !5756)
!5759 = !DILocation(line: 4074, column: 27, scope: !5756)
!5760 = !DILocation(line: 4075, column: 30, scope: !5756)
!5761 = !DILocation(line: 4075, column: 49, scope: !5756)
!5762 = !DILocation(line: 4075, column: 16, scope: !5756)
!5763 = !DILocation(line: 4074, column: 7, scope: !5756)
!5764 = !DILocation(line: 4078, column: 20, scope: !5756)
!5765 = !DILocation(line: 4078, column: 12, scope: !5756)
!5766 = !DILocation(line: 4078, column: 9, scope: !5756)
!5767 = !DILocation(line: 4079, column: 5, scope: !5756)
!5768 = !DILocation(line: 4081, column: 7, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4081, column: 7)
!5770 = !DILocation(line: 4081, column: 7, scope: !5665)
!5771 = !DILocalVariable(name: "hbuf", scope: !5772, file: !3, line: 4083, type: !746)
!5772 = distinct !DILexicalBlock(scope: !5769, file: !3, line: 4082, column: 5)
!5773 = !DILocation(line: 4083, column: 12, scope: !5772)
!5774 = !DILocalVariable(name: "blocks", scope: !5772, file: !3, line: 4084, type: !146)
!5775 = !DILocation(line: 4084, column: 19, scope: !5772)
!5776 = !DILocation(line: 4085, column: 12, scope: !5772)
!5777 = !DILocation(line: 4085, column: 15, scope: !5772)
!5778 = !DILocation(line: 4085, column: 10, scope: !5772)
!5779 = !DILocation(line: 4087, column: 28, scope: !5772)
!5780 = !DILocation(line: 4087, column: 50, scope: !5772)
!5781 = !DILocation(line: 4087, column: 56, scope: !5772)
!5782 = !DILocation(line: 4088, column: 43, scope: !5772)
!5783 = !DILocation(line: 4087, column: 12, scope: !5772)
!5784 = !DILocalVariable(name: "pad", scope: !5772, file: !3, line: 4089, type: !27)
!5785 = !DILocation(line: 4089, column: 11, scope: !5772)
!5786 = !DILocation(line: 4090, column: 18, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5772, file: !3, line: 4090, column: 7)
!5788 = !DILocation(line: 4090, column: 47, scope: !5787)
!5789 = !DILocation(line: 4090, column: 37, scope: !5787)
!5790 = !DILocation(line: 4090, column: 35, scope: !5787)
!5791 = !DILocation(line: 4090, column: 16, scope: !5787)
!5792 = !DILocation(line: 4090, column: 12, scope: !5787)
!5793 = !DILocation(line: 4090, column: 63, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 4090, column: 7)
!5795 = !DILocation(line: 4090, column: 61, scope: !5794)
!5796 = !DILocation(line: 4090, column: 7, scope: !5787)
!5797 = !DILocation(line: 4091, column: 11, scope: !5794)
!5798 = !DILocation(line: 4091, column: 14, scope: !5794)
!5799 = !DILocation(line: 4091, column: 9, scope: !5794)
!5800 = !DILocation(line: 4090, column: 71, scope: !5794)
!5801 = !DILocation(line: 4090, column: 7, scope: !5794)
!5802 = distinct !{!5802, !5796, !5803}
!5803 = !DILocation(line: 4091, column: 16, scope: !5787)
!5804 = !DILocation(line: 4092, column: 7, scope: !5772)
!5805 = !DILocation(line: 4092, column: 29, scope: !5772)
!5806 = !DILocation(line: 4092, column: 22, scope: !5772)
!5807 = !DILocation(line: 4092, column: 17, scope: !5772)
!5808 = !DILocation(line: 4092, column: 20, scope: !5772)
!5809 = !DILocation(line: 4093, column: 9, scope: !5772)
!5810 = distinct !{!5810, !5804, !5809}
!5811 = !DILocation(line: 4094, column: 7, scope: !5772)
!5812 = !DILocation(line: 4094, column: 13, scope: !5772)
!5813 = !DILocation(line: 4095, column: 5, scope: !5772)
!5814 = !DILocalVariable(name: "hbuf", scope: !5815, file: !3, line: 4100, type: !743)
!5815 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4099, column: 3)
!5816 = !DILocation(line: 4100, column: 10, scope: !5815)
!5817 = !DILocation(line: 4101, column: 14, scope: !5815)
!5818 = !DILocation(line: 4101, column: 28, scope: !5815)
!5819 = !DILocation(line: 4101, column: 37, scope: !5815)
!5820 = !DILocation(line: 4102, column: 16, scope: !5815)
!5821 = !DILocation(line: 4102, column: 19, scope: !5815)
!5822 = !DILocation(line: 4102, column: 14, scope: !5815)
!5823 = !DILocation(line: 4102, column: 46, scope: !5815)
!5824 = !DILocation(line: 4102, column: 49, scope: !5815)
!5825 = !DILocation(line: 4102, column: 54, scope: !5815)
!5826 = !DILocation(line: 4102, column: 64, scope: !5815)
!5827 = !DILocation(line: 4102, column: 35, scope: !5815)
!5828 = !DILocation(line: 4101, column: 5, scope: !5815)
!5829 = !DILocation(line: 4107, column: 16, scope: !5665)
!5830 = !DILocation(line: 4107, column: 8, scope: !5665)
!5831 = !DILocation(line: 4107, column: 5, scope: !5665)
!5832 = !DILocation(line: 4109, column: 3, scope: !5665)
!5833 = !DILocation(line: 4109, column: 3, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5835, file: !3, line: 4109, column: 3)
!5835 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4109, column: 3)
!5836 = !DILocation(line: 4109, column: 3, scope: !5835)
!5837 = !DILocation(line: 4109, column: 3, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 4109, column: 3)
!5839 = !DILocation(line: 4111, column: 7, scope: !5840)
!5840 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4111, column: 7)
!5841 = !DILocation(line: 4111, column: 19, scope: !5840)
!5842 = !DILocation(line: 4111, column: 22, scope: !5840)
!5843 = !DILocation(line: 4111, column: 34, scope: !5840)
!5844 = !DILocation(line: 4111, column: 37, scope: !5840)
!5845 = !DILocation(line: 4111, column: 50, scope: !5840)
!5846 = !DILocation(line: 4111, column: 53, scope: !5840)
!5847 = !DILocation(line: 4111, column: 7, scope: !5665)
!5848 = !DILocation(line: 4113, column: 7, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 4112, column: 5)
!5850 = !DILocation(line: 4113, column: 7, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 4113, column: 7)
!5852 = !DILocation(line: 4115, column: 11, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 4115, column: 11)
!5854 = !DILocation(line: 4115, column: 11, scope: !5849)
!5855 = !DILocation(line: 4116, column: 22, scope: !5853)
!5856 = !DILocation(line: 4116, column: 25, scope: !5853)
!5857 = !DILocation(line: 4116, column: 30, scope: !5853)
!5858 = !DILocation(line: 4116, column: 38, scope: !5853)
!5859 = !DILocation(line: 4116, column: 51, scope: !5853)
!5860 = !DILocation(line: 4116, column: 54, scope: !5853)
!5861 = !DILocation(line: 4116, column: 9, scope: !5853)
!5862 = !DILocation(line: 4118, column: 11, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 4118, column: 11)
!5864 = !DILocation(line: 4118, column: 11, scope: !5849)
!5865 = !DILocation(line: 4119, column: 23, scope: !5863)
!5866 = !DILocation(line: 4119, column: 26, scope: !5863)
!5867 = !DILocation(line: 4119, column: 31, scope: !5863)
!5868 = !DILocation(line: 4119, column: 39, scope: !5863)
!5869 = !DILocation(line: 4119, column: 52, scope: !5863)
!5870 = !DILocation(line: 4119, column: 55, scope: !5863)
!5871 = !DILocation(line: 4119, column: 9, scope: !5863)
!5872 = !DILocation(line: 4121, column: 11, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 4121, column: 11)
!5874 = !DILocation(line: 4121, column: 11, scope: !5849)
!5875 = !DILocation(line: 4122, column: 22, scope: !5873)
!5876 = !DILocation(line: 4122, column: 25, scope: !5873)
!5877 = !DILocation(line: 4122, column: 30, scope: !5873)
!5878 = !DILocation(line: 4122, column: 41, scope: !5873)
!5879 = !DILocation(line: 4122, column: 55, scope: !5873)
!5880 = !DILocation(line: 4122, column: 58, scope: !5873)
!5881 = !DILocation(line: 4122, column: 9, scope: !5873)
!5882 = !DILocation(line: 4124, column: 11, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 4124, column: 11)
!5884 = !DILocation(line: 4124, column: 11, scope: !5849)
!5885 = !DILocation(line: 4125, column: 31, scope: !5883)
!5886 = !DILocation(line: 4125, column: 34, scope: !5883)
!5887 = !DILocation(line: 4125, column: 47, scope: !5883)
!5888 = !DILocation(line: 4125, column: 9, scope: !5883)
!5889 = !DILocation(line: 4127, column: 11, scope: !5849)
!5890 = !DILocation(line: 4127, column: 9, scope: !5849)
!5891 = !DILocation(line: 4128, column: 5, scope: !5849)
!5892 = !DILocation(line: 4130, column: 7, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4130, column: 7)
!5894 = !DILocation(line: 4130, column: 10, scope: !5893)
!5895 = !DILocation(line: 4131, column: 7, scope: !5893)
!5896 = !DILocation(line: 4131, column: 11, scope: !5893)
!5897 = !DILocation(line: 4131, column: 37, scope: !5893)
!5898 = !DILocation(line: 4131, column: 40, scope: !5893)
!5899 = !DILocation(line: 4130, column: 7, scope: !5665)
!5900 = !DILocalVariable(name: "majorbuf", scope: !5901, file: !3, line: 4133, type: !743)
!5901 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 4132, column: 5)
!5902 = !DILocation(line: 4133, column: 12, scope: !5901)
!5903 = !DILocalVariable(name: "minorbuf", scope: !5901, file: !3, line: 4134, type: !743)
!5904 = !DILocation(line: 4134, column: 12, scope: !5901)
!5905 = !DILocalVariable(name: "blanks_width", scope: !5901, file: !3, line: 4135, type: !27)
!5906 = !DILocation(line: 4135, column: 11, scope: !5901)
!5907 = !DILocation(line: 4135, column: 27, scope: !5901)
!5908 = !DILocation(line: 4136, column: 30, scope: !5901)
!5909 = !DILocation(line: 4136, column: 56, scope: !5901)
!5910 = !DILocation(line: 4137, column: 32, scope: !5901)
!5911 = !DILocation(line: 4137, column: 30, scope: !5901)
!5912 = !DILocation(line: 4136, column: 27, scope: !5901)
!5913 = !DILocation(line: 4138, column: 16, scope: !5901)
!5914 = !DILocation(line: 4139, column: 16, scope: !5901)
!5915 = !DILocation(line: 4139, column: 44, scope: !5901)
!5916 = !DILocation(line: 4139, column: 42, scope: !5901)
!5917 = !DILocation(line: 4140, column: 27, scope: !5901)
!5918 = !DILocation(line: 4140, column: 52, scope: !5901)
!5919 = !DILocation(line: 4140, column: 16, scope: !5901)
!5920 = !DILocation(line: 4141, column: 16, scope: !5901)
!5921 = !DILocation(line: 4142, column: 27, scope: !5901)
!5922 = !DILocation(line: 4142, column: 52, scope: !5901)
!5923 = !DILocation(line: 4142, column: 16, scope: !5901)
!5924 = !DILocation(line: 4138, column: 7, scope: !5901)
!5925 = !DILocation(line: 4143, column: 12, scope: !5901)
!5926 = !DILocation(line: 4143, column: 28, scope: !5901)
!5927 = !DILocation(line: 4143, column: 9, scope: !5901)
!5928 = !DILocation(line: 4144, column: 5, scope: !5901)
!5929 = !DILocalVariable(name: "hbuf", scope: !5930, file: !3, line: 4147, type: !746)
!5930 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 4146, column: 5)
!5931 = !DILocation(line: 4147, column: 12, scope: !5930)
!5932 = !DILocalVariable(name: "size", scope: !5930, file: !3, line: 4148, type: !146)
!5933 = !DILocation(line: 4148, column: 19, scope: !5930)
!5934 = !DILocation(line: 4149, column: 12, scope: !5930)
!5935 = !DILocation(line: 4149, column: 15, scope: !5930)
!5936 = !DILocation(line: 4149, column: 10, scope: !5930)
!5937 = !DILocation(line: 4151, column: 48, scope: !5930)
!5938 = !DILocation(line: 4151, column: 51, scope: !5930)
!5939 = !DILocation(line: 4151, column: 56, scope: !5930)
!5940 = !DILocation(line: 4151, column: 28, scope: !5930)
!5941 = !DILocation(line: 4152, column: 28, scope: !5930)
!5942 = !DILocation(line: 4152, column: 34, scope: !5930)
!5943 = !DILocation(line: 4153, column: 28, scope: !5930)
!5944 = !DILocation(line: 4151, column: 12, scope: !5930)
!5945 = !DILocalVariable(name: "pad", scope: !5930, file: !3, line: 4154, type: !27)
!5946 = !DILocation(line: 4154, column: 11, scope: !5930)
!5947 = !DILocation(line: 4155, column: 18, scope: !5948)
!5948 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 4155, column: 7)
!5949 = !DILocation(line: 4155, column: 46, scope: !5948)
!5950 = !DILocation(line: 4155, column: 36, scope: !5948)
!5951 = !DILocation(line: 4155, column: 34, scope: !5948)
!5952 = !DILocation(line: 4155, column: 16, scope: !5948)
!5953 = !DILocation(line: 4155, column: 12, scope: !5948)
!5954 = !DILocation(line: 4155, column: 60, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5948, file: !3, line: 4155, column: 7)
!5956 = !DILocation(line: 4155, column: 58, scope: !5955)
!5957 = !DILocation(line: 4155, column: 7, scope: !5948)
!5958 = !DILocation(line: 4156, column: 11, scope: !5955)
!5959 = !DILocation(line: 4156, column: 14, scope: !5955)
!5960 = !DILocation(line: 4156, column: 9, scope: !5955)
!5961 = !DILocation(line: 4155, column: 68, scope: !5955)
!5962 = !DILocation(line: 4155, column: 7, scope: !5955)
!5963 = distinct !{!5963, !5957, !5964}
!5964 = !DILocation(line: 4156, column: 16, scope: !5948)
!5965 = !DILocation(line: 4157, column: 7, scope: !5930)
!5966 = !DILocation(line: 4157, column: 27, scope: !5930)
!5967 = !DILocation(line: 4157, column: 22, scope: !5930)
!5968 = !DILocation(line: 4157, column: 17, scope: !5930)
!5969 = !DILocation(line: 4157, column: 20, scope: !5930)
!5970 = !DILocation(line: 4158, column: 9, scope: !5930)
!5971 = distinct !{!5971, !5965, !5970}
!5972 = !DILocation(line: 4159, column: 7, scope: !5930)
!5973 = !DILocation(line: 4159, column: 13, scope: !5930)
!5974 = !DILocation(line: 4162, column: 5, scope: !5665)
!5975 = !DILocation(line: 4163, column: 4, scope: !5665)
!5976 = !DILocation(line: 4163, column: 6, scope: !5665)
!5977 = !DILocation(line: 4165, column: 7, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4165, column: 7)
!5979 = !DILocation(line: 4165, column: 10, scope: !5978)
!5980 = !DILocation(line: 4165, column: 18, scope: !5978)
!5981 = !DILocation(line: 4165, column: 35, scope: !5978)
!5982 = !DILocation(line: 4165, column: 59, scope: !5978)
!5983 = !DILocation(line: 4165, column: 21, scope: !5978)
!5984 = !DILocation(line: 4165, column: 7, scope: !5665)
!5985 = !DILocalVariable(name: "six_months_ago", scope: !5986, file: !3, line: 4167, type: !214)
!5986 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 4166, column: 5)
!5987 = !DILocation(line: 4167, column: 23, scope: !5986)
!5988 = !DILocalVariable(name: "recent", scope: !5986, file: !3, line: 4168, type: !141)
!5989 = !DILocation(line: 4168, column: 12, scope: !5986)
!5990 = !DILocation(line: 4173, column: 11, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 4173, column: 11)
!5992 = !DILocation(line: 4173, column: 54, scope: !5991)
!5993 = !DILocation(line: 4173, column: 11, scope: !5986)
!5994 = !DILocation(line: 4174, column: 9, scope: !5991)
!5995 = !DILocation(line: 4180, column: 44, scope: !5986)
!5996 = !DILocation(line: 4180, column: 51, scope: !5986)
!5997 = !DILocation(line: 4180, column: 22, scope: !5986)
!5998 = !DILocation(line: 4180, column: 29, scope: !5986)
!5999 = !DILocation(line: 4181, column: 45, scope: !5986)
!6000 = !DILocation(line: 4181, column: 22, scope: !5986)
!6001 = !DILocation(line: 4181, column: 30, scope: !5986)
!6002 = !DILocation(line: 4183, column: 17, scope: !5986)
!6003 = !DILocation(line: 4183, column: 62, scope: !5986)
!6004 = !DILocation(line: 4184, column: 17, scope: !5986)
!6005 = !DILocation(line: 4184, column: 21, scope: !5986)
!6006 = !DILocation(line: 4184, column: 64, scope: !5986)
!6007 = !DILocation(line: 0, scope: !5986)
!6008 = !DILocation(line: 4183, column: 14, scope: !5986)
!6009 = !DILocation(line: 4188, column: 28, scope: !5986)
!6010 = !DILocation(line: 4188, column: 59, scope: !5986)
!6011 = !DILocation(line: 4189, column: 41, scope: !5986)
!6012 = !DILocation(line: 4189, column: 64, scope: !5986)
!6013 = !DILocation(line: 4189, column: 50, scope: !5986)
!6014 = !DILocation(line: 4188, column: 11, scope: !5986)
!6015 = !DILocation(line: 4188, column: 9, scope: !5986)
!6016 = !DILocation(line: 4190, column: 5, scope: !5986)
!6017 = !DILocation(line: 4192, column: 7, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4192, column: 7)
!6019 = !DILocation(line: 4192, column: 9, scope: !6018)
!6020 = !DILocation(line: 4192, column: 14, scope: !6018)
!6021 = !DILocation(line: 4192, column: 13, scope: !6018)
!6022 = !DILocation(line: 4192, column: 7, scope: !5665)
!6023 = !DILocation(line: 4194, column: 12, scope: !6024)
!6024 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 4193, column: 5)
!6025 = !DILocation(line: 4194, column: 9, scope: !6024)
!6026 = !DILocation(line: 4195, column: 9, scope: !6024)
!6027 = !DILocation(line: 4195, column: 12, scope: !6024)
!6028 = !DILocation(line: 4198, column: 8, scope: !6024)
!6029 = !DILocation(line: 4198, column: 10, scope: !6024)
!6030 = !DILocation(line: 4199, column: 5, scope: !6024)
!6031 = !DILocalVariable(name: "hbuf", scope: !6032, file: !3, line: 4204, type: !743)
!6032 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 4201, column: 5)
!6033 = !DILocation(line: 4204, column: 12, scope: !6032)
!6034 = !DILocation(line: 4205, column: 16, scope: !6032)
!6035 = !DILocation(line: 4205, column: 27, scope: !6032)
!6036 = !DILocation(line: 4206, column: 19, scope: !6032)
!6037 = !DILocation(line: 4206, column: 22, scope: !6032)
!6038 = !DILocation(line: 4206, column: 17, scope: !6032)
!6039 = !DILocation(line: 4208, column: 44, scope: !6032)
!6040 = !DILocation(line: 4208, column: 52, scope: !6032)
!6041 = !DILocation(line: 4208, column: 19, scope: !6032)
!6042 = !DILocation(line: 4205, column: 7, scope: !6032)
!6043 = !DILocation(line: 4210, column: 20, scope: !6032)
!6044 = !DILocation(line: 4210, column: 12, scope: !6032)
!6045 = !DILocation(line: 4210, column: 9, scope: !6032)
!6046 = !DILocation(line: 4213, column: 3, scope: !5665)
!6047 = !DILocation(line: 4213, column: 3, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4213, column: 3)
!6049 = !DILocalVariable(name: "w", scope: !5665, file: !3, line: 4214, type: !149)
!6050 = !DILocation(line: 4214, column: 10, scope: !5665)
!6051 = !DILocation(line: 4214, column: 39, scope: !5665)
!6052 = !DILocation(line: 4214, column: 65, scope: !5665)
!6053 = !DILocation(line: 4214, column: 69, scope: !5665)
!6054 = !DILocation(line: 4214, column: 67, scope: !5665)
!6055 = !DILocation(line: 4214, column: 14, scope: !5665)
!6056 = !DILocation(line: 4216, column: 7, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4216, column: 7)
!6058 = !DILocation(line: 4216, column: 10, scope: !6057)
!6059 = !DILocation(line: 4216, column: 19, scope: !6057)
!6060 = !DILocation(line: 4216, column: 7, scope: !5665)
!6061 = !DILocation(line: 4218, column: 11, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6063, file: !3, line: 4218, column: 11)
!6063 = distinct !DILexicalBlock(scope: !6057, file: !3, line: 4217, column: 5)
!6064 = !DILocation(line: 4218, column: 14, scope: !6062)
!6065 = !DILocation(line: 4218, column: 11, scope: !6063)
!6066 = !DILocation(line: 4220, column: 11, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 4219, column: 9)
!6068 = !DILocation(line: 4220, column: 11, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 4220, column: 11)
!6070 = !DILocation(line: 4221, column: 36, scope: !6067)
!6071 = !DILocation(line: 4221, column: 52, scope: !6067)
!6072 = !DILocation(line: 4221, column: 56, scope: !6067)
!6073 = !DILocation(line: 4221, column: 54, scope: !6067)
!6074 = !DILocation(line: 4221, column: 63, scope: !6067)
!6075 = !DILocation(line: 4221, column: 61, scope: !6067)
!6076 = !DILocation(line: 4221, column: 65, scope: !6067)
!6077 = !DILocation(line: 4221, column: 11, scope: !6067)
!6078 = !DILocation(line: 4222, column: 15, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 4222, column: 15)
!6080 = !DILocation(line: 4222, column: 31, scope: !6079)
!6081 = !DILocation(line: 4222, column: 15, scope: !6067)
!6082 = !DILocation(line: 4223, column: 41, scope: !6079)
!6083 = !DILocation(line: 4223, column: 44, scope: !6079)
!6084 = !DILocation(line: 4223, column: 13, scope: !6079)
!6085 = !DILocation(line: 4224, column: 9, scope: !6067)
!6086 = !DILocation(line: 4225, column: 5, scope: !6063)
!6087 = !DILocation(line: 4226, column: 12, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6057, file: !3, line: 4226, column: 12)
!6089 = !DILocation(line: 4226, column: 28, scope: !6088)
!6090 = !DILocation(line: 4226, column: 12, scope: !6057)
!6091 = !DILocation(line: 4227, column: 27, scope: !6088)
!6092 = !DILocation(line: 4227, column: 30, scope: !6088)
!6093 = !DILocation(line: 4227, column: 39, scope: !6088)
!6094 = !DILocation(line: 4227, column: 42, scope: !6088)
!6095 = !DILocation(line: 4227, column: 47, scope: !6088)
!6096 = !DILocation(line: 4227, column: 56, scope: !6088)
!6097 = !DILocation(line: 4227, column: 59, scope: !6088)
!6098 = !DILocation(line: 4227, column: 5, scope: !6088)
!6099 = !DILocation(line: 4228, column: 1, scope: !5665)
!6100 = distinct !DISubprogram(name: "format_inode", scope: !3, file: !3, line: 4010, type: !6101, scopeLine: 4011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6101 = !DISubroutineType(types: !6102)
!6102 = !{!143, !143, !149, !183}
!6103 = !DILocalVariable(name: "buf", arg: 1, scope: !6100, file: !3, line: 4010, type: !143)
!6104 = !DILocation(line: 4010, column: 21, scope: !6100)
!6105 = !DILocalVariable(name: "buflen", arg: 2, scope: !6100, file: !3, line: 4010, type: !149)
!6106 = !DILocation(line: 4010, column: 33, scope: !6100)
!6107 = !DILocalVariable(name: "f", arg: 3, scope: !6100, file: !3, line: 4010, type: !183)
!6108 = !DILocation(line: 4010, column: 64, scope: !6100)
!6109 = !DILocation(line: 4012, column: 3, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6111, file: !3, line: 4012, column: 3)
!6111 = distinct !DILexicalBlock(scope: !6100, file: !3, line: 4012, column: 3)
!6112 = !DILocation(line: 4012, column: 3, scope: !6111)
!6113 = !DILocation(line: 4013, column: 11, scope: !6100)
!6114 = !DILocation(line: 4013, column: 14, scope: !6100)
!6115 = !DILocation(line: 4013, column: 22, scope: !6100)
!6116 = !DILocation(line: 4013, column: 25, scope: !6100)
!6117 = !DILocation(line: 4013, column: 28, scope: !6100)
!6118 = !DILocation(line: 4013, column: 33, scope: !6100)
!6119 = !DILocation(line: 4013, column: 40, scope: !6100)
!6120 = !DILocation(line: 4014, column: 24, scope: !6100)
!6121 = !DILocation(line: 4014, column: 27, scope: !6100)
!6122 = !DILocation(line: 4014, column: 32, scope: !6100)
!6123 = !DILocation(line: 4014, column: 40, scope: !6100)
!6124 = !DILocation(line: 4014, column: 13, scope: !6100)
!6125 = !DILocation(line: 4013, column: 3, scope: !6100)
!6126 = distinct !DISubprogram(name: "format_user", scope: !3, file: !3, line: 3957, type: !6127, scopeLine: 3958, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6127 = !DISubroutineType(types: !6128)
!6128 = !{null, !1298, !27, !141}
!6129 = !DILocalVariable(name: "u", arg: 1, scope: !6126, file: !3, line: 3957, type: !1298)
!6130 = !DILocation(line: 3957, column: 20, scope: !6126)
!6131 = !DILocalVariable(name: "width", arg: 2, scope: !6126, file: !3, line: 3957, type: !27)
!6132 = !DILocation(line: 3957, column: 27, scope: !6126)
!6133 = !DILocalVariable(name: "stat_ok", arg: 3, scope: !6126, file: !3, line: 3957, type: !141)
!6134 = !DILocation(line: 3957, column: 39, scope: !6126)
!6135 = !DILocation(line: 3959, column: 27, scope: !6126)
!6136 = !DILocation(line: 3959, column: 25, scope: !6126)
!6137 = !DILocation(line: 3960, column: 26, scope: !6126)
!6138 = !DILocation(line: 3960, column: 56, scope: !6126)
!6139 = !DILocation(line: 3960, column: 47, scope: !6126)
!6140 = !DILocation(line: 3960, column: 61, scope: !6126)
!6141 = !DILocation(line: 3960, column: 64, scope: !6126)
!6142 = !DILocation(line: 3959, column: 3, scope: !6126)
!6143 = !DILocation(line: 3961, column: 1, scope: !6126)
!6144 = distinct !DISubprogram(name: "format_group", scope: !3, file: !3, line: 3966, type: !6145, scopeLine: 3967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6145 = !DISubroutineType(types: !6146)
!6146 = !{null, !1300, !27, !141}
!6147 = !DILocalVariable(name: "g", arg: 1, scope: !6144, file: !3, line: 3966, type: !1300)
!6148 = !DILocation(line: 3966, column: 21, scope: !6144)
!6149 = !DILocalVariable(name: "width", arg: 2, scope: !6144, file: !3, line: 3966, type: !27)
!6150 = !DILocation(line: 3966, column: 28, scope: !6144)
!6151 = !DILocalVariable(name: "stat_ok", arg: 3, scope: !6144, file: !3, line: 3966, type: !141)
!6152 = !DILocation(line: 3966, column: 40, scope: !6144)
!6153 = !DILocation(line: 3968, column: 27, scope: !6144)
!6154 = !DILocation(line: 3968, column: 25, scope: !6144)
!6155 = !DILocation(line: 3969, column: 26, scope: !6144)
!6156 = !DILocation(line: 3969, column: 57, scope: !6144)
!6157 = !DILocation(line: 3969, column: 47, scope: !6144)
!6158 = !DILocation(line: 3969, column: 62, scope: !6144)
!6159 = !DILocation(line: 3969, column: 65, scope: !6144)
!6160 = !DILocation(line: 3968, column: 3, scope: !6144)
!6161 = !DILocation(line: 3970, column: 1, scope: !6144)
!6162 = distinct !DISubprogram(name: "format_user_or_group", scope: !3, file: !3, line: 3929, type: !6163, scopeLine: 3930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6163 = !DISubroutineType(types: !6164)
!6164 = !{null, !146, !151, !27}
!6165 = !DILocalVariable(name: "name", arg: 1, scope: !6162, file: !3, line: 3929, type: !146)
!6166 = !DILocation(line: 3929, column: 35, scope: !6162)
!6167 = !DILocalVariable(name: "id", arg: 2, scope: !6162, file: !3, line: 3929, type: !151)
!6168 = !DILocation(line: 3929, column: 59, scope: !6162)
!6169 = !DILocalVariable(name: "width", arg: 3, scope: !6162, file: !3, line: 3929, type: !27)
!6170 = !DILocation(line: 3929, column: 67, scope: !6162)
!6171 = !DILocalVariable(name: "len", scope: !6162, file: !3, line: 3931, type: !149)
!6172 = !DILocation(line: 3931, column: 10, scope: !6162)
!6173 = !DILocation(line: 3933, column: 7, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6162, file: !3, line: 3933, column: 7)
!6175 = !DILocation(line: 3933, column: 7, scope: !6162)
!6176 = !DILocalVariable(name: "width_gap", scope: !6177, file: !3, line: 3935, type: !27)
!6177 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3934, column: 5)
!6178 = !DILocation(line: 3935, column: 11, scope: !6177)
!6179 = !DILocation(line: 3935, column: 23, scope: !6177)
!6180 = !DILocation(line: 3935, column: 41, scope: !6177)
!6181 = !DILocation(line: 3935, column: 31, scope: !6177)
!6182 = !DILocation(line: 3935, column: 29, scope: !6177)
!6183 = !DILocalVariable(name: "pad", scope: !6177, file: !3, line: 3936, type: !27)
!6184 = !DILocation(line: 3936, column: 11, scope: !6177)
!6185 = !DILocation(line: 3936, column: 17, scope: !6177)
!6186 = !DILocation(line: 3937, column: 7, scope: !6177)
!6187 = !DILocation(line: 3938, column: 21, scope: !6177)
!6188 = !DILocation(line: 3938, column: 13, scope: !6177)
!6189 = !DILocation(line: 3938, column: 29, scope: !6177)
!6190 = !DILocation(line: 3938, column: 27, scope: !6177)
!6191 = !DILocation(line: 3938, column: 11, scope: !6177)
!6192 = !DILocation(line: 3940, column: 7, scope: !6177)
!6193 = !DILocation(line: 3941, column: 9, scope: !6177)
!6194 = !DILocation(line: 3942, column: 17, scope: !6177)
!6195 = distinct !{!6195, !6192, !6196}
!6196 = !DILocation(line: 3942, column: 19, scope: !6177)
!6197 = !DILocation(line: 3943, column: 5, scope: !6177)
!6198 = !DILocation(line: 3946, column: 24, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3945, column: 5)
!6200 = !DILocation(line: 3946, column: 31, scope: !6199)
!6201 = !DILocation(line: 3946, column: 7, scope: !6199)
!6202 = !DILocation(line: 3947, column: 13, scope: !6199)
!6203 = !DILocation(line: 3947, column: 11, scope: !6199)
!6204 = !DILocation(line: 3950, column: 16, scope: !6162)
!6205 = !DILocation(line: 3950, column: 20, scope: !6162)
!6206 = !DILocation(line: 3950, column: 13, scope: !6162)
!6207 = !DILocation(line: 3951, column: 1, scope: !6162)
!6208 = distinct !DISubprogram(name: "unsigned_file_size", scope: !3, file: !3, line: 2934, type: !6209, scopeLine: 2935, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{!168, !177}
!6211 = !DILocalVariable(name: "size", arg: 1, scope: !6208, file: !3, line: 2934, type: !177)
!6212 = !DILocation(line: 2934, column: 27, scope: !6208)
!6213 = !DILocation(line: 2936, column: 10, scope: !6208)
!6214 = !DILocation(line: 2936, column: 18, scope: !6208)
!6215 = !DILocation(line: 2936, column: 23, scope: !6208)
!6216 = !DILocation(line: 2936, column: 17, scope: !6208)
!6217 = !DILocation(line: 2936, column: 28, scope: !6208)
!6218 = !DILocation(line: 2936, column: 15, scope: !6208)
!6219 = !DILocation(line: 2936, column: 3, scope: !6208)
!6220 = distinct !DISubprogram(name: "align_nstrftime", scope: !3, file: !3, line: 3880, type: !6221, scopeLine: 3882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6221 = !DISubroutineType(types: !6222)
!6222 = !{!149, !143, !149, !141, !6223, !256, !27}
!6223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6224, size: 64)
!6224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5668)
!6225 = !DILocalVariable(name: "buf", arg: 1, scope: !6220, file: !3, line: 3880, type: !143)
!6226 = !DILocation(line: 3880, column: 24, scope: !6220)
!6227 = !DILocalVariable(name: "size", arg: 2, scope: !6220, file: !3, line: 3880, type: !149)
!6228 = !DILocation(line: 3880, column: 36, scope: !6220)
!6229 = !DILocalVariable(name: "recent", arg: 3, scope: !6220, file: !3, line: 3880, type: !141)
!6230 = !DILocation(line: 3880, column: 47, scope: !6220)
!6231 = !DILocalVariable(name: "tm", arg: 4, scope: !6220, file: !3, line: 3880, type: !6223)
!6232 = !DILocation(line: 3880, column: 72, scope: !6220)
!6233 = !DILocalVariable(name: "tz", arg: 5, scope: !6220, file: !3, line: 3881, type: !256)
!6234 = !DILocation(line: 3881, column: 29, scope: !6220)
!6235 = !DILocalVariable(name: "ns", arg: 6, scope: !6220, file: !3, line: 3881, type: !27)
!6236 = !DILocation(line: 3881, column: 37, scope: !6220)
!6237 = !DILocalVariable(name: "nfmt", scope: !6220, file: !3, line: 3883, type: !146)
!6238 = !DILocation(line: 3883, column: 15, scope: !6220)
!6239 = !DILocation(line: 3883, column: 23, scope: !6220)
!6240 = !DILocation(line: 3884, column: 34, scope: !6220)
!6241 = !DILocation(line: 3884, column: 25, scope: !6220)
!6242 = !DILocation(line: 3884, column: 42, scope: !6220)
!6243 = !DILocation(line: 3884, column: 46, scope: !6220)
!6244 = !DILocation(line: 3885, column: 42, scope: !6220)
!6245 = !DILocation(line: 3885, column: 25, scope: !6220)
!6246 = !DILocation(line: 3886, column: 21, scope: !6220)
!6247 = !DILocation(line: 3886, column: 26, scope: !6220)
!6248 = !DILocation(line: 3886, column: 32, scope: !6220)
!6249 = !DILocation(line: 3886, column: 38, scope: !6220)
!6250 = !DILocation(line: 3886, column: 42, scope: !6220)
!6251 = !DILocation(line: 3886, column: 46, scope: !6220)
!6252 = !DILocation(line: 3886, column: 10, scope: !6220)
!6253 = !DILocation(line: 3886, column: 3, scope: !6220)
!6254 = !DILocation(line: 3897, column: 7, scope: !6255)
!6255 = distinct !DILexicalBlock(scope: !1085, file: !3, line: 3897, column: 7)
!6256 = !DILocation(line: 3897, column: 13, scope: !6255)
!6257 = !DILocation(line: 3897, column: 7, scope: !1085)
!6258 = !DILocalVariable(name: "epoch", scope: !6259, file: !3, line: 3899, type: !162)
!6259 = distinct !DILexicalBlock(scope: !6255, file: !3, line: 3898, column: 5)
!6260 = !DILocation(line: 3899, column: 14, scope: !6259)
!6261 = !DILocalVariable(name: "tm", scope: !6259, file: !3, line: 3900, type: !5668)
!6262 = !DILocation(line: 3900, column: 17, scope: !6259)
!6263 = !DILocalVariable(name: "buf", scope: !6259, file: !3, line: 3901, type: !826)
!6264 = !DILocation(line: 3901, column: 12, scope: !6259)
!6265 = !DILocation(line: 3910, column: 25, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !6259, file: !3, line: 3910, column: 11)
!6267 = !DILocation(line: 3910, column: 11, scope: !6266)
!6268 = !DILocation(line: 3910, column: 11, scope: !6259)
!6269 = !DILocalVariable(name: "len", scope: !6270, file: !3, line: 3912, type: !149)
!6270 = distinct !DILexicalBlock(scope: !6266, file: !3, line: 3911, column: 9)
!6271 = !DILocation(line: 3912, column: 18, scope: !6270)
!6272 = !DILocation(line: 3912, column: 41, scope: !6270)
!6273 = !DILocation(line: 3913, column: 46, scope: !6270)
!6274 = !DILocation(line: 3912, column: 24, scope: !6270)
!6275 = !DILocation(line: 3914, column: 15, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6270, file: !3, line: 3914, column: 15)
!6277 = !DILocation(line: 3914, column: 19, scope: !6276)
!6278 = !DILocation(line: 3914, column: 15, scope: !6270)
!6279 = !DILocation(line: 3915, column: 32, scope: !6276)
!6280 = !DILocation(line: 3915, column: 37, scope: !6276)
!6281 = !DILocation(line: 3915, column: 21, scope: !6276)
!6282 = !DILocation(line: 3915, column: 19, scope: !6276)
!6283 = !DILocation(line: 3915, column: 13, scope: !6276)
!6284 = !DILocation(line: 3916, column: 9, scope: !6270)
!6285 = !DILocation(line: 3918, column: 11, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6259, file: !3, line: 3918, column: 11)
!6287 = !DILocation(line: 3918, column: 17, scope: !6286)
!6288 = !DILocation(line: 3918, column: 11, scope: !6259)
!6289 = !DILocation(line: 3919, column: 15, scope: !6286)
!6290 = !DILocation(line: 3919, column: 9, scope: !6286)
!6291 = !DILocation(line: 3920, column: 5, scope: !6259)
!6292 = !DILocation(line: 3922, column: 10, scope: !1085)
!6293 = !DILocation(line: 3922, column: 3, scope: !1085)
!6294 = distinct !DISubprogram(name: "timetostr", scope: !838, file: !838, line: 687, type: !6295, scopeLine: 688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6295 = !DISubroutineType(types: !6296)
!6296 = !{!143, !162, !143}
!6297 = !DILocalVariable(name: "t", arg: 1, scope: !6294, file: !838, line: 687, type: !162)
!6298 = !DILocation(line: 687, column: 19, scope: !6294)
!6299 = !DILocalVariable(name: "buf", arg: 2, scope: !6294, file: !838, line: 687, type: !143)
!6300 = !DILocation(line: 687, column: 28, scope: !6294)
!6301 = !DILocation(line: 690, column: 24, scope: !6294)
!6302 = !DILocation(line: 690, column: 27, scope: !6294)
!6303 = !DILocation(line: 690, column: 13, scope: !6294)
!6304 = !DILocation(line: 689, column: 3, scope: !6294)
!6305 = distinct !DISubprogram(name: "print_name_with_quoting", scope: !3, file: !3, line: 4540, type: !6306, scopeLine: 4544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6306 = !DISubroutineType(types: !6307)
!6307 = !{!149, !183, !141, !616, !149}
!6308 = !DILocalVariable(name: "f", arg: 1, scope: !6305, file: !3, line: 4540, type: !183)
!6309 = !DILocation(line: 4540, column: 49, scope: !6305)
!6310 = !DILocalVariable(name: "symlink_target", arg: 2, scope: !6305, file: !3, line: 4541, type: !141)
!6311 = !DILocation(line: 4541, column: 31, scope: !6305)
!6312 = !DILocalVariable(name: "stack", arg: 3, scope: !6305, file: !3, line: 4542, type: !616)
!6313 = !DILocation(line: 4542, column: 42, scope: !6305)
!6314 = !DILocalVariable(name: "start_col", arg: 4, scope: !6305, file: !3, line: 4543, type: !149)
!6315 = !DILocation(line: 4543, column: 33, scope: !6305)
!6316 = !DILocalVariable(name: "name", scope: !6305, file: !3, line: 4545, type: !146)
!6317 = !DILocation(line: 4545, column: 15, scope: !6305)
!6318 = !DILocation(line: 4545, column: 22, scope: !6305)
!6319 = !DILocation(line: 4545, column: 39, scope: !6305)
!6320 = !DILocation(line: 4545, column: 42, scope: !6305)
!6321 = !DILocation(line: 4545, column: 53, scope: !6305)
!6322 = !DILocation(line: 4545, column: 56, scope: !6305)
!6323 = !DILocalVariable(name: "color", scope: !6305, file: !3, line: 4547, type: !810)
!6324 = !DILocation(line: 4547, column: 25, scope: !6305)
!6325 = !DILocation(line: 4547, column: 33, scope: !6305)
!6326 = !DILocation(line: 4548, column: 54, scope: !6305)
!6327 = !DILocation(line: 4548, column: 57, scope: !6305)
!6328 = !DILocation(line: 4548, column: 33, scope: !6305)
!6329 = !DILocalVariable(name: "used_color_this_time", scope: !6305, file: !3, line: 4550, type: !141)
!6330 = !DILocation(line: 4550, column: 8, scope: !6305)
!6331 = !DILocation(line: 4550, column: 32, scope: !6305)
!6332 = !DILocation(line: 4551, column: 32, scope: !6305)
!6333 = !DILocation(line: 4551, column: 36, scope: !6305)
!6334 = !DILocation(line: 4551, column: 42, scope: !6305)
!6335 = !DILocation(line: 4551, column: 45, scope: !6305)
!6336 = !DILocation(line: 0, scope: !6305)
!6337 = !DILocalVariable(name: "len", scope: !6305, file: !3, line: 4553, type: !149)
!6338 = !DILocation(line: 4553, column: 10, scope: !6305)
!6339 = !DILocation(line: 4553, column: 28, scope: !6305)
!6340 = !DILocation(line: 4553, column: 34, scope: !6305)
!6341 = !DILocation(line: 4553, column: 60, scope: !6305)
!6342 = !DILocation(line: 4553, column: 63, scope: !6305)
!6343 = !DILocation(line: 4554, column: 28, scope: !6305)
!6344 = !DILocation(line: 4554, column: 36, scope: !6305)
!6345 = !DILocation(line: 4554, column: 35, scope: !6305)
!6346 = !DILocation(line: 4554, column: 52, scope: !6305)
!6347 = !DILocation(line: 4554, column: 59, scope: !6305)
!6348 = !DILocation(line: 4554, column: 62, scope: !6305)
!6349 = !DILocation(line: 4553, column: 16, scope: !6305)
!6350 = !DILocation(line: 4556, column: 3, scope: !6305)
!6351 = !DILocation(line: 4557, column: 7, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 4557, column: 7)
!6353 = !DILocation(line: 4557, column: 7, scope: !6305)
!6354 = !DILocation(line: 4559, column: 7, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 4558, column: 5)
!6356 = !DILocation(line: 4567, column: 11, scope: !6357)
!6357 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 4567, column: 11)
!6358 = !DILocation(line: 4568, column: 11, scope: !6357)
!6359 = !DILocation(line: 4568, column: 15, scope: !6357)
!6360 = !DILocation(line: 4568, column: 27, scope: !6357)
!6361 = !DILocation(line: 4568, column: 25, scope: !6357)
!6362 = !DILocation(line: 4568, column: 43, scope: !6357)
!6363 = !DILocation(line: 4568, column: 55, scope: !6357)
!6364 = !DILocation(line: 4568, column: 53, scope: !6357)
!6365 = !DILocation(line: 4568, column: 59, scope: !6357)
!6366 = !DILocation(line: 4568, column: 66, scope: !6357)
!6367 = !DILocation(line: 4568, column: 64, scope: !6357)
!6368 = !DILocation(line: 4568, column: 39, scope: !6357)
!6369 = !DILocation(line: 4567, column: 11, scope: !6355)
!6370 = !DILocation(line: 4569, column: 9, scope: !6357)
!6371 = !DILocation(line: 4570, column: 5, scope: !6355)
!6372 = !DILocation(line: 4572, column: 10, scope: !6305)
!6373 = !DILocation(line: 4572, column: 3, scope: !6305)
!6374 = distinct !DISubprogram(name: "print_type_indicator", scope: !3, file: !3, line: 4655, type: !6375, scopeLine: 4656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6375 = !DISubroutineType(types: !6376)
!6376 = !{!141, !141, !228, !36}
!6377 = !DILocalVariable(name: "stat_ok", arg: 1, scope: !6374, file: !3, line: 4655, type: !141)
!6378 = !DILocation(line: 4655, column: 28, scope: !6374)
!6379 = !DILocalVariable(name: "mode", arg: 2, scope: !6374, file: !3, line: 4655, type: !228)
!6380 = !DILocation(line: 4655, column: 44, scope: !6374)
!6381 = !DILocalVariable(name: "type", arg: 3, scope: !6374, file: !3, line: 4655, type: !36)
!6382 = !DILocation(line: 4655, column: 64, scope: !6374)
!6383 = !DILocalVariable(name: "c", scope: !6374, file: !3, line: 4657, type: !144)
!6384 = !DILocation(line: 4657, column: 8, scope: !6374)
!6385 = !DILocation(line: 4657, column: 32, scope: !6374)
!6386 = !DILocation(line: 4657, column: 41, scope: !6374)
!6387 = !DILocation(line: 4657, column: 47, scope: !6374)
!6388 = !DILocation(line: 4657, column: 12, scope: !6374)
!6389 = !DILocation(line: 4658, column: 7, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6374, file: !3, line: 4658, column: 7)
!6391 = !DILocation(line: 4658, column: 7, scope: !6374)
!6392 = !DILocation(line: 4659, column: 5, scope: !6390)
!6393 = !DILocation(line: 4659, column: 5, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 4659, column: 5)
!6395 = !DILocation(line: 4660, column: 12, scope: !6374)
!6396 = !DILocation(line: 4660, column: 11, scope: !6374)
!6397 = !DILocation(line: 4660, column: 10, scope: !6374)
!6398 = !DILocation(line: 4660, column: 3, scope: !6374)
!6399 = distinct !DISubprogram(name: "get_type_indicator", scope: !3, file: !3, line: 4623, type: !6400, scopeLine: 4624, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6400 = !DISubroutineType(types: !6401)
!6401 = !{!144, !141, !228, !36}
!6402 = !DILocalVariable(name: "stat_ok", arg: 1, scope: !6399, file: !3, line: 4623, type: !141)
!6403 = !DILocation(line: 4623, column: 26, scope: !6399)
!6404 = !DILocalVariable(name: "mode", arg: 2, scope: !6399, file: !3, line: 4623, type: !228)
!6405 = !DILocation(line: 4623, column: 42, scope: !6399)
!6406 = !DILocalVariable(name: "type", arg: 3, scope: !6399, file: !3, line: 4623, type: !36)
!6407 = !DILocation(line: 4623, column: 62, scope: !6399)
!6408 = !DILocalVariable(name: "c", scope: !6399, file: !3, line: 4625, type: !144)
!6409 = !DILocation(line: 4625, column: 8, scope: !6399)
!6410 = !DILocation(line: 4627, column: 7, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 4627, column: 7)
!6412 = !DILocation(line: 4627, column: 7, scope: !6399)
!6413 = !DILocation(line: 4627, column: 17, scope: !6411)
!6414 = !DILocation(line: 4627, column: 34, scope: !6411)
!6415 = !DILocation(line: 4627, column: 39, scope: !6411)
!6416 = !DILocation(line: 4629, column: 11, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 4629, column: 11)
!6418 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 4628, column: 5)
!6419 = !DILocation(line: 4629, column: 19, scope: !6417)
!6420 = !DILocation(line: 4629, column: 22, scope: !6417)
!6421 = !DILocation(line: 4629, column: 38, scope: !6417)
!6422 = !DILocation(line: 4629, column: 50, scope: !6417)
!6423 = !DILocation(line: 4629, column: 54, scope: !6417)
!6424 = !DILocation(line: 4629, column: 59, scope: !6417)
!6425 = !DILocation(line: 4629, column: 11, scope: !6418)
!6426 = !DILocation(line: 4630, column: 11, scope: !6417)
!6427 = !DILocation(line: 4630, column: 9, scope: !6417)
!6428 = !DILocation(line: 4632, column: 11, scope: !6417)
!6429 = !DILocation(line: 4633, column: 5, scope: !6418)
!6430 = !DILocation(line: 4636, column: 11, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 4636, column: 11)
!6432 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 4635, column: 5)
!6433 = !DILocation(line: 4636, column: 11, scope: !6432)
!6434 = !DILocation(line: 4636, column: 21, scope: !6431)
!6435 = !DILocation(line: 4636, column: 38, scope: !6431)
!6436 = !DILocation(line: 4636, column: 43, scope: !6431)
!6437 = !DILocation(line: 4636, column: 56, scope: !6431)
!6438 = !DILocation(line: 4636, column: 59, scope: !6431)
!6439 = !DILocation(line: 4636, column: 64, scope: !6431)
!6440 = !DILocation(line: 4637, column: 11, scope: !6431)
!6441 = !DILocation(line: 4637, column: 9, scope: !6431)
!6442 = !DILocation(line: 4638, column: 16, scope: !6443)
!6443 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 4638, column: 16)
!6444 = !DILocation(line: 4638, column: 32, scope: !6443)
!6445 = !DILocation(line: 4638, column: 16, scope: !6431)
!6446 = !DILocation(line: 4639, column: 11, scope: !6443)
!6447 = !DILocation(line: 4639, column: 9, scope: !6443)
!6448 = !DILocation(line: 4640, column: 16, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6443, file: !3, line: 4640, column: 16)
!6450 = !DILocation(line: 4640, column: 16, scope: !6443)
!6451 = !DILocation(line: 4640, column: 26, scope: !6449)
!6452 = !DILocation(line: 4640, column: 43, scope: !6449)
!6453 = !DILocation(line: 4640, column: 48, scope: !6449)
!6454 = !DILocation(line: 4641, column: 11, scope: !6449)
!6455 = !DILocation(line: 4641, column: 9, scope: !6449)
!6456 = !DILocation(line: 4642, column: 16, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 4642, column: 16)
!6458 = !DILocation(line: 4642, column: 16, scope: !6449)
!6459 = !DILocation(line: 4642, column: 26, scope: !6457)
!6460 = !DILocation(line: 4642, column: 44, scope: !6457)
!6461 = !DILocation(line: 4642, column: 49, scope: !6457)
!6462 = !DILocation(line: 4643, column: 11, scope: !6457)
!6463 = !DILocation(line: 4643, column: 9, scope: !6457)
!6464 = !DILocation(line: 4644, column: 16, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6457, file: !3, line: 4644, column: 16)
!6466 = !DILocation(line: 4644, column: 16, scope: !6457)
!6467 = !DILocation(line: 4644, column: 26, scope: !6465)
!6468 = !DILocation(line: 4644, column: 44, scope: !6465)
!6469 = !DILocation(line: 4644, column: 49, scope: !6465)
!6470 = !DILocation(line: 4645, column: 11, scope: !6465)
!6471 = !DILocation(line: 4645, column: 9, scope: !6465)
!6472 = !DILocation(line: 4646, column: 16, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6465, file: !3, line: 4646, column: 16)
!6474 = !DILocation(line: 4646, column: 24, scope: !6473)
!6475 = !DILocation(line: 4646, column: 16, scope: !6465)
!6476 = !DILocation(line: 4647, column: 11, scope: !6473)
!6477 = !DILocation(line: 4647, column: 9, scope: !6473)
!6478 = !DILocation(line: 4649, column: 11, scope: !6473)
!6479 = !DILocation(line: 4651, column: 10, scope: !6399)
!6480 = !DILocation(line: 4651, column: 3, scope: !6399)
!6481 = !DILocalVariable(name: "f", arg: 1, scope: !1073, file: !3, line: 4682, type: !183)
!6482 = !DILocation(line: 4682, column: 45, scope: !1073)
!6483 = !DILocalVariable(name: "symlink_target", arg: 2, scope: !1073, file: !3, line: 4682, type: !141)
!6484 = !DILocation(line: 4682, column: 53, scope: !1073)
!6485 = !DILocalVariable(name: "type", scope: !1073, file: !3, line: 4684, type: !53)
!6486 = !DILocation(line: 4684, column: 21, scope: !1073)
!6487 = !DILocalVariable(name: "ext", scope: !1073, file: !3, line: 4685, type: !710)
!6488 = !DILocation(line: 4685, column: 26, scope: !1073)
!6489 = !DILocalVariable(name: "len", scope: !1073, file: !3, line: 4686, type: !149)
!6490 = !DILocation(line: 4686, column: 10, scope: !1073)
!6491 = !DILocalVariable(name: "name", scope: !1073, file: !3, line: 4688, type: !146)
!6492 = !DILocation(line: 4688, column: 15, scope: !1073)
!6493 = !DILocalVariable(name: "mode", scope: !1073, file: !3, line: 4689, type: !228)
!6494 = !DILocation(line: 4689, column: 10, scope: !1073)
!6495 = !DILocalVariable(name: "linkok", scope: !1073, file: !3, line: 4690, type: !27)
!6496 = !DILocation(line: 4690, column: 7, scope: !1073)
!6497 = !DILocation(line: 4691, column: 7, scope: !6498)
!6498 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 4691, column: 7)
!6499 = !DILocation(line: 4691, column: 7, scope: !1073)
!6500 = !DILocation(line: 4693, column: 14, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 4692, column: 5)
!6502 = !DILocation(line: 4693, column: 17, scope: !6501)
!6503 = !DILocation(line: 4693, column: 12, scope: !6501)
!6504 = !DILocation(line: 4694, column: 14, scope: !6501)
!6505 = !DILocation(line: 4694, column: 17, scope: !6501)
!6506 = !DILocation(line: 4694, column: 12, scope: !6501)
!6507 = !DILocation(line: 4695, column: 16, scope: !6501)
!6508 = !DILocation(line: 4695, column: 19, scope: !6501)
!6509 = !DILocation(line: 4695, column: 14, scope: !6501)
!6510 = !DILocation(line: 4696, column: 5, scope: !6501)
!6511 = !DILocation(line: 4699, column: 14, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 4698, column: 5)
!6513 = !DILocation(line: 4699, column: 17, scope: !6512)
!6514 = !DILocation(line: 4699, column: 12, scope: !6512)
!6515 = !DILocation(line: 4700, column: 14, scope: !6512)
!6516 = !DILocation(line: 4700, column: 12, scope: !6512)
!6517 = !DILocation(line: 4701, column: 16, scope: !6512)
!6518 = !DILocation(line: 4701, column: 19, scope: !6512)
!6519 = !DILocation(line: 4701, column: 14, scope: !6512)
!6520 = !DILocation(line: 4706, column: 7, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 4706, column: 7)
!6522 = !DILocation(line: 4706, column: 14, scope: !6521)
!6523 = !DILocation(line: 4706, column: 20, scope: !6521)
!6524 = !DILocation(line: 4706, column: 23, scope: !6521)
!6525 = !DILocation(line: 4706, column: 7, scope: !1073)
!6526 = !DILocation(line: 4707, column: 10, scope: !6521)
!6527 = !DILocation(line: 4707, column: 5, scope: !6521)
!6528 = !DILocation(line: 4708, column: 13, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6521, file: !3, line: 4708, column: 12)
!6530 = !DILocation(line: 4708, column: 16, scope: !6529)
!6531 = !DILocation(line: 4708, column: 12, scope: !6521)
!6532 = !DILocation(line: 4711, column: 33, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 4709, column: 5)
!6534 = !DILocation(line: 4711, column: 36, scope: !6533)
!6535 = !DILocation(line: 4711, column: 14, scope: !6533)
!6536 = !DILocation(line: 4711, column: 12, scope: !6533)
!6537 = !DILocation(line: 4712, column: 5, scope: !6533)
!6538 = !DILocation(line: 4715, column: 11, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6540, file: !3, line: 4715, column: 11)
!6540 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 4714, column: 5)
!6541 = !DILocation(line: 4715, column: 11, scope: !6540)
!6542 = !DILocation(line: 4717, column: 16, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 4716, column: 9)
!6544 = !DILocation(line: 4719, column: 16, scope: !6545)
!6545 = distinct !DILexicalBlock(scope: !6543, file: !3, line: 4719, column: 15)
!6546 = !DILocation(line: 4719, column: 21, scope: !6545)
!6547 = !DILocation(line: 4719, column: 32, scope: !6545)
!6548 = !DILocation(line: 4719, column: 37, scope: !6545)
!6549 = !DILocation(line: 4719, column: 40, scope: !6545)
!6550 = !DILocation(line: 4719, column: 15, scope: !6543)
!6551 = !DILocation(line: 4720, column: 18, scope: !6545)
!6552 = !DILocation(line: 4720, column: 13, scope: !6545)
!6553 = !DILocation(line: 4721, column: 21, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6545, file: !3, line: 4721, column: 20)
!6555 = !DILocation(line: 4721, column: 26, scope: !6554)
!6556 = !DILocation(line: 4721, column: 37, scope: !6554)
!6557 = !DILocation(line: 4721, column: 42, scope: !6554)
!6558 = !DILocation(line: 4721, column: 45, scope: !6554)
!6559 = !DILocation(line: 4721, column: 20, scope: !6545)
!6560 = !DILocation(line: 4722, column: 18, scope: !6554)
!6561 = !DILocation(line: 4722, column: 13, scope: !6554)
!6562 = !DILocation(line: 4723, column: 20, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6554, file: !3, line: 4723, column: 20)
!6564 = !DILocation(line: 4723, column: 39, scope: !6563)
!6565 = !DILocation(line: 4723, column: 42, scope: !6563)
!6566 = !DILocation(line: 4723, column: 45, scope: !6563)
!6567 = !DILocation(line: 4723, column: 20, scope: !6554)
!6568 = !DILocation(line: 4724, column: 18, scope: !6563)
!6569 = !DILocation(line: 4724, column: 13, scope: !6563)
!6570 = !DILocation(line: 4725, column: 21, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 4725, column: 20)
!6572 = !DILocation(line: 4725, column: 26, scope: !6571)
!6573 = !DILocation(line: 4725, column: 37, scope: !6571)
!6574 = !DILocation(line: 4725, column: 42, scope: !6571)
!6575 = !DILocation(line: 4725, column: 45, scope: !6571)
!6576 = !DILocation(line: 4725, column: 20, scope: !6563)
!6577 = !DILocation(line: 4726, column: 18, scope: !6571)
!6578 = !DILocation(line: 4726, column: 13, scope: !6571)
!6579 = !DILocation(line: 4727, column: 25, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 4727, column: 20)
!6581 = !DILocation(line: 4727, column: 28, scope: !6580)
!6582 = !DILocation(line: 4727, column: 33, scope: !6580)
!6583 = !DILocation(line: 4727, column: 23, scope: !6580)
!6584 = !DILocation(line: 4727, column: 43, scope: !6580)
!6585 = !DILocation(line: 4727, column: 46, scope: !6580)
!6586 = !DILocation(line: 4727, column: 20, scope: !6571)
!6587 = !DILocation(line: 4728, column: 18, scope: !6580)
!6588 = !DILocation(line: 4728, column: 13, scope: !6580)
!6589 = !DILocation(line: 4729, column: 9, scope: !6543)
!6590 = !DILocation(line: 4730, column: 16, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 4730, column: 16)
!6592 = !DILocation(line: 4730, column: 16, scope: !6539)
!6593 = !DILocation(line: 4732, column: 16, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6591, file: !3, line: 4731, column: 9)
!6595 = !DILocation(line: 4734, column: 16, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 4734, column: 15)
!6597 = !DILocation(line: 4734, column: 21, scope: !6596)
!6598 = !DILocation(line: 4734, column: 32, scope: !6596)
!6599 = !DILocation(line: 4734, column: 36, scope: !6596)
!6600 = !DILocation(line: 4734, column: 41, scope: !6596)
!6601 = !DILocation(line: 4735, column: 15, scope: !6596)
!6602 = !DILocation(line: 4735, column: 18, scope: !6596)
!6603 = !DILocation(line: 4734, column: 15, scope: !6594)
!6604 = !DILocation(line: 4736, column: 18, scope: !6596)
!6605 = !DILocation(line: 4736, column: 13, scope: !6596)
!6606 = !DILocation(line: 4737, column: 21, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 4737, column: 20)
!6608 = !DILocation(line: 4737, column: 26, scope: !6607)
!6609 = !DILocation(line: 4737, column: 37, scope: !6607)
!6610 = !DILocation(line: 4737, column: 42, scope: !6607)
!6611 = !DILocation(line: 4737, column: 45, scope: !6607)
!6612 = !DILocation(line: 4737, column: 20, scope: !6596)
!6613 = !DILocation(line: 4738, column: 18, scope: !6607)
!6614 = !DILocation(line: 4738, column: 13, scope: !6607)
!6615 = !DILocation(line: 4739, column: 21, scope: !6616)
!6616 = distinct !DILexicalBlock(scope: !6607, file: !3, line: 4739, column: 20)
!6617 = !DILocation(line: 4739, column: 26, scope: !6616)
!6618 = !DILocation(line: 4739, column: 37, scope: !6616)
!6619 = !DILocation(line: 4739, column: 42, scope: !6616)
!6620 = !DILocation(line: 4739, column: 45, scope: !6616)
!6621 = !DILocation(line: 4739, column: 20, scope: !6607)
!6622 = !DILocation(line: 4740, column: 18, scope: !6616)
!6623 = !DILocation(line: 4740, column: 13, scope: !6616)
!6624 = !DILocation(line: 4741, column: 9, scope: !6594)
!6625 = !DILocation(line: 4742, column: 16, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6591, file: !3, line: 4742, column: 16)
!6627 = !DILocation(line: 4742, column: 16, scope: !6591)
!6628 = !DILocation(line: 4743, column: 14, scope: !6626)
!6629 = !DILocation(line: 4743, column: 9, scope: !6626)
!6630 = !DILocation(line: 4744, column: 16, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6626, file: !3, line: 4744, column: 16)
!6632 = !DILocation(line: 4744, column: 16, scope: !6626)
!6633 = !DILocation(line: 4745, column: 14, scope: !6631)
!6634 = !DILocation(line: 4745, column: 9, scope: !6631)
!6635 = !DILocation(line: 4746, column: 16, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6631, file: !3, line: 4746, column: 16)
!6637 = !DILocation(line: 4746, column: 16, scope: !6631)
!6638 = !DILocation(line: 4747, column: 14, scope: !6636)
!6639 = !DILocation(line: 4747, column: 9, scope: !6636)
!6640 = !DILocation(line: 4748, column: 16, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 4748, column: 16)
!6642 = !DILocation(line: 4748, column: 16, scope: !6636)
!6643 = !DILocation(line: 4749, column: 14, scope: !6641)
!6644 = !DILocation(line: 4749, column: 9, scope: !6641)
!6645 = !DILocation(line: 4750, column: 16, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 4750, column: 16)
!6647 = !DILocation(line: 4750, column: 16, scope: !6641)
!6648 = !DILocation(line: 4751, column: 14, scope: !6646)
!6649 = !DILocation(line: 4751, column: 9, scope: !6646)
!6650 = !DILocation(line: 4757, column: 16, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 4755, column: 9)
!6652 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 4752, column: 16)
!6653 = !DILocation(line: 4762, column: 7, scope: !1073)
!6654 = !DILocation(line: 4763, column: 7, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 4763, column: 7)
!6656 = !DILocation(line: 4763, column: 12, scope: !6655)
!6657 = !DILocation(line: 4763, column: 7, scope: !1073)
!6658 = !DILocation(line: 4767, column: 21, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 4764, column: 5)
!6660 = !DILocation(line: 4767, column: 13, scope: !6659)
!6661 = !DILocation(line: 4767, column: 11, scope: !6659)
!6662 = !DILocation(line: 4768, column: 15, scope: !6659)
!6663 = !DILocation(line: 4768, column: 12, scope: !6659)
!6664 = !DILocation(line: 4769, column: 18, scope: !6665)
!6665 = distinct !DILexicalBlock(scope: !6659, file: !3, line: 4769, column: 7)
!6666 = !DILocation(line: 4769, column: 16, scope: !6665)
!6667 = !DILocation(line: 4769, column: 12, scope: !6665)
!6668 = !DILocation(line: 4769, column: 34, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6665, file: !3, line: 4769, column: 7)
!6670 = !DILocation(line: 4769, column: 38, scope: !6669)
!6671 = !DILocation(line: 4769, column: 7, scope: !6665)
!6672 = !DILocation(line: 4771, column: 15, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 4771, column: 15)
!6674 = distinct !DILexicalBlock(scope: !6669, file: !3, line: 4770, column: 9)
!6675 = !DILocation(line: 4771, column: 20, scope: !6673)
!6676 = !DILocation(line: 4771, column: 24, scope: !6673)
!6677 = !DILocation(line: 4771, column: 31, scope: !6673)
!6678 = !DILocation(line: 4771, column: 28, scope: !6673)
!6679 = !DILocation(line: 4772, column: 15, scope: !6673)
!6680 = !DILocation(line: 4772, column: 33, scope: !6673)
!6681 = !DILocation(line: 4772, column: 40, scope: !6673)
!6682 = !DILocation(line: 4772, column: 45, scope: !6673)
!6683 = !DILocation(line: 4772, column: 49, scope: !6673)
!6684 = !DILocation(line: 4772, column: 38, scope: !6673)
!6685 = !DILocation(line: 4772, column: 54, scope: !6673)
!6686 = !DILocation(line: 4772, column: 59, scope: !6673)
!6687 = !DILocation(line: 4772, column: 63, scope: !6673)
!6688 = !DILocation(line: 4773, column: 33, scope: !6673)
!6689 = !DILocation(line: 4773, column: 38, scope: !6673)
!6690 = !DILocation(line: 4773, column: 42, scope: !6673)
!6691 = !DILocation(line: 4772, column: 18, scope: !6673)
!6692 = !DILocation(line: 4773, column: 47, scope: !6673)
!6693 = !DILocation(line: 4771, column: 15, scope: !6674)
!6694 = !DILocation(line: 4774, column: 13, scope: !6673)
!6695 = !DILocation(line: 4775, column: 9, scope: !6674)
!6696 = !DILocation(line: 4769, column: 53, scope: !6669)
!6697 = !DILocation(line: 4769, column: 58, scope: !6669)
!6698 = !DILocation(line: 4769, column: 51, scope: !6669)
!6699 = !DILocation(line: 4769, column: 7, scope: !6669)
!6700 = distinct !{!6700, !6671, !6701}
!6701 = !DILocation(line: 4775, column: 9, scope: !6665)
!6702 = !DILocation(line: 4776, column: 5, scope: !6659)
!6703 = !DILocation(line: 4779, column: 7, scope: !6704)
!6704 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 4779, column: 7)
!6705 = !DILocation(line: 4779, column: 12, scope: !6704)
!6706 = !DILocation(line: 4779, column: 22, scope: !6704)
!6707 = !DILocation(line: 4779, column: 26, scope: !6704)
!6708 = !DILocation(line: 4779, column: 7, scope: !1073)
!6709 = !DILocation(line: 4781, column: 11, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6711, file: !3, line: 4781, column: 11)
!6711 = distinct !DILexicalBlock(scope: !6704, file: !3, line: 4780, column: 5)
!6712 = !DILocation(line: 4781, column: 37, scope: !6710)
!6713 = !DILocation(line: 4781, column: 40, scope: !6710)
!6714 = !DILocation(line: 4781, column: 11, scope: !6711)
!6715 = !DILocation(line: 4782, column: 14, scope: !6710)
!6716 = !DILocation(line: 4782, column: 9, scope: !6710)
!6717 = !DILocation(line: 4783, column: 5, scope: !6711)
!6718 = !DILocalVariable(name: "s", scope: !1073, file: !3, line: 4785, type: !813)
!6719 = !DILocation(line: 4785, column: 31, scope: !1073)
!6720 = !DILocation(line: 4786, column: 7, scope: !1073)
!6721 = !DILocation(line: 4786, column: 15, scope: !1073)
!6722 = !DILocation(line: 4786, column: 20, scope: !1073)
!6723 = !DILocation(line: 4786, column: 44, scope: !1073)
!6724 = !DILocation(line: 4786, column: 28, scope: !1073)
!6725 = !DILocation(line: 4788, column: 10, scope: !1073)
!6726 = !DILocation(line: 4788, column: 13, scope: !1073)
!6727 = !DILocation(line: 4788, column: 22, scope: !1073)
!6728 = !DILocation(line: 4788, column: 3, scope: !1073)
!6729 = distinct !DISubprogram(name: "calculate_columns", scope: !3, file: !3, line: 5077, type: !6730, scopeLine: 5078, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6730 = !DISubroutineType(types: !6731)
!6731 = !{!149, !141}
!6732 = !DILocalVariable(name: "by_columns", arg: 1, scope: !6729, file: !3, line: 5077, type: !141)
!6733 = !DILocation(line: 5077, column: 25, scope: !6729)
!6734 = !DILocalVariable(name: "filesno", scope: !6729, file: !3, line: 5079, type: !149)
!6735 = !DILocation(line: 5079, column: 10, scope: !6729)
!6736 = !DILocalVariable(name: "cols", scope: !6729, file: !3, line: 5080, type: !149)
!6737 = !DILocation(line: 5080, column: 10, scope: !6729)
!6738 = !DILocalVariable(name: "max_cols", scope: !6729, file: !3, line: 5085, type: !149)
!6739 = !DILocation(line: 5085, column: 10, scope: !6729)
!6740 = !DILocation(line: 5085, column: 21, scope: !6729)
!6741 = !DILocation(line: 5087, column: 3, scope: !6729)
!6742 = !DILocation(line: 5090, column: 16, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6729, file: !3, line: 5090, column: 3)
!6744 = !DILocation(line: 5090, column: 8, scope: !6743)
!6745 = !DILocation(line: 5090, column: 21, scope: !6746)
!6746 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 5090, column: 3)
!6747 = !DILocation(line: 5090, column: 31, scope: !6746)
!6748 = !DILocation(line: 5090, column: 29, scope: !6746)
!6749 = !DILocation(line: 5090, column: 3, scope: !6743)
!6750 = !DILocalVariable(name: "f", scope: !6751, file: !3, line: 5092, type: !183)
!6751 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 5091, column: 5)
!6752 = !DILocation(line: 5092, column: 30, scope: !6751)
!6753 = !DILocation(line: 5092, column: 34, scope: !6751)
!6754 = !DILocation(line: 5092, column: 46, scope: !6751)
!6755 = !DILocalVariable(name: "name_length", scope: !6751, file: !3, line: 5093, type: !149)
!6756 = !DILocation(line: 5093, column: 14, scope: !6751)
!6757 = !DILocation(line: 5093, column: 60, scope: !6751)
!6758 = !DILocation(line: 5093, column: 28, scope: !6751)
!6759 = !DILocalVariable(name: "i", scope: !6760, file: !3, line: 5095, type: !149)
!6760 = distinct !DILexicalBlock(scope: !6751, file: !3, line: 5095, column: 7)
!6761 = !DILocation(line: 5095, column: 19, scope: !6760)
!6762 = !DILocation(line: 5095, column: 12, scope: !6760)
!6763 = !DILocation(line: 5095, column: 26, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6760, file: !3, line: 5095, column: 7)
!6765 = !DILocation(line: 5095, column: 30, scope: !6764)
!6766 = !DILocation(line: 5095, column: 28, scope: !6764)
!6767 = !DILocation(line: 5095, column: 7, scope: !6760)
!6768 = !DILocation(line: 5097, column: 15, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6770, file: !3, line: 5097, column: 15)
!6770 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 5096, column: 9)
!6771 = !DILocation(line: 5097, column: 27, scope: !6769)
!6772 = !DILocation(line: 5097, column: 30, scope: !6769)
!6773 = !DILocation(line: 5097, column: 15, scope: !6770)
!6774 = !DILocalVariable(name: "idx", scope: !6775, file: !3, line: 5099, type: !149)
!6775 = distinct !DILexicalBlock(scope: !6769, file: !3, line: 5098, column: 13)
!6776 = !DILocation(line: 5099, column: 22, scope: !6775)
!6777 = !DILocation(line: 5099, column: 29, scope: !6775)
!6778 = !DILocation(line: 5100, column: 31, scope: !6775)
!6779 = !DILocation(line: 5100, column: 43, scope: !6775)
!6780 = !DILocation(line: 5100, column: 56, scope: !6775)
!6781 = !DILocation(line: 5100, column: 54, scope: !6775)
!6782 = !DILocation(line: 5100, column: 62, scope: !6775)
!6783 = !DILocation(line: 5100, column: 64, scope: !6775)
!6784 = !DILocation(line: 5100, column: 59, scope: !6775)
!6785 = !DILocation(line: 5100, column: 39, scope: !6775)
!6786 = !DILocation(line: 5101, column: 31, scope: !6775)
!6787 = !DILocation(line: 5101, column: 42, scope: !6775)
!6788 = !DILocation(line: 5101, column: 44, scope: !6775)
!6789 = !DILocation(line: 5101, column: 39, scope: !6775)
!6790 = !DILocalVariable(name: "real_length", scope: !6775, file: !3, line: 5102, type: !149)
!6791 = !DILocation(line: 5102, column: 22, scope: !6775)
!6792 = !DILocation(line: 5102, column: 36, scope: !6775)
!6793 = !DILocation(line: 5102, column: 51, scope: !6775)
!6794 = !DILocation(line: 5102, column: 58, scope: !6775)
!6795 = !DILocation(line: 5102, column: 55, scope: !6775)
!6796 = !DILocation(line: 5102, column: 50, scope: !6775)
!6797 = !DILocation(line: 5102, column: 48, scope: !6775)
!6798 = !DILocation(line: 5104, column: 19, scope: !6799)
!6799 = distinct !DILexicalBlock(scope: !6775, file: !3, line: 5104, column: 19)
!6800 = !DILocation(line: 5104, column: 31, scope: !6799)
!6801 = !DILocation(line: 5104, column: 34, scope: !6799)
!6802 = !DILocation(line: 5104, column: 42, scope: !6799)
!6803 = !DILocation(line: 5104, column: 49, scope: !6799)
!6804 = !DILocation(line: 5104, column: 47, scope: !6799)
!6805 = !DILocation(line: 5104, column: 19, scope: !6775)
!6806 = !DILocation(line: 5106, column: 47, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6799, file: !3, line: 5105, column: 17)
!6808 = !DILocation(line: 5107, column: 49, scope: !6807)
!6809 = !DILocation(line: 5107, column: 61, scope: !6807)
!6810 = !DILocation(line: 5107, column: 64, scope: !6807)
!6811 = !DILocation(line: 5107, column: 72, scope: !6807)
!6812 = !DILocation(line: 5107, column: 47, scope: !6807)
!6813 = !DILocation(line: 5106, column: 19, scope: !6807)
!6814 = !DILocation(line: 5106, column: 31, scope: !6807)
!6815 = !DILocation(line: 5106, column: 34, scope: !6807)
!6816 = !DILocation(line: 5106, column: 43, scope: !6807)
!6817 = !DILocation(line: 5108, column: 49, scope: !6807)
!6818 = !DILocation(line: 5108, column: 19, scope: !6807)
!6819 = !DILocation(line: 5108, column: 31, scope: !6807)
!6820 = !DILocation(line: 5108, column: 34, scope: !6807)
!6821 = !DILocation(line: 5108, column: 42, scope: !6807)
!6822 = !DILocation(line: 5108, column: 47, scope: !6807)
!6823 = !DILocation(line: 5109, column: 47, scope: !6807)
!6824 = !DILocation(line: 5109, column: 59, scope: !6807)
!6825 = !DILocation(line: 5109, column: 62, scope: !6807)
!6826 = !DILocation(line: 5110, column: 49, scope: !6807)
!6827 = !DILocation(line: 5110, column: 47, scope: !6807)
!6828 = !DILocation(line: 5109, column: 19, scope: !6807)
!6829 = !DILocation(line: 5109, column: 31, scope: !6807)
!6830 = !DILocation(line: 5109, column: 34, scope: !6807)
!6831 = !DILocation(line: 5109, column: 44, scope: !6807)
!6832 = !DILocation(line: 5111, column: 17, scope: !6807)
!6833 = !DILocation(line: 5112, column: 13, scope: !6775)
!6834 = !DILocation(line: 5113, column: 9, scope: !6770)
!6835 = !DILocation(line: 5095, column: 40, scope: !6764)
!6836 = !DILocation(line: 5095, column: 7, scope: !6764)
!6837 = distinct !{!6837, !6767, !6838}
!6838 = !DILocation(line: 5113, column: 9, scope: !6760)
!6839 = !DILocation(line: 5114, column: 5, scope: !6751)
!6840 = !DILocation(line: 5090, column: 43, scope: !6746)
!6841 = !DILocation(line: 5090, column: 3, scope: !6746)
!6842 = distinct !{!6842, !6749, !6843}
!6843 = !DILocation(line: 5114, column: 5, scope: !6743)
!6844 = !DILocation(line: 5117, column: 15, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6729, file: !3, line: 5117, column: 3)
!6846 = !DILocation(line: 5117, column: 13, scope: !6845)
!6847 = !DILocation(line: 5117, column: 8, scope: !6845)
!6848 = !DILocation(line: 5117, column: 29, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 5117, column: 3)
!6850 = !DILocation(line: 5117, column: 27, scope: !6849)
!6851 = !DILocation(line: 5117, column: 3, scope: !6845)
!6852 = !DILocation(line: 5119, column: 11, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6854, file: !3, line: 5119, column: 11)
!6854 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 5118, column: 5)
!6855 = !DILocation(line: 5119, column: 23, scope: !6853)
!6856 = !DILocation(line: 5119, column: 28, scope: !6853)
!6857 = !DILocation(line: 5119, column: 33, scope: !6853)
!6858 = !DILocation(line: 5119, column: 11, scope: !6854)
!6859 = !DILocation(line: 5120, column: 9, scope: !6853)
!6860 = !DILocation(line: 5121, column: 5, scope: !6854)
!6861 = !DILocation(line: 5117, column: 35, scope: !6849)
!6862 = !DILocation(line: 5117, column: 3, scope: !6849)
!6863 = distinct !{!6863, !6851, !6864}
!6864 = !DILocation(line: 5121, column: 5, scope: !6845)
!6865 = !DILocation(line: 5123, column: 10, scope: !6729)
!6866 = !DILocation(line: 5123, column: 3, scope: !6729)
!6867 = distinct !DISubprogram(name: "length_of_file_name_and_frills", scope: !3, file: !3, line: 4813, type: !6868, scopeLine: 4814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6868 = !DISubroutineType(types: !6869)
!6869 = !{!149, !183}
!6870 = !DILocalVariable(name: "f", arg: 1, scope: !6867, file: !3, line: 4813, type: !183)
!6871 = !DILocation(line: 4813, column: 56, scope: !6867)
!6872 = !DILocalVariable(name: "len", scope: !6867, file: !3, line: 4815, type: !149)
!6873 = !DILocation(line: 4815, column: 10, scope: !6867)
!6874 = !DILocalVariable(name: "buf", scope: !6867, file: !3, line: 4816, type: !746)
!6875 = !DILocation(line: 4816, column: 8, scope: !6867)
!6876 = !DILocation(line: 4818, column: 7, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 4818, column: 7)
!6878 = !DILocation(line: 4818, column: 7, scope: !6867)
!6879 = !DILocation(line: 4819, column: 17, scope: !6877)
!6880 = !DILocation(line: 4819, column: 24, scope: !6877)
!6881 = !DILocation(line: 4820, column: 38, scope: !6877)
!6882 = !DILocation(line: 4820, column: 41, scope: !6877)
!6883 = !DILocation(line: 4820, column: 46, scope: !6877)
!6884 = !DILocation(line: 4820, column: 54, scope: !6877)
!6885 = !DILocation(line: 4820, column: 27, scope: !6877)
!6886 = !DILocation(line: 4820, column: 19, scope: !6877)
!6887 = !DILocation(line: 4821, column: 19, scope: !6877)
!6888 = !DILocation(line: 4819, column: 14, scope: !6877)
!6889 = !DILocation(line: 4819, column: 9, scope: !6877)
!6890 = !DILocation(line: 4819, column: 5, scope: !6877)
!6891 = !DILocation(line: 4823, column: 7, scope: !6892)
!6892 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 4823, column: 7)
!6893 = !DILocation(line: 4823, column: 7, scope: !6867)
!6894 = !DILocation(line: 4824, column: 17, scope: !6892)
!6895 = !DILocation(line: 4824, column: 24, scope: !6892)
!6896 = !DILocation(line: 4825, column: 29, scope: !6892)
!6897 = !DILocation(line: 4825, column: 32, scope: !6892)
!6898 = !DILocation(line: 4825, column: 27, scope: !6892)
!6899 = !DILocation(line: 4826, column: 45, scope: !6892)
!6900 = !DILocation(line: 4826, column: 67, scope: !6892)
!6901 = !DILocation(line: 4827, column: 45, scope: !6892)
!6902 = !DILocation(line: 4828, column: 45, scope: !6892)
!6903 = !DILocation(line: 4826, column: 29, scope: !6892)
!6904 = !DILocation(line: 4825, column: 19, scope: !6892)
!6905 = !DILocation(line: 4829, column: 19, scope: !6892)
!6906 = !DILocation(line: 4824, column: 14, scope: !6892)
!6907 = !DILocation(line: 4824, column: 9, scope: !6892)
!6908 = !DILocation(line: 4824, column: 5, scope: !6892)
!6909 = !DILocation(line: 4831, column: 7, scope: !6910)
!6910 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 4831, column: 7)
!6911 = !DILocation(line: 4831, column: 7, scope: !6867)
!6912 = !DILocation(line: 4832, column: 17, scope: !6910)
!6913 = !DILocation(line: 4832, column: 24, scope: !6910)
!6914 = !DILocation(line: 4832, column: 49, scope: !6910)
!6915 = !DILocation(line: 4832, column: 52, scope: !6910)
!6916 = !DILocation(line: 4832, column: 41, scope: !6910)
!6917 = !DILocation(line: 4832, column: 64, scope: !6910)
!6918 = !DILocation(line: 4832, column: 14, scope: !6910)
!6919 = !DILocation(line: 4832, column: 9, scope: !6910)
!6920 = !DILocation(line: 4832, column: 5, scope: !6910)
!6921 = !DILocation(line: 4834, column: 28, scope: !6867)
!6922 = !DILocation(line: 4834, column: 31, scope: !6867)
!6923 = !DILocation(line: 4834, column: 37, scope: !6867)
!6924 = !DILocation(line: 4834, column: 63, scope: !6867)
!6925 = !DILocation(line: 4834, column: 66, scope: !6867)
!6926 = !DILocation(line: 4834, column: 10, scope: !6867)
!6927 = !DILocation(line: 4834, column: 7, scope: !6867)
!6928 = !DILocation(line: 4836, column: 7, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 4836, column: 7)
!6930 = !DILocation(line: 4836, column: 23, scope: !6929)
!6931 = !DILocation(line: 4836, column: 7, scope: !6867)
!6932 = !DILocalVariable(name: "c", scope: !6933, file: !3, line: 4838, type: !144)
!6933 = distinct !DILexicalBlock(scope: !6929, file: !3, line: 4837, column: 5)
!6934 = !DILocation(line: 4838, column: 12, scope: !6933)
!6935 = !DILocation(line: 4838, column: 36, scope: !6933)
!6936 = !DILocation(line: 4838, column: 39, scope: !6933)
!6937 = !DILocation(line: 4838, column: 48, scope: !6933)
!6938 = !DILocation(line: 4838, column: 51, scope: !6933)
!6939 = !DILocation(line: 4838, column: 56, scope: !6933)
!6940 = !DILocation(line: 4838, column: 65, scope: !6933)
!6941 = !DILocation(line: 4838, column: 68, scope: !6933)
!6942 = !DILocation(line: 4838, column: 16, scope: !6933)
!6943 = !DILocation(line: 4839, column: 15, scope: !6933)
!6944 = !DILocation(line: 4839, column: 17, scope: !6933)
!6945 = !DILocation(line: 4839, column: 14, scope: !6933)
!6946 = !DILocation(line: 4839, column: 11, scope: !6933)
!6947 = !DILocation(line: 4840, column: 5, scope: !6933)
!6948 = !DILocation(line: 4842, column: 10, scope: !6867)
!6949 = !DILocation(line: 4842, column: 3, scope: !6867)
!6950 = distinct !DISubprogram(name: "indent", scope: !3, file: !3, line: 4964, type: !6951, scopeLine: 4965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6951 = !DISubroutineType(types: !6952)
!6952 = !{null, !149, !149}
!6953 = !DILocalVariable(name: "from", arg: 1, scope: !6950, file: !3, line: 4964, type: !149)
!6954 = !DILocation(line: 4964, column: 16, scope: !6950)
!6955 = !DILocalVariable(name: "to", arg: 2, scope: !6950, file: !3, line: 4964, type: !149)
!6956 = !DILocation(line: 4964, column: 29, scope: !6950)
!6957 = !DILocation(line: 4966, column: 3, scope: !6950)
!6958 = !DILocation(line: 4966, column: 10, scope: !6950)
!6959 = !DILocation(line: 4966, column: 17, scope: !6950)
!6960 = !DILocation(line: 4966, column: 15, scope: !6950)
!6961 = !DILocation(line: 4968, column: 11, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 4968, column: 11)
!6963 = distinct !DILexicalBlock(scope: !6950, file: !3, line: 4967, column: 5)
!6964 = !DILocation(line: 4968, column: 19, scope: !6962)
!6965 = !DILocation(line: 4968, column: 24, scope: !6962)
!6966 = !DILocation(line: 4968, column: 27, scope: !6962)
!6967 = !DILocation(line: 4968, column: 32, scope: !6962)
!6968 = !DILocation(line: 4968, column: 30, scope: !6962)
!6969 = !DILocation(line: 4968, column: 43, scope: !6962)
!6970 = !DILocation(line: 4968, column: 48, scope: !6962)
!6971 = !DILocation(line: 4968, column: 55, scope: !6962)
!6972 = !DILocation(line: 4968, column: 53, scope: !6962)
!6973 = !DILocation(line: 4968, column: 40, scope: !6962)
!6974 = !DILocation(line: 4968, column: 11, scope: !6963)
!6975 = !DILocation(line: 4970, column: 11, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6962, file: !3, line: 4969, column: 9)
!6977 = !DILocation(line: 4971, column: 19, scope: !6976)
!6978 = !DILocation(line: 4971, column: 29, scope: !6976)
!6979 = !DILocation(line: 4971, column: 36, scope: !6976)
!6980 = !DILocation(line: 4971, column: 34, scope: !6976)
!6981 = !DILocation(line: 4971, column: 27, scope: !6976)
!6982 = !DILocation(line: 4971, column: 16, scope: !6976)
!6983 = !DILocation(line: 4972, column: 9, scope: !6976)
!6984 = !DILocation(line: 4975, column: 11, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6962, file: !3, line: 4974, column: 9)
!6986 = !DILocation(line: 4976, column: 15, scope: !6985)
!6987 = distinct !{!6987, !6957, !6988}
!6988 = !DILocation(line: 4978, column: 5, scope: !6950)
!6989 = !DILocation(line: 4979, column: 1, scope: !6950)
!6990 = distinct !DISubprogram(name: "quote_name_width", scope: !3, file: !3, line: 4432, type: !6991, scopeLine: 4434, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!6991 = !DISubroutineType(types: !6992)
!6992 = !{!149, !146, !4707, !27}
!6993 = !DILocalVariable(name: "name", arg: 1, scope: !6990, file: !3, line: 4432, type: !146)
!6994 = !DILocation(line: 4432, column: 31, scope: !6990)
!6995 = !DILocalVariable(name: "options", arg: 2, scope: !6990, file: !3, line: 4432, type: !4707)
!6996 = !DILocation(line: 4432, column: 67, scope: !6990)
!6997 = !DILocalVariable(name: "needs_general_quoting", arg: 3, scope: !6990, file: !3, line: 4433, type: !27)
!6998 = !DILocation(line: 4433, column: 23, scope: !6990)
!6999 = !DILocalVariable(name: "smallbuf", scope: !6990, file: !3, line: 4435, type: !749)
!7000 = !DILocation(line: 4435, column: 8, scope: !6990)
!7001 = !DILocalVariable(name: "buf", scope: !6990, file: !3, line: 4436, type: !143)
!7002 = !DILocation(line: 4436, column: 9, scope: !6990)
!7003 = !DILocation(line: 4436, column: 15, scope: !6990)
!7004 = !DILocalVariable(name: "width", scope: !6990, file: !3, line: 4437, type: !149)
!7005 = !DILocation(line: 4437, column: 10, scope: !6990)
!7006 = !DILocalVariable(name: "pad", scope: !6990, file: !3, line: 4438, type: !141)
!7007 = !DILocation(line: 4438, column: 8, scope: !6990)
!7008 = !DILocation(line: 4440, column: 51, scope: !6990)
!7009 = !DILocation(line: 4440, column: 57, scope: !6990)
!7010 = !DILocation(line: 4441, column: 19, scope: !6990)
!7011 = !DILocation(line: 4440, column: 3, scope: !6990)
!7012 = !DILocation(line: 4443, column: 7, scope: !7013)
!7013 = distinct !DILexicalBlock(scope: !6990, file: !3, line: 4443, column: 7)
!7014 = !DILocation(line: 4443, column: 14, scope: !7013)
!7015 = !DILocation(line: 4443, column: 11, scope: !7013)
!7016 = !DILocation(line: 4443, column: 23, scope: !7013)
!7017 = !DILocation(line: 4443, column: 26, scope: !7013)
!7018 = !DILocation(line: 4443, column: 33, scope: !7013)
!7019 = !DILocation(line: 4443, column: 30, scope: !7013)
!7020 = !DILocation(line: 4443, column: 7, scope: !6990)
!7021 = !DILocation(line: 4444, column: 11, scope: !7013)
!7022 = !DILocation(line: 4444, column: 5, scope: !7013)
!7023 = !DILocation(line: 4446, column: 12, scope: !6990)
!7024 = !DILocation(line: 4446, column: 9, scope: !6990)
!7025 = !DILocation(line: 4448, column: 10, scope: !6990)
!7026 = !DILocation(line: 4448, column: 3, scope: !6990)
!7027 = !DILocalVariable(name: "i", scope: !1078, file: !3, line: 5011, type: !149)
!7028 = !DILocation(line: 5011, column: 10, scope: !1078)
!7029 = !DILocalVariable(name: "max_cols", scope: !1078, file: !3, line: 5012, type: !149)
!7030 = !DILocation(line: 5012, column: 10, scope: !1078)
!7031 = !DILocation(line: 5012, column: 21, scope: !1078)
!7032 = !DILocation(line: 5017, column: 7, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !1078, file: !3, line: 5017, column: 7)
!7034 = !DILocation(line: 5017, column: 27, scope: !7033)
!7035 = !DILocation(line: 5017, column: 25, scope: !7033)
!7036 = !DILocation(line: 5017, column: 7, scope: !1078)
!7037 = !DILocalVariable(name: "new_column_info_alloc", scope: !7038, file: !3, line: 5019, type: !149)
!7038 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 5018, column: 5)
!7039 = !DILocation(line: 5019, column: 14, scope: !7038)
!7040 = !DILocalVariable(name: "p", scope: !7038, file: !3, line: 5020, type: !148)
!7041 = !DILocation(line: 5020, column: 15, scope: !7038)
!7042 = !DILocation(line: 5022, column: 11, scope: !7043)
!7043 = distinct !DILexicalBlock(scope: !7038, file: !3, line: 5022, column: 11)
!7044 = !DILocation(line: 5022, column: 22, scope: !7043)
!7045 = !DILocation(line: 5022, column: 30, scope: !7043)
!7046 = !DILocation(line: 5022, column: 20, scope: !7043)
!7047 = !DILocation(line: 5022, column: 11, scope: !7038)
!7048 = !DILocation(line: 5029, column: 36, scope: !7049)
!7049 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 5023, column: 9)
!7050 = !DILocation(line: 5029, column: 49, scope: !7049)
!7051 = !DILocation(line: 5029, column: 25, scope: !7049)
!7052 = !DILocation(line: 5029, column: 23, scope: !7049)
!7053 = !DILocation(line: 5031, column: 39, scope: !7049)
!7054 = !DILocation(line: 5031, column: 37, scope: !7049)
!7055 = !DILocation(line: 5031, column: 33, scope: !7049)
!7056 = !DILocation(line: 5032, column: 9, scope: !7049)
!7057 = !DILocation(line: 5035, column: 36, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 5034, column: 9)
!7059 = !DILocation(line: 5035, column: 49, scope: !7058)
!7060 = !DILocation(line: 5035, column: 25, scope: !7058)
!7061 = !DILocation(line: 5035, column: 23, scope: !7058)
!7062 = !DILocation(line: 5036, column: 35, scope: !7058)
!7063 = !DILocation(line: 5036, column: 33, scope: !7058)
!7064 = !DILocalVariable(name: "column_info_growth", scope: !7065, file: !3, line: 5044, type: !149)
!7065 = distinct !DILexicalBlock(scope: !7038, file: !3, line: 5043, column: 7)
!7066 = !DILocation(line: 5044, column: 16, scope: !7065)
!7067 = !DILocation(line: 5044, column: 37, scope: !7065)
!7068 = !DILocation(line: 5044, column: 61, scope: !7065)
!7069 = !DILocation(line: 5044, column: 59, scope: !7065)
!7070 = !DILocalVariable(name: "s", scope: !7065, file: !3, line: 5045, type: !149)
!7071 = !DILocation(line: 5045, column: 16, scope: !7065)
!7072 = !DILocation(line: 5045, column: 20, scope: !7065)
!7073 = !DILocation(line: 5045, column: 38, scope: !7065)
!7074 = !DILocation(line: 5045, column: 44, scope: !7065)
!7075 = !DILocation(line: 5045, column: 42, scope: !7065)
!7076 = !DILocalVariable(name: "t", scope: !7065, file: !3, line: 5046, type: !149)
!7077 = !DILocation(line: 5046, column: 16, scope: !7065)
!7078 = !DILocation(line: 5046, column: 20, scope: !7065)
!7079 = !DILocation(line: 5046, column: 24, scope: !7065)
!7080 = !DILocation(line: 5046, column: 22, scope: !7065)
!7081 = !DILocation(line: 5047, column: 13, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7065, file: !3, line: 5047, column: 13)
!7083 = !DILocation(line: 5047, column: 17, scope: !7082)
!7084 = !DILocation(line: 5047, column: 15, scope: !7082)
!7085 = !DILocation(line: 5047, column: 39, scope: !7082)
!7086 = !DILocation(line: 5047, column: 42, scope: !7082)
!7087 = !DILocation(line: 5047, column: 46, scope: !7082)
!7088 = !DILocation(line: 5047, column: 44, scope: !7082)
!7089 = !DILocation(line: 5047, column: 68, scope: !7082)
!7090 = !DILocation(line: 5047, column: 65, scope: !7082)
!7091 = !DILocation(line: 5047, column: 13, scope: !7065)
!7092 = !DILocation(line: 5048, column: 11, scope: !7082)
!7093 = !DILocation(line: 5049, column: 23, scope: !7065)
!7094 = !DILocation(line: 5049, column: 25, scope: !7065)
!7095 = !DILocation(line: 5049, column: 13, scope: !7065)
!7096 = !DILocation(line: 5049, column: 11, scope: !7065)
!7097 = !DILocation(line: 5053, column: 16, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7038, file: !3, line: 5053, column: 7)
!7099 = !DILocation(line: 5053, column: 14, scope: !7098)
!7100 = !DILocation(line: 5053, column: 12, scope: !7098)
!7101 = !DILocation(line: 5053, column: 35, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 5053, column: 7)
!7103 = !DILocation(line: 5053, column: 39, scope: !7102)
!7104 = !DILocation(line: 5053, column: 37, scope: !7102)
!7105 = !DILocation(line: 5053, column: 7, scope: !7098)
!7106 = !DILocation(line: 5055, column: 36, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 5054, column: 9)
!7108 = !DILocation(line: 5055, column: 11, scope: !7107)
!7109 = !DILocation(line: 5055, column: 23, scope: !7107)
!7110 = !DILocation(line: 5055, column: 26, scope: !7107)
!7111 = !DILocation(line: 5055, column: 34, scope: !7107)
!7112 = !DILocation(line: 5056, column: 16, scope: !7107)
!7113 = !DILocation(line: 5056, column: 18, scope: !7107)
!7114 = !DILocation(line: 5056, column: 13, scope: !7107)
!7115 = !DILocation(line: 5057, column: 9, scope: !7107)
!7116 = !DILocation(line: 5053, column: 63, scope: !7102)
!7117 = !DILocation(line: 5053, column: 7, scope: !7102)
!7118 = distinct !{!7118, !7105, !7119}
!7119 = !DILocation(line: 5057, column: 9, scope: !7098)
!7120 = !DILocation(line: 5059, column: 27, scope: !7038)
!7121 = !DILocation(line: 5059, column: 25, scope: !7038)
!7122 = !DILocation(line: 5060, column: 5, scope: !7038)
!7123 = !DILocation(line: 5062, column: 10, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !1078, file: !3, line: 5062, column: 3)
!7125 = !DILocation(line: 5062, column: 8, scope: !7124)
!7126 = !DILocation(line: 5062, column: 15, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 5062, column: 3)
!7128 = !DILocation(line: 5062, column: 19, scope: !7127)
!7129 = !DILocation(line: 5062, column: 17, scope: !7127)
!7130 = !DILocation(line: 5062, column: 3, scope: !7124)
!7131 = !DILocalVariable(name: "j", scope: !7132, file: !3, line: 5064, type: !149)
!7132 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 5063, column: 5)
!7133 = !DILocation(line: 5064, column: 14, scope: !7132)
!7134 = !DILocation(line: 5066, column: 7, scope: !7132)
!7135 = !DILocation(line: 5066, column: 19, scope: !7132)
!7136 = !DILocation(line: 5066, column: 22, scope: !7132)
!7137 = !DILocation(line: 5066, column: 32, scope: !7132)
!7138 = !DILocation(line: 5067, column: 34, scope: !7132)
!7139 = !DILocation(line: 5067, column: 36, scope: !7132)
!7140 = !DILocation(line: 5067, column: 41, scope: !7132)
!7141 = !DILocation(line: 5067, column: 7, scope: !7132)
!7142 = !DILocation(line: 5067, column: 19, scope: !7132)
!7143 = !DILocation(line: 5067, column: 22, scope: !7132)
!7144 = !DILocation(line: 5067, column: 31, scope: !7132)
!7145 = !DILocation(line: 5068, column: 14, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 5068, column: 7)
!7147 = !DILocation(line: 5068, column: 12, scope: !7146)
!7148 = !DILocation(line: 5068, column: 19, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7146, file: !3, line: 5068, column: 7)
!7150 = !DILocation(line: 5068, column: 24, scope: !7149)
!7151 = !DILocation(line: 5068, column: 21, scope: !7149)
!7152 = !DILocation(line: 5068, column: 7, scope: !7146)
!7153 = !DILocation(line: 5069, column: 9, scope: !7149)
!7154 = !DILocation(line: 5069, column: 21, scope: !7149)
!7155 = !DILocation(line: 5069, column: 24, scope: !7149)
!7156 = !DILocation(line: 5069, column: 32, scope: !7149)
!7157 = !DILocation(line: 5069, column: 35, scope: !7149)
!7158 = !DILocation(line: 5068, column: 27, scope: !7149)
!7159 = !DILocation(line: 5068, column: 7, scope: !7149)
!7160 = distinct !{!7160, !7152, !7161}
!7161 = !DILocation(line: 5069, column: 37, scope: !7146)
!7162 = !DILocation(line: 5070, column: 5, scope: !7132)
!7163 = !DILocation(line: 5062, column: 29, scope: !7127)
!7164 = !DILocation(line: 5062, column: 3, scope: !7127)
!7165 = distinct !{!7165, !7130, !7166}
!7166 = !DILocation(line: 5070, column: 5, scope: !7124)
!7167 = !DILocation(line: 5071, column: 1, scope: !1078)
!7168 = distinct !DISubprogram(name: "is_directory", scope: !3, file: !3, line: 3435, type: !7169, scopeLine: 3436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7169 = !DISubroutineType(types: !7170)
!7170 = !{!141, !183}
!7171 = !DILocalVariable(name: "f", arg: 1, scope: !7168, file: !3, line: 3435, type: !183)
!7172 = !DILocation(line: 3435, column: 38, scope: !7168)
!7173 = !DILocation(line: 3437, column: 10, scope: !7168)
!7174 = !DILocation(line: 3437, column: 13, scope: !7168)
!7175 = !DILocation(line: 3437, column: 22, scope: !7168)
!7176 = !DILocation(line: 3437, column: 35, scope: !7168)
!7177 = !DILocation(line: 3437, column: 38, scope: !7168)
!7178 = !DILocation(line: 3437, column: 41, scope: !7168)
!7179 = !DILocation(line: 3437, column: 50, scope: !7168)
!7180 = !DILocation(line: 3437, column: 3, scope: !7168)
!7181 = distinct !DISubprogram(name: "basename_is_dot_or_dotdot", scope: !3, file: !3, line: 3497, type: !4849, scopeLine: 3498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7182 = !DILocalVariable(name: "name", arg: 1, scope: !7181, file: !3, line: 3497, type: !146)
!7183 = !DILocation(line: 3497, column: 40, scope: !7181)
!7184 = !DILocalVariable(name: "base", scope: !7181, file: !3, line: 3499, type: !146)
!7185 = !DILocation(line: 3499, column: 15, scope: !7181)
!7186 = !DILocation(line: 3499, column: 38, scope: !7181)
!7187 = !DILocation(line: 3499, column: 22, scope: !7181)
!7188 = !DILocation(line: 3500, column: 25, scope: !7181)
!7189 = !DILocation(line: 3500, column: 10, scope: !7181)
!7190 = !DILocation(line: 3500, column: 3, scope: !7181)
!7191 = distinct !DISubprogram(name: "free_ent", scope: !3, file: !3, line: 2974, type: !7192, scopeLine: 2975, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7192 = !DISubroutineType(types: !7193)
!7193 = !{null, !260}
!7194 = !DILocalVariable(name: "f", arg: 1, scope: !7191, file: !3, line: 2974, type: !260)
!7195 = !DILocation(line: 2974, column: 28, scope: !7191)
!7196 = !DILocation(line: 2976, column: 9, scope: !7191)
!7197 = !DILocation(line: 2976, column: 12, scope: !7191)
!7198 = !DILocation(line: 2976, column: 3, scope: !7191)
!7199 = !DILocation(line: 2977, column: 9, scope: !7191)
!7200 = !DILocation(line: 2977, column: 12, scope: !7191)
!7201 = !DILocation(line: 2977, column: 3, scope: !7191)
!7202 = !DILocation(line: 2978, column: 9, scope: !7191)
!7203 = !DILocation(line: 2978, column: 12, scope: !7191)
!7204 = !DILocation(line: 2978, column: 3, scope: !7191)
!7205 = !DILocation(line: 2979, column: 7, scope: !7206)
!7206 = distinct !DILexicalBlock(scope: !7191, file: !3, line: 2979, column: 7)
!7207 = !DILocation(line: 2979, column: 10, scope: !7206)
!7208 = !DILocation(line: 2979, column: 19, scope: !7206)
!7209 = !DILocation(line: 2979, column: 7, scope: !7191)
!7210 = !DILocation(line: 2981, column: 11, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7212, file: !3, line: 2981, column: 11)
!7212 = distinct !DILexicalBlock(scope: !7206, file: !3, line: 2980, column: 5)
!7213 = !DILocation(line: 2981, column: 11, scope: !7212)
!7214 = !DILocation(line: 2982, column: 15, scope: !7211)
!7215 = !DILocation(line: 2982, column: 18, scope: !7211)
!7216 = !DILocation(line: 2982, column: 9, scope: !7211)
!7217 = !DILocation(line: 2984, column: 18, scope: !7211)
!7218 = !DILocation(line: 2984, column: 21, scope: !7211)
!7219 = !DILocation(line: 2984, column: 9, scope: !7211)
!7220 = !DILocation(line: 2985, column: 5, scope: !7212)
!7221 = !DILocation(line: 2986, column: 1, scope: !7191)
!7222 = distinct !DISubprogram(name: "is_smack_enabled", scope: !7223, file: !7223, line: 39, type: !7224, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7223 = !DIFile(filename: "./lib/smack.h", directory: "/home/mbarbar/software/coreutils-8.31")
!7224 = !DISubroutineType(types: !7225)
!7225 = !{!141}
!7226 = !DILocation(line: 44, column: 3, scope: !7222)
!7227 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !838, file: !838, line: 265, type: !4849, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7228 = !DILocalVariable(name: "file_name", arg: 1, scope: !7227, file: !838, line: 265, type: !146)
!7229 = !DILocation(line: 265, column: 28, scope: !7227)
!7230 = !DILocation(line: 267, column: 7, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !7227, file: !838, line: 267, column: 7)
!7232 = !DILocation(line: 267, column: 20, scope: !7231)
!7233 = !DILocation(line: 267, column: 7, scope: !7227)
!7234 = !DILocalVariable(name: "sep", scope: !7235, file: !838, line: 269, type: !144)
!7235 = distinct !DILexicalBlock(scope: !7231, file: !838, line: 268, column: 5)
!7236 = !DILocation(line: 269, column: 12, scope: !7235)
!7237 = !DILocation(line: 269, column: 18, scope: !7235)
!7238 = !DILocation(line: 269, column: 29, scope: !7235)
!7239 = !DILocation(line: 269, column: 42, scope: !7235)
!7240 = !DILocation(line: 269, column: 50, scope: !7235)
!7241 = !DILocation(line: 270, column: 17, scope: !7235)
!7242 = !DILocation(line: 270, column: 21, scope: !7235)
!7243 = !DILocation(line: 270, column: 24, scope: !7235)
!7244 = !DILocation(line: 270, column: 7, scope: !7235)
!7245 = !DILocation(line: 273, column: 5, scope: !7231)
!7246 = !DILocation(line: 274, column: 1, scope: !7227)
!7247 = distinct !DISubprogram(name: "initialize_ordering_vector", scope: !3, file: !3, line: 3783, type: !532, scopeLine: 3784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7248 = !DILocalVariable(name: "i", scope: !7249, file: !3, line: 3785, type: !149)
!7249 = distinct !DILexicalBlock(scope: !7247, file: !3, line: 3785, column: 3)
!7250 = !DILocation(line: 3785, column: 15, scope: !7249)
!7251 = !DILocation(line: 3785, column: 8, scope: !7249)
!7252 = !DILocation(line: 3785, column: 22, scope: !7253)
!7253 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 3785, column: 3)
!7254 = !DILocation(line: 3785, column: 26, scope: !7253)
!7255 = !DILocation(line: 3785, column: 24, scope: !7253)
!7256 = !DILocation(line: 3785, column: 3, scope: !7249)
!7257 = !DILocation(line: 3786, column: 23, scope: !7253)
!7258 = !DILocation(line: 3786, column: 32, scope: !7253)
!7259 = !DILocation(line: 3786, column: 22, scope: !7253)
!7260 = !DILocation(line: 3786, column: 5, scope: !7253)
!7261 = !DILocation(line: 3786, column: 17, scope: !7253)
!7262 = !DILocation(line: 3786, column: 20, scope: !7253)
!7263 = !DILocation(line: 3785, column: 39, scope: !7253)
!7264 = !DILocation(line: 3785, column: 3, scope: !7253)
!7265 = distinct !{!7265, !7256, !7266}
!7266 = !DILocation(line: 3786, column: 33, scope: !7249)
!7267 = !DILocation(line: 3787, column: 1, scope: !7247)
!7268 = distinct !DISubprogram(name: "xstrcoll_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7269 = !DILocalVariable(name: "a", arg: 1, scope: !7268, file: !3, line: 3691, type: !797)
!7270 = !DILocation(line: 3691, column: 1, scope: !7268)
!7271 = !DILocalVariable(name: "b", arg: 2, scope: !7268, file: !3, line: 3691, type: !797)
!7272 = distinct !DISubprogram(name: "xstrcoll_df_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7273 = !DILocalVariable(name: "a", arg: 1, scope: !7272, file: !3, line: 3691, type: !797)
!7274 = !DILocation(line: 3691, column: 1, scope: !7272)
!7275 = !DILocalVariable(name: "b", arg: 2, scope: !7272, file: !3, line: 3691, type: !797)
!7276 = !DILocalVariable(name: "a_is_dir", scope: !7277, file: !3, line: 3691, type: !141)
!7277 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 3691, column: 1)
!7278 = !DILocation(line: 3691, column: 1, scope: !7277)
!7279 = !DILocalVariable(name: "b_is_dir", scope: !7277, file: !3, line: 3691, type: !141)
!7280 = !DILocation(line: 3691, column: 1, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7277, file: !3, line: 3691, column: 1)
!7282 = !DILocation(line: 3691, column: 1, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7277, file: !3, line: 3691, column: 1)
!7284 = distinct !DISubprogram(name: "rev_xstrcoll_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7285 = !DILocalVariable(name: "a", arg: 1, scope: !7284, file: !3, line: 3691, type: !797)
!7286 = !DILocation(line: 3691, column: 1, scope: !7284)
!7287 = !DILocalVariable(name: "b", arg: 2, scope: !7284, file: !3, line: 3691, type: !797)
!7288 = distinct !DISubprogram(name: "rev_xstrcoll_df_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7289 = !DILocalVariable(name: "a", arg: 1, scope: !7288, file: !3, line: 3691, type: !797)
!7290 = !DILocation(line: 3691, column: 1, scope: !7288)
!7291 = !DILocalVariable(name: "b", arg: 2, scope: !7288, file: !3, line: 3691, type: !797)
!7292 = !DILocalVariable(name: "a_is_dir", scope: !7293, file: !3, line: 3691, type: !141)
!7293 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 3691, column: 1)
!7294 = !DILocation(line: 3691, column: 1, scope: !7293)
!7295 = !DILocalVariable(name: "b_is_dir", scope: !7293, file: !3, line: 3691, type: !141)
!7296 = !DILocation(line: 3691, column: 1, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7293, file: !3, line: 3691, column: 1)
!7298 = !DILocation(line: 3691, column: 1, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7293, file: !3, line: 3691, column: 1)
!7300 = distinct !DISubprogram(name: "strcmp_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7301 = !DILocalVariable(name: "a", arg: 1, scope: !7300, file: !3, line: 3691, type: !797)
!7302 = !DILocation(line: 3691, column: 1, scope: !7300)
!7303 = !DILocalVariable(name: "b", arg: 2, scope: !7300, file: !3, line: 3691, type: !797)
!7304 = distinct !DISubprogram(name: "strcmp_df_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7305 = !DILocalVariable(name: "a", arg: 1, scope: !7304, file: !3, line: 3691, type: !797)
!7306 = !DILocation(line: 3691, column: 1, scope: !7304)
!7307 = !DILocalVariable(name: "b", arg: 2, scope: !7304, file: !3, line: 3691, type: !797)
!7308 = !DILocalVariable(name: "a_is_dir", scope: !7309, file: !3, line: 3691, type: !141)
!7309 = distinct !DILexicalBlock(scope: !7304, file: !3, line: 3691, column: 1)
!7310 = !DILocation(line: 3691, column: 1, scope: !7309)
!7311 = !DILocalVariable(name: "b_is_dir", scope: !7309, file: !3, line: 3691, type: !141)
!7312 = !DILocation(line: 3691, column: 1, scope: !7313)
!7313 = distinct !DILexicalBlock(scope: !7309, file: !3, line: 3691, column: 1)
!7314 = !DILocation(line: 3691, column: 1, scope: !7315)
!7315 = distinct !DILexicalBlock(scope: !7309, file: !3, line: 3691, column: 1)
!7316 = distinct !DISubprogram(name: "rev_strcmp_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7317 = !DILocalVariable(name: "a", arg: 1, scope: !7316, file: !3, line: 3691, type: !797)
!7318 = !DILocation(line: 3691, column: 1, scope: !7316)
!7319 = !DILocalVariable(name: "b", arg: 2, scope: !7316, file: !3, line: 3691, type: !797)
!7320 = distinct !DISubprogram(name: "rev_strcmp_df_name", scope: !3, file: !3, line: 3691, type: !795, scopeLine: 3691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7321 = !DILocalVariable(name: "a", arg: 1, scope: !7320, file: !3, line: 3691, type: !797)
!7322 = !DILocation(line: 3691, column: 1, scope: !7320)
!7323 = !DILocalVariable(name: "b", arg: 2, scope: !7320, file: !3, line: 3691, type: !797)
!7324 = !DILocalVariable(name: "a_is_dir", scope: !7325, file: !3, line: 3691, type: !141)
!7325 = distinct !DILexicalBlock(scope: !7320, file: !3, line: 3691, column: 1)
!7326 = !DILocation(line: 3691, column: 1, scope: !7325)
!7327 = !DILocalVariable(name: "b_is_dir", scope: !7325, file: !3, line: 3691, type: !141)
!7328 = !DILocation(line: 3691, column: 1, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7325, file: !3, line: 3691, column: 1)
!7330 = !DILocation(line: 3691, column: 1, scope: !7331)
!7331 = distinct !DILexicalBlock(scope: !7325, file: !3, line: 3691, column: 1)
!7332 = distinct !DISubprogram(name: "xstrcoll_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7333 = !DILocalVariable(name: "a", arg: 1, scope: !7332, file: !3, line: 3692, type: !797)
!7334 = !DILocation(line: 3692, column: 1, scope: !7332)
!7335 = !DILocalVariable(name: "b", arg: 2, scope: !7332, file: !3, line: 3692, type: !797)
!7336 = distinct !DISubprogram(name: "xstrcoll_df_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7337 = !DILocalVariable(name: "a", arg: 1, scope: !7336, file: !3, line: 3692, type: !797)
!7338 = !DILocation(line: 3692, column: 1, scope: !7336)
!7339 = !DILocalVariable(name: "b", arg: 2, scope: !7336, file: !3, line: 3692, type: !797)
!7340 = !DILocalVariable(name: "a_is_dir", scope: !7341, file: !3, line: 3692, type: !141)
!7341 = distinct !DILexicalBlock(scope: !7336, file: !3, line: 3692, column: 1)
!7342 = !DILocation(line: 3692, column: 1, scope: !7341)
!7343 = !DILocalVariable(name: "b_is_dir", scope: !7341, file: !3, line: 3692, type: !141)
!7344 = !DILocation(line: 3692, column: 1, scope: !7345)
!7345 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 3692, column: 1)
!7346 = !DILocation(line: 3692, column: 1, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 3692, column: 1)
!7348 = distinct !DISubprogram(name: "rev_xstrcoll_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7349 = !DILocalVariable(name: "a", arg: 1, scope: !7348, file: !3, line: 3692, type: !797)
!7350 = !DILocation(line: 3692, column: 1, scope: !7348)
!7351 = !DILocalVariable(name: "b", arg: 2, scope: !7348, file: !3, line: 3692, type: !797)
!7352 = distinct !DISubprogram(name: "rev_xstrcoll_df_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7353 = !DILocalVariable(name: "a", arg: 1, scope: !7352, file: !3, line: 3692, type: !797)
!7354 = !DILocation(line: 3692, column: 1, scope: !7352)
!7355 = !DILocalVariable(name: "b", arg: 2, scope: !7352, file: !3, line: 3692, type: !797)
!7356 = !DILocalVariable(name: "a_is_dir", scope: !7357, file: !3, line: 3692, type: !141)
!7357 = distinct !DILexicalBlock(scope: !7352, file: !3, line: 3692, column: 1)
!7358 = !DILocation(line: 3692, column: 1, scope: !7357)
!7359 = !DILocalVariable(name: "b_is_dir", scope: !7357, file: !3, line: 3692, type: !141)
!7360 = !DILocation(line: 3692, column: 1, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7357, file: !3, line: 3692, column: 1)
!7362 = !DILocation(line: 3692, column: 1, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7357, file: !3, line: 3692, column: 1)
!7364 = distinct !DISubprogram(name: "strcmp_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7365 = !DILocalVariable(name: "a", arg: 1, scope: !7364, file: !3, line: 3692, type: !797)
!7366 = !DILocation(line: 3692, column: 1, scope: !7364)
!7367 = !DILocalVariable(name: "b", arg: 2, scope: !7364, file: !3, line: 3692, type: !797)
!7368 = distinct !DISubprogram(name: "strcmp_df_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7369 = !DILocalVariable(name: "a", arg: 1, scope: !7368, file: !3, line: 3692, type: !797)
!7370 = !DILocation(line: 3692, column: 1, scope: !7368)
!7371 = !DILocalVariable(name: "b", arg: 2, scope: !7368, file: !3, line: 3692, type: !797)
!7372 = !DILocalVariable(name: "a_is_dir", scope: !7373, file: !3, line: 3692, type: !141)
!7373 = distinct !DILexicalBlock(scope: !7368, file: !3, line: 3692, column: 1)
!7374 = !DILocation(line: 3692, column: 1, scope: !7373)
!7375 = !DILocalVariable(name: "b_is_dir", scope: !7373, file: !3, line: 3692, type: !141)
!7376 = !DILocation(line: 3692, column: 1, scope: !7377)
!7377 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 3692, column: 1)
!7378 = !DILocation(line: 3692, column: 1, scope: !7379)
!7379 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 3692, column: 1)
!7380 = distinct !DISubprogram(name: "rev_strcmp_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7381 = !DILocalVariable(name: "a", arg: 1, scope: !7380, file: !3, line: 3692, type: !797)
!7382 = !DILocation(line: 3692, column: 1, scope: !7380)
!7383 = !DILocalVariable(name: "b", arg: 2, scope: !7380, file: !3, line: 3692, type: !797)
!7384 = distinct !DISubprogram(name: "rev_strcmp_df_extension", scope: !3, file: !3, line: 3692, type: !795, scopeLine: 3692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7385 = !DILocalVariable(name: "a", arg: 1, scope: !7384, file: !3, line: 3692, type: !797)
!7386 = !DILocation(line: 3692, column: 1, scope: !7384)
!7387 = !DILocalVariable(name: "b", arg: 2, scope: !7384, file: !3, line: 3692, type: !797)
!7388 = !DILocalVariable(name: "a_is_dir", scope: !7389, file: !3, line: 3692, type: !141)
!7389 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 3692, column: 1)
!7390 = !DILocation(line: 3692, column: 1, scope: !7389)
!7391 = !DILocalVariable(name: "b_is_dir", scope: !7389, file: !3, line: 3692, type: !141)
!7392 = !DILocation(line: 3692, column: 1, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7389, file: !3, line: 3692, column: 1)
!7394 = !DILocation(line: 3692, column: 1, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7389, file: !3, line: 3692, column: 1)
!7396 = distinct !DISubprogram(name: "xstrcoll_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7397 = !DILocalVariable(name: "a", arg: 1, scope: !7396, file: !3, line: 3690, type: !797)
!7398 = !DILocation(line: 3690, column: 1, scope: !7396)
!7399 = !DILocalVariable(name: "b", arg: 2, scope: !7396, file: !3, line: 3690, type: !797)
!7400 = distinct !DISubprogram(name: "xstrcoll_df_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7401 = !DILocalVariable(name: "a", arg: 1, scope: !7400, file: !3, line: 3690, type: !797)
!7402 = !DILocation(line: 3690, column: 1, scope: !7400)
!7403 = !DILocalVariable(name: "b", arg: 2, scope: !7400, file: !3, line: 3690, type: !797)
!7404 = !DILocalVariable(name: "a_is_dir", scope: !7405, file: !3, line: 3690, type: !141)
!7405 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 3690, column: 1)
!7406 = !DILocation(line: 3690, column: 1, scope: !7405)
!7407 = !DILocalVariable(name: "b_is_dir", scope: !7405, file: !3, line: 3690, type: !141)
!7408 = !DILocation(line: 3690, column: 1, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 3690, column: 1)
!7410 = !DILocation(line: 3690, column: 1, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 3690, column: 1)
!7412 = distinct !DISubprogram(name: "rev_xstrcoll_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7413 = !DILocalVariable(name: "a", arg: 1, scope: !7412, file: !3, line: 3690, type: !797)
!7414 = !DILocation(line: 3690, column: 1, scope: !7412)
!7415 = !DILocalVariable(name: "b", arg: 2, scope: !7412, file: !3, line: 3690, type: !797)
!7416 = distinct !DISubprogram(name: "rev_xstrcoll_df_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7417 = !DILocalVariable(name: "a", arg: 1, scope: !7416, file: !3, line: 3690, type: !797)
!7418 = !DILocation(line: 3690, column: 1, scope: !7416)
!7419 = !DILocalVariable(name: "b", arg: 2, scope: !7416, file: !3, line: 3690, type: !797)
!7420 = !DILocalVariable(name: "a_is_dir", scope: !7421, file: !3, line: 3690, type: !141)
!7421 = distinct !DILexicalBlock(scope: !7416, file: !3, line: 3690, column: 1)
!7422 = !DILocation(line: 3690, column: 1, scope: !7421)
!7423 = !DILocalVariable(name: "b_is_dir", scope: !7421, file: !3, line: 3690, type: !141)
!7424 = !DILocation(line: 3690, column: 1, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !7421, file: !3, line: 3690, column: 1)
!7426 = !DILocation(line: 3690, column: 1, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7421, file: !3, line: 3690, column: 1)
!7428 = distinct !DISubprogram(name: "strcmp_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7429 = !DILocalVariable(name: "a", arg: 1, scope: !7428, file: !3, line: 3690, type: !797)
!7430 = !DILocation(line: 3690, column: 1, scope: !7428)
!7431 = !DILocalVariable(name: "b", arg: 2, scope: !7428, file: !3, line: 3690, type: !797)
!7432 = distinct !DISubprogram(name: "strcmp_df_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7433 = !DILocalVariable(name: "a", arg: 1, scope: !7432, file: !3, line: 3690, type: !797)
!7434 = !DILocation(line: 3690, column: 1, scope: !7432)
!7435 = !DILocalVariable(name: "b", arg: 2, scope: !7432, file: !3, line: 3690, type: !797)
!7436 = !DILocalVariable(name: "a_is_dir", scope: !7437, file: !3, line: 3690, type: !141)
!7437 = distinct !DILexicalBlock(scope: !7432, file: !3, line: 3690, column: 1)
!7438 = !DILocation(line: 3690, column: 1, scope: !7437)
!7439 = !DILocalVariable(name: "b_is_dir", scope: !7437, file: !3, line: 3690, type: !141)
!7440 = !DILocation(line: 3690, column: 1, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 3690, column: 1)
!7442 = !DILocation(line: 3690, column: 1, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 3690, column: 1)
!7444 = distinct !DISubprogram(name: "rev_strcmp_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7445 = !DILocalVariable(name: "a", arg: 1, scope: !7444, file: !3, line: 3690, type: !797)
!7446 = !DILocation(line: 3690, column: 1, scope: !7444)
!7447 = !DILocalVariable(name: "b", arg: 2, scope: !7444, file: !3, line: 3690, type: !797)
!7448 = distinct !DISubprogram(name: "rev_strcmp_df_size", scope: !3, file: !3, line: 3690, type: !795, scopeLine: 3690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7449 = !DILocalVariable(name: "a", arg: 1, scope: !7448, file: !3, line: 3690, type: !797)
!7450 = !DILocation(line: 3690, column: 1, scope: !7448)
!7451 = !DILocalVariable(name: "b", arg: 2, scope: !7448, file: !3, line: 3690, type: !797)
!7452 = !DILocalVariable(name: "a_is_dir", scope: !7453, file: !3, line: 3690, type: !141)
!7453 = distinct !DILexicalBlock(scope: !7448, file: !3, line: 3690, column: 1)
!7454 = !DILocation(line: 3690, column: 1, scope: !7453)
!7455 = !DILocalVariable(name: "b_is_dir", scope: !7453, file: !3, line: 3690, type: !141)
!7456 = !DILocation(line: 3690, column: 1, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 3690, column: 1)
!7458 = !DILocation(line: 3690, column: 1, scope: !7459)
!7459 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 3690, column: 1)
!7460 = distinct !DISubprogram(name: "xstrcoll_version", scope: !3, file: !3, line: 3709, type: !795, scopeLine: 3710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7461 = !DILocalVariable(name: "a", arg: 1, scope: !7460, file: !3, line: 3709, type: !797)
!7462 = !DILocation(line: 3709, column: 32, scope: !7460)
!7463 = !DILocalVariable(name: "b", arg: 2, scope: !7460, file: !3, line: 3709, type: !797)
!7464 = !DILocation(line: 3709, column: 37, scope: !7460)
!7465 = !DILocation(line: 3710, column: 23, scope: !7460)
!7466 = !DILocation(line: 3710, column: 26, scope: !7460)
!7467 = !DILocation(line: 3710, column: 10, scope: !7460)
!7468 = !DILocation(line: 3710, column: 3, scope: !7460)
!7469 = distinct !DISubprogram(name: "xstrcoll_df_version", scope: !3, file: !3, line: 3713, type: !795, scopeLine: 3714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7470 = !DILocalVariable(name: "a", arg: 1, scope: !7469, file: !3, line: 3713, type: !797)
!7471 = !DILocation(line: 3713, column: 35, scope: !7469)
!7472 = !DILocalVariable(name: "b", arg: 2, scope: !7469, file: !3, line: 3713, type: !797)
!7473 = !DILocation(line: 3713, column: 40, scope: !7469)
!7474 = !DILocation(line: 3714, column: 3, scope: !7469)
!7475 = !DILocalVariable(name: "a_is_dir", scope: !7476, file: !3, line: 3714, type: !141)
!7476 = distinct !DILexicalBlock(scope: !7469, file: !3, line: 3714, column: 3)
!7477 = !DILocation(line: 3714, column: 3, scope: !7476)
!7478 = !DILocalVariable(name: "b_is_dir", scope: !7476, file: !3, line: 3714, type: !141)
!7479 = !DILocation(line: 3714, column: 3, scope: !7480)
!7480 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 3714, column: 3)
!7481 = !DILocation(line: 3714, column: 3, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7476, file: !3, line: 3714, column: 3)
!7483 = !DILocation(line: 3714, column: 46, scope: !7469)
!7484 = !DILocation(line: 3714, column: 49, scope: !7469)
!7485 = !DILocation(line: 3714, column: 33, scope: !7469)
!7486 = !DILocation(line: 3714, column: 26, scope: !7469)
!7487 = !DILocation(line: 3714, column: 53, scope: !7469)
!7488 = distinct !DISubprogram(name: "rev_xstrcoll_version", scope: !3, file: !3, line: 3711, type: !795, scopeLine: 3712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7489 = !DILocalVariable(name: "a", arg: 1, scope: !7488, file: !3, line: 3711, type: !797)
!7490 = !DILocation(line: 3711, column: 36, scope: !7488)
!7491 = !DILocalVariable(name: "b", arg: 2, scope: !7488, file: !3, line: 3711, type: !797)
!7492 = !DILocation(line: 3711, column: 41, scope: !7488)
!7493 = !DILocation(line: 3712, column: 23, scope: !7488)
!7494 = !DILocation(line: 3712, column: 26, scope: !7488)
!7495 = !DILocation(line: 3712, column: 10, scope: !7488)
!7496 = !DILocation(line: 3712, column: 3, scope: !7488)
!7497 = distinct !DISubprogram(name: "rev_xstrcoll_df_version", scope: !3, file: !3, line: 3715, type: !795, scopeLine: 3716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7498 = !DILocalVariable(name: "a", arg: 1, scope: !7497, file: !3, line: 3715, type: !797)
!7499 = !DILocation(line: 3715, column: 39, scope: !7497)
!7500 = !DILocalVariable(name: "b", arg: 2, scope: !7497, file: !3, line: 3715, type: !797)
!7501 = !DILocation(line: 3715, column: 44, scope: !7497)
!7502 = !DILocation(line: 3716, column: 3, scope: !7497)
!7503 = !DILocalVariable(name: "a_is_dir", scope: !7504, file: !3, line: 3716, type: !141)
!7504 = distinct !DILexicalBlock(scope: !7497, file: !3, line: 3716, column: 3)
!7505 = !DILocation(line: 3716, column: 3, scope: !7504)
!7506 = !DILocalVariable(name: "b_is_dir", scope: !7504, file: !3, line: 3716, type: !141)
!7507 = !DILocation(line: 3716, column: 3, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3716, column: 3)
!7509 = !DILocation(line: 3716, column: 3, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3716, column: 3)
!7511 = !DILocation(line: 3716, column: 46, scope: !7497)
!7512 = !DILocation(line: 3716, column: 49, scope: !7497)
!7513 = !DILocation(line: 3716, column: 33, scope: !7497)
!7514 = !DILocation(line: 3716, column: 26, scope: !7497)
!7515 = !DILocation(line: 3716, column: 53, scope: !7497)
!7516 = distinct !DISubprogram(name: "xstrcoll_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7517 = !DILocalVariable(name: "a", arg: 1, scope: !7516, file: !3, line: 3688, type: !797)
!7518 = !DILocation(line: 3688, column: 1, scope: !7516)
!7519 = !DILocalVariable(name: "b", arg: 2, scope: !7516, file: !3, line: 3688, type: !797)
!7520 = distinct !DISubprogram(name: "xstrcoll_df_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7521 = !DILocalVariable(name: "a", arg: 1, scope: !7520, file: !3, line: 3688, type: !797)
!7522 = !DILocation(line: 3688, column: 1, scope: !7520)
!7523 = !DILocalVariable(name: "b", arg: 2, scope: !7520, file: !3, line: 3688, type: !797)
!7524 = !DILocalVariable(name: "a_is_dir", scope: !7525, file: !3, line: 3688, type: !141)
!7525 = distinct !DILexicalBlock(scope: !7520, file: !3, line: 3688, column: 1)
!7526 = !DILocation(line: 3688, column: 1, scope: !7525)
!7527 = !DILocalVariable(name: "b_is_dir", scope: !7525, file: !3, line: 3688, type: !141)
!7528 = !DILocation(line: 3688, column: 1, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 3688, column: 1)
!7530 = !DILocation(line: 3688, column: 1, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 3688, column: 1)
!7532 = distinct !DISubprogram(name: "rev_xstrcoll_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7533 = !DILocalVariable(name: "a", arg: 1, scope: !7532, file: !3, line: 3688, type: !797)
!7534 = !DILocation(line: 3688, column: 1, scope: !7532)
!7535 = !DILocalVariable(name: "b", arg: 2, scope: !7532, file: !3, line: 3688, type: !797)
!7536 = distinct !DISubprogram(name: "rev_xstrcoll_df_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7537 = !DILocalVariable(name: "a", arg: 1, scope: !7536, file: !3, line: 3688, type: !797)
!7538 = !DILocation(line: 3688, column: 1, scope: !7536)
!7539 = !DILocalVariable(name: "b", arg: 2, scope: !7536, file: !3, line: 3688, type: !797)
!7540 = !DILocalVariable(name: "a_is_dir", scope: !7541, file: !3, line: 3688, type: !141)
!7541 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 3688, column: 1)
!7542 = !DILocation(line: 3688, column: 1, scope: !7541)
!7543 = !DILocalVariable(name: "b_is_dir", scope: !7541, file: !3, line: 3688, type: !141)
!7544 = !DILocation(line: 3688, column: 1, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7541, file: !3, line: 3688, column: 1)
!7546 = !DILocation(line: 3688, column: 1, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !7541, file: !3, line: 3688, column: 1)
!7548 = distinct !DISubprogram(name: "strcmp_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7549 = !DILocalVariable(name: "a", arg: 1, scope: !7548, file: !3, line: 3688, type: !797)
!7550 = !DILocation(line: 3688, column: 1, scope: !7548)
!7551 = !DILocalVariable(name: "b", arg: 2, scope: !7548, file: !3, line: 3688, type: !797)
!7552 = distinct !DISubprogram(name: "strcmp_df_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7553 = !DILocalVariable(name: "a", arg: 1, scope: !7552, file: !3, line: 3688, type: !797)
!7554 = !DILocation(line: 3688, column: 1, scope: !7552)
!7555 = !DILocalVariable(name: "b", arg: 2, scope: !7552, file: !3, line: 3688, type: !797)
!7556 = !DILocalVariable(name: "a_is_dir", scope: !7557, file: !3, line: 3688, type: !141)
!7557 = distinct !DILexicalBlock(scope: !7552, file: !3, line: 3688, column: 1)
!7558 = !DILocation(line: 3688, column: 1, scope: !7557)
!7559 = !DILocalVariable(name: "b_is_dir", scope: !7557, file: !3, line: 3688, type: !141)
!7560 = !DILocation(line: 3688, column: 1, scope: !7561)
!7561 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 3688, column: 1)
!7562 = !DILocation(line: 3688, column: 1, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 3688, column: 1)
!7564 = distinct !DISubprogram(name: "rev_strcmp_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7565 = !DILocalVariable(name: "a", arg: 1, scope: !7564, file: !3, line: 3688, type: !797)
!7566 = !DILocation(line: 3688, column: 1, scope: !7564)
!7567 = !DILocalVariable(name: "b", arg: 2, scope: !7564, file: !3, line: 3688, type: !797)
!7568 = distinct !DISubprogram(name: "rev_strcmp_df_mtime", scope: !3, file: !3, line: 3688, type: !795, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7569 = !DILocalVariable(name: "a", arg: 1, scope: !7568, file: !3, line: 3688, type: !797)
!7570 = !DILocation(line: 3688, column: 1, scope: !7568)
!7571 = !DILocalVariable(name: "b", arg: 2, scope: !7568, file: !3, line: 3688, type: !797)
!7572 = !DILocalVariable(name: "a_is_dir", scope: !7573, file: !3, line: 3688, type: !141)
!7573 = distinct !DILexicalBlock(scope: !7568, file: !3, line: 3688, column: 1)
!7574 = !DILocation(line: 3688, column: 1, scope: !7573)
!7575 = !DILocalVariable(name: "b_is_dir", scope: !7573, file: !3, line: 3688, type: !141)
!7576 = !DILocation(line: 3688, column: 1, scope: !7577)
!7577 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 3688, column: 1)
!7578 = !DILocation(line: 3688, column: 1, scope: !7579)
!7579 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 3688, column: 1)
!7580 = distinct !DISubprogram(name: "xstrcoll_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7581 = !DILocalVariable(name: "a", arg: 1, scope: !7580, file: !3, line: 3687, type: !797)
!7582 = !DILocation(line: 3687, column: 1, scope: !7580)
!7583 = !DILocalVariable(name: "b", arg: 2, scope: !7580, file: !3, line: 3687, type: !797)
!7584 = distinct !DISubprogram(name: "xstrcoll_df_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7585 = !DILocalVariable(name: "a", arg: 1, scope: !7584, file: !3, line: 3687, type: !797)
!7586 = !DILocation(line: 3687, column: 1, scope: !7584)
!7587 = !DILocalVariable(name: "b", arg: 2, scope: !7584, file: !3, line: 3687, type: !797)
!7588 = !DILocalVariable(name: "a_is_dir", scope: !7589, file: !3, line: 3687, type: !141)
!7589 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 3687, column: 1)
!7590 = !DILocation(line: 3687, column: 1, scope: !7589)
!7591 = !DILocalVariable(name: "b_is_dir", scope: !7589, file: !3, line: 3687, type: !141)
!7592 = !DILocation(line: 3687, column: 1, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 3687, column: 1)
!7594 = !DILocation(line: 3687, column: 1, scope: !7595)
!7595 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 3687, column: 1)
!7596 = distinct !DISubprogram(name: "rev_xstrcoll_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7597 = !DILocalVariable(name: "a", arg: 1, scope: !7596, file: !3, line: 3687, type: !797)
!7598 = !DILocation(line: 3687, column: 1, scope: !7596)
!7599 = !DILocalVariable(name: "b", arg: 2, scope: !7596, file: !3, line: 3687, type: !797)
!7600 = distinct !DISubprogram(name: "rev_xstrcoll_df_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7601 = !DILocalVariable(name: "a", arg: 1, scope: !7600, file: !3, line: 3687, type: !797)
!7602 = !DILocation(line: 3687, column: 1, scope: !7600)
!7603 = !DILocalVariable(name: "b", arg: 2, scope: !7600, file: !3, line: 3687, type: !797)
!7604 = !DILocalVariable(name: "a_is_dir", scope: !7605, file: !3, line: 3687, type: !141)
!7605 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 3687, column: 1)
!7606 = !DILocation(line: 3687, column: 1, scope: !7605)
!7607 = !DILocalVariable(name: "b_is_dir", scope: !7605, file: !3, line: 3687, type: !141)
!7608 = !DILocation(line: 3687, column: 1, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 3687, column: 1)
!7610 = !DILocation(line: 3687, column: 1, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 3687, column: 1)
!7612 = distinct !DISubprogram(name: "strcmp_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7613 = !DILocalVariable(name: "a", arg: 1, scope: !7612, file: !3, line: 3687, type: !797)
!7614 = !DILocation(line: 3687, column: 1, scope: !7612)
!7615 = !DILocalVariable(name: "b", arg: 2, scope: !7612, file: !3, line: 3687, type: !797)
!7616 = distinct !DISubprogram(name: "strcmp_df_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7617 = !DILocalVariable(name: "a", arg: 1, scope: !7616, file: !3, line: 3687, type: !797)
!7618 = !DILocation(line: 3687, column: 1, scope: !7616)
!7619 = !DILocalVariable(name: "b", arg: 2, scope: !7616, file: !3, line: 3687, type: !797)
!7620 = !DILocalVariable(name: "a_is_dir", scope: !7621, file: !3, line: 3687, type: !141)
!7621 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 3687, column: 1)
!7622 = !DILocation(line: 3687, column: 1, scope: !7621)
!7623 = !DILocalVariable(name: "b_is_dir", scope: !7621, file: !3, line: 3687, type: !141)
!7624 = !DILocation(line: 3687, column: 1, scope: !7625)
!7625 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 3687, column: 1)
!7626 = !DILocation(line: 3687, column: 1, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 3687, column: 1)
!7628 = distinct !DISubprogram(name: "rev_strcmp_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7629 = !DILocalVariable(name: "a", arg: 1, scope: !7628, file: !3, line: 3687, type: !797)
!7630 = !DILocation(line: 3687, column: 1, scope: !7628)
!7631 = !DILocalVariable(name: "b", arg: 2, scope: !7628, file: !3, line: 3687, type: !797)
!7632 = distinct !DISubprogram(name: "rev_strcmp_df_ctime", scope: !3, file: !3, line: 3687, type: !795, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7633 = !DILocalVariable(name: "a", arg: 1, scope: !7632, file: !3, line: 3687, type: !797)
!7634 = !DILocation(line: 3687, column: 1, scope: !7632)
!7635 = !DILocalVariable(name: "b", arg: 2, scope: !7632, file: !3, line: 3687, type: !797)
!7636 = !DILocalVariable(name: "a_is_dir", scope: !7637, file: !3, line: 3687, type: !141)
!7637 = distinct !DILexicalBlock(scope: !7632, file: !3, line: 3687, column: 1)
!7638 = !DILocation(line: 3687, column: 1, scope: !7637)
!7639 = !DILocalVariable(name: "b_is_dir", scope: !7637, file: !3, line: 3687, type: !141)
!7640 = !DILocation(line: 3687, column: 1, scope: !7641)
!7641 = distinct !DILexicalBlock(scope: !7637, file: !3, line: 3687, column: 1)
!7642 = !DILocation(line: 3687, column: 1, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7637, file: !3, line: 3687, column: 1)
!7644 = distinct !DISubprogram(name: "xstrcoll_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7645 = !DILocalVariable(name: "a", arg: 1, scope: !7644, file: !3, line: 3689, type: !797)
!7646 = !DILocation(line: 3689, column: 1, scope: !7644)
!7647 = !DILocalVariable(name: "b", arg: 2, scope: !7644, file: !3, line: 3689, type: !797)
!7648 = distinct !DISubprogram(name: "xstrcoll_df_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7649 = !DILocalVariable(name: "a", arg: 1, scope: !7648, file: !3, line: 3689, type: !797)
!7650 = !DILocation(line: 3689, column: 1, scope: !7648)
!7651 = !DILocalVariable(name: "b", arg: 2, scope: !7648, file: !3, line: 3689, type: !797)
!7652 = !DILocalVariable(name: "a_is_dir", scope: !7653, file: !3, line: 3689, type: !141)
!7653 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 3689, column: 1)
!7654 = !DILocation(line: 3689, column: 1, scope: !7653)
!7655 = !DILocalVariable(name: "b_is_dir", scope: !7653, file: !3, line: 3689, type: !141)
!7656 = !DILocation(line: 3689, column: 1, scope: !7657)
!7657 = distinct !DILexicalBlock(scope: !7653, file: !3, line: 3689, column: 1)
!7658 = !DILocation(line: 3689, column: 1, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7653, file: !3, line: 3689, column: 1)
!7660 = distinct !DISubprogram(name: "rev_xstrcoll_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7661 = !DILocalVariable(name: "a", arg: 1, scope: !7660, file: !3, line: 3689, type: !797)
!7662 = !DILocation(line: 3689, column: 1, scope: !7660)
!7663 = !DILocalVariable(name: "b", arg: 2, scope: !7660, file: !3, line: 3689, type: !797)
!7664 = distinct !DISubprogram(name: "rev_xstrcoll_df_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7665 = !DILocalVariable(name: "a", arg: 1, scope: !7664, file: !3, line: 3689, type: !797)
!7666 = !DILocation(line: 3689, column: 1, scope: !7664)
!7667 = !DILocalVariable(name: "b", arg: 2, scope: !7664, file: !3, line: 3689, type: !797)
!7668 = !DILocalVariable(name: "a_is_dir", scope: !7669, file: !3, line: 3689, type: !141)
!7669 = distinct !DILexicalBlock(scope: !7664, file: !3, line: 3689, column: 1)
!7670 = !DILocation(line: 3689, column: 1, scope: !7669)
!7671 = !DILocalVariable(name: "b_is_dir", scope: !7669, file: !3, line: 3689, type: !141)
!7672 = !DILocation(line: 3689, column: 1, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 3689, column: 1)
!7674 = !DILocation(line: 3689, column: 1, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 3689, column: 1)
!7676 = distinct !DISubprogram(name: "strcmp_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7677 = !DILocalVariable(name: "a", arg: 1, scope: !7676, file: !3, line: 3689, type: !797)
!7678 = !DILocation(line: 3689, column: 1, scope: !7676)
!7679 = !DILocalVariable(name: "b", arg: 2, scope: !7676, file: !3, line: 3689, type: !797)
!7680 = distinct !DISubprogram(name: "strcmp_df_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7681 = !DILocalVariable(name: "a", arg: 1, scope: !7680, file: !3, line: 3689, type: !797)
!7682 = !DILocation(line: 3689, column: 1, scope: !7680)
!7683 = !DILocalVariable(name: "b", arg: 2, scope: !7680, file: !3, line: 3689, type: !797)
!7684 = !DILocalVariable(name: "a_is_dir", scope: !7685, file: !3, line: 3689, type: !141)
!7685 = distinct !DILexicalBlock(scope: !7680, file: !3, line: 3689, column: 1)
!7686 = !DILocation(line: 3689, column: 1, scope: !7685)
!7687 = !DILocalVariable(name: "b_is_dir", scope: !7685, file: !3, line: 3689, type: !141)
!7688 = !DILocation(line: 3689, column: 1, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !7685, file: !3, line: 3689, column: 1)
!7690 = !DILocation(line: 3689, column: 1, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7685, file: !3, line: 3689, column: 1)
!7692 = distinct !DISubprogram(name: "rev_strcmp_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7693 = !DILocalVariable(name: "a", arg: 1, scope: !7692, file: !3, line: 3689, type: !797)
!7694 = !DILocation(line: 3689, column: 1, scope: !7692)
!7695 = !DILocalVariable(name: "b", arg: 2, scope: !7692, file: !3, line: 3689, type: !797)
!7696 = distinct !DISubprogram(name: "rev_strcmp_df_atime", scope: !3, file: !3, line: 3689, type: !795, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7697 = !DILocalVariable(name: "a", arg: 1, scope: !7696, file: !3, line: 3689, type: !797)
!7698 = !DILocation(line: 3689, column: 1, scope: !7696)
!7699 = !DILocalVariable(name: "b", arg: 2, scope: !7696, file: !3, line: 3689, type: !797)
!7700 = !DILocalVariable(name: "a_is_dir", scope: !7701, file: !3, line: 3689, type: !141)
!7701 = distinct !DILexicalBlock(scope: !7696, file: !3, line: 3689, column: 1)
!7702 = !DILocation(line: 3689, column: 1, scope: !7701)
!7703 = !DILocalVariable(name: "b_is_dir", scope: !7701, file: !3, line: 3689, type: !141)
!7704 = !DILocation(line: 3689, column: 1, scope: !7705)
!7705 = distinct !DILexicalBlock(scope: !7701, file: !3, line: 3689, column: 1)
!7706 = !DILocation(line: 3689, column: 1, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7701, file: !3, line: 3689, column: 1)
!7708 = distinct !DISubprogram(name: "is_linked_directory", scope: !3, file: !3, line: 3442, type: !7169, scopeLine: 3443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7709 = !DILocalVariable(name: "f", arg: 1, scope: !7708, file: !3, line: 3442, type: !183)
!7710 = !DILocation(line: 3442, column: 45, scope: !7708)
!7711 = !DILocation(line: 3444, column: 10, scope: !7708)
!7712 = !DILocation(line: 3444, column: 13, scope: !7708)
!7713 = !DILocation(line: 3444, column: 22, scope: !7708)
!7714 = !DILocation(line: 3444, column: 35, scope: !7708)
!7715 = !DILocation(line: 3444, column: 38, scope: !7708)
!7716 = !DILocation(line: 3444, column: 41, scope: !7708)
!7717 = !DILocation(line: 3444, column: 50, scope: !7708)
!7718 = !DILocation(line: 3445, column: 10, scope: !7708)
!7719 = !DILocation(line: 3445, column: 13, scope: !7708)
!7720 = !DILocation(line: 3444, column: 3, scope: !7708)
!7721 = distinct !DISubprogram(name: "cmp_atime", scope: !3, file: !3, line: 3651, type: !7722, scopeLine: 3653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7722 = !DISubroutineType(types: !7723)
!7723 = !{!27, !183, !183, !7724}
!7724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7725, size: 64)
!7725 = !DISubroutineType(types: !7726)
!7726 = !{!27, !146, !146}
!7727 = !DILocalVariable(name: "a", arg: 1, scope: !7721, file: !3, line: 3651, type: !183)
!7728 = !DILocation(line: 3651, column: 35, scope: !7721)
!7729 = !DILocalVariable(name: "b", arg: 2, scope: !7721, file: !3, line: 3651, type: !183)
!7730 = !DILocation(line: 3651, column: 61, scope: !7721)
!7731 = !DILocalVariable(name: "cmp", arg: 3, scope: !7721, file: !3, line: 3652, type: !7724)
!7732 = !DILocation(line: 3652, column: 18, scope: !7721)
!7733 = !DILocalVariable(name: "diff", scope: !7721, file: !3, line: 3654, type: !27)
!7734 = !DILocation(line: 3654, column: 7, scope: !7721)
!7735 = !DILocation(line: 3654, column: 45, scope: !7721)
!7736 = !DILocation(line: 3654, column: 48, scope: !7721)
!7737 = !DILocation(line: 3654, column: 28, scope: !7721)
!7738 = !DILocation(line: 3655, column: 45, scope: !7721)
!7739 = !DILocation(line: 3655, column: 48, scope: !7721)
!7740 = !DILocation(line: 3655, column: 28, scope: !7721)
!7741 = !DILocation(line: 3654, column: 14, scope: !7721)
!7742 = !DILocation(line: 3656, column: 10, scope: !7721)
!7743 = !DILocation(line: 3656, column: 17, scope: !7721)
!7744 = !DILocation(line: 3656, column: 24, scope: !7721)
!7745 = !DILocation(line: 3656, column: 29, scope: !7721)
!7746 = !DILocation(line: 3656, column: 32, scope: !7721)
!7747 = !DILocation(line: 3656, column: 38, scope: !7721)
!7748 = !DILocation(line: 3656, column: 41, scope: !7721)
!7749 = !DILocation(line: 3656, column: 3, scope: !7721)
!7750 = distinct !DISubprogram(name: "xstrcoll", scope: !3, file: !3, line: 3567, type: !7725, scopeLine: 3568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7751 = !DILocalVariable(name: "a", arg: 1, scope: !7750, file: !3, line: 3567, type: !146)
!7752 = !DILocation(line: 3567, column: 23, scope: !7750)
!7753 = !DILocalVariable(name: "b", arg: 2, scope: !7750, file: !3, line: 3567, type: !146)
!7754 = !DILocation(line: 3567, column: 38, scope: !7750)
!7755 = !DILocalVariable(name: "diff", scope: !7750, file: !3, line: 3569, type: !27)
!7756 = !DILocation(line: 3569, column: 7, scope: !7750)
!7757 = !DILocation(line: 3570, column: 3, scope: !7750)
!7758 = !DILocation(line: 3570, column: 9, scope: !7750)
!7759 = !DILocation(line: 3571, column: 19, scope: !7750)
!7760 = !DILocation(line: 3571, column: 22, scope: !7750)
!7761 = !DILocation(line: 3571, column: 10, scope: !7750)
!7762 = !DILocation(line: 3571, column: 8, scope: !7750)
!7763 = !DILocation(line: 3572, column: 7, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 3572, column: 7)
!7765 = !DILocation(line: 3572, column: 7, scope: !7750)
!7766 = !DILocation(line: 3574, column: 17, scope: !7767)
!7767 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 3573, column: 5)
!7768 = !DILocation(line: 3574, column: 24, scope: !7767)
!7769 = !DILocation(line: 3575, column: 26, scope: !7767)
!7770 = !DILocation(line: 3575, column: 14, scope: !7767)
!7771 = !DILocation(line: 3575, column: 42, scope: !7767)
!7772 = !DILocation(line: 3575, column: 30, scope: !7767)
!7773 = !DILocation(line: 3574, column: 7, scope: !7767)
!7774 = !DILocation(line: 3576, column: 7, scope: !7767)
!7775 = !DILocation(line: 3577, column: 7, scope: !7767)
!7776 = !DILocation(line: 3579, column: 10, scope: !7750)
!7777 = !DILocation(line: 3579, column: 3, scope: !7750)
!7778 = distinct !DISubprogram(name: "cmp_ctime", scope: !3, file: !3, line: 3633, type: !7722, scopeLine: 3635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7779 = !DILocalVariable(name: "a", arg: 1, scope: !7778, file: !3, line: 3633, type: !183)
!7780 = !DILocation(line: 3633, column: 35, scope: !7778)
!7781 = !DILocalVariable(name: "b", arg: 2, scope: !7778, file: !3, line: 3633, type: !183)
!7782 = !DILocation(line: 3633, column: 61, scope: !7778)
!7783 = !DILocalVariable(name: "cmp", arg: 3, scope: !7778, file: !3, line: 3634, type: !7724)
!7784 = !DILocation(line: 3634, column: 18, scope: !7778)
!7785 = !DILocalVariable(name: "diff", scope: !7778, file: !3, line: 3636, type: !27)
!7786 = !DILocation(line: 3636, column: 7, scope: !7778)
!7787 = !DILocation(line: 3636, column: 45, scope: !7778)
!7788 = !DILocation(line: 3636, column: 48, scope: !7778)
!7789 = !DILocation(line: 3636, column: 28, scope: !7778)
!7790 = !DILocation(line: 3637, column: 45, scope: !7778)
!7791 = !DILocation(line: 3637, column: 48, scope: !7778)
!7792 = !DILocation(line: 3637, column: 28, scope: !7778)
!7793 = !DILocation(line: 3636, column: 14, scope: !7778)
!7794 = !DILocation(line: 3638, column: 10, scope: !7778)
!7795 = !DILocation(line: 3638, column: 17, scope: !7778)
!7796 = !DILocation(line: 3638, column: 24, scope: !7778)
!7797 = !DILocation(line: 3638, column: 29, scope: !7778)
!7798 = !DILocation(line: 3638, column: 32, scope: !7778)
!7799 = !DILocation(line: 3638, column: 38, scope: !7778)
!7800 = !DILocation(line: 3638, column: 41, scope: !7778)
!7801 = !DILocation(line: 3638, column: 3, scope: !7778)
!7802 = distinct !DISubprogram(name: "cmp_mtime", scope: !3, file: !3, line: 3642, type: !7722, scopeLine: 3644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7803 = !DILocalVariable(name: "a", arg: 1, scope: !7802, file: !3, line: 3642, type: !183)
!7804 = !DILocation(line: 3642, column: 35, scope: !7802)
!7805 = !DILocalVariable(name: "b", arg: 2, scope: !7802, file: !3, line: 3642, type: !183)
!7806 = !DILocation(line: 3642, column: 61, scope: !7802)
!7807 = !DILocalVariable(name: "cmp", arg: 3, scope: !7802, file: !3, line: 3643, type: !7724)
!7808 = !DILocation(line: 3643, column: 18, scope: !7802)
!7809 = !DILocalVariable(name: "diff", scope: !7802, file: !3, line: 3645, type: !27)
!7810 = !DILocation(line: 3645, column: 7, scope: !7802)
!7811 = !DILocation(line: 3645, column: 45, scope: !7802)
!7812 = !DILocation(line: 3645, column: 48, scope: !7802)
!7813 = !DILocation(line: 3645, column: 28, scope: !7802)
!7814 = !DILocation(line: 3646, column: 45, scope: !7802)
!7815 = !DILocation(line: 3646, column: 48, scope: !7802)
!7816 = !DILocation(line: 3646, column: 28, scope: !7802)
!7817 = !DILocation(line: 3645, column: 14, scope: !7802)
!7818 = !DILocation(line: 3647, column: 10, scope: !7802)
!7819 = !DILocation(line: 3647, column: 17, scope: !7802)
!7820 = !DILocation(line: 3647, column: 24, scope: !7802)
!7821 = !DILocation(line: 3647, column: 29, scope: !7802)
!7822 = !DILocation(line: 3647, column: 32, scope: !7802)
!7823 = !DILocation(line: 3647, column: 38, scope: !7802)
!7824 = !DILocation(line: 3647, column: 41, scope: !7802)
!7825 = !DILocation(line: 3647, column: 3, scope: !7802)
!7826 = distinct !DISubprogram(name: "cmp_version", scope: !3, file: !3, line: 3704, type: !7827, scopeLine: 3705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7827 = !DISubroutineType(types: !7828)
!7828 = !{!27, !183, !183}
!7829 = !DILocalVariable(name: "a", arg: 1, scope: !7826, file: !3, line: 3704, type: !183)
!7830 = !DILocation(line: 3704, column: 37, scope: !7826)
!7831 = !DILocalVariable(name: "b", arg: 2, scope: !7826, file: !3, line: 3704, type: !183)
!7832 = !DILocation(line: 3704, column: 63, scope: !7826)
!7833 = !DILocation(line: 3706, column: 22, scope: !7826)
!7834 = !DILocation(line: 3706, column: 25, scope: !7826)
!7835 = !DILocation(line: 3706, column: 31, scope: !7826)
!7836 = !DILocation(line: 3706, column: 34, scope: !7826)
!7837 = !DILocation(line: 3706, column: 10, scope: !7826)
!7838 = !DILocation(line: 3706, column: 3, scope: !7826)
!7839 = distinct !DISubprogram(name: "cmp_size", scope: !3, file: !3, line: 3660, type: !7722, scopeLine: 3662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7840 = !DILocalVariable(name: "a", arg: 1, scope: !7839, file: !3, line: 3660, type: !183)
!7841 = !DILocation(line: 3660, column: 34, scope: !7839)
!7842 = !DILocalVariable(name: "b", arg: 2, scope: !7839, file: !3, line: 3660, type: !183)
!7843 = !DILocation(line: 3660, column: 60, scope: !7839)
!7844 = !DILocalVariable(name: "cmp", arg: 3, scope: !7839, file: !3, line: 3661, type: !7724)
!7845 = !DILocation(line: 3661, column: 17, scope: !7839)
!7846 = !DILocalVariable(name: "diff", scope: !7839, file: !3, line: 3663, type: !27)
!7847 = !DILocation(line: 3663, column: 7, scope: !7839)
!7848 = !DILocation(line: 3663, column: 14, scope: !7839)
!7849 = !DILocation(line: 3664, column: 10, scope: !7839)
!7850 = !DILocation(line: 3664, column: 17, scope: !7839)
!7851 = !DILocation(line: 3664, column: 24, scope: !7839)
!7852 = !DILocation(line: 3664, column: 29, scope: !7839)
!7853 = !DILocation(line: 3664, column: 32, scope: !7839)
!7854 = !DILocation(line: 3664, column: 38, scope: !7839)
!7855 = !DILocation(line: 3664, column: 41, scope: !7839)
!7856 = !DILocation(line: 3664, column: 3, scope: !7839)
!7857 = distinct !DISubprogram(name: "cmp_extension", scope: !3, file: !3, line: 3678, type: !7722, scopeLine: 3680, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7858 = !DILocalVariable(name: "a", arg: 1, scope: !7857, file: !3, line: 3678, type: !183)
!7859 = !DILocation(line: 3678, column: 39, scope: !7857)
!7860 = !DILocalVariable(name: "b", arg: 2, scope: !7857, file: !3, line: 3678, type: !183)
!7861 = !DILocation(line: 3678, column: 65, scope: !7857)
!7862 = !DILocalVariable(name: "cmp", arg: 3, scope: !7857, file: !3, line: 3679, type: !7724)
!7863 = !DILocation(line: 3679, column: 22, scope: !7857)
!7864 = !DILocalVariable(name: "base1", scope: !7857, file: !3, line: 3681, type: !146)
!7865 = !DILocation(line: 3681, column: 15, scope: !7857)
!7866 = !DILocation(line: 3681, column: 32, scope: !7857)
!7867 = !DILocation(line: 3681, column: 35, scope: !7857)
!7868 = !DILocation(line: 3681, column: 23, scope: !7857)
!7869 = !DILocalVariable(name: "base2", scope: !7857, file: !3, line: 3682, type: !146)
!7870 = !DILocation(line: 3682, column: 15, scope: !7857)
!7871 = !DILocation(line: 3682, column: 32, scope: !7857)
!7872 = !DILocation(line: 3682, column: 35, scope: !7857)
!7873 = !DILocation(line: 3682, column: 23, scope: !7857)
!7874 = !DILocalVariable(name: "diff", scope: !7857, file: !3, line: 3683, type: !27)
!7875 = !DILocation(line: 3683, column: 7, scope: !7857)
!7876 = !DILocation(line: 3683, column: 14, scope: !7857)
!7877 = !DILocation(line: 3683, column: 19, scope: !7857)
!7878 = !DILocation(line: 3683, column: 27, scope: !7857)
!7879 = !DILocation(line: 3683, column: 39, scope: !7857)
!7880 = !DILocation(line: 3683, column: 47, scope: !7857)
!7881 = !DILocation(line: 3684, column: 10, scope: !7857)
!7882 = !DILocation(line: 3684, column: 17, scope: !7857)
!7883 = !DILocation(line: 3684, column: 24, scope: !7857)
!7884 = !DILocation(line: 3684, column: 29, scope: !7857)
!7885 = !DILocation(line: 3684, column: 32, scope: !7857)
!7886 = !DILocation(line: 3684, column: 38, scope: !7857)
!7887 = !DILocation(line: 3684, column: 41, scope: !7857)
!7888 = !DILocation(line: 3684, column: 3, scope: !7857)
!7889 = distinct !DISubprogram(name: "cmp_name", scope: !3, file: !3, line: 3668, type: !7722, scopeLine: 3670, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7890 = !DILocalVariable(name: "a", arg: 1, scope: !7889, file: !3, line: 3668, type: !183)
!7891 = !DILocation(line: 3668, column: 34, scope: !7889)
!7892 = !DILocalVariable(name: "b", arg: 2, scope: !7889, file: !3, line: 3668, type: !183)
!7893 = !DILocation(line: 3668, column: 60, scope: !7889)
!7894 = !DILocalVariable(name: "cmp", arg: 3, scope: !7889, file: !3, line: 3669, type: !7724)
!7895 = !DILocation(line: 3669, column: 17, scope: !7889)
!7896 = !DILocation(line: 3671, column: 10, scope: !7889)
!7897 = !DILocation(line: 3671, column: 15, scope: !7889)
!7898 = !DILocation(line: 3671, column: 18, scope: !7889)
!7899 = !DILocation(line: 3671, column: 24, scope: !7889)
!7900 = !DILocation(line: 3671, column: 27, scope: !7889)
!7901 = !DILocation(line: 3671, column: 3, scope: !7889)
!7902 = distinct !DISubprogram(name: "needs_quoting", scope: !3, file: !3, line: 3099, type: !4849, scopeLine: 3100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7903 = !DILocalVariable(name: "name", arg: 1, scope: !7902, file: !3, line: 3099, type: !146)
!7904 = !DILocation(line: 3099, column: 28, scope: !7902)
!7905 = !DILocalVariable(name: "test", scope: !7902, file: !3, line: 3101, type: !261)
!7906 = !DILocation(line: 3101, column: 8, scope: !7902)
!7907 = !DILocalVariable(name: "len", scope: !7902, file: !3, line: 3102, type: !149)
!7908 = !DILocation(line: 3102, column: 10, scope: !7902)
!7909 = !DILocation(line: 3102, column: 33, scope: !7902)
!7910 = !DILocation(line: 3102, column: 53, scope: !7902)
!7911 = !DILocation(line: 3103, column: 33, scope: !7902)
!7912 = !DILocation(line: 3102, column: 16, scope: !7902)
!7913 = !DILocation(line: 3104, column: 11, scope: !7902)
!7914 = !DILocation(line: 3104, column: 10, scope: !7902)
!7915 = !DILocation(line: 3104, column: 19, scope: !7902)
!7916 = !DILocation(line: 3104, column: 16, scope: !7902)
!7917 = !DILocation(line: 3104, column: 25, scope: !7902)
!7918 = !DILocation(line: 3104, column: 36, scope: !7902)
!7919 = !DILocation(line: 3104, column: 28, scope: !7902)
!7920 = !DILocation(line: 3104, column: 45, scope: !7902)
!7921 = !DILocation(line: 3104, column: 42, scope: !7902)
!7922 = !DILocation(line: 3104, column: 3, scope: !7902)
!7923 = distinct !DISubprogram(name: "attach", scope: !3, file: !3, line: 4986, type: !7924, scopeLine: 4987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!7924 = !DISubroutineType(types: !7925)
!7925 = !{null, !143, !146, !146}
!7926 = !DILocalVariable(name: "dest", arg: 1, scope: !7923, file: !3, line: 4986, type: !143)
!7927 = !DILocation(line: 4986, column: 15, scope: !7923)
!7928 = !DILocalVariable(name: "dirname", arg: 2, scope: !7923, file: !3, line: 4986, type: !146)
!7929 = !DILocation(line: 4986, column: 33, scope: !7923)
!7930 = !DILocalVariable(name: "name", arg: 3, scope: !7923, file: !3, line: 4986, type: !146)
!7931 = !DILocation(line: 4986, column: 54, scope: !7923)
!7932 = !DILocalVariable(name: "dirnamep", scope: !7923, file: !3, line: 4988, type: !146)
!7933 = !DILocation(line: 4988, column: 15, scope: !7923)
!7934 = !DILocation(line: 4988, column: 26, scope: !7923)
!7935 = !DILocation(line: 4991, column: 7, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 4991, column: 7)
!7937 = !DILocation(line: 4991, column: 18, scope: !7936)
!7938 = !DILocation(line: 4991, column: 25, scope: !7936)
!7939 = !DILocation(line: 4991, column: 28, scope: !7936)
!7940 = !DILocation(line: 4991, column: 39, scope: !7936)
!7941 = !DILocation(line: 4991, column: 7, scope: !7923)
!7942 = !DILocation(line: 4993, column: 7, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7936, file: !3, line: 4992, column: 5)
!7944 = !DILocation(line: 4993, column: 15, scope: !7943)
!7945 = !DILocation(line: 4993, column: 14, scope: !7943)
!7946 = !DILocation(line: 4994, column: 28, scope: !7943)
!7947 = !DILocation(line: 4994, column: 19, scope: !7943)
!7948 = !DILocation(line: 4994, column: 14, scope: !7943)
!7949 = !DILocation(line: 4994, column: 17, scope: !7943)
!7950 = distinct !{!7950, !7942, !7946}
!7951 = !DILocation(line: 4996, column: 11, scope: !7952)
!7952 = distinct !DILexicalBlock(scope: !7943, file: !3, line: 4996, column: 11)
!7953 = !DILocation(line: 4996, column: 22, scope: !7952)
!7954 = !DILocation(line: 4996, column: 20, scope: !7952)
!7955 = !DILocation(line: 4996, column: 30, scope: !7952)
!7956 = !DILocation(line: 4996, column: 33, scope: !7952)
!7957 = !DILocation(line: 4996, column: 46, scope: !7952)
!7958 = !DILocation(line: 4996, column: 11, scope: !7943)
!7959 = !DILocation(line: 4997, column: 14, scope: !7952)
!7960 = !DILocation(line: 4997, column: 17, scope: !7952)
!7961 = !DILocation(line: 4997, column: 9, scope: !7952)
!7962 = !DILocation(line: 4998, column: 5, scope: !7943)
!7963 = !DILocation(line: 4999, column: 3, scope: !7923)
!7964 = !DILocation(line: 4999, column: 11, scope: !7923)
!7965 = !DILocation(line: 4999, column: 10, scope: !7923)
!7966 = !DILocation(line: 5000, column: 20, scope: !7923)
!7967 = !DILocation(line: 5000, column: 15, scope: !7923)
!7968 = !DILocation(line: 5000, column: 10, scope: !7923)
!7969 = !DILocation(line: 5000, column: 13, scope: !7923)
!7970 = distinct !{!7970, !7963, !7966}
!7971 = !DILocation(line: 5001, column: 4, scope: !7923)
!7972 = !DILocation(line: 5001, column: 9, scope: !7923)
!7973 = !DILocation(line: 5002, column: 1, scope: !7923)
!7974 = !DILocalVariable(name: "file", arg: 1, scope: !1052, file: !3, line: 3080, type: !146)
!7975 = !DILocation(line: 3080, column: 35, scope: !1052)
!7976 = !DILocalVariable(name: "f", arg: 2, scope: !1052, file: !3, line: 3080, type: !260)
!7977 = !DILocation(line: 3080, column: 58, scope: !1052)
!7978 = !DILocation(line: 3086, column: 7, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !1052, file: !3, line: 3086, column: 7)
!7980 = !DILocation(line: 3086, column: 10, scope: !7979)
!7981 = !DILocation(line: 3086, column: 15, scope: !7979)
!7982 = !DILocation(line: 3086, column: 25, scope: !7979)
!7983 = !DILocation(line: 3086, column: 22, scope: !7979)
!7984 = !DILocation(line: 3086, column: 7, scope: !1052)
!7985 = !DILocation(line: 3088, column: 7, scope: !7986)
!7986 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 3087, column: 5)
!7987 = !DILocation(line: 3088, column: 13, scope: !7986)
!7988 = !DILocation(line: 3089, column: 7, scope: !7986)
!7989 = !DILocalVariable(name: "b", scope: !1052, file: !3, line: 3092, type: !141)
!7990 = !DILocation(line: 3092, column: 8, scope: !1052)
!7991 = !DILocation(line: 3092, column: 28, scope: !1052)
!7992 = !DILocation(line: 3092, column: 12, scope: !1052)
!7993 = !DILocation(line: 3093, column: 9, scope: !7994)
!7994 = distinct !DILexicalBlock(scope: !1052, file: !3, line: 3093, column: 8)
!7995 = !DILocation(line: 3093, column: 11, scope: !7994)
!7996 = !DILocation(line: 3093, column: 33, scope: !7994)
!7997 = !DILocation(line: 3093, column: 14, scope: !7994)
!7998 = !DILocation(line: 3093, column: 8, scope: !1052)
!7999 = !DILocation(line: 3094, column: 26, scope: !7994)
!8000 = !DILocation(line: 3094, column: 29, scope: !7994)
!8001 = !DILocation(line: 3094, column: 34, scope: !7994)
!8002 = !DILocation(line: 3094, column: 24, scope: !7994)
!8003 = !DILocation(line: 3094, column: 5, scope: !7994)
!8004 = !DILocation(line: 3095, column: 10, scope: !1052)
!8005 = !DILocation(line: 3095, column: 3, scope: !1052)
!8006 = !DILocation(line: 3096, column: 1, scope: !1052)
!8007 = !DILocalVariable(name: "file", arg: 1, scope: !1057, file: !3, line: 3025, type: !146)
!8008 = !DILocation(line: 3025, column: 31, scope: !1057)
!8009 = !DILocalVariable(name: "f", arg: 2, scope: !1057, file: !3, line: 3025, type: !260)
!8010 = !DILocation(line: 3025, column: 54, scope: !1057)
!8011 = !DILocalVariable(name: "deref", arg: 3, scope: !1057, file: !3, line: 3025, type: !141)
!8012 = !DILocation(line: 3025, column: 62, scope: !1057)
!8013 = !DILocation(line: 3031, column: 7, scope: !8014)
!8014 = distinct !DILexicalBlock(scope: !1057, file: !3, line: 3031, column: 7)
!8015 = !DILocation(line: 3031, column: 10, scope: !8014)
!8016 = !DILocation(line: 3031, column: 15, scope: !8014)
!8017 = !DILocation(line: 3031, column: 25, scope: !8014)
!8018 = !DILocation(line: 3031, column: 22, scope: !8014)
!8019 = !DILocation(line: 3031, column: 7, scope: !1057)
!8020 = !DILocation(line: 3033, column: 7, scope: !8021)
!8021 = distinct !DILexicalBlock(scope: !8014, file: !3, line: 3032, column: 5)
!8022 = !DILocation(line: 3033, column: 13, scope: !8021)
!8023 = !DILocation(line: 3034, column: 7, scope: !8021)
!8024 = !DILocalVariable(name: "r", scope: !1057, file: !3, line: 3036, type: !27)
!8025 = !DILocation(line: 3036, column: 7, scope: !1057)
!8026 = !DILocation(line: 3043, column: 10, scope: !1057)
!8027 = !DILocation(line: 3044, column: 24, scope: !1057)
!8028 = !DILocation(line: 3044, column: 31, scope: !1057)
!8029 = !DILocation(line: 3044, column: 34, scope: !1057)
!8030 = !DILocation(line: 3044, column: 12, scope: !1057)
!8031 = !DILocation(line: 3045, column: 25, scope: !1057)
!8032 = !DILocation(line: 3045, column: 32, scope: !1057)
!8033 = !DILocation(line: 3045, column: 35, scope: !1057)
!8034 = !DILocation(line: 3045, column: 12, scope: !1057)
!8035 = !DILocation(line: 3043, column: 7, scope: !1057)
!8036 = !DILocation(line: 3046, column: 7, scope: !8037)
!8037 = distinct !DILexicalBlock(scope: !1057, file: !3, line: 3046, column: 7)
!8038 = !DILocation(line: 3046, column: 9, scope: !8037)
!8039 = !DILocation(line: 3046, column: 13, scope: !8037)
!8040 = !DILocation(line: 3046, column: 35, scope: !8037)
!8041 = !DILocation(line: 3046, column: 16, scope: !8037)
!8042 = !DILocation(line: 3046, column: 7, scope: !1057)
!8043 = !DILocation(line: 3047, column: 26, scope: !8037)
!8044 = !DILocation(line: 3047, column: 29, scope: !8037)
!8045 = !DILocation(line: 3047, column: 34, scope: !8037)
!8046 = !DILocation(line: 3047, column: 24, scope: !8037)
!8047 = !DILocation(line: 3047, column: 5, scope: !8037)
!8048 = !DILocation(line: 3048, column: 10, scope: !1057)
!8049 = !DILocation(line: 3048, column: 3, scope: !1057)
!8050 = !DILocation(line: 3049, column: 1, scope: !1057)
!8051 = distinct !DISubprogram(name: "is_ENOTSUP", scope: !838, file: !838, line: 762, type: !8052, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8052 = !DISubroutineType(types: !8053)
!8053 = !{!141, !27}
!8054 = !DILocalVariable(name: "err", arg: 1, scope: !8051, file: !838, line: 762, type: !27)
!8055 = !DILocation(line: 762, column: 17, scope: !8051)
!8056 = !DILocation(line: 764, column: 10, scope: !8051)
!8057 = !DILocation(line: 764, column: 14, scope: !8051)
!8058 = !DILocation(line: 764, column: 28, scope: !8051)
!8059 = !DILocation(line: 764, column: 3, scope: !8051)
!8060 = !DILocalVariable(name: "file", arg: 1, scope: !1062, file: !3, line: 3055, type: !146)
!8061 = !DILocation(line: 3055, column: 33, scope: !1062)
!8062 = !DILocalVariable(name: "f", arg: 2, scope: !1062, file: !3, line: 3055, type: !260)
!8063 = !DILocation(line: 3055, column: 56, scope: !1062)
!8064 = !DILocation(line: 3061, column: 7, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !1062, file: !3, line: 3061, column: 7)
!8066 = !DILocation(line: 3061, column: 10, scope: !8065)
!8067 = !DILocation(line: 3061, column: 15, scope: !8065)
!8068 = !DILocation(line: 3061, column: 25, scope: !8065)
!8069 = !DILocation(line: 3061, column: 22, scope: !8065)
!8070 = !DILocation(line: 3061, column: 7, scope: !1062)
!8071 = !DILocation(line: 3063, column: 7, scope: !8072)
!8072 = distinct !DILexicalBlock(scope: !8065, file: !3, line: 3062, column: 5)
!8073 = !DILocation(line: 3063, column: 13, scope: !8072)
!8074 = !DILocation(line: 3064, column: 7, scope: !8072)
!8075 = !DILocation(line: 3069, column: 3, scope: !1062)
!8076 = !DILocation(line: 3069, column: 9, scope: !1062)
!8077 = !DILocalVariable(name: "n", scope: !1062, file: !3, line: 3070, type: !27)
!8078 = !DILocation(line: 3070, column: 7, scope: !1062)
!8079 = !DILocation(line: 3070, column: 25, scope: !1062)
!8080 = !DILocation(line: 3070, column: 32, scope: !1062)
!8081 = !DILocation(line: 3070, column: 35, scope: !1062)
!8082 = !DILocation(line: 3070, column: 11, scope: !1062)
!8083 = !DILocation(line: 3071, column: 7, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !1062, file: !3, line: 3071, column: 7)
!8085 = !DILocation(line: 3071, column: 9, scope: !8084)
!8086 = !DILocation(line: 3071, column: 14, scope: !8084)
!8087 = !DILocation(line: 3071, column: 36, scope: !8084)
!8088 = !DILocation(line: 3071, column: 17, scope: !8084)
!8089 = !DILocation(line: 3071, column: 7, scope: !1062)
!8090 = !DILocation(line: 3072, column: 26, scope: !8084)
!8091 = !DILocation(line: 3072, column: 29, scope: !8084)
!8092 = !DILocation(line: 3072, column: 34, scope: !8084)
!8093 = !DILocation(line: 3072, column: 24, scope: !8084)
!8094 = !DILocation(line: 3072, column: 5, scope: !8084)
!8095 = !DILocation(line: 3073, column: 10, scope: !1062)
!8096 = !DILocation(line: 3073, column: 3, scope: !1062)
!8097 = !DILocation(line: 3074, column: 1, scope: !1062)
!8098 = distinct !DISubprogram(name: "get_link_name", scope: !3, file: !3, line: 3453, type: !8099, scopeLine: 3454, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8099 = !DISubroutineType(types: !8100)
!8100 = !{null, !146, !260, !141}
!8101 = !DILocalVariable(name: "filename", arg: 1, scope: !8098, file: !3, line: 3453, type: !146)
!8102 = !DILocation(line: 3453, column: 28, scope: !8098)
!8103 = !DILocalVariable(name: "f", arg: 2, scope: !8098, file: !3, line: 3453, type: !260)
!8104 = !DILocation(line: 3453, column: 55, scope: !8098)
!8105 = !DILocalVariable(name: "command_line_arg", arg: 3, scope: !8098, file: !3, line: 3453, type: !141)
!8106 = !DILocation(line: 3453, column: 63, scope: !8098)
!8107 = !DILocation(line: 3455, column: 38, scope: !8098)
!8108 = !DILocation(line: 3455, column: 48, scope: !8098)
!8109 = !DILocation(line: 3455, column: 51, scope: !8098)
!8110 = !DILocation(line: 3455, column: 56, scope: !8098)
!8111 = !DILocation(line: 3455, column: 17, scope: !8098)
!8112 = !DILocation(line: 3455, column: 3, scope: !8098)
!8113 = !DILocation(line: 3455, column: 6, scope: !8098)
!8114 = !DILocation(line: 3455, column: 15, scope: !8098)
!8115 = !DILocation(line: 3456, column: 7, scope: !8116)
!8116 = distinct !DILexicalBlock(scope: !8098, file: !3, line: 3456, column: 7)
!8117 = !DILocation(line: 3456, column: 10, scope: !8116)
!8118 = !DILocation(line: 3456, column: 19, scope: !8116)
!8119 = !DILocation(line: 3456, column: 7, scope: !8098)
!8120 = !DILocation(line: 3457, column: 19, scope: !8116)
!8121 = !DILocation(line: 3457, column: 37, scope: !8116)
!8122 = !DILocation(line: 3458, column: 19, scope: !8116)
!8123 = !DILocation(line: 3457, column: 5, scope: !8116)
!8124 = !DILocation(line: 3459, column: 1, scope: !8098)
!8125 = distinct !DISubprogram(name: "make_link_name", scope: !3, file: !3, line: 3467, type: !8126, scopeLine: 3468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8126 = !DISubroutineType(types: !8127)
!8127 = !{!143, !146, !146}
!8128 = !DILocalVariable(name: "name", arg: 1, scope: !8125, file: !3, line: 3467, type: !146)
!8129 = !DILocation(line: 3467, column: 29, scope: !8125)
!8130 = !DILocalVariable(name: "linkname", arg: 2, scope: !8125, file: !3, line: 3467, type: !146)
!8131 = !DILocation(line: 3467, column: 47, scope: !8125)
!8132 = !DILocation(line: 3469, column: 8, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 3469, column: 7)
!8134 = !DILocation(line: 3469, column: 7, scope: !8125)
!8135 = !DILocation(line: 3470, column: 5, scope: !8133)
!8136 = !DILocation(line: 3472, column: 7, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 3472, column: 7)
!8138 = !DILocation(line: 3472, column: 7, scope: !8125)
!8139 = !DILocation(line: 3473, column: 21, scope: !8137)
!8140 = !DILocation(line: 3473, column: 12, scope: !8137)
!8141 = !DILocation(line: 3473, column: 5, scope: !8137)
!8142 = !DILocalVariable(name: "prefix_len", scope: !8125, file: !3, line: 3477, type: !149)
!8143 = !DILocation(line: 3477, column: 10, scope: !8125)
!8144 = !DILocation(line: 3477, column: 32, scope: !8125)
!8145 = !DILocation(line: 3477, column: 23, scope: !8125)
!8146 = !DILocation(line: 3478, column: 7, scope: !8147)
!8147 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 3478, column: 7)
!8148 = !DILocation(line: 3478, column: 18, scope: !8147)
!8149 = !DILocation(line: 3478, column: 7, scope: !8125)
!8150 = !DILocation(line: 3479, column: 21, scope: !8147)
!8151 = !DILocation(line: 3479, column: 12, scope: !8147)
!8152 = !DILocation(line: 3479, column: 5, scope: !8147)
!8153 = !DILocalVariable(name: "p", scope: !8125, file: !3, line: 3481, type: !143)
!8154 = !DILocation(line: 3481, column: 9, scope: !8125)
!8155 = !DILocation(line: 3481, column: 22, scope: !8125)
!8156 = !DILocation(line: 3481, column: 33, scope: !8125)
!8157 = !DILocation(line: 3481, column: 47, scope: !8125)
!8158 = !DILocation(line: 3481, column: 39, scope: !8125)
!8159 = !DILocation(line: 3481, column: 37, scope: !8125)
!8160 = !DILocation(line: 3481, column: 57, scope: !8125)
!8161 = !DILocation(line: 3481, column: 13, scope: !8125)
!8162 = !DILocation(line: 3486, column: 10, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 3486, column: 8)
!8164 = !DILocation(line: 3486, column: 8, scope: !8125)
!8165 = !DILocation(line: 3487, column: 5, scope: !8163)
!8166 = !DILocation(line: 3489, column: 20, scope: !8125)
!8167 = !DILocation(line: 3489, column: 23, scope: !8125)
!8168 = !DILocation(line: 3489, column: 29, scope: !8125)
!8169 = !DILocation(line: 3489, column: 11, scope: !8125)
!8170 = !DILocation(line: 3489, column: 42, scope: !8125)
!8171 = !DILocation(line: 3489, column: 3, scope: !8125)
!8172 = !DILocation(line: 3490, column: 10, scope: !8125)
!8173 = !DILocation(line: 3490, column: 3, scope: !8125)
!8174 = !DILocation(line: 3491, column: 1, scope: !8125)
!8175 = distinct !DISubprogram(name: "format_user_width", scope: !3, file: !3, line: 3993, type: !8176, scopeLine: 3994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8176 = !DISubroutineType(types: !8177)
!8177 = !{!27, !1298}
!8178 = !DILocalVariable(name: "u", arg: 1, scope: !8175, file: !3, line: 3993, type: !1298)
!8179 = !DILocation(line: 3993, column: 26, scope: !8175)
!8180 = !DILocation(line: 3995, column: 38, scope: !8175)
!8181 = !DILocation(line: 3995, column: 68, scope: !8175)
!8182 = !DILocation(line: 3995, column: 59, scope: !8175)
!8183 = !DILocation(line: 3995, column: 72, scope: !8175)
!8184 = !DILocation(line: 3995, column: 10, scope: !8175)
!8185 = !DILocation(line: 3995, column: 3, scope: !8175)
!8186 = distinct !DISubprogram(name: "format_group_width", scope: !3, file: !3, line: 4001, type: !8187, scopeLine: 4002, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8187 = !DISubroutineType(types: !8188)
!8188 = !{!27, !1300}
!8189 = !DILocalVariable(name: "g", arg: 1, scope: !8186, file: !3, line: 4001, type: !1300)
!8190 = !DILocation(line: 4001, column: 27, scope: !8186)
!8191 = !DILocation(line: 4003, column: 38, scope: !8186)
!8192 = !DILocation(line: 4003, column: 69, scope: !8186)
!8193 = !DILocation(line: 4003, column: 59, scope: !8186)
!8194 = !DILocation(line: 4003, column: 73, scope: !8186)
!8195 = !DILocation(line: 4003, column: 10, scope: !8186)
!8196 = !DILocation(line: 4003, column: 3, scope: !8186)
!8197 = distinct !DISubprogram(name: "format_user_or_group_width", scope: !3, file: !3, line: 3975, type: !8198, scopeLine: 3976, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8198 = !DISubroutineType(types: !8199)
!8199 = !{!27, !146, !151}
!8200 = !DILocalVariable(name: "name", arg: 1, scope: !8197, file: !3, line: 3975, type: !146)
!8201 = !DILocation(line: 3975, column: 41, scope: !8197)
!8202 = !DILocalVariable(name: "id", arg: 2, scope: !8197, file: !3, line: 3975, type: !151)
!8203 = !DILocation(line: 3975, column: 65, scope: !8197)
!8204 = !DILocation(line: 3977, column: 7, scope: !8205)
!8205 = distinct !DILexicalBlock(scope: !8197, file: !3, line: 3977, column: 7)
!8206 = !DILocation(line: 3977, column: 7, scope: !8197)
!8207 = !DILocalVariable(name: "len", scope: !8208, file: !3, line: 3979, type: !27)
!8208 = distinct !DILexicalBlock(scope: !8205, file: !3, line: 3978, column: 5)
!8209 = !DILocation(line: 3979, column: 11, scope: !8208)
!8210 = !DILocation(line: 3979, column: 27, scope: !8208)
!8211 = !DILocation(line: 3979, column: 17, scope: !8208)
!8212 = !DILocation(line: 3980, column: 14, scope: !8208)
!8213 = !DILocation(line: 3980, column: 7, scope: !8208)
!8214 = !DILocalVariable(name: "buf", scope: !8215, file: !3, line: 3984, type: !743)
!8215 = distinct !DILexicalBlock(scope: !8205, file: !3, line: 3983, column: 5)
!8216 = !DILocation(line: 3984, column: 12, scope: !8215)
!8217 = !DILocation(line: 3985, column: 16, scope: !8215)
!8218 = !DILocation(line: 3985, column: 28, scope: !8215)
!8219 = !DILocation(line: 3985, column: 7, scope: !8215)
!8220 = !DILocation(line: 3986, column: 22, scope: !8215)
!8221 = !DILocation(line: 3986, column: 14, scope: !8215)
!8222 = !DILocation(line: 3986, column: 7, scope: !8215)
!8223 = !DILocation(line: 3988, column: 1, scope: !8197)
!8224 = distinct !DISubprogram(name: "errno_unsupported", scope: !3, file: !3, line: 3016, type: !8052, scopeLine: 3017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8225 = !DILocalVariable(name: "err", arg: 1, scope: !8224, file: !3, line: 3016, type: !27)
!8226 = !DILocation(line: 3016, column: 24, scope: !8224)
!8227 = !DILocation(line: 3018, column: 11, scope: !8224)
!8228 = !DILocation(line: 3018, column: 15, scope: !8224)
!8229 = !DILocation(line: 3018, column: 25, scope: !8224)
!8230 = !DILocation(line: 3018, column: 28, scope: !8224)
!8231 = !DILocation(line: 3018, column: 32, scope: !8224)
!8232 = !DILocation(line: 3018, column: 42, scope: !8224)
!8233 = !DILocation(line: 3018, column: 57, scope: !8224)
!8234 = !DILocation(line: 3018, column: 45, scope: !8224)
!8235 = !DILocation(line: 3018, column: 3, scope: !8224)
!8236 = distinct !DISubprogram(name: "has_capability", scope: !3, file: !3, line: 2942, type: !4849, scopeLine: 2943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8237 = !DILocalVariable(name: "name", arg: 1, scope: !8236, file: !3, line: 2942, type: !146)
!8238 = !DILocation(line: 2942, column: 29, scope: !8236)
!8239 = !DILocalVariable(name: "result", scope: !8236, file: !3, line: 2944, type: !143)
!8240 = !DILocation(line: 2944, column: 9, scope: !8236)
!8241 = !DILocalVariable(name: "has_cap", scope: !8236, file: !3, line: 2945, type: !141)
!8242 = !DILocation(line: 2945, column: 8, scope: !8236)
!8243 = !DILocalVariable(name: "cap_d", scope: !8236, file: !3, line: 2947, type: !772)
!8244 = !DILocation(line: 2947, column: 9, scope: !8236)
!8245 = !DILocation(line: 2947, column: 31, scope: !8236)
!8246 = !DILocation(line: 2947, column: 17, scope: !8236)
!8247 = !DILocation(line: 2948, column: 7, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8236, file: !3, line: 2948, column: 7)
!8249 = !DILocation(line: 2948, column: 13, scope: !8248)
!8250 = !DILocation(line: 2948, column: 7, scope: !8236)
!8251 = !DILocation(line: 2949, column: 5, scope: !8248)
!8252 = !DILocation(line: 2951, column: 25, scope: !8236)
!8253 = !DILocation(line: 2951, column: 12, scope: !8236)
!8254 = !DILocation(line: 2951, column: 10, scope: !8236)
!8255 = !DILocation(line: 2952, column: 13, scope: !8236)
!8256 = !DILocation(line: 2952, column: 3, scope: !8236)
!8257 = !DILocation(line: 2953, column: 8, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8236, file: !3, line: 2953, column: 7)
!8259 = !DILocation(line: 2953, column: 7, scope: !8236)
!8260 = !DILocation(line: 2954, column: 5, scope: !8258)
!8261 = !DILocation(line: 2957, column: 16, scope: !8236)
!8262 = !DILocation(line: 2957, column: 15, scope: !8236)
!8263 = !DILocation(line: 2957, column: 14, scope: !8236)
!8264 = !DILocation(line: 2957, column: 13, scope: !8236)
!8265 = !DILocation(line: 2957, column: 11, scope: !8236)
!8266 = !DILocation(line: 2959, column: 13, scope: !8236)
!8267 = !DILocation(line: 2959, column: 3, scope: !8236)
!8268 = !DILocation(line: 2960, column: 10, scope: !8236)
!8269 = !DILocation(line: 2960, column: 3, scope: !8236)
!8270 = !DILocation(line: 2961, column: 1, scope: !8236)
!8271 = distinct !DISubprogram(name: "known_term_type", scope: !3, file: !3, line: 2489, type: !7224, scopeLine: 2490, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8272 = !DILocalVariable(name: "term", scope: !8271, file: !3, line: 2491, type: !146)
!8273 = !DILocation(line: 2491, column: 15, scope: !8271)
!8274 = !DILocation(line: 2491, column: 22, scope: !8271)
!8275 = !DILocation(line: 2492, column: 9, scope: !8276)
!8276 = distinct !DILexicalBlock(scope: !8271, file: !3, line: 2492, column: 7)
!8277 = !DILocation(line: 2492, column: 14, scope: !8276)
!8278 = !DILocation(line: 2492, column: 20, scope: !8276)
!8279 = !DILocation(line: 2492, column: 19, scope: !8276)
!8280 = !DILocation(line: 2492, column: 7, scope: !8271)
!8281 = !DILocation(line: 2493, column: 5, scope: !8276)
!8282 = !DILocalVariable(name: "line", scope: !8271, file: !3, line: 2495, type: !146)
!8283 = !DILocation(line: 2495, column: 15, scope: !8271)
!8284 = !DILocation(line: 2496, column: 3, scope: !8271)
!8285 = !DILocation(line: 2496, column: 10, scope: !8271)
!8286 = !DILocation(line: 2496, column: 15, scope: !8271)
!8287 = !DILocation(line: 2496, column: 24, scope: !8271)
!8288 = !DILocation(line: 2498, column: 11, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8290, file: !3, line: 2498, column: 11)
!8290 = distinct !DILexicalBlock(scope: !8271, file: !3, line: 2497, column: 5)
!8291 = !DILocation(line: 2498, column: 39, scope: !8289)
!8292 = !DILocation(line: 2498, column: 11, scope: !8290)
!8293 = !DILocation(line: 2500, column: 24, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 2500, column: 15)
!8295 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 2499, column: 9)
!8296 = !DILocation(line: 2500, column: 29, scope: !8294)
!8297 = !DILocation(line: 2500, column: 34, scope: !8294)
!8298 = !DILocation(line: 2500, column: 15, scope: !8294)
!8299 = !DILocation(line: 2500, column: 43, scope: !8294)
!8300 = !DILocation(line: 2500, column: 15, scope: !8295)
!8301 = !DILocation(line: 2501, column: 13, scope: !8294)
!8302 = !DILocation(line: 2502, column: 9, scope: !8295)
!8303 = !DILocation(line: 2503, column: 23, scope: !8290)
!8304 = !DILocation(line: 2503, column: 15, scope: !8290)
!8305 = !DILocation(line: 2503, column: 29, scope: !8290)
!8306 = !DILocation(line: 2503, column: 12, scope: !8290)
!8307 = distinct !{!8307, !8284, !8308}
!8308 = !DILocation(line: 2504, column: 5, scope: !8271)
!8309 = !DILocation(line: 2506, column: 3, scope: !8271)
!8310 = !DILocation(line: 2507, column: 1, scope: !8271)
!8311 = !DILocalVariable(name: "dest", arg: 1, scope: !138, file: !3, line: 2281, type: !142)
!8312 = !DILocation(line: 2281, column: 26, scope: !138)
!8313 = !DILocalVariable(name: "src", arg: 2, scope: !138, file: !3, line: 2281, type: !145)
!8314 = !DILocation(line: 2281, column: 45, scope: !138)
!8315 = !DILocalVariable(name: "equals_end", arg: 3, scope: !138, file: !3, line: 2281, type: !141)
!8316 = !DILocation(line: 2281, column: 55, scope: !138)
!8317 = !DILocalVariable(name: "output_count", arg: 4, scope: !138, file: !3, line: 2282, type: !148)
!8318 = !DILocation(line: 2282, column: 27, scope: !138)
!8319 = !DILocalVariable(name: "num", scope: !138, file: !3, line: 2284, type: !144)
!8320 = !DILocation(line: 2284, column: 8, scope: !138)
!8321 = !DILocalVariable(name: "count", scope: !138, file: !3, line: 2285, type: !149)
!8322 = !DILocation(line: 2285, column: 10, scope: !138)
!8323 = !DILocalVariable(name: "state", scope: !138, file: !3, line: 2288, type: !137)
!8324 = !DILocation(line: 2288, column: 5, scope: !138)
!8325 = !DILocalVariable(name: "p", scope: !138, file: !3, line: 2289, type: !146)
!8326 = !DILocation(line: 2289, column: 15, scope: !138)
!8327 = !DILocalVariable(name: "q", scope: !138, file: !3, line: 2290, type: !143)
!8328 = !DILocation(line: 2290, column: 9, scope: !138)
!8329 = !DILocation(line: 2292, column: 8, scope: !138)
!8330 = !DILocation(line: 2292, column: 7, scope: !138)
!8331 = !DILocation(line: 2292, column: 5, scope: !138)
!8332 = !DILocation(line: 2293, column: 8, scope: !138)
!8333 = !DILocation(line: 2293, column: 7, scope: !138)
!8334 = !DILocation(line: 2293, column: 5, scope: !138)
!8335 = !DILocation(line: 2295, column: 9, scope: !138)
!8336 = !DILocation(line: 2296, column: 7, scope: !138)
!8337 = !DILocation(line: 2298, column: 9, scope: !138)
!8338 = !DILocation(line: 2299, column: 3, scope: !138)
!8339 = !DILocation(line: 2299, column: 10, scope: !138)
!8340 = !DILocation(line: 2299, column: 16, scope: !138)
!8341 = !DILocation(line: 2301, column: 15, scope: !8342)
!8342 = distinct !DILexicalBlock(scope: !138, file: !3, line: 2300, column: 5)
!8343 = !DILocation(line: 2301, column: 7, scope: !8342)
!8344 = !DILocation(line: 2304, column: 20, scope: !8345)
!8345 = distinct !DILexicalBlock(scope: !8342, file: !3, line: 2302, column: 9)
!8346 = !DILocation(line: 2304, column: 19, scope: !8345)
!8347 = !DILocation(line: 2304, column: 11, scope: !8345)
!8348 = !DILocation(line: 2308, column: 21, scope: !8349)
!8349 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2305, column: 13)
!8350 = !DILocation(line: 2309, column: 15, scope: !8349)
!8351 = !DILocation(line: 2311, column: 21, scope: !8349)
!8352 = !DILocation(line: 2312, column: 15, scope: !8349)
!8353 = !DILocation(line: 2313, column: 15, scope: !8349)
!8354 = !DILocation(line: 2315, column: 21, scope: !8349)
!8355 = !DILocation(line: 2316, column: 15, scope: !8349)
!8356 = !DILocation(line: 2317, column: 15, scope: !8349)
!8357 = !DILocation(line: 2319, column: 19, scope: !8358)
!8358 = distinct !DILexicalBlock(scope: !8349, file: !3, line: 2319, column: 19)
!8359 = !DILocation(line: 2319, column: 19, scope: !8349)
!8360 = !DILocation(line: 2321, column: 25, scope: !8361)
!8361 = distinct !DILexicalBlock(scope: !8358, file: !3, line: 2320, column: 17)
!8362 = !DILocation(line: 2322, column: 19, scope: !8361)
!8363 = !DILocation(line: 2324, column: 15, scope: !8349)
!8364 = !DILocation(line: 2326, column: 27, scope: !8349)
!8365 = !DILocation(line: 2326, column: 24, scope: !8349)
!8366 = !DILocation(line: 2326, column: 18, scope: !8349)
!8367 = !DILocation(line: 2326, column: 22, scope: !8349)
!8368 = !DILocation(line: 2327, column: 15, scope: !8349)
!8369 = !DILocation(line: 2328, column: 15, scope: !8349)
!8370 = !DILocation(line: 2330, column: 11, scope: !8345)
!8371 = !DILocation(line: 2333, column: 20, scope: !8345)
!8372 = !DILocation(line: 2333, column: 19, scope: !8345)
!8373 = !DILocation(line: 2333, column: 11, scope: !8345)
!8374 = !DILocation(line: 2343, column: 21, scope: !8375)
!8375 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2334, column: 13)
!8376 = !DILocation(line: 2344, column: 22, scope: !8375)
!8377 = !DILocation(line: 2344, column: 21, scope: !8375)
!8378 = !DILocation(line: 2344, column: 24, scope: !8375)
!8379 = !DILocation(line: 2344, column: 19, scope: !8375)
!8380 = !DILocation(line: 2345, column: 15, scope: !8375)
!8381 = !DILocation(line: 2348, column: 21, scope: !8375)
!8382 = !DILocation(line: 2349, column: 19, scope: !8375)
!8383 = !DILocation(line: 2350, column: 15, scope: !8375)
!8384 = !DILocation(line: 2352, column: 19, scope: !8375)
!8385 = !DILocation(line: 2353, column: 15, scope: !8375)
!8386 = !DILocation(line: 2355, column: 19, scope: !8375)
!8387 = !DILocation(line: 2356, column: 15, scope: !8375)
!8388 = !DILocation(line: 2358, column: 19, scope: !8375)
!8389 = !DILocation(line: 2359, column: 15, scope: !8375)
!8390 = !DILocation(line: 2361, column: 19, scope: !8375)
!8391 = !DILocation(line: 2362, column: 15, scope: !8375)
!8392 = !DILocation(line: 2364, column: 19, scope: !8375)
!8393 = !DILocation(line: 2365, column: 15, scope: !8375)
!8394 = !DILocation(line: 2367, column: 19, scope: !8375)
!8395 = !DILocation(line: 2368, column: 15, scope: !8375)
!8396 = !DILocation(line: 2370, column: 19, scope: !8375)
!8397 = !DILocation(line: 2371, column: 15, scope: !8375)
!8398 = !DILocation(line: 2373, column: 19, scope: !8375)
!8399 = !DILocation(line: 2374, column: 15, scope: !8375)
!8400 = !DILocation(line: 2376, column: 19, scope: !8375)
!8401 = !DILocation(line: 2377, column: 15, scope: !8375)
!8402 = !DILocation(line: 2379, column: 19, scope: !8375)
!8403 = !DILocation(line: 2380, column: 15, scope: !8375)
!8404 = !DILocation(line: 2382, column: 21, scope: !8375)
!8405 = !DILocation(line: 2383, column: 15, scope: !8375)
!8406 = !DILocation(line: 2385, column: 22, scope: !8375)
!8407 = !DILocation(line: 2385, column: 21, scope: !8375)
!8408 = !DILocation(line: 2385, column: 19, scope: !8375)
!8409 = !DILocation(line: 2386, column: 15, scope: !8375)
!8410 = !DILocation(line: 2388, column: 15, scope: !8411)
!8411 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2388, column: 15)
!8412 = !DILocation(line: 2388, column: 21, scope: !8411)
!8413 = !DILocation(line: 2388, column: 15, scope: !8345)
!8414 = !DILocation(line: 2390, column: 24, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !8411, file: !3, line: 2389, column: 13)
!8416 = !DILocation(line: 2390, column: 18, scope: !8415)
!8417 = !DILocation(line: 2390, column: 22, scope: !8415)
!8418 = !DILocation(line: 2391, column: 15, scope: !8415)
!8419 = !DILocation(line: 2392, column: 21, scope: !8415)
!8420 = !DILocation(line: 2393, column: 13, scope: !8415)
!8421 = !DILocation(line: 2394, column: 11, scope: !8345)
!8422 = !DILocation(line: 2395, column: 11, scope: !8345)
!8423 = !DILocation(line: 2398, column: 16, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2398, column: 15)
!8425 = !DILocation(line: 2398, column: 15, scope: !8424)
!8426 = !DILocation(line: 2398, column: 18, scope: !8424)
!8427 = !DILocation(line: 2398, column: 24, scope: !8424)
!8428 = !DILocation(line: 2398, column: 28, scope: !8424)
!8429 = !DILocation(line: 2398, column: 27, scope: !8424)
!8430 = !DILocation(line: 2398, column: 30, scope: !8424)
!8431 = !DILocation(line: 2398, column: 15, scope: !8345)
!8432 = !DILocation(line: 2400, column: 24, scope: !8433)
!8433 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 2399, column: 13)
!8434 = !DILocation(line: 2400, column: 18, scope: !8433)
!8435 = !DILocation(line: 2400, column: 22, scope: !8433)
!8436 = !DILocation(line: 2401, column: 15, scope: !8433)
!8437 = !DILocation(line: 2402, column: 21, scope: !8433)
!8438 = !DILocation(line: 2403, column: 13, scope: !8433)
!8439 = !DILocation(line: 2405, column: 20, scope: !8424)
!8440 = !DILocation(line: 2405, column: 24, scope: !8424)
!8441 = !DILocation(line: 2405, column: 36, scope: !8424)
!8442 = !DILocation(line: 2405, column: 33, scope: !8424)
!8443 = !DILocation(line: 2405, column: 40, scope: !8424)
!8444 = !DILocation(line: 2405, column: 30, scope: !8424)
!8445 = !DILocation(line: 2405, column: 19, scope: !8424)
!8446 = !DILocation(line: 2405, column: 17, scope: !8424)
!8447 = !DILocation(line: 2406, column: 11, scope: !8345)
!8448 = !DILocation(line: 2409, column: 20, scope: !8345)
!8449 = !DILocation(line: 2409, column: 19, scope: !8345)
!8450 = !DILocation(line: 2409, column: 11, scope: !8345)
!8451 = !DILocation(line: 2421, column: 22, scope: !8452)
!8452 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2410, column: 13)
!8453 = !DILocation(line: 2421, column: 26, scope: !8452)
!8454 = !DILocation(line: 2421, column: 38, scope: !8452)
!8455 = !DILocation(line: 2421, column: 35, scope: !8452)
!8456 = !DILocation(line: 2421, column: 42, scope: !8452)
!8457 = !DILocation(line: 2421, column: 32, scope: !8452)
!8458 = !DILocation(line: 2421, column: 21, scope: !8452)
!8459 = !DILocation(line: 2421, column: 19, scope: !8452)
!8460 = !DILocation(line: 2422, column: 15, scope: !8452)
!8461 = !DILocation(line: 2429, column: 22, scope: !8452)
!8462 = !DILocation(line: 2429, column: 26, scope: !8452)
!8463 = !DILocation(line: 2429, column: 38, scope: !8452)
!8464 = !DILocation(line: 2429, column: 35, scope: !8452)
!8465 = !DILocation(line: 2429, column: 42, scope: !8452)
!8466 = !DILocation(line: 2429, column: 32, scope: !8452)
!8467 = !DILocation(line: 2429, column: 49, scope: !8452)
!8468 = !DILocation(line: 2429, column: 21, scope: !8452)
!8469 = !DILocation(line: 2429, column: 19, scope: !8452)
!8470 = !DILocation(line: 2430, column: 15, scope: !8452)
!8471 = !DILocation(line: 2437, column: 22, scope: !8452)
!8472 = !DILocation(line: 2437, column: 26, scope: !8452)
!8473 = !DILocation(line: 2437, column: 38, scope: !8452)
!8474 = !DILocation(line: 2437, column: 35, scope: !8452)
!8475 = !DILocation(line: 2437, column: 42, scope: !8452)
!8476 = !DILocation(line: 2437, column: 32, scope: !8452)
!8477 = !DILocation(line: 2437, column: 49, scope: !8452)
!8478 = !DILocation(line: 2437, column: 21, scope: !8452)
!8479 = !DILocation(line: 2437, column: 19, scope: !8452)
!8480 = !DILocation(line: 2438, column: 15, scope: !8452)
!8481 = !DILocation(line: 2440, column: 24, scope: !8452)
!8482 = !DILocation(line: 2440, column: 18, scope: !8452)
!8483 = !DILocation(line: 2440, column: 22, scope: !8452)
!8484 = !DILocation(line: 2441, column: 15, scope: !8452)
!8485 = !DILocation(line: 2442, column: 21, scope: !8452)
!8486 = !DILocation(line: 2443, column: 15, scope: !8452)
!8487 = !DILocation(line: 2445, column: 11, scope: !8345)
!8488 = !DILocation(line: 2448, column: 17, scope: !8345)
!8489 = !DILocation(line: 2449, column: 16, scope: !8490)
!8490 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2449, column: 15)
!8491 = !DILocation(line: 2449, column: 15, scope: !8490)
!8492 = !DILocation(line: 2449, column: 18, scope: !8490)
!8493 = !DILocation(line: 2449, column: 25, scope: !8490)
!8494 = !DILocation(line: 2449, column: 29, scope: !8490)
!8495 = !DILocation(line: 2449, column: 28, scope: !8490)
!8496 = !DILocation(line: 2449, column: 31, scope: !8490)
!8497 = !DILocation(line: 2449, column: 15, scope: !8345)
!8498 = !DILocation(line: 2451, column: 27, scope: !8499)
!8499 = distinct !DILexicalBlock(scope: !8490, file: !3, line: 2450, column: 13)
!8500 = !DILocation(line: 2451, column: 24, scope: !8499)
!8501 = !DILocation(line: 2451, column: 31, scope: !8499)
!8502 = !DILocation(line: 2451, column: 18, scope: !8499)
!8503 = !DILocation(line: 2451, column: 22, scope: !8499)
!8504 = !DILocation(line: 2452, column: 15, scope: !8499)
!8505 = !DILocation(line: 2453, column: 13, scope: !8499)
!8506 = !DILocation(line: 2454, column: 21, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8490, file: !3, line: 2454, column: 20)
!8508 = !DILocation(line: 2454, column: 20, scope: !8507)
!8509 = !DILocation(line: 2454, column: 23, scope: !8507)
!8510 = !DILocation(line: 2454, column: 20, scope: !8490)
!8511 = !DILocation(line: 2456, column: 18, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 2455, column: 13)
!8513 = !DILocation(line: 2456, column: 22, scope: !8512)
!8514 = !DILocation(line: 2457, column: 15, scope: !8512)
!8515 = !DILocation(line: 2458, column: 13, scope: !8512)
!8516 = !DILocation(line: 2460, column: 19, scope: !8507)
!8517 = !DILocation(line: 2461, column: 11, scope: !8345)
!8518 = !DILocation(line: 2464, column: 11, scope: !8345)
!8519 = distinct !{!8519, !8338, !8520}
!8520 = !DILocation(line: 2466, column: 5, scope: !138)
!8521 = !DILocation(line: 2468, column: 11, scope: !138)
!8522 = !DILocation(line: 2468, column: 4, scope: !138)
!8523 = !DILocation(line: 2468, column: 9, scope: !138)
!8524 = !DILocation(line: 2469, column: 10, scope: !138)
!8525 = !DILocation(line: 2469, column: 4, scope: !138)
!8526 = !DILocation(line: 2469, column: 8, scope: !138)
!8527 = !DILocation(line: 2470, column: 19, scope: !138)
!8528 = !DILocation(line: 2470, column: 4, scope: !138)
!8529 = !DILocation(line: 2470, column: 17, scope: !138)
!8530 = !DILocation(line: 2472, column: 10, scope: !138)
!8531 = !DILocation(line: 2472, column: 16, scope: !138)
!8532 = !DILocation(line: 2472, column: 3, scope: !138)
!8533 = distinct !DISubprogram(name: "getenv_quoting_style", scope: !3, file: !3, line: 2655, type: !532, scopeLine: 2656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8534 = !DILocalVariable(name: "q_style", scope: !8533, file: !3, line: 2657, type: !146)
!8535 = !DILocation(line: 2657, column: 15, scope: !8533)
!8536 = !DILocation(line: 2657, column: 25, scope: !8533)
!8537 = !DILocation(line: 2658, column: 7, scope: !8538)
!8538 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 2658, column: 7)
!8539 = !DILocation(line: 2658, column: 7, scope: !8533)
!8540 = !DILocalVariable(name: "i", scope: !8541, file: !3, line: 2660, type: !27)
!8541 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 2659, column: 5)
!8542 = !DILocation(line: 2660, column: 11, scope: !8541)
!8543 = !DILocation(line: 2660, column: 15, scope: !8541)
!8544 = !DILocation(line: 2661, column: 16, scope: !8545)
!8545 = distinct !DILexicalBlock(scope: !8541, file: !3, line: 2661, column: 11)
!8546 = !DILocation(line: 2661, column: 13, scope: !8545)
!8547 = !DILocation(line: 2661, column: 11, scope: !8541)
!8548 = !DILocation(line: 2662, column: 53, scope: !8545)
!8549 = !DILocation(line: 2662, column: 34, scope: !8545)
!8550 = !DILocation(line: 2662, column: 9, scope: !8545)
!8551 = !DILocation(line: 2665, column: 8, scope: !8545)
!8552 = !DILocation(line: 2666, column: 23, scope: !8545)
!8553 = !DILocation(line: 2666, column: 16, scope: !8545)
!8554 = !DILocation(line: 2664, column: 9, scope: !8545)
!8555 = !DILocation(line: 2667, column: 5, scope: !8541)
!8556 = !DILocation(line: 2668, column: 1, scope: !8533)
!8557 = distinct !DISubprogram(name: "set_line_length", scope: !3, file: !3, line: 1663, type: !4849, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8558 = !DILocalVariable(name: "spec", arg: 1, scope: !8557, file: !3, line: 1663, type: !146)
!8559 = !DILocation(line: 1663, column: 30, scope: !8557)
!8560 = !DILocalVariable(name: "val", scope: !8557, file: !3, line: 1665, type: !168)
!8561 = !DILocation(line: 1665, column: 13, scope: !8557)
!8562 = !DILocation(line: 1669, column: 23, scope: !8557)
!8563 = !DILocation(line: 1669, column: 11, scope: !8557)
!8564 = !DILocation(line: 1669, column: 3, scope: !8557)
!8565 = !DILocation(line: 1672, column: 21, scope: !8566)
!8566 = distinct !DILexicalBlock(scope: !8557, file: !3, line: 1670, column: 5)
!8567 = !DILocation(line: 1672, column: 19, scope: !8566)
!8568 = !DILocation(line: 1673, column: 7, scope: !8566)
!8569 = !DILocation(line: 1676, column: 19, scope: !8566)
!8570 = !DILocation(line: 1677, column: 7, scope: !8566)
!8571 = !DILocation(line: 1680, column: 7, scope: !8566)
!8572 = !DILocation(line: 1682, column: 1, scope: !8557)
!8573 = distinct !DISubprogram(name: "add_ignore_pattern", scope: !3, file: !3, line: 2893, type: !840, scopeLine: 2894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8574 = !DILocalVariable(name: "pattern", arg: 1, scope: !8573, file: !3, line: 2893, type: !146)
!8575 = !DILocation(line: 2893, column: 33, scope: !8573)
!8576 = !DILocalVariable(name: "ignore", scope: !8573, file: !3, line: 2895, type: !617)
!8577 = !DILocation(line: 2895, column: 26, scope: !8573)
!8578 = !DILocation(line: 2897, column: 12, scope: !8573)
!8579 = !DILocation(line: 2897, column: 10, scope: !8573)
!8580 = !DILocation(line: 2898, column: 21, scope: !8573)
!8581 = !DILocation(line: 2898, column: 3, scope: !8573)
!8582 = !DILocation(line: 2898, column: 11, scope: !8573)
!8583 = !DILocation(line: 2898, column: 19, scope: !8573)
!8584 = !DILocation(line: 2900, column: 18, scope: !8573)
!8585 = !DILocation(line: 2900, column: 3, scope: !8573)
!8586 = !DILocation(line: 2900, column: 11, scope: !8573)
!8587 = !DILocation(line: 2900, column: 16, scope: !8573)
!8588 = !DILocation(line: 2901, column: 21, scope: !8573)
!8589 = !DILocation(line: 2901, column: 19, scope: !8573)
!8590 = !DILocation(line: 2902, column: 1, scope: !8573)
!8591 = distinct !DISubprogram(name: "bad_cast", scope: !838, file: !838, line: 695, type: !8592, scopeLine: 696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8592 = !DISubroutineType(types: !8593)
!8593 = !{!143, !146}
!8594 = !DILocalVariable(name: "s", arg: 1, scope: !8591, file: !838, line: 695, type: !146)
!8595 = !DILocation(line: 695, column: 23, scope: !8591)
!8596 = !DILocation(line: 697, column: 19, scope: !8591)
!8597 = !DILocation(line: 697, column: 3, scope: !8591)
!8598 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 5127, type: !174, scopeLine: 5128, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8599 = !DILocalVariable(name: "status", arg: 1, scope: !8598, file: !3, line: 5127, type: !27)
!8600 = !DILocation(line: 5127, column: 12, scope: !8598)
!8601 = !DILocation(line: 5129, column: 7, scope: !8602)
!8602 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5129, column: 7)
!8603 = !DILocation(line: 5129, column: 14, scope: !8602)
!8604 = !DILocation(line: 5129, column: 7, scope: !8598)
!8605 = !DILocation(line: 5130, column: 5, scope: !8602)
!8606 = !DILocation(line: 5130, column: 5, scope: !8607)
!8607 = distinct !DILexicalBlock(scope: !8602, file: !3, line: 5130, column: 5)
!8608 = !DILocation(line: 5133, column: 15, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8602, file: !3, line: 5132, column: 5)
!8610 = !DILocation(line: 5133, column: 55, scope: !8609)
!8611 = !DILocation(line: 5133, column: 7, scope: !8609)
!8612 = !DILocation(line: 5134, column: 7, scope: !8609)
!8613 = !DILocation(line: 5139, column: 7, scope: !8609)
!8614 = !DILocation(line: 5141, column: 7, scope: !8609)
!8615 = !DILocation(line: 5147, column: 7, scope: !8609)
!8616 = !DILocation(line: 5151, column: 7, scope: !8609)
!8617 = !DILocation(line: 5158, column: 7, scope: !8609)
!8618 = !DILocation(line: 5167, column: 7, scope: !8609)
!8619 = !DILocation(line: 5175, column: 7, scope: !8609)
!8620 = !DILocation(line: 5178, column: 7, scope: !8609)
!8621 = !DILocation(line: 5184, column: 7, scope: !8609)
!8622 = !DILocation(line: 5187, column: 7, scope: !8609)
!8623 = !DILocation(line: 5191, column: 7, scope: !8609)
!8624 = !DILocation(line: 5201, column: 7, scope: !8609)
!8625 = !DILocation(line: 5205, column: 7, scope: !8609)
!8626 = !DILocation(line: 5214, column: 7, scope: !8609)
!8627 = !DILocation(line: 5218, column: 7, scope: !8609)
!8628 = !DILocation(line: 5226, column: 7, scope: !8609)
!8629 = !DILocation(line: 5233, column: 7, scope: !8609)
!8630 = !DILocation(line: 5244, column: 7, scope: !8609)
!8631 = !DILocation(line: 5249, column: 7, scope: !8609)
!8632 = !DILocation(line: 5260, column: 7, scope: !8609)
!8633 = !DILocation(line: 5263, column: 7, scope: !8609)
!8634 = !DILocation(line: 5267, column: 7, scope: !8609)
!8635 = !DILocation(line: 5274, column: 7, scope: !8609)
!8636 = !DILocation(line: 5282, column: 7, scope: !8609)
!8637 = !DILocation(line: 5283, column: 7, scope: !8609)
!8638 = !DILocation(line: 5284, column: 7, scope: !8609)
!8639 = !DILocation(line: 5285, column: 7, scope: !8609)
!8640 = !DILocation(line: 5293, column: 7, scope: !8609)
!8641 = !DILocation(line: 5300, column: 7, scope: !8609)
!8642 = !DILocation(line: 5307, column: 28, scope: !8609)
!8643 = !DILocation(line: 5307, column: 7, scope: !8609)
!8644 = !DILocation(line: 5309, column: 9, scope: !8598)
!8645 = !DILocation(line: 5309, column: 3, scope: !8598)
!8646 = distinct !DISubprogram(name: "abformat_init", scope: !3, file: !3, line: 1152, type: !532, scopeLine: 1153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8647 = !DILocalVariable(name: "pb", scope: !8646, file: !3, line: 1154, type: !686)
!8648 = !DILocation(line: 1154, column: 15, scope: !8646)
!8649 = !DILocalVariable(name: "recent", scope: !8650, file: !3, line: 1155, type: !27)
!8650 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 1155, column: 3)
!8651 = !DILocation(line: 1155, column: 12, scope: !8650)
!8652 = !DILocation(line: 1155, column: 8, scope: !8650)
!8653 = !DILocation(line: 1155, column: 24, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8650, file: !3, line: 1155, column: 3)
!8655 = !DILocation(line: 1155, column: 31, scope: !8654)
!8656 = !DILocation(line: 1155, column: 3, scope: !8650)
!8657 = !DILocation(line: 1156, column: 52, scope: !8654)
!8658 = !DILocation(line: 1156, column: 35, scope: !8654)
!8659 = !DILocation(line: 1156, column: 18, scope: !8654)
!8660 = !DILocation(line: 1156, column: 8, scope: !8654)
!8661 = !DILocation(line: 1156, column: 5, scope: !8654)
!8662 = !DILocation(line: 1156, column: 16, scope: !8654)
!8663 = !DILocation(line: 1155, column: 42, scope: !8654)
!8664 = !DILocation(line: 1155, column: 3, scope: !8654)
!8665 = distinct !{!8665, !8656, !8666}
!8666 = !DILocation(line: 1156, column: 59, scope: !8650)
!8667 = !DILocation(line: 1157, column: 10, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 1157, column: 7)
!8669 = !DILocation(line: 1157, column: 16, scope: !8668)
!8670 = !DILocation(line: 1157, column: 19, scope: !8668)
!8671 = !DILocation(line: 1157, column: 7, scope: !8646)
!8672 = !DILocation(line: 1158, column: 5, scope: !8668)
!8673 = !DILocalVariable(name: "abmon", scope: !8646, file: !3, line: 1160, type: !700)
!8674 = !DILocation(line: 1160, column: 8, scope: !8646)
!8675 = !DILocation(line: 1161, column: 21, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 1161, column: 7)
!8677 = !DILocation(line: 1161, column: 9, scope: !8676)
!8678 = !DILocation(line: 1161, column: 7, scope: !8646)
!8679 = !DILocation(line: 1162, column: 5, scope: !8676)
!8680 = !DILocalVariable(name: "recent", scope: !8681, file: !3, line: 1164, type: !27)
!8681 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 1164, column: 3)
!8682 = !DILocation(line: 1164, column: 12, scope: !8681)
!8683 = !DILocation(line: 1164, column: 8, scope: !8681)
!8684 = !DILocation(line: 1164, column: 24, scope: !8685)
!8685 = distinct !DILexicalBlock(scope: !8681, file: !3, line: 1164, column: 3)
!8686 = !DILocation(line: 1164, column: 31, scope: !8685)
!8687 = !DILocation(line: 1164, column: 3, scope: !8681)
!8688 = !DILocalVariable(name: "fmt", scope: !8689, file: !3, line: 1166, type: !146)
!8689 = distinct !DILexicalBlock(scope: !8685, file: !3, line: 1165, column: 5)
!8690 = !DILocation(line: 1166, column: 19, scope: !8689)
!8691 = !DILocation(line: 1166, column: 42, scope: !8689)
!8692 = !DILocation(line: 1166, column: 25, scope: !8689)
!8693 = !DILocalVariable(name: "i", scope: !8694, file: !3, line: 1167, type: !27)
!8694 = distinct !DILexicalBlock(scope: !8689, file: !3, line: 1167, column: 7)
!8695 = !DILocation(line: 1167, column: 16, scope: !8694)
!8696 = !DILocation(line: 1167, column: 12, scope: !8694)
!8697 = !DILocation(line: 1167, column: 23, scope: !8698)
!8698 = distinct !DILexicalBlock(scope: !8694, file: !3, line: 1167, column: 7)
!8699 = !DILocation(line: 1167, column: 25, scope: !8698)
!8700 = !DILocation(line: 1167, column: 7, scope: !8694)
!8701 = !DILocalVariable(name: "nfmt", scope: !8702, file: !3, line: 1169, type: !143)
!8702 = distinct !DILexicalBlock(scope: !8698, file: !3, line: 1168, column: 9)
!8703 = !DILocation(line: 1169, column: 17, scope: !8702)
!8704 = !DILocation(line: 1169, column: 33, scope: !8702)
!8705 = !DILocation(line: 1169, column: 24, scope: !8702)
!8706 = !DILocation(line: 1169, column: 41, scope: !8702)
!8707 = !DILocalVariable(name: "nbytes", scope: !8702, file: !3, line: 1170, type: !27)
!8708 = !DILocation(line: 1170, column: 15, scope: !8702)
!8709 = !DILocation(line: 1172, column: 20, scope: !8710)
!8710 = distinct !DILexicalBlock(scope: !8702, file: !3, line: 1172, column: 15)
!8711 = !DILocation(line: 1172, column: 17, scope: !8710)
!8712 = !DILocation(line: 1172, column: 15, scope: !8702)
!8713 = !DILocation(line: 1173, column: 32, scope: !8710)
!8714 = !DILocation(line: 1173, column: 59, scope: !8710)
!8715 = !DILocation(line: 1173, column: 22, scope: !8710)
!8716 = !DILocation(line: 1173, column: 20, scope: !8710)
!8717 = !DILocation(line: 1173, column: 13, scope: !8710)
!8718 = !DILocation(line: 1176, column: 25, scope: !8719)
!8719 = distinct !DILexicalBlock(scope: !8720, file: !3, line: 1176, column: 19)
!8720 = distinct !DILexicalBlock(scope: !8710, file: !3, line: 1175, column: 13)
!8721 = !DILocation(line: 1176, column: 22, scope: !8719)
!8722 = !DILocation(line: 1176, column: 35, scope: !8719)
!8723 = !DILocation(line: 1176, column: 33, scope: !8719)
!8724 = !DILocation(line: 1176, column: 39, scope: !8719)
!8725 = !DILocation(line: 1176, column: 19, scope: !8720)
!8726 = !DILocation(line: 1177, column: 17, scope: !8719)
!8727 = !DILocalVariable(name: "prefix_len", scope: !8720, file: !3, line: 1178, type: !27)
!8728 = !DILocation(line: 1178, column: 19, scope: !8720)
!8729 = !DILocation(line: 1178, column: 35, scope: !8720)
!8730 = !DILocation(line: 1178, column: 32, scope: !8720)
!8731 = !DILocation(line: 1178, column: 45, scope: !8720)
!8732 = !DILocation(line: 1178, column: 43, scope: !8720)
!8733 = !DILocation(line: 1179, column: 34, scope: !8720)
!8734 = !DILocation(line: 1180, column: 34, scope: !8720)
!8735 = !DILocation(line: 1180, column: 46, scope: !8720)
!8736 = !DILocation(line: 1180, column: 57, scope: !8720)
!8737 = !DILocation(line: 1180, column: 51, scope: !8720)
!8738 = !DILocation(line: 1180, column: 64, scope: !8720)
!8739 = !DILocation(line: 1180, column: 61, scope: !8720)
!8740 = !DILocation(line: 1180, column: 72, scope: !8720)
!8741 = !DILocation(line: 1179, column: 24, scope: !8720)
!8742 = !DILocation(line: 1179, column: 22, scope: !8720)
!8743 = !DILocation(line: 1183, column: 23, scope: !8744)
!8744 = distinct !DILexicalBlock(scope: !8702, file: !3, line: 1183, column: 15)
!8745 = !DILocation(line: 1183, column: 20, scope: !8744)
!8746 = !DILocation(line: 1183, column: 30, scope: !8744)
!8747 = !DILocation(line: 1183, column: 33, scope: !8744)
!8748 = !DILocation(line: 1183, column: 40, scope: !8744)
!8749 = !DILocation(line: 1183, column: 15, scope: !8702)
!8750 = !DILocation(line: 1184, column: 13, scope: !8744)
!8751 = !DILocation(line: 1185, column: 9, scope: !8702)
!8752 = !DILocation(line: 1167, column: 32, scope: !8698)
!8753 = !DILocation(line: 1167, column: 7, scope: !8698)
!8754 = distinct !{!8754, !8700, !8755}
!8755 = !DILocation(line: 1185, column: 9, scope: !8694)
!8756 = !DILocation(line: 1186, column: 5, scope: !8689)
!8757 = !DILocation(line: 1164, column: 42, scope: !8685)
!8758 = !DILocation(line: 1164, column: 3, scope: !8685)
!8759 = distinct !{!8759, !8687, !8760}
!8760 = !DILocation(line: 1186, column: 5, scope: !8681)
!8761 = !DILocation(line: 1188, column: 16, scope: !8646)
!8762 = !DILocation(line: 1189, column: 1, scope: !8646)
!8763 = distinct !DISubprogram(name: "first_percent_b", scope: !3, file: !3, line: 1071, type: !8764, scopeLine: 1072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8764 = !DISubroutineType(types: !8765)
!8765 = !{!146, !146}
!8766 = !DILocalVariable(name: "fmt", arg: 1, scope: !8763, file: !3, line: 1071, type: !146)
!8767 = !DILocation(line: 1071, column: 30, scope: !8763)
!8768 = !DILocation(line: 1073, column: 3, scope: !8763)
!8769 = !DILocation(line: 1073, column: 11, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 1073, column: 3)
!8771 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 1073, column: 3)
!8772 = !DILocation(line: 1073, column: 10, scope: !8770)
!8773 = !DILocation(line: 1073, column: 3, scope: !8771)
!8774 = !DILocation(line: 1074, column: 9, scope: !8775)
!8775 = distinct !DILexicalBlock(scope: !8770, file: !3, line: 1074, column: 9)
!8776 = !DILocation(line: 1074, column: 16, scope: !8775)
!8777 = !DILocation(line: 1074, column: 9, scope: !8770)
!8778 = !DILocation(line: 1075, column: 15, scope: !8775)
!8779 = !DILocation(line: 1075, column: 7, scope: !8775)
!8780 = !DILocation(line: 1077, column: 26, scope: !8781)
!8781 = distinct !DILexicalBlock(scope: !8775, file: !3, line: 1076, column: 9)
!8782 = !DILocation(line: 1077, column: 19, scope: !8781)
!8783 = !DILocation(line: 1078, column: 22, scope: !8781)
!8784 = !DILocation(line: 1078, column: 26, scope: !8781)
!8785 = !DILocation(line: 1079, column: 9, scope: !8781)
!8786 = !DILocation(line: 1074, column: 19, scope: !8775)
!8787 = !DILocation(line: 1073, column: 19, scope: !8770)
!8788 = !DILocation(line: 1073, column: 3, scope: !8770)
!8789 = distinct !{!8789, !8773, !8790}
!8790 = !DILocation(line: 1079, column: 9, scope: !8771)
!8791 = !DILocation(line: 1080, column: 3, scope: !8763)
!8792 = !DILocation(line: 1081, column: 1, scope: !8763)
!8793 = distinct !DISubprogram(name: "abmon_init", scope: !3, file: !3, line: 1117, type: !8794, scopeLine: 1118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8794 = !DISubroutineType(types: !8795)
!8795 = !{!141, !8796}
!8796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !705, size: 64)
!8797 = !DILocalVariable(name: "abmon", arg: 1, scope: !8793, file: !3, line: 1117, type: !8796)
!8798 = !DILocation(line: 1117, column: 18, scope: !8793)
!8799 = !DILocalVariable(name: "required_mon_width", scope: !8793, file: !3, line: 1122, type: !149)
!8800 = !DILocation(line: 1122, column: 10, scope: !8793)
!8801 = !DILocalVariable(name: "curr_max_width", scope: !8793, file: !3, line: 1123, type: !149)
!8802 = !DILocation(line: 1123, column: 10, scope: !8793)
!8803 = !DILocation(line: 1124, column: 3, scope: !8793)
!8804 = !DILocation(line: 1126, column: 24, scope: !8805)
!8805 = distinct !DILexicalBlock(scope: !8793, file: !3, line: 1125, column: 5)
!8806 = !DILocation(line: 1126, column: 22, scope: !8805)
!8807 = !DILocation(line: 1127, column: 26, scope: !8805)
!8808 = !DILocalVariable(name: "i", scope: !8809, file: !3, line: 1128, type: !27)
!8809 = distinct !DILexicalBlock(scope: !8805, file: !3, line: 1128, column: 7)
!8810 = !DILocation(line: 1128, column: 16, scope: !8809)
!8811 = !DILocation(line: 1128, column: 12, scope: !8809)
!8812 = !DILocation(line: 1128, column: 23, scope: !8813)
!8813 = distinct !DILexicalBlock(scope: !8809, file: !3, line: 1128, column: 7)
!8814 = !DILocation(line: 1128, column: 25, scope: !8813)
!8815 = !DILocation(line: 1128, column: 7, scope: !8809)
!8816 = !DILocalVariable(name: "width", scope: !8817, file: !3, line: 1130, type: !149)
!8817 = distinct !DILexicalBlock(scope: !8813, file: !3, line: 1129, column: 9)
!8818 = !DILocation(line: 1130, column: 18, scope: !8817)
!8819 = !DILocation(line: 1130, column: 26, scope: !8817)
!8820 = !DILocalVariable(name: "abbr", scope: !8817, file: !3, line: 1131, type: !146)
!8821 = !DILocation(line: 1131, column: 23, scope: !8817)
!8822 = !DILocation(line: 1131, column: 53, scope: !8817)
!8823 = !DILocation(line: 1131, column: 51, scope: !8817)
!8824 = !DILocation(line: 1131, column: 30, scope: !8817)
!8825 = !DILocation(line: 1132, column: 23, scope: !8826)
!8826 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 1132, column: 15)
!8827 = !DILocation(line: 1132, column: 15, scope: !8826)
!8828 = !DILocation(line: 1132, column: 15, scope: !8817)
!8829 = !DILocation(line: 1133, column: 13, scope: !8826)
!8830 = !DILocalVariable(name: "alignment", scope: !8817, file: !3, line: 1134, type: !707)
!8831 = !DILocation(line: 1134, column: 23, scope: !8817)
!8832 = !DILocation(line: 1134, column: 35, scope: !8817)
!8833 = !DILocalVariable(name: "req", scope: !8817, file: !3, line: 1136, type: !149)
!8834 = !DILocation(line: 1136, column: 18, scope: !8817)
!8835 = !DILocation(line: 1136, column: 34, scope: !8817)
!8836 = !DILocation(line: 1136, column: 40, scope: !8817)
!8837 = !DILocation(line: 1136, column: 46, scope: !8817)
!8838 = !DILocation(line: 1137, column: 42, scope: !8817)
!8839 = !DILocation(line: 1136, column: 24, scope: !8817)
!8840 = !DILocation(line: 1138, column: 18, scope: !8841)
!8841 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 1138, column: 15)
!8842 = !DILocation(line: 1138, column: 22, scope: !8841)
!8843 = !DILocation(line: 1138, column: 15, scope: !8817)
!8844 = !DILocation(line: 1139, column: 13, scope: !8841)
!8845 = !DILocation(line: 1140, column: 32, scope: !8817)
!8846 = !DILocation(line: 1140, column: 30, scope: !8817)
!8847 = !DILocation(line: 1141, column: 9, scope: !8817)
!8848 = !DILocation(line: 1128, column: 32, scope: !8813)
!8849 = !DILocation(line: 1128, column: 7, scope: !8813)
!8850 = distinct !{!8850, !8815, !8851}
!8851 = !DILocation(line: 1141, column: 9, scope: !8809)
!8852 = !DILocation(line: 1142, column: 5, scope: !8805)
!8853 = !DILocation(line: 1143, column: 10, scope: !8793)
!8854 = !DILocation(line: 1143, column: 27, scope: !8793)
!8855 = !DILocation(line: 1143, column: 25, scope: !8793)
!8856 = distinct !{!8856, !8803, !8857}
!8857 = !DILocation(line: 1143, column: 45, scope: !8793)
!8858 = !DILocation(line: 1145, column: 3, scope: !8793)
!8859 = !DILocation(line: 1147, column: 1, scope: !8793)
!8860 = distinct !DISubprogram(name: "emit_mandatory_arg_note", scope: !838, file: !838, line: 585, type: !532, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8861 = !DILocation(line: 587, column: 3, scope: !8860)
!8862 = !DILocation(line: 590, column: 1, scope: !8860)
!8863 = distinct !DISubprogram(name: "emit_size_note", scope: !838, file: !838, line: 593, type: !532, scopeLine: 594, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !152)
!8864 = !DILocation(line: 595, column: 3, scope: !8863)
!8865 = !DILocation(line: 600, column: 1, scope: !8863)
!8866 = !DILocalVariable(name: "program", arg: 1, scope: !839, file: !838, line: 631, type: !146)
!8867 = !DILocation(line: 631, column: 34, scope: !839)
!8868 = !DILocalVariable(name: "infomap", scope: !839, file: !838, line: 633, type: !835)
!8869 = !DILocation(line: 633, column: 67, scope: !839)
!8870 = !DILocalVariable(name: "node", scope: !839, file: !838, line: 643, type: !146)
!8871 = !DILocation(line: 643, column: 15, scope: !839)
!8872 = !DILocation(line: 643, column: 22, scope: !839)
!8873 = !DILocalVariable(name: "map_prog", scope: !839, file: !838, line: 644, type: !845)
!8874 = !DILocation(line: 644, column: 25, scope: !839)
!8875 = !DILocation(line: 644, column: 36, scope: !839)
!8876 = !DILocation(line: 646, column: 3, scope: !839)
!8877 = !DILocation(line: 646, column: 10, scope: !839)
!8878 = !DILocation(line: 646, column: 20, scope: !839)
!8879 = !DILocation(line: 646, column: 28, scope: !839)
!8880 = !DILocation(line: 646, column: 33, scope: !839)
!8881 = !DILocation(line: 646, column: 31, scope: !839)
!8882 = !DILocation(line: 0, scope: !839)
!8883 = !DILocation(line: 647, column: 13, scope: !839)
!8884 = distinct !{!8884, !8876, !8883}
!8885 = !DILocation(line: 649, column: 7, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !839, file: !838, line: 649, column: 7)
!8887 = !DILocation(line: 649, column: 17, scope: !8886)
!8888 = !DILocation(line: 649, column: 7, scope: !839)
!8889 = !DILocation(line: 650, column: 12, scope: !8886)
!8890 = !DILocation(line: 650, column: 22, scope: !8886)
!8891 = !DILocation(line: 650, column: 10, scope: !8886)
!8892 = !DILocation(line: 650, column: 5, scope: !8886)
!8893 = !DILocation(line: 652, column: 11, scope: !839)
!8894 = !DILocation(line: 652, column: 3, scope: !839)
!8895 = !DILocalVariable(name: "lc_messages", scope: !839, file: !838, line: 656, type: !146)
!8896 = !DILocation(line: 656, column: 15, scope: !839)
!8897 = !DILocation(line: 656, column: 29, scope: !839)
!8898 = !DILocation(line: 657, column: 7, scope: !8899)
!8899 = distinct !DILexicalBlock(scope: !839, file: !838, line: 657, column: 7)
!8900 = !DILocation(line: 657, column: 19, scope: !8899)
!8901 = !DILocation(line: 657, column: 22, scope: !8899)
!8902 = !DILocation(line: 657, column: 7, scope: !839)
!8903 = !DILocation(line: 663, column: 7, scope: !8904)
!8904 = distinct !DILexicalBlock(scope: !8899, file: !838, line: 658, column: 5)
!8905 = !DILocation(line: 665, column: 5, scope: !8904)
!8906 = !DILocation(line: 666, column: 11, scope: !839)
!8907 = !DILocation(line: 667, column: 24, scope: !839)
!8908 = !DILocation(line: 666, column: 3, scope: !839)
!8909 = !DILocation(line: 668, column: 11, scope: !839)
!8910 = !DILocation(line: 669, column: 11, scope: !839)
!8911 = !DILocation(line: 669, column: 17, scope: !839)
!8912 = !DILocation(line: 669, column: 25, scope: !839)
!8913 = !DILocation(line: 669, column: 22, scope: !839)
!8914 = !DILocation(line: 668, column: 3, scope: !839)
!8915 = !DILocation(line: 670, column: 1, scope: !839)
!8916 = distinct !DISubprogram(name: "areadlink_with_size", scope: !8917, file: !8917, line: 52, type: !8918, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1511, retainedNodes: !152)
!8917 = !DIFile(filename: "lib/areadlink-with-size.c", directory: "/home/mbarbar/software/coreutils-8.31")
!8918 = !DISubroutineType(types: !8919)
!8919 = !{!143, !146, !149}
!8920 = !DILocalVariable(name: "file", arg: 1, scope: !8916, file: !8917, line: 52, type: !146)
!8921 = !DILocation(line: 52, column: 34, scope: !8916)
!8922 = !DILocalVariable(name: "size", arg: 2, scope: !8916, file: !8917, line: 52, type: !149)
!8923 = !DILocation(line: 52, column: 47, scope: !8916)
!8924 = !DILocalVariable(name: "symlink_max", scope: !8916, file: !8917, line: 57, type: !149)
!8925 = !DILocation(line: 57, column: 10, scope: !8916)
!8926 = !DILocalVariable(name: "INITIAL_LIMIT_BOUND", scope: !8916, file: !8917, line: 58, type: !149)
!8927 = !DILocation(line: 58, column: 10, scope: !8916)
!8928 = !DILocalVariable(name: "initial_limit", scope: !8916, file: !8917, line: 59, type: !149)
!8929 = !DILocation(line: 59, column: 10, scope: !8916)
!8930 = !DILocation(line: 59, column: 27, scope: !8916)
!8931 = !DILocation(line: 59, column: 41, scope: !8916)
!8932 = !DILocation(line: 59, column: 39, scope: !8916)
!8933 = !DILocation(line: 60, column: 29, scope: !8916)
!8934 = !DILocation(line: 60, column: 41, scope: !8916)
!8935 = !DILocation(line: 61, column: 29, scope: !8916)
!8936 = !DILocalVariable(name: "buf_size", scope: !8916, file: !8917, line: 64, type: !149)
!8937 = !DILocation(line: 64, column: 10, scope: !8916)
!8938 = !DILocation(line: 64, column: 21, scope: !8916)
!8939 = !DILocation(line: 64, column: 28, scope: !8916)
!8940 = !DILocation(line: 64, column: 26, scope: !8916)
!8941 = !DILocation(line: 64, column: 44, scope: !8916)
!8942 = !DILocation(line: 64, column: 49, scope: !8916)
!8943 = !DILocation(line: 64, column: 55, scope: !8916)
!8944 = !DILocation(line: 66, column: 3, scope: !8916)
!8945 = !DILocalVariable(name: "r", scope: !8946, file: !8917, line: 68, type: !1514)
!8946 = distinct !DILexicalBlock(scope: !8916, file: !8917, line: 67, column: 5)
!8947 = !DILocation(line: 68, column: 15, scope: !8946)
!8948 = !DILocalVariable(name: "link_length", scope: !8946, file: !8917, line: 69, type: !149)
!8949 = !DILocation(line: 69, column: 14, scope: !8946)
!8950 = !DILocalVariable(name: "buffer", scope: !8946, file: !8917, line: 70, type: !143)
!8951 = !DILocation(line: 70, column: 13, scope: !8946)
!8952 = !DILocation(line: 70, column: 30, scope: !8946)
!8953 = !DILocation(line: 70, column: 22, scope: !8946)
!8954 = !DILocation(line: 72, column: 11, scope: !8955)
!8955 = distinct !DILexicalBlock(scope: !8946, file: !8917, line: 72, column: 11)
!8956 = !DILocation(line: 72, column: 18, scope: !8955)
!8957 = !DILocation(line: 72, column: 11, scope: !8946)
!8958 = !DILocation(line: 73, column: 9, scope: !8955)
!8959 = !DILocation(line: 74, column: 21, scope: !8946)
!8960 = !DILocation(line: 74, column: 27, scope: !8946)
!8961 = !DILocation(line: 74, column: 35, scope: !8946)
!8962 = !DILocation(line: 74, column: 11, scope: !8946)
!8963 = !DILocation(line: 74, column: 9, scope: !8946)
!8964 = !DILocation(line: 75, column: 21, scope: !8946)
!8965 = !DILocation(line: 75, column: 19, scope: !8946)
!8966 = !DILocation(line: 79, column: 11, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8946, file: !8917, line: 79, column: 11)
!8968 = !DILocation(line: 79, column: 13, scope: !8967)
!8969 = !DILocation(line: 79, column: 17, scope: !8967)
!8970 = !DILocation(line: 79, column: 20, scope: !8967)
!8971 = !DILocation(line: 79, column: 26, scope: !8967)
!8972 = !DILocation(line: 79, column: 11, scope: !8946)
!8973 = !DILocalVariable(name: "saved_errno", scope: !8974, file: !8917, line: 81, type: !27)
!8974 = distinct !DILexicalBlock(scope: !8967, file: !8917, line: 80, column: 9)
!8975 = !DILocation(line: 81, column: 15, scope: !8974)
!8976 = !DILocation(line: 81, column: 29, scope: !8974)
!8977 = !DILocation(line: 82, column: 17, scope: !8974)
!8978 = !DILocation(line: 82, column: 11, scope: !8974)
!8979 = !DILocation(line: 83, column: 19, scope: !8974)
!8980 = !DILocation(line: 83, column: 11, scope: !8974)
!8981 = !DILocation(line: 83, column: 17, scope: !8974)
!8982 = !DILocation(line: 84, column: 11, scope: !8974)
!8983 = !DILocation(line: 87, column: 11, scope: !8984)
!8984 = distinct !DILexicalBlock(scope: !8946, file: !8917, line: 87, column: 11)
!8985 = !DILocation(line: 87, column: 25, scope: !8984)
!8986 = !DILocation(line: 87, column: 23, scope: !8984)
!8987 = !DILocation(line: 87, column: 11, scope: !8946)
!8988 = !DILocation(line: 89, column: 11, scope: !8989)
!8989 = distinct !DILexicalBlock(scope: !8984, file: !8917, line: 88, column: 9)
!8990 = !DILocation(line: 89, column: 18, scope: !8989)
!8991 = !DILocation(line: 89, column: 31, scope: !8989)
!8992 = !DILocation(line: 90, column: 18, scope: !8989)
!8993 = !DILocation(line: 90, column: 11, scope: !8989)
!8994 = !DILocation(line: 93, column: 13, scope: !8946)
!8995 = !DILocation(line: 93, column: 7, scope: !8946)
!8996 = !DILocation(line: 94, column: 11, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8946, file: !8917, line: 94, column: 11)
!8998 = !DILocation(line: 94, column: 20, scope: !8997)
!8999 = !DILocation(line: 94, column: 11, scope: !8946)
!9000 = !DILocation(line: 95, column: 18, scope: !8997)
!9001 = !DILocation(line: 95, column: 9, scope: !8997)
!9002 = !DILocation(line: 96, column: 16, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !8997, file: !8917, line: 96, column: 16)
!9004 = !DILocation(line: 96, column: 25, scope: !9003)
!9005 = !DILocation(line: 96, column: 16, scope: !8997)
!9006 = !DILocation(line: 97, column: 18, scope: !9003)
!9007 = !DILocation(line: 97, column: 9, scope: !9003)
!9008 = !DILocation(line: 100, column: 11, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !9003, file: !8917, line: 99, column: 9)
!9010 = !DILocation(line: 100, column: 17, scope: !9009)
!9011 = !DILocation(line: 101, column: 11, scope: !9009)
!9012 = distinct !{!9012, !8944, !9013}
!9013 = !DILocation(line: 103, column: 5, scope: !8916)
!9014 = !DILocation(line: 104, column: 1, scope: !8916)
!9015 = distinct !DISubprogram(name: "__argmatch_die", scope: !1139, file: !1139, line: 62, type: !532, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9016 = !DILocation(line: 64, column: 3, scope: !9015)
!9017 = !DILocation(line: 65, column: 1, scope: !9015)
!9018 = distinct !DISubprogram(name: "argmatch", scope: !1139, file: !1139, line: 84, type: !9019, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9019 = !DISubroutineType(types: !9020)
!9020 = !{!687, !146, !693, !146, !149}
!9021 = !DILocalVariable(name: "arg", arg: 1, scope: !9018, file: !1139, line: 84, type: !146)
!9022 = !DILocation(line: 84, column: 23, scope: !9018)
!9023 = !DILocalVariable(name: "arglist", arg: 2, scope: !9018, file: !1139, line: 84, type: !693)
!9024 = !DILocation(line: 84, column: 47, scope: !9018)
!9025 = !DILocalVariable(name: "vallist", arg: 3, scope: !9018, file: !1139, line: 85, type: !146)
!9026 = !DILocation(line: 85, column: 23, scope: !9018)
!9027 = !DILocalVariable(name: "valsize", arg: 4, scope: !9018, file: !1139, line: 85, type: !149)
!9028 = !DILocation(line: 85, column: 39, scope: !9018)
!9029 = !DILocalVariable(name: "i", scope: !9018, file: !1139, line: 87, type: !149)
!9030 = !DILocation(line: 87, column: 10, scope: !9018)
!9031 = !DILocalVariable(name: "arglen", scope: !9018, file: !1139, line: 88, type: !149)
!9032 = !DILocation(line: 88, column: 10, scope: !9018)
!9033 = !DILocalVariable(name: "matchind", scope: !9018, file: !1139, line: 89, type: !687)
!9034 = !DILocation(line: 89, column: 13, scope: !9018)
!9035 = !DILocalVariable(name: "ambiguous", scope: !9018, file: !1139, line: 90, type: !141)
!9036 = !DILocation(line: 90, column: 8, scope: !9018)
!9037 = !DILocation(line: 92, column: 20, scope: !9018)
!9038 = !DILocation(line: 92, column: 12, scope: !9018)
!9039 = !DILocation(line: 92, column: 10, scope: !9018)
!9040 = !DILocation(line: 95, column: 10, scope: !9041)
!9041 = distinct !DILexicalBlock(scope: !9018, file: !1139, line: 95, column: 3)
!9042 = !DILocation(line: 95, column: 8, scope: !9041)
!9043 = !DILocation(line: 95, column: 15, scope: !9044)
!9044 = distinct !DILexicalBlock(scope: !9041, file: !1139, line: 95, column: 3)
!9045 = !DILocation(line: 95, column: 23, scope: !9044)
!9046 = !DILocation(line: 95, column: 3, scope: !9041)
!9047 = !DILocation(line: 97, column: 21, scope: !9048)
!9048 = distinct !DILexicalBlock(scope: !9049, file: !1139, line: 97, column: 11)
!9049 = distinct !DILexicalBlock(scope: !9044, file: !1139, line: 96, column: 5)
!9050 = !DILocation(line: 97, column: 29, scope: !9048)
!9051 = !DILocation(line: 97, column: 33, scope: !9048)
!9052 = !DILocation(line: 97, column: 38, scope: !9048)
!9053 = !DILocation(line: 97, column: 12, scope: !9048)
!9054 = !DILocation(line: 97, column: 11, scope: !9049)
!9055 = !DILocation(line: 99, column: 23, scope: !9056)
!9056 = distinct !DILexicalBlock(scope: !9057, file: !1139, line: 99, column: 15)
!9057 = distinct !DILexicalBlock(scope: !9048, file: !1139, line: 98, column: 9)
!9058 = !DILocation(line: 99, column: 31, scope: !9056)
!9059 = !DILocation(line: 99, column: 15, scope: !9056)
!9060 = !DILocation(line: 99, column: 38, scope: !9056)
!9061 = !DILocation(line: 99, column: 35, scope: !9056)
!9062 = !DILocation(line: 99, column: 15, scope: !9057)
!9063 = !DILocation(line: 101, column: 20, scope: !9056)
!9064 = !DILocation(line: 101, column: 13, scope: !9056)
!9065 = !DILocation(line: 102, column: 20, scope: !9066)
!9066 = distinct !DILexicalBlock(scope: !9056, file: !1139, line: 102, column: 20)
!9067 = !DILocation(line: 102, column: 29, scope: !9066)
!9068 = !DILocation(line: 102, column: 20, scope: !9056)
!9069 = !DILocation(line: 104, column: 24, scope: !9066)
!9070 = !DILocation(line: 104, column: 22, scope: !9066)
!9071 = !DILocation(line: 104, column: 13, scope: !9066)
!9072 = !DILocation(line: 108, column: 19, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9074, file: !1139, line: 108, column: 19)
!9074 = distinct !DILexicalBlock(scope: !9066, file: !1139, line: 106, column: 13)
!9075 = !DILocation(line: 108, column: 27, scope: !9073)
!9076 = !DILocation(line: 109, column: 19, scope: !9073)
!9077 = !DILocation(line: 109, column: 30, scope: !9073)
!9078 = !DILocation(line: 109, column: 40, scope: !9073)
!9079 = !DILocation(line: 109, column: 50, scope: !9073)
!9080 = !DILocation(line: 109, column: 48, scope: !9073)
!9081 = !DILocation(line: 109, column: 38, scope: !9073)
!9082 = !DILocation(line: 110, column: 30, scope: !9073)
!9083 = !DILocation(line: 110, column: 40, scope: !9073)
!9084 = !DILocation(line: 110, column: 50, scope: !9073)
!9085 = !DILocation(line: 110, column: 48, scope: !9073)
!9086 = !DILocation(line: 110, column: 38, scope: !9073)
!9087 = !DILocation(line: 110, column: 53, scope: !9073)
!9088 = !DILocation(line: 109, column: 22, scope: !9073)
!9089 = !DILocation(line: 108, column: 19, scope: !9074)
!9090 = !DILocation(line: 114, column: 29, scope: !9091)
!9091 = distinct !DILexicalBlock(scope: !9073, file: !1139, line: 111, column: 17)
!9092 = !DILocation(line: 115, column: 17, scope: !9091)
!9093 = !DILocation(line: 117, column: 9, scope: !9057)
!9094 = !DILocation(line: 118, column: 5, scope: !9049)
!9095 = !DILocation(line: 95, column: 28, scope: !9044)
!9096 = !DILocation(line: 95, column: 3, scope: !9044)
!9097 = distinct !{!9097, !9046, !9098}
!9098 = !DILocation(line: 118, column: 5, scope: !9041)
!9099 = !DILocation(line: 119, column: 7, scope: !9100)
!9100 = distinct !DILexicalBlock(scope: !9018, file: !1139, line: 119, column: 7)
!9101 = !DILocation(line: 119, column: 7, scope: !9018)
!9102 = !DILocation(line: 120, column: 5, scope: !9100)
!9103 = !DILocation(line: 122, column: 12, scope: !9100)
!9104 = !DILocation(line: 122, column: 5, scope: !9100)
!9105 = !DILocation(line: 123, column: 1, scope: !9018)
!9106 = distinct !DISubprogram(name: "argmatch_invalid", scope: !1139, file: !1139, line: 131, type: !9107, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9107 = !DISubroutineType(types: !9108)
!9108 = !{null, !146, !146, !687}
!9109 = !DILocalVariable(name: "context", arg: 1, scope: !9106, file: !1139, line: 131, type: !146)
!9110 = !DILocation(line: 131, column: 31, scope: !9106)
!9111 = !DILocalVariable(name: "value", arg: 2, scope: !9106, file: !1139, line: 131, type: !146)
!9112 = !DILocation(line: 131, column: 52, scope: !9106)
!9113 = !DILocalVariable(name: "problem", arg: 3, scope: !9106, file: !1139, line: 131, type: !687)
!9114 = !DILocation(line: 131, column: 69, scope: !9106)
!9115 = !DILocalVariable(name: "format", scope: !9106, file: !1139, line: 133, type: !146)
!9116 = !DILocation(line: 133, column: 15, scope: !9106)
!9117 = !DILocation(line: 133, column: 25, scope: !9106)
!9118 = !DILocation(line: 133, column: 33, scope: !9106)
!9119 = !DILocation(line: 134, column: 27, scope: !9106)
!9120 = !DILocation(line: 135, column: 27, scope: !9106)
!9121 = !DILocation(line: 137, column: 16, scope: !9106)
!9122 = !DILocation(line: 137, column: 69, scope: !9106)
!9123 = !DILocation(line: 137, column: 24, scope: !9106)
!9124 = !DILocation(line: 138, column: 22, scope: !9106)
!9125 = !DILocation(line: 138, column: 10, scope: !9106)
!9126 = !DILocation(line: 137, column: 3, scope: !9106)
!9127 = !DILocation(line: 139, column: 1, scope: !9106)
!9128 = distinct !DISubprogram(name: "argmatch_valid", scope: !1139, file: !1139, line: 146, type: !9129, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9129 = !DISubroutineType(types: !9130)
!9130 = !{null, !693, !146, !149}
!9131 = !DILocalVariable(name: "arglist", arg: 1, scope: !9128, file: !1139, line: 146, type: !693)
!9132 = !DILocation(line: 146, column: 36, scope: !9128)
!9133 = !DILocalVariable(name: "vallist", arg: 2, scope: !9128, file: !1139, line: 147, type: !146)
!9134 = !DILocation(line: 147, column: 29, scope: !9128)
!9135 = !DILocalVariable(name: "valsize", arg: 3, scope: !9128, file: !1139, line: 147, type: !149)
!9136 = !DILocation(line: 147, column: 45, scope: !9128)
!9137 = !DILocalVariable(name: "i", scope: !9128, file: !1139, line: 149, type: !149)
!9138 = !DILocation(line: 149, column: 10, scope: !9128)
!9139 = !DILocalVariable(name: "last_val", scope: !9128, file: !1139, line: 150, type: !146)
!9140 = !DILocation(line: 150, column: 15, scope: !9128)
!9141 = !DILocation(line: 154, column: 3, scope: !9128)
!9142 = !DILocation(line: 155, column: 10, scope: !9143)
!9143 = distinct !DILexicalBlock(scope: !9128, file: !1139, line: 155, column: 3)
!9144 = !DILocation(line: 155, column: 8, scope: !9143)
!9145 = !DILocation(line: 155, column: 15, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !9143, file: !1139, line: 155, column: 3)
!9147 = !DILocation(line: 155, column: 23, scope: !9146)
!9148 = !DILocation(line: 155, column: 3, scope: !9143)
!9149 = !DILocation(line: 156, column: 10, scope: !9150)
!9150 = distinct !DILexicalBlock(scope: !9146, file: !1139, line: 156, column: 9)
!9151 = !DILocation(line: 156, column: 12, scope: !9150)
!9152 = !DILocation(line: 157, column: 9, scope: !9150)
!9153 = !DILocation(line: 157, column: 20, scope: !9150)
!9154 = !DILocation(line: 157, column: 30, scope: !9150)
!9155 = !DILocation(line: 157, column: 40, scope: !9150)
!9156 = !DILocation(line: 157, column: 50, scope: !9150)
!9157 = !DILocation(line: 157, column: 48, scope: !9150)
!9158 = !DILocation(line: 157, column: 38, scope: !9150)
!9159 = !DILocation(line: 157, column: 53, scope: !9150)
!9160 = !DILocation(line: 157, column: 12, scope: !9150)
!9161 = !DILocation(line: 156, column: 9, scope: !9146)
!9162 = !DILocation(line: 159, column: 18, scope: !9163)
!9163 = distinct !DILexicalBlock(scope: !9150, file: !1139, line: 158, column: 7)
!9164 = !DILocation(line: 159, column: 45, scope: !9163)
!9165 = !DILocation(line: 159, column: 53, scope: !9163)
!9166 = !DILocation(line: 159, column: 38, scope: !9163)
!9167 = !DILocation(line: 159, column: 9, scope: !9163)
!9168 = !DILocation(line: 160, column: 20, scope: !9163)
!9169 = !DILocation(line: 160, column: 30, scope: !9163)
!9170 = !DILocation(line: 160, column: 40, scope: !9163)
!9171 = !DILocation(line: 160, column: 38, scope: !9163)
!9172 = !DILocation(line: 160, column: 28, scope: !9163)
!9173 = !DILocation(line: 160, column: 18, scope: !9163)
!9174 = !DILocation(line: 161, column: 7, scope: !9163)
!9175 = !DILocation(line: 164, column: 18, scope: !9176)
!9176 = distinct !DILexicalBlock(scope: !9150, file: !1139, line: 163, column: 7)
!9177 = !DILocation(line: 164, column: 41, scope: !9176)
!9178 = !DILocation(line: 164, column: 49, scope: !9176)
!9179 = !DILocation(line: 164, column: 34, scope: !9176)
!9180 = !DILocation(line: 164, column: 9, scope: !9176)
!9181 = !DILocation(line: 157, column: 60, scope: !9150)
!9182 = !DILocation(line: 155, column: 28, scope: !9146)
!9183 = !DILocation(line: 155, column: 3, scope: !9146)
!9184 = distinct !{!9184, !9148, !9185}
!9185 = !DILocation(line: 165, column: 7, scope: !9143)
!9186 = !DILocation(line: 166, column: 3, scope: !9128)
!9187 = !DILocation(line: 167, column: 1, scope: !9128)
!9188 = distinct !DISubprogram(name: "__xargmatch_internal", scope: !1139, file: !1139, line: 176, type: !9189, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9189 = !DISubroutineType(types: !9190)
!9190 = !{!687, !146, !146, !693, !146, !149, !656}
!9191 = !DILocalVariable(name: "context", arg: 1, scope: !9188, file: !1139, line: 176, type: !146)
!9192 = !DILocation(line: 176, column: 35, scope: !9188)
!9193 = !DILocalVariable(name: "arg", arg: 2, scope: !9188, file: !1139, line: 177, type: !146)
!9194 = !DILocation(line: 177, column: 35, scope: !9188)
!9195 = !DILocalVariable(name: "arglist", arg: 3, scope: !9188, file: !1139, line: 177, type: !693)
!9196 = !DILocation(line: 177, column: 59, scope: !9188)
!9197 = !DILocalVariable(name: "vallist", arg: 4, scope: !9188, file: !1139, line: 178, type: !146)
!9198 = !DILocation(line: 178, column: 35, scope: !9188)
!9199 = !DILocalVariable(name: "valsize", arg: 5, scope: !9188, file: !1139, line: 178, type: !149)
!9200 = !DILocation(line: 178, column: 51, scope: !9188)
!9201 = !DILocalVariable(name: "exit_fn", arg: 6, scope: !9188, file: !1139, line: 179, type: !656)
!9202 = !DILocation(line: 179, column: 40, scope: !9188)
!9203 = !DILocalVariable(name: "res", scope: !9188, file: !1139, line: 181, type: !687)
!9204 = !DILocation(line: 181, column: 13, scope: !9188)
!9205 = !DILocation(line: 181, column: 29, scope: !9188)
!9206 = !DILocation(line: 181, column: 34, scope: !9188)
!9207 = !DILocation(line: 181, column: 43, scope: !9188)
!9208 = !DILocation(line: 181, column: 52, scope: !9188)
!9209 = !DILocation(line: 181, column: 19, scope: !9188)
!9210 = !DILocation(line: 182, column: 7, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9188, file: !1139, line: 182, column: 7)
!9212 = !DILocation(line: 182, column: 11, scope: !9211)
!9213 = !DILocation(line: 182, column: 7, scope: !9188)
!9214 = !DILocation(line: 184, column: 12, scope: !9211)
!9215 = !DILocation(line: 184, column: 5, scope: !9211)
!9216 = !DILocation(line: 187, column: 21, scope: !9188)
!9217 = !DILocation(line: 187, column: 30, scope: !9188)
!9218 = !DILocation(line: 187, column: 35, scope: !9188)
!9219 = !DILocation(line: 187, column: 3, scope: !9188)
!9220 = !DILocation(line: 188, column: 19, scope: !9188)
!9221 = !DILocation(line: 188, column: 28, scope: !9188)
!9222 = !DILocation(line: 188, column: 37, scope: !9188)
!9223 = !DILocation(line: 188, column: 3, scope: !9188)
!9224 = !DILocation(line: 189, column: 5, scope: !9188)
!9225 = !DILocation(line: 189, column: 3, scope: !9188)
!9226 = !DILocation(line: 191, column: 3, scope: !9188)
!9227 = !DILocation(line: 192, column: 1, scope: !9188)
!9228 = distinct !DISubprogram(name: "argmatch_to_argument", scope: !1139, file: !1139, line: 197, type: !9229, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1101, retainedNodes: !152)
!9229 = !DISubroutineType(types: !9230)
!9230 = !{!146, !146, !693, !146, !149}
!9231 = !DILocalVariable(name: "value", arg: 1, scope: !9228, file: !1139, line: 197, type: !146)
!9232 = !DILocation(line: 197, column: 35, scope: !9228)
!9233 = !DILocalVariable(name: "arglist", arg: 2, scope: !9228, file: !1139, line: 198, type: !693)
!9234 = !DILocation(line: 198, column: 42, scope: !9228)
!9235 = !DILocalVariable(name: "vallist", arg: 3, scope: !9228, file: !1139, line: 199, type: !146)
!9236 = !DILocation(line: 199, column: 35, scope: !9228)
!9237 = !DILocalVariable(name: "valsize", arg: 4, scope: !9228, file: !1139, line: 199, type: !149)
!9238 = !DILocation(line: 199, column: 51, scope: !9228)
!9239 = !DILocalVariable(name: "i", scope: !9228, file: !1139, line: 201, type: !149)
!9240 = !DILocation(line: 201, column: 10, scope: !9228)
!9241 = !DILocation(line: 203, column: 10, scope: !9242)
!9242 = distinct !DILexicalBlock(scope: !9228, file: !1139, line: 203, column: 3)
!9243 = !DILocation(line: 203, column: 8, scope: !9242)
!9244 = !DILocation(line: 203, column: 15, scope: !9245)
!9245 = distinct !DILexicalBlock(scope: !9242, file: !1139, line: 203, column: 3)
!9246 = !DILocation(line: 203, column: 23, scope: !9245)
!9247 = !DILocation(line: 203, column: 3, scope: !9242)
!9248 = !DILocation(line: 204, column: 18, scope: !9249)
!9249 = distinct !DILexicalBlock(scope: !9245, file: !1139, line: 204, column: 9)
!9250 = !DILocation(line: 204, column: 25, scope: !9249)
!9251 = !DILocation(line: 204, column: 35, scope: !9249)
!9252 = !DILocation(line: 204, column: 45, scope: !9249)
!9253 = !DILocation(line: 204, column: 43, scope: !9249)
!9254 = !DILocation(line: 204, column: 33, scope: !9249)
!9255 = !DILocation(line: 204, column: 48, scope: !9249)
!9256 = !DILocation(line: 204, column: 10, scope: !9249)
!9257 = !DILocation(line: 204, column: 9, scope: !9245)
!9258 = !DILocation(line: 205, column: 14, scope: !9249)
!9259 = !DILocation(line: 205, column: 22, scope: !9249)
!9260 = !DILocation(line: 205, column: 7, scope: !9249)
!9261 = !DILocation(line: 204, column: 55, scope: !9249)
!9262 = !DILocation(line: 203, column: 28, scope: !9245)
!9263 = !DILocation(line: 203, column: 3, scope: !9245)
!9264 = distinct !{!9264, !9247, !9265}
!9265 = !DILocation(line: 205, column: 23, scope: !9242)
!9266 = !DILocation(line: 206, column: 3, scope: !9228)
!9267 = !DILocation(line: 207, column: 1, scope: !9228)
!9268 = distinct !DISubprogram(name: "c_isalnum", scope: !9269, file: !9269, line: 169, type: !8052, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9269 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/mbarbar/software/coreutils-8.31")
!9270 = !DILocalVariable(name: "c", arg: 1, scope: !9268, file: !9269, line: 169, type: !27)
!9271 = !DILocation(line: 169, column: 16, scope: !9268)
!9272 = !DILocation(line: 171, column: 11, scope: !9268)
!9273 = !DILocation(line: 171, column: 3, scope: !9268)
!9274 = !DILocation(line: 176, column: 7, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9268, file: !9269, line: 172, column: 5)
!9276 = !DILocation(line: 178, column: 7, scope: !9275)
!9277 = !DILocation(line: 180, column: 1, scope: !9268)
!9278 = distinct !DISubprogram(name: "c_isalpha", scope: !9269, file: !9269, line: 183, type: !8052, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9279 = !DILocalVariable(name: "c", arg: 1, scope: !9278, file: !9269, line: 183, type: !27)
!9280 = !DILocation(line: 183, column: 16, scope: !9278)
!9281 = !DILocation(line: 185, column: 11, scope: !9278)
!9282 = !DILocation(line: 185, column: 3, scope: !9278)
!9283 = !DILocation(line: 189, column: 7, scope: !9284)
!9284 = distinct !DILexicalBlock(scope: !9278, file: !9269, line: 186, column: 5)
!9285 = !DILocation(line: 191, column: 7, scope: !9284)
!9286 = !DILocation(line: 193, column: 1, scope: !9278)
!9287 = distinct !DISubprogram(name: "c_isascii", scope: !9269, file: !9269, line: 198, type: !8052, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9288 = !DILocalVariable(name: "c", arg: 1, scope: !9287, file: !9269, line: 198, type: !27)
!9289 = !DILocation(line: 198, column: 16, scope: !9287)
!9290 = !DILocation(line: 200, column: 11, scope: !9287)
!9291 = !DILocation(line: 200, column: 3, scope: !9287)
!9292 = !DILocation(line: 208, column: 7, scope: !9293)
!9293 = distinct !DILexicalBlock(scope: !9287, file: !9269, line: 201, column: 5)
!9294 = !DILocation(line: 210, column: 7, scope: !9293)
!9295 = !DILocation(line: 212, column: 1, scope: !9287)
!9296 = distinct !DISubprogram(name: "c_isblank", scope: !9269, file: !9269, line: 215, type: !8052, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9297 = !DILocalVariable(name: "c", arg: 1, scope: !9296, file: !9269, line: 215, type: !27)
!9298 = !DILocation(line: 215, column: 16, scope: !9296)
!9299 = !DILocation(line: 217, column: 10, scope: !9296)
!9300 = !DILocation(line: 217, column: 12, scope: !9296)
!9301 = !DILocation(line: 217, column: 19, scope: !9296)
!9302 = !DILocation(line: 217, column: 22, scope: !9296)
!9303 = !DILocation(line: 217, column: 24, scope: !9296)
!9304 = !DILocation(line: 217, column: 3, scope: !9296)
!9305 = distinct !DISubprogram(name: "c_iscntrl", scope: !9269, file: !9269, line: 221, type: !8052, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9306 = !DILocalVariable(name: "c", arg: 1, scope: !9305, file: !9269, line: 221, type: !27)
!9307 = !DILocation(line: 221, column: 16, scope: !9305)
!9308 = !DILocation(line: 223, column: 11, scope: !9305)
!9309 = !DILocation(line: 223, column: 3, scope: !9305)
!9310 = !DILocation(line: 226, column: 7, scope: !9311)
!9311 = distinct !DILexicalBlock(scope: !9305, file: !9269, line: 224, column: 5)
!9312 = !DILocation(line: 228, column: 7, scope: !9311)
!9313 = !DILocation(line: 230, column: 1, scope: !9305)
!9314 = distinct !DISubprogram(name: "c_isdigit", scope: !9269, file: !9269, line: 233, type: !8052, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9315 = !DILocalVariable(name: "c", arg: 1, scope: !9314, file: !9269, line: 233, type: !27)
!9316 = !DILocation(line: 233, column: 16, scope: !9314)
!9317 = !DILocation(line: 235, column: 11, scope: !9314)
!9318 = !DILocation(line: 235, column: 3, scope: !9314)
!9319 = !DILocation(line: 238, column: 7, scope: !9320)
!9320 = distinct !DILexicalBlock(scope: !9314, file: !9269, line: 236, column: 5)
!9321 = !DILocation(line: 240, column: 7, scope: !9320)
!9322 = !DILocation(line: 242, column: 1, scope: !9314)
!9323 = distinct !DISubprogram(name: "c_isgraph", scope: !9269, file: !9269, line: 245, type: !8052, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9324 = !DILocalVariable(name: "c", arg: 1, scope: !9323, file: !9269, line: 245, type: !27)
!9325 = !DILocation(line: 245, column: 16, scope: !9323)
!9326 = !DILocation(line: 247, column: 11, scope: !9323)
!9327 = !DILocation(line: 247, column: 3, scope: !9323)
!9328 = !DILocation(line: 253, column: 7, scope: !9329)
!9329 = distinct !DILexicalBlock(scope: !9323, file: !9269, line: 248, column: 5)
!9330 = !DILocation(line: 255, column: 7, scope: !9329)
!9331 = !DILocation(line: 257, column: 1, scope: !9323)
!9332 = distinct !DISubprogram(name: "c_islower", scope: !9269, file: !9269, line: 260, type: !8052, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9333 = !DILocalVariable(name: "c", arg: 1, scope: !9332, file: !9269, line: 260, type: !27)
!9334 = !DILocation(line: 260, column: 16, scope: !9332)
!9335 = !DILocation(line: 262, column: 11, scope: !9332)
!9336 = !DILocation(line: 262, column: 3, scope: !9332)
!9337 = !DILocation(line: 265, column: 7, scope: !9338)
!9338 = distinct !DILexicalBlock(scope: !9332, file: !9269, line: 263, column: 5)
!9339 = !DILocation(line: 267, column: 7, scope: !9338)
!9340 = !DILocation(line: 269, column: 1, scope: !9332)
!9341 = distinct !DISubprogram(name: "c_isprint", scope: !9269, file: !9269, line: 272, type: !8052, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9342 = !DILocalVariable(name: "c", arg: 1, scope: !9341, file: !9269, line: 272, type: !27)
!9343 = !DILocation(line: 272, column: 16, scope: !9341)
!9344 = !DILocation(line: 274, column: 11, scope: !9341)
!9345 = !DILocation(line: 274, column: 3, scope: !9341)
!9346 = !DILocation(line: 281, column: 7, scope: !9347)
!9347 = distinct !DILexicalBlock(scope: !9341, file: !9269, line: 275, column: 5)
!9348 = !DILocation(line: 283, column: 7, scope: !9347)
!9349 = !DILocation(line: 285, column: 1, scope: !9341)
!9350 = distinct !DISubprogram(name: "c_ispunct", scope: !9269, file: !9269, line: 288, type: !8052, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9351 = !DILocalVariable(name: "c", arg: 1, scope: !9350, file: !9269, line: 288, type: !27)
!9352 = !DILocation(line: 288, column: 16, scope: !9350)
!9353 = !DILocation(line: 290, column: 11, scope: !9350)
!9354 = !DILocation(line: 290, column: 3, scope: !9350)
!9355 = !DILocation(line: 293, column: 7, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9350, file: !9269, line: 291, column: 5)
!9357 = !DILocation(line: 295, column: 7, scope: !9356)
!9358 = !DILocation(line: 297, column: 1, scope: !9350)
!9359 = distinct !DISubprogram(name: "c_isspace", scope: !9269, file: !9269, line: 300, type: !8052, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9360 = !DILocalVariable(name: "c", arg: 1, scope: !9359, file: !9269, line: 300, type: !27)
!9361 = !DILocation(line: 300, column: 16, scope: !9359)
!9362 = !DILocation(line: 302, column: 11, scope: !9359)
!9363 = !DILocation(line: 302, column: 3, scope: !9359)
!9364 = !DILocation(line: 305, column: 7, scope: !9365)
!9365 = distinct !DILexicalBlock(scope: !9359, file: !9269, line: 303, column: 5)
!9366 = !DILocation(line: 307, column: 7, scope: !9365)
!9367 = !DILocation(line: 309, column: 1, scope: !9359)
!9368 = distinct !DISubprogram(name: "c_isupper", scope: !9269, file: !9269, line: 312, type: !8052, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9369 = !DILocalVariable(name: "c", arg: 1, scope: !9368, file: !9269, line: 312, type: !27)
!9370 = !DILocation(line: 312, column: 16, scope: !9368)
!9371 = !DILocation(line: 314, column: 11, scope: !9368)
!9372 = !DILocation(line: 314, column: 3, scope: !9368)
!9373 = !DILocation(line: 317, column: 7, scope: !9374)
!9374 = distinct !DILexicalBlock(scope: !9368, file: !9269, line: 315, column: 5)
!9375 = !DILocation(line: 319, column: 7, scope: !9374)
!9376 = !DILocation(line: 321, column: 1, scope: !9368)
!9377 = distinct !DISubprogram(name: "c_isxdigit", scope: !9269, file: !9269, line: 324, type: !8052, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9378 = !DILocalVariable(name: "c", arg: 1, scope: !9377, file: !9269, line: 324, type: !27)
!9379 = !DILocation(line: 324, column: 17, scope: !9377)
!9380 = !DILocation(line: 326, column: 11, scope: !9377)
!9381 = !DILocation(line: 326, column: 3, scope: !9377)
!9382 = !DILocation(line: 330, column: 7, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9377, file: !9269, line: 327, column: 5)
!9384 = !DILocation(line: 332, column: 7, scope: !9383)
!9385 = !DILocation(line: 334, column: 1, scope: !9377)
!9386 = distinct !DISubprogram(name: "c_tolower", scope: !9269, file: !9269, line: 337, type: !9387, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9387 = !DISubroutineType(types: !9388)
!9388 = !{!27, !27}
!9389 = !DILocalVariable(name: "c", arg: 1, scope: !9386, file: !9269, line: 337, type: !27)
!9390 = !DILocation(line: 337, column: 16, scope: !9386)
!9391 = !DILocation(line: 339, column: 11, scope: !9386)
!9392 = !DILocation(line: 339, column: 3, scope: !9386)
!9393 = !DILocation(line: 342, column: 14, scope: !9394)
!9394 = distinct !DILexicalBlock(scope: !9386, file: !9269, line: 340, column: 5)
!9395 = !DILocation(line: 342, column: 16, scope: !9394)
!9396 = !DILocation(line: 342, column: 22, scope: !9394)
!9397 = !DILocation(line: 342, column: 7, scope: !9394)
!9398 = !DILocation(line: 344, column: 14, scope: !9394)
!9399 = !DILocation(line: 344, column: 7, scope: !9394)
!9400 = !DILocation(line: 346, column: 1, scope: !9386)
!9401 = distinct !DISubprogram(name: "c_toupper", scope: !9269, file: !9269, line: 349, type: !9387, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !152)
!9402 = !DILocalVariable(name: "c", arg: 1, scope: !9401, file: !9269, line: 349, type: !27)
!9403 = !DILocation(line: 349, column: 16, scope: !9401)
!9404 = !DILocation(line: 351, column: 11, scope: !9401)
!9405 = !DILocation(line: 351, column: 3, scope: !9401)
!9406 = !DILocation(line: 354, column: 14, scope: !9407)
!9407 = distinct !DILexicalBlock(scope: !9401, file: !9269, line: 352, column: 5)
!9408 = !DILocation(line: 354, column: 16, scope: !9407)
!9409 = !DILocation(line: 354, column: 22, scope: !9407)
!9410 = !DILocation(line: 354, column: 7, scope: !9407)
!9411 = !DILocation(line: 356, column: 14, scope: !9407)
!9412 = !DILocation(line: 356, column: 7, scope: !9407)
!9413 = !DILocation(line: 358, column: 1, scope: !9401)
!9414 = distinct !DISubprogram(name: "c_strncasecmp", scope: !9415, file: !9415, line: 27, type: !9416, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1518, retainedNodes: !152)
!9415 = !DIFile(filename: "lib/c-strncasecmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!9416 = !DISubroutineType(types: !9417)
!9417 = !{!27, !146, !146, !149}
!9418 = !DILocalVariable(name: "s1", arg: 1, scope: !9414, file: !9415, line: 27, type: !146)
!9419 = !DILocation(line: 27, column: 28, scope: !9414)
!9420 = !DILocalVariable(name: "s2", arg: 2, scope: !9414, file: !9415, line: 27, type: !146)
!9421 = !DILocation(line: 27, column: 44, scope: !9414)
!9422 = !DILocalVariable(name: "n", arg: 3, scope: !9414, file: !9415, line: 27, type: !149)
!9423 = !DILocation(line: 27, column: 55, scope: !9414)
!9424 = !DILocalVariable(name: "p1", scope: !9414, file: !9415, line: 29, type: !1521)
!9425 = !DILocation(line: 29, column: 33, scope: !9414)
!9426 = !DILocation(line: 29, column: 62, scope: !9414)
!9427 = !DILocalVariable(name: "p2", scope: !9414, file: !9415, line: 30, type: !1521)
!9428 = !DILocation(line: 30, column: 33, scope: !9414)
!9429 = !DILocation(line: 30, column: 62, scope: !9414)
!9430 = !DILocalVariable(name: "c1", scope: !9414, file: !9415, line: 31, type: !737)
!9431 = !DILocation(line: 31, column: 17, scope: !9414)
!9432 = !DILocalVariable(name: "c2", scope: !9414, file: !9415, line: 31, type: !737)
!9433 = !DILocation(line: 31, column: 21, scope: !9414)
!9434 = !DILocation(line: 33, column: 7, scope: !9435)
!9435 = distinct !DILexicalBlock(scope: !9414, file: !9415, line: 33, column: 7)
!9436 = !DILocation(line: 33, column: 13, scope: !9435)
!9437 = !DILocation(line: 33, column: 10, scope: !9435)
!9438 = !DILocation(line: 33, column: 16, scope: !9435)
!9439 = !DILocation(line: 33, column: 19, scope: !9435)
!9440 = !DILocation(line: 33, column: 21, scope: !9435)
!9441 = !DILocation(line: 33, column: 7, scope: !9414)
!9442 = !DILocation(line: 34, column: 5, scope: !9435)
!9443 = !DILocation(line: 36, column: 3, scope: !9414)
!9444 = !DILocation(line: 38, column: 24, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9414, file: !9415, line: 37, column: 5)
!9446 = !DILocation(line: 38, column: 23, scope: !9445)
!9447 = !DILocation(line: 38, column: 12, scope: !9445)
!9448 = !DILocation(line: 38, column: 10, scope: !9445)
!9449 = !DILocation(line: 39, column: 24, scope: !9445)
!9450 = !DILocation(line: 39, column: 23, scope: !9445)
!9451 = !DILocation(line: 39, column: 12, scope: !9445)
!9452 = !DILocation(line: 39, column: 10, scope: !9445)
!9453 = !DILocation(line: 41, column: 11, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9445, file: !9415, line: 41, column: 11)
!9455 = !DILocation(line: 41, column: 15, scope: !9454)
!9456 = !DILocation(line: 41, column: 20, scope: !9454)
!9457 = !DILocation(line: 41, column: 23, scope: !9454)
!9458 = !DILocation(line: 41, column: 26, scope: !9454)
!9459 = !DILocation(line: 41, column: 11, scope: !9445)
!9460 = !DILocation(line: 42, column: 9, scope: !9454)
!9461 = !DILocation(line: 44, column: 7, scope: !9445)
!9462 = !DILocation(line: 45, column: 7, scope: !9445)
!9463 = !DILocation(line: 46, column: 5, scope: !9445)
!9464 = !DILocation(line: 47, column: 10, scope: !9414)
!9465 = !DILocation(line: 47, column: 16, scope: !9414)
!9466 = !DILocation(line: 47, column: 13, scope: !9414)
!9467 = distinct !{!9467, !9443, !9468}
!9468 = !DILocation(line: 47, column: 18, scope: !9414)
!9469 = !DILocation(line: 50, column: 12, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !9414, file: !9415, line: 49, column: 7)
!9471 = !DILocation(line: 50, column: 17, scope: !9470)
!9472 = !DILocation(line: 50, column: 15, scope: !9470)
!9473 = !DILocation(line: 50, column: 5, scope: !9470)
!9474 = !DILocation(line: 56, column: 1, scope: !9414)
!9475 = distinct !DISubprogram(name: "canonicalize_filename_mode", scope: !9476, file: !9476, line: 99, type: !9477, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1523, retainedNodes: !152)
!9476 = !DIFile(filename: "lib/canonicalize.c", directory: "/home/mbarbar/software/coreutils-8.31")
!9477 = !DISubroutineType(types: !9478)
!9478 = !{!143, !146, !9479}
!9479 = !DIDerivedType(tag: DW_TAG_typedef, name: "canonicalize_mode_t", file: !1527, line: 38, baseType: !1526)
!9480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !9481)
!9481 = !{!9482, !9483, !9484, !9485, !9486, !9487, !9488, !9489, !9490, !9491, !9492, !9493, !9498, !9499, !9500}
!9482 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !9480, file: !192, line: 48, baseType: !195, size: 64)
!9483 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !9480, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!9484 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !9480, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!9485 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !9480, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!9486 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !9480, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!9487 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !9480, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!9488 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !9480, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!9489 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !9480, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!9490 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !9480, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!9491 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !9480, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!9492 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !9480, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!9493 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !9480, file: !192, line: 91, baseType: !9494, size: 128, offset: 576)
!9494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !9495)
!9495 = !{!9496, !9497}
!9496 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !9494, file: !215, line: 11, baseType: !164, size: 64)
!9497 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !9494, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!9498 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !9480, file: !192, line: 92, baseType: !9494, size: 128, offset: 704)
!9499 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !9480, file: !192, line: 93, baseType: !9494, size: 128, offset: 832)
!9500 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !9480, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!9501 = !DILocalVariable(name: "name", arg: 1, scope: !9475, file: !9476, line: 99, type: !146)
!9502 = !DILocation(line: 99, column: 41, scope: !9475)
!9503 = !DILocalVariable(name: "can_mode", arg: 2, scope: !9475, file: !9476, line: 99, type: !9479)
!9504 = !DILocation(line: 99, column: 67, scope: !9475)
!9505 = !DILocalVariable(name: "rname", scope: !9475, file: !9476, line: 101, type: !143)
!9506 = !DILocation(line: 101, column: 9, scope: !9475)
!9507 = !DILocalVariable(name: "dest", scope: !9475, file: !9476, line: 101, type: !143)
!9508 = !DILocation(line: 101, column: 17, scope: !9475)
!9509 = !DILocalVariable(name: "extra_buf", scope: !9475, file: !9476, line: 101, type: !143)
!9510 = !DILocation(line: 101, column: 24, scope: !9475)
!9511 = !DILocalVariable(name: "start", scope: !9475, file: !9476, line: 102, type: !146)
!9512 = !DILocation(line: 102, column: 15, scope: !9475)
!9513 = !DILocalVariable(name: "end", scope: !9475, file: !9476, line: 103, type: !146)
!9514 = !DILocation(line: 103, column: 15, scope: !9475)
!9515 = !DILocalVariable(name: "rname_limit", scope: !9475, file: !9476, line: 104, type: !146)
!9516 = !DILocation(line: 104, column: 15, scope: !9475)
!9517 = !DILocalVariable(name: "extra_len", scope: !9475, file: !9476, line: 105, type: !149)
!9518 = !DILocation(line: 105, column: 10, scope: !9475)
!9519 = !DILocalVariable(name: "ht", scope: !9475, file: !9476, line: 106, type: !251)
!9520 = !DILocation(line: 106, column: 15, scope: !9475)
!9521 = !DILocalVariable(name: "saved_errno", scope: !9475, file: !9476, line: 107, type: !27)
!9522 = !DILocation(line: 107, column: 7, scope: !9475)
!9523 = !DILocalVariable(name: "can_flags", scope: !9475, file: !9476, line: 108, type: !27)
!9524 = !DILocation(line: 108, column: 7, scope: !9475)
!9525 = !DILocation(line: 108, column: 19, scope: !9475)
!9526 = !DILocation(line: 108, column: 28, scope: !9475)
!9527 = !DILocalVariable(name: "logical", scope: !9475, file: !9476, line: 109, type: !141)
!9528 = !DILocation(line: 109, column: 8, scope: !9475)
!9529 = !DILocation(line: 109, column: 18, scope: !9475)
!9530 = !DILocation(line: 109, column: 28, scope: !9475)
!9531 = !DILocalVariable(name: "prefix_len", scope: !9475, file: !9476, line: 110, type: !149)
!9532 = !DILocation(line: 110, column: 10, scope: !9475)
!9533 = !DILocation(line: 112, column: 12, scope: !9475)
!9534 = !DILocation(line: 114, column: 7, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 114, column: 7)
!9536 = !DILocation(line: 114, column: 7, scope: !9475)
!9537 = !DILocation(line: 116, column: 7, scope: !9538)
!9538 = distinct !DILexicalBlock(scope: !9535, file: !9476, line: 115, column: 5)
!9539 = !DILocation(line: 116, column: 13, scope: !9538)
!9540 = !DILocation(line: 117, column: 7, scope: !9538)
!9541 = !DILocation(line: 120, column: 7, scope: !9542)
!9542 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 120, column: 7)
!9543 = !DILocation(line: 120, column: 12, scope: !9542)
!9544 = !DILocation(line: 120, column: 7, scope: !9475)
!9545 = !DILocation(line: 122, column: 7, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !9542, file: !9476, line: 121, column: 5)
!9547 = !DILocation(line: 122, column: 13, scope: !9546)
!9548 = !DILocation(line: 123, column: 7, scope: !9546)
!9549 = !DILocation(line: 126, column: 7, scope: !9550)
!9550 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 126, column: 7)
!9551 = !DILocation(line: 126, column: 15, scope: !9550)
!9552 = !DILocation(line: 126, column: 7, scope: !9475)
!9553 = !DILocation(line: 128, column: 7, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9550, file: !9476, line: 127, column: 5)
!9555 = !DILocation(line: 128, column: 13, scope: !9554)
!9556 = !DILocation(line: 129, column: 7, scope: !9554)
!9557 = !DILocation(line: 134, column: 14, scope: !9475)
!9558 = !DILocation(line: 136, column: 8, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 136, column: 7)
!9560 = !DILocation(line: 136, column: 7, scope: !9475)
!9561 = !DILocation(line: 138, column: 15, scope: !9562)
!9562 = distinct !DILexicalBlock(scope: !9559, file: !9476, line: 137, column: 5)
!9563 = !DILocation(line: 138, column: 13, scope: !9562)
!9564 = !DILocation(line: 139, column: 12, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9562, file: !9476, line: 139, column: 11)
!9566 = !DILocation(line: 139, column: 11, scope: !9562)
!9567 = !DILocation(line: 140, column: 9, scope: !9565)
!9568 = !DILocation(line: 141, column: 22, scope: !9562)
!9569 = !DILocation(line: 141, column: 14, scope: !9562)
!9570 = !DILocation(line: 141, column: 12, scope: !9562)
!9571 = !DILocation(line: 142, column: 11, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9562, file: !9476, line: 142, column: 11)
!9573 = !DILocation(line: 142, column: 18, scope: !9572)
!9574 = !DILocation(line: 142, column: 16, scope: !9572)
!9575 = !DILocation(line: 142, column: 24, scope: !9572)
!9576 = !DILocation(line: 142, column: 11, scope: !9562)
!9577 = !DILocalVariable(name: "p", scope: !9578, file: !9476, line: 144, type: !143)
!9578 = distinct !DILexicalBlock(scope: !9572, file: !9476, line: 143, column: 9)
!9579 = !DILocation(line: 144, column: 17, scope: !9578)
!9580 = !DILocation(line: 144, column: 31, scope: !9578)
!9581 = !DILocation(line: 144, column: 21, scope: !9578)
!9582 = !DILocation(line: 145, column: 18, scope: !9578)
!9583 = !DILocation(line: 145, column: 23, scope: !9578)
!9584 = !DILocation(line: 145, column: 30, scope: !9578)
!9585 = !DILocation(line: 145, column: 28, scope: !9578)
!9586 = !DILocation(line: 145, column: 20, scope: !9578)
!9587 = !DILocation(line: 145, column: 16, scope: !9578)
!9588 = !DILocation(line: 146, column: 19, scope: !9578)
!9589 = !DILocation(line: 146, column: 17, scope: !9578)
!9590 = !DILocation(line: 147, column: 25, scope: !9578)
!9591 = !DILocation(line: 147, column: 31, scope: !9578)
!9592 = !DILocation(line: 147, column: 23, scope: !9578)
!9593 = !DILocation(line: 148, column: 9, scope: !9578)
!9594 = !DILocation(line: 151, column: 25, scope: !9595)
!9595 = distinct !DILexicalBlock(scope: !9572, file: !9476, line: 150, column: 9)
!9596 = !DILocation(line: 151, column: 23, scope: !9595)
!9597 = !DILocation(line: 153, column: 15, scope: !9562)
!9598 = !DILocation(line: 153, column: 13, scope: !9562)
!9599 = !DILocation(line: 154, column: 18, scope: !9562)
!9600 = !DILocation(line: 155, column: 5, scope: !9562)
!9601 = !DILocation(line: 158, column: 15, scope: !9602)
!9602 = distinct !DILexicalBlock(scope: !9559, file: !9476, line: 157, column: 5)
!9603 = !DILocation(line: 158, column: 13, scope: !9602)
!9604 = !DILocation(line: 159, column: 21, scope: !9602)
!9605 = !DILocation(line: 159, column: 27, scope: !9602)
!9606 = !DILocation(line: 159, column: 19, scope: !9602)
!9607 = !DILocation(line: 160, column: 14, scope: !9602)
!9608 = !DILocation(line: 160, column: 12, scope: !9602)
!9609 = !DILocation(line: 161, column: 11, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9602, file: !9476, line: 161, column: 11)
!9611 = !DILocation(line: 161, column: 11, scope: !9602)
!9612 = !DILocation(line: 163, column: 19, scope: !9613)
!9613 = distinct !DILexicalBlock(scope: !9610, file: !9476, line: 162, column: 9)
!9614 = !DILocation(line: 163, column: 26, scope: !9613)
!9615 = !DILocation(line: 163, column: 32, scope: !9613)
!9616 = !DILocation(line: 163, column: 11, scope: !9613)
!9617 = !DILocation(line: 164, column: 19, scope: !9613)
!9618 = !DILocation(line: 164, column: 16, scope: !9613)
!9619 = !DILocation(line: 165, column: 9, scope: !9613)
!9620 = !DILocation(line: 166, column: 12, scope: !9602)
!9621 = !DILocation(line: 166, column: 15, scope: !9602)
!9622 = !DILocation(line: 173, column: 15, scope: !9602)
!9623 = !DILocation(line: 173, column: 22, scope: !9602)
!9624 = !DILocation(line: 173, column: 20, scope: !9602)
!9625 = !DILocation(line: 173, column: 13, scope: !9602)
!9626 = !DILocation(line: 176, column: 3, scope: !9475)
!9627 = !DILocation(line: 176, column: 12, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9629, file: !9476, line: 176, column: 3)
!9629 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 176, column: 3)
!9630 = !DILocation(line: 176, column: 11, scope: !9628)
!9631 = !DILocation(line: 176, column: 3, scope: !9629)
!9632 = !DILocation(line: 179, column: 7, scope: !9633)
!9633 = distinct !DILexicalBlock(scope: !9628, file: !9476, line: 177, column: 5)
!9634 = !DILocation(line: 179, column: 14, scope: !9633)
!9635 = !DILocation(line: 180, column: 9, scope: !9633)
!9636 = distinct !{!9636, !9632, !9637}
!9637 = !DILocation(line: 180, column: 11, scope: !9633)
!9638 = !DILocation(line: 183, column: 18, scope: !9639)
!9639 = distinct !DILexicalBlock(scope: !9633, file: !9476, line: 183, column: 7)
!9640 = !DILocation(line: 183, column: 16, scope: !9639)
!9641 = !DILocation(line: 183, column: 12, scope: !9639)
!9642 = !DILocation(line: 183, column: 26, scope: !9643)
!9643 = distinct !DILexicalBlock(scope: !9639, file: !9476, line: 183, column: 7)
!9644 = !DILocation(line: 183, column: 25, scope: !9643)
!9645 = !DILocation(line: 183, column: 30, scope: !9643)
!9646 = !DILocation(line: 183, column: 34, scope: !9643)
!9647 = !DILocation(line: 183, column: 33, scope: !9643)
!9648 = !DILocation(line: 0, scope: !9643)
!9649 = !DILocation(line: 183, column: 7, scope: !9639)
!9650 = !DILocation(line: 183, column: 50, scope: !9643)
!9651 = !DILocation(line: 183, column: 7, scope: !9643)
!9652 = distinct !{!9652, !9649, !9653}
!9653 = !DILocation(line: 184, column: 24, scope: !9639)
!9654 = !DILocation(line: 186, column: 11, scope: !9655)
!9655 = distinct !DILexicalBlock(scope: !9633, file: !9476, line: 186, column: 11)
!9656 = !DILocation(line: 186, column: 17, scope: !9655)
!9657 = !DILocation(line: 186, column: 15, scope: !9655)
!9658 = !DILocation(line: 186, column: 23, scope: !9655)
!9659 = !DILocation(line: 186, column: 11, scope: !9633)
!9660 = !DILocation(line: 187, column: 9, scope: !9655)
!9661 = !DILocation(line: 188, column: 16, scope: !9662)
!9662 = distinct !DILexicalBlock(scope: !9655, file: !9476, line: 188, column: 16)
!9663 = !DILocation(line: 188, column: 22, scope: !9662)
!9664 = !DILocation(line: 188, column: 20, scope: !9662)
!9665 = !DILocation(line: 188, column: 28, scope: !9662)
!9666 = !DILocation(line: 188, column: 33, scope: !9662)
!9667 = !DILocation(line: 188, column: 36, scope: !9662)
!9668 = !DILocation(line: 188, column: 45, scope: !9662)
!9669 = !DILocation(line: 188, column: 16, scope: !9655)
!9670 = !DILocation(line: 190, column: 16, scope: !9671)
!9671 = distinct !DILexicalBlock(scope: !9662, file: !9476, line: 190, column: 16)
!9672 = !DILocation(line: 190, column: 22, scope: !9671)
!9673 = !DILocation(line: 190, column: 20, scope: !9671)
!9674 = !DILocation(line: 190, column: 28, scope: !9671)
!9675 = !DILocation(line: 190, column: 33, scope: !9671)
!9676 = !DILocation(line: 190, column: 36, scope: !9671)
!9677 = !DILocation(line: 190, column: 45, scope: !9671)
!9678 = !DILocation(line: 190, column: 52, scope: !9671)
!9679 = !DILocation(line: 190, column: 55, scope: !9671)
!9680 = !DILocation(line: 190, column: 64, scope: !9671)
!9681 = !DILocation(line: 190, column: 16, scope: !9662)
!9682 = !DILocation(line: 193, column: 15, scope: !9683)
!9683 = distinct !DILexicalBlock(scope: !9684, file: !9476, line: 193, column: 15)
!9684 = distinct !DILexicalBlock(scope: !9671, file: !9476, line: 191, column: 9)
!9685 = !DILocation(line: 193, column: 22, scope: !9683)
!9686 = !DILocation(line: 193, column: 30, scope: !9683)
!9687 = !DILocation(line: 193, column: 28, scope: !9683)
!9688 = !DILocation(line: 193, column: 41, scope: !9683)
!9689 = !DILocation(line: 193, column: 20, scope: !9683)
!9690 = !DILocation(line: 193, column: 15, scope: !9684)
!9691 = !DILocation(line: 194, column: 18, scope: !9692)
!9692 = distinct !DILexicalBlock(scope: !9683, file: !9476, line: 194, column: 13)
!9693 = !DILocation(line: 194, column: 26, scope: !9694)
!9694 = distinct !DILexicalBlock(scope: !9692, file: !9476, line: 194, column: 13)
!9695 = !DILocation(line: 194, column: 33, scope: !9694)
!9696 = !DILocation(line: 194, column: 31, scope: !9694)
!9697 = !DILocation(line: 194, column: 39, scope: !9694)
!9698 = !DILocation(line: 194, column: 43, scope: !9694)
!9699 = !DILocation(line: 194, column: 42, scope: !9694)
!9700 = !DILocation(line: 0, scope: !9694)
!9701 = !DILocation(line: 194, column: 13, scope: !9692)
!9702 = !DILocation(line: 195, column: 15, scope: !9694)
!9703 = !DILocation(line: 194, column: 63, scope: !9694)
!9704 = !DILocation(line: 194, column: 13, scope: !9694)
!9705 = distinct !{!9705, !9701, !9706}
!9706 = !DILocation(line: 195, column: 15, scope: !9692)
!9707 = !DILocation(line: 199, column: 9, scope: !9684)
!9708 = !DILocalVariable(name: "st", scope: !9709, file: !9476, line: 202, type: !9480)
!9709 = distinct !DILexicalBlock(scope: !9671, file: !9476, line: 201, column: 9)
!9710 = !DILocation(line: 202, column: 23, scope: !9709)
!9711 = !DILocation(line: 204, column: 16, scope: !9712)
!9712 = distinct !DILexicalBlock(scope: !9709, file: !9476, line: 204, column: 15)
!9713 = !DILocation(line: 204, column: 15, scope: !9709)
!9714 = !DILocation(line: 205, column: 18, scope: !9712)
!9715 = !DILocation(line: 205, column: 21, scope: !9712)
!9716 = !DILocation(line: 205, column: 13, scope: !9712)
!9717 = !DILocation(line: 207, column: 15, scope: !9718)
!9718 = distinct !DILexicalBlock(scope: !9709, file: !9476, line: 207, column: 15)
!9719 = !DILocation(line: 207, column: 23, scope: !9718)
!9720 = !DILocation(line: 207, column: 29, scope: !9718)
!9721 = !DILocation(line: 207, column: 27, scope: !9718)
!9722 = !DILocation(line: 207, column: 20, scope: !9718)
!9723 = !DILocation(line: 207, column: 39, scope: !9718)
!9724 = !DILocation(line: 207, column: 36, scope: !9718)
!9725 = !DILocation(line: 207, column: 15, scope: !9709)
!9726 = !DILocalVariable(name: "dest_offset", scope: !9727, file: !9476, line: 209, type: !687)
!9727 = distinct !DILexicalBlock(scope: !9718, file: !9476, line: 208, column: 13)
!9728 = !DILocation(line: 209, column: 25, scope: !9727)
!9729 = !DILocation(line: 209, column: 39, scope: !9727)
!9730 = !DILocation(line: 209, column: 46, scope: !9727)
!9731 = !DILocation(line: 209, column: 44, scope: !9727)
!9732 = !DILocalVariable(name: "new_size", scope: !9727, file: !9476, line: 210, type: !149)
!9733 = !DILocation(line: 210, column: 22, scope: !9727)
!9734 = !DILocation(line: 210, column: 33, scope: !9727)
!9735 = !DILocation(line: 210, column: 47, scope: !9727)
!9736 = !DILocation(line: 210, column: 45, scope: !9727)
!9737 = !DILocation(line: 212, column: 19, scope: !9738)
!9738 = distinct !DILexicalBlock(scope: !9727, file: !9476, line: 212, column: 19)
!9739 = !DILocation(line: 212, column: 25, scope: !9738)
!9740 = !DILocation(line: 212, column: 23, scope: !9738)
!9741 = !DILocation(line: 212, column: 31, scope: !9738)
!9742 = !DILocation(line: 212, column: 35, scope: !9738)
!9743 = !DILocation(line: 212, column: 19, scope: !9727)
!9744 = !DILocation(line: 213, column: 29, scope: !9738)
!9745 = !DILocation(line: 213, column: 35, scope: !9738)
!9746 = !DILocation(line: 213, column: 33, scope: !9738)
!9747 = !DILocation(line: 213, column: 41, scope: !9738)
!9748 = !DILocation(line: 213, column: 26, scope: !9738)
!9749 = !DILocation(line: 213, column: 17, scope: !9738)
!9750 = !DILocation(line: 215, column: 26, scope: !9738)
!9751 = !DILocation(line: 216, column: 33, scope: !9727)
!9752 = !DILocation(line: 216, column: 40, scope: !9727)
!9753 = !DILocation(line: 216, column: 23, scope: !9727)
!9754 = !DILocation(line: 216, column: 21, scope: !9727)
!9755 = !DILocation(line: 217, column: 29, scope: !9727)
!9756 = !DILocation(line: 217, column: 37, scope: !9727)
!9757 = !DILocation(line: 217, column: 35, scope: !9727)
!9758 = !DILocation(line: 217, column: 27, scope: !9727)
!9759 = !DILocation(line: 219, column: 22, scope: !9727)
!9760 = !DILocation(line: 219, column: 30, scope: !9727)
!9761 = !DILocation(line: 219, column: 28, scope: !9727)
!9762 = !DILocation(line: 219, column: 20, scope: !9727)
!9763 = !DILocation(line: 220, column: 13, scope: !9727)
!9764 = !DILocation(line: 222, column: 26, scope: !9709)
!9765 = !DILocation(line: 222, column: 32, scope: !9709)
!9766 = !DILocation(line: 222, column: 39, scope: !9709)
!9767 = !DILocation(line: 222, column: 45, scope: !9709)
!9768 = !DILocation(line: 222, column: 43, scope: !9709)
!9769 = !DILocation(line: 222, column: 18, scope: !9709)
!9770 = !DILocation(line: 222, column: 16, scope: !9709)
!9771 = !DILocation(line: 223, column: 19, scope: !9709)
!9772 = !DILocation(line: 223, column: 25, scope: !9709)
!9773 = !DILocation(line: 223, column: 23, scope: !9709)
!9774 = !DILocation(line: 223, column: 16, scope: !9709)
!9775 = !DILocation(line: 224, column: 12, scope: !9709)
!9776 = !DILocation(line: 224, column: 17, scope: !9709)
!9777 = !DILocation(line: 226, column: 15, scope: !9778)
!9778 = distinct !DILexicalBlock(scope: !9709, file: !9476, line: 226, column: 15)
!9779 = !DILocation(line: 226, column: 23, scope: !9778)
!9780 = !DILocation(line: 226, column: 27, scope: !9778)
!9781 = !DILocation(line: 226, column: 36, scope: !9778)
!9782 = !DILocation(line: 226, column: 15, scope: !9709)
!9783 = !DILocation(line: 231, column: 18, scope: !9784)
!9784 = distinct !DILexicalBlock(scope: !9778, file: !9476, line: 227, column: 13)
!9785 = !DILocation(line: 231, column: 26, scope: !9784)
!9786 = !DILocation(line: 232, column: 13, scope: !9784)
!9787 = !DILocation(line: 233, column: 21, scope: !9788)
!9788 = distinct !DILexicalBlock(scope: !9778, file: !9476, line: 233, column: 20)
!9789 = !DILocation(line: 233, column: 37, scope: !9788)
!9790 = !DILocation(line: 233, column: 31, scope: !9788)
!9791 = !DILocation(line: 233, column: 58, scope: !9788)
!9792 = !DILocation(line: 233, column: 51, scope: !9788)
!9793 = !DILocation(line: 233, column: 71, scope: !9788)
!9794 = !DILocation(line: 233, column: 20, scope: !9778)
!9795 = !DILocation(line: 236, column: 29, scope: !9796)
!9796 = distinct !DILexicalBlock(scope: !9788, file: !9476, line: 234, column: 13)
!9797 = !DILocation(line: 236, column: 27, scope: !9796)
!9798 = !DILocation(line: 237, column: 19, scope: !9799)
!9799 = distinct !DILexicalBlock(scope: !9796, file: !9476, line: 237, column: 19)
!9800 = !DILocation(line: 237, column: 28, scope: !9799)
!9801 = !DILocation(line: 237, column: 19, scope: !9796)
!9802 = !DILocation(line: 238, column: 17, scope: !9799)
!9803 = !DILocation(line: 239, column: 19, scope: !9804)
!9804 = distinct !DILexicalBlock(scope: !9796, file: !9476, line: 239, column: 19)
!9805 = !DILocation(line: 239, column: 28, scope: !9804)
!9806 = !DILocation(line: 239, column: 19, scope: !9796)
!9807 = !DILocation(line: 241, column: 23, scope: !9808)
!9808 = distinct !DILexicalBlock(scope: !9809, file: !9476, line: 241, column: 23)
!9809 = distinct !DILexicalBlock(scope: !9804, file: !9476, line: 240, column: 17)
!9810 = !DILocation(line: 241, column: 35, scope: !9808)
!9811 = !DILocation(line: 241, column: 27, scope: !9808)
!9812 = !DILocation(line: 241, column: 50, scope: !9808)
!9813 = !DILocation(line: 241, column: 53, scope: !9808)
!9814 = !DILocation(line: 241, column: 65, scope: !9808)
!9815 = !DILocation(line: 241, column: 23, scope: !9809)
!9816 = !DILocation(line: 242, column: 21, scope: !9808)
!9817 = !DILocation(line: 243, column: 19, scope: !9809)
!9818 = !DILocation(line: 245, column: 18, scope: !9796)
!9819 = !DILocation(line: 245, column: 26, scope: !9796)
!9820 = !DILocation(line: 246, column: 13, scope: !9796)
!9821 = !DILocation(line: 248, column: 15, scope: !9822)
!9822 = distinct !DILexicalBlock(scope: !9709, file: !9476, line: 248, column: 15)
!9823 = !DILocation(line: 248, column: 15, scope: !9709)
!9824 = !DILocalVariable(name: "buf", scope: !9825, file: !9476, line: 250, type: !143)
!9825 = distinct !DILexicalBlock(scope: !9822, file: !9476, line: 249, column: 13)
!9826 = !DILocation(line: 250, column: 21, scope: !9825)
!9827 = !DILocalVariable(name: "n", scope: !9825, file: !9476, line: 251, type: !149)
!9828 = !DILocation(line: 251, column: 22, scope: !9825)
!9829 = !DILocalVariable(name: "len", scope: !9825, file: !9476, line: 251, type: !149)
!9830 = !DILocation(line: 251, column: 25, scope: !9825)
!9831 = !DILocation(line: 257, column: 37, scope: !9832)
!9832 = distinct !DILexicalBlock(scope: !9825, file: !9476, line: 257, column: 19)
!9833 = !DILocation(line: 257, column: 19, scope: !9832)
!9834 = !DILocation(line: 257, column: 19, scope: !9825)
!9835 = !DILocation(line: 259, column: 23, scope: !9836)
!9836 = distinct !DILexicalBlock(scope: !9837, file: !9476, line: 259, column: 23)
!9837 = distinct !DILexicalBlock(scope: !9832, file: !9476, line: 258, column: 17)
!9838 = !DILocation(line: 259, column: 32, scope: !9836)
!9839 = !DILocation(line: 259, column: 23, scope: !9837)
!9840 = !DILocation(line: 260, column: 21, scope: !9836)
!9841 = !DILocation(line: 261, column: 31, scope: !9837)
!9842 = !DILocation(line: 262, column: 19, scope: !9837)
!9843 = !DILocation(line: 265, column: 42, scope: !9825)
!9844 = !DILocation(line: 265, column: 52, scope: !9825)
!9845 = !DILocation(line: 265, column: 21, scope: !9825)
!9846 = !DILocation(line: 265, column: 19, scope: !9825)
!9847 = !DILocation(line: 266, column: 20, scope: !9848)
!9848 = distinct !DILexicalBlock(scope: !9825, file: !9476, line: 266, column: 19)
!9849 = !DILocation(line: 266, column: 19, scope: !9825)
!9850 = !DILocation(line: 268, column: 23, scope: !9851)
!9851 = distinct !DILexicalBlock(scope: !9852, file: !9476, line: 268, column: 23)
!9852 = distinct !DILexicalBlock(scope: !9848, file: !9476, line: 267, column: 17)
!9853 = !DILocation(line: 268, column: 32, scope: !9851)
!9854 = !DILocation(line: 268, column: 47, scope: !9851)
!9855 = !DILocation(line: 268, column: 50, scope: !9851)
!9856 = !DILocation(line: 268, column: 56, scope: !9851)
!9857 = !DILocation(line: 268, column: 23, scope: !9852)
!9858 = !DILocation(line: 269, column: 21, scope: !9851)
!9859 = !DILocation(line: 270, column: 33, scope: !9852)
!9860 = !DILocation(line: 270, column: 31, scope: !9852)
!9861 = !DILocation(line: 271, column: 19, scope: !9852)
!9862 = !DILocation(line: 274, column: 27, scope: !9825)
!9863 = !DILocation(line: 274, column: 19, scope: !9825)
!9864 = !DILocation(line: 274, column: 17, scope: !9825)
!9865 = !DILocation(line: 275, column: 29, scope: !9825)
!9866 = !DILocation(line: 275, column: 21, scope: !9825)
!9867 = !DILocation(line: 275, column: 19, scope: !9825)
!9868 = !DILocation(line: 277, column: 20, scope: !9869)
!9869 = distinct !DILexicalBlock(scope: !9825, file: !9476, line: 277, column: 19)
!9870 = !DILocation(line: 277, column: 19, scope: !9825)
!9871 = !DILocation(line: 280, column: 23, scope: !9872)
!9872 = distinct !DILexicalBlock(scope: !9869, file: !9476, line: 278, column: 17)
!9873 = !DILocation(line: 280, column: 27, scope: !9872)
!9874 = !DILocation(line: 280, column: 25, scope: !9872)
!9875 = !DILocation(line: 280, column: 31, scope: !9872)
!9876 = !DILocation(line: 280, column: 36, scope: !9872)
!9877 = !DILocation(line: 280, column: 21, scope: !9872)
!9878 = !DILocation(line: 280, column: 51, scope: !9872)
!9879 = !DILocation(line: 280, column: 55, scope: !9872)
!9880 = !DILocation(line: 280, column: 53, scope: !9872)
!9881 = !DILocation(line: 280, column: 59, scope: !9872)
!9882 = !DILocation(line: 279, column: 29, scope: !9872)
!9883 = !DILocation(line: 281, column: 40, scope: !9872)
!9884 = !DILocation(line: 281, column: 31, scope: !9872)
!9885 = !DILocation(line: 281, column: 29, scope: !9872)
!9886 = !DILocation(line: 282, column: 17, scope: !9872)
!9887 = !DILocation(line: 283, column: 25, scope: !9888)
!9888 = distinct !DILexicalBlock(scope: !9869, file: !9476, line: 283, column: 24)
!9889 = !DILocation(line: 283, column: 29, scope: !9888)
!9890 = !DILocation(line: 283, column: 27, scope: !9888)
!9891 = !DILocation(line: 283, column: 33, scope: !9888)
!9892 = !DILocation(line: 283, column: 40, scope: !9888)
!9893 = !DILocation(line: 283, column: 38, scope: !9888)
!9894 = !DILocation(line: 283, column: 24, scope: !9869)
!9895 = !DILocation(line: 285, column: 31, scope: !9896)
!9896 = distinct !DILexicalBlock(scope: !9888, file: !9476, line: 284, column: 17)
!9897 = !DILocation(line: 285, column: 35, scope: !9896)
!9898 = !DILocation(line: 285, column: 33, scope: !9896)
!9899 = !DILocation(line: 285, column: 39, scope: !9896)
!9900 = !DILocation(line: 285, column: 29, scope: !9896)
!9901 = !DILocation(line: 286, column: 41, scope: !9896)
!9902 = !DILocation(line: 286, column: 52, scope: !9896)
!9903 = !DILocation(line: 286, column: 31, scope: !9896)
!9904 = !DILocation(line: 286, column: 29, scope: !9896)
!9905 = !DILocation(line: 287, column: 17, scope: !9896)
!9906 = !DILocation(line: 290, column: 25, scope: !9825)
!9907 = !DILocation(line: 290, column: 35, scope: !9825)
!9908 = !DILocation(line: 290, column: 39, scope: !9825)
!9909 = !DILocation(line: 290, column: 44, scope: !9825)
!9910 = !DILocation(line: 290, column: 48, scope: !9825)
!9911 = !DILocation(line: 290, column: 15, scope: !9825)
!9912 = !DILocation(line: 291, column: 36, scope: !9825)
!9913 = !DILocation(line: 291, column: 47, scope: !9825)
!9914 = !DILocation(line: 291, column: 52, scope: !9825)
!9915 = !DILocation(line: 291, column: 28, scope: !9825)
!9916 = !DILocation(line: 291, column: 26, scope: !9825)
!9917 = !DILocation(line: 291, column: 20, scope: !9825)
!9918 = !DILocation(line: 293, column: 19, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9825, file: !9476, line: 293, column: 19)
!9920 = !DILocation(line: 293, column: 19, scope: !9825)
!9921 = !DILocalVariable(name: "pfxlen", scope: !9922, file: !9476, line: 295, type: !149)
!9922 = distinct !DILexicalBlock(scope: !9919, file: !9476, line: 294, column: 17)
!9923 = !DILocation(line: 295, column: 26, scope: !9922)
!9924 = !DILocation(line: 297, column: 23, scope: !9925)
!9925 = distinct !DILexicalBlock(scope: !9922, file: !9476, line: 297, column: 23)
!9926 = !DILocation(line: 297, column: 23, scope: !9922)
!9927 = !DILocation(line: 298, column: 29, scope: !9925)
!9928 = !DILocation(line: 298, column: 36, scope: !9925)
!9929 = !DILocation(line: 298, column: 41, scope: !9925)
!9930 = !DILocation(line: 298, column: 21, scope: !9925)
!9931 = !DILocation(line: 299, column: 26, scope: !9922)
!9932 = !DILocation(line: 299, column: 34, scope: !9922)
!9933 = !DILocation(line: 299, column: 32, scope: !9922)
!9934 = !DILocation(line: 299, column: 24, scope: !9922)
!9935 = !DILocation(line: 300, column: 24, scope: !9922)
!9936 = !DILocation(line: 300, column: 27, scope: !9922)
!9937 = !DILocation(line: 308, column: 32, scope: !9922)
!9938 = !DILocation(line: 308, column: 30, scope: !9922)
!9939 = !DILocation(line: 309, column: 17, scope: !9922)
!9940 = !DILocation(line: 314, column: 23, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !9942, file: !9476, line: 314, column: 23)
!9942 = distinct !DILexicalBlock(scope: !9919, file: !9476, line: 311, column: 17)
!9943 = !DILocation(line: 314, column: 30, scope: !9941)
!9944 = !DILocation(line: 314, column: 38, scope: !9941)
!9945 = !DILocation(line: 314, column: 36, scope: !9941)
!9946 = !DILocation(line: 314, column: 49, scope: !9941)
!9947 = !DILocation(line: 314, column: 28, scope: !9941)
!9948 = !DILocation(line: 314, column: 23, scope: !9942)
!9949 = !DILocation(line: 315, column: 26, scope: !9950)
!9950 = distinct !DILexicalBlock(scope: !9941, file: !9476, line: 315, column: 21)
!9951 = !DILocation(line: 315, column: 34, scope: !9952)
!9952 = distinct !DILexicalBlock(scope: !9950, file: !9476, line: 315, column: 21)
!9953 = !DILocation(line: 315, column: 41, scope: !9952)
!9954 = !DILocation(line: 315, column: 39, scope: !9952)
!9955 = !DILocation(line: 315, column: 47, scope: !9952)
!9956 = !DILocation(line: 315, column: 51, scope: !9952)
!9957 = !DILocation(line: 315, column: 50, scope: !9952)
!9958 = !DILocation(line: 0, scope: !9952)
!9959 = !DILocation(line: 315, column: 21, scope: !9950)
!9960 = !DILocation(line: 316, column: 23, scope: !9952)
!9961 = !DILocation(line: 315, column: 71, scope: !9952)
!9962 = !DILocation(line: 315, column: 21, scope: !9952)
!9963 = distinct !{!9963, !9959, !9964}
!9964 = !DILocation(line: 316, column: 23, scope: !9950)
!9965 = !DILocation(line: 322, column: 21, scope: !9825)
!9966 = !DILocation(line: 322, column: 15, scope: !9825)
!9967 = !DILocation(line: 323, column: 13, scope: !9825)
!9968 = !DILocation(line: 326, column: 20, scope: !9969)
!9969 = distinct !DILexicalBlock(scope: !9970, file: !9476, line: 326, column: 19)
!9970 = distinct !DILexicalBlock(scope: !9822, file: !9476, line: 325, column: 13)
!9971 = !DILocation(line: 326, column: 41, scope: !9969)
!9972 = !DILocation(line: 326, column: 45, scope: !9969)
!9973 = !DILocation(line: 326, column: 44, scope: !9969)
!9974 = !DILocation(line: 326, column: 49, scope: !9969)
!9975 = !DILocation(line: 326, column: 53, scope: !9969)
!9976 = !DILocation(line: 326, column: 62, scope: !9969)
!9977 = !DILocation(line: 326, column: 19, scope: !9970)
!9978 = !DILocation(line: 328, column: 31, scope: !9979)
!9979 = distinct !DILexicalBlock(scope: !9969, file: !9476, line: 327, column: 17)
!9980 = !DILocation(line: 329, column: 19, scope: !9979)
!9981 = !DILocation(line: 333, column: 5, scope: !9633)
!9982 = !DILocation(line: 176, column: 27, scope: !9628)
!9983 = !DILocation(line: 176, column: 25, scope: !9628)
!9984 = !DILocation(line: 176, column: 3, scope: !9628)
!9985 = distinct !{!9985, !9631, !9986}
!9986 = !DILocation(line: 333, column: 5, scope: !9629)
!9987 = !DILocation(line: 334, column: 7, scope: !9988)
!9988 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 334, column: 7)
!9989 = !DILocation(line: 334, column: 14, scope: !9988)
!9990 = !DILocation(line: 334, column: 22, scope: !9988)
!9991 = !DILocation(line: 334, column: 20, scope: !9988)
!9992 = !DILocation(line: 334, column: 33, scope: !9988)
!9993 = !DILocation(line: 334, column: 12, scope: !9988)
!9994 = !DILocation(line: 334, column: 37, scope: !9988)
!9995 = !DILocation(line: 334, column: 40, scope: !9988)
!9996 = !DILocation(line: 334, column: 7, scope: !9475)
!9997 = !DILocation(line: 335, column: 5, scope: !9988)
!9998 = !DILocation(line: 339, column: 4, scope: !9475)
!9999 = !DILocation(line: 339, column: 9, scope: !9475)
!10000 = !DILocation(line: 340, column: 7, scope: !10001)
!10001 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 340, column: 7)
!10002 = !DILocation(line: 340, column: 22, scope: !10001)
!10003 = !DILocation(line: 340, column: 27, scope: !10001)
!10004 = !DILocation(line: 340, column: 19, scope: !10001)
!10005 = !DILocation(line: 340, column: 7, scope: !9475)
!10006 = !DILocation(line: 341, column: 23, scope: !10001)
!10007 = !DILocation(line: 341, column: 30, scope: !10001)
!10008 = !DILocation(line: 341, column: 37, scope: !10001)
!10009 = !DILocation(line: 341, column: 35, scope: !10001)
!10010 = !DILocation(line: 341, column: 43, scope: !10001)
!10011 = !DILocation(line: 341, column: 13, scope: !10001)
!10012 = !DILocation(line: 341, column: 11, scope: !10001)
!10013 = !DILocation(line: 341, column: 5, scope: !10001)
!10014 = !DILocation(line: 343, column: 9, scope: !9475)
!10015 = !DILocation(line: 343, column: 3, scope: !9475)
!10016 = !DILocation(line: 344, column: 7, scope: !10017)
!10017 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 344, column: 7)
!10018 = !DILocation(line: 344, column: 7, scope: !9475)
!10019 = !DILocation(line: 345, column: 16, scope: !10017)
!10020 = !DILocation(line: 345, column: 5, scope: !10017)
!10021 = !DILocation(line: 346, column: 10, scope: !9475)
!10022 = !DILocation(line: 346, column: 3, scope: !9475)
!10023 = !DILabel(scope: !9475, name: "error", file: !9476, line: 348)
!10024 = !DILocation(line: 348, column: 1, scope: !9475)
!10025 = !DILocation(line: 349, column: 9, scope: !9475)
!10026 = !DILocation(line: 349, column: 3, scope: !9475)
!10027 = !DILocation(line: 350, column: 9, scope: !9475)
!10028 = !DILocation(line: 350, column: 3, scope: !9475)
!10029 = !DILocation(line: 351, column: 7, scope: !10030)
!10030 = distinct !DILexicalBlock(scope: !9475, file: !9476, line: 351, column: 7)
!10031 = !DILocation(line: 351, column: 7, scope: !9475)
!10032 = !DILocation(line: 352, column: 16, scope: !10030)
!10033 = !DILocation(line: 352, column: 5, scope: !10030)
!10034 = !DILocation(line: 353, column: 11, scope: !9475)
!10035 = !DILocation(line: 353, column: 3, scope: !9475)
!10036 = !DILocation(line: 353, column: 9, scope: !9475)
!10037 = !DILocation(line: 354, column: 3, scope: !9475)
!10038 = !DILocation(line: 355, column: 1, scope: !9475)
!10039 = distinct !DISubprogram(name: "seen_triple", scope: !9476, file: !9476, line: 70, type: !10040, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1523, retainedNodes: !152)
!10040 = !DISubroutineType(types: !10041)
!10041 = !{!141, !10042, !146, !10043}
!10042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!10043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10044, size: 64)
!10044 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9480)
!10045 = !DILocalVariable(name: "ht", arg: 1, scope: !10039, file: !9476, line: 70, type: !10042)
!10046 = !DILocation(line: 70, column: 27, scope: !10039)
!10047 = !DILocalVariable(name: "filename", arg: 2, scope: !10039, file: !9476, line: 70, type: !146)
!10048 = !DILocation(line: 70, column: 43, scope: !10039)
!10049 = !DILocalVariable(name: "st", arg: 3, scope: !10039, file: !9476, line: 70, type: !10043)
!10050 = !DILocation(line: 70, column: 72, scope: !10039)
!10051 = !DILocation(line: 72, column: 8, scope: !10052)
!10052 = distinct !DILexicalBlock(scope: !10039, file: !9476, line: 72, column: 7)
!10053 = !DILocation(line: 72, column: 7, scope: !10052)
!10054 = !DILocation(line: 72, column: 11, scope: !10052)
!10055 = !DILocation(line: 72, column: 7, scope: !10039)
!10056 = !DILocalVariable(name: "initial_capacity", scope: !10057, file: !9476, line: 74, type: !149)
!10057 = distinct !DILexicalBlock(scope: !10052, file: !9476, line: 73, column: 5)
!10058 = !DILocation(line: 74, column: 14, scope: !10057)
!10059 = !DILocation(line: 75, column: 30, scope: !10057)
!10060 = !DILocation(line: 75, column: 13, scope: !10057)
!10061 = !DILocation(line: 75, column: 8, scope: !10057)
!10062 = !DILocation(line: 75, column: 11, scope: !10057)
!10063 = !DILocation(line: 80, column: 12, scope: !10064)
!10064 = distinct !DILexicalBlock(scope: !10057, file: !9476, line: 80, column: 11)
!10065 = !DILocation(line: 80, column: 11, scope: !10064)
!10066 = !DILocation(line: 80, column: 15, scope: !10064)
!10067 = !DILocation(line: 80, column: 11, scope: !10057)
!10068 = !DILocation(line: 81, column: 9, scope: !10064)
!10069 = !DILocation(line: 82, column: 5, scope: !10057)
!10070 = !DILocation(line: 84, column: 19, scope: !10071)
!10071 = distinct !DILexicalBlock(scope: !10039, file: !9476, line: 84, column: 7)
!10072 = !DILocation(line: 84, column: 18, scope: !10071)
!10073 = !DILocation(line: 84, column: 23, scope: !10071)
!10074 = !DILocation(line: 84, column: 33, scope: !10071)
!10075 = !DILocation(line: 84, column: 7, scope: !10071)
!10076 = !DILocation(line: 84, column: 7, scope: !10039)
!10077 = !DILocation(line: 85, column: 5, scope: !10071)
!10078 = !DILocation(line: 87, column: 17, scope: !10039)
!10079 = !DILocation(line: 87, column: 16, scope: !10039)
!10080 = !DILocation(line: 87, column: 21, scope: !10039)
!10081 = !DILocation(line: 87, column: 31, scope: !10039)
!10082 = !DILocation(line: 87, column: 3, scope: !10039)
!10083 = !DILocation(line: 88, column: 3, scope: !10039)
!10084 = !DILocation(line: 89, column: 1, scope: !10039)
!10085 = distinct !DISubprogram(name: "close_stdout_set_file_name", scope: !1182, file: !1182, line: 51, type: !840, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1142, retainedNodes: !152)
!10086 = !DILocalVariable(name: "file", arg: 1, scope: !10085, file: !1182, line: 51, type: !146)
!10087 = !DILocation(line: 51, column: 41, scope: !10085)
!10088 = !DILocation(line: 53, column: 15, scope: !10085)
!10089 = !DILocation(line: 53, column: 13, scope: !10085)
!10090 = !DILocation(line: 54, column: 1, scope: !10085)
!10091 = distinct !DISubprogram(name: "close_stdout_set_ignore_EPIPE", scope: !1182, file: !1182, line: 88, type: !927, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1142, retainedNodes: !152)
!10092 = !DILocalVariable(name: "ignore", arg: 1, scope: !10091, file: !1182, line: 88, type: !141)
!10093 = !DILocation(line: 88, column: 37, scope: !10091)
!10094 = !DILocation(line: 90, column: 18, scope: !10091)
!10095 = !DILocation(line: 90, column: 16, scope: !10091)
!10096 = !DILocation(line: 91, column: 1, scope: !10091)
!10097 = distinct !DISubprogram(name: "close_stdout", scope: !1182, file: !1182, line: 117, type: !532, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1142, retainedNodes: !152)
!10098 = !DILocation(line: 119, column: 21, scope: !10099)
!10099 = distinct !DILexicalBlock(scope: !10097, file: !1182, line: 119, column: 7)
!10100 = !DILocation(line: 119, column: 7, scope: !10099)
!10101 = !DILocation(line: 119, column: 29, scope: !10099)
!10102 = !DILocation(line: 120, column: 7, scope: !10099)
!10103 = !DILocation(line: 120, column: 12, scope: !10099)
!10104 = !DILocation(line: 120, column: 25, scope: !10099)
!10105 = !DILocation(line: 120, column: 28, scope: !10099)
!10106 = !DILocation(line: 120, column: 34, scope: !10099)
!10107 = !DILocation(line: 119, column: 7, scope: !10097)
!10108 = !DILocalVariable(name: "write_error", scope: !10109, file: !1182, line: 122, type: !146)
!10109 = distinct !DILexicalBlock(scope: !10099, file: !1182, line: 121, column: 5)
!10110 = !DILocation(line: 122, column: 19, scope: !10109)
!10111 = !DILocation(line: 122, column: 33, scope: !10109)
!10112 = !DILocation(line: 123, column: 11, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !10109, file: !1182, line: 123, column: 11)
!10114 = !DILocation(line: 123, column: 11, scope: !10109)
!10115 = !DILocation(line: 124, column: 19, scope: !10113)
!10116 = !DILocation(line: 124, column: 52, scope: !10113)
!10117 = !DILocation(line: 124, column: 36, scope: !10113)
!10118 = !DILocation(line: 125, column: 16, scope: !10113)
!10119 = !DILocation(line: 124, column: 9, scope: !10113)
!10120 = !DILocation(line: 127, column: 19, scope: !10113)
!10121 = !DILocation(line: 127, column: 32, scope: !10113)
!10122 = !DILocation(line: 127, column: 9, scope: !10113)
!10123 = !DILocation(line: 129, column: 14, scope: !10109)
!10124 = !DILocation(line: 129, column: 7, scope: !10109)
!10125 = !DILocation(line: 134, column: 42, scope: !10126)
!10126 = distinct !DILexicalBlock(scope: !10097, file: !1182, line: 134, column: 7)
!10127 = !DILocation(line: 134, column: 28, scope: !10126)
!10128 = !DILocation(line: 134, column: 50, scope: !10126)
!10129 = !DILocation(line: 134, column: 7, scope: !10097)
!10130 = !DILocation(line: 135, column: 12, scope: !10126)
!10131 = !DILocation(line: 135, column: 5, scope: !10126)
!10132 = !DILocation(line: 136, column: 1, scope: !10097)
!10133 = distinct !DISubprogram(name: "dir_len", scope: !10134, file: !10134, line: 32, type: !10135, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1534, retainedNodes: !152)
!10134 = !DIFile(filename: "lib/dirname-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10135 = !DISubroutineType(types: !10136)
!10136 = !{!149, !146}
!10137 = !DILocalVariable(name: "file", arg: 1, scope: !10133, file: !10134, line: 32, type: !146)
!10138 = !DILocation(line: 32, column: 22, scope: !10133)
!10139 = !DILocalVariable(name: "prefix_length", scope: !10133, file: !10134, line: 34, type: !149)
!10140 = !DILocation(line: 34, column: 10, scope: !10133)
!10141 = !DILocalVariable(name: "length", scope: !10133, file: !10134, line: 35, type: !149)
!10142 = !DILocation(line: 35, column: 10, scope: !10133)
!10143 = !DILocation(line: 38, column: 21, scope: !10133)
!10144 = !DILocation(line: 38, column: 35, scope: !10133)
!10145 = !DILocation(line: 41, column: 24, scope: !10133)
!10146 = !DILocation(line: 38, column: 20, scope: !10133)
!10147 = !DILocation(line: 38, column: 17, scope: !10133)
!10148 = !DILocation(line: 48, column: 33, scope: !10149)
!10149 = distinct !DILexicalBlock(scope: !10133, file: !10134, line: 48, column: 3)
!10150 = !DILocation(line: 48, column: 17, scope: !10149)
!10151 = !DILocation(line: 48, column: 41, scope: !10149)
!10152 = !DILocation(line: 48, column: 39, scope: !10149)
!10153 = !DILocation(line: 48, column: 15, scope: !10149)
!10154 = !DILocation(line: 48, column: 8, scope: !10149)
!10155 = !DILocation(line: 49, column: 8, scope: !10156)
!10156 = distinct !DILexicalBlock(scope: !10149, file: !10134, line: 48, column: 3)
!10157 = !DILocation(line: 49, column: 24, scope: !10156)
!10158 = !DILocation(line: 49, column: 22, scope: !10156)
!10159 = !DILocation(line: 48, column: 3, scope: !10149)
!10160 = !DILocation(line: 50, column: 11, scope: !10161)
!10161 = distinct !DILexicalBlock(scope: !10156, file: !10134, line: 50, column: 9)
!10162 = !DILocation(line: 50, column: 9, scope: !10156)
!10163 = !DILocation(line: 51, column: 7, scope: !10161)
!10164 = !DILocation(line: 49, column: 38, scope: !10156)
!10165 = !DILocation(line: 48, column: 3, scope: !10156)
!10166 = distinct !{!10166, !10159, !10167}
!10167 = !DILocation(line: 51, column: 7, scope: !10149)
!10168 = !DILocation(line: 52, column: 10, scope: !10133)
!10169 = !DILocation(line: 52, column: 3, scope: !10133)
!10170 = distinct !DISubprogram(name: "mdir_name", scope: !10134, file: !10134, line: 71, type: !8592, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1534, retainedNodes: !152)
!10171 = !DILocalVariable(name: "file", arg: 1, scope: !10170, file: !10134, line: 71, type: !146)
!10172 = !DILocation(line: 71, column: 24, scope: !10170)
!10173 = !DILocalVariable(name: "length", scope: !10170, file: !10134, line: 73, type: !149)
!10174 = !DILocation(line: 73, column: 10, scope: !10170)
!10175 = !DILocation(line: 73, column: 28, scope: !10170)
!10176 = !DILocation(line: 73, column: 19, scope: !10170)
!10177 = !DILocalVariable(name: "append_dot", scope: !10170, file: !10134, line: 74, type: !141)
!10178 = !DILocation(line: 74, column: 8, scope: !10170)
!10179 = !DILocation(line: 74, column: 22, scope: !10170)
!10180 = !DILocation(line: 74, column: 29, scope: !10170)
!10181 = !DILocation(line: 75, column: 22, scope: !10170)
!10182 = !DILocalVariable(name: "dir", scope: !10170, file: !10134, line: 78, type: !143)
!10183 = !DILocation(line: 78, column: 9, scope: !10170)
!10184 = !DILocation(line: 78, column: 23, scope: !10170)
!10185 = !DILocation(line: 78, column: 32, scope: !10170)
!10186 = !DILocation(line: 78, column: 30, scope: !10170)
!10187 = !DILocation(line: 78, column: 43, scope: !10170)
!10188 = !DILocation(line: 78, column: 15, scope: !10170)
!10189 = !DILocation(line: 79, column: 8, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10170, file: !10134, line: 79, column: 7)
!10191 = !DILocation(line: 79, column: 7, scope: !10170)
!10192 = !DILocation(line: 80, column: 5, scope: !10190)
!10193 = !DILocation(line: 81, column: 11, scope: !10170)
!10194 = !DILocation(line: 81, column: 16, scope: !10170)
!10195 = !DILocation(line: 81, column: 22, scope: !10170)
!10196 = !DILocation(line: 81, column: 3, scope: !10170)
!10197 = !DILocation(line: 82, column: 7, scope: !10198)
!10198 = distinct !DILexicalBlock(scope: !10170, file: !10134, line: 82, column: 7)
!10199 = !DILocation(line: 82, column: 7, scope: !10170)
!10200 = !DILocation(line: 83, column: 5, scope: !10198)
!10201 = !DILocation(line: 83, column: 15, scope: !10198)
!10202 = !DILocation(line: 83, column: 19, scope: !10198)
!10203 = !DILocation(line: 84, column: 3, scope: !10170)
!10204 = !DILocation(line: 84, column: 7, scope: !10170)
!10205 = !DILocation(line: 84, column: 15, scope: !10170)
!10206 = !DILocation(line: 85, column: 10, scope: !10170)
!10207 = !DILocation(line: 85, column: 3, scope: !10170)
!10208 = !DILocation(line: 86, column: 1, scope: !10170)
!10209 = distinct !DISubprogram(name: "last_component", scope: !10210, file: !10210, line: 30, type: !8592, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1537, retainedNodes: !152)
!10210 = !DIFile(filename: "lib/basename-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10211 = !DILocalVariable(name: "name", arg: 1, scope: !10209, file: !10210, line: 30, type: !146)
!10212 = !DILocation(line: 30, column: 29, scope: !10209)
!10213 = !DILocalVariable(name: "base", scope: !10209, file: !10210, line: 32, type: !146)
!10214 = !DILocation(line: 32, column: 15, scope: !10209)
!10215 = !DILocation(line: 32, column: 22, scope: !10209)
!10216 = !DILocation(line: 32, column: 27, scope: !10209)
!10217 = !DILocalVariable(name: "p", scope: !10209, file: !10210, line: 33, type: !146)
!10218 = !DILocation(line: 33, column: 15, scope: !10209)
!10219 = !DILocalVariable(name: "saw_slash", scope: !10209, file: !10210, line: 34, type: !141)
!10220 = !DILocation(line: 34, column: 8, scope: !10209)
!10221 = !DILocation(line: 36, column: 3, scope: !10209)
!10222 = !DILocation(line: 36, column: 10, scope: !10209)
!10223 = !DILocation(line: 37, column: 9, scope: !10209)
!10224 = distinct !{!10224, !10221, !10223}
!10225 = !DILocation(line: 39, column: 12, scope: !10226)
!10226 = distinct !DILexicalBlock(scope: !10209, file: !10210, line: 39, column: 3)
!10227 = !DILocation(line: 39, column: 10, scope: !10226)
!10228 = !DILocation(line: 39, column: 8, scope: !10226)
!10229 = !DILocation(line: 39, column: 19, scope: !10230)
!10230 = distinct !DILexicalBlock(scope: !10226, file: !10210, line: 39, column: 3)
!10231 = !DILocation(line: 39, column: 18, scope: !10230)
!10232 = !DILocation(line: 39, column: 3, scope: !10226)
!10233 = !DILocation(line: 41, column: 11, scope: !10234)
!10234 = distinct !DILexicalBlock(scope: !10235, file: !10210, line: 41, column: 11)
!10235 = distinct !DILexicalBlock(scope: !10230, file: !10210, line: 40, column: 5)
!10236 = !DILocation(line: 41, column: 11, scope: !10235)
!10237 = !DILocation(line: 42, column: 19, scope: !10234)
!10238 = !DILocation(line: 42, column: 9, scope: !10234)
!10239 = !DILocation(line: 43, column: 16, scope: !10240)
!10240 = distinct !DILexicalBlock(scope: !10234, file: !10210, line: 43, column: 16)
!10241 = !DILocation(line: 43, column: 16, scope: !10234)
!10242 = !DILocation(line: 45, column: 18, scope: !10243)
!10243 = distinct !DILexicalBlock(scope: !10240, file: !10210, line: 44, column: 9)
!10244 = !DILocation(line: 45, column: 16, scope: !10243)
!10245 = !DILocation(line: 46, column: 21, scope: !10243)
!10246 = !DILocation(line: 47, column: 9, scope: !10243)
!10247 = !DILocation(line: 48, column: 5, scope: !10235)
!10248 = !DILocation(line: 39, column: 23, scope: !10230)
!10249 = !DILocation(line: 39, column: 3, scope: !10230)
!10250 = distinct !{!10250, !10232, !10251}
!10251 = !DILocation(line: 48, column: 5, scope: !10226)
!10252 = !DILocation(line: 50, column: 19, scope: !10209)
!10253 = !DILocation(line: 50, column: 3, scope: !10209)
!10254 = distinct !DISubprogram(name: "base_len", scope: !10210, file: !10210, line: 58, type: !10135, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1537, retainedNodes: !152)
!10255 = !DILocalVariable(name: "name", arg: 1, scope: !10254, file: !10210, line: 58, type: !146)
!10256 = !DILocation(line: 58, column: 23, scope: !10254)
!10257 = !DILocalVariable(name: "len", scope: !10254, file: !10210, line: 60, type: !149)
!10258 = !DILocation(line: 60, column: 10, scope: !10254)
!10259 = !DILocalVariable(name: "prefix_len", scope: !10254, file: !10210, line: 61, type: !149)
!10260 = !DILocation(line: 61, column: 10, scope: !10254)
!10261 = !DILocation(line: 63, column: 22, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !10254, file: !10210, line: 63, column: 3)
!10263 = !DILocation(line: 63, column: 14, scope: !10262)
!10264 = !DILocation(line: 63, column: 12, scope: !10262)
!10265 = !DILocation(line: 63, column: 8, scope: !10262)
!10266 = !DILocation(line: 63, column: 34, scope: !10267)
!10267 = distinct !DILexicalBlock(scope: !10262, file: !10210, line: 63, column: 3)
!10268 = !DILocation(line: 63, column: 32, scope: !10267)
!10269 = !DILocation(line: 63, column: 38, scope: !10267)
!10270 = !DILocation(line: 63, column: 41, scope: !10267)
!10271 = !DILocation(line: 0, scope: !10267)
!10272 = !DILocation(line: 63, column: 3, scope: !10262)
!10273 = !DILocation(line: 64, column: 5, scope: !10267)
!10274 = !DILocation(line: 63, column: 70, scope: !10267)
!10275 = !DILocation(line: 63, column: 3, scope: !10267)
!10276 = distinct !{!10276, !10272, !10277}
!10277 = !DILocation(line: 64, column: 5, scope: !10262)
!10278 = !DILocation(line: 74, column: 10, scope: !10254)
!10279 = !DILocation(line: 74, column: 3, scope: !10254)
!10280 = distinct !DISubprogram(name: "file_has_acl", scope: !10281, file: !10281, line: 45, type: !10282, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1540, retainedNodes: !152)
!10281 = !DIFile(filename: "lib/file-has-acl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10282 = !DISubroutineType(types: !10283)
!10283 = !{!27, !146, !10284}
!10284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10285, size: 64)
!10285 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10286)
!10286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !10287)
!10287 = !{!10288, !10289, !10290, !10291, !10292, !10293, !10294, !10295, !10296, !10297, !10298, !10299, !10304, !10305, !10306}
!10288 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !10286, file: !192, line: 48, baseType: !195, size: 64)
!10289 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !10286, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!10290 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !10286, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!10291 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !10286, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!10292 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !10286, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!10293 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !10286, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!10294 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !10286, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!10295 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !10286, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!10296 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !10286, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!10297 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !10286, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!10298 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !10286, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!10299 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !10286, file: !192, line: 91, baseType: !10300, size: 128, offset: 576)
!10300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !10301)
!10301 = !{!10302, !10303}
!10302 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !10300, file: !215, line: 11, baseType: !164, size: 64)
!10303 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !10300, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!10304 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !10286, file: !192, line: 92, baseType: !10300, size: 128, offset: 704)
!10305 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !10286, file: !192, line: 93, baseType: !10300, size: 128, offset: 832)
!10306 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !10286, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!10307 = !DILocalVariable(name: "name", arg: 1, scope: !10280, file: !10281, line: 45, type: !146)
!10308 = !DILocation(line: 45, column: 27, scope: !10280)
!10309 = !DILocalVariable(name: "sb", arg: 2, scope: !10280, file: !10281, line: 45, type: !10284)
!10310 = !DILocation(line: 45, column: 52, scope: !10280)
!10311 = !DILocation(line: 48, column: 9, scope: !10312)
!10312 = distinct !DILexicalBlock(scope: !10280, file: !10281, line: 48, column: 7)
!10313 = !DILocation(line: 48, column: 7, scope: !10280)
!10314 = !DILocalVariable(name: "ret", scope: !10315, file: !10281, line: 53, type: !1514)
!10315 = distinct !DILexicalBlock(scope: !10312, file: !10281, line: 49, column: 5)
!10316 = !DILocation(line: 53, column: 15, scope: !10315)
!10317 = !DILocation(line: 55, column: 23, scope: !10315)
!10318 = !DILocation(line: 55, column: 13, scope: !10315)
!10319 = !DILocation(line: 55, column: 11, scope: !10315)
!10320 = !DILocation(line: 56, column: 11, scope: !10321)
!10321 = distinct !DILexicalBlock(scope: !10315, file: !10281, line: 56, column: 11)
!10322 = !DILocation(line: 56, column: 15, scope: !10321)
!10323 = !DILocation(line: 56, column: 19, scope: !10321)
!10324 = !DILocation(line: 56, column: 22, scope: !10321)
!10325 = !DILocation(line: 56, column: 28, scope: !10321)
!10326 = !DILocation(line: 56, column: 11, scope: !10315)
!10327 = !DILocation(line: 57, column: 13, scope: !10321)
!10328 = !DILocation(line: 57, column: 9, scope: !10321)
!10329 = !DILocation(line: 58, column: 16, scope: !10330)
!10330 = distinct !DILexicalBlock(scope: !10321, file: !10281, line: 58, column: 16)
!10331 = !DILocation(line: 58, column: 20, scope: !10330)
!10332 = !DILocation(line: 58, column: 16, scope: !10321)
!10333 = !DILocation(line: 59, column: 9, scope: !10330)
!10334 = !DILocation(line: 61, column: 11, scope: !10335)
!10335 = distinct !DILexicalBlock(scope: !10315, file: !10281, line: 61, column: 11)
!10336 = !DILocation(line: 61, column: 15, scope: !10335)
!10337 = !DILocation(line: 61, column: 20, scope: !10335)
!10338 = !DILocation(line: 61, column: 23, scope: !10335)
!10339 = !DILocation(line: 61, column: 11, scope: !10315)
!10340 = !DILocation(line: 63, column: 27, scope: !10341)
!10341 = distinct !DILexicalBlock(scope: !10335, file: !10281, line: 62, column: 9)
!10342 = !DILocation(line: 63, column: 17, scope: !10341)
!10343 = !DILocation(line: 63, column: 15, scope: !10341)
!10344 = !DILocation(line: 64, column: 15, scope: !10345)
!10345 = distinct !DILexicalBlock(scope: !10341, file: !10281, line: 64, column: 15)
!10346 = !DILocation(line: 64, column: 19, scope: !10345)
!10347 = !DILocation(line: 64, column: 23, scope: !10345)
!10348 = !DILocation(line: 64, column: 26, scope: !10345)
!10349 = !DILocation(line: 64, column: 32, scope: !10345)
!10350 = !DILocation(line: 64, column: 15, scope: !10341)
!10351 = !DILocation(line: 65, column: 17, scope: !10345)
!10352 = !DILocation(line: 65, column: 13, scope: !10345)
!10353 = !DILocation(line: 66, column: 20, scope: !10354)
!10354 = distinct !DILexicalBlock(scope: !10345, file: !10281, line: 66, column: 20)
!10355 = !DILocation(line: 66, column: 24, scope: !10354)
!10356 = !DILocation(line: 66, column: 20, scope: !10345)
!10357 = !DILocation(line: 67, column: 13, scope: !10354)
!10358 = !DILocation(line: 68, column: 9, scope: !10341)
!10359 = !DILocation(line: 70, column: 11, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10315, file: !10281, line: 70, column: 11)
!10361 = !DILocation(line: 70, column: 15, scope: !10360)
!10362 = !DILocation(line: 70, column: 11, scope: !10315)
!10363 = !DILocation(line: 71, column: 35, scope: !10360)
!10364 = !DILocation(line: 71, column: 18, scope: !10360)
!10365 = !DILocation(line: 71, column: 16, scope: !10360)
!10366 = !DILocation(line: 71, column: 9, scope: !10360)
!10367 = !DILocation(line: 72, column: 14, scope: !10315)
!10368 = !DILocation(line: 72, column: 7, scope: !10315)
!10369 = !DILocation(line: 509, column: 3, scope: !10280)
!10370 = !DILocation(line: 510, column: 1, scope: !10280)
!10371 = distinct !DISubprogram(name: "record_file", scope: !10372, file: !10372, line: 29, type: !10373, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1543, retainedNodes: !152)
!10372 = !DIFile(filename: "lib/file-set.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10373 = !DISubroutineType(types: !10374)
!10374 = !{null, !251, !146, !10375}
!10375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10376, size: 64)
!10376 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10377)
!10377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !10378)
!10378 = !{!10379, !10380, !10381, !10382, !10383, !10384, !10385, !10386, !10387, !10388, !10389, !10390, !10395, !10396, !10397}
!10379 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !10377, file: !192, line: 48, baseType: !195, size: 64)
!10380 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !10377, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!10381 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !10377, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!10382 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !10377, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!10383 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !10377, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!10384 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !10377, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!10385 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !10377, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!10386 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !10377, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!10387 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !10377, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!10388 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !10377, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!10389 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !10377, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!10390 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !10377, file: !192, line: 91, baseType: !10391, size: 128, offset: 576)
!10391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !10392)
!10392 = !{!10393, !10394}
!10393 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !10391, file: !215, line: 11, baseType: !164, size: 64)
!10394 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !10391, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!10395 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !10377, file: !192, line: 92, baseType: !10391, size: 128, offset: 704)
!10396 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !10377, file: !192, line: 93, baseType: !10391, size: 128, offset: 832)
!10397 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !10377, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!10398 = !DILocalVariable(name: "ht", arg: 1, scope: !10371, file: !10372, line: 29, type: !251)
!10399 = !DILocation(line: 29, column: 26, scope: !10371)
!10400 = !DILocalVariable(name: "file", arg: 2, scope: !10371, file: !10372, line: 29, type: !146)
!10401 = !DILocation(line: 29, column: 42, scope: !10371)
!10402 = !DILocalVariable(name: "stats", arg: 3, scope: !10371, file: !10372, line: 29, type: !10375)
!10403 = !DILocation(line: 29, column: 67, scope: !10371)
!10404 = !DILocalVariable(name: "ent", scope: !10371, file: !10372, line: 31, type: !1546)
!10405 = !DILocation(line: 31, column: 20, scope: !10371)
!10406 = !DILocation(line: 33, column: 7, scope: !10407)
!10407 = distinct !DILexicalBlock(scope: !10371, file: !10372, line: 33, column: 7)
!10408 = !DILocation(line: 33, column: 10, scope: !10407)
!10409 = !DILocation(line: 33, column: 7, scope: !10371)
!10410 = !DILocation(line: 34, column: 5, scope: !10407)
!10411 = !DILocation(line: 36, column: 9, scope: !10371)
!10412 = !DILocation(line: 36, column: 7, scope: !10371)
!10413 = !DILocation(line: 37, column: 24, scope: !10371)
!10414 = !DILocation(line: 37, column: 15, scope: !10371)
!10415 = !DILocation(line: 37, column: 3, scope: !10371)
!10416 = !DILocation(line: 37, column: 8, scope: !10371)
!10417 = !DILocation(line: 37, column: 13, scope: !10371)
!10418 = !DILocation(line: 38, column: 17, scope: !10371)
!10419 = !DILocation(line: 38, column: 24, scope: !10371)
!10420 = !DILocation(line: 38, column: 3, scope: !10371)
!10421 = !DILocation(line: 38, column: 8, scope: !10371)
!10422 = !DILocation(line: 38, column: 15, scope: !10371)
!10423 = !DILocation(line: 39, column: 17, scope: !10371)
!10424 = !DILocation(line: 39, column: 24, scope: !10371)
!10425 = !DILocation(line: 39, column: 3, scope: !10371)
!10426 = !DILocation(line: 39, column: 8, scope: !10371)
!10427 = !DILocation(line: 39, column: 15, scope: !10371)
!10428 = !DILocalVariable(name: "ent_from_table", scope: !10429, file: !10372, line: 42, type: !1546)
!10429 = distinct !DILexicalBlock(scope: !10371, file: !10372, line: 41, column: 3)
!10430 = !DILocation(line: 42, column: 22, scope: !10429)
!10431 = !DILocation(line: 42, column: 52, scope: !10429)
!10432 = !DILocation(line: 42, column: 56, scope: !10429)
!10433 = !DILocation(line: 42, column: 39, scope: !10429)
!10434 = !DILocation(line: 43, column: 9, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10429, file: !10372, line: 43, column: 9)
!10436 = !DILocation(line: 43, column: 24, scope: !10435)
!10437 = !DILocation(line: 43, column: 9, scope: !10429)
!10438 = !DILocation(line: 46, column: 9, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10435, file: !10372, line: 44, column: 7)
!10440 = !DILocation(line: 49, column: 9, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10429, file: !10372, line: 49, column: 9)
!10442 = !DILocation(line: 49, column: 27, scope: !10441)
!10443 = !DILocation(line: 49, column: 24, scope: !10441)
!10444 = !DILocation(line: 49, column: 9, scope: !10429)
!10445 = !DILocation(line: 53, column: 22, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10441, file: !10372, line: 50, column: 7)
!10447 = !DILocation(line: 53, column: 9, scope: !10446)
!10448 = !DILocation(line: 54, column: 7, scope: !10446)
!10449 = !DILocation(line: 56, column: 1, scope: !10371)
!10450 = distinct !DISubprogram(name: "seen_file", scope: !10372, file: !10372, line: 61, type: !10451, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1543, retainedNodes: !152)
!10451 = !DISubroutineType(types: !10452)
!10452 = !{!141, !10453, !146, !10375}
!10453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10454, size: 64)
!10454 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !252)
!10455 = !DILocalVariable(name: "ht", arg: 1, scope: !10450, file: !10372, line: 61, type: !10453)
!10456 = !DILocation(line: 61, column: 30, scope: !10450)
!10457 = !DILocalVariable(name: "file", arg: 2, scope: !10450, file: !10372, line: 61, type: !146)
!10458 = !DILocation(line: 61, column: 46, scope: !10450)
!10459 = !DILocalVariable(name: "stats", arg: 3, scope: !10450, file: !10372, line: 62, type: !10375)
!10460 = !DILocation(line: 62, column: 31, scope: !10450)
!10461 = !DILocalVariable(name: "new_ent", scope: !10450, file: !10372, line: 64, type: !1547)
!10462 = !DILocation(line: 64, column: 19, scope: !10450)
!10463 = !DILocation(line: 66, column: 7, scope: !10464)
!10464 = distinct !DILexicalBlock(scope: !10450, file: !10372, line: 66, column: 7)
!10465 = !DILocation(line: 66, column: 10, scope: !10464)
!10466 = !DILocation(line: 66, column: 7, scope: !10450)
!10467 = !DILocation(line: 67, column: 5, scope: !10464)
!10468 = !DILocation(line: 69, column: 27, scope: !10450)
!10469 = !DILocation(line: 69, column: 11, scope: !10450)
!10470 = !DILocation(line: 69, column: 16, scope: !10450)
!10471 = !DILocation(line: 70, column: 20, scope: !10450)
!10472 = !DILocation(line: 70, column: 27, scope: !10450)
!10473 = !DILocation(line: 70, column: 11, scope: !10450)
!10474 = !DILocation(line: 70, column: 18, scope: !10450)
!10475 = !DILocation(line: 71, column: 20, scope: !10450)
!10476 = !DILocation(line: 71, column: 27, scope: !10450)
!10477 = !DILocation(line: 71, column: 11, scope: !10450)
!10478 = !DILocation(line: 71, column: 18, scope: !10450)
!10479 = !DILocation(line: 73, column: 25, scope: !10450)
!10480 = !DILocation(line: 73, column: 29, scope: !10450)
!10481 = !DILocation(line: 73, column: 12, scope: !10450)
!10482 = !DILocation(line: 73, column: 11, scope: !10450)
!10483 = !DILocation(line: 73, column: 10, scope: !10450)
!10484 = !DILocation(line: 73, column: 3, scope: !10450)
!10485 = !DILocation(line: 74, column: 1, scope: !10450)
!10486 = distinct !DISubprogram(name: "strmode", scope: !10487, file: !10487, line: 96, type: !10488, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1553, retainedNodes: !152)
!10487 = !DIFile(filename: "lib/filemode.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10488 = !DISubroutineType(types: !10489)
!10489 = !{null, !228, !143}
!10490 = !DILocalVariable(name: "mode", arg: 1, scope: !10486, file: !10487, line: 96, type: !228)
!10491 = !DILocation(line: 96, column: 17, scope: !10486)
!10492 = !DILocalVariable(name: "str", arg: 2, scope: !10486, file: !10487, line: 96, type: !143)
!10493 = !DILocation(line: 96, column: 29, scope: !10486)
!10494 = !DILocation(line: 98, column: 22, scope: !10486)
!10495 = !DILocation(line: 98, column: 12, scope: !10486)
!10496 = !DILocation(line: 98, column: 3, scope: !10486)
!10497 = !DILocation(line: 98, column: 10, scope: !10486)
!10498 = !DILocation(line: 99, column: 12, scope: !10486)
!10499 = !DILocation(line: 99, column: 17, scope: !10486)
!10500 = !DILocation(line: 99, column: 3, scope: !10486)
!10501 = !DILocation(line: 99, column: 10, scope: !10486)
!10502 = !DILocation(line: 100, column: 12, scope: !10486)
!10503 = !DILocation(line: 100, column: 17, scope: !10486)
!10504 = !DILocation(line: 100, column: 3, scope: !10486)
!10505 = !DILocation(line: 100, column: 10, scope: !10486)
!10506 = !DILocation(line: 101, column: 13, scope: !10486)
!10507 = !DILocation(line: 101, column: 18, scope: !10486)
!10508 = !DILocation(line: 102, column: 16, scope: !10486)
!10509 = !DILocation(line: 102, column: 21, scope: !10486)
!10510 = !DILocation(line: 103, column: 16, scope: !10486)
!10511 = !DILocation(line: 103, column: 21, scope: !10486)
!10512 = !DILocation(line: 101, column: 12, scope: !10486)
!10513 = !DILocation(line: 101, column: 3, scope: !10486)
!10514 = !DILocation(line: 101, column: 10, scope: !10486)
!10515 = !DILocation(line: 104, column: 12, scope: !10486)
!10516 = !DILocation(line: 104, column: 17, scope: !10486)
!10517 = !DILocation(line: 104, column: 3, scope: !10486)
!10518 = !DILocation(line: 104, column: 10, scope: !10486)
!10519 = !DILocation(line: 105, column: 12, scope: !10486)
!10520 = !DILocation(line: 105, column: 17, scope: !10486)
!10521 = !DILocation(line: 105, column: 3, scope: !10486)
!10522 = !DILocation(line: 105, column: 10, scope: !10486)
!10523 = !DILocation(line: 106, column: 13, scope: !10486)
!10524 = !DILocation(line: 106, column: 18, scope: !10486)
!10525 = !DILocation(line: 107, column: 16, scope: !10486)
!10526 = !DILocation(line: 107, column: 21, scope: !10486)
!10527 = !DILocation(line: 108, column: 16, scope: !10486)
!10528 = !DILocation(line: 108, column: 21, scope: !10486)
!10529 = !DILocation(line: 106, column: 12, scope: !10486)
!10530 = !DILocation(line: 106, column: 3, scope: !10486)
!10531 = !DILocation(line: 106, column: 10, scope: !10486)
!10532 = !DILocation(line: 109, column: 12, scope: !10486)
!10533 = !DILocation(line: 109, column: 17, scope: !10486)
!10534 = !DILocation(line: 109, column: 3, scope: !10486)
!10535 = !DILocation(line: 109, column: 10, scope: !10486)
!10536 = !DILocation(line: 110, column: 12, scope: !10486)
!10537 = !DILocation(line: 110, column: 17, scope: !10486)
!10538 = !DILocation(line: 110, column: 3, scope: !10486)
!10539 = !DILocation(line: 110, column: 10, scope: !10486)
!10540 = !DILocation(line: 111, column: 13, scope: !10486)
!10541 = !DILocation(line: 111, column: 18, scope: !10486)
!10542 = !DILocation(line: 112, column: 16, scope: !10486)
!10543 = !DILocation(line: 112, column: 21, scope: !10486)
!10544 = !DILocation(line: 113, column: 16, scope: !10486)
!10545 = !DILocation(line: 113, column: 21, scope: !10486)
!10546 = !DILocation(line: 111, column: 12, scope: !10486)
!10547 = !DILocation(line: 111, column: 3, scope: !10486)
!10548 = !DILocation(line: 111, column: 10, scope: !10486)
!10549 = !DILocation(line: 114, column: 3, scope: !10486)
!10550 = !DILocation(line: 114, column: 11, scope: !10486)
!10551 = !DILocation(line: 115, column: 3, scope: !10486)
!10552 = !DILocation(line: 115, column: 11, scope: !10486)
!10553 = !DILocation(line: 116, column: 1, scope: !10486)
!10554 = distinct !DISubprogram(name: "ftypelet", scope: !10487, file: !10487, line: 54, type: !10555, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1553, retainedNodes: !152)
!10555 = !DISubroutineType(types: !10556)
!10556 = !{!144, !228}
!10557 = !DILocalVariable(name: "bits", arg: 1, scope: !10554, file: !10487, line: 54, type: !228)
!10558 = !DILocation(line: 54, column: 18, scope: !10554)
!10559 = !DILocation(line: 57, column: 7, scope: !10560)
!10560 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 57, column: 7)
!10561 = !DILocation(line: 57, column: 7, scope: !10554)
!10562 = !DILocation(line: 58, column: 5, scope: !10560)
!10563 = !DILocation(line: 59, column: 7, scope: !10564)
!10564 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 59, column: 7)
!10565 = !DILocation(line: 59, column: 7, scope: !10554)
!10566 = !DILocation(line: 60, column: 5, scope: !10564)
!10567 = !DILocation(line: 63, column: 7, scope: !10568)
!10568 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 63, column: 7)
!10569 = !DILocation(line: 63, column: 7, scope: !10554)
!10570 = !DILocation(line: 64, column: 5, scope: !10568)
!10571 = !DILocation(line: 65, column: 7, scope: !10572)
!10572 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 65, column: 7)
!10573 = !DILocation(line: 65, column: 7, scope: !10554)
!10574 = !DILocation(line: 66, column: 5, scope: !10572)
!10575 = !DILocation(line: 67, column: 7, scope: !10576)
!10576 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 67, column: 7)
!10577 = !DILocation(line: 67, column: 7, scope: !10554)
!10578 = !DILocation(line: 68, column: 5, scope: !10576)
!10579 = !DILocation(line: 69, column: 7, scope: !10580)
!10580 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 69, column: 7)
!10581 = !DILocation(line: 69, column: 7, scope: !10554)
!10582 = !DILocation(line: 70, column: 5, scope: !10580)
!10583 = !DILocation(line: 73, column: 7, scope: !10584)
!10584 = distinct !DILexicalBlock(scope: !10554, file: !10487, line: 73, column: 7)
!10585 = !DILocation(line: 73, column: 7, scope: !10554)
!10586 = !DILocation(line: 74, column: 5, scope: !10584)
!10587 = !DILocation(line: 90, column: 3, scope: !10554)
!10588 = !DILocation(line: 91, column: 1, scope: !10554)
!10589 = distinct !DISubprogram(name: "filemodestring", scope: !10487, file: !10487, line: 166, type: !10590, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1553, retainedNodes: !152)
!10590 = !DISubroutineType(types: !10591)
!10591 = !{null, !10592, !143}
!10592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10593, size: 64)
!10593 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10594)
!10594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !10595)
!10595 = !{!10596, !10597, !10598, !10599, !10600, !10601, !10602, !10603, !10604, !10605, !10606, !10607, !10612, !10613, !10614}
!10596 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !10594, file: !192, line: 48, baseType: !195, size: 64)
!10597 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !10594, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!10598 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !10594, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!10599 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !10594, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!10600 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !10594, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!10601 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !10594, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!10602 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !10594, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!10603 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !10594, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!10604 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !10594, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!10605 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !10594, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!10606 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !10594, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!10607 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !10594, file: !192, line: 91, baseType: !10608, size: 128, offset: 576)
!10608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !10609)
!10609 = !{!10610, !10611}
!10610 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !10608, file: !215, line: 11, baseType: !164, size: 64)
!10611 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !10608, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!10612 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !10594, file: !192, line: 92, baseType: !10608, size: 128, offset: 704)
!10613 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !10594, file: !192, line: 93, baseType: !10608, size: 128, offset: 832)
!10614 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !10594, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!10615 = !DILocalVariable(name: "statp", arg: 1, scope: !10589, file: !10487, line: 166, type: !10592)
!10616 = !DILocation(line: 166, column: 36, scope: !10589)
!10617 = !DILocalVariable(name: "str", arg: 2, scope: !10589, file: !10487, line: 166, type: !143)
!10618 = !DILocation(line: 166, column: 49, scope: !10589)
!10619 = !DILocation(line: 168, column: 12, scope: !10589)
!10620 = !DILocation(line: 168, column: 19, scope: !10589)
!10621 = !DILocation(line: 168, column: 28, scope: !10589)
!10622 = !DILocation(line: 168, column: 3, scope: !10589)
!10623 = !DILocation(line: 170, column: 7, scope: !10624)
!10624 = distinct !DILexicalBlock(scope: !10589, file: !10487, line: 170, column: 7)
!10625 = !DILocation(line: 170, column: 7, scope: !10589)
!10626 = !DILocation(line: 171, column: 5, scope: !10624)
!10627 = !DILocation(line: 171, column: 12, scope: !10624)
!10628 = !DILocation(line: 174, column: 12, scope: !10629)
!10629 = distinct !DILexicalBlock(scope: !10630, file: !10487, line: 174, column: 12)
!10630 = distinct !DILexicalBlock(scope: !10624, file: !10487, line: 172, column: 12)
!10631 = !DILocation(line: 174, column: 12, scope: !10630)
!10632 = !DILocation(line: 175, column: 5, scope: !10629)
!10633 = !DILocation(line: 175, column: 12, scope: !10629)
!10634 = !DILocation(line: 176, column: 12, scope: !10635)
!10635 = distinct !DILexicalBlock(scope: !10629, file: !10487, line: 176, column: 12)
!10636 = !DILocation(line: 176, column: 12, scope: !10629)
!10637 = !DILocation(line: 177, column: 5, scope: !10635)
!10638 = !DILocation(line: 177, column: 12, scope: !10635)
!10639 = !DILocation(line: 180, column: 1, scope: !10589)
!10640 = distinct !DISubprogram(name: "file_name_concat", scope: !10641, file: !10641, line: 35, type: !10642, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1556, retainedNodes: !152)
!10641 = !DIFile(filename: "lib/filenamecat.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10642 = !DISubroutineType(types: !10643)
!10643 = !{!143, !146, !146, !142}
!10644 = !DILocalVariable(name: "dir", arg: 1, scope: !10640, file: !10641, line: 35, type: !146)
!10645 = !DILocation(line: 35, column: 31, scope: !10640)
!10646 = !DILocalVariable(name: "base", arg: 2, scope: !10640, file: !10641, line: 35, type: !146)
!10647 = !DILocation(line: 35, column: 48, scope: !10640)
!10648 = !DILocalVariable(name: "base_in_result", arg: 3, scope: !10640, file: !10641, line: 35, type: !142)
!10649 = !DILocation(line: 35, column: 61, scope: !10640)
!10650 = !DILocalVariable(name: "p", scope: !10640, file: !10641, line: 37, type: !143)
!10651 = !DILocation(line: 37, column: 9, scope: !10640)
!10652 = !DILocation(line: 37, column: 32, scope: !10640)
!10653 = !DILocation(line: 37, column: 37, scope: !10640)
!10654 = !DILocation(line: 37, column: 43, scope: !10640)
!10655 = !DILocation(line: 37, column: 13, scope: !10640)
!10656 = !DILocation(line: 38, column: 7, scope: !10657)
!10657 = distinct !DILexicalBlock(scope: !10640, file: !10641, line: 38, column: 7)
!10658 = !DILocation(line: 38, column: 9, scope: !10657)
!10659 = !DILocation(line: 38, column: 7, scope: !10640)
!10660 = !DILocation(line: 39, column: 5, scope: !10657)
!10661 = !DILocation(line: 40, column: 10, scope: !10640)
!10662 = !DILocation(line: 40, column: 3, scope: !10640)
!10663 = distinct !DISubprogram(name: "mfile_name_concat", scope: !10664, file: !10664, line: 47, type: !10642, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1559, retainedNodes: !152)
!10664 = !DIFile(filename: "lib/filenamecat-lgpl.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10665 = !DILocalVariable(name: "dir", arg: 1, scope: !10663, file: !10664, line: 47, type: !146)
!10666 = !DILocation(line: 47, column: 32, scope: !10663)
!10667 = !DILocalVariable(name: "base", arg: 2, scope: !10663, file: !10664, line: 47, type: !146)
!10668 = !DILocation(line: 47, column: 49, scope: !10663)
!10669 = !DILocalVariable(name: "base_in_result", arg: 3, scope: !10663, file: !10664, line: 47, type: !142)
!10670 = !DILocation(line: 47, column: 62, scope: !10663)
!10671 = !DILocalVariable(name: "dirbase", scope: !10663, file: !10664, line: 49, type: !146)
!10672 = !DILocation(line: 49, column: 15, scope: !10663)
!10673 = !DILocation(line: 49, column: 41, scope: !10663)
!10674 = !DILocation(line: 49, column: 25, scope: !10663)
!10675 = !DILocalVariable(name: "dirbaselen", scope: !10663, file: !10664, line: 50, type: !149)
!10676 = !DILocation(line: 50, column: 10, scope: !10663)
!10677 = !DILocation(line: 50, column: 33, scope: !10663)
!10678 = !DILocation(line: 50, column: 23, scope: !10663)
!10679 = !DILocalVariable(name: "dirlen", scope: !10663, file: !10664, line: 51, type: !149)
!10680 = !DILocation(line: 51, column: 10, scope: !10663)
!10681 = !DILocation(line: 51, column: 19, scope: !10663)
!10682 = !DILocation(line: 51, column: 29, scope: !10663)
!10683 = !DILocation(line: 51, column: 27, scope: !10663)
!10684 = !DILocation(line: 51, column: 35, scope: !10663)
!10685 = !DILocation(line: 51, column: 33, scope: !10663)
!10686 = !DILocalVariable(name: "baselen", scope: !10663, file: !10664, line: 52, type: !149)
!10687 = !DILocation(line: 52, column: 10, scope: !10663)
!10688 = !DILocation(line: 52, column: 28, scope: !10663)
!10689 = !DILocation(line: 52, column: 20, scope: !10663)
!10690 = !DILocalVariable(name: "sep", scope: !10663, file: !10664, line: 53, type: !144)
!10691 = !DILocation(line: 53, column: 8, scope: !10663)
!10692 = !DILocation(line: 54, column: 7, scope: !10693)
!10693 = distinct !DILexicalBlock(scope: !10663, file: !10664, line: 54, column: 7)
!10694 = !DILocation(line: 54, column: 7, scope: !10663)
!10695 = !DILocation(line: 57, column: 13, scope: !10696)
!10696 = distinct !DILexicalBlock(scope: !10697, file: !10664, line: 57, column: 11)
!10697 = distinct !DILexicalBlock(scope: !10693, file: !10664, line: 55, column: 5)
!10698 = !DILocation(line: 57, column: 39, scope: !10696)
!10699 = !DILocation(line: 57, column: 44, scope: !10696)
!10700 = !DILocation(line: 57, column: 11, scope: !10697)
!10701 = !DILocation(line: 58, column: 13, scope: !10696)
!10702 = !DILocation(line: 58, column: 9, scope: !10696)
!10703 = !DILocation(line: 59, column: 5, scope: !10697)
!10704 = !DILocation(line: 60, column: 12, scope: !10705)
!10705 = distinct !DILexicalBlock(scope: !10693, file: !10664, line: 60, column: 12)
!10706 = !DILocation(line: 60, column: 12, scope: !10693)
!10707 = !DILocation(line: 67, column: 11, scope: !10708)
!10708 = distinct !DILexicalBlock(scope: !10705, file: !10664, line: 61, column: 5)
!10709 = !DILocation(line: 68, column: 5, scope: !10708)
!10710 = !DILocalVariable(name: "p_concat", scope: !10663, file: !10664, line: 70, type: !143)
!10711 = !DILocation(line: 70, column: 9, scope: !10663)
!10712 = !DILocation(line: 70, column: 28, scope: !10663)
!10713 = !DILocation(line: 70, column: 38, scope: !10663)
!10714 = !DILocation(line: 70, column: 42, scope: !10663)
!10715 = !DILocation(line: 70, column: 37, scope: !10663)
!10716 = !DILocation(line: 70, column: 35, scope: !10663)
!10717 = !DILocation(line: 70, column: 54, scope: !10663)
!10718 = !DILocation(line: 70, column: 52, scope: !10663)
!10719 = !DILocation(line: 70, column: 62, scope: !10663)
!10720 = !DILocation(line: 70, column: 20, scope: !10663)
!10721 = !DILocalVariable(name: "p", scope: !10663, file: !10664, line: 71, type: !143)
!10722 = !DILocation(line: 71, column: 9, scope: !10663)
!10723 = !DILocation(line: 73, column: 7, scope: !10724)
!10724 = distinct !DILexicalBlock(scope: !10663, file: !10664, line: 73, column: 7)
!10725 = !DILocation(line: 73, column: 16, scope: !10724)
!10726 = !DILocation(line: 73, column: 7, scope: !10663)
!10727 = !DILocation(line: 74, column: 5, scope: !10724)
!10728 = !DILocation(line: 76, column: 16, scope: !10663)
!10729 = !DILocation(line: 76, column: 26, scope: !10663)
!10730 = !DILocation(line: 76, column: 31, scope: !10663)
!10731 = !DILocation(line: 76, column: 7, scope: !10663)
!10732 = !DILocation(line: 76, column: 5, scope: !10663)
!10733 = !DILocation(line: 77, column: 8, scope: !10663)
!10734 = !DILocation(line: 77, column: 4, scope: !10663)
!10735 = !DILocation(line: 77, column: 6, scope: !10663)
!10736 = !DILocation(line: 78, column: 8, scope: !10663)
!10737 = !DILocation(line: 78, column: 12, scope: !10663)
!10738 = !DILocation(line: 78, column: 5, scope: !10663)
!10739 = !DILocation(line: 80, column: 7, scope: !10740)
!10740 = distinct !DILexicalBlock(scope: !10663, file: !10664, line: 80, column: 7)
!10741 = !DILocation(line: 80, column: 7, scope: !10663)
!10742 = !DILocation(line: 81, column: 23, scope: !10740)
!10743 = !DILocation(line: 81, column: 6, scope: !10740)
!10744 = !DILocation(line: 81, column: 21, scope: !10740)
!10745 = !DILocation(line: 81, column: 5, scope: !10740)
!10746 = !DILocation(line: 83, column: 16, scope: !10663)
!10747 = !DILocation(line: 83, column: 19, scope: !10663)
!10748 = !DILocation(line: 83, column: 25, scope: !10663)
!10749 = !DILocation(line: 83, column: 7, scope: !10663)
!10750 = !DILocation(line: 83, column: 5, scope: !10663)
!10751 = !DILocation(line: 84, column: 4, scope: !10663)
!10752 = !DILocation(line: 84, column: 6, scope: !10663)
!10753 = !DILocation(line: 86, column: 10, scope: !10663)
!10754 = !DILocation(line: 86, column: 3, scope: !10663)
!10755 = !DILocation(line: 87, column: 1, scope: !10663)
!10756 = distinct !DISubprogram(name: "filevercmp", scope: !10757, file: !10757, line: 125, type: !7725, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1562, retainedNodes: !152)
!10757 = !DIFile(filename: "lib/filevercmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!10758 = !DILocalVariable(name: "s1", arg: 1, scope: !10756, file: !10757, line: 125, type: !146)
!10759 = !DILocation(line: 125, column: 25, scope: !10756)
!10760 = !DILocalVariable(name: "s2", arg: 2, scope: !10756, file: !10757, line: 125, type: !146)
!10761 = !DILocation(line: 125, column: 41, scope: !10756)
!10762 = !DILocalVariable(name: "s1_pos", scope: !10756, file: !10757, line: 127, type: !146)
!10763 = !DILocation(line: 127, column: 15, scope: !10756)
!10764 = !DILocalVariable(name: "s2_pos", scope: !10756, file: !10757, line: 128, type: !146)
!10765 = !DILocation(line: 128, column: 15, scope: !10756)
!10766 = !DILocalVariable(name: "s1_suffix", scope: !10756, file: !10757, line: 129, type: !146)
!10767 = !DILocation(line: 129, column: 15, scope: !10756)
!10768 = !DILocalVariable(name: "s2_suffix", scope: !10756, file: !10757, line: 129, type: !146)
!10769 = !DILocation(line: 129, column: 27, scope: !10756)
!10770 = !DILocalVariable(name: "s1_len", scope: !10756, file: !10757, line: 130, type: !149)
!10771 = !DILocation(line: 130, column: 10, scope: !10756)
!10772 = !DILocalVariable(name: "s2_len", scope: !10756, file: !10757, line: 130, type: !149)
!10773 = !DILocation(line: 130, column: 18, scope: !10756)
!10774 = !DILocalVariable(name: "result", scope: !10756, file: !10757, line: 131, type: !27)
!10775 = !DILocation(line: 131, column: 7, scope: !10756)
!10776 = !DILocalVariable(name: "simple_cmp", scope: !10756, file: !10757, line: 134, type: !27)
!10777 = !DILocation(line: 134, column: 7, scope: !10756)
!10778 = !DILocation(line: 134, column: 28, scope: !10756)
!10779 = !DILocation(line: 134, column: 32, scope: !10756)
!10780 = !DILocation(line: 134, column: 20, scope: !10756)
!10781 = !DILocation(line: 135, column: 7, scope: !10782)
!10782 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 135, column: 7)
!10783 = !DILocation(line: 135, column: 18, scope: !10782)
!10784 = !DILocation(line: 135, column: 7, scope: !10756)
!10785 = !DILocation(line: 136, column: 5, scope: !10782)
!10786 = !DILocation(line: 139, column: 9, scope: !10787)
!10787 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 139, column: 7)
!10788 = !DILocation(line: 139, column: 8, scope: !10787)
!10789 = !DILocation(line: 139, column: 7, scope: !10756)
!10790 = !DILocation(line: 140, column: 5, scope: !10787)
!10791 = !DILocation(line: 141, column: 9, scope: !10792)
!10792 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 141, column: 7)
!10793 = !DILocation(line: 141, column: 8, scope: !10792)
!10794 = !DILocation(line: 141, column: 7, scope: !10756)
!10795 = !DILocation(line: 142, column: 5, scope: !10792)
!10796 = !DILocation(line: 143, column: 25, scope: !10797)
!10797 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 143, column: 7)
!10798 = !DILocation(line: 143, column: 12, scope: !10797)
!10799 = !DILocation(line: 143, column: 9, scope: !10797)
!10800 = !DILocation(line: 143, column: 7, scope: !10756)
!10801 = !DILocation(line: 144, column: 5, scope: !10797)
!10802 = !DILocation(line: 145, column: 25, scope: !10803)
!10803 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 145, column: 7)
!10804 = !DILocation(line: 145, column: 12, scope: !10803)
!10805 = !DILocation(line: 145, column: 9, scope: !10803)
!10806 = !DILocation(line: 145, column: 7, scope: !10756)
!10807 = !DILocation(line: 146, column: 5, scope: !10803)
!10808 = !DILocation(line: 147, column: 26, scope: !10809)
!10809 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 147, column: 7)
!10810 = !DILocation(line: 147, column: 12, scope: !10809)
!10811 = !DILocation(line: 147, column: 9, scope: !10809)
!10812 = !DILocation(line: 147, column: 7, scope: !10756)
!10813 = !DILocation(line: 148, column: 5, scope: !10809)
!10814 = !DILocation(line: 149, column: 26, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 149, column: 7)
!10816 = !DILocation(line: 149, column: 12, scope: !10815)
!10817 = !DILocation(line: 149, column: 9, scope: !10815)
!10818 = !DILocation(line: 149, column: 7, scope: !10756)
!10819 = !DILocation(line: 150, column: 5, scope: !10815)
!10820 = !DILocation(line: 153, column: 8, scope: !10821)
!10821 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 153, column: 7)
!10822 = !DILocation(line: 153, column: 7, scope: !10821)
!10823 = !DILocation(line: 153, column: 11, scope: !10821)
!10824 = !DILocation(line: 153, column: 18, scope: !10821)
!10825 = !DILocation(line: 153, column: 22, scope: !10821)
!10826 = !DILocation(line: 153, column: 21, scope: !10821)
!10827 = !DILocation(line: 153, column: 25, scope: !10821)
!10828 = !DILocation(line: 153, column: 7, scope: !10756)
!10829 = !DILocation(line: 154, column: 5, scope: !10821)
!10830 = !DILocation(line: 155, column: 8, scope: !10831)
!10831 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 155, column: 7)
!10832 = !DILocation(line: 155, column: 7, scope: !10831)
!10833 = !DILocation(line: 155, column: 11, scope: !10831)
!10834 = !DILocation(line: 155, column: 18, scope: !10831)
!10835 = !DILocation(line: 155, column: 22, scope: !10831)
!10836 = !DILocation(line: 155, column: 21, scope: !10831)
!10837 = !DILocation(line: 155, column: 25, scope: !10831)
!10838 = !DILocation(line: 155, column: 7, scope: !10756)
!10839 = !DILocation(line: 156, column: 5, scope: !10831)
!10840 = !DILocation(line: 157, column: 8, scope: !10841)
!10841 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 157, column: 7)
!10842 = !DILocation(line: 157, column: 7, scope: !10841)
!10843 = !DILocation(line: 157, column: 11, scope: !10841)
!10844 = !DILocation(line: 157, column: 18, scope: !10841)
!10845 = !DILocation(line: 157, column: 22, scope: !10841)
!10846 = !DILocation(line: 157, column: 21, scope: !10841)
!10847 = !DILocation(line: 157, column: 25, scope: !10841)
!10848 = !DILocation(line: 157, column: 7, scope: !10756)
!10849 = !DILocation(line: 159, column: 9, scope: !10850)
!10850 = distinct !DILexicalBlock(scope: !10841, file: !10757, line: 158, column: 5)
!10851 = !DILocation(line: 160, column: 9, scope: !10850)
!10852 = !DILocation(line: 161, column: 5, scope: !10850)
!10853 = !DILocation(line: 164, column: 12, scope: !10756)
!10854 = !DILocation(line: 164, column: 10, scope: !10756)
!10855 = !DILocation(line: 165, column: 12, scope: !10756)
!10856 = !DILocation(line: 165, column: 10, scope: !10756)
!10857 = !DILocation(line: 166, column: 15, scope: !10756)
!10858 = !DILocation(line: 166, column: 13, scope: !10756)
!10859 = !DILocation(line: 167, column: 15, scope: !10756)
!10860 = !DILocation(line: 167, column: 13, scope: !10756)
!10861 = !DILocation(line: 168, column: 13, scope: !10756)
!10862 = !DILocation(line: 168, column: 25, scope: !10756)
!10863 = !DILocation(line: 168, column: 37, scope: !10756)
!10864 = !DILocation(line: 168, column: 47, scope: !10756)
!10865 = !DILocation(line: 168, column: 45, scope: !10756)
!10866 = !DILocation(line: 168, column: 10, scope: !10756)
!10867 = !DILocation(line: 169, column: 13, scope: !10756)
!10868 = !DILocation(line: 169, column: 25, scope: !10756)
!10869 = !DILocation(line: 169, column: 37, scope: !10756)
!10870 = !DILocation(line: 169, column: 47, scope: !10756)
!10871 = !DILocation(line: 169, column: 45, scope: !10756)
!10872 = !DILocation(line: 169, column: 10, scope: !10756)
!10873 = !DILocation(line: 172, column: 8, scope: !10874)
!10874 = distinct !DILexicalBlock(scope: !10756, file: !10757, line: 172, column: 7)
!10875 = !DILocation(line: 172, column: 18, scope: !10874)
!10876 = !DILocation(line: 172, column: 21, scope: !10874)
!10877 = !DILocation(line: 172, column: 32, scope: !10874)
!10878 = !DILocation(line: 172, column: 36, scope: !10874)
!10879 = !DILocation(line: 172, column: 46, scope: !10874)
!10880 = !DILocation(line: 172, column: 43, scope: !10874)
!10881 = !DILocation(line: 173, column: 7, scope: !10874)
!10882 = !DILocation(line: 173, column: 24, scope: !10874)
!10883 = !DILocation(line: 173, column: 28, scope: !10874)
!10884 = !DILocation(line: 173, column: 32, scope: !10874)
!10885 = !DILocation(line: 173, column: 15, scope: !10874)
!10886 = !DILocation(line: 173, column: 12, scope: !10874)
!10887 = !DILocation(line: 172, column: 7, scope: !10756)
!10888 = !DILocation(line: 175, column: 16, scope: !10889)
!10889 = distinct !DILexicalBlock(scope: !10874, file: !10757, line: 174, column: 5)
!10890 = !DILocation(line: 175, column: 25, scope: !10889)
!10891 = !DILocation(line: 175, column: 23, scope: !10889)
!10892 = !DILocation(line: 175, column: 14, scope: !10889)
!10893 = !DILocation(line: 176, column: 16, scope: !10889)
!10894 = !DILocation(line: 176, column: 25, scope: !10889)
!10895 = !DILocation(line: 176, column: 23, scope: !10889)
!10896 = !DILocation(line: 176, column: 14, scope: !10889)
!10897 = !DILocation(line: 177, column: 5, scope: !10889)
!10898 = !DILocation(line: 179, column: 23, scope: !10756)
!10899 = !DILocation(line: 179, column: 27, scope: !10756)
!10900 = !DILocation(line: 179, column: 35, scope: !10756)
!10901 = !DILocation(line: 179, column: 39, scope: !10756)
!10902 = !DILocation(line: 179, column: 12, scope: !10756)
!10903 = !DILocation(line: 179, column: 10, scope: !10756)
!10904 = !DILocation(line: 180, column: 10, scope: !10756)
!10905 = !DILocation(line: 180, column: 17, scope: !10756)
!10906 = !DILocation(line: 180, column: 24, scope: !10756)
!10907 = !DILocation(line: 180, column: 37, scope: !10756)
!10908 = !DILocation(line: 180, column: 3, scope: !10756)
!10909 = !DILocation(line: 181, column: 1, scope: !10756)
!10910 = distinct !DISubprogram(name: "match_suffix", scope: !10757, file: !10757, line: 34, type: !10911, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1562, retainedNodes: !152)
!10911 = !DISubroutineType(types: !10912)
!10912 = !{!146, !145}
!10913 = !DILocalVariable(name: "str", arg: 1, scope: !10910, file: !10757, line: 34, type: !145)
!10914 = !DILocation(line: 34, column: 28, scope: !10910)
!10915 = !DILocalVariable(name: "match", scope: !10910, file: !10757, line: 36, type: !146)
!10916 = !DILocation(line: 36, column: 15, scope: !10910)
!10917 = !DILocalVariable(name: "read_alpha", scope: !10910, file: !10757, line: 37, type: !141)
!10918 = !DILocation(line: 37, column: 8, scope: !10910)
!10919 = !DILocation(line: 38, column: 3, scope: !10910)
!10920 = !DILocation(line: 38, column: 12, scope: !10910)
!10921 = !DILocation(line: 38, column: 11, scope: !10910)
!10922 = !DILocation(line: 38, column: 10, scope: !10910)
!10923 = !DILocation(line: 40, column: 11, scope: !10924)
!10924 = distinct !DILexicalBlock(scope: !10925, file: !10757, line: 40, column: 11)
!10925 = distinct !DILexicalBlock(scope: !10910, file: !10757, line: 39, column: 5)
!10926 = !DILocation(line: 40, column: 11, scope: !10925)
!10927 = !DILocation(line: 42, column: 22, scope: !10928)
!10928 = distinct !DILexicalBlock(scope: !10924, file: !10757, line: 41, column: 9)
!10929 = !DILocation(line: 43, column: 29, scope: !10930)
!10930 = distinct !DILexicalBlock(scope: !10928, file: !10757, line: 43, column: 15)
!10931 = !DILocation(line: 43, column: 28, scope: !10930)
!10932 = !DILocation(line: 43, column: 27, scope: !10930)
!10933 = !DILocation(line: 43, column: 16, scope: !10930)
!10934 = !DILocation(line: 43, column: 34, scope: !10930)
!10935 = !DILocation(line: 43, column: 46, scope: !10930)
!10936 = !DILocation(line: 43, column: 45, scope: !10930)
!10937 = !DILocation(line: 43, column: 44, scope: !10930)
!10938 = !DILocation(line: 43, column: 41, scope: !10930)
!10939 = !DILocation(line: 43, column: 15, scope: !10928)
!10940 = !DILocation(line: 44, column: 19, scope: !10930)
!10941 = !DILocation(line: 44, column: 13, scope: !10930)
!10942 = !DILocation(line: 45, column: 9, scope: !10928)
!10943 = !DILocation(line: 46, column: 25, scope: !10944)
!10944 = distinct !DILexicalBlock(scope: !10924, file: !10757, line: 46, column: 16)
!10945 = !DILocation(line: 46, column: 24, scope: !10944)
!10946 = !DILocation(line: 46, column: 23, scope: !10944)
!10947 = !DILocation(line: 46, column: 20, scope: !10944)
!10948 = !DILocation(line: 46, column: 16, scope: !10924)
!10949 = !DILocation(line: 48, column: 22, scope: !10950)
!10950 = distinct !DILexicalBlock(scope: !10944, file: !10757, line: 47, column: 9)
!10951 = !DILocation(line: 49, column: 16, scope: !10952)
!10952 = distinct !DILexicalBlock(scope: !10950, file: !10757, line: 49, column: 15)
!10953 = !DILocation(line: 49, column: 15, scope: !10950)
!10954 = !DILocation(line: 50, column: 22, scope: !10952)
!10955 = !DILocation(line: 50, column: 21, scope: !10952)
!10956 = !DILocation(line: 50, column: 19, scope: !10952)
!10957 = !DILocation(line: 50, column: 13, scope: !10952)
!10958 = !DILocation(line: 51, column: 9, scope: !10950)
!10959 = !DILocation(line: 52, column: 30, scope: !10960)
!10960 = distinct !DILexicalBlock(scope: !10944, file: !10757, line: 52, column: 16)
!10961 = !DILocation(line: 52, column: 29, scope: !10960)
!10962 = !DILocation(line: 52, column: 28, scope: !10960)
!10963 = !DILocation(line: 52, column: 17, scope: !10960)
!10964 = !DILocation(line: 52, column: 35, scope: !10960)
!10965 = !DILocation(line: 52, column: 47, scope: !10960)
!10966 = !DILocation(line: 52, column: 46, scope: !10960)
!10967 = !DILocation(line: 52, column: 45, scope: !10960)
!10968 = !DILocation(line: 52, column: 42, scope: !10960)
!10969 = !DILocation(line: 52, column: 16, scope: !10944)
!10970 = !DILocation(line: 53, column: 15, scope: !10960)
!10971 = !DILocation(line: 53, column: 9, scope: !10960)
!10972 = !DILocation(line: 54, column: 9, scope: !10925)
!10973 = !DILocation(line: 54, column: 13, scope: !10925)
!10974 = distinct !{!10974, !10919, !10975}
!10975 = !DILocation(line: 55, column: 5, scope: !10910)
!10976 = !DILocation(line: 56, column: 10, scope: !10910)
!10977 = !DILocation(line: 56, column: 3, scope: !10910)
!10978 = distinct !DISubprogram(name: "verrevcmp", scope: !10757, file: !10757, line: 84, type: !10979, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1562, retainedNodes: !152)
!10979 = !DISubroutineType(types: !10980)
!10980 = !{!27, !146, !149, !146, !149}
!10981 = !DILocalVariable(name: "s1", arg: 1, scope: !10978, file: !10757, line: 84, type: !146)
!10982 = !DILocation(line: 84, column: 24, scope: !10978)
!10983 = !DILocalVariable(name: "s1_len", arg: 2, scope: !10978, file: !10757, line: 84, type: !149)
!10984 = !DILocation(line: 84, column: 35, scope: !10978)
!10985 = !DILocalVariable(name: "s2", arg: 3, scope: !10978, file: !10757, line: 84, type: !146)
!10986 = !DILocation(line: 84, column: 55, scope: !10978)
!10987 = !DILocalVariable(name: "s2_len", arg: 4, scope: !10978, file: !10757, line: 84, type: !149)
!10988 = !DILocation(line: 84, column: 66, scope: !10978)
!10989 = !DILocalVariable(name: "s1_pos", scope: !10978, file: !10757, line: 86, type: !149)
!10990 = !DILocation(line: 86, column: 10, scope: !10978)
!10991 = !DILocalVariable(name: "s2_pos", scope: !10978, file: !10757, line: 87, type: !149)
!10992 = !DILocation(line: 87, column: 10, scope: !10978)
!10993 = !DILocation(line: 88, column: 3, scope: !10978)
!10994 = !DILocation(line: 88, column: 10, scope: !10978)
!10995 = !DILocation(line: 88, column: 19, scope: !10978)
!10996 = !DILocation(line: 88, column: 17, scope: !10978)
!10997 = !DILocation(line: 88, column: 26, scope: !10978)
!10998 = !DILocation(line: 88, column: 29, scope: !10978)
!10999 = !DILocation(line: 88, column: 38, scope: !10978)
!11000 = !DILocation(line: 88, column: 36, scope: !10978)
!11001 = !DILocalVariable(name: "first_diff", scope: !11002, file: !10757, line: 90, type: !27)
!11002 = distinct !DILexicalBlock(scope: !10978, file: !10757, line: 89, column: 5)
!11003 = !DILocation(line: 90, column: 11, scope: !11002)
!11004 = !DILocation(line: 91, column: 7, scope: !11002)
!11005 = !DILocation(line: 91, column: 15, scope: !11002)
!11006 = !DILocation(line: 91, column: 24, scope: !11002)
!11007 = !DILocation(line: 91, column: 22, scope: !11002)
!11008 = !DILocation(line: 91, column: 31, scope: !11002)
!11009 = !DILocation(line: 91, column: 46, scope: !11002)
!11010 = !DILocation(line: 91, column: 49, scope: !11002)
!11011 = !DILocation(line: 91, column: 35, scope: !11002)
!11012 = !DILocation(line: 92, column: 14, scope: !11002)
!11013 = !DILocation(line: 92, column: 18, scope: !11002)
!11014 = !DILocation(line: 92, column: 27, scope: !11002)
!11015 = !DILocation(line: 92, column: 25, scope: !11002)
!11016 = !DILocation(line: 92, column: 34, scope: !11002)
!11017 = !DILocation(line: 92, column: 49, scope: !11002)
!11018 = !DILocation(line: 92, column: 52, scope: !11002)
!11019 = !DILocation(line: 92, column: 38, scope: !11002)
!11020 = !DILocation(line: 92, column: 37, scope: !11002)
!11021 = !DILocation(line: 0, scope: !11002)
!11022 = !DILocalVariable(name: "s1_c", scope: !11023, file: !10757, line: 94, type: !27)
!11023 = distinct !DILexicalBlock(scope: !11002, file: !10757, line: 93, column: 9)
!11024 = !DILocation(line: 94, column: 15, scope: !11023)
!11025 = !DILocation(line: 94, column: 23, scope: !11023)
!11026 = !DILocation(line: 94, column: 33, scope: !11023)
!11027 = !DILocation(line: 94, column: 30, scope: !11023)
!11028 = !DILocation(line: 94, column: 22, scope: !11023)
!11029 = !DILocation(line: 94, column: 54, scope: !11023)
!11030 = !DILocation(line: 94, column: 57, scope: !11023)
!11031 = !DILocation(line: 94, column: 47, scope: !11023)
!11032 = !DILocalVariable(name: "s2_c", scope: !11023, file: !10757, line: 95, type: !27)
!11033 = !DILocation(line: 95, column: 15, scope: !11023)
!11034 = !DILocation(line: 95, column: 23, scope: !11023)
!11035 = !DILocation(line: 95, column: 33, scope: !11023)
!11036 = !DILocation(line: 95, column: 30, scope: !11023)
!11037 = !DILocation(line: 95, column: 22, scope: !11023)
!11038 = !DILocation(line: 95, column: 54, scope: !11023)
!11039 = !DILocation(line: 95, column: 57, scope: !11023)
!11040 = !DILocation(line: 95, column: 47, scope: !11023)
!11041 = !DILocation(line: 96, column: 15, scope: !11042)
!11042 = distinct !DILexicalBlock(scope: !11023, file: !10757, line: 96, column: 15)
!11043 = !DILocation(line: 96, column: 23, scope: !11042)
!11044 = !DILocation(line: 96, column: 20, scope: !11042)
!11045 = !DILocation(line: 96, column: 15, scope: !11023)
!11046 = !DILocation(line: 97, column: 20, scope: !11042)
!11047 = !DILocation(line: 97, column: 27, scope: !11042)
!11048 = !DILocation(line: 97, column: 25, scope: !11042)
!11049 = !DILocation(line: 97, column: 13, scope: !11042)
!11050 = !DILocation(line: 98, column: 17, scope: !11023)
!11051 = !DILocation(line: 99, column: 17, scope: !11023)
!11052 = distinct !{!11052, !11004, !11053}
!11053 = !DILocation(line: 100, column: 9, scope: !11002)
!11054 = !DILocation(line: 101, column: 7, scope: !11002)
!11055 = !DILocation(line: 101, column: 14, scope: !11002)
!11056 = !DILocation(line: 101, column: 17, scope: !11002)
!11057 = !DILocation(line: 101, column: 25, scope: !11002)
!11058 = !DILocation(line: 102, column: 15, scope: !11002)
!11059 = distinct !{!11059, !11054, !11058}
!11060 = !DILocation(line: 103, column: 7, scope: !11002)
!11061 = !DILocation(line: 103, column: 14, scope: !11002)
!11062 = !DILocation(line: 103, column: 17, scope: !11002)
!11063 = !DILocation(line: 103, column: 25, scope: !11002)
!11064 = !DILocation(line: 104, column: 15, scope: !11002)
!11065 = distinct !{!11065, !11060, !11064}
!11066 = !DILocation(line: 105, column: 7, scope: !11002)
!11067 = !DILocation(line: 105, column: 25, scope: !11002)
!11068 = !DILocation(line: 105, column: 28, scope: !11002)
!11069 = !DILocation(line: 105, column: 14, scope: !11002)
!11070 = !DILocation(line: 105, column: 37, scope: !11002)
!11071 = !DILocation(line: 105, column: 51, scope: !11002)
!11072 = !DILocation(line: 105, column: 54, scope: !11002)
!11073 = !DILocation(line: 105, column: 40, scope: !11002)
!11074 = !DILocation(line: 107, column: 16, scope: !11075)
!11075 = distinct !DILexicalBlock(scope: !11076, file: !10757, line: 107, column: 15)
!11076 = distinct !DILexicalBlock(scope: !11002, file: !10757, line: 106, column: 9)
!11077 = !DILocation(line: 107, column: 15, scope: !11076)
!11078 = !DILocation(line: 108, column: 26, scope: !11075)
!11079 = !DILocation(line: 108, column: 29, scope: !11075)
!11080 = !DILocation(line: 108, column: 39, scope: !11075)
!11081 = !DILocation(line: 108, column: 42, scope: !11075)
!11082 = !DILocation(line: 108, column: 37, scope: !11075)
!11083 = !DILocation(line: 108, column: 24, scope: !11075)
!11084 = !DILocation(line: 108, column: 13, scope: !11075)
!11085 = !DILocation(line: 109, column: 17, scope: !11076)
!11086 = !DILocation(line: 110, column: 17, scope: !11076)
!11087 = distinct !{!11087, !11066, !11088}
!11088 = !DILocation(line: 111, column: 9, scope: !11002)
!11089 = !DILocation(line: 112, column: 22, scope: !11090)
!11090 = distinct !DILexicalBlock(scope: !11002, file: !10757, line: 112, column: 11)
!11091 = !DILocation(line: 112, column: 25, scope: !11090)
!11092 = !DILocation(line: 112, column: 11, scope: !11090)
!11093 = !DILocation(line: 112, column: 11, scope: !11002)
!11094 = !DILocation(line: 113, column: 9, scope: !11090)
!11095 = !DILocation(line: 114, column: 22, scope: !11096)
!11096 = distinct !DILexicalBlock(scope: !11002, file: !10757, line: 114, column: 11)
!11097 = !DILocation(line: 114, column: 25, scope: !11096)
!11098 = !DILocation(line: 114, column: 11, scope: !11096)
!11099 = !DILocation(line: 114, column: 11, scope: !11002)
!11100 = !DILocation(line: 115, column: 9, scope: !11096)
!11101 = !DILocation(line: 116, column: 11, scope: !11102)
!11102 = distinct !DILexicalBlock(scope: !11002, file: !10757, line: 116, column: 11)
!11103 = !DILocation(line: 116, column: 11, scope: !11002)
!11104 = !DILocation(line: 117, column: 16, scope: !11102)
!11105 = !DILocation(line: 117, column: 9, scope: !11102)
!11106 = distinct !{!11106, !10993, !11107}
!11107 = !DILocation(line: 118, column: 5, scope: !10978)
!11108 = !DILocation(line: 119, column: 3, scope: !10978)
!11109 = !DILocation(line: 120, column: 1, scope: !10978)
!11110 = distinct !DISubprogram(name: "order", scope: !10757, file: !10757, line: 61, type: !11111, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1562, retainedNodes: !152)
!11111 = !DISubroutineType(types: !11112)
!11112 = !{!27, !737}
!11113 = !DILocalVariable(name: "c", arg: 1, scope: !11110, file: !10757, line: 61, type: !737)
!11114 = !DILocation(line: 61, column: 22, scope: !11110)
!11115 = !DILocation(line: 63, column: 18, scope: !11116)
!11116 = distinct !DILexicalBlock(scope: !11110, file: !10757, line: 63, column: 7)
!11117 = !DILocation(line: 63, column: 7, scope: !11116)
!11118 = !DILocation(line: 63, column: 7, scope: !11110)
!11119 = !DILocation(line: 64, column: 5, scope: !11116)
!11120 = !DILocation(line: 65, column: 23, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !11116, file: !10757, line: 65, column: 12)
!11122 = !DILocation(line: 65, column: 12, scope: !11121)
!11123 = !DILocation(line: 65, column: 12, scope: !11116)
!11124 = !DILocation(line: 66, column: 12, scope: !11121)
!11125 = !DILocation(line: 66, column: 5, scope: !11121)
!11126 = !DILocation(line: 67, column: 12, scope: !11127)
!11127 = distinct !DILexicalBlock(scope: !11121, file: !10757, line: 67, column: 12)
!11128 = !DILocation(line: 67, column: 14, scope: !11127)
!11129 = !DILocation(line: 67, column: 12, scope: !11121)
!11130 = !DILocation(line: 68, column: 5, scope: !11127)
!11131 = !DILocation(line: 70, column: 18, scope: !11127)
!11132 = !DILocation(line: 70, column: 12, scope: !11127)
!11133 = !DILocation(line: 70, column: 20, scope: !11127)
!11134 = !DILocation(line: 70, column: 32, scope: !11127)
!11135 = !DILocation(line: 70, column: 5, scope: !11127)
!11136 = !DILocation(line: 71, column: 1, scope: !11110)
!11137 = distinct !DISubprogram(name: "gettime", scope: !11138, file: !11138, line: 29, type: !11139, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1565, retainedNodes: !152)
!11138 = !DIFile(filename: "lib/gettime.c", directory: "/home/mbarbar/software/coreutils-8.31")
!11139 = !DISubroutineType(types: !11140)
!11140 = !{null, !11141}
!11141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11142, size: 64)
!11142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !11143)
!11143 = !{!11144, !11145}
!11144 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !11142, file: !215, line: 11, baseType: !164, size: 64)
!11145 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !11142, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!11146 = !DILocalVariable(name: "ts", arg: 1, scope: !11137, file: !11138, line: 29, type: !11141)
!11147 = !DILocation(line: 29, column: 27, scope: !11137)
!11148 = !DILocation(line: 32, column: 34, scope: !11137)
!11149 = !DILocation(line: 32, column: 3, scope: !11137)
!11150 = !DILocation(line: 39, column: 1, scope: !11137)
!11151 = distinct !DISubprogram(name: "current_timespec", scope: !11138, file: !11138, line: 44, type: !11152, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1565, retainedNodes: !152)
!11152 = !DISubroutineType(types: !11153)
!11153 = !{!11142}
!11154 = !DILocalVariable(name: "ts", scope: !11151, file: !11138, line: 46, type: !11142)
!11155 = !DILocation(line: 46, column: 19, scope: !11151)
!11156 = !DILocation(line: 47, column: 3, scope: !11151)
!11157 = !DILocation(line: 48, column: 3, scope: !11151)
!11158 = distinct !DISubprogram(name: "hard_locale", scope: !11159, file: !11159, line: 38, type: !8052, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1567, retainedNodes: !152)
!11159 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/mbarbar/software/coreutils-8.31")
!11160 = !DILocalVariable(name: "category", arg: 1, scope: !11158, file: !11159, line: 38, type: !27)
!11161 = !DILocation(line: 38, column: 18, scope: !11158)
!11162 = !DILocalVariable(name: "hard", scope: !11158, file: !11159, line: 40, type: !141)
!11163 = !DILocation(line: 40, column: 8, scope: !11158)
!11164 = !DILocalVariable(name: "p", scope: !11158, file: !11159, line: 41, type: !146)
!11165 = !DILocation(line: 41, column: 15, scope: !11158)
!11166 = !DILocation(line: 41, column: 30, scope: !11158)
!11167 = !DILocation(line: 41, column: 19, scope: !11158)
!11168 = !DILocation(line: 43, column: 7, scope: !11169)
!11169 = distinct !DILexicalBlock(scope: !11158, file: !11159, line: 43, column: 7)
!11170 = !DILocation(line: 43, column: 7, scope: !11158)
!11171 = !DILocation(line: 47, column: 23, scope: !11172)
!11172 = distinct !DILexicalBlock(scope: !11173, file: !11159, line: 47, column: 15)
!11173 = distinct !DILexicalBlock(scope: !11174, file: !11159, line: 46, column: 9)
!11174 = distinct !DILexicalBlock(scope: !11175, file: !11159, line: 45, column: 11)
!11175 = distinct !DILexicalBlock(scope: !11169, file: !11159, line: 44, column: 5)
!11176 = !DILocation(line: 47, column: 15, scope: !11172)
!11177 = !DILocation(line: 47, column: 31, scope: !11172)
!11178 = !DILocation(line: 47, column: 36, scope: !11172)
!11179 = !DILocation(line: 47, column: 47, scope: !11172)
!11180 = !DILocation(line: 47, column: 39, scope: !11172)
!11181 = !DILocation(line: 47, column: 59, scope: !11172)
!11182 = !DILocation(line: 47, column: 15, scope: !11173)
!11183 = !DILocation(line: 48, column: 18, scope: !11172)
!11184 = !DILocation(line: 48, column: 13, scope: !11172)
!11185 = !DILocation(line: 69, column: 5, scope: !11175)
!11186 = !DILocation(line: 71, column: 10, scope: !11158)
!11187 = !DILocation(line: 71, column: 3, scope: !11158)
!11188 = distinct !DISubprogram(name: "hash_get_n_buckets", scope: !1198, file: !1198, line: 150, type: !11189, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11189 = !DISubroutineType(types: !11190)
!11190 = !{!149, !11191}
!11191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1195, size: 64)
!11192 = !DILocalVariable(name: "table", arg: 1, scope: !11188, file: !1198, line: 150, type: !11191)
!11193 = !DILocation(line: 150, column: 39, scope: !11188)
!11194 = !DILocation(line: 152, column: 10, scope: !11188)
!11195 = !DILocation(line: 152, column: 17, scope: !11188)
!11196 = !DILocation(line: 152, column: 3, scope: !11188)
!11197 = distinct !DISubprogram(name: "hash_get_n_buckets_used", scope: !1198, file: !1198, line: 158, type: !11189, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11198 = !DILocalVariable(name: "table", arg: 1, scope: !11197, file: !1198, line: 158, type: !11191)
!11199 = !DILocation(line: 158, column: 44, scope: !11197)
!11200 = !DILocation(line: 160, column: 10, scope: !11197)
!11201 = !DILocation(line: 160, column: 17, scope: !11197)
!11202 = !DILocation(line: 160, column: 3, scope: !11197)
!11203 = distinct !DISubprogram(name: "hash_get_n_entries", scope: !1198, file: !1198, line: 166, type: !11189, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11204 = !DILocalVariable(name: "table", arg: 1, scope: !11203, file: !1198, line: 166, type: !11191)
!11205 = !DILocation(line: 166, column: 39, scope: !11203)
!11206 = !DILocation(line: 168, column: 10, scope: !11203)
!11207 = !DILocation(line: 168, column: 17, scope: !11203)
!11208 = !DILocation(line: 168, column: 3, scope: !11203)
!11209 = distinct !DISubprogram(name: "hash_get_max_bucket_length", scope: !1198, file: !1198, line: 174, type: !11189, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11210 = !DILocalVariable(name: "table", arg: 1, scope: !11209, file: !1198, line: 174, type: !11191)
!11211 = !DILocation(line: 174, column: 47, scope: !11209)
!11212 = !DILocalVariable(name: "bucket", scope: !11209, file: !1198, line: 176, type: !1207)
!11213 = !DILocation(line: 176, column: 28, scope: !11209)
!11214 = !DILocalVariable(name: "max_bucket_length", scope: !11209, file: !1198, line: 177, type: !149)
!11215 = !DILocation(line: 177, column: 10, scope: !11209)
!11216 = !DILocation(line: 179, column: 17, scope: !11217)
!11217 = distinct !DILexicalBlock(scope: !11209, file: !1198, line: 179, column: 3)
!11218 = !DILocation(line: 179, column: 24, scope: !11217)
!11219 = !DILocation(line: 179, column: 15, scope: !11217)
!11220 = !DILocation(line: 179, column: 8, scope: !11217)
!11221 = !DILocation(line: 179, column: 32, scope: !11222)
!11222 = distinct !DILexicalBlock(scope: !11217, file: !1198, line: 179, column: 3)
!11223 = !DILocation(line: 179, column: 41, scope: !11222)
!11224 = !DILocation(line: 179, column: 48, scope: !11222)
!11225 = !DILocation(line: 179, column: 39, scope: !11222)
!11226 = !DILocation(line: 179, column: 3, scope: !11217)
!11227 = !DILocation(line: 181, column: 11, scope: !11228)
!11228 = distinct !DILexicalBlock(scope: !11229, file: !1198, line: 181, column: 11)
!11229 = distinct !DILexicalBlock(scope: !11222, file: !1198, line: 180, column: 5)
!11230 = !DILocation(line: 181, column: 19, scope: !11228)
!11231 = !DILocation(line: 181, column: 11, scope: !11229)
!11232 = !DILocalVariable(name: "cursor", scope: !11233, file: !1198, line: 183, type: !1207)
!11233 = distinct !DILexicalBlock(scope: !11228, file: !1198, line: 182, column: 9)
!11234 = !DILocation(line: 183, column: 36, scope: !11233)
!11235 = !DILocation(line: 183, column: 45, scope: !11233)
!11236 = !DILocalVariable(name: "bucket_length", scope: !11233, file: !1198, line: 184, type: !149)
!11237 = !DILocation(line: 184, column: 18, scope: !11233)
!11238 = !DILocation(line: 186, column: 11, scope: !11233)
!11239 = !DILocation(line: 186, column: 27, scope: !11233)
!11240 = !DILocation(line: 186, column: 35, scope: !11233)
!11241 = !DILocation(line: 186, column: 25, scope: !11233)
!11242 = !DILocation(line: 186, column: 41, scope: !11233)
!11243 = !DILocation(line: 187, column: 26, scope: !11233)
!11244 = distinct !{!11244, !11238, !11243}
!11245 = !DILocation(line: 189, column: 15, scope: !11246)
!11246 = distinct !DILexicalBlock(scope: !11233, file: !1198, line: 189, column: 15)
!11247 = !DILocation(line: 189, column: 31, scope: !11246)
!11248 = !DILocation(line: 189, column: 29, scope: !11246)
!11249 = !DILocation(line: 189, column: 15, scope: !11233)
!11250 = !DILocation(line: 190, column: 33, scope: !11246)
!11251 = !DILocation(line: 190, column: 31, scope: !11246)
!11252 = !DILocation(line: 190, column: 13, scope: !11246)
!11253 = !DILocation(line: 191, column: 9, scope: !11233)
!11254 = !DILocation(line: 192, column: 5, scope: !11229)
!11255 = !DILocation(line: 179, column: 68, scope: !11222)
!11256 = !DILocation(line: 179, column: 3, scope: !11222)
!11257 = distinct !{!11257, !11226, !11258}
!11258 = !DILocation(line: 192, column: 5, scope: !11217)
!11259 = !DILocation(line: 194, column: 10, scope: !11209)
!11260 = !DILocation(line: 194, column: 3, scope: !11209)
!11261 = distinct !DISubprogram(name: "hash_table_ok", scope: !1198, file: !1198, line: 201, type: !11262, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11262 = !DISubroutineType(types: !11263)
!11263 = !{!141, !11191}
!11264 = !DILocalVariable(name: "table", arg: 1, scope: !11261, file: !1198, line: 201, type: !11191)
!11265 = !DILocation(line: 201, column: 34, scope: !11261)
!11266 = !DILocalVariable(name: "bucket", scope: !11261, file: !1198, line: 203, type: !1207)
!11267 = !DILocation(line: 203, column: 28, scope: !11261)
!11268 = !DILocalVariable(name: "n_buckets_used", scope: !11261, file: !1198, line: 204, type: !149)
!11269 = !DILocation(line: 204, column: 10, scope: !11261)
!11270 = !DILocalVariable(name: "n_entries", scope: !11261, file: !1198, line: 205, type: !149)
!11271 = !DILocation(line: 205, column: 10, scope: !11261)
!11272 = !DILocation(line: 207, column: 17, scope: !11273)
!11273 = distinct !DILexicalBlock(scope: !11261, file: !1198, line: 207, column: 3)
!11274 = !DILocation(line: 207, column: 24, scope: !11273)
!11275 = !DILocation(line: 207, column: 15, scope: !11273)
!11276 = !DILocation(line: 207, column: 8, scope: !11273)
!11277 = !DILocation(line: 207, column: 32, scope: !11278)
!11278 = distinct !DILexicalBlock(scope: !11273, file: !1198, line: 207, column: 3)
!11279 = !DILocation(line: 207, column: 41, scope: !11278)
!11280 = !DILocation(line: 207, column: 48, scope: !11278)
!11281 = !DILocation(line: 207, column: 39, scope: !11278)
!11282 = !DILocation(line: 207, column: 3, scope: !11273)
!11283 = !DILocation(line: 209, column: 11, scope: !11284)
!11284 = distinct !DILexicalBlock(scope: !11285, file: !1198, line: 209, column: 11)
!11285 = distinct !DILexicalBlock(scope: !11278, file: !1198, line: 208, column: 5)
!11286 = !DILocation(line: 209, column: 19, scope: !11284)
!11287 = !DILocation(line: 209, column: 11, scope: !11285)
!11288 = !DILocalVariable(name: "cursor", scope: !11289, file: !1198, line: 211, type: !1207)
!11289 = distinct !DILexicalBlock(scope: !11284, file: !1198, line: 210, column: 9)
!11290 = !DILocation(line: 211, column: 36, scope: !11289)
!11291 = !DILocation(line: 211, column: 45, scope: !11289)
!11292 = !DILocation(line: 214, column: 25, scope: !11289)
!11293 = !DILocation(line: 215, column: 20, scope: !11289)
!11294 = !DILocation(line: 218, column: 11, scope: !11289)
!11295 = !DILocation(line: 218, column: 27, scope: !11289)
!11296 = !DILocation(line: 218, column: 35, scope: !11289)
!11297 = !DILocation(line: 218, column: 25, scope: !11289)
!11298 = !DILocation(line: 218, column: 41, scope: !11289)
!11299 = !DILocation(line: 219, column: 22, scope: !11289)
!11300 = distinct !{!11300, !11294, !11299}
!11301 = !DILocation(line: 220, column: 9, scope: !11289)
!11302 = !DILocation(line: 221, column: 5, scope: !11285)
!11303 = !DILocation(line: 207, column: 68, scope: !11278)
!11304 = !DILocation(line: 207, column: 3, scope: !11278)
!11305 = distinct !{!11305, !11282, !11306}
!11306 = !DILocation(line: 221, column: 5, scope: !11273)
!11307 = !DILocation(line: 223, column: 7, scope: !11308)
!11308 = distinct !DILexicalBlock(scope: !11261, file: !1198, line: 223, column: 7)
!11309 = !DILocation(line: 223, column: 25, scope: !11308)
!11310 = !DILocation(line: 223, column: 32, scope: !11308)
!11311 = !DILocation(line: 223, column: 22, scope: !11308)
!11312 = !DILocation(line: 223, column: 47, scope: !11308)
!11313 = !DILocation(line: 223, column: 50, scope: !11308)
!11314 = !DILocation(line: 223, column: 63, scope: !11308)
!11315 = !DILocation(line: 223, column: 70, scope: !11308)
!11316 = !DILocation(line: 223, column: 60, scope: !11308)
!11317 = !DILocation(line: 223, column: 7, scope: !11261)
!11318 = !DILocation(line: 224, column: 5, scope: !11308)
!11319 = !DILocation(line: 226, column: 3, scope: !11261)
!11320 = !DILocation(line: 227, column: 1, scope: !11261)
!11321 = distinct !DISubprogram(name: "hash_print_statistics", scope: !1198, file: !1198, line: 230, type: !11322, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11322 = !DISubroutineType(types: !11323)
!11323 = !{null, !11191, !11324}
!11324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11325, size: 64)
!11325 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !11326)
!11326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !11327)
!11327 = !{!11328, !11329, !11330, !11331, !11332, !11333, !11334, !11335, !11336, !11337, !11338, !11339, !11340, !11341, !11343, !11344, !11345, !11346, !11347, !11348, !11349, !11350, !11351, !11352, !11353, !11354, !11355, !11356, !11357}
!11328 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !11326, file: !290, line: 51, baseType: !27, size: 32)
!11329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !11326, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!11330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !11326, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!11331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !11326, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!11332 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !11326, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!11333 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !11326, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!11334 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !11326, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!11335 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !11326, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!11336 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !11326, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!11337 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !11326, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!11338 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !11326, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!11339 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !11326, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!11340 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !11326, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!11341 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !11326, file: !290, line: 70, baseType: !11342, size: 64, offset: 832)
!11342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11326, size: 64)
!11343 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !11326, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!11344 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !11326, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!11345 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !11326, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!11346 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !11326, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!11347 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !11326, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!11348 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !11326, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!11349 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !11326, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!11350 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !11326, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!11351 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !11326, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!11352 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !11326, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!11353 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !11326, file: !290, line: 93, baseType: !11342, size: 64, offset: 1344)
!11354 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !11326, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!11355 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !11326, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!11356 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !11326, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!11357 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !11326, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!11358 = !DILocalVariable(name: "table", arg: 1, scope: !11321, file: !1198, line: 230, type: !11191)
!11359 = !DILocation(line: 230, column: 42, scope: !11321)
!11360 = !DILocalVariable(name: "stream", arg: 2, scope: !11321, file: !1198, line: 230, type: !11324)
!11361 = !DILocation(line: 230, column: 55, scope: !11321)
!11362 = !DILocalVariable(name: "n_entries", scope: !11321, file: !1198, line: 232, type: !149)
!11363 = !DILocation(line: 232, column: 10, scope: !11321)
!11364 = !DILocation(line: 232, column: 42, scope: !11321)
!11365 = !DILocation(line: 232, column: 22, scope: !11321)
!11366 = !DILocalVariable(name: "n_buckets", scope: !11321, file: !1198, line: 233, type: !149)
!11367 = !DILocation(line: 233, column: 10, scope: !11321)
!11368 = !DILocation(line: 233, column: 42, scope: !11321)
!11369 = !DILocation(line: 233, column: 22, scope: !11321)
!11370 = !DILocalVariable(name: "n_buckets_used", scope: !11321, file: !1198, line: 234, type: !149)
!11371 = !DILocation(line: 234, column: 10, scope: !11321)
!11372 = !DILocation(line: 234, column: 52, scope: !11321)
!11373 = !DILocation(line: 234, column: 27, scope: !11321)
!11374 = !DILocalVariable(name: "max_bucket_length", scope: !11321, file: !1198, line: 235, type: !149)
!11375 = !DILocation(line: 235, column: 10, scope: !11321)
!11376 = !DILocation(line: 235, column: 58, scope: !11321)
!11377 = !DILocation(line: 235, column: 30, scope: !11321)
!11378 = !DILocation(line: 237, column: 12, scope: !11321)
!11379 = !DILocation(line: 237, column: 68, scope: !11321)
!11380 = !DILocation(line: 237, column: 3, scope: !11321)
!11381 = !DILocation(line: 238, column: 12, scope: !11321)
!11382 = !DILocation(line: 238, column: 68, scope: !11321)
!11383 = !DILocation(line: 238, column: 3, scope: !11321)
!11384 = !DILocation(line: 239, column: 12, scope: !11321)
!11385 = !DILocation(line: 240, column: 32, scope: !11321)
!11386 = !DILocation(line: 241, column: 21, scope: !11321)
!11387 = !DILocation(line: 241, column: 19, scope: !11321)
!11388 = !DILocation(line: 241, column: 39, scope: !11321)
!11389 = !DILocation(line: 241, column: 37, scope: !11321)
!11390 = !DILocation(line: 239, column: 3, scope: !11321)
!11391 = !DILocation(line: 242, column: 12, scope: !11321)
!11392 = !DILocation(line: 243, column: 32, scope: !11321)
!11393 = !DILocation(line: 242, column: 3, scope: !11321)
!11394 = !DILocation(line: 244, column: 1, scope: !11321)
!11395 = distinct !DISubprogram(name: "hash_lookup", scope: !1198, file: !1198, line: 261, type: !11396, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11396 = !DISubroutineType(types: !11397)
!11397 = !{!167, !11191, !181}
!11398 = !DILocalVariable(name: "table", arg: 1, scope: !11395, file: !1198, line: 261, type: !11191)
!11399 = !DILocation(line: 261, column: 32, scope: !11395)
!11400 = !DILocalVariable(name: "entry", arg: 2, scope: !11395, file: !1198, line: 261, type: !181)
!11401 = !DILocation(line: 261, column: 51, scope: !11395)
!11402 = !DILocalVariable(name: "bucket", scope: !11395, file: !1198, line: 263, type: !1207)
!11403 = !DILocation(line: 263, column: 28, scope: !11395)
!11404 = !DILocation(line: 263, column: 50, scope: !11395)
!11405 = !DILocation(line: 263, column: 57, scope: !11395)
!11406 = !DILocation(line: 263, column: 37, scope: !11395)
!11407 = !DILocalVariable(name: "cursor", scope: !11395, file: !1198, line: 264, type: !1207)
!11408 = !DILocation(line: 264, column: 28, scope: !11395)
!11409 = !DILocation(line: 266, column: 7, scope: !11410)
!11410 = distinct !DILexicalBlock(scope: !11395, file: !1198, line: 266, column: 7)
!11411 = !DILocation(line: 266, column: 15, scope: !11410)
!11412 = !DILocation(line: 266, column: 20, scope: !11410)
!11413 = !DILocation(line: 266, column: 7, scope: !11395)
!11414 = !DILocation(line: 267, column: 5, scope: !11410)
!11415 = !DILocation(line: 269, column: 17, scope: !11416)
!11416 = distinct !DILexicalBlock(scope: !11395, file: !1198, line: 269, column: 3)
!11417 = !DILocation(line: 269, column: 15, scope: !11416)
!11418 = !DILocation(line: 269, column: 8, scope: !11416)
!11419 = !DILocation(line: 269, column: 25, scope: !11420)
!11420 = distinct !DILexicalBlock(scope: !11416, file: !1198, line: 269, column: 3)
!11421 = !DILocation(line: 269, column: 3, scope: !11416)
!11422 = !DILocation(line: 270, column: 9, scope: !11423)
!11423 = distinct !DILexicalBlock(scope: !11420, file: !1198, line: 270, column: 9)
!11424 = !DILocation(line: 270, column: 18, scope: !11423)
!11425 = !DILocation(line: 270, column: 26, scope: !11423)
!11426 = !DILocation(line: 270, column: 15, scope: !11423)
!11427 = !DILocation(line: 270, column: 31, scope: !11423)
!11428 = !DILocation(line: 270, column: 34, scope: !11423)
!11429 = !DILocation(line: 270, column: 41, scope: !11423)
!11430 = !DILocation(line: 270, column: 53, scope: !11423)
!11431 = !DILocation(line: 270, column: 60, scope: !11423)
!11432 = !DILocation(line: 270, column: 68, scope: !11423)
!11433 = !DILocation(line: 270, column: 9, scope: !11420)
!11434 = !DILocation(line: 271, column: 14, scope: !11423)
!11435 = !DILocation(line: 271, column: 22, scope: !11423)
!11436 = !DILocation(line: 271, column: 7, scope: !11423)
!11437 = !DILocation(line: 270, column: 72, scope: !11423)
!11438 = !DILocation(line: 269, column: 42, scope: !11420)
!11439 = !DILocation(line: 269, column: 50, scope: !11420)
!11440 = !DILocation(line: 269, column: 40, scope: !11420)
!11441 = !DILocation(line: 269, column: 3, scope: !11420)
!11442 = distinct !{!11442, !11421, !11443}
!11443 = !DILocation(line: 271, column: 22, scope: !11416)
!11444 = !DILocation(line: 273, column: 3, scope: !11395)
!11445 = !DILocation(line: 274, column: 1, scope: !11395)
!11446 = distinct !DISubprogram(name: "safe_hasher", scope: !1198, file: !1198, line: 249, type: !11447, scopeLine: 250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11447 = !DISubroutineType(types: !11448)
!11448 = !{!1201, !11191, !181}
!11449 = !DILocalVariable(name: "table", arg: 1, scope: !11446, file: !1198, line: 249, type: !11191)
!11450 = !DILocation(line: 249, column: 32, scope: !11446)
!11451 = !DILocalVariable(name: "key", arg: 2, scope: !11446, file: !1198, line: 249, type: !181)
!11452 = !DILocation(line: 249, column: 51, scope: !11446)
!11453 = !DILocalVariable(name: "n", scope: !11446, file: !1198, line: 251, type: !149)
!11454 = !DILocation(line: 251, column: 10, scope: !11446)
!11455 = !DILocation(line: 251, column: 14, scope: !11446)
!11456 = !DILocation(line: 251, column: 21, scope: !11446)
!11457 = !DILocation(line: 251, column: 29, scope: !11446)
!11458 = !DILocation(line: 251, column: 34, scope: !11446)
!11459 = !DILocation(line: 251, column: 41, scope: !11446)
!11460 = !DILocation(line: 252, column: 10, scope: !11461)
!11461 = distinct !DILexicalBlock(scope: !11446, file: !1198, line: 252, column: 7)
!11462 = !DILocation(line: 252, column: 14, scope: !11461)
!11463 = !DILocation(line: 252, column: 21, scope: !11461)
!11464 = !DILocation(line: 252, column: 12, scope: !11461)
!11465 = !DILocation(line: 252, column: 7, scope: !11446)
!11466 = !DILocation(line: 253, column: 5, scope: !11461)
!11467 = !DILocation(line: 254, column: 10, scope: !11446)
!11468 = !DILocation(line: 254, column: 17, scope: !11446)
!11469 = !DILocation(line: 254, column: 26, scope: !11446)
!11470 = !DILocation(line: 254, column: 24, scope: !11446)
!11471 = !DILocation(line: 254, column: 3, scope: !11446)
!11472 = distinct !DISubprogram(name: "hash_get_first", scope: !1198, file: !1198, line: 288, type: !11473, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11473 = !DISubroutineType(types: !11474)
!11474 = !{!167, !11191}
!11475 = !DILocalVariable(name: "table", arg: 1, scope: !11472, file: !1198, line: 288, type: !11191)
!11476 = !DILocation(line: 288, column: 35, scope: !11472)
!11477 = !DILocalVariable(name: "bucket", scope: !11472, file: !1198, line: 290, type: !1207)
!11478 = !DILocation(line: 290, column: 28, scope: !11472)
!11479 = !DILocation(line: 292, column: 7, scope: !11480)
!11480 = distinct !DILexicalBlock(scope: !11472, file: !1198, line: 292, column: 7)
!11481 = !DILocation(line: 292, column: 14, scope: !11480)
!11482 = !DILocation(line: 292, column: 24, scope: !11480)
!11483 = !DILocation(line: 292, column: 7, scope: !11472)
!11484 = !DILocation(line: 293, column: 5, scope: !11480)
!11485 = !DILocation(line: 295, column: 17, scope: !11486)
!11486 = distinct !DILexicalBlock(scope: !11472, file: !1198, line: 295, column: 3)
!11487 = !DILocation(line: 295, column: 24, scope: !11486)
!11488 = !DILocation(line: 295, column: 15, scope: !11486)
!11489 = !DILocation(line: 295, column: 8, scope: !11486)
!11490 = !DILocation(line: 296, column: 12, scope: !11491)
!11491 = distinct !DILexicalBlock(scope: !11492, file: !1198, line: 296, column: 9)
!11492 = distinct !DILexicalBlock(scope: !11486, file: !1198, line: 295, column: 3)
!11493 = !DILocation(line: 296, column: 21, scope: !11491)
!11494 = !DILocation(line: 296, column: 28, scope: !11491)
!11495 = !DILocation(line: 296, column: 19, scope: !11491)
!11496 = !DILocation(line: 296, column: 9, scope: !11492)
!11497 = !DILocation(line: 297, column: 7, scope: !11491)
!11498 = !DILocation(line: 298, column: 14, scope: !11499)
!11499 = distinct !DILexicalBlock(scope: !11491, file: !1198, line: 298, column: 14)
!11500 = !DILocation(line: 298, column: 22, scope: !11499)
!11501 = !DILocation(line: 298, column: 14, scope: !11491)
!11502 = !DILocation(line: 299, column: 14, scope: !11499)
!11503 = !DILocation(line: 299, column: 22, scope: !11499)
!11504 = !DILocation(line: 299, column: 7, scope: !11499)
!11505 = !DILocation(line: 296, column: 40, scope: !11491)
!11506 = !DILocation(line: 295, column: 40, scope: !11492)
!11507 = !DILocation(line: 295, column: 3, scope: !11492)
!11508 = distinct !{!11508, !11509, !11510}
!11509 = !DILocation(line: 295, column: 3, scope: !11486)
!11510 = !DILocation(line: 299, column: 22, scope: !11486)
!11511 = !DILocation(line: 300, column: 1, scope: !11472)
!11512 = distinct !DISubprogram(name: "hash_get_next", scope: !1198, file: !1198, line: 307, type: !11396, scopeLine: 308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11513 = !DILocalVariable(name: "table", arg: 1, scope: !11512, file: !1198, line: 307, type: !11191)
!11514 = !DILocation(line: 307, column: 34, scope: !11512)
!11515 = !DILocalVariable(name: "entry", arg: 2, scope: !11512, file: !1198, line: 307, type: !181)
!11516 = !DILocation(line: 307, column: 53, scope: !11512)
!11517 = !DILocalVariable(name: "bucket", scope: !11512, file: !1198, line: 309, type: !1207)
!11518 = !DILocation(line: 309, column: 28, scope: !11512)
!11519 = !DILocation(line: 309, column: 50, scope: !11512)
!11520 = !DILocation(line: 309, column: 57, scope: !11512)
!11521 = !DILocation(line: 309, column: 37, scope: !11512)
!11522 = !DILocalVariable(name: "cursor", scope: !11512, file: !1198, line: 310, type: !1207)
!11523 = !DILocation(line: 310, column: 28, scope: !11512)
!11524 = !DILocation(line: 313, column: 12, scope: !11512)
!11525 = !DILocation(line: 313, column: 10, scope: !11512)
!11526 = !DILocation(line: 314, column: 3, scope: !11512)
!11527 = !DILocation(line: 316, column: 11, scope: !11528)
!11528 = distinct !DILexicalBlock(scope: !11529, file: !1198, line: 316, column: 11)
!11529 = distinct !DILexicalBlock(scope: !11512, file: !1198, line: 315, column: 5)
!11530 = !DILocation(line: 316, column: 19, scope: !11528)
!11531 = !DILocation(line: 316, column: 27, scope: !11528)
!11532 = !DILocation(line: 316, column: 24, scope: !11528)
!11533 = !DILocation(line: 316, column: 33, scope: !11528)
!11534 = !DILocation(line: 316, column: 36, scope: !11528)
!11535 = !DILocation(line: 316, column: 44, scope: !11528)
!11536 = !DILocation(line: 316, column: 11, scope: !11529)
!11537 = !DILocation(line: 317, column: 16, scope: !11528)
!11538 = !DILocation(line: 317, column: 24, scope: !11528)
!11539 = !DILocation(line: 317, column: 30, scope: !11528)
!11540 = !DILocation(line: 317, column: 9, scope: !11528)
!11541 = !DILocation(line: 318, column: 16, scope: !11529)
!11542 = !DILocation(line: 318, column: 24, scope: !11529)
!11543 = !DILocation(line: 318, column: 14, scope: !11529)
!11544 = !DILocation(line: 319, column: 5, scope: !11529)
!11545 = !DILocation(line: 320, column: 10, scope: !11512)
!11546 = !DILocation(line: 320, column: 17, scope: !11512)
!11547 = distinct !{!11547, !11526, !11548}
!11548 = !DILocation(line: 320, column: 24, scope: !11512)
!11549 = !DILocation(line: 323, column: 3, scope: !11512)
!11550 = !DILocation(line: 323, column: 10, scope: !11512)
!11551 = !DILocation(line: 323, column: 21, scope: !11512)
!11552 = !DILocation(line: 323, column: 28, scope: !11512)
!11553 = !DILocation(line: 323, column: 19, scope: !11512)
!11554 = !DILocation(line: 324, column: 9, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !11512, file: !1198, line: 324, column: 9)
!11556 = !DILocation(line: 324, column: 17, scope: !11555)
!11557 = !DILocation(line: 324, column: 9, scope: !11512)
!11558 = !DILocation(line: 325, column: 14, scope: !11555)
!11559 = !DILocation(line: 325, column: 22, scope: !11555)
!11560 = !DILocation(line: 325, column: 7, scope: !11555)
!11561 = distinct !{!11561, !11549, !11562}
!11562 = !DILocation(line: 325, column: 22, scope: !11512)
!11563 = !DILocation(line: 328, column: 3, scope: !11512)
!11564 = !DILocation(line: 329, column: 1, scope: !11512)
!11565 = distinct !DISubprogram(name: "hash_get_entries", scope: !1198, file: !1198, line: 336, type: !11566, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11566 = !DISubroutineType(types: !11567)
!11567 = !{!149, !11191, !767, !149}
!11568 = !DILocalVariable(name: "table", arg: 1, scope: !11565, file: !1198, line: 336, type: !11191)
!11569 = !DILocation(line: 336, column: 37, scope: !11565)
!11570 = !DILocalVariable(name: "buffer", arg: 2, scope: !11565, file: !1198, line: 336, type: !767)
!11571 = !DILocation(line: 336, column: 51, scope: !11565)
!11572 = !DILocalVariable(name: "buffer_size", arg: 3, scope: !11565, file: !1198, line: 337, type: !149)
!11573 = !DILocation(line: 337, column: 26, scope: !11565)
!11574 = !DILocalVariable(name: "counter", scope: !11565, file: !1198, line: 339, type: !149)
!11575 = !DILocation(line: 339, column: 10, scope: !11565)
!11576 = !DILocalVariable(name: "bucket", scope: !11565, file: !1198, line: 340, type: !1207)
!11577 = !DILocation(line: 340, column: 28, scope: !11565)
!11578 = !DILocalVariable(name: "cursor", scope: !11565, file: !1198, line: 341, type: !1207)
!11579 = !DILocation(line: 341, column: 28, scope: !11565)
!11580 = !DILocation(line: 343, column: 17, scope: !11581)
!11581 = distinct !DILexicalBlock(scope: !11565, file: !1198, line: 343, column: 3)
!11582 = !DILocation(line: 343, column: 24, scope: !11581)
!11583 = !DILocation(line: 343, column: 15, scope: !11581)
!11584 = !DILocation(line: 343, column: 8, scope: !11581)
!11585 = !DILocation(line: 343, column: 32, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11581, file: !1198, line: 343, column: 3)
!11587 = !DILocation(line: 343, column: 41, scope: !11586)
!11588 = !DILocation(line: 343, column: 48, scope: !11586)
!11589 = !DILocation(line: 343, column: 39, scope: !11586)
!11590 = !DILocation(line: 343, column: 3, scope: !11581)
!11591 = !DILocation(line: 345, column: 11, scope: !11592)
!11592 = distinct !DILexicalBlock(scope: !11593, file: !1198, line: 345, column: 11)
!11593 = distinct !DILexicalBlock(scope: !11586, file: !1198, line: 344, column: 5)
!11594 = !DILocation(line: 345, column: 19, scope: !11592)
!11595 = !DILocation(line: 345, column: 11, scope: !11593)
!11596 = !DILocation(line: 347, column: 25, scope: !11597)
!11597 = distinct !DILexicalBlock(scope: !11598, file: !1198, line: 347, column: 11)
!11598 = distinct !DILexicalBlock(scope: !11592, file: !1198, line: 346, column: 9)
!11599 = !DILocation(line: 347, column: 23, scope: !11597)
!11600 = !DILocation(line: 347, column: 16, scope: !11597)
!11601 = !DILocation(line: 347, column: 33, scope: !11602)
!11602 = distinct !DILexicalBlock(scope: !11597, file: !1198, line: 347, column: 11)
!11603 = !DILocation(line: 347, column: 11, scope: !11597)
!11604 = !DILocation(line: 349, column: 19, scope: !11605)
!11605 = distinct !DILexicalBlock(scope: !11606, file: !1198, line: 349, column: 19)
!11606 = distinct !DILexicalBlock(scope: !11602, file: !1198, line: 348, column: 13)
!11607 = !DILocation(line: 349, column: 30, scope: !11605)
!11608 = !DILocation(line: 349, column: 27, scope: !11605)
!11609 = !DILocation(line: 349, column: 19, scope: !11606)
!11610 = !DILocation(line: 350, column: 24, scope: !11605)
!11611 = !DILocation(line: 350, column: 17, scope: !11605)
!11612 = !DILocation(line: 351, column: 35, scope: !11606)
!11613 = !DILocation(line: 351, column: 43, scope: !11606)
!11614 = !DILocation(line: 351, column: 15, scope: !11606)
!11615 = !DILocation(line: 351, column: 29, scope: !11606)
!11616 = !DILocation(line: 351, column: 33, scope: !11606)
!11617 = !DILocation(line: 352, column: 13, scope: !11606)
!11618 = !DILocation(line: 347, column: 50, scope: !11602)
!11619 = !DILocation(line: 347, column: 58, scope: !11602)
!11620 = !DILocation(line: 347, column: 48, scope: !11602)
!11621 = !DILocation(line: 347, column: 11, scope: !11602)
!11622 = distinct !{!11622, !11603, !11623}
!11623 = !DILocation(line: 352, column: 13, scope: !11597)
!11624 = !DILocation(line: 353, column: 9, scope: !11598)
!11625 = !DILocation(line: 354, column: 5, scope: !11593)
!11626 = !DILocation(line: 343, column: 68, scope: !11586)
!11627 = !DILocation(line: 343, column: 3, scope: !11586)
!11628 = distinct !{!11628, !11590, !11629}
!11629 = !DILocation(line: 354, column: 5, scope: !11581)
!11630 = !DILocation(line: 356, column: 10, scope: !11565)
!11631 = !DILocation(line: 356, column: 3, scope: !11565)
!11632 = !DILocation(line: 357, column: 1, scope: !11565)
!11633 = distinct !DISubprogram(name: "hash_do_for_each", scope: !1198, file: !1198, line: 368, type: !11634, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11634 = !DISubroutineType(types: !11635)
!11635 = !{!149, !11191, !11636, !167}
!11636 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_processor", file: !253, line: 51, baseType: !11637)
!11637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11638, size: 64)
!11638 = !DISubroutineType(types: !11639)
!11639 = !{!141, !167, !167}
!11640 = !DILocalVariable(name: "table", arg: 1, scope: !11633, file: !1198, line: 368, type: !11191)
!11641 = !DILocation(line: 368, column: 37, scope: !11633)
!11642 = !DILocalVariable(name: "processor", arg: 2, scope: !11633, file: !1198, line: 368, type: !11636)
!11643 = !DILocation(line: 368, column: 59, scope: !11633)
!11644 = !DILocalVariable(name: "processor_data", arg: 3, scope: !11633, file: !1198, line: 369, type: !167)
!11645 = !DILocation(line: 369, column: 25, scope: !11633)
!11646 = !DILocalVariable(name: "counter", scope: !11633, file: !1198, line: 371, type: !149)
!11647 = !DILocation(line: 371, column: 10, scope: !11633)
!11648 = !DILocalVariable(name: "bucket", scope: !11633, file: !1198, line: 372, type: !1207)
!11649 = !DILocation(line: 372, column: 28, scope: !11633)
!11650 = !DILocalVariable(name: "cursor", scope: !11633, file: !1198, line: 373, type: !1207)
!11651 = !DILocation(line: 373, column: 28, scope: !11633)
!11652 = !DILocation(line: 375, column: 17, scope: !11653)
!11653 = distinct !DILexicalBlock(scope: !11633, file: !1198, line: 375, column: 3)
!11654 = !DILocation(line: 375, column: 24, scope: !11653)
!11655 = !DILocation(line: 375, column: 15, scope: !11653)
!11656 = !DILocation(line: 375, column: 8, scope: !11653)
!11657 = !DILocation(line: 375, column: 32, scope: !11658)
!11658 = distinct !DILexicalBlock(scope: !11653, file: !1198, line: 375, column: 3)
!11659 = !DILocation(line: 375, column: 41, scope: !11658)
!11660 = !DILocation(line: 375, column: 48, scope: !11658)
!11661 = !DILocation(line: 375, column: 39, scope: !11658)
!11662 = !DILocation(line: 375, column: 3, scope: !11653)
!11663 = !DILocation(line: 377, column: 11, scope: !11664)
!11664 = distinct !DILexicalBlock(scope: !11665, file: !1198, line: 377, column: 11)
!11665 = distinct !DILexicalBlock(scope: !11658, file: !1198, line: 376, column: 5)
!11666 = !DILocation(line: 377, column: 19, scope: !11664)
!11667 = !DILocation(line: 377, column: 11, scope: !11665)
!11668 = !DILocation(line: 379, column: 25, scope: !11669)
!11669 = distinct !DILexicalBlock(scope: !11670, file: !1198, line: 379, column: 11)
!11670 = distinct !DILexicalBlock(scope: !11664, file: !1198, line: 378, column: 9)
!11671 = !DILocation(line: 379, column: 23, scope: !11669)
!11672 = !DILocation(line: 379, column: 16, scope: !11669)
!11673 = !DILocation(line: 379, column: 33, scope: !11674)
!11674 = distinct !DILexicalBlock(scope: !11669, file: !1198, line: 379, column: 11)
!11675 = !DILocation(line: 379, column: 11, scope: !11669)
!11676 = !DILocation(line: 381, column: 21, scope: !11677)
!11677 = distinct !DILexicalBlock(scope: !11678, file: !1198, line: 381, column: 19)
!11678 = distinct !DILexicalBlock(scope: !11674, file: !1198, line: 380, column: 13)
!11679 = !DILocation(line: 381, column: 32, scope: !11677)
!11680 = !DILocation(line: 381, column: 40, scope: !11677)
!11681 = !DILocation(line: 381, column: 46, scope: !11677)
!11682 = !DILocation(line: 381, column: 19, scope: !11678)
!11683 = !DILocation(line: 382, column: 24, scope: !11677)
!11684 = !DILocation(line: 382, column: 17, scope: !11677)
!11685 = !DILocation(line: 383, column: 22, scope: !11678)
!11686 = !DILocation(line: 384, column: 13, scope: !11678)
!11687 = !DILocation(line: 379, column: 50, scope: !11674)
!11688 = !DILocation(line: 379, column: 58, scope: !11674)
!11689 = !DILocation(line: 379, column: 48, scope: !11674)
!11690 = !DILocation(line: 379, column: 11, scope: !11674)
!11691 = distinct !{!11691, !11675, !11692}
!11692 = !DILocation(line: 384, column: 13, scope: !11669)
!11693 = !DILocation(line: 385, column: 9, scope: !11670)
!11694 = !DILocation(line: 386, column: 5, scope: !11665)
!11695 = !DILocation(line: 375, column: 68, scope: !11658)
!11696 = !DILocation(line: 375, column: 3, scope: !11658)
!11697 = distinct !{!11697, !11662, !11698}
!11698 = !DILocation(line: 386, column: 5, scope: !11653)
!11699 = !DILocation(line: 388, column: 10, scope: !11633)
!11700 = !DILocation(line: 388, column: 3, scope: !11633)
!11701 = !DILocation(line: 389, column: 1, scope: !11633)
!11702 = distinct !DISubprogram(name: "hash_string", scope: !1198, file: !1198, line: 428, type: !11703, scopeLine: 429, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11703 = !DISubroutineType(types: !11704)
!11704 = !{!149, !146, !149}
!11705 = !DILocalVariable(name: "string", arg: 1, scope: !11702, file: !1198, line: 428, type: !146)
!11706 = !DILocation(line: 428, column: 26, scope: !11702)
!11707 = !DILocalVariable(name: "n_buckets", arg: 2, scope: !11702, file: !1198, line: 428, type: !149)
!11708 = !DILocation(line: 428, column: 41, scope: !11702)
!11709 = !DILocalVariable(name: "value", scope: !11702, file: !1198, line: 430, type: !149)
!11710 = !DILocation(line: 430, column: 10, scope: !11702)
!11711 = !DILocalVariable(name: "ch", scope: !11702, file: !1198, line: 431, type: !737)
!11712 = !DILocation(line: 431, column: 17, scope: !11702)
!11713 = !DILocation(line: 433, column: 3, scope: !11702)
!11714 = !DILocation(line: 433, column: 17, scope: !11715)
!11715 = distinct !DILexicalBlock(scope: !11716, file: !1198, line: 433, column: 3)
!11716 = distinct !DILexicalBlock(scope: !11702, file: !1198, line: 433, column: 3)
!11717 = !DILocation(line: 433, column: 16, scope: !11715)
!11718 = !DILocation(line: 433, column: 14, scope: !11715)
!11719 = !DILocation(line: 433, column: 3, scope: !11716)
!11720 = !DILocation(line: 434, column: 14, scope: !11715)
!11721 = !DILocation(line: 434, column: 20, scope: !11715)
!11722 = !DILocation(line: 434, column: 27, scope: !11715)
!11723 = !DILocation(line: 434, column: 25, scope: !11715)
!11724 = !DILocation(line: 434, column: 33, scope: !11715)
!11725 = !DILocation(line: 434, column: 31, scope: !11715)
!11726 = !DILocation(line: 434, column: 11, scope: !11715)
!11727 = !DILocation(line: 434, column: 5, scope: !11715)
!11728 = !DILocation(line: 433, column: 32, scope: !11715)
!11729 = !DILocation(line: 433, column: 3, scope: !11715)
!11730 = distinct !{!11730, !11719, !11731}
!11731 = !DILocation(line: 434, column: 33, scope: !11716)
!11732 = !DILocation(line: 435, column: 10, scope: !11702)
!11733 = !DILocation(line: 435, column: 3, scope: !11702)
!11734 = distinct !DISubprogram(name: "hash_reset_tuning", scope: !1198, file: !1198, line: 479, type: !11735, scopeLine: 480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11735 = !DISubroutineType(types: !11736)
!11736 = !{null, !11737}
!11737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1215, size: 64)
!11738 = !DILocalVariable(name: "tuning", arg: 1, scope: !11734, file: !1198, line: 479, type: !11737)
!11739 = !DILocation(line: 479, column: 33, scope: !11734)
!11740 = !DILocation(line: 481, column: 4, scope: !11734)
!11741 = !DILocation(line: 481, column: 13, scope: !11734)
!11742 = !DILocation(line: 482, column: 1, scope: !11734)
!11743 = distinct !DISubprogram(name: "hash_initialize", scope: !1198, file: !1198, line: 594, type: !11744, scopeLine: 597, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11744 = !DISubroutineType(types: !11745)
!11745 = !{!1237, !149, !1213, !1225, !1230, !1235}
!11746 = !DILocalVariable(name: "candidate", arg: 1, scope: !11743, file: !1198, line: 594, type: !149)
!11747 = !DILocation(line: 594, column: 25, scope: !11743)
!11748 = !DILocalVariable(name: "tuning", arg: 2, scope: !11743, file: !1198, line: 594, type: !1213)
!11749 = !DILocation(line: 594, column: 55, scope: !11743)
!11750 = !DILocalVariable(name: "hasher", arg: 3, scope: !11743, file: !1198, line: 595, type: !1225)
!11751 = !DILocation(line: 595, column: 30, scope: !11743)
!11752 = !DILocalVariable(name: "comparator", arg: 4, scope: !11743, file: !1198, line: 595, type: !1230)
!11753 = !DILocation(line: 595, column: 54, scope: !11743)
!11754 = !DILocalVariable(name: "data_freer", arg: 5, scope: !11743, file: !1198, line: 596, type: !1235)
!11755 = !DILocation(line: 596, column: 34, scope: !11743)
!11756 = !DILocalVariable(name: "table", scope: !11743, file: !1198, line: 598, type: !1237)
!11757 = !DILocation(line: 598, column: 15, scope: !11743)
!11758 = !DILocation(line: 600, column: 7, scope: !11759)
!11759 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 600, column: 7)
!11760 = !DILocation(line: 600, column: 14, scope: !11759)
!11761 = !DILocation(line: 600, column: 7, scope: !11743)
!11762 = !DILocation(line: 601, column: 12, scope: !11759)
!11763 = !DILocation(line: 601, column: 5, scope: !11759)
!11764 = !DILocation(line: 602, column: 7, scope: !11765)
!11765 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 602, column: 7)
!11766 = !DILocation(line: 602, column: 18, scope: !11765)
!11767 = !DILocation(line: 602, column: 7, scope: !11743)
!11768 = !DILocation(line: 603, column: 16, scope: !11765)
!11769 = !DILocation(line: 603, column: 5, scope: !11765)
!11770 = !DILocation(line: 605, column: 11, scope: !11743)
!11771 = !DILocation(line: 605, column: 9, scope: !11743)
!11772 = !DILocation(line: 606, column: 7, scope: !11773)
!11773 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 606, column: 7)
!11774 = !DILocation(line: 606, column: 13, scope: !11773)
!11775 = !DILocation(line: 606, column: 7, scope: !11743)
!11776 = !DILocation(line: 607, column: 5, scope: !11773)
!11777 = !DILocation(line: 609, column: 8, scope: !11778)
!11778 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 609, column: 7)
!11779 = !DILocation(line: 609, column: 7, scope: !11743)
!11780 = !DILocation(line: 610, column: 12, scope: !11778)
!11781 = !DILocation(line: 610, column: 5, scope: !11778)
!11782 = !DILocation(line: 611, column: 19, scope: !11743)
!11783 = !DILocation(line: 611, column: 3, scope: !11743)
!11784 = !DILocation(line: 611, column: 10, scope: !11743)
!11785 = !DILocation(line: 611, column: 17, scope: !11743)
!11786 = !DILocation(line: 612, column: 22, scope: !11787)
!11787 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 612, column: 7)
!11788 = !DILocation(line: 612, column: 8, scope: !11787)
!11789 = !DILocation(line: 612, column: 7, scope: !11743)
!11790 = !DILocation(line: 619, column: 7, scope: !11791)
!11791 = distinct !DILexicalBlock(scope: !11787, file: !1198, line: 613, column: 5)
!11792 = !DILocation(line: 622, column: 43, scope: !11743)
!11793 = !DILocation(line: 622, column: 54, scope: !11743)
!11794 = !DILocation(line: 622, column: 22, scope: !11743)
!11795 = !DILocation(line: 622, column: 3, scope: !11743)
!11796 = !DILocation(line: 622, column: 10, scope: !11743)
!11797 = !DILocation(line: 622, column: 20, scope: !11743)
!11798 = !DILocation(line: 623, column: 8, scope: !11799)
!11799 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 623, column: 7)
!11800 = !DILocation(line: 623, column: 15, scope: !11799)
!11801 = !DILocation(line: 623, column: 7, scope: !11743)
!11802 = !DILocation(line: 624, column: 5, scope: !11799)
!11803 = !DILocation(line: 626, column: 27, scope: !11743)
!11804 = !DILocation(line: 626, column: 34, scope: !11743)
!11805 = !DILocation(line: 626, column: 19, scope: !11743)
!11806 = !DILocation(line: 626, column: 3, scope: !11743)
!11807 = !DILocation(line: 626, column: 10, scope: !11743)
!11808 = !DILocation(line: 626, column: 17, scope: !11743)
!11809 = !DILocation(line: 627, column: 7, scope: !11810)
!11810 = distinct !DILexicalBlock(scope: !11743, file: !1198, line: 627, column: 7)
!11811 = !DILocation(line: 627, column: 14, scope: !11810)
!11812 = !DILocation(line: 627, column: 21, scope: !11810)
!11813 = !DILocation(line: 627, column: 7, scope: !11743)
!11814 = !DILocation(line: 628, column: 5, scope: !11810)
!11815 = !DILocation(line: 629, column: 25, scope: !11743)
!11816 = !DILocation(line: 629, column: 32, scope: !11743)
!11817 = !DILocation(line: 629, column: 41, scope: !11743)
!11818 = !DILocation(line: 629, column: 48, scope: !11743)
!11819 = !DILocation(line: 629, column: 39, scope: !11743)
!11820 = !DILocation(line: 629, column: 3, scope: !11743)
!11821 = !DILocation(line: 629, column: 10, scope: !11743)
!11822 = !DILocation(line: 629, column: 23, scope: !11743)
!11823 = !DILocation(line: 630, column: 3, scope: !11743)
!11824 = !DILocation(line: 630, column: 10, scope: !11743)
!11825 = !DILocation(line: 630, column: 25, scope: !11743)
!11826 = !DILocation(line: 631, column: 3, scope: !11743)
!11827 = !DILocation(line: 631, column: 10, scope: !11743)
!11828 = !DILocation(line: 631, column: 20, scope: !11743)
!11829 = !DILocation(line: 633, column: 19, scope: !11743)
!11830 = !DILocation(line: 633, column: 3, scope: !11743)
!11831 = !DILocation(line: 633, column: 10, scope: !11743)
!11832 = !DILocation(line: 633, column: 17, scope: !11743)
!11833 = !DILocation(line: 634, column: 23, scope: !11743)
!11834 = !DILocation(line: 634, column: 3, scope: !11743)
!11835 = !DILocation(line: 634, column: 10, scope: !11743)
!11836 = !DILocation(line: 634, column: 21, scope: !11743)
!11837 = !DILocation(line: 635, column: 23, scope: !11743)
!11838 = !DILocation(line: 635, column: 3, scope: !11743)
!11839 = !DILocation(line: 635, column: 10, scope: !11743)
!11840 = !DILocation(line: 635, column: 21, scope: !11743)
!11841 = !DILocation(line: 637, column: 3, scope: !11743)
!11842 = !DILocation(line: 637, column: 10, scope: !11743)
!11843 = !DILocation(line: 637, column: 26, scope: !11743)
!11844 = !DILocation(line: 641, column: 10, scope: !11743)
!11845 = !DILocation(line: 641, column: 3, scope: !11743)
!11846 = !DILabel(scope: !11743, name: "fail", file: !1198, line: 643)
!11847 = !DILocation(line: 643, column: 2, scope: !11743)
!11848 = !DILocation(line: 644, column: 9, scope: !11743)
!11849 = !DILocation(line: 644, column: 3, scope: !11743)
!11850 = !DILocation(line: 645, column: 3, scope: !11743)
!11851 = !DILocation(line: 646, column: 1, scope: !11743)
!11852 = distinct !DISubprogram(name: "raw_hasher", scope: !1198, file: !1198, line: 486, type: !1227, scopeLine: 487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11853 = !DILocalVariable(name: "data", arg: 1, scope: !11852, file: !1198, line: 486, type: !181)
!11854 = !DILocation(line: 486, column: 25, scope: !11852)
!11855 = !DILocalVariable(name: "n", arg: 2, scope: !11852, file: !1198, line: 486, type: !149)
!11856 = !DILocation(line: 486, column: 38, scope: !11852)
!11857 = !DILocalVariable(name: "val", scope: !11852, file: !1198, line: 493, type: !149)
!11858 = !DILocation(line: 493, column: 10, scope: !11852)
!11859 = !DILocation(line: 493, column: 34, scope: !11852)
!11860 = !DILocation(line: 493, column: 25, scope: !11852)
!11861 = !DILocation(line: 493, column: 16, scope: !11852)
!11862 = !DILocation(line: 494, column: 10, scope: !11852)
!11863 = !DILocation(line: 494, column: 16, scope: !11852)
!11864 = !DILocation(line: 494, column: 14, scope: !11852)
!11865 = !DILocation(line: 494, column: 3, scope: !11852)
!11866 = distinct !DISubprogram(name: "raw_comparator", scope: !1198, file: !1198, line: 499, type: !1232, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11867 = !DILocalVariable(name: "a", arg: 1, scope: !11866, file: !1198, line: 499, type: !181)
!11868 = !DILocation(line: 499, column: 29, scope: !11866)
!11869 = !DILocalVariable(name: "b", arg: 2, scope: !11866, file: !1198, line: 499, type: !181)
!11870 = !DILocation(line: 499, column: 44, scope: !11866)
!11871 = !DILocation(line: 501, column: 10, scope: !11866)
!11872 = !DILocation(line: 501, column: 15, scope: !11866)
!11873 = !DILocation(line: 501, column: 12, scope: !11866)
!11874 = !DILocation(line: 501, column: 3, scope: !11866)
!11875 = distinct !DISubprogram(name: "check_tuning", scope: !1198, file: !1198, line: 512, type: !11876, scopeLine: 513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11876 = !DISubroutineType(types: !11877)
!11877 = !{!141, !1237}
!11878 = !DILocalVariable(name: "table", arg: 1, scope: !11875, file: !1198, line: 512, type: !1237)
!11879 = !DILocation(line: 512, column: 27, scope: !11875)
!11880 = !DILocalVariable(name: "tuning", scope: !11875, file: !1198, line: 514, type: !1213)
!11881 = !DILocation(line: 514, column: 22, scope: !11875)
!11882 = !DILocation(line: 514, column: 31, scope: !11875)
!11883 = !DILocation(line: 514, column: 38, scope: !11875)
!11884 = !DILocalVariable(name: "epsilon", scope: !11875, file: !1198, line: 515, type: !1219)
!11885 = !DILocation(line: 515, column: 9, scope: !11875)
!11886 = !DILocation(line: 516, column: 7, scope: !11887)
!11887 = distinct !DILexicalBlock(scope: !11875, file: !1198, line: 516, column: 7)
!11888 = !DILocation(line: 516, column: 14, scope: !11887)
!11889 = !DILocation(line: 516, column: 7, scope: !11875)
!11890 = !DILocation(line: 517, column: 5, scope: !11887)
!11891 = !DILocation(line: 524, column: 11, scope: !11875)
!11892 = !DILocation(line: 526, column: 7, scope: !11893)
!11893 = distinct !DILexicalBlock(scope: !11875, file: !1198, line: 526, column: 7)
!11894 = !DILocation(line: 526, column: 17, scope: !11893)
!11895 = !DILocation(line: 526, column: 25, scope: !11893)
!11896 = !DILocation(line: 526, column: 15, scope: !11893)
!11897 = !DILocation(line: 527, column: 7, scope: !11893)
!11898 = !DILocation(line: 527, column: 10, scope: !11893)
!11899 = !DILocation(line: 527, column: 18, scope: !11893)
!11900 = !DILocation(line: 527, column: 41, scope: !11893)
!11901 = !DILocation(line: 527, column: 39, scope: !11893)
!11902 = !DILocation(line: 527, column: 35, scope: !11893)
!11903 = !DILocation(line: 528, column: 7, scope: !11893)
!11904 = !DILocation(line: 528, column: 14, scope: !11893)
!11905 = !DILocation(line: 528, column: 12, scope: !11893)
!11906 = !DILocation(line: 528, column: 24, scope: !11893)
!11907 = !DILocation(line: 528, column: 32, scope: !11893)
!11908 = !DILocation(line: 528, column: 22, scope: !11893)
!11909 = !DILocation(line: 529, column: 7, scope: !11893)
!11910 = !DILocation(line: 529, column: 15, scope: !11893)
!11911 = !DILocation(line: 529, column: 23, scope: !11893)
!11912 = !DILocation(line: 529, column: 12, scope: !11893)
!11913 = !DILocation(line: 530, column: 7, scope: !11893)
!11914 = !DILocation(line: 530, column: 10, scope: !11893)
!11915 = !DILocation(line: 530, column: 18, scope: !11893)
!11916 = !DILocation(line: 530, column: 37, scope: !11893)
!11917 = !DILocation(line: 530, column: 35, scope: !11893)
!11918 = !DILocation(line: 530, column: 47, scope: !11893)
!11919 = !DILocation(line: 530, column: 55, scope: !11893)
!11920 = !DILocation(line: 530, column: 45, scope: !11893)
!11921 = !DILocation(line: 531, column: 7, scope: !11893)
!11922 = !DILocation(line: 531, column: 10, scope: !11893)
!11923 = !DILocation(line: 531, column: 18, scope: !11893)
!11924 = !DILocation(line: 531, column: 32, scope: !11893)
!11925 = !DILocation(line: 532, column: 7, scope: !11893)
!11926 = !DILocation(line: 532, column: 10, scope: !11893)
!11927 = !DILocation(line: 532, column: 18, scope: !11893)
!11928 = !DILocation(line: 532, column: 37, scope: !11893)
!11929 = !DILocation(line: 532, column: 35, scope: !11893)
!11930 = !DILocation(line: 532, column: 47, scope: !11893)
!11931 = !DILocation(line: 532, column: 55, scope: !11893)
!11932 = !DILocation(line: 532, column: 45, scope: !11893)
!11933 = !DILocation(line: 526, column: 7, scope: !11875)
!11934 = !DILocation(line: 533, column: 5, scope: !11893)
!11935 = !DILocation(line: 535, column: 3, scope: !11875)
!11936 = !DILocation(line: 535, column: 10, scope: !11875)
!11937 = !DILocation(line: 535, column: 17, scope: !11875)
!11938 = !DILocation(line: 536, column: 3, scope: !11875)
!11939 = !DILocation(line: 537, column: 1, scope: !11875)
!11940 = distinct !DISubprogram(name: "compute_bucket_size", scope: !1198, file: !1198, line: 544, type: !11941, scopeLine: 545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11941 = !DISubroutineType(types: !11942)
!11942 = !{!149, !149, !1213}
!11943 = !DILocalVariable(name: "candidate", arg: 1, scope: !11940, file: !1198, line: 544, type: !149)
!11944 = !DILocation(line: 544, column: 29, scope: !11940)
!11945 = !DILocalVariable(name: "tuning", arg: 2, scope: !11940, file: !1198, line: 544, type: !1213)
!11946 = !DILocation(line: 544, column: 59, scope: !11940)
!11947 = !DILocation(line: 546, column: 8, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11940, file: !1198, line: 546, column: 7)
!11949 = !DILocation(line: 546, column: 16, scope: !11948)
!11950 = !DILocation(line: 546, column: 7, scope: !11940)
!11951 = !DILocalVariable(name: "new_candidate", scope: !11952, file: !1198, line: 548, type: !1219)
!11952 = distinct !DILexicalBlock(scope: !11948, file: !1198, line: 547, column: 5)
!11953 = !DILocation(line: 548, column: 13, scope: !11952)
!11954 = !DILocation(line: 548, column: 29, scope: !11952)
!11955 = !DILocation(line: 548, column: 41, scope: !11952)
!11956 = !DILocation(line: 548, column: 49, scope: !11952)
!11957 = !DILocation(line: 548, column: 39, scope: !11952)
!11958 = !DILocation(line: 549, column: 23, scope: !11959)
!11959 = distinct !DILexicalBlock(scope: !11952, file: !1198, line: 549, column: 11)
!11960 = !DILocation(line: 549, column: 20, scope: !11959)
!11961 = !DILocation(line: 549, column: 11, scope: !11952)
!11962 = !DILocation(line: 550, column: 9, scope: !11959)
!11963 = !DILocation(line: 551, column: 19, scope: !11952)
!11964 = !DILocation(line: 551, column: 17, scope: !11952)
!11965 = !DILocation(line: 552, column: 5, scope: !11952)
!11966 = !DILocation(line: 553, column: 27, scope: !11940)
!11967 = !DILocation(line: 553, column: 15, scope: !11940)
!11968 = !DILocation(line: 553, column: 13, scope: !11940)
!11969 = !DILocation(line: 554, column: 7, scope: !11970)
!11970 = distinct !DILexicalBlock(scope: !11940, file: !1198, line: 554, column: 7)
!11971 = !DILocation(line: 554, column: 7, scope: !11940)
!11972 = !DILocation(line: 555, column: 5, scope: !11970)
!11973 = !DILocation(line: 556, column: 10, scope: !11940)
!11974 = !DILocation(line: 556, column: 3, scope: !11940)
!11975 = !DILocation(line: 557, column: 1, scope: !11940)
!11976 = distinct !DISubprogram(name: "next_prime", scope: !1198, file: !1198, line: 463, type: !11977, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!11977 = !DISubroutineType(types: !11978)
!11978 = !{!149, !149}
!11979 = !DILocalVariable(name: "candidate", arg: 1, scope: !11976, file: !1198, line: 463, type: !149)
!11980 = !DILocation(line: 463, column: 20, scope: !11976)
!11981 = !DILocation(line: 466, column: 7, scope: !11982)
!11982 = distinct !DILexicalBlock(scope: !11976, file: !1198, line: 466, column: 7)
!11983 = !DILocation(line: 466, column: 17, scope: !11982)
!11984 = !DILocation(line: 466, column: 7, scope: !11976)
!11985 = !DILocation(line: 467, column: 15, scope: !11982)
!11986 = !DILocation(line: 467, column: 5, scope: !11982)
!11987 = !DILocation(line: 470, column: 13, scope: !11976)
!11988 = !DILocation(line: 472, column: 3, scope: !11976)
!11989 = !DILocation(line: 472, column: 22, scope: !11976)
!11990 = !DILocation(line: 472, column: 19, scope: !11976)
!11991 = !DILocation(line: 472, column: 32, scope: !11976)
!11992 = !DILocation(line: 472, column: 46, scope: !11976)
!11993 = !DILocation(line: 472, column: 36, scope: !11976)
!11994 = !DILocation(line: 472, column: 35, scope: !11976)
!11995 = !DILocation(line: 0, scope: !11976)
!11996 = !DILocation(line: 473, column: 15, scope: !11976)
!11997 = distinct !{!11997, !11988, !11998}
!11998 = !DILocation(line: 473, column: 18, scope: !11976)
!11999 = !DILocation(line: 475, column: 10, scope: !11976)
!12000 = !DILocation(line: 475, column: 3, scope: !11976)
!12001 = distinct !DISubprogram(name: "is_prime", scope: !1198, file: !1198, line: 444, type: !12002, scopeLine: 445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12002 = !DISubroutineType(types: !12003)
!12003 = !{!141, !149}
!12004 = !DILocalVariable(name: "candidate", arg: 1, scope: !12001, file: !1198, line: 444, type: !149)
!12005 = !DILocation(line: 444, column: 18, scope: !12001)
!12006 = !DILocalVariable(name: "divisor", scope: !12001, file: !1198, line: 446, type: !149)
!12007 = !DILocation(line: 446, column: 10, scope: !12001)
!12008 = !DILocalVariable(name: "square", scope: !12001, file: !1198, line: 447, type: !149)
!12009 = !DILocation(line: 447, column: 10, scope: !12001)
!12010 = !DILocation(line: 447, column: 19, scope: !12001)
!12011 = !DILocation(line: 447, column: 29, scope: !12001)
!12012 = !DILocation(line: 447, column: 27, scope: !12001)
!12013 = !DILocation(line: 449, column: 3, scope: !12001)
!12014 = !DILocation(line: 449, column: 10, scope: !12001)
!12015 = !DILocation(line: 449, column: 19, scope: !12001)
!12016 = !DILocation(line: 449, column: 17, scope: !12001)
!12017 = !DILocation(line: 449, column: 29, scope: !12001)
!12018 = !DILocation(line: 449, column: 33, scope: !12001)
!12019 = !DILocation(line: 449, column: 45, scope: !12001)
!12020 = !DILocation(line: 449, column: 43, scope: !12001)
!12021 = !DILocation(line: 0, scope: !12001)
!12022 = !DILocation(line: 451, column: 14, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !12001, file: !1198, line: 450, column: 5)
!12024 = !DILocation(line: 452, column: 21, scope: !12023)
!12025 = !DILocation(line: 452, column: 19, scope: !12023)
!12026 = !DILocation(line: 452, column: 14, scope: !12023)
!12027 = !DILocation(line: 453, column: 14, scope: !12023)
!12028 = distinct !{!12028, !12013, !12029}
!12029 = !DILocation(line: 454, column: 5, scope: !12001)
!12030 = !DILocation(line: 456, column: 11, scope: !12001)
!12031 = !DILocation(line: 456, column: 23, scope: !12001)
!12032 = !DILocation(line: 456, column: 21, scope: !12001)
!12033 = !DILocation(line: 456, column: 10, scope: !12001)
!12034 = !DILocation(line: 456, column: 3, scope: !12001)
!12035 = distinct !DISubprogram(name: "hash_clear", scope: !1198, file: !1198, line: 653, type: !12036, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12036 = !DISubroutineType(types: !12037)
!12037 = !{null, !1237}
!12038 = !DILocalVariable(name: "table", arg: 1, scope: !12035, file: !1198, line: 653, type: !1237)
!12039 = !DILocation(line: 653, column: 25, scope: !12035)
!12040 = !DILocalVariable(name: "bucket", scope: !12035, file: !1198, line: 655, type: !1201)
!12041 = !DILocation(line: 655, column: 22, scope: !12035)
!12042 = !DILocation(line: 657, column: 17, scope: !12043)
!12043 = distinct !DILexicalBlock(scope: !12035, file: !1198, line: 657, column: 3)
!12044 = !DILocation(line: 657, column: 24, scope: !12043)
!12045 = !DILocation(line: 657, column: 15, scope: !12043)
!12046 = !DILocation(line: 657, column: 8, scope: !12043)
!12047 = !DILocation(line: 657, column: 32, scope: !12048)
!12048 = distinct !DILexicalBlock(scope: !12043, file: !1198, line: 657, column: 3)
!12049 = !DILocation(line: 657, column: 41, scope: !12048)
!12050 = !DILocation(line: 657, column: 48, scope: !12048)
!12051 = !DILocation(line: 657, column: 39, scope: !12048)
!12052 = !DILocation(line: 657, column: 3, scope: !12043)
!12053 = !DILocation(line: 659, column: 11, scope: !12054)
!12054 = distinct !DILexicalBlock(scope: !12055, file: !1198, line: 659, column: 11)
!12055 = distinct !DILexicalBlock(scope: !12048, file: !1198, line: 658, column: 5)
!12056 = !DILocation(line: 659, column: 19, scope: !12054)
!12057 = !DILocation(line: 659, column: 11, scope: !12055)
!12058 = !DILocalVariable(name: "cursor", scope: !12059, file: !1198, line: 661, type: !1201)
!12059 = distinct !DILexicalBlock(scope: !12054, file: !1198, line: 660, column: 9)
!12060 = !DILocation(line: 661, column: 30, scope: !12059)
!12061 = !DILocalVariable(name: "next", scope: !12059, file: !1198, line: 662, type: !1201)
!12062 = !DILocation(line: 662, column: 30, scope: !12059)
!12063 = !DILocation(line: 665, column: 25, scope: !12064)
!12064 = distinct !DILexicalBlock(scope: !12059, file: !1198, line: 665, column: 11)
!12065 = !DILocation(line: 665, column: 33, scope: !12064)
!12066 = !DILocation(line: 665, column: 23, scope: !12064)
!12067 = !DILocation(line: 665, column: 16, scope: !12064)
!12068 = !DILocation(line: 665, column: 39, scope: !12069)
!12069 = distinct !DILexicalBlock(scope: !12064, file: !1198, line: 665, column: 11)
!12070 = !DILocation(line: 665, column: 11, scope: !12064)
!12071 = !DILocation(line: 667, column: 19, scope: !12072)
!12072 = distinct !DILexicalBlock(scope: !12073, file: !1198, line: 667, column: 19)
!12073 = distinct !DILexicalBlock(scope: !12069, file: !1198, line: 666, column: 13)
!12074 = !DILocation(line: 667, column: 26, scope: !12072)
!12075 = !DILocation(line: 667, column: 19, scope: !12073)
!12076 = !DILocation(line: 668, column: 17, scope: !12072)
!12077 = !DILocation(line: 668, column: 24, scope: !12072)
!12078 = !DILocation(line: 668, column: 36, scope: !12072)
!12079 = !DILocation(line: 668, column: 44, scope: !12072)
!12080 = !DILocation(line: 669, column: 15, scope: !12073)
!12081 = !DILocation(line: 669, column: 23, scope: !12073)
!12082 = !DILocation(line: 669, column: 28, scope: !12073)
!12083 = !DILocation(line: 671, column: 22, scope: !12073)
!12084 = !DILocation(line: 671, column: 30, scope: !12073)
!12085 = !DILocation(line: 671, column: 20, scope: !12073)
!12086 = !DILocation(line: 674, column: 30, scope: !12073)
!12087 = !DILocation(line: 674, column: 37, scope: !12073)
!12088 = !DILocation(line: 674, column: 15, scope: !12073)
!12089 = !DILocation(line: 674, column: 23, scope: !12073)
!12090 = !DILocation(line: 674, column: 28, scope: !12073)
!12091 = !DILocation(line: 675, column: 40, scope: !12073)
!12092 = !DILocation(line: 675, column: 15, scope: !12073)
!12093 = !DILocation(line: 675, column: 22, scope: !12073)
!12094 = !DILocation(line: 675, column: 38, scope: !12073)
!12095 = !DILocation(line: 676, column: 13, scope: !12073)
!12096 = !DILocation(line: 665, column: 56, scope: !12069)
!12097 = !DILocation(line: 665, column: 54, scope: !12069)
!12098 = !DILocation(line: 665, column: 11, scope: !12069)
!12099 = distinct !{!12099, !12070, !12100}
!12100 = !DILocation(line: 676, column: 13, scope: !12064)
!12101 = !DILocation(line: 679, column: 15, scope: !12102)
!12102 = distinct !DILexicalBlock(scope: !12059, file: !1198, line: 679, column: 15)
!12103 = !DILocation(line: 679, column: 22, scope: !12102)
!12104 = !DILocation(line: 679, column: 15, scope: !12059)
!12105 = !DILocation(line: 680, column: 13, scope: !12102)
!12106 = !DILocation(line: 680, column: 20, scope: !12102)
!12107 = !DILocation(line: 680, column: 32, scope: !12102)
!12108 = !DILocation(line: 680, column: 40, scope: !12102)
!12109 = !DILocation(line: 681, column: 11, scope: !12059)
!12110 = !DILocation(line: 681, column: 19, scope: !12059)
!12111 = !DILocation(line: 681, column: 24, scope: !12059)
!12112 = !DILocation(line: 682, column: 11, scope: !12059)
!12113 = !DILocation(line: 682, column: 19, scope: !12059)
!12114 = !DILocation(line: 682, column: 24, scope: !12059)
!12115 = !DILocation(line: 683, column: 9, scope: !12059)
!12116 = !DILocation(line: 684, column: 5, scope: !12055)
!12117 = !DILocation(line: 657, column: 68, scope: !12048)
!12118 = !DILocation(line: 657, column: 3, scope: !12048)
!12119 = distinct !{!12119, !12052, !12120}
!12120 = !DILocation(line: 684, column: 5, scope: !12043)
!12121 = !DILocation(line: 686, column: 3, scope: !12035)
!12122 = !DILocation(line: 686, column: 10, scope: !12035)
!12123 = !DILocation(line: 686, column: 25, scope: !12035)
!12124 = !DILocation(line: 687, column: 3, scope: !12035)
!12125 = !DILocation(line: 687, column: 10, scope: !12035)
!12126 = !DILocation(line: 687, column: 20, scope: !12035)
!12127 = !DILocation(line: 688, column: 1, scope: !12035)
!12128 = distinct !DISubprogram(name: "hash_free", scope: !1198, file: !1198, line: 696, type: !12036, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12129 = !DILocalVariable(name: "table", arg: 1, scope: !12128, file: !1198, line: 696, type: !1237)
!12130 = !DILocation(line: 696, column: 24, scope: !12128)
!12131 = !DILocalVariable(name: "bucket", scope: !12128, file: !1198, line: 698, type: !1201)
!12132 = !DILocation(line: 698, column: 22, scope: !12128)
!12133 = !DILocalVariable(name: "cursor", scope: !12128, file: !1198, line: 699, type: !1201)
!12134 = !DILocation(line: 699, column: 22, scope: !12128)
!12135 = !DILocalVariable(name: "next", scope: !12128, file: !1198, line: 700, type: !1201)
!12136 = !DILocation(line: 700, column: 22, scope: !12128)
!12137 = !DILocation(line: 703, column: 7, scope: !12138)
!12138 = distinct !DILexicalBlock(scope: !12128, file: !1198, line: 703, column: 7)
!12139 = !DILocation(line: 703, column: 14, scope: !12138)
!12140 = !DILocation(line: 703, column: 25, scope: !12138)
!12141 = !DILocation(line: 703, column: 28, scope: !12138)
!12142 = !DILocation(line: 703, column: 35, scope: !12138)
!12143 = !DILocation(line: 703, column: 7, scope: !12128)
!12144 = !DILocation(line: 705, column: 21, scope: !12145)
!12145 = distinct !DILexicalBlock(scope: !12146, file: !1198, line: 705, column: 7)
!12146 = distinct !DILexicalBlock(scope: !12138, file: !1198, line: 704, column: 5)
!12147 = !DILocation(line: 705, column: 28, scope: !12145)
!12148 = !DILocation(line: 705, column: 19, scope: !12145)
!12149 = !DILocation(line: 705, column: 12, scope: !12145)
!12150 = !DILocation(line: 705, column: 36, scope: !12151)
!12151 = distinct !DILexicalBlock(scope: !12145, file: !1198, line: 705, column: 7)
!12152 = !DILocation(line: 705, column: 45, scope: !12151)
!12153 = !DILocation(line: 705, column: 52, scope: !12151)
!12154 = !DILocation(line: 705, column: 43, scope: !12151)
!12155 = !DILocation(line: 705, column: 7, scope: !12145)
!12156 = !DILocation(line: 707, column: 15, scope: !12157)
!12157 = distinct !DILexicalBlock(scope: !12158, file: !1198, line: 707, column: 15)
!12158 = distinct !DILexicalBlock(scope: !12151, file: !1198, line: 706, column: 9)
!12159 = !DILocation(line: 707, column: 23, scope: !12157)
!12160 = !DILocation(line: 707, column: 15, scope: !12158)
!12161 = !DILocation(line: 709, column: 29, scope: !12162)
!12162 = distinct !DILexicalBlock(scope: !12163, file: !1198, line: 709, column: 15)
!12163 = distinct !DILexicalBlock(scope: !12157, file: !1198, line: 708, column: 13)
!12164 = !DILocation(line: 709, column: 27, scope: !12162)
!12165 = !DILocation(line: 709, column: 20, scope: !12162)
!12166 = !DILocation(line: 709, column: 37, scope: !12167)
!12167 = distinct !DILexicalBlock(scope: !12162, file: !1198, line: 709, column: 15)
!12168 = !DILocation(line: 709, column: 15, scope: !12162)
!12169 = !DILocation(line: 710, column: 17, scope: !12167)
!12170 = !DILocation(line: 710, column: 24, scope: !12167)
!12171 = !DILocation(line: 710, column: 36, scope: !12167)
!12172 = !DILocation(line: 710, column: 44, scope: !12167)
!12173 = !DILocation(line: 709, column: 54, scope: !12167)
!12174 = !DILocation(line: 709, column: 62, scope: !12167)
!12175 = !DILocation(line: 709, column: 52, scope: !12167)
!12176 = !DILocation(line: 709, column: 15, scope: !12167)
!12177 = distinct !{!12177, !12168, !12178}
!12178 = !DILocation(line: 710, column: 48, scope: !12162)
!12179 = !DILocation(line: 711, column: 13, scope: !12163)
!12180 = !DILocation(line: 712, column: 9, scope: !12158)
!12181 = !DILocation(line: 705, column: 72, scope: !12151)
!12182 = !DILocation(line: 705, column: 7, scope: !12151)
!12183 = distinct !{!12183, !12155, !12184}
!12184 = !DILocation(line: 712, column: 9, scope: !12145)
!12185 = !DILocation(line: 713, column: 5, scope: !12146)
!12186 = !DILocation(line: 722, column: 17, scope: !12187)
!12187 = distinct !DILexicalBlock(scope: !12128, file: !1198, line: 722, column: 3)
!12188 = !DILocation(line: 722, column: 24, scope: !12187)
!12189 = !DILocation(line: 722, column: 15, scope: !12187)
!12190 = !DILocation(line: 722, column: 8, scope: !12187)
!12191 = !DILocation(line: 722, column: 32, scope: !12192)
!12192 = distinct !DILexicalBlock(scope: !12187, file: !1198, line: 722, column: 3)
!12193 = !DILocation(line: 722, column: 41, scope: !12192)
!12194 = !DILocation(line: 722, column: 48, scope: !12192)
!12195 = !DILocation(line: 722, column: 39, scope: !12192)
!12196 = !DILocation(line: 722, column: 3, scope: !12187)
!12197 = !DILocation(line: 724, column: 21, scope: !12198)
!12198 = distinct !DILexicalBlock(scope: !12199, file: !1198, line: 724, column: 7)
!12199 = distinct !DILexicalBlock(scope: !12192, file: !1198, line: 723, column: 5)
!12200 = !DILocation(line: 724, column: 29, scope: !12198)
!12201 = !DILocation(line: 724, column: 19, scope: !12198)
!12202 = !DILocation(line: 724, column: 12, scope: !12198)
!12203 = !DILocation(line: 724, column: 35, scope: !12204)
!12204 = distinct !DILexicalBlock(scope: !12198, file: !1198, line: 724, column: 7)
!12205 = !DILocation(line: 724, column: 7, scope: !12198)
!12206 = !DILocation(line: 726, column: 18, scope: !12207)
!12207 = distinct !DILexicalBlock(scope: !12204, file: !1198, line: 725, column: 9)
!12208 = !DILocation(line: 726, column: 26, scope: !12207)
!12209 = !DILocation(line: 726, column: 16, scope: !12207)
!12210 = !DILocation(line: 727, column: 17, scope: !12207)
!12211 = !DILocation(line: 727, column: 11, scope: !12207)
!12212 = !DILocation(line: 728, column: 9, scope: !12207)
!12213 = !DILocation(line: 724, column: 52, scope: !12204)
!12214 = !DILocation(line: 724, column: 50, scope: !12204)
!12215 = !DILocation(line: 724, column: 7, scope: !12204)
!12216 = distinct !{!12216, !12205, !12217}
!12217 = !DILocation(line: 728, column: 9, scope: !12198)
!12218 = !DILocation(line: 729, column: 5, scope: !12199)
!12219 = !DILocation(line: 722, column: 68, scope: !12192)
!12220 = !DILocation(line: 722, column: 3, scope: !12192)
!12221 = distinct !{!12221, !12196, !12222}
!12222 = !DILocation(line: 729, column: 5, scope: !12187)
!12223 = !DILocation(line: 732, column: 17, scope: !12224)
!12224 = distinct !DILexicalBlock(scope: !12128, file: !1198, line: 732, column: 3)
!12225 = !DILocation(line: 732, column: 24, scope: !12224)
!12226 = !DILocation(line: 732, column: 15, scope: !12224)
!12227 = !DILocation(line: 732, column: 8, scope: !12224)
!12228 = !DILocation(line: 732, column: 41, scope: !12229)
!12229 = distinct !DILexicalBlock(scope: !12224, file: !1198, line: 732, column: 3)
!12230 = !DILocation(line: 732, column: 3, scope: !12224)
!12231 = !DILocation(line: 734, column: 14, scope: !12232)
!12232 = distinct !DILexicalBlock(scope: !12229, file: !1198, line: 733, column: 5)
!12233 = !DILocation(line: 734, column: 22, scope: !12232)
!12234 = !DILocation(line: 734, column: 12, scope: !12232)
!12235 = !DILocation(line: 735, column: 13, scope: !12232)
!12236 = !DILocation(line: 735, column: 7, scope: !12232)
!12237 = !DILocation(line: 736, column: 5, scope: !12232)
!12238 = !DILocation(line: 732, column: 58, scope: !12229)
!12239 = !DILocation(line: 732, column: 56, scope: !12229)
!12240 = !DILocation(line: 732, column: 3, scope: !12229)
!12241 = distinct !{!12241, !12230, !12242}
!12242 = !DILocation(line: 736, column: 5, scope: !12224)
!12243 = !DILocation(line: 741, column: 9, scope: !12128)
!12244 = !DILocation(line: 741, column: 16, scope: !12128)
!12245 = !DILocation(line: 741, column: 3, scope: !12128)
!12246 = !DILocation(line: 742, column: 9, scope: !12128)
!12247 = !DILocation(line: 742, column: 3, scope: !12128)
!12248 = !DILocation(line: 743, column: 1, scope: !12128)
!12249 = distinct !DISubprogram(name: "hash_rehash", scope: !1198, file: !1198, line: 943, type: !12250, scopeLine: 944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12250 = !DISubroutineType(types: !12251)
!12251 = !{!141, !1237, !149}
!12252 = !DILocalVariable(name: "table", arg: 1, scope: !12249, file: !1198, line: 943, type: !1237)
!12253 = !DILocation(line: 943, column: 26, scope: !12249)
!12254 = !DILocalVariable(name: "candidate", arg: 2, scope: !12249, file: !1198, line: 943, type: !149)
!12255 = !DILocation(line: 943, column: 40, scope: !12249)
!12256 = !DILocalVariable(name: "storage", scope: !12249, file: !1198, line: 945, type: !1196)
!12257 = !DILocation(line: 945, column: 14, scope: !12249)
!12258 = !DILocalVariable(name: "new_table", scope: !12249, file: !1198, line: 946, type: !1237)
!12259 = !DILocation(line: 946, column: 15, scope: !12249)
!12260 = !DILocalVariable(name: "new_size", scope: !12249, file: !1198, line: 947, type: !149)
!12261 = !DILocation(line: 947, column: 10, scope: !12249)
!12262 = !DILocation(line: 947, column: 42, scope: !12249)
!12263 = !DILocation(line: 947, column: 53, scope: !12249)
!12264 = !DILocation(line: 947, column: 60, scope: !12249)
!12265 = !DILocation(line: 947, column: 21, scope: !12249)
!12266 = !DILocation(line: 949, column: 8, scope: !12267)
!12267 = distinct !DILexicalBlock(scope: !12249, file: !1198, line: 949, column: 7)
!12268 = !DILocation(line: 949, column: 7, scope: !12249)
!12269 = !DILocation(line: 950, column: 5, scope: !12267)
!12270 = !DILocation(line: 951, column: 7, scope: !12271)
!12271 = distinct !DILexicalBlock(scope: !12249, file: !1198, line: 951, column: 7)
!12272 = !DILocation(line: 951, column: 19, scope: !12271)
!12273 = !DILocation(line: 951, column: 26, scope: !12271)
!12274 = !DILocation(line: 951, column: 16, scope: !12271)
!12275 = !DILocation(line: 951, column: 7, scope: !12249)
!12276 = !DILocation(line: 952, column: 5, scope: !12271)
!12277 = !DILocation(line: 953, column: 13, scope: !12249)
!12278 = !DILocation(line: 954, column: 31, scope: !12249)
!12279 = !DILocation(line: 954, column: 23, scope: !12249)
!12280 = !DILocation(line: 954, column: 3, scope: !12249)
!12281 = !DILocation(line: 954, column: 14, scope: !12249)
!12282 = !DILocation(line: 954, column: 21, scope: !12249)
!12283 = !DILocation(line: 955, column: 7, scope: !12284)
!12284 = distinct !DILexicalBlock(scope: !12249, file: !1198, line: 955, column: 7)
!12285 = !DILocation(line: 955, column: 18, scope: !12284)
!12286 = !DILocation(line: 955, column: 25, scope: !12284)
!12287 = !DILocation(line: 955, column: 7, scope: !12249)
!12288 = !DILocation(line: 956, column: 5, scope: !12284)
!12289 = !DILocation(line: 957, column: 26, scope: !12249)
!12290 = !DILocation(line: 957, column: 3, scope: !12249)
!12291 = !DILocation(line: 957, column: 14, scope: !12249)
!12292 = !DILocation(line: 957, column: 24, scope: !12249)
!12293 = !DILocation(line: 958, column: 29, scope: !12249)
!12294 = !DILocation(line: 958, column: 40, scope: !12249)
!12295 = !DILocation(line: 958, column: 49, scope: !12249)
!12296 = !DILocation(line: 958, column: 47, scope: !12249)
!12297 = !DILocation(line: 958, column: 3, scope: !12249)
!12298 = !DILocation(line: 958, column: 14, scope: !12249)
!12299 = !DILocation(line: 958, column: 27, scope: !12249)
!12300 = !DILocation(line: 959, column: 3, scope: !12249)
!12301 = !DILocation(line: 959, column: 14, scope: !12249)
!12302 = !DILocation(line: 959, column: 29, scope: !12249)
!12303 = !DILocation(line: 960, column: 3, scope: !12249)
!12304 = !DILocation(line: 960, column: 14, scope: !12249)
!12305 = !DILocation(line: 960, column: 24, scope: !12249)
!12306 = !DILocation(line: 961, column: 23, scope: !12249)
!12307 = !DILocation(line: 961, column: 30, scope: !12249)
!12308 = !DILocation(line: 961, column: 3, scope: !12249)
!12309 = !DILocation(line: 961, column: 14, scope: !12249)
!12310 = !DILocation(line: 961, column: 21, scope: !12249)
!12311 = !DILocation(line: 962, column: 23, scope: !12249)
!12312 = !DILocation(line: 962, column: 30, scope: !12249)
!12313 = !DILocation(line: 962, column: 3, scope: !12249)
!12314 = !DILocation(line: 962, column: 14, scope: !12249)
!12315 = !DILocation(line: 962, column: 21, scope: !12249)
!12316 = !DILocation(line: 963, column: 27, scope: !12249)
!12317 = !DILocation(line: 963, column: 34, scope: !12249)
!12318 = !DILocation(line: 963, column: 3, scope: !12249)
!12319 = !DILocation(line: 963, column: 14, scope: !12249)
!12320 = !DILocation(line: 963, column: 25, scope: !12249)
!12321 = !DILocation(line: 964, column: 27, scope: !12249)
!12322 = !DILocation(line: 964, column: 34, scope: !12249)
!12323 = !DILocation(line: 964, column: 3, scope: !12249)
!12324 = !DILocation(line: 964, column: 14, scope: !12249)
!12325 = !DILocation(line: 964, column: 25, scope: !12249)
!12326 = !DILocation(line: 984, column: 32, scope: !12249)
!12327 = !DILocation(line: 984, column: 39, scope: !12249)
!12328 = !DILocation(line: 984, column: 3, scope: !12249)
!12329 = !DILocation(line: 984, column: 14, scope: !12249)
!12330 = !DILocation(line: 984, column: 30, scope: !12249)
!12331 = !DILocation(line: 986, column: 25, scope: !12332)
!12332 = distinct !DILexicalBlock(scope: !12249, file: !1198, line: 986, column: 7)
!12333 = !DILocation(line: 986, column: 36, scope: !12332)
!12334 = !DILocation(line: 986, column: 7, scope: !12332)
!12335 = !DILocation(line: 986, column: 7, scope: !12249)
!12336 = !DILocation(line: 989, column: 13, scope: !12337)
!12337 = distinct !DILexicalBlock(scope: !12332, file: !1198, line: 987, column: 5)
!12338 = !DILocation(line: 989, column: 20, scope: !12337)
!12339 = !DILocation(line: 989, column: 7, scope: !12337)
!12340 = !DILocation(line: 990, column: 23, scope: !12337)
!12341 = !DILocation(line: 990, column: 34, scope: !12337)
!12342 = !DILocation(line: 990, column: 7, scope: !12337)
!12343 = !DILocation(line: 990, column: 14, scope: !12337)
!12344 = !DILocation(line: 990, column: 21, scope: !12337)
!12345 = !DILocation(line: 991, column: 29, scope: !12337)
!12346 = !DILocation(line: 991, column: 40, scope: !12337)
!12347 = !DILocation(line: 991, column: 7, scope: !12337)
!12348 = !DILocation(line: 991, column: 14, scope: !12337)
!12349 = !DILocation(line: 991, column: 27, scope: !12337)
!12350 = !DILocation(line: 992, column: 26, scope: !12337)
!12351 = !DILocation(line: 992, column: 37, scope: !12337)
!12352 = !DILocation(line: 992, column: 7, scope: !12337)
!12353 = !DILocation(line: 992, column: 14, scope: !12337)
!12354 = !DILocation(line: 992, column: 24, scope: !12337)
!12355 = !DILocation(line: 993, column: 31, scope: !12337)
!12356 = !DILocation(line: 993, column: 42, scope: !12337)
!12357 = !DILocation(line: 993, column: 7, scope: !12337)
!12358 = !DILocation(line: 993, column: 14, scope: !12337)
!12359 = !DILocation(line: 993, column: 29, scope: !12337)
!12360 = !DILocation(line: 994, column: 32, scope: !12337)
!12361 = !DILocation(line: 994, column: 43, scope: !12337)
!12362 = !DILocation(line: 994, column: 7, scope: !12337)
!12363 = !DILocation(line: 994, column: 14, scope: !12337)
!12364 = !DILocation(line: 994, column: 30, scope: !12337)
!12365 = !DILocation(line: 996, column: 7, scope: !12337)
!12366 = !DILocation(line: 1012, column: 28, scope: !12249)
!12367 = !DILocation(line: 1012, column: 39, scope: !12249)
!12368 = !DILocation(line: 1012, column: 3, scope: !12249)
!12369 = !DILocation(line: 1012, column: 10, scope: !12249)
!12370 = !DILocation(line: 1012, column: 26, scope: !12249)
!12371 = !DILocation(line: 1013, column: 28, scope: !12372)
!12372 = distinct !DILexicalBlock(scope: !12249, file: !1198, line: 1013, column: 7)
!12373 = !DILocation(line: 1013, column: 35, scope: !12372)
!12374 = !DILocation(line: 1013, column: 10, scope: !12372)
!12375 = !DILocation(line: 1014, column: 10, scope: !12372)
!12376 = !DILocation(line: 1014, column: 31, scope: !12372)
!12377 = !DILocation(line: 1014, column: 38, scope: !12372)
!12378 = !DILocation(line: 1014, column: 13, scope: !12372)
!12379 = !DILocation(line: 1013, column: 7, scope: !12249)
!12380 = !DILocation(line: 1015, column: 5, scope: !12372)
!12381 = !DILocation(line: 1017, column: 9, scope: !12249)
!12382 = !DILocation(line: 1017, column: 20, scope: !12249)
!12383 = !DILocation(line: 1017, column: 3, scope: !12249)
!12384 = !DILocation(line: 1018, column: 3, scope: !12249)
!12385 = !DILocation(line: 1019, column: 1, scope: !12249)
!12386 = distinct !DISubprogram(name: "transfer_entries", scope: !1198, file: !1198, line: 860, type: !12387, scopeLine: 861, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12387 = !DISubroutineType(types: !12388)
!12388 = !{!141, !1237, !1237, !141}
!12389 = !DILocalVariable(name: "dst", arg: 1, scope: !12386, file: !1198, line: 860, type: !1237)
!12390 = !DILocation(line: 860, column: 31, scope: !12386)
!12391 = !DILocalVariable(name: "src", arg: 2, scope: !12386, file: !1198, line: 860, type: !1237)
!12392 = !DILocation(line: 860, column: 48, scope: !12386)
!12393 = !DILocalVariable(name: "safe", arg: 3, scope: !12386, file: !1198, line: 860, type: !141)
!12394 = !DILocation(line: 860, column: 58, scope: !12386)
!12395 = !DILocalVariable(name: "bucket", scope: !12386, file: !1198, line: 862, type: !1201)
!12396 = !DILocation(line: 862, column: 22, scope: !12386)
!12397 = !DILocalVariable(name: "cursor", scope: !12386, file: !1198, line: 863, type: !1201)
!12398 = !DILocation(line: 863, column: 22, scope: !12386)
!12399 = !DILocalVariable(name: "next", scope: !12386, file: !1198, line: 864, type: !1201)
!12400 = !DILocation(line: 864, column: 22, scope: !12386)
!12401 = !DILocation(line: 865, column: 17, scope: !12402)
!12402 = distinct !DILexicalBlock(scope: !12386, file: !1198, line: 865, column: 3)
!12403 = !DILocation(line: 865, column: 22, scope: !12402)
!12404 = !DILocation(line: 865, column: 15, scope: !12402)
!12405 = !DILocation(line: 865, column: 8, scope: !12402)
!12406 = !DILocation(line: 865, column: 30, scope: !12407)
!12407 = distinct !DILexicalBlock(scope: !12402, file: !1198, line: 865, column: 3)
!12408 = !DILocation(line: 865, column: 39, scope: !12407)
!12409 = !DILocation(line: 865, column: 44, scope: !12407)
!12410 = !DILocation(line: 865, column: 37, scope: !12407)
!12411 = !DILocation(line: 865, column: 3, scope: !12402)
!12412 = !DILocation(line: 866, column: 9, scope: !12413)
!12413 = distinct !DILexicalBlock(scope: !12407, file: !1198, line: 866, column: 9)
!12414 = !DILocation(line: 866, column: 17, scope: !12413)
!12415 = !DILocation(line: 866, column: 9, scope: !12407)
!12416 = !DILocalVariable(name: "data", scope: !12417, file: !1198, line: 868, type: !167)
!12417 = distinct !DILexicalBlock(scope: !12413, file: !1198, line: 867, column: 7)
!12418 = !DILocation(line: 868, column: 15, scope: !12417)
!12419 = !DILocalVariable(name: "new_bucket", scope: !12417, file: !1198, line: 869, type: !1201)
!12420 = !DILocation(line: 869, column: 28, scope: !12417)
!12421 = !DILocation(line: 877, column: 23, scope: !12422)
!12422 = distinct !DILexicalBlock(scope: !12417, file: !1198, line: 877, column: 9)
!12423 = !DILocation(line: 877, column: 31, scope: !12422)
!12424 = !DILocation(line: 877, column: 21, scope: !12422)
!12425 = !DILocation(line: 877, column: 14, scope: !12422)
!12426 = !DILocation(line: 877, column: 37, scope: !12427)
!12427 = distinct !DILexicalBlock(scope: !12422, file: !1198, line: 877, column: 9)
!12428 = !DILocation(line: 877, column: 9, scope: !12422)
!12429 = !DILocation(line: 879, column: 20, scope: !12430)
!12430 = distinct !DILexicalBlock(scope: !12427, file: !1198, line: 878, column: 11)
!12431 = !DILocation(line: 879, column: 28, scope: !12430)
!12432 = !DILocation(line: 879, column: 18, scope: !12430)
!12433 = !DILocation(line: 880, column: 39, scope: !12430)
!12434 = !DILocation(line: 880, column: 44, scope: !12430)
!12435 = !DILocation(line: 880, column: 26, scope: !12430)
!12436 = !DILocation(line: 880, column: 24, scope: !12430)
!12437 = !DILocation(line: 882, column: 20, scope: !12430)
!12438 = !DILocation(line: 882, column: 28, scope: !12430)
!12439 = !DILocation(line: 882, column: 18, scope: !12430)
!12440 = !DILocation(line: 884, column: 17, scope: !12441)
!12441 = distinct !DILexicalBlock(scope: !12430, file: !1198, line: 884, column: 17)
!12442 = !DILocation(line: 884, column: 29, scope: !12441)
!12443 = !DILocation(line: 884, column: 17, scope: !12430)
!12444 = !DILocation(line: 888, column: 32, scope: !12445)
!12445 = distinct !DILexicalBlock(scope: !12441, file: !1198, line: 885, column: 15)
!12446 = !DILocation(line: 888, column: 44, scope: !12445)
!12447 = !DILocation(line: 888, column: 17, scope: !12445)
!12448 = !DILocation(line: 888, column: 25, scope: !12445)
!12449 = !DILocation(line: 888, column: 30, scope: !12445)
!12450 = !DILocation(line: 889, column: 36, scope: !12445)
!12451 = !DILocation(line: 889, column: 17, scope: !12445)
!12452 = !DILocation(line: 889, column: 29, scope: !12445)
!12453 = !DILocation(line: 889, column: 34, scope: !12445)
!12454 = !DILocation(line: 890, column: 15, scope: !12445)
!12455 = !DILocation(line: 895, column: 36, scope: !12456)
!12456 = distinct !DILexicalBlock(scope: !12441, file: !1198, line: 892, column: 15)
!12457 = !DILocation(line: 895, column: 17, scope: !12456)
!12458 = !DILocation(line: 895, column: 29, scope: !12456)
!12459 = !DILocation(line: 895, column: 34, scope: !12456)
!12460 = !DILocation(line: 896, column: 17, scope: !12456)
!12461 = !DILocation(line: 896, column: 22, scope: !12456)
!12462 = !DILocation(line: 896, column: 36, scope: !12456)
!12463 = !DILocation(line: 897, column: 29, scope: !12456)
!12464 = !DILocation(line: 897, column: 34, scope: !12456)
!12465 = !DILocation(line: 897, column: 17, scope: !12456)
!12466 = !DILocation(line: 899, column: 11, scope: !12430)
!12467 = !DILocation(line: 877, column: 54, scope: !12427)
!12468 = !DILocation(line: 877, column: 52, scope: !12427)
!12469 = !DILocation(line: 877, column: 9, scope: !12427)
!12470 = distinct !{!12470, !12428, !12471}
!12471 = !DILocation(line: 899, column: 11, scope: !12422)
!12472 = !DILocation(line: 903, column: 16, scope: !12417)
!12473 = !DILocation(line: 903, column: 24, scope: !12417)
!12474 = !DILocation(line: 903, column: 14, scope: !12417)
!12475 = !DILocation(line: 904, column: 9, scope: !12417)
!12476 = !DILocation(line: 904, column: 17, scope: !12417)
!12477 = !DILocation(line: 904, column: 22, scope: !12417)
!12478 = !DILocation(line: 905, column: 13, scope: !12479)
!12479 = distinct !DILexicalBlock(scope: !12417, file: !1198, line: 905, column: 13)
!12480 = !DILocation(line: 905, column: 13, scope: !12417)
!12481 = !DILocation(line: 906, column: 11, scope: !12479)
!12482 = !DILocation(line: 907, column: 35, scope: !12417)
!12483 = !DILocation(line: 907, column: 40, scope: !12417)
!12484 = !DILocation(line: 907, column: 22, scope: !12417)
!12485 = !DILocation(line: 907, column: 20, scope: !12417)
!12486 = !DILocation(line: 909, column: 13, scope: !12487)
!12487 = distinct !DILexicalBlock(scope: !12417, file: !1198, line: 909, column: 13)
!12488 = !DILocation(line: 909, column: 25, scope: !12487)
!12489 = !DILocation(line: 909, column: 13, scope: !12417)
!12490 = !DILocalVariable(name: "new_entry", scope: !12491, file: !1198, line: 913, type: !1201)
!12491 = distinct !DILexicalBlock(scope: !12487, file: !1198, line: 910, column: 11)
!12492 = !DILocation(line: 913, column: 32, scope: !12491)
!12493 = !DILocation(line: 913, column: 60, scope: !12491)
!12494 = !DILocation(line: 913, column: 44, scope: !12491)
!12495 = !DILocation(line: 915, column: 17, scope: !12496)
!12496 = distinct !DILexicalBlock(scope: !12491, file: !1198, line: 915, column: 17)
!12497 = !DILocation(line: 915, column: 27, scope: !12496)
!12498 = !DILocation(line: 915, column: 17, scope: !12491)
!12499 = !DILocation(line: 916, column: 15, scope: !12496)
!12500 = !DILocation(line: 918, column: 31, scope: !12491)
!12501 = !DILocation(line: 918, column: 13, scope: !12491)
!12502 = !DILocation(line: 918, column: 24, scope: !12491)
!12503 = !DILocation(line: 918, column: 29, scope: !12491)
!12504 = !DILocation(line: 919, column: 31, scope: !12491)
!12505 = !DILocation(line: 919, column: 43, scope: !12491)
!12506 = !DILocation(line: 919, column: 13, scope: !12491)
!12507 = !DILocation(line: 919, column: 24, scope: !12491)
!12508 = !DILocation(line: 919, column: 29, scope: !12491)
!12509 = !DILocation(line: 920, column: 32, scope: !12491)
!12510 = !DILocation(line: 920, column: 13, scope: !12491)
!12511 = !DILocation(line: 920, column: 25, scope: !12491)
!12512 = !DILocation(line: 920, column: 30, scope: !12491)
!12513 = !DILocation(line: 921, column: 11, scope: !12491)
!12514 = !DILocation(line: 925, column: 32, scope: !12515)
!12515 = distinct !DILexicalBlock(scope: !12487, file: !1198, line: 923, column: 11)
!12516 = !DILocation(line: 925, column: 13, scope: !12515)
!12517 = !DILocation(line: 925, column: 25, scope: !12515)
!12518 = !DILocation(line: 925, column: 30, scope: !12515)
!12519 = !DILocation(line: 926, column: 13, scope: !12515)
!12520 = !DILocation(line: 926, column: 18, scope: !12515)
!12521 = !DILocation(line: 926, column: 32, scope: !12515)
!12522 = !DILocation(line: 928, column: 9, scope: !12417)
!12523 = !DILocation(line: 928, column: 17, scope: !12417)
!12524 = !DILocation(line: 928, column: 22, scope: !12417)
!12525 = !DILocation(line: 929, column: 9, scope: !12417)
!12526 = !DILocation(line: 929, column: 14, scope: !12417)
!12527 = !DILocation(line: 929, column: 28, scope: !12417)
!12528 = !DILocation(line: 930, column: 7, scope: !12417)
!12529 = !DILocation(line: 865, column: 64, scope: !12407)
!12530 = !DILocation(line: 865, column: 3, scope: !12407)
!12531 = distinct !{!12531, !12411, !12532}
!12532 = !DILocation(line: 930, column: 7, scope: !12402)
!12533 = !DILocation(line: 931, column: 3, scope: !12386)
!12534 = !DILocation(line: 932, column: 1, scope: !12386)
!12535 = distinct !DISubprogram(name: "free_entry", scope: !1198, file: !1198, line: 776, type: !12536, scopeLine: 777, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12536 = !DISubroutineType(types: !12537)
!12537 = !{null, !1237, !1201}
!12538 = !DILocalVariable(name: "table", arg: 1, scope: !12535, file: !1198, line: 776, type: !1237)
!12539 = !DILocation(line: 776, column: 25, scope: !12535)
!12540 = !DILocalVariable(name: "entry", arg: 2, scope: !12535, file: !1198, line: 776, type: !1201)
!12541 = !DILocation(line: 776, column: 51, scope: !12535)
!12542 = !DILocation(line: 778, column: 3, scope: !12535)
!12543 = !DILocation(line: 778, column: 10, scope: !12535)
!12544 = !DILocation(line: 778, column: 15, scope: !12535)
!12545 = !DILocation(line: 779, column: 17, scope: !12535)
!12546 = !DILocation(line: 779, column: 24, scope: !12535)
!12547 = !DILocation(line: 779, column: 3, scope: !12535)
!12548 = !DILocation(line: 779, column: 10, scope: !12535)
!12549 = !DILocation(line: 779, column: 15, scope: !12535)
!12550 = !DILocation(line: 780, column: 28, scope: !12535)
!12551 = !DILocation(line: 780, column: 3, scope: !12535)
!12552 = !DILocation(line: 780, column: 10, scope: !12535)
!12553 = !DILocation(line: 780, column: 26, scope: !12535)
!12554 = !DILocation(line: 781, column: 1, scope: !12535)
!12555 = distinct !DISubprogram(name: "allocate_entry", scope: !1198, file: !1198, line: 751, type: !12556, scopeLine: 752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12556 = !DISubroutineType(types: !12557)
!12557 = !{!1201, !1237}
!12558 = !DILocalVariable(name: "table", arg: 1, scope: !12555, file: !1198, line: 751, type: !1237)
!12559 = !DILocation(line: 751, column: 29, scope: !12555)
!12560 = !DILocalVariable(name: "new", scope: !12555, file: !1198, line: 753, type: !1201)
!12561 = !DILocation(line: 753, column: 22, scope: !12555)
!12562 = !DILocation(line: 755, column: 7, scope: !12563)
!12563 = distinct !DILexicalBlock(scope: !12555, file: !1198, line: 755, column: 7)
!12564 = !DILocation(line: 755, column: 14, scope: !12563)
!12565 = !DILocation(line: 755, column: 7, scope: !12555)
!12566 = !DILocation(line: 757, column: 13, scope: !12567)
!12567 = distinct !DILexicalBlock(scope: !12563, file: !1198, line: 756, column: 5)
!12568 = !DILocation(line: 757, column: 20, scope: !12567)
!12569 = !DILocation(line: 757, column: 11, scope: !12567)
!12570 = !DILocation(line: 758, column: 32, scope: !12567)
!12571 = !DILocation(line: 758, column: 37, scope: !12567)
!12572 = !DILocation(line: 758, column: 7, scope: !12567)
!12573 = !DILocation(line: 758, column: 14, scope: !12567)
!12574 = !DILocation(line: 758, column: 30, scope: !12567)
!12575 = !DILocation(line: 759, column: 5, scope: !12567)
!12576 = !DILocation(line: 765, column: 13, scope: !12577)
!12577 = distinct !DILexicalBlock(scope: !12563, file: !1198, line: 761, column: 5)
!12578 = !DILocation(line: 765, column: 11, scope: !12577)
!12579 = !DILocation(line: 769, column: 10, scope: !12555)
!12580 = !DILocation(line: 769, column: 3, scope: !12555)
!12581 = distinct !DISubprogram(name: "hash_insert_if_absent", scope: !1198, file: !1198, line: 1038, type: !12582, scopeLine: 1040, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12582 = !DISubroutineType(types: !12583)
!12583 = !{!27, !1237, !181, !180}
!12584 = !DILocalVariable(name: "table", arg: 1, scope: !12581, file: !1198, line: 1038, type: !1237)
!12585 = !DILocation(line: 1038, column: 36, scope: !12581)
!12586 = !DILocalVariable(name: "entry", arg: 2, scope: !12581, file: !1198, line: 1038, type: !181)
!12587 = !DILocation(line: 1038, column: 55, scope: !12581)
!12588 = !DILocalVariable(name: "matched_ent", arg: 3, scope: !12581, file: !1198, line: 1039, type: !180)
!12589 = !DILocation(line: 1039, column: 37, scope: !12581)
!12590 = !DILocalVariable(name: "data", scope: !12581, file: !1198, line: 1041, type: !167)
!12591 = !DILocation(line: 1041, column: 9, scope: !12581)
!12592 = !DILocalVariable(name: "bucket", scope: !12581, file: !1198, line: 1042, type: !1201)
!12593 = !DILocation(line: 1042, column: 22, scope: !12581)
!12594 = !DILocation(line: 1047, column: 9, scope: !12595)
!12595 = distinct !DILexicalBlock(scope: !12581, file: !1198, line: 1047, column: 7)
!12596 = !DILocation(line: 1047, column: 7, scope: !12581)
!12597 = !DILocation(line: 1048, column: 5, scope: !12595)
!12598 = !DILocation(line: 1051, column: 32, scope: !12599)
!12599 = distinct !DILexicalBlock(scope: !12581, file: !1198, line: 1051, column: 7)
!12600 = !DILocation(line: 1051, column: 39, scope: !12599)
!12601 = !DILocation(line: 1051, column: 15, scope: !12599)
!12602 = !DILocation(line: 1051, column: 13, scope: !12599)
!12603 = !DILocation(line: 1051, column: 63, scope: !12599)
!12604 = !DILocation(line: 1051, column: 7, scope: !12581)
!12605 = !DILocation(line: 1053, column: 11, scope: !12606)
!12606 = distinct !DILexicalBlock(scope: !12607, file: !1198, line: 1053, column: 11)
!12607 = distinct !DILexicalBlock(scope: !12599, file: !1198, line: 1052, column: 5)
!12608 = !DILocation(line: 1053, column: 11, scope: !12607)
!12609 = !DILocation(line: 1054, column: 24, scope: !12606)
!12610 = !DILocation(line: 1054, column: 10, scope: !12606)
!12611 = !DILocation(line: 1054, column: 22, scope: !12606)
!12612 = !DILocation(line: 1054, column: 9, scope: !12606)
!12613 = !DILocation(line: 1055, column: 7, scope: !12607)
!12614 = !DILocation(line: 1063, column: 7, scope: !12615)
!12615 = distinct !DILexicalBlock(scope: !12581, file: !1198, line: 1063, column: 7)
!12616 = !DILocation(line: 1063, column: 14, scope: !12615)
!12617 = !DILocation(line: 1064, column: 9, scope: !12615)
!12618 = !DILocation(line: 1064, column: 16, scope: !12615)
!12619 = !DILocation(line: 1064, column: 24, scope: !12615)
!12620 = !DILocation(line: 1064, column: 43, scope: !12615)
!12621 = !DILocation(line: 1064, column: 50, scope: !12615)
!12622 = !DILocation(line: 1064, column: 41, scope: !12615)
!12623 = !DILocation(line: 1064, column: 7, scope: !12615)
!12624 = !DILocation(line: 1063, column: 7, scope: !12581)
!12625 = !DILocation(line: 1068, column: 21, scope: !12626)
!12626 = distinct !DILexicalBlock(scope: !12615, file: !1198, line: 1065, column: 5)
!12627 = !DILocation(line: 1068, column: 7, scope: !12626)
!12628 = !DILocation(line: 1069, column: 11, scope: !12629)
!12629 = distinct !DILexicalBlock(scope: !12626, file: !1198, line: 1069, column: 11)
!12630 = !DILocation(line: 1069, column: 18, scope: !12629)
!12631 = !DILocation(line: 1070, column: 13, scope: !12629)
!12632 = !DILocation(line: 1070, column: 20, scope: !12629)
!12633 = !DILocation(line: 1070, column: 28, scope: !12629)
!12634 = !DILocation(line: 1070, column: 47, scope: !12629)
!12635 = !DILocation(line: 1070, column: 54, scope: !12629)
!12636 = !DILocation(line: 1070, column: 45, scope: !12629)
!12637 = !DILocation(line: 1070, column: 11, scope: !12629)
!12638 = !DILocation(line: 1069, column: 11, scope: !12626)
!12639 = !DILocalVariable(name: "tuning", scope: !12640, file: !1198, line: 1072, type: !1213)
!12640 = distinct !DILexicalBlock(scope: !12629, file: !1198, line: 1071, column: 9)
!12641 = !DILocation(line: 1072, column: 30, scope: !12640)
!12642 = !DILocation(line: 1072, column: 39, scope: !12640)
!12643 = !DILocation(line: 1072, column: 46, scope: !12640)
!12644 = !DILocalVariable(name: "candidate", scope: !12640, file: !1198, line: 1073, type: !1219)
!12645 = !DILocation(line: 1073, column: 17, scope: !12640)
!12646 = !DILocation(line: 1074, column: 14, scope: !12640)
!12647 = !DILocation(line: 1074, column: 22, scope: !12640)
!12648 = !DILocation(line: 1075, column: 17, scope: !12640)
!12649 = !DILocation(line: 1075, column: 24, scope: !12640)
!12650 = !DILocation(line: 1075, column: 36, scope: !12640)
!12651 = !DILocation(line: 1075, column: 44, scope: !12640)
!12652 = !DILocation(line: 1075, column: 34, scope: !12640)
!12653 = !DILocation(line: 1076, column: 17, scope: !12640)
!12654 = !DILocation(line: 1076, column: 24, scope: !12640)
!12655 = !DILocation(line: 1076, column: 36, scope: !12640)
!12656 = !DILocation(line: 1076, column: 44, scope: !12640)
!12657 = !DILocation(line: 1076, column: 34, scope: !12640)
!12658 = !DILocation(line: 1077, column: 19, scope: !12640)
!12659 = !DILocation(line: 1077, column: 27, scope: !12640)
!12660 = !DILocation(line: 1077, column: 17, scope: !12640)
!12661 = !DILocation(line: 1079, column: 27, scope: !12662)
!12662 = distinct !DILexicalBlock(scope: !12640, file: !1198, line: 1079, column: 15)
!12663 = !DILocation(line: 1079, column: 24, scope: !12662)
!12664 = !DILocation(line: 1079, column: 15, scope: !12640)
!12665 = !DILocation(line: 1080, column: 13, scope: !12662)
!12666 = !DILocation(line: 1083, column: 29, scope: !12667)
!12667 = distinct !DILexicalBlock(scope: !12640, file: !1198, line: 1083, column: 15)
!12668 = !DILocation(line: 1083, column: 36, scope: !12667)
!12669 = !DILocation(line: 1083, column: 16, scope: !12667)
!12670 = !DILocation(line: 1083, column: 15, scope: !12640)
!12671 = !DILocation(line: 1084, column: 13, scope: !12667)
!12672 = !DILocation(line: 1087, column: 32, scope: !12673)
!12673 = distinct !DILexicalBlock(scope: !12640, file: !1198, line: 1087, column: 15)
!12674 = !DILocation(line: 1087, column: 39, scope: !12673)
!12675 = !DILocation(line: 1087, column: 15, scope: !12673)
!12676 = !DILocation(line: 1087, column: 62, scope: !12673)
!12677 = !DILocation(line: 1087, column: 15, scope: !12640)
!12678 = !DILocation(line: 1088, column: 13, scope: !12673)
!12679 = !DILocation(line: 1089, column: 9, scope: !12640)
!12680 = !DILocation(line: 1090, column: 5, scope: !12626)
!12681 = !DILocation(line: 1094, column: 7, scope: !12682)
!12682 = distinct !DILexicalBlock(scope: !12581, file: !1198, line: 1094, column: 7)
!12683 = !DILocation(line: 1094, column: 15, scope: !12682)
!12684 = !DILocation(line: 1094, column: 7, scope: !12581)
!12685 = !DILocalVariable(name: "new_entry", scope: !12686, file: !1198, line: 1096, type: !1201)
!12686 = distinct !DILexicalBlock(scope: !12682, file: !1198, line: 1095, column: 5)
!12687 = !DILocation(line: 1096, column: 26, scope: !12686)
!12688 = !DILocation(line: 1096, column: 54, scope: !12686)
!12689 = !DILocation(line: 1096, column: 38, scope: !12686)
!12690 = !DILocation(line: 1098, column: 11, scope: !12691)
!12691 = distinct !DILexicalBlock(scope: !12686, file: !1198, line: 1098, column: 11)
!12692 = !DILocation(line: 1098, column: 21, scope: !12691)
!12693 = !DILocation(line: 1098, column: 11, scope: !12686)
!12694 = !DILocation(line: 1099, column: 9, scope: !12691)
!12695 = !DILocation(line: 1103, column: 34, scope: !12686)
!12696 = !DILocation(line: 1103, column: 7, scope: !12686)
!12697 = !DILocation(line: 1103, column: 18, scope: !12686)
!12698 = !DILocation(line: 1103, column: 23, scope: !12686)
!12699 = !DILocation(line: 1104, column: 25, scope: !12686)
!12700 = !DILocation(line: 1104, column: 33, scope: !12686)
!12701 = !DILocation(line: 1104, column: 7, scope: !12686)
!12702 = !DILocation(line: 1104, column: 18, scope: !12686)
!12703 = !DILocation(line: 1104, column: 23, scope: !12686)
!12704 = !DILocation(line: 1105, column: 22, scope: !12686)
!12705 = !DILocation(line: 1105, column: 7, scope: !12686)
!12706 = !DILocation(line: 1105, column: 15, scope: !12686)
!12707 = !DILocation(line: 1105, column: 20, scope: !12686)
!12708 = !DILocation(line: 1106, column: 7, scope: !12686)
!12709 = !DILocation(line: 1106, column: 14, scope: !12686)
!12710 = !DILocation(line: 1106, column: 23, scope: !12686)
!12711 = !DILocation(line: 1107, column: 7, scope: !12686)
!12712 = !DILocation(line: 1112, column: 27, scope: !12581)
!12713 = !DILocation(line: 1112, column: 3, scope: !12581)
!12714 = !DILocation(line: 1112, column: 11, scope: !12581)
!12715 = !DILocation(line: 1112, column: 16, scope: !12581)
!12716 = !DILocation(line: 1113, column: 3, scope: !12581)
!12717 = !DILocation(line: 1113, column: 10, scope: !12581)
!12718 = !DILocation(line: 1113, column: 19, scope: !12581)
!12719 = !DILocation(line: 1114, column: 3, scope: !12581)
!12720 = !DILocation(line: 1114, column: 10, scope: !12581)
!12721 = !DILocation(line: 1114, column: 24, scope: !12581)
!12722 = !DILocation(line: 1116, column: 3, scope: !12581)
!12723 = !DILocation(line: 1117, column: 1, scope: !12581)
!12724 = distinct !DISubprogram(name: "hash_find_entry", scope: !1198, file: !1198, line: 790, type: !12725, scopeLine: 792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12725 = !DISubroutineType(types: !12726)
!12726 = !{!167, !1237, !181, !12727, !141}
!12727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1201, size: 64)
!12728 = !DILocalVariable(name: "table", arg: 1, scope: !12724, file: !1198, line: 790, type: !1237)
!12729 = !DILocation(line: 790, column: 30, scope: !12724)
!12730 = !DILocalVariable(name: "entry", arg: 2, scope: !12724, file: !1198, line: 790, type: !181)
!12731 = !DILocation(line: 790, column: 49, scope: !12724)
!12732 = !DILocalVariable(name: "bucket_head", arg: 3, scope: !12724, file: !1198, line: 791, type: !12727)
!12733 = !DILocation(line: 791, column: 38, scope: !12724)
!12734 = !DILocalVariable(name: "delete", arg: 4, scope: !12724, file: !1198, line: 791, type: !141)
!12735 = !DILocation(line: 791, column: 56, scope: !12724)
!12736 = !DILocalVariable(name: "bucket", scope: !12724, file: !1198, line: 793, type: !1201)
!12737 = !DILocation(line: 793, column: 22, scope: !12724)
!12738 = !DILocation(line: 793, column: 44, scope: !12724)
!12739 = !DILocation(line: 793, column: 51, scope: !12724)
!12740 = !DILocation(line: 793, column: 31, scope: !12724)
!12741 = !DILocalVariable(name: "cursor", scope: !12724, file: !1198, line: 794, type: !1201)
!12742 = !DILocation(line: 794, column: 22, scope: !12724)
!12743 = !DILocation(line: 796, column: 18, scope: !12724)
!12744 = !DILocation(line: 796, column: 4, scope: !12724)
!12745 = !DILocation(line: 796, column: 16, scope: !12724)
!12746 = !DILocation(line: 799, column: 7, scope: !12747)
!12747 = distinct !DILexicalBlock(scope: !12724, file: !1198, line: 799, column: 7)
!12748 = !DILocation(line: 799, column: 15, scope: !12747)
!12749 = !DILocation(line: 799, column: 20, scope: !12747)
!12750 = !DILocation(line: 799, column: 7, scope: !12724)
!12751 = !DILocation(line: 800, column: 5, scope: !12747)
!12752 = !DILocation(line: 803, column: 7, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12724, file: !1198, line: 803, column: 7)
!12754 = !DILocation(line: 803, column: 16, scope: !12753)
!12755 = !DILocation(line: 803, column: 24, scope: !12753)
!12756 = !DILocation(line: 803, column: 13, scope: !12753)
!12757 = !DILocation(line: 803, column: 29, scope: !12753)
!12758 = !DILocation(line: 803, column: 32, scope: !12753)
!12759 = !DILocation(line: 803, column: 39, scope: !12753)
!12760 = !DILocation(line: 803, column: 51, scope: !12753)
!12761 = !DILocation(line: 803, column: 58, scope: !12753)
!12762 = !DILocation(line: 803, column: 66, scope: !12753)
!12763 = !DILocation(line: 803, column: 7, scope: !12724)
!12764 = !DILocalVariable(name: "data", scope: !12765, file: !1198, line: 805, type: !167)
!12765 = distinct !DILexicalBlock(scope: !12753, file: !1198, line: 804, column: 5)
!12766 = !DILocation(line: 805, column: 13, scope: !12765)
!12767 = !DILocation(line: 805, column: 20, scope: !12765)
!12768 = !DILocation(line: 805, column: 28, scope: !12765)
!12769 = !DILocation(line: 807, column: 11, scope: !12770)
!12770 = distinct !DILexicalBlock(scope: !12765, file: !1198, line: 807, column: 11)
!12771 = !DILocation(line: 807, column: 11, scope: !12765)
!12772 = !DILocation(line: 809, column: 15, scope: !12773)
!12773 = distinct !DILexicalBlock(scope: !12774, file: !1198, line: 809, column: 15)
!12774 = distinct !DILexicalBlock(scope: !12770, file: !1198, line: 808, column: 9)
!12775 = !DILocation(line: 809, column: 23, scope: !12773)
!12776 = !DILocation(line: 809, column: 15, scope: !12774)
!12777 = !DILocalVariable(name: "next", scope: !12778, file: !1198, line: 811, type: !1201)
!12778 = distinct !DILexicalBlock(scope: !12773, file: !1198, line: 810, column: 13)
!12779 = !DILocation(line: 811, column: 34, scope: !12778)
!12780 = !DILocation(line: 811, column: 41, scope: !12778)
!12781 = !DILocation(line: 811, column: 49, scope: !12778)
!12782 = !DILocation(line: 815, column: 16, scope: !12778)
!12783 = !DILocation(line: 815, column: 26, scope: !12778)
!12784 = !DILocation(line: 815, column: 25, scope: !12778)
!12785 = !DILocation(line: 816, column: 27, scope: !12778)
!12786 = !DILocation(line: 816, column: 34, scope: !12778)
!12787 = !DILocation(line: 816, column: 15, scope: !12778)
!12788 = !DILocation(line: 817, column: 13, scope: !12778)
!12789 = !DILocation(line: 820, column: 15, scope: !12790)
!12790 = distinct !DILexicalBlock(scope: !12773, file: !1198, line: 819, column: 13)
!12791 = !DILocation(line: 820, column: 23, scope: !12790)
!12792 = !DILocation(line: 820, column: 28, scope: !12790)
!12793 = !DILocation(line: 822, column: 9, scope: !12774)
!12794 = !DILocation(line: 824, column: 14, scope: !12765)
!12795 = !DILocation(line: 824, column: 7, scope: !12765)
!12796 = !DILocation(line: 828, column: 17, scope: !12797)
!12797 = distinct !DILexicalBlock(scope: !12724, file: !1198, line: 828, column: 3)
!12798 = !DILocation(line: 828, column: 15, scope: !12797)
!12799 = !DILocation(line: 828, column: 8, scope: !12797)
!12800 = !DILocation(line: 828, column: 25, scope: !12801)
!12801 = distinct !DILexicalBlock(scope: !12797, file: !1198, line: 828, column: 3)
!12802 = !DILocation(line: 828, column: 33, scope: !12801)
!12803 = !DILocation(line: 828, column: 3, scope: !12797)
!12804 = !DILocation(line: 830, column: 11, scope: !12805)
!12805 = distinct !DILexicalBlock(scope: !12806, file: !1198, line: 830, column: 11)
!12806 = distinct !DILexicalBlock(scope: !12801, file: !1198, line: 829, column: 5)
!12807 = !DILocation(line: 830, column: 20, scope: !12805)
!12808 = !DILocation(line: 830, column: 28, scope: !12805)
!12809 = !DILocation(line: 830, column: 34, scope: !12805)
!12810 = !DILocation(line: 830, column: 17, scope: !12805)
!12811 = !DILocation(line: 831, column: 11, scope: !12805)
!12812 = !DILocation(line: 831, column: 14, scope: !12805)
!12813 = !DILocation(line: 831, column: 21, scope: !12805)
!12814 = !DILocation(line: 831, column: 33, scope: !12805)
!12815 = !DILocation(line: 831, column: 40, scope: !12805)
!12816 = !DILocation(line: 831, column: 48, scope: !12805)
!12817 = !DILocation(line: 831, column: 54, scope: !12805)
!12818 = !DILocation(line: 830, column: 11, scope: !12806)
!12819 = !DILocalVariable(name: "data", scope: !12820, file: !1198, line: 833, type: !167)
!12820 = distinct !DILexicalBlock(scope: !12805, file: !1198, line: 832, column: 9)
!12821 = !DILocation(line: 833, column: 17, scope: !12820)
!12822 = !DILocation(line: 833, column: 24, scope: !12820)
!12823 = !DILocation(line: 833, column: 32, scope: !12820)
!12824 = !DILocation(line: 833, column: 38, scope: !12820)
!12825 = !DILocation(line: 835, column: 15, scope: !12826)
!12826 = distinct !DILexicalBlock(scope: !12820, file: !1198, line: 835, column: 15)
!12827 = !DILocation(line: 835, column: 15, scope: !12820)
!12828 = !DILocalVariable(name: "next", scope: !12829, file: !1198, line: 837, type: !1201)
!12829 = distinct !DILexicalBlock(scope: !12826, file: !1198, line: 836, column: 13)
!12830 = !DILocation(line: 837, column: 34, scope: !12829)
!12831 = !DILocation(line: 837, column: 41, scope: !12829)
!12832 = !DILocation(line: 837, column: 49, scope: !12829)
!12833 = !DILocation(line: 841, column: 30, scope: !12829)
!12834 = !DILocation(line: 841, column: 36, scope: !12829)
!12835 = !DILocation(line: 841, column: 15, scope: !12829)
!12836 = !DILocation(line: 841, column: 23, scope: !12829)
!12837 = !DILocation(line: 841, column: 28, scope: !12829)
!12838 = !DILocation(line: 842, column: 27, scope: !12829)
!12839 = !DILocation(line: 842, column: 34, scope: !12829)
!12840 = !DILocation(line: 842, column: 15, scope: !12829)
!12841 = !DILocation(line: 843, column: 13, scope: !12829)
!12842 = !DILocation(line: 845, column: 18, scope: !12820)
!12843 = !DILocation(line: 845, column: 11, scope: !12820)
!12844 = !DILocation(line: 847, column: 5, scope: !12806)
!12845 = !DILocation(line: 828, column: 48, scope: !12801)
!12846 = !DILocation(line: 828, column: 56, scope: !12801)
!12847 = !DILocation(line: 828, column: 46, scope: !12801)
!12848 = !DILocation(line: 828, column: 3, scope: !12801)
!12849 = distinct !{!12849, !12803, !12850}
!12850 = !DILocation(line: 847, column: 5, scope: !12797)
!12851 = !DILocation(line: 850, column: 3, scope: !12724)
!12852 = !DILocation(line: 851, column: 1, scope: !12724)
!12853 = distinct !DISubprogram(name: "hash_insert", scope: !1198, file: !1198, line: 1126, type: !12854, scopeLine: 1127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12854 = !DISubroutineType(types: !12855)
!12855 = !{!167, !1237, !181}
!12856 = !DILocalVariable(name: "table", arg: 1, scope: !12853, file: !1198, line: 1126, type: !1237)
!12857 = !DILocation(line: 1126, column: 26, scope: !12853)
!12858 = !DILocalVariable(name: "entry", arg: 2, scope: !12853, file: !1198, line: 1126, type: !181)
!12859 = !DILocation(line: 1126, column: 45, scope: !12853)
!12860 = !DILocalVariable(name: "matched_ent", scope: !12853, file: !1198, line: 1128, type: !181)
!12861 = !DILocation(line: 1128, column: 15, scope: !12853)
!12862 = !DILocalVariable(name: "err", scope: !12853, file: !1198, line: 1129, type: !27)
!12863 = !DILocation(line: 1129, column: 7, scope: !12853)
!12864 = !DILocation(line: 1129, column: 36, scope: !12853)
!12865 = !DILocation(line: 1129, column: 43, scope: !12853)
!12866 = !DILocation(line: 1129, column: 13, scope: !12853)
!12867 = !DILocation(line: 1130, column: 11, scope: !12853)
!12868 = !DILocation(line: 1130, column: 15, scope: !12853)
!12869 = !DILocation(line: 1132, column: 23, scope: !12853)
!12870 = !DILocation(line: 1132, column: 27, scope: !12853)
!12871 = !DILocation(line: 1132, column: 34, scope: !12853)
!12872 = !DILocation(line: 1132, column: 48, scope: !12853)
!12873 = !DILocation(line: 1130, column: 3, scope: !12853)
!12874 = distinct !DISubprogram(name: "hash_delete", scope: !1198, file: !1198, line: 1140, type: !12854, scopeLine: 1141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1192, retainedNodes: !152)
!12875 = !DILocalVariable(name: "table", arg: 1, scope: !12874, file: !1198, line: 1140, type: !1237)
!12876 = !DILocation(line: 1140, column: 26, scope: !12874)
!12877 = !DILocalVariable(name: "entry", arg: 2, scope: !12874, file: !1198, line: 1140, type: !181)
!12878 = !DILocation(line: 1140, column: 45, scope: !12874)
!12879 = !DILocalVariable(name: "data", scope: !12874, file: !1198, line: 1142, type: !167)
!12880 = !DILocation(line: 1142, column: 9, scope: !12874)
!12881 = !DILocalVariable(name: "bucket", scope: !12874, file: !1198, line: 1143, type: !1201)
!12882 = !DILocation(line: 1143, column: 22, scope: !12874)
!12883 = !DILocation(line: 1145, column: 27, scope: !12874)
!12884 = !DILocation(line: 1145, column: 34, scope: !12874)
!12885 = !DILocation(line: 1145, column: 10, scope: !12874)
!12886 = !DILocation(line: 1145, column: 8, scope: !12874)
!12887 = !DILocation(line: 1146, column: 8, scope: !12888)
!12888 = distinct !DILexicalBlock(scope: !12874, file: !1198, line: 1146, column: 7)
!12889 = !DILocation(line: 1146, column: 7, scope: !12874)
!12890 = !DILocation(line: 1147, column: 5, scope: !12888)
!12891 = !DILocation(line: 1149, column: 3, scope: !12874)
!12892 = !DILocation(line: 1149, column: 10, scope: !12874)
!12893 = !DILocation(line: 1149, column: 19, scope: !12874)
!12894 = !DILocation(line: 1150, column: 8, scope: !12895)
!12895 = distinct !DILexicalBlock(scope: !12874, file: !1198, line: 1150, column: 7)
!12896 = !DILocation(line: 1150, column: 16, scope: !12895)
!12897 = !DILocation(line: 1150, column: 7, scope: !12874)
!12898 = !DILocation(line: 1152, column: 7, scope: !12899)
!12899 = distinct !DILexicalBlock(scope: !12895, file: !1198, line: 1151, column: 5)
!12900 = !DILocation(line: 1152, column: 14, scope: !12899)
!12901 = !DILocation(line: 1152, column: 28, scope: !12899)
!12902 = !DILocation(line: 1157, column: 11, scope: !12903)
!12903 = distinct !DILexicalBlock(scope: !12899, file: !1198, line: 1157, column: 11)
!12904 = !DILocation(line: 1157, column: 18, scope: !12903)
!12905 = !DILocation(line: 1158, column: 13, scope: !12903)
!12906 = !DILocation(line: 1158, column: 20, scope: !12903)
!12907 = !DILocation(line: 1158, column: 28, scope: !12903)
!12908 = !DILocation(line: 1158, column: 47, scope: !12903)
!12909 = !DILocation(line: 1158, column: 54, scope: !12903)
!12910 = !DILocation(line: 1158, column: 45, scope: !12903)
!12911 = !DILocation(line: 1158, column: 11, scope: !12903)
!12912 = !DILocation(line: 1157, column: 11, scope: !12899)
!12913 = !DILocation(line: 1162, column: 25, scope: !12914)
!12914 = distinct !DILexicalBlock(scope: !12903, file: !1198, line: 1159, column: 9)
!12915 = !DILocation(line: 1162, column: 11, scope: !12914)
!12916 = !DILocation(line: 1163, column: 15, scope: !12917)
!12917 = distinct !DILexicalBlock(scope: !12914, file: !1198, line: 1163, column: 15)
!12918 = !DILocation(line: 1163, column: 22, scope: !12917)
!12919 = !DILocation(line: 1164, column: 17, scope: !12917)
!12920 = !DILocation(line: 1164, column: 24, scope: !12917)
!12921 = !DILocation(line: 1164, column: 32, scope: !12917)
!12922 = !DILocation(line: 1164, column: 51, scope: !12917)
!12923 = !DILocation(line: 1164, column: 58, scope: !12917)
!12924 = !DILocation(line: 1164, column: 49, scope: !12917)
!12925 = !DILocation(line: 1164, column: 15, scope: !12917)
!12926 = !DILocation(line: 1163, column: 15, scope: !12914)
!12927 = !DILocalVariable(name: "tuning", scope: !12928, file: !1198, line: 1166, type: !1213)
!12928 = distinct !DILexicalBlock(scope: !12917, file: !1198, line: 1165, column: 13)
!12929 = !DILocation(line: 1166, column: 34, scope: !12928)
!12930 = !DILocation(line: 1166, column: 43, scope: !12928)
!12931 = !DILocation(line: 1166, column: 50, scope: !12928)
!12932 = !DILocalVariable(name: "candidate", scope: !12928, file: !1198, line: 1167, type: !149)
!12933 = !DILocation(line: 1167, column: 22, scope: !12928)
!12934 = !DILocation(line: 1168, column: 18, scope: !12928)
!12935 = !DILocation(line: 1168, column: 26, scope: !12928)
!12936 = !DILocation(line: 1169, column: 20, scope: !12928)
!12937 = !DILocation(line: 1169, column: 27, scope: !12928)
!12938 = !DILocation(line: 1169, column: 39, scope: !12928)
!12939 = !DILocation(line: 1169, column: 47, scope: !12928)
!12940 = !DILocation(line: 1169, column: 37, scope: !12928)
!12941 = !DILocation(line: 1170, column: 21, scope: !12928)
!12942 = !DILocation(line: 1170, column: 28, scope: !12928)
!12943 = !DILocation(line: 1170, column: 40, scope: !12928)
!12944 = !DILocation(line: 1170, column: 48, scope: !12928)
!12945 = !DILocation(line: 1170, column: 38, scope: !12928)
!12946 = !DILocation(line: 1171, column: 23, scope: !12928)
!12947 = !DILocation(line: 1171, column: 31, scope: !12928)
!12948 = !DILocation(line: 1171, column: 21, scope: !12928)
!12949 = !DILocation(line: 1168, column: 17, scope: !12928)
!12950 = !DILocation(line: 1173, column: 33, scope: !12951)
!12951 = distinct !DILexicalBlock(scope: !12928, file: !1198, line: 1173, column: 19)
!12952 = !DILocation(line: 1173, column: 40, scope: !12951)
!12953 = !DILocation(line: 1173, column: 20, scope: !12951)
!12954 = !DILocation(line: 1173, column: 19, scope: !12928)
!12955 = !DILocalVariable(name: "cursor", scope: !12956, file: !1198, line: 1181, type: !1201)
!12956 = distinct !DILexicalBlock(scope: !12951, file: !1198, line: 1174, column: 17)
!12957 = !DILocation(line: 1181, column: 38, scope: !12956)
!12958 = !DILocation(line: 1181, column: 47, scope: !12956)
!12959 = !DILocation(line: 1181, column: 54, scope: !12956)
!12960 = !DILocalVariable(name: "next", scope: !12956, file: !1198, line: 1182, type: !1201)
!12961 = !DILocation(line: 1182, column: 38, scope: !12956)
!12962 = !DILocation(line: 1183, column: 19, scope: !12956)
!12963 = !DILocation(line: 1183, column: 26, scope: !12956)
!12964 = !DILocation(line: 1185, column: 30, scope: !12965)
!12965 = distinct !DILexicalBlock(scope: !12956, file: !1198, line: 1184, column: 21)
!12966 = !DILocation(line: 1185, column: 38, scope: !12965)
!12967 = !DILocation(line: 1185, column: 28, scope: !12965)
!12968 = !DILocation(line: 1186, column: 29, scope: !12965)
!12969 = !DILocation(line: 1186, column: 23, scope: !12965)
!12970 = !DILocation(line: 1187, column: 32, scope: !12965)
!12971 = !DILocation(line: 1187, column: 30, scope: !12965)
!12972 = distinct !{!12972, !12962, !12973}
!12973 = !DILocation(line: 1188, column: 21, scope: !12956)
!12974 = !DILocation(line: 1189, column: 19, scope: !12956)
!12975 = !DILocation(line: 1189, column: 26, scope: !12956)
!12976 = !DILocation(line: 1189, column: 42, scope: !12956)
!12977 = !DILocation(line: 1191, column: 17, scope: !12956)
!12978 = !DILocation(line: 1192, column: 13, scope: !12928)
!12979 = !DILocation(line: 1193, column: 9, scope: !12914)
!12980 = !DILocation(line: 1194, column: 5, scope: !12899)
!12981 = !DILocation(line: 1196, column: 10, scope: !12874)
!12982 = !DILocation(line: 1196, column: 3, scope: !12874)
!12983 = !DILocation(line: 1197, column: 1, scope: !12874)
!12984 = distinct !DISubprogram(name: "triple_hash", scope: !12985, file: !12985, line: 34, type: !1227, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1570, retainedNodes: !152)
!12985 = !DIFile(filename: "lib/hash-triple.c", directory: "/home/mbarbar/software/coreutils-8.31")
!12986 = !DILocalVariable(name: "x", arg: 1, scope: !12984, file: !12985, line: 34, type: !181)
!12987 = !DILocation(line: 34, column: 26, scope: !12984)
!12988 = !DILocalVariable(name: "table_size", arg: 2, scope: !12984, file: !12985, line: 34, type: !149)
!12989 = !DILocation(line: 34, column: 36, scope: !12984)
!12990 = !DILocalVariable(name: "p", scope: !12984, file: !12985, line: 36, type: !1573)
!12991 = !DILocation(line: 36, column: 26, scope: !12984)
!12992 = !DILocation(line: 36, column: 30, scope: !12984)
!12993 = !DILocalVariable(name: "tmp", scope: !12984, file: !12985, line: 37, type: !149)
!12994 = !DILocation(line: 37, column: 10, scope: !12984)
!12995 = !DILocation(line: 37, column: 26, scope: !12984)
!12996 = !DILocation(line: 37, column: 29, scope: !12984)
!12997 = !DILocation(line: 37, column: 35, scope: !12984)
!12998 = !DILocation(line: 37, column: 16, scope: !12984)
!12999 = !DILocation(line: 40, column: 11, scope: !12984)
!13000 = !DILocation(line: 40, column: 17, scope: !12984)
!13001 = !DILocation(line: 40, column: 20, scope: !12984)
!13002 = !DILocation(line: 40, column: 15, scope: !12984)
!13003 = !DILocation(line: 40, column: 30, scope: !12984)
!13004 = !DILocation(line: 40, column: 28, scope: !12984)
!13005 = !DILocation(line: 40, column: 3, scope: !12984)
!13006 = distinct !DISubprogram(name: "triple_hash_no_name", scope: !12985, file: !12985, line: 45, type: !1227, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1570, retainedNodes: !152)
!13007 = !DILocalVariable(name: "x", arg: 1, scope: !13006, file: !12985, line: 45, type: !181)
!13008 = !DILocation(line: 45, column: 34, scope: !13006)
!13009 = !DILocalVariable(name: "table_size", arg: 2, scope: !13006, file: !12985, line: 45, type: !149)
!13010 = !DILocation(line: 45, column: 44, scope: !13006)
!13011 = !DILocalVariable(name: "p", scope: !13006, file: !12985, line: 47, type: !1573)
!13012 = !DILocation(line: 47, column: 26, scope: !13006)
!13013 = !DILocation(line: 47, column: 30, scope: !13006)
!13014 = !DILocation(line: 50, column: 10, scope: !13006)
!13015 = !DILocation(line: 50, column: 13, scope: !13006)
!13016 = !DILocation(line: 50, column: 22, scope: !13006)
!13017 = !DILocation(line: 50, column: 20, scope: !13006)
!13018 = !DILocation(line: 50, column: 3, scope: !13006)
!13019 = distinct !DISubprogram(name: "triple_compare", scope: !12985, file: !12985, line: 55, type: !1232, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1570, retainedNodes: !152)
!13020 = !DILocalVariable(name: "x", arg: 1, scope: !13019, file: !12985, line: 55, type: !181)
!13021 = !DILocation(line: 55, column: 29, scope: !13019)
!13022 = !DILocalVariable(name: "y", arg: 2, scope: !13019, file: !12985, line: 55, type: !181)
!13023 = !DILocation(line: 55, column: 44, scope: !13019)
!13024 = !DILocalVariable(name: "a", scope: !13019, file: !12985, line: 57, type: !1573)
!13025 = !DILocation(line: 57, column: 26, scope: !13019)
!13026 = !DILocation(line: 57, column: 30, scope: !13019)
!13027 = !DILocalVariable(name: "b", scope: !13019, file: !12985, line: 58, type: !1573)
!13028 = !DILocation(line: 58, column: 26, scope: !13019)
!13029 = !DILocation(line: 58, column: 30, scope: !13019)
!13030 = !DILocation(line: 59, column: 11, scope: !13019)
!13031 = !DILocation(line: 59, column: 31, scope: !13019)
!13032 = !DILocation(line: 59, column: 45, scope: !13019)
!13033 = !DILocation(line: 59, column: 48, scope: !13019)
!13034 = !DILocation(line: 59, column: 54, scope: !13019)
!13035 = !DILocation(line: 59, column: 57, scope: !13019)
!13036 = !DILocation(line: 59, column: 34, scope: !13019)
!13037 = !DILocation(line: 0, scope: !13019)
!13038 = !DILocation(line: 59, column: 10, scope: !13019)
!13039 = !DILocation(line: 59, column: 3, scope: !13019)
!13040 = distinct !DISubprogram(name: "triple_compare_ino_str", scope: !12985, file: !12985, line: 63, type: !1232, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1570, retainedNodes: !152)
!13041 = !DILocalVariable(name: "x", arg: 1, scope: !13040, file: !12985, line: 63, type: !181)
!13042 = !DILocation(line: 63, column: 37, scope: !13040)
!13043 = !DILocalVariable(name: "y", arg: 2, scope: !13040, file: !12985, line: 63, type: !181)
!13044 = !DILocation(line: 63, column: 52, scope: !13040)
!13045 = !DILocalVariable(name: "a", scope: !13040, file: !12985, line: 65, type: !1573)
!13046 = !DILocation(line: 65, column: 26, scope: !13040)
!13047 = !DILocation(line: 65, column: 30, scope: !13040)
!13048 = !DILocalVariable(name: "b", scope: !13040, file: !12985, line: 66, type: !1573)
!13049 = !DILocation(line: 66, column: 26, scope: !13040)
!13050 = !DILocation(line: 66, column: 30, scope: !13040)
!13051 = !DILocation(line: 67, column: 11, scope: !13040)
!13052 = !DILocation(line: 67, column: 31, scope: !13040)
!13053 = !DILocation(line: 67, column: 34, scope: !13040)
!13054 = !DILocation(line: 0, scope: !13040)
!13055 = !DILocation(line: 67, column: 10, scope: !13040)
!13056 = !DILocation(line: 67, column: 3, scope: !13040)
!13057 = distinct !DISubprogram(name: "triple_free", scope: !12985, file: !12985, line: 72, type: !495, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1570, retainedNodes: !152)
!13058 = !DILocalVariable(name: "x", arg: 1, scope: !13057, file: !12985, line: 72, type: !167)
!13059 = !DILocation(line: 72, column: 20, scope: !13057)
!13060 = !DILocalVariable(name: "a", scope: !13057, file: !12985, line: 74, type: !1580)
!13061 = !DILocation(line: 74, column: 20, scope: !13057)
!13062 = !DILocation(line: 74, column: 24, scope: !13057)
!13063 = !DILocation(line: 75, column: 9, scope: !13057)
!13064 = !DILocation(line: 75, column: 12, scope: !13057)
!13065 = !DILocation(line: 75, column: 3, scope: !13057)
!13066 = !DILocation(line: 76, column: 9, scope: !13057)
!13067 = !DILocation(line: 76, column: 3, scope: !13057)
!13068 = !DILocation(line: 77, column: 1, scope: !13057)
!13069 = distinct !DISubprogram(name: "human_readable", scope: !1282, file: !1282, line: 153, type: !13070, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13070 = !DISubroutineType(types: !13071)
!13071 = !{!143, !168, !143, !27, !168, !168}
!13072 = !DILocalVariable(name: "n", arg: 1, scope: !13069, file: !1282, line: 153, type: !168)
!13073 = !DILocation(line: 153, column: 27, scope: !13069)
!13074 = !DILocalVariable(name: "buf", arg: 2, scope: !13069, file: !1282, line: 153, type: !143)
!13075 = !DILocation(line: 153, column: 36, scope: !13069)
!13076 = !DILocalVariable(name: "opts", arg: 3, scope: !13069, file: !1282, line: 153, type: !27)
!13077 = !DILocation(line: 153, column: 45, scope: !13069)
!13078 = !DILocalVariable(name: "from_block_size", arg: 4, scope: !13069, file: !1282, line: 154, type: !168)
!13079 = !DILocation(line: 154, column: 27, scope: !13069)
!13080 = !DILocalVariable(name: "to_block_size", arg: 5, scope: !13069, file: !1282, line: 154, type: !168)
!13081 = !DILocation(line: 154, column: 54, scope: !13069)
!13082 = !DILocalVariable(name: "inexact_style", scope: !13069, file: !1282, line: 156, type: !27)
!13083 = !DILocation(line: 156, column: 7, scope: !13069)
!13084 = !DILocation(line: 157, column: 5, scope: !13069)
!13085 = !DILocation(line: 157, column: 10, scope: !13069)
!13086 = !DILocalVariable(name: "base", scope: !13069, file: !1282, line: 158, type: !6)
!13087 = !DILocation(line: 158, column: 16, scope: !13069)
!13088 = !DILocation(line: 158, column: 23, scope: !13069)
!13089 = !DILocation(line: 158, column: 28, scope: !13069)
!13090 = !DILocalVariable(name: "amt", scope: !13069, file: !1282, line: 159, type: !168)
!13091 = !DILocation(line: 159, column: 13, scope: !13069)
!13092 = !DILocalVariable(name: "tenths", scope: !13069, file: !1282, line: 160, type: !27)
!13093 = !DILocation(line: 160, column: 7, scope: !13069)
!13094 = !DILocalVariable(name: "exponent", scope: !13069, file: !1282, line: 161, type: !27)
!13095 = !DILocation(line: 161, column: 7, scope: !13069)
!13096 = !DILocalVariable(name: "exponent_max", scope: !13069, file: !1282, line: 162, type: !27)
!13097 = !DILocation(line: 162, column: 7, scope: !13069)
!13098 = !DILocalVariable(name: "p", scope: !13069, file: !1282, line: 163, type: !143)
!13099 = !DILocation(line: 163, column: 9, scope: !13069)
!13100 = !DILocalVariable(name: "psuffix", scope: !13069, file: !1282, line: 164, type: !143)
!13101 = !DILocation(line: 164, column: 9, scope: !13069)
!13102 = !DILocalVariable(name: "integerlim", scope: !13069, file: !1282, line: 165, type: !146)
!13103 = !DILocation(line: 165, column: 15, scope: !13069)
!13104 = !DILocalVariable(name: "rounding", scope: !13069, file: !1282, line: 171, type: !27)
!13105 = !DILocation(line: 171, column: 7, scope: !13069)
!13106 = !DILocalVariable(name: "decimal_point", scope: !13069, file: !1282, line: 173, type: !146)
!13107 = !DILocation(line: 173, column: 15, scope: !13069)
!13108 = !DILocalVariable(name: "decimal_pointlen", scope: !13069, file: !1282, line: 174, type: !149)
!13109 = !DILocation(line: 174, column: 10, scope: !13069)
!13110 = !DILocalVariable(name: "grouping", scope: !13069, file: !1282, line: 175, type: !146)
!13111 = !DILocation(line: 175, column: 15, scope: !13069)
!13112 = !DILocalVariable(name: "thousands_sep", scope: !13069, file: !1282, line: 176, type: !146)
!13113 = !DILocation(line: 176, column: 15, scope: !13069)
!13114 = !DILocalVariable(name: "l", scope: !13069, file: !1282, line: 177, type: !1245)
!13115 = !DILocation(line: 177, column: 23, scope: !13069)
!13116 = !DILocation(line: 177, column: 27, scope: !13069)
!13117 = !DILocalVariable(name: "pointlen", scope: !13069, file: !1282, line: 178, type: !149)
!13118 = !DILocation(line: 178, column: 10, scope: !13069)
!13119 = !DILocation(line: 178, column: 29, scope: !13069)
!13120 = !DILocation(line: 178, column: 32, scope: !13069)
!13121 = !DILocation(line: 178, column: 21, scope: !13069)
!13122 = !DILocation(line: 179, column: 11, scope: !13123)
!13123 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 179, column: 7)
!13124 = !DILocation(line: 179, column: 9, scope: !13123)
!13125 = !DILocation(line: 179, column: 20, scope: !13123)
!13126 = !DILocation(line: 179, column: 23, scope: !13123)
!13127 = !DILocation(line: 179, column: 32, scope: !13123)
!13128 = !DILocation(line: 179, column: 7, scope: !13069)
!13129 = !DILocation(line: 181, column: 23, scope: !13130)
!13130 = distinct !DILexicalBlock(scope: !13123, file: !1282, line: 180, column: 5)
!13131 = !DILocation(line: 181, column: 26, scope: !13130)
!13132 = !DILocation(line: 181, column: 21, scope: !13130)
!13133 = !DILocation(line: 182, column: 26, scope: !13130)
!13134 = !DILocation(line: 182, column: 24, scope: !13130)
!13135 = !DILocation(line: 183, column: 5, scope: !13130)
!13136 = !DILocation(line: 184, column: 14, scope: !13069)
!13137 = !DILocation(line: 184, column: 17, scope: !13069)
!13138 = !DILocation(line: 184, column: 12, scope: !13069)
!13139 = !DILocation(line: 185, column: 15, scope: !13140)
!13140 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 185, column: 7)
!13141 = !DILocation(line: 185, column: 18, scope: !13140)
!13142 = !DILocation(line: 185, column: 7, scope: !13140)
!13143 = !DILocation(line: 185, column: 33, scope: !13140)
!13144 = !DILocation(line: 185, column: 7, scope: !13069)
!13145 = !DILocation(line: 186, column: 21, scope: !13140)
!13146 = !DILocation(line: 186, column: 24, scope: !13140)
!13147 = !DILocation(line: 186, column: 19, scope: !13140)
!13148 = !DILocation(line: 186, column: 5, scope: !13140)
!13149 = !DILocation(line: 189, column: 13, scope: !13069)
!13150 = !DILocation(line: 189, column: 17, scope: !13069)
!13151 = !DILocation(line: 189, column: 42, scope: !13069)
!13152 = !DILocation(line: 189, column: 46, scope: !13069)
!13153 = !DILocation(line: 189, column: 11, scope: !13069)
!13154 = !DILocation(line: 190, column: 7, scope: !13069)
!13155 = !DILocation(line: 190, column: 5, scope: !13069)
!13156 = !DILocation(line: 195, column: 7, scope: !13157)
!13157 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 195, column: 7)
!13158 = !DILocation(line: 195, column: 24, scope: !13157)
!13159 = !DILocation(line: 195, column: 21, scope: !13157)
!13160 = !DILocation(line: 195, column: 7, scope: !13069)
!13161 = !DILocation(line: 197, column: 11, scope: !13162)
!13162 = distinct !DILexicalBlock(scope: !13163, file: !1282, line: 197, column: 11)
!13163 = distinct !DILexicalBlock(scope: !13157, file: !1282, line: 196, column: 5)
!13164 = !DILocation(line: 197, column: 29, scope: !13162)
!13165 = !DILocation(line: 197, column: 27, scope: !13162)
!13166 = !DILocation(line: 197, column: 43, scope: !13162)
!13167 = !DILocation(line: 197, column: 11, scope: !13163)
!13168 = !DILocalVariable(name: "multiplier", scope: !13169, file: !1282, line: 199, type: !168)
!13169 = distinct !DILexicalBlock(scope: !13162, file: !1282, line: 198, column: 9)
!13170 = !DILocation(line: 199, column: 21, scope: !13169)
!13171 = !DILocation(line: 199, column: 34, scope: !13169)
!13172 = !DILocation(line: 199, column: 52, scope: !13169)
!13173 = !DILocation(line: 199, column: 50, scope: !13169)
!13174 = !DILocation(line: 200, column: 17, scope: !13169)
!13175 = !DILocation(line: 200, column: 21, scope: !13169)
!13176 = !DILocation(line: 200, column: 19, scope: !13169)
!13177 = !DILocation(line: 200, column: 15, scope: !13169)
!13178 = !DILocation(line: 201, column: 15, scope: !13179)
!13179 = distinct !DILexicalBlock(scope: !13169, file: !1282, line: 201, column: 15)
!13180 = !DILocation(line: 201, column: 21, scope: !13179)
!13181 = !DILocation(line: 201, column: 19, scope: !13179)
!13182 = !DILocation(line: 201, column: 35, scope: !13179)
!13183 = !DILocation(line: 201, column: 32, scope: !13179)
!13184 = !DILocation(line: 201, column: 15, scope: !13169)
!13185 = !DILocation(line: 203, column: 22, scope: !13186)
!13186 = distinct !DILexicalBlock(scope: !13179, file: !1282, line: 202, column: 13)
!13187 = !DILocation(line: 204, column: 24, scope: !13186)
!13188 = !DILocation(line: 205, column: 15, scope: !13186)
!13189 = !DILocation(line: 207, column: 9, scope: !13169)
!13190 = !DILocation(line: 208, column: 5, scope: !13163)
!13191 = !DILocation(line: 209, column: 12, scope: !13192)
!13192 = distinct !DILexicalBlock(scope: !13157, file: !1282, line: 209, column: 12)
!13193 = !DILocation(line: 209, column: 28, scope: !13192)
!13194 = !DILocation(line: 209, column: 33, scope: !13192)
!13195 = !DILocation(line: 209, column: 36, scope: !13192)
!13196 = !DILocation(line: 209, column: 52, scope: !13192)
!13197 = !DILocation(line: 209, column: 50, scope: !13192)
!13198 = !DILocation(line: 209, column: 68, scope: !13192)
!13199 = !DILocation(line: 209, column: 12, scope: !13157)
!13200 = !DILocalVariable(name: "divisor", scope: !13201, file: !1282, line: 211, type: !168)
!13201 = distinct !DILexicalBlock(scope: !13192, file: !1282, line: 210, column: 5)
!13202 = !DILocation(line: 211, column: 17, scope: !13201)
!13203 = !DILocation(line: 211, column: 27, scope: !13201)
!13204 = !DILocation(line: 211, column: 43, scope: !13201)
!13205 = !DILocation(line: 211, column: 41, scope: !13201)
!13206 = !DILocalVariable(name: "r10", scope: !13201, file: !1282, line: 212, type: !168)
!13207 = !DILocation(line: 212, column: 17, scope: !13201)
!13208 = !DILocation(line: 212, column: 24, scope: !13201)
!13209 = !DILocation(line: 212, column: 28, scope: !13201)
!13210 = !DILocation(line: 212, column: 26, scope: !13201)
!13211 = !DILocation(line: 212, column: 37, scope: !13201)
!13212 = !DILocalVariable(name: "r2", scope: !13201, file: !1282, line: 213, type: !168)
!13213 = !DILocation(line: 213, column: 17, scope: !13201)
!13214 = !DILocation(line: 213, column: 23, scope: !13201)
!13215 = !DILocation(line: 213, column: 29, scope: !13201)
!13216 = !DILocation(line: 213, column: 27, scope: !13201)
!13217 = !DILocation(line: 213, column: 38, scope: !13201)
!13218 = !DILocation(line: 214, column: 13, scope: !13201)
!13219 = !DILocation(line: 214, column: 17, scope: !13201)
!13220 = !DILocation(line: 214, column: 15, scope: !13201)
!13221 = !DILocation(line: 214, column: 11, scope: !13201)
!13222 = !DILocation(line: 215, column: 16, scope: !13201)
!13223 = !DILocation(line: 215, column: 22, scope: !13201)
!13224 = !DILocation(line: 215, column: 20, scope: !13201)
!13225 = !DILocation(line: 215, column: 14, scope: !13201)
!13226 = !DILocation(line: 216, column: 18, scope: !13201)
!13227 = !DILocation(line: 216, column: 23, scope: !13201)
!13228 = !DILocation(line: 216, column: 21, scope: !13201)
!13229 = !DILocation(line: 216, column: 37, scope: !13201)
!13230 = !DILocation(line: 216, column: 35, scope: !13201)
!13231 = !DILocation(line: 216, column: 47, scope: !13201)
!13232 = !DILocation(line: 216, column: 57, scope: !13201)
!13233 = !DILocation(line: 216, column: 55, scope: !13201)
!13234 = !DILocation(line: 216, column: 44, scope: !13201)
!13235 = !DILocation(line: 216, column: 16, scope: !13201)
!13236 = !DILocation(line: 217, column: 7, scope: !13201)
!13237 = !DILocalVariable(name: "dto_block_size", scope: !13238, file: !1282, line: 225, type: !1274)
!13238 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 220, column: 3)
!13239 = !DILocation(line: 225, column: 17, scope: !13238)
!13240 = !DILocation(line: 225, column: 34, scope: !13238)
!13241 = !DILocalVariable(name: "damt", scope: !13238, file: !1282, line: 226, type: !1274)
!13242 = !DILocation(line: 226, column: 17, scope: !13238)
!13243 = !DILocation(line: 226, column: 24, scope: !13238)
!13244 = !DILocation(line: 226, column: 29, scope: !13238)
!13245 = !DILocation(line: 226, column: 47, scope: !13238)
!13246 = !DILocation(line: 226, column: 45, scope: !13238)
!13247 = !DILocation(line: 226, column: 26, scope: !13238)
!13248 = !DILocalVariable(name: "buflen", scope: !13238, file: !1282, line: 227, type: !149)
!13249 = !DILocation(line: 227, column: 12, scope: !13238)
!13250 = !DILocalVariable(name: "nonintegerlen", scope: !13238, file: !1282, line: 228, type: !149)
!13251 = !DILocation(line: 228, column: 12, scope: !13238)
!13252 = !DILocation(line: 230, column: 12, scope: !13253)
!13253 = distinct !DILexicalBlock(scope: !13238, file: !1282, line: 230, column: 9)
!13254 = !DILocation(line: 230, column: 17, scope: !13253)
!13255 = !DILocation(line: 230, column: 9, scope: !13238)
!13256 = !DILocation(line: 232, column: 18, scope: !13257)
!13257 = distinct !DILexicalBlock(scope: !13253, file: !1282, line: 231, column: 7)
!13258 = !DILocation(line: 232, column: 46, scope: !13257)
!13259 = !DILocation(line: 232, column: 61, scope: !13257)
!13260 = !DILocation(line: 232, column: 32, scope: !13257)
!13261 = !DILocation(line: 232, column: 9, scope: !13257)
!13262 = !DILocation(line: 233, column: 26, scope: !13257)
!13263 = !DILocation(line: 233, column: 18, scope: !13257)
!13264 = !DILocation(line: 233, column: 16, scope: !13257)
!13265 = !DILocation(line: 234, column: 23, scope: !13257)
!13266 = !DILocation(line: 235, column: 7, scope: !13257)
!13267 = !DILocalVariable(name: "e", scope: !13268, file: !1282, line: 238, type: !1274)
!13268 = distinct !DILexicalBlock(scope: !13253, file: !1282, line: 237, column: 7)
!13269 = !DILocation(line: 238, column: 21, scope: !13268)
!13270 = !DILocation(line: 239, column: 18, scope: !13268)
!13271 = !DILocation(line: 241, column: 9, scope: !13268)
!13272 = !DILocation(line: 243, column: 18, scope: !13273)
!13273 = distinct !DILexicalBlock(scope: !13268, file: !1282, line: 242, column: 11)
!13274 = !DILocation(line: 243, column: 15, scope: !13273)
!13275 = !DILocation(line: 244, column: 21, scope: !13273)
!13276 = !DILocation(line: 245, column: 11, scope: !13273)
!13277 = !DILocation(line: 246, column: 16, scope: !13268)
!13278 = !DILocation(line: 246, column: 20, scope: !13268)
!13279 = !DILocation(line: 246, column: 18, scope: !13268)
!13280 = !DILocation(line: 246, column: 28, scope: !13268)
!13281 = !DILocation(line: 246, column: 25, scope: !13268)
!13282 = !DILocation(line: 246, column: 33, scope: !13268)
!13283 = !DILocation(line: 246, column: 36, scope: !13268)
!13284 = !DILocation(line: 246, column: 47, scope: !13268)
!13285 = !DILocation(line: 246, column: 45, scope: !13268)
!13286 = !DILocation(line: 0, scope: !13268)
!13287 = distinct !{!13287, !13271, !13288}
!13288 = !DILocation(line: 246, column: 59, scope: !13268)
!13289 = !DILocation(line: 248, column: 17, scope: !13268)
!13290 = !DILocation(line: 248, column: 14, scope: !13268)
!13291 = !DILocation(line: 250, column: 18, scope: !13268)
!13292 = !DILocation(line: 250, column: 46, scope: !13268)
!13293 = !DILocation(line: 250, column: 61, scope: !13268)
!13294 = !DILocation(line: 250, column: 32, scope: !13268)
!13295 = !DILocation(line: 250, column: 9, scope: !13268)
!13296 = !DILocation(line: 251, column: 26, scope: !13268)
!13297 = !DILocation(line: 251, column: 18, scope: !13268)
!13298 = !DILocation(line: 251, column: 16, scope: !13268)
!13299 = !DILocation(line: 252, column: 25, scope: !13268)
!13300 = !DILocation(line: 252, column: 42, scope: !13268)
!13301 = !DILocation(line: 252, column: 23, scope: !13268)
!13302 = !DILocation(line: 254, column: 17, scope: !13303)
!13303 = distinct !DILexicalBlock(scope: !13268, file: !1282, line: 254, column: 13)
!13304 = !DILocation(line: 254, column: 15, scope: !13303)
!13305 = !DILocation(line: 254, column: 36, scope: !13303)
!13306 = !DILocation(line: 254, column: 41, scope: !13303)
!13307 = !DILocation(line: 254, column: 33, scope: !13303)
!13308 = !DILocation(line: 254, column: 31, scope: !13303)
!13309 = !DILocation(line: 254, column: 62, scope: !13303)
!13310 = !DILocation(line: 254, column: 60, scope: !13303)
!13311 = !DILocation(line: 255, column: 13, scope: !13303)
!13312 = !DILocation(line: 255, column: 18, scope: !13303)
!13313 = !DILocation(line: 255, column: 23, scope: !13303)
!13314 = !DILocation(line: 256, column: 17, scope: !13303)
!13315 = !DILocation(line: 256, column: 20, scope: !13303)
!13316 = !DILocation(line: 256, column: 24, scope: !13303)
!13317 = !DILocation(line: 256, column: 31, scope: !13303)
!13318 = !DILocation(line: 256, column: 36, scope: !13303)
!13319 = !DILocation(line: 254, column: 13, scope: !13268)
!13320 = !DILocation(line: 258, column: 22, scope: !13321)
!13321 = distinct !DILexicalBlock(scope: !13303, file: !1282, line: 257, column: 11)
!13322 = !DILocation(line: 259, column: 36, scope: !13321)
!13323 = !DILocation(line: 259, column: 51, scope: !13321)
!13324 = !DILocation(line: 259, column: 56, scope: !13321)
!13325 = !DILocation(line: 259, column: 22, scope: !13321)
!13326 = !DILocation(line: 259, column: 62, scope: !13321)
!13327 = !DILocation(line: 258, column: 13, scope: !13321)
!13328 = !DILocation(line: 260, column: 30, scope: !13321)
!13329 = !DILocation(line: 260, column: 22, scope: !13321)
!13330 = !DILocation(line: 260, column: 20, scope: !13321)
!13331 = !DILocation(line: 261, column: 27, scope: !13321)
!13332 = !DILocation(line: 262, column: 11, scope: !13321)
!13333 = !DILocation(line: 265, column: 9, scope: !13238)
!13334 = !DILocation(line: 265, column: 19, scope: !13238)
!13335 = !DILocation(line: 265, column: 17, scope: !13238)
!13336 = !DILocation(line: 265, column: 7, scope: !13238)
!13337 = !DILocation(line: 266, column: 14, scope: !13238)
!13338 = !DILocation(line: 266, column: 17, scope: !13238)
!13339 = !DILocation(line: 266, column: 22, scope: !13238)
!13340 = !DILocation(line: 266, column: 5, scope: !13238)
!13341 = !DILocation(line: 267, column: 18, scope: !13238)
!13342 = !DILocation(line: 267, column: 22, scope: !13238)
!13343 = !DILocation(line: 267, column: 20, scope: !13238)
!13344 = !DILocation(line: 267, column: 31, scope: !13238)
!13345 = !DILocation(line: 267, column: 29, scope: !13238)
!13346 = !DILocation(line: 267, column: 16, scope: !13238)
!13347 = !DILocation(line: 269, column: 3, scope: !13069)
!13348 = !DILabel(scope: !13069, name: "use_integer_arithmetic", file: !1282, line: 271)
!13349 = !DILocation(line: 271, column: 2, scope: !13069)
!13350 = !DILocation(line: 278, column: 9, scope: !13351)
!13351 = distinct !DILexicalBlock(scope: !13352, file: !1282, line: 278, column: 9)
!13352 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 272, column: 3)
!13353 = !DILocation(line: 278, column: 14, scope: !13351)
!13354 = !DILocation(line: 278, column: 9, scope: !13352)
!13355 = !DILocation(line: 280, column: 18, scope: !13356)
!13356 = distinct !DILexicalBlock(scope: !13351, file: !1282, line: 279, column: 7)
!13357 = !DILocation(line: 282, column: 13, scope: !13358)
!13358 = distinct !DILexicalBlock(scope: !13356, file: !1282, line: 282, column: 13)
!13359 = !DILocation(line: 282, column: 21, scope: !13358)
!13360 = !DILocation(line: 282, column: 18, scope: !13358)
!13361 = !DILocation(line: 282, column: 13, scope: !13356)
!13362 = !DILocation(line: 284, column: 13, scope: !13363)
!13363 = distinct !DILexicalBlock(scope: !13358, file: !1282, line: 283, column: 11)
!13364 = !DILocalVariable(name: "r10", scope: !13365, file: !1282, line: 286, type: !6)
!13365 = distinct !DILexicalBlock(scope: !13363, file: !1282, line: 285, column: 15)
!13366 = !DILocation(line: 286, column: 30, scope: !13365)
!13367 = !DILocation(line: 286, column: 37, scope: !13365)
!13368 = !DILocation(line: 286, column: 43, scope: !13365)
!13369 = !DILocation(line: 286, column: 41, scope: !13365)
!13370 = !DILocation(line: 286, column: 49, scope: !13365)
!13371 = !DILocation(line: 286, column: 56, scope: !13365)
!13372 = !DILocation(line: 286, column: 54, scope: !13365)
!13373 = !DILocation(line: 286, column: 36, scope: !13365)
!13374 = !DILocalVariable(name: "r2", scope: !13365, file: !1282, line: 287, type: !6)
!13375 = !DILocation(line: 287, column: 30, scope: !13365)
!13376 = !DILocation(line: 287, column: 36, scope: !13365)
!13377 = !DILocation(line: 287, column: 42, scope: !13365)
!13378 = !DILocation(line: 287, column: 40, scope: !13365)
!13379 = !DILocation(line: 287, column: 48, scope: !13365)
!13380 = !DILocation(line: 287, column: 55, scope: !13365)
!13381 = !DILocation(line: 287, column: 64, scope: !13365)
!13382 = !DILocation(line: 287, column: 52, scope: !13365)
!13383 = !DILocation(line: 288, column: 24, scope: !13365)
!13384 = !DILocation(line: 288, column: 21, scope: !13365)
!13385 = !DILocation(line: 289, column: 26, scope: !13365)
!13386 = !DILocation(line: 289, column: 32, scope: !13365)
!13387 = !DILocation(line: 289, column: 30, scope: !13365)
!13388 = !DILocation(line: 289, column: 24, scope: !13365)
!13389 = !DILocation(line: 290, column: 29, scope: !13365)
!13390 = !DILocation(line: 290, column: 34, scope: !13365)
!13391 = !DILocation(line: 290, column: 32, scope: !13365)
!13392 = !DILocation(line: 291, column: 32, scope: !13365)
!13393 = !DILocation(line: 291, column: 37, scope: !13365)
!13394 = !DILocation(line: 291, column: 35, scope: !13365)
!13395 = !DILocation(line: 291, column: 47, scope: !13365)
!13396 = !DILocation(line: 292, column: 36, scope: !13365)
!13397 = !DILocation(line: 292, column: 43, scope: !13365)
!13398 = !DILocation(line: 292, column: 48, scope: !13365)
!13399 = !DILocation(line: 292, column: 46, scope: !13365)
!13400 = !DILocation(line: 292, column: 41, scope: !13365)
!13401 = !DILocation(line: 292, column: 33, scope: !13365)
!13402 = !DILocation(line: 290, column: 26, scope: !13365)
!13403 = !DILocation(line: 293, column: 25, scope: !13365)
!13404 = !DILocation(line: 294, column: 15, scope: !13365)
!13405 = !DILocation(line: 295, column: 20, scope: !13363)
!13406 = !DILocation(line: 295, column: 28, scope: !13363)
!13407 = !DILocation(line: 295, column: 25, scope: !13363)
!13408 = !DILocation(line: 295, column: 32, scope: !13363)
!13409 = !DILocation(line: 295, column: 35, scope: !13363)
!13410 = !DILocation(line: 295, column: 46, scope: !13363)
!13411 = !DILocation(line: 295, column: 44, scope: !13363)
!13412 = !DILocation(line: 0, scope: !13363)
!13413 = distinct !{!13413, !13362, !13414}
!13414 = !DILocation(line: 295, column: 58, scope: !13363)
!13415 = !DILocation(line: 297, column: 17, scope: !13416)
!13416 = distinct !DILexicalBlock(scope: !13363, file: !1282, line: 297, column: 17)
!13417 = !DILocation(line: 297, column: 21, scope: !13416)
!13418 = !DILocation(line: 297, column: 17, scope: !13363)
!13419 = !DILocation(line: 299, column: 21, scope: !13420)
!13420 = distinct !DILexicalBlock(scope: !13421, file: !1282, line: 299, column: 21)
!13421 = distinct !DILexicalBlock(scope: !13416, file: !1282, line: 298, column: 15)
!13422 = !DILocation(line: 299, column: 35, scope: !13420)
!13423 = !DILocation(line: 299, column: 21, scope: !13421)
!13424 = !DILocation(line: 300, column: 27, scope: !13420)
!13425 = !DILocation(line: 300, column: 39, scope: !13420)
!13426 = !DILocation(line: 300, column: 46, scope: !13420)
!13427 = !DILocation(line: 300, column: 36, scope: !13420)
!13428 = !DILocation(line: 300, column: 25, scope: !13420)
!13429 = !DILocation(line: 301, column: 23, scope: !13420)
!13430 = !DILocation(line: 301, column: 37, scope: !13420)
!13431 = !DILocation(line: 301, column: 54, scope: !13420)
!13432 = !DILocation(line: 301, column: 61, scope: !13420)
!13433 = !DILocation(line: 301, column: 59, scope: !13420)
!13434 = !DILocation(line: 303, column: 27, scope: !13435)
!13435 = distinct !DILexicalBlock(scope: !13420, file: !1282, line: 302, column: 19)
!13436 = !DILocation(line: 304, column: 30, scope: !13435)
!13437 = !DILocation(line: 306, column: 25, scope: !13438)
!13438 = distinct !DILexicalBlock(scope: !13435, file: !1282, line: 306, column: 25)
!13439 = !DILocation(line: 306, column: 32, scope: !13438)
!13440 = !DILocation(line: 306, column: 25, scope: !13435)
!13441 = !DILocation(line: 308, column: 28, scope: !13442)
!13442 = distinct !DILexicalBlock(scope: !13438, file: !1282, line: 307, column: 23)
!13443 = !DILocation(line: 309, column: 32, scope: !13442)
!13444 = !DILocation(line: 310, column: 23, scope: !13442)
!13445 = !DILocation(line: 311, column: 19, scope: !13435)
!13446 = !DILocation(line: 313, column: 21, scope: !13447)
!13447 = distinct !DILexicalBlock(scope: !13421, file: !1282, line: 313, column: 21)
!13448 = !DILocation(line: 313, column: 25, scope: !13447)
!13449 = !DILocation(line: 314, column: 21, scope: !13447)
!13450 = !DILocation(line: 314, column: 25, scope: !13447)
!13451 = !DILocation(line: 314, column: 32, scope: !13447)
!13452 = !DILocation(line: 314, column: 38, scope: !13447)
!13453 = !DILocation(line: 314, column: 43, scope: !13447)
!13454 = !DILocation(line: 313, column: 21, scope: !13421)
!13455 = !DILocation(line: 316, column: 34, scope: !13456)
!13456 = distinct !DILexicalBlock(scope: !13447, file: !1282, line: 315, column: 19)
!13457 = !DILocation(line: 316, column: 32, scope: !13456)
!13458 = !DILocation(line: 316, column: 28, scope: !13456)
!13459 = !DILocation(line: 316, column: 22, scope: !13456)
!13460 = !DILocation(line: 316, column: 26, scope: !13456)
!13461 = !DILocation(line: 317, column: 26, scope: !13456)
!13462 = !DILocation(line: 317, column: 23, scope: !13456)
!13463 = !DILocation(line: 318, column: 29, scope: !13456)
!13464 = !DILocation(line: 318, column: 32, scope: !13456)
!13465 = !DILocation(line: 318, column: 47, scope: !13456)
!13466 = !DILocation(line: 318, column: 21, scope: !13456)
!13467 = !DILocation(line: 319, column: 39, scope: !13456)
!13468 = !DILocation(line: 319, column: 28, scope: !13456)
!13469 = !DILocation(line: 320, column: 19, scope: !13456)
!13470 = !DILocation(line: 321, column: 15, scope: !13421)
!13471 = !DILocation(line: 322, column: 11, scope: !13363)
!13472 = !DILocation(line: 323, column: 7, scope: !13356)
!13473 = !DILocation(line: 325, column: 9, scope: !13474)
!13474 = distinct !DILexicalBlock(scope: !13352, file: !1282, line: 325, column: 9)
!13475 = !DILocation(line: 325, column: 23, scope: !13474)
!13476 = !DILocation(line: 325, column: 9, scope: !13352)
!13477 = !DILocation(line: 326, column: 15, scope: !13474)
!13478 = !DILocation(line: 326, column: 29, scope: !13474)
!13479 = !DILocation(line: 326, column: 41, scope: !13474)
!13480 = !DILocation(line: 326, column: 45, scope: !13474)
!13481 = !DILocation(line: 326, column: 38, scope: !13474)
!13482 = !DILocation(line: 326, column: 27, scope: !13474)
!13483 = !DILocation(line: 326, column: 22, scope: !13474)
!13484 = !DILocation(line: 326, column: 13, scope: !13474)
!13485 = !DILocation(line: 327, column: 11, scope: !13474)
!13486 = !DILocation(line: 327, column: 25, scope: !13474)
!13487 = !DILocation(line: 327, column: 42, scope: !13474)
!13488 = !DILocation(line: 327, column: 49, scope: !13474)
!13489 = !DILocation(line: 327, column: 58, scope: !13474)
!13490 = !DILocation(line: 327, column: 56, scope: !13474)
!13491 = !DILocation(line: 327, column: 47, scope: !13474)
!13492 = !DILocation(line: 329, column: 12, scope: !13493)
!13493 = distinct !DILexicalBlock(scope: !13474, file: !1282, line: 328, column: 7)
!13494 = !DILocation(line: 331, column: 14, scope: !13495)
!13495 = distinct !DILexicalBlock(scope: !13493, file: !1282, line: 331, column: 13)
!13496 = !DILocation(line: 331, column: 19, scope: !13495)
!13497 = !DILocation(line: 332, column: 13, scope: !13495)
!13498 = !DILocation(line: 332, column: 16, scope: !13495)
!13499 = !DILocation(line: 332, column: 23, scope: !13495)
!13500 = !DILocation(line: 332, column: 20, scope: !13495)
!13501 = !DILocation(line: 332, column: 28, scope: !13495)
!13502 = !DILocation(line: 332, column: 31, scope: !13495)
!13503 = !DILocation(line: 332, column: 42, scope: !13495)
!13504 = !DILocation(line: 332, column: 40, scope: !13495)
!13505 = !DILocation(line: 331, column: 13, scope: !13493)
!13506 = !DILocation(line: 334, column: 21, scope: !13507)
!13507 = distinct !DILexicalBlock(scope: !13495, file: !1282, line: 333, column: 11)
!13508 = !DILocation(line: 335, column: 20, scope: !13509)
!13509 = distinct !DILexicalBlock(scope: !13507, file: !1282, line: 335, column: 17)
!13510 = !DILocation(line: 335, column: 25, scope: !13509)
!13511 = !DILocation(line: 335, column: 17, scope: !13507)
!13512 = !DILocation(line: 337, column: 18, scope: !13513)
!13513 = distinct !DILexicalBlock(scope: !13509, file: !1282, line: 336, column: 15)
!13514 = !DILocation(line: 337, column: 22, scope: !13513)
!13515 = !DILocation(line: 338, column: 22, scope: !13513)
!13516 = !DILocation(line: 338, column: 19, scope: !13513)
!13517 = !DILocation(line: 339, column: 25, scope: !13513)
!13518 = !DILocation(line: 339, column: 28, scope: !13513)
!13519 = !DILocation(line: 339, column: 43, scope: !13513)
!13520 = !DILocation(line: 339, column: 17, scope: !13513)
!13521 = !DILocation(line: 340, column: 15, scope: !13513)
!13522 = !DILocation(line: 341, column: 17, scope: !13507)
!13523 = !DILocation(line: 342, column: 11, scope: !13507)
!13524 = !DILocation(line: 343, column: 7, scope: !13493)
!13525 = !DILocation(line: 345, column: 18, scope: !13352)
!13526 = !DILocation(line: 345, column: 16, scope: !13352)
!13527 = !DILocation(line: 347, column: 5, scope: !13352)
!13528 = !DILocalVariable(name: "digit", scope: !13529, file: !1282, line: 349, type: !27)
!13529 = distinct !DILexicalBlock(scope: !13352, file: !1282, line: 348, column: 7)
!13530 = !DILocation(line: 349, column: 13, scope: !13529)
!13531 = !DILocation(line: 349, column: 21, scope: !13529)
!13532 = !DILocation(line: 349, column: 25, scope: !13529)
!13533 = !DILocation(line: 350, column: 16, scope: !13529)
!13534 = !DILocation(line: 350, column: 22, scope: !13529)
!13535 = !DILocation(line: 350, column: 10, scope: !13529)
!13536 = !DILocation(line: 350, column: 14, scope: !13529)
!13537 = !DILocation(line: 351, column: 7, scope: !13529)
!13538 = !DILocation(line: 352, column: 17, scope: !13352)
!13539 = !DILocation(line: 352, column: 24, scope: !13352)
!13540 = distinct !{!13540, !13527, !13541}
!13541 = !DILocation(line: 352, column: 28, scope: !13352)
!13542 = !DILocation(line: 353, column: 3, scope: !13352)
!13543 = !DILabel(scope: !13069, name: "do_grouping", file: !1282, line: 355)
!13544 = !DILocation(line: 355, column: 2, scope: !13069)
!13545 = !DILocation(line: 356, column: 7, scope: !13546)
!13546 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 356, column: 7)
!13547 = !DILocation(line: 356, column: 12, scope: !13546)
!13548 = !DILocation(line: 356, column: 7, scope: !13069)
!13549 = !DILocation(line: 357, column: 23, scope: !13546)
!13550 = !DILocation(line: 357, column: 26, scope: !13546)
!13551 = !DILocation(line: 357, column: 39, scope: !13546)
!13552 = !DILocation(line: 357, column: 37, scope: !13546)
!13553 = !DILocation(line: 357, column: 42, scope: !13546)
!13554 = !DILocation(line: 357, column: 52, scope: !13546)
!13555 = !DILocation(line: 357, column: 9, scope: !13546)
!13556 = !DILocation(line: 357, column: 7, scope: !13546)
!13557 = !DILocation(line: 357, column: 5, scope: !13546)
!13558 = !DILocation(line: 359, column: 7, scope: !13559)
!13559 = distinct !DILexicalBlock(scope: !13069, file: !1282, line: 359, column: 7)
!13560 = !DILocation(line: 359, column: 12, scope: !13559)
!13561 = !DILocation(line: 359, column: 7, scope: !13069)
!13562 = !DILocation(line: 361, column: 11, scope: !13563)
!13563 = distinct !DILexicalBlock(scope: !13564, file: !1282, line: 361, column: 11)
!13564 = distinct !DILexicalBlock(scope: !13559, file: !1282, line: 360, column: 5)
!13565 = !DILocation(line: 361, column: 20, scope: !13563)
!13566 = !DILocation(line: 361, column: 11, scope: !13564)
!13567 = !DILocalVariable(name: "power", scope: !13568, file: !1282, line: 363, type: !168)
!13568 = distinct !DILexicalBlock(scope: !13563, file: !1282, line: 362, column: 9)
!13569 = !DILocation(line: 363, column: 21, scope: !13568)
!13570 = !DILocation(line: 364, column: 20, scope: !13568)
!13571 = !DILocation(line: 365, column: 22, scope: !13572)
!13572 = distinct !DILexicalBlock(scope: !13568, file: !1282, line: 365, column: 11)
!13573 = !DILocation(line: 365, column: 16, scope: !13572)
!13574 = !DILocation(line: 365, column: 27, scope: !13575)
!13575 = distinct !DILexicalBlock(scope: !13572, file: !1282, line: 365, column: 11)
!13576 = !DILocation(line: 365, column: 35, scope: !13575)
!13577 = !DILocation(line: 365, column: 33, scope: !13575)
!13578 = !DILocation(line: 365, column: 11, scope: !13572)
!13579 = !DILocation(line: 366, column: 17, scope: !13580)
!13580 = distinct !DILexicalBlock(scope: !13575, file: !1282, line: 366, column: 17)
!13581 = !DILocation(line: 366, column: 31, scope: !13580)
!13582 = !DILocation(line: 366, column: 28, scope: !13580)
!13583 = !DILocation(line: 366, column: 17, scope: !13575)
!13584 = !DILocation(line: 367, column: 15, scope: !13580)
!13585 = !DILocation(line: 365, column: 59, scope: !13575)
!13586 = !DILocation(line: 365, column: 56, scope: !13575)
!13587 = !DILocation(line: 365, column: 11, scope: !13575)
!13588 = distinct !{!13588, !13578, !13589}
!13589 = !DILocation(line: 367, column: 15, scope: !13572)
!13590 = !DILocation(line: 368, column: 9, scope: !13568)
!13591 = !DILocation(line: 370, column: 12, scope: !13592)
!13592 = distinct !DILexicalBlock(scope: !13564, file: !1282, line: 370, column: 11)
!13593 = !DILocation(line: 370, column: 24, scope: !13592)
!13594 = !DILocation(line: 370, column: 29, scope: !13592)
!13595 = !DILocation(line: 370, column: 21, scope: !13592)
!13596 = !DILocation(line: 370, column: 41, scope: !13592)
!13597 = !DILocation(line: 370, column: 45, scope: !13592)
!13598 = !DILocation(line: 370, column: 50, scope: !13592)
!13599 = !DILocation(line: 370, column: 11, scope: !13564)
!13600 = !DILocation(line: 371, column: 17, scope: !13592)
!13601 = !DILocation(line: 371, column: 20, scope: !13592)
!13602 = !DILocation(line: 371, column: 9, scope: !13592)
!13603 = !DILocation(line: 373, column: 11, scope: !13604)
!13604 = distinct !DILexicalBlock(scope: !13564, file: !1282, line: 373, column: 11)
!13605 = !DILocation(line: 373, column: 11, scope: !13564)
!13606 = !DILocation(line: 374, column: 26, scope: !13604)
!13607 = !DILocation(line: 374, column: 31, scope: !13604)
!13608 = !DILocation(line: 374, column: 50, scope: !13604)
!13609 = !DILocation(line: 374, column: 53, scope: !13604)
!13610 = !DILocation(line: 374, column: 62, scope: !13604)
!13611 = !DILocation(line: 374, column: 23, scope: !13604)
!13612 = !DILocation(line: 376, column: 38, scope: !13604)
!13613 = !DILocation(line: 376, column: 25, scope: !13604)
!13614 = !DILocation(line: 374, column: 22, scope: !13604)
!13615 = !DILocation(line: 374, column: 17, scope: !13604)
!13616 = !DILocation(line: 374, column: 20, scope: !13604)
!13617 = !DILocation(line: 374, column: 9, scope: !13604)
!13618 = !DILocation(line: 378, column: 11, scope: !13619)
!13619 = distinct !DILexicalBlock(scope: !13564, file: !1282, line: 378, column: 11)
!13620 = !DILocation(line: 378, column: 16, scope: !13619)
!13621 = !DILocation(line: 378, column: 11, scope: !13564)
!13622 = !DILocation(line: 380, column: 16, scope: !13623)
!13623 = distinct !DILexicalBlock(scope: !13624, file: !1282, line: 380, column: 15)
!13624 = distinct !DILexicalBlock(scope: !13619, file: !1282, line: 379, column: 9)
!13625 = !DILocation(line: 380, column: 21, scope: !13623)
!13626 = !DILocation(line: 380, column: 40, scope: !13623)
!13627 = !DILocation(line: 380, column: 43, scope: !13623)
!13628 = !DILocation(line: 380, column: 15, scope: !13624)
!13629 = !DILocation(line: 381, column: 21, scope: !13623)
!13630 = !DILocation(line: 381, column: 24, scope: !13623)
!13631 = !DILocation(line: 381, column: 13, scope: !13623)
!13632 = !DILocation(line: 382, column: 19, scope: !13624)
!13633 = !DILocation(line: 382, column: 22, scope: !13624)
!13634 = !DILocation(line: 383, column: 9, scope: !13624)
!13635 = !DILocation(line: 384, column: 5, scope: !13564)
!13636 = !DILocation(line: 386, column: 4, scope: !13069)
!13637 = !DILocation(line: 386, column: 12, scope: !13069)
!13638 = !DILocation(line: 388, column: 10, scope: !13069)
!13639 = !DILocation(line: 388, column: 3, scope: !13069)
!13640 = distinct !DISubprogram(name: "adjust_value", scope: !1282, file: !1282, line: 54, type: !13641, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13641 = !DISubroutineType(types: !13642)
!13642 = !{!1274, !27, !1274}
!13643 = !DILocalVariable(name: "inexact_style", arg: 1, scope: !13640, file: !1282, line: 54, type: !27)
!13644 = !DILocation(line: 54, column: 19, scope: !13640)
!13645 = !DILocalVariable(name: "value", arg: 2, scope: !13640, file: !1282, line: 54, type: !1274)
!13646 = !DILocation(line: 54, column: 46, scope: !13640)
!13647 = !DILocation(line: 60, column: 7, scope: !13648)
!13648 = distinct !DILexicalBlock(scope: !13640, file: !1282, line: 60, column: 7)
!13649 = !DILocation(line: 60, column: 21, scope: !13648)
!13650 = !DILocation(line: 60, column: 47, scope: !13648)
!13651 = !DILocation(line: 60, column: 50, scope: !13648)
!13652 = !DILocation(line: 60, column: 56, scope: !13648)
!13653 = !DILocation(line: 60, column: 7, scope: !13640)
!13654 = !DILocalVariable(name: "u", scope: !13655, file: !1282, line: 62, type: !168)
!13655 = distinct !DILexicalBlock(scope: !13648, file: !1282, line: 61, column: 5)
!13656 = !DILocation(line: 62, column: 17, scope: !13655)
!13657 = !DILocation(line: 62, column: 21, scope: !13655)
!13658 = !DILocation(line: 63, column: 15, scope: !13655)
!13659 = !DILocation(line: 63, column: 20, scope: !13655)
!13660 = !DILocation(line: 63, column: 34, scope: !13655)
!13661 = !DILocation(line: 63, column: 51, scope: !13655)
!13662 = !DILocation(line: 63, column: 54, scope: !13655)
!13663 = !DILocation(line: 63, column: 59, scope: !13655)
!13664 = !DILocation(line: 63, column: 56, scope: !13655)
!13665 = !DILocation(line: 0, scope: !13655)
!13666 = !DILocation(line: 63, column: 19, scope: !13655)
!13667 = !DILocation(line: 63, column: 17, scope: !13655)
!13668 = !DILocation(line: 63, column: 13, scope: !13655)
!13669 = !DILocation(line: 64, column: 5, scope: !13655)
!13670 = !DILocation(line: 66, column: 10, scope: !13640)
!13671 = !DILocation(line: 66, column: 3, scope: !13640)
!13672 = distinct !DISubprogram(name: "group_number", scope: !1282, file: !1282, line: 79, type: !13673, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13673 = !DISubroutineType(types: !13674)
!13674 = !{!143, !143, !149, !146, !146}
!13675 = !DILocalVariable(name: "number", arg: 1, scope: !13672, file: !1282, line: 79, type: !143)
!13676 = !DILocation(line: 79, column: 21, scope: !13672)
!13677 = !DILocalVariable(name: "numberlen", arg: 2, scope: !13672, file: !1282, line: 79, type: !149)
!13678 = !DILocation(line: 79, column: 36, scope: !13672)
!13679 = !DILocalVariable(name: "grouping", arg: 3, scope: !13672, file: !1282, line: 80, type: !146)
!13680 = !DILocation(line: 80, column: 27, scope: !13672)
!13681 = !DILocalVariable(name: "thousands_sep", arg: 4, scope: !13672, file: !1282, line: 80, type: !146)
!13682 = !DILocation(line: 80, column: 49, scope: !13672)
!13683 = !DILocalVariable(name: "d", scope: !13672, file: !1282, line: 82, type: !143)
!13684 = !DILocation(line: 82, column: 18, scope: !13672)
!13685 = !DILocalVariable(name: "grouplen", scope: !13672, file: !1282, line: 83, type: !149)
!13686 = !DILocation(line: 83, column: 10, scope: !13672)
!13687 = !DILocalVariable(name: "thousands_seplen", scope: !13672, file: !1282, line: 84, type: !149)
!13688 = !DILocation(line: 84, column: 10, scope: !13672)
!13689 = !DILocation(line: 84, column: 37, scope: !13672)
!13690 = !DILocation(line: 84, column: 29, scope: !13672)
!13691 = !DILocalVariable(name: "i", scope: !13672, file: !1282, line: 85, type: !149)
!13692 = !DILocation(line: 85, column: 10, scope: !13672)
!13693 = !DILocation(line: 85, column: 14, scope: !13672)
!13694 = !DILocalVariable(name: "buf", scope: !13672, file: !1282, line: 89, type: !351)
!13695 = !DILocation(line: 89, column: 8, scope: !13672)
!13696 = !DILocation(line: 91, column: 3, scope: !13672)
!13697 = !DILocation(line: 91, column: 16, scope: !13672)
!13698 = !DILocation(line: 91, column: 24, scope: !13672)
!13699 = !DILocation(line: 92, column: 7, scope: !13672)
!13700 = !DILocation(line: 92, column: 16, scope: !13672)
!13701 = !DILocation(line: 92, column: 14, scope: !13672)
!13702 = !DILocation(line: 92, column: 5, scope: !13672)
!13703 = !DILocation(line: 94, column: 3, scope: !13672)
!13704 = !DILocalVariable(name: "g", scope: !13705, file: !1282, line: 96, type: !737)
!13705 = distinct !DILexicalBlock(scope: !13706, file: !1282, line: 95, column: 5)
!13706 = distinct !DILexicalBlock(scope: !13707, file: !1282, line: 94, column: 3)
!13707 = distinct !DILexicalBlock(scope: !13672, file: !1282, line: 94, column: 3)
!13708 = !DILocation(line: 96, column: 21, scope: !13705)
!13709 = !DILocation(line: 96, column: 26, scope: !13705)
!13710 = !DILocation(line: 96, column: 25, scope: !13705)
!13711 = !DILocation(line: 98, column: 11, scope: !13712)
!13712 = distinct !DILexicalBlock(scope: !13705, file: !1282, line: 98, column: 11)
!13713 = !DILocation(line: 98, column: 11, scope: !13705)
!13714 = !DILocation(line: 100, column: 22, scope: !13715)
!13715 = distinct !DILexicalBlock(scope: !13712, file: !1282, line: 99, column: 9)
!13716 = !DILocation(line: 100, column: 24, scope: !13715)
!13717 = !DILocation(line: 100, column: 37, scope: !13715)
!13718 = !DILocation(line: 100, column: 41, scope: !13715)
!13719 = !DILocation(line: 100, column: 20, scope: !13715)
!13720 = !DILocation(line: 101, column: 19, scope: !13715)
!13721 = !DILocation(line: 102, column: 9, scope: !13715)
!13722 = !DILocation(line: 104, column: 11, scope: !13723)
!13723 = distinct !DILexicalBlock(scope: !13705, file: !1282, line: 104, column: 11)
!13724 = !DILocation(line: 104, column: 15, scope: !13723)
!13725 = !DILocation(line: 104, column: 13, scope: !13723)
!13726 = !DILocation(line: 104, column: 11, scope: !13705)
!13727 = !DILocation(line: 105, column: 20, scope: !13723)
!13728 = !DILocation(line: 105, column: 18, scope: !13723)
!13729 = !DILocation(line: 105, column: 9, scope: !13723)
!13730 = !DILocation(line: 107, column: 12, scope: !13705)
!13731 = !DILocation(line: 107, column: 9, scope: !13705)
!13732 = !DILocation(line: 108, column: 12, scope: !13705)
!13733 = !DILocation(line: 108, column: 9, scope: !13705)
!13734 = !DILocation(line: 109, column: 15, scope: !13705)
!13735 = !DILocation(line: 109, column: 18, scope: !13705)
!13736 = !DILocation(line: 109, column: 24, scope: !13705)
!13737 = !DILocation(line: 109, column: 22, scope: !13705)
!13738 = !DILocation(line: 109, column: 27, scope: !13705)
!13739 = !DILocation(line: 109, column: 7, scope: !13705)
!13740 = !DILocation(line: 110, column: 11, scope: !13741)
!13741 = distinct !DILexicalBlock(scope: !13705, file: !1282, line: 110, column: 11)
!13742 = !DILocation(line: 110, column: 13, scope: !13741)
!13743 = !DILocation(line: 110, column: 11, scope: !13705)
!13744 = !DILocation(line: 111, column: 16, scope: !13741)
!13745 = !DILocation(line: 111, column: 9, scope: !13741)
!13746 = !DILocation(line: 113, column: 12, scope: !13705)
!13747 = !DILocation(line: 113, column: 9, scope: !13705)
!13748 = !DILocation(line: 114, column: 15, scope: !13705)
!13749 = !DILocation(line: 114, column: 18, scope: !13705)
!13750 = !DILocation(line: 114, column: 33, scope: !13705)
!13751 = !DILocation(line: 114, column: 7, scope: !13705)
!13752 = !DILocation(line: 94, column: 3, scope: !13706)
!13753 = distinct !{!13753, !13754, !13755}
!13754 = !DILocation(line: 94, column: 3, scope: !13707)
!13755 = !DILocation(line: 115, column: 5, scope: !13707)
!13756 = distinct !DISubprogram(name: "human_options", scope: !1282, file: !1282, line: 462, type: !13757, scopeLine: 463, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13757 = !DISubroutineType(types: !13758)
!13758 = !{!109, !146, !642, !13759}
!13759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!13760 = !DILocalVariable(name: "spec", arg: 1, scope: !13756, file: !1282, line: 462, type: !146)
!13761 = !DILocation(line: 462, column: 28, scope: !13756)
!13762 = !DILocalVariable(name: "opts", arg: 2, scope: !13756, file: !1282, line: 462, type: !642)
!13763 = !DILocation(line: 462, column: 39, scope: !13756)
!13764 = !DILocalVariable(name: "block_size", arg: 3, scope: !13756, file: !1282, line: 462, type: !13759)
!13765 = !DILocation(line: 462, column: 56, scope: !13756)
!13766 = !DILocalVariable(name: "e", scope: !13756, file: !1282, line: 464, type: !1276)
!13767 = !DILocation(line: 464, column: 16, scope: !13756)
!13768 = !DILocation(line: 464, column: 30, scope: !13756)
!13769 = !DILocation(line: 464, column: 36, scope: !13756)
!13770 = !DILocation(line: 464, column: 48, scope: !13756)
!13771 = !DILocation(line: 464, column: 20, scope: !13756)
!13772 = !DILocation(line: 465, column: 8, scope: !13773)
!13773 = distinct !DILexicalBlock(scope: !13756, file: !1282, line: 465, column: 7)
!13774 = !DILocation(line: 465, column: 7, scope: !13773)
!13775 = !DILocation(line: 465, column: 19, scope: !13773)
!13776 = !DILocation(line: 465, column: 7, scope: !13756)
!13777 = !DILocation(line: 467, column: 21, scope: !13778)
!13778 = distinct !DILexicalBlock(scope: !13773, file: !1282, line: 466, column: 5)
!13779 = !DILocation(line: 467, column: 8, scope: !13778)
!13780 = !DILocation(line: 467, column: 19, scope: !13778)
!13781 = !DILocation(line: 468, column: 9, scope: !13778)
!13782 = !DILocation(line: 469, column: 5, scope: !13778)
!13783 = !DILocation(line: 470, column: 10, scope: !13756)
!13784 = !DILocation(line: 470, column: 3, scope: !13756)
!13785 = distinct !DISubprogram(name: "humblock", scope: !1282, file: !1282, line: 412, type: !13786, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13786 = !DISubroutineType(types: !13787)
!13787 = !{!1276, !146, !13759, !642}
!13788 = !DILocalVariable(name: "spec", arg: 1, scope: !13785, file: !1282, line: 412, type: !146)
!13789 = !DILocation(line: 412, column: 23, scope: !13785)
!13790 = !DILocalVariable(name: "block_size", arg: 2, scope: !13785, file: !1282, line: 412, type: !13759)
!13791 = !DILocation(line: 412, column: 40, scope: !13785)
!13792 = !DILocalVariable(name: "options", arg: 3, scope: !13785, file: !1282, line: 412, type: !642)
!13793 = !DILocation(line: 412, column: 57, scope: !13785)
!13794 = !DILocalVariable(name: "i", scope: !13785, file: !1282, line: 414, type: !27)
!13795 = !DILocation(line: 414, column: 7, scope: !13785)
!13796 = !DILocalVariable(name: "opts", scope: !13785, file: !1282, line: 415, type: !27)
!13797 = !DILocation(line: 415, column: 7, scope: !13785)
!13798 = !DILocation(line: 417, column: 9, scope: !13799)
!13799 = distinct !DILexicalBlock(scope: !13785, file: !1282, line: 417, column: 7)
!13800 = !DILocation(line: 418, column: 7, scope: !13799)
!13801 = !DILocation(line: 418, column: 20, scope: !13799)
!13802 = !DILocation(line: 418, column: 18, scope: !13799)
!13803 = !DILocation(line: 419, column: 7, scope: !13799)
!13804 = !DILocation(line: 419, column: 20, scope: !13799)
!13805 = !DILocation(line: 419, column: 18, scope: !13799)
!13806 = !DILocation(line: 417, column: 7, scope: !13785)
!13807 = !DILocation(line: 420, column: 19, scope: !13799)
!13808 = !DILocation(line: 420, column: 6, scope: !13799)
!13809 = !DILocation(line: 420, column: 17, scope: !13799)
!13810 = !DILocation(line: 420, column: 5, scope: !13799)
!13811 = !DILocation(line: 423, column: 12, scope: !13812)
!13812 = distinct !DILexicalBlock(scope: !13813, file: !1282, line: 423, column: 11)
!13813 = distinct !DILexicalBlock(scope: !13799, file: !1282, line: 422, column: 5)
!13814 = !DILocation(line: 423, column: 11, scope: !13812)
!13815 = !DILocation(line: 423, column: 17, scope: !13812)
!13816 = !DILocation(line: 423, column: 11, scope: !13813)
!13817 = !DILocation(line: 425, column: 16, scope: !13818)
!13818 = distinct !DILexicalBlock(scope: !13812, file: !1282, line: 424, column: 9)
!13819 = !DILocation(line: 426, column: 15, scope: !13818)
!13820 = !DILocation(line: 427, column: 9, scope: !13818)
!13821 = !DILocation(line: 429, column: 21, scope: !13822)
!13822 = distinct !DILexicalBlock(scope: !13813, file: !1282, line: 429, column: 11)
!13823 = !DILocation(line: 429, column: 19, scope: !13822)
!13824 = !DILocation(line: 429, column: 13, scope: !13822)
!13825 = !DILocation(line: 429, column: 11, scope: !13813)
!13826 = !DILocation(line: 431, column: 35, scope: !13827)
!13827 = distinct !DILexicalBlock(scope: !13822, file: !1282, line: 430, column: 9)
!13828 = !DILocation(line: 431, column: 19, scope: !13827)
!13829 = !DILocation(line: 431, column: 16, scope: !13827)
!13830 = !DILocation(line: 432, column: 12, scope: !13827)
!13831 = !DILocation(line: 432, column: 23, scope: !13827)
!13832 = !DILocation(line: 433, column: 9, scope: !13827)
!13833 = !DILocalVariable(name: "ptr", scope: !13834, file: !1282, line: 436, type: !143)
!13834 = distinct !DILexicalBlock(scope: !13822, file: !1282, line: 435, column: 9)
!13835 = !DILocation(line: 436, column: 17, scope: !13834)
!13836 = !DILocalVariable(name: "e", scope: !13834, file: !1282, line: 437, type: !1276)
!13837 = !DILocation(line: 437, column: 24, scope: !13834)
!13838 = !DILocation(line: 437, column: 40, scope: !13834)
!13839 = !DILocation(line: 437, column: 55, scope: !13834)
!13840 = !DILocation(line: 437, column: 28, scope: !13834)
!13841 = !DILocation(line: 439, column: 15, scope: !13842)
!13842 = distinct !DILexicalBlock(scope: !13834, file: !1282, line: 439, column: 15)
!13843 = !DILocation(line: 439, column: 17, scope: !13842)
!13844 = !DILocation(line: 439, column: 15, scope: !13834)
!13845 = !DILocation(line: 441, column: 16, scope: !13846)
!13846 = distinct !DILexicalBlock(scope: !13842, file: !1282, line: 440, column: 13)
!13847 = !DILocation(line: 441, column: 24, scope: !13846)
!13848 = !DILocation(line: 442, column: 22, scope: !13846)
!13849 = !DILocation(line: 442, column: 15, scope: !13846)
!13850 = !DILocation(line: 444, column: 11, scope: !13834)
!13851 = !DILocation(line: 444, column: 29, scope: !13852)
!13852 = distinct !DILexicalBlock(scope: !13853, file: !1282, line: 444, column: 11)
!13853 = distinct !DILexicalBlock(scope: !13834, file: !1282, line: 444, column: 11)
!13854 = !DILocation(line: 444, column: 28, scope: !13852)
!13855 = !DILocation(line: 444, column: 25, scope: !13852)
!13856 = !DILocation(line: 444, column: 34, scope: !13852)
!13857 = !DILocation(line: 444, column: 38, scope: !13852)
!13858 = !DILocation(line: 444, column: 37, scope: !13852)
!13859 = !DILocation(line: 444, column: 43, scope: !13852)
!13860 = !DILocation(line: 0, scope: !13852)
!13861 = !DILocation(line: 444, column: 18, scope: !13852)
!13862 = !DILocation(line: 444, column: 11, scope: !13853)
!13863 = !DILocation(line: 445, column: 17, scope: !13864)
!13864 = distinct !DILexicalBlock(scope: !13852, file: !1282, line: 445, column: 17)
!13865 = !DILocation(line: 445, column: 25, scope: !13864)
!13866 = !DILocation(line: 445, column: 22, scope: !13864)
!13867 = !DILocation(line: 445, column: 17, scope: !13852)
!13868 = !DILocation(line: 447, column: 22, scope: !13869)
!13869 = distinct !DILexicalBlock(scope: !13864, file: !1282, line: 446, column: 15)
!13870 = !DILocation(line: 448, column: 21, scope: !13871)
!13871 = distinct !DILexicalBlock(scope: !13869, file: !1282, line: 448, column: 21)
!13872 = !DILocation(line: 448, column: 29, scope: !13871)
!13873 = !DILocation(line: 448, column: 21, scope: !13869)
!13874 = !DILocation(line: 449, column: 24, scope: !13871)
!13875 = !DILocation(line: 449, column: 19, scope: !13871)
!13876 = !DILocation(line: 450, column: 21, scope: !13877)
!13877 = distinct !DILexicalBlock(scope: !13869, file: !1282, line: 450, column: 21)
!13878 = !DILocation(line: 450, column: 29, scope: !13877)
!13879 = !DILocation(line: 450, column: 36, scope: !13877)
!13880 = !DILocation(line: 450, column: 39, scope: !13877)
!13881 = !DILocation(line: 450, column: 47, scope: !13877)
!13882 = !DILocation(line: 450, column: 21, scope: !13869)
!13883 = !DILocation(line: 451, column: 24, scope: !13877)
!13884 = !DILocation(line: 451, column: 19, scope: !13877)
!13885 = !DILocation(line: 452, column: 17, scope: !13869)
!13886 = !DILocation(line: 444, column: 56, scope: !13852)
!13887 = !DILocation(line: 444, column: 11, scope: !13852)
!13888 = distinct !{!13888, !13862, !13889}
!13889 = !DILocation(line: 453, column: 15, scope: !13853)
!13890 = !DILocation(line: 457, column: 14, scope: !13785)
!13891 = !DILocation(line: 457, column: 4, scope: !13785)
!13892 = !DILocation(line: 457, column: 12, scope: !13785)
!13893 = !DILocation(line: 458, column: 3, scope: !13785)
!13894 = !DILocation(line: 459, column: 1, scope: !13785)
!13895 = distinct !DISubprogram(name: "default_block_size", scope: !1282, file: !1282, line: 406, type: !13896, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !152)
!13896 = !DISubroutineType(types: !13897)
!13897 = !{!168}
!13898 = !DILocation(line: 408, column: 10, scope: !13895)
!13899 = !DILocation(line: 408, column: 3, scope: !13895)
!13900 = distinct !DISubprogram(name: "getuser", scope: !1292, file: !1292, line: 69, type: !13901, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1287, retainedNodes: !152)
!13901 = !DISubroutineType(types: !13902)
!13902 = !{!143, !1298}
!13903 = !DILocalVariable(name: "uid", arg: 1, scope: !13900, file: !1292, line: 69, type: !1298)
!13904 = !DILocation(line: 69, column: 16, scope: !13900)
!13905 = !DILocalVariable(name: "tail", scope: !13900, file: !1292, line: 71, type: !1290)
!13906 = !DILocation(line: 71, column: 18, scope: !13900)
!13907 = !DILocalVariable(name: "match", scope: !13900, file: !1292, line: 72, type: !1290)
!13908 = !DILocation(line: 72, column: 18, scope: !13900)
!13909 = !DILocation(line: 74, column: 15, scope: !13910)
!13910 = distinct !DILexicalBlock(scope: !13900, file: !1292, line: 74, column: 3)
!13911 = !DILocation(line: 74, column: 13, scope: !13910)
!13912 = !DILocation(line: 74, column: 8, scope: !13910)
!13913 = !DILocation(line: 74, column: 27, scope: !13914)
!13914 = distinct !DILexicalBlock(scope: !13910, file: !1292, line: 74, column: 3)
!13915 = !DILocation(line: 74, column: 3, scope: !13910)
!13916 = !DILocation(line: 76, column: 11, scope: !13917)
!13917 = distinct !DILexicalBlock(scope: !13918, file: !1292, line: 76, column: 11)
!13918 = distinct !DILexicalBlock(scope: !13914, file: !1292, line: 75, column: 5)
!13919 = !DILocation(line: 76, column: 17, scope: !13917)
!13920 = !DILocation(line: 76, column: 20, scope: !13917)
!13921 = !DILocation(line: 76, column: 25, scope: !13917)
!13922 = !DILocation(line: 76, column: 22, scope: !13917)
!13923 = !DILocation(line: 76, column: 11, scope: !13918)
!13924 = !DILocation(line: 78, column: 19, scope: !13925)
!13925 = distinct !DILexicalBlock(scope: !13917, file: !1292, line: 77, column: 9)
!13926 = !DILocation(line: 78, column: 17, scope: !13925)
!13927 = !DILocation(line: 79, column: 11, scope: !13925)
!13928 = !DILocation(line: 81, column: 5, scope: !13918)
!13929 = !DILocation(line: 74, column: 40, scope: !13914)
!13930 = !DILocation(line: 74, column: 46, scope: !13914)
!13931 = !DILocation(line: 74, column: 38, scope: !13914)
!13932 = !DILocation(line: 74, column: 3, scope: !13914)
!13933 = distinct !{!13933, !13915, !13934}
!13934 = !DILocation(line: 81, column: 5, scope: !13910)
!13935 = !DILocation(line: 83, column: 7, scope: !13936)
!13936 = distinct !DILexicalBlock(scope: !13900, file: !1292, line: 83, column: 7)
!13937 = !DILocation(line: 83, column: 13, scope: !13936)
!13938 = !DILocation(line: 83, column: 7, scope: !13900)
!13939 = !DILocalVariable(name: "pwent", scope: !13940, file: !1292, line: 85, type: !1303)
!13940 = distinct !DILexicalBlock(scope: !13936, file: !1292, line: 84, column: 5)
!13941 = !DILocation(line: 85, column: 22, scope: !13940)
!13942 = !DILocation(line: 85, column: 40, scope: !13940)
!13943 = !DILocation(line: 85, column: 30, scope: !13940)
!13944 = !DILocalVariable(name: "name", scope: !13940, file: !1292, line: 86, type: !146)
!13945 = !DILocation(line: 86, column: 19, scope: !13940)
!13946 = !DILocation(line: 86, column: 26, scope: !13940)
!13947 = !DILocation(line: 86, column: 34, scope: !13940)
!13948 = !DILocation(line: 86, column: 41, scope: !13940)
!13949 = !DILocation(line: 87, column: 24, scope: !13940)
!13950 = !DILocation(line: 87, column: 15, scope: !13940)
!13951 = !DILocation(line: 87, column: 13, scope: !13940)
!13952 = !DILocation(line: 88, column: 21, scope: !13940)
!13953 = !DILocation(line: 88, column: 7, scope: !13940)
!13954 = !DILocation(line: 88, column: 14, scope: !13940)
!13955 = !DILocation(line: 88, column: 17, scope: !13940)
!13956 = !DILocation(line: 88, column: 19, scope: !13940)
!13957 = !DILocation(line: 89, column: 15, scope: !13940)
!13958 = !DILocation(line: 89, column: 22, scope: !13940)
!13959 = !DILocation(line: 89, column: 28, scope: !13940)
!13960 = !DILocation(line: 89, column: 7, scope: !13940)
!13961 = !DILocation(line: 92, column: 21, scope: !13940)
!13962 = !DILocation(line: 92, column: 7, scope: !13940)
!13963 = !DILocation(line: 92, column: 14, scope: !13940)
!13964 = !DILocation(line: 92, column: 19, scope: !13940)
!13965 = !DILocation(line: 93, column: 20, scope: !13940)
!13966 = !DILocation(line: 93, column: 18, scope: !13940)
!13967 = !DILocation(line: 94, column: 5, scope: !13940)
!13968 = !DILocation(line: 96, column: 10, scope: !13900)
!13969 = !DILocation(line: 96, column: 17, scope: !13900)
!13970 = !DILocation(line: 96, column: 27, scope: !13900)
!13971 = !DILocation(line: 96, column: 34, scope: !13900)
!13972 = !DILocation(line: 96, column: 3, scope: !13900)
!13973 = distinct !DISubprogram(name: "getuidbyname", scope: !1292, file: !1292, line: 105, type: !13974, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1287, retainedNodes: !152)
!13974 = !DISubroutineType(types: !13975)
!13975 = !{!13976, !146}
!13976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1298, size: 64)
!13977 = !DILocalVariable(name: "user", arg: 1, scope: !13973, file: !1292, line: 105, type: !146)
!13978 = !DILocation(line: 105, column: 27, scope: !13973)
!13979 = !DILocalVariable(name: "tail", scope: !13973, file: !1292, line: 107, type: !1290)
!13980 = !DILocation(line: 107, column: 18, scope: !13973)
!13981 = !DILocalVariable(name: "pwent", scope: !13973, file: !1292, line: 108, type: !1303)
!13982 = !DILocation(line: 108, column: 18, scope: !13973)
!13983 = !DILocation(line: 110, column: 15, scope: !13984)
!13984 = distinct !DILexicalBlock(scope: !13973, file: !1292, line: 110, column: 3)
!13985 = !DILocation(line: 110, column: 13, scope: !13984)
!13986 = !DILocation(line: 110, column: 8, scope: !13984)
!13987 = !DILocation(line: 110, column: 27, scope: !13988)
!13988 = distinct !DILexicalBlock(scope: !13984, file: !1292, line: 110, column: 3)
!13989 = !DILocation(line: 110, column: 3, scope: !13984)
!13990 = !DILocation(line: 112, column: 10, scope: !13991)
!13991 = distinct !DILexicalBlock(scope: !13988, file: !1292, line: 112, column: 9)
!13992 = !DILocation(line: 112, column: 16, scope: !13991)
!13993 = !DILocation(line: 112, column: 9, scope: !13991)
!13994 = !DILocation(line: 112, column: 25, scope: !13991)
!13995 = !DILocation(line: 112, column: 24, scope: !13991)
!13996 = !DILocation(line: 112, column: 21, scope: !13991)
!13997 = !DILocation(line: 112, column: 30, scope: !13991)
!13998 = !DILocation(line: 112, column: 42, scope: !13991)
!13999 = !DILocation(line: 112, column: 48, scope: !13991)
!14000 = !DILocation(line: 112, column: 54, scope: !13991)
!14001 = !DILocation(line: 112, column: 34, scope: !13991)
!14002 = !DILocation(line: 112, column: 9, scope: !13988)
!14003 = !DILocation(line: 113, column: 15, scope: !13991)
!14004 = !DILocation(line: 113, column: 21, scope: !13991)
!14005 = !DILocation(line: 113, column: 24, scope: !13991)
!14006 = !DILocation(line: 113, column: 7, scope: !13991)
!14007 = !DILocation(line: 112, column: 58, scope: !13991)
!14008 = !DILocation(line: 110, column: 40, scope: !13988)
!14009 = !DILocation(line: 110, column: 46, scope: !13988)
!14010 = !DILocation(line: 110, column: 38, scope: !13988)
!14011 = !DILocation(line: 110, column: 3, scope: !13988)
!14012 = distinct !{!14012, !13989, !14013}
!14013 = !DILocation(line: 113, column: 24, scope: !13984)
!14014 = !DILocation(line: 115, column: 15, scope: !14015)
!14015 = distinct !DILexicalBlock(scope: !13973, file: !1292, line: 115, column: 3)
!14016 = !DILocation(line: 115, column: 13, scope: !14015)
!14017 = !DILocation(line: 115, column: 8, scope: !14015)
!14018 = !DILocation(line: 115, column: 29, scope: !14019)
!14019 = distinct !DILexicalBlock(scope: !14015, file: !1292, line: 115, column: 3)
!14020 = !DILocation(line: 115, column: 3, scope: !14015)
!14021 = !DILocation(line: 117, column: 10, scope: !14022)
!14022 = distinct !DILexicalBlock(scope: !14019, file: !1292, line: 117, column: 9)
!14023 = !DILocation(line: 117, column: 16, scope: !14022)
!14024 = !DILocation(line: 117, column: 9, scope: !14022)
!14025 = !DILocation(line: 117, column: 25, scope: !14022)
!14026 = !DILocation(line: 117, column: 24, scope: !14022)
!14027 = !DILocation(line: 117, column: 21, scope: !14022)
!14028 = !DILocation(line: 117, column: 30, scope: !14022)
!14029 = !DILocation(line: 117, column: 42, scope: !14022)
!14030 = !DILocation(line: 117, column: 48, scope: !14022)
!14031 = !DILocation(line: 117, column: 54, scope: !14022)
!14032 = !DILocation(line: 117, column: 34, scope: !14022)
!14033 = !DILocation(line: 117, column: 9, scope: !14019)
!14034 = !DILocation(line: 118, column: 7, scope: !14022)
!14035 = !DILocation(line: 117, column: 58, scope: !14022)
!14036 = !DILocation(line: 115, column: 42, scope: !14019)
!14037 = !DILocation(line: 115, column: 48, scope: !14019)
!14038 = !DILocation(line: 115, column: 40, scope: !14019)
!14039 = !DILocation(line: 115, column: 3, scope: !14019)
!14040 = distinct !{!14040, !14020, !14041}
!14041 = !DILocation(line: 118, column: 14, scope: !14015)
!14042 = !DILocation(line: 120, column: 21, scope: !13973)
!14043 = !DILocation(line: 120, column: 11, scope: !13973)
!14044 = !DILocation(line: 120, column: 9, scope: !13973)
!14045 = !DILocation(line: 131, column: 19, scope: !13973)
!14046 = !DILocation(line: 131, column: 10, scope: !13973)
!14047 = !DILocation(line: 131, column: 8, scope: !13973)
!14048 = !DILocation(line: 132, column: 11, scope: !13973)
!14049 = !DILocation(line: 132, column: 17, scope: !13973)
!14050 = !DILocation(line: 132, column: 23, scope: !13973)
!14051 = !DILocation(line: 132, column: 3, scope: !13973)
!14052 = !DILocation(line: 135, column: 7, scope: !14053)
!14053 = distinct !DILexicalBlock(scope: !13973, file: !1292, line: 135, column: 7)
!14054 = !DILocation(line: 135, column: 7, scope: !13973)
!14055 = !DILocation(line: 137, column: 20, scope: !14056)
!14056 = distinct !DILexicalBlock(scope: !14053, file: !1292, line: 136, column: 5)
!14057 = !DILocation(line: 137, column: 27, scope: !14056)
!14058 = !DILocation(line: 137, column: 7, scope: !14056)
!14059 = !DILocation(line: 137, column: 13, scope: !14056)
!14060 = !DILocation(line: 137, column: 16, scope: !14056)
!14061 = !DILocation(line: 137, column: 18, scope: !14056)
!14062 = !DILocation(line: 138, column: 20, scope: !14056)
!14063 = !DILocation(line: 138, column: 7, scope: !14056)
!14064 = !DILocation(line: 138, column: 13, scope: !14056)
!14065 = !DILocation(line: 138, column: 18, scope: !14056)
!14066 = !DILocation(line: 139, column: 20, scope: !14056)
!14067 = !DILocation(line: 139, column: 18, scope: !14056)
!14068 = !DILocation(line: 140, column: 15, scope: !14056)
!14069 = !DILocation(line: 140, column: 21, scope: !14056)
!14070 = !DILocation(line: 140, column: 24, scope: !14056)
!14071 = !DILocation(line: 140, column: 7, scope: !14056)
!14072 = !DILocation(line: 143, column: 16, scope: !13973)
!14073 = !DILocation(line: 143, column: 3, scope: !13973)
!14074 = !DILocation(line: 143, column: 9, scope: !13973)
!14075 = !DILocation(line: 143, column: 14, scope: !13973)
!14076 = !DILocation(line: 144, column: 18, scope: !13973)
!14077 = !DILocation(line: 144, column: 16, scope: !13973)
!14078 = !DILocation(line: 145, column: 3, scope: !13973)
!14079 = !DILocation(line: 146, column: 1, scope: !13973)
!14080 = distinct !DISubprogram(name: "getgroup", scope: !1292, file: !1292, line: 151, type: !14081, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1287, retainedNodes: !152)
!14081 = !DISubroutineType(types: !14082)
!14082 = !{!143, !1300}
!14083 = !DILocalVariable(name: "gid", arg: 1, scope: !14080, file: !1292, line: 151, type: !1300)
!14084 = !DILocation(line: 151, column: 17, scope: !14080)
!14085 = !DILocalVariable(name: "tail", scope: !14080, file: !1292, line: 153, type: !1290)
!14086 = !DILocation(line: 153, column: 18, scope: !14080)
!14087 = !DILocalVariable(name: "match", scope: !14080, file: !1292, line: 154, type: !1290)
!14088 = !DILocation(line: 154, column: 18, scope: !14080)
!14089 = !DILocation(line: 156, column: 15, scope: !14090)
!14090 = distinct !DILexicalBlock(scope: !14080, file: !1292, line: 156, column: 3)
!14091 = !DILocation(line: 156, column: 13, scope: !14090)
!14092 = !DILocation(line: 156, column: 8, scope: !14090)
!14093 = !DILocation(line: 156, column: 28, scope: !14094)
!14094 = distinct !DILexicalBlock(scope: !14090, file: !1292, line: 156, column: 3)
!14095 = !DILocation(line: 156, column: 3, scope: !14090)
!14096 = !DILocation(line: 158, column: 11, scope: !14097)
!14097 = distinct !DILexicalBlock(scope: !14098, file: !1292, line: 158, column: 11)
!14098 = distinct !DILexicalBlock(scope: !14094, file: !1292, line: 157, column: 5)
!14099 = !DILocation(line: 158, column: 17, scope: !14097)
!14100 = !DILocation(line: 158, column: 20, scope: !14097)
!14101 = !DILocation(line: 158, column: 25, scope: !14097)
!14102 = !DILocation(line: 158, column: 22, scope: !14097)
!14103 = !DILocation(line: 158, column: 11, scope: !14098)
!14104 = !DILocation(line: 160, column: 19, scope: !14105)
!14105 = distinct !DILexicalBlock(scope: !14097, file: !1292, line: 159, column: 9)
!14106 = !DILocation(line: 160, column: 17, scope: !14105)
!14107 = !DILocation(line: 161, column: 11, scope: !14105)
!14108 = !DILocation(line: 163, column: 5, scope: !14098)
!14109 = !DILocation(line: 156, column: 41, scope: !14094)
!14110 = !DILocation(line: 156, column: 47, scope: !14094)
!14111 = !DILocation(line: 156, column: 39, scope: !14094)
!14112 = !DILocation(line: 156, column: 3, scope: !14094)
!14113 = distinct !{!14113, !14095, !14114}
!14114 = !DILocation(line: 163, column: 5, scope: !14090)
!14115 = !DILocation(line: 165, column: 7, scope: !14116)
!14116 = distinct !DILexicalBlock(scope: !14080, file: !1292, line: 165, column: 7)
!14117 = !DILocation(line: 165, column: 13, scope: !14116)
!14118 = !DILocation(line: 165, column: 7, scope: !14080)
!14119 = !DILocalVariable(name: "grent", scope: !14120, file: !1292, line: 167, type: !1314)
!14120 = distinct !DILexicalBlock(scope: !14116, file: !1292, line: 166, column: 5)
!14121 = !DILocation(line: 167, column: 21, scope: !14120)
!14122 = !DILocation(line: 167, column: 39, scope: !14120)
!14123 = !DILocation(line: 167, column: 29, scope: !14120)
!14124 = !DILocalVariable(name: "name", scope: !14120, file: !1292, line: 168, type: !146)
!14125 = !DILocation(line: 168, column: 19, scope: !14120)
!14126 = !DILocation(line: 168, column: 26, scope: !14120)
!14127 = !DILocation(line: 168, column: 34, scope: !14120)
!14128 = !DILocation(line: 168, column: 41, scope: !14120)
!14129 = !DILocation(line: 169, column: 24, scope: !14120)
!14130 = !DILocation(line: 169, column: 15, scope: !14120)
!14131 = !DILocation(line: 169, column: 13, scope: !14120)
!14132 = !DILocation(line: 170, column: 21, scope: !14120)
!14133 = !DILocation(line: 170, column: 7, scope: !14120)
!14134 = !DILocation(line: 170, column: 14, scope: !14120)
!14135 = !DILocation(line: 170, column: 17, scope: !14120)
!14136 = !DILocation(line: 170, column: 19, scope: !14120)
!14137 = !DILocation(line: 171, column: 15, scope: !14120)
!14138 = !DILocation(line: 171, column: 22, scope: !14120)
!14139 = !DILocation(line: 171, column: 28, scope: !14120)
!14140 = !DILocation(line: 171, column: 7, scope: !14120)
!14141 = !DILocation(line: 174, column: 21, scope: !14120)
!14142 = !DILocation(line: 174, column: 7, scope: !14120)
!14143 = !DILocation(line: 174, column: 14, scope: !14120)
!14144 = !DILocation(line: 174, column: 19, scope: !14120)
!14145 = !DILocation(line: 175, column: 21, scope: !14120)
!14146 = !DILocation(line: 175, column: 19, scope: !14120)
!14147 = !DILocation(line: 176, column: 5, scope: !14120)
!14148 = !DILocation(line: 178, column: 10, scope: !14080)
!14149 = !DILocation(line: 178, column: 17, scope: !14080)
!14150 = !DILocation(line: 178, column: 27, scope: !14080)
!14151 = !DILocation(line: 178, column: 34, scope: !14080)
!14152 = !DILocation(line: 178, column: 3, scope: !14080)
!14153 = distinct !DISubprogram(name: "getgidbyname", scope: !1292, file: !1292, line: 187, type: !14154, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1287, retainedNodes: !152)
!14154 = !DISubroutineType(types: !14155)
!14155 = !{!14156, !146}
!14156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1300, size: 64)
!14157 = !DILocalVariable(name: "group", arg: 1, scope: !14153, file: !1292, line: 187, type: !146)
!14158 = !DILocation(line: 187, column: 27, scope: !14153)
!14159 = !DILocalVariable(name: "tail", scope: !14153, file: !1292, line: 189, type: !1290)
!14160 = !DILocation(line: 189, column: 18, scope: !14153)
!14161 = !DILocalVariable(name: "grent", scope: !14153, file: !1292, line: 190, type: !1314)
!14162 = !DILocation(line: 190, column: 17, scope: !14153)
!14163 = !DILocation(line: 192, column: 15, scope: !14164)
!14164 = distinct !DILexicalBlock(scope: !14153, file: !1292, line: 192, column: 3)
!14165 = !DILocation(line: 192, column: 13, scope: !14164)
!14166 = !DILocation(line: 192, column: 8, scope: !14164)
!14167 = !DILocation(line: 192, column: 28, scope: !14168)
!14168 = distinct !DILexicalBlock(scope: !14164, file: !1292, line: 192, column: 3)
!14169 = !DILocation(line: 192, column: 3, scope: !14164)
!14170 = !DILocation(line: 194, column: 10, scope: !14171)
!14171 = distinct !DILexicalBlock(scope: !14168, file: !1292, line: 194, column: 9)
!14172 = !DILocation(line: 194, column: 16, scope: !14171)
!14173 = !DILocation(line: 194, column: 9, scope: !14171)
!14174 = !DILocation(line: 194, column: 25, scope: !14171)
!14175 = !DILocation(line: 194, column: 24, scope: !14171)
!14176 = !DILocation(line: 194, column: 21, scope: !14171)
!14177 = !DILocation(line: 194, column: 31, scope: !14171)
!14178 = !DILocation(line: 194, column: 43, scope: !14171)
!14179 = !DILocation(line: 194, column: 49, scope: !14171)
!14180 = !DILocation(line: 194, column: 55, scope: !14171)
!14181 = !DILocation(line: 194, column: 35, scope: !14171)
!14182 = !DILocation(line: 194, column: 9, scope: !14168)
!14183 = !DILocation(line: 195, column: 15, scope: !14171)
!14184 = !DILocation(line: 195, column: 21, scope: !14171)
!14185 = !DILocation(line: 195, column: 24, scope: !14171)
!14186 = !DILocation(line: 195, column: 7, scope: !14171)
!14187 = !DILocation(line: 194, column: 60, scope: !14171)
!14188 = !DILocation(line: 192, column: 41, scope: !14168)
!14189 = !DILocation(line: 192, column: 47, scope: !14168)
!14190 = !DILocation(line: 192, column: 39, scope: !14168)
!14191 = !DILocation(line: 192, column: 3, scope: !14168)
!14192 = distinct !{!14192, !14169, !14193}
!14193 = !DILocation(line: 195, column: 24, scope: !14164)
!14194 = !DILocation(line: 197, column: 15, scope: !14195)
!14195 = distinct !DILexicalBlock(scope: !14153, file: !1292, line: 197, column: 3)
!14196 = !DILocation(line: 197, column: 13, scope: !14195)
!14197 = !DILocation(line: 197, column: 8, scope: !14195)
!14198 = !DILocation(line: 197, column: 30, scope: !14199)
!14199 = distinct !DILexicalBlock(scope: !14195, file: !1292, line: 197, column: 3)
!14200 = !DILocation(line: 197, column: 3, scope: !14195)
!14201 = !DILocation(line: 199, column: 10, scope: !14202)
!14202 = distinct !DILexicalBlock(scope: !14199, file: !1292, line: 199, column: 9)
!14203 = !DILocation(line: 199, column: 16, scope: !14202)
!14204 = !DILocation(line: 199, column: 9, scope: !14202)
!14205 = !DILocation(line: 199, column: 25, scope: !14202)
!14206 = !DILocation(line: 199, column: 24, scope: !14202)
!14207 = !DILocation(line: 199, column: 21, scope: !14202)
!14208 = !DILocation(line: 199, column: 31, scope: !14202)
!14209 = !DILocation(line: 199, column: 43, scope: !14202)
!14210 = !DILocation(line: 199, column: 49, scope: !14202)
!14211 = !DILocation(line: 199, column: 55, scope: !14202)
!14212 = !DILocation(line: 199, column: 35, scope: !14202)
!14213 = !DILocation(line: 199, column: 9, scope: !14199)
!14214 = !DILocation(line: 200, column: 7, scope: !14202)
!14215 = !DILocation(line: 199, column: 60, scope: !14202)
!14216 = !DILocation(line: 197, column: 43, scope: !14199)
!14217 = !DILocation(line: 197, column: 49, scope: !14199)
!14218 = !DILocation(line: 197, column: 41, scope: !14199)
!14219 = !DILocation(line: 197, column: 3, scope: !14199)
!14220 = distinct !{!14220, !14200, !14221}
!14221 = !DILocation(line: 200, column: 14, scope: !14195)
!14222 = !DILocation(line: 202, column: 21, scope: !14153)
!14223 = !DILocation(line: 202, column: 11, scope: !14153)
!14224 = !DILocation(line: 202, column: 9, scope: !14153)
!14225 = !DILocation(line: 213, column: 19, scope: !14153)
!14226 = !DILocation(line: 213, column: 10, scope: !14153)
!14227 = !DILocation(line: 213, column: 8, scope: !14153)
!14228 = !DILocation(line: 214, column: 11, scope: !14153)
!14229 = !DILocation(line: 214, column: 17, scope: !14153)
!14230 = !DILocation(line: 214, column: 23, scope: !14153)
!14231 = !DILocation(line: 214, column: 3, scope: !14153)
!14232 = !DILocation(line: 217, column: 7, scope: !14233)
!14233 = distinct !DILexicalBlock(scope: !14153, file: !1292, line: 217, column: 7)
!14234 = !DILocation(line: 217, column: 7, scope: !14153)
!14235 = !DILocation(line: 219, column: 20, scope: !14236)
!14236 = distinct !DILexicalBlock(scope: !14233, file: !1292, line: 218, column: 5)
!14237 = !DILocation(line: 219, column: 27, scope: !14236)
!14238 = !DILocation(line: 219, column: 7, scope: !14236)
!14239 = !DILocation(line: 219, column: 13, scope: !14236)
!14240 = !DILocation(line: 219, column: 16, scope: !14236)
!14241 = !DILocation(line: 219, column: 18, scope: !14236)
!14242 = !DILocation(line: 220, column: 20, scope: !14236)
!14243 = !DILocation(line: 220, column: 7, scope: !14236)
!14244 = !DILocation(line: 220, column: 13, scope: !14236)
!14245 = !DILocation(line: 220, column: 18, scope: !14236)
!14246 = !DILocation(line: 221, column: 21, scope: !14236)
!14247 = !DILocation(line: 221, column: 19, scope: !14236)
!14248 = !DILocation(line: 222, column: 15, scope: !14236)
!14249 = !DILocation(line: 222, column: 21, scope: !14236)
!14250 = !DILocation(line: 222, column: 24, scope: !14236)
!14251 = !DILocation(line: 222, column: 7, scope: !14236)
!14252 = !DILocation(line: 225, column: 16, scope: !14153)
!14253 = !DILocation(line: 225, column: 3, scope: !14153)
!14254 = !DILocation(line: 225, column: 9, scope: !14153)
!14255 = !DILocation(line: 225, column: 14, scope: !14153)
!14256 = !DILocation(line: 226, column: 19, scope: !14153)
!14257 = !DILocation(line: 226, column: 17, scope: !14153)
!14258 = !DILocation(line: 227, column: 3, scope: !14153)
!14259 = !DILocation(line: 228, column: 1, scope: !14153)
!14260 = distinct !DISubprogram(name: "imaxtostr", scope: !14261, file: !14261, line: 36, type: !14262, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1581, retainedNodes: !152)
!14261 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/mbarbar/software/coreutils-8.31")
!14262 = !DISubroutineType(types: !14263)
!14263 = !{!143, !1584, !143}
!14264 = !DILocalVariable(name: "i", arg: 1, scope: !14260, file: !14261, line: 36, type: !1584)
!14265 = !DILocation(line: 36, column: 19, scope: !14260)
!14266 = !DILocalVariable(name: "buf", arg: 2, scope: !14260, file: !14261, line: 36, type: !143)
!14267 = !DILocation(line: 36, column: 28, scope: !14260)
!14268 = !DILocalVariable(name: "p", scope: !14260, file: !14261, line: 38, type: !143)
!14269 = !DILocation(line: 38, column: 9, scope: !14260)
!14270 = !DILocation(line: 38, column: 13, scope: !14260)
!14271 = !DILocation(line: 38, column: 17, scope: !14260)
!14272 = !DILocation(line: 39, column: 4, scope: !14260)
!14273 = !DILocation(line: 39, column: 6, scope: !14260)
!14274 = !DILocation(line: 41, column: 7, scope: !14275)
!14275 = distinct !DILexicalBlock(scope: !14260, file: !14261, line: 41, column: 7)
!14276 = !DILocation(line: 41, column: 9, scope: !14275)
!14277 = !DILocation(line: 41, column: 7, scope: !14260)
!14278 = !DILocation(line: 43, column: 7, scope: !14279)
!14279 = distinct !DILexicalBlock(scope: !14275, file: !14261, line: 42, column: 5)
!14280 = !DILocation(line: 44, column: 22, scope: !14279)
!14281 = !DILocation(line: 44, column: 24, scope: !14279)
!14282 = !DILocation(line: 44, column: 20, scope: !14279)
!14283 = !DILocation(line: 44, column: 16, scope: !14279)
!14284 = !DILocation(line: 44, column: 10, scope: !14279)
!14285 = !DILocation(line: 44, column: 14, scope: !14279)
!14286 = !DILocation(line: 44, column: 9, scope: !14279)
!14287 = !DILocation(line: 45, column: 17, scope: !14279)
!14288 = !DILocation(line: 45, column: 24, scope: !14279)
!14289 = distinct !{!14289, !14278, !14290}
!14290 = !DILocation(line: 45, column: 28, scope: !14279)
!14291 = !DILocation(line: 47, column: 8, scope: !14279)
!14292 = !DILocation(line: 47, column: 12, scope: !14279)
!14293 = !DILocation(line: 48, column: 5, scope: !14279)
!14294 = !DILocation(line: 51, column: 7, scope: !14295)
!14295 = distinct !DILexicalBlock(scope: !14275, file: !14261, line: 50, column: 5)
!14296 = !DILocation(line: 52, column: 22, scope: !14295)
!14297 = !DILocation(line: 52, column: 24, scope: !14295)
!14298 = !DILocation(line: 52, column: 20, scope: !14295)
!14299 = !DILocation(line: 52, column: 16, scope: !14295)
!14300 = !DILocation(line: 52, column: 10, scope: !14295)
!14301 = !DILocation(line: 52, column: 14, scope: !14295)
!14302 = !DILocation(line: 52, column: 9, scope: !14295)
!14303 = !DILocation(line: 53, column: 17, scope: !14295)
!14304 = !DILocation(line: 53, column: 24, scope: !14295)
!14305 = distinct !{!14305, !14294, !14306}
!14306 = !DILocation(line: 53, column: 28, scope: !14295)
!14307 = !DILocation(line: 56, column: 10, scope: !14260)
!14308 = !DILocation(line: 56, column: 3, scope: !14260)
!14309 = distinct !DISubprogram(name: "umaxtostr", scope: !14261, file: !14261, line: 36, type: !14310, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1586, retainedNodes: !152)
!14310 = !DISubroutineType(types: !14311)
!14311 = !{!143, !168, !143}
!14312 = !DILocalVariable(name: "i", arg: 1, scope: !14309, file: !14261, line: 36, type: !168)
!14313 = !DILocation(line: 36, column: 19, scope: !14309)
!14314 = !DILocalVariable(name: "buf", arg: 2, scope: !14309, file: !14261, line: 36, type: !143)
!14315 = !DILocation(line: 36, column: 28, scope: !14309)
!14316 = !DILocalVariable(name: "p", scope: !14309, file: !14261, line: 38, type: !143)
!14317 = !DILocation(line: 38, column: 9, scope: !14309)
!14318 = !DILocation(line: 38, column: 13, scope: !14309)
!14319 = !DILocation(line: 38, column: 17, scope: !14309)
!14320 = !DILocation(line: 39, column: 4, scope: !14309)
!14321 = !DILocation(line: 39, column: 6, scope: !14309)
!14322 = !DILocation(line: 41, column: 7, scope: !14323)
!14323 = distinct !DILexicalBlock(scope: !14309, file: !14261, line: 41, column: 7)
!14324 = !DILocation(line: 41, column: 9, scope: !14323)
!14325 = !DILocation(line: 41, column: 7, scope: !14309)
!14326 = !DILocation(line: 43, column: 7, scope: !14327)
!14327 = distinct !DILexicalBlock(scope: !14323, file: !14261, line: 42, column: 5)
!14328 = !DILocation(line: 44, column: 22, scope: !14327)
!14329 = !DILocation(line: 44, column: 24, scope: !14327)
!14330 = !DILocation(line: 44, column: 20, scope: !14327)
!14331 = !DILocation(line: 44, column: 16, scope: !14327)
!14332 = !DILocation(line: 44, column: 10, scope: !14327)
!14333 = !DILocation(line: 44, column: 14, scope: !14327)
!14334 = !DILocation(line: 44, column: 9, scope: !14327)
!14335 = !DILocation(line: 45, column: 17, scope: !14327)
!14336 = !DILocation(line: 45, column: 24, scope: !14327)
!14337 = distinct !{!14337, !14326, !14338}
!14338 = !DILocation(line: 45, column: 28, scope: !14327)
!14339 = !DILocation(line: 47, column: 8, scope: !14327)
!14340 = !DILocation(line: 47, column: 12, scope: !14327)
!14341 = !DILocation(line: 48, column: 5, scope: !14327)
!14342 = !DILocation(line: 51, column: 7, scope: !14343)
!14343 = distinct !DILexicalBlock(scope: !14323, file: !14261, line: 50, column: 5)
!14344 = !DILocation(line: 52, column: 22, scope: !14343)
!14345 = !DILocation(line: 52, column: 24, scope: !14343)
!14346 = !DILocation(line: 52, column: 20, scope: !14343)
!14347 = !DILocation(line: 52, column: 16, scope: !14343)
!14348 = !DILocation(line: 52, column: 10, scope: !14343)
!14349 = !DILocation(line: 52, column: 14, scope: !14343)
!14350 = !DILocation(line: 52, column: 9, scope: !14343)
!14351 = !DILocation(line: 53, column: 17, scope: !14343)
!14352 = !DILocation(line: 53, column: 24, scope: !14343)
!14353 = distinct !{!14353, !14342, !14354}
!14354 = !DILocation(line: 53, column: 28, scope: !14343)
!14355 = !DILocation(line: 56, column: 10, scope: !14309)
!14356 = !DILocation(line: 56, column: 3, scope: !14309)
!14357 = distinct !DISubprogram(name: "mbsalign", scope: !14358, file: !14358, line: 112, type: !14359, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1589, retainedNodes: !152)
!14358 = !DIFile(filename: "lib/mbsalign.c", directory: "/home/mbarbar/software/coreutils-8.31")
!14359 = !DISubroutineType(types: !14360)
!14360 = !{!149, !146, !143, !149, !148, !707, !27}
!14361 = !DILocalVariable(name: "src", arg: 1, scope: !14357, file: !14358, line: 112, type: !146)
!14362 = !DILocation(line: 112, column: 23, scope: !14357)
!14363 = !DILocalVariable(name: "dest", arg: 2, scope: !14357, file: !14358, line: 112, type: !143)
!14364 = !DILocation(line: 112, column: 34, scope: !14357)
!14365 = !DILocalVariable(name: "dest_size", arg: 3, scope: !14357, file: !14358, line: 112, type: !149)
!14366 = !DILocation(line: 112, column: 47, scope: !14357)
!14367 = !DILocalVariable(name: "width", arg: 4, scope: !14357, file: !14358, line: 113, type: !148)
!14368 = !DILocation(line: 113, column: 19, scope: !14357)
!14369 = !DILocalVariable(name: "align", arg: 5, scope: !14357, file: !14358, line: 113, type: !707)
!14370 = !DILocation(line: 113, column: 38, scope: !14357)
!14371 = !DILocalVariable(name: "flags", arg: 6, scope: !14357, file: !14358, line: 113, type: !27)
!14372 = !DILocation(line: 113, column: 49, scope: !14357)
!14373 = !DILocalVariable(name: "ret", scope: !14357, file: !14358, line: 115, type: !149)
!14374 = !DILocation(line: 115, column: 10, scope: !14357)
!14375 = !DILocalVariable(name: "src_size", scope: !14357, file: !14358, line: 116, type: !149)
!14376 = !DILocation(line: 116, column: 10, scope: !14357)
!14377 = !DILocation(line: 116, column: 29, scope: !14357)
!14378 = !DILocation(line: 116, column: 21, scope: !14357)
!14379 = !DILocation(line: 116, column: 34, scope: !14357)
!14380 = !DILocalVariable(name: "newstr", scope: !14357, file: !14358, line: 117, type: !143)
!14381 = !DILocation(line: 117, column: 9, scope: !14357)
!14382 = !DILocalVariable(name: "str_wc", scope: !14357, file: !14358, line: 118, type: !1595)
!14383 = !DILocation(line: 118, column: 12, scope: !14357)
!14384 = !DILocalVariable(name: "str_to_print", scope: !14357, file: !14358, line: 119, type: !146)
!14385 = !DILocation(line: 119, column: 15, scope: !14357)
!14386 = !DILocation(line: 119, column: 30, scope: !14357)
!14387 = !DILocalVariable(name: "n_cols", scope: !14357, file: !14358, line: 120, type: !149)
!14388 = !DILocation(line: 120, column: 10, scope: !14357)
!14389 = !DILocation(line: 120, column: 19, scope: !14357)
!14390 = !DILocation(line: 120, column: 28, scope: !14357)
!14391 = !DILocalVariable(name: "n_used_bytes", scope: !14357, file: !14358, line: 121, type: !149)
!14392 = !DILocation(line: 121, column: 10, scope: !14357)
!14393 = !DILocation(line: 121, column: 25, scope: !14357)
!14394 = !DILocalVariable(name: "n_spaces", scope: !14357, file: !14358, line: 122, type: !149)
!14395 = !DILocation(line: 122, column: 10, scope: !14357)
!14396 = !DILocalVariable(name: "conversion", scope: !14357, file: !14358, line: 123, type: !141)
!14397 = !DILocation(line: 123, column: 8, scope: !14357)
!14398 = !DILocalVariable(name: "wc_enabled", scope: !14357, file: !14358, line: 124, type: !141)
!14399 = !DILocation(line: 124, column: 8, scope: !14357)
!14400 = !DILocation(line: 129, column: 9, scope: !14401)
!14401 = distinct !DILexicalBlock(scope: !14357, file: !14358, line: 129, column: 7)
!14402 = !DILocation(line: 129, column: 15, scope: !14401)
!14403 = !DILocation(line: 129, column: 35, scope: !14401)
!14404 = !DILocation(line: 129, column: 38, scope: !14401)
!14405 = !DILocation(line: 129, column: 49, scope: !14401)
!14406 = !DILocation(line: 129, column: 7, scope: !14357)
!14407 = !DILocalVariable(name: "src_chars", scope: !14408, file: !14358, line: 131, type: !149)
!14408 = distinct !DILexicalBlock(scope: !14401, file: !14358, line: 130, column: 5)
!14409 = !DILocation(line: 131, column: 14, scope: !14408)
!14410 = !DILocation(line: 131, column: 42, scope: !14408)
!14411 = !DILocation(line: 131, column: 26, scope: !14408)
!14412 = !DILocation(line: 132, column: 11, scope: !14413)
!14413 = distinct !DILexicalBlock(scope: !14408, file: !14358, line: 132, column: 11)
!14414 = !DILocation(line: 132, column: 21, scope: !14413)
!14415 = !DILocation(line: 132, column: 11, scope: !14408)
!14416 = !DILocation(line: 134, column: 15, scope: !14417)
!14417 = distinct !DILexicalBlock(scope: !14418, file: !14358, line: 134, column: 15)
!14418 = distinct !DILexicalBlock(scope: !14413, file: !14358, line: 133, column: 9)
!14419 = !DILocation(line: 134, column: 21, scope: !14417)
!14420 = !DILocation(line: 134, column: 15, scope: !14418)
!14421 = !DILocation(line: 135, column: 13, scope: !14417)
!14422 = !DILocation(line: 137, column: 13, scope: !14417)
!14423 = !DILocation(line: 139, column: 17, scope: !14408)
!14424 = !DILocation(line: 140, column: 24, scope: !14408)
!14425 = !DILocation(line: 140, column: 34, scope: !14408)
!14426 = !DILocation(line: 140, column: 16, scope: !14408)
!14427 = !DILocation(line: 140, column: 14, scope: !14408)
!14428 = !DILocation(line: 141, column: 11, scope: !14429)
!14429 = distinct !DILexicalBlock(scope: !14408, file: !14358, line: 141, column: 11)
!14430 = !DILocation(line: 141, column: 18, scope: !14429)
!14431 = !DILocation(line: 141, column: 11, scope: !14408)
!14432 = !DILocation(line: 143, column: 15, scope: !14433)
!14433 = distinct !DILexicalBlock(scope: !14434, file: !14358, line: 143, column: 15)
!14434 = distinct !DILexicalBlock(scope: !14429, file: !14358, line: 142, column: 9)
!14435 = !DILocation(line: 143, column: 21, scope: !14433)
!14436 = !DILocation(line: 143, column: 15, scope: !14434)
!14437 = !DILocation(line: 144, column: 13, scope: !14433)
!14438 = !DILocation(line: 146, column: 13, scope: !14433)
!14439 = !DILocation(line: 148, column: 21, scope: !14440)
!14440 = distinct !DILexicalBlock(scope: !14408, file: !14358, line: 148, column: 11)
!14441 = !DILocation(line: 148, column: 29, scope: !14440)
!14442 = !DILocation(line: 148, column: 34, scope: !14440)
!14443 = !DILocation(line: 148, column: 11, scope: !14440)
!14444 = !DILocation(line: 148, column: 45, scope: !14440)
!14445 = !DILocation(line: 148, column: 11, scope: !14408)
!14446 = !DILocation(line: 150, column: 11, scope: !14447)
!14447 = distinct !DILexicalBlock(scope: !14440, file: !14358, line: 149, column: 9)
!14448 = !DILocation(line: 150, column: 18, scope: !14447)
!14449 = !DILocation(line: 150, column: 28, scope: !14447)
!14450 = !DILocation(line: 150, column: 33, scope: !14447)
!14451 = !DILocation(line: 151, column: 22, scope: !14447)
!14452 = !DILocation(line: 152, column: 45, scope: !14447)
!14453 = !DILocation(line: 152, column: 24, scope: !14447)
!14454 = !DILocation(line: 152, column: 22, scope: !14447)
!14455 = !DILocation(line: 153, column: 30, scope: !14447)
!14456 = !DILocation(line: 153, column: 38, scope: !14447)
!14457 = !DILocation(line: 153, column: 20, scope: !14447)
!14458 = !DILocation(line: 153, column: 18, scope: !14447)
!14459 = !DILocation(line: 154, column: 9, scope: !14447)
!14460 = !DILocation(line: 155, column: 5, scope: !14408)
!14461 = !DILocation(line: 159, column: 7, scope: !14462)
!14462 = distinct !DILexicalBlock(scope: !14357, file: !14358, line: 159, column: 7)
!14463 = !DILocation(line: 159, column: 18, scope: !14462)
!14464 = !DILocation(line: 159, column: 22, scope: !14462)
!14465 = !DILocation(line: 159, column: 33, scope: !14462)
!14466 = !DILocation(line: 159, column: 37, scope: !14462)
!14467 = !DILocation(line: 159, column: 47, scope: !14462)
!14468 = !DILocation(line: 159, column: 46, scope: !14462)
!14469 = !DILocation(line: 159, column: 44, scope: !14462)
!14470 = !DILocation(line: 159, column: 7, scope: !14357)
!14471 = !DILocation(line: 161, column: 13, scope: !14472)
!14472 = distinct !DILexicalBlock(scope: !14473, file: !14358, line: 161, column: 13)
!14473 = distinct !DILexicalBlock(scope: !14462, file: !14358, line: 160, column: 5)
!14474 = !DILocation(line: 161, column: 13, scope: !14473)
!14475 = !DILocation(line: 165, column: 40, scope: !14476)
!14476 = distinct !DILexicalBlock(scope: !14472, file: !14358, line: 162, column: 11)
!14477 = !DILocation(line: 165, column: 24, scope: !14476)
!14478 = !DILocation(line: 165, column: 51, scope: !14476)
!14479 = !DILocation(line: 165, column: 22, scope: !14476)
!14480 = !DILocation(line: 166, column: 11, scope: !14476)
!14481 = !DILocation(line: 167, column: 26, scope: !14473)
!14482 = !DILocation(line: 167, column: 18, scope: !14473)
!14483 = !DILocation(line: 167, column: 16, scope: !14473)
!14484 = !DILocation(line: 168, column: 13, scope: !14485)
!14485 = distinct !DILexicalBlock(scope: !14473, file: !14358, line: 168, column: 13)
!14486 = !DILocation(line: 168, column: 20, scope: !14485)
!14487 = !DILocation(line: 168, column: 13, scope: !14473)
!14488 = !DILocation(line: 170, column: 15, scope: !14489)
!14489 = distinct !DILexicalBlock(scope: !14490, file: !14358, line: 170, column: 15)
!14490 = distinct !DILexicalBlock(scope: !14485, file: !14358, line: 169, column: 9)
!14491 = !DILocation(line: 170, column: 21, scope: !14489)
!14492 = !DILocation(line: 170, column: 15, scope: !14490)
!14493 = !DILocation(line: 171, column: 13, scope: !14489)
!14494 = !DILocation(line: 173, column: 13, scope: !14489)
!14495 = !DILocation(line: 175, column: 24, scope: !14473)
!14496 = !DILocation(line: 175, column: 22, scope: !14473)
!14497 = !DILocation(line: 176, column: 31, scope: !14473)
!14498 = !DILocation(line: 176, column: 40, scope: !14473)
!14499 = !DILocation(line: 176, column: 39, scope: !14473)
!14500 = !DILocation(line: 176, column: 18, scope: !14473)
!14501 = !DILocation(line: 176, column: 16, scope: !14473)
!14502 = !DILocation(line: 177, column: 34, scope: !14473)
!14503 = !DILocation(line: 177, column: 42, scope: !14473)
!14504 = !DILocation(line: 177, column: 50, scope: !14473)
!14505 = !DILocation(line: 177, column: 24, scope: !14473)
!14506 = !DILocation(line: 177, column: 22, scope: !14473)
!14507 = !DILocation(line: 178, column: 5, scope: !14473)
!14508 = !DILocation(line: 159, column: 53, scope: !14462)
!14509 = !DILabel(scope: !14357, name: "mbsalign_unibyte", file: !14358, line: 180)
!14510 = !DILocation(line: 180, column: 1, scope: !14357)
!14511 = !DILocation(line: 182, column: 7, scope: !14512)
!14512 = distinct !DILexicalBlock(scope: !14357, file: !14358, line: 182, column: 7)
!14513 = !DILocation(line: 182, column: 17, scope: !14512)
!14514 = !DILocation(line: 182, column: 16, scope: !14512)
!14515 = !DILocation(line: 182, column: 14, scope: !14512)
!14516 = !DILocation(line: 182, column: 7, scope: !14357)
!14517 = !DILocation(line: 184, column: 17, scope: !14518)
!14518 = distinct !DILexicalBlock(scope: !14512, file: !14358, line: 183, column: 5)
!14519 = !DILocation(line: 184, column: 16, scope: !14518)
!14520 = !DILocation(line: 184, column: 14, scope: !14518)
!14521 = !DILocation(line: 185, column: 22, scope: !14518)
!14522 = !DILocation(line: 185, column: 20, scope: !14518)
!14523 = !DILocation(line: 186, column: 5, scope: !14518)
!14524 = !DILocation(line: 188, column: 8, scope: !14525)
!14525 = distinct !DILexicalBlock(scope: !14357, file: !14358, line: 188, column: 7)
!14526 = !DILocation(line: 188, column: 7, scope: !14525)
!14527 = !DILocation(line: 188, column: 16, scope: !14525)
!14528 = !DILocation(line: 188, column: 14, scope: !14525)
!14529 = !DILocation(line: 188, column: 7, scope: !14357)
!14530 = !DILocation(line: 189, column: 17, scope: !14525)
!14531 = !DILocation(line: 189, column: 16, scope: !14525)
!14532 = !DILocation(line: 189, column: 25, scope: !14525)
!14533 = !DILocation(line: 189, column: 23, scope: !14525)
!14534 = !DILocation(line: 189, column: 14, scope: !14525)
!14535 = !DILocation(line: 189, column: 5, scope: !14525)
!14536 = !DILocation(line: 192, column: 12, scope: !14357)
!14537 = !DILocation(line: 192, column: 4, scope: !14357)
!14538 = !DILocation(line: 192, column: 10, scope: !14357)
!14539 = !DILocalVariable(name: "start_spaces", scope: !14540, file: !14358, line: 195, type: !149)
!14540 = distinct !DILexicalBlock(scope: !14357, file: !14358, line: 194, column: 3)
!14541 = !DILocation(line: 195, column: 12, scope: !14540)
!14542 = !DILocalVariable(name: "end_spaces", scope: !14540, file: !14358, line: 195, type: !149)
!14543 = !DILocation(line: 195, column: 26, scope: !14540)
!14544 = !DILocation(line: 197, column: 13, scope: !14540)
!14545 = !DILocation(line: 197, column: 5, scope: !14540)
!14546 = !DILocation(line: 200, column: 22, scope: !14547)
!14547 = distinct !DILexicalBlock(scope: !14540, file: !14358, line: 198, column: 7)
!14548 = !DILocation(line: 201, column: 22, scope: !14547)
!14549 = !DILocation(line: 201, column: 20, scope: !14547)
!14550 = !DILocation(line: 202, column: 9, scope: !14547)
!14551 = !DILocation(line: 204, column: 24, scope: !14547)
!14552 = !DILocation(line: 204, column: 22, scope: !14547)
!14553 = !DILocation(line: 205, column: 20, scope: !14547)
!14554 = !DILocation(line: 206, column: 9, scope: !14547)
!14555 = !DILocation(line: 209, column: 24, scope: !14547)
!14556 = !DILocation(line: 209, column: 33, scope: !14547)
!14557 = !DILocation(line: 209, column: 39, scope: !14547)
!14558 = !DILocation(line: 209, column: 48, scope: !14547)
!14559 = !DILocation(line: 209, column: 37, scope: !14547)
!14560 = !DILocation(line: 209, column: 22, scope: !14547)
!14561 = !DILocation(line: 210, column: 22, scope: !14547)
!14562 = !DILocation(line: 210, column: 31, scope: !14547)
!14563 = !DILocation(line: 210, column: 20, scope: !14547)
!14564 = !DILocation(line: 211, column: 9, scope: !14547)
!14565 = !DILocation(line: 214, column: 11, scope: !14566)
!14566 = distinct !DILexicalBlock(scope: !14540, file: !14358, line: 214, column: 11)
!14567 = !DILocation(line: 214, column: 17, scope: !14566)
!14568 = !DILocation(line: 214, column: 11, scope: !14540)
!14569 = !DILocation(line: 215, column: 22, scope: !14566)
!14570 = !DILocation(line: 215, column: 9, scope: !14566)
!14571 = !DILocation(line: 216, column: 11, scope: !14572)
!14572 = distinct !DILexicalBlock(scope: !14540, file: !14358, line: 216, column: 11)
!14573 = !DILocation(line: 216, column: 17, scope: !14572)
!14574 = !DILocation(line: 216, column: 11, scope: !14540)
!14575 = !DILocation(line: 217, column: 20, scope: !14572)
!14576 = !DILocation(line: 217, column: 9, scope: !14572)
!14577 = !DILocation(line: 220, column: 11, scope: !14578)
!14578 = distinct !DILexicalBlock(scope: !14540, file: !14358, line: 220, column: 11)
!14579 = !DILocation(line: 220, column: 21, scope: !14578)
!14580 = !DILocation(line: 220, column: 11, scope: !14540)
!14581 = !DILocalVariable(name: "space_left", scope: !14582, file: !14358, line: 222, type: !149)
!14582 = distinct !DILexicalBlock(scope: !14578, file: !14358, line: 221, column: 9)
!14583 = !DILocation(line: 222, column: 18, scope: !14582)
!14584 = !DILocalVariable(name: "dest_end", scope: !14582, file: !14358, line: 223, type: !143)
!14585 = !DILocation(line: 223, column: 17, scope: !14582)
!14586 = !DILocation(line: 223, column: 28, scope: !14582)
!14587 = !DILocation(line: 223, column: 35, scope: !14582)
!14588 = !DILocation(line: 223, column: 33, scope: !14582)
!14589 = !DILocation(line: 223, column: 45, scope: !14582)
!14590 = !DILocation(line: 225, column: 33, scope: !14582)
!14591 = !DILocation(line: 225, column: 39, scope: !14582)
!14592 = !DILocation(line: 225, column: 49, scope: !14582)
!14593 = !DILocation(line: 225, column: 18, scope: !14582)
!14594 = !DILocation(line: 225, column: 16, scope: !14582)
!14595 = !DILocation(line: 226, column: 24, scope: !14582)
!14596 = !DILocation(line: 226, column: 35, scope: !14582)
!14597 = !DILocation(line: 226, column: 33, scope: !14582)
!14598 = !DILocation(line: 226, column: 22, scope: !14582)
!14599 = !DILocation(line: 227, column: 27, scope: !14582)
!14600 = !DILocation(line: 227, column: 33, scope: !14582)
!14601 = !DILocation(line: 227, column: 47, scope: !14582)
!14602 = !DILocation(line: 227, column: 18, scope: !14582)
!14603 = !DILocation(line: 227, column: 16, scope: !14582)
!14604 = !DILocation(line: 228, column: 26, scope: !14582)
!14605 = !DILocation(line: 228, column: 32, scope: !14582)
!14606 = !DILocation(line: 228, column: 42, scope: !14582)
!14607 = !DILocation(line: 228, column: 11, scope: !14582)
!14608 = !DILocation(line: 229, column: 9, scope: !14582)
!14609 = !DILocation(line: 232, column: 11, scope: !14540)
!14610 = !DILocation(line: 232, column: 28, scope: !14540)
!14611 = !DILocation(line: 232, column: 43, scope: !14540)
!14612 = !DILocation(line: 232, column: 41, scope: !14540)
!14613 = !DILocation(line: 232, column: 55, scope: !14540)
!14614 = !DILocation(line: 232, column: 24, scope: !14540)
!14615 = !DILocation(line: 232, column: 9, scope: !14540)
!14616 = !DILocation(line: 233, column: 3, scope: !14540)
!14617 = !DILabel(scope: !14357, name: "mbsalign_cleanup", file: !14358, line: 235)
!14618 = !DILocation(line: 235, column: 1, scope: !14357)
!14619 = !DILocation(line: 237, column: 9, scope: !14357)
!14620 = !DILocation(line: 237, column: 3, scope: !14357)
!14621 = !DILocation(line: 238, column: 9, scope: !14357)
!14622 = !DILocation(line: 238, column: 3, scope: !14357)
!14623 = !DILocation(line: 240, column: 10, scope: !14357)
!14624 = !DILocation(line: 240, column: 3, scope: !14357)
!14625 = distinct !DISubprogram(name: "wc_ensure_printable", scope: !14358, file: !14358, line: 40, type: !14626, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1589, retainedNodes: !152)
!14626 = !DISubroutineType(types: !14627)
!14627 = !{!141, !1595}
!14628 = !DILocalVariable(name: "wchars", arg: 1, scope: !14625, file: !14358, line: 40, type: !1595)
!14629 = !DILocation(line: 40, column: 31, scope: !14625)
!14630 = !DILocalVariable(name: "replaced", scope: !14625, file: !14358, line: 42, type: !141)
!14631 = !DILocation(line: 42, column: 8, scope: !14625)
!14632 = !DILocalVariable(name: "wc", scope: !14625, file: !14358, line: 43, type: !1595)
!14633 = !DILocation(line: 43, column: 12, scope: !14625)
!14634 = !DILocation(line: 43, column: 17, scope: !14625)
!14635 = !DILocation(line: 44, column: 3, scope: !14625)
!14636 = !DILocation(line: 44, column: 11, scope: !14625)
!14637 = !DILocation(line: 44, column: 10, scope: !14625)
!14638 = !DILocation(line: 46, column: 32, scope: !14639)
!14639 = distinct !DILexicalBlock(scope: !14640, file: !14358, line: 46, column: 11)
!14640 = distinct !DILexicalBlock(scope: !14625, file: !14358, line: 45, column: 5)
!14641 = !DILocation(line: 46, column: 31, scope: !14639)
!14642 = !DILocation(line: 46, column: 12, scope: !14639)
!14643 = !DILocation(line: 46, column: 11, scope: !14640)
!14644 = !DILocation(line: 48, column: 12, scope: !14645)
!14645 = distinct !DILexicalBlock(scope: !14639, file: !14358, line: 47, column: 9)
!14646 = !DILocation(line: 48, column: 15, scope: !14645)
!14647 = !DILocation(line: 49, column: 20, scope: !14645)
!14648 = !DILocation(line: 50, column: 9, scope: !14645)
!14649 = !DILocation(line: 51, column: 9, scope: !14640)
!14650 = distinct !{!14650, !14635, !14651}
!14651 = !DILocation(line: 52, column: 5, scope: !14625)
!14652 = !DILocation(line: 53, column: 10, scope: !14625)
!14653 = !DILocation(line: 53, column: 3, scope: !14625)
!14654 = distinct !DISubprogram(name: "wc_truncate", scope: !14358, file: !14358, line: 60, type: !14655, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1589, retainedNodes: !152)
!14655 = !DISubroutineType(types: !14656)
!14656 = !{!149, !1595, !149}
!14657 = !DILocalVariable(name: "wc", arg: 1, scope: !14654, file: !14358, line: 60, type: !1595)
!14658 = !DILocation(line: 60, column: 23, scope: !14654)
!14659 = !DILocalVariable(name: "width", arg: 2, scope: !14654, file: !14358, line: 60, type: !149)
!14660 = !DILocation(line: 60, column: 34, scope: !14654)
!14661 = !DILocalVariable(name: "cells", scope: !14654, file: !14358, line: 62, type: !149)
!14662 = !DILocation(line: 62, column: 10, scope: !14654)
!14663 = !DILocalVariable(name: "next_cells", scope: !14654, file: !14358, line: 63, type: !27)
!14664 = !DILocation(line: 63, column: 7, scope: !14654)
!14665 = !DILocation(line: 65, column: 3, scope: !14654)
!14666 = !DILocation(line: 65, column: 11, scope: !14654)
!14667 = !DILocation(line: 65, column: 10, scope: !14654)
!14668 = !DILocation(line: 67, column: 30, scope: !14669)
!14669 = distinct !DILexicalBlock(scope: !14654, file: !14358, line: 66, column: 5)
!14670 = !DILocation(line: 67, column: 29, scope: !14669)
!14671 = !DILocation(line: 67, column: 20, scope: !14669)
!14672 = !DILocation(line: 67, column: 18, scope: !14669)
!14673 = !DILocation(line: 68, column: 11, scope: !14674)
!14674 = distinct !DILexicalBlock(scope: !14669, file: !14358, line: 68, column: 11)
!14675 = !DILocation(line: 68, column: 22, scope: !14674)
!14676 = !DILocation(line: 68, column: 11, scope: !14669)
!14677 = !DILocation(line: 70, column: 12, scope: !14678)
!14678 = distinct !DILexicalBlock(scope: !14674, file: !14358, line: 69, column: 9)
!14679 = !DILocation(line: 70, column: 15, scope: !14678)
!14680 = !DILocation(line: 71, column: 22, scope: !14678)
!14681 = !DILocation(line: 72, column: 9, scope: !14678)
!14682 = !DILocation(line: 73, column: 11, scope: !14683)
!14683 = distinct !DILexicalBlock(scope: !14669, file: !14358, line: 73, column: 11)
!14684 = !DILocation(line: 73, column: 19, scope: !14683)
!14685 = !DILocation(line: 73, column: 17, scope: !14683)
!14686 = !DILocation(line: 73, column: 32, scope: !14683)
!14687 = !DILocation(line: 73, column: 30, scope: !14683)
!14688 = !DILocation(line: 73, column: 11, scope: !14669)
!14689 = !DILocation(line: 74, column: 9, scope: !14683)
!14690 = !DILocation(line: 75, column: 16, scope: !14669)
!14691 = !DILocation(line: 75, column: 13, scope: !14669)
!14692 = !DILocation(line: 76, column: 9, scope: !14669)
!14693 = distinct !{!14693, !14665, !14694}
!14694 = !DILocation(line: 77, column: 5, scope: !14654)
!14695 = !DILocation(line: 78, column: 4, scope: !14654)
!14696 = !DILocation(line: 78, column: 7, scope: !14654)
!14697 = !DILocation(line: 79, column: 10, scope: !14654)
!14698 = !DILocation(line: 79, column: 3, scope: !14654)
!14699 = distinct !DISubprogram(name: "mbs_align_pad", scope: !14358, file: !14358, line: 88, type: !14700, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1589, retainedNodes: !152)
!14700 = !DISubroutineType(types: !14701)
!14701 = !{!143, !143, !146, !149}
!14702 = !DILocalVariable(name: "dest", arg: 1, scope: !14699, file: !14358, line: 88, type: !143)
!14703 = !DILocation(line: 88, column: 22, scope: !14699)
!14704 = !DILocalVariable(name: "dest_end", arg: 2, scope: !14699, file: !14358, line: 88, type: !146)
!14705 = !DILocation(line: 88, column: 40, scope: !14699)
!14706 = !DILocalVariable(name: "n_spaces", arg: 3, scope: !14699, file: !14358, line: 88, type: !149)
!14707 = !DILocation(line: 88, column: 57, scope: !14699)
!14708 = !DILocation(line: 92, column: 3, scope: !14699)
!14709 = !DILocation(line: 92, column: 18, scope: !14699)
!14710 = !DILocation(line: 92, column: 21, scope: !14699)
!14711 = !DILocation(line: 92, column: 25, scope: !14699)
!14712 = !DILocation(line: 92, column: 32, scope: !14699)
!14713 = !DILocation(line: 92, column: 30, scope: !14699)
!14714 = !DILocation(line: 0, scope: !14699)
!14715 = !DILocation(line: 93, column: 10, scope: !14699)
!14716 = !DILocation(line: 93, column: 13, scope: !14699)
!14717 = distinct !{!14717, !14708, !14718}
!14718 = !DILocation(line: 93, column: 15, scope: !14699)
!14719 = !DILocation(line: 94, column: 4, scope: !14699)
!14720 = !DILocation(line: 94, column: 9, scope: !14699)
!14721 = !DILocation(line: 95, column: 10, scope: !14699)
!14722 = !DILocation(line: 95, column: 3, scope: !14699)
!14723 = distinct !DISubprogram(name: "ambsalign", scope: !14358, file: !14358, line: 248, type: !14724, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1589, retainedNodes: !152)
!14724 = !DISubroutineType(types: !14725)
!14725 = !{!143, !146, !148, !707, !27}
!14726 = !DILocalVariable(name: "src", arg: 1, scope: !14723, file: !14358, line: 248, type: !146)
!14727 = !DILocation(line: 248, column: 24, scope: !14723)
!14728 = !DILocalVariable(name: "width", arg: 2, scope: !14723, file: !14358, line: 248, type: !148)
!14729 = !DILocation(line: 248, column: 37, scope: !14723)
!14730 = !DILocalVariable(name: "align", arg: 3, scope: !14723, file: !14358, line: 248, type: !707)
!14731 = !DILocation(line: 248, column: 56, scope: !14723)
!14732 = !DILocalVariable(name: "flags", arg: 4, scope: !14723, file: !14358, line: 248, type: !27)
!14733 = !DILocation(line: 248, column: 67, scope: !14723)
!14734 = !DILocalVariable(name: "orig_width", scope: !14723, file: !14358, line: 250, type: !149)
!14735 = !DILocation(line: 250, column: 10, scope: !14723)
!14736 = !DILocation(line: 250, column: 24, scope: !14723)
!14737 = !DILocation(line: 250, column: 23, scope: !14723)
!14738 = !DILocalVariable(name: "size", scope: !14723, file: !14358, line: 251, type: !149)
!14739 = !DILocation(line: 251, column: 10, scope: !14723)
!14740 = !DILocation(line: 251, column: 18, scope: !14723)
!14741 = !DILocation(line: 251, column: 17, scope: !14723)
!14742 = !DILocalVariable(name: "req", scope: !14723, file: !14358, line: 252, type: !149)
!14743 = !DILocation(line: 252, column: 10, scope: !14723)
!14744 = !DILocation(line: 252, column: 16, scope: !14723)
!14745 = !DILocalVariable(name: "buf", scope: !14723, file: !14358, line: 253, type: !143)
!14746 = !DILocation(line: 253, column: 9, scope: !14723)
!14747 = !DILocation(line: 255, column: 3, scope: !14723)
!14748 = !DILocation(line: 255, column: 10, scope: !14723)
!14749 = !DILocation(line: 255, column: 17, scope: !14723)
!14750 = !DILocation(line: 255, column: 14, scope: !14723)
!14751 = !DILocalVariable(name: "nbuf", scope: !14752, file: !14358, line: 257, type: !143)
!14752 = distinct !DILexicalBlock(scope: !14723, file: !14358, line: 256, column: 5)
!14753 = !DILocation(line: 257, column: 13, scope: !14752)
!14754 = !DILocation(line: 258, column: 14, scope: !14752)
!14755 = !DILocation(line: 258, column: 18, scope: !14752)
!14756 = !DILocation(line: 258, column: 12, scope: !14752)
!14757 = !DILocation(line: 259, column: 23, scope: !14752)
!14758 = !DILocation(line: 259, column: 28, scope: !14752)
!14759 = !DILocation(line: 259, column: 14, scope: !14752)
!14760 = !DILocation(line: 259, column: 12, scope: !14752)
!14761 = !DILocation(line: 260, column: 11, scope: !14762)
!14762 = distinct !DILexicalBlock(scope: !14752, file: !14358, line: 260, column: 11)
!14763 = !DILocation(line: 260, column: 16, scope: !14762)
!14764 = !DILocation(line: 260, column: 11, scope: !14752)
!14765 = !DILocation(line: 262, column: 17, scope: !14766)
!14766 = distinct !DILexicalBlock(scope: !14762, file: !14358, line: 261, column: 9)
!14767 = !DILocation(line: 262, column: 11, scope: !14766)
!14768 = !DILocation(line: 263, column: 15, scope: !14766)
!14769 = !DILocation(line: 264, column: 11, scope: !14766)
!14770 = !DILocation(line: 266, column: 13, scope: !14752)
!14771 = !DILocation(line: 266, column: 11, scope: !14752)
!14772 = !DILocation(line: 267, column: 16, scope: !14752)
!14773 = !DILocation(line: 267, column: 8, scope: !14752)
!14774 = !DILocation(line: 267, column: 14, scope: !14752)
!14775 = !DILocation(line: 268, column: 23, scope: !14752)
!14776 = !DILocation(line: 268, column: 28, scope: !14752)
!14777 = !DILocation(line: 268, column: 33, scope: !14752)
!14778 = !DILocation(line: 268, column: 39, scope: !14752)
!14779 = !DILocation(line: 268, column: 46, scope: !14752)
!14780 = !DILocation(line: 268, column: 53, scope: !14752)
!14781 = !DILocation(line: 268, column: 13, scope: !14752)
!14782 = !DILocation(line: 268, column: 11, scope: !14752)
!14783 = !DILocation(line: 269, column: 11, scope: !14784)
!14784 = distinct !DILexicalBlock(scope: !14752, file: !14358, line: 269, column: 11)
!14785 = !DILocation(line: 269, column: 15, scope: !14784)
!14786 = !DILocation(line: 269, column: 11, scope: !14752)
!14787 = !DILocation(line: 271, column: 17, scope: !14788)
!14788 = distinct !DILexicalBlock(scope: !14784, file: !14358, line: 270, column: 9)
!14789 = !DILocation(line: 271, column: 11, scope: !14788)
!14790 = !DILocation(line: 272, column: 15, scope: !14788)
!14791 = !DILocation(line: 273, column: 11, scope: !14788)
!14792 = distinct !{!14792, !14747, !14793}
!14793 = !DILocation(line: 275, column: 5, scope: !14723)
!14794 = !DILocation(line: 277, column: 10, scope: !14723)
!14795 = !DILocation(line: 277, column: 3, scope: !14723)
!14796 = distinct !DISubprogram(name: "gnu_mbswidth", scope: !14797, file: !14797, line: 47, type: !14798, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1596, retainedNodes: !152)
!14797 = !DIFile(filename: "lib/mbswidth.c", directory: "/home/mbarbar/software/coreutils-8.31")
!14798 = !DISubroutineType(types: !14799)
!14799 = !{!27, !146, !27}
!14800 = !DILocalVariable(name: "string", arg: 1, scope: !14796, file: !14797, line: 47, type: !146)
!14801 = !DILocation(line: 47, column: 23, scope: !14796)
!14802 = !DILocalVariable(name: "flags", arg: 2, scope: !14796, file: !14797, line: 47, type: !27)
!14803 = !DILocation(line: 47, column: 35, scope: !14796)
!14804 = !DILocation(line: 49, column: 21, scope: !14796)
!14805 = !DILocation(line: 49, column: 37, scope: !14796)
!14806 = !DILocation(line: 49, column: 29, scope: !14796)
!14807 = !DILocation(line: 49, column: 46, scope: !14796)
!14808 = !DILocation(line: 49, column: 10, scope: !14796)
!14809 = !DILocation(line: 49, column: 3, scope: !14796)
!14810 = distinct !DISubprogram(name: "mbsnwidth", scope: !14797, file: !14797, line: 57, type: !14811, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1596, retainedNodes: !152)
!14811 = !DISubroutineType(types: !14812)
!14812 = !{!27, !146, !149, !27}
!14813 = !DILocalVariable(name: "string", arg: 1, scope: !14810, file: !14797, line: 57, type: !146)
!14814 = !DILocation(line: 57, column: 24, scope: !14810)
!14815 = !DILocalVariable(name: "nbytes", arg: 2, scope: !14810, file: !14797, line: 57, type: !149)
!14816 = !DILocation(line: 57, column: 39, scope: !14810)
!14817 = !DILocalVariable(name: "flags", arg: 3, scope: !14810, file: !14797, line: 57, type: !27)
!14818 = !DILocation(line: 57, column: 51, scope: !14810)
!14819 = !DILocalVariable(name: "p", scope: !14810, file: !14797, line: 59, type: !146)
!14820 = !DILocation(line: 59, column: 15, scope: !14810)
!14821 = !DILocation(line: 59, column: 19, scope: !14810)
!14822 = !DILocalVariable(name: "plimit", scope: !14810, file: !14797, line: 60, type: !146)
!14823 = !DILocation(line: 60, column: 15, scope: !14810)
!14824 = !DILocation(line: 60, column: 24, scope: !14810)
!14825 = !DILocation(line: 60, column: 28, scope: !14810)
!14826 = !DILocation(line: 60, column: 26, scope: !14810)
!14827 = !DILocalVariable(name: "width", scope: !14810, file: !14797, line: 61, type: !27)
!14828 = !DILocation(line: 61, column: 7, scope: !14810)
!14829 = !DILocation(line: 63, column: 9, scope: !14810)
!14830 = !DILocation(line: 64, column: 7, scope: !14831)
!14831 = distinct !DILexicalBlock(scope: !14810, file: !14797, line: 64, column: 7)
!14832 = !DILocation(line: 64, column: 18, scope: !14831)
!14833 = !DILocation(line: 64, column: 7, scope: !14810)
!14834 = !DILocation(line: 66, column: 7, scope: !14835)
!14835 = distinct !DILexicalBlock(scope: !14831, file: !14797, line: 65, column: 5)
!14836 = !DILocation(line: 66, column: 14, scope: !14835)
!14837 = !DILocation(line: 66, column: 18, scope: !14835)
!14838 = !DILocation(line: 66, column: 16, scope: !14835)
!14839 = !DILocation(line: 67, column: 18, scope: !14835)
!14840 = !DILocation(line: 67, column: 17, scope: !14835)
!14841 = !DILocation(line: 67, column: 9, scope: !14835)
!14842 = !DILocation(line: 90, column: 16, scope: !14843)
!14843 = distinct !DILexicalBlock(scope: !14835, file: !14797, line: 68, column: 11)
!14844 = !DILocation(line: 91, column: 20, scope: !14843)
!14845 = !DILocation(line: 92, column: 15, scope: !14843)
!14846 = !DILocalVariable(name: "mbstate", scope: !14847, file: !14797, line: 96, type: !1599)
!14847 = distinct !DILexicalBlock(scope: !14843, file: !14797, line: 95, column: 15)
!14848 = !DILocation(line: 96, column: 27, scope: !14847)
!14849 = !DILocation(line: 97, column: 17, scope: !14847)
!14850 = !DILocation(line: 98, column: 17, scope: !14847)
!14851 = !DILocalVariable(name: "wc", scope: !14852, file: !14797, line: 100, type: !764)
!14852 = distinct !DILexicalBlock(scope: !14847, file: !14797, line: 99, column: 19)
!14853 = !DILocation(line: 100, column: 29, scope: !14852)
!14854 = !DILocalVariable(name: "bytes", scope: !14852, file: !14797, line: 101, type: !149)
!14855 = !DILocation(line: 101, column: 28, scope: !14852)
!14856 = !DILocalVariable(name: "w", scope: !14852, file: !14797, line: 102, type: !27)
!14857 = !DILocation(line: 102, column: 25, scope: !14852)
!14858 = !DILocation(line: 104, column: 43, scope: !14852)
!14859 = !DILocation(line: 104, column: 46, scope: !14852)
!14860 = !DILocation(line: 104, column: 55, scope: !14852)
!14861 = !DILocation(line: 104, column: 53, scope: !14852)
!14862 = !DILocation(line: 104, column: 29, scope: !14852)
!14863 = !DILocation(line: 104, column: 27, scope: !14852)
!14864 = !DILocation(line: 106, column: 25, scope: !14865)
!14865 = distinct !DILexicalBlock(scope: !14852, file: !14797, line: 106, column: 25)
!14866 = !DILocation(line: 106, column: 31, scope: !14865)
!14867 = !DILocation(line: 106, column: 25, scope: !14852)
!14868 = !DILocation(line: 109, column: 31, scope: !14869)
!14869 = distinct !DILexicalBlock(scope: !14870, file: !14797, line: 109, column: 29)
!14870 = distinct !DILexicalBlock(scope: !14865, file: !14797, line: 108, column: 23)
!14871 = !DILocation(line: 109, column: 37, scope: !14869)
!14872 = !DILocation(line: 109, column: 29, scope: !14870)
!14873 = !DILocation(line: 111, column: 30, scope: !14874)
!14874 = distinct !DILexicalBlock(scope: !14869, file: !14797, line: 110, column: 27)
!14875 = !DILocation(line: 112, column: 34, scope: !14874)
!14876 = !DILocation(line: 113, column: 29, scope: !14874)
!14877 = !DILocation(line: 116, column: 27, scope: !14869)
!14878 = !DILocation(line: 119, column: 25, scope: !14879)
!14879 = distinct !DILexicalBlock(scope: !14852, file: !14797, line: 119, column: 25)
!14880 = !DILocation(line: 119, column: 31, scope: !14879)
!14881 = !DILocation(line: 119, column: 25, scope: !14852)
!14882 = !DILocation(line: 122, column: 31, scope: !14883)
!14883 = distinct !DILexicalBlock(scope: !14884, file: !14797, line: 122, column: 29)
!14884 = distinct !DILexicalBlock(scope: !14879, file: !14797, line: 121, column: 23)
!14885 = !DILocation(line: 122, column: 37, scope: !14883)
!14886 = !DILocation(line: 122, column: 29, scope: !14884)
!14887 = !DILocation(line: 124, column: 33, scope: !14888)
!14888 = distinct !DILexicalBlock(scope: !14883, file: !14797, line: 123, column: 27)
!14889 = !DILocation(line: 124, column: 31, scope: !14888)
!14890 = !DILocation(line: 125, column: 34, scope: !14888)
!14891 = !DILocation(line: 126, column: 29, scope: !14888)
!14892 = !DILocation(line: 129, column: 27, scope: !14883)
!14893 = !DILocation(line: 132, column: 25, scope: !14894)
!14894 = distinct !DILexicalBlock(scope: !14852, file: !14797, line: 132, column: 25)
!14895 = !DILocation(line: 132, column: 31, scope: !14894)
!14896 = !DILocation(line: 132, column: 25, scope: !14852)
!14897 = !DILocation(line: 134, column: 29, scope: !14894)
!14898 = !DILocation(line: 134, column: 23, scope: !14894)
!14899 = !DILocation(line: 136, column: 34, scope: !14852)
!14900 = !DILocation(line: 136, column: 25, scope: !14852)
!14901 = !DILocation(line: 136, column: 23, scope: !14852)
!14902 = !DILocation(line: 137, column: 25, scope: !14903)
!14903 = distinct !DILexicalBlock(scope: !14852, file: !14797, line: 137, column: 25)
!14904 = !DILocation(line: 137, column: 27, scope: !14903)
!14905 = !DILocation(line: 137, column: 25, scope: !14852)
!14906 = !DILocation(line: 140, column: 29, scope: !14907)
!14907 = distinct !DILexicalBlock(scope: !14908, file: !14797, line: 140, column: 29)
!14908 = distinct !DILexicalBlock(scope: !14903, file: !14797, line: 139, column: 23)
!14909 = !DILocation(line: 140, column: 43, scope: !14907)
!14910 = !DILocation(line: 140, column: 41, scope: !14907)
!14911 = !DILocation(line: 140, column: 31, scope: !14907)
!14912 = !DILocation(line: 140, column: 29, scope: !14908)
!14913 = !DILocation(line: 141, column: 27, scope: !14907)
!14914 = !DILocation(line: 142, column: 34, scope: !14908)
!14915 = !DILocation(line: 142, column: 31, scope: !14908)
!14916 = !DILocation(line: 143, column: 23, scope: !14908)
!14917 = !DILocation(line: 146, column: 29, scope: !14918)
!14918 = distinct !DILexicalBlock(scope: !14903, file: !14797, line: 146, column: 27)
!14919 = !DILocation(line: 146, column: 35, scope: !14918)
!14920 = !DILocation(line: 146, column: 27, scope: !14903)
!14921 = !DILocation(line: 148, column: 42, scope: !14922)
!14922 = distinct !DILexicalBlock(scope: !14923, file: !14797, line: 148, column: 31)
!14923 = distinct !DILexicalBlock(scope: !14918, file: !14797, line: 147, column: 25)
!14924 = !DILocation(line: 148, column: 32, scope: !14922)
!14925 = !DILocation(line: 148, column: 31, scope: !14923)
!14926 = !DILocation(line: 150, column: 35, scope: !14927)
!14927 = distinct !DILexicalBlock(scope: !14928, file: !14797, line: 150, column: 35)
!14928 = distinct !DILexicalBlock(scope: !14922, file: !14797, line: 149, column: 29)
!14929 = !DILocation(line: 150, column: 41, scope: !14927)
!14930 = !DILocation(line: 150, column: 35, scope: !14928)
!14931 = !DILocation(line: 151, column: 33, scope: !14927)
!14932 = !DILocation(line: 152, column: 36, scope: !14928)
!14933 = !DILocation(line: 153, column: 29, scope: !14928)
!14934 = !DILocation(line: 154, column: 25, scope: !14923)
!14935 = !DILocation(line: 156, column: 25, scope: !14918)
!14936 = !DILocation(line: 158, column: 26, scope: !14852)
!14937 = !DILocation(line: 158, column: 23, scope: !14852)
!14938 = !DILocation(line: 159, column: 19, scope: !14852)
!14939 = !DILocation(line: 160, column: 26, scope: !14847)
!14940 = !DILocation(line: 160, column: 24, scope: !14847)
!14941 = distinct !{!14941, !14850, !14942}
!14942 = !DILocation(line: 160, column: 44, scope: !14847)
!14943 = !DILocation(line: 162, column: 15, scope: !14843)
!14944 = distinct !{!14944, !14834, !14945}
!14945 = !DILocation(line: 163, column: 11, scope: !14835)
!14946 = !DILocation(line: 164, column: 14, scope: !14835)
!14947 = !DILocation(line: 164, column: 7, scope: !14835)
!14948 = !DILocation(line: 167, column: 3, scope: !14810)
!14949 = !DILocation(line: 167, column: 10, scope: !14810)
!14950 = !DILocation(line: 167, column: 14, scope: !14810)
!14951 = !DILocation(line: 167, column: 12, scope: !14810)
!14952 = !DILocalVariable(name: "c", scope: !14953, file: !14797, line: 169, type: !737)
!14953 = distinct !DILexicalBlock(scope: !14810, file: !14797, line: 168, column: 5)
!14954 = !DILocation(line: 169, column: 21, scope: !14953)
!14955 = !DILocation(line: 169, column: 43, scope: !14953)
!14956 = !DILocation(line: 169, column: 41, scope: !14953)
!14957 = !DILocation(line: 171, column: 11, scope: !14958)
!14958 = distinct !DILexicalBlock(scope: !14953, file: !14797, line: 171, column: 11)
!14959 = !DILocation(line: 171, column: 11, scope: !14953)
!14960 = !DILocation(line: 173, column: 15, scope: !14961)
!14961 = distinct !DILexicalBlock(scope: !14962, file: !14797, line: 173, column: 15)
!14962 = distinct !DILexicalBlock(scope: !14958, file: !14797, line: 172, column: 9)
!14963 = !DILocation(line: 173, column: 21, scope: !14961)
!14964 = !DILocation(line: 173, column: 15, scope: !14962)
!14965 = !DILocation(line: 174, column: 13, scope: !14961)
!14966 = !DILocation(line: 175, column: 16, scope: !14962)
!14967 = !DILocation(line: 176, column: 9, scope: !14962)
!14968 = !DILocation(line: 177, column: 18, scope: !14969)
!14969 = distinct !DILexicalBlock(scope: !14958, file: !14797, line: 177, column: 16)
!14970 = !DILocation(line: 177, column: 24, scope: !14969)
!14971 = !DILocation(line: 177, column: 16, scope: !14958)
!14972 = !DILocation(line: 179, column: 16, scope: !14973)
!14973 = distinct !DILexicalBlock(scope: !14974, file: !14797, line: 179, column: 15)
!14974 = distinct !DILexicalBlock(scope: !14969, file: !14797, line: 178, column: 9)
!14975 = !DILocation(line: 179, column: 15, scope: !14974)
!14976 = !DILocation(line: 181, column: 19, scope: !14977)
!14977 = distinct !DILexicalBlock(scope: !14978, file: !14797, line: 181, column: 19)
!14978 = distinct !DILexicalBlock(scope: !14973, file: !14797, line: 180, column: 13)
!14979 = !DILocation(line: 181, column: 25, scope: !14977)
!14980 = !DILocation(line: 181, column: 19, scope: !14978)
!14981 = !DILocation(line: 182, column: 17, scope: !14977)
!14982 = !DILocation(line: 183, column: 20, scope: !14978)
!14983 = !DILocation(line: 184, column: 13, scope: !14978)
!14984 = !DILocation(line: 185, column: 9, scope: !14974)
!14985 = !DILocation(line: 187, column: 9, scope: !14969)
!14986 = distinct !{!14986, !14948, !14987}
!14987 = !DILocation(line: 188, column: 5, scope: !14810)
!14988 = !DILocation(line: 189, column: 10, scope: !14810)
!14989 = !DILocation(line: 189, column: 3, scope: !14810)
!14990 = !DILabel(scope: !14810, name: "overflow", file: !14797, line: 191)
!14991 = !DILocation(line: 191, column: 2, scope: !14810)
!14992 = !DILocation(line: 192, column: 3, scope: !14810)
!14993 = !DILocation(line: 193, column: 1, scope: !14810)
!14994 = distinct !DISubprogram(name: "mpsort", scope: !14995, file: !14995, line: 153, type: !14996, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1609, retainedNodes: !152)
!14995 = !DIFile(filename: "lib/mpsort.c", directory: "/home/mbarbar/software/coreutils-8.31")
!14996 = !DISubroutineType(types: !14997)
!14997 = !{null, !180, !149, !14998}
!14998 = !DIDerivedType(tag: DW_TAG_typedef, name: "comparison_function", file: !14995, line: 28, baseType: !14999)
!14999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15000, size: 64)
!15000 = !DISubroutineType(types: !15001)
!15001 = !{!27, !181, !181}
!15002 = !DILocalVariable(name: "base", arg: 1, scope: !14994, file: !14995, line: 153, type: !180)
!15003 = !DILocation(line: 153, column: 22, scope: !14994)
!15004 = !DILocalVariable(name: "n", arg: 2, scope: !14994, file: !14995, line: 153, type: !149)
!15005 = !DILocation(line: 153, column: 35, scope: !14994)
!15006 = !DILocalVariable(name: "cmp", arg: 3, scope: !14994, file: !14995, line: 153, type: !14998)
!15007 = !DILocation(line: 153, column: 58, scope: !14994)
!15008 = !DILocation(line: 155, column: 20, scope: !14994)
!15009 = !DILocation(line: 155, column: 26, scope: !14994)
!15010 = !DILocation(line: 155, column: 29, scope: !14994)
!15011 = !DILocation(line: 155, column: 36, scope: !14994)
!15012 = !DILocation(line: 155, column: 34, scope: !14994)
!15013 = !DILocation(line: 155, column: 39, scope: !14994)
!15014 = !DILocation(line: 155, column: 3, scope: !14994)
!15015 = !DILocation(line: 156, column: 1, scope: !14994)
!15016 = distinct !DISubprogram(name: "mpsort_with_tmp", scope: !14995, file: !14995, line: 86, type: !15017, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1609, retainedNodes: !152)
!15017 = !DISubroutineType(types: !15018)
!15018 = !{null, !15019, !149, !15019, !14998}
!15019 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !180)
!15020 = !DILocalVariable(name: "base", arg: 1, scope: !15016, file: !14995, line: 86, type: !15019)
!15021 = !DILocation(line: 86, column: 40, scope: !15016)
!15022 = !DILocalVariable(name: "n", arg: 2, scope: !15016, file: !14995, line: 86, type: !149)
!15023 = !DILocation(line: 86, column: 53, scope: !15016)
!15024 = !DILocalVariable(name: "tmp", arg: 3, scope: !15016, file: !14995, line: 87, type: !15019)
!15025 = !DILocation(line: 87, column: 40, scope: !15016)
!15026 = !DILocalVariable(name: "cmp", arg: 4, scope: !15016, file: !14995, line: 88, type: !14998)
!15027 = !DILocation(line: 88, column: 38, scope: !15016)
!15028 = !DILocation(line: 90, column: 7, scope: !15029)
!15029 = distinct !DILexicalBlock(scope: !15016, file: !14995, line: 90, column: 7)
!15030 = !DILocation(line: 90, column: 9, scope: !15029)
!15031 = !DILocation(line: 90, column: 7, scope: !15016)
!15032 = !DILocation(line: 92, column: 11, scope: !15033)
!15033 = distinct !DILexicalBlock(scope: !15034, file: !14995, line: 92, column: 11)
!15034 = distinct !DILexicalBlock(scope: !15029, file: !14995, line: 91, column: 5)
!15035 = !DILocation(line: 92, column: 13, scope: !15033)
!15036 = !DILocation(line: 92, column: 11, scope: !15034)
!15037 = !DILocalVariable(name: "p0", scope: !15038, file: !14995, line: 94, type: !181)
!15038 = distinct !DILexicalBlock(scope: !15033, file: !14995, line: 93, column: 9)
!15039 = !DILocation(line: 94, column: 23, scope: !15038)
!15040 = !DILocation(line: 94, column: 28, scope: !15038)
!15041 = !DILocalVariable(name: "p1", scope: !15038, file: !14995, line: 95, type: !181)
!15042 = !DILocation(line: 95, column: 23, scope: !15038)
!15043 = !DILocation(line: 95, column: 28, scope: !15038)
!15044 = !DILocation(line: 96, column: 18, scope: !15045)
!15045 = distinct !DILexicalBlock(scope: !15038, file: !14995, line: 96, column: 15)
!15046 = !DILocation(line: 96, column: 23, scope: !15045)
!15047 = !DILocation(line: 96, column: 27, scope: !15045)
!15048 = !DILocation(line: 96, column: 31, scope: !15045)
!15049 = !DILocation(line: 96, column: 15, scope: !15038)
!15050 = !DILocation(line: 98, column: 25, scope: !15051)
!15051 = distinct !DILexicalBlock(scope: !15045, file: !14995, line: 97, column: 13)
!15052 = !DILocation(line: 98, column: 15, scope: !15051)
!15053 = !DILocation(line: 98, column: 23, scope: !15051)
!15054 = !DILocation(line: 99, column: 25, scope: !15051)
!15055 = !DILocation(line: 99, column: 15, scope: !15051)
!15056 = !DILocation(line: 99, column: 23, scope: !15051)
!15057 = !DILocation(line: 100, column: 13, scope: !15051)
!15058 = !DILocation(line: 101, column: 9, scope: !15038)
!15059 = !DILocation(line: 102, column: 5, scope: !15034)
!15060 = !DILocalVariable(name: "n1", scope: !15061, file: !14995, line: 105, type: !149)
!15061 = distinct !DILexicalBlock(scope: !15029, file: !14995, line: 104, column: 5)
!15062 = !DILocation(line: 105, column: 14, scope: !15061)
!15063 = !DILocation(line: 105, column: 19, scope: !15061)
!15064 = !DILocation(line: 105, column: 21, scope: !15061)
!15065 = !DILocalVariable(name: "n2", scope: !15061, file: !14995, line: 106, type: !149)
!15066 = !DILocation(line: 106, column: 14, scope: !15061)
!15067 = !DILocation(line: 106, column: 19, scope: !15061)
!15068 = !DILocation(line: 106, column: 23, scope: !15061)
!15069 = !DILocation(line: 106, column: 21, scope: !15061)
!15070 = !DILocalVariable(name: "i", scope: !15061, file: !14995, line: 107, type: !149)
!15071 = !DILocation(line: 107, column: 14, scope: !15061)
!15072 = !DILocalVariable(name: "t", scope: !15061, file: !14995, line: 108, type: !149)
!15073 = !DILocation(line: 108, column: 14, scope: !15061)
!15074 = !DILocalVariable(name: "tlim", scope: !15061, file: !14995, line: 109, type: !149)
!15075 = !DILocation(line: 109, column: 14, scope: !15061)
!15076 = !DILocation(line: 109, column: 21, scope: !15061)
!15077 = !DILocalVariable(name: "b", scope: !15061, file: !14995, line: 110, type: !149)
!15078 = !DILocation(line: 110, column: 14, scope: !15061)
!15079 = !DILocation(line: 110, column: 18, scope: !15061)
!15080 = !DILocalVariable(name: "blim", scope: !15061, file: !14995, line: 111, type: !149)
!15081 = !DILocation(line: 111, column: 14, scope: !15061)
!15082 = !DILocation(line: 111, column: 21, scope: !15061)
!15083 = !DILocalVariable(name: "bb", scope: !15061, file: !14995, line: 112, type: !181)
!15084 = !DILocation(line: 112, column: 19, scope: !15061)
!15085 = !DILocalVariable(name: "tt", scope: !15061, file: !14995, line: 113, type: !181)
!15086 = !DILocation(line: 113, column: 19, scope: !15061)
!15087 = !DILocation(line: 115, column: 24, scope: !15061)
!15088 = !DILocation(line: 115, column: 31, scope: !15061)
!15089 = !DILocation(line: 115, column: 29, scope: !15061)
!15090 = !DILocation(line: 115, column: 35, scope: !15061)
!15091 = !DILocation(line: 115, column: 39, scope: !15061)
!15092 = !DILocation(line: 115, column: 44, scope: !15061)
!15093 = !DILocation(line: 115, column: 7, scope: !15061)
!15094 = !DILocation(line: 117, column: 11, scope: !15095)
!15095 = distinct !DILexicalBlock(scope: !15061, file: !14995, line: 117, column: 11)
!15096 = !DILocation(line: 117, column: 14, scope: !15095)
!15097 = !DILocation(line: 117, column: 11, scope: !15061)
!15098 = !DILocation(line: 118, column: 18, scope: !15095)
!15099 = !DILocation(line: 118, column: 9, scope: !15095)
!15100 = !DILocation(line: 118, column: 16, scope: !15095)
!15101 = !DILocation(line: 120, column: 26, scope: !15095)
!15102 = !DILocation(line: 120, column: 32, scope: !15095)
!15103 = !DILocation(line: 120, column: 36, scope: !15095)
!15104 = !DILocation(line: 120, column: 41, scope: !15095)
!15105 = !DILocation(line: 120, column: 9, scope: !15095)
!15106 = !DILocation(line: 122, column: 12, scope: !15061)
!15107 = !DILocation(line: 122, column: 16, scope: !15061)
!15108 = !DILocation(line: 122, column: 10, scope: !15061)
!15109 = !DILocation(line: 123, column: 12, scope: !15061)
!15110 = !DILocation(line: 123, column: 17, scope: !15061)
!15111 = !DILocation(line: 123, column: 10, scope: !15061)
!15112 = !DILocation(line: 125, column: 14, scope: !15113)
!15113 = distinct !DILexicalBlock(scope: !15061, file: !14995, line: 125, column: 7)
!15114 = !DILocation(line: 125, column: 12, scope: !15113)
!15115 = !DILocation(line: 126, column: 13, scope: !15116)
!15116 = distinct !DILexicalBlock(scope: !15117, file: !14995, line: 126, column: 13)
!15117 = distinct !DILexicalBlock(scope: !15113, file: !14995, line: 125, column: 7)
!15118 = !DILocation(line: 126, column: 18, scope: !15116)
!15119 = !DILocation(line: 126, column: 22, scope: !15116)
!15120 = !DILocation(line: 126, column: 26, scope: !15116)
!15121 = !DILocation(line: 126, column: 13, scope: !15117)
!15122 = !DILocation(line: 128, column: 25, scope: !15123)
!15123 = distinct !DILexicalBlock(scope: !15116, file: !14995, line: 127, column: 11)
!15124 = !DILocation(line: 128, column: 13, scope: !15123)
!15125 = !DILocation(line: 128, column: 19, scope: !15123)
!15126 = !DILocation(line: 128, column: 23, scope: !15123)
!15127 = !DILocation(line: 129, column: 14, scope: !15123)
!15128 = !DILocation(line: 130, column: 17, scope: !15129)
!15129 = distinct !DILexicalBlock(scope: !15123, file: !14995, line: 130, column: 17)
!15130 = !DILocation(line: 130, column: 22, scope: !15129)
!15131 = !DILocation(line: 130, column: 19, scope: !15129)
!15132 = !DILocation(line: 130, column: 17, scope: !15123)
!15133 = !DILocation(line: 131, column: 15, scope: !15129)
!15134 = !DILocation(line: 132, column: 18, scope: !15123)
!15135 = !DILocation(line: 132, column: 22, scope: !15123)
!15136 = !DILocation(line: 132, column: 16, scope: !15123)
!15137 = !DILocation(line: 133, column: 11, scope: !15123)
!15138 = !DILocation(line: 136, column: 25, scope: !15139)
!15139 = distinct !DILexicalBlock(scope: !15116, file: !14995, line: 135, column: 11)
!15140 = !DILocation(line: 136, column: 13, scope: !15139)
!15141 = !DILocation(line: 136, column: 19, scope: !15139)
!15142 = !DILocation(line: 136, column: 23, scope: !15139)
!15143 = !DILocation(line: 137, column: 14, scope: !15139)
!15144 = !DILocation(line: 138, column: 17, scope: !15145)
!15145 = distinct !DILexicalBlock(scope: !15139, file: !14995, line: 138, column: 17)
!15146 = !DILocation(line: 138, column: 22, scope: !15145)
!15147 = !DILocation(line: 138, column: 19, scope: !15145)
!15148 = !DILocation(line: 138, column: 17, scope: !15139)
!15149 = !DILocation(line: 140, column: 25, scope: !15150)
!15150 = distinct !DILexicalBlock(scope: !15145, file: !14995, line: 139, column: 15)
!15151 = !DILocation(line: 140, column: 32, scope: !15150)
!15152 = !DILocation(line: 140, column: 30, scope: !15150)
!15153 = !DILocation(line: 140, column: 17, scope: !15150)
!15154 = !DILocation(line: 140, column: 35, scope: !15150)
!15155 = !DILocation(line: 140, column: 41, scope: !15150)
!15156 = !DILocation(line: 140, column: 39, scope: !15150)
!15157 = !DILocation(line: 140, column: 45, scope: !15150)
!15158 = !DILocation(line: 140, column: 52, scope: !15150)
!15159 = !DILocation(line: 140, column: 50, scope: !15150)
!15160 = !DILocation(line: 140, column: 55, scope: !15150)
!15161 = !DILocation(line: 141, column: 17, scope: !15150)
!15162 = !DILocation(line: 143, column: 18, scope: !15139)
!15163 = !DILocation(line: 143, column: 23, scope: !15139)
!15164 = !DILocation(line: 143, column: 16, scope: !15139)
!15165 = !DILocation(line: 125, column: 7, scope: !15117)
!15166 = distinct !{!15166, !15167, !15168}
!15167 = !DILocation(line: 125, column: 7, scope: !15113)
!15168 = !DILocation(line: 144, column: 11, scope: !15113)
!15169 = !DILocation(line: 146, column: 1, scope: !15016)
!15170 = distinct !DISubprogram(name: "mpsort_into_tmp", scope: !14995, file: !14995, line: 37, type: !15017, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1609, retainedNodes: !152)
!15171 = !DILocalVariable(name: "base", arg: 1, scope: !15170, file: !14995, line: 37, type: !15019)
!15172 = !DILocation(line: 37, column: 40, scope: !15170)
!15173 = !DILocalVariable(name: "n", arg: 2, scope: !15170, file: !14995, line: 37, type: !149)
!15174 = !DILocation(line: 37, column: 53, scope: !15170)
!15175 = !DILocalVariable(name: "tmp", arg: 3, scope: !15170, file: !14995, line: 38, type: !15019)
!15176 = !DILocation(line: 38, column: 40, scope: !15170)
!15177 = !DILocalVariable(name: "cmp", arg: 4, scope: !15170, file: !14995, line: 39, type: !14998)
!15178 = !DILocation(line: 39, column: 38, scope: !15170)
!15179 = !DILocalVariable(name: "n1", scope: !15170, file: !14995, line: 41, type: !149)
!15180 = !DILocation(line: 41, column: 10, scope: !15170)
!15181 = !DILocation(line: 41, column: 15, scope: !15170)
!15182 = !DILocation(line: 41, column: 17, scope: !15170)
!15183 = !DILocalVariable(name: "n2", scope: !15170, file: !14995, line: 42, type: !149)
!15184 = !DILocation(line: 42, column: 10, scope: !15170)
!15185 = !DILocation(line: 42, column: 15, scope: !15170)
!15186 = !DILocation(line: 42, column: 19, scope: !15170)
!15187 = !DILocation(line: 42, column: 17, scope: !15170)
!15188 = !DILocalVariable(name: "a", scope: !15170, file: !14995, line: 43, type: !149)
!15189 = !DILocation(line: 43, column: 10, scope: !15170)
!15190 = !DILocalVariable(name: "alim", scope: !15170, file: !14995, line: 44, type: !149)
!15191 = !DILocation(line: 44, column: 10, scope: !15170)
!15192 = !DILocation(line: 44, column: 17, scope: !15170)
!15193 = !DILocalVariable(name: "b", scope: !15170, file: !14995, line: 45, type: !149)
!15194 = !DILocation(line: 45, column: 10, scope: !15170)
!15195 = !DILocation(line: 45, column: 14, scope: !15170)
!15196 = !DILocalVariable(name: "blim", scope: !15170, file: !14995, line: 46, type: !149)
!15197 = !DILocation(line: 46, column: 10, scope: !15170)
!15198 = !DILocation(line: 46, column: 17, scope: !15170)
!15199 = !DILocalVariable(name: "ba", scope: !15170, file: !14995, line: 47, type: !181)
!15200 = !DILocation(line: 47, column: 15, scope: !15170)
!15201 = !DILocalVariable(name: "bb", scope: !15170, file: !14995, line: 48, type: !181)
!15202 = !DILocation(line: 48, column: 15, scope: !15170)
!15203 = !DILocation(line: 50, column: 20, scope: !15170)
!15204 = !DILocation(line: 50, column: 27, scope: !15170)
!15205 = !DILocation(line: 50, column: 25, scope: !15170)
!15206 = !DILocation(line: 50, column: 31, scope: !15170)
!15207 = !DILocation(line: 50, column: 35, scope: !15170)
!15208 = !DILocation(line: 50, column: 40, scope: !15170)
!15209 = !DILocation(line: 50, column: 3, scope: !15170)
!15210 = !DILocation(line: 51, column: 20, scope: !15170)
!15211 = !DILocation(line: 51, column: 26, scope: !15170)
!15212 = !DILocation(line: 51, column: 30, scope: !15170)
!15213 = !DILocation(line: 51, column: 35, scope: !15170)
!15214 = !DILocation(line: 51, column: 3, scope: !15170)
!15215 = !DILocation(line: 53, column: 8, scope: !15170)
!15216 = !DILocation(line: 53, column: 13, scope: !15170)
!15217 = !DILocation(line: 53, column: 6, scope: !15170)
!15218 = !DILocation(line: 54, column: 8, scope: !15170)
!15219 = !DILocation(line: 54, column: 13, scope: !15170)
!15220 = !DILocation(line: 54, column: 6, scope: !15170)
!15221 = !DILocation(line: 56, column: 3, scope: !15170)
!15222 = !DILocation(line: 57, column: 9, scope: !15223)
!15223 = distinct !DILexicalBlock(scope: !15224, file: !14995, line: 57, column: 9)
!15224 = distinct !DILexicalBlock(scope: !15225, file: !14995, line: 56, column: 3)
!15225 = distinct !DILexicalBlock(scope: !15170, file: !14995, line: 56, column: 3)
!15226 = !DILocation(line: 57, column: 14, scope: !15223)
!15227 = !DILocation(line: 57, column: 18, scope: !15223)
!15228 = !DILocation(line: 57, column: 22, scope: !15223)
!15229 = !DILocation(line: 57, column: 9, scope: !15224)
!15230 = !DILocation(line: 59, column: 18, scope: !15231)
!15231 = distinct !DILexicalBlock(scope: !15223, file: !14995, line: 58, column: 7)
!15232 = !DILocation(line: 59, column: 13, scope: !15231)
!15233 = !DILocation(line: 59, column: 16, scope: !15231)
!15234 = !DILocation(line: 60, column: 10, scope: !15231)
!15235 = !DILocation(line: 61, column: 13, scope: !15236)
!15236 = distinct !DILexicalBlock(scope: !15231, file: !14995, line: 61, column: 13)
!15237 = !DILocation(line: 61, column: 18, scope: !15236)
!15238 = !DILocation(line: 61, column: 15, scope: !15236)
!15239 = !DILocation(line: 61, column: 13, scope: !15231)
!15240 = !DILocation(line: 63, column: 17, scope: !15241)
!15241 = distinct !DILexicalBlock(scope: !15236, file: !14995, line: 62, column: 11)
!15242 = !DILocation(line: 63, column: 15, scope: !15241)
!15243 = !DILocation(line: 64, column: 20, scope: !15241)
!15244 = !DILocation(line: 64, column: 18, scope: !15241)
!15245 = !DILocation(line: 65, column: 13, scope: !15241)
!15246 = !DILocation(line: 67, column: 14, scope: !15231)
!15247 = !DILocation(line: 67, column: 19, scope: !15231)
!15248 = !DILocation(line: 67, column: 12, scope: !15231)
!15249 = !DILocation(line: 68, column: 7, scope: !15231)
!15250 = !DILocation(line: 71, column: 18, scope: !15251)
!15251 = distinct !DILexicalBlock(scope: !15223, file: !14995, line: 70, column: 7)
!15252 = !DILocation(line: 71, column: 13, scope: !15251)
!15253 = !DILocation(line: 71, column: 16, scope: !15251)
!15254 = !DILocation(line: 72, column: 10, scope: !15251)
!15255 = !DILocation(line: 73, column: 13, scope: !15256)
!15256 = distinct !DILexicalBlock(scope: !15251, file: !14995, line: 73, column: 13)
!15257 = !DILocation(line: 73, column: 18, scope: !15256)
!15258 = !DILocation(line: 73, column: 15, scope: !15256)
!15259 = !DILocation(line: 73, column: 13, scope: !15251)
!15260 = !DILocation(line: 74, column: 11, scope: !15256)
!15261 = !DILocation(line: 75, column: 14, scope: !15251)
!15262 = !DILocation(line: 75, column: 19, scope: !15251)
!15263 = !DILocation(line: 75, column: 12, scope: !15251)
!15264 = !DILocation(line: 56, column: 3, scope: !15224)
!15265 = distinct !{!15265, !15266, !15267}
!15266 = !DILocation(line: 56, column: 3, scope: !15225)
!15267 = !DILocation(line: 76, column: 7, scope: !15225)
!15268 = !DILocation(line: 78, column: 11, scope: !15170)
!15269 = !DILocation(line: 78, column: 3, scope: !15170)
!15270 = !DILocation(line: 78, column: 16, scope: !15170)
!15271 = !DILocation(line: 78, column: 23, scope: !15170)
!15272 = !DILocation(line: 78, column: 21, scope: !15170)
!15273 = !DILocation(line: 78, column: 27, scope: !15170)
!15274 = !DILocation(line: 78, column: 34, scope: !15170)
!15275 = !DILocation(line: 78, column: 32, scope: !15170)
!15276 = !DILocation(line: 78, column: 37, scope: !15170)
!15277 = !DILocation(line: 79, column: 1, scope: !15170)
!15278 = distinct !DISubprogram(name: "nstrftime", scope: !15279, file: !15279, line: 431, type: !15280, scopeLine: 434, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1612, retainedNodes: !152)
!15279 = !DIFile(filename: "lib/nstrftime.c", directory: "/home/mbarbar/software/coreutils-8.31")
!15280 = !DISubroutineType(types: !15281)
!15281 = !{!149, !143, !149, !146, !15282, !15297, !27}
!15282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15283, size: 64)
!15283 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15284)
!15284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !5669, line: 7, size: 448, elements: !15285)
!15285 = !{!15286, !15287, !15288, !15289, !15290, !15291, !15292, !15293, !15294, !15295, !15296}
!15286 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !15284, file: !5669, line: 9, baseType: !27, size: 32)
!15287 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !15284, file: !5669, line: 10, baseType: !27, size: 32, offset: 32)
!15288 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !15284, file: !5669, line: 11, baseType: !27, size: 32, offset: 64)
!15289 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !15284, file: !5669, line: 12, baseType: !27, size: 32, offset: 96)
!15290 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !15284, file: !5669, line: 13, baseType: !27, size: 32, offset: 128)
!15291 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !15284, file: !5669, line: 14, baseType: !27, size: 32, offset: 160)
!15292 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !15284, file: !5669, line: 15, baseType: !27, size: 32, offset: 192)
!15293 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !15284, file: !5669, line: 16, baseType: !27, size: 32, offset: 224)
!15294 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !15284, file: !5669, line: 17, baseType: !27, size: 32, offset: 256)
!15295 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !15284, file: !5669, line: 20, baseType: !166, size: 64, offset: 320)
!15296 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !15284, file: !5669, line: 21, baseType: !146, size: 64, offset: 384)
!15297 = !DIDerivedType(tag: DW_TAG_typedef, name: "timezone_t", file: !257, line: 764, baseType: !15298)
!15298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15299, size: 64)
!15299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm_zone", file: !1738, line: 21, size: 128, elements: !15300)
!15300 = !{!15301, !15302, !15303}
!15301 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !15299, file: !1738, line: 25, baseType: !15298, size: 64)
!15302 = !DIDerivedType(tag: DW_TAG_member, name: "tz_is_set", scope: !15299, file: !1738, line: 36, baseType: !144, size: 8, offset: 64)
!15303 = !DIDerivedType(tag: DW_TAG_member, name: "abbrs", scope: !15299, file: !1738, line: 48, baseType: !469, offset: 72)
!15304 = !DILocalVariable(name: "s", arg: 1, scope: !15278, file: !15279, line: 431, type: !143)
!15305 = !DILocation(line: 431, column: 32, scope: !15278)
!15306 = !DILocalVariable(name: "maxsize", arg: 2, scope: !15278, file: !15279, line: 431, type: !149)
!15307 = !DILocation(line: 431, column: 35, scope: !15278)
!15308 = !DILocalVariable(name: "format", arg: 3, scope: !15278, file: !15279, line: 432, type: !146)
!15309 = !DILocation(line: 432, column: 28, scope: !15278)
!15310 = !DILocalVariable(name: "tp", arg: 4, scope: !15278, file: !15279, line: 433, type: !15282)
!15311 = !DILocation(line: 433, column: 31, scope: !15278)
!15312 = !DILocalVariable(name: "tz", arg: 5, scope: !15278, file: !15279, line: 433, type: !15297)
!15313 = !DILocation(line: 433, column: 34, scope: !15278)
!15314 = !DILocalVariable(name: "ns", arg: 6, scope: !15278, file: !15279, line: 433, type: !27)
!15315 = !DILocalVariable(name: "tzset_called", scope: !15278, file: !15279, line: 435, type: !141)
!15316 = !DILocation(line: 435, column: 8, scope: !15278)
!15317 = !DILocation(line: 436, column: 31, scope: !15278)
!15318 = !DILocation(line: 436, column: 34, scope: !15278)
!15319 = !DILocation(line: 436, column: 57, scope: !15278)
!15320 = !DILocation(line: 436, column: 65, scope: !15278)
!15321 = !DILocation(line: 437, column: 52, scope: !15278)
!15322 = !DILocation(line: 436, column: 10, scope: !15278)
!15323 = !DILocation(line: 436, column: 3, scope: !15278)
!15324 = distinct !DISubprogram(name: "__strftime_internal", scope: !15279, file: !15279, line: 447, type: !15325, scopeLine: 452, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1612, retainedNodes: !152)
!15325 = !DISubroutineType(types: !15326)
!15326 = !{!149, !143, !149, !146, !15282, !141, !27, !27, !4953, !15297, !27}
!15327 = !DILocalVariable(name: "s", arg: 1, scope: !15324, file: !15279, line: 447, type: !143)
!15328 = !DILocation(line: 447, column: 40, scope: !15324)
!15329 = !DILocalVariable(name: "maxsize", arg: 2, scope: !15324, file: !15279, line: 447, type: !149)
!15330 = !DILocation(line: 447, column: 43, scope: !15324)
!15331 = !DILocalVariable(name: "format", arg: 3, scope: !15324, file: !15279, line: 448, type: !146)
!15332 = !DILocation(line: 448, column: 36, scope: !15324)
!15333 = !DILocalVariable(name: "tp", arg: 4, scope: !15324, file: !15279, line: 449, type: !15282)
!15334 = !DILocation(line: 449, column: 39, scope: !15324)
!15335 = !DILocalVariable(name: "upcase", arg: 5, scope: !15324, file: !15279, line: 449, type: !141)
!15336 = !DILocation(line: 449, column: 48, scope: !15324)
!15337 = !DILocalVariable(name: "yr_spec", arg: 6, scope: !15324, file: !15279, line: 450, type: !27)
!15338 = !DILocation(line: 450, column: 26, scope: !15324)
!15339 = !DILocalVariable(name: "width", arg: 7, scope: !15324, file: !15279, line: 450, type: !27)
!15340 = !DILocation(line: 450, column: 39, scope: !15324)
!15341 = !DILocalVariable(name: "tzset_called", arg: 8, scope: !15324, file: !15279, line: 450, type: !4953)
!15342 = !DILocation(line: 450, column: 52, scope: !15324)
!15343 = !DILocalVariable(name: "tz", arg: 9, scope: !15324, file: !15279, line: 451, type: !15297)
!15344 = !DILocation(line: 451, column: 22, scope: !15324)
!15345 = !DILocalVariable(name: "ns", arg: 10, scope: !15324, file: !15279, line: 451, type: !27)
!15346 = !DILocalVariable(name: "hour12", scope: !15324, file: !15279, line: 460, type: !27)
!15347 = !DILocation(line: 460, column: 7, scope: !15324)
!15348 = !DILocation(line: 460, column: 16, scope: !15324)
!15349 = !DILocation(line: 460, column: 20, scope: !15324)
!15350 = !DILocalVariable(name: "zone", scope: !15324, file: !15279, line: 498, type: !146)
!15351 = !DILocation(line: 498, column: 15, scope: !15324)
!15352 = !DILocalVariable(name: "i", scope: !15324, file: !15279, line: 499, type: !149)
!15353 = !DILocation(line: 499, column: 10, scope: !15324)
!15354 = !DILocalVariable(name: "p", scope: !15324, file: !15279, line: 500, type: !143)
!15355 = !DILocation(line: 500, column: 21, scope: !15324)
!15356 = !DILocation(line: 500, column: 25, scope: !15324)
!15357 = !DILocalVariable(name: "f", scope: !15324, file: !15279, line: 501, type: !146)
!15358 = !DILocation(line: 501, column: 17, scope: !15324)
!15359 = !DILocation(line: 515, column: 8, scope: !15324)
!15360 = !DILocation(line: 523, column: 25, scope: !15324)
!15361 = !DILocation(line: 523, column: 29, scope: !15324)
!15362 = !DILocation(line: 523, column: 8, scope: !15324)
!15363 = !DILocation(line: 553, column: 9, scope: !15364)
!15364 = distinct !DILexicalBlock(scope: !15324, file: !15279, line: 553, column: 7)
!15365 = !DILocation(line: 553, column: 7, scope: !15324)
!15366 = !DILocation(line: 554, column: 10, scope: !15364)
!15367 = !DILocation(line: 554, column: 5, scope: !15364)
!15368 = !DILocation(line: 556, column: 7, scope: !15369)
!15369 = distinct !DILexicalBlock(scope: !15324, file: !15279, line: 556, column: 7)
!15370 = !DILocation(line: 556, column: 14, scope: !15369)
!15371 = !DILocation(line: 556, column: 7, scope: !15324)
!15372 = !DILocation(line: 557, column: 12, scope: !15369)
!15373 = !DILocation(line: 557, column: 5, scope: !15369)
!15374 = !DILocation(line: 559, column: 9, scope: !15375)
!15375 = distinct !DILexicalBlock(scope: !15369, file: !15279, line: 559, column: 9)
!15376 = !DILocation(line: 559, column: 16, scope: !15375)
!15377 = !DILocation(line: 559, column: 9, scope: !15369)
!15378 = !DILocation(line: 560, column: 14, scope: !15375)
!15379 = !DILocation(line: 560, column: 7, scope: !15375)
!15380 = !DILocation(line: 562, column: 12, scope: !15381)
!15381 = distinct !DILexicalBlock(scope: !15324, file: !15279, line: 562, column: 3)
!15382 = !DILocation(line: 562, column: 10, scope: !15381)
!15383 = !DILocation(line: 562, column: 8, scope: !15381)
!15384 = !DILocation(line: 562, column: 21, scope: !15385)
!15385 = distinct !DILexicalBlock(scope: !15381, file: !15279, line: 562, column: 3)
!15386 = !DILocation(line: 562, column: 20, scope: !15385)
!15387 = !DILocation(line: 562, column: 23, scope: !15385)
!15388 = !DILocation(line: 562, column: 3, scope: !15381)
!15389 = !DILocalVariable(name: "pad", scope: !15390, file: !15279, line: 564, type: !27)
!15390 = distinct !DILexicalBlock(scope: !15385, file: !15279, line: 563, column: 5)
!15391 = !DILocation(line: 564, column: 11, scope: !15390)
!15392 = !DILocalVariable(name: "modifier", scope: !15390, file: !15279, line: 565, type: !27)
!15393 = !DILocation(line: 565, column: 11, scope: !15390)
!15394 = !DILocalVariable(name: "digits", scope: !15390, file: !15279, line: 566, type: !27)
!15395 = !DILocation(line: 566, column: 11, scope: !15390)
!15396 = !DILocalVariable(name: "number_value", scope: !15390, file: !15279, line: 567, type: !27)
!15397 = !DILocation(line: 567, column: 11, scope: !15390)
!15398 = !DILocalVariable(name: "u_number_value", scope: !15390, file: !15279, line: 568, type: !6)
!15399 = !DILocation(line: 568, column: 20, scope: !15390)
!15400 = !DILocalVariable(name: "negative_number", scope: !15390, file: !15279, line: 569, type: !141)
!15401 = !DILocation(line: 569, column: 12, scope: !15390)
!15402 = !DILocalVariable(name: "always_output_a_sign", scope: !15390, file: !15279, line: 570, type: !141)
!15403 = !DILocation(line: 570, column: 12, scope: !15390)
!15404 = !DILocalVariable(name: "tz_colon_mask", scope: !15390, file: !15279, line: 571, type: !27)
!15405 = !DILocation(line: 571, column: 11, scope: !15390)
!15406 = !DILocalVariable(name: "subfmt", scope: !15390, file: !15279, line: 572, type: !146)
!15407 = !DILocation(line: 572, column: 21, scope: !15390)
!15408 = !DILocalVariable(name: "sign_char", scope: !15390, file: !15279, line: 573, type: !144)
!15409 = !DILocation(line: 573, column: 14, scope: !15390)
!15410 = !DILocalVariable(name: "bufp", scope: !15390, file: !15279, line: 574, type: !143)
!15411 = !DILocation(line: 574, column: 15, scope: !15390)
!15412 = !DILocalVariable(name: "buf", scope: !15390, file: !15279, line: 575, type: !846)
!15413 = !DILocation(line: 575, column: 14, scope: !15390)
!15414 = !DILocalVariable(name: "to_lowcase", scope: !15390, file: !15279, line: 580, type: !141)
!15415 = !DILocation(line: 580, column: 12, scope: !15390)
!15416 = !DILocalVariable(name: "to_uppcase", scope: !15390, file: !15279, line: 581, type: !141)
!15417 = !DILocation(line: 581, column: 12, scope: !15390)
!15418 = !DILocation(line: 581, column: 25, scope: !15390)
!15419 = !DILocalVariable(name: "colons", scope: !15390, file: !15279, line: 582, type: !149)
!15420 = !DILocation(line: 582, column: 14, scope: !15390)
!15421 = !DILocalVariable(name: "change_case", scope: !15390, file: !15279, line: 583, type: !141)
!15422 = !DILocation(line: 583, column: 12, scope: !15390)
!15423 = !DILocalVariable(name: "format_char", scope: !15390, file: !15279, line: 584, type: !27)
!15424 = !DILocation(line: 584, column: 11, scope: !15390)
!15425 = !DILocalVariable(name: "subwidth", scope: !15390, file: !15279, line: 585, type: !27)
!15426 = !DILocation(line: 585, column: 11, scope: !15390)
!15427 = !DILocation(line: 667, column: 12, scope: !15428)
!15428 = distinct !DILexicalBlock(scope: !15390, file: !15279, line: 667, column: 11)
!15429 = !DILocation(line: 667, column: 11, scope: !15428)
!15430 = !DILocation(line: 667, column: 14, scope: !15428)
!15431 = !DILocation(line: 667, column: 11, scope: !15390)
!15432 = !DILocation(line: 669, column: 11, scope: !15433)
!15433 = distinct !DILexicalBlock(scope: !15428, file: !15279, line: 668, column: 9)
!15434 = !DILocalVariable(name: "_n", scope: !15435, file: !15279, line: 669, type: !149)
!15435 = distinct !DILexicalBlock(scope: !15433, file: !15279, line: 669, column: 11)
!15436 = !DILocation(line: 669, column: 11, scope: !15435)
!15437 = !DILocalVariable(name: "_w", scope: !15435, file: !15279, line: 669, type: !149)
!15438 = !DILocalVariable(name: "_incr", scope: !15435, file: !15279, line: 669, type: !149)
!15439 = !DILocation(line: 669, column: 11, scope: !15440)
!15440 = distinct !DILexicalBlock(scope: !15435, file: !15279, line: 669, column: 11)
!15441 = !DILocation(line: 669, column: 11, scope: !15442)
!15442 = distinct !DILexicalBlock(scope: !15435, file: !15279, line: 669, column: 11)
!15443 = !DILocation(line: 669, column: 11, scope: !15444)
!15444 = distinct !DILexicalBlock(scope: !15445, file: !15279, line: 669, column: 11)
!15445 = distinct !DILexicalBlock(scope: !15442, file: !15279, line: 669, column: 11)
!15446 = !DILocation(line: 669, column: 11, scope: !15445)
!15447 = !DILocalVariable(name: "_delta", scope: !15448, file: !15279, line: 669, type: !149)
!15448 = distinct !DILexicalBlock(scope: !15444, file: !15279, line: 669, column: 11)
!15449 = !DILocation(line: 669, column: 11, scope: !15448)
!15450 = !DILocation(line: 669, column: 11, scope: !15451)
!15451 = distinct !DILexicalBlock(scope: !15448, file: !15279, line: 669, column: 11)
!15452 = !DILocation(line: 670, column: 11, scope: !15433)
!15453 = !DILocation(line: 676, column: 7, scope: !15390)
!15454 = !DILocation(line: 678, column: 20, scope: !15455)
!15455 = distinct !DILexicalBlock(scope: !15390, file: !15279, line: 677, column: 9)
!15456 = !DILocation(line: 678, column: 19, scope: !15455)
!15457 = !DILocation(line: 678, column: 11, scope: !15455)
!15458 = !DILocation(line: 685, column: 22, scope: !15459)
!15459 = distinct !DILexicalBlock(scope: !15455, file: !15279, line: 679, column: 13)
!15460 = !DILocation(line: 685, column: 21, scope: !15459)
!15461 = !DILocation(line: 685, column: 19, scope: !15459)
!15462 = !DILocation(line: 686, column: 15, scope: !15459)
!15463 = distinct !{!15463, !15453, !15464}
!15464 = !DILocation(line: 700, column: 9, scope: !15390)
!15465 = !DILocation(line: 690, column: 26, scope: !15459)
!15466 = !DILocation(line: 691, column: 15, scope: !15459)
!15467 = !DILocation(line: 693, column: 27, scope: !15459)
!15468 = !DILocation(line: 694, column: 15, scope: !15459)
!15469 = !DILocation(line: 697, column: 15, scope: !15459)
!15470 = !DILocation(line: 699, column: 11, scope: !15455)
!15471 = !DILocation(line: 702, column: 11, scope: !15472)
!15472 = distinct !DILexicalBlock(scope: !15390, file: !15279, line: 702, column: 11)
!15473 = !DILocation(line: 702, column: 11, scope: !15390)
!15474 = !DILocation(line: 704, column: 17, scope: !15475)
!15475 = distinct !DILexicalBlock(scope: !15472, file: !15279, line: 703, column: 9)
!15476 = !DILocation(line: 705, column: 11, scope: !15475)
!15477 = !DILocation(line: 707, column: 19, scope: !15478)
!15478 = distinct !DILexicalBlock(scope: !15479, file: !15279, line: 707, column: 19)
!15479 = distinct !DILexicalBlock(scope: !15475, file: !15279, line: 706, column: 13)
!15480 = !DILocation(line: 707, column: 25, scope: !15478)
!15481 = !DILocation(line: 708, column: 19, scope: !15478)
!15482 = !DILocation(line: 708, column: 23, scope: !15478)
!15483 = !DILocation(line: 708, column: 29, scope: !15478)
!15484 = !DILocation(line: 708, column: 45, scope: !15478)
!15485 = !DILocation(line: 708, column: 49, scope: !15478)
!15486 = !DILocation(line: 708, column: 48, scope: !15478)
!15487 = !DILocation(line: 708, column: 51, scope: !15478)
!15488 = !DILocation(line: 708, column: 61, scope: !15478)
!15489 = !DILocation(line: 707, column: 19, scope: !15479)
!15490 = !DILocation(line: 710, column: 23, scope: !15478)
!15491 = !DILocation(line: 710, column: 17, scope: !15478)
!15492 = !DILocation(line: 713, column: 25, scope: !15493)
!15493 = distinct !DILexicalBlock(scope: !15478, file: !15279, line: 712, column: 17)
!15494 = !DILocation(line: 714, column: 29, scope: !15493)
!15495 = !DILocation(line: 714, column: 28, scope: !15493)
!15496 = !DILocation(line: 714, column: 31, scope: !15493)
!15497 = !DILocation(line: 714, column: 25, scope: !15493)
!15498 = !DILocation(line: 716, column: 15, scope: !15479)
!15499 = !DILocation(line: 717, column: 13, scope: !15479)
!15500 = !DILocation(line: 718, column: 18, scope: !15475)
!15501 = distinct !{!15501, !15476, !15502}
!15502 = !DILocation(line: 718, column: 30, scope: !15475)
!15503 = !DILocation(line: 719, column: 9, scope: !15475)
!15504 = !DILocation(line: 722, column: 16, scope: !15390)
!15505 = !DILocation(line: 722, column: 15, scope: !15390)
!15506 = !DILocation(line: 722, column: 7, scope: !15390)
!15507 = !DILocation(line: 726, column: 24, scope: !15508)
!15508 = distinct !DILexicalBlock(scope: !15390, file: !15279, line: 723, column: 9)
!15509 = !DILocation(line: 726, column: 22, scope: !15508)
!15510 = !DILocation(line: 726, column: 20, scope: !15508)
!15511 = !DILocation(line: 727, column: 11, scope: !15508)
!15512 = !DILocation(line: 730, column: 20, scope: !15508)
!15513 = !DILocation(line: 731, column: 11, scope: !15508)
!15514 = !DILocation(line: 735, column: 22, scope: !15390)
!15515 = !DILocation(line: 735, column: 21, scope: !15390)
!15516 = !DILocation(line: 735, column: 19, scope: !15390)
!15517 = !DILocation(line: 736, column: 15, scope: !15390)
!15518 = !DILocation(line: 736, column: 7, scope: !15390)
!15519 = !DILocation(line: 782, column: 15, scope: !15520)
!15520 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 782, column: 15)
!15521 = distinct !DILexicalBlock(scope: !15390, file: !15279, line: 737, column: 9)
!15522 = !DILocation(line: 782, column: 24, scope: !15520)
!15523 = !DILocation(line: 782, column: 15, scope: !15521)
!15524 = !DILocation(line: 783, column: 13, scope: !15520)
!15525 = !DILocation(line: 784, column: 11, scope: !15521)
!15526 = !DILocalVariable(name: "_n", scope: !15527, file: !15279, line: 784, type: !149)
!15527 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 784, column: 11)
!15528 = !DILocation(line: 784, column: 11, scope: !15527)
!15529 = !DILocalVariable(name: "_w", scope: !15527, file: !15279, line: 784, type: !149)
!15530 = !DILocalVariable(name: "_incr", scope: !15527, file: !15279, line: 784, type: !149)
!15531 = !DILocation(line: 784, column: 11, scope: !15532)
!15532 = distinct !DILexicalBlock(scope: !15527, file: !15279, line: 784, column: 11)
!15533 = !DILocation(line: 784, column: 11, scope: !15534)
!15534 = distinct !DILexicalBlock(scope: !15527, file: !15279, line: 784, column: 11)
!15535 = !DILocation(line: 784, column: 11, scope: !15536)
!15536 = distinct !DILexicalBlock(scope: !15537, file: !15279, line: 784, column: 11)
!15537 = distinct !DILexicalBlock(scope: !15534, file: !15279, line: 784, column: 11)
!15538 = !DILocation(line: 784, column: 11, scope: !15537)
!15539 = !DILocalVariable(name: "_delta", scope: !15540, file: !15279, line: 784, type: !149)
!15540 = distinct !DILexicalBlock(scope: !15536, file: !15279, line: 784, column: 11)
!15541 = !DILocation(line: 784, column: 11, scope: !15540)
!15542 = !DILocation(line: 784, column: 11, scope: !15543)
!15543 = distinct !DILexicalBlock(scope: !15540, file: !15279, line: 784, column: 11)
!15544 = !DILocation(line: 785, column: 11, scope: !15521)
!15545 = !DILocation(line: 788, column: 15, scope: !15546)
!15546 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 788, column: 15)
!15547 = !DILocation(line: 788, column: 24, scope: !15546)
!15548 = !DILocation(line: 788, column: 15, scope: !15521)
!15549 = !DILocation(line: 789, column: 13, scope: !15546)
!15550 = !DILocation(line: 790, column: 15, scope: !15551)
!15551 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 790, column: 15)
!15552 = !DILocation(line: 790, column: 15, scope: !15521)
!15553 = !DILocation(line: 792, column: 26, scope: !15554)
!15554 = distinct !DILexicalBlock(scope: !15551, file: !15279, line: 791, column: 13)
!15555 = !DILocation(line: 793, column: 26, scope: !15554)
!15556 = !DILocation(line: 794, column: 13, scope: !15554)
!15557 = !DILocation(line: 799, column: 11, scope: !15521)
!15558 = !DILocation(line: 803, column: 15, scope: !15559)
!15559 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 803, column: 15)
!15560 = !DILocation(line: 803, column: 24, scope: !15559)
!15561 = !DILocation(line: 803, column: 15, scope: !15521)
!15562 = !DILocation(line: 804, column: 13, scope: !15559)
!15563 = !DILocation(line: 805, column: 15, scope: !15564)
!15564 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 805, column: 15)
!15565 = !DILocation(line: 805, column: 15, scope: !15521)
!15566 = !DILocation(line: 807, column: 26, scope: !15567)
!15567 = distinct !DILexicalBlock(scope: !15564, file: !15279, line: 806, column: 13)
!15568 = !DILocation(line: 808, column: 26, scope: !15567)
!15569 = !DILocation(line: 809, column: 13, scope: !15567)
!15570 = !DILocation(line: 814, column: 11, scope: !15521)
!15571 = !DILocation(line: 819, column: 15, scope: !15572)
!15572 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 819, column: 15)
!15573 = !DILocation(line: 819, column: 15, scope: !15521)
!15574 = !DILocation(line: 821, column: 26, scope: !15575)
!15575 = distinct !DILexicalBlock(scope: !15572, file: !15279, line: 820, column: 13)
!15576 = !DILocation(line: 822, column: 26, scope: !15575)
!15577 = !DILocation(line: 823, column: 13, scope: !15575)
!15578 = !DILocation(line: 824, column: 15, scope: !15579)
!15579 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 824, column: 15)
!15580 = !DILocation(line: 824, column: 24, scope: !15579)
!15581 = !DILocation(line: 824, column: 15, scope: !15521)
!15582 = !DILocation(line: 825, column: 13, scope: !15579)
!15583 = !DILocation(line: 833, column: 11, scope: !15521)
!15584 = !DILocation(line: 837, column: 15, scope: !15585)
!15585 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 837, column: 15)
!15586 = !DILocation(line: 837, column: 24, scope: !15585)
!15587 = !DILocation(line: 837, column: 15, scope: !15521)
!15588 = !DILocation(line: 838, column: 13, scope: !15585)
!15589 = !DILocation(line: 839, column: 15, scope: !15590)
!15590 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 839, column: 15)
!15591 = !DILocation(line: 839, column: 15, scope: !15521)
!15592 = !DILocation(line: 841, column: 26, scope: !15593)
!15593 = distinct !DILexicalBlock(scope: !15590, file: !15279, line: 840, column: 13)
!15594 = !DILocation(line: 842, column: 26, scope: !15593)
!15595 = !DILocation(line: 843, column: 13, scope: !15593)
!15596 = !DILocation(line: 851, column: 11, scope: !15521)
!15597 = !DILocation(line: 855, column: 15, scope: !15598)
!15598 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 855, column: 15)
!15599 = !DILocation(line: 855, column: 24, scope: !15598)
!15600 = !DILocation(line: 855, column: 15, scope: !15521)
!15601 = !DILocation(line: 856, column: 13, scope: !15598)
!15602 = !DILocation(line: 865, column: 11, scope: !15521)
!15603 = !DILabel(scope: !15521, name: "subformat", file: !15279, line: 868)
!15604 = !DILocation(line: 868, column: 9, scope: !15521)
!15605 = !DILocation(line: 869, column: 20, scope: !15521)
!15606 = !DILocation(line: 869, column: 11, scope: !15521)
!15607 = !DILabel(scope: !15521, name: "subformat_width", file: !15279, line: 870)
!15608 = !DILocation(line: 870, column: 9, scope: !15521)
!15609 = !DILocalVariable(name: "len", scope: !15610, file: !15279, line: 872, type: !149)
!15610 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 871, column: 11)
!15611 = !DILocation(line: 872, column: 20, scope: !15610)
!15612 = !DILocation(line: 873, column: 47, scope: !15610)
!15613 = !DILocation(line: 873, column: 55, scope: !15610)
!15614 = !DILocation(line: 873, column: 59, scope: !15610)
!15615 = !DILocation(line: 874, column: 47, scope: !15610)
!15616 = !DILocation(line: 874, column: 52, scope: !15610)
!15617 = !DILocation(line: 874, column: 62, scope: !15610)
!15618 = !DILocation(line: 875, column: 47, scope: !15610)
!15619 = !DILocation(line: 872, column: 26, scope: !15610)
!15620 = !DILocation(line: 876, column: 13, scope: !15610)
!15621 = !DILocalVariable(name: "_n", scope: !15622, file: !15279, line: 876, type: !149)
!15622 = distinct !DILexicalBlock(scope: !15610, file: !15279, line: 876, column: 13)
!15623 = !DILocation(line: 876, column: 13, scope: !15622)
!15624 = !DILocalVariable(name: "_w", scope: !15622, file: !15279, line: 876, type: !149)
!15625 = !DILocalVariable(name: "_incr", scope: !15622, file: !15279, line: 876, type: !149)
!15626 = !DILocation(line: 876, column: 13, scope: !15627)
!15627 = distinct !DILexicalBlock(scope: !15622, file: !15279, line: 876, column: 13)
!15628 = !DILocation(line: 876, column: 13, scope: !15629)
!15629 = distinct !DILexicalBlock(scope: !15622, file: !15279, line: 876, column: 13)
!15630 = !DILocation(line: 876, column: 13, scope: !15631)
!15631 = distinct !DILexicalBlock(scope: !15632, file: !15279, line: 876, column: 13)
!15632 = distinct !DILexicalBlock(scope: !15629, file: !15279, line: 876, column: 13)
!15633 = !DILocation(line: 876, column: 13, scope: !15632)
!15634 = !DILocalVariable(name: "_delta", scope: !15635, file: !15279, line: 876, type: !149)
!15635 = distinct !DILexicalBlock(scope: !15631, file: !15279, line: 876, column: 13)
!15636 = !DILocation(line: 876, column: 13, scope: !15635)
!15637 = !DILocation(line: 876, column: 13, scope: !15638)
!15638 = distinct !DILexicalBlock(scope: !15635, file: !15279, line: 876, column: 13)
!15639 = !DILocation(line: 882, column: 11, scope: !15521)
!15640 = !DILabel(scope: !15521, name: "underlying_strftime", file: !15279, line: 885)
!15641 = !DILocation(line: 885, column: 9, scope: !15521)
!15642 = !DILocalVariable(name: "ufmt", scope: !15643, file: !15279, line: 889, type: !447)
!15643 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 886, column: 11)
!15644 = !DILocation(line: 889, column: 18, scope: !15643)
!15645 = !DILocalVariable(name: "u", scope: !15643, file: !15279, line: 890, type: !143)
!15646 = !DILocation(line: 890, column: 19, scope: !15643)
!15647 = !DILocation(line: 890, column: 23, scope: !15643)
!15648 = !DILocalVariable(name: "ubuf", scope: !15643, file: !15279, line: 891, type: !1615)
!15649 = !DILocation(line: 891, column: 18, scope: !15643)
!15650 = !DILocalVariable(name: "len", scope: !15643, file: !15279, line: 892, type: !149)
!15651 = !DILocation(line: 892, column: 20, scope: !15643)
!15652 = !DILocation(line: 903, column: 15, scope: !15643)
!15653 = !DILocation(line: 903, column: 18, scope: !15643)
!15654 = !DILocation(line: 904, column: 15, scope: !15643)
!15655 = !DILocation(line: 904, column: 18, scope: !15643)
!15656 = !DILocation(line: 905, column: 17, scope: !15657)
!15657 = distinct !DILexicalBlock(scope: !15643, file: !15279, line: 905, column: 17)
!15658 = !DILocation(line: 905, column: 26, scope: !15657)
!15659 = !DILocation(line: 905, column: 17, scope: !15643)
!15660 = !DILocation(line: 906, column: 22, scope: !15657)
!15661 = !DILocation(line: 906, column: 17, scope: !15657)
!15662 = !DILocation(line: 906, column: 20, scope: !15657)
!15663 = !DILocation(line: 906, column: 15, scope: !15657)
!15664 = !DILocation(line: 907, column: 20, scope: !15643)
!15665 = !DILocation(line: 907, column: 15, scope: !15643)
!15666 = !DILocation(line: 907, column: 18, scope: !15643)
!15667 = !DILocation(line: 908, column: 14, scope: !15643)
!15668 = !DILocation(line: 908, column: 16, scope: !15643)
!15669 = !DILocation(line: 909, column: 29, scope: !15643)
!15670 = !DILocation(line: 909, column: 48, scope: !15643)
!15671 = !DILocation(line: 909, column: 54, scope: !15643)
!15672 = !DILocation(line: 909, column: 19, scope: !15643)
!15673 = !DILocation(line: 909, column: 17, scope: !15643)
!15674 = !DILocation(line: 910, column: 17, scope: !15675)
!15675 = distinct !DILexicalBlock(scope: !15643, file: !15279, line: 910, column: 17)
!15676 = !DILocation(line: 910, column: 21, scope: !15675)
!15677 = !DILocation(line: 910, column: 17, scope: !15643)
!15678 = !DILocation(line: 911, column: 15, scope: !15675)
!15679 = !DILocalVariable(name: "_n", scope: !15680, file: !15279, line: 911, type: !149)
!15680 = distinct !DILexicalBlock(scope: !15675, file: !15279, line: 911, column: 15)
!15681 = !DILocation(line: 911, column: 15, scope: !15680)
!15682 = !DILocalVariable(name: "_w", scope: !15680, file: !15279, line: 911, type: !149)
!15683 = !DILocalVariable(name: "_incr", scope: !15680, file: !15279, line: 911, type: !149)
!15684 = !DILocation(line: 911, column: 15, scope: !15685)
!15685 = distinct !DILexicalBlock(scope: !15680, file: !15279, line: 911, column: 15)
!15686 = !DILocation(line: 911, column: 15, scope: !15687)
!15687 = distinct !DILexicalBlock(scope: !15680, file: !15279, line: 911, column: 15)
!15688 = !DILocation(line: 911, column: 15, scope: !15689)
!15689 = distinct !DILexicalBlock(scope: !15690, file: !15279, line: 911, column: 15)
!15690 = distinct !DILexicalBlock(scope: !15687, file: !15279, line: 911, column: 15)
!15691 = !DILocation(line: 911, column: 15, scope: !15690)
!15692 = !DILocalVariable(name: "_delta", scope: !15693, file: !15279, line: 911, type: !149)
!15693 = distinct !DILexicalBlock(scope: !15689, file: !15279, line: 911, column: 15)
!15694 = !DILocation(line: 911, column: 15, scope: !15693)
!15695 = !DILocation(line: 911, column: 15, scope: !15696)
!15696 = distinct !DILexicalBlock(scope: !15693, file: !15279, line: 911, column: 15)
!15697 = !DILocation(line: 911, column: 15, scope: !15698)
!15698 = distinct !DILexicalBlock(scope: !15690, file: !15279, line: 911, column: 15)
!15699 = !DILocation(line: 911, column: 15, scope: !15700)
!15700 = distinct !DILexicalBlock(scope: !15698, file: !15279, line: 911, column: 15)
!15701 = !DILocation(line: 913, column: 11, scope: !15521)
!15702 = !DILocation(line: 917, column: 15, scope: !15703)
!15703 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 917, column: 15)
!15704 = !DILocation(line: 917, column: 24, scope: !15703)
!15705 = !DILocation(line: 917, column: 15, scope: !15521)
!15706 = !DILocation(line: 933, column: 15, scope: !15707)
!15707 = distinct !DILexicalBlock(scope: !15703, file: !15279, line: 918, column: 13)
!15708 = !DILocalVariable(name: "century", scope: !15709, file: !15279, line: 938, type: !27)
!15709 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 937, column: 11)
!15710 = !DILocation(line: 938, column: 17, scope: !15709)
!15711 = !DILocation(line: 938, column: 27, scope: !15709)
!15712 = !DILocation(line: 938, column: 31, scope: !15709)
!15713 = !DILocation(line: 938, column: 39, scope: !15709)
!15714 = !DILocation(line: 938, column: 45, scope: !15709)
!15715 = !DILocation(line: 939, column: 24, scope: !15709)
!15716 = !DILocation(line: 939, column: 28, scope: !15709)
!15717 = !DILocation(line: 939, column: 36, scope: !15709)
!15718 = !DILocation(line: 939, column: 42, scope: !15709)
!15719 = !DILocation(line: 939, column: 46, scope: !15709)
!15720 = !DILocation(line: 939, column: 53, scope: !15709)
!15721 = !DILocation(line: 939, column: 51, scope: !15709)
!15722 = !DILocation(line: 0, scope: !15709)
!15723 = !DILocation(line: 939, column: 21, scope: !15709)
!15724 = !DILocation(line: 940, column: 13, scope: !15709)
!15725 = !DILocation(line: 940, column: 13, scope: !15726)
!15726 = distinct !DILexicalBlock(scope: !15709, file: !15279, line: 940, column: 13)
!15727 = !DILocation(line: 941, column: 11, scope: !15709)
!15728 = !DILocation(line: 944, column: 15, scope: !15729)
!15729 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 944, column: 15)
!15730 = !DILocation(line: 944, column: 24, scope: !15729)
!15731 = !DILocation(line: 944, column: 15, scope: !15521)
!15732 = !DILocation(line: 945, column: 13, scope: !15729)
!15733 = !DILocation(line: 954, column: 11, scope: !15521)
!15734 = !DILocation(line: 957, column: 15, scope: !15735)
!15735 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 957, column: 15)
!15736 = !DILocation(line: 957, column: 24, scope: !15735)
!15737 = !DILocation(line: 957, column: 15, scope: !15521)
!15738 = !DILocation(line: 958, column: 13, scope: !15735)
!15739 = !DILocation(line: 959, column: 18, scope: !15521)
!15740 = !DILocation(line: 960, column: 11, scope: !15521)
!15741 = !DILocation(line: 963, column: 15, scope: !15742)
!15742 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 963, column: 15)
!15743 = !DILocation(line: 963, column: 24, scope: !15742)
!15744 = !DILocation(line: 963, column: 15, scope: !15521)
!15745 = !DILocation(line: 964, column: 13, scope: !15742)
!15746 = !DILocation(line: 966, column: 11, scope: !15521)
!15747 = !DILocation(line: 966, column: 11, scope: !15748)
!15748 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 966, column: 11)
!15749 = !DILocation(line: 969, column: 15, scope: !15750)
!15750 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 969, column: 15)
!15751 = !DILocation(line: 969, column: 24, scope: !15750)
!15752 = !DILocation(line: 969, column: 15, scope: !15521)
!15753 = !DILocation(line: 970, column: 13, scope: !15750)
!15754 = !DILocation(line: 972, column: 11, scope: !15521)
!15755 = !DILocation(line: 972, column: 11, scope: !15756)
!15756 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 972, column: 11)
!15757 = !DILabel(scope: !15521, name: "do_tz_offset", file: !15279, line: 977)
!15758 = !DILocation(line: 977, column: 9, scope: !15521)
!15759 = !DILocation(line: 978, column: 32, scope: !15521)
!15760 = !DILocation(line: 979, column: 11, scope: !15521)
!15761 = !DILabel(scope: !15521, name: "do_yearish", file: !15279, line: 981)
!15762 = !DILocation(line: 981, column: 9, scope: !15521)
!15763 = !DILocation(line: 982, column: 15, scope: !15764)
!15764 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 982, column: 15)
!15765 = !DILocation(line: 982, column: 19, scope: !15764)
!15766 = !DILocation(line: 982, column: 15, scope: !15521)
!15767 = !DILocation(line: 983, column: 19, scope: !15764)
!15768 = !DILocation(line: 983, column: 17, scope: !15764)
!15769 = !DILocation(line: 983, column: 13, scope: !15764)
!15770 = !DILocation(line: 985, column: 16, scope: !15521)
!15771 = !DILocation(line: 985, column: 20, scope: !15521)
!15772 = !DILocation(line: 986, column: 16, scope: !15521)
!15773 = !DILocation(line: 986, column: 21, scope: !15521)
!15774 = !DILocation(line: 986, column: 28, scope: !15521)
!15775 = !DILocation(line: 986, column: 48, scope: !15521)
!15776 = !DILocation(line: 986, column: 46, scope: !15521)
!15777 = !DILocation(line: 987, column: 20, scope: !15521)
!15778 = !DILocation(line: 987, column: 23, scope: !15521)
!15779 = !DILocation(line: 987, column: 32, scope: !15521)
!15780 = !DILocation(line: 987, column: 30, scope: !15521)
!15781 = !DILocation(line: 0, scope: !15521)
!15782 = !DILocation(line: 985, column: 13, scope: !15521)
!15783 = !DILocation(line: 988, column: 11, scope: !15521)
!15784 = !DILabel(scope: !15521, name: "do_number_spacepad", file: !15279, line: 990)
!15785 = !DILocation(line: 990, column: 9, scope: !15521)
!15786 = !DILocation(line: 991, column: 15, scope: !15787)
!15787 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 991, column: 15)
!15788 = !DILocation(line: 991, column: 19, scope: !15787)
!15789 = !DILocation(line: 991, column: 15, scope: !15521)
!15790 = !DILocation(line: 992, column: 17, scope: !15787)
!15791 = !DILocation(line: 992, column: 13, scope: !15787)
!15792 = !DILocation(line: 991, column: 22, scope: !15787)
!15793 = !DILabel(scope: !15521, name: "do_number", file: !15279, line: 994)
!15794 = !DILocation(line: 994, column: 9, scope: !15521)
!15795 = !DILocation(line: 996, column: 29, scope: !15521)
!15796 = !DILocation(line: 996, column: 42, scope: !15521)
!15797 = !DILocation(line: 996, column: 27, scope: !15521)
!15798 = !DILocation(line: 997, column: 28, scope: !15521)
!15799 = !DILocation(line: 997, column: 26, scope: !15521)
!15800 = !DILocation(line: 997, column: 11, scope: !15521)
!15801 = !DILabel(scope: !15521, name: "do_signed_number", file: !15279, line: 999)
!15802 = !DILocation(line: 999, column: 9, scope: !15521)
!15803 = !DILocation(line: 1000, column: 32, scope: !15521)
!15804 = !DILocation(line: 1000, column: 11, scope: !15521)
!15805 = !DILabel(scope: !15521, name: "do_maybe_signed_number", file: !15279, line: 1002)
!15806 = !DILocation(line: 1002, column: 9, scope: !15521)
!15807 = !DILocation(line: 1003, column: 25, scope: !15521)
!15808 = !DILocation(line: 1003, column: 11, scope: !15521)
!15809 = !DILabel(scope: !15521, name: "do_number_body", file: !15279, line: 1005)
!15810 = !DILocation(line: 1005, column: 9, scope: !15521)
!15811 = !DILocation(line: 1011, column: 15, scope: !15812)
!15812 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1011, column: 15)
!15813 = !DILocation(line: 1011, column: 24, scope: !15812)
!15814 = !DILocation(line: 1011, column: 35, scope: !15812)
!15815 = !DILocation(line: 1011, column: 39, scope: !15812)
!15816 = !DILocation(line: 1011, column: 15, scope: !15521)
!15817 = !DILocation(line: 1029, column: 15, scope: !15818)
!15818 = distinct !DILexicalBlock(scope: !15812, file: !15279, line: 1012, column: 13)
!15819 = !DILocation(line: 1033, column: 18, scope: !15521)
!15820 = !DILocation(line: 1033, column: 22, scope: !15521)
!15821 = !DILocation(line: 1033, column: 16, scope: !15521)
!15822 = !DILocation(line: 1035, column: 15, scope: !15823)
!15823 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1035, column: 15)
!15824 = !DILocation(line: 1035, column: 15, scope: !15521)
!15825 = !DILocation(line: 1036, column: 32, scope: !15823)
!15826 = !DILocation(line: 1036, column: 30, scope: !15823)
!15827 = !DILocation(line: 1036, column: 28, scope: !15823)
!15828 = !DILocation(line: 1036, column: 13, scope: !15823)
!15829 = !DILocation(line: 1038, column: 11, scope: !15521)
!15830 = !DILocation(line: 1040, column: 19, scope: !15831)
!15831 = distinct !DILexicalBlock(scope: !15832, file: !15279, line: 1040, column: 19)
!15832 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1039, column: 13)
!15833 = !DILocation(line: 1040, column: 33, scope: !15831)
!15834 = !DILocation(line: 1040, column: 19, scope: !15832)
!15835 = !DILocation(line: 1041, column: 18, scope: !15831)
!15836 = !DILocation(line: 1041, column: 25, scope: !15831)
!15837 = !DILocation(line: 1041, column: 17, scope: !15831)
!15838 = !DILocation(line: 1042, column: 29, scope: !15832)
!15839 = !DILocation(line: 1043, column: 25, scope: !15832)
!15840 = !DILocation(line: 1043, column: 40, scope: !15832)
!15841 = !DILocation(line: 1043, column: 45, scope: !15832)
!15842 = !DILocation(line: 1043, column: 16, scope: !15832)
!15843 = !DILocation(line: 1043, column: 23, scope: !15832)
!15844 = !DILocation(line: 1044, column: 30, scope: !15832)
!15845 = !DILocation(line: 1045, column: 13, scope: !15832)
!15846 = !DILocation(line: 1046, column: 18, scope: !15521)
!15847 = !DILocation(line: 1046, column: 33, scope: !15521)
!15848 = !DILocation(line: 1046, column: 38, scope: !15521)
!15849 = !DILocation(line: 1046, column: 41, scope: !15521)
!15850 = !DILocation(line: 1046, column: 55, scope: !15521)
!15851 = distinct !{!15851, !15829, !15852}
!15852 = !DILocation(line: 1046, column: 59, scope: !15521)
!15853 = !DILabel(scope: !15521, name: "do_number_sign_and_padding", file: !15279, line: 1048)
!15854 = !DILocation(line: 1048, column: 9, scope: !15521)
!15855 = !DILocation(line: 1049, column: 15, scope: !15856)
!15856 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1049, column: 15)
!15857 = !DILocation(line: 1049, column: 24, scope: !15856)
!15858 = !DILocation(line: 1049, column: 22, scope: !15856)
!15859 = !DILocation(line: 1049, column: 15, scope: !15521)
!15860 = !DILocation(line: 1050, column: 22, scope: !15856)
!15861 = !DILocation(line: 1050, column: 20, scope: !15856)
!15862 = !DILocation(line: 1050, column: 13, scope: !15856)
!15863 = !DILocation(line: 1052, column: 24, scope: !15521)
!15864 = !DILocation(line: 1053, column: 26, scope: !15521)
!15865 = !DILocation(line: 1052, column: 23, scope: !15521)
!15866 = !DILocation(line: 1052, column: 21, scope: !15521)
!15867 = !DILocation(line: 1056, column: 15, scope: !15868)
!15868 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1056, column: 15)
!15869 = !DILocation(line: 1056, column: 19, scope: !15868)
!15870 = !DILocation(line: 1056, column: 15, scope: !15521)
!15871 = !DILocation(line: 1058, column: 19, scope: !15872)
!15872 = distinct !DILexicalBlock(scope: !15873, file: !15279, line: 1058, column: 19)
!15873 = distinct !DILexicalBlock(scope: !15868, file: !15279, line: 1057, column: 13)
!15874 = !DILocation(line: 1058, column: 19, scope: !15873)
!15875 = !DILocation(line: 1059, column: 17, scope: !15872)
!15876 = !DILocalVariable(name: "_n", scope: !15877, file: !15279, line: 1059, type: !149)
!15877 = distinct !DILexicalBlock(scope: !15872, file: !15279, line: 1059, column: 17)
!15878 = !DILocation(line: 1059, column: 17, scope: !15877)
!15879 = !DILocalVariable(name: "_w", scope: !15877, file: !15279, line: 1059, type: !149)
!15880 = !DILocalVariable(name: "_incr", scope: !15877, file: !15279, line: 1059, type: !149)
!15881 = !DILocation(line: 1059, column: 17, scope: !15882)
!15882 = distinct !DILexicalBlock(scope: !15877, file: !15279, line: 1059, column: 17)
!15883 = !DILocation(line: 1059, column: 17, scope: !15884)
!15884 = distinct !DILexicalBlock(scope: !15877, file: !15279, line: 1059, column: 17)
!15885 = !DILocation(line: 1059, column: 17, scope: !15886)
!15886 = distinct !DILexicalBlock(scope: !15887, file: !15279, line: 1059, column: 17)
!15887 = distinct !DILexicalBlock(scope: !15884, file: !15279, line: 1059, column: 17)
!15888 = !DILocation(line: 1059, column: 17, scope: !15887)
!15889 = !DILocalVariable(name: "_delta", scope: !15890, file: !15279, line: 1059, type: !149)
!15890 = distinct !DILexicalBlock(scope: !15886, file: !15279, line: 1059, column: 17)
!15891 = !DILocation(line: 1059, column: 17, scope: !15890)
!15892 = !DILocation(line: 1059, column: 17, scope: !15893)
!15893 = distinct !DILexicalBlock(scope: !15890, file: !15279, line: 1059, column: 17)
!15894 = !DILocation(line: 1060, column: 13, scope: !15873)
!15895 = !DILocalVariable(name: "padding", scope: !15896, file: !15279, line: 1063, type: !27)
!15896 = distinct !DILexicalBlock(scope: !15868, file: !15279, line: 1062, column: 13)
!15897 = !DILocation(line: 1063, column: 19, scope: !15896)
!15898 = !DILocation(line: 1063, column: 29, scope: !15896)
!15899 = !DILocation(line: 1063, column: 39, scope: !15896)
!15900 = !DILocation(line: 1063, column: 43, scope: !15896)
!15901 = !DILocation(line: 1064, column: 41, scope: !15896)
!15902 = !DILocation(line: 1064, column: 39, scope: !15896)
!15903 = !DILocation(line: 1063, column: 36, scope: !15896)
!15904 = !DILocation(line: 1064, column: 51, scope: !15896)
!15905 = !DILocation(line: 1064, column: 50, scope: !15896)
!15906 = !DILocation(line: 1064, column: 49, scope: !15896)
!15907 = !DILocation(line: 1064, column: 47, scope: !15896)
!15908 = !DILocation(line: 1066, column: 19, scope: !15909)
!15909 = distinct !DILexicalBlock(scope: !15896, file: !15279, line: 1066, column: 19)
!15910 = !DILocation(line: 1066, column: 27, scope: !15909)
!15911 = !DILocation(line: 1066, column: 19, scope: !15896)
!15912 = !DILocation(line: 1068, column: 23, scope: !15913)
!15913 = distinct !DILexicalBlock(scope: !15914, file: !15279, line: 1068, column: 23)
!15914 = distinct !DILexicalBlock(scope: !15909, file: !15279, line: 1067, column: 17)
!15915 = !DILocation(line: 1068, column: 27, scope: !15913)
!15916 = !DILocation(line: 1068, column: 23, scope: !15914)
!15917 = !DILocation(line: 1070, column: 36, scope: !15918)
!15918 = distinct !DILexicalBlock(scope: !15919, file: !15279, line: 1070, column: 27)
!15919 = distinct !DILexicalBlock(scope: !15913, file: !15279, line: 1069, column: 21)
!15920 = !DILocation(line: 1070, column: 27, scope: !15918)
!15921 = !DILocation(line: 1070, column: 47, scope: !15918)
!15922 = !DILocation(line: 1070, column: 57, scope: !15918)
!15923 = !DILocation(line: 1070, column: 55, scope: !15918)
!15924 = !DILocation(line: 1070, column: 44, scope: !15918)
!15925 = !DILocation(line: 1070, column: 27, scope: !15919)
!15926 = !DILocation(line: 1071, column: 25, scope: !15918)
!15927 = !DILocation(line: 1073, column: 27, scope: !15928)
!15928 = distinct !DILexicalBlock(scope: !15919, file: !15279, line: 1073, column: 27)
!15929 = !DILocation(line: 1073, column: 27, scope: !15919)
!15930 = !DILocation(line: 1074, column: 25, scope: !15928)
!15931 = !DILocation(line: 1075, column: 28, scope: !15919)
!15932 = !DILocation(line: 1075, column: 25, scope: !15919)
!15933 = !DILocation(line: 1076, column: 31, scope: !15919)
!15934 = !DILocation(line: 1076, column: 39, scope: !15919)
!15935 = !DILocation(line: 1076, column: 37, scope: !15919)
!15936 = !DILocation(line: 1076, column: 49, scope: !15919)
!15937 = !DILocation(line: 1076, column: 57, scope: !15919)
!15938 = !DILocation(line: 1076, column: 55, scope: !15919)
!15939 = !DILocation(line: 1076, column: 29, scope: !15919)
!15940 = !DILocation(line: 1077, column: 27, scope: !15941)
!15941 = distinct !DILexicalBlock(scope: !15919, file: !15279, line: 1077, column: 27)
!15942 = !DILocation(line: 1077, column: 27, scope: !15919)
!15943 = !DILocation(line: 1078, column: 25, scope: !15941)
!15944 = !DILocalVariable(name: "_n", scope: !15945, file: !15279, line: 1078, type: !149)
!15945 = distinct !DILexicalBlock(scope: !15941, file: !15279, line: 1078, column: 25)
!15946 = !DILocation(line: 1078, column: 25, scope: !15945)
!15947 = !DILocalVariable(name: "_w", scope: !15945, file: !15279, line: 1078, type: !149)
!15948 = !DILocalVariable(name: "_incr", scope: !15945, file: !15279, line: 1078, type: !149)
!15949 = !DILocation(line: 1078, column: 25, scope: !15950)
!15950 = distinct !DILexicalBlock(scope: !15945, file: !15279, line: 1078, column: 25)
!15951 = !DILocation(line: 1078, column: 25, scope: !15952)
!15952 = distinct !DILexicalBlock(scope: !15945, file: !15279, line: 1078, column: 25)
!15953 = !DILocation(line: 1078, column: 25, scope: !15954)
!15954 = distinct !DILexicalBlock(scope: !15955, file: !15279, line: 1078, column: 25)
!15955 = distinct !DILexicalBlock(scope: !15952, file: !15279, line: 1078, column: 25)
!15956 = !DILocation(line: 1078, column: 25, scope: !15955)
!15957 = !DILocalVariable(name: "_delta", scope: !15958, file: !15279, line: 1078, type: !149)
!15958 = distinct !DILexicalBlock(scope: !15954, file: !15279, line: 1078, column: 25)
!15959 = !DILocation(line: 1078, column: 25, scope: !15958)
!15960 = !DILocation(line: 1078, column: 25, scope: !15961)
!15961 = distinct !DILexicalBlock(scope: !15958, file: !15279, line: 1078, column: 25)
!15962 = !DILocation(line: 1079, column: 21, scope: !15919)
!15963 = !DILocation(line: 1082, column: 36, scope: !15964)
!15964 = distinct !DILexicalBlock(scope: !15965, file: !15279, line: 1082, column: 27)
!15965 = distinct !DILexicalBlock(scope: !15913, file: !15279, line: 1081, column: 21)
!15966 = !DILocation(line: 1082, column: 27, scope: !15964)
!15967 = !DILocation(line: 1082, column: 46, scope: !15964)
!15968 = !DILocation(line: 1082, column: 56, scope: !15964)
!15969 = !DILocation(line: 1082, column: 54, scope: !15964)
!15970 = !DILocation(line: 1082, column: 43, scope: !15964)
!15971 = !DILocation(line: 1082, column: 27, scope: !15965)
!15972 = !DILocation(line: 1083, column: 25, scope: !15964)
!15973 = !DILocation(line: 1085, column: 27, scope: !15974)
!15974 = distinct !DILexicalBlock(scope: !15965, file: !15279, line: 1085, column: 27)
!15975 = !DILocation(line: 1085, column: 27, scope: !15965)
!15976 = !DILocation(line: 1086, column: 25, scope: !15974)
!15977 = !DILocalVariable(name: "_n", scope: !15978, file: !15279, line: 1086, type: !149)
!15978 = distinct !DILexicalBlock(scope: !15974, file: !15279, line: 1086, column: 25)
!15979 = !DILocation(line: 1086, column: 25, scope: !15978)
!15980 = !DILocalVariable(name: "_w", scope: !15978, file: !15279, line: 1086, type: !149)
!15981 = !DILocalVariable(name: "_incr", scope: !15978, file: !15279, line: 1086, type: !149)
!15982 = !DILocation(line: 1086, column: 25, scope: !15983)
!15983 = distinct !DILexicalBlock(scope: !15978, file: !15279, line: 1086, column: 25)
!15984 = !DILocation(line: 1086, column: 25, scope: !15985)
!15985 = distinct !DILexicalBlock(scope: !15978, file: !15279, line: 1086, column: 25)
!15986 = !DILocation(line: 1086, column: 25, scope: !15987)
!15987 = distinct !DILexicalBlock(scope: !15988, file: !15279, line: 1086, column: 25)
!15988 = distinct !DILexicalBlock(scope: !15985, file: !15279, line: 1086, column: 25)
!15989 = !DILocation(line: 1086, column: 25, scope: !15988)
!15990 = !DILocalVariable(name: "_delta", scope: !15991, file: !15279, line: 1086, type: !149)
!15991 = distinct !DILexicalBlock(scope: !15987, file: !15279, line: 1086, column: 25)
!15992 = !DILocation(line: 1086, column: 25, scope: !15991)
!15993 = !DILocation(line: 1086, column: 25, scope: !15994)
!15994 = distinct !DILexicalBlock(scope: !15991, file: !15279, line: 1086, column: 25)
!15995 = !DILocation(line: 1088, column: 27, scope: !15996)
!15996 = distinct !DILexicalBlock(scope: !15965, file: !15279, line: 1088, column: 27)
!15997 = !DILocation(line: 1088, column: 27, scope: !15965)
!15998 = !DILocation(line: 1089, column: 25, scope: !15996)
!15999 = !DILocation(line: 1090, column: 28, scope: !15965)
!16000 = !DILocation(line: 1090, column: 25, scope: !15965)
!16001 = !DILocation(line: 1091, column: 29, scope: !15965)
!16002 = !DILocation(line: 1093, column: 17, scope: !15914)
!16003 = !DILocation(line: 1096, column: 23, scope: !16004)
!16004 = distinct !DILexicalBlock(scope: !16005, file: !15279, line: 1096, column: 23)
!16005 = distinct !DILexicalBlock(scope: !15909, file: !15279, line: 1095, column: 17)
!16006 = !DILocation(line: 1096, column: 23, scope: !16005)
!16007 = !DILocation(line: 1097, column: 21, scope: !16004)
!16008 = !DILocalVariable(name: "_n", scope: !16009, file: !15279, line: 1097, type: !149)
!16009 = distinct !DILexicalBlock(scope: !16004, file: !15279, line: 1097, column: 21)
!16010 = !DILocation(line: 1097, column: 21, scope: !16009)
!16011 = !DILocalVariable(name: "_w", scope: !16009, file: !15279, line: 1097, type: !149)
!16012 = !DILocalVariable(name: "_incr", scope: !16009, file: !15279, line: 1097, type: !149)
!16013 = !DILocation(line: 1097, column: 21, scope: !16014)
!16014 = distinct !DILexicalBlock(scope: !16009, file: !15279, line: 1097, column: 21)
!16015 = !DILocation(line: 1097, column: 21, scope: !16016)
!16016 = distinct !DILexicalBlock(scope: !16009, file: !15279, line: 1097, column: 21)
!16017 = !DILocation(line: 1097, column: 21, scope: !16018)
!16018 = distinct !DILexicalBlock(scope: !16019, file: !15279, line: 1097, column: 21)
!16019 = distinct !DILexicalBlock(scope: !16016, file: !15279, line: 1097, column: 21)
!16020 = !DILocation(line: 1097, column: 21, scope: !16019)
!16021 = !DILocalVariable(name: "_delta", scope: !16022, file: !15279, line: 1097, type: !149)
!16022 = distinct !DILexicalBlock(scope: !16018, file: !15279, line: 1097, column: 21)
!16023 = !DILocation(line: 1097, column: 21, scope: !16022)
!16024 = !DILocation(line: 1097, column: 21, scope: !16025)
!16025 = distinct !DILexicalBlock(scope: !16022, file: !15279, line: 1097, column: 21)
!16026 = !DILocation(line: 1101, column: 11, scope: !15521)
!16027 = !DILocalVariable(name: "_n", scope: !16028, file: !15279, line: 1101, type: !149)
!16028 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1101, column: 11)
!16029 = !DILocation(line: 1101, column: 11, scope: !16028)
!16030 = !DILocalVariable(name: "_w", scope: !16028, file: !15279, line: 1101, type: !149)
!16031 = !DILocalVariable(name: "_incr", scope: !16028, file: !15279, line: 1101, type: !149)
!16032 = !DILocation(line: 1101, column: 11, scope: !16033)
!16033 = distinct !DILexicalBlock(scope: !16028, file: !15279, line: 1101, column: 11)
!16034 = !DILocation(line: 1101, column: 11, scope: !16035)
!16035 = distinct !DILexicalBlock(scope: !16028, file: !15279, line: 1101, column: 11)
!16036 = !DILocation(line: 1101, column: 11, scope: !16037)
!16037 = distinct !DILexicalBlock(scope: !16038, file: !15279, line: 1101, column: 11)
!16038 = distinct !DILexicalBlock(scope: !16035, file: !15279, line: 1101, column: 11)
!16039 = !DILocation(line: 1101, column: 11, scope: !16038)
!16040 = !DILocalVariable(name: "_delta", scope: !16041, file: !15279, line: 1101, type: !149)
!16041 = distinct !DILexicalBlock(scope: !16037, file: !15279, line: 1101, column: 11)
!16042 = !DILocation(line: 1101, column: 11, scope: !16041)
!16043 = !DILocation(line: 1101, column: 11, scope: !16044)
!16044 = distinct !DILexicalBlock(scope: !16041, file: !15279, line: 1101, column: 11)
!16045 = !DILocation(line: 1101, column: 11, scope: !16046)
!16046 = distinct !DILexicalBlock(scope: !16038, file: !15279, line: 1101, column: 11)
!16047 = !DILocation(line: 1101, column: 11, scope: !16048)
!16048 = distinct !DILexicalBlock(scope: !16046, file: !15279, line: 1101, column: 11)
!16049 = !DILocation(line: 1102, column: 11, scope: !15521)
!16050 = !DILocation(line: 1105, column: 15, scope: !16051)
!16051 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1105, column: 15)
!16052 = !DILocation(line: 1105, column: 24, scope: !16051)
!16053 = !DILocation(line: 1105, column: 15, scope: !15521)
!16054 = !DILocation(line: 1106, column: 13, scope: !16051)
!16055 = !DILocation(line: 1107, column: 15, scope: !16056)
!16056 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1107, column: 15)
!16057 = !DILocation(line: 1107, column: 19, scope: !16056)
!16058 = !DILocation(line: 1107, column: 24, scope: !16056)
!16059 = !DILocation(line: 1107, column: 27, scope: !16056)
!16060 = !DILocation(line: 1107, column: 33, scope: !16056)
!16061 = !DILocation(line: 1107, column: 15, scope: !15521)
!16062 = !DILocation(line: 1109, column: 19, scope: !16063)
!16063 = distinct !DILexicalBlock(scope: !16056, file: !15279, line: 1108, column: 13)
!16064 = !DILocation(line: 1110, column: 24, scope: !16063)
!16065 = !DILocation(line: 1111, column: 13, scope: !16063)
!16066 = !DILocation(line: 1114, column: 26, scope: !16067)
!16067 = distinct !DILexicalBlock(scope: !16056, file: !15279, line: 1113, column: 13)
!16068 = !DILocation(line: 1114, column: 32, scope: !16067)
!16069 = !DILocation(line: 1114, column: 24, scope: !16067)
!16070 = !DILocation(line: 1115, column: 19, scope: !16071)
!16071 = distinct !DILexicalBlock(scope: !16067, file: !15279, line: 1115, column: 19)
!16072 = !DILocation(line: 1115, column: 28, scope: !16071)
!16073 = !DILocation(line: 1115, column: 19, scope: !16067)
!16074 = !DILocation(line: 1116, column: 26, scope: !16071)
!16075 = !DILocation(line: 1116, column: 17, scope: !16071)
!16076 = !DILocation(line: 1118, column: 18, scope: !15521)
!16077 = !DILocation(line: 1119, column: 11, scope: !15521)
!16078 = !DILocation(line: 1122, column: 15, scope: !16079)
!16079 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1122, column: 15)
!16080 = !DILocation(line: 1122, column: 24, scope: !16079)
!16081 = !DILocation(line: 1122, column: 15, scope: !15521)
!16082 = !DILocation(line: 1123, column: 13, scope: !16079)
!16083 = !DILocation(line: 1125, column: 11, scope: !15521)
!16084 = !DILocation(line: 1125, column: 11, scope: !16085)
!16085 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1125, column: 11)
!16086 = !DILocation(line: 1128, column: 15, scope: !16087)
!16087 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1128, column: 15)
!16088 = !DILocation(line: 1128, column: 24, scope: !16087)
!16089 = !DILocation(line: 1128, column: 15, scope: !15521)
!16090 = !DILocation(line: 1129, column: 13, scope: !16087)
!16091 = !DILocation(line: 1131, column: 11, scope: !15521)
!16092 = !DILocation(line: 1131, column: 11, scope: !16093)
!16093 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1131, column: 11)
!16094 = !DILocation(line: 1134, column: 15, scope: !16095)
!16095 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1134, column: 15)
!16096 = !DILocation(line: 1134, column: 24, scope: !16095)
!16097 = !DILocation(line: 1134, column: 15, scope: !15521)
!16098 = !DILocation(line: 1135, column: 13, scope: !16095)
!16099 = !DILocation(line: 1137, column: 11, scope: !15521)
!16100 = !DILocation(line: 1137, column: 11, scope: !16101)
!16101 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1137, column: 11)
!16102 = !DILocation(line: 1140, column: 15, scope: !16103)
!16103 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1140, column: 15)
!16104 = !DILocation(line: 1140, column: 24, scope: !16103)
!16105 = !DILocation(line: 1140, column: 15, scope: !15521)
!16106 = !DILocation(line: 1141, column: 13, scope: !16103)
!16107 = !DILocation(line: 1143, column: 11, scope: !15521)
!16108 = !DILocation(line: 1143, column: 11, scope: !16109)
!16109 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1143, column: 11)
!16110 = !DILocation(line: 1146, column: 15, scope: !16111)
!16111 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1146, column: 15)
!16112 = !DILocation(line: 1146, column: 24, scope: !16111)
!16113 = !DILocation(line: 1146, column: 15, scope: !15521)
!16114 = !DILocation(line: 1147, column: 13, scope: !16111)
!16115 = !DILocation(line: 1149, column: 11, scope: !15521)
!16116 = !DILocation(line: 1149, column: 11, scope: !16117)
!16117 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1149, column: 11)
!16118 = !DILocation(line: 1152, column: 15, scope: !16119)
!16119 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1152, column: 15)
!16120 = !DILocation(line: 1152, column: 24, scope: !16119)
!16121 = !DILocation(line: 1152, column: 15, scope: !15521)
!16122 = !DILocation(line: 1153, column: 13, scope: !16119)
!16123 = !DILocation(line: 1155, column: 11, scope: !15521)
!16124 = !DILocation(line: 1155, column: 11, scope: !16125)
!16125 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1155, column: 11)
!16126 = !DILocation(line: 1158, column: 15, scope: !16127)
!16127 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1158, column: 15)
!16128 = !DILocation(line: 1158, column: 24, scope: !16127)
!16129 = !DILocation(line: 1158, column: 15, scope: !15521)
!16130 = !DILocation(line: 1159, column: 13, scope: !16127)
!16131 = !DILocation(line: 1161, column: 11, scope: !15521)
!16132 = !DILocation(line: 1161, column: 11, scope: !16133)
!16133 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1161, column: 11)
!16134 = !DILocation(line: 1165, column: 15, scope: !16135)
!16135 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1165, column: 15)
!16136 = !DILocation(line: 1165, column: 24, scope: !16135)
!16137 = !DILocation(line: 1165, column: 15, scope: !15521)
!16138 = !DILocation(line: 1166, column: 13, scope: !16135)
!16139 = !DILocation(line: 1168, column: 26, scope: !15521)
!16140 = !DILocation(line: 1168, column: 24, scope: !15521)
!16141 = !DILocation(line: 1169, column: 15, scope: !16142)
!16142 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1169, column: 15)
!16143 = !DILocation(line: 1169, column: 21, scope: !16142)
!16144 = !DILocation(line: 1169, column: 15, scope: !15521)
!16145 = !DILocation(line: 1170, column: 19, scope: !16142)
!16146 = !DILocation(line: 1170, column: 13, scope: !16142)
!16147 = !DILocalVariable(name: "j", scope: !16148, file: !15279, line: 1174, type: !27)
!16148 = distinct !DILexicalBlock(scope: !16142, file: !15279, line: 1172, column: 13)
!16149 = !DILocation(line: 1174, column: 19, scope: !16148)
!16150 = !DILocation(line: 1175, column: 24, scope: !16151)
!16151 = distinct !DILexicalBlock(scope: !16148, file: !15279, line: 1175, column: 15)
!16152 = !DILocation(line: 1175, column: 22, scope: !16151)
!16153 = !DILocation(line: 1175, column: 20, scope: !16151)
!16154 = !DILocation(line: 1175, column: 31, scope: !16155)
!16155 = distinct !DILexicalBlock(scope: !16151, file: !15279, line: 1175, column: 15)
!16156 = !DILocation(line: 1175, column: 33, scope: !16155)
!16157 = !DILocation(line: 1175, column: 15, scope: !16151)
!16158 = !DILocation(line: 1176, column: 30, scope: !16155)
!16159 = !DILocation(line: 1176, column: 17, scope: !16155)
!16160 = !DILocation(line: 1175, column: 39, scope: !16155)
!16161 = !DILocation(line: 1175, column: 15, scope: !16155)
!16162 = distinct !{!16162, !16157, !16163}
!16163 = !DILocation(line: 1176, column: 33, scope: !16151)
!16164 = !DILocation(line: 1179, column: 11, scope: !15521)
!16165 = !DILocation(line: 1179, column: 11, scope: !16166)
!16166 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1179, column: 11)
!16167 = !DILocation(line: 1183, column: 11, scope: !15521)
!16168 = !DILocalVariable(name: "_n", scope: !16169, file: !15279, line: 1183, type: !149)
!16169 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1183, column: 11)
!16170 = !DILocation(line: 1183, column: 11, scope: !16169)
!16171 = !DILocalVariable(name: "_w", scope: !16169, file: !15279, line: 1183, type: !149)
!16172 = !DILocalVariable(name: "_incr", scope: !16169, file: !15279, line: 1183, type: !149)
!16173 = !DILocation(line: 1183, column: 11, scope: !16174)
!16174 = distinct !DILexicalBlock(scope: !16169, file: !15279, line: 1183, column: 11)
!16175 = !DILocation(line: 1183, column: 11, scope: !16176)
!16176 = distinct !DILexicalBlock(scope: !16169, file: !15279, line: 1183, column: 11)
!16177 = !DILocation(line: 1183, column: 11, scope: !16178)
!16178 = distinct !DILexicalBlock(scope: !16179, file: !15279, line: 1183, column: 11)
!16179 = distinct !DILexicalBlock(scope: !16176, file: !15279, line: 1183, column: 11)
!16180 = !DILocation(line: 1183, column: 11, scope: !16179)
!16181 = !DILocalVariable(name: "_delta", scope: !16182, file: !15279, line: 1183, type: !149)
!16182 = distinct !DILexicalBlock(scope: !16178, file: !15279, line: 1183, column: 11)
!16183 = !DILocation(line: 1183, column: 11, scope: !16182)
!16184 = !DILocation(line: 1183, column: 11, scope: !16185)
!16185 = distinct !DILexicalBlock(scope: !16182, file: !15279, line: 1183, column: 11)
!16186 = !DILocation(line: 1184, column: 11, scope: !15521)
!16187 = !DILocation(line: 1187, column: 22, scope: !15521)
!16188 = !DILocation(line: 1189, column: 23, scope: !15521)
!16189 = !DILocation(line: 1191, column: 11, scope: !15521)
!16190 = !DILocation(line: 1193, column: 15, scope: !16191)
!16191 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1193, column: 15)
!16192 = !DILocation(line: 1193, column: 15, scope: !15521)
!16193 = !DILocation(line: 1195, column: 26, scope: !16194)
!16194 = distinct !DILexicalBlock(scope: !16191, file: !15279, line: 1194, column: 13)
!16195 = !DILocation(line: 1196, column: 26, scope: !16194)
!16196 = !DILocation(line: 1197, column: 13, scope: !16194)
!16197 = !DILocation(line: 1202, column: 11, scope: !15521)
!16198 = !DILocation(line: 1206, column: 11, scope: !15521)
!16199 = !DILocation(line: 1206, column: 11, scope: !16200)
!16200 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1206, column: 11)
!16201 = !DILocation(line: 1207, column: 11, scope: !15521)
!16202 = !DILocation(line: 1210, column: 18, scope: !15521)
!16203 = !DILocation(line: 1211, column: 11, scope: !15521)
!16204 = !DILocation(line: 1221, column: 11, scope: !15521)
!16205 = !DILocation(line: 1225, column: 15, scope: !16206)
!16206 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1225, column: 15)
!16207 = !DILocation(line: 1225, column: 24, scope: !16206)
!16208 = !DILocation(line: 1225, column: 15, scope: !15521)
!16209 = !DILocation(line: 1226, column: 13, scope: !16206)
!16210 = !DILocation(line: 1228, column: 11, scope: !15521)
!16211 = !DILocation(line: 1228, column: 11, scope: !16212)
!16212 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1228, column: 11)
!16213 = !DILocalVariable(name: "ltm", scope: !16214, file: !15279, line: 1232, type: !15284)
!16214 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1231, column: 11)
!16215 = !DILocation(line: 1232, column: 23, scope: !16214)
!16216 = !DILocalVariable(name: "t", scope: !16214, file: !15279, line: 1233, type: !162)
!16217 = !DILocation(line: 1233, column: 20, scope: !16214)
!16218 = !DILocation(line: 1235, column: 20, scope: !16214)
!16219 = !DILocation(line: 1235, column: 19, scope: !16214)
!16220 = !DILocation(line: 1236, column: 27, scope: !16214)
!16221 = !DILocation(line: 1236, column: 17, scope: !16214)
!16222 = !DILocation(line: 1236, column: 15, scope: !16214)
!16223 = !DILocation(line: 1241, column: 20, scope: !16214)
!16224 = !DILocation(line: 1241, column: 24, scope: !16214)
!16225 = !DILocation(line: 1241, column: 18, scope: !16214)
!16226 = !DILocation(line: 1242, column: 31, scope: !16214)
!16227 = !DILocation(line: 1242, column: 33, scope: !16214)
!16228 = !DILocation(line: 1242, column: 29, scope: !16214)
!16229 = !DILocation(line: 1244, column: 13, scope: !16214)
!16230 = !DILocalVariable(name: "d", scope: !16231, file: !15279, line: 1246, type: !27)
!16231 = distinct !DILexicalBlock(scope: !16214, file: !15279, line: 1245, column: 15)
!16232 = !DILocation(line: 1246, column: 21, scope: !16231)
!16233 = !DILocation(line: 1246, column: 25, scope: !16231)
!16234 = !DILocation(line: 1246, column: 27, scope: !16231)
!16235 = !DILocation(line: 1247, column: 19, scope: !16231)
!16236 = !DILocation(line: 1248, column: 28, scope: !16231)
!16237 = !DILocation(line: 1248, column: 47, scope: !16231)
!16238 = !DILocation(line: 1248, column: 46, scope: !16231)
!16239 = !DILocation(line: 1248, column: 51, scope: !16231)
!16240 = !DILocation(line: 1248, column: 54, scope: !16231)
!16241 = !DILocation(line: 1248, column: 27, scope: !16231)
!16242 = !DILocation(line: 1248, column: 18, scope: !16231)
!16243 = !DILocation(line: 1248, column: 25, scope: !16231)
!16244 = !DILocation(line: 1249, column: 15, scope: !16231)
!16245 = !DILocation(line: 1250, column: 20, scope: !16214)
!16246 = !DILocation(line: 1250, column: 22, scope: !16214)
!16247 = distinct !{!16247, !16229, !16248}
!16248 = !DILocation(line: 1250, column: 26, scope: !16214)
!16249 = !DILocation(line: 1252, column: 20, scope: !16214)
!16250 = !DILocation(line: 1253, column: 34, scope: !16214)
!16251 = !DILocation(line: 1254, column: 13, scope: !16214)
!16252 = !DILocation(line: 1258, column: 15, scope: !16253)
!16253 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1258, column: 15)
!16254 = !DILocation(line: 1258, column: 24, scope: !16253)
!16255 = !DILocation(line: 1258, column: 15, scope: !15521)
!16256 = !DILocation(line: 1259, column: 13, scope: !16253)
!16257 = !DILocation(line: 1268, column: 11, scope: !15521)
!16258 = !DILocation(line: 1271, column: 18, scope: !15521)
!16259 = !DILocation(line: 1272, column: 11, scope: !15521)
!16260 = !DILocation(line: 1275, column: 11, scope: !15521)
!16261 = !DILocalVariable(name: "_n", scope: !16262, file: !15279, line: 1275, type: !149)
!16262 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1275, column: 11)
!16263 = !DILocation(line: 1275, column: 11, scope: !16262)
!16264 = !DILocalVariable(name: "_w", scope: !16262, file: !15279, line: 1275, type: !149)
!16265 = !DILocalVariable(name: "_incr", scope: !16262, file: !15279, line: 1275, type: !149)
!16266 = !DILocation(line: 1275, column: 11, scope: !16267)
!16267 = distinct !DILexicalBlock(scope: !16262, file: !15279, line: 1275, column: 11)
!16268 = !DILocation(line: 1275, column: 11, scope: !16269)
!16269 = distinct !DILexicalBlock(scope: !16262, file: !15279, line: 1275, column: 11)
!16270 = !DILocation(line: 1275, column: 11, scope: !16271)
!16271 = distinct !DILexicalBlock(scope: !16272, file: !15279, line: 1275, column: 11)
!16272 = distinct !DILexicalBlock(scope: !16269, file: !15279, line: 1275, column: 11)
!16273 = !DILocation(line: 1275, column: 11, scope: !16272)
!16274 = !DILocalVariable(name: "_delta", scope: !16275, file: !15279, line: 1275, type: !149)
!16275 = distinct !DILexicalBlock(scope: !16271, file: !15279, line: 1275, column: 11)
!16276 = !DILocation(line: 1275, column: 11, scope: !16275)
!16277 = !DILocation(line: 1275, column: 11, scope: !16278)
!16278 = distinct !DILexicalBlock(scope: !16275, file: !15279, line: 1275, column: 11)
!16279 = !DILocation(line: 1276, column: 11, scope: !15521)
!16280 = !DILocation(line: 1279, column: 11, scope: !15521)
!16281 = !DILocation(line: 1279, column: 11, scope: !16282)
!16282 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1279, column: 11)
!16283 = !DILocation(line: 1282, column: 15, scope: !16284)
!16284 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1282, column: 15)
!16285 = !DILocation(line: 1282, column: 24, scope: !16284)
!16286 = !DILocation(line: 1282, column: 15, scope: !15521)
!16287 = !DILocation(line: 1283, column: 13, scope: !16284)
!16288 = !DILocation(line: 1285, column: 11, scope: !15521)
!16289 = !DILocation(line: 1285, column: 11, scope: !16290)
!16290 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1285, column: 11)
!16291 = !DILocation(line: 1290, column: 15, scope: !16292)
!16292 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1290, column: 15)
!16293 = !DILocation(line: 1290, column: 24, scope: !16292)
!16294 = !DILocation(line: 1290, column: 15, scope: !15521)
!16295 = !DILocation(line: 1291, column: 13, scope: !16292)
!16296 = !DILocalVariable(name: "year", scope: !16297, file: !15279, line: 1297, type: !27)
!16297 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1292, column: 11)
!16298 = !DILocation(line: 1297, column: 17, scope: !16297)
!16299 = !DILocation(line: 1297, column: 25, scope: !16297)
!16300 = !DILocation(line: 1297, column: 29, scope: !16297)
!16301 = !DILocation(line: 1298, column: 28, scope: !16297)
!16302 = !DILocation(line: 1298, column: 32, scope: !16297)
!16303 = !DILocation(line: 1298, column: 40, scope: !16297)
!16304 = !DILocation(line: 1298, column: 25, scope: !16297)
!16305 = !DILocalVariable(name: "year_adjust", scope: !16297, file: !15279, line: 1301, type: !27)
!16306 = !DILocation(line: 1301, column: 17, scope: !16297)
!16307 = !DILocalVariable(name: "days", scope: !16297, file: !15279, line: 1302, type: !27)
!16308 = !DILocation(line: 1302, column: 17, scope: !16297)
!16309 = !DILocation(line: 1302, column: 39, scope: !16297)
!16310 = !DILocation(line: 1302, column: 43, scope: !16297)
!16311 = !DILocation(line: 1302, column: 52, scope: !16297)
!16312 = !DILocation(line: 1302, column: 56, scope: !16297)
!16313 = !DILocation(line: 1302, column: 24, scope: !16297)
!16314 = !DILocation(line: 1304, column: 17, scope: !16315)
!16315 = distinct !DILexicalBlock(scope: !16297, file: !15279, line: 1304, column: 17)
!16316 = !DILocation(line: 1304, column: 22, scope: !16315)
!16317 = !DILocation(line: 1304, column: 17, scope: !16297)
!16318 = !DILocation(line: 1307, column: 29, scope: !16319)
!16319 = distinct !DILexicalBlock(scope: !16315, file: !15279, line: 1305, column: 15)
!16320 = !DILocation(line: 1308, column: 39, scope: !16319)
!16321 = !DILocation(line: 1308, column: 43, scope: !16319)
!16322 = !DILocation(line: 1308, column: 60, scope: !16319)
!16323 = !DILocation(line: 0, scope: !16319)
!16324 = !DILocation(line: 1308, column: 58, scope: !16319)
!16325 = !DILocation(line: 1308, column: 51, scope: !16319)
!16326 = !DILocation(line: 1309, column: 39, scope: !16319)
!16327 = !DILocation(line: 1309, column: 43, scope: !16319)
!16328 = !DILocation(line: 1308, column: 24, scope: !16319)
!16329 = !DILocation(line: 1308, column: 22, scope: !16319)
!16330 = !DILocation(line: 1310, column: 15, scope: !16319)
!16331 = !DILocalVariable(name: "d", scope: !16332, file: !15279, line: 1313, type: !27)
!16332 = distinct !DILexicalBlock(scope: !16315, file: !15279, line: 1312, column: 15)
!16333 = !DILocation(line: 1313, column: 21, scope: !16332)
!16334 = !DILocation(line: 1313, column: 40, scope: !16332)
!16335 = !DILocation(line: 1313, column: 44, scope: !16332)
!16336 = !DILocation(line: 1313, column: 61, scope: !16332)
!16337 = !DILocation(line: 0, scope: !16332)
!16338 = !DILocation(line: 1313, column: 59, scope: !16332)
!16339 = !DILocation(line: 1313, column: 52, scope: !16332)
!16340 = !DILocation(line: 1314, column: 40, scope: !16332)
!16341 = !DILocation(line: 1314, column: 44, scope: !16332)
!16342 = !DILocation(line: 1313, column: 25, scope: !16332)
!16343 = !DILocation(line: 1315, column: 26, scope: !16344)
!16344 = distinct !DILexicalBlock(scope: !16332, file: !15279, line: 1315, column: 21)
!16345 = !DILocation(line: 1315, column: 23, scope: !16344)
!16346 = !DILocation(line: 1315, column: 21, scope: !16332)
!16347 = !DILocation(line: 1318, column: 33, scope: !16348)
!16348 = distinct !DILexicalBlock(scope: !16344, file: !15279, line: 1316, column: 19)
!16349 = !DILocation(line: 1319, column: 28, scope: !16348)
!16350 = !DILocation(line: 1319, column: 26, scope: !16348)
!16351 = !DILocation(line: 1320, column: 19, scope: !16348)
!16352 = !DILocation(line: 1323, column: 22, scope: !16297)
!16353 = !DILocation(line: 1323, column: 21, scope: !16297)
!16354 = !DILocation(line: 1323, column: 13, scope: !16297)
!16355 = !DILocalVariable(name: "yy", scope: !16356, file: !15279, line: 1327, type: !27)
!16356 = distinct !DILexicalBlock(scope: !16357, file: !15279, line: 1326, column: 17)
!16357 = distinct !DILexicalBlock(scope: !16297, file: !15279, line: 1324, column: 15)
!16358 = !DILocation(line: 1327, column: 23, scope: !16356)
!16359 = !DILocation(line: 1327, column: 29, scope: !16356)
!16360 = !DILocation(line: 1327, column: 33, scope: !16356)
!16361 = !DILocation(line: 1327, column: 41, scope: !16356)
!16362 = !DILocation(line: 1327, column: 49, scope: !16356)
!16363 = !DILocation(line: 1327, column: 47, scope: !16356)
!16364 = !DILocation(line: 1327, column: 62, scope: !16356)
!16365 = !DILocation(line: 1328, column: 19, scope: !16356)
!16366 = !DILocation(line: 1328, column: 19, scope: !16367)
!16367 = distinct !DILexicalBlock(scope: !16356, file: !15279, line: 1328, column: 19)
!16368 = !DILocation(line: 1334, column: 17, scope: !16356)
!16369 = !DILocation(line: 1337, column: 17, scope: !16357)
!16370 = !DILocation(line: 1337, column: 17, scope: !16371)
!16371 = distinct !DILexicalBlock(scope: !16357, file: !15279, line: 1337, column: 17)
!16372 = !DILocation(line: 1342, column: 17, scope: !16357)
!16373 = !DILocation(line: 1342, column: 17, scope: !16374)
!16374 = distinct !DILexicalBlock(scope: !16357, file: !15279, line: 1342, column: 17)
!16375 = !DILocation(line: 1343, column: 15, scope: !16357)
!16376 = !DILocation(line: 1344, column: 11, scope: !16297)
!16377 = !DILocation(line: 1347, column: 15, scope: !16378)
!16378 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1347, column: 15)
!16379 = !DILocation(line: 1347, column: 24, scope: !16378)
!16380 = !DILocation(line: 1347, column: 15, scope: !15521)
!16381 = !DILocation(line: 1348, column: 13, scope: !16378)
!16382 = !DILocation(line: 1350, column: 11, scope: !15521)
!16383 = !DILocation(line: 1350, column: 11, scope: !16384)
!16384 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1350, column: 11)
!16385 = !DILocation(line: 1353, column: 15, scope: !16386)
!16386 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1353, column: 15)
!16387 = !DILocation(line: 1353, column: 24, scope: !16386)
!16388 = !DILocation(line: 1353, column: 15, scope: !15521)
!16389 = !DILocation(line: 1354, column: 13, scope: !16386)
!16390 = !DILocation(line: 1356, column: 11, scope: !15521)
!16391 = !DILocation(line: 1356, column: 11, scope: !16392)
!16392 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1356, column: 11)
!16393 = !DILocation(line: 1359, column: 15, scope: !16394)
!16394 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1359, column: 15)
!16395 = !DILocation(line: 1359, column: 24, scope: !16394)
!16396 = !DILocation(line: 1359, column: 15, scope: !15521)
!16397 = !DILocation(line: 1375, column: 15, scope: !16398)
!16398 = distinct !DILexicalBlock(scope: !16394, file: !15279, line: 1360, column: 13)
!16399 = !DILocation(line: 1378, column: 15, scope: !16400)
!16400 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1378, column: 15)
!16401 = !DILocation(line: 1378, column: 24, scope: !16400)
!16402 = !DILocation(line: 1378, column: 15, scope: !15521)
!16403 = !DILocation(line: 1379, column: 13, scope: !16400)
!16404 = !DILocation(line: 1381, column: 11, scope: !15521)
!16405 = !DILocation(line: 1381, column: 11, scope: !16406)
!16406 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1381, column: 11)
!16407 = !DILocation(line: 1385, column: 15, scope: !16408)
!16408 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1385, column: 15)
!16409 = !DILocation(line: 1385, column: 24, scope: !16408)
!16410 = !DILocation(line: 1385, column: 15, scope: !15521)
!16411 = !DILocation(line: 1398, column: 15, scope: !16412)
!16412 = distinct !DILexicalBlock(scope: !16408, file: !15279, line: 1386, column: 13)
!16413 = !DILocalVariable(name: "yy", scope: !16414, file: !15279, line: 1403, type: !27)
!16414 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1402, column: 11)
!16415 = !DILocation(line: 1403, column: 17, scope: !16414)
!16416 = !DILocation(line: 1403, column: 22, scope: !16414)
!16417 = !DILocation(line: 1403, column: 26, scope: !16414)
!16418 = !DILocation(line: 1403, column: 34, scope: !16414)
!16419 = !DILocation(line: 1404, column: 17, scope: !16420)
!16420 = distinct !DILexicalBlock(scope: !16414, file: !15279, line: 1404, column: 17)
!16421 = !DILocation(line: 1404, column: 20, scope: !16420)
!16422 = !DILocation(line: 1404, column: 17, scope: !16414)
!16423 = !DILocation(line: 1405, column: 20, scope: !16420)
!16424 = !DILocation(line: 1405, column: 24, scope: !16420)
!16425 = !DILocation(line: 1405, column: 32, scope: !16420)
!16426 = !DILocation(line: 1405, column: 52, scope: !16420)
!16427 = !DILocation(line: 1405, column: 51, scope: !16420)
!16428 = !DILocation(line: 1405, column: 57, scope: !16420)
!16429 = !DILocation(line: 1405, column: 60, scope: !16420)
!16430 = !DILocation(line: 1405, column: 18, scope: !16420)
!16431 = !DILocation(line: 1405, column: 15, scope: !16420)
!16432 = !DILocation(line: 1406, column: 13, scope: !16414)
!16433 = !DILocation(line: 1406, column: 13, scope: !16434)
!16434 = distinct !DILexicalBlock(scope: !16414, file: !15279, line: 1406, column: 13)
!16435 = !DILocation(line: 1407, column: 11, scope: !16414)
!16436 = !DILocation(line: 1410, column: 15, scope: !16437)
!16437 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1410, column: 15)
!16438 = !DILocation(line: 1410, column: 15, scope: !15521)
!16439 = !DILocation(line: 1412, column: 26, scope: !16440)
!16440 = distinct !DILexicalBlock(scope: !16437, file: !15279, line: 1411, column: 13)
!16441 = !DILocation(line: 1413, column: 26, scope: !16440)
!16442 = !DILocation(line: 1414, column: 13, scope: !16440)
!16443 = !DILocation(line: 1426, column: 11, scope: !15521)
!16444 = !DILocalVariable(name: "_n", scope: !16445, file: !15279, line: 1426, type: !149)
!16445 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1426, column: 11)
!16446 = !DILocation(line: 1426, column: 11, scope: !16445)
!16447 = !DILocalVariable(name: "_w", scope: !16445, file: !15279, line: 1426, type: !149)
!16448 = !DILocalVariable(name: "_incr", scope: !16445, file: !15279, line: 1426, type: !149)
!16449 = !DILocation(line: 1426, column: 11, scope: !16450)
!16450 = distinct !DILexicalBlock(scope: !16445, file: !15279, line: 1426, column: 11)
!16451 = !DILocation(line: 1426, column: 11, scope: !16452)
!16452 = distinct !DILexicalBlock(scope: !16445, file: !15279, line: 1426, column: 11)
!16453 = !DILocation(line: 1426, column: 11, scope: !16454)
!16454 = distinct !DILexicalBlock(scope: !16455, file: !15279, line: 1426, column: 11)
!16455 = distinct !DILexicalBlock(scope: !16452, file: !15279, line: 1426, column: 11)
!16456 = !DILocation(line: 1426, column: 11, scope: !16455)
!16457 = !DILocalVariable(name: "_delta", scope: !16458, file: !15279, line: 1426, type: !149)
!16458 = distinct !DILexicalBlock(scope: !16454, file: !15279, line: 1426, column: 11)
!16459 = !DILocation(line: 1426, column: 11, scope: !16458)
!16460 = !DILocation(line: 1426, column: 11, scope: !16461)
!16461 = distinct !DILexicalBlock(scope: !16458, file: !15279, line: 1426, column: 11)
!16462 = !DILocation(line: 1426, column: 11, scope: !16463)
!16463 = distinct !DILexicalBlock(scope: !16455, file: !15279, line: 1426, column: 11)
!16464 = !DILocation(line: 1426, column: 11, scope: !16465)
!16465 = distinct !DILexicalBlock(scope: !16463, file: !15279, line: 1426, column: 11)
!16466 = !DILocation(line: 1428, column: 11, scope: !15521)
!16467 = !DILocation(line: 1433, column: 23, scope: !16468)
!16468 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1433, column: 11)
!16469 = !DILocation(line: 1433, column: 16, scope: !16468)
!16470 = !DILocation(line: 1433, column: 28, scope: !16471)
!16471 = distinct !DILexicalBlock(scope: !16468, file: !15279, line: 1433, column: 11)
!16472 = !DILocation(line: 1433, column: 30, scope: !16471)
!16473 = !DILocation(line: 1433, column: 38, scope: !16471)
!16474 = !DILocation(line: 1433, column: 11, scope: !16468)
!16475 = !DILocation(line: 1434, column: 13, scope: !16471)
!16476 = !DILocation(line: 1433, column: 56, scope: !16471)
!16477 = !DILocation(line: 1433, column: 11, scope: !16471)
!16478 = distinct !{!16478, !16474, !16479}
!16479 = !DILocation(line: 1434, column: 13, scope: !16468)
!16480 = !DILocation(line: 1435, column: 15, scope: !16481)
!16481 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1435, column: 15)
!16482 = !DILocation(line: 1435, column: 17, scope: !16481)
!16483 = !DILocation(line: 1435, column: 25, scope: !16481)
!16484 = !DILocation(line: 1435, column: 15, scope: !15521)
!16485 = !DILocation(line: 1436, column: 13, scope: !16481)
!16486 = !DILocation(line: 1437, column: 16, scope: !15521)
!16487 = !DILocation(line: 1437, column: 13, scope: !15521)
!16488 = !DILocation(line: 1438, column: 11, scope: !15521)
!16489 = !DILocation(line: 1441, column: 18, scope: !15521)
!16490 = !DILocation(line: 1441, column: 11, scope: !15521)
!16491 = !DILabel(scope: !15521, name: "do_z_conversion", file: !15279, line: 1443)
!16492 = !DILocation(line: 1443, column: 9, scope: !15521)
!16493 = !DILocation(line: 1444, column: 15, scope: !16494)
!16494 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1444, column: 15)
!16495 = !DILocation(line: 1444, column: 19, scope: !16494)
!16496 = !DILocation(line: 1444, column: 28, scope: !16494)
!16497 = !DILocation(line: 1444, column: 15, scope: !15521)
!16498 = !DILocation(line: 1445, column: 13, scope: !16494)
!16499 = !DILocalVariable(name: "diff", scope: !16500, file: !15279, line: 1448, type: !27)
!16500 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1447, column: 11)
!16501 = !DILocation(line: 1448, column: 17, scope: !16500)
!16502 = !DILocalVariable(name: "hour_diff", scope: !16500, file: !15279, line: 1449, type: !27)
!16503 = !DILocation(line: 1449, column: 17, scope: !16500)
!16504 = !DILocalVariable(name: "min_diff", scope: !16500, file: !15279, line: 1450, type: !27)
!16505 = !DILocation(line: 1450, column: 17, scope: !16500)
!16506 = !DILocalVariable(name: "sec_diff", scope: !16500, file: !15279, line: 1451, type: !27)
!16507 = !DILocation(line: 1451, column: 17, scope: !16500)
!16508 = !DILocation(line: 1453, column: 20, scope: !16500)
!16509 = !DILocation(line: 1453, column: 24, scope: !16500)
!16510 = !DILocation(line: 1453, column: 18, scope: !16500)
!16511 = !DILocation(line: 1482, column: 31, scope: !16500)
!16512 = !DILocation(line: 1482, column: 36, scope: !16500)
!16513 = !DILocation(line: 1482, column: 40, scope: !16500)
!16514 = !DILocation(line: 1482, column: 44, scope: !16500)
!16515 = !DILocation(line: 1482, column: 49, scope: !16500)
!16516 = !DILocation(line: 1482, column: 54, scope: !16500)
!16517 = !DILocation(line: 1482, column: 58, scope: !16500)
!16518 = !DILocation(line: 1482, column: 57, scope: !16500)
!16519 = !DILocation(line: 1482, column: 63, scope: !16500)
!16520 = !DILocation(line: 0, scope: !16500)
!16521 = !DILocation(line: 1482, column: 29, scope: !16500)
!16522 = !DILocation(line: 1483, column: 25, scope: !16500)
!16523 = !DILocation(line: 1483, column: 30, scope: !16500)
!16524 = !DILocation(line: 1483, column: 35, scope: !16500)
!16525 = !DILocation(line: 1483, column: 23, scope: !16500)
!16526 = !DILocation(line: 1484, column: 24, scope: !16500)
!16527 = !DILocation(line: 1484, column: 29, scope: !16500)
!16528 = !DILocation(line: 1484, column: 34, scope: !16500)
!16529 = !DILocation(line: 1484, column: 22, scope: !16500)
!16530 = !DILocation(line: 1485, column: 24, scope: !16500)
!16531 = !DILocation(line: 1485, column: 29, scope: !16500)
!16532 = !DILocation(line: 1485, column: 22, scope: !16500)
!16533 = !DILocation(line: 1487, column: 21, scope: !16500)
!16534 = !DILocation(line: 1487, column: 13, scope: !16500)
!16535 = !DILocation(line: 1490, column: 17, scope: !16536)
!16536 = distinct !DILexicalBlock(scope: !16500, file: !15279, line: 1488, column: 15)
!16537 = !DILocation(line: 1490, column: 17, scope: !16538)
!16538 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1490, column: 17)
!16539 = !DILabel(scope: !16536, name: "tz_hh_mm", file: !15279, line: 1492)
!16540 = !DILocation(line: 1492, column: 23, scope: !16536)
!16541 = !DILocation(line: 1493, column: 17, scope: !16536)
!16542 = !DILocation(line: 1493, column: 17, scope: !16543)
!16543 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1493, column: 17)
!16544 = !DILabel(scope: !16536, name: "tz_hh_mm_ss", file: !15279, line: 1495)
!16545 = !DILocation(line: 1495, column: 23, scope: !16536)
!16546 = !DILocation(line: 1496, column: 17, scope: !16536)
!16547 = !DILocation(line: 1496, column: 17, scope: !16548)
!16548 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1496, column: 17)
!16549 = !DILocation(line: 1500, column: 21, scope: !16550)
!16550 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1500, column: 21)
!16551 = !DILocation(line: 1500, column: 30, scope: !16550)
!16552 = !DILocation(line: 1500, column: 21, scope: !16536)
!16553 = !DILocation(line: 1501, column: 19, scope: !16550)
!16554 = !DILocation(line: 1502, column: 21, scope: !16555)
!16555 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1502, column: 21)
!16556 = !DILocation(line: 1502, column: 30, scope: !16555)
!16557 = !DILocation(line: 1502, column: 21, scope: !16536)
!16558 = !DILocation(line: 1503, column: 19, scope: !16555)
!16559 = !DILocation(line: 1504, column: 17, scope: !16536)
!16560 = !DILocation(line: 1504, column: 17, scope: !16561)
!16561 = distinct !DILexicalBlock(scope: !16536, file: !15279, line: 1504, column: 17)
!16562 = !DILocation(line: 1507, column: 17, scope: !16536)
!16563 = !DILocation(line: 1512, column: 13, scope: !15521)
!16564 = !DILocation(line: 1513, column: 13, scope: !15521)
!16565 = !DILabel(scope: !15521, name: "bad_format", file: !15279, line: 1518)
!16566 = !DILocation(line: 1518, column: 9, scope: !15521)
!16567 = !DILocalVariable(name: "flen", scope: !16568, file: !15279, line: 1520, type: !27)
!16568 = distinct !DILexicalBlock(scope: !15521, file: !15279, line: 1519, column: 11)
!16569 = !DILocation(line: 1520, column: 17, scope: !16568)
!16570 = !DILocation(line: 1521, column: 23, scope: !16571)
!16571 = distinct !DILexicalBlock(scope: !16568, file: !15279, line: 1521, column: 13)
!16572 = !DILocation(line: 1521, column: 18, scope: !16571)
!16573 = !DILocation(line: 1521, column: 28, scope: !16574)
!16574 = distinct !DILexicalBlock(scope: !16571, file: !15279, line: 1521, column: 13)
!16575 = !DILocation(line: 1521, column: 34, scope: !16574)
!16576 = !DILocation(line: 1521, column: 32, scope: !16574)
!16577 = !DILocation(line: 1521, column: 40, scope: !16574)
!16578 = !DILocation(line: 1521, column: 13, scope: !16571)
!16579 = !DILocation(line: 1522, column: 15, scope: !16574)
!16580 = !DILocation(line: 1521, column: 56, scope: !16574)
!16581 = !DILocation(line: 1521, column: 13, scope: !16574)
!16582 = distinct !{!16582, !16578, !16583}
!16583 = !DILocation(line: 1522, column: 15, scope: !16571)
!16584 = !DILocation(line: 1523, column: 13, scope: !16568)
!16585 = !DILocalVariable(name: "_n", scope: !16586, file: !15279, line: 1523, type: !149)
!16586 = distinct !DILexicalBlock(scope: !16568, file: !15279, line: 1523, column: 13)
!16587 = !DILocation(line: 1523, column: 13, scope: !16586)
!16588 = !DILocalVariable(name: "_w", scope: !16586, file: !15279, line: 1523, type: !149)
!16589 = !DILocalVariable(name: "_incr", scope: !16586, file: !15279, line: 1523, type: !149)
!16590 = !DILocation(line: 1523, column: 13, scope: !16591)
!16591 = distinct !DILexicalBlock(scope: !16586, file: !15279, line: 1523, column: 13)
!16592 = !DILocation(line: 1523, column: 13, scope: !16593)
!16593 = distinct !DILexicalBlock(scope: !16586, file: !15279, line: 1523, column: 13)
!16594 = !DILocation(line: 1523, column: 13, scope: !16595)
!16595 = distinct !DILexicalBlock(scope: !16596, file: !15279, line: 1523, column: 13)
!16596 = distinct !DILexicalBlock(scope: !16593, file: !15279, line: 1523, column: 13)
!16597 = !DILocation(line: 1523, column: 13, scope: !16596)
!16598 = !DILocalVariable(name: "_delta", scope: !16599, file: !15279, line: 1523, type: !149)
!16599 = distinct !DILexicalBlock(scope: !16595, file: !15279, line: 1523, column: 13)
!16600 = !DILocation(line: 1523, column: 13, scope: !16599)
!16601 = !DILocation(line: 1523, column: 13, scope: !16602)
!16602 = distinct !DILexicalBlock(scope: !16599, file: !15279, line: 1523, column: 13)
!16603 = !DILocation(line: 1523, column: 13, scope: !16604)
!16604 = distinct !DILexicalBlock(scope: !16596, file: !15279, line: 1523, column: 13)
!16605 = !DILocation(line: 1523, column: 13, scope: !16606)
!16606 = distinct !DILexicalBlock(scope: !16604, file: !15279, line: 1523, column: 13)
!16607 = !DILocation(line: 1525, column: 11, scope: !15521)
!16608 = !DILocation(line: 1527, column: 5, scope: !15390)
!16609 = !DILocation(line: 562, column: 38, scope: !15385)
!16610 = !DILocation(line: 562, column: 45, scope: !15385)
!16611 = !DILocation(line: 562, column: 3, scope: !15385)
!16612 = distinct !{!16612, !15388, !16613}
!16613 = !DILocation(line: 1527, column: 5, scope: !15381)
!16614 = !DILocation(line: 1530, column: 7, scope: !16615)
!16615 = distinct !DILexicalBlock(scope: !15324, file: !15279, line: 1530, column: 7)
!16616 = !DILocation(line: 1530, column: 9, scope: !16615)
!16617 = !DILocation(line: 1530, column: 12, scope: !16615)
!16618 = !DILocation(line: 1530, column: 20, scope: !16615)
!16619 = !DILocation(line: 1530, column: 7, scope: !15324)
!16620 = !DILocation(line: 1531, column: 6, scope: !16615)
!16621 = !DILocation(line: 1531, column: 8, scope: !16615)
!16622 = !DILocation(line: 1531, column: 5, scope: !16615)
!16623 = !DILocation(line: 1534, column: 10, scope: !15324)
!16624 = !DILocation(line: 1534, column: 3, scope: !15324)
!16625 = !DILocation(line: 1535, column: 1, scope: !15324)
!16626 = distinct !DISubprogram(name: "memcpy_lowcase", scope: !15279, file: !15279, line: 320, type: !14700, scopeLine: 321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1612, retainedNodes: !152)
!16627 = !DILocalVariable(name: "dest", arg: 1, scope: !16626, file: !15279, line: 320, type: !143)
!16628 = !DILocation(line: 320, column: 25, scope: !16626)
!16629 = !DILocalVariable(name: "src", arg: 2, scope: !16626, file: !15279, line: 320, type: !146)
!16630 = !DILocation(line: 320, column: 45, scope: !16626)
!16631 = !DILocalVariable(name: "len", arg: 3, scope: !16626, file: !15279, line: 320, type: !149)
!16632 = !DILocation(line: 320, column: 57, scope: !16626)
!16633 = !DILocation(line: 322, column: 3, scope: !16626)
!16634 = !DILocation(line: 322, column: 13, scope: !16626)
!16635 = !DILocation(line: 322, column: 16, scope: !16626)
!16636 = !DILocation(line: 323, column: 17, scope: !16626)
!16637 = !DILocation(line: 323, column: 5, scope: !16626)
!16638 = !DILocation(line: 323, column: 10, scope: !16626)
!16639 = !DILocation(line: 323, column: 15, scope: !16626)
!16640 = distinct !{!16640, !16633, !16636}
!16641 = !DILocation(line: 324, column: 10, scope: !16626)
!16642 = !DILocation(line: 324, column: 3, scope: !16626)
!16643 = distinct !DISubprogram(name: "memcpy_uppcase", scope: !15279, file: !15279, line: 331, type: !14700, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1612, retainedNodes: !152)
!16644 = !DILocalVariable(name: "dest", arg: 1, scope: !16643, file: !15279, line: 331, type: !143)
!16645 = !DILocation(line: 331, column: 25, scope: !16643)
!16646 = !DILocalVariable(name: "src", arg: 2, scope: !16643, file: !15279, line: 331, type: !146)
!16647 = !DILocation(line: 331, column: 45, scope: !16643)
!16648 = !DILocalVariable(name: "len", arg: 3, scope: !16643, file: !15279, line: 331, type: !149)
!16649 = !DILocation(line: 331, column: 57, scope: !16643)
!16650 = !DILocation(line: 333, column: 3, scope: !16643)
!16651 = !DILocation(line: 333, column: 13, scope: !16643)
!16652 = !DILocation(line: 333, column: 16, scope: !16643)
!16653 = !DILocation(line: 334, column: 17, scope: !16643)
!16654 = !DILocation(line: 334, column: 5, scope: !16643)
!16655 = !DILocation(line: 334, column: 10, scope: !16643)
!16656 = !DILocation(line: 334, column: 15, scope: !16643)
!16657 = distinct !{!16657, !16650, !16653}
!16658 = !DILocation(line: 335, column: 10, scope: !16643)
!16659 = !DILocation(line: 335, column: 3, scope: !16643)
!16660 = distinct !DISubprogram(name: "iso_week_days", scope: !15279, file: !15279, line: 381, type: !16661, scopeLine: 382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1612, retainedNodes: !152)
!16661 = !DISubroutineType(types: !16662)
!16662 = !{!27, !27, !27}
!16663 = !DILocalVariable(name: "yday", arg: 1, scope: !16660, file: !15279, line: 381, type: !27)
!16664 = !DILocation(line: 381, column: 20, scope: !16660)
!16665 = !DILocalVariable(name: "wday", arg: 2, scope: !16660, file: !15279, line: 381, type: !27)
!16666 = !DILocation(line: 381, column: 30, scope: !16660)
!16667 = !DILocalVariable(name: "big_enough_multiple_of_7", scope: !16660, file: !15279, line: 384, type: !27)
!16668 = !DILocation(line: 384, column: 7, scope: !16660)
!16669 = !DILocation(line: 385, column: 11, scope: !16660)
!16670 = !DILocation(line: 386, column: 14, scope: !16660)
!16671 = !DILocation(line: 386, column: 21, scope: !16660)
!16672 = !DILocation(line: 386, column: 19, scope: !16660)
!16673 = !DILocation(line: 386, column: 26, scope: !16660)
!16674 = !DILocation(line: 386, column: 45, scope: !16660)
!16675 = !DILocation(line: 386, column: 43, scope: !16660)
!16676 = !DILocation(line: 386, column: 71, scope: !16660)
!16677 = !DILocation(line: 386, column: 11, scope: !16660)
!16678 = !DILocation(line: 387, column: 11, scope: !16660)
!16679 = !DILocation(line: 387, column: 28, scope: !16660)
!16680 = !DILocation(line: 385, column: 3, scope: !16660)
!16681 = distinct !DISubprogram(name: "set_program_name", scope: !1372, file: !1372, line: 39, type: !840, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1331, retainedNodes: !152)
!16682 = !DILocalVariable(name: "argv0", arg: 1, scope: !16681, file: !1372, line: 39, type: !146)
!16683 = !DILocation(line: 39, column: 31, scope: !16681)
!16684 = !DILocalVariable(name: "slash", scope: !16681, file: !1372, line: 46, type: !146)
!16685 = !DILocation(line: 46, column: 15, scope: !16681)
!16686 = !DILocalVariable(name: "base", scope: !16681, file: !1372, line: 47, type: !146)
!16687 = !DILocation(line: 47, column: 15, scope: !16681)
!16688 = !DILocation(line: 51, column: 7, scope: !16689)
!16689 = distinct !DILexicalBlock(scope: !16681, file: !1372, line: 51, column: 7)
!16690 = !DILocation(line: 51, column: 13, scope: !16689)
!16691 = !DILocation(line: 51, column: 7, scope: !16681)
!16692 = !DILocation(line: 55, column: 14, scope: !16693)
!16693 = distinct !DILexicalBlock(scope: !16689, file: !1372, line: 52, column: 5)
!16694 = !DILocation(line: 54, column: 7, scope: !16693)
!16695 = !DILocation(line: 56, column: 7, scope: !16693)
!16696 = !DILocation(line: 59, column: 20, scope: !16681)
!16697 = !DILocation(line: 59, column: 11, scope: !16681)
!16698 = !DILocation(line: 59, column: 9, scope: !16681)
!16699 = !DILocation(line: 60, column: 11, scope: !16681)
!16700 = !DILocation(line: 60, column: 17, scope: !16681)
!16701 = !DILocation(line: 60, column: 27, scope: !16681)
!16702 = !DILocation(line: 60, column: 33, scope: !16681)
!16703 = !DILocation(line: 60, column: 39, scope: !16681)
!16704 = !DILocation(line: 60, column: 8, scope: !16681)
!16705 = !DILocation(line: 61, column: 7, scope: !16706)
!16706 = distinct !DILexicalBlock(scope: !16681, file: !1372, line: 61, column: 7)
!16707 = !DILocation(line: 61, column: 14, scope: !16706)
!16708 = !DILocation(line: 61, column: 12, scope: !16706)
!16709 = !DILocation(line: 61, column: 20, scope: !16706)
!16710 = !DILocation(line: 61, column: 25, scope: !16706)
!16711 = !DILocation(line: 61, column: 37, scope: !16706)
!16712 = !DILocation(line: 61, column: 42, scope: !16706)
!16713 = !DILocation(line: 61, column: 28, scope: !16706)
!16714 = !DILocation(line: 61, column: 61, scope: !16706)
!16715 = !DILocation(line: 61, column: 7, scope: !16681)
!16716 = !DILocation(line: 63, column: 15, scope: !16717)
!16717 = distinct !DILexicalBlock(scope: !16706, file: !1372, line: 62, column: 5)
!16718 = !DILocation(line: 63, column: 13, scope: !16717)
!16719 = !DILocation(line: 64, column: 20, scope: !16720)
!16720 = distinct !DILexicalBlock(scope: !16717, file: !1372, line: 64, column: 11)
!16721 = !DILocation(line: 64, column: 11, scope: !16720)
!16722 = !DILocation(line: 64, column: 36, scope: !16720)
!16723 = !DILocation(line: 64, column: 11, scope: !16717)
!16724 = !DILocation(line: 66, column: 19, scope: !16725)
!16725 = distinct !DILexicalBlock(scope: !16720, file: !1372, line: 65, column: 9)
!16726 = !DILocation(line: 66, column: 24, scope: !16725)
!16727 = !DILocation(line: 66, column: 17, scope: !16725)
!16728 = !DILocation(line: 70, column: 52, scope: !16725)
!16729 = !DILocation(line: 70, column: 41, scope: !16725)
!16730 = !DILocation(line: 72, column: 9, scope: !16725)
!16731 = !DILocation(line: 73, column: 5, scope: !16717)
!16732 = !DILocation(line: 84, column: 18, scope: !16681)
!16733 = !DILocation(line: 84, column: 16, scope: !16681)
!16734 = !DILocation(line: 90, column: 38, scope: !16681)
!16735 = !DILocation(line: 90, column: 27, scope: !16681)
!16736 = !DILocation(line: 92, column: 1, scope: !16681)
!16737 = distinct !DISubprogram(name: "clone_quoting_options", scope: !1383, file: !1383, line: 122, type: !16738, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16738 = !DISubroutineType(types: !16739)
!16739 = !{!1381, !1381}
!16740 = !DILocalVariable(name: "o", arg: 1, scope: !16737, file: !1383, line: 122, type: !1381)
!16741 = !DILocation(line: 122, column: 48, scope: !16737)
!16742 = !DILocalVariable(name: "e", scope: !16737, file: !1383, line: 124, type: !27)
!16743 = !DILocation(line: 124, column: 7, scope: !16737)
!16744 = !DILocation(line: 124, column: 11, scope: !16737)
!16745 = !DILocalVariable(name: "p", scope: !16737, file: !1383, line: 125, type: !1381)
!16746 = !DILocation(line: 125, column: 27, scope: !16737)
!16747 = !DILocation(line: 125, column: 40, scope: !16737)
!16748 = !DILocation(line: 125, column: 44, scope: !16737)
!16749 = !DILocation(line: 125, column: 31, scope: !16737)
!16750 = !DILocation(line: 127, column: 11, scope: !16737)
!16751 = !DILocation(line: 127, column: 3, scope: !16737)
!16752 = !DILocation(line: 127, column: 9, scope: !16737)
!16753 = !DILocation(line: 128, column: 10, scope: !16737)
!16754 = !DILocation(line: 128, column: 3, scope: !16737)
!16755 = distinct !DISubprogram(name: "get_quoting_style", scope: !1383, file: !1383, line: 133, type: !16756, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16756 = !DISubroutineType(types: !16757)
!16757 = !{!95, !1392}
!16758 = !DILocalVariable(name: "o", arg: 1, scope: !16755, file: !1383, line: 133, type: !1392)
!16759 = !DILocation(line: 133, column: 50, scope: !16755)
!16760 = !DILocation(line: 135, column: 11, scope: !16755)
!16761 = !DILocation(line: 135, column: 15, scope: !16755)
!16762 = !DILocation(line: 135, column: 46, scope: !16755)
!16763 = !DILocation(line: 135, column: 3, scope: !16755)
!16764 = distinct !DISubprogram(name: "set_quoting_style", scope: !1383, file: !1383, line: 141, type: !16765, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16765 = !DISubroutineType(types: !16766)
!16766 = !{null, !1381, !95}
!16767 = !DILocalVariable(name: "o", arg: 1, scope: !16764, file: !1383, line: 141, type: !1381)
!16768 = !DILocation(line: 141, column: 44, scope: !16764)
!16769 = !DILocalVariable(name: "s", arg: 2, scope: !16764, file: !1383, line: 141, type: !95)
!16770 = !DILocation(line: 141, column: 66, scope: !16764)
!16771 = !DILocation(line: 143, column: 47, scope: !16764)
!16772 = !DILocation(line: 143, column: 4, scope: !16764)
!16773 = !DILocation(line: 143, column: 8, scope: !16764)
!16774 = !DILocation(line: 143, column: 39, scope: !16764)
!16775 = !DILocation(line: 143, column: 45, scope: !16764)
!16776 = !DILocation(line: 144, column: 1, scope: !16764)
!16777 = distinct !DISubprogram(name: "set_char_quoting", scope: !1383, file: !1383, line: 152, type: !16778, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16778 = !DISubroutineType(types: !16779)
!16779 = !{!27, !1381, !144, !27}
!16780 = !DILocalVariable(name: "o", arg: 1, scope: !16777, file: !1383, line: 152, type: !1381)
!16781 = !DILocation(line: 152, column: 43, scope: !16777)
!16782 = !DILocalVariable(name: "c", arg: 2, scope: !16777, file: !1383, line: 152, type: !144)
!16783 = !DILocation(line: 152, column: 51, scope: !16777)
!16784 = !DILocalVariable(name: "i", arg: 3, scope: !16777, file: !1383, line: 152, type: !27)
!16785 = !DILocation(line: 152, column: 58, scope: !16777)
!16786 = !DILocalVariable(name: "uc", scope: !16777, file: !1383, line: 154, type: !737)
!16787 = !DILocation(line: 154, column: 17, scope: !16777)
!16788 = !DILocation(line: 154, column: 22, scope: !16777)
!16789 = !DILocalVariable(name: "p", scope: !16777, file: !1383, line: 155, type: !1391)
!16790 = !DILocation(line: 155, column: 17, scope: !16777)
!16791 = !DILocation(line: 156, column: 6, scope: !16777)
!16792 = !DILocation(line: 156, column: 10, scope: !16777)
!16793 = !DILocation(line: 156, column: 41, scope: !16777)
!16794 = !DILocation(line: 156, column: 5, scope: !16777)
!16795 = !DILocation(line: 156, column: 59, scope: !16777)
!16796 = !DILocation(line: 156, column: 62, scope: !16777)
!16797 = !DILocation(line: 156, column: 57, scope: !16777)
!16798 = !DILocalVariable(name: "shift", scope: !16777, file: !1383, line: 157, type: !27)
!16799 = !DILocation(line: 157, column: 7, scope: !16777)
!16800 = !DILocation(line: 157, column: 15, scope: !16777)
!16801 = !DILocation(line: 157, column: 18, scope: !16777)
!16802 = !DILocalVariable(name: "r", scope: !16777, file: !1383, line: 158, type: !27)
!16803 = !DILocation(line: 158, column: 7, scope: !16777)
!16804 = !DILocation(line: 158, column: 13, scope: !16777)
!16805 = !DILocation(line: 158, column: 12, scope: !16777)
!16806 = !DILocation(line: 158, column: 18, scope: !16777)
!16807 = !DILocation(line: 158, column: 15, scope: !16777)
!16808 = !DILocation(line: 158, column: 25, scope: !16777)
!16809 = !DILocation(line: 159, column: 11, scope: !16777)
!16810 = !DILocation(line: 159, column: 13, scope: !16777)
!16811 = !DILocation(line: 159, column: 20, scope: !16777)
!16812 = !DILocation(line: 159, column: 18, scope: !16777)
!16813 = !DILocation(line: 159, column: 26, scope: !16777)
!16814 = !DILocation(line: 159, column: 23, scope: !16777)
!16815 = !DILocation(line: 159, column: 4, scope: !16777)
!16816 = !DILocation(line: 159, column: 6, scope: !16777)
!16817 = !DILocation(line: 160, column: 10, scope: !16777)
!16818 = !DILocation(line: 160, column: 3, scope: !16777)
!16819 = distinct !DISubprogram(name: "set_quoting_flags", scope: !1383, file: !1383, line: 168, type: !16820, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16820 = !DISubroutineType(types: !16821)
!16821 = !{!27, !1381, !27}
!16822 = !DILocalVariable(name: "o", arg: 1, scope: !16819, file: !1383, line: 168, type: !1381)
!16823 = !DILocation(line: 168, column: 44, scope: !16819)
!16824 = !DILocalVariable(name: "i", arg: 2, scope: !16819, file: !1383, line: 168, type: !27)
!16825 = !DILocation(line: 168, column: 51, scope: !16819)
!16826 = !DILocalVariable(name: "r", scope: !16819, file: !1383, line: 170, type: !27)
!16827 = !DILocation(line: 170, column: 7, scope: !16819)
!16828 = !DILocation(line: 171, column: 8, scope: !16829)
!16829 = distinct !DILexicalBlock(scope: !16819, file: !1383, line: 171, column: 7)
!16830 = !DILocation(line: 171, column: 7, scope: !16819)
!16831 = !DILocation(line: 172, column: 7, scope: !16829)
!16832 = !DILocation(line: 172, column: 5, scope: !16829)
!16833 = !DILocation(line: 173, column: 7, scope: !16819)
!16834 = !DILocation(line: 173, column: 10, scope: !16819)
!16835 = !DILocation(line: 173, column: 5, scope: !16819)
!16836 = !DILocation(line: 174, column: 14, scope: !16819)
!16837 = !DILocation(line: 174, column: 3, scope: !16819)
!16838 = !DILocation(line: 174, column: 6, scope: !16819)
!16839 = !DILocation(line: 174, column: 12, scope: !16819)
!16840 = !DILocation(line: 175, column: 10, scope: !16819)
!16841 = !DILocation(line: 175, column: 3, scope: !16819)
!16842 = distinct !DISubprogram(name: "set_custom_quoting", scope: !1383, file: !1383, line: 179, type: !16843, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16843 = !DISubroutineType(types: !16844)
!16844 = !{null, !1381, !146, !146}
!16845 = !DILocalVariable(name: "o", arg: 1, scope: !16842, file: !1383, line: 179, type: !1381)
!16846 = !DILocation(line: 179, column: 45, scope: !16842)
!16847 = !DILocalVariable(name: "left_quote", arg: 2, scope: !16842, file: !1383, line: 180, type: !146)
!16848 = !DILocation(line: 180, column: 33, scope: !16842)
!16849 = !DILocalVariable(name: "right_quote", arg: 3, scope: !16842, file: !1383, line: 180, type: !146)
!16850 = !DILocation(line: 180, column: 57, scope: !16842)
!16851 = !DILocation(line: 182, column: 8, scope: !16852)
!16852 = distinct !DILexicalBlock(scope: !16842, file: !1383, line: 182, column: 7)
!16853 = !DILocation(line: 182, column: 7, scope: !16842)
!16854 = !DILocation(line: 183, column: 7, scope: !16852)
!16855 = !DILocation(line: 183, column: 5, scope: !16852)
!16856 = !DILocation(line: 184, column: 3, scope: !16842)
!16857 = !DILocation(line: 184, column: 6, scope: !16842)
!16858 = !DILocation(line: 184, column: 12, scope: !16842)
!16859 = !DILocation(line: 185, column: 8, scope: !16860)
!16860 = distinct !DILexicalBlock(scope: !16842, file: !1383, line: 185, column: 7)
!16861 = !DILocation(line: 185, column: 19, scope: !16860)
!16862 = !DILocation(line: 185, column: 23, scope: !16860)
!16863 = !DILocation(line: 185, column: 7, scope: !16842)
!16864 = !DILocation(line: 186, column: 5, scope: !16860)
!16865 = !DILocation(line: 187, column: 19, scope: !16842)
!16866 = !DILocation(line: 187, column: 3, scope: !16842)
!16867 = !DILocation(line: 187, column: 6, scope: !16842)
!16868 = !DILocation(line: 187, column: 17, scope: !16842)
!16869 = !DILocation(line: 188, column: 20, scope: !16842)
!16870 = !DILocation(line: 188, column: 3, scope: !16842)
!16871 = !DILocation(line: 188, column: 6, scope: !16842)
!16872 = !DILocation(line: 188, column: 18, scope: !16842)
!16873 = !DILocation(line: 189, column: 1, scope: !16842)
!16874 = distinct !DISubprogram(name: "quotearg_buffer", scope: !1383, file: !1383, line: 784, type: !16875, scopeLine: 787, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16875 = !DISubroutineType(types: !16876)
!16876 = !{!149, !143, !149, !146, !149, !1392}
!16877 = !DILocalVariable(name: "buffer", arg: 1, scope: !16874, file: !1383, line: 784, type: !143)
!16878 = !DILocation(line: 784, column: 24, scope: !16874)
!16879 = !DILocalVariable(name: "buffersize", arg: 2, scope: !16874, file: !1383, line: 784, type: !149)
!16880 = !DILocation(line: 784, column: 39, scope: !16874)
!16881 = !DILocalVariable(name: "arg", arg: 3, scope: !16874, file: !1383, line: 785, type: !146)
!16882 = !DILocation(line: 785, column: 30, scope: !16874)
!16883 = !DILocalVariable(name: "argsize", arg: 4, scope: !16874, file: !1383, line: 785, type: !149)
!16884 = !DILocation(line: 785, column: 42, scope: !16874)
!16885 = !DILocalVariable(name: "o", arg: 5, scope: !16874, file: !1383, line: 786, type: !1392)
!16886 = !DILocation(line: 786, column: 48, scope: !16874)
!16887 = !DILocalVariable(name: "p", scope: !16874, file: !1383, line: 788, type: !1392)
!16888 = !DILocation(line: 788, column: 33, scope: !16874)
!16889 = !DILocation(line: 788, column: 37, scope: !16874)
!16890 = !DILocation(line: 788, column: 41, scope: !16874)
!16891 = !DILocalVariable(name: "e", scope: !16874, file: !1383, line: 789, type: !27)
!16892 = !DILocation(line: 789, column: 7, scope: !16874)
!16893 = !DILocation(line: 789, column: 11, scope: !16874)
!16894 = !DILocalVariable(name: "r", scope: !16874, file: !1383, line: 790, type: !149)
!16895 = !DILocation(line: 790, column: 10, scope: !16874)
!16896 = !DILocation(line: 790, column: 40, scope: !16874)
!16897 = !DILocation(line: 790, column: 48, scope: !16874)
!16898 = !DILocation(line: 790, column: 60, scope: !16874)
!16899 = !DILocation(line: 790, column: 65, scope: !16874)
!16900 = !DILocation(line: 791, column: 40, scope: !16874)
!16901 = !DILocation(line: 791, column: 43, scope: !16874)
!16902 = !DILocation(line: 791, column: 50, scope: !16874)
!16903 = !DILocation(line: 791, column: 53, scope: !16874)
!16904 = !DILocation(line: 791, column: 60, scope: !16874)
!16905 = !DILocation(line: 791, column: 63, scope: !16874)
!16906 = !DILocation(line: 792, column: 40, scope: !16874)
!16907 = !DILocation(line: 792, column: 43, scope: !16874)
!16908 = !DILocation(line: 792, column: 55, scope: !16874)
!16909 = !DILocation(line: 792, column: 58, scope: !16874)
!16910 = !DILocation(line: 790, column: 14, scope: !16874)
!16911 = !DILocation(line: 793, column: 11, scope: !16874)
!16912 = !DILocation(line: 793, column: 3, scope: !16874)
!16913 = !DILocation(line: 793, column: 9, scope: !16874)
!16914 = !DILocation(line: 794, column: 10, scope: !16874)
!16915 = !DILocation(line: 794, column: 3, scope: !16874)
!16916 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !1383, file: !1383, line: 256, type: !16917, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!16917 = !DISubroutineType(types: !16918)
!16918 = !{!149, !143, !149, !146, !149, !95, !27, !1410, !146, !146}
!16919 = !DILocalVariable(name: "buffer", arg: 1, scope: !16916, file: !1383, line: 256, type: !143)
!16920 = !DILocation(line: 256, column: 33, scope: !16916)
!16921 = !DILocalVariable(name: "buffersize", arg: 2, scope: !16916, file: !1383, line: 256, type: !149)
!16922 = !DILocation(line: 256, column: 48, scope: !16916)
!16923 = !DILocalVariable(name: "arg", arg: 3, scope: !16916, file: !1383, line: 257, type: !146)
!16924 = !DILocation(line: 257, column: 39, scope: !16916)
!16925 = !DILocalVariable(name: "argsize", arg: 4, scope: !16916, file: !1383, line: 257, type: !149)
!16926 = !DILocation(line: 257, column: 51, scope: !16916)
!16927 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !16916, file: !1383, line: 258, type: !95)
!16928 = !DILocation(line: 258, column: 46, scope: !16916)
!16929 = !DILocalVariable(name: "flags", arg: 6, scope: !16916, file: !1383, line: 258, type: !27)
!16930 = !DILocation(line: 258, column: 65, scope: !16916)
!16931 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !16916, file: !1383, line: 259, type: !1410)
!16932 = !DILocation(line: 259, column: 47, scope: !16916)
!16933 = !DILocalVariable(name: "left_quote", arg: 8, scope: !16916, file: !1383, line: 260, type: !146)
!16934 = !DILocation(line: 260, column: 39, scope: !16916)
!16935 = !DILocalVariable(name: "right_quote", arg: 9, scope: !16916, file: !1383, line: 261, type: !146)
!16936 = !DILocation(line: 261, column: 39, scope: !16916)
!16937 = !DILocalVariable(name: "i", scope: !16916, file: !1383, line: 263, type: !149)
!16938 = !DILocation(line: 263, column: 10, scope: !16916)
!16939 = !DILocalVariable(name: "len", scope: !16916, file: !1383, line: 264, type: !149)
!16940 = !DILocation(line: 264, column: 10, scope: !16916)
!16941 = !DILocalVariable(name: "orig_buffersize", scope: !16916, file: !1383, line: 265, type: !149)
!16942 = !DILocation(line: 265, column: 10, scope: !16916)
!16943 = !DILocalVariable(name: "quote_string", scope: !16916, file: !1383, line: 266, type: !146)
!16944 = !DILocation(line: 266, column: 15, scope: !16916)
!16945 = !DILocalVariable(name: "quote_string_len", scope: !16916, file: !1383, line: 267, type: !149)
!16946 = !DILocation(line: 267, column: 10, scope: !16916)
!16947 = !DILocalVariable(name: "backslash_escapes", scope: !16916, file: !1383, line: 268, type: !141)
!16948 = !DILocation(line: 268, column: 8, scope: !16916)
!16949 = !DILocalVariable(name: "unibyte_locale", scope: !16916, file: !1383, line: 269, type: !141)
!16950 = !DILocation(line: 269, column: 8, scope: !16916)
!16951 = !DILocation(line: 269, column: 25, scope: !16916)
!16952 = !DILocation(line: 269, column: 36, scope: !16916)
!16953 = !DILocalVariable(name: "elide_outer_quotes", scope: !16916, file: !1383, line: 270, type: !141)
!16954 = !DILocation(line: 270, column: 8, scope: !16916)
!16955 = !DILocation(line: 270, column: 30, scope: !16916)
!16956 = !DILocation(line: 270, column: 36, scope: !16916)
!16957 = !DILocation(line: 270, column: 61, scope: !16916)
!16958 = !DILocalVariable(name: "pending_shell_escape_end", scope: !16916, file: !1383, line: 271, type: !141)
!16959 = !DILocation(line: 271, column: 8, scope: !16916)
!16960 = !DILocalVariable(name: "encountered_single_quote", scope: !16916, file: !1383, line: 272, type: !141)
!16961 = !DILocation(line: 272, column: 8, scope: !16916)
!16962 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !16916, file: !1383, line: 273, type: !141)
!16963 = !DILocation(line: 273, column: 8, scope: !16916)
!16964 = !DILocation(line: 273, column: 3, scope: !16916)
!16965 = !DILabel(scope: !16916, name: "process_input", file: !1383, line: 314)
!16966 = !DILocation(line: 314, column: 2, scope: !16916)
!16967 = !DILocation(line: 316, column: 11, scope: !16916)
!16968 = !DILocation(line: 316, column: 3, scope: !16916)
!16969 = !DILocation(line: 319, column: 21, scope: !16970)
!16970 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 317, column: 5)
!16971 = !DILocation(line: 320, column: 26, scope: !16970)
!16972 = !DILocation(line: 321, column: 7, scope: !16970)
!16973 = !DILocation(line: 323, column: 12, scope: !16974)
!16974 = distinct !DILexicalBlock(scope: !16970, file: !1383, line: 323, column: 11)
!16975 = !DILocation(line: 323, column: 11, scope: !16970)
!16976 = !DILocation(line: 324, column: 9, scope: !16974)
!16977 = !DILocation(line: 324, column: 9, scope: !16978)
!16978 = distinct !DILexicalBlock(scope: !16979, file: !1383, line: 324, column: 9)
!16979 = distinct !DILexicalBlock(scope: !16974, file: !1383, line: 324, column: 9)
!16980 = !DILocation(line: 324, column: 9, scope: !16979)
!16981 = !DILocation(line: 325, column: 25, scope: !16970)
!16982 = !DILocation(line: 326, column: 20, scope: !16970)
!16983 = !DILocation(line: 327, column: 24, scope: !16970)
!16984 = !DILocation(line: 328, column: 7, scope: !16970)
!16985 = !DILocation(line: 331, column: 25, scope: !16970)
!16986 = !DILocation(line: 332, column: 26, scope: !16970)
!16987 = !DILocation(line: 333, column: 7, scope: !16970)
!16988 = !DILocation(line: 339, column: 13, scope: !16989)
!16989 = distinct !DILexicalBlock(scope: !16990, file: !1383, line: 339, column: 13)
!16990 = distinct !DILexicalBlock(scope: !16970, file: !1383, line: 338, column: 7)
!16991 = !DILocation(line: 339, column: 27, scope: !16989)
!16992 = !DILocation(line: 339, column: 13, scope: !16990)
!16993 = !DILocation(line: 362, column: 50, scope: !16994)
!16994 = distinct !DILexicalBlock(scope: !16989, file: !1383, line: 340, column: 11)
!16995 = !DILocation(line: 362, column: 26, scope: !16994)
!16996 = !DILocation(line: 362, column: 24, scope: !16994)
!16997 = !DILocation(line: 363, column: 51, scope: !16994)
!16998 = !DILocation(line: 363, column: 27, scope: !16994)
!16999 = !DILocation(line: 363, column: 25, scope: !16994)
!17000 = !DILocation(line: 364, column: 11, scope: !16994)
!17001 = !DILocation(line: 365, column: 14, scope: !17002)
!17002 = distinct !DILexicalBlock(scope: !16990, file: !1383, line: 365, column: 13)
!17003 = !DILocation(line: 365, column: 13, scope: !16990)
!17004 = !DILocation(line: 366, column: 31, scope: !17005)
!17005 = distinct !DILexicalBlock(scope: !17002, file: !1383, line: 366, column: 11)
!17006 = !DILocation(line: 366, column: 29, scope: !17005)
!17007 = !DILocation(line: 366, column: 16, scope: !17005)
!17008 = !DILocation(line: 366, column: 44, scope: !17009)
!17009 = distinct !DILexicalBlock(scope: !17005, file: !1383, line: 366, column: 11)
!17010 = !DILocation(line: 366, column: 43, scope: !17009)
!17011 = !DILocation(line: 366, column: 11, scope: !17005)
!17012 = !DILocation(line: 367, column: 13, scope: !17009)
!17013 = !DILocation(line: 367, column: 13, scope: !17014)
!17014 = distinct !DILexicalBlock(scope: !17015, file: !1383, line: 367, column: 13)
!17015 = distinct !DILexicalBlock(scope: !17009, file: !1383, line: 367, column: 13)
!17016 = !DILocation(line: 367, column: 13, scope: !17015)
!17017 = !DILocation(line: 366, column: 70, scope: !17009)
!17018 = !DILocation(line: 366, column: 11, scope: !17009)
!17019 = distinct !{!17019, !17011, !17020}
!17020 = !DILocation(line: 367, column: 13, scope: !17005)
!17021 = !DILocation(line: 368, column: 27, scope: !16990)
!17022 = !DILocation(line: 369, column: 24, scope: !16990)
!17023 = !DILocation(line: 369, column: 22, scope: !16990)
!17024 = !DILocation(line: 370, column: 36, scope: !16990)
!17025 = !DILocation(line: 370, column: 28, scope: !16990)
!17026 = !DILocation(line: 370, column: 26, scope: !16990)
!17027 = !DILocation(line: 372, column: 7, scope: !16970)
!17028 = !DILocation(line: 375, column: 25, scope: !16970)
!17029 = !DILocation(line: 376, column: 7, scope: !16970)
!17030 = !DILocation(line: 378, column: 26, scope: !16970)
!17031 = !DILocation(line: 379, column: 7, scope: !16970)
!17032 = !DILocation(line: 381, column: 12, scope: !17033)
!17033 = distinct !DILexicalBlock(scope: !16970, file: !1383, line: 381, column: 11)
!17034 = !DILocation(line: 381, column: 11, scope: !16970)
!17035 = !DILocation(line: 382, column: 27, scope: !17033)
!17036 = !DILocation(line: 382, column: 9, scope: !17033)
!17037 = !DILocation(line: 383, column: 7, scope: !16970)
!17038 = !DILocation(line: 385, column: 21, scope: !16970)
!17039 = !DILocation(line: 386, column: 12, scope: !17040)
!17040 = distinct !DILexicalBlock(scope: !16970, file: !1383, line: 386, column: 11)
!17041 = !DILocation(line: 386, column: 11, scope: !16970)
!17042 = !DILocation(line: 387, column: 9, scope: !17040)
!17043 = !DILocation(line: 387, column: 9, scope: !17044)
!17044 = distinct !DILexicalBlock(scope: !17045, file: !1383, line: 387, column: 9)
!17045 = distinct !DILexicalBlock(scope: !17040, file: !1383, line: 387, column: 9)
!17046 = !DILocation(line: 387, column: 9, scope: !17045)
!17047 = !DILocation(line: 388, column: 20, scope: !16970)
!17048 = !DILocation(line: 389, column: 24, scope: !16970)
!17049 = !DILocation(line: 390, column: 7, scope: !16970)
!17050 = !DILocation(line: 393, column: 26, scope: !16970)
!17051 = !DILocation(line: 394, column: 7, scope: !16970)
!17052 = !DILocation(line: 397, column: 7, scope: !16970)
!17053 = !DILocation(line: 400, column: 10, scope: !17054)
!17054 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 400, column: 3)
!17055 = !DILocation(line: 400, column: 8, scope: !17054)
!17056 = !DILocation(line: 400, column: 19, scope: !17057)
!17057 = distinct !DILexicalBlock(scope: !17054, file: !1383, line: 400, column: 3)
!17058 = !DILocation(line: 400, column: 27, scope: !17057)
!17059 = !DILocation(line: 400, column: 41, scope: !17057)
!17060 = !DILocation(line: 400, column: 45, scope: !17057)
!17061 = !DILocation(line: 400, column: 48, scope: !17057)
!17062 = !DILocation(line: 400, column: 58, scope: !17057)
!17063 = !DILocation(line: 400, column: 63, scope: !17057)
!17064 = !DILocation(line: 400, column: 60, scope: !17057)
!17065 = !DILocation(line: 400, column: 16, scope: !17057)
!17066 = !DILocation(line: 400, column: 3, scope: !17054)
!17067 = !DILocalVariable(name: "c", scope: !17068, file: !1383, line: 402, type: !737)
!17068 = distinct !DILexicalBlock(scope: !17057, file: !1383, line: 401, column: 5)
!17069 = !DILocation(line: 402, column: 21, scope: !17068)
!17070 = !DILocalVariable(name: "esc", scope: !17068, file: !1383, line: 403, type: !737)
!17071 = !DILocation(line: 403, column: 21, scope: !17068)
!17072 = !DILocalVariable(name: "is_right_quote", scope: !17068, file: !1383, line: 404, type: !141)
!17073 = !DILocation(line: 404, column: 12, scope: !17068)
!17074 = !DILocalVariable(name: "escaping", scope: !17068, file: !1383, line: 405, type: !141)
!17075 = !DILocation(line: 405, column: 12, scope: !17068)
!17076 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !17068, file: !1383, line: 406, type: !141)
!17077 = !DILocation(line: 406, column: 12, scope: !17068)
!17078 = !DILocation(line: 408, column: 11, scope: !17079)
!17079 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 408, column: 11)
!17080 = !DILocation(line: 409, column: 11, scope: !17079)
!17081 = !DILocation(line: 409, column: 14, scope: !17079)
!17082 = !DILocation(line: 409, column: 28, scope: !17079)
!17083 = !DILocation(line: 410, column: 11, scope: !17079)
!17084 = !DILocation(line: 410, column: 14, scope: !17079)
!17085 = !DILocation(line: 411, column: 11, scope: !17079)
!17086 = !DILocation(line: 411, column: 15, scope: !17079)
!17087 = !DILocation(line: 411, column: 19, scope: !17079)
!17088 = !DILocation(line: 411, column: 17, scope: !17079)
!17089 = !DILocation(line: 412, column: 19, scope: !17079)
!17090 = !DILocation(line: 412, column: 27, scope: !17079)
!17091 = !DILocation(line: 412, column: 39, scope: !17079)
!17092 = !DILocation(line: 412, column: 46, scope: !17079)
!17093 = !DILocation(line: 412, column: 44, scope: !17079)
!17094 = !DILocation(line: 416, column: 40, scope: !17079)
!17095 = !DILocation(line: 416, column: 32, scope: !17079)
!17096 = !DILocation(line: 416, column: 30, scope: !17079)
!17097 = !DILocation(line: 416, column: 48, scope: !17079)
!17098 = !DILocation(line: 412, column: 15, scope: !17079)
!17099 = !DILocation(line: 417, column: 11, scope: !17079)
!17100 = !DILocation(line: 417, column: 22, scope: !17079)
!17101 = !DILocation(line: 417, column: 28, scope: !17079)
!17102 = !DILocation(line: 417, column: 26, scope: !17079)
!17103 = !DILocation(line: 417, column: 31, scope: !17079)
!17104 = !DILocation(line: 417, column: 45, scope: !17079)
!17105 = !DILocation(line: 417, column: 14, scope: !17079)
!17106 = !DILocation(line: 417, column: 63, scope: !17079)
!17107 = !DILocation(line: 408, column: 11, scope: !17068)
!17108 = !DILocation(line: 419, column: 15, scope: !17109)
!17109 = distinct !DILexicalBlock(scope: !17110, file: !1383, line: 419, column: 15)
!17110 = distinct !DILexicalBlock(scope: !17079, file: !1383, line: 418, column: 9)
!17111 = !DILocation(line: 419, column: 15, scope: !17110)
!17112 = !DILocation(line: 420, column: 13, scope: !17109)
!17113 = !DILocation(line: 421, column: 26, scope: !17110)
!17114 = !DILocation(line: 422, column: 9, scope: !17110)
!17115 = !DILocation(line: 424, column: 11, scope: !17068)
!17116 = !DILocation(line: 424, column: 15, scope: !17068)
!17117 = !DILocation(line: 424, column: 9, scope: !17068)
!17118 = !DILocation(line: 425, column: 15, scope: !17068)
!17119 = !DILocation(line: 425, column: 7, scope: !17068)
!17120 = !DILocation(line: 428, column: 15, scope: !17121)
!17121 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 428, column: 15)
!17122 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 426, column: 9)
!17123 = !DILocation(line: 428, column: 15, scope: !17122)
!17124 = !DILocation(line: 430, column: 15, scope: !17125)
!17125 = distinct !DILexicalBlock(scope: !17121, file: !1383, line: 429, column: 13)
!17126 = !DILocation(line: 430, column: 15, scope: !17127)
!17127 = distinct !DILexicalBlock(scope: !17128, file: !1383, line: 430, column: 15)
!17128 = distinct !DILexicalBlock(scope: !17125, file: !1383, line: 430, column: 15)
!17129 = !DILocation(line: 430, column: 15, scope: !17128)
!17130 = !DILocation(line: 430, column: 15, scope: !17131)
!17131 = distinct !DILexicalBlock(scope: !17128, file: !1383, line: 430, column: 15)
!17132 = !DILocation(line: 430, column: 15, scope: !17133)
!17133 = distinct !DILexicalBlock(scope: !17131, file: !1383, line: 430, column: 15)
!17134 = !DILocation(line: 430, column: 15, scope: !17135)
!17135 = distinct !DILexicalBlock(scope: !17136, file: !1383, line: 430, column: 15)
!17136 = distinct !DILexicalBlock(scope: !17133, file: !1383, line: 430, column: 15)
!17137 = !DILocation(line: 430, column: 15, scope: !17136)
!17138 = !DILocation(line: 430, column: 15, scope: !17139)
!17139 = distinct !DILexicalBlock(scope: !17140, file: !1383, line: 430, column: 15)
!17140 = distinct !DILexicalBlock(scope: !17133, file: !1383, line: 430, column: 15)
!17141 = !DILocation(line: 430, column: 15, scope: !17140)
!17142 = !DILocation(line: 430, column: 15, scope: !17143)
!17143 = distinct !DILexicalBlock(scope: !17144, file: !1383, line: 430, column: 15)
!17144 = distinct !DILexicalBlock(scope: !17133, file: !1383, line: 430, column: 15)
!17145 = !DILocation(line: 430, column: 15, scope: !17144)
!17146 = !DILocation(line: 430, column: 15, scope: !17147)
!17147 = distinct !DILexicalBlock(scope: !17148, file: !1383, line: 430, column: 15)
!17148 = distinct !DILexicalBlock(scope: !17128, file: !1383, line: 430, column: 15)
!17149 = !DILocation(line: 430, column: 15, scope: !17148)
!17150 = !DILocation(line: 437, column: 19, scope: !17151)
!17151 = distinct !DILexicalBlock(scope: !17125, file: !1383, line: 437, column: 19)
!17152 = !DILocation(line: 437, column: 33, scope: !17151)
!17153 = !DILocation(line: 438, column: 19, scope: !17151)
!17154 = !DILocation(line: 438, column: 22, scope: !17151)
!17155 = !DILocation(line: 438, column: 24, scope: !17151)
!17156 = !DILocation(line: 438, column: 30, scope: !17151)
!17157 = !DILocation(line: 438, column: 28, scope: !17151)
!17158 = !DILocation(line: 438, column: 38, scope: !17151)
!17159 = !DILocation(line: 438, column: 48, scope: !17151)
!17160 = !DILocation(line: 438, column: 52, scope: !17151)
!17161 = !DILocation(line: 438, column: 54, scope: !17151)
!17162 = !DILocation(line: 438, column: 45, scope: !17151)
!17163 = !DILocation(line: 438, column: 59, scope: !17151)
!17164 = !DILocation(line: 438, column: 62, scope: !17151)
!17165 = !DILocation(line: 438, column: 66, scope: !17151)
!17166 = !DILocation(line: 438, column: 68, scope: !17151)
!17167 = !DILocation(line: 438, column: 73, scope: !17151)
!17168 = !DILocation(line: 437, column: 19, scope: !17125)
!17169 = !DILocation(line: 440, column: 19, scope: !17170)
!17170 = distinct !DILexicalBlock(scope: !17151, file: !1383, line: 439, column: 17)
!17171 = !DILocation(line: 440, column: 19, scope: !17172)
!17172 = distinct !DILexicalBlock(scope: !17173, file: !1383, line: 440, column: 19)
!17173 = distinct !DILexicalBlock(scope: !17170, file: !1383, line: 440, column: 19)
!17174 = !DILocation(line: 440, column: 19, scope: !17173)
!17175 = !DILocation(line: 441, column: 19, scope: !17170)
!17176 = !DILocation(line: 441, column: 19, scope: !17177)
!17177 = distinct !DILexicalBlock(scope: !17178, file: !1383, line: 441, column: 19)
!17178 = distinct !DILexicalBlock(scope: !17170, file: !1383, line: 441, column: 19)
!17179 = !DILocation(line: 441, column: 19, scope: !17178)
!17180 = !DILocation(line: 442, column: 17, scope: !17170)
!17181 = !DILocation(line: 443, column: 17, scope: !17125)
!17182 = !DILocation(line: 448, column: 13, scope: !17125)
!17183 = !DILocation(line: 449, column: 20, scope: !17184)
!17184 = distinct !DILexicalBlock(scope: !17121, file: !1383, line: 449, column: 20)
!17185 = !DILocation(line: 449, column: 26, scope: !17184)
!17186 = !DILocation(line: 449, column: 20, scope: !17121)
!17187 = !DILocation(line: 450, column: 13, scope: !17184)
!17188 = !DILocation(line: 451, column: 11, scope: !17122)
!17189 = !DILocation(line: 454, column: 19, scope: !17122)
!17190 = !DILocation(line: 454, column: 11, scope: !17122)
!17191 = !DILocation(line: 457, column: 19, scope: !17192)
!17192 = distinct !DILexicalBlock(scope: !17193, file: !1383, line: 457, column: 19)
!17193 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 455, column: 13)
!17194 = !DILocation(line: 457, column: 19, scope: !17193)
!17195 = !DILocation(line: 458, column: 17, scope: !17192)
!17196 = !DILocation(line: 459, column: 15, scope: !17193)
!17197 = !DILocation(line: 462, column: 20, scope: !17198)
!17198 = distinct !DILexicalBlock(scope: !17193, file: !1383, line: 462, column: 19)
!17199 = !DILocation(line: 462, column: 26, scope: !17198)
!17200 = !DILocation(line: 463, column: 19, scope: !17198)
!17201 = !DILocation(line: 463, column: 22, scope: !17198)
!17202 = !DILocation(line: 463, column: 24, scope: !17198)
!17203 = !DILocation(line: 463, column: 30, scope: !17198)
!17204 = !DILocation(line: 463, column: 28, scope: !17198)
!17205 = !DILocation(line: 463, column: 38, scope: !17198)
!17206 = !DILocation(line: 463, column: 41, scope: !17198)
!17207 = !DILocation(line: 463, column: 45, scope: !17198)
!17208 = !DILocation(line: 463, column: 47, scope: !17198)
!17209 = !DILocation(line: 463, column: 52, scope: !17198)
!17210 = !DILocation(line: 462, column: 19, scope: !17193)
!17211 = !DILocation(line: 464, column: 25, scope: !17198)
!17212 = !DILocation(line: 464, column: 29, scope: !17198)
!17213 = !DILocation(line: 464, column: 31, scope: !17198)
!17214 = !DILocation(line: 464, column: 17, scope: !17198)
!17215 = !DILocation(line: 471, column: 25, scope: !17216)
!17216 = distinct !DILexicalBlock(scope: !17217, file: !1383, line: 471, column: 25)
!17217 = distinct !DILexicalBlock(scope: !17198, file: !1383, line: 465, column: 19)
!17218 = !DILocation(line: 471, column: 25, scope: !17217)
!17219 = !DILocation(line: 472, column: 23, scope: !17216)
!17220 = !DILocation(line: 473, column: 25, scope: !17217)
!17221 = !DILocation(line: 473, column: 29, scope: !17217)
!17222 = !DILocation(line: 473, column: 31, scope: !17217)
!17223 = !DILocation(line: 473, column: 23, scope: !17217)
!17224 = !DILocation(line: 474, column: 23, scope: !17217)
!17225 = !DILocation(line: 475, column: 21, scope: !17217)
!17226 = !DILocation(line: 475, column: 21, scope: !17227)
!17227 = distinct !DILexicalBlock(scope: !17228, file: !1383, line: 475, column: 21)
!17228 = distinct !DILexicalBlock(scope: !17217, file: !1383, line: 475, column: 21)
!17229 = !DILocation(line: 475, column: 21, scope: !17228)
!17230 = !DILocation(line: 476, column: 21, scope: !17217)
!17231 = !DILocation(line: 476, column: 21, scope: !17232)
!17232 = distinct !DILexicalBlock(scope: !17233, file: !1383, line: 476, column: 21)
!17233 = distinct !DILexicalBlock(scope: !17217, file: !1383, line: 476, column: 21)
!17234 = !DILocation(line: 476, column: 21, scope: !17233)
!17235 = !DILocation(line: 477, column: 21, scope: !17217)
!17236 = !DILocation(line: 477, column: 21, scope: !17237)
!17237 = distinct !DILexicalBlock(scope: !17238, file: !1383, line: 477, column: 21)
!17238 = distinct !DILexicalBlock(scope: !17217, file: !1383, line: 477, column: 21)
!17239 = !DILocation(line: 477, column: 21, scope: !17238)
!17240 = !DILocation(line: 478, column: 21, scope: !17217)
!17241 = !DILocation(line: 478, column: 21, scope: !17242)
!17242 = distinct !DILexicalBlock(scope: !17243, file: !1383, line: 478, column: 21)
!17243 = distinct !DILexicalBlock(scope: !17217, file: !1383, line: 478, column: 21)
!17244 = !DILocation(line: 478, column: 21, scope: !17243)
!17245 = !DILocation(line: 479, column: 21, scope: !17217)
!17246 = !DILocation(line: 482, column: 21, scope: !17217)
!17247 = !DILocation(line: 483, column: 19, scope: !17217)
!17248 = !DILocation(line: 484, column: 15, scope: !17193)
!17249 = !DILocation(line: 487, column: 15, scope: !17193)
!17250 = !DILocation(line: 489, column: 11, scope: !17122)
!17251 = !DILocation(line: 491, column: 24, scope: !17122)
!17252 = !DILocation(line: 491, column: 31, scope: !17122)
!17253 = !DILocation(line: 492, column: 24, scope: !17122)
!17254 = !DILocation(line: 492, column: 31, scope: !17122)
!17255 = !DILocation(line: 493, column: 24, scope: !17122)
!17256 = !DILocation(line: 493, column: 31, scope: !17122)
!17257 = !DILocation(line: 494, column: 24, scope: !17122)
!17258 = !DILocation(line: 494, column: 31, scope: !17122)
!17259 = !DILocation(line: 495, column: 24, scope: !17122)
!17260 = !DILocation(line: 495, column: 31, scope: !17122)
!17261 = !DILocation(line: 496, column: 24, scope: !17122)
!17262 = !DILocation(line: 496, column: 31, scope: !17122)
!17263 = !DILocation(line: 497, column: 24, scope: !17122)
!17264 = !DILocation(line: 497, column: 31, scope: !17122)
!17265 = !DILocation(line: 498, column: 26, scope: !17122)
!17266 = !DILocation(line: 498, column: 24, scope: !17122)
!17267 = !DILocation(line: 500, column: 15, scope: !17268)
!17268 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 500, column: 15)
!17269 = !DILocation(line: 500, column: 29, scope: !17268)
!17270 = !DILocation(line: 500, column: 15, scope: !17122)
!17271 = !DILocation(line: 502, column: 19, scope: !17272)
!17272 = distinct !DILexicalBlock(scope: !17273, file: !1383, line: 502, column: 19)
!17273 = distinct !DILexicalBlock(scope: !17268, file: !1383, line: 501, column: 13)
!17274 = !DILocation(line: 502, column: 19, scope: !17273)
!17275 = !DILocation(line: 503, column: 17, scope: !17272)
!17276 = !DILocation(line: 504, column: 15, scope: !17273)
!17277 = !DILocation(line: 509, column: 15, scope: !17278)
!17278 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 509, column: 15)
!17279 = !DILocation(line: 509, column: 33, scope: !17278)
!17280 = !DILocation(line: 509, column: 36, scope: !17278)
!17281 = !DILocation(line: 509, column: 55, scope: !17278)
!17282 = !DILocation(line: 509, column: 58, scope: !17278)
!17283 = !DILocation(line: 509, column: 15, scope: !17122)
!17284 = !DILocation(line: 510, column: 13, scope: !17278)
!17285 = !DILabel(scope: !17122, name: "c_and_shell_escape", file: !1383, line: 512)
!17286 = !DILocation(line: 512, column: 9, scope: !17122)
!17287 = !DILocation(line: 513, column: 15, scope: !17288)
!17288 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 513, column: 15)
!17289 = !DILocation(line: 513, column: 29, scope: !17288)
!17290 = !DILocation(line: 514, column: 15, scope: !17288)
!17291 = !DILocation(line: 514, column: 18, scope: !17288)
!17292 = !DILocation(line: 513, column: 15, scope: !17122)
!17293 = !DILocation(line: 515, column: 13, scope: !17288)
!17294 = !DILabel(scope: !17122, name: "c_escape", file: !1383, line: 517)
!17295 = !DILocation(line: 517, column: 9, scope: !17122)
!17296 = !DILocation(line: 518, column: 15, scope: !17297)
!17297 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 518, column: 15)
!17298 = !DILocation(line: 518, column: 15, scope: !17122)
!17299 = !DILocation(line: 520, column: 19, scope: !17300)
!17300 = distinct !DILexicalBlock(scope: !17297, file: !1383, line: 519, column: 13)
!17301 = !DILocation(line: 520, column: 17, scope: !17300)
!17302 = !DILocation(line: 521, column: 15, scope: !17300)
!17303 = !DILocation(line: 523, column: 11, scope: !17122)
!17304 = !DILocation(line: 526, column: 18, scope: !17305)
!17305 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 526, column: 15)
!17306 = !DILocation(line: 526, column: 26, scope: !17305)
!17307 = !DILocation(line: 526, column: 15, scope: !17122)
!17308 = !DILocation(line: 526, column: 40, scope: !17305)
!17309 = !DILocation(line: 526, column: 47, scope: !17305)
!17310 = !DILocation(line: 526, column: 57, scope: !17305)
!17311 = !DILocation(line: 526, column: 65, scope: !17305)
!17312 = !DILocation(line: 527, column: 13, scope: !17305)
!17313 = !DILocation(line: 528, column: 11, scope: !17122)
!17314 = !DILocation(line: 530, column: 15, scope: !17315)
!17315 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 530, column: 15)
!17316 = !DILocation(line: 530, column: 17, scope: !17315)
!17317 = !DILocation(line: 530, column: 15, scope: !17122)
!17318 = !DILocation(line: 531, column: 13, scope: !17315)
!17319 = !DILocation(line: 532, column: 11, scope: !17122)
!17320 = !DILocation(line: 534, column: 36, scope: !17122)
!17321 = !DILocation(line: 535, column: 11, scope: !17122)
!17322 = !DILocation(line: 548, column: 15, scope: !17323)
!17323 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 548, column: 15)
!17324 = !DILocation(line: 548, column: 29, scope: !17323)
!17325 = !DILocation(line: 549, column: 15, scope: !17323)
!17326 = !DILocation(line: 549, column: 18, scope: !17323)
!17327 = !DILocation(line: 548, column: 15, scope: !17122)
!17328 = !DILocation(line: 550, column: 13, scope: !17323)
!17329 = !DILocation(line: 551, column: 11, scope: !17122)
!17330 = !DILocation(line: 554, column: 36, scope: !17122)
!17331 = !DILocation(line: 555, column: 36, scope: !17122)
!17332 = !DILocation(line: 556, column: 15, scope: !17333)
!17333 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 556, column: 15)
!17334 = !DILocation(line: 556, column: 29, scope: !17333)
!17335 = !DILocation(line: 556, column: 15, scope: !17122)
!17336 = !DILocation(line: 558, column: 19, scope: !17337)
!17337 = distinct !DILexicalBlock(scope: !17338, file: !1383, line: 558, column: 19)
!17338 = distinct !DILexicalBlock(scope: !17333, file: !1383, line: 557, column: 13)
!17339 = !DILocation(line: 558, column: 19, scope: !17338)
!17340 = !DILocation(line: 559, column: 17, scope: !17337)
!17341 = !DILocation(line: 561, column: 19, scope: !17342)
!17342 = distinct !DILexicalBlock(scope: !17338, file: !1383, line: 561, column: 19)
!17343 = !DILocation(line: 561, column: 30, scope: !17342)
!17344 = !DILocation(line: 561, column: 35, scope: !17342)
!17345 = !DILocation(line: 561, column: 19, scope: !17338)
!17346 = !DILocation(line: 566, column: 37, scope: !17347)
!17347 = distinct !DILexicalBlock(scope: !17342, file: !1383, line: 562, column: 17)
!17348 = !DILocation(line: 566, column: 35, scope: !17347)
!17349 = !DILocation(line: 567, column: 30, scope: !17347)
!17350 = !DILocation(line: 568, column: 17, scope: !17347)
!17351 = !DILocation(line: 570, column: 15, scope: !17338)
!17352 = !DILocation(line: 570, column: 15, scope: !17353)
!17353 = distinct !DILexicalBlock(scope: !17354, file: !1383, line: 570, column: 15)
!17354 = distinct !DILexicalBlock(scope: !17338, file: !1383, line: 570, column: 15)
!17355 = !DILocation(line: 570, column: 15, scope: !17354)
!17356 = !DILocation(line: 571, column: 15, scope: !17338)
!17357 = !DILocation(line: 571, column: 15, scope: !17358)
!17358 = distinct !DILexicalBlock(scope: !17359, file: !1383, line: 571, column: 15)
!17359 = distinct !DILexicalBlock(scope: !17338, file: !1383, line: 571, column: 15)
!17360 = !DILocation(line: 571, column: 15, scope: !17359)
!17361 = !DILocation(line: 572, column: 15, scope: !17338)
!17362 = !DILocation(line: 572, column: 15, scope: !17363)
!17363 = distinct !DILexicalBlock(scope: !17364, file: !1383, line: 572, column: 15)
!17364 = distinct !DILexicalBlock(scope: !17338, file: !1383, line: 572, column: 15)
!17365 = !DILocation(line: 572, column: 15, scope: !17364)
!17366 = !DILocation(line: 573, column: 40, scope: !17338)
!17367 = !DILocation(line: 574, column: 13, scope: !17338)
!17368 = !DILocation(line: 575, column: 11, scope: !17122)
!17369 = !DILocation(line: 599, column: 36, scope: !17122)
!17370 = !DILocation(line: 600, column: 11, scope: !17122)
!17371 = !DILocalVariable(name: "m", scope: !17372, file: !1383, line: 610, type: !149)
!17372 = distinct !DILexicalBlock(scope: !17122, file: !1383, line: 608, column: 11)
!17373 = !DILocation(line: 610, column: 20, scope: !17372)
!17374 = !DILocalVariable(name: "printable", scope: !17372, file: !1383, line: 612, type: !141)
!17375 = !DILocation(line: 612, column: 18, scope: !17372)
!17376 = !DILocation(line: 614, column: 17, scope: !17377)
!17377 = distinct !DILexicalBlock(scope: !17372, file: !1383, line: 614, column: 17)
!17378 = !DILocation(line: 614, column: 17, scope: !17372)
!17379 = !DILocation(line: 616, column: 19, scope: !17380)
!17380 = distinct !DILexicalBlock(scope: !17377, file: !1383, line: 615, column: 15)
!17381 = !DILocation(line: 617, column: 29, scope: !17380)
!17382 = !DILocation(line: 617, column: 41, scope: !17380)
!17383 = !DILocation(line: 617, column: 27, scope: !17380)
!17384 = !DILocation(line: 618, column: 15, scope: !17380)
!17385 = !DILocalVariable(name: "mbstate", scope: !17386, file: !1383, line: 621, type: !1400)
!17386 = distinct !DILexicalBlock(scope: !17377, file: !1383, line: 620, column: 15)
!17387 = !DILocation(line: 621, column: 27, scope: !17386)
!17388 = !DILocation(line: 622, column: 17, scope: !17386)
!17389 = !DILocation(line: 624, column: 19, scope: !17386)
!17390 = !DILocation(line: 625, column: 27, scope: !17386)
!17391 = !DILocation(line: 626, column: 21, scope: !17392)
!17392 = distinct !DILexicalBlock(scope: !17386, file: !1383, line: 626, column: 21)
!17393 = !DILocation(line: 626, column: 29, scope: !17392)
!17394 = !DILocation(line: 626, column: 21, scope: !17386)
!17395 = !DILocation(line: 627, column: 37, scope: !17392)
!17396 = !DILocation(line: 627, column: 29, scope: !17392)
!17397 = !DILocation(line: 627, column: 27, scope: !17392)
!17398 = !DILocation(line: 627, column: 19, scope: !17392)
!17399 = !DILocation(line: 629, column: 17, scope: !17386)
!17400 = !DILocalVariable(name: "w", scope: !17401, file: !1383, line: 631, type: !764)
!17401 = distinct !DILexicalBlock(scope: !17386, file: !1383, line: 630, column: 19)
!17402 = !DILocation(line: 631, column: 29, scope: !17401)
!17403 = !DILocalVariable(name: "bytes", scope: !17401, file: !1383, line: 632, type: !149)
!17404 = !DILocation(line: 632, column: 28, scope: !17401)
!17405 = !DILocation(line: 632, column: 50, scope: !17401)
!17406 = !DILocation(line: 632, column: 54, scope: !17401)
!17407 = !DILocation(line: 632, column: 58, scope: !17401)
!17408 = !DILocation(line: 632, column: 56, scope: !17401)
!17409 = !DILocation(line: 633, column: 45, scope: !17401)
!17410 = !DILocation(line: 633, column: 56, scope: !17401)
!17411 = !DILocation(line: 633, column: 60, scope: !17401)
!17412 = !DILocation(line: 633, column: 58, scope: !17401)
!17413 = !DILocation(line: 633, column: 53, scope: !17401)
!17414 = !DILocation(line: 632, column: 36, scope: !17401)
!17415 = !DILocation(line: 634, column: 25, scope: !17416)
!17416 = distinct !DILexicalBlock(scope: !17401, file: !1383, line: 634, column: 25)
!17417 = !DILocation(line: 634, column: 31, scope: !17416)
!17418 = !DILocation(line: 634, column: 25, scope: !17401)
!17419 = !DILocation(line: 635, column: 23, scope: !17416)
!17420 = !DILocation(line: 636, column: 30, scope: !17421)
!17421 = distinct !DILexicalBlock(scope: !17416, file: !1383, line: 636, column: 30)
!17422 = !DILocation(line: 636, column: 36, scope: !17421)
!17423 = !DILocation(line: 636, column: 30, scope: !17416)
!17424 = !DILocation(line: 638, column: 35, scope: !17425)
!17425 = distinct !DILexicalBlock(scope: !17421, file: !1383, line: 637, column: 23)
!17426 = !DILocation(line: 639, column: 25, scope: !17425)
!17427 = !DILocation(line: 641, column: 30, scope: !17428)
!17428 = distinct !DILexicalBlock(scope: !17421, file: !1383, line: 641, column: 30)
!17429 = !DILocation(line: 641, column: 36, scope: !17428)
!17430 = !DILocation(line: 641, column: 30, scope: !17421)
!17431 = !DILocation(line: 643, column: 35, scope: !17432)
!17432 = distinct !DILexicalBlock(scope: !17428, file: !1383, line: 642, column: 23)
!17433 = !DILocation(line: 644, column: 25, scope: !17432)
!17434 = !DILocation(line: 644, column: 32, scope: !17432)
!17435 = !DILocation(line: 644, column: 36, scope: !17432)
!17436 = !DILocation(line: 644, column: 34, scope: !17432)
!17437 = !DILocation(line: 644, column: 40, scope: !17432)
!17438 = !DILocation(line: 644, column: 38, scope: !17432)
!17439 = !DILocation(line: 644, column: 48, scope: !17432)
!17440 = !DILocation(line: 644, column: 51, scope: !17432)
!17441 = !DILocation(line: 644, column: 55, scope: !17432)
!17442 = !DILocation(line: 644, column: 59, scope: !17432)
!17443 = !DILocation(line: 644, column: 57, scope: !17432)
!17444 = !DILocation(line: 0, scope: !17432)
!17445 = !DILocation(line: 645, column: 28, scope: !17432)
!17446 = distinct !{!17446, !17433, !17445}
!17447 = !DILocation(line: 646, column: 25, scope: !17432)
!17448 = !DILocation(line: 654, column: 44, scope: !17449)
!17449 = distinct !DILexicalBlock(scope: !17450, file: !1383, line: 654, column: 29)
!17450 = distinct !DILexicalBlock(scope: !17428, file: !1383, line: 649, column: 23)
!17451 = !DILocation(line: 655, column: 29, scope: !17449)
!17452 = !DILocation(line: 655, column: 32, scope: !17449)
!17453 = !DILocation(line: 655, column: 46, scope: !17449)
!17454 = !DILocation(line: 654, column: 29, scope: !17450)
!17455 = !DILocalVariable(name: "j", scope: !17456, file: !1383, line: 657, type: !149)
!17456 = distinct !DILexicalBlock(scope: !17449, file: !1383, line: 656, column: 27)
!17457 = !DILocation(line: 657, column: 36, scope: !17456)
!17458 = !DILocation(line: 658, column: 36, scope: !17459)
!17459 = distinct !DILexicalBlock(scope: !17456, file: !1383, line: 658, column: 29)
!17460 = !DILocation(line: 658, column: 34, scope: !17459)
!17461 = !DILocation(line: 658, column: 41, scope: !17462)
!17462 = distinct !DILexicalBlock(scope: !17459, file: !1383, line: 658, column: 29)
!17463 = !DILocation(line: 658, column: 45, scope: !17462)
!17464 = !DILocation(line: 658, column: 43, scope: !17462)
!17465 = !DILocation(line: 658, column: 29, scope: !17459)
!17466 = !DILocation(line: 659, column: 39, scope: !17462)
!17467 = !DILocation(line: 659, column: 43, scope: !17462)
!17468 = !DILocation(line: 659, column: 47, scope: !17462)
!17469 = !DILocation(line: 659, column: 45, scope: !17462)
!17470 = !DILocation(line: 659, column: 51, scope: !17462)
!17471 = !DILocation(line: 659, column: 49, scope: !17462)
!17472 = !DILocation(line: 659, column: 31, scope: !17462)
!17473 = !DILocation(line: 663, column: 35, scope: !17474)
!17474 = distinct !DILexicalBlock(scope: !17462, file: !1383, line: 660, column: 33)
!17475 = !DILocation(line: 666, column: 35, scope: !17474)
!17476 = !DILocation(line: 667, column: 33, scope: !17474)
!17477 = !DILocation(line: 658, column: 53, scope: !17462)
!17478 = !DILocation(line: 658, column: 29, scope: !17462)
!17479 = distinct !{!17479, !17465, !17480}
!17480 = !DILocation(line: 667, column: 33, scope: !17459)
!17481 = !DILocation(line: 668, column: 27, scope: !17456)
!17482 = !DILocation(line: 670, column: 41, scope: !17483)
!17483 = distinct !DILexicalBlock(scope: !17450, file: !1383, line: 670, column: 29)
!17484 = !DILocation(line: 670, column: 31, scope: !17483)
!17485 = !DILocation(line: 670, column: 29, scope: !17450)
!17486 = !DILocation(line: 671, column: 37, scope: !17483)
!17487 = !DILocation(line: 671, column: 27, scope: !17483)
!17488 = !DILocation(line: 672, column: 30, scope: !17450)
!17489 = !DILocation(line: 672, column: 27, scope: !17450)
!17490 = !DILocation(line: 674, column: 19, scope: !17401)
!17491 = !DILocation(line: 675, column: 26, scope: !17386)
!17492 = !DILocation(line: 675, column: 24, scope: !17386)
!17493 = distinct !{!17493, !17399, !17494}
!17494 = !DILocation(line: 675, column: 44, scope: !17386)
!17495 = !DILocation(line: 678, column: 40, scope: !17372)
!17496 = !DILocation(line: 678, column: 38, scope: !17372)
!17497 = !DILocation(line: 680, column: 21, scope: !17498)
!17498 = distinct !DILexicalBlock(scope: !17372, file: !1383, line: 680, column: 17)
!17499 = !DILocation(line: 680, column: 19, scope: !17498)
!17500 = !DILocation(line: 680, column: 23, scope: !17498)
!17501 = !DILocation(line: 680, column: 27, scope: !17498)
!17502 = !DILocation(line: 680, column: 45, scope: !17498)
!17503 = !DILocation(line: 680, column: 50, scope: !17498)
!17504 = !DILocation(line: 680, column: 17, scope: !17372)
!17505 = !DILocalVariable(name: "ilim", scope: !17506, file: !1383, line: 684, type: !149)
!17506 = distinct !DILexicalBlock(scope: !17498, file: !1383, line: 681, column: 15)
!17507 = !DILocation(line: 684, column: 24, scope: !17506)
!17508 = !DILocation(line: 684, column: 31, scope: !17506)
!17509 = !DILocation(line: 684, column: 35, scope: !17506)
!17510 = !DILocation(line: 684, column: 33, scope: !17506)
!17511 = !DILocation(line: 686, column: 17, scope: !17506)
!17512 = !DILocation(line: 688, column: 25, scope: !17513)
!17513 = distinct !DILexicalBlock(scope: !17514, file: !1383, line: 688, column: 25)
!17514 = distinct !DILexicalBlock(scope: !17515, file: !1383, line: 687, column: 19)
!17515 = distinct !DILexicalBlock(scope: !17516, file: !1383, line: 686, column: 17)
!17516 = distinct !DILexicalBlock(scope: !17506, file: !1383, line: 686, column: 17)
!17517 = !DILocation(line: 688, column: 43, scope: !17513)
!17518 = !DILocation(line: 688, column: 48, scope: !17513)
!17519 = !DILocation(line: 688, column: 25, scope: !17514)
!17520 = !DILocation(line: 690, column: 25, scope: !17521)
!17521 = distinct !DILexicalBlock(scope: !17513, file: !1383, line: 689, column: 23)
!17522 = !DILocation(line: 690, column: 25, scope: !17523)
!17523 = distinct !DILexicalBlock(scope: !17524, file: !1383, line: 690, column: 25)
!17524 = distinct !DILexicalBlock(scope: !17521, file: !1383, line: 690, column: 25)
!17525 = !DILocation(line: 690, column: 25, scope: !17524)
!17526 = !DILocation(line: 690, column: 25, scope: !17527)
!17527 = distinct !DILexicalBlock(scope: !17524, file: !1383, line: 690, column: 25)
!17528 = !DILocation(line: 690, column: 25, scope: !17529)
!17529 = distinct !DILexicalBlock(scope: !17527, file: !1383, line: 690, column: 25)
!17530 = !DILocation(line: 690, column: 25, scope: !17531)
!17531 = distinct !DILexicalBlock(scope: !17532, file: !1383, line: 690, column: 25)
!17532 = distinct !DILexicalBlock(scope: !17529, file: !1383, line: 690, column: 25)
!17533 = !DILocation(line: 690, column: 25, scope: !17532)
!17534 = !DILocation(line: 690, column: 25, scope: !17535)
!17535 = distinct !DILexicalBlock(scope: !17536, file: !1383, line: 690, column: 25)
!17536 = distinct !DILexicalBlock(scope: !17529, file: !1383, line: 690, column: 25)
!17537 = !DILocation(line: 690, column: 25, scope: !17536)
!17538 = !DILocation(line: 690, column: 25, scope: !17539)
!17539 = distinct !DILexicalBlock(scope: !17540, file: !1383, line: 690, column: 25)
!17540 = distinct !DILexicalBlock(scope: !17529, file: !1383, line: 690, column: 25)
!17541 = !DILocation(line: 690, column: 25, scope: !17540)
!17542 = !DILocation(line: 690, column: 25, scope: !17543)
!17543 = distinct !DILexicalBlock(scope: !17544, file: !1383, line: 690, column: 25)
!17544 = distinct !DILexicalBlock(scope: !17524, file: !1383, line: 690, column: 25)
!17545 = !DILocation(line: 690, column: 25, scope: !17544)
!17546 = !DILocation(line: 691, column: 25, scope: !17521)
!17547 = !DILocation(line: 691, column: 25, scope: !17548)
!17548 = distinct !DILexicalBlock(scope: !17549, file: !1383, line: 691, column: 25)
!17549 = distinct !DILexicalBlock(scope: !17521, file: !1383, line: 691, column: 25)
!17550 = !DILocation(line: 691, column: 25, scope: !17549)
!17551 = !DILocation(line: 692, column: 25, scope: !17521)
!17552 = !DILocation(line: 692, column: 25, scope: !17553)
!17553 = distinct !DILexicalBlock(scope: !17554, file: !1383, line: 692, column: 25)
!17554 = distinct !DILexicalBlock(scope: !17521, file: !1383, line: 692, column: 25)
!17555 = !DILocation(line: 692, column: 25, scope: !17554)
!17556 = !DILocation(line: 693, column: 36, scope: !17521)
!17557 = !DILocation(line: 693, column: 38, scope: !17521)
!17558 = !DILocation(line: 693, column: 33, scope: !17521)
!17559 = !DILocation(line: 693, column: 29, scope: !17521)
!17560 = !DILocation(line: 693, column: 27, scope: !17521)
!17561 = !DILocation(line: 694, column: 23, scope: !17521)
!17562 = !DILocation(line: 695, column: 30, scope: !17563)
!17563 = distinct !DILexicalBlock(scope: !17513, file: !1383, line: 695, column: 30)
!17564 = !DILocation(line: 695, column: 30, scope: !17513)
!17565 = !DILocation(line: 697, column: 25, scope: !17566)
!17566 = distinct !DILexicalBlock(scope: !17563, file: !1383, line: 696, column: 23)
!17567 = !DILocation(line: 697, column: 25, scope: !17568)
!17568 = distinct !DILexicalBlock(scope: !17569, file: !1383, line: 697, column: 25)
!17569 = distinct !DILexicalBlock(scope: !17566, file: !1383, line: 697, column: 25)
!17570 = !DILocation(line: 697, column: 25, scope: !17569)
!17571 = !DILocation(line: 698, column: 40, scope: !17566)
!17572 = !DILocation(line: 699, column: 23, scope: !17566)
!17573 = !DILocation(line: 700, column: 25, scope: !17574)
!17574 = distinct !DILexicalBlock(scope: !17514, file: !1383, line: 700, column: 25)
!17575 = !DILocation(line: 700, column: 33, scope: !17574)
!17576 = !DILocation(line: 700, column: 35, scope: !17574)
!17577 = !DILocation(line: 700, column: 30, scope: !17574)
!17578 = !DILocation(line: 700, column: 25, scope: !17514)
!17579 = !DILocation(line: 701, column: 23, scope: !17574)
!17580 = !DILocation(line: 702, column: 21, scope: !17514)
!17581 = !DILocation(line: 702, column: 21, scope: !17582)
!17582 = distinct !DILexicalBlock(scope: !17583, file: !1383, line: 702, column: 21)
!17583 = distinct !DILexicalBlock(scope: !17514, file: !1383, line: 702, column: 21)
!17584 = !DILocation(line: 702, column: 21, scope: !17583)
!17585 = !DILocation(line: 702, column: 21, scope: !17586)
!17586 = distinct !DILexicalBlock(scope: !17582, file: !1383, line: 702, column: 21)
!17587 = !DILocation(line: 702, column: 21, scope: !17588)
!17588 = distinct !DILexicalBlock(scope: !17589, file: !1383, line: 702, column: 21)
!17589 = distinct !DILexicalBlock(scope: !17586, file: !1383, line: 702, column: 21)
!17590 = !DILocation(line: 702, column: 21, scope: !17589)
!17591 = !DILocation(line: 702, column: 21, scope: !17592)
!17592 = distinct !DILexicalBlock(scope: !17593, file: !1383, line: 702, column: 21)
!17593 = distinct !DILexicalBlock(scope: !17586, file: !1383, line: 702, column: 21)
!17594 = !DILocation(line: 702, column: 21, scope: !17593)
!17595 = !DILocation(line: 703, column: 21, scope: !17514)
!17596 = !DILocation(line: 703, column: 21, scope: !17597)
!17597 = distinct !DILexicalBlock(scope: !17598, file: !1383, line: 703, column: 21)
!17598 = distinct !DILexicalBlock(scope: !17514, file: !1383, line: 703, column: 21)
!17599 = !DILocation(line: 703, column: 21, scope: !17598)
!17600 = !DILocation(line: 704, column: 25, scope: !17514)
!17601 = !DILocation(line: 704, column: 29, scope: !17514)
!17602 = !DILocation(line: 704, column: 23, scope: !17514)
!17603 = !DILocation(line: 686, column: 17, scope: !17515)
!17604 = distinct !{!17604, !17605, !17606}
!17605 = !DILocation(line: 686, column: 17, scope: !17516)
!17606 = !DILocation(line: 705, column: 19, scope: !17516)
!17607 = !DILocation(line: 707, column: 17, scope: !17506)
!17608 = !DILocation(line: 710, column: 9, scope: !17122)
!17609 = !DILocation(line: 712, column: 16, scope: !17610)
!17610 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 712, column: 11)
!17611 = !DILocation(line: 712, column: 34, scope: !17610)
!17612 = !DILocation(line: 712, column: 37, scope: !17610)
!17613 = !DILocation(line: 712, column: 51, scope: !17610)
!17614 = !DILocation(line: 713, column: 15, scope: !17610)
!17615 = !DILocation(line: 713, column: 18, scope: !17610)
!17616 = !DILocation(line: 714, column: 14, scope: !17610)
!17617 = !DILocation(line: 714, column: 17, scope: !17610)
!17618 = !DILocation(line: 715, column: 14, scope: !17610)
!17619 = !DILocation(line: 715, column: 17, scope: !17610)
!17620 = !DILocation(line: 715, column: 33, scope: !17610)
!17621 = !DILocation(line: 715, column: 35, scope: !17610)
!17622 = !DILocation(line: 715, column: 51, scope: !17610)
!17623 = !DILocation(line: 715, column: 53, scope: !17610)
!17624 = !DILocation(line: 715, column: 47, scope: !17610)
!17625 = !DILocation(line: 715, column: 65, scope: !17610)
!17626 = !DILocation(line: 716, column: 11, scope: !17610)
!17627 = !DILocation(line: 716, column: 15, scope: !17610)
!17628 = !DILocation(line: 712, column: 11, scope: !17068)
!17629 = !DILocation(line: 717, column: 9, scope: !17610)
!17630 = !DILabel(scope: !17068, name: "store_escape", file: !1383, line: 719)
!17631 = !DILocation(line: 719, column: 5, scope: !17068)
!17632 = !DILocation(line: 720, column: 7, scope: !17068)
!17633 = !DILocation(line: 720, column: 7, scope: !17634)
!17634 = distinct !DILexicalBlock(scope: !17635, file: !1383, line: 720, column: 7)
!17635 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 720, column: 7)
!17636 = !DILocation(line: 720, column: 7, scope: !17635)
!17637 = !DILocation(line: 720, column: 7, scope: !17638)
!17638 = distinct !DILexicalBlock(scope: !17635, file: !1383, line: 720, column: 7)
!17639 = !DILocation(line: 720, column: 7, scope: !17640)
!17640 = distinct !DILexicalBlock(scope: !17638, file: !1383, line: 720, column: 7)
!17641 = !DILocation(line: 720, column: 7, scope: !17642)
!17642 = distinct !DILexicalBlock(scope: !17643, file: !1383, line: 720, column: 7)
!17643 = distinct !DILexicalBlock(scope: !17640, file: !1383, line: 720, column: 7)
!17644 = !DILocation(line: 720, column: 7, scope: !17643)
!17645 = !DILocation(line: 720, column: 7, scope: !17646)
!17646 = distinct !DILexicalBlock(scope: !17647, file: !1383, line: 720, column: 7)
!17647 = distinct !DILexicalBlock(scope: !17640, file: !1383, line: 720, column: 7)
!17648 = !DILocation(line: 720, column: 7, scope: !17647)
!17649 = !DILocation(line: 720, column: 7, scope: !17650)
!17650 = distinct !DILexicalBlock(scope: !17651, file: !1383, line: 720, column: 7)
!17651 = distinct !DILexicalBlock(scope: !17640, file: !1383, line: 720, column: 7)
!17652 = !DILocation(line: 720, column: 7, scope: !17651)
!17653 = !DILocation(line: 720, column: 7, scope: !17654)
!17654 = distinct !DILexicalBlock(scope: !17655, file: !1383, line: 720, column: 7)
!17655 = distinct !DILexicalBlock(scope: !17635, file: !1383, line: 720, column: 7)
!17656 = !DILocation(line: 720, column: 7, scope: !17655)
!17657 = !DILabel(scope: !17068, name: "store_c", file: !1383, line: 722)
!17658 = !DILocation(line: 722, column: 5, scope: !17068)
!17659 = !DILocation(line: 723, column: 7, scope: !17068)
!17660 = !DILocation(line: 723, column: 7, scope: !17661)
!17661 = distinct !DILexicalBlock(scope: !17662, file: !1383, line: 723, column: 7)
!17662 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 723, column: 7)
!17663 = !DILocation(line: 723, column: 7, scope: !17662)
!17664 = !DILocation(line: 723, column: 7, scope: !17665)
!17665 = distinct !DILexicalBlock(scope: !17661, file: !1383, line: 723, column: 7)
!17666 = !DILocation(line: 723, column: 7, scope: !17667)
!17667 = distinct !DILexicalBlock(scope: !17668, file: !1383, line: 723, column: 7)
!17668 = distinct !DILexicalBlock(scope: !17665, file: !1383, line: 723, column: 7)
!17669 = !DILocation(line: 723, column: 7, scope: !17668)
!17670 = !DILocation(line: 723, column: 7, scope: !17671)
!17671 = distinct !DILexicalBlock(scope: !17672, file: !1383, line: 723, column: 7)
!17672 = distinct !DILexicalBlock(scope: !17665, file: !1383, line: 723, column: 7)
!17673 = !DILocation(line: 723, column: 7, scope: !17672)
!17674 = !DILocation(line: 724, column: 7, scope: !17068)
!17675 = !DILocation(line: 724, column: 7, scope: !17676)
!17676 = distinct !DILexicalBlock(scope: !17677, file: !1383, line: 724, column: 7)
!17677 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 724, column: 7)
!17678 = !DILocation(line: 724, column: 7, scope: !17677)
!17679 = !DILocation(line: 726, column: 13, scope: !17680)
!17680 = distinct !DILexicalBlock(scope: !17068, file: !1383, line: 726, column: 11)
!17681 = !DILocation(line: 726, column: 11, scope: !17068)
!17682 = !DILocation(line: 727, column: 38, scope: !17680)
!17683 = !DILocation(line: 727, column: 9, scope: !17680)
!17684 = !DILocation(line: 728, column: 5, scope: !17068)
!17685 = !DILocation(line: 400, column: 75, scope: !17057)
!17686 = !DILocation(line: 400, column: 3, scope: !17057)
!17687 = distinct !{!17687, !17066, !17688}
!17688 = !DILocation(line: 728, column: 5, scope: !17054)
!17689 = !DILocation(line: 730, column: 7, scope: !17690)
!17690 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 730, column: 7)
!17691 = !DILocation(line: 730, column: 11, scope: !17690)
!17692 = !DILocation(line: 730, column: 16, scope: !17690)
!17693 = !DILocation(line: 730, column: 19, scope: !17690)
!17694 = !DILocation(line: 730, column: 33, scope: !17690)
!17695 = !DILocation(line: 731, column: 7, scope: !17690)
!17696 = !DILocation(line: 731, column: 10, scope: !17690)
!17697 = !DILocation(line: 730, column: 7, scope: !16916)
!17698 = !DILocation(line: 732, column: 5, scope: !17690)
!17699 = !DILocation(line: 738, column: 7, scope: !17700)
!17700 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 738, column: 7)
!17701 = !DILocation(line: 738, column: 21, scope: !17700)
!17702 = !DILocation(line: 738, column: 51, scope: !17700)
!17703 = !DILocation(line: 738, column: 56, scope: !17700)
!17704 = !DILocation(line: 739, column: 7, scope: !17700)
!17705 = !DILocation(line: 739, column: 10, scope: !17700)
!17706 = !DILocation(line: 738, column: 7, scope: !16916)
!17707 = !DILocation(line: 741, column: 11, scope: !17708)
!17708 = distinct !DILexicalBlock(scope: !17709, file: !1383, line: 741, column: 11)
!17709 = distinct !DILexicalBlock(scope: !17700, file: !1383, line: 740, column: 5)
!17710 = !DILocation(line: 741, column: 11, scope: !17709)
!17711 = !DILocation(line: 742, column: 42, scope: !17708)
!17712 = !DILocation(line: 742, column: 50, scope: !17708)
!17713 = !DILocation(line: 742, column: 67, scope: !17708)
!17714 = !DILocation(line: 742, column: 72, scope: !17708)
!17715 = !DILocation(line: 744, column: 42, scope: !17708)
!17716 = !DILocation(line: 744, column: 49, scope: !17708)
!17717 = !DILocation(line: 745, column: 42, scope: !17708)
!17718 = !DILocation(line: 745, column: 54, scope: !17708)
!17719 = !DILocation(line: 742, column: 16, scope: !17708)
!17720 = !DILocation(line: 742, column: 9, scope: !17708)
!17721 = !DILocation(line: 746, column: 18, scope: !17722)
!17722 = distinct !DILexicalBlock(scope: !17708, file: !1383, line: 746, column: 16)
!17723 = !DILocation(line: 746, column: 29, scope: !17722)
!17724 = !DILocation(line: 746, column: 32, scope: !17722)
!17725 = !DILocation(line: 746, column: 16, scope: !17708)
!17726 = !DILocation(line: 749, column: 24, scope: !17727)
!17727 = distinct !DILexicalBlock(scope: !17722, file: !1383, line: 747, column: 9)
!17728 = !DILocation(line: 749, column: 22, scope: !17727)
!17729 = !DILocation(line: 750, column: 15, scope: !17727)
!17730 = !DILocation(line: 751, column: 11, scope: !17727)
!17731 = !DILocation(line: 753, column: 5, scope: !17709)
!17732 = !DILocation(line: 755, column: 7, scope: !17733)
!17733 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 755, column: 7)
!17734 = !DILocation(line: 755, column: 20, scope: !17733)
!17735 = !DILocation(line: 755, column: 24, scope: !17733)
!17736 = !DILocation(line: 755, column: 7, scope: !16916)
!17737 = !DILocation(line: 756, column: 5, scope: !17733)
!17738 = !DILocation(line: 756, column: 13, scope: !17739)
!17739 = distinct !DILexicalBlock(scope: !17740, file: !1383, line: 756, column: 5)
!17740 = distinct !DILexicalBlock(scope: !17733, file: !1383, line: 756, column: 5)
!17741 = !DILocation(line: 756, column: 12, scope: !17739)
!17742 = !DILocation(line: 756, column: 5, scope: !17740)
!17743 = !DILocation(line: 757, column: 7, scope: !17739)
!17744 = !DILocation(line: 757, column: 7, scope: !17745)
!17745 = distinct !DILexicalBlock(scope: !17746, file: !1383, line: 757, column: 7)
!17746 = distinct !DILexicalBlock(scope: !17739, file: !1383, line: 757, column: 7)
!17747 = !DILocation(line: 757, column: 7, scope: !17746)
!17748 = !DILocation(line: 756, column: 39, scope: !17739)
!17749 = !DILocation(line: 756, column: 5, scope: !17739)
!17750 = distinct !{!17750, !17742, !17751}
!17751 = !DILocation(line: 757, column: 7, scope: !17740)
!17752 = !DILocation(line: 759, column: 7, scope: !17753)
!17753 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 759, column: 7)
!17754 = !DILocation(line: 759, column: 13, scope: !17753)
!17755 = !DILocation(line: 759, column: 11, scope: !17753)
!17756 = !DILocation(line: 759, column: 7, scope: !16916)
!17757 = !DILocation(line: 760, column: 5, scope: !17753)
!17758 = !DILocation(line: 760, column: 12, scope: !17753)
!17759 = !DILocation(line: 760, column: 17, scope: !17753)
!17760 = !DILocation(line: 761, column: 10, scope: !16916)
!17761 = !DILocation(line: 761, column: 3, scope: !16916)
!17762 = !DILabel(scope: !16916, name: "force_outer_quoting_style", file: !1383, line: 763)
!17763 = !DILocation(line: 763, column: 2, scope: !16916)
!17764 = !DILocation(line: 766, column: 7, scope: !17765)
!17765 = distinct !DILexicalBlock(scope: !16916, file: !1383, line: 766, column: 7)
!17766 = !DILocation(line: 766, column: 21, scope: !17765)
!17767 = !DILocation(line: 766, column: 51, scope: !17765)
!17768 = !DILocation(line: 766, column: 54, scope: !17765)
!17769 = !DILocation(line: 766, column: 7, scope: !16916)
!17770 = !DILocation(line: 767, column: 19, scope: !17765)
!17771 = !DILocation(line: 767, column: 5, scope: !17765)
!17772 = !DILocation(line: 768, column: 36, scope: !16916)
!17773 = !DILocation(line: 768, column: 44, scope: !16916)
!17774 = !DILocation(line: 768, column: 56, scope: !16916)
!17775 = !DILocation(line: 768, column: 61, scope: !16916)
!17776 = !DILocation(line: 769, column: 36, scope: !16916)
!17777 = !DILocation(line: 770, column: 36, scope: !16916)
!17778 = !DILocation(line: 770, column: 42, scope: !16916)
!17779 = !DILocation(line: 771, column: 36, scope: !16916)
!17780 = !DILocation(line: 771, column: 48, scope: !16916)
!17781 = !DILocation(line: 768, column: 10, scope: !16916)
!17782 = !DILocation(line: 768, column: 3, scope: !16916)
!17783 = !DILocation(line: 772, column: 1, scope: !16916)
!17784 = distinct !DISubprogram(name: "gettext_quote", scope: !1383, file: !1383, line: 207, type: !17785, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17785 = !DISubroutineType(types: !17786)
!17786 = !{!146, !146, !95}
!17787 = !DILocalVariable(name: "msgid", arg: 1, scope: !17784, file: !1383, line: 207, type: !146)
!17788 = !DILocation(line: 207, column: 28, scope: !17784)
!17789 = !DILocalVariable(name: "s", arg: 2, scope: !17784, file: !1383, line: 207, type: !95)
!17790 = !DILocation(line: 207, column: 54, scope: !17784)
!17791 = !DILocalVariable(name: "translation", scope: !17784, file: !1383, line: 209, type: !146)
!17792 = !DILocation(line: 209, column: 15, scope: !17784)
!17793 = !DILocation(line: 209, column: 29, scope: !17784)
!17794 = !DILocalVariable(name: "locale_code", scope: !17784, file: !1383, line: 210, type: !146)
!17795 = !DILocation(line: 210, column: 15, scope: !17784)
!17796 = !DILocation(line: 212, column: 7, scope: !17797)
!17797 = distinct !DILexicalBlock(scope: !17784, file: !1383, line: 212, column: 7)
!17798 = !DILocation(line: 212, column: 22, scope: !17797)
!17799 = !DILocation(line: 212, column: 19, scope: !17797)
!17800 = !DILocation(line: 212, column: 7, scope: !17784)
!17801 = !DILocation(line: 213, column: 12, scope: !17797)
!17802 = !DILocation(line: 213, column: 5, scope: !17797)
!17803 = !DILocation(line: 233, column: 17, scope: !17784)
!17804 = !DILocation(line: 233, column: 15, scope: !17784)
!17805 = !DILocation(line: 234, column: 7, scope: !17806)
!17806 = distinct !DILexicalBlock(scope: !17784, file: !1383, line: 234, column: 7)
!17807 = !DILocation(line: 234, column: 7, scope: !17784)
!17808 = !DILocation(line: 235, column: 12, scope: !17806)
!17809 = !DILocation(line: 235, column: 21, scope: !17806)
!17810 = !DILocation(line: 235, column: 5, scope: !17806)
!17811 = !DILocation(line: 236, column: 7, scope: !17812)
!17812 = distinct !DILexicalBlock(scope: !17784, file: !1383, line: 236, column: 7)
!17813 = !DILocation(line: 236, column: 7, scope: !17784)
!17814 = !DILocation(line: 237, column: 12, scope: !17812)
!17815 = !DILocation(line: 237, column: 21, scope: !17812)
!17816 = !DILocation(line: 237, column: 5, scope: !17812)
!17817 = !DILocation(line: 239, column: 11, scope: !17784)
!17818 = !DILocation(line: 239, column: 13, scope: !17784)
!17819 = !DILocation(line: 239, column: 3, scope: !17784)
!17820 = !DILocation(line: 240, column: 1, scope: !17784)
!17821 = distinct !DISubprogram(name: "quotearg_alloc", scope: !1383, file: !1383, line: 799, type: !17822, scopeLine: 801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17822 = !DISubroutineType(types: !17823)
!17823 = !{!143, !146, !149, !1392}
!17824 = !DILocalVariable(name: "arg", arg: 1, scope: !17821, file: !1383, line: 799, type: !146)
!17825 = !DILocation(line: 799, column: 29, scope: !17821)
!17826 = !DILocalVariable(name: "argsize", arg: 2, scope: !17821, file: !1383, line: 799, type: !149)
!17827 = !DILocation(line: 799, column: 41, scope: !17821)
!17828 = !DILocalVariable(name: "o", arg: 3, scope: !17821, file: !1383, line: 800, type: !1392)
!17829 = !DILocation(line: 800, column: 47, scope: !17821)
!17830 = !DILocation(line: 802, column: 30, scope: !17821)
!17831 = !DILocation(line: 802, column: 35, scope: !17821)
!17832 = !DILocation(line: 802, column: 50, scope: !17821)
!17833 = !DILocation(line: 802, column: 10, scope: !17821)
!17834 = !DILocation(line: 802, column: 3, scope: !17821)
!17835 = distinct !DISubprogram(name: "quotearg_alloc_mem", scope: !1383, file: !1383, line: 812, type: !17836, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17836 = !DISubroutineType(types: !17837)
!17837 = !{!143, !146, !149, !148, !1392}
!17838 = !DILocalVariable(name: "arg", arg: 1, scope: !17835, file: !1383, line: 812, type: !146)
!17839 = !DILocation(line: 812, column: 33, scope: !17835)
!17840 = !DILocalVariable(name: "argsize", arg: 2, scope: !17835, file: !1383, line: 812, type: !149)
!17841 = !DILocation(line: 812, column: 45, scope: !17835)
!17842 = !DILocalVariable(name: "size", arg: 3, scope: !17835, file: !1383, line: 812, type: !148)
!17843 = !DILocation(line: 812, column: 62, scope: !17835)
!17844 = !DILocalVariable(name: "o", arg: 4, scope: !17835, file: !1383, line: 813, type: !1392)
!17845 = !DILocation(line: 813, column: 51, scope: !17835)
!17846 = !DILocalVariable(name: "p", scope: !17835, file: !1383, line: 815, type: !1392)
!17847 = !DILocation(line: 815, column: 33, scope: !17835)
!17848 = !DILocation(line: 815, column: 37, scope: !17835)
!17849 = !DILocation(line: 815, column: 41, scope: !17835)
!17850 = !DILocalVariable(name: "e", scope: !17835, file: !1383, line: 816, type: !27)
!17851 = !DILocation(line: 816, column: 7, scope: !17835)
!17852 = !DILocation(line: 816, column: 11, scope: !17835)
!17853 = !DILocalVariable(name: "flags", scope: !17835, file: !1383, line: 818, type: !27)
!17854 = !DILocation(line: 818, column: 7, scope: !17835)
!17855 = !DILocation(line: 818, column: 15, scope: !17835)
!17856 = !DILocation(line: 818, column: 18, scope: !17835)
!17857 = !DILocation(line: 818, column: 27, scope: !17835)
!17858 = !DILocation(line: 818, column: 24, scope: !17835)
!17859 = !DILocalVariable(name: "bufsize", scope: !17835, file: !1383, line: 819, type: !149)
!17860 = !DILocation(line: 819, column: 10, scope: !17835)
!17861 = !DILocation(line: 819, column: 52, scope: !17835)
!17862 = !DILocation(line: 819, column: 57, scope: !17835)
!17863 = !DILocation(line: 819, column: 66, scope: !17835)
!17864 = !DILocation(line: 819, column: 69, scope: !17835)
!17865 = !DILocation(line: 820, column: 46, scope: !17835)
!17866 = !DILocation(line: 820, column: 53, scope: !17835)
!17867 = !DILocation(line: 820, column: 56, scope: !17835)
!17868 = !DILocation(line: 821, column: 46, scope: !17835)
!17869 = !DILocation(line: 821, column: 49, scope: !17835)
!17870 = !DILocation(line: 822, column: 46, scope: !17835)
!17871 = !DILocation(line: 822, column: 49, scope: !17835)
!17872 = !DILocation(line: 819, column: 20, scope: !17835)
!17873 = !DILocation(line: 822, column: 62, scope: !17835)
!17874 = !DILocalVariable(name: "buf", scope: !17835, file: !1383, line: 823, type: !143)
!17875 = !DILocation(line: 823, column: 9, scope: !17835)
!17876 = !DILocation(line: 823, column: 27, scope: !17835)
!17877 = !DILocation(line: 823, column: 15, scope: !17835)
!17878 = !DILocation(line: 824, column: 29, scope: !17835)
!17879 = !DILocation(line: 824, column: 34, scope: !17835)
!17880 = !DILocation(line: 824, column: 43, scope: !17835)
!17881 = !DILocation(line: 824, column: 48, scope: !17835)
!17882 = !DILocation(line: 824, column: 57, scope: !17835)
!17883 = !DILocation(line: 824, column: 60, scope: !17835)
!17884 = !DILocation(line: 824, column: 67, scope: !17835)
!17885 = !DILocation(line: 825, column: 29, scope: !17835)
!17886 = !DILocation(line: 825, column: 32, scope: !17835)
!17887 = !DILocation(line: 826, column: 29, scope: !17835)
!17888 = !DILocation(line: 826, column: 32, scope: !17835)
!17889 = !DILocation(line: 826, column: 44, scope: !17835)
!17890 = !DILocation(line: 826, column: 47, scope: !17835)
!17891 = !DILocation(line: 824, column: 3, scope: !17835)
!17892 = !DILocation(line: 827, column: 11, scope: !17835)
!17893 = !DILocation(line: 827, column: 3, scope: !17835)
!17894 = !DILocation(line: 827, column: 9, scope: !17835)
!17895 = !DILocation(line: 828, column: 7, scope: !17896)
!17896 = distinct !DILexicalBlock(scope: !17835, file: !1383, line: 828, column: 7)
!17897 = !DILocation(line: 828, column: 7, scope: !17835)
!17898 = !DILocation(line: 829, column: 13, scope: !17896)
!17899 = !DILocation(line: 829, column: 21, scope: !17896)
!17900 = !DILocation(line: 829, column: 6, scope: !17896)
!17901 = !DILocation(line: 829, column: 11, scope: !17896)
!17902 = !DILocation(line: 829, column: 5, scope: !17896)
!17903 = !DILocation(line: 830, column: 10, scope: !17835)
!17904 = !DILocation(line: 830, column: 3, scope: !17835)
!17905 = distinct !DISubprogram(name: "quotearg_free", scope: !1383, file: !1383, line: 848, type: !532, scopeLine: 849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17906 = !DILocalVariable(name: "sv", scope: !17905, file: !1383, line: 850, type: !1395)
!17907 = !DILocation(line: 850, column: 19, scope: !17905)
!17908 = !DILocation(line: 850, column: 24, scope: !17905)
!17909 = !DILocalVariable(name: "i", scope: !17905, file: !1383, line: 851, type: !27)
!17910 = !DILocation(line: 851, column: 7, scope: !17905)
!17911 = !DILocation(line: 852, column: 10, scope: !17912)
!17912 = distinct !DILexicalBlock(scope: !17905, file: !1383, line: 852, column: 3)
!17913 = !DILocation(line: 852, column: 8, scope: !17912)
!17914 = !DILocation(line: 852, column: 15, scope: !17915)
!17915 = distinct !DILexicalBlock(scope: !17912, file: !1383, line: 852, column: 3)
!17916 = !DILocation(line: 852, column: 19, scope: !17915)
!17917 = !DILocation(line: 852, column: 17, scope: !17915)
!17918 = !DILocation(line: 852, column: 3, scope: !17912)
!17919 = !DILocation(line: 853, column: 11, scope: !17915)
!17920 = !DILocation(line: 853, column: 14, scope: !17915)
!17921 = !DILocation(line: 853, column: 17, scope: !17915)
!17922 = !DILocation(line: 853, column: 5, scope: !17915)
!17923 = !DILocation(line: 852, column: 28, scope: !17915)
!17924 = !DILocation(line: 852, column: 3, scope: !17915)
!17925 = distinct !{!17925, !17918, !17926}
!17926 = !DILocation(line: 853, column: 20, scope: !17912)
!17927 = !DILocation(line: 854, column: 7, scope: !17928)
!17928 = distinct !DILexicalBlock(scope: !17905, file: !1383, line: 854, column: 7)
!17929 = !DILocation(line: 854, column: 13, scope: !17928)
!17930 = !DILocation(line: 854, column: 17, scope: !17928)
!17931 = !DILocation(line: 854, column: 7, scope: !17905)
!17932 = !DILocation(line: 856, column: 13, scope: !17933)
!17933 = distinct !DILexicalBlock(scope: !17928, file: !1383, line: 855, column: 5)
!17934 = !DILocation(line: 856, column: 19, scope: !17933)
!17935 = !DILocation(line: 856, column: 7, scope: !17933)
!17936 = !DILocation(line: 857, column: 21, scope: !17933)
!17937 = !DILocation(line: 858, column: 20, scope: !17933)
!17938 = !DILocation(line: 859, column: 5, scope: !17933)
!17939 = !DILocation(line: 860, column: 7, scope: !17940)
!17940 = distinct !DILexicalBlock(scope: !17905, file: !1383, line: 860, column: 7)
!17941 = !DILocation(line: 860, column: 10, scope: !17940)
!17942 = !DILocation(line: 860, column: 7, scope: !17905)
!17943 = !DILocation(line: 862, column: 13, scope: !17944)
!17944 = distinct !DILexicalBlock(scope: !17940, file: !1383, line: 861, column: 5)
!17945 = !DILocation(line: 862, column: 7, scope: !17944)
!17946 = !DILocation(line: 863, column: 15, scope: !17944)
!17947 = !DILocation(line: 864, column: 5, scope: !17944)
!17948 = !DILocation(line: 865, column: 10, scope: !17905)
!17949 = !DILocation(line: 866, column: 1, scope: !17905)
!17950 = distinct !DISubprogram(name: "quotearg_n", scope: !1383, file: !1383, line: 931, type: !17951, scopeLine: 932, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17951 = !DISubroutineType(types: !17952)
!17952 = !{!143, !27, !146}
!17953 = !DILocalVariable(name: "n", arg: 1, scope: !17950, file: !1383, line: 931, type: !27)
!17954 = !DILocation(line: 931, column: 17, scope: !17950)
!17955 = !DILocalVariable(name: "arg", arg: 2, scope: !17950, file: !1383, line: 931, type: !146)
!17956 = !DILocation(line: 931, column: 32, scope: !17950)
!17957 = !DILocation(line: 933, column: 30, scope: !17950)
!17958 = !DILocation(line: 933, column: 33, scope: !17950)
!17959 = !DILocation(line: 933, column: 10, scope: !17950)
!17960 = !DILocation(line: 933, column: 3, scope: !17950)
!17961 = distinct !DISubprogram(name: "quotearg_n_options", scope: !1383, file: !1383, line: 877, type: !17962, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!17962 = !DISubroutineType(types: !17963)
!17963 = !{!143, !27, !146, !149, !1392}
!17964 = !DILocalVariable(name: "n", arg: 1, scope: !17961, file: !1383, line: 877, type: !27)
!17965 = !DILocation(line: 877, column: 25, scope: !17961)
!17966 = !DILocalVariable(name: "arg", arg: 2, scope: !17961, file: !1383, line: 877, type: !146)
!17967 = !DILocation(line: 877, column: 40, scope: !17961)
!17968 = !DILocalVariable(name: "argsize", arg: 3, scope: !17961, file: !1383, line: 877, type: !149)
!17969 = !DILocation(line: 877, column: 52, scope: !17961)
!17970 = !DILocalVariable(name: "options", arg: 4, scope: !17961, file: !1383, line: 878, type: !1392)
!17971 = !DILocation(line: 878, column: 51, scope: !17961)
!17972 = !DILocalVariable(name: "e", scope: !17961, file: !1383, line: 880, type: !27)
!17973 = !DILocation(line: 880, column: 7, scope: !17961)
!17974 = !DILocation(line: 880, column: 11, scope: !17961)
!17975 = !DILocalVariable(name: "sv", scope: !17961, file: !1383, line: 882, type: !1395)
!17976 = !DILocation(line: 882, column: 19, scope: !17961)
!17977 = !DILocation(line: 882, column: 24, scope: !17961)
!17978 = !DILocation(line: 884, column: 7, scope: !17979)
!17979 = distinct !DILexicalBlock(scope: !17961, file: !1383, line: 884, column: 7)
!17980 = !DILocation(line: 884, column: 9, scope: !17979)
!17981 = !DILocation(line: 884, column: 7, scope: !17961)
!17982 = !DILocation(line: 885, column: 5, scope: !17979)
!17983 = !DILocation(line: 887, column: 7, scope: !17984)
!17984 = distinct !DILexicalBlock(scope: !17961, file: !1383, line: 887, column: 7)
!17985 = !DILocation(line: 887, column: 17, scope: !17984)
!17986 = !DILocation(line: 887, column: 14, scope: !17984)
!17987 = !DILocation(line: 887, column: 7, scope: !17961)
!17988 = !DILocalVariable(name: "preallocated", scope: !17989, file: !1383, line: 889, type: !141)
!17989 = distinct !DILexicalBlock(scope: !17984, file: !1383, line: 888, column: 5)
!17990 = !DILocation(line: 889, column: 12, scope: !17989)
!17991 = !DILocation(line: 889, column: 28, scope: !17989)
!17992 = !DILocation(line: 889, column: 31, scope: !17989)
!17993 = !DILocalVariable(name: "nmax", scope: !17989, file: !1383, line: 890, type: !27)
!17994 = !DILocation(line: 890, column: 11, scope: !17989)
!17995 = !DILocation(line: 892, column: 11, scope: !17996)
!17996 = distinct !DILexicalBlock(scope: !17989, file: !1383, line: 892, column: 11)
!17997 = !DILocation(line: 892, column: 18, scope: !17996)
!17998 = !DILocation(line: 892, column: 16, scope: !17996)
!17999 = !DILocation(line: 892, column: 11, scope: !17989)
!18000 = !DILocation(line: 893, column: 9, scope: !17996)
!18001 = !DILocation(line: 895, column: 32, scope: !17989)
!18002 = !DILocation(line: 895, column: 54, scope: !17989)
!18003 = !DILocation(line: 895, column: 59, scope: !17989)
!18004 = !DILocation(line: 895, column: 61, scope: !17989)
!18005 = !DILocation(line: 895, column: 58, scope: !17989)
!18006 = !DILocation(line: 895, column: 66, scope: !17989)
!18007 = !DILocation(line: 895, column: 22, scope: !17989)
!18008 = !DILocation(line: 895, column: 20, scope: !17989)
!18009 = !DILocation(line: 895, column: 15, scope: !17989)
!18010 = !DILocation(line: 896, column: 11, scope: !18011)
!18011 = distinct !DILexicalBlock(scope: !17989, file: !1383, line: 896, column: 11)
!18012 = !DILocation(line: 896, column: 11, scope: !17989)
!18013 = !DILocation(line: 897, column: 10, scope: !18011)
!18014 = !DILocation(line: 897, column: 15, scope: !18011)
!18015 = !DILocation(line: 897, column: 9, scope: !18011)
!18016 = !DILocation(line: 898, column: 15, scope: !17989)
!18017 = !DILocation(line: 898, column: 20, scope: !17989)
!18018 = !DILocation(line: 898, column: 18, scope: !17989)
!18019 = !DILocation(line: 898, column: 7, scope: !17989)
!18020 = !DILocation(line: 898, column: 32, scope: !17989)
!18021 = !DILocation(line: 898, column: 34, scope: !17989)
!18022 = !DILocation(line: 898, column: 40, scope: !17989)
!18023 = !DILocation(line: 898, column: 38, scope: !17989)
!18024 = !DILocation(line: 898, column: 31, scope: !17989)
!18025 = !DILocation(line: 898, column: 48, scope: !17989)
!18026 = !DILocation(line: 899, column: 16, scope: !17989)
!18027 = !DILocation(line: 899, column: 18, scope: !17989)
!18028 = !DILocation(line: 899, column: 14, scope: !17989)
!18029 = !DILocation(line: 900, column: 5, scope: !17989)
!18030 = !DILocalVariable(name: "size", scope: !18031, file: !1383, line: 903, type: !149)
!18031 = distinct !DILexicalBlock(scope: !17961, file: !1383, line: 902, column: 3)
!18032 = !DILocation(line: 903, column: 12, scope: !18031)
!18033 = !DILocation(line: 903, column: 19, scope: !18031)
!18034 = !DILocation(line: 903, column: 22, scope: !18031)
!18035 = !DILocation(line: 903, column: 25, scope: !18031)
!18036 = !DILocalVariable(name: "val", scope: !18031, file: !1383, line: 904, type: !143)
!18037 = !DILocation(line: 904, column: 11, scope: !18031)
!18038 = !DILocation(line: 904, column: 17, scope: !18031)
!18039 = !DILocation(line: 904, column: 20, scope: !18031)
!18040 = !DILocation(line: 904, column: 23, scope: !18031)
!18041 = !DILocalVariable(name: "flags", scope: !18031, file: !1383, line: 906, type: !27)
!18042 = !DILocation(line: 906, column: 9, scope: !18031)
!18043 = !DILocation(line: 906, column: 17, scope: !18031)
!18044 = !DILocation(line: 906, column: 26, scope: !18031)
!18045 = !DILocation(line: 906, column: 32, scope: !18031)
!18046 = !DILocalVariable(name: "qsize", scope: !18031, file: !1383, line: 907, type: !149)
!18047 = !DILocation(line: 907, column: 12, scope: !18031)
!18048 = !DILocation(line: 907, column: 46, scope: !18031)
!18049 = !DILocation(line: 907, column: 51, scope: !18031)
!18050 = !DILocation(line: 907, column: 57, scope: !18031)
!18051 = !DILocation(line: 907, column: 62, scope: !18031)
!18052 = !DILocation(line: 908, column: 46, scope: !18031)
!18053 = !DILocation(line: 908, column: 55, scope: !18031)
!18054 = !DILocation(line: 908, column: 62, scope: !18031)
!18055 = !DILocation(line: 909, column: 46, scope: !18031)
!18056 = !DILocation(line: 909, column: 55, scope: !18031)
!18057 = !DILocation(line: 910, column: 46, scope: !18031)
!18058 = !DILocation(line: 910, column: 55, scope: !18031)
!18059 = !DILocation(line: 911, column: 46, scope: !18031)
!18060 = !DILocation(line: 911, column: 55, scope: !18031)
!18061 = !DILocation(line: 907, column: 20, scope: !18031)
!18062 = !DILocation(line: 913, column: 9, scope: !18063)
!18063 = distinct !DILexicalBlock(scope: !18031, file: !1383, line: 913, column: 9)
!18064 = !DILocation(line: 913, column: 17, scope: !18063)
!18065 = !DILocation(line: 913, column: 14, scope: !18063)
!18066 = !DILocation(line: 913, column: 9, scope: !18031)
!18067 = !DILocation(line: 915, column: 29, scope: !18068)
!18068 = distinct !DILexicalBlock(scope: !18063, file: !1383, line: 914, column: 7)
!18069 = !DILocation(line: 915, column: 35, scope: !18068)
!18070 = !DILocation(line: 915, column: 27, scope: !18068)
!18071 = !DILocation(line: 915, column: 9, scope: !18068)
!18072 = !DILocation(line: 915, column: 12, scope: !18068)
!18073 = !DILocation(line: 915, column: 15, scope: !18068)
!18074 = !DILocation(line: 915, column: 20, scope: !18068)
!18075 = !DILocation(line: 916, column: 13, scope: !18076)
!18076 = distinct !DILexicalBlock(scope: !18068, file: !1383, line: 916, column: 13)
!18077 = !DILocation(line: 916, column: 17, scope: !18076)
!18078 = !DILocation(line: 916, column: 13, scope: !18068)
!18079 = !DILocation(line: 917, column: 17, scope: !18076)
!18080 = !DILocation(line: 917, column: 11, scope: !18076)
!18081 = !DILocation(line: 918, column: 39, scope: !18068)
!18082 = !DILocation(line: 918, column: 27, scope: !18068)
!18083 = !DILocation(line: 918, column: 25, scope: !18068)
!18084 = !DILocation(line: 918, column: 9, scope: !18068)
!18085 = !DILocation(line: 918, column: 12, scope: !18068)
!18086 = !DILocation(line: 918, column: 15, scope: !18068)
!18087 = !DILocation(line: 918, column: 19, scope: !18068)
!18088 = !DILocation(line: 919, column: 35, scope: !18068)
!18089 = !DILocation(line: 919, column: 40, scope: !18068)
!18090 = !DILocation(line: 919, column: 46, scope: !18068)
!18091 = !DILocation(line: 919, column: 51, scope: !18068)
!18092 = !DILocation(line: 919, column: 60, scope: !18068)
!18093 = !DILocation(line: 919, column: 69, scope: !18068)
!18094 = !DILocation(line: 920, column: 35, scope: !18068)
!18095 = !DILocation(line: 920, column: 42, scope: !18068)
!18096 = !DILocation(line: 920, column: 51, scope: !18068)
!18097 = !DILocation(line: 921, column: 35, scope: !18068)
!18098 = !DILocation(line: 921, column: 44, scope: !18068)
!18099 = !DILocation(line: 922, column: 35, scope: !18068)
!18100 = !DILocation(line: 922, column: 44, scope: !18068)
!18101 = !DILocation(line: 919, column: 9, scope: !18068)
!18102 = !DILocation(line: 923, column: 7, scope: !18068)
!18103 = !DILocation(line: 925, column: 13, scope: !18031)
!18104 = !DILocation(line: 925, column: 5, scope: !18031)
!18105 = !DILocation(line: 925, column: 11, scope: !18031)
!18106 = !DILocation(line: 926, column: 12, scope: !18031)
!18107 = !DILocation(line: 926, column: 5, scope: !18031)
!18108 = distinct !DISubprogram(name: "quotearg_n_mem", scope: !1383, file: !1383, line: 937, type: !18109, scopeLine: 938, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18109 = !DISubroutineType(types: !18110)
!18110 = !{!143, !27, !146, !149}
!18111 = !DILocalVariable(name: "n", arg: 1, scope: !18108, file: !1383, line: 937, type: !27)
!18112 = !DILocation(line: 937, column: 21, scope: !18108)
!18113 = !DILocalVariable(name: "arg", arg: 2, scope: !18108, file: !1383, line: 937, type: !146)
!18114 = !DILocation(line: 937, column: 36, scope: !18108)
!18115 = !DILocalVariable(name: "argsize", arg: 3, scope: !18108, file: !1383, line: 937, type: !149)
!18116 = !DILocation(line: 937, column: 48, scope: !18108)
!18117 = !DILocation(line: 939, column: 30, scope: !18108)
!18118 = !DILocation(line: 939, column: 33, scope: !18108)
!18119 = !DILocation(line: 939, column: 38, scope: !18108)
!18120 = !DILocation(line: 939, column: 10, scope: !18108)
!18121 = !DILocation(line: 939, column: 3, scope: !18108)
!18122 = distinct !DISubprogram(name: "quotearg", scope: !1383, file: !1383, line: 943, type: !8592, scopeLine: 944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18123 = !DILocalVariable(name: "arg", arg: 1, scope: !18122, file: !1383, line: 943, type: !146)
!18124 = !DILocation(line: 943, column: 23, scope: !18122)
!18125 = !DILocation(line: 945, column: 25, scope: !18122)
!18126 = !DILocation(line: 945, column: 10, scope: !18122)
!18127 = !DILocation(line: 945, column: 3, scope: !18122)
!18128 = distinct !DISubprogram(name: "quotearg_mem", scope: !1383, file: !1383, line: 949, type: !8918, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18129 = !DILocalVariable(name: "arg", arg: 1, scope: !18128, file: !1383, line: 949, type: !146)
!18130 = !DILocation(line: 949, column: 27, scope: !18128)
!18131 = !DILocalVariable(name: "argsize", arg: 2, scope: !18128, file: !1383, line: 949, type: !149)
!18132 = !DILocation(line: 949, column: 39, scope: !18128)
!18133 = !DILocation(line: 951, column: 29, scope: !18128)
!18134 = !DILocation(line: 951, column: 34, scope: !18128)
!18135 = !DILocation(line: 951, column: 10, scope: !18128)
!18136 = !DILocation(line: 951, column: 3, scope: !18128)
!18137 = distinct !DISubprogram(name: "quotearg_n_style", scope: !1383, file: !1383, line: 955, type: !18138, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18138 = !DISubroutineType(types: !18139)
!18139 = !{!143, !27, !95, !146}
!18140 = !DILocalVariable(name: "n", arg: 1, scope: !18137, file: !1383, line: 955, type: !27)
!18141 = !DILocation(line: 955, column: 23, scope: !18137)
!18142 = !DILocalVariable(name: "s", arg: 2, scope: !18137, file: !1383, line: 955, type: !95)
!18143 = !DILocation(line: 955, column: 45, scope: !18137)
!18144 = !DILocalVariable(name: "arg", arg: 3, scope: !18137, file: !1383, line: 955, type: !146)
!18145 = !DILocation(line: 955, column: 60, scope: !18137)
!18146 = !DILocalVariable(name: "o", scope: !18137, file: !1383, line: 957, type: !1393)
!18147 = !DILocation(line: 957, column: 32, scope: !18137)
!18148 = !DILocation(line: 957, column: 64, scope: !18137)
!18149 = !DILocation(line: 957, column: 36, scope: !18137)
!18150 = !DILocation(line: 958, column: 30, scope: !18137)
!18151 = !DILocation(line: 958, column: 33, scope: !18137)
!18152 = !DILocation(line: 958, column: 10, scope: !18137)
!18153 = !DILocation(line: 958, column: 3, scope: !18137)
!18154 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !1383, file: !1383, line: 193, type: !18155, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18155 = !DISubroutineType(types: !18156)
!18156 = !{!1382, !95}
!18157 = !DILocalVariable(name: "style", arg: 1, scope: !18154, file: !1383, line: 193, type: !95)
!18158 = !DILocation(line: 193, column: 48, scope: !18154)
!18159 = !DILocalVariable(name: "o", scope: !18154, file: !1383, line: 195, type: !1382)
!18160 = !DILocation(line: 195, column: 26, scope: !18154)
!18161 = !DILocation(line: 196, column: 7, scope: !18162)
!18162 = distinct !DILexicalBlock(scope: !18154, file: !1383, line: 196, column: 7)
!18163 = !DILocation(line: 196, column: 13, scope: !18162)
!18164 = !DILocation(line: 196, column: 7, scope: !18154)
!18165 = !DILocation(line: 197, column: 5, scope: !18162)
!18166 = !DILocation(line: 198, column: 13, scope: !18154)
!18167 = !DILocation(line: 198, column: 5, scope: !18154)
!18168 = !DILocation(line: 198, column: 11, scope: !18154)
!18169 = !DILocation(line: 199, column: 3, scope: !18154)
!18170 = distinct !DISubprogram(name: "quotearg_n_style_mem", scope: !1383, file: !1383, line: 962, type: !18171, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18171 = !DISubroutineType(types: !18172)
!18172 = !{!143, !27, !95, !146, !149}
!18173 = !DILocalVariable(name: "n", arg: 1, scope: !18170, file: !1383, line: 962, type: !27)
!18174 = !DILocation(line: 962, column: 27, scope: !18170)
!18175 = !DILocalVariable(name: "s", arg: 2, scope: !18170, file: !1383, line: 962, type: !95)
!18176 = !DILocation(line: 962, column: 49, scope: !18170)
!18177 = !DILocalVariable(name: "arg", arg: 3, scope: !18170, file: !1383, line: 963, type: !146)
!18178 = !DILocation(line: 963, column: 35, scope: !18170)
!18179 = !DILocalVariable(name: "argsize", arg: 4, scope: !18170, file: !1383, line: 963, type: !149)
!18180 = !DILocation(line: 963, column: 47, scope: !18170)
!18181 = !DILocalVariable(name: "o", scope: !18170, file: !1383, line: 965, type: !1393)
!18182 = !DILocation(line: 965, column: 32, scope: !18170)
!18183 = !DILocation(line: 965, column: 64, scope: !18170)
!18184 = !DILocation(line: 965, column: 36, scope: !18170)
!18185 = !DILocation(line: 966, column: 30, scope: !18170)
!18186 = !DILocation(line: 966, column: 33, scope: !18170)
!18187 = !DILocation(line: 966, column: 38, scope: !18170)
!18188 = !DILocation(line: 966, column: 10, scope: !18170)
!18189 = !DILocation(line: 966, column: 3, scope: !18170)
!18190 = distinct !DISubprogram(name: "quotearg_style", scope: !1383, file: !1383, line: 970, type: !18191, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18191 = !DISubroutineType(types: !18192)
!18192 = !{!143, !95, !146}
!18193 = !DILocalVariable(name: "s", arg: 1, scope: !18190, file: !1383, line: 970, type: !95)
!18194 = !DILocation(line: 970, column: 36, scope: !18190)
!18195 = !DILocalVariable(name: "arg", arg: 2, scope: !18190, file: !1383, line: 970, type: !146)
!18196 = !DILocation(line: 970, column: 51, scope: !18190)
!18197 = !DILocation(line: 972, column: 31, scope: !18190)
!18198 = !DILocation(line: 972, column: 34, scope: !18190)
!18199 = !DILocation(line: 972, column: 10, scope: !18190)
!18200 = !DILocation(line: 972, column: 3, scope: !18190)
!18201 = distinct !DISubprogram(name: "quotearg_style_mem", scope: !1383, file: !1383, line: 976, type: !18202, scopeLine: 977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18202 = !DISubroutineType(types: !18203)
!18203 = !{!143, !95, !146, !149}
!18204 = !DILocalVariable(name: "s", arg: 1, scope: !18201, file: !1383, line: 976, type: !95)
!18205 = !DILocation(line: 976, column: 40, scope: !18201)
!18206 = !DILocalVariable(name: "arg", arg: 2, scope: !18201, file: !1383, line: 976, type: !146)
!18207 = !DILocation(line: 976, column: 55, scope: !18201)
!18208 = !DILocalVariable(name: "argsize", arg: 3, scope: !18201, file: !1383, line: 976, type: !149)
!18209 = !DILocation(line: 976, column: 67, scope: !18201)
!18210 = !DILocation(line: 978, column: 35, scope: !18201)
!18211 = !DILocation(line: 978, column: 38, scope: !18201)
!18212 = !DILocation(line: 978, column: 43, scope: !18201)
!18213 = !DILocation(line: 978, column: 10, scope: !18201)
!18214 = !DILocation(line: 978, column: 3, scope: !18201)
!18215 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !1383, file: !1383, line: 982, type: !18216, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18216 = !DISubroutineType(types: !18217)
!18217 = !{!143, !146, !149, !144}
!18218 = !DILocalVariable(name: "arg", arg: 1, scope: !18215, file: !1383, line: 982, type: !146)
!18219 = !DILocation(line: 982, column: 32, scope: !18215)
!18220 = !DILocalVariable(name: "argsize", arg: 2, scope: !18215, file: !1383, line: 982, type: !149)
!18221 = !DILocation(line: 982, column: 44, scope: !18215)
!18222 = !DILocalVariable(name: "ch", arg: 3, scope: !18215, file: !1383, line: 982, type: !144)
!18223 = !DILocation(line: 982, column: 58, scope: !18215)
!18224 = !DILocalVariable(name: "options", scope: !18215, file: !1383, line: 984, type: !1382)
!18225 = !DILocation(line: 984, column: 26, scope: !18215)
!18226 = !DILocation(line: 985, column: 13, scope: !18215)
!18227 = !DILocation(line: 986, column: 31, scope: !18215)
!18228 = !DILocation(line: 986, column: 3, scope: !18215)
!18229 = !DILocation(line: 987, column: 33, scope: !18215)
!18230 = !DILocation(line: 987, column: 38, scope: !18215)
!18231 = !DILocation(line: 987, column: 10, scope: !18215)
!18232 = !DILocation(line: 987, column: 3, scope: !18215)
!18233 = distinct !DISubprogram(name: "quotearg_char", scope: !1383, file: !1383, line: 991, type: !18234, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18234 = !DISubroutineType(types: !18235)
!18235 = !{!143, !146, !144}
!18236 = !DILocalVariable(name: "arg", arg: 1, scope: !18233, file: !1383, line: 991, type: !146)
!18237 = !DILocation(line: 991, column: 28, scope: !18233)
!18238 = !DILocalVariable(name: "ch", arg: 2, scope: !18233, file: !1383, line: 991, type: !144)
!18239 = !DILocation(line: 991, column: 38, scope: !18233)
!18240 = !DILocation(line: 993, column: 29, scope: !18233)
!18241 = !DILocation(line: 993, column: 44, scope: !18233)
!18242 = !DILocation(line: 993, column: 10, scope: !18233)
!18243 = !DILocation(line: 993, column: 3, scope: !18233)
!18244 = distinct !DISubprogram(name: "quotearg_colon", scope: !1383, file: !1383, line: 997, type: !8592, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18245 = !DILocalVariable(name: "arg", arg: 1, scope: !18244, file: !1383, line: 997, type: !146)
!18246 = !DILocation(line: 997, column: 29, scope: !18244)
!18247 = !DILocation(line: 999, column: 25, scope: !18244)
!18248 = !DILocation(line: 999, column: 10, scope: !18244)
!18249 = !DILocation(line: 999, column: 3, scope: !18244)
!18250 = distinct !DISubprogram(name: "quotearg_colon_mem", scope: !1383, file: !1383, line: 1003, type: !8918, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18251 = !DILocalVariable(name: "arg", arg: 1, scope: !18250, file: !1383, line: 1003, type: !146)
!18252 = !DILocation(line: 1003, column: 33, scope: !18250)
!18253 = !DILocalVariable(name: "argsize", arg: 2, scope: !18250, file: !1383, line: 1003, type: !149)
!18254 = !DILocation(line: 1003, column: 45, scope: !18250)
!18255 = !DILocation(line: 1005, column: 29, scope: !18250)
!18256 = !DILocation(line: 1005, column: 34, scope: !18250)
!18257 = !DILocation(line: 1005, column: 10, scope: !18250)
!18258 = !DILocation(line: 1005, column: 3, scope: !18250)
!18259 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !1383, file: !1383, line: 1009, type: !18138, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18260 = !DILocalVariable(name: "n", arg: 1, scope: !18259, file: !1383, line: 1009, type: !27)
!18261 = !DILocation(line: 1009, column: 29, scope: !18259)
!18262 = !DILocalVariable(name: "s", arg: 2, scope: !18259, file: !1383, line: 1009, type: !95)
!18263 = !DILocation(line: 1009, column: 51, scope: !18259)
!18264 = !DILocalVariable(name: "arg", arg: 3, scope: !18259, file: !1383, line: 1009, type: !146)
!18265 = !DILocation(line: 1009, column: 66, scope: !18259)
!18266 = !DILocalVariable(name: "options", scope: !18259, file: !1383, line: 1011, type: !1382)
!18267 = !DILocation(line: 1011, column: 26, scope: !18259)
!18268 = !DILocation(line: 1012, column: 41, scope: !18259)
!18269 = !DILocation(line: 1012, column: 13, scope: !18259)
!18270 = !DILocation(line: 1013, column: 3, scope: !18259)
!18271 = !DILocation(line: 1014, column: 30, scope: !18259)
!18272 = !DILocation(line: 1014, column: 33, scope: !18259)
!18273 = !DILocation(line: 1014, column: 10, scope: !18259)
!18274 = !DILocation(line: 1014, column: 3, scope: !18259)
!18275 = distinct !DISubprogram(name: "quotearg_n_custom", scope: !1383, file: !1383, line: 1018, type: !18276, scopeLine: 1020, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18276 = !DISubroutineType(types: !18277)
!18277 = !{!143, !27, !146, !146, !146}
!18278 = !DILocalVariable(name: "n", arg: 1, scope: !18275, file: !1383, line: 1018, type: !27)
!18279 = !DILocation(line: 1018, column: 24, scope: !18275)
!18280 = !DILocalVariable(name: "left_quote", arg: 2, scope: !18275, file: !1383, line: 1018, type: !146)
!18281 = !DILocation(line: 1018, column: 39, scope: !18275)
!18282 = !DILocalVariable(name: "right_quote", arg: 3, scope: !18275, file: !1383, line: 1019, type: !146)
!18283 = !DILocation(line: 1019, column: 32, scope: !18275)
!18284 = !DILocalVariable(name: "arg", arg: 4, scope: !18275, file: !1383, line: 1019, type: !146)
!18285 = !DILocation(line: 1019, column: 57, scope: !18275)
!18286 = !DILocation(line: 1021, column: 33, scope: !18275)
!18287 = !DILocation(line: 1021, column: 36, scope: !18275)
!18288 = !DILocation(line: 1021, column: 48, scope: !18275)
!18289 = !DILocation(line: 1021, column: 61, scope: !18275)
!18290 = !DILocation(line: 1021, column: 10, scope: !18275)
!18291 = !DILocation(line: 1021, column: 3, scope: !18275)
!18292 = distinct !DISubprogram(name: "quotearg_n_custom_mem", scope: !1383, file: !1383, line: 1026, type: !18293, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18293 = !DISubroutineType(types: !18294)
!18294 = !{!143, !27, !146, !146, !146, !149}
!18295 = !DILocalVariable(name: "n", arg: 1, scope: !18292, file: !1383, line: 1026, type: !27)
!18296 = !DILocation(line: 1026, column: 28, scope: !18292)
!18297 = !DILocalVariable(name: "left_quote", arg: 2, scope: !18292, file: !1383, line: 1026, type: !146)
!18298 = !DILocation(line: 1026, column: 43, scope: !18292)
!18299 = !DILocalVariable(name: "right_quote", arg: 3, scope: !18292, file: !1383, line: 1027, type: !146)
!18300 = !DILocation(line: 1027, column: 36, scope: !18292)
!18301 = !DILocalVariable(name: "arg", arg: 4, scope: !18292, file: !1383, line: 1028, type: !146)
!18302 = !DILocation(line: 1028, column: 36, scope: !18292)
!18303 = !DILocalVariable(name: "argsize", arg: 5, scope: !18292, file: !1383, line: 1028, type: !149)
!18304 = !DILocation(line: 1028, column: 48, scope: !18292)
!18305 = !DILocalVariable(name: "o", scope: !18292, file: !1383, line: 1030, type: !1382)
!18306 = !DILocation(line: 1030, column: 26, scope: !18292)
!18307 = !DILocation(line: 1030, column: 30, scope: !18292)
!18308 = !DILocation(line: 1031, column: 27, scope: !18292)
!18309 = !DILocation(line: 1031, column: 39, scope: !18292)
!18310 = !DILocation(line: 1031, column: 3, scope: !18292)
!18311 = !DILocation(line: 1032, column: 30, scope: !18292)
!18312 = !DILocation(line: 1032, column: 33, scope: !18292)
!18313 = !DILocation(line: 1032, column: 38, scope: !18292)
!18314 = !DILocation(line: 1032, column: 10, scope: !18292)
!18315 = !DILocation(line: 1032, column: 3, scope: !18292)
!18316 = distinct !DISubprogram(name: "quotearg_custom", scope: !1383, file: !1383, line: 1036, type: !18317, scopeLine: 1038, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18317 = !DISubroutineType(types: !18318)
!18318 = !{!143, !146, !146, !146}
!18319 = !DILocalVariable(name: "left_quote", arg: 1, scope: !18316, file: !1383, line: 1036, type: !146)
!18320 = !DILocation(line: 1036, column: 30, scope: !18316)
!18321 = !DILocalVariable(name: "right_quote", arg: 2, scope: !18316, file: !1383, line: 1036, type: !146)
!18322 = !DILocation(line: 1036, column: 54, scope: !18316)
!18323 = !DILocalVariable(name: "arg", arg: 3, scope: !18316, file: !1383, line: 1037, type: !146)
!18324 = !DILocation(line: 1037, column: 30, scope: !18316)
!18325 = !DILocation(line: 1039, column: 32, scope: !18316)
!18326 = !DILocation(line: 1039, column: 44, scope: !18316)
!18327 = !DILocation(line: 1039, column: 57, scope: !18316)
!18328 = !DILocation(line: 1039, column: 10, scope: !18316)
!18329 = !DILocation(line: 1039, column: 3, scope: !18316)
!18330 = distinct !DISubprogram(name: "quotearg_custom_mem", scope: !1383, file: !1383, line: 1043, type: !18331, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18331 = !DISubroutineType(types: !18332)
!18332 = !{!143, !146, !146, !146, !149}
!18333 = !DILocalVariable(name: "left_quote", arg: 1, scope: !18330, file: !1383, line: 1043, type: !146)
!18334 = !DILocation(line: 1043, column: 34, scope: !18330)
!18335 = !DILocalVariable(name: "right_quote", arg: 2, scope: !18330, file: !1383, line: 1043, type: !146)
!18336 = !DILocation(line: 1043, column: 58, scope: !18330)
!18337 = !DILocalVariable(name: "arg", arg: 3, scope: !18330, file: !1383, line: 1044, type: !146)
!18338 = !DILocation(line: 1044, column: 34, scope: !18330)
!18339 = !DILocalVariable(name: "argsize", arg: 4, scope: !18330, file: !1383, line: 1044, type: !149)
!18340 = !DILocation(line: 1044, column: 46, scope: !18330)
!18341 = !DILocation(line: 1046, column: 36, scope: !18330)
!18342 = !DILocation(line: 1046, column: 48, scope: !18330)
!18343 = !DILocation(line: 1046, column: 61, scope: !18330)
!18344 = !DILocation(line: 1047, column: 33, scope: !18330)
!18345 = !DILocation(line: 1046, column: 10, scope: !18330)
!18346 = !DILocation(line: 1046, column: 3, scope: !18330)
!18347 = distinct !DISubprogram(name: "quote_n_mem", scope: !1383, file: !1383, line: 1061, type: !18348, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18348 = !DISubroutineType(types: !18349)
!18349 = !{!146, !27, !146, !149}
!18350 = !DILocalVariable(name: "n", arg: 1, scope: !18347, file: !1383, line: 1061, type: !27)
!18351 = !DILocation(line: 1061, column: 18, scope: !18347)
!18352 = !DILocalVariable(name: "arg", arg: 2, scope: !18347, file: !1383, line: 1061, type: !146)
!18353 = !DILocation(line: 1061, column: 33, scope: !18347)
!18354 = !DILocalVariable(name: "argsize", arg: 3, scope: !18347, file: !1383, line: 1061, type: !149)
!18355 = !DILocation(line: 1061, column: 45, scope: !18347)
!18356 = !DILocation(line: 1063, column: 30, scope: !18347)
!18357 = !DILocation(line: 1063, column: 33, scope: !18347)
!18358 = !DILocation(line: 1063, column: 38, scope: !18347)
!18359 = !DILocation(line: 1063, column: 10, scope: !18347)
!18360 = !DILocation(line: 1063, column: 3, scope: !18347)
!18361 = distinct !DISubprogram(name: "quote_mem", scope: !1383, file: !1383, line: 1067, type: !18362, scopeLine: 1068, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18362 = !DISubroutineType(types: !18363)
!18363 = !{!146, !146, !149}
!18364 = !DILocalVariable(name: "arg", arg: 1, scope: !18361, file: !1383, line: 1067, type: !146)
!18365 = !DILocation(line: 1067, column: 24, scope: !18361)
!18366 = !DILocalVariable(name: "argsize", arg: 2, scope: !18361, file: !1383, line: 1067, type: !149)
!18367 = !DILocation(line: 1067, column: 36, scope: !18361)
!18368 = !DILocation(line: 1069, column: 26, scope: !18361)
!18369 = !DILocation(line: 1069, column: 31, scope: !18361)
!18370 = !DILocation(line: 1069, column: 10, scope: !18361)
!18371 = !DILocation(line: 1069, column: 3, scope: !18361)
!18372 = distinct !DISubprogram(name: "quote_n", scope: !1383, file: !1383, line: 1073, type: !18373, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18373 = !DISubroutineType(types: !18374)
!18374 = !{!146, !27, !146}
!18375 = !DILocalVariable(name: "n", arg: 1, scope: !18372, file: !1383, line: 1073, type: !27)
!18376 = !DILocation(line: 1073, column: 14, scope: !18372)
!18377 = !DILocalVariable(name: "arg", arg: 2, scope: !18372, file: !1383, line: 1073, type: !146)
!18378 = !DILocation(line: 1073, column: 29, scope: !18372)
!18379 = !DILocation(line: 1075, column: 23, scope: !18372)
!18380 = !DILocation(line: 1075, column: 26, scope: !18372)
!18381 = !DILocation(line: 1075, column: 10, scope: !18372)
!18382 = !DILocation(line: 1075, column: 3, scope: !18372)
!18383 = distinct !DISubprogram(name: "quote", scope: !1383, file: !1383, line: 1079, type: !8764, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1375, retainedNodes: !152)
!18384 = !DILocalVariable(name: "arg", arg: 1, scope: !18383, file: !1383, line: 1079, type: !146)
!18385 = !DILocation(line: 1079, column: 20, scope: !18383)
!18386 = !DILocation(line: 1081, column: 22, scope: !18383)
!18387 = !DILocation(line: 1081, column: 10, scope: !18383)
!18388 = !DILocation(line: 1081, column: 3, scope: !18383)
!18389 = distinct !DISubprogram(name: "same_name", scope: !18390, file: !18390, line: 61, type: !18391, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1618, retainedNodes: !152)
!18390 = !DIFile(filename: "lib/same.c", directory: "/home/mbarbar/software/coreutils-8.31")
!18391 = !DISubroutineType(types: !18392)
!18392 = !{!141, !146, !146}
!18393 = !DILocalVariable(name: "source", arg: 1, scope: !18389, file: !18390, line: 61, type: !146)
!18394 = !DILocation(line: 61, column: 24, scope: !18389)
!18395 = !DILocalVariable(name: "dest", arg: 2, scope: !18389, file: !18390, line: 61, type: !146)
!18396 = !DILocation(line: 61, column: 44, scope: !18389)
!18397 = !DILocation(line: 63, column: 33, scope: !18389)
!18398 = !DILocation(line: 63, column: 51, scope: !18389)
!18399 = !DILocation(line: 63, column: 10, scope: !18389)
!18400 = !DILocation(line: 63, column: 3, scope: !18389)
!18401 = distinct !DISubprogram(name: "same_nameat", scope: !18390, file: !18390, line: 70, type: !18402, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1618, retainedNodes: !152)
!18402 = !DISubroutineType(types: !18403)
!18403 = !{!141, !27, !146, !27, !146}
!18404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !18405)
!18405 = !{!18406, !18407, !18408, !18409, !18410, !18411, !18412, !18413, !18414, !18415, !18416, !18417, !18422, !18423, !18424}
!18406 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !18404, file: !192, line: 48, baseType: !195, size: 64)
!18407 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !18404, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!18408 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !18404, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!18409 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !18404, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!18410 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !18404, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!18411 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !18404, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!18412 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !18404, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!18413 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !18404, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!18414 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !18404, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!18415 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !18404, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!18416 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !18404, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!18417 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !18404, file: !192, line: 91, baseType: !18418, size: 128, offset: 576)
!18418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !18419)
!18419 = !{!18420, !18421}
!18420 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !18418, file: !215, line: 11, baseType: !164, size: 64)
!18421 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !18418, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!18422 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !18404, file: !192, line: 92, baseType: !18418, size: 128, offset: 704)
!18423 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !18404, file: !192, line: 93, baseType: !18418, size: 128, offset: 832)
!18424 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !18404, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!18425 = !DILocalVariable(name: "source_dfd", arg: 1, scope: !18401, file: !18390, line: 70, type: !27)
!18426 = !DILocation(line: 70, column: 18, scope: !18401)
!18427 = !DILocalVariable(name: "source", arg: 2, scope: !18401, file: !18390, line: 70, type: !146)
!18428 = !DILocation(line: 70, column: 42, scope: !18401)
!18429 = !DILocalVariable(name: "dest_dfd", arg: 3, scope: !18401, file: !18390, line: 71, type: !27)
!18430 = !DILocation(line: 71, column: 18, scope: !18401)
!18431 = !DILocalVariable(name: "dest", arg: 4, scope: !18401, file: !18390, line: 71, type: !146)
!18432 = !DILocation(line: 71, column: 40, scope: !18401)
!18433 = !DILocalVariable(name: "source_basename", scope: !18401, file: !18390, line: 74, type: !146)
!18434 = !DILocation(line: 74, column: 15, scope: !18401)
!18435 = !DILocation(line: 74, column: 49, scope: !18401)
!18436 = !DILocation(line: 74, column: 33, scope: !18401)
!18437 = !DILocalVariable(name: "dest_basename", scope: !18401, file: !18390, line: 75, type: !146)
!18438 = !DILocation(line: 75, column: 15, scope: !18401)
!18439 = !DILocation(line: 75, column: 47, scope: !18401)
!18440 = !DILocation(line: 75, column: 31, scope: !18401)
!18441 = !DILocalVariable(name: "source_baselen", scope: !18401, file: !18390, line: 76, type: !149)
!18442 = !DILocation(line: 76, column: 10, scope: !18401)
!18443 = !DILocation(line: 76, column: 37, scope: !18401)
!18444 = !DILocation(line: 76, column: 27, scope: !18401)
!18445 = !DILocalVariable(name: "dest_baselen", scope: !18401, file: !18390, line: 77, type: !149)
!18446 = !DILocation(line: 77, column: 10, scope: !18401)
!18447 = !DILocation(line: 77, column: 35, scope: !18401)
!18448 = !DILocation(line: 77, column: 25, scope: !18401)
!18449 = !DILocalVariable(name: "identical_basenames", scope: !18401, file: !18390, line: 78, type: !141)
!18450 = !DILocation(line: 78, column: 8, scope: !18401)
!18451 = !DILocation(line: 79, column: 6, scope: !18401)
!18452 = !DILocation(line: 79, column: 24, scope: !18401)
!18453 = !DILocation(line: 79, column: 21, scope: !18401)
!18454 = !DILocation(line: 80, column: 6, scope: !18401)
!18455 = !DILocation(line: 80, column: 17, scope: !18401)
!18456 = !DILocation(line: 80, column: 34, scope: !18401)
!18457 = !DILocation(line: 80, column: 49, scope: !18401)
!18458 = !DILocation(line: 80, column: 9, scope: !18401)
!18459 = !DILocation(line: 80, column: 63, scope: !18401)
!18460 = !DILocation(line: 0, scope: !18401)
!18461 = !DILocalVariable(name: "compare_dirs", scope: !18401, file: !18390, line: 81, type: !141)
!18462 = !DILocation(line: 81, column: 8, scope: !18401)
!18463 = !DILocation(line: 81, column: 23, scope: !18401)
!18464 = !DILocalVariable(name: "same", scope: !18401, file: !18390, line: 82, type: !141)
!18465 = !DILocation(line: 82, column: 8, scope: !18401)
!18466 = !DILocation(line: 92, column: 7, scope: !18467)
!18467 = distinct !DILexicalBlock(scope: !18401, file: !18390, line: 92, column: 7)
!18468 = !DILocation(line: 92, column: 7, scope: !18401)
!18469 = !DILocalVariable(name: "source_dir_stats", scope: !18470, file: !18390, line: 94, type: !18404)
!18470 = distinct !DILexicalBlock(scope: !18467, file: !18390, line: 93, column: 5)
!18471 = !DILocation(line: 94, column: 19, scope: !18470)
!18472 = !DILocalVariable(name: "dest_dir_stats", scope: !18470, file: !18390, line: 95, type: !18404)
!18473 = !DILocation(line: 95, column: 19, scope: !18470)
!18474 = !DILocalVariable(name: "source_dirname", scope: !18470, file: !18390, line: 98, type: !143)
!18475 = !DILocation(line: 98, column: 13, scope: !18470)
!18476 = !DILocation(line: 98, column: 40, scope: !18470)
!18477 = !DILocation(line: 98, column: 30, scope: !18470)
!18478 = !DILocalVariable(name: "flags", scope: !18470, file: !18390, line: 99, type: !27)
!18479 = !DILocation(line: 99, column: 11, scope: !18470)
!18480 = !DILocation(line: 100, column: 20, scope: !18481)
!18481 = distinct !DILexicalBlock(scope: !18470, file: !18390, line: 100, column: 11)
!18482 = !DILocation(line: 100, column: 32, scope: !18481)
!18483 = !DILocation(line: 100, column: 67, scope: !18481)
!18484 = !DILocation(line: 100, column: 11, scope: !18481)
!18485 = !DILocation(line: 100, column: 74, scope: !18481)
!18486 = !DILocation(line: 100, column: 11, scope: !18470)
!18487 = !DILocation(line: 103, column: 21, scope: !18488)
!18488 = distinct !DILexicalBlock(scope: !18481, file: !18390, line: 101, column: 9)
!18489 = !DILocation(line: 103, column: 34, scope: !18488)
!18490 = !DILocation(line: 103, column: 11, scope: !18488)
!18491 = !DILocation(line: 104, column: 9, scope: !18488)
!18492 = !DILocation(line: 105, column: 13, scope: !18470)
!18493 = !DILocation(line: 105, column: 7, scope: !18470)
!18494 = !DILocalVariable(name: "dest_dirname", scope: !18470, file: !18390, line: 107, type: !143)
!18495 = !DILocation(line: 107, column: 13, scope: !18470)
!18496 = !DILocation(line: 107, column: 38, scope: !18470)
!18497 = !DILocation(line: 107, column: 28, scope: !18470)
!18498 = !DILocation(line: 137, column: 20, scope: !18499)
!18499 = distinct !DILexicalBlock(scope: !18470, file: !18390, line: 137, column: 11)
!18500 = !DILocation(line: 137, column: 30, scope: !18499)
!18501 = !DILocation(line: 137, column: 61, scope: !18499)
!18502 = !DILocation(line: 137, column: 11, scope: !18499)
!18503 = !DILocation(line: 137, column: 68, scope: !18499)
!18504 = !DILocation(line: 137, column: 11, scope: !18470)
!18505 = !DILocation(line: 140, column: 21, scope: !18506)
!18506 = distinct !DILexicalBlock(scope: !18499, file: !18390, line: 138, column: 9)
!18507 = !DILocation(line: 140, column: 34, scope: !18506)
!18508 = !DILocation(line: 140, column: 11, scope: !18506)
!18509 = !DILocation(line: 141, column: 9, scope: !18506)
!18510 = !DILocation(line: 142, column: 14, scope: !18470)
!18511 = !DILocation(line: 0, scope: !18470)
!18512 = !DILocation(line: 142, column: 12, scope: !18470)
!18513 = !DILocation(line: 145, column: 13, scope: !18470)
!18514 = !DILocation(line: 145, column: 7, scope: !18470)
!18515 = !DILocation(line: 146, column: 5, scope: !18470)
!18516 = !DILocation(line: 148, column: 10, scope: !18401)
!18517 = !DILocation(line: 148, column: 3, scope: !18401)
!18518 = distinct !DISubprogram(name: "getcon", scope: !18519, file: !18519, line: 87, type: !18520, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18519 = !DIFile(filename: "./lib/selinux/selinux.h", directory: "/home/mbarbar/software/coreutils-8.31")
!18520 = !DISubroutineType(types: !18521)
!18521 = !{!27, !18522}
!18522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18523, size: 64)
!18523 = !DIDerivedType(tag: DW_TAG_typedef, name: "security_context_t", file: !18519, line: 83, baseType: !143)
!18524 = !DILocalVariable(name: "con", arg: 1, scope: !18518, file: !18519, line: 87, type: !18522)
!18525 = !DILocation(line: 87, column: 29, scope: !18518)
!18526 = !DILocation(line: 88, column: 5, scope: !18518)
!18527 = !DILocation(line: 88, column: 11, scope: !18518)
!18528 = !DILocation(line: 88, column: 22, scope: !18518)
!18529 = distinct !DISubprogram(name: "freecon", scope: !18519, file: !18519, line: 90, type: !18530, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18530 = !DISubroutineType(types: !18531)
!18531 = !{null, !18523}
!18532 = !DILocalVariable(name: "con", arg: 1, scope: !18529, file: !18519, line: 90, type: !18523)
!18533 = !DILocation(line: 90, column: 29, scope: !18529)
!18534 = !DILocation(line: 90, column: 56, scope: !18529)
!18535 = distinct !DISubprogram(name: "getfscreatecon", scope: !18519, file: !18519, line: 93, type: !18520, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18536 = !DILocalVariable(name: "con", arg: 1, scope: !18535, file: !18519, line: 93, type: !18522)
!18537 = !DILocation(line: 93, column: 37, scope: !18535)
!18538 = !DILocation(line: 94, column: 5, scope: !18535)
!18539 = !DILocation(line: 94, column: 11, scope: !18535)
!18540 = !DILocation(line: 94, column: 22, scope: !18535)
!18541 = distinct !DISubprogram(name: "setfscreatecon", scope: !18519, file: !18519, line: 96, type: !18542, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18542 = !DISubroutineType(types: !18543)
!18543 = !{!27, !18523}
!18544 = !DILocalVariable(name: "con", arg: 1, scope: !18541, file: !18519, line: 96, type: !18523)
!18545 = !DILocation(line: 96, column: 36, scope: !18541)
!18546 = !DILocation(line: 97, column: 5, scope: !18541)
!18547 = !DILocation(line: 97, column: 11, scope: !18541)
!18548 = !DILocation(line: 97, column: 22, scope: !18541)
!18549 = distinct !DISubprogram(name: "matchpathcon", scope: !18519, file: !18519, line: 99, type: !18550, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18550 = !DISubroutineType(types: !18551)
!18551 = !{!27, !146, !228, !18522}
!18552 = !DILocalVariable(name: "file", arg: 1, scope: !18549, file: !18519, line: 99, type: !146)
!18553 = !DILocation(line: 99, column: 27, scope: !18549)
!18554 = !DILocalVariable(name: "m", arg: 2, scope: !18549, file: !18519, line: 100, type: !228)
!18555 = !DILocation(line: 100, column: 22, scope: !18549)
!18556 = !DILocalVariable(name: "con", arg: 3, scope: !18549, file: !18519, line: 101, type: !18522)
!18557 = !DILocation(line: 101, column: 23, scope: !18549)
!18558 = !DILocation(line: 102, column: 5, scope: !18549)
!18559 = !DILocation(line: 102, column: 11, scope: !18549)
!18560 = !DILocation(line: 102, column: 22, scope: !18549)
!18561 = distinct !DISubprogram(name: "getfilecon", scope: !18519, file: !18519, line: 104, type: !18562, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18562 = !DISubroutineType(types: !18563)
!18563 = !{!27, !146, !18522}
!18564 = !DILocalVariable(name: "file", arg: 1, scope: !18561, file: !18519, line: 104, type: !146)
!18565 = !DILocation(line: 104, column: 25, scope: !18561)
!18566 = !DILocalVariable(name: "con", arg: 2, scope: !18561, file: !18519, line: 105, type: !18522)
!18567 = !DILocation(line: 105, column: 33, scope: !18561)
!18568 = !DILocation(line: 106, column: 5, scope: !18561)
!18569 = !DILocation(line: 106, column: 11, scope: !18561)
!18570 = !DILocation(line: 106, column: 22, scope: !18561)
!18571 = distinct !DISubprogram(name: "lgetfilecon", scope: !18519, file: !18519, line: 108, type: !18562, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18572 = !DILocalVariable(name: "file", arg: 1, scope: !18571, file: !18519, line: 108, type: !146)
!18573 = !DILocation(line: 108, column: 26, scope: !18571)
!18574 = !DILocalVariable(name: "con", arg: 2, scope: !18571, file: !18519, line: 109, type: !18522)
!18575 = !DILocation(line: 109, column: 34, scope: !18571)
!18576 = !DILocation(line: 110, column: 5, scope: !18571)
!18577 = !DILocation(line: 110, column: 11, scope: !18571)
!18578 = !DILocation(line: 110, column: 22, scope: !18571)
!18579 = distinct !DISubprogram(name: "fgetfilecon", scope: !18519, file: !18519, line: 112, type: !18580, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18580 = !DISubroutineType(types: !18581)
!18581 = !{!27, !27, !18522}
!18582 = !DILocalVariable(name: "fd", arg: 1, scope: !18579, file: !18519, line: 112, type: !27)
!18583 = !DILocation(line: 112, column: 18, scope: !18579)
!18584 = !DILocalVariable(name: "con", arg: 2, scope: !18579, file: !18519, line: 112, type: !18522)
!18585 = !DILocation(line: 112, column: 42, scope: !18579)
!18586 = !DILocation(line: 113, column: 5, scope: !18579)
!18587 = !DILocation(line: 113, column: 11, scope: !18579)
!18588 = !DILocation(line: 113, column: 22, scope: !18579)
!18589 = distinct !DISubprogram(name: "setfilecon", scope: !18519, file: !18519, line: 115, type: !18590, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18590 = !DISubroutineType(types: !18591)
!18591 = !{!27, !146, !18523}
!18592 = !DILocalVariable(name: "file", arg: 1, scope: !18589, file: !18519, line: 115, type: !146)
!18593 = !DILocation(line: 115, column: 25, scope: !18589)
!18594 = !DILocalVariable(name: "con", arg: 2, scope: !18589, file: !18519, line: 116, type: !18523)
!18595 = !DILocation(line: 116, column: 32, scope: !18589)
!18596 = !DILocation(line: 117, column: 5, scope: !18589)
!18597 = !DILocation(line: 117, column: 11, scope: !18589)
!18598 = !DILocation(line: 117, column: 22, scope: !18589)
!18599 = distinct !DISubprogram(name: "lsetfilecon", scope: !18519, file: !18519, line: 119, type: !18590, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18600 = !DILocalVariable(name: "file", arg: 1, scope: !18599, file: !18519, line: 119, type: !146)
!18601 = !DILocation(line: 119, column: 26, scope: !18599)
!18602 = !DILocalVariable(name: "con", arg: 2, scope: !18599, file: !18519, line: 120, type: !18523)
!18603 = !DILocation(line: 120, column: 33, scope: !18599)
!18604 = !DILocation(line: 121, column: 5, scope: !18599)
!18605 = !DILocation(line: 121, column: 11, scope: !18599)
!18606 = !DILocation(line: 121, column: 22, scope: !18599)
!18607 = distinct !DISubprogram(name: "fsetfilecon", scope: !18519, file: !18519, line: 123, type: !18608, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18608 = !DISubroutineType(types: !18609)
!18609 = !{!27, !27, !18523}
!18610 = !DILocalVariable(name: "fd", arg: 1, scope: !18607, file: !18519, line: 123, type: !27)
!18611 = !DILocation(line: 123, column: 18, scope: !18607)
!18612 = !DILocalVariable(name: "con", arg: 2, scope: !18607, file: !18519, line: 124, type: !18523)
!18613 = !DILocation(line: 124, column: 33, scope: !18607)
!18614 = !DILocation(line: 125, column: 5, scope: !18607)
!18615 = !DILocation(line: 125, column: 11, scope: !18607)
!18616 = !DILocation(line: 125, column: 22, scope: !18607)
!18617 = distinct !DISubprogram(name: "security_check_context", scope: !18519, file: !18519, line: 128, type: !18542, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18618 = !DILocalVariable(name: "con", arg: 1, scope: !18617, file: !18519, line: 128, type: !18523)
!18619 = !DILocation(line: 128, column: 44, scope: !18617)
!18620 = !DILocation(line: 129, column: 5, scope: !18617)
!18621 = !DILocation(line: 129, column: 11, scope: !18617)
!18622 = !DILocation(line: 129, column: 22, scope: !18617)
!18623 = distinct !DISubprogram(name: "security_check_context_raw", scope: !18519, file: !18519, line: 131, type: !18542, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18624 = !DILocalVariable(name: "con", arg: 1, scope: !18623, file: !18519, line: 131, type: !18523)
!18625 = !DILocation(line: 131, column: 48, scope: !18623)
!18626 = !DILocation(line: 132, column: 5, scope: !18623)
!18627 = !DILocation(line: 132, column: 11, scope: !18623)
!18628 = !DILocation(line: 132, column: 22, scope: !18623)
!18629 = distinct !DISubprogram(name: "setexeccon", scope: !18519, file: !18519, line: 134, type: !18542, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18630 = !DILocalVariable(name: "con", arg: 1, scope: !18629, file: !18519, line: 134, type: !18523)
!18631 = !DILocation(line: 134, column: 32, scope: !18629)
!18632 = !DILocation(line: 135, column: 5, scope: !18629)
!18633 = !DILocation(line: 135, column: 11, scope: !18629)
!18634 = !DILocation(line: 135, column: 22, scope: !18629)
!18635 = distinct !DISubprogram(name: "security_compute_create", scope: !18519, file: !18519, line: 137, type: !18636, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18636 = !DISubroutineType(types: !18637)
!18637 = !{!27, !18523, !18523, !18638, !18522}
!18638 = !DIDerivedType(tag: DW_TAG_typedef, name: "security_class_t", file: !18519, line: 82, baseType: !176)
!18639 = !DILocalVariable(name: "scon", arg: 1, scope: !18635, file: !18519, line: 137, type: !18523)
!18640 = !DILocation(line: 137, column: 45, scope: !18635)
!18641 = !DILocalVariable(name: "tcon", arg: 2, scope: !18635, file: !18519, line: 138, type: !18523)
!18642 = !DILocation(line: 138, column: 45, scope: !18635)
!18643 = !DILocalVariable(name: "tclass", arg: 3, scope: !18635, file: !18519, line: 139, type: !18638)
!18644 = !DILocation(line: 139, column: 43, scope: !18635)
!18645 = !DILocalVariable(name: "newcon", arg: 4, scope: !18635, file: !18519, line: 140, type: !18522)
!18646 = !DILocation(line: 140, column: 46, scope: !18635)
!18647 = !DILocation(line: 141, column: 5, scope: !18635)
!18648 = !DILocation(line: 141, column: 11, scope: !18635)
!18649 = !DILocation(line: 141, column: 22, scope: !18635)
!18650 = distinct !DISubprogram(name: "string_to_security_class", scope: !18519, file: !18519, line: 143, type: !18651, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18651 = !DISubroutineType(types: !18652)
!18652 = !{!18638, !146}
!18653 = !DILocalVariable(name: "name", arg: 1, scope: !18650, file: !18519, line: 143, type: !146)
!18654 = !DILocation(line: 143, column: 39, scope: !18650)
!18655 = !DILocation(line: 144, column: 5, scope: !18650)
!18656 = !DILocation(line: 144, column: 11, scope: !18650)
!18657 = !DILocation(line: 144, column: 22, scope: !18650)
!18658 = distinct !DISubprogram(name: "matchpathcon_init_prefix", scope: !18519, file: !18519, line: 146, type: !7725, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1621, retainedNodes: !152)
!18659 = !DILocalVariable(name: "path", arg: 1, scope: !18658, file: !18519, line: 146, type: !146)
!18660 = !DILocation(line: 146, column: 39, scope: !18658)
!18661 = !DILocalVariable(name: "prefix", arg: 2, scope: !18658, file: !18519, line: 147, type: !146)
!18662 = !DILocation(line: 147, column: 39, scope: !18658)
!18663 = !DILocation(line: 148, column: 5, scope: !18658)
!18664 = !DILocation(line: 148, column: 11, scope: !18658)
!18665 = !DILocation(line: 148, column: 22, scope: !18658)
!18666 = distinct !DISubprogram(name: "get_stat_atime_ns", scope: !18667, file: !18667, line: 66, type: !18668, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18667 = !DIFile(filename: "./lib/stat-time.h", directory: "/home/mbarbar/software/coreutils-8.31")
!18668 = !DISubroutineType(types: !18669)
!18669 = !{!166, !18670}
!18670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18671, size: 64)
!18671 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18672)
!18672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !192, line: 46, size: 1152, elements: !18673)
!18673 = !{!18674, !18675, !18676, !18677, !18678, !18679, !18680, !18681, !18682, !18683, !18684, !18685, !18690, !18691, !18692}
!18674 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !18672, file: !192, line: 48, baseType: !195, size: 64)
!18675 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !18672, file: !192, line: 53, baseType: !197, size: 64, offset: 64)
!18676 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !18672, file: !192, line: 61, baseType: !199, size: 64, offset: 128)
!18677 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !18672, file: !192, line: 62, baseType: !201, size: 32, offset: 192)
!18678 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !18672, file: !192, line: 64, baseType: !203, size: 32, offset: 224)
!18679 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !18672, file: !192, line: 65, baseType: !205, size: 32, offset: 256)
!18680 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !18672, file: !192, line: 67, baseType: !27, size: 32, offset: 288)
!18681 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !18672, file: !192, line: 69, baseType: !195, size: 64, offset: 320)
!18682 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !18672, file: !192, line: 74, baseType: !179, size: 64, offset: 384)
!18683 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !18672, file: !192, line: 78, baseType: !210, size: 64, offset: 448)
!18684 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !18672, file: !192, line: 80, baseType: !212, size: 64, offset: 512)
!18685 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !18672, file: !192, line: 91, baseType: !18686, size: 128, offset: 576)
!18686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !18687)
!18687 = !{!18688, !18689}
!18688 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !18686, file: !215, line: 11, baseType: !164, size: 64)
!18689 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !18686, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!18690 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !18672, file: !192, line: 92, baseType: !18686, size: 128, offset: 704)
!18691 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !18672, file: !192, line: 93, baseType: !18686, size: 128, offset: 832)
!18692 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !18672, file: !192, line: 106, baseType: !223, size: 192, offset: 960)
!18693 = !DILocalVariable(name: "st", arg: 1, scope: !18666, file: !18667, line: 66, type: !18670)
!18694 = !DILocation(line: 66, column: 39, scope: !18666)
!18695 = !DILocation(line: 69, column: 10, scope: !18666)
!18696 = !DILocation(line: 69, column: 38, scope: !18666)
!18697 = !DILocation(line: 69, column: 3, scope: !18666)
!18698 = distinct !DISubprogram(name: "get_stat_ctime_ns", scope: !18667, file: !18667, line: 79, type: !18668, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18699 = !DILocalVariable(name: "st", arg: 1, scope: !18698, file: !18667, line: 79, type: !18670)
!18700 = !DILocation(line: 79, column: 39, scope: !18698)
!18701 = !DILocation(line: 82, column: 10, scope: !18698)
!18702 = !DILocation(line: 82, column: 38, scope: !18698)
!18703 = !DILocation(line: 82, column: 3, scope: !18698)
!18704 = distinct !DISubprogram(name: "get_stat_mtime_ns", scope: !18667, file: !18667, line: 92, type: !18668, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18705 = !DILocalVariable(name: "st", arg: 1, scope: !18704, file: !18667, line: 92, type: !18670)
!18706 = !DILocation(line: 92, column: 39, scope: !18704)
!18707 = !DILocation(line: 95, column: 10, scope: !18704)
!18708 = !DILocation(line: 95, column: 38, scope: !18704)
!18709 = !DILocation(line: 95, column: 3, scope: !18704)
!18710 = distinct !DISubprogram(name: "get_stat_birthtime_ns", scope: !18667, file: !18667, line: 105, type: !18668, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18711 = !DILocalVariable(name: "st", arg: 1, scope: !18710, file: !18667, line: 105, type: !18670)
!18712 = !DILocation(line: 105, column: 43, scope: !18710)
!18713 = !DILocation(line: 112, column: 3, scope: !18710)
!18714 = distinct !DISubprogram(name: "get_stat_atime", scope: !18667, file: !18667, line: 118, type: !18715, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18715 = !DISubroutineType(types: !18716)
!18716 = !{!18686, !18670}
!18717 = !DILocalVariable(name: "st", arg: 1, scope: !18714, file: !18667, line: 118, type: !18670)
!18718 = !DILocation(line: 118, column: 36, scope: !18714)
!18719 = !DILocation(line: 121, column: 10, scope: !18714)
!18720 = !DILocation(line: 121, column: 3, scope: !18714)
!18721 = distinct !DISubprogram(name: "get_stat_ctime", scope: !18667, file: !18667, line: 132, type: !18715, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18722 = !DILocalVariable(name: "st", arg: 1, scope: !18721, file: !18667, line: 132, type: !18670)
!18723 = !DILocation(line: 132, column: 36, scope: !18721)
!18724 = !DILocation(line: 135, column: 10, scope: !18721)
!18725 = !DILocation(line: 135, column: 3, scope: !18721)
!18726 = distinct !DISubprogram(name: "get_stat_mtime", scope: !18667, file: !18667, line: 146, type: !18715, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18727 = !DILocalVariable(name: "st", arg: 1, scope: !18726, file: !18667, line: 146, type: !18670)
!18728 = !DILocation(line: 146, column: 36, scope: !18726)
!18729 = !DILocation(line: 149, column: 10, scope: !18726)
!18730 = !DILocation(line: 149, column: 3, scope: !18726)
!18731 = distinct !DISubprogram(name: "get_stat_birthtime", scope: !18667, file: !18667, line: 161, type: !18715, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18732 = !DILocalVariable(name: "st", arg: 1, scope: !18731, file: !18667, line: 161, type: !18670)
!18733 = !DILocation(line: 161, column: 40, scope: !18731)
!18734 = !DILocalVariable(name: "t", scope: !18731, file: !18667, line: 163, type: !18686)
!18735 = !DILocation(line: 163, column: 19, scope: !18731)
!18736 = !DILocation(line: 183, column: 5, scope: !18731)
!18737 = !DILocation(line: 183, column: 12, scope: !18731)
!18738 = !DILocation(line: 184, column: 5, scope: !18731)
!18739 = !DILocation(line: 184, column: 13, scope: !18731)
!18740 = !DILocation(line: 202, column: 3, scope: !18731)
!18741 = distinct !DISubprogram(name: "stat_time_normalize", scope: !18667, file: !18667, line: 211, type: !18742, scopeLine: 212, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1623, retainedNodes: !152)
!18742 = !DISubroutineType(types: !18743)
!18743 = !{!27, !27, !18744}
!18744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18672, size: 64)
!18745 = !DILocalVariable(name: "result", arg: 1, scope: !18741, file: !18667, line: 211, type: !27)
!18746 = !DILocation(line: 211, column: 26, scope: !18741)
!18747 = !DILocalVariable(name: "st", arg: 2, scope: !18741, file: !18667, line: 211, type: !18744)
!18748 = !DILocation(line: 211, column: 47, scope: !18741)
!18749 = !DILocation(line: 243, column: 10, scope: !18741)
!18750 = !DILocation(line: 243, column: 3, scope: !18741)
!18751 = distinct !DISubprogram(name: "make_timespec", scope: !18752, file: !18752, line: 54, type: !18753, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1626, retainedNodes: !152)
!18752 = !DIFile(filename: "./lib/timespec.h", directory: "/home/mbarbar/software/coreutils-8.31")
!18753 = !DISubroutineType(types: !18754)
!18754 = !{!18755, !162, !166}
!18755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !215, line: 9, size: 128, elements: !18756)
!18756 = !{!18757, !18758}
!18757 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !18755, file: !215, line: 11, baseType: !164, size: 64)
!18758 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !18755, file: !215, line: 12, baseType: !219, size: 64, offset: 64)
!18759 = !DILocalVariable(name: "s", arg: 1, scope: !18751, file: !18752, line: 54, type: !162)
!18760 = !DILocation(line: 54, column: 23, scope: !18751)
!18761 = !DILocalVariable(name: "ns", arg: 2, scope: !18751, file: !18752, line: 54, type: !166)
!18762 = !DILocation(line: 54, column: 35, scope: !18751)
!18763 = !DILocalVariable(name: "r", scope: !18751, file: !18752, line: 56, type: !18755)
!18764 = !DILocation(line: 56, column: 19, scope: !18751)
!18765 = !DILocation(line: 57, column: 14, scope: !18751)
!18766 = !DILocation(line: 57, column: 5, scope: !18751)
!18767 = !DILocation(line: 57, column: 12, scope: !18751)
!18768 = !DILocation(line: 58, column: 15, scope: !18751)
!18769 = !DILocation(line: 58, column: 5, scope: !18751)
!18770 = !DILocation(line: 58, column: 13, scope: !18751)
!18771 = !DILocation(line: 59, column: 3, scope: !18751)
!18772 = distinct !DISubprogram(name: "timespec_cmp", scope: !18752, file: !18752, line: 89, type: !18773, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1626, retainedNodes: !152)
!18773 = !DISubroutineType(types: !18774)
!18774 = !{!27, !18755, !18755}
!18775 = !DILocalVariable(name: "a", arg: 1, scope: !18772, file: !18752, line: 89, type: !18755)
!18776 = !DILocation(line: 89, column: 31, scope: !18772)
!18777 = !DILocalVariable(name: "b", arg: 2, scope: !18772, file: !18752, line: 89, type: !18755)
!18778 = !DILocation(line: 89, column: 50, scope: !18772)
!18779 = !DILocation(line: 91, column: 9, scope: !18780)
!18780 = distinct !DILexicalBlock(scope: !18772, file: !18752, line: 91, column: 7)
!18781 = !DILocation(line: 91, column: 20, scope: !18780)
!18782 = !DILocation(line: 91, column: 16, scope: !18780)
!18783 = !DILocation(line: 91, column: 7, scope: !18772)
!18784 = !DILocation(line: 92, column: 5, scope: !18780)
!18785 = !DILocation(line: 93, column: 9, scope: !18786)
!18786 = distinct !DILexicalBlock(scope: !18772, file: !18752, line: 93, column: 7)
!18787 = !DILocation(line: 93, column: 20, scope: !18786)
!18788 = !DILocation(line: 93, column: 16, scope: !18786)
!18789 = !DILocation(line: 93, column: 7, scope: !18772)
!18790 = !DILocation(line: 94, column: 5, scope: !18786)
!18791 = !DILocation(line: 98, column: 3, scope: !18772)
!18792 = !DILocation(line: 99, column: 3, scope: !18772)
!18793 = !DILocation(line: 101, column: 12, scope: !18772)
!18794 = !DILocation(line: 101, column: 24, scope: !18772)
!18795 = !DILocation(line: 101, column: 20, scope: !18772)
!18796 = !DILocation(line: 101, column: 10, scope: !18772)
!18797 = !DILocation(line: 101, column: 3, scope: !18772)
!18798 = !DILocation(line: 102, column: 1, scope: !18772)
!18799 = distinct !DISubprogram(name: "timespec_sign", scope: !18752, file: !18752, line: 107, type: !18800, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1626, retainedNodes: !152)
!18800 = !DISubroutineType(types: !18801)
!18801 = !{!27, !18755}
!18802 = !DILocalVariable(name: "a", arg: 1, scope: !18799, file: !18752, line: 107, type: !18755)
!18803 = !DILocation(line: 107, column: 32, scope: !18799)
!18804 = !DILocation(line: 109, column: 12, scope: !18799)
!18805 = !DILocation(line: 109, column: 19, scope: !18799)
!18806 = !DILocation(line: 109, column: 10, scope: !18799)
!18807 = !DILocation(line: 109, column: 32, scope: !18799)
!18808 = !DILocation(line: 109, column: 30, scope: !18799)
!18809 = !DILocation(line: 109, column: 39, scope: !18799)
!18810 = !DILocation(line: 109, column: 44, scope: !18799)
!18811 = !DILocation(line: 109, column: 3, scope: !18799)
!18812 = distinct !DISubprogram(name: "timespectod", scope: !18752, file: !18752, line: 121, type: !18813, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1626, retainedNodes: !152)
!18813 = !DISubroutineType(types: !18814)
!18814 = !{!18815, !18755}
!18815 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!18816 = !DILocalVariable(name: "a", arg: 1, scope: !18812, file: !18752, line: 121, type: !18755)
!18817 = !DILocation(line: 121, column: 30, scope: !18812)
!18818 = !DILocation(line: 123, column: 12, scope: !18812)
!18819 = !DILocation(line: 123, column: 10, scope: !18812)
!18820 = !DILocation(line: 123, column: 23, scope: !18812)
!18821 = !DILocation(line: 123, column: 21, scope: !18812)
!18822 = !DILocation(line: 123, column: 31, scope: !18812)
!18823 = !DILocation(line: 123, column: 19, scope: !18812)
!18824 = !DILocation(line: 123, column: 3, scope: !18812)
!18825 = distinct !DISubprogram(name: "version_etc_arn", scope: !18826, file: !18826, line: 61, type: !18827, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1629, retainedNodes: !152)
!18826 = !DIFile(filename: "lib/version-etc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!18827 = !DISubroutineType(types: !18828)
!18828 = !{null, !1657, !146, !146, !146, !693, !149}
!18829 = !DILocalVariable(name: "stream", arg: 1, scope: !18825, file: !18826, line: 61, type: !1657)
!18830 = !DILocation(line: 61, column: 24, scope: !18825)
!18831 = !DILocalVariable(name: "command_name", arg: 2, scope: !18825, file: !18826, line: 62, type: !146)
!18832 = !DILocation(line: 62, column: 30, scope: !18825)
!18833 = !DILocalVariable(name: "package", arg: 3, scope: !18825, file: !18826, line: 62, type: !146)
!18834 = !DILocation(line: 62, column: 56, scope: !18825)
!18835 = !DILocalVariable(name: "version", arg: 4, scope: !18825, file: !18826, line: 63, type: !146)
!18836 = !DILocation(line: 63, column: 30, scope: !18825)
!18837 = !DILocalVariable(name: "authors", arg: 5, scope: !18825, file: !18826, line: 64, type: !693)
!18838 = !DILocation(line: 64, column: 39, scope: !18825)
!18839 = !DILocalVariable(name: "n_authors", arg: 6, scope: !18825, file: !18826, line: 64, type: !149)
!18840 = !DILocation(line: 64, column: 55, scope: !18825)
!18841 = !DILocation(line: 66, column: 7, scope: !18842)
!18842 = distinct !DILexicalBlock(scope: !18825, file: !18826, line: 66, column: 7)
!18843 = !DILocation(line: 66, column: 7, scope: !18825)
!18844 = !DILocation(line: 67, column: 14, scope: !18842)
!18845 = !DILocation(line: 67, column: 38, scope: !18842)
!18846 = !DILocation(line: 67, column: 52, scope: !18842)
!18847 = !DILocation(line: 67, column: 61, scope: !18842)
!18848 = !DILocation(line: 67, column: 5, scope: !18842)
!18849 = !DILocation(line: 69, column: 14, scope: !18842)
!18850 = !DILocation(line: 69, column: 33, scope: !18842)
!18851 = !DILocation(line: 69, column: 42, scope: !18842)
!18852 = !DILocation(line: 69, column: 5, scope: !18842)
!18853 = !DILocation(line: 83, column: 12, scope: !18825)
!18854 = !DILocation(line: 83, column: 43, scope: !18825)
!18855 = !DILocation(line: 83, column: 3, scope: !18825)
!18856 = !DILocation(line: 85, column: 3, scope: !18825)
!18857 = !DILocation(line: 94, column: 11, scope: !18825)
!18858 = !DILocation(line: 94, column: 3, scope: !18825)
!18859 = !DILocation(line: 99, column: 7, scope: !18860)
!18860 = distinct !DILexicalBlock(scope: !18825, file: !18826, line: 95, column: 5)
!18861 = !DILocation(line: 102, column: 16, scope: !18860)
!18862 = !DILocation(line: 102, column: 24, scope: !18860)
!18863 = !DILocation(line: 102, column: 47, scope: !18860)
!18864 = !DILocation(line: 102, column: 7, scope: !18860)
!18865 = !DILocation(line: 103, column: 7, scope: !18860)
!18866 = !DILocation(line: 106, column: 16, scope: !18860)
!18867 = !DILocation(line: 106, column: 24, scope: !18860)
!18868 = !DILocation(line: 106, column: 54, scope: !18860)
!18869 = !DILocation(line: 106, column: 66, scope: !18860)
!18870 = !DILocation(line: 106, column: 7, scope: !18860)
!18871 = !DILocation(line: 107, column: 7, scope: !18860)
!18872 = !DILocation(line: 110, column: 16, scope: !18860)
!18873 = !DILocation(line: 110, column: 24, scope: !18860)
!18874 = !DILocation(line: 111, column: 16, scope: !18860)
!18875 = !DILocation(line: 111, column: 28, scope: !18860)
!18876 = !DILocation(line: 111, column: 40, scope: !18860)
!18877 = !DILocation(line: 110, column: 7, scope: !18860)
!18878 = !DILocation(line: 112, column: 7, scope: !18860)
!18879 = !DILocation(line: 117, column: 16, scope: !18860)
!18880 = !DILocation(line: 117, column: 24, scope: !18860)
!18881 = !DILocation(line: 118, column: 16, scope: !18860)
!18882 = !DILocation(line: 118, column: 28, scope: !18860)
!18883 = !DILocation(line: 118, column: 40, scope: !18860)
!18884 = !DILocation(line: 118, column: 52, scope: !18860)
!18885 = !DILocation(line: 117, column: 7, scope: !18860)
!18886 = !DILocation(line: 119, column: 7, scope: !18860)
!18887 = !DILocation(line: 124, column: 16, scope: !18860)
!18888 = !DILocation(line: 124, column: 24, scope: !18860)
!18889 = !DILocation(line: 125, column: 16, scope: !18860)
!18890 = !DILocation(line: 125, column: 28, scope: !18860)
!18891 = !DILocation(line: 125, column: 40, scope: !18860)
!18892 = !DILocation(line: 125, column: 52, scope: !18860)
!18893 = !DILocation(line: 125, column: 64, scope: !18860)
!18894 = !DILocation(line: 124, column: 7, scope: !18860)
!18895 = !DILocation(line: 126, column: 7, scope: !18860)
!18896 = !DILocation(line: 131, column: 16, scope: !18860)
!18897 = !DILocation(line: 131, column: 24, scope: !18860)
!18898 = !DILocation(line: 132, column: 16, scope: !18860)
!18899 = !DILocation(line: 132, column: 28, scope: !18860)
!18900 = !DILocation(line: 132, column: 40, scope: !18860)
!18901 = !DILocation(line: 132, column: 52, scope: !18860)
!18902 = !DILocation(line: 132, column: 64, scope: !18860)
!18903 = !DILocation(line: 133, column: 16, scope: !18860)
!18904 = !DILocation(line: 131, column: 7, scope: !18860)
!18905 = !DILocation(line: 134, column: 7, scope: !18860)
!18906 = !DILocation(line: 139, column: 16, scope: !18860)
!18907 = !DILocation(line: 139, column: 24, scope: !18860)
!18908 = !DILocation(line: 140, column: 16, scope: !18860)
!18909 = !DILocation(line: 140, column: 28, scope: !18860)
!18910 = !DILocation(line: 140, column: 40, scope: !18860)
!18911 = !DILocation(line: 140, column: 52, scope: !18860)
!18912 = !DILocation(line: 140, column: 64, scope: !18860)
!18913 = !DILocation(line: 141, column: 16, scope: !18860)
!18914 = !DILocation(line: 141, column: 28, scope: !18860)
!18915 = !DILocation(line: 139, column: 7, scope: !18860)
!18916 = !DILocation(line: 142, column: 7, scope: !18860)
!18917 = !DILocation(line: 147, column: 16, scope: !18860)
!18918 = !DILocation(line: 147, column: 24, scope: !18860)
!18919 = !DILocation(line: 149, column: 17, scope: !18860)
!18920 = !DILocation(line: 149, column: 29, scope: !18860)
!18921 = !DILocation(line: 149, column: 41, scope: !18860)
!18922 = !DILocation(line: 149, column: 53, scope: !18860)
!18923 = !DILocation(line: 149, column: 65, scope: !18860)
!18924 = !DILocation(line: 150, column: 17, scope: !18860)
!18925 = !DILocation(line: 150, column: 29, scope: !18860)
!18926 = !DILocation(line: 150, column: 41, scope: !18860)
!18927 = !DILocation(line: 147, column: 7, scope: !18860)
!18928 = !DILocation(line: 151, column: 7, scope: !18860)
!18929 = !DILocation(line: 156, column: 16, scope: !18860)
!18930 = !DILocation(line: 156, column: 24, scope: !18860)
!18931 = !DILocation(line: 158, column: 16, scope: !18860)
!18932 = !DILocation(line: 158, column: 28, scope: !18860)
!18933 = !DILocation(line: 158, column: 40, scope: !18860)
!18934 = !DILocation(line: 158, column: 52, scope: !18860)
!18935 = !DILocation(line: 158, column: 64, scope: !18860)
!18936 = !DILocation(line: 159, column: 16, scope: !18860)
!18937 = !DILocation(line: 159, column: 28, scope: !18860)
!18938 = !DILocation(line: 159, column: 40, scope: !18860)
!18939 = !DILocation(line: 159, column: 52, scope: !18860)
!18940 = !DILocation(line: 156, column: 7, scope: !18860)
!18941 = !DILocation(line: 160, column: 7, scope: !18860)
!18942 = !DILocation(line: 167, column: 16, scope: !18860)
!18943 = !DILocation(line: 167, column: 24, scope: !18860)
!18944 = !DILocation(line: 169, column: 17, scope: !18860)
!18945 = !DILocation(line: 169, column: 29, scope: !18860)
!18946 = !DILocation(line: 169, column: 41, scope: !18860)
!18947 = !DILocation(line: 169, column: 53, scope: !18860)
!18948 = !DILocation(line: 169, column: 65, scope: !18860)
!18949 = !DILocation(line: 170, column: 17, scope: !18860)
!18950 = !DILocation(line: 170, column: 29, scope: !18860)
!18951 = !DILocation(line: 170, column: 41, scope: !18860)
!18952 = !DILocation(line: 170, column: 53, scope: !18860)
!18953 = !DILocation(line: 167, column: 7, scope: !18860)
!18954 = !DILocation(line: 171, column: 7, scope: !18860)
!18955 = !DILocation(line: 173, column: 1, scope: !18825)
!18956 = distinct !DISubprogram(name: "version_etc_ar", scope: !18826, file: !18826, line: 180, type: !18957, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1629, retainedNodes: !152)
!18957 = !DISubroutineType(types: !18958)
!18958 = !{null, !1657, !146, !146, !146, !693}
!18959 = !DILocalVariable(name: "stream", arg: 1, scope: !18956, file: !18826, line: 180, type: !1657)
!18960 = !DILocation(line: 180, column: 23, scope: !18956)
!18961 = !DILocalVariable(name: "command_name", arg: 2, scope: !18956, file: !18826, line: 181, type: !146)
!18962 = !DILocation(line: 181, column: 29, scope: !18956)
!18963 = !DILocalVariable(name: "package", arg: 3, scope: !18956, file: !18826, line: 181, type: !146)
!18964 = !DILocation(line: 181, column: 55, scope: !18956)
!18965 = !DILocalVariable(name: "version", arg: 4, scope: !18956, file: !18826, line: 182, type: !146)
!18966 = !DILocation(line: 182, column: 29, scope: !18956)
!18967 = !DILocalVariable(name: "authors", arg: 5, scope: !18956, file: !18826, line: 182, type: !693)
!18968 = !DILocation(line: 182, column: 59, scope: !18956)
!18969 = !DILocalVariable(name: "n_authors", scope: !18956, file: !18826, line: 184, type: !149)
!18970 = !DILocation(line: 184, column: 10, scope: !18956)
!18971 = !DILocation(line: 186, column: 18, scope: !18972)
!18972 = distinct !DILexicalBlock(scope: !18956, file: !18826, line: 186, column: 3)
!18973 = !DILocation(line: 186, column: 8, scope: !18972)
!18974 = !DILocation(line: 186, column: 23, scope: !18975)
!18975 = distinct !DILexicalBlock(scope: !18972, file: !18826, line: 186, column: 3)
!18976 = !DILocation(line: 186, column: 31, scope: !18975)
!18977 = !DILocation(line: 186, column: 3, scope: !18972)
!18978 = !DILocation(line: 186, column: 52, scope: !18975)
!18979 = !DILocation(line: 186, column: 3, scope: !18975)
!18980 = distinct !{!18980, !18977, !18981}
!18981 = !DILocation(line: 187, column: 5, scope: !18972)
!18982 = !DILocation(line: 188, column: 20, scope: !18956)
!18983 = !DILocation(line: 188, column: 28, scope: !18956)
!18984 = !DILocation(line: 188, column: 42, scope: !18956)
!18985 = !DILocation(line: 188, column: 51, scope: !18956)
!18986 = !DILocation(line: 188, column: 60, scope: !18956)
!18987 = !DILocation(line: 188, column: 69, scope: !18956)
!18988 = !DILocation(line: 188, column: 3, scope: !18956)
!18989 = !DILocation(line: 189, column: 1, scope: !18956)
!18990 = distinct !DISubprogram(name: "version_etc_va", scope: !18826, file: !18826, line: 196, type: !18991, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1629, retainedNodes: !152)
!18991 = !DISubroutineType(types: !18992)
!18992 = !{null, !1657, !146, !146, !146, !18993}
!18993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1651, size: 64)
!18994 = !DILocalVariable(name: "stream", arg: 1, scope: !18990, file: !18826, line: 196, type: !1657)
!18995 = !DILocation(line: 196, column: 23, scope: !18990)
!18996 = !DILocalVariable(name: "command_name", arg: 2, scope: !18990, file: !18826, line: 197, type: !146)
!18997 = !DILocation(line: 197, column: 29, scope: !18990)
!18998 = !DILocalVariable(name: "package", arg: 3, scope: !18990, file: !18826, line: 197, type: !146)
!18999 = !DILocation(line: 197, column: 55, scope: !18990)
!19000 = !DILocalVariable(name: "version", arg: 4, scope: !18990, file: !18826, line: 198, type: !146)
!19001 = !DILocation(line: 198, column: 29, scope: !18990)
!19002 = !DILocalVariable(name: "authors", arg: 5, scope: !18990, file: !18826, line: 198, type: !18993)
!19003 = !DILocation(line: 198, column: 46, scope: !18990)
!19004 = !DILocalVariable(name: "n_authors", scope: !18990, file: !18826, line: 200, type: !149)
!19005 = !DILocation(line: 200, column: 10, scope: !18990)
!19006 = !DILocalVariable(name: "authtab", scope: !18990, file: !18826, line: 201, type: !1644)
!19007 = !DILocation(line: 201, column: 15, scope: !18990)
!19008 = !DILocation(line: 203, column: 18, scope: !19009)
!19009 = distinct !DILexicalBlock(scope: !18990, file: !18826, line: 203, column: 3)
!19010 = !DILocation(line: 203, column: 8, scope: !19009)
!19011 = !DILocation(line: 204, column: 8, scope: !19012)
!19012 = distinct !DILexicalBlock(scope: !19009, file: !18826, line: 203, column: 3)
!19013 = !DILocation(line: 204, column: 18, scope: !19012)
!19014 = !DILocation(line: 205, column: 10, scope: !19012)
!19015 = !DILocation(line: 205, column: 35, scope: !19012)
!19016 = !DILocation(line: 205, column: 22, scope: !19012)
!19017 = !DILocation(line: 205, column: 14, scope: !19012)
!19018 = !DILocation(line: 205, column: 33, scope: !19012)
!19019 = !DILocation(line: 205, column: 67, scope: !19012)
!19020 = !DILocation(line: 0, scope: !19012)
!19021 = !DILocation(line: 203, column: 3, scope: !19009)
!19022 = !DILocation(line: 206, column: 17, scope: !19012)
!19023 = !DILocation(line: 203, column: 3, scope: !19012)
!19024 = distinct !{!19024, !19021, !19025}
!19025 = !DILocation(line: 207, column: 5, scope: !19009)
!19026 = !DILocation(line: 208, column: 20, scope: !18990)
!19027 = !DILocation(line: 208, column: 28, scope: !18990)
!19028 = !DILocation(line: 208, column: 42, scope: !18990)
!19029 = !DILocation(line: 208, column: 51, scope: !18990)
!19030 = !DILocation(line: 209, column: 20, scope: !18990)
!19031 = !DILocation(line: 209, column: 29, scope: !18990)
!19032 = !DILocation(line: 208, column: 3, scope: !18990)
!19033 = !DILocation(line: 210, column: 1, scope: !18990)
!19034 = distinct !DISubprogram(name: "version_etc", scope: !18826, file: !18826, line: 227, type: !19035, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1629, retainedNodes: !152)
!19035 = !DISubroutineType(types: !19036)
!19036 = !{null, !1657, !146, !146, !146, null}
!19037 = !DILocalVariable(name: "stream", arg: 1, scope: !19034, file: !18826, line: 227, type: !1657)
!19038 = !DILocation(line: 227, column: 20, scope: !19034)
!19039 = !DILocalVariable(name: "command_name", arg: 2, scope: !19034, file: !18826, line: 228, type: !146)
!19040 = !DILocation(line: 228, column: 26, scope: !19034)
!19041 = !DILocalVariable(name: "package", arg: 3, scope: !19034, file: !18826, line: 228, type: !146)
!19042 = !DILocation(line: 228, column: 52, scope: !19034)
!19043 = !DILocalVariable(name: "version", arg: 4, scope: !19034, file: !18826, line: 229, type: !146)
!19044 = !DILocation(line: 229, column: 26, scope: !19034)
!19045 = !DILocalVariable(name: "authors", scope: !19034, file: !18826, line: 231, type: !1645)
!19046 = !DILocation(line: 231, column: 11, scope: !19034)
!19047 = !DILocation(line: 233, column: 3, scope: !19034)
!19048 = !DILocation(line: 234, column: 19, scope: !19034)
!19049 = !DILocation(line: 234, column: 27, scope: !19034)
!19050 = !DILocation(line: 234, column: 41, scope: !19034)
!19051 = !DILocation(line: 234, column: 50, scope: !19034)
!19052 = !DILocation(line: 234, column: 59, scope: !19034)
!19053 = !DILocation(line: 234, column: 3, scope: !19034)
!19054 = !DILocation(line: 235, column: 3, scope: !19034)
!19055 = !DILocation(line: 236, column: 1, scope: !19034)
!19056 = distinct !DISubprogram(name: "emit_bug_reporting_address", scope: !18826, file: !18826, line: 239, type: !532, scopeLine: 240, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1629, retainedNodes: !152)
!19057 = !DILocation(line: 245, column: 11, scope: !19056)
!19058 = !DILocation(line: 245, column: 3, scope: !19056)
!19059 = !DILocation(line: 251, column: 11, scope: !19056)
!19060 = !DILocation(line: 251, column: 3, scope: !19056)
!19061 = !DILocation(line: 256, column: 3, scope: !19056)
!19062 = !DILocation(line: 258, column: 1, scope: !19056)
!19063 = distinct !DISubprogram(name: "xnmalloc", scope: !19064, file: !19064, line: 99, type: !19065, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19064 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/mbarbar/software/coreutils-8.31")
!19065 = !DISubroutineType(types: !19066)
!19066 = !{!167, !149, !149}
!19067 = !DILocalVariable(name: "n", arg: 1, scope: !19063, file: !19064, line: 99, type: !149)
!19068 = !DILocation(line: 99, column: 18, scope: !19063)
!19069 = !DILocalVariable(name: "s", arg: 2, scope: !19063, file: !19064, line: 99, type: !149)
!19070 = !DILocation(line: 99, column: 28, scope: !19063)
!19071 = !DILocation(line: 101, column: 7, scope: !19072)
!19072 = distinct !DILexicalBlock(scope: !19063, file: !19064, line: 101, column: 7)
!19073 = !DILocation(line: 101, column: 7, scope: !19063)
!19074 = !DILocation(line: 102, column: 5, scope: !19072)
!19075 = !DILocation(line: 103, column: 19, scope: !19063)
!19076 = !DILocation(line: 103, column: 23, scope: !19063)
!19077 = !DILocation(line: 103, column: 21, scope: !19063)
!19078 = !DILocation(line: 103, column: 10, scope: !19063)
!19079 = !DILocation(line: 103, column: 3, scope: !19063)
!19080 = distinct !DISubprogram(name: "xmalloc", scope: !19081, file: !19081, line: 39, type: !484, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19081 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19082 = !DILocalVariable(name: "n", arg: 1, scope: !19080, file: !19081, line: 39, type: !149)
!19083 = !DILocation(line: 39, column: 17, scope: !19080)
!19084 = !DILocalVariable(name: "p", scope: !19080, file: !19081, line: 41, type: !167)
!19085 = !DILocation(line: 41, column: 9, scope: !19080)
!19086 = !DILocation(line: 41, column: 21, scope: !19080)
!19087 = !DILocation(line: 41, column: 13, scope: !19080)
!19088 = !DILocation(line: 42, column: 8, scope: !19089)
!19089 = distinct !DILexicalBlock(scope: !19080, file: !19081, line: 42, column: 7)
!19090 = !DILocation(line: 42, column: 10, scope: !19089)
!19091 = !DILocation(line: 42, column: 13, scope: !19089)
!19092 = !DILocation(line: 42, column: 15, scope: !19089)
!19093 = !DILocation(line: 42, column: 7, scope: !19080)
!19094 = !DILocation(line: 43, column: 5, scope: !19089)
!19095 = !DILocation(line: 44, column: 10, scope: !19080)
!19096 = !DILocation(line: 44, column: 3, scope: !19080)
!19097 = distinct !DISubprogram(name: "xnrealloc", scope: !19064, file: !19064, line: 112, type: !19098, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19098 = !DISubroutineType(types: !19099)
!19099 = !{!167, !167, !149, !149}
!19100 = !DILocalVariable(name: "p", arg: 1, scope: !19097, file: !19064, line: 112, type: !167)
!19101 = !DILocation(line: 112, column: 18, scope: !19097)
!19102 = !DILocalVariable(name: "n", arg: 2, scope: !19097, file: !19064, line: 112, type: !149)
!19103 = !DILocation(line: 112, column: 28, scope: !19097)
!19104 = !DILocalVariable(name: "s", arg: 3, scope: !19097, file: !19064, line: 112, type: !149)
!19105 = !DILocation(line: 112, column: 38, scope: !19097)
!19106 = !DILocation(line: 114, column: 7, scope: !19107)
!19107 = distinct !DILexicalBlock(scope: !19097, file: !19064, line: 114, column: 7)
!19108 = !DILocation(line: 114, column: 7, scope: !19097)
!19109 = !DILocation(line: 115, column: 5, scope: !19107)
!19110 = !DILocation(line: 116, column: 20, scope: !19097)
!19111 = !DILocation(line: 116, column: 23, scope: !19097)
!19112 = !DILocation(line: 116, column: 27, scope: !19097)
!19113 = !DILocation(line: 116, column: 25, scope: !19097)
!19114 = !DILocation(line: 116, column: 10, scope: !19097)
!19115 = !DILocation(line: 116, column: 3, scope: !19097)
!19116 = distinct !DISubprogram(name: "xrealloc", scope: !19081, file: !19081, line: 51, type: !488, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19117 = !DILocalVariable(name: "p", arg: 1, scope: !19116, file: !19081, line: 51, type: !167)
!19118 = !DILocation(line: 51, column: 17, scope: !19116)
!19119 = !DILocalVariable(name: "n", arg: 2, scope: !19116, file: !19081, line: 51, type: !149)
!19120 = !DILocation(line: 51, column: 27, scope: !19116)
!19121 = !DILocation(line: 53, column: 8, scope: !19122)
!19122 = distinct !DILexicalBlock(scope: !19116, file: !19081, line: 53, column: 7)
!19123 = !DILocation(line: 53, column: 10, scope: !19122)
!19124 = !DILocation(line: 53, column: 13, scope: !19122)
!19125 = !DILocation(line: 53, column: 7, scope: !19116)
!19126 = !DILocation(line: 57, column: 13, scope: !19127)
!19127 = distinct !DILexicalBlock(scope: !19122, file: !19081, line: 54, column: 5)
!19128 = !DILocation(line: 57, column: 7, scope: !19127)
!19129 = !DILocation(line: 58, column: 7, scope: !19127)
!19130 = !DILocation(line: 61, column: 16, scope: !19116)
!19131 = !DILocation(line: 61, column: 19, scope: !19116)
!19132 = !DILocation(line: 61, column: 7, scope: !19116)
!19133 = !DILocation(line: 61, column: 5, scope: !19116)
!19134 = !DILocation(line: 62, column: 8, scope: !19135)
!19135 = distinct !DILexicalBlock(scope: !19116, file: !19081, line: 62, column: 7)
!19136 = !DILocation(line: 62, column: 10, scope: !19135)
!19137 = !DILocation(line: 62, column: 13, scope: !19135)
!19138 = !DILocation(line: 62, column: 7, scope: !19116)
!19139 = !DILocation(line: 63, column: 5, scope: !19135)
!19140 = !DILocation(line: 64, column: 10, scope: !19116)
!19141 = !DILocation(line: 64, column: 3, scope: !19116)
!19142 = !DILocation(line: 65, column: 1, scope: !19116)
!19143 = distinct !DISubprogram(name: "x2nrealloc", scope: !19064, file: !19064, line: 174, type: !19144, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19144 = !DISubroutineType(types: !19145)
!19145 = !{!167, !167, !148, !149}
!19146 = !DILocalVariable(name: "p", arg: 1, scope: !19143, file: !19064, line: 174, type: !167)
!19147 = !DILocation(line: 174, column: 19, scope: !19143)
!19148 = !DILocalVariable(name: "pn", arg: 2, scope: !19143, file: !19064, line: 174, type: !148)
!19149 = !DILocation(line: 174, column: 30, scope: !19143)
!19150 = !DILocalVariable(name: "s", arg: 3, scope: !19143, file: !19064, line: 174, type: !149)
!19151 = !DILocation(line: 174, column: 41, scope: !19143)
!19152 = !DILocalVariable(name: "n", scope: !19143, file: !19064, line: 176, type: !149)
!19153 = !DILocation(line: 176, column: 10, scope: !19143)
!19154 = !DILocation(line: 176, column: 15, scope: !19143)
!19155 = !DILocation(line: 176, column: 14, scope: !19143)
!19156 = !DILocation(line: 178, column: 9, scope: !19157)
!19157 = distinct !DILexicalBlock(scope: !19143, file: !19064, line: 178, column: 7)
!19158 = !DILocation(line: 178, column: 7, scope: !19143)
!19159 = !DILocation(line: 180, column: 13, scope: !19160)
!19160 = distinct !DILexicalBlock(scope: !19161, file: !19064, line: 180, column: 11)
!19161 = distinct !DILexicalBlock(scope: !19157, file: !19064, line: 179, column: 5)
!19162 = !DILocation(line: 180, column: 11, scope: !19161)
!19163 = !DILocation(line: 188, column: 32, scope: !19164)
!19164 = distinct !DILexicalBlock(scope: !19160, file: !19064, line: 181, column: 9)
!19165 = !DILocation(line: 188, column: 30, scope: !19164)
!19166 = !DILocation(line: 188, column: 13, scope: !19164)
!19167 = !DILocation(line: 189, column: 17, scope: !19164)
!19168 = !DILocation(line: 189, column: 16, scope: !19164)
!19169 = !DILocation(line: 189, column: 13, scope: !19164)
!19170 = !DILocation(line: 190, column: 9, scope: !19164)
!19171 = !DILocation(line: 191, column: 11, scope: !19172)
!19172 = distinct !DILexicalBlock(scope: !19161, file: !19064, line: 191, column: 11)
!19173 = !DILocation(line: 191, column: 11, scope: !19161)
!19174 = !DILocation(line: 192, column: 9, scope: !19172)
!19175 = !DILocation(line: 193, column: 5, scope: !19161)
!19176 = !DILocation(line: 200, column: 71, scope: !19177)
!19177 = distinct !DILexicalBlock(scope: !19178, file: !19064, line: 200, column: 11)
!19178 = distinct !DILexicalBlock(scope: !19157, file: !19064, line: 195, column: 5)
!19179 = !DILocation(line: 200, column: 69, scope: !19177)
!19180 = !DILocation(line: 201, column: 14, scope: !19177)
!19181 = !DILocation(line: 201, column: 11, scope: !19177)
!19182 = !DILocation(line: 200, column: 11, scope: !19178)
!19183 = !DILocation(line: 202, column: 9, scope: !19177)
!19184 = !DILocation(line: 203, column: 12, scope: !19178)
!19185 = !DILocation(line: 203, column: 14, scope: !19178)
!19186 = !DILocation(line: 203, column: 18, scope: !19178)
!19187 = !DILocation(line: 203, column: 9, scope: !19178)
!19188 = !DILocation(line: 206, column: 9, scope: !19143)
!19189 = !DILocation(line: 206, column: 4, scope: !19143)
!19190 = !DILocation(line: 206, column: 7, scope: !19143)
!19191 = !DILocation(line: 207, column: 20, scope: !19143)
!19192 = !DILocation(line: 207, column: 23, scope: !19143)
!19193 = !DILocation(line: 207, column: 27, scope: !19143)
!19194 = !DILocation(line: 207, column: 25, scope: !19143)
!19195 = !DILocation(line: 207, column: 10, scope: !19143)
!19196 = !DILocation(line: 207, column: 3, scope: !19143)
!19197 = distinct !DISubprogram(name: "xcharalloc", scope: !19064, file: !19064, line: 216, type: !19198, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19198 = !DISubroutineType(types: !19199)
!19199 = !{!143, !149}
!19200 = !DILocalVariable(name: "n", arg: 1, scope: !19197, file: !19064, line: 216, type: !149)
!19201 = !DILocation(line: 216, column: 20, scope: !19197)
!19202 = !DILocation(line: 218, column: 10, scope: !19197)
!19203 = !DILocation(line: 218, column: 3, scope: !19197)
!19204 = distinct !DISubprogram(name: "x2realloc", scope: !19081, file: !19081, line: 74, type: !19205, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19205 = !DISubroutineType(types: !19206)
!19206 = !{!167, !167, !148}
!19207 = !DILocalVariable(name: "p", arg: 1, scope: !19204, file: !19081, line: 74, type: !167)
!19208 = !DILocation(line: 74, column: 18, scope: !19204)
!19209 = !DILocalVariable(name: "pn", arg: 2, scope: !19204, file: !19081, line: 74, type: !148)
!19210 = !DILocation(line: 74, column: 29, scope: !19204)
!19211 = !DILocation(line: 76, column: 22, scope: !19204)
!19212 = !DILocation(line: 76, column: 25, scope: !19204)
!19213 = !DILocation(line: 76, column: 10, scope: !19204)
!19214 = !DILocation(line: 76, column: 3, scope: !19204)
!19215 = distinct !DISubprogram(name: "xzalloc", scope: !19081, file: !19081, line: 84, type: !484, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19216 = !DILocalVariable(name: "s", arg: 1, scope: !19215, file: !19081, line: 84, type: !149)
!19217 = !DILocation(line: 84, column: 17, scope: !19215)
!19218 = !DILocation(line: 86, column: 27, scope: !19215)
!19219 = !DILocation(line: 86, column: 18, scope: !19215)
!19220 = !DILocation(line: 86, column: 34, scope: !19215)
!19221 = !DILocation(line: 86, column: 10, scope: !19215)
!19222 = !DILocation(line: 86, column: 3, scope: !19215)
!19223 = distinct !DISubprogram(name: "xcalloc", scope: !19081, file: !19081, line: 93, type: !19065, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19224 = !DILocalVariable(name: "n", arg: 1, scope: !19223, file: !19081, line: 93, type: !149)
!19225 = !DILocation(line: 93, column: 17, scope: !19223)
!19226 = !DILocalVariable(name: "s", arg: 2, scope: !19223, file: !19081, line: 93, type: !149)
!19227 = !DILocation(line: 93, column: 27, scope: !19223)
!19228 = !DILocalVariable(name: "p", scope: !19223, file: !19081, line: 95, type: !167)
!19229 = !DILocation(line: 95, column: 9, scope: !19223)
!19230 = !DILocation(line: 100, column: 7, scope: !19231)
!19231 = distinct !DILexicalBlock(scope: !19223, file: !19081, line: 100, column: 7)
!19232 = !DILocation(line: 101, column: 7, scope: !19231)
!19233 = !DILocation(line: 101, column: 26, scope: !19231)
!19234 = !DILocation(line: 101, column: 29, scope: !19231)
!19235 = !DILocation(line: 101, column: 18, scope: !19231)
!19236 = !DILocation(line: 101, column: 16, scope: !19231)
!19237 = !DILocation(line: 100, column: 7, scope: !19223)
!19238 = !DILocation(line: 102, column: 5, scope: !19231)
!19239 = !DILocation(line: 103, column: 10, scope: !19223)
!19240 = !DILocation(line: 103, column: 3, scope: !19223)
!19241 = distinct !DISubprogram(name: "xmemdup", scope: !19081, file: !19081, line: 111, type: !19242, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19242 = !DISubroutineType(types: !19243)
!19243 = !{!167, !181, !149}
!19244 = !DILocalVariable(name: "p", arg: 1, scope: !19241, file: !19081, line: 111, type: !181)
!19245 = !DILocation(line: 111, column: 22, scope: !19241)
!19246 = !DILocalVariable(name: "s", arg: 2, scope: !19241, file: !19081, line: 111, type: !149)
!19247 = !DILocation(line: 111, column: 32, scope: !19241)
!19248 = !DILocation(line: 113, column: 27, scope: !19241)
!19249 = !DILocation(line: 113, column: 18, scope: !19241)
!19250 = !DILocation(line: 113, column: 31, scope: !19241)
!19251 = !DILocation(line: 113, column: 34, scope: !19241)
!19252 = !DILocation(line: 113, column: 10, scope: !19241)
!19253 = !DILocation(line: 113, column: 3, scope: !19241)
!19254 = distinct !DISubprogram(name: "xstrdup", scope: !19081, file: !19081, line: 119, type: !8592, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1691, retainedNodes: !152)
!19255 = !DILocalVariable(name: "string", arg: 1, scope: !19254, file: !19081, line: 119, type: !146)
!19256 = !DILocation(line: 119, column: 22, scope: !19254)
!19257 = !DILocation(line: 121, column: 19, scope: !19254)
!19258 = !DILocation(line: 121, column: 35, scope: !19254)
!19259 = !DILocation(line: 121, column: 27, scope: !19254)
!19260 = !DILocation(line: 121, column: 43, scope: !19254)
!19261 = !DILocation(line: 121, column: 10, scope: !19254)
!19262 = !DILocation(line: 121, column: 3, scope: !19254)
!19263 = distinct !DISubprogram(name: "xalloc_die", scope: !19264, file: !19264, line: 32, type: !532, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !1694, retainedNodes: !152)
!19264 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19265 = !DILocation(line: 34, column: 10, scope: !19263)
!19266 = !DILocation(line: 34, column: 33, scope: !19263)
!19267 = !DILocation(line: 34, column: 3, scope: !19263)
!19268 = !DILocation(line: 40, column: 3, scope: !19263)
!19269 = distinct !DISubprogram(name: "xnumtoumax", scope: !19270, file: !19270, line: 36, type: !19271, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1697, retainedNodes: !152)
!19270 = !DIFile(filename: "./lib/xdectoint.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19271 = !DISubroutineType(types: !19272)
!19272 = !{!168, !146, !27, !168, !168, !146, !146, !27}
!19273 = !DILocalVariable(name: "n_str", arg: 1, scope: !19269, file: !19270, line: 36, type: !146)
!19274 = !DILocation(line: 36, column: 26, scope: !19269)
!19275 = !DILocalVariable(name: "base", arg: 2, scope: !19269, file: !19270, line: 36, type: !27)
!19276 = !DILocation(line: 36, column: 37, scope: !19269)
!19277 = !DILocalVariable(name: "min", arg: 3, scope: !19269, file: !19270, line: 36, type: !168)
!19278 = !DILocation(line: 36, column: 57, scope: !19269)
!19279 = !DILocalVariable(name: "max", arg: 4, scope: !19269, file: !19270, line: 36, type: !168)
!19280 = !DILocation(line: 36, column: 76, scope: !19269)
!19281 = !DILocalVariable(name: "suffixes", arg: 5, scope: !19269, file: !19270, line: 37, type: !146)
!19282 = !DILocation(line: 37, column: 26, scope: !19269)
!19283 = !DILocalVariable(name: "err", arg: 6, scope: !19269, file: !19270, line: 37, type: !146)
!19284 = !DILocation(line: 37, column: 48, scope: !19269)
!19285 = !DILocalVariable(name: "err_exit", arg: 7, scope: !19269, file: !19270, line: 37, type: !27)
!19286 = !DILocation(line: 37, column: 57, scope: !19269)
!19287 = !DILocalVariable(name: "s_err", scope: !19269, file: !19270, line: 39, type: !1276)
!19288 = !DILocation(line: 39, column: 16, scope: !19269)
!19289 = !DILocalVariable(name: "tnum", scope: !19269, file: !19270, line: 41, type: !168)
!19290 = !DILocation(line: 41, column: 17, scope: !19269)
!19291 = !DILocation(line: 42, column: 22, scope: !19269)
!19292 = !DILocation(line: 42, column: 35, scope: !19269)
!19293 = !DILocation(line: 42, column: 48, scope: !19269)
!19294 = !DILocation(line: 42, column: 11, scope: !19269)
!19295 = !DILocation(line: 42, column: 9, scope: !19269)
!19296 = !DILocation(line: 44, column: 7, scope: !19297)
!19297 = distinct !DILexicalBlock(scope: !19269, file: !19270, line: 44, column: 7)
!19298 = !DILocation(line: 44, column: 13, scope: !19297)
!19299 = !DILocation(line: 44, column: 7, scope: !19269)
!19300 = !DILocation(line: 46, column: 11, scope: !19301)
!19301 = distinct !DILexicalBlock(scope: !19302, file: !19270, line: 46, column: 11)
!19302 = distinct !DILexicalBlock(scope: !19297, file: !19270, line: 45, column: 5)
!19303 = !DILocation(line: 46, column: 18, scope: !19301)
!19304 = !DILocation(line: 46, column: 16, scope: !19301)
!19305 = !DILocation(line: 46, column: 22, scope: !19301)
!19306 = !DILocation(line: 46, column: 25, scope: !19301)
!19307 = !DILocation(line: 46, column: 31, scope: !19301)
!19308 = !DILocation(line: 46, column: 29, scope: !19301)
!19309 = !DILocation(line: 46, column: 11, scope: !19302)
!19310 = !DILocation(line: 48, column: 17, scope: !19311)
!19311 = distinct !DILexicalBlock(scope: !19301, file: !19270, line: 47, column: 9)
!19312 = !DILocation(line: 51, column: 15, scope: !19313)
!19313 = distinct !DILexicalBlock(scope: !19311, file: !19270, line: 51, column: 15)
!19314 = !DILocation(line: 51, column: 20, scope: !19313)
!19315 = !DILocation(line: 51, column: 15, scope: !19311)
!19316 = !DILocation(line: 52, column: 13, scope: !19313)
!19317 = !DILocation(line: 52, column: 19, scope: !19313)
!19318 = !DILocation(line: 58, column: 13, scope: !19313)
!19319 = !DILocation(line: 58, column: 19, scope: !19313)
!19320 = !DILocation(line: 59, column: 9, scope: !19311)
!19321 = !DILocation(line: 60, column: 5, scope: !19302)
!19322 = !DILocation(line: 61, column: 12, scope: !19323)
!19323 = distinct !DILexicalBlock(scope: !19297, file: !19270, line: 61, column: 12)
!19324 = !DILocation(line: 61, column: 18, scope: !19323)
!19325 = !DILocation(line: 61, column: 12, scope: !19297)
!19326 = !DILocation(line: 62, column: 5, scope: !19323)
!19327 = !DILocation(line: 62, column: 11, scope: !19323)
!19328 = !DILocation(line: 63, column: 12, scope: !19329)
!19329 = distinct !DILexicalBlock(scope: !19323, file: !19270, line: 63, column: 12)
!19330 = !DILocation(line: 63, column: 18, scope: !19329)
!19331 = !DILocation(line: 63, column: 12, scope: !19323)
!19332 = !DILocation(line: 64, column: 5, scope: !19329)
!19333 = !DILocation(line: 64, column: 11, scope: !19329)
!19334 = !DILocation(line: 66, column: 7, scope: !19335)
!19335 = distinct !DILexicalBlock(scope: !19269, file: !19270, line: 66, column: 7)
!19336 = !DILocation(line: 66, column: 13, scope: !19335)
!19337 = !DILocation(line: 66, column: 7, scope: !19269)
!19338 = !DILocation(line: 69, column: 14, scope: !19339)
!19339 = distinct !DILexicalBlock(scope: !19335, file: !19270, line: 67, column: 5)
!19340 = !DILocation(line: 69, column: 25, scope: !19339)
!19341 = !DILocation(line: 69, column: 50, scope: !19339)
!19342 = !DILocation(line: 69, column: 56, scope: !19339)
!19343 = !DILocation(line: 69, column: 72, scope: !19339)
!19344 = !DILocation(line: 70, column: 24, scope: !19339)
!19345 = !DILocation(line: 70, column: 36, scope: !19339)
!19346 = !DILocation(line: 70, column: 29, scope: !19339)
!19347 = !DILocation(line: 69, column: 7, scope: !19339)
!19348 = !DILocation(line: 71, column: 5, scope: !19339)
!19349 = !DILocation(line: 73, column: 10, scope: !19269)
!19350 = !DILocation(line: 73, column: 3, scope: !19269)
!19351 = distinct !DISubprogram(name: "xdectoumax", scope: !19270, file: !19270, line: 82, type: !19352, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1697, retainedNodes: !152)
!19352 = !DISubroutineType(types: !19353)
!19353 = !{!168, !146, !168, !168, !146, !146, !27}
!19354 = !DILocalVariable(name: "n_str", arg: 1, scope: !19351, file: !19270, line: 82, type: !146)
!19355 = !DILocation(line: 82, column: 26, scope: !19351)
!19356 = !DILocalVariable(name: "min", arg: 2, scope: !19351, file: !19270, line: 82, type: !168)
!19357 = !DILocation(line: 82, column: 47, scope: !19351)
!19358 = !DILocalVariable(name: "max", arg: 3, scope: !19351, file: !19270, line: 82, type: !168)
!19359 = !DILocation(line: 82, column: 66, scope: !19351)
!19360 = !DILocalVariable(name: "suffixes", arg: 4, scope: !19351, file: !19270, line: 83, type: !146)
!19361 = !DILocation(line: 83, column: 26, scope: !19351)
!19362 = !DILocalVariable(name: "err", arg: 5, scope: !19351, file: !19270, line: 83, type: !146)
!19363 = !DILocation(line: 83, column: 48, scope: !19351)
!19364 = !DILocalVariable(name: "err_exit", arg: 6, scope: !19351, file: !19270, line: 83, type: !27)
!19365 = !DILocation(line: 83, column: 57, scope: !19351)
!19366 = !DILocation(line: 85, column: 23, scope: !19351)
!19367 = !DILocation(line: 85, column: 34, scope: !19351)
!19368 = !DILocation(line: 85, column: 39, scope: !19351)
!19369 = !DILocation(line: 85, column: 44, scope: !19351)
!19370 = !DILocation(line: 85, column: 54, scope: !19351)
!19371 = !DILocation(line: 85, column: 59, scope: !19351)
!19372 = !DILocation(line: 85, column: 10, scope: !19351)
!19373 = !DILocation(line: 85, column: 3, scope: !19351)
!19374 = distinct !DISubprogram(name: "xgetcwd", scope: !19375, file: !19375, line: 35, type: !19376, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1700, retainedNodes: !152)
!19375 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19376 = !DISubroutineType(types: !1760)
!19377 = !DILocalVariable(name: "cwd", scope: !19374, file: !19375, line: 37, type: !143)
!19378 = !DILocation(line: 37, column: 9, scope: !19374)
!19379 = !DILocation(line: 37, column: 15, scope: !19374)
!19380 = !DILocation(line: 38, column: 9, scope: !19381)
!19381 = distinct !DILexicalBlock(scope: !19374, file: !19375, line: 38, column: 7)
!19382 = !DILocation(line: 38, column: 13, scope: !19381)
!19383 = !DILocation(line: 38, column: 16, scope: !19381)
!19384 = !DILocation(line: 38, column: 22, scope: !19381)
!19385 = !DILocation(line: 38, column: 7, scope: !19374)
!19386 = !DILocation(line: 39, column: 5, scope: !19381)
!19387 = !DILocation(line: 40, column: 10, scope: !19374)
!19388 = !DILocation(line: 40, column: 3, scope: !19374)
!19389 = distinct !DISubprogram(name: "xgethostname", scope: !19390, file: !19390, line: 40, type: !19376, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1703, retainedNodes: !152)
!19390 = !DIFile(filename: "lib/xgethostname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19391 = !DILocalVariable(name: "hostname", scope: !19389, file: !19390, line: 42, type: !143)
!19392 = !DILocation(line: 42, column: 9, scope: !19389)
!19393 = !DILocalVariable(name: "size", scope: !19389, file: !19390, line: 43, type: !149)
!19394 = !DILocation(line: 43, column: 10, scope: !19389)
!19395 = !DILocation(line: 45, column: 3, scope: !19389)
!19396 = !DILocalVariable(name: "size_1", scope: !19397, file: !19390, line: 50, type: !149)
!19397 = distinct !DILexicalBlock(scope: !19389, file: !19390, line: 46, column: 5)
!19398 = !DILocation(line: 50, column: 14, scope: !19397)
!19399 = !DILocation(line: 52, column: 29, scope: !19397)
!19400 = !DILocation(line: 52, column: 18, scope: !19397)
!19401 = !DILocation(line: 52, column: 16, scope: !19397)
!19402 = !DILocation(line: 53, column: 16, scope: !19397)
!19403 = !DILocation(line: 53, column: 21, scope: !19397)
!19404 = !DILocation(line: 53, column: 14, scope: !19397)
!19405 = !DILocation(line: 54, column: 7, scope: !19397)
!19406 = !DILocation(line: 54, column: 16, scope: !19397)
!19407 = !DILocation(line: 54, column: 23, scope: !19397)
!19408 = !DILocation(line: 54, column: 28, scope: !19397)
!19409 = !DILocation(line: 55, column: 7, scope: !19397)
!19410 = !DILocation(line: 55, column: 13, scope: !19397)
!19411 = !DILocation(line: 57, column: 24, scope: !19412)
!19412 = distinct !DILexicalBlock(scope: !19397, file: !19390, line: 57, column: 11)
!19413 = !DILocation(line: 57, column: 34, scope: !19412)
!19414 = !DILocation(line: 57, column: 11, scope: !19412)
!19415 = !DILocation(line: 57, column: 42, scope: !19412)
!19416 = !DILocation(line: 57, column: 11, scope: !19397)
!19417 = !DILocation(line: 59, column: 17, scope: !19418)
!19418 = distinct !DILexicalBlock(scope: !19419, file: !19390, line: 59, column: 15)
!19419 = distinct !DILexicalBlock(scope: !19412, file: !19390, line: 58, column: 9)
!19420 = !DILocation(line: 59, column: 26, scope: !19418)
!19421 = !DILocation(line: 59, column: 33, scope: !19418)
!19422 = !DILocation(line: 59, column: 15, scope: !19419)
!19423 = !DILocation(line: 60, column: 13, scope: !19418)
!19424 = !DILocation(line: 61, column: 9, scope: !19419)
!19425 = !DILocation(line: 62, column: 16, scope: !19426)
!19426 = distinct !DILexicalBlock(scope: !19412, file: !19390, line: 62, column: 16)
!19427 = !DILocation(line: 62, column: 22, scope: !19426)
!19428 = !DILocation(line: 62, column: 27, scope: !19426)
!19429 = !DILocation(line: 62, column: 30, scope: !19426)
!19430 = !DILocation(line: 62, column: 36, scope: !19426)
!19431 = !DILocation(line: 62, column: 52, scope: !19426)
!19432 = !DILocation(line: 62, column: 55, scope: !19426)
!19433 = !DILocation(line: 62, column: 61, scope: !19426)
!19434 = !DILocation(line: 64, column: 16, scope: !19426)
!19435 = !DILocation(line: 64, column: 19, scope: !19426)
!19436 = !DILocation(line: 64, column: 25, scope: !19426)
!19437 = !DILocation(line: 62, column: 16, scope: !19412)
!19438 = !DILocalVariable(name: "saved_errno", scope: !19439, file: !19390, line: 66, type: !27)
!19439 = distinct !DILexicalBlock(scope: !19426, file: !19390, line: 65, column: 9)
!19440 = !DILocation(line: 66, column: 15, scope: !19439)
!19441 = !DILocation(line: 66, column: 29, scope: !19439)
!19442 = !DILocation(line: 67, column: 17, scope: !19439)
!19443 = !DILocation(line: 67, column: 11, scope: !19439)
!19444 = !DILocation(line: 68, column: 19, scope: !19439)
!19445 = !DILocation(line: 68, column: 11, scope: !19439)
!19446 = !DILocation(line: 68, column: 17, scope: !19439)
!19447 = !DILocation(line: 69, column: 11, scope: !19439)
!19448 = distinct !{!19448, !19395, !19449}
!19449 = !DILocation(line: 71, column: 5, scope: !19389)
!19450 = !DILocation(line: 73, column: 10, scope: !19389)
!19451 = !DILocation(line: 73, column: 3, scope: !19389)
!19452 = !DILocation(line: 74, column: 1, scope: !19389)
!19453 = distinct !DISubprogram(name: "xstrtoul", scope: !19454, file: !19454, line: 76, type: !19455, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1706, retainedNodes: !152)
!19454 = !DIFile(filename: "./lib/xstrtol.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19455 = !DISubroutineType(types: !19456)
!19456 = !{!1276, !146, !142, !27, !19457, !146}
!19457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64)
!19458 = !DILocalVariable(name: "s", arg: 1, scope: !19453, file: !19454, line: 76, type: !146)
!19459 = !DILocation(line: 76, column: 24, scope: !19453)
!19460 = !DILocalVariable(name: "ptr", arg: 2, scope: !19453, file: !19454, line: 76, type: !142)
!19461 = !DILocation(line: 76, column: 34, scope: !19453)
!19462 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !19453, file: !19454, line: 76, type: !27)
!19463 = !DILocation(line: 76, column: 43, scope: !19453)
!19464 = !DILocalVariable(name: "val", arg: 4, scope: !19453, file: !19454, line: 77, type: !19457)
!19465 = !DILocation(line: 77, column: 24, scope: !19453)
!19466 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !19453, file: !19454, line: 77, type: !146)
!19467 = !DILocation(line: 77, column: 41, scope: !19453)
!19468 = !DILocalVariable(name: "t_ptr", scope: !19453, file: !19454, line: 79, type: !143)
!19469 = !DILocation(line: 79, column: 9, scope: !19453)
!19470 = !DILocalVariable(name: "p", scope: !19453, file: !19454, line: 80, type: !142)
!19471 = !DILocation(line: 80, column: 10, scope: !19453)
!19472 = !DILocalVariable(name: "tmp", scope: !19453, file: !19454, line: 81, type: !151)
!19473 = !DILocation(line: 81, column: 14, scope: !19453)
!19474 = !DILocalVariable(name: "err", scope: !19453, file: !19454, line: 82, type: !1276)
!19475 = !DILocation(line: 82, column: 16, scope: !19453)
!19476 = !DILocation(line: 84, column: 3, scope: !19477)
!19477 = distinct !DILexicalBlock(scope: !19478, file: !19454, line: 84, column: 3)
!19478 = distinct !DILexicalBlock(scope: !19453, file: !19454, line: 84, column: 3)
!19479 = !DILocation(line: 84, column: 3, scope: !19478)
!19480 = !DILocation(line: 86, column: 8, scope: !19453)
!19481 = !DILocation(line: 86, column: 14, scope: !19453)
!19482 = !DILocation(line: 86, column: 5, scope: !19453)
!19483 = !DILocation(line: 88, column: 3, scope: !19453)
!19484 = !DILocation(line: 88, column: 9, scope: !19453)
!19485 = !DILocalVariable(name: "q", scope: !19486, file: !19454, line: 92, type: !146)
!19486 = distinct !DILexicalBlock(scope: !19487, file: !19454, line: 91, column: 5)
!19487 = distinct !DILexicalBlock(scope: !19453, file: !19454, line: 90, column: 7)
!19488 = !DILocation(line: 92, column: 19, scope: !19486)
!19489 = !DILocation(line: 92, column: 23, scope: !19486)
!19490 = !DILocalVariable(name: "ch", scope: !19486, file: !19454, line: 93, type: !737)
!19491 = !DILocation(line: 93, column: 21, scope: !19486)
!19492 = !DILocation(line: 93, column: 27, scope: !19486)
!19493 = !DILocation(line: 93, column: 26, scope: !19486)
!19494 = !DILocation(line: 94, column: 7, scope: !19486)
!19495 = !DILocation(line: 94, column: 14, scope: !19486)
!19496 = !DILocation(line: 95, column: 15, scope: !19486)
!19497 = !DILocation(line: 95, column: 14, scope: !19486)
!19498 = !DILocation(line: 95, column: 12, scope: !19486)
!19499 = distinct !{!19499, !19494, !19500}
!19500 = !DILocation(line: 95, column: 17, scope: !19486)
!19501 = !DILocation(line: 96, column: 11, scope: !19502)
!19502 = distinct !DILexicalBlock(scope: !19486, file: !19454, line: 96, column: 11)
!19503 = !DILocation(line: 96, column: 14, scope: !19502)
!19504 = !DILocation(line: 96, column: 11, scope: !19486)
!19505 = !DILocation(line: 97, column: 9, scope: !19502)
!19506 = !DILocation(line: 100, column: 19, scope: !19453)
!19507 = !DILocation(line: 100, column: 22, scope: !19453)
!19508 = !DILocation(line: 100, column: 25, scope: !19453)
!19509 = !DILocation(line: 100, column: 9, scope: !19453)
!19510 = !DILocation(line: 100, column: 7, scope: !19453)
!19511 = !DILocation(line: 102, column: 8, scope: !19512)
!19512 = distinct !DILexicalBlock(scope: !19453, file: !19454, line: 102, column: 7)
!19513 = !DILocation(line: 102, column: 7, scope: !19512)
!19514 = !DILocation(line: 102, column: 13, scope: !19512)
!19515 = !DILocation(line: 102, column: 10, scope: !19512)
!19516 = !DILocation(line: 102, column: 7, scope: !19453)
!19517 = !DILocation(line: 106, column: 11, scope: !19518)
!19518 = distinct !DILexicalBlock(scope: !19519, file: !19454, line: 106, column: 11)
!19519 = distinct !DILexicalBlock(scope: !19512, file: !19454, line: 103, column: 5)
!19520 = !DILocation(line: 106, column: 26, scope: !19518)
!19521 = !DILocation(line: 106, column: 31, scope: !19518)
!19522 = !DILocation(line: 106, column: 30, scope: !19518)
!19523 = !DILocation(line: 106, column: 29, scope: !19518)
!19524 = !DILocation(line: 106, column: 33, scope: !19518)
!19525 = !DILocation(line: 106, column: 44, scope: !19518)
!19526 = !DILocation(line: 106, column: 62, scope: !19518)
!19527 = !DILocation(line: 106, column: 61, scope: !19518)
!19528 = !DILocation(line: 106, column: 60, scope: !19518)
!19529 = !DILocation(line: 106, column: 36, scope: !19518)
!19530 = !DILocation(line: 106, column: 11, scope: !19519)
!19531 = !DILocation(line: 107, column: 13, scope: !19518)
!19532 = !DILocation(line: 107, column: 9, scope: !19518)
!19533 = !DILocation(line: 109, column: 9, scope: !19518)
!19534 = !DILocation(line: 110, column: 5, scope: !19519)
!19535 = !DILocation(line: 111, column: 12, scope: !19536)
!19536 = distinct !DILexicalBlock(scope: !19512, file: !19454, line: 111, column: 12)
!19537 = !DILocation(line: 111, column: 18, scope: !19536)
!19538 = !DILocation(line: 111, column: 12, scope: !19512)
!19539 = !DILocation(line: 113, column: 11, scope: !19540)
!19540 = distinct !DILexicalBlock(scope: !19541, file: !19454, line: 113, column: 11)
!19541 = distinct !DILexicalBlock(scope: !19536, file: !19454, line: 112, column: 5)
!19542 = !DILocation(line: 113, column: 17, scope: !19540)
!19543 = !DILocation(line: 113, column: 11, scope: !19541)
!19544 = !DILocation(line: 114, column: 9, scope: !19540)
!19545 = !DILocation(line: 115, column: 11, scope: !19541)
!19546 = !DILocation(line: 116, column: 5, scope: !19541)
!19547 = !DILocation(line: 121, column: 8, scope: !19548)
!19548 = distinct !DILexicalBlock(scope: !19453, file: !19454, line: 121, column: 7)
!19549 = !DILocation(line: 121, column: 7, scope: !19453)
!19550 = !DILocation(line: 123, column: 14, scope: !19551)
!19551 = distinct !DILexicalBlock(scope: !19548, file: !19454, line: 122, column: 5)
!19552 = !DILocation(line: 123, column: 8, scope: !19551)
!19553 = !DILocation(line: 123, column: 12, scope: !19551)
!19554 = !DILocation(line: 124, column: 14, scope: !19551)
!19555 = !DILocation(line: 124, column: 7, scope: !19551)
!19556 = !DILocation(line: 127, column: 9, scope: !19557)
!19557 = distinct !DILexicalBlock(scope: !19453, file: !19454, line: 127, column: 7)
!19558 = !DILocation(line: 127, column: 8, scope: !19557)
!19559 = !DILocation(line: 127, column: 7, scope: !19557)
!19560 = !DILocation(line: 127, column: 11, scope: !19557)
!19561 = !DILocation(line: 127, column: 7, scope: !19453)
!19562 = !DILocalVariable(name: "base", scope: !19563, file: !19454, line: 129, type: !27)
!19563 = distinct !DILexicalBlock(scope: !19557, file: !19454, line: 128, column: 5)
!19564 = !DILocation(line: 129, column: 11, scope: !19563)
!19565 = !DILocalVariable(name: "suffixes", scope: !19563, file: !19454, line: 130, type: !27)
!19566 = !DILocation(line: 130, column: 11, scope: !19563)
!19567 = !DILocalVariable(name: "overflow", scope: !19563, file: !19454, line: 131, type: !1276)
!19568 = !DILocation(line: 131, column: 20, scope: !19563)
!19569 = !DILocation(line: 133, column: 20, scope: !19570)
!19570 = distinct !DILexicalBlock(scope: !19563, file: !19454, line: 133, column: 11)
!19571 = !DILocation(line: 133, column: 38, scope: !19570)
!19572 = !DILocation(line: 133, column: 37, scope: !19570)
!19573 = !DILocation(line: 133, column: 36, scope: !19570)
!19574 = !DILocation(line: 133, column: 12, scope: !19570)
!19575 = !DILocation(line: 133, column: 11, scope: !19563)
!19576 = !DILocation(line: 135, column: 18, scope: !19577)
!19577 = distinct !DILexicalBlock(scope: !19570, file: !19454, line: 134, column: 9)
!19578 = !DILocation(line: 135, column: 12, scope: !19577)
!19579 = !DILocation(line: 135, column: 16, scope: !19577)
!19580 = !DILocation(line: 136, column: 18, scope: !19577)
!19581 = !DILocation(line: 136, column: 22, scope: !19577)
!19582 = !DILocation(line: 136, column: 11, scope: !19577)
!19583 = !DILocation(line: 139, column: 17, scope: !19563)
!19584 = !DILocation(line: 139, column: 16, scope: !19563)
!19585 = !DILocation(line: 139, column: 15, scope: !19563)
!19586 = !DILocation(line: 139, column: 7, scope: !19563)
!19587 = !DILocation(line: 151, column: 23, scope: !19588)
!19588 = distinct !DILexicalBlock(scope: !19589, file: !19454, line: 151, column: 15)
!19589 = distinct !DILexicalBlock(scope: !19563, file: !19454, line: 140, column: 9)
!19590 = !DILocation(line: 151, column: 15, scope: !19588)
!19591 = !DILocation(line: 151, column: 15, scope: !19589)
!19592 = !DILocation(line: 152, column: 21, scope: !19588)
!19593 = !DILocation(line: 152, column: 13, scope: !19588)
!19594 = !DILocation(line: 155, column: 21, scope: !19595)
!19595 = distinct !DILexicalBlock(scope: !19596, file: !19454, line: 155, column: 21)
!19596 = distinct !DILexicalBlock(scope: !19588, file: !19454, line: 153, column: 15)
!19597 = !DILocation(line: 155, column: 29, scope: !19595)
!19598 = !DILocation(line: 155, column: 21, scope: !19596)
!19599 = !DILocation(line: 156, column: 28, scope: !19595)
!19600 = !DILocation(line: 156, column: 19, scope: !19595)
!19601 = !DILocation(line: 157, column: 17, scope: !19596)
!19602 = !DILocation(line: 161, column: 22, scope: !19596)
!19603 = !DILocation(line: 162, column: 25, scope: !19596)
!19604 = !DILocation(line: 163, column: 17, scope: !19596)
!19605 = !DILocation(line: 164, column: 15, scope: !19596)
!19606 = !DILocation(line: 165, column: 9, scope: !19589)
!19607 = !DILocation(line: 167, column: 17, scope: !19563)
!19608 = !DILocation(line: 167, column: 16, scope: !19563)
!19609 = !DILocation(line: 167, column: 15, scope: !19563)
!19610 = !DILocation(line: 167, column: 7, scope: !19563)
!19611 = !DILocation(line: 170, column: 22, scope: !19612)
!19612 = distinct !DILexicalBlock(scope: !19563, file: !19454, line: 168, column: 9)
!19613 = !DILocation(line: 170, column: 20, scope: !19612)
!19614 = !DILocation(line: 171, column: 11, scope: !19612)
!19615 = !DILocation(line: 177, column: 22, scope: !19612)
!19616 = !DILocation(line: 177, column: 20, scope: !19612)
!19617 = !DILocation(line: 178, column: 11, scope: !19612)
!19618 = !DILocation(line: 181, column: 20, scope: !19612)
!19619 = !DILocation(line: 182, column: 11, scope: !19612)
!19620 = !DILocation(line: 185, column: 48, scope: !19612)
!19621 = !DILocation(line: 185, column: 22, scope: !19612)
!19622 = !DILocation(line: 185, column: 20, scope: !19612)
!19623 = !DILocation(line: 186, column: 11, scope: !19612)
!19624 = !DILocation(line: 190, column: 48, scope: !19612)
!19625 = !DILocation(line: 190, column: 22, scope: !19612)
!19626 = !DILocation(line: 190, column: 20, scope: !19612)
!19627 = !DILocation(line: 191, column: 11, scope: !19612)
!19628 = !DILocation(line: 195, column: 48, scope: !19612)
!19629 = !DILocation(line: 195, column: 22, scope: !19612)
!19630 = !DILocation(line: 195, column: 20, scope: !19612)
!19631 = !DILocation(line: 196, column: 11, scope: !19612)
!19632 = !DILocation(line: 200, column: 48, scope: !19612)
!19633 = !DILocation(line: 200, column: 22, scope: !19612)
!19634 = !DILocation(line: 200, column: 20, scope: !19612)
!19635 = !DILocation(line: 201, column: 11, scope: !19612)
!19636 = !DILocation(line: 204, column: 48, scope: !19612)
!19637 = !DILocation(line: 204, column: 22, scope: !19612)
!19638 = !DILocation(line: 204, column: 20, scope: !19612)
!19639 = !DILocation(line: 205, column: 11, scope: !19612)
!19640 = !DILocation(line: 209, column: 48, scope: !19612)
!19641 = !DILocation(line: 209, column: 22, scope: !19612)
!19642 = !DILocation(line: 209, column: 20, scope: !19612)
!19643 = !DILocation(line: 210, column: 11, scope: !19612)
!19644 = !DILocation(line: 213, column: 22, scope: !19612)
!19645 = !DILocation(line: 213, column: 20, scope: !19612)
!19646 = !DILocation(line: 214, column: 11, scope: !19612)
!19647 = !DILocation(line: 217, column: 48, scope: !19612)
!19648 = !DILocation(line: 217, column: 22, scope: !19612)
!19649 = !DILocation(line: 217, column: 20, scope: !19612)
!19650 = !DILocation(line: 218, column: 11, scope: !19612)
!19651 = !DILocation(line: 221, column: 48, scope: !19612)
!19652 = !DILocation(line: 221, column: 22, scope: !19612)
!19653 = !DILocation(line: 221, column: 20, scope: !19612)
!19654 = !DILocation(line: 222, column: 11, scope: !19612)
!19655 = !DILocation(line: 225, column: 18, scope: !19612)
!19656 = !DILocation(line: 225, column: 12, scope: !19612)
!19657 = !DILocation(line: 225, column: 16, scope: !19612)
!19658 = !DILocation(line: 226, column: 18, scope: !19612)
!19659 = !DILocation(line: 226, column: 22, scope: !19612)
!19660 = !DILocation(line: 226, column: 11, scope: !19612)
!19661 = !DILocation(line: 229, column: 14, scope: !19563)
!19662 = !DILocation(line: 229, column: 11, scope: !19563)
!19663 = !DILocation(line: 230, column: 13, scope: !19563)
!19664 = !DILocation(line: 230, column: 8, scope: !19563)
!19665 = !DILocation(line: 230, column: 10, scope: !19563)
!19666 = !DILocation(line: 231, column: 13, scope: !19667)
!19667 = distinct !DILexicalBlock(scope: !19563, file: !19454, line: 231, column: 11)
!19668 = !DILocation(line: 231, column: 12, scope: !19667)
!19669 = !DILocation(line: 231, column: 11, scope: !19667)
!19670 = !DILocation(line: 231, column: 11, scope: !19563)
!19671 = !DILocation(line: 232, column: 13, scope: !19667)
!19672 = !DILocation(line: 232, column: 9, scope: !19667)
!19673 = !DILocation(line: 233, column: 5, scope: !19563)
!19674 = !DILocation(line: 235, column: 10, scope: !19453)
!19675 = !DILocation(line: 235, column: 4, scope: !19453)
!19676 = !DILocation(line: 235, column: 8, scope: !19453)
!19677 = !DILocation(line: 236, column: 10, scope: !19453)
!19678 = !DILocation(line: 236, column: 3, scope: !19453)
!19679 = !DILocation(line: 237, column: 1, scope: !19453)
!19680 = distinct !DISubprogram(name: "bkm_scale", scope: !19454, file: !19454, line: 48, type: !19681, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1706, retainedNodes: !152)
!19681 = !DISubroutineType(types: !19682)
!19682 = !{!1276, !19457, !27}
!19683 = !DILocalVariable(name: "x", arg: 1, scope: !19680, file: !19454, line: 48, type: !19457)
!19684 = !DILocation(line: 48, column: 24, scope: !19680)
!19685 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !19680, file: !19454, line: 48, type: !27)
!19686 = !DILocation(line: 48, column: 31, scope: !19680)
!19687 = !DILocation(line: 55, column: 26, scope: !19688)
!19688 = distinct !DILexicalBlock(scope: !19680, file: !19454, line: 55, column: 7)
!19689 = !DILocation(line: 55, column: 24, scope: !19688)
!19690 = !DILocation(line: 55, column: 42, scope: !19688)
!19691 = !DILocation(line: 55, column: 41, scope: !19688)
!19692 = !DILocation(line: 55, column: 39, scope: !19688)
!19693 = !DILocation(line: 55, column: 7, scope: !19680)
!19694 = !DILocation(line: 57, column: 8, scope: !19695)
!19695 = distinct !DILexicalBlock(scope: !19688, file: !19454, line: 56, column: 5)
!19696 = !DILocation(line: 57, column: 10, scope: !19695)
!19697 = !DILocation(line: 58, column: 7, scope: !19695)
!19698 = !DILocation(line: 60, column: 9, scope: !19680)
!19699 = !DILocation(line: 60, column: 4, scope: !19680)
!19700 = !DILocation(line: 60, column: 6, scope: !19680)
!19701 = !DILocation(line: 61, column: 3, scope: !19680)
!19702 = !DILocation(line: 62, column: 1, scope: !19680)
!19703 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !19454, file: !19454, line: 65, type: !19704, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1706, retainedNodes: !152)
!19704 = !DISubroutineType(types: !19705)
!19705 = !{!1276, !19457, !27, !27}
!19706 = !DILocalVariable(name: "x", arg: 1, scope: !19703, file: !19454, line: 65, type: !19457)
!19707 = !DILocation(line: 65, column: 33, scope: !19703)
!19708 = !DILocalVariable(name: "base", arg: 2, scope: !19703, file: !19454, line: 65, type: !27)
!19709 = !DILocation(line: 65, column: 40, scope: !19703)
!19710 = !DILocalVariable(name: "power", arg: 3, scope: !19703, file: !19454, line: 65, type: !27)
!19711 = !DILocation(line: 65, column: 50, scope: !19703)
!19712 = !DILocalVariable(name: "err", scope: !19703, file: !19454, line: 67, type: !1276)
!19713 = !DILocation(line: 67, column: 16, scope: !19703)
!19714 = !DILocation(line: 68, column: 3, scope: !19703)
!19715 = !DILocation(line: 68, column: 15, scope: !19703)
!19716 = !DILocation(line: 69, column: 23, scope: !19703)
!19717 = !DILocation(line: 69, column: 26, scope: !19703)
!19718 = !DILocation(line: 69, column: 12, scope: !19703)
!19719 = !DILocation(line: 69, column: 9, scope: !19703)
!19720 = distinct !{!19720, !19714, !19721}
!19721 = !DILocation(line: 69, column: 30, scope: !19703)
!19722 = !DILocation(line: 70, column: 10, scope: !19703)
!19723 = !DILocation(line: 70, column: 3, scope: !19703)
!19724 = distinct !DISubprogram(name: "xstrtol_fatal", scope: !19725, file: !19725, line: 92, type: !19726, scopeLine: 95, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !1712, retainedNodes: !152)
!19725 = !DIFile(filename: "lib/xstrtol-error.c", directory: "/home/mbarbar/software/coreutils-8.31")
!19726 = !DISubroutineType(types: !19727)
!19727 = !{null, !109, !27, !144, !1718, !146}
!19728 = !DILocalVariable(name: "err", arg: 1, scope: !19724, file: !19725, line: 92, type: !109)
!19729 = !DILocation(line: 92, column: 34, scope: !19724)
!19730 = !DILocalVariable(name: "opt_idx", arg: 2, scope: !19724, file: !19725, line: 93, type: !27)
!19731 = !DILocation(line: 93, column: 20, scope: !19724)
!19732 = !DILocalVariable(name: "c", arg: 3, scope: !19724, file: !19725, line: 93, type: !144)
!19733 = !DILocation(line: 93, column: 34, scope: !19724)
!19734 = !DILocalVariable(name: "long_options", arg: 4, scope: !19724, file: !19725, line: 93, type: !1718)
!19735 = !DILocation(line: 93, column: 58, scope: !19724)
!19736 = !DILocalVariable(name: "arg", arg: 5, scope: !19724, file: !19725, line: 94, type: !146)
!19737 = !DILocation(line: 94, column: 28, scope: !19724)
!19738 = !DILocation(line: 96, column: 18, scope: !19724)
!19739 = !DILocation(line: 96, column: 23, scope: !19724)
!19740 = !DILocation(line: 96, column: 32, scope: !19724)
!19741 = !DILocation(line: 96, column: 35, scope: !19724)
!19742 = !DILocation(line: 96, column: 49, scope: !19724)
!19743 = !DILocation(line: 96, column: 54, scope: !19724)
!19744 = !DILocation(line: 96, column: 3, scope: !19724)
!19745 = !DILocation(line: 97, column: 3, scope: !19724)
!19746 = distinct !DISubprogram(name: "xstrtol_error", scope: !19725, file: !19725, line: 47, type: !19747, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1712, retainedNodes: !152)
!19747 = !DISubroutineType(types: !19748)
!19748 = !{null, !109, !27, !144, !1718, !146, !27}
!19749 = !DILocalVariable(name: "err", arg: 1, scope: !19746, file: !19725, line: 47, type: !109)
!19750 = !DILocation(line: 47, column: 34, scope: !19746)
!19751 = !DILocalVariable(name: "opt_idx", arg: 2, scope: !19746, file: !19725, line: 48, type: !27)
!19752 = !DILocation(line: 48, column: 20, scope: !19746)
!19753 = !DILocalVariable(name: "c", arg: 3, scope: !19746, file: !19725, line: 48, type: !144)
!19754 = !DILocation(line: 48, column: 34, scope: !19746)
!19755 = !DILocalVariable(name: "long_options", arg: 4, scope: !19746, file: !19725, line: 48, type: !1718)
!19756 = !DILocation(line: 48, column: 58, scope: !19746)
!19757 = !DILocalVariable(name: "arg", arg: 5, scope: !19746, file: !19725, line: 49, type: !146)
!19758 = !DILocation(line: 49, column: 28, scope: !19746)
!19759 = !DILocalVariable(name: "exit_status", arg: 6, scope: !19746, file: !19725, line: 50, type: !27)
!19760 = !DILocation(line: 50, column: 20, scope: !19746)
!19761 = !DILocalVariable(name: "hyphens", scope: !19746, file: !19725, line: 52, type: !146)
!19762 = !DILocation(line: 52, column: 15, scope: !19746)
!19763 = !DILocalVariable(name: "msgid", scope: !19746, file: !19725, line: 53, type: !146)
!19764 = !DILocation(line: 53, column: 15, scope: !19746)
!19765 = !DILocalVariable(name: "option", scope: !19746, file: !19725, line: 54, type: !146)
!19766 = !DILocation(line: 54, column: 15, scope: !19746)
!19767 = !DILocalVariable(name: "option_buffer", scope: !19746, file: !19725, line: 55, type: !261)
!19768 = !DILocation(line: 55, column: 8, scope: !19746)
!19769 = !DILocation(line: 57, column: 11, scope: !19746)
!19770 = !DILocation(line: 57, column: 3, scope: !19746)
!19771 = !DILocation(line: 60, column: 7, scope: !19772)
!19772 = distinct !DILexicalBlock(scope: !19746, file: !19725, line: 58, column: 5)
!19773 = !DILocation(line: 63, column: 13, scope: !19772)
!19774 = !DILocation(line: 64, column: 7, scope: !19772)
!19775 = !DILocation(line: 68, column: 13, scope: !19772)
!19776 = !DILocation(line: 69, column: 7, scope: !19772)
!19777 = !DILocation(line: 72, column: 13, scope: !19772)
!19778 = !DILocation(line: 73, column: 7, scope: !19772)
!19779 = !DILocation(line: 76, column: 7, scope: !19780)
!19780 = distinct !DILexicalBlock(scope: !19746, file: !19725, line: 76, column: 7)
!19781 = !DILocation(line: 76, column: 15, scope: !19780)
!19782 = !DILocation(line: 76, column: 7, scope: !19746)
!19783 = !DILocation(line: 78, column: 18, scope: !19784)
!19784 = distinct !DILexicalBlock(scope: !19780, file: !19725, line: 77, column: 5)
!19785 = !DILocation(line: 78, column: 15, scope: !19784)
!19786 = !DILocation(line: 79, column: 26, scope: !19784)
!19787 = !DILocation(line: 79, column: 7, scope: !19784)
!19788 = !DILocation(line: 79, column: 24, scope: !19784)
!19789 = !DILocation(line: 80, column: 7, scope: !19784)
!19790 = !DILocation(line: 80, column: 24, scope: !19784)
!19791 = !DILocation(line: 81, column: 16, scope: !19784)
!19792 = !DILocation(line: 81, column: 14, scope: !19784)
!19793 = !DILocation(line: 82, column: 5, scope: !19784)
!19794 = !DILocation(line: 84, column: 14, scope: !19780)
!19795 = !DILocation(line: 84, column: 27, scope: !19780)
!19796 = !DILocation(line: 84, column: 36, scope: !19780)
!19797 = !DILocation(line: 84, column: 12, scope: !19780)
!19798 = !DILocation(line: 86, column: 10, scope: !19746)
!19799 = !DILocation(line: 86, column: 35, scope: !19746)
!19800 = !DILocation(line: 86, column: 26, scope: !19746)
!19801 = !DILocation(line: 86, column: 43, scope: !19746)
!19802 = !DILocation(line: 86, column: 52, scope: !19746)
!19803 = !DILocation(line: 86, column: 60, scope: !19746)
!19804 = !DILocation(line: 86, column: 3, scope: !19746)
!19805 = !DILocation(line: 87, column: 1, scope: !19746)
!19806 = distinct !DISubprogram(name: "xstrtoumax", scope: !19454, file: !19454, line: 76, type: !19807, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1726, retainedNodes: !152)
!19807 = !DISubroutineType(types: !19808)
!19808 = !{!1276, !146, !142, !27, !13759, !146}
!19809 = !DILocalVariable(name: "s", arg: 1, scope: !19806, file: !19454, line: 76, type: !146)
!19810 = !DILocation(line: 76, column: 24, scope: !19806)
!19811 = !DILocalVariable(name: "ptr", arg: 2, scope: !19806, file: !19454, line: 76, type: !142)
!19812 = !DILocation(line: 76, column: 34, scope: !19806)
!19813 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !19806, file: !19454, line: 76, type: !27)
!19814 = !DILocation(line: 76, column: 43, scope: !19806)
!19815 = !DILocalVariable(name: "val", arg: 4, scope: !19806, file: !19454, line: 77, type: !13759)
!19816 = !DILocation(line: 77, column: 24, scope: !19806)
!19817 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !19806, file: !19454, line: 77, type: !146)
!19818 = !DILocation(line: 77, column: 41, scope: !19806)
!19819 = !DILocalVariable(name: "t_ptr", scope: !19806, file: !19454, line: 79, type: !143)
!19820 = !DILocation(line: 79, column: 9, scope: !19806)
!19821 = !DILocalVariable(name: "p", scope: !19806, file: !19454, line: 80, type: !142)
!19822 = !DILocation(line: 80, column: 10, scope: !19806)
!19823 = !DILocalVariable(name: "tmp", scope: !19806, file: !19454, line: 81, type: !168)
!19824 = !DILocation(line: 81, column: 14, scope: !19806)
!19825 = !DILocalVariable(name: "err", scope: !19806, file: !19454, line: 82, type: !1276)
!19826 = !DILocation(line: 82, column: 16, scope: !19806)
!19827 = !DILocation(line: 84, column: 3, scope: !19828)
!19828 = distinct !DILexicalBlock(scope: !19829, file: !19454, line: 84, column: 3)
!19829 = distinct !DILexicalBlock(scope: !19806, file: !19454, line: 84, column: 3)
!19830 = !DILocation(line: 84, column: 3, scope: !19829)
!19831 = !DILocation(line: 86, column: 8, scope: !19806)
!19832 = !DILocation(line: 86, column: 14, scope: !19806)
!19833 = !DILocation(line: 86, column: 5, scope: !19806)
!19834 = !DILocation(line: 88, column: 3, scope: !19806)
!19835 = !DILocation(line: 88, column: 9, scope: !19806)
!19836 = !DILocalVariable(name: "q", scope: !19837, file: !19454, line: 92, type: !146)
!19837 = distinct !DILexicalBlock(scope: !19838, file: !19454, line: 91, column: 5)
!19838 = distinct !DILexicalBlock(scope: !19806, file: !19454, line: 90, column: 7)
!19839 = !DILocation(line: 92, column: 19, scope: !19837)
!19840 = !DILocation(line: 92, column: 23, scope: !19837)
!19841 = !DILocalVariable(name: "ch", scope: !19837, file: !19454, line: 93, type: !737)
!19842 = !DILocation(line: 93, column: 21, scope: !19837)
!19843 = !DILocation(line: 93, column: 27, scope: !19837)
!19844 = !DILocation(line: 93, column: 26, scope: !19837)
!19845 = !DILocation(line: 94, column: 7, scope: !19837)
!19846 = !DILocation(line: 94, column: 14, scope: !19837)
!19847 = !DILocation(line: 95, column: 15, scope: !19837)
!19848 = !DILocation(line: 95, column: 14, scope: !19837)
!19849 = !DILocation(line: 95, column: 12, scope: !19837)
!19850 = distinct !{!19850, !19845, !19851}
!19851 = !DILocation(line: 95, column: 17, scope: !19837)
!19852 = !DILocation(line: 96, column: 11, scope: !19853)
!19853 = distinct !DILexicalBlock(scope: !19837, file: !19454, line: 96, column: 11)
!19854 = !DILocation(line: 96, column: 14, scope: !19853)
!19855 = !DILocation(line: 96, column: 11, scope: !19837)
!19856 = !DILocation(line: 97, column: 9, scope: !19853)
!19857 = !DILocation(line: 100, column: 19, scope: !19806)
!19858 = !DILocation(line: 100, column: 22, scope: !19806)
!19859 = !DILocation(line: 100, column: 25, scope: !19806)
!19860 = !DILocation(line: 100, column: 9, scope: !19806)
!19861 = !DILocation(line: 100, column: 7, scope: !19806)
!19862 = !DILocation(line: 102, column: 8, scope: !19863)
!19863 = distinct !DILexicalBlock(scope: !19806, file: !19454, line: 102, column: 7)
!19864 = !DILocation(line: 102, column: 7, scope: !19863)
!19865 = !DILocation(line: 102, column: 13, scope: !19863)
!19866 = !DILocation(line: 102, column: 10, scope: !19863)
!19867 = !DILocation(line: 102, column: 7, scope: !19806)
!19868 = !DILocation(line: 106, column: 11, scope: !19869)
!19869 = distinct !DILexicalBlock(scope: !19870, file: !19454, line: 106, column: 11)
!19870 = distinct !DILexicalBlock(scope: !19863, file: !19454, line: 103, column: 5)
!19871 = !DILocation(line: 106, column: 26, scope: !19869)
!19872 = !DILocation(line: 106, column: 31, scope: !19869)
!19873 = !DILocation(line: 106, column: 30, scope: !19869)
!19874 = !DILocation(line: 106, column: 29, scope: !19869)
!19875 = !DILocation(line: 106, column: 33, scope: !19869)
!19876 = !DILocation(line: 106, column: 44, scope: !19869)
!19877 = !DILocation(line: 106, column: 62, scope: !19869)
!19878 = !DILocation(line: 106, column: 61, scope: !19869)
!19879 = !DILocation(line: 106, column: 60, scope: !19869)
!19880 = !DILocation(line: 106, column: 36, scope: !19869)
!19881 = !DILocation(line: 106, column: 11, scope: !19870)
!19882 = !DILocation(line: 107, column: 13, scope: !19869)
!19883 = !DILocation(line: 107, column: 9, scope: !19869)
!19884 = !DILocation(line: 109, column: 9, scope: !19869)
!19885 = !DILocation(line: 110, column: 5, scope: !19870)
!19886 = !DILocation(line: 111, column: 12, scope: !19887)
!19887 = distinct !DILexicalBlock(scope: !19863, file: !19454, line: 111, column: 12)
!19888 = !DILocation(line: 111, column: 18, scope: !19887)
!19889 = !DILocation(line: 111, column: 12, scope: !19863)
!19890 = !DILocation(line: 113, column: 11, scope: !19891)
!19891 = distinct !DILexicalBlock(scope: !19892, file: !19454, line: 113, column: 11)
!19892 = distinct !DILexicalBlock(scope: !19887, file: !19454, line: 112, column: 5)
!19893 = !DILocation(line: 113, column: 17, scope: !19891)
!19894 = !DILocation(line: 113, column: 11, scope: !19892)
!19895 = !DILocation(line: 114, column: 9, scope: !19891)
!19896 = !DILocation(line: 115, column: 11, scope: !19892)
!19897 = !DILocation(line: 116, column: 5, scope: !19892)
!19898 = !DILocation(line: 121, column: 8, scope: !19899)
!19899 = distinct !DILexicalBlock(scope: !19806, file: !19454, line: 121, column: 7)
!19900 = !DILocation(line: 121, column: 7, scope: !19806)
!19901 = !DILocation(line: 123, column: 14, scope: !19902)
!19902 = distinct !DILexicalBlock(scope: !19899, file: !19454, line: 122, column: 5)
!19903 = !DILocation(line: 123, column: 8, scope: !19902)
!19904 = !DILocation(line: 123, column: 12, scope: !19902)
!19905 = !DILocation(line: 124, column: 14, scope: !19902)
!19906 = !DILocation(line: 124, column: 7, scope: !19902)
!19907 = !DILocation(line: 127, column: 9, scope: !19908)
!19908 = distinct !DILexicalBlock(scope: !19806, file: !19454, line: 127, column: 7)
!19909 = !DILocation(line: 127, column: 8, scope: !19908)
!19910 = !DILocation(line: 127, column: 7, scope: !19908)
!19911 = !DILocation(line: 127, column: 11, scope: !19908)
!19912 = !DILocation(line: 127, column: 7, scope: !19806)
!19913 = !DILocalVariable(name: "base", scope: !19914, file: !19454, line: 129, type: !27)
!19914 = distinct !DILexicalBlock(scope: !19908, file: !19454, line: 128, column: 5)
!19915 = !DILocation(line: 129, column: 11, scope: !19914)
!19916 = !DILocalVariable(name: "suffixes", scope: !19914, file: !19454, line: 130, type: !27)
!19917 = !DILocation(line: 130, column: 11, scope: !19914)
!19918 = !DILocalVariable(name: "overflow", scope: !19914, file: !19454, line: 131, type: !1276)
!19919 = !DILocation(line: 131, column: 20, scope: !19914)
!19920 = !DILocation(line: 133, column: 20, scope: !19921)
!19921 = distinct !DILexicalBlock(scope: !19914, file: !19454, line: 133, column: 11)
!19922 = !DILocation(line: 133, column: 38, scope: !19921)
!19923 = !DILocation(line: 133, column: 37, scope: !19921)
!19924 = !DILocation(line: 133, column: 36, scope: !19921)
!19925 = !DILocation(line: 133, column: 12, scope: !19921)
!19926 = !DILocation(line: 133, column: 11, scope: !19914)
!19927 = !DILocation(line: 135, column: 18, scope: !19928)
!19928 = distinct !DILexicalBlock(scope: !19921, file: !19454, line: 134, column: 9)
!19929 = !DILocation(line: 135, column: 12, scope: !19928)
!19930 = !DILocation(line: 135, column: 16, scope: !19928)
!19931 = !DILocation(line: 136, column: 18, scope: !19928)
!19932 = !DILocation(line: 136, column: 22, scope: !19928)
!19933 = !DILocation(line: 136, column: 11, scope: !19928)
!19934 = !DILocation(line: 139, column: 17, scope: !19914)
!19935 = !DILocation(line: 139, column: 16, scope: !19914)
!19936 = !DILocation(line: 139, column: 15, scope: !19914)
!19937 = !DILocation(line: 139, column: 7, scope: !19914)
!19938 = !DILocation(line: 151, column: 23, scope: !19939)
!19939 = distinct !DILexicalBlock(scope: !19940, file: !19454, line: 151, column: 15)
!19940 = distinct !DILexicalBlock(scope: !19914, file: !19454, line: 140, column: 9)
!19941 = !DILocation(line: 151, column: 15, scope: !19939)
!19942 = !DILocation(line: 151, column: 15, scope: !19940)
!19943 = !DILocation(line: 152, column: 21, scope: !19939)
!19944 = !DILocation(line: 152, column: 13, scope: !19939)
!19945 = !DILocation(line: 155, column: 21, scope: !19946)
!19946 = distinct !DILexicalBlock(scope: !19947, file: !19454, line: 155, column: 21)
!19947 = distinct !DILexicalBlock(scope: !19939, file: !19454, line: 153, column: 15)
!19948 = !DILocation(line: 155, column: 29, scope: !19946)
!19949 = !DILocation(line: 155, column: 21, scope: !19947)
!19950 = !DILocation(line: 156, column: 28, scope: !19946)
!19951 = !DILocation(line: 156, column: 19, scope: !19946)
!19952 = !DILocation(line: 157, column: 17, scope: !19947)
!19953 = !DILocation(line: 161, column: 22, scope: !19947)
!19954 = !DILocation(line: 162, column: 25, scope: !19947)
!19955 = !DILocation(line: 163, column: 17, scope: !19947)
!19956 = !DILocation(line: 164, column: 15, scope: !19947)
!19957 = !DILocation(line: 165, column: 9, scope: !19940)
!19958 = !DILocation(line: 167, column: 17, scope: !19914)
!19959 = !DILocation(line: 167, column: 16, scope: !19914)
!19960 = !DILocation(line: 167, column: 15, scope: !19914)
!19961 = !DILocation(line: 167, column: 7, scope: !19914)
!19962 = !DILocation(line: 170, column: 22, scope: !19963)
!19963 = distinct !DILexicalBlock(scope: !19914, file: !19454, line: 168, column: 9)
!19964 = !DILocation(line: 170, column: 20, scope: !19963)
!19965 = !DILocation(line: 171, column: 11, scope: !19963)
!19966 = !DILocation(line: 177, column: 22, scope: !19963)
!19967 = !DILocation(line: 177, column: 20, scope: !19963)
!19968 = !DILocation(line: 178, column: 11, scope: !19963)
!19969 = !DILocation(line: 181, column: 20, scope: !19963)
!19970 = !DILocation(line: 182, column: 11, scope: !19963)
!19971 = !DILocation(line: 185, column: 48, scope: !19963)
!19972 = !DILocation(line: 185, column: 22, scope: !19963)
!19973 = !DILocation(line: 185, column: 20, scope: !19963)
!19974 = !DILocation(line: 186, column: 11, scope: !19963)
!19975 = !DILocation(line: 190, column: 48, scope: !19963)
!19976 = !DILocation(line: 190, column: 22, scope: !19963)
!19977 = !DILocation(line: 190, column: 20, scope: !19963)
!19978 = !DILocation(line: 191, column: 11, scope: !19963)
!19979 = !DILocation(line: 195, column: 48, scope: !19963)
!19980 = !DILocation(line: 195, column: 22, scope: !19963)
!19981 = !DILocation(line: 195, column: 20, scope: !19963)
!19982 = !DILocation(line: 196, column: 11, scope: !19963)
!19983 = !DILocation(line: 200, column: 48, scope: !19963)
!19984 = !DILocation(line: 200, column: 22, scope: !19963)
!19985 = !DILocation(line: 200, column: 20, scope: !19963)
!19986 = !DILocation(line: 201, column: 11, scope: !19963)
!19987 = !DILocation(line: 204, column: 48, scope: !19963)
!19988 = !DILocation(line: 204, column: 22, scope: !19963)
!19989 = !DILocation(line: 204, column: 20, scope: !19963)
!19990 = !DILocation(line: 205, column: 11, scope: !19963)
!19991 = !DILocation(line: 209, column: 48, scope: !19963)
!19992 = !DILocation(line: 209, column: 22, scope: !19963)
!19993 = !DILocation(line: 209, column: 20, scope: !19963)
!19994 = !DILocation(line: 210, column: 11, scope: !19963)
!19995 = !DILocation(line: 213, column: 22, scope: !19963)
!19996 = !DILocation(line: 213, column: 20, scope: !19963)
!19997 = !DILocation(line: 214, column: 11, scope: !19963)
!19998 = !DILocation(line: 217, column: 48, scope: !19963)
!19999 = !DILocation(line: 217, column: 22, scope: !19963)
!20000 = !DILocation(line: 217, column: 20, scope: !19963)
!20001 = !DILocation(line: 218, column: 11, scope: !19963)
!20002 = !DILocation(line: 221, column: 48, scope: !19963)
!20003 = !DILocation(line: 221, column: 22, scope: !19963)
!20004 = !DILocation(line: 221, column: 20, scope: !19963)
!20005 = !DILocation(line: 222, column: 11, scope: !19963)
!20006 = !DILocation(line: 225, column: 18, scope: !19963)
!20007 = !DILocation(line: 225, column: 12, scope: !19963)
!20008 = !DILocation(line: 225, column: 16, scope: !19963)
!20009 = !DILocation(line: 226, column: 18, scope: !19963)
!20010 = !DILocation(line: 226, column: 22, scope: !19963)
!20011 = !DILocation(line: 226, column: 11, scope: !19963)
!20012 = !DILocation(line: 229, column: 14, scope: !19914)
!20013 = !DILocation(line: 229, column: 11, scope: !19914)
!20014 = !DILocation(line: 230, column: 13, scope: !19914)
!20015 = !DILocation(line: 230, column: 8, scope: !19914)
!20016 = !DILocation(line: 230, column: 10, scope: !19914)
!20017 = !DILocation(line: 231, column: 13, scope: !20018)
!20018 = distinct !DILexicalBlock(scope: !19914, file: !19454, line: 231, column: 11)
!20019 = !DILocation(line: 231, column: 12, scope: !20018)
!20020 = !DILocation(line: 231, column: 11, scope: !20018)
!20021 = !DILocation(line: 231, column: 11, scope: !19914)
!20022 = !DILocation(line: 232, column: 13, scope: !20018)
!20023 = !DILocation(line: 232, column: 9, scope: !20018)
!20024 = !DILocation(line: 233, column: 5, scope: !19914)
!20025 = !DILocation(line: 235, column: 10, scope: !19806)
!20026 = !DILocation(line: 235, column: 4, scope: !19806)
!20027 = !DILocation(line: 235, column: 8, scope: !19806)
!20028 = !DILocation(line: 236, column: 10, scope: !19806)
!20029 = !DILocation(line: 236, column: 3, scope: !19806)
!20030 = !DILocation(line: 237, column: 1, scope: !19806)
!20031 = distinct !DISubprogram(name: "bkm_scale", scope: !19454, file: !19454, line: 48, type: !20032, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1726, retainedNodes: !152)
!20032 = !DISubroutineType(types: !20033)
!20033 = !{!1276, !13759, !27}
!20034 = !DILocalVariable(name: "x", arg: 1, scope: !20031, file: !19454, line: 48, type: !13759)
!20035 = !DILocation(line: 48, column: 24, scope: !20031)
!20036 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !20031, file: !19454, line: 48, type: !27)
!20037 = !DILocation(line: 48, column: 31, scope: !20031)
!20038 = !DILocation(line: 55, column: 26, scope: !20039)
!20039 = distinct !DILexicalBlock(scope: !20031, file: !19454, line: 55, column: 7)
!20040 = !DILocation(line: 55, column: 24, scope: !20039)
!20041 = !DILocation(line: 55, column: 42, scope: !20039)
!20042 = !DILocation(line: 55, column: 41, scope: !20039)
!20043 = !DILocation(line: 55, column: 39, scope: !20039)
!20044 = !DILocation(line: 55, column: 7, scope: !20031)
!20045 = !DILocation(line: 57, column: 8, scope: !20046)
!20046 = distinct !DILexicalBlock(scope: !20039, file: !19454, line: 56, column: 5)
!20047 = !DILocation(line: 57, column: 10, scope: !20046)
!20048 = !DILocation(line: 58, column: 7, scope: !20046)
!20049 = !DILocation(line: 60, column: 9, scope: !20031)
!20050 = !DILocation(line: 60, column: 4, scope: !20031)
!20051 = !DILocation(line: 60, column: 6, scope: !20031)
!20052 = !DILocation(line: 61, column: 3, scope: !20031)
!20053 = !DILocation(line: 62, column: 1, scope: !20031)
!20054 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !19454, file: !19454, line: 65, type: !20055, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1726, retainedNodes: !152)
!20055 = !DISubroutineType(types: !20056)
!20056 = !{!1276, !13759, !27, !27}
!20057 = !DILocalVariable(name: "x", arg: 1, scope: !20054, file: !19454, line: 65, type: !13759)
!20058 = !DILocation(line: 65, column: 33, scope: !20054)
!20059 = !DILocalVariable(name: "base", arg: 2, scope: !20054, file: !19454, line: 65, type: !27)
!20060 = !DILocation(line: 65, column: 40, scope: !20054)
!20061 = !DILocalVariable(name: "power", arg: 3, scope: !20054, file: !19454, line: 65, type: !27)
!20062 = !DILocation(line: 65, column: 50, scope: !20054)
!20063 = !DILocalVariable(name: "err", scope: !20054, file: !19454, line: 67, type: !1276)
!20064 = !DILocation(line: 67, column: 16, scope: !20054)
!20065 = !DILocation(line: 68, column: 3, scope: !20054)
!20066 = !DILocation(line: 68, column: 15, scope: !20054)
!20067 = !DILocation(line: 69, column: 23, scope: !20054)
!20068 = !DILocation(line: 69, column: 26, scope: !20054)
!20069 = !DILocation(line: 69, column: 12, scope: !20054)
!20070 = !DILocation(line: 69, column: 9, scope: !20054)
!20071 = distinct !{!20071, !20065, !20072}
!20072 = !DILocation(line: 69, column: 30, scope: !20054)
!20073 = !DILocation(line: 70, column: 10, scope: !20054)
!20074 = !DILocation(line: 70, column: 3, scope: !20054)
!20075 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !20076, file: !20076, line: 385, type: !20077, scopeLine: 386, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1729, retainedNodes: !152)
!20076 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/mbarbar/software/coreutils-8.31")
!20077 = !DISubroutineType(types: !20078)
!20078 = !{!149, !1595, !146, !149, !20079}
!20079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20080, size: 64)
!20080 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !753, line: 6, baseType: !20081)
!20081 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !755, line: 21, baseType: !20082)
!20082 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !755, line: 13, size: 64, elements: !20083)
!20083 = !{!20084, !20085}
!20084 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !20082, file: !755, line: 15, baseType: !27, size: 32)
!20085 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !20082, file: !755, line: 20, baseType: !20086, size: 32, offset: 32)
!20086 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !20082, file: !755, line: 16, size: 32, elements: !20087)
!20087 = !{!20088, !20089}
!20088 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !20086, file: !755, line: 18, baseType: !6, size: 32)
!20089 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !20086, file: !755, line: 19, baseType: !444, size: 32)
!20090 = !DILocalVariable(name: "pwc", arg: 1, scope: !20075, file: !20076, line: 385, type: !1595)
!20091 = !DILocation(line: 385, column: 23, scope: !20075)
!20092 = !DILocalVariable(name: "s", arg: 2, scope: !20075, file: !20076, line: 385, type: !146)
!20093 = !DILocation(line: 385, column: 40, scope: !20075)
!20094 = !DILocalVariable(name: "n", arg: 3, scope: !20075, file: !20076, line: 385, type: !149)
!20095 = !DILocation(line: 385, column: 50, scope: !20075)
!20096 = !DILocalVariable(name: "ps", arg: 4, scope: !20075, file: !20076, line: 385, type: !20079)
!20097 = !DILocation(line: 385, column: 64, scope: !20075)
!20098 = !DILocalVariable(name: "ret", scope: !20075, file: !20076, line: 387, type: !149)
!20099 = !DILocation(line: 387, column: 10, scope: !20075)
!20100 = !DILocalVariable(name: "wc", scope: !20075, file: !20076, line: 388, type: !764)
!20101 = !DILocation(line: 388, column: 11, scope: !20075)
!20102 = !DILocation(line: 404, column: 9, scope: !20103)
!20103 = distinct !DILexicalBlock(scope: !20075, file: !20076, line: 404, column: 7)
!20104 = !DILocation(line: 404, column: 7, scope: !20075)
!20105 = !DILocation(line: 405, column: 9, scope: !20103)
!20106 = !DILocation(line: 405, column: 5, scope: !20103)
!20107 = !DILocation(line: 439, column: 18, scope: !20075)
!20108 = !DILocation(line: 439, column: 23, scope: !20075)
!20109 = !DILocation(line: 439, column: 26, scope: !20075)
!20110 = !DILocation(line: 439, column: 29, scope: !20075)
!20111 = !DILocation(line: 439, column: 9, scope: !20075)
!20112 = !DILocation(line: 439, column: 7, scope: !20075)
!20113 = !DILocation(line: 447, column: 22, scope: !20114)
!20114 = distinct !DILexicalBlock(scope: !20075, file: !20076, line: 447, column: 7)
!20115 = !DILocation(line: 447, column: 19, scope: !20114)
!20116 = !DILocation(line: 447, column: 26, scope: !20114)
!20117 = !DILocation(line: 447, column: 29, scope: !20114)
!20118 = !DILocation(line: 447, column: 31, scope: !20114)
!20119 = !DILocation(line: 447, column: 36, scope: !20114)
!20120 = !DILocation(line: 447, column: 41, scope: !20114)
!20121 = !DILocation(line: 447, column: 7, scope: !20075)
!20122 = !DILocalVariable(name: "uc", scope: !20123, file: !20076, line: 449, type: !737)
!20123 = distinct !DILexicalBlock(scope: !20114, file: !20076, line: 448, column: 5)
!20124 = !DILocation(line: 449, column: 21, scope: !20123)
!20125 = !DILocation(line: 449, column: 27, scope: !20123)
!20126 = !DILocation(line: 449, column: 26, scope: !20123)
!20127 = !DILocation(line: 450, column: 14, scope: !20123)
!20128 = !DILocation(line: 450, column: 8, scope: !20123)
!20129 = !DILocation(line: 450, column: 12, scope: !20123)
!20130 = !DILocation(line: 451, column: 7, scope: !20123)
!20131 = !DILocation(line: 455, column: 10, scope: !20075)
!20132 = !DILocation(line: 455, column: 3, scope: !20075)
!20133 = !DILocation(line: 456, column: 1, scope: !20075)
!20134 = distinct !DISubprogram(name: "print_and_abort", scope: !1510, file: !1510, line: 330, type: !532, scopeLine: 331, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20135 = !DILocation(line: 340, column: 12, scope: !20134)
!20136 = !DILocation(line: 340, column: 28, scope: !20134)
!20137 = !DILocation(line: 340, column: 3, scope: !20134)
!20138 = !DILocation(line: 342, column: 9, scope: !20134)
!20139 = !DILocation(line: 342, column: 3, scope: !20134)
!20140 = distinct !DISubprogram(name: "_obstack_begin", scope: !1510, file: !1510, line: 150, type: !20141, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20141 = !DISubroutineType(types: !20142)
!20142 = !{!27, !20143, !149, !149, !483, !494}
!20143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64)
!20144 = !DILocalVariable(name: "h", arg: 1, scope: !20140, file: !1510, line: 150, type: !20143)
!20145 = !DILocation(line: 150, column: 33, scope: !20140)
!20146 = !DILocalVariable(name: "size", arg: 2, scope: !20140, file: !1510, line: 151, type: !149)
!20147 = !DILocation(line: 151, column: 33, scope: !20140)
!20148 = !DILocalVariable(name: "alignment", arg: 3, scope: !20140, file: !1510, line: 151, type: !149)
!20149 = !DILocation(line: 151, column: 55, scope: !20140)
!20150 = !DILocalVariable(name: "chunkfun", arg: 4, scope: !20140, file: !1510, line: 152, type: !483)
!20151 = !DILocation(line: 152, column: 25, scope: !20140)
!20152 = !DILocalVariable(name: "freefun", arg: 5, scope: !20140, file: !1510, line: 153, type: !494)
!20153 = !DILocation(line: 153, column: 24, scope: !20140)
!20154 = !DILocation(line: 155, column: 23, scope: !20140)
!20155 = !DILocation(line: 155, column: 3, scope: !20140)
!20156 = !DILocation(line: 155, column: 6, scope: !20140)
!20157 = !DILocation(line: 155, column: 15, scope: !20140)
!20158 = !DILocation(line: 155, column: 21, scope: !20140)
!20159 = !DILocation(line: 156, column: 22, scope: !20140)
!20160 = !DILocation(line: 156, column: 3, scope: !20140)
!20161 = !DILocation(line: 156, column: 6, scope: !20140)
!20162 = !DILocation(line: 156, column: 14, scope: !20140)
!20163 = !DILocation(line: 156, column: 20, scope: !20140)
!20164 = !DILocation(line: 157, column: 3, scope: !20140)
!20165 = !DILocation(line: 157, column: 6, scope: !20140)
!20166 = !DILocation(line: 157, column: 20, scope: !20140)
!20167 = !DILocation(line: 158, column: 33, scope: !20140)
!20168 = !DILocation(line: 158, column: 36, scope: !20140)
!20169 = !DILocation(line: 158, column: 42, scope: !20140)
!20170 = !DILocation(line: 158, column: 10, scope: !20140)
!20171 = !DILocation(line: 158, column: 3, scope: !20140)
!20172 = distinct !DISubprogram(name: "_obstack_begin_worker", scope: !1510, file: !1510, line: 109, type: !20173, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20173 = !DISubroutineType(types: !20174)
!20174 = !{!27, !20143, !149, !149}
!20175 = !DILocalVariable(name: "h", arg: 1, scope: !20172, file: !1510, line: 109, type: !20143)
!20176 = !DILocation(line: 109, column: 40, scope: !20172)
!20177 = !DILocalVariable(name: "size", arg: 2, scope: !20172, file: !1510, line: 110, type: !149)
!20178 = !DILocation(line: 110, column: 40, scope: !20172)
!20179 = !DILocalVariable(name: "alignment", arg: 3, scope: !20172, file: !1510, line: 110, type: !149)
!20180 = !DILocation(line: 110, column: 62, scope: !20172)
!20181 = !DILocalVariable(name: "chunk", scope: !20172, file: !1510, line: 112, type: !1447)
!20182 = !DILocation(line: 112, column: 26, scope: !20172)
!20183 = !DILocation(line: 114, column: 7, scope: !20184)
!20184 = distinct !DILexicalBlock(scope: !20172, file: !1510, line: 114, column: 7)
!20185 = !DILocation(line: 114, column: 17, scope: !20184)
!20186 = !DILocation(line: 114, column: 7, scope: !20172)
!20187 = !DILocation(line: 115, column: 15, scope: !20184)
!20188 = !DILocation(line: 115, column: 5, scope: !20184)
!20189 = !DILocation(line: 116, column: 7, scope: !20190)
!20190 = distinct !DILexicalBlock(scope: !20172, file: !1510, line: 116, column: 7)
!20191 = !DILocation(line: 116, column: 12, scope: !20190)
!20192 = !DILocation(line: 116, column: 7, scope: !20172)
!20193 = !DILocalVariable(name: "extra", scope: !20194, file: !1510, line: 127, type: !27)
!20194 = distinct !DILexicalBlock(scope: !20190, file: !1510, line: 118, column: 5)
!20195 = !DILocation(line: 127, column: 11, scope: !20194)
!20196 = !DILocation(line: 130, column: 21, scope: !20194)
!20197 = !DILocation(line: 130, column: 19, scope: !20194)
!20198 = !DILocation(line: 130, column: 14, scope: !20194)
!20199 = !DILocation(line: 130, column: 12, scope: !20194)
!20200 = !DILocation(line: 131, column: 5, scope: !20194)
!20201 = !DILocation(line: 133, column: 19, scope: !20172)
!20202 = !DILocation(line: 133, column: 3, scope: !20172)
!20203 = !DILocation(line: 133, column: 6, scope: !20172)
!20204 = !DILocation(line: 133, column: 17, scope: !20172)
!20205 = !DILocation(line: 134, column: 23, scope: !20172)
!20206 = !DILocation(line: 134, column: 33, scope: !20172)
!20207 = !DILocation(line: 134, column: 3, scope: !20172)
!20208 = !DILocation(line: 134, column: 6, scope: !20172)
!20209 = !DILocation(line: 134, column: 21, scope: !20172)
!20210 = !DILocation(line: 136, column: 37, scope: !20172)
!20211 = !DILocation(line: 136, column: 40, scope: !20172)
!20212 = !DILocation(line: 136, column: 43, scope: !20172)
!20213 = !DILocation(line: 136, column: 22, scope: !20172)
!20214 = !DILocation(line: 136, column: 11, scope: !20172)
!20215 = !DILocation(line: 136, column: 14, scope: !20172)
!20216 = !DILocation(line: 136, column: 20, scope: !20172)
!20217 = !DILocation(line: 136, column: 9, scope: !20172)
!20218 = !DILocation(line: 137, column: 8, scope: !20219)
!20219 = distinct !DILexicalBlock(scope: !20172, file: !1510, line: 137, column: 7)
!20220 = !DILocation(line: 137, column: 7, scope: !20172)
!20221 = !DILocation(line: 138, column: 7, scope: !20219)
!20222 = !DILocation(line: 138, column: 5, scope: !20219)
!20223 = !DILocation(line: 139, column: 35, scope: !20172)
!20224 = !DILocation(line: 139, column: 18, scope: !20172)
!20225 = !DILocation(line: 139, column: 21, scope: !20172)
!20226 = !DILocation(line: 139, column: 33, scope: !20172)
!20227 = !DILocation(line: 139, column: 3, scope: !20172)
!20228 = !DILocation(line: 139, column: 6, scope: !20172)
!20229 = !DILocation(line: 139, column: 16, scope: !20172)
!20230 = !DILocation(line: 141, column: 44, scope: !20172)
!20231 = !DILocation(line: 141, column: 35, scope: !20172)
!20232 = !DILocation(line: 141, column: 52, scope: !20172)
!20233 = !DILocation(line: 141, column: 55, scope: !20172)
!20234 = !DILocation(line: 141, column: 50, scope: !20172)
!20235 = !DILocation(line: 141, column: 20, scope: !20172)
!20236 = !DILocation(line: 141, column: 27, scope: !20172)
!20237 = !DILocation(line: 141, column: 33, scope: !20172)
!20238 = !DILocation(line: 141, column: 3, scope: !20172)
!20239 = !DILocation(line: 141, column: 6, scope: !20172)
!20240 = !DILocation(line: 141, column: 18, scope: !20172)
!20241 = !DILocation(line: 142, column: 3, scope: !20172)
!20242 = !DILocation(line: 142, column: 10, scope: !20172)
!20243 = !DILocation(line: 142, column: 15, scope: !20172)
!20244 = !DILocation(line: 144, column: 3, scope: !20172)
!20245 = !DILocation(line: 144, column: 6, scope: !20172)
!20246 = !DILocation(line: 144, column: 25, scope: !20172)
!20247 = !DILocation(line: 145, column: 3, scope: !20172)
!20248 = !DILocation(line: 145, column: 6, scope: !20172)
!20249 = !DILocation(line: 145, column: 19, scope: !20172)
!20250 = !DILocation(line: 146, column: 3, scope: !20172)
!20251 = distinct !DISubprogram(name: "call_chunkfun", scope: !1510, file: !1510, line: 84, type: !20252, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20252 = !DISubroutineType(types: !20253)
!20253 = !{!167, !20143, !149}
!20254 = !DILocalVariable(name: "h", arg: 1, scope: !20251, file: !1510, line: 84, type: !20143)
!20255 = !DILocation(line: 84, column: 32, scope: !20251)
!20256 = !DILocalVariable(name: "size", arg: 2, scope: !20251, file: !1510, line: 84, type: !149)
!20257 = !DILocation(line: 84, column: 42, scope: !20251)
!20258 = !DILocation(line: 86, column: 7, scope: !20259)
!20259 = distinct !DILexicalBlock(scope: !20251, file: !1510, line: 86, column: 7)
!20260 = !DILocation(line: 86, column: 10, scope: !20259)
!20261 = !DILocation(line: 86, column: 7, scope: !20251)
!20262 = !DILocation(line: 87, column: 12, scope: !20259)
!20263 = !DILocation(line: 87, column: 15, scope: !20259)
!20264 = !DILocation(line: 87, column: 24, scope: !20259)
!20265 = !DILocation(line: 87, column: 31, scope: !20259)
!20266 = !DILocation(line: 87, column: 34, scope: !20259)
!20267 = !DILocation(line: 87, column: 45, scope: !20259)
!20268 = !DILocation(line: 87, column: 5, scope: !20259)
!20269 = !DILocation(line: 89, column: 12, scope: !20259)
!20270 = !DILocation(line: 89, column: 15, scope: !20259)
!20271 = !DILocation(line: 89, column: 24, scope: !20259)
!20272 = !DILocation(line: 89, column: 31, scope: !20259)
!20273 = !DILocation(line: 89, column: 5, scope: !20259)
!20274 = !DILocation(line: 90, column: 1, scope: !20251)
!20275 = distinct !DISubprogram(name: "_obstack_begin_1", scope: !1510, file: !1510, line: 162, type: !20276, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20276 = !DISubroutineType(types: !20277)
!20277 = !{!27, !20143, !149, !149, !487, !498, !167}
!20278 = !DILocalVariable(name: "h", arg: 1, scope: !20275, file: !1510, line: 162, type: !20143)
!20279 = !DILocation(line: 162, column: 35, scope: !20275)
!20280 = !DILocalVariable(name: "size", arg: 2, scope: !20275, file: !1510, line: 163, type: !149)
!20281 = !DILocation(line: 163, column: 35, scope: !20275)
!20282 = !DILocalVariable(name: "alignment", arg: 3, scope: !20275, file: !1510, line: 163, type: !149)
!20283 = !DILocation(line: 163, column: 57, scope: !20275)
!20284 = !DILocalVariable(name: "chunkfun", arg: 4, scope: !20275, file: !1510, line: 164, type: !487)
!20285 = !DILocation(line: 164, column: 27, scope: !20275)
!20286 = !DILocalVariable(name: "freefun", arg: 5, scope: !20275, file: !1510, line: 165, type: !498)
!20287 = !DILocation(line: 165, column: 26, scope: !20275)
!20288 = !DILocalVariable(name: "arg", arg: 6, scope: !20275, file: !1510, line: 166, type: !167)
!20289 = !DILocation(line: 166, column: 25, scope: !20275)
!20290 = !DILocation(line: 168, column: 23, scope: !20275)
!20291 = !DILocation(line: 168, column: 3, scope: !20275)
!20292 = !DILocation(line: 168, column: 6, scope: !20275)
!20293 = !DILocation(line: 168, column: 15, scope: !20275)
!20294 = !DILocation(line: 168, column: 21, scope: !20275)
!20295 = !DILocation(line: 169, column: 22, scope: !20275)
!20296 = !DILocation(line: 169, column: 3, scope: !20275)
!20297 = !DILocation(line: 169, column: 6, scope: !20275)
!20298 = !DILocation(line: 169, column: 14, scope: !20275)
!20299 = !DILocation(line: 169, column: 20, scope: !20275)
!20300 = !DILocation(line: 170, column: 18, scope: !20275)
!20301 = !DILocation(line: 170, column: 3, scope: !20275)
!20302 = !DILocation(line: 170, column: 6, scope: !20275)
!20303 = !DILocation(line: 170, column: 16, scope: !20275)
!20304 = !DILocation(line: 171, column: 3, scope: !20275)
!20305 = !DILocation(line: 171, column: 6, scope: !20275)
!20306 = !DILocation(line: 171, column: 20, scope: !20275)
!20307 = !DILocation(line: 172, column: 33, scope: !20275)
!20308 = !DILocation(line: 172, column: 36, scope: !20275)
!20309 = !DILocation(line: 172, column: 42, scope: !20275)
!20310 = !DILocation(line: 172, column: 10, scope: !20275)
!20311 = !DILocation(line: 172, column: 3, scope: !20275)
!20312 = distinct !DISubprogram(name: "_obstack_newchunk", scope: !1510, file: !1510, line: 182, type: !20313, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20313 = !DISubroutineType(types: !20314)
!20314 = !{null, !20143, !149}
!20315 = !DILocalVariable(name: "h", arg: 1, scope: !20312, file: !1510, line: 182, type: !20143)
!20316 = !DILocation(line: 182, column: 36, scope: !20312)
!20317 = !DILocalVariable(name: "length", arg: 2, scope: !20312, file: !1510, line: 182, type: !149)
!20318 = !DILocation(line: 182, column: 55, scope: !20312)
!20319 = !DILocalVariable(name: "old_chunk", scope: !20312, file: !1510, line: 184, type: !1447)
!20320 = !DILocation(line: 184, column: 26, scope: !20312)
!20321 = !DILocation(line: 184, column: 38, scope: !20312)
!20322 = !DILocation(line: 184, column: 41, scope: !20312)
!20323 = !DILocalVariable(name: "new_chunk", scope: !20312, file: !1510, line: 185, type: !1447)
!20324 = !DILocation(line: 185, column: 26, scope: !20312)
!20325 = !DILocalVariable(name: "obj_size", scope: !20312, file: !1510, line: 186, type: !149)
!20326 = !DILocation(line: 186, column: 10, scope: !20312)
!20327 = !DILocation(line: 186, column: 21, scope: !20312)
!20328 = !DILocation(line: 186, column: 24, scope: !20312)
!20329 = !DILocation(line: 186, column: 36, scope: !20312)
!20330 = !DILocation(line: 186, column: 39, scope: !20312)
!20331 = !DILocation(line: 186, column: 34, scope: !20312)
!20332 = !DILocalVariable(name: "object_base", scope: !20312, file: !1510, line: 187, type: !143)
!20333 = !DILocation(line: 187, column: 9, scope: !20312)
!20334 = !DILocalVariable(name: "sum1", scope: !20312, file: !1510, line: 190, type: !149)
!20335 = !DILocation(line: 190, column: 10, scope: !20312)
!20336 = !DILocation(line: 190, column: 17, scope: !20312)
!20337 = !DILocation(line: 190, column: 28, scope: !20312)
!20338 = !DILocation(line: 190, column: 26, scope: !20312)
!20339 = !DILocalVariable(name: "sum2", scope: !20312, file: !1510, line: 191, type: !149)
!20340 = !DILocation(line: 191, column: 10, scope: !20312)
!20341 = !DILocation(line: 191, column: 17, scope: !20312)
!20342 = !DILocation(line: 191, column: 24, scope: !20312)
!20343 = !DILocation(line: 191, column: 27, scope: !20312)
!20344 = !DILocation(line: 191, column: 22, scope: !20312)
!20345 = !DILocalVariable(name: "new_size", scope: !20312, file: !1510, line: 192, type: !149)
!20346 = !DILocation(line: 192, column: 10, scope: !20312)
!20347 = !DILocation(line: 192, column: 21, scope: !20312)
!20348 = !DILocation(line: 192, column: 29, scope: !20312)
!20349 = !DILocation(line: 192, column: 38, scope: !20312)
!20350 = !DILocation(line: 192, column: 26, scope: !20312)
!20351 = !DILocation(line: 192, column: 44, scope: !20312)
!20352 = !DILocation(line: 193, column: 7, scope: !20353)
!20353 = distinct !DILexicalBlock(scope: !20312, file: !1510, line: 193, column: 7)
!20354 = !DILocation(line: 193, column: 18, scope: !20353)
!20355 = !DILocation(line: 193, column: 16, scope: !20353)
!20356 = !DILocation(line: 193, column: 7, scope: !20312)
!20357 = !DILocation(line: 194, column: 16, scope: !20353)
!20358 = !DILocation(line: 194, column: 14, scope: !20353)
!20359 = !DILocation(line: 194, column: 5, scope: !20353)
!20360 = !DILocation(line: 195, column: 7, scope: !20361)
!20361 = distinct !DILexicalBlock(scope: !20312, file: !1510, line: 195, column: 7)
!20362 = !DILocation(line: 195, column: 18, scope: !20361)
!20363 = !DILocation(line: 195, column: 21, scope: !20361)
!20364 = !DILocation(line: 195, column: 16, scope: !20361)
!20365 = !DILocation(line: 195, column: 7, scope: !20312)
!20366 = !DILocation(line: 196, column: 16, scope: !20361)
!20367 = !DILocation(line: 196, column: 19, scope: !20361)
!20368 = !DILocation(line: 196, column: 14, scope: !20361)
!20369 = !DILocation(line: 196, column: 5, scope: !20361)
!20370 = !DILocation(line: 199, column: 7, scope: !20371)
!20371 = distinct !DILexicalBlock(scope: !20312, file: !1510, line: 199, column: 7)
!20372 = !DILocation(line: 199, column: 19, scope: !20371)
!20373 = !DILocation(line: 199, column: 16, scope: !20371)
!20374 = !DILocation(line: 199, column: 24, scope: !20371)
!20375 = !DILocation(line: 199, column: 27, scope: !20371)
!20376 = !DILocation(line: 199, column: 35, scope: !20371)
!20377 = !DILocation(line: 199, column: 32, scope: !20371)
!20378 = !DILocation(line: 199, column: 7, scope: !20312)
!20379 = !DILocation(line: 200, column: 32, scope: !20371)
!20380 = !DILocation(line: 200, column: 35, scope: !20371)
!20381 = !DILocation(line: 200, column: 17, scope: !20371)
!20382 = !DILocation(line: 200, column: 15, scope: !20371)
!20383 = !DILocation(line: 200, column: 5, scope: !20371)
!20384 = !DILocation(line: 201, column: 8, scope: !20385)
!20385 = distinct !DILexicalBlock(scope: !20312, file: !1510, line: 201, column: 7)
!20386 = !DILocation(line: 201, column: 7, scope: !20312)
!20387 = !DILocation(line: 202, column: 7, scope: !20385)
!20388 = !DILocation(line: 202, column: 5, scope: !20385)
!20389 = !DILocation(line: 203, column: 14, scope: !20312)
!20390 = !DILocation(line: 203, column: 3, scope: !20312)
!20391 = !DILocation(line: 203, column: 6, scope: !20312)
!20392 = !DILocation(line: 203, column: 12, scope: !20312)
!20393 = !DILocation(line: 204, column: 21, scope: !20312)
!20394 = !DILocation(line: 204, column: 3, scope: !20312)
!20395 = !DILocation(line: 204, column: 14, scope: !20312)
!20396 = !DILocation(line: 204, column: 19, scope: !20312)
!20397 = !DILocation(line: 205, column: 48, scope: !20312)
!20398 = !DILocation(line: 205, column: 39, scope: !20312)
!20399 = !DILocation(line: 205, column: 60, scope: !20312)
!20400 = !DILocation(line: 205, column: 58, scope: !20312)
!20401 = !DILocation(line: 205, column: 22, scope: !20312)
!20402 = !DILocation(line: 205, column: 25, scope: !20312)
!20403 = !DILocation(line: 205, column: 37, scope: !20312)
!20404 = !DILocation(line: 205, column: 3, scope: !20312)
!20405 = !DILocation(line: 205, column: 14, scope: !20312)
!20406 = !DILocation(line: 205, column: 20, scope: !20312)
!20407 = !DILocation(line: 209, column: 5, scope: !20312)
!20408 = !DILocation(line: 208, column: 15, scope: !20312)
!20409 = !DILocation(line: 212, column: 11, scope: !20312)
!20410 = !DILocation(line: 212, column: 24, scope: !20312)
!20411 = !DILocation(line: 212, column: 27, scope: !20312)
!20412 = !DILocation(line: 212, column: 40, scope: !20312)
!20413 = !DILocation(line: 212, column: 3, scope: !20312)
!20414 = !DILocation(line: 217, column: 8, scope: !20415)
!20415 = distinct !DILexicalBlock(scope: !20312, file: !1510, line: 217, column: 7)
!20416 = !DILocation(line: 217, column: 11, scope: !20415)
!20417 = !DILocation(line: 218, column: 7, scope: !20415)
!20418 = !DILocation(line: 218, column: 11, scope: !20415)
!20419 = !DILocation(line: 218, column: 14, scope: !20415)
!20420 = !DILocation(line: 219, column: 14, scope: !20415)
!20421 = !DILocation(line: 219, column: 11, scope: !20415)
!20422 = !DILocation(line: 217, column: 7, scope: !20312)
!20423 = !DILocation(line: 222, column: 25, scope: !20424)
!20424 = distinct !DILexicalBlock(scope: !20415, file: !1510, line: 221, column: 5)
!20425 = !DILocation(line: 222, column: 36, scope: !20424)
!20426 = !DILocation(line: 222, column: 7, scope: !20424)
!20427 = !DILocation(line: 222, column: 18, scope: !20424)
!20428 = !DILocation(line: 222, column: 23, scope: !20424)
!20429 = !DILocation(line: 223, column: 21, scope: !20424)
!20430 = !DILocation(line: 223, column: 24, scope: !20424)
!20431 = !DILocation(line: 223, column: 7, scope: !20424)
!20432 = !DILocation(line: 224, column: 5, scope: !20424)
!20433 = !DILocation(line: 226, column: 20, scope: !20312)
!20434 = !DILocation(line: 226, column: 3, scope: !20312)
!20435 = !DILocation(line: 226, column: 6, scope: !20312)
!20436 = !DILocation(line: 226, column: 18, scope: !20312)
!20437 = !DILocation(line: 227, column: 18, scope: !20312)
!20438 = !DILocation(line: 227, column: 21, scope: !20312)
!20439 = !DILocation(line: 227, column: 35, scope: !20312)
!20440 = !DILocation(line: 227, column: 33, scope: !20312)
!20441 = !DILocation(line: 227, column: 3, scope: !20312)
!20442 = !DILocation(line: 227, column: 6, scope: !20312)
!20443 = !DILocation(line: 227, column: 16, scope: !20312)
!20444 = !DILocation(line: 229, column: 3, scope: !20312)
!20445 = !DILocation(line: 229, column: 6, scope: !20312)
!20446 = !DILocation(line: 229, column: 25, scope: !20312)
!20447 = !DILocation(line: 230, column: 1, scope: !20312)
!20448 = distinct !DISubprogram(name: "call_freefun", scope: !1510, file: !1510, line: 93, type: !20449, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20449 = !DISubroutineType(types: !20450)
!20450 = !{null, !20143, !167}
!20451 = !DILocalVariable(name: "h", arg: 1, scope: !20448, file: !1510, line: 93, type: !20143)
!20452 = !DILocation(line: 93, column: 31, scope: !20448)
!20453 = !DILocalVariable(name: "old_chunk", arg: 2, scope: !20448, file: !1510, line: 93, type: !167)
!20454 = !DILocation(line: 93, column: 40, scope: !20448)
!20455 = !DILocation(line: 95, column: 7, scope: !20456)
!20456 = distinct !DILexicalBlock(scope: !20448, file: !1510, line: 95, column: 7)
!20457 = !DILocation(line: 95, column: 10, scope: !20456)
!20458 = !DILocation(line: 95, column: 7, scope: !20448)
!20459 = !DILocation(line: 96, column: 5, scope: !20456)
!20460 = !DILocation(line: 96, column: 8, scope: !20456)
!20461 = !DILocation(line: 96, column: 16, scope: !20456)
!20462 = !DILocation(line: 96, column: 23, scope: !20456)
!20463 = !DILocation(line: 96, column: 26, scope: !20456)
!20464 = !DILocation(line: 96, column: 37, scope: !20456)
!20465 = !DILocation(line: 98, column: 5, scope: !20456)
!20466 = !DILocation(line: 98, column: 8, scope: !20456)
!20467 = !DILocation(line: 98, column: 16, scope: !20456)
!20468 = !DILocation(line: 98, column: 23, scope: !20456)
!20469 = !DILocation(line: 99, column: 1, scope: !20448)
!20470 = distinct !DISubprogram(name: "_obstack_allocated_p", scope: !1510, file: !1510, line: 241, type: !20471, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20471 = !DISubroutineType(types: !20472)
!20472 = !{!27, !20143, !167}
!20473 = !DILocalVariable(name: "h", arg: 1, scope: !20470, file: !1510, line: 241, type: !20143)
!20474 = !DILocation(line: 241, column: 39, scope: !20470)
!20475 = !DILocalVariable(name: "obj", arg: 2, scope: !20470, file: !1510, line: 241, type: !167)
!20476 = !DILocation(line: 241, column: 48, scope: !20470)
!20477 = !DILocalVariable(name: "lp", scope: !20470, file: !1510, line: 243, type: !1447)
!20478 = !DILocation(line: 243, column: 26, scope: !20470)
!20479 = !DILocalVariable(name: "plp", scope: !20470, file: !1510, line: 244, type: !1447)
!20480 = !DILocation(line: 244, column: 26, scope: !20470)
!20481 = !DILocation(line: 246, column: 9, scope: !20470)
!20482 = !DILocation(line: 246, column: 13, scope: !20470)
!20483 = !DILocation(line: 246, column: 6, scope: !20470)
!20484 = !DILocation(line: 250, column: 3, scope: !20470)
!20485 = !DILocation(line: 250, column: 10, scope: !20470)
!20486 = !DILocation(line: 250, column: 13, scope: !20470)
!20487 = !DILocation(line: 250, column: 18, scope: !20470)
!20488 = !DILocation(line: 250, column: 31, scope: !20470)
!20489 = !DILocation(line: 250, column: 22, scope: !20470)
!20490 = !DILocation(line: 250, column: 37, scope: !20470)
!20491 = !DILocation(line: 250, column: 34, scope: !20470)
!20492 = !DILocation(line: 250, column: 41, scope: !20470)
!20493 = !DILocation(line: 250, column: 54, scope: !20470)
!20494 = !DILocation(line: 250, column: 59, scope: !20470)
!20495 = !DILocation(line: 250, column: 67, scope: !20470)
!20496 = !DILocation(line: 250, column: 65, scope: !20470)
!20497 = !DILocation(line: 0, scope: !20470)
!20498 = !DILocation(line: 252, column: 13, scope: !20499)
!20499 = distinct !DILexicalBlock(scope: !20470, file: !1510, line: 251, column: 5)
!20500 = !DILocation(line: 252, column: 17, scope: !20499)
!20501 = !DILocation(line: 252, column: 11, scope: !20499)
!20502 = !DILocation(line: 253, column: 12, scope: !20499)
!20503 = !DILocation(line: 253, column: 10, scope: !20499)
!20504 = distinct !{!20504, !20484, !20505}
!20505 = !DILocation(line: 254, column: 5, scope: !20470)
!20506 = !DILocation(line: 255, column: 10, scope: !20470)
!20507 = !DILocation(line: 255, column: 13, scope: !20470)
!20508 = !DILocation(line: 255, column: 3, scope: !20470)
!20509 = distinct !DISubprogram(name: "_obstack_free", scope: !1510, file: !1510, line: 262, type: !20449, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20510 = !DILocalVariable(name: "h", arg: 1, scope: !20509, file: !1510, line: 262, type: !20143)
!20511 = !DILocation(line: 262, column: 32, scope: !20509)
!20512 = !DILocalVariable(name: "obj", arg: 2, scope: !20509, file: !1510, line: 262, type: !167)
!20513 = !DILocation(line: 262, column: 41, scope: !20509)
!20514 = !DILocalVariable(name: "lp", scope: !20509, file: !1510, line: 264, type: !1447)
!20515 = !DILocation(line: 264, column: 26, scope: !20509)
!20516 = !DILocalVariable(name: "plp", scope: !20509, file: !1510, line: 265, type: !1447)
!20517 = !DILocation(line: 265, column: 26, scope: !20509)
!20518 = !DILocation(line: 267, column: 8, scope: !20509)
!20519 = !DILocation(line: 267, column: 11, scope: !20509)
!20520 = !DILocation(line: 267, column: 6, scope: !20509)
!20521 = !DILocation(line: 271, column: 3, scope: !20509)
!20522 = !DILocation(line: 271, column: 10, scope: !20509)
!20523 = !DILocation(line: 271, column: 13, scope: !20509)
!20524 = !DILocation(line: 271, column: 18, scope: !20509)
!20525 = !DILocation(line: 271, column: 31, scope: !20509)
!20526 = !DILocation(line: 271, column: 22, scope: !20509)
!20527 = !DILocation(line: 271, column: 37, scope: !20509)
!20528 = !DILocation(line: 271, column: 34, scope: !20509)
!20529 = !DILocation(line: 271, column: 41, scope: !20509)
!20530 = !DILocation(line: 271, column: 54, scope: !20509)
!20531 = !DILocation(line: 271, column: 59, scope: !20509)
!20532 = !DILocation(line: 271, column: 67, scope: !20509)
!20533 = !DILocation(line: 271, column: 65, scope: !20509)
!20534 = !DILocation(line: 0, scope: !20509)
!20535 = !DILocation(line: 273, column: 13, scope: !20536)
!20536 = distinct !DILexicalBlock(scope: !20509, file: !1510, line: 272, column: 5)
!20537 = !DILocation(line: 273, column: 17, scope: !20536)
!20538 = !DILocation(line: 273, column: 11, scope: !20536)
!20539 = !DILocation(line: 274, column: 21, scope: !20536)
!20540 = !DILocation(line: 274, column: 24, scope: !20536)
!20541 = !DILocation(line: 274, column: 7, scope: !20536)
!20542 = !DILocation(line: 275, column: 12, scope: !20536)
!20543 = !DILocation(line: 275, column: 10, scope: !20536)
!20544 = !DILocation(line: 278, column: 7, scope: !20536)
!20545 = !DILocation(line: 278, column: 10, scope: !20536)
!20546 = !DILocation(line: 278, column: 29, scope: !20536)
!20547 = distinct !{!20547, !20521, !20548}
!20548 = !DILocation(line: 279, column: 5, scope: !20509)
!20549 = !DILocation(line: 280, column: 7, scope: !20550)
!20550 = distinct !DILexicalBlock(scope: !20509, file: !1510, line: 280, column: 7)
!20551 = !DILocation(line: 280, column: 7, scope: !20509)
!20552 = !DILocation(line: 282, column: 49, scope: !20553)
!20553 = distinct !DILexicalBlock(scope: !20550, file: !1510, line: 281, column: 5)
!20554 = !DILocation(line: 282, column: 24, scope: !20553)
!20555 = !DILocation(line: 282, column: 27, scope: !20553)
!20556 = !DILocation(line: 282, column: 37, scope: !20553)
!20557 = !DILocation(line: 282, column: 7, scope: !20553)
!20558 = !DILocation(line: 282, column: 10, scope: !20553)
!20559 = !DILocation(line: 282, column: 22, scope: !20553)
!20560 = !DILocation(line: 283, column: 24, scope: !20553)
!20561 = !DILocation(line: 283, column: 28, scope: !20553)
!20562 = !DILocation(line: 283, column: 7, scope: !20553)
!20563 = !DILocation(line: 283, column: 10, scope: !20553)
!20564 = !DILocation(line: 283, column: 22, scope: !20553)
!20565 = !DILocation(line: 284, column: 18, scope: !20553)
!20566 = !DILocation(line: 284, column: 7, scope: !20553)
!20567 = !DILocation(line: 284, column: 10, scope: !20553)
!20568 = !DILocation(line: 284, column: 16, scope: !20553)
!20569 = !DILocation(line: 285, column: 5, scope: !20553)
!20570 = !DILocation(line: 286, column: 12, scope: !20571)
!20571 = distinct !DILexicalBlock(scope: !20550, file: !1510, line: 286, column: 12)
!20572 = !DILocation(line: 286, column: 16, scope: !20571)
!20573 = !DILocation(line: 286, column: 12, scope: !20550)
!20574 = !DILocation(line: 288, column: 5, scope: !20571)
!20575 = !DILocation(line: 289, column: 1, scope: !20509)
!20576 = distinct !DISubprogram(name: "_obstack_memory_used", scope: !1510, file: !1510, line: 292, type: !20577, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1439, retainedNodes: !152)
!20577 = !DISubroutineType(types: !20578)
!20578 = !{!149, !20143}
!20579 = !DILocalVariable(name: "h", arg: 1, scope: !20576, file: !1510, line: 292, type: !20143)
!20580 = !DILocation(line: 292, column: 39, scope: !20576)
!20581 = !DILocalVariable(name: "lp", scope: !20576, file: !1510, line: 294, type: !1447)
!20582 = !DILocation(line: 294, column: 26, scope: !20576)
!20583 = !DILocalVariable(name: "nbytes", scope: !20576, file: !1510, line: 295, type: !149)
!20584 = !DILocation(line: 295, column: 19, scope: !20576)
!20585 = !DILocation(line: 297, column: 13, scope: !20586)
!20586 = distinct !DILexicalBlock(scope: !20576, file: !1510, line: 297, column: 3)
!20587 = !DILocation(line: 297, column: 16, scope: !20586)
!20588 = !DILocation(line: 297, column: 11, scope: !20586)
!20589 = !DILocation(line: 297, column: 8, scope: !20586)
!20590 = !DILocation(line: 297, column: 23, scope: !20591)
!20591 = distinct !DILexicalBlock(scope: !20586, file: !1510, line: 297, column: 3)
!20592 = !DILocation(line: 297, column: 26, scope: !20591)
!20593 = !DILocation(line: 297, column: 3, scope: !20586)
!20594 = !DILocation(line: 299, column: 17, scope: !20595)
!20595 = distinct !DILexicalBlock(scope: !20591, file: !1510, line: 298, column: 5)
!20596 = !DILocation(line: 299, column: 21, scope: !20595)
!20597 = !DILocation(line: 299, column: 38, scope: !20595)
!20598 = !DILocation(line: 299, column: 29, scope: !20595)
!20599 = !DILocation(line: 299, column: 27, scope: !20595)
!20600 = !DILocation(line: 299, column: 14, scope: !20595)
!20601 = !DILocation(line: 300, column: 5, scope: !20595)
!20602 = !DILocation(line: 297, column: 37, scope: !20591)
!20603 = !DILocation(line: 297, column: 41, scope: !20591)
!20604 = !DILocation(line: 297, column: 35, scope: !20591)
!20605 = !DILocation(line: 297, column: 3, scope: !20591)
!20606 = distinct !{!20606, !20593, !20607}
!20607 = !DILocation(line: 300, column: 5, scope: !20586)
!20608 = !DILocation(line: 301, column: 10, scope: !20576)
!20609 = !DILocation(line: 301, column: 3, scope: !20576)
!20610 = distinct !DISubprogram(name: "tzalloc", scope: !1746, file: !1746, line: 95, type: !20611, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20611 = !DISubroutineType(types: !20612)
!20612 = !{!1735, !146}
!20613 = !DILocalVariable(name: "name", arg: 1, scope: !20610, file: !1746, line: 95, type: !146)
!20614 = !DILocation(line: 95, column: 22, scope: !20610)
!20615 = !DILocalVariable(name: "name_size", scope: !20610, file: !1746, line: 97, type: !149)
!20616 = !DILocation(line: 97, column: 10, scope: !20610)
!20617 = !DILocation(line: 97, column: 22, scope: !20610)
!20618 = !DILocation(line: 97, column: 37, scope: !20610)
!20619 = !DILocation(line: 97, column: 29, scope: !20610)
!20620 = !DILocation(line: 97, column: 43, scope: !20610)
!20621 = !DILocalVariable(name: "abbr_size", scope: !20610, file: !1746, line: 98, type: !149)
!20622 = !DILocation(line: 98, column: 10, scope: !20610)
!20623 = !DILocation(line: 98, column: 22, scope: !20610)
!20624 = !DILocation(line: 98, column: 32, scope: !20610)
!20625 = !DILocation(line: 98, column: 66, scope: !20610)
!20626 = !DILocation(line: 98, column: 76, scope: !20610)
!20627 = !DILocalVariable(name: "tz", scope: !20610, file: !1746, line: 99, type: !1735)
!20628 = !DILocation(line: 99, column: 14, scope: !20610)
!20629 = !DILocation(line: 99, column: 27, scope: !20610)
!20630 = !DILocation(line: 99, column: 19, scope: !20610)
!20631 = !DILocation(line: 100, column: 7, scope: !20632)
!20632 = distinct !DILexicalBlock(scope: !20610, file: !1746, line: 100, column: 7)
!20633 = !DILocation(line: 100, column: 7, scope: !20610)
!20634 = !DILocation(line: 102, column: 7, scope: !20635)
!20635 = distinct !DILexicalBlock(scope: !20632, file: !1746, line: 101, column: 5)
!20636 = !DILocation(line: 102, column: 11, scope: !20635)
!20637 = !DILocation(line: 102, column: 16, scope: !20635)
!20638 = !DILocation(line: 106, column: 25, scope: !20635)
!20639 = !DILocation(line: 106, column: 24, scope: !20635)
!20640 = !DILocation(line: 106, column: 23, scope: !20635)
!20641 = !DILocation(line: 106, column: 7, scope: !20635)
!20642 = !DILocation(line: 106, column: 11, scope: !20635)
!20643 = !DILocation(line: 106, column: 21, scope: !20635)
!20644 = !DILocation(line: 107, column: 7, scope: !20635)
!20645 = !DILocation(line: 107, column: 11, scope: !20635)
!20646 = !DILocation(line: 107, column: 20, scope: !20635)
!20647 = !DILocation(line: 108, column: 11, scope: !20648)
!20648 = distinct !DILexicalBlock(scope: !20635, file: !1746, line: 108, column: 11)
!20649 = !DILocation(line: 108, column: 11, scope: !20635)
!20650 = !DILocation(line: 109, column: 23, scope: !20648)
!20651 = !DILocation(line: 109, column: 27, scope: !20648)
!20652 = !DILocation(line: 109, column: 34, scope: !20648)
!20653 = !DILocation(line: 109, column: 40, scope: !20648)
!20654 = !DILocation(line: 109, column: 9, scope: !20648)
!20655 = !DILocation(line: 110, column: 5, scope: !20635)
!20656 = !DILocation(line: 111, column: 10, scope: !20610)
!20657 = !DILocation(line: 111, column: 3, scope: !20610)
!20658 = distinct !DISubprogram(name: "extend_abbrs", scope: !1746, file: !1746, line: 86, type: !20659, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20659 = !DISubroutineType(types: !20660)
!20660 = !{null, !143, !146, !149}
!20661 = !DILocalVariable(name: "abbrs", arg: 1, scope: !20658, file: !1746, line: 86, type: !143)
!20662 = !DILocation(line: 86, column: 21, scope: !20658)
!20663 = !DILocalVariable(name: "abbr", arg: 2, scope: !20658, file: !1746, line: 86, type: !146)
!20664 = !DILocation(line: 86, column: 40, scope: !20658)
!20665 = !DILocalVariable(name: "abbr_size", arg: 3, scope: !20658, file: !1746, line: 86, type: !149)
!20666 = !DILocation(line: 86, column: 53, scope: !20658)
!20667 = !DILocation(line: 88, column: 11, scope: !20658)
!20668 = !DILocation(line: 88, column: 18, scope: !20658)
!20669 = !DILocation(line: 88, column: 24, scope: !20658)
!20670 = !DILocation(line: 88, column: 3, scope: !20658)
!20671 = !DILocation(line: 89, column: 3, scope: !20658)
!20672 = !DILocation(line: 89, column: 9, scope: !20658)
!20673 = !DILocation(line: 89, column: 20, scope: !20658)
!20674 = !DILocation(line: 90, column: 1, scope: !20658)
!20675 = distinct !DISubprogram(name: "tzfree", scope: !1746, file: !1746, line: 196, type: !20676, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20676 = !DISubroutineType(types: !20677)
!20677 = !{null, !1735}
!20678 = !DILocalVariable(name: "tz", arg: 1, scope: !20675, file: !1746, line: 196, type: !1735)
!20679 = !DILocation(line: 196, column: 20, scope: !20675)
!20680 = !DILocation(line: 198, column: 7, scope: !20681)
!20681 = distinct !DILexicalBlock(scope: !20675, file: !1746, line: 198, column: 7)
!20682 = !DILocation(line: 198, column: 10, scope: !20681)
!20683 = !DILocation(line: 198, column: 7, scope: !20675)
!20684 = !DILocation(line: 199, column: 5, scope: !20681)
!20685 = !DILocation(line: 199, column: 12, scope: !20681)
!20686 = !DILocalVariable(name: "next", scope: !20687, file: !1746, line: 201, type: !1735)
!20687 = distinct !DILexicalBlock(scope: !20681, file: !1746, line: 200, column: 7)
!20688 = !DILocation(line: 201, column: 20, scope: !20687)
!20689 = !DILocation(line: 201, column: 27, scope: !20687)
!20690 = !DILocation(line: 201, column: 31, scope: !20687)
!20691 = !DILocation(line: 202, column: 15, scope: !20687)
!20692 = !DILocation(line: 202, column: 9, scope: !20687)
!20693 = !DILocation(line: 203, column: 14, scope: !20687)
!20694 = !DILocation(line: 203, column: 12, scope: !20687)
!20695 = distinct !{!20695, !20684, !20696}
!20696 = !DILocation(line: 204, column: 7, scope: !20681)
!20697 = !DILocation(line: 205, column: 1, scope: !20675)
!20698 = distinct !DISubprogram(name: "localtime_rz", scope: !1746, file: !1746, line: 287, type: !20699, scopeLine: 288, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20699 = !DISubroutineType(types: !20700)
!20700 = !{!20701, !1735, !20715, !20701}
!20701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20702, size: 64)
!20702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !5669, line: 7, size: 448, elements: !20703)
!20703 = !{!20704, !20705, !20706, !20707, !20708, !20709, !20710, !20711, !20712, !20713, !20714}
!20704 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !20702, file: !5669, line: 9, baseType: !27, size: 32)
!20705 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !20702, file: !5669, line: 10, baseType: !27, size: 32, offset: 32)
!20706 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !20702, file: !5669, line: 11, baseType: !27, size: 32, offset: 64)
!20707 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !20702, file: !5669, line: 12, baseType: !27, size: 32, offset: 96)
!20708 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !20702, file: !5669, line: 13, baseType: !27, size: 32, offset: 128)
!20709 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !20702, file: !5669, line: 14, baseType: !27, size: 32, offset: 160)
!20710 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !20702, file: !5669, line: 15, baseType: !27, size: 32, offset: 192)
!20711 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !20702, file: !5669, line: 16, baseType: !27, size: 32, offset: 224)
!20712 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !20702, file: !5669, line: 17, baseType: !27, size: 32, offset: 256)
!20713 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !20702, file: !5669, line: 20, baseType: !166, size: 64, offset: 320)
!20714 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !20702, file: !5669, line: 21, baseType: !146, size: 64, offset: 384)
!20715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20716, size: 64)
!20716 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !162)
!20717 = !DILocalVariable(name: "tz", arg: 1, scope: !20698, file: !1746, line: 287, type: !1735)
!20718 = !DILocation(line: 287, column: 26, scope: !20698)
!20719 = !DILocalVariable(name: "t", arg: 2, scope: !20698, file: !1746, line: 287, type: !20715)
!20720 = !DILocation(line: 287, column: 44, scope: !20698)
!20721 = !DILocalVariable(name: "tm", arg: 3, scope: !20698, file: !1746, line: 287, type: !20701)
!20722 = !DILocation(line: 287, column: 58, scope: !20698)
!20723 = !DILocation(line: 304, column: 8, scope: !20724)
!20724 = distinct !DILexicalBlock(scope: !20698, file: !1746, line: 304, column: 7)
!20725 = !DILocation(line: 304, column: 7, scope: !20698)
!20726 = !DILocation(line: 305, column: 22, scope: !20724)
!20727 = !DILocation(line: 305, column: 25, scope: !20724)
!20728 = !DILocation(line: 305, column: 12, scope: !20724)
!20729 = !DILocation(line: 305, column: 5, scope: !20724)
!20730 = !DILocalVariable(name: "old_tz", scope: !20731, file: !1746, line: 308, type: !1735)
!20731 = distinct !DILexicalBlock(scope: !20724, file: !1746, line: 307, column: 5)
!20732 = !DILocation(line: 308, column: 18, scope: !20731)
!20733 = !DILocation(line: 308, column: 35, scope: !20731)
!20734 = !DILocation(line: 308, column: 27, scope: !20731)
!20735 = !DILocation(line: 309, column: 11, scope: !20736)
!20736 = distinct !DILexicalBlock(scope: !20731, file: !1746, line: 309, column: 11)
!20737 = !DILocation(line: 309, column: 11, scope: !20731)
!20738 = !DILocalVariable(name: "abbr_saved", scope: !20739, file: !1746, line: 311, type: !141)
!20739 = distinct !DILexicalBlock(scope: !20736, file: !1746, line: 310, column: 9)
!20740 = !DILocation(line: 311, column: 16, scope: !20739)
!20741 = !DILocation(line: 311, column: 42, scope: !20739)
!20742 = !DILocation(line: 311, column: 45, scope: !20739)
!20743 = !DILocation(line: 311, column: 29, scope: !20739)
!20744 = !DILocation(line: 311, column: 49, scope: !20739)
!20745 = !DILocation(line: 311, column: 63, scope: !20739)
!20746 = !DILocation(line: 311, column: 67, scope: !20739)
!20747 = !DILocation(line: 311, column: 52, scope: !20739)
!20748 = !DILocation(line: 0, scope: !20739)
!20749 = !DILocation(line: 312, column: 26, scope: !20750)
!20750 = distinct !DILexicalBlock(scope: !20739, file: !1746, line: 312, column: 15)
!20751 = !DILocation(line: 312, column: 15, scope: !20750)
!20752 = !DILocation(line: 312, column: 34, scope: !20750)
!20753 = !DILocation(line: 312, column: 37, scope: !20750)
!20754 = !DILocation(line: 312, column: 15, scope: !20739)
!20755 = !DILocation(line: 313, column: 20, scope: !20750)
!20756 = !DILocation(line: 313, column: 13, scope: !20750)
!20757 = !DILocation(line: 314, column: 9, scope: !20739)
!20758 = !DILocation(line: 315, column: 7, scope: !20731)
!20759 = !DILocation(line: 317, column: 1, scope: !20698)
!20760 = distinct !DISubprogram(name: "set_tz", scope: !1746, file: !1746, line: 242, type: !20761, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20761 = !DISubroutineType(types: !20762)
!20762 = !{!1735, !1735}
!20763 = !DILocalVariable(name: "tz", arg: 1, scope: !20760, file: !1746, line: 242, type: !1735)
!20764 = !DILocation(line: 242, column: 20, scope: !20760)
!20765 = !DILocalVariable(name: "env_tz", scope: !20760, file: !1746, line: 244, type: !143)
!20766 = !DILocation(line: 244, column: 9, scope: !20760)
!20767 = !DILocation(line: 244, column: 18, scope: !20760)
!20768 = !DILocation(line: 245, column: 7, scope: !20769)
!20769 = distinct !DILexicalBlock(scope: !20760, file: !1746, line: 245, column: 7)
!20770 = !DILocation(line: 245, column: 7, scope: !20760)
!20771 = !DILocation(line: 246, column: 9, scope: !20769)
!20772 = !DILocation(line: 246, column: 13, scope: !20769)
!20773 = !DILocation(line: 246, column: 23, scope: !20769)
!20774 = !DILocation(line: 246, column: 34, scope: !20769)
!20775 = !DILocation(line: 246, column: 38, scope: !20769)
!20776 = !DILocation(line: 246, column: 45, scope: !20769)
!20777 = !DILocation(line: 246, column: 26, scope: !20769)
!20778 = !DILocation(line: 246, column: 53, scope: !20769)
!20779 = !DILocation(line: 247, column: 10, scope: !20769)
!20780 = !DILocation(line: 247, column: 14, scope: !20769)
!20781 = !DILocation(line: 248, column: 5, scope: !20769)
!20782 = !DILocalVariable(name: "old_tz", scope: !20783, file: !1746, line: 251, type: !1735)
!20783 = distinct !DILexicalBlock(scope: !20769, file: !1746, line: 250, column: 5)
!20784 = !DILocation(line: 251, column: 18, scope: !20783)
!20785 = !DILocation(line: 251, column: 36, scope: !20783)
!20786 = !DILocation(line: 251, column: 27, scope: !20783)
!20787 = !DILocation(line: 252, column: 12, scope: !20788)
!20788 = distinct !DILexicalBlock(scope: !20783, file: !1746, line: 252, column: 11)
!20789 = !DILocation(line: 252, column: 11, scope: !20783)
!20790 = !DILocation(line: 253, column: 16, scope: !20788)
!20791 = !DILocation(line: 253, column: 9, scope: !20788)
!20792 = !DILocation(line: 254, column: 25, scope: !20793)
!20793 = distinct !DILexicalBlock(scope: !20783, file: !1746, line: 254, column: 11)
!20794 = !DILocation(line: 254, column: 13, scope: !20793)
!20795 = !DILocation(line: 254, column: 11, scope: !20783)
!20796 = !DILocalVariable(name: "saved_errno", scope: !20797, file: !1746, line: 256, type: !27)
!20797 = distinct !DILexicalBlock(scope: !20793, file: !1746, line: 255, column: 9)
!20798 = !DILocation(line: 256, column: 15, scope: !20797)
!20799 = !DILocation(line: 256, column: 29, scope: !20797)
!20800 = !DILocation(line: 257, column: 19, scope: !20797)
!20801 = !DILocation(line: 257, column: 11, scope: !20797)
!20802 = !DILocation(line: 258, column: 19, scope: !20797)
!20803 = !DILocation(line: 258, column: 11, scope: !20797)
!20804 = !DILocation(line: 258, column: 17, scope: !20797)
!20805 = !DILocation(line: 259, column: 11, scope: !20797)
!20806 = !DILocation(line: 261, column: 14, scope: !20783)
!20807 = !DILocation(line: 261, column: 7, scope: !20783)
!20808 = !DILocation(line: 263, column: 1, scope: !20760)
!20809 = distinct !DISubprogram(name: "save_abbr", scope: !1746, file: !1746, line: 119, type: !20810, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20810 = !DISubroutineType(types: !20811)
!20811 = !{!141, !1735, !20701}
!20812 = !DILocalVariable(name: "tz", arg: 1, scope: !20809, file: !1746, line: 119, type: !1735)
!20813 = !DILocation(line: 119, column: 23, scope: !20809)
!20814 = !DILocalVariable(name: "tm", arg: 2, scope: !20809, file: !1746, line: 119, type: !20701)
!20815 = !DILocation(line: 119, column: 38, scope: !20809)
!20816 = !DILocalVariable(name: "zone", scope: !20809, file: !1746, line: 122, type: !146)
!20817 = !DILocation(line: 122, column: 15, scope: !20809)
!20818 = !DILocalVariable(name: "zone_copy", scope: !20809, file: !1746, line: 123, type: !143)
!20819 = !DILocation(line: 123, column: 9, scope: !20809)
!20820 = !DILocation(line: 130, column: 10, scope: !20809)
!20821 = !DILocation(line: 130, column: 14, scope: !20809)
!20822 = !DILocation(line: 130, column: 8, scope: !20809)
!20823 = !DILocation(line: 142, column: 8, scope: !20824)
!20824 = distinct !DILexicalBlock(scope: !20809, file: !1746, line: 142, column: 7)
!20825 = !DILocation(line: 142, column: 13, scope: !20824)
!20826 = !DILocation(line: 142, column: 26, scope: !20824)
!20827 = !DILocation(line: 142, column: 17, scope: !20824)
!20828 = !DILocation(line: 142, column: 32, scope: !20824)
!20829 = !DILocation(line: 142, column: 29, scope: !20824)
!20830 = !DILocation(line: 142, column: 37, scope: !20824)
!20831 = !DILocation(line: 142, column: 40, scope: !20824)
!20832 = !DILocation(line: 142, column: 57, scope: !20824)
!20833 = !DILocation(line: 142, column: 60, scope: !20824)
!20834 = !DILocation(line: 142, column: 47, scope: !20824)
!20835 = !DILocation(line: 142, column: 45, scope: !20824)
!20836 = !DILocation(line: 142, column: 7, scope: !20809)
!20837 = !DILocation(line: 143, column: 5, scope: !20824)
!20838 = !DILocation(line: 145, column: 8, scope: !20839)
!20839 = distinct !DILexicalBlock(scope: !20809, file: !1746, line: 145, column: 7)
!20840 = !DILocation(line: 145, column: 7, scope: !20839)
!20841 = !DILocation(line: 145, column: 7, scope: !20809)
!20842 = !DILocation(line: 147, column: 19, scope: !20843)
!20843 = distinct !DILexicalBlock(scope: !20839, file: !1746, line: 146, column: 5)
!20844 = !DILocation(line: 147, column: 23, scope: !20843)
!20845 = !DILocation(line: 147, column: 17, scope: !20843)
!20846 = !DILocation(line: 149, column: 7, scope: !20843)
!20847 = !DILocation(line: 149, column: 22, scope: !20843)
!20848 = !DILocation(line: 149, column: 33, scope: !20843)
!20849 = !DILocation(line: 149, column: 14, scope: !20843)
!20850 = !DILocation(line: 149, column: 39, scope: !20843)
!20851 = !DILocation(line: 151, column: 19, scope: !20852)
!20852 = distinct !DILexicalBlock(scope: !20853, file: !1746, line: 151, column: 15)
!20853 = distinct !DILexicalBlock(scope: !20843, file: !1746, line: 150, column: 9)
!20854 = !DILocation(line: 151, column: 18, scope: !20852)
!20855 = !DILocation(line: 151, column: 29, scope: !20852)
!20856 = !DILocation(line: 151, column: 33, scope: !20852)
!20857 = !DILocation(line: 151, column: 46, scope: !20852)
!20858 = !DILocation(line: 151, column: 50, scope: !20852)
!20859 = !DILocation(line: 151, column: 43, scope: !20852)
!20860 = !DILocation(line: 151, column: 56, scope: !20852)
!20861 = !DILocation(line: 151, column: 59, scope: !20852)
!20862 = !DILocation(line: 151, column: 63, scope: !20852)
!20863 = !DILocation(line: 151, column: 15, scope: !20853)
!20864 = !DILocalVariable(name: "zone_size", scope: !20865, file: !1746, line: 153, type: !149)
!20865 = distinct !DILexicalBlock(scope: !20852, file: !1746, line: 152, column: 13)
!20866 = !DILocation(line: 153, column: 22, scope: !20865)
!20867 = !DILocation(line: 153, column: 42, scope: !20865)
!20868 = !DILocation(line: 153, column: 34, scope: !20865)
!20869 = !DILocation(line: 153, column: 48, scope: !20865)
!20870 = !DILocalVariable(name: "zone_used", scope: !20865, file: !1746, line: 154, type: !149)
!20871 = !DILocation(line: 154, column: 22, scope: !20865)
!20872 = !DILocation(line: 154, column: 34, scope: !20865)
!20873 = !DILocation(line: 154, column: 46, scope: !20865)
!20874 = !DILocation(line: 154, column: 50, scope: !20865)
!20875 = !DILocation(line: 154, column: 44, scope: !20865)
!20876 = !DILocation(line: 155, column: 30, scope: !20877)
!20877 = distinct !DILexicalBlock(scope: !20865, file: !1746, line: 155, column: 19)
!20878 = !DILocation(line: 155, column: 28, scope: !20877)
!20879 = !DILocation(line: 155, column: 42, scope: !20877)
!20880 = !DILocation(line: 155, column: 40, scope: !20877)
!20881 = !DILocation(line: 155, column: 19, scope: !20865)
!20882 = !DILocation(line: 157, column: 19, scope: !20883)
!20883 = distinct !DILexicalBlock(scope: !20877, file: !1746, line: 156, column: 17)
!20884 = !DILocation(line: 157, column: 25, scope: !20883)
!20885 = !DILocation(line: 158, column: 19, scope: !20883)
!20886 = !DILocation(line: 160, column: 19, scope: !20887)
!20887 = distinct !DILexicalBlock(scope: !20865, file: !1746, line: 160, column: 19)
!20888 = !DILocation(line: 160, column: 31, scope: !20887)
!20889 = !DILocation(line: 160, column: 29, scope: !20887)
!20890 = !DILocation(line: 160, column: 41, scope: !20887)
!20891 = !DILocation(line: 160, column: 19, scope: !20865)
!20892 = !DILocation(line: 161, column: 31, scope: !20887)
!20893 = !DILocation(line: 161, column: 42, scope: !20887)
!20894 = !DILocation(line: 161, column: 48, scope: !20887)
!20895 = !DILocation(line: 161, column: 17, scope: !20887)
!20896 = !DILocation(line: 164, column: 44, scope: !20897)
!20897 = distinct !DILexicalBlock(scope: !20887, file: !1746, line: 163, column: 17)
!20898 = !DILocation(line: 164, column: 35, scope: !20897)
!20899 = !DILocation(line: 164, column: 24, scope: !20897)
!20900 = !DILocation(line: 164, column: 28, scope: !20897)
!20901 = !DILocation(line: 164, column: 33, scope: !20897)
!20902 = !DILocation(line: 164, column: 22, scope: !20897)
!20903 = !DILocation(line: 165, column: 24, scope: !20904)
!20904 = distinct !DILexicalBlock(scope: !20897, file: !1746, line: 165, column: 23)
!20905 = !DILocation(line: 165, column: 23, scope: !20897)
!20906 = !DILocation(line: 166, column: 21, scope: !20904)
!20907 = !DILocation(line: 167, column: 19, scope: !20897)
!20908 = !DILocation(line: 167, column: 23, scope: !20897)
!20909 = !DILocation(line: 167, column: 33, scope: !20897)
!20910 = !DILocation(line: 168, column: 31, scope: !20897)
!20911 = !DILocation(line: 168, column: 35, scope: !20897)
!20912 = !DILocation(line: 168, column: 29, scope: !20897)
!20913 = !DILocation(line: 170, column: 15, scope: !20865)
!20914 = !DILocation(line: 173, column: 32, scope: !20853)
!20915 = !DILocation(line: 173, column: 24, scope: !20853)
!20916 = !DILocation(line: 173, column: 43, scope: !20853)
!20917 = !DILocation(line: 173, column: 21, scope: !20853)
!20918 = !DILocation(line: 174, column: 17, scope: !20919)
!20919 = distinct !DILexicalBlock(scope: !20853, file: !1746, line: 174, column: 15)
!20920 = !DILocation(line: 174, column: 16, scope: !20919)
!20921 = !DILocation(line: 174, column: 27, scope: !20919)
!20922 = !DILocation(line: 174, column: 30, scope: !20919)
!20923 = !DILocation(line: 174, column: 34, scope: !20919)
!20924 = !DILocation(line: 174, column: 15, scope: !20853)
!20925 = !DILocation(line: 176, column: 20, scope: !20926)
!20926 = distinct !DILexicalBlock(scope: !20919, file: !1746, line: 175, column: 13)
!20927 = !DILocation(line: 176, column: 24, scope: !20926)
!20928 = !DILocation(line: 176, column: 18, scope: !20926)
!20929 = !DILocation(line: 177, column: 27, scope: !20926)
!20930 = !DILocation(line: 177, column: 31, scope: !20926)
!20931 = !DILocation(line: 177, column: 25, scope: !20926)
!20932 = !DILocation(line: 178, column: 13, scope: !20926)
!20933 = distinct !{!20933, !20846, !20934}
!20934 = !DILocation(line: 179, column: 9, scope: !20843)
!20935 = !DILocation(line: 180, column: 5, scope: !20843)
!20936 = !DILocation(line: 184, column: 17, scope: !20809)
!20937 = !DILocation(line: 184, column: 3, scope: !20809)
!20938 = !DILocation(line: 184, column: 7, scope: !20809)
!20939 = !DILocation(line: 184, column: 15, scope: !20809)
!20940 = !DILocation(line: 191, column: 3, scope: !20809)
!20941 = !DILocation(line: 192, column: 1, scope: !20809)
!20942 = distinct !DISubprogram(name: "revert_tz", scope: !1746, file: !1746, line: 269, type: !20943, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20943 = !DISubroutineType(types: !20944)
!20944 = !{!141, !1735}
!20945 = !DILocalVariable(name: "tz", arg: 1, scope: !20942, file: !1746, line: 269, type: !1735)
!20946 = !DILocation(line: 269, column: 23, scope: !20942)
!20947 = !DILocation(line: 271, column: 7, scope: !20948)
!20948 = distinct !DILexicalBlock(scope: !20942, file: !1746, line: 271, column: 7)
!20949 = !DILocation(line: 271, column: 10, scope: !20948)
!20950 = !DILocation(line: 271, column: 7, scope: !20942)
!20951 = !DILocation(line: 272, column: 5, scope: !20948)
!20952 = !DILocalVariable(name: "saved_errno", scope: !20953, file: !1746, line: 275, type: !27)
!20953 = distinct !DILexicalBlock(scope: !20948, file: !1746, line: 274, column: 5)
!20954 = !DILocation(line: 275, column: 11, scope: !20953)
!20955 = !DILocation(line: 275, column: 25, scope: !20953)
!20956 = !DILocalVariable(name: "ok", scope: !20953, file: !1746, line: 276, type: !141)
!20957 = !DILocation(line: 276, column: 12, scope: !20953)
!20958 = !DILocation(line: 276, column: 29, scope: !20953)
!20959 = !DILocation(line: 276, column: 17, scope: !20953)
!20960 = !DILocation(line: 277, column: 12, scope: !20961)
!20961 = distinct !DILexicalBlock(scope: !20953, file: !1746, line: 277, column: 11)
!20962 = !DILocation(line: 277, column: 11, scope: !20953)
!20963 = !DILocation(line: 278, column: 23, scope: !20961)
!20964 = !DILocation(line: 278, column: 21, scope: !20961)
!20965 = !DILocation(line: 278, column: 9, scope: !20961)
!20966 = !DILocation(line: 279, column: 15, scope: !20953)
!20967 = !DILocation(line: 279, column: 7, scope: !20953)
!20968 = !DILocation(line: 280, column: 15, scope: !20953)
!20969 = !DILocation(line: 280, column: 7, scope: !20953)
!20970 = !DILocation(line: 280, column: 13, scope: !20953)
!20971 = !DILocation(line: 281, column: 14, scope: !20953)
!20972 = !DILocation(line: 281, column: 7, scope: !20953)
!20973 = !DILocation(line: 283, column: 1, scope: !20942)
!20974 = distinct !DISubprogram(name: "change_env", scope: !1746, file: !1746, line: 229, type: !20943, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20975 = !DILocalVariable(name: "tz", arg: 1, scope: !20974, file: !1746, line: 229, type: !1735)
!20976 = !DILocation(line: 229, column: 24, scope: !20974)
!20977 = !DILocation(line: 231, column: 18, scope: !20978)
!20978 = distinct !DILexicalBlock(scope: !20974, file: !1746, line: 231, column: 7)
!20979 = !DILocation(line: 231, column: 22, scope: !20978)
!20980 = !DILocation(line: 231, column: 34, scope: !20978)
!20981 = !DILocation(line: 231, column: 38, scope: !20978)
!20982 = !DILocation(line: 231, column: 7, scope: !20978)
!20983 = !DILocation(line: 231, column: 52, scope: !20978)
!20984 = !DILocation(line: 231, column: 7, scope: !20974)
!20985 = !DILocation(line: 232, column: 5, scope: !20978)
!20986 = !DILocation(line: 233, column: 3, scope: !20974)
!20987 = !DILocation(line: 234, column: 3, scope: !20974)
!20988 = !DILocation(line: 235, column: 1, scope: !20974)
!20989 = distinct !DISubprogram(name: "setenv_TZ", scope: !1746, file: !1746, line: 220, type: !20990, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!20990 = !DISubroutineType(types: !20991)
!20991 = !{!27, !146}
!20992 = !DILocalVariable(name: "tz", arg: 1, scope: !20989, file: !1746, line: 220, type: !146)
!20993 = !DILocation(line: 220, column: 24, scope: !20989)
!20994 = !DILocation(line: 222, column: 10, scope: !20989)
!20995 = !DILocation(line: 222, column: 29, scope: !20989)
!20996 = !DILocation(line: 222, column: 15, scope: !20989)
!20997 = !DILocation(line: 222, column: 38, scope: !20989)
!20998 = !DILocation(line: 222, column: 3, scope: !20989)
!20999 = distinct !DISubprogram(name: "getenv_TZ", scope: !1746, file: !1746, line: 212, type: !19376, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!21000 = !DILocation(line: 214, column: 10, scope: !20999)
!21001 = !DILocation(line: 214, column: 3, scope: !20999)
!21002 = distinct !DISubprogram(name: "mktime_z", scope: !1746, file: !1746, line: 321, type: !21003, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!21003 = !DISubroutineType(types: !21004)
!21004 = !{!162, !1735, !20701}
!21005 = !DILocalVariable(name: "tz", arg: 1, scope: !21002, file: !1746, line: 321, type: !1735)
!21006 = !DILocation(line: 321, column: 22, scope: !21002)
!21007 = !DILocalVariable(name: "tm", arg: 2, scope: !21002, file: !1746, line: 321, type: !20701)
!21008 = !DILocation(line: 321, column: 37, scope: !21002)
!21009 = !DILocation(line: 323, column: 8, scope: !21010)
!21010 = distinct !DILexicalBlock(scope: !21002, file: !1746, line: 323, column: 7)
!21011 = !DILocation(line: 323, column: 7, scope: !21002)
!21012 = !DILocation(line: 324, column: 20, scope: !21010)
!21013 = !DILocation(line: 324, column: 12, scope: !21010)
!21014 = !DILocation(line: 324, column: 5, scope: !21010)
!21015 = !DILocalVariable(name: "old_tz", scope: !21016, file: !1746, line: 327, type: !1735)
!21016 = distinct !DILexicalBlock(scope: !21010, file: !1746, line: 326, column: 5)
!21017 = !DILocation(line: 327, column: 18, scope: !21016)
!21018 = !DILocation(line: 327, column: 35, scope: !21016)
!21019 = !DILocation(line: 327, column: 27, scope: !21016)
!21020 = !DILocation(line: 328, column: 11, scope: !21021)
!21021 = distinct !DILexicalBlock(scope: !21016, file: !1746, line: 328, column: 11)
!21022 = !DILocation(line: 328, column: 11, scope: !21016)
!21023 = !DILocalVariable(name: "t", scope: !21024, file: !1746, line: 330, type: !162)
!21024 = distinct !DILexicalBlock(scope: !21021, file: !1746, line: 329, column: 9)
!21025 = !DILocation(line: 330, column: 18, scope: !21024)
!21026 = !DILocation(line: 330, column: 30, scope: !21024)
!21027 = !DILocation(line: 330, column: 22, scope: !21024)
!21028 = !DILocalVariable(name: "badtime", scope: !21024, file: !1746, line: 332, type: !162)
!21029 = !DILocation(line: 332, column: 18, scope: !21024)
!21030 = !DILocalVariable(name: "tm_1", scope: !21024, file: !1746, line: 333, type: !20702)
!21031 = !DILocation(line: 333, column: 21, scope: !21024)
!21032 = !DILocation(line: 334, column: 16, scope: !21033)
!21033 = distinct !DILexicalBlock(scope: !21024, file: !1746, line: 334, column: 15)
!21034 = !DILocation(line: 334, column: 21, scope: !21033)
!21035 = !DILocation(line: 334, column: 18, scope: !21033)
!21036 = !DILocation(line: 335, column: 16, scope: !21033)
!21037 = !DILocation(line: 335, column: 20, scope: !21033)
!21038 = !DILocation(line: 335, column: 44, scope: !21033)
!21039 = !DILocation(line: 335, column: 57, scope: !21033)
!21040 = !DILocation(line: 335, column: 47, scope: !21033)
!21041 = !DILocation(line: 336, column: 15, scope: !21033)
!21042 = !DILocation(line: 336, column: 30, scope: !21033)
!21043 = !DILocation(line: 336, column: 34, scope: !21033)
!21044 = !DILocation(line: 336, column: 19, scope: !21033)
!21045 = !DILocation(line: 334, column: 15, scope: !21024)
!21046 = !DILocation(line: 337, column: 17, scope: !21033)
!21047 = !DILocation(line: 337, column: 15, scope: !21033)
!21048 = !DILocation(line: 337, column: 13, scope: !21033)
!21049 = !DILocation(line: 339, column: 26, scope: !21050)
!21050 = distinct !DILexicalBlock(scope: !21024, file: !1746, line: 339, column: 15)
!21051 = !DILocation(line: 339, column: 15, scope: !21050)
!21052 = !DILocation(line: 339, column: 15, scope: !21024)
!21053 = !DILocation(line: 340, column: 20, scope: !21050)
!21054 = !DILocation(line: 340, column: 13, scope: !21050)
!21055 = !DILocation(line: 341, column: 9, scope: !21024)
!21056 = !DILocation(line: 342, column: 7, scope: !21016)
!21057 = !DILocation(line: 344, column: 1, scope: !21002)
!21058 = distinct !DISubprogram(name: "equal_tm", scope: !1746, file: !1746, line: 69, type: !21059, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!21059 = !DISubroutineType(types: !21060)
!21060 = !{!27, !21061, !21061}
!21061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21062, size: 64)
!21062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !20702)
!21063 = !DILocalVariable(name: "a", arg: 1, scope: !21058, file: !1746, line: 69, type: !21061)
!21064 = !DILocation(line: 69, column: 28, scope: !21058)
!21065 = !DILocalVariable(name: "b", arg: 2, scope: !21058, file: !1746, line: 69, type: !21061)
!21066 = !DILocation(line: 69, column: 48, scope: !21058)
!21067 = !DILocation(line: 71, column: 14, scope: !21058)
!21068 = !DILocation(line: 71, column: 17, scope: !21058)
!21069 = !DILocation(line: 71, column: 26, scope: !21058)
!21070 = !DILocation(line: 71, column: 29, scope: !21058)
!21071 = !DILocation(line: 71, column: 24, scope: !21058)
!21072 = !DILocation(line: 72, column: 16, scope: !21058)
!21073 = !DILocation(line: 72, column: 19, scope: !21058)
!21074 = !DILocation(line: 72, column: 28, scope: !21058)
!21075 = !DILocation(line: 72, column: 31, scope: !21058)
!21076 = !DILocation(line: 72, column: 26, scope: !21058)
!21077 = !DILocation(line: 72, column: 13, scope: !21058)
!21078 = !DILocation(line: 73, column: 16, scope: !21058)
!21079 = !DILocation(line: 73, column: 19, scope: !21058)
!21080 = !DILocation(line: 73, column: 29, scope: !21058)
!21081 = !DILocation(line: 73, column: 32, scope: !21058)
!21082 = !DILocation(line: 73, column: 27, scope: !21058)
!21083 = !DILocation(line: 73, column: 13, scope: !21058)
!21084 = !DILocation(line: 74, column: 16, scope: !21058)
!21085 = !DILocation(line: 74, column: 19, scope: !21058)
!21086 = !DILocation(line: 74, column: 29, scope: !21058)
!21087 = !DILocation(line: 74, column: 32, scope: !21058)
!21088 = !DILocation(line: 74, column: 27, scope: !21058)
!21089 = !DILocation(line: 74, column: 13, scope: !21058)
!21090 = !DILocation(line: 75, column: 16, scope: !21058)
!21091 = !DILocation(line: 75, column: 19, scope: !21058)
!21092 = !DILocation(line: 75, column: 28, scope: !21058)
!21093 = !DILocation(line: 75, column: 31, scope: !21058)
!21094 = !DILocation(line: 75, column: 26, scope: !21058)
!21095 = !DILocation(line: 75, column: 13, scope: !21058)
!21096 = !DILocation(line: 76, column: 16, scope: !21058)
!21097 = !DILocation(line: 76, column: 19, scope: !21058)
!21098 = !DILocation(line: 76, column: 29, scope: !21058)
!21099 = !DILocation(line: 76, column: 32, scope: !21058)
!21100 = !DILocation(line: 76, column: 27, scope: !21058)
!21101 = !DILocation(line: 76, column: 13, scope: !21058)
!21102 = !DILocation(line: 77, column: 29, scope: !21058)
!21103 = !DILocation(line: 77, column: 32, scope: !21058)
!21104 = !DILocation(line: 77, column: 42, scope: !21058)
!21105 = !DILocation(line: 77, column: 45, scope: !21058)
!21106 = !DILocation(line: 77, column: 15, scope: !21058)
!21107 = !DILocation(line: 77, column: 13, scope: !21058)
!21108 = !DILocation(line: 71, column: 10, scope: !21058)
!21109 = !DILocation(line: 71, column: 3, scope: !21058)
!21110 = distinct !DISubprogram(name: "isdst_differ", scope: !1746, file: !1746, line: 62, type: !21111, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1732, retainedNodes: !152)
!21111 = !DISubroutineType(types: !21112)
!21112 = !{!141, !27, !27}
!21113 = !DILocalVariable(name: "a", arg: 1, scope: !21110, file: !1746, line: 62, type: !27)
!21114 = !DILocation(line: 62, column: 19, scope: !21110)
!21115 = !DILocalVariable(name: "b", arg: 2, scope: !21110, file: !1746, line: 62, type: !27)
!21116 = !DILocation(line: 62, column: 26, scope: !21110)
!21117 = !DILocation(line: 64, column: 11, scope: !21110)
!21118 = !DILocation(line: 64, column: 10, scope: !21110)
!21119 = !DILocation(line: 64, column: 17, scope: !21110)
!21120 = !DILocation(line: 64, column: 16, scope: !21110)
!21121 = !DILocation(line: 64, column: 13, scope: !21110)
!21122 = !DILocation(line: 64, column: 19, scope: !21110)
!21123 = !DILocation(line: 64, column: 27, scope: !21110)
!21124 = !DILocation(line: 64, column: 24, scope: !21110)
!21125 = !DILocation(line: 64, column: 29, scope: !21110)
!21126 = !DILocation(line: 64, column: 37, scope: !21110)
!21127 = !DILocation(line: 64, column: 34, scope: !21110)
!21128 = !DILocation(line: 0, scope: !21110)
!21129 = !DILocation(line: 64, column: 3, scope: !21110)
!21130 = distinct !DISubprogram(name: "acl_errno_valid", scope: !21131, file: !21131, line: 30, type: !8052, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1748, retainedNodes: !152)
!21131 = !DIFile(filename: "lib/acl-errno-valid.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21132 = !DILocalVariable(name: "errnum", arg: 1, scope: !21130, file: !21131, line: 30, type: !27)
!21133 = !DILocation(line: 30, column: 22, scope: !21130)
!21134 = !DILocation(line: 34, column: 11, scope: !21130)
!21135 = !DILocation(line: 34, column: 3, scope: !21130)
!21136 = !DILocation(line: 36, column: 17, scope: !21137)
!21137 = distinct !DILexicalBlock(scope: !21130, file: !21131, line: 35, column: 5)
!21138 = !DILocation(line: 37, column: 18, scope: !21137)
!21139 = !DILocation(line: 41, column: 18, scope: !21137)
!21140 = !DILocation(line: 49, column: 22, scope: !21137)
!21141 = !DILocation(line: 50, column: 14, scope: !21137)
!21142 = !DILocation(line: 52, column: 1, scope: !21130)
!21143 = distinct !DISubprogram(name: "rotl64", scope: !21144, file: !21144, line: 39, type: !21145, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21144 = !DIFile(filename: "./lib/bitrotate.h", directory: "/home/mbarbar/software/coreutils-8.31")
!21145 = !DISubroutineType(types: !21146)
!21146 = !{!21147, !21147, !27}
!21147 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !21148, line: 27, baseType: !21149)
!21148 = !DIFile(filename: "/usr/include/bits/stdint-uintn.h", directory: "")
!21149 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !165, line: 45, baseType: !151)
!21150 = !DILocalVariable(name: "x", arg: 1, scope: !21143, file: !21144, line: 39, type: !21147)
!21151 = !DILocation(line: 39, column: 18, scope: !21143)
!21152 = !DILocalVariable(name: "n", arg: 2, scope: !21143, file: !21144, line: 39, type: !27)
!21153 = !DILocation(line: 39, column: 25, scope: !21143)
!21154 = !DILocation(line: 41, column: 12, scope: !21143)
!21155 = !DILocation(line: 41, column: 17, scope: !21143)
!21156 = !DILocation(line: 41, column: 14, scope: !21143)
!21157 = !DILocation(line: 41, column: 23, scope: !21143)
!21158 = !DILocation(line: 41, column: 34, scope: !21143)
!21159 = !DILocation(line: 41, column: 32, scope: !21143)
!21160 = !DILocation(line: 41, column: 25, scope: !21143)
!21161 = !DILocation(line: 41, column: 20, scope: !21143)
!21162 = !DILocation(line: 41, column: 3, scope: !21143)
!21163 = distinct !DISubprogram(name: "rotr64", scope: !21144, file: !21144, line: 48, type: !21145, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21164 = !DILocalVariable(name: "x", arg: 1, scope: !21163, file: !21144, line: 48, type: !21147)
!21165 = !DILocation(line: 48, column: 18, scope: !21163)
!21166 = !DILocalVariable(name: "n", arg: 2, scope: !21163, file: !21144, line: 48, type: !27)
!21167 = !DILocation(line: 48, column: 25, scope: !21163)
!21168 = !DILocation(line: 50, column: 12, scope: !21163)
!21169 = !DILocation(line: 50, column: 17, scope: !21163)
!21170 = !DILocation(line: 50, column: 14, scope: !21163)
!21171 = !DILocation(line: 50, column: 23, scope: !21163)
!21172 = !DILocation(line: 50, column: 34, scope: !21163)
!21173 = !DILocation(line: 50, column: 32, scope: !21163)
!21174 = !DILocation(line: 50, column: 25, scope: !21163)
!21175 = !DILocation(line: 50, column: 20, scope: !21163)
!21176 = !DILocation(line: 50, column: 3, scope: !21163)
!21177 = distinct !DISubprogram(name: "rotl32", scope: !21144, file: !21144, line: 58, type: !21178, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21178 = !DISubroutineType(types: !21179)
!21179 = !{!21180, !21180, !27}
!21180 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !21148, line: 26, baseType: !604)
!21181 = !DILocalVariable(name: "x", arg: 1, scope: !21177, file: !21144, line: 58, type: !21180)
!21182 = !DILocation(line: 58, column: 18, scope: !21177)
!21183 = !DILocalVariable(name: "n", arg: 2, scope: !21177, file: !21144, line: 58, type: !27)
!21184 = !DILocation(line: 58, column: 25, scope: !21177)
!21185 = !DILocation(line: 60, column: 12, scope: !21177)
!21186 = !DILocation(line: 60, column: 17, scope: !21177)
!21187 = !DILocation(line: 60, column: 14, scope: !21177)
!21188 = !DILocation(line: 60, column: 23, scope: !21177)
!21189 = !DILocation(line: 60, column: 34, scope: !21177)
!21190 = !DILocation(line: 60, column: 32, scope: !21177)
!21191 = !DILocation(line: 60, column: 25, scope: !21177)
!21192 = !DILocation(line: 60, column: 20, scope: !21177)
!21193 = !DILocation(line: 60, column: 3, scope: !21177)
!21194 = distinct !DISubprogram(name: "rotr32", scope: !21144, file: !21144, line: 67, type: !21178, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21195 = !DILocalVariable(name: "x", arg: 1, scope: !21194, file: !21144, line: 67, type: !21180)
!21196 = !DILocation(line: 67, column: 18, scope: !21194)
!21197 = !DILocalVariable(name: "n", arg: 2, scope: !21194, file: !21144, line: 67, type: !27)
!21198 = !DILocation(line: 67, column: 25, scope: !21194)
!21199 = !DILocation(line: 69, column: 12, scope: !21194)
!21200 = !DILocation(line: 69, column: 17, scope: !21194)
!21201 = !DILocation(line: 69, column: 14, scope: !21194)
!21202 = !DILocation(line: 69, column: 23, scope: !21194)
!21203 = !DILocation(line: 69, column: 34, scope: !21194)
!21204 = !DILocation(line: 69, column: 32, scope: !21194)
!21205 = !DILocation(line: 69, column: 25, scope: !21194)
!21206 = !DILocation(line: 69, column: 20, scope: !21194)
!21207 = !DILocation(line: 69, column: 3, scope: !21194)
!21208 = distinct !DISubprogram(name: "rotl_sz", scope: !21144, file: !21144, line: 76, type: !21209, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21209 = !DISubroutineType(types: !21210)
!21210 = !{!149, !149, !27}
!21211 = !DILocalVariable(name: "x", arg: 1, scope: !21208, file: !21144, line: 76, type: !149)
!21212 = !DILocation(line: 76, column: 17, scope: !21208)
!21213 = !DILocalVariable(name: "n", arg: 2, scope: !21208, file: !21144, line: 76, type: !27)
!21214 = !DILocation(line: 76, column: 24, scope: !21208)
!21215 = !DILocation(line: 78, column: 12, scope: !21208)
!21216 = !DILocation(line: 78, column: 17, scope: !21208)
!21217 = !DILocation(line: 78, column: 14, scope: !21208)
!21218 = !DILocation(line: 78, column: 23, scope: !21208)
!21219 = !DILocation(line: 78, column: 53, scope: !21208)
!21220 = !DILocation(line: 78, column: 51, scope: !21208)
!21221 = !DILocation(line: 78, column: 25, scope: !21208)
!21222 = !DILocation(line: 78, column: 20, scope: !21208)
!21223 = !DILocation(line: 78, column: 3, scope: !21208)
!21224 = distinct !DISubprogram(name: "rotr_sz", scope: !21144, file: !21144, line: 85, type: !21209, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21225 = !DILocalVariable(name: "x", arg: 1, scope: !21224, file: !21144, line: 85, type: !149)
!21226 = !DILocation(line: 85, column: 17, scope: !21224)
!21227 = !DILocalVariable(name: "n", arg: 2, scope: !21224, file: !21144, line: 85, type: !27)
!21228 = !DILocation(line: 85, column: 24, scope: !21224)
!21229 = !DILocation(line: 87, column: 12, scope: !21224)
!21230 = !DILocation(line: 87, column: 17, scope: !21224)
!21231 = !DILocation(line: 87, column: 14, scope: !21224)
!21232 = !DILocation(line: 87, column: 23, scope: !21224)
!21233 = !DILocation(line: 87, column: 53, scope: !21224)
!21234 = !DILocation(line: 87, column: 51, scope: !21224)
!21235 = !DILocation(line: 87, column: 25, scope: !21224)
!21236 = !DILocation(line: 87, column: 20, scope: !21224)
!21237 = !DILocation(line: 87, column: 3, scope: !21224)
!21238 = distinct !DISubprogram(name: "rotl16", scope: !21144, file: !21144, line: 96, type: !21239, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21239 = !DISubroutineType(types: !21240)
!21240 = !{!21241, !21241, !27}
!21241 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !21148, line: 25, baseType: !21242)
!21242 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !165, line: 40, baseType: !176)
!21243 = !DILocalVariable(name: "x", arg: 1, scope: !21238, file: !21144, line: 96, type: !21241)
!21244 = !DILocation(line: 96, column: 18, scope: !21238)
!21245 = !DILocalVariable(name: "n", arg: 2, scope: !21238, file: !21144, line: 96, type: !27)
!21246 = !DILocation(line: 96, column: 25, scope: !21238)
!21247 = !DILocation(line: 98, column: 12, scope: !21238)
!21248 = !DILocation(line: 98, column: 17, scope: !21238)
!21249 = !DILocation(line: 98, column: 14, scope: !21238)
!21250 = !DILocation(line: 98, column: 23, scope: !21238)
!21251 = !DILocation(line: 98, column: 34, scope: !21238)
!21252 = !DILocation(line: 98, column: 32, scope: !21238)
!21253 = !DILocation(line: 98, column: 25, scope: !21238)
!21254 = !DILocation(line: 98, column: 20, scope: !21238)
!21255 = !DILocation(line: 98, column: 39, scope: !21238)
!21256 = !DILocation(line: 98, column: 10, scope: !21238)
!21257 = !DILocation(line: 98, column: 3, scope: !21238)
!21258 = distinct !DISubprogram(name: "rotr16", scope: !21144, file: !21144, line: 107, type: !21239, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21259 = !DILocalVariable(name: "x", arg: 1, scope: !21258, file: !21144, line: 107, type: !21241)
!21260 = !DILocation(line: 107, column: 18, scope: !21258)
!21261 = !DILocalVariable(name: "n", arg: 2, scope: !21258, file: !21144, line: 107, type: !27)
!21262 = !DILocation(line: 107, column: 25, scope: !21258)
!21263 = !DILocation(line: 109, column: 12, scope: !21258)
!21264 = !DILocation(line: 109, column: 17, scope: !21258)
!21265 = !DILocation(line: 109, column: 14, scope: !21258)
!21266 = !DILocation(line: 109, column: 23, scope: !21258)
!21267 = !DILocation(line: 109, column: 34, scope: !21258)
!21268 = !DILocation(line: 109, column: 32, scope: !21258)
!21269 = !DILocation(line: 109, column: 25, scope: !21258)
!21270 = !DILocation(line: 109, column: 20, scope: !21258)
!21271 = !DILocation(line: 109, column: 39, scope: !21258)
!21272 = !DILocation(line: 109, column: 10, scope: !21258)
!21273 = !DILocation(line: 109, column: 3, scope: !21258)
!21274 = distinct !DISubprogram(name: "rotl8", scope: !21144, file: !21144, line: 118, type: !21275, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21275 = !DISubroutineType(types: !21276)
!21276 = !{!21277, !21277, !27}
!21277 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !21148, line: 24, baseType: !21278)
!21278 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !165, line: 38, baseType: !737)
!21279 = !DILocalVariable(name: "x", arg: 1, scope: !21274, file: !21144, line: 118, type: !21277)
!21280 = !DILocation(line: 118, column: 16, scope: !21274)
!21281 = !DILocalVariable(name: "n", arg: 2, scope: !21274, file: !21144, line: 118, type: !27)
!21282 = !DILocation(line: 118, column: 23, scope: !21274)
!21283 = !DILocation(line: 120, column: 12, scope: !21274)
!21284 = !DILocation(line: 120, column: 17, scope: !21274)
!21285 = !DILocation(line: 120, column: 14, scope: !21274)
!21286 = !DILocation(line: 120, column: 23, scope: !21274)
!21287 = !DILocation(line: 120, column: 33, scope: !21274)
!21288 = !DILocation(line: 120, column: 31, scope: !21274)
!21289 = !DILocation(line: 120, column: 25, scope: !21274)
!21290 = !DILocation(line: 120, column: 20, scope: !21274)
!21291 = !DILocation(line: 120, column: 38, scope: !21274)
!21292 = !DILocation(line: 120, column: 10, scope: !21274)
!21293 = !DILocation(line: 120, column: 3, scope: !21274)
!21294 = distinct !DISubprogram(name: "rotr8", scope: !21144, file: !21144, line: 129, type: !21275, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1750, retainedNodes: !152)
!21295 = !DILocalVariable(name: "x", arg: 1, scope: !21294, file: !21144, line: 129, type: !21277)
!21296 = !DILocation(line: 129, column: 16, scope: !21294)
!21297 = !DILocalVariable(name: "n", arg: 2, scope: !21294, file: !21144, line: 129, type: !27)
!21298 = !DILocation(line: 129, column: 23, scope: !21294)
!21299 = !DILocation(line: 131, column: 12, scope: !21294)
!21300 = !DILocation(line: 131, column: 17, scope: !21294)
!21301 = !DILocation(line: 131, column: 14, scope: !21294)
!21302 = !DILocation(line: 131, column: 23, scope: !21294)
!21303 = !DILocation(line: 131, column: 33, scope: !21294)
!21304 = !DILocation(line: 131, column: 31, scope: !21294)
!21305 = !DILocation(line: 131, column: 25, scope: !21294)
!21306 = !DILocation(line: 131, column: 20, scope: !21294)
!21307 = !DILocation(line: 131, column: 38, scope: !21294)
!21308 = !DILocation(line: 131, column: 10, scope: !21294)
!21309 = !DILocation(line: 131, column: 3, scope: !21294)
!21310 = distinct !DISubprogram(name: "c_strcasecmp", scope: !21311, file: !21311, line: 27, type: !7725, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1752, retainedNodes: !152)
!21311 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21312 = !DILocalVariable(name: "s1", arg: 1, scope: !21310, file: !21311, line: 27, type: !146)
!21313 = !DILocation(line: 27, column: 27, scope: !21310)
!21314 = !DILocalVariable(name: "s2", arg: 2, scope: !21310, file: !21311, line: 27, type: !146)
!21315 = !DILocation(line: 27, column: 43, scope: !21310)
!21316 = !DILocalVariable(name: "p1", scope: !21310, file: !21311, line: 29, type: !1521)
!21317 = !DILocation(line: 29, column: 33, scope: !21310)
!21318 = !DILocation(line: 29, column: 62, scope: !21310)
!21319 = !DILocalVariable(name: "p2", scope: !21310, file: !21311, line: 30, type: !1521)
!21320 = !DILocation(line: 30, column: 33, scope: !21310)
!21321 = !DILocation(line: 30, column: 62, scope: !21310)
!21322 = !DILocalVariable(name: "c1", scope: !21310, file: !21311, line: 31, type: !737)
!21323 = !DILocation(line: 31, column: 17, scope: !21310)
!21324 = !DILocalVariable(name: "c2", scope: !21310, file: !21311, line: 31, type: !737)
!21325 = !DILocation(line: 31, column: 21, scope: !21310)
!21326 = !DILocation(line: 33, column: 7, scope: !21327)
!21327 = distinct !DILexicalBlock(scope: !21310, file: !21311, line: 33, column: 7)
!21328 = !DILocation(line: 33, column: 13, scope: !21327)
!21329 = !DILocation(line: 33, column: 10, scope: !21327)
!21330 = !DILocation(line: 33, column: 7, scope: !21310)
!21331 = !DILocation(line: 34, column: 5, scope: !21327)
!21332 = !DILocation(line: 36, column: 3, scope: !21310)
!21333 = !DILocation(line: 38, column: 24, scope: !21334)
!21334 = distinct !DILexicalBlock(scope: !21310, file: !21311, line: 37, column: 5)
!21335 = !DILocation(line: 38, column: 23, scope: !21334)
!21336 = !DILocation(line: 38, column: 12, scope: !21334)
!21337 = !DILocation(line: 38, column: 10, scope: !21334)
!21338 = !DILocation(line: 39, column: 24, scope: !21334)
!21339 = !DILocation(line: 39, column: 23, scope: !21334)
!21340 = !DILocation(line: 39, column: 12, scope: !21334)
!21341 = !DILocation(line: 39, column: 10, scope: !21334)
!21342 = !DILocation(line: 41, column: 11, scope: !21343)
!21343 = distinct !DILexicalBlock(scope: !21334, file: !21311, line: 41, column: 11)
!21344 = !DILocation(line: 41, column: 14, scope: !21343)
!21345 = !DILocation(line: 41, column: 11, scope: !21334)
!21346 = !DILocation(line: 42, column: 9, scope: !21343)
!21347 = !DILocation(line: 44, column: 7, scope: !21334)
!21348 = !DILocation(line: 45, column: 7, scope: !21334)
!21349 = !DILocation(line: 46, column: 5, scope: !21334)
!21350 = !DILocation(line: 47, column: 10, scope: !21310)
!21351 = !DILocation(line: 47, column: 16, scope: !21310)
!21352 = !DILocation(line: 47, column: 13, scope: !21310)
!21353 = distinct !{!21353, !21332, !21354}
!21354 = !DILocation(line: 47, column: 18, scope: !21310)
!21355 = !DILocation(line: 50, column: 12, scope: !21356)
!21356 = distinct !DILexicalBlock(scope: !21310, file: !21311, line: 49, column: 7)
!21357 = !DILocation(line: 50, column: 17, scope: !21356)
!21358 = !DILocation(line: 50, column: 15, scope: !21356)
!21359 = !DILocation(line: 50, column: 5, scope: !21356)
!21360 = !DILocation(line: 56, column: 1, scope: !21310)
!21361 = distinct !DISubprogram(name: "close_stream", scope: !21362, file: !21362, line: 56, type: !21363, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1754, retainedNodes: !152)
!21362 = !DIFile(filename: "lib/close-stream.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21363 = !DISubroutineType(types: !21364)
!21364 = !{!27, !21365}
!21365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21366, size: 64)
!21366 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !21367)
!21367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !21368)
!21368 = !{!21369, !21370, !21371, !21372, !21373, !21374, !21375, !21376, !21377, !21378, !21379, !21380, !21381, !21382, !21384, !21385, !21386, !21387, !21388, !21389, !21390, !21391, !21392, !21393, !21394, !21395, !21396, !21397, !21398}
!21369 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !21367, file: !290, line: 51, baseType: !27, size: 32)
!21370 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !21367, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!21371 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !21367, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!21372 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !21367, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!21373 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !21367, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!21374 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !21367, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!21375 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !21367, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!21376 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !21367, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!21377 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !21367, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!21378 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !21367, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!21379 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !21367, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!21380 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !21367, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!21381 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !21367, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!21382 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !21367, file: !290, line: 70, baseType: !21383, size: 64, offset: 832)
!21383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21367, size: 64)
!21384 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !21367, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!21385 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !21367, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!21386 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !21367, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!21387 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !21367, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!21388 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !21367, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!21389 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !21367, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!21390 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !21367, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!21391 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !21367, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!21392 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !21367, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!21393 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !21367, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!21394 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !21367, file: !290, line: 93, baseType: !21383, size: 64, offset: 1344)
!21395 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !21367, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!21396 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !21367, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!21397 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !21367, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!21398 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !21367, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!21399 = !DILocalVariable(name: "stream", arg: 1, scope: !21361, file: !21362, line: 56, type: !21365)
!21400 = !DILocation(line: 56, column: 21, scope: !21361)
!21401 = !DILocalVariable(name: "some_pending", scope: !21361, file: !21362, line: 58, type: !1757)
!21402 = !DILocation(line: 58, column: 14, scope: !21361)
!21403 = !DILocation(line: 58, column: 42, scope: !21361)
!21404 = !DILocation(line: 58, column: 30, scope: !21361)
!21405 = !DILocation(line: 58, column: 50, scope: !21361)
!21406 = !DILocalVariable(name: "prev_fail", scope: !21361, file: !21362, line: 59, type: !1757)
!21407 = !DILocation(line: 59, column: 14, scope: !21361)
!21408 = !DILocation(line: 59, column: 27, scope: !21361)
!21409 = !DILocation(line: 59, column: 43, scope: !21361)
!21410 = !DILocalVariable(name: "fclose_fail", scope: !21361, file: !21362, line: 60, type: !1757)
!21411 = !DILocation(line: 60, column: 14, scope: !21361)
!21412 = !DILocation(line: 60, column: 37, scope: !21361)
!21413 = !DILocation(line: 60, column: 29, scope: !21361)
!21414 = !DILocation(line: 60, column: 45, scope: !21361)
!21415 = !DILocation(line: 70, column: 7, scope: !21416)
!21416 = distinct !DILexicalBlock(scope: !21361, file: !21362, line: 70, column: 7)
!21417 = !DILocation(line: 70, column: 17, scope: !21416)
!21418 = !DILocation(line: 70, column: 21, scope: !21416)
!21419 = !DILocation(line: 70, column: 33, scope: !21416)
!21420 = !DILocation(line: 70, column: 37, scope: !21416)
!21421 = !DILocation(line: 70, column: 50, scope: !21416)
!21422 = !DILocation(line: 70, column: 53, scope: !21416)
!21423 = !DILocation(line: 70, column: 59, scope: !21416)
!21424 = !DILocation(line: 70, column: 7, scope: !21361)
!21425 = !DILocation(line: 72, column: 13, scope: !21426)
!21426 = distinct !DILexicalBlock(scope: !21427, file: !21362, line: 72, column: 11)
!21427 = distinct !DILexicalBlock(scope: !21416, file: !21362, line: 71, column: 5)
!21428 = !DILocation(line: 72, column: 11, scope: !21427)
!21429 = !DILocation(line: 73, column: 9, scope: !21426)
!21430 = !DILocation(line: 73, column: 15, scope: !21426)
!21431 = !DILocation(line: 74, column: 7, scope: !21427)
!21432 = !DILocation(line: 77, column: 3, scope: !21361)
!21433 = !DILocation(line: 78, column: 1, scope: !21361)
!21434 = distinct !DISubprogram(name: "dir_name", scope: !21435, file: !21435, line: 32, type: !8592, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1758, retainedNodes: !152)
!21435 = !DIFile(filename: "lib/dirname.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21436 = !DILocalVariable(name: "file", arg: 1, scope: !21434, file: !21435, line: 32, type: !146)
!21437 = !DILocation(line: 32, column: 23, scope: !21434)
!21438 = !DILocalVariable(name: "result", scope: !21434, file: !21435, line: 34, type: !143)
!21439 = !DILocation(line: 34, column: 9, scope: !21434)
!21440 = !DILocation(line: 34, column: 29, scope: !21434)
!21441 = !DILocation(line: 34, column: 18, scope: !21434)
!21442 = !DILocation(line: 35, column: 8, scope: !21443)
!21443 = distinct !DILexicalBlock(scope: !21434, file: !21435, line: 35, column: 7)
!21444 = !DILocation(line: 35, column: 7, scope: !21434)
!21445 = !DILocation(line: 36, column: 5, scope: !21443)
!21446 = !DILocation(line: 37, column: 10, scope: !21434)
!21447 = !DILocation(line: 37, column: 3, scope: !21434)
!21448 = distinct !DISubprogram(name: "hash_pjw", scope: !21449, file: !21449, line: 31, type: !1227, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1761, retainedNodes: !152)
!21449 = !DIFile(filename: "lib/hash-pjw.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21450 = !DILocalVariable(name: "x", arg: 1, scope: !21448, file: !21449, line: 31, type: !181)
!21451 = !DILocation(line: 31, column: 23, scope: !21448)
!21452 = !DILocalVariable(name: "tablesize", arg: 2, scope: !21448, file: !21449, line: 31, type: !149)
!21453 = !DILocation(line: 31, column: 33, scope: !21448)
!21454 = !DILocalVariable(name: "s", scope: !21448, file: !21449, line: 33, type: !146)
!21455 = !DILocation(line: 33, column: 15, scope: !21448)
!21456 = !DILocalVariable(name: "h", scope: !21448, file: !21449, line: 34, type: !149)
!21457 = !DILocation(line: 34, column: 10, scope: !21448)
!21458 = !DILocation(line: 36, column: 12, scope: !21459)
!21459 = distinct !DILexicalBlock(scope: !21448, file: !21449, line: 36, column: 3)
!21460 = !DILocation(line: 36, column: 10, scope: !21459)
!21461 = !DILocation(line: 36, column: 8, scope: !21459)
!21462 = !DILocation(line: 36, column: 16, scope: !21463)
!21463 = distinct !DILexicalBlock(scope: !21459, file: !21449, line: 36, column: 3)
!21464 = !DILocation(line: 36, column: 15, scope: !21463)
!21465 = !DILocation(line: 36, column: 3, scope: !21459)
!21466 = !DILocation(line: 37, column: 10, scope: !21463)
!21467 = !DILocation(line: 37, column: 9, scope: !21463)
!21468 = !DILocation(line: 37, column: 16, scope: !21463)
!21469 = !DILocation(line: 37, column: 18, scope: !21463)
!21470 = !DILocation(line: 37, column: 27, scope: !21463)
!21471 = !DILocation(line: 37, column: 29, scope: !21463)
!21472 = !DILocation(line: 37, column: 24, scope: !21463)
!21473 = !DILocation(line: 37, column: 12, scope: !21463)
!21474 = !DILocation(line: 37, column: 7, scope: !21463)
!21475 = !DILocation(line: 37, column: 5, scope: !21463)
!21476 = !DILocation(line: 36, column: 20, scope: !21463)
!21477 = !DILocation(line: 36, column: 3, scope: !21463)
!21478 = distinct !{!21478, !21465, !21479}
!21479 = !DILocation(line: 37, column: 48, scope: !21459)
!21480 = !DILocation(line: 39, column: 10, scope: !21448)
!21481 = !DILocation(line: 39, column: 14, scope: !21448)
!21482 = !DILocation(line: 39, column: 12, scope: !21448)
!21483 = !DILocation(line: 39, column: 3, scope: !21448)
!21484 = distinct !DISubprogram(name: "locale_charset", scope: !21485, file: !21485, line: 687, type: !21486, scopeLine: 688, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1764, retainedNodes: !152)
!21485 = !DIFile(filename: "lib/localcharset.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21486 = !DISubroutineType(types: !1097)
!21487 = !DILocalVariable(name: "codeset", scope: !21484, file: !21485, line: 689, type: !146)
!21488 = !DILocation(line: 689, column: 15, scope: !21484)
!21489 = !DILocation(line: 696, column: 13, scope: !21484)
!21490 = !DILocation(line: 696, column: 11, scope: !21484)
!21491 = !DILocation(line: 754, column: 7, scope: !21492)
!21492 = distinct !DILexicalBlock(scope: !21484, file: !21485, line: 754, column: 7)
!21493 = !DILocation(line: 754, column: 15, scope: !21492)
!21494 = !DILocation(line: 754, column: 7, scope: !21484)
!21495 = !DILocation(line: 756, column: 13, scope: !21492)
!21496 = !DILocation(line: 756, column: 5, scope: !21492)
!21497 = !DILocation(line: 907, column: 13, scope: !21498)
!21498 = distinct !DILexicalBlock(scope: !21499, file: !21485, line: 907, column: 13)
!21499 = distinct !DILexicalBlock(scope: !21500, file: !21485, line: 897, column: 7)
!21500 = distinct !DILexicalBlock(scope: !21484, file: !21485, line: 856, column: 3)
!21501 = !DILocation(line: 907, column: 24, scope: !21498)
!21502 = !DILocation(line: 907, column: 13, scope: !21499)
!21503 = !DILocation(line: 908, column: 19, scope: !21498)
!21504 = !DILocation(line: 908, column: 11, scope: !21498)
!21505 = !DILocation(line: 995, column: 10, scope: !21484)
!21506 = !DILocation(line: 995, column: 3, scope: !21484)
!21507 = distinct !DISubprogram(name: "rpl_fclose", scope: !21508, file: !21508, line: 58, type: !21509, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1767, retainedNodes: !152)
!21508 = !DIFile(filename: "lib/fclose.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21509 = !DISubroutineType(types: !21510)
!21510 = !{!27, !21511}
!21511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21512, size: 64)
!21512 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !288, line: 7, baseType: !21513)
!21513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !290, line: 49, size: 1728, elements: !21514)
!21514 = !{!21515, !21516, !21517, !21518, !21519, !21520, !21521, !21522, !21523, !21524, !21525, !21526, !21527, !21528, !21530, !21531, !21532, !21533, !21534, !21535, !21536, !21537, !21538, !21539, !21540, !21541, !21542, !21543, !21544}
!21515 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !21513, file: !290, line: 51, baseType: !27, size: 32)
!21516 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !21513, file: !290, line: 54, baseType: !143, size: 64, offset: 64)
!21517 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !21513, file: !290, line: 55, baseType: !143, size: 64, offset: 128)
!21518 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !21513, file: !290, line: 56, baseType: !143, size: 64, offset: 192)
!21519 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !21513, file: !290, line: 57, baseType: !143, size: 64, offset: 256)
!21520 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !21513, file: !290, line: 58, baseType: !143, size: 64, offset: 320)
!21521 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !21513, file: !290, line: 59, baseType: !143, size: 64, offset: 384)
!21522 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !21513, file: !290, line: 60, baseType: !143, size: 64, offset: 448)
!21523 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !21513, file: !290, line: 61, baseType: !143, size: 64, offset: 512)
!21524 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !21513, file: !290, line: 64, baseType: !143, size: 64, offset: 576)
!21525 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !21513, file: !290, line: 65, baseType: !143, size: 64, offset: 640)
!21526 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !21513, file: !290, line: 66, baseType: !143, size: 64, offset: 704)
!21527 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !21513, file: !290, line: 68, baseType: !305, size: 64, offset: 768)
!21528 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !21513, file: !290, line: 70, baseType: !21529, size: 64, offset: 832)
!21529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21513, size: 64)
!21530 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !21513, file: !290, line: 72, baseType: !27, size: 32, offset: 896)
!21531 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !21513, file: !290, line: 73, baseType: !27, size: 32, offset: 928)
!21532 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !21513, file: !290, line: 74, baseType: !179, size: 64, offset: 960)
!21533 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !21513, file: !290, line: 77, baseType: !176, size: 16, offset: 1024)
!21534 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !21513, file: !290, line: 78, baseType: !314, size: 8, offset: 1040)
!21535 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !21513, file: !290, line: 79, baseType: !242, size: 8, offset: 1048)
!21536 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !21513, file: !290, line: 81, baseType: !317, size: 64, offset: 1088)
!21537 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !21513, file: !290, line: 89, baseType: !320, size: 64, offset: 1152)
!21538 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !21513, file: !290, line: 91, baseType: !322, size: 64, offset: 1216)
!21539 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !21513, file: !290, line: 92, baseType: !325, size: 64, offset: 1280)
!21540 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !21513, file: !290, line: 93, baseType: !21529, size: 64, offset: 1344)
!21541 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !21513, file: !290, line: 94, baseType: !167, size: 64, offset: 1408)
!21542 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !21513, file: !290, line: 95, baseType: !149, size: 64, offset: 1472)
!21543 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !21513, file: !290, line: 96, baseType: !27, size: 32, offset: 1536)
!21544 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !21513, file: !290, line: 98, baseType: !332, size: 160, offset: 1568)
!21545 = !DILocalVariable(name: "fp", arg: 1, scope: !21507, file: !21508, line: 58, type: !21511)
!21546 = !DILocation(line: 58, column: 19, scope: !21507)
!21547 = !DILocalVariable(name: "saved_errno", scope: !21507, file: !21508, line: 60, type: !27)
!21548 = !DILocation(line: 60, column: 7, scope: !21507)
!21549 = !DILocalVariable(name: "fd", scope: !21507, file: !21508, line: 61, type: !27)
!21550 = !DILocation(line: 61, column: 7, scope: !21507)
!21551 = !DILocalVariable(name: "result", scope: !21507, file: !21508, line: 62, type: !27)
!21552 = !DILocation(line: 62, column: 7, scope: !21507)
!21553 = !DILocation(line: 65, column: 16, scope: !21507)
!21554 = !DILocation(line: 65, column: 8, scope: !21507)
!21555 = !DILocation(line: 65, column: 6, scope: !21507)
!21556 = !DILocation(line: 66, column: 7, scope: !21557)
!21557 = distinct !DILexicalBlock(scope: !21507, file: !21508, line: 66, column: 7)
!21558 = !DILocation(line: 66, column: 10, scope: !21557)
!21559 = !DILocation(line: 66, column: 7, scope: !21507)
!21560 = !DILocation(line: 67, column: 28, scope: !21557)
!21561 = !DILocation(line: 67, column: 12, scope: !21557)
!21562 = !DILocation(line: 67, column: 5, scope: !21557)
!21563 = !DILocation(line: 72, column: 9, scope: !21564)
!21564 = distinct !DILexicalBlock(scope: !21507, file: !21508, line: 72, column: 7)
!21565 = !DILocation(line: 72, column: 23, scope: !21564)
!21566 = !DILocation(line: 72, column: 41, scope: !21564)
!21567 = !DILocation(line: 72, column: 33, scope: !21564)
!21568 = !DILocation(line: 72, column: 26, scope: !21564)
!21569 = !DILocation(line: 72, column: 59, scope: !21564)
!21570 = !DILocation(line: 73, column: 7, scope: !21564)
!21571 = !DILocation(line: 73, column: 18, scope: !21564)
!21572 = !DILocation(line: 73, column: 10, scope: !21564)
!21573 = !DILocation(line: 72, column: 7, scope: !21507)
!21574 = !DILocation(line: 74, column: 19, scope: !21564)
!21575 = !DILocation(line: 74, column: 17, scope: !21564)
!21576 = !DILocation(line: 74, column: 5, scope: !21564)
!21577 = !DILocation(line: 100, column: 28, scope: !21507)
!21578 = !DILocation(line: 100, column: 12, scope: !21507)
!21579 = !DILocation(line: 100, column: 10, scope: !21507)
!21580 = !DILocation(line: 105, column: 7, scope: !21581)
!21581 = distinct !DILexicalBlock(scope: !21507, file: !21508, line: 105, column: 7)
!21582 = !DILocation(line: 105, column: 19, scope: !21581)
!21583 = !DILocation(line: 105, column: 7, scope: !21507)
!21584 = !DILocation(line: 107, column: 15, scope: !21585)
!21585 = distinct !DILexicalBlock(scope: !21581, file: !21508, line: 106, column: 5)
!21586 = !DILocation(line: 107, column: 7, scope: !21585)
!21587 = !DILocation(line: 107, column: 13, scope: !21585)
!21588 = !DILocation(line: 108, column: 14, scope: !21585)
!21589 = !DILocation(line: 109, column: 5, scope: !21585)
!21590 = !DILocation(line: 111, column: 10, scope: !21507)
!21591 = !DILocation(line: 111, column: 3, scope: !21507)
!21592 = !DILocation(line: 112, column: 1, scope: !21507)
!21593 = distinct !DISubprogram(name: "rpl_fflush", scope: !21594, file: !21594, line: 129, type: !21595, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1769, retainedNodes: !152)
!21594 = !DIFile(filename: "lib/fflush.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21595 = !DISubroutineType(types: !21596)
!21596 = !{!27, !21597}
!21597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1772, size: 64)
!21598 = !DILocalVariable(name: "stream", arg: 1, scope: !21593, file: !21594, line: 129, type: !21597)
!21599 = !DILocation(line: 129, column: 19, scope: !21593)
!21600 = !DILocation(line: 150, column: 7, scope: !21601)
!21601 = distinct !DILexicalBlock(scope: !21593, file: !21594, line: 150, column: 7)
!21602 = !DILocation(line: 150, column: 14, scope: !21601)
!21603 = !DILocation(line: 150, column: 22, scope: !21601)
!21604 = !DILocation(line: 150, column: 27, scope: !21601)
!21605 = !DILocation(line: 150, column: 7, scope: !21593)
!21606 = !DILocation(line: 151, column: 20, scope: !21601)
!21607 = !DILocation(line: 151, column: 12, scope: !21601)
!21608 = !DILocation(line: 151, column: 5, scope: !21601)
!21609 = !DILocation(line: 156, column: 44, scope: !21593)
!21610 = !DILocation(line: 156, column: 3, scope: !21593)
!21611 = !DILocation(line: 158, column: 18, scope: !21593)
!21612 = !DILocation(line: 158, column: 10, scope: !21593)
!21613 = !DILocation(line: 158, column: 3, scope: !21593)
!21614 = !DILocation(line: 232, column: 1, scope: !21593)
!21615 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !21594, file: !21594, line: 41, type: !21616, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1769, retainedNodes: !152)
!21616 = !DISubroutineType(types: !21617)
!21617 = !{null, !21597}
!21618 = !DILocalVariable(name: "fp", arg: 1, scope: !21615, file: !21594, line: 41, type: !21597)
!21619 = !DILocation(line: 41, column: 48, scope: !21615)
!21620 = !DILocation(line: 43, column: 7, scope: !21621)
!21621 = distinct !DILexicalBlock(scope: !21615, file: !21594, line: 43, column: 7)
!21622 = !DILocation(line: 43, column: 11, scope: !21621)
!21623 = !DILocation(line: 43, column: 18, scope: !21621)
!21624 = !DILocation(line: 43, column: 7, scope: !21615)
!21625 = !DILocation(line: 45, column: 13, scope: !21621)
!21626 = !DILocation(line: 45, column: 5, scope: !21621)
!21627 = !DILocation(line: 46, column: 1, scope: !21615)
!21628 = distinct !DISubprogram(name: "rpl_fseeko", scope: !21629, file: !21629, line: 28, type: !21630, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1805, retainedNodes: !152)
!21629 = !DIFile(filename: "lib/fseeko.c", directory: "/home/mbarbar/software/coreutils-8.31")
!21630 = !DISubroutineType(types: !21631)
!21631 = !{!27, !21632, !1841, !27}
!21632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!21633 = !DILocalVariable(name: "fp", arg: 1, scope: !21628, file: !21629, line: 28, type: !21632)
!21634 = !DILocation(line: 28, column: 15, scope: !21628)
!21635 = !DILocalVariable(name: "offset", arg: 2, scope: !21628, file: !21629, line: 28, type: !1841)
!21636 = !DILocation(line: 28, column: 25, scope: !21628)
!21637 = !DILocalVariable(name: "whence", arg: 3, scope: !21628, file: !21629, line: 28, type: !27)
!21638 = !DILocation(line: 28, column: 37, scope: !21628)
!21639 = !DILocation(line: 52, column: 7, scope: !21640)
!21640 = distinct !DILexicalBlock(scope: !21628, file: !21629, line: 52, column: 7)
!21641 = !DILocation(line: 52, column: 11, scope: !21640)
!21642 = !DILocation(line: 52, column: 27, scope: !21640)
!21643 = !DILocation(line: 52, column: 31, scope: !21640)
!21644 = !DILocation(line: 52, column: 24, scope: !21640)
!21645 = !DILocation(line: 53, column: 7, scope: !21640)
!21646 = !DILocation(line: 53, column: 10, scope: !21640)
!21647 = !DILocation(line: 53, column: 14, scope: !21640)
!21648 = !DILocation(line: 53, column: 31, scope: !21640)
!21649 = !DILocation(line: 53, column: 35, scope: !21640)
!21650 = !DILocation(line: 53, column: 28, scope: !21640)
!21651 = !DILocation(line: 54, column: 7, scope: !21640)
!21652 = !DILocation(line: 54, column: 10, scope: !21640)
!21653 = !DILocation(line: 54, column: 14, scope: !21640)
!21654 = !DILocation(line: 54, column: 28, scope: !21640)
!21655 = !DILocation(line: 52, column: 7, scope: !21628)
!21656 = !DILocalVariable(name: "pos", scope: !21657, file: !21629, line: 117, type: !1841)
!21657 = distinct !DILexicalBlock(scope: !21640, file: !21629, line: 113, column: 5)
!21658 = !DILocation(line: 117, column: 13, scope: !21657)
!21659 = !DILocation(line: 117, column: 34, scope: !21657)
!21660 = !DILocation(line: 117, column: 26, scope: !21657)
!21661 = !DILocation(line: 117, column: 39, scope: !21657)
!21662 = !DILocation(line: 117, column: 47, scope: !21657)
!21663 = !DILocation(line: 117, column: 19, scope: !21657)
!21664 = !DILocation(line: 118, column: 11, scope: !21665)
!21665 = distinct !DILexicalBlock(scope: !21657, file: !21629, line: 118, column: 11)
!21666 = !DILocation(line: 118, column: 15, scope: !21665)
!21667 = !DILocation(line: 118, column: 11, scope: !21657)
!21668 = !DILocation(line: 124, column: 11, scope: !21669)
!21669 = distinct !DILexicalBlock(scope: !21665, file: !21629, line: 119, column: 9)
!21670 = !DILocation(line: 129, column: 7, scope: !21657)
!21671 = !DILocation(line: 129, column: 11, scope: !21657)
!21672 = !DILocation(line: 129, column: 18, scope: !21657)
!21673 = !DILocation(line: 130, column: 21, scope: !21657)
!21674 = !DILocation(line: 130, column: 7, scope: !21657)
!21675 = !DILocation(line: 130, column: 11, scope: !21657)
!21676 = !DILocation(line: 130, column: 19, scope: !21657)
!21677 = !DILocation(line: 161, column: 7, scope: !21657)
!21678 = !DILocation(line: 163, column: 18, scope: !21628)
!21679 = !DILocation(line: 163, column: 22, scope: !21628)
!21680 = !DILocation(line: 163, column: 30, scope: !21628)
!21681 = !DILocation(line: 163, column: 10, scope: !21628)
!21682 = !DILocation(line: 163, column: 3, scope: !21628)
!21683 = !DILocation(line: 164, column: 1, scope: !21628)
