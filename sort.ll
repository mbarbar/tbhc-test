; ModuleID = 'sort.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.infomap = type { i8*, i8* }
%struct.__sigset_t = type { [16 x i64] }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.keyfield = type { i64, i64, i64, i64, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %struct.keyfield* }
%struct.line = type { i8*, i64, i8*, i8* }
%struct.tempnode = type { %struct.tempnode*, i32, i8, [0 x i8] }
%struct.hash_table = type { %struct.hash_entry*, %struct.hash_entry*, i64, i64, i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*, %struct.hash_entry* }
%struct.hash_tuning = type { float, float, float, float, i8 }
%struct.hash_entry = type { i8*, %struct.hash_entry* }
%struct.month = type { i8*, i32 }
%struct.md5_ctx = type { i32, i32, i32, i32, [2 x i32], i32, [32 x i32] }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.Tokens = type { i64, i8**, i64*, %struct.obstack, %struct.obstack, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, %union.anon, i64, %union.anon.0, %union.anon.1, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [0 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i8* (i64)* }
%union.anon.1 = type { void (i8*)* }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.sigaction = type { %union.anon.2, %struct.__sigset_t, i32, void ()* }
%union.anon.2 = type { void (i32)* }
%struct.sortfile = type { i8*, %struct.tempnode* }
%struct.cs_status = type { i8, %struct.__sigset_t }
%struct.randread_source = type { %struct._IO_FILE*, void (i8*)*, i8*, %union.anon.22 }
%union.anon.22 = type { %struct.isaac }
%struct.isaac = type { i64, %struct.isaac_state, %union.anon.0.21 }
%struct.isaac_state = type { [256 x i64], i64, i64, i64 }
%union.anon.0.21 = type { [256 x i64] }
%struct.buffer = type { i8*, i64, i64, i64, i64, i64, i8 }
%struct.merge_node_queue = type { %struct.heap*, %union.pthread_mutex_t, %union.pthread_cond_t }
%struct.heap = type { i8**, i64, i64, i32 (i8*, i8*)* }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.anon.13 }
%struct.anon.13 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%struct.merge_node = type { %struct.line*, %struct.line*, %struct.line*, %struct.line*, %struct.line**, i64, i64, %struct.merge_node*, %struct.merge_node*, %struct.merge_node*, i32, i8, %union.pthread_mutex_t }
%union.anon.11 = type { i32 }
%struct.thread_args = type { %struct.line*, i64, i64, %struct.merge_node*, %struct.merge_node_queue*, %struct._IO_FILE*, i8* }
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.__mbstate_t = type { i32, %union.anon.11 }
%struct.sysinfo = type { i64, [3 x i64], i64, i64, i64, i64, i64, i64, i16, i16, i64, i64, i32, [0 x i8] }
%struct.timezone = type { i32, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8, !ctir !0
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"Usage: %s [OPTION]... [FILE]...\0A  or:  %s [OPTION]... --files0-from=F\0A\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"Write sorted concatenation of all FILE(s) to standard output.\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8, !ctir !0
@.str.3 = private unnamed_addr constant [20 x i8] c"Ordering options:\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [204 x i8] c"  -b, --ignore-leading-blanks  ignore leading blanks\0A  -d, --dictionary-order      consider only blanks and alphanumeric characters\0A  -f, --ignore-case           fold lower case to upper case characters\0A\00", align 1
@.str.5 = private unnamed_addr constant [211 x i8] c"  -g, --general-numeric-sort  compare according to general numerical value\0A  -i, --ignore-nonprinting    consider only printable characters\0A  -M, --month-sort            compare (unknown) < 'JAN' < ... < 'DEC'\0A\00", align 1
@.str.6 = private unnamed_addr constant [76 x i8] c"  -h, --human-numeric-sort    compare human readable numbers (e.g., 2K 1G)\0A\00", align 1
@.str.7 = private unnamed_addr constant [274 x i8] c"  -n, --numeric-sort          compare according to string numerical value\0A  -R, --random-sort           shuffle, but group identical keys.  See shuf(1)\0A      --random-source=FILE    get random bytes from FILE\0A  -r, --reverse               reverse the result of comparisons\0A\00", align 1
@.str.8 = private unnamed_addr constant [278 x i8] c"      --sort=WORD             sort according to WORD:\0A                                general-numeric -g, human-numeric -h, month -M,\0A                                numeric -n, random -R, version -V\0A  -V, --version-sort          natural sort of (version) numbers within text\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"Other options:\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [118 x i8] c"      --batch-size=NMERGE   merge at most NMERGE inputs at once;\0A                            for more use temp files\0A\00", align 1
@.str.11 = private unnamed_addr constant [277 x i8] c"  -c, --check, --check=diagnose-first  check for sorted input; do not sort\0A  -C, --check=quiet, --check=silent  like -c, but do not report first bad line\0A      --compress-program=PROG  compress temporaries with PROG;\0A                              decompress them with PROG -d\0A\00", align 1
@.str.12 = private unnamed_addr constant [348 x i8] c"      --debug               annotate the part of the line used to sort,\0A                              and warn about questionable usage to stderr\0A      --files0-from=F       read input from the files specified by\0A                            NUL-terminated names in file F;\0A                            If F is - then read names from standard input\0A\00", align 1
@.str.13 = private unnamed_addr constant [144 x i8] c"  -k, --key=KEYDEF          sort via a key; KEYDEF gives location and type\0A  -m, --merge               merge already sorted files; do not sort\0A\00", align 1
@.str.14 = private unnamed_addr constant [216 x i8] c"  -o, --output=FILE         write result to FILE instead of standard output\0A  -s, --stable              stabilize sort by disabling last-resort comparison\0A  -S, --buffer-size=SIZE    use SIZE for main memory buffer\0A\00", align 1
@.str.15 = private unnamed_addr constant [453 x i8] c"  -t, --field-separator=SEP  use SEP instead of non-blank to blank transition\0A  -T, --temporary-directory=DIR  use DIR for temporaries, not $TMPDIR or %s;\0A                              multiple options specify multiple directories\0A      --parallel=N          change the number of sorts run concurrently to N\0A  -u, --unique              with -c, check for strict ordering;\0A                              without -c, output only the first of an equal run\0A\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"/tmp\00", align 1
@.str.17 = private unnamed_addr constant [64 x i8] c"  -z, --zero-terminated     line delimiter is NUL, not newline\0A\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.19 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.20 = private unnamed_addr constant [604 x i8] c"\0AKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a\0Afield number and C a character position in the field; both are origin 1, and\0Athe stop position defaults to the line's end.  If neither -t nor -b is in\0Aeffect, characters in a field are counted from the beginning of the preceding\0Awhitespace.  OPTS is one or more single-letter ordering options [bdfgiMhnRrV],\0Awhich override global ordering options for that key.  If no key is given, use\0Athe entire line as the key.  Use --debug to diagnose incorrect key usage.\0A\0ASIZE may be followed by the following multiplicative suffixes:\0A\00", align 1
@.str.21 = private unnamed_addr constant [229 x i8] c"% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.\0A\0A*** WARNING ***\0AThe locale specified by the environment affects sort order.\0ASet LC_ALL=C to get the traditional sort order that uses\0Anative byte values.\0A\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.69, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.70, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.76 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.46 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.77 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.79 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.80 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.81 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.82 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.24 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.68 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.69 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.70 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.72 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.67 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.66 = private unnamed_addr constant [56 x i8] c"\0AWith no FILE, or when FILE is -, read standard input.\0A\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@hard_LC_COLLATE = internal global i8 0, align 1, !dbg !60, !ctir !162
@hard_LC_TIME = internal global i8 0, align 1, !dbg !723, !ctir !162
@decimal_point = internal global i32 0, align 4, !dbg !719, !ctir !5
@thousands_sep = internal global i32 0, align 4, !dbg !721, !ctir !5
@have_read_stdin = internal global i8 0, align 1, !dbg !735, !ctir !162
@caught_signals = internal global %struct.__sigset_t zeroinitializer, align 8, !dbg !743, !ctir !214
@main.sig = internal constant [11 x i32] [i32 14, i32 1, i32 2, i32 13, i32 3, i32 15, i32 29, i32 27, i32 26, i32 24, i32 25], align 16, !dbg !710
@optind = external dso_local global i32, align 4, !ctir !5
@short_options = internal constant [31 x i8] c"-bcCdfghik:mMno:rRsS:t:T:uVy:z\00", align 16, !dbg !757, !ctir !314
@long_options = internal constant [31 x %struct.option] [%struct.option { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.95, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), i32 2, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.97, i32 0, i32 0), i32 1, i32* null, i32 129 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.98, i32 0, i32 0), i32 0, i32* null, i32 130 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.99, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.100, i32 0, i32 0), i32 0, i32* null, i32 102 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i32 1, i32* null, i32 131 }, %struct.option { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.102, i32 0, i32 0), i32 0, i32* null, i32 103 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.103, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.104, i32 0, i32 0), i32 1, i32* null, i32 107 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.105, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.106, i32 0, i32 0), i32 0, i32* null, i32 77 }, %struct.option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.107, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.108, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.111, i32 0, i32 0), i32 1, i32* null, i32 133 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i32 1, i32* null, i32 134 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0), i32 1, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.113, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.114, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i32 0, i32 0), i32 1, i32* null, i32 132 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.116, i32 0, i32 0), i32 1, i32* null, i32 83 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.117, i32 0, i32 0), i32 1, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.118, i32 0, i32 0), i32 1, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.120, i32 0, i32 0), i32 0, i32* null, i32 122 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.121, i32 0, i32 0), i32 1, i32* null, i32 135 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.123, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !759, !ctir !317
@optarg = external dso_local global i8*, align 8, !ctir !7
@.str.27 = private unnamed_addr constant [25 x i8] c"invalid number after '-'\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"src/sort.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"invalid number after '.'\00", align 1
@.str.31 = private unnamed_addr constant [30 x i8] c"stray character in field spec\00", align 1
@.str.32 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@sort_args = internal constant [7 x i8*] [i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.123, i32 0, i32 0), i8* null], align 16, !dbg !763, !ctir !346
@sort_types = internal constant [6 x i8] c"ghMnRV", align 1, !dbg !761, !ctir !340
@.str.33 = private unnamed_addr constant [8 x i8] c"--check\00", align 1
@check_args = internal constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.133, i32 0, i32 0), i8* null], align 16, !dbg !767, !ctir !356
@check_types = internal constant [3 x i8] c"CCc", align 1, !dbg !765, !ctir !350
@.str.34 = private unnamed_addr constant [3 x i8] c"cC\00", align 1
@compress_program = internal global i8* null, align 8, !dbg !739, !ctir !90
@.str.35 = private unnamed_addr constant [37 x i8] c"multiple compress programs specified\00", align 1
@debug = internal global i8 0, align 1, !dbg !741, !ctir !162
@.str.36 = private unnamed_addr constant [30 x i8] c"invalid number at field start\00", align 1
@.str.37 = private unnamed_addr constant [21 x i8] c"field number is zero\00", align 1
@.str.38 = private unnamed_addr constant [25 x i8] c"character offset is zero\00", align 1
@.str.39 = private unnamed_addr constant [25 x i8] c"invalid number after ','\00", align 1
@.str.40 = private unnamed_addr constant [32 x i8] c"multiple output files specified\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"multiple random sources specified\00", align 1
@stable = internal global i8 0, align 1, !dbg !731, !ctir !162
@.str.42 = private unnamed_addr constant [10 x i8] c"empty tab\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"\5C0\00", align 1
@.str.44 = private unnamed_addr constant [23 x i8] c"multi-character tab %s\00", align 1
@tab = internal global i32 128, align 4, !dbg !769, !ctir !5
@.str.45 = private unnamed_addr constant [18 x i8] c"incompatible tabs\00", align 1
@unique = internal global i8 0, align 1, !dbg !733, !ctir !162
@eolchar = internal global i8 10, align 1, !dbg !775, !ctir !8
@.str.47 = private unnamed_addr constant [13 x i8] c"Mike Haertel\00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c"Paul Eggert\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.51 = private unnamed_addr constant [52 x i8] c"file operands cannot be combined with --files0-from\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.53 = private unnamed_addr constant [31 x i8] c"cannot read file names from %s\00", align 1
@.str.54 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.55 = private unnamed_addr constant [63 x i8] c"when reading file names from stdin, no file name of %s allowed\00", align 1
@.str.56 = private unnamed_addr constant [38 x i8] c"%s:%lu: invalid zero-length file name\00", align 1
@.str.57 = private unnamed_addr constant [17 x i8] c"no input from %s\00", align 1
@keylist = internal global %struct.keyfield* null, align 8, !dbg !737, !ctir !152
@main.opts = internal global [10 x i8] c"X --debug\00", align 1, !dbg !715
@.str.59 = private unnamed_addr constant [21 x i8] c"failed to set locale\00", align 1
@.str.58 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.60 = private unnamed_addr constant [47 x i8] c"text ordering performed using %s sorting rules\00", align 1
@.str.61 = private unnamed_addr constant [53 x i8] c"text ordering performed using simple byte comparison\00", align 1
@reverse = internal global i8 0, align 1, !dbg !729, !ctir !162
@temp_dir_count = internal global i64 0, align 8, !dbg !727, !ctir !52
@.str.62 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@sort_size = internal global i64 0, align 8, !dbg !725, !ctir !52
@nmerge = internal global i32 16, align 4, !dbg !786, !ctir !66
@.str.63 = private unnamed_addr constant [38 x i8] c"extra operand %s not allowed with -%c\00", align 1
@main.opts.64 = internal global [3 x i8] c"\00o\00", align 1, !dbg !717
@stdin = external dso_local global %struct._IO_FILE*, align 8, !ctir !0
@.str.65 = private unnamed_addr constant [13 x i8] c"close failed\00", align 1
@.str.181 = private unnamed_addr constant [16 x i8] c"standard output\00", align 1
@.str.180 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@saved_line = internal global %struct.line zeroinitializer, align 8, !dbg !810, !ctir !541
@.str.167 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@temphead = internal global %struct.tempnode* null, align 8, !dbg !755, !ctir !411
@nprocs = internal global i32 0, align 4, !dbg !794, !ctir !413
@.str.171 = private unnamed_addr constant [20 x i8] c"waiting for %s [-d]\00", align 1
@.str.172 = private unnamed_addr constant [30 x i8] c"%s [-d] terminated abnormally\00", align 1
@proctab = internal global %struct.hash_table* null, align 8, !dbg !792, !ctir !589
@.str.164 = private unnamed_addr constant [13 x i8] c"write failed\00", align 1
@blanks = internal global [256 x i8] zeroinitializer, align 16, !dbg !745, !ctir !448
@unit_order = internal constant <{ [108 x i8], [148 x i8] }> <{ [108 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\06\00\03\00\00\00\01\00\02\00\00\05\00\00\00\04\00\00\00\00\08\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [148 x i8] zeroinitializer }>, align 16, !dbg !790, !ctir !558
@.str.165 = private unnamed_addr constant [20 x i8] c"^ no match for key\0A\00", align 1
@monthtab = internal global [12 x %struct.month] [%struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.83, i32 0, i32 0), i32 4 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i32 8 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85, i32 0, i32 0), i32 12 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.86, i32 0, i32 0), i32 2 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.87, i32 0, i32 0), i32 1 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i32 0, i32 0), i32 7 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i32 0, i32 0), i32 6 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i32 0, i32 0), i32 3 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i32 0, i32 0), i32 5 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i32 0, i32 0), i32 11 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i32 10 }, %struct.month { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94, i32 0, i32 0), i32 9 }], align 16, !dbg !753, !ctir !454
@fold_toupper = internal global [256 x i8] zeroinitializer, align 16, !dbg !751, !ctir !453
@.str.83 = private unnamed_addr constant [4 x i8] c"APR\00", align 1
@.str.84 = private unnamed_addr constant [4 x i8] c"AUG\00", align 1
@.str.85 = private unnamed_addr constant [4 x i8] c"DEC\00", align 1
@.str.86 = private unnamed_addr constant [4 x i8] c"FEB\00", align 1
@.str.87 = private unnamed_addr constant [4 x i8] c"JAN\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c"JUL\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"JUN\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"MAR\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"MAY\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"NOV\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c"OCT\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"SEP\00", align 1
@random_md5_state = internal global %struct.md5_ctx zeroinitializer, align 4, !dbg !784, !ctir !563
@.str.161 = private unnamed_addr constant [29 x i8] c"string transformation failed\00", align 1
@.str.162 = private unnamed_addr constant [42 x i8] c"set LC_ALL='C' to work around the problem\00", align 1
@.str.163 = private unnamed_addr constant [32 x i8] c"the untransformed string was %s\00", align 1
@.str.176 = private unnamed_addr constant [34 x i8] c"couldn't execute compress program\00", align 1
@.str.177 = private unnamed_addr constant [31 x i8] c"couldn't create temporary file\00", align 1
@.str.173 = private unnamed_addr constant [9 x i8] c": errno \00", align 1
@.str.174 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@temp_dirs = internal global i8** null, align 8, !dbg !773, !ctir !481
@create_temp_file.temp_dir_index = internal global i64 0, align 8, !dbg !803
@create_temp_file.slashbase = internal constant [12 x i8] c"/sortXXXXXX\00", align 1, !dbg !798
@temptail = internal global %struct.tempnode** @temphead, align 8, !dbg !796, !ctir !619
@.str.178 = private unnamed_addr constant [35 x i8] c"cannot create temporary file in %s\00", align 1
@merge_buffer_size = internal global i64 262144, align 8, !dbg !788, !ctir !52
@.str.159 = private unnamed_addr constant [12 x i8] c"read failed\00", align 1
@.str.179 = private unnamed_addr constant [12 x i8] c"stat failed\00", align 1
@sort_buffer_size.size_bound = internal global i64 0, align 8, !dbg !805
@.str.142 = private unnamed_addr constant [12 x i8] c"open failed\00", align 1
@.str.175 = private unnamed_addr constant [27 x i8] c"warning: cannot remove: %s\00", align 1
@.str.143 = private unnamed_addr constant [21 x i8] c"%s: error truncating\00", align 1
@.str.144 = private unnamed_addr constant [41 x i8] c"!\22unexpected mode passed to stream_open\22\00", align 1
@__PRETTY_FUNCTION__.stream_open = private unnamed_addr constant [46 x i8] c"FILE *stream_open(const char *, const char *)\00", align 1
@get_outstatus.outstat_errno = internal global i32 0, align 4, !dbg !777
@get_outstatus.outstat = internal global %struct.stat zeroinitializer, align 8, !dbg !782
@.str.168 = private unnamed_addr constant [34 x i8] c"couldn't create process for %s -d\00", align 1
@.str.169 = private unnamed_addr constant [3 x i8] c"-d\00", align 1
@.str.170 = private unnamed_addr constant [44 x i8] c"couldn't execute compress program (with -d)\00", align 1
@.str.166 = private unnamed_addr constant [12 x i8] c"cannot read\00", align 1
@.str.157 = private unnamed_addr constant [22 x i8] c"%s: %s:%s: disorder: \00", align 1
@.str.158 = private unnamed_addr constant [15 x i8] c"standard error\00", align 1
@.str.146 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"-k \00", align 1
@.str.148 = private unnamed_addr constant [3 x i8] c" -\00", align 1
@.str.149 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.150 = private unnamed_addr constant [45 x i8] c"obsolescent key %s used; consider %s instead\00", align 1
@.str.151 = private unnamed_addr constant [43 x i8] c"key %lu has zero width and will be ignored\00", align 1
@.str.152 = private unnamed_addr constant [72 x i8] c"leading blanks are significant in key %lu; consider also specifying 'b'\00", align 1
@.str.153 = private unnamed_addr constant [45 x i8] c"key %lu is numeric and spans multiple fields\00", align 1
@.str.154 = private unnamed_addr constant [24 x i8] c"option '-%s' is ignored\00", align 1
@.str.155 = private unnamed_addr constant [26 x i8] c"options '-%s' are ignored\00", align 1
@.str.156 = private unnamed_addr constant [51 x i8] c"option '-r' only applies to last-resort comparison\00", align 1
@nondictionary = internal global [256 x i8] zeroinitializer, align 16, !dbg !749, !ctir !448
@nonprinting = internal global [256 x i8] zeroinitializer, align 16, !dbg !747, !ctir !448
@.str.145 = private unnamed_addr constant [14 x i8] c"fflush failed\00", align 1
@.str.141 = private unnamed_addr constant [35 x i8] c"number in parallel must be nonzero\00", align 1
@temp_dir_alloc = internal global i64 0, align 8, !dbg !771, !ctir !52
@.str.140 = private unnamed_addr constant [13 x i8] c"EgGkKmMPtTYZ\00", align 1
@.str.135 = private unnamed_addr constant [25 x i8] c"invalid --%s argument %s\00", align 1
@.str.136 = private unnamed_addr constant [28 x i8] c"minimum --%s argument is %s\00", align 1
@.str.137 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.138 = private unnamed_addr constant [27 x i8] c"--%s argument %s too large\00", align 1
@.str.139 = private unnamed_addr constant [48 x i8] c"maximum --%s argument with current rlimit is %s\00", align 1
@.str.134 = private unnamed_addr constant [31 x i8] c"options '-%s' are incompatible\00", align 1
@.str.131 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.132 = private unnamed_addr constant [7 x i8] c"silent\00", align 1
@.str.133 = private unnamed_addr constant [15 x i8] c"diagnose-first\00", align 1
@.str.126 = private unnamed_addr constant [16 x i8] c"general-numeric\00", align 1
@.str.127 = private unnamed_addr constant [14 x i8] c"human-numeric\00", align 1
@.str.128 = private unnamed_addr constant [6 x i8] c"month\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"numeric\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@.str.123 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.125 = private unnamed_addr constant [35 x i8] c"%s: invalid field specification %s\00", align 1
@.str.124 = private unnamed_addr constant [33 x i8] c"%s: invalid count at start of %s\00", align 1
@.str.95 = private unnamed_addr constant [22 x i8] c"ignore-leading-blanks\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"check\00", align 1
@.str.97 = private unnamed_addr constant [17 x i8] c"compress-program\00", align 1
@.str.98 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.99 = private unnamed_addr constant [17 x i8] c"dictionary-order\00", align 1
@.str.100 = private unnamed_addr constant [12 x i8] c"ignore-case\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"files0-from\00", align 1
@.str.102 = private unnamed_addr constant [21 x i8] c"general-numeric-sort\00", align 1
@.str.103 = private unnamed_addr constant [19 x i8] c"ignore-nonprinting\00", align 1
@.str.104 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.105 = private unnamed_addr constant [6 x i8] c"merge\00", align 1
@.str.106 = private unnamed_addr constant [11 x i8] c"month-sort\00", align 1
@.str.107 = private unnamed_addr constant [13 x i8] c"numeric-sort\00", align 1
@.str.108 = private unnamed_addr constant [19 x i8] c"human-numeric-sort\00", align 1
@.str.109 = private unnamed_addr constant [13 x i8] c"version-sort\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"random-sort\00", align 1
@.str.111 = private unnamed_addr constant [14 x i8] c"random-source\00", align 1
@.str.112 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.113 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.114 = private unnamed_addr constant [7 x i8] c"stable\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"batch-size\00", align 1
@.str.116 = private unnamed_addr constant [12 x i8] c"buffer-size\00", align 1
@.str.117 = private unnamed_addr constant [16 x i8] c"field-separator\00", align 1
@.str.118 = private unnamed_addr constant [20 x i8] c"temporary-directory\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"unique\00", align 1
@.str.120 = private unnamed_addr constant [16 x i8] c"zero-terminated\00", align 1
@.str.121 = private unnamed_addr constant [9 x i8] c"parallel\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@Version = dso_local global i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.64, i32 0, i32 0), align 8, !dbg !812, !ctir !90
@.str.64 = private unnamed_addr constant [21 x i8] c"8.31.48-f2dfea-dirty\00", align 1
@argmatch_die = dso_local global void ()* @__argmatch_die, align 8, !dbg !818, !ctir !348
@.str.160 = private unnamed_addr constant [27 x i8] c"invalid argument %s for %s\00", align 1
@.str.1.161 = private unnamed_addr constant [29 x i8] c"ambiguous argument %s for %s\00", align 1
@.str.2.162 = private unnamed_addr constant [21 x i8] c"Valid arguments are:\00", align 1
@.str.3.163 = private unnamed_addr constant [8 x i8] c"\0A  - %s\00", align 1
@.str.4.164 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@file_name = internal global i8* null, align 8, !dbg !865, !ctir !90
@ignore_EPIPE = internal global i8 0, align 1, !dbg !909, !ctir !162
@.str.182 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.1.183 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.184 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fillbuf.189 = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16, !dbg !912, !ctir !918
@.str.190 = private unnamed_addr constant [4 x i8] c"md5\00", align 1
@exit_failure = dso_local global i32 1, align 4, !dbg !926, !ctir !447
@.str.199 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.200 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.203 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.204 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.205 = private unnamed_addr constant [24 x i8] c"# entries:         %lu\0A\00", align 1
@.str.1.206 = private unnamed_addr constant [24 x i8] c"# buckets:         %lu\0A\00", align 1
@.str.2.207 = private unnamed_addr constant [33 x i8] c"# buckets used:    %lu (%.2f%%)\0A\00", align 1
@.str.3.208 = private unnamed_addr constant [24 x i8] c"max bucket length: %lu\0A\00", align 1
@default_tuning = internal constant %struct.hash_tuning { float 0.000000e+00, float 1.000000e+00, float 0x3FE99999A0000000, float 0x3FF69FBE80000000, i8 0 }, align 4, !dbg !933, !ctir !957
@.str.231 = private unnamed_addr constant [16 x i8] c"OMP_NUM_THREADS\00", align 1
@.str.1.232 = private unnamed_addr constant [17 x i8] c"OMP_THREAD_LIMIT\00", align 1
@rpl_pipe2.have_pipe2_really = internal global i32 0, align 4, !dbg !986
@.str.241 = private unnamed_addr constant [16 x i8] c"_POSIX2_VERSION\00", align 1
@program_name = dso_local global i8* null, align 8, !dbg !996, !ctir !90
@.str.246 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.247 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.248 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8, !ctir !7
@program_invocation_name = external dso_local global i8*, align 8, !ctir !7
@quoting_style_args = dso_local constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.249, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.250, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.251, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.252, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.253, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.254, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.255, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.256, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.257, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.258, i32 0, i32 0), i8* null], align 16, !dbg !1041, !ctir !1061
@.str.249 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.250 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.251 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.252 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.253 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.254 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.255 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.256 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.257 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.258 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16, !dbg !1099, !ctir !1062
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !1101, !ctir !1065
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !1103, !ctir !1065
@.str.10.259 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.260 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.261 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.262 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.263 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.264 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.265 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.266 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.267 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !1107, !ctir !1078
@nslots = internal global i32 1, align 4, !dbg !1109, !ctir !5
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !1105, !ctir !453
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !1111, !ctir !1079
@.str.282 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3.283 = private unnamed_addr constant [13 x i8] c"/dev/urandom\00", align 1
@.str.1.284 = private unnamed_addr constant [16 x i8] c"%s: end of file\00", align 1
@.str.2.285 = private unnamed_addr constant [15 x i8] c"%s: read error\00", align 1
@.str.305 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.306 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.307 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.308 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.309 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.310 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.311 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.312 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.313 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.314 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.315 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.316 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.317 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.318 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.319 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.320 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.16.323 = private unnamed_addr constant [20 x i8] c"Report bugs to: %s\0A\00", align 1
@.str.17.324 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.18.325 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.19.326 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.20.327 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.21.328 = private unnamed_addr constant [39 x i8] c"General help using GNU software: <%s>\0A\00", align 1
@.str.22.329 = private unnamed_addr constant [29 x i8] c"https://www.gnu.org/gethelp/\00", align 1
@version_etc_copyright = dso_local constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !1113, !ctir !1118
@.str.1.348 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.349 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.350 = private unnamed_addr constant [25 x i8] c"string comparison failed\00", align 1
@.str.1.351 = private unnamed_addr constant [43 x i8] c"Set LC_ALL='C' to work around the problem.\00", align 1
@.str.2.352 = private unnamed_addr constant [37 x i8] c"The strings compared were %s and %s.\00", align 1
@.str.359 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.360 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.363 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.1.364 = private unnamed_addr constant [27 x i8] c"invalid %s%s argument '%s'\00", align 1
@.str.2.365 = private unnamed_addr constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00", align 1
@.str.3.366 = private unnamed_addr constant [29 x i8] c"%s%s argument '%s' too large\00", align 1
@.str.369 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.370 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoumax = private unnamed_addr constant [79 x i8] c"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\00", align 1
@rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec = internal global i32 0, align 4, !dbg !1121
@obstack_alloc_failed_handler = dso_local global void ()* @print_and_abort, align 8, !dbg !1141, !ctir !234
@.str.1.389 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.390 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.421 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.422 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @usage(i32 %status) #0 !dbg !1726 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !1727, metadata !DIExpression()), !dbg !1728
  %0 = load i32, i32* %status.addr, align 4, !dbg !1729
  %cmp = icmp ne i32 %0, 0, !dbg !1731
  br i1 %cmp, label %if.then, label %if.else, !dbg !1732

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !1733

do.body:                                          ; preds = %if.then
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1734
  %call = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #12, !dbg !1734
  %2 = load i8*, i8** @program_name, align 8, !dbg !1734
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* %call, i8* %2), !dbg !1734
  br label %do.end, !dbg !1734

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !1734

if.else:                                          ; preds = %entry
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0)) #12, !dbg !1736
  %3 = load i8*, i8** @program_name, align 8, !dbg !1738
  %4 = load i8*, i8** @program_name, align 8, !dbg !1739
  %call3 = call i32 (i8*, ...) @printf(i8* %call2, i8* %3, i8* %4), !dbg !1740
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #12, !dbg !1741
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1741
  %call5 = call i32 @fputs_unlocked(i8* %call4, %struct._IO_FILE* %5), !dbg !1741
  call void @emit_stdin_note(), !dbg !1742
  call void @emit_mandatory_arg_note(), !dbg !1743
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #12, !dbg !1744
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1744
  %call7 = call i32 @fputs_unlocked(i8* %call6, %struct._IO_FILE* %6), !dbg !1744
  %call8 = call i8* @gettext(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.4, i64 0, i64 0)) #12, !dbg !1745
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1745
  %call9 = call i32 @fputs_unlocked(i8* %call8, %struct._IO_FILE* %7), !dbg !1745
  %call10 = call i8* @gettext(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.5, i64 0, i64 0)) #12, !dbg !1746
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1746
  %call11 = call i32 @fputs_unlocked(i8* %call10, %struct._IO_FILE* %8), !dbg !1746
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.6, i64 0, i64 0)) #12, !dbg !1747
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1747
  %call13 = call i32 @fputs_unlocked(i8* %call12, %struct._IO_FILE* %9), !dbg !1747
  %call14 = call i8* @gettext(i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.7, i64 0, i64 0)) #12, !dbg !1748
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1748
  %call15 = call i32 @fputs_unlocked(i8* %call14, %struct._IO_FILE* %10), !dbg !1748
  %call16 = call i8* @gettext(i8* getelementptr inbounds ([278 x i8], [278 x i8]* @.str.8, i64 0, i64 0)) #12, !dbg !1749
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1749
  %call17 = call i32 @fputs_unlocked(i8* %call16, %struct._IO_FILE* %11), !dbg !1749
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #12, !dbg !1750
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1750
  %call19 = call i32 @fputs_unlocked(i8* %call18, %struct._IO_FILE* %12), !dbg !1750
  %call20 = call i8* @gettext(i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.10, i64 0, i64 0)) #12, !dbg !1751
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1751
  %call21 = call i32 @fputs_unlocked(i8* %call20, %struct._IO_FILE* %13), !dbg !1751
  %call22 = call i8* @gettext(i8* getelementptr inbounds ([277 x i8], [277 x i8]* @.str.11, i64 0, i64 0)) #12, !dbg !1752
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1752
  %call23 = call i32 @fputs_unlocked(i8* %call22, %struct._IO_FILE* %14), !dbg !1752
  %call24 = call i8* @gettext(i8* getelementptr inbounds ([348 x i8], [348 x i8]* @.str.12, i64 0, i64 0)) #12, !dbg !1753
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1753
  %call25 = call i32 @fputs_unlocked(i8* %call24, %struct._IO_FILE* %15), !dbg !1753
  %call26 = call i8* @gettext(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.13, i64 0, i64 0)) #12, !dbg !1754
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1754
  %call27 = call i32 @fputs_unlocked(i8* %call26, %struct._IO_FILE* %16), !dbg !1754
  %call28 = call i8* @gettext(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @.str.14, i64 0, i64 0)) #12, !dbg !1755
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1755
  %call29 = call i32 @fputs_unlocked(i8* %call28, %struct._IO_FILE* %17), !dbg !1755
  %call30 = call i8* @gettext(i8* getelementptr inbounds ([453 x i8], [453 x i8]* @.str.15, i64 0, i64 0)) #12, !dbg !1756
  %call31 = call i32 (i8*, ...) @printf(i8* %call30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0)), !dbg !1757
  %call32 = call i8* @gettext(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.17, i64 0, i64 0)) #12, !dbg !1758
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1758
  %call33 = call i32 @fputs_unlocked(i8* %call32, %struct._IO_FILE* %18), !dbg !1758
  %call34 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i64 0, i64 0)) #12, !dbg !1759
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1759
  %call35 = call i32 @fputs_unlocked(i8* %call34, %struct._IO_FILE* %19), !dbg !1759
  %call36 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i64 0, i64 0)) #12, !dbg !1760
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1760
  %call37 = call i32 @fputs_unlocked(i8* %call36, %struct._IO_FILE* %20), !dbg !1760
  %call38 = call i8* @gettext(i8* getelementptr inbounds ([604 x i8], [604 x i8]* @.str.20, i64 0, i64 0)) #12, !dbg !1761
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1761
  %call39 = call i32 @fputs_unlocked(i8* %call38, %struct._IO_FILE* %21), !dbg !1761
  %call40 = call i8* @gettext(i8* getelementptr inbounds ([229 x i8], [229 x i8]* @.str.21, i64 0, i64 0)) #12, !dbg !1762
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1762
  %call41 = call i32 @fputs_unlocked(i8* %call40, %struct._IO_FILE* %22), !dbg !1762
  call void @emit_ancillary_info(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)), !dbg !1763
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %23 = load i32, i32* %status.addr, align 4, !dbg !1764
  call void @exit(i32 %23) #13, !dbg !1765
  unreachable, !dbg !1765
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_stdin_note() #4 !dbg !1766 {
entry:
  %call = call i8* @gettext(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.66, i64 0, i64 0)) #12, !dbg !1767
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1767
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !1767
  ret void, !dbg !1768
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_mandatory_arg_note() #4 !dbg !1769 {
entry:
  %call = call i8* @gettext(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.67, i64 0, i64 0)) #12, !dbg !1770
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1770
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !1770
  ret void, !dbg !1771
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8* %program) #4 !dbg !430 {
entry:
  %program.addr = alloca i8*, align 8
  %infomap = alloca [7 x %struct.infomap], align 16, !ctir !426
  %node = alloca i8*, align 8, !ctir !90
  %map_prog = alloca %struct.infomap*, align 8, !ctir !437
  %lc_messages = alloca i8*, align 8, !ctir !90
  store i8* %program, i8** %program.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %program.addr, metadata !1772, metadata !DIExpression()), !dbg !1773
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %infomap, metadata !1774, metadata !DIExpression()), !dbg !1775
  %0 = bitcast [7 x %struct.infomap]* %infomap to i8*, !dbg !1775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %0, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !1775
  call void @llvm.dbg.declare(metadata i8** %node, metadata !1776, metadata !DIExpression()), !dbg !1777
  %1 = load i8*, i8** %program.addr, align 8, !dbg !1778
  store i8* %1, i8** %node, align 8, !dbg !1777
  call void @llvm.dbg.declare(metadata %struct.infomap** %map_prog, metadata !1779, metadata !DIExpression()), !dbg !1780
  %arraydecay = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %infomap, i64 0, i64 0, !dbg !1781, !ctir !426
  store %struct.infomap* %arraydecay, %struct.infomap** %map_prog, align 8, !dbg !1780
  br label %while.cond, !dbg !1782

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !1783
  %program1 = getelementptr inbounds %struct.infomap, %struct.infomap* %2, i32 0, i32 0, !dbg !1784, !ctir !427
  %3 = load i8*, i8** %program1, align 8, !dbg !1784, !ctir !90
  %tobool = icmp ne i8* %3, null, !dbg !1783
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !1785

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %program.addr, align 8, !dbg !1786
  %5 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !1786
  %program2 = getelementptr inbounds %struct.infomap, %struct.infomap* %5, i32 0, i32 0, !dbg !1786, !ctir !427
  %6 = load i8*, i8** %program2, align 8, !dbg !1786, !ctir !90
  %call = call i32 @strcmp(i8* %4, i8* %6) #14, !dbg !1786
  %cmp = icmp eq i32 %call, 0, !dbg !1786
  %lnot = xor i1 %cmp, true, !dbg !1787
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !1788
  br i1 %7, label %while.body, label %while.end, !dbg !1782

while.body:                                       ; preds = %land.end
  %8 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !1789
  %incdec.ptr = getelementptr inbounds %struct.infomap, %struct.infomap* %8, i32 1, !dbg !1789, !ctir !427
  store %struct.infomap* %incdec.ptr, %struct.infomap** %map_prog, align 8, !dbg !1789
  br label %while.cond, !dbg !1782, !llvm.loop !1790

while.end:                                        ; preds = %land.end
  %9 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !1791
  %node3 = getelementptr inbounds %struct.infomap, %struct.infomap* %9, i32 0, i32 1, !dbg !1793, !ctir !427
  %10 = load i8*, i8** %node3, align 8, !dbg !1793, !ctir !90
  %tobool4 = icmp ne i8* %10, null, !dbg !1791
  br i1 %tobool4, label %if.then, label %if.end, !dbg !1794

if.then:                                          ; preds = %while.end
  %11 = load %struct.infomap*, %struct.infomap** %map_prog, align 8, !dbg !1795
  %node5 = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 0, i32 1, !dbg !1796, !ctir !427
  %12 = load i8*, i8** %node5, align 8, !dbg !1796, !ctir !90
  store i8* %12, i8** %node, align 8, !dbg !1797
  br label %if.end, !dbg !1798

if.end:                                           ; preds = %if.then, %while.end
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.76, i64 0, i64 0)) #12, !dbg !1799
  %call7 = call i32 (i8*, ...) @printf(i8* %call6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.77, i64 0, i64 0)), !dbg !1800
  call void @llvm.dbg.declare(metadata i8** %lc_messages, metadata !1801, metadata !DIExpression()), !dbg !1802
  %call8 = call i8* @setlocale(i32 5, i8* null) #12, !dbg !1803
  store i8* %call8, i8** %lc_messages, align 8, !dbg !1802
  %13 = load i8*, i8** %lc_messages, align 8, !dbg !1804
  %tobool9 = icmp ne i8* %13, null, !dbg !1804
  br i1 %tobool9, label %land.lhs.true, label %if.end15, !dbg !1806

land.lhs.true:                                    ; preds = %if.end
  %14 = load i8*, i8** %lc_messages, align 8, !dbg !1807
  %call10 = call i32 @strncmp(i8* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.78, i64 0, i64 0), i64 3) #14, !dbg !1807
  %tobool11 = icmp ne i32 %call10, 0, !dbg !1807
  br i1 %tobool11, label %if.then12, label %if.end15, !dbg !1808

if.then12:                                        ; preds = %land.lhs.true
  %call13 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.79, i64 0, i64 0)) #12, !dbg !1809
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1809
  %call14 = call i32 @fputs_unlocked(i8* %call13, %struct._IO_FILE* %15), !dbg !1809
  br label %if.end15, !dbg !1811

if.end15:                                         ; preds = %if.then12, %land.lhs.true, %if.end
  %call16 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.80, i64 0, i64 0)) #12, !dbg !1812
  %16 = load i8*, i8** %program.addr, align 8, !dbg !1813
  %call17 = call i32 (i8*, ...) @printf(i8* %call16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.77, i64 0, i64 0), i8* %16), !dbg !1814
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.81, i64 0, i64 0)) #12, !dbg !1815
  %17 = load i8*, i8** %node, align 8, !dbg !1816
  %18 = load i8*, i8** %node, align 8, !dbg !1817
  %19 = load i8*, i8** %program.addr, align 8, !dbg !1818
  %cmp19 = icmp eq i8* %18, %19, !dbg !1819
  %20 = zext i1 %cmp19 to i64, !dbg !1817
  %cond = select i1 %cmp19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0), !dbg !1817
  %call20 = call i32 (i8*, ...) @printf(i8* %call18, i8* %17, i8* %cond), !dbg !1820
  ret void, !dbg !1821
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #4 !dbg !712 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %key = alloca %struct.keyfield*, align 8, !ctir !152
  %key_buf = alloca %struct.keyfield, align 8, !ctir !153
  %gkey = alloca %struct.keyfield, align 8, !ctir !153
  %gkey_only = alloca i8, align 1, !ctir !162
  %s = alloca i8*, align 8, !ctir !90
  %c = alloca i32, align 4, !ctir !5
  %checkonly = alloca i8, align 1, !ctir !8
  %mergeonly = alloca i8, align 1, !ctir !162
  %random_source = alloca i8*, align 8, !ctir !7
  %need_random = alloca i8, align 1, !ctir !162
  %nthreads = alloca i64, align 8, !ctir !52
  %nfiles = alloca i64, align 8, !ctir !52
  %posixly_correct = alloca i8, align 1, !ctir !162
  %posix_ver = alloca i32, align 4, !ctir !5
  %traditional_usage = alloca i8, align 1, !ctir !162
  %files = alloca i8**, align 8, !ctir !178
  %files_from = alloca i8*, align 8, !ctir !7
  %tok = alloca %struct.Tokens, align 8, !ctir !1822
  %outfile = alloca i8*, align 8, !ctir !90
  %locale_ok = alloca i8, align 1, !ctir !162
  %locale = alloca %struct.lconv*, align 8, !ctir !185
  %i = alloca i64, align 8, !ctir !52
  %act = alloca %struct.sigaction, align 8, !ctir !228
  %oi = alloca i32, align 4, !ctir !5
  %minus_pos_usage = alloca i8, align 1, !ctir !162
  %optarg1 = alloca i8*, align 8, !ctir !90
  %str = alloca [2 x i8], align 1, !ctir !330
  %newtab = alloca i8, align 1, !ctir !8
  %p = alloca i8*, align 8, !ctir !90
  %stream = alloca %struct._IO_FILE*, align 8, !ctir !389
  %i412 = alloca i64, align 8, !ctir !52
  %file_number = alloca i64, align 8, !ctir !54
  %tmp_dir = alloca i8*, align 8, !ctir !90
  %sortfiles = alloca %struct.sortfile*, align 8, !ctir !402
  %i600 = alloca i64, align 8, !ctir !52
  %np = alloca i64, align 8, !ctir !54
  %nthreads_max = alloca i64, align 8, !ctir !52
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !1864, metadata !DIExpression()), !dbg !1865
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !1866, metadata !DIExpression()), !dbg !1867
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !1868, metadata !DIExpression()), !dbg !1869
  call void @llvm.dbg.declare(metadata %struct.keyfield* %key_buf, metadata !1870, metadata !DIExpression()), !dbg !1871
  call void @llvm.dbg.declare(metadata %struct.keyfield* %gkey, metadata !1872, metadata !DIExpression()), !dbg !1873
  call void @llvm.dbg.declare(metadata i8* %gkey_only, metadata !1874, metadata !DIExpression()), !dbg !1875
  store i8 0, i8* %gkey_only, align 1, !dbg !1875
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1876, metadata !DIExpression()), !dbg !1877
  call void @llvm.dbg.declare(metadata i32* %c, metadata !1878, metadata !DIExpression()), !dbg !1879
  store i32 0, i32* %c, align 4, !dbg !1879
  call void @llvm.dbg.declare(metadata i8* %checkonly, metadata !1880, metadata !DIExpression()), !dbg !1881
  store i8 0, i8* %checkonly, align 1, !dbg !1881
  call void @llvm.dbg.declare(metadata i8* %mergeonly, metadata !1882, metadata !DIExpression()), !dbg !1883
  store i8 0, i8* %mergeonly, align 1, !dbg !1883
  call void @llvm.dbg.declare(metadata i8** %random_source, metadata !1884, metadata !DIExpression()), !dbg !1885
  store i8* null, i8** %random_source, align 8, !dbg !1885
  call void @llvm.dbg.declare(metadata i8* %need_random, metadata !1886, metadata !DIExpression()), !dbg !1887
  store i8 0, i8* %need_random, align 1, !dbg !1887
  call void @llvm.dbg.declare(metadata i64* %nthreads, metadata !1888, metadata !DIExpression()), !dbg !1889
  store i64 0, i64* %nthreads, align 8, !dbg !1889
  call void @llvm.dbg.declare(metadata i64* %nfiles, metadata !1890, metadata !DIExpression()), !dbg !1891
  store i64 0, i64* %nfiles, align 8, !dbg !1891
  call void @llvm.dbg.declare(metadata i8* %posixly_correct, metadata !1892, metadata !DIExpression()), !dbg !1893
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0)) #12, !dbg !1894
  %cmp = icmp ne i8* %call, null, !dbg !1895
  %frombool = zext i1 %cmp to i8, !dbg !1893
  store i8 %frombool, i8* %posixly_correct, align 1, !dbg !1893
  call void @llvm.dbg.declare(metadata i32* %posix_ver, metadata !1896, metadata !DIExpression()), !dbg !1897
  %call1 = call i32 @posix2_version(), !dbg !1898
  store i32 %call1, i32* %posix_ver, align 4, !dbg !1897
  call void @llvm.dbg.declare(metadata i8* %traditional_usage, metadata !1899, metadata !DIExpression()), !dbg !1900
  %0 = load i32, i32* %posix_ver, align 4, !dbg !1901
  %cmp2 = icmp sle i32 200112, %0, !dbg !1902
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !1903

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %posix_ver, align 4, !dbg !1904
  %cmp3 = icmp slt i32 %1, 200809, !dbg !1905
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !1906
  %lnot = xor i1 %2, true, !dbg !1907
  %frombool4 = zext i1 %lnot to i8, !dbg !1900
  store i8 %frombool4, i8* %traditional_usage, align 1, !dbg !1900
  call void @llvm.dbg.declare(metadata i8*** %files, metadata !1908, metadata !DIExpression()), !dbg !1909
  call void @llvm.dbg.declare(metadata i8** %files_from, metadata !1910, metadata !DIExpression()), !dbg !1911
  store i8* null, i8** %files_from, align 8, !dbg !1911
  call void @llvm.dbg.declare(metadata %struct.Tokens* %tok, metadata !1912, metadata !DIExpression()), !dbg !1913
  call void @llvm.dbg.declare(metadata i8** %outfile, metadata !1914, metadata !DIExpression()), !dbg !1915
  store i8* null, i8** %outfile, align 8, !dbg !1915
  call void @llvm.dbg.declare(metadata i8* %locale_ok, metadata !1916, metadata !DIExpression()), !dbg !1917
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !1918
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 0, !dbg !1918, !ctir !178
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !1918
  call void @set_program_name(i8* %4), !dbg !1919
  %call5 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)) #12, !dbg !1920
  %tobool = icmp ne i8* %call5, null, !dbg !1921
  %lnot6 = xor i1 %tobool, true, !dbg !1921
  %lnot7 = xor i1 %lnot6, true, !dbg !1922
  %frombool8 = zext i1 %lnot7 to i8, !dbg !1923
  store i8 %frombool8, i8* %locale_ok, align 1, !dbg !1923
  %call9 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0)) #12, !dbg !1924
  %call10 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0)) #12, !dbg !1925
  call void @initialize_exit_failure(i32 2), !dbg !1926
  %call11 = call zeroext i1 @hard_locale(i32 3), !dbg !1927
  %frombool12 = zext i1 %call11 to i8, !dbg !1928
  store i8 %frombool12, i8* @hard_LC_COLLATE, align 1, !dbg !1928
  %call13 = call zeroext i1 @hard_locale(i32 2), !dbg !1929
  %frombool14 = zext i1 %call13 to i8, !dbg !1930
  store i8 %frombool14, i8* @hard_LC_TIME, align 1, !dbg !1930
  call void @llvm.dbg.declare(metadata %struct.lconv** %locale, metadata !1931, metadata !DIExpression()), !dbg !1933
  %call15 = call %struct.lconv* @localeconv() #12, !dbg !1934
  store %struct.lconv* %call15, %struct.lconv** %locale, align 8, !dbg !1933
  %5 = load %struct.lconv*, %struct.lconv** %locale, align 8, !dbg !1935
  %decimal_point = getelementptr inbounds %struct.lconv, %struct.lconv* %5, i32 0, i32 0, !dbg !1936, !ctir !186
  %6 = load i8*, i8** %decimal_point, align 8, !dbg !1936, !ctir !7
  %arrayidx16 = getelementptr inbounds i8, i8* %6, i64 0, !dbg !1935, !ctir !7
  %7 = load i8, i8* %arrayidx16, align 1, !dbg !1935
  %call17 = call zeroext i8 @to_uchar(i8 signext %7), !dbg !1937
  %conv = zext i8 %call17 to i32, !dbg !1937
  store i32 %conv, i32* @decimal_point, align 4, !dbg !1938
  %8 = load i32, i32* @decimal_point, align 4, !dbg !1939
  %tobool18 = icmp ne i32 %8, 0, !dbg !1939
  br i1 %tobool18, label %lor.lhs.false, label %if.then, !dbg !1941

lor.lhs.false:                                    ; preds = %land.end
  %9 = load %struct.lconv*, %struct.lconv** %locale, align 8, !dbg !1942
  %decimal_point19 = getelementptr inbounds %struct.lconv, %struct.lconv* %9, i32 0, i32 0, !dbg !1943, !ctir !186
  %10 = load i8*, i8** %decimal_point19, align 8, !dbg !1943, !ctir !7
  %arrayidx20 = getelementptr inbounds i8, i8* %10, i64 1, !dbg !1942, !ctir !7
  %11 = load i8, i8* %arrayidx20, align 1, !dbg !1942
  %conv21 = sext i8 %11 to i32, !dbg !1942
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !1942
  br i1 %tobool22, label %if.then, label %if.end, !dbg !1944

if.then:                                          ; preds = %lor.lhs.false, %land.end
  store i32 46, i32* @decimal_point, align 4, !dbg !1945
  br label %if.end, !dbg !1946

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %12 = load %struct.lconv*, %struct.lconv** %locale, align 8, !dbg !1947
  %thousands_sep = getelementptr inbounds %struct.lconv, %struct.lconv* %12, i32 0, i32 1, !dbg !1948, !ctir !186
  %13 = load i8*, i8** %thousands_sep, align 8, !dbg !1948, !ctir !7
  %14 = load i8, i8* %13, align 1, !dbg !1949, !ctir !8
  %call23 = call zeroext i8 @to_uchar(i8 signext %14), !dbg !1950
  %conv24 = zext i8 %call23 to i32, !dbg !1950
  store i32 %conv24, i32* @thousands_sep, align 4, !dbg !1951
  %15 = load i32, i32* @thousands_sep, align 4, !dbg !1952
  %tobool25 = icmp ne i32 %15, 0, !dbg !1952
  br i1 %tobool25, label %lor.lhs.false26, label %if.then31, !dbg !1954

lor.lhs.false26:                                  ; preds = %if.end
  %16 = load %struct.lconv*, %struct.lconv** %locale, align 8, !dbg !1955
  %thousands_sep27 = getelementptr inbounds %struct.lconv, %struct.lconv* %16, i32 0, i32 1, !dbg !1956, !ctir !186
  %17 = load i8*, i8** %thousands_sep27, align 8, !dbg !1956, !ctir !7
  %arrayidx28 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !1955, !ctir !7
  %18 = load i8, i8* %arrayidx28, align 1, !dbg !1955
  %conv29 = sext i8 %18 to i32, !dbg !1955
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !1955
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !1957

if.then31:                                        ; preds = %lor.lhs.false26, %if.end
  store i32 -1, i32* @thousands_sep, align 4, !dbg !1958
  br label %if.end32, !dbg !1959

if.end32:                                         ; preds = %if.then31, %lor.lhs.false26
  store i8 0, i8* @have_read_stdin, align 1, !dbg !1960
  call void @inittables(), !dbg !1961
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1962, metadata !DIExpression()), !dbg !1964
  call void @llvm.dbg.declare(metadata %struct.sigaction* %act, metadata !1965, metadata !DIExpression()), !dbg !1966
  %call33 = call i32 @sigemptyset(%struct.__sigset_t* @caught_signals) #12, !dbg !1967
  store i64 0, i64* %i, align 8, !dbg !1968
  br label %for.cond, !dbg !1970

for.cond:                                         ; preds = %for.inc, %if.end32
  %19 = load i64, i64* %i, align 8, !dbg !1971
  %cmp34 = icmp ult i64 %19, 11, !dbg !1973
  br i1 %cmp34, label %for.body, label %for.end, !dbg !1974

for.body:                                         ; preds = %for.cond
  %20 = load i64, i64* %i, align 8, !dbg !1975
  %arrayidx36 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %20, !dbg !1977, !ctir !222
  %21 = load i32, i32* %arrayidx36, align 4, !dbg !1977
  %call37 = call i32 @sigaction(i32 %21, %struct.sigaction* null, %struct.sigaction* %act) #12, !dbg !1978
  %__sigaction_handler = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0, !dbg !1979, !ctir !228
  %sa_handler = bitcast %union.anon.2* %__sigaction_handler to void (i32)**, !dbg !1979
  %22 = load void (i32)*, void (i32)** %sa_handler, align 8, !dbg !1979, !ctir !226
  %cmp38 = icmp ne void (i32)* %22, inttoptr (i64 1 to void (i32)*), !dbg !1981
  br i1 %cmp38, label %if.then40, label %if.end43, !dbg !1982

if.then40:                                        ; preds = %for.body
  %23 = load i64, i64* %i, align 8, !dbg !1983
  %arrayidx41 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %23, !dbg !1984, !ctir !222
  %24 = load i32, i32* %arrayidx41, align 4, !dbg !1984
  %call42 = call i32 @sigaddset(%struct.__sigset_t* @caught_signals, i32 %24) #12, !dbg !1985
  br label %if.end43, !dbg !1985

if.end43:                                         ; preds = %if.then40, %for.body
  br label %for.inc, !dbg !1986

for.inc:                                          ; preds = %if.end43
  %25 = load i64, i64* %i, align 8, !dbg !1987
  %inc = add i64 %25, 1, !dbg !1987
  store i64 %inc, i64* %i, align 8, !dbg !1987
  br label %for.cond, !dbg !1988, !llvm.loop !1989

for.end:                                          ; preds = %for.cond
  %__sigaction_handler44 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 0, !dbg !1991, !ctir !228
  %sa_handler45 = bitcast %union.anon.2* %__sigaction_handler44 to void (i32)**, !dbg !1991
  store void (i32)* @sighandler, void (i32)** %sa_handler45, align 8, !dbg !1992, !ctir !226
  %sa_mask = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 1, !dbg !1993, !ctir !228
  %26 = bitcast %struct.__sigset_t* %sa_mask to i8*, !dbg !1994
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 bitcast (%struct.__sigset_t* @caught_signals to i8*), i64 128, i1 false), !dbg !1994
  %sa_flags = getelementptr inbounds %struct.sigaction, %struct.sigaction* %act, i32 0, i32 2, !dbg !1995, !ctir !228
  store i32 0, i32* %sa_flags, align 8, !dbg !1996, !ctir !5
  store i64 0, i64* %i, align 8, !dbg !1997
  br label %for.cond46, !dbg !1999

for.cond46:                                       ; preds = %for.inc57, %for.end
  %27 = load i64, i64* %i, align 8, !dbg !2000
  %cmp47 = icmp ult i64 %27, 11, !dbg !2002
  br i1 %cmp47, label %for.body49, label %for.end59, !dbg !2003

for.body49:                                       ; preds = %for.cond46
  %28 = load i64, i64* %i, align 8, !dbg !2004
  %arrayidx50 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %28, !dbg !2006, !ctir !222
  %29 = load i32, i32* %arrayidx50, align 4, !dbg !2006
  %call51 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %29) #12, !dbg !2007
  %tobool52 = icmp ne i32 %call51, 0, !dbg !2007
  br i1 %tobool52, label %if.then53, label %if.end56, !dbg !2008

if.then53:                                        ; preds = %for.body49
  %30 = load i64, i64* %i, align 8, !dbg !2009
  %arrayidx54 = getelementptr inbounds [11 x i32], [11 x i32]* @main.sig, i64 0, i64 %30, !dbg !2010, !ctir !222
  %31 = load i32, i32* %arrayidx54, align 4, !dbg !2010
  %call55 = call i32 @sigaction(i32 %31, %struct.sigaction* %act, %struct.sigaction* null) #12, !dbg !2011
  br label %if.end56, !dbg !2011

if.end56:                                         ; preds = %if.then53, %for.body49
  br label %for.inc57, !dbg !2012

for.inc57:                                        ; preds = %if.end56
  %32 = load i64, i64* %i, align 8, !dbg !2013
  %inc58 = add i64 %32, 1, !dbg !2013
  store i64 %inc58, i64* %i, align 8, !dbg !2013
  br label %for.cond46, !dbg !2014, !llvm.loop !2015

for.end59:                                        ; preds = %for.cond46
  %call60 = call void (i32)* @signal(i32 17, void (i32)* null) #12, !dbg !2017
  %call61 = call i32 @atexit(void ()* @exit_cleanup) #12, !dbg !2018
  %call62 = call %struct.keyfield* @key_init(%struct.keyfield* %gkey), !dbg !2019
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 0, !dbg !2020, !ctir !153
  store i64 -1, i64* %sword, align 8, !dbg !2021, !ctir !52
  %33 = load i32, i32* %argc.addr, align 4, !dbg !2022
  %conv63 = sext i32 %33 to i64, !dbg !2022
  %call64 = call noalias i8* @xnmalloc(i64 %conv63, i64 8), !dbg !2023
  %34 = bitcast i8* %call64 to i8**, !dbg !2023
  store i8** %34, i8*** %files, align 8, !dbg !2024
  br label %while.body, !dbg !2025

while.body:                                       ; preds = %for.end59, %if.end391
  call void @llvm.dbg.declare(metadata i32* %oi, metadata !2026, metadata !DIExpression()), !dbg !2028
  store i32 -1, i32* %oi, align 4, !dbg !2028
  %35 = load i32, i32* %c, align 4, !dbg !2029
  %cmp65 = icmp eq i32 %35, -1, !dbg !2031
  br i1 %cmp65, label %if.then106, label %lor.lhs.false67, !dbg !2032

lor.lhs.false67:                                  ; preds = %while.body
  %36 = load i8, i8* %posixly_correct, align 1, !dbg !2033
  %tobool68 = trunc i8 %36 to i1, !dbg !2033
  br i1 %tobool68, label %land.lhs.true, label %lor.lhs.false102, !dbg !2034

land.lhs.true:                                    ; preds = %lor.lhs.false67
  %37 = load i64, i64* %nfiles, align 8, !dbg !2035
  %cmp70 = icmp ne i64 %37, 0, !dbg !2036
  br i1 %cmp70, label %land.lhs.true72, label %lor.lhs.false102, !dbg !2037

land.lhs.true72:                                  ; preds = %land.lhs.true
  %38 = load i8, i8* %traditional_usage, align 1, !dbg !2038
  %tobool73 = trunc i8 %38 to i1, !dbg !2038
  br i1 %tobool73, label %land.lhs.true75, label %if.then106, !dbg !2039

land.lhs.true75:                                  ; preds = %land.lhs.true72
  %39 = load i8, i8* %checkonly, align 1, !dbg !2040
  %tobool76 = icmp ne i8 %39, 0, !dbg !2040
  br i1 %tobool76, label %if.then106, label %land.lhs.true77, !dbg !2041

land.lhs.true77:                                  ; preds = %land.lhs.true75
  %40 = load i32, i32* @optind, align 4, !dbg !2042
  %41 = load i32, i32* %argc.addr, align 4, !dbg !2043
  %cmp78 = icmp ne i32 %40, %41, !dbg !2044
  br i1 %cmp78, label %land.lhs.true80, label %if.then106, !dbg !2045

land.lhs.true80:                                  ; preds = %land.lhs.true77
  %42 = load i8**, i8*** %argv.addr, align 8, !dbg !2046
  %43 = load i32, i32* @optind, align 4, !dbg !2047
  %idxprom = sext i32 %43 to i64, !dbg !2046
  %arrayidx81 = getelementptr inbounds i8*, i8** %42, i64 %idxprom, !dbg !2046, !ctir !178
  %44 = load i8*, i8** %arrayidx81, align 8, !dbg !2046
  %arrayidx82 = getelementptr inbounds i8, i8* %44, i64 0, !dbg !2046, !ctir !7
  %45 = load i8, i8* %arrayidx82, align 1, !dbg !2046
  %conv83 = sext i8 %45 to i32, !dbg !2046
  %cmp84 = icmp eq i32 %conv83, 45, !dbg !2048
  br i1 %cmp84, label %land.lhs.true86, label %if.then106, !dbg !2049

land.lhs.true86:                                  ; preds = %land.lhs.true80
  %46 = load i8**, i8*** %argv.addr, align 8, !dbg !2050
  %47 = load i32, i32* @optind, align 4, !dbg !2051
  %idxprom87 = sext i32 %47 to i64, !dbg !2050
  %arrayidx88 = getelementptr inbounds i8*, i8** %46, i64 %idxprom87, !dbg !2050, !ctir !178
  %48 = load i8*, i8** %arrayidx88, align 8, !dbg !2050
  %arrayidx89 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !2050, !ctir !7
  %49 = load i8, i8* %arrayidx89, align 1, !dbg !2050
  %conv90 = sext i8 %49 to i32, !dbg !2050
  %cmp91 = icmp eq i32 %conv90, 111, !dbg !2052
  br i1 %cmp91, label %land.lhs.true93, label %if.then106, !dbg !2053

land.lhs.true93:                                  ; preds = %land.lhs.true86
  %50 = load i8**, i8*** %argv.addr, align 8, !dbg !2054
  %51 = load i32, i32* @optind, align 4, !dbg !2055
  %idxprom94 = sext i32 %51 to i64, !dbg !2054
  %arrayidx95 = getelementptr inbounds i8*, i8** %50, i64 %idxprom94, !dbg !2054, !ctir !178
  %52 = load i8*, i8** %arrayidx95, align 8, !dbg !2054
  %arrayidx96 = getelementptr inbounds i8, i8* %52, i64 2, !dbg !2054, !ctir !7
  %53 = load i8, i8* %arrayidx96, align 1, !dbg !2054
  %conv97 = sext i8 %53 to i32, !dbg !2054
  %tobool98 = icmp ne i32 %conv97, 0, !dbg !2054
  br i1 %tobool98, label %lor.lhs.false102, label %lor.lhs.false99, !dbg !2056

lor.lhs.false99:                                  ; preds = %land.lhs.true93
  %54 = load i32, i32* @optind, align 4, !dbg !2057
  %add = add nsw i32 %54, 1, !dbg !2058
  %55 = load i32, i32* %argc.addr, align 4, !dbg !2059
  %cmp100 = icmp ne i32 %add, %55, !dbg !2060
  br i1 %cmp100, label %lor.lhs.false102, label %if.then106, !dbg !2061

lor.lhs.false102:                                 ; preds = %lor.lhs.false99, %land.lhs.true93, %land.lhs.true, %lor.lhs.false67
  %56 = load i32, i32* %argc.addr, align 4, !dbg !2062
  %57 = load i8**, i8*** %argv.addr, align 8, !dbg !2063
  %call103 = call i32 @getopt_long(i32 %56, i8** %57, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @short_options, i64 0, i64 0), %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i32* %oi) #12, !dbg !2064
  store i32 %call103, i32* %c, align 4, !dbg !2065
  %cmp104 = icmp eq i32 %call103, -1, !dbg !2066
  br i1 %cmp104, label %if.then106, label %if.else, !dbg !2067

if.then106:                                       ; preds = %lor.lhs.false102, %lor.lhs.false99, %land.lhs.true86, %land.lhs.true80, %land.lhs.true77, %land.lhs.true75, %land.lhs.true72, %while.body
  %58 = load i32, i32* %argc.addr, align 4, !dbg !2068
  %59 = load i32, i32* @optind, align 4, !dbg !2071
  %cmp107 = icmp sle i32 %58, %59, !dbg !2072
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !2073

if.then109:                                       ; preds = %if.then106
  br label %while.end, !dbg !2074

if.end110:                                        ; preds = %if.then106
  %60 = load i8**, i8*** %argv.addr, align 8, !dbg !2075
  %61 = load i32, i32* @optind, align 4, !dbg !2076
  %inc111 = add nsw i32 %61, 1, !dbg !2076
  store i32 %inc111, i32* @optind, align 4, !dbg !2076
  %idxprom112 = sext i32 %61 to i64, !dbg !2075
  %arrayidx113 = getelementptr inbounds i8*, i8** %60, i64 %idxprom112, !dbg !2075, !ctir !178
  %62 = load i8*, i8** %arrayidx113, align 8, !dbg !2075
  %63 = load i8**, i8*** %files, align 8, !dbg !2077
  %64 = load i64, i64* %nfiles, align 8, !dbg !2078
  %inc114 = add i64 %64, 1, !dbg !2078
  store i64 %inc114, i64* %nfiles, align 8, !dbg !2078
  %arrayidx115 = getelementptr inbounds i8*, i8** %63, i64 %64, !dbg !2077, !ctir !178
  store i8* %62, i8** %arrayidx115, align 8, !dbg !2079
  br label %if.end391, !dbg !2080

if.else:                                          ; preds = %lor.lhs.false102
  %65 = load i32, i32* %c, align 4, !dbg !2081
  switch i32 %65, label %sw.default [
    i32 1, label %sw.bb
    i32 134, label %sw.bb214
    i32 98, label %sw.bb218
    i32 100, label %sw.bb218
    i32 102, label %sw.bb218
    i32 103, label %sw.bb218
    i32 104, label %sw.bb218
    i32 105, label %sw.bb218
    i32 77, label %sw.bb218
    i32 110, label %sw.bb218
    i32 114, label %sw.bb218
    i32 82, label %sw.bb218
    i32 86, label %sw.bb218
    i32 128, label %sw.bb223
    i32 99, label %sw.bb231
    i32 67, label %sw.bb231
    i32 129, label %sw.bb241
    i32 130, label %sw.bb250
    i32 131, label %sw.bb251
    i32 107, label %sw.bb252
    i32 109, label %sw.bb311
    i32 132, label %sw.bb312
    i32 111, label %sw.bb314
    i32 133, label %sw.bb323
    i32 115, label %sw.bb332
    i32 83, label %sw.bb333
    i32 116, label %sw.bb335
    i32 84, label %sw.bb363
    i32 135, label %sw.bb364
    i32 117, label %sw.bb367
    i32 121, label %sw.bb368
    i32 122, label %sw.bb388
    i32 -130, label %sw.bb389
    i32 -131, label %sw.bb390
  ], !dbg !2082

sw.bb:                                            ; preds = %if.else
  store %struct.keyfield* null, %struct.keyfield** %key, align 8, !dbg !2083
  %66 = load i8*, i8** @optarg, align 8, !dbg !2085
  %arrayidx116 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !2085, !ctir !7
  %67 = load i8, i8* %arrayidx116, align 1, !dbg !2085
  %conv117 = sext i8 %67 to i32, !dbg !2085
  %cmp118 = icmp eq i32 %conv117, 43, !dbg !2087
  br i1 %cmp118, label %if.then120, label %if.end208, !dbg !2088

if.then120:                                       ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i8* %minus_pos_usage, metadata !2089, metadata !DIExpression()), !dbg !2091
  %68 = load i32, i32* @optind, align 4, !dbg !2092
  %69 = load i32, i32* %argc.addr, align 4, !dbg !2093
  %cmp121 = icmp ne i32 %68, %69, !dbg !2094
  br i1 %cmp121, label %land.lhs.true123, label %land.end137, !dbg !2095

land.lhs.true123:                                 ; preds = %if.then120
  %70 = load i8**, i8*** %argv.addr, align 8, !dbg !2096
  %71 = load i32, i32* @optind, align 4, !dbg !2097
  %idxprom124 = sext i32 %71 to i64, !dbg !2096
  %arrayidx125 = getelementptr inbounds i8*, i8** %70, i64 %idxprom124, !dbg !2096, !ctir !178
  %72 = load i8*, i8** %arrayidx125, align 8, !dbg !2096
  %arrayidx126 = getelementptr inbounds i8, i8* %72, i64 0, !dbg !2096, !ctir !7
  %73 = load i8, i8* %arrayidx126, align 1, !dbg !2096
  %conv127 = sext i8 %73 to i32, !dbg !2096
  %cmp128 = icmp eq i32 %conv127, 45, !dbg !2098
  br i1 %cmp128, label %land.rhs130, label %land.end137, !dbg !2099

land.rhs130:                                      ; preds = %land.lhs.true123
  %74 = load i8**, i8*** %argv.addr, align 8, !dbg !2100
  %75 = load i32, i32* @optind, align 4, !dbg !2100
  %idxprom131 = sext i32 %75 to i64, !dbg !2100
  %arrayidx132 = getelementptr inbounds i8*, i8** %74, i64 %idxprom131, !dbg !2100, !ctir !178
  %76 = load i8*, i8** %arrayidx132, align 8, !dbg !2100
  %arrayidx133 = getelementptr inbounds i8, i8* %76, i64 1, !dbg !2100, !ctir !7
  %77 = load i8, i8* %arrayidx133, align 1, !dbg !2100
  %conv134 = sext i8 %77 to i32, !dbg !2100
  %sub = sub i32 %conv134, 48, !dbg !2100
  %cmp135 = icmp ule i32 %sub, 9, !dbg !2100
  br label %land.end137

land.end137:                                      ; preds = %land.rhs130, %land.lhs.true123, %if.then120
  %78 = phi i1 [ false, %land.lhs.true123 ], [ false, %if.then120 ], [ %cmp135, %land.rhs130 ], !dbg !2101
  %frombool138 = zext i1 %78 to i8, !dbg !2091
  store i8 %frombool138, i8* %minus_pos_usage, align 1, !dbg !2091
  %79 = load i8, i8* %minus_pos_usage, align 1, !dbg !2102
  %tobool139 = trunc i8 %79 to i1, !dbg !2102
  br i1 %tobool139, label %land.rhs141, label %land.end144, !dbg !2103

land.rhs141:                                      ; preds = %land.end137
  %80 = load i8, i8* %posixly_correct, align 1, !dbg !2104
  %tobool142 = trunc i8 %80 to i1, !dbg !2104
  %lnot143 = xor i1 %tobool142, true, !dbg !2105
  br label %land.end144

land.end144:                                      ; preds = %land.rhs141, %land.end137
  %81 = phi i1 [ false, %land.end137 ], [ %lnot143, %land.rhs141 ], !dbg !2101
  %land.ext = zext i1 %81 to i32, !dbg !2103
  %82 = load i8, i8* %traditional_usage, align 1, !dbg !2106
  %tobool145 = trunc i8 %82 to i1, !dbg !2106
  %conv146 = zext i1 %tobool145 to i32, !dbg !2106
  %or = or i32 %conv146, %land.ext, !dbg !2106
  %tobool147 = icmp ne i32 %or, 0, !dbg !2106
  %frombool148 = zext i1 %tobool147 to i8, !dbg !2106
  store i8 %frombool148, i8* %traditional_usage, align 1, !dbg !2106
  %83 = load i8, i8* %traditional_usage, align 1, !dbg !2107
  %tobool149 = trunc i8 %83 to i1, !dbg !2107
  br i1 %tobool149, label %if.then150, label %if.end207, !dbg !2109

if.then150:                                       ; preds = %land.end144
  %call151 = call %struct.keyfield* @key_init(%struct.keyfield* %key_buf), !dbg !2110
  store %struct.keyfield* %call151, %struct.keyfield** %key, align 8, !dbg !2112
  %84 = load i8*, i8** @optarg, align 8, !dbg !2113
  %add.ptr = getelementptr inbounds i8, i8* %84, i64 1, !dbg !2114, !ctir !8
  %85 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2115
  %sword152 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %85, i32 0, i32 0, !dbg !2116, !ctir !153
  %call153 = call i8* @parse_field_count(i8* %add.ptr, i64* %sword152, i8* null), !dbg !2117
  store i8* %call153, i8** %s, align 8, !dbg !2118
  %86 = load i8*, i8** %s, align 8, !dbg !2119
  %tobool154 = icmp ne i8* %86, null, !dbg !2119
  br i1 %tobool154, label %land.lhs.true155, label %if.end162, !dbg !2121

land.lhs.true155:                                 ; preds = %if.then150
  %87 = load i8*, i8** %s, align 8, !dbg !2122
  %88 = load i8, i8* %87, align 1, !dbg !2123, !ctir !91
  %conv156 = sext i8 %88 to i32, !dbg !2123
  %cmp157 = icmp eq i32 %conv156, 46, !dbg !2124
  br i1 %cmp157, label %if.then159, label %if.end162, !dbg !2125

if.then159:                                       ; preds = %land.lhs.true155
  %89 = load i8*, i8** %s, align 8, !dbg !2126
  %add.ptr160 = getelementptr inbounds i8, i8* %89, i64 1, !dbg !2127, !ctir !91
  %90 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2128
  %schar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %90, i32 0, i32 1, !dbg !2129, !ctir !153
  %call161 = call i8* @parse_field_count(i8* %add.ptr160, i64* %schar, i8* null), !dbg !2130
  store i8* %call161, i8** %s, align 8, !dbg !2131
  br label %if.end162, !dbg !2132

if.end162:                                        ; preds = %if.then159, %land.lhs.true155, %if.then150
  %91 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2133
  %sword163 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %91, i32 0, i32 0, !dbg !2135, !ctir !153
  %92 = load i64, i64* %sword163, align 8, !dbg !2135, !ctir !52
  %tobool164 = icmp ne i64 %92, 0, !dbg !2133
  br i1 %tobool164, label %if.end170, label %lor.lhs.false165, !dbg !2136

lor.lhs.false165:                                 ; preds = %if.end162
  %93 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2137
  %schar166 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %93, i32 0, i32 1, !dbg !2138, !ctir !153
  %94 = load i64, i64* %schar166, align 8, !dbg !2138, !ctir !52
  %tobool167 = icmp ne i64 %94, 0, !dbg !2137
  br i1 %tobool167, label %if.end170, label %if.then168, !dbg !2139

if.then168:                                       ; preds = %lor.lhs.false165
  %95 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2140
  %sword169 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %95, i32 0, i32 0, !dbg !2141, !ctir !153
  store i64 -1, i64* %sword169, align 8, !dbg !2142, !ctir !52
  br label %if.end170, !dbg !2140

if.end170:                                        ; preds = %if.then168, %lor.lhs.false165, %if.end162
  %96 = load i8*, i8** %s, align 8, !dbg !2143
  %tobool171 = icmp ne i8* %96, null, !dbg !2143
  br i1 %tobool171, label %lor.lhs.false172, label %if.then176, !dbg !2145

lor.lhs.false172:                                 ; preds = %if.end170
  %97 = load i8*, i8** %s, align 8, !dbg !2146
  %98 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2147
  %call173 = call i8* @set_ordering(i8* %97, %struct.keyfield* %98, i32 0), !dbg !2148
  %99 = load i8, i8* %call173, align 1, !dbg !2149, !ctir !8
  %conv174 = sext i8 %99 to i32, !dbg !2149
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !2149
  br i1 %tobool175, label %if.then176, label %if.else177, !dbg !2150

if.then176:                                       ; preds = %lor.lhs.false172, %if.end170
  store %struct.keyfield* null, %struct.keyfield** %key, align 8, !dbg !2151
  br label %if.end206, !dbg !2152

if.else177:                                       ; preds = %lor.lhs.false172
  %100 = load i8, i8* %minus_pos_usage, align 1, !dbg !2153
  %tobool178 = trunc i8 %100 to i1, !dbg !2153
  br i1 %tobool178, label %if.then179, label %if.end205, !dbg !2156

if.then179:                                       ; preds = %if.else177
  call void @llvm.dbg.declare(metadata i8** %optarg1, metadata !2157, metadata !DIExpression()), !dbg !2159
  %101 = load i8**, i8*** %argv.addr, align 8, !dbg !2160
  %102 = load i32, i32* @optind, align 4, !dbg !2161
  %inc180 = add nsw i32 %102, 1, !dbg !2161
  store i32 %inc180, i32* @optind, align 4, !dbg !2161
  %idxprom181 = sext i32 %102 to i64, !dbg !2160
  %arrayidx182 = getelementptr inbounds i8*, i8** %101, i64 %idxprom181, !dbg !2160, !ctir !178
  %103 = load i8*, i8** %arrayidx182, align 8, !dbg !2160
  store i8* %103, i8** %optarg1, align 8, !dbg !2159
  %104 = load i8*, i8** %optarg1, align 8, !dbg !2162
  %add.ptr183 = getelementptr inbounds i8, i8* %104, i64 1, !dbg !2163, !ctir !91
  %105 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2164
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %105, i32 0, i32 2, !dbg !2165, !ctir !153
  %call184 = call i8* @parse_field_count(i8* %add.ptr183, i64* %eword, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.27, i64 0, i64 0)), !dbg !2166
  store i8* %call184, i8** %s, align 8, !dbg !2167
  %106 = load i8*, i8** %s, align 8, !dbg !2168
  %tobool185 = icmp ne i8* %106, null, !dbg !2168
  br i1 %tobool185, label %cond.true, label %cond.false, !dbg !2168

cond.true:                                        ; preds = %if.then179
  br label %cond.end, !dbg !2168

cond.false:                                       ; preds = %if.then179
  call void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 4365, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #13, !dbg !2168
  unreachable, !dbg !2168

107:                                              ; No predecessors!
  br label %cond.end, !dbg !2168

cond.end:                                         ; preds = %107, %cond.true
  %108 = load i8*, i8** %s, align 8, !dbg !2169
  %109 = load i8, i8* %108, align 1, !dbg !2171, !ctir !91
  %conv186 = sext i8 %109 to i32, !dbg !2171
  %cmp187 = icmp eq i32 %conv186, 46, !dbg !2172
  br i1 %cmp187, label %if.then189, label %if.end192, !dbg !2173

if.then189:                                       ; preds = %cond.end
  %110 = load i8*, i8** %s, align 8, !dbg !2174
  %add.ptr190 = getelementptr inbounds i8, i8* %110, i64 1, !dbg !2175, !ctir !91
  %111 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2176
  %echar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %111, i32 0, i32 3, !dbg !2177, !ctir !153
  %call191 = call i8* @parse_field_count(i8* %add.ptr190, i64* %echar, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)), !dbg !2178
  store i8* %call191, i8** %s, align 8, !dbg !2179
  br label %if.end192, !dbg !2180

if.end192:                                        ; preds = %if.then189, %cond.end
  %112 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2181
  %echar193 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %112, i32 0, i32 3, !dbg !2183, !ctir !153
  %113 = load i64, i64* %echar193, align 8, !dbg !2183, !ctir !52
  %tobool194 = icmp ne i64 %113, 0, !dbg !2181
  br i1 %tobool194, label %if.end200, label %land.lhs.true195, !dbg !2184

land.lhs.true195:                                 ; preds = %if.end192
  %114 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2185
  %eword196 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %114, i32 0, i32 2, !dbg !2186, !ctir !153
  %115 = load i64, i64* %eword196, align 8, !dbg !2186, !ctir !52
  %tobool197 = icmp ne i64 %115, 0, !dbg !2185
  br i1 %tobool197, label %if.then198, label %if.end200, !dbg !2187

if.then198:                                       ; preds = %land.lhs.true195
  %116 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2188
  %eword199 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %116, i32 0, i32 2, !dbg !2190, !ctir !153
  %117 = load i64, i64* %eword199, align 8, !dbg !2191, !ctir !52
  %dec = add i64 %117, -1, !dbg !2191
  store i64 %dec, i64* %eword199, align 8, !dbg !2191, !ctir !52
  br label %if.end200, !dbg !2192

if.end200:                                        ; preds = %if.then198, %land.lhs.true195, %if.end192
  %118 = load i8*, i8** %s, align 8, !dbg !2193
  %119 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2195
  %call201 = call i8* @set_ordering(i8* %118, %struct.keyfield* %119, i32 1), !dbg !2196
  %120 = load i8, i8* %call201, align 1, !dbg !2197, !ctir !8
  %tobool202 = icmp ne i8 %120, 0, !dbg !2197
  br i1 %tobool202, label %if.then203, label %if.end204, !dbg !2198

if.then203:                                       ; preds = %if.end200
  %121 = load i8*, i8** %optarg1, align 8, !dbg !2199
  call void @badfieldspec(i8* %121, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i64 0, i64 0)) #15, !dbg !2200
  unreachable, !dbg !2200

if.end204:                                        ; preds = %if.end200
  br label %if.end205, !dbg !2201

if.end205:                                        ; preds = %if.end204, %if.else177
  %122 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2202
  %traditional_used = getelementptr inbounds %struct.keyfield, %struct.keyfield* %122, i32 0, i32 15, !dbg !2203, !ctir !153
  store i8 1, i8* %traditional_used, align 1, !dbg !2204, !ctir !162
  %123 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2205
  call void @insertkey(%struct.keyfield* %123), !dbg !2206
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then176
  br label %if.end207, !dbg !2207

if.end207:                                        ; preds = %if.end206, %land.end144
  br label %if.end208, !dbg !2208

if.end208:                                        ; preds = %if.end207, %sw.bb
  %124 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2209
  %tobool209 = icmp ne %struct.keyfield* %124, null, !dbg !2209
  br i1 %tobool209, label %if.end213, label %if.then210, !dbg !2211

if.then210:                                       ; preds = %if.end208
  %125 = load i8*, i8** @optarg, align 8, !dbg !2212
  %126 = load i8**, i8*** %files, align 8, !dbg !2213
  %127 = load i64, i64* %nfiles, align 8, !dbg !2214
  %inc211 = add i64 %127, 1, !dbg !2214
  store i64 %inc211, i64* %nfiles, align 8, !dbg !2214
  %arrayidx212 = getelementptr inbounds i8*, i8** %126, i64 %127, !dbg !2213, !ctir !178
  store i8* %125, i8** %arrayidx212, align 8, !dbg !2215
  br label %if.end213, !dbg !2213

if.end213:                                        ; preds = %if.then210, %if.end208
  br label %sw.epilog, !dbg !2216

sw.bb214:                                         ; preds = %if.else
  %128 = load i8*, i8** @optarg, align 8, !dbg !2217
  %129 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2217
  %call215 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i64 0, i64 0), i8* %128, i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @sort_args, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @sort_types, i64 0, i64 0), i64 1, void ()* %129), !dbg !2217
  %arrayidx216 = getelementptr inbounds [6 x i8], [6 x i8]* @sort_types, i64 0, i64 %call215, !dbg !2217, !ctir !340
  %130 = load i8, i8* %arrayidx216, align 1, !dbg !2217
  %conv217 = sext i8 %130 to i32, !dbg !2217
  store i32 %conv217, i32* %c, align 4, !dbg !2218
  br label %sw.bb218, !dbg !2219

sw.bb218:                                         ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %sw.bb214
  call void @llvm.dbg.declare(metadata [2 x i8]* %str, metadata !2220, metadata !DIExpression()), !dbg !2222
  %131 = load i32, i32* %c, align 4, !dbg !2223
  %conv219 = trunc i32 %131 to i8, !dbg !2223
  %arrayidx220 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 0, !dbg !2224, !ctir !330
  store i8 %conv219, i8* %arrayidx220, align 1, !dbg !2225
  %arrayidx221 = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 1, !dbg !2226, !ctir !330
  store i8 0, i8* %arrayidx221, align 1, !dbg !2227
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %str, i64 0, i64 0, !dbg !2228, !ctir !330
  %call222 = call i8* @set_ordering(i8* %arraydecay, %struct.keyfield* %gkey, i32 2), !dbg !2229
  br label %sw.epilog, !dbg !2230

sw.bb223:                                         ; preds = %if.else
  %132 = load i8*, i8** @optarg, align 8, !dbg !2231
  %tobool224 = icmp ne i8* %132, null, !dbg !2231
  br i1 %tobool224, label %cond.true225, label %cond.false229, !dbg !2231

cond.true225:                                     ; preds = %sw.bb223
  %133 = load i8*, i8** @optarg, align 8, !dbg !2232
  %134 = load void ()*, void ()** @argmatch_die, align 8, !dbg !2232
  %call226 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i64 0, i64 0), i8* %133, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @check_args, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @check_types, i64 0, i64 0), i64 1, void ()* %134), !dbg !2232
  %arrayidx227 = getelementptr inbounds [3 x i8], [3 x i8]* @check_types, i64 0, i64 %call226, !dbg !2232, !ctir !350
  %135 = load i8, i8* %arrayidx227, align 1, !dbg !2232
  %conv228 = sext i8 %135 to i32, !dbg !2232
  br label %cond.end230, !dbg !2231

cond.false229:                                    ; preds = %sw.bb223
  br label %cond.end230, !dbg !2231

cond.end230:                                      ; preds = %cond.false229, %cond.true225
  %cond = phi i32 [ %conv228, %cond.true225 ], [ 99, %cond.false229 ], !dbg !2231
  store i32 %cond, i32* %c, align 4, !dbg !2233
  br label %sw.bb231, !dbg !2234

sw.bb231:                                         ; preds = %if.else, %if.else, %cond.end230
  %136 = load i8, i8* %checkonly, align 1, !dbg !2235
  %conv232 = sext i8 %136 to i32, !dbg !2235
  %tobool233 = icmp ne i32 %conv232, 0, !dbg !2235
  br i1 %tobool233, label %land.lhs.true234, label %if.end239, !dbg !2237

land.lhs.true234:                                 ; preds = %sw.bb231
  %137 = load i8, i8* %checkonly, align 1, !dbg !2238
  %conv235 = sext i8 %137 to i32, !dbg !2238
  %138 = load i32, i32* %c, align 4, !dbg !2239
  %cmp236 = icmp ne i32 %conv235, %138, !dbg !2240
  br i1 %cmp236, label %if.then238, label %if.end239, !dbg !2241

if.then238:                                       ; preds = %land.lhs.true234
  call void @incompatible_options(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)) #15, !dbg !2242
  unreachable, !dbg !2242

if.end239:                                        ; preds = %land.lhs.true234, %sw.bb231
  %139 = load i32, i32* %c, align 4, !dbg !2243
  %conv240 = trunc i32 %139 to i8, !dbg !2243
  store i8 %conv240, i8* %checkonly, align 1, !dbg !2244
  br label %sw.epilog, !dbg !2245

sw.bb241:                                         ; preds = %if.else
  %140 = load i8*, i8** @compress_program, align 8, !dbg !2246
  %tobool242 = icmp ne i8* %140, null, !dbg !2246
  br i1 %tobool242, label %land.lhs.true243, label %if.end249, !dbg !2248

land.lhs.true243:                                 ; preds = %sw.bb241
  %141 = load i8*, i8** @compress_program, align 8, !dbg !2249
  %142 = load i8*, i8** @optarg, align 8, !dbg !2249
  %call244 = call i32 @strcmp(i8* %141, i8* %142) #14, !dbg !2249
  %cmp245 = icmp eq i32 %call244, 0, !dbg !2249
  br i1 %cmp245, label %if.end249, label %if.then247, !dbg !2250

if.then247:                                       ; preds = %land.lhs.true243
  %call248 = call i8* @gettext(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.35, i64 0, i64 0)) #12, !dbg !2251
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call248), !dbg !2251
  unreachable, !dbg !2251

if.end249:                                        ; preds = %land.lhs.true243, %sw.bb241
  %143 = load i8*, i8** @optarg, align 8, !dbg !2252
  store i8* %143, i8** @compress_program, align 8, !dbg !2253
  br label %sw.epilog, !dbg !2254

sw.bb250:                                         ; preds = %if.else
  store i8 1, i8* @debug, align 1, !dbg !2255
  br label %sw.epilog, !dbg !2256

sw.bb251:                                         ; preds = %if.else
  %144 = load i8*, i8** @optarg, align 8, !dbg !2257
  store i8* %144, i8** %files_from, align 8, !dbg !2258
  br label %sw.epilog, !dbg !2259

sw.bb252:                                         ; preds = %if.else
  %call253 = call %struct.keyfield* @key_init(%struct.keyfield* %key_buf), !dbg !2260
  store %struct.keyfield* %call253, %struct.keyfield** %key, align 8, !dbg !2261
  %145 = load i8*, i8** @optarg, align 8, !dbg !2262
  %146 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2263
  %sword254 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %146, i32 0, i32 0, !dbg !2264, !ctir !153
  %call255 = call i8* @parse_field_count(i8* %145, i64* %sword254, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i64 0, i64 0)), !dbg !2265
  store i8* %call255, i8** %s, align 8, !dbg !2266
  %147 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2267
  %sword256 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %147, i32 0, i32 0, !dbg !2269, !ctir !153
  %148 = load i64, i64* %sword256, align 8, !dbg !2270, !ctir !52
  %dec257 = add i64 %148, -1, !dbg !2270
  store i64 %dec257, i64* %sword256, align 8, !dbg !2270, !ctir !52
  %tobool258 = icmp ne i64 %148, 0, !dbg !2270
  br i1 %tobool258, label %if.end260, label %if.then259, !dbg !2271

if.then259:                                       ; preds = %sw.bb252
  %149 = load i8*, i8** @optarg, align 8, !dbg !2272
  call void @badfieldspec(i8* %149, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.37, i64 0, i64 0)) #15, !dbg !2274
  unreachable, !dbg !2274

if.end260:                                        ; preds = %sw.bb252
  %150 = load i8*, i8** %s, align 8, !dbg !2275
  %151 = load i8, i8* %150, align 1, !dbg !2277, !ctir !91
  %conv261 = sext i8 %151 to i32, !dbg !2277
  %cmp262 = icmp eq i32 %conv261, 46, !dbg !2278
  br i1 %cmp262, label %if.then264, label %if.end273, !dbg !2279

if.then264:                                       ; preds = %if.end260
  %152 = load i8*, i8** %s, align 8, !dbg !2280
  %add.ptr265 = getelementptr inbounds i8, i8* %152, i64 1, !dbg !2282, !ctir !91
  %153 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2283
  %schar266 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %153, i32 0, i32 1, !dbg !2284, !ctir !153
  %call267 = call i8* @parse_field_count(i8* %add.ptr265, i64* %schar266, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)), !dbg !2285
  store i8* %call267, i8** %s, align 8, !dbg !2286
  %154 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2287
  %schar268 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %154, i32 0, i32 1, !dbg !2289, !ctir !153
  %155 = load i64, i64* %schar268, align 8, !dbg !2290, !ctir !52
  %dec269 = add i64 %155, -1, !dbg !2290
  store i64 %dec269, i64* %schar268, align 8, !dbg !2290, !ctir !52
  %tobool270 = icmp ne i64 %155, 0, !dbg !2290
  br i1 %tobool270, label %if.end272, label %if.then271, !dbg !2291

if.then271:                                       ; preds = %if.then264
  %156 = load i8*, i8** @optarg, align 8, !dbg !2292
  call void @badfieldspec(i8* %156, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i64 0, i64 0)) #15, !dbg !2294
  unreachable, !dbg !2294

if.end272:                                        ; preds = %if.then264
  br label %if.end273, !dbg !2295

if.end273:                                        ; preds = %if.end272, %if.end260
  %157 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2296
  %sword274 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %157, i32 0, i32 0, !dbg !2298, !ctir !153
  %158 = load i64, i64* %sword274, align 8, !dbg !2298, !ctir !52
  %tobool275 = icmp ne i64 %158, 0, !dbg !2296
  br i1 %tobool275, label %if.end281, label %lor.lhs.false276, !dbg !2299

lor.lhs.false276:                                 ; preds = %if.end273
  %159 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2300
  %schar277 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %159, i32 0, i32 1, !dbg !2301, !ctir !153
  %160 = load i64, i64* %schar277, align 8, !dbg !2301, !ctir !52
  %tobool278 = icmp ne i64 %160, 0, !dbg !2300
  br i1 %tobool278, label %if.end281, label %if.then279, !dbg !2302

if.then279:                                       ; preds = %lor.lhs.false276
  %161 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2303
  %sword280 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %161, i32 0, i32 0, !dbg !2304, !ctir !153
  store i64 -1, i64* %sword280, align 8, !dbg !2305, !ctir !52
  br label %if.end281, !dbg !2303

if.end281:                                        ; preds = %if.then279, %lor.lhs.false276, %if.end273
  %162 = load i8*, i8** %s, align 8, !dbg !2306
  %163 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2307
  %call282 = call i8* @set_ordering(i8* %162, %struct.keyfield* %163, i32 0), !dbg !2308
  store i8* %call282, i8** %s, align 8, !dbg !2309
  %164 = load i8*, i8** %s, align 8, !dbg !2310
  %165 = load i8, i8* %164, align 1, !dbg !2312, !ctir !91
  %conv283 = sext i8 %165 to i32, !dbg !2312
  %cmp284 = icmp ne i32 %conv283, 44, !dbg !2313
  br i1 %cmp284, label %if.then286, label %if.else289, !dbg !2314

if.then286:                                       ; preds = %if.end281
  %166 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2315
  %eword287 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %166, i32 0, i32 2, !dbg !2317, !ctir !153
  store i64 -1, i64* %eword287, align 8, !dbg !2318, !ctir !52
  %167 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2319
  %echar288 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %167, i32 0, i32 3, !dbg !2320, !ctir !153
  store i64 0, i64* %echar288, align 8, !dbg !2321, !ctir !52
  br label %if.end307, !dbg !2322

if.else289:                                       ; preds = %if.end281
  %168 = load i8*, i8** %s, align 8, !dbg !2323
  %add.ptr290 = getelementptr inbounds i8, i8* %168, i64 1, !dbg !2325, !ctir !91
  %169 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2326
  %eword291 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %169, i32 0, i32 2, !dbg !2327, !ctir !153
  %call292 = call i8* @parse_field_count(i8* %add.ptr290, i64* %eword291, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.39, i64 0, i64 0)), !dbg !2328
  store i8* %call292, i8** %s, align 8, !dbg !2329
  %170 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2330
  %eword293 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %170, i32 0, i32 2, !dbg !2332, !ctir !153
  %171 = load i64, i64* %eword293, align 8, !dbg !2333, !ctir !52
  %dec294 = add i64 %171, -1, !dbg !2333
  store i64 %dec294, i64* %eword293, align 8, !dbg !2333, !ctir !52
  %tobool295 = icmp ne i64 %171, 0, !dbg !2333
  br i1 %tobool295, label %if.end297, label %if.then296, !dbg !2334

if.then296:                                       ; preds = %if.else289
  %172 = load i8*, i8** @optarg, align 8, !dbg !2335
  call void @badfieldspec(i8* %172, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.37, i64 0, i64 0)) #15, !dbg !2337
  unreachable, !dbg !2337

if.end297:                                        ; preds = %if.else289
  %173 = load i8*, i8** %s, align 8, !dbg !2338
  %174 = load i8, i8* %173, align 1, !dbg !2340, !ctir !91
  %conv298 = sext i8 %174 to i32, !dbg !2340
  %cmp299 = icmp eq i32 %conv298, 46, !dbg !2341
  br i1 %cmp299, label %if.then301, label %if.end305, !dbg !2342

if.then301:                                       ; preds = %if.end297
  %175 = load i8*, i8** %s, align 8, !dbg !2343
  %add.ptr302 = getelementptr inbounds i8, i8* %175, i64 1, !dbg !2345, !ctir !91
  %176 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2346
  %echar303 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %176, i32 0, i32 3, !dbg !2347, !ctir !153
  %call304 = call i8* @parse_field_count(i8* %add.ptr302, i64* %echar303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)), !dbg !2348
  store i8* %call304, i8** %s, align 8, !dbg !2349
  br label %if.end305, !dbg !2350

if.end305:                                        ; preds = %if.then301, %if.end297
  %177 = load i8*, i8** %s, align 8, !dbg !2351
  %178 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2352
  %call306 = call i8* @set_ordering(i8* %177, %struct.keyfield* %178, i32 1), !dbg !2353
  store i8* %call306, i8** %s, align 8, !dbg !2354
  br label %if.end307

if.end307:                                        ; preds = %if.end305, %if.then286
  %179 = load i8*, i8** %s, align 8, !dbg !2355
  %180 = load i8, i8* %179, align 1, !dbg !2357, !ctir !91
  %tobool308 = icmp ne i8 %180, 0, !dbg !2357
  br i1 %tobool308, label %if.then309, label %if.end310, !dbg !2358

if.then309:                                       ; preds = %if.end307
  %181 = load i8*, i8** @optarg, align 8, !dbg !2359
  call void @badfieldspec(i8* %181, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i64 0, i64 0)) #15, !dbg !2360
  unreachable, !dbg !2360

if.end310:                                        ; preds = %if.end307
  %182 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2361
  call void @insertkey(%struct.keyfield* %182), !dbg !2362
  br label %sw.epilog, !dbg !2363

sw.bb311:                                         ; preds = %if.else
  store i8 1, i8* %mergeonly, align 1, !dbg !2364
  br label %sw.epilog, !dbg !2365

sw.bb312:                                         ; preds = %if.else
  %183 = load i32, i32* %oi, align 4, !dbg !2366
  %184 = load i32, i32* %c, align 4, !dbg !2367
  %conv313 = trunc i32 %184 to i8, !dbg !2367
  %185 = load i8*, i8** @optarg, align 8, !dbg !2368
  call void @specify_nmerge(i32 %183, i8 signext %conv313, i8* %185), !dbg !2369
  br label %sw.epilog, !dbg !2370

sw.bb314:                                         ; preds = %if.else
  %186 = load i8*, i8** %outfile, align 8, !dbg !2371
  %tobool315 = icmp ne i8* %186, null, !dbg !2371
  br i1 %tobool315, label %land.lhs.true316, label %if.end322, !dbg !2373

land.lhs.true316:                                 ; preds = %sw.bb314
  %187 = load i8*, i8** %outfile, align 8, !dbg !2374
  %188 = load i8*, i8** @optarg, align 8, !dbg !2374
  %call317 = call i32 @strcmp(i8* %187, i8* %188) #14, !dbg !2374
  %cmp318 = icmp eq i32 %call317, 0, !dbg !2374
  br i1 %cmp318, label %if.end322, label %if.then320, !dbg !2375

if.then320:                                       ; preds = %land.lhs.true316
  %call321 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.40, i64 0, i64 0)) #12, !dbg !2376
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call321), !dbg !2376
  unreachable, !dbg !2376

if.end322:                                        ; preds = %land.lhs.true316, %sw.bb314
  %189 = load i8*, i8** @optarg, align 8, !dbg !2377
  store i8* %189, i8** %outfile, align 8, !dbg !2378
  br label %sw.epilog, !dbg !2379

sw.bb323:                                         ; preds = %if.else
  %190 = load i8*, i8** %random_source, align 8, !dbg !2380
  %tobool324 = icmp ne i8* %190, null, !dbg !2380
  br i1 %tobool324, label %land.lhs.true325, label %if.end331, !dbg !2382

land.lhs.true325:                                 ; preds = %sw.bb323
  %191 = load i8*, i8** %random_source, align 8, !dbg !2383
  %192 = load i8*, i8** @optarg, align 8, !dbg !2383
  %call326 = call i32 @strcmp(i8* %191, i8* %192) #14, !dbg !2383
  %cmp327 = icmp eq i32 %call326, 0, !dbg !2383
  br i1 %cmp327, label %if.end331, label %if.then329, !dbg !2384

if.then329:                                       ; preds = %land.lhs.true325
  %call330 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i64 0, i64 0)) #12, !dbg !2385
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call330), !dbg !2385
  unreachable, !dbg !2385

if.end331:                                        ; preds = %land.lhs.true325, %sw.bb323
  %193 = load i8*, i8** @optarg, align 8, !dbg !2386
  store i8* %193, i8** %random_source, align 8, !dbg !2387
  br label %sw.epilog, !dbg !2388

sw.bb332:                                         ; preds = %if.else
  store i8 1, i8* @stable, align 1, !dbg !2389
  br label %sw.epilog, !dbg !2390

sw.bb333:                                         ; preds = %if.else
  %194 = load i32, i32* %oi, align 4, !dbg !2391
  %195 = load i32, i32* %c, align 4, !dbg !2392
  %conv334 = trunc i32 %195 to i8, !dbg !2392
  %196 = load i8*, i8** @optarg, align 8, !dbg !2393
  call void @specify_sort_size(i32 %194, i8 signext %conv334, i8* %196), !dbg !2394
  br label %sw.epilog, !dbg !2395

sw.bb335:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i8* %newtab, metadata !2396, metadata !DIExpression()), !dbg !2398
  %197 = load i8*, i8** @optarg, align 8, !dbg !2399
  %arrayidx336 = getelementptr inbounds i8, i8* %197, i64 0, !dbg !2399, !ctir !7
  %198 = load i8, i8* %arrayidx336, align 1, !dbg !2399
  store i8 %198, i8* %newtab, align 1, !dbg !2398
  %199 = load i8, i8* %newtab, align 1, !dbg !2400
  %tobool337 = icmp ne i8 %199, 0, !dbg !2400
  br i1 %tobool337, label %if.end340, label %if.then338, !dbg !2402

if.then338:                                       ; preds = %sw.bb335
  %call339 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.42, i64 0, i64 0)) #12, !dbg !2403
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call339), !dbg !2403
  unreachable, !dbg !2403

if.end340:                                        ; preds = %sw.bb335
  %200 = load i8*, i8** @optarg, align 8, !dbg !2404
  %arrayidx341 = getelementptr inbounds i8, i8* %200, i64 1, !dbg !2404, !ctir !7
  %201 = load i8, i8* %arrayidx341, align 1, !dbg !2404
  %tobool342 = icmp ne i8 %201, 0, !dbg !2404
  br i1 %tobool342, label %if.then343, label %if.end352, !dbg !2406

if.then343:                                       ; preds = %if.end340
  %202 = load i8*, i8** @optarg, align 8, !dbg !2407
  %call344 = call i32 @strcmp(i8* %202, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i64 0, i64 0)) #14, !dbg !2407
  %cmp345 = icmp eq i32 %call344, 0, !dbg !2407
  br i1 %cmp345, label %if.then347, label %if.else348, !dbg !2410

if.then347:                                       ; preds = %if.then343
  store i8 0, i8* %newtab, align 1, !dbg !2411
  br label %if.end351, !dbg !2412

if.else348:                                       ; preds = %if.then343
  %call349 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.44, i64 0, i64 0)) #12, !dbg !2413
  %203 = load i8*, i8** @optarg, align 8, !dbg !2413
  %call350 = call i8* @quote(i8* %203), !dbg !2413
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call349, i8* %call350), !dbg !2413
  unreachable, !dbg !2413

if.end351:                                        ; preds = %if.then347
  br label %if.end352, !dbg !2415

if.end352:                                        ; preds = %if.end351, %if.end340
  %204 = load i32, i32* @tab, align 4, !dbg !2416
  %cmp353 = icmp ne i32 %204, 128, !dbg !2418
  br i1 %cmp353, label %land.lhs.true355, label %if.end361, !dbg !2419

land.lhs.true355:                                 ; preds = %if.end352
  %205 = load i32, i32* @tab, align 4, !dbg !2420
  %206 = load i8, i8* %newtab, align 1, !dbg !2421
  %conv356 = sext i8 %206 to i32, !dbg !2421
  %cmp357 = icmp ne i32 %205, %conv356, !dbg !2422
  br i1 %cmp357, label %if.then359, label %if.end361, !dbg !2423

if.then359:                                       ; preds = %land.lhs.true355
  %call360 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i64 0, i64 0)) #12, !dbg !2424
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call360), !dbg !2424
  unreachable, !dbg !2424

if.end361:                                        ; preds = %land.lhs.true355, %if.end352
  %207 = load i8, i8* %newtab, align 1, !dbg !2425
  %conv362 = sext i8 %207 to i32, !dbg !2425
  store i32 %conv362, i32* @tab, align 4, !dbg !2426
  br label %sw.epilog, !dbg !2427

sw.bb363:                                         ; preds = %if.else
  %208 = load i8*, i8** @optarg, align 8, !dbg !2428
  call void @add_temp_dir(i8* %208), !dbg !2429
  br label %sw.epilog, !dbg !2430

sw.bb364:                                         ; preds = %if.else
  %209 = load i32, i32* %oi, align 4, !dbg !2431
  %210 = load i32, i32* %c, align 4, !dbg !2432
  %conv365 = trunc i32 %210 to i8, !dbg !2432
  %211 = load i8*, i8** @optarg, align 8, !dbg !2433
  %call366 = call i64 @specify_nthreads(i32 %209, i8 signext %conv365, i8* %211), !dbg !2434
  store i64 %call366, i64* %nthreads, align 8, !dbg !2435
  br label %sw.epilog, !dbg !2436

sw.bb367:                                         ; preds = %if.else
  store i8 1, i8* @unique, align 1, !dbg !2437
  br label %sw.epilog, !dbg !2438

sw.bb368:                                         ; preds = %if.else
  %212 = load i8*, i8** @optarg, align 8, !dbg !2439
  %213 = load i8**, i8*** %argv.addr, align 8, !dbg !2441
  %214 = load i32, i32* @optind, align 4, !dbg !2442
  %sub369 = sub nsw i32 %214, 1, !dbg !2443
  %idxprom370 = sext i32 %sub369 to i64, !dbg !2441
  %arrayidx371 = getelementptr inbounds i8*, i8** %213, i64 %idxprom370, !dbg !2441, !ctir !178
  %215 = load i8*, i8** %arrayidx371, align 8, !dbg !2441
  %cmp372 = icmp eq i8* %212, %215, !dbg !2444
  br i1 %cmp372, label %if.then374, label %if.end387, !dbg !2445

if.then374:                                       ; preds = %sw.bb368
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2446, metadata !DIExpression()), !dbg !2448
  %216 = load i8*, i8** @optarg, align 8, !dbg !2449
  store i8* %216, i8** %p, align 8, !dbg !2451
  br label %for.cond375, !dbg !2452

for.cond375:                                      ; preds = %for.inc381, %if.then374
  %217 = load i8*, i8** %p, align 8, !dbg !2453
  %218 = load i8, i8* %217, align 1, !dbg !2453, !ctir !91
  %conv376 = sext i8 %218 to i32, !dbg !2453
  %sub377 = sub i32 %conv376, 48, !dbg !2453
  %cmp378 = icmp ule i32 %sub377, 9, !dbg !2453
  br i1 %cmp378, label %for.body380, label %for.end382, !dbg !2455

for.body380:                                      ; preds = %for.cond375
  br label %for.inc381, !dbg !2456

for.inc381:                                       ; preds = %for.body380
  %219 = load i8*, i8** %p, align 8, !dbg !2457
  %incdec.ptr = getelementptr inbounds i8, i8* %219, i32 1, !dbg !2457, !ctir !91
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !2457
  br label %for.cond375, !dbg !2458, !llvm.loop !2459

for.end382:                                       ; preds = %for.cond375
  %220 = load i8*, i8** %p, align 8, !dbg !2461
  %221 = load i8, i8* %220, align 1, !dbg !2462, !ctir !91
  %conv383 = sext i8 %221 to i32, !dbg !2462
  %cmp384 = icmp ne i32 %conv383, 0, !dbg !2463
  %conv385 = zext i1 %cmp384 to i32, !dbg !2463
  %222 = load i32, i32* @optind, align 4, !dbg !2464
  %sub386 = sub nsw i32 %222, %conv385, !dbg !2464
  store i32 %sub386, i32* @optind, align 4, !dbg !2464
  br label %if.end387, !dbg !2465

if.end387:                                        ; preds = %for.end382, %sw.bb368
  br label %sw.epilog, !dbg !2466

sw.bb388:                                         ; preds = %if.else
  store i8 0, i8* @eolchar, align 1, !dbg !2467
  br label %sw.epilog, !dbg !2468

sw.bb389:                                         ; preds = %if.else
  call void @usage(i32 0) #15, !dbg !2469
  unreachable, !dbg !2469

sw.bb390:                                         ; preds = %if.else
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2470
  %224 = load i8*, i8** @Version, align 8, !dbg !2470
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %223, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.46, i64 0, i64 0), i8* %224, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.48, i64 0, i64 0), i8* null), !dbg !2470
  call void @exit(i32 0) #13, !dbg !2470
  unreachable, !dbg !2470

sw.default:                                       ; preds = %if.else
  call void @usage(i32 2) #15, !dbg !2471
  unreachable, !dbg !2471

sw.epilog:                                        ; preds = %sw.bb388, %if.end387, %sw.bb367, %sw.bb364, %sw.bb363, %if.end361, %sw.bb333, %sw.bb332, %if.end331, %if.end322, %sw.bb312, %sw.bb311, %if.end310, %sw.bb251, %sw.bb250, %if.end249, %if.end239, %sw.bb218, %if.end213
  br label %if.end391

if.end391:                                        ; preds = %sw.epilog, %if.end110
  br label %while.body, !dbg !2025, !llvm.loop !2472

while.end:                                        ; preds = %if.then109
  %225 = load i8*, i8** %files_from, align 8, !dbg !2474
  %tobool392 = icmp ne i8* %225, null, !dbg !2474
  br i1 %tobool392, label %if.then393, label %if.end444, !dbg !2476

if.then393:                                       ; preds = %while.end
  %226 = load i64, i64* %nfiles, align 8, !dbg !2477
  %tobool394 = icmp ne i64 %226, 0, !dbg !2477
  br i1 %tobool394, label %if.then395, label %if.end401, !dbg !2480

if.then395:                                       ; preds = %if.then393
  %call396 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i64 0, i64 0)) #12, !dbg !2481
  %227 = load i8**, i8*** %files, align 8, !dbg !2483
  %arrayidx397 = getelementptr inbounds i8*, i8** %227, i64 0, !dbg !2483, !ctir !178
  %228 = load i8*, i8** %arrayidx397, align 8, !dbg !2483
  %call398 = call i8* @quotearg_style(i32 4, i8* %228), !dbg !2483
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call396, i8* %call398), !dbg !2484
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2485
  %call399 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.51, i64 0, i64 0)) #12, !dbg !2486
  %call400 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %229, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* %call399), !dbg !2487
  call void @usage(i32 2) #15, !dbg !2488
  unreachable, !dbg !2488

if.end401:                                        ; preds = %if.then393
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream, metadata !2489, metadata !DIExpression()), !dbg !2490
  %230 = load i8*, i8** %files_from, align 8, !dbg !2491
  %call402 = call %struct._IO_FILE* @xfopen(i8* %230, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !2492
  store %struct._IO_FILE* %call402, %struct._IO_FILE** %stream, align 8, !dbg !2490
  call void @readtokens0_init(%struct.Tokens* %tok), !dbg !2493
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** %stream, align 8, !dbg !2494
  %call403 = call zeroext i1 @readtokens0(%struct._IO_FILE* %231, %struct.Tokens* %tok), !dbg !2496
  br i1 %call403, label %if.end407, label %if.then404, !dbg !2497

if.then404:                                       ; preds = %if.end401
  %call405 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.53, i64 0, i64 0)) #12, !dbg !2498
  %232 = load i8*, i8** %files_from, align 8, !dbg !2498
  %call406 = call i8* @quotearg_style(i32 4, i8* %232), !dbg !2498
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call405, i8* %call406), !dbg !2498
  unreachable, !dbg !2498

if.end407:                                        ; preds = %if.end401
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** %stream, align 8, !dbg !2499
  %234 = load i8*, i8** %files_from, align 8, !dbg !2500
  call void @xfclose(%struct._IO_FILE* %233, i8* %234), !dbg !2501
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 0, !dbg !2502, !ctir !1822
  %235 = load i64, i64* %n_tok, align 8, !dbg !2502, !ctir !52
  %tobool408 = icmp ne i64 %235, 0, !dbg !2504
  br i1 %tobool408, label %if.then409, label %if.else440, !dbg !2505

if.then409:                                       ; preds = %if.end407
  %236 = load i8**, i8*** %files, align 8, !dbg !2506
  %237 = bitcast i8** %236 to i8*, !dbg !2506
  call void @free(i8* %237) #12, !dbg !2508
  %tok410 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 1, !dbg !2509, !ctir !1822
  %238 = load i8**, i8*** %tok410, align 8, !dbg !2509, !ctir !178
  store i8** %238, i8*** %files, align 8, !dbg !2510
  %n_tok411 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %tok, i32 0, i32 0, !dbg !2511, !ctir !1822
  %239 = load i64, i64* %n_tok411, align 8, !dbg !2511, !ctir !52
  store i64 %239, i64* %nfiles, align 8, !dbg !2512
  call void @llvm.dbg.declare(metadata i64* %i412, metadata !2513, metadata !DIExpression()), !dbg !2515
  store i64 0, i64* %i412, align 8, !dbg !2515
  br label %for.cond413, !dbg !2516

for.cond413:                                      ; preds = %for.inc437, %if.then409
  %240 = load i64, i64* %i412, align 8, !dbg !2517
  %241 = load i64, i64* %nfiles, align 8, !dbg !2519
  %cmp414 = icmp ult i64 %240, %241, !dbg !2520
  br i1 %cmp414, label %for.body416, label %for.end439, !dbg !2521

for.body416:                                      ; preds = %for.cond413
  %242 = load i8**, i8*** %files, align 8, !dbg !2522
  %243 = load i64, i64* %i412, align 8, !dbg !2522
  %arrayidx417 = getelementptr inbounds i8*, i8** %242, i64 %243, !dbg !2522, !ctir !178
  %244 = load i8*, i8** %arrayidx417, align 8, !dbg !2522
  %call418 = call i32 @strcmp(i8* %244, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #14, !dbg !2522
  %cmp419 = icmp eq i32 %call418, 0, !dbg !2522
  br i1 %cmp419, label %if.then421, label %if.else425, !dbg !2525

if.then421:                                       ; preds = %for.body416
  %call422 = call i8* @gettext(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.55, i64 0, i64 0)) #12, !dbg !2526
  %245 = load i8**, i8*** %files, align 8, !dbg !2526
  %246 = load i64, i64* %i412, align 8, !dbg !2526
  %arrayidx423 = getelementptr inbounds i8*, i8** %245, i64 %246, !dbg !2526, !ctir !178
  %247 = load i8*, i8** %arrayidx423, align 8, !dbg !2526
  %call424 = call i8* @quotearg_style(i32 4, i8* %247), !dbg !2526
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call422, i8* %call424), !dbg !2526
  unreachable, !dbg !2526

if.else425:                                       ; preds = %for.body416
  %248 = load i8**, i8*** %files, align 8, !dbg !2527
  %249 = load i64, i64* %i412, align 8, !dbg !2529
  %arrayidx426 = getelementptr inbounds i8*, i8** %248, i64 %249, !dbg !2527, !ctir !178
  %250 = load i8*, i8** %arrayidx426, align 8, !dbg !2527
  %arrayidx427 = getelementptr inbounds i8, i8* %250, i64 0, !dbg !2527, !ctir !7
  %251 = load i8, i8* %arrayidx427, align 1, !dbg !2527
  %conv428 = sext i8 %251 to i32, !dbg !2527
  %cmp429 = icmp eq i32 %conv428, 0, !dbg !2530
  br i1 %cmp429, label %if.then431, label %if.end435, !dbg !2531

if.then431:                                       ; preds = %if.else425
  call void @llvm.dbg.declare(metadata i64* %file_number, metadata !2532, metadata !DIExpression()), !dbg !2534
  %252 = load i64, i64* %i412, align 8, !dbg !2535
  %add432 = add i64 %252, 1, !dbg !2536
  store i64 %add432, i64* %file_number, align 8, !dbg !2534
  %call433 = call i8* @gettext(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.56, i64 0, i64 0)) #12, !dbg !2537
  %253 = load i8*, i8** %files_from, align 8, !dbg !2537
  %call434 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %253), !dbg !2537
  %254 = load i64, i64* %file_number, align 8, !dbg !2537
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call433, i8* %call434, i64 %254), !dbg !2537
  unreachable, !dbg !2537

if.end435:                                        ; preds = %if.else425
  br label %if.end436

if.end436:                                        ; preds = %if.end435
  br label %for.inc437, !dbg !2538

for.inc437:                                       ; preds = %if.end436
  %255 = load i64, i64* %i412, align 8, !dbg !2539
  %inc438 = add i64 %255, 1, !dbg !2539
  store i64 %inc438, i64* %i412, align 8, !dbg !2539
  br label %for.cond413, !dbg !2540, !llvm.loop !2541

for.end439:                                       ; preds = %for.cond413
  br label %if.end443, !dbg !2543

if.else440:                                       ; preds = %if.end407
  %call441 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i64 0, i64 0)) #12, !dbg !2544
  %256 = load i8*, i8** %files_from, align 8, !dbg !2544
  %call442 = call i8* @quotearg_style(i32 4, i8* %256), !dbg !2544
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call441, i8* %call442), !dbg !2544
  unreachable, !dbg !2544

if.end443:                                        ; preds = %for.end439
  br label %if.end444, !dbg !2545

if.end444:                                        ; preds = %if.end443, %while.end
  %257 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !2546
  store %struct.keyfield* %257, %struct.keyfield** %key, align 8, !dbg !2548
  br label %for.cond445, !dbg !2549

for.cond445:                                      ; preds = %for.inc492, %if.end444
  %258 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2550
  %tobool446 = icmp ne %struct.keyfield* %258, null, !dbg !2552
  br i1 %tobool446, label %for.body447, label %for.end493, !dbg !2552

for.body447:                                      ; preds = %for.cond445
  %259 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2553
  %call448 = call zeroext i1 @default_key_compare(%struct.keyfield* %259), !dbg !2556
  br i1 %call448, label %land.lhs.true450, label %if.end483, !dbg !2557

land.lhs.true450:                                 ; preds = %for.body447
  %260 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2558
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %260, i32 0, i32 13, !dbg !2559, !ctir !153
  %261 = load i8, i8* %reverse, align 1, !dbg !2559
  %tobool451 = trunc i8 %261 to i1, !dbg !2559, !ctir !162
  br i1 %tobool451, label %if.end483, label %if.then452, !dbg !2560

if.then452:                                       ; preds = %land.lhs.true450
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 4, !dbg !2561, !ctir !153
  %262 = load i8*, i8** %ignore, align 8, !dbg !2561, !ctir !160
  %263 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2563
  %ignore453 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %263, i32 0, i32 4, !dbg !2564, !ctir !153
  store i8* %262, i8** %ignore453, align 8, !dbg !2565, !ctir !160
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 5, !dbg !2566, !ctir !153
  %264 = load i8*, i8** %translate, align 8, !dbg !2566, !ctir !90
  %265 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2567
  %translate454 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %265, i32 0, i32 5, !dbg !2568, !ctir !153
  store i8* %264, i8** %translate454, align 8, !dbg !2569, !ctir !90
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 6, !dbg !2570, !ctir !153
  %266 = load i8, i8* %skipsblanks, align 8, !dbg !2570
  %tobool455 = trunc i8 %266 to i1, !dbg !2570, !ctir !162
  %267 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2571
  %skipsblanks456 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %267, i32 0, i32 6, !dbg !2572, !ctir !153
  %frombool457 = zext i1 %tobool455 to i8, !dbg !2573
  store i8 %frombool457, i8* %skipsblanks456, align 8, !dbg !2573, !ctir !162
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 7, !dbg !2574, !ctir !153
  %268 = load i8, i8* %skipeblanks, align 1, !dbg !2574
  %tobool458 = trunc i8 %268 to i1, !dbg !2574, !ctir !162
  %269 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2575
  %skipeblanks459 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %269, i32 0, i32 7, !dbg !2576, !ctir !153
  %frombool460 = zext i1 %tobool458 to i8, !dbg !2577
  store i8 %frombool460, i8* %skipeblanks459, align 1, !dbg !2577, !ctir !162
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 12, !dbg !2578, !ctir !153
  %270 = load i8, i8* %month, align 2, !dbg !2578
  %tobool461 = trunc i8 %270 to i1, !dbg !2578, !ctir !162
  %271 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2579
  %month462 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %271, i32 0, i32 12, !dbg !2580, !ctir !153
  %frombool463 = zext i1 %tobool461 to i8, !dbg !2581
  store i8 %frombool463, i8* %month462, align 2, !dbg !2581, !ctir !162
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 8, !dbg !2582, !ctir !153
  %272 = load i8, i8* %numeric, align 2, !dbg !2582
  %tobool464 = trunc i8 %272 to i1, !dbg !2582, !ctir !162
  %273 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2583
  %numeric465 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %273, i32 0, i32 8, !dbg !2584, !ctir !153
  %frombool466 = zext i1 %tobool464 to i8, !dbg !2585
  store i8 %frombool466, i8* %numeric465, align 2, !dbg !2585, !ctir !162
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 10, !dbg !2586, !ctir !153
  %274 = load i8, i8* %general_numeric, align 4, !dbg !2586
  %tobool467 = trunc i8 %274 to i1, !dbg !2586, !ctir !162
  %275 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2587
  %general_numeric468 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %275, i32 0, i32 10, !dbg !2588, !ctir !153
  %frombool469 = zext i1 %tobool467 to i8, !dbg !2589
  store i8 %frombool469, i8* %general_numeric468, align 4, !dbg !2589, !ctir !162
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 11, !dbg !2590, !ctir !153
  %276 = load i8, i8* %human_numeric, align 1, !dbg !2590
  %tobool470 = trunc i8 %276 to i1, !dbg !2590, !ctir !162
  %277 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2591
  %human_numeric471 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %277, i32 0, i32 11, !dbg !2592, !ctir !153
  %frombool472 = zext i1 %tobool470 to i8, !dbg !2593
  store i8 %frombool472, i8* %human_numeric471, align 1, !dbg !2593, !ctir !162
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 14, !dbg !2594, !ctir !153
  %278 = load i8, i8* %version, align 8, !dbg !2594
  %tobool473 = trunc i8 %278 to i1, !dbg !2594, !ctir !162
  %279 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2595
  %version474 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %279, i32 0, i32 14, !dbg !2596, !ctir !153
  %frombool475 = zext i1 %tobool473 to i8, !dbg !2597
  store i8 %frombool475, i8* %version474, align 8, !dbg !2597, !ctir !162
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 9, !dbg !2598, !ctir !153
  %280 = load i8, i8* %random, align 1, !dbg !2598
  %tobool476 = trunc i8 %280 to i1, !dbg !2598, !ctir !162
  %281 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2599
  %random477 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %281, i32 0, i32 9, !dbg !2600, !ctir !153
  %frombool478 = zext i1 %tobool476 to i8, !dbg !2601
  store i8 %frombool478, i8* %random477, align 1, !dbg !2601, !ctir !162
  %reverse479 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 13, !dbg !2602, !ctir !153
  %282 = load i8, i8* %reverse479, align 1, !dbg !2602
  %tobool480 = trunc i8 %282 to i1, !dbg !2602, !ctir !162
  %283 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2603
  %reverse481 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %283, i32 0, i32 13, !dbg !2604, !ctir !153
  %frombool482 = zext i1 %tobool480 to i8, !dbg !2605
  store i8 %frombool482, i8* %reverse481, align 1, !dbg !2605, !ctir !162
  br label %if.end483, !dbg !2606

if.end483:                                        ; preds = %if.then452, %land.lhs.true450, %for.body447
  %284 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2607
  %random484 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %284, i32 0, i32 9, !dbg !2608, !ctir !153
  %285 = load i8, i8* %random484, align 1, !dbg !2608
  %tobool485 = trunc i8 %285 to i1, !dbg !2608, !ctir !162
  %conv486 = zext i1 %tobool485 to i32, !dbg !2607
  %286 = load i8, i8* %need_random, align 1, !dbg !2609
  %tobool487 = trunc i8 %286 to i1, !dbg !2609
  %conv488 = zext i1 %tobool487 to i32, !dbg !2609
  %or489 = or i32 %conv488, %conv486, !dbg !2609
  %tobool490 = icmp ne i32 %or489, 0, !dbg !2609
  %frombool491 = zext i1 %tobool490 to i8, !dbg !2609
  store i8 %frombool491, i8* %need_random, align 1, !dbg !2609
  br label %for.inc492, !dbg !2610

for.inc492:                                       ; preds = %if.end483
  %287 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !2611
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %287, i32 0, i32 16, !dbg !2612, !ctir !153
  %288 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !dbg !2612, !ctir !152
  store %struct.keyfield* %288, %struct.keyfield** %key, align 8, !dbg !2613
  br label %for.cond445, !dbg !2614, !llvm.loop !2615

for.end493:                                       ; preds = %for.cond445
  %289 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !2617
  %tobool494 = icmp ne %struct.keyfield* %289, null, !dbg !2617
  br i1 %tobool494, label %if.end506, label %land.lhs.true495, !dbg !2619

land.lhs.true495:                                 ; preds = %for.end493
  %call496 = call zeroext i1 @default_key_compare(%struct.keyfield* %gkey), !dbg !2620
  br i1 %call496, label %if.end506, label %if.then497, !dbg !2621

if.then497:                                       ; preds = %land.lhs.true495
  store i8 1, i8* %gkey_only, align 1, !dbg !2622
  call void @insertkey(%struct.keyfield* %gkey), !dbg !2624
  %random498 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 9, !dbg !2625, !ctir !153
  %290 = load i8, i8* %random498, align 1, !dbg !2625
  %tobool499 = trunc i8 %290 to i1, !dbg !2625, !ctir !162
  %conv500 = zext i1 %tobool499 to i32, !dbg !2626
  %291 = load i8, i8* %need_random, align 1, !dbg !2627
  %tobool501 = trunc i8 %291 to i1, !dbg !2627
  %conv502 = zext i1 %tobool501 to i32, !dbg !2627
  %or503 = or i32 %conv502, %conv500, !dbg !2627
  %tobool504 = icmp ne i32 %or503, 0, !dbg !2627
  %frombool505 = zext i1 %tobool504 to i8, !dbg !2627
  store i8 %frombool505, i8* %need_random, align 1, !dbg !2627
  br label %if.end506, !dbg !2628

if.end506:                                        ; preds = %if.then497, %land.lhs.true495, %for.end493
  call void @check_ordering_compatibility(), !dbg !2629
  %292 = load i8, i8* @debug, align 1, !dbg !2630
  %tobool507 = trunc i8 %292 to i1, !dbg !2630
  br i1 %tobool507, label %if.then508, label %if.end544, !dbg !2632

if.then508:                                       ; preds = %if.end506
  %293 = load i8, i8* %checkonly, align 1, !dbg !2633
  %conv509 = sext i8 %293 to i32, !dbg !2633
  %tobool510 = icmp ne i32 %conv509, 0, !dbg !2633
  br i1 %tobool510, label %if.then513, label %lor.lhs.false511, !dbg !2636

lor.lhs.false511:                                 ; preds = %if.then508
  %294 = load i8*, i8** %outfile, align 8, !dbg !2637
  %tobool512 = icmp ne i8* %294, null, !dbg !2637
  br i1 %tobool512, label %if.then513, label %if.end522, !dbg !2638

if.then513:                                       ; preds = %lor.lhs.false511, %if.then508
  %295 = load i8, i8* %checkonly, align 1, !dbg !2639
  %conv514 = sext i8 %295 to i32, !dbg !2639
  %tobool515 = icmp ne i32 %conv514, 0, !dbg !2639
  br i1 %tobool515, label %cond.true516, label %cond.false518, !dbg !2639

cond.true516:                                     ; preds = %if.then513
  %296 = load i8, i8* %checkonly, align 1, !dbg !2641
  %conv517 = sext i8 %296 to i32, !dbg !2641
  br label %cond.end519, !dbg !2639

cond.false518:                                    ; preds = %if.then513
  br label %cond.end519, !dbg !2639

cond.end519:                                      ; preds = %cond.false518, %cond.true516
  %cond520 = phi i32 [ %conv517, %cond.true516 ], [ 111, %cond.false518 ], !dbg !2639
  %conv521 = trunc i32 %cond520 to i8, !dbg !2642
  store i8 %conv521, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @main.opts, i64 0, i64 0), align 1, !dbg !2643
  call void @incompatible_options(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @main.opts, i64 0, i64 0)) #15, !dbg !2644
  unreachable, !dbg !2644

if.end522:                                        ; preds = %lor.lhs.false511
  %297 = load i8, i8* %locale_ok, align 1, !dbg !2645
  %tobool523 = trunc i8 %297 to i1, !dbg !2645
  br i1 %tobool523, label %if.then524, label %if.end530, !dbg !2647

if.then524:                                       ; preds = %if.end522
  %call525 = call i8* @setlocale(i32 3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)) #12, !dbg !2648
  %tobool526 = icmp ne i8* %call525, null, !dbg !2649
  %lnot527 = xor i1 %tobool526, true, !dbg !2649
  %lnot528 = xor i1 %lnot527, true, !dbg !2650
  %frombool529 = zext i1 %lnot528 to i8, !dbg !2651
  store i8 %frombool529, i8* %locale_ok, align 1, !dbg !2651
  br label %if.end530, !dbg !2652

if.end530:                                        ; preds = %if.then524, %if.end522
  %298 = load i8, i8* %locale_ok, align 1, !dbg !2653
  %tobool531 = trunc i8 %298 to i1, !dbg !2653
  br i1 %tobool531, label %if.end534, label %if.then532, !dbg !2655

if.then532:                                       ; preds = %if.end530
  %call533 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.59, i64 0, i64 0)) #12, !dbg !2656
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i64 0, i64 0), i8* %call533), !dbg !2657
  br label %if.end534, !dbg !2657

if.end534:                                        ; preds = %if.then532, %if.end530
  %299 = load i8, i8* @hard_LC_COLLATE, align 1, !dbg !2658
  %tobool535 = trunc i8 %299 to i1, !dbg !2658
  br i1 %tobool535, label %if.then536, label %if.else540, !dbg !2660

if.then536:                                       ; preds = %if.end534
  %call537 = call i8* @gettext(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.60, i64 0, i64 0)) #12, !dbg !2661
  %call538 = call i8* @setlocale(i32 3, i8* null) #12, !dbg !2662
  %call539 = call i8* @quote(i8* %call538), !dbg !2663
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call537, i8* %call539), !dbg !2664
  br label %if.end542, !dbg !2664

if.else540:                                       ; preds = %if.end534
  %call541 = call i8* @gettext(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.61, i64 0, i64 0)) #12, !dbg !2665
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i64 0, i64 0), i8* %call541), !dbg !2666
  br label %if.end542

if.end542:                                        ; preds = %if.else540, %if.then536
  %300 = load i8, i8* %gkey_only, align 1, !dbg !2667
  %tobool543 = trunc i8 %300 to i1, !dbg !2667
  call void @key_warnings(%struct.keyfield* %gkey, i1 zeroext %tobool543), !dbg !2668
  br label %if.end544, !dbg !2669

if.end544:                                        ; preds = %if.end542, %if.end506
  %reverse545 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %gkey, i32 0, i32 13, !dbg !2670, !ctir !153
  %301 = load i8, i8* %reverse545, align 1, !dbg !2670
  %tobool546 = trunc i8 %301 to i1, !dbg !2670, !ctir !162
  %frombool547 = zext i1 %tobool546 to i8, !dbg !2671
  store i8 %frombool547, i8* @reverse, align 1, !dbg !2671
  %302 = load i8, i8* %need_random, align 1, !dbg !2672
  %tobool548 = trunc i8 %302 to i1, !dbg !2672
  br i1 %tobool548, label %if.then549, label %if.end550, !dbg !2674

if.then549:                                       ; preds = %if.end544
  %303 = load i8*, i8** %random_source, align 8, !dbg !2675
  call void @random_md5_state_init(i8* %303), !dbg !2676
  br label %if.end550, !dbg !2676

if.end550:                                        ; preds = %if.then549, %if.end544
  %304 = load i64, i64* @temp_dir_count, align 8, !dbg !2677
  %cmp551 = icmp eq i64 %304, 0, !dbg !2679
  br i1 %cmp551, label %if.then553, label %if.end560, !dbg !2680

if.then553:                                       ; preds = %if.end550
  call void @llvm.dbg.declare(metadata i8** %tmp_dir, metadata !2681, metadata !DIExpression()), !dbg !2683
  %call554 = call i8* @getenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62, i64 0, i64 0)) #12, !dbg !2684
  store i8* %call554, i8** %tmp_dir, align 8, !dbg !2683
  %305 = load i8*, i8** %tmp_dir, align 8, !dbg !2685
  %tobool555 = icmp ne i8* %305, null, !dbg !2685
  br i1 %tobool555, label %cond.true556, label %cond.false557, !dbg !2685

cond.true556:                                     ; preds = %if.then553
  %306 = load i8*, i8** %tmp_dir, align 8, !dbg !2686
  br label %cond.end558, !dbg !2685

cond.false557:                                    ; preds = %if.then553
  br label %cond.end558, !dbg !2685

cond.end558:                                      ; preds = %cond.false557, %cond.true556
  %cond559 = phi i8* [ %306, %cond.true556 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0), %cond.false557 ], !dbg !2685
  call void @add_temp_dir(i8* %cond559), !dbg !2687
  br label %if.end560, !dbg !2688

if.end560:                                        ; preds = %cond.end558, %if.end550
  %307 = load i64, i64* %nfiles, align 8, !dbg !2689
  %cmp561 = icmp eq i64 %307, 0, !dbg !2691
  br i1 %cmp561, label %if.then563, label %if.end565, !dbg !2692

if.then563:                                       ; preds = %if.end560
  store i64 1, i64* %nfiles, align 8, !dbg !2693
  %308 = load i8**, i8*** %files, align 8, !dbg !2695
  %309 = bitcast i8** %308 to i8*, !dbg !2695
  call void @free(i8* %309) #12, !dbg !2696
  %call564 = call noalias i8* @xmalloc(i64 8), !dbg !2697
  %310 = bitcast i8* %call564 to i8**, !dbg !2697
  store i8** %310, i8*** %files, align 8, !dbg !2698
  %311 = load i8**, i8*** %files, align 8, !dbg !2699
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0), i8** %311, align 8, !dbg !2700, !ctir !7
  br label %if.end565, !dbg !2701

if.end565:                                        ; preds = %if.then563, %if.end560
  %312 = load i64, i64* @sort_size, align 8, !dbg !2702
  %cmp566 = icmp ult i64 0, %312, !dbg !2704
  br i1 %cmp566, label %if.then568, label %if.end578, !dbg !2705

if.then568:                                       ; preds = %if.end565
  %313 = load i64, i64* @sort_size, align 8, !dbg !2706
  %314 = load i32, i32* @nmerge, align 4, !dbg !2706
  %conv569 = zext i32 %314 to i64, !dbg !2706
  %mul = mul i64 %conv569, 34, !dbg !2706
  %cmp570 = icmp ugt i64 %313, %mul, !dbg !2706
  br i1 %cmp570, label %cond.true572, label %cond.false573, !dbg !2706

cond.true572:                                     ; preds = %if.then568
  %315 = load i64, i64* @sort_size, align 8, !dbg !2706
  br label %cond.end576, !dbg !2706

cond.false573:                                    ; preds = %if.then568
  %316 = load i32, i32* @nmerge, align 4, !dbg !2706
  %conv574 = zext i32 %316 to i64, !dbg !2706
  %mul575 = mul i64 %conv574, 34, !dbg !2706
  br label %cond.end576, !dbg !2706

cond.end576:                                      ; preds = %cond.false573, %cond.true572
  %cond577 = phi i64 [ %315, %cond.true572 ], [ %mul575, %cond.false573 ], !dbg !2706
  store i64 %cond577, i64* @sort_size, align 8, !dbg !2707
  br label %if.end578, !dbg !2708

if.end578:                                        ; preds = %cond.end576, %if.end565
  %317 = load i8, i8* %checkonly, align 1, !dbg !2709
  %tobool579 = icmp ne i8 %317, 0, !dbg !2709
  br i1 %tobool579, label %if.then580, label %if.end596, !dbg !2711

if.then580:                                       ; preds = %if.end578
  %318 = load i64, i64* %nfiles, align 8, !dbg !2712
  %cmp581 = icmp ugt i64 %318, 1, !dbg !2715
  br i1 %cmp581, label %if.then583, label %if.end588, !dbg !2716

if.then583:                                       ; preds = %if.then580
  %call584 = call i8* @gettext(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.63, i64 0, i64 0)) #12, !dbg !2717
  %319 = load i8**, i8*** %files, align 8, !dbg !2717
  %arrayidx585 = getelementptr inbounds i8*, i8** %319, i64 1, !dbg !2717, !ctir !178
  %320 = load i8*, i8** %arrayidx585, align 8, !dbg !2717
  %call586 = call i8* @quotearg_style(i32 4, i8* %320), !dbg !2717
  %321 = load i8, i8* %checkonly, align 1, !dbg !2717
  %conv587 = sext i8 %321 to i32, !dbg !2717
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call584, i8* %call586, i32 %conv587), !dbg !2717
  unreachable, !dbg !2717

if.end588:                                        ; preds = %if.then580
  %322 = load i8*, i8** %outfile, align 8, !dbg !2718
  %tobool589 = icmp ne i8* %322, null, !dbg !2718
  br i1 %tobool589, label %if.then590, label %if.end591, !dbg !2720

if.then590:                                       ; preds = %if.end588
  %323 = load i8, i8* %checkonly, align 1, !dbg !2721
  store i8 %323, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @main.opts.64, i64 0, i64 0), align 1, !dbg !2723
  call void @incompatible_options(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @main.opts.64, i64 0, i64 0)) #15, !dbg !2724
  unreachable, !dbg !2724

if.end591:                                        ; preds = %if.end588
  %324 = load i8**, i8*** %files, align 8, !dbg !2725
  %arrayidx592 = getelementptr inbounds i8*, i8** %324, i64 0, !dbg !2725, !ctir !178
  %325 = load i8*, i8** %arrayidx592, align 8, !dbg !2725
  %326 = load i8, i8* %checkonly, align 1, !dbg !2726
  %call593 = call zeroext i1 @check(i8* %325, i8 signext %326), !dbg !2727
  %327 = zext i1 %call593 to i64, !dbg !2727
  %cond595 = select i1 %call593, i32 0, i32 1, !dbg !2727
  store i32 %cond595, i32* %retval, align 4, !dbg !2728
  br label %return, !dbg !2728

if.end596:                                        ; preds = %if.end578
  %328 = load i8**, i8*** %files, align 8, !dbg !2729
  %329 = load i64, i64* %nfiles, align 8, !dbg !2730
  call void @check_inputs(i8** %328, i64 %329), !dbg !2731
  %330 = load i8*, i8** %outfile, align 8, !dbg !2732
  call void @check_output(i8* %330), !dbg !2733
  %331 = load i8, i8* %mergeonly, align 1, !dbg !2734
  %tobool597 = trunc i8 %331 to i1, !dbg !2734
  br i1 %tobool597, label %if.then598, label %if.else610, !dbg !2736

if.then598:                                       ; preds = %if.end596
  call void @llvm.dbg.declare(metadata %struct.sortfile** %sortfiles, metadata !2737, metadata !DIExpression()), !dbg !2739
  %332 = load i64, i64* %nfiles, align 8, !dbg !2740
  %call599 = call noalias i8* @xcalloc(i64 %332, i64 16), !dbg !2741
  %333 = bitcast i8* %call599 to %struct.sortfile*, !dbg !2741
  store %struct.sortfile* %333, %struct.sortfile** %sortfiles, align 8, !dbg !2739
  call void @llvm.dbg.declare(metadata i64* %i600, metadata !2742, metadata !DIExpression()), !dbg !2744
  store i64 0, i64* %i600, align 8, !dbg !2744
  br label %for.cond601, !dbg !2745

for.cond601:                                      ; preds = %for.inc607, %if.then598
  %334 = load i64, i64* %i600, align 8, !dbg !2746
  %335 = load i64, i64* %nfiles, align 8, !dbg !2748
  %cmp602 = icmp ult i64 %334, %335, !dbg !2749
  br i1 %cmp602, label %for.body604, label %for.end609, !dbg !2750

for.body604:                                      ; preds = %for.cond601
  %336 = load i8**, i8*** %files, align 8, !dbg !2751
  %337 = load i64, i64* %i600, align 8, !dbg !2752
  %arrayidx605 = getelementptr inbounds i8*, i8** %336, i64 %337, !dbg !2751, !ctir !178
  %338 = load i8*, i8** %arrayidx605, align 8, !dbg !2751
  %339 = load %struct.sortfile*, %struct.sortfile** %sortfiles, align 8, !dbg !2753
  %340 = load i64, i64* %i600, align 8, !dbg !2754
  %arrayidx606 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %339, i64 %340, !dbg !2753, !ctir !402
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx606, i32 0, i32 0, !dbg !2755, !ctir !403
  store i8* %338, i8** %name, align 8, !dbg !2756, !ctir !90
  br label %for.inc607, !dbg !2753

for.inc607:                                       ; preds = %for.body604
  %341 = load i64, i64* %i600, align 8, !dbg !2757
  %inc608 = add i64 %341, 1, !dbg !2757
  store i64 %inc608, i64* %i600, align 8, !dbg !2757
  br label %for.cond601, !dbg !2758, !llvm.loop !2759

for.end609:                                       ; preds = %for.cond601
  %342 = load %struct.sortfile*, %struct.sortfile** %sortfiles, align 8, !dbg !2761
  %343 = load i64, i64* %nfiles, align 8, !dbg !2762
  %344 = load i8*, i8** %outfile, align 8, !dbg !2763
  call void @merge(%struct.sortfile* %342, i64 0, i64 %343, i8* %344), !dbg !2764
  br label %if.end627, !dbg !2765

if.else610:                                       ; preds = %if.end596
  %345 = load i64, i64* %nthreads, align 8, !dbg !2766
  %tobool611 = icmp ne i64 %345, 0, !dbg !2766
  br i1 %tobool611, label %if.end620, label %if.then612, !dbg !2769

if.then612:                                       ; preds = %if.else610
  call void @llvm.dbg.declare(metadata i64* %np, metadata !2770, metadata !DIExpression()), !dbg !2772
  %call613 = call i64 @num_processors(i32 2), !dbg !2773
  store i64 %call613, i64* %np, align 8, !dbg !2772
  %346 = load i64, i64* %np, align 8, !dbg !2774
  %cmp614 = icmp ult i64 %346, 8, !dbg !2774
  br i1 %cmp614, label %cond.true616, label %cond.false617, !dbg !2774

cond.true616:                                     ; preds = %if.then612
  %347 = load i64, i64* %np, align 8, !dbg !2774
  br label %cond.end618, !dbg !2774

cond.false617:                                    ; preds = %if.then612
  br label %cond.end618, !dbg !2774

cond.end618:                                      ; preds = %cond.false617, %cond.true616
  %cond619 = phi i64 [ %347, %cond.true616 ], [ 8, %cond.false617 ], !dbg !2774
  store i64 %cond619, i64* %nthreads, align 8, !dbg !2775
  br label %if.end620, !dbg !2776

if.end620:                                        ; preds = %cond.end618, %if.else610
  call void @llvm.dbg.declare(metadata i64* %nthreads_max, metadata !2777, metadata !DIExpression()), !dbg !2778
  store i64 72057594037927935, i64* %nthreads_max, align 8, !dbg !2778
  %348 = load i64, i64* %nthreads, align 8, !dbg !2779
  %349 = load i64, i64* %nthreads_max, align 8, !dbg !2779
  %cmp621 = icmp ult i64 %348, %349, !dbg !2779
  br i1 %cmp621, label %cond.true623, label %cond.false624, !dbg !2779

cond.true623:                                     ; preds = %if.end620
  %350 = load i64, i64* %nthreads, align 8, !dbg !2779
  br label %cond.end625, !dbg !2779

cond.false624:                                    ; preds = %if.end620
  %351 = load i64, i64* %nthreads_max, align 8, !dbg !2779
  br label %cond.end625, !dbg !2779

cond.end625:                                      ; preds = %cond.false624, %cond.true623
  %cond626 = phi i64 [ %350, %cond.true623 ], [ %351, %cond.false624 ], !dbg !2779
  store i64 %cond626, i64* %nthreads, align 8, !dbg !2780
  %352 = load i8**, i8*** %files, align 8, !dbg !2781
  %353 = load i64, i64* %nfiles, align 8, !dbg !2782
  %354 = load i8*, i8** %outfile, align 8, !dbg !2783
  %355 = load i64, i64* %nthreads, align 8, !dbg !2784
  call void @sort(i8** %352, i64 %353, i8* %354, i64 %355), !dbg !2785
  br label %if.end627

if.end627:                                        ; preds = %cond.end625, %for.end609
  %356 = load i8, i8* @have_read_stdin, align 1, !dbg !2786
  %tobool628 = trunc i8 %356 to i1, !dbg !2786
  br i1 %tobool628, label %land.lhs.true630, label %if.end636, !dbg !2788

land.lhs.true630:                                 ; preds = %if.end627
  %357 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2789
  %call631 = call i32 @rpl_fclose(%struct._IO_FILE* %357), !dbg !2790
  %cmp632 = icmp eq i32 %call631, -1, !dbg !2791
  br i1 %cmp632, label %if.then634, label %if.end636, !dbg !2792

if.then634:                                       ; preds = %land.lhs.true630
  %call635 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0)) #12, !dbg !2793
  call void @sort_die(i8* %call635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #15, !dbg !2794
  unreachable, !dbg !2794

if.end636:                                        ; preds = %land.lhs.true630, %if.end627
  store i32 0, i32* %retval, align 4, !dbg !2795
  br label %return, !dbg !2795

return:                                           ; preds = %if.end636, %if.end591
  %358 = load i32, i32* %retval, align 4, !dbg !2796
  ret i32 %358, !dbg !2796
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initialize_exit_failure(i32 %status) #4 !dbg !2797 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, i32* %status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !2798, metadata !DIExpression()), !dbg !2799
  %0 = load i32, i32* %status.addr, align 4, !dbg !2800
  %cmp = icmp ne i32 %0, 1, !dbg !2802
  br i1 %cmp, label %if.then, label %if.end, !dbg !2803

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %status.addr, align 4, !dbg !2804
  store volatile i32 %1, i32* @exit_failure, align 4, !dbg !2805
  br label %if.end, !dbg !2806

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2807
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @to_uchar(i8 signext %ch) #4 !dbg !2808 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !2811, metadata !DIExpression()), !dbg !2812
  %0 = load i8, i8* %ch.addr, align 1, !dbg !2813
  ret i8 %0, !dbg !2814
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @inittables() #4 !dbg !2815 {
entry:
  %i = alloca i64, align 8, !ctir !52
  %s = alloca i8*, align 8, !ctir !90
  %s_len = alloca i64, align 8, !ctir !52
  %j = alloca i64, align 8, !ctir !52
  %k = alloca i64, align 8, !ctir !52
  %name = alloca i8*, align 8, !ctir !7
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2816, metadata !DIExpression()), !dbg !2817
  store i64 0, i64* %i, align 8, !dbg !2818
  br label %for.cond, !dbg !2820

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !2821
  %cmp = icmp ult i64 %0, 256, !dbg !2823
  br i1 %cmp, label %for.body, label %for.end, !dbg !2824

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %i, align 8, !dbg !2825
  %conv = trunc i64 %1 to i8, !dbg !2825
  %call = call zeroext i1 @field_sep(i8 zeroext %conv), !dbg !2827
  %2 = load i64, i64* %i, align 8, !dbg !2828
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %2, !dbg !2829, !ctir !448
  %frombool = zext i1 %call to i8, !dbg !2830
  store i8 %frombool, i8* %arrayidx, align 1, !dbg !2830
  %call1 = call i16** @__ctype_b_loc() #16, !dbg !2831
  %3 = load i16*, i16** %call1, align 8, !dbg !2831, !ctir !451
  %4 = load i64, i64* %i, align 8, !dbg !2831
  %conv2 = trunc i64 %4 to i32, !dbg !2831
  %idxprom = sext i32 %conv2 to i64, !dbg !2831
  %arrayidx3 = getelementptr inbounds i16, i16* %3, i64 %idxprom, !dbg !2831, !ctir !451
  %5 = load i16, i16* %arrayidx3, align 2, !dbg !2831
  %conv4 = zext i16 %5 to i32, !dbg !2831
  %and = and i32 %conv4, 16384, !dbg !2831
  %tobool = icmp ne i32 %and, 0, !dbg !2832
  %lnot = xor i1 %tobool, true, !dbg !2832
  %6 = load i64, i64* %i, align 8, !dbg !2833
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @nonprinting, i64 0, i64 %6, !dbg !2834, !ctir !448
  %frombool6 = zext i1 %lnot to i8, !dbg !2835
  store i8 %frombool6, i8* %arrayidx5, align 1, !dbg !2835
  %call7 = call i16** @__ctype_b_loc() #16, !dbg !2836
  %7 = load i16*, i16** %call7, align 8, !dbg !2836, !ctir !451
  %8 = load i64, i64* %i, align 8, !dbg !2836
  %conv8 = trunc i64 %8 to i32, !dbg !2836
  %idxprom9 = sext i32 %conv8 to i64, !dbg !2836
  %arrayidx10 = getelementptr inbounds i16, i16* %7, i64 %idxprom9, !dbg !2836, !ctir !451
  %9 = load i16, i16* %arrayidx10, align 2, !dbg !2836
  %conv11 = zext i16 %9 to i32, !dbg !2836
  %and12 = and i32 %conv11, 8, !dbg !2836
  %tobool13 = icmp ne i32 %and12, 0, !dbg !2836
  br i1 %tobool13, label %land.end, label %land.rhs, !dbg !2837

land.rhs:                                         ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !dbg !2838
  %conv14 = trunc i64 %10 to i8, !dbg !2838
  %call15 = call zeroext i1 @field_sep(i8 zeroext %conv14), !dbg !2839
  %lnot16 = xor i1 %call15, true, !dbg !2840
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %11 = phi i1 [ false, %for.body ], [ %lnot16, %land.rhs ], !dbg !2841
  %12 = load i64, i64* %i, align 8, !dbg !2842
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @nondictionary, i64 0, i64 %12, !dbg !2843, !ctir !448
  %frombool18 = zext i1 %11 to i8, !dbg !2844
  store i8 %frombool18, i8* %arrayidx17, align 1, !dbg !2844
  %13 = load i64, i64* %i, align 8, !dbg !2845
  %conv19 = trunc i64 %13 to i32, !dbg !2845
  %call20 = call i32 @toupper(i32 %conv19) #14, !dbg !2846
  %conv21 = trunc i32 %call20 to i8, !dbg !2846
  %14 = load i64, i64* %i, align 8, !dbg !2847
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %14, !dbg !2848, !ctir !453
  store i8 %conv21, i8* %arrayidx22, align 1, !dbg !2849
  br label %for.inc, !dbg !2850

for.inc:                                          ; preds = %land.end
  %15 = load i64, i64* %i, align 8, !dbg !2851
  %inc = add i64 %15, 1, !dbg !2851
  store i64 %inc, i64* %i, align 8, !dbg !2851
  br label %for.cond, !dbg !2852, !llvm.loop !2853

for.end:                                          ; preds = %for.cond
  %16 = load i8, i8* @hard_LC_TIME, align 1, !dbg !2855
  %tobool23 = trunc i8 %16 to i1, !dbg !2855
  br i1 %tobool23, label %if.then, label %if.end65, !dbg !2857

if.then:                                          ; preds = %for.end
  store i64 0, i64* %i, align 8, !dbg !2858
  br label %for.cond24, !dbg !2861

for.cond24:                                       ; preds = %for.inc62, %if.then
  %17 = load i64, i64* %i, align 8, !dbg !2862
  %cmp25 = icmp ult i64 %17, 12, !dbg !2864
  br i1 %cmp25, label %for.body27, label %for.end64, !dbg !2865

for.body27:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata i8** %s, metadata !2866, metadata !DIExpression()), !dbg !2868
  call void @llvm.dbg.declare(metadata i64* %s_len, metadata !2869, metadata !DIExpression()), !dbg !2870
  call void @llvm.dbg.declare(metadata i64* %j, metadata !2871, metadata !DIExpression()), !dbg !2872
  call void @llvm.dbg.declare(metadata i64* %k, metadata !2873, metadata !DIExpression()), !dbg !2874
  call void @llvm.dbg.declare(metadata i8** %name, metadata !2875, metadata !DIExpression()), !dbg !2876
  %18 = load i64, i64* %i, align 8, !dbg !2877
  %add = add i64 131086, %18, !dbg !2878
  %conv28 = trunc i64 %add to i32, !dbg !2879
  %call29 = call i8* @rpl_nl_langinfo(i32 %conv28), !dbg !2880
  store i8* %call29, i8** %s, align 8, !dbg !2881
  %19 = load i8*, i8** %s, align 8, !dbg !2882
  %call30 = call i64 @strlen(i8* %19) #14, !dbg !2883
  store i64 %call30, i64* %s_len, align 8, !dbg !2884
  %20 = load i64, i64* %s_len, align 8, !dbg !2885
  %add31 = add i64 %20, 1, !dbg !2886
  %call32 = call noalias i8* @xmalloc(i64 %add31), !dbg !2887
  store i8* %call32, i8** %name, align 8, !dbg !2888
  %21 = load i64, i64* %i, align 8, !dbg !2889
  %arrayidx33 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %21, !dbg !2890, !ctir !454
  %name34 = getelementptr inbounds %struct.month, %struct.month* %arrayidx33, i32 0, i32 0, !dbg !2891, !ctir !455
  store i8* %call32, i8** %name34, align 16, !dbg !2892, !ctir !90
  %22 = load i64, i64* %i, align 8, !dbg !2893
  %add35 = add i64 %22, 1, !dbg !2894
  %conv36 = trunc i64 %add35 to i32, !dbg !2893
  %23 = load i64, i64* %i, align 8, !dbg !2895
  %arrayidx37 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %23, !dbg !2896, !ctir !454
  %val = getelementptr inbounds %struct.month, %struct.month* %arrayidx37, i32 0, i32 1, !dbg !2897, !ctir !455
  store i32 %conv36, i32* %val, align 8, !dbg !2898, !ctir !5
  store i64 0, i64* %k, align 8, !dbg !2899
  store i64 0, i64* %j, align 8, !dbg !2901
  br label %for.cond38, !dbg !2902

for.cond38:                                       ; preds = %for.inc58, %for.body27
  %24 = load i64, i64* %j, align 8, !dbg !2903
  %25 = load i64, i64* %s_len, align 8, !dbg !2905
  %cmp39 = icmp ult i64 %24, %25, !dbg !2906
  br i1 %cmp39, label %for.body41, label %for.end60, !dbg !2907

for.body41:                                       ; preds = %for.cond38
  %call42 = call i16** @__ctype_b_loc() #16, !dbg !2908
  %26 = load i16*, i16** %call42, align 8, !dbg !2908, !ctir !451
  %27 = load i8*, i8** %s, align 8, !dbg !2908
  %28 = load i64, i64* %j, align 8, !dbg !2908
  %arrayidx43 = getelementptr inbounds i8, i8* %27, i64 %28, !dbg !2908, !ctir !90
  %29 = load i8, i8* %arrayidx43, align 1, !dbg !2908
  %call44 = call zeroext i8 @to_uchar(i8 signext %29), !dbg !2908
  %conv45 = zext i8 %call44 to i32, !dbg !2908
  %idxprom46 = sext i32 %conv45 to i64, !dbg !2908
  %arrayidx47 = getelementptr inbounds i16, i16* %26, i64 %idxprom46, !dbg !2908, !ctir !451
  %30 = load i16, i16* %arrayidx47, align 2, !dbg !2908
  %conv48 = zext i16 %30 to i32, !dbg !2908
  %and49 = and i32 %conv48, 1, !dbg !2908
  %tobool50 = icmp ne i32 %and49, 0, !dbg !2908
  br i1 %tobool50, label %if.end, label %if.then51, !dbg !2910

if.then51:                                        ; preds = %for.body41
  %31 = load i8*, i8** %s, align 8, !dbg !2911
  %32 = load i64, i64* %j, align 8, !dbg !2912
  %arrayidx52 = getelementptr inbounds i8, i8* %31, i64 %32, !dbg !2911, !ctir !90
  %33 = load i8, i8* %arrayidx52, align 1, !dbg !2911
  %call53 = call zeroext i8 @to_uchar(i8 signext %33), !dbg !2913
  %idxprom54 = zext i8 %call53 to i64, !dbg !2914
  %arrayidx55 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom54, !dbg !2914, !ctir !453
  %34 = load i8, i8* %arrayidx55, align 1, !dbg !2914
  %35 = load i8*, i8** %name, align 8, !dbg !2915
  %36 = load i64, i64* %k, align 8, !dbg !2916
  %inc56 = add i64 %36, 1, !dbg !2916
  store i64 %inc56, i64* %k, align 8, !dbg !2916
  %arrayidx57 = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !2915, !ctir !7
  store i8 %34, i8* %arrayidx57, align 1, !dbg !2917
  br label %if.end, !dbg !2915

if.end:                                           ; preds = %if.then51, %for.body41
  br label %for.inc58, !dbg !2908

for.inc58:                                        ; preds = %if.end
  %37 = load i64, i64* %j, align 8, !dbg !2918
  %inc59 = add i64 %37, 1, !dbg !2918
  store i64 %inc59, i64* %j, align 8, !dbg !2918
  br label %for.cond38, !dbg !2919, !llvm.loop !2920

for.end60:                                        ; preds = %for.cond38
  %38 = load i8*, i8** %name, align 8, !dbg !2922
  %39 = load i64, i64* %k, align 8, !dbg !2923
  %arrayidx61 = getelementptr inbounds i8, i8* %38, i64 %39, !dbg !2922, !ctir !7
  store i8 0, i8* %arrayidx61, align 1, !dbg !2924
  br label %for.inc62, !dbg !2925

for.inc62:                                        ; preds = %for.end60
  %40 = load i64, i64* %i, align 8, !dbg !2926
  %inc63 = add i64 %40, 1, !dbg !2926
  store i64 %inc63, i64* %i, align 8, !dbg !2926
  br label %for.cond24, !dbg !2927, !llvm.loop !2928

for.end64:                                        ; preds = %for.cond24
  call void @qsort(i8* bitcast ([12 x %struct.month]* @monthtab to i8*), i64 12, i64 16, i32 (i8*, i8*)* @struct_month_cmp), !dbg !2930
  br label %if.end65, !dbg !2931

if.end65:                                         ; preds = %for.end64, %for.end
  ret void, !dbg !2932
}

; Function Attrs: nounwind
declare dso_local i32 @sigemptyset(%struct.__sigset_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #2

; Function Attrs: nounwind
declare dso_local i32 @sigaddset(%struct.__sigset_t*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sighandler(i32 %sig) #4 !dbg !2933 {
entry:
  %sig.addr = alloca i32, align 4
  store i32 %sig, i32* %sig.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sig.addr, metadata !2934, metadata !DIExpression()), !dbg !2935
  call void @cleanup(), !dbg !2936
  %0 = load i32, i32* %sig.addr, align 4, !dbg !2937
  %call = call void (i32)* @signal(i32 %0, void (i32)* null) #12, !dbg !2938
  %1 = load i32, i32* %sig.addr, align 4, !dbg !2939
  %call1 = call i32 @raise(i32 %1) #12, !dbg !2940
  ret void, !dbg !2941
}

; Function Attrs: nounwind
declare dso_local i32 @sigismember(%struct.__sigset_t*, i32) #2

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @exit_cleanup() #4 !dbg !2942 {
entry:
  %cs = alloca %struct.cs_status, align 8, !ctir !2943
  %0 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !dbg !2947
  %tobool = icmp ne %struct.tempnode* %0, null, !dbg !2947
  br i1 %tobool, label %if.then, label %if.end, !dbg !2949

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.cs_status* %cs, metadata !2950, metadata !DIExpression()), !dbg !2952
  call void @cs_enter(%struct.cs_status* %cs), !dbg !2953
  call void @cleanup(), !dbg !2954
  call void @cs_leave(%struct.cs_status* %cs), !dbg !2955
  br label %if.end, !dbg !2956

if.end:                                           ; preds = %if.then, %entry
  call void @close_stdout(), !dbg !2957
  ret void, !dbg !2958
}

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.keyfield* @key_init(%struct.keyfield* %key) #4 !dbg !2959 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !2962, metadata !DIExpression()), !dbg !2963
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !2964
  %1 = bitcast %struct.keyfield* %0 to i8*, !dbg !2965
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 72, i1 false), !dbg !2965
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !2966
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 2, !dbg !2967, !ctir !153
  store i64 -1, i64* %eword, align 8, !dbg !2968, !ctir !52
  %3 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !2969
  ret %struct.keyfield* %3, !dbg !2970
}

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_field_count(i8* %string, i64* %val, i8* %msgid) #4 !dbg !2971 {
entry:
  %retval = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %val.addr = alloca i64*, align 8
  %msgid.addr = alloca i8*, align 8
  %suffix = alloca i8*, align 8, !ctir !7
  %n = alloca i64, align 8, !ctir !464
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !2974, metadata !DIExpression()), !dbg !2975
  store i64* %val, i64** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %val.addr, metadata !2976, metadata !DIExpression()), !dbg !2977
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !2978, metadata !DIExpression()), !dbg !2979
  call void @llvm.dbg.declare(metadata i8** %suffix, metadata !2980, metadata !DIExpression()), !dbg !2981
  call void @llvm.dbg.declare(metadata i64* %n, metadata !2982, metadata !DIExpression()), !dbg !2983
  %0 = load i8*, i8** %string.addr, align 8, !dbg !2984
  %call = call i32 @xstrtoumax(i8* %0, i8** %suffix, i32 10, i64* %n, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)), !dbg !2985
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb1
    i32 3, label %sw.bb1
    i32 4, label %sw.bb2
  ], !dbg !2986

sw.bb:                                            ; preds = %entry, %entry
  %1 = load i64, i64* %n, align 8, !dbg !2987
  %2 = load i64*, i64** %val.addr, align 8, !dbg !2989
  store i64 %1, i64* %2, align 8, !dbg !2990, !ctir !52
  %3 = load i64*, i64** %val.addr, align 8, !dbg !2991
  %4 = load i64, i64* %3, align 8, !dbg !2993, !ctir !52
  %5 = load i64, i64* %n, align 8, !dbg !2994
  %cmp = icmp eq i64 %4, %5, !dbg !2995
  br i1 %cmp, label %if.then, label %if.end, !dbg !2996

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !2997

if.end:                                           ; preds = %sw.bb
  br label %sw.bb1, !dbg !2998

sw.bb1:                                           ; preds = %entry, %entry, %if.end
  %6 = load i64*, i64** %val.addr, align 8, !dbg !2999
  store i64 -1, i64* %6, align 8, !dbg !3000, !ctir !52
  br label %sw.epilog, !dbg !3001

sw.bb2:                                           ; preds = %entry
  %7 = load i8*, i8** %msgid.addr, align 8, !dbg !3002
  %tobool = icmp ne i8* %7, null, !dbg !3002
  br i1 %tobool, label %if.then3, label %if.end7, !dbg !3004

if.then3:                                         ; preds = %sw.bb2
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.124, i64 0, i64 0)) #12, !dbg !3005
  %8 = load i8*, i8** %msgid.addr, align 8, !dbg !3005
  %call5 = call i8* @gettext(i8* %8) #12, !dbg !3005
  %9 = load i8*, i8** %string.addr, align 8, !dbg !3005
  %call6 = call i8* @quote(i8* %9), !dbg !3005
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call4, i8* %call5, i8* %call6), !dbg !3005
  unreachable, !dbg !3005

if.end7:                                          ; preds = %sw.bb2
  store i8* null, i8** %retval, align 8, !dbg !3006
  br label %return, !dbg !3006

sw.epilog:                                        ; preds = %entry, %sw.bb1, %if.then
  %10 = load i8*, i8** %suffix, align 8, !dbg !3007
  store i8* %10, i8** %retval, align 8, !dbg !3008
  br label %return, !dbg !3008

return:                                           ; preds = %sw.epilog, %if.end7
  %11 = load i8*, i8** %retval, align 8, !dbg !3009
  ret i8* %11, !dbg !3009
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @set_ordering(i8* %s, %struct.keyfield* %key, i32 %blanktype) #4 !dbg !3010 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %blanktype.addr = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3013, metadata !DIExpression()), !dbg !3014
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !3015, metadata !DIExpression()), !dbg !3016
  store i32 %blanktype, i32* %blanktype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %blanktype.addr, metadata !3017, metadata !DIExpression()), !dbg !3018
  br label %while.cond, !dbg !3019

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3020
  %1 = load i8, i8* %0, align 1, !dbg !3021, !ctir !91
  %tobool = icmp ne i8 %1, 0, !dbg !3019
  br i1 %tobool, label %while.body, label %while.end, !dbg !3019

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 8, !dbg !3022
  %3 = load i8, i8* %2, align 1, !dbg !3024, !ctir !91
  %conv = sext i8 %3 to i32, !dbg !3024
  switch i32 %conv, label %sw.default [
    i32 98, label %sw.bb
    i32 100, label %sw.bb11
    i32 102, label %sw.bb12
    i32 103, label %sw.bb13
    i32 104, label %sw.bb14
    i32 105, label %sw.bb15
    i32 77, label %sw.bb21
    i32 110, label %sw.bb22
    i32 82, label %sw.bb23
    i32 114, label %sw.bb24
    i32 86, label %sw.bb25
  ], !dbg !3025

sw.bb:                                            ; preds = %while.body
  %4 = load i32, i32* %blanktype.addr, align 4, !dbg !3026
  %cmp = icmp eq i32 %4, 0, !dbg !3029
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3030

lor.lhs.false:                                    ; preds = %sw.bb
  %5 = load i32, i32* %blanktype.addr, align 4, !dbg !3031
  %cmp2 = icmp eq i32 %5, 2, !dbg !3032
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3033

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  %6 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3034
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 6, !dbg !3035, !ctir !153
  store i8 1, i8* %skipsblanks, align 8, !dbg !3036, !ctir !162
  br label %if.end, !dbg !3034

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %7 = load i32, i32* %blanktype.addr, align 4, !dbg !3037
  %cmp4 = icmp eq i32 %7, 1, !dbg !3039
  br i1 %cmp4, label %if.then9, label %lor.lhs.false6, !dbg !3040

lor.lhs.false6:                                   ; preds = %if.end
  %8 = load i32, i32* %blanktype.addr, align 4, !dbg !3041
  %cmp7 = icmp eq i32 %8, 2, !dbg !3042
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !3043

if.then9:                                         ; preds = %lor.lhs.false6, %if.end
  %9 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3044
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 7, !dbg !3045, !ctir !153
  store i8 1, i8* %skipeblanks, align 1, !dbg !3046, !ctir !162
  br label %if.end10, !dbg !3044

if.end10:                                         ; preds = %if.then9, %lor.lhs.false6
  br label %sw.epilog, !dbg !3047

sw.bb11:                                          ; preds = %while.body
  %10 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3048
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %10, i32 0, i32 4, !dbg !3049, !ctir !153
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @nondictionary, i64 0, i64 0), i8** %ignore, align 8, !dbg !3050, !ctir !160
  br label %sw.epilog, !dbg !3051

sw.bb12:                                          ; preds = %while.body
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3052
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 5, !dbg !3053, !ctir !153
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 0), i8** %translate, align 8, !dbg !3054, !ctir !90
  br label %sw.epilog, !dbg !3055

sw.bb13:                                          ; preds = %while.body
  %12 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3056
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %12, i32 0, i32 10, !dbg !3057, !ctir !153
  store i8 1, i8* %general_numeric, align 4, !dbg !3058, !ctir !162
  br label %sw.epilog, !dbg !3059

sw.bb14:                                          ; preds = %while.body
  %13 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3060
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %13, i32 0, i32 11, !dbg !3061, !ctir !153
  store i8 1, i8* %human_numeric, align 1, !dbg !3062, !ctir !162
  br label %sw.epilog, !dbg !3063

sw.bb15:                                          ; preds = %while.body
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3064
  %ignore16 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 4, !dbg !3066, !ctir !153
  %15 = load i8*, i8** %ignore16, align 8, !dbg !3066, !ctir !160
  %tobool17 = icmp ne i8* %15, null, !dbg !3064
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !3067

if.then18:                                        ; preds = %sw.bb15
  %16 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3068
  %ignore19 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %16, i32 0, i32 4, !dbg !3069, !ctir !153
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @nonprinting, i64 0, i64 0), i8** %ignore19, align 8, !dbg !3070, !ctir !160
  br label %if.end20, !dbg !3068

if.end20:                                         ; preds = %if.then18, %sw.bb15
  br label %sw.epilog, !dbg !3071

sw.bb21:                                          ; preds = %while.body
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3072
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 12, !dbg !3073, !ctir !153
  store i8 1, i8* %month, align 2, !dbg !3074, !ctir !162
  br label %sw.epilog, !dbg !3075

sw.bb22:                                          ; preds = %while.body
  %18 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3076
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %18, i32 0, i32 8, !dbg !3077, !ctir !153
  store i8 1, i8* %numeric, align 2, !dbg !3078, !ctir !162
  br label %sw.epilog, !dbg !3079

sw.bb23:                                          ; preds = %while.body
  %19 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3080
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %19, i32 0, i32 9, !dbg !3081, !ctir !153
  store i8 1, i8* %random, align 1, !dbg !3082, !ctir !162
  br label %sw.epilog, !dbg !3083

sw.bb24:                                          ; preds = %while.body
  %20 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3084
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 13, !dbg !3085, !ctir !153
  store i8 1, i8* %reverse, align 1, !dbg !3086, !ctir !162
  br label %sw.epilog, !dbg !3087

sw.bb25:                                          ; preds = %while.body
  %21 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3088
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %21, i32 0, i32 14, !dbg !3089, !ctir !153
  store i8 1, i8* %version, align 8, !dbg !3090, !ctir !162
  br label %sw.epilog, !dbg !3091

sw.default:                                       ; preds = %while.body
  %22 = load i8*, i8** %s.addr, align 8, !dbg !3092
  store i8* %22, i8** %retval, align 8, !dbg !3093
  br label %return, !dbg !3093

sw.epilog:                                        ; preds = %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %if.end20, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %if.end10
  %23 = load i8*, i8** %s.addr, align 8, !dbg !3094
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !3094, !ctir !91
  store i8* %incdec.ptr, i8** %s.addr, align 8, !dbg !3094
  br label %while.cond, !dbg !3019, !llvm.loop !3095

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %s.addr, align 8, !dbg !3097
  store i8* %24, i8** %retval, align 8, !dbg !3098
  br label %return, !dbg !3098

return:                                           ; preds = %while.end, %sw.default
  %25 = load i8*, i8** %retval, align 8, !dbg !3099
  ret i8* %25, !dbg !3099
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @badfieldspec(i8* %spec, i8* %msgid) #0 !dbg !3100 {
entry:
  %spec.addr = alloca i8*, align 8
  %msgid.addr = alloca i8*, align 8
  store i8* %spec, i8** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %spec.addr, metadata !3103, metadata !DIExpression()), !dbg !3104
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !3105, metadata !DIExpression()), !dbg !3106
  %call = call i8* @gettext(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.125, i64 0, i64 0)) #12, !dbg !3107
  %0 = load i8*, i8** %msgid.addr, align 8, !dbg !3107
  %call1 = call i8* @gettext(i8* %0) #12, !dbg !3107
  %1 = load i8*, i8** %spec.addr, align 8, !dbg !3107
  %call2 = call i8* @quote(i8* %1), !dbg !3107
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call, i8* %call1, i8* %call2), !dbg !3107
  unreachable, !dbg !3107
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @insertkey(%struct.keyfield* %key_arg) #4 !dbg !3108 {
entry:
  %key_arg.addr = alloca %struct.keyfield*, align 8
  %p = alloca %struct.keyfield**, align 8, !ctir !472
  %key = alloca %struct.keyfield*, align 8, !ctir !152
  store %struct.keyfield* %key_arg, %struct.keyfield** %key_arg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key_arg.addr, metadata !3111, metadata !DIExpression()), !dbg !3112
  call void @llvm.dbg.declare(metadata %struct.keyfield*** %p, metadata !3113, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !3115, metadata !DIExpression()), !dbg !3116
  %0 = load %struct.keyfield*, %struct.keyfield** %key_arg.addr, align 8, !dbg !3117
  %1 = bitcast %struct.keyfield* %0 to i8*, !dbg !3117
  %call = call i8* @xmemdup(i8* %1, i64 72), !dbg !3118
  %2 = bitcast i8* %call to %struct.keyfield*, !dbg !3118
  store %struct.keyfield* %2, %struct.keyfield** %key, align 8, !dbg !3116
  store %struct.keyfield** @keylist, %struct.keyfield*** %p, align 8, !dbg !3119
  br label %for.cond, !dbg !3121

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !dbg !3122
  %4 = load %struct.keyfield*, %struct.keyfield** %3, align 8, !dbg !3124, !ctir !152
  %tobool = icmp ne %struct.keyfield* %4, null, !dbg !3125
  br i1 %tobool, label %for.body, label %for.end, !dbg !3125

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !3126

for.inc:                                          ; preds = %for.body
  %5 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !dbg !3127
  %6 = load %struct.keyfield*, %struct.keyfield** %5, align 8, !dbg !3128, !ctir !152
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 16, !dbg !3129, !ctir !153
  store %struct.keyfield** %next, %struct.keyfield*** %p, align 8, !dbg !3130
  br label %for.cond, !dbg !3131, !llvm.loop !3132

for.end:                                          ; preds = %for.cond
  %7 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3134
  %8 = load %struct.keyfield**, %struct.keyfield*** %p, align 8, !dbg !3135
  store %struct.keyfield* %7, %struct.keyfield** %8, align 8, !dbg !3136, !ctir !152
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3137
  %next1 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 16, !dbg !3138, !ctir !153
  store %struct.keyfield* null, %struct.keyfield** %next1, align 8, !dbg !3139, !ctir !152
  ret void, !dbg !3140
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @incompatible_options(i8* %opts) #0 !dbg !3141 {
entry:
  %opts.addr = alloca i8*, align 8
  store i8* %opts, i8** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opts.addr, metadata !3142, metadata !DIExpression()), !dbg !3143
  %call = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.134, i64 0, i64 0)) #12, !dbg !3144
  %0 = load i8*, i8** %opts.addr, align 8, !dbg !3144
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call, i8* %0), !dbg !3144
  unreachable, !dbg !3144
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @specify_nmerge(i32 %oi, i8 signext %c, i8* %s) #4 !dbg !3145 {
entry:
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %n = alloca i64, align 8, !ctir !464
  %rlimit = alloca %struct.timespec, align 8, !ctir !3148
  %e = alloca i32, align 4, !ctir !71
  %max_nmerge = alloca i32, align 4, !ctir !66
  %max_nmerge_buf = alloca [11 x i8], align 1, !ctir !333
  store i32 %oi, i32* %oi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oi.addr, metadata !3152, metadata !DIExpression()), !dbg !3153
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !3154, metadata !DIExpression()), !dbg !3155
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3156, metadata !DIExpression()), !dbg !3157
  call void @llvm.dbg.declare(metadata i64* %n, metadata !3158, metadata !DIExpression()), !dbg !3159
  call void @llvm.dbg.declare(metadata %struct.timespec* %rlimit, metadata !3160, metadata !DIExpression()), !dbg !3161
  call void @llvm.dbg.declare(metadata i32* %e, metadata !3162, metadata !DIExpression()), !dbg !3163
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3164
  %call = call i32 @xstrtoumax(i8* %0, i8** null, i32 10, i64* %n, i8* null), !dbg !3165
  store i32 %call, i32* %e, align 4, !dbg !3163
  call void @llvm.dbg.declare(metadata i32* %max_nmerge, metadata !3166, metadata !DIExpression()), !dbg !3167
  %call1 = call i32 @getrlimit(i32 7, %struct.timespec* %rlimit) #12, !dbg !3168
  %cmp = icmp eq i32 %call1, 0, !dbg !3169
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3168

cond.true:                                        ; preds = %entry
  %rlim_cur = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !3170, !ctir !3148
  %1 = load i64, i64* %rlim_cur, align 8, !dbg !3170, !ctir !473
  br label %cond.end, !dbg !3168

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %1, %cond.true ], [ 20, %cond.false ], !dbg !3168
  %sub = sub i64 %cond, 3, !dbg !3171
  %conv = trunc i64 %sub to i32, !dbg !3172
  store i32 %conv, i32* %max_nmerge, align 4, !dbg !3167
  %2 = load i32, i32* %e, align 4, !dbg !3173
  %cmp2 = icmp eq i32 %2, 0, !dbg !3175
  br i1 %cmp2, label %if.then, label %if.end26, !dbg !3176

if.then:                                          ; preds = %cond.end
  %3 = load i64, i64* %n, align 8, !dbg !3177
  %conv4 = trunc i64 %3 to i32, !dbg !3177
  store i32 %conv4, i32* @nmerge, align 4, !dbg !3179
  %4 = load i32, i32* @nmerge, align 4, !dbg !3180
  %conv5 = zext i32 %4 to i64, !dbg !3180
  %5 = load i64, i64* %n, align 8, !dbg !3182
  %cmp6 = icmp ne i64 %conv5, %5, !dbg !3183
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !3184

if.then8:                                         ; preds = %if.then
  store i32 1, i32* %e, align 4, !dbg !3185
  br label %if.end25, !dbg !3186

if.else:                                          ; preds = %if.then
  %6 = load i32, i32* @nmerge, align 4, !dbg !3187
  %cmp9 = icmp ult i32 %6, 2, !dbg !3190
  br i1 %cmp9, label %if.then11, label %if.else19, !dbg !3191

if.then11:                                        ; preds = %if.else
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.135, i64 0, i64 0)) #12, !dbg !3192
  %7 = load i32, i32* %oi.addr, align 4, !dbg !3194
  %idxprom = sext i32 %7 to i64, !dbg !3195
  %arrayidx = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom, !dbg !3195, !ctir !317
  %name = getelementptr inbounds %struct.option, %struct.option* %arrayidx, i32 0, i32 0, !dbg !3196, !ctir !318
  %8 = load i8*, i8** %name, align 16, !dbg !3196, !ctir !90
  %9 = load i8*, i8** %s.addr, align 8, !dbg !3197
  %call13 = call i8* @quote(i8* %9), !dbg !3198
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call12, i8* %8, i8* %call13), !dbg !3199
  %call14 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.136, i64 0, i64 0)) #12, !dbg !3200
  %10 = load i32, i32* %oi.addr, align 4, !dbg !3200
  %idxprom15 = sext i32 %10 to i64, !dbg !3200
  %arrayidx16 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom15, !dbg !3200, !ctir !317
  %name17 = getelementptr inbounds %struct.option, %struct.option* %arrayidx16, i32 0, i32 0, !dbg !3200, !ctir !318
  %11 = load i8*, i8** %name17, align 16, !dbg !3200, !ctir !90
  %call18 = call i8* @quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i64 0, i64 0)), !dbg !3200
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call14, i8* %11, i8* %call18), !dbg !3200
  unreachable, !dbg !3200

if.else19:                                        ; preds = %if.else
  %12 = load i32, i32* %max_nmerge, align 4, !dbg !3201
  %13 = load i32, i32* @nmerge, align 4, !dbg !3203
  %cmp20 = icmp ult i32 %12, %13, !dbg !3204
  br i1 %cmp20, label %if.then22, label %if.else23, !dbg !3205

if.then22:                                        ; preds = %if.else19
  store i32 1, i32* %e, align 4, !dbg !3206
  br label %if.end, !dbg !3208

if.else23:                                        ; preds = %if.else19
  ret void, !dbg !3209

if.end:                                           ; preds = %if.then22
  br label %if.end24

if.end24:                                         ; preds = %if.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then8
  br label %if.end26, !dbg !3210

if.end26:                                         ; preds = %if.end25, %cond.end
  %14 = load i32, i32* %e, align 4, !dbg !3211
  %cmp27 = icmp eq i32 %14, 1, !dbg !3213
  br i1 %cmp27, label %if.then29, label %if.else40, !dbg !3214

if.then29:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata [11 x i8]* %max_nmerge_buf, metadata !3215, metadata !DIExpression()), !dbg !3217
  %call30 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.138, i64 0, i64 0)) #12, !dbg !3218
  %15 = load i32, i32* %oi.addr, align 4, !dbg !3219
  %idxprom31 = sext i32 %15 to i64, !dbg !3220
  %arrayidx32 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom31, !dbg !3220, !ctir !317
  %name33 = getelementptr inbounds %struct.option, %struct.option* %arrayidx32, i32 0, i32 0, !dbg !3221, !ctir !318
  %16 = load i8*, i8** %name33, align 16, !dbg !3221, !ctir !90
  %17 = load i8*, i8** %s.addr, align 8, !dbg !3222
  %call34 = call i8* @quote(i8* %17), !dbg !3223
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call30, i8* %16, i8* %call34), !dbg !3224
  %call35 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.139, i64 0, i64 0)) #12, !dbg !3225
  %18 = load i32, i32* %oi.addr, align 4, !dbg !3225
  %idxprom36 = sext i32 %18 to i64, !dbg !3225
  %arrayidx37 = getelementptr inbounds [31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 %idxprom36, !dbg !3225, !ctir !317
  %name38 = getelementptr inbounds %struct.option, %struct.option* %arrayidx37, i32 0, i32 0, !dbg !3225, !ctir !318
  %19 = load i8*, i8** %name38, align 16, !dbg !3225, !ctir !90
  %20 = load i32, i32* %max_nmerge, align 4, !dbg !3225
  %arraydecay = getelementptr inbounds [11 x i8], [11 x i8]* %max_nmerge_buf, i64 0, i64 0, !dbg !3225, !ctir !333
  %call39 = call i8* @uinttostr(i32 %20, i8* %arraydecay), !dbg !3225
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call35, i8* %19, i8* %call39), !dbg !3225
  unreachable, !dbg !3225

if.else40:                                        ; preds = %if.end26
  %21 = load i32, i32* %e, align 4, !dbg !3226
  %22 = load i32, i32* %oi.addr, align 4, !dbg !3227
  %23 = load i8, i8* %c.addr, align 1, !dbg !3228
  %24 = load i8*, i8** %s.addr, align 8, !dbg !3229
  call void @xstrtol_fatal(i32 %21, i32 %22, i8 signext %23, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %24) #15, !dbg !3230
  unreachable, !dbg !3230
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @specify_sort_size(i32 %oi, i8 signext %c, i8* %s) #4 !dbg !3231 {
entry:
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %n = alloca i64, align 8, !ctir !464
  %suffix = alloca i8*, align 8, !ctir !7
  %e = alloca i32, align 4, !ctir !71
  %mem = alloca double, align 8, !ctir !480
  store i32 %oi, i32* %oi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oi.addr, metadata !3232, metadata !DIExpression()), !dbg !3233
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !3234, metadata !DIExpression()), !dbg !3235
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3236, metadata !DIExpression()), !dbg !3237
  call void @llvm.dbg.declare(metadata i64* %n, metadata !3238, metadata !DIExpression()), !dbg !3239
  call void @llvm.dbg.declare(metadata i8** %suffix, metadata !3240, metadata !DIExpression()), !dbg !3241
  call void @llvm.dbg.declare(metadata i32* %e, metadata !3242, metadata !DIExpression()), !dbg !3243
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3244
  %call = call i32 @xstrtoumax(i8* %0, i8** %suffix, i32 10, i64* %n, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.140, i64 0, i64 0)), !dbg !3245
  store i32 %call, i32* %e, align 4, !dbg !3243
  %1 = load i32, i32* %e, align 4, !dbg !3246
  %cmp = icmp eq i32 %1, 0, !dbg !3248
  br i1 %cmp, label %land.lhs.true, label %if.end6, !dbg !3249

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %suffix, align 8, !dbg !3250
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 -1, !dbg !3250, !ctir !7
  %3 = load i8, i8* %arrayidx, align 1, !dbg !3250
  %conv = sext i8 %3 to i32, !dbg !3250
  %sub = sub i32 %conv, 48, !dbg !3250
  %cmp1 = icmp ule i32 %sub, 9, !dbg !3250
  br i1 %cmp1, label %if.then, label %if.end6, !dbg !3251

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64, i64* %n, align 8, !dbg !3252
  %cmp3 = icmp ule i64 %4, 18014398509481983, !dbg !3255
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !3256

if.then5:                                         ; preds = %if.then
  %5 = load i64, i64* %n, align 8, !dbg !3257
  %mul = mul i64 %5, 1024, !dbg !3257
  store i64 %mul, i64* %n, align 8, !dbg !3257
  br label %if.end, !dbg !3258

if.else:                                          ; preds = %if.then
  store i32 1, i32* %e, align 4, !dbg !3259
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end6, !dbg !3260

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  %6 = load i32, i32* %e, align 4, !dbg !3261
  %cmp7 = icmp eq i32 %6, 2, !dbg !3263
  br i1 %cmp7, label %land.lhs.true9, label %if.end30, !dbg !3264

land.lhs.true9:                                   ; preds = %if.end6
  %7 = load i8*, i8** %suffix, align 8, !dbg !3265
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 -1, !dbg !3265, !ctir !7
  %8 = load i8, i8* %arrayidx10, align 1, !dbg !3265
  %conv11 = sext i8 %8 to i32, !dbg !3265
  %sub12 = sub i32 %conv11, 48, !dbg !3265
  %cmp13 = icmp ule i32 %sub12, 9, !dbg !3265
  br i1 %cmp13, label %land.lhs.true15, label %if.end30, !dbg !3266

land.lhs.true15:                                  ; preds = %land.lhs.true9
  %9 = load i8*, i8** %suffix, align 8, !dbg !3267
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !3267, !ctir !7
  %10 = load i8, i8* %arrayidx16, align 1, !dbg !3267
  %tobool = icmp ne i8 %10, 0, !dbg !3267
  br i1 %tobool, label %if.end30, label %if.then17, !dbg !3268

if.then17:                                        ; preds = %land.lhs.true15
  %11 = load i8*, i8** %suffix, align 8, !dbg !3269
  %arrayidx18 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !3269, !ctir !7
  %12 = load i8, i8* %arrayidx18, align 1, !dbg !3269
  %conv19 = sext i8 %12 to i32, !dbg !3269
  switch i32 %conv19, label %sw.epilog [
    i32 98, label %sw.bb
    i32 37, label %sw.bb20
  ], !dbg !3270

sw.bb:                                            ; preds = %if.then17
  store i32 0, i32* %e, align 4, !dbg !3271
  br label %sw.epilog, !dbg !3273

sw.bb20:                                          ; preds = %if.then17
  call void @llvm.dbg.declare(metadata double* %mem, metadata !3274, metadata !DIExpression()), !dbg !3276
  %call21 = call double @physmem_total(), !dbg !3277
  %13 = load i64, i64* %n, align 8, !dbg !3278
  %conv22 = uitofp i64 %13 to double, !dbg !3278
  %mul23 = fmul double %call21, %conv22, !dbg !3279
  %div = fdiv double %mul23, 1.000000e+02, !dbg !3280
  store double %div, double* %mem, align 8, !dbg !3276
  %14 = load double, double* %mem, align 8, !dbg !3281
  %cmp24 = fcmp olt double %14, 0x43F0000000000000, !dbg !3283
  br i1 %cmp24, label %if.then26, label %if.else28, !dbg !3284

if.then26:                                        ; preds = %sw.bb20
  %15 = load double, double* %mem, align 8, !dbg !3285
  %conv27 = fptoui double %15 to i64, !dbg !3285
  store i64 %conv27, i64* %n, align 8, !dbg !3287
  store i32 0, i32* %e, align 4, !dbg !3288
  br label %if.end29, !dbg !3289

if.else28:                                        ; preds = %sw.bb20
  store i32 1, i32* %e, align 4, !dbg !3290
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then26
  br label %sw.epilog, !dbg !3291

sw.epilog:                                        ; preds = %if.then17, %if.end29, %sw.bb
  br label %if.end30, !dbg !3292

if.end30:                                         ; preds = %sw.epilog, %land.lhs.true15, %land.lhs.true9, %if.end6
  %16 = load i32, i32* %e, align 4, !dbg !3293
  %cmp31 = icmp eq i32 %16, 0, !dbg !3295
  br i1 %cmp31, label %if.then33, label %if.end48, !dbg !3296

if.then33:                                        ; preds = %if.end30
  %17 = load i64, i64* %n, align 8, !dbg !3297
  %18 = load i64, i64* @sort_size, align 8, !dbg !3300
  %cmp34 = icmp ult i64 %17, %18, !dbg !3301
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !3302

if.then36:                                        ; preds = %if.then33
  br label %return, !dbg !3303

if.end37:                                         ; preds = %if.then33
  %19 = load i64, i64* %n, align 8, !dbg !3304
  store i64 %19, i64* @sort_size, align 8, !dbg !3305
  %20 = load i64, i64* @sort_size, align 8, !dbg !3306
  %21 = load i64, i64* %n, align 8, !dbg !3308
  %cmp38 = icmp eq i64 %20, %21, !dbg !3309
  br i1 %cmp38, label %if.then40, label %if.end47, !dbg !3310

if.then40:                                        ; preds = %if.end37
  %22 = load i64, i64* @sort_size, align 8, !dbg !3311
  %23 = load i32, i32* @nmerge, align 4, !dbg !3311
  %conv41 = zext i32 %23 to i64, !dbg !3311
  %mul42 = mul i64 %conv41, 34, !dbg !3311
  %cmp43 = icmp ugt i64 %22, %mul42, !dbg !3311
  br i1 %cmp43, label %cond.true, label %cond.false, !dbg !3311

cond.true:                                        ; preds = %if.then40
  %24 = load i64, i64* @sort_size, align 8, !dbg !3311
  br label %cond.end, !dbg !3311

cond.false:                                       ; preds = %if.then40
  %25 = load i32, i32* @nmerge, align 4, !dbg !3311
  %conv45 = zext i32 %25 to i64, !dbg !3311
  %mul46 = mul i64 %conv45, 34, !dbg !3311
  br label %cond.end, !dbg !3311

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ %mul46, %cond.false ], !dbg !3311
  store i64 %cond, i64* @sort_size, align 8, !dbg !3313
  br label %return, !dbg !3314

if.end47:                                         ; preds = %if.end37
  store i32 1, i32* %e, align 4, !dbg !3315
  br label %if.end48, !dbg !3316

if.end48:                                         ; preds = %if.end47, %if.end30
  %26 = load i32, i32* %e, align 4, !dbg !3317
  %27 = load i32, i32* %oi.addr, align 4, !dbg !3318
  %28 = load i8, i8* %c.addr, align 1, !dbg !3319
  %29 = load i8*, i8** %s.addr, align 8, !dbg !3320
  call void @xstrtol_fatal(i32 %26, i32 %27, i8 signext %28, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %29) #15, !dbg !3321
  unreachable, !dbg !3321

return:                                           ; preds = %cond.end, %if.then36
  ret void, !dbg !3322
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_temp_dir(i8* %dir) #4 !dbg !3323 {
entry:
  %dir.addr = alloca i8*, align 8
  store i8* %dir, i8** %dir.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dir.addr, metadata !3324, metadata !DIExpression()), !dbg !3325
  %0 = load i64, i64* @temp_dir_count, align 8, !dbg !3326
  %1 = load i64, i64* @temp_dir_alloc, align 8, !dbg !3328
  %cmp = icmp eq i64 %0, %1, !dbg !3329
  br i1 %cmp, label %if.then, label %if.end, !dbg !3330

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** @temp_dirs, align 8, !dbg !3331
  %3 = bitcast i8** %2 to i8*, !dbg !3331
  %call = call i8* @x2nrealloc(i8* %3, i64* @temp_dir_alloc, i64 8), !dbg !3331
  %4 = bitcast i8* %call to i8**, !dbg !3331
  store i8** %4, i8*** @temp_dirs, align 8, !dbg !3332
  br label %if.end, !dbg !3333

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %dir.addr, align 8, !dbg !3334
  %6 = load i8**, i8*** @temp_dirs, align 8, !dbg !3335
  %7 = load i64, i64* @temp_dir_count, align 8, !dbg !3336
  %inc = add i64 %7, 1, !dbg !3336
  store i64 %inc, i64* @temp_dir_count, align 8, !dbg !3336
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %7, !dbg !3335, !ctir !481
  store i8* %5, i8** %arrayidx, align 8, !dbg !3337
  ret void, !dbg !3338
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @specify_nthreads(i32 %oi, i8 signext %c, i8* %s) #4 !dbg !3339 {
entry:
  %retval = alloca i64, align 8
  %oi.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %s.addr = alloca i8*, align 8
  %nthreads = alloca i64, align 8, !ctir !54
  %e = alloca i32, align 4, !ctir !71
  store i32 %oi, i32* %oi.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oi.addr, metadata !3342, metadata !DIExpression()), !dbg !3343
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !3344, metadata !DIExpression()), !dbg !3345
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3346, metadata !DIExpression()), !dbg !3347
  call void @llvm.dbg.declare(metadata i64* %nthreads, metadata !3348, metadata !DIExpression()), !dbg !3349
  call void @llvm.dbg.declare(metadata i32* %e, metadata !3350, metadata !DIExpression()), !dbg !3351
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3352
  %call = call i32 @xstrtoul(i8* %0, i8** null, i32 10, i64* %nthreads, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0)), !dbg !3353
  store i32 %call, i32* %e, align 4, !dbg !3351
  %1 = load i32, i32* %e, align 4, !dbg !3354
  %cmp = icmp eq i32 %1, 1, !dbg !3356
  br i1 %cmp, label %if.then, label %if.end, !dbg !3357

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8, !dbg !3358
  br label %return, !dbg !3358

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %e, align 4, !dbg !3359
  %cmp1 = icmp ne i32 %2, 0, !dbg !3361
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3362

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %e, align 4, !dbg !3363
  %4 = load i32, i32* %oi.addr, align 4, !dbg !3364
  %5 = load i8, i8* %c.addr, align 1, !dbg !3365
  %6 = load i8*, i8** %s.addr, align 8, !dbg !3366
  call void @xstrtol_fatal(i32 %3, i32 %4, i8 signext %5, %struct.option* getelementptr inbounds ([31 x %struct.option], [31 x %struct.option]* @long_options, i64 0, i64 0), i8* %6) #15, !dbg !3367
  unreachable, !dbg !3367

if.end3:                                          ; preds = %if.end
  %7 = load i64, i64* %nthreads, align 8, !dbg !3368
  %cmp4 = icmp ult i64 -1, %7, !dbg !3370
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !3371

if.then5:                                         ; preds = %if.end3
  store i64 -1, i64* %nthreads, align 8, !dbg !3372
  br label %if.end6, !dbg !3373

if.end6:                                          ; preds = %if.then5, %if.end3
  %8 = load i64, i64* %nthreads, align 8, !dbg !3374
  %cmp7 = icmp eq i64 %8, 0, !dbg !3376
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !3377

if.then8:                                         ; preds = %if.end6
  %call9 = call i8* @gettext(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.141, i64 0, i64 0)) #12, !dbg !3378
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call9), !dbg !3378
  unreachable, !dbg !3378

if.end10:                                         ; preds = %if.end6
  %9 = load i64, i64* %nthreads, align 8, !dbg !3379
  store i64 %9, i64* %retval, align 8, !dbg !3380
  br label %return, !dbg !3380

return:                                           ; preds = %if.end10, %if.then
  %10 = load i64, i64* %retval, align 8, !dbg !3381
  ret i64 %10, !dbg !3381
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @xfopen(i8* %file, i8* %how) #4 !dbg !3382 {
entry:
  %file.addr = alloca i8*, align 8
  %how.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !389
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  store i8* %how, i8** %how.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %how.addr, metadata !3387, metadata !DIExpression()), !dbg !3388
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !3389, metadata !DIExpression()), !dbg !3390
  %0 = load i8*, i8** %file.addr, align 8, !dbg !3391
  %1 = load i8*, i8** %how.addr, align 8, !dbg !3392
  %call = call %struct._IO_FILE* @stream_open(i8* %0, i8* %1), !dbg !3393
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !3390
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !3394
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !3394
  br i1 %tobool, label %if.end, label %if.then, !dbg !3396

if.then:                                          ; preds = %entry
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !3397
  %3 = load i8*, i8** %file.addr, align 8, !dbg !3398
  call void @sort_die(i8* %call1, i8* %3) #15, !dbg !3399
  unreachable, !dbg !3399

if.end:                                           ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !3400
  ret %struct._IO_FILE* %4, !dbg !3401
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @xfclose(%struct._IO_FILE* %fp, i8* %file) #4 !dbg !3402 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !3405, metadata !DIExpression()), !dbg !3406
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !3407, metadata !DIExpression()), !dbg !3408
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !3409
  %call = call i32 @fileno(%struct._IO_FILE* %0) #12, !dbg !3410
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ], !dbg !3411

sw.bb:                                            ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !3412
  %call1 = call i32 @feof_unlocked(%struct._IO_FILE* %1) #12, !dbg !3412
  %tobool = icmp ne i32 %call1, 0, !dbg !3412
  br i1 %tobool, label %if.then, label %if.end, !dbg !3415

if.then:                                          ; preds = %sw.bb
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !3416
  call void @clearerr_unlocked(%struct._IO_FILE* %2) #12, !dbg !3416
  br label %if.end, !dbg !3416

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog, !dbg !3417

sw.bb2:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !3418
  %call3 = call i32 @fflush_unlocked(%struct._IO_FILE* %3), !dbg !3418
  %cmp = icmp ne i32 %call3, 0, !dbg !3420
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !3421

if.then4:                                         ; preds = %sw.bb2
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.145, i64 0, i64 0)) #12, !dbg !3422
  %4 = load i8*, i8** %file.addr, align 8, !dbg !3423
  call void @sort_die(i8* %call5, i8* %4) #15, !dbg !3424
  unreachable, !dbg !3424

if.end6:                                          ; preds = %sw.bb2
  br label %sw.epilog, !dbg !3425

sw.default:                                       ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !3426
  %call7 = call i32 @rpl_fclose(%struct._IO_FILE* %5), !dbg !3428
  %cmp8 = icmp ne i32 %call7, 0, !dbg !3429
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !3430

if.then9:                                         ; preds = %sw.default
  %call10 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0)) #12, !dbg !3431
  %6 = load i8*, i8** %file.addr, align 8, !dbg !3432
  call void @sort_die(i8* %call10, i8* %6) #15, !dbg !3433
  unreachable, !dbg !3433

if.end11:                                         ; preds = %sw.default
  br label %sw.epilog, !dbg !3434

sw.epilog:                                        ; preds = %if.end11, %if.end6, %if.end
  ret void, !dbg !3435
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @default_key_compare(%struct.keyfield* %key) #4 !dbg !3436 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !3439, metadata !DIExpression()), !dbg !3440
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3441
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 4, !dbg !3442, !ctir !523
  %1 = load i8*, i8** %ignore, align 8, !dbg !3442, !ctir !160
  %tobool = icmp ne i8* %1, null, !dbg !3441
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !3443

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3444
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 5, !dbg !3445, !ctir !523
  %3 = load i8*, i8** %translate, align 8, !dbg !3445, !ctir !90
  %tobool1 = icmp ne i8* %3, null, !dbg !3444
  br i1 %tobool1, label %lor.end, label %lor.lhs.false2, !dbg !3446

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3447
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 6, !dbg !3448, !ctir !523
  %5 = load i8, i8* %skipsblanks, align 8, !dbg !3448
  %tobool3 = trunc i8 %5 to i1, !dbg !3448, !ctir !162
  br i1 %tobool3, label %lor.end, label %lor.lhs.false4, !dbg !3449

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3450
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 7, !dbg !3451, !ctir !523
  %7 = load i8, i8* %skipeblanks, align 1, !dbg !3451
  %tobool5 = trunc i8 %7 to i1, !dbg !3451, !ctir !162
  br i1 %tobool5, label %lor.end, label %lor.lhs.false6, !dbg !3452

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3453
  %call = call zeroext i1 @key_numeric(%struct.keyfield* %8), !dbg !3454
  br i1 %call, label %lor.end, label %lor.lhs.false7, !dbg !3455

lor.lhs.false7:                                   ; preds = %lor.lhs.false6
  %9 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3456
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 12, !dbg !3457, !ctir !523
  %10 = load i8, i8* %month, align 2, !dbg !3457
  %tobool8 = trunc i8 %10 to i1, !dbg !3457, !ctir !162
  br i1 %tobool8, label %lor.end, label %lor.lhs.false9, !dbg !3458

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3459
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 14, !dbg !3460, !ctir !523
  %12 = load i8, i8* %version, align 8, !dbg !3460
  %tobool10 = trunc i8 %12 to i1, !dbg !3460, !ctir !162
  br i1 %tobool10, label %lor.end, label %lor.rhs, !dbg !3461

lor.rhs:                                          ; preds = %lor.lhs.false9
  %13 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !3462
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %13, i32 0, i32 9, !dbg !3463, !ctir !523
  %14 = load i8, i8* %random, align 1, !dbg !3463
  %tobool11 = trunc i8 %14 to i1, !dbg !3463, !ctir !162
  br label %lor.end, !dbg !3461

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false9, %lor.lhs.false7, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %15 = phi i1 [ true, %lor.lhs.false9 ], [ true, %lor.lhs.false7 ], [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool11, %lor.rhs ]
  %lnot = xor i1 %15, true, !dbg !3464
  ret i1 %lnot, !dbg !3465
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_ordering_compatibility() #4 !dbg !3466 {
entry:
  %key = alloca %struct.keyfield*, align 8, !ctir !152
  %opts = alloca [31 x i8], align 16, !ctir !392
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !3467, metadata !DIExpression()), !dbg !3468
  %0 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !3469
  store %struct.keyfield* %0, %struct.keyfield** %key, align 8, !dbg !3471
  br label %for.cond, !dbg !3472

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3473
  %tobool = icmp ne %struct.keyfield* %1, null, !dbg !3475
  br i1 %tobool, label %for.body, label %for.end, !dbg !3475

for.body:                                         ; preds = %for.cond
  %2 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3476
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 8, !dbg !3478, !ctir !153
  %3 = load i8, i8* %numeric, align 2, !dbg !3478
  %tobool1 = trunc i8 %3 to i1, !dbg !3478, !ctir !162
  %conv = zext i1 %tobool1 to i32, !dbg !3476
  %4 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3479
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 10, !dbg !3480, !ctir !153
  %5 = load i8, i8* %general_numeric, align 4, !dbg !3480
  %tobool2 = trunc i8 %5 to i1, !dbg !3480, !ctir !162
  %conv3 = zext i1 %tobool2 to i32, !dbg !3479
  %add = add nsw i32 %conv, %conv3, !dbg !3481
  %6 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3482
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %6, i32 0, i32 11, !dbg !3483, !ctir !153
  %7 = load i8, i8* %human_numeric, align 1, !dbg !3483
  %tobool4 = trunc i8 %7 to i1, !dbg !3483, !ctir !162
  %conv5 = zext i1 %tobool4 to i32, !dbg !3482
  %add6 = add nsw i32 %add, %conv5, !dbg !3484
  %8 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3485
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 12, !dbg !3486, !ctir !153
  %9 = load i8, i8* %month, align 2, !dbg !3486
  %tobool7 = trunc i8 %9 to i1, !dbg !3486, !ctir !162
  %conv8 = zext i1 %tobool7 to i32, !dbg !3485
  %add9 = add nsw i32 %add6, %conv8, !dbg !3487
  %10 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3488
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %10, i32 0, i32 14, !dbg !3489, !ctir !153
  %11 = load i8, i8* %version, align 8, !dbg !3489
  %tobool10 = trunc i8 %11 to i1, !dbg !3489, !ctir !162
  %conv11 = zext i1 %tobool10 to i32, !dbg !3488
  %12 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3490
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %12, i32 0, i32 9, !dbg !3491, !ctir !153
  %13 = load i8, i8* %random, align 1, !dbg !3491
  %tobool12 = trunc i8 %13 to i1, !dbg !3491, !ctir !162
  %conv13 = zext i1 %tobool12 to i32, !dbg !3490
  %or = or i32 %conv11, %conv13, !dbg !3492
  %14 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3493
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 4, !dbg !3494, !ctir !153
  %15 = load i8*, i8** %ignore, align 8, !dbg !3494, !ctir !160
  %tobool14 = icmp ne i8* %15, null, !dbg !3495
  %lnot = xor i1 %tobool14, true, !dbg !3495
  %lnot15 = xor i1 %lnot, true, !dbg !3496
  %lnot.ext = zext i1 %lnot15 to i32, !dbg !3496
  %or16 = or i32 %or, %lnot.ext, !dbg !3497
  %add17 = add nsw i32 %add9, %or16, !dbg !3498
  %cmp = icmp slt i32 1, %add17, !dbg !3499
  br i1 %cmp, label %if.then, label %if.end, !dbg !3500

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata [31 x i8]* %opts, metadata !3501, metadata !DIExpression()), !dbg !3503
  %16 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3504
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %16, i32 0, i32 13, !dbg !3505, !ctir !153
  store i8 0, i8* %reverse, align 1, !dbg !3506, !ctir !162
  %17 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3507
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 7, !dbg !3508, !ctir !153
  store i8 0, i8* %skipeblanks, align 1, !dbg !3509, !ctir !162
  %18 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3510
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %18, i32 0, i32 6, !dbg !3511, !ctir !153
  store i8 0, i8* %skipsblanks, align 8, !dbg !3512, !ctir !162
  %19 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3513
  %arraydecay = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0, !dbg !3514, !ctir !392
  call void @key_to_opts(%struct.keyfield* %19, i8* %arraydecay), !dbg !3515
  %arraydecay19 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0, !dbg !3516, !ctir !392
  call void @incompatible_options(i8* %arraydecay19) #15, !dbg !3517
  unreachable, !dbg !3517

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3518

for.inc:                                          ; preds = %if.end
  %20 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3519
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 16, !dbg !3520, !ctir !153
  %21 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !dbg !3520, !ctir !152
  store %struct.keyfield* %21, %struct.keyfield** %key, align 8, !dbg !3521
  br label %for.cond, !dbg !3522, !llvm.loop !3523

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3525
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @key_warnings(%struct.keyfield* %gkey, i1 zeroext %gkey_only) #4 !dbg !3526 {
entry:
  %gkey.addr = alloca %struct.keyfield*, align 8
  %gkey_only.addr = alloca i8, align 1
  %key = alloca %struct.keyfield*, align 8, !ctir !522
  %ugkey = alloca %struct.keyfield, align 8, !ctir !153
  %keynum = alloca i64, align 8, !ctir !54
  %sword = alloca i64, align 8, !ctir !52
  %eword = alloca i64, align 8, !ctir !52
  %tmp = alloca [21 x i8], align 16, !ctir !363
  %obuf = alloca [46 x i8], align 16, !ctir !524
  %nbuf = alloca [47 x i8], align 16, !ctir !396
  %po = alloca i8*, align 8, !ctir !7
  %pn = alloca i8*, align 8, !ctir !7
  %zero_width = alloca i8, align 1, !ctir !162
  %implicit_skip = alloca i8, align 1, !ctir !162
  %line_offset = alloca i8, align 1, !ctir !162
  %sword90 = alloca i64, align 8, !ctir !52
  %eword93 = alloca i64, align 8, !ctir !52
  %ugkey_reverse = alloca i8, align 1, !ctir !162
  %opts = alloca [31 x i8], align 16, !ctir !392
  store %struct.keyfield* %gkey, %struct.keyfield** %gkey.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %gkey.addr, metadata !3529, metadata !DIExpression()), !dbg !3530
  %frombool = zext i1 %gkey_only to i8
  store i8 %frombool, i8* %gkey_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %gkey_only.addr, metadata !3531, metadata !DIExpression()), !dbg !3532
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !3533, metadata !DIExpression()), !dbg !3534
  call void @llvm.dbg.declare(metadata %struct.keyfield* %ugkey, metadata !3535, metadata !DIExpression()), !dbg !3536
  %0 = load %struct.keyfield*, %struct.keyfield** %gkey.addr, align 8, !dbg !3537
  %1 = bitcast %struct.keyfield* %ugkey to i8*, !dbg !3538
  %2 = bitcast %struct.keyfield* %0 to i8*, !dbg !3538
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 72, i1 false), !dbg !3538
  call void @llvm.dbg.declare(metadata i64* %keynum, metadata !3539, metadata !DIExpression()), !dbg !3540
  store i64 1, i64* %keynum, align 8, !dbg !3540
  %3 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !3541
  store %struct.keyfield* %3, %struct.keyfield** %key, align 8, !dbg !3543
  br label %for.cond, !dbg !3544

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3545
  %tobool = icmp ne %struct.keyfield* %4, null, !dbg !3547
  br i1 %tobool, label %for.body, label %for.end, !dbg !3547

for.body:                                         ; preds = %for.cond
  %5 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3548
  %traditional_used = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 15, !dbg !3551, !ctir !523
  %6 = load i8, i8* %traditional_used, align 1, !dbg !3551
  %tobool1 = trunc i8 %6 to i1, !dbg !3551, !ctir !162
  br i1 %tobool1, label %if.then, label %if.end35, !dbg !3552

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i64* %sword, metadata !3553, metadata !DIExpression()), !dbg !3555
  %7 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3556
  %sword2 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %7, i32 0, i32 0, !dbg !3557, !ctir !523
  %8 = load i64, i64* %sword2, align 8, !dbg !3557, !ctir !52
  store i64 %8, i64* %sword, align 8, !dbg !3555
  call void @llvm.dbg.declare(metadata i64* %eword, metadata !3558, metadata !DIExpression()), !dbg !3559
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3560
  %eword3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 2, !dbg !3561, !ctir !523
  %10 = load i64, i64* %eword3, align 8, !dbg !3561, !ctir !52
  store i64 %10, i64* %eword, align 8, !dbg !3559
  call void @llvm.dbg.declare(metadata [21 x i8]* %tmp, metadata !3562, metadata !DIExpression()), !dbg !3563
  call void @llvm.dbg.declare(metadata [46 x i8]* %obuf, metadata !3564, metadata !DIExpression()), !dbg !3565
  call void @llvm.dbg.declare(metadata [47 x i8]* %nbuf, metadata !3566, metadata !DIExpression()), !dbg !3567
  call void @llvm.dbg.declare(metadata i8** %po, metadata !3568, metadata !DIExpression()), !dbg !3569
  %arraydecay = getelementptr inbounds [46 x i8], [46 x i8]* %obuf, i64 0, i64 0, !dbg !3570, !ctir !524
  store i8* %arraydecay, i8** %po, align 8, !dbg !3569
  call void @llvm.dbg.declare(metadata i8** %pn, metadata !3571, metadata !DIExpression()), !dbg !3572
  %arraydecay4 = getelementptr inbounds [47 x i8], [47 x i8]* %nbuf, i64 0, i64 0, !dbg !3573, !ctir !396
  store i8* %arraydecay4, i8** %pn, align 8, !dbg !3572
  %11 = load i64, i64* %sword, align 8, !dbg !3574
  %cmp = icmp eq i64 %11, -1, !dbg !3576
  br i1 %cmp, label %if.then5, label %if.end, !dbg !3577

if.then5:                                         ; preds = %if.then
  %12 = load i64, i64* %sword, align 8, !dbg !3578
  %inc = add i64 %12, 1, !dbg !3578
  store i64 %inc, i64* %sword, align 8, !dbg !3578
  br label %if.end, !dbg !3579

if.end:                                           ; preds = %if.then5, %if.then
  %13 = load i8*, i8** %po, align 8, !dbg !3580
  %call = call i8* @stpcpy(i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.146, i64 0, i64 0)) #12, !dbg !3581
  %14 = load i64, i64* %sword, align 8, !dbg !3582
  %arraydecay6 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0, !dbg !3583, !ctir !363
  %call7 = call i8* @umaxtostr(i64 %14, i8* %arraydecay6), !dbg !3584
  %call8 = call i8* @stpcpy(i8* %call, i8* %call7) #12, !dbg !3585
  store i8* %call8, i8** %po, align 8, !dbg !3586
  %15 = load i8*, i8** %pn, align 8, !dbg !3587
  %call9 = call i8* @stpcpy(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.147, i64 0, i64 0)) #12, !dbg !3588
  %16 = load i64, i64* %sword, align 8, !dbg !3589
  %add = add i64 %16, 1, !dbg !3590
  %arraydecay10 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0, !dbg !3591, !ctir !363
  %call11 = call i8* @umaxtostr(i64 %add, i8* %arraydecay10), !dbg !3592
  %call12 = call i8* @stpcpy(i8* %call9, i8* %call11) #12, !dbg !3593
  store i8* %call12, i8** %pn, align 8, !dbg !3594
  %17 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3595
  %eword13 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 2, !dbg !3597, !ctir !523
  %18 = load i64, i64* %eword13, align 8, !dbg !3597, !ctir !52
  %cmp14 = icmp ne i64 %18, -1, !dbg !3598
  br i1 %cmp14, label %if.then15, label %if.end29, !dbg !3599

if.then15:                                        ; preds = %if.end
  %19 = load i8*, i8** %po, align 8, !dbg !3600
  %call16 = call i8* @stpcpy(i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i64 0, i64 0)) #12, !dbg !3602
  %20 = load i64, i64* %eword, align 8, !dbg !3603
  %add17 = add i64 %20, 1, !dbg !3604
  %arraydecay18 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0, !dbg !3605, !ctir !363
  %call19 = call i8* @umaxtostr(i64 %add17, i8* %arraydecay18), !dbg !3606
  %call20 = call i8* @stpcpy(i8* %call16, i8* %call19) #12, !dbg !3607
  %21 = load i8*, i8** %pn, align 8, !dbg !3608
  %call21 = call i8* @stpcpy(i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.149, i64 0, i64 0)) #12, !dbg !3609
  %22 = load i64, i64* %eword, align 8, !dbg !3610
  %add22 = add i64 %22, 1, !dbg !3611
  %23 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3612
  %echar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %23, i32 0, i32 3, !dbg !3613, !ctir !523
  %24 = load i64, i64* %echar, align 8, !dbg !3613, !ctir !52
  %cmp23 = icmp eq i64 %24, -1, !dbg !3614
  %conv = zext i1 %cmp23 to i32, !dbg !3614
  %conv24 = sext i32 %conv to i64, !dbg !3615
  %add25 = add i64 %add22, %conv24, !dbg !3616
  %arraydecay26 = getelementptr inbounds [21 x i8], [21 x i8]* %tmp, i64 0, i64 0, !dbg !3617, !ctir !363
  %call27 = call i8* @umaxtostr(i64 %add25, i8* %arraydecay26), !dbg !3618
  %call28 = call i8* @stpcpy(i8* %call21, i8* %call27) #12, !dbg !3619
  br label %if.end29, !dbg !3620

if.end29:                                         ; preds = %if.then15, %if.end
  %call30 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.150, i64 0, i64 0)) #12, !dbg !3621
  %arraydecay31 = getelementptr inbounds [46 x i8], [46 x i8]* %obuf, i64 0, i64 0, !dbg !3622, !ctir !524
  %call32 = call i8* @quote_n(i32 0, i8* %arraydecay31), !dbg !3623
  %arraydecay33 = getelementptr inbounds [47 x i8], [47 x i8]* %nbuf, i64 0, i64 0, !dbg !3624, !ctir !396
  %call34 = call i8* @quote_n(i32 1, i8* %arraydecay33), !dbg !3625
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call30, i8* %call32, i8* %call34), !dbg !3626
  br label %if.end35, !dbg !3627

if.end35:                                         ; preds = %if.end29, %for.body
  call void @llvm.dbg.declare(metadata i8* %zero_width, metadata !3628, metadata !DIExpression()), !dbg !3629
  %25 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3630
  %sword36 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %25, i32 0, i32 0, !dbg !3631, !ctir !523
  %26 = load i64, i64* %sword36, align 8, !dbg !3631, !ctir !52
  %cmp37 = icmp ne i64 %26, -1, !dbg !3632
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !3633

land.rhs:                                         ; preds = %if.end35
  %27 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3634
  %eword39 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %27, i32 0, i32 2, !dbg !3635, !ctir !523
  %28 = load i64, i64* %eword39, align 8, !dbg !3635, !ctir !52
  %29 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3636
  %sword40 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %29, i32 0, i32 0, !dbg !3637, !ctir !523
  %30 = load i64, i64* %sword40, align 8, !dbg !3637, !ctir !52
  %cmp41 = icmp ult i64 %28, %30, !dbg !3638
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end35
  %31 = phi i1 [ false, %if.end35 ], [ %cmp41, %land.rhs ], !dbg !3639
  %frombool43 = zext i1 %31 to i8, !dbg !3629
  store i8 %frombool43, i8* %zero_width, align 1, !dbg !3629
  %32 = load i8, i8* %zero_width, align 1, !dbg !3640
  %tobool44 = trunc i8 %32 to i1, !dbg !3640
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !3642

if.then45:                                        ; preds = %land.end
  %call46 = call i8* @gettext(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.151, i64 0, i64 0)) #12, !dbg !3643
  %33 = load i64, i64* %keynum, align 8, !dbg !3644
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call46, i64 %33), !dbg !3645
  br label %if.end47, !dbg !3645

if.end47:                                         ; preds = %if.then45, %land.end
  call void @llvm.dbg.declare(metadata i8* %implicit_skip, metadata !3646, metadata !DIExpression()), !dbg !3647
  %34 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3648
  %call48 = call zeroext i1 @key_numeric(%struct.keyfield* %34), !dbg !3649
  br i1 %call48, label %lor.end, label %lor.rhs, !dbg !3650

lor.rhs:                                          ; preds = %if.end47
  %35 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3651
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %35, i32 0, i32 12, !dbg !3652, !ctir !523
  %36 = load i8, i8* %month, align 2, !dbg !3652
  %tobool50 = trunc i8 %36 to i1, !dbg !3652, !ctir !162
  br label %lor.end, !dbg !3650

lor.end:                                          ; preds = %lor.rhs, %if.end47
  %37 = phi i1 [ true, %if.end47 ], [ %tobool50, %lor.rhs ]
  %frombool52 = zext i1 %37 to i8, !dbg !3647
  store i8 %frombool52, i8* %implicit_skip, align 1, !dbg !3647
  call void @llvm.dbg.declare(metadata i8* %line_offset, metadata !3653, metadata !DIExpression()), !dbg !3654
  %38 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3655
  %eword53 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %38, i32 0, i32 2, !dbg !3656, !ctir !523
  %39 = load i64, i64* %eword53, align 8, !dbg !3656, !ctir !52
  %cmp54 = icmp eq i64 %39, 0, !dbg !3657
  br i1 %cmp54, label %land.rhs56, label %land.end60, !dbg !3658

land.rhs56:                                       ; preds = %lor.end
  %40 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3659
  %echar57 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %40, i32 0, i32 3, !dbg !3660, !ctir !523
  %41 = load i64, i64* %echar57, align 8, !dbg !3660, !ctir !52
  %cmp58 = icmp ne i64 %41, 0, !dbg !3661
  br label %land.end60

land.end60:                                       ; preds = %land.rhs56, %lor.end
  %42 = phi i1 [ false, %lor.end ], [ %cmp58, %land.rhs56 ], !dbg !3639
  %frombool61 = zext i1 %42 to i8, !dbg !3654
  store i8 %frombool61, i8* %line_offset, align 1, !dbg !3654
  %43 = load i8, i8* %zero_width, align 1, !dbg !3662
  %tobool62 = trunc i8 %43 to i1, !dbg !3662
  br i1 %tobool62, label %if.end84, label %land.lhs.true, !dbg !3664

land.lhs.true:                                    ; preds = %land.end60
  %44 = load i8, i8* %gkey_only.addr, align 1, !dbg !3665
  %tobool63 = trunc i8 %44 to i1, !dbg !3665
  br i1 %tobool63, label %if.end84, label %land.lhs.true64, !dbg !3666

land.lhs.true64:                                  ; preds = %land.lhs.true
  %45 = load i32, i32* @tab, align 4, !dbg !3667
  %cmp65 = icmp eq i32 %45, 128, !dbg !3668
  br i1 %cmp65, label %land.lhs.true67, label %if.end84, !dbg !3669

land.lhs.true67:                                  ; preds = %land.lhs.true64
  %46 = load i8, i8* %line_offset, align 1, !dbg !3670
  %tobool68 = trunc i8 %46 to i1, !dbg !3670
  br i1 %tobool68, label %if.end84, label %land.lhs.true69, !dbg !3671

land.lhs.true69:                                  ; preds = %land.lhs.true67
  %47 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3672
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %47, i32 0, i32 6, !dbg !3673, !ctir !523
  %48 = load i8, i8* %skipsblanks, align 8, !dbg !3673
  %tobool70 = trunc i8 %48 to i1, !dbg !3673, !ctir !162
  br i1 %tobool70, label %lor.lhs.false, label %land.lhs.true71, !dbg !3674

land.lhs.true71:                                  ; preds = %land.lhs.true69
  %49 = load i8, i8* %implicit_skip, align 1, !dbg !3675
  %tobool72 = trunc i8 %49 to i1, !dbg !3675
  br i1 %tobool72, label %lor.lhs.false, label %if.then82, !dbg !3676

lor.lhs.false:                                    ; preds = %land.lhs.true71, %land.lhs.true69
  %50 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3677
  %skipsblanks73 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %50, i32 0, i32 6, !dbg !3678, !ctir !523
  %51 = load i8, i8* %skipsblanks73, align 8, !dbg !3678
  %tobool74 = trunc i8 %51 to i1, !dbg !3678, !ctir !162
  br i1 %tobool74, label %lor.lhs.false77, label %land.lhs.true75, !dbg !3679

land.lhs.true75:                                  ; preds = %lor.lhs.false
  %52 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3680
  %schar = getelementptr inbounds %struct.keyfield, %struct.keyfield* %52, i32 0, i32 1, !dbg !3681, !ctir !523
  %53 = load i64, i64* %schar, align 8, !dbg !3681, !ctir !52
  %tobool76 = icmp ne i64 %53, 0, !dbg !3680
  br i1 %tobool76, label %if.then82, label %lor.lhs.false77, !dbg !3682

lor.lhs.false77:                                  ; preds = %land.lhs.true75, %lor.lhs.false
  %54 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3683
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %54, i32 0, i32 7, !dbg !3684, !ctir !523
  %55 = load i8, i8* %skipeblanks, align 1, !dbg !3684
  %tobool78 = trunc i8 %55 to i1, !dbg !3684, !ctir !162
  br i1 %tobool78, label %if.end84, label %land.lhs.true79, !dbg !3685

land.lhs.true79:                                  ; preds = %lor.lhs.false77
  %56 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3686
  %echar80 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %56, i32 0, i32 3, !dbg !3687, !ctir !523
  %57 = load i64, i64* %echar80, align 8, !dbg !3687, !ctir !52
  %tobool81 = icmp ne i64 %57, 0, !dbg !3686
  br i1 %tobool81, label %if.then82, label %if.end84, !dbg !3688

if.then82:                                        ; preds = %land.lhs.true79, %land.lhs.true75, %land.lhs.true71
  %call83 = call i8* @gettext(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.152, i64 0, i64 0)) #12, !dbg !3689
  %58 = load i64, i64* %keynum, align 8, !dbg !3690
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call83, i64 %58), !dbg !3691
  br label %if.end84, !dbg !3691

if.end84:                                         ; preds = %if.then82, %land.lhs.true79, %lor.lhs.false77, %land.lhs.true67, %land.lhs.true64, %land.lhs.true, %land.end60
  %59 = load i8, i8* %gkey_only.addr, align 1, !dbg !3692
  %tobool85 = trunc i8 %59 to i1, !dbg !3692
  br i1 %tobool85, label %if.end107, label %land.lhs.true86, !dbg !3694

land.lhs.true86:                                  ; preds = %if.end84
  %60 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3695
  %call87 = call zeroext i1 @key_numeric(%struct.keyfield* %60), !dbg !3696
  br i1 %call87, label %if.then89, label %if.end107, !dbg !3697

if.then89:                                        ; preds = %land.lhs.true86
  call void @llvm.dbg.declare(metadata i64* %sword90, metadata !3698, metadata !DIExpression()), !dbg !3700
  %61 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3701
  %sword91 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %61, i32 0, i32 0, !dbg !3702, !ctir !523
  %62 = load i64, i64* %sword91, align 8, !dbg !3702, !ctir !52
  %add92 = add i64 %62, 1, !dbg !3703
  store i64 %add92, i64* %sword90, align 8, !dbg !3700
  call void @llvm.dbg.declare(metadata i64* %eword93, metadata !3704, metadata !DIExpression()), !dbg !3705
  %63 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3706
  %eword94 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %63, i32 0, i32 2, !dbg !3707, !ctir !523
  %64 = load i64, i64* %eword94, align 8, !dbg !3707, !ctir !52
  %add95 = add i64 %64, 1, !dbg !3708
  store i64 %add95, i64* %eword93, align 8, !dbg !3705
  %65 = load i64, i64* %sword90, align 8, !dbg !3709
  %tobool96 = icmp ne i64 %65, 0, !dbg !3709
  br i1 %tobool96, label %if.end99, label %if.then97, !dbg !3711

if.then97:                                        ; preds = %if.then89
  %66 = load i64, i64* %sword90, align 8, !dbg !3712
  %inc98 = add i64 %66, 1, !dbg !3712
  store i64 %inc98, i64* %sword90, align 8, !dbg !3712
  br label %if.end99, !dbg !3713

if.end99:                                         ; preds = %if.then97, %if.then89
  %67 = load i64, i64* %eword93, align 8, !dbg !3714
  %tobool100 = icmp ne i64 %67, 0, !dbg !3714
  br i1 %tobool100, label %lor.lhs.false101, label %if.then104, !dbg !3716

lor.lhs.false101:                                 ; preds = %if.end99
  %68 = load i64, i64* %sword90, align 8, !dbg !3717
  %69 = load i64, i64* %eword93, align 8, !dbg !3718
  %cmp102 = icmp ult i64 %68, %69, !dbg !3719
  br i1 %cmp102, label %if.then104, label %if.end106, !dbg !3720

if.then104:                                       ; preds = %lor.lhs.false101, %if.end99
  %call105 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.153, i64 0, i64 0)) #12, !dbg !3721
  %70 = load i64, i64* %keynum, align 8, !dbg !3722
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call105, i64 %70), !dbg !3723
  br label %if.end106, !dbg !3723

if.end106:                                        ; preds = %if.then104, %lor.lhs.false101
  br label %if.end107, !dbg !3724

if.end107:                                        ; preds = %if.end106, %land.lhs.true86, %if.end84
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4, !dbg !3725, !ctir !153
  %71 = load i8*, i8** %ignore, align 8, !dbg !3725, !ctir !160
  %tobool108 = icmp ne i8* %71, null, !dbg !3727
  br i1 %tobool108, label %land.lhs.true109, label %if.end116, !dbg !3728

land.lhs.true109:                                 ; preds = %if.end107
  %ignore110 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4, !dbg !3729, !ctir !153
  %72 = load i8*, i8** %ignore110, align 8, !dbg !3729, !ctir !160
  %73 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3730
  %ignore111 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %73, i32 0, i32 4, !dbg !3731, !ctir !523
  %74 = load i8*, i8** %ignore111, align 8, !dbg !3731, !ctir !160
  %cmp112 = icmp eq i8* %72, %74, !dbg !3732
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !3733

if.then114:                                       ; preds = %land.lhs.true109
  %ignore115 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 4, !dbg !3734, !ctir !153
  store i8* null, i8** %ignore115, align 8, !dbg !3735, !ctir !160
  br label %if.end116, !dbg !3736

if.end116:                                        ; preds = %if.then114, %land.lhs.true109, %if.end107
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5, !dbg !3737, !ctir !153
  %75 = load i8*, i8** %translate, align 8, !dbg !3737, !ctir !90
  %tobool117 = icmp ne i8* %75, null, !dbg !3739
  br i1 %tobool117, label %land.lhs.true118, label %if.end125, !dbg !3740

land.lhs.true118:                                 ; preds = %if.end116
  %translate119 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5, !dbg !3741, !ctir !153
  %76 = load i8*, i8** %translate119, align 8, !dbg !3741, !ctir !90
  %77 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3742
  %translate120 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %77, i32 0, i32 5, !dbg !3743, !ctir !523
  %78 = load i8*, i8** %translate120, align 8, !dbg !3743, !ctir !90
  %cmp121 = icmp eq i8* %76, %78, !dbg !3744
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !3745

if.then123:                                       ; preds = %land.lhs.true118
  %translate124 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 5, !dbg !3746, !ctir !153
  store i8* null, i8** %translate124, align 8, !dbg !3747, !ctir !90
  br label %if.end125, !dbg !3748

if.end125:                                        ; preds = %if.then123, %land.lhs.true118, %if.end116
  %79 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3749
  %skipsblanks126 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %79, i32 0, i32 6, !dbg !3750, !ctir !523
  %80 = load i8, i8* %skipsblanks126, align 8, !dbg !3750
  %tobool127 = trunc i8 %80 to i1, !dbg !3750, !ctir !162
  %lnot = xor i1 %tobool127, true, !dbg !3751
  %lnot.ext = zext i1 %lnot to i32, !dbg !3751
  %skipsblanks128 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 6, !dbg !3752, !ctir !153
  %81 = load i8, i8* %skipsblanks128, align 8, !dbg !3753
  %tobool129 = trunc i8 %81 to i1, !dbg !3753, !ctir !162
  %conv130 = zext i1 %tobool129 to i32, !dbg !3753
  %and = and i32 %conv130, %lnot.ext, !dbg !3753
  %tobool131 = icmp ne i32 %and, 0, !dbg !3753
  %frombool132 = zext i1 %tobool131 to i8, !dbg !3753
  store i8 %frombool132, i8* %skipsblanks128, align 8, !dbg !3753, !ctir !162
  %82 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3754
  %skipeblanks133 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %82, i32 0, i32 7, !dbg !3755, !ctir !523
  %83 = load i8, i8* %skipeblanks133, align 1, !dbg !3755
  %tobool134 = trunc i8 %83 to i1, !dbg !3755, !ctir !162
  %lnot135 = xor i1 %tobool134, true, !dbg !3756
  %lnot.ext136 = zext i1 %lnot135 to i32, !dbg !3756
  %skipeblanks137 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 7, !dbg !3757, !ctir !153
  %84 = load i8, i8* %skipeblanks137, align 1, !dbg !3758
  %tobool138 = trunc i8 %84 to i1, !dbg !3758, !ctir !162
  %conv139 = zext i1 %tobool138 to i32, !dbg !3758
  %and140 = and i32 %conv139, %lnot.ext136, !dbg !3758
  %tobool141 = icmp ne i32 %and140, 0, !dbg !3758
  %frombool142 = zext i1 %tobool141 to i8, !dbg !3758
  store i8 %frombool142, i8* %skipeblanks137, align 1, !dbg !3758, !ctir !162
  %85 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3759
  %month143 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %85, i32 0, i32 12, !dbg !3760, !ctir !523
  %86 = load i8, i8* %month143, align 2, !dbg !3760
  %tobool144 = trunc i8 %86 to i1, !dbg !3760, !ctir !162
  %lnot145 = xor i1 %tobool144, true, !dbg !3761
  %lnot.ext146 = zext i1 %lnot145 to i32, !dbg !3761
  %month147 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 12, !dbg !3762, !ctir !153
  %87 = load i8, i8* %month147, align 2, !dbg !3763
  %tobool148 = trunc i8 %87 to i1, !dbg !3763, !ctir !162
  %conv149 = zext i1 %tobool148 to i32, !dbg !3763
  %and150 = and i32 %conv149, %lnot.ext146, !dbg !3763
  %tobool151 = icmp ne i32 %and150, 0, !dbg !3763
  %frombool152 = zext i1 %tobool151 to i8, !dbg !3763
  store i8 %frombool152, i8* %month147, align 2, !dbg !3763, !ctir !162
  %88 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3764
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %88, i32 0, i32 8, !dbg !3765, !ctir !523
  %89 = load i8, i8* %numeric, align 2, !dbg !3765
  %tobool153 = trunc i8 %89 to i1, !dbg !3765, !ctir !162
  %lnot154 = xor i1 %tobool153, true, !dbg !3766
  %lnot.ext155 = zext i1 %lnot154 to i32, !dbg !3766
  %numeric156 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 8, !dbg !3767, !ctir !153
  %90 = load i8, i8* %numeric156, align 2, !dbg !3768
  %tobool157 = trunc i8 %90 to i1, !dbg !3768, !ctir !162
  %conv158 = zext i1 %tobool157 to i32, !dbg !3768
  %and159 = and i32 %conv158, %lnot.ext155, !dbg !3768
  %tobool160 = icmp ne i32 %and159, 0, !dbg !3768
  %frombool161 = zext i1 %tobool160 to i8, !dbg !3768
  store i8 %frombool161, i8* %numeric156, align 2, !dbg !3768, !ctir !162
  %91 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3769
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %91, i32 0, i32 10, !dbg !3770, !ctir !523
  %92 = load i8, i8* %general_numeric, align 4, !dbg !3770
  %tobool162 = trunc i8 %92 to i1, !dbg !3770, !ctir !162
  %lnot163 = xor i1 %tobool162, true, !dbg !3771
  %lnot.ext164 = zext i1 %lnot163 to i32, !dbg !3771
  %general_numeric165 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 10, !dbg !3772, !ctir !153
  %93 = load i8, i8* %general_numeric165, align 4, !dbg !3773
  %tobool166 = trunc i8 %93 to i1, !dbg !3773, !ctir !162
  %conv167 = zext i1 %tobool166 to i32, !dbg !3773
  %and168 = and i32 %conv167, %lnot.ext164, !dbg !3773
  %tobool169 = icmp ne i32 %and168, 0, !dbg !3773
  %frombool170 = zext i1 %tobool169 to i8, !dbg !3773
  store i8 %frombool170, i8* %general_numeric165, align 4, !dbg !3773, !ctir !162
  %94 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3774
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %94, i32 0, i32 11, !dbg !3775, !ctir !523
  %95 = load i8, i8* %human_numeric, align 1, !dbg !3775
  %tobool171 = trunc i8 %95 to i1, !dbg !3775, !ctir !162
  %lnot172 = xor i1 %tobool171, true, !dbg !3776
  %lnot.ext173 = zext i1 %lnot172 to i32, !dbg !3776
  %human_numeric174 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 11, !dbg !3777, !ctir !153
  %96 = load i8, i8* %human_numeric174, align 1, !dbg !3778
  %tobool175 = trunc i8 %96 to i1, !dbg !3778, !ctir !162
  %conv176 = zext i1 %tobool175 to i32, !dbg !3778
  %and177 = and i32 %conv176, %lnot.ext173, !dbg !3778
  %tobool178 = icmp ne i32 %and177, 0, !dbg !3778
  %frombool179 = zext i1 %tobool178 to i8, !dbg !3778
  store i8 %frombool179, i8* %human_numeric174, align 1, !dbg !3778, !ctir !162
  %97 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3779
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %97, i32 0, i32 9, !dbg !3780, !ctir !523
  %98 = load i8, i8* %random, align 1, !dbg !3780
  %tobool180 = trunc i8 %98 to i1, !dbg !3780, !ctir !162
  %lnot181 = xor i1 %tobool180, true, !dbg !3781
  %lnot.ext182 = zext i1 %lnot181 to i32, !dbg !3781
  %random183 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 9, !dbg !3782, !ctir !153
  %99 = load i8, i8* %random183, align 1, !dbg !3783
  %tobool184 = trunc i8 %99 to i1, !dbg !3783, !ctir !162
  %conv185 = zext i1 %tobool184 to i32, !dbg !3783
  %and186 = and i32 %conv185, %lnot.ext182, !dbg !3783
  %tobool187 = icmp ne i32 %and186, 0, !dbg !3783
  %frombool188 = zext i1 %tobool187 to i8, !dbg !3783
  store i8 %frombool188, i8* %random183, align 1, !dbg !3783, !ctir !162
  %100 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3784
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %100, i32 0, i32 14, !dbg !3785, !ctir !523
  %101 = load i8, i8* %version, align 8, !dbg !3785
  %tobool189 = trunc i8 %101 to i1, !dbg !3785, !ctir !162
  %lnot190 = xor i1 %tobool189, true, !dbg !3786
  %lnot.ext191 = zext i1 %lnot190 to i32, !dbg !3786
  %version192 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 14, !dbg !3787, !ctir !153
  %102 = load i8, i8* %version192, align 8, !dbg !3788
  %tobool193 = trunc i8 %102 to i1, !dbg !3788, !ctir !162
  %conv194 = zext i1 %tobool193 to i32, !dbg !3788
  %and195 = and i32 %conv194, %lnot.ext191, !dbg !3788
  %tobool196 = icmp ne i32 %and195, 0, !dbg !3788
  %frombool197 = zext i1 %tobool196 to i8, !dbg !3788
  store i8 %frombool197, i8* %version192, align 8, !dbg !3788, !ctir !162
  %103 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3789
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %103, i32 0, i32 13, !dbg !3790, !ctir !523
  %104 = load i8, i8* %reverse, align 1, !dbg !3790
  %tobool198 = trunc i8 %104 to i1, !dbg !3790, !ctir !162
  %lnot199 = xor i1 %tobool198, true, !dbg !3791
  %lnot.ext200 = zext i1 %lnot199 to i32, !dbg !3791
  %reverse201 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3792, !ctir !153
  %105 = load i8, i8* %reverse201, align 1, !dbg !3793
  %tobool202 = trunc i8 %105 to i1, !dbg !3793, !ctir !162
  %conv203 = zext i1 %tobool202 to i32, !dbg !3793
  %and204 = and i32 %conv203, %lnot.ext200, !dbg !3793
  %tobool205 = icmp ne i32 %and204, 0, !dbg !3793
  %frombool206 = zext i1 %tobool205 to i8, !dbg !3793
  store i8 %frombool206, i8* %reverse201, align 1, !dbg !3793, !ctir !162
  br label %for.inc, !dbg !3794

for.inc:                                          ; preds = %if.end125
  %106 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !3795
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %106, i32 0, i32 16, !dbg !3796, !ctir !523
  %107 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !dbg !3796, !ctir !152
  store %struct.keyfield* %107, %struct.keyfield** %key, align 8, !dbg !3797
  %108 = load i64, i64* %keynum, align 8, !dbg !3798
  %inc207 = add i64 %108, 1, !dbg !3798
  store i64 %inc207, i64* %keynum, align 8, !dbg !3798
  br label %for.cond, !dbg !3799, !llvm.loop !3800

for.end:                                          ; preds = %for.cond
  %call208 = call zeroext i1 @default_key_compare(%struct.keyfield* %ugkey), !dbg !3802
  br i1 %call208, label %lor.lhs.false209, label %if.then221, !dbg !3804

lor.lhs.false209:                                 ; preds = %for.end
  %reverse210 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3805, !ctir !153
  %109 = load i8, i8* %reverse210, align 1, !dbg !3805
  %tobool211 = trunc i8 %109 to i1, !dbg !3805, !ctir !162
  br i1 %tobool211, label %land.lhs.true213, label %if.end242, !dbg !3806

land.lhs.true213:                                 ; preds = %lor.lhs.false209
  %110 = load i8, i8* @stable, align 1, !dbg !3807
  %tobool214 = trunc i8 %110 to i1, !dbg !3807
  br i1 %tobool214, label %land.lhs.true219, label %lor.lhs.false216, !dbg !3808

lor.lhs.false216:                                 ; preds = %land.lhs.true213
  %111 = load i8, i8* @unique, align 1, !dbg !3809
  %tobool217 = trunc i8 %111 to i1, !dbg !3809
  br i1 %tobool217, label %land.lhs.true219, label %if.end242, !dbg !3810

land.lhs.true219:                                 ; preds = %lor.lhs.false216, %land.lhs.true213
  %112 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !3811
  %tobool220 = icmp ne %struct.keyfield* %112, null, !dbg !3811
  br i1 %tobool220, label %if.then221, label %if.end242, !dbg !3812

if.then221:                                       ; preds = %land.lhs.true219, %for.end
  call void @llvm.dbg.declare(metadata i8* %ugkey_reverse, metadata !3813, metadata !DIExpression()), !dbg !3815
  %reverse222 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3816, !ctir !153
  %113 = load i8, i8* %reverse222, align 1, !dbg !3816
  %tobool223 = trunc i8 %113 to i1, !dbg !3816, !ctir !162
  %frombool224 = zext i1 %tobool223 to i8, !dbg !3815
  store i8 %frombool224, i8* %ugkey_reverse, align 1, !dbg !3815
  %114 = load i8, i8* @stable, align 1, !dbg !3817
  %tobool225 = trunc i8 %114 to i1, !dbg !3817
  br i1 %tobool225, label %if.end232, label %lor.lhs.false227, !dbg !3819

lor.lhs.false227:                                 ; preds = %if.then221
  %115 = load i8, i8* @unique, align 1, !dbg !3820
  %tobool228 = trunc i8 %115 to i1, !dbg !3820
  br i1 %tobool228, label %if.end232, label %if.then230, !dbg !3821

if.then230:                                       ; preds = %lor.lhs.false227
  %reverse231 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3822, !ctir !153
  store i8 0, i8* %reverse231, align 1, !dbg !3823, !ctir !162
  br label %if.end232, !dbg !3824

if.end232:                                        ; preds = %if.then230, %lor.lhs.false227, %if.then221
  call void @llvm.dbg.declare(metadata [31 x i8]* %opts, metadata !3825, metadata !DIExpression()), !dbg !3826
  %arraydecay233 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0, !dbg !3827, !ctir !392
  call void @key_to_opts(%struct.keyfield* %ugkey, i8* %arraydecay233), !dbg !3828
  %arraydecay234 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0, !dbg !3829, !ctir !392
  %call235 = call i64 @strlen(i8* %arraydecay234) #14, !dbg !3830
  %call236 = call i64 @select_plural(i64 %call235), !dbg !3831
  %call237 = call i8* @ngettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.154, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.155, i64 0, i64 0), i64 %call236) #12, !dbg !3832
  %arraydecay238 = getelementptr inbounds [31 x i8], [31 x i8]* %opts, i64 0, i64 0, !dbg !3833, !ctir !392
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call237, i8* %arraydecay238), !dbg !3834
  %116 = load i8, i8* %ugkey_reverse, align 1, !dbg !3835
  %tobool239 = trunc i8 %116 to i1, !dbg !3835
  %reverse240 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3836, !ctir !153
  %frombool241 = zext i1 %tobool239 to i8, !dbg !3837
  store i8 %frombool241, i8* %reverse240, align 1, !dbg !3837, !ctir !162
  br label %if.end242, !dbg !3838

if.end242:                                        ; preds = %if.end232, %land.lhs.true219, %lor.lhs.false216, %lor.lhs.false209
  %reverse243 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %ugkey, i32 0, i32 13, !dbg !3839, !ctir !153
  %117 = load i8, i8* %reverse243, align 1, !dbg !3839
  %tobool244 = trunc i8 %117 to i1, !dbg !3839, !ctir !162
  br i1 %tobool244, label %land.lhs.true246, label %if.end256, !dbg !3841

land.lhs.true246:                                 ; preds = %if.end242
  %118 = load i8, i8* @stable, align 1, !dbg !3842
  %tobool247 = trunc i8 %118 to i1, !dbg !3842
  br i1 %tobool247, label %if.end256, label %lor.lhs.false249, !dbg !3843

lor.lhs.false249:                                 ; preds = %land.lhs.true246
  %119 = load i8, i8* @unique, align 1, !dbg !3844
  %tobool250 = trunc i8 %119 to i1, !dbg !3844
  br i1 %tobool250, label %if.end256, label %land.lhs.true252, !dbg !3845

land.lhs.true252:                                 ; preds = %lor.lhs.false249
  %120 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !3846
  %tobool253 = icmp ne %struct.keyfield* %120, null, !dbg !3846
  br i1 %tobool253, label %if.then254, label %if.end256, !dbg !3847

if.then254:                                       ; preds = %land.lhs.true252
  %call255 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.156, i64 0, i64 0)) #12, !dbg !3848
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call255), !dbg !3849
  br label %if.end256, !dbg !3849

if.end256:                                        ; preds = %if.then254, %land.lhs.true252, %lor.lhs.false249, %land.lhs.true246, %if.end242
  ret void, !dbg !3850
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @random_md5_state_init(i8* %random_source) #4 !dbg !3851 {
entry:
  %random_source.addr = alloca i8*, align 8
  %buf = alloca [16 x i8], align 16, !ctir !534
  %r = alloca %struct.randread_source*, align 8, !ctir !536
  store i8* %random_source, i8** %random_source.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %random_source.addr, metadata !3852, metadata !DIExpression()), !dbg !3853
  call void @llvm.dbg.declare(metadata [16 x i8]* %buf, metadata !3854, metadata !DIExpression()), !dbg !3855
  call void @llvm.dbg.declare(metadata %struct.randread_source** %r, metadata !3856, metadata !DIExpression()), !dbg !3857
  %0 = load i8*, i8** %random_source.addr, align 8, !dbg !3858
  %call = call %struct.randread_source* @randread_new(i8* %0, i64 16), !dbg !3859
  store %struct.randread_source* %call, %struct.randread_source** %r, align 8, !dbg !3857
  %1 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !dbg !3860
  %tobool = icmp ne %struct.randread_source* %1, null, !dbg !3860
  br i1 %tobool, label %if.end, label %if.then, !dbg !3862

if.then:                                          ; preds = %entry
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !3863
  %2 = load i8*, i8** %random_source.addr, align 8, !dbg !3864
  call void @sort_die(i8* %call1, i8* %2) #15, !dbg !3865
  unreachable, !dbg !3865

if.end:                                           ; preds = %entry
  %3 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !dbg !3866
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !3867, !ctir !534
  call void @randread(%struct.randread_source* %3, i8* %arraydecay, i64 16), !dbg !3868
  %4 = load %struct.randread_source*, %struct.randread_source** %r, align 8, !dbg !3869
  %call2 = call i32 @randread_free(%struct.randread_source* %4), !dbg !3871
  %cmp = icmp ne i32 %call2, 0, !dbg !3872
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !3873

if.then3:                                         ; preds = %if.end
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0)) #12, !dbg !3874
  %5 = load i8*, i8** %random_source.addr, align 8, !dbg !3875
  call void @sort_die(i8* %call4, i8* %5) #15, !dbg !3876
  unreachable, !dbg !3876

if.end5:                                          ; preds = %if.end
  call void @md5_init_ctx(%struct.md5_ctx* @random_md5_state) #12, !dbg !3877
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !3878, !ctir !534
  call void @md5_process_bytes(i8* %arraydecay6, i64 16, %struct.md5_ctx* @random_md5_state) #12, !dbg !3879
  ret void, !dbg !3880
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @check(i8* %file_name, i8 signext %checkonly) #4 !dbg !3881 {
entry:
  %file_name.addr = alloca i8*, align 8
  %checkonly.addr = alloca i8, align 1
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %buf = alloca %struct.buffer, align 8, !ctir !608
  %temp = alloca %struct.line, align 8, !ctir !541
  %alloc = alloca i64, align 8, !ctir !52
  %line_number = alloca i64, align 8, !ctir !464
  %key = alloca %struct.keyfield*, align 8, !ctir !522
  %nonunique = alloca i8, align 1, !ctir !162
  %ordered = alloca i8, align 1, !ctir !162
  %line = alloca %struct.line*, align 8, !ctir !539
  %linebase = alloca %struct.line*, align 8, !ctir !539
  %disorder_line = alloca %struct.line*, align 8, !ctir !539
  %disorder_line_number = alloca i64, align 8, !ctir !464
  %hr_buf = alloca [21 x i8], align 16, !ctir !363
  store i8* %file_name, i8** %file_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file_name.addr, metadata !3884, metadata !DIExpression()), !dbg !3885
  store i8 %checkonly, i8* %checkonly.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %checkonly.addr, metadata !3886, metadata !DIExpression()), !dbg !3887
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !3888, metadata !DIExpression()), !dbg !3889
  %0 = load i8*, i8** %file_name.addr, align 8, !dbg !3890
  %call = call %struct._IO_FILE* @xfopen(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !3891
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !3889
  call void @llvm.dbg.declare(metadata %struct.buffer* %buf, metadata !3892, metadata !DIExpression()), !dbg !3893
  call void @llvm.dbg.declare(metadata %struct.line* %temp, metadata !3894, metadata !DIExpression()), !dbg !3895
  call void @llvm.dbg.declare(metadata i64* %alloc, metadata !3896, metadata !DIExpression()), !dbg !3897
  store i64 0, i64* %alloc, align 8, !dbg !3897
  call void @llvm.dbg.declare(metadata i64* %line_number, metadata !3898, metadata !DIExpression()), !dbg !3899
  store i64 0, i64* %line_number, align 8, !dbg !3899
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !3900, metadata !DIExpression()), !dbg !3901
  %1 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !3902
  store %struct.keyfield* %1, %struct.keyfield** %key, align 8, !dbg !3901
  call void @llvm.dbg.declare(metadata i8* %nonunique, metadata !3903, metadata !DIExpression()), !dbg !3904
  %2 = load i8, i8* @unique, align 1, !dbg !3905
  %tobool = trunc i8 %2 to i1, !dbg !3905
  %lnot = xor i1 %tobool, true, !dbg !3906
  %frombool = zext i1 %lnot to i8, !dbg !3904
  store i8 %frombool, i8* %nonunique, align 1, !dbg !3904
  call void @llvm.dbg.declare(metadata i8* %ordered, metadata !3907, metadata !DIExpression()), !dbg !3908
  store i8 1, i8* %ordered, align 1, !dbg !3908
  %3 = load i64, i64* @merge_buffer_size, align 8, !dbg !3909
  %4 = load i64, i64* @sort_size, align 8, !dbg !3909
  %cmp = icmp ugt i64 %3, %4, !dbg !3909
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3909

cond.true:                                        ; preds = %entry
  %5 = load i64, i64* @merge_buffer_size, align 8, !dbg !3909
  br label %cond.end, !dbg !3909

cond.false:                                       ; preds = %entry
  %6 = load i64, i64* @sort_size, align 8, !dbg !3909
  br label %cond.end, !dbg !3909

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %6, %cond.false ], !dbg !3909
  call void @initbuf(%struct.buffer* %buf, i64 32, i64 %cond), !dbg !3910
  %text = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !3911, !ctir !541
  store i8* null, i8** %text, align 8, !dbg !3912, !ctir !7
  br label %while.cond, !dbg !3913

while.cond:                                       ; preds = %if.end69, %cond.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !3914
  %8 = load i8*, i8** %file_name.addr, align 8, !dbg !3915
  %call1 = call zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %7, i8* %8), !dbg !3916
  br i1 %call1, label %while.body, label %while.end70, !dbg !3913

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.line** %line, metadata !3917, metadata !DIExpression()), !dbg !3919
  %call2 = call %struct.line* @buffer_linelim(%struct.buffer* %buf), !dbg !3920
  store %struct.line* %call2, %struct.line** %line, align 8, !dbg !3919
  call void @llvm.dbg.declare(metadata %struct.line** %linebase, metadata !3921, metadata !DIExpression()), !dbg !3922
  %9 = load %struct.line*, %struct.line** %line, align 8, !dbg !3923
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !3924, !ctir !608
  %10 = load i64, i64* %nlines, align 8, !dbg !3924, !ctir !52
  %idx.neg = sub i64 0, %10, !dbg !3925
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %9, i64 %idx.neg, !dbg !3925, !ctir !540
  store %struct.line* %add.ptr, %struct.line** %linebase, align 8, !dbg !3922
  %11 = load i64, i64* %alloc, align 8, !dbg !3926
  %tobool3 = icmp ne i64 %11, 0, !dbg !3926
  br i1 %tobool3, label %land.lhs.true, label %if.end19, !dbg !3928

land.lhs.true:                                    ; preds = %while.body
  %12 = load i8, i8* %nonunique, align 1, !dbg !3929
  %tobool4 = trunc i8 %12 to i1, !dbg !3929
  %conv = zext i1 %tobool4 to i32, !dbg !3929
  %13 = load %struct.line*, %struct.line** %line, align 8, !dbg !3930
  %add.ptr5 = getelementptr inbounds %struct.line, %struct.line* %13, i64 -1, !dbg !3931, !ctir !540
  %call6 = call i32 @compare(%struct.line* %temp, %struct.line* %add.ptr5), !dbg !3932
  %cmp7 = icmp sle i32 %conv, %call6, !dbg !3933
  br i1 %cmp7, label %if.then, label %if.end19, !dbg !3934

if.then:                                          ; preds = %land.lhs.true
  br label %found_disorder, !dbg !3935

found_disorder:                                   ; preds = %if.then30, %if.then
  call void @llvm.dbg.label(metadata !3936), !dbg !3938
  %14 = load i8, i8* %checkonly.addr, align 1, !dbg !3939
  %conv9 = sext i8 %14 to i32, !dbg !3939
  %cmp10 = icmp eq i32 %conv9, 99, !dbg !3942
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !3943

if.then12:                                        ; preds = %found_disorder
  call void @llvm.dbg.declare(metadata %struct.line** %disorder_line, metadata !3944, metadata !DIExpression()), !dbg !3946
  %15 = load %struct.line*, %struct.line** %line, align 8, !dbg !3947
  %add.ptr13 = getelementptr inbounds %struct.line, %struct.line* %15, i64 -1, !dbg !3948, !ctir !540
  store %struct.line* %add.ptr13, %struct.line** %disorder_line, align 8, !dbg !3946
  call void @llvm.dbg.declare(metadata i64* %disorder_line_number, metadata !3949, metadata !DIExpression()), !dbg !3950
  %call14 = call %struct.line* @buffer_linelim(%struct.buffer* %buf), !dbg !3951
  %16 = load %struct.line*, %struct.line** %disorder_line, align 8, !dbg !3952
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %call14 to i64, !dbg !3953
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %16 to i64, !dbg !3953
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3953
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32, !dbg !3953
  %17 = load i64, i64* %line_number, align 8, !dbg !3954
  %add = add i64 %sub.ptr.div, %17, !dbg !3955
  store i64 %add, i64* %disorder_line_number, align 8, !dbg !3950
  call void @llvm.dbg.declare(metadata [21 x i8]* %hr_buf, metadata !3956, metadata !DIExpression()), !dbg !3957
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3958
  %call15 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.157, i64 0, i64 0)) #12, !dbg !3959
  %19 = load i8*, i8** @program_name, align 8, !dbg !3960
  %20 = load i8*, i8** %file_name.addr, align 8, !dbg !3961
  %21 = load i64, i64* %disorder_line_number, align 8, !dbg !3962
  %arraydecay = getelementptr inbounds [21 x i8], [21 x i8]* %hr_buf, i64 0, i64 0, !dbg !3963, !ctir !363
  %call16 = call i8* @umaxtostr(i64 %21, i8* %arraydecay), !dbg !3964
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* %call15, i8* %19, i8* %20, i8* %call16), !dbg !3965
  %22 = load %struct.line*, %struct.line** %disorder_line, align 8, !dbg !3966
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3967
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.158, i64 0, i64 0)) #12, !dbg !3968
  call void @write_line(%struct.line* %22, %struct._IO_FILE* %23, i8* %call18), !dbg !3969
  br label %if.end, !dbg !3970

if.end:                                           ; preds = %if.then12, %found_disorder
  store i8 0, i8* %ordered, align 1, !dbg !3971
  br label %while.end70, !dbg !3972

if.end19:                                         ; preds = %land.lhs.true, %while.body
  br label %while.cond20, !dbg !3973

while.cond20:                                     ; preds = %if.end31, %if.end19
  %24 = load %struct.line*, %struct.line** %linebase, align 8, !dbg !3974
  %25 = load %struct.line*, %struct.line** %line, align 8, !dbg !3975
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %25, i32 -1, !dbg !3975, !ctir !540
  store %struct.line* %incdec.ptr, %struct.line** %line, align 8, !dbg !3975
  %cmp21 = icmp ult %struct.line* %24, %incdec.ptr, !dbg !3976
  br i1 %cmp21, label %while.body23, label %while.end, !dbg !3973

while.body23:                                     ; preds = %while.cond20
  %26 = load i8, i8* %nonunique, align 1, !dbg !3977
  %tobool24 = trunc i8 %26 to i1, !dbg !3977
  %conv25 = zext i1 %tobool24 to i32, !dbg !3977
  %27 = load %struct.line*, %struct.line** %line, align 8, !dbg !3979
  %28 = load %struct.line*, %struct.line** %line, align 8, !dbg !3980
  %add.ptr26 = getelementptr inbounds %struct.line, %struct.line* %28, i64 -1, !dbg !3981, !ctir !540
  %call27 = call i32 @compare(%struct.line* %27, %struct.line* %add.ptr26), !dbg !3982
  %cmp28 = icmp sle i32 %conv25, %call27, !dbg !3983
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !3984

if.then30:                                        ; preds = %while.body23
  br label %found_disorder, !dbg !3985

if.end31:                                         ; preds = %while.body23
  br label %while.cond20, !dbg !3973, !llvm.loop !3986

while.end:                                        ; preds = %while.cond20
  %nlines32 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !3988, !ctir !608
  %29 = load i64, i64* %nlines32, align 8, !dbg !3988, !ctir !52
  %30 = load i64, i64* %line_number, align 8, !dbg !3989
  %add33 = add i64 %30, %29, !dbg !3989
  store i64 %add33, i64* %line_number, align 8, !dbg !3989
  %31 = load i64, i64* %alloc, align 8, !dbg !3990
  %32 = load %struct.line*, %struct.line** %line, align 8, !dbg !3992
  %length = getelementptr inbounds %struct.line, %struct.line* %32, i32 0, i32 1, !dbg !3993, !ctir !540
  %33 = load i64, i64* %length, align 8, !dbg !3993, !ctir !52
  %cmp34 = icmp ult i64 %31, %33, !dbg !3994
  br i1 %cmp34, label %if.then36, label %if.end47, !dbg !3995

if.then36:                                        ; preds = %while.end
  br label %do.body, !dbg !3996

do.body:                                          ; preds = %do.cond, %if.then36
  %34 = load i64, i64* %alloc, align 8, !dbg !3998
  %mul = mul i64 %34, 2, !dbg !3998
  store i64 %mul, i64* %alloc, align 8, !dbg !3998
  %35 = load i64, i64* %alloc, align 8, !dbg !4000
  %tobool37 = icmp ne i64 %35, 0, !dbg !4000
  br i1 %tobool37, label %if.end40, label %if.then38, !dbg !4002

if.then38:                                        ; preds = %do.body
  %36 = load %struct.line*, %struct.line** %line, align 8, !dbg !4003
  %length39 = getelementptr inbounds %struct.line, %struct.line* %36, i32 0, i32 1, !dbg !4005, !ctir !540
  %37 = load i64, i64* %length39, align 8, !dbg !4005, !ctir !52
  store i64 %37, i64* %alloc, align 8, !dbg !4006
  br label %do.end, !dbg !4007

if.end40:                                         ; preds = %do.body
  br label %do.cond, !dbg !4008

do.cond:                                          ; preds = %if.end40
  %38 = load i64, i64* %alloc, align 8, !dbg !4009
  %39 = load %struct.line*, %struct.line** %line, align 8, !dbg !4010
  %length41 = getelementptr inbounds %struct.line, %struct.line* %39, i32 0, i32 1, !dbg !4011, !ctir !540
  %40 = load i64, i64* %length41, align 8, !dbg !4011, !ctir !52
  %cmp42 = icmp ult i64 %38, %40, !dbg !4012
  br i1 %cmp42, label %do.body, label %do.end, !dbg !4008, !llvm.loop !4013

do.end:                                           ; preds = %do.cond, %if.then38
  %text44 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4015, !ctir !541
  %41 = load i8*, i8** %text44, align 8, !dbg !4015, !ctir !7
  call void @free(i8* %41) #12, !dbg !4016
  %42 = load i64, i64* %alloc, align 8, !dbg !4017
  %call45 = call noalias i8* @xmalloc(i64 %42), !dbg !4018
  %text46 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4019, !ctir !541
  store i8* %call45, i8** %text46, align 8, !dbg !4020, !ctir !7
  br label %if.end47, !dbg !4021

if.end47:                                         ; preds = %do.end, %while.end
  %text48 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4022, !ctir !541
  %43 = load i8*, i8** %text48, align 8, !dbg !4022, !ctir !7
  %44 = load %struct.line*, %struct.line** %line, align 8, !dbg !4023
  %text49 = getelementptr inbounds %struct.line, %struct.line* %44, i32 0, i32 0, !dbg !4024, !ctir !540
  %45 = load i8*, i8** %text49, align 8, !dbg !4024, !ctir !7
  %46 = load %struct.line*, %struct.line** %line, align 8, !dbg !4025
  %length50 = getelementptr inbounds %struct.line, %struct.line* %46, i32 0, i32 1, !dbg !4026, !ctir !540
  %47 = load i64, i64* %length50, align 8, !dbg !4026, !ctir !52
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %43, i8* align 1 %45, i64 %47, i1 false), !dbg !4027
  %48 = load %struct.line*, %struct.line** %line, align 8, !dbg !4028
  %length51 = getelementptr inbounds %struct.line, %struct.line* %48, i32 0, i32 1, !dbg !4029, !ctir !540
  %49 = load i64, i64* %length51, align 8, !dbg !4029, !ctir !52
  %length52 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 1, !dbg !4030, !ctir !541
  store i64 %49, i64* %length52, align 8, !dbg !4031, !ctir !52
  %50 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4032
  %tobool53 = icmp ne %struct.keyfield* %50, null, !dbg !4032
  br i1 %tobool53, label %if.then54, label %if.end69, !dbg !4034

if.then54:                                        ; preds = %if.end47
  %text55 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4035, !ctir !541
  %51 = load i8*, i8** %text55, align 8, !dbg !4035, !ctir !7
  %52 = load %struct.line*, %struct.line** %line, align 8, !dbg !4037
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %52, i32 0, i32 2, !dbg !4038, !ctir !540
  %53 = load i8*, i8** %keybeg, align 8, !dbg !4038, !ctir !7
  %54 = load %struct.line*, %struct.line** %line, align 8, !dbg !4039
  %text56 = getelementptr inbounds %struct.line, %struct.line* %54, i32 0, i32 0, !dbg !4040, !ctir !540
  %55 = load i8*, i8** %text56, align 8, !dbg !4040, !ctir !7
  %sub.ptr.lhs.cast57 = ptrtoint i8* %53 to i64, !dbg !4041
  %sub.ptr.rhs.cast58 = ptrtoint i8* %55 to i64, !dbg !4041
  %sub.ptr.sub59 = sub i64 %sub.ptr.lhs.cast57, %sub.ptr.rhs.cast58, !dbg !4041
  %add.ptr60 = getelementptr inbounds i8, i8* %51, i64 %sub.ptr.sub59, !dbg !4042, !ctir !8
  %keybeg61 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 2, !dbg !4043, !ctir !541
  store i8* %add.ptr60, i8** %keybeg61, align 8, !dbg !4044, !ctir !7
  %text62 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4045, !ctir !541
  %56 = load i8*, i8** %text62, align 8, !dbg !4045, !ctir !7
  %57 = load %struct.line*, %struct.line** %line, align 8, !dbg !4046
  %keylim = getelementptr inbounds %struct.line, %struct.line* %57, i32 0, i32 3, !dbg !4047, !ctir !540
  %58 = load i8*, i8** %keylim, align 8, !dbg !4047, !ctir !7
  %59 = load %struct.line*, %struct.line** %line, align 8, !dbg !4048
  %text63 = getelementptr inbounds %struct.line, %struct.line* %59, i32 0, i32 0, !dbg !4049, !ctir !540
  %60 = load i8*, i8** %text63, align 8, !dbg !4049, !ctir !7
  %sub.ptr.lhs.cast64 = ptrtoint i8* %58 to i64, !dbg !4050
  %sub.ptr.rhs.cast65 = ptrtoint i8* %60 to i64, !dbg !4050
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65, !dbg !4050
  %add.ptr67 = getelementptr inbounds i8, i8* %56, i64 %sub.ptr.sub66, !dbg !4051, !ctir !8
  %keylim68 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 3, !dbg !4052, !ctir !541
  store i8* %add.ptr67, i8** %keylim68, align 8, !dbg !4053, !ctir !7
  br label %if.end69, !dbg !4054

if.end69:                                         ; preds = %if.then54, %if.end47
  br label %while.cond, !dbg !3913, !llvm.loop !4055

while.end70:                                      ; preds = %if.end, %while.cond
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !4057
  %62 = load i8*, i8** %file_name.addr, align 8, !dbg !4058
  call void @xfclose(%struct._IO_FILE* %61, i8* %62), !dbg !4059
  %buf71 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 0, !dbg !4060, !ctir !608
  %63 = load i8*, i8** %buf71, align 8, !dbg !4060, !ctir !7
  call void @free(i8* %63) #12, !dbg !4061
  %text72 = getelementptr inbounds %struct.line, %struct.line* %temp, i32 0, i32 0, !dbg !4062, !ctir !541
  %64 = load i8*, i8** %text72, align 8, !dbg !4062, !ctir !7
  call void @free(i8* %64) #12, !dbg !4063
  %65 = load i8, i8* %ordered, align 1, !dbg !4064
  %tobool73 = trunc i8 %65 to i1, !dbg !4064
  ret i1 %tobool73, !dbg !4065
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_inputs(i8** %files, i64 %nfiles) #4 !dbg !4066 {
entry:
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !52
  store i8** %files, i8*** %files.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %files.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !4071, metadata !DIExpression()), !dbg !4072
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4073, metadata !DIExpression()), !dbg !4075
  store i64 0, i64* %i, align 8, !dbg !4075
  br label %for.cond, !dbg !4076

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !4077
  %1 = load i64, i64* %nfiles.addr, align 8, !dbg !4079
  %cmp = icmp ult i64 %0, %1, !dbg !4080
  br i1 %cmp, label %for.body, label %for.end, !dbg !4081

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %files.addr, align 8, !dbg !4082
  %3 = load i64, i64* %i, align 8, !dbg !4082
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3, !dbg !4082, !ctir !582
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !4082
  %call = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #14, !dbg !4082
  %cmp1 = icmp eq i32 %call, 0, !dbg !4082
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4085

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4086

if.end:                                           ; preds = %for.body
  %5 = load i8**, i8*** %files.addr, align 8, !dbg !4087
  %6 = load i64, i64* %i, align 8, !dbg !4089
  %arrayidx2 = getelementptr inbounds i8*, i8** %5, i64 %6, !dbg !4087, !ctir !582
  %7 = load i8*, i8** %arrayidx2, align 8, !dbg !4087
  %call3 = call i32 @euidaccess(i8* %7, i32 4) #12, !dbg !4090
  %cmp4 = icmp ne i32 %call3, 0, !dbg !4091
  br i1 %cmp4, label %if.then5, label %if.end8, !dbg !4092

if.then5:                                         ; preds = %if.end
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.166, i64 0, i64 0)) #12, !dbg !4093
  %8 = load i8**, i8*** %files.addr, align 8, !dbg !4094
  %9 = load i64, i64* %i, align 8, !dbg !4095
  %arrayidx7 = getelementptr inbounds i8*, i8** %8, i64 %9, !dbg !4094, !ctir !582
  %10 = load i8*, i8** %arrayidx7, align 8, !dbg !4094
  call void @sort_die(i8* %call6, i8* %10) #15, !dbg !4096
  unreachable, !dbg !4096

if.end8:                                          ; preds = %if.end
  br label %for.inc, !dbg !4097

for.inc:                                          ; preds = %if.end8, %if.then
  %11 = load i64, i64* %i, align 8, !dbg !4098
  %inc = add i64 %11, 1, !dbg !4098
  store i64 %inc, i64* %i, align 8, !dbg !4098
  br label %for.cond, !dbg !4099, !llvm.loop !4100

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4102
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_output(i8* %outfile) #4 !dbg !4103 {
entry:
  %outfile.addr = alloca i8*, align 8
  %oflags = alloca i32, align 4, !ctir !5
  %outfd = alloca i32, align 4, !ctir !5
  store i8* %outfile, i8** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outfile.addr, metadata !4104, metadata !DIExpression()), !dbg !4105
  %0 = load i8*, i8** %outfile.addr, align 8, !dbg !4106
  %tobool = icmp ne i8* %0, null, !dbg !4106
  br i1 %tobool, label %if.then, label %if.end3, !dbg !4108

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %oflags, metadata !4109, metadata !DIExpression()), !dbg !4111
  store i32 524353, i32* %oflags, align 4, !dbg !4111
  call void @llvm.dbg.declare(metadata i32* %outfd, metadata !4112, metadata !DIExpression()), !dbg !4113
  %1 = load i8*, i8** %outfile.addr, align 8, !dbg !4114
  %2 = load i32, i32* %oflags, align 4, !dbg !4115
  %call = call i32 (i8*, i32, ...) @open(i8* %1, i32 %2, i32 438), !dbg !4116
  store i32 %call, i32* %outfd, align 4, !dbg !4113
  %3 = load i32, i32* %outfd, align 4, !dbg !4117
  %cmp = icmp slt i32 %3, 0, !dbg !4119
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4120

if.then1:                                         ; preds = %if.then
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !4121
  %4 = load i8*, i8** %outfile.addr, align 8, !dbg !4122
  call void @sort_die(i8* %call2, i8* %4) #15, !dbg !4123
  unreachable, !dbg !4123

if.end:                                           ; preds = %if.then
  %5 = load i32, i32* %outfd, align 4, !dbg !4124
  call void @move_fd(i32 %5, i32 1), !dbg !4125
  br label %if.end3, !dbg !4126

if.end3:                                          ; preds = %if.end, %entry
  ret void, !dbg !4127
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @merge(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, i8* %output_file) #4 !dbg !4128 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %output_file.addr = alloca i8*, align 8
  %in = alloca i64, align 8, !ctir !52
  %out = alloca i64, align 8, !ctir !52
  %remainder = alloca i64, align 8, !ctir !52
  %cheap_slots = alloca i64, align 8, !ctir !52
  %tfp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %temp = alloca %struct.tempnode*, align 8, !ctir !407
  %num_merged = alloca i64, align 8, !ctir !52
  %nshortmerge = alloca i64, align 8, !ctir !52
  %tfp32 = alloca %struct._IO_FILE*, align 8, !ctir !389
  %temp33 = alloca %struct.tempnode*, align 8, !ctir !407
  %num_merged35 = alloca i64, align 8, !ctir !52
  %fps = alloca %struct._IO_FILE**, align 8, !ctir !584
  %nopened = alloca i64, align 8, !ctir !52
  %ofp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %tfp92 = alloca %struct._IO_FILE*, align 8, !ctir !389
  %temp93 = alloca %struct.tempnode*, align 8, !ctir !407
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sortfile** %files.addr, metadata !4131, metadata !DIExpression()), !dbg !4132
  store i64 %ntemps, i64* %ntemps.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ntemps.addr, metadata !4133, metadata !DIExpression()), !dbg !4134
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !4135, metadata !DIExpression()), !dbg !4136
  store i8* %output_file, i8** %output_file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output_file.addr, metadata !4137, metadata !DIExpression()), !dbg !4138
  br label %while.cond, !dbg !4139

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @nmerge, align 4, !dbg !4140
  %conv = zext i32 %0 to i64, !dbg !4140
  %1 = load i64, i64* %nfiles.addr, align 8, !dbg !4141
  %cmp = icmp ult i64 %conv, %1, !dbg !4142
  br i1 %cmp, label %while.body, label %while.end, !dbg !4139

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %in, metadata !4143, metadata !DIExpression()), !dbg !4145
  call void @llvm.dbg.declare(metadata i64* %out, metadata !4146, metadata !DIExpression()), !dbg !4147
  call void @llvm.dbg.declare(metadata i64* %remainder, metadata !4148, metadata !DIExpression()), !dbg !4149
  call void @llvm.dbg.declare(metadata i64* %cheap_slots, metadata !4150, metadata !DIExpression()), !dbg !4151
  store i64 0, i64* %in, align 8, !dbg !4152
  store i64 0, i64* %out, align 8, !dbg !4154
  br label %for.cond, !dbg !4155

for.cond:                                         ; preds = %for.inc, %while.body
  %2 = load i32, i32* @nmerge, align 4, !dbg !4156
  %conv2 = zext i32 %2 to i64, !dbg !4156
  %3 = load i64, i64* %nfiles.addr, align 8, !dbg !4158
  %4 = load i64, i64* %in, align 8, !dbg !4159
  %sub = sub i64 %3, %4, !dbg !4160
  %cmp3 = icmp ule i64 %conv2, %sub, !dbg !4161
  br i1 %cmp3, label %for.body, label %for.end, !dbg !4162

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp, metadata !4163, metadata !DIExpression()), !dbg !4165
  call void @llvm.dbg.declare(metadata %struct.tempnode** %temp, metadata !4166, metadata !DIExpression()), !dbg !4167
  %call = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp), !dbg !4168
  store %struct.tempnode* %call, %struct.tempnode** %temp, align 8, !dbg !4167
  call void @llvm.dbg.declare(metadata i64* %num_merged, metadata !4169, metadata !DIExpression()), !dbg !4170
  %5 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4171
  %6 = load i64, i64* %in, align 8, !dbg !4172
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %5, i64 %6, !dbg !4171, !ctir !402
  %7 = load i64, i64* %ntemps.addr, align 8, !dbg !4173
  %8 = load i32, i32* @nmerge, align 4, !dbg !4173
  %conv5 = zext i32 %8 to i64, !dbg !4173
  %cmp6 = icmp ult i64 %7, %conv5, !dbg !4173
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !4173

cond.true:                                        ; preds = %for.body
  %9 = load i64, i64* %ntemps.addr, align 8, !dbg !4173
  br label %cond.end, !dbg !4173

cond.false:                                       ; preds = %for.body
  %10 = load i32, i32* @nmerge, align 4, !dbg !4173
  %conv8 = zext i32 %10 to i64, !dbg !4173
  br label %cond.end, !dbg !4173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %9, %cond.true ], [ %conv8, %cond.false ], !dbg !4173
  %11 = load i32, i32* @nmerge, align 4, !dbg !4174
  %conv9 = zext i32 %11 to i64, !dbg !4174
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !dbg !4175
  %13 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !dbg !4176
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %13, i32 0, i32 3, !dbg !4177, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !4176, !ctir !417
  %call10 = call i64 @mergefiles(%struct.sortfile* %arrayidx, i64 %cond, i64 %conv9, %struct._IO_FILE* %12, i8* %arraydecay), !dbg !4178
  store i64 %call10, i64* %num_merged, align 8, !dbg !4170
  %14 = load i64, i64* %ntemps.addr, align 8, !dbg !4179
  %15 = load i64, i64* %num_merged, align 8, !dbg !4179
  %cmp11 = icmp ult i64 %14, %15, !dbg !4179
  br i1 %cmp11, label %cond.true13, label %cond.false14, !dbg !4179

cond.true13:                                      ; preds = %cond.end
  %16 = load i64, i64* %ntemps.addr, align 8, !dbg !4179
  br label %cond.end15, !dbg !4179

cond.false14:                                     ; preds = %cond.end
  %17 = load i64, i64* %num_merged, align 8, !dbg !4179
  br label %cond.end15, !dbg !4179

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i64 [ %16, %cond.true13 ], [ %17, %cond.false14 ], !dbg !4179
  %18 = load i64, i64* %ntemps.addr, align 8, !dbg !4180
  %sub17 = sub i64 %18, %cond16, !dbg !4180
  store i64 %sub17, i64* %ntemps.addr, align 8, !dbg !4180
  %19 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !dbg !4181
  %name18 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %19, i32 0, i32 3, !dbg !4182, !ctir !408
  %arraydecay19 = getelementptr inbounds [0 x i8], [0 x i8]* %name18, i64 0, i64 0, !dbg !4181, !ctir !417
  %20 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4183
  %21 = load i64, i64* %out, align 8, !dbg !4184
  %arrayidx20 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %20, i64 %21, !dbg !4183, !ctir !402
  %name21 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx20, i32 0, i32 0, !dbg !4185, !ctir !403
  store i8* %arraydecay19, i8** %name21, align 8, !dbg !4186, !ctir !90
  %22 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !dbg !4187
  %23 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4188
  %24 = load i64, i64* %out, align 8, !dbg !4189
  %arrayidx22 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %23, i64 %24, !dbg !4188, !ctir !402
  %temp23 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx22, i32 0, i32 1, !dbg !4190, !ctir !403
  store %struct.tempnode* %22, %struct.tempnode** %temp23, align 8, !dbg !4191, !ctir !407
  %25 = load i64, i64* %num_merged, align 8, !dbg !4192
  %26 = load i64, i64* %in, align 8, !dbg !4193
  %add = add i64 %26, %25, !dbg !4193
  store i64 %add, i64* %in, align 8, !dbg !4193
  br label %for.inc, !dbg !4194

for.inc:                                          ; preds = %cond.end15
  %27 = load i64, i64* %out, align 8, !dbg !4195
  %inc = add i64 %27, 1, !dbg !4195
  store i64 %inc, i64* %out, align 8, !dbg !4195
  br label %for.cond, !dbg !4196, !llvm.loop !4197

for.end:                                          ; preds = %for.cond
  %28 = load i64, i64* %nfiles.addr, align 8, !dbg !4199
  %29 = load i64, i64* %in, align 8, !dbg !4200
  %sub24 = sub i64 %28, %29, !dbg !4201
  store i64 %sub24, i64* %remainder, align 8, !dbg !4202
  %30 = load i32, i32* @nmerge, align 4, !dbg !4203
  %conv25 = zext i32 %30 to i64, !dbg !4203
  %31 = load i64, i64* %out, align 8, !dbg !4204
  %32 = load i32, i32* @nmerge, align 4, !dbg !4205
  %conv26 = zext i32 %32 to i64, !dbg !4205
  %rem = urem i64 %31, %conv26, !dbg !4206
  %sub27 = sub i64 %conv25, %rem, !dbg !4207
  store i64 %sub27, i64* %cheap_slots, align 8, !dbg !4208
  %33 = load i64, i64* %cheap_slots, align 8, !dbg !4209
  %34 = load i64, i64* %remainder, align 8, !dbg !4211
  %cmp28 = icmp ult i64 %33, %34, !dbg !4212
  br i1 %cmp28, label %if.then, label %if.end, !dbg !4213

if.then:                                          ; preds = %for.end
  call void @llvm.dbg.declare(metadata i64* %nshortmerge, metadata !4214, metadata !DIExpression()), !dbg !4216
  %35 = load i64, i64* %remainder, align 8, !dbg !4217
  %36 = load i64, i64* %cheap_slots, align 8, !dbg !4218
  %sub30 = sub i64 %35, %36, !dbg !4219
  %add31 = add i64 %sub30, 1, !dbg !4220
  store i64 %add31, i64* %nshortmerge, align 8, !dbg !4216
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp32, metadata !4221, metadata !DIExpression()), !dbg !4222
  call void @llvm.dbg.declare(metadata %struct.tempnode** %temp33, metadata !4223, metadata !DIExpression()), !dbg !4224
  %call34 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp32), !dbg !4225
  store %struct.tempnode* %call34, %struct.tempnode** %temp33, align 8, !dbg !4224
  call void @llvm.dbg.declare(metadata i64* %num_merged35, metadata !4226, metadata !DIExpression()), !dbg !4227
  %37 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4228
  %38 = load i64, i64* %in, align 8, !dbg !4229
  %arrayidx36 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %37, i64 %38, !dbg !4228, !ctir !402
  %39 = load i64, i64* %ntemps.addr, align 8, !dbg !4230
  %40 = load i64, i64* %nshortmerge, align 8, !dbg !4230
  %cmp37 = icmp ult i64 %39, %40, !dbg !4230
  br i1 %cmp37, label %cond.true39, label %cond.false40, !dbg !4230

cond.true39:                                      ; preds = %if.then
  %41 = load i64, i64* %ntemps.addr, align 8, !dbg !4230
  br label %cond.end41, !dbg !4230

cond.false40:                                     ; preds = %if.then
  %42 = load i64, i64* %nshortmerge, align 8, !dbg !4230
  br label %cond.end41, !dbg !4230

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i64 [ %41, %cond.true39 ], [ %42, %cond.false40 ], !dbg !4230
  %43 = load i64, i64* %nshortmerge, align 8, !dbg !4231
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp32, align 8, !dbg !4232
  %45 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !dbg !4233
  %name43 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %45, i32 0, i32 3, !dbg !4234, !ctir !408
  %arraydecay44 = getelementptr inbounds [0 x i8], [0 x i8]* %name43, i64 0, i64 0, !dbg !4233, !ctir !417
  %call45 = call i64 @mergefiles(%struct.sortfile* %arrayidx36, i64 %cond42, i64 %43, %struct._IO_FILE* %44, i8* %arraydecay44), !dbg !4235
  store i64 %call45, i64* %num_merged35, align 8, !dbg !4227
  %46 = load i64, i64* %ntemps.addr, align 8, !dbg !4236
  %47 = load i64, i64* %num_merged35, align 8, !dbg !4236
  %cmp46 = icmp ult i64 %46, %47, !dbg !4236
  br i1 %cmp46, label %cond.true48, label %cond.false49, !dbg !4236

cond.true48:                                      ; preds = %cond.end41
  %48 = load i64, i64* %ntemps.addr, align 8, !dbg !4236
  br label %cond.end50, !dbg !4236

cond.false49:                                     ; preds = %cond.end41
  %49 = load i64, i64* %num_merged35, align 8, !dbg !4236
  br label %cond.end50, !dbg !4236

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i64 [ %48, %cond.true48 ], [ %49, %cond.false49 ], !dbg !4236
  %50 = load i64, i64* %ntemps.addr, align 8, !dbg !4237
  %sub52 = sub i64 %50, %cond51, !dbg !4237
  store i64 %sub52, i64* %ntemps.addr, align 8, !dbg !4237
  %51 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !dbg !4238
  %name53 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %51, i32 0, i32 3, !dbg !4239, !ctir !408
  %arraydecay54 = getelementptr inbounds [0 x i8], [0 x i8]* %name53, i64 0, i64 0, !dbg !4238, !ctir !417
  %52 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4240
  %53 = load i64, i64* %out, align 8, !dbg !4241
  %arrayidx55 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %52, i64 %53, !dbg !4240, !ctir !402
  %name56 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx55, i32 0, i32 0, !dbg !4242, !ctir !403
  store i8* %arraydecay54, i8** %name56, align 8, !dbg !4243, !ctir !90
  %54 = load %struct.tempnode*, %struct.tempnode** %temp33, align 8, !dbg !4244
  %55 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4245
  %56 = load i64, i64* %out, align 8, !dbg !4246
  %inc57 = add i64 %56, 1, !dbg !4246
  store i64 %inc57, i64* %out, align 8, !dbg !4246
  %arrayidx58 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %55, i64 %56, !dbg !4245, !ctir !402
  %temp59 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx58, i32 0, i32 1, !dbg !4247, !ctir !403
  store %struct.tempnode* %54, %struct.tempnode** %temp59, align 8, !dbg !4248, !ctir !407
  %57 = load i64, i64* %num_merged35, align 8, !dbg !4249
  %58 = load i64, i64* %in, align 8, !dbg !4250
  %add60 = add i64 %58, %57, !dbg !4250
  store i64 %add60, i64* %in, align 8, !dbg !4250
  br label %if.end, !dbg !4251

if.end:                                           ; preds = %cond.end50, %for.end
  %59 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4252
  %60 = load i64, i64* %out, align 8, !dbg !4253
  %arrayidx61 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %59, i64 %60, !dbg !4252, !ctir !402
  %61 = bitcast %struct.sortfile* %arrayidx61 to i8*, !dbg !4254
  %62 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4255
  %63 = load i64, i64* %in, align 8, !dbg !4256
  %arrayidx62 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %62, i64 %63, !dbg !4255, !ctir !402
  %64 = bitcast %struct.sortfile* %arrayidx62 to i8*, !dbg !4254
  %65 = load i64, i64* %nfiles.addr, align 8, !dbg !4257
  %66 = load i64, i64* %in, align 8, !dbg !4258
  %sub63 = sub i64 %65, %66, !dbg !4259
  %mul = mul i64 %sub63, 16, !dbg !4260
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %64, i64 %mul, i1 false), !dbg !4254
  %67 = load i64, i64* %out, align 8, !dbg !4261
  %68 = load i64, i64* %ntemps.addr, align 8, !dbg !4262
  %add64 = add i64 %68, %67, !dbg !4262
  store i64 %add64, i64* %ntemps.addr, align 8, !dbg !4262
  %69 = load i64, i64* %in, align 8, !dbg !4263
  %70 = load i64, i64* %out, align 8, !dbg !4264
  %sub65 = sub i64 %69, %70, !dbg !4265
  %71 = load i64, i64* %nfiles.addr, align 8, !dbg !4266
  %sub66 = sub i64 %71, %sub65, !dbg !4266
  store i64 %sub66, i64* %nfiles.addr, align 8, !dbg !4266
  br label %while.cond, !dbg !4139, !llvm.loop !4267

while.end:                                        ; preds = %while.cond
  %72 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4269
  %73 = load i64, i64* %ntemps.addr, align 8, !dbg !4270
  %74 = load i64, i64* %nfiles.addr, align 8, !dbg !4271
  %75 = load i8*, i8** %output_file.addr, align 8, !dbg !4272
  call void @avoid_trashing_input(%struct.sortfile* %72, i64 %73, i64 %74, i8* %75), !dbg !4273
  br label %while.body68, !dbg !4274

while.body68:                                     ; preds = %while.end, %cond.end115
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %fps, metadata !4275, metadata !DIExpression()), !dbg !4277
  call void @llvm.dbg.declare(metadata i64* %nopened, metadata !4278, metadata !DIExpression()), !dbg !4279
  %76 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4280
  %77 = load i64, i64* %nfiles.addr, align 8, !dbg !4281
  %call69 = call i64 @open_input_files(%struct.sortfile* %76, i64 %77, %struct._IO_FILE*** %fps), !dbg !4282
  store i64 %call69, i64* %nopened, align 8, !dbg !4279
  %78 = load i64, i64* %nopened, align 8, !dbg !4283
  %79 = load i64, i64* %nfiles.addr, align 8, !dbg !4285
  %cmp70 = icmp eq i64 %78, %79, !dbg !4286
  br i1 %cmp70, label %if.then72, label %if.else, !dbg !4287

if.then72:                                        ; preds = %while.body68
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %ofp, metadata !4288, metadata !DIExpression()), !dbg !4290
  %80 = load i8*, i8** %output_file.addr, align 8, !dbg !4291
  %call73 = call %struct._IO_FILE* @stream_open(i8* %80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.167, i64 0, i64 0)), !dbg !4292
  store %struct._IO_FILE* %call73, %struct._IO_FILE** %ofp, align 8, !dbg !4290
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp, align 8, !dbg !4293
  %tobool = icmp ne %struct._IO_FILE* %81, null, !dbg !4293
  br i1 %tobool, label %if.then74, label %if.end75, !dbg !4295

if.then74:                                        ; preds = %if.then72
  %82 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4296
  %83 = load i64, i64* %ntemps.addr, align 8, !dbg !4298
  %84 = load i64, i64* %nfiles.addr, align 8, !dbg !4299
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp, align 8, !dbg !4300
  %86 = load i8*, i8** %output_file.addr, align 8, !dbg !4301
  %87 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !4302
  call void @mergefps(%struct.sortfile* %82, i64 %83, i64 %84, %struct._IO_FILE* %85, i8* %86, %struct._IO_FILE** %87), !dbg !4303
  br label %while.end131, !dbg !4304

if.end75:                                         ; preds = %if.then72
  %call76 = call i32* @__errno_location() #16, !dbg !4305
  %88 = load i32, i32* %call76, align 4, !dbg !4305, !ctir !5
  %cmp77 = icmp ne i32 %88, 24, !dbg !4307
  br i1 %cmp77, label %if.then81, label %lor.lhs.false, !dbg !4308

lor.lhs.false:                                    ; preds = %if.end75
  %89 = load i64, i64* %nopened, align 8, !dbg !4309
  %cmp79 = icmp ule i64 %89, 2, !dbg !4310
  br i1 %cmp79, label %if.then81, label %if.end83, !dbg !4311

if.then81:                                        ; preds = %lor.lhs.false, %if.end75
  %call82 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !4312
  %90 = load i8*, i8** %output_file.addr, align 8, !dbg !4313
  call void @sort_die(i8* %call82, i8* %90) #15, !dbg !4314
  unreachable, !dbg !4314

if.end83:                                         ; preds = %lor.lhs.false
  br label %if.end91, !dbg !4315

if.else:                                          ; preds = %while.body68
  %91 = load i64, i64* %nopened, align 8, !dbg !4316
  %cmp84 = icmp ule i64 %91, 2, !dbg !4318
  br i1 %cmp84, label %if.then86, label %if.end90, !dbg !4319

if.then86:                                        ; preds = %if.else
  %call87 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !4320
  %92 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4321
  %93 = load i64, i64* %nopened, align 8, !dbg !4322
  %arrayidx88 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %92, i64 %93, !dbg !4321, !ctir !402
  %name89 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx88, i32 0, i32 0, !dbg !4323, !ctir !403
  %94 = load i8*, i8** %name89, align 8, !dbg !4323, !ctir !90
  call void @sort_die(i8* %call87, i8* %94) #15, !dbg !4324
  unreachable, !dbg !4324

if.end90:                                         ; preds = %if.else
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end83
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp92, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.tempnode** %temp93, metadata !4327, metadata !DIExpression()), !dbg !4328
  br label %do.body, !dbg !4329

do.body:                                          ; preds = %do.cond, %if.end91
  %95 = load i64, i64* %nopened, align 8, !dbg !4330
  %dec = add i64 %95, -1, !dbg !4330
  store i64 %dec, i64* %nopened, align 8, !dbg !4330
  %96 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !4332
  %97 = load i64, i64* %nopened, align 8, !dbg !4333
  %arrayidx94 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %96, i64 %97, !dbg !4332, !ctir !584
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx94, align 8, !dbg !4332
  %99 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4334
  %100 = load i64, i64* %nopened, align 8, !dbg !4335
  %arrayidx95 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %99, i64 %100, !dbg !4334, !ctir !402
  %name96 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx95, i32 0, i32 0, !dbg !4336, !ctir !403
  %101 = load i8*, i8** %name96, align 8, !dbg !4336, !ctir !90
  call void @xfclose(%struct._IO_FILE* %98, i8* %101), !dbg !4337
  %102 = load i64, i64* %nopened, align 8, !dbg !4338
  %cmp97 = icmp ule i64 %102, 2, !dbg !4339
  %lnot = xor i1 %cmp97, true, !dbg !4340
  %call99 = call %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %tfp92, i1 zeroext %lnot), !dbg !4341
  store %struct.tempnode* %call99, %struct.tempnode** %temp93, align 8, !dbg !4342
  br label %do.cond, !dbg !4343

do.cond:                                          ; preds = %do.body
  %103 = load %struct.tempnode*, %struct.tempnode** %temp93, align 8, !dbg !4344
  %tobool100 = icmp ne %struct.tempnode* %103, null, !dbg !4345
  %lnot101 = xor i1 %tobool100, true, !dbg !4345
  br i1 %lnot101, label %do.body, label %do.end, !dbg !4343, !llvm.loop !4346

do.end:                                           ; preds = %do.cond
  %104 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4348
  %arrayidx102 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %104, i64 0, !dbg !4348, !ctir !402
  %105 = load i64, i64* %ntemps.addr, align 8, !dbg !4349
  %106 = load i64, i64* %nopened, align 8, !dbg !4349
  %cmp103 = icmp ult i64 %105, %106, !dbg !4349
  br i1 %cmp103, label %cond.true105, label %cond.false106, !dbg !4349

cond.true105:                                     ; preds = %do.end
  %107 = load i64, i64* %ntemps.addr, align 8, !dbg !4349
  br label %cond.end107, !dbg !4349

cond.false106:                                    ; preds = %do.end
  %108 = load i64, i64* %nopened, align 8, !dbg !4349
  br label %cond.end107, !dbg !4349

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi i64 [ %107, %cond.true105 ], [ %108, %cond.false106 ], !dbg !4349
  %109 = load i64, i64* %nopened, align 8, !dbg !4350
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp92, align 8, !dbg !4351
  %111 = load %struct.tempnode*, %struct.tempnode** %temp93, align 8, !dbg !4352
  %name109 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %111, i32 0, i32 3, !dbg !4353, !ctir !408
  %arraydecay110 = getelementptr inbounds [0 x i8], [0 x i8]* %name109, i64 0, i64 0, !dbg !4352, !ctir !417
  %112 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !4354
  call void @mergefps(%struct.sortfile* %arrayidx102, i64 %cond108, i64 %109, %struct._IO_FILE* %110, i8* %arraydecay110, %struct._IO_FILE** %112), !dbg !4355
  %113 = load i64, i64* %ntemps.addr, align 8, !dbg !4356
  %114 = load i64, i64* %nopened, align 8, !dbg !4356
  %cmp111 = icmp ult i64 %113, %114, !dbg !4356
  br i1 %cmp111, label %cond.true113, label %cond.false114, !dbg !4356

cond.true113:                                     ; preds = %cond.end107
  %115 = load i64, i64* %ntemps.addr, align 8, !dbg !4356
  br label %cond.end115, !dbg !4356

cond.false114:                                    ; preds = %cond.end107
  %116 = load i64, i64* %nopened, align 8, !dbg !4356
  br label %cond.end115, !dbg !4356

cond.end115:                                      ; preds = %cond.false114, %cond.true113
  %cond116 = phi i64 [ %115, %cond.true113 ], [ %116, %cond.false114 ], !dbg !4356
  %117 = load i64, i64* %ntemps.addr, align 8, !dbg !4357
  %sub117 = sub i64 %117, %cond116, !dbg !4357
  store i64 %sub117, i64* %ntemps.addr, align 8, !dbg !4357
  %118 = load %struct.tempnode*, %struct.tempnode** %temp93, align 8, !dbg !4358
  %name118 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %118, i32 0, i32 3, !dbg !4359, !ctir !408
  %arraydecay119 = getelementptr inbounds [0 x i8], [0 x i8]* %name118, i64 0, i64 0, !dbg !4358, !ctir !417
  %119 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4360
  %arrayidx120 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %119, i64 0, !dbg !4360, !ctir !402
  %name121 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx120, i32 0, i32 0, !dbg !4361, !ctir !403
  store i8* %arraydecay119, i8** %name121, align 8, !dbg !4362, !ctir !90
  %120 = load %struct.tempnode*, %struct.tempnode** %temp93, align 8, !dbg !4363
  %121 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4364
  %arrayidx122 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %121, i64 0, !dbg !4364, !ctir !402
  %temp123 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx122, i32 0, i32 1, !dbg !4365, !ctir !403
  store %struct.tempnode* %120, %struct.tempnode** %temp123, align 8, !dbg !4366, !ctir !407
  %122 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4367
  %arrayidx124 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %122, i64 1, !dbg !4367, !ctir !402
  %123 = bitcast %struct.sortfile* %arrayidx124 to i8*, !dbg !4368
  %124 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !4369
  %125 = load i64, i64* %nopened, align 8, !dbg !4370
  %arrayidx125 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %124, i64 %125, !dbg !4369, !ctir !402
  %126 = bitcast %struct.sortfile* %arrayidx125 to i8*, !dbg !4368
  %127 = load i64, i64* %nfiles.addr, align 8, !dbg !4371
  %128 = load i64, i64* %nopened, align 8, !dbg !4372
  %sub126 = sub i64 %127, %128, !dbg !4373
  %mul127 = mul i64 %sub126, 16, !dbg !4374
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %126, i64 %mul127, i1 false), !dbg !4368
  %129 = load i64, i64* %ntemps.addr, align 8, !dbg !4375
  %inc128 = add i64 %129, 1, !dbg !4375
  store i64 %inc128, i64* %ntemps.addr, align 8, !dbg !4375
  %130 = load i64, i64* %nopened, align 8, !dbg !4376
  %sub129 = sub i64 %130, 1, !dbg !4377
  %131 = load i64, i64* %nfiles.addr, align 8, !dbg !4378
  %sub130 = sub i64 %131, %sub129, !dbg !4378
  store i64 %sub130, i64* %nfiles.addr, align 8, !dbg !4378
  br label %while.body68, !dbg !4274, !llvm.loop !4379

while.end131:                                     ; preds = %if.then74
  ret void, !dbg !4381
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sort(i8** %files, i64 %nfiles, i8* %output_file, i64 %nthreads) #4 !dbg !4382 {
entry:
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %output_file.addr = alloca i8*, align 8
  %nthreads.addr = alloca i64, align 8
  %buf = alloca %struct.buffer, align 8, !ctir !608
  %ntemps = alloca i64, align 8, !ctir !52
  %output_file_created = alloca i8, align 1, !ctir !162
  %temp_output = alloca i8*, align 8, !ctir !90
  %file = alloca i8*, align 8, !ctir !90
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %tfp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %bytes_per_line = alloca i64, align 8, !ctir !52
  %tmp = alloca i64, align 8, !ctir !52
  %mult = alloca i64, align 8, !ctir !52
  %line = alloca %struct.line*, align 8, !ctir !553
  %queue = alloca %struct.merge_node_queue, align 8, !ctir !684
  %merge_tree = alloca %struct.merge_node*, align 8, !ctir !621
  %node = alloca %struct.tempnode*, align 8, !ctir !407
  %tempfiles = alloca %struct.sortfile*, align 8, !ctir !402
  %i = alloca i64, align 8, !ctir !52
  store i8** %files, i8*** %files.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %files.addr, metadata !4385, metadata !DIExpression()), !dbg !4386
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !4387, metadata !DIExpression()), !dbg !4388
  store i8* %output_file, i8** %output_file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output_file.addr, metadata !4389, metadata !DIExpression()), !dbg !4390
  store i64 %nthreads, i64* %nthreads.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nthreads.addr, metadata !4391, metadata !DIExpression()), !dbg !4392
  call void @llvm.dbg.declare(metadata %struct.buffer* %buf, metadata !4393, metadata !DIExpression()), !dbg !4394
  call void @llvm.dbg.declare(metadata i64* %ntemps, metadata !4395, metadata !DIExpression()), !dbg !4396
  store i64 0, i64* %ntemps, align 8, !dbg !4396
  call void @llvm.dbg.declare(metadata i8* %output_file_created, metadata !4397, metadata !DIExpression()), !dbg !4398
  store i8 0, i8* %output_file_created, align 1, !dbg !4398
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3, !dbg !4399, !ctir !608
  store i64 0, i64* %alloc, align 8, !dbg !4400, !ctir !52
  br label %while.cond, !dbg !4401

while.cond:                                       ; preds = %while.end52, %entry
  %0 = load i64, i64* %nfiles.addr, align 8, !dbg !4402
  %tobool = icmp ne i64 %0, 0, !dbg !4401
  br i1 %tobool, label %while.body, label %while.end53, !dbg !4401

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %temp_output, metadata !4403, metadata !DIExpression()), !dbg !4405
  call void @llvm.dbg.declare(metadata i8** %file, metadata !4406, metadata !DIExpression()), !dbg !4407
  %1 = load i8**, i8*** %files.addr, align 8, !dbg !4408
  %2 = load i8*, i8** %1, align 8, !dbg !4409, !ctir !583
  store i8* %2, i8** %file, align 8, !dbg !4407
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !4410, metadata !DIExpression()), !dbg !4411
  %3 = load i8*, i8** %file, align 8, !dbg !4412
  %call = call %struct._IO_FILE* @xfopen(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !4413
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !4411
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp, metadata !4414, metadata !DIExpression()), !dbg !4415
  call void @llvm.dbg.declare(metadata i64* %bytes_per_line, metadata !4416, metadata !DIExpression()), !dbg !4417
  %4 = load i64, i64* %nthreads.addr, align 8, !dbg !4418
  %cmp = icmp ugt i64 %4, 1, !dbg !4420
  br i1 %cmp, label %if.then, label %if.else, !dbg !4421

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !4422, metadata !DIExpression()), !dbg !4424
  store i64 1, i64* %tmp, align 8, !dbg !4424
  call void @llvm.dbg.declare(metadata i64* %mult, metadata !4425, metadata !DIExpression()), !dbg !4426
  store i64 1, i64* %mult, align 8, !dbg !4426
  br label %while.cond1, !dbg !4427

while.cond1:                                      ; preds = %while.body3, %if.then
  %5 = load i64, i64* %tmp, align 8, !dbg !4428
  %6 = load i64, i64* %nthreads.addr, align 8, !dbg !4429
  %cmp2 = icmp ult i64 %5, %6, !dbg !4430
  br i1 %cmp2, label %while.body3, label %while.end, !dbg !4427

while.body3:                                      ; preds = %while.cond1
  %7 = load i64, i64* %tmp, align 8, !dbg !4431
  %mul = mul i64 %7, 2, !dbg !4431
  store i64 %mul, i64* %tmp, align 8, !dbg !4431
  %8 = load i64, i64* %mult, align 8, !dbg !4433
  %inc = add i64 %8, 1, !dbg !4433
  store i64 %inc, i64* %mult, align 8, !dbg !4433
  br label %while.cond1, !dbg !4427, !llvm.loop !4434

while.end:                                        ; preds = %while.cond1
  %9 = load i64, i64* %mult, align 8, !dbg !4436
  %mul4 = mul i64 %9, 32, !dbg !4437
  store i64 %mul4, i64* %bytes_per_line, align 8, !dbg !4438
  br label %if.end, !dbg !4439

if.else:                                          ; preds = %while.body
  store i64 48, i64* %bytes_per_line, align 8, !dbg !4440
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  %alloc5 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3, !dbg !4441, !ctir !608
  %10 = load i64, i64* %alloc5, align 8, !dbg !4441, !ctir !52
  %tobool6 = icmp ne i64 %10, 0, !dbg !4443
  br i1 %tobool6, label %if.end9, label %if.then7, !dbg !4444

if.then7:                                         ; preds = %if.end
  %11 = load i64, i64* %bytes_per_line, align 8, !dbg !4445
  %12 = load i8**, i8*** %files.addr, align 8, !dbg !4446
  %13 = load i64, i64* %nfiles.addr, align 8, !dbg !4447
  %14 = load i64, i64* %bytes_per_line, align 8, !dbg !4448
  %call8 = call i64 @sort_buffer_size(%struct._IO_FILE** %fp, i64 1, i8** %12, i64 %13, i64 %14), !dbg !4449
  call void @initbuf(%struct.buffer* %buf, i64 %11, i64 %call8), !dbg !4450
  br label %if.end9, !dbg !4450

if.end9:                                          ; preds = %if.then7, %if.end
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6, !dbg !4451, !ctir !608
  store i8 0, i8* %eof, align 8, !dbg !4452, !ctir !162
  %15 = load i8**, i8*** %files.addr, align 8, !dbg !4453
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !4453, !ctir !583
  store i8** %incdec.ptr, i8*** %files.addr, align 8, !dbg !4453
  %16 = load i64, i64* %nfiles.addr, align 8, !dbg !4454
  %dec = add i64 %16, -1, !dbg !4454
  store i64 %dec, i64* %nfiles.addr, align 8, !dbg !4454
  br label %while.cond10, !dbg !4455

while.cond10:                                     ; preds = %if.end51, %if.end9
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !4456
  %18 = load i8*, i8** %file, align 8, !dbg !4457
  %call11 = call zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %17, i8* %18), !dbg !4458
  br i1 %call11, label %while.body12, label %while.end52, !dbg !4455

while.body12:                                     ; preds = %while.cond10
  call void @llvm.dbg.declare(metadata %struct.line** %line, metadata !4459, metadata !DIExpression()), !dbg !4461
  %eof13 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6, !dbg !4462, !ctir !608
  %19 = load i8, i8* %eof13, align 8, !dbg !4462
  %tobool14 = trunc i8 %19 to i1, !dbg !4462, !ctir !162
  br i1 %tobool14, label %land.lhs.true, label %if.end23, !dbg !4464

land.lhs.true:                                    ; preds = %while.body12
  %20 = load i64, i64* %nfiles.addr, align 8, !dbg !4465
  %tobool15 = icmp ne i64 %20, 0, !dbg !4465
  br i1 %tobool15, label %land.lhs.true16, label %if.end23, !dbg !4466

land.lhs.true16:                                  ; preds = %land.lhs.true
  %21 = load i64, i64* %bytes_per_line, align 8, !dbg !4467
  %add = add i64 %21, 1, !dbg !4468
  %alloc17 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 3, !dbg !4469, !ctir !608
  %22 = load i64, i64* %alloc17, align 8, !dbg !4469, !ctir !52
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 1, !dbg !4470, !ctir !608
  %23 = load i64, i64* %used, align 8, !dbg !4470, !ctir !52
  %sub = sub i64 %22, %23, !dbg !4471
  %24 = load i64, i64* %bytes_per_line, align 8, !dbg !4472
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !4473, !ctir !608
  %25 = load i64, i64* %nlines, align 8, !dbg !4473, !ctir !52
  %mul18 = mul i64 %24, %25, !dbg !4474
  %sub19 = sub i64 %sub, %mul18, !dbg !4475
  %cmp20 = icmp ult i64 %add, %sub19, !dbg !4476
  br i1 %cmp20, label %if.then21, label %if.end23, !dbg !4477

if.then21:                                        ; preds = %land.lhs.true16
  %used22 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 1, !dbg !4478, !ctir !608
  %26 = load i64, i64* %used22, align 8, !dbg !4478, !ctir !52
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 4, !dbg !4480, !ctir !608
  store i64 %26, i64* %left, align 8, !dbg !4481, !ctir !52
  br label %while.end52, !dbg !4482

if.end23:                                         ; preds = %land.lhs.true16, %land.lhs.true, %while.body12
  store i8* null, i8** getelementptr inbounds (%struct.line, %struct.line* @saved_line, i32 0, i32 0), align 8, !dbg !4483, !ctir !7
  %call24 = call %struct.line* @buffer_linelim(%struct.buffer* %buf), !dbg !4484
  store %struct.line* %call24, %struct.line** %line, align 8, !dbg !4485
  %eof25 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 6, !dbg !4486, !ctir !608
  %27 = load i8, i8* %eof25, align 8, !dbg !4486
  %tobool26 = trunc i8 %27 to i1, !dbg !4486, !ctir !162
  br i1 %tobool26, label %land.lhs.true27, label %if.else36, !dbg !4488

land.lhs.true27:                                  ; preds = %if.end23
  %28 = load i64, i64* %nfiles.addr, align 8, !dbg !4489
  %tobool28 = icmp ne i64 %28, 0, !dbg !4489
  br i1 %tobool28, label %if.else36, label %land.lhs.true29, !dbg !4490

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %29 = load i64, i64* %ntemps, align 8, !dbg !4491
  %tobool30 = icmp ne i64 %29, 0, !dbg !4491
  br i1 %tobool30, label %if.else36, label %land.lhs.true31, !dbg !4492

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %left32 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 4, !dbg !4493, !ctir !608
  %30 = load i64, i64* %left32, align 8, !dbg !4493, !ctir !52
  %tobool33 = icmp ne i64 %30, 0, !dbg !4494
  br i1 %tobool33, label %if.else36, label %if.then34, !dbg !4495

if.then34:                                        ; preds = %land.lhs.true31
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !4496
  %32 = load i8*, i8** %file, align 8, !dbg !4498
  call void @xfclose(%struct._IO_FILE* %31, i8* %32), !dbg !4499
  %33 = load i8*, i8** %output_file.addr, align 8, !dbg !4500
  %call35 = call %struct._IO_FILE* @xfopen(i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.167, i64 0, i64 0)), !dbg !4501
  store %struct._IO_FILE* %call35, %struct._IO_FILE** %tfp, align 8, !dbg !4502
  %34 = load i8*, i8** %output_file.addr, align 8, !dbg !4503
  store i8* %34, i8** %temp_output, align 8, !dbg !4504
  store i8 1, i8* %output_file_created, align 1, !dbg !4505
  br label %if.end39, !dbg !4506

if.else36:                                        ; preds = %land.lhs.true31, %land.lhs.true29, %land.lhs.true27, %if.end23
  %35 = load i64, i64* %ntemps, align 8, !dbg !4507
  %inc37 = add i64 %35, 1, !dbg !4507
  store i64 %inc37, i64* %ntemps, align 8, !dbg !4507
  %call38 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tfp), !dbg !4509
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %call38, i32 0, i32 3, !dbg !4510, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !4509, !ctir !417
  store i8* %arraydecay, i8** %temp_output, align 8, !dbg !4511
  br label %if.end39

if.end39:                                         ; preds = %if.else36, %if.then34
  %nlines40 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !4512, !ctir !608
  %36 = load i64, i64* %nlines40, align 8, !dbg !4512, !ctir !52
  %cmp41 = icmp ult i64 1, %36, !dbg !4514
  br i1 %cmp41, label %if.then42, label %if.else46, !dbg !4515

if.then42:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue* %queue, metadata !4516, metadata !DIExpression()), !dbg !4518
  %37 = load i64, i64* %nthreads.addr, align 8, !dbg !4519
  call void @queue_init(%struct.merge_node_queue* %queue, i64 %37), !dbg !4520
  call void @llvm.dbg.declare(metadata %struct.merge_node** %merge_tree, metadata !4521, metadata !DIExpression()), !dbg !4522
  %38 = load i64, i64* %nthreads.addr, align 8, !dbg !4523
  %nlines43 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !4524, !ctir !608
  %39 = load i64, i64* %nlines43, align 8, !dbg !4524, !ctir !52
  %40 = load %struct.line*, %struct.line** %line, align 8, !dbg !4525
  %call44 = call %struct.merge_node* @merge_tree_init(i64 %38, i64 %39, %struct.line* %40), !dbg !4526
  store %struct.merge_node* %call44, %struct.merge_node** %merge_tree, align 8, !dbg !4522
  %41 = load %struct.line*, %struct.line** %line, align 8, !dbg !4527
  %42 = load i64, i64* %nthreads.addr, align 8, !dbg !4528
  %nlines45 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 2, !dbg !4529, !ctir !608
  %43 = load i64, i64* %nlines45, align 8, !dbg !4529, !ctir !52
  %44 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !dbg !4530
  %add.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %44, i64 1, !dbg !4531, !ctir !622
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !dbg !4532
  %46 = load i8*, i8** %temp_output, align 8, !dbg !4533
  call void @sortlines(%struct.line* %41, i64 %42, i64 %43, %struct.merge_node* %add.ptr, %struct.merge_node_queue* %queue, %struct._IO_FILE* %45, i8* %46), !dbg !4534
  br label %if.end48, !dbg !4535

if.else46:                                        ; preds = %if.end39
  %47 = load %struct.line*, %struct.line** %line, align 8, !dbg !4536
  %add.ptr47 = getelementptr inbounds %struct.line, %struct.line* %47, i64 -1, !dbg !4537, !ctir !541
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !dbg !4538
  %49 = load i8*, i8** %temp_output, align 8, !dbg !4539
  call void @write_unique(%struct.line* %add.ptr47, %struct._IO_FILE* %48, i8* %49), !dbg !4540
  br label %if.end48

if.end48:                                         ; preds = %if.else46, %if.then42
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !dbg !4541
  %51 = load i8*, i8** %temp_output, align 8, !dbg !4542
  call void @xfclose(%struct._IO_FILE* %50, i8* %51), !dbg !4543
  %52 = load i8, i8* %output_file_created, align 1, !dbg !4544
  %tobool49 = trunc i8 %52 to i1, !dbg !4544
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !4546

if.then50:                                        ; preds = %if.end48
  br label %finish, !dbg !4547

if.end51:                                         ; preds = %if.end48
  br label %while.cond10, !dbg !4455, !llvm.loop !4548

while.end52:                                      ; preds = %if.then21, %while.cond10
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !4550
  %54 = load i8*, i8** %file, align 8, !dbg !4551
  call void @xfclose(%struct._IO_FILE* %53, i8* %54), !dbg !4552
  br label %while.cond, !dbg !4401, !llvm.loop !4553

while.end53:                                      ; preds = %while.cond
  br label %finish, !dbg !4401

finish:                                           ; preds = %while.end53, %if.then50
  call void @llvm.dbg.label(metadata !4555), !dbg !4556
  %buf54 = getelementptr inbounds %struct.buffer, %struct.buffer* %buf, i32 0, i32 0, !dbg !4557, !ctir !608
  %55 = load i8*, i8** %buf54, align 8, !dbg !4557, !ctir !7
  call void @free(i8* %55) #12, !dbg !4558
  %56 = load i8, i8* %output_file_created, align 1, !dbg !4559
  %tobool55 = trunc i8 %56 to i1, !dbg !4559
  br i1 %tobool55, label %if.end64, label %if.then56, !dbg !4561

if.then56:                                        ; preds = %finish
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !4562, metadata !DIExpression()), !dbg !4564
  %57 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !dbg !4565
  store %struct.tempnode* %57, %struct.tempnode** %node, align 8, !dbg !4564
  call void @llvm.dbg.declare(metadata %struct.sortfile** %tempfiles, metadata !4566, metadata !DIExpression()), !dbg !4567
  %58 = load i64, i64* %ntemps, align 8, !dbg !4568
  %call57 = call noalias i8* @xnmalloc(i64 %58, i64 16), !dbg !4569
  %59 = bitcast i8* %call57 to %struct.sortfile*, !dbg !4569
  store %struct.sortfile* %59, %struct.sortfile** %tempfiles, align 8, !dbg !4567
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4570, metadata !DIExpression()), !dbg !4572
  store i64 0, i64* %i, align 8, !dbg !4572
  br label %for.cond, !dbg !4573

for.cond:                                         ; preds = %for.inc, %if.then56
  %60 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !4574
  %tobool58 = icmp ne %struct.tempnode* %60, null, !dbg !4576
  br i1 %tobool58, label %for.body, label %for.end, !dbg !4576

for.body:                                         ; preds = %for.cond
  %61 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !4577
  %name59 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %61, i32 0, i32 3, !dbg !4579, !ctir !408
  %arraydecay60 = getelementptr inbounds [0 x i8], [0 x i8]* %name59, i64 0, i64 0, !dbg !4577, !ctir !417
  %62 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !dbg !4580
  %63 = load i64, i64* %i, align 8, !dbg !4581
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %62, i64 %63, !dbg !4580, !ctir !402
  %name61 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0, !dbg !4582, !ctir !403
  store i8* %arraydecay60, i8** %name61, align 8, !dbg !4583, !ctir !90
  %64 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !4584
  %65 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !dbg !4585
  %66 = load i64, i64* %i, align 8, !dbg !4586
  %arrayidx62 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %65, i64 %66, !dbg !4585, !ctir !402
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx62, i32 0, i32 1, !dbg !4587, !ctir !403
  store %struct.tempnode* %64, %struct.tempnode** %temp, align 8, !dbg !4588, !ctir !407
  %67 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !4589
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %67, i32 0, i32 0, !dbg !4590, !ctir !408
  %68 = load volatile %struct.tempnode*, %struct.tempnode** %next, align 8, !dbg !4590, !ctir !411
  store %struct.tempnode* %68, %struct.tempnode** %node, align 8, !dbg !4591
  br label %for.inc, !dbg !4592

for.inc:                                          ; preds = %for.body
  %69 = load i64, i64* %i, align 8, !dbg !4593
  %inc63 = add i64 %69, 1, !dbg !4593
  store i64 %inc63, i64* %i, align 8, !dbg !4593
  br label %for.cond, !dbg !4594, !llvm.loop !4595

for.end:                                          ; preds = %for.cond
  %70 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !dbg !4597
  %71 = load i64, i64* %ntemps, align 8, !dbg !4598
  %72 = load i64, i64* %ntemps, align 8, !dbg !4599
  %73 = load i8*, i8** %output_file.addr, align 8, !dbg !4600
  call void @merge(%struct.sortfile* %70, i64 %71, i64 %72, i8* %73), !dbg !4601
  %74 = load %struct.sortfile*, %struct.sortfile** %tempfiles, align 8, !dbg !4602
  %75 = bitcast %struct.sortfile* %74 to i8*, !dbg !4602
  call void @free(i8* %75) #12, !dbg !4603
  br label %if.end64, !dbg !4604

if.end64:                                         ; preds = %for.end, %finish
  call void @reap_all(), !dbg !4605
  ret void, !dbg !4606
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @sort_die(i8* %message, i8* %file) #0 !dbg !4607 {
entry:
  %message.addr = alloca i8*, align 8
  %file.addr = alloca i8*, align 8
  store i8* %message, i8** %message.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %message.addr, metadata !4608, metadata !DIExpression()), !dbg !4609
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !4610, metadata !DIExpression()), !dbg !4611
  %call = call i32* @__errno_location() #16, !dbg !4612
  %0 = load i32, i32* %call, align 4, !dbg !4612, !ctir !5
  %1 = load i8*, i8** %message.addr, align 8, !dbg !4612
  %2 = load i8*, i8** %file.addr, align 8, !dbg !4612
  %tobool = icmp ne i8* %2, null, !dbg !4612
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4612

cond.true:                                        ; preds = %entry
  %3 = load i8*, i8** %file.addr, align 8, !dbg !4612
  br label %cond.end, !dbg !4612

cond.false:                                       ; preds = %entry
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.181, i64 0, i64 0)) #12, !dbg !4612
  br label %cond.end, !dbg !4612

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %3, %cond.true ], [ %call1, %cond.false ], !dbg !4612
  %call2 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %cond), !dbg !4612
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.180, i64 0, i64 0), i8* %1, i8* %call2), !dbg !4612
  unreachable, !dbg !4612
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @sort_buffer_size(%struct._IO_FILE** %fps, i64 %nfps, i8** %files, i64 %nfiles, i64 %line_bytes) #4 !dbg !807 {
entry:
  %retval = alloca i64, align 8
  %fps.addr = alloca %struct._IO_FILE**, align 8
  %nfps.addr = alloca i64, align 8
  %files.addr = alloca i8**, align 8
  %nfiles.addr = alloca i64, align 8
  %line_bytes.addr = alloca i64, align 8
  %worst_case_per_input_byte = alloca i64, align 8, !ctir !52
  %size = alloca i64, align 8, !ctir !52
  %i = alloca i64, align 8, !ctir !52
  %st = alloca %struct.stat, align 8, !ctir !483
  %file_size = alloca i64, align 8, !ctir !661
  %worst_case = alloca i64, align 8, !ctir !52
  store %struct._IO_FILE** %fps, %struct._IO_FILE*** %fps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %fps.addr, metadata !4613, metadata !DIExpression()), !dbg !4614
  store i64 %nfps, i64* %nfps.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfps.addr, metadata !4615, metadata !DIExpression()), !dbg !4616
  store i8** %files, i8*** %files.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %files.addr, metadata !4617, metadata !DIExpression()), !dbg !4618
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !4619, metadata !DIExpression()), !dbg !4620
  store i64 %line_bytes, i64* %line_bytes.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %line_bytes.addr, metadata !4621, metadata !DIExpression()), !dbg !4622
  call void @llvm.dbg.declare(metadata i64* %worst_case_per_input_byte, metadata !4623, metadata !DIExpression()), !dbg !4624
  %0 = load i64, i64* %line_bytes.addr, align 8, !dbg !4625
  %add = add i64 %0, 1, !dbg !4626
  store i64 %add, i64* %worst_case_per_input_byte, align 8, !dbg !4624
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4627, metadata !DIExpression()), !dbg !4628
  %1 = load i64, i64* %worst_case_per_input_byte, align 8, !dbg !4629
  %add1 = add i64 %1, 1, !dbg !4630
  store i64 %add1, i64* %size, align 8, !dbg !4628
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4631, metadata !DIExpression()), !dbg !4633
  store i64 0, i64* %i, align 8, !dbg !4633
  br label %for.cond, !dbg !4634

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !dbg !4635
  %3 = load i64, i64* %nfiles.addr, align 8, !dbg !4637
  %cmp = icmp ult i64 %2, %3, !dbg !4638
  br i1 %cmp, label %for.body, label %for.end, !dbg !4639

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !4640, metadata !DIExpression()), !dbg !4642
  call void @llvm.dbg.declare(metadata i64* %file_size, metadata !4643, metadata !DIExpression()), !dbg !4644
  call void @llvm.dbg.declare(metadata i64* %worst_case, metadata !4645, metadata !DIExpression()), !dbg !4646
  %4 = load i64, i64* %i, align 8, !dbg !4647
  %5 = load i64, i64* %nfps.addr, align 8, !dbg !4649
  %cmp2 = icmp ult i64 %4, %5, !dbg !4650
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !4647

cond.true:                                        ; preds = %for.body
  %6 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !4651
  %7 = load i64, i64* %i, align 8, !dbg !4652
  %arrayidx = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %6, i64 %7, !dbg !4651, !ctir !663
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx, align 8, !dbg !4651
  %call = call i32 @fileno(%struct._IO_FILE* %8) #12, !dbg !4653
  %call3 = call i32 @fstat(i32 %call, %struct.stat* %st) #12, !dbg !4654
  br label %cond.end12, !dbg !4647

cond.false:                                       ; preds = %for.body
  %9 = load i8**, i8*** %files.addr, align 8, !dbg !4655
  %10 = load i64, i64* %i, align 8, !dbg !4655
  %arrayidx4 = getelementptr inbounds i8*, i8** %9, i64 %10, !dbg !4655, !ctir !582
  %11 = load i8*, i8** %arrayidx4, align 8, !dbg !4655
  %call5 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #14, !dbg !4655
  %cmp6 = icmp eq i32 %call5, 0, !dbg !4655
  br i1 %cmp6, label %cond.true7, label %cond.false9, !dbg !4655

cond.true7:                                       ; preds = %cond.false
  %call8 = call i32 @fstat(i32 0, %struct.stat* %st) #12, !dbg !4656
  br label %cond.end, !dbg !4655

cond.false9:                                      ; preds = %cond.false
  %12 = load i8**, i8*** %files.addr, align 8, !dbg !4657
  %13 = load i64, i64* %i, align 8, !dbg !4658
  %arrayidx10 = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !4657, !ctir !582
  %14 = load i8*, i8** %arrayidx10, align 8, !dbg !4657
  %call11 = call i32 @stat(i8* %14, %struct.stat* %st) #12, !dbg !4659
  br label %cond.end, !dbg !4655

cond.end:                                         ; preds = %cond.false9, %cond.true7
  %cond = phi i32 [ %call8, %cond.true7 ], [ %call11, %cond.false9 ], !dbg !4655
  br label %cond.end12, !dbg !4647

cond.end12:                                       ; preds = %cond.end, %cond.true
  %cond13 = phi i32 [ %call3, %cond.true ], [ %cond, %cond.end ], !dbg !4647
  %cmp14 = icmp ne i32 %cond13, 0, !dbg !4660
  br i1 %cmp14, label %if.then, label %if.end, !dbg !4661

if.then:                                          ; preds = %cond.end12
  %call15 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.179, i64 0, i64 0)) #12, !dbg !4662
  %15 = load i8**, i8*** %files.addr, align 8, !dbg !4663
  %16 = load i64, i64* %i, align 8, !dbg !4664
  %arrayidx16 = getelementptr inbounds i8*, i8** %15, i64 %16, !dbg !4663, !ctir !582
  %17 = load i8*, i8** %arrayidx16, align 8, !dbg !4663
  call void @sort_die(i8* %call15, i8* %17) #15, !dbg !4665
  unreachable, !dbg !4665

if.end:                                           ; preds = %cond.end12
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 3, !dbg !4666, !ctir !483
  %18 = load i32, i32* %st_mode, align 8, !dbg !4666, !ctir !493
  %and = and i32 %18, 61440, !dbg !4666
  %cmp17 = icmp eq i32 %and, 32768, !dbg !4666
  br i1 %cmp17, label %if.then18, label %if.else, !dbg !4668

if.then18:                                        ; preds = %if.end
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 8, !dbg !4669, !ctir !483
  %19 = load i64, i64* %st_size, align 8, !dbg !4669, !ctir !30
  store i64 %19, i64* %file_size, align 8, !dbg !4670
  br label %if.end21, !dbg !4671

if.else:                                          ; preds = %if.end
  %20 = load i64, i64* @sort_size, align 8, !dbg !4672
  %tobool = icmp ne i64 %20, 0, !dbg !4672
  br i1 %tobool, label %if.then19, label %if.end20, !dbg !4675

if.then19:                                        ; preds = %if.else
  %21 = load i64, i64* @sort_size, align 8, !dbg !4676
  store i64 %21, i64* %retval, align 8, !dbg !4677
  br label %return, !dbg !4677

if.end20:                                         ; preds = %if.else
  store i64 131072, i64* %file_size, align 8, !dbg !4678
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then18
  %22 = load i64, i64* @sort_buffer_size.size_bound, align 8, !dbg !4679
  %tobool22 = icmp ne i64 %22, 0, !dbg !4679
  br i1 %tobool22, label %if.end28, label %if.then23, !dbg !4681

if.then23:                                        ; preds = %if.end21
  %23 = load i64, i64* @sort_size, align 8, !dbg !4682
  store i64 %23, i64* @sort_buffer_size.size_bound, align 8, !dbg !4684
  %24 = load i64, i64* @sort_buffer_size.size_bound, align 8, !dbg !4685
  %tobool24 = icmp ne i64 %24, 0, !dbg !4685
  br i1 %tobool24, label %if.end27, label %if.then25, !dbg !4687

if.then25:                                        ; preds = %if.then23
  %call26 = call i64 @default_sort_size(), !dbg !4688
  store i64 %call26, i64* @sort_buffer_size.size_bound, align 8, !dbg !4689
  br label %if.end27, !dbg !4690

if.end27:                                         ; preds = %if.then25, %if.then23
  br label %if.end28, !dbg !4691

if.end28:                                         ; preds = %if.end27, %if.end21
  %25 = load i64, i64* %file_size, align 8, !dbg !4692
  %26 = load i64, i64* %worst_case_per_input_byte, align 8, !dbg !4693
  %mul = mul i64 %25, %26, !dbg !4694
  %add29 = add i64 %mul, 1, !dbg !4695
  store i64 %add29, i64* %worst_case, align 8, !dbg !4696
  %27 = load i64, i64* %file_size, align 8, !dbg !4697
  %28 = load i64, i64* %worst_case, align 8, !dbg !4699
  %29 = load i64, i64* %worst_case_per_input_byte, align 8, !dbg !4700
  %div = udiv i64 %28, %29, !dbg !4701
  %cmp30 = icmp ne i64 %27, %div, !dbg !4702
  br i1 %cmp30, label %if.then32, label %lor.lhs.false, !dbg !4703

lor.lhs.false:                                    ; preds = %if.end28
  %30 = load i64, i64* @sort_buffer_size.size_bound, align 8, !dbg !4704
  %31 = load i64, i64* %size, align 8, !dbg !4705
  %sub = sub i64 %30, %31, !dbg !4706
  %32 = load i64, i64* %worst_case, align 8, !dbg !4707
  %cmp31 = icmp ule i64 %sub, %32, !dbg !4708
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !4709

if.then32:                                        ; preds = %lor.lhs.false, %if.end28
  %33 = load i64, i64* @sort_buffer_size.size_bound, align 8, !dbg !4710
  store i64 %33, i64* %retval, align 8, !dbg !4711
  br label %return, !dbg !4711

if.end33:                                         ; preds = %lor.lhs.false
  %34 = load i64, i64* %worst_case, align 8, !dbg !4712
  %35 = load i64, i64* %size, align 8, !dbg !4713
  %add34 = add i64 %35, %34, !dbg !4713
  store i64 %add34, i64* %size, align 8, !dbg !4713
  br label %for.inc, !dbg !4714

for.inc:                                          ; preds = %if.end33
  %36 = load i64, i64* %i, align 8, !dbg !4715
  %inc = add i64 %36, 1, !dbg !4715
  store i64 %inc, i64* %i, align 8, !dbg !4715
  br label %for.cond, !dbg !4716, !llvm.loop !4717

for.end:                                          ; preds = %for.cond
  %37 = load i64, i64* %size, align 8, !dbg !4719
  store i64 %37, i64* %retval, align 8, !dbg !4720
  br label %return, !dbg !4720

return:                                           ; preds = %for.end, %if.then32, %if.then19
  %38 = load i64, i64* %retval, align 8, !dbg !4721
  ret i64 %38, !dbg !4721
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initbuf(%struct.buffer* %buf, i64 %line_bytes, i64 %alloc) #4 !dbg !4722 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %line_bytes.addr = alloca i64, align 8
  %alloc.addr = alloca i64, align 8
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.buffer** %buf.addr, metadata !4725, metadata !DIExpression()), !dbg !4726
  store i64 %line_bytes, i64* %line_bytes.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %line_bytes.addr, metadata !4727, metadata !DIExpression()), !dbg !4728
  store i64 %alloc, i64* %alloc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alloc.addr, metadata !4729, metadata !DIExpression()), !dbg !4730
  br label %while.body, !dbg !4731

while.body:                                       ; preds = %entry, %if.end5
  %0 = load i64, i64* %alloc.addr, align 8, !dbg !4732
  %rem = urem i64 %0, 32, !dbg !4734
  %sub = sub i64 32, %rem, !dbg !4735
  %1 = load i64, i64* %alloc.addr, align 8, !dbg !4736
  %add = add i64 %1, %sub, !dbg !4736
  store i64 %add, i64* %alloc.addr, align 8, !dbg !4736
  %2 = load i64, i64* %alloc.addr, align 8, !dbg !4737
  %call = call noalias i8* @malloc(i64 %2) #12, !dbg !4738
  %3 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4739
  %buf1 = getelementptr inbounds %struct.buffer, %struct.buffer* %3, i32 0, i32 0, !dbg !4740, !ctir !608
  store i8* %call, i8** %buf1, align 8, !dbg !4741, !ctir !7
  %4 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4742
  %buf2 = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 0, !dbg !4744, !ctir !608
  %5 = load i8*, i8** %buf2, align 8, !dbg !4744, !ctir !7
  %tobool = icmp ne i8* %5, null, !dbg !4742
  br i1 %tobool, label %if.then, label %if.end, !dbg !4745

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !4746

if.end:                                           ; preds = %while.body
  %6 = load i64, i64* %alloc.addr, align 8, !dbg !4747
  %div = udiv i64 %6, 2, !dbg !4747
  store i64 %div, i64* %alloc.addr, align 8, !dbg !4747
  %7 = load i64, i64* %alloc.addr, align 8, !dbg !4748
  %8 = load i64, i64* %line_bytes.addr, align 8, !dbg !4750
  %add3 = add i64 %8, 1, !dbg !4751
  %cmp = icmp ule i64 %7, %add3, !dbg !4752
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4753

if.then4:                                         ; preds = %if.end
  call void @xalloc_die() #15, !dbg !4754
  unreachable, !dbg !4754

if.end5:                                          ; preds = %if.end
  br label %while.body, !dbg !4731, !llvm.loop !4755

while.end:                                        ; preds = %if.then
  %9 = load i64, i64* %line_bytes.addr, align 8, !dbg !4757
  %10 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4758
  %line_bytes6 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 5, !dbg !4759, !ctir !608
  store i64 %9, i64* %line_bytes6, align 8, !dbg !4760, !ctir !52
  %11 = load i64, i64* %alloc.addr, align 8, !dbg !4761
  %12 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4762
  %alloc7 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 3, !dbg !4763, !ctir !608
  store i64 %11, i64* %alloc7, align 8, !dbg !4764, !ctir !52
  %13 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4765
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 2, !dbg !4766, !ctir !608
  store i64 0, i64* %nlines, align 8, !dbg !4767, !ctir !52
  %14 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4768
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %14, i32 0, i32 4, !dbg !4769, !ctir !608
  store i64 0, i64* %left, align 8, !dbg !4770, !ctir !52
  %15 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4771
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 1, !dbg !4772, !ctir !608
  store i64 0, i64* %used, align 8, !dbg !4773, !ctir !52
  %16 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4774
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %16, i32 0, i32 6, !dbg !4775, !ctir !608
  store i8 0, i8* %eof, align 8, !dbg !4776, !ctir !162
  ret void, !dbg !4777
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @fillbuf(%struct.buffer* %buf, %struct._IO_FILE* %fp, i8* %file) #4 !dbg !4778 {
entry:
  %retval = alloca i1, align 1
  %buf.addr = alloca %struct.buffer*, align 8
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  %key = alloca %struct.keyfield*, align 8, !ctir !522
  %eol = alloca i8, align 1, !ctir !8
  %line_bytes = alloca i64, align 8, !ctir !52
  %mergesize = alloca i64, align 8, !ctir !52
  %ptr = alloca i8*, align 8, !ctir !7
  %linelim = alloca %struct.line*, align 8, !ctir !553
  %line = alloca %struct.line*, align 8, !ctir !553
  %avail = alloca i64, align 8, !ctir !52
  %line_start = alloca i8*, align 8, !ctir !7
  %readsize = alloca i64, align 8, !ctir !52
  %bytes_read = alloca i64, align 8, !ctir !52
  %ptrlim = alloca i8*, align 8, !ctir !7
  %p = alloca i8*, align 8, !ctir !7
  %line_alloc = alloca i64, align 8, !ctir !52
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.buffer** %buf.addr, metadata !4781, metadata !DIExpression()), !dbg !4782
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !4783, metadata !DIExpression()), !dbg !4784
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !4785, metadata !DIExpression()), !dbg !4786
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !4787, metadata !DIExpression()), !dbg !4788
  %0 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !4789
  store %struct.keyfield* %0, %struct.keyfield** %key, align 8, !dbg !4788
  call void @llvm.dbg.declare(metadata i8* %eol, metadata !4790, metadata !DIExpression()), !dbg !4791
  %1 = load i8, i8* @eolchar, align 1, !dbg !4792
  store i8 %1, i8* %eol, align 1, !dbg !4791
  call void @llvm.dbg.declare(metadata i64* %line_bytes, metadata !4793, metadata !DIExpression()), !dbg !4794
  %2 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4795
  %line_bytes1 = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 5, !dbg !4796, !ctir !608
  %3 = load i64, i64* %line_bytes1, align 8, !dbg !4796, !ctir !52
  store i64 %3, i64* %line_bytes, align 8, !dbg !4794
  call void @llvm.dbg.declare(metadata i64* %mergesize, metadata !4797, metadata !DIExpression()), !dbg !4798
  %4 = load i64, i64* @merge_buffer_size, align 8, !dbg !4799
  %sub = sub i64 %4, 34, !dbg !4800
  store i64 %sub, i64* %mergesize, align 8, !dbg !4798
  %5 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4801
  %eof = getelementptr inbounds %struct.buffer, %struct.buffer* %5, i32 0, i32 6, !dbg !4803, !ctir !608
  %6 = load i8, i8* %eof, align 8, !dbg !4803
  %tobool = trunc i8 %6 to i1, !dbg !4803, !ctir !162
  br i1 %tobool, label %if.then, label %if.end, !dbg !4804

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !4805
  br label %return, !dbg !4805

if.end:                                           ; preds = %entry
  %7 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4806
  %used = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 1, !dbg !4808, !ctir !608
  %8 = load i64, i64* %used, align 8, !dbg !4808, !ctir !52
  %9 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4809
  %left = getelementptr inbounds %struct.buffer, %struct.buffer* %9, i32 0, i32 4, !dbg !4810, !ctir !608
  %10 = load i64, i64* %left, align 8, !dbg !4810, !ctir !52
  %cmp = icmp ne i64 %8, %10, !dbg !4811
  br i1 %cmp, label %if.then2, label %if.end11, !dbg !4812

if.then2:                                         ; preds = %if.end
  %11 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4813
  %buf3 = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i32 0, i32 0, !dbg !4815, !ctir !608
  %12 = load i8*, i8** %buf3, align 8, !dbg !4815, !ctir !7
  %13 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4816
  %buf4 = getelementptr inbounds %struct.buffer, %struct.buffer* %13, i32 0, i32 0, !dbg !4817, !ctir !608
  %14 = load i8*, i8** %buf4, align 8, !dbg !4817, !ctir !7
  %15 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4818
  %used5 = getelementptr inbounds %struct.buffer, %struct.buffer* %15, i32 0, i32 1, !dbg !4819, !ctir !608
  %16 = load i64, i64* %used5, align 8, !dbg !4819, !ctir !52
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !4820, !ctir !8
  %17 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4821
  %left6 = getelementptr inbounds %struct.buffer, %struct.buffer* %17, i32 0, i32 4, !dbg !4822, !ctir !608
  %18 = load i64, i64* %left6, align 8, !dbg !4822, !ctir !52
  %idx.neg = sub i64 0, %18, !dbg !4823
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg, !dbg !4823, !ctir !8
  %19 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4824
  %left8 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i32 0, i32 4, !dbg !4825, !ctir !608
  %20 = load i64, i64* %left8, align 8, !dbg !4825, !ctir !52
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %add.ptr7, i64 %20, i1 false), !dbg !4826
  %21 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4827
  %left9 = getelementptr inbounds %struct.buffer, %struct.buffer* %21, i32 0, i32 4, !dbg !4828, !ctir !608
  %22 = load i64, i64* %left9, align 8, !dbg !4828, !ctir !52
  %23 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4829
  %used10 = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 1, !dbg !4830, !ctir !608
  store i64 %22, i64* %used10, align 8, !dbg !4831, !ctir !52
  %24 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4832
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %24, i32 0, i32 2, !dbg !4833, !ctir !608
  store i64 0, i64* %nlines, align 8, !dbg !4834, !ctir !52
  br label %if.end11, !dbg !4835

if.end11:                                         ; preds = %if.then2, %if.end
  br label %while.body, !dbg !4836

while.body:                                       ; preds = %if.end11, %if.end130
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !4837, metadata !DIExpression()), !dbg !4839
  %25 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4840
  %buf12 = getelementptr inbounds %struct.buffer, %struct.buffer* %25, i32 0, i32 0, !dbg !4841, !ctir !608
  %26 = load i8*, i8** %buf12, align 8, !dbg !4841, !ctir !7
  %27 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4842
  %used13 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i32 0, i32 1, !dbg !4843, !ctir !608
  %28 = load i64, i64* %used13, align 8, !dbg !4843, !ctir !52
  %add.ptr14 = getelementptr inbounds i8, i8* %26, i64 %28, !dbg !4844, !ctir !8
  store i8* %add.ptr14, i8** %ptr, align 8, !dbg !4839
  call void @llvm.dbg.declare(metadata %struct.line** %linelim, metadata !4845, metadata !DIExpression()), !dbg !4846
  %29 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4847
  %call = call %struct.line* @buffer_linelim(%struct.buffer* %29), !dbg !4848
  store %struct.line* %call, %struct.line** %linelim, align 8, !dbg !4846
  call void @llvm.dbg.declare(metadata %struct.line** %line, metadata !4849, metadata !DIExpression()), !dbg !4850
  %30 = load %struct.line*, %struct.line** %linelim, align 8, !dbg !4851
  %31 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4852
  %nlines15 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 2, !dbg !4853, !ctir !608
  %32 = load i64, i64* %nlines15, align 8, !dbg !4853, !ctir !52
  %idx.neg16 = sub i64 0, %32, !dbg !4854
  %add.ptr17 = getelementptr inbounds %struct.line, %struct.line* %30, i64 %idx.neg16, !dbg !4854, !ctir !541
  store %struct.line* %add.ptr17, %struct.line** %line, align 8, !dbg !4850
  call void @llvm.dbg.declare(metadata i64* %avail, metadata !4855, metadata !DIExpression()), !dbg !4856
  %33 = load %struct.line*, %struct.line** %linelim, align 8, !dbg !4857
  %34 = bitcast %struct.line* %33 to i8*, !dbg !4858
  %35 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4859
  %nlines18 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 2, !dbg !4860, !ctir !608
  %36 = load i64, i64* %nlines18, align 8, !dbg !4860, !ctir !52
  %37 = load i64, i64* %line_bytes, align 8, !dbg !4861
  %mul = mul i64 %36, %37, !dbg !4862
  %idx.neg19 = sub i64 0, %mul, !dbg !4863
  %add.ptr20 = getelementptr inbounds i8, i8* %34, i64 %idx.neg19, !dbg !4863, !ctir !8
  %38 = load i8*, i8** %ptr, align 8, !dbg !4864
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr20 to i64, !dbg !4865
  %sub.ptr.rhs.cast = ptrtoint i8* %38 to i64, !dbg !4865
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4865
  store i64 %sub.ptr.sub, i64* %avail, align 8, !dbg !4856
  call void @llvm.dbg.declare(metadata i8** %line_start, metadata !4866, metadata !DIExpression()), !dbg !4867
  %39 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4868
  %nlines21 = getelementptr inbounds %struct.buffer, %struct.buffer* %39, i32 0, i32 2, !dbg !4869, !ctir !608
  %40 = load i64, i64* %nlines21, align 8, !dbg !4869, !ctir !52
  %tobool22 = icmp ne i64 %40, 0, !dbg !4868
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !4868

cond.true:                                        ; preds = %while.body
  %41 = load %struct.line*, %struct.line** %line, align 8, !dbg !4870
  %text = getelementptr inbounds %struct.line, %struct.line* %41, i32 0, i32 0, !dbg !4871, !ctir !541
  %42 = load i8*, i8** %text, align 8, !dbg !4871, !ctir !7
  %43 = load %struct.line*, %struct.line** %line, align 8, !dbg !4872
  %length = getelementptr inbounds %struct.line, %struct.line* %43, i32 0, i32 1, !dbg !4873, !ctir !541
  %44 = load i64, i64* %length, align 8, !dbg !4873, !ctir !52
  %add.ptr23 = getelementptr inbounds i8, i8* %42, i64 %44, !dbg !4874, !ctir !8
  br label %cond.end, !dbg !4868

cond.false:                                       ; preds = %while.body
  %45 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4875
  %buf24 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 0, !dbg !4876, !ctir !608
  %46 = load i8*, i8** %buf24, align 8, !dbg !4876, !ctir !7
  br label %cond.end, !dbg !4868

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr23, %cond.true ], [ %46, %cond.false ], !dbg !4868
  store i8* %cond, i8** %line_start, align 8, !dbg !4867
  br label %while.cond25, !dbg !4877

while.cond25:                                     ; preds = %if.end109, %cond.end
  %47 = load i64, i64* %line_bytes, align 8, !dbg !4878
  %add = add i64 %47, 1, !dbg !4879
  %48 = load i64, i64* %avail, align 8, !dbg !4880
  %cmp26 = icmp ult i64 %add, %48, !dbg !4881
  br i1 %cmp26, label %while.body27, label %while.end110, !dbg !4877

while.body27:                                     ; preds = %while.cond25
  call void @llvm.dbg.declare(metadata i64* %readsize, metadata !4882, metadata !DIExpression()), !dbg !4884
  %49 = load i64, i64* %avail, align 8, !dbg !4885
  %sub28 = sub i64 %49, 1, !dbg !4886
  %50 = load i64, i64* %line_bytes, align 8, !dbg !4887
  %add29 = add i64 %50, 1, !dbg !4888
  %div = udiv i64 %sub28, %add29, !dbg !4889
  store i64 %div, i64* %readsize, align 8, !dbg !4884
  call void @llvm.dbg.declare(metadata i64* %bytes_read, metadata !4890, metadata !DIExpression()), !dbg !4891
  %51 = load i8*, i8** %ptr, align 8, !dbg !4892
  %52 = load i64, i64* %readsize, align 8, !dbg !4892
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !4892
  %call30 = call i64 @fread_unlocked(i8* %51, i64 1, i64 %52, %struct._IO_FILE* %53), !dbg !4892
  store i64 %call30, i64* %bytes_read, align 8, !dbg !4891
  call void @llvm.dbg.declare(metadata i8** %ptrlim, metadata !4893, metadata !DIExpression()), !dbg !4894
  %54 = load i8*, i8** %ptr, align 8, !dbg !4895
  %55 = load i64, i64* %bytes_read, align 8, !dbg !4896
  %add.ptr31 = getelementptr inbounds i8, i8* %54, i64 %55, !dbg !4897, !ctir !8
  store i8* %add.ptr31, i8** %ptrlim, align 8, !dbg !4894
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4898, metadata !DIExpression()), !dbg !4899
  %56 = load i64, i64* %bytes_read, align 8, !dbg !4900
  %57 = load i64, i64* %avail, align 8, !dbg !4901
  %sub32 = sub i64 %57, %56, !dbg !4901
  store i64 %sub32, i64* %avail, align 8, !dbg !4901
  %58 = load i64, i64* %bytes_read, align 8, !dbg !4902
  %59 = load i64, i64* %readsize, align 8, !dbg !4904
  %cmp33 = icmp ne i64 %58, %59, !dbg !4905
  br i1 %cmp33, label %if.then34, label %if.end55, !dbg !4906

if.then34:                                        ; preds = %while.body27
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !4907
  %call35 = call i32 @ferror_unlocked(%struct._IO_FILE* %60) #12, !dbg !4907
  %tobool36 = icmp ne i32 %call35, 0, !dbg !4907
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !4910

if.then37:                                        ; preds = %if.then34
  %call38 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.159, i64 0, i64 0)) #12, !dbg !4911
  %61 = load i8*, i8** %file.addr, align 8, !dbg !4912
  call void @sort_die(i8* %call38, i8* %61) #15, !dbg !4913
  unreachable, !dbg !4913

if.end39:                                         ; preds = %if.then34
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !4914
  %call40 = call i32 @feof_unlocked(%struct._IO_FILE* %62) #12, !dbg !4914
  %tobool41 = icmp ne i32 %call40, 0, !dbg !4914
  br i1 %tobool41, label %if.then42, label %if.end54, !dbg !4916

if.then42:                                        ; preds = %if.end39
  %63 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4917
  %eof43 = getelementptr inbounds %struct.buffer, %struct.buffer* %63, i32 0, i32 6, !dbg !4919, !ctir !608
  store i8 1, i8* %eof43, align 8, !dbg !4920, !ctir !162
  %64 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !4921
  %buf44 = getelementptr inbounds %struct.buffer, %struct.buffer* %64, i32 0, i32 0, !dbg !4923, !ctir !608
  %65 = load i8*, i8** %buf44, align 8, !dbg !4923, !ctir !7
  %66 = load i8*, i8** %ptrlim, align 8, !dbg !4924
  %cmp45 = icmp eq i8* %65, %66, !dbg !4925
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !4926

if.then46:                                        ; preds = %if.then42
  store i1 false, i1* %retval, align 1, !dbg !4927
  br label %return, !dbg !4927

if.end47:                                         ; preds = %if.then42
  %67 = load i8*, i8** %line_start, align 8, !dbg !4928
  %68 = load i8*, i8** %ptrlim, align 8, !dbg !4930
  %cmp48 = icmp ne i8* %67, %68, !dbg !4931
  br i1 %cmp48, label %land.lhs.true, label %if.end53, !dbg !4932

land.lhs.true:                                    ; preds = %if.end47
  %69 = load i8*, i8** %ptrlim, align 8, !dbg !4933
  %arrayidx = getelementptr inbounds i8, i8* %69, i64 -1, !dbg !4933, !ctir !7
  %70 = load i8, i8* %arrayidx, align 1, !dbg !4933
  %conv = sext i8 %70 to i32, !dbg !4933
  %71 = load i8, i8* %eol, align 1, !dbg !4934
  %conv49 = sext i8 %71 to i32, !dbg !4934
  %cmp50 = icmp ne i32 %conv, %conv49, !dbg !4935
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !4936

if.then52:                                        ; preds = %land.lhs.true
  %72 = load i8, i8* %eol, align 1, !dbg !4937
  %73 = load i8*, i8** %ptrlim, align 8, !dbg !4938
  %incdec.ptr = getelementptr inbounds i8, i8* %73, i32 1, !dbg !4938, !ctir !8
  store i8* %incdec.ptr, i8** %ptrlim, align 8, !dbg !4938
  store i8 %72, i8* %73, align 1, !dbg !4939, !ctir !8
  br label %if.end53, !dbg !4940

if.end53:                                         ; preds = %if.then52, %land.lhs.true, %if.end47
  br label %if.end54, !dbg !4941

if.end54:                                         ; preds = %if.end53, %if.end39
  br label %if.end55, !dbg !4942

if.end55:                                         ; preds = %if.end54, %while.body27
  br label %while.cond56, !dbg !4943

while.cond56:                                     ; preds = %if.end104, %if.end55
  %74 = load i8*, i8** %ptr, align 8, !dbg !4944
  %75 = load i8, i8* %eol, align 1, !dbg !4945
  %conv57 = sext i8 %75 to i32, !dbg !4945
  %76 = load i8*, i8** %ptrlim, align 8, !dbg !4946
  %77 = load i8*, i8** %ptr, align 8, !dbg !4947
  %sub.ptr.lhs.cast58 = ptrtoint i8* %76 to i64, !dbg !4948
  %sub.ptr.rhs.cast59 = ptrtoint i8* %77 to i64, !dbg !4948
  %sub.ptr.sub60 = sub i64 %sub.ptr.lhs.cast58, %sub.ptr.rhs.cast59, !dbg !4948
  %call61 = call i8* @memchr(i8* %74, i32 %conv57, i64 %sub.ptr.sub60) #14, !dbg !4949
  store i8* %call61, i8** %p, align 8, !dbg !4950
  %tobool62 = icmp ne i8* %call61, null, !dbg !4943
  br i1 %tobool62, label %while.body63, label %while.end105, !dbg !4943

while.body63:                                     ; preds = %while.cond56
  %78 = load i8*, i8** %p, align 8, !dbg !4951
  store i8 0, i8* %78, align 1, !dbg !4953, !ctir !8
  %79 = load i8*, i8** %p, align 8, !dbg !4954
  %add.ptr64 = getelementptr inbounds i8, i8* %79, i64 1, !dbg !4955, !ctir !8
  store i8* %add.ptr64, i8** %ptr, align 8, !dbg !4956
  %80 = load %struct.line*, %struct.line** %line, align 8, !dbg !4957
  %incdec.ptr65 = getelementptr inbounds %struct.line, %struct.line* %80, i32 -1, !dbg !4957, !ctir !541
  store %struct.line* %incdec.ptr65, %struct.line** %line, align 8, !dbg !4957
  %81 = load i8*, i8** %line_start, align 8, !dbg !4958
  %82 = load %struct.line*, %struct.line** %line, align 8, !dbg !4959
  %text66 = getelementptr inbounds %struct.line, %struct.line* %82, i32 0, i32 0, !dbg !4960, !ctir !541
  store i8* %81, i8** %text66, align 8, !dbg !4961, !ctir !7
  %83 = load i8*, i8** %ptr, align 8, !dbg !4962
  %84 = load i8*, i8** %line_start, align 8, !dbg !4963
  %sub.ptr.lhs.cast67 = ptrtoint i8* %83 to i64, !dbg !4964
  %sub.ptr.rhs.cast68 = ptrtoint i8* %84 to i64, !dbg !4964
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68, !dbg !4964
  %85 = load %struct.line*, %struct.line** %line, align 8, !dbg !4965
  %length70 = getelementptr inbounds %struct.line, %struct.line* %85, i32 0, i32 1, !dbg !4966, !ctir !541
  store i64 %sub.ptr.sub69, i64* %length70, align 8, !dbg !4967, !ctir !52
  %86 = load i64, i64* %mergesize, align 8, !dbg !4968
  %87 = load %struct.line*, %struct.line** %line, align 8, !dbg !4968
  %length71 = getelementptr inbounds %struct.line, %struct.line* %87, i32 0, i32 1, !dbg !4968, !ctir !541
  %88 = load i64, i64* %length71, align 8, !dbg !4968, !ctir !52
  %cmp72 = icmp ugt i64 %86, %88, !dbg !4968
  br i1 %cmp72, label %cond.true74, label %cond.false75, !dbg !4968

cond.true74:                                      ; preds = %while.body63
  %89 = load i64, i64* %mergesize, align 8, !dbg !4968
  br label %cond.end77, !dbg !4968

cond.false75:                                     ; preds = %while.body63
  %90 = load %struct.line*, %struct.line** %line, align 8, !dbg !4968
  %length76 = getelementptr inbounds %struct.line, %struct.line* %90, i32 0, i32 1, !dbg !4968, !ctir !541
  %91 = load i64, i64* %length76, align 8, !dbg !4968, !ctir !52
  br label %cond.end77, !dbg !4968

cond.end77:                                       ; preds = %cond.false75, %cond.true74
  %cond78 = phi i64 [ %89, %cond.true74 ], [ %91, %cond.false75 ], !dbg !4968
  store i64 %cond78, i64* %mergesize, align 8, !dbg !4969
  %92 = load i64, i64* %line_bytes, align 8, !dbg !4970
  %93 = load i64, i64* %avail, align 8, !dbg !4971
  %sub79 = sub i64 %93, %92, !dbg !4971
  store i64 %sub79, i64* %avail, align 8, !dbg !4971
  %94 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4972
  %tobool80 = icmp ne %struct.keyfield* %94, null, !dbg !4972
  br i1 %tobool80, label %if.then81, label %if.end104, !dbg !4974

if.then81:                                        ; preds = %cond.end77
  %95 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4975
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %95, i32 0, i32 2, !dbg !4977, !ctir !523
  %96 = load i64, i64* %eword, align 8, !dbg !4977, !ctir !52
  %cmp82 = icmp eq i64 %96, -1, !dbg !4978
  br i1 %cmp82, label %cond.true84, label %cond.false85, !dbg !4975

cond.true84:                                      ; preds = %if.then81
  %97 = load i8*, i8** %p, align 8, !dbg !4979
  br label %cond.end87, !dbg !4975

cond.false85:                                     ; preds = %if.then81
  %98 = load %struct.line*, %struct.line** %line, align 8, !dbg !4980
  %99 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4981
  %call86 = call i8* @limfield(%struct.line* %98, %struct.keyfield* %99), !dbg !4982
  br label %cond.end87, !dbg !4975

cond.end87:                                       ; preds = %cond.false85, %cond.true84
  %cond88 = phi i8* [ %97, %cond.true84 ], [ %call86, %cond.false85 ], !dbg !4975
  %100 = load %struct.line*, %struct.line** %line, align 8, !dbg !4983
  %keylim = getelementptr inbounds %struct.line, %struct.line* %100, i32 0, i32 3, !dbg !4984, !ctir !541
  store i8* %cond88, i8** %keylim, align 8, !dbg !4985, !ctir !7
  %101 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4986
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %101, i32 0, i32 0, !dbg !4988, !ctir !523
  %102 = load i64, i64* %sword, align 8, !dbg !4988, !ctir !52
  %cmp89 = icmp ne i64 %102, -1, !dbg !4989
  br i1 %cmp89, label %if.then91, label %if.else, !dbg !4990

if.then91:                                        ; preds = %cond.end87
  %103 = load %struct.line*, %struct.line** %line, align 8, !dbg !4991
  %104 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4992
  %call92 = call i8* @begfield(%struct.line* %103, %struct.keyfield* %104), !dbg !4993
  %105 = load %struct.line*, %struct.line** %line, align 8, !dbg !4994
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %105, i32 0, i32 2, !dbg !4995, !ctir !541
  store i8* %call92, i8** %keybeg, align 8, !dbg !4996, !ctir !7
  br label %if.end103, !dbg !4994

if.else:                                          ; preds = %cond.end87
  %106 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !4997
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %106, i32 0, i32 6, !dbg !5000, !ctir !523
  %107 = load i8, i8* %skipsblanks, align 8, !dbg !5000
  %tobool93 = trunc i8 %107 to i1, !dbg !5000, !ctir !162
  br i1 %tobool93, label %if.then94, label %if.end101, !dbg !5001

if.then94:                                        ; preds = %if.else
  br label %while.cond95, !dbg !5002

while.cond95:                                     ; preds = %while.body99, %if.then94
  %108 = load i8*, i8** %line_start, align 8, !dbg !5003
  %109 = load i8, i8* %108, align 1, !dbg !5004, !ctir !8
  %call96 = call zeroext i8 @to_uchar(i8 signext %109), !dbg !5005
  %idxprom = zext i8 %call96 to i64, !dbg !5006
  %arrayidx97 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !5006, !ctir !448
  %110 = load i8, i8* %arrayidx97, align 1, !dbg !5006
  %tobool98 = trunc i8 %110 to i1, !dbg !5006
  br i1 %tobool98, label %while.body99, label %while.end, !dbg !5002

while.body99:                                     ; preds = %while.cond95
  %111 = load i8*, i8** %line_start, align 8, !dbg !5007
  %incdec.ptr100 = getelementptr inbounds i8, i8* %111, i32 1, !dbg !5007, !ctir !8
  store i8* %incdec.ptr100, i8** %line_start, align 8, !dbg !5007
  br label %while.cond95, !dbg !5002, !llvm.loop !5008

while.end:                                        ; preds = %while.cond95
  br label %if.end101, !dbg !5002

if.end101:                                        ; preds = %while.end, %if.else
  %112 = load i8*, i8** %line_start, align 8, !dbg !5009
  %113 = load %struct.line*, %struct.line** %line, align 8, !dbg !5010
  %keybeg102 = getelementptr inbounds %struct.line, %struct.line* %113, i32 0, i32 2, !dbg !5011, !ctir !541
  store i8* %112, i8** %keybeg102, align 8, !dbg !5012, !ctir !7
  br label %if.end103

if.end103:                                        ; preds = %if.end101, %if.then91
  br label %if.end104, !dbg !5013

if.end104:                                        ; preds = %if.end103, %cond.end77
  %114 = load i8*, i8** %ptr, align 8, !dbg !5014
  store i8* %114, i8** %line_start, align 8, !dbg !5015
  br label %while.cond56, !dbg !4943, !llvm.loop !5016

while.end105:                                     ; preds = %while.cond56
  %115 = load i8*, i8** %ptrlim, align 8, !dbg !5018
  store i8* %115, i8** %ptr, align 8, !dbg !5019
  %116 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5020
  %eof106 = getelementptr inbounds %struct.buffer, %struct.buffer* %116, i32 0, i32 6, !dbg !5022, !ctir !608
  %117 = load i8, i8* %eof106, align 8, !dbg !5022
  %tobool107 = trunc i8 %117 to i1, !dbg !5022, !ctir !162
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !5023

if.then108:                                       ; preds = %while.end105
  br label %while.end110, !dbg !5024

if.end109:                                        ; preds = %while.end105
  br label %while.cond25, !dbg !4877, !llvm.loop !5025

while.end110:                                     ; preds = %if.then108, %while.cond25
  %118 = load i8*, i8** %ptr, align 8, !dbg !5027
  %119 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5028
  %buf111 = getelementptr inbounds %struct.buffer, %struct.buffer* %119, i32 0, i32 0, !dbg !5029, !ctir !608
  %120 = load i8*, i8** %buf111, align 8, !dbg !5029, !ctir !7
  %sub.ptr.lhs.cast112 = ptrtoint i8* %118 to i64, !dbg !5030
  %sub.ptr.rhs.cast113 = ptrtoint i8* %120 to i64, !dbg !5030
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113, !dbg !5030
  %121 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5031
  %used115 = getelementptr inbounds %struct.buffer, %struct.buffer* %121, i32 0, i32 1, !dbg !5032, !ctir !608
  store i64 %sub.ptr.sub114, i64* %used115, align 8, !dbg !5033, !ctir !52
  %122 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5034
  %call116 = call %struct.line* @buffer_linelim(%struct.buffer* %122), !dbg !5035
  %123 = load %struct.line*, %struct.line** %line, align 8, !dbg !5036
  %sub.ptr.lhs.cast117 = ptrtoint %struct.line* %call116 to i64, !dbg !5037
  %sub.ptr.rhs.cast118 = ptrtoint %struct.line* %123 to i64, !dbg !5037
  %sub.ptr.sub119 = sub i64 %sub.ptr.lhs.cast117, %sub.ptr.rhs.cast118, !dbg !5037
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub119, 32, !dbg !5037
  %124 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5038
  %nlines120 = getelementptr inbounds %struct.buffer, %struct.buffer* %124, i32 0, i32 2, !dbg !5039, !ctir !608
  store i64 %sub.ptr.div, i64* %nlines120, align 8, !dbg !5040, !ctir !52
  %125 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5041
  %nlines121 = getelementptr inbounds %struct.buffer, %struct.buffer* %125, i32 0, i32 2, !dbg !5043, !ctir !608
  %126 = load i64, i64* %nlines121, align 8, !dbg !5043, !ctir !52
  %cmp122 = icmp ne i64 %126, 0, !dbg !5044
  br i1 %cmp122, label %if.then124, label %if.end130, !dbg !5045

if.then124:                                       ; preds = %while.end110
  %127 = load i8*, i8** %ptr, align 8, !dbg !5046
  %128 = load i8*, i8** %line_start, align 8, !dbg !5048
  %sub.ptr.lhs.cast125 = ptrtoint i8* %127 to i64, !dbg !5049
  %sub.ptr.rhs.cast126 = ptrtoint i8* %128 to i64, !dbg !5049
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast125, %sub.ptr.rhs.cast126, !dbg !5049
  %129 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5050
  %left128 = getelementptr inbounds %struct.buffer, %struct.buffer* %129, i32 0, i32 4, !dbg !5051, !ctir !608
  store i64 %sub.ptr.sub127, i64* %left128, align 8, !dbg !5052, !ctir !52
  %130 = load i64, i64* %mergesize, align 8, !dbg !5053
  %add129 = add i64 %130, 34, !dbg !5054
  store i64 %add129, i64* @merge_buffer_size, align 8, !dbg !5055
  store i1 true, i1* %retval, align 1, !dbg !5056
  br label %return, !dbg !5056

if.end130:                                        ; preds = %while.end110
  call void @llvm.dbg.declare(metadata i64* %line_alloc, metadata !5057, metadata !DIExpression()), !dbg !5059
  %131 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5060
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %131, i32 0, i32 3, !dbg !5061, !ctir !608
  %132 = load i64, i64* %alloc, align 8, !dbg !5061, !ctir !52
  %div131 = udiv i64 %132, 32, !dbg !5062
  store i64 %div131, i64* %line_alloc, align 8, !dbg !5059
  %133 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5063
  %buf132 = getelementptr inbounds %struct.buffer, %struct.buffer* %133, i32 0, i32 0, !dbg !5064, !ctir !608
  %134 = load i8*, i8** %buf132, align 8, !dbg !5064, !ctir !7
  %call133 = call i8* @x2nrealloc(i8* %134, i64* %line_alloc, i64 32), !dbg !5065
  %135 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5066
  %buf134 = getelementptr inbounds %struct.buffer, %struct.buffer* %135, i32 0, i32 0, !dbg !5067, !ctir !608
  store i8* %call133, i8** %buf134, align 8, !dbg !5068, !ctir !7
  %136 = load i64, i64* %line_alloc, align 8, !dbg !5069
  %mul135 = mul i64 %136, 32, !dbg !5070
  %137 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5071
  %alloc136 = getelementptr inbounds %struct.buffer, %struct.buffer* %137, i32 0, i32 3, !dbg !5072, !ctir !608
  store i64 %mul135, i64* %alloc136, align 8, !dbg !5073, !ctir !52
  br label %while.body, !dbg !4836, !llvm.loop !5074

return:                                           ; preds = %if.then124, %if.then46, %if.then
  %138 = load i1, i1* %retval, align 1, !dbg !5076
  ret i1 %138, !dbg !5076
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.line* @buffer_linelim(%struct.buffer* %buf) #4 !dbg !5077 {
entry:
  %buf.addr = alloca %struct.buffer*, align 8
  %linelim = alloca i8*, align 8, !ctir !47
  store %struct.buffer* %buf, %struct.buffer** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.buffer** %buf.addr, metadata !5082, metadata !DIExpression()), !dbg !5083
  call void @llvm.dbg.declare(metadata i8** %linelim, metadata !5084, metadata !DIExpression()), !dbg !5085
  %0 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5086
  %buf1 = getelementptr inbounds %struct.buffer, %struct.buffer* %0, i32 0, i32 0, !dbg !5087, !ctir !5081
  %1 = load i8*, i8** %buf1, align 8, !dbg !5087, !ctir !7
  %2 = load %struct.buffer*, %struct.buffer** %buf.addr, align 8, !dbg !5088
  %alloc = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 3, !dbg !5089, !ctir !5081
  %3 = load i64, i64* %alloc, align 8, !dbg !5089, !ctir !52
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3, !dbg !5090, !ctir !8
  store i8* %add.ptr, i8** %linelim, align 8, !dbg !5085
  %4 = load i8*, i8** %linelim, align 8, !dbg !5091
  %5 = bitcast i8* %4 to %struct.line*, !dbg !5091
  ret %struct.line* %5, !dbg !5092
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tempnode* @create_temp(%struct._IO_FILE** %pfp) #4 !dbg !5093 {
entry:
  %pfp.addr = alloca %struct._IO_FILE**, align 8
  store %struct._IO_FILE** %pfp, %struct._IO_FILE*** %pfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %pfp.addr, metadata !5096, metadata !DIExpression()), !dbg !5097
  %0 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !dbg !5098
  %call = call %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %0, i1 zeroext false), !dbg !5099
  ret %struct.tempnode* %call, !dbg !5100
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_init(%struct.merge_node_queue* %queue, i64 %nthreads) #4 !dbg !5101 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %nthreads.addr = alloca i64, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !5104, metadata !DIExpression()), !dbg !5105
  store i64 %nthreads, i64* %nthreads.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nthreads.addr, metadata !5106, metadata !DIExpression()), !dbg !5107
  %0 = load i64, i64* %nthreads.addr, align 8, !dbg !5108
  %mul = mul i64 2, %0, !dbg !5109
  %call = call %struct.heap* @heap_alloc(i32 (i8*, i8*)* @compare_nodes, i64 %mul), !dbg !5110
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5111
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 0, !dbg !5112, !ctir !684
  store %struct.heap* %call, %struct.heap** %priority_queue, align 8, !dbg !5113, !ctir !665
  %2 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5114
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %2, i32 0, i32 1, !dbg !5115, !ctir !684
  %call1 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %mutex, %union.anon.11* null) #12, !dbg !5116
  %3 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5117
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %3, i32 0, i32 2, !dbg !5118, !ctir !684
  %call2 = call i32 @pthread_cond_init(%union.pthread_cond_t* %cond, %union.anon.11* null) #12, !dbg !5119
  ret void, !dbg !5120
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.merge_node* @merge_tree_init(i64 %nthreads, i64 %nlines, %struct.line* %dest) #4 !dbg !5121 {
entry:
  %nthreads.addr = alloca i64, align 8
  %nlines.addr = alloca i64, align 8
  %dest.addr = alloca %struct.line*, align 8
  %merge_tree = alloca %struct.merge_node*, align 8, !ctir !621
  %root = alloca %struct.merge_node*, align 8, !ctir !621
  store i64 %nthreads, i64* %nthreads.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nthreads.addr, metadata !5124, metadata !DIExpression()), !dbg !5125
  store i64 %nlines, i64* %nlines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nlines.addr, metadata !5126, metadata !DIExpression()), !dbg !5127
  store %struct.line* %dest, %struct.line** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %dest.addr, metadata !5128, metadata !DIExpression()), !dbg !5129
  call void @llvm.dbg.declare(metadata %struct.merge_node** %merge_tree, metadata !5130, metadata !DIExpression()), !dbg !5131
  %0 = load i64, i64* %nthreads.addr, align 8, !dbg !5132
  %mul = mul i64 256, %0, !dbg !5133
  %call = call noalias i8* @xmalloc(i64 %mul), !dbg !5134
  %1 = bitcast i8* %call to %struct.merge_node*, !dbg !5134
  store %struct.merge_node* %1, %struct.merge_node** %merge_tree, align 8, !dbg !5131
  call void @llvm.dbg.declare(metadata %struct.merge_node** %root, metadata !5135, metadata !DIExpression()), !dbg !5136
  %2 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !dbg !5137
  store %struct.merge_node* %2, %struct.merge_node** %root, align 8, !dbg !5136
  %3 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5138
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %3, i32 0, i32 3, !dbg !5139, !ctir !622
  store %struct.line* null, %struct.line** %end_hi, align 8, !dbg !5140, !ctir !553
  %4 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5141
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 2, !dbg !5142, !ctir !622
  store %struct.line* null, %struct.line** %end_lo, align 8, !dbg !5143, !ctir !553
  %5 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5144
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 1, !dbg !5145, !ctir !622
  store %struct.line* null, %struct.line** %hi, align 8, !dbg !5146, !ctir !553
  %6 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5147
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 0, !dbg !5148, !ctir !622
  store %struct.line* null, %struct.line** %lo, align 8, !dbg !5149, !ctir !553
  %7 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5150
  %dest1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %7, i32 0, i32 4, !dbg !5151, !ctir !622
  store %struct.line** null, %struct.line*** %dest1, align 8, !dbg !5152, !ctir !629
  %8 = load i64, i64* %nlines.addr, align 8, !dbg !5153
  %9 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5154
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 6, !dbg !5155, !ctir !622
  store i64 %8, i64* %nhi, align 8, !dbg !5156, !ctir !52
  %10 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5157
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %10, i32 0, i32 5, !dbg !5158, !ctir !622
  store i64 %8, i64* %nlo, align 8, !dbg !5159, !ctir !52
  %11 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5160
  %parent = getelementptr inbounds %struct.merge_node, %struct.merge_node* %11, i32 0, i32 7, !dbg !5161, !ctir !622
  store %struct.merge_node* null, %struct.merge_node** %parent, align 8, !dbg !5162, !ctir !621
  %12 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5163
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 10, !dbg !5164, !ctir !622
  store i32 0, i32* %level, align 8, !dbg !5165, !ctir !66
  %13 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5166
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %13, i32 0, i32 11, !dbg !5167, !ctir !622
  store i8 0, i8* %queued, align 4, !dbg !5168, !ctir !162
  %14 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5169
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 12, !dbg !5170, !ctir !622
  %call2 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %lock, %union.anon.11* null) #12, !dbg !5171
  %15 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5172
  %16 = load %struct.merge_node*, %struct.merge_node** %root, align 8, !dbg !5173
  %add.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %16, i64 1, !dbg !5174, !ctir !622
  %17 = load %struct.line*, %struct.line** %dest.addr, align 8, !dbg !5175
  %18 = load i64, i64* %nthreads.addr, align 8, !dbg !5176
  %19 = load i64, i64* %nlines.addr, align 8, !dbg !5177
  %call3 = call %struct.merge_node* @init_node(%struct.merge_node* %15, %struct.merge_node* %add.ptr, %struct.line* %17, i64 %18, i64 %19, i1 zeroext false), !dbg !5178
  %20 = load %struct.merge_node*, %struct.merge_node** %merge_tree, align 8, !dbg !5179
  ret %struct.merge_node* %20, !dbg !5180
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sortlines(%struct.line* noalias %lines, i64 %nthreads, i64 %total_lines, %struct.merge_node* %node, %struct.merge_node_queue* %queue, %struct._IO_FILE* %tfp, i8* %temp_output) #4 !dbg !5181 {
entry:
  %lines.addr = alloca %struct.line*, align 8
  %nthreads.addr = alloca i64, align 8
  %total_lines.addr = alloca i64, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %nlines = alloca i64, align 8, !ctir !52
  %lo_threads = alloca i64, align 8, !ctir !52
  %hi_threads = alloca i64, align 8, !ctir !52
  %thread = alloca i64, align 8, !ctir !670
  %args = alloca %struct.thread_args, align 8, !ctir !673
  %nlo12 = alloca i64, align 8, !ctir !52
  %nhi14 = alloca i64, align 8, !ctir !52
  %temp = alloca %struct.line*, align 8, !ctir !553
  store %struct.line* %lines, %struct.line** %lines.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %lines.addr, metadata !5185, metadata !DIExpression()), !dbg !5186
  store i64 %nthreads, i64* %nthreads.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nthreads.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  store i64 %total_lines, i64* %total_lines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %total_lines.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !5191, metadata !DIExpression()), !dbg !5192
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !5193, metadata !DIExpression()), !dbg !5194
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp.addr, metadata !5195, metadata !DIExpression()), !dbg !5196
  store i8* %temp_output, i8** %temp_output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %temp_output.addr, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata i64* %nlines, metadata !5199, metadata !DIExpression()), !dbg !5200
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5201
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 5, !dbg !5202, !ctir !622
  %1 = load i64, i64* %nlo, align 8, !dbg !5202, !ctir !52
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5203
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 6, !dbg !5204, !ctir !622
  %3 = load i64, i64* %nhi, align 8, !dbg !5204, !ctir !52
  %add = add i64 %1, %3, !dbg !5205
  store i64 %add, i64* %nlines, align 8, !dbg !5200
  call void @llvm.dbg.declare(metadata i64* %lo_threads, metadata !5206, metadata !DIExpression()), !dbg !5207
  %4 = load i64, i64* %nthreads.addr, align 8, !dbg !5208
  %div = udiv i64 %4, 2, !dbg !5209
  store i64 %div, i64* %lo_threads, align 8, !dbg !5207
  call void @llvm.dbg.declare(metadata i64* %hi_threads, metadata !5210, metadata !DIExpression()), !dbg !5211
  %5 = load i64, i64* %nthreads.addr, align 8, !dbg !5212
  %6 = load i64, i64* %lo_threads, align 8, !dbg !5213
  %sub = sub i64 %5, %6, !dbg !5214
  store i64 %sub, i64* %hi_threads, align 8, !dbg !5211
  call void @llvm.dbg.declare(metadata i64* %thread, metadata !5215, metadata !DIExpression()), !dbg !5216
  call void @llvm.dbg.declare(metadata %struct.thread_args* %args, metadata !5217, metadata !DIExpression()), !dbg !5218
  %lines1 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 0, !dbg !5219
  %7 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5220
  store %struct.line* %7, %struct.line** %lines1, align 8, !dbg !5219
  %nthreads2 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 1, !dbg !5219
  %8 = load i64, i64* %lo_threads, align 8, !dbg !5221
  store i64 %8, i64* %nthreads2, align 8, !dbg !5219
  %total_lines3 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 2, !dbg !5219
  %9 = load i64, i64* %total_lines.addr, align 8, !dbg !5222
  store i64 %9, i64* %total_lines3, align 8, !dbg !5219
  %node4 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 3, !dbg !5219
  %10 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5223
  %lo_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %10, i32 0, i32 8, !dbg !5224, !ctir !622
  %11 = load %struct.merge_node*, %struct.merge_node** %lo_child, align 8, !dbg !5224, !ctir !621
  store %struct.merge_node* %11, %struct.merge_node** %node4, align 8, !dbg !5219
  %queue5 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 4, !dbg !5219
  %12 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5225
  store %struct.merge_node_queue* %12, %struct.merge_node_queue** %queue5, align 8, !dbg !5219
  %tfp6 = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 5, !dbg !5219
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !5226
  store %struct._IO_FILE* %13, %struct._IO_FILE** %tfp6, align 8, !dbg !5219
  %output_temp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %args, i32 0, i32 6, !dbg !5219
  %14 = load i8*, i8** %temp_output.addr, align 8, !dbg !5227
  store i8* %14, i8** %output_temp, align 8, !dbg !5219
  %15 = load i64, i64* %nthreads.addr, align 8, !dbg !5228
  %cmp = icmp ugt i64 %15, 1, !dbg !5230
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5231

land.lhs.true:                                    ; preds = %entry
  %16 = load i64, i64* %nlines, align 8, !dbg !5232
  %cmp7 = icmp ule i64 131072, %16, !dbg !5233
  br i1 %cmp7, label %land.lhs.true8, label %if.else, !dbg !5234

land.lhs.true8:                                   ; preds = %land.lhs.true
  %17 = bitcast %struct.thread_args* %args to i8*, !dbg !5235
  %call = call i32 @pthread_create(i64* %thread, %union.pthread_attr_t* null, i8* (i8*)* @sortlines_thread, i8* %17) #12, !dbg !5236
  %cmp9 = icmp eq i32 %call, 0, !dbg !5237
  br i1 %cmp9, label %if.then, label %if.else, !dbg !5238

if.then:                                          ; preds = %land.lhs.true8
  %18 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5239
  %19 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5241
  %nlo10 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %19, i32 0, i32 5, !dbg !5242, !ctir !622
  %20 = load i64, i64* %nlo10, align 8, !dbg !5242, !ctir !52
  %idx.neg = sub i64 0, %20, !dbg !5243
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %18, i64 %idx.neg, !dbg !5243, !ctir !541
  %21 = load i64, i64* %hi_threads, align 8, !dbg !5244
  %22 = load i64, i64* %total_lines.addr, align 8, !dbg !5245
  %23 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5246
  %hi_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %23, i32 0, i32 9, !dbg !5247, !ctir !622
  %24 = load %struct.merge_node*, %struct.merge_node** %hi_child, align 8, !dbg !5247, !ctir !621
  %25 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5248
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !5249
  %27 = load i8*, i8** %temp_output.addr, align 8, !dbg !5250
  call void @sortlines(%struct.line* %add.ptr, i64 %21, i64 %22, %struct.merge_node* %24, %struct.merge_node_queue* %25, %struct._IO_FILE* %26, i8* %27), !dbg !5251
  %28 = load i64, i64* %thread, align 8, !dbg !5252
  %call11 = call i32 @pthread_join(i64 %28, i8** null), !dbg !5253
  br label %if.end36, !dbg !5254

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata i64* %nlo12, metadata !5255, metadata !DIExpression()), !dbg !5257
  %29 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5258
  %nlo13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %29, i32 0, i32 5, !dbg !5259, !ctir !622
  %30 = load i64, i64* %nlo13, align 8, !dbg !5259, !ctir !52
  store i64 %30, i64* %nlo12, align 8, !dbg !5257
  call void @llvm.dbg.declare(metadata i64* %nhi14, metadata !5260, metadata !DIExpression()), !dbg !5261
  %31 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5262
  %nhi15 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %31, i32 0, i32 6, !dbg !5263, !ctir !622
  %32 = load i64, i64* %nhi15, align 8, !dbg !5263, !ctir !52
  store i64 %32, i64* %nhi14, align 8, !dbg !5261
  call void @llvm.dbg.declare(metadata %struct.line** %temp, metadata !5264, metadata !DIExpression()), !dbg !5265
  %33 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5266
  %34 = load i64, i64* %total_lines.addr, align 8, !dbg !5267
  %idx.neg16 = sub i64 0, %34, !dbg !5268
  %add.ptr17 = getelementptr inbounds %struct.line, %struct.line* %33, i64 %idx.neg16, !dbg !5268, !ctir !541
  store %struct.line* %add.ptr17, %struct.line** %temp, align 8, !dbg !5265
  %35 = load i64, i64* %nhi14, align 8, !dbg !5269
  %cmp18 = icmp ult i64 1, %35, !dbg !5271
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !5272

if.then19:                                        ; preds = %if.else
  %36 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5273
  %37 = load i64, i64* %nlo12, align 8, !dbg !5274
  %idx.neg20 = sub i64 0, %37, !dbg !5275
  %add.ptr21 = getelementptr inbounds %struct.line, %struct.line* %36, i64 %idx.neg20, !dbg !5275, !ctir !541
  %38 = load i64, i64* %nhi14, align 8, !dbg !5276
  %39 = load %struct.line*, %struct.line** %temp, align 8, !dbg !5277
  %40 = load i64, i64* %nlo12, align 8, !dbg !5278
  %div22 = udiv i64 %40, 2, !dbg !5279
  %idx.neg23 = sub i64 0, %div22, !dbg !5280
  %add.ptr24 = getelementptr inbounds %struct.line, %struct.line* %39, i64 %idx.neg23, !dbg !5280, !ctir !541
  call void @sequential_sort(%struct.line* %add.ptr21, i64 %38, %struct.line* %add.ptr24, i1 zeroext false), !dbg !5281
  br label %if.end, !dbg !5281

if.end:                                           ; preds = %if.then19, %if.else
  %41 = load i64, i64* %nlo12, align 8, !dbg !5282
  %cmp25 = icmp ult i64 1, %41, !dbg !5284
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5285

if.then26:                                        ; preds = %if.end
  %42 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5286
  %43 = load i64, i64* %nlo12, align 8, !dbg !5287
  %44 = load %struct.line*, %struct.line** %temp, align 8, !dbg !5288
  call void @sequential_sort(%struct.line* %42, i64 %43, %struct.line* %44, i1 zeroext false), !dbg !5289
  br label %if.end27, !dbg !5289

if.end27:                                         ; preds = %if.then26, %if.end
  %45 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5290
  %46 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5291
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %46, i32 0, i32 0, !dbg !5292, !ctir !622
  store %struct.line* %45, %struct.line** %lo, align 8, !dbg !5293, !ctir !553
  %47 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5294
  %48 = load i64, i64* %nlo12, align 8, !dbg !5295
  %idx.neg28 = sub i64 0, %48, !dbg !5296
  %add.ptr29 = getelementptr inbounds %struct.line, %struct.line* %47, i64 %idx.neg28, !dbg !5296, !ctir !541
  %49 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5297
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %49, i32 0, i32 1, !dbg !5298, !ctir !622
  store %struct.line* %add.ptr29, %struct.line** %hi, align 8, !dbg !5299, !ctir !553
  %50 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5300
  %51 = load i64, i64* %nlo12, align 8, !dbg !5301
  %idx.neg30 = sub i64 0, %51, !dbg !5302
  %add.ptr31 = getelementptr inbounds %struct.line, %struct.line* %50, i64 %idx.neg30, !dbg !5302, !ctir !541
  %52 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5303
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %52, i32 0, i32 2, !dbg !5304, !ctir !622
  store %struct.line* %add.ptr31, %struct.line** %end_lo, align 8, !dbg !5305, !ctir !553
  %53 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !5306
  %54 = load i64, i64* %nlo12, align 8, !dbg !5307
  %idx.neg32 = sub i64 0, %54, !dbg !5308
  %add.ptr33 = getelementptr inbounds %struct.line, %struct.line* %53, i64 %idx.neg32, !dbg !5308, !ctir !541
  %55 = load i64, i64* %nhi14, align 8, !dbg !5309
  %idx.neg34 = sub i64 0, %55, !dbg !5310
  %add.ptr35 = getelementptr inbounds %struct.line, %struct.line* %add.ptr33, i64 %idx.neg34, !dbg !5310, !ctir !541
  %56 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5311
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %56, i32 0, i32 3, !dbg !5312, !ctir !622
  store %struct.line* %add.ptr35, %struct.line** %end_hi, align 8, !dbg !5313, !ctir !553
  %57 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5314
  %58 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !5315
  call void @queue_insert(%struct.merge_node_queue* %57, %struct.merge_node* %58), !dbg !5316
  %59 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !5317
  %60 = load i64, i64* %total_lines.addr, align 8, !dbg !5318
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !5319
  %62 = load i8*, i8** %temp_output.addr, align 8, !dbg !5320
  call void @merge_loop(%struct.merge_node_queue* %59, i64 %60, %struct._IO_FILE* %61, i8* %62), !dbg !5321
  br label %if.end36

if.end36:                                         ; preds = %if.end27, %if.then
  ret void, !dbg !5322
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_unique(%struct.line* %line, %struct._IO_FILE* %tfp, i8* %temp_output) #4 !dbg !5323 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  store i8* %temp_output, i8** %temp_output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %temp_output.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  %0 = load i8, i8* @unique, align 1, !dbg !5332
  %tobool = trunc i8 %0 to i1, !dbg !5332
  br i1 %tobool, label %if.then, label %if.end4, !dbg !5334

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.line, %struct.line* @saved_line, i32 0, i32 0), align 8, !dbg !5335, !ctir !7
  %tobool1 = icmp ne i8* %1, null, !dbg !5338
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !5339

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5340
  %call = call i32 @compare(%struct.line* %2, %struct.line* @saved_line), !dbg !5341
  %tobool2 = icmp ne i32 %call, 0, !dbg !5341
  br i1 %tobool2, label %if.end, label %if.then3, !dbg !5342

if.then3:                                         ; preds = %land.lhs.true
  br label %return, !dbg !5343

if.end:                                           ; preds = %land.lhs.true, %if.then
  %3 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5344
  %4 = bitcast %struct.line* %3 to i8*, !dbg !5345
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.line* @saved_line to i8*), i8* align 8 %4, i64 32, i1 false), !dbg !5345
  br label %if.end4, !dbg !5346

if.end4:                                          ; preds = %if.end, %entry
  %5 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5347
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !5348
  %7 = load i8*, i8** %temp_output.addr, align 8, !dbg !5349
  call void @write_line(%struct.line* %5, %struct._IO_FILE* %6, i8* %7), !dbg !5350
  br label %return, !dbg !5351

return:                                           ; preds = %if.end4, %if.then3
  ret void, !dbg !5351
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reap_all() #4 !dbg !5352 {
entry:
  br label %while.cond, !dbg !5353

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @nprocs, align 4, !dbg !5354
  %cmp = icmp slt i32 0, %0, !dbg !5355
  br i1 %cmp, label %while.body, label %while.end, !dbg !5353

while.body:                                       ; preds = %while.cond
  %call = call i32 @reap(i32 -1), !dbg !5356
  br label %while.cond, !dbg !5353, !llvm.loop !5357

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5359
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @reap(i32 %pid) #4 !dbg !594 {
entry:
  %pid.addr = alloca i32, align 4
  %status = alloca i32, align 4, !ctir !5
  %cpid = alloca i32, align 4, !ctir !413
  %.compoundliteral = alloca %union.anon.11, align 4
  %.compoundliteral12 = alloca %union.anon.11, align 4
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !5360, metadata !DIExpression()), !dbg !5361
  call void @llvm.dbg.declare(metadata i32* %status, metadata !5362, metadata !DIExpression()), !dbg !5363
  call void @llvm.dbg.declare(metadata i32* %cpid, metadata !5364, metadata !DIExpression()), !dbg !5365
  %0 = load i32, i32* %pid.addr, align 4, !dbg !5366
  %tobool = icmp ne i32 %0, 0, !dbg !5366
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5366

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %pid.addr, align 4, !dbg !5367
  br label %cond.end, !dbg !5366

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5366

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %1, %cond.true ], [ -1, %cond.false ], !dbg !5366
  %2 = load i32, i32* %pid.addr, align 4, !dbg !5368
  %tobool1 = icmp ne i32 %2, 0, !dbg !5368
  %3 = zext i1 %tobool1 to i64, !dbg !5368
  %cond2 = select i1 %tobool1, i32 0, i32 1, !dbg !5368
  %call = call i32 @waitpid(i32 %cond, i32* %status, i32 %cond2), !dbg !5369
  store i32 %call, i32* %cpid, align 4, !dbg !5365
  %4 = load i32, i32* %cpid, align 4, !dbg !5370
  %cmp = icmp slt i32 %4, 0, !dbg !5372
  br i1 %cmp, label %if.then, label %if.else, !dbg !5373

if.then:                                          ; preds = %cond.end
  %call3 = call i32* @__errno_location() #16, !dbg !5374
  %5 = load i32, i32* %call3, align 4, !dbg !5374, !ctir !5
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.171, i64 0, i64 0)) #12, !dbg !5374
  %6 = load i8*, i8** @compress_program, align 8, !dbg !5374
  %call5 = call i8* @quotearg_style(i32 4, i8* %6), !dbg !5374
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %5, i8* %call4, i8* %call5), !dbg !5374
  unreachable, !dbg !5374

if.else:                                          ; preds = %cond.end
  %7 = load i32, i32* %cpid, align 4, !dbg !5375
  %cmp6 = icmp slt i32 0, %7, !dbg !5377
  br i1 %cmp6, label %land.lhs.true, label %if.end20, !dbg !5378

land.lhs.true:                                    ; preds = %if.else
  %8 = load i32, i32* %pid.addr, align 4, !dbg !5379
  %cmp7 = icmp slt i32 0, %8, !dbg !5380
  br i1 %cmp7, label %if.then9, label %lor.lhs.false, !dbg !5381

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i32, i32* %cpid, align 4, !dbg !5382
  %call8 = call zeroext i1 @delete_proc(i32 %9), !dbg !5383
  br i1 %call8, label %if.then9, label %if.end20, !dbg !5384

if.then9:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %__in = bitcast %union.anon.11* %.compoundliteral to i32*, !dbg !5385
  %10 = load i32, i32* %status, align 4, !dbg !5385
  store i32 %10, i32* %__in, align 4, !dbg !5385
  %__i = bitcast %union.anon.11* %.compoundliteral to i32*, !dbg !5385
  %11 = load i32, i32* %__i, align 4, !dbg !5385, !ctir !593
  %and = and i32 %11, 127, !dbg !5385
  %cmp10 = icmp eq i32 %and, 0, !dbg !5385
  br i1 %cmp10, label %lor.lhs.false11, label %if.then17, !dbg !5388

lor.lhs.false11:                                  ; preds = %if.then9
  %__in13 = bitcast %union.anon.11* %.compoundliteral12 to i32*, !dbg !5389
  %12 = load i32, i32* %status, align 4, !dbg !5389
  store i32 %12, i32* %__in13, align 4, !dbg !5389
  %__i14 = bitcast %union.anon.11* %.compoundliteral12 to i32*, !dbg !5389
  %13 = load i32, i32* %__i14, align 4, !dbg !5389, !ctir !600
  %and15 = and i32 %13, 65280, !dbg !5389
  %shr = ashr i32 %and15, 8, !dbg !5389
  %tobool16 = icmp ne i32 %shr, 0, !dbg !5389
  br i1 %tobool16, label %if.then17, label %if.end, !dbg !5390

if.then17:                                        ; preds = %lor.lhs.false11, %if.then9
  %call18 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.172, i64 0, i64 0)) #12, !dbg !5391
  %14 = load i8*, i8** @compress_program, align 8, !dbg !5391
  %call19 = call i8* @quotearg_style(i32 4, i8* %14), !dbg !5391
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call18, i8* %call19), !dbg !5391
  unreachable, !dbg !5391

if.end:                                           ; preds = %lor.lhs.false11
  %15 = load i32, i32* @nprocs, align 4, !dbg !5392
  %dec = add nsw i32 %15, -1, !dbg !5392
  store i32 %dec, i32* @nprocs, align 4, !dbg !5392
  br label %if.end20, !dbg !5393

if.end20:                                         ; preds = %if.end, %lor.lhs.false, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  %16 = load i32, i32* %cpid, align 4, !dbg !5394
  ret i32 %16, !dbg !5395
}

declare dso_local i32 @waitpid(i32, i32*, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @delete_proc(i32 %pid) #4 !dbg !5396 {
entry:
  %retval = alloca i1, align 1
  %pid.addr = alloca i32, align 4
  %test = alloca %struct.tempnode, align 8, !ctir !408
  %node = alloca %struct.tempnode*, align 8, !ctir !407
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !5399, metadata !DIExpression()), !dbg !5400
  call void @llvm.dbg.declare(metadata %struct.tempnode* %test, metadata !5401, metadata !DIExpression()), !dbg !5402
  %0 = load i32, i32* %pid.addr, align 4, !dbg !5403
  %pid1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %test, i32 0, i32 1, !dbg !5404, !ctir !408
  store i32 %0, i32* %pid1, align 8, !dbg !5405, !ctir !413
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !5406, metadata !DIExpression()), !dbg !5407
  %1 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !dbg !5408
  %2 = bitcast %struct.tempnode* %test to i8*, !dbg !5409
  %call = call i8* @hash_delete(%struct.hash_table* %1, i8* %2), !dbg !5410
  %3 = bitcast i8* %call to %struct.tempnode*, !dbg !5410
  store %struct.tempnode* %3, %struct.tempnode** %node, align 8, !dbg !5407
  %4 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !5411
  %tobool = icmp ne %struct.tempnode* %4, null, !dbg !5411
  br i1 %tobool, label %if.end, label %if.then, !dbg !5413

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !5414
  br label %return, !dbg !5414

if.end:                                           ; preds = %entry
  %5 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !5415
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %5, i32 0, i32 2, !dbg !5416, !ctir !408
  store i8 2, i8* %state, align 4, !dbg !5417, !ctir !8
  store i1 true, i1* %retval, align 1, !dbg !5418
  br label %return, !dbg !5418

return:                                           ; preds = %if.end, %if.then
  %6 = load i1, i1* %retval, align 1, !dbg !5419
  ret i1 %6, !dbg !5419
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @compare(%struct.line* %a, %struct.line* %b) #4 !dbg !5420 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.line*, align 8
  %b.addr = alloca %struct.line*, align 8
  %diff = alloca i32, align 4, !ctir !5
  %alen = alloca i64, align 8, !ctir !52
  %blen = alloca i64, align 8, !ctir !52
  store %struct.line* %a, %struct.line** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %a.addr, metadata !5423, metadata !DIExpression()), !dbg !5424
  store %struct.line* %b, %struct.line** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %b.addr, metadata !5425, metadata !DIExpression()), !dbg !5426
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !5427, metadata !DIExpression()), !dbg !5428
  call void @llvm.dbg.declare(metadata i64* %alen, metadata !5429, metadata !DIExpression()), !dbg !5430
  call void @llvm.dbg.declare(metadata i64* %blen, metadata !5431, metadata !DIExpression()), !dbg !5432
  %0 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !5433
  %tobool = icmp ne %struct.keyfield* %0, null, !dbg !5433
  br i1 %tobool, label %if.then, label %if.end6, !dbg !5435

if.then:                                          ; preds = %entry
  %1 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !5436
  %2 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !5438
  %call = call i32 @keycompare(%struct.line* %1, %struct.line* %2), !dbg !5439
  store i32 %call, i32* %diff, align 4, !dbg !5440
  %3 = load i32, i32* %diff, align 4, !dbg !5441
  %tobool1 = icmp ne i32 %3, 0, !dbg !5441
  br i1 %tobool1, label %if.then5, label %lor.lhs.false, !dbg !5443

lor.lhs.false:                                    ; preds = %if.then
  %4 = load i8, i8* @unique, align 1, !dbg !5444
  %tobool2 = trunc i8 %4 to i1, !dbg !5444
  br i1 %tobool2, label %if.then5, label %lor.lhs.false3, !dbg !5445

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load i8, i8* @stable, align 1, !dbg !5446
  %tobool4 = trunc i8 %5 to i1, !dbg !5446
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5447

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = load i32, i32* %diff, align 4, !dbg !5448
  store i32 %6, i32* %retval, align 4, !dbg !5449
  br label %return, !dbg !5449

if.end:                                           ; preds = %lor.lhs.false3
  br label %if.end6, !dbg !5450

if.end6:                                          ; preds = %if.end, %entry
  %7 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !5451
  %length = getelementptr inbounds %struct.line, %struct.line* %7, i32 0, i32 1, !dbg !5452, !ctir !540
  %8 = load i64, i64* %length, align 8, !dbg !5452, !ctir !52
  %sub = sub i64 %8, 1, !dbg !5453
  store i64 %sub, i64* %alen, align 8, !dbg !5454
  %9 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !5455
  %length7 = getelementptr inbounds %struct.line, %struct.line* %9, i32 0, i32 1, !dbg !5456, !ctir !540
  %10 = load i64, i64* %length7, align 8, !dbg !5456, !ctir !52
  %sub8 = sub i64 %10, 1, !dbg !5457
  store i64 %sub8, i64* %blen, align 8, !dbg !5458
  %11 = load i64, i64* %alen, align 8, !dbg !5459
  %cmp = icmp eq i64 %11, 0, !dbg !5461
  br i1 %cmp, label %if.then9, label %if.else, !dbg !5462

if.then9:                                         ; preds = %if.end6
  %12 = load i64, i64* %blen, align 8, !dbg !5463
  %cmp10 = icmp ne i64 %12, 0, !dbg !5463
  %conv = zext i1 %cmp10 to i32, !dbg !5463
  %sub11 = sub nsw i32 0, %conv, !dbg !5464
  store i32 %sub11, i32* %diff, align 4, !dbg !5465
  br label %if.end40, !dbg !5466

if.else:                                          ; preds = %if.end6
  %13 = load i64, i64* %blen, align 8, !dbg !5467
  %cmp12 = icmp eq i64 %13, 0, !dbg !5469
  br i1 %cmp12, label %if.then14, label %if.else15, !dbg !5470

if.then14:                                        ; preds = %if.else
  store i32 1, i32* %diff, align 4, !dbg !5471
  br label %if.end39, !dbg !5472

if.else15:                                        ; preds = %if.else
  %14 = load i8, i8* @hard_LC_COLLATE, align 1, !dbg !5473
  %tobool16 = trunc i8 %14 to i1, !dbg !5473
  br i1 %tobool16, label %if.then17, label %if.else21, !dbg !5475

if.then17:                                        ; preds = %if.else15
  %15 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !5476
  %text = getelementptr inbounds %struct.line, %struct.line* %15, i32 0, i32 0, !dbg !5478, !ctir !540
  %16 = load i8*, i8** %text, align 8, !dbg !5478, !ctir !7
  %17 = load i64, i64* %alen, align 8, !dbg !5479
  %add = add i64 %17, 1, !dbg !5480
  %18 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !5481
  %text18 = getelementptr inbounds %struct.line, %struct.line* %18, i32 0, i32 0, !dbg !5482, !ctir !540
  %19 = load i8*, i8** %text18, align 8, !dbg !5482, !ctir !7
  %20 = load i64, i64* %blen, align 8, !dbg !5483
  %add19 = add i64 %20, 1, !dbg !5484
  %call20 = call i32 @xmemcoll0(i8* %16, i64 %add, i8* %19, i64 %add19), !dbg !5485
  store i32 %call20, i32* %diff, align 4, !dbg !5486
  br label %if.end38, !dbg !5487

if.else21:                                        ; preds = %if.else15
  %21 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !5488
  %text22 = getelementptr inbounds %struct.line, %struct.line* %21, i32 0, i32 0, !dbg !5490, !ctir !540
  %22 = load i8*, i8** %text22, align 8, !dbg !5490, !ctir !7
  %23 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !5491
  %text23 = getelementptr inbounds %struct.line, %struct.line* %23, i32 0, i32 0, !dbg !5492, !ctir !540
  %24 = load i8*, i8** %text23, align 8, !dbg !5492, !ctir !7
  %25 = load i64, i64* %alen, align 8, !dbg !5493
  %26 = load i64, i64* %blen, align 8, !dbg !5493
  %cmp24 = icmp ult i64 %25, %26, !dbg !5493
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !5493

cond.true:                                        ; preds = %if.else21
  %27 = load i64, i64* %alen, align 8, !dbg !5493
  br label %cond.end, !dbg !5493

cond.false:                                       ; preds = %if.else21
  %28 = load i64, i64* %blen, align 8, !dbg !5493
  br label %cond.end, !dbg !5493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %27, %cond.true ], [ %28, %cond.false ], !dbg !5493
  %call26 = call i32 @memcmp(i8* %22, i8* %24, i64 %cond) #14, !dbg !5494
  store i32 %call26, i32* %diff, align 4, !dbg !5495
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5495
  br i1 %tobool27, label %if.end37, label %if.then28, !dbg !5496

if.then28:                                        ; preds = %cond.end
  %29 = load i64, i64* %alen, align 8, !dbg !5497
  %30 = load i64, i64* %blen, align 8, !dbg !5498
  %cmp29 = icmp ult i64 %29, %30, !dbg !5499
  br i1 %cmp29, label %cond.true31, label %cond.false32, !dbg !5497

cond.true31:                                      ; preds = %if.then28
  br label %cond.end35, !dbg !5497

cond.false32:                                     ; preds = %if.then28
  %31 = load i64, i64* %alen, align 8, !dbg !5500
  %32 = load i64, i64* %blen, align 8, !dbg !5501
  %cmp33 = icmp ne i64 %31, %32, !dbg !5502
  %conv34 = zext i1 %cmp33 to i32, !dbg !5502
  br label %cond.end35, !dbg !5497

cond.end35:                                       ; preds = %cond.false32, %cond.true31
  %cond36 = phi i32 [ -1, %cond.true31 ], [ %conv34, %cond.false32 ], !dbg !5497
  store i32 %cond36, i32* %diff, align 4, !dbg !5503
  br label %if.end37, !dbg !5504

if.end37:                                         ; preds = %cond.end35, %cond.end
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then17
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then14
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then9
  %33 = load i8, i8* @reverse, align 1, !dbg !5505
  %tobool41 = trunc i8 %33 to i1, !dbg !5505
  br i1 %tobool41, label %cond.true43, label %cond.false45, !dbg !5505

cond.true43:                                      ; preds = %if.end40
  %34 = load i32, i32* %diff, align 4, !dbg !5506
  %sub44 = sub nsw i32 0, %34, !dbg !5507
  br label %cond.end46, !dbg !5505

cond.false45:                                     ; preds = %if.end40
  %35 = load i32, i32* %diff, align 4, !dbg !5508
  br label %cond.end46, !dbg !5505

cond.end46:                                       ; preds = %cond.false45, %cond.true43
  %cond47 = phi i32 [ %sub44, %cond.true43 ], [ %35, %cond.false45 ], !dbg !5505
  store i32 %cond47, i32* %retval, align 4, !dbg !5509
  br label %return, !dbg !5509

return:                                           ; preds = %cond.end46, %if.then5
  %36 = load i32, i32* %retval, align 4, !dbg !5510
  ret i32 %36, !dbg !5510
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_line(%struct.line* %line, %struct._IO_FILE* %fp, i8* %output_file) #4 !dbg !5511 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %buf = alloca i8*, align 8, !ctir !7
  %n_bytes = alloca i64, align 8, !ctir !52
  %ebuf = alloca i8*, align 8, !ctir !7
  %c = alloca i8*, align 8, !ctir !90
  %wc = alloca i8, align 1, !ctir !8
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !5514, metadata !DIExpression()), !dbg !5515
  store i8* %output_file, i8** %output_file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output_file.addr, metadata !5516, metadata !DIExpression()), !dbg !5517
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !5518, metadata !DIExpression()), !dbg !5519
  %0 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5520
  %text = getelementptr inbounds %struct.line, %struct.line* %0, i32 0, i32 0, !dbg !5521, !ctir !540
  %1 = load i8*, i8** %text, align 8, !dbg !5521, !ctir !7
  store i8* %1, i8** %buf, align 8, !dbg !5519
  call void @llvm.dbg.declare(metadata i64* %n_bytes, metadata !5522, metadata !DIExpression()), !dbg !5523
  %2 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5524
  %length = getelementptr inbounds %struct.line, %struct.line* %2, i32 0, i32 1, !dbg !5525, !ctir !540
  %3 = load i64, i64* %length, align 8, !dbg !5525, !ctir !52
  store i64 %3, i64* %n_bytes, align 8, !dbg !5523
  call void @llvm.dbg.declare(metadata i8** %ebuf, metadata !5526, metadata !DIExpression()), !dbg !5527
  %4 = load i8*, i8** %buf, align 8, !dbg !5528
  %5 = load i64, i64* %n_bytes, align 8, !dbg !5529
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5530, !ctir !8
  store i8* %add.ptr, i8** %ebuf, align 8, !dbg !5527
  %6 = load i8*, i8** %output_file.addr, align 8, !dbg !5531
  %tobool = icmp ne i8* %6, null, !dbg !5531
  br i1 %tobool, label %if.else15, label %land.lhs.true, !dbg !5533

land.lhs.true:                                    ; preds = %entry
  %7 = load i8, i8* @debug, align 1, !dbg !5534
  %tobool1 = trunc i8 %7 to i1, !dbg !5534
  br i1 %tobool1, label %if.then, label %if.else15, !dbg !5535

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %c, metadata !5536, metadata !DIExpression()), !dbg !5538
  %8 = load i8*, i8** %buf, align 8, !dbg !5539
  store i8* %8, i8** %c, align 8, !dbg !5538
  br label %while.cond, !dbg !5540

while.cond:                                       ; preds = %if.end14, %if.then
  %9 = load i8*, i8** %c, align 8, !dbg !5541
  %10 = load i8*, i8** %ebuf, align 8, !dbg !5542
  %cmp = icmp ult i8* %9, %10, !dbg !5543
  br i1 %cmp, label %while.body, label %while.end, !dbg !5540

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %wc, metadata !5544, metadata !DIExpression()), !dbg !5546
  %11 = load i8*, i8** %c, align 8, !dbg !5547
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !5547, !ctir !91
  store i8* %incdec.ptr, i8** %c, align 8, !dbg !5547
  %12 = load i8, i8* %11, align 1, !dbg !5548, !ctir !91
  store i8 %12, i8* %wc, align 1, !dbg !5546
  %13 = load i8, i8* %wc, align 1, !dbg !5549
  %conv = sext i8 %13 to i32, !dbg !5549
  %cmp2 = icmp eq i32 %conv, 9, !dbg !5551
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !5552

if.then4:                                         ; preds = %while.body
  store i8 62, i8* %wc, align 1, !dbg !5553
  br label %if.end8, !dbg !5554

if.else:                                          ; preds = %while.body
  %14 = load i8*, i8** %c, align 8, !dbg !5555
  %15 = load i8*, i8** %ebuf, align 8, !dbg !5557
  %cmp5 = icmp eq i8* %14, %15, !dbg !5558
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !5559

if.then7:                                         ; preds = %if.else
  store i8 10, i8* %wc, align 1, !dbg !5560
  br label %if.end, !dbg !5561

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  %16 = load i8, i8* %wc, align 1, !dbg !5562
  %conv9 = sext i8 %16 to i32, !dbg !5562
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !5562
  %call = call i32 @fputc_unlocked(i32 %conv9, %struct._IO_FILE* %17), !dbg !5562
  %cmp10 = icmp eq i32 %call, -1, !dbg !5564
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !5565

if.then12:                                        ; preds = %if.end8
  %call13 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.164, i64 0, i64 0)) #12, !dbg !5566
  %18 = load i8*, i8** %output_file.addr, align 8, !dbg !5567
  call void @sort_die(i8* %call13, i8* %18) #15, !dbg !5568
  unreachable, !dbg !5568

if.end14:                                         ; preds = %if.end8
  br label %while.cond, !dbg !5540, !llvm.loop !5569

while.end:                                        ; preds = %while.cond
  %19 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5571
  call void @debug_line(%struct.line* %19), !dbg !5572
  br label %if.end23, !dbg !5573

if.else15:                                        ; preds = %land.lhs.true, %entry
  %20 = load i8, i8* @eolchar, align 1, !dbg !5574
  %21 = load i8*, i8** %ebuf, align 8, !dbg !5576
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 -1, !dbg !5576, !ctir !7
  store i8 %20, i8* %arrayidx, align 1, !dbg !5577
  %22 = load i8*, i8** %buf, align 8, !dbg !5578
  %23 = load i64, i64* %n_bytes, align 8, !dbg !5578
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !5578
  %call16 = call i64 @fwrite_unlocked(i8* %22, i64 1, i64 %23, %struct._IO_FILE* %24), !dbg !5578
  %25 = load i64, i64* %n_bytes, align 8, !dbg !5580
  %cmp17 = icmp ne i64 %call16, %25, !dbg !5581
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !5582

if.then19:                                        ; preds = %if.else15
  %call20 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.164, i64 0, i64 0)) #12, !dbg !5583
  %26 = load i8*, i8** %output_file.addr, align 8, !dbg !5584
  call void @sort_die(i8* %call20, i8* %26) #15, !dbg !5585
  unreachable, !dbg !5585

if.end21:                                         ; preds = %if.else15
  %27 = load i8*, i8** %ebuf, align 8, !dbg !5586
  %arrayidx22 = getelementptr inbounds i8, i8* %27, i64 -1, !dbg !5586, !ctir !7
  store i8 0, i8* %arrayidx22, align 1, !dbg !5587
  br label %if.end23

if.end23:                                         ; preds = %if.end21, %while.end
  ret void, !dbg !5588
}

declare dso_local i32 @fputc_unlocked(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @debug_line(%struct.line* %line) #4 !dbg !5589 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key = alloca %struct.keyfield*, align 8, !ctir !522
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5592, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !5594, metadata !DIExpression()), !dbg !5595
  %0 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !5596
  store %struct.keyfield* %0, %struct.keyfield** %key, align 8, !dbg !5595
  br label %do.body, !dbg !5597

do.body:                                          ; preds = %land.end, %entry
  %1 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5598
  %2 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !5599
  call void @debug_key(%struct.line* %1, %struct.keyfield* %2), !dbg !5600
  br label %do.cond, !dbg !5600

do.cond:                                          ; preds = %do.body
  %3 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !5601
  %tobool = icmp ne %struct.keyfield* %3, null, !dbg !5601
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5602

land.rhs:                                         ; preds = %do.cond
  %4 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !5603
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 16, !dbg !5604, !ctir !523
  %5 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !dbg !5604, !ctir !152
  store %struct.keyfield* %5, %struct.keyfield** %key, align 8, !dbg !5605
  %tobool1 = icmp ne %struct.keyfield* %5, null, !dbg !5605
  br i1 %tobool1, label %lor.end5, label %lor.rhs, !dbg !5606

lor.rhs:                                          ; preds = %land.rhs
  %6 = load i8, i8* @unique, align 1, !dbg !5607
  %tobool2 = trunc i8 %6 to i1, !dbg !5607
  br i1 %tobool2, label %lor.end, label %lor.rhs3, !dbg !5608

lor.rhs3:                                         ; preds = %lor.rhs
  %7 = load i8, i8* @stable, align 1, !dbg !5609
  %tobool4 = trunc i8 %7 to i1, !dbg !5609
  br label %lor.end, !dbg !5608

lor.end:                                          ; preds = %lor.rhs3, %lor.rhs
  %8 = phi i1 [ true, %lor.rhs ], [ %tobool4, %lor.rhs3 ]
  %lnot = xor i1 %8, true, !dbg !5610
  br label %lor.end5, !dbg !5606

lor.end5:                                         ; preds = %lor.end, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.end ]
  br label %land.end

land.end:                                         ; preds = %lor.end5, %do.cond
  %10 = phi i1 [ false, %do.cond ], [ %9, %lor.end5 ], !dbg !5611
  br i1 %10, label %do.body, label %do.end, !dbg !5600, !llvm.loop !5612

do.end:                                           ; preds = %land.end
  ret void, !dbg !5614
}

declare dso_local i64 @fwrite_unlocked(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @debug_key(%struct.line* %line, %struct.keyfield* %key) #4 !dbg !5615 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %text = alloca i8*, align 8, !ctir !7
  %beg = alloca i8*, align 8, !ctir !7
  %lim = alloca i8*, align 8, !ctir !7
  %saved = alloca i8, align 1, !ctir !8
  %tighter_lim = alloca i8*, align 8, !ctir !7
  %__x = alloca x86_fp80, align 16, !ctir !557
  %p = alloca i8*, align 8, !ctir !90
  %max_digit = alloca i8, align 1, !ctir !535
  %ch = alloca i8, align 1, !ctir !535
  %offset = alloca i64, align 8, !ctir !52
  %width = alloca i64, align 8, !ctir !52
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5618, metadata !DIExpression()), !dbg !5619
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !5620, metadata !DIExpression()), !dbg !5621
  call void @llvm.dbg.declare(metadata i8** %text, metadata !5622, metadata !DIExpression()), !dbg !5623
  %0 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5624
  %text1 = getelementptr inbounds %struct.line, %struct.line* %0, i32 0, i32 0, !dbg !5625, !ctir !540
  %1 = load i8*, i8** %text1, align 8, !dbg !5625, !ctir !7
  store i8* %1, i8** %text, align 8, !dbg !5623
  call void @llvm.dbg.declare(metadata i8** %beg, metadata !5626, metadata !DIExpression()), !dbg !5627
  %2 = load i8*, i8** %text, align 8, !dbg !5628
  store i8* %2, i8** %beg, align 8, !dbg !5627
  call void @llvm.dbg.declare(metadata i8** %lim, metadata !5629, metadata !DIExpression()), !dbg !5630
  %3 = load i8*, i8** %text, align 8, !dbg !5631
  %4 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5632
  %length = getelementptr inbounds %struct.line, %struct.line* %4, i32 0, i32 1, !dbg !5633, !ctir !540
  %5 = load i64, i64* %length, align 8, !dbg !5633, !ctir !52
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5, !dbg !5634, !ctir !8
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !5635, !ctir !8
  store i8* %add.ptr2, i8** %lim, align 8, !dbg !5630
  %6 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5636
  %tobool = icmp ne %struct.keyfield* %6, null, !dbg !5636
  br i1 %tobool, label %if.then, label %if.end60, !dbg !5638

if.then:                                          ; preds = %entry
  %7 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5639
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %7, i32 0, i32 0, !dbg !5642, !ctir !523
  %8 = load i64, i64* %sword, align 8, !dbg !5642, !ctir !52
  %cmp = icmp ne i64 %8, -1, !dbg !5643
  br i1 %cmp, label %if.then3, label %if.end, !dbg !5644

if.then3:                                         ; preds = %if.then
  %9 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5645
  %10 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5646
  %call = call i8* @begfield(%struct.line* %9, %struct.keyfield* %10), !dbg !5647
  store i8* %call, i8** %beg, align 8, !dbg !5648
  br label %if.end, !dbg !5649

if.end:                                           ; preds = %if.then3, %if.then
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5650
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 2, !dbg !5652, !ctir !523
  %12 = load i64, i64* %eword, align 8, !dbg !5652, !ctir !52
  %cmp4 = icmp ne i64 %12, -1, !dbg !5653
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !5654

if.then5:                                         ; preds = %if.end
  %13 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5655
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5656
  %call6 = call i8* @limfield(%struct.line* %13, %struct.keyfield* %14), !dbg !5657
  store i8* %call6, i8** %lim, align 8, !dbg !5658
  br label %if.end7, !dbg !5659

if.end7:                                          ; preds = %if.then5, %if.end
  %15 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5660
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %15, i32 0, i32 6, !dbg !5662, !ctir !523
  %16 = load i8, i8* %skipsblanks, align 8, !dbg !5662
  %tobool8 = trunc i8 %16 to i1, !dbg !5662, !ctir !162
  br i1 %tobool8, label %land.lhs.true, label %lor.lhs.false, !dbg !5663

land.lhs.true:                                    ; preds = %if.end7
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5664
  %sword9 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 0, !dbg !5665, !ctir !523
  %18 = load i64, i64* %sword9, align 8, !dbg !5665, !ctir !52
  %cmp10 = icmp eq i64 %18, -1, !dbg !5666
  br i1 %cmp10, label %if.then14, label %lor.lhs.false, !dbg !5667

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end7
  %19 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5668
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %19, i32 0, i32 12, !dbg !5669, !ctir !523
  %20 = load i8, i8* %month, align 2, !dbg !5669
  %tobool11 = trunc i8 %20 to i1, !dbg !5669, !ctir !162
  br i1 %tobool11, label %if.then14, label %lor.lhs.false12, !dbg !5670

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %21 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5671
  %call13 = call zeroext i1 @key_numeric(%struct.keyfield* %21), !dbg !5672
  br i1 %call13, label %if.then14, label %if.end59, !dbg !5673

if.then14:                                        ; preds = %lor.lhs.false12, %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata i8* %saved, metadata !5674, metadata !DIExpression()), !dbg !5676
  %22 = load i8*, i8** %lim, align 8, !dbg !5677
  %23 = load i8, i8* %22, align 1, !dbg !5678, !ctir !8
  store i8 %23, i8* %saved, align 1, !dbg !5676
  %24 = load i8*, i8** %lim, align 8, !dbg !5679
  store i8 0, i8* %24, align 1, !dbg !5680, !ctir !8
  br label %while.cond, !dbg !5681

while.cond:                                       ; preds = %while.body, %if.then14
  %25 = load i8*, i8** %beg, align 8, !dbg !5682
  %26 = load i8, i8* %25, align 1, !dbg !5683, !ctir !8
  %call15 = call zeroext i8 @to_uchar(i8 signext %26), !dbg !5684
  %idxprom = zext i8 %call15 to i64, !dbg !5685
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !5685, !ctir !448
  %27 = load i8, i8* %arrayidx, align 1, !dbg !5685
  %tobool16 = trunc i8 %27 to i1, !dbg !5685
  br i1 %tobool16, label %while.body, label %while.end, !dbg !5681

while.body:                                       ; preds = %while.cond
  %28 = load i8*, i8** %beg, align 8, !dbg !5686
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1, !dbg !5686, !ctir !8
  store i8* %incdec.ptr, i8** %beg, align 8, !dbg !5686
  br label %while.cond, !dbg !5681, !llvm.loop !5687

while.end:                                        ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %tighter_lim, metadata !5688, metadata !DIExpression()), !dbg !5689
  %29 = load i8*, i8** %beg, align 8, !dbg !5690
  store i8* %29, i8** %tighter_lim, align 8, !dbg !5689
  %30 = load i8*, i8** %lim, align 8, !dbg !5691
  %31 = load i8*, i8** %beg, align 8, !dbg !5693
  %cmp17 = icmp ult i8* %30, %31, !dbg !5694
  br i1 %cmp17, label %if.then18, label %if.else, !dbg !5695

if.then18:                                        ; preds = %while.end
  %32 = load i8*, i8** %lim, align 8, !dbg !5696
  store i8* %32, i8** %tighter_lim, align 8, !dbg !5697
  br label %if.end58, !dbg !5698

if.else:                                          ; preds = %while.end
  %33 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5699
  %month19 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %33, i32 0, i32 12, !dbg !5701, !ctir !523
  %34 = load i8, i8* %month19, align 2, !dbg !5701
  %tobool20 = trunc i8 %34 to i1, !dbg !5701, !ctir !162
  br i1 %tobool20, label %if.then21, label %if.else23, !dbg !5702

if.then21:                                        ; preds = %if.else
  %35 = load i8*, i8** %beg, align 8, !dbg !5703
  %call22 = call i32 @getmonth(i8* %35, i8** %tighter_lim), !dbg !5704
  br label %if.end57, !dbg !5704

if.else23:                                        ; preds = %if.else
  %36 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5705
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %36, i32 0, i32 10, !dbg !5707, !ctir !523
  %37 = load i8, i8* %general_numeric, align 4, !dbg !5707
  %tobool24 = trunc i8 %37 to i1, !dbg !5707, !ctir !162
  br i1 %tobool24, label %if.then25, label %if.else27, !dbg !5708

if.then25:                                        ; preds = %if.else23
  call void @llvm.dbg.declare(metadata x86_fp80* %__x, metadata !5709, metadata !DIExpression()), !dbg !5711
  %38 = load i8*, i8** %beg, align 8, !dbg !5711
  %call26 = call x86_fp80 @strtold(i8* %38, i8** %tighter_lim) #12, !dbg !5711
  store x86_fp80 %call26, x86_fp80* %__x, align 16, !dbg !5711
  %39 = load x86_fp80, x86_fp80* %__x, align 16, !dbg !5711
  br label %if.end56, !dbg !5712

if.else27:                                        ; preds = %if.else23
  %40 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5713
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %40, i32 0, i32 8, !dbg !5715, !ctir !523
  %41 = load i8, i8* %numeric, align 2, !dbg !5715
  %tobool28 = trunc i8 %41 to i1, !dbg !5715, !ctir !162
  br i1 %tobool28, label %if.then31, label %lor.lhs.false29, !dbg !5716

lor.lhs.false29:                                  ; preds = %if.else27
  %42 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5717
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %42, i32 0, i32 11, !dbg !5718, !ctir !523
  %43 = load i8, i8* %human_numeric, align 1, !dbg !5718
  %tobool30 = trunc i8 %43 to i1, !dbg !5718, !ctir !162
  br i1 %tobool30, label %if.then31, label %if.else54, !dbg !5719

if.then31:                                        ; preds = %lor.lhs.false29, %if.else27
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5720, metadata !DIExpression()), !dbg !5722
  %44 = load i8*, i8** %beg, align 8, !dbg !5723
  %45 = load i8*, i8** %beg, align 8, !dbg !5724
  %46 = load i8*, i8** %lim, align 8, !dbg !5725
  %cmp32 = icmp ult i8* %45, %46, !dbg !5726
  br i1 %cmp32, label %land.rhs, label %land.end, !dbg !5727

land.rhs:                                         ; preds = %if.then31
  %47 = load i8*, i8** %beg, align 8, !dbg !5728
  %48 = load i8, i8* %47, align 1, !dbg !5729, !ctir !8
  %conv = sext i8 %48 to i32, !dbg !5729
  %cmp33 = icmp eq i32 %conv, 45, !dbg !5730
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then31
  %49 = phi i1 [ false, %if.then31 ], [ %cmp33, %land.rhs ], !dbg !5731
  %land.ext = zext i1 %49 to i32, !dbg !5727
  %idx.ext = sext i32 %land.ext to i64, !dbg !5732
  %add.ptr35 = getelementptr inbounds i8, i8* %44, i64 %idx.ext, !dbg !5732, !ctir !8
  store i8* %add.ptr35, i8** %p, align 8, !dbg !5722
  call void @llvm.dbg.declare(metadata i8* %max_digit, metadata !5733, metadata !DIExpression()), !dbg !5734
  %call36 = call zeroext i8 @traverse_raw_number(i8** %p), !dbg !5735
  store i8 %call36, i8* %max_digit, align 1, !dbg !5734
  %50 = load i8, i8* %max_digit, align 1, !dbg !5736
  %conv37 = zext i8 %50 to i32, !dbg !5736
  %cmp38 = icmp sle i32 48, %conv37, !dbg !5738
  br i1 %cmp38, label %if.then40, label %if.end53, !dbg !5739

if.then40:                                        ; preds = %land.end
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !5740, metadata !DIExpression()), !dbg !5742
  %51 = load i8*, i8** %p, align 8, !dbg !5743
  %52 = load i8, i8* %51, align 1, !dbg !5744, !ctir !91
  store i8 %52, i8* %ch, align 1, !dbg !5742
  %53 = load i8*, i8** %p, align 8, !dbg !5745
  %54 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5746
  %human_numeric41 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %54, i32 0, i32 11, !dbg !5747, !ctir !523
  %55 = load i8, i8* %human_numeric41, align 1, !dbg !5747
  %tobool42 = trunc i8 %55 to i1, !dbg !5747, !ctir !162
  br i1 %tobool42, label %land.rhs44, label %land.end49, !dbg !5748

land.rhs44:                                       ; preds = %if.then40
  %56 = load i8, i8* %ch, align 1, !dbg !5749
  %idxprom45 = zext i8 %56 to i64, !dbg !5750
  %arrayidx46 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [108 x i8], [148 x i8] }>* @unit_order to [256 x i8]*), i64 0, i64 %idxprom45, !dbg !5750, !ctir !558
  %57 = load i8, i8* %arrayidx46, align 1, !dbg !5750
  %conv47 = sext i8 %57 to i32, !dbg !5750
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !5748
  br label %land.end49

land.end49:                                       ; preds = %land.rhs44, %if.then40
  %58 = phi i1 [ false, %if.then40 ], [ %tobool48, %land.rhs44 ], !dbg !5751
  %land.ext50 = zext i1 %58 to i32, !dbg !5748
  %idx.ext51 = sext i32 %land.ext50 to i64, !dbg !5752
  %add.ptr52 = getelementptr inbounds i8, i8* %53, i64 %idx.ext51, !dbg !5752, !ctir !8
  store i8* %add.ptr52, i8** %tighter_lim, align 8, !dbg !5753
  br label %if.end53, !dbg !5754

if.end53:                                         ; preds = %land.end49, %land.end
  br label %if.end55, !dbg !5755

if.else54:                                        ; preds = %lor.lhs.false29
  %59 = load i8*, i8** %lim, align 8, !dbg !5756
  store i8* %59, i8** %tighter_lim, align 8, !dbg !5757
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.end53
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then25
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then21
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then18
  %60 = load i8, i8* %saved, align 1, !dbg !5758
  %61 = load i8*, i8** %lim, align 8, !dbg !5759
  store i8 %60, i8* %61, align 1, !dbg !5760, !ctir !8
  %62 = load i8*, i8** %tighter_lim, align 8, !dbg !5761
  store i8* %62, i8** %lim, align 8, !dbg !5762
  br label %if.end59, !dbg !5763

if.end59:                                         ; preds = %if.end58, %lor.lhs.false12
  br label %if.end60, !dbg !5764

if.end60:                                         ; preds = %if.end59, %entry
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !5765, metadata !DIExpression()), !dbg !5766
  %63 = load i8*, i8** %text, align 8, !dbg !5767
  %64 = load i8*, i8** %beg, align 8, !dbg !5768
  %call61 = call i64 @debug_width(i8* %63, i8* %64), !dbg !5769
  store i64 %call61, i64* %offset, align 8, !dbg !5766
  call void @llvm.dbg.declare(metadata i64* %width, metadata !5770, metadata !DIExpression()), !dbg !5771
  %65 = load i8*, i8** %beg, align 8, !dbg !5772
  %66 = load i8*, i8** %lim, align 8, !dbg !5773
  %call62 = call i64 @debug_width(i8* %65, i8* %66), !dbg !5774
  store i64 %call62, i64* %width, align 8, !dbg !5771
  %67 = load i64, i64* %offset, align 8, !dbg !5775
  %68 = load i64, i64* %width, align 8, !dbg !5776
  call void @mark_key(i64 %67, i64 %68), !dbg !5777
  ret void, !dbg !5778
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @begfield(%struct.line* %line, %struct.keyfield* %key) #4 !dbg !5779 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %ptr = alloca i8*, align 8, !ctir !7
  %lim = alloca i8*, align 8, !ctir !7
  %sword = alloca i64, align 8, !ctir !52
  %schar = alloca i64, align 8, !ctir !52
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5782, metadata !DIExpression()), !dbg !5783
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !5784, metadata !DIExpression()), !dbg !5785
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !5786, metadata !DIExpression()), !dbg !5787
  %0 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5788
  %text = getelementptr inbounds %struct.line, %struct.line* %0, i32 0, i32 0, !dbg !5789, !ctir !540
  %1 = load i8*, i8** %text, align 8, !dbg !5789, !ctir !7
  store i8* %1, i8** %ptr, align 8, !dbg !5787
  call void @llvm.dbg.declare(metadata i8** %lim, metadata !5790, metadata !DIExpression()), !dbg !5791
  %2 = load i8*, i8** %ptr, align 8, !dbg !5792
  %3 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5793
  %length = getelementptr inbounds %struct.line, %struct.line* %3, i32 0, i32 1, !dbg !5794, !ctir !540
  %4 = load i64, i64* %length, align 8, !dbg !5794, !ctir !52
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4, !dbg !5795, !ctir !8
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !5796, !ctir !8
  store i8* %add.ptr1, i8** %lim, align 8, !dbg !5791
  call void @llvm.dbg.declare(metadata i64* %sword, metadata !5797, metadata !DIExpression()), !dbg !5798
  %5 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5799
  %sword2 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 0, !dbg !5800, !ctir !523
  %6 = load i64, i64* %sword2, align 8, !dbg !5800, !ctir !52
  store i64 %6, i64* %sword, align 8, !dbg !5798
  call void @llvm.dbg.declare(metadata i64* %schar, metadata !5801, metadata !DIExpression()), !dbg !5802
  %7 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5803
  %schar3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %7, i32 0, i32 1, !dbg !5804, !ctir !523
  %8 = load i64, i64* %schar3, align 8, !dbg !5804, !ctir !52
  store i64 %8, i64* %schar, align 8, !dbg !5802
  %9 = load i32, i32* @tab, align 4, !dbg !5805
  %cmp = icmp ne i32 %9, 128, !dbg !5807
  br i1 %cmp, label %if.then, label %if.else, !dbg !5808

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !5809

while.cond:                                       ; preds = %if.end, %if.then
  %10 = load i8*, i8** %ptr, align 8, !dbg !5810
  %11 = load i8*, i8** %lim, align 8, !dbg !5811
  %cmp4 = icmp ult i8* %10, %11, !dbg !5812
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !5813

land.rhs:                                         ; preds = %while.cond
  %12 = load i64, i64* %sword, align 8, !dbg !5814
  %dec = add i64 %12, -1, !dbg !5814
  store i64 %dec, i64* %sword, align 8, !dbg !5814
  %tobool = icmp ne i64 %12, 0, !dbg !5813
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %13 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !5815
  br i1 %13, label %while.body, label %while.end16, !dbg !5809

while.body:                                       ; preds = %land.end
  br label %while.cond5, !dbg !5816

while.cond5:                                      ; preds = %while.body11, %while.body
  %14 = load i8*, i8** %ptr, align 8, !dbg !5818
  %15 = load i8*, i8** %lim, align 8, !dbg !5819
  %cmp6 = icmp ult i8* %14, %15, !dbg !5820
  br i1 %cmp6, label %land.rhs7, label %land.end10, !dbg !5821

land.rhs7:                                        ; preds = %while.cond5
  %16 = load i8*, i8** %ptr, align 8, !dbg !5822
  %17 = load i8, i8* %16, align 1, !dbg !5823, !ctir !8
  %conv = sext i8 %17 to i32, !dbg !5823
  %18 = load i32, i32* @tab, align 4, !dbg !5824
  %cmp8 = icmp ne i32 %conv, %18, !dbg !5825
  br label %land.end10

land.end10:                                       ; preds = %land.rhs7, %while.cond5
  %19 = phi i1 [ false, %while.cond5 ], [ %cmp8, %land.rhs7 ], !dbg !5826
  br i1 %19, label %while.body11, label %while.end, !dbg !5816

while.body11:                                     ; preds = %land.end10
  %20 = load i8*, i8** %ptr, align 8, !dbg !5827
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1, !dbg !5827, !ctir !8
  store i8* %incdec.ptr, i8** %ptr, align 8, !dbg !5827
  br label %while.cond5, !dbg !5816, !llvm.loop !5828

while.end:                                        ; preds = %land.end10
  %21 = load i8*, i8** %ptr, align 8, !dbg !5830
  %22 = load i8*, i8** %lim, align 8, !dbg !5832
  %cmp12 = icmp ult i8* %21, %22, !dbg !5833
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !5834

if.then14:                                        ; preds = %while.end
  %23 = load i8*, i8** %ptr, align 8, !dbg !5835
  %incdec.ptr15 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !5835, !ctir !8
  store i8* %incdec.ptr15, i8** %ptr, align 8, !dbg !5835
  br label %if.end, !dbg !5835

if.end:                                           ; preds = %if.then14, %while.end
  br label %while.cond, !dbg !5809, !llvm.loop !5836

while.end16:                                      ; preds = %land.end
  br label %if.end48, !dbg !5809

if.else:                                          ; preds = %entry
  br label %while.cond17, !dbg !5838

while.cond17:                                     ; preds = %while.end46, %if.else
  %24 = load i8*, i8** %ptr, align 8, !dbg !5839
  %25 = load i8*, i8** %lim, align 8, !dbg !5840
  %cmp18 = icmp ult i8* %24, %25, !dbg !5841
  br i1 %cmp18, label %land.rhs20, label %land.end23, !dbg !5842

land.rhs20:                                       ; preds = %while.cond17
  %26 = load i64, i64* %sword, align 8, !dbg !5843
  %dec21 = add i64 %26, -1, !dbg !5843
  store i64 %dec21, i64* %sword, align 8, !dbg !5843
  %tobool22 = icmp ne i64 %26, 0, !dbg !5842
  br label %land.end23

land.end23:                                       ; preds = %land.rhs20, %while.cond17
  %27 = phi i1 [ false, %while.cond17 ], [ %tobool22, %land.rhs20 ], !dbg !5815
  br i1 %27, label %while.body24, label %while.end47, !dbg !5838

while.body24:                                     ; preds = %land.end23
  br label %while.cond25, !dbg !5844

while.cond25:                                     ; preds = %while.body32, %while.body24
  %28 = load i8*, i8** %ptr, align 8, !dbg !5846
  %29 = load i8*, i8** %lim, align 8, !dbg !5847
  %cmp26 = icmp ult i8* %28, %29, !dbg !5848
  br i1 %cmp26, label %land.rhs28, label %land.end31, !dbg !5849

land.rhs28:                                       ; preds = %while.cond25
  %30 = load i8*, i8** %ptr, align 8, !dbg !5850
  %31 = load i8, i8* %30, align 1, !dbg !5851, !ctir !8
  %call = call zeroext i8 @to_uchar(i8 signext %31), !dbg !5852
  %idxprom = zext i8 %call to i64, !dbg !5853
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !5853, !ctir !448
  %32 = load i8, i8* %arrayidx, align 1, !dbg !5853
  %tobool29 = trunc i8 %32 to i1, !dbg !5853
  br label %land.end31

land.end31:                                       ; preds = %land.rhs28, %while.cond25
  %33 = phi i1 [ false, %while.cond25 ], [ %tobool29, %land.rhs28 ], !dbg !5854
  br i1 %33, label %while.body32, label %while.end34, !dbg !5844

while.body32:                                     ; preds = %land.end31
  %34 = load i8*, i8** %ptr, align 8, !dbg !5855
  %incdec.ptr33 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !5855, !ctir !8
  store i8* %incdec.ptr33, i8** %ptr, align 8, !dbg !5855
  br label %while.cond25, !dbg !5844, !llvm.loop !5856

while.end34:                                      ; preds = %land.end31
  br label %while.cond35, !dbg !5858

while.cond35:                                     ; preds = %while.body44, %while.end34
  %35 = load i8*, i8** %ptr, align 8, !dbg !5859
  %36 = load i8*, i8** %lim, align 8, !dbg !5860
  %cmp36 = icmp ult i8* %35, %36, !dbg !5861
  br i1 %cmp36, label %land.rhs38, label %land.end43, !dbg !5862

land.rhs38:                                       ; preds = %while.cond35
  %37 = load i8*, i8** %ptr, align 8, !dbg !5863
  %38 = load i8, i8* %37, align 1, !dbg !5864, !ctir !8
  %call39 = call zeroext i8 @to_uchar(i8 signext %38), !dbg !5865
  %idxprom40 = zext i8 %call39 to i64, !dbg !5866
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom40, !dbg !5866, !ctir !448
  %39 = load i8, i8* %arrayidx41, align 1, !dbg !5866
  %tobool42 = trunc i8 %39 to i1, !dbg !5866
  %lnot = xor i1 %tobool42, true, !dbg !5867
  br label %land.end43

land.end43:                                       ; preds = %land.rhs38, %while.cond35
  %40 = phi i1 [ false, %while.cond35 ], [ %lnot, %land.rhs38 ], !dbg !5854
  br i1 %40, label %while.body44, label %while.end46, !dbg !5858

while.body44:                                     ; preds = %land.end43
  %41 = load i8*, i8** %ptr, align 8, !dbg !5868
  %incdec.ptr45 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !5868, !ctir !8
  store i8* %incdec.ptr45, i8** %ptr, align 8, !dbg !5868
  br label %while.cond35, !dbg !5858, !llvm.loop !5869

while.end46:                                      ; preds = %land.end43
  br label %while.cond17, !dbg !5838, !llvm.loop !5871

while.end47:                                      ; preds = %land.end23
  br label %if.end48

if.end48:                                         ; preds = %while.end47, %while.end16
  %42 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5873
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %42, i32 0, i32 6, !dbg !5875, !ctir !523
  %43 = load i8, i8* %skipsblanks, align 8, !dbg !5875
  %tobool49 = trunc i8 %43 to i1, !dbg !5875, !ctir !162
  br i1 %tobool49, label %if.then50, label %if.end64, !dbg !5876

if.then50:                                        ; preds = %if.end48
  br label %while.cond51, !dbg !5877

while.cond51:                                     ; preds = %while.body61, %if.then50
  %44 = load i8*, i8** %ptr, align 8, !dbg !5878
  %45 = load i8*, i8** %lim, align 8, !dbg !5879
  %cmp52 = icmp ult i8* %44, %45, !dbg !5880
  br i1 %cmp52, label %land.rhs54, label %land.end60, !dbg !5881

land.rhs54:                                       ; preds = %while.cond51
  %46 = load i8*, i8** %ptr, align 8, !dbg !5882
  %47 = load i8, i8* %46, align 1, !dbg !5883, !ctir !8
  %call55 = call zeroext i8 @to_uchar(i8 signext %47), !dbg !5884
  %idxprom56 = zext i8 %call55 to i64, !dbg !5885
  %arrayidx57 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom56, !dbg !5885, !ctir !448
  %48 = load i8, i8* %arrayidx57, align 1, !dbg !5885
  %tobool58 = trunc i8 %48 to i1, !dbg !5885
  br label %land.end60

land.end60:                                       ; preds = %land.rhs54, %while.cond51
  %49 = phi i1 [ false, %while.cond51 ], [ %tobool58, %land.rhs54 ], !dbg !5886
  br i1 %49, label %while.body61, label %while.end63, !dbg !5877

while.body61:                                     ; preds = %land.end60
  %50 = load i8*, i8** %ptr, align 8, !dbg !5887
  %incdec.ptr62 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !5887, !ctir !8
  store i8* %incdec.ptr62, i8** %ptr, align 8, !dbg !5887
  br label %while.cond51, !dbg !5877, !llvm.loop !5888

while.end63:                                      ; preds = %land.end60
  br label %if.end64, !dbg !5877

if.end64:                                         ; preds = %while.end63, %if.end48
  %51 = load i8*, i8** %lim, align 8, !dbg !5890
  %52 = load i8*, i8** %ptr, align 8, !dbg !5890
  %53 = load i64, i64* %schar, align 8, !dbg !5890
  %add.ptr65 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !5890, !ctir !8
  %cmp66 = icmp ult i8* %51, %add.ptr65, !dbg !5890
  br i1 %cmp66, label %cond.true, label %cond.false, !dbg !5890

cond.true:                                        ; preds = %if.end64
  %54 = load i8*, i8** %lim, align 8, !dbg !5890
  br label %cond.end, !dbg !5890

cond.false:                                       ; preds = %if.end64
  %55 = load i8*, i8** %ptr, align 8, !dbg !5890
  %56 = load i64, i64* %schar, align 8, !dbg !5890
  %add.ptr68 = getelementptr inbounds i8, i8* %55, i64 %56, !dbg !5890, !ctir !8
  br label %cond.end, !dbg !5890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %54, %cond.true ], [ %add.ptr68, %cond.false ], !dbg !5890
  store i8* %cond, i8** %ptr, align 8, !dbg !5891
  %57 = load i8*, i8** %ptr, align 8, !dbg !5892
  ret i8* %57, !dbg !5893
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @limfield(%struct.line* %line, %struct.keyfield* %key) #4 !dbg !5894 {
entry:
  %line.addr = alloca %struct.line*, align 8
  %key.addr = alloca %struct.keyfield*, align 8
  %ptr = alloca i8*, align 8, !ctir !7
  %lim = alloca i8*, align 8, !ctir !7
  %eword = alloca i64, align 8, !ctir !52
  %echar = alloca i64, align 8, !ctir !52
  store %struct.line* %line, %struct.line** %line.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %line.addr, metadata !5895, metadata !DIExpression()), !dbg !5896
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !5897, metadata !DIExpression()), !dbg !5898
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !5899, metadata !DIExpression()), !dbg !5900
  %0 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5901
  %text = getelementptr inbounds %struct.line, %struct.line* %0, i32 0, i32 0, !dbg !5902, !ctir !540
  %1 = load i8*, i8** %text, align 8, !dbg !5902, !ctir !7
  store i8* %1, i8** %ptr, align 8, !dbg !5900
  call void @llvm.dbg.declare(metadata i8** %lim, metadata !5903, metadata !DIExpression()), !dbg !5904
  %2 = load i8*, i8** %ptr, align 8, !dbg !5905
  %3 = load %struct.line*, %struct.line** %line.addr, align 8, !dbg !5906
  %length = getelementptr inbounds %struct.line, %struct.line* %3, i32 0, i32 1, !dbg !5907, !ctir !540
  %4 = load i64, i64* %length, align 8, !dbg !5907, !ctir !52
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4, !dbg !5908, !ctir !8
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !5909, !ctir !8
  store i8* %add.ptr1, i8** %lim, align 8, !dbg !5904
  call void @llvm.dbg.declare(metadata i64* %eword, metadata !5910, metadata !DIExpression()), !dbg !5911
  %5 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5912
  %eword2 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 2, !dbg !5913, !ctir !523
  %6 = load i64, i64* %eword2, align 8, !dbg !5913, !ctir !52
  store i64 %6, i64* %eword, align 8, !dbg !5911
  call void @llvm.dbg.declare(metadata i64* %echar, metadata !5914, metadata !DIExpression()), !dbg !5915
  %7 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !5916
  %echar3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %7, i32 0, i32 3, !dbg !5917, !ctir !523
  %8 = load i64, i64* %echar3, align 8, !dbg !5917, !ctir !52
  store i64 %8, i64* %echar, align 8, !dbg !5915
  %9 = load i64, i64* %echar, align 8, !dbg !5918
  %cmp = icmp eq i64 %9, 0, !dbg !5920
  br i1 %cmp, label %if.then, label %if.end, !dbg !5921

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %eword, align 8, !dbg !5922
  %inc = add i64 %10, 1, !dbg !5922
  store i64 %inc, i64* %eword, align 8, !dbg !5922
  br label %if.end, !dbg !5923

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, i32* @tab, align 4, !dbg !5924
  %cmp4 = icmp ne i32 %11, 128, !dbg !5926
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !5927

if.then5:                                         ; preds = %if.end
  br label %while.cond, !dbg !5928

while.cond:                                       ; preds = %if.end20, %if.then5
  %12 = load i8*, i8** %ptr, align 8, !dbg !5929
  %13 = load i8*, i8** %lim, align 8, !dbg !5930
  %cmp6 = icmp ult i8* %12, %13, !dbg !5931
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !5932

land.rhs:                                         ; preds = %while.cond
  %14 = load i64, i64* %eword, align 8, !dbg !5933
  %dec = add i64 %14, -1, !dbg !5933
  store i64 %dec, i64* %eword, align 8, !dbg !5933
  %tobool = icmp ne i64 %14, 0, !dbg !5932
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !5934
  br i1 %15, label %while.body, label %while.end21, !dbg !5928

while.body:                                       ; preds = %land.end
  br label %while.cond7, !dbg !5935

while.cond7:                                      ; preds = %while.body13, %while.body
  %16 = load i8*, i8** %ptr, align 8, !dbg !5937
  %17 = load i8*, i8** %lim, align 8, !dbg !5938
  %cmp8 = icmp ult i8* %16, %17, !dbg !5939
  br i1 %cmp8, label %land.rhs9, label %land.end12, !dbg !5940

land.rhs9:                                        ; preds = %while.cond7
  %18 = load i8*, i8** %ptr, align 8, !dbg !5941
  %19 = load i8, i8* %18, align 1, !dbg !5942, !ctir !8
  %conv = sext i8 %19 to i32, !dbg !5942
  %20 = load i32, i32* @tab, align 4, !dbg !5943
  %cmp10 = icmp ne i32 %conv, %20, !dbg !5944
  br label %land.end12

land.end12:                                       ; preds = %land.rhs9, %while.cond7
  %21 = phi i1 [ false, %while.cond7 ], [ %cmp10, %land.rhs9 ], !dbg !5945
  br i1 %21, label %while.body13, label %while.end, !dbg !5935

while.body13:                                     ; preds = %land.end12
  %22 = load i8*, i8** %ptr, align 8, !dbg !5946
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1, !dbg !5946, !ctir !8
  store i8* %incdec.ptr, i8** %ptr, align 8, !dbg !5946
  br label %while.cond7, !dbg !5935, !llvm.loop !5947

while.end:                                        ; preds = %land.end12
  %23 = load i8*, i8** %ptr, align 8, !dbg !5949
  %24 = load i8*, i8** %lim, align 8, !dbg !5951
  %cmp14 = icmp ult i8* %23, %24, !dbg !5952
  br i1 %cmp14, label %land.lhs.true, label %if.end20, !dbg !5953

land.lhs.true:                                    ; preds = %while.end
  %25 = load i64, i64* %eword, align 8, !dbg !5954
  %tobool16 = icmp ne i64 %25, 0, !dbg !5954
  br i1 %tobool16, label %if.then18, label %lor.lhs.false, !dbg !5955

lor.lhs.false:                                    ; preds = %land.lhs.true
  %26 = load i64, i64* %echar, align 8, !dbg !5956
  %tobool17 = icmp ne i64 %26, 0, !dbg !5956
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !5957

if.then18:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %27 = load i8*, i8** %ptr, align 8, !dbg !5958
  %incdec.ptr19 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !5958, !ctir !8
  store i8* %incdec.ptr19, i8** %ptr, align 8, !dbg !5958
  br label %if.end20, !dbg !5958

if.end20:                                         ; preds = %if.then18, %lor.lhs.false, %while.end
  br label %while.cond, !dbg !5928, !llvm.loop !5959

while.end21:                                      ; preds = %land.end
  br label %if.end53, !dbg !5928

if.else:                                          ; preds = %if.end
  br label %while.cond22, !dbg !5961

while.cond22:                                     ; preds = %while.end51, %if.else
  %28 = load i8*, i8** %ptr, align 8, !dbg !5962
  %29 = load i8*, i8** %lim, align 8, !dbg !5963
  %cmp23 = icmp ult i8* %28, %29, !dbg !5964
  br i1 %cmp23, label %land.rhs25, label %land.end28, !dbg !5965

land.rhs25:                                       ; preds = %while.cond22
  %30 = load i64, i64* %eword, align 8, !dbg !5966
  %dec26 = add i64 %30, -1, !dbg !5966
  store i64 %dec26, i64* %eword, align 8, !dbg !5966
  %tobool27 = icmp ne i64 %30, 0, !dbg !5965
  br label %land.end28

land.end28:                                       ; preds = %land.rhs25, %while.cond22
  %31 = phi i1 [ false, %while.cond22 ], [ %tobool27, %land.rhs25 ], !dbg !5934
  br i1 %31, label %while.body29, label %while.end52, !dbg !5961

while.body29:                                     ; preds = %land.end28
  br label %while.cond30, !dbg !5967

while.cond30:                                     ; preds = %while.body37, %while.body29
  %32 = load i8*, i8** %ptr, align 8, !dbg !5969
  %33 = load i8*, i8** %lim, align 8, !dbg !5970
  %cmp31 = icmp ult i8* %32, %33, !dbg !5971
  br i1 %cmp31, label %land.rhs33, label %land.end36, !dbg !5972

land.rhs33:                                       ; preds = %while.cond30
  %34 = load i8*, i8** %ptr, align 8, !dbg !5973
  %35 = load i8, i8* %34, align 1, !dbg !5974, !ctir !8
  %call = call zeroext i8 @to_uchar(i8 signext %35), !dbg !5975
  %idxprom = zext i8 %call to i64, !dbg !5976
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !5976, !ctir !448
  %36 = load i8, i8* %arrayidx, align 1, !dbg !5976
  %tobool34 = trunc i8 %36 to i1, !dbg !5976
  br label %land.end36

land.end36:                                       ; preds = %land.rhs33, %while.cond30
  %37 = phi i1 [ false, %while.cond30 ], [ %tobool34, %land.rhs33 ], !dbg !5977
  br i1 %37, label %while.body37, label %while.end39, !dbg !5967

while.body37:                                     ; preds = %land.end36
  %38 = load i8*, i8** %ptr, align 8, !dbg !5978
  %incdec.ptr38 = getelementptr inbounds i8, i8* %38, i32 1, !dbg !5978, !ctir !8
  store i8* %incdec.ptr38, i8** %ptr, align 8, !dbg !5978
  br label %while.cond30, !dbg !5967, !llvm.loop !5979

while.end39:                                      ; preds = %land.end36
  br label %while.cond40, !dbg !5981

while.cond40:                                     ; preds = %while.body49, %while.end39
  %39 = load i8*, i8** %ptr, align 8, !dbg !5982
  %40 = load i8*, i8** %lim, align 8, !dbg !5983
  %cmp41 = icmp ult i8* %39, %40, !dbg !5984
  br i1 %cmp41, label %land.rhs43, label %land.end48, !dbg !5985

land.rhs43:                                       ; preds = %while.cond40
  %41 = load i8*, i8** %ptr, align 8, !dbg !5986
  %42 = load i8, i8* %41, align 1, !dbg !5987, !ctir !8
  %call44 = call zeroext i8 @to_uchar(i8 signext %42), !dbg !5988
  %idxprom45 = zext i8 %call44 to i64, !dbg !5989
  %arrayidx46 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom45, !dbg !5989, !ctir !448
  %43 = load i8, i8* %arrayidx46, align 1, !dbg !5989
  %tobool47 = trunc i8 %43 to i1, !dbg !5989
  %lnot = xor i1 %tobool47, true, !dbg !5990
  br label %land.end48

land.end48:                                       ; preds = %land.rhs43, %while.cond40
  %44 = phi i1 [ false, %while.cond40 ], [ %lnot, %land.rhs43 ], !dbg !5977
  br i1 %44, label %while.body49, label %while.end51, !dbg !5981

while.body49:                                     ; preds = %land.end48
  %45 = load i8*, i8** %ptr, align 8, !dbg !5991
  %incdec.ptr50 = getelementptr inbounds i8, i8* %45, i32 1, !dbg !5991, !ctir !8
  store i8* %incdec.ptr50, i8** %ptr, align 8, !dbg !5991
  br label %while.cond40, !dbg !5981, !llvm.loop !5992

while.end51:                                      ; preds = %land.end48
  br label %while.cond22, !dbg !5961, !llvm.loop !5994

while.end52:                                      ; preds = %land.end28
  br label %if.end53

if.end53:                                         ; preds = %while.end52, %while.end21
  %46 = load i64, i64* %echar, align 8, !dbg !5996
  %cmp54 = icmp ne i64 %46, 0, !dbg !5998
  br i1 %cmp54, label %if.then56, label %if.end77, !dbg !5999

if.then56:                                        ; preds = %if.end53
  %47 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !6000
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %47, i32 0, i32 7, !dbg !6003, !ctir !523
  %48 = load i8, i8* %skipeblanks, align 1, !dbg !6003
  %tobool57 = trunc i8 %48 to i1, !dbg !6003, !ctir !162
  br i1 %tobool57, label %if.then58, label %if.end72, !dbg !6004

if.then58:                                        ; preds = %if.then56
  br label %while.cond59, !dbg !6005

while.cond59:                                     ; preds = %while.body69, %if.then58
  %49 = load i8*, i8** %ptr, align 8, !dbg !6006
  %50 = load i8*, i8** %lim, align 8, !dbg !6007
  %cmp60 = icmp ult i8* %49, %50, !dbg !6008
  br i1 %cmp60, label %land.rhs62, label %land.end68, !dbg !6009

land.rhs62:                                       ; preds = %while.cond59
  %51 = load i8*, i8** %ptr, align 8, !dbg !6010
  %52 = load i8, i8* %51, align 1, !dbg !6011, !ctir !8
  %call63 = call zeroext i8 @to_uchar(i8 signext %52), !dbg !6012
  %idxprom64 = zext i8 %call63 to i64, !dbg !6013
  %arrayidx65 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom64, !dbg !6013, !ctir !448
  %53 = load i8, i8* %arrayidx65, align 1, !dbg !6013
  %tobool66 = trunc i8 %53 to i1, !dbg !6013
  br label %land.end68

land.end68:                                       ; preds = %land.rhs62, %while.cond59
  %54 = phi i1 [ false, %while.cond59 ], [ %tobool66, %land.rhs62 ], !dbg !6014
  br i1 %54, label %while.body69, label %while.end71, !dbg !6005

while.body69:                                     ; preds = %land.end68
  %55 = load i8*, i8** %ptr, align 8, !dbg !6015
  %incdec.ptr70 = getelementptr inbounds i8, i8* %55, i32 1, !dbg !6015, !ctir !8
  store i8* %incdec.ptr70, i8** %ptr, align 8, !dbg !6015
  br label %while.cond59, !dbg !6005, !llvm.loop !6016

while.end71:                                      ; preds = %land.end68
  br label %if.end72, !dbg !6005

if.end72:                                         ; preds = %while.end71, %if.then56
  %56 = load i8*, i8** %lim, align 8, !dbg !6018
  %57 = load i8*, i8** %ptr, align 8, !dbg !6018
  %58 = load i64, i64* %echar, align 8, !dbg !6018
  %add.ptr73 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !6018, !ctir !8
  %cmp74 = icmp ult i8* %56, %add.ptr73, !dbg !6018
  br i1 %cmp74, label %cond.true, label %cond.false, !dbg !6018

cond.true:                                        ; preds = %if.end72
  %59 = load i8*, i8** %lim, align 8, !dbg !6018
  br label %cond.end, !dbg !6018

cond.false:                                       ; preds = %if.end72
  %60 = load i8*, i8** %ptr, align 8, !dbg !6018
  %61 = load i64, i64* %echar, align 8, !dbg !6018
  %add.ptr76 = getelementptr inbounds i8, i8* %60, i64 %61, !dbg !6018, !ctir !8
  br label %cond.end, !dbg !6018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %59, %cond.true ], [ %add.ptr76, %cond.false ], !dbg !6018
  store i8* %cond, i8** %ptr, align 8, !dbg !6019
  br label %if.end77, !dbg !6020

if.end77:                                         ; preds = %cond.end, %if.end53
  %62 = load i8*, i8** %ptr, align 8, !dbg !6021
  ret i8* %62, !dbg !6022
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @key_numeric(%struct.keyfield* %key) #4 !dbg !6023 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !6024, metadata !DIExpression()), !dbg !6025
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !6026
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 8, !dbg !6027, !ctir !523
  %1 = load i8, i8* %numeric, align 2, !dbg !6027
  %tobool = trunc i8 %1 to i1, !dbg !6027, !ctir !162
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !6028

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !6029
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 10, !dbg !6030, !ctir !523
  %3 = load i8, i8* %general_numeric, align 4, !dbg !6030
  %tobool1 = trunc i8 %3 to i1, !dbg !6030, !ctir !162
  br i1 %tobool1, label %lor.end, label %lor.rhs, !dbg !6031

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !6032
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %4, i32 0, i32 11, !dbg !6033, !ctir !523
  %5 = load i8, i8* %human_numeric, align 1, !dbg !6033
  %tobool2 = trunc i8 %5 to i1, !dbg !6033, !ctir !162
  br label %lor.end, !dbg !6031

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool2, %lor.rhs ]
  ret i1 %6, !dbg !6034
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getmonth(i8* %month, i8** %ea) #4 !dbg !6035 {
entry:
  %retval = alloca i32, align 4
  %month.addr = alloca i8*, align 8
  %ea.addr = alloca i8**, align 8
  %lo = alloca i64, align 8, !ctir !52
  %hi = alloca i64, align 8, !ctir !52
  %ix = alloca i64, align 8, !ctir !52
  %m = alloca i8*, align 8, !ctir !90
  %n = alloca i8*, align 8, !ctir !90
  store i8* %month, i8** %month.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %month.addr, metadata !6038, metadata !DIExpression()), !dbg !6039
  store i8** %ea, i8*** %ea.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %ea.addr, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !6042, metadata !DIExpression()), !dbg !6043
  store i64 0, i64* %lo, align 8, !dbg !6043
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !6044, metadata !DIExpression()), !dbg !6045
  store i64 12, i64* %hi, align 8, !dbg !6045
  br label %while.cond, !dbg !6046

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %month.addr, align 8, !dbg !6047
  %1 = load i8, i8* %0, align 1, !dbg !6048, !ctir !91
  %call = call zeroext i8 @to_uchar(i8 signext %1), !dbg !6049
  %idxprom = zext i8 %call to i64, !dbg !6050
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !6050, !ctir !448
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6050
  %tobool = trunc i8 %2 to i1, !dbg !6050
  br i1 %tobool, label %while.body, label %while.end, !dbg !6046

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %month.addr, align 8, !dbg !6051
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6051, !ctir !91
  store i8* %incdec.ptr, i8** %month.addr, align 8, !dbg !6051
  br label %while.cond, !dbg !6046, !llvm.loop !6052

while.end:                                        ; preds = %while.cond
  br label %do.body, !dbg !6053

do.body:                                          ; preds = %do.cond, %while.end
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !6054, metadata !DIExpression()), !dbg !6056
  %4 = load i64, i64* %lo, align 8, !dbg !6057
  %5 = load i64, i64* %hi, align 8, !dbg !6058
  %add = add i64 %4, %5, !dbg !6059
  %div = udiv i64 %add, 2, !dbg !6060
  store i64 %div, i64* %ix, align 8, !dbg !6056
  call void @llvm.dbg.declare(metadata i8** %m, metadata !6061, metadata !DIExpression()), !dbg !6062
  %6 = load i8*, i8** %month.addr, align 8, !dbg !6063
  store i8* %6, i8** %m, align 8, !dbg !6062
  call void @llvm.dbg.declare(metadata i8** %n, metadata !6064, metadata !DIExpression()), !dbg !6065
  %7 = load i64, i64* %ix, align 8, !dbg !6066
  %arrayidx1 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %7, !dbg !6067, !ctir !454
  %name = getelementptr inbounds %struct.month, %struct.month* %arrayidx1, i32 0, i32 0, !dbg !6068, !ctir !455
  %8 = load i8*, i8** %name, align 16, !dbg !6068, !ctir !90
  store i8* %8, i8** %n, align 8, !dbg !6065
  br label %for.cond, !dbg !6069

for.cond:                                         ; preds = %for.inc, %do.body
  %9 = load i8*, i8** %n, align 8, !dbg !6070
  %10 = load i8, i8* %9, align 1, !dbg !6075, !ctir !91
  %tobool2 = icmp ne i8 %10, 0, !dbg !6075
  br i1 %tobool2, label %if.end6, label %if.then, !dbg !6076

if.then:                                          ; preds = %for.cond
  %11 = load i8**, i8*** %ea.addr, align 8, !dbg !6077
  %tobool3 = icmp ne i8** %11, null, !dbg !6077
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !6080

if.then4:                                         ; preds = %if.then
  %12 = load i8*, i8** %m, align 8, !dbg !6081
  %13 = load i8**, i8*** %ea.addr, align 8, !dbg !6082
  store i8* %12, i8** %13, align 8, !dbg !6083, !ctir !7
  br label %if.end, !dbg !6084

if.end:                                           ; preds = %if.then4, %if.then
  %14 = load i64, i64* %ix, align 8, !dbg !6085
  %arrayidx5 = getelementptr inbounds [12 x %struct.month], [12 x %struct.month]* @monthtab, i64 0, i64 %14, !dbg !6086, !ctir !454
  %val = getelementptr inbounds %struct.month, %struct.month* %arrayidx5, i32 0, i32 1, !dbg !6087, !ctir !455
  %15 = load i32, i32* %val, align 8, !dbg !6087, !ctir !5
  store i32 %15, i32* %retval, align 4, !dbg !6088
  br label %return, !dbg !6088

if.end6:                                          ; preds = %for.cond
  %16 = load i8*, i8** %m, align 8, !dbg !6089
  %17 = load i8, i8* %16, align 1, !dbg !6091, !ctir !91
  %call7 = call zeroext i8 @to_uchar(i8 signext %17), !dbg !6092
  %idxprom8 = zext i8 %call7 to i64, !dbg !6093
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom8, !dbg !6093, !ctir !453
  %18 = load i8, i8* %arrayidx9, align 1, !dbg !6093
  %call10 = call zeroext i8 @to_uchar(i8 signext %18), !dbg !6094
  %conv = zext i8 %call10 to i32, !dbg !6094
  %19 = load i8*, i8** %n, align 8, !dbg !6095
  %20 = load i8, i8* %19, align 1, !dbg !6096, !ctir !91
  %call11 = call zeroext i8 @to_uchar(i8 signext %20), !dbg !6097
  %conv12 = zext i8 %call11 to i32, !dbg !6097
  %cmp = icmp slt i32 %conv, %conv12, !dbg !6098
  br i1 %cmp, label %if.then14, label %if.else, !dbg !6099

if.then14:                                        ; preds = %if.end6
  %21 = load i64, i64* %ix, align 8, !dbg !6100
  store i64 %21, i64* %hi, align 8, !dbg !6102
  br label %for.end, !dbg !6103

if.else:                                          ; preds = %if.end6
  %22 = load i8*, i8** %m, align 8, !dbg !6104
  %23 = load i8, i8* %22, align 1, !dbg !6106, !ctir !91
  %call15 = call zeroext i8 @to_uchar(i8 signext %23), !dbg !6107
  %idxprom16 = zext i8 %call15 to i64, !dbg !6108
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* @fold_toupper, i64 0, i64 %idxprom16, !dbg !6108, !ctir !453
  %24 = load i8, i8* %arrayidx17, align 1, !dbg !6108
  %call18 = call zeroext i8 @to_uchar(i8 signext %24), !dbg !6109
  %conv19 = zext i8 %call18 to i32, !dbg !6109
  %25 = load i8*, i8** %n, align 8, !dbg !6110
  %26 = load i8, i8* %25, align 1, !dbg !6111, !ctir !91
  %call20 = call zeroext i8 @to_uchar(i8 signext %26), !dbg !6112
  %conv21 = zext i8 %call20 to i32, !dbg !6112
  %cmp22 = icmp sgt i32 %conv19, %conv21, !dbg !6113
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !6114

if.then24:                                        ; preds = %if.else
  %27 = load i64, i64* %ix, align 8, !dbg !6115
  %add25 = add i64 %27, 1, !dbg !6117
  store i64 %add25, i64* %lo, align 8, !dbg !6118
  br label %for.end, !dbg !6119

if.end26:                                         ; preds = %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  br label %for.inc, !dbg !6120

for.inc:                                          ; preds = %if.end27
  %28 = load i8*, i8** %m, align 8, !dbg !6121
  %incdec.ptr28 = getelementptr inbounds i8, i8* %28, i32 1, !dbg !6121, !ctir !91
  store i8* %incdec.ptr28, i8** %m, align 8, !dbg !6121
  %29 = load i8*, i8** %n, align 8, !dbg !6122
  %incdec.ptr29 = getelementptr inbounds i8, i8* %29, i32 1, !dbg !6122, !ctir !91
  store i8* %incdec.ptr29, i8** %n, align 8, !dbg !6122
  br label %for.cond, !dbg !6123, !llvm.loop !6124

for.end:                                          ; preds = %if.then24, %if.then14
  br label %do.cond, !dbg !6127

do.cond:                                          ; preds = %for.end
  %30 = load i64, i64* %lo, align 8, !dbg !6128
  %31 = load i64, i64* %hi, align 8, !dbg !6129
  %cmp30 = icmp ult i64 %30, %31, !dbg !6130
  br i1 %cmp30, label %do.body, label %do.end, !dbg !6127, !llvm.loop !6131

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, align 4, !dbg !6133
  br label %return, !dbg !6133

return:                                           ; preds = %do.end, %if.end
  %32 = load i32, i32* %retval, align 4, !dbg !6134
  ret i32 %32, !dbg !6134
}

; Function Attrs: nounwind
declare dso_local x86_fp80 @strtold(i8*, i8**) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @traverse_raw_number(i8** %number) #4 !dbg !6135 {
entry:
  %retval = alloca i8, align 1
  %number.addr = alloca i8**, align 8
  %p = alloca i8*, align 8, !ctir !90
  %ch = alloca i8, align 1, !ctir !535
  %max_digit = alloca i8, align 1, !ctir !535
  %ends_with_thousands_sep = alloca i8, align 1, !ctir !162
  store i8** %number, i8*** %number.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %number.addr, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6140, metadata !DIExpression()), !dbg !6141
  %0 = load i8**, i8*** %number.addr, align 8, !dbg !6142
  %1 = load i8*, i8** %0, align 8, !dbg !6143, !ctir !90
  store i8* %1, i8** %p, align 8, !dbg !6141
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !6144, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.declare(metadata i8* %max_digit, metadata !6146, metadata !DIExpression()), !dbg !6147
  store i8 0, i8* %max_digit, align 1, !dbg !6147
  call void @llvm.dbg.declare(metadata i8* %ends_with_thousands_sep, metadata !6148, metadata !DIExpression()), !dbg !6149
  store i8 0, i8* %ends_with_thousands_sep, align 1, !dbg !6149
  br label %while.cond, !dbg !6150

while.cond:                                       ; preds = %if.end11, %entry
  %2 = load i8*, i8** %p, align 8, !dbg !6151
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !6151, !ctir !91
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6151
  %3 = load i8, i8* %2, align 1, !dbg !6151, !ctir !91
  store i8 %3, i8* %ch, align 1, !dbg !6151
  %conv = zext i8 %3 to i32, !dbg !6151
  %sub = sub i32 %conv, 48, !dbg !6151
  %cmp = icmp ule i32 %sub, 9, !dbg !6151
  br i1 %cmp, label %while.body, label %while.end, !dbg !6150

while.body:                                       ; preds = %while.cond
  %4 = load i8, i8* %max_digit, align 1, !dbg !6152
  %conv2 = zext i8 %4 to i32, !dbg !6152
  %5 = load i8, i8* %ch, align 1, !dbg !6155
  %conv3 = zext i8 %5 to i32, !dbg !6155
  %cmp4 = icmp slt i32 %conv2, %conv3, !dbg !6156
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6157

if.then:                                          ; preds = %while.body
  %6 = load i8, i8* %ch, align 1, !dbg !6158
  store i8 %6, i8* %max_digit, align 1, !dbg !6159
  br label %if.end, !dbg !6160

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8*, i8** %p, align 8, !dbg !6161
  %8 = load i8, i8* %7, align 1, !dbg !6162, !ctir !91
  %conv6 = sext i8 %8 to i32, !dbg !6162
  %9 = load i32, i32* @thousands_sep, align 4, !dbg !6163
  %cmp7 = icmp eq i32 %conv6, %9, !dbg !6164
  %frombool = zext i1 %cmp7 to i8, !dbg !6165
  store i8 %frombool, i8* %ends_with_thousands_sep, align 1, !dbg !6165
  %10 = load i8, i8* %ends_with_thousands_sep, align 1, !dbg !6166
  %tobool = trunc i8 %10 to i1, !dbg !6166
  br i1 %tobool, label %if.then9, label %if.end11, !dbg !6168

if.then9:                                         ; preds = %if.end
  %11 = load i8*, i8** %p, align 8, !dbg !6169
  %incdec.ptr10 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !6169, !ctir !91
  store i8* %incdec.ptr10, i8** %p, align 8, !dbg !6169
  br label %if.end11, !dbg !6169

if.end11:                                         ; preds = %if.then9, %if.end
  br label %while.cond, !dbg !6150, !llvm.loop !6170

while.end:                                        ; preds = %while.cond
  %12 = load i8, i8* %ends_with_thousands_sep, align 1, !dbg !6172
  %tobool12 = trunc i8 %12 to i1, !dbg !6172
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !6174

if.then13:                                        ; preds = %while.end
  %13 = load i8*, i8** %p, align 8, !dbg !6175
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 -2, !dbg !6177, !ctir !91
  %14 = load i8**, i8*** %number.addr, align 8, !dbg !6178
  store i8* %add.ptr, i8** %14, align 8, !dbg !6179, !ctir !90
  %15 = load i8, i8* %max_digit, align 1, !dbg !6180
  store i8 %15, i8* %retval, align 1, !dbg !6181
  br label %return, !dbg !6181

if.end14:                                         ; preds = %while.end
  %16 = load i8, i8* %ch, align 1, !dbg !6182
  %conv15 = zext i8 %16 to i32, !dbg !6182
  %17 = load i32, i32* @decimal_point, align 4, !dbg !6184
  %cmp16 = icmp eq i32 %conv15, %17, !dbg !6185
  br i1 %cmp16, label %if.then18, label %if.end33, !dbg !6186

if.then18:                                        ; preds = %if.end14
  br label %while.cond19, !dbg !6187

while.cond19:                                     ; preds = %if.end31, %if.then18
  %18 = load i8*, i8** %p, align 8, !dbg !6188
  %incdec.ptr20 = getelementptr inbounds i8, i8* %18, i32 1, !dbg !6188, !ctir !91
  store i8* %incdec.ptr20, i8** %p, align 8, !dbg !6188
  %19 = load i8, i8* %18, align 1, !dbg !6188, !ctir !91
  store i8 %19, i8* %ch, align 1, !dbg !6188
  %conv21 = zext i8 %19 to i32, !dbg !6188
  %sub22 = sub i32 %conv21, 48, !dbg !6188
  %cmp23 = icmp ule i32 %sub22, 9, !dbg !6188
  br i1 %cmp23, label %while.body25, label %while.end32, !dbg !6187

while.body25:                                     ; preds = %while.cond19
  %20 = load i8, i8* %max_digit, align 1, !dbg !6189
  %conv26 = zext i8 %20 to i32, !dbg !6189
  %21 = load i8, i8* %ch, align 1, !dbg !6191
  %conv27 = zext i8 %21 to i32, !dbg !6191
  %cmp28 = icmp slt i32 %conv26, %conv27, !dbg !6192
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !6193

if.then30:                                        ; preds = %while.body25
  %22 = load i8, i8* %ch, align 1, !dbg !6194
  store i8 %22, i8* %max_digit, align 1, !dbg !6195
  br label %if.end31, !dbg !6196

if.end31:                                         ; preds = %if.then30, %while.body25
  br label %while.cond19, !dbg !6187, !llvm.loop !6197

while.end32:                                      ; preds = %while.cond19
  br label %if.end33, !dbg !6187

if.end33:                                         ; preds = %while.end32, %if.end14
  %23 = load i8*, i8** %p, align 8, !dbg !6199
  %add.ptr34 = getelementptr inbounds i8, i8* %23, i64 -1, !dbg !6200, !ctir !91
  %24 = load i8**, i8*** %number.addr, align 8, !dbg !6201
  store i8* %add.ptr34, i8** %24, align 8, !dbg !6202, !ctir !90
  %25 = load i8, i8* %max_digit, align 1, !dbg !6203
  store i8 %25, i8* %retval, align 1, !dbg !6204
  br label %return, !dbg !6204

return:                                           ; preds = %if.end33, %if.then13
  %26 = load i8, i8* %retval, align 1, !dbg !6205
  ret i8 %26, !dbg !6205
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @debug_width(i8* %text, i8* %lim) #4 !dbg !6206 {
entry:
  %text.addr = alloca i8*, align 8
  %lim.addr = alloca i8*, align 8
  %width = alloca i64, align 8, !ctir !52
  store i8* %text, i8** %text.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %text.addr, metadata !6209, metadata !DIExpression()), !dbg !6210
  store i8* %lim, i8** %lim.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lim.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  call void @llvm.dbg.declare(metadata i64* %width, metadata !6213, metadata !DIExpression()), !dbg !6214
  %0 = load i8*, i8** %text.addr, align 8, !dbg !6215
  %1 = load i8*, i8** %lim.addr, align 8, !dbg !6216
  %2 = load i8*, i8** %text.addr, align 8, !dbg !6217
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64, !dbg !6218
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64, !dbg !6218
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6218
  %call = call i32 @mbsnwidth(i8* %0, i64 %sub.ptr.sub, i32 0), !dbg !6219
  %conv = sext i32 %call to i64, !dbg !6219
  store i64 %conv, i64* %width, align 8, !dbg !6214
  br label %while.cond, !dbg !6220

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %text.addr, align 8, !dbg !6221
  %4 = load i8*, i8** %lim.addr, align 8, !dbg !6222
  %cmp = icmp ult i8* %3, %4, !dbg !6223
  br i1 %cmp, label %while.body, label %while.end, !dbg !6220

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %text.addr, align 8, !dbg !6224
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !6224, !ctir !91
  store i8* %incdec.ptr, i8** %text.addr, align 8, !dbg !6224
  %6 = load i8, i8* %5, align 1, !dbg !6225, !ctir !91
  %conv2 = sext i8 %6 to i32, !dbg !6225
  %cmp3 = icmp eq i32 %conv2, 9, !dbg !6226
  %conv4 = zext i1 %cmp3 to i32, !dbg !6226
  %conv5 = sext i32 %conv4 to i64, !dbg !6227
  %7 = load i64, i64* %width, align 8, !dbg !6228
  %add = add i64 %7, %conv5, !dbg !6228
  store i64 %add, i64* %width, align 8, !dbg !6228
  br label %while.cond, !dbg !6220, !llvm.loop !6229

while.end:                                        ; preds = %while.cond
  %8 = load i64, i64* %width, align 8, !dbg !6231
  ret i64 %8, !dbg !6232
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mark_key(i64 %offset, i64 %width) #4 !dbg !6233 {
entry:
  %offset.addr = alloca i64, align 8
  %width.addr = alloca i64, align 8
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  store i64 %width, i64* %width.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %width.addr, metadata !6238, metadata !DIExpression()), !dbg !6239
  br label %while.cond, !dbg !6240

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %offset.addr, align 8, !dbg !6241
  %dec = add i64 %0, -1, !dbg !6241
  store i64 %dec, i64* %offset.addr, align 8, !dbg !6241
  %tobool = icmp ne i64 %0, 0, !dbg !6240
  br i1 %tobool, label %while.body, label %while.end, !dbg !6240

while.body:                                       ; preds = %while.cond
  %call = call i32 @putchar_unlocked(i32 32), !dbg !6242
  br label %while.cond, !dbg !6240, !llvm.loop !6243

while.end:                                        ; preds = %while.cond
  %1 = load i64, i64* %width.addr, align 8, !dbg !6244
  %tobool1 = icmp ne i64 %1, 0, !dbg !6244
  br i1 %tobool1, label %if.else, label %if.then, !dbg !6246

if.then:                                          ; preds = %while.end
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.165, i64 0, i64 0)) #12, !dbg !6247
  %call3 = call i32 (i8*, ...) @printf(i8* %call2), !dbg !6248
  br label %if.end, !dbg !6248

if.else:                                          ; preds = %while.end
  br label %do.body, !dbg !6249

do.body:                                          ; preds = %do.cond, %if.else
  %call4 = call i32 @putchar_unlocked(i32 95), !dbg !6251
  br label %do.cond, !dbg !6251

do.cond:                                          ; preds = %do.body
  %2 = load i64, i64* %width.addr, align 8, !dbg !6252
  %dec5 = add i64 %2, -1, !dbg !6252
  store i64 %dec5, i64* %width.addr, align 8, !dbg !6252
  %tobool6 = icmp ne i64 %dec5, 0, !dbg !6251
  br i1 %tobool6, label %do.body, label %do.end, !dbg !6251, !llvm.loop !6253

do.end:                                           ; preds = %do.cond
  %call7 = call i32 @putchar_unlocked(i32 10), !dbg !6255
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  ret void, !dbg !6256
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @keycompare(%struct.line* %a, %struct.line* %b) #4 !dbg !6257 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.line*, align 8
  %b.addr = alloca %struct.line*, align 8
  %key = alloca %struct.keyfield*, align 8, !ctir !152
  %texta = alloca i8*, align 8, !ctir !7
  %textb = alloca i8*, align 8, !ctir !7
  %lima = alloca i8*, align 8, !ctir !7
  %limb = alloca i8*, align 8, !ctir !7
  %diff = alloca i32, align 4, !ctir !5
  %translate = alloca i8*, align 8, !ctir !90
  %ignore = alloca i8*, align 8, !ctir !160
  %lena = alloca i64, align 8, !ctir !52
  %lenb = alloca i64, align 8, !ctir !52
  %ta = alloca i8*, align 8, !ctir !7
  %tb = alloca i8*, align 8, !ctir !7
  %tlena = alloca i64, align 8, !ctir !52
  %tlenb = alloca i64, align 8, !ctir !52
  %enda = alloca i8, align 1, !ctir !8
  %endb = alloca i8, align 1, !ctir !8
  %allocated = alloca i8*, align 8, !ctir !47
  %stackbuf = alloca [4000 x i8], align 16, !ctir !554
  %i = alloca i64, align 8, !ctir !52
  %size = alloca i64, align 8, !ctir !52
  store %struct.line* %a, %struct.line** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %a.addr, metadata !6258, metadata !DIExpression()), !dbg !6259
  store %struct.line* %b, %struct.line** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %b.addr, metadata !6260, metadata !DIExpression()), !dbg !6261
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !6262, metadata !DIExpression()), !dbg !6263
  %0 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !6264
  store %struct.keyfield* %0, %struct.keyfield** %key, align 8, !dbg !6263
  call void @llvm.dbg.declare(metadata i8** %texta, metadata !6265, metadata !DIExpression()), !dbg !6266
  %1 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6267
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %1, i32 0, i32 2, !dbg !6268, !ctir !540
  %2 = load i8*, i8** %keybeg, align 8, !dbg !6268, !ctir !7
  store i8* %2, i8** %texta, align 8, !dbg !6266
  call void @llvm.dbg.declare(metadata i8** %textb, metadata !6269, metadata !DIExpression()), !dbg !6270
  %3 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6271
  %keybeg1 = getelementptr inbounds %struct.line, %struct.line* %3, i32 0, i32 2, !dbg !6272, !ctir !540
  %4 = load i8*, i8** %keybeg1, align 8, !dbg !6272, !ctir !7
  store i8* %4, i8** %textb, align 8, !dbg !6270
  call void @llvm.dbg.declare(metadata i8** %lima, metadata !6273, metadata !DIExpression()), !dbg !6274
  %5 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6275
  %keylim = getelementptr inbounds %struct.line, %struct.line* %5, i32 0, i32 3, !dbg !6276, !ctir !540
  %6 = load i8*, i8** %keylim, align 8, !dbg !6276, !ctir !7
  store i8* %6, i8** %lima, align 8, !dbg !6274
  call void @llvm.dbg.declare(metadata i8** %limb, metadata !6277, metadata !DIExpression()), !dbg !6278
  %7 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6279
  %keylim2 = getelementptr inbounds %struct.line, %struct.line* %7, i32 0, i32 3, !dbg !6280, !ctir !540
  %8 = load i8*, i8** %keylim2, align 8, !dbg !6280, !ctir !7
  store i8* %8, i8** %limb, align 8, !dbg !6278
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !6281, metadata !DIExpression()), !dbg !6282
  br label %while.body, !dbg !6283

while.body:                                       ; preds = %entry, %if.end380
  call void @llvm.dbg.declare(metadata i8** %translate, metadata !6284, metadata !DIExpression()), !dbg !6286
  %9 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6287
  %translate3 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %9, i32 0, i32 5, !dbg !6288, !ctir !153
  %10 = load i8*, i8** %translate3, align 8, !dbg !6288, !ctir !90
  store i8* %10, i8** %translate, align 8, !dbg !6286
  call void @llvm.dbg.declare(metadata i8** %ignore, metadata !6289, metadata !DIExpression()), !dbg !6290
  %11 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6291
  %ignore4 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 4, !dbg !6292, !ctir !153
  %12 = load i8*, i8** %ignore4, align 8, !dbg !6292, !ctir !160
  store i8* %12, i8** %ignore, align 8, !dbg !6290
  %13 = load i8*, i8** %texta, align 8, !dbg !6293
  %14 = load i8*, i8** %lima, align 8, !dbg !6293
  %cmp = icmp ugt i8* %13, %14, !dbg !6293
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6293

cond.true:                                        ; preds = %while.body
  %15 = load i8*, i8** %texta, align 8, !dbg !6293
  br label %cond.end, !dbg !6293

cond.false:                                       ; preds = %while.body
  %16 = load i8*, i8** %lima, align 8, !dbg !6293
  br label %cond.end, !dbg !6293

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %15, %cond.true ], [ %16, %cond.false ], !dbg !6293
  store i8* %cond, i8** %lima, align 8, !dbg !6294
  %17 = load i8*, i8** %textb, align 8, !dbg !6295
  %18 = load i8*, i8** %limb, align 8, !dbg !6295
  %cmp5 = icmp ugt i8* %17, %18, !dbg !6295
  br i1 %cmp5, label %cond.true6, label %cond.false7, !dbg !6295

cond.true6:                                       ; preds = %cond.end
  %19 = load i8*, i8** %textb, align 8, !dbg !6295
  br label %cond.end8, !dbg !6295

cond.false7:                                      ; preds = %cond.end
  %20 = load i8*, i8** %limb, align 8, !dbg !6295
  br label %cond.end8, !dbg !6295

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i8* [ %19, %cond.true6 ], [ %20, %cond.false7 ], !dbg !6295
  store i8* %cond9, i8** %limb, align 8, !dbg !6296
  call void @llvm.dbg.declare(metadata i64* %lena, metadata !6297, metadata !DIExpression()), !dbg !6298
  %21 = load i8*, i8** %lima, align 8, !dbg !6299
  %22 = load i8*, i8** %texta, align 8, !dbg !6300
  %sub.ptr.lhs.cast = ptrtoint i8* %21 to i64, !dbg !6301
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64, !dbg !6301
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6301
  store i64 %sub.ptr.sub, i64* %lena, align 8, !dbg !6298
  call void @llvm.dbg.declare(metadata i64* %lenb, metadata !6302, metadata !DIExpression()), !dbg !6303
  %23 = load i8*, i8** %limb, align 8, !dbg !6304
  %24 = load i8*, i8** %textb, align 8, !dbg !6305
  %sub.ptr.lhs.cast10 = ptrtoint i8* %23 to i64, !dbg !6306
  %sub.ptr.rhs.cast11 = ptrtoint i8* %24 to i64, !dbg !6306
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11, !dbg !6306
  store i64 %sub.ptr.sub12, i64* %lenb, align 8, !dbg !6303
  %25 = load i8, i8* @hard_LC_COLLATE, align 1, !dbg !6307
  %tobool = trunc i8 %25 to i1, !dbg !6307
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6309

lor.lhs.false:                                    ; preds = %cond.end8
  %26 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6310
  %call = call zeroext i1 @key_numeric(%struct.keyfield* %26), !dbg !6311
  br i1 %call, label %if.then, label %lor.lhs.false13, !dbg !6312

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %27 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6313
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %27, i32 0, i32 12, !dbg !6314, !ctir !153
  %28 = load i8, i8* %month, align 2, !dbg !6314
  %tobool14 = trunc i8 %28 to i1, !dbg !6314, !ctir !162
  br i1 %tobool14, label %if.then, label %lor.lhs.false15, !dbg !6315

lor.lhs.false15:                                  ; preds = %lor.lhs.false13
  %29 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6316
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %29, i32 0, i32 9, !dbg !6317, !ctir !153
  %30 = load i8, i8* %random, align 1, !dbg !6317
  %tobool16 = trunc i8 %30 to i1, !dbg !6317, !ctir !162
  br i1 %tobool16, label %if.then, label %lor.lhs.false17, !dbg !6318

lor.lhs.false17:                                  ; preds = %lor.lhs.false15
  %31 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6319
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %31, i32 0, i32 14, !dbg !6320, !ctir !153
  %32 = load i8, i8* %version, align 8, !dbg !6320
  %tobool18 = trunc i8 %32 to i1, !dbg !6320, !ctir !162
  br i1 %tobool18, label %if.then, label %if.else148, !dbg !6321

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false15, %lor.lhs.false13, %lor.lhs.false, %cond.end8
  call void @llvm.dbg.declare(metadata i8** %ta, metadata !6322, metadata !DIExpression()), !dbg !6324
  call void @llvm.dbg.declare(metadata i8** %tb, metadata !6325, metadata !DIExpression()), !dbg !6326
  call void @llvm.dbg.declare(metadata i64* %tlena, metadata !6327, metadata !DIExpression()), !dbg !6328
  call void @llvm.dbg.declare(metadata i64* %tlenb, metadata !6329, metadata !DIExpression()), !dbg !6330
  call void @llvm.dbg.declare(metadata i8* %enda, metadata !6331, metadata !DIExpression()), !dbg !6332
  call void @llvm.dbg.declare(metadata i8* %endb, metadata !6333, metadata !DIExpression()), !dbg !6334
  call void @llvm.dbg.declare(metadata i8** %allocated, metadata !6335, metadata !DIExpression()), !dbg !6336
  call void @llvm.dbg.declare(metadata [4000 x i8]* %stackbuf, metadata !6337, metadata !DIExpression()), !dbg !6338
  %33 = load i8*, i8** %ignore, align 8, !dbg !6339
  %tobool19 = icmp ne i8* %33, null, !dbg !6339
  br i1 %tobool19, label %if.then22, label %lor.lhs.false20, !dbg !6341

lor.lhs.false20:                                  ; preds = %if.then
  %34 = load i8*, i8** %translate, align 8, !dbg !6342
  %tobool21 = icmp ne i8* %34, null, !dbg !6342
  br i1 %tobool21, label %if.then22, label %if.else84, !dbg !6343

if.then22:                                        ; preds = %lor.lhs.false20, %if.then
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6344, metadata !DIExpression()), !dbg !6346
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6347, metadata !DIExpression()), !dbg !6348
  %35 = load i64, i64* %lena, align 8, !dbg !6349
  %add = add i64 %35, 1, !dbg !6350
  %36 = load i64, i64* %lenb, align 8, !dbg !6351
  %add23 = add i64 %add, %36, !dbg !6352
  %add24 = add i64 %add23, 1, !dbg !6353
  store i64 %add24, i64* %size, align 8, !dbg !6348
  %37 = load i64, i64* %size, align 8, !dbg !6354
  %cmp25 = icmp ule i64 %37, 4000, !dbg !6356
  br i1 %cmp25, label %if.then26, label %if.else, !dbg !6357

if.then26:                                        ; preds = %if.then22
  %arraydecay = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0, !dbg !6358, !ctir !554
  store i8* %arraydecay, i8** %ta, align 8, !dbg !6359
  store i8* null, i8** %allocated, align 8, !dbg !6360
  br label %if.end, !dbg !6361

if.else:                                          ; preds = %if.then22
  %38 = load i64, i64* %size, align 8, !dbg !6362
  %call27 = call noalias i8* @xmalloc(i64 %38), !dbg !6363
  store i8* %call27, i8** %allocated, align 8, !dbg !6364
  store i8* %call27, i8** %ta, align 8, !dbg !6365
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then26
  %39 = load i8*, i8** %ta, align 8, !dbg !6366
  %40 = load i64, i64* %lena, align 8, !dbg !6367
  %add.ptr = getelementptr inbounds i8, i8* %39, i64 %40, !dbg !6368, !ctir !8
  %add.ptr28 = getelementptr inbounds i8, i8* %add.ptr, i64 1, !dbg !6369, !ctir !8
  store i8* %add.ptr28, i8** %tb, align 8, !dbg !6370
  store i64 0, i64* %i, align 8, !dbg !6371
  store i64 0, i64* %tlena, align 8, !dbg !6373
  br label %for.cond, !dbg !6374

for.cond:                                         ; preds = %for.inc, %if.end
  %41 = load i64, i64* %i, align 8, !dbg !6375
  %42 = load i64, i64* %lena, align 8, !dbg !6377
  %cmp29 = icmp ult i64 %41, %42, !dbg !6378
  br i1 %cmp29, label %for.body, label %for.end, !dbg !6379

for.body:                                         ; preds = %for.cond
  %43 = load i8*, i8** %ignore, align 8, !dbg !6380
  %tobool30 = icmp ne i8* %43, null, !dbg !6380
  br i1 %tobool30, label %land.lhs.true, label %if.then34, !dbg !6382

land.lhs.true:                                    ; preds = %for.body
  %44 = load i8*, i8** %ignore, align 8, !dbg !6383
  %45 = load i8*, i8** %texta, align 8, !dbg !6384
  %46 = load i64, i64* %i, align 8, !dbg !6385
  %arrayidx = getelementptr inbounds i8, i8* %45, i64 %46, !dbg !6384, !ctir !7
  %47 = load i8, i8* %arrayidx, align 1, !dbg !6384
  %call31 = call zeroext i8 @to_uchar(i8 signext %47), !dbg !6386
  %idxprom = zext i8 %call31 to i64, !dbg !6383
  %arrayidx32 = getelementptr inbounds i8, i8* %44, i64 %idxprom, !dbg !6383, !ctir !160
  %48 = load i8, i8* %arrayidx32, align 1, !dbg !6383
  %tobool33 = trunc i8 %48 to i1, !dbg !6383
  br i1 %tobool33, label %if.end48, label %if.then34, !dbg !6387

if.then34:                                        ; preds = %land.lhs.true, %for.body
  %49 = load i8*, i8** %translate, align 8, !dbg !6388
  %tobool35 = icmp ne i8* %49, null, !dbg !6388
  br i1 %tobool35, label %cond.true36, label %cond.false41, !dbg !6388

cond.true36:                                      ; preds = %if.then34
  %50 = load i8*, i8** %translate, align 8, !dbg !6389
  %51 = load i8*, i8** %texta, align 8, !dbg !6390
  %52 = load i64, i64* %i, align 8, !dbg !6391
  %arrayidx37 = getelementptr inbounds i8, i8* %51, i64 %52, !dbg !6390, !ctir !7
  %53 = load i8, i8* %arrayidx37, align 1, !dbg !6390
  %call38 = call zeroext i8 @to_uchar(i8 signext %53), !dbg !6392
  %idxprom39 = zext i8 %call38 to i64, !dbg !6389
  %arrayidx40 = getelementptr inbounds i8, i8* %50, i64 %idxprom39, !dbg !6389, !ctir !90
  %54 = load i8, i8* %arrayidx40, align 1, !dbg !6389
  %conv = sext i8 %54 to i32, !dbg !6389
  br label %cond.end44, !dbg !6388

cond.false41:                                     ; preds = %if.then34
  %55 = load i8*, i8** %texta, align 8, !dbg !6393
  %56 = load i64, i64* %i, align 8, !dbg !6394
  %arrayidx42 = getelementptr inbounds i8, i8* %55, i64 %56, !dbg !6393, !ctir !7
  %57 = load i8, i8* %arrayidx42, align 1, !dbg !6393
  %conv43 = sext i8 %57 to i32, !dbg !6393
  br label %cond.end44, !dbg !6388

cond.end44:                                       ; preds = %cond.false41, %cond.true36
  %cond45 = phi i32 [ %conv, %cond.true36 ], [ %conv43, %cond.false41 ], !dbg !6388
  %conv46 = trunc i32 %cond45 to i8, !dbg !6395
  %58 = load i8*, i8** %ta, align 8, !dbg !6396
  %59 = load i64, i64* %tlena, align 8, !dbg !6397
  %inc = add i64 %59, 1, !dbg !6397
  store i64 %inc, i64* %tlena, align 8, !dbg !6397
  %arrayidx47 = getelementptr inbounds i8, i8* %58, i64 %59, !dbg !6396, !ctir !7
  store i8 %conv46, i8* %arrayidx47, align 1, !dbg !6398
  br label %if.end48, !dbg !6396

if.end48:                                         ; preds = %cond.end44, %land.lhs.true
  br label %for.inc, !dbg !6399

for.inc:                                          ; preds = %if.end48
  %60 = load i64, i64* %i, align 8, !dbg !6400
  %inc49 = add i64 %60, 1, !dbg !6400
  store i64 %inc49, i64* %i, align 8, !dbg !6400
  br label %for.cond, !dbg !6401, !llvm.loop !6402

for.end:                                          ; preds = %for.cond
  %61 = load i8*, i8** %ta, align 8, !dbg !6404
  %62 = load i64, i64* %tlena, align 8, !dbg !6405
  %arrayidx50 = getelementptr inbounds i8, i8* %61, i64 %62, !dbg !6404, !ctir !7
  store i8 0, i8* %arrayidx50, align 1, !dbg !6406
  store i64 0, i64* %i, align 8, !dbg !6407
  store i64 0, i64* %tlenb, align 8, !dbg !6409
  br label %for.cond51, !dbg !6410

for.cond51:                                       ; preds = %for.inc80, %for.end
  %63 = load i64, i64* %i, align 8, !dbg !6411
  %64 = load i64, i64* %lenb, align 8, !dbg !6413
  %cmp52 = icmp ult i64 %63, %64, !dbg !6414
  br i1 %cmp52, label %for.body54, label %for.end82, !dbg !6415

for.body54:                                       ; preds = %for.cond51
  %65 = load i8*, i8** %ignore, align 8, !dbg !6416
  %tobool55 = icmp ne i8* %65, null, !dbg !6416
  br i1 %tobool55, label %land.lhs.true56, label %if.then63, !dbg !6418

land.lhs.true56:                                  ; preds = %for.body54
  %66 = load i8*, i8** %ignore, align 8, !dbg !6419
  %67 = load i8*, i8** %textb, align 8, !dbg !6420
  %68 = load i64, i64* %i, align 8, !dbg !6421
  %arrayidx57 = getelementptr inbounds i8, i8* %67, i64 %68, !dbg !6420, !ctir !7
  %69 = load i8, i8* %arrayidx57, align 1, !dbg !6420
  %call58 = call zeroext i8 @to_uchar(i8 signext %69), !dbg !6422
  %idxprom59 = zext i8 %call58 to i64, !dbg !6419
  %arrayidx60 = getelementptr inbounds i8, i8* %66, i64 %idxprom59, !dbg !6419, !ctir !160
  %70 = load i8, i8* %arrayidx60, align 1, !dbg !6419
  %tobool61 = trunc i8 %70 to i1, !dbg !6419
  br i1 %tobool61, label %if.end79, label %if.then63, !dbg !6423

if.then63:                                        ; preds = %land.lhs.true56, %for.body54
  %71 = load i8*, i8** %translate, align 8, !dbg !6424
  %tobool64 = icmp ne i8* %71, null, !dbg !6424
  br i1 %tobool64, label %cond.true65, label %cond.false71, !dbg !6424

cond.true65:                                      ; preds = %if.then63
  %72 = load i8*, i8** %translate, align 8, !dbg !6425
  %73 = load i8*, i8** %textb, align 8, !dbg !6426
  %74 = load i64, i64* %i, align 8, !dbg !6427
  %arrayidx66 = getelementptr inbounds i8, i8* %73, i64 %74, !dbg !6426, !ctir !7
  %75 = load i8, i8* %arrayidx66, align 1, !dbg !6426
  %call67 = call zeroext i8 @to_uchar(i8 signext %75), !dbg !6428
  %idxprom68 = zext i8 %call67 to i64, !dbg !6425
  %arrayidx69 = getelementptr inbounds i8, i8* %72, i64 %idxprom68, !dbg !6425, !ctir !90
  %76 = load i8, i8* %arrayidx69, align 1, !dbg !6425
  %conv70 = sext i8 %76 to i32, !dbg !6425
  br label %cond.end74, !dbg !6424

cond.false71:                                     ; preds = %if.then63
  %77 = load i8*, i8** %textb, align 8, !dbg !6429
  %78 = load i64, i64* %i, align 8, !dbg !6430
  %arrayidx72 = getelementptr inbounds i8, i8* %77, i64 %78, !dbg !6429, !ctir !7
  %79 = load i8, i8* %arrayidx72, align 1, !dbg !6429
  %conv73 = sext i8 %79 to i32, !dbg !6429
  br label %cond.end74, !dbg !6424

cond.end74:                                       ; preds = %cond.false71, %cond.true65
  %cond75 = phi i32 [ %conv70, %cond.true65 ], [ %conv73, %cond.false71 ], !dbg !6424
  %conv76 = trunc i32 %cond75 to i8, !dbg !6431
  %80 = load i8*, i8** %tb, align 8, !dbg !6432
  %81 = load i64, i64* %tlenb, align 8, !dbg !6433
  %inc77 = add i64 %81, 1, !dbg !6433
  store i64 %inc77, i64* %tlenb, align 8, !dbg !6433
  %arrayidx78 = getelementptr inbounds i8, i8* %80, i64 %81, !dbg !6432, !ctir !7
  store i8 %conv76, i8* %arrayidx78, align 1, !dbg !6434
  br label %if.end79, !dbg !6432

if.end79:                                         ; preds = %cond.end74, %land.lhs.true56
  br label %for.inc80, !dbg !6435

for.inc80:                                        ; preds = %if.end79
  %82 = load i64, i64* %i, align 8, !dbg !6436
  %inc81 = add i64 %82, 1, !dbg !6436
  store i64 %inc81, i64* %i, align 8, !dbg !6436
  br label %for.cond51, !dbg !6437, !llvm.loop !6438

for.end82:                                        ; preds = %for.cond51
  %83 = load i8*, i8** %tb, align 8, !dbg !6440
  %84 = load i64, i64* %tlenb, align 8, !dbg !6441
  %arrayidx83 = getelementptr inbounds i8, i8* %83, i64 %84, !dbg !6440, !ctir !7
  store i8 0, i8* %arrayidx83, align 1, !dbg !6442
  br label %if.end89, !dbg !6443

if.else84:                                        ; preds = %lor.lhs.false20
  %85 = load i8*, i8** %texta, align 8, !dbg !6444
  store i8* %85, i8** %ta, align 8, !dbg !6446
  %86 = load i64, i64* %lena, align 8, !dbg !6447
  store i64 %86, i64* %tlena, align 8, !dbg !6448
  %87 = load i8*, i8** %ta, align 8, !dbg !6449
  %88 = load i64, i64* %tlena, align 8, !dbg !6450
  %arrayidx85 = getelementptr inbounds i8, i8* %87, i64 %88, !dbg !6449, !ctir !7
  %89 = load i8, i8* %arrayidx85, align 1, !dbg !6449
  store i8 %89, i8* %enda, align 1, !dbg !6451
  %90 = load i8*, i8** %ta, align 8, !dbg !6452
  %91 = load i64, i64* %tlena, align 8, !dbg !6453
  %arrayidx86 = getelementptr inbounds i8, i8* %90, i64 %91, !dbg !6452, !ctir !7
  store i8 0, i8* %arrayidx86, align 1, !dbg !6454
  %92 = load i8*, i8** %textb, align 8, !dbg !6455
  store i8* %92, i8** %tb, align 8, !dbg !6456
  %93 = load i64, i64* %lenb, align 8, !dbg !6457
  store i64 %93, i64* %tlenb, align 8, !dbg !6458
  %94 = load i8*, i8** %tb, align 8, !dbg !6459
  %95 = load i64, i64* %tlenb, align 8, !dbg !6460
  %arrayidx87 = getelementptr inbounds i8, i8* %94, i64 %95, !dbg !6459, !ctir !7
  %96 = load i8, i8* %arrayidx87, align 1, !dbg !6459
  store i8 %96, i8* %endb, align 1, !dbg !6461
  %97 = load i8*, i8** %tb, align 8, !dbg !6462
  %98 = load i64, i64* %tlenb, align 8, !dbg !6463
  %arrayidx88 = getelementptr inbounds i8, i8* %97, i64 %98, !dbg !6462, !ctir !7
  store i8 0, i8* %arrayidx88, align 1, !dbg !6464
  br label %if.end89

if.end89:                                         ; preds = %if.else84, %for.end82
  %99 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6465
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %99, i32 0, i32 8, !dbg !6467, !ctir !153
  %100 = load i8, i8* %numeric, align 2, !dbg !6467
  %tobool90 = trunc i8 %100 to i1, !dbg !6467, !ctir !162
  br i1 %tobool90, label %if.then91, label %if.else93, !dbg !6468

if.then91:                                        ; preds = %if.end89
  %101 = load i8*, i8** %ta, align 8, !dbg !6469
  %102 = load i8*, i8** %tb, align 8, !dbg !6470
  %call92 = call i32 @numcompare(i8* %101, i8* %102), !dbg !6471
  store i32 %call92, i32* %diff, align 4, !dbg !6472
  br label %if.end139, !dbg !6473

if.else93:                                        ; preds = %if.end89
  %103 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6474
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %103, i32 0, i32 10, !dbg !6476, !ctir !153
  %104 = load i8, i8* %general_numeric, align 4, !dbg !6476
  %tobool94 = trunc i8 %104 to i1, !dbg !6476, !ctir !162
  br i1 %tobool94, label %if.then95, label %if.else97, !dbg !6477

if.then95:                                        ; preds = %if.else93
  %105 = load i8*, i8** %ta, align 8, !dbg !6478
  %106 = load i8*, i8** %tb, align 8, !dbg !6479
  %call96 = call i32 @general_numcompare(i8* %105, i8* %106), !dbg !6480
  store i32 %call96, i32* %diff, align 4, !dbg !6481
  br label %if.end138, !dbg !6482

if.else97:                                        ; preds = %if.else93
  %107 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6483
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %107, i32 0, i32 11, !dbg !6485, !ctir !153
  %108 = load i8, i8* %human_numeric, align 1, !dbg !6485
  %tobool98 = trunc i8 %108 to i1, !dbg !6485, !ctir !162
  br i1 %tobool98, label %if.then99, label %if.else101, !dbg !6486

if.then99:                                        ; preds = %if.else97
  %109 = load i8*, i8** %ta, align 8, !dbg !6487
  %110 = load i8*, i8** %tb, align 8, !dbg !6488
  %call100 = call i32 @human_numcompare(i8* %109, i8* %110), !dbg !6489
  store i32 %call100, i32* %diff, align 4, !dbg !6490
  br label %if.end137, !dbg !6491

if.else101:                                       ; preds = %if.else97
  %111 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6492
  %month102 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %111, i32 0, i32 12, !dbg !6494, !ctir !153
  %112 = load i8, i8* %month102, align 2, !dbg !6494
  %tobool103 = trunc i8 %112 to i1, !dbg !6494, !ctir !162
  br i1 %tobool103, label %if.then104, label %if.else107, !dbg !6495

if.then104:                                       ; preds = %if.else101
  %113 = load i8*, i8** %ta, align 8, !dbg !6496
  %call105 = call i32 @getmonth(i8* %113, i8** null), !dbg !6497
  %114 = load i8*, i8** %tb, align 8, !dbg !6498
  %call106 = call i32 @getmonth(i8* %114, i8** null), !dbg !6499
  %sub = sub nsw i32 %call105, %call106, !dbg !6500
  store i32 %sub, i32* %diff, align 4, !dbg !6501
  br label %if.end136, !dbg !6502

if.else107:                                       ; preds = %if.else101
  %115 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6503
  %random108 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %115, i32 0, i32 9, !dbg !6505, !ctir !153
  %116 = load i8, i8* %random108, align 1, !dbg !6505
  %tobool109 = trunc i8 %116 to i1, !dbg !6505, !ctir !162
  br i1 %tobool109, label %if.then110, label %if.else112, !dbg !6506

if.then110:                                       ; preds = %if.else107
  %117 = load i8*, i8** %ta, align 8, !dbg !6507
  %118 = load i64, i64* %tlena, align 8, !dbg !6508
  %119 = load i8*, i8** %tb, align 8, !dbg !6509
  %120 = load i64, i64* %tlenb, align 8, !dbg !6510
  %call111 = call i32 @compare_random(i8* %117, i64 %118, i8* %119, i64 %120), !dbg !6511
  store i32 %call111, i32* %diff, align 4, !dbg !6512
  br label %if.end135, !dbg !6513

if.else112:                                       ; preds = %if.else107
  %121 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6514
  %version113 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %121, i32 0, i32 14, !dbg !6516, !ctir !153
  %122 = load i8, i8* %version113, align 8, !dbg !6516
  %tobool114 = trunc i8 %122 to i1, !dbg !6516, !ctir !162
  br i1 %tobool114, label %if.then115, label %if.else117, !dbg !6517

if.then115:                                       ; preds = %if.else112
  %123 = load i8*, i8** %ta, align 8, !dbg !6518
  %124 = load i8*, i8** %tb, align 8, !dbg !6519
  %call116 = call i32 @filevercmp(i8* %123, i8* %124) #14, !dbg !6520
  store i32 %call116, i32* %diff, align 4, !dbg !6521
  br label %if.end134, !dbg !6522

if.else117:                                       ; preds = %if.else112
  %125 = load i64, i64* %tlena, align 8, !dbg !6523
  %cmp118 = icmp eq i64 %125, 0, !dbg !6526
  br i1 %cmp118, label %if.then120, label %if.else124, !dbg !6527

if.then120:                                       ; preds = %if.else117
  %126 = load i64, i64* %tlenb, align 8, !dbg !6528
  %cmp121 = icmp ne i64 %126, 0, !dbg !6528
  %conv122 = zext i1 %cmp121 to i32, !dbg !6528
  %sub123 = sub nsw i32 0, %conv122, !dbg !6529
  store i32 %sub123, i32* %diff, align 4, !dbg !6530
  br label %if.end133, !dbg !6531

if.else124:                                       ; preds = %if.else117
  %127 = load i64, i64* %tlenb, align 8, !dbg !6532
  %cmp125 = icmp eq i64 %127, 0, !dbg !6534
  br i1 %cmp125, label %if.then127, label %if.else128, !dbg !6535

if.then127:                                       ; preds = %if.else124
  store i32 1, i32* %diff, align 4, !dbg !6536
  br label %if.end132, !dbg !6537

if.else128:                                       ; preds = %if.else124
  %128 = load i8*, i8** %ta, align 8, !dbg !6538
  %129 = load i64, i64* %tlena, align 8, !dbg !6539
  %add129 = add i64 %129, 1, !dbg !6540
  %130 = load i8*, i8** %tb, align 8, !dbg !6541
  %131 = load i64, i64* %tlenb, align 8, !dbg !6542
  %add130 = add i64 %131, 1, !dbg !6543
  %call131 = call i32 @xmemcoll0(i8* %128, i64 %add129, i8* %130, i64 %add130), !dbg !6544
  store i32 %call131, i32* %diff, align 4, !dbg !6545
  br label %if.end132

if.end132:                                        ; preds = %if.else128, %if.then127
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.then120
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then115
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.then110
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then104
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then99
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then95
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.then91
  %132 = load i8*, i8** %ignore, align 8, !dbg !6546
  %tobool140 = icmp ne i8* %132, null, !dbg !6546
  br i1 %tobool140, label %if.then143, label %lor.lhs.false141, !dbg !6548

lor.lhs.false141:                                 ; preds = %if.end139
  %133 = load i8*, i8** %translate, align 8, !dbg !6549
  %tobool142 = icmp ne i8* %133, null, !dbg !6549
  br i1 %tobool142, label %if.then143, label %if.else144, !dbg !6550

if.then143:                                       ; preds = %lor.lhs.false141, %if.end139
  %134 = load i8*, i8** %allocated, align 8, !dbg !6551
  call void @free(i8* %134) #12, !dbg !6552
  br label %if.end147, !dbg !6552

if.else144:                                       ; preds = %lor.lhs.false141
  %135 = load i8, i8* %enda, align 1, !dbg !6553
  %136 = load i8*, i8** %ta, align 8, !dbg !6555
  %137 = load i64, i64* %tlena, align 8, !dbg !6556
  %arrayidx145 = getelementptr inbounds i8, i8* %136, i64 %137, !dbg !6555, !ctir !7
  store i8 %135, i8* %arrayidx145, align 1, !dbg !6557
  %138 = load i8, i8* %endb, align 1, !dbg !6558
  %139 = load i8*, i8** %tb, align 8, !dbg !6559
  %140 = load i64, i64* %tlenb, align 8, !dbg !6560
  %arrayidx146 = getelementptr inbounds i8, i8* %139, i64 %140, !dbg !6559, !ctir !7
  store i8 %138, i8* %arrayidx146, align 1, !dbg !6561
  br label %if.end147

if.end147:                                        ; preds = %if.else144, %if.then143
  br label %if.end323, !dbg !6562

if.else148:                                       ; preds = %lor.lhs.false17
  %141 = load i8*, i8** %ignore, align 8, !dbg !6563
  %tobool149 = icmp ne i8* %141, null, !dbg !6563
  br i1 %tobool149, label %if.then150, label %if.else261, !dbg !6565

if.then150:                                       ; preds = %if.else148
  %142 = load i8*, i8** %translate, align 8, !dbg !6566
  %tobool151 = icmp ne i8* %142, null, !dbg !6566
  br i1 %tobool151, label %if.then152, label %if.else206, !dbg !6569

if.then152:                                       ; preds = %if.then150
  br label %do.body, !dbg !6570

do.body:                                          ; preds = %if.then152
  br label %while.body154, !dbg !6571

while.body154:                                    ; preds = %do.body, %if.end197
  br label %while.cond155, !dbg !6573

while.cond155:                                    ; preds = %while.body163, %while.body154
  %143 = load i8*, i8** %texta, align 8, !dbg !6573
  %144 = load i8*, i8** %lima, align 8, !dbg !6573
  %cmp156 = icmp ult i8* %143, %144, !dbg !6573
  br i1 %cmp156, label %land.rhs, label %land.end, !dbg !6573

land.rhs:                                         ; preds = %while.cond155
  %145 = load i8*, i8** %ignore, align 8, !dbg !6573
  %146 = load i8*, i8** %texta, align 8, !dbg !6573
  %147 = load i8, i8* %146, align 1, !dbg !6573, !ctir !8
  %call158 = call zeroext i8 @to_uchar(i8 signext %147), !dbg !6573
  %idxprom159 = zext i8 %call158 to i64, !dbg !6573
  %arrayidx160 = getelementptr inbounds i8, i8* %145, i64 %idxprom159, !dbg !6573, !ctir !160
  %148 = load i8, i8* %arrayidx160, align 1, !dbg !6573
  %tobool161 = trunc i8 %148 to i1, !dbg !6573
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond155
  %149 = phi i1 [ false, %while.cond155 ], [ %tobool161, %land.rhs ], !dbg !6575
  br i1 %149, label %while.body163, label %while.end, !dbg !6573

while.body163:                                    ; preds = %land.end
  %150 = load i8*, i8** %texta, align 8, !dbg !6573
  %incdec.ptr = getelementptr inbounds i8, i8* %150, i32 1, !dbg !6573, !ctir !8
  store i8* %incdec.ptr, i8** %texta, align 8, !dbg !6573
  br label %while.cond155, !dbg !6573, !llvm.loop !6576

while.end:                                        ; preds = %land.end
  br label %while.cond164, !dbg !6573

while.cond164:                                    ; preds = %while.body174, %while.end
  %151 = load i8*, i8** %textb, align 8, !dbg !6573
  %152 = load i8*, i8** %limb, align 8, !dbg !6573
  %cmp165 = icmp ult i8* %151, %152, !dbg !6573
  br i1 %cmp165, label %land.rhs167, label %land.end173, !dbg !6573

land.rhs167:                                      ; preds = %while.cond164
  %153 = load i8*, i8** %ignore, align 8, !dbg !6573
  %154 = load i8*, i8** %textb, align 8, !dbg !6573
  %155 = load i8, i8* %154, align 1, !dbg !6573, !ctir !8
  %call168 = call zeroext i8 @to_uchar(i8 signext %155), !dbg !6573
  %idxprom169 = zext i8 %call168 to i64, !dbg !6573
  %arrayidx170 = getelementptr inbounds i8, i8* %153, i64 %idxprom169, !dbg !6573, !ctir !160
  %156 = load i8, i8* %arrayidx170, align 1, !dbg !6573
  %tobool171 = trunc i8 %156 to i1, !dbg !6573
  br label %land.end173

land.end173:                                      ; preds = %land.rhs167, %while.cond164
  %157 = phi i1 [ false, %while.cond164 ], [ %tobool171, %land.rhs167 ], !dbg !6575
  br i1 %157, label %while.body174, label %while.end176, !dbg !6573

while.body174:                                    ; preds = %land.end173
  %158 = load i8*, i8** %textb, align 8, !dbg !6573
  %incdec.ptr175 = getelementptr inbounds i8, i8* %158, i32 1, !dbg !6573, !ctir !8
  store i8* %incdec.ptr175, i8** %textb, align 8, !dbg !6573
  br label %while.cond164, !dbg !6573, !llvm.loop !6577

while.end176:                                     ; preds = %land.end173
  %159 = load i8*, i8** %texta, align 8, !dbg !6578
  %160 = load i8*, i8** %lima, align 8, !dbg !6578
  %cmp177 = icmp ult i8* %159, %160, !dbg !6578
  br i1 %cmp177, label %land.lhs.true179, label %if.then182, !dbg !6578

land.lhs.true179:                                 ; preds = %while.end176
  %161 = load i8*, i8** %textb, align 8, !dbg !6578
  %162 = load i8*, i8** %limb, align 8, !dbg !6578
  %cmp180 = icmp ult i8* %161, %162, !dbg !6578
  br i1 %cmp180, label %if.end183, label %if.then182, !dbg !6573

if.then182:                                       ; preds = %land.lhs.true179, %while.end176
  br label %while.end200, !dbg !6578

if.end183:                                        ; preds = %land.lhs.true179
  %163 = load i8*, i8** %translate, align 8, !dbg !6573
  %164 = load i8*, i8** %texta, align 8, !dbg !6573
  %165 = load i8, i8* %164, align 1, !dbg !6573, !ctir !8
  %call184 = call zeroext i8 @to_uchar(i8 signext %165), !dbg !6573
  %idxprom185 = zext i8 %call184 to i64, !dbg !6573
  %arrayidx186 = getelementptr inbounds i8, i8* %163, i64 %idxprom185, !dbg !6573, !ctir !90
  %166 = load i8, i8* %arrayidx186, align 1, !dbg !6573
  %call187 = call zeroext i8 @to_uchar(i8 signext %166), !dbg !6573
  %conv188 = zext i8 %call187 to i32, !dbg !6573
  %167 = load i8*, i8** %translate, align 8, !dbg !6573
  %168 = load i8*, i8** %textb, align 8, !dbg !6573
  %169 = load i8, i8* %168, align 1, !dbg !6573, !ctir !8
  %call189 = call zeroext i8 @to_uchar(i8 signext %169), !dbg !6573
  %idxprom190 = zext i8 %call189 to i64, !dbg !6573
  %arrayidx191 = getelementptr inbounds i8, i8* %167, i64 %idxprom190, !dbg !6573, !ctir !90
  %170 = load i8, i8* %arrayidx191, align 1, !dbg !6573
  %call192 = call zeroext i8 @to_uchar(i8 signext %170), !dbg !6573
  %conv193 = zext i8 %call192 to i32, !dbg !6573
  %sub194 = sub nsw i32 %conv188, %conv193, !dbg !6573
  store i32 %sub194, i32* %diff, align 4, !dbg !6573
  %171 = load i32, i32* %diff, align 4, !dbg !6580
  %tobool195 = icmp ne i32 %171, 0, !dbg !6580
  br i1 %tobool195, label %if.then196, label %if.end197, !dbg !6573

if.then196:                                       ; preds = %if.end183
  br label %not_equal, !dbg !6580

if.end197:                                        ; preds = %if.end183
  %172 = load i8*, i8** %texta, align 8, !dbg !6573
  %incdec.ptr198 = getelementptr inbounds i8, i8* %172, i32 1, !dbg !6573, !ctir !8
  store i8* %incdec.ptr198, i8** %texta, align 8, !dbg !6573
  %173 = load i8*, i8** %textb, align 8, !dbg !6573
  %incdec.ptr199 = getelementptr inbounds i8, i8* %173, i32 1, !dbg !6573, !ctir !8
  store i8* %incdec.ptr199, i8** %textb, align 8, !dbg !6573
  br label %while.body154, !dbg !6571, !llvm.loop !6582

while.end200:                                     ; preds = %if.then182
  %174 = load i8*, i8** %texta, align 8, !dbg !6571
  %175 = load i8*, i8** %lima, align 8, !dbg !6571
  %cmp201 = icmp ult i8* %174, %175, !dbg !6571
  %conv202 = zext i1 %cmp201 to i32, !dbg !6571
  %176 = load i8*, i8** %textb, align 8, !dbg !6571
  %177 = load i8*, i8** %limb, align 8, !dbg !6571
  %cmp203 = icmp ult i8* %176, %177, !dbg !6571
  %conv204 = zext i1 %cmp203 to i32, !dbg !6571
  %sub205 = sub nsw i32 %conv202, %conv204, !dbg !6571
  store i32 %sub205, i32* %diff, align 4, !dbg !6571
  br label %do.end, !dbg !6571

do.end:                                           ; preds = %while.end200
  br label %if.end260, !dbg !6571

if.else206:                                       ; preds = %if.then150
  br label %do.body207, !dbg !6583

do.body207:                                       ; preds = %if.else206
  br label %while.body209, !dbg !6584

while.body209:                                    ; preds = %do.body207, %if.end250
  br label %while.cond210, !dbg !6586

while.cond210:                                    ; preds = %while.body220, %while.body209
  %178 = load i8*, i8** %texta, align 8, !dbg !6586
  %179 = load i8*, i8** %lima, align 8, !dbg !6586
  %cmp211 = icmp ult i8* %178, %179, !dbg !6586
  br i1 %cmp211, label %land.rhs213, label %land.end219, !dbg !6586

land.rhs213:                                      ; preds = %while.cond210
  %180 = load i8*, i8** %ignore, align 8, !dbg !6586
  %181 = load i8*, i8** %texta, align 8, !dbg !6586
  %182 = load i8, i8* %181, align 1, !dbg !6586, !ctir !8
  %call214 = call zeroext i8 @to_uchar(i8 signext %182), !dbg !6586
  %idxprom215 = zext i8 %call214 to i64, !dbg !6586
  %arrayidx216 = getelementptr inbounds i8, i8* %180, i64 %idxprom215, !dbg !6586, !ctir !160
  %183 = load i8, i8* %arrayidx216, align 1, !dbg !6586
  %tobool217 = trunc i8 %183 to i1, !dbg !6586
  br label %land.end219

land.end219:                                      ; preds = %land.rhs213, %while.cond210
  %184 = phi i1 [ false, %while.cond210 ], [ %tobool217, %land.rhs213 ], !dbg !6588
  br i1 %184, label %while.body220, label %while.end222, !dbg !6586

while.body220:                                    ; preds = %land.end219
  %185 = load i8*, i8** %texta, align 8, !dbg !6586
  %incdec.ptr221 = getelementptr inbounds i8, i8* %185, i32 1, !dbg !6586, !ctir !8
  store i8* %incdec.ptr221, i8** %texta, align 8, !dbg !6586
  br label %while.cond210, !dbg !6586, !llvm.loop !6589

while.end222:                                     ; preds = %land.end219
  br label %while.cond223, !dbg !6586

while.cond223:                                    ; preds = %while.body233, %while.end222
  %186 = load i8*, i8** %textb, align 8, !dbg !6586
  %187 = load i8*, i8** %limb, align 8, !dbg !6586
  %cmp224 = icmp ult i8* %186, %187, !dbg !6586
  br i1 %cmp224, label %land.rhs226, label %land.end232, !dbg !6586

land.rhs226:                                      ; preds = %while.cond223
  %188 = load i8*, i8** %ignore, align 8, !dbg !6586
  %189 = load i8*, i8** %textb, align 8, !dbg !6586
  %190 = load i8, i8* %189, align 1, !dbg !6586, !ctir !8
  %call227 = call zeroext i8 @to_uchar(i8 signext %190), !dbg !6586
  %idxprom228 = zext i8 %call227 to i64, !dbg !6586
  %arrayidx229 = getelementptr inbounds i8, i8* %188, i64 %idxprom228, !dbg !6586, !ctir !160
  %191 = load i8, i8* %arrayidx229, align 1, !dbg !6586
  %tobool230 = trunc i8 %191 to i1, !dbg !6586
  br label %land.end232

land.end232:                                      ; preds = %land.rhs226, %while.cond223
  %192 = phi i1 [ false, %while.cond223 ], [ %tobool230, %land.rhs226 ], !dbg !6588
  br i1 %192, label %while.body233, label %while.end235, !dbg !6586

while.body233:                                    ; preds = %land.end232
  %193 = load i8*, i8** %textb, align 8, !dbg !6586
  %incdec.ptr234 = getelementptr inbounds i8, i8* %193, i32 1, !dbg !6586, !ctir !8
  store i8* %incdec.ptr234, i8** %textb, align 8, !dbg !6586
  br label %while.cond223, !dbg !6586, !llvm.loop !6590

while.end235:                                     ; preds = %land.end232
  %194 = load i8*, i8** %texta, align 8, !dbg !6591
  %195 = load i8*, i8** %lima, align 8, !dbg !6591
  %cmp236 = icmp ult i8* %194, %195, !dbg !6591
  br i1 %cmp236, label %land.lhs.true238, label %if.then241, !dbg !6591

land.lhs.true238:                                 ; preds = %while.end235
  %196 = load i8*, i8** %textb, align 8, !dbg !6591
  %197 = load i8*, i8** %limb, align 8, !dbg !6591
  %cmp239 = icmp ult i8* %196, %197, !dbg !6591
  br i1 %cmp239, label %if.end242, label %if.then241, !dbg !6586

if.then241:                                       ; preds = %land.lhs.true238, %while.end235
  br label %while.end253, !dbg !6591

if.end242:                                        ; preds = %land.lhs.true238
  %198 = load i8*, i8** %texta, align 8, !dbg !6586
  %199 = load i8, i8* %198, align 1, !dbg !6586, !ctir !8
  %call243 = call zeroext i8 @to_uchar(i8 signext %199), !dbg !6586
  %conv244 = zext i8 %call243 to i32, !dbg !6586
  %200 = load i8*, i8** %textb, align 8, !dbg !6586
  %201 = load i8, i8* %200, align 1, !dbg !6586, !ctir !8
  %call245 = call zeroext i8 @to_uchar(i8 signext %201), !dbg !6586
  %conv246 = zext i8 %call245 to i32, !dbg !6586
  %sub247 = sub nsw i32 %conv244, %conv246, !dbg !6586
  store i32 %sub247, i32* %diff, align 4, !dbg !6586
  %202 = load i32, i32* %diff, align 4, !dbg !6593
  %tobool248 = icmp ne i32 %202, 0, !dbg !6593
  br i1 %tobool248, label %if.then249, label %if.end250, !dbg !6586

if.then249:                                       ; preds = %if.end242
  br label %not_equal, !dbg !6593

if.end250:                                        ; preds = %if.end242
  %203 = load i8*, i8** %texta, align 8, !dbg !6586
  %incdec.ptr251 = getelementptr inbounds i8, i8* %203, i32 1, !dbg !6586, !ctir !8
  store i8* %incdec.ptr251, i8** %texta, align 8, !dbg !6586
  %204 = load i8*, i8** %textb, align 8, !dbg !6586
  %incdec.ptr252 = getelementptr inbounds i8, i8* %204, i32 1, !dbg !6586, !ctir !8
  store i8* %incdec.ptr252, i8** %textb, align 8, !dbg !6586
  br label %while.body209, !dbg !6584, !llvm.loop !6595

while.end253:                                     ; preds = %if.then241
  %205 = load i8*, i8** %texta, align 8, !dbg !6584
  %206 = load i8*, i8** %lima, align 8, !dbg !6584
  %cmp254 = icmp ult i8* %205, %206, !dbg !6584
  %conv255 = zext i1 %cmp254 to i32, !dbg !6584
  %207 = load i8*, i8** %textb, align 8, !dbg !6584
  %208 = load i8*, i8** %limb, align 8, !dbg !6584
  %cmp256 = icmp ult i8* %207, %208, !dbg !6584
  %conv257 = zext i1 %cmp256 to i32, !dbg !6584
  %sub258 = sub nsw i32 %conv255, %conv257, !dbg !6584
  store i32 %sub258, i32* %diff, align 4, !dbg !6584
  br label %do.end259, !dbg !6584

do.end259:                                        ; preds = %while.end253
  br label %if.end260

if.end260:                                        ; preds = %do.end259, %do.end
  br label %if.end322, !dbg !6596

if.else261:                                       ; preds = %if.else148
  %209 = load i64, i64* %lena, align 8, !dbg !6597
  %cmp262 = icmp eq i64 %209, 0, !dbg !6599
  br i1 %cmp262, label %if.then264, label %if.else268, !dbg !6600

if.then264:                                       ; preds = %if.else261
  %210 = load i64, i64* %lenb, align 8, !dbg !6601
  %cmp265 = icmp ne i64 %210, 0, !dbg !6601
  %conv266 = zext i1 %cmp265 to i32, !dbg !6601
  %sub267 = sub nsw i32 0, %conv266, !dbg !6602
  store i32 %sub267, i32* %diff, align 4, !dbg !6603
  br label %if.end321, !dbg !6604

if.else268:                                       ; preds = %if.else261
  %211 = load i64, i64* %lenb, align 8, !dbg !6605
  %cmp269 = icmp eq i64 %211, 0, !dbg !6607
  br i1 %cmp269, label %if.then271, label %if.else272, !dbg !6608

if.then271:                                       ; preds = %if.else268
  br label %greater, !dbg !6609

if.else272:                                       ; preds = %if.else268
  %212 = load i8*, i8** %translate, align 8, !dbg !6610
  %tobool273 = icmp ne i8* %212, null, !dbg !6610
  br i1 %tobool273, label %if.then274, label %if.else300, !dbg !6613

if.then274:                                       ; preds = %if.else272
  br label %while.cond275, !dbg !6614

while.cond275:                                    ; preds = %if.end298, %if.then274
  %213 = load i8*, i8** %texta, align 8, !dbg !6616
  %214 = load i8*, i8** %lima, align 8, !dbg !6617
  %cmp276 = icmp ult i8* %213, %214, !dbg !6618
  br i1 %cmp276, label %land.rhs278, label %land.end281, !dbg !6619

land.rhs278:                                      ; preds = %while.cond275
  %215 = load i8*, i8** %textb, align 8, !dbg !6620
  %216 = load i8*, i8** %limb, align 8, !dbg !6621
  %cmp279 = icmp ult i8* %215, %216, !dbg !6622
  br label %land.end281

land.end281:                                      ; preds = %land.rhs278, %while.cond275
  %217 = phi i1 [ false, %while.cond275 ], [ %cmp279, %land.rhs278 ], !dbg !6623
  br i1 %217, label %while.body282, label %while.end299, !dbg !6614

while.body282:                                    ; preds = %land.end281
  %218 = load i8*, i8** %translate, align 8, !dbg !6624
  %219 = load i8*, i8** %texta, align 8, !dbg !6626
  %incdec.ptr283 = getelementptr inbounds i8, i8* %219, i32 1, !dbg !6626, !ctir !8
  store i8* %incdec.ptr283, i8** %texta, align 8, !dbg !6626
  %220 = load i8, i8* %219, align 1, !dbg !6627, !ctir !8
  %call284 = call zeroext i8 @to_uchar(i8 signext %220), !dbg !6628
  %idxprom285 = zext i8 %call284 to i64, !dbg !6624
  %arrayidx286 = getelementptr inbounds i8, i8* %218, i64 %idxprom285, !dbg !6624, !ctir !90
  %221 = load i8, i8* %arrayidx286, align 1, !dbg !6624
  %call287 = call zeroext i8 @to_uchar(i8 signext %221), !dbg !6629
  %conv288 = zext i8 %call287 to i32, !dbg !6629
  %222 = load i8*, i8** %translate, align 8, !dbg !6630
  %223 = load i8*, i8** %textb, align 8, !dbg !6631
  %incdec.ptr289 = getelementptr inbounds i8, i8* %223, i32 1, !dbg !6631, !ctir !8
  store i8* %incdec.ptr289, i8** %textb, align 8, !dbg !6631
  %224 = load i8, i8* %223, align 1, !dbg !6632, !ctir !8
  %call290 = call zeroext i8 @to_uchar(i8 signext %224), !dbg !6633
  %idxprom291 = zext i8 %call290 to i64, !dbg !6630
  %arrayidx292 = getelementptr inbounds i8, i8* %222, i64 %idxprom291, !dbg !6630, !ctir !90
  %225 = load i8, i8* %arrayidx292, align 1, !dbg !6630
  %call293 = call zeroext i8 @to_uchar(i8 signext %225), !dbg !6634
  %conv294 = zext i8 %call293 to i32, !dbg !6634
  %sub295 = sub nsw i32 %conv288, %conv294, !dbg !6635
  store i32 %sub295, i32* %diff, align 4, !dbg !6636
  %226 = load i32, i32* %diff, align 4, !dbg !6637
  %tobool296 = icmp ne i32 %226, 0, !dbg !6637
  br i1 %tobool296, label %if.then297, label %if.end298, !dbg !6639

if.then297:                                       ; preds = %while.body282
  br label %not_equal, !dbg !6640

if.end298:                                        ; preds = %while.body282
  br label %while.cond275, !dbg !6614, !llvm.loop !6641

while.end299:                                     ; preds = %land.end281
  br label %if.end311, !dbg !6643

if.else300:                                       ; preds = %if.else272
  %227 = load i8*, i8** %texta, align 8, !dbg !6644
  %228 = load i8*, i8** %textb, align 8, !dbg !6646
  %229 = load i64, i64* %lena, align 8, !dbg !6647
  %230 = load i64, i64* %lenb, align 8, !dbg !6647
  %cmp301 = icmp ult i64 %229, %230, !dbg !6647
  br i1 %cmp301, label %cond.true303, label %cond.false304, !dbg !6647

cond.true303:                                     ; preds = %if.else300
  %231 = load i64, i64* %lena, align 8, !dbg !6647
  br label %cond.end305, !dbg !6647

cond.false304:                                    ; preds = %if.else300
  %232 = load i64, i64* %lenb, align 8, !dbg !6647
  br label %cond.end305, !dbg !6647

cond.end305:                                      ; preds = %cond.false304, %cond.true303
  %cond306 = phi i64 [ %231, %cond.true303 ], [ %232, %cond.false304 ], !dbg !6647
  %call307 = call i32 @memcmp(i8* %227, i8* %228, i64 %cond306) #14, !dbg !6648
  store i32 %call307, i32* %diff, align 4, !dbg !6649
  %233 = load i32, i32* %diff, align 4, !dbg !6650
  %tobool308 = icmp ne i32 %233, 0, !dbg !6650
  br i1 %tobool308, label %if.then309, label %if.end310, !dbg !6652

if.then309:                                       ; preds = %cond.end305
  br label %not_equal, !dbg !6653

if.end310:                                        ; preds = %cond.end305
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %while.end299
  %234 = load i64, i64* %lena, align 8, !dbg !6654
  %235 = load i64, i64* %lenb, align 8, !dbg !6655
  %cmp312 = icmp ult i64 %234, %235, !dbg !6656
  br i1 %cmp312, label %cond.true314, label %cond.false315, !dbg !6654

cond.true314:                                     ; preds = %if.end311
  br label %cond.end318, !dbg !6654

cond.false315:                                    ; preds = %if.end311
  %236 = load i64, i64* %lena, align 8, !dbg !6657
  %237 = load i64, i64* %lenb, align 8, !dbg !6658
  %cmp316 = icmp ne i64 %236, %237, !dbg !6659
  %conv317 = zext i1 %cmp316 to i32, !dbg !6659
  br label %cond.end318, !dbg !6654

cond.end318:                                      ; preds = %cond.false315, %cond.true314
  %cond319 = phi i32 [ -1, %cond.true314 ], [ %conv317, %cond.false315 ], !dbg !6654
  store i32 %cond319, i32* %diff, align 4, !dbg !6660
  br label %if.end320

if.end320:                                        ; preds = %cond.end318
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.then264
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.end260
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %if.end147
  %238 = load i32, i32* %diff, align 4, !dbg !6661
  %tobool324 = icmp ne i32 %238, 0, !dbg !6661
  br i1 %tobool324, label %if.then325, label %if.end326, !dbg !6663

if.then325:                                       ; preds = %if.end323
  br label %not_equal, !dbg !6664

if.end326:                                        ; preds = %if.end323
  %239 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6665
  %next = getelementptr inbounds %struct.keyfield, %struct.keyfield* %239, i32 0, i32 16, !dbg !6666, !ctir !153
  %240 = load %struct.keyfield*, %struct.keyfield** %next, align 8, !dbg !6666, !ctir !152
  store %struct.keyfield* %240, %struct.keyfield** %key, align 8, !dbg !6667
  %241 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6668
  %tobool327 = icmp ne %struct.keyfield* %241, null, !dbg !6668
  br i1 %tobool327, label %if.end329, label %if.then328, !dbg !6670

if.then328:                                       ; preds = %if.end326
  br label %while.end381, !dbg !6671

if.end329:                                        ; preds = %if.end326
  %242 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6672
  %eword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %242, i32 0, i32 2, !dbg !6674, !ctir !153
  %243 = load i64, i64* %eword, align 8, !dbg !6674, !ctir !52
  %cmp330 = icmp ne i64 %243, -1, !dbg !6675
  br i1 %cmp330, label %if.then332, label %if.else335, !dbg !6676

if.then332:                                       ; preds = %if.end329
  %244 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6677
  %245 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6678
  %call333 = call i8* @limfield(%struct.line* %244, %struct.keyfield* %245), !dbg !6679
  store i8* %call333, i8** %lima, align 8, !dbg !6680
  %246 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6681
  %247 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6682
  %call334 = call i8* @limfield(%struct.line* %246, %struct.keyfield* %247), !dbg !6683
  store i8* %call334, i8** %limb, align 8, !dbg !6684
  br label %if.end342, !dbg !6685

if.else335:                                       ; preds = %if.end329
  %248 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6686
  %text = getelementptr inbounds %struct.line, %struct.line* %248, i32 0, i32 0, !dbg !6687, !ctir !540
  %249 = load i8*, i8** %text, align 8, !dbg !6687, !ctir !7
  %250 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6688
  %length = getelementptr inbounds %struct.line, %struct.line* %250, i32 0, i32 1, !dbg !6689, !ctir !540
  %251 = load i64, i64* %length, align 8, !dbg !6689, !ctir !52
  %add.ptr336 = getelementptr inbounds i8, i8* %249, i64 %251, !dbg !6690, !ctir !8
  %add.ptr337 = getelementptr inbounds i8, i8* %add.ptr336, i64 -1, !dbg !6691, !ctir !8
  store i8* %add.ptr337, i8** %lima, align 8, !dbg !6692
  %252 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6693
  %text338 = getelementptr inbounds %struct.line, %struct.line* %252, i32 0, i32 0, !dbg !6694, !ctir !540
  %253 = load i8*, i8** %text338, align 8, !dbg !6694, !ctir !7
  %254 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6695
  %length339 = getelementptr inbounds %struct.line, %struct.line* %254, i32 0, i32 1, !dbg !6696, !ctir !540
  %255 = load i64, i64* %length339, align 8, !dbg !6696, !ctir !52
  %add.ptr340 = getelementptr inbounds i8, i8* %253, i64 %255, !dbg !6697, !ctir !8
  %add.ptr341 = getelementptr inbounds i8, i8* %add.ptr340, i64 -1, !dbg !6698, !ctir !8
  store i8* %add.ptr341, i8** %limb, align 8, !dbg !6699
  br label %if.end342

if.end342:                                        ; preds = %if.else335, %if.then332
  %256 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6700
  %sword = getelementptr inbounds %struct.keyfield, %struct.keyfield* %256, i32 0, i32 0, !dbg !6702, !ctir !153
  %257 = load i64, i64* %sword, align 8, !dbg !6702, !ctir !52
  %cmp343 = icmp ne i64 %257, -1, !dbg !6703
  br i1 %cmp343, label %if.then345, label %if.else348, !dbg !6704

if.then345:                                       ; preds = %if.end342
  %258 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6705
  %259 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6706
  %call346 = call i8* @begfield(%struct.line* %258, %struct.keyfield* %259), !dbg !6707
  store i8* %call346, i8** %texta, align 8, !dbg !6708
  %260 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6709
  %261 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6710
  %call347 = call i8* @begfield(%struct.line* %260, %struct.keyfield* %261), !dbg !6711
  store i8* %call347, i8** %textb, align 8, !dbg !6712
  br label %if.end380, !dbg !6713

if.else348:                                       ; preds = %if.end342
  %262 = load %struct.line*, %struct.line** %a.addr, align 8, !dbg !6714
  %text349 = getelementptr inbounds %struct.line, %struct.line* %262, i32 0, i32 0, !dbg !6716, !ctir !540
  %263 = load i8*, i8** %text349, align 8, !dbg !6716, !ctir !7
  store i8* %263, i8** %texta, align 8, !dbg !6717
  %264 = load %struct.line*, %struct.line** %b.addr, align 8, !dbg !6718
  %text350 = getelementptr inbounds %struct.line, %struct.line* %264, i32 0, i32 0, !dbg !6719, !ctir !540
  %265 = load i8*, i8** %text350, align 8, !dbg !6719, !ctir !7
  store i8* %265, i8** %textb, align 8, !dbg !6720
  %266 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6721
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %266, i32 0, i32 6, !dbg !6723, !ctir !153
  %267 = load i8, i8* %skipsblanks, align 8, !dbg !6723
  %tobool351 = trunc i8 %267 to i1, !dbg !6723, !ctir !162
  br i1 %tobool351, label %if.then352, label %if.end379, !dbg !6724

if.then352:                                       ; preds = %if.else348
  br label %while.cond353, !dbg !6725

while.cond353:                                    ; preds = %while.body363, %if.then352
  %268 = load i8*, i8** %texta, align 8, !dbg !6727
  %269 = load i8*, i8** %lima, align 8, !dbg !6728
  %cmp354 = icmp ult i8* %268, %269, !dbg !6729
  br i1 %cmp354, label %land.rhs356, label %land.end362, !dbg !6730

land.rhs356:                                      ; preds = %while.cond353
  %270 = load i8*, i8** %texta, align 8, !dbg !6731
  %271 = load i8, i8* %270, align 1, !dbg !6732, !ctir !8
  %call357 = call zeroext i8 @to_uchar(i8 signext %271), !dbg !6733
  %idxprom358 = zext i8 %call357 to i64, !dbg !6734
  %arrayidx359 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom358, !dbg !6734, !ctir !448
  %272 = load i8, i8* %arrayidx359, align 1, !dbg !6734
  %tobool360 = trunc i8 %272 to i1, !dbg !6734
  br label %land.end362

land.end362:                                      ; preds = %land.rhs356, %while.cond353
  %273 = phi i1 [ false, %while.cond353 ], [ %tobool360, %land.rhs356 ], !dbg !6735
  br i1 %273, label %while.body363, label %while.end365, !dbg !6725

while.body363:                                    ; preds = %land.end362
  %274 = load i8*, i8** %texta, align 8, !dbg !6736
  %incdec.ptr364 = getelementptr inbounds i8, i8* %274, i32 1, !dbg !6736, !ctir !8
  store i8* %incdec.ptr364, i8** %texta, align 8, !dbg !6736
  br label %while.cond353, !dbg !6725, !llvm.loop !6737

while.end365:                                     ; preds = %land.end362
  br label %while.cond366, !dbg !6739

while.cond366:                                    ; preds = %while.body376, %while.end365
  %275 = load i8*, i8** %textb, align 8, !dbg !6740
  %276 = load i8*, i8** %limb, align 8, !dbg !6741
  %cmp367 = icmp ult i8* %275, %276, !dbg !6742
  br i1 %cmp367, label %land.rhs369, label %land.end375, !dbg !6743

land.rhs369:                                      ; preds = %while.cond366
  %277 = load i8*, i8** %textb, align 8, !dbg !6744
  %278 = load i8, i8* %277, align 1, !dbg !6745, !ctir !8
  %call370 = call zeroext i8 @to_uchar(i8 signext %278), !dbg !6746
  %idxprom371 = zext i8 %call370 to i64, !dbg !6747
  %arrayidx372 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom371, !dbg !6747, !ctir !448
  %279 = load i8, i8* %arrayidx372, align 1, !dbg !6747
  %tobool373 = trunc i8 %279 to i1, !dbg !6747
  br label %land.end375

land.end375:                                      ; preds = %land.rhs369, %while.cond366
  %280 = phi i1 [ false, %while.cond366 ], [ %tobool373, %land.rhs369 ], !dbg !6735
  br i1 %280, label %while.body376, label %while.end378, !dbg !6739

while.body376:                                    ; preds = %land.end375
  %281 = load i8*, i8** %textb, align 8, !dbg !6748
  %incdec.ptr377 = getelementptr inbounds i8, i8* %281, i32 1, !dbg !6748, !ctir !8
  store i8* %incdec.ptr377, i8** %textb, align 8, !dbg !6748
  br label %while.cond366, !dbg !6739, !llvm.loop !6749

while.end378:                                     ; preds = %land.end375
  br label %if.end379, !dbg !6751

if.end379:                                        ; preds = %while.end378, %if.else348
  br label %if.end380

if.end380:                                        ; preds = %if.end379, %if.then345
  br label %while.body, !dbg !6283, !llvm.loop !6752

while.end381:                                     ; preds = %if.then328
  store i32 0, i32* %retval, align 4, !dbg !6754
  br label %return, !dbg !6754

greater:                                          ; preds = %if.then271
  call void @llvm.dbg.label(metadata !6755), !dbg !6756
  store i32 1, i32* %diff, align 4, !dbg !6757
  br label %not_equal, !dbg !6758

not_equal:                                        ; preds = %greater, %if.then325, %if.then309, %if.then297, %if.then249, %if.then196
  call void @llvm.dbg.label(metadata !6759), !dbg !6760
  %282 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !6761
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %282, i32 0, i32 13, !dbg !6762, !ctir !153
  %283 = load i8, i8* %reverse, align 1, !dbg !6762
  %tobool382 = trunc i8 %283 to i1, !dbg !6762, !ctir !162
  br i1 %tobool382, label %cond.true384, label %cond.false386, !dbg !6761

cond.true384:                                     ; preds = %not_equal
  %284 = load i32, i32* %diff, align 4, !dbg !6763
  %sub385 = sub nsw i32 0, %284, !dbg !6764
  br label %cond.end387, !dbg !6761

cond.false386:                                    ; preds = %not_equal
  %285 = load i32, i32* %diff, align 4, !dbg !6765
  br label %cond.end387, !dbg !6761

cond.end387:                                      ; preds = %cond.false386, %cond.true384
  %cond388 = phi i32 [ %sub385, %cond.true384 ], [ %285, %cond.false386 ], !dbg !6761
  store i32 %cond388, i32* %retval, align 4, !dbg !6766
  br label %return, !dbg !6766

return:                                           ; preds = %cond.end387, %while.end381
  %286 = load i32, i32* %retval, align 4, !dbg !6767
  ret i32 %286, !dbg !6767
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @numcompare(i8* %a, i8* %b) #4 !dbg !6768 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !6771, metadata !DIExpression()), !dbg !6772
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  br label %while.cond, !dbg !6775

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %a.addr, align 8, !dbg !6776
  %1 = load i8, i8* %0, align 1, !dbg !6777, !ctir !91
  %call = call zeroext i8 @to_uchar(i8 signext %1), !dbg !6778
  %idxprom = zext i8 %call to i64, !dbg !6779
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !6779, !ctir !448
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6779
  %tobool = trunc i8 %2 to i1, !dbg !6779
  br i1 %tobool, label %while.body, label %while.end, !dbg !6775

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %a.addr, align 8, !dbg !6780
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6780, !ctir !91
  store i8* %incdec.ptr, i8** %a.addr, align 8, !dbg !6780
  br label %while.cond, !dbg !6775, !llvm.loop !6781

while.end:                                        ; preds = %while.cond
  br label %while.cond1, !dbg !6782

while.cond1:                                      ; preds = %while.body6, %while.end
  %4 = load i8*, i8** %b.addr, align 8, !dbg !6783
  %5 = load i8, i8* %4, align 1, !dbg !6784, !ctir !91
  %call2 = call zeroext i8 @to_uchar(i8 signext %5), !dbg !6785
  %idxprom3 = zext i8 %call2 to i64, !dbg !6786
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom3, !dbg !6786, !ctir !448
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !6786
  %tobool5 = trunc i8 %6 to i1, !dbg !6786
  br i1 %tobool5, label %while.body6, label %while.end8, !dbg !6782

while.body6:                                      ; preds = %while.cond1
  %7 = load i8*, i8** %b.addr, align 8, !dbg !6787
  %incdec.ptr7 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !6787, !ctir !91
  store i8* %incdec.ptr7, i8** %b.addr, align 8, !dbg !6787
  br label %while.cond1, !dbg !6782, !llvm.loop !6788

while.end8:                                       ; preds = %while.cond1
  %8 = load i8*, i8** %a.addr, align 8, !dbg !6789
  %9 = load i8*, i8** %b.addr, align 8, !dbg !6790
  %10 = load i32, i32* @decimal_point, align 4, !dbg !6791
  %11 = load i32, i32* @thousands_sep, align 4, !dbg !6792
  %call9 = call i32 @strnumcmp(i8* %8, i8* %9, i32 %10, i32 %11), !dbg !6793
  ret i32 %call9, !dbg !6794
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @general_numcompare(i8* %sa, i8* %sb) #4 !dbg !6795 {
entry:
  %retval = alloca i32, align 4
  %sa.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %ea = alloca i8*, align 8, !ctir !7
  %eb = alloca i8*, align 8, !ctir !7
  %a = alloca x86_fp80, align 16, !ctir !557
  %b = alloca x86_fp80, align 16, !ctir !557
  store i8* %sa, i8** %sa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sa.addr, metadata !6796, metadata !DIExpression()), !dbg !6797
  store i8* %sb, i8** %sb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sb.addr, metadata !6798, metadata !DIExpression()), !dbg !6799
  call void @llvm.dbg.declare(metadata i8** %ea, metadata !6800, metadata !DIExpression()), !dbg !6801
  call void @llvm.dbg.declare(metadata i8** %eb, metadata !6802, metadata !DIExpression()), !dbg !6803
  call void @llvm.dbg.declare(metadata x86_fp80* %a, metadata !6804, metadata !DIExpression()), !dbg !6805
  %0 = load i8*, i8** %sa.addr, align 8, !dbg !6806
  %call = call x86_fp80 @strtold(i8* %0, i8** %ea) #12, !dbg !6807
  store x86_fp80 %call, x86_fp80* %a, align 16, !dbg !6805
  call void @llvm.dbg.declare(metadata x86_fp80* %b, metadata !6808, metadata !DIExpression()), !dbg !6809
  %1 = load i8*, i8** %sb.addr, align 8, !dbg !6810
  %call1 = call x86_fp80 @strtold(i8* %1, i8** %eb) #12, !dbg !6811
  store x86_fp80 %call1, x86_fp80* %b, align 16, !dbg !6809
  %2 = load i8*, i8** %sa.addr, align 8, !dbg !6812
  %3 = load i8*, i8** %ea, align 8, !dbg !6814
  %cmp = icmp eq i8* %2, %3, !dbg !6815
  br i1 %cmp, label %if.then, label %if.end, !dbg !6816

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %sb.addr, align 8, !dbg !6817
  %5 = load i8*, i8** %eb, align 8, !dbg !6818
  %cmp2 = icmp eq i8* %4, %5, !dbg !6819
  %6 = zext i1 %cmp2 to i64, !dbg !6817
  %cond = select i1 %cmp2, i32 0, i32 -1, !dbg !6817
  store i32 %cond, i32* %retval, align 4, !dbg !6820
  br label %return, !dbg !6820

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %sb.addr, align 8, !dbg !6821
  %8 = load i8*, i8** %eb, align 8, !dbg !6823
  %cmp3 = icmp eq i8* %7, %8, !dbg !6824
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6825

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !6826
  br label %return, !dbg !6826

if.end5:                                          ; preds = %if.end
  %9 = load x86_fp80, x86_fp80* %a, align 16, !dbg !6827
  %10 = load x86_fp80, x86_fp80* %b, align 16, !dbg !6828
  %cmp6 = fcmp olt x86_fp80 %9, %10, !dbg !6829
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !6827

cond.true:                                        ; preds = %if.end5
  br label %cond.end27, !dbg !6827

cond.false:                                       ; preds = %if.end5
  %11 = load x86_fp80, x86_fp80* %a, align 16, !dbg !6830
  %12 = load x86_fp80, x86_fp80* %b, align 16, !dbg !6831
  %cmp7 = fcmp ogt x86_fp80 %11, %12, !dbg !6832
  br i1 %cmp7, label %cond.true8, label %cond.false9, !dbg !6830

cond.true8:                                       ; preds = %cond.false
  br label %cond.end25, !dbg !6830

cond.false9:                                      ; preds = %cond.false
  %13 = load x86_fp80, x86_fp80* %a, align 16, !dbg !6833
  %14 = load x86_fp80, x86_fp80* %b, align 16, !dbg !6834
  %cmp10 = fcmp oeq x86_fp80 %13, %14, !dbg !6835
  br i1 %cmp10, label %cond.true11, label %cond.false12, !dbg !6833

cond.true11:                                      ; preds = %cond.false9
  br label %cond.end23, !dbg !6833

cond.false12:                                     ; preds = %cond.false9
  %15 = load x86_fp80, x86_fp80* %b, align 16, !dbg !6836
  %16 = load x86_fp80, x86_fp80* %b, align 16, !dbg !6837
  %cmp13 = fcmp oeq x86_fp80 %15, %16, !dbg !6838
  br i1 %cmp13, label %cond.true14, label %cond.false15, !dbg !6836

cond.true14:                                      ; preds = %cond.false12
  br label %cond.end21, !dbg !6836

cond.false15:                                     ; preds = %cond.false12
  %17 = load x86_fp80, x86_fp80* %a, align 16, !dbg !6839
  %18 = load x86_fp80, x86_fp80* %a, align 16, !dbg !6840
  %cmp16 = fcmp oeq x86_fp80 %17, %18, !dbg !6841
  br i1 %cmp16, label %cond.true17, label %cond.false18, !dbg !6839

cond.true17:                                      ; preds = %cond.false15
  br label %cond.end, !dbg !6839

cond.false18:                                     ; preds = %cond.false15
  %19 = load i8*, i8** %sa.addr, align 8, !dbg !6842
  %20 = load i8*, i8** %sb.addr, align 8, !dbg !6843
  %call19 = call i32 @nan_compare(i8* %19, i8* %20), !dbg !6844
  br label %cond.end, !dbg !6839

cond.end:                                         ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 1, %cond.true17 ], [ %call19, %cond.false18 ], !dbg !6839
  br label %cond.end21, !dbg !6836

cond.end21:                                       ; preds = %cond.end, %cond.true14
  %cond22 = phi i32 [ -1, %cond.true14 ], [ %cond20, %cond.end ], !dbg !6836
  br label %cond.end23, !dbg !6833

cond.end23:                                       ; preds = %cond.end21, %cond.true11
  %cond24 = phi i32 [ 0, %cond.true11 ], [ %cond22, %cond.end21 ], !dbg !6833
  br label %cond.end25, !dbg !6830

cond.end25:                                       ; preds = %cond.end23, %cond.true8
  %cond26 = phi i32 [ 1, %cond.true8 ], [ %cond24, %cond.end23 ], !dbg !6830
  br label %cond.end27, !dbg !6827

cond.end27:                                       ; preds = %cond.end25, %cond.true
  %cond28 = phi i32 [ -1, %cond.true ], [ %cond26, %cond.end25 ], !dbg !6827
  store i32 %cond28, i32* %retval, align 4, !dbg !6845
  br label %return, !dbg !6845

return:                                           ; preds = %cond.end27, %if.then4, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !6846
  ret i32 %21, !dbg !6846
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @human_numcompare(i8* %a, i8* %b) #4 !dbg !6847 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %diff = alloca i32, align 4, !ctir !5
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !6848, metadata !DIExpression()), !dbg !6849
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !6850, metadata !DIExpression()), !dbg !6851
  br label %while.cond, !dbg !6852

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %a.addr, align 8, !dbg !6853
  %1 = load i8, i8* %0, align 1, !dbg !6854, !ctir !91
  %call = call zeroext i8 @to_uchar(i8 signext %1), !dbg !6855
  %idxprom = zext i8 %call to i64, !dbg !6856
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom, !dbg !6856, !ctir !448
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6856
  %tobool = trunc i8 %2 to i1, !dbg !6856
  br i1 %tobool, label %while.body, label %while.end, !dbg !6852

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %a.addr, align 8, !dbg !6857
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6857, !ctir !91
  store i8* %incdec.ptr, i8** %a.addr, align 8, !dbg !6857
  br label %while.cond, !dbg !6852, !llvm.loop !6858

while.end:                                        ; preds = %while.cond
  br label %while.cond1, !dbg !6859

while.cond1:                                      ; preds = %while.body6, %while.end
  %4 = load i8*, i8** %b.addr, align 8, !dbg !6860
  %5 = load i8, i8* %4, align 1, !dbg !6861, !ctir !91
  %call2 = call zeroext i8 @to_uchar(i8 signext %5), !dbg !6862
  %idxprom3 = zext i8 %call2 to i64, !dbg !6863
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @blanks, i64 0, i64 %idxprom3, !dbg !6863, !ctir !448
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !6863
  %tobool5 = trunc i8 %6 to i1, !dbg !6863
  br i1 %tobool5, label %while.body6, label %while.end8, !dbg !6859

while.body6:                                      ; preds = %while.cond1
  %7 = load i8*, i8** %b.addr, align 8, !dbg !6864
  %incdec.ptr7 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !6864, !ctir !91
  store i8* %incdec.ptr7, i8** %b.addr, align 8, !dbg !6864
  br label %while.cond1, !dbg !6859, !llvm.loop !6865

while.end8:                                       ; preds = %while.cond1
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !6866, metadata !DIExpression()), !dbg !6867
  %8 = load i8*, i8** %a.addr, align 8, !dbg !6868
  %call9 = call i32 @find_unit_order(i8* %8) #14, !dbg !6869
  %9 = load i8*, i8** %b.addr, align 8, !dbg !6870
  %call10 = call i32 @find_unit_order(i8* %9) #14, !dbg !6871
  %sub = sub nsw i32 %call9, %call10, !dbg !6872
  store i32 %sub, i32* %diff, align 4, !dbg !6867
  %10 = load i32, i32* %diff, align 4, !dbg !6873
  %tobool11 = icmp ne i32 %10, 0, !dbg !6873
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !6873

cond.true:                                        ; preds = %while.end8
  %11 = load i32, i32* %diff, align 4, !dbg !6874
  br label %cond.end, !dbg !6873

cond.false:                                       ; preds = %while.end8
  %12 = load i8*, i8** %a.addr, align 8, !dbg !6875
  %13 = load i8*, i8** %b.addr, align 8, !dbg !6876
  %14 = load i32, i32* @decimal_point, align 4, !dbg !6877
  %15 = load i32, i32* @thousands_sep, align 4, !dbg !6878
  %call12 = call i32 @strnumcmp(i8* %12, i8* %13, i32 %14, i32 %15), !dbg !6879
  br label %cond.end, !dbg !6873

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %call12, %cond.false ], !dbg !6873
  ret i32 %cond, !dbg !6880
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @compare_random(i8* noalias %texta, i64 %lena, i8* noalias %textb, i64 %lenb) #4 !dbg !6881 {
entry:
  %texta.addr = alloca i8*, align 8
  %lena.addr = alloca i64, align 8
  %textb.addr = alloca i8*, align 8
  %lenb.addr = alloca i64, align 8
  %xfrm_diff = alloca i32, align 4, !ctir !5
  %stackbuf = alloca [4000 x i8], align 16, !ctir !554
  %buf = alloca i8*, align 8, !ctir !7
  %bufsize = alloca i64, align 8, !ctir !52
  %allocated = alloca i8*, align 8, !ctir !47
  %dig = alloca [2 x [4 x i32]], align 16, !ctir !559
  %s = alloca [2 x %struct.md5_ctx], align 16, !ctir !562
  %lima = alloca i8*, align 8, !ctir !90
  %limb = alloca i8*, align 8, !ctir !90
  %guess_bufsize = alloca i64, align 8, !ctir !52
  %sizea = alloca i64, align 8, !ctir !52
  %a_fits = alloca i8, align 1, !ctir !162
  %sizeb = alloca i64, align 8, !ctir !52
  %diff = alloca i32, align 4, !ctir !5
  store i8* %texta, i8** %texta.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %texta.addr, metadata !6885, metadata !DIExpression()), !dbg !6886
  store i64 %lena, i64* %lena.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %lena.addr, metadata !6887, metadata !DIExpression()), !dbg !6888
  store i8* %textb, i8** %textb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %textb.addr, metadata !6889, metadata !DIExpression()), !dbg !6890
  store i64 %lenb, i64* %lenb.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %lenb.addr, metadata !6891, metadata !DIExpression()), !dbg !6892
  call void @llvm.dbg.declare(metadata i32* %xfrm_diff, metadata !6893, metadata !DIExpression()), !dbg !6894
  store i32 0, i32* %xfrm_diff, align 4, !dbg !6894
  call void @llvm.dbg.declare(metadata [4000 x i8]* %stackbuf, metadata !6895, metadata !DIExpression()), !dbg !6896
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !6897, metadata !DIExpression()), !dbg !6898
  %arraydecay = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0, !dbg !6899, !ctir !554
  store i8* %arraydecay, i8** %buf, align 8, !dbg !6898
  call void @llvm.dbg.declare(metadata i64* %bufsize, metadata !6900, metadata !DIExpression()), !dbg !6901
  store i64 4000, i64* %bufsize, align 8, !dbg !6901
  call void @llvm.dbg.declare(metadata i8** %allocated, metadata !6902, metadata !DIExpression()), !dbg !6903
  store i8* null, i8** %allocated, align 8, !dbg !6903
  call void @llvm.dbg.declare(metadata [2 x [4 x i32]]* %dig, metadata !6904, metadata !DIExpression()), !dbg !6905
  call void @llvm.dbg.declare(metadata [2 x %struct.md5_ctx]* %s, metadata !6906, metadata !DIExpression()), !dbg !6907
  %arrayidx = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0, !dbg !6908, !ctir !562
  %arrayidx1 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1, !dbg !6909, !ctir !562
  %0 = bitcast %struct.md5_ctx* %arrayidx1 to i8*, !dbg !6910
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 bitcast (%struct.md5_ctx* @random_md5_state to i8*), i64 156, i1 false), !dbg !6910
  %1 = bitcast %struct.md5_ctx* %arrayidx to i8*, !dbg !6911
  %2 = bitcast %struct.md5_ctx* %arrayidx1 to i8*, !dbg !6911
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1, i8* align 4 %2, i64 156, i1 false), !dbg !6911
  %3 = load i8, i8* @hard_LC_COLLATE, align 1, !dbg !6912
  %tobool = trunc i8 %3 to i1, !dbg !6912
  br i1 %tobool, label %if.then, label %if.end97, !dbg !6914

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %lima, metadata !6915, metadata !DIExpression()), !dbg !6917
  %4 = load i8*, i8** %texta.addr, align 8, !dbg !6918
  %5 = load i64, i64* %lena.addr, align 8, !dbg !6919
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6920, !ctir !8
  store i8* %add.ptr, i8** %lima, align 8, !dbg !6917
  call void @llvm.dbg.declare(metadata i8** %limb, metadata !6921, metadata !DIExpression()), !dbg !6922
  %6 = load i8*, i8** %textb.addr, align 8, !dbg !6923
  %7 = load i64, i64* %lenb.addr, align 8, !dbg !6924
  %add.ptr2 = getelementptr inbounds i8, i8* %6, i64 %7, !dbg !6925, !ctir !8
  store i8* %add.ptr2, i8** %limb, align 8, !dbg !6922
  br label %while.body, !dbg !6926

while.body:                                       ; preds = %if.then, %if.end96
  call void @llvm.dbg.declare(metadata i64* %guess_bufsize, metadata !6927, metadata !DIExpression()), !dbg !6929
  %8 = load i64, i64* %lena.addr, align 8, !dbg !6930
  %9 = load i64, i64* %lenb.addr, align 8, !dbg !6931
  %add = add i64 %8, %9, !dbg !6932
  %mul = mul i64 3, %add, !dbg !6933
  %add3 = add i64 %mul, 2, !dbg !6934
  store i64 %add3, i64* %guess_bufsize, align 8, !dbg !6929
  %10 = load i64, i64* %bufsize, align 8, !dbg !6935
  %11 = load i64, i64* %guess_bufsize, align 8, !dbg !6937
  %cmp = icmp ult i64 %10, %11, !dbg !6938
  br i1 %cmp, label %if.then4, label %if.end12, !dbg !6939

if.then4:                                         ; preds = %while.body
  %12 = load i64, i64* %guess_bufsize, align 8, !dbg !6940
  %13 = load i64, i64* %bufsize, align 8, !dbg !6940
  %mul5 = mul i64 %13, 3, !dbg !6940
  %div = udiv i64 %mul5, 2, !dbg !6940
  %cmp6 = icmp ugt i64 %12, %div, !dbg !6940
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !6940

cond.true:                                        ; preds = %if.then4
  %14 = load i64, i64* %guess_bufsize, align 8, !dbg !6940
  br label %cond.end, !dbg !6940

cond.false:                                       ; preds = %if.then4
  %15 = load i64, i64* %bufsize, align 8, !dbg !6940
  %mul7 = mul i64 %15, 3, !dbg !6940
  %div8 = udiv i64 %mul7, 2, !dbg !6940
  br label %cond.end, !dbg !6940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %div8, %cond.false ], !dbg !6940
  store i64 %cond, i64* %bufsize, align 8, !dbg !6942
  %16 = load i8*, i8** %allocated, align 8, !dbg !6943
  call void @free(i8* %16) #12, !dbg !6944
  %17 = load i64, i64* %bufsize, align 8, !dbg !6945
  %call = call noalias i8* @malloc(i64 %17) #12, !dbg !6946
  store i8* %call, i8** %allocated, align 8, !dbg !6947
  store i8* %call, i8** %buf, align 8, !dbg !6948
  %18 = load i8*, i8** %buf, align 8, !dbg !6949
  %tobool9 = icmp ne i8* %18, null, !dbg !6949
  br i1 %tobool9, label %if.end, label %if.then10, !dbg !6951

if.then10:                                        ; preds = %cond.end
  %arraydecay11 = getelementptr inbounds [4000 x i8], [4000 x i8]* %stackbuf, i64 0, i64 0, !dbg !6952, !ctir !554
  store i8* %arraydecay11, i8** %buf, align 8, !dbg !6954
  store i64 4000, i64* %bufsize, align 8, !dbg !6955
  br label %if.end, !dbg !6956

if.end:                                           ; preds = %if.then10, %cond.end
  br label %if.end12, !dbg !6957

if.end12:                                         ; preds = %if.end, %while.body
  call void @llvm.dbg.declare(metadata i64* %sizea, metadata !6958, metadata !DIExpression()), !dbg !6959
  %19 = load i8*, i8** %texta.addr, align 8, !dbg !6960
  %20 = load i8*, i8** %lima, align 8, !dbg !6961
  %cmp13 = icmp ult i8* %19, %20, !dbg !6962
  br i1 %cmp13, label %cond.true14, label %cond.false17, !dbg !6960

cond.true14:                                      ; preds = %if.end12
  %21 = load i8*, i8** %buf, align 8, !dbg !6963
  %22 = load i8*, i8** %texta.addr, align 8, !dbg !6964
  %23 = load i64, i64* %bufsize, align 8, !dbg !6965
  %call15 = call i64 @xstrxfrm(i8* %21, i8* %22, i64 %23), !dbg !6966
  %add16 = add i64 %call15, 1, !dbg !6967
  br label %cond.end18, !dbg !6960

cond.false17:                                     ; preds = %if.end12
  br label %cond.end18, !dbg !6960

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi i64 [ %add16, %cond.true14 ], [ 0, %cond.false17 ], !dbg !6960
  store i64 %cond19, i64* %sizea, align 8, !dbg !6959
  call void @llvm.dbg.declare(metadata i8* %a_fits, metadata !6968, metadata !DIExpression()), !dbg !6969
  %24 = load i64, i64* %sizea, align 8, !dbg !6970
  %25 = load i64, i64* %bufsize, align 8, !dbg !6971
  %cmp20 = icmp ule i64 %24, %25, !dbg !6972
  %frombool = zext i1 %cmp20 to i8, !dbg !6969
  store i8 %frombool, i8* %a_fits, align 1, !dbg !6969
  call void @llvm.dbg.declare(metadata i64* %sizeb, metadata !6973, metadata !DIExpression()), !dbg !6974
  %26 = load i8*, i8** %textb.addr, align 8, !dbg !6975
  %27 = load i8*, i8** %limb, align 8, !dbg !6976
  %cmp21 = icmp ult i8* %26, %27, !dbg !6977
  br i1 %cmp21, label %cond.true22, label %cond.false36, !dbg !6975

cond.true22:                                      ; preds = %cond.end18
  %28 = load i8, i8* %a_fits, align 1, !dbg !6978
  %tobool23 = trunc i8 %28 to i1, !dbg !6978
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !6978

cond.true24:                                      ; preds = %cond.true22
  %29 = load i8*, i8** %buf, align 8, !dbg !6979
  %30 = load i64, i64* %sizea, align 8, !dbg !6980
  %add.ptr25 = getelementptr inbounds i8, i8* %29, i64 %30, !dbg !6981, !ctir !8
  br label %cond.end27, !dbg !6978

cond.false26:                                     ; preds = %cond.true22
  br label %cond.end27, !dbg !6978

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi i8* [ %add.ptr25, %cond.true24 ], [ null, %cond.false26 ], !dbg !6978
  %31 = load i8*, i8** %textb.addr, align 8, !dbg !6982
  %32 = load i8, i8* %a_fits, align 1, !dbg !6983
  %tobool29 = trunc i8 %32 to i1, !dbg !6983
  br i1 %tobool29, label %cond.true30, label %cond.false31, !dbg !6983

cond.true30:                                      ; preds = %cond.end27
  %33 = load i64, i64* %bufsize, align 8, !dbg !6984
  %34 = load i64, i64* %sizea, align 8, !dbg !6985
  %sub = sub i64 %33, %34, !dbg !6986
  br label %cond.end32, !dbg !6983

cond.false31:                                     ; preds = %cond.end27
  br label %cond.end32, !dbg !6983

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i64 [ %sub, %cond.true30 ], [ 0, %cond.false31 ], !dbg !6983
  %call34 = call i64 @xstrxfrm(i8* %cond28, i8* %31, i64 %cond33), !dbg !6987
  %add35 = add i64 %call34, 1, !dbg !6988
  br label %cond.end37, !dbg !6975

cond.false36:                                     ; preds = %cond.end18
  br label %cond.end37, !dbg !6975

cond.end37:                                       ; preds = %cond.false36, %cond.end32
  %cond38 = phi i64 [ %add35, %cond.end32 ], [ 0, %cond.false36 ], !dbg !6975
  store i64 %cond38, i64* %sizeb, align 8, !dbg !6974
  %35 = load i8, i8* %a_fits, align 1, !dbg !6989
  %tobool39 = trunc i8 %35 to i1, !dbg !6989
  br i1 %tobool39, label %land.lhs.true, label %if.then42, !dbg !6991

land.lhs.true:                                    ; preds = %cond.end37
  %36 = load i64, i64* %sizea, align 8, !dbg !6992
  %37 = load i64, i64* %sizeb, align 8, !dbg !6993
  %add40 = add i64 %36, %37, !dbg !6994
  %38 = load i64, i64* %bufsize, align 8, !dbg !6995
  %cmp41 = icmp ule i64 %add40, %38, !dbg !6996
  br i1 %cmp41, label %if.end59, label %if.then42, !dbg !6997

if.then42:                                        ; preds = %land.lhs.true, %cond.end37
  %39 = load i64, i64* %sizea, align 8, !dbg !6998
  %40 = load i64, i64* %sizeb, align 8, !dbg !7000
  %add43 = add i64 %39, %40, !dbg !7001
  store i64 %add43, i64* %bufsize, align 8, !dbg !7002
  %41 = load i64, i64* %bufsize, align 8, !dbg !7003
  %cmp44 = icmp ult i64 %41, 6148914691236517205, !dbg !7005
  br i1 %cmp44, label %if.then45, label %if.end48, !dbg !7006

if.then45:                                        ; preds = %if.then42
  %42 = load i64, i64* %bufsize, align 8, !dbg !7007
  %mul46 = mul i64 %42, 3, !dbg !7008
  %div47 = udiv i64 %mul46, 2, !dbg !7009
  store i64 %div47, i64* %bufsize, align 8, !dbg !7010
  br label %if.end48, !dbg !7011

if.end48:                                         ; preds = %if.then45, %if.then42
  %43 = load i8*, i8** %allocated, align 8, !dbg !7012
  call void @free(i8* %43) #12, !dbg !7013
  %44 = load i64, i64* %bufsize, align 8, !dbg !7014
  %call49 = call noalias i8* @xmalloc(i64 %44), !dbg !7015
  store i8* %call49, i8** %allocated, align 8, !dbg !7016
  store i8* %call49, i8** %buf, align 8, !dbg !7017
  %45 = load i8*, i8** %texta.addr, align 8, !dbg !7018
  %46 = load i8*, i8** %lima, align 8, !dbg !7020
  %cmp50 = icmp ult i8* %45, %46, !dbg !7021
  br i1 %cmp50, label %if.then51, label %if.end53, !dbg !7022

if.then51:                                        ; preds = %if.end48
  %47 = load i8*, i8** %buf, align 8, !dbg !7023
  %48 = load i8*, i8** %texta.addr, align 8, !dbg !7024
  %49 = load i64, i64* %sizea, align 8, !dbg !7025
  %call52 = call i64 @strxfrm(i8* %47, i8* %48, i64 %49) #12, !dbg !7026
  br label %if.end53, !dbg !7026

if.end53:                                         ; preds = %if.then51, %if.end48
  %50 = load i8*, i8** %textb.addr, align 8, !dbg !7027
  %51 = load i8*, i8** %limb, align 8, !dbg !7029
  %cmp54 = icmp ult i8* %50, %51, !dbg !7030
  br i1 %cmp54, label %if.then55, label %if.end58, !dbg !7031

if.then55:                                        ; preds = %if.end53
  %52 = load i8*, i8** %buf, align 8, !dbg !7032
  %53 = load i64, i64* %sizea, align 8, !dbg !7033
  %add.ptr56 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !7034, !ctir !8
  %54 = load i8*, i8** %textb.addr, align 8, !dbg !7035
  %55 = load i64, i64* %sizeb, align 8, !dbg !7036
  %call57 = call i64 @strxfrm(i8* %add.ptr56, i8* %54, i64 %55) #12, !dbg !7037
  br label %if.end58, !dbg !7037

if.end58:                                         ; preds = %if.then55, %if.end53
  br label %if.end59, !dbg !7038

if.end59:                                         ; preds = %if.end58, %land.lhs.true
  %56 = load i8*, i8** %texta.addr, align 8, !dbg !7039
  %57 = load i8*, i8** %lima, align 8, !dbg !7041
  %cmp60 = icmp ult i8* %56, %57, !dbg !7042
  br i1 %cmp60, label %if.then61, label %if.end65, !dbg !7043

if.then61:                                        ; preds = %if.end59
  %58 = load i8*, i8** %texta.addr, align 8, !dbg !7044
  %call62 = call i64 @strlen(i8* %58) #14, !dbg !7045
  %add63 = add i64 %call62, 1, !dbg !7046
  %59 = load i8*, i8** %texta.addr, align 8, !dbg !7047
  %add.ptr64 = getelementptr inbounds i8, i8* %59, i64 %add63, !dbg !7047, !ctir !8
  store i8* %add.ptr64, i8** %texta.addr, align 8, !dbg !7047
  br label %if.end65, !dbg !7048

if.end65:                                         ; preds = %if.then61, %if.end59
  %60 = load i8*, i8** %textb.addr, align 8, !dbg !7049
  %61 = load i8*, i8** %limb, align 8, !dbg !7051
  %cmp66 = icmp ult i8* %60, %61, !dbg !7052
  br i1 %cmp66, label %if.then67, label %if.end71, !dbg !7053

if.then67:                                        ; preds = %if.end65
  %62 = load i8*, i8** %textb.addr, align 8, !dbg !7054
  %call68 = call i64 @strlen(i8* %62) #14, !dbg !7055
  %add69 = add i64 %call68, 1, !dbg !7056
  %63 = load i8*, i8** %textb.addr, align 8, !dbg !7057
  %add.ptr70 = getelementptr inbounds i8, i8* %63, i64 %add69, !dbg !7057, !ctir !8
  store i8* %add.ptr70, i8** %textb.addr, align 8, !dbg !7057
  br label %if.end71, !dbg !7058

if.end71:                                         ; preds = %if.then67, %if.end65
  %64 = load i8*, i8** %texta.addr, align 8, !dbg !7059
  %65 = load i8*, i8** %lima, align 8, !dbg !7061
  %cmp72 = icmp ult i8* %64, %65, !dbg !7062
  br i1 %cmp72, label %if.end76, label %lor.lhs.false, !dbg !7063

lor.lhs.false:                                    ; preds = %if.end71
  %66 = load i8*, i8** %textb.addr, align 8, !dbg !7064
  %67 = load i8*, i8** %limb, align 8, !dbg !7065
  %cmp73 = icmp ult i8* %66, %67, !dbg !7066
  br i1 %cmp73, label %if.end76, label %if.then74, !dbg !7067

if.then74:                                        ; preds = %lor.lhs.false
  %68 = load i64, i64* %sizea, align 8, !dbg !7068
  store i64 %68, i64* %lena.addr, align 8, !dbg !7070
  %69 = load i8*, i8** %buf, align 8, !dbg !7071
  store i8* %69, i8** %texta.addr, align 8, !dbg !7072
  %70 = load i64, i64* %sizeb, align 8, !dbg !7073
  store i64 %70, i64* %lenb.addr, align 8, !dbg !7074
  %71 = load i8*, i8** %buf, align 8, !dbg !7075
  %72 = load i64, i64* %sizea, align 8, !dbg !7076
  %add.ptr75 = getelementptr inbounds i8, i8* %71, i64 %72, !dbg !7077, !ctir !8
  store i8* %add.ptr75, i8** %textb.addr, align 8, !dbg !7078
  br label %while.end, !dbg !7079

if.end76:                                         ; preds = %lor.lhs.false, %if.end71
  %73 = load i8*, i8** %buf, align 8, !dbg !7080
  %74 = load i64, i64* %sizea, align 8, !dbg !7081
  %arrayidx77 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0, !dbg !7082, !ctir !562
  call void @md5_process_bytes(i8* %73, i64 %74, %struct.md5_ctx* %arrayidx77) #12, !dbg !7083
  %75 = load i8*, i8** %buf, align 8, !dbg !7084
  %76 = load i64, i64* %sizea, align 8, !dbg !7085
  %add.ptr78 = getelementptr inbounds i8, i8* %75, i64 %76, !dbg !7086, !ctir !8
  %77 = load i64, i64* %sizeb, align 8, !dbg !7087
  %arrayidx79 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1, !dbg !7088, !ctir !562
  call void @md5_process_bytes(i8* %add.ptr78, i64 %77, %struct.md5_ctx* %arrayidx79) #12, !dbg !7089
  %78 = load i32, i32* %xfrm_diff, align 4, !dbg !7090
  %tobool80 = icmp ne i32 %78, 0, !dbg !7090
  br i1 %tobool80, label %if.end96, label %if.then81, !dbg !7092

if.then81:                                        ; preds = %if.end76
  %79 = load i8*, i8** %buf, align 8, !dbg !7093
  %80 = load i8*, i8** %buf, align 8, !dbg !7095
  %81 = load i64, i64* %sizea, align 8, !dbg !7096
  %add.ptr82 = getelementptr inbounds i8, i8* %80, i64 %81, !dbg !7097, !ctir !8
  %82 = load i64, i64* %sizea, align 8, !dbg !7098
  %83 = load i64, i64* %sizeb, align 8, !dbg !7098
  %cmp83 = icmp ult i64 %82, %83, !dbg !7098
  br i1 %cmp83, label %cond.true84, label %cond.false85, !dbg !7098

cond.true84:                                      ; preds = %if.then81
  %84 = load i64, i64* %sizea, align 8, !dbg !7098
  br label %cond.end86, !dbg !7098

cond.false85:                                     ; preds = %if.then81
  %85 = load i64, i64* %sizeb, align 8, !dbg !7098
  br label %cond.end86, !dbg !7098

cond.end86:                                       ; preds = %cond.false85, %cond.true84
  %cond87 = phi i64 [ %84, %cond.true84 ], [ %85, %cond.false85 ], !dbg !7098
  %call88 = call i32 @memcmp(i8* %79, i8* %add.ptr82, i64 %cond87) #14, !dbg !7099
  store i32 %call88, i32* %xfrm_diff, align 4, !dbg !7100
  %86 = load i32, i32* %xfrm_diff, align 4, !dbg !7101
  %tobool89 = icmp ne i32 %86, 0, !dbg !7101
  br i1 %tobool89, label %if.end95, label %if.then90, !dbg !7103

if.then90:                                        ; preds = %cond.end86
  %87 = load i64, i64* %sizea, align 8, !dbg !7104
  %88 = load i64, i64* %sizeb, align 8, !dbg !7105
  %cmp91 = icmp ugt i64 %87, %88, !dbg !7106
  %conv = zext i1 %cmp91 to i32, !dbg !7106
  %89 = load i64, i64* %sizea, align 8, !dbg !7107
  %90 = load i64, i64* %sizeb, align 8, !dbg !7108
  %cmp92 = icmp ult i64 %89, %90, !dbg !7109
  %conv93 = zext i1 %cmp92 to i32, !dbg !7109
  %sub94 = sub nsw i32 %conv, %conv93, !dbg !7110
  store i32 %sub94, i32* %xfrm_diff, align 4, !dbg !7111
  br label %if.end95, !dbg !7112

if.end95:                                         ; preds = %if.then90, %cond.end86
  br label %if.end96, !dbg !7113

if.end96:                                         ; preds = %if.end95, %if.end76
  br label %while.body, !dbg !6926, !llvm.loop !7114

while.end:                                        ; preds = %if.then74
  br label %if.end97, !dbg !7116

if.end97:                                         ; preds = %while.end, %entry
  %91 = load i8*, i8** %texta.addr, align 8, !dbg !7117
  %92 = load i64, i64* %lena.addr, align 8, !dbg !7118
  %arrayidx98 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0, !dbg !7119, !ctir !562
  call void @md5_process_bytes(i8* %91, i64 %92, %struct.md5_ctx* %arrayidx98) #12, !dbg !7120
  %arrayidx99 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 0, !dbg !7121, !ctir !562
  %arrayidx100 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 0, !dbg !7122, !ctir !559
  %arraydecay101 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx100, i64 0, i64 0, !dbg !7122, !ctir !575
  %93 = bitcast i32* %arraydecay101 to i8*, !dbg !7122
  %call102 = call i8* @md5_finish_ctx(%struct.md5_ctx* %arrayidx99, i8* %93) #12, !dbg !7123
  %94 = load i8*, i8** %textb.addr, align 8, !dbg !7124
  %95 = load i64, i64* %lenb.addr, align 8, !dbg !7125
  %arrayidx103 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1, !dbg !7126, !ctir !562
  call void @md5_process_bytes(i8* %94, i64 %95, %struct.md5_ctx* %arrayidx103) #12, !dbg !7127
  %arrayidx104 = getelementptr inbounds [2 x %struct.md5_ctx], [2 x %struct.md5_ctx]* %s, i64 0, i64 1, !dbg !7128, !ctir !562
  %arrayidx105 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 1, !dbg !7129, !ctir !559
  %arraydecay106 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx105, i64 0, i64 0, !dbg !7129, !ctir !575
  %96 = bitcast i32* %arraydecay106 to i8*, !dbg !7129
  %call107 = call i8* @md5_finish_ctx(%struct.md5_ctx* %arrayidx104, i8* %96) #12, !dbg !7130
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !7131, metadata !DIExpression()), !dbg !7132
  %arrayidx108 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 0, !dbg !7133, !ctir !559
  %arraydecay109 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx108, i64 0, i64 0, !dbg !7133, !ctir !575
  %97 = bitcast i32* %arraydecay109 to i8*, !dbg !7133
  %arrayidx110 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %dig, i64 0, i64 1, !dbg !7134, !ctir !559
  %arraydecay111 = getelementptr inbounds [4 x i32], [4 x i32]* %arrayidx110, i64 0, i64 0, !dbg !7134, !ctir !575
  %98 = bitcast i32* %arraydecay111 to i8*, !dbg !7134
  %call112 = call i32 @memcmp(i8* %97, i8* %98, i64 16) #14, !dbg !7135
  store i32 %call112, i32* %diff, align 4, !dbg !7132
  %99 = load i32, i32* %diff, align 4, !dbg !7136
  %tobool113 = icmp ne i32 %99, 0, !dbg !7136
  br i1 %tobool113, label %if.end133, label %if.then114, !dbg !7138

if.then114:                                       ; preds = %if.end97
  %100 = load i32, i32* %xfrm_diff, align 4, !dbg !7139
  %tobool115 = icmp ne i32 %100, 0, !dbg !7139
  br i1 %tobool115, label %if.end132, label %if.then116, !dbg !7142

if.then116:                                       ; preds = %if.then114
  %101 = load i8*, i8** %texta.addr, align 8, !dbg !7143
  %102 = load i8*, i8** %textb.addr, align 8, !dbg !7145
  %103 = load i64, i64* %lena.addr, align 8, !dbg !7146
  %104 = load i64, i64* %lenb.addr, align 8, !dbg !7146
  %cmp117 = icmp ult i64 %103, %104, !dbg !7146
  br i1 %cmp117, label %cond.true119, label %cond.false120, !dbg !7146

cond.true119:                                     ; preds = %if.then116
  %105 = load i64, i64* %lena.addr, align 8, !dbg !7146
  br label %cond.end121, !dbg !7146

cond.false120:                                    ; preds = %if.then116
  %106 = load i64, i64* %lenb.addr, align 8, !dbg !7146
  br label %cond.end121, !dbg !7146

cond.end121:                                      ; preds = %cond.false120, %cond.true119
  %cond122 = phi i64 [ %105, %cond.true119 ], [ %106, %cond.false120 ], !dbg !7146
  %call123 = call i32 @memcmp(i8* %101, i8* %102, i64 %cond122) #14, !dbg !7147
  store i32 %call123, i32* %xfrm_diff, align 4, !dbg !7148
  %107 = load i32, i32* %xfrm_diff, align 4, !dbg !7149
  %tobool124 = icmp ne i32 %107, 0, !dbg !7149
  br i1 %tobool124, label %if.end131, label %if.then125, !dbg !7151

if.then125:                                       ; preds = %cond.end121
  %108 = load i64, i64* %lena.addr, align 8, !dbg !7152
  %109 = load i64, i64* %lenb.addr, align 8, !dbg !7153
  %cmp126 = icmp ugt i64 %108, %109, !dbg !7154
  %conv127 = zext i1 %cmp126 to i32, !dbg !7154
  %110 = load i64, i64* %lena.addr, align 8, !dbg !7155
  %111 = load i64, i64* %lenb.addr, align 8, !dbg !7156
  %cmp128 = icmp ult i64 %110, %111, !dbg !7157
  %conv129 = zext i1 %cmp128 to i32, !dbg !7157
  %sub130 = sub nsw i32 %conv127, %conv129, !dbg !7158
  store i32 %sub130, i32* %xfrm_diff, align 4, !dbg !7159
  br label %if.end131, !dbg !7160

if.end131:                                        ; preds = %if.then125, %cond.end121
  br label %if.end132, !dbg !7161

if.end132:                                        ; preds = %if.end131, %if.then114
  %112 = load i32, i32* %xfrm_diff, align 4, !dbg !7162
  store i32 %112, i32* %diff, align 4, !dbg !7163
  br label %if.end133, !dbg !7164

if.end133:                                        ; preds = %if.end132, %if.end97
  %113 = load i8*, i8** %allocated, align 8, !dbg !7165
  call void @free(i8* %113) #12, !dbg !7166
  %114 = load i32, i32* %diff, align 4, !dbg !7167
  ret i32 %114, !dbg !7168
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @xstrxfrm(i8* noalias %dest, i8* noalias %src, i64 %destsize) #4 !dbg !7169 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %destsize.addr = alloca i64, align 8
  %translated_size = alloca i64, align 8, !ctir !52
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7173, metadata !DIExpression()), !dbg !7174
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7175, metadata !DIExpression()), !dbg !7176
  store i64 %destsize, i64* %destsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %destsize.addr, metadata !7177, metadata !DIExpression()), !dbg !7178
  %call = call i32* @__errno_location() #16, !dbg !7179
  store i32 0, i32* %call, align 4, !dbg !7180, !ctir !5
  call void @llvm.dbg.declare(metadata i64* %translated_size, metadata !7181, metadata !DIExpression()), !dbg !7182
  %0 = load i8*, i8** %dest.addr, align 8, !dbg !7183
  %1 = load i8*, i8** %src.addr, align 8, !dbg !7184
  %2 = load i64, i64* %destsize.addr, align 8, !dbg !7185
  %call1 = call i64 @strxfrm(i8* %0, i8* %1, i64 %2) #12, !dbg !7186
  store i64 %call1, i64* %translated_size, align 8, !dbg !7182
  %call2 = call i32* @__errno_location() #16, !dbg !7187
  %3 = load i32, i32* %call2, align 4, !dbg !7187, !ctir !5
  %tobool = icmp ne i32 %3, 0, !dbg !7187
  br i1 %tobool, label %if.then, label %if.end, !dbg !7189

if.then:                                          ; preds = %entry
  %call3 = call i32* @__errno_location() #16, !dbg !7190
  %4 = load i32, i32* %call3, align 4, !dbg !7190, !ctir !5
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.161, i64 0, i64 0)) #12, !dbg !7192
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %4, i8* %call4), !dbg !7193
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.162, i64 0, i64 0)) #12, !dbg !7194
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call5), !dbg !7195
  %call6 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.163, i64 0, i64 0)) #12, !dbg !7196
  %5 = load i8*, i8** %src.addr, align 8, !dbg !7196
  %call7 = call i8* @quotearg_n_style(i32 0, i32 8, i8* %5), !dbg !7196
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %call6, i8* %call7), !dbg !7196
  unreachable, !dbg !7196

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %translated_size, align 8, !dbg !7197
  ret i64 %6, !dbg !7198
}

; Function Attrs: nounwind
declare dso_local i64 @strxfrm(i8*, i8*, i64) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @find_unit_order(i8* %number) #9 !dbg !7199 {
entry:
  %retval = alloca i32, align 4
  %number.addr = alloca i8*, align 8
  %minus_sign = alloca i8, align 1, !ctir !162
  %p = alloca i8*, align 8, !ctir !90
  %max_digit = alloca i8, align 1, !ctir !535
  %ch = alloca i8, align 1, !ctir !535
  %order = alloca i32, align 4, !ctir !5
  store i8* %number, i8** %number.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %number.addr, metadata !7202, metadata !DIExpression()), !dbg !7203
  call void @llvm.dbg.declare(metadata i8* %minus_sign, metadata !7204, metadata !DIExpression()), !dbg !7205
  %0 = load i8*, i8** %number.addr, align 8, !dbg !7206
  %1 = load i8, i8* %0, align 1, !dbg !7207, !ctir !91
  %conv = sext i8 %1 to i32, !dbg !7207
  %cmp = icmp eq i32 %conv, 45, !dbg !7208
  %frombool = zext i1 %cmp to i8, !dbg !7205
  store i8 %frombool, i8* %minus_sign, align 1, !dbg !7205
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7209, metadata !DIExpression()), !dbg !7210
  %2 = load i8*, i8** %number.addr, align 8, !dbg !7211
  %3 = load i8, i8* %minus_sign, align 1, !dbg !7212
  %tobool = trunc i8 %3 to i1, !dbg !7212
  %conv2 = zext i1 %tobool to i32, !dbg !7212
  %idx.ext = sext i32 %conv2 to i64, !dbg !7213
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !7213, !ctir !91
  store i8* %add.ptr, i8** %p, align 8, !dbg !7210
  call void @llvm.dbg.declare(metadata i8* %max_digit, metadata !7214, metadata !DIExpression()), !dbg !7215
  %call = call zeroext i8 @traverse_raw_number(i8** %p), !dbg !7216
  store i8 %call, i8* %max_digit, align 1, !dbg !7215
  %4 = load i8, i8* %max_digit, align 1, !dbg !7217
  %conv3 = zext i8 %4 to i32, !dbg !7217
  %cmp4 = icmp slt i32 48, %conv3, !dbg !7219
  br i1 %cmp4, label %if.then, label %if.else, !dbg !7220

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !7221, metadata !DIExpression()), !dbg !7223
  %5 = load i8*, i8** %p, align 8, !dbg !7224
  %6 = load i8, i8* %5, align 1, !dbg !7225, !ctir !91
  store i8 %6, i8* %ch, align 1, !dbg !7223
  call void @llvm.dbg.declare(metadata i32* %order, metadata !7226, metadata !DIExpression()), !dbg !7227
  %7 = load i8, i8* %ch, align 1, !dbg !7228
  %idxprom = zext i8 %7 to i64, !dbg !7229
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [108 x i8], [148 x i8] }>* @unit_order to [256 x i8]*), i64 0, i64 %idxprom, !dbg !7229, !ctir !558
  %8 = load i8, i8* %arrayidx, align 1, !dbg !7229
  %conv6 = sext i8 %8 to i32, !dbg !7229
  store i32 %conv6, i32* %order, align 4, !dbg !7227
  %9 = load i8, i8* %minus_sign, align 1, !dbg !7230
  %tobool7 = trunc i8 %9 to i1, !dbg !7230
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !7230

cond.true:                                        ; preds = %if.then
  %10 = load i32, i32* %order, align 4, !dbg !7231
  %sub = sub nsw i32 0, %10, !dbg !7232
  br label %cond.end, !dbg !7230

cond.false:                                       ; preds = %if.then
  %11 = load i32, i32* %order, align 4, !dbg !7233
  br label %cond.end, !dbg !7230

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %11, %cond.false ], !dbg !7230
  store i32 %cond, i32* %retval, align 4, !dbg !7234
  br label %return, !dbg !7234

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7235
  br label %return, !dbg !7235

return:                                           ; preds = %if.else, %cond.end
  %12 = load i32, i32* %retval, align 4, !dbg !7236
  ret i32 %12, !dbg !7236
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @nan_compare(i8* %sa, i8* %sb) #4 !dbg !7237 {
entry:
  %sa.addr = alloca i8*, align 8
  %sb.addr = alloca i8*, align 8
  %a = alloca x86_fp80, align 16, !ctir !557
  %b = alloca x86_fp80, align 16, !ctir !557
  store i8* %sa, i8** %sa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sa.addr, metadata !7238, metadata !DIExpression()), !dbg !7239
  store i8* %sb, i8** %sb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %sb.addr, metadata !7240, metadata !DIExpression()), !dbg !7241
  call void @llvm.dbg.declare(metadata x86_fp80* %a, metadata !7242, metadata !DIExpression()), !dbg !7243
  %0 = bitcast x86_fp80* %a to i8*, !dbg !7244
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 16, i1 false), !dbg !7244
  %1 = load i8*, i8** %sa.addr, align 8, !dbg !7245
  %call = call x86_fp80 @strtold(i8* %1, i8** null) #12, !dbg !7246
  store x86_fp80 %call, x86_fp80* %a, align 16, !dbg !7247
  call void @llvm.dbg.declare(metadata x86_fp80* %b, metadata !7248, metadata !DIExpression()), !dbg !7249
  %2 = bitcast x86_fp80* %b to i8*, !dbg !7250
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 16, i1 false), !dbg !7250
  %3 = load i8*, i8** %sb.addr, align 8, !dbg !7251
  %call1 = call x86_fp80 @strtold(i8* %3, i8** null) #12, !dbg !7252
  store x86_fp80 %call1, x86_fp80* %b, align 16, !dbg !7253
  %4 = bitcast x86_fp80* %a to i8*, !dbg !7254
  %5 = bitcast x86_fp80* %b to i8*, !dbg !7255
  %call2 = call i32 @memcmp(i8* %4, i8* %5, i64 16) #14, !dbg !7256
  ret i32 %call2, !dbg !7257
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @sortlines_thread(i8* %data) #4 !dbg !7258 {
entry:
  %data.addr = alloca i8*, align 8
  %args = alloca %struct.thread_args*, align 8, !ctir !671
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7261, metadata !DIExpression()), !dbg !7262
  call void @llvm.dbg.declare(metadata %struct.thread_args** %args, metadata !7263, metadata !DIExpression()), !dbg !7264
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7265
  %1 = bitcast i8* %0 to %struct.thread_args*, !dbg !7265
  store %struct.thread_args* %1, %struct.thread_args** %args, align 8, !dbg !7264
  %2 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7266
  %lines = getelementptr inbounds %struct.thread_args, %struct.thread_args* %2, i32 0, i32 0, !dbg !7267, !ctir !672
  %3 = load %struct.line*, %struct.line** %lines, align 8, !dbg !7267, !ctir !553
  %4 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7268
  %nthreads = getelementptr inbounds %struct.thread_args, %struct.thread_args* %4, i32 0, i32 1, !dbg !7269, !ctir !672
  %5 = load i64, i64* %nthreads, align 8, !dbg !7269, !ctir !52
  %6 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7270
  %total_lines = getelementptr inbounds %struct.thread_args, %struct.thread_args* %6, i32 0, i32 2, !dbg !7271, !ctir !672
  %7 = load i64, i64* %total_lines, align 8, !dbg !7271, !ctir !678
  %8 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7272
  %node = getelementptr inbounds %struct.thread_args, %struct.thread_args* %8, i32 0, i32 3, !dbg !7273, !ctir !672
  %9 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7273, !ctir !680
  %10 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7274
  %queue = getelementptr inbounds %struct.thread_args, %struct.thread_args* %10, i32 0, i32 4, !dbg !7275, !ctir !672
  %11 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue, align 8, !dbg !7275, !ctir !682
  %12 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7276
  %tfp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %12, i32 0, i32 5, !dbg !7277, !ctir !672
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp, align 8, !dbg !7277, !ctir !389
  %14 = load %struct.thread_args*, %struct.thread_args** %args, align 8, !dbg !7278
  %output_temp = getelementptr inbounds %struct.thread_args, %struct.thread_args* %14, i32 0, i32 6, !dbg !7279, !ctir !672
  %15 = load i8*, i8** %output_temp, align 8, !dbg !7279, !ctir !90
  call void @sortlines(%struct.line* %3, i64 %5, i64 %7, %struct.merge_node* %9, %struct.merge_node_queue* %11, %struct._IO_FILE* %13, i8* %15), !dbg !7280
  ret i8* null, !dbg !7281
}

; Function Attrs: nounwind
declare !callback !7282 dso_local i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) #2

declare dso_local i32 @pthread_join(i64, i8**) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sequential_sort(%struct.line* noalias %lines, i64 %nlines, %struct.line* noalias %temp, i1 zeroext %to_temp) #4 !dbg !7284 {
entry:
  %lines.addr = alloca %struct.line*, align 8
  %nlines.addr = alloca i64, align 8
  %temp.addr = alloca %struct.line*, align 8
  %to_temp.addr = alloca i8, align 1
  %swap = alloca i32, align 4, !ctir !5
  %nlo = alloca i64, align 8, !ctir !52
  %nhi = alloca i64, align 8, !ctir !52
  %lo = alloca %struct.line*, align 8, !ctir !553
  %hi = alloca %struct.line*, align 8, !ctir !553
  %dest = alloca %struct.line*, align 8, !ctir !553
  %sorted_lo = alloca %struct.line*, align 8, !ctir !539
  store %struct.line* %lines, %struct.line** %lines.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %lines.addr, metadata !7287, metadata !DIExpression()), !dbg !7288
  store i64 %nlines, i64* %nlines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nlines.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  store %struct.line* %temp, %struct.line** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %temp.addr, metadata !7291, metadata !DIExpression()), !dbg !7292
  %frombool = zext i1 %to_temp to i8
  store i8 %frombool, i8* %to_temp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %to_temp.addr, metadata !7293, metadata !DIExpression()), !dbg !7294
  %0 = load i64, i64* %nlines.addr, align 8, !dbg !7295
  %cmp = icmp eq i64 %0, 2, !dbg !7297
  br i1 %cmp, label %if.then, label %if.else18, !dbg !7298

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %swap, metadata !7299, metadata !DIExpression()), !dbg !7301
  %1 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7302
  %arrayidx = getelementptr inbounds %struct.line, %struct.line* %1, i64 -1, !dbg !7302, !ctir !553
  %2 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7303
  %arrayidx1 = getelementptr inbounds %struct.line, %struct.line* %2, i64 -2, !dbg !7303, !ctir !553
  %call = call i32 @compare(%struct.line* %arrayidx, %struct.line* %arrayidx1), !dbg !7304
  %cmp2 = icmp slt i32 0, %call, !dbg !7305
  %conv = zext i1 %cmp2 to i32, !dbg !7305
  store i32 %conv, i32* %swap, align 4, !dbg !7301
  %3 = load i8, i8* %to_temp.addr, align 1, !dbg !7306
  %tobool = trunc i8 %3 to i1, !dbg !7306
  br i1 %tobool, label %if.then3, label %if.else, !dbg !7308

if.then3:                                         ; preds = %if.then
  %4 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7309
  %arrayidx4 = getelementptr inbounds %struct.line, %struct.line* %4, i64 -1, !dbg !7309, !ctir !553
  %5 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7311
  %6 = load i32, i32* %swap, align 4, !dbg !7312
  %sub = sub nsw i32 -1, %6, !dbg !7313
  %idxprom = sext i32 %sub to i64, !dbg !7311
  %arrayidx5 = getelementptr inbounds %struct.line, %struct.line* %5, i64 %idxprom, !dbg !7311, !ctir !553
  %7 = bitcast %struct.line* %arrayidx4 to i8*, !dbg !7311
  %8 = bitcast %struct.line* %arrayidx5 to i8*, !dbg !7311
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 32, i1 false), !dbg !7311
  %9 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7314
  %arrayidx6 = getelementptr inbounds %struct.line, %struct.line* %9, i64 -2, !dbg !7314, !ctir !553
  %10 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7315
  %11 = load i32, i32* %swap, align 4, !dbg !7316
  %add = add nsw i32 -2, %11, !dbg !7317
  %idxprom7 = sext i32 %add to i64, !dbg !7315
  %arrayidx8 = getelementptr inbounds %struct.line, %struct.line* %10, i64 %idxprom7, !dbg !7315, !ctir !553
  %12 = bitcast %struct.line* %arrayidx6 to i8*, !dbg !7315
  %13 = bitcast %struct.line* %arrayidx8 to i8*, !dbg !7315
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 32, i1 false), !dbg !7315
  br label %if.end17, !dbg !7318

if.else:                                          ; preds = %if.then
  %14 = load i32, i32* %swap, align 4, !dbg !7319
  %tobool9 = icmp ne i32 %14, 0, !dbg !7319
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !7321

if.then10:                                        ; preds = %if.else
  %15 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7322
  %arrayidx11 = getelementptr inbounds %struct.line, %struct.line* %15, i64 -1, !dbg !7322, !ctir !553
  %16 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7324
  %arrayidx12 = getelementptr inbounds %struct.line, %struct.line* %16, i64 -1, !dbg !7324, !ctir !553
  %17 = bitcast %struct.line* %arrayidx11 to i8*, !dbg !7324
  %18 = bitcast %struct.line* %arrayidx12 to i8*, !dbg !7324
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 32, i1 false), !dbg !7324
  %19 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7325
  %arrayidx13 = getelementptr inbounds %struct.line, %struct.line* %19, i64 -1, !dbg !7325, !ctir !553
  %20 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7326
  %arrayidx14 = getelementptr inbounds %struct.line, %struct.line* %20, i64 -2, !dbg !7326, !ctir !553
  %21 = bitcast %struct.line* %arrayidx13 to i8*, !dbg !7326
  %22 = bitcast %struct.line* %arrayidx14 to i8*, !dbg !7326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false), !dbg !7326
  %23 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7327
  %arrayidx15 = getelementptr inbounds %struct.line, %struct.line* %23, i64 -2, !dbg !7327, !ctir !553
  %24 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7328
  %arrayidx16 = getelementptr inbounds %struct.line, %struct.line* %24, i64 -1, !dbg !7328, !ctir !553
  %25 = bitcast %struct.line* %arrayidx15 to i8*, !dbg !7328
  %26 = bitcast %struct.line* %arrayidx16 to i8*, !dbg !7328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 32, i1 false), !dbg !7328
  br label %if.end, !dbg !7329

if.end:                                           ; preds = %if.then10, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then3
  br label %if.end40, !dbg !7330

if.else18:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %nlo, metadata !7331, metadata !DIExpression()), !dbg !7333
  %27 = load i64, i64* %nlines.addr, align 8, !dbg !7334
  %div = udiv i64 %27, 2, !dbg !7335
  store i64 %div, i64* %nlo, align 8, !dbg !7333
  call void @llvm.dbg.declare(metadata i64* %nhi, metadata !7336, metadata !DIExpression()), !dbg !7337
  %28 = load i64, i64* %nlines.addr, align 8, !dbg !7338
  %29 = load i64, i64* %nlo, align 8, !dbg !7339
  %sub19 = sub i64 %28, %29, !dbg !7340
  store i64 %sub19, i64* %nhi, align 8, !dbg !7337
  call void @llvm.dbg.declare(metadata %struct.line** %lo, metadata !7341, metadata !DIExpression()), !dbg !7342
  %30 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7343
  store %struct.line* %30, %struct.line** %lo, align 8, !dbg !7342
  call void @llvm.dbg.declare(metadata %struct.line** %hi, metadata !7344, metadata !DIExpression()), !dbg !7345
  %31 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7346
  %32 = load i64, i64* %nlo, align 8, !dbg !7347
  %idx.neg = sub i64 0, %32, !dbg !7348
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %31, i64 %idx.neg, !dbg !7348, !ctir !541
  store %struct.line* %add.ptr, %struct.line** %hi, align 8, !dbg !7345
  %33 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7349
  %34 = load i64, i64* %nhi, align 8, !dbg !7350
  %35 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7351
  %36 = load i8, i8* %to_temp.addr, align 1, !dbg !7352
  %tobool20 = trunc i8 %36 to i1, !dbg !7352
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !7352

cond.true:                                        ; preds = %if.else18
  %37 = load i64, i64* %nlo, align 8, !dbg !7353
  br label %cond.end, !dbg !7352

cond.false:                                       ; preds = %if.else18
  br label %cond.end, !dbg !7352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %37, %cond.true ], [ 0, %cond.false ], !dbg !7352
  %idx.neg22 = sub i64 0, %cond, !dbg !7354
  %add.ptr23 = getelementptr inbounds %struct.line, %struct.line* %35, i64 %idx.neg22, !dbg !7354, !ctir !541
  %38 = load i8, i8* %to_temp.addr, align 1, !dbg !7355
  %tobool24 = trunc i8 %38 to i1, !dbg !7355
  call void @sequential_sort(%struct.line* %33, i64 %34, %struct.line* %add.ptr23, i1 zeroext %tobool24), !dbg !7356
  %39 = load i64, i64* %nlo, align 8, !dbg !7357
  %cmp25 = icmp ult i64 1, %39, !dbg !7359
  br i1 %cmp25, label %if.then27, label %if.else29, !dbg !7360

if.then27:                                        ; preds = %cond.end
  %40 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7361
  %41 = load i64, i64* %nlo, align 8, !dbg !7362
  %42 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7363
  %43 = load i8, i8* %to_temp.addr, align 1, !dbg !7364
  %tobool28 = trunc i8 %43 to i1, !dbg !7364
  %lnot = xor i1 %tobool28, true, !dbg !7365
  call void @sequential_sort(%struct.line* %40, i64 %41, %struct.line* %42, i1 zeroext %lnot), !dbg !7366
  br label %if.end35, !dbg !7366

if.else29:                                        ; preds = %cond.end
  %44 = load i8, i8* %to_temp.addr, align 1, !dbg !7367
  %tobool30 = trunc i8 %44 to i1, !dbg !7367
  br i1 %tobool30, label %if.end34, label %if.then31, !dbg !7369

if.then31:                                        ; preds = %if.else29
  %45 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7370
  %arrayidx32 = getelementptr inbounds %struct.line, %struct.line* %45, i64 -1, !dbg !7370, !ctir !553
  %46 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7371
  %arrayidx33 = getelementptr inbounds %struct.line, %struct.line* %46, i64 -1, !dbg !7371, !ctir !553
  %47 = bitcast %struct.line* %arrayidx32 to i8*, !dbg !7371
  %48 = bitcast %struct.line* %arrayidx33 to i8*, !dbg !7371
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 32, i1 false), !dbg !7371
  br label %if.end34, !dbg !7370

if.end34:                                         ; preds = %if.then31, %if.else29
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then27
  call void @llvm.dbg.declare(metadata %struct.line** %dest, metadata !7372, metadata !DIExpression()), !dbg !7373
  call void @llvm.dbg.declare(metadata %struct.line** %sorted_lo, metadata !7374, metadata !DIExpression()), !dbg !7375
  %49 = load i8, i8* %to_temp.addr, align 1, !dbg !7376
  %tobool36 = trunc i8 %49 to i1, !dbg !7376
  br i1 %tobool36, label %if.then37, label %if.else38, !dbg !7378

if.then37:                                        ; preds = %if.end35
  %50 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7379
  store %struct.line* %50, %struct.line** %dest, align 8, !dbg !7381
  %51 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7382
  store %struct.line* %51, %struct.line** %sorted_lo, align 8, !dbg !7383
  br label %if.end39, !dbg !7384

if.else38:                                        ; preds = %if.end35
  %52 = load %struct.line*, %struct.line** %lines.addr, align 8, !dbg !7385
  store %struct.line* %52, %struct.line** %dest, align 8, !dbg !7387
  %53 = load %struct.line*, %struct.line** %temp.addr, align 8, !dbg !7388
  store %struct.line* %53, %struct.line** %sorted_lo, align 8, !dbg !7389
  br label %if.end39

if.end39:                                         ; preds = %if.else38, %if.then37
  %54 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7390
  %55 = load i64, i64* %nlines.addr, align 8, !dbg !7391
  %56 = load %struct.line*, %struct.line** %sorted_lo, align 8, !dbg !7392
  call void @mergelines(%struct.line* %54, i64 %55, %struct.line* %56), !dbg !7393
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end17
  ret void, !dbg !7394
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_insert(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #4 !dbg !7395 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !7398, metadata !DIExpression()), !dbg !7399
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7400, metadata !DIExpression()), !dbg !7401
  %0 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7402
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %0, i32 0, i32 1, !dbg !7403, !ctir !684
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %mutex) #12, !dbg !7404
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7405
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 0, !dbg !7406, !ctir !684
  %2 = load %struct.heap*, %struct.heap** %priority_queue, align 8, !dbg !7406, !ctir !665
  %3 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7407
  %4 = bitcast %struct.merge_node* %3 to i8*, !dbg !7407
  %call1 = call i32 @heap_insert(%struct.heap* %2, i8* %4), !dbg !7408
  %5 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7409
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 11, !dbg !7410, !ctir !622
  store i8 1, i8* %queued, align 4, !dbg !7411, !ctir !162
  %6 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7412
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %6, i32 0, i32 2, !dbg !7413, !ctir !684
  %call2 = call i32 @pthread_cond_signal(%union.pthread_cond_t* %cond) #12, !dbg !7414
  %7 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7415
  %mutex3 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %7, i32 0, i32 1, !dbg !7416, !ctir !684
  %call4 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %mutex3) #12, !dbg !7417
  ret void, !dbg !7418
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @merge_loop(%struct.merge_node_queue* %queue, i64 %total_lines, %struct._IO_FILE* %tfp, i8* %temp_output) #4 !dbg !7419 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %total_lines.addr = alloca i64, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %node = alloca %struct.merge_node*, align 8, !ctir !621
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !7422, metadata !DIExpression()), !dbg !7423
  store i64 %total_lines, i64* %total_lines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %total_lines.addr, metadata !7424, metadata !DIExpression()), !dbg !7425
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp.addr, metadata !7426, metadata !DIExpression()), !dbg !7427
  store i8* %temp_output, i8** %temp_output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %temp_output.addr, metadata !7428, metadata !DIExpression()), !dbg !7429
  br label %while.body, !dbg !7430

while.body:                                       ; preds = %entry, %if.end
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node, metadata !7431, metadata !DIExpression()), !dbg !7433
  %0 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7434
  %call = call %struct.merge_node* @queue_pop(%struct.merge_node_queue* %0), !dbg !7435
  store %struct.merge_node* %call, %struct.merge_node** %node, align 8, !dbg !7433
  %1 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7436
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %1, i32 0, i32 10, !dbg !7438, !ctir !622
  %2 = load i32, i32* %level, align 8, !dbg !7438, !ctir !66
  %cmp = icmp eq i32 %2, 0, !dbg !7439
  br i1 %cmp, label %if.then, label %if.end, !dbg !7440

if.then:                                          ; preds = %while.body
  %3 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7441
  call void @unlock_node(%struct.merge_node* %3), !dbg !7443
  %4 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7444
  %5 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7445
  call void @queue_insert(%struct.merge_node_queue* %4, %struct.merge_node* %5), !dbg !7446
  br label %while.end, !dbg !7447

if.end:                                           ; preds = %while.body
  %6 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7448
  %7 = load i64, i64* %total_lines.addr, align 8, !dbg !7449
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !7450
  %9 = load i8*, i8** %temp_output.addr, align 8, !dbg !7451
  call void @mergelines_node(%struct.merge_node* %6, i64 %7, %struct._IO_FILE* %8, i8* %9), !dbg !7452
  %10 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7453
  %11 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7454
  call void @queue_check_insert(%struct.merge_node_queue* %10, %struct.merge_node* %11), !dbg !7455
  %12 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7456
  %13 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7457
  call void @queue_check_insert_parent(%struct.merge_node_queue* %12, %struct.merge_node* %13), !dbg !7458
  %14 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7459
  call void @unlock_node(%struct.merge_node* %14), !dbg !7460
  br label %while.body, !dbg !7430, !llvm.loop !7461

while.end:                                        ; preds = %if.then
  ret void, !dbg !7463
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.merge_node* @queue_pop(%struct.merge_node_queue* %queue) #4 !dbg !7464 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node = alloca %struct.merge_node*, align 8, !ctir !621
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !7467, metadata !DIExpression()), !dbg !7468
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node, metadata !7469, metadata !DIExpression()), !dbg !7470
  %0 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7471
  %mutex = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %0, i32 0, i32 1, !dbg !7472, !ctir !684
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %mutex) #12, !dbg !7473
  br label %while.cond, !dbg !7474

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7475
  %priority_queue = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %1, i32 0, i32 0, !dbg !7476, !ctir !684
  %2 = load %struct.heap*, %struct.heap** %priority_queue, align 8, !dbg !7476, !ctir !665
  %call1 = call i8* @heap_remove_top(%struct.heap* %2), !dbg !7477
  %3 = bitcast i8* %call1 to %struct.merge_node*, !dbg !7477
  store %struct.merge_node* %3, %struct.merge_node** %node, align 8, !dbg !7478
  %tobool = icmp ne %struct.merge_node* %3, null, !dbg !7479
  %lnot = xor i1 %tobool, true, !dbg !7479
  br i1 %lnot, label %while.body, label %while.end, !dbg !7474

while.body:                                       ; preds = %while.cond
  %4 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7480
  %cond = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %4, i32 0, i32 2, !dbg !7481, !ctir !684
  %5 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7482
  %mutex2 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %5, i32 0, i32 1, !dbg !7483, !ctir !684
  %call3 = call i32 @pthread_cond_wait(%union.pthread_cond_t* %cond, %union.pthread_mutex_t* %mutex2), !dbg !7484
  br label %while.cond, !dbg !7474, !llvm.loop !7485

while.end:                                        ; preds = %while.cond
  %6 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7487
  %mutex4 = getelementptr inbounds %struct.merge_node_queue, %struct.merge_node_queue* %6, i32 0, i32 1, !dbg !7488, !ctir !684
  %call5 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %mutex4) #12, !dbg !7489
  %7 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7490
  call void @lock_node(%struct.merge_node* %7), !dbg !7491
  %8 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7492
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 11, !dbg !7493, !ctir !622
  store i8 0, i8* %queued, align 4, !dbg !7494, !ctir !162
  %9 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7495
  ret %struct.merge_node* %9, !dbg !7496
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @unlock_node(%struct.merge_node* %node) #4 !dbg !7497 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7500, metadata !DIExpression()), !dbg !7501
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7502
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 12, !dbg !7503, !ctir !622
  %call = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %lock) #12, !dbg !7504
  ret void, !dbg !7505
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mergelines_node(%struct.merge_node* noalias %node, i64 %total_lines, %struct._IO_FILE* %tfp, i8* %temp_output) #4 !dbg !7506 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  %total_lines.addr = alloca i64, align 8
  %tfp.addr = alloca %struct._IO_FILE*, align 8
  %temp_output.addr = alloca i8*, align 8
  %lo_orig = alloca %struct.line*, align 8, !ctir !553
  %hi_orig = alloca %struct.line*, align 8, !ctir !553
  %to_merge = alloca i64, align 8, !ctir !52
  %merged_lo = alloca i64, align 8, !ctir !52
  %merged_hi = alloca i64, align 8, !ctir !52
  %dest = alloca %struct.line*, align 8, !ctir !553
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7510, metadata !DIExpression()), !dbg !7511
  store i64 %total_lines, i64* %total_lines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %total_lines.addr, metadata !7512, metadata !DIExpression()), !dbg !7513
  store %struct._IO_FILE* %tfp, %struct._IO_FILE** %tfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tfp.addr, metadata !7514, metadata !DIExpression()), !dbg !7515
  store i8* %temp_output, i8** %temp_output.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %temp_output.addr, metadata !7516, metadata !DIExpression()), !dbg !7517
  call void @llvm.dbg.declare(metadata %struct.line** %lo_orig, metadata !7518, metadata !DIExpression()), !dbg !7519
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7520
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 0, !dbg !7521, !ctir !622
  %1 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7521, !ctir !553
  store %struct.line* %1, %struct.line** %lo_orig, align 8, !dbg !7519
  call void @llvm.dbg.declare(metadata %struct.line** %hi_orig, metadata !7522, metadata !DIExpression()), !dbg !7523
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7524
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 1, !dbg !7525, !ctir !622
  %3 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7525, !ctir !553
  store %struct.line* %3, %struct.line** %hi_orig, align 8, !dbg !7523
  call void @llvm.dbg.declare(metadata i64* %to_merge, metadata !7526, metadata !DIExpression()), !dbg !7527
  %4 = load i64, i64* %total_lines.addr, align 8, !dbg !7528
  %5 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7528
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 10, !dbg !7528, !ctir !622
  %6 = load i32, i32* %level, align 8, !dbg !7528, !ctir !66
  %add = add i32 %6, 1, !dbg !7528
  %mul = mul i32 2, %add, !dbg !7528
  %sh_prom = zext i32 %mul to i64, !dbg !7528
  %shr = lshr i64 %4, %sh_prom, !dbg !7528
  %add1 = add i64 %shr, 1, !dbg !7528
  store i64 %add1, i64* %to_merge, align 8, !dbg !7527
  call void @llvm.dbg.declare(metadata i64* %merged_lo, metadata !7529, metadata !DIExpression()), !dbg !7530
  call void @llvm.dbg.declare(metadata i64* %merged_hi, metadata !7531, metadata !DIExpression()), !dbg !7532
  %7 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7533
  %level2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %7, i32 0, i32 10, !dbg !7535, !ctir !622
  %8 = load i32, i32* %level2, align 8, !dbg !7535, !ctir !66
  %cmp = icmp ugt i32 %8, 1, !dbg !7536
  br i1 %cmp, label %if.then, label %if.else58, !dbg !7537

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.line** %dest, metadata !7538, metadata !DIExpression()), !dbg !7540
  %9 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7541
  %dest3 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 4, !dbg !7542, !ctir !622
  %10 = load %struct.line**, %struct.line*** %dest3, align 8, !dbg !7542, !ctir !629
  %11 = load %struct.line*, %struct.line** %10, align 8, !dbg !7543, !ctir !553
  store %struct.line* %11, %struct.line** %dest, align 8, !dbg !7540
  br label %while.cond, !dbg !7544

while.cond:                                       ; preds = %if.end, %if.then
  %12 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7545
  %lo4 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 0, !dbg !7546, !ctir !622
  %13 = load %struct.line*, %struct.line** %lo4, align 8, !dbg !7546, !ctir !553
  %14 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7547
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 2, !dbg !7548, !ctir !622
  %15 = load %struct.line*, %struct.line** %end_lo, align 8, !dbg !7548, !ctir !553
  %cmp5 = icmp ne %struct.line* %13, %15, !dbg !7549
  br i1 %cmp5, label %land.lhs.true, label %land.end, !dbg !7550

land.lhs.true:                                    ; preds = %while.cond
  %16 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7551
  %hi6 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %16, i32 0, i32 1, !dbg !7552, !ctir !622
  %17 = load %struct.line*, %struct.line** %hi6, align 8, !dbg !7552, !ctir !553
  %18 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7553
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i32 0, i32 3, !dbg !7554, !ctir !622
  %19 = load %struct.line*, %struct.line** %end_hi, align 8, !dbg !7554, !ctir !553
  %cmp7 = icmp ne %struct.line* %17, %19, !dbg !7555
  br i1 %cmp7, label %land.rhs, label %land.end, !dbg !7556

land.rhs:                                         ; preds = %land.lhs.true
  %20 = load i64, i64* %to_merge, align 8, !dbg !7557
  %dec = add i64 %20, -1, !dbg !7557
  store i64 %dec, i64* %to_merge, align 8, !dbg !7557
  %tobool = icmp ne i64 %20, 0, !dbg !7556
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %21 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !7558
  br i1 %21, label %while.body, label %while.end, !dbg !7544

while.body:                                       ; preds = %land.end
  %22 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7559
  %lo8 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %22, i32 0, i32 0, !dbg !7561, !ctir !622
  %23 = load %struct.line*, %struct.line** %lo8, align 8, !dbg !7561, !ctir !553
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %23, i64 -1, !dbg !7562, !ctir !541
  %24 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7563
  %hi9 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %24, i32 0, i32 1, !dbg !7564, !ctir !622
  %25 = load %struct.line*, %struct.line** %hi9, align 8, !dbg !7564, !ctir !553
  %add.ptr10 = getelementptr inbounds %struct.line, %struct.line* %25, i64 -1, !dbg !7565, !ctir !541
  %call = call i32 @compare(%struct.line* %add.ptr, %struct.line* %add.ptr10), !dbg !7566
  %cmp11 = icmp sle i32 %call, 0, !dbg !7567
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !7568

if.then12:                                        ; preds = %while.body
  %26 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7569
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %26, i32 -1, !dbg !7569, !ctir !541
  store %struct.line* %incdec.ptr, %struct.line** %dest, align 8, !dbg !7569
  %27 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7570
  %lo13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %27, i32 0, i32 0, !dbg !7571, !ctir !622
  %28 = load %struct.line*, %struct.line** %lo13, align 8, !dbg !7572, !ctir !553
  %incdec.ptr14 = getelementptr inbounds %struct.line, %struct.line* %28, i32 -1, !dbg !7572, !ctir !541
  store %struct.line* %incdec.ptr14, %struct.line** %lo13, align 8, !dbg !7572, !ctir !553
  %29 = bitcast %struct.line* %incdec.ptr to i8*, !dbg !7573
  %30 = bitcast %struct.line* %incdec.ptr14 to i8*, !dbg !7573
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 32, i1 false), !dbg !7573
  br label %if.end, !dbg !7574

if.else:                                          ; preds = %while.body
  %31 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7575
  %incdec.ptr15 = getelementptr inbounds %struct.line, %struct.line* %31, i32 -1, !dbg !7575, !ctir !541
  store %struct.line* %incdec.ptr15, %struct.line** %dest, align 8, !dbg !7575
  %32 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7576
  %hi16 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %32, i32 0, i32 1, !dbg !7577, !ctir !622
  %33 = load %struct.line*, %struct.line** %hi16, align 8, !dbg !7578, !ctir !553
  %incdec.ptr17 = getelementptr inbounds %struct.line, %struct.line* %33, i32 -1, !dbg !7578, !ctir !541
  store %struct.line* %incdec.ptr17, %struct.line** %hi16, align 8, !dbg !7578, !ctir !553
  %34 = bitcast %struct.line* %incdec.ptr15 to i8*, !dbg !7579
  %35 = bitcast %struct.line* %incdec.ptr17 to i8*, !dbg !7579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 32, i1 false), !dbg !7579
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  br label %while.cond, !dbg !7544, !llvm.loop !7580

while.end:                                        ; preds = %land.end
  %36 = load %struct.line*, %struct.line** %lo_orig, align 8, !dbg !7582
  %37 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7583
  %lo18 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %37, i32 0, i32 0, !dbg !7584, !ctir !622
  %38 = load %struct.line*, %struct.line** %lo18, align 8, !dbg !7584, !ctir !553
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %36 to i64, !dbg !7585
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %38 to i64, !dbg !7585
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !7585
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32, !dbg !7585
  store i64 %sub.ptr.div, i64* %merged_lo, align 8, !dbg !7586
  %39 = load %struct.line*, %struct.line** %hi_orig, align 8, !dbg !7587
  %40 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7588
  %hi19 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %40, i32 0, i32 1, !dbg !7589, !ctir !622
  %41 = load %struct.line*, %struct.line** %hi19, align 8, !dbg !7589, !ctir !553
  %sub.ptr.lhs.cast20 = ptrtoint %struct.line* %39 to i64, !dbg !7590
  %sub.ptr.rhs.cast21 = ptrtoint %struct.line* %41 to i64, !dbg !7590
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !7590
  %sub.ptr.div23 = sdiv exact i64 %sub.ptr.sub22, 32, !dbg !7590
  store i64 %sub.ptr.div23, i64* %merged_hi, align 8, !dbg !7591
  %42 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7592
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %42, i32 0, i32 6, !dbg !7594, !ctir !622
  %43 = load i64, i64* %nhi, align 8, !dbg !7594, !ctir !52
  %44 = load i64, i64* %merged_hi, align 8, !dbg !7595
  %cmp24 = icmp eq i64 %43, %44, !dbg !7596
  br i1 %cmp24, label %if.then25, label %if.else39, !dbg !7597

if.then25:                                        ; preds = %while.end
  br label %while.cond26, !dbg !7598

while.cond26:                                     ; preds = %while.body34, %if.then25
  %45 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7599
  %lo27 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %45, i32 0, i32 0, !dbg !7600, !ctir !622
  %46 = load %struct.line*, %struct.line** %lo27, align 8, !dbg !7600, !ctir !553
  %47 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7601
  %end_lo28 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %47, i32 0, i32 2, !dbg !7602, !ctir !622
  %48 = load %struct.line*, %struct.line** %end_lo28, align 8, !dbg !7602, !ctir !553
  %cmp29 = icmp ne %struct.line* %46, %48, !dbg !7603
  br i1 %cmp29, label %land.rhs30, label %land.end33, !dbg !7604

land.rhs30:                                       ; preds = %while.cond26
  %49 = load i64, i64* %to_merge, align 8, !dbg !7605
  %dec31 = add i64 %49, -1, !dbg !7605
  store i64 %dec31, i64* %to_merge, align 8, !dbg !7605
  %tobool32 = icmp ne i64 %49, 0, !dbg !7604
  br label %land.end33

land.end33:                                       ; preds = %land.rhs30, %while.cond26
  %50 = phi i1 [ false, %while.cond26 ], [ %tobool32, %land.rhs30 ], !dbg !7606
  br i1 %50, label %while.body34, label %while.end38, !dbg !7598

while.body34:                                     ; preds = %land.end33
  %51 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7607
  %incdec.ptr35 = getelementptr inbounds %struct.line, %struct.line* %51, i32 -1, !dbg !7607, !ctir !541
  store %struct.line* %incdec.ptr35, %struct.line** %dest, align 8, !dbg !7607
  %52 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7608
  %lo36 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %52, i32 0, i32 0, !dbg !7609, !ctir !622
  %53 = load %struct.line*, %struct.line** %lo36, align 8, !dbg !7610, !ctir !553
  %incdec.ptr37 = getelementptr inbounds %struct.line, %struct.line* %53, i32 -1, !dbg !7610, !ctir !541
  store %struct.line* %incdec.ptr37, %struct.line** %lo36, align 8, !dbg !7610, !ctir !553
  %54 = bitcast %struct.line* %incdec.ptr35 to i8*, !dbg !7611
  %55 = bitcast %struct.line* %incdec.ptr37 to i8*, !dbg !7611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 32, i1 false), !dbg !7611
  br label %while.cond26, !dbg !7598, !llvm.loop !7612

while.end38:                                      ; preds = %land.end33
  br label %if.end56, !dbg !7598

if.else39:                                        ; preds = %while.end
  %56 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7613
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %56, i32 0, i32 5, !dbg !7615, !ctir !622
  %57 = load i64, i64* %nlo, align 8, !dbg !7615, !ctir !52
  %58 = load i64, i64* %merged_lo, align 8, !dbg !7616
  %cmp40 = icmp eq i64 %57, %58, !dbg !7617
  br i1 %cmp40, label %if.then41, label %if.end55, !dbg !7618

if.then41:                                        ; preds = %if.else39
  br label %while.cond42, !dbg !7619

while.cond42:                                     ; preds = %while.body50, %if.then41
  %59 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7620
  %hi43 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %59, i32 0, i32 1, !dbg !7621, !ctir !622
  %60 = load %struct.line*, %struct.line** %hi43, align 8, !dbg !7621, !ctir !553
  %61 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7622
  %end_hi44 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %61, i32 0, i32 3, !dbg !7623, !ctir !622
  %62 = load %struct.line*, %struct.line** %end_hi44, align 8, !dbg !7623, !ctir !553
  %cmp45 = icmp ne %struct.line* %60, %62, !dbg !7624
  br i1 %cmp45, label %land.rhs46, label %land.end49, !dbg !7625

land.rhs46:                                       ; preds = %while.cond42
  %63 = load i64, i64* %to_merge, align 8, !dbg !7626
  %dec47 = add i64 %63, -1, !dbg !7626
  store i64 %dec47, i64* %to_merge, align 8, !dbg !7626
  %tobool48 = icmp ne i64 %63, 0, !dbg !7625
  br label %land.end49

land.end49:                                       ; preds = %land.rhs46, %while.cond42
  %64 = phi i1 [ false, %while.cond42 ], [ %tobool48, %land.rhs46 ], !dbg !7627
  br i1 %64, label %while.body50, label %while.end54, !dbg !7619

while.body50:                                     ; preds = %land.end49
  %65 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7628
  %incdec.ptr51 = getelementptr inbounds %struct.line, %struct.line* %65, i32 -1, !dbg !7628, !ctir !541
  store %struct.line* %incdec.ptr51, %struct.line** %dest, align 8, !dbg !7628
  %66 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7629
  %hi52 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %66, i32 0, i32 1, !dbg !7630, !ctir !622
  %67 = load %struct.line*, %struct.line** %hi52, align 8, !dbg !7631, !ctir !553
  %incdec.ptr53 = getelementptr inbounds %struct.line, %struct.line* %67, i32 -1, !dbg !7631, !ctir !541
  store %struct.line* %incdec.ptr53, %struct.line** %hi52, align 8, !dbg !7631, !ctir !553
  %68 = bitcast %struct.line* %incdec.ptr51 to i8*, !dbg !7632
  %69 = bitcast %struct.line* %incdec.ptr53 to i8*, !dbg !7632
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 32, i1 false), !dbg !7632
  br label %while.cond42, !dbg !7619, !llvm.loop !7633

while.end54:                                      ; preds = %land.end49
  br label %if.end55, !dbg !7619

if.end55:                                         ; preds = %while.end54, %if.else39
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %while.end38
  %70 = load %struct.line*, %struct.line** %dest, align 8, !dbg !7634
  %71 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7635
  %dest57 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %71, i32 0, i32 4, !dbg !7636, !ctir !622
  %72 = load %struct.line**, %struct.line*** %dest57, align 8, !dbg !7636, !ctir !629
  store %struct.line* %70, %struct.line** %72, align 8, !dbg !7637, !ctir !553
  br label %if.end129, !dbg !7638

if.else58:                                        ; preds = %entry
  br label %while.cond59, !dbg !7639

while.cond59:                                     ; preds = %if.end84, %if.else58
  %73 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7641
  %lo60 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %73, i32 0, i32 0, !dbg !7642, !ctir !622
  %74 = load %struct.line*, %struct.line** %lo60, align 8, !dbg !7642, !ctir !553
  %75 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7643
  %end_lo61 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %75, i32 0, i32 2, !dbg !7644, !ctir !622
  %76 = load %struct.line*, %struct.line** %end_lo61, align 8, !dbg !7644, !ctir !553
  %cmp62 = icmp ne %struct.line* %74, %76, !dbg !7645
  br i1 %cmp62, label %land.lhs.true63, label %land.end70, !dbg !7646

land.lhs.true63:                                  ; preds = %while.cond59
  %77 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7647
  %hi64 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %77, i32 0, i32 1, !dbg !7648, !ctir !622
  %78 = load %struct.line*, %struct.line** %hi64, align 8, !dbg !7648, !ctir !553
  %79 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7649
  %end_hi65 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %79, i32 0, i32 3, !dbg !7650, !ctir !622
  %80 = load %struct.line*, %struct.line** %end_hi65, align 8, !dbg !7650, !ctir !553
  %cmp66 = icmp ne %struct.line* %78, %80, !dbg !7651
  br i1 %cmp66, label %land.rhs67, label %land.end70, !dbg !7652

land.rhs67:                                       ; preds = %land.lhs.true63
  %81 = load i64, i64* %to_merge, align 8, !dbg !7653
  %dec68 = add i64 %81, -1, !dbg !7653
  store i64 %dec68, i64* %to_merge, align 8, !dbg !7653
  %tobool69 = icmp ne i64 %81, 0, !dbg !7652
  br label %land.end70

land.end70:                                       ; preds = %land.rhs67, %land.lhs.true63, %while.cond59
  %82 = phi i1 [ false, %land.lhs.true63 ], [ false, %while.cond59 ], [ %tobool69, %land.rhs67 ], !dbg !7654
  br i1 %82, label %while.body71, label %while.end85, !dbg !7639

while.body71:                                     ; preds = %land.end70
  %83 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7655
  %lo72 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %83, i32 0, i32 0, !dbg !7658, !ctir !622
  %84 = load %struct.line*, %struct.line** %lo72, align 8, !dbg !7658, !ctir !553
  %add.ptr73 = getelementptr inbounds %struct.line, %struct.line* %84, i64 -1, !dbg !7659, !ctir !541
  %85 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7660
  %hi74 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %85, i32 0, i32 1, !dbg !7661, !ctir !622
  %86 = load %struct.line*, %struct.line** %hi74, align 8, !dbg !7661, !ctir !553
  %add.ptr75 = getelementptr inbounds %struct.line, %struct.line* %86, i64 -1, !dbg !7662, !ctir !541
  %call76 = call i32 @compare(%struct.line* %add.ptr73, %struct.line* %add.ptr75), !dbg !7663
  %cmp77 = icmp sle i32 %call76, 0, !dbg !7664
  br i1 %cmp77, label %if.then78, label %if.else81, !dbg !7665

if.then78:                                        ; preds = %while.body71
  %87 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7666
  %lo79 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %87, i32 0, i32 0, !dbg !7667, !ctir !622
  %88 = load %struct.line*, %struct.line** %lo79, align 8, !dbg !7668, !ctir !553
  %incdec.ptr80 = getelementptr inbounds %struct.line, %struct.line* %88, i32 -1, !dbg !7668, !ctir !541
  store %struct.line* %incdec.ptr80, %struct.line** %lo79, align 8, !dbg !7668, !ctir !553
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !7669
  %90 = load i8*, i8** %temp_output.addr, align 8, !dbg !7670
  call void @write_unique(%struct.line* %incdec.ptr80, %struct._IO_FILE* %89, i8* %90), !dbg !7671
  br label %if.end84, !dbg !7671

if.else81:                                        ; preds = %while.body71
  %91 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7672
  %hi82 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %91, i32 0, i32 1, !dbg !7673, !ctir !622
  %92 = load %struct.line*, %struct.line** %hi82, align 8, !dbg !7674, !ctir !553
  %incdec.ptr83 = getelementptr inbounds %struct.line, %struct.line* %92, i32 -1, !dbg !7674, !ctir !541
  store %struct.line* %incdec.ptr83, %struct.line** %hi82, align 8, !dbg !7674, !ctir !553
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !7675
  %94 = load i8*, i8** %temp_output.addr, align 8, !dbg !7676
  call void @write_unique(%struct.line* %incdec.ptr83, %struct._IO_FILE* %93, i8* %94), !dbg !7677
  br label %if.end84

if.end84:                                         ; preds = %if.else81, %if.then78
  br label %while.cond59, !dbg !7639, !llvm.loop !7678

while.end85:                                      ; preds = %land.end70
  %95 = load %struct.line*, %struct.line** %lo_orig, align 8, !dbg !7680
  %96 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7681
  %lo86 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %96, i32 0, i32 0, !dbg !7682, !ctir !622
  %97 = load %struct.line*, %struct.line** %lo86, align 8, !dbg !7682, !ctir !553
  %sub.ptr.lhs.cast87 = ptrtoint %struct.line* %95 to i64, !dbg !7683
  %sub.ptr.rhs.cast88 = ptrtoint %struct.line* %97 to i64, !dbg !7683
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88, !dbg !7683
  %sub.ptr.div90 = sdiv exact i64 %sub.ptr.sub89, 32, !dbg !7683
  store i64 %sub.ptr.div90, i64* %merged_lo, align 8, !dbg !7684
  %98 = load %struct.line*, %struct.line** %hi_orig, align 8, !dbg !7685
  %99 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7686
  %hi91 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %99, i32 0, i32 1, !dbg !7687, !ctir !622
  %100 = load %struct.line*, %struct.line** %hi91, align 8, !dbg !7687, !ctir !553
  %sub.ptr.lhs.cast92 = ptrtoint %struct.line* %98 to i64, !dbg !7688
  %sub.ptr.rhs.cast93 = ptrtoint %struct.line* %100 to i64, !dbg !7688
  %sub.ptr.sub94 = sub i64 %sub.ptr.lhs.cast92, %sub.ptr.rhs.cast93, !dbg !7688
  %sub.ptr.div95 = sdiv exact i64 %sub.ptr.sub94, 32, !dbg !7688
  store i64 %sub.ptr.div95, i64* %merged_hi, align 8, !dbg !7689
  %101 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7690
  %nhi96 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %101, i32 0, i32 6, !dbg !7692, !ctir !622
  %102 = load i64, i64* %nhi96, align 8, !dbg !7692, !ctir !52
  %103 = load i64, i64* %merged_hi, align 8, !dbg !7693
  %cmp97 = icmp eq i64 %102, %103, !dbg !7694
  br i1 %cmp97, label %if.then98, label %if.else111, !dbg !7695

if.then98:                                        ; preds = %while.end85
  br label %while.cond99, !dbg !7696

while.cond99:                                     ; preds = %while.body107, %if.then98
  %104 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7698
  %lo100 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %104, i32 0, i32 0, !dbg !7699, !ctir !622
  %105 = load %struct.line*, %struct.line** %lo100, align 8, !dbg !7699, !ctir !553
  %106 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7700
  %end_lo101 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %106, i32 0, i32 2, !dbg !7701, !ctir !622
  %107 = load %struct.line*, %struct.line** %end_lo101, align 8, !dbg !7701, !ctir !553
  %cmp102 = icmp ne %struct.line* %105, %107, !dbg !7702
  br i1 %cmp102, label %land.rhs103, label %land.end106, !dbg !7703

land.rhs103:                                      ; preds = %while.cond99
  %108 = load i64, i64* %to_merge, align 8, !dbg !7704
  %dec104 = add i64 %108, -1, !dbg !7704
  store i64 %dec104, i64* %to_merge, align 8, !dbg !7704
  %tobool105 = icmp ne i64 %108, 0, !dbg !7703
  br label %land.end106

land.end106:                                      ; preds = %land.rhs103, %while.cond99
  %109 = phi i1 [ false, %while.cond99 ], [ %tobool105, %land.rhs103 ], !dbg !7705
  br i1 %109, label %while.body107, label %while.end110, !dbg !7696

while.body107:                                    ; preds = %land.end106
  %110 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7706
  %lo108 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %110, i32 0, i32 0, !dbg !7707, !ctir !622
  %111 = load %struct.line*, %struct.line** %lo108, align 8, !dbg !7708, !ctir !553
  %incdec.ptr109 = getelementptr inbounds %struct.line, %struct.line* %111, i32 -1, !dbg !7708, !ctir !541
  store %struct.line* %incdec.ptr109, %struct.line** %lo108, align 8, !dbg !7708, !ctir !553
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !7709
  %113 = load i8*, i8** %temp_output.addr, align 8, !dbg !7710
  call void @write_unique(%struct.line* %incdec.ptr109, %struct._IO_FILE* %112, i8* %113), !dbg !7711
  br label %while.cond99, !dbg !7696, !llvm.loop !7712

while.end110:                                     ; preds = %land.end106
  br label %if.end128, !dbg !7714

if.else111:                                       ; preds = %while.end85
  %114 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7715
  %nlo112 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %114, i32 0, i32 5, !dbg !7717, !ctir !622
  %115 = load i64, i64* %nlo112, align 8, !dbg !7717, !ctir !52
  %116 = load i64, i64* %merged_lo, align 8, !dbg !7718
  %cmp113 = icmp eq i64 %115, %116, !dbg !7719
  br i1 %cmp113, label %if.then114, label %if.end127, !dbg !7720

if.then114:                                       ; preds = %if.else111
  br label %while.cond115, !dbg !7721

while.cond115:                                    ; preds = %while.body123, %if.then114
  %117 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7723
  %hi116 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %117, i32 0, i32 1, !dbg !7724, !ctir !622
  %118 = load %struct.line*, %struct.line** %hi116, align 8, !dbg !7724, !ctir !553
  %119 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7725
  %end_hi117 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %119, i32 0, i32 3, !dbg !7726, !ctir !622
  %120 = load %struct.line*, %struct.line** %end_hi117, align 8, !dbg !7726, !ctir !553
  %cmp118 = icmp ne %struct.line* %118, %120, !dbg !7727
  br i1 %cmp118, label %land.rhs119, label %land.end122, !dbg !7728

land.rhs119:                                      ; preds = %while.cond115
  %121 = load i64, i64* %to_merge, align 8, !dbg !7729
  %dec120 = add i64 %121, -1, !dbg !7729
  store i64 %dec120, i64* %to_merge, align 8, !dbg !7729
  %tobool121 = icmp ne i64 %121, 0, !dbg !7728
  br label %land.end122

land.end122:                                      ; preds = %land.rhs119, %while.cond115
  %122 = phi i1 [ false, %while.cond115 ], [ %tobool121, %land.rhs119 ], !dbg !7730
  br i1 %122, label %while.body123, label %while.end126, !dbg !7721

while.body123:                                    ; preds = %land.end122
  %123 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7731
  %hi124 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %123, i32 0, i32 1, !dbg !7732, !ctir !622
  %124 = load %struct.line*, %struct.line** %hi124, align 8, !dbg !7733, !ctir !553
  %incdec.ptr125 = getelementptr inbounds %struct.line, %struct.line* %124, i32 -1, !dbg !7733, !ctir !541
  store %struct.line* %incdec.ptr125, %struct.line** %hi124, align 8, !dbg !7733, !ctir !553
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** %tfp.addr, align 8, !dbg !7734
  %126 = load i8*, i8** %temp_output.addr, align 8, !dbg !7735
  call void @write_unique(%struct.line* %incdec.ptr125, %struct._IO_FILE* %125, i8* %126), !dbg !7736
  br label %while.cond115, !dbg !7721, !llvm.loop !7737

while.end126:                                     ; preds = %land.end122
  br label %if.end127, !dbg !7739

if.end127:                                        ; preds = %while.end126, %if.else111
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %while.end110
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end56
  %127 = load %struct.line*, %struct.line** %lo_orig, align 8, !dbg !7740
  %128 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7741
  %lo130 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %128, i32 0, i32 0, !dbg !7742, !ctir !622
  %129 = load %struct.line*, %struct.line** %lo130, align 8, !dbg !7742, !ctir !553
  %sub.ptr.lhs.cast131 = ptrtoint %struct.line* %127 to i64, !dbg !7743
  %sub.ptr.rhs.cast132 = ptrtoint %struct.line* %129 to i64, !dbg !7743
  %sub.ptr.sub133 = sub i64 %sub.ptr.lhs.cast131, %sub.ptr.rhs.cast132, !dbg !7743
  %sub.ptr.div134 = sdiv exact i64 %sub.ptr.sub133, 32, !dbg !7743
  store i64 %sub.ptr.div134, i64* %merged_lo, align 8, !dbg !7744
  %130 = load %struct.line*, %struct.line** %hi_orig, align 8, !dbg !7745
  %131 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7746
  %hi135 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %131, i32 0, i32 1, !dbg !7747, !ctir !622
  %132 = load %struct.line*, %struct.line** %hi135, align 8, !dbg !7747, !ctir !553
  %sub.ptr.lhs.cast136 = ptrtoint %struct.line* %130 to i64, !dbg !7748
  %sub.ptr.rhs.cast137 = ptrtoint %struct.line* %132 to i64, !dbg !7748
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137, !dbg !7748
  %sub.ptr.div139 = sdiv exact i64 %sub.ptr.sub138, 32, !dbg !7748
  store i64 %sub.ptr.div139, i64* %merged_hi, align 8, !dbg !7749
  %133 = load i64, i64* %merged_lo, align 8, !dbg !7750
  %134 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7751
  %nlo140 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %134, i32 0, i32 5, !dbg !7752, !ctir !622
  %135 = load i64, i64* %nlo140, align 8, !dbg !7753, !ctir !52
  %sub = sub i64 %135, %133, !dbg !7753
  store i64 %sub, i64* %nlo140, align 8, !dbg !7753, !ctir !52
  %136 = load i64, i64* %merged_hi, align 8, !dbg !7754
  %137 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7755
  %nhi141 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %137, i32 0, i32 6, !dbg !7756, !ctir !622
  %138 = load i64, i64* %nhi141, align 8, !dbg !7757, !ctir !52
  %sub142 = sub i64 %138, %136, !dbg !7757
  store i64 %sub142, i64* %nhi141, align 8, !dbg !7757, !ctir !52
  ret void, !dbg !7758
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_check_insert(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #4 !dbg !7759 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  %lo_avail = alloca i8, align 1, !ctir !162
  %hi_avail = alloca i8, align 1, !ctir !162
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !7760, metadata !DIExpression()), !dbg !7761
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7762, metadata !DIExpression()), !dbg !7763
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7764
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 11, !dbg !7766, !ctir !622
  %1 = load i8, i8* %queued, align 4, !dbg !7766
  %tobool = trunc i8 %1 to i1, !dbg !7766, !ctir !162
  br i1 %tobool, label %if.end13, label %if.then, !dbg !7767

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %lo_avail, metadata !7768, metadata !DIExpression()), !dbg !7770
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7771
  %lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 0, !dbg !7772, !ctir !622
  %3 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7772, !ctir !553
  %4 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7773
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 2, !dbg !7774, !ctir !622
  %5 = load %struct.line*, %struct.line** %end_lo, align 8, !dbg !7774, !ctir !553
  %sub.ptr.lhs.cast = ptrtoint %struct.line* %3 to i64, !dbg !7775
  %sub.ptr.rhs.cast = ptrtoint %struct.line* %5 to i64, !dbg !7775
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !7775
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 32, !dbg !7775
  %cmp = icmp ne i64 %sub.ptr.div, 0, !dbg !7776
  %frombool = zext i1 %cmp to i8, !dbg !7770
  store i8 %frombool, i8* %lo_avail, align 1, !dbg !7770
  call void @llvm.dbg.declare(metadata i8* %hi_avail, metadata !7777, metadata !DIExpression()), !dbg !7778
  %6 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7779
  %hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 1, !dbg !7780, !ctir !622
  %7 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7780, !ctir !553
  %8 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7781
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 3, !dbg !7782, !ctir !622
  %9 = load %struct.line*, %struct.line** %end_hi, align 8, !dbg !7782, !ctir !553
  %sub.ptr.lhs.cast1 = ptrtoint %struct.line* %7 to i64, !dbg !7783
  %sub.ptr.rhs.cast2 = ptrtoint %struct.line* %9 to i64, !dbg !7783
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2, !dbg !7783
  %sub.ptr.div4 = sdiv exact i64 %sub.ptr.sub3, 32, !dbg !7783
  %cmp5 = icmp ne i64 %sub.ptr.div4, 0, !dbg !7784
  %frombool6 = zext i1 %cmp5 to i8, !dbg !7778
  store i8 %frombool6, i8* %hi_avail, align 1, !dbg !7778
  %10 = load i8, i8* %lo_avail, align 1, !dbg !7785
  %tobool7 = trunc i8 %10 to i1, !dbg !7785
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !7787

cond.true:                                        ; preds = %if.then
  %11 = load i8, i8* %hi_avail, align 1, !dbg !7788
  %tobool8 = trunc i8 %11 to i1, !dbg !7788
  br i1 %tobool8, label %if.then12, label %lor.lhs.false, !dbg !7789

lor.lhs.false:                                    ; preds = %cond.true
  %12 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7790
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 6, !dbg !7791, !ctir !622
  %13 = load i64, i64* %nhi, align 8, !dbg !7791, !ctir !52
  %tobool9 = icmp ne i64 %13, 0, !dbg !7790
  br i1 %tobool9, label %if.end, label %if.then12, !dbg !7785

cond.false:                                       ; preds = %if.then
  %14 = load i8, i8* %hi_avail, align 1, !dbg !7792
  %tobool10 = trunc i8 %14 to i1, !dbg !7792
  br i1 %tobool10, label %land.lhs.true, label %if.end, !dbg !7793

land.lhs.true:                                    ; preds = %cond.false
  %15 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7794
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 0, i32 5, !dbg !7795, !ctir !622
  %16 = load i64, i64* %nlo, align 8, !dbg !7795, !ctir !52
  %tobool11 = icmp ne i64 %16, 0, !dbg !7794
  br i1 %tobool11, label %if.end, label %if.then12, !dbg !7787

if.then12:                                        ; preds = %land.lhs.true, %lor.lhs.false, %cond.true
  %17 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7796
  %18 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7797
  call void @queue_insert(%struct.merge_node_queue* %17, %struct.merge_node* %18), !dbg !7798
  br label %if.end, !dbg !7798

if.end:                                           ; preds = %if.then12, %land.lhs.true, %cond.false, %lor.lhs.false
  br label %if.end13, !dbg !7799

if.end13:                                         ; preds = %if.end, %entry
  ret void, !dbg !7800
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_check_insert_parent(%struct.merge_node_queue* %queue, %struct.merge_node* %node) #4 !dbg !7801 {
entry:
  %queue.addr = alloca %struct.merge_node_queue*, align 8
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node_queue* %queue, %struct.merge_node_queue** %queue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node_queue** %queue.addr, metadata !7802, metadata !DIExpression()), !dbg !7803
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7804, metadata !DIExpression()), !dbg !7805
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7806
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 10, !dbg !7808, !ctir !622
  %1 = load i32, i32* %level, align 8, !dbg !7808, !ctir !66
  %cmp = icmp ugt i32 %1, 1, !dbg !7809
  br i1 %cmp, label %if.then, label %if.else, !dbg !7810

if.then:                                          ; preds = %entry
  %2 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7811
  %parent = getelementptr inbounds %struct.merge_node, %struct.merge_node* %2, i32 0, i32 7, !dbg !7813, !ctir !622
  %3 = load %struct.merge_node*, %struct.merge_node** %parent, align 8, !dbg !7813, !ctir !621
  call void @lock_node(%struct.merge_node* %3), !dbg !7814
  %4 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7815
  %5 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7816
  %parent1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %5, i32 0, i32 7, !dbg !7817, !ctir !622
  %6 = load %struct.merge_node*, %struct.merge_node** %parent1, align 8, !dbg !7817, !ctir !621
  call void @queue_check_insert(%struct.merge_node_queue* %4, %struct.merge_node* %6), !dbg !7818
  %7 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7819
  %parent2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %7, i32 0, i32 7, !dbg !7820, !ctir !622
  %8 = load %struct.merge_node*, %struct.merge_node** %parent2, align 8, !dbg !7820, !ctir !621
  call void @unlock_node(%struct.merge_node* %8), !dbg !7821
  br label %if.end6, !dbg !7822

if.else:                                          ; preds = %entry
  %9 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7823
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %9, i32 0, i32 5, !dbg !7825, !ctir !622
  %10 = load i64, i64* %nlo, align 8, !dbg !7825, !ctir !52
  %11 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7826
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %11, i32 0, i32 6, !dbg !7827, !ctir !622
  %12 = load i64, i64* %nhi, align 8, !dbg !7827, !ctir !52
  %add = add i64 %10, %12, !dbg !7828
  %cmp3 = icmp eq i64 %add, 0, !dbg !7829
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !7830

if.then4:                                         ; preds = %if.else
  %13 = load %struct.merge_node_queue*, %struct.merge_node_queue** %queue.addr, align 8, !dbg !7831
  %14 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7833
  %parent5 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 7, !dbg !7834, !ctir !622
  %15 = load %struct.merge_node*, %struct.merge_node** %parent5, align 8, !dbg !7834, !ctir !621
  call void @queue_insert(%struct.merge_node_queue* %13, %struct.merge_node* %15), !dbg !7835
  br label %if.end, !dbg !7836

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  ret void, !dbg !7837
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @lock_node(%struct.merge_node* %node) #4 !dbg !7838 {
entry:
  %node.addr = alloca %struct.merge_node*, align 8
  store %struct.merge_node* %node, %struct.merge_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node.addr, metadata !7839, metadata !DIExpression()), !dbg !7840
  %0 = load %struct.merge_node*, %struct.merge_node** %node.addr, align 8, !dbg !7841
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %0, i32 0, i32 12, !dbg !7842, !ctir !622
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %lock) #12, !dbg !7843
  ret void, !dbg !7844
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_lock(%union.pthread_mutex_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) #2

declare dso_local i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) #3

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_signal(%union.pthread_cond_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mergelines(%struct.line* noalias %t, i64 %nlines, %struct.line* noalias %lo) #4 !dbg !7845 {
entry:
  %t.addr = alloca %struct.line*, align 8
  %nlines.addr = alloca i64, align 8
  %lo.addr = alloca %struct.line*, align 8
  %nlo = alloca i64, align 8, !ctir !52
  %nhi = alloca i64, align 8, !ctir !52
  %hi = alloca %struct.line*, align 8, !ctir !553
  store %struct.line* %t, %struct.line** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %t.addr, metadata !7849, metadata !DIExpression()), !dbg !7850
  store i64 %nlines, i64* %nlines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nlines.addr, metadata !7851, metadata !DIExpression()), !dbg !7852
  store %struct.line* %lo, %struct.line** %lo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %lo.addr, metadata !7853, metadata !DIExpression()), !dbg !7854
  call void @llvm.dbg.declare(metadata i64* %nlo, metadata !7855, metadata !DIExpression()), !dbg !7856
  %0 = load i64, i64* %nlines.addr, align 8, !dbg !7857
  %div = udiv i64 %0, 2, !dbg !7858
  store i64 %div, i64* %nlo, align 8, !dbg !7856
  call void @llvm.dbg.declare(metadata i64* %nhi, metadata !7859, metadata !DIExpression()), !dbg !7860
  %1 = load i64, i64* %nlines.addr, align 8, !dbg !7861
  %2 = load i64, i64* %nlo, align 8, !dbg !7862
  %sub = sub i64 %1, %2, !dbg !7863
  store i64 %sub, i64* %nhi, align 8, !dbg !7860
  call void @llvm.dbg.declare(metadata %struct.line** %hi, metadata !7864, metadata !DIExpression()), !dbg !7865
  %3 = load %struct.line*, %struct.line** %t.addr, align 8, !dbg !7866
  %4 = load i64, i64* %nlo, align 8, !dbg !7867
  %idx.neg = sub i64 0, %4, !dbg !7868
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %3, i64 %idx.neg, !dbg !7868, !ctir !541
  store %struct.line* %add.ptr, %struct.line** %hi, align 8, !dbg !7865
  br label %while.body, !dbg !7869

while.body:                                       ; preds = %entry, %if.end15
  %5 = load %struct.line*, %struct.line** %lo.addr, align 8, !dbg !7870
  %add.ptr1 = getelementptr inbounds %struct.line, %struct.line* %5, i64 -1, !dbg !7872, !ctir !540
  %6 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7873
  %add.ptr2 = getelementptr inbounds %struct.line, %struct.line* %6, i64 -1, !dbg !7874, !ctir !541
  %call = call i32 @compare(%struct.line* %add.ptr1, %struct.line* %add.ptr2), !dbg !7875
  %cmp = icmp sle i32 %call, 0, !dbg !7876
  br i1 %cmp, label %if.then, label %if.else, !dbg !7877

if.then:                                          ; preds = %while.body
  %7 = load %struct.line*, %struct.line** %t.addr, align 8, !dbg !7878
  %incdec.ptr = getelementptr inbounds %struct.line, %struct.line* %7, i32 -1, !dbg !7878, !ctir !541
  store %struct.line* %incdec.ptr, %struct.line** %t.addr, align 8, !dbg !7878
  %8 = load %struct.line*, %struct.line** %lo.addr, align 8, !dbg !7880
  %incdec.ptr3 = getelementptr inbounds %struct.line, %struct.line* %8, i32 -1, !dbg !7880, !ctir !540
  store %struct.line* %incdec.ptr3, %struct.line** %lo.addr, align 8, !dbg !7880
  %9 = bitcast %struct.line* %incdec.ptr to i8*, !dbg !7881
  %10 = bitcast %struct.line* %incdec.ptr3 to i8*, !dbg !7881
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 32, i1 false), !dbg !7881
  %11 = load i64, i64* %nlo, align 8, !dbg !7882
  %dec = add i64 %11, -1, !dbg !7882
  store i64 %dec, i64* %nlo, align 8, !dbg !7882
  %tobool = icmp ne i64 %dec, 0, !dbg !7882
  br i1 %tobool, label %if.end, label %if.then4, !dbg !7884

if.then4:                                         ; preds = %if.then
  br label %return, !dbg !7885

if.end:                                           ; preds = %if.then
  br label %if.end15, !dbg !7887

if.else:                                          ; preds = %while.body
  %12 = load %struct.line*, %struct.line** %t.addr, align 8, !dbg !7888
  %incdec.ptr5 = getelementptr inbounds %struct.line, %struct.line* %12, i32 -1, !dbg !7888, !ctir !541
  store %struct.line* %incdec.ptr5, %struct.line** %t.addr, align 8, !dbg !7888
  %13 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7890
  %incdec.ptr6 = getelementptr inbounds %struct.line, %struct.line* %13, i32 -1, !dbg !7890, !ctir !541
  store %struct.line* %incdec.ptr6, %struct.line** %hi, align 8, !dbg !7890
  %14 = bitcast %struct.line* %incdec.ptr5 to i8*, !dbg !7891
  %15 = bitcast %struct.line* %incdec.ptr6 to i8*, !dbg !7891
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 32, i1 false), !dbg !7891
  %16 = load i64, i64* %nhi, align 8, !dbg !7892
  %dec7 = add i64 %16, -1, !dbg !7892
  store i64 %dec7, i64* %nhi, align 8, !dbg !7892
  %tobool8 = icmp ne i64 %dec7, 0, !dbg !7892
  br i1 %tobool8, label %if.end14, label %if.then9, !dbg !7894

if.then9:                                         ; preds = %if.else
  br label %do.body, !dbg !7895

do.body:                                          ; preds = %do.cond, %if.then9
  %17 = load %struct.line*, %struct.line** %t.addr, align 8, !dbg !7897
  %incdec.ptr10 = getelementptr inbounds %struct.line, %struct.line* %17, i32 -1, !dbg !7897, !ctir !541
  store %struct.line* %incdec.ptr10, %struct.line** %t.addr, align 8, !dbg !7897
  %18 = load %struct.line*, %struct.line** %lo.addr, align 8, !dbg !7898
  %incdec.ptr11 = getelementptr inbounds %struct.line, %struct.line* %18, i32 -1, !dbg !7898, !ctir !540
  store %struct.line* %incdec.ptr11, %struct.line** %lo.addr, align 8, !dbg !7898
  %19 = bitcast %struct.line* %incdec.ptr10 to i8*, !dbg !7899
  %20 = bitcast %struct.line* %incdec.ptr11 to i8*, !dbg !7899
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !7899
  br label %do.cond, !dbg !7900

do.cond:                                          ; preds = %do.body
  %21 = load i64, i64* %nlo, align 8, !dbg !7901
  %dec12 = add i64 %21, -1, !dbg !7901
  store i64 %dec12, i64* %nlo, align 8, !dbg !7901
  %tobool13 = icmp ne i64 %dec12, 0, !dbg !7900
  br i1 %tobool13, label %do.body, label %do.end, !dbg !7900, !llvm.loop !7902

do.end:                                           ; preds = %do.cond
  br label %return, !dbg !7904

if.end14:                                         ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  br label %while.body, !dbg !7869, !llvm.loop !7905

return:                                           ; preds = %do.end, %if.then4
  ret void, !dbg !7907
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.anon.11*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.merge_node* @init_node(%struct.merge_node* noalias %parent, %struct.merge_node* noalias %node_pool, %struct.line* %dest, i64 %nthreads, i64 %total_lines, i1 zeroext %is_lo_child) #4 !dbg !7908 {
entry:
  %parent.addr = alloca %struct.merge_node*, align 8
  %node_pool.addr = alloca %struct.merge_node*, align 8
  %dest.addr = alloca %struct.line*, align 8
  %nthreads.addr = alloca i64, align 8
  %total_lines.addr = alloca i64, align 8
  %is_lo_child.addr = alloca i8, align 1
  %nlines = alloca i64, align 8, !ctir !52
  %nlo1 = alloca i64, align 8, !ctir !52
  %nhi2 = alloca i64, align 8, !ctir !52
  %lo = alloca %struct.line*, align 8, !ctir !553
  %hi = alloca %struct.line*, align 8, !ctir !553
  %parent_end = alloca %struct.line**, align 8, !ctir !629
  %node = alloca %struct.merge_node*, align 8, !ctir !621
  %lo_threads = alloca i64, align 8, !ctir !52
  %hi_threads = alloca i64, align 8, !ctir !52
  store %struct.merge_node* %parent, %struct.merge_node** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %parent.addr, metadata !7911, metadata !DIExpression()), !dbg !7912
  store %struct.merge_node* %node_pool, %struct.merge_node** %node_pool.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node_pool.addr, metadata !7913, metadata !DIExpression()), !dbg !7914
  store %struct.line* %dest, %struct.line** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.line** %dest.addr, metadata !7915, metadata !DIExpression()), !dbg !7916
  store i64 %nthreads, i64* %nthreads.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nthreads.addr, metadata !7917, metadata !DIExpression()), !dbg !7918
  store i64 %total_lines, i64* %total_lines.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %total_lines.addr, metadata !7919, metadata !DIExpression()), !dbg !7920
  %frombool = zext i1 %is_lo_child to i8
  store i8 %frombool, i8* %is_lo_child.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_lo_child.addr, metadata !7921, metadata !DIExpression()), !dbg !7922
  call void @llvm.dbg.declare(metadata i64* %nlines, metadata !7923, metadata !DIExpression()), !dbg !7924
  %0 = load i8, i8* %is_lo_child.addr, align 1, !dbg !7925
  %tobool = trunc i8 %0 to i1, !dbg !7925
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7925

cond.true:                                        ; preds = %entry
  %1 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7926
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %1, i32 0, i32 5, !dbg !7927, !ctir !622
  %2 = load i64, i64* %nlo, align 8, !dbg !7927, !ctir !52
  br label %cond.end, !dbg !7925

cond.false:                                       ; preds = %entry
  %3 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7928
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %3, i32 0, i32 6, !dbg !7929, !ctir !622
  %4 = load i64, i64* %nhi, align 8, !dbg !7929, !ctir !52
  br label %cond.end, !dbg !7925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %4, %cond.false ], !dbg !7925
  store i64 %cond, i64* %nlines, align 8, !dbg !7924
  call void @llvm.dbg.declare(metadata i64* %nlo1, metadata !7930, metadata !DIExpression()), !dbg !7931
  %5 = load i64, i64* %nlines, align 8, !dbg !7932
  %div = udiv i64 %5, 2, !dbg !7933
  store i64 %div, i64* %nlo1, align 8, !dbg !7931
  call void @llvm.dbg.declare(metadata i64* %nhi2, metadata !7934, metadata !DIExpression()), !dbg !7935
  %6 = load i64, i64* %nlines, align 8, !dbg !7936
  %7 = load i64, i64* %nlo1, align 8, !dbg !7937
  %sub = sub i64 %6, %7, !dbg !7938
  store i64 %sub, i64* %nhi2, align 8, !dbg !7935
  call void @llvm.dbg.declare(metadata %struct.line** %lo, metadata !7939, metadata !DIExpression()), !dbg !7940
  %8 = load %struct.line*, %struct.line** %dest.addr, align 8, !dbg !7941
  %9 = load i64, i64* %total_lines.addr, align 8, !dbg !7942
  %idx.neg = sub i64 0, %9, !dbg !7943
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %8, i64 %idx.neg, !dbg !7943, !ctir !541
  store %struct.line* %add.ptr, %struct.line** %lo, align 8, !dbg !7940
  call void @llvm.dbg.declare(metadata %struct.line** %hi, metadata !7944, metadata !DIExpression()), !dbg !7945
  %10 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7946
  %11 = load i64, i64* %nlo1, align 8, !dbg !7947
  %idx.neg3 = sub i64 0, %11, !dbg !7948
  %add.ptr4 = getelementptr inbounds %struct.line, %struct.line* %10, i64 %idx.neg3, !dbg !7948, !ctir !541
  store %struct.line* %add.ptr4, %struct.line** %hi, align 8, !dbg !7945
  call void @llvm.dbg.declare(metadata %struct.line*** %parent_end, metadata !7949, metadata !DIExpression()), !dbg !7950
  %12 = load i8, i8* %is_lo_child.addr, align 1, !dbg !7951
  %tobool5 = trunc i8 %12 to i1, !dbg !7951
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !7951

cond.true6:                                       ; preds = %cond.end
  %13 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7952
  %end_lo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %13, i32 0, i32 2, !dbg !7953, !ctir !622
  br label %cond.end8, !dbg !7951

cond.false7:                                      ; preds = %cond.end
  %14 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7954
  %end_hi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 3, !dbg !7955, !ctir !622
  br label %cond.end8, !dbg !7951

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi %struct.line** [ %end_lo, %cond.true6 ], [ %end_hi, %cond.false7 ], !dbg !7951
  store %struct.line** %cond9, %struct.line*** %parent_end, align 8, !dbg !7950
  call void @llvm.dbg.declare(metadata %struct.merge_node** %node, metadata !7956, metadata !DIExpression()), !dbg !7957
  %15 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !7958
  %incdec.ptr = getelementptr inbounds %struct.merge_node, %struct.merge_node* %15, i32 1, !dbg !7958, !ctir !622
  store %struct.merge_node* %incdec.ptr, %struct.merge_node** %node_pool.addr, align 8, !dbg !7958
  store %struct.merge_node* %15, %struct.merge_node** %node, align 8, !dbg !7957
  %16 = load %struct.line*, %struct.line** %lo, align 8, !dbg !7959
  %17 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7960
  %end_lo10 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %17, i32 0, i32 2, !dbg !7961, !ctir !622
  store %struct.line* %16, %struct.line** %end_lo10, align 8, !dbg !7962, !ctir !553
  %18 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7963
  %lo11 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i32 0, i32 0, !dbg !7964, !ctir !622
  store %struct.line* %16, %struct.line** %lo11, align 8, !dbg !7965, !ctir !553
  %19 = load %struct.line*, %struct.line** %hi, align 8, !dbg !7966
  %20 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7967
  %end_hi12 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %20, i32 0, i32 3, !dbg !7968, !ctir !622
  store %struct.line* %19, %struct.line** %end_hi12, align 8, !dbg !7969, !ctir !553
  %21 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7970
  %hi13 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %21, i32 0, i32 1, !dbg !7971, !ctir !622
  store %struct.line* %19, %struct.line** %hi13, align 8, !dbg !7972, !ctir !553
  %22 = load %struct.line**, %struct.line*** %parent_end, align 8, !dbg !7973
  %23 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7974
  %dest14 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %23, i32 0, i32 4, !dbg !7975, !ctir !622
  store %struct.line** %22, %struct.line*** %dest14, align 8, !dbg !7976, !ctir !629
  %24 = load i64, i64* %nlo1, align 8, !dbg !7977
  %25 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7978
  %nlo15 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %25, i32 0, i32 5, !dbg !7979, !ctir !622
  store i64 %24, i64* %nlo15, align 8, !dbg !7980, !ctir !52
  %26 = load i64, i64* %nhi2, align 8, !dbg !7981
  %27 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7982
  %nhi16 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %27, i32 0, i32 6, !dbg !7983, !ctir !622
  store i64 %26, i64* %nhi16, align 8, !dbg !7984, !ctir !52
  %28 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7985
  %29 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7986
  %parent17 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %29, i32 0, i32 7, !dbg !7987, !ctir !622
  store %struct.merge_node* %28, %struct.merge_node** %parent17, align 8, !dbg !7988, !ctir !621
  %30 = load %struct.merge_node*, %struct.merge_node** %parent.addr, align 8, !dbg !7989
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %30, i32 0, i32 10, !dbg !7990, !ctir !622
  %31 = load i32, i32* %level, align 8, !dbg !7990, !ctir !66
  %add = add i32 %31, 1, !dbg !7991
  %32 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7992
  %level18 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %32, i32 0, i32 10, !dbg !7993, !ctir !622
  store i32 %add, i32* %level18, align 8, !dbg !7994, !ctir !66
  %33 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7995
  %queued = getelementptr inbounds %struct.merge_node, %struct.merge_node* %33, i32 0, i32 11, !dbg !7996, !ctir !622
  store i8 0, i8* %queued, align 4, !dbg !7997, !ctir !162
  %34 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !7998
  %lock = getelementptr inbounds %struct.merge_node, %struct.merge_node* %34, i32 0, i32 12, !dbg !7999, !ctir !622
  %call = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %lock, %union.anon.11* null) #12, !dbg !8000
  %35 = load i64, i64* %nthreads.addr, align 8, !dbg !8001
  %cmp = icmp ugt i64 %35, 1, !dbg !8003
  br i1 %cmp, label %if.then, label %if.else, !dbg !8004

if.then:                                          ; preds = %cond.end8
  call void @llvm.dbg.declare(metadata i64* %lo_threads, metadata !8005, metadata !DIExpression()), !dbg !8007
  %36 = load i64, i64* %nthreads.addr, align 8, !dbg !8008
  %div19 = udiv i64 %36, 2, !dbg !8009
  store i64 %div19, i64* %lo_threads, align 8, !dbg !8007
  call void @llvm.dbg.declare(metadata i64* %hi_threads, metadata !8010, metadata !DIExpression()), !dbg !8011
  %37 = load i64, i64* %nthreads.addr, align 8, !dbg !8012
  %38 = load i64, i64* %lo_threads, align 8, !dbg !8013
  %sub20 = sub i64 %37, %38, !dbg !8014
  store i64 %sub20, i64* %hi_threads, align 8, !dbg !8011
  %39 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !8015
  %40 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8016
  %lo_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %40, i32 0, i32 8, !dbg !8017, !ctir !622
  store %struct.merge_node* %39, %struct.merge_node** %lo_child, align 8, !dbg !8018, !ctir !621
  %41 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8019
  %42 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !8020
  %43 = load %struct.line*, %struct.line** %lo, align 8, !dbg !8021
  %44 = load i64, i64* %lo_threads, align 8, !dbg !8022
  %45 = load i64, i64* %total_lines.addr, align 8, !dbg !8023
  %call21 = call %struct.merge_node* @init_node(%struct.merge_node* %41, %struct.merge_node* %42, %struct.line* %43, i64 %44, i64 %45, i1 zeroext true), !dbg !8024
  store %struct.merge_node* %call21, %struct.merge_node** %node_pool.addr, align 8, !dbg !8025
  %46 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !8026
  %47 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8027
  %hi_child = getelementptr inbounds %struct.merge_node, %struct.merge_node* %47, i32 0, i32 9, !dbg !8028, !ctir !622
  store %struct.merge_node* %46, %struct.merge_node** %hi_child, align 8, !dbg !8029, !ctir !621
  %48 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8030
  %49 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !8031
  %50 = load %struct.line*, %struct.line** %hi, align 8, !dbg !8032
  %51 = load i64, i64* %hi_threads, align 8, !dbg !8033
  %52 = load i64, i64* %total_lines.addr, align 8, !dbg !8034
  %call22 = call %struct.merge_node* @init_node(%struct.merge_node* %48, %struct.merge_node* %49, %struct.line* %50, i64 %51, i64 %52, i1 zeroext false), !dbg !8035
  store %struct.merge_node* %call22, %struct.merge_node** %node_pool.addr, align 8, !dbg !8036
  br label %if.end, !dbg !8037

if.else:                                          ; preds = %cond.end8
  %53 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8038
  %lo_child23 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %53, i32 0, i32 8, !dbg !8040, !ctir !622
  store %struct.merge_node* null, %struct.merge_node** %lo_child23, align 8, !dbg !8041, !ctir !621
  %54 = load %struct.merge_node*, %struct.merge_node** %node, align 8, !dbg !8042
  %hi_child24 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %54, i32 0, i32 9, !dbg !8043, !ctir !622
  store %struct.merge_node* null, %struct.merge_node** %hi_child24, align 8, !dbg !8044, !ctir !621
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %55 = load %struct.merge_node*, %struct.merge_node** %node_pool.addr, align 8, !dbg !8045
  ret %struct.merge_node* %55, !dbg !8046
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @compare_nodes(i8* %a, i8* %b) #4 !dbg !8047 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %nodea = alloca %struct.merge_node*, align 8, !ctir !668
  %nodeb = alloca %struct.merge_node*, align 8, !ctir !668
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !8048, metadata !DIExpression()), !dbg !8049
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !8050, metadata !DIExpression()), !dbg !8051
  call void @llvm.dbg.declare(metadata %struct.merge_node** %nodea, metadata !8052, metadata !DIExpression()), !dbg !8053
  %0 = load i8*, i8** %a.addr, align 8, !dbg !8054
  %1 = bitcast i8* %0 to %struct.merge_node*, !dbg !8054
  store %struct.merge_node* %1, %struct.merge_node** %nodea, align 8, !dbg !8053
  call void @llvm.dbg.declare(metadata %struct.merge_node** %nodeb, metadata !8055, metadata !DIExpression()), !dbg !8056
  %2 = load i8*, i8** %b.addr, align 8, !dbg !8057
  %3 = bitcast i8* %2 to %struct.merge_node*, !dbg !8057
  store %struct.merge_node* %3, %struct.merge_node** %nodeb, align 8, !dbg !8056
  %4 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !dbg !8058
  %level = getelementptr inbounds %struct.merge_node, %struct.merge_node* %4, i32 0, i32 10, !dbg !8060, !ctir !669
  %5 = load i32, i32* %level, align 8, !dbg !8060, !ctir !66
  %6 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !dbg !8061
  %level1 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %6, i32 0, i32 10, !dbg !8062, !ctir !669
  %7 = load i32, i32* %level1, align 8, !dbg !8062, !ctir !66
  %cmp = icmp eq i32 %5, %7, !dbg !8063
  br i1 %cmp, label %if.then, label %if.end, !dbg !8064

if.then:                                          ; preds = %entry
  %8 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !dbg !8065
  %nlo = getelementptr inbounds %struct.merge_node, %struct.merge_node* %8, i32 0, i32 5, !dbg !8066, !ctir !669
  %9 = load i64, i64* %nlo, align 8, !dbg !8066, !ctir !52
  %10 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !dbg !8067
  %nhi = getelementptr inbounds %struct.merge_node, %struct.merge_node* %10, i32 0, i32 6, !dbg !8068, !ctir !669
  %11 = load i64, i64* %nhi, align 8, !dbg !8068, !ctir !52
  %add = add i64 %9, %11, !dbg !8069
  %12 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !dbg !8070
  %nlo2 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %12, i32 0, i32 5, !dbg !8071, !ctir !669
  %13 = load i64, i64* %nlo2, align 8, !dbg !8071, !ctir !52
  %14 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !dbg !8072
  %nhi3 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %14, i32 0, i32 6, !dbg !8073, !ctir !669
  %15 = load i64, i64* %nhi3, align 8, !dbg !8073, !ctir !52
  %add4 = add i64 %13, %15, !dbg !8074
  %cmp5 = icmp ult i64 %add, %add4, !dbg !8075
  %conv = zext i1 %cmp5 to i32, !dbg !8075
  store i32 %conv, i32* %retval, align 4, !dbg !8076
  br label %return, !dbg !8076

if.end:                                           ; preds = %entry
  %16 = load %struct.merge_node*, %struct.merge_node** %nodea, align 8, !dbg !8077
  %level6 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %16, i32 0, i32 10, !dbg !8078, !ctir !669
  %17 = load i32, i32* %level6, align 8, !dbg !8078, !ctir !66
  %18 = load %struct.merge_node*, %struct.merge_node** %nodeb, align 8, !dbg !8079
  %level7 = getelementptr inbounds %struct.merge_node, %struct.merge_node* %18, i32 0, i32 10, !dbg !8080, !ctir !669
  %19 = load i32, i32* %level7, align 8, !dbg !8080, !ctir !66
  %cmp8 = icmp ult i32 %17, %19, !dbg !8081
  %conv9 = zext i1 %cmp8 to i32, !dbg !8081
  store i32 %conv9, i32* %retval, align 4, !dbg !8082
  br label %return, !dbg !8082

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !8083
  ret i32 %20, !dbg !8083
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_cond_init(%union.pthread_cond_t*, %union.anon.11*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tempnode* @maybe_create_temp(%struct._IO_FILE** %pfp, i1 zeroext %survive_fd_exhaustion) #4 !dbg !8084 {
entry:
  %retval = alloca %struct.tempnode*, align 8
  %pfp.addr = alloca %struct._IO_FILE**, align 8
  %survive_fd_exhaustion.addr = alloca i8, align 1
  %tempfd = alloca i32, align 4, !ctir !5
  %node = alloca %struct.tempnode*, align 8, !ctir !407
  %pipefds = alloca [2 x i32], align 4, !ctir !585
  store %struct._IO_FILE** %pfp, %struct._IO_FILE*** %pfp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %pfp.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  %frombool = zext i1 %survive_fd_exhaustion to i8
  store i8 %frombool, i8* %survive_fd_exhaustion.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %survive_fd_exhaustion.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  call void @llvm.dbg.declare(metadata i32* %tempfd, metadata !8091, metadata !DIExpression()), !dbg !8092
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !8093, metadata !DIExpression()), !dbg !8094
  %0 = load i8, i8* %survive_fd_exhaustion.addr, align 1, !dbg !8095
  %tobool = trunc i8 %0 to i1, !dbg !8095
  %call = call %struct.tempnode* @create_temp_file(i32* %tempfd, i1 zeroext %tobool), !dbg !8096
  store %struct.tempnode* %call, %struct.tempnode** %node, align 8, !dbg !8094
  %1 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8097
  %tobool1 = icmp ne %struct.tempnode* %1, null, !dbg !8097
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8099

if.then:                                          ; preds = %entry
  store %struct.tempnode* null, %struct.tempnode** %retval, align 8, !dbg !8100
  br label %return, !dbg !8100

if.end:                                           ; preds = %entry
  %2 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8101
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 2, !dbg !8102, !ctir !408
  store i8 0, i8* %state, align 4, !dbg !8103, !ctir !8
  %3 = load i8*, i8** @compress_program, align 8, !dbg !8104
  %tobool2 = icmp ne i8* %3, null, !dbg !8104
  br i1 %tobool2, label %if.then3, label %if.end20, !dbg !8106

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata [2 x i32]* %pipefds, metadata !8107, metadata !DIExpression()), !dbg !8109
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !8110, !ctir !585
  %call4 = call i32 @pipe_fork(i32* %arraydecay, i64 4), !dbg !8111
  %4 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8112
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 1, !dbg !8113, !ctir !408
  store i32 %call4, i32* %pid, align 8, !dbg !8114, !ctir !413
  %5 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8115
  %pid5 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %5, i32 0, i32 1, !dbg !8117, !ctir !408
  %6 = load i32, i32* %pid5, align 8, !dbg !8117, !ctir !413
  %cmp = icmp slt i32 0, %6, !dbg !8118
  br i1 %cmp, label %if.then6, label %if.else, !dbg !8119

if.then6:                                         ; preds = %if.then3
  %7 = load i32, i32* %tempfd, align 4, !dbg !8120
  %call7 = call i32 @close(i32 %7), !dbg !8122
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !8123, !ctir !585
  %8 = load i32, i32* %arrayidx, align 4, !dbg !8123
  %call8 = call i32 @close(i32 %8), !dbg !8124
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1, !dbg !8125, !ctir !585
  %9 = load i32, i32* %arrayidx9, align 4, !dbg !8125
  store i32 %9, i32* %tempfd, align 4, !dbg !8126
  %10 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8127
  call void @register_proc(%struct.tempnode* %10), !dbg !8128
  br label %if.end19, !dbg !8129

if.else:                                          ; preds = %if.then3
  %11 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8130
  %pid10 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %11, i32 0, i32 1, !dbg !8132, !ctir !408
  %12 = load i32, i32* %pid10, align 8, !dbg !8132, !ctir !413
  %cmp11 = icmp eq i32 %12, 0, !dbg !8133
  br i1 %cmp11, label %if.then12, label %if.end18, !dbg !8134

if.then12:                                        ; preds = %if.else
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1, !dbg !8135, !ctir !585
  %13 = load i32, i32* %arrayidx13, align 4, !dbg !8135
  %call14 = call i32 @close(i32 %13), !dbg !8137
  %14 = load i32, i32* %tempfd, align 4, !dbg !8138
  call void @move_fd(i32 %14, i32 1), !dbg !8139
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !8140, !ctir !585
  %15 = load i32, i32* %arrayidx15, align 4, !dbg !8140
  call void @move_fd(i32 %15, i32 0), !dbg !8141
  %16 = load i8*, i8** @compress_program, align 8, !dbg !8142
  %17 = load i8*, i8** @compress_program, align 8, !dbg !8143
  %call16 = call i32 (i8*, i8*, ...) @execlp(i8* %16, i8* %17, i8* null) #12, !dbg !8144
  %call17 = call i32* @__errno_location() #16, !dbg !8145
  %18 = load i32, i32* %call17, align 4, !dbg !8145, !ctir !5
  call void @async_safe_die(i32 %18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.176, i64 0, i64 0)) #15, !dbg !8146
  unreachable, !dbg !8146

if.end18:                                         ; preds = %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then6
  br label %if.end20, !dbg !8147

if.end20:                                         ; preds = %if.end19, %if.end
  %19 = load i32, i32* %tempfd, align 4, !dbg !8148
  %call21 = call %struct._IO_FILE* @fdopen(i32 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.167, i64 0, i64 0)) #12, !dbg !8149
  %20 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !dbg !8150
  store %struct._IO_FILE* %call21, %struct._IO_FILE** %20, align 8, !dbg !8151, !ctir !389
  %21 = load %struct._IO_FILE**, %struct._IO_FILE*** %pfp.addr, align 8, !dbg !8152
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %21, align 8, !dbg !8154, !ctir !389
  %tobool22 = icmp ne %struct._IO_FILE* %22, null, !dbg !8154
  br i1 %tobool22, label %if.end26, label %if.then23, !dbg !8155

if.then23:                                        ; preds = %if.end20
  %call24 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.177, i64 0, i64 0)) #12, !dbg !8156
  %23 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8157
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %23, i32 0, i32 3, !dbg !8158, !ctir !408
  %arraydecay25 = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !8157, !ctir !417
  call void @sort_die(i8* %call24, i8* %arraydecay25) #15, !dbg !8159
  unreachable, !dbg !8159

if.end26:                                         ; preds = %if.end20
  %24 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8160
  store %struct.tempnode* %24, %struct.tempnode** %retval, align 8, !dbg !8161
  br label %return, !dbg !8161

return:                                           ; preds = %if.end26, %if.then
  %25 = load %struct.tempnode*, %struct.tempnode** %retval, align 8, !dbg !8162
  ret %struct.tempnode* %25, !dbg !8162
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tempnode* @create_temp_file(i32* %pfd, i1 zeroext %survive_fd_exhaustion) #4 !dbg !800 {
entry:
  %pfd.addr = alloca i32*, align 8
  %survive_fd_exhaustion.addr = alloca i8, align 1
  %fd = alloca i32, align 4, !ctir !5
  %saved_errno = alloca i32, align 4, !ctir !5
  %temp_dir = alloca i8*, align 8, !ctir !90
  %len = alloca i64, align 8, !ctir !52
  %node = alloca %struct.tempnode*, align 8, !ctir !407
  %file = alloca i8*, align 8, !ctir !7
  %cs = alloca %struct.cs_status, align 8, !ctir !2943
  store i32* %pfd, i32** %pfd.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pfd.addr, metadata !8163, metadata !DIExpression()), !dbg !8164
  %frombool = zext i1 %survive_fd_exhaustion to i8
  store i8 %frombool, i8* %survive_fd_exhaustion.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %survive_fd_exhaustion.addr, metadata !8165, metadata !DIExpression()), !dbg !8166
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !8167, metadata !DIExpression()), !dbg !8168
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !8169, metadata !DIExpression()), !dbg !8170
  call void @llvm.dbg.declare(metadata i8** %temp_dir, metadata !8171, metadata !DIExpression()), !dbg !8172
  %0 = load i8**, i8*** @temp_dirs, align 8, !dbg !8173
  %1 = load i64, i64* @create_temp_file.temp_dir_index, align 8, !dbg !8174
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !8173, !ctir !481
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !8173
  store i8* %2, i8** %temp_dir, align 8, !dbg !8172
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8175, metadata !DIExpression()), !dbg !8176
  %3 = load i8*, i8** %temp_dir, align 8, !dbg !8177
  %call = call i64 @strlen(i8* %3) #14, !dbg !8178
  store i64 %call, i64* %len, align 8, !dbg !8176
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !8179, metadata !DIExpression()), !dbg !8180
  %4 = load i64, i64* %len, align 8, !dbg !8181
  %add = add i64 %4, 12, !dbg !8181
  %add1 = add i64 20, %add, !dbg !8181
  %and = and i64 %add1, -8, !dbg !8181
  %call2 = call noalias i8* @xmalloc(i64 %and), !dbg !8182
  %5 = bitcast i8* %call2 to %struct.tempnode*, !dbg !8182
  store %struct.tempnode* %5, %struct.tempnode** %node, align 8, !dbg !8180
  call void @llvm.dbg.declare(metadata i8** %file, metadata !8183, metadata !DIExpression()), !dbg !8184
  %6 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8185
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %6, i32 0, i32 3, !dbg !8186, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !8185, !ctir !417
  store i8* %arraydecay, i8** %file, align 8, !dbg !8184
  call void @llvm.dbg.declare(metadata %struct.cs_status* %cs, metadata !8187, metadata !DIExpression()), !dbg !8188
  %7 = load i8*, i8** %file, align 8, !dbg !8189
  %8 = load i8*, i8** %temp_dir, align 8, !dbg !8190
  %9 = load i64, i64* %len, align 8, !dbg !8191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 %9, i1 false), !dbg !8192
  %10 = load i8*, i8** %file, align 8, !dbg !8193
  %11 = load i64, i64* %len, align 8, !dbg !8194
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11, !dbg !8195, !ctir !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @create_temp_file.slashbase, i64 0, i64 0), i64 12, i1 false), !dbg !8196
  %12 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8197
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %12, i32 0, i32 0, !dbg !8198, !ctir !408
  store volatile %struct.tempnode* null, %struct.tempnode** %next, align 8, !dbg !8199, !ctir !411
  %13 = load i64, i64* @create_temp_file.temp_dir_index, align 8, !dbg !8200
  %inc = add i64 %13, 1, !dbg !8200
  store i64 %inc, i64* @create_temp_file.temp_dir_index, align 8, !dbg !8200
  %14 = load i64, i64* @temp_dir_count, align 8, !dbg !8202
  %cmp = icmp eq i64 %inc, %14, !dbg !8203
  br i1 %cmp, label %if.then, label %if.end, !dbg !8204

if.then:                                          ; preds = %entry
  store i64 0, i64* @create_temp_file.temp_dir_index, align 8, !dbg !8205
  br label %if.end, !dbg !8206

if.end:                                           ; preds = %if.then, %entry
  call void @cs_enter(%struct.cs_status* %cs), !dbg !8207
  %15 = load i8*, i8** %file, align 8, !dbg !8208
  %call3 = call i32 @mkostemp_safer(i8* %15, i32 524288), !dbg !8209
  store i32 %call3, i32* %fd, align 4, !dbg !8210
  %16 = load i32, i32* %fd, align 4, !dbg !8211
  %cmp4 = icmp sle i32 0, %16, !dbg !8213
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !8214

if.then5:                                         ; preds = %if.end
  %17 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8215
  %18 = load %struct.tempnode**, %struct.tempnode*** @temptail, align 8, !dbg !8217
  store volatile %struct.tempnode* %17, %struct.tempnode** %18, align 8, !dbg !8218, !ctir !411
  %19 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8219
  %next6 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %19, i32 0, i32 0, !dbg !8220, !ctir !408
  store %struct.tempnode** %next6, %struct.tempnode*** @temptail, align 8, !dbg !8221
  br label %if.end7, !dbg !8222

if.end7:                                          ; preds = %if.then5, %if.end
  %call8 = call i32* @__errno_location() #16, !dbg !8223
  %20 = load i32, i32* %call8, align 4, !dbg !8223, !ctir !5
  store i32 %20, i32* %saved_errno, align 4, !dbg !8224
  call void @cs_leave(%struct.cs_status* %cs), !dbg !8225
  %21 = load i32, i32* %saved_errno, align 4, !dbg !8226
  %call9 = call i32* @__errno_location() #16, !dbg !8227
  store i32 %21, i32* %call9, align 4, !dbg !8228, !ctir !5
  %22 = load i32, i32* %fd, align 4, !dbg !8229
  %cmp10 = icmp slt i32 %22, 0, !dbg !8231
  br i1 %cmp10, label %if.then11, label %if.end19, !dbg !8232

if.then11:                                        ; preds = %if.end7
  %23 = load i8, i8* %survive_fd_exhaustion.addr, align 1, !dbg !8233
  %tobool = trunc i8 %23 to i1, !dbg !8233
  br i1 %tobool, label %land.lhs.true, label %if.then14, !dbg !8236

land.lhs.true:                                    ; preds = %if.then11
  %call12 = call i32* @__errno_location() #16, !dbg !8237
  %24 = load i32, i32* %call12, align 4, !dbg !8237, !ctir !5
  %cmp13 = icmp eq i32 %24, 24, !dbg !8238
  br i1 %cmp13, label %if.end18, label %if.then14, !dbg !8239

if.then14:                                        ; preds = %land.lhs.true, %if.then11
  %call15 = call i32* @__errno_location() #16, !dbg !8240
  %25 = load i32, i32* %call15, align 4, !dbg !8240, !ctir !5
  %call16 = call i8* @gettext(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.178, i64 0, i64 0)) #12, !dbg !8240
  %26 = load i8*, i8** %temp_dir, align 8, !dbg !8240
  %call17 = call i8* @quotearg_style(i32 4, i8* %26), !dbg !8240
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %25, i8* %call16, i8* %call17), !dbg !8240
  unreachable, !dbg !8240

if.end18:                                         ; preds = %land.lhs.true
  %27 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8241
  %28 = bitcast %struct.tempnode* %27 to i8*, !dbg !8241
  call void @free(i8* %28) #12, !dbg !8242
  store %struct.tempnode* null, %struct.tempnode** %node, align 8, !dbg !8243
  br label %if.end19, !dbg !8244

if.end19:                                         ; preds = %if.end18, %if.end7
  %29 = load i32, i32* %fd, align 4, !dbg !8245
  %30 = load i32*, i32** %pfd.addr, align 8, !dbg !8246
  store i32 %29, i32* %30, align 4, !dbg !8247, !ctir !5
  %31 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8248
  ret %struct.tempnode* %31, !dbg !8249
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pipe_fork(i32* %pipefds, i64 %tries) #4 !dbg !8250 {
entry:
  %retval = alloca i32, align 4
  %pipefds.addr = alloca i32*, align 8
  %tries.addr = alloca i64, align 8
  %saved_temphead = alloca %struct.tempnode*, align 8, !ctir !407
  %saved_errno = alloca i32, align 4, !ctir !5
  %wait_retry = alloca double, align 8, !ctir !480
  %pid = alloca i32, align 4, !ctir !413
  %cs = alloca %struct.cs_status, align 8, !ctir !2943
  store i32* %pipefds, i32** %pipefds.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pipefds.addr, metadata !8253, metadata !DIExpression()), !dbg !8254
  store i64 %tries, i64* %tries.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %tries.addr, metadata !8255, metadata !DIExpression()), !dbg !8256
  call void @llvm.dbg.declare(metadata %struct.tempnode** %saved_temphead, metadata !8257, metadata !DIExpression()), !dbg !8258
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !8259, metadata !DIExpression()), !dbg !8260
  call void @llvm.dbg.declare(metadata double* %wait_retry, metadata !8261, metadata !DIExpression()), !dbg !8262
  store double 2.500000e-01, double* %wait_retry, align 8, !dbg !8262
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !8263, metadata !DIExpression()), !dbg !8264
  call void @llvm.dbg.declare(metadata %struct.cs_status* %cs, metadata !8265, metadata !DIExpression()), !dbg !8266
  %0 = load i32*, i32** %pipefds.addr, align 8, !dbg !8267
  %call = call i32 @rpl_pipe2(i32* %0, i32 524288), !dbg !8269
  %cmp = icmp slt i32 %call, 0, !dbg !8270
  br i1 %cmp, label %if.then, label %if.end, !dbg !8271

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !8272
  br label %return, !dbg !8272

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @nmerge, align 4, !dbg !8273
  %add = add i32 %1, 1, !dbg !8275
  %2 = load i32, i32* @nprocs, align 4, !dbg !8276
  %cmp1 = icmp ult i32 %add, %2, !dbg !8277
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8278

if.then2:                                         ; preds = %if.end
  call void @reap_some(), !dbg !8279
  br label %if.end3, !dbg !8279

if.end3:                                          ; preds = %if.then2, %if.end
  br label %while.cond, !dbg !8280

while.cond:                                       ; preds = %if.end15, %if.end3
  %3 = load i64, i64* %tries.addr, align 8, !dbg !8281
  %dec = add i64 %3, -1, !dbg !8281
  store i64 %dec, i64* %tries.addr, align 8, !dbg !8281
  %tobool = icmp ne i64 %3, 0, !dbg !8280
  br i1 %tobool, label %while.body, label %while.end, !dbg !8280

while.body:                                       ; preds = %while.cond
  call void @cs_enter(%struct.cs_status* %cs), !dbg !8282
  %4 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !dbg !8284
  store %struct.tempnode* %4, %struct.tempnode** %saved_temphead, align 8, !dbg !8285
  store volatile %struct.tempnode* null, %struct.tempnode** @temphead, align 8, !dbg !8286
  %call4 = call i32 @fork() #12, !dbg !8287
  store i32 %call4, i32* %pid, align 4, !dbg !8288
  %call5 = call i32* @__errno_location() #16, !dbg !8289
  %5 = load i32, i32* %call5, align 4, !dbg !8289, !ctir !5
  store i32 %5, i32* %saved_errno, align 4, !dbg !8290
  %6 = load i32, i32* %pid, align 4, !dbg !8291
  %tobool6 = icmp ne i32 %6, 0, !dbg !8291
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !8293

if.then7:                                         ; preds = %while.body
  %7 = load %struct.tempnode*, %struct.tempnode** %saved_temphead, align 8, !dbg !8294
  store volatile %struct.tempnode* %7, %struct.tempnode** @temphead, align 8, !dbg !8295
  br label %if.end8, !dbg !8296

if.end8:                                          ; preds = %if.then7, %while.body
  call void @cs_leave(%struct.cs_status* %cs), !dbg !8297
  %8 = load i32, i32* %saved_errno, align 4, !dbg !8298
  %call9 = call i32* @__errno_location() #16, !dbg !8299
  store i32 %8, i32* %call9, align 4, !dbg !8300, !ctir !5
  %9 = load i32, i32* %pid, align 4, !dbg !8301
  %cmp10 = icmp sle i32 0, %9, !dbg !8303
  br i1 %cmp10, label %if.then13, label %lor.lhs.false, !dbg !8304

lor.lhs.false:                                    ; preds = %if.end8
  %call11 = call i32* @__errno_location() #16, !dbg !8305
  %10 = load i32, i32* %call11, align 4, !dbg !8305, !ctir !5
  %cmp12 = icmp ne i32 %10, 11, !dbg !8306
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !8307

if.then13:                                        ; preds = %lor.lhs.false, %if.end8
  br label %while.end, !dbg !8308

if.else:                                          ; preds = %lor.lhs.false
  %11 = load double, double* %wait_retry, align 8, !dbg !8309
  %call14 = call i32 @xnanosleep(double %11), !dbg !8311
  %12 = load double, double* %wait_retry, align 8, !dbg !8312
  %mul = fmul double %12, 2.000000e+00, !dbg !8312
  store double %mul, double* %wait_retry, align 8, !dbg !8312
  call void @reap_exited(), !dbg !8313
  br label %if.end15

if.end15:                                         ; preds = %if.else
  br label %while.cond, !dbg !8280, !llvm.loop !8314

while.end:                                        ; preds = %if.then13, %while.cond
  %13 = load i32, i32* %pid, align 4, !dbg !8316
  %cmp16 = icmp slt i32 %13, 0, !dbg !8318
  br i1 %cmp16, label %if.then17, label %if.else23, !dbg !8319

if.then17:                                        ; preds = %while.end
  %call18 = call i32* @__errno_location() #16, !dbg !8320
  %14 = load i32, i32* %call18, align 4, !dbg !8320, !ctir !5
  store i32 %14, i32* %saved_errno, align 4, !dbg !8322
  %15 = load i32*, i32** %pipefds.addr, align 8, !dbg !8323
  %arrayidx = getelementptr inbounds i32, i32* %15, i64 0, !dbg !8323, !ctir !325
  %16 = load i32, i32* %arrayidx, align 4, !dbg !8323
  %call19 = call i32 @close(i32 %16), !dbg !8324
  %17 = load i32*, i32** %pipefds.addr, align 8, !dbg !8325
  %arrayidx20 = getelementptr inbounds i32, i32* %17, i64 1, !dbg !8325, !ctir !325
  %18 = load i32, i32* %arrayidx20, align 4, !dbg !8325
  %call21 = call i32 @close(i32 %18), !dbg !8326
  %19 = load i32, i32* %saved_errno, align 4, !dbg !8327
  %call22 = call i32* @__errno_location() #16, !dbg !8328
  store i32 %19, i32* %call22, align 4, !dbg !8329, !ctir !5
  br label %if.end30, !dbg !8330

if.else23:                                        ; preds = %while.end
  %20 = load i32, i32* %pid, align 4, !dbg !8331
  %cmp24 = icmp eq i32 %20, 0, !dbg !8333
  br i1 %cmp24, label %if.then25, label %if.else28, !dbg !8334

if.then25:                                        ; preds = %if.else23
  %call26 = call i32 @close(i32 0), !dbg !8335
  %call27 = call i32 @close(i32 1), !dbg !8337
  br label %if.end29, !dbg !8338

if.else28:                                        ; preds = %if.else23
  %21 = load i32, i32* @nprocs, align 4, !dbg !8339
  %inc = add nsw i32 %21, 1, !dbg !8339
  store i32 %inc, i32* @nprocs, align 4, !dbg !8339
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then25
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then17
  %22 = load i32, i32* %pid, align 4, !dbg !8340
  store i32 %22, i32* %retval, align 4, !dbg !8341
  br label %return, !dbg !8341

return:                                           ; preds = %if.end30, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !8342
  ret i32 %23, !dbg !8342
}

declare dso_local i32 @close(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @register_proc(%struct.tempnode* %temp) #4 !dbg !8343 {
entry:
  %temp.addr = alloca %struct.tempnode*, align 8
  store %struct.tempnode* %temp, %struct.tempnode** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tempnode** %temp.addr, metadata !8346, metadata !DIExpression()), !dbg !8347
  %0 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !dbg !8348
  %tobool = icmp ne %struct.hash_table* %0, null, !dbg !8348
  br i1 %tobool, label %if.end3, label %if.then, !dbg !8350

if.then:                                          ; preds = %entry
  %call = call %struct.hash_table* @hash_initialize(i64 47, %struct.hash_tuning* null, i64 (i8*, i64)* @proctab_hasher, i1 (i8*, i8*)* @proctab_comparator, void (i8*)* null), !dbg !8351
  store %struct.hash_table* %call, %struct.hash_table** @proctab, align 8, !dbg !8353
  %1 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !dbg !8354
  %tobool1 = icmp ne %struct.hash_table* %1, null, !dbg !8354
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !8356

if.then2:                                         ; preds = %if.then
  call void @xalloc_die() #15, !dbg !8357
  unreachable, !dbg !8357

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !8358

if.end3:                                          ; preds = %if.end, %entry
  %2 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !8359
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 2, !dbg !8360, !ctir !408
  store i8 1, i8* %state, align 4, !dbg !8361, !ctir !8
  %3 = load %struct.hash_table*, %struct.hash_table** @proctab, align 8, !dbg !8362
  %4 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !8364
  %5 = bitcast %struct.tempnode* %4 to i8*, !dbg !8364
  %call4 = call i8* @hash_insert(%struct.hash_table* %3, i8* %5), !dbg !8365
  %tobool5 = icmp ne i8* %call4, null, !dbg !8365
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !8366

if.then6:                                         ; preds = %if.end3
  call void @xalloc_die() #15, !dbg !8367
  unreachable, !dbg !8367

if.end7:                                          ; preds = %if.end3
  ret void, !dbg !8368
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @move_fd(i32 %oldfd, i32 %newfd) #4 !dbg !8369 {
entry:
  %oldfd.addr = alloca i32, align 4
  %newfd.addr = alloca i32, align 4
  store i32 %oldfd, i32* %oldfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oldfd.addr, metadata !8372, metadata !DIExpression()), !dbg !8373
  store i32 %newfd, i32* %newfd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %newfd.addr, metadata !8374, metadata !DIExpression()), !dbg !8375
  %0 = load i32, i32* %oldfd.addr, align 4, !dbg !8376
  %1 = load i32, i32* %newfd.addr, align 4, !dbg !8378
  %cmp = icmp ne i32 %0, %1, !dbg !8379
  br i1 %cmp, label %if.then, label %if.end, !dbg !8380

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %oldfd.addr, align 4, !dbg !8381
  %3 = load i32, i32* %newfd.addr, align 4, !dbg !8383
  %call = call i32 @dup2(i32 %2, i32 %3) #12, !dbg !8384
  %4 = load i32, i32* %oldfd.addr, align 4, !dbg !8385
  %call1 = call i32 @close(i32 %4), !dbg !8386
  br label %if.end, !dbg !8387

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8388
}

; Function Attrs: nounwind
declare dso_local i32 @execlp(i8*, i8*, ...) #2

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @async_safe_die(i32 %errnum, i8* %errstr) #0 !dbg !8389 {
entry:
  %errnum.addr = alloca i32, align 4
  %errstr.addr = alloca i8*, align 8
  %__x = alloca i64, align 8, !ctir !1393
  %errbuf = alloca [12 x i8], align 1, !ctir !382
  %p = alloca i8*, align 8, !ctir !7
  %__x3 = alloca i64, align 8, !ctir !1393
  %__x5 = alloca i64, align 8, !ctir !1393
  %__x8 = alloca i64, align 8, !ctir !1393
  store i32 %errnum, i32* %errnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %errnum.addr, metadata !8392, metadata !DIExpression()), !dbg !8393
  store i8* %errstr, i8** %errstr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %errstr.addr, metadata !8394, metadata !DIExpression()), !dbg !8395
  call void @llvm.dbg.declare(metadata i64* %__x, metadata !8396, metadata !DIExpression()), !dbg !8398
  %0 = load i8*, i8** %errstr.addr, align 8, !dbg !8398
  %1 = load i8*, i8** %errstr.addr, align 8, !dbg !8398
  %call = call i64 @strlen(i8* %1) #14, !dbg !8398
  %call1 = call i64 @write(i32 2, i8* %0, i64 %call), !dbg !8398
  store i64 %call1, i64* %__x, align 8, !dbg !8398
  %2 = load i64, i64* %__x, align 8, !dbg !8398
  %3 = load i32, i32* %errnum.addr, align 4, !dbg !8399
  %tobool = icmp ne i32 %3, 0, !dbg !8399
  br i1 %tobool, label %if.then, label %if.end, !dbg !8401

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [12 x i8]* %errbuf, metadata !8402, metadata !DIExpression()), !dbg !8404
  call void @llvm.dbg.declare(metadata i8** %p, metadata !8405, metadata !DIExpression()), !dbg !8406
  %4 = load i32, i32* %errnum.addr, align 4, !dbg !8407
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %errbuf, i64 0, i64 0, !dbg !8408, !ctir !382
  %call2 = call i8* @inttostr(i32 %4, i8* %arraydecay), !dbg !8409
  store i8* %call2, i8** %p, align 8, !dbg !8406
  call void @llvm.dbg.declare(metadata i64* %__x3, metadata !8410, metadata !DIExpression()), !dbg !8412
  %call4 = call i64 @write(i32 2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.173, i64 0, i64 0), i64 8), !dbg !8412
  store i64 %call4, i64* %__x3, align 8, !dbg !8412
  %5 = load i64, i64* %__x3, align 8, !dbg !8412
  call void @llvm.dbg.declare(metadata i64* %__x5, metadata !8413, metadata !DIExpression()), !dbg !8415
  %6 = load i8*, i8** %p, align 8, !dbg !8415
  %7 = load i8*, i8** %p, align 8, !dbg !8415
  %call6 = call i64 @strlen(i8* %7) #14, !dbg !8415
  %call7 = call i64 @write(i32 2, i8* %6, i64 %call6), !dbg !8415
  store i64 %call7, i64* %__x5, align 8, !dbg !8415
  %8 = load i64, i64* %__x5, align 8, !dbg !8415
  br label %if.end, !dbg !8416

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.dbg.declare(metadata i64* %__x8, metadata !8417, metadata !DIExpression()), !dbg !8419
  %call9 = call i64 @write(i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.174, i64 0, i64 0), i64 1), !dbg !8419
  store i64 %call9, i64* %__x8, align 8, !dbg !8419
  %9 = load i64, i64* %__x8, align 8, !dbg !8419
  call void @_exit(i32 2) #15, !dbg !8420
  unreachable, !dbg !8420
}

; Function Attrs: nounwind
declare dso_local %struct._IO_FILE* @fdopen(i32, i8*) #2

declare dso_local i64 @write(i32, i8*, i64) #3

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #10

; Function Attrs: nounwind
declare dso_local i32 @dup2(i32, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @proctab_hasher(i8* %entry1, i64 %tabsize) #4 !dbg !8421 {
entry:
  %entry.addr = alloca i8*, align 8
  %tabsize.addr = alloca i64, align 8
  %node = alloca %struct.tempnode*, align 8, !ctir !461
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !8422, metadata !DIExpression()), !dbg !8423
  store i64 %tabsize, i64* %tabsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %tabsize.addr, metadata !8424, metadata !DIExpression()), !dbg !8425
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !8426, metadata !DIExpression()), !dbg !8427
  %0 = load i8*, i8** %entry.addr, align 8, !dbg !8428
  %1 = bitcast i8* %0 to %struct.tempnode*, !dbg !8428
  store %struct.tempnode* %1, %struct.tempnode** %node, align 8, !dbg !8427
  %2 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !8429
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 1, !dbg !8430, !ctir !462
  %3 = load i32, i32* %pid, align 8, !dbg !8430, !ctir !413
  %conv = sext i32 %3 to i64, !dbg !8429
  %4 = load i64, i64* %tabsize.addr, align 8, !dbg !8431
  %rem = urem i64 %conv, %4, !dbg !8432
  ret i64 %rem, !dbg !8433
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @proctab_comparator(i8* %e1, i8* %e2) #4 !dbg !8434 {
entry:
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %n1 = alloca %struct.tempnode*, align 8, !ctir !461
  %n2 = alloca %struct.tempnode*, align 8, !ctir !461
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !8435, metadata !DIExpression()), !dbg !8436
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !8437, metadata !DIExpression()), !dbg !8438
  call void @llvm.dbg.declare(metadata %struct.tempnode** %n1, metadata !8439, metadata !DIExpression()), !dbg !8440
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !8441
  %1 = bitcast i8* %0 to %struct.tempnode*, !dbg !8441
  store %struct.tempnode* %1, %struct.tempnode** %n1, align 8, !dbg !8440
  call void @llvm.dbg.declare(metadata %struct.tempnode** %n2, metadata !8442, metadata !DIExpression()), !dbg !8443
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !8444
  %3 = bitcast i8* %2 to %struct.tempnode*, !dbg !8444
  store %struct.tempnode* %3, %struct.tempnode** %n2, align 8, !dbg !8443
  %4 = load %struct.tempnode*, %struct.tempnode** %n1, align 8, !dbg !8445
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 1, !dbg !8446, !ctir !462
  %5 = load i32, i32* %pid, align 8, !dbg !8446, !ctir !413
  %6 = load %struct.tempnode*, %struct.tempnode** %n2, align 8, !dbg !8447
  %pid1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %6, i32 0, i32 1, !dbg !8448, !ctir !462
  %7 = load i32, i32* %pid1, align 8, !dbg !8448, !ctir !413
  %cmp = icmp eq i32 %5, %7, !dbg !8449
  ret i1 %cmp, !dbg !8450
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reap_some() #4 !dbg !8451 {
entry:
  %call = call i32 @reap(i32 -1), !dbg !8452
  call void @reap_exited(), !dbg !8453
  ret void, !dbg !8454
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cs_enter(%struct.cs_status* %status) #4 !dbg !8455 {
entry:
  %status.addr = alloca %struct.cs_status*, align 8
  %ret = alloca i32, align 4, !ctir !5
  store %struct.cs_status* %status, %struct.cs_status** %status.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cs_status** %status.addr, metadata !8459, metadata !DIExpression()), !dbg !8460
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8461, metadata !DIExpression()), !dbg !8462
  %0 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !dbg !8463
  %sigs = getelementptr inbounds %struct.cs_status, %struct.cs_status* %0, i32 0, i32 1, !dbg !8464, !ctir !2943
  %call = call i32 @pthread_sigmask(i32 0, %struct.__sigset_t* @caught_signals, %struct.__sigset_t* %sigs) #12, !dbg !8465
  store i32 %call, i32* %ret, align 4, !dbg !8462
  %1 = load i32, i32* %ret, align 4, !dbg !8466
  %cmp = icmp eq i32 %1, 0, !dbg !8467
  %2 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !dbg !8468
  %valid = getelementptr inbounds %struct.cs_status, %struct.cs_status* %2, i32 0, i32 0, !dbg !8469, !ctir !2943
  %frombool = zext i1 %cmp to i8, !dbg !8470
  store i8 %frombool, i8* %valid, align 8, !dbg !8470, !ctir !162
  ret void, !dbg !8471
}

; Function Attrs: nounwind
declare dso_local i32 @fork() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cs_leave(%struct.cs_status* %status) #4 !dbg !8472 {
entry:
  %status.addr = alloca %struct.cs_status*, align 8
  store %struct.cs_status* %status, %struct.cs_status** %status.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cs_status** %status.addr, metadata !8477, metadata !DIExpression()), !dbg !8478
  %0 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !dbg !8479
  %valid = getelementptr inbounds %struct.cs_status, %struct.cs_status* %0, i32 0, i32 0, !dbg !8481, !ctir !8476
  %1 = load i8, i8* %valid, align 8, !dbg !8481
  %tobool = trunc i8 %1 to i1, !dbg !8481, !ctir !162
  br i1 %tobool, label %if.then, label %if.end, !dbg !8482

if.then:                                          ; preds = %entry
  %2 = load %struct.cs_status*, %struct.cs_status** %status.addr, align 8, !dbg !8483
  %sigs = getelementptr inbounds %struct.cs_status, %struct.cs_status* %2, i32 0, i32 1, !dbg !8485, !ctir !8476
  %call = call i32 @pthread_sigmask(i32 2, %struct.__sigset_t* %sigs, %struct.__sigset_t* null) #12, !dbg !8486
  br label %if.end, !dbg !8487

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8488
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reap_exited() #4 !dbg !8489 {
entry:
  br label %while.cond, !dbg !8490

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @nprocs, align 4, !dbg !8491
  %cmp = icmp slt i32 0, %0, !dbg !8492
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8493

land.rhs:                                         ; preds = %while.cond
  %call = call i32 @reap(i32 0), !dbg !8494
  %tobool = icmp ne i32 %call, 0, !dbg !8493
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !8495
  br i1 %1, label %while.body, label %while.end, !dbg !8490

while.body:                                       ; preds = %land.end
  br label %while.cond, !dbg !8496, !llvm.loop !8497

while.end:                                        ; preds = %land.end
  ret void, !dbg !8498
}

; Function Attrs: nounwind
declare dso_local i32 @pthread_sigmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #6

declare dso_local i64 @fread_unlocked(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @feof_unlocked(%struct._IO_FILE*) #2

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) #7

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @default_sort_size() #4 !dbg !8499 {
entry:
  %size = alloca i64, align 8, !ctir !52
  %rlimit = alloca %struct.timespec, align 8, !ctir !3148
  %avail = alloca double, align 8, !ctir !480
  %total = alloca double, align 8, !ctir !480
  %mem = alloca double, align 8, !ctir !480
  call void @llvm.dbg.declare(metadata i64* %size, metadata !8502, metadata !DIExpression()), !dbg !8503
  store i64 -1, i64* %size, align 8, !dbg !8503
  call void @llvm.dbg.declare(metadata %struct.timespec* %rlimit, metadata !8504, metadata !DIExpression()), !dbg !8505
  %call = call i32 @getrlimit(i32 2, %struct.timespec* %rlimit) #12, !dbg !8506
  %cmp = icmp eq i32 %call, 0, !dbg !8508
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8509

land.lhs.true:                                    ; preds = %entry
  %rlim_cur = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8510, !ctir !3148
  %0 = load i64, i64* %rlim_cur, align 8, !dbg !8510, !ctir !473
  %1 = load i64, i64* %size, align 8, !dbg !8511
  %cmp1 = icmp ult i64 %0, %1, !dbg !8512
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8513

if.then:                                          ; preds = %land.lhs.true
  %rlim_cur2 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8514, !ctir !3148
  %2 = load i64, i64* %rlim_cur2, align 8, !dbg !8514, !ctir !473
  store i64 %2, i64* %size, align 8, !dbg !8515
  br label %if.end, !dbg !8516

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call3 = call i32 @getrlimit(i32 9, %struct.timespec* %rlimit) #12, !dbg !8517
  %cmp4 = icmp eq i32 %call3, 0, !dbg !8519
  br i1 %cmp4, label %land.lhs.true5, label %if.end10, !dbg !8520

land.lhs.true5:                                   ; preds = %if.end
  %rlim_cur6 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8521, !ctir !3148
  %3 = load i64, i64* %rlim_cur6, align 8, !dbg !8521, !ctir !473
  %4 = load i64, i64* %size, align 8, !dbg !8522
  %cmp7 = icmp ult i64 %3, %4, !dbg !8523
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !8524

if.then8:                                         ; preds = %land.lhs.true5
  %rlim_cur9 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8525, !ctir !3148
  %5 = load i64, i64* %rlim_cur9, align 8, !dbg !8525, !ctir !473
  store i64 %5, i64* %size, align 8, !dbg !8526
  br label %if.end10, !dbg !8527

if.end10:                                         ; preds = %if.then8, %land.lhs.true5, %if.end
  %6 = load i64, i64* %size, align 8, !dbg !8528
  %div = udiv i64 %6, 2, !dbg !8528
  store i64 %div, i64* %size, align 8, !dbg !8528
  %call11 = call i32 @getrlimit(i32 5, %struct.timespec* %rlimit) #12, !dbg !8529
  %cmp12 = icmp eq i32 %call11, 0, !dbg !8531
  br i1 %cmp12, label %land.lhs.true13, label %if.end21, !dbg !8532

land.lhs.true13:                                  ; preds = %if.end10
  %rlim_cur14 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8533, !ctir !3148
  %7 = load i64, i64* %rlim_cur14, align 8, !dbg !8533, !ctir !473
  %div15 = udiv i64 %7, 16, !dbg !8534
  %mul = mul i64 %div15, 15, !dbg !8535
  %8 = load i64, i64* %size, align 8, !dbg !8536
  %cmp16 = icmp ult i64 %mul, %8, !dbg !8537
  br i1 %cmp16, label %if.then17, label %if.end21, !dbg !8538

if.then17:                                        ; preds = %land.lhs.true13
  %rlim_cur18 = getelementptr inbounds %struct.timespec, %struct.timespec* %rlimit, i32 0, i32 0, !dbg !8539, !ctir !3148
  %9 = load i64, i64* %rlim_cur18, align 8, !dbg !8539, !ctir !473
  %div19 = udiv i64 %9, 16, !dbg !8540
  %mul20 = mul i64 %div19, 15, !dbg !8541
  store i64 %mul20, i64* %size, align 8, !dbg !8542
  br label %if.end21, !dbg !8543

if.end21:                                         ; preds = %if.then17, %land.lhs.true13, %if.end10
  call void @llvm.dbg.declare(metadata double* %avail, metadata !8544, metadata !DIExpression()), !dbg !8545
  %call22 = call double @physmem_available(), !dbg !8546
  store double %call22, double* %avail, align 8, !dbg !8545
  call void @llvm.dbg.declare(metadata double* %total, metadata !8547, metadata !DIExpression()), !dbg !8548
  %call23 = call double @physmem_total(), !dbg !8549
  store double %call23, double* %total, align 8, !dbg !8548
  call void @llvm.dbg.declare(metadata double* %mem, metadata !8550, metadata !DIExpression()), !dbg !8551
  %10 = load double, double* %avail, align 8, !dbg !8552
  %11 = load double, double* %total, align 8, !dbg !8552
  %div24 = fdiv double %11, 8.000000e+00, !dbg !8552
  %cmp25 = fcmp ogt double %10, %div24, !dbg !8552
  br i1 %cmp25, label %cond.true, label %cond.false, !dbg !8552

cond.true:                                        ; preds = %if.end21
  %12 = load double, double* %avail, align 8, !dbg !8552
  br label %cond.end, !dbg !8552

cond.false:                                       ; preds = %if.end21
  %13 = load double, double* %total, align 8, !dbg !8552
  %div26 = fdiv double %13, 8.000000e+00, !dbg !8552
  br label %cond.end, !dbg !8552

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %12, %cond.true ], [ %div26, %cond.false ], !dbg !8552
  store double %cond, double* %mem, align 8, !dbg !8551
  %14 = load double, double* %total, align 8, !dbg !8553
  %mul27 = fmul double %14, 7.500000e-01, !dbg !8555
  %15 = load i64, i64* %size, align 8, !dbg !8556
  %conv = uitofp i64 %15 to double, !dbg !8556
  %cmp28 = fcmp olt double %mul27, %conv, !dbg !8557
  br i1 %cmp28, label %if.then30, label %if.end33, !dbg !8558

if.then30:                                        ; preds = %cond.end
  %16 = load double, double* %total, align 8, !dbg !8559
  %mul31 = fmul double %16, 7.500000e-01, !dbg !8560
  %conv32 = fptoui double %mul31 to i64, !dbg !8559
  store i64 %conv32, i64* %size, align 8, !dbg !8561
  br label %if.end33, !dbg !8562

if.end33:                                         ; preds = %if.then30, %cond.end
  %17 = load double, double* %mem, align 8, !dbg !8563
  %18 = load i64, i64* %size, align 8, !dbg !8565
  %conv34 = uitofp i64 %18 to double, !dbg !8565
  %cmp35 = fcmp olt double %17, %conv34, !dbg !8566
  br i1 %cmp35, label %if.then37, label %if.end39, !dbg !8567

if.then37:                                        ; preds = %if.end33
  %19 = load double, double* %mem, align 8, !dbg !8568
  %conv38 = fptoui double %19 to i64, !dbg !8568
  store i64 %conv38, i64* %size, align 8, !dbg !8569
  br label %if.end39, !dbg !8570

if.end39:                                         ; preds = %if.then37, %if.end33
  %20 = load i64, i64* %size, align 8, !dbg !8571
  %21 = load i32, i32* @nmerge, align 4, !dbg !8571
  %conv40 = zext i32 %21 to i64, !dbg !8571
  %mul41 = mul i64 %conv40, 34, !dbg !8571
  %cmp42 = icmp ugt i64 %20, %mul41, !dbg !8571
  br i1 %cmp42, label %cond.true44, label %cond.false45, !dbg !8571

cond.true44:                                      ; preds = %if.end39
  %22 = load i64, i64* %size, align 8, !dbg !8571
  br label %cond.end48, !dbg !8571

cond.false45:                                     ; preds = %if.end39
  %23 = load i32, i32* @nmerge, align 4, !dbg !8571
  %conv46 = zext i32 %23 to i64, !dbg !8571
  %mul47 = mul i64 %conv46, 34, !dbg !8571
  br label %cond.end48, !dbg !8571

cond.end48:                                       ; preds = %cond.false45, %cond.true44
  %cond49 = phi i64 [ %22, %cond.true44 ], [ %mul47, %cond.false45 ], !dbg !8571
  ret i64 %cond49, !dbg !8572
}

; Function Attrs: nounwind
declare dso_local i32 @getrlimit(i32, %struct.timespec*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @mergefiles(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, %struct._IO_FILE* %ofp, i8* %output_file) #4 !dbg !8573 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %ofp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %fps = alloca %struct._IO_FILE**, align 8, !ctir !584
  %nopened = alloca i64, align 8, !ctir !52
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sortfile** %files.addr, metadata !8576, metadata !DIExpression()), !dbg !8577
  store i64 %ntemps, i64* %ntemps.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ntemps.addr, metadata !8578, metadata !DIExpression()), !dbg !8579
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !8580, metadata !DIExpression()), !dbg !8581
  store %struct._IO_FILE* %ofp, %struct._IO_FILE** %ofp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %ofp.addr, metadata !8582, metadata !DIExpression()), !dbg !8583
  store i8* %output_file, i8** %output_file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output_file.addr, metadata !8584, metadata !DIExpression()), !dbg !8585
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %fps, metadata !8586, metadata !DIExpression()), !dbg !8587
  call void @llvm.dbg.declare(metadata i64* %nopened, metadata !8588, metadata !DIExpression()), !dbg !8589
  %0 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8590
  %1 = load i64, i64* %nfiles.addr, align 8, !dbg !8591
  %call = call i64 @open_input_files(%struct.sortfile* %0, i64 %1, %struct._IO_FILE*** %fps), !dbg !8592
  store i64 %call, i64* %nopened, align 8, !dbg !8589
  %2 = load i64, i64* %nopened, align 8, !dbg !8593
  %3 = load i64, i64* %nfiles.addr, align 8, !dbg !8595
  %cmp = icmp ult i64 %2, %3, !dbg !8596
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8597

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %nopened, align 8, !dbg !8598
  %cmp1 = icmp ult i64 %4, 2, !dbg !8599
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8600

if.then:                                          ; preds = %land.lhs.true
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.142, i64 0, i64 0)) #12, !dbg !8601
  %5 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8602
  %6 = load i64, i64* %nopened, align 8, !dbg !8603
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %5, i64 %6, !dbg !8602, !ctir !402
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0, !dbg !8604, !ctir !403
  %7 = load i8*, i8** %name, align 8, !dbg !8604, !ctir !90
  call void @sort_die(i8* %call2, i8* %7) #15, !dbg !8605
  unreachable, !dbg !8605

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8606
  %9 = load i64, i64* %ntemps.addr, align 8, !dbg !8607
  %10 = load i64, i64* %nopened, align 8, !dbg !8608
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !dbg !8609
  %12 = load i8*, i8** %output_file.addr, align 8, !dbg !8610
  %13 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !8611
  call void @mergefps(%struct.sortfile* %8, i64 %9, i64 %10, %struct._IO_FILE* %11, i8* %12, %struct._IO_FILE** %13), !dbg !8612
  %14 = load i64, i64* %nopened, align 8, !dbg !8613
  ret i64 %14, !dbg !8614
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @avoid_trashing_input(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, i8* %outfile) #4 !dbg !8615 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %outfile.addr = alloca i8*, align 8
  %tempcopy = alloca %struct.tempnode*, align 8, !ctir !407
  %i = alloca i64, align 8, !ctir !52
  %is_stdin = alloca i8, align 1, !ctir !162
  %same = alloca i8, align 1, !ctir !162
  %instat = alloca %struct.stat, align 8, !ctir !483
  %outst = alloca %struct.stat*, align 8, !ctir !482
  %tftp = alloca %struct._IO_FILE*, align 8, !ctir !389
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sortfile** %files.addr, metadata !8616, metadata !DIExpression()), !dbg !8617
  store i64 %ntemps, i64* %ntemps.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ntemps.addr, metadata !8618, metadata !DIExpression()), !dbg !8619
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !8620, metadata !DIExpression()), !dbg !8621
  store i8* %outfile, i8** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %outfile.addr, metadata !8622, metadata !DIExpression()), !dbg !8623
  call void @llvm.dbg.declare(metadata %struct.tempnode** %tempcopy, metadata !8624, metadata !DIExpression()), !dbg !8625
  store %struct.tempnode* null, %struct.tempnode** %tempcopy, align 8, !dbg !8625
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8626, metadata !DIExpression()), !dbg !8628
  %0 = load i64, i64* %ntemps.addr, align 8, !dbg !8629
  store i64 %0, i64* %i, align 8, !dbg !8628
  br label %for.cond, !dbg !8630

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !8631
  %2 = load i64, i64* %nfiles.addr, align 8, !dbg !8633
  %cmp = icmp ult i64 %1, %2, !dbg !8634
  br i1 %cmp, label %for.body, label %for.end, !dbg !8635

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %is_stdin, metadata !8636, metadata !DIExpression()), !dbg !8638
  %3 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8639
  %4 = load i64, i64* %i, align 8, !dbg !8639
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %3, i64 %4, !dbg !8639, !ctir !402
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 0, !dbg !8639, !ctir !403
  %5 = load i8*, i8** %name, align 8, !dbg !8639, !ctir !90
  %call = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #14, !dbg !8639
  %cmp1 = icmp eq i32 %call, 0, !dbg !8639
  %frombool = zext i1 %cmp1 to i8, !dbg !8638
  store i8 %frombool, i8* %is_stdin, align 1, !dbg !8638
  call void @llvm.dbg.declare(metadata i8* %same, metadata !8640, metadata !DIExpression()), !dbg !8641
  call void @llvm.dbg.declare(metadata %struct.stat* %instat, metadata !8642, metadata !DIExpression()), !dbg !8643
  %6 = load i8*, i8** %outfile.addr, align 8, !dbg !8644
  %tobool = icmp ne i8* %6, null, !dbg !8644
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8646

land.lhs.true:                                    ; preds = %for.body
  %7 = load i8*, i8** %outfile.addr, align 8, !dbg !8647
  %8 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8647
  %9 = load i64, i64* %i, align 8, !dbg !8647
  %arrayidx2 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %8, i64 %9, !dbg !8647, !ctir !402
  %name3 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx2, i32 0, i32 0, !dbg !8647, !ctir !403
  %10 = load i8*, i8** %name3, align 8, !dbg !8647, !ctir !90
  %call4 = call i32 @strcmp(i8* %7, i8* %10) #14, !dbg !8647
  %cmp5 = icmp eq i32 %call4, 0, !dbg !8647
  br i1 %cmp5, label %land.lhs.true6, label %if.else, !dbg !8648

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8, i8* %is_stdin, align 1, !dbg !8649
  %tobool7 = trunc i8 %11 to i1, !dbg !8649
  br i1 %tobool7, label %if.else, label %if.then, !dbg !8650

if.then:                                          ; preds = %land.lhs.true6
  store i8 1, i8* %same, align 1, !dbg !8651
  br label %if.end24, !dbg !8652

if.else:                                          ; preds = %land.lhs.true6, %land.lhs.true, %for.body
  call void @llvm.dbg.declare(metadata %struct.stat** %outst, metadata !8653, metadata !DIExpression()), !dbg !8655
  %call8 = call %struct.stat* @get_outstatus(), !dbg !8656
  store %struct.stat* %call8, %struct.stat** %outst, align 8, !dbg !8655
  %12 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8657
  %tobool9 = icmp ne %struct.stat* %12, null, !dbg !8657
  br i1 %tobool9, label %if.end, label %if.then10, !dbg !8659

if.then10:                                        ; preds = %if.else
  br label %for.end, !dbg !8660

if.end:                                           ; preds = %if.else
  %13 = load i8, i8* %is_stdin, align 1, !dbg !8661
  %tobool11 = trunc i8 %13 to i1, !dbg !8661
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !8661

cond.true:                                        ; preds = %if.end
  %call12 = call i32 @fstat(i32 0, %struct.stat* %instat) #12, !dbg !8662
  br label %cond.end, !dbg !8661

cond.false:                                       ; preds = %if.end
  %14 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8663
  %15 = load i64, i64* %i, align 8, !dbg !8664
  %arrayidx13 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %14, i64 %15, !dbg !8663, !ctir !402
  %name14 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx13, i32 0, i32 0, !dbg !8665, !ctir !403
  %16 = load i8*, i8** %name14, align 8, !dbg !8665, !ctir !90
  %call15 = call i32 @stat(i8* %16, %struct.stat* %instat) #12, !dbg !8666
  br label %cond.end, !dbg !8661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call12, %cond.true ], [ %call15, %cond.false ], !dbg !8661
  %cmp16 = icmp eq i32 %cond, 0, !dbg !8667
  br i1 %cmp16, label %land.rhs, label %land.end22, !dbg !8668

land.rhs:                                         ; preds = %cond.end
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %instat, i32 0, i32 1, !dbg !8669, !ctir !483
  %17 = load i64, i64* %st_ino, align 8, !dbg !8669, !ctir !489
  %18 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8669
  %st_ino17 = getelementptr inbounds %struct.stat, %struct.stat* %18, i32 0, i32 1, !dbg !8669, !ctir !483
  %19 = load i64, i64* %st_ino17, align 8, !dbg !8669, !ctir !489
  %cmp18 = icmp eq i64 %17, %19, !dbg !8669
  br i1 %cmp18, label %land.rhs19, label %land.end, !dbg !8669

land.rhs19:                                       ; preds = %land.rhs
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %instat, i32 0, i32 0, !dbg !8669, !ctir !483
  %20 = load i64, i64* %st_dev, align 8, !dbg !8669, !ctir !487
  %21 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8669
  %st_dev20 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !8669, !ctir !483
  %22 = load i64, i64* %st_dev20, align 8, !dbg !8669, !ctir !487
  %cmp21 = icmp eq i64 %20, %22, !dbg !8669
  br label %land.end

land.end:                                         ; preds = %land.rhs19, %land.rhs
  %23 = phi i1 [ false, %land.rhs ], [ %cmp21, %land.rhs19 ], !dbg !8670
  br label %land.end22

land.end22:                                       ; preds = %land.end, %cond.end
  %24 = phi i1 [ false, %cond.end ], [ %23, %land.end ], !dbg !8670
  %frombool23 = zext i1 %24 to i8, !dbg !8671
  store i8 %frombool23, i8* %same, align 1, !dbg !8671
  br label %if.end24

if.end24:                                         ; preds = %land.end22, %if.then
  %25 = load i8, i8* %same, align 1, !dbg !8672
  %tobool25 = trunc i8 %25 to i1, !dbg !8672
  br i1 %tobool25, label %if.then26, label %if.end39, !dbg !8674

if.then26:                                        ; preds = %if.end24
  %26 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !dbg !8675
  %tobool27 = icmp ne %struct.tempnode* %26, null, !dbg !8675
  br i1 %tobool27, label %if.end33, label %if.then28, !dbg !8678

if.then28:                                        ; preds = %if.then26
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %tftp, metadata !8679, metadata !DIExpression()), !dbg !8681
  %call29 = call %struct.tempnode* @create_temp(%struct._IO_FILE** %tftp), !dbg !8682
  store %struct.tempnode* %call29, %struct.tempnode** %tempcopy, align 8, !dbg !8683
  %27 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8684
  %28 = load i64, i64* %i, align 8, !dbg !8685
  %arrayidx30 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %27, i64 %28, !dbg !8684, !ctir !402
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %tftp, align 8, !dbg !8686
  %30 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !dbg !8687
  %name31 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %30, i32 0, i32 3, !dbg !8688, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name31, i64 0, i64 0, !dbg !8687, !ctir !417
  %call32 = call i64 @mergefiles(%struct.sortfile* %arrayidx30, i64 0, i64 1, %struct._IO_FILE* %29, i8* %arraydecay), !dbg !8689
  br label %if.end33, !dbg !8690

if.end33:                                         ; preds = %if.then28, %if.then26
  %31 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !dbg !8691
  %name34 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %31, i32 0, i32 3, !dbg !8692, !ctir !408
  %arraydecay35 = getelementptr inbounds [0 x i8], [0 x i8]* %name34, i64 0, i64 0, !dbg !8691, !ctir !417
  %32 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8693
  %33 = load i64, i64* %i, align 8, !dbg !8694
  %arrayidx36 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %32, i64 %33, !dbg !8693, !ctir !402
  %name37 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx36, i32 0, i32 0, !dbg !8695, !ctir !403
  store i8* %arraydecay35, i8** %name37, align 8, !dbg !8696, !ctir !90
  %34 = load %struct.tempnode*, %struct.tempnode** %tempcopy, align 8, !dbg !8697
  %35 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8698
  %36 = load i64, i64* %i, align 8, !dbg !8699
  %arrayidx38 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %35, i64 %36, !dbg !8698, !ctir !402
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx38, i32 0, i32 1, !dbg !8700, !ctir !403
  store %struct.tempnode* %34, %struct.tempnode** %temp, align 8, !dbg !8701, !ctir !407
  br label %if.end39, !dbg !8702

if.end39:                                         ; preds = %if.end33, %if.end24
  br label %for.inc, !dbg !8703

for.inc:                                          ; preds = %if.end39
  %37 = load i64, i64* %i, align 8, !dbg !8704
  %inc = add i64 %37, 1, !dbg !8704
  store i64 %inc, i64* %i, align 8, !dbg !8704
  br label %for.cond, !dbg !8705, !llvm.loop !8706

for.end:                                          ; preds = %if.then10, %for.cond
  ret void, !dbg !8708
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @open_input_files(%struct.sortfile* %files, i64 %nfiles, %struct._IO_FILE*** %pfps) #4 !dbg !8709 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %nfiles.addr = alloca i64, align 8
  %pfps.addr = alloca %struct._IO_FILE***, align 8
  %fps = alloca %struct._IO_FILE**, align 8, !ctir !584
  %i = alloca i32, align 4, !ctir !5
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sortfile** %files.addr, metadata !8713, metadata !DIExpression()), !dbg !8714
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !8715, metadata !DIExpression()), !dbg !8716
  store %struct._IO_FILE*** %pfps, %struct._IO_FILE**** %pfps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE**** %pfps.addr, metadata !8717, metadata !DIExpression()), !dbg !8718
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %fps, metadata !8719, metadata !DIExpression()), !dbg !8720
  %0 = load i64, i64* %nfiles.addr, align 8, !dbg !8721
  %call = call noalias i8* @xnmalloc(i64 %0, i64 8), !dbg !8722
  %1 = bitcast i8* %call to %struct._IO_FILE**, !dbg !8722
  %2 = load %struct._IO_FILE***, %struct._IO_FILE**** %pfps.addr, align 8, !dbg !8723
  store %struct._IO_FILE** %1, %struct._IO_FILE*** %2, align 8, !dbg !8724, !ctir !584
  store %struct._IO_FILE** %1, %struct._IO_FILE*** %fps, align 8, !dbg !8720
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8725, metadata !DIExpression()), !dbg !8726
  store i32 0, i32* %i, align 4, !dbg !8727
  br label %for.cond, !dbg !8729

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !8730
  %conv = sext i32 %3 to i64, !dbg !8730
  %4 = load i64, i64* %nfiles.addr, align 8, !dbg !8732
  %cmp = icmp ult i64 %conv, %4, !dbg !8733
  br i1 %cmp, label %for.body, label %for.end, !dbg !8734

for.body:                                         ; preds = %for.cond
  %5 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8735
  %6 = load i32, i32* %i, align 4, !dbg !8737
  %idxprom = sext i32 %6 to i64, !dbg !8735
  %arrayidx = getelementptr inbounds %struct.sortfile, %struct.sortfile* %5, i64 %idxprom, !dbg !8735, !ctir !402
  %temp = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx, i32 0, i32 1, !dbg !8738, !ctir !403
  %7 = load %struct.tempnode*, %struct.tempnode** %temp, align 8, !dbg !8738, !ctir !407
  %tobool = icmp ne %struct.tempnode* %7, null, !dbg !8735
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !8739

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8740
  %9 = load i32, i32* %i, align 4, !dbg !8741
  %idxprom2 = sext i32 %9 to i64, !dbg !8740
  %arrayidx3 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %8, i64 %idxprom2, !dbg !8740, !ctir !402
  %temp4 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx3, i32 0, i32 1, !dbg !8742, !ctir !403
  %10 = load %struct.tempnode*, %struct.tempnode** %temp4, align 8, !dbg !8742, !ctir !407
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %10, i32 0, i32 2, !dbg !8743, !ctir !408
  %11 = load i8, i8* %state, align 4, !dbg !8743, !ctir !8
  %conv5 = sext i8 %11 to i32, !dbg !8740
  %cmp6 = icmp ne i32 %conv5, 0, !dbg !8744
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !8735

cond.true:                                        ; preds = %land.lhs.true
  %12 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8745
  %13 = load i32, i32* %i, align 4, !dbg !8746
  %idxprom8 = sext i32 %13 to i64, !dbg !8745
  %arrayidx9 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %12, i64 %idxprom8, !dbg !8745, !ctir !402
  %temp10 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx9, i32 0, i32 1, !dbg !8747, !ctir !403
  %14 = load %struct.tempnode*, %struct.tempnode** %temp10, align 8, !dbg !8747, !ctir !407
  %call11 = call %struct._IO_FILE* @open_temp(%struct.tempnode* %14), !dbg !8748
  br label %cond.end, !dbg !8735

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %15 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8749
  %16 = load i32, i32* %i, align 4, !dbg !8750
  %idxprom12 = sext i32 %16 to i64, !dbg !8749
  %arrayidx13 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %15, i64 %idxprom12, !dbg !8749, !ctir !402
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx13, i32 0, i32 0, !dbg !8751, !ctir !403
  %17 = load i8*, i8** %name, align 8, !dbg !8751, !ctir !90
  %call14 = call %struct._IO_FILE* @stream_open(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !8752
  br label %cond.end, !dbg !8735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ %call11, %cond.true ], [ %call14, %cond.false ], !dbg !8735
  %18 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !8753
  %19 = load i32, i32* %i, align 4, !dbg !8754
  %idxprom15 = sext i32 %19 to i64, !dbg !8753
  %arrayidx16 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %18, i64 %idxprom15, !dbg !8753, !ctir !584
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %arrayidx16, align 8, !dbg !8755
  %20 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps, align 8, !dbg !8756
  %21 = load i32, i32* %i, align 4, !dbg !8758
  %idxprom17 = sext i32 %21 to i64, !dbg !8756
  %arrayidx18 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %20, i64 %idxprom17, !dbg !8756, !ctir !584
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx18, align 8, !dbg !8756
  %tobool19 = icmp ne %struct._IO_FILE* %22, null, !dbg !8756
  br i1 %tobool19, label %if.end, label %if.then, !dbg !8759

if.then:                                          ; preds = %cond.end
  br label %for.end, !dbg !8760

if.end:                                           ; preds = %cond.end
  br label %for.inc, !dbg !8761

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %i, align 4, !dbg !8762
  %inc = add nsw i32 %23, 1, !dbg !8762
  store i32 %inc, i32* %i, align 4, !dbg !8762
  br label %for.cond, !dbg !8763, !llvm.loop !8764

for.end:                                          ; preds = %if.then, %for.cond
  %24 = load i32, i32* %i, align 4, !dbg !8766
  %conv20 = sext i32 %24 to i64, !dbg !8766
  ret i64 %conv20, !dbg !8767
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @stream_open(i8* %file, i8* %how) #4 !dbg !8768 {
entry:
  %file.addr = alloca i8*, align 8
  %how.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %fd = alloca i32, align 4, !ctir !5
  %ftruncate_errno = alloca i32, align 4, !ctir !5
  %outst = alloca %struct.stat*, align 8, !ctir !482
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !8769, metadata !DIExpression()), !dbg !8770
  store i8* %how, i8** %how.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %how.addr, metadata !8771, metadata !DIExpression()), !dbg !8772
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !8773, metadata !DIExpression()), !dbg !8774
  %0 = load i8*, i8** %how.addr, align 8, !dbg !8775
  %1 = load i8, i8* %0, align 1, !dbg !8777, !ctir !91
  %conv = sext i8 %1 to i32, !dbg !8777
  %cmp = icmp eq i32 %conv, 114, !dbg !8778
  br i1 %cmp, label %if.then, label %if.else9, !dbg !8779

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %file.addr, align 8, !dbg !8780
  %call = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)) #14, !dbg !8780
  %cmp2 = icmp eq i32 %call, 0, !dbg !8780
  br i1 %cmp2, label %if.then4, label %if.else, !dbg !8783

if.then4:                                         ; preds = %if.then
  store i8 1, i8* @have_read_stdin, align 1, !dbg !8784
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !8786
  store %struct._IO_FILE* %3, %struct._IO_FILE** %fp, align 8, !dbg !8787
  br label %if.end, !dbg !8788

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !8789, metadata !DIExpression()), !dbg !8791
  %4 = load i8*, i8** %file.addr, align 8, !dbg !8792
  %call5 = call i32 (i8*, i32, ...) @open(i8* %4, i32 524288), !dbg !8793
  store i32 %call5, i32* %fd, align 4, !dbg !8791
  %5 = load i32, i32* %fd, align 4, !dbg !8794
  %cmp6 = icmp slt i32 %5, 0, !dbg !8795
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !8794

cond.true:                                        ; preds = %if.else
  br label %cond.end, !dbg !8794

cond.false:                                       ; preds = %if.else
  %6 = load i32, i32* %fd, align 4, !dbg !8796
  %7 = load i8*, i8** %how.addr, align 8, !dbg !8797
  %call8 = call %struct._IO_FILE* @fdopen(i32 %6, i8* %7) #12, !dbg !8798
  br label %cond.end, !dbg !8794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._IO_FILE* [ null, %cond.true ], [ %call8, %cond.false ], !dbg !8794
  store %struct._IO_FILE* %cond, %struct._IO_FILE** %fp, align 8, !dbg !8799
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then4
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !8800
  call void @fadvise(%struct._IO_FILE* %8, i32 2), !dbg !8801
  br label %if.end34, !dbg !8802

if.else9:                                         ; preds = %entry
  %9 = load i8*, i8** %how.addr, align 8, !dbg !8803
  %10 = load i8, i8* %9, align 1, !dbg !8805, !ctir !91
  %conv10 = sext i8 %10 to i32, !dbg !8805
  %cmp11 = icmp eq i32 %conv10, 119, !dbg !8806
  br i1 %cmp11, label %if.then13, label %if.else32, !dbg !8807

if.then13:                                        ; preds = %if.else9
  %11 = load i8*, i8** %file.addr, align 8, !dbg !8808
  %tobool = icmp ne i8* %11, null, !dbg !8808
  br i1 %tobool, label %land.lhs.true, label %if.end31, !dbg !8811

land.lhs.true:                                    ; preds = %if.then13
  %call14 = call i32 @ftruncate(i32 1, i64 0) #12, !dbg !8812
  %cmp15 = icmp ne i32 %call14, 0, !dbg !8813
  br i1 %cmp15, label %if.then17, label %if.end31, !dbg !8814

if.then17:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %ftruncate_errno, metadata !8815, metadata !DIExpression()), !dbg !8817
  %call18 = call i32* @__errno_location() #16, !dbg !8818
  %12 = load i32, i32* %call18, align 4, !dbg !8818, !ctir !5
  store i32 %12, i32* %ftruncate_errno, align 4, !dbg !8817
  call void @llvm.dbg.declare(metadata %struct.stat** %outst, metadata !8819, metadata !DIExpression()), !dbg !8820
  %call19 = call %struct.stat* @get_outstatus(), !dbg !8821
  store %struct.stat* %call19, %struct.stat** %outst, align 8, !dbg !8820
  %13 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8822
  %tobool20 = icmp ne %struct.stat* %13, null, !dbg !8822
  br i1 %tobool20, label %lor.lhs.false, label %if.then27, !dbg !8824

lor.lhs.false:                                    ; preds = %if.then17
  %14 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8825
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 3, !dbg !8825, !ctir !483
  %15 = load i32, i32* %st_mode, align 8, !dbg !8825, !ctir !493
  %and = and i32 %15, 61440, !dbg !8825
  %cmp21 = icmp eq i32 %and, 32768, !dbg !8825
  br i1 %cmp21, label %if.then27, label %lor.lhs.false23, !dbg !8826

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %16 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8827
  %st_mode24 = getelementptr inbounds %struct.stat, %struct.stat* %16, i32 0, i32 3, !dbg !8827, !ctir !483
  %17 = load i32, i32* %st_mode24, align 8, !dbg !8827, !ctir !493
  %18 = load %struct.stat*, %struct.stat** %outst, align 8, !dbg !8827
  %st_mode25 = getelementptr inbounds %struct.stat, %struct.stat* %18, i32 0, i32 3, !dbg !8827, !ctir !483
  %19 = load i32, i32* %st_mode25, align 8, !dbg !8827, !ctir !493
  %sub = sub i32 %17, %19, !dbg !8827
  %tobool26 = icmp ne i32 %sub, 0, !dbg !8827
  br i1 %tobool26, label %if.then27, label %if.end30, !dbg !8828

if.then27:                                        ; preds = %lor.lhs.false23, %lor.lhs.false, %if.then17
  %20 = load i32, i32* %ftruncate_errno, align 4, !dbg !8829
  %call28 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.143, i64 0, i64 0)) #12, !dbg !8829
  %21 = load i8*, i8** %file.addr, align 8, !dbg !8829
  %call29 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %21), !dbg !8829
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %20, i8* %call28, i8* %call29), !dbg !8829
  unreachable, !dbg !8829

if.end30:                                         ; preds = %lor.lhs.false23
  br label %if.end31, !dbg !8830

if.end31:                                         ; preds = %if.end30, %land.lhs.true, %if.then13
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !8831
  store %struct._IO_FILE* %22, %struct._IO_FILE** %fp, align 8, !dbg !8832
  br label %if.end33, !dbg !8833

if.else32:                                        ; preds = %if.else9
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.144, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 977, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @__PRETTY_FUNCTION__.stream_open, i64 0, i64 0)) #13, !dbg !8834
  unreachable, !dbg !8834

if.end33:                                         ; preds = %if.end31
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !8835
  ret %struct._IO_FILE* %23, !dbg !8836
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mergefps(%struct.sortfile* %files, i64 %ntemps, i64 %nfiles, %struct._IO_FILE* %ofp, i8* %output_file, %struct._IO_FILE** %fps) #4 !dbg !8837 {
entry:
  %files.addr = alloca %struct.sortfile*, align 8
  %ntemps.addr = alloca i64, align 8
  %nfiles.addr = alloca i64, align 8
  %ofp.addr = alloca %struct._IO_FILE*, align 8
  %output_file.addr = alloca i8*, align 8
  %fps.addr = alloca %struct._IO_FILE**, align 8
  %buffer = alloca %struct.buffer*, align 8, !ctir !607
  %saved = alloca %struct.line, align 8, !ctir !541
  %savedline = alloca %struct.line*, align 8, !ctir !539
  %savealloc = alloca i64, align 8, !ctir !52
  %cur = alloca %struct.line**, align 8, !ctir !617
  %base = alloca %struct.line**, align 8, !ctir !617
  %ord = alloca i64*, align 8, !ctir !618
  %i = alloca i64, align 8, !ctir !52
  %j = alloca i64, align 8, !ctir !52
  %t = alloca i64, align 8, !ctir !52
  %key = alloca %struct.keyfield*, align 8, !ctir !522
  %linelim = alloca %struct.line*, align 8, !ctir !539
  %smallest = alloca %struct.line*, align 8, !ctir !539
  %linelim125 = alloca %struct.line*, align 8, !ctir !539
  %lo = alloca i64, align 8, !ctir !52
  %hi = alloca i64, align 8, !ctir !52
  %probe = alloca i64, align 8, !ctir !52
  %ord0 = alloca i64, align 8, !ctir !52
  %count_of_smaller_lines = alloca i64, align 8, !ctir !52
  %cmp207 = alloca i32, align 4, !ctir !5
  store %struct.sortfile* %files, %struct.sortfile** %files.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sortfile** %files.addr, metadata !8840, metadata !DIExpression()), !dbg !8841
  store i64 %ntemps, i64* %ntemps.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ntemps.addr, metadata !8842, metadata !DIExpression()), !dbg !8843
  store i64 %nfiles, i64* %nfiles.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nfiles.addr, metadata !8844, metadata !DIExpression()), !dbg !8845
  store %struct._IO_FILE* %ofp, %struct._IO_FILE** %ofp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %ofp.addr, metadata !8846, metadata !DIExpression()), !dbg !8847
  store i8* %output_file, i8** %output_file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %output_file.addr, metadata !8848, metadata !DIExpression()), !dbg !8849
  store %struct._IO_FILE** %fps, %struct._IO_FILE*** %fps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE*** %fps.addr, metadata !8850, metadata !DIExpression()), !dbg !8851
  call void @llvm.dbg.declare(metadata %struct.buffer** %buffer, metadata !8852, metadata !DIExpression()), !dbg !8853
  %0 = load i64, i64* %nfiles.addr, align 8, !dbg !8854
  %call = call noalias i8* @xnmalloc(i64 %0, i64 56), !dbg !8855
  %1 = bitcast i8* %call to %struct.buffer*, !dbg !8855
  store %struct.buffer* %1, %struct.buffer** %buffer, align 8, !dbg !8853
  call void @llvm.dbg.declare(metadata %struct.line* %saved, metadata !8856, metadata !DIExpression()), !dbg !8857
  call void @llvm.dbg.declare(metadata %struct.line** %savedline, metadata !8858, metadata !DIExpression()), !dbg !8859
  store %struct.line* null, %struct.line** %savedline, align 8, !dbg !8859
  call void @llvm.dbg.declare(metadata i64* %savealloc, metadata !8860, metadata !DIExpression()), !dbg !8861
  store i64 0, i64* %savealloc, align 8, !dbg !8861
  call void @llvm.dbg.declare(metadata %struct.line*** %cur, metadata !8862, metadata !DIExpression()), !dbg !8863
  %2 = load i64, i64* %nfiles.addr, align 8, !dbg !8864
  %call1 = call noalias i8* @xnmalloc(i64 %2, i64 8), !dbg !8865
  %3 = bitcast i8* %call1 to %struct.line**, !dbg !8865
  store %struct.line** %3, %struct.line*** %cur, align 8, !dbg !8863
  call void @llvm.dbg.declare(metadata %struct.line*** %base, metadata !8866, metadata !DIExpression()), !dbg !8867
  %4 = load i64, i64* %nfiles.addr, align 8, !dbg !8868
  %call2 = call noalias i8* @xnmalloc(i64 %4, i64 8), !dbg !8869
  %5 = bitcast i8* %call2 to %struct.line**, !dbg !8869
  store %struct.line** %5, %struct.line*** %base, align 8, !dbg !8867
  call void @llvm.dbg.declare(metadata i64** %ord, metadata !8870, metadata !DIExpression()), !dbg !8871
  %6 = load i64, i64* %nfiles.addr, align 8, !dbg !8872
  %call3 = call noalias i8* @xnmalloc(i64 %6, i64 8), !dbg !8873
  %7 = bitcast i8* %call3 to i64*, !dbg !8873
  store i64* %7, i64** %ord, align 8, !dbg !8871
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8874, metadata !DIExpression()), !dbg !8875
  call void @llvm.dbg.declare(metadata i64* %j, metadata !8876, metadata !DIExpression()), !dbg !8877
  call void @llvm.dbg.declare(metadata i64* %t, metadata !8878, metadata !DIExpression()), !dbg !8879
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key, metadata !8880, metadata !DIExpression()), !dbg !8881
  %8 = load %struct.keyfield*, %struct.keyfield** @keylist, align 8, !dbg !8882
  store %struct.keyfield* %8, %struct.keyfield** %key, align 8, !dbg !8881
  %text = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !8883, !ctir !541
  store i8* null, i8** %text, align 8, !dbg !8884, !ctir !7
  store i64 0, i64* %i, align 8, !dbg !8885
  br label %for.cond, !dbg !8887

for.cond:                                         ; preds = %if.end34, %entry
  %9 = load i64, i64* %i, align 8, !dbg !8888
  %10 = load i64, i64* %nfiles.addr, align 8, !dbg !8890
  %cmp = icmp ult i64 %9, %10, !dbg !8891
  br i1 %cmp, label %for.body, label %for.end35, !dbg !8892

for.body:                                         ; preds = %for.cond
  %11 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !8893
  %12 = load i64, i64* %i, align 8, !dbg !8895
  %arrayidx = getelementptr inbounds %struct.buffer, %struct.buffer* %11, i64 %12, !dbg !8893, !ctir !607
  %13 = load i64, i64* @merge_buffer_size, align 8, !dbg !8896
  %14 = load i64, i64* @sort_size, align 8, !dbg !8896
  %15 = load i64, i64* %nfiles.addr, align 8, !dbg !8896
  %div = udiv i64 %14, %15, !dbg !8896
  %cmp4 = icmp ugt i64 %13, %div, !dbg !8896
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !8896

cond.true:                                        ; preds = %for.body
  %16 = load i64, i64* @merge_buffer_size, align 8, !dbg !8896
  br label %cond.end, !dbg !8896

cond.false:                                       ; preds = %for.body
  %17 = load i64, i64* @sort_size, align 8, !dbg !8896
  %18 = load i64, i64* %nfiles.addr, align 8, !dbg !8896
  %div5 = udiv i64 %17, %18, !dbg !8896
  br label %cond.end, !dbg !8896

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %16, %cond.true ], [ %div5, %cond.false ], !dbg !8896
  call void @initbuf(%struct.buffer* %arrayidx, i64 32, i64 %cond), !dbg !8897
  %19 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !8898
  %20 = load i64, i64* %i, align 8, !dbg !8900
  %arrayidx6 = getelementptr inbounds %struct.buffer, %struct.buffer* %19, i64 %20, !dbg !8898, !ctir !607
  %21 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !8901
  %22 = load i64, i64* %i, align 8, !dbg !8902
  %arrayidx7 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %21, i64 %22, !dbg !8901, !ctir !584
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx7, align 8, !dbg !8901
  %24 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8903
  %25 = load i64, i64* %i, align 8, !dbg !8904
  %arrayidx8 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %24, i64 %25, !dbg !8903, !ctir !402
  %name = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx8, i32 0, i32 0, !dbg !8905, !ctir !403
  %26 = load i8*, i8** %name, align 8, !dbg !8905, !ctir !90
  %call9 = call zeroext i1 @fillbuf(%struct.buffer* %arrayidx6, %struct._IO_FILE* %23, i8* %26), !dbg !8906
  br i1 %call9, label %if.then, label %if.else, !dbg !8907

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.line** %linelim, metadata !8908, metadata !DIExpression()), !dbg !8910
  %27 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !8911
  %28 = load i64, i64* %i, align 8, !dbg !8912
  %arrayidx10 = getelementptr inbounds %struct.buffer, %struct.buffer* %27, i64 %28, !dbg !8911, !ctir !607
  %call11 = call %struct.line* @buffer_linelim(%struct.buffer* %arrayidx10), !dbg !8913
  store %struct.line* %call11, %struct.line** %linelim, align 8, !dbg !8910
  %29 = load %struct.line*, %struct.line** %linelim, align 8, !dbg !8914
  %add.ptr = getelementptr inbounds %struct.line, %struct.line* %29, i64 -1, !dbg !8915, !ctir !540
  %30 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !8916
  %31 = load i64, i64* %i, align 8, !dbg !8917
  %arrayidx12 = getelementptr inbounds %struct.line*, %struct.line** %30, i64 %31, !dbg !8916, !ctir !617
  store %struct.line* %add.ptr, %struct.line** %arrayidx12, align 8, !dbg !8918
  %32 = load %struct.line*, %struct.line** %linelim, align 8, !dbg !8919
  %33 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !8920
  %34 = load i64, i64* %i, align 8, !dbg !8921
  %arrayidx13 = getelementptr inbounds %struct.buffer, %struct.buffer* %33, i64 %34, !dbg !8920, !ctir !607
  %nlines = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx13, i32 0, i32 2, !dbg !8922, !ctir !608
  %35 = load i64, i64* %nlines, align 8, !dbg !8922, !ctir !52
  %idx.neg = sub i64 0, %35, !dbg !8923
  %add.ptr14 = getelementptr inbounds %struct.line, %struct.line* %32, i64 %idx.neg, !dbg !8923, !ctir !540
  %36 = load %struct.line**, %struct.line*** %base, align 8, !dbg !8924
  %37 = load i64, i64* %i, align 8, !dbg !8925
  %arrayidx15 = getelementptr inbounds %struct.line*, %struct.line** %36, i64 %37, !dbg !8924, !ctir !617
  store %struct.line* %add.ptr14, %struct.line** %arrayidx15, align 8, !dbg !8926
  %38 = load i64, i64* %i, align 8, !dbg !8927
  %inc = add i64 %38, 1, !dbg !8927
  store i64 %inc, i64* %i, align 8, !dbg !8927
  br label %if.end34, !dbg !8928

if.else:                                          ; preds = %cond.end
  %39 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !8929
  %40 = load i64, i64* %i, align 8, !dbg !8931
  %arrayidx16 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %39, i64 %40, !dbg !8929, !ctir !584
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx16, align 8, !dbg !8929
  %42 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8932
  %43 = load i64, i64* %i, align 8, !dbg !8933
  %arrayidx17 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %42, i64 %43, !dbg !8932, !ctir !402
  %name18 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx17, i32 0, i32 0, !dbg !8934, !ctir !403
  %44 = load i8*, i8** %name18, align 8, !dbg !8934, !ctir !90
  call void @xfclose(%struct._IO_FILE* %41, i8* %44), !dbg !8935
  %45 = load i64, i64* %i, align 8, !dbg !8936
  %46 = load i64, i64* %ntemps.addr, align 8, !dbg !8938
  %cmp19 = icmp ult i64 %45, %46, !dbg !8939
  br i1 %cmp19, label %if.then20, label %if.end, !dbg !8940

if.then20:                                        ; preds = %if.else
  %47 = load i64, i64* %ntemps.addr, align 8, !dbg !8941
  %dec = add i64 %47, -1, !dbg !8941
  store i64 %dec, i64* %ntemps.addr, align 8, !dbg !8941
  %48 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8943
  %49 = load i64, i64* %i, align 8, !dbg !8944
  %arrayidx21 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %48, i64 %49, !dbg !8943, !ctir !402
  %name22 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx21, i32 0, i32 0, !dbg !8945, !ctir !403
  %50 = load i8*, i8** %name22, align 8, !dbg !8945, !ctir !90
  call void @zaptemp(i8* %50), !dbg !8946
  br label %if.end, !dbg !8947

if.end:                                           ; preds = %if.then20, %if.else
  %51 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !8948
  %52 = load i64, i64* %i, align 8, !dbg !8949
  %arrayidx23 = getelementptr inbounds %struct.buffer, %struct.buffer* %51, i64 %52, !dbg !8948, !ctir !607
  %buf = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx23, i32 0, i32 0, !dbg !8950, !ctir !608
  %53 = load i8*, i8** %buf, align 8, !dbg !8950, !ctir !7
  call void @free(i8* %53) #12, !dbg !8951
  %54 = load i64, i64* %nfiles.addr, align 8, !dbg !8952
  %dec24 = add i64 %54, -1, !dbg !8952
  store i64 %dec24, i64* %nfiles.addr, align 8, !dbg !8952
  %55 = load i64, i64* %i, align 8, !dbg !8953
  store i64 %55, i64* %j, align 8, !dbg !8955
  br label %for.cond25, !dbg !8956

for.cond25:                                       ; preds = %for.inc, %if.end
  %56 = load i64, i64* %j, align 8, !dbg !8957
  %57 = load i64, i64* %nfiles.addr, align 8, !dbg !8959
  %cmp26 = icmp ult i64 %56, %57, !dbg !8960
  br i1 %cmp26, label %for.body27, label %for.end, !dbg !8961

for.body27:                                       ; preds = %for.cond25
  %58 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8962
  %59 = load i64, i64* %j, align 8, !dbg !8964
  %arrayidx28 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %58, i64 %59, !dbg !8962, !ctir !402
  %60 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !8965
  %61 = load i64, i64* %j, align 8, !dbg !8966
  %add = add i64 %61, 1, !dbg !8967
  %arrayidx29 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %60, i64 %add, !dbg !8965, !ctir !402
  %62 = bitcast %struct.sortfile* %arrayidx28 to i8*, !dbg !8965
  %63 = bitcast %struct.sortfile* %arrayidx29 to i8*, !dbg !8965
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 16, i1 false), !dbg !8965
  %64 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !8968
  %65 = load i64, i64* %j, align 8, !dbg !8969
  %add30 = add i64 %65, 1, !dbg !8970
  %arrayidx31 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %64, i64 %add30, !dbg !8968, !ctir !584
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx31, align 8, !dbg !8968
  %67 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !8971
  %68 = load i64, i64* %j, align 8, !dbg !8972
  %arrayidx32 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %67, i64 %68, !dbg !8971, !ctir !584
  store %struct._IO_FILE* %66, %struct._IO_FILE** %arrayidx32, align 8, !dbg !8973
  br label %for.inc, !dbg !8974

for.inc:                                          ; preds = %for.body27
  %69 = load i64, i64* %j, align 8, !dbg !8975
  %inc33 = add i64 %69, 1, !dbg !8975
  store i64 %inc33, i64* %j, align 8, !dbg !8975
  br label %for.cond25, !dbg !8976, !llvm.loop !8977

for.end:                                          ; preds = %for.cond25
  br label %if.end34

if.end34:                                         ; preds = %for.end, %if.then
  br label %for.cond, !dbg !8979, !llvm.loop !8980

for.end35:                                        ; preds = %for.cond
  store i64 0, i64* %i, align 8, !dbg !8982
  br label %for.cond36, !dbg !8984

for.cond36:                                       ; preds = %for.inc40, %for.end35
  %70 = load i64, i64* %i, align 8, !dbg !8985
  %71 = load i64, i64* %nfiles.addr, align 8, !dbg !8987
  %cmp37 = icmp ult i64 %70, %71, !dbg !8988
  br i1 %cmp37, label %for.body38, label %for.end42, !dbg !8989

for.body38:                                       ; preds = %for.cond36
  %72 = load i64, i64* %i, align 8, !dbg !8990
  %73 = load i64*, i64** %ord, align 8, !dbg !8991
  %74 = load i64, i64* %i, align 8, !dbg !8992
  %arrayidx39 = getelementptr inbounds i64, i64* %73, i64 %74, !dbg !8991, !ctir !618
  store i64 %72, i64* %arrayidx39, align 8, !dbg !8993
  br label %for.inc40, !dbg !8991

for.inc40:                                        ; preds = %for.body38
  %75 = load i64, i64* %i, align 8, !dbg !8994
  %inc41 = add i64 %75, 1, !dbg !8994
  store i64 %inc41, i64* %i, align 8, !dbg !8994
  br label %for.cond36, !dbg !8995, !llvm.loop !8996

for.end42:                                        ; preds = %for.cond36
  store i64 1, i64* %i, align 8, !dbg !8998
  br label %for.cond43, !dbg !9000

for.cond43:                                       ; preds = %for.inc60, %for.end42
  %76 = load i64, i64* %i, align 8, !dbg !9001
  %77 = load i64, i64* %nfiles.addr, align 8, !dbg !9003
  %cmp44 = icmp ult i64 %76, %77, !dbg !9004
  br i1 %cmp44, label %for.body45, label %for.end62, !dbg !9005

for.body45:                                       ; preds = %for.cond43
  %78 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9006
  %79 = load i64*, i64** %ord, align 8, !dbg !9008
  %80 = load i64, i64* %i, align 8, !dbg !9009
  %sub = sub i64 %80, 1, !dbg !9010
  %arrayidx46 = getelementptr inbounds i64, i64* %79, i64 %sub, !dbg !9008, !ctir !618
  %81 = load i64, i64* %arrayidx46, align 8, !dbg !9008
  %arrayidx47 = getelementptr inbounds %struct.line*, %struct.line** %78, i64 %81, !dbg !9006, !ctir !617
  %82 = load %struct.line*, %struct.line** %arrayidx47, align 8, !dbg !9006
  %83 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9011
  %84 = load i64*, i64** %ord, align 8, !dbg !9012
  %85 = load i64, i64* %i, align 8, !dbg !9013
  %arrayidx48 = getelementptr inbounds i64, i64* %84, i64 %85, !dbg !9012, !ctir !618
  %86 = load i64, i64* %arrayidx48, align 8, !dbg !9012
  %arrayidx49 = getelementptr inbounds %struct.line*, %struct.line** %83, i64 %86, !dbg !9011, !ctir !617
  %87 = load %struct.line*, %struct.line** %arrayidx49, align 8, !dbg !9011
  %call50 = call i32 @compare(%struct.line* %82, %struct.line* %87), !dbg !9014
  %cmp51 = icmp slt i32 0, %call50, !dbg !9015
  br i1 %cmp51, label %if.then52, label %if.end59, !dbg !9016

if.then52:                                        ; preds = %for.body45
  %88 = load i64*, i64** %ord, align 8, !dbg !9017
  %89 = load i64, i64* %i, align 8, !dbg !9018
  %sub53 = sub i64 %89, 1, !dbg !9019
  %arrayidx54 = getelementptr inbounds i64, i64* %88, i64 %sub53, !dbg !9017, !ctir !618
  %90 = load i64, i64* %arrayidx54, align 8, !dbg !9017
  store i64 %90, i64* %t, align 8, !dbg !9020
  %91 = load i64*, i64** %ord, align 8, !dbg !9021
  %92 = load i64, i64* %i, align 8, !dbg !9022
  %arrayidx55 = getelementptr inbounds i64, i64* %91, i64 %92, !dbg !9021, !ctir !618
  %93 = load i64, i64* %arrayidx55, align 8, !dbg !9021
  %94 = load i64*, i64** %ord, align 8, !dbg !9023
  %95 = load i64, i64* %i, align 8, !dbg !9024
  %sub56 = sub i64 %95, 1, !dbg !9025
  %arrayidx57 = getelementptr inbounds i64, i64* %94, i64 %sub56, !dbg !9023, !ctir !618
  store i64 %93, i64* %arrayidx57, align 8, !dbg !9026
  %96 = load i64, i64* %t, align 8, !dbg !9027
  %97 = load i64*, i64** %ord, align 8, !dbg !9028
  %98 = load i64, i64* %i, align 8, !dbg !9029
  %arrayidx58 = getelementptr inbounds i64, i64* %97, i64 %98, !dbg !9028, !ctir !618
  store i64 %96, i64* %arrayidx58, align 8, !dbg !9030
  store i64 0, i64* %i, align 8, !dbg !9031
  br label %if.end59, !dbg !9032

if.end59:                                         ; preds = %if.then52, %for.body45
  br label %for.inc60, !dbg !9033

for.inc60:                                        ; preds = %if.end59
  %99 = load i64, i64* %i, align 8, !dbg !9034
  %inc61 = add i64 %99, 1, !dbg !9034
  store i64 %inc61, i64* %i, align 8, !dbg !9034
  br label %for.cond43, !dbg !9035, !llvm.loop !9036

for.end62:                                        ; preds = %for.cond43
  br label %while.cond, !dbg !9038

while.cond:                                       ; preds = %for.end232, %for.end200, %for.end62
  %100 = load i64, i64* %nfiles.addr, align 8, !dbg !9039
  %tobool = icmp ne i64 %100, 0, !dbg !9038
  br i1 %tobool, label %while.body, label %while.end234, !dbg !9038

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.line** %smallest, metadata !9040, metadata !DIExpression()), !dbg !9042
  %101 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9043
  %102 = load i64*, i64** %ord, align 8, !dbg !9044
  %arrayidx63 = getelementptr inbounds i64, i64* %102, i64 0, !dbg !9044, !ctir !618
  %103 = load i64, i64* %arrayidx63, align 8, !dbg !9044
  %arrayidx64 = getelementptr inbounds %struct.line*, %struct.line** %101, i64 %103, !dbg !9043, !ctir !617
  %104 = load %struct.line*, %struct.line** %arrayidx64, align 8, !dbg !9043
  store %struct.line* %104, %struct.line** %smallest, align 8, !dbg !9042
  %105 = load i8, i8* @unique, align 1, !dbg !9045
  %tobool65 = trunc i8 %105 to i1, !dbg !9045
  br i1 %tobool65, label %if.then66, label %if.else106, !dbg !9047

if.then66:                                        ; preds = %while.body
  %106 = load %struct.line*, %struct.line** %savedline, align 8, !dbg !9048
  %tobool67 = icmp ne %struct.line* %106, null, !dbg !9048
  br i1 %tobool67, label %land.lhs.true, label %if.end71, !dbg !9051

land.lhs.true:                                    ; preds = %if.then66
  %107 = load %struct.line*, %struct.line** %savedline, align 8, !dbg !9052
  %108 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9053
  %call68 = call i32 @compare(%struct.line* %107, %struct.line* %108), !dbg !9054
  %tobool69 = icmp ne i32 %call68, 0, !dbg !9054
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !9055

if.then70:                                        ; preds = %land.lhs.true
  store %struct.line* null, %struct.line** %savedline, align 8, !dbg !9056
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !dbg !9058
  %110 = load i8*, i8** %output_file.addr, align 8, !dbg !9059
  call void @write_line(%struct.line* %saved, %struct._IO_FILE* %109, i8* %110), !dbg !9060
  br label %if.end71, !dbg !9061

if.end71:                                         ; preds = %if.then70, %land.lhs.true, %if.then66
  %111 = load %struct.line*, %struct.line** %savedline, align 8, !dbg !9062
  %tobool72 = icmp ne %struct.line* %111, null, !dbg !9062
  br i1 %tobool72, label %if.end105, label %if.then73, !dbg !9064

if.then73:                                        ; preds = %if.end71
  store %struct.line* %saved, %struct.line** %savedline, align 8, !dbg !9065
  %112 = load i64, i64* %savealloc, align 8, !dbg !9067
  %113 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9069
  %length = getelementptr inbounds %struct.line, %struct.line* %113, i32 0, i32 1, !dbg !9070, !ctir !540
  %114 = load i64, i64* %length, align 8, !dbg !9070, !ctir !52
  %cmp74 = icmp ult i64 %112, %114, !dbg !9071
  br i1 %cmp74, label %if.then75, label %if.end85, !dbg !9072

if.then75:                                        ; preds = %if.then73
  br label %do.body, !dbg !9073

do.body:                                          ; preds = %do.cond, %if.then75
  %115 = load i64, i64* %savealloc, align 8, !dbg !9075
  %tobool76 = icmp ne i64 %115, 0, !dbg !9075
  br i1 %tobool76, label %if.end79, label %if.then77, !dbg !9077

if.then77:                                        ; preds = %do.body
  %116 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9078
  %length78 = getelementptr inbounds %struct.line, %struct.line* %116, i32 0, i32 1, !dbg !9080, !ctir !540
  %117 = load i64, i64* %length78, align 8, !dbg !9080, !ctir !52
  store i64 %117, i64* %savealloc, align 8, !dbg !9081
  br label %do.end, !dbg !9082

if.end79:                                         ; preds = %do.body
  br label %do.cond, !dbg !9075

do.cond:                                          ; preds = %if.end79
  %118 = load i64, i64* %savealloc, align 8, !dbg !9083
  %mul = mul i64 %118, 2, !dbg !9083
  store i64 %mul, i64* %savealloc, align 8, !dbg !9083
  %119 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9084
  %length80 = getelementptr inbounds %struct.line, %struct.line* %119, i32 0, i32 1, !dbg !9085, !ctir !540
  %120 = load i64, i64* %length80, align 8, !dbg !9085, !ctir !52
  %cmp81 = icmp ult i64 %mul, %120, !dbg !9086
  br i1 %cmp81, label %do.body, label %do.end, !dbg !9075, !llvm.loop !9087

do.end:                                           ; preds = %do.cond, %if.then77
  %text82 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9089, !ctir !541
  %121 = load i8*, i8** %text82, align 8, !dbg !9089, !ctir !7
  call void @free(i8* %121) #12, !dbg !9090
  %122 = load i64, i64* %savealloc, align 8, !dbg !9091
  %call83 = call noalias i8* @xmalloc(i64 %122), !dbg !9092
  %text84 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9093, !ctir !541
  store i8* %call83, i8** %text84, align 8, !dbg !9094, !ctir !7
  br label %if.end85, !dbg !9095

if.end85:                                         ; preds = %do.end, %if.then73
  %123 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9096
  %length86 = getelementptr inbounds %struct.line, %struct.line* %123, i32 0, i32 1, !dbg !9097, !ctir !540
  %124 = load i64, i64* %length86, align 8, !dbg !9097, !ctir !52
  %length87 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 1, !dbg !9098, !ctir !541
  store i64 %124, i64* %length87, align 8, !dbg !9099, !ctir !52
  %text88 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9100, !ctir !541
  %125 = load i8*, i8** %text88, align 8, !dbg !9100, !ctir !7
  %126 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9101
  %text89 = getelementptr inbounds %struct.line, %struct.line* %126, i32 0, i32 0, !dbg !9102, !ctir !540
  %127 = load i8*, i8** %text89, align 8, !dbg !9102, !ctir !7
  %length90 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 1, !dbg !9103, !ctir !541
  %128 = load i64, i64* %length90, align 8, !dbg !9103, !ctir !52
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 %128, i1 false), !dbg !9104
  %129 = load %struct.keyfield*, %struct.keyfield** %key, align 8, !dbg !9105
  %tobool91 = icmp ne %struct.keyfield* %129, null, !dbg !9105
  br i1 %tobool91, label %if.then92, label %if.end104, !dbg !9107

if.then92:                                        ; preds = %if.end85
  %text93 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9108, !ctir !541
  %130 = load i8*, i8** %text93, align 8, !dbg !9108, !ctir !7
  %131 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9110
  %keybeg = getelementptr inbounds %struct.line, %struct.line* %131, i32 0, i32 2, !dbg !9111, !ctir !540
  %132 = load i8*, i8** %keybeg, align 8, !dbg !9111, !ctir !7
  %133 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9112
  %text94 = getelementptr inbounds %struct.line, %struct.line* %133, i32 0, i32 0, !dbg !9113, !ctir !540
  %134 = load i8*, i8** %text94, align 8, !dbg !9113, !ctir !7
  %sub.ptr.lhs.cast = ptrtoint i8* %132 to i64, !dbg !9114
  %sub.ptr.rhs.cast = ptrtoint i8* %134 to i64, !dbg !9114
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !9114
  %add.ptr95 = getelementptr inbounds i8, i8* %130, i64 %sub.ptr.sub, !dbg !9115, !ctir !8
  %keybeg96 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 2, !dbg !9116, !ctir !541
  store i8* %add.ptr95, i8** %keybeg96, align 8, !dbg !9117, !ctir !7
  %text97 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9118, !ctir !541
  %135 = load i8*, i8** %text97, align 8, !dbg !9118, !ctir !7
  %136 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9119
  %keylim = getelementptr inbounds %struct.line, %struct.line* %136, i32 0, i32 3, !dbg !9120, !ctir !540
  %137 = load i8*, i8** %keylim, align 8, !dbg !9120, !ctir !7
  %138 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9121
  %text98 = getelementptr inbounds %struct.line, %struct.line* %138, i32 0, i32 0, !dbg !9122, !ctir !540
  %139 = load i8*, i8** %text98, align 8, !dbg !9122, !ctir !7
  %sub.ptr.lhs.cast99 = ptrtoint i8* %137 to i64, !dbg !9123
  %sub.ptr.rhs.cast100 = ptrtoint i8* %139 to i64, !dbg !9123
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100, !dbg !9123
  %add.ptr102 = getelementptr inbounds i8, i8* %135, i64 %sub.ptr.sub101, !dbg !9124, !ctir !8
  %keylim103 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 3, !dbg !9125, !ctir !541
  store i8* %add.ptr102, i8** %keylim103, align 8, !dbg !9126, !ctir !7
  br label %if.end104, !dbg !9127

if.end104:                                        ; preds = %if.then92, %if.end85
  br label %if.end105, !dbg !9128

if.end105:                                        ; preds = %if.end104, %if.end71
  br label %if.end107, !dbg !9129

if.else106:                                       ; preds = %while.body
  %140 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9130
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !dbg !9131
  %142 = load i8*, i8** %output_file.addr, align 8, !dbg !9132
  call void @write_line(%struct.line* %140, %struct._IO_FILE* %141, i8* %142), !dbg !9133
  br label %if.end107

if.end107:                                        ; preds = %if.else106, %if.end105
  %143 = load %struct.line**, %struct.line*** %base, align 8, !dbg !9134
  %144 = load i64*, i64** %ord, align 8, !dbg !9136
  %arrayidx108 = getelementptr inbounds i64, i64* %144, i64 0, !dbg !9136, !ctir !618
  %145 = load i64, i64* %arrayidx108, align 8, !dbg !9136
  %arrayidx109 = getelementptr inbounds %struct.line*, %struct.line** %143, i64 %145, !dbg !9134, !ctir !617
  %146 = load %struct.line*, %struct.line** %arrayidx109, align 8, !dbg !9134
  %147 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9137
  %cmp110 = icmp ult %struct.line* %146, %147, !dbg !9138
  br i1 %cmp110, label %if.then111, label %if.else115, !dbg !9139

if.then111:                                       ; preds = %if.end107
  %148 = load %struct.line*, %struct.line** %smallest, align 8, !dbg !9140
  %add.ptr112 = getelementptr inbounds %struct.line, %struct.line* %148, i64 -1, !dbg !9141, !ctir !540
  %149 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9142
  %150 = load i64*, i64** %ord, align 8, !dbg !9143
  %arrayidx113 = getelementptr inbounds i64, i64* %150, i64 0, !dbg !9143, !ctir !618
  %151 = load i64, i64* %arrayidx113, align 8, !dbg !9143
  %arrayidx114 = getelementptr inbounds %struct.line*, %struct.line** %149, i64 %151, !dbg !9142, !ctir !617
  store %struct.line* %add.ptr112, %struct.line** %arrayidx114, align 8, !dbg !9144
  br label %if.end202, !dbg !9142

if.else115:                                       ; preds = %if.end107
  %152 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9145
  %153 = load i64*, i64** %ord, align 8, !dbg !9148
  %arrayidx116 = getelementptr inbounds i64, i64* %153, i64 0, !dbg !9148, !ctir !618
  %154 = load i64, i64* %arrayidx116, align 8, !dbg !9148
  %arrayidx117 = getelementptr inbounds %struct.buffer, %struct.buffer* %152, i64 %154, !dbg !9145, !ctir !607
  %155 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !9149
  %156 = load i64*, i64** %ord, align 8, !dbg !9150
  %arrayidx118 = getelementptr inbounds i64, i64* %156, i64 0, !dbg !9150, !ctir !618
  %157 = load i64, i64* %arrayidx118, align 8, !dbg !9150
  %arrayidx119 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %155, i64 %157, !dbg !9149, !ctir !584
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx119, align 8, !dbg !9149
  %159 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !9151
  %160 = load i64*, i64** %ord, align 8, !dbg !9152
  %arrayidx120 = getelementptr inbounds i64, i64* %160, i64 0, !dbg !9152, !ctir !618
  %161 = load i64, i64* %arrayidx120, align 8, !dbg !9152
  %arrayidx121 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %159, i64 %161, !dbg !9151, !ctir !402
  %name122 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx121, i32 0, i32 0, !dbg !9153, !ctir !403
  %162 = load i8*, i8** %name122, align 8, !dbg !9153, !ctir !90
  %call123 = call zeroext i1 @fillbuf(%struct.buffer* %arrayidx117, %struct._IO_FILE* %158, i8* %162), !dbg !9154
  br i1 %call123, label %if.then124, label %if.else139, !dbg !9155

if.then124:                                       ; preds = %if.else115
  call void @llvm.dbg.declare(metadata %struct.line** %linelim125, metadata !9156, metadata !DIExpression()), !dbg !9158
  %163 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9159
  %164 = load i64*, i64** %ord, align 8, !dbg !9160
  %arrayidx126 = getelementptr inbounds i64, i64* %164, i64 0, !dbg !9160, !ctir !618
  %165 = load i64, i64* %arrayidx126, align 8, !dbg !9160
  %arrayidx127 = getelementptr inbounds %struct.buffer, %struct.buffer* %163, i64 %165, !dbg !9159, !ctir !607
  %call128 = call %struct.line* @buffer_linelim(%struct.buffer* %arrayidx127), !dbg !9161
  store %struct.line* %call128, %struct.line** %linelim125, align 8, !dbg !9158
  %166 = load %struct.line*, %struct.line** %linelim125, align 8, !dbg !9162
  %add.ptr129 = getelementptr inbounds %struct.line, %struct.line* %166, i64 -1, !dbg !9163, !ctir !540
  %167 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9164
  %168 = load i64*, i64** %ord, align 8, !dbg !9165
  %arrayidx130 = getelementptr inbounds i64, i64* %168, i64 0, !dbg !9165, !ctir !618
  %169 = load i64, i64* %arrayidx130, align 8, !dbg !9165
  %arrayidx131 = getelementptr inbounds %struct.line*, %struct.line** %167, i64 %169, !dbg !9164, !ctir !617
  store %struct.line* %add.ptr129, %struct.line** %arrayidx131, align 8, !dbg !9166
  %170 = load %struct.line*, %struct.line** %linelim125, align 8, !dbg !9167
  %171 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9168
  %172 = load i64*, i64** %ord, align 8, !dbg !9169
  %arrayidx132 = getelementptr inbounds i64, i64* %172, i64 0, !dbg !9169, !ctir !618
  %173 = load i64, i64* %arrayidx132, align 8, !dbg !9169
  %arrayidx133 = getelementptr inbounds %struct.buffer, %struct.buffer* %171, i64 %173, !dbg !9168, !ctir !607
  %nlines134 = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx133, i32 0, i32 2, !dbg !9170, !ctir !608
  %174 = load i64, i64* %nlines134, align 8, !dbg !9170, !ctir !52
  %idx.neg135 = sub i64 0, %174, !dbg !9171
  %add.ptr136 = getelementptr inbounds %struct.line, %struct.line* %170, i64 %idx.neg135, !dbg !9171, !ctir !540
  %175 = load %struct.line**, %struct.line*** %base, align 8, !dbg !9172
  %176 = load i64*, i64** %ord, align 8, !dbg !9173
  %arrayidx137 = getelementptr inbounds i64, i64* %176, i64 0, !dbg !9173, !ctir !618
  %177 = load i64, i64* %arrayidx137, align 8, !dbg !9173
  %arrayidx138 = getelementptr inbounds %struct.line*, %struct.line** %175, i64 %177, !dbg !9172, !ctir !617
  store %struct.line* %add.ptr136, %struct.line** %arrayidx138, align 8, !dbg !9174
  br label %if.end201, !dbg !9175

if.else139:                                       ; preds = %if.else115
  store i64 1, i64* %i, align 8, !dbg !9176
  br label %for.cond140, !dbg !9179

for.cond140:                                      ; preds = %for.inc150, %if.else139
  %178 = load i64, i64* %i, align 8, !dbg !9180
  %179 = load i64, i64* %nfiles.addr, align 8, !dbg !9182
  %cmp141 = icmp ult i64 %178, %179, !dbg !9183
  br i1 %cmp141, label %for.body142, label %for.end152, !dbg !9184

for.body142:                                      ; preds = %for.cond140
  %180 = load i64*, i64** %ord, align 8, !dbg !9185
  %181 = load i64, i64* %i, align 8, !dbg !9187
  %arrayidx143 = getelementptr inbounds i64, i64* %180, i64 %181, !dbg !9185, !ctir !618
  %182 = load i64, i64* %arrayidx143, align 8, !dbg !9185
  %183 = load i64*, i64** %ord, align 8, !dbg !9188
  %arrayidx144 = getelementptr inbounds i64, i64* %183, i64 0, !dbg !9188, !ctir !618
  %184 = load i64, i64* %arrayidx144, align 8, !dbg !9188
  %cmp145 = icmp ugt i64 %182, %184, !dbg !9189
  br i1 %cmp145, label %if.then146, label %if.end149, !dbg !9190

if.then146:                                       ; preds = %for.body142
  %185 = load i64*, i64** %ord, align 8, !dbg !9191
  %186 = load i64, i64* %i, align 8, !dbg !9192
  %arrayidx147 = getelementptr inbounds i64, i64* %185, i64 %186, !dbg !9191, !ctir !618
  %187 = load i64, i64* %arrayidx147, align 8, !dbg !9193
  %dec148 = add i64 %187, -1, !dbg !9193
  store i64 %dec148, i64* %arrayidx147, align 8, !dbg !9193
  br label %if.end149, !dbg !9193

if.end149:                                        ; preds = %if.then146, %for.body142
  br label %for.inc150, !dbg !9194

for.inc150:                                       ; preds = %if.end149
  %188 = load i64, i64* %i, align 8, !dbg !9195
  %inc151 = add i64 %188, 1, !dbg !9195
  store i64 %inc151, i64* %i, align 8, !dbg !9195
  br label %for.cond140, !dbg !9196, !llvm.loop !9197

for.end152:                                       ; preds = %for.cond140
  %189 = load i64, i64* %nfiles.addr, align 8, !dbg !9199
  %dec153 = add i64 %189, -1, !dbg !9199
  store i64 %dec153, i64* %nfiles.addr, align 8, !dbg !9199
  %190 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !9200
  %191 = load i64*, i64** %ord, align 8, !dbg !9201
  %arrayidx154 = getelementptr inbounds i64, i64* %191, i64 0, !dbg !9201, !ctir !618
  %192 = load i64, i64* %arrayidx154, align 8, !dbg !9201
  %arrayidx155 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %190, i64 %192, !dbg !9200, !ctir !584
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx155, align 8, !dbg !9200
  %194 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !9202
  %195 = load i64*, i64** %ord, align 8, !dbg !9203
  %arrayidx156 = getelementptr inbounds i64, i64* %195, i64 0, !dbg !9203, !ctir !618
  %196 = load i64, i64* %arrayidx156, align 8, !dbg !9203
  %arrayidx157 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %194, i64 %196, !dbg !9202, !ctir !402
  %name158 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx157, i32 0, i32 0, !dbg !9204, !ctir !403
  %197 = load i8*, i8** %name158, align 8, !dbg !9204, !ctir !90
  call void @xfclose(%struct._IO_FILE* %193, i8* %197), !dbg !9205
  %198 = load i64*, i64** %ord, align 8, !dbg !9206
  %arrayidx159 = getelementptr inbounds i64, i64* %198, i64 0, !dbg !9206, !ctir !618
  %199 = load i64, i64* %arrayidx159, align 8, !dbg !9206
  %200 = load i64, i64* %ntemps.addr, align 8, !dbg !9208
  %cmp160 = icmp ult i64 %199, %200, !dbg !9209
  br i1 %cmp160, label %if.then161, label %if.end166, !dbg !9210

if.then161:                                       ; preds = %for.end152
  %201 = load i64, i64* %ntemps.addr, align 8, !dbg !9211
  %dec162 = add i64 %201, -1, !dbg !9211
  store i64 %dec162, i64* %ntemps.addr, align 8, !dbg !9211
  %202 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !9213
  %203 = load i64*, i64** %ord, align 8, !dbg !9214
  %arrayidx163 = getelementptr inbounds i64, i64* %203, i64 0, !dbg !9214, !ctir !618
  %204 = load i64, i64* %arrayidx163, align 8, !dbg !9214
  %arrayidx164 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %202, i64 %204, !dbg !9213, !ctir !402
  %name165 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %arrayidx164, i32 0, i32 0, !dbg !9215, !ctir !403
  %205 = load i8*, i8** %name165, align 8, !dbg !9215, !ctir !90
  call void @zaptemp(i8* %205), !dbg !9216
  br label %if.end166, !dbg !9217

if.end166:                                        ; preds = %if.then161, %for.end152
  %206 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9218
  %207 = load i64*, i64** %ord, align 8, !dbg !9219
  %arrayidx167 = getelementptr inbounds i64, i64* %207, i64 0, !dbg !9219, !ctir !618
  %208 = load i64, i64* %arrayidx167, align 8, !dbg !9219
  %arrayidx168 = getelementptr inbounds %struct.buffer, %struct.buffer* %206, i64 %208, !dbg !9218, !ctir !607
  %buf169 = getelementptr inbounds %struct.buffer, %struct.buffer* %arrayidx168, i32 0, i32 0, !dbg !9220, !ctir !608
  %209 = load i8*, i8** %buf169, align 8, !dbg !9220, !ctir !7
  call void @free(i8* %209) #12, !dbg !9221
  %210 = load i64*, i64** %ord, align 8, !dbg !9222
  %arrayidx170 = getelementptr inbounds i64, i64* %210, i64 0, !dbg !9222, !ctir !618
  %211 = load i64, i64* %arrayidx170, align 8, !dbg !9222
  store i64 %211, i64* %i, align 8, !dbg !9224
  br label %for.cond171, !dbg !9225

for.cond171:                                      ; preds = %for.inc189, %if.end166
  %212 = load i64, i64* %i, align 8, !dbg !9226
  %213 = load i64, i64* %nfiles.addr, align 8, !dbg !9228
  %cmp172 = icmp ult i64 %212, %213, !dbg !9229
  br i1 %cmp172, label %for.body173, label %for.end191, !dbg !9230

for.body173:                                      ; preds = %for.cond171
  %214 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !9231
  %215 = load i64, i64* %i, align 8, !dbg !9233
  %add174 = add i64 %215, 1, !dbg !9234
  %arrayidx175 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %214, i64 %add174, !dbg !9231, !ctir !584
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %arrayidx175, align 8, !dbg !9231
  %217 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !9235
  %218 = load i64, i64* %i, align 8, !dbg !9236
  %arrayidx176 = getelementptr inbounds %struct._IO_FILE*, %struct._IO_FILE** %217, i64 %218, !dbg !9235, !ctir !584
  store %struct._IO_FILE* %216, %struct._IO_FILE** %arrayidx176, align 8, !dbg !9237
  %219 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !9238
  %220 = load i64, i64* %i, align 8, !dbg !9239
  %arrayidx177 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %219, i64 %220, !dbg !9238, !ctir !402
  %221 = load %struct.sortfile*, %struct.sortfile** %files.addr, align 8, !dbg !9240
  %222 = load i64, i64* %i, align 8, !dbg !9241
  %add178 = add i64 %222, 1, !dbg !9242
  %arrayidx179 = getelementptr inbounds %struct.sortfile, %struct.sortfile* %221, i64 %add178, !dbg !9240, !ctir !402
  %223 = bitcast %struct.sortfile* %arrayidx177 to i8*, !dbg !9240
  %224 = bitcast %struct.sortfile* %arrayidx179 to i8*, !dbg !9240
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %223, i8* align 8 %224, i64 16, i1 false), !dbg !9240
  %225 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9243
  %226 = load i64, i64* %i, align 8, !dbg !9244
  %arrayidx180 = getelementptr inbounds %struct.buffer, %struct.buffer* %225, i64 %226, !dbg !9243, !ctir !607
  %227 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9245
  %228 = load i64, i64* %i, align 8, !dbg !9246
  %add181 = add i64 %228, 1, !dbg !9247
  %arrayidx182 = getelementptr inbounds %struct.buffer, %struct.buffer* %227, i64 %add181, !dbg !9245, !ctir !607
  %229 = bitcast %struct.buffer* %arrayidx180 to i8*, !dbg !9245
  %230 = bitcast %struct.buffer* %arrayidx182 to i8*, !dbg !9245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %229, i8* align 8 %230, i64 56, i1 false), !dbg !9245
  %231 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9248
  %232 = load i64, i64* %i, align 8, !dbg !9249
  %add183 = add i64 %232, 1, !dbg !9250
  %arrayidx184 = getelementptr inbounds %struct.line*, %struct.line** %231, i64 %add183, !dbg !9248, !ctir !617
  %233 = load %struct.line*, %struct.line** %arrayidx184, align 8, !dbg !9248
  %234 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9251
  %235 = load i64, i64* %i, align 8, !dbg !9252
  %arrayidx185 = getelementptr inbounds %struct.line*, %struct.line** %234, i64 %235, !dbg !9251, !ctir !617
  store %struct.line* %233, %struct.line** %arrayidx185, align 8, !dbg !9253
  %236 = load %struct.line**, %struct.line*** %base, align 8, !dbg !9254
  %237 = load i64, i64* %i, align 8, !dbg !9255
  %add186 = add i64 %237, 1, !dbg !9256
  %arrayidx187 = getelementptr inbounds %struct.line*, %struct.line** %236, i64 %add186, !dbg !9254, !ctir !617
  %238 = load %struct.line*, %struct.line** %arrayidx187, align 8, !dbg !9254
  %239 = load %struct.line**, %struct.line*** %base, align 8, !dbg !9257
  %240 = load i64, i64* %i, align 8, !dbg !9258
  %arrayidx188 = getelementptr inbounds %struct.line*, %struct.line** %239, i64 %240, !dbg !9257, !ctir !617
  store %struct.line* %238, %struct.line** %arrayidx188, align 8, !dbg !9259
  br label %for.inc189, !dbg !9260

for.inc189:                                       ; preds = %for.body173
  %241 = load i64, i64* %i, align 8, !dbg !9261
  %inc190 = add i64 %241, 1, !dbg !9261
  store i64 %inc190, i64* %i, align 8, !dbg !9261
  br label %for.cond171, !dbg !9262, !llvm.loop !9263

for.end191:                                       ; preds = %for.cond171
  store i64 0, i64* %i, align 8, !dbg !9265
  br label %for.cond192, !dbg !9267

for.cond192:                                      ; preds = %for.inc198, %for.end191
  %242 = load i64, i64* %i, align 8, !dbg !9268
  %243 = load i64, i64* %nfiles.addr, align 8, !dbg !9270
  %cmp193 = icmp ult i64 %242, %243, !dbg !9271
  br i1 %cmp193, label %for.body194, label %for.end200, !dbg !9272

for.body194:                                      ; preds = %for.cond192
  %244 = load i64*, i64** %ord, align 8, !dbg !9273
  %245 = load i64, i64* %i, align 8, !dbg !9274
  %add195 = add i64 %245, 1, !dbg !9275
  %arrayidx196 = getelementptr inbounds i64, i64* %244, i64 %add195, !dbg !9273, !ctir !618
  %246 = load i64, i64* %arrayidx196, align 8, !dbg !9273
  %247 = load i64*, i64** %ord, align 8, !dbg !9276
  %248 = load i64, i64* %i, align 8, !dbg !9277
  %arrayidx197 = getelementptr inbounds i64, i64* %247, i64 %248, !dbg !9276, !ctir !618
  store i64 %246, i64* %arrayidx197, align 8, !dbg !9278
  br label %for.inc198, !dbg !9276

for.inc198:                                       ; preds = %for.body194
  %249 = load i64, i64* %i, align 8, !dbg !9279
  %inc199 = add i64 %249, 1, !dbg !9279
  store i64 %inc199, i64* %i, align 8, !dbg !9279
  br label %for.cond192, !dbg !9280, !llvm.loop !9281

for.end200:                                       ; preds = %for.cond192
  br label %while.cond, !dbg !9283, !llvm.loop !9284

if.end201:                                        ; preds = %if.then124
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.then111
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !9286, metadata !DIExpression()), !dbg !9288
  store i64 1, i64* %lo, align 8, !dbg !9288
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !9289, metadata !DIExpression()), !dbg !9290
  %250 = load i64, i64* %nfiles.addr, align 8, !dbg !9291
  store i64 %250, i64* %hi, align 8, !dbg !9290
  call void @llvm.dbg.declare(metadata i64* %probe, metadata !9292, metadata !DIExpression()), !dbg !9293
  %251 = load i64, i64* %lo, align 8, !dbg !9294
  store i64 %251, i64* %probe, align 8, !dbg !9293
  call void @llvm.dbg.declare(metadata i64* %ord0, metadata !9295, metadata !DIExpression()), !dbg !9296
  %252 = load i64*, i64** %ord, align 8, !dbg !9297
  %arrayidx203 = getelementptr inbounds i64, i64* %252, i64 0, !dbg !9297, !ctir !618
  %253 = load i64, i64* %arrayidx203, align 8, !dbg !9297
  store i64 %253, i64* %ord0, align 8, !dbg !9296
  call void @llvm.dbg.declare(metadata i64* %count_of_smaller_lines, metadata !9298, metadata !DIExpression()), !dbg !9299
  br label %while.cond204, !dbg !9300

while.cond204:                                    ; preds = %if.end220, %if.end202
  %254 = load i64, i64* %lo, align 8, !dbg !9301
  %255 = load i64, i64* %hi, align 8, !dbg !9302
  %cmp205 = icmp ult i64 %254, %255, !dbg !9303
  br i1 %cmp205, label %while.body206, label %while.end, !dbg !9300

while.body206:                                    ; preds = %while.cond204
  call void @llvm.dbg.declare(metadata i32* %cmp207, metadata !9304, metadata !DIExpression()), !dbg !9306
  %256 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9307
  %257 = load i64, i64* %ord0, align 8, !dbg !9308
  %arrayidx208 = getelementptr inbounds %struct.line*, %struct.line** %256, i64 %257, !dbg !9307, !ctir !617
  %258 = load %struct.line*, %struct.line** %arrayidx208, align 8, !dbg !9307
  %259 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9309
  %260 = load i64*, i64** %ord, align 8, !dbg !9310
  %261 = load i64, i64* %probe, align 8, !dbg !9311
  %arrayidx209 = getelementptr inbounds i64, i64* %260, i64 %261, !dbg !9310, !ctir !618
  %262 = load i64, i64* %arrayidx209, align 8, !dbg !9310
  %arrayidx210 = getelementptr inbounds %struct.line*, %struct.line** %259, i64 %262, !dbg !9309, !ctir !617
  %263 = load %struct.line*, %struct.line** %arrayidx210, align 8, !dbg !9309
  %call211 = call i32 @compare(%struct.line* %258, %struct.line* %263), !dbg !9312
  store i32 %call211, i32* %cmp207, align 4, !dbg !9306
  %264 = load i32, i32* %cmp207, align 4, !dbg !9313
  %cmp212 = icmp slt i32 %264, 0, !dbg !9315
  br i1 %cmp212, label %if.then217, label %lor.lhs.false, !dbg !9316

lor.lhs.false:                                    ; preds = %while.body206
  %265 = load i32, i32* %cmp207, align 4, !dbg !9317
  %cmp213 = icmp eq i32 %265, 0, !dbg !9318
  br i1 %cmp213, label %land.lhs.true214, label %if.else218, !dbg !9319

land.lhs.true214:                                 ; preds = %lor.lhs.false
  %266 = load i64, i64* %ord0, align 8, !dbg !9320
  %267 = load i64*, i64** %ord, align 8, !dbg !9321
  %268 = load i64, i64* %probe, align 8, !dbg !9322
  %arrayidx215 = getelementptr inbounds i64, i64* %267, i64 %268, !dbg !9321, !ctir !618
  %269 = load i64, i64* %arrayidx215, align 8, !dbg !9321
  %cmp216 = icmp ult i64 %266, %269, !dbg !9323
  br i1 %cmp216, label %if.then217, label %if.else218, !dbg !9324

if.then217:                                       ; preds = %land.lhs.true214, %while.body206
  %270 = load i64, i64* %probe, align 8, !dbg !9325
  store i64 %270, i64* %hi, align 8, !dbg !9326
  br label %if.end220, !dbg !9327

if.else218:                                       ; preds = %land.lhs.true214, %lor.lhs.false
  %271 = load i64, i64* %probe, align 8, !dbg !9328
  %add219 = add i64 %271, 1, !dbg !9329
  store i64 %add219, i64* %lo, align 8, !dbg !9330
  br label %if.end220

if.end220:                                        ; preds = %if.else218, %if.then217
  %272 = load i64, i64* %lo, align 8, !dbg !9331
  %273 = load i64, i64* %hi, align 8, !dbg !9332
  %add221 = add i64 %272, %273, !dbg !9333
  %div222 = udiv i64 %add221, 2, !dbg !9334
  store i64 %div222, i64* %probe, align 8, !dbg !9335
  br label %while.cond204, !dbg !9300, !llvm.loop !9336

while.end:                                        ; preds = %while.cond204
  %274 = load i64, i64* %lo, align 8, !dbg !9338
  %sub223 = sub i64 %274, 1, !dbg !9339
  store i64 %sub223, i64* %count_of_smaller_lines, align 8, !dbg !9340
  store i64 0, i64* %j, align 8, !dbg !9341
  br label %for.cond224, !dbg !9343

for.cond224:                                      ; preds = %for.inc230, %while.end
  %275 = load i64, i64* %j, align 8, !dbg !9344
  %276 = load i64, i64* %count_of_smaller_lines, align 8, !dbg !9346
  %cmp225 = icmp ult i64 %275, %276, !dbg !9347
  br i1 %cmp225, label %for.body226, label %for.end232, !dbg !9348

for.body226:                                      ; preds = %for.cond224
  %277 = load i64*, i64** %ord, align 8, !dbg !9349
  %278 = load i64, i64* %j, align 8, !dbg !9350
  %add227 = add i64 %278, 1, !dbg !9351
  %arrayidx228 = getelementptr inbounds i64, i64* %277, i64 %add227, !dbg !9349, !ctir !618
  %279 = load i64, i64* %arrayidx228, align 8, !dbg !9349
  %280 = load i64*, i64** %ord, align 8, !dbg !9352
  %281 = load i64, i64* %j, align 8, !dbg !9353
  %arrayidx229 = getelementptr inbounds i64, i64* %280, i64 %281, !dbg !9352, !ctir !618
  store i64 %279, i64* %arrayidx229, align 8, !dbg !9354
  br label %for.inc230, !dbg !9352

for.inc230:                                       ; preds = %for.body226
  %282 = load i64, i64* %j, align 8, !dbg !9355
  %inc231 = add i64 %282, 1, !dbg !9355
  store i64 %inc231, i64* %j, align 8, !dbg !9355
  br label %for.cond224, !dbg !9356, !llvm.loop !9357

for.end232:                                       ; preds = %for.cond224
  %283 = load i64, i64* %ord0, align 8, !dbg !9359
  %284 = load i64*, i64** %ord, align 8, !dbg !9360
  %285 = load i64, i64* %count_of_smaller_lines, align 8, !dbg !9361
  %arrayidx233 = getelementptr inbounds i64, i64* %284, i64 %285, !dbg !9360, !ctir !618
  store i64 %283, i64* %arrayidx233, align 8, !dbg !9362
  br label %while.cond, !dbg !9038, !llvm.loop !9284

while.end234:                                     ; preds = %while.cond
  %286 = load i8, i8* @unique, align 1, !dbg !9363
  %tobool235 = trunc i8 %286 to i1, !dbg !9363
  br i1 %tobool235, label %land.lhs.true236, label %if.end240, !dbg !9365

land.lhs.true236:                                 ; preds = %while.end234
  %287 = load %struct.line*, %struct.line** %savedline, align 8, !dbg !9366
  %tobool237 = icmp ne %struct.line* %287, null, !dbg !9366
  br i1 %tobool237, label %if.then238, label %if.end240, !dbg !9367

if.then238:                                       ; preds = %land.lhs.true236
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !dbg !9368
  %289 = load i8*, i8** %output_file.addr, align 8, !dbg !9370
  call void @write_line(%struct.line* %saved, %struct._IO_FILE* %288, i8* %289), !dbg !9371
  %text239 = getelementptr inbounds %struct.line, %struct.line* %saved, i32 0, i32 0, !dbg !9372, !ctir !541
  %290 = load i8*, i8** %text239, align 8, !dbg !9372, !ctir !7
  call void @free(i8* %290) #12, !dbg !9373
  br label %if.end240, !dbg !9374

if.end240:                                        ; preds = %if.then238, %land.lhs.true236, %while.end234
  %291 = load %struct._IO_FILE*, %struct._IO_FILE** %ofp.addr, align 8, !dbg !9375
  %292 = load i8*, i8** %output_file.addr, align 8, !dbg !9376
  call void @xfclose(%struct._IO_FILE* %291, i8* %292), !dbg !9377
  %293 = load %struct._IO_FILE**, %struct._IO_FILE*** %fps.addr, align 8, !dbg !9378
  %294 = bitcast %struct._IO_FILE** %293 to i8*, !dbg !9378
  call void @free(i8* %294) #12, !dbg !9379
  %295 = load %struct.buffer*, %struct.buffer** %buffer, align 8, !dbg !9380
  %296 = bitcast %struct.buffer* %295 to i8*, !dbg !9380
  call void @free(i8* %296) #12, !dbg !9381
  %297 = load i64*, i64** %ord, align 8, !dbg !9382
  %298 = bitcast i64* %297 to i8*, !dbg !9382
  call void @free(i8* %298) #12, !dbg !9383
  %299 = load %struct.line**, %struct.line*** %base, align 8, !dbg !9384
  %300 = bitcast %struct.line** %299 to i8*, !dbg !9384
  call void @free(i8* %300) #12, !dbg !9385
  %301 = load %struct.line**, %struct.line*** %cur, align 8, !dbg !9386
  %302 = bitcast %struct.line** %301 to i8*, !dbg !9386
  call void @free(i8* %302) #12, !dbg !9387
  ret void, !dbg !9388
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @zaptemp(i8* %name) #4 !dbg !9389 {
entry:
  %name.addr = alloca i8*, align 8
  %pnode = alloca %struct.tempnode**, align 8, !ctir !619
  %node = alloca %struct.tempnode*, align 8, !ctir !407
  %next = alloca %struct.tempnode*, align 8, !ctir !407
  %unlink_status = alloca i32, align 4, !ctir !5
  %unlink_errno = alloca i32, align 4, !ctir !5
  %cs = alloca %struct.cs_status, align 8, !ctir !2943
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !9390, metadata !DIExpression()), !dbg !9391
  call void @llvm.dbg.declare(metadata %struct.tempnode*** %pnode, metadata !9392, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !9394, metadata !DIExpression()), !dbg !9395
  call void @llvm.dbg.declare(metadata %struct.tempnode** %next, metadata !9396, metadata !DIExpression()), !dbg !9397
  call void @llvm.dbg.declare(metadata i32* %unlink_status, metadata !9398, metadata !DIExpression()), !dbg !9399
  call void @llvm.dbg.declare(metadata i32* %unlink_errno, metadata !9400, metadata !DIExpression()), !dbg !9401
  store i32 0, i32* %unlink_errno, align 4, !dbg !9401
  call void @llvm.dbg.declare(metadata %struct.cs_status* %cs, metadata !9402, metadata !DIExpression()), !dbg !9403
  store %struct.tempnode** @temphead, %struct.tempnode*** %pnode, align 8, !dbg !9404
  br label %for.cond, !dbg !9406

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !dbg !9407
  %1 = load volatile %struct.tempnode*, %struct.tempnode** %0, align 8, !dbg !9409, !ctir !411
  store %struct.tempnode* %1, %struct.tempnode** %node, align 8, !dbg !9410
  %name1 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %1, i32 0, i32 3, !dbg !9411, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name1, i64 0, i64 0, !dbg !9412, !ctir !417
  %2 = load i8*, i8** %name.addr, align 8, !dbg !9413
  %cmp = icmp ne i8* %arraydecay, %2, !dbg !9414
  br i1 %cmp, label %for.body, label %for.end, !dbg !9415

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !9416

for.inc:                                          ; preds = %for.body
  %3 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9417
  %next2 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %3, i32 0, i32 0, !dbg !9418, !ctir !408
  store %struct.tempnode** %next2, %struct.tempnode*** %pnode, align 8, !dbg !9419
  br label %for.cond, !dbg !9420, !llvm.loop !9421

for.end:                                          ; preds = %for.cond
  %4 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9423
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 2, !dbg !9425, !ctir !408
  %5 = load i8, i8* %state, align 4, !dbg !9425, !ctir !8
  %conv = sext i8 %5 to i32, !dbg !9423
  %cmp3 = icmp eq i32 %conv, 1, !dbg !9426
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9427

if.then:                                          ; preds = %for.end
  %6 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9428
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %6, i32 0, i32 1, !dbg !9429, !ctir !408
  %7 = load i32, i32* %pid, align 8, !dbg !9429, !ctir !413
  call void @wait_proc(i32 %7), !dbg !9430
  br label %if.end, !dbg !9430

if.end:                                           ; preds = %if.then, %for.end
  %8 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9431
  %next5 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %8, i32 0, i32 0, !dbg !9432, !ctir !408
  %9 = load volatile %struct.tempnode*, %struct.tempnode** %next5, align 8, !dbg !9432, !ctir !411
  store %struct.tempnode* %9, %struct.tempnode** %next, align 8, !dbg !9433
  call void @cs_enter(%struct.cs_status* %cs), !dbg !9434
  %10 = load i8*, i8** %name.addr, align 8, !dbg !9435
  %call = call i32 @unlink(i8* %10) #12, !dbg !9436
  store i32 %call, i32* %unlink_status, align 4, !dbg !9437
  %call6 = call i32* @__errno_location() #16, !dbg !9438
  %11 = load i32, i32* %call6, align 4, !dbg !9438, !ctir !5
  store i32 %11, i32* %unlink_errno, align 4, !dbg !9439
  %12 = load %struct.tempnode*, %struct.tempnode** %next, align 8, !dbg !9440
  %13 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !dbg !9441
  store volatile %struct.tempnode* %12, %struct.tempnode** %13, align 8, !dbg !9442, !ctir !411
  call void @cs_leave(%struct.cs_status* %cs), !dbg !9443
  %14 = load i32, i32* %unlink_status, align 4, !dbg !9444
  %cmp7 = icmp ne i32 %14, 0, !dbg !9446
  br i1 %cmp7, label %if.then9, label %if.end12, !dbg !9447

if.then9:                                         ; preds = %if.end
  %15 = load i32, i32* %unlink_errno, align 4, !dbg !9448
  %call10 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.175, i64 0, i64 0)) #12, !dbg !9449
  %16 = load i8*, i8** %name.addr, align 8, !dbg !9450
  %call11 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %16), !dbg !9450
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* %call10, i8* %call11), !dbg !9451
  br label %if.end12, !dbg !9451

if.end12:                                         ; preds = %if.then9, %if.end
  %17 = load %struct.tempnode*, %struct.tempnode** %next, align 8, !dbg !9452
  %tobool = icmp ne %struct.tempnode* %17, null, !dbg !9452
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !9454

if.then13:                                        ; preds = %if.end12
  %18 = load %struct.tempnode**, %struct.tempnode*** %pnode, align 8, !dbg !9455
  store %struct.tempnode** %18, %struct.tempnode*** @temptail, align 8, !dbg !9456
  br label %if.end14, !dbg !9457

if.end14:                                         ; preds = %if.then13, %if.end12
  %19 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9458
  %20 = bitcast %struct.tempnode* %19 to i8*, !dbg !9458
  call void @free(i8* %20) #12, !dbg !9459
  ret void, !dbg !9460
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wait_proc(i32 %pid) #4 !dbg !9461 {
entry:
  %pid.addr = alloca i32, align 4
  store i32 %pid, i32* %pid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !9464, metadata !DIExpression()), !dbg !9465
  %0 = load i32, i32* %pid.addr, align 4, !dbg !9466
  %call = call zeroext i1 @delete_proc(i32 %0), !dbg !9468
  br i1 %call, label %if.then, label %if.end, !dbg !9469

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %pid.addr, align 4, !dbg !9470
  %call1 = call i32 @reap(i32 %1), !dbg !9471
  br label %if.end, !dbg !9471

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !9472
}

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #2

declare dso_local i32 @open(i8*, i32, ...) #3

; Function Attrs: nounwind
declare dso_local i32 @ftruncate(i32, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.stat* @get_outstatus() #4 !dbg !779 {
entry:
  %0 = load i32, i32* @get_outstatus.outstat_errno, align 4, !dbg !9473
  %cmp = icmp eq i32 %0, 0, !dbg !9475
  br i1 %cmp, label %if.then, label %if.end, !dbg !9476

if.then:                                          ; preds = %entry
  %call = call i32 @fstat(i32 1, %struct.stat* @get_outstatus.outstat) #12, !dbg !9477
  %cmp1 = icmp eq i32 %call, 0, !dbg !9478
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !9477

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !9477

cond.false:                                       ; preds = %if.then
  %call2 = call i32* @__errno_location() #16, !dbg !9479
  %1 = load i32, i32* %call2, align 4, !dbg !9479, !ctir !5
  br label %cond.end, !dbg !9477

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %1, %cond.false ], !dbg !9477
  store i32 %cond, i32* @get_outstatus.outstat_errno, align 4, !dbg !9480
  br label %if.end, !dbg !9481

if.end:                                           ; preds = %cond.end, %entry
  %2 = load i32, i32* @get_outstatus.outstat_errno, align 4, !dbg !9482
  %cmp3 = icmp slt i32 %2, 0, !dbg !9483
  %3 = zext i1 %cmp3 to i64, !dbg !9482
  %cond4 = select i1 %cmp3, %struct.stat* @get_outstatus.outstat, %struct.stat* null, !dbg !9482
  ret %struct.stat* %cond4, !dbg !9484
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct._IO_FILE* @open_temp(%struct.tempnode* %temp) #4 !dbg !9485 {
entry:
  %retval = alloca %struct._IO_FILE*, align 8
  %temp.addr = alloca %struct.tempnode*, align 8
  %tempfd = alloca i32, align 4, !ctir !5
  %pipefds = alloca [2 x i32], align 4, !ctir !585
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !389
  %child = alloca i32, align 4, !ctir !413
  %saved_errno = alloca i32, align 4, !ctir !5
  store %struct.tempnode* %temp, %struct.tempnode** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tempnode** %temp.addr, metadata !9488, metadata !DIExpression()), !dbg !9489
  call void @llvm.dbg.declare(metadata i32* %tempfd, metadata !9490, metadata !DIExpression()), !dbg !9491
  call void @llvm.dbg.declare(metadata [2 x i32]* %pipefds, metadata !9492, metadata !DIExpression()), !dbg !9493
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !9494, metadata !DIExpression()), !dbg !9495
  store %struct._IO_FILE* null, %struct._IO_FILE** %fp, align 8, !dbg !9495
  %0 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !9496
  %state = getelementptr inbounds %struct.tempnode, %struct.tempnode* %0, i32 0, i32 2, !dbg !9498, !ctir !408
  %1 = load i8, i8* %state, align 4, !dbg !9498, !ctir !8
  %conv = sext i8 %1 to i32, !dbg !9496
  %cmp = icmp eq i32 %conv, 1, !dbg !9499
  br i1 %cmp, label %if.then, label %if.end, !dbg !9500

if.then:                                          ; preds = %entry
  %2 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !9501
  %pid = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 1, !dbg !9502, !ctir !408
  %3 = load i32, i32* %pid, align 8, !dbg !9502, !ctir !413
  call void @wait_proc(i32 %3), !dbg !9503
  br label %if.end, !dbg !9503

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !9504
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %4, i32 0, i32 3, !dbg !9505, !ctir !408
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !9504, !ctir !417
  %call = call i32 (i8*, i32, ...) @open(i8* %arraydecay, i32 0), !dbg !9506
  store i32 %call, i32* %tempfd, align 4, !dbg !9507
  %5 = load i32, i32* %tempfd, align 4, !dbg !9508
  %cmp2 = icmp slt i32 %5, 0, !dbg !9510
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !9511

if.then4:                                         ; preds = %if.end
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8, !dbg !9512
  br label %return, !dbg !9512

if.end5:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %child, metadata !9513, metadata !DIExpression()), !dbg !9514
  %arraydecay6 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !9515, !ctir !585
  %call7 = call i32 @pipe_fork(i32* %arraydecay6, i64 9), !dbg !9516
  store i32 %call7, i32* %child, align 4, !dbg !9514
  %6 = load i32, i32* %child, align 4, !dbg !9517
  switch i32 %6, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb18
  ], !dbg !9518

sw.bb:                                            ; preds = %if.end5
  %call8 = call i32* @__errno_location() #16, !dbg !9519
  %7 = load i32, i32* %call8, align 4, !dbg !9519, !ctir !5
  %cmp9 = icmp ne i32 %7, 24, !dbg !9522
  br i1 %cmp9, label %if.then11, label %if.end15, !dbg !9523

if.then11:                                        ; preds = %sw.bb
  %call12 = call i32* @__errno_location() #16, !dbg !9524
  %8 = load i32, i32* %call12, align 4, !dbg !9524, !ctir !5
  %call13 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.168, i64 0, i64 0)) #12, !dbg !9524
  %9 = load i8*, i8** @compress_program, align 8, !dbg !9524
  %call14 = call i8* @quotearg_style(i32 4, i8* %9), !dbg !9524
  call void (i32, i32, i8*, ...) @error(i32 2, i32 %8, i8* %call13, i8* %call14), !dbg !9524
  unreachable, !dbg !9524

if.end15:                                         ; preds = %sw.bb
  %10 = load i32, i32* %tempfd, align 4, !dbg !9525
  %call16 = call i32 @close(i32 %10), !dbg !9526
  %call17 = call i32* @__errno_location() #16, !dbg !9527
  store i32 24, i32* %call17, align 4, !dbg !9528, !ctir !5
  br label %sw.epilog, !dbg !9529

sw.bb18:                                          ; preds = %if.end5
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !9530, !ctir !585
  %11 = load i32, i32* %arrayidx, align 4, !dbg !9530
  %call19 = call i32 @close(i32 %11), !dbg !9531
  %12 = load i32, i32* %tempfd, align 4, !dbg !9532
  call void @move_fd(i32 %12, i32 0), !dbg !9533
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1, !dbg !9534, !ctir !585
  %13 = load i32, i32* %arrayidx20, align 4, !dbg !9534
  call void @move_fd(i32 %13, i32 1), !dbg !9535
  %14 = load i8*, i8** @compress_program, align 8, !dbg !9536
  %15 = load i8*, i8** @compress_program, align 8, !dbg !9537
  %call21 = call i32 (i8*, i8*, ...) @execlp(i8* %14, i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.169, i64 0, i64 0), i8* null) #12, !dbg !9538
  %call22 = call i32* @__errno_location() #16, !dbg !9539
  %16 = load i32, i32* %call22, align 4, !dbg !9539, !ctir !5
  call void @async_safe_die(i32 %16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.170, i64 0, i64 0)) #15, !dbg !9540
  unreachable, !dbg !9540

sw.default:                                       ; preds = %if.end5
  %17 = load i32, i32* %child, align 4, !dbg !9541
  %18 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !9542
  %pid23 = getelementptr inbounds %struct.tempnode, %struct.tempnode* %18, i32 0, i32 1, !dbg !9543, !ctir !408
  store i32 %17, i32* %pid23, align 8, !dbg !9544, !ctir !413
  %19 = load %struct.tempnode*, %struct.tempnode** %temp.addr, align 8, !dbg !9545
  call void @register_proc(%struct.tempnode* %19), !dbg !9546
  %20 = load i32, i32* %tempfd, align 4, !dbg !9547
  %call24 = call i32 @close(i32 %20), !dbg !9548
  %arrayidx25 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 1, !dbg !9549, !ctir !585
  %21 = load i32, i32* %arrayidx25, align 4, !dbg !9549
  %call26 = call i32 @close(i32 %21), !dbg !9550
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !9551, !ctir !585
  %22 = load i32, i32* %arrayidx27, align 4, !dbg !9551
  %call28 = call %struct._IO_FILE* @fdopen(i32 %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)) #12, !dbg !9552
  store %struct._IO_FILE* %call28, %struct._IO_FILE** %fp, align 8, !dbg !9553
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !9554
  %tobool = icmp ne %struct._IO_FILE* %23, null, !dbg !9554
  br i1 %tobool, label %if.end34, label %if.then29, !dbg !9556

if.then29:                                        ; preds = %sw.default
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !9557, metadata !DIExpression()), !dbg !9559
  %call30 = call i32* @__errno_location() #16, !dbg !9560
  %24 = load i32, i32* %call30, align 4, !dbg !9560, !ctir !5
  store i32 %24, i32* %saved_errno, align 4, !dbg !9559
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %pipefds, i64 0, i64 0, !dbg !9561, !ctir !585
  %25 = load i32, i32* %arrayidx31, align 4, !dbg !9561
  %call32 = call i32 @close(i32 %25), !dbg !9562
  %26 = load i32, i32* %saved_errno, align 4, !dbg !9563
  %call33 = call i32* @__errno_location() #16, !dbg !9564
  store i32 %26, i32* %call33, align 4, !dbg !9565, !ctir !5
  br label %if.end34, !dbg !9566

if.end34:                                         ; preds = %if.then29, %sw.default
  br label %sw.epilog, !dbg !9567

sw.epilog:                                        ; preds = %if.end34, %if.end15
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !9568
  store %struct._IO_FILE* %27, %struct._IO_FILE** %retval, align 8, !dbg !9569
  br label %return, !dbg !9569

return:                                           ; preds = %sw.epilog, %if.then4
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %retval, align 8, !dbg !9570
  ret %struct._IO_FILE* %28, !dbg !9570
}

; Function Attrs: nounwind
declare dso_local i32 @euidaccess(i8*, i32) #2

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @key_to_opts(%struct.keyfield* %key, i8* %opts) #4 !dbg !9571 {
entry:
  %key.addr = alloca %struct.keyfield*, align 8
  %opts.addr = alloca i8*, align 8
  store %struct.keyfield* %key, %struct.keyfield** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.keyfield** %key.addr, metadata !9574, metadata !DIExpression()), !dbg !9575
  store i8* %opts, i8** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opts.addr, metadata !9576, metadata !DIExpression()), !dbg !9577
  %0 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9578
  %skipsblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %0, i32 0, i32 6, !dbg !9580, !ctir !523
  %1 = load i8, i8* %skipsblanks, align 8, !dbg !9580
  %tobool = trunc i8 %1 to i1, !dbg !9580, !ctir !162
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !9581

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9582
  %skipeblanks = getelementptr inbounds %struct.keyfield, %struct.keyfield* %2, i32 0, i32 7, !dbg !9583, !ctir !523
  %3 = load i8, i8* %skipeblanks, align 1, !dbg !9583
  %tobool1 = trunc i8 %3 to i1, !dbg !9583, !ctir !162
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9584

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %opts.addr, align 8, !dbg !9585
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !9585, !ctir !8
  store i8* %incdec.ptr, i8** %opts.addr, align 8, !dbg !9585
  store i8 98, i8* %4, align 1, !dbg !9586, !ctir !8
  br label %if.end, !dbg !9587

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %5 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9588
  %ignore = getelementptr inbounds %struct.keyfield, %struct.keyfield* %5, i32 0, i32 4, !dbg !9590, !ctir !523
  %6 = load i8*, i8** %ignore, align 8, !dbg !9590, !ctir !160
  %cmp = icmp eq i8* %6, getelementptr inbounds ([256 x i8], [256 x i8]* @nondictionary, i64 0, i64 0), !dbg !9591
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !9592

if.then2:                                         ; preds = %if.end
  %7 = load i8*, i8** %opts.addr, align 8, !dbg !9593
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !9593, !ctir !8
  store i8* %incdec.ptr3, i8** %opts.addr, align 8, !dbg !9593
  store i8 100, i8* %7, align 1, !dbg !9594, !ctir !8
  br label %if.end4, !dbg !9595

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9596
  %translate = getelementptr inbounds %struct.keyfield, %struct.keyfield* %8, i32 0, i32 5, !dbg !9598, !ctir !523
  %9 = load i8*, i8** %translate, align 8, !dbg !9598, !ctir !90
  %tobool5 = icmp ne i8* %9, null, !dbg !9596
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !9599

if.then6:                                         ; preds = %if.end4
  %10 = load i8*, i8** %opts.addr, align 8, !dbg !9600
  %incdec.ptr7 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !9600, !ctir !8
  store i8* %incdec.ptr7, i8** %opts.addr, align 8, !dbg !9600
  store i8 102, i8* %10, align 1, !dbg !9601, !ctir !8
  br label %if.end8, !dbg !9602

if.end8:                                          ; preds = %if.then6, %if.end4
  %11 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9603
  %general_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %11, i32 0, i32 10, !dbg !9605, !ctir !523
  %12 = load i8, i8* %general_numeric, align 4, !dbg !9605
  %tobool9 = trunc i8 %12 to i1, !dbg !9605, !ctir !162
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !9606

if.then10:                                        ; preds = %if.end8
  %13 = load i8*, i8** %opts.addr, align 8, !dbg !9607
  %incdec.ptr11 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !9607, !ctir !8
  store i8* %incdec.ptr11, i8** %opts.addr, align 8, !dbg !9607
  store i8 103, i8* %13, align 1, !dbg !9608, !ctir !8
  br label %if.end12, !dbg !9609

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9610
  %human_numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %14, i32 0, i32 11, !dbg !9612, !ctir !523
  %15 = load i8, i8* %human_numeric, align 1, !dbg !9612
  %tobool13 = trunc i8 %15 to i1, !dbg !9612, !ctir !162
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !9613

if.then14:                                        ; preds = %if.end12
  %16 = load i8*, i8** %opts.addr, align 8, !dbg !9614
  %incdec.ptr15 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !9614, !ctir !8
  store i8* %incdec.ptr15, i8** %opts.addr, align 8, !dbg !9614
  store i8 104, i8* %16, align 1, !dbg !9615, !ctir !8
  br label %if.end16, !dbg !9616

if.end16:                                         ; preds = %if.then14, %if.end12
  %17 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9617
  %ignore17 = getelementptr inbounds %struct.keyfield, %struct.keyfield* %17, i32 0, i32 4, !dbg !9619, !ctir !523
  %18 = load i8*, i8** %ignore17, align 8, !dbg !9619, !ctir !160
  %cmp18 = icmp eq i8* %18, getelementptr inbounds ([256 x i8], [256 x i8]* @nonprinting, i64 0, i64 0), !dbg !9620
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !9621

if.then19:                                        ; preds = %if.end16
  %19 = load i8*, i8** %opts.addr, align 8, !dbg !9622
  %incdec.ptr20 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !9622, !ctir !8
  store i8* %incdec.ptr20, i8** %opts.addr, align 8, !dbg !9622
  store i8 105, i8* %19, align 1, !dbg !9623, !ctir !8
  br label %if.end21, !dbg !9624

if.end21:                                         ; preds = %if.then19, %if.end16
  %20 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9625
  %month = getelementptr inbounds %struct.keyfield, %struct.keyfield* %20, i32 0, i32 12, !dbg !9627, !ctir !523
  %21 = load i8, i8* %month, align 2, !dbg !9627
  %tobool22 = trunc i8 %21 to i1, !dbg !9627, !ctir !162
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !9628

if.then23:                                        ; preds = %if.end21
  %22 = load i8*, i8** %opts.addr, align 8, !dbg !9629
  %incdec.ptr24 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !9629, !ctir !8
  store i8* %incdec.ptr24, i8** %opts.addr, align 8, !dbg !9629
  store i8 77, i8* %22, align 1, !dbg !9630, !ctir !8
  br label %if.end25, !dbg !9631

if.end25:                                         ; preds = %if.then23, %if.end21
  %23 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9632
  %numeric = getelementptr inbounds %struct.keyfield, %struct.keyfield* %23, i32 0, i32 8, !dbg !9634, !ctir !523
  %24 = load i8, i8* %numeric, align 2, !dbg !9634
  %tobool26 = trunc i8 %24 to i1, !dbg !9634, !ctir !162
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !9635

if.then27:                                        ; preds = %if.end25
  %25 = load i8*, i8** %opts.addr, align 8, !dbg !9636
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !9636, !ctir !8
  store i8* %incdec.ptr28, i8** %opts.addr, align 8, !dbg !9636
  store i8 110, i8* %25, align 1, !dbg !9637, !ctir !8
  br label %if.end29, !dbg !9638

if.end29:                                         ; preds = %if.then27, %if.end25
  %26 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9639
  %random = getelementptr inbounds %struct.keyfield, %struct.keyfield* %26, i32 0, i32 9, !dbg !9641, !ctir !523
  %27 = load i8, i8* %random, align 1, !dbg !9641
  %tobool30 = trunc i8 %27 to i1, !dbg !9641, !ctir !162
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !9642

if.then31:                                        ; preds = %if.end29
  %28 = load i8*, i8** %opts.addr, align 8, !dbg !9643
  %incdec.ptr32 = getelementptr inbounds i8, i8* %28, i32 1, !dbg !9643, !ctir !8
  store i8* %incdec.ptr32, i8** %opts.addr, align 8, !dbg !9643
  store i8 82, i8* %28, align 1, !dbg !9644, !ctir !8
  br label %if.end33, !dbg !9645

if.end33:                                         ; preds = %if.then31, %if.end29
  %29 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9646
  %reverse = getelementptr inbounds %struct.keyfield, %struct.keyfield* %29, i32 0, i32 13, !dbg !9648, !ctir !523
  %30 = load i8, i8* %reverse, align 1, !dbg !9648
  %tobool34 = trunc i8 %30 to i1, !dbg !9648, !ctir !162
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !9649

if.then35:                                        ; preds = %if.end33
  %31 = load i8*, i8** %opts.addr, align 8, !dbg !9650
  %incdec.ptr36 = getelementptr inbounds i8, i8* %31, i32 1, !dbg !9650, !ctir !8
  store i8* %incdec.ptr36, i8** %opts.addr, align 8, !dbg !9650
  store i8 114, i8* %31, align 1, !dbg !9651, !ctir !8
  br label %if.end37, !dbg !9652

if.end37:                                         ; preds = %if.then35, %if.end33
  %32 = load %struct.keyfield*, %struct.keyfield** %key.addr, align 8, !dbg !9653
  %version = getelementptr inbounds %struct.keyfield, %struct.keyfield* %32, i32 0, i32 14, !dbg !9655, !ctir !523
  %33 = load i8, i8* %version, align 8, !dbg !9655
  %tobool38 = trunc i8 %33 to i1, !dbg !9655, !ctir !162
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !9656

if.then39:                                        ; preds = %if.end37
  %34 = load i8*, i8** %opts.addr, align 8, !dbg !9657
  %incdec.ptr40 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !9657, !ctir !8
  store i8* %incdec.ptr40, i8** %opts.addr, align 8, !dbg !9657
  store i8 86, i8* %34, align 1, !dbg !9658, !ctir !8
  br label %if.end41, !dbg !9659

if.end41:                                         ; preds = %if.then39, %if.end37
  %35 = load i8*, i8** %opts.addr, align 8, !dbg !9660
  store i8 0, i8* %35, align 1, !dbg !9661, !ctir !8
  ret void, !dbg !9662
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @select_plural(i64 %n) #4 !dbg !9663 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !9666, metadata !DIExpression()), !dbg !9667
  %0 = load i64, i64* %n.addr, align 8, !dbg !9668
  %cmp = icmp ule i64 %0, -1, !dbg !9669
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9668

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !9670
  br label %cond.end, !dbg !9668

cond.false:                                       ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !9671
  %rem = urem i64 %2, 1000000, !dbg !9672
  %add = add i64 %rem, 1000000, !dbg !9673
  br label %cond.end, !dbg !9668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %1, %cond.true ], [ %add, %cond.false ], !dbg !9668
  ret i64 %cond, !dbg !9674
}

; Function Attrs: nounwind
declare dso_local i8* @ngettext(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local void @clearerr_unlocked(%struct._IO_FILE*) #2

declare dso_local i32 @fflush_unlocked(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cleanup() #4 !dbg !9675 {
entry:
  %node = alloca %struct.tempnode*, align 8, !ctir !461
  call void @llvm.dbg.declare(metadata %struct.tempnode** %node, metadata !9676, metadata !DIExpression()), !dbg !9677
  %0 = load volatile %struct.tempnode*, %struct.tempnode** @temphead, align 8, !dbg !9678
  store %struct.tempnode* %0, %struct.tempnode** %node, align 8, !dbg !9680
  br label %for.cond, !dbg !9681

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9682
  %tobool = icmp ne %struct.tempnode* %1, null, !dbg !9684
  br i1 %tobool, label %for.body, label %for.end, !dbg !9684

for.body:                                         ; preds = %for.cond
  %2 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9685
  %name = getelementptr inbounds %struct.tempnode, %struct.tempnode* %2, i32 0, i32 3, !dbg !9686, !ctir !462
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %name, i64 0, i64 0, !dbg !9685, !ctir !463
  %call = call i32 @unlink(i8* %arraydecay) #12, !dbg !9687
  br label %for.inc, !dbg !9687

for.inc:                                          ; preds = %for.body
  %3 = load %struct.tempnode*, %struct.tempnode** %node, align 8, !dbg !9688
  %next = getelementptr inbounds %struct.tempnode, %struct.tempnode* %3, i32 0, i32 0, !dbg !9689, !ctir !462
  %4 = load volatile %struct.tempnode*, %struct.tempnode** %next, align 8, !dbg !9689, !ctir !411
  store %struct.tempnode* %4, %struct.tempnode** %node, align 8, !dbg !9690
  br label %for.cond, !dbg !9691, !llvm.loop !9692

for.end:                                          ; preds = %for.cond
  store volatile %struct.tempnode* null, %struct.tempnode** @temphead, align 8, !dbg !9694
  ret void, !dbg !9695
}

; Function Attrs: nounwind
declare dso_local i32 @raise(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @field_sep(i8 zeroext %ch) #4 !dbg !9696 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !9699, metadata !DIExpression()), !dbg !9700
  %call = call i16** @__ctype_b_loc() #16, !dbg !9701
  %0 = load i16*, i16** %call, align 8, !dbg !9701, !ctir !451
  %1 = load i8, i8* %ch.addr, align 1, !dbg !9701
  %conv = zext i8 %1 to i32, !dbg !9701
  %idxprom = sext i32 %conv to i64, !dbg !9701
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom, !dbg !9701, !ctir !451
  %2 = load i16, i16* %arrayidx, align 2, !dbg !9701
  %conv1 = zext i16 %2 to i32, !dbg !9701
  %and = and i32 %conv1, 1, !dbg !9701
  %tobool = icmp ne i32 %and, 0, !dbg !9701
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !9702

lor.rhs:                                          ; preds = %entry
  %3 = load i8, i8* %ch.addr, align 1, !dbg !9703
  %conv2 = zext i8 %3 to i32, !dbg !9703
  %cmp = icmp eq i32 %conv2, 10, !dbg !9704
  br label %lor.end, !dbg !9702

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  ret i1 %4, !dbg !9705
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @struct_month_cmp(i8* %m1, i8* %m2) #4 !dbg !9706 {
entry:
  %m1.addr = alloca i8*, align 8
  %m2.addr = alloca i8*, align 8
  %month1 = alloca %struct.month*, align 8, !ctir !459
  %month2 = alloca %struct.month*, align 8, !ctir !459
  store i8* %m1, i8** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %m1.addr, metadata !9707, metadata !DIExpression()), !dbg !9708
  store i8* %m2, i8** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %m2.addr, metadata !9709, metadata !DIExpression()), !dbg !9710
  call void @llvm.dbg.declare(metadata %struct.month** %month1, metadata !9711, metadata !DIExpression()), !dbg !9712
  %0 = load i8*, i8** %m1.addr, align 8, !dbg !9713
  %1 = bitcast i8* %0 to %struct.month*, !dbg !9713
  store %struct.month* %1, %struct.month** %month1, align 8, !dbg !9712
  call void @llvm.dbg.declare(metadata %struct.month** %month2, metadata !9714, metadata !DIExpression()), !dbg !9715
  %2 = load i8*, i8** %m2.addr, align 8, !dbg !9716
  %3 = bitcast i8* %2 to %struct.month*, !dbg !9716
  store %struct.month* %3, %struct.month** %month2, align 8, !dbg !9715
  %4 = load %struct.month*, %struct.month** %month1, align 8, !dbg !9717
  %name = getelementptr inbounds %struct.month, %struct.month* %4, i32 0, i32 0, !dbg !9718, !ctir !460
  %5 = load i8*, i8** %name, align 8, !dbg !9718, !ctir !90
  %6 = load %struct.month*, %struct.month** %month2, align 8, !dbg !9719
  %name1 = getelementptr inbounds %struct.month, %struct.month* %6, i32 0, i32 0, !dbg !9720, !ctir !460
  %7 = load i8*, i8** %name1, align 8, !dbg !9720, !ctir !90
  %call = call i32 @strcmp(i8* %5, i8* %7) #14, !dbg !9721
  ret i32 %call, !dbg !9722
}

declare dso_local void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__argmatch_die() #4 !dbg !9723 {
entry:
  call void @usage(i32 1), !dbg !9724
  ret void, !dbg !9725
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @argmatch(i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize) #9 !dbg !9726 {
entry:
  %retval = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !52
  %arglen = alloca i64, align 8, !ctir !52
  %matchind = alloca i64, align 8, !ctir !823
  %ambiguous = alloca i8, align 1, !ctir !162
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !9729, metadata !DIExpression()), !dbg !9730
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9731, metadata !DIExpression()), !dbg !9732
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9733, metadata !DIExpression()), !dbg !9734
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9735, metadata !DIExpression()), !dbg !9736
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9737, metadata !DIExpression()), !dbg !9738
  call void @llvm.dbg.declare(metadata i64* %arglen, metadata !9739, metadata !DIExpression()), !dbg !9740
  call void @llvm.dbg.declare(metadata i64* %matchind, metadata !9741, metadata !DIExpression()), !dbg !9742
  store i64 -1, i64* %matchind, align 8, !dbg !9742
  call void @llvm.dbg.declare(metadata i8* %ambiguous, metadata !9743, metadata !DIExpression()), !dbg !9744
  store i8 0, i8* %ambiguous, align 1, !dbg !9744
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !9745
  %call = call i64 @strlen(i8* %0) #14, !dbg !9746
  store i64 %call, i64* %arglen, align 8, !dbg !9747
  store i64 0, i64* %i, align 8, !dbg !9748
  br label %for.cond, !dbg !9750

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9751
  %2 = load i64, i64* %i, align 8, !dbg !9753
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2, !dbg !9751, !ctir !824
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !9751
  %tobool = icmp ne i8* %3, null, !dbg !9754
  br i1 %tobool, label %for.body, label %for.end, !dbg !9754

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %arglist.addr, align 8, !dbg !9755
  %5 = load i64, i64* %i, align 8, !dbg !9758
  %arrayidx1 = getelementptr inbounds i8*, i8** %4, i64 %5, !dbg !9755, !ctir !824
  %6 = load i8*, i8** %arrayidx1, align 8, !dbg !9755
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !9759
  %8 = load i64, i64* %arglen, align 8, !dbg !9760
  %call2 = call i32 @strncmp(i8* %6, i8* %7, i64 %8) #14, !dbg !9761
  %tobool3 = icmp ne i32 %call2, 0, !dbg !9761
  br i1 %tobool3, label %if.end18, label %if.then, !dbg !9762

if.then:                                          ; preds = %for.body
  %9 = load i8**, i8*** %arglist.addr, align 8, !dbg !9763
  %10 = load i64, i64* %i, align 8, !dbg !9766
  %arrayidx4 = getelementptr inbounds i8*, i8** %9, i64 %10, !dbg !9763, !ctir !824
  %11 = load i8*, i8** %arrayidx4, align 8, !dbg !9763
  %call5 = call i64 @strlen(i8* %11) #14, !dbg !9767
  %12 = load i64, i64* %arglen, align 8, !dbg !9768
  %cmp = icmp eq i64 %call5, %12, !dbg !9769
  br i1 %cmp, label %if.then6, label %if.else, !dbg !9770

if.then6:                                         ; preds = %if.then
  %13 = load i64, i64* %i, align 8, !dbg !9771
  store i64 %13, i64* %retval, align 8, !dbg !9772
  br label %return, !dbg !9772

if.else:                                          ; preds = %if.then
  %14 = load i64, i64* %matchind, align 8, !dbg !9773
  %cmp7 = icmp eq i64 %14, -1, !dbg !9775
  br i1 %cmp7, label %if.then8, label %if.else9, !dbg !9776

if.then8:                                         ; preds = %if.else
  %15 = load i64, i64* %i, align 8, !dbg !9777
  store i64 %15, i64* %matchind, align 8, !dbg !9778
  br label %if.end16, !dbg !9779

if.else9:                                         ; preds = %if.else
  %16 = load i8*, i8** %vallist.addr, align 8, !dbg !9780
  %cmp10 = icmp eq i8* %16, null, !dbg !9783
  br i1 %cmp10, label %if.then15, label %lor.lhs.false, !dbg !9784

lor.lhs.false:                                    ; preds = %if.else9
  %17 = load i8*, i8** %vallist.addr, align 8, !dbg !9785
  %18 = load i64, i64* %valsize.addr, align 8, !dbg !9786
  %19 = load i64, i64* %matchind, align 8, !dbg !9787
  %mul = mul i64 %18, %19, !dbg !9788
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %mul, !dbg !9789, !ctir !91
  %20 = load i8*, i8** %vallist.addr, align 8, !dbg !9790
  %21 = load i64, i64* %valsize.addr, align 8, !dbg !9791
  %22 = load i64, i64* %i, align 8, !dbg !9792
  %mul11 = mul i64 %21, %22, !dbg !9793
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %mul11, !dbg !9794, !ctir !91
  %23 = load i64, i64* %valsize.addr, align 8, !dbg !9795
  %call13 = call i32 @memcmp(i8* %add.ptr, i8* %add.ptr12, i64 %23) #14, !dbg !9796
  %tobool14 = icmp ne i32 %call13, 0, !dbg !9796
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !9797

if.then15:                                        ; preds = %lor.lhs.false, %if.else9
  store i8 1, i8* %ambiguous, align 1, !dbg !9798
  br label %if.end, !dbg !9800

if.end:                                           ; preds = %if.then15, %lor.lhs.false
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then8
  br label %if.end17

if.end17:                                         ; preds = %if.end16
  br label %if.end18, !dbg !9801

if.end18:                                         ; preds = %if.end17, %for.body
  br label %for.inc, !dbg !9802

for.inc:                                          ; preds = %if.end18
  %24 = load i64, i64* %i, align 8, !dbg !9803
  %inc = add i64 %24, 1, !dbg !9803
  store i64 %inc, i64* %i, align 8, !dbg !9803
  br label %for.cond, !dbg !9804, !llvm.loop !9805

for.end:                                          ; preds = %for.cond
  %25 = load i8, i8* %ambiguous, align 1, !dbg !9807
  %tobool19 = trunc i8 %25 to i1, !dbg !9807
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !9809

if.then20:                                        ; preds = %for.end
  store i64 -2, i64* %retval, align 8, !dbg !9810
  br label %return, !dbg !9810

if.else21:                                        ; preds = %for.end
  %26 = load i64, i64* %matchind, align 8, !dbg !9811
  store i64 %26, i64* %retval, align 8, !dbg !9812
  br label %return, !dbg !9812

return:                                           ; preds = %if.else21, %if.then20, %if.then6
  %27 = load i64, i64* %retval, align 8, !dbg !9813
  ret i64 %27, !dbg !9813
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @argmatch_invalid(i8* %context, i8* %value, i64 %problem) #4 !dbg !9814 {
entry:
  %context.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %problem.addr = alloca i64, align 8
  %format = alloca i8*, align 8, !ctir !90
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !9817, metadata !DIExpression()), !dbg !9818
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !9819, metadata !DIExpression()), !dbg !9820
  store i64 %problem, i64* %problem.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %problem.addr, metadata !9821, metadata !DIExpression()), !dbg !9822
  call void @llvm.dbg.declare(metadata i8** %format, metadata !9823, metadata !DIExpression()), !dbg !9824
  %0 = load i64, i64* %problem.addr, align 8, !dbg !9825
  %cmp = icmp eq i64 %0, -1, !dbg !9826
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9825

cond.true:                                        ; preds = %entry
  %call = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.160, i64 0, i64 0)) #12, !dbg !9827
  br label %cond.end, !dbg !9825

cond.false:                                       ; preds = %entry
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.161, i64 0, i64 0)) #12, !dbg !9828
  br label %cond.end, !dbg !9825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %call1, %cond.false ], !dbg !9825
  store i8* %cond, i8** %format, align 8, !dbg !9824
  %1 = load i8*, i8** %format, align 8, !dbg !9829
  %2 = load i8*, i8** %value.addr, align 8, !dbg !9830
  %call2 = call i8* @quotearg_n_style(i32 0, i32 8, i8* %2), !dbg !9831
  %3 = load i8*, i8** %context.addr, align 8, !dbg !9832
  %call3 = call i8* @quote_n(i32 1, i8* %3), !dbg !9833
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %1, i8* %call2, i8* %call3), !dbg !9834
  ret void, !dbg !9835
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @argmatch_valid(i8** %arglist, i8* %vallist, i64 %valsize) #4 !dbg !9836 {
entry:
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !52
  %last_val = alloca i8*, align 8, !ctir !90
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9839, metadata !DIExpression()), !dbg !9840
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9841, metadata !DIExpression()), !dbg !9842
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9843, metadata !DIExpression()), !dbg !9844
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9845, metadata !DIExpression()), !dbg !9846
  call void @llvm.dbg.declare(metadata i8** %last_val, metadata !9847, metadata !DIExpression()), !dbg !9848
  store i8* null, i8** %last_val, align 8, !dbg !9848
  %call = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.162, i64 0, i64 0)) #12, !dbg !9849
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9849
  %call1 = call i32 @fputs_unlocked(i8* %call, %struct._IO_FILE* %0), !dbg !9849
  store i64 0, i64* %i, align 8, !dbg !9850
  br label %for.cond, !dbg !9852

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9853
  %2 = load i64, i64* %i, align 8, !dbg !9855
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2, !dbg !9853, !ctir !824
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !9853
  %tobool = icmp ne i8* %3, null, !dbg !9856
  br i1 %tobool, label %for.body, label %for.end, !dbg !9856

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8, !dbg !9857
  %cmp = icmp eq i64 %4, 0, !dbg !9859
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9860

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i8*, i8** %last_val, align 8, !dbg !9861
  %6 = load i8*, i8** %vallist.addr, align 8, !dbg !9862
  %7 = load i64, i64* %valsize.addr, align 8, !dbg !9863
  %8 = load i64, i64* %i, align 8, !dbg !9864
  %mul = mul i64 %7, %8, !dbg !9865
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %mul, !dbg !9866, !ctir !91
  %9 = load i64, i64* %valsize.addr, align 8, !dbg !9867
  %call2 = call i32 @memcmp(i8* %5, i8* %add.ptr, i64 %9) #14, !dbg !9868
  %tobool3 = icmp ne i32 %call2, 0, !dbg !9868
  br i1 %tobool3, label %if.then, label %if.else, !dbg !9869

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9870
  %11 = load i8**, i8*** %arglist.addr, align 8, !dbg !9872
  %12 = load i64, i64* %i, align 8, !dbg !9873
  %arrayidx4 = getelementptr inbounds i8*, i8** %11, i64 %12, !dbg !9872, !ctir !824
  %13 = load i8*, i8** %arrayidx4, align 8, !dbg !9872
  %call5 = call i8* @quote(i8* %13), !dbg !9874
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.163, i64 0, i64 0), i8* %call5), !dbg !9875
  %14 = load i8*, i8** %vallist.addr, align 8, !dbg !9876
  %15 = load i64, i64* %valsize.addr, align 8, !dbg !9877
  %16 = load i64, i64* %i, align 8, !dbg !9878
  %mul7 = mul i64 %15, %16, !dbg !9879
  %add.ptr8 = getelementptr inbounds i8, i8* %14, i64 %mul7, !dbg !9880, !ctir !91
  store i8* %add.ptr8, i8** %last_val, align 8, !dbg !9881
  br label %if.end, !dbg !9882

if.else:                                          ; preds = %lor.lhs.false
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9883
  %18 = load i8**, i8*** %arglist.addr, align 8, !dbg !9885
  %19 = load i64, i64* %i, align 8, !dbg !9886
  %arrayidx9 = getelementptr inbounds i8*, i8** %18, i64 %19, !dbg !9885, !ctir !824
  %20 = load i8*, i8** %arrayidx9, align 8, !dbg !9885
  %call10 = call i8* @quote(i8* %20), !dbg !9887
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.164, i64 0, i64 0), i8* %call10), !dbg !9888
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !9889

for.inc:                                          ; preds = %if.end
  %21 = load i64, i64* %i, align 8, !dbg !9890
  %inc = add i64 %21, 1, !dbg !9890
  store i64 %inc, i64* %i, align 8, !dbg !9890
  br label %for.cond, !dbg !9891, !llvm.loop !9892

for.end:                                          ; preds = %for.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9894
  %call12 = call i32 @putc_unlocked(i32 10, %struct._IO_FILE* %22), !dbg !9894
  ret void, !dbg !9895
}

declare dso_local i32 @putc_unlocked(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @__xargmatch_internal(i8* %context, i8* %arg, i8** %arglist, i8* %vallist, i64 %valsize, void ()* %exit_fn) #4 !dbg !9896 {
entry:
  %retval = alloca i64, align 8
  %context.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %exit_fn.addr = alloca void ()*, align 8
  %res = alloca i64, align 8, !ctir !823
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !9899, metadata !DIExpression()), !dbg !9900
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !9901, metadata !DIExpression()), !dbg !9902
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9903, metadata !DIExpression()), !dbg !9904
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9905, metadata !DIExpression()), !dbg !9906
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9907, metadata !DIExpression()), !dbg !9908
  store void ()* %exit_fn, void ()** %exit_fn.addr, align 8
  call void @llvm.dbg.declare(metadata void ()** %exit_fn.addr, metadata !9909, metadata !DIExpression()), !dbg !9910
  call void @llvm.dbg.declare(metadata i64* %res, metadata !9911, metadata !DIExpression()), !dbg !9912
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !9913
  %1 = load i8**, i8*** %arglist.addr, align 8, !dbg !9914
  %2 = load i8*, i8** %vallist.addr, align 8, !dbg !9915
  %3 = load i64, i64* %valsize.addr, align 8, !dbg !9916
  %call = call i64 @argmatch(i8* %0, i8** %1, i8* %2, i64 %3) #14, !dbg !9917
  store i64 %call, i64* %res, align 8, !dbg !9912
  %4 = load i64, i64* %res, align 8, !dbg !9918
  %cmp = icmp sge i64 %4, 0, !dbg !9920
  br i1 %cmp, label %if.then, label %if.end, !dbg !9921

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %res, align 8, !dbg !9922
  store i64 %5, i64* %retval, align 8, !dbg !9923
  br label %return, !dbg !9923

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %context.addr, align 8, !dbg !9924
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !9925
  %8 = load i64, i64* %res, align 8, !dbg !9926
  call void @argmatch_invalid(i8* %6, i8* %7, i64 %8), !dbg !9927
  %9 = load i8**, i8*** %arglist.addr, align 8, !dbg !9928
  %10 = load i8*, i8** %vallist.addr, align 8, !dbg !9929
  %11 = load i64, i64* %valsize.addr, align 8, !dbg !9930
  call void @argmatch_valid(i8** %9, i8* %10, i64 %11), !dbg !9931
  %12 = load void ()*, void ()** %exit_fn.addr, align 8, !dbg !9932
  call void %12(), !dbg !9933
  store i64 -1, i64* %retval, align 8, !dbg !9934
  br label %return, !dbg !9934

return:                                           ; preds = %if.end, %if.then
  %13 = load i64, i64* %retval, align 8, !dbg !9935
  ret i64 %13, !dbg !9935
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i8* @argmatch_to_argument(i8* %value, i8** %arglist, i8* %vallist, i64 %valsize) #9 !dbg !9936 {
entry:
  %retval = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %arglist.addr = alloca i8**, align 8
  %vallist.addr = alloca i8*, align 8
  %valsize.addr = alloca i64, align 8
  %i = alloca i64, align 8, !ctir !52
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !9939, metadata !DIExpression()), !dbg !9940
  store i8** %arglist, i8*** %arglist.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %arglist.addr, metadata !9941, metadata !DIExpression()), !dbg !9942
  store i8* %vallist, i8** %vallist.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vallist.addr, metadata !9943, metadata !DIExpression()), !dbg !9944
  store i64 %valsize, i64* %valsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %valsize.addr, metadata !9945, metadata !DIExpression()), !dbg !9946
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9947, metadata !DIExpression()), !dbg !9948
  store i64 0, i64* %i, align 8, !dbg !9949
  br label %for.cond, !dbg !9951

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8**, i8*** %arglist.addr, align 8, !dbg !9952
  %1 = load i64, i64* %i, align 8, !dbg !9954
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !9952, !ctir !824
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !9952
  %tobool = icmp ne i8* %2, null, !dbg !9955
  br i1 %tobool, label %for.body, label %for.end, !dbg !9955

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %value.addr, align 8, !dbg !9956
  %4 = load i8*, i8** %vallist.addr, align 8, !dbg !9958
  %5 = load i64, i64* %valsize.addr, align 8, !dbg !9959
  %6 = load i64, i64* %i, align 8, !dbg !9960
  %mul = mul i64 %5, %6, !dbg !9961
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %mul, !dbg !9962, !ctir !91
  %7 = load i64, i64* %valsize.addr, align 8, !dbg !9963
  %call = call i32 @memcmp(i8* %3, i8* %add.ptr, i64 %7) #14, !dbg !9964
  %tobool1 = icmp ne i32 %call, 0, !dbg !9964
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9965

if.then:                                          ; preds = %for.body
  %8 = load i8**, i8*** %arglist.addr, align 8, !dbg !9966
  %9 = load i64, i64* %i, align 8, !dbg !9967
  %arrayidx2 = getelementptr inbounds i8*, i8** %8, i64 %9, !dbg !9966, !ctir !824
  %10 = load i8*, i8** %arrayidx2, align 8, !dbg !9966
  store i8* %10, i8** %retval, align 8, !dbg !9968
  br label %return, !dbg !9968

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9969

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %i, align 8, !dbg !9970
  %inc = add i64 %11, 1, !dbg !9970
  store i64 %inc, i64* %i, align 8, !dbg !9970
  br label %for.cond, !dbg !9971, !llvm.loop !9972

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !9974
  br label %return, !dbg !9974

return:                                           ; preds = %for.end, %if.then
  %12 = load i8*, i8** %retval, align 8, !dbg !9975
  ret i8* %12, !dbg !9975
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_file_name(i8* %file) #4 !dbg !9976 {
entry:
  %file.addr = alloca i8*, align 8
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !9977, metadata !DIExpression()), !dbg !9978
  %0 = load i8*, i8** %file.addr, align 8, !dbg !9979
  store i8* %0, i8** @file_name, align 8, !dbg !9980
  ret void, !dbg !9981
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_ignore_EPIPE(i1 zeroext %ignore) #4 !dbg !9982 {
entry:
  %ignore.addr = alloca i8, align 1
  %frombool = zext i1 %ignore to i8
  store i8 %frombool, i8* %ignore.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ignore.addr, metadata !9985, metadata !DIExpression()), !dbg !9986
  %0 = load i8, i8* %ignore.addr, align 1, !dbg !9987
  %tobool = trunc i8 %0 to i1, !dbg !9987
  %frombool1 = zext i1 %tobool to i8, !dbg !9988
  store i8 %frombool1, i8* @ignore_EPIPE, align 1, !dbg !9988
  ret void, !dbg !9989
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout() #4 !dbg !9990 {
entry:
  %write_error = alloca i8*, align 8, !ctir !90
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !9991
  %call = call i32 @close_stream(%struct._IO_FILE* %0), !dbg !9993
  %cmp = icmp ne i32 %call, 0, !dbg !9994
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !9995

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* @ignore_EPIPE, align 1, !dbg !9996
  %tobool = trunc i8 %1 to i1, !dbg !9996
  br i1 %tobool, label %land.lhs.true1, label %if.then, !dbg !9997

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #16, !dbg !9998
  %2 = load i32, i32* %call2, align 4, !dbg !9998, !ctir !5
  %cmp3 = icmp eq i32 %2, 32, !dbg !9999
  br i1 %cmp3, label %if.end10, label %if.then, !dbg !10000

if.then:                                          ; preds = %land.lhs.true1, %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %write_error, metadata !10001, metadata !DIExpression()), !dbg !10003
  %call4 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.182, i64 0, i64 0)) #12, !dbg !10004
  store i8* %call4, i8** %write_error, align 8, !dbg !10003
  %3 = load i8*, i8** @file_name, align 8, !dbg !10005
  %tobool5 = icmp ne i8* %3, null, !dbg !10005
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !10007

if.then6:                                         ; preds = %if.then
  %call7 = call i32* @__errno_location() #16, !dbg !10008
  %4 = load i32, i32* %call7, align 4, !dbg !10008, !ctir !5
  %5 = load i8*, i8** @file_name, align 8, !dbg !10009
  %call8 = call i8* @quotearg_colon(i8* %5), !dbg !10010
  %6 = load i8*, i8** %write_error, align 8, !dbg !10011
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.183, i64 0, i64 0), i8* %call8, i8* %6), !dbg !10012
  br label %if.end, !dbg !10012

if.else:                                          ; preds = %if.then
  %call9 = call i32* @__errno_location() #16, !dbg !10013
  %7 = load i32, i32* %call9, align 4, !dbg !10013, !ctir !5
  %8 = load i8*, i8** %write_error, align 8, !dbg !10014
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.184, i64 0, i64 0), i8* %8), !dbg !10015
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !10016
  call void @_exit(i32 %9) #15, !dbg !10017
  unreachable, !dbg !10017

if.end10:                                         ; preds = %land.lhs.true1, %entry
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10018
  %call11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !10020
  %cmp12 = icmp ne i32 %call11, 0, !dbg !10021
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !10022

if.then13:                                        ; preds = %if.end10
  %11 = load volatile i32, i32* @exit_failure, align 4, !dbg !10023
  call void @_exit(i32 %11) #15, !dbg !10024
  unreachable, !dbg !10024

if.end14:                                         ; preds = %if.end10
  ret void, !dbg !10025
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md5_init_ctx(%struct.md5_ctx* %ctx) #4 !dbg !10026 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.md5_ctx** %ctx.addr, metadata !10039, metadata !DIExpression()), !dbg !10040
  %0 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10041
  %A = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 0, !dbg !10042, !ctir !10030
  store i32 1732584193, i32* %A, align 4, !dbg !10043, !ctir !560
  %1 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10044
  %B = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %1, i32 0, i32 1, !dbg !10045, !ctir !10030
  store i32 -271733879, i32* %B, align 4, !dbg !10046, !ctir !560
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10047
  %C = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 2, !dbg !10048, !ctir !10030
  store i32 -1732584194, i32* %C, align 4, !dbg !10049, !ctir !560
  %3 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10050
  %D = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %3, i32 0, i32 3, !dbg !10051, !ctir !10030
  store i32 271733878, i32* %D, align 4, !dbg !10052, !ctir !560
  %4 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10053
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %4, i32 0, i32 4, !dbg !10054, !ctir !10030
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 1, !dbg !10053, !ctir !571
  store i32 0, i32* %arrayidx, align 4, !dbg !10055
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10056
  %total1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %5, i32 0, i32 4, !dbg !10057, !ctir !10030
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %total1, i64 0, i64 0, !dbg !10056, !ctir !571
  store i32 0, i32* %arrayidx2, align 4, !dbg !10058
  %6 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10059
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %6, i32 0, i32 5, !dbg !10060, !ctir !10030
  store i32 0, i32* %buflen, align 4, !dbg !10061, !ctir !560
  ret void, !dbg !10062
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @md5_read_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) #4 !dbg !10063 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %resbuf.addr = alloca i8*, align 8
  %r = alloca i8*, align 8, !ctir !7
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.md5_ctx** %ctx.addr, metadata !10068, metadata !DIExpression()), !dbg !10069
  store i8* %resbuf, i8** %resbuf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %resbuf.addr, metadata !10070, metadata !DIExpression()), !dbg !10071
  call void @llvm.dbg.declare(metadata i8** %r, metadata !10072, metadata !DIExpression()), !dbg !10073
  %0 = load i8*, i8** %resbuf.addr, align 8, !dbg !10074
  store i8* %0, i8** %r, align 8, !dbg !10073
  %1 = load i8*, i8** %r, align 8, !dbg !10075
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0, !dbg !10076, !ctir !8
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10077
  %A = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 0, !dbg !10077, !ctir !10067
  %3 = load i32, i32* %A, align 4, !dbg !10077, !ctir !560
  call void @set_uint32(i8* %add.ptr, i32 %3), !dbg !10078
  %4 = load i8*, i8** %r, align 8, !dbg !10079
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 4, !dbg !10080, !ctir !8
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10081
  %B = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %5, i32 0, i32 1, !dbg !10081, !ctir !10067
  %6 = load i32, i32* %B, align 4, !dbg !10081, !ctir !560
  call void @set_uint32(i8* %add.ptr1, i32 %6), !dbg !10082
  %7 = load i8*, i8** %r, align 8, !dbg !10083
  %add.ptr2 = getelementptr inbounds i8, i8* %7, i64 8, !dbg !10084, !ctir !8
  %8 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10085
  %C = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %8, i32 0, i32 2, !dbg !10085, !ctir !10067
  %9 = load i32, i32* %C, align 4, !dbg !10085, !ctir !560
  call void @set_uint32(i8* %add.ptr2, i32 %9), !dbg !10086
  %10 = load i8*, i8** %r, align 8, !dbg !10087
  %add.ptr3 = getelementptr inbounds i8, i8* %10, i64 12, !dbg !10088, !ctir !8
  %11 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10089
  %D = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %11, i32 0, i32 3, !dbg !10089, !ctir !10067
  %12 = load i32, i32* %D, align 4, !dbg !10089, !ctir !560
  call void @set_uint32(i8* %add.ptr3, i32 %12), !dbg !10090
  %13 = load i8*, i8** %resbuf.addr, align 8, !dbg !10091
  ret i8* %13, !dbg !10092
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_uint32(i8* %cp, i32 %v) #4 !dbg !10093 {
entry:
  %cp.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %cp, i8** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cp.addr, metadata !10096, metadata !DIExpression()), !dbg !10097
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !10098, metadata !DIExpression()), !dbg !10099
  %0 = load i8*, i8** %cp.addr, align 8, !dbg !10100
  %1 = bitcast i32* %v.addr to i8*, !dbg !10101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 4 %1, i64 4, i1 false), !dbg !10101
  ret void, !dbg !10102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %resbuf) #4 !dbg !10103 {
entry:
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %resbuf.addr = alloca i8*, align 8
  %bytes = alloca i32, align 4, !ctir !560
  %size = alloca i64, align 8, !ctir !52
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.md5_ctx** %ctx.addr, metadata !10106, metadata !DIExpression()), !dbg !10107
  store i8* %resbuf, i8** %resbuf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %resbuf.addr, metadata !10108, metadata !DIExpression()), !dbg !10109
  call void @llvm.dbg.declare(metadata i32* %bytes, metadata !10110, metadata !DIExpression()), !dbg !10111
  %0 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10112
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 5, !dbg !10113, !ctir !10030
  %1 = load i32, i32* %buflen, align 4, !dbg !10113, !ctir !560
  store i32 %1, i32* %bytes, align 4, !dbg !10111
  call void @llvm.dbg.declare(metadata i64* %size, metadata !10114, metadata !DIExpression()), !dbg !10115
  %2 = load i32, i32* %bytes, align 4, !dbg !10116
  %cmp = icmp ult i32 %2, 56, !dbg !10117
  %3 = zext i1 %cmp to i64, !dbg !10118
  %cond = select i1 %cmp, i32 16, i32 32, !dbg !10118
  %conv = sext i32 %cond to i64, !dbg !10118
  store i64 %conv, i64* %size, align 8, !dbg !10115
  %4 = load i32, i32* %bytes, align 4, !dbg !10119
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10120
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %5, i32 0, i32 4, !dbg !10121, !ctir !10030
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 0, !dbg !10120, !ctir !571
  %6 = load i32, i32* %arrayidx, align 4, !dbg !10122
  %add = add i32 %6, %4, !dbg !10122
  store i32 %add, i32* %arrayidx, align 4, !dbg !10122
  %7 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10123
  %total1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %7, i32 0, i32 4, !dbg !10125, !ctir !10030
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %total1, i64 0, i64 0, !dbg !10123, !ctir !571
  %8 = load i32, i32* %arrayidx2, align 4, !dbg !10123
  %9 = load i32, i32* %bytes, align 4, !dbg !10126
  %cmp3 = icmp ult i32 %8, %9, !dbg !10127
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10128

if.then:                                          ; preds = %entry
  %10 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10129
  %total5 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %10, i32 0, i32 4, !dbg !10130, !ctir !10030
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %total5, i64 0, i64 1, !dbg !10129, !ctir !571
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !10131
  %inc = add i32 %11, 1, !dbg !10131
  store i32 %inc, i32* %arrayidx6, align 4, !dbg !10131
  br label %if.end, !dbg !10131

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10132
  %total7 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %12, i32 0, i32 4, !dbg !10132, !ctir !10030
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %total7, i64 0, i64 0, !dbg !10132, !ctir !571
  %13 = load i32, i32* %arrayidx8, align 4, !dbg !10132
  %shl = shl i32 %13, 3, !dbg !10132
  %14 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10133
  %buffer = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %14, i32 0, i32 6, !dbg !10134, !ctir !10030
  %15 = load i64, i64* %size, align 8, !dbg !10135
  %sub = sub i64 %15, 2, !dbg !10136
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer, i64 0, i64 %sub, !dbg !10133, !ctir !574
  store i32 %shl, i32* %arrayidx9, align 4, !dbg !10137
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10138
  %total10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %16, i32 0, i32 4, !dbg !10138, !ctir !10030
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %total10, i64 0, i64 1, !dbg !10138, !ctir !571
  %17 = load i32, i32* %arrayidx11, align 4, !dbg !10138
  %shl12 = shl i32 %17, 3, !dbg !10138
  %18 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10138
  %total13 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %18, i32 0, i32 4, !dbg !10138, !ctir !10030
  %arrayidx14 = getelementptr inbounds [2 x i32], [2 x i32]* %total13, i64 0, i64 0, !dbg !10138, !ctir !571
  %19 = load i32, i32* %arrayidx14, align 4, !dbg !10138
  %shr = lshr i32 %19, 29, !dbg !10138
  %or = or i32 %shl12, %shr, !dbg !10138
  %20 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10139
  %buffer15 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %20, i32 0, i32 6, !dbg !10140, !ctir !10030
  %21 = load i64, i64* %size, align 8, !dbg !10141
  %sub16 = sub i64 %21, 1, !dbg !10142
  %arrayidx17 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer15, i64 0, i64 %sub16, !dbg !10139, !ctir !574
  store i32 %or, i32* %arrayidx17, align 4, !dbg !10143
  %22 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10144
  %buffer18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %22, i32 0, i32 6, !dbg !10145, !ctir !10030
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %buffer18, i64 0, i64 0, !dbg !10146, !ctir !574
  %23 = bitcast i32* %arraydecay to i8*, !dbg !10146
  %24 = load i32, i32* %bytes, align 4, !dbg !10147
  %idxprom = zext i32 %24 to i64, !dbg !10146
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom, !dbg !10146, !ctir !7
  %25 = load i64, i64* %size, align 8, !dbg !10148
  %sub20 = sub i64 %25, 2, !dbg !10149
  %mul = mul i64 %sub20, 4, !dbg !10150
  %26 = load i32, i32* %bytes, align 4, !dbg !10151
  %conv21 = zext i32 %26 to i64, !dbg !10151
  %sub22 = sub i64 %mul, %conv21, !dbg !10152
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx19, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* bitcast (<{ i8, [63 x i8] }>* @fillbuf.189 to [64 x i8]*), i64 0, i64 0), i64 %sub22, i1 false), !dbg !10153
  %27 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10154
  %buffer23 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %27, i32 0, i32 6, !dbg !10155, !ctir !10030
  %arraydecay24 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer23, i64 0, i64 0, !dbg !10154, !ctir !574
  %28 = bitcast i32* %arraydecay24 to i8*, !dbg !10154
  %29 = load i64, i64* %size, align 8, !dbg !10156
  %mul25 = mul i64 %29, 4, !dbg !10157
  %30 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10158
  call void @md5_process_block(i8* %28, i64 %mul25, %struct.md5_ctx* %30) #12, !dbg !10159
  %31 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10160
  %32 = load i8*, i8** %resbuf.addr, align 8, !dbg !10161
  %call = call i8* @md5_read_ctx(%struct.md5_ctx* %31, i8* %32) #12, !dbg !10162
  ret i8* %call, !dbg !10163
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md5_process_block(i8* %buffer, i64 %len, %struct.md5_ctx* %ctx) #4 !dbg !10164 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %correct_words = alloca [16 x i32], align 16, !ctir !920
  %words = alloca i32*, align 8, !ctir !921
  %nwords = alloca i64, align 8, !ctir !52
  %endp = alloca i32*, align 8, !ctir !921
  %A = alloca i32, align 4, !ctir !560
  %B = alloca i32, align 4, !ctir !560
  %C = alloca i32, align 4, !ctir !560
  %D = alloca i32, align 4, !ctir !560
  %lolen = alloca i32, align 4, !ctir !560
  %cwp = alloca i32*, align 8, !ctir !923
  %A_save = alloca i32, align 4, !ctir !560
  %B_save = alloca i32, align 4, !ctir !560
  %C_save = alloca i32, align 4, !ctir !560
  %D_save = alloca i32, align 4, !ctir !560
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !10167, metadata !DIExpression()), !dbg !10168
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10169, metadata !DIExpression()), !dbg !10170
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.md5_ctx** %ctx.addr, metadata !10171, metadata !DIExpression()), !dbg !10172
  call void @llvm.dbg.declare(metadata [16 x i32]* %correct_words, metadata !10173, metadata !DIExpression()), !dbg !10174
  call void @llvm.dbg.declare(metadata i32** %words, metadata !10175, metadata !DIExpression()), !dbg !10176
  %0 = load i8*, i8** %buffer.addr, align 8, !dbg !10177
  %1 = bitcast i8* %0 to i32*, !dbg !10177
  store i32* %1, i32** %words, align 8, !dbg !10176
  call void @llvm.dbg.declare(metadata i64* %nwords, metadata !10178, metadata !DIExpression()), !dbg !10179
  %2 = load i64, i64* %len.addr, align 8, !dbg !10180
  %div = udiv i64 %2, 4, !dbg !10181
  store i64 %div, i64* %nwords, align 8, !dbg !10179
  call void @llvm.dbg.declare(metadata i32** %endp, metadata !10182, metadata !DIExpression()), !dbg !10183
  %3 = load i32*, i32** %words, align 8, !dbg !10184
  %4 = load i64, i64* %nwords, align 8, !dbg !10185
  %add.ptr = getelementptr inbounds i32, i32* %3, i64 %4, !dbg !10186, !ctir !922
  store i32* %add.ptr, i32** %endp, align 8, !dbg !10183
  call void @llvm.dbg.declare(metadata i32* %A, metadata !10187, metadata !DIExpression()), !dbg !10188
  %5 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10189
  %A1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %5, i32 0, i32 0, !dbg !10190, !ctir !10030
  %6 = load i32, i32* %A1, align 4, !dbg !10190, !ctir !560
  store i32 %6, i32* %A, align 4, !dbg !10188
  call void @llvm.dbg.declare(metadata i32* %B, metadata !10191, metadata !DIExpression()), !dbg !10192
  %7 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10193
  %B2 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %7, i32 0, i32 1, !dbg !10194, !ctir !10030
  %8 = load i32, i32* %B2, align 4, !dbg !10194, !ctir !560
  store i32 %8, i32* %B, align 4, !dbg !10192
  call void @llvm.dbg.declare(metadata i32* %C, metadata !10195, metadata !DIExpression()), !dbg !10196
  %9 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10197
  %C3 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %9, i32 0, i32 2, !dbg !10198, !ctir !10030
  %10 = load i32, i32* %C3, align 4, !dbg !10198, !ctir !560
  store i32 %10, i32* %C, align 4, !dbg !10196
  call void @llvm.dbg.declare(metadata i32* %D, metadata !10199, metadata !DIExpression()), !dbg !10200
  %11 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10201
  %D4 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %11, i32 0, i32 3, !dbg !10202, !ctir !10030
  %12 = load i32, i32* %D4, align 4, !dbg !10202, !ctir !560
  store i32 %12, i32* %D, align 4, !dbg !10200
  call void @llvm.dbg.declare(metadata i32* %lolen, metadata !10203, metadata !DIExpression()), !dbg !10204
  %13 = load i64, i64* %len.addr, align 8, !dbg !10205
  %conv = trunc i64 %13 to i32, !dbg !10205
  store i32 %conv, i32* %lolen, align 4, !dbg !10204
  %14 = load i32, i32* %lolen, align 4, !dbg !10206
  %15 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10207
  %total = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %15, i32 0, i32 4, !dbg !10208, !ctir !10030
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %total, i64 0, i64 0, !dbg !10207, !ctir !571
  %16 = load i32, i32* %arrayidx, align 4, !dbg !10209
  %add = add i32 %16, %14, !dbg !10209
  store i32 %add, i32* %arrayidx, align 4, !dbg !10209
  %17 = load i64, i64* %len.addr, align 8, !dbg !10210
  %shr = lshr i64 %17, 31, !dbg !10211
  %shr5 = lshr i64 %shr, 1, !dbg !10212
  %18 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10213
  %total6 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %18, i32 0, i32 4, !dbg !10214, !ctir !10030
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %total6, i64 0, i64 0, !dbg !10213, !ctir !571
  %19 = load i32, i32* %arrayidx7, align 4, !dbg !10213
  %20 = load i32, i32* %lolen, align 4, !dbg !10215
  %cmp = icmp ult i32 %19, %20, !dbg !10216
  %conv8 = zext i1 %cmp to i32, !dbg !10216
  %conv9 = sext i32 %conv8 to i64, !dbg !10217
  %add10 = add i64 %shr5, %conv9, !dbg !10218
  %21 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10219
  %total11 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %21, i32 0, i32 4, !dbg !10220, !ctir !10030
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %total11, i64 0, i64 1, !dbg !10219, !ctir !571
  %22 = load i32, i32* %arrayidx12, align 4, !dbg !10221
  %conv13 = zext i32 %22 to i64, !dbg !10221
  %add14 = add i64 %conv13, %add10, !dbg !10221
  %conv15 = trunc i64 %add14 to i32, !dbg !10221
  store i32 %conv15, i32* %arrayidx12, align 4, !dbg !10221
  br label %while.cond, !dbg !10222

while.cond:                                       ; preds = %do.end841, %entry
  %23 = load i32*, i32** %words, align 8, !dbg !10223
  %24 = load i32*, i32** %endp, align 8, !dbg !10224
  %cmp16 = icmp ult i32* %23, %24, !dbg !10225
  br i1 %cmp16, label %while.body, label %while.end, !dbg !10222

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32** %cwp, metadata !10226, metadata !DIExpression()), !dbg !10228
  %arraydecay = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0, !dbg !10229, !ctir !920
  store i32* %arraydecay, i32** %cwp, align 8, !dbg !10228
  call void @llvm.dbg.declare(metadata i32* %A_save, metadata !10230, metadata !DIExpression()), !dbg !10231
  %25 = load i32, i32* %A, align 4, !dbg !10232
  store i32 %25, i32* %A_save, align 4, !dbg !10231
  call void @llvm.dbg.declare(metadata i32* %B_save, metadata !10233, metadata !DIExpression()), !dbg !10234
  %26 = load i32, i32* %B, align 4, !dbg !10235
  store i32 %26, i32* %B_save, align 4, !dbg !10234
  call void @llvm.dbg.declare(metadata i32* %C_save, metadata !10236, metadata !DIExpression()), !dbg !10237
  %27 = load i32, i32* %C, align 4, !dbg !10238
  store i32 %27, i32* %C_save, align 4, !dbg !10237
  call void @llvm.dbg.declare(metadata i32* %D_save, metadata !10239, metadata !DIExpression()), !dbg !10240
  %28 = load i32, i32* %D, align 4, !dbg !10241
  store i32 %28, i32* %D_save, align 4, !dbg !10240
  br label %do.body, !dbg !10242

do.body:                                          ; preds = %while.body
  %29 = load i32, i32* %D, align 4, !dbg !10243
  %30 = load i32, i32* %B, align 4, !dbg !10243
  %31 = load i32, i32* %C, align 4, !dbg !10243
  %32 = load i32, i32* %D, align 4, !dbg !10243
  %xor = xor i32 %31, %32, !dbg !10243
  %and = and i32 %30, %xor, !dbg !10243
  %xor18 = xor i32 %29, %and, !dbg !10243
  %33 = load i32*, i32** %words, align 8, !dbg !10243
  %34 = load i32, i32* %33, align 4, !dbg !10243, !ctir !922
  %35 = load i32*, i32** %cwp, align 8, !dbg !10243
  %incdec.ptr = getelementptr inbounds i32, i32* %35, i32 1, !dbg !10243, !ctir !560
  store i32* %incdec.ptr, i32** %cwp, align 8, !dbg !10243
  store i32 %34, i32* %35, align 4, !dbg !10243, !ctir !560
  %add19 = add i32 %xor18, %34, !dbg !10243
  %add20 = add i32 %add19, -680876936, !dbg !10243
  %36 = load i32, i32* %A, align 4, !dbg !10243
  %add21 = add i32 %36, %add20, !dbg !10243
  store i32 %add21, i32* %A, align 4, !dbg !10243
  %37 = load i32*, i32** %words, align 8, !dbg !10243
  %incdec.ptr22 = getelementptr inbounds i32, i32* %37, i32 1, !dbg !10243, !ctir !922
  store i32* %incdec.ptr22, i32** %words, align 8, !dbg !10243
  %38 = load i32, i32* %A, align 4, !dbg !10243
  %shl = shl i32 %38, 7, !dbg !10243
  %39 = load i32, i32* %A, align 4, !dbg !10243
  %shr23 = lshr i32 %39, 25, !dbg !10243
  %or = or i32 %shl, %shr23, !dbg !10243
  store i32 %or, i32* %A, align 4, !dbg !10243
  %40 = load i32, i32* %B, align 4, !dbg !10243
  %41 = load i32, i32* %A, align 4, !dbg !10243
  %add24 = add i32 %41, %40, !dbg !10243
  store i32 %add24, i32* %A, align 4, !dbg !10243
  br label %do.end, !dbg !10243

do.end:                                           ; preds = %do.body
  br label %do.body25, !dbg !10245

do.body25:                                        ; preds = %do.end
  %42 = load i32, i32* %C, align 4, !dbg !10246
  %43 = load i32, i32* %A, align 4, !dbg !10246
  %44 = load i32, i32* %B, align 4, !dbg !10246
  %45 = load i32, i32* %C, align 4, !dbg !10246
  %xor26 = xor i32 %44, %45, !dbg !10246
  %and27 = and i32 %43, %xor26, !dbg !10246
  %xor28 = xor i32 %42, %and27, !dbg !10246
  %46 = load i32*, i32** %words, align 8, !dbg !10246
  %47 = load i32, i32* %46, align 4, !dbg !10246, !ctir !922
  %48 = load i32*, i32** %cwp, align 8, !dbg !10246
  %incdec.ptr29 = getelementptr inbounds i32, i32* %48, i32 1, !dbg !10246, !ctir !560
  store i32* %incdec.ptr29, i32** %cwp, align 8, !dbg !10246
  store i32 %47, i32* %48, align 4, !dbg !10246, !ctir !560
  %add30 = add i32 %xor28, %47, !dbg !10246
  %add31 = add i32 %add30, -389564586, !dbg !10246
  %49 = load i32, i32* %D, align 4, !dbg !10246
  %add32 = add i32 %49, %add31, !dbg !10246
  store i32 %add32, i32* %D, align 4, !dbg !10246
  %50 = load i32*, i32** %words, align 8, !dbg !10246
  %incdec.ptr33 = getelementptr inbounds i32, i32* %50, i32 1, !dbg !10246, !ctir !922
  store i32* %incdec.ptr33, i32** %words, align 8, !dbg !10246
  %51 = load i32, i32* %D, align 4, !dbg !10246
  %shl34 = shl i32 %51, 12, !dbg !10246
  %52 = load i32, i32* %D, align 4, !dbg !10246
  %shr35 = lshr i32 %52, 20, !dbg !10246
  %or36 = or i32 %shl34, %shr35, !dbg !10246
  store i32 %or36, i32* %D, align 4, !dbg !10246
  %53 = load i32, i32* %A, align 4, !dbg !10246
  %54 = load i32, i32* %D, align 4, !dbg !10246
  %add37 = add i32 %54, %53, !dbg !10246
  store i32 %add37, i32* %D, align 4, !dbg !10246
  br label %do.end38, !dbg !10246

do.end38:                                         ; preds = %do.body25
  br label %do.body39, !dbg !10248

do.body39:                                        ; preds = %do.end38
  %55 = load i32, i32* %B, align 4, !dbg !10249
  %56 = load i32, i32* %D, align 4, !dbg !10249
  %57 = load i32, i32* %A, align 4, !dbg !10249
  %58 = load i32, i32* %B, align 4, !dbg !10249
  %xor40 = xor i32 %57, %58, !dbg !10249
  %and41 = and i32 %56, %xor40, !dbg !10249
  %xor42 = xor i32 %55, %and41, !dbg !10249
  %59 = load i32*, i32** %words, align 8, !dbg !10249
  %60 = load i32, i32* %59, align 4, !dbg !10249, !ctir !922
  %61 = load i32*, i32** %cwp, align 8, !dbg !10249
  %incdec.ptr43 = getelementptr inbounds i32, i32* %61, i32 1, !dbg !10249, !ctir !560
  store i32* %incdec.ptr43, i32** %cwp, align 8, !dbg !10249
  store i32 %60, i32* %61, align 4, !dbg !10249, !ctir !560
  %add44 = add i32 %xor42, %60, !dbg !10249
  %add45 = add i32 %add44, 606105819, !dbg !10249
  %62 = load i32, i32* %C, align 4, !dbg !10249
  %add46 = add i32 %62, %add45, !dbg !10249
  store i32 %add46, i32* %C, align 4, !dbg !10249
  %63 = load i32*, i32** %words, align 8, !dbg !10249
  %incdec.ptr47 = getelementptr inbounds i32, i32* %63, i32 1, !dbg !10249, !ctir !922
  store i32* %incdec.ptr47, i32** %words, align 8, !dbg !10249
  %64 = load i32, i32* %C, align 4, !dbg !10249
  %shl48 = shl i32 %64, 17, !dbg !10249
  %65 = load i32, i32* %C, align 4, !dbg !10249
  %shr49 = lshr i32 %65, 15, !dbg !10249
  %or50 = or i32 %shl48, %shr49, !dbg !10249
  store i32 %or50, i32* %C, align 4, !dbg !10249
  %66 = load i32, i32* %D, align 4, !dbg !10249
  %67 = load i32, i32* %C, align 4, !dbg !10249
  %add51 = add i32 %67, %66, !dbg !10249
  store i32 %add51, i32* %C, align 4, !dbg !10249
  br label %do.end52, !dbg !10249

do.end52:                                         ; preds = %do.body39
  br label %do.body53, !dbg !10251

do.body53:                                        ; preds = %do.end52
  %68 = load i32, i32* %A, align 4, !dbg !10252
  %69 = load i32, i32* %C, align 4, !dbg !10252
  %70 = load i32, i32* %D, align 4, !dbg !10252
  %71 = load i32, i32* %A, align 4, !dbg !10252
  %xor54 = xor i32 %70, %71, !dbg !10252
  %and55 = and i32 %69, %xor54, !dbg !10252
  %xor56 = xor i32 %68, %and55, !dbg !10252
  %72 = load i32*, i32** %words, align 8, !dbg !10252
  %73 = load i32, i32* %72, align 4, !dbg !10252, !ctir !922
  %74 = load i32*, i32** %cwp, align 8, !dbg !10252
  %incdec.ptr57 = getelementptr inbounds i32, i32* %74, i32 1, !dbg !10252, !ctir !560
  store i32* %incdec.ptr57, i32** %cwp, align 8, !dbg !10252
  store i32 %73, i32* %74, align 4, !dbg !10252, !ctir !560
  %add58 = add i32 %xor56, %73, !dbg !10252
  %add59 = add i32 %add58, -1044525330, !dbg !10252
  %75 = load i32, i32* %B, align 4, !dbg !10252
  %add60 = add i32 %75, %add59, !dbg !10252
  store i32 %add60, i32* %B, align 4, !dbg !10252
  %76 = load i32*, i32** %words, align 8, !dbg !10252
  %incdec.ptr61 = getelementptr inbounds i32, i32* %76, i32 1, !dbg !10252, !ctir !922
  store i32* %incdec.ptr61, i32** %words, align 8, !dbg !10252
  %77 = load i32, i32* %B, align 4, !dbg !10252
  %shl62 = shl i32 %77, 22, !dbg !10252
  %78 = load i32, i32* %B, align 4, !dbg !10252
  %shr63 = lshr i32 %78, 10, !dbg !10252
  %or64 = or i32 %shl62, %shr63, !dbg !10252
  store i32 %or64, i32* %B, align 4, !dbg !10252
  %79 = load i32, i32* %C, align 4, !dbg !10252
  %80 = load i32, i32* %B, align 4, !dbg !10252
  %add65 = add i32 %80, %79, !dbg !10252
  store i32 %add65, i32* %B, align 4, !dbg !10252
  br label %do.end66, !dbg !10252

do.end66:                                         ; preds = %do.body53
  br label %do.body67, !dbg !10254

do.body67:                                        ; preds = %do.end66
  %81 = load i32, i32* %D, align 4, !dbg !10255
  %82 = load i32, i32* %B, align 4, !dbg !10255
  %83 = load i32, i32* %C, align 4, !dbg !10255
  %84 = load i32, i32* %D, align 4, !dbg !10255
  %xor68 = xor i32 %83, %84, !dbg !10255
  %and69 = and i32 %82, %xor68, !dbg !10255
  %xor70 = xor i32 %81, %and69, !dbg !10255
  %85 = load i32*, i32** %words, align 8, !dbg !10255
  %86 = load i32, i32* %85, align 4, !dbg !10255, !ctir !922
  %87 = load i32*, i32** %cwp, align 8, !dbg !10255
  %incdec.ptr71 = getelementptr inbounds i32, i32* %87, i32 1, !dbg !10255, !ctir !560
  store i32* %incdec.ptr71, i32** %cwp, align 8, !dbg !10255
  store i32 %86, i32* %87, align 4, !dbg !10255, !ctir !560
  %add72 = add i32 %xor70, %86, !dbg !10255
  %add73 = add i32 %add72, -176418897, !dbg !10255
  %88 = load i32, i32* %A, align 4, !dbg !10255
  %add74 = add i32 %88, %add73, !dbg !10255
  store i32 %add74, i32* %A, align 4, !dbg !10255
  %89 = load i32*, i32** %words, align 8, !dbg !10255
  %incdec.ptr75 = getelementptr inbounds i32, i32* %89, i32 1, !dbg !10255, !ctir !922
  store i32* %incdec.ptr75, i32** %words, align 8, !dbg !10255
  %90 = load i32, i32* %A, align 4, !dbg !10255
  %shl76 = shl i32 %90, 7, !dbg !10255
  %91 = load i32, i32* %A, align 4, !dbg !10255
  %shr77 = lshr i32 %91, 25, !dbg !10255
  %or78 = or i32 %shl76, %shr77, !dbg !10255
  store i32 %or78, i32* %A, align 4, !dbg !10255
  %92 = load i32, i32* %B, align 4, !dbg !10255
  %93 = load i32, i32* %A, align 4, !dbg !10255
  %add79 = add i32 %93, %92, !dbg !10255
  store i32 %add79, i32* %A, align 4, !dbg !10255
  br label %do.end80, !dbg !10255

do.end80:                                         ; preds = %do.body67
  br label %do.body81, !dbg !10257

do.body81:                                        ; preds = %do.end80
  %94 = load i32, i32* %C, align 4, !dbg !10258
  %95 = load i32, i32* %A, align 4, !dbg !10258
  %96 = load i32, i32* %B, align 4, !dbg !10258
  %97 = load i32, i32* %C, align 4, !dbg !10258
  %xor82 = xor i32 %96, %97, !dbg !10258
  %and83 = and i32 %95, %xor82, !dbg !10258
  %xor84 = xor i32 %94, %and83, !dbg !10258
  %98 = load i32*, i32** %words, align 8, !dbg !10258
  %99 = load i32, i32* %98, align 4, !dbg !10258, !ctir !922
  %100 = load i32*, i32** %cwp, align 8, !dbg !10258
  %incdec.ptr85 = getelementptr inbounds i32, i32* %100, i32 1, !dbg !10258, !ctir !560
  store i32* %incdec.ptr85, i32** %cwp, align 8, !dbg !10258
  store i32 %99, i32* %100, align 4, !dbg !10258, !ctir !560
  %add86 = add i32 %xor84, %99, !dbg !10258
  %add87 = add i32 %add86, 1200080426, !dbg !10258
  %101 = load i32, i32* %D, align 4, !dbg !10258
  %add88 = add i32 %101, %add87, !dbg !10258
  store i32 %add88, i32* %D, align 4, !dbg !10258
  %102 = load i32*, i32** %words, align 8, !dbg !10258
  %incdec.ptr89 = getelementptr inbounds i32, i32* %102, i32 1, !dbg !10258, !ctir !922
  store i32* %incdec.ptr89, i32** %words, align 8, !dbg !10258
  %103 = load i32, i32* %D, align 4, !dbg !10258
  %shl90 = shl i32 %103, 12, !dbg !10258
  %104 = load i32, i32* %D, align 4, !dbg !10258
  %shr91 = lshr i32 %104, 20, !dbg !10258
  %or92 = or i32 %shl90, %shr91, !dbg !10258
  store i32 %or92, i32* %D, align 4, !dbg !10258
  %105 = load i32, i32* %A, align 4, !dbg !10258
  %106 = load i32, i32* %D, align 4, !dbg !10258
  %add93 = add i32 %106, %105, !dbg !10258
  store i32 %add93, i32* %D, align 4, !dbg !10258
  br label %do.end94, !dbg !10258

do.end94:                                         ; preds = %do.body81
  br label %do.body95, !dbg !10260

do.body95:                                        ; preds = %do.end94
  %107 = load i32, i32* %B, align 4, !dbg !10261
  %108 = load i32, i32* %D, align 4, !dbg !10261
  %109 = load i32, i32* %A, align 4, !dbg !10261
  %110 = load i32, i32* %B, align 4, !dbg !10261
  %xor96 = xor i32 %109, %110, !dbg !10261
  %and97 = and i32 %108, %xor96, !dbg !10261
  %xor98 = xor i32 %107, %and97, !dbg !10261
  %111 = load i32*, i32** %words, align 8, !dbg !10261
  %112 = load i32, i32* %111, align 4, !dbg !10261, !ctir !922
  %113 = load i32*, i32** %cwp, align 8, !dbg !10261
  %incdec.ptr99 = getelementptr inbounds i32, i32* %113, i32 1, !dbg !10261, !ctir !560
  store i32* %incdec.ptr99, i32** %cwp, align 8, !dbg !10261
  store i32 %112, i32* %113, align 4, !dbg !10261, !ctir !560
  %add100 = add i32 %xor98, %112, !dbg !10261
  %add101 = add i32 %add100, -1473231341, !dbg !10261
  %114 = load i32, i32* %C, align 4, !dbg !10261
  %add102 = add i32 %114, %add101, !dbg !10261
  store i32 %add102, i32* %C, align 4, !dbg !10261
  %115 = load i32*, i32** %words, align 8, !dbg !10261
  %incdec.ptr103 = getelementptr inbounds i32, i32* %115, i32 1, !dbg !10261, !ctir !922
  store i32* %incdec.ptr103, i32** %words, align 8, !dbg !10261
  %116 = load i32, i32* %C, align 4, !dbg !10261
  %shl104 = shl i32 %116, 17, !dbg !10261
  %117 = load i32, i32* %C, align 4, !dbg !10261
  %shr105 = lshr i32 %117, 15, !dbg !10261
  %or106 = or i32 %shl104, %shr105, !dbg !10261
  store i32 %or106, i32* %C, align 4, !dbg !10261
  %118 = load i32, i32* %D, align 4, !dbg !10261
  %119 = load i32, i32* %C, align 4, !dbg !10261
  %add107 = add i32 %119, %118, !dbg !10261
  store i32 %add107, i32* %C, align 4, !dbg !10261
  br label %do.end108, !dbg !10261

do.end108:                                        ; preds = %do.body95
  br label %do.body109, !dbg !10263

do.body109:                                       ; preds = %do.end108
  %120 = load i32, i32* %A, align 4, !dbg !10264
  %121 = load i32, i32* %C, align 4, !dbg !10264
  %122 = load i32, i32* %D, align 4, !dbg !10264
  %123 = load i32, i32* %A, align 4, !dbg !10264
  %xor110 = xor i32 %122, %123, !dbg !10264
  %and111 = and i32 %121, %xor110, !dbg !10264
  %xor112 = xor i32 %120, %and111, !dbg !10264
  %124 = load i32*, i32** %words, align 8, !dbg !10264
  %125 = load i32, i32* %124, align 4, !dbg !10264, !ctir !922
  %126 = load i32*, i32** %cwp, align 8, !dbg !10264
  %incdec.ptr113 = getelementptr inbounds i32, i32* %126, i32 1, !dbg !10264, !ctir !560
  store i32* %incdec.ptr113, i32** %cwp, align 8, !dbg !10264
  store i32 %125, i32* %126, align 4, !dbg !10264, !ctir !560
  %add114 = add i32 %xor112, %125, !dbg !10264
  %add115 = add i32 %add114, -45705983, !dbg !10264
  %127 = load i32, i32* %B, align 4, !dbg !10264
  %add116 = add i32 %127, %add115, !dbg !10264
  store i32 %add116, i32* %B, align 4, !dbg !10264
  %128 = load i32*, i32** %words, align 8, !dbg !10264
  %incdec.ptr117 = getelementptr inbounds i32, i32* %128, i32 1, !dbg !10264, !ctir !922
  store i32* %incdec.ptr117, i32** %words, align 8, !dbg !10264
  %129 = load i32, i32* %B, align 4, !dbg !10264
  %shl118 = shl i32 %129, 22, !dbg !10264
  %130 = load i32, i32* %B, align 4, !dbg !10264
  %shr119 = lshr i32 %130, 10, !dbg !10264
  %or120 = or i32 %shl118, %shr119, !dbg !10264
  store i32 %or120, i32* %B, align 4, !dbg !10264
  %131 = load i32, i32* %C, align 4, !dbg !10264
  %132 = load i32, i32* %B, align 4, !dbg !10264
  %add121 = add i32 %132, %131, !dbg !10264
  store i32 %add121, i32* %B, align 4, !dbg !10264
  br label %do.end122, !dbg !10264

do.end122:                                        ; preds = %do.body109
  br label %do.body123, !dbg !10266

do.body123:                                       ; preds = %do.end122
  %133 = load i32, i32* %D, align 4, !dbg !10267
  %134 = load i32, i32* %B, align 4, !dbg !10267
  %135 = load i32, i32* %C, align 4, !dbg !10267
  %136 = load i32, i32* %D, align 4, !dbg !10267
  %xor124 = xor i32 %135, %136, !dbg !10267
  %and125 = and i32 %134, %xor124, !dbg !10267
  %xor126 = xor i32 %133, %and125, !dbg !10267
  %137 = load i32*, i32** %words, align 8, !dbg !10267
  %138 = load i32, i32* %137, align 4, !dbg !10267, !ctir !922
  %139 = load i32*, i32** %cwp, align 8, !dbg !10267
  %incdec.ptr127 = getelementptr inbounds i32, i32* %139, i32 1, !dbg !10267, !ctir !560
  store i32* %incdec.ptr127, i32** %cwp, align 8, !dbg !10267
  store i32 %138, i32* %139, align 4, !dbg !10267, !ctir !560
  %add128 = add i32 %xor126, %138, !dbg !10267
  %add129 = add i32 %add128, 1770035416, !dbg !10267
  %140 = load i32, i32* %A, align 4, !dbg !10267
  %add130 = add i32 %140, %add129, !dbg !10267
  store i32 %add130, i32* %A, align 4, !dbg !10267
  %141 = load i32*, i32** %words, align 8, !dbg !10267
  %incdec.ptr131 = getelementptr inbounds i32, i32* %141, i32 1, !dbg !10267, !ctir !922
  store i32* %incdec.ptr131, i32** %words, align 8, !dbg !10267
  %142 = load i32, i32* %A, align 4, !dbg !10267
  %shl132 = shl i32 %142, 7, !dbg !10267
  %143 = load i32, i32* %A, align 4, !dbg !10267
  %shr133 = lshr i32 %143, 25, !dbg !10267
  %or134 = or i32 %shl132, %shr133, !dbg !10267
  store i32 %or134, i32* %A, align 4, !dbg !10267
  %144 = load i32, i32* %B, align 4, !dbg !10267
  %145 = load i32, i32* %A, align 4, !dbg !10267
  %add135 = add i32 %145, %144, !dbg !10267
  store i32 %add135, i32* %A, align 4, !dbg !10267
  br label %do.end136, !dbg !10267

do.end136:                                        ; preds = %do.body123
  br label %do.body137, !dbg !10269

do.body137:                                       ; preds = %do.end136
  %146 = load i32, i32* %C, align 4, !dbg !10270
  %147 = load i32, i32* %A, align 4, !dbg !10270
  %148 = load i32, i32* %B, align 4, !dbg !10270
  %149 = load i32, i32* %C, align 4, !dbg !10270
  %xor138 = xor i32 %148, %149, !dbg !10270
  %and139 = and i32 %147, %xor138, !dbg !10270
  %xor140 = xor i32 %146, %and139, !dbg !10270
  %150 = load i32*, i32** %words, align 8, !dbg !10270
  %151 = load i32, i32* %150, align 4, !dbg !10270, !ctir !922
  %152 = load i32*, i32** %cwp, align 8, !dbg !10270
  %incdec.ptr141 = getelementptr inbounds i32, i32* %152, i32 1, !dbg !10270, !ctir !560
  store i32* %incdec.ptr141, i32** %cwp, align 8, !dbg !10270
  store i32 %151, i32* %152, align 4, !dbg !10270, !ctir !560
  %add142 = add i32 %xor140, %151, !dbg !10270
  %add143 = add i32 %add142, -1958414417, !dbg !10270
  %153 = load i32, i32* %D, align 4, !dbg !10270
  %add144 = add i32 %153, %add143, !dbg !10270
  store i32 %add144, i32* %D, align 4, !dbg !10270
  %154 = load i32*, i32** %words, align 8, !dbg !10270
  %incdec.ptr145 = getelementptr inbounds i32, i32* %154, i32 1, !dbg !10270, !ctir !922
  store i32* %incdec.ptr145, i32** %words, align 8, !dbg !10270
  %155 = load i32, i32* %D, align 4, !dbg !10270
  %shl146 = shl i32 %155, 12, !dbg !10270
  %156 = load i32, i32* %D, align 4, !dbg !10270
  %shr147 = lshr i32 %156, 20, !dbg !10270
  %or148 = or i32 %shl146, %shr147, !dbg !10270
  store i32 %or148, i32* %D, align 4, !dbg !10270
  %157 = load i32, i32* %A, align 4, !dbg !10270
  %158 = load i32, i32* %D, align 4, !dbg !10270
  %add149 = add i32 %158, %157, !dbg !10270
  store i32 %add149, i32* %D, align 4, !dbg !10270
  br label %do.end150, !dbg !10270

do.end150:                                        ; preds = %do.body137
  br label %do.body151, !dbg !10272

do.body151:                                       ; preds = %do.end150
  %159 = load i32, i32* %B, align 4, !dbg !10273
  %160 = load i32, i32* %D, align 4, !dbg !10273
  %161 = load i32, i32* %A, align 4, !dbg !10273
  %162 = load i32, i32* %B, align 4, !dbg !10273
  %xor152 = xor i32 %161, %162, !dbg !10273
  %and153 = and i32 %160, %xor152, !dbg !10273
  %xor154 = xor i32 %159, %and153, !dbg !10273
  %163 = load i32*, i32** %words, align 8, !dbg !10273
  %164 = load i32, i32* %163, align 4, !dbg !10273, !ctir !922
  %165 = load i32*, i32** %cwp, align 8, !dbg !10273
  %incdec.ptr155 = getelementptr inbounds i32, i32* %165, i32 1, !dbg !10273, !ctir !560
  store i32* %incdec.ptr155, i32** %cwp, align 8, !dbg !10273
  store i32 %164, i32* %165, align 4, !dbg !10273, !ctir !560
  %add156 = add i32 %xor154, %164, !dbg !10273
  %add157 = add i32 %add156, -42063, !dbg !10273
  %166 = load i32, i32* %C, align 4, !dbg !10273
  %add158 = add i32 %166, %add157, !dbg !10273
  store i32 %add158, i32* %C, align 4, !dbg !10273
  %167 = load i32*, i32** %words, align 8, !dbg !10273
  %incdec.ptr159 = getelementptr inbounds i32, i32* %167, i32 1, !dbg !10273, !ctir !922
  store i32* %incdec.ptr159, i32** %words, align 8, !dbg !10273
  %168 = load i32, i32* %C, align 4, !dbg !10273
  %shl160 = shl i32 %168, 17, !dbg !10273
  %169 = load i32, i32* %C, align 4, !dbg !10273
  %shr161 = lshr i32 %169, 15, !dbg !10273
  %or162 = or i32 %shl160, %shr161, !dbg !10273
  store i32 %or162, i32* %C, align 4, !dbg !10273
  %170 = load i32, i32* %D, align 4, !dbg !10273
  %171 = load i32, i32* %C, align 4, !dbg !10273
  %add163 = add i32 %171, %170, !dbg !10273
  store i32 %add163, i32* %C, align 4, !dbg !10273
  br label %do.end164, !dbg !10273

do.end164:                                        ; preds = %do.body151
  br label %do.body165, !dbg !10275

do.body165:                                       ; preds = %do.end164
  %172 = load i32, i32* %A, align 4, !dbg !10276
  %173 = load i32, i32* %C, align 4, !dbg !10276
  %174 = load i32, i32* %D, align 4, !dbg !10276
  %175 = load i32, i32* %A, align 4, !dbg !10276
  %xor166 = xor i32 %174, %175, !dbg !10276
  %and167 = and i32 %173, %xor166, !dbg !10276
  %xor168 = xor i32 %172, %and167, !dbg !10276
  %176 = load i32*, i32** %words, align 8, !dbg !10276
  %177 = load i32, i32* %176, align 4, !dbg !10276, !ctir !922
  %178 = load i32*, i32** %cwp, align 8, !dbg !10276
  %incdec.ptr169 = getelementptr inbounds i32, i32* %178, i32 1, !dbg !10276, !ctir !560
  store i32* %incdec.ptr169, i32** %cwp, align 8, !dbg !10276
  store i32 %177, i32* %178, align 4, !dbg !10276, !ctir !560
  %add170 = add i32 %xor168, %177, !dbg !10276
  %add171 = add i32 %add170, -1990404162, !dbg !10276
  %179 = load i32, i32* %B, align 4, !dbg !10276
  %add172 = add i32 %179, %add171, !dbg !10276
  store i32 %add172, i32* %B, align 4, !dbg !10276
  %180 = load i32*, i32** %words, align 8, !dbg !10276
  %incdec.ptr173 = getelementptr inbounds i32, i32* %180, i32 1, !dbg !10276, !ctir !922
  store i32* %incdec.ptr173, i32** %words, align 8, !dbg !10276
  %181 = load i32, i32* %B, align 4, !dbg !10276
  %shl174 = shl i32 %181, 22, !dbg !10276
  %182 = load i32, i32* %B, align 4, !dbg !10276
  %shr175 = lshr i32 %182, 10, !dbg !10276
  %or176 = or i32 %shl174, %shr175, !dbg !10276
  store i32 %or176, i32* %B, align 4, !dbg !10276
  %183 = load i32, i32* %C, align 4, !dbg !10276
  %184 = load i32, i32* %B, align 4, !dbg !10276
  %add177 = add i32 %184, %183, !dbg !10276
  store i32 %add177, i32* %B, align 4, !dbg !10276
  br label %do.end178, !dbg !10276

do.end178:                                        ; preds = %do.body165
  br label %do.body179, !dbg !10278

do.body179:                                       ; preds = %do.end178
  %185 = load i32, i32* %D, align 4, !dbg !10279
  %186 = load i32, i32* %B, align 4, !dbg !10279
  %187 = load i32, i32* %C, align 4, !dbg !10279
  %188 = load i32, i32* %D, align 4, !dbg !10279
  %xor180 = xor i32 %187, %188, !dbg !10279
  %and181 = and i32 %186, %xor180, !dbg !10279
  %xor182 = xor i32 %185, %and181, !dbg !10279
  %189 = load i32*, i32** %words, align 8, !dbg !10279
  %190 = load i32, i32* %189, align 4, !dbg !10279, !ctir !922
  %191 = load i32*, i32** %cwp, align 8, !dbg !10279
  %incdec.ptr183 = getelementptr inbounds i32, i32* %191, i32 1, !dbg !10279, !ctir !560
  store i32* %incdec.ptr183, i32** %cwp, align 8, !dbg !10279
  store i32 %190, i32* %191, align 4, !dbg !10279, !ctir !560
  %add184 = add i32 %xor182, %190, !dbg !10279
  %add185 = add i32 %add184, 1804603682, !dbg !10279
  %192 = load i32, i32* %A, align 4, !dbg !10279
  %add186 = add i32 %192, %add185, !dbg !10279
  store i32 %add186, i32* %A, align 4, !dbg !10279
  %193 = load i32*, i32** %words, align 8, !dbg !10279
  %incdec.ptr187 = getelementptr inbounds i32, i32* %193, i32 1, !dbg !10279, !ctir !922
  store i32* %incdec.ptr187, i32** %words, align 8, !dbg !10279
  %194 = load i32, i32* %A, align 4, !dbg !10279
  %shl188 = shl i32 %194, 7, !dbg !10279
  %195 = load i32, i32* %A, align 4, !dbg !10279
  %shr189 = lshr i32 %195, 25, !dbg !10279
  %or190 = or i32 %shl188, %shr189, !dbg !10279
  store i32 %or190, i32* %A, align 4, !dbg !10279
  %196 = load i32, i32* %B, align 4, !dbg !10279
  %197 = load i32, i32* %A, align 4, !dbg !10279
  %add191 = add i32 %197, %196, !dbg !10279
  store i32 %add191, i32* %A, align 4, !dbg !10279
  br label %do.end192, !dbg !10279

do.end192:                                        ; preds = %do.body179
  br label %do.body193, !dbg !10281

do.body193:                                       ; preds = %do.end192
  %198 = load i32, i32* %C, align 4, !dbg !10282
  %199 = load i32, i32* %A, align 4, !dbg !10282
  %200 = load i32, i32* %B, align 4, !dbg !10282
  %201 = load i32, i32* %C, align 4, !dbg !10282
  %xor194 = xor i32 %200, %201, !dbg !10282
  %and195 = and i32 %199, %xor194, !dbg !10282
  %xor196 = xor i32 %198, %and195, !dbg !10282
  %202 = load i32*, i32** %words, align 8, !dbg !10282
  %203 = load i32, i32* %202, align 4, !dbg !10282, !ctir !922
  %204 = load i32*, i32** %cwp, align 8, !dbg !10282
  %incdec.ptr197 = getelementptr inbounds i32, i32* %204, i32 1, !dbg !10282, !ctir !560
  store i32* %incdec.ptr197, i32** %cwp, align 8, !dbg !10282
  store i32 %203, i32* %204, align 4, !dbg !10282, !ctir !560
  %add198 = add i32 %xor196, %203, !dbg !10282
  %add199 = add i32 %add198, -40341101, !dbg !10282
  %205 = load i32, i32* %D, align 4, !dbg !10282
  %add200 = add i32 %205, %add199, !dbg !10282
  store i32 %add200, i32* %D, align 4, !dbg !10282
  %206 = load i32*, i32** %words, align 8, !dbg !10282
  %incdec.ptr201 = getelementptr inbounds i32, i32* %206, i32 1, !dbg !10282, !ctir !922
  store i32* %incdec.ptr201, i32** %words, align 8, !dbg !10282
  %207 = load i32, i32* %D, align 4, !dbg !10282
  %shl202 = shl i32 %207, 12, !dbg !10282
  %208 = load i32, i32* %D, align 4, !dbg !10282
  %shr203 = lshr i32 %208, 20, !dbg !10282
  %or204 = or i32 %shl202, %shr203, !dbg !10282
  store i32 %or204, i32* %D, align 4, !dbg !10282
  %209 = load i32, i32* %A, align 4, !dbg !10282
  %210 = load i32, i32* %D, align 4, !dbg !10282
  %add205 = add i32 %210, %209, !dbg !10282
  store i32 %add205, i32* %D, align 4, !dbg !10282
  br label %do.end206, !dbg !10282

do.end206:                                        ; preds = %do.body193
  br label %do.body207, !dbg !10284

do.body207:                                       ; preds = %do.end206
  %211 = load i32, i32* %B, align 4, !dbg !10285
  %212 = load i32, i32* %D, align 4, !dbg !10285
  %213 = load i32, i32* %A, align 4, !dbg !10285
  %214 = load i32, i32* %B, align 4, !dbg !10285
  %xor208 = xor i32 %213, %214, !dbg !10285
  %and209 = and i32 %212, %xor208, !dbg !10285
  %xor210 = xor i32 %211, %and209, !dbg !10285
  %215 = load i32*, i32** %words, align 8, !dbg !10285
  %216 = load i32, i32* %215, align 4, !dbg !10285, !ctir !922
  %217 = load i32*, i32** %cwp, align 8, !dbg !10285
  %incdec.ptr211 = getelementptr inbounds i32, i32* %217, i32 1, !dbg !10285, !ctir !560
  store i32* %incdec.ptr211, i32** %cwp, align 8, !dbg !10285
  store i32 %216, i32* %217, align 4, !dbg !10285, !ctir !560
  %add212 = add i32 %xor210, %216, !dbg !10285
  %add213 = add i32 %add212, -1502002290, !dbg !10285
  %218 = load i32, i32* %C, align 4, !dbg !10285
  %add214 = add i32 %218, %add213, !dbg !10285
  store i32 %add214, i32* %C, align 4, !dbg !10285
  %219 = load i32*, i32** %words, align 8, !dbg !10285
  %incdec.ptr215 = getelementptr inbounds i32, i32* %219, i32 1, !dbg !10285, !ctir !922
  store i32* %incdec.ptr215, i32** %words, align 8, !dbg !10285
  %220 = load i32, i32* %C, align 4, !dbg !10285
  %shl216 = shl i32 %220, 17, !dbg !10285
  %221 = load i32, i32* %C, align 4, !dbg !10285
  %shr217 = lshr i32 %221, 15, !dbg !10285
  %or218 = or i32 %shl216, %shr217, !dbg !10285
  store i32 %or218, i32* %C, align 4, !dbg !10285
  %222 = load i32, i32* %D, align 4, !dbg !10285
  %223 = load i32, i32* %C, align 4, !dbg !10285
  %add219 = add i32 %223, %222, !dbg !10285
  store i32 %add219, i32* %C, align 4, !dbg !10285
  br label %do.end220, !dbg !10285

do.end220:                                        ; preds = %do.body207
  br label %do.body221, !dbg !10287

do.body221:                                       ; preds = %do.end220
  %224 = load i32, i32* %A, align 4, !dbg !10288
  %225 = load i32, i32* %C, align 4, !dbg !10288
  %226 = load i32, i32* %D, align 4, !dbg !10288
  %227 = load i32, i32* %A, align 4, !dbg !10288
  %xor222 = xor i32 %226, %227, !dbg !10288
  %and223 = and i32 %225, %xor222, !dbg !10288
  %xor224 = xor i32 %224, %and223, !dbg !10288
  %228 = load i32*, i32** %words, align 8, !dbg !10288
  %229 = load i32, i32* %228, align 4, !dbg !10288, !ctir !922
  %230 = load i32*, i32** %cwp, align 8, !dbg !10288
  %incdec.ptr225 = getelementptr inbounds i32, i32* %230, i32 1, !dbg !10288, !ctir !560
  store i32* %incdec.ptr225, i32** %cwp, align 8, !dbg !10288
  store i32 %229, i32* %230, align 4, !dbg !10288, !ctir !560
  %add226 = add i32 %xor224, %229, !dbg !10288
  %add227 = add i32 %add226, 1236535329, !dbg !10288
  %231 = load i32, i32* %B, align 4, !dbg !10288
  %add228 = add i32 %231, %add227, !dbg !10288
  store i32 %add228, i32* %B, align 4, !dbg !10288
  %232 = load i32*, i32** %words, align 8, !dbg !10288
  %incdec.ptr229 = getelementptr inbounds i32, i32* %232, i32 1, !dbg !10288, !ctir !922
  store i32* %incdec.ptr229, i32** %words, align 8, !dbg !10288
  %233 = load i32, i32* %B, align 4, !dbg !10288
  %shl230 = shl i32 %233, 22, !dbg !10288
  %234 = load i32, i32* %B, align 4, !dbg !10288
  %shr231 = lshr i32 %234, 10, !dbg !10288
  %or232 = or i32 %shl230, %shr231, !dbg !10288
  store i32 %or232, i32* %B, align 4, !dbg !10288
  %235 = load i32, i32* %C, align 4, !dbg !10288
  %236 = load i32, i32* %B, align 4, !dbg !10288
  %add233 = add i32 %236, %235, !dbg !10288
  store i32 %add233, i32* %B, align 4, !dbg !10288
  br label %do.end234, !dbg !10288

do.end234:                                        ; preds = %do.body221
  br label %do.body235, !dbg !10290

do.body235:                                       ; preds = %do.end234
  %237 = load i32, i32* %C, align 4, !dbg !10291
  %238 = load i32, i32* %D, align 4, !dbg !10291
  %239 = load i32, i32* %B, align 4, !dbg !10291
  %240 = load i32, i32* %C, align 4, !dbg !10291
  %xor236 = xor i32 %239, %240, !dbg !10291
  %and237 = and i32 %238, %xor236, !dbg !10291
  %xor238 = xor i32 %237, %and237, !dbg !10291
  %arrayidx239 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1, !dbg !10291, !ctir !920
  %241 = load i32, i32* %arrayidx239, align 4, !dbg !10291
  %add240 = add i32 %xor238, %241, !dbg !10291
  %add241 = add i32 %add240, -165796510, !dbg !10291
  %242 = load i32, i32* %A, align 4, !dbg !10291
  %add242 = add i32 %242, %add241, !dbg !10291
  store i32 %add242, i32* %A, align 4, !dbg !10291
  %243 = load i32, i32* %A, align 4, !dbg !10291
  %shl243 = shl i32 %243, 5, !dbg !10291
  %244 = load i32, i32* %A, align 4, !dbg !10291
  %shr244 = lshr i32 %244, 27, !dbg !10291
  %or245 = or i32 %shl243, %shr244, !dbg !10291
  store i32 %or245, i32* %A, align 4, !dbg !10291
  %245 = load i32, i32* %B, align 4, !dbg !10291
  %246 = load i32, i32* %A, align 4, !dbg !10291
  %add246 = add i32 %246, %245, !dbg !10291
  store i32 %add246, i32* %A, align 4, !dbg !10291
  br label %do.end247, !dbg !10291

do.end247:                                        ; preds = %do.body235
  br label %do.body248, !dbg !10293

do.body248:                                       ; preds = %do.end247
  %247 = load i32, i32* %B, align 4, !dbg !10294
  %248 = load i32, i32* %C, align 4, !dbg !10294
  %249 = load i32, i32* %A, align 4, !dbg !10294
  %250 = load i32, i32* %B, align 4, !dbg !10294
  %xor249 = xor i32 %249, %250, !dbg !10294
  %and250 = and i32 %248, %xor249, !dbg !10294
  %xor251 = xor i32 %247, %and250, !dbg !10294
  %arrayidx252 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6, !dbg !10294, !ctir !920
  %251 = load i32, i32* %arrayidx252, align 8, !dbg !10294
  %add253 = add i32 %xor251, %251, !dbg !10294
  %add254 = add i32 %add253, -1069501632, !dbg !10294
  %252 = load i32, i32* %D, align 4, !dbg !10294
  %add255 = add i32 %252, %add254, !dbg !10294
  store i32 %add255, i32* %D, align 4, !dbg !10294
  %253 = load i32, i32* %D, align 4, !dbg !10294
  %shl256 = shl i32 %253, 9, !dbg !10294
  %254 = load i32, i32* %D, align 4, !dbg !10294
  %shr257 = lshr i32 %254, 23, !dbg !10294
  %or258 = or i32 %shl256, %shr257, !dbg !10294
  store i32 %or258, i32* %D, align 4, !dbg !10294
  %255 = load i32, i32* %A, align 4, !dbg !10294
  %256 = load i32, i32* %D, align 4, !dbg !10294
  %add259 = add i32 %256, %255, !dbg !10294
  store i32 %add259, i32* %D, align 4, !dbg !10294
  br label %do.end260, !dbg !10294

do.end260:                                        ; preds = %do.body248
  br label %do.body261, !dbg !10296

do.body261:                                       ; preds = %do.end260
  %257 = load i32, i32* %A, align 4, !dbg !10297
  %258 = load i32, i32* %B, align 4, !dbg !10297
  %259 = load i32, i32* %D, align 4, !dbg !10297
  %260 = load i32, i32* %A, align 4, !dbg !10297
  %xor262 = xor i32 %259, %260, !dbg !10297
  %and263 = and i32 %258, %xor262, !dbg !10297
  %xor264 = xor i32 %257, %and263, !dbg !10297
  %arrayidx265 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11, !dbg !10297, !ctir !920
  %261 = load i32, i32* %arrayidx265, align 4, !dbg !10297
  %add266 = add i32 %xor264, %261, !dbg !10297
  %add267 = add i32 %add266, 643717713, !dbg !10297
  %262 = load i32, i32* %C, align 4, !dbg !10297
  %add268 = add i32 %262, %add267, !dbg !10297
  store i32 %add268, i32* %C, align 4, !dbg !10297
  %263 = load i32, i32* %C, align 4, !dbg !10297
  %shl269 = shl i32 %263, 14, !dbg !10297
  %264 = load i32, i32* %C, align 4, !dbg !10297
  %shr270 = lshr i32 %264, 18, !dbg !10297
  %or271 = or i32 %shl269, %shr270, !dbg !10297
  store i32 %or271, i32* %C, align 4, !dbg !10297
  %265 = load i32, i32* %D, align 4, !dbg !10297
  %266 = load i32, i32* %C, align 4, !dbg !10297
  %add272 = add i32 %266, %265, !dbg !10297
  store i32 %add272, i32* %C, align 4, !dbg !10297
  br label %do.end273, !dbg !10297

do.end273:                                        ; preds = %do.body261
  br label %do.body274, !dbg !10299

do.body274:                                       ; preds = %do.end273
  %267 = load i32, i32* %D, align 4, !dbg !10300
  %268 = load i32, i32* %A, align 4, !dbg !10300
  %269 = load i32, i32* %C, align 4, !dbg !10300
  %270 = load i32, i32* %D, align 4, !dbg !10300
  %xor275 = xor i32 %269, %270, !dbg !10300
  %and276 = and i32 %268, %xor275, !dbg !10300
  %xor277 = xor i32 %267, %and276, !dbg !10300
  %arrayidx278 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0, !dbg !10300, !ctir !920
  %271 = load i32, i32* %arrayidx278, align 16, !dbg !10300
  %add279 = add i32 %xor277, %271, !dbg !10300
  %add280 = add i32 %add279, -373897302, !dbg !10300
  %272 = load i32, i32* %B, align 4, !dbg !10300
  %add281 = add i32 %272, %add280, !dbg !10300
  store i32 %add281, i32* %B, align 4, !dbg !10300
  %273 = load i32, i32* %B, align 4, !dbg !10300
  %shl282 = shl i32 %273, 20, !dbg !10300
  %274 = load i32, i32* %B, align 4, !dbg !10300
  %shr283 = lshr i32 %274, 12, !dbg !10300
  %or284 = or i32 %shl282, %shr283, !dbg !10300
  store i32 %or284, i32* %B, align 4, !dbg !10300
  %275 = load i32, i32* %C, align 4, !dbg !10300
  %276 = load i32, i32* %B, align 4, !dbg !10300
  %add285 = add i32 %276, %275, !dbg !10300
  store i32 %add285, i32* %B, align 4, !dbg !10300
  br label %do.end286, !dbg !10300

do.end286:                                        ; preds = %do.body274
  br label %do.body287, !dbg !10302

do.body287:                                       ; preds = %do.end286
  %277 = load i32, i32* %C, align 4, !dbg !10303
  %278 = load i32, i32* %D, align 4, !dbg !10303
  %279 = load i32, i32* %B, align 4, !dbg !10303
  %280 = load i32, i32* %C, align 4, !dbg !10303
  %xor288 = xor i32 %279, %280, !dbg !10303
  %and289 = and i32 %278, %xor288, !dbg !10303
  %xor290 = xor i32 %277, %and289, !dbg !10303
  %arrayidx291 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5, !dbg !10303, !ctir !920
  %281 = load i32, i32* %arrayidx291, align 4, !dbg !10303
  %add292 = add i32 %xor290, %281, !dbg !10303
  %add293 = add i32 %add292, -701558691, !dbg !10303
  %282 = load i32, i32* %A, align 4, !dbg !10303
  %add294 = add i32 %282, %add293, !dbg !10303
  store i32 %add294, i32* %A, align 4, !dbg !10303
  %283 = load i32, i32* %A, align 4, !dbg !10303
  %shl295 = shl i32 %283, 5, !dbg !10303
  %284 = load i32, i32* %A, align 4, !dbg !10303
  %shr296 = lshr i32 %284, 27, !dbg !10303
  %or297 = or i32 %shl295, %shr296, !dbg !10303
  store i32 %or297, i32* %A, align 4, !dbg !10303
  %285 = load i32, i32* %B, align 4, !dbg !10303
  %286 = load i32, i32* %A, align 4, !dbg !10303
  %add298 = add i32 %286, %285, !dbg !10303
  store i32 %add298, i32* %A, align 4, !dbg !10303
  br label %do.end299, !dbg !10303

do.end299:                                        ; preds = %do.body287
  br label %do.body300, !dbg !10305

do.body300:                                       ; preds = %do.end299
  %287 = load i32, i32* %B, align 4, !dbg !10306
  %288 = load i32, i32* %C, align 4, !dbg !10306
  %289 = load i32, i32* %A, align 4, !dbg !10306
  %290 = load i32, i32* %B, align 4, !dbg !10306
  %xor301 = xor i32 %289, %290, !dbg !10306
  %and302 = and i32 %288, %xor301, !dbg !10306
  %xor303 = xor i32 %287, %and302, !dbg !10306
  %arrayidx304 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10, !dbg !10306, !ctir !920
  %291 = load i32, i32* %arrayidx304, align 8, !dbg !10306
  %add305 = add i32 %xor303, %291, !dbg !10306
  %add306 = add i32 %add305, 38016083, !dbg !10306
  %292 = load i32, i32* %D, align 4, !dbg !10306
  %add307 = add i32 %292, %add306, !dbg !10306
  store i32 %add307, i32* %D, align 4, !dbg !10306
  %293 = load i32, i32* %D, align 4, !dbg !10306
  %shl308 = shl i32 %293, 9, !dbg !10306
  %294 = load i32, i32* %D, align 4, !dbg !10306
  %shr309 = lshr i32 %294, 23, !dbg !10306
  %or310 = or i32 %shl308, %shr309, !dbg !10306
  store i32 %or310, i32* %D, align 4, !dbg !10306
  %295 = load i32, i32* %A, align 4, !dbg !10306
  %296 = load i32, i32* %D, align 4, !dbg !10306
  %add311 = add i32 %296, %295, !dbg !10306
  store i32 %add311, i32* %D, align 4, !dbg !10306
  br label %do.end312, !dbg !10306

do.end312:                                        ; preds = %do.body300
  br label %do.body313, !dbg !10308

do.body313:                                       ; preds = %do.end312
  %297 = load i32, i32* %A, align 4, !dbg !10309
  %298 = load i32, i32* %B, align 4, !dbg !10309
  %299 = load i32, i32* %D, align 4, !dbg !10309
  %300 = load i32, i32* %A, align 4, !dbg !10309
  %xor314 = xor i32 %299, %300, !dbg !10309
  %and315 = and i32 %298, %xor314, !dbg !10309
  %xor316 = xor i32 %297, %and315, !dbg !10309
  %arrayidx317 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15, !dbg !10309, !ctir !920
  %301 = load i32, i32* %arrayidx317, align 4, !dbg !10309
  %add318 = add i32 %xor316, %301, !dbg !10309
  %add319 = add i32 %add318, -660478335, !dbg !10309
  %302 = load i32, i32* %C, align 4, !dbg !10309
  %add320 = add i32 %302, %add319, !dbg !10309
  store i32 %add320, i32* %C, align 4, !dbg !10309
  %303 = load i32, i32* %C, align 4, !dbg !10309
  %shl321 = shl i32 %303, 14, !dbg !10309
  %304 = load i32, i32* %C, align 4, !dbg !10309
  %shr322 = lshr i32 %304, 18, !dbg !10309
  %or323 = or i32 %shl321, %shr322, !dbg !10309
  store i32 %or323, i32* %C, align 4, !dbg !10309
  %305 = load i32, i32* %D, align 4, !dbg !10309
  %306 = load i32, i32* %C, align 4, !dbg !10309
  %add324 = add i32 %306, %305, !dbg !10309
  store i32 %add324, i32* %C, align 4, !dbg !10309
  br label %do.end325, !dbg !10309

do.end325:                                        ; preds = %do.body313
  br label %do.body326, !dbg !10311

do.body326:                                       ; preds = %do.end325
  %307 = load i32, i32* %D, align 4, !dbg !10312
  %308 = load i32, i32* %A, align 4, !dbg !10312
  %309 = load i32, i32* %C, align 4, !dbg !10312
  %310 = load i32, i32* %D, align 4, !dbg !10312
  %xor327 = xor i32 %309, %310, !dbg !10312
  %and328 = and i32 %308, %xor327, !dbg !10312
  %xor329 = xor i32 %307, %and328, !dbg !10312
  %arrayidx330 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4, !dbg !10312, !ctir !920
  %311 = load i32, i32* %arrayidx330, align 16, !dbg !10312
  %add331 = add i32 %xor329, %311, !dbg !10312
  %add332 = add i32 %add331, -405537848, !dbg !10312
  %312 = load i32, i32* %B, align 4, !dbg !10312
  %add333 = add i32 %312, %add332, !dbg !10312
  store i32 %add333, i32* %B, align 4, !dbg !10312
  %313 = load i32, i32* %B, align 4, !dbg !10312
  %shl334 = shl i32 %313, 20, !dbg !10312
  %314 = load i32, i32* %B, align 4, !dbg !10312
  %shr335 = lshr i32 %314, 12, !dbg !10312
  %or336 = or i32 %shl334, %shr335, !dbg !10312
  store i32 %or336, i32* %B, align 4, !dbg !10312
  %315 = load i32, i32* %C, align 4, !dbg !10312
  %316 = load i32, i32* %B, align 4, !dbg !10312
  %add337 = add i32 %316, %315, !dbg !10312
  store i32 %add337, i32* %B, align 4, !dbg !10312
  br label %do.end338, !dbg !10312

do.end338:                                        ; preds = %do.body326
  br label %do.body339, !dbg !10314

do.body339:                                       ; preds = %do.end338
  %317 = load i32, i32* %C, align 4, !dbg !10315
  %318 = load i32, i32* %D, align 4, !dbg !10315
  %319 = load i32, i32* %B, align 4, !dbg !10315
  %320 = load i32, i32* %C, align 4, !dbg !10315
  %xor340 = xor i32 %319, %320, !dbg !10315
  %and341 = and i32 %318, %xor340, !dbg !10315
  %xor342 = xor i32 %317, %and341, !dbg !10315
  %arrayidx343 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9, !dbg !10315, !ctir !920
  %321 = load i32, i32* %arrayidx343, align 4, !dbg !10315
  %add344 = add i32 %xor342, %321, !dbg !10315
  %add345 = add i32 %add344, 568446438, !dbg !10315
  %322 = load i32, i32* %A, align 4, !dbg !10315
  %add346 = add i32 %322, %add345, !dbg !10315
  store i32 %add346, i32* %A, align 4, !dbg !10315
  %323 = load i32, i32* %A, align 4, !dbg !10315
  %shl347 = shl i32 %323, 5, !dbg !10315
  %324 = load i32, i32* %A, align 4, !dbg !10315
  %shr348 = lshr i32 %324, 27, !dbg !10315
  %or349 = or i32 %shl347, %shr348, !dbg !10315
  store i32 %or349, i32* %A, align 4, !dbg !10315
  %325 = load i32, i32* %B, align 4, !dbg !10315
  %326 = load i32, i32* %A, align 4, !dbg !10315
  %add350 = add i32 %326, %325, !dbg !10315
  store i32 %add350, i32* %A, align 4, !dbg !10315
  br label %do.end351, !dbg !10315

do.end351:                                        ; preds = %do.body339
  br label %do.body352, !dbg !10317

do.body352:                                       ; preds = %do.end351
  %327 = load i32, i32* %B, align 4, !dbg !10318
  %328 = load i32, i32* %C, align 4, !dbg !10318
  %329 = load i32, i32* %A, align 4, !dbg !10318
  %330 = load i32, i32* %B, align 4, !dbg !10318
  %xor353 = xor i32 %329, %330, !dbg !10318
  %and354 = and i32 %328, %xor353, !dbg !10318
  %xor355 = xor i32 %327, %and354, !dbg !10318
  %arrayidx356 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14, !dbg !10318, !ctir !920
  %331 = load i32, i32* %arrayidx356, align 8, !dbg !10318
  %add357 = add i32 %xor355, %331, !dbg !10318
  %add358 = add i32 %add357, -1019803690, !dbg !10318
  %332 = load i32, i32* %D, align 4, !dbg !10318
  %add359 = add i32 %332, %add358, !dbg !10318
  store i32 %add359, i32* %D, align 4, !dbg !10318
  %333 = load i32, i32* %D, align 4, !dbg !10318
  %shl360 = shl i32 %333, 9, !dbg !10318
  %334 = load i32, i32* %D, align 4, !dbg !10318
  %shr361 = lshr i32 %334, 23, !dbg !10318
  %or362 = or i32 %shl360, %shr361, !dbg !10318
  store i32 %or362, i32* %D, align 4, !dbg !10318
  %335 = load i32, i32* %A, align 4, !dbg !10318
  %336 = load i32, i32* %D, align 4, !dbg !10318
  %add363 = add i32 %336, %335, !dbg !10318
  store i32 %add363, i32* %D, align 4, !dbg !10318
  br label %do.end364, !dbg !10318

do.end364:                                        ; preds = %do.body352
  br label %do.body365, !dbg !10320

do.body365:                                       ; preds = %do.end364
  %337 = load i32, i32* %A, align 4, !dbg !10321
  %338 = load i32, i32* %B, align 4, !dbg !10321
  %339 = load i32, i32* %D, align 4, !dbg !10321
  %340 = load i32, i32* %A, align 4, !dbg !10321
  %xor366 = xor i32 %339, %340, !dbg !10321
  %and367 = and i32 %338, %xor366, !dbg !10321
  %xor368 = xor i32 %337, %and367, !dbg !10321
  %arrayidx369 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3, !dbg !10321, !ctir !920
  %341 = load i32, i32* %arrayidx369, align 4, !dbg !10321
  %add370 = add i32 %xor368, %341, !dbg !10321
  %add371 = add i32 %add370, -187363961, !dbg !10321
  %342 = load i32, i32* %C, align 4, !dbg !10321
  %add372 = add i32 %342, %add371, !dbg !10321
  store i32 %add372, i32* %C, align 4, !dbg !10321
  %343 = load i32, i32* %C, align 4, !dbg !10321
  %shl373 = shl i32 %343, 14, !dbg !10321
  %344 = load i32, i32* %C, align 4, !dbg !10321
  %shr374 = lshr i32 %344, 18, !dbg !10321
  %or375 = or i32 %shl373, %shr374, !dbg !10321
  store i32 %or375, i32* %C, align 4, !dbg !10321
  %345 = load i32, i32* %D, align 4, !dbg !10321
  %346 = load i32, i32* %C, align 4, !dbg !10321
  %add376 = add i32 %346, %345, !dbg !10321
  store i32 %add376, i32* %C, align 4, !dbg !10321
  br label %do.end377, !dbg !10321

do.end377:                                        ; preds = %do.body365
  br label %do.body378, !dbg !10323

do.body378:                                       ; preds = %do.end377
  %347 = load i32, i32* %D, align 4, !dbg !10324
  %348 = load i32, i32* %A, align 4, !dbg !10324
  %349 = load i32, i32* %C, align 4, !dbg !10324
  %350 = load i32, i32* %D, align 4, !dbg !10324
  %xor379 = xor i32 %349, %350, !dbg !10324
  %and380 = and i32 %348, %xor379, !dbg !10324
  %xor381 = xor i32 %347, %and380, !dbg !10324
  %arrayidx382 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8, !dbg !10324, !ctir !920
  %351 = load i32, i32* %arrayidx382, align 16, !dbg !10324
  %add383 = add i32 %xor381, %351, !dbg !10324
  %add384 = add i32 %add383, 1163531501, !dbg !10324
  %352 = load i32, i32* %B, align 4, !dbg !10324
  %add385 = add i32 %352, %add384, !dbg !10324
  store i32 %add385, i32* %B, align 4, !dbg !10324
  %353 = load i32, i32* %B, align 4, !dbg !10324
  %shl386 = shl i32 %353, 20, !dbg !10324
  %354 = load i32, i32* %B, align 4, !dbg !10324
  %shr387 = lshr i32 %354, 12, !dbg !10324
  %or388 = or i32 %shl386, %shr387, !dbg !10324
  store i32 %or388, i32* %B, align 4, !dbg !10324
  %355 = load i32, i32* %C, align 4, !dbg !10324
  %356 = load i32, i32* %B, align 4, !dbg !10324
  %add389 = add i32 %356, %355, !dbg !10324
  store i32 %add389, i32* %B, align 4, !dbg !10324
  br label %do.end390, !dbg !10324

do.end390:                                        ; preds = %do.body378
  br label %do.body391, !dbg !10326

do.body391:                                       ; preds = %do.end390
  %357 = load i32, i32* %C, align 4, !dbg !10327
  %358 = load i32, i32* %D, align 4, !dbg !10327
  %359 = load i32, i32* %B, align 4, !dbg !10327
  %360 = load i32, i32* %C, align 4, !dbg !10327
  %xor392 = xor i32 %359, %360, !dbg !10327
  %and393 = and i32 %358, %xor392, !dbg !10327
  %xor394 = xor i32 %357, %and393, !dbg !10327
  %arrayidx395 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13, !dbg !10327, !ctir !920
  %361 = load i32, i32* %arrayidx395, align 4, !dbg !10327
  %add396 = add i32 %xor394, %361, !dbg !10327
  %add397 = add i32 %add396, -1444681467, !dbg !10327
  %362 = load i32, i32* %A, align 4, !dbg !10327
  %add398 = add i32 %362, %add397, !dbg !10327
  store i32 %add398, i32* %A, align 4, !dbg !10327
  %363 = load i32, i32* %A, align 4, !dbg !10327
  %shl399 = shl i32 %363, 5, !dbg !10327
  %364 = load i32, i32* %A, align 4, !dbg !10327
  %shr400 = lshr i32 %364, 27, !dbg !10327
  %or401 = or i32 %shl399, %shr400, !dbg !10327
  store i32 %or401, i32* %A, align 4, !dbg !10327
  %365 = load i32, i32* %B, align 4, !dbg !10327
  %366 = load i32, i32* %A, align 4, !dbg !10327
  %add402 = add i32 %366, %365, !dbg !10327
  store i32 %add402, i32* %A, align 4, !dbg !10327
  br label %do.end403, !dbg !10327

do.end403:                                        ; preds = %do.body391
  br label %do.body404, !dbg !10329

do.body404:                                       ; preds = %do.end403
  %367 = load i32, i32* %B, align 4, !dbg !10330
  %368 = load i32, i32* %C, align 4, !dbg !10330
  %369 = load i32, i32* %A, align 4, !dbg !10330
  %370 = load i32, i32* %B, align 4, !dbg !10330
  %xor405 = xor i32 %369, %370, !dbg !10330
  %and406 = and i32 %368, %xor405, !dbg !10330
  %xor407 = xor i32 %367, %and406, !dbg !10330
  %arrayidx408 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2, !dbg !10330, !ctir !920
  %371 = load i32, i32* %arrayidx408, align 8, !dbg !10330
  %add409 = add i32 %xor407, %371, !dbg !10330
  %add410 = add i32 %add409, -51403784, !dbg !10330
  %372 = load i32, i32* %D, align 4, !dbg !10330
  %add411 = add i32 %372, %add410, !dbg !10330
  store i32 %add411, i32* %D, align 4, !dbg !10330
  %373 = load i32, i32* %D, align 4, !dbg !10330
  %shl412 = shl i32 %373, 9, !dbg !10330
  %374 = load i32, i32* %D, align 4, !dbg !10330
  %shr413 = lshr i32 %374, 23, !dbg !10330
  %or414 = or i32 %shl412, %shr413, !dbg !10330
  store i32 %or414, i32* %D, align 4, !dbg !10330
  %375 = load i32, i32* %A, align 4, !dbg !10330
  %376 = load i32, i32* %D, align 4, !dbg !10330
  %add415 = add i32 %376, %375, !dbg !10330
  store i32 %add415, i32* %D, align 4, !dbg !10330
  br label %do.end416, !dbg !10330

do.end416:                                        ; preds = %do.body404
  br label %do.body417, !dbg !10332

do.body417:                                       ; preds = %do.end416
  %377 = load i32, i32* %A, align 4, !dbg !10333
  %378 = load i32, i32* %B, align 4, !dbg !10333
  %379 = load i32, i32* %D, align 4, !dbg !10333
  %380 = load i32, i32* %A, align 4, !dbg !10333
  %xor418 = xor i32 %379, %380, !dbg !10333
  %and419 = and i32 %378, %xor418, !dbg !10333
  %xor420 = xor i32 %377, %and419, !dbg !10333
  %arrayidx421 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7, !dbg !10333, !ctir !920
  %381 = load i32, i32* %arrayidx421, align 4, !dbg !10333
  %add422 = add i32 %xor420, %381, !dbg !10333
  %add423 = add i32 %add422, 1735328473, !dbg !10333
  %382 = load i32, i32* %C, align 4, !dbg !10333
  %add424 = add i32 %382, %add423, !dbg !10333
  store i32 %add424, i32* %C, align 4, !dbg !10333
  %383 = load i32, i32* %C, align 4, !dbg !10333
  %shl425 = shl i32 %383, 14, !dbg !10333
  %384 = load i32, i32* %C, align 4, !dbg !10333
  %shr426 = lshr i32 %384, 18, !dbg !10333
  %or427 = or i32 %shl425, %shr426, !dbg !10333
  store i32 %or427, i32* %C, align 4, !dbg !10333
  %385 = load i32, i32* %D, align 4, !dbg !10333
  %386 = load i32, i32* %C, align 4, !dbg !10333
  %add428 = add i32 %386, %385, !dbg !10333
  store i32 %add428, i32* %C, align 4, !dbg !10333
  br label %do.end429, !dbg !10333

do.end429:                                        ; preds = %do.body417
  br label %do.body430, !dbg !10335

do.body430:                                       ; preds = %do.end429
  %387 = load i32, i32* %D, align 4, !dbg !10336
  %388 = load i32, i32* %A, align 4, !dbg !10336
  %389 = load i32, i32* %C, align 4, !dbg !10336
  %390 = load i32, i32* %D, align 4, !dbg !10336
  %xor431 = xor i32 %389, %390, !dbg !10336
  %and432 = and i32 %388, %xor431, !dbg !10336
  %xor433 = xor i32 %387, %and432, !dbg !10336
  %arrayidx434 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12, !dbg !10336, !ctir !920
  %391 = load i32, i32* %arrayidx434, align 16, !dbg !10336
  %add435 = add i32 %xor433, %391, !dbg !10336
  %add436 = add i32 %add435, -1926607734, !dbg !10336
  %392 = load i32, i32* %B, align 4, !dbg !10336
  %add437 = add i32 %392, %add436, !dbg !10336
  store i32 %add437, i32* %B, align 4, !dbg !10336
  %393 = load i32, i32* %B, align 4, !dbg !10336
  %shl438 = shl i32 %393, 20, !dbg !10336
  %394 = load i32, i32* %B, align 4, !dbg !10336
  %shr439 = lshr i32 %394, 12, !dbg !10336
  %or440 = or i32 %shl438, %shr439, !dbg !10336
  store i32 %or440, i32* %B, align 4, !dbg !10336
  %395 = load i32, i32* %C, align 4, !dbg !10336
  %396 = load i32, i32* %B, align 4, !dbg !10336
  %add441 = add i32 %396, %395, !dbg !10336
  store i32 %add441, i32* %B, align 4, !dbg !10336
  br label %do.end442, !dbg !10336

do.end442:                                        ; preds = %do.body430
  br label %do.body443, !dbg !10338

do.body443:                                       ; preds = %do.end442
  %397 = load i32, i32* %B, align 4, !dbg !10339
  %398 = load i32, i32* %C, align 4, !dbg !10339
  %xor444 = xor i32 %397, %398, !dbg !10339
  %399 = load i32, i32* %D, align 4, !dbg !10339
  %xor445 = xor i32 %xor444, %399, !dbg !10339
  %arrayidx446 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5, !dbg !10339, !ctir !920
  %400 = load i32, i32* %arrayidx446, align 4, !dbg !10339
  %add447 = add i32 %xor445, %400, !dbg !10339
  %add448 = add i32 %add447, -378558, !dbg !10339
  %401 = load i32, i32* %A, align 4, !dbg !10339
  %add449 = add i32 %401, %add448, !dbg !10339
  store i32 %add449, i32* %A, align 4, !dbg !10339
  %402 = load i32, i32* %A, align 4, !dbg !10339
  %shl450 = shl i32 %402, 4, !dbg !10339
  %403 = load i32, i32* %A, align 4, !dbg !10339
  %shr451 = lshr i32 %403, 28, !dbg !10339
  %or452 = or i32 %shl450, %shr451, !dbg !10339
  store i32 %or452, i32* %A, align 4, !dbg !10339
  %404 = load i32, i32* %B, align 4, !dbg !10339
  %405 = load i32, i32* %A, align 4, !dbg !10339
  %add453 = add i32 %405, %404, !dbg !10339
  store i32 %add453, i32* %A, align 4, !dbg !10339
  br label %do.end454, !dbg !10339

do.end454:                                        ; preds = %do.body443
  br label %do.body455, !dbg !10341

do.body455:                                       ; preds = %do.end454
  %406 = load i32, i32* %A, align 4, !dbg !10342
  %407 = load i32, i32* %B, align 4, !dbg !10342
  %xor456 = xor i32 %406, %407, !dbg !10342
  %408 = load i32, i32* %C, align 4, !dbg !10342
  %xor457 = xor i32 %xor456, %408, !dbg !10342
  %arrayidx458 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8, !dbg !10342, !ctir !920
  %409 = load i32, i32* %arrayidx458, align 16, !dbg !10342
  %add459 = add i32 %xor457, %409, !dbg !10342
  %add460 = add i32 %add459, -2022574463, !dbg !10342
  %410 = load i32, i32* %D, align 4, !dbg !10342
  %add461 = add i32 %410, %add460, !dbg !10342
  store i32 %add461, i32* %D, align 4, !dbg !10342
  %411 = load i32, i32* %D, align 4, !dbg !10342
  %shl462 = shl i32 %411, 11, !dbg !10342
  %412 = load i32, i32* %D, align 4, !dbg !10342
  %shr463 = lshr i32 %412, 21, !dbg !10342
  %or464 = or i32 %shl462, %shr463, !dbg !10342
  store i32 %or464, i32* %D, align 4, !dbg !10342
  %413 = load i32, i32* %A, align 4, !dbg !10342
  %414 = load i32, i32* %D, align 4, !dbg !10342
  %add465 = add i32 %414, %413, !dbg !10342
  store i32 %add465, i32* %D, align 4, !dbg !10342
  br label %do.end466, !dbg !10342

do.end466:                                        ; preds = %do.body455
  br label %do.body467, !dbg !10344

do.body467:                                       ; preds = %do.end466
  %415 = load i32, i32* %D, align 4, !dbg !10345
  %416 = load i32, i32* %A, align 4, !dbg !10345
  %xor468 = xor i32 %415, %416, !dbg !10345
  %417 = load i32, i32* %B, align 4, !dbg !10345
  %xor469 = xor i32 %xor468, %417, !dbg !10345
  %arrayidx470 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11, !dbg !10345, !ctir !920
  %418 = load i32, i32* %arrayidx470, align 4, !dbg !10345
  %add471 = add i32 %xor469, %418, !dbg !10345
  %add472 = add i32 %add471, 1839030562, !dbg !10345
  %419 = load i32, i32* %C, align 4, !dbg !10345
  %add473 = add i32 %419, %add472, !dbg !10345
  store i32 %add473, i32* %C, align 4, !dbg !10345
  %420 = load i32, i32* %C, align 4, !dbg !10345
  %shl474 = shl i32 %420, 16, !dbg !10345
  %421 = load i32, i32* %C, align 4, !dbg !10345
  %shr475 = lshr i32 %421, 16, !dbg !10345
  %or476 = or i32 %shl474, %shr475, !dbg !10345
  store i32 %or476, i32* %C, align 4, !dbg !10345
  %422 = load i32, i32* %D, align 4, !dbg !10345
  %423 = load i32, i32* %C, align 4, !dbg !10345
  %add477 = add i32 %423, %422, !dbg !10345
  store i32 %add477, i32* %C, align 4, !dbg !10345
  br label %do.end478, !dbg !10345

do.end478:                                        ; preds = %do.body467
  br label %do.body479, !dbg !10347

do.body479:                                       ; preds = %do.end478
  %424 = load i32, i32* %C, align 4, !dbg !10348
  %425 = load i32, i32* %D, align 4, !dbg !10348
  %xor480 = xor i32 %424, %425, !dbg !10348
  %426 = load i32, i32* %A, align 4, !dbg !10348
  %xor481 = xor i32 %xor480, %426, !dbg !10348
  %arrayidx482 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14, !dbg !10348, !ctir !920
  %427 = load i32, i32* %arrayidx482, align 8, !dbg !10348
  %add483 = add i32 %xor481, %427, !dbg !10348
  %add484 = add i32 %add483, -35309556, !dbg !10348
  %428 = load i32, i32* %B, align 4, !dbg !10348
  %add485 = add i32 %428, %add484, !dbg !10348
  store i32 %add485, i32* %B, align 4, !dbg !10348
  %429 = load i32, i32* %B, align 4, !dbg !10348
  %shl486 = shl i32 %429, 23, !dbg !10348
  %430 = load i32, i32* %B, align 4, !dbg !10348
  %shr487 = lshr i32 %430, 9, !dbg !10348
  %or488 = or i32 %shl486, %shr487, !dbg !10348
  store i32 %or488, i32* %B, align 4, !dbg !10348
  %431 = load i32, i32* %C, align 4, !dbg !10348
  %432 = load i32, i32* %B, align 4, !dbg !10348
  %add489 = add i32 %432, %431, !dbg !10348
  store i32 %add489, i32* %B, align 4, !dbg !10348
  br label %do.end490, !dbg !10348

do.end490:                                        ; preds = %do.body479
  br label %do.body491, !dbg !10350

do.body491:                                       ; preds = %do.end490
  %433 = load i32, i32* %B, align 4, !dbg !10351
  %434 = load i32, i32* %C, align 4, !dbg !10351
  %xor492 = xor i32 %433, %434, !dbg !10351
  %435 = load i32, i32* %D, align 4, !dbg !10351
  %xor493 = xor i32 %xor492, %435, !dbg !10351
  %arrayidx494 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1, !dbg !10351, !ctir !920
  %436 = load i32, i32* %arrayidx494, align 4, !dbg !10351
  %add495 = add i32 %xor493, %436, !dbg !10351
  %add496 = add i32 %add495, -1530992060, !dbg !10351
  %437 = load i32, i32* %A, align 4, !dbg !10351
  %add497 = add i32 %437, %add496, !dbg !10351
  store i32 %add497, i32* %A, align 4, !dbg !10351
  %438 = load i32, i32* %A, align 4, !dbg !10351
  %shl498 = shl i32 %438, 4, !dbg !10351
  %439 = load i32, i32* %A, align 4, !dbg !10351
  %shr499 = lshr i32 %439, 28, !dbg !10351
  %or500 = or i32 %shl498, %shr499, !dbg !10351
  store i32 %or500, i32* %A, align 4, !dbg !10351
  %440 = load i32, i32* %B, align 4, !dbg !10351
  %441 = load i32, i32* %A, align 4, !dbg !10351
  %add501 = add i32 %441, %440, !dbg !10351
  store i32 %add501, i32* %A, align 4, !dbg !10351
  br label %do.end502, !dbg !10351

do.end502:                                        ; preds = %do.body491
  br label %do.body503, !dbg !10353

do.body503:                                       ; preds = %do.end502
  %442 = load i32, i32* %A, align 4, !dbg !10354
  %443 = load i32, i32* %B, align 4, !dbg !10354
  %xor504 = xor i32 %442, %443, !dbg !10354
  %444 = load i32, i32* %C, align 4, !dbg !10354
  %xor505 = xor i32 %xor504, %444, !dbg !10354
  %arrayidx506 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4, !dbg !10354, !ctir !920
  %445 = load i32, i32* %arrayidx506, align 16, !dbg !10354
  %add507 = add i32 %xor505, %445, !dbg !10354
  %add508 = add i32 %add507, 1272893353, !dbg !10354
  %446 = load i32, i32* %D, align 4, !dbg !10354
  %add509 = add i32 %446, %add508, !dbg !10354
  store i32 %add509, i32* %D, align 4, !dbg !10354
  %447 = load i32, i32* %D, align 4, !dbg !10354
  %shl510 = shl i32 %447, 11, !dbg !10354
  %448 = load i32, i32* %D, align 4, !dbg !10354
  %shr511 = lshr i32 %448, 21, !dbg !10354
  %or512 = or i32 %shl510, %shr511, !dbg !10354
  store i32 %or512, i32* %D, align 4, !dbg !10354
  %449 = load i32, i32* %A, align 4, !dbg !10354
  %450 = load i32, i32* %D, align 4, !dbg !10354
  %add513 = add i32 %450, %449, !dbg !10354
  store i32 %add513, i32* %D, align 4, !dbg !10354
  br label %do.end514, !dbg !10354

do.end514:                                        ; preds = %do.body503
  br label %do.body515, !dbg !10356

do.body515:                                       ; preds = %do.end514
  %451 = load i32, i32* %D, align 4, !dbg !10357
  %452 = load i32, i32* %A, align 4, !dbg !10357
  %xor516 = xor i32 %451, %452, !dbg !10357
  %453 = load i32, i32* %B, align 4, !dbg !10357
  %xor517 = xor i32 %xor516, %453, !dbg !10357
  %arrayidx518 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7, !dbg !10357, !ctir !920
  %454 = load i32, i32* %arrayidx518, align 4, !dbg !10357
  %add519 = add i32 %xor517, %454, !dbg !10357
  %add520 = add i32 %add519, -155497632, !dbg !10357
  %455 = load i32, i32* %C, align 4, !dbg !10357
  %add521 = add i32 %455, %add520, !dbg !10357
  store i32 %add521, i32* %C, align 4, !dbg !10357
  %456 = load i32, i32* %C, align 4, !dbg !10357
  %shl522 = shl i32 %456, 16, !dbg !10357
  %457 = load i32, i32* %C, align 4, !dbg !10357
  %shr523 = lshr i32 %457, 16, !dbg !10357
  %or524 = or i32 %shl522, %shr523, !dbg !10357
  store i32 %or524, i32* %C, align 4, !dbg !10357
  %458 = load i32, i32* %D, align 4, !dbg !10357
  %459 = load i32, i32* %C, align 4, !dbg !10357
  %add525 = add i32 %459, %458, !dbg !10357
  store i32 %add525, i32* %C, align 4, !dbg !10357
  br label %do.end526, !dbg !10357

do.end526:                                        ; preds = %do.body515
  br label %do.body527, !dbg !10359

do.body527:                                       ; preds = %do.end526
  %460 = load i32, i32* %C, align 4, !dbg !10360
  %461 = load i32, i32* %D, align 4, !dbg !10360
  %xor528 = xor i32 %460, %461, !dbg !10360
  %462 = load i32, i32* %A, align 4, !dbg !10360
  %xor529 = xor i32 %xor528, %462, !dbg !10360
  %arrayidx530 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10, !dbg !10360, !ctir !920
  %463 = load i32, i32* %arrayidx530, align 8, !dbg !10360
  %add531 = add i32 %xor529, %463, !dbg !10360
  %add532 = add i32 %add531, -1094730640, !dbg !10360
  %464 = load i32, i32* %B, align 4, !dbg !10360
  %add533 = add i32 %464, %add532, !dbg !10360
  store i32 %add533, i32* %B, align 4, !dbg !10360
  %465 = load i32, i32* %B, align 4, !dbg !10360
  %shl534 = shl i32 %465, 23, !dbg !10360
  %466 = load i32, i32* %B, align 4, !dbg !10360
  %shr535 = lshr i32 %466, 9, !dbg !10360
  %or536 = or i32 %shl534, %shr535, !dbg !10360
  store i32 %or536, i32* %B, align 4, !dbg !10360
  %467 = load i32, i32* %C, align 4, !dbg !10360
  %468 = load i32, i32* %B, align 4, !dbg !10360
  %add537 = add i32 %468, %467, !dbg !10360
  store i32 %add537, i32* %B, align 4, !dbg !10360
  br label %do.end538, !dbg !10360

do.end538:                                        ; preds = %do.body527
  br label %do.body539, !dbg !10362

do.body539:                                       ; preds = %do.end538
  %469 = load i32, i32* %B, align 4, !dbg !10363
  %470 = load i32, i32* %C, align 4, !dbg !10363
  %xor540 = xor i32 %469, %470, !dbg !10363
  %471 = load i32, i32* %D, align 4, !dbg !10363
  %xor541 = xor i32 %xor540, %471, !dbg !10363
  %arrayidx542 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13, !dbg !10363, !ctir !920
  %472 = load i32, i32* %arrayidx542, align 4, !dbg !10363
  %add543 = add i32 %xor541, %472, !dbg !10363
  %add544 = add i32 %add543, 681279174, !dbg !10363
  %473 = load i32, i32* %A, align 4, !dbg !10363
  %add545 = add i32 %473, %add544, !dbg !10363
  store i32 %add545, i32* %A, align 4, !dbg !10363
  %474 = load i32, i32* %A, align 4, !dbg !10363
  %shl546 = shl i32 %474, 4, !dbg !10363
  %475 = load i32, i32* %A, align 4, !dbg !10363
  %shr547 = lshr i32 %475, 28, !dbg !10363
  %or548 = or i32 %shl546, %shr547, !dbg !10363
  store i32 %or548, i32* %A, align 4, !dbg !10363
  %476 = load i32, i32* %B, align 4, !dbg !10363
  %477 = load i32, i32* %A, align 4, !dbg !10363
  %add549 = add i32 %477, %476, !dbg !10363
  store i32 %add549, i32* %A, align 4, !dbg !10363
  br label %do.end550, !dbg !10363

do.end550:                                        ; preds = %do.body539
  br label %do.body551, !dbg !10365

do.body551:                                       ; preds = %do.end550
  %478 = load i32, i32* %A, align 4, !dbg !10366
  %479 = load i32, i32* %B, align 4, !dbg !10366
  %xor552 = xor i32 %478, %479, !dbg !10366
  %480 = load i32, i32* %C, align 4, !dbg !10366
  %xor553 = xor i32 %xor552, %480, !dbg !10366
  %arrayidx554 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0, !dbg !10366, !ctir !920
  %481 = load i32, i32* %arrayidx554, align 16, !dbg !10366
  %add555 = add i32 %xor553, %481, !dbg !10366
  %add556 = add i32 %add555, -358537222, !dbg !10366
  %482 = load i32, i32* %D, align 4, !dbg !10366
  %add557 = add i32 %482, %add556, !dbg !10366
  store i32 %add557, i32* %D, align 4, !dbg !10366
  %483 = load i32, i32* %D, align 4, !dbg !10366
  %shl558 = shl i32 %483, 11, !dbg !10366
  %484 = load i32, i32* %D, align 4, !dbg !10366
  %shr559 = lshr i32 %484, 21, !dbg !10366
  %or560 = or i32 %shl558, %shr559, !dbg !10366
  store i32 %or560, i32* %D, align 4, !dbg !10366
  %485 = load i32, i32* %A, align 4, !dbg !10366
  %486 = load i32, i32* %D, align 4, !dbg !10366
  %add561 = add i32 %486, %485, !dbg !10366
  store i32 %add561, i32* %D, align 4, !dbg !10366
  br label %do.end562, !dbg !10366

do.end562:                                        ; preds = %do.body551
  br label %do.body563, !dbg !10368

do.body563:                                       ; preds = %do.end562
  %487 = load i32, i32* %D, align 4, !dbg !10369
  %488 = load i32, i32* %A, align 4, !dbg !10369
  %xor564 = xor i32 %487, %488, !dbg !10369
  %489 = load i32, i32* %B, align 4, !dbg !10369
  %xor565 = xor i32 %xor564, %489, !dbg !10369
  %arrayidx566 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3, !dbg !10369, !ctir !920
  %490 = load i32, i32* %arrayidx566, align 4, !dbg !10369
  %add567 = add i32 %xor565, %490, !dbg !10369
  %add568 = add i32 %add567, -722521979, !dbg !10369
  %491 = load i32, i32* %C, align 4, !dbg !10369
  %add569 = add i32 %491, %add568, !dbg !10369
  store i32 %add569, i32* %C, align 4, !dbg !10369
  %492 = load i32, i32* %C, align 4, !dbg !10369
  %shl570 = shl i32 %492, 16, !dbg !10369
  %493 = load i32, i32* %C, align 4, !dbg !10369
  %shr571 = lshr i32 %493, 16, !dbg !10369
  %or572 = or i32 %shl570, %shr571, !dbg !10369
  store i32 %or572, i32* %C, align 4, !dbg !10369
  %494 = load i32, i32* %D, align 4, !dbg !10369
  %495 = load i32, i32* %C, align 4, !dbg !10369
  %add573 = add i32 %495, %494, !dbg !10369
  store i32 %add573, i32* %C, align 4, !dbg !10369
  br label %do.end574, !dbg !10369

do.end574:                                        ; preds = %do.body563
  br label %do.body575, !dbg !10371

do.body575:                                       ; preds = %do.end574
  %496 = load i32, i32* %C, align 4, !dbg !10372
  %497 = load i32, i32* %D, align 4, !dbg !10372
  %xor576 = xor i32 %496, %497, !dbg !10372
  %498 = load i32, i32* %A, align 4, !dbg !10372
  %xor577 = xor i32 %xor576, %498, !dbg !10372
  %arrayidx578 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6, !dbg !10372, !ctir !920
  %499 = load i32, i32* %arrayidx578, align 8, !dbg !10372
  %add579 = add i32 %xor577, %499, !dbg !10372
  %add580 = add i32 %add579, 76029189, !dbg !10372
  %500 = load i32, i32* %B, align 4, !dbg !10372
  %add581 = add i32 %500, %add580, !dbg !10372
  store i32 %add581, i32* %B, align 4, !dbg !10372
  %501 = load i32, i32* %B, align 4, !dbg !10372
  %shl582 = shl i32 %501, 23, !dbg !10372
  %502 = load i32, i32* %B, align 4, !dbg !10372
  %shr583 = lshr i32 %502, 9, !dbg !10372
  %or584 = or i32 %shl582, %shr583, !dbg !10372
  store i32 %or584, i32* %B, align 4, !dbg !10372
  %503 = load i32, i32* %C, align 4, !dbg !10372
  %504 = load i32, i32* %B, align 4, !dbg !10372
  %add585 = add i32 %504, %503, !dbg !10372
  store i32 %add585, i32* %B, align 4, !dbg !10372
  br label %do.end586, !dbg !10372

do.end586:                                        ; preds = %do.body575
  br label %do.body587, !dbg !10374

do.body587:                                       ; preds = %do.end586
  %505 = load i32, i32* %B, align 4, !dbg !10375
  %506 = load i32, i32* %C, align 4, !dbg !10375
  %xor588 = xor i32 %505, %506, !dbg !10375
  %507 = load i32, i32* %D, align 4, !dbg !10375
  %xor589 = xor i32 %xor588, %507, !dbg !10375
  %arrayidx590 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9, !dbg !10375, !ctir !920
  %508 = load i32, i32* %arrayidx590, align 4, !dbg !10375
  %add591 = add i32 %xor589, %508, !dbg !10375
  %add592 = add i32 %add591, -640364487, !dbg !10375
  %509 = load i32, i32* %A, align 4, !dbg !10375
  %add593 = add i32 %509, %add592, !dbg !10375
  store i32 %add593, i32* %A, align 4, !dbg !10375
  %510 = load i32, i32* %A, align 4, !dbg !10375
  %shl594 = shl i32 %510, 4, !dbg !10375
  %511 = load i32, i32* %A, align 4, !dbg !10375
  %shr595 = lshr i32 %511, 28, !dbg !10375
  %or596 = or i32 %shl594, %shr595, !dbg !10375
  store i32 %or596, i32* %A, align 4, !dbg !10375
  %512 = load i32, i32* %B, align 4, !dbg !10375
  %513 = load i32, i32* %A, align 4, !dbg !10375
  %add597 = add i32 %513, %512, !dbg !10375
  store i32 %add597, i32* %A, align 4, !dbg !10375
  br label %do.end598, !dbg !10375

do.end598:                                        ; preds = %do.body587
  br label %do.body599, !dbg !10377

do.body599:                                       ; preds = %do.end598
  %514 = load i32, i32* %A, align 4, !dbg !10378
  %515 = load i32, i32* %B, align 4, !dbg !10378
  %xor600 = xor i32 %514, %515, !dbg !10378
  %516 = load i32, i32* %C, align 4, !dbg !10378
  %xor601 = xor i32 %xor600, %516, !dbg !10378
  %arrayidx602 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12, !dbg !10378, !ctir !920
  %517 = load i32, i32* %arrayidx602, align 16, !dbg !10378
  %add603 = add i32 %xor601, %517, !dbg !10378
  %add604 = add i32 %add603, -421815835, !dbg !10378
  %518 = load i32, i32* %D, align 4, !dbg !10378
  %add605 = add i32 %518, %add604, !dbg !10378
  store i32 %add605, i32* %D, align 4, !dbg !10378
  %519 = load i32, i32* %D, align 4, !dbg !10378
  %shl606 = shl i32 %519, 11, !dbg !10378
  %520 = load i32, i32* %D, align 4, !dbg !10378
  %shr607 = lshr i32 %520, 21, !dbg !10378
  %or608 = or i32 %shl606, %shr607, !dbg !10378
  store i32 %or608, i32* %D, align 4, !dbg !10378
  %521 = load i32, i32* %A, align 4, !dbg !10378
  %522 = load i32, i32* %D, align 4, !dbg !10378
  %add609 = add i32 %522, %521, !dbg !10378
  store i32 %add609, i32* %D, align 4, !dbg !10378
  br label %do.end610, !dbg !10378

do.end610:                                        ; preds = %do.body599
  br label %do.body611, !dbg !10380

do.body611:                                       ; preds = %do.end610
  %523 = load i32, i32* %D, align 4, !dbg !10381
  %524 = load i32, i32* %A, align 4, !dbg !10381
  %xor612 = xor i32 %523, %524, !dbg !10381
  %525 = load i32, i32* %B, align 4, !dbg !10381
  %xor613 = xor i32 %xor612, %525, !dbg !10381
  %arrayidx614 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15, !dbg !10381, !ctir !920
  %526 = load i32, i32* %arrayidx614, align 4, !dbg !10381
  %add615 = add i32 %xor613, %526, !dbg !10381
  %add616 = add i32 %add615, 530742520, !dbg !10381
  %527 = load i32, i32* %C, align 4, !dbg !10381
  %add617 = add i32 %527, %add616, !dbg !10381
  store i32 %add617, i32* %C, align 4, !dbg !10381
  %528 = load i32, i32* %C, align 4, !dbg !10381
  %shl618 = shl i32 %528, 16, !dbg !10381
  %529 = load i32, i32* %C, align 4, !dbg !10381
  %shr619 = lshr i32 %529, 16, !dbg !10381
  %or620 = or i32 %shl618, %shr619, !dbg !10381
  store i32 %or620, i32* %C, align 4, !dbg !10381
  %530 = load i32, i32* %D, align 4, !dbg !10381
  %531 = load i32, i32* %C, align 4, !dbg !10381
  %add621 = add i32 %531, %530, !dbg !10381
  store i32 %add621, i32* %C, align 4, !dbg !10381
  br label %do.end622, !dbg !10381

do.end622:                                        ; preds = %do.body611
  br label %do.body623, !dbg !10383

do.body623:                                       ; preds = %do.end622
  %532 = load i32, i32* %C, align 4, !dbg !10384
  %533 = load i32, i32* %D, align 4, !dbg !10384
  %xor624 = xor i32 %532, %533, !dbg !10384
  %534 = load i32, i32* %A, align 4, !dbg !10384
  %xor625 = xor i32 %xor624, %534, !dbg !10384
  %arrayidx626 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2, !dbg !10384, !ctir !920
  %535 = load i32, i32* %arrayidx626, align 8, !dbg !10384
  %add627 = add i32 %xor625, %535, !dbg !10384
  %add628 = add i32 %add627, -995338651, !dbg !10384
  %536 = load i32, i32* %B, align 4, !dbg !10384
  %add629 = add i32 %536, %add628, !dbg !10384
  store i32 %add629, i32* %B, align 4, !dbg !10384
  %537 = load i32, i32* %B, align 4, !dbg !10384
  %shl630 = shl i32 %537, 23, !dbg !10384
  %538 = load i32, i32* %B, align 4, !dbg !10384
  %shr631 = lshr i32 %538, 9, !dbg !10384
  %or632 = or i32 %shl630, %shr631, !dbg !10384
  store i32 %or632, i32* %B, align 4, !dbg !10384
  %539 = load i32, i32* %C, align 4, !dbg !10384
  %540 = load i32, i32* %B, align 4, !dbg !10384
  %add633 = add i32 %540, %539, !dbg !10384
  store i32 %add633, i32* %B, align 4, !dbg !10384
  br label %do.end634, !dbg !10384

do.end634:                                        ; preds = %do.body623
  br label %do.body635, !dbg !10386

do.body635:                                       ; preds = %do.end634
  %541 = load i32, i32* %C, align 4, !dbg !10387
  %542 = load i32, i32* %B, align 4, !dbg !10387
  %543 = load i32, i32* %D, align 4, !dbg !10387
  %neg = xor i32 %543, -1, !dbg !10387
  %or636 = or i32 %542, %neg, !dbg !10387
  %xor637 = xor i32 %541, %or636, !dbg !10387
  %arrayidx638 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 0, !dbg !10387, !ctir !920
  %544 = load i32, i32* %arrayidx638, align 16, !dbg !10387
  %add639 = add i32 %xor637, %544, !dbg !10387
  %add640 = add i32 %add639, -198630844, !dbg !10387
  %545 = load i32, i32* %A, align 4, !dbg !10387
  %add641 = add i32 %545, %add640, !dbg !10387
  store i32 %add641, i32* %A, align 4, !dbg !10387
  %546 = load i32, i32* %A, align 4, !dbg !10387
  %shl642 = shl i32 %546, 6, !dbg !10387
  %547 = load i32, i32* %A, align 4, !dbg !10387
  %shr643 = lshr i32 %547, 26, !dbg !10387
  %or644 = or i32 %shl642, %shr643, !dbg !10387
  store i32 %or644, i32* %A, align 4, !dbg !10387
  %548 = load i32, i32* %B, align 4, !dbg !10387
  %549 = load i32, i32* %A, align 4, !dbg !10387
  %add645 = add i32 %549, %548, !dbg !10387
  store i32 %add645, i32* %A, align 4, !dbg !10387
  br label %do.end646, !dbg !10387

do.end646:                                        ; preds = %do.body635
  br label %do.body647, !dbg !10389

do.body647:                                       ; preds = %do.end646
  %550 = load i32, i32* %B, align 4, !dbg !10390
  %551 = load i32, i32* %A, align 4, !dbg !10390
  %552 = load i32, i32* %C, align 4, !dbg !10390
  %neg648 = xor i32 %552, -1, !dbg !10390
  %or649 = or i32 %551, %neg648, !dbg !10390
  %xor650 = xor i32 %550, %or649, !dbg !10390
  %arrayidx651 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 7, !dbg !10390, !ctir !920
  %553 = load i32, i32* %arrayidx651, align 4, !dbg !10390
  %add652 = add i32 %xor650, %553, !dbg !10390
  %add653 = add i32 %add652, 1126891415, !dbg !10390
  %554 = load i32, i32* %D, align 4, !dbg !10390
  %add654 = add i32 %554, %add653, !dbg !10390
  store i32 %add654, i32* %D, align 4, !dbg !10390
  %555 = load i32, i32* %D, align 4, !dbg !10390
  %shl655 = shl i32 %555, 10, !dbg !10390
  %556 = load i32, i32* %D, align 4, !dbg !10390
  %shr656 = lshr i32 %556, 22, !dbg !10390
  %or657 = or i32 %shl655, %shr656, !dbg !10390
  store i32 %or657, i32* %D, align 4, !dbg !10390
  %557 = load i32, i32* %A, align 4, !dbg !10390
  %558 = load i32, i32* %D, align 4, !dbg !10390
  %add658 = add i32 %558, %557, !dbg !10390
  store i32 %add658, i32* %D, align 4, !dbg !10390
  br label %do.end659, !dbg !10390

do.end659:                                        ; preds = %do.body647
  br label %do.body660, !dbg !10392

do.body660:                                       ; preds = %do.end659
  %559 = load i32, i32* %A, align 4, !dbg !10393
  %560 = load i32, i32* %D, align 4, !dbg !10393
  %561 = load i32, i32* %B, align 4, !dbg !10393
  %neg661 = xor i32 %561, -1, !dbg !10393
  %or662 = or i32 %560, %neg661, !dbg !10393
  %xor663 = xor i32 %559, %or662, !dbg !10393
  %arrayidx664 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 14, !dbg !10393, !ctir !920
  %562 = load i32, i32* %arrayidx664, align 8, !dbg !10393
  %add665 = add i32 %xor663, %562, !dbg !10393
  %add666 = add i32 %add665, -1416354905, !dbg !10393
  %563 = load i32, i32* %C, align 4, !dbg !10393
  %add667 = add i32 %563, %add666, !dbg !10393
  store i32 %add667, i32* %C, align 4, !dbg !10393
  %564 = load i32, i32* %C, align 4, !dbg !10393
  %shl668 = shl i32 %564, 15, !dbg !10393
  %565 = load i32, i32* %C, align 4, !dbg !10393
  %shr669 = lshr i32 %565, 17, !dbg !10393
  %or670 = or i32 %shl668, %shr669, !dbg !10393
  store i32 %or670, i32* %C, align 4, !dbg !10393
  %566 = load i32, i32* %D, align 4, !dbg !10393
  %567 = load i32, i32* %C, align 4, !dbg !10393
  %add671 = add i32 %567, %566, !dbg !10393
  store i32 %add671, i32* %C, align 4, !dbg !10393
  br label %do.end672, !dbg !10393

do.end672:                                        ; preds = %do.body660
  br label %do.body673, !dbg !10395

do.body673:                                       ; preds = %do.end672
  %568 = load i32, i32* %D, align 4, !dbg !10396
  %569 = load i32, i32* %C, align 4, !dbg !10396
  %570 = load i32, i32* %A, align 4, !dbg !10396
  %neg674 = xor i32 %570, -1, !dbg !10396
  %or675 = or i32 %569, %neg674, !dbg !10396
  %xor676 = xor i32 %568, %or675, !dbg !10396
  %arrayidx677 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 5, !dbg !10396, !ctir !920
  %571 = load i32, i32* %arrayidx677, align 4, !dbg !10396
  %add678 = add i32 %xor676, %571, !dbg !10396
  %add679 = add i32 %add678, -57434055, !dbg !10396
  %572 = load i32, i32* %B, align 4, !dbg !10396
  %add680 = add i32 %572, %add679, !dbg !10396
  store i32 %add680, i32* %B, align 4, !dbg !10396
  %573 = load i32, i32* %B, align 4, !dbg !10396
  %shl681 = shl i32 %573, 21, !dbg !10396
  %574 = load i32, i32* %B, align 4, !dbg !10396
  %shr682 = lshr i32 %574, 11, !dbg !10396
  %or683 = or i32 %shl681, %shr682, !dbg !10396
  store i32 %or683, i32* %B, align 4, !dbg !10396
  %575 = load i32, i32* %C, align 4, !dbg !10396
  %576 = load i32, i32* %B, align 4, !dbg !10396
  %add684 = add i32 %576, %575, !dbg !10396
  store i32 %add684, i32* %B, align 4, !dbg !10396
  br label %do.end685, !dbg !10396

do.end685:                                        ; preds = %do.body673
  br label %do.body686, !dbg !10398

do.body686:                                       ; preds = %do.end685
  %577 = load i32, i32* %C, align 4, !dbg !10399
  %578 = load i32, i32* %B, align 4, !dbg !10399
  %579 = load i32, i32* %D, align 4, !dbg !10399
  %neg687 = xor i32 %579, -1, !dbg !10399
  %or688 = or i32 %578, %neg687, !dbg !10399
  %xor689 = xor i32 %577, %or688, !dbg !10399
  %arrayidx690 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 12, !dbg !10399, !ctir !920
  %580 = load i32, i32* %arrayidx690, align 16, !dbg !10399
  %add691 = add i32 %xor689, %580, !dbg !10399
  %add692 = add i32 %add691, 1700485571, !dbg !10399
  %581 = load i32, i32* %A, align 4, !dbg !10399
  %add693 = add i32 %581, %add692, !dbg !10399
  store i32 %add693, i32* %A, align 4, !dbg !10399
  %582 = load i32, i32* %A, align 4, !dbg !10399
  %shl694 = shl i32 %582, 6, !dbg !10399
  %583 = load i32, i32* %A, align 4, !dbg !10399
  %shr695 = lshr i32 %583, 26, !dbg !10399
  %or696 = or i32 %shl694, %shr695, !dbg !10399
  store i32 %or696, i32* %A, align 4, !dbg !10399
  %584 = load i32, i32* %B, align 4, !dbg !10399
  %585 = load i32, i32* %A, align 4, !dbg !10399
  %add697 = add i32 %585, %584, !dbg !10399
  store i32 %add697, i32* %A, align 4, !dbg !10399
  br label %do.end698, !dbg !10399

do.end698:                                        ; preds = %do.body686
  br label %do.body699, !dbg !10401

do.body699:                                       ; preds = %do.end698
  %586 = load i32, i32* %B, align 4, !dbg !10402
  %587 = load i32, i32* %A, align 4, !dbg !10402
  %588 = load i32, i32* %C, align 4, !dbg !10402
  %neg700 = xor i32 %588, -1, !dbg !10402
  %or701 = or i32 %587, %neg700, !dbg !10402
  %xor702 = xor i32 %586, %or701, !dbg !10402
  %arrayidx703 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 3, !dbg !10402, !ctir !920
  %589 = load i32, i32* %arrayidx703, align 4, !dbg !10402
  %add704 = add i32 %xor702, %589, !dbg !10402
  %add705 = add i32 %add704, -1894986606, !dbg !10402
  %590 = load i32, i32* %D, align 4, !dbg !10402
  %add706 = add i32 %590, %add705, !dbg !10402
  store i32 %add706, i32* %D, align 4, !dbg !10402
  %591 = load i32, i32* %D, align 4, !dbg !10402
  %shl707 = shl i32 %591, 10, !dbg !10402
  %592 = load i32, i32* %D, align 4, !dbg !10402
  %shr708 = lshr i32 %592, 22, !dbg !10402
  %or709 = or i32 %shl707, %shr708, !dbg !10402
  store i32 %or709, i32* %D, align 4, !dbg !10402
  %593 = load i32, i32* %A, align 4, !dbg !10402
  %594 = load i32, i32* %D, align 4, !dbg !10402
  %add710 = add i32 %594, %593, !dbg !10402
  store i32 %add710, i32* %D, align 4, !dbg !10402
  br label %do.end711, !dbg !10402

do.end711:                                        ; preds = %do.body699
  br label %do.body712, !dbg !10404

do.body712:                                       ; preds = %do.end711
  %595 = load i32, i32* %A, align 4, !dbg !10405
  %596 = load i32, i32* %D, align 4, !dbg !10405
  %597 = load i32, i32* %B, align 4, !dbg !10405
  %neg713 = xor i32 %597, -1, !dbg !10405
  %or714 = or i32 %596, %neg713, !dbg !10405
  %xor715 = xor i32 %595, %or714, !dbg !10405
  %arrayidx716 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 10, !dbg !10405, !ctir !920
  %598 = load i32, i32* %arrayidx716, align 8, !dbg !10405
  %add717 = add i32 %xor715, %598, !dbg !10405
  %add718 = add i32 %add717, -1051523, !dbg !10405
  %599 = load i32, i32* %C, align 4, !dbg !10405
  %add719 = add i32 %599, %add718, !dbg !10405
  store i32 %add719, i32* %C, align 4, !dbg !10405
  %600 = load i32, i32* %C, align 4, !dbg !10405
  %shl720 = shl i32 %600, 15, !dbg !10405
  %601 = load i32, i32* %C, align 4, !dbg !10405
  %shr721 = lshr i32 %601, 17, !dbg !10405
  %or722 = or i32 %shl720, %shr721, !dbg !10405
  store i32 %or722, i32* %C, align 4, !dbg !10405
  %602 = load i32, i32* %D, align 4, !dbg !10405
  %603 = load i32, i32* %C, align 4, !dbg !10405
  %add723 = add i32 %603, %602, !dbg !10405
  store i32 %add723, i32* %C, align 4, !dbg !10405
  br label %do.end724, !dbg !10405

do.end724:                                        ; preds = %do.body712
  br label %do.body725, !dbg !10407

do.body725:                                       ; preds = %do.end724
  %604 = load i32, i32* %D, align 4, !dbg !10408
  %605 = load i32, i32* %C, align 4, !dbg !10408
  %606 = load i32, i32* %A, align 4, !dbg !10408
  %neg726 = xor i32 %606, -1, !dbg !10408
  %or727 = or i32 %605, %neg726, !dbg !10408
  %xor728 = xor i32 %604, %or727, !dbg !10408
  %arrayidx729 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 1, !dbg !10408, !ctir !920
  %607 = load i32, i32* %arrayidx729, align 4, !dbg !10408
  %add730 = add i32 %xor728, %607, !dbg !10408
  %add731 = add i32 %add730, -2054922799, !dbg !10408
  %608 = load i32, i32* %B, align 4, !dbg !10408
  %add732 = add i32 %608, %add731, !dbg !10408
  store i32 %add732, i32* %B, align 4, !dbg !10408
  %609 = load i32, i32* %B, align 4, !dbg !10408
  %shl733 = shl i32 %609, 21, !dbg !10408
  %610 = load i32, i32* %B, align 4, !dbg !10408
  %shr734 = lshr i32 %610, 11, !dbg !10408
  %or735 = or i32 %shl733, %shr734, !dbg !10408
  store i32 %or735, i32* %B, align 4, !dbg !10408
  %611 = load i32, i32* %C, align 4, !dbg !10408
  %612 = load i32, i32* %B, align 4, !dbg !10408
  %add736 = add i32 %612, %611, !dbg !10408
  store i32 %add736, i32* %B, align 4, !dbg !10408
  br label %do.end737, !dbg !10408

do.end737:                                        ; preds = %do.body725
  br label %do.body738, !dbg !10410

do.body738:                                       ; preds = %do.end737
  %613 = load i32, i32* %C, align 4, !dbg !10411
  %614 = load i32, i32* %B, align 4, !dbg !10411
  %615 = load i32, i32* %D, align 4, !dbg !10411
  %neg739 = xor i32 %615, -1, !dbg !10411
  %or740 = or i32 %614, %neg739, !dbg !10411
  %xor741 = xor i32 %613, %or740, !dbg !10411
  %arrayidx742 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 8, !dbg !10411, !ctir !920
  %616 = load i32, i32* %arrayidx742, align 16, !dbg !10411
  %add743 = add i32 %xor741, %616, !dbg !10411
  %add744 = add i32 %add743, 1873313359, !dbg !10411
  %617 = load i32, i32* %A, align 4, !dbg !10411
  %add745 = add i32 %617, %add744, !dbg !10411
  store i32 %add745, i32* %A, align 4, !dbg !10411
  %618 = load i32, i32* %A, align 4, !dbg !10411
  %shl746 = shl i32 %618, 6, !dbg !10411
  %619 = load i32, i32* %A, align 4, !dbg !10411
  %shr747 = lshr i32 %619, 26, !dbg !10411
  %or748 = or i32 %shl746, %shr747, !dbg !10411
  store i32 %or748, i32* %A, align 4, !dbg !10411
  %620 = load i32, i32* %B, align 4, !dbg !10411
  %621 = load i32, i32* %A, align 4, !dbg !10411
  %add749 = add i32 %621, %620, !dbg !10411
  store i32 %add749, i32* %A, align 4, !dbg !10411
  br label %do.end750, !dbg !10411

do.end750:                                        ; preds = %do.body738
  br label %do.body751, !dbg !10413

do.body751:                                       ; preds = %do.end750
  %622 = load i32, i32* %B, align 4, !dbg !10414
  %623 = load i32, i32* %A, align 4, !dbg !10414
  %624 = load i32, i32* %C, align 4, !dbg !10414
  %neg752 = xor i32 %624, -1, !dbg !10414
  %or753 = or i32 %623, %neg752, !dbg !10414
  %xor754 = xor i32 %622, %or753, !dbg !10414
  %arrayidx755 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 15, !dbg !10414, !ctir !920
  %625 = load i32, i32* %arrayidx755, align 4, !dbg !10414
  %add756 = add i32 %xor754, %625, !dbg !10414
  %add757 = add i32 %add756, -30611744, !dbg !10414
  %626 = load i32, i32* %D, align 4, !dbg !10414
  %add758 = add i32 %626, %add757, !dbg !10414
  store i32 %add758, i32* %D, align 4, !dbg !10414
  %627 = load i32, i32* %D, align 4, !dbg !10414
  %shl759 = shl i32 %627, 10, !dbg !10414
  %628 = load i32, i32* %D, align 4, !dbg !10414
  %shr760 = lshr i32 %628, 22, !dbg !10414
  %or761 = or i32 %shl759, %shr760, !dbg !10414
  store i32 %or761, i32* %D, align 4, !dbg !10414
  %629 = load i32, i32* %A, align 4, !dbg !10414
  %630 = load i32, i32* %D, align 4, !dbg !10414
  %add762 = add i32 %630, %629, !dbg !10414
  store i32 %add762, i32* %D, align 4, !dbg !10414
  br label %do.end763, !dbg !10414

do.end763:                                        ; preds = %do.body751
  br label %do.body764, !dbg !10416

do.body764:                                       ; preds = %do.end763
  %631 = load i32, i32* %A, align 4, !dbg !10417
  %632 = load i32, i32* %D, align 4, !dbg !10417
  %633 = load i32, i32* %B, align 4, !dbg !10417
  %neg765 = xor i32 %633, -1, !dbg !10417
  %or766 = or i32 %632, %neg765, !dbg !10417
  %xor767 = xor i32 %631, %or766, !dbg !10417
  %arrayidx768 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 6, !dbg !10417, !ctir !920
  %634 = load i32, i32* %arrayidx768, align 8, !dbg !10417
  %add769 = add i32 %xor767, %634, !dbg !10417
  %add770 = add i32 %add769, -1560198380, !dbg !10417
  %635 = load i32, i32* %C, align 4, !dbg !10417
  %add771 = add i32 %635, %add770, !dbg !10417
  store i32 %add771, i32* %C, align 4, !dbg !10417
  %636 = load i32, i32* %C, align 4, !dbg !10417
  %shl772 = shl i32 %636, 15, !dbg !10417
  %637 = load i32, i32* %C, align 4, !dbg !10417
  %shr773 = lshr i32 %637, 17, !dbg !10417
  %or774 = or i32 %shl772, %shr773, !dbg !10417
  store i32 %or774, i32* %C, align 4, !dbg !10417
  %638 = load i32, i32* %D, align 4, !dbg !10417
  %639 = load i32, i32* %C, align 4, !dbg !10417
  %add775 = add i32 %639, %638, !dbg !10417
  store i32 %add775, i32* %C, align 4, !dbg !10417
  br label %do.end776, !dbg !10417

do.end776:                                        ; preds = %do.body764
  br label %do.body777, !dbg !10419

do.body777:                                       ; preds = %do.end776
  %640 = load i32, i32* %D, align 4, !dbg !10420
  %641 = load i32, i32* %C, align 4, !dbg !10420
  %642 = load i32, i32* %A, align 4, !dbg !10420
  %neg778 = xor i32 %642, -1, !dbg !10420
  %or779 = or i32 %641, %neg778, !dbg !10420
  %xor780 = xor i32 %640, %or779, !dbg !10420
  %arrayidx781 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 13, !dbg !10420, !ctir !920
  %643 = load i32, i32* %arrayidx781, align 4, !dbg !10420
  %add782 = add i32 %xor780, %643, !dbg !10420
  %add783 = add i32 %add782, 1309151649, !dbg !10420
  %644 = load i32, i32* %B, align 4, !dbg !10420
  %add784 = add i32 %644, %add783, !dbg !10420
  store i32 %add784, i32* %B, align 4, !dbg !10420
  %645 = load i32, i32* %B, align 4, !dbg !10420
  %shl785 = shl i32 %645, 21, !dbg !10420
  %646 = load i32, i32* %B, align 4, !dbg !10420
  %shr786 = lshr i32 %646, 11, !dbg !10420
  %or787 = or i32 %shl785, %shr786, !dbg !10420
  store i32 %or787, i32* %B, align 4, !dbg !10420
  %647 = load i32, i32* %C, align 4, !dbg !10420
  %648 = load i32, i32* %B, align 4, !dbg !10420
  %add788 = add i32 %648, %647, !dbg !10420
  store i32 %add788, i32* %B, align 4, !dbg !10420
  br label %do.end789, !dbg !10420

do.end789:                                        ; preds = %do.body777
  br label %do.body790, !dbg !10422

do.body790:                                       ; preds = %do.end789
  %649 = load i32, i32* %C, align 4, !dbg !10423
  %650 = load i32, i32* %B, align 4, !dbg !10423
  %651 = load i32, i32* %D, align 4, !dbg !10423
  %neg791 = xor i32 %651, -1, !dbg !10423
  %or792 = or i32 %650, %neg791, !dbg !10423
  %xor793 = xor i32 %649, %or792, !dbg !10423
  %arrayidx794 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 4, !dbg !10423, !ctir !920
  %652 = load i32, i32* %arrayidx794, align 16, !dbg !10423
  %add795 = add i32 %xor793, %652, !dbg !10423
  %add796 = add i32 %add795, -145523070, !dbg !10423
  %653 = load i32, i32* %A, align 4, !dbg !10423
  %add797 = add i32 %653, %add796, !dbg !10423
  store i32 %add797, i32* %A, align 4, !dbg !10423
  %654 = load i32, i32* %A, align 4, !dbg !10423
  %shl798 = shl i32 %654, 6, !dbg !10423
  %655 = load i32, i32* %A, align 4, !dbg !10423
  %shr799 = lshr i32 %655, 26, !dbg !10423
  %or800 = or i32 %shl798, %shr799, !dbg !10423
  store i32 %or800, i32* %A, align 4, !dbg !10423
  %656 = load i32, i32* %B, align 4, !dbg !10423
  %657 = load i32, i32* %A, align 4, !dbg !10423
  %add801 = add i32 %657, %656, !dbg !10423
  store i32 %add801, i32* %A, align 4, !dbg !10423
  br label %do.end802, !dbg !10423

do.end802:                                        ; preds = %do.body790
  br label %do.body803, !dbg !10425

do.body803:                                       ; preds = %do.end802
  %658 = load i32, i32* %B, align 4, !dbg !10426
  %659 = load i32, i32* %A, align 4, !dbg !10426
  %660 = load i32, i32* %C, align 4, !dbg !10426
  %neg804 = xor i32 %660, -1, !dbg !10426
  %or805 = or i32 %659, %neg804, !dbg !10426
  %xor806 = xor i32 %658, %or805, !dbg !10426
  %arrayidx807 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 11, !dbg !10426, !ctir !920
  %661 = load i32, i32* %arrayidx807, align 4, !dbg !10426
  %add808 = add i32 %xor806, %661, !dbg !10426
  %add809 = add i32 %add808, -1120210379, !dbg !10426
  %662 = load i32, i32* %D, align 4, !dbg !10426
  %add810 = add i32 %662, %add809, !dbg !10426
  store i32 %add810, i32* %D, align 4, !dbg !10426
  %663 = load i32, i32* %D, align 4, !dbg !10426
  %shl811 = shl i32 %663, 10, !dbg !10426
  %664 = load i32, i32* %D, align 4, !dbg !10426
  %shr812 = lshr i32 %664, 22, !dbg !10426
  %or813 = or i32 %shl811, %shr812, !dbg !10426
  store i32 %or813, i32* %D, align 4, !dbg !10426
  %665 = load i32, i32* %A, align 4, !dbg !10426
  %666 = load i32, i32* %D, align 4, !dbg !10426
  %add814 = add i32 %666, %665, !dbg !10426
  store i32 %add814, i32* %D, align 4, !dbg !10426
  br label %do.end815, !dbg !10426

do.end815:                                        ; preds = %do.body803
  br label %do.body816, !dbg !10428

do.body816:                                       ; preds = %do.end815
  %667 = load i32, i32* %A, align 4, !dbg !10429
  %668 = load i32, i32* %D, align 4, !dbg !10429
  %669 = load i32, i32* %B, align 4, !dbg !10429
  %neg817 = xor i32 %669, -1, !dbg !10429
  %or818 = or i32 %668, %neg817, !dbg !10429
  %xor819 = xor i32 %667, %or818, !dbg !10429
  %arrayidx820 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 2, !dbg !10429, !ctir !920
  %670 = load i32, i32* %arrayidx820, align 8, !dbg !10429
  %add821 = add i32 %xor819, %670, !dbg !10429
  %add822 = add i32 %add821, 718787259, !dbg !10429
  %671 = load i32, i32* %C, align 4, !dbg !10429
  %add823 = add i32 %671, %add822, !dbg !10429
  store i32 %add823, i32* %C, align 4, !dbg !10429
  %672 = load i32, i32* %C, align 4, !dbg !10429
  %shl824 = shl i32 %672, 15, !dbg !10429
  %673 = load i32, i32* %C, align 4, !dbg !10429
  %shr825 = lshr i32 %673, 17, !dbg !10429
  %or826 = or i32 %shl824, %shr825, !dbg !10429
  store i32 %or826, i32* %C, align 4, !dbg !10429
  %674 = load i32, i32* %D, align 4, !dbg !10429
  %675 = load i32, i32* %C, align 4, !dbg !10429
  %add827 = add i32 %675, %674, !dbg !10429
  store i32 %add827, i32* %C, align 4, !dbg !10429
  br label %do.end828, !dbg !10429

do.end828:                                        ; preds = %do.body816
  br label %do.body829, !dbg !10431

do.body829:                                       ; preds = %do.end828
  %676 = load i32, i32* %D, align 4, !dbg !10432
  %677 = load i32, i32* %C, align 4, !dbg !10432
  %678 = load i32, i32* %A, align 4, !dbg !10432
  %neg830 = xor i32 %678, -1, !dbg !10432
  %or831 = or i32 %677, %neg830, !dbg !10432
  %xor832 = xor i32 %676, %or831, !dbg !10432
  %arrayidx833 = getelementptr inbounds [16 x i32], [16 x i32]* %correct_words, i64 0, i64 9, !dbg !10432, !ctir !920
  %679 = load i32, i32* %arrayidx833, align 4, !dbg !10432
  %add834 = add i32 %xor832, %679, !dbg !10432
  %add835 = add i32 %add834, -343485551, !dbg !10432
  %680 = load i32, i32* %B, align 4, !dbg !10432
  %add836 = add i32 %680, %add835, !dbg !10432
  store i32 %add836, i32* %B, align 4, !dbg !10432
  %681 = load i32, i32* %B, align 4, !dbg !10432
  %shl837 = shl i32 %681, 21, !dbg !10432
  %682 = load i32, i32* %B, align 4, !dbg !10432
  %shr838 = lshr i32 %682, 11, !dbg !10432
  %or839 = or i32 %shl837, %shr838, !dbg !10432
  store i32 %or839, i32* %B, align 4, !dbg !10432
  %683 = load i32, i32* %C, align 4, !dbg !10432
  %684 = load i32, i32* %B, align 4, !dbg !10432
  %add840 = add i32 %684, %683, !dbg !10432
  store i32 %add840, i32* %B, align 4, !dbg !10432
  br label %do.end841, !dbg !10432

do.end841:                                        ; preds = %do.body829
  %685 = load i32, i32* %A_save, align 4, !dbg !10434
  %686 = load i32, i32* %A, align 4, !dbg !10435
  %add842 = add i32 %686, %685, !dbg !10435
  store i32 %add842, i32* %A, align 4, !dbg !10435
  %687 = load i32, i32* %B_save, align 4, !dbg !10436
  %688 = load i32, i32* %B, align 4, !dbg !10437
  %add843 = add i32 %688, %687, !dbg !10437
  store i32 %add843, i32* %B, align 4, !dbg !10437
  %689 = load i32, i32* %C_save, align 4, !dbg !10438
  %690 = load i32, i32* %C, align 4, !dbg !10439
  %add844 = add i32 %690, %689, !dbg !10439
  store i32 %add844, i32* %C, align 4, !dbg !10439
  %691 = load i32, i32* %D_save, align 4, !dbg !10440
  %692 = load i32, i32* %D, align 4, !dbg !10441
  %add845 = add i32 %692, %691, !dbg !10441
  store i32 %add845, i32* %D, align 4, !dbg !10441
  br label %while.cond, !dbg !10222, !llvm.loop !10442

while.end:                                        ; preds = %while.cond
  %693 = load i32, i32* %A, align 4, !dbg !10444
  %694 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10445
  %A846 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %694, i32 0, i32 0, !dbg !10446, !ctir !10030
  store i32 %693, i32* %A846, align 4, !dbg !10447, !ctir !560
  %695 = load i32, i32* %B, align 4, !dbg !10448
  %696 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10449
  %B847 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %696, i32 0, i32 1, !dbg !10450, !ctir !10030
  store i32 %695, i32* %B847, align 4, !dbg !10451, !ctir !560
  %697 = load i32, i32* %C, align 4, !dbg !10452
  %698 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10453
  %C848 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %698, i32 0, i32 2, !dbg !10454, !ctir !10030
  store i32 %697, i32* %C848, align 4, !dbg !10455, !ctir !560
  %699 = load i32, i32* %D, align 4, !dbg !10456
  %700 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10457
  %D849 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %700, i32 0, i32 3, !dbg !10458, !ctir !10030
  store i32 %699, i32* %D849, align 4, !dbg !10459, !ctir !560
  ret void, !dbg !10460
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @md5_stream(%struct._IO_FILE* %stream, i8* %resblock) #4 !dbg !10461 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %resblock.addr = alloca i8*, align 8
  %buffer = alloca i8*, align 8, !ctir !7
  %ctx = alloca %struct.md5_ctx, align 4, !ctir !10030
  %sum = alloca i64, align 8, !ctir !52
  %n = alloca i64, align 8, !ctir !52
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !10504, metadata !DIExpression()), !dbg !10505
  store i8* %resblock, i8** %resblock.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %resblock.addr, metadata !10506, metadata !DIExpression()), !dbg !10507
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !10508
  %1 = load i8*, i8** %resblock.addr, align 8, !dbg !10509
  %call = call i32 @afalg_stream(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.190, i64 0, i64 0), i8* %1, i64 16), !dbg !10510
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 -5, label %sw.bb1
  ], !dbg !10511

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10512
  br label %return, !dbg !10512

sw.bb1:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !10514
  br label %return, !dbg !10514

sw.epilog:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !10515, metadata !DIExpression()), !dbg !10516
  %call2 = call noalias i8* @malloc(i64 32840) #12, !dbg !10517
  store i8* %call2, i8** %buffer, align 8, !dbg !10516
  %2 = load i8*, i8** %buffer, align 8, !dbg !10518
  %tobool = icmp ne i8* %2, null, !dbg !10518
  br i1 %tobool, label %if.end, label %if.then, !dbg !10520

if.then:                                          ; preds = %sw.epilog
  store i32 1, i32* %retval, align 4, !dbg !10521
  br label %return, !dbg !10521

if.end:                                           ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %struct.md5_ctx* %ctx, metadata !10522, metadata !DIExpression()), !dbg !10523
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) #12, !dbg !10524
  call void @llvm.dbg.declare(metadata i64* %sum, metadata !10525, metadata !DIExpression()), !dbg !10526
  br label %while.body, !dbg !10527

while.body:                                       ; preds = %if.end, %while.end
  call void @llvm.dbg.declare(metadata i64* %n, metadata !10528, metadata !DIExpression()), !dbg !10530
  store i64 0, i64* %sum, align 8, !dbg !10531
  br label %while.body4, !dbg !10532

while.body4:                                      ; preds = %while.body, %if.end18
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !10533
  %call5 = call i32 @feof_unlocked(%struct._IO_FILE* %3) #12, !dbg !10533
  %tobool6 = icmp ne i32 %call5, 0, !dbg !10533
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !10536

if.then7:                                         ; preds = %while.body4
  br label %process_partial_block, !dbg !10537

if.end8:                                          ; preds = %while.body4
  %4 = load i8*, i8** %buffer, align 8, !dbg !10538
  %5 = load i64, i64* %sum, align 8, !dbg !10538
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !10538, !ctir !8
  %6 = load i64, i64* %sum, align 8, !dbg !10538
  %sub = sub i64 32768, %6, !dbg !10538
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !10538
  %call9 = call i64 @fread_unlocked(i8* %add.ptr, i64 1, i64 %sub, %struct._IO_FILE* %7), !dbg !10538
  store i64 %call9, i64* %n, align 8, !dbg !10539
  %8 = load i64, i64* %n, align 8, !dbg !10540
  %9 = load i64, i64* %sum, align 8, !dbg !10541
  %add = add i64 %9, %8, !dbg !10541
  store i64 %add, i64* %sum, align 8, !dbg !10541
  %10 = load i64, i64* %sum, align 8, !dbg !10542
  %cmp = icmp eq i64 %10, 32768, !dbg !10544
  br i1 %cmp, label %if.then10, label %if.end11, !dbg !10545

if.then10:                                        ; preds = %if.end8
  br label %while.end, !dbg !10546

if.end11:                                         ; preds = %if.end8
  %11 = load i64, i64* %n, align 8, !dbg !10547
  %cmp12 = icmp eq i64 %11, 0, !dbg !10549
  br i1 %cmp12, label %if.then13, label %if.end18, !dbg !10550

if.then13:                                        ; preds = %if.end11
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !10551
  %call14 = call i32 @ferror_unlocked(%struct._IO_FILE* %12) #12, !dbg !10551
  %tobool15 = icmp ne i32 %call14, 0, !dbg !10551
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !10554

if.then16:                                        ; preds = %if.then13
  %13 = load i8*, i8** %buffer, align 8, !dbg !10555
  call void @free(i8* %13) #12, !dbg !10557
  store i32 1, i32* %retval, align 4, !dbg !10558
  br label %return, !dbg !10558

if.end17:                                         ; preds = %if.then13
  br label %process_partial_block, !dbg !10559

if.end18:                                         ; preds = %if.end11
  br label %while.body4, !dbg !10532, !llvm.loop !10560

while.end:                                        ; preds = %if.then10
  %14 = load i8*, i8** %buffer, align 8, !dbg !10562
  call void @md5_process_block(i8* %14, i64 32768, %struct.md5_ctx* %ctx) #12, !dbg !10563
  br label %while.body, !dbg !10527, !llvm.loop !10564

process_partial_block:                            ; preds = %if.end17, %if.then7
  call void @llvm.dbg.label(metadata !10566), !dbg !10567
  %15 = load i64, i64* %sum, align 8, !dbg !10568
  %cmp19 = icmp ugt i64 %15, 0, !dbg !10570
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !10571

if.then20:                                        ; preds = %process_partial_block
  %16 = load i8*, i8** %buffer, align 8, !dbg !10572
  %17 = load i64, i64* %sum, align 8, !dbg !10573
  call void @md5_process_bytes(i8* %16, i64 %17, %struct.md5_ctx* %ctx) #12, !dbg !10574
  br label %if.end21, !dbg !10574

if.end21:                                         ; preds = %if.then20, %process_partial_block
  %18 = load i8*, i8** %resblock.addr, align 8, !dbg !10575
  %call22 = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %18) #12, !dbg !10576
  %19 = load i8*, i8** %buffer, align 8, !dbg !10577
  call void @free(i8* %19) #12, !dbg !10578
  store i32 0, i32* %retval, align 4, !dbg !10579
  br label %return, !dbg !10579

return:                                           ; preds = %if.end21, %if.then16, %if.then, %sw.bb1, %sw.bb
  %20 = load i32, i32* %retval, align 4, !dbg !10580
  ret i32 %20, !dbg !10580
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @afalg_stream(%struct._IO_FILE* %stream, i8* %alg, i8* %resblock, i64 %hashlen) #4 !dbg !10581 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %alg.addr = alloca i8*, align 8
  %resblock.addr = alloca i8*, align 8
  %hashlen.addr = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !10586, metadata !DIExpression()), !dbg !10587
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !10588, metadata !DIExpression()), !dbg !10589
  store i8* %resblock, i8** %resblock.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %resblock.addr, metadata !10590, metadata !DIExpression()), !dbg !10591
  store i64 %hashlen, i64* %hashlen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %hashlen.addr, metadata !10592, metadata !DIExpression()), !dbg !10593
  ret i32 -97, !dbg !10594
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @md5_process_bytes(i8* %buffer, i64 %len, %struct.md5_ctx* %ctx) #4 !dbg !10595 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.md5_ctx*, align 8
  %left_over = alloca i64, align 8, !ctir !52
  %add = alloca i64, align 8, !ctir !52
  %left_over52 = alloca i64, align 8, !ctir !52
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !10596, metadata !DIExpression()), !dbg !10597
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10598, metadata !DIExpression()), !dbg !10599
  store %struct.md5_ctx* %ctx, %struct.md5_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.md5_ctx** %ctx.addr, metadata !10600, metadata !DIExpression()), !dbg !10601
  %0 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10602
  %buflen = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %0, i32 0, i32 5, !dbg !10604, !ctir !10030
  %1 = load i32, i32* %buflen, align 4, !dbg !10604, !ctir !560
  %cmp = icmp ne i32 %1, 0, !dbg !10605
  br i1 %cmp, label %if.then, label %if.end30, !dbg !10606

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %left_over, metadata !10607, metadata !DIExpression()), !dbg !10609
  %2 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10610
  %buflen1 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %2, i32 0, i32 5, !dbg !10611, !ctir !10030
  %3 = load i32, i32* %buflen1, align 4, !dbg !10611, !ctir !560
  %conv = zext i32 %3 to i64, !dbg !10610
  store i64 %conv, i64* %left_over, align 8, !dbg !10609
  call void @llvm.dbg.declare(metadata i64* %add, metadata !10612, metadata !DIExpression()), !dbg !10613
  %4 = load i64, i64* %left_over, align 8, !dbg !10614
  %sub = sub i64 128, %4, !dbg !10615
  %5 = load i64, i64* %len.addr, align 8, !dbg !10616
  %cmp2 = icmp ugt i64 %sub, %5, !dbg !10617
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !10618

cond.true:                                        ; preds = %if.then
  %6 = load i64, i64* %len.addr, align 8, !dbg !10619
  br label %cond.end, !dbg !10618

cond.false:                                       ; preds = %if.then
  %7 = load i64, i64* %left_over, align 8, !dbg !10620
  %sub4 = sub i64 128, %7, !dbg !10621
  br label %cond.end, !dbg !10618

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %sub4, %cond.false ], !dbg !10618
  store i64 %cond, i64* %add, align 8, !dbg !10613
  %8 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10622
  %buffer5 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %8, i32 0, i32 6, !dbg !10623, !ctir !10030
  %arraydecay = getelementptr inbounds [32 x i32], [32 x i32]* %buffer5, i64 0, i64 0, !dbg !10624, !ctir !574
  %9 = bitcast i32* %arraydecay to i8*, !dbg !10624
  %10 = load i64, i64* %left_over, align 8, !dbg !10625
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %10, !dbg !10624, !ctir !7
  %11 = load i8*, i8** %buffer.addr, align 8, !dbg !10626
  %12 = load i64, i64* %add, align 8, !dbg !10627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 1 %11, i64 %12, i1 false), !dbg !10628
  %13 = load i64, i64* %add, align 8, !dbg !10629
  %14 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10630
  %buflen6 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %14, i32 0, i32 5, !dbg !10631, !ctir !10030
  %15 = load i32, i32* %buflen6, align 4, !dbg !10632, !ctir !560
  %conv7 = zext i32 %15 to i64, !dbg !10632
  %add8 = add i64 %conv7, %13, !dbg !10632
  %conv9 = trunc i64 %add8 to i32, !dbg !10632
  store i32 %conv9, i32* %buflen6, align 4, !dbg !10632, !ctir !560
  %16 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10633
  %buflen10 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %16, i32 0, i32 5, !dbg !10635, !ctir !10030
  %17 = load i32, i32* %buflen10, align 4, !dbg !10635, !ctir !560
  %cmp11 = icmp ugt i32 %17, 64, !dbg !10636
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !10637

if.then13:                                        ; preds = %cond.end
  %18 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10638
  %buffer14 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %18, i32 0, i32 6, !dbg !10640, !ctir !10030
  %arraydecay15 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer14, i64 0, i64 0, !dbg !10638, !ctir !574
  %19 = bitcast i32* %arraydecay15 to i8*, !dbg !10638
  %20 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10641
  %buflen16 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %20, i32 0, i32 5, !dbg !10642, !ctir !10030
  %21 = load i32, i32* %buflen16, align 4, !dbg !10642, !ctir !560
  %and = and i32 %21, -64, !dbg !10643
  %conv17 = zext i32 %and to i64, !dbg !10641
  %22 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10644
  call void @md5_process_block(i8* %19, i64 %conv17, %struct.md5_ctx* %22) #12, !dbg !10645
  %23 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10646
  %buflen18 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %23, i32 0, i32 5, !dbg !10647, !ctir !10030
  %24 = load i32, i32* %buflen18, align 4, !dbg !10648, !ctir !560
  %and19 = and i32 %24, 63, !dbg !10648
  store i32 %and19, i32* %buflen18, align 4, !dbg !10648, !ctir !560
  %25 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10649
  %buffer20 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %25, i32 0, i32 6, !dbg !10650, !ctir !10030
  %arraydecay21 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer20, i64 0, i64 0, !dbg !10651, !ctir !574
  %26 = bitcast i32* %arraydecay21 to i8*, !dbg !10651
  %27 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10652
  %buffer22 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %27, i32 0, i32 6, !dbg !10653, !ctir !10030
  %arraydecay23 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer22, i64 0, i64 0, !dbg !10654, !ctir !574
  %28 = bitcast i32* %arraydecay23 to i8*, !dbg !10654
  %29 = load i64, i64* %left_over, align 8, !dbg !10655
  %30 = load i64, i64* %add, align 8, !dbg !10656
  %add24 = add i64 %29, %30, !dbg !10657
  %and25 = and i64 %add24, -64, !dbg !10658
  %arrayidx26 = getelementptr inbounds i8, i8* %28, i64 %and25, !dbg !10654, !ctir !7
  %31 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10659
  %buflen27 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %31, i32 0, i32 5, !dbg !10660, !ctir !10030
  %32 = load i32, i32* %buflen27, align 4, !dbg !10660, !ctir !560
  %conv28 = zext i32 %32 to i64, !dbg !10659
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 1 %arrayidx26, i64 %conv28, i1 false), !dbg !10651
  br label %if.end, !dbg !10661

if.end:                                           ; preds = %if.then13, %cond.end
  %33 = load i8*, i8** %buffer.addr, align 8, !dbg !10662
  %34 = load i64, i64* %add, align 8, !dbg !10663
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !10664, !ctir !91
  store i8* %add.ptr, i8** %buffer.addr, align 8, !dbg !10665
  %35 = load i64, i64* %add, align 8, !dbg !10666
  %36 = load i64, i64* %len.addr, align 8, !dbg !10667
  %sub29 = sub i64 %36, %35, !dbg !10667
  store i64 %sub29, i64* %len.addr, align 8, !dbg !10667
  br label %if.end30, !dbg !10668

if.end30:                                         ; preds = %if.end, %entry
  %37 = load i64, i64* %len.addr, align 8, !dbg !10669
  %cmp31 = icmp uge i64 %37, 64, !dbg !10671
  br i1 %cmp31, label %if.then33, label %if.end48, !dbg !10672

if.then33:                                        ; preds = %if.end30
  %38 = load i8*, i8** %buffer.addr, align 8, !dbg !10673
  %39 = ptrtoint i8* %38 to i64, !dbg !10673
  %rem = urem i64 %39, 4, !dbg !10673
  %cmp34 = icmp ne i64 %rem, 0, !dbg !10673
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !10676

if.then36:                                        ; preds = %if.then33
  br label %while.cond, !dbg !10677

while.cond:                                       ; preds = %while.body, %if.then36
  %40 = load i64, i64* %len.addr, align 8, !dbg !10678
  %cmp37 = icmp ugt i64 %40, 64, !dbg !10679
  br i1 %cmp37, label %while.body, label %while.end, !dbg !10677

while.body:                                       ; preds = %while.cond
  %41 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10680
  %buffer39 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %41, i32 0, i32 6, !dbg !10682, !ctir !10030
  %arraydecay40 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer39, i64 0, i64 0, !dbg !10683, !ctir !574
  %42 = bitcast i32* %arraydecay40 to i8*, !dbg !10683
  %43 = load i8*, i8** %buffer.addr, align 8, !dbg !10684
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 1 %43, i64 64, i1 false), !dbg !10683
  %44 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10685
  call void @md5_process_block(i8* %42, i64 64, %struct.md5_ctx* %44) #12, !dbg !10686
  %45 = load i8*, i8** %buffer.addr, align 8, !dbg !10687
  %add.ptr41 = getelementptr inbounds i8, i8* %45, i64 64, !dbg !10688, !ctir !91
  store i8* %add.ptr41, i8** %buffer.addr, align 8, !dbg !10689
  %46 = load i64, i64* %len.addr, align 8, !dbg !10690
  %sub42 = sub i64 %46, 64, !dbg !10690
  store i64 %sub42, i64* %len.addr, align 8, !dbg !10690
  br label %while.cond, !dbg !10677, !llvm.loop !10691

while.end:                                        ; preds = %while.cond
  br label %if.end47, !dbg !10677

if.else:                                          ; preds = %if.then33
  %47 = load i8*, i8** %buffer.addr, align 8, !dbg !10693
  %48 = load i64, i64* %len.addr, align 8, !dbg !10695
  %and43 = and i64 %48, -64, !dbg !10696
  %49 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10697
  call void @md5_process_block(i8* %47, i64 %and43, %struct.md5_ctx* %49) #12, !dbg !10698
  %50 = load i8*, i8** %buffer.addr, align 8, !dbg !10699
  %51 = load i64, i64* %len.addr, align 8, !dbg !10700
  %and44 = and i64 %51, -64, !dbg !10701
  %add.ptr45 = getelementptr inbounds i8, i8* %50, i64 %and44, !dbg !10702, !ctir !91
  store i8* %add.ptr45, i8** %buffer.addr, align 8, !dbg !10703
  %52 = load i64, i64* %len.addr, align 8, !dbg !10704
  %and46 = and i64 %52, 63, !dbg !10704
  store i64 %and46, i64* %len.addr, align 8, !dbg !10704
  br label %if.end47

if.end47:                                         ; preds = %if.else, %while.end
  br label %if.end48, !dbg !10705

if.end48:                                         ; preds = %if.end47, %if.end30
  %53 = load i64, i64* %len.addr, align 8, !dbg !10706
  %cmp49 = icmp ugt i64 %53, 0, !dbg !10708
  br i1 %cmp49, label %if.then51, label %if.end72, !dbg !10709

if.then51:                                        ; preds = %if.end48
  call void @llvm.dbg.declare(metadata i64* %left_over52, metadata !10710, metadata !DIExpression()), !dbg !10712
  %54 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10713
  %buflen53 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %54, i32 0, i32 5, !dbg !10714, !ctir !10030
  %55 = load i32, i32* %buflen53, align 4, !dbg !10714, !ctir !560
  %conv54 = zext i32 %55 to i64, !dbg !10713
  store i64 %conv54, i64* %left_over52, align 8, !dbg !10712
  %56 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10715
  %buffer55 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %56, i32 0, i32 6, !dbg !10716, !ctir !10030
  %arraydecay56 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer55, i64 0, i64 0, !dbg !10717, !ctir !574
  %57 = bitcast i32* %arraydecay56 to i8*, !dbg !10717
  %58 = load i64, i64* %left_over52, align 8, !dbg !10718
  %arrayidx57 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !10717, !ctir !7
  %59 = load i8*, i8** %buffer.addr, align 8, !dbg !10719
  %60 = load i64, i64* %len.addr, align 8, !dbg !10720
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx57, i8* align 1 %59, i64 %60, i1 false), !dbg !10721
  %61 = load i64, i64* %len.addr, align 8, !dbg !10722
  %62 = load i64, i64* %left_over52, align 8, !dbg !10723
  %add58 = add i64 %62, %61, !dbg !10723
  store i64 %add58, i64* %left_over52, align 8, !dbg !10723
  %63 = load i64, i64* %left_over52, align 8, !dbg !10724
  %cmp59 = icmp uge i64 %63, 64, !dbg !10726
  br i1 %cmp59, label %if.then61, label %if.end69, !dbg !10727

if.then61:                                        ; preds = %if.then51
  %64 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10728
  %buffer62 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %64, i32 0, i32 6, !dbg !10730, !ctir !10030
  %arraydecay63 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer62, i64 0, i64 0, !dbg !10728, !ctir !574
  %65 = bitcast i32* %arraydecay63 to i8*, !dbg !10728
  %66 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10731
  call void @md5_process_block(i8* %65, i64 64, %struct.md5_ctx* %66) #12, !dbg !10732
  %67 = load i64, i64* %left_over52, align 8, !dbg !10733
  %sub64 = sub i64 %67, 64, !dbg !10733
  store i64 %sub64, i64* %left_over52, align 8, !dbg !10733
  %68 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10734
  %buffer65 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %68, i32 0, i32 6, !dbg !10735, !ctir !10030
  %arraydecay66 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer65, i64 0, i64 0, !dbg !10736, !ctir !574
  %69 = bitcast i32* %arraydecay66 to i8*, !dbg !10736
  %70 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10737
  %buffer67 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %70, i32 0, i32 6, !dbg !10738, !ctir !10030
  %arrayidx68 = getelementptr inbounds [32 x i32], [32 x i32]* %buffer67, i64 0, i64 16, !dbg !10737, !ctir !574
  %71 = bitcast i32* %arrayidx68 to i8*, !dbg !10736
  %72 = load i64, i64* %left_over52, align 8, !dbg !10739
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %71, i64 %72, i1 false), !dbg !10736
  br label %if.end69, !dbg !10740

if.end69:                                         ; preds = %if.then61, %if.then51
  %73 = load i64, i64* %left_over52, align 8, !dbg !10741
  %conv70 = trunc i64 %73 to i32, !dbg !10741
  %74 = load %struct.md5_ctx*, %struct.md5_ctx** %ctx.addr, align 8, !dbg !10742
  %buflen71 = getelementptr inbounds %struct.md5_ctx, %struct.md5_ctx* %74, i32 0, i32 5, !dbg !10743, !ctir !10030
  store i32 %conv70, i32* %buflen71, align 4, !dbg !10744, !ctir !560
  br label %if.end72, !dbg !10745

if.end72:                                         ; preds = %if.end69, %if.end48
  ret void, !dbg !10746
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @md5_buffer(i8* %buffer, i64 %len, i8* %resblock) #4 !dbg !10747 {
entry:
  %buffer.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %resblock.addr = alloca i8*, align 8
  %ctx = alloca %struct.md5_ctx, align 4, !ctir !10030
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !10750, metadata !DIExpression()), !dbg !10751
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10752, metadata !DIExpression()), !dbg !10753
  store i8* %resblock, i8** %resblock.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %resblock.addr, metadata !10754, metadata !DIExpression()), !dbg !10755
  call void @llvm.dbg.declare(metadata %struct.md5_ctx* %ctx, metadata !10756, metadata !DIExpression()), !dbg !10757
  call void @md5_init_ctx(%struct.md5_ctx* %ctx) #12, !dbg !10758
  %0 = load i8*, i8** %buffer.addr, align 8, !dbg !10759
  %1 = load i64, i64* %len.addr, align 8, !dbg !10760
  call void @md5_process_bytes(i8* %0, i64 %1, %struct.md5_ctx* %ctx) #12, !dbg !10761
  %2 = load i8*, i8** %resblock.addr, align 8, !dbg !10762
  %call = call i8* @md5_finish_ctx(%struct.md5_ctx* %ctx, i8* %2) #12, !dbg !10763
  ret i8* %call, !dbg !10764
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fdadvise(i32 %fd, i64 %offset, i64 %len, i32 %advice) #4 !dbg !10765 {
entry:
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %advice.addr = alloca i32, align 4
  %__x = alloca i32, align 4, !ctir !5
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !10770, metadata !DIExpression()), !dbg !10771
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !10772, metadata !DIExpression()), !dbg !10773
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !10774, metadata !DIExpression()), !dbg !10775
  store i32 %advice, i32* %advice.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %advice.addr, metadata !10776, metadata !DIExpression()), !dbg !10777
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !10778, metadata !DIExpression()), !dbg !10780
  %0 = load i32, i32* %fd.addr, align 4, !dbg !10780
  %1 = load i64, i64* %offset.addr, align 8, !dbg !10780
  %2 = load i64, i64* %len.addr, align 8, !dbg !10780
  %3 = load i32, i32* %advice.addr, align 4, !dbg !10780
  %call = call i32 @posix_fadvise(i32 %0, i64 %1, i64 %2, i32 %3) #12, !dbg !10780
  store i32 %call, i32* %__x, align 4, !dbg !10780
  %4 = load i32, i32* %__x, align 4, !dbg !10780
  ret void, !dbg !10781
}

; Function Attrs: nounwind
declare dso_local i32 @posix_fadvise(i32, i64, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fadvise(%struct._IO_FILE* %fp, i32 %advice) #4 !dbg !10782 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %advice.addr = alloca i32, align 4
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !10825, metadata !DIExpression()), !dbg !10826
  store i32 %advice, i32* %advice.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %advice.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !10829
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !10829
  br i1 %tobool, label %if.then, label %if.end, !dbg !10831

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !10832
  %call = call i32 @fileno(%struct._IO_FILE* %1) #12, !dbg !10833
  %2 = load i32, i32* %advice.addr, align 4, !dbg !10834
  call void @fdadvise(i32 %call, i64 0, i64 0, i32 %2), !dbg !10835
  br label %if.end, !dbg !10835

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10836
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @filevercmp(i8* %s1, i8* %s2) #9 !dbg !10837 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %s1_pos = alloca i8*, align 8, !ctir !90
  %s2_pos = alloca i8*, align 8, !ctir !90
  %s1_suffix = alloca i8*, align 8, !ctir !90
  %s2_suffix = alloca i8*, align 8, !ctir !90
  %s1_len = alloca i64, align 8, !ctir !52
  %s2_len = alloca i64, align 8, !ctir !52
  %result = alloca i32, align 4, !ctir !5
  %simple_cmp = alloca i32, align 4, !ctir !5
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !10839, metadata !DIExpression()), !dbg !10840
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !10841, metadata !DIExpression()), !dbg !10842
  call void @llvm.dbg.declare(metadata i8** %s1_pos, metadata !10843, metadata !DIExpression()), !dbg !10844
  call void @llvm.dbg.declare(metadata i8** %s2_pos, metadata !10845, metadata !DIExpression()), !dbg !10846
  call void @llvm.dbg.declare(metadata i8** %s1_suffix, metadata !10847, metadata !DIExpression()), !dbg !10848
  call void @llvm.dbg.declare(metadata i8** %s2_suffix, metadata !10849, metadata !DIExpression()), !dbg !10850
  call void @llvm.dbg.declare(metadata i64* %s1_len, metadata !10851, metadata !DIExpression()), !dbg !10852
  call void @llvm.dbg.declare(metadata i64* %s2_len, metadata !10853, metadata !DIExpression()), !dbg !10854
  call void @llvm.dbg.declare(metadata i32* %result, metadata !10855, metadata !DIExpression()), !dbg !10856
  call void @llvm.dbg.declare(metadata i32* %simple_cmp, metadata !10857, metadata !DIExpression()), !dbg !10858
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !10859
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !10860
  %call = call i32 @strcmp(i8* %0, i8* %1) #14, !dbg !10861
  store i32 %call, i32* %simple_cmp, align 4, !dbg !10858
  %2 = load i32, i32* %simple_cmp, align 4, !dbg !10862
  %cmp = icmp eq i32 %2, 0, !dbg !10864
  br i1 %cmp, label %if.then, label %if.end, !dbg !10865

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10866
  br label %return, !dbg !10866

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %s1.addr, align 8, !dbg !10867
  %4 = load i8, i8* %3, align 1, !dbg !10869, !ctir !91
  %tobool = icmp ne i8 %4, 0, !dbg !10869
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !10870

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !10871
  br label %return, !dbg !10871

if.end2:                                          ; preds = %if.end
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !10872
  %6 = load i8, i8* %5, align 1, !dbg !10874, !ctir !91
  %tobool3 = icmp ne i8 %6, 0, !dbg !10874
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !10875

if.then4:                                         ; preds = %if.end2
  store i32 1, i32* %retval, align 4, !dbg !10876
  br label %return, !dbg !10876

if.end5:                                          ; preds = %if.end2
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !10877
  %call6 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.199, i64 0, i64 0), i8* %7) #14, !dbg !10879
  %cmp7 = icmp eq i32 0, %call6, !dbg !10880
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !10881

if.then8:                                         ; preds = %if.end5
  store i32 -1, i32* %retval, align 4, !dbg !10882
  br label %return, !dbg !10882

if.end9:                                          ; preds = %if.end5
  %8 = load i8*, i8** %s2.addr, align 8, !dbg !10883
  %call10 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.199, i64 0, i64 0), i8* %8) #14, !dbg !10885
  %cmp11 = icmp eq i32 0, %call10, !dbg !10886
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !10887

if.then12:                                        ; preds = %if.end9
  store i32 1, i32* %retval, align 4, !dbg !10888
  br label %return, !dbg !10888

if.end13:                                         ; preds = %if.end9
  %9 = load i8*, i8** %s1.addr, align 8, !dbg !10889
  %call14 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.200, i64 0, i64 0), i8* %9) #14, !dbg !10891
  %cmp15 = icmp eq i32 0, %call14, !dbg !10892
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !10893

if.then16:                                        ; preds = %if.end13
  store i32 -1, i32* %retval, align 4, !dbg !10894
  br label %return, !dbg !10894

if.end17:                                         ; preds = %if.end13
  %10 = load i8*, i8** %s2.addr, align 8, !dbg !10895
  %call18 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.200, i64 0, i64 0), i8* %10) #14, !dbg !10897
  %cmp19 = icmp eq i32 0, %call18, !dbg !10898
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !10899

if.then20:                                        ; preds = %if.end17
  store i32 1, i32* %retval, align 4, !dbg !10900
  br label %return, !dbg !10900

if.end21:                                         ; preds = %if.end17
  %11 = load i8*, i8** %s1.addr, align 8, !dbg !10901
  %12 = load i8, i8* %11, align 1, !dbg !10903, !ctir !91
  %conv = sext i8 %12 to i32, !dbg !10903
  %cmp22 = icmp eq i32 %conv, 46, !dbg !10904
  br i1 %cmp22, label %land.lhs.true, label %if.end28, !dbg !10905

land.lhs.true:                                    ; preds = %if.end21
  %13 = load i8*, i8** %s2.addr, align 8, !dbg !10906
  %14 = load i8, i8* %13, align 1, !dbg !10907, !ctir !91
  %conv24 = sext i8 %14 to i32, !dbg !10907
  %cmp25 = icmp ne i32 %conv24, 46, !dbg !10908
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !10909

if.then27:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !10910
  br label %return, !dbg !10910

if.end28:                                         ; preds = %land.lhs.true, %if.end21
  %15 = load i8*, i8** %s1.addr, align 8, !dbg !10911
  %16 = load i8, i8* %15, align 1, !dbg !10913, !ctir !91
  %conv29 = sext i8 %16 to i32, !dbg !10913
  %cmp30 = icmp ne i32 %conv29, 46, !dbg !10914
  br i1 %cmp30, label %land.lhs.true32, label %if.end37, !dbg !10915

land.lhs.true32:                                  ; preds = %if.end28
  %17 = load i8*, i8** %s2.addr, align 8, !dbg !10916
  %18 = load i8, i8* %17, align 1, !dbg !10917, !ctir !91
  %conv33 = sext i8 %18 to i32, !dbg !10917
  %cmp34 = icmp eq i32 %conv33, 46, !dbg !10918
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !10919

if.then36:                                        ; preds = %land.lhs.true32
  store i32 1, i32* %retval, align 4, !dbg !10920
  br label %return, !dbg !10920

if.end37:                                         ; preds = %land.lhs.true32, %if.end28
  %19 = load i8*, i8** %s1.addr, align 8, !dbg !10921
  %20 = load i8, i8* %19, align 1, !dbg !10923, !ctir !91
  %conv38 = sext i8 %20 to i32, !dbg !10923
  %cmp39 = icmp eq i32 %conv38, 46, !dbg !10924
  br i1 %cmp39, label %land.lhs.true41, label %if.end47, !dbg !10925

land.lhs.true41:                                  ; preds = %if.end37
  %21 = load i8*, i8** %s2.addr, align 8, !dbg !10926
  %22 = load i8, i8* %21, align 1, !dbg !10927, !ctir !91
  %conv42 = sext i8 %22 to i32, !dbg !10927
  %cmp43 = icmp eq i32 %conv42, 46, !dbg !10928
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !10929

if.then45:                                        ; preds = %land.lhs.true41
  %23 = load i8*, i8** %s1.addr, align 8, !dbg !10930
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !10930, !ctir !91
  store i8* %incdec.ptr, i8** %s1.addr, align 8, !dbg !10930
  %24 = load i8*, i8** %s2.addr, align 8, !dbg !10932
  %incdec.ptr46 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !10932, !ctir !91
  store i8* %incdec.ptr46, i8** %s2.addr, align 8, !dbg !10932
  br label %if.end47, !dbg !10933

if.end47:                                         ; preds = %if.then45, %land.lhs.true41, %if.end37
  %25 = load i8*, i8** %s1.addr, align 8, !dbg !10934
  store i8* %25, i8** %s1_pos, align 8, !dbg !10935
  %26 = load i8*, i8** %s2.addr, align 8, !dbg !10936
  store i8* %26, i8** %s2_pos, align 8, !dbg !10937
  %call48 = call i8* @match_suffix(i8** %s1_pos), !dbg !10938
  store i8* %call48, i8** %s1_suffix, align 8, !dbg !10939
  %call49 = call i8* @match_suffix(i8** %s2_pos), !dbg !10940
  store i8* %call49, i8** %s2_suffix, align 8, !dbg !10941
  %27 = load i8*, i8** %s1_suffix, align 8, !dbg !10942
  %tobool50 = icmp ne i8* %27, null, !dbg !10942
  br i1 %tobool50, label %cond.true, label %cond.false, !dbg !10942

cond.true:                                        ; preds = %if.end47
  %28 = load i8*, i8** %s1_suffix, align 8, !dbg !10943
  br label %cond.end, !dbg !10942

cond.false:                                       ; preds = %if.end47
  %29 = load i8*, i8** %s1_pos, align 8, !dbg !10944
  br label %cond.end, !dbg !10942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %28, %cond.true ], [ %29, %cond.false ], !dbg !10942
  %30 = load i8*, i8** %s1.addr, align 8, !dbg !10945
  %sub.ptr.lhs.cast = ptrtoint i8* %cond to i64, !dbg !10946
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64, !dbg !10946
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10946
  store i64 %sub.ptr.sub, i64* %s1_len, align 8, !dbg !10947
  %31 = load i8*, i8** %s2_suffix, align 8, !dbg !10948
  %tobool51 = icmp ne i8* %31, null, !dbg !10948
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !10948

cond.true52:                                      ; preds = %cond.end
  %32 = load i8*, i8** %s2_suffix, align 8, !dbg !10949
  br label %cond.end54, !dbg !10948

cond.false53:                                     ; preds = %cond.end
  %33 = load i8*, i8** %s2_pos, align 8, !dbg !10950
  br label %cond.end54, !dbg !10948

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i8* [ %32, %cond.true52 ], [ %33, %cond.false53 ], !dbg !10948
  %34 = load i8*, i8** %s2.addr, align 8, !dbg !10951
  %sub.ptr.lhs.cast56 = ptrtoint i8* %cond55 to i64, !dbg !10952
  %sub.ptr.rhs.cast57 = ptrtoint i8* %34 to i64, !dbg !10952
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57, !dbg !10952
  store i64 %sub.ptr.sub58, i64* %s2_len, align 8, !dbg !10953
  %35 = load i8*, i8** %s1_suffix, align 8, !dbg !10954
  %tobool59 = icmp ne i8* %35, null, !dbg !10954
  br i1 %tobool59, label %land.lhs.true61, label %lor.lhs.false, !dbg !10956

lor.lhs.false:                                    ; preds = %cond.end54
  %36 = load i8*, i8** %s2_suffix, align 8, !dbg !10957
  %tobool60 = icmp ne i8* %36, null, !dbg !10957
  br i1 %tobool60, label %land.lhs.true61, label %if.end75, !dbg !10958

land.lhs.true61:                                  ; preds = %lor.lhs.false, %cond.end54
  %37 = load i64, i64* %s1_len, align 8, !dbg !10959
  %38 = load i64, i64* %s2_len, align 8, !dbg !10960
  %cmp62 = icmp eq i64 %37, %38, !dbg !10961
  br i1 %cmp62, label %land.lhs.true64, label %if.end75, !dbg !10962

land.lhs.true64:                                  ; preds = %land.lhs.true61
  %39 = load i8*, i8** %s1.addr, align 8, !dbg !10963
  %40 = load i8*, i8** %s2.addr, align 8, !dbg !10964
  %41 = load i64, i64* %s1_len, align 8, !dbg !10965
  %call65 = call i32 @strncmp(i8* %39, i8* %40, i64 %41) #14, !dbg !10966
  %cmp66 = icmp eq i32 0, %call65, !dbg !10967
  br i1 %cmp66, label %if.then68, label %if.end75, !dbg !10968

if.then68:                                        ; preds = %land.lhs.true64
  %42 = load i8*, i8** %s1_pos, align 8, !dbg !10969
  %43 = load i8*, i8** %s1.addr, align 8, !dbg !10971
  %sub.ptr.lhs.cast69 = ptrtoint i8* %42 to i64, !dbg !10972
  %sub.ptr.rhs.cast70 = ptrtoint i8* %43 to i64, !dbg !10972
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70, !dbg !10972
  store i64 %sub.ptr.sub71, i64* %s1_len, align 8, !dbg !10973
  %44 = load i8*, i8** %s2_pos, align 8, !dbg !10974
  %45 = load i8*, i8** %s2.addr, align 8, !dbg !10975
  %sub.ptr.lhs.cast72 = ptrtoint i8* %44 to i64, !dbg !10976
  %sub.ptr.rhs.cast73 = ptrtoint i8* %45 to i64, !dbg !10976
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73, !dbg !10976
  store i64 %sub.ptr.sub74, i64* %s2_len, align 8, !dbg !10977
  br label %if.end75, !dbg !10978

if.end75:                                         ; preds = %if.then68, %land.lhs.true64, %land.lhs.true61, %lor.lhs.false
  %46 = load i8*, i8** %s1.addr, align 8, !dbg !10979
  %47 = load i64, i64* %s1_len, align 8, !dbg !10980
  %48 = load i8*, i8** %s2.addr, align 8, !dbg !10981
  %49 = load i64, i64* %s2_len, align 8, !dbg !10982
  %call76 = call i32 @verrevcmp(i8* %46, i64 %47, i8* %48, i64 %49) #14, !dbg !10983
  store i32 %call76, i32* %result, align 4, !dbg !10984
  %50 = load i32, i32* %result, align 4, !dbg !10985
  %cmp77 = icmp eq i32 %50, 0, !dbg !10986
  br i1 %cmp77, label %cond.true79, label %cond.false80, !dbg !10985

cond.true79:                                      ; preds = %if.end75
  %51 = load i32, i32* %simple_cmp, align 4, !dbg !10987
  br label %cond.end81, !dbg !10985

cond.false80:                                     ; preds = %if.end75
  %52 = load i32, i32* %result, align 4, !dbg !10988
  br label %cond.end81, !dbg !10985

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ %51, %cond.true79 ], [ %52, %cond.false80 ], !dbg !10985
  store i32 %cond82, i32* %retval, align 4, !dbg !10989
  br label %return, !dbg !10989

return:                                           ; preds = %cond.end81, %if.then36, %if.then27, %if.then20, %if.then16, %if.then12, %if.then8, %if.then4, %if.then1, %if.then
  %53 = load i32, i32* %retval, align 4, !dbg !10990
  ret i32 %53, !dbg !10990
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @match_suffix(i8** %str) #4 !dbg !10991 {
entry:
  %str.addr = alloca i8**, align 8
  %match = alloca i8*, align 8, !ctir !90
  %read_alpha = alloca i8, align 1, !ctir !162
  store i8** %str, i8*** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %str.addr, metadata !10994, metadata !DIExpression()), !dbg !10995
  call void @llvm.dbg.declare(metadata i8** %match, metadata !10996, metadata !DIExpression()), !dbg !10997
  store i8* null, i8** %match, align 8, !dbg !10997
  call void @llvm.dbg.declare(metadata i8* %read_alpha, metadata !10998, metadata !DIExpression()), !dbg !10999
  store i8 0, i8* %read_alpha, align 1, !dbg !10999
  br label %while.cond, !dbg !11000

while.cond:                                       ; preds = %if.end22, %entry
  %0 = load i8**, i8*** %str.addr, align 8, !dbg !11001
  %1 = load i8*, i8** %0, align 8, !dbg !11002, !ctir !90
  %2 = load i8, i8* %1, align 1, !dbg !11003, !ctir !91
  %tobool = icmp ne i8 %2, 0, !dbg !11000
  br i1 %tobool, label %while.body, label %while.end, !dbg !11000

while.body:                                       ; preds = %while.cond
  %3 = load i8, i8* %read_alpha, align 1, !dbg !11004
  %tobool1 = trunc i8 %3 to i1, !dbg !11004
  br i1 %tobool1, label %if.then, label %if.else, !dbg !11007

if.then:                                          ; preds = %while.body
  store i8 0, i8* %read_alpha, align 1, !dbg !11008
  %4 = load i8**, i8*** %str.addr, align 8, !dbg !11010
  %5 = load i8*, i8** %4, align 8, !dbg !11012, !ctir !90
  %6 = load i8, i8* %5, align 1, !dbg !11013, !ctir !91
  %conv = sext i8 %6 to i32, !dbg !11013
  %call = call zeroext i1 @c_isalpha(i32 %conv), !dbg !11014
  br i1 %call, label %if.end, label %land.lhs.true, !dbg !11015

land.lhs.true:                                    ; preds = %if.then
  %7 = load i8**, i8*** %str.addr, align 8, !dbg !11016
  %8 = load i8*, i8** %7, align 8, !dbg !11017, !ctir !90
  %9 = load i8, i8* %8, align 1, !dbg !11018, !ctir !91
  %conv2 = sext i8 %9 to i32, !dbg !11018
  %cmp = icmp ne i32 126, %conv2, !dbg !11019
  br i1 %cmp, label %if.then4, label %if.end, !dbg !11020

if.then4:                                         ; preds = %land.lhs.true
  store i8* null, i8** %match, align 8, !dbg !11021
  br label %if.end, !dbg !11022

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  br label %if.end22, !dbg !11023

if.else:                                          ; preds = %while.body
  %10 = load i8**, i8*** %str.addr, align 8, !dbg !11024
  %11 = load i8*, i8** %10, align 8, !dbg !11026, !ctir !90
  %12 = load i8, i8* %11, align 1, !dbg !11027, !ctir !91
  %conv5 = sext i8 %12 to i32, !dbg !11027
  %cmp6 = icmp eq i32 46, %conv5, !dbg !11028
  br i1 %cmp6, label %if.then8, label %if.else12, !dbg !11029

if.then8:                                         ; preds = %if.else
  store i8 1, i8* %read_alpha, align 1, !dbg !11030
  %13 = load i8*, i8** %match, align 8, !dbg !11032
  %tobool9 = icmp ne i8* %13, null, !dbg !11032
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !11034

if.then10:                                        ; preds = %if.then8
  %14 = load i8**, i8*** %str.addr, align 8, !dbg !11035
  %15 = load i8*, i8** %14, align 8, !dbg !11036, !ctir !90
  store i8* %15, i8** %match, align 8, !dbg !11037
  br label %if.end11, !dbg !11038

if.end11:                                         ; preds = %if.then10, %if.then8
  br label %if.end21, !dbg !11039

if.else12:                                        ; preds = %if.else
  %16 = load i8**, i8*** %str.addr, align 8, !dbg !11040
  %17 = load i8*, i8** %16, align 8, !dbg !11042, !ctir !90
  %18 = load i8, i8* %17, align 1, !dbg !11043, !ctir !91
  %conv13 = sext i8 %18 to i32, !dbg !11043
  %call14 = call zeroext i1 @c_isalnum(i32 %conv13), !dbg !11044
  br i1 %call14, label %if.end20, label %land.lhs.true15, !dbg !11045

land.lhs.true15:                                  ; preds = %if.else12
  %19 = load i8**, i8*** %str.addr, align 8, !dbg !11046
  %20 = load i8*, i8** %19, align 8, !dbg !11047, !ctir !90
  %21 = load i8, i8* %20, align 1, !dbg !11048, !ctir !91
  %conv16 = sext i8 %21 to i32, !dbg !11048
  %cmp17 = icmp ne i32 126, %conv16, !dbg !11049
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !11050

if.then19:                                        ; preds = %land.lhs.true15
  store i8* null, i8** %match, align 8, !dbg !11051
  br label %if.end20, !dbg !11052

if.end20:                                         ; preds = %if.then19, %land.lhs.true15, %if.else12
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end11
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end
  %22 = load i8**, i8*** %str.addr, align 8, !dbg !11053
  %23 = load i8*, i8** %22, align 8, !dbg !11054, !ctir !90
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1, !dbg !11054, !ctir !91
  store i8* %incdec.ptr, i8** %22, align 8, !dbg !11054, !ctir !90
  br label %while.cond, !dbg !11000, !llvm.loop !11055

while.end:                                        ; preds = %while.cond
  %24 = load i8*, i8** %match, align 8, !dbg !11057
  ret i8* %24, !dbg !11058
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @verrevcmp(i8* %s1, i64 %s1_len, i8* %s2, i64 %s2_len) #9 !dbg !11059 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1_len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2_len.addr = alloca i64, align 8
  %s1_pos = alloca i64, align 8, !ctir !52
  %s2_pos = alloca i64, align 8, !ctir !52
  %first_diff = alloca i32, align 4, !ctir !5
  %s1_c = alloca i32, align 4, !ctir !5
  %s2_c = alloca i32, align 4, !ctir !5
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !11062, metadata !DIExpression()), !dbg !11063
  store i64 %s1_len, i64* %s1_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1_len.addr, metadata !11064, metadata !DIExpression()), !dbg !11065
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !11066, metadata !DIExpression()), !dbg !11067
  store i64 %s2_len, i64* %s2_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2_len.addr, metadata !11068, metadata !DIExpression()), !dbg !11069
  call void @llvm.dbg.declare(metadata i64* %s1_pos, metadata !11070, metadata !DIExpression()), !dbg !11071
  store i64 0, i64* %s1_pos, align 8, !dbg !11071
  call void @llvm.dbg.declare(metadata i64* %s2_pos, metadata !11072, metadata !DIExpression()), !dbg !11073
  store i64 0, i64* %s2_pos, align 8, !dbg !11073
  br label %while.cond, !dbg !11074

while.cond:                                       ; preds = %if.end77, %entry
  %0 = load i64, i64* %s1_pos, align 8, !dbg !11075
  %1 = load i64, i64* %s1_len.addr, align 8, !dbg !11076
  %cmp = icmp ult i64 %0, %1, !dbg !11077
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !11078

lor.rhs:                                          ; preds = %while.cond
  %2 = load i64, i64* %s2_pos, align 8, !dbg !11079
  %3 = load i64, i64* %s2_len.addr, align 8, !dbg !11080
  %cmp1 = icmp ult i64 %2, %3, !dbg !11081
  br label %lor.end, !dbg !11078

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %4 = phi i1 [ true, %while.cond ], [ %cmp1, %lor.rhs ]
  br i1 %4, label %while.body, label %while.end78, !dbg !11074

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i32* %first_diff, metadata !11082, metadata !DIExpression()), !dbg !11084
  store i32 0, i32* %first_diff, align 4, !dbg !11084
  br label %while.cond2, !dbg !11085

while.cond2:                                      ; preds = %if.end, %while.body
  %5 = load i64, i64* %s1_pos, align 8, !dbg !11086
  %6 = load i64, i64* %s1_len.addr, align 8, !dbg !11087
  %cmp3 = icmp ult i64 %5, %6, !dbg !11088
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs4, !dbg !11089

land.lhs.true:                                    ; preds = %while.cond2
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !11090
  %8 = load i64, i64* %s1_pos, align 8, !dbg !11091
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %8, !dbg !11090, !ctir !90
  %9 = load i8, i8* %arrayidx, align 1, !dbg !11090
  %conv = sext i8 %9 to i32, !dbg !11090
  %call = call zeroext i1 @c_isdigit(i32 %conv), !dbg !11092
  br i1 %call, label %lor.rhs4, label %lor.end10, !dbg !11093

lor.rhs4:                                         ; preds = %land.lhs.true, %while.cond2
  %10 = load i64, i64* %s2_pos, align 8, !dbg !11094
  %11 = load i64, i64* %s2_len.addr, align 8, !dbg !11095
  %cmp5 = icmp ult i64 %10, %11, !dbg !11096
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !11097

land.rhs:                                         ; preds = %lor.rhs4
  %12 = load i8*, i8** %s2.addr, align 8, !dbg !11098
  %13 = load i64, i64* %s2_pos, align 8, !dbg !11099
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !11098, !ctir !90
  %14 = load i8, i8* %arrayidx7, align 1, !dbg !11098
  %conv8 = sext i8 %14 to i32, !dbg !11098
  %call9 = call zeroext i1 @c_isdigit(i32 %conv8), !dbg !11100
  %lnot = xor i1 %call9, true, !dbg !11101
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs4
  %15 = phi i1 [ false, %lor.rhs4 ], [ %lnot, %land.rhs ], !dbg !11102
  br label %lor.end10, !dbg !11093

lor.end10:                                        ; preds = %land.end, %land.lhs.true
  %16 = phi i1 [ true, %land.lhs.true ], [ %15, %land.end ]
  br i1 %16, label %while.body11, label %while.end, !dbg !11085

while.body11:                                     ; preds = %lor.end10
  call void @llvm.dbg.declare(metadata i32* %s1_c, metadata !11103, metadata !DIExpression()), !dbg !11105
  %17 = load i64, i64* %s1_pos, align 8, !dbg !11106
  %18 = load i64, i64* %s1_len.addr, align 8, !dbg !11107
  %cmp12 = icmp eq i64 %17, %18, !dbg !11108
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !11109

cond.true:                                        ; preds = %while.body11
  br label %cond.end, !dbg !11109

cond.false:                                       ; preds = %while.body11
  %19 = load i8*, i8** %s1.addr, align 8, !dbg !11110
  %20 = load i64, i64* %s1_pos, align 8, !dbg !11111
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !11110, !ctir !90
  %21 = load i8, i8* %arrayidx14, align 1, !dbg !11110
  %call15 = call i32 @order(i8 zeroext %21), !dbg !11112
  br label %cond.end, !dbg !11109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call15, %cond.false ], !dbg !11109
  store i32 %cond, i32* %s1_c, align 4, !dbg !11105
  call void @llvm.dbg.declare(metadata i32* %s2_c, metadata !11113, metadata !DIExpression()), !dbg !11114
  %22 = load i64, i64* %s2_pos, align 8, !dbg !11115
  %23 = load i64, i64* %s2_len.addr, align 8, !dbg !11116
  %cmp16 = icmp eq i64 %22, %23, !dbg !11117
  br i1 %cmp16, label %cond.true18, label %cond.false19, !dbg !11118

cond.true18:                                      ; preds = %cond.end
  br label %cond.end22, !dbg !11118

cond.false19:                                     ; preds = %cond.end
  %24 = load i8*, i8** %s2.addr, align 8, !dbg !11119
  %25 = load i64, i64* %s2_pos, align 8, !dbg !11120
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %25, !dbg !11119, !ctir !90
  %26 = load i8, i8* %arrayidx20, align 1, !dbg !11119
  %call21 = call i32 @order(i8 zeroext %26), !dbg !11121
  br label %cond.end22, !dbg !11118

cond.end22:                                       ; preds = %cond.false19, %cond.true18
  %cond23 = phi i32 [ 0, %cond.true18 ], [ %call21, %cond.false19 ], !dbg !11118
  store i32 %cond23, i32* %s2_c, align 4, !dbg !11114
  %27 = load i32, i32* %s1_c, align 4, !dbg !11122
  %28 = load i32, i32* %s2_c, align 4, !dbg !11124
  %cmp24 = icmp ne i32 %27, %28, !dbg !11125
  br i1 %cmp24, label %if.then, label %if.end, !dbg !11126

if.then:                                          ; preds = %cond.end22
  %29 = load i32, i32* %s1_c, align 4, !dbg !11127
  %30 = load i32, i32* %s2_c, align 4, !dbg !11128
  %sub = sub nsw i32 %29, %30, !dbg !11129
  store i32 %sub, i32* %retval, align 4, !dbg !11130
  br label %return, !dbg !11130

if.end:                                           ; preds = %cond.end22
  %31 = load i64, i64* %s1_pos, align 8, !dbg !11131
  %inc = add i64 %31, 1, !dbg !11131
  store i64 %inc, i64* %s1_pos, align 8, !dbg !11131
  %32 = load i64, i64* %s2_pos, align 8, !dbg !11132
  %inc26 = add i64 %32, 1, !dbg !11132
  store i64 %inc26, i64* %s2_pos, align 8, !dbg !11132
  br label %while.cond2, !dbg !11085, !llvm.loop !11133

while.end:                                        ; preds = %lor.end10
  br label %while.cond27, !dbg !11135

while.cond27:                                     ; preds = %while.body32, %while.end
  %33 = load i8*, i8** %s1.addr, align 8, !dbg !11136
  %34 = load i64, i64* %s1_pos, align 8, !dbg !11137
  %arrayidx28 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !11136, !ctir !90
  %35 = load i8, i8* %arrayidx28, align 1, !dbg !11136
  %conv29 = sext i8 %35 to i32, !dbg !11136
  %cmp30 = icmp eq i32 %conv29, 48, !dbg !11138
  br i1 %cmp30, label %while.body32, label %while.end34, !dbg !11135

while.body32:                                     ; preds = %while.cond27
  %36 = load i64, i64* %s1_pos, align 8, !dbg !11139
  %inc33 = add i64 %36, 1, !dbg !11139
  store i64 %inc33, i64* %s1_pos, align 8, !dbg !11139
  br label %while.cond27, !dbg !11135, !llvm.loop !11140

while.end34:                                      ; preds = %while.cond27
  br label %while.cond35, !dbg !11141

while.cond35:                                     ; preds = %while.body40, %while.end34
  %37 = load i8*, i8** %s2.addr, align 8, !dbg !11142
  %38 = load i64, i64* %s2_pos, align 8, !dbg !11143
  %arrayidx36 = getelementptr inbounds i8, i8* %37, i64 %38, !dbg !11142, !ctir !90
  %39 = load i8, i8* %arrayidx36, align 1, !dbg !11142
  %conv37 = sext i8 %39 to i32, !dbg !11142
  %cmp38 = icmp eq i32 %conv37, 48, !dbg !11144
  br i1 %cmp38, label %while.body40, label %while.end42, !dbg !11141

while.body40:                                     ; preds = %while.cond35
  %40 = load i64, i64* %s2_pos, align 8, !dbg !11145
  %inc41 = add i64 %40, 1, !dbg !11145
  store i64 %inc41, i64* %s2_pos, align 8, !dbg !11145
  br label %while.cond35, !dbg !11141, !llvm.loop !11146

while.end42:                                      ; preds = %while.cond35
  br label %while.cond43, !dbg !11147

while.cond43:                                     ; preds = %if.end61, %while.end42
  %41 = load i8*, i8** %s1.addr, align 8, !dbg !11148
  %42 = load i64, i64* %s1_pos, align 8, !dbg !11149
  %arrayidx44 = getelementptr inbounds i8, i8* %41, i64 %42, !dbg !11148, !ctir !90
  %43 = load i8, i8* %arrayidx44, align 1, !dbg !11148
  %conv45 = sext i8 %43 to i32, !dbg !11148
  %call46 = call zeroext i1 @c_isdigit(i32 %conv45), !dbg !11150
  br i1 %call46, label %land.rhs48, label %land.end53, !dbg !11151

land.rhs48:                                       ; preds = %while.cond43
  %44 = load i8*, i8** %s2.addr, align 8, !dbg !11152
  %45 = load i64, i64* %s2_pos, align 8, !dbg !11153
  %arrayidx49 = getelementptr inbounds i8, i8* %44, i64 %45, !dbg !11152, !ctir !90
  %46 = load i8, i8* %arrayidx49, align 1, !dbg !11152
  %conv50 = sext i8 %46 to i32, !dbg !11152
  %call51 = call zeroext i1 @c_isdigit(i32 %conv50), !dbg !11154
  br label %land.end53

land.end53:                                       ; preds = %land.rhs48, %while.cond43
  %47 = phi i1 [ false, %while.cond43 ], [ %call51, %land.rhs48 ], !dbg !11102
  br i1 %47, label %while.body54, label %while.end64, !dbg !11147

while.body54:                                     ; preds = %land.end53
  %48 = load i32, i32* %first_diff, align 4, !dbg !11155
  %tobool = icmp ne i32 %48, 0, !dbg !11155
  br i1 %tobool, label %if.end61, label %if.then55, !dbg !11158

if.then55:                                        ; preds = %while.body54
  %49 = load i8*, i8** %s1.addr, align 8, !dbg !11159
  %50 = load i64, i64* %s1_pos, align 8, !dbg !11160
  %arrayidx56 = getelementptr inbounds i8, i8* %49, i64 %50, !dbg !11159, !ctir !90
  %51 = load i8, i8* %arrayidx56, align 1, !dbg !11159
  %conv57 = sext i8 %51 to i32, !dbg !11159
  %52 = load i8*, i8** %s2.addr, align 8, !dbg !11161
  %53 = load i64, i64* %s2_pos, align 8, !dbg !11162
  %arrayidx58 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !11161, !ctir !90
  %54 = load i8, i8* %arrayidx58, align 1, !dbg !11161
  %conv59 = sext i8 %54 to i32, !dbg !11161
  %sub60 = sub nsw i32 %conv57, %conv59, !dbg !11163
  store i32 %sub60, i32* %first_diff, align 4, !dbg !11164
  br label %if.end61, !dbg !11165

if.end61:                                         ; preds = %if.then55, %while.body54
  %55 = load i64, i64* %s1_pos, align 8, !dbg !11166
  %inc62 = add i64 %55, 1, !dbg !11166
  store i64 %inc62, i64* %s1_pos, align 8, !dbg !11166
  %56 = load i64, i64* %s2_pos, align 8, !dbg !11167
  %inc63 = add i64 %56, 1, !dbg !11167
  store i64 %inc63, i64* %s2_pos, align 8, !dbg !11167
  br label %while.cond43, !dbg !11147, !llvm.loop !11168

while.end64:                                      ; preds = %land.end53
  %57 = load i8*, i8** %s1.addr, align 8, !dbg !11170
  %58 = load i64, i64* %s1_pos, align 8, !dbg !11172
  %arrayidx65 = getelementptr inbounds i8, i8* %57, i64 %58, !dbg !11170, !ctir !90
  %59 = load i8, i8* %arrayidx65, align 1, !dbg !11170
  %conv66 = sext i8 %59 to i32, !dbg !11170
  %call67 = call zeroext i1 @c_isdigit(i32 %conv66), !dbg !11173
  br i1 %call67, label %if.then68, label %if.end69, !dbg !11174

if.then68:                                        ; preds = %while.end64
  store i32 1, i32* %retval, align 4, !dbg !11175
  br label %return, !dbg !11175

if.end69:                                         ; preds = %while.end64
  %60 = load i8*, i8** %s2.addr, align 8, !dbg !11176
  %61 = load i64, i64* %s2_pos, align 8, !dbg !11178
  %arrayidx70 = getelementptr inbounds i8, i8* %60, i64 %61, !dbg !11176, !ctir !90
  %62 = load i8, i8* %arrayidx70, align 1, !dbg !11176
  %conv71 = sext i8 %62 to i32, !dbg !11176
  %call72 = call zeroext i1 @c_isdigit(i32 %conv71), !dbg !11179
  br i1 %call72, label %if.then73, label %if.end74, !dbg !11180

if.then73:                                        ; preds = %if.end69
  store i32 -1, i32* %retval, align 4, !dbg !11181
  br label %return, !dbg !11181

if.end74:                                         ; preds = %if.end69
  %63 = load i32, i32* %first_diff, align 4, !dbg !11182
  %tobool75 = icmp ne i32 %63, 0, !dbg !11182
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !11184

if.then76:                                        ; preds = %if.end74
  %64 = load i32, i32* %first_diff, align 4, !dbg !11185
  store i32 %64, i32* %retval, align 4, !dbg !11186
  br label %return, !dbg !11186

if.end77:                                         ; preds = %if.end74
  br label %while.cond, !dbg !11074, !llvm.loop !11187

while.end78:                                      ; preds = %lor.end
  store i32 0, i32* %retval, align 4, !dbg !11189
  br label %return, !dbg !11189

return:                                           ; preds = %while.end78, %if.then76, %if.then73, %if.then68, %if.then
  %65 = load i32, i32* %retval, align 4, !dbg !11190
  ret i32 %65, !dbg !11190
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @order(i8 zeroext %c) #4 !dbg !11191 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !11194, metadata !DIExpression()), !dbg !11195
  %0 = load i8, i8* %c.addr, align 1, !dbg !11196
  %conv = zext i8 %0 to i32, !dbg !11196
  %call = call zeroext i1 @c_isdigit(i32 %conv), !dbg !11198
  br i1 %call, label %if.then, label %if.else, !dbg !11199

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11200
  br label %return, !dbg !11200

if.else:                                          ; preds = %entry
  %1 = load i8, i8* %c.addr, align 1, !dbg !11201
  %conv1 = zext i8 %1 to i32, !dbg !11201
  %call2 = call zeroext i1 @c_isalpha(i32 %conv1), !dbg !11203
  br i1 %call2, label %if.then3, label %if.else5, !dbg !11204

if.then3:                                         ; preds = %if.else
  %2 = load i8, i8* %c.addr, align 1, !dbg !11205
  %conv4 = zext i8 %2 to i32, !dbg !11205
  store i32 %conv4, i32* %retval, align 4, !dbg !11206
  br label %return, !dbg !11206

if.else5:                                         ; preds = %if.else
  %3 = load i8, i8* %c.addr, align 1, !dbg !11207
  %conv6 = zext i8 %3 to i32, !dbg !11207
  %cmp = icmp eq i32 %conv6, 126, !dbg !11209
  br i1 %cmp, label %if.then8, label %if.else9, !dbg !11210

if.then8:                                         ; preds = %if.else5
  store i32 -1, i32* %retval, align 4, !dbg !11211
  br label %return, !dbg !11211

if.else9:                                         ; preds = %if.else5
  %4 = load i8, i8* %c.addr, align 1, !dbg !11212
  %conv10 = zext i8 %4 to i32, !dbg !11213
  %add = add nsw i32 %conv10, 255, !dbg !11214
  %add11 = add nsw i32 %add, 1, !dbg !11215
  store i32 %add11, i32* %retval, align 4, !dbg !11216
  br label %return, !dbg !11216

return:                                           ; preds = %if.else9, %if.then8, %if.then3, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !11217
  ret i32 %5, !dbg !11217
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hard_locale(i32 %category) #4 !dbg !11218 {
entry:
  %category.addr = alloca i32, align 4
  %hard = alloca i8, align 1, !ctir !162
  %p = alloca i8*, align 8, !ctir !90
  store i32 %category, i32* %category.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %category.addr, metadata !11222, metadata !DIExpression()), !dbg !11223
  call void @llvm.dbg.declare(metadata i8* %hard, metadata !11224, metadata !DIExpression()), !dbg !11225
  store i8 1, i8* %hard, align 1, !dbg !11225
  call void @llvm.dbg.declare(metadata i8** %p, metadata !11226, metadata !DIExpression()), !dbg !11227
  %0 = load i32, i32* %category.addr, align 4, !dbg !11228
  %call = call i8* @setlocale(i32 %0, i8* null) #12, !dbg !11229
  store i8* %call, i8** %p, align 8, !dbg !11227
  %1 = load i8*, i8** %p, align 8, !dbg !11230
  %tobool = icmp ne i8* %1, null, !dbg !11230
  br i1 %tobool, label %if.then, label %if.end5, !dbg !11232

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %p, align 8, !dbg !11233
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i64 0, i64 0)) #14, !dbg !11238
  %cmp = icmp eq i32 %call1, 0, !dbg !11239
  br i1 %cmp, label %if.then4, label %lor.lhs.false, !dbg !11240

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i8*, i8** %p, align 8, !dbg !11241
  %call2 = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.204, i64 0, i64 0)) #14, !dbg !11242
  %cmp3 = icmp eq i32 %call2, 0, !dbg !11243
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !11244

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i8 0, i8* %hard, align 1, !dbg !11245
  br label %if.end, !dbg !11246

if.end:                                           ; preds = %if.then4, %lor.lhs.false
  br label %if.end5, !dbg !11247

if.end5:                                          ; preds = %if.end, %entry
  %4 = load i8, i8* %hard, align 1, !dbg !11248
  %tobool6 = trunc i8 %4 to i1, !dbg !11248
  ret i1 %tobool6, !dbg !11249
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_buckets(%struct.hash_table* %table) #9 !dbg !11250 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11254, metadata !DIExpression()), !dbg !11255
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11256
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 2, !dbg !11257, !ctir !938
  %1 = load i64, i64* %n_buckets, align 8, !dbg !11257, !ctir !52
  ret i64 %1, !dbg !11258
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_buckets_used(%struct.hash_table* %table) #9 !dbg !11259 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11260, metadata !DIExpression()), !dbg !11261
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11262
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 3, !dbg !11263, !ctir !938
  %1 = load i64, i64* %n_buckets_used, align 8, !dbg !11263, !ctir !52
  ret i64 %1, !dbg !11264
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_n_entries(%struct.hash_table* %table) #9 !dbg !11265 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11266, metadata !DIExpression()), !dbg !11267
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11268
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4, !dbg !11269, !ctir !938
  %1 = load i64, i64* %n_entries, align 8, !dbg !11269, !ctir !52
  ret i64 %1, !dbg !11270
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_get_max_bucket_length(%struct.hash_table* %table) #9 !dbg !11271 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %max_bucket_length = alloca i64, align 8, !ctir !52
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  %bucket_length = alloca i64, align 8, !ctir !52
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11272, metadata !DIExpression()), !dbg !11273
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11274, metadata !DIExpression()), !dbg !11275
  call void @llvm.dbg.declare(metadata i64* %max_bucket_length, metadata !11276, metadata !DIExpression()), !dbg !11277
  store i64 0, i64* %max_bucket_length, align 8, !dbg !11277
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11278
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11280, !ctir !938
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11280, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11281
  br label %for.cond, !dbg !11282

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11283
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11285
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11286, !ctir !938
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11286, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11287
  br i1 %cmp, label %for.body, label %for.end, !dbg !11288

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11289
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11292, !ctir !951
  %6 = load i8*, i8** %data, align 8, !dbg !11292, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !11289
  br i1 %tobool, label %if.then, label %if.end5, !dbg !11293

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11294, metadata !DIExpression()), !dbg !11296
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11297
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11296
  call void @llvm.dbg.declare(metadata i64* %bucket_length, metadata !11298, metadata !DIExpression()), !dbg !11299
  store i64 1, i64* %bucket_length, align 8, !dbg !11299
  br label %while.cond, !dbg !11300

while.cond:                                       ; preds = %while.body, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11301
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 1, !dbg !11302, !ctir !951
  %9 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11302, !ctir !944
  store %struct.hash_entry* %9, %struct.hash_entry** %cursor, align 8, !dbg !11303
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11304
  %tobool2 = icmp ne %struct.hash_entry* %10, null, !dbg !11300
  br i1 %tobool2, label %while.body, label %while.end, !dbg !11300

while.body:                                       ; preds = %while.cond
  %11 = load i64, i64* %bucket_length, align 8, !dbg !11305
  %inc = add i64 %11, 1, !dbg !11305
  store i64 %inc, i64* %bucket_length, align 8, !dbg !11305
  br label %while.cond, !dbg !11300, !llvm.loop !11306

while.end:                                        ; preds = %while.cond
  %12 = load i64, i64* %bucket_length, align 8, !dbg !11307
  %13 = load i64, i64* %max_bucket_length, align 8, !dbg !11309
  %cmp3 = icmp ugt i64 %12, %13, !dbg !11310
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !11311

if.then4:                                         ; preds = %while.end
  %14 = load i64, i64* %bucket_length, align 8, !dbg !11312
  store i64 %14, i64* %max_bucket_length, align 8, !dbg !11313
  br label %if.end, !dbg !11314

if.end:                                           ; preds = %if.then4, %while.end
  br label %if.end5, !dbg !11315

if.end5:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !11316

for.inc:                                          ; preds = %if.end5
  %15 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11317
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 1, !dbg !11317, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11317
  br label %for.cond, !dbg !11318, !llvm.loop !11319

for.end:                                          ; preds = %for.cond
  %16 = load i64, i64* %max_bucket_length, align 8, !dbg !11321
  ret i64 %16, !dbg !11322
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local zeroext i1 @hash_table_ok(%struct.hash_table* %table) #9 !dbg !11323 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %n_buckets_used = alloca i64, align 8, !ctir !52
  %n_entries = alloca i64, align 8, !ctir !52
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11326, metadata !DIExpression()), !dbg !11327
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11328, metadata !DIExpression()), !dbg !11329
  call void @llvm.dbg.declare(metadata i64* %n_buckets_used, metadata !11330, metadata !DIExpression()), !dbg !11331
  store i64 0, i64* %n_buckets_used, align 8, !dbg !11331
  call void @llvm.dbg.declare(metadata i64* %n_entries, metadata !11332, metadata !DIExpression()), !dbg !11333
  store i64 0, i64* %n_entries, align 8, !dbg !11333
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11334
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11336, !ctir !938
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11336, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11337
  br label %for.cond, !dbg !11338

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11339
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11341
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11342, !ctir !938
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11342, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11343
  br i1 %cmp, label %for.body, label %for.end, !dbg !11344

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11345
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11348, !ctir !951
  %6 = load i8*, i8** %data, align 8, !dbg !11348, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !11345
  br i1 %tobool, label %if.then, label %if.end, !dbg !11349

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11350, metadata !DIExpression()), !dbg !11352
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11353
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11352
  %8 = load i64, i64* %n_buckets_used, align 8, !dbg !11354
  %inc = add i64 %8, 1, !dbg !11354
  store i64 %inc, i64* %n_buckets_used, align 8, !dbg !11354
  %9 = load i64, i64* %n_entries, align 8, !dbg !11355
  %inc2 = add i64 %9, 1, !dbg !11355
  store i64 %inc2, i64* %n_entries, align 8, !dbg !11355
  br label %while.cond, !dbg !11356

while.cond:                                       ; preds = %while.body, %if.then
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11357
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 1, !dbg !11358, !ctir !951
  %11 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11358, !ctir !944
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !dbg !11359
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11360
  %tobool3 = icmp ne %struct.hash_entry* %12, null, !dbg !11356
  br i1 %tobool3, label %while.body, label %while.end, !dbg !11356

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %n_entries, align 8, !dbg !11361
  %inc4 = add i64 %13, 1, !dbg !11361
  store i64 %inc4, i64* %n_entries, align 8, !dbg !11361
  br label %while.cond, !dbg !11356, !llvm.loop !11362

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !11363

if.end:                                           ; preds = %while.end, %for.body
  br label %for.inc, !dbg !11364

for.inc:                                          ; preds = %if.end
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11365
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 1, !dbg !11365, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11365
  br label %for.cond, !dbg !11366, !llvm.loop !11367

for.end:                                          ; preds = %for.cond
  %15 = load i64, i64* %n_buckets_used, align 8, !dbg !11369
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11371
  %n_buckets_used5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 3, !dbg !11372, !ctir !938
  %17 = load i64, i64* %n_buckets_used5, align 8, !dbg !11372, !ctir !52
  %cmp6 = icmp eq i64 %15, %17, !dbg !11373
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !11374

land.lhs.true:                                    ; preds = %for.end
  %18 = load i64, i64* %n_entries, align 8, !dbg !11375
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11376
  %n_entries7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 4, !dbg !11377, !ctir !938
  %20 = load i64, i64* %n_entries7, align 8, !dbg !11377, !ctir !52
  %cmp8 = icmp eq i64 %18, %20, !dbg !11378
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !11379

if.then9:                                         ; preds = %land.lhs.true
  store i1 true, i1* %retval, align 1, !dbg !11380
  br label %return, !dbg !11380

if.end10:                                         ; preds = %land.lhs.true, %for.end
  store i1 false, i1* %retval, align 1, !dbg !11381
  br label %return, !dbg !11381

return:                                           ; preds = %if.end10, %if.then9
  %21 = load i1, i1* %retval, align 1, !dbg !11382
  ret i1 %21, !dbg !11382
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_print_statistics(%struct.hash_table* %table, %struct._IO_FILE* %stream) #4 !dbg !11383 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %n_entries = alloca i64, align 8, !ctir !52
  %n_buckets = alloca i64, align 8, !ctir !52
  %n_buckets_used = alloca i64, align 8, !ctir !52
  %max_bucket_length = alloca i64, align 8, !ctir !52
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11426, metadata !DIExpression()), !dbg !11427
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11428, metadata !DIExpression()), !dbg !11429
  call void @llvm.dbg.declare(metadata i64* %n_entries, metadata !11430, metadata !DIExpression()), !dbg !11431
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11432
  %call = call i64 @hash_get_n_entries(%struct.hash_table* %0) #14, !dbg !11433
  store i64 %call, i64* %n_entries, align 8, !dbg !11431
  call void @llvm.dbg.declare(metadata i64* %n_buckets, metadata !11434, metadata !DIExpression()), !dbg !11435
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11436
  %call1 = call i64 @hash_get_n_buckets(%struct.hash_table* %1) #14, !dbg !11437
  store i64 %call1, i64* %n_buckets, align 8, !dbg !11435
  call void @llvm.dbg.declare(metadata i64* %n_buckets_used, metadata !11438, metadata !DIExpression()), !dbg !11439
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11440
  %call2 = call i64 @hash_get_n_buckets_used(%struct.hash_table* %2) #14, !dbg !11441
  store i64 %call2, i64* %n_buckets_used, align 8, !dbg !11439
  call void @llvm.dbg.declare(metadata i64* %max_bucket_length, metadata !11442, metadata !DIExpression()), !dbg !11443
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11444
  %call3 = call i64 @hash_get_max_bucket_length(%struct.hash_table* %3) #14, !dbg !11445
  store i64 %call3, i64* %max_bucket_length, align 8, !dbg !11443
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11446
  %5 = load i64, i64* %n_entries, align 8, !dbg !11447
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.205, i64 0, i64 0), i64 %5), !dbg !11448
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11449
  %7 = load i64, i64* %n_buckets, align 8, !dbg !11450
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1.206, i64 0, i64 0), i64 %7), !dbg !11451
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11452
  %9 = load i64, i64* %n_buckets_used, align 8, !dbg !11453
  %10 = load i64, i64* %n_buckets_used, align 8, !dbg !11454
  %conv = uitofp i64 %10 to double, !dbg !11454
  %mul = fmul double 1.000000e+02, %conv, !dbg !11455
  %11 = load i64, i64* %n_buckets, align 8, !dbg !11456
  %conv6 = uitofp i64 %11 to double, !dbg !11456
  %div = fdiv double %mul, %conv6, !dbg !11457
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.207, i64 0, i64 0), i64 %9, double %div), !dbg !11458
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11459
  %13 = load i64, i64* %max_bucket_length, align 8, !dbg !11460
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3.208, i64 0, i64 0), i64 %13), !dbg !11461
  ret void, !dbg !11462
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_lookup(%struct.hash_table* %table, i8* %entry1) #4 !dbg !11463 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11466, metadata !DIExpression()), !dbg !11467
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !11468, metadata !DIExpression()), !dbg !11469
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11470, metadata !DIExpression()), !dbg !11471
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11472
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !11473
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !11474
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !11471
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11475, metadata !DIExpression()), !dbg !11476
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11477
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %2, i32 0, i32 0, !dbg !11479, !ctir !951
  %3 = load i8*, i8** %data, align 8, !dbg !11479, !ctir !47
  %cmp = icmp eq i8* %3, null, !dbg !11480
  br i1 %cmp, label %if.then, label %if.end, !dbg !11481

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11482
  br label %return, !dbg !11482

if.end:                                           ; preds = %entry
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11483
  store %struct.hash_entry* %4, %struct.hash_entry** %cursor, align 8, !dbg !11485
  br label %for.cond, !dbg !11486

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11487
  %tobool = icmp ne %struct.hash_entry* %5, null, !dbg !11489
  br i1 %tobool, label %for.body, label %for.end, !dbg !11489

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %entry.addr, align 8, !dbg !11490
  %7 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11492
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !11493, !ctir !951
  %8 = load i8*, i8** %data2, align 8, !dbg !11493, !ctir !47
  %cmp3 = icmp eq i8* %6, %8, !dbg !11494
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !11495

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11496
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 7, !dbg !11497, !ctir !938
  %10 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !11497, !ctir !973
  %11 = load i8*, i8** %entry.addr, align 8, !dbg !11498
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11499
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !11500, !ctir !951
  %13 = load i8*, i8** %data4, align 8, !dbg !11500, !ctir !47
  %call5 = call zeroext i1 %10(i8* %11, i8* %13), !dbg !11496
  br i1 %call5, label %if.then6, label %if.end8, !dbg !11501

if.then6:                                         ; preds = %lor.lhs.false, %for.body
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11502
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !11503, !ctir !951
  %15 = load i8*, i8** %data7, align 8, !dbg !11503, !ctir !47
  store i8* %15, i8** %retval, align 8, !dbg !11504
  br label %return, !dbg !11504

if.end8:                                          ; preds = %lor.lhs.false
  br label %for.inc, !dbg !11505

for.inc:                                          ; preds = %if.end8
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11506
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 1, !dbg !11507, !ctir !951
  %17 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11507, !ctir !944
  store %struct.hash_entry* %17, %struct.hash_entry** %cursor, align 8, !dbg !11508
  br label %for.cond, !dbg !11509, !llvm.loop !11510

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !11512
  br label %return, !dbg !11512

return:                                           ; preds = %for.end, %if.then6, %if.then
  %18 = load i8*, i8** %retval, align 8, !dbg !11513
  ret i8* %18, !dbg !11513
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @safe_hasher(%struct.hash_table* %table, i8* %key) #4 !dbg !11514 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %key.addr = alloca i8*, align 8
  %n = alloca i64, align 8, !ctir !52
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11517, metadata !DIExpression()), !dbg !11518
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !11519, metadata !DIExpression()), !dbg !11520
  call void @llvm.dbg.declare(metadata i64* %n, metadata !11521, metadata !DIExpression()), !dbg !11522
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11523
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 6, !dbg !11524, !ctir !938
  %1 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !dbg !11524, !ctir !968
  %2 = load i8*, i8** %key.addr, align 8, !dbg !11525
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11526
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 2, !dbg !11527, !ctir !938
  %4 = load i64, i64* %n_buckets, align 8, !dbg !11527, !ctir !52
  %call = call i64 %1(i8* %2, i64 %4), !dbg !11523
  store i64 %call, i64* %n, align 8, !dbg !11522
  %5 = load i64, i64* %n, align 8, !dbg !11528
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11530
  %n_buckets1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 2, !dbg !11531, !ctir !938
  %7 = load i64, i64* %n_buckets1, align 8, !dbg !11531, !ctir !52
  %cmp = icmp ult i64 %5, %7, !dbg !11532
  br i1 %cmp, label %if.end, label %if.then, !dbg !11533

if.then:                                          ; preds = %entry
  call void @abort() #13, !dbg !11534
  unreachable, !dbg !11534

if.end:                                           ; preds = %entry
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11535
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 0, !dbg !11536, !ctir !938
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11536, !ctir !944
  %10 = load i64, i64* %n, align 8, !dbg !11537
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i64 %10, !dbg !11538, !ctir !945
  ret %struct.hash_entry* %add.ptr, !dbg !11539
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i8* @hash_get_first(%struct.hash_table* %table) #9 !dbg !11540 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11543, metadata !DIExpression()), !dbg !11544
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11545, metadata !DIExpression()), !dbg !11546
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11547
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 4, !dbg !11549, !ctir !938
  %1 = load i64, i64* %n_entries, align 8, !dbg !11549, !ctir !52
  %cmp = icmp eq i64 %1, 0, !dbg !11550
  br i1 %cmp, label %if.then, label %if.end, !dbg !11551

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11552
  br label %return, !dbg !11552

if.end:                                           ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11553
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 0, !dbg !11555, !ctir !938
  %3 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11555, !ctir !944
  store %struct.hash_entry* %3, %struct.hash_entry** %bucket, align 8, !dbg !11556
  br label %for.cond, !dbg !11557

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11558
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11561
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 1, !dbg !11562, !ctir !938
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11562, !ctir !950
  %cmp2 = icmp ult %struct.hash_entry* %4, %6, !dbg !11563
  br i1 %cmp2, label %if.else, label %if.then3, !dbg !11564

if.then3:                                         ; preds = %for.cond
  call void @abort() #13, !dbg !11565
  unreachable, !dbg !11565

if.else:                                          ; preds = %for.cond
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11566
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !11568, !ctir !951
  %8 = load i8*, i8** %data, align 8, !dbg !11568, !ctir !47
  %tobool = icmp ne i8* %8, null, !dbg !11566
  br i1 %tobool, label %if.then4, label %if.end6, !dbg !11569

if.then4:                                         ; preds = %if.else
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11570
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !11571, !ctir !951
  %10 = load i8*, i8** %data5, align 8, !dbg !11571, !ctir !47
  store i8* %10, i8** %retval, align 8, !dbg !11572
  br label %return, !dbg !11572

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6
  br label %for.inc, !dbg !11573

for.inc:                                          ; preds = %if.end7
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11574
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 1, !dbg !11574, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11574
  br label %for.cond, !dbg !11575, !llvm.loop !11576

return:                                           ; preds = %if.then4, %if.then
  %12 = load i8*, i8** %retval, align 8, !dbg !11579
  ret i8* %12, !dbg !11579
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_get_next(%struct.hash_table* %table, i8* %entry1) #4 !dbg !11580 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11581, metadata !DIExpression()), !dbg !11582
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !11583, metadata !DIExpression()), !dbg !11584
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11585, metadata !DIExpression()), !dbg !11586
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11587
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !11588
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !11589
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !11586
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11590, metadata !DIExpression()), !dbg !11591
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11592
  store %struct.hash_entry* %2, %struct.hash_entry** %cursor, align 8, !dbg !11593
  br label %do.body, !dbg !11594

do.body:                                          ; preds = %do.cond, %entry
  %3 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11595
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i32 0, i32 0, !dbg !11598, !ctir !951
  %4 = load i8*, i8** %data, align 8, !dbg !11598, !ctir !47
  %5 = load i8*, i8** %entry.addr, align 8, !dbg !11599
  %cmp = icmp eq i8* %4, %5, !dbg !11600
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11601

land.lhs.true:                                    ; preds = %do.body
  %6 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11602
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %6, i32 0, i32 1, !dbg !11603, !ctir !951
  %7 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11603, !ctir !944
  %tobool = icmp ne %struct.hash_entry* %7, null, !dbg !11602
  br i1 %tobool, label %if.then, label %if.end, !dbg !11604

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11605
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %8, i32 0, i32 1, !dbg !11606, !ctir !951
  %9 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !dbg !11606, !ctir !944
  %data3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !11607, !ctir !945
  %10 = load i8*, i8** %data3, align 8, !dbg !11607, !ctir !47
  store i8* %10, i8** %retval, align 8, !dbg !11608
  br label %return, !dbg !11608

if.end:                                           ; preds = %land.lhs.true, %do.body
  %11 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11609
  %next4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 0, i32 1, !dbg !11610, !ctir !951
  %12 = load %struct.hash_entry*, %struct.hash_entry** %next4, align 8, !dbg !11610, !ctir !944
  store %struct.hash_entry* %12, %struct.hash_entry** %cursor, align 8, !dbg !11611
  br label %do.cond, !dbg !11612

do.cond:                                          ; preds = %if.end
  %13 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11613
  %cmp5 = icmp ne %struct.hash_entry* %13, null, !dbg !11614
  br i1 %cmp5, label %do.body, label %do.end, !dbg !11612, !llvm.loop !11615

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !11617

while.cond:                                       ; preds = %if.end11, %do.end
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11618
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 1, !dbg !11618, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11618
  %15 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11619
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 1, !dbg !11620, !ctir !938
  %16 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11620, !ctir !950
  %cmp6 = icmp ult %struct.hash_entry* %incdec.ptr, %16, !dbg !11621
  br i1 %cmp6, label %while.body, label %while.end, !dbg !11617

while.body:                                       ; preds = %while.cond
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11622
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 0, !dbg !11624, !ctir !951
  %18 = load i8*, i8** %data7, align 8, !dbg !11624, !ctir !47
  %tobool8 = icmp ne i8* %18, null, !dbg !11622
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !11625

if.then9:                                         ; preds = %while.body
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11626
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 0, !dbg !11627, !ctir !951
  %20 = load i8*, i8** %data10, align 8, !dbg !11627, !ctir !47
  store i8* %20, i8** %retval, align 8, !dbg !11628
  br label %return, !dbg !11628

if.end11:                                         ; preds = %while.body
  br label %while.cond, !dbg !11617, !llvm.loop !11629

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !11631
  br label %return, !dbg !11631

return:                                           ; preds = %while.end, %if.then9, %if.then
  %21 = load i8*, i8** %retval, align 8, !dbg !11632
  ret i8* %21, !dbg !11632
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @hash_get_entries(%struct.hash_table* %table, i8** %buffer, i64 %buffer_size) #4 !dbg !11633 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_size.addr = alloca i64, align 8
  %counter = alloca i64, align 8, !ctir !52
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11636, metadata !DIExpression()), !dbg !11637
  store i8** %buffer, i8*** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %buffer.addr, metadata !11638, metadata !DIExpression()), !dbg !11639
  store i64 %buffer_size, i64* %buffer_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffer_size.addr, metadata !11640, metadata !DIExpression()), !dbg !11641
  call void @llvm.dbg.declare(metadata i64* %counter, metadata !11642, metadata !DIExpression()), !dbg !11643
  store i64 0, i64* %counter, align 8, !dbg !11643
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11644, metadata !DIExpression()), !dbg !11645
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11646, metadata !DIExpression()), !dbg !11647
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11648
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11650, !ctir !938
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11650, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11651
  br label %for.cond, !dbg !11652

for.cond:                                         ; preds = %for.inc9, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11653
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11655
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11656, !ctir !938
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11656, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11657
  br i1 %cmp, label %for.body, label %for.end10, !dbg !11658

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11659
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11662, !ctir !951
  %6 = load i8*, i8** %data, align 8, !dbg !11662, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !11659
  br i1 %tobool, label %if.then, label %if.end8, !dbg !11663

if.then:                                          ; preds = %for.body
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11664
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11667
  br label %for.cond2, !dbg !11668

for.cond2:                                        ; preds = %for.inc, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11669
  %tobool3 = icmp ne %struct.hash_entry* %8, null, !dbg !11671
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !11671

for.body4:                                        ; preds = %for.cond2
  %9 = load i64, i64* %counter, align 8, !dbg !11672
  %10 = load i64, i64* %buffer_size.addr, align 8, !dbg !11675
  %cmp5 = icmp uge i64 %9, %10, !dbg !11676
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !11677

if.then6:                                         ; preds = %for.body4
  %11 = load i64, i64* %counter, align 8, !dbg !11678
  store i64 %11, i64* %retval, align 8, !dbg !11679
  br label %return, !dbg !11679

if.end:                                           ; preds = %for.body4
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11680
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !11681, !ctir !951
  %13 = load i8*, i8** %data7, align 8, !dbg !11681, !ctir !47
  %14 = load i8**, i8*** %buffer.addr, align 8, !dbg !11682
  %15 = load i64, i64* %counter, align 8, !dbg !11683
  %inc = add i64 %15, 1, !dbg !11683
  store i64 %inc, i64* %counter, align 8, !dbg !11683
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %15, !dbg !11682, !ctir !983
  store i8* %13, i8** %arrayidx, align 8, !dbg !11684
  br label %for.inc, !dbg !11685

for.inc:                                          ; preds = %if.end
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11686
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 1, !dbg !11687, !ctir !951
  %17 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11687, !ctir !944
  store %struct.hash_entry* %17, %struct.hash_entry** %cursor, align 8, !dbg !11688
  br label %for.cond2, !dbg !11689, !llvm.loop !11690

for.end:                                          ; preds = %for.cond2
  br label %if.end8, !dbg !11692

if.end8:                                          ; preds = %for.end, %for.body
  br label %for.inc9, !dbg !11693

for.inc9:                                         ; preds = %if.end8
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11694
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 1, !dbg !11694, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11694
  br label %for.cond, !dbg !11695, !llvm.loop !11696

for.end10:                                        ; preds = %for.cond
  %19 = load i64, i64* %counter, align 8, !dbg !11698
  store i64 %19, i64* %retval, align 8, !dbg !11699
  br label %return, !dbg !11699

return:                                           ; preds = %for.end10, %if.then6
  %20 = load i64, i64* %retval, align 8, !dbg !11700
  ret i64 %20, !dbg !11700
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @hash_do_for_each(%struct.hash_table* %table, i1 (i8*, i8*)* %processor, i8* %processor_data) #4 !dbg !11701 {
entry:
  %retval = alloca i64, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %processor.addr = alloca i1 (i8*, i8*)*, align 8
  %processor_data.addr = alloca i8*, align 8
  %counter = alloca i64, align 8, !ctir !52
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !950
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !950
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11708, metadata !DIExpression()), !dbg !11709
  store i1 (i8*, i8*)* %processor, i1 (i8*, i8*)** %processor.addr, align 8
  call void @llvm.dbg.declare(metadata i1 (i8*, i8*)** %processor.addr, metadata !11710, metadata !DIExpression()), !dbg !11711
  store i8* %processor_data, i8** %processor_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %processor_data.addr, metadata !11712, metadata !DIExpression()), !dbg !11713
  call void @llvm.dbg.declare(metadata i64* %counter, metadata !11714, metadata !DIExpression()), !dbg !11715
  store i64 0, i64* %counter, align 8, !dbg !11715
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !11716, metadata !DIExpression()), !dbg !11717
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !11718, metadata !DIExpression()), !dbg !11719
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11720
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !11722, !ctir !938
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !11722, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !11723
  br label %for.cond, !dbg !11724

for.cond:                                         ; preds = %for.inc8, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11725
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11727
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !11728, !ctir !938
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !11728, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !11729
  br i1 %cmp, label %for.body, label %for.end9, !dbg !11730

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11731
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !11734, !ctir !951
  %6 = load i8*, i8** %data, align 8, !dbg !11734, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !11731
  br i1 %tobool, label %if.then, label %if.end7, !dbg !11735

if.then:                                          ; preds = %for.body
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11736
  store %struct.hash_entry* %7, %struct.hash_entry** %cursor, align 8, !dbg !11739
  br label %for.cond2, !dbg !11740

for.cond2:                                        ; preds = %for.inc, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11741
  %tobool3 = icmp ne %struct.hash_entry* %8, null, !dbg !11743
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !11743

for.body4:                                        ; preds = %for.cond2
  %9 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %processor.addr, align 8, !dbg !11744
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11747
  %data5 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 0, !dbg !11748, !ctir !951
  %11 = load i8*, i8** %data5, align 8, !dbg !11748, !ctir !47
  %12 = load i8*, i8** %processor_data.addr, align 8, !dbg !11749
  %call = call zeroext i1 %9(i8* %11, i8* %12), !dbg !11744
  br i1 %call, label %if.end, label %if.then6, !dbg !11750

if.then6:                                         ; preds = %for.body4
  %13 = load i64, i64* %counter, align 8, !dbg !11751
  store i64 %13, i64* %retval, align 8, !dbg !11752
  br label %return, !dbg !11752

if.end:                                           ; preds = %for.body4
  %14 = load i64, i64* %counter, align 8, !dbg !11753
  %inc = add i64 %14, 1, !dbg !11753
  store i64 %inc, i64* %counter, align 8, !dbg !11753
  br label %for.inc, !dbg !11754

for.inc:                                          ; preds = %if.end
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !11755
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 1, !dbg !11756, !ctir !951
  %16 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !11756, !ctir !944
  store %struct.hash_entry* %16, %struct.hash_entry** %cursor, align 8, !dbg !11757
  br label %for.cond2, !dbg !11758, !llvm.loop !11759

for.end:                                          ; preds = %for.cond2
  br label %if.end7, !dbg !11761

if.end7:                                          ; preds = %for.end, %for.body
  br label %for.inc8, !dbg !11762

for.inc8:                                         ; preds = %if.end7
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !11763
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 1, !dbg !11763, !ctir !951
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !11763
  br label %for.cond, !dbg !11764, !llvm.loop !11765

for.end9:                                         ; preds = %for.cond
  %18 = load i64, i64* %counter, align 8, !dbg !11767
  store i64 %18, i64* %retval, align 8, !dbg !11768
  br label %return, !dbg !11768

return:                                           ; preds = %for.end9, %if.then6
  %19 = load i64, i64* %retval, align 8, !dbg !11769
  ret i64 %19, !dbg !11769
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @hash_string(i8* %string, i64 %n_buckets) #9 !dbg !11770 {
entry:
  %string.addr = alloca i8*, align 8
  %n_buckets.addr = alloca i64, align 8
  %value = alloca i64, align 8, !ctir !52
  %ch = alloca i8, align 1, !ctir !535
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !11773, metadata !DIExpression()), !dbg !11774
  store i64 %n_buckets, i64* %n_buckets.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_buckets.addr, metadata !11775, metadata !DIExpression()), !dbg !11776
  call void @llvm.dbg.declare(metadata i64* %value, metadata !11777, metadata !DIExpression()), !dbg !11778
  store i64 0, i64* %value, align 8, !dbg !11778
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !11779, metadata !DIExpression()), !dbg !11780
  br label %for.cond, !dbg !11781

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %string.addr, align 8, !dbg !11782
  %1 = load i8, i8* %0, align 1, !dbg !11785, !ctir !91
  store i8 %1, i8* %ch, align 1, !dbg !11786
  %tobool = icmp ne i8 %1, 0, !dbg !11787
  br i1 %tobool, label %for.body, label %for.end, !dbg !11787

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %value, align 8, !dbg !11788
  %mul = mul i64 %2, 31, !dbg !11789
  %3 = load i8, i8* %ch, align 1, !dbg !11790
  %conv = zext i8 %3 to i64, !dbg !11790
  %add = add i64 %mul, %conv, !dbg !11791
  %4 = load i64, i64* %n_buckets.addr, align 8, !dbg !11792
  %rem = urem i64 %add, %4, !dbg !11793
  store i64 %rem, i64* %value, align 8, !dbg !11794
  br label %for.inc, !dbg !11795

for.inc:                                          ; preds = %for.body
  %5 = load i8*, i8** %string.addr, align 8, !dbg !11796
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !11796, !ctir !91
  store i8* %incdec.ptr, i8** %string.addr, align 8, !dbg !11796
  br label %for.cond, !dbg !11797, !llvm.loop !11798

for.end:                                          ; preds = %for.cond
  %6 = load i64, i64* %value, align 8, !dbg !11800
  ret i64 %6, !dbg !11801
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_reset_tuning(%struct.hash_tuning* %tuning) #4 !dbg !11802 {
entry:
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !11806, metadata !DIExpression()), !dbg !11807
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11808
  %1 = bitcast %struct.hash_tuning* %0 to i8*, !dbg !11809
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 bitcast (%struct.hash_tuning* @default_tuning to i8*), i64 20, i1 false), !dbg !11809
  ret void, !dbg !11810
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.hash_table* @hash_initialize(i64 %candidate, %struct.hash_tuning* %tuning, i64 (i8*, i64)* %hasher, i1 (i8*, i8*)* %comparator, void (i8*)* %data_freer) #4 !dbg !11811 {
entry:
  %retval = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %hasher.addr = alloca i64 (i8*, i64)*, align 8
  %comparator.addr = alloca i1 (i8*, i8*)*, align 8
  %data_freer.addr = alloca void (i8*)*, align 8
  %table = alloca %struct.hash_table*, align 8, !ctir !984
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !11814, metadata !DIExpression()), !dbg !11815
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !11816, metadata !DIExpression()), !dbg !11817
  store i64 (i8*, i64)* %hasher, i64 (i8*, i64)** %hasher.addr, align 8
  call void @llvm.dbg.declare(metadata i64 (i8*, i64)** %hasher.addr, metadata !11818, metadata !DIExpression()), !dbg !11819
  store i1 (i8*, i8*)* %comparator, i1 (i8*, i8*)** %comparator.addr, align 8
  call void @llvm.dbg.declare(metadata i1 (i8*, i8*)** %comparator.addr, metadata !11820, metadata !DIExpression()), !dbg !11821
  store void (i8*)* %data_freer, void (i8*)** %data_freer.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %data_freer.addr, metadata !11822, metadata !DIExpression()), !dbg !11823
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table, metadata !11824, metadata !DIExpression()), !dbg !11825
  %0 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11826
  %cmp = icmp eq i64 (i8*, i64)* %0, null, !dbg !11828
  br i1 %cmp, label %if.then, label %if.end, !dbg !11829

if.then:                                          ; preds = %entry
  store i64 (i8*, i64)* @raw_hasher, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11830
  br label %if.end, !dbg !11831

if.end:                                           ; preds = %if.then, %entry
  %1 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11832
  %cmp1 = icmp eq i1 (i8*, i8*)* %1, null, !dbg !11834
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !11835

if.then2:                                         ; preds = %if.end
  store i1 (i8*, i8*)* @raw_comparator, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11836
  br label %if.end3, !dbg !11837

if.end3:                                          ; preds = %if.then2, %if.end
  %call = call noalias i8* @malloc(i64 80) #12, !dbg !11838
  %2 = bitcast i8* %call to %struct.hash_table*, !dbg !11838
  store %struct.hash_table* %2, %struct.hash_table** %table, align 8, !dbg !11839
  %3 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11840
  %cmp4 = icmp eq %struct.hash_table* %3, null, !dbg !11842
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !11843

if.then5:                                         ; preds = %if.end3
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8, !dbg !11844
  br label %return, !dbg !11844

if.end6:                                          ; preds = %if.end3
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11845
  %tobool = icmp ne %struct.hash_tuning* %4, null, !dbg !11845
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !11847

if.then7:                                         ; preds = %if.end6
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11848
  br label %if.end8, !dbg !11849

if.end8:                                          ; preds = %if.then7, %if.end6
  %5 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11850
  %6 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11851
  %tuning9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 5, !dbg !11852, !ctir !939
  store %struct.hash_tuning* %5, %struct.hash_tuning** %tuning9, align 8, !dbg !11853, !ctir !956
  %7 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11854
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %7), !dbg !11856
  br i1 %call10, label %if.end12, label %if.then11, !dbg !11857

if.then11:                                        ; preds = %if.end8
  br label %fail, !dbg !11858

if.end12:                                         ; preds = %if.end8
  %8 = load i64, i64* %candidate.addr, align 8, !dbg !11860
  %9 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !11861
  %call13 = call i64 @compute_bucket_size(i64 %8, %struct.hash_tuning* %9) #14, !dbg !11862
  %10 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11863
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 2, !dbg !11864, !ctir !939
  store i64 %call13, i64* %n_buckets, align 8, !dbg !11865, !ctir !52
  %11 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11866
  %n_buckets14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 2, !dbg !11868, !ctir !939
  %12 = load i64, i64* %n_buckets14, align 8, !dbg !11868, !ctir !52
  %tobool15 = icmp ne i64 %12, 0, !dbg !11866
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !11869

if.then16:                                        ; preds = %if.end12
  br label %fail, !dbg !11870

if.end17:                                         ; preds = %if.end12
  %13 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11871
  %n_buckets18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 2, !dbg !11872, !ctir !939
  %14 = load i64, i64* %n_buckets18, align 8, !dbg !11872, !ctir !52
  %call19 = call noalias i8* @calloc(i64 %14, i64 16) #12, !dbg !11873
  %15 = bitcast i8* %call19 to %struct.hash_entry*, !dbg !11873
  %16 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11874
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 0, !dbg !11875, !ctir !939
  store %struct.hash_entry* %15, %struct.hash_entry** %bucket, align 8, !dbg !11876, !ctir !944
  %17 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11877
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 0, !dbg !11879, !ctir !939
  %18 = load %struct.hash_entry*, %struct.hash_entry** %bucket20, align 8, !dbg !11879, !ctir !944
  %cmp21 = icmp eq %struct.hash_entry* %18, null, !dbg !11880
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !11881

if.then22:                                        ; preds = %if.end17
  br label %fail, !dbg !11882

if.end23:                                         ; preds = %if.end17
  %19 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11883
  %bucket24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 0, !dbg !11884, !ctir !939
  %20 = load %struct.hash_entry*, %struct.hash_entry** %bucket24, align 8, !dbg !11884, !ctir !944
  %21 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11885
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 2, !dbg !11886, !ctir !939
  %22 = load i64, i64* %n_buckets25, align 8, !dbg !11886, !ctir !52
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i64 %22, !dbg !11887, !ctir !945
  %23 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11888
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 1, !dbg !11889, !ctir !939
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !dbg !11890, !ctir !950
  %24 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11891
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 3, !dbg !11892, !ctir !939
  store i64 0, i64* %n_buckets_used, align 8, !dbg !11893, !ctir !52
  %25 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11894
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 4, !dbg !11895, !ctir !939
  store i64 0, i64* %n_entries, align 8, !dbg !11896, !ctir !52
  %26 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher.addr, align 8, !dbg !11897
  %27 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11898
  %hasher26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %27, i32 0, i32 6, !dbg !11899, !ctir !939
  store i64 (i8*, i64)* %26, i64 (i8*, i64)** %hasher26, align 8, !dbg !11900, !ctir !968
  %28 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator.addr, align 8, !dbg !11901
  %29 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11902
  %comparator27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 7, !dbg !11903, !ctir !939
  store i1 (i8*, i8*)* %28, i1 (i8*, i8*)** %comparator27, align 8, !dbg !11904, !ctir !973
  %30 = load void (i8*)*, void (i8*)** %data_freer.addr, align 8, !dbg !11905
  %31 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11906
  %data_freer28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %31, i32 0, i32 8, !dbg !11907, !ctir !939
  store void (i8*)* %30, void (i8*)** %data_freer28, align 8, !dbg !11908, !ctir !978
  %32 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11909
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 9, !dbg !11910, !ctir !939
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list, align 8, !dbg !11911, !ctir !944
  %33 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11912
  store %struct.hash_table* %33, %struct.hash_table** %retval, align 8, !dbg !11913
  br label %return, !dbg !11913

fail:                                             ; preds = %if.then22, %if.then16, %if.then11
  call void @llvm.dbg.label(metadata !11914), !dbg !11915
  %34 = load %struct.hash_table*, %struct.hash_table** %table, align 8, !dbg !11916
  %35 = bitcast %struct.hash_table* %34 to i8*, !dbg !11916
  call void @free(i8* %35) #12, !dbg !11917
  store %struct.hash_table* null, %struct.hash_table** %retval, align 8, !dbg !11918
  br label %return, !dbg !11918

return:                                           ; preds = %fail, %if.end23, %if.then5
  %36 = load %struct.hash_table*, %struct.hash_table** %retval, align 8, !dbg !11919
  ret %struct.hash_table* %36, !dbg !11919
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @raw_hasher(i8* %data, i64 %n) #4 !dbg !11920 {
entry:
  %data.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %val = alloca i64, align 8, !ctir !52
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11921, metadata !DIExpression()), !dbg !11922
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !11923, metadata !DIExpression()), !dbg !11924
  call void @llvm.dbg.declare(metadata i64* %val, metadata !11925, metadata !DIExpression()), !dbg !11926
  %0 = load i8*, i8** %data.addr, align 8, !dbg !11927
  %1 = ptrtoint i8* %0 to i64, !dbg !11928
  %call = call i64 @rotr_sz(i64 %1, i32 3), !dbg !11929
  store i64 %call, i64* %val, align 8, !dbg !11926
  %2 = load i64, i64* %val, align 8, !dbg !11930
  %3 = load i64, i64* %n.addr, align 8, !dbg !11931
  %rem = urem i64 %2, %3, !dbg !11932
  ret i64 %rem, !dbg !11933
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @raw_comparator(i8* %a, i8* %b) #4 !dbg !11934 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !11935, metadata !DIExpression()), !dbg !11936
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !11937, metadata !DIExpression()), !dbg !11938
  %0 = load i8*, i8** %a.addr, align 8, !dbg !11939
  %1 = load i8*, i8** %b.addr, align 8, !dbg !11940
  %cmp = icmp eq i8* %0, %1, !dbg !11941
  ret i1 %cmp, !dbg !11942
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @check_tuning(%struct.hash_table* %table) #4 !dbg !11943 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %tuning = alloca %struct.hash_tuning*, align 8, !ctir !956
  %epsilon = alloca float, align 4, !ctir !962
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !11946, metadata !DIExpression()), !dbg !11947
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning, metadata !11948, metadata !DIExpression()), !dbg !11949
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !11950
  %tuning1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 5, !dbg !11951, !ctir !939
  %1 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning1, align 8, !dbg !11951, !ctir !956
  store %struct.hash_tuning* %1, %struct.hash_tuning** %tuning, align 8, !dbg !11949
  call void @llvm.dbg.declare(metadata float* %epsilon, metadata !11952, metadata !DIExpression()), !dbg !11953
  %2 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11954
  %cmp = icmp eq %struct.hash_tuning* %2, @default_tuning, !dbg !11956
  br i1 %cmp, label %if.then, label %if.end, !dbg !11957

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1, !dbg !11958
  br label %return, !dbg !11958

if.end:                                           ; preds = %entry
  store float 0x3FB99999A0000000, float* %epsilon, align 4, !dbg !11959
  %3 = load float, float* %epsilon, align 4, !dbg !11960
  %4 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11962
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %4, i32 0, i32 2, !dbg !11963, !ctir !957
  %5 = load float, float* %growth_threshold, align 4, !dbg !11963, !ctir !962
  %cmp2 = fcmp olt float %3, %5, !dbg !11964
  br i1 %cmp2, label %land.lhs.true, label %if.end22, !dbg !11965

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11966
  %growth_threshold3 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %6, i32 0, i32 2, !dbg !11967, !ctir !957
  %7 = load float, float* %growth_threshold3, align 4, !dbg !11967, !ctir !962
  %8 = load float, float* %epsilon, align 4, !dbg !11968
  %sub = fsub float 1.000000e+00, %8, !dbg !11969
  %cmp4 = fcmp olt float %7, %sub, !dbg !11970
  br i1 %cmp4, label %land.lhs.true5, label %if.end22, !dbg !11971

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load float, float* %epsilon, align 4, !dbg !11972
  %add = fadd float 1.000000e+00, %9, !dbg !11973
  %10 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11974
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %10, i32 0, i32 3, !dbg !11975, !ctir !957
  %11 = load float, float* %growth_factor, align 4, !dbg !11975, !ctir !962
  %cmp6 = fcmp olt float %add, %11, !dbg !11976
  br i1 %cmp6, label %land.lhs.true7, label %if.end22, !dbg !11977

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11978
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %12, i32 0, i32 0, !dbg !11979, !ctir !957
  %13 = load float, float* %shrink_threshold, align 4, !dbg !11979, !ctir !962
  %cmp8 = fcmp ole float 0.000000e+00, %13, !dbg !11980
  br i1 %cmp8, label %land.lhs.true9, label %if.end22, !dbg !11981

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11982
  %shrink_threshold10 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 0, !dbg !11983, !ctir !957
  %15 = load float, float* %shrink_threshold10, align 4, !dbg !11983, !ctir !962
  %16 = load float, float* %epsilon, align 4, !dbg !11984
  %add11 = fadd float %15, %16, !dbg !11985
  %17 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11986
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %17, i32 0, i32 1, !dbg !11987, !ctir !957
  %18 = load float, float* %shrink_factor, align 4, !dbg !11987, !ctir !962
  %cmp12 = fcmp olt float %add11, %18, !dbg !11988
  br i1 %cmp12, label %land.lhs.true13, label %if.end22, !dbg !11989

land.lhs.true13:                                  ; preds = %land.lhs.true9
  %19 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11990
  %shrink_factor14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %19, i32 0, i32 1, !dbg !11991, !ctir !957
  %20 = load float, float* %shrink_factor14, align 4, !dbg !11991, !ctir !962
  %cmp15 = fcmp ole float %20, 1.000000e+00, !dbg !11992
  br i1 %cmp15, label %land.lhs.true16, label %if.end22, !dbg !11993

land.lhs.true16:                                  ; preds = %land.lhs.true13
  %21 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11994
  %shrink_threshold17 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %21, i32 0, i32 0, !dbg !11995, !ctir !957
  %22 = load float, float* %shrink_threshold17, align 4, !dbg !11995, !ctir !962
  %23 = load float, float* %epsilon, align 4, !dbg !11996
  %add18 = fadd float %22, %23, !dbg !11997
  %24 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !11998
  %growth_threshold19 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %24, i32 0, i32 2, !dbg !11999, !ctir !957
  %25 = load float, float* %growth_threshold19, align 4, !dbg !11999, !ctir !962
  %cmp20 = fcmp olt float %add18, %25, !dbg !12000
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !12001

if.then21:                                        ; preds = %land.lhs.true16
  store i1 true, i1* %retval, align 1, !dbg !12002
  br label %return, !dbg !12002

if.end22:                                         ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %land.lhs.true, %if.end
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12003
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 5, !dbg !12004, !ctir !939
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %tuning23, align 8, !dbg !12005, !ctir !956
  store i1 false, i1* %retval, align 1, !dbg !12006
  br label %return, !dbg !12006

return:                                           ; preds = %if.end22, %if.then21, %if.then
  %27 = load i1, i1* %retval, align 1, !dbg !12007
  ret i1 %27, !dbg !12007
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @compute_bucket_size(i64 %candidate, %struct.hash_tuning* %tuning) #9 !dbg !12008 {
entry:
  %retval = alloca i64, align 8
  %candidate.addr = alloca i64, align 8
  %tuning.addr = alloca %struct.hash_tuning*, align 8
  %new_candidate = alloca float, align 4, !ctir !962
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12011, metadata !DIExpression()), !dbg !12012
  store %struct.hash_tuning* %tuning, %struct.hash_tuning** %tuning.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning.addr, metadata !12013, metadata !DIExpression()), !dbg !12014
  %0 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !12015
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %0, i32 0, i32 4, !dbg !12017, !ctir !957
  %1 = load i8, i8* %is_n_buckets, align 4, !dbg !12017
  %tobool = trunc i8 %1 to i1, !dbg !12017, !ctir !162
  br i1 %tobool, label %if.end4, label %if.then, !dbg !12018

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float* %new_candidate, metadata !12019, metadata !DIExpression()), !dbg !12021
  %2 = load i64, i64* %candidate.addr, align 8, !dbg !12022
  %conv = uitofp i64 %2 to float, !dbg !12022
  %3 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning.addr, align 8, !dbg !12023
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %3, i32 0, i32 2, !dbg !12024, !ctir !957
  %4 = load float, float* %growth_threshold, align 4, !dbg !12024, !ctir !962
  %div = fdiv float %conv, %4, !dbg !12025
  store float %div, float* %new_candidate, align 4, !dbg !12021
  %5 = load float, float* %new_candidate, align 4, !dbg !12026
  %cmp = fcmp ole float 0x43F0000000000000, %5, !dbg !12028
  br i1 %cmp, label %if.then2, label %if.end, !dbg !12029

if.then2:                                         ; preds = %if.then
  store i64 0, i64* %retval, align 8, !dbg !12030
  br label %return, !dbg !12030

if.end:                                           ; preds = %if.then
  %6 = load float, float* %new_candidate, align 4, !dbg !12031
  %conv3 = fptoui float %6 to i64, !dbg !12031
  store i64 %conv3, i64* %candidate.addr, align 8, !dbg !12032
  br label %if.end4, !dbg !12033

if.end4:                                          ; preds = %if.end, %entry
  %7 = load i64, i64* %candidate.addr, align 8, !dbg !12034
  %call = call i64 @next_prime(i64 %7) #16, !dbg !12035
  store i64 %call, i64* %candidate.addr, align 8, !dbg !12036
  %8 = load i64, i64* %candidate.addr, align 8, !dbg !12037
  %cmp5 = icmp ult i64 1152921504606846975, %8, !dbg !12037
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !12039

if.then7:                                         ; preds = %if.end4
  store i64 0, i64* %retval, align 8, !dbg !12040
  br label %return, !dbg !12040

if.end8:                                          ; preds = %if.end4
  %9 = load i64, i64* %candidate.addr, align 8, !dbg !12041
  store i64 %9, i64* %retval, align 8, !dbg !12042
  br label %return, !dbg !12042

return:                                           ; preds = %if.end8, %if.then7, %if.then2
  %10 = load i64, i64* %retval, align 8, !dbg !12043
  ret i64 %10, !dbg !12043
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal i64 @next_prime(i64 %candidate) #11 !dbg !12044 {
entry:
  %candidate.addr = alloca i64, align 8
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12047, metadata !DIExpression()), !dbg !12048
  %0 = load i64, i64* %candidate.addr, align 8, !dbg !12049
  %cmp = icmp ult i64 %0, 10, !dbg !12051
  br i1 %cmp, label %if.then, label %if.end, !dbg !12052

if.then:                                          ; preds = %entry
  store i64 10, i64* %candidate.addr, align 8, !dbg !12053
  br label %if.end, !dbg !12054

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %candidate.addr, align 8, !dbg !12055
  %or = or i64 %1, 1, !dbg !12055
  store i64 %or, i64* %candidate.addr, align 8, !dbg !12055
  br label %while.cond, !dbg !12056

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i64, i64* %candidate.addr, align 8, !dbg !12057
  %cmp1 = icmp ne i64 -1, %2, !dbg !12058
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !12059

land.rhs:                                         ; preds = %while.cond
  %3 = load i64, i64* %candidate.addr, align 8, !dbg !12060
  %call = call zeroext i1 @is_prime(i64 %3) #16, !dbg !12061
  %lnot = xor i1 %call, true, !dbg !12062
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !12063
  br i1 %4, label %while.body, label %while.end, !dbg !12056

while.body:                                       ; preds = %land.end
  %5 = load i64, i64* %candidate.addr, align 8, !dbg !12064
  %add = add i64 %5, 2, !dbg !12064
  store i64 %add, i64* %candidate.addr, align 8, !dbg !12064
  br label %while.cond, !dbg !12056, !llvm.loop !12065

while.end:                                        ; preds = %land.end
  %6 = load i64, i64* %candidate.addr, align 8, !dbg !12067
  ret i64 %6, !dbg !12068
}

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal zeroext i1 @is_prime(i64 %candidate) #11 !dbg !12069 {
entry:
  %candidate.addr = alloca i64, align 8
  %divisor = alloca i64, align 8, !ctir !52
  %square = alloca i64, align 8, !ctir !52
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12072, metadata !DIExpression()), !dbg !12073
  call void @llvm.dbg.declare(metadata i64* %divisor, metadata !12074, metadata !DIExpression()), !dbg !12075
  store i64 3, i64* %divisor, align 8, !dbg !12075
  call void @llvm.dbg.declare(metadata i64* %square, metadata !12076, metadata !DIExpression()), !dbg !12077
  %0 = load i64, i64* %divisor, align 8, !dbg !12078
  %1 = load i64, i64* %divisor, align 8, !dbg !12079
  %mul = mul i64 %0, %1, !dbg !12080
  store i64 %mul, i64* %square, align 8, !dbg !12077
  br label %while.cond, !dbg !12081

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %square, align 8, !dbg !12082
  %3 = load i64, i64* %candidate.addr, align 8, !dbg !12083
  %cmp = icmp ult i64 %2, %3, !dbg !12084
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12085

land.rhs:                                         ; preds = %while.cond
  %4 = load i64, i64* %candidate.addr, align 8, !dbg !12086
  %5 = load i64, i64* %divisor, align 8, !dbg !12087
  %rem = urem i64 %4, %5, !dbg !12088
  %tobool = icmp ne i64 %rem, 0, !dbg !12085
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ], !dbg !12089
  br i1 %6, label %while.body, label %while.end, !dbg !12081

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %divisor, align 8, !dbg !12090
  %inc = add i64 %7, 1, !dbg !12090
  store i64 %inc, i64* %divisor, align 8, !dbg !12090
  %8 = load i64, i64* %divisor, align 8, !dbg !12092
  %mul1 = mul i64 4, %8, !dbg !12093
  %9 = load i64, i64* %square, align 8, !dbg !12094
  %add = add i64 %9, %mul1, !dbg !12094
  store i64 %add, i64* %square, align 8, !dbg !12094
  %10 = load i64, i64* %divisor, align 8, !dbg !12095
  %inc2 = add i64 %10, 1, !dbg !12095
  store i64 %inc2, i64* %divisor, align 8, !dbg !12095
  br label %while.cond, !dbg !12081, !llvm.loop !12096

while.end:                                        ; preds = %land.end
  %11 = load i64, i64* %candidate.addr, align 8, !dbg !12098
  %12 = load i64, i64* %divisor, align 8, !dbg !12099
  %rem3 = urem i64 %11, %12, !dbg !12100
  %tobool4 = icmp ne i64 %rem3, 0, !dbg !12098
  %13 = zext i1 %tobool4 to i64, !dbg !12098
  %cond = select i1 %tobool4, i32 1, i32 0, !dbg !12098
  %tobool5 = icmp ne i32 %cond, 0, !dbg !12101
  ret i1 %tobool5, !dbg !12102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_clear(%struct.hash_table* %table) #4 !dbg !12103 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !944
  %next = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12106, metadata !DIExpression()), !dbg !12107
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12108, metadata !DIExpression()), !dbg !12109
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12110
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !12112, !ctir !939
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !12112, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !12113
  br label %for.cond, !dbg !12114

for.cond:                                         ; preds = %for.inc23, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12115
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12117
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !12118, !ctir !939
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12118, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !12119
  br i1 %cmp, label %for.body, label %for.end24, !dbg !12120

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12121
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12124, !ctir !945
  %6 = load i8*, i8** %data, align 8, !dbg !12124, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !12121
  br i1 %tobool, label %if.then, label %if.end22, !dbg !12125

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12126, metadata !DIExpression()), !dbg !12128
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12129, metadata !DIExpression()), !dbg !12130
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12131
  %next2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 1, !dbg !12133, !ctir !945
  %8 = load %struct.hash_entry*, %struct.hash_entry** %next2, align 8, !dbg !12133, !ctir !944
  store %struct.hash_entry* %8, %struct.hash_entry** %cursor, align 8, !dbg !12134
  br label %for.cond3, !dbg !12135

for.cond3:                                        ; preds = %for.inc, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12136
  %tobool4 = icmp ne %struct.hash_entry* %9, null, !dbg !12138
  br i1 %tobool4, label %for.body5, label %for.end, !dbg !12138

for.body5:                                        ; preds = %for.cond3
  %10 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12139
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 8, !dbg !12142, !ctir !939
  %11 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12142, !ctir !978
  %tobool6 = icmp ne void (i8*)* %11, null, !dbg !12139
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !12143

if.then7:                                         ; preds = %for.body5
  %12 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12144
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %12, i32 0, i32 8, !dbg !12145, !ctir !939
  %13 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !dbg !12145, !ctir !978
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12146
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !12147, !ctir !945
  %15 = load i8*, i8** %data9, align 8, !dbg !12147, !ctir !47
  call void %13(i8* %15), !dbg !12144
  br label %if.end, !dbg !12144

if.end:                                           ; preds = %if.then7, %for.body5
  %16 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12148
  %data10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 0, !dbg !12149, !ctir !945
  store i8* null, i8** %data10, align 8, !dbg !12150, !ctir !47
  %17 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12151
  %next11 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12152, !ctir !945
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next11, align 8, !dbg !12152, !ctir !944
  store %struct.hash_entry* %18, %struct.hash_entry** %next, align 8, !dbg !12153
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12154
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 9, !dbg !12155, !ctir !939
  %20 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12155, !ctir !944
  %21 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12156
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %21, i32 0, i32 1, !dbg !12157, !ctir !945
  store %struct.hash_entry* %20, %struct.hash_entry** %next12, align 8, !dbg !12158, !ctir !944
  %22 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12159
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12160
  %free_entry_list13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 9, !dbg !12161, !ctir !939
  store %struct.hash_entry* %22, %struct.hash_entry** %free_entry_list13, align 8, !dbg !12162, !ctir !944
  br label %for.inc, !dbg !12163

for.inc:                                          ; preds = %if.end
  %24 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12164
  store %struct.hash_entry* %24, %struct.hash_entry** %cursor, align 8, !dbg !12165
  br label %for.cond3, !dbg !12166, !llvm.loop !12167

for.end:                                          ; preds = %for.cond3
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12169
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 8, !dbg !12171, !ctir !939
  %26 = load void (i8*)*, void (i8*)** %data_freer14, align 8, !dbg !12171, !ctir !978
  %tobool15 = icmp ne void (i8*)* %26, null, !dbg !12169
  br i1 %tobool15, label %if.then16, label %if.end19, !dbg !12172

if.then16:                                        ; preds = %for.end
  %27 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12173
  %data_freer17 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %27, i32 0, i32 8, !dbg !12174, !ctir !939
  %28 = load void (i8*)*, void (i8*)** %data_freer17, align 8, !dbg !12174, !ctir !978
  %29 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12175
  %data18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %29, i32 0, i32 0, !dbg !12176, !ctir !945
  %30 = load i8*, i8** %data18, align 8, !dbg !12176, !ctir !47
  call void %28(i8* %30), !dbg !12173
  br label %if.end19, !dbg !12173

if.end19:                                         ; preds = %if.then16, %for.end
  %31 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12177
  %data20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %31, i32 0, i32 0, !dbg !12178, !ctir !945
  store i8* null, i8** %data20, align 8, !dbg !12179, !ctir !47
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12180
  %next21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 1, !dbg !12181, !ctir !945
  store %struct.hash_entry* null, %struct.hash_entry** %next21, align 8, !dbg !12182, !ctir !944
  br label %if.end22, !dbg !12183

if.end22:                                         ; preds = %if.end19, %for.body
  br label %for.inc23, !dbg !12184

for.inc23:                                        ; preds = %if.end22
  %33 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12185
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 1, !dbg !12185, !ctir !945
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12185
  br label %for.cond, !dbg !12186, !llvm.loop !12187

for.end24:                                        ; preds = %for.cond
  %34 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12189
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 3, !dbg !12190, !ctir !939
  store i64 0, i64* %n_buckets_used, align 8, !dbg !12191, !ctir !52
  %35 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12192
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %35, i32 0, i32 4, !dbg !12193, !ctir !939
  store i64 0, i64* %n_entries, align 8, !dbg !12194, !ctir !52
  ret void, !dbg !12195
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @hash_free(%struct.hash_table* %table) #4 !dbg !12196 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !944
  %next = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12197, metadata !DIExpression()), !dbg !12198
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12199, metadata !DIExpression()), !dbg !12200
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12201, metadata !DIExpression()), !dbg !12202
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12203, metadata !DIExpression()), !dbg !12204
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12205
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 8, !dbg !12207, !ctir !939
  %1 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12207, !ctir !978
  %tobool = icmp ne void (i8*)* %1, null, !dbg !12205
  br i1 %tobool, label %land.lhs.true, label %if.end13, !dbg !12208

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12209
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 4, !dbg !12210, !ctir !939
  %3 = load i64, i64* %n_entries, align 8, !dbg !12210, !ctir !52
  %tobool1 = icmp ne i64 %3, 0, !dbg !12209
  br i1 %tobool1, label %if.then, label %if.end13, !dbg !12211

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12212
  %bucket2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 0, !dbg !12215, !ctir !939
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket2, align 8, !dbg !12215, !ctir !944
  store %struct.hash_entry* %5, %struct.hash_entry** %bucket, align 8, !dbg !12216
  br label %for.cond, !dbg !12217

for.cond:                                         ; preds = %for.inc11, %if.then
  %6 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12218
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12220
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 1, !dbg !12221, !ctir !939
  %8 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12221, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %6, %8, !dbg !12222
  br i1 %cmp, label %for.body, label %for.end12, !dbg !12223

for.body:                                         ; preds = %for.cond
  %9 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12224
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %9, i32 0, i32 0, !dbg !12227, !ctir !945
  %10 = load i8*, i8** %data, align 8, !dbg !12227, !ctir !47
  %tobool3 = icmp ne i8* %10, null, !dbg !12224
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !12228

if.then4:                                         ; preds = %for.body
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12229
  store %struct.hash_entry* %11, %struct.hash_entry** %cursor, align 8, !dbg !12232
  br label %for.cond5, !dbg !12233

for.cond5:                                        ; preds = %for.inc, %if.then4
  %12 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12234
  %tobool6 = icmp ne %struct.hash_entry* %12, null, !dbg !12236
  br i1 %tobool6, label %for.body7, label %for.end, !dbg !12236

for.body7:                                        ; preds = %for.cond5
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12237
  %data_freer8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 8, !dbg !12238, !ctir !939
  %14 = load void (i8*)*, void (i8*)** %data_freer8, align 8, !dbg !12238, !ctir !978
  %15 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12239
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i32 0, i32 0, !dbg !12240, !ctir !945
  %16 = load i8*, i8** %data9, align 8, !dbg !12240, !ctir !47
  call void %14(i8* %16), !dbg !12237
  br label %for.inc, !dbg !12237

for.inc:                                          ; preds = %for.body7
  %17 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12241
  %next10 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12242, !ctir !945
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next10, align 8, !dbg !12242, !ctir !944
  store %struct.hash_entry* %18, %struct.hash_entry** %cursor, align 8, !dbg !12243
  br label %for.cond5, !dbg !12244, !llvm.loop !12245

for.end:                                          ; preds = %for.cond5
  br label %if.end, !dbg !12247

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc11, !dbg !12248

for.inc11:                                        ; preds = %if.end
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12249
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 1, !dbg !12249, !ctir !945
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12249
  br label %for.cond, !dbg !12250, !llvm.loop !12251

for.end12:                                        ; preds = %for.cond
  br label %if.end13, !dbg !12253

if.end13:                                         ; preds = %for.end12, %land.lhs.true, %entry
  %20 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12254
  %bucket14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 0, !dbg !12256, !ctir !939
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket14, align 8, !dbg !12256, !ctir !944
  store %struct.hash_entry* %21, %struct.hash_entry** %bucket, align 8, !dbg !12257
  br label %for.cond15, !dbg !12258

for.cond15:                                       ; preds = %for.inc26, %if.end13
  %22 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12259
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12261
  %bucket_limit16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 1, !dbg !12262, !ctir !939
  %24 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit16, align 8, !dbg !12262, !ctir !950
  %cmp17 = icmp ult %struct.hash_entry* %22, %24, !dbg !12263
  br i1 %cmp17, label %for.body18, label %for.end28, !dbg !12264

for.body18:                                       ; preds = %for.cond15
  %25 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12265
  %next19 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i32 0, i32 1, !dbg !12268, !ctir !945
  %26 = load %struct.hash_entry*, %struct.hash_entry** %next19, align 8, !dbg !12268, !ctir !944
  store %struct.hash_entry* %26, %struct.hash_entry** %cursor, align 8, !dbg !12269
  br label %for.cond20, !dbg !12270

for.cond20:                                       ; preds = %for.inc24, %for.body18
  %27 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12271
  %tobool21 = icmp ne %struct.hash_entry* %27, null, !dbg !12273
  br i1 %tobool21, label %for.body22, label %for.end25, !dbg !12273

for.body22:                                       ; preds = %for.cond20
  %28 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12274
  %next23 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %28, i32 0, i32 1, !dbg !12276, !ctir !945
  %29 = load %struct.hash_entry*, %struct.hash_entry** %next23, align 8, !dbg !12276, !ctir !944
  store %struct.hash_entry* %29, %struct.hash_entry** %next, align 8, !dbg !12277
  %30 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12278
  %31 = bitcast %struct.hash_entry* %30 to i8*, !dbg !12278
  call void @free(i8* %31) #12, !dbg !12279
  br label %for.inc24, !dbg !12280

for.inc24:                                        ; preds = %for.body22
  %32 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12281
  store %struct.hash_entry* %32, %struct.hash_entry** %cursor, align 8, !dbg !12282
  br label %for.cond20, !dbg !12283, !llvm.loop !12284

for.end25:                                        ; preds = %for.cond20
  br label %for.inc26, !dbg !12286

for.inc26:                                        ; preds = %for.end25
  %33 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12287
  %incdec.ptr27 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 1, !dbg !12287, !ctir !945
  store %struct.hash_entry* %incdec.ptr27, %struct.hash_entry** %bucket, align 8, !dbg !12287
  br label %for.cond15, !dbg !12288, !llvm.loop !12289

for.end28:                                        ; preds = %for.cond15
  %34 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12291
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 9, !dbg !12293, !ctir !939
  %35 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12293, !ctir !944
  store %struct.hash_entry* %35, %struct.hash_entry** %cursor, align 8, !dbg !12294
  br label %for.cond29, !dbg !12295

for.cond29:                                       ; preds = %for.inc33, %for.end28
  %36 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12296
  %tobool30 = icmp ne %struct.hash_entry* %36, null, !dbg !12298
  br i1 %tobool30, label %for.body31, label %for.end34, !dbg !12298

for.body31:                                       ; preds = %for.cond29
  %37 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12299
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %37, i32 0, i32 1, !dbg !12301, !ctir !945
  %38 = load %struct.hash_entry*, %struct.hash_entry** %next32, align 8, !dbg !12301, !ctir !944
  store %struct.hash_entry* %38, %struct.hash_entry** %next, align 8, !dbg !12302
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12303
  %40 = bitcast %struct.hash_entry* %39 to i8*, !dbg !12303
  call void @free(i8* %40) #12, !dbg !12304
  br label %for.inc33, !dbg !12305

for.inc33:                                        ; preds = %for.body31
  %41 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12306
  store %struct.hash_entry* %41, %struct.hash_entry** %cursor, align 8, !dbg !12307
  br label %for.cond29, !dbg !12308, !llvm.loop !12309

for.end34:                                        ; preds = %for.cond29
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12311
  %bucket35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %42, i32 0, i32 0, !dbg !12312, !ctir !939
  %43 = load %struct.hash_entry*, %struct.hash_entry** %bucket35, align 8, !dbg !12312, !ctir !944
  %44 = bitcast %struct.hash_entry* %43 to i8*, !dbg !12311
  call void @free(i8* %44) #12, !dbg !12313
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12314
  %46 = bitcast %struct.hash_table* %45 to i8*, !dbg !12314
  call void @free(i8* %46) #12, !dbg !12315
  ret void, !dbg !12316
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hash_rehash(%struct.hash_table* %table, i64 %candidate) #4 !dbg !12317 {
entry:
  %retval = alloca i1, align 1
  %table.addr = alloca %struct.hash_table*, align 8
  %candidate.addr = alloca i64, align 8
  %storage = alloca %struct.hash_table, align 8, !ctir !939
  %new_table = alloca %struct.hash_table*, align 8, !ctir !984
  %new_size = alloca i64, align 8, !ctir !52
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12320, metadata !DIExpression()), !dbg !12321
  store i64 %candidate, i64* %candidate.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %candidate.addr, metadata !12322, metadata !DIExpression()), !dbg !12323
  call void @llvm.dbg.declare(metadata %struct.hash_table* %storage, metadata !12324, metadata !DIExpression()), !dbg !12325
  call void @llvm.dbg.declare(metadata %struct.hash_table** %new_table, metadata !12326, metadata !DIExpression()), !dbg !12327
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !12328, metadata !DIExpression()), !dbg !12329
  %0 = load i64, i64* %candidate.addr, align 8, !dbg !12330
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12331
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 5, !dbg !12332, !ctir !939
  %2 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12332, !ctir !956
  %call = call i64 @compute_bucket_size(i64 %0, %struct.hash_tuning* %2) #14, !dbg !12333
  store i64 %call, i64* %new_size, align 8, !dbg !12329
  %3 = load i64, i64* %new_size, align 8, !dbg !12334
  %tobool = icmp ne i64 %3, 0, !dbg !12334
  br i1 %tobool, label %if.end, label %if.then, !dbg !12336

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !12337
  br label %return, !dbg !12337

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %new_size, align 8, !dbg !12338
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12340
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 2, !dbg !12341, !ctir !939
  %6 = load i64, i64* %n_buckets, align 8, !dbg !12341, !ctir !52
  %cmp = icmp eq i64 %4, %6, !dbg !12342
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !12343

if.then1:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !12344
  br label %return, !dbg !12344

if.end2:                                          ; preds = %if.end
  store %struct.hash_table* %storage, %struct.hash_table** %new_table, align 8, !dbg !12345
  %7 = load i64, i64* %new_size, align 8, !dbg !12346
  %call3 = call noalias i8* @calloc(i64 %7, i64 16) #12, !dbg !12347
  %8 = bitcast i8* %call3 to %struct.hash_entry*, !dbg !12347
  %9 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12348
  %bucket = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 0, !dbg !12349, !ctir !939
  store %struct.hash_entry* %8, %struct.hash_entry** %bucket, align 8, !dbg !12350, !ctir !944
  %10 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12351
  %bucket4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 0, !dbg !12353, !ctir !939
  %11 = load %struct.hash_entry*, %struct.hash_entry** %bucket4, align 8, !dbg !12353, !ctir !944
  %cmp5 = icmp eq %struct.hash_entry* %11, null, !dbg !12354
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !12355

if.then6:                                         ; preds = %if.end2
  store i1 false, i1* %retval, align 1, !dbg !12356
  br label %return, !dbg !12356

if.end7:                                          ; preds = %if.end2
  %12 = load i64, i64* %new_size, align 8, !dbg !12357
  %13 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12358
  %n_buckets8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 2, !dbg !12359, !ctir !939
  store i64 %12, i64* %n_buckets8, align 8, !dbg !12360, !ctir !52
  %14 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12361
  %bucket9 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 0, !dbg !12362, !ctir !939
  %15 = load %struct.hash_entry*, %struct.hash_entry** %bucket9, align 8, !dbg !12362, !ctir !944
  %16 = load i64, i64* %new_size, align 8, !dbg !12363
  %add.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %15, i64 %16, !dbg !12364, !ctir !945
  %17 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12365
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 1, !dbg !12366, !ctir !939
  store %struct.hash_entry* %add.ptr, %struct.hash_entry** %bucket_limit, align 8, !dbg !12367, !ctir !950
  %18 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12368
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %18, i32 0, i32 3, !dbg !12369, !ctir !939
  store i64 0, i64* %n_buckets_used, align 8, !dbg !12370, !ctir !52
  %19 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12371
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 4, !dbg !12372, !ctir !939
  store i64 0, i64* %n_entries, align 8, !dbg !12373, !ctir !52
  %20 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12374
  %tuning10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 5, !dbg !12375, !ctir !939
  %21 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning10, align 8, !dbg !12375, !ctir !956
  %22 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12376
  %tuning11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 5, !dbg !12377, !ctir !939
  store %struct.hash_tuning* %21, %struct.hash_tuning** %tuning11, align 8, !dbg !12378, !ctir !956
  %23 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12379
  %hasher = getelementptr inbounds %struct.hash_table, %struct.hash_table* %23, i32 0, i32 6, !dbg !12380, !ctir !939
  %24 = load i64 (i8*, i64)*, i64 (i8*, i64)** %hasher, align 8, !dbg !12380, !ctir !968
  %25 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12381
  %hasher12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 6, !dbg !12382, !ctir !939
  store i64 (i8*, i64)* %24, i64 (i8*, i64)** %hasher12, align 8, !dbg !12383, !ctir !968
  %26 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12384
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %26, i32 0, i32 7, !dbg !12385, !ctir !939
  %27 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !12385, !ctir !973
  %28 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12386
  %comparator13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 7, !dbg !12387, !ctir !939
  store i1 (i8*, i8*)* %27, i1 (i8*, i8*)** %comparator13, align 8, !dbg !12388, !ctir !973
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12389
  %data_freer = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 8, !dbg !12390, !ctir !939
  %30 = load void (i8*)*, void (i8*)** %data_freer, align 8, !dbg !12390, !ctir !978
  %31 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12391
  %data_freer14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %31, i32 0, i32 8, !dbg !12392, !ctir !939
  store void (i8*)* %30, void (i8*)** %data_freer14, align 8, !dbg !12393, !ctir !978
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12394
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 9, !dbg !12395, !ctir !939
  %33 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12395, !ctir !944
  %34 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12396
  %free_entry_list15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 9, !dbg !12397, !ctir !939
  store %struct.hash_entry* %33, %struct.hash_entry** %free_entry_list15, align 8, !dbg !12398, !ctir !944
  %35 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12399
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12401
  %call16 = call zeroext i1 @transfer_entries(%struct.hash_table* %35, %struct.hash_table* %36, i1 zeroext false), !dbg !12402
  br i1 %call16, label %if.then17, label %if.end29, !dbg !12403

if.then17:                                        ; preds = %if.end7
  %37 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12404
  %bucket18 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %37, i32 0, i32 0, !dbg !12406, !ctir !939
  %38 = load %struct.hash_entry*, %struct.hash_entry** %bucket18, align 8, !dbg !12406, !ctir !944
  %39 = bitcast %struct.hash_entry* %38 to i8*, !dbg !12404
  call void @free(i8* %39) #12, !dbg !12407
  %40 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12408
  %bucket19 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 0, !dbg !12409, !ctir !939
  %41 = load %struct.hash_entry*, %struct.hash_entry** %bucket19, align 8, !dbg !12409, !ctir !944
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12410
  %bucket20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %42, i32 0, i32 0, !dbg !12411, !ctir !939
  store %struct.hash_entry* %41, %struct.hash_entry** %bucket20, align 8, !dbg !12412, !ctir !944
  %43 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12413
  %bucket_limit21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %43, i32 0, i32 1, !dbg !12414, !ctir !939
  %44 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit21, align 8, !dbg !12414, !ctir !950
  %45 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12415
  %bucket_limit22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %45, i32 0, i32 1, !dbg !12416, !ctir !939
  store %struct.hash_entry* %44, %struct.hash_entry** %bucket_limit22, align 8, !dbg !12417, !ctir !950
  %46 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12418
  %n_buckets23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %46, i32 0, i32 2, !dbg !12419, !ctir !939
  %47 = load i64, i64* %n_buckets23, align 8, !dbg !12419, !ctir !52
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12420
  %n_buckets24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 2, !dbg !12421, !ctir !939
  store i64 %47, i64* %n_buckets24, align 8, !dbg !12422, !ctir !52
  %49 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12423
  %n_buckets_used25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 3, !dbg !12424, !ctir !939
  %50 = load i64, i64* %n_buckets_used25, align 8, !dbg !12424, !ctir !52
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12425
  %n_buckets_used26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 3, !dbg !12426, !ctir !939
  store i64 %50, i64* %n_buckets_used26, align 8, !dbg !12427, !ctir !52
  %52 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12428
  %free_entry_list27 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %52, i32 0, i32 9, !dbg !12429, !ctir !939
  %53 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list27, align 8, !dbg !12429, !ctir !944
  %54 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12430
  %free_entry_list28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 9, !dbg !12431, !ctir !939
  store %struct.hash_entry* %53, %struct.hash_entry** %free_entry_list28, align 8, !dbg !12432, !ctir !944
  store i1 true, i1* %retval, align 1, !dbg !12433
  br label %return, !dbg !12433

if.end29:                                         ; preds = %if.end7
  %55 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12434
  %free_entry_list30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 9, !dbg !12435, !ctir !939
  %56 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list30, align 8, !dbg !12435, !ctir !944
  %57 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12436
  %free_entry_list31 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %57, i32 0, i32 9, !dbg !12437, !ctir !939
  store %struct.hash_entry* %56, %struct.hash_entry** %free_entry_list31, align 8, !dbg !12438, !ctir !944
  %58 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12439
  %59 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12441
  %call32 = call zeroext i1 @transfer_entries(%struct.hash_table* %58, %struct.hash_table* %59, i1 zeroext true), !dbg !12442
  br i1 %call32, label %land.lhs.true, label %if.then34, !dbg !12443

land.lhs.true:                                    ; preds = %if.end29
  %60 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12444
  %61 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12445
  %call33 = call zeroext i1 @transfer_entries(%struct.hash_table* %60, %struct.hash_table* %61, i1 zeroext false), !dbg !12446
  br i1 %call33, label %if.end35, label %if.then34, !dbg !12447

if.then34:                                        ; preds = %land.lhs.true, %if.end29
  call void @abort() #13, !dbg !12448
  unreachable, !dbg !12448

if.end35:                                         ; preds = %land.lhs.true
  %62 = load %struct.hash_table*, %struct.hash_table** %new_table, align 8, !dbg !12449
  %bucket36 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %62, i32 0, i32 0, !dbg !12450, !ctir !939
  %63 = load %struct.hash_entry*, %struct.hash_entry** %bucket36, align 8, !dbg !12450, !ctir !944
  %64 = bitcast %struct.hash_entry* %63 to i8*, !dbg !12449
  call void @free(i8* %64) #12, !dbg !12451
  store i1 false, i1* %retval, align 1, !dbg !12452
  br label %return, !dbg !12452

return:                                           ; preds = %if.end35, %if.then17, %if.then6, %if.then1, %if.then
  %65 = load i1, i1* %retval, align 1, !dbg !12453
  ret i1 %65, !dbg !12453
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @transfer_entries(%struct.hash_table* %dst, %struct.hash_table* %src, i1 zeroext %safe) #4 !dbg !12454 {
entry:
  %retval = alloca i1, align 1
  %dst.addr = alloca %struct.hash_table*, align 8
  %src.addr = alloca %struct.hash_table*, align 8
  %safe.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !944
  %next = alloca %struct.hash_entry*, align 8, !ctir !944
  %data2 = alloca i8*, align 8, !ctir !47
  %new_bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %new_entry = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %dst, %struct.hash_table** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %dst.addr, metadata !12457, metadata !DIExpression()), !dbg !12458
  store %struct.hash_table* %src, %struct.hash_table** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %src.addr, metadata !12459, metadata !DIExpression()), !dbg !12460
  %frombool = zext i1 %safe to i8
  store i8 %frombool, i8* %safe.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %safe.addr, metadata !12461, metadata !DIExpression()), !dbg !12462
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12463, metadata !DIExpression()), !dbg !12464
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12465, metadata !DIExpression()), !dbg !12466
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !12467, metadata !DIExpression()), !dbg !12468
  %0 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12469
  %bucket1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 0, !dbg !12471, !ctir !939
  %1 = load %struct.hash_entry*, %struct.hash_entry** %bucket1, align 8, !dbg !12471, !ctir !944
  store %struct.hash_entry* %1, %struct.hash_entry** %bucket, align 8, !dbg !12472
  br label %for.cond, !dbg !12473

for.cond:                                         ; preds = %for.inc41, %entry
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12474
  %3 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12476
  %bucket_limit = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 1, !dbg !12477, !ctir !939
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket_limit, align 8, !dbg !12477, !ctir !950
  %cmp = icmp ult %struct.hash_entry* %2, %4, !dbg !12478
  br i1 %cmp, label %for.body, label %for.end42, !dbg !12479

for.body:                                         ; preds = %for.cond
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12480
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12482, !ctir !945
  %6 = load i8*, i8** %data, align 8, !dbg !12482, !ctir !47
  %tobool = icmp ne i8* %6, null, !dbg !12480
  br i1 %tobool, label %if.then, label %if.end40, !dbg !12483

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i8** %data2, metadata !12484, metadata !DIExpression()), !dbg !12486
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_bucket, metadata !12487, metadata !DIExpression()), !dbg !12488
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12489
  %next3 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 1, !dbg !12491, !ctir !945
  %8 = load %struct.hash_entry*, %struct.hash_entry** %next3, align 8, !dbg !12491, !ctir !944
  store %struct.hash_entry* %8, %struct.hash_entry** %cursor, align 8, !dbg !12492
  br label %for.cond4, !dbg !12493

for.cond4:                                        ; preds = %for.inc, %if.then
  %9 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12494
  %tobool5 = icmp ne %struct.hash_entry* %9, null, !dbg !12496
  br i1 %tobool5, label %for.body6, label %for.end, !dbg !12496

for.body6:                                        ; preds = %for.cond4
  %10 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12497
  %data7 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 0, !dbg !12499, !ctir !945
  %11 = load i8*, i8** %data7, align 8, !dbg !12499, !ctir !47
  store i8* %11, i8** %data2, align 8, !dbg !12500
  %12 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12501
  %13 = load i8*, i8** %data2, align 8, !dbg !12502
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %12, i8* %13), !dbg !12503
  store %struct.hash_entry* %call, %struct.hash_entry** %new_bucket, align 8, !dbg !12504
  %14 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12505
  %next8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 1, !dbg !12506, !ctir !945
  %15 = load %struct.hash_entry*, %struct.hash_entry** %next8, align 8, !dbg !12506, !ctir !944
  store %struct.hash_entry* %15, %struct.hash_entry** %next, align 8, !dbg !12507
  %16 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12508
  %data9 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %16, i32 0, i32 0, !dbg !12510, !ctir !945
  %17 = load i8*, i8** %data9, align 8, !dbg !12510, !ctir !47
  %tobool10 = icmp ne i8* %17, null, !dbg !12508
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !12511

if.then11:                                        ; preds = %for.body6
  %18 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12512
  %next12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %18, i32 0, i32 1, !dbg !12514, !ctir !945
  %19 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12514, !ctir !944
  %20 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12515
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %20, i32 0, i32 1, !dbg !12516, !ctir !945
  store %struct.hash_entry* %19, %struct.hash_entry** %next13, align 8, !dbg !12517, !ctir !944
  %21 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12518
  %22 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12519
  %next14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %22, i32 0, i32 1, !dbg !12520, !ctir !945
  store %struct.hash_entry* %21, %struct.hash_entry** %next14, align 8, !dbg !12521, !ctir !944
  br label %if.end, !dbg !12522

if.else:                                          ; preds = %for.body6
  %23 = load i8*, i8** %data2, align 8, !dbg !12523
  %24 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12525
  %data15 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %24, i32 0, i32 0, !dbg !12526, !ctir !945
  store i8* %23, i8** %data15, align 8, !dbg !12527, !ctir !47
  %25 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12528
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 3, !dbg !12529, !ctir !939
  %26 = load i64, i64* %n_buckets_used, align 8, !dbg !12530, !ctir !52
  %inc = add i64 %26, 1, !dbg !12530
  store i64 %inc, i64* %n_buckets_used, align 8, !dbg !12530, !ctir !52
  %27 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12531
  %28 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12532
  call void @free_entry(%struct.hash_table* %27, %struct.hash_entry* %28), !dbg !12533
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then11
  br label %for.inc, !dbg !12534

for.inc:                                          ; preds = %if.end
  %29 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12535
  store %struct.hash_entry* %29, %struct.hash_entry** %cursor, align 8, !dbg !12536
  br label %for.cond4, !dbg !12537, !llvm.loop !12538

for.end:                                          ; preds = %for.cond4
  %30 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12540
  %data16 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i32 0, i32 0, !dbg !12541, !ctir !945
  %31 = load i8*, i8** %data16, align 8, !dbg !12541, !ctir !47
  store i8* %31, i8** %data2, align 8, !dbg !12542
  %32 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12543
  %next17 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 1, !dbg !12544, !ctir !945
  store %struct.hash_entry* null, %struct.hash_entry** %next17, align 8, !dbg !12545, !ctir !944
  %33 = load i8, i8* %safe.addr, align 1, !dbg !12546
  %tobool18 = trunc i8 %33 to i1, !dbg !12546
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !12548

if.then19:                                        ; preds = %for.end
  br label %for.inc41, !dbg !12549

if.end20:                                         ; preds = %for.end
  %34 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12550
  %35 = load i8*, i8** %data2, align 8, !dbg !12551
  %call21 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %34, i8* %35), !dbg !12552
  store %struct.hash_entry* %call21, %struct.hash_entry** %new_bucket, align 8, !dbg !12553
  %36 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12554
  %data22 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %36, i32 0, i32 0, !dbg !12556, !ctir !945
  %37 = load i8*, i8** %data22, align 8, !dbg !12556, !ctir !47
  %tobool23 = icmp ne i8* %37, null, !dbg !12554
  br i1 %tobool23, label %if.then24, label %if.else33, !dbg !12557

if.then24:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_entry, metadata !12558, metadata !DIExpression()), !dbg !12560
  %38 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12561
  %call25 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %38), !dbg !12562
  store %struct.hash_entry* %call25, %struct.hash_entry** %new_entry, align 8, !dbg !12560
  %39 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12563
  %cmp26 = icmp eq %struct.hash_entry* %39, null, !dbg !12565
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !12566

if.then27:                                        ; preds = %if.then24
  store i1 false, i1* %retval, align 1, !dbg !12567
  br label %return, !dbg !12567

if.end28:                                         ; preds = %if.then24
  %40 = load i8*, i8** %data2, align 8, !dbg !12568
  %41 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12569
  %data29 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i32 0, i32 0, !dbg !12570, !ctir !945
  store i8* %40, i8** %data29, align 8, !dbg !12571, !ctir !47
  %42 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12572
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i32 0, i32 1, !dbg !12573, !ctir !945
  %43 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !dbg !12573, !ctir !944
  %44 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12574
  %next31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %44, i32 0, i32 1, !dbg !12575, !ctir !945
  store %struct.hash_entry* %43, %struct.hash_entry** %next31, align 8, !dbg !12576, !ctir !944
  %45 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12577
  %46 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12578
  %next32 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12579, !ctir !945
  store %struct.hash_entry* %45, %struct.hash_entry** %next32, align 8, !dbg !12580, !ctir !944
  br label %if.end37, !dbg !12581

if.else33:                                        ; preds = %if.end20
  %47 = load i8*, i8** %data2, align 8, !dbg !12582
  %48 = load %struct.hash_entry*, %struct.hash_entry** %new_bucket, align 8, !dbg !12584
  %data34 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 0, !dbg !12585, !ctir !945
  store i8* %47, i8** %data34, align 8, !dbg !12586, !ctir !47
  %49 = load %struct.hash_table*, %struct.hash_table** %dst.addr, align 8, !dbg !12587
  %n_buckets_used35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 3, !dbg !12588, !ctir !939
  %50 = load i64, i64* %n_buckets_used35, align 8, !dbg !12589, !ctir !52
  %inc36 = add i64 %50, 1, !dbg !12589
  store i64 %inc36, i64* %n_buckets_used35, align 8, !dbg !12589, !ctir !52
  br label %if.end37

if.end37:                                         ; preds = %if.else33, %if.end28
  %51 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12590
  %data38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %51, i32 0, i32 0, !dbg !12591, !ctir !945
  store i8* null, i8** %data38, align 8, !dbg !12592, !ctir !47
  %52 = load %struct.hash_table*, %struct.hash_table** %src.addr, align 8, !dbg !12593
  %n_buckets_used39 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %52, i32 0, i32 3, !dbg !12594, !ctir !939
  %53 = load i64, i64* %n_buckets_used39, align 8, !dbg !12595, !ctir !52
  %dec = add i64 %53, -1, !dbg !12595
  store i64 %dec, i64* %n_buckets_used39, align 8, !dbg !12595, !ctir !52
  br label %if.end40, !dbg !12596

if.end40:                                         ; preds = %if.end37, %for.body
  br label %for.inc41, !dbg !12482

for.inc41:                                        ; preds = %if.end40, %if.then19
  %54 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12597
  %incdec.ptr = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 1, !dbg !12597, !ctir !945
  store %struct.hash_entry* %incdec.ptr, %struct.hash_entry** %bucket, align 8, !dbg !12597
  br label %for.cond, !dbg !12598, !llvm.loop !12599

for.end42:                                        ; preds = %for.cond
  store i1 true, i1* %retval, align 1, !dbg !12601
  br label %return, !dbg !12601

return:                                           ; preds = %for.end42, %if.then27
  %55 = load i1, i1* %retval, align 1, !dbg !12602
  ret i1 %55, !dbg !12602
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_entry(%struct.hash_table* %table, %struct.hash_entry* %entry1) #4 !dbg !12603 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12606, metadata !DIExpression()), !dbg !12607
  store %struct.hash_entry* %entry1, %struct.hash_entry** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %entry.addr, metadata !12608, metadata !DIExpression()), !dbg !12609
  %0 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12610
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %0, i32 0, i32 0, !dbg !12611, !ctir !945
  store i8* null, i8** %data, align 8, !dbg !12612, !ctir !47
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12613
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %1, i32 0, i32 9, !dbg !12614, !ctir !939
  %2 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12614, !ctir !944
  %3 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12615
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %3, i32 0, i32 1, !dbg !12616, !ctir !945
  store %struct.hash_entry* %2, %struct.hash_entry** %next, align 8, !dbg !12617, !ctir !944
  %4 = load %struct.hash_entry*, %struct.hash_entry** %entry.addr, align 8, !dbg !12618
  %5 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12619
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %5, i32 0, i32 9, !dbg !12620, !ctir !939
  store %struct.hash_entry* %4, %struct.hash_entry** %free_entry_list2, align 8, !dbg !12621, !ctir !944
  ret void, !dbg !12622
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @allocate_entry(%struct.hash_table* %table) #4 !dbg !12623 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %new = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12626, metadata !DIExpression()), !dbg !12627
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new, metadata !12628, metadata !DIExpression()), !dbg !12629
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12630
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %0, i32 0, i32 9, !dbg !12632, !ctir !939
  %1 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !12632, !ctir !944
  %tobool = icmp ne %struct.hash_entry* %1, null, !dbg !12630
  br i1 %tobool, label %if.then, label %if.else, !dbg !12633

if.then:                                          ; preds = %entry
  %2 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12634
  %free_entry_list1 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %2, i32 0, i32 9, !dbg !12636, !ctir !939
  %3 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list1, align 8, !dbg !12636, !ctir !944
  store %struct.hash_entry* %3, %struct.hash_entry** %new, align 8, !dbg !12637
  %4 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !dbg !12638
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %4, i32 0, i32 1, !dbg !12639, !ctir !945
  %5 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12639, !ctir !944
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12640
  %free_entry_list2 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 9, !dbg !12641, !ctir !939
  store %struct.hash_entry* %5, %struct.hash_entry** %free_entry_list2, align 8, !dbg !12642, !ctir !944
  br label %if.end, !dbg !12643

if.else:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i64 16) #12, !dbg !12644
  %7 = bitcast i8* %call to %struct.hash_entry*, !dbg !12644
  store %struct.hash_entry* %7, %struct.hash_entry** %new, align 8, !dbg !12646
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.hash_entry*, %struct.hash_entry** %new, align 8, !dbg !12647
  ret %struct.hash_entry* %8, !dbg !12648
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @hash_insert_if_absent(%struct.hash_table* %table, i8* %entry1, i8** %matched_ent) #4 !dbg !12649 {
entry:
  %retval = alloca i32, align 4
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent.addr = alloca i8**, align 8
  %data = alloca i8*, align 8, !ctir !47
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %tuning22 = alloca %struct.hash_tuning*, align 8, !ctir !956
  %candidate = alloca float, align 4, !ctir !962
  %new_entry = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12652, metadata !DIExpression()), !dbg !12653
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12654, metadata !DIExpression()), !dbg !12655
  store i8** %matched_ent, i8*** %matched_ent.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %matched_ent.addr, metadata !12656, metadata !DIExpression()), !dbg !12657
  call void @llvm.dbg.declare(metadata i8** %data, metadata !12658, metadata !DIExpression()), !dbg !12659
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12660, metadata !DIExpression()), !dbg !12661
  %0 = load i8*, i8** %entry.addr, align 8, !dbg !12662
  %tobool = icmp ne i8* %0, null, !dbg !12662
  br i1 %tobool, label %if.end, label %if.then, !dbg !12664

if.then:                                          ; preds = %entry
  call void @abort() #13, !dbg !12665
  unreachable, !dbg !12665

if.end:                                           ; preds = %entry
  %1 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12666
  %2 = load i8*, i8** %entry.addr, align 8, !dbg !12668
  %call = call i8* @hash_find_entry(%struct.hash_table* %1, i8* %2, %struct.hash_entry** %bucket, i1 zeroext false), !dbg !12669
  store i8* %call, i8** %data, align 8, !dbg !12670
  %cmp = icmp ne i8* %call, null, !dbg !12671
  br i1 %cmp, label %if.then2, label %if.end6, !dbg !12672

if.then2:                                         ; preds = %if.end
  %3 = load i8**, i8*** %matched_ent.addr, align 8, !dbg !12673
  %tobool3 = icmp ne i8** %3, null, !dbg !12673
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !12676

if.then4:                                         ; preds = %if.then2
  %4 = load i8*, i8** %data, align 8, !dbg !12677
  %5 = load i8**, i8*** %matched_ent.addr, align 8, !dbg !12678
  store i8* %4, i8** %5, align 8, !dbg !12679, !ctir !85
  br label %if.end5, !dbg !12680

if.end5:                                          ; preds = %if.then4, %if.then2
  store i32 0, i32* %retval, align 4, !dbg !12681
  br label %return, !dbg !12681

if.end6:                                          ; preds = %if.end
  %6 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12682
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 3, !dbg !12684, !ctir !939
  %7 = load i64, i64* %n_buckets_used, align 8, !dbg !12684, !ctir !52
  %conv = uitofp i64 %7 to float, !dbg !12682
  %8 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12685
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %8, i32 0, i32 5, !dbg !12686, !ctir !939
  %9 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12686, !ctir !956
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %9, i32 0, i32 2, !dbg !12687, !ctir !957
  %10 = load float, float* %growth_threshold, align 4, !dbg !12687, !ctir !962
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12688
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 2, !dbg !12689, !ctir !939
  %12 = load i64, i64* %n_buckets, align 8, !dbg !12689, !ctir !52
  %conv7 = uitofp i64 %12 to float, !dbg !12688
  %mul = fmul float %10, %conv7, !dbg !12690
  %cmp8 = fcmp ogt float %conv, %mul, !dbg !12691
  br i1 %cmp8, label %if.then10, label %if.end49, !dbg !12692

if.then10:                                        ; preds = %if.end6
  %13 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12693
  %call11 = call zeroext i1 @check_tuning(%struct.hash_table* %13), !dbg !12695
  %14 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12696
  %n_buckets_used12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 3, !dbg !12698, !ctir !939
  %15 = load i64, i64* %n_buckets_used12, align 8, !dbg !12698, !ctir !52
  %conv13 = uitofp i64 %15 to float, !dbg !12696
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12699
  %tuning14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 5, !dbg !12700, !ctir !939
  %17 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning14, align 8, !dbg !12700, !ctir !956
  %growth_threshold15 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %17, i32 0, i32 2, !dbg !12701, !ctir !957
  %18 = load float, float* %growth_threshold15, align 4, !dbg !12701, !ctir !962
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12702
  %n_buckets16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 2, !dbg !12703, !ctir !939
  %20 = load i64, i64* %n_buckets16, align 8, !dbg !12703, !ctir !52
  %conv17 = uitofp i64 %20 to float, !dbg !12702
  %mul18 = fmul float %18, %conv17, !dbg !12704
  %cmp19 = fcmp ogt float %conv13, %mul18, !dbg !12705
  br i1 %cmp19, label %if.then21, label %if.end48, !dbg !12706

if.then21:                                        ; preds = %if.then10
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning22, metadata !12707, metadata !DIExpression()), !dbg !12709
  %21 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12710
  %tuning23 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 5, !dbg !12711, !ctir !939
  %22 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning23, align 8, !dbg !12711, !ctir !956
  store %struct.hash_tuning* %22, %struct.hash_tuning** %tuning22, align 8, !dbg !12709
  call void @llvm.dbg.declare(metadata float* %candidate, metadata !12712, metadata !DIExpression()), !dbg !12713
  %23 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12714
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %23, i32 0, i32 4, !dbg !12715, !ctir !957
  %24 = load i8, i8* %is_n_buckets, align 4, !dbg !12715
  %tobool24 = trunc i8 %24 to i1, !dbg !12715, !ctir !162
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !12714

cond.true:                                        ; preds = %if.then21
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12716
  %n_buckets26 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %25, i32 0, i32 2, !dbg !12717, !ctir !939
  %26 = load i64, i64* %n_buckets26, align 8, !dbg !12717, !ctir !52
  %conv27 = uitofp i64 %26 to float, !dbg !12716
  %27 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12718
  %growth_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %27, i32 0, i32 3, !dbg !12719, !ctir !957
  %28 = load float, float* %growth_factor, align 4, !dbg !12719, !ctir !962
  %mul28 = fmul float %conv27, %28, !dbg !12720
  br label %cond.end, !dbg !12714

cond.false:                                       ; preds = %if.then21
  %29 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12721
  %n_buckets29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 2, !dbg !12722, !ctir !939
  %30 = load i64, i64* %n_buckets29, align 8, !dbg !12722, !ctir !52
  %conv30 = uitofp i64 %30 to float, !dbg !12721
  %31 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12723
  %growth_factor31 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %31, i32 0, i32 3, !dbg !12724, !ctir !957
  %32 = load float, float* %growth_factor31, align 4, !dbg !12724, !ctir !962
  %mul32 = fmul float %conv30, %32, !dbg !12725
  %33 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12726
  %growth_threshold33 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %33, i32 0, i32 2, !dbg !12727, !ctir !957
  %34 = load float, float* %growth_threshold33, align 4, !dbg !12727, !ctir !962
  %mul34 = fmul float %mul32, %34, !dbg !12728
  br label %cond.end, !dbg !12714

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul28, %cond.true ], [ %mul34, %cond.false ], !dbg !12714
  store float %cond, float* %candidate, align 4, !dbg !12713
  %35 = load float, float* %candidate, align 4, !dbg !12729
  %cmp35 = fcmp ole float 0x43F0000000000000, %35, !dbg !12731
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !12732

if.then37:                                        ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !12733
  br label %return, !dbg !12733

if.end38:                                         ; preds = %cond.end
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12734
  %37 = load float, float* %candidate, align 4, !dbg !12736
  %conv39 = fptoui float %37 to i64, !dbg !12736
  %call40 = call zeroext i1 @hash_rehash(%struct.hash_table* %36, i64 %conv39), !dbg !12737
  br i1 %call40, label %if.end42, label %if.then41, !dbg !12738

if.then41:                                        ; preds = %if.end38
  store i32 -1, i32* %retval, align 4, !dbg !12739
  br label %return, !dbg !12739

if.end42:                                         ; preds = %if.end38
  %38 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12740
  %39 = load i8*, i8** %entry.addr, align 8, !dbg !12742
  %call43 = call i8* @hash_find_entry(%struct.hash_table* %38, i8* %39, %struct.hash_entry** %bucket, i1 zeroext false), !dbg !12743
  %cmp44 = icmp ne i8* %call43, null, !dbg !12744
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !12745

if.then46:                                        ; preds = %if.end42
  call void @abort() #13, !dbg !12746
  unreachable, !dbg !12746

if.end47:                                         ; preds = %if.end42
  br label %if.end48, !dbg !12747

if.end48:                                         ; preds = %if.end47, %if.then10
  br label %if.end49, !dbg !12748

if.end49:                                         ; preds = %if.end48, %if.end6
  %40 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12749
  %data50 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 0, !dbg !12751, !ctir !945
  %41 = load i8*, i8** %data50, align 8, !dbg !12751, !ctir !47
  %tobool51 = icmp ne i8* %41, null, !dbg !12749
  br i1 %tobool51, label %if.then52, label %if.end61, !dbg !12752

if.then52:                                        ; preds = %if.end49
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %new_entry, metadata !12753, metadata !DIExpression()), !dbg !12755
  %42 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12756
  %call53 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %42), !dbg !12757
  store %struct.hash_entry* %call53, %struct.hash_entry** %new_entry, align 8, !dbg !12755
  %43 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12758
  %cmp54 = icmp eq %struct.hash_entry* %43, null, !dbg !12760
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !12761

if.then56:                                        ; preds = %if.then52
  store i32 -1, i32* %retval, align 4, !dbg !12762
  br label %return, !dbg !12762

if.end57:                                         ; preds = %if.then52
  %44 = load i8*, i8** %entry.addr, align 8, !dbg !12763
  %45 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12764
  %data58 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %45, i32 0, i32 0, !dbg !12765, !ctir !945
  store i8* %44, i8** %data58, align 8, !dbg !12766, !ctir !47
  %46 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12767
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12768, !ctir !945
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12768, !ctir !944
  %48 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12769
  %next59 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 1, !dbg !12770, !ctir !945
  store %struct.hash_entry* %47, %struct.hash_entry** %next59, align 8, !dbg !12771, !ctir !944
  %49 = load %struct.hash_entry*, %struct.hash_entry** %new_entry, align 8, !dbg !12772
  %50 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12773
  %next60 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 1, !dbg !12774, !ctir !945
  store %struct.hash_entry* %49, %struct.hash_entry** %next60, align 8, !dbg !12775, !ctir !944
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12776
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 4, !dbg !12777, !ctir !939
  %52 = load i64, i64* %n_entries, align 8, !dbg !12778, !ctir !52
  %inc = add i64 %52, 1, !dbg !12778
  store i64 %inc, i64* %n_entries, align 8, !dbg !12778, !ctir !52
  store i32 1, i32* %retval, align 4, !dbg !12779
  br label %return, !dbg !12779

if.end61:                                         ; preds = %if.end49
  %53 = load i8*, i8** %entry.addr, align 8, !dbg !12780
  %54 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12781
  %data62 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 0, !dbg !12782, !ctir !945
  store i8* %53, i8** %data62, align 8, !dbg !12783, !ctir !47
  %55 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12784
  %n_entries63 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 4, !dbg !12785, !ctir !939
  %56 = load i64, i64* %n_entries63, align 8, !dbg !12786, !ctir !52
  %inc64 = add i64 %56, 1, !dbg !12786
  store i64 %inc64, i64* %n_entries63, align 8, !dbg !12786, !ctir !52
  %57 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12787
  %n_buckets_used65 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %57, i32 0, i32 3, !dbg !12788, !ctir !939
  %58 = load i64, i64* %n_buckets_used65, align 8, !dbg !12789, !ctir !52
  %inc66 = add i64 %58, 1, !dbg !12789
  store i64 %inc66, i64* %n_buckets_used65, align 8, !dbg !12789, !ctir !52
  store i32 1, i32* %retval, align 4, !dbg !12790
  br label %return, !dbg !12790

return:                                           ; preds = %if.end61, %if.end57, %if.then56, %if.then41, %if.then37, %if.end5
  %59 = load i32, i32* %retval, align 4, !dbg !12791
  ret i32 %59, !dbg !12791
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_find_entry(%struct.hash_table* %table, i8* %entry1, %struct.hash_entry** %bucket_head, i1 zeroext %delete) #4 !dbg !12792 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %bucket_head.addr = alloca %struct.hash_entry**, align 8
  %delete.addr = alloca i8, align 1
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !944
  %data7 = alloca i8*, align 8, !ctir !47
  %next12 = alloca %struct.hash_entry*, align 8, !ctir !944
  %data29 = alloca i8*, align 8, !ctir !47
  %next34 = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12796, metadata !DIExpression()), !dbg !12797
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12798, metadata !DIExpression()), !dbg !12799
  store %struct.hash_entry** %bucket_head, %struct.hash_entry*** %bucket_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_entry*** %bucket_head.addr, metadata !12800, metadata !DIExpression()), !dbg !12801
  %frombool = zext i1 %delete to i8
  store i8 %frombool, i8* %delete.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %delete.addr, metadata !12802, metadata !DIExpression()), !dbg !12803
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12804, metadata !DIExpression()), !dbg !12805
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12806
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12807
  %call = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1), !dbg !12808
  store %struct.hash_entry* %call, %struct.hash_entry** %bucket, align 8, !dbg !12805
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !12809, metadata !DIExpression()), !dbg !12810
  %2 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12811
  %3 = load %struct.hash_entry**, %struct.hash_entry*** %bucket_head.addr, align 8, !dbg !12812
  store %struct.hash_entry* %2, %struct.hash_entry** %3, align 8, !dbg !12813, !ctir !944
  %4 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12814
  %data = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %4, i32 0, i32 0, !dbg !12816, !ctir !945
  %5 = load i8*, i8** %data, align 8, !dbg !12816, !ctir !47
  %cmp = icmp eq i8* %5, null, !dbg !12817
  br i1 %cmp, label %if.then, label %if.end, !dbg !12818

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !12819
  br label %return, !dbg !12819

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %entry.addr, align 8, !dbg !12820
  %7 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12822
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %7, i32 0, i32 0, !dbg !12823, !ctir !945
  %8 = load i8*, i8** %data2, align 8, !dbg !12823, !ctir !47
  %cmp3 = icmp eq i8* %6, %8, !dbg !12824
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !12825

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12826
  %comparator = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 7, !dbg !12827, !ctir !939
  %10 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator, align 8, !dbg !12827, !ctir !973
  %11 = load i8*, i8** %entry.addr, align 8, !dbg !12828
  %12 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12829
  %data4 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 0, !dbg !12830, !ctir !945
  %13 = load i8*, i8** %data4, align 8, !dbg !12830, !ctir !47
  %call5 = call zeroext i1 %10(i8* %11, i8* %13), !dbg !12826
  br i1 %call5, label %if.then6, label %if.end17, !dbg !12831

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata i8** %data7, metadata !12832, metadata !DIExpression()), !dbg !12834
  %14 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12835
  %data8 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %14, i32 0, i32 0, !dbg !12836, !ctir !945
  %15 = load i8*, i8** %data8, align 8, !dbg !12836, !ctir !47
  store i8* %15, i8** %data7, align 8, !dbg !12834
  %16 = load i8, i8* %delete.addr, align 1, !dbg !12837
  %tobool = trunc i8 %16 to i1, !dbg !12837
  br i1 %tobool, label %if.then9, label %if.end16, !dbg !12839

if.then9:                                         ; preds = %if.then6
  %17 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12840
  %next = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %17, i32 0, i32 1, !dbg !12843, !ctir !945
  %18 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !12843, !ctir !944
  %tobool10 = icmp ne %struct.hash_entry* %18, null, !dbg !12840
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !12844

if.then11:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next12, metadata !12845, metadata !DIExpression()), !dbg !12847
  %19 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12848
  %next13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %19, i32 0, i32 1, !dbg !12849, !ctir !945
  %20 = load %struct.hash_entry*, %struct.hash_entry** %next13, align 8, !dbg !12849, !ctir !944
  store %struct.hash_entry* %20, %struct.hash_entry** %next12, align 8, !dbg !12847
  %21 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12850
  %22 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12851
  %23 = bitcast %struct.hash_entry* %21 to i8*, !dbg !12852
  %24 = bitcast %struct.hash_entry* %22 to i8*, !dbg !12852
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !12852
  %25 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12853
  %26 = load %struct.hash_entry*, %struct.hash_entry** %next12, align 8, !dbg !12854
  call void @free_entry(%struct.hash_table* %25, %struct.hash_entry* %26), !dbg !12855
  br label %if.end15, !dbg !12856

if.else:                                          ; preds = %if.then9
  %27 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12857
  %data14 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %27, i32 0, i32 0, !dbg !12859, !ctir !945
  store i8* null, i8** %data14, align 8, !dbg !12860, !ctir !47
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then11
  br label %if.end16, !dbg !12861

if.end16:                                         ; preds = %if.end15, %if.then6
  %28 = load i8*, i8** %data7, align 8, !dbg !12862
  store i8* %28, i8** %retval, align 8, !dbg !12863
  br label %return, !dbg !12863

if.end17:                                         ; preds = %lor.lhs.false
  %29 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12864
  store %struct.hash_entry* %29, %struct.hash_entry** %cursor, align 8, !dbg !12866
  br label %for.cond, !dbg !12867

for.cond:                                         ; preds = %for.inc, %if.end17
  %30 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12868
  %next18 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i32 0, i32 1, !dbg !12870, !ctir !945
  %31 = load %struct.hash_entry*, %struct.hash_entry** %next18, align 8, !dbg !12870, !ctir !944
  %tobool19 = icmp ne %struct.hash_entry* %31, null, !dbg !12871
  br i1 %tobool19, label %for.body, label %for.end, !dbg !12871

for.body:                                         ; preds = %for.cond
  %32 = load i8*, i8** %entry.addr, align 8, !dbg !12872
  %33 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12875
  %next20 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %33, i32 0, i32 1, !dbg !12876, !ctir !945
  %34 = load %struct.hash_entry*, %struct.hash_entry** %next20, align 8, !dbg !12876, !ctir !944
  %data21 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %34, i32 0, i32 0, !dbg !12877, !ctir !945
  %35 = load i8*, i8** %data21, align 8, !dbg !12877, !ctir !47
  %cmp22 = icmp eq i8* %32, %35, !dbg !12878
  br i1 %cmp22, label %if.then28, label %lor.lhs.false23, !dbg !12879

lor.lhs.false23:                                  ; preds = %for.body
  %36 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12880
  %comparator24 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %36, i32 0, i32 7, !dbg !12881, !ctir !939
  %37 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %comparator24, align 8, !dbg !12881, !ctir !973
  %38 = load i8*, i8** %entry.addr, align 8, !dbg !12882
  %39 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12883
  %next25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i32 0, i32 1, !dbg !12884, !ctir !945
  %40 = load %struct.hash_entry*, %struct.hash_entry** %next25, align 8, !dbg !12884, !ctir !944
  %data26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %40, i32 0, i32 0, !dbg !12885, !ctir !945
  %41 = load i8*, i8** %data26, align 8, !dbg !12885, !ctir !47
  %call27 = call zeroext i1 %37(i8* %38, i8* %41), !dbg !12880
  br i1 %call27, label %if.then28, label %if.end39, !dbg !12886

if.then28:                                        ; preds = %lor.lhs.false23, %for.body
  call void @llvm.dbg.declare(metadata i8** %data29, metadata !12887, metadata !DIExpression()), !dbg !12889
  %42 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12890
  %next30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i32 0, i32 1, !dbg !12891, !ctir !945
  %43 = load %struct.hash_entry*, %struct.hash_entry** %next30, align 8, !dbg !12891, !ctir !944
  %data31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 0, !dbg !12892, !ctir !945
  %44 = load i8*, i8** %data31, align 8, !dbg !12892, !ctir !47
  store i8* %44, i8** %data29, align 8, !dbg !12889
  %45 = load i8, i8* %delete.addr, align 1, !dbg !12893
  %tobool32 = trunc i8 %45 to i1, !dbg !12893
  br i1 %tobool32, label %if.then33, label %if.end38, !dbg !12895

if.then33:                                        ; preds = %if.then28
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next34, metadata !12896, metadata !DIExpression()), !dbg !12898
  %46 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12899
  %next35 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 1, !dbg !12900, !ctir !945
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next35, align 8, !dbg !12900, !ctir !944
  store %struct.hash_entry* %47, %struct.hash_entry** %next34, align 8, !dbg !12898
  %48 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !dbg !12901
  %next36 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %48, i32 0, i32 1, !dbg !12902, !ctir !945
  %49 = load %struct.hash_entry*, %struct.hash_entry** %next36, align 8, !dbg !12902, !ctir !944
  %50 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12903
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %50, i32 0, i32 1, !dbg !12904, !ctir !945
  store %struct.hash_entry* %49, %struct.hash_entry** %next37, align 8, !dbg !12905, !ctir !944
  %51 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12906
  %52 = load %struct.hash_entry*, %struct.hash_entry** %next34, align 8, !dbg !12907
  call void @free_entry(%struct.hash_table* %51, %struct.hash_entry* %52), !dbg !12908
  br label %if.end38, !dbg !12909

if.end38:                                         ; preds = %if.then33, %if.then28
  %53 = load i8*, i8** %data29, align 8, !dbg !12910
  store i8* %53, i8** %retval, align 8, !dbg !12911
  br label %return, !dbg !12911

if.end39:                                         ; preds = %lor.lhs.false23
  br label %for.inc, !dbg !12912

for.inc:                                          ; preds = %if.end39
  %54 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !12913
  %next40 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 1, !dbg !12914, !ctir !945
  %55 = load %struct.hash_entry*, %struct.hash_entry** %next40, align 8, !dbg !12914, !ctir !944
  store %struct.hash_entry* %55, %struct.hash_entry** %cursor, align 8, !dbg !12915
  br label %for.cond, !dbg !12916, !llvm.loop !12917

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !12919
  br label %return, !dbg !12919

return:                                           ; preds = %for.end, %if.end38, %if.end16, %if.then
  %56 = load i8*, i8** %retval, align 8, !dbg !12920
  ret i8* %56, !dbg !12920
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_insert(%struct.hash_table* %table, i8* %entry1) #4 !dbg !12921 {
entry:
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %matched_ent = alloca i8*, align 8, !ctir !85
  %err = alloca i32, align 4, !ctir !5
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12924, metadata !DIExpression()), !dbg !12925
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12926, metadata !DIExpression()), !dbg !12927
  call void @llvm.dbg.declare(metadata i8** %matched_ent, metadata !12928, metadata !DIExpression()), !dbg !12929
  call void @llvm.dbg.declare(metadata i32* %err, metadata !12930, metadata !DIExpression()), !dbg !12931
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12932
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12933
  %call = call i32 @hash_insert_if_absent(%struct.hash_table* %0, i8* %1, i8** %matched_ent), !dbg !12934
  store i32 %call, i32* %err, align 4, !dbg !12931
  %2 = load i32, i32* %err, align 4, !dbg !12935
  %cmp = icmp eq i32 %2, -1, !dbg !12936
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12935

cond.true:                                        ; preds = %entry
  br label %cond.end5, !dbg !12935

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %err, align 4, !dbg !12937
  %cmp2 = icmp eq i32 %3, 0, !dbg !12938
  br i1 %cmp2, label %cond.true3, label %cond.false4, !dbg !12937

cond.true3:                                       ; preds = %cond.false
  %4 = load i8*, i8** %matched_ent, align 8, !dbg !12939
  br label %cond.end, !dbg !12937

cond.false4:                                      ; preds = %cond.false
  %5 = load i8*, i8** %entry.addr, align 8, !dbg !12940
  br label %cond.end, !dbg !12937

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i8* [ %4, %cond.true3 ], [ %5, %cond.false4 ], !dbg !12937
  br label %cond.end5, !dbg !12935

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i8* [ null, %cond.true ], [ %cond, %cond.end ], !dbg !12935
  ret i8* %cond6, !dbg !12941
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @hash_delete(%struct.hash_table* %table, i8* %entry1) #4 !dbg !12942 {
entry:
  %retval = alloca i8*, align 8
  %table.addr = alloca %struct.hash_table*, align 8
  %entry.addr = alloca i8*, align 8
  %data = alloca i8*, align 8, !ctir !47
  %bucket = alloca %struct.hash_entry*, align 8, !ctir !944
  %tuning21 = alloca %struct.hash_tuning*, align 8, !ctir !956
  %candidate = alloca i64, align 8, !ctir !52
  %cursor = alloca %struct.hash_entry*, align 8, !ctir !944
  %next = alloca %struct.hash_entry*, align 8, !ctir !944
  store %struct.hash_table* %table, %struct.hash_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hash_table** %table.addr, metadata !12943, metadata !DIExpression()), !dbg !12944
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !12945, metadata !DIExpression()), !dbg !12946
  call void @llvm.dbg.declare(metadata i8** %data, metadata !12947, metadata !DIExpression()), !dbg !12948
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %bucket, metadata !12949, metadata !DIExpression()), !dbg !12950
  %0 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12951
  %1 = load i8*, i8** %entry.addr, align 8, !dbg !12952
  %call = call i8* @hash_find_entry(%struct.hash_table* %0, i8* %1, %struct.hash_entry** %bucket, i1 zeroext true), !dbg !12953
  store i8* %call, i8** %data, align 8, !dbg !12954
  %2 = load i8*, i8** %data, align 8, !dbg !12955
  %tobool = icmp ne i8* %2, null, !dbg !12955
  br i1 %tobool, label %if.end, label %if.then, !dbg !12957

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !12958
  br label %return, !dbg !12958

if.end:                                           ; preds = %entry
  %3 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12959
  %n_entries = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 4, !dbg !12960, !ctir !939
  %4 = load i64, i64* %n_entries, align 8, !dbg !12961, !ctir !52
  %dec = add i64 %4, -1, !dbg !12961
  store i64 %dec, i64* %n_entries, align 8, !dbg !12961, !ctir !52
  %5 = load %struct.hash_entry*, %struct.hash_entry** %bucket, align 8, !dbg !12962
  %data2 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0, !dbg !12964, !ctir !945
  %6 = load i8*, i8** %data2, align 8, !dbg !12964, !ctir !47
  %tobool3 = icmp ne i8* %6, null, !dbg !12962
  br i1 %tobool3, label %if.end42, label %if.then4, !dbg !12965

if.then4:                                         ; preds = %if.end
  %7 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12966
  %n_buckets_used = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 3, !dbg !12968, !ctir !939
  %8 = load i64, i64* %n_buckets_used, align 8, !dbg !12969, !ctir !52
  %dec5 = add i64 %8, -1, !dbg !12969
  store i64 %dec5, i64* %n_buckets_used, align 8, !dbg !12969, !ctir !52
  %9 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12970
  %n_buckets_used6 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 3, !dbg !12972, !ctir !939
  %10 = load i64, i64* %n_buckets_used6, align 8, !dbg !12972, !ctir !52
  %conv = uitofp i64 %10 to float, !dbg !12970
  %11 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12973
  %tuning = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 5, !dbg !12974, !ctir !939
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning, align 8, !dbg !12974, !ctir !956
  %shrink_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %12, i32 0, i32 0, !dbg !12975, !ctir !957
  %13 = load float, float* %shrink_threshold, align 4, !dbg !12975, !ctir !962
  %14 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12976
  %n_buckets = getelementptr inbounds %struct.hash_table, %struct.hash_table* %14, i32 0, i32 2, !dbg !12977, !ctir !939
  %15 = load i64, i64* %n_buckets, align 8, !dbg !12977, !ctir !52
  %conv7 = uitofp i64 %15 to float, !dbg !12976
  %mul = fmul float %13, %conv7, !dbg !12978
  %cmp = fcmp olt float %conv, %mul, !dbg !12979
  br i1 %cmp, label %if.then9, label %if.end41, !dbg !12980

if.then9:                                         ; preds = %if.then4
  %16 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12981
  %call10 = call zeroext i1 @check_tuning(%struct.hash_table* %16), !dbg !12983
  %17 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12984
  %n_buckets_used11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %17, i32 0, i32 3, !dbg !12986, !ctir !939
  %18 = load i64, i64* %n_buckets_used11, align 8, !dbg !12986, !ctir !52
  %conv12 = uitofp i64 %18 to float, !dbg !12984
  %19 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12987
  %tuning13 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 5, !dbg !12988, !ctir !939
  %20 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning13, align 8, !dbg !12988, !ctir !956
  %shrink_threshold14 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %20, i32 0, i32 0, !dbg !12989, !ctir !957
  %21 = load float, float* %shrink_threshold14, align 4, !dbg !12989, !ctir !962
  %22 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12990
  %n_buckets15 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %22, i32 0, i32 2, !dbg !12991, !ctir !939
  %23 = load i64, i64* %n_buckets15, align 8, !dbg !12991, !ctir !52
  %conv16 = uitofp i64 %23 to float, !dbg !12990
  %mul17 = fmul float %21, %conv16, !dbg !12992
  %cmp18 = fcmp olt float %conv12, %mul17, !dbg !12993
  br i1 %cmp18, label %if.then20, label %if.end40, !dbg !12994

if.then20:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %struct.hash_tuning** %tuning21, metadata !12995, metadata !DIExpression()), !dbg !12997
  %24 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !12998
  %tuning22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %24, i32 0, i32 5, !dbg !12999, !ctir !939
  %25 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning22, align 8, !dbg !12999, !ctir !956
  store %struct.hash_tuning* %25, %struct.hash_tuning** %tuning21, align 8, !dbg !12997
  call void @llvm.dbg.declare(metadata i64* %candidate, metadata !13000, metadata !DIExpression()), !dbg !13001
  %26 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !13002
  %is_n_buckets = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %26, i32 0, i32 4, !dbg !13003, !ctir !957
  %27 = load i8, i8* %is_n_buckets, align 4, !dbg !13003
  %tobool23 = trunc i8 %27 to i1, !dbg !13003, !ctir !162
  br i1 %tobool23, label %cond.true, label %cond.false, !dbg !13002

cond.true:                                        ; preds = %if.then20
  %28 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !13004
  %n_buckets25 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 2, !dbg !13005, !ctir !939
  %29 = load i64, i64* %n_buckets25, align 8, !dbg !13005, !ctir !52
  %conv26 = uitofp i64 %29 to float, !dbg !13004
  %30 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !13006
  %shrink_factor = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %30, i32 0, i32 1, !dbg !13007, !ctir !957
  %31 = load float, float* %shrink_factor, align 4, !dbg !13007, !ctir !962
  %mul27 = fmul float %conv26, %31, !dbg !13008
  br label %cond.end, !dbg !13002

cond.false:                                       ; preds = %if.then20
  %32 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !13009
  %n_buckets28 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 2, !dbg !13010, !ctir !939
  %33 = load i64, i64* %n_buckets28, align 8, !dbg !13010, !ctir !52
  %conv29 = uitofp i64 %33 to float, !dbg !13009
  %34 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !13011
  %shrink_factor30 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %34, i32 0, i32 1, !dbg !13012, !ctir !957
  %35 = load float, float* %shrink_factor30, align 4, !dbg !13012, !ctir !962
  %mul31 = fmul float %conv29, %35, !dbg !13013
  %36 = load %struct.hash_tuning*, %struct.hash_tuning** %tuning21, align 8, !dbg !13014
  %growth_threshold = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %36, i32 0, i32 2, !dbg !13015, !ctir !957
  %37 = load float, float* %growth_threshold, align 4, !dbg !13015, !ctir !962
  %mul32 = fmul float %mul31, %37, !dbg !13016
  br label %cond.end, !dbg !13002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul27, %cond.true ], [ %mul32, %cond.false ], !dbg !13002
  %conv33 = fptoui float %cond to i64, !dbg !13017
  store i64 %conv33, i64* %candidate, align 8, !dbg !13001
  %38 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !13018
  %39 = load i64, i64* %candidate, align 8, !dbg !13020
  %call34 = call zeroext i1 @hash_rehash(%struct.hash_table* %38, i64 %39), !dbg !13021
  br i1 %call34, label %if.end39, label %if.then35, !dbg !13022

if.then35:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %cursor, metadata !13023, metadata !DIExpression()), !dbg !13025
  %40 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !13026
  %free_entry_list = getelementptr inbounds %struct.hash_table, %struct.hash_table* %40, i32 0, i32 9, !dbg !13027, !ctir !939
  %41 = load %struct.hash_entry*, %struct.hash_entry** %free_entry_list, align 8, !dbg !13027, !ctir !944
  store %struct.hash_entry* %41, %struct.hash_entry** %cursor, align 8, !dbg !13025
  call void @llvm.dbg.declare(metadata %struct.hash_entry** %next, metadata !13028, metadata !DIExpression()), !dbg !13029
  br label %while.cond, !dbg !13030

while.cond:                                       ; preds = %while.body, %if.then35
  %42 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !13031
  %tobool36 = icmp ne %struct.hash_entry* %42, null, !dbg !13030
  br i1 %tobool36, label %while.body, label %while.end, !dbg !13030

while.body:                                       ; preds = %while.cond
  %43 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !13032
  %next37 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 1, !dbg !13034, !ctir !945
  %44 = load %struct.hash_entry*, %struct.hash_entry** %next37, align 8, !dbg !13034, !ctir !944
  store %struct.hash_entry* %44, %struct.hash_entry** %next, align 8, !dbg !13035
  %45 = load %struct.hash_entry*, %struct.hash_entry** %cursor, align 8, !dbg !13036
  %46 = bitcast %struct.hash_entry* %45 to i8*, !dbg !13036
  call void @free(i8* %46) #12, !dbg !13037
  %47 = load %struct.hash_entry*, %struct.hash_entry** %next, align 8, !dbg !13038
  store %struct.hash_entry* %47, %struct.hash_entry** %cursor, align 8, !dbg !13039
  br label %while.cond, !dbg !13030, !llvm.loop !13040

while.end:                                        ; preds = %while.cond
  %48 = load %struct.hash_table*, %struct.hash_table** %table.addr, align 8, !dbg !13042
  %free_entry_list38 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 9, !dbg !13043, !ctir !939
  store %struct.hash_entry* null, %struct.hash_entry** %free_entry_list38, align 8, !dbg !13044, !ctir !944
  br label %if.end39, !dbg !13045

if.end39:                                         ; preds = %while.end, %cond.end
  br label %if.end40, !dbg !13046

if.end40:                                         ; preds = %if.end39, %if.then9
  br label %if.end41, !dbg !13047

if.end41:                                         ; preds = %if.end40, %if.then4
  br label %if.end42, !dbg !13048

if.end42:                                         ; preds = %if.end41, %if.end
  %49 = load i8*, i8** %data, align 8, !dbg !13049
  store i8* %49, i8** %retval, align 8, !dbg !13050
  br label %return, !dbg !13050

return:                                           ; preds = %if.end42, %if.then
  %50 = load i8*, i8** %retval, align 8, !dbg !13051
  ret i8* %50, !dbg !13051
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.heap* @heap_alloc(i32 (i8*, i8*)* %compare, i64 %n_reserve) #4 !dbg !13052 {
entry:
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %n_reserve.addr = alloca i64, align 8
  %heap = alloca %struct.heap*, align 8, !ctir !1250
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %compare.addr, metadata !13055, metadata !DIExpression()), !dbg !13056
  store i64 %n_reserve, i64* %n_reserve.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_reserve.addr, metadata !13057, metadata !DIExpression()), !dbg !13058
  call void @llvm.dbg.declare(metadata %struct.heap** %heap, metadata !13059, metadata !DIExpression()), !dbg !13060
  %call = call noalias i8* @xmalloc(i64 32), !dbg !13061
  %0 = bitcast i8* %call to %struct.heap*, !dbg !13061
  store %struct.heap* %0, %struct.heap** %heap, align 8, !dbg !13060
  %1 = load i64, i64* %n_reserve.addr, align 8, !dbg !13062
  %cmp = icmp eq i64 %1, 0, !dbg !13064
  br i1 %cmp, label %if.then, label %if.end, !dbg !13065

if.then:                                          ; preds = %entry
  store i64 1, i64* %n_reserve.addr, align 8, !dbg !13066
  br label %if.end, !dbg !13067

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %n_reserve.addr, align 8, !dbg !13068
  %call1 = call noalias i8* @xnmalloc(i64 %2, i64 8), !dbg !13069
  %3 = bitcast i8* %call1 to i8**, !dbg !13069
  %4 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13070
  %array = getelementptr inbounds %struct.heap, %struct.heap* %4, i32 0, i32 0, !dbg !13071, !ctir !1251
  store i8** %3, i8*** %array, align 8, !dbg !13072, !ctir !983
  %5 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13073
  %array2 = getelementptr inbounds %struct.heap, %struct.heap* %5, i32 0, i32 0, !dbg !13074, !ctir !1251
  %6 = load i8**, i8*** %array2, align 8, !dbg !13074, !ctir !983
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 0, !dbg !13073, !ctir !983
  store i8* null, i8** %arrayidx, align 8, !dbg !13075
  %7 = load i64, i64* %n_reserve.addr, align 8, !dbg !13076
  %8 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13077
  %capacity = getelementptr inbounds %struct.heap, %struct.heap* %8, i32 0, i32 1, !dbg !13078, !ctir !1251
  store i64 %7, i64* %capacity, align 8, !dbg !13079, !ctir !52
  %9 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13080
  %count = getelementptr inbounds %struct.heap, %struct.heap* %9, i32 0, i32 2, !dbg !13081, !ctir !1251
  store i64 0, i64* %count, align 8, !dbg !13082, !ctir !52
  %10 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !dbg !13083
  %tobool = icmp ne i32 (i8*, i8*)* %10, null, !dbg !13083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13083

cond.true:                                        ; preds = %if.end
  %11 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !dbg !13084
  br label %cond.end, !dbg !13083

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !13083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 (i8*, i8*)* [ %11, %cond.true ], [ @heap_default_compare, %cond.false ], !dbg !13083
  %12 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13085
  %compare3 = getelementptr inbounds %struct.heap, %struct.heap* %12, i32 0, i32 3, !dbg !13086, !ctir !1251
  store i32 (i8*, i8*)* %cond, i32 (i8*, i8*)** %compare3, align 8, !dbg !13087, !ctir !1258
  %13 = load %struct.heap*, %struct.heap** %heap, align 8, !dbg !13088
  ret %struct.heap* %13, !dbg !13089
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @heap_default_compare(i8* %a, i8* %b) #4 !dbg !13090 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !13091, metadata !DIExpression()), !dbg !13092
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !13093, metadata !DIExpression()), !dbg !13094
  ret i32 0, !dbg !13095
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @heap_free(%struct.heap* %heap) #4 !dbg !13096 {
entry:
  %heap.addr = alloca %struct.heap*, align 8
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.heap** %heap.addr, metadata !13099, metadata !DIExpression()), !dbg !13100
  %0 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13101
  %array = getelementptr inbounds %struct.heap, %struct.heap* %0, i32 0, i32 0, !dbg !13102, !ctir !1251
  %1 = load i8**, i8*** %array, align 8, !dbg !13102, !ctir !983
  %2 = bitcast i8** %1 to i8*, !dbg !13101
  call void @free(i8* %2) #12, !dbg !13103
  %3 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13104
  %4 = bitcast %struct.heap* %3 to i8*, !dbg !13104
  call void @free(i8* %4) #12, !dbg !13105
  ret void, !dbg !13106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @heap_insert(%struct.heap* %heap, i8* %item) #4 !dbg !13107 {
entry:
  %heap.addr = alloca %struct.heap*, align 8
  %item.addr = alloca i8*, align 8
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.heap** %heap.addr, metadata !13110, metadata !DIExpression()), !dbg !13111
  store i8* %item, i8** %item.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %item.addr, metadata !13112, metadata !DIExpression()), !dbg !13113
  %0 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13114
  %capacity = getelementptr inbounds %struct.heap, %struct.heap* %0, i32 0, i32 1, !dbg !13116, !ctir !1251
  %1 = load i64, i64* %capacity, align 8, !dbg !13116, !ctir !52
  %sub = sub i64 %1, 1, !dbg !13117
  %2 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13118
  %count = getelementptr inbounds %struct.heap, %struct.heap* %2, i32 0, i32 2, !dbg !13119, !ctir !1251
  %3 = load i64, i64* %count, align 8, !dbg !13119, !ctir !52
  %cmp = icmp ule i64 %sub, %3, !dbg !13120
  br i1 %cmp, label %if.then, label %if.end, !dbg !13121

if.then:                                          ; preds = %entry
  %4 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13122
  %array = getelementptr inbounds %struct.heap, %struct.heap* %4, i32 0, i32 0, !dbg !13123, !ctir !1251
  %5 = load i8**, i8*** %array, align 8, !dbg !13123, !ctir !983
  %6 = bitcast i8** %5 to i8*, !dbg !13122
  %7 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13124
  %capacity1 = getelementptr inbounds %struct.heap, %struct.heap* %7, i32 0, i32 1, !dbg !13125, !ctir !1251
  %call = call i8* @x2nrealloc(i8* %6, i64* %capacity1, i64 8), !dbg !13126
  %8 = bitcast i8* %call to i8**, !dbg !13126
  %9 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13127
  %array2 = getelementptr inbounds %struct.heap, %struct.heap* %9, i32 0, i32 0, !dbg !13128, !ctir !1251
  store i8** %8, i8*** %array2, align 8, !dbg !13129, !ctir !983
  br label %if.end, !dbg !13127

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8*, i8** %item.addr, align 8, !dbg !13130
  %11 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13131
  %array3 = getelementptr inbounds %struct.heap, %struct.heap* %11, i32 0, i32 0, !dbg !13132, !ctir !1251
  %12 = load i8**, i8*** %array3, align 8, !dbg !13132, !ctir !983
  %13 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13133
  %count4 = getelementptr inbounds %struct.heap, %struct.heap* %13, i32 0, i32 2, !dbg !13134, !ctir !1251
  %14 = load i64, i64* %count4, align 8, !dbg !13135, !ctir !52
  %inc = add i64 %14, 1, !dbg !13135
  store i64 %inc, i64* %count4, align 8, !dbg !13135, !ctir !52
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %inc, !dbg !13131, !ctir !983
  store i8* %10, i8** %arrayidx, align 8, !dbg !13136
  %15 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13137
  %array5 = getelementptr inbounds %struct.heap, %struct.heap* %15, i32 0, i32 0, !dbg !13138, !ctir !1251
  %16 = load i8**, i8*** %array5, align 8, !dbg !13138, !ctir !983
  %17 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13139
  %count6 = getelementptr inbounds %struct.heap, %struct.heap* %17, i32 0, i32 2, !dbg !13140, !ctir !1251
  %18 = load i64, i64* %count6, align 8, !dbg !13140, !ctir !52
  %19 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13141
  %compare = getelementptr inbounds %struct.heap, %struct.heap* %19, i32 0, i32 3, !dbg !13142, !ctir !1251
  %20 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare, align 8, !dbg !13142, !ctir !1258
  call void @heapify_up(i8** %16, i64 %18, i32 (i8*, i8*)* %20), !dbg !13143
  ret i32 0, !dbg !13144
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @heapify_up(i8** %array, i64 %count, i32 (i8*, i8*)* %compare) #4 !dbg !13145 {
entry:
  %array.addr = alloca i8**, align 8
  %count.addr = alloca i64, align 8
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %k = alloca i64, align 8, !ctir !52
  %new_element = alloca i8*, align 8, !ctir !47
  store i8** %array, i8*** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %array.addr, metadata !13148, metadata !DIExpression()), !dbg !13149
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !13150, metadata !DIExpression()), !dbg !13151
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %compare.addr, metadata !13152, metadata !DIExpression()), !dbg !13153
  call void @llvm.dbg.declare(metadata i64* %k, metadata !13154, metadata !DIExpression()), !dbg !13155
  %0 = load i64, i64* %count.addr, align 8, !dbg !13156
  store i64 %0, i64* %k, align 8, !dbg !13155
  call void @llvm.dbg.declare(metadata i8** %new_element, metadata !13157, metadata !DIExpression()), !dbg !13158
  %1 = load i8**, i8*** %array.addr, align 8, !dbg !13159
  %2 = load i64, i64* %k, align 8, !dbg !13160
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %2, !dbg !13159, !ctir !983
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !13159
  store i8* %3, i8** %new_element, align 8, !dbg !13158
  br label %while.cond, !dbg !13161

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i64, i64* %k, align 8, !dbg !13162
  %cmp = icmp ne i64 %4, 1, !dbg !13163
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !13164

land.rhs:                                         ; preds = %while.cond
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !dbg !13165
  %6 = load i8**, i8*** %array.addr, align 8, !dbg !13166
  %7 = load i64, i64* %k, align 8, !dbg !13167
  %div = udiv i64 %7, 2, !dbg !13168
  %arrayidx1 = getelementptr inbounds i8*, i8** %6, i64 %div, !dbg !13166, !ctir !983
  %8 = load i8*, i8** %arrayidx1, align 8, !dbg !13166
  %9 = load i8*, i8** %new_element, align 8, !dbg !13169
  %call = call i32 %5(i8* %8, i8* %9), !dbg !13165
  %cmp2 = icmp sle i32 %call, 0, !dbg !13170
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ], !dbg !13171
  br i1 %10, label %while.body, label %while.end, !dbg !13161

while.body:                                       ; preds = %land.end
  %11 = load i8**, i8*** %array.addr, align 8, !dbg !13172
  %12 = load i64, i64* %k, align 8, !dbg !13174
  %div3 = udiv i64 %12, 2, !dbg !13175
  %arrayidx4 = getelementptr inbounds i8*, i8** %11, i64 %div3, !dbg !13172, !ctir !983
  %13 = load i8*, i8** %arrayidx4, align 8, !dbg !13172
  %14 = load i8**, i8*** %array.addr, align 8, !dbg !13176
  %15 = load i64, i64* %k, align 8, !dbg !13177
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i64 %15, !dbg !13176, !ctir !983
  store i8* %13, i8** %arrayidx5, align 8, !dbg !13178
  %16 = load i64, i64* %k, align 8, !dbg !13179
  %div6 = udiv i64 %16, 2, !dbg !13179
  store i64 %div6, i64* %k, align 8, !dbg !13179
  br label %while.cond, !dbg !13161, !llvm.loop !13180

while.end:                                        ; preds = %land.end
  %17 = load i8*, i8** %new_element, align 8, !dbg !13182
  %18 = load i8**, i8*** %array.addr, align 8, !dbg !13183
  %19 = load i64, i64* %k, align 8, !dbg !13184
  %arrayidx7 = getelementptr inbounds i8*, i8** %18, i64 %19, !dbg !13183, !ctir !983
  store i8* %17, i8** %arrayidx7, align 8, !dbg !13185
  ret void, !dbg !13186
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @heap_remove_top(%struct.heap* %heap) #4 !dbg !13187 {
entry:
  %retval = alloca i8*, align 8
  %heap.addr = alloca %struct.heap*, align 8
  %top = alloca i8*, align 8, !ctir !47
  store %struct.heap* %heap, %struct.heap** %heap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.heap** %heap.addr, metadata !13190, metadata !DIExpression()), !dbg !13191
  call void @llvm.dbg.declare(metadata i8** %top, metadata !13192, metadata !DIExpression()), !dbg !13193
  %0 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13194
  %count = getelementptr inbounds %struct.heap, %struct.heap* %0, i32 0, i32 2, !dbg !13196, !ctir !1251
  %1 = load i64, i64* %count, align 8, !dbg !13196, !ctir !52
  %cmp = icmp eq i64 %1, 0, !dbg !13197
  br i1 %cmp, label %if.then, label %if.end, !dbg !13198

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !13199
  br label %return, !dbg !13199

if.end:                                           ; preds = %entry
  %2 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13200
  %array = getelementptr inbounds %struct.heap, %struct.heap* %2, i32 0, i32 0, !dbg !13201, !ctir !1251
  %3 = load i8**, i8*** %array, align 8, !dbg !13201, !ctir !983
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 1, !dbg !13200, !ctir !983
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !13200
  store i8* %4, i8** %top, align 8, !dbg !13202
  %5 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13203
  %array1 = getelementptr inbounds %struct.heap, %struct.heap* %5, i32 0, i32 0, !dbg !13204, !ctir !1251
  %6 = load i8**, i8*** %array1, align 8, !dbg !13204, !ctir !983
  %7 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13205
  %count2 = getelementptr inbounds %struct.heap, %struct.heap* %7, i32 0, i32 2, !dbg !13206, !ctir !1251
  %8 = load i64, i64* %count2, align 8, !dbg !13207, !ctir !52
  %dec = add i64 %8, -1, !dbg !13207
  store i64 %dec, i64* %count2, align 8, !dbg !13207, !ctir !52
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %8, !dbg !13203, !ctir !983
  %9 = load i8*, i8** %arrayidx3, align 8, !dbg !13203
  %10 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13208
  %array4 = getelementptr inbounds %struct.heap, %struct.heap* %10, i32 0, i32 0, !dbg !13209, !ctir !1251
  %11 = load i8**, i8*** %array4, align 8, !dbg !13209, !ctir !983
  %arrayidx5 = getelementptr inbounds i8*, i8** %11, i64 1, !dbg !13208, !ctir !983
  store i8* %9, i8** %arrayidx5, align 8, !dbg !13210
  %12 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13211
  %array6 = getelementptr inbounds %struct.heap, %struct.heap* %12, i32 0, i32 0, !dbg !13212, !ctir !1251
  %13 = load i8**, i8*** %array6, align 8, !dbg !13212, !ctir !983
  %14 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13213
  %count7 = getelementptr inbounds %struct.heap, %struct.heap* %14, i32 0, i32 2, !dbg !13214, !ctir !1251
  %15 = load i64, i64* %count7, align 8, !dbg !13214, !ctir !52
  %16 = load %struct.heap*, %struct.heap** %heap.addr, align 8, !dbg !13215
  %compare = getelementptr inbounds %struct.heap, %struct.heap* %16, i32 0, i32 3, !dbg !13216, !ctir !1251
  %17 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare, align 8, !dbg !13216, !ctir !1258
  %call = call i64 @heapify_down(i8** %13, i64 %15, i64 1, i32 (i8*, i8*)* %17), !dbg !13217
  %18 = load i8*, i8** %top, align 8, !dbg !13218
  store i8* %18, i8** %retval, align 8, !dbg !13219
  br label %return, !dbg !13219

return:                                           ; preds = %if.end, %if.then
  %19 = load i8*, i8** %retval, align 8, !dbg !13220
  ret i8* %19, !dbg !13220
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @heapify_down(i8** %array, i64 %count, i64 %initial, i32 (i8*, i8*)* %compare) #4 !dbg !13221 {
entry:
  %array.addr = alloca i8**, align 8
  %count.addr = alloca i64, align 8
  %initial.addr = alloca i64, align 8
  %compare.addr = alloca i32 (i8*, i8*)*, align 8
  %element = alloca i8*, align 8, !ctir !47
  %parent = alloca i64, align 8, !ctir !52
  %child = alloca i64, align 8, !ctir !52
  store i8** %array, i8*** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %array.addr, metadata !13224, metadata !DIExpression()), !dbg !13225
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !13226, metadata !DIExpression()), !dbg !13227
  store i64 %initial, i64* %initial.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %initial.addr, metadata !13228, metadata !DIExpression()), !dbg !13229
  store i32 (i8*, i8*)* %compare, i32 (i8*, i8*)** %compare.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*)** %compare.addr, metadata !13230, metadata !DIExpression()), !dbg !13231
  call void @llvm.dbg.declare(metadata i8** %element, metadata !13232, metadata !DIExpression()), !dbg !13233
  %0 = load i8**, i8*** %array.addr, align 8, !dbg !13234
  %1 = load i64, i64* %initial.addr, align 8, !dbg !13235
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !13234, !ctir !983
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !13234
  store i8* %2, i8** %element, align 8, !dbg !13233
  call void @llvm.dbg.declare(metadata i64* %parent, metadata !13236, metadata !DIExpression()), !dbg !13237
  %3 = load i64, i64* %initial.addr, align 8, !dbg !13238
  store i64 %3, i64* %parent, align 8, !dbg !13237
  br label %while.cond, !dbg !13239

while.cond:                                       ; preds = %if.end9, %entry
  %4 = load i64, i64* %parent, align 8, !dbg !13240
  %5 = load i64, i64* %count.addr, align 8, !dbg !13241
  %div = udiv i64 %5, 2, !dbg !13242
  %cmp = icmp ule i64 %4, %div, !dbg !13243
  br i1 %cmp, label %while.body, label %while.end, !dbg !13239

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i64* %child, metadata !13244, metadata !DIExpression()), !dbg !13246
  %6 = load i64, i64* %parent, align 8, !dbg !13247
  %mul = mul i64 2, %6, !dbg !13248
  store i64 %mul, i64* %child, align 8, !dbg !13246
  %7 = load i64, i64* %child, align 8, !dbg !13249
  %8 = load i64, i64* %count.addr, align 8, !dbg !13251
  %cmp1 = icmp ult i64 %7, %8, !dbg !13252
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !13253

land.lhs.true:                                    ; preds = %while.body
  %9 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !dbg !13254
  %10 = load i8**, i8*** %array.addr, align 8, !dbg !13255
  %11 = load i64, i64* %child, align 8, !dbg !13256
  %arrayidx2 = getelementptr inbounds i8*, i8** %10, i64 %11, !dbg !13255, !ctir !983
  %12 = load i8*, i8** %arrayidx2, align 8, !dbg !13255
  %13 = load i8**, i8*** %array.addr, align 8, !dbg !13257
  %14 = load i64, i64* %child, align 8, !dbg !13258
  %add = add i64 %14, 1, !dbg !13259
  %arrayidx3 = getelementptr inbounds i8*, i8** %13, i64 %add, !dbg !13257, !ctir !983
  %15 = load i8*, i8** %arrayidx3, align 8, !dbg !13257
  %call = call i32 %9(i8* %12, i8* %15), !dbg !13254
  %cmp4 = icmp slt i32 %call, 0, !dbg !13260
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13261

if.then:                                          ; preds = %land.lhs.true
  %16 = load i64, i64* %child, align 8, !dbg !13262
  %inc = add i64 %16, 1, !dbg !13262
  store i64 %inc, i64* %child, align 8, !dbg !13262
  br label %if.end, !dbg !13263

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.body
  %17 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %compare.addr, align 8, !dbg !13264
  %18 = load i8**, i8*** %array.addr, align 8, !dbg !13266
  %19 = load i64, i64* %child, align 8, !dbg !13267
  %arrayidx5 = getelementptr inbounds i8*, i8** %18, i64 %19, !dbg !13266, !ctir !983
  %20 = load i8*, i8** %arrayidx5, align 8, !dbg !13266
  %21 = load i8*, i8** %element, align 8, !dbg !13268
  %call6 = call i32 %17(i8* %20, i8* %21), !dbg !13264
  %cmp7 = icmp sle i32 %call6, 0, !dbg !13269
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !13270

if.then8:                                         ; preds = %if.end
  br label %while.end, !dbg !13271

if.end9:                                          ; preds = %if.end
  %22 = load i8**, i8*** %array.addr, align 8, !dbg !13272
  %23 = load i64, i64* %child, align 8, !dbg !13273
  %arrayidx10 = getelementptr inbounds i8*, i8** %22, i64 %23, !dbg !13272, !ctir !983
  %24 = load i8*, i8** %arrayidx10, align 8, !dbg !13272
  %25 = load i8**, i8*** %array.addr, align 8, !dbg !13274
  %26 = load i64, i64* %parent, align 8, !dbg !13275
  %arrayidx11 = getelementptr inbounds i8*, i8** %25, i64 %26, !dbg !13274, !ctir !983
  store i8* %24, i8** %arrayidx11, align 8, !dbg !13276
  %27 = load i64, i64* %child, align 8, !dbg !13277
  store i64 %27, i64* %parent, align 8, !dbg !13278
  br label %while.cond, !dbg !13239, !llvm.loop !13279

while.end:                                        ; preds = %if.then8, %while.cond
  %28 = load i8*, i8** %element, align 8, !dbg !13281
  %29 = load i8**, i8*** %array.addr, align 8, !dbg !13282
  %30 = load i64, i64* %parent, align 8, !dbg !13283
  %arrayidx12 = getelementptr inbounds i8*, i8** %29, i64 %30, !dbg !13282, !ctir !983
  store i8* %28, i8** %arrayidx12, align 8, !dbg !13284
  %31 = load i64, i64* %parent, align 8, !dbg !13285
  ret i64 %31, !dbg !13286
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @inttostr(i32 %i, i8* %buf) #4 !dbg !13287 {
entry:
  %i.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !7
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !13291, metadata !DIExpression()), !dbg !13292
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !13293, metadata !DIExpression()), !dbg !13294
  call void @llvm.dbg.declare(metadata i8** %p, metadata !13295, metadata !DIExpression()), !dbg !13296
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !13297
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 11, !dbg !13298, !ctir !8
  store i8* %add.ptr, i8** %p, align 8, !dbg !13296
  %1 = load i8*, i8** %p, align 8, !dbg !13299
  store i8 0, i8* %1, align 1, !dbg !13300, !ctir !8
  %2 = load i32, i32* %i.addr, align 4, !dbg !13301
  %cmp = icmp slt i32 %2, 0, !dbg !13303
  br i1 %cmp, label %if.then, label %if.else, !dbg !13304

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13305

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i32, i32* %i.addr, align 4, !dbg !13307
  %rem = srem i32 %3, 10, !dbg !13308
  %sub = sub nsw i32 48, %rem, !dbg !13309
  %conv = trunc i32 %sub to i8, !dbg !13310
  %4 = load i8*, i8** %p, align 8, !dbg !13311
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !13311, !ctir !8
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !13311
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !13312, !ctir !8
  br label %do.cond, !dbg !13313

do.cond:                                          ; preds = %do.body
  %5 = load i32, i32* %i.addr, align 4, !dbg !13314
  %div = sdiv i32 %5, 10, !dbg !13314
  store i32 %div, i32* %i.addr, align 4, !dbg !13314
  %cmp1 = icmp ne i32 %div, 0, !dbg !13315
  br i1 %cmp1, label %do.body, label %do.end, !dbg !13313, !llvm.loop !13316

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %p, align 8, !dbg !13318
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !13318, !ctir !8
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !13318
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !13319, !ctir !8
  br label %if.end, !dbg !13320

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !13321

do.body4:                                         ; preds = %do.cond8, %if.else
  %7 = load i32, i32* %i.addr, align 4, !dbg !13323
  %rem5 = srem i32 %7, 10, !dbg !13324
  %add = add nsw i32 48, %rem5, !dbg !13325
  %conv6 = trunc i32 %add to i8, !dbg !13326
  %8 = load i8*, i8** %p, align 8, !dbg !13327
  %incdec.ptr7 = getelementptr inbounds i8, i8* %8, i32 -1, !dbg !13327, !ctir !8
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !13327
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !13328, !ctir !8
  br label %do.cond8, !dbg !13329

do.cond8:                                         ; preds = %do.body4
  %9 = load i32, i32* %i.addr, align 4, !dbg !13330
  %div9 = sdiv i32 %9, 10, !dbg !13330
  store i32 %div9, i32* %i.addr, align 4, !dbg !13330
  %cmp10 = icmp ne i32 %div9, 0, !dbg !13331
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !13329, !llvm.loop !13332

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %10 = load i8*, i8** %p, align 8, !dbg !13334
  ret i8* %10, !dbg !13335
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @uinttostr(i32 %i, i8* %buf) #4 !dbg !13336 {
entry:
  %i.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !7
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !13339, metadata !DIExpression()), !dbg !13340
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !13341, metadata !DIExpression()), !dbg !13342
  call void @llvm.dbg.declare(metadata i8** %p, metadata !13343, metadata !DIExpression()), !dbg !13344
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !13345
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 10, !dbg !13346, !ctir !8
  store i8* %add.ptr, i8** %p, align 8, !dbg !13344
  %1 = load i8*, i8** %p, align 8, !dbg !13347
  store i8 0, i8* %1, align 1, !dbg !13348, !ctir !8
  %2 = load i32, i32* %i.addr, align 4, !dbg !13349
  %cmp = icmp ult i32 %2, 0, !dbg !13351
  br i1 %cmp, label %if.then, label %if.else, !dbg !13352

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13353

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i32, i32* %i.addr, align 4, !dbg !13355
  %rem = urem i32 %3, 10, !dbg !13356
  %sub = sub i32 48, %rem, !dbg !13357
  %conv = trunc i32 %sub to i8, !dbg !13358
  %4 = load i8*, i8** %p, align 8, !dbg !13359
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !13359, !ctir !8
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !13359
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !13360, !ctir !8
  br label %do.cond, !dbg !13361

do.cond:                                          ; preds = %do.body
  %5 = load i32, i32* %i.addr, align 4, !dbg !13362
  %div = udiv i32 %5, 10, !dbg !13362
  store i32 %div, i32* %i.addr, align 4, !dbg !13362
  %cmp1 = icmp ne i32 %div, 0, !dbg !13363
  br i1 %cmp1, label %do.body, label %do.end, !dbg !13361, !llvm.loop !13364

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %p, align 8, !dbg !13366
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !13366, !ctir !8
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !13366
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !13367, !ctir !8
  br label %if.end, !dbg !13368

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !13369

do.body4:                                         ; preds = %do.cond8, %if.else
  %7 = load i32, i32* %i.addr, align 4, !dbg !13371
  %rem5 = urem i32 %7, 10, !dbg !13372
  %add = add i32 48, %rem5, !dbg !13373
  %conv6 = trunc i32 %add to i8, !dbg !13374
  %8 = load i8*, i8** %p, align 8, !dbg !13375
  %incdec.ptr7 = getelementptr inbounds i8, i8* %8, i32 -1, !dbg !13375, !ctir !8
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !13375
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !13376, !ctir !8
  br label %do.cond8, !dbg !13377

do.cond8:                                         ; preds = %do.body4
  %9 = load i32, i32* %i.addr, align 4, !dbg !13378
  %div9 = udiv i32 %9, 10, !dbg !13378
  store i32 %div9, i32* %i.addr, align 4, !dbg !13378
  %cmp10 = icmp ne i32 %div9, 0, !dbg !13379
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !13377, !llvm.loop !13380

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %10 = load i8*, i8** %p, align 8, !dbg !13382
  ret i8* %10, !dbg !13383
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @umaxtostr(i64 %i, i8* %buf) #4 !dbg !13384 {
entry:
  %i.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %p = alloca i8*, align 8, !ctir !7
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !13387, metadata !DIExpression()), !dbg !13388
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !13389, metadata !DIExpression()), !dbg !13390
  call void @llvm.dbg.declare(metadata i8** %p, metadata !13391, metadata !DIExpression()), !dbg !13392
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !13393
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 20, !dbg !13394, !ctir !8
  store i8* %add.ptr, i8** %p, align 8, !dbg !13392
  %1 = load i8*, i8** %p, align 8, !dbg !13395
  store i8 0, i8* %1, align 1, !dbg !13396, !ctir !8
  %2 = load i64, i64* %i.addr, align 8, !dbg !13397
  %cmp = icmp ult i64 %2, 0, !dbg !13399
  br i1 %cmp, label %if.then, label %if.else, !dbg !13400

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13401

do.body:                                          ; preds = %do.cond, %if.then
  %3 = load i64, i64* %i.addr, align 8, !dbg !13403
  %rem = urem i64 %3, 10, !dbg !13404
  %sub = sub i64 48, %rem, !dbg !13405
  %conv = trunc i64 %sub to i8, !dbg !13406
  %4 = load i8*, i8** %p, align 8, !dbg !13407
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1, !dbg !13407, !ctir !8
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !13407
  store i8 %conv, i8* %incdec.ptr, align 1, !dbg !13408, !ctir !8
  br label %do.cond, !dbg !13409

do.cond:                                          ; preds = %do.body
  %5 = load i64, i64* %i.addr, align 8, !dbg !13410
  %div = udiv i64 %5, 10, !dbg !13410
  store i64 %div, i64* %i.addr, align 8, !dbg !13410
  %cmp1 = icmp ne i64 %div, 0, !dbg !13411
  br i1 %cmp1, label %do.body, label %do.end, !dbg !13409, !llvm.loop !13412

do.end:                                           ; preds = %do.cond
  %6 = load i8*, i8** %p, align 8, !dbg !13414
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 -1, !dbg !13414, !ctir !8
  store i8* %incdec.ptr3, i8** %p, align 8, !dbg !13414
  store i8 45, i8* %incdec.ptr3, align 1, !dbg !13415, !ctir !8
  br label %if.end, !dbg !13416

if.else:                                          ; preds = %entry
  br label %do.body4, !dbg !13417

do.body4:                                         ; preds = %do.cond8, %if.else
  %7 = load i64, i64* %i.addr, align 8, !dbg !13419
  %rem5 = urem i64 %7, 10, !dbg !13420
  %add = add i64 48, %rem5, !dbg !13421
  %conv6 = trunc i64 %add to i8, !dbg !13422
  %8 = load i8*, i8** %p, align 8, !dbg !13423
  %incdec.ptr7 = getelementptr inbounds i8, i8* %8, i32 -1, !dbg !13423, !ctir !8
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !13423
  store i8 %conv6, i8* %incdec.ptr7, align 1, !dbg !13424, !ctir !8
  br label %do.cond8, !dbg !13425

do.cond8:                                         ; preds = %do.body4
  %9 = load i64, i64* %i.addr, align 8, !dbg !13426
  %div9 = udiv i64 %9, 10, !dbg !13426
  store i64 %div9, i64* %i.addr, align 8, !dbg !13426
  %cmp10 = icmp ne i64 %div9, 0, !dbg !13427
  br i1 %cmp10, label %do.body4, label %do.end12, !dbg !13425, !llvm.loop !13428

do.end12:                                         ; preds = %do.cond8
  br label %if.end

if.end:                                           ; preds = %do.end12, %do.end
  %10 = load i8*, i8** %p, align 8, !dbg !13430
  ret i8* %10, !dbg !13431
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @gnu_mbswidth(i8* %string, i32 %flags) #4 !dbg !13432 {
entry:
  %string.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !13436, metadata !DIExpression()), !dbg !13437
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13438, metadata !DIExpression()), !dbg !13439
  %0 = load i8*, i8** %string.addr, align 8, !dbg !13440
  %1 = load i8*, i8** %string.addr, align 8, !dbg !13441
  %call = call i64 @strlen(i8* %1) #14, !dbg !13442
  %2 = load i32, i32* %flags.addr, align 4, !dbg !13443
  %call1 = call i32 @mbsnwidth(i8* %0, i64 %call, i32 %2), !dbg !13444
  ret i32 %call1, !dbg !13445
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mbsnwidth(i8* %string, i64 %nbytes, i32 %flags) #4 !dbg !13446 {
entry:
  %retval = alloca i32, align 4
  %string.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %p = alloca i8*, align 8, !ctir !90
  %plimit = alloca i8*, align 8, !ctir !90
  %width = alloca i32, align 4, !ctir !5
  %mbstate = alloca %struct.__mbstate_t, align 4, !ctir !1273
  %wc = alloca i32, align 4, !ctir !1094
  %bytes = alloca i64, align 8, !ctir !52
  %w = alloca i32, align 4, !ctir !5
  %c = alloca i8, align 1, !ctir !535
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !13449, metadata !DIExpression()), !dbg !13450
  store i64 %nbytes, i64* %nbytes.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nbytes.addr, metadata !13451, metadata !DIExpression()), !dbg !13452
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13453, metadata !DIExpression()), !dbg !13454
  call void @llvm.dbg.declare(metadata i8** %p, metadata !13455, metadata !DIExpression()), !dbg !13456
  %0 = load i8*, i8** %string.addr, align 8, !dbg !13457
  store i8* %0, i8** %p, align 8, !dbg !13456
  call void @llvm.dbg.declare(metadata i8** %plimit, metadata !13458, metadata !DIExpression()), !dbg !13459
  %1 = load i8*, i8** %p, align 8, !dbg !13460
  %2 = load i64, i64* %nbytes.addr, align 8, !dbg !13461
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2, !dbg !13462, !ctir !91
  store i8* %add.ptr, i8** %plimit, align 8, !dbg !13459
  call void @llvm.dbg.declare(metadata i32* %width, metadata !13463, metadata !DIExpression()), !dbg !13464
  store i32 0, i32* %width, align 4, !dbg !13465
  %call = call i64 @__ctype_get_mb_cur_max() #12, !dbg !13466
  %cmp = icmp ugt i64 %call, 1, !dbg !13468
  br i1 %cmp, label %if.then, label %if.end49, !dbg !13469

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !13470

while.cond:                                       ; preds = %sw.epilog, %if.then
  %3 = load i8*, i8** %p, align 8, !dbg !13472
  %4 = load i8*, i8** %plimit, align 8, !dbg !13473
  %cmp1 = icmp ult i8* %3, %4, !dbg !13474
  br i1 %cmp1, label %while.body, label %while.end, !dbg !13470

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8, !dbg !13475
  %6 = load i8, i8* %5, align 1, !dbg !13476, !ctir !91
  %conv = sext i8 %6 to i32, !dbg !13476
  switch i32 %conv, label %sw.default [
    i32 32, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ], !dbg !13477

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %7 = load i8*, i8** %p, align 8, !dbg !13478
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !13478, !ctir !91
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !13478
  %8 = load i32, i32* %width, align 4, !dbg !13480
  %inc = add nsw i32 %8, 1, !dbg !13480
  store i32 %inc, i32* %width, align 4, !dbg !13480
  br label %sw.epilog, !dbg !13481

sw.default:                                       ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %mbstate, metadata !13482, metadata !DIExpression()), !dbg !13484
  %9 = bitcast %struct.__mbstate_t* %mbstate to i8*, !dbg !13485
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 8, i1 false), !dbg !13485
  br label %do.body, !dbg !13486

do.body:                                          ; preds = %do.cond, %sw.default
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !13487, metadata !DIExpression()), !dbg !13489
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !13490, metadata !DIExpression()), !dbg !13491
  call void @llvm.dbg.declare(metadata i32* %w, metadata !13492, metadata !DIExpression()), !dbg !13493
  %10 = load i8*, i8** %p, align 8, !dbg !13494
  %11 = load i8*, i8** %plimit, align 8, !dbg !13495
  %12 = load i8*, i8** %p, align 8, !dbg !13496
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64, !dbg !13497
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64, !dbg !13497
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !13497
  %call2 = call i64 @rpl_mbrtowc(i32* %wc, i8* %10, i64 %sub.ptr.sub, %struct.__mbstate_t* %mbstate), !dbg !13498
  store i64 %call2, i64* %bytes, align 8, !dbg !13499
  %13 = load i64, i64* %bytes, align 8, !dbg !13500
  %cmp3 = icmp eq i64 %13, -1, !dbg !13502
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !13503

if.then5:                                         ; preds = %do.body
  %14 = load i32, i32* %flags.addr, align 4, !dbg !13504
  %and = and i32 %14, 1, !dbg !13507
  %tobool = icmp ne i32 %and, 0, !dbg !13507
  br i1 %tobool, label %if.else, label %if.then6, !dbg !13508

if.then6:                                         ; preds = %if.then5
  %15 = load i8*, i8** %p, align 8, !dbg !13509
  %incdec.ptr7 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !13509, !ctir !91
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !13509
  %16 = load i32, i32* %width, align 4, !dbg !13511
  %inc8 = add nsw i32 %16, 1, !dbg !13511
  store i32 %inc8, i32* %width, align 4, !dbg !13511
  br label %do.end, !dbg !13512

if.else:                                          ; preds = %if.then5
  store i32 -1, i32* %retval, align 4, !dbg !13513
  br label %return, !dbg !13513

if.end:                                           ; preds = %do.body
  %17 = load i64, i64* %bytes, align 8, !dbg !13514
  %cmp9 = icmp eq i64 %17, -2, !dbg !13516
  br i1 %cmp9, label %if.then11, label %if.end17, !dbg !13517

if.then11:                                        ; preds = %if.end
  %18 = load i32, i32* %flags.addr, align 4, !dbg !13518
  %and12 = and i32 %18, 1, !dbg !13521
  %tobool13 = icmp ne i32 %and12, 0, !dbg !13521
  br i1 %tobool13, label %if.else16, label %if.then14, !dbg !13522

if.then14:                                        ; preds = %if.then11
  %19 = load i8*, i8** %plimit, align 8, !dbg !13523
  store i8* %19, i8** %p, align 8, !dbg !13525
  %20 = load i32, i32* %width, align 4, !dbg !13526
  %inc15 = add nsw i32 %20, 1, !dbg !13526
  store i32 %inc15, i32* %width, align 4, !dbg !13526
  br label %do.end, !dbg !13527

if.else16:                                        ; preds = %if.then11
  store i32 -1, i32* %retval, align 4, !dbg !13528
  br label %return, !dbg !13528

if.end17:                                         ; preds = %if.end
  %21 = load i64, i64* %bytes, align 8, !dbg !13529
  %cmp18 = icmp eq i64 %21, 0, !dbg !13531
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !13532

if.then20:                                        ; preds = %if.end17
  store i64 1, i64* %bytes, align 8, !dbg !13533
  br label %if.end21, !dbg !13534

if.end21:                                         ; preds = %if.then20, %if.end17
  %22 = load i32, i32* %wc, align 4, !dbg !13535
  %call22 = call i32 @wcwidth(i32 %22) #12, !dbg !13536
  store i32 %call22, i32* %w, align 4, !dbg !13537
  %23 = load i32, i32* %w, align 4, !dbg !13538
  %cmp23 = icmp sge i32 %23, 0, !dbg !13540
  br i1 %cmp23, label %if.then25, label %if.else30, !dbg !13541

if.then25:                                        ; preds = %if.end21
  %24 = load i32, i32* %w, align 4, !dbg !13542
  %25 = load i32, i32* %width, align 4, !dbg !13545
  %sub = sub nsw i32 2147483647, %25, !dbg !13546
  %cmp26 = icmp sgt i32 %24, %sub, !dbg !13547
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !13548

if.then28:                                        ; preds = %if.then25
  br label %overflow, !dbg !13549

if.end29:                                         ; preds = %if.then25
  %26 = load i32, i32* %w, align 4, !dbg !13550
  %27 = load i32, i32* %width, align 4, !dbg !13551
  %add = add nsw i32 %27, %26, !dbg !13551
  store i32 %add, i32* %width, align 4, !dbg !13551
  br label %if.end45, !dbg !13552

if.else30:                                        ; preds = %if.end21
  %28 = load i32, i32* %flags.addr, align 4, !dbg !13553
  %and31 = and i32 %28, 2, !dbg !13555
  %tobool32 = icmp ne i32 %and31, 0, !dbg !13555
  br i1 %tobool32, label %if.else43, label %if.then33, !dbg !13556

if.then33:                                        ; preds = %if.else30
  %29 = load i32, i32* %wc, align 4, !dbg !13557
  %call34 = call i32 @iswcntrl(i32 %29) #12, !dbg !13560
  %tobool35 = icmp ne i32 %call34, 0, !dbg !13560
  br i1 %tobool35, label %if.end42, label %if.then36, !dbg !13561

if.then36:                                        ; preds = %if.then33
  %30 = load i32, i32* %width, align 4, !dbg !13562
  %cmp37 = icmp eq i32 %30, 2147483647, !dbg !13565
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !13566

if.then39:                                        ; preds = %if.then36
  br label %overflow, !dbg !13567

if.end40:                                         ; preds = %if.then36
  %31 = load i32, i32* %width, align 4, !dbg !13568
  %inc41 = add nsw i32 %31, 1, !dbg !13568
  store i32 %inc41, i32* %width, align 4, !dbg !13568
  br label %if.end42, !dbg !13569

if.end42:                                         ; preds = %if.end40, %if.then33
  br label %if.end44, !dbg !13570

if.else43:                                        ; preds = %if.else30
  store i32 -1, i32* %retval, align 4, !dbg !13571
  br label %return, !dbg !13571

if.end44:                                         ; preds = %if.end42
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end29
  %32 = load i64, i64* %bytes, align 8, !dbg !13572
  %33 = load i8*, i8** %p, align 8, !dbg !13573
  %add.ptr46 = getelementptr inbounds i8, i8* %33, i64 %32, !dbg !13573, !ctir !91
  store i8* %add.ptr46, i8** %p, align 8, !dbg !13573
  br label %do.cond, !dbg !13574

do.cond:                                          ; preds = %if.end45
  %call47 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #14, !dbg !13575
  %tobool48 = icmp ne i32 %call47, 0, !dbg !13576
  %lnot = xor i1 %tobool48, true, !dbg !13576
  br i1 %lnot, label %do.body, label %do.end, !dbg !13574, !llvm.loop !13577

do.end:                                           ; preds = %do.cond, %if.then14, %if.then6
  br label %sw.epilog, !dbg !13579

sw.epilog:                                        ; preds = %do.end, %sw.bb
  br label %while.cond, !dbg !13470, !llvm.loop !13580

while.end:                                        ; preds = %while.cond
  %34 = load i32, i32* %width, align 4, !dbg !13582
  store i32 %34, i32* %retval, align 4, !dbg !13583
  br label %return, !dbg !13583

if.end49:                                         ; preds = %entry
  br label %while.cond50, !dbg !13584

while.cond50:                                     ; preds = %if.end86, %if.end49
  %35 = load i8*, i8** %p, align 8, !dbg !13585
  %36 = load i8*, i8** %plimit, align 8, !dbg !13586
  %cmp51 = icmp ult i8* %35, %36, !dbg !13587
  br i1 %cmp51, label %while.body53, label %while.end87, !dbg !13584

while.body53:                                     ; preds = %while.cond50
  call void @llvm.dbg.declare(metadata i8* %c, metadata !13588, metadata !DIExpression()), !dbg !13590
  %37 = load i8*, i8** %p, align 8, !dbg !13591
  %incdec.ptr54 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !13591, !ctir !91
  store i8* %incdec.ptr54, i8** %p, align 8, !dbg !13591
  %38 = load i8, i8* %37, align 1, !dbg !13592, !ctir !91
  store i8 %38, i8* %c, align 1, !dbg !13590
  %call55 = call i16** @__ctype_b_loc() #16, !dbg !13593
  %39 = load i16*, i16** %call55, align 8, !dbg !13593, !ctir !451
  %40 = load i8, i8* %c, align 1, !dbg !13593
  %conv56 = zext i8 %40 to i32, !dbg !13593
  %idxprom = sext i32 %conv56 to i64, !dbg !13593
  %arrayidx = getelementptr inbounds i16, i16* %39, i64 %idxprom, !dbg !13593, !ctir !451
  %41 = load i16, i16* %arrayidx, align 2, !dbg !13593
  %conv57 = zext i16 %41 to i32, !dbg !13593
  %and58 = and i32 %conv57, 16384, !dbg !13593
  %tobool59 = icmp ne i32 %and58, 0, !dbg !13593
  br i1 %tobool59, label %if.then60, label %if.else66, !dbg !13595

if.then60:                                        ; preds = %while.body53
  %42 = load i32, i32* %width, align 4, !dbg !13596
  %cmp61 = icmp eq i32 %42, 2147483647, !dbg !13599
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !13600

if.then63:                                        ; preds = %if.then60
  br label %overflow, !dbg !13601

if.end64:                                         ; preds = %if.then60
  %43 = load i32, i32* %width, align 4, !dbg !13602
  %inc65 = add nsw i32 %43, 1, !dbg !13602
  store i32 %inc65, i32* %width, align 4, !dbg !13602
  br label %if.end86, !dbg !13603

if.else66:                                        ; preds = %while.body53
  %44 = load i32, i32* %flags.addr, align 4, !dbg !13604
  %and67 = and i32 %44, 2, !dbg !13606
  %tobool68 = icmp ne i32 %and67, 0, !dbg !13606
  br i1 %tobool68, label %if.else84, label %if.then69, !dbg !13607

if.then69:                                        ; preds = %if.else66
  %call70 = call i16** @__ctype_b_loc() #16, !dbg !13608
  %45 = load i16*, i16** %call70, align 8, !dbg !13608, !ctir !451
  %46 = load i8, i8* %c, align 1, !dbg !13608
  %conv71 = zext i8 %46 to i32, !dbg !13608
  %idxprom72 = sext i32 %conv71 to i64, !dbg !13608
  %arrayidx73 = getelementptr inbounds i16, i16* %45, i64 %idxprom72, !dbg !13608, !ctir !451
  %47 = load i16, i16* %arrayidx73, align 2, !dbg !13608
  %conv74 = zext i16 %47 to i32, !dbg !13608
  %and75 = and i32 %conv74, 2, !dbg !13608
  %tobool76 = icmp ne i32 %and75, 0, !dbg !13608
  br i1 %tobool76, label %if.end83, label %if.then77, !dbg !13611

if.then77:                                        ; preds = %if.then69
  %48 = load i32, i32* %width, align 4, !dbg !13612
  %cmp78 = icmp eq i32 %48, 2147483647, !dbg !13615
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !13616

if.then80:                                        ; preds = %if.then77
  br label %overflow, !dbg !13617

if.end81:                                         ; preds = %if.then77
  %49 = load i32, i32* %width, align 4, !dbg !13618
  %inc82 = add nsw i32 %49, 1, !dbg !13618
  store i32 %inc82, i32* %width, align 4, !dbg !13618
  br label %if.end83, !dbg !13619

if.end83:                                         ; preds = %if.end81, %if.then69
  br label %if.end85, !dbg !13620

if.else84:                                        ; preds = %if.else66
  store i32 -1, i32* %retval, align 4, !dbg !13621
  br label %return, !dbg !13621

if.end85:                                         ; preds = %if.end83
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end64
  br label %while.cond50, !dbg !13584, !llvm.loop !13622

while.end87:                                      ; preds = %while.cond50
  %50 = load i32, i32* %width, align 4, !dbg !13624
  store i32 %50, i32* %retval, align 4, !dbg !13625
  br label %return, !dbg !13625

overflow:                                         ; preds = %if.then80, %if.then63, %if.then39, %if.then28
  call void @llvm.dbg.label(metadata !13626), !dbg !13627
  store i32 2147483647, i32* %retval, align 4, !dbg !13628
  br label %return, !dbg !13628

return:                                           ; preds = %overflow, %while.end87, %if.else84, %while.end, %if.else43, %if.else16, %if.else
  %51 = load i32, i32* %retval, align 4, !dbg !13629
  ret i32 %51, !dbg !13629
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind
declare dso_local i32 @wcwidth(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @iswcntrl(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @num_processors(i32 %query) #4 !dbg !13630 {
entry:
  %retval = alloca i64, align 8
  %query.addr = alloca i32, align 4
  %omp_env_limit = alloca i64, align 8, !ctir !54
  %omp_env_threads = alloca i64, align 8, !ctir !54
  %nprocs = alloca i64, align 8, !ctir !54
  store i32 %query, i32* %query.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %query.addr, metadata !13634, metadata !DIExpression()), !dbg !13635
  call void @llvm.dbg.declare(metadata i64* %omp_env_limit, metadata !13636, metadata !DIExpression()), !dbg !13637
  store i64 -1, i64* %omp_env_limit, align 8, !dbg !13637
  %0 = load i32, i32* %query.addr, align 4, !dbg !13638
  %cmp = icmp eq i32 %0, 2, !dbg !13640
  br i1 %cmp, label %if.then, label %if.end9, !dbg !13641

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %omp_env_threads, metadata !13642, metadata !DIExpression()), !dbg !13644
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.231, i64 0, i64 0)) #12, !dbg !13645
  %call1 = call i64 @parse_omp_threads(i8* %call), !dbg !13646
  store i64 %call1, i64* %omp_env_threads, align 8, !dbg !13647
  %call2 = call i8* @getenv(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.232, i64 0, i64 0)) #12, !dbg !13648
  %call3 = call i64 @parse_omp_threads(i8* %call2), !dbg !13649
  store i64 %call3, i64* %omp_env_limit, align 8, !dbg !13650
  %1 = load i64, i64* %omp_env_limit, align 8, !dbg !13651
  %tobool = icmp ne i64 %1, 0, !dbg !13651
  br i1 %tobool, label %if.end, label %if.then4, !dbg !13653

if.then4:                                         ; preds = %if.then
  store i64 -1, i64* %omp_env_limit, align 8, !dbg !13654
  br label %if.end, !dbg !13655

if.end:                                           ; preds = %if.then4, %if.then
  %2 = load i64, i64* %omp_env_threads, align 8, !dbg !13656
  %tobool5 = icmp ne i64 %2, 0, !dbg !13656
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !13658

if.then6:                                         ; preds = %if.end
  %3 = load i64, i64* %omp_env_threads, align 8, !dbg !13659
  %4 = load i64, i64* %omp_env_limit, align 8, !dbg !13659
  %cmp7 = icmp ult i64 %3, %4, !dbg !13659
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !13659

cond.true:                                        ; preds = %if.then6
  %5 = load i64, i64* %omp_env_threads, align 8, !dbg !13659
  br label %cond.end, !dbg !13659

cond.false:                                       ; preds = %if.then6
  %6 = load i64, i64* %omp_env_limit, align 8, !dbg !13659
  br label %cond.end, !dbg !13659

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %6, %cond.false ], !dbg !13659
  store i64 %cond, i64* %retval, align 8, !dbg !13660
  br label %return, !dbg !13660

if.end8:                                          ; preds = %if.end
  store i32 1, i32* %query.addr, align 4, !dbg !13661
  br label %if.end9, !dbg !13662

if.end9:                                          ; preds = %if.end8, %entry
  call void @llvm.dbg.declare(metadata i64* %nprocs, metadata !13663, metadata !DIExpression()), !dbg !13665
  %7 = load i32, i32* %query.addr, align 4, !dbg !13666
  %call10 = call i64 @num_processors_ignoring_omp(i32 %7), !dbg !13667
  store i64 %call10, i64* %nprocs, align 8, !dbg !13665
  %8 = load i64, i64* %nprocs, align 8, !dbg !13668
  %9 = load i64, i64* %omp_env_limit, align 8, !dbg !13668
  %cmp11 = icmp ult i64 %8, %9, !dbg !13668
  br i1 %cmp11, label %cond.true12, label %cond.false13, !dbg !13668

cond.true12:                                      ; preds = %if.end9
  %10 = load i64, i64* %nprocs, align 8, !dbg !13668
  br label %cond.end14, !dbg !13668

cond.false13:                                     ; preds = %if.end9
  %11 = load i64, i64* %omp_env_limit, align 8, !dbg !13668
  br label %cond.end14, !dbg !13668

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i64 [ %10, %cond.true12 ], [ %11, %cond.false13 ], !dbg !13668
  store i64 %cond15, i64* %retval, align 8, !dbg !13669
  br label %return, !dbg !13669

return:                                           ; preds = %cond.end14, %cond.end
  %12 = load i64, i64* %retval, align 8, !dbg !13670
  ret i64 %12, !dbg !13670
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @parse_omp_threads(i8* %threads) #4 !dbg !13671 {
entry:
  %retval = alloca i64, align 8
  %threads.addr = alloca i8*, align 8
  %ret = alloca i64, align 8, !ctir !54
  %endptr = alloca i8*, align 8, !ctir !7
  %value = alloca i64, align 8, !ctir !54
  store i8* %threads, i8** %threads.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %threads.addr, metadata !13674, metadata !DIExpression()), !dbg !13675
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !13676, metadata !DIExpression()), !dbg !13677
  store i64 0, i64* %ret, align 8, !dbg !13677
  %0 = load i8*, i8** %threads.addr, align 8, !dbg !13678
  %cmp = icmp eq i8* %0, null, !dbg !13680
  br i1 %cmp, label %if.then, label %if.end, !dbg !13681

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %ret, align 8, !dbg !13682
  store i64 %1, i64* %retval, align 8, !dbg !13683
  br label %return, !dbg !13683

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !13684

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i8*, i8** %threads.addr, align 8, !dbg !13685
  %3 = load i8, i8* %2, align 1, !dbg !13686, !ctir !91
  %conv = sext i8 %3 to i32, !dbg !13686
  %cmp1 = icmp ne i32 %conv, 0, !dbg !13687
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !13688

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %threads.addr, align 8, !dbg !13689
  %5 = load i8, i8* %4, align 1, !dbg !13690, !ctir !91
  %conv3 = sext i8 %5 to i32, !dbg !13690
  %call = call zeroext i1 @c_isspace(i32 %conv3), !dbg !13691
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %call, %land.rhs ], !dbg !13692
  br i1 %6, label %while.body, label %while.end, !dbg !13684

while.body:                                       ; preds = %land.end
  %7 = load i8*, i8** %threads.addr, align 8, !dbg !13693
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !13693, !ctir !91
  store i8* %incdec.ptr, i8** %threads.addr, align 8, !dbg !13693
  br label %while.cond, !dbg !13684, !llvm.loop !13694

while.end:                                        ; preds = %land.end
  %8 = load i8*, i8** %threads.addr, align 8, !dbg !13695
  %9 = load i8, i8* %8, align 1, !dbg !13697, !ctir !91
  %conv5 = sext i8 %9 to i32, !dbg !13697
  %call6 = call zeroext i1 @c_isdigit(i32 %conv5), !dbg !13698
  br i1 %call6, label %if.then7, label %if.end35, !dbg !13699

if.then7:                                         ; preds = %while.end
  call void @llvm.dbg.declare(metadata i8** %endptr, metadata !13700, metadata !DIExpression()), !dbg !13702
  store i8* null, i8** %endptr, align 8, !dbg !13702
  call void @llvm.dbg.declare(metadata i64* %value, metadata !13703, metadata !DIExpression()), !dbg !13704
  %10 = load i8*, i8** %threads.addr, align 8, !dbg !13705
  %call8 = call i64 @strtoul(i8* %10, i8** %endptr, i32 10) #12, !dbg !13706
  store i64 %call8, i64* %value, align 8, !dbg !13704
  %11 = load i8*, i8** %endptr, align 8, !dbg !13707
  %cmp9 = icmp ne i8* %11, null, !dbg !13709
  br i1 %cmp9, label %if.then11, label %if.end34, !dbg !13710

if.then11:                                        ; preds = %if.then7
  br label %while.cond12, !dbg !13711

while.cond12:                                     ; preds = %while.body21, %if.then11
  %12 = load i8*, i8** %endptr, align 8, !dbg !13713
  %13 = load i8, i8* %12, align 1, !dbg !13714, !ctir !8
  %conv13 = sext i8 %13 to i32, !dbg !13714
  %cmp14 = icmp ne i32 %conv13, 0, !dbg !13715
  br i1 %cmp14, label %land.rhs16, label %land.end20, !dbg !13716

land.rhs16:                                       ; preds = %while.cond12
  %14 = load i8*, i8** %endptr, align 8, !dbg !13717
  %15 = load i8, i8* %14, align 1, !dbg !13718, !ctir !8
  %conv17 = sext i8 %15 to i32, !dbg !13718
  %call18 = call zeroext i1 @c_isspace(i32 %conv17), !dbg !13719
  br label %land.end20

land.end20:                                       ; preds = %land.rhs16, %while.cond12
  %16 = phi i1 [ false, %while.cond12 ], [ %call18, %land.rhs16 ], !dbg !13720
  br i1 %16, label %while.body21, label %while.end23, !dbg !13711

while.body21:                                     ; preds = %land.end20
  %17 = load i8*, i8** %endptr, align 8, !dbg !13721
  %incdec.ptr22 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !13721, !ctir !8
  store i8* %incdec.ptr22, i8** %endptr, align 8, !dbg !13721
  br label %while.cond12, !dbg !13711, !llvm.loop !13722

while.end23:                                      ; preds = %land.end20
  %18 = load i8*, i8** %endptr, align 8, !dbg !13723
  %19 = load i8, i8* %18, align 1, !dbg !13725, !ctir !8
  %conv24 = sext i8 %19 to i32, !dbg !13725
  %cmp25 = icmp eq i32 %conv24, 0, !dbg !13726
  br i1 %cmp25, label %if.then27, label %if.else, !dbg !13727

if.then27:                                        ; preds = %while.end23
  %20 = load i64, i64* %value, align 8, !dbg !13728
  store i64 %20, i64* %retval, align 8, !dbg !13729
  br label %return, !dbg !13729

if.else:                                          ; preds = %while.end23
  %21 = load i8*, i8** %endptr, align 8, !dbg !13730
  %22 = load i8, i8* %21, align 1, !dbg !13732, !ctir !8
  %conv28 = sext i8 %22 to i32, !dbg !13732
  %cmp29 = icmp eq i32 %conv28, 44, !dbg !13733
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !13734

if.then31:                                        ; preds = %if.else
  %23 = load i64, i64* %value, align 8, !dbg !13735
  store i64 %23, i64* %retval, align 8, !dbg !13736
  br label %return, !dbg !13736

if.end32:                                         ; preds = %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.end32
  br label %if.end34, !dbg !13737

if.end34:                                         ; preds = %if.end33, %if.then7
  br label %if.end35, !dbg !13738

if.end35:                                         ; preds = %if.end34, %while.end
  %24 = load i64, i64* %ret, align 8, !dbg !13739
  store i64 %24, i64* %retval, align 8, !dbg !13740
  br label %return, !dbg !13740

return:                                           ; preds = %if.end35, %if.then31, %if.then27, %if.then
  %25 = load i64, i64* %retval, align 8, !dbg !13741
  ret i64 %25, !dbg !13741
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @num_processors_ignoring_omp(i32 %query) #4 !dbg !13742 {
entry:
  %retval = alloca i64, align 8
  %query.addr = alloca i32, align 4
  %nprocs = alloca i64, align 8, !ctir !54
  %nprocs3 = alloca i64, align 8, !ctir !32
  %nprocs8 = alloca i64, align 8, !ctir !32
  %nprocs_current = alloca i64, align 8, !ctir !54
  store i32 %query, i32* %query.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %query.addr, metadata !13743, metadata !DIExpression()), !dbg !13744
  %0 = load i32, i32* %query.addr, align 4, !dbg !13745
  %cmp = icmp eq i32 %0, 1, !dbg !13747
  br i1 %cmp, label %if.then, label %if.else, !dbg !13748

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %nprocs, metadata !13749, metadata !DIExpression()), !dbg !13752
  %call = call i64 @num_processors_via_affinity_mask(), !dbg !13753
  store i64 %call, i64* %nprocs, align 8, !dbg !13752
  %1 = load i64, i64* %nprocs, align 8, !dbg !13754
  %cmp1 = icmp ugt i64 %1, 0, !dbg !13756
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !13757

if.then2:                                         ; preds = %if.then
  %2 = load i64, i64* %nprocs, align 8, !dbg !13758
  store i64 %2, i64* %retval, align 8, !dbg !13759
  br label %return, !dbg !13759

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %nprocs3, metadata !13760, metadata !DIExpression()), !dbg !13762
  %call4 = call i64 @sysconf(i32 84) #12, !dbg !13763
  store i64 %call4, i64* %nprocs3, align 8, !dbg !13762
  %3 = load i64, i64* %nprocs3, align 8, !dbg !13764
  %cmp5 = icmp sgt i64 %3, 0, !dbg !13766
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !13767

if.then6:                                         ; preds = %if.end
  %4 = load i64, i64* %nprocs3, align 8, !dbg !13768
  store i64 %4, i64* %retval, align 8, !dbg !13769
  br label %return, !dbg !13769

if.end7:                                          ; preds = %if.end
  br label %if.end21, !dbg !13770

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %nprocs8, metadata !13771, metadata !DIExpression()), !dbg !13774
  %call9 = call i64 @sysconf(i32 83) #12, !dbg !13775
  store i64 %call9, i64* %nprocs8, align 8, !dbg !13774
  %5 = load i64, i64* %nprocs8, align 8, !dbg !13776
  %cmp10 = icmp eq i64 %5, 1, !dbg !13778
  br i1 %cmp10, label %if.then12, label %lor.lhs.false, !dbg !13779

lor.lhs.false:                                    ; preds = %if.else
  %6 = load i64, i64* %nprocs8, align 8, !dbg !13780
  %cmp11 = icmp eq i64 %6, 2, !dbg !13781
  br i1 %cmp11, label %if.then12, label %if.end17, !dbg !13782

if.then12:                                        ; preds = %lor.lhs.false, %if.else
  call void @llvm.dbg.declare(metadata i64* %nprocs_current, metadata !13783, metadata !DIExpression()), !dbg !13785
  %call13 = call i64 @num_processors_via_affinity_mask(), !dbg !13786
  store i64 %call13, i64* %nprocs_current, align 8, !dbg !13785
  %7 = load i64, i64* %nprocs_current, align 8, !dbg !13787
  %8 = load i64, i64* %nprocs8, align 8, !dbg !13789
  %cmp14 = icmp ugt i64 %7, %8, !dbg !13790
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !13791

if.then15:                                        ; preds = %if.then12
  %9 = load i64, i64* %nprocs_current, align 8, !dbg !13792
  store i64 %9, i64* %nprocs8, align 8, !dbg !13793
  br label %if.end16, !dbg !13794

if.end16:                                         ; preds = %if.then15, %if.then12
  br label %if.end17, !dbg !13795

if.end17:                                         ; preds = %if.end16, %lor.lhs.false
  %10 = load i64, i64* %nprocs8, align 8, !dbg !13796
  %cmp18 = icmp sgt i64 %10, 0, !dbg !13798
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !13799

if.then19:                                        ; preds = %if.end17
  %11 = load i64, i64* %nprocs8, align 8, !dbg !13800
  store i64 %11, i64* %retval, align 8, !dbg !13801
  br label %return, !dbg !13801

if.end20:                                         ; preds = %if.end17
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end7
  store i64 1, i64* %retval, align 8, !dbg !13802
  br label %return, !dbg !13802

return:                                           ; preds = %if.end21, %if.then19, %if.then6, %if.then2
  %12 = load i64, i64* %retval, align 8, !dbg !13803
  ret i64 %12, !dbg !13803
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @num_processors_via_affinity_mask() #4 !dbg !13804 {
entry:
  %retval = alloca i64, align 8
  %set = alloca %struct.__sigset_t, align 8, !ctir !1293
  %count = alloca i64, align 8, !ctir !54
  call void @llvm.dbg.declare(metadata %struct.__sigset_t* %set, metadata !13807, metadata !DIExpression()), !dbg !13809
  %call = call i32 @sched_getaffinity(i32 0, i64 128, %struct.__sigset_t* %set) #12, !dbg !13810
  %cmp = icmp eq i32 %call, 0, !dbg !13812
  br i1 %cmp, label %if.then, label %if.end5, !dbg !13813

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %count, metadata !13814, metadata !DIExpression()), !dbg !13816
  %call1 = call i32 @__sched_cpucount(i64 128, %struct.__sigset_t* %set) #12, !dbg !13817
  %conv = sext i32 %call1 to i64, !dbg !13817
  store i64 %conv, i64* %count, align 8, !dbg !13818
  %0 = load i64, i64* %count, align 8, !dbg !13819
  %cmp2 = icmp ugt i64 %0, 0, !dbg !13821
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !13822

if.then4:                                         ; preds = %if.then
  %1 = load i64, i64* %count, align 8, !dbg !13823
  store i64 %1, i64* %retval, align 8, !dbg !13824
  br label %return, !dbg !13824

if.end:                                           ; preds = %if.then
  br label %if.end5, !dbg !13825

if.end5:                                          ; preds = %if.end, %entry
  store i64 0, i64* %retval, align 8, !dbg !13826
  br label %return, !dbg !13826

return:                                           ; preds = %if.end5, %if.then4
  %2 = load i64, i64* %retval, align 8, !dbg !13827
  ret i64 %2, !dbg !13827
}

; Function Attrs: nounwind
declare dso_local i64 @sysconf(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @sched_getaffinity(i32, i64, %struct.__sigset_t*) #2

; Function Attrs: nounwind
declare dso_local i32 @__sched_cpucount(i64, %struct.__sigset_t*) #2

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @physmem_total() #4 !dbg !13828 {
entry:
  %retval = alloca double, align 8
  %pages = alloca double, align 8, !ctir !480
  %pagesize = alloca double, align 8, !ctir !480
  %si = alloca %struct.sysinfo, align 8, !ctir !13832
  call void @llvm.dbg.declare(metadata double* %pages, metadata !13855, metadata !DIExpression()), !dbg !13857
  %call = call i64 @sysconf(i32 85) #12, !dbg !13858
  %conv = sitofp i64 %call to double, !dbg !13858
  store double %conv, double* %pages, align 8, !dbg !13857
  call void @llvm.dbg.declare(metadata double* %pagesize, metadata !13859, metadata !DIExpression()), !dbg !13860
  %call1 = call i64 @sysconf(i32 30) #12, !dbg !13861
  %conv2 = sitofp i64 %call1 to double, !dbg !13861
  store double %conv2, double* %pagesize, align 8, !dbg !13860
  %0 = load double, double* %pages, align 8, !dbg !13862
  %cmp = fcmp ole double 0.000000e+00, %0, !dbg !13864
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13865

land.lhs.true:                                    ; preds = %entry
  %1 = load double, double* %pagesize, align 8, !dbg !13866
  %cmp4 = fcmp ole double 0.000000e+00, %1, !dbg !13867
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13868

if.then:                                          ; preds = %land.lhs.true
  %2 = load double, double* %pages, align 8, !dbg !13869
  %3 = load double, double* %pagesize, align 8, !dbg !13870
  %mul = fmul double %2, %3, !dbg !13871
  store double %mul, double* %retval, align 8, !dbg !13872
  br label %return, !dbg !13872

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %struct.sysinfo* %si, metadata !13873, metadata !DIExpression()), !dbg !13875
  %call6 = call i32 @sysinfo(%struct.sysinfo* %si) #12, !dbg !13876
  %cmp7 = icmp eq i32 %call6, 0, !dbg !13878
  br i1 %cmp7, label %if.then9, label %if.end13, !dbg !13879

if.then9:                                         ; preds = %if.end
  %totalram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 2, !dbg !13880, !ctir !13832
  %4 = load i64, i64* %totalram, align 8, !dbg !13880, !ctir !1303
  %conv10 = uitofp i64 %4 to double, !dbg !13881
  %mem_unit = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 12, !dbg !13882, !ctir !13832
  %5 = load i32, i32* %mem_unit, align 8, !dbg !13882, !ctir !1305
  %conv11 = uitofp i32 %5 to double, !dbg !13883
  %mul12 = fmul double %conv10, %conv11, !dbg !13884
  store double %mul12, double* %retval, align 8, !dbg !13885
  br label %return, !dbg !13885

if.end13:                                         ; preds = %if.end
  store double 0x4190000000000000, double* %retval, align 8, !dbg !13886
  br label %return, !dbg !13886

return:                                           ; preds = %if.end13, %if.then9, %if.then
  %6 = load double, double* %retval, align 8, !dbg !13887
  ret double %6, !dbg !13887
}

; Function Attrs: nounwind
declare dso_local i32 @sysinfo(%struct.sysinfo*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @physmem_available() #4 !dbg !13888 {
entry:
  %retval = alloca double, align 8
  %pages = alloca double, align 8, !ctir !480
  %pagesize = alloca double, align 8, !ctir !480
  %si = alloca %struct.sysinfo, align 8, !ctir !13832
  call void @llvm.dbg.declare(metadata double* %pages, metadata !13889, metadata !DIExpression()), !dbg !13891
  %call = call i64 @sysconf(i32 86) #12, !dbg !13892
  %conv = sitofp i64 %call to double, !dbg !13892
  store double %conv, double* %pages, align 8, !dbg !13891
  call void @llvm.dbg.declare(metadata double* %pagesize, metadata !13893, metadata !DIExpression()), !dbg !13894
  %call1 = call i64 @sysconf(i32 30) #12, !dbg !13895
  %conv2 = sitofp i64 %call1 to double, !dbg !13895
  store double %conv2, double* %pagesize, align 8, !dbg !13894
  %0 = load double, double* %pages, align 8, !dbg !13896
  %cmp = fcmp ole double 0.000000e+00, %0, !dbg !13898
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13899

land.lhs.true:                                    ; preds = %entry
  %1 = load double, double* %pagesize, align 8, !dbg !13900
  %cmp4 = fcmp ole double 0.000000e+00, %1, !dbg !13901
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13902

if.then:                                          ; preds = %land.lhs.true
  %2 = load double, double* %pages, align 8, !dbg !13903
  %3 = load double, double* %pagesize, align 8, !dbg !13904
  %mul = fmul double %2, %3, !dbg !13905
  store double %mul, double* %retval, align 8, !dbg !13906
  br label %return, !dbg !13906

if.end:                                           ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %struct.sysinfo* %si, metadata !13907, metadata !DIExpression()), !dbg !13909
  %call6 = call i32 @sysinfo(%struct.sysinfo* %si) #12, !dbg !13910
  %cmp7 = icmp eq i32 %call6, 0, !dbg !13912
  br i1 %cmp7, label %if.then9, label %if.end14, !dbg !13913

if.then9:                                         ; preds = %if.end
  %freeram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 3, !dbg !13914, !ctir !13832
  %4 = load i64, i64* %freeram, align 8, !dbg !13914, !ctir !1303
  %conv10 = uitofp i64 %4 to double, !dbg !13915
  %bufferram = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 5, !dbg !13916, !ctir !13832
  %5 = load i64, i64* %bufferram, align 8, !dbg !13916, !ctir !1303
  %conv11 = uitofp i64 %5 to double, !dbg !13917
  %add = fadd double %conv10, %conv11, !dbg !13918
  %mem_unit = getelementptr inbounds %struct.sysinfo, %struct.sysinfo* %si, i32 0, i32 12, !dbg !13919, !ctir !13832
  %6 = load i32, i32* %mem_unit, align 8, !dbg !13919, !ctir !1305
  %conv12 = uitofp i32 %6 to double, !dbg !13920
  %mul13 = fmul double %add, %conv12, !dbg !13921
  store double %mul13, double* %retval, align 8, !dbg !13922
  br label %return, !dbg !13922

if.end14:                                         ; preds = %if.end
  %call15 = call double @physmem_total(), !dbg !13923
  %div = fdiv double %call15, 4.000000e+00, !dbg !13924
  store double %div, double* %retval, align 8, !dbg !13925
  br label %return, !dbg !13925

return:                                           ; preds = %if.end14, %if.then9, %if.then
  %7 = load double, double* %retval, align 8, !dbg !13926
  ret double %7, !dbg !13926
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_pipe2(i32* nonnull %fd, i32 %flags) #4 !dbg !988 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32*, align 8
  %flags.addr = alloca i32, align 4
  %tmp = alloca [2 x i32], align 4, !ctir !585
  %result = alloca i32, align 4, !ctir !5
  %fcntl_flags = alloca i32, align 4, !ctir !5
  %fcntl_flags40 = alloca i32, align 4, !ctir !5
  %saved_errno = alloca i32, align 4, !ctir !5
  store i32* %fd, i32** %fd.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %fd.addr, metadata !13927, metadata !DIExpression()), !dbg !13928
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13929, metadata !DIExpression()), !dbg !13930
  call void @llvm.dbg.declare(metadata [2 x i32]* %tmp, metadata !13931, metadata !DIExpression()), !dbg !13932
  %0 = load i32*, i32** %fd.addr, align 8, !dbg !13933
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0, !dbg !13933, !ctir !325
  %1 = load i32, i32* %arrayidx, align 4, !dbg !13933
  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 0, !dbg !13934, !ctir !585
  store i32 %1, i32* %arrayidx1, align 4, !dbg !13935
  %2 = load i32*, i32** %fd.addr, align 8, !dbg !13936
  %arrayidx2 = getelementptr inbounds i32, i32* %2, i64 1, !dbg !13936, !ctir !325
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !13936
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 1, !dbg !13937, !ctir !585
  store i32 %3, i32* %arrayidx3, align 4, !dbg !13938
  %4 = load i32, i32* @rpl_pipe2.have_pipe2_really, align 4, !dbg !13939
  %cmp = icmp sge i32 %4, 0, !dbg !13942
  br i1 %cmp, label %if.then, label %if.end8, !dbg !13943

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %result, metadata !13944, metadata !DIExpression()), !dbg !13946
  %5 = load i32*, i32** %fd.addr, align 8, !dbg !13947
  %6 = load i32, i32* %flags.addr, align 4, !dbg !13948
  %call = call i32 @pipe2(i32* %5, i32 %6) #12, !dbg !13949
  store i32 %call, i32* %result, align 4, !dbg !13946
  %7 = load i32, i32* %result, align 4, !dbg !13950
  %cmp4 = icmp slt i32 %7, 0, !dbg !13952
  br i1 %cmp4, label %land.lhs.true, label %if.then7, !dbg !13953

land.lhs.true:                                    ; preds = %if.then
  %call5 = call i32* @__errno_location() #16, !dbg !13954
  %8 = load i32, i32* %call5, align 4, !dbg !13954, !ctir !5
  %cmp6 = icmp eq i32 %8, 38, !dbg !13955
  br i1 %cmp6, label %if.end, label %if.then7, !dbg !13956

if.then7:                                         ; preds = %land.lhs.true, %if.then
  store i32 1, i32* @rpl_pipe2.have_pipe2_really, align 4, !dbg !13957
  %9 = load i32, i32* %result, align 4, !dbg !13959
  store i32 %9, i32* %retval, align 4, !dbg !13960
  br label %return, !dbg !13960

if.end:                                           ; preds = %land.lhs.true
  store i32 -1, i32* @rpl_pipe2.have_pipe2_really, align 4, !dbg !13961
  br label %if.end8, !dbg !13962

if.end8:                                          ; preds = %if.end, %entry
  %10 = load i32, i32* %flags.addr, align 4, !dbg !13963
  %and = and i32 %10, -526337, !dbg !13965
  %cmp9 = icmp ne i32 %and, 0, !dbg !13966
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !13967

if.then10:                                        ; preds = %if.end8
  %call11 = call i32* @__errno_location() #16, !dbg !13968
  store i32 22, i32* %call11, align 4, !dbg !13970, !ctir !5
  store i32 -1, i32* %retval, align 4, !dbg !13971
  br label %return, !dbg !13971

if.end12:                                         ; preds = %if.end8
  %11 = load i32*, i32** %fd.addr, align 8, !dbg !13972
  %call13 = call i32 @pipe(i32* %11) #12, !dbg !13974
  %cmp14 = icmp slt i32 %call13, 0, !dbg !13975
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !13976

if.then15:                                        ; preds = %if.end12
  store i32 -1, i32* %retval, align 4, !dbg !13977
  br label %return, !dbg !13977

if.end16:                                         ; preds = %if.end12
  %12 = load i32, i32* %flags.addr, align 4, !dbg !13978
  %and17 = and i32 %12, 2048, !dbg !13980
  %tobool = icmp ne i32 %and17, 0, !dbg !13980
  br i1 %tobool, label %if.then18, label %if.end36, !dbg !13981

if.then18:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata i32* %fcntl_flags, metadata !13982, metadata !DIExpression()), !dbg !13984
  %13 = load i32*, i32** %fd.addr, align 8, !dbg !13985
  %arrayidx19 = getelementptr inbounds i32, i32* %13, i64 1, !dbg !13985, !ctir !325
  %14 = load i32, i32* %arrayidx19, align 4, !dbg !13985
  %call20 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %14, i32 3, i32 0), !dbg !13987
  store i32 %call20, i32* %fcntl_flags, align 4, !dbg !13988
  %cmp21 = icmp slt i32 %call20, 0, !dbg !13989
  br i1 %cmp21, label %if.then34, label %lor.lhs.false, !dbg !13990

lor.lhs.false:                                    ; preds = %if.then18
  %15 = load i32*, i32** %fd.addr, align 8, !dbg !13991
  %arrayidx22 = getelementptr inbounds i32, i32* %15, i64 1, !dbg !13991, !ctir !325
  %16 = load i32, i32* %arrayidx22, align 4, !dbg !13991
  %17 = load i32, i32* %fcntl_flags, align 4, !dbg !13992
  %or = or i32 %17, 2048, !dbg !13993
  %call23 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %16, i32 4, i32 %or), !dbg !13994
  %cmp24 = icmp eq i32 %call23, -1, !dbg !13995
  br i1 %cmp24, label %if.then34, label %lor.lhs.false25, !dbg !13996

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %18 = load i32*, i32** %fd.addr, align 8, !dbg !13997
  %arrayidx26 = getelementptr inbounds i32, i32* %18, i64 0, !dbg !13997, !ctir !325
  %19 = load i32, i32* %arrayidx26, align 4, !dbg !13997
  %call27 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %19, i32 3, i32 0), !dbg !13998
  store i32 %call27, i32* %fcntl_flags, align 4, !dbg !13999
  %cmp28 = icmp slt i32 %call27, 0, !dbg !14000
  br i1 %cmp28, label %if.then34, label %lor.lhs.false29, !dbg !14001

lor.lhs.false29:                                  ; preds = %lor.lhs.false25
  %20 = load i32*, i32** %fd.addr, align 8, !dbg !14002
  %arrayidx30 = getelementptr inbounds i32, i32* %20, i64 0, !dbg !14002, !ctir !325
  %21 = load i32, i32* %arrayidx30, align 4, !dbg !14002
  %22 = load i32, i32* %fcntl_flags, align 4, !dbg !14003
  %or31 = or i32 %22, 2048, !dbg !14004
  %call32 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %21, i32 4, i32 %or31), !dbg !14005
  %cmp33 = icmp eq i32 %call32, -1, !dbg !14006
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !14007

if.then34:                                        ; preds = %lor.lhs.false29, %lor.lhs.false25, %lor.lhs.false, %if.then18
  br label %fail, !dbg !14008

if.end35:                                         ; preds = %lor.lhs.false29
  br label %if.end36, !dbg !14009

if.end36:                                         ; preds = %if.end35, %if.end16
  %23 = load i32, i32* %flags.addr, align 4, !dbg !14010
  %and37 = and i32 %23, 524288, !dbg !14012
  %tobool38 = icmp ne i32 %and37, 0, !dbg !14012
  br i1 %tobool38, label %if.then39, label %if.end60, !dbg !14013

if.then39:                                        ; preds = %if.end36
  call void @llvm.dbg.declare(metadata i32* %fcntl_flags40, metadata !14014, metadata !DIExpression()), !dbg !14016
  %24 = load i32*, i32** %fd.addr, align 8, !dbg !14017
  %arrayidx41 = getelementptr inbounds i32, i32* %24, i64 1, !dbg !14017, !ctir !325
  %25 = load i32, i32* %arrayidx41, align 4, !dbg !14017
  %call42 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %25, i32 1, i32 0), !dbg !14019
  store i32 %call42, i32* %fcntl_flags40, align 4, !dbg !14020
  %cmp43 = icmp slt i32 %call42, 0, !dbg !14021
  br i1 %cmp43, label %if.then58, label %lor.lhs.false44, !dbg !14022

lor.lhs.false44:                                  ; preds = %if.then39
  %26 = load i32*, i32** %fd.addr, align 8, !dbg !14023
  %arrayidx45 = getelementptr inbounds i32, i32* %26, i64 1, !dbg !14023, !ctir !325
  %27 = load i32, i32* %arrayidx45, align 4, !dbg !14023
  %28 = load i32, i32* %fcntl_flags40, align 4, !dbg !14024
  %or46 = or i32 %28, 1, !dbg !14025
  %call47 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %27, i32 2, i32 %or46), !dbg !14026
  %cmp48 = icmp eq i32 %call47, -1, !dbg !14027
  br i1 %cmp48, label %if.then58, label %lor.lhs.false49, !dbg !14028

lor.lhs.false49:                                  ; preds = %lor.lhs.false44
  %29 = load i32*, i32** %fd.addr, align 8, !dbg !14029
  %arrayidx50 = getelementptr inbounds i32, i32* %29, i64 0, !dbg !14029, !ctir !325
  %30 = load i32, i32* %arrayidx50, align 4, !dbg !14029
  %call51 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %30, i32 1, i32 0), !dbg !14030
  store i32 %call51, i32* %fcntl_flags40, align 4, !dbg !14031
  %cmp52 = icmp slt i32 %call51, 0, !dbg !14032
  br i1 %cmp52, label %if.then58, label %lor.lhs.false53, !dbg !14033

lor.lhs.false53:                                  ; preds = %lor.lhs.false49
  %31 = load i32*, i32** %fd.addr, align 8, !dbg !14034
  %arrayidx54 = getelementptr inbounds i32, i32* %31, i64 0, !dbg !14034, !ctir !325
  %32 = load i32, i32* %arrayidx54, align 4, !dbg !14034
  %33 = load i32, i32* %fcntl_flags40, align 4, !dbg !14035
  %or55 = or i32 %33, 1, !dbg !14036
  %call56 = call i32 (i32, i32, ...) @rpl_fcntl(i32 %32, i32 2, i32 %or55), !dbg !14037
  %cmp57 = icmp eq i32 %call56, -1, !dbg !14038
  br i1 %cmp57, label %if.then58, label %if.end59, !dbg !14039

if.then58:                                        ; preds = %lor.lhs.false53, %lor.lhs.false49, %lor.lhs.false44, %if.then39
  br label %fail, !dbg !14040

if.end59:                                         ; preds = %lor.lhs.false53
  br label %if.end60, !dbg !14041

if.end60:                                         ; preds = %if.end59, %if.end36
  store i32 0, i32* %retval, align 4, !dbg !14042
  br label %return, !dbg !14042

fail:                                             ; preds = %if.then58, %if.then34
  call void @llvm.dbg.label(metadata !14043), !dbg !14044
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !14045, metadata !DIExpression()), !dbg !14047
  %call61 = call i32* @__errno_location() #16, !dbg !14048
  %34 = load i32, i32* %call61, align 4, !dbg !14048, !ctir !5
  store i32 %34, i32* %saved_errno, align 4, !dbg !14047
  %35 = load i32*, i32** %fd.addr, align 8, !dbg !14049
  %arrayidx62 = getelementptr inbounds i32, i32* %35, i64 0, !dbg !14049, !ctir !325
  %36 = load i32, i32* %arrayidx62, align 4, !dbg !14049
  %call63 = call i32 @close(i32 %36), !dbg !14050
  %37 = load i32*, i32** %fd.addr, align 8, !dbg !14051
  %arrayidx64 = getelementptr inbounds i32, i32* %37, i64 1, !dbg !14051, !ctir !325
  %38 = load i32, i32* %arrayidx64, align 4, !dbg !14051
  %call65 = call i32 @close(i32 %38), !dbg !14052
  %arrayidx66 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 0, !dbg !14053, !ctir !585
  %39 = load i32, i32* %arrayidx66, align 4, !dbg !14053
  %40 = load i32*, i32** %fd.addr, align 8, !dbg !14054
  %arrayidx67 = getelementptr inbounds i32, i32* %40, i64 0, !dbg !14054, !ctir !325
  store i32 %39, i32* %arrayidx67, align 4, !dbg !14055
  %arrayidx68 = getelementptr inbounds [2 x i32], [2 x i32]* %tmp, i64 0, i64 1, !dbg !14056, !ctir !585
  %41 = load i32, i32* %arrayidx68, align 4, !dbg !14056
  %42 = load i32*, i32** %fd.addr, align 8, !dbg !14057
  %arrayidx69 = getelementptr inbounds i32, i32* %42, i64 1, !dbg !14057, !ctir !325
  store i32 %41, i32* %arrayidx69, align 4, !dbg !14058
  %43 = load i32, i32* %saved_errno, align 4, !dbg !14059
  %call70 = call i32* @__errno_location() #16, !dbg !14060
  store i32 %43, i32* %call70, align 4, !dbg !14061, !ctir !5
  store i32 -1, i32* %retval, align 4, !dbg !14062
  br label %return, !dbg !14062

return:                                           ; preds = %fail, %if.end60, %if.then15, %if.then10, %if.then7
  %44 = load i32, i32* %retval, align 4, !dbg !14063
  ret i32 %44, !dbg !14063
}

; Function Attrs: nounwind
declare dso_local i32 @pipe2(i32*, i32) #2

; Function Attrs: nounwind
declare dso_local i32 @pipe(i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @posix2_version() #4 !dbg !14064 {
entry:
  %v = alloca i64, align 8, !ctir !32
  %s = alloca i8*, align 8, !ctir !90
  %e = alloca i8*, align 8, !ctir !7
  %i = alloca i64, align 8, !ctir !32
  call void @llvm.dbg.declare(metadata i64* %v, metadata !14067, metadata !DIExpression()), !dbg !14068
  store i64 200809, i64* %v, align 8, !dbg !14068
  call void @llvm.dbg.declare(metadata i8** %s, metadata !14069, metadata !DIExpression()), !dbg !14070
  %call = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.241, i64 0, i64 0)) #12, !dbg !14071
  store i8* %call, i8** %s, align 8, !dbg !14070
  %0 = load i8*, i8** %s, align 8, !dbg !14072
  %tobool = icmp ne i8* %0, null, !dbg !14072
  br i1 %tobool, label %land.lhs.true, label %if.end5, !dbg !14074

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %s, align 8, !dbg !14075
  %2 = load i8, i8* %1, align 1, !dbg !14076, !ctir !91
  %conv = sext i8 %2 to i32, !dbg !14076
  %tobool1 = icmp ne i32 %conv, 0, !dbg !14076
  br i1 %tobool1, label %if.then, label %if.end5, !dbg !14077

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %e, metadata !14078, metadata !DIExpression()), !dbg !14080
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14081, metadata !DIExpression()), !dbg !14082
  %3 = load i8*, i8** %s, align 8, !dbg !14083
  %call2 = call i64 @strtol(i8* %3, i8** %e, i32 10) #12, !dbg !14084
  store i64 %call2, i64* %i, align 8, !dbg !14082
  %4 = load i8*, i8** %e, align 8, !dbg !14085
  %5 = load i8, i8* %4, align 1, !dbg !14087, !ctir !8
  %tobool3 = icmp ne i8 %5, 0, !dbg !14087
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !14088

if.then4:                                         ; preds = %if.then
  %6 = load i64, i64* %i, align 8, !dbg !14089
  store i64 %6, i64* %v, align 8, !dbg !14090
  br label %if.end, !dbg !14091

if.end:                                           ; preds = %if.then4, %if.then
  br label %if.end5, !dbg !14092

if.end5:                                          ; preds = %if.end, %land.lhs.true, %entry
  %7 = load i64, i64* %v, align 8, !dbg !14093
  %cmp = icmp slt i64 %7, -2147483648, !dbg !14094
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !14093

cond.true:                                        ; preds = %if.end5
  br label %cond.end11, !dbg !14093

cond.false:                                       ; preds = %if.end5
  %8 = load i64, i64* %v, align 8, !dbg !14095
  %cmp7 = icmp slt i64 %8, 2147483647, !dbg !14096
  br i1 %cmp7, label %cond.true9, label %cond.false10, !dbg !14095

cond.true9:                                       ; preds = %cond.false
  %9 = load i64, i64* %v, align 8, !dbg !14097
  br label %cond.end, !dbg !14095

cond.false10:                                     ; preds = %cond.false
  br label %cond.end, !dbg !14095

cond.end:                                         ; preds = %cond.false10, %cond.true9
  %cond = phi i64 [ %9, %cond.true9 ], [ 2147483647, %cond.false10 ], !dbg !14095
  br label %cond.end11, !dbg !14093

cond.end11:                                       ; preds = %cond.end, %cond.true
  %cond12 = phi i64 [ -2147483648, %cond.true ], [ %cond, %cond.end ], !dbg !14093
  %conv13 = trunc i64 %cond12 to i32, !dbg !14093
  ret i32 %conv13, !dbg !14098
}

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_program_name(i8* %argv0) #4 !dbg !14099 {
entry:
  %argv0.addr = alloca i8*, align 8
  %slash = alloca i8*, align 8, !ctir !90
  %base = alloca i8*, align 8, !ctir !90
  store i8* %argv0, i8** %argv0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %argv0.addr, metadata !14100, metadata !DIExpression()), !dbg !14101
  call void @llvm.dbg.declare(metadata i8** %slash, metadata !14102, metadata !DIExpression()), !dbg !14103
  call void @llvm.dbg.declare(metadata i8** %base, metadata !14104, metadata !DIExpression()), !dbg !14105
  %0 = load i8*, i8** %argv0.addr, align 8, !dbg !14106
  %cmp = icmp eq i8* %0, null, !dbg !14108
  br i1 %cmp, label %if.then, label %if.end, !dbg !14109

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !14110
  %call = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.246, i64 0, i64 0), %struct._IO_FILE* %1), !dbg !14112
  call void @abort() #13, !dbg !14113
  unreachable, !dbg !14113

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %argv0.addr, align 8, !dbg !14114
  %call1 = call i8* @strrchr(i8* %2, i32 47) #14, !dbg !14115
  store i8* %call1, i8** %slash, align 8, !dbg !14116
  %3 = load i8*, i8** %slash, align 8, !dbg !14117
  %cmp2 = icmp ne i8* %3, null, !dbg !14118
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !14117

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %slash, align 8, !dbg !14119
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 1, !dbg !14120, !ctir !91
  br label %cond.end, !dbg !14117

cond.false:                                       ; preds = %if.end
  %5 = load i8*, i8** %argv0.addr, align 8, !dbg !14121
  br label %cond.end, !dbg !14117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %5, %cond.false ], !dbg !14117
  store i8* %cond, i8** %base, align 8, !dbg !14122
  %6 = load i8*, i8** %base, align 8, !dbg !14123
  %7 = load i8*, i8** %argv0.addr, align 8, !dbg !14125
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !14126
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64, !dbg !14126
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !14126
  %cmp3 = icmp sge i64 %sub.ptr.sub, 7, !dbg !14127
  br i1 %cmp3, label %land.lhs.true, label %if.end13, !dbg !14128

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i8*, i8** %base, align 8, !dbg !14129
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 -7, !dbg !14130, !ctir !91
  %call5 = call i32 @strncmp(i8* %add.ptr4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.247, i64 0, i64 0), i64 7) #14, !dbg !14131
  %cmp6 = icmp eq i32 %call5, 0, !dbg !14132
  br i1 %cmp6, label %if.then7, label %if.end13, !dbg !14133

if.then7:                                         ; preds = %land.lhs.true
  %9 = load i8*, i8** %base, align 8, !dbg !14134
  store i8* %9, i8** %argv0.addr, align 8, !dbg !14136
  %10 = load i8*, i8** %base, align 8, !dbg !14137
  %call8 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.248, i64 0, i64 0), i64 3) #14, !dbg !14139
  %cmp9 = icmp eq i32 %call8, 0, !dbg !14140
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !14141

if.then10:                                        ; preds = %if.then7
  %11 = load i8*, i8** %base, align 8, !dbg !14142
  %add.ptr11 = getelementptr inbounds i8, i8* %11, i64 3, !dbg !14144, !ctir !91
  store i8* %add.ptr11, i8** %argv0.addr, align 8, !dbg !14145
  %12 = load i8*, i8** %argv0.addr, align 8, !dbg !14146
  store i8* %12, i8** @program_invocation_short_name, align 8, !dbg !14147
  br label %if.end12, !dbg !14148

if.end12:                                         ; preds = %if.then10, %if.then7
  br label %if.end13, !dbg !14149

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %cond.end
  %13 = load i8*, i8** %argv0.addr, align 8, !dbg !14150
  store i8* %13, i8** @program_name, align 8, !dbg !14151
  %14 = load i8*, i8** %argv0.addr, align 8, !dbg !14152
  store i8* %14, i8** @program_invocation_name, align 8, !dbg !14153
  ret void, !dbg !14154
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* %o) #4 !dbg !14155 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4, !ctir !5
  %p = alloca %struct.quoting_options*, align 8, !ctir !1064
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14158, metadata !DIExpression()), !dbg !14159
  call void @llvm.dbg.declare(metadata i32* %e, metadata !14160, metadata !DIExpression()), !dbg !14161
  %call = call i32* @__errno_location() #16, !dbg !14162
  %0 = load i32, i32* %call, align 4, !dbg !14162, !ctir !5
  store i32 %0, i32* %e, align 4, !dbg !14161
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !14163, metadata !DIExpression()), !dbg !14164
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14165
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !14165
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14165

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14166
  br label %cond.end, !dbg !14165

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !14165
  %3 = bitcast %struct.quoting_options* %cond to i8*, !dbg !14165
  %call1 = call i8* @xmemdup(i8* %3, i64 56), !dbg !14167
  %4 = bitcast i8* %call1 to %struct.quoting_options*, !dbg !14167
  store %struct.quoting_options* %4, %struct.quoting_options** %p, align 8, !dbg !14164
  %5 = load i32, i32* %e, align 4, !dbg !14168
  %call2 = call i32* @__errno_location() #16, !dbg !14169
  store i32 %5, i32* %call2, align 4, !dbg !14170, !ctir !5
  %6 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14171
  ret %struct.quoting_options* %6, !dbg !14172
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_quoting_style(%struct.quoting_options* %o) #4 !dbg !14173 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14176, metadata !DIExpression()), !dbg !14177
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14178
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !14178
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14178

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14179
  br label %cond.end, !dbg !14178

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14178

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !14178
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0, !dbg !14180, !ctir !1076
  %2 = load i32, i32* %style, align 8, !dbg !14180, !ctir !1046
  ret i32 %2, !dbg !14181
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_quoting_style(%struct.quoting_options* %o, i32 %s) #4 !dbg !14182 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %s.addr = alloca i32, align 4
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14185, metadata !DIExpression()), !dbg !14186
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !14187, metadata !DIExpression()), !dbg !14188
  %0 = load i32, i32* %s.addr, align 4, !dbg !14189
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14190
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !14190
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14190

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14191
  br label %cond.end, !dbg !14190

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14190

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !14190
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 0, !dbg !14192, !ctir !1065
  store i32 %0, i32* %style, align 8, !dbg !14193, !ctir !1046
  ret void, !dbg !14194
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_char_quoting(%struct.quoting_options* %o, i8 signext %c, i32 %i) #4 !dbg !14195 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %c.addr = alloca i8, align 1
  %i.addr = alloca i32, align 4
  %uc = alloca i8, align 1, !ctir !535
  %p = alloca i32*, align 8, !ctir !1074
  %shift = alloca i32, align 4, !ctir !5
  %r = alloca i32, align 4, !ctir !5
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14198, metadata !DIExpression()), !dbg !14199
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !14200, metadata !DIExpression()), !dbg !14201
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !14202, metadata !DIExpression()), !dbg !14203
  call void @llvm.dbg.declare(metadata i8* %uc, metadata !14204, metadata !DIExpression()), !dbg !14205
  %0 = load i8, i8* %c.addr, align 1, !dbg !14206
  store i8 %0, i8* %uc, align 1, !dbg !14205
  call void @llvm.dbg.declare(metadata i32** %p, metadata !14207, metadata !DIExpression()), !dbg !14208
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14209
  %tobool = icmp ne %struct.quoting_options* %1, null, !dbg !14209
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14209

cond.true:                                        ; preds = %entry
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14210
  br label %cond.end, !dbg !14209

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14209

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %2, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !14209
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %cond, i32 0, i32 2, !dbg !14211, !ctir !1065
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !14212, !ctir !1071
  %3 = load i8, i8* %uc, align 1, !dbg !14213
  %conv = zext i8 %3 to i64, !dbg !14213
  %div = udiv i64 %conv, 32, !dbg !14214
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i64 %div, !dbg !14215, !ctir !66
  store i32* %add.ptr, i32** %p, align 8, !dbg !14208
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !14216, metadata !DIExpression()), !dbg !14217
  %4 = load i8, i8* %uc, align 1, !dbg !14218
  %conv1 = zext i8 %4 to i64, !dbg !14218
  %rem = urem i64 %conv1, 32, !dbg !14219
  %conv2 = trunc i64 %rem to i32, !dbg !14218
  store i32 %conv2, i32* %shift, align 4, !dbg !14217
  call void @llvm.dbg.declare(metadata i32* %r, metadata !14220, metadata !DIExpression()), !dbg !14221
  %5 = load i32*, i32** %p, align 8, !dbg !14222
  %6 = load i32, i32* %5, align 4, !dbg !14223, !ctir !66
  %7 = load i32, i32* %shift, align 4, !dbg !14224
  %shr = lshr i32 %6, %7, !dbg !14225
  %and = and i32 %shr, 1, !dbg !14226
  store i32 %and, i32* %r, align 4, !dbg !14221
  %8 = load i32, i32* %i.addr, align 4, !dbg !14227
  %and3 = and i32 %8, 1, !dbg !14228
  %9 = load i32, i32* %r, align 4, !dbg !14229
  %xor = xor i32 %and3, %9, !dbg !14230
  %10 = load i32, i32* %shift, align 4, !dbg !14231
  %shl = shl i32 %xor, %10, !dbg !14232
  %11 = load i32*, i32** %p, align 8, !dbg !14233
  %12 = load i32, i32* %11, align 4, !dbg !14234, !ctir !66
  %xor4 = xor i32 %12, %shl, !dbg !14234
  store i32 %xor4, i32* %11, align 4, !dbg !14234, !ctir !66
  %13 = load i32, i32* %r, align 4, !dbg !14235
  ret i32 %13, !dbg !14236
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_quoting_flags(%struct.quoting_options* %o, i32 %i) #4 !dbg !14237 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %i.addr = alloca i32, align 4
  %r = alloca i32, align 4, !ctir !5
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14240, metadata !DIExpression()), !dbg !14241
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !14242, metadata !DIExpression()), !dbg !14243
  call void @llvm.dbg.declare(metadata i32* %r, metadata !14244, metadata !DIExpression()), !dbg !14245
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14246
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !14246
  br i1 %tobool, label %if.end, label %if.then, !dbg !14248

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !dbg !14249
  br label %if.end, !dbg !14250

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14251
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %1, i32 0, i32 1, !dbg !14252, !ctir !1065
  %2 = load i32, i32* %flags, align 4, !dbg !14252, !ctir !5
  store i32 %2, i32* %r, align 4, !dbg !14253
  %3 = load i32, i32* %i.addr, align 4, !dbg !14254
  %4 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14255
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %4, i32 0, i32 1, !dbg !14256, !ctir !1065
  store i32 %3, i32* %flags1, align 4, !dbg !14257, !ctir !5
  %5 = load i32, i32* %r, align 4, !dbg !14258
  ret i32 %5, !dbg !14259
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_custom_quoting(%struct.quoting_options* %o, i8* %left_quote, i8* %right_quote) #4 !dbg !14260 {
entry:
  %o.addr = alloca %struct.quoting_options*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14263, metadata !DIExpression()), !dbg !14264
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !14265, metadata !DIExpression()), !dbg !14266
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !14267, metadata !DIExpression()), !dbg !14268
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14269
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !14269
  br i1 %tobool, label %if.end, label %if.then, !dbg !14271

if.then:                                          ; preds = %entry
  store %struct.quoting_options* @default_quoting_options, %struct.quoting_options** %o.addr, align 8, !dbg !14272
  br label %if.end, !dbg !14273

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14274
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %1, i32 0, i32 0, !dbg !14275, !ctir !1065
  store i32 10, i32* %style, align 8, !dbg !14276, !ctir !1046
  %2 = load i8*, i8** %left_quote.addr, align 8, !dbg !14277
  %tobool1 = icmp ne i8* %2, null, !dbg !14277
  br i1 %tobool1, label %lor.lhs.false, label %if.then3, !dbg !14279

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8*, i8** %right_quote.addr, align 8, !dbg !14280
  %tobool2 = icmp ne i8* %3, null, !dbg !14280
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !14281

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void @abort() #13, !dbg !14282
  unreachable, !dbg !14282

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load i8*, i8** %left_quote.addr, align 8, !dbg !14283
  %5 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14284
  %left_quote5 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %5, i32 0, i32 3, !dbg !14285, !ctir !1065
  store i8* %4, i8** %left_quote5, align 8, !dbg !14286, !ctir !90
  %6 = load i8*, i8** %right_quote.addr, align 8, !dbg !14287
  %7 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14288
  %right_quote6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i32 0, i32 4, !dbg !14289, !ctir !1065
  store i8* %6, i8** %right_quote6, align 8, !dbg !14290, !ctir !90
  ret void, !dbg !14291
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @quotearg_buffer(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, %struct.quoting_options* %o) #4 !dbg !14292 {
entry:
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8, !ctir !1075
  %e = alloca i32, align 4, !ctir !5
  %r = alloca i64, align 8, !ctir !52
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !14295, metadata !DIExpression()), !dbg !14296
  store i64 %buffersize, i64* %buffersize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffersize.addr, metadata !14297, metadata !DIExpression()), !dbg !14298
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !14299, metadata !DIExpression()), !dbg !14300
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !14301, metadata !DIExpression()), !dbg !14302
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !14303, metadata !DIExpression()), !dbg !14304
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !14305, metadata !DIExpression()), !dbg !14306
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14307
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !14307
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14307

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !14308
  br label %cond.end, !dbg !14307

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14307

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !14307
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !dbg !14306
  call void @llvm.dbg.declare(metadata i32* %e, metadata !14309, metadata !DIExpression()), !dbg !14310
  %call = call i32* @__errno_location() #16, !dbg !14311
  %2 = load i32, i32* %call, align 4, !dbg !14311, !ctir !5
  store i32 %2, i32* %e, align 4, !dbg !14310
  call void @llvm.dbg.declare(metadata i64* %r, metadata !14312, metadata !DIExpression()), !dbg !14313
  %3 = load i8*, i8** %buffer.addr, align 8, !dbg !14314
  %4 = load i64, i64* %buffersize.addr, align 8, !dbg !14315
  %5 = load i8*, i8** %arg.addr, align 8, !dbg !14316
  %6 = load i64, i64* %argsize.addr, align 8, !dbg !14317
  %7 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14318
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %7, i32 0, i32 0, !dbg !14319, !ctir !1076
  %8 = load i32, i32* %style, align 8, !dbg !14319, !ctir !1046
  %9 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14320
  %flags = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %9, i32 0, i32 1, !dbg !14321, !ctir !1076
  %10 = load i32, i32* %flags, align 4, !dbg !14321, !ctir !5
  %11 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14322
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %11, i32 0, i32 2, !dbg !14323, !ctir !1076
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !14322, !ctir !1077
  %12 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14324
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 3, !dbg !14325, !ctir !1076
  %13 = load i8*, i8** %left_quote, align 8, !dbg !14325, !ctir !90
  %14 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !14326
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %14, i32 0, i32 4, !dbg !14327, !ctir !1076
  %15 = load i8*, i8** %right_quote, align 8, !dbg !14327, !ctir !90
  %call1 = call i64 @quotearg_buffer_restyled(i8* %3, i64 %4, i8* %5, i64 %6, i32 %8, i32 %10, i32* %arraydecay, i8* %13, i8* %15), !dbg !14328
  store i64 %call1, i64* %r, align 8, !dbg !14313
  %16 = load i32, i32* %e, align 4, !dbg !14329
  %call2 = call i32* @__errno_location() #16, !dbg !14330
  store i32 %16, i32* %call2, align 4, !dbg !14331, !ctir !5
  %17 = load i64, i64* %r, align 8, !dbg !14332
  ret i64 %17, !dbg !14333
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8* %buffer, i64 %buffersize, i8* %arg, i64 %argsize, i32 %quoting_style, i32 %flags, i32* %quote_these_too, i8* %left_quote, i8* %right_quote) #4 !dbg !14334 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %quoting_style.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %quote_these_too.addr = alloca i32*, align 8
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %i = alloca i64, align 8, !ctir !52
  %len = alloca i64, align 8, !ctir !52
  %orig_buffersize = alloca i64, align 8, !ctir !52
  %quote_string = alloca i8*, align 8, !ctir !90
  %quote_string_len = alloca i64, align 8, !ctir !52
  %backslash_escapes = alloca i8, align 1, !ctir !162
  %unibyte_locale = alloca i8, align 1, !ctir !162
  %elide_outer_quotes = alloca i8, align 1, !ctir !162
  %pending_shell_escape_end = alloca i8, align 1, !ctir !162
  %encountered_single_quote = alloca i8, align 1, !ctir !162
  %all_c_and_shell_quote_compat = alloca i8, align 1, !ctir !162
  %c = alloca i8, align 1, !ctir !535
  %esc = alloca i8, align 1, !ctir !535
  %is_right_quote = alloca i8, align 1, !ctir !162
  %escaping = alloca i8, align 1, !ctir !162
  %c_and_shell_quote_compat = alloca i8, align 1, !ctir !162
  %m = alloca i64, align 8, !ctir !52
  %printable = alloca i8, align 1, !ctir !162
  %mbstate = alloca %struct.__mbstate_t, align 4, !ctir !1083
  %w = alloca i32, align 4, !ctir !1094
  %bytes = alloca i64, align 8, !ctir !52
  %j = alloca i64, align 8, !ctir !52
  %ilim = alloca i64, align 8, !ctir !52
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !14337, metadata !DIExpression()), !dbg !14338
  store i64 %buffersize, i64* %buffersize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buffersize.addr, metadata !14339, metadata !DIExpression()), !dbg !14340
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !14341, metadata !DIExpression()), !dbg !14342
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !14343, metadata !DIExpression()), !dbg !14344
  store i32 %quoting_style, i32* %quoting_style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %quoting_style.addr, metadata !14345, metadata !DIExpression()), !dbg !14346
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14347, metadata !DIExpression()), !dbg !14348
  store i32* %quote_these_too, i32** %quote_these_too.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %quote_these_too.addr, metadata !14349, metadata !DIExpression()), !dbg !14350
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !14351, metadata !DIExpression()), !dbg !14352
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !14353, metadata !DIExpression()), !dbg !14354
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14355, metadata !DIExpression()), !dbg !14356
  call void @llvm.dbg.declare(metadata i64* %len, metadata !14357, metadata !DIExpression()), !dbg !14358
  store i64 0, i64* %len, align 8, !dbg !14358
  call void @llvm.dbg.declare(metadata i64* %orig_buffersize, metadata !14359, metadata !DIExpression()), !dbg !14360
  store i64 0, i64* %orig_buffersize, align 8, !dbg !14360
  call void @llvm.dbg.declare(metadata i8** %quote_string, metadata !14361, metadata !DIExpression()), !dbg !14362
  store i8* null, i8** %quote_string, align 8, !dbg !14362
  call void @llvm.dbg.declare(metadata i64* %quote_string_len, metadata !14363, metadata !DIExpression()), !dbg !14364
  store i64 0, i64* %quote_string_len, align 8, !dbg !14364
  call void @llvm.dbg.declare(metadata i8* %backslash_escapes, metadata !14365, metadata !DIExpression()), !dbg !14366
  store i8 0, i8* %backslash_escapes, align 1, !dbg !14366
  call void @llvm.dbg.declare(metadata i8* %unibyte_locale, metadata !14367, metadata !DIExpression()), !dbg !14368
  %call = call i64 @__ctype_get_mb_cur_max() #12, !dbg !14369
  %cmp = icmp eq i64 %call, 1, !dbg !14370
  %frombool = zext i1 %cmp to i8, !dbg !14368
  store i8 %frombool, i8* %unibyte_locale, align 1, !dbg !14368
  call void @llvm.dbg.declare(metadata i8* %elide_outer_quotes, metadata !14371, metadata !DIExpression()), !dbg !14372
  %0 = load i32, i32* %flags.addr, align 4, !dbg !14373
  %and = and i32 %0, 2, !dbg !14374
  %cmp1 = icmp ne i32 %and, 0, !dbg !14375
  %frombool2 = zext i1 %cmp1 to i8, !dbg !14372
  store i8 %frombool2, i8* %elide_outer_quotes, align 1, !dbg !14372
  call void @llvm.dbg.declare(metadata i8* %pending_shell_escape_end, metadata !14376, metadata !DIExpression()), !dbg !14377
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !14377
  call void @llvm.dbg.declare(metadata i8* %encountered_single_quote, metadata !14378, metadata !DIExpression()), !dbg !14379
  store i8 0, i8* %encountered_single_quote, align 1, !dbg !14379
  call void @llvm.dbg.declare(metadata i8* %all_c_and_shell_quote_compat, metadata !14380, metadata !DIExpression()), !dbg !14381
  store i8 1, i8* %all_c_and_shell_quote_compat, align 1, !dbg !14381
  br label %process_input, !dbg !14382

process_input:                                    ; preds = %if.then701, %entry
  call void @llvm.dbg.label(metadata !14383), !dbg !14384
  %1 = load i32, i32* %quoting_style.addr, align 4, !dbg !14385
  switch i32 %1, label %sw.default [
    i32 6, label %sw.bb
    i32 5, label %sw.bb3
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb8
    i32 3, label %sw.bb26
    i32 1, label %sw.bb27
    i32 4, label %sw.bb28
    i32 2, label %sw.bb32
    i32 0, label %sw.bb43
  ], !dbg !14386

sw.bb:                                            ; preds = %process_input
  store i32 5, i32* %quoting_style.addr, align 4, !dbg !14387
  store i8 1, i8* %elide_outer_quotes, align 1, !dbg !14389
  br label %sw.bb3, !dbg !14390

sw.bb3:                                           ; preds = %process_input, %sw.bb
  %2 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14391
  %tobool = trunc i8 %2 to i1, !dbg !14391
  br i1 %tobool, label %if.end6, label %if.then, !dbg !14393

if.then:                                          ; preds = %sw.bb3
  br label %do.body, !dbg !14394

do.body:                                          ; preds = %if.then
  %3 = load i64, i64* %len, align 8, !dbg !14395
  %4 = load i64, i64* %buffersize.addr, align 8, !dbg !14395
  %cmp4 = icmp ult i64 %3, %4, !dbg !14395
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !14398

if.then5:                                         ; preds = %do.body
  %5 = load i8*, i8** %buffer.addr, align 8, !dbg !14395
  %6 = load i64, i64* %len, align 8, !dbg !14395
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !14395, !ctir !7
  store i8 34, i8* %arrayidx, align 1, !dbg !14395
  br label %if.end, !dbg !14395

if.end:                                           ; preds = %if.then5, %do.body
  %7 = load i64, i64* %len, align 8, !dbg !14398
  %inc = add i64 %7, 1, !dbg !14398
  store i64 %inc, i64* %len, align 8, !dbg !14398
  br label %do.end, !dbg !14398

do.end:                                           ; preds = %if.end
  br label %if.end6, !dbg !14398

if.end6:                                          ; preds = %do.end, %sw.bb3
  store i8 1, i8* %backslash_escapes, align 1, !dbg !14399
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.259, i64 0, i64 0), i8** %quote_string, align 8, !dbg !14400
  store i64 1, i64* %quote_string_len, align 8, !dbg !14401
  br label %sw.epilog, !dbg !14402

sw.bb7:                                           ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !dbg !14403
  store i8 0, i8* %elide_outer_quotes, align 1, !dbg !14404
  br label %sw.epilog, !dbg !14405

sw.bb8:                                           ; preds = %process_input, %process_input, %process_input
  %8 = load i32, i32* %quoting_style.addr, align 4, !dbg !14406
  %cmp9 = icmp ne i32 %8, 10, !dbg !14409
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !14410

if.then10:                                        ; preds = %sw.bb8
  %9 = load i32, i32* %quoting_style.addr, align 4, !dbg !14411
  %call11 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.260, i64 0, i64 0), i32 %9), !dbg !14413
  store i8* %call11, i8** %left_quote.addr, align 8, !dbg !14414
  %10 = load i32, i32* %quoting_style.addr, align 4, !dbg !14415
  %call12 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.261, i64 0, i64 0), i32 %10), !dbg !14416
  store i8* %call12, i8** %right_quote.addr, align 8, !dbg !14417
  br label %if.end13, !dbg !14418

if.end13:                                         ; preds = %if.then10, %sw.bb8
  %11 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14419
  %tobool14 = trunc i8 %11 to i1, !dbg !14419
  br i1 %tobool14, label %if.end24, label %if.then15, !dbg !14421

if.then15:                                        ; preds = %if.end13
  %12 = load i8*, i8** %left_quote.addr, align 8, !dbg !14422
  store i8* %12, i8** %quote_string, align 8, !dbg !14424
  br label %for.cond, !dbg !14425

for.cond:                                         ; preds = %for.inc, %if.then15
  %13 = load i8*, i8** %quote_string, align 8, !dbg !14426
  %14 = load i8, i8* %13, align 1, !dbg !14428, !ctir !91
  %tobool16 = icmp ne i8 %14, 0, !dbg !14429
  br i1 %tobool16, label %for.body, label %for.end, !dbg !14429

for.body:                                         ; preds = %for.cond
  br label %do.body17, !dbg !14430

do.body17:                                        ; preds = %for.body
  %15 = load i64, i64* %len, align 8, !dbg !14431
  %16 = load i64, i64* %buffersize.addr, align 8, !dbg !14431
  %cmp18 = icmp ult i64 %15, %16, !dbg !14431
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !14434

if.then19:                                        ; preds = %do.body17
  %17 = load i8*, i8** %quote_string, align 8, !dbg !14431
  %18 = load i8, i8* %17, align 1, !dbg !14431, !ctir !91
  %19 = load i8*, i8** %buffer.addr, align 8, !dbg !14431
  %20 = load i64, i64* %len, align 8, !dbg !14431
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 %20, !dbg !14431, !ctir !7
  store i8 %18, i8* %arrayidx20, align 1, !dbg !14431
  br label %if.end21, !dbg !14431

if.end21:                                         ; preds = %if.then19, %do.body17
  %21 = load i64, i64* %len, align 8, !dbg !14434
  %inc22 = add i64 %21, 1, !dbg !14434
  store i64 %inc22, i64* %len, align 8, !dbg !14434
  br label %do.end23, !dbg !14434

do.end23:                                         ; preds = %if.end21
  br label %for.inc, !dbg !14434

for.inc:                                          ; preds = %do.end23
  %22 = load i8*, i8** %quote_string, align 8, !dbg !14435
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1, !dbg !14435, !ctir !91
  store i8* %incdec.ptr, i8** %quote_string, align 8, !dbg !14435
  br label %for.cond, !dbg !14436, !llvm.loop !14437

for.end:                                          ; preds = %for.cond
  br label %if.end24, !dbg !14438

if.end24:                                         ; preds = %for.end, %if.end13
  store i8 1, i8* %backslash_escapes, align 1, !dbg !14439
  %23 = load i8*, i8** %right_quote.addr, align 8, !dbg !14440
  store i8* %23, i8** %quote_string, align 8, !dbg !14441
  %24 = load i8*, i8** %quote_string, align 8, !dbg !14442
  %call25 = call i64 @strlen(i8* %24) #14, !dbg !14443
  store i64 %call25, i64* %quote_string_len, align 8, !dbg !14444
  br label %sw.epilog, !dbg !14445

sw.bb26:                                          ; preds = %process_input
  store i8 1, i8* %backslash_escapes, align 1, !dbg !14446
  br label %sw.bb27, !dbg !14447

sw.bb27:                                          ; preds = %process_input, %sw.bb26
  store i8 1, i8* %elide_outer_quotes, align 1, !dbg !14448
  br label %sw.bb28, !dbg !14449

sw.bb28:                                          ; preds = %process_input, %sw.bb27
  %25 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14450
  %tobool29 = trunc i8 %25 to i1, !dbg !14450
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !14452

if.then30:                                        ; preds = %sw.bb28
  store i8 1, i8* %backslash_escapes, align 1, !dbg !14453
  br label %if.end31, !dbg !14454

if.end31:                                         ; preds = %if.then30, %sw.bb28
  br label %sw.bb32, !dbg !14455

sw.bb32:                                          ; preds = %process_input, %if.end31
  store i32 2, i32* %quoting_style.addr, align 4, !dbg !14456
  %26 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14457
  %tobool33 = trunc i8 %26 to i1, !dbg !14457
  br i1 %tobool33, label %if.end42, label %if.then34, !dbg !14459

if.then34:                                        ; preds = %sw.bb32
  br label %do.body35, !dbg !14460

do.body35:                                        ; preds = %if.then34
  %27 = load i64, i64* %len, align 8, !dbg !14461
  %28 = load i64, i64* %buffersize.addr, align 8, !dbg !14461
  %cmp36 = icmp ult i64 %27, %28, !dbg !14461
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !14464

if.then37:                                        ; preds = %do.body35
  %29 = load i8*, i8** %buffer.addr, align 8, !dbg !14461
  %30 = load i64, i64* %len, align 8, !dbg !14461
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 %30, !dbg !14461, !ctir !7
  store i8 39, i8* %arrayidx38, align 1, !dbg !14461
  br label %if.end39, !dbg !14461

if.end39:                                         ; preds = %if.then37, %do.body35
  %31 = load i64, i64* %len, align 8, !dbg !14464
  %inc40 = add i64 %31, 1, !dbg !14464
  store i64 %inc40, i64* %len, align 8, !dbg !14464
  br label %do.end41, !dbg !14464

do.end41:                                         ; preds = %if.end39
  br label %if.end42, !dbg !14464

if.end42:                                         ; preds = %do.end41, %sw.bb32
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.261, i64 0, i64 0), i8** %quote_string, align 8, !dbg !14465
  store i64 1, i64* %quote_string_len, align 8, !dbg !14466
  br label %sw.epilog, !dbg !14467

sw.bb43:                                          ; preds = %process_input
  store i8 0, i8* %elide_outer_quotes, align 1, !dbg !14468
  br label %sw.epilog, !dbg !14469

sw.default:                                       ; preds = %process_input
  call void @abort() #13, !dbg !14470
  unreachable, !dbg !14470

sw.epilog:                                        ; preds = %sw.bb43, %if.end42, %if.end24, %sw.bb7, %if.end6
  store i64 0, i64* %i, align 8, !dbg !14471
  br label %for.cond44, !dbg !14473

for.cond44:                                       ; preds = %for.inc673, %sw.epilog
  %32 = load i64, i64* %argsize.addr, align 8, !dbg !14474
  %cmp45 = icmp eq i64 %32, -1, !dbg !14476
  br i1 %cmp45, label %cond.true, label %cond.false, !dbg !14474

cond.true:                                        ; preds = %for.cond44
  %33 = load i8*, i8** %arg.addr, align 8, !dbg !14477
  %34 = load i64, i64* %i, align 8, !dbg !14478
  %arrayidx46 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !14477, !ctir !90
  %35 = load i8, i8* %arrayidx46, align 1, !dbg !14477
  %conv = sext i8 %35 to i32, !dbg !14477
  %cmp47 = icmp eq i32 %conv, 0, !dbg !14479
  %conv48 = zext i1 %cmp47 to i32, !dbg !14479
  br label %cond.end, !dbg !14474

cond.false:                                       ; preds = %for.cond44
  %36 = load i64, i64* %i, align 8, !dbg !14480
  %37 = load i64, i64* %argsize.addr, align 8, !dbg !14481
  %cmp49 = icmp eq i64 %36, %37, !dbg !14482
  %conv50 = zext i1 %cmp49 to i32, !dbg !14482
  br label %cond.end, !dbg !14474

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv48, %cond.true ], [ %conv50, %cond.false ], !dbg !14474
  %tobool51 = icmp ne i32 %cond, 0, !dbg !14483
  %lnot = xor i1 %tobool51, true, !dbg !14483
  br i1 %lnot, label %for.body52, label %for.end675, !dbg !14484

for.body52:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %c, metadata !14485, metadata !DIExpression()), !dbg !14487
  call void @llvm.dbg.declare(metadata i8* %esc, metadata !14488, metadata !DIExpression()), !dbg !14489
  call void @llvm.dbg.declare(metadata i8* %is_right_quote, metadata !14490, metadata !DIExpression()), !dbg !14491
  store i8 0, i8* %is_right_quote, align 1, !dbg !14491
  call void @llvm.dbg.declare(metadata i8* %escaping, metadata !14492, metadata !DIExpression()), !dbg !14493
  store i8 0, i8* %escaping, align 1, !dbg !14493
  call void @llvm.dbg.declare(metadata i8* %c_and_shell_quote_compat, metadata !14494, metadata !DIExpression()), !dbg !14495
  store i8 0, i8* %c_and_shell_quote_compat, align 1, !dbg !14495
  %38 = load i8, i8* %backslash_escapes, align 1, !dbg !14496
  %tobool53 = trunc i8 %38 to i1, !dbg !14496
  br i1 %tobool53, label %land.lhs.true, label %if.end80, !dbg !14498

land.lhs.true:                                    ; preds = %for.body52
  %39 = load i32, i32* %quoting_style.addr, align 4, !dbg !14499
  %cmp55 = icmp ne i32 %39, 2, !dbg !14500
  br i1 %cmp55, label %land.lhs.true57, label %if.end80, !dbg !14501

land.lhs.true57:                                  ; preds = %land.lhs.true
  %40 = load i64, i64* %quote_string_len, align 8, !dbg !14502
  %tobool58 = icmp ne i64 %40, 0, !dbg !14502
  br i1 %tobool58, label %land.lhs.true59, label %if.end80, !dbg !14503

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %41 = load i64, i64* %i, align 8, !dbg !14504
  %42 = load i64, i64* %quote_string_len, align 8, !dbg !14505
  %add = add i64 %41, %42, !dbg !14506
  %43 = load i64, i64* %argsize.addr, align 8, !dbg !14507
  %cmp60 = icmp eq i64 %43, -1, !dbg !14508
  br i1 %cmp60, label %land.lhs.true62, label %cond.false67, !dbg !14509

land.lhs.true62:                                  ; preds = %land.lhs.true59
  %44 = load i64, i64* %quote_string_len, align 8, !dbg !14510
  %cmp63 = icmp ult i64 1, %44, !dbg !14511
  br i1 %cmp63, label %cond.true65, label %cond.false67, !dbg !14507

cond.true65:                                      ; preds = %land.lhs.true62
  %45 = load i8*, i8** %arg.addr, align 8, !dbg !14512
  %call66 = call i64 @strlen(i8* %45) #14, !dbg !14513
  store i64 %call66, i64* %argsize.addr, align 8, !dbg !14514
  br label %cond.end68, !dbg !14507

cond.false67:                                     ; preds = %land.lhs.true62, %land.lhs.true59
  %46 = load i64, i64* %argsize.addr, align 8, !dbg !14515
  br label %cond.end68, !dbg !14507

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i64 [ %call66, %cond.true65 ], [ %46, %cond.false67 ], !dbg !14507
  %cmp70 = icmp ule i64 %add, %cond69, !dbg !14516
  br i1 %cmp70, label %land.lhs.true72, label %if.end80, !dbg !14517

land.lhs.true72:                                  ; preds = %cond.end68
  %47 = load i8*, i8** %arg.addr, align 8, !dbg !14518
  %48 = load i64, i64* %i, align 8, !dbg !14519
  %add.ptr = getelementptr inbounds i8, i8* %47, i64 %48, !dbg !14520, !ctir !91
  %49 = load i8*, i8** %quote_string, align 8, !dbg !14521
  %50 = load i64, i64* %quote_string_len, align 8, !dbg !14522
  %call73 = call i32 @memcmp(i8* %add.ptr, i8* %49, i64 %50) #14, !dbg !14523
  %cmp74 = icmp eq i32 %call73, 0, !dbg !14524
  br i1 %cmp74, label %if.then76, label %if.end80, !dbg !14525

if.then76:                                        ; preds = %land.lhs.true72
  %51 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14526
  %tobool77 = trunc i8 %51 to i1, !dbg !14526
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !14529

if.then78:                                        ; preds = %if.then76
  br label %force_outer_quoting_style, !dbg !14530

if.end79:                                         ; preds = %if.then76
  store i8 1, i8* %is_right_quote, align 1, !dbg !14531
  br label %if.end80, !dbg !14532

if.end80:                                         ; preds = %if.end79, %land.lhs.true72, %cond.end68, %land.lhs.true57, %land.lhs.true, %for.body52
  %52 = load i8*, i8** %arg.addr, align 8, !dbg !14533
  %53 = load i64, i64* %i, align 8, !dbg !14534
  %arrayidx81 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !14533, !ctir !90
  %54 = load i8, i8* %arrayidx81, align 1, !dbg !14533
  store i8 %54, i8* %c, align 1, !dbg !14535
  %55 = load i8, i8* %c, align 1, !dbg !14536
  %conv82 = zext i8 %55 to i32, !dbg !14536
  switch i32 %conv82, label %sw.default335 [
    i32 0, label %sw.bb83
    i32 63, label %sw.bb170
    i32 7, label %sw.bb236
    i32 8, label %sw.bb237
    i32 12, label %sw.bb238
    i32 10, label %sw.bb239
    i32 13, label %sw.bb240
    i32 9, label %sw.bb241
    i32 11, label %sw.bb242
    i32 92, label %sw.bb243
    i32 123, label %sw.bb270
    i32 125, label %sw.bb270
    i32 35, label %sw.bb283
    i32 126, label %sw.bb283
    i32 32, label %sw.bb288
    i32 33, label %sw.bb289
    i32 34, label %sw.bb289
    i32 36, label %sw.bb289
    i32 38, label %sw.bb289
    i32 40, label %sw.bb289
    i32 41, label %sw.bb289
    i32 42, label %sw.bb289
    i32 59, label %sw.bb289
    i32 60, label %sw.bb289
    i32 61, label %sw.bb289
    i32 62, label %sw.bb289
    i32 91, label %sw.bb289
    i32 94, label %sw.bb289
    i32 96, label %sw.bb289
    i32 124, label %sw.bb289
    i32 39, label %sw.bb297
    i32 37, label %sw.bb334
    i32 43, label %sw.bb334
    i32 44, label %sw.bb334
    i32 45, label %sw.bb334
    i32 46, label %sw.bb334
    i32 47, label %sw.bb334
    i32 48, label %sw.bb334
    i32 49, label %sw.bb334
    i32 50, label %sw.bb334
    i32 51, label %sw.bb334
    i32 52, label %sw.bb334
    i32 53, label %sw.bb334
    i32 54, label %sw.bb334
    i32 55, label %sw.bb334
    i32 56, label %sw.bb334
    i32 57, label %sw.bb334
    i32 58, label %sw.bb334
    i32 65, label %sw.bb334
    i32 66, label %sw.bb334
    i32 67, label %sw.bb334
    i32 68, label %sw.bb334
    i32 69, label %sw.bb334
    i32 70, label %sw.bb334
    i32 71, label %sw.bb334
    i32 72, label %sw.bb334
    i32 73, label %sw.bb334
    i32 74, label %sw.bb334
    i32 75, label %sw.bb334
    i32 76, label %sw.bb334
    i32 77, label %sw.bb334
    i32 78, label %sw.bb334
    i32 79, label %sw.bb334
    i32 80, label %sw.bb334
    i32 81, label %sw.bb334
    i32 82, label %sw.bb334
    i32 83, label %sw.bb334
    i32 84, label %sw.bb334
    i32 85, label %sw.bb334
    i32 86, label %sw.bb334
    i32 87, label %sw.bb334
    i32 88, label %sw.bb334
    i32 89, label %sw.bb334
    i32 90, label %sw.bb334
    i32 93, label %sw.bb334
    i32 95, label %sw.bb334
    i32 97, label %sw.bb334
    i32 98, label %sw.bb334
    i32 99, label %sw.bb334
    i32 100, label %sw.bb334
    i32 101, label %sw.bb334
    i32 102, label %sw.bb334
    i32 103, label %sw.bb334
    i32 104, label %sw.bb334
    i32 105, label %sw.bb334
    i32 106, label %sw.bb334
    i32 107, label %sw.bb334
    i32 108, label %sw.bb334
    i32 109, label %sw.bb334
    i32 110, label %sw.bb334
    i32 111, label %sw.bb334
    i32 112, label %sw.bb334
    i32 113, label %sw.bb334
    i32 114, label %sw.bb334
    i32 115, label %sw.bb334
    i32 116, label %sw.bb334
    i32 117, label %sw.bb334
    i32 118, label %sw.bb334
    i32 119, label %sw.bb334
    i32 120, label %sw.bb334
    i32 121, label %sw.bb334
    i32 122, label %sw.bb334
  ], !dbg !14537

sw.bb83:                                          ; preds = %if.end80
  %56 = load i8, i8* %backslash_escapes, align 1, !dbg !14538
  %tobool84 = trunc i8 %56 to i1, !dbg !14538
  br i1 %tobool84, label %if.then85, label %if.else, !dbg !14541

if.then85:                                        ; preds = %sw.bb83
  br label %do.body86, !dbg !14542

do.body86:                                        ; preds = %if.then85
  %57 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14544
  %tobool87 = trunc i8 %57 to i1, !dbg !14544
  br i1 %tobool87, label %if.then88, label %if.end89, !dbg !14547

if.then88:                                        ; preds = %do.body86
  br label %force_outer_quoting_style, !dbg !14544

if.end89:                                         ; preds = %do.body86
  store i8 1, i8* %escaping, align 1, !dbg !14547
  %58 = load i32, i32* %quoting_style.addr, align 4, !dbg !14548
  %cmp90 = icmp eq i32 %58, 2, !dbg !14548
  br i1 %cmp90, label %land.lhs.true92, label %if.end119, !dbg !14548

land.lhs.true92:                                  ; preds = %if.end89
  %59 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !14548
  %tobool93 = trunc i8 %59 to i1, !dbg !14548
  br i1 %tobool93, label %if.end119, label %if.then94, !dbg !14547

if.then94:                                        ; preds = %land.lhs.true92
  br label %do.body95, !dbg !14550

do.body95:                                        ; preds = %if.then94
  %60 = load i64, i64* %len, align 8, !dbg !14552
  %61 = load i64, i64* %buffersize.addr, align 8, !dbg !14552
  %cmp96 = icmp ult i64 %60, %61, !dbg !14552
  br i1 %cmp96, label %if.then98, label %if.end100, !dbg !14555

if.then98:                                        ; preds = %do.body95
  %62 = load i8*, i8** %buffer.addr, align 8, !dbg !14552
  %63 = load i64, i64* %len, align 8, !dbg !14552
  %arrayidx99 = getelementptr inbounds i8, i8* %62, i64 %63, !dbg !14552, !ctir !7
  store i8 39, i8* %arrayidx99, align 1, !dbg !14552
  br label %if.end100, !dbg !14552

if.end100:                                        ; preds = %if.then98, %do.body95
  %64 = load i64, i64* %len, align 8, !dbg !14555
  %inc101 = add i64 %64, 1, !dbg !14555
  store i64 %inc101, i64* %len, align 8, !dbg !14555
  br label %do.end102, !dbg !14555

do.end102:                                        ; preds = %if.end100
  br label %do.body103, !dbg !14550

do.body103:                                       ; preds = %do.end102
  %65 = load i64, i64* %len, align 8, !dbg !14556
  %66 = load i64, i64* %buffersize.addr, align 8, !dbg !14556
  %cmp104 = icmp ult i64 %65, %66, !dbg !14556
  br i1 %cmp104, label %if.then106, label %if.end108, !dbg !14559

if.then106:                                       ; preds = %do.body103
  %67 = load i8*, i8** %buffer.addr, align 8, !dbg !14556
  %68 = load i64, i64* %len, align 8, !dbg !14556
  %arrayidx107 = getelementptr inbounds i8, i8* %67, i64 %68, !dbg !14556, !ctir !7
  store i8 36, i8* %arrayidx107, align 1, !dbg !14556
  br label %if.end108, !dbg !14556

if.end108:                                        ; preds = %if.then106, %do.body103
  %69 = load i64, i64* %len, align 8, !dbg !14559
  %inc109 = add i64 %69, 1, !dbg !14559
  store i64 %inc109, i64* %len, align 8, !dbg !14559
  br label %do.end110, !dbg !14559

do.end110:                                        ; preds = %if.end108
  br label %do.body111, !dbg !14550

do.body111:                                       ; preds = %do.end110
  %70 = load i64, i64* %len, align 8, !dbg !14560
  %71 = load i64, i64* %buffersize.addr, align 8, !dbg !14560
  %cmp112 = icmp ult i64 %70, %71, !dbg !14560
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !14563

if.then114:                                       ; preds = %do.body111
  %72 = load i8*, i8** %buffer.addr, align 8, !dbg !14560
  %73 = load i64, i64* %len, align 8, !dbg !14560
  %arrayidx115 = getelementptr inbounds i8, i8* %72, i64 %73, !dbg !14560, !ctir !7
  store i8 39, i8* %arrayidx115, align 1, !dbg !14560
  br label %if.end116, !dbg !14560

if.end116:                                        ; preds = %if.then114, %do.body111
  %74 = load i64, i64* %len, align 8, !dbg !14563
  %inc117 = add i64 %74, 1, !dbg !14563
  store i64 %inc117, i64* %len, align 8, !dbg !14563
  br label %do.end118, !dbg !14563

do.end118:                                        ; preds = %if.end116
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !14550
  br label %if.end119, !dbg !14550

if.end119:                                        ; preds = %do.end118, %land.lhs.true92, %if.end89
  br label %do.body120, !dbg !14547

do.body120:                                       ; preds = %if.end119
  %75 = load i64, i64* %len, align 8, !dbg !14564
  %76 = load i64, i64* %buffersize.addr, align 8, !dbg !14564
  %cmp121 = icmp ult i64 %75, %76, !dbg !14564
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !14567

if.then123:                                       ; preds = %do.body120
  %77 = load i8*, i8** %buffer.addr, align 8, !dbg !14564
  %78 = load i64, i64* %len, align 8, !dbg !14564
  %arrayidx124 = getelementptr inbounds i8, i8* %77, i64 %78, !dbg !14564, !ctir !7
  store i8 92, i8* %arrayidx124, align 1, !dbg !14564
  br label %if.end125, !dbg !14564

if.end125:                                        ; preds = %if.then123, %do.body120
  %79 = load i64, i64* %len, align 8, !dbg !14567
  %inc126 = add i64 %79, 1, !dbg !14567
  store i64 %inc126, i64* %len, align 8, !dbg !14567
  br label %do.end127, !dbg !14567

do.end127:                                        ; preds = %if.end125
  br label %do.end128, !dbg !14547

do.end128:                                        ; preds = %do.end127
  %80 = load i32, i32* %quoting_style.addr, align 4, !dbg !14568
  %cmp129 = icmp ne i32 %80, 2, !dbg !14570
  br i1 %cmp129, label %land.lhs.true131, label %if.end164, !dbg !14571

land.lhs.true131:                                 ; preds = %do.end128
  %81 = load i64, i64* %i, align 8, !dbg !14572
  %add132 = add i64 %81, 1, !dbg !14573
  %82 = load i64, i64* %argsize.addr, align 8, !dbg !14574
  %cmp133 = icmp ult i64 %add132, %82, !dbg !14575
  br i1 %cmp133, label %land.lhs.true135, label %if.end164, !dbg !14576

land.lhs.true135:                                 ; preds = %land.lhs.true131
  %83 = load i8*, i8** %arg.addr, align 8, !dbg !14577
  %84 = load i64, i64* %i, align 8, !dbg !14578
  %add136 = add i64 %84, 1, !dbg !14579
  %arrayidx137 = getelementptr inbounds i8, i8* %83, i64 %add136, !dbg !14577, !ctir !90
  %85 = load i8, i8* %arrayidx137, align 1, !dbg !14577
  %conv138 = sext i8 %85 to i32, !dbg !14577
  %cmp139 = icmp sle i32 48, %conv138, !dbg !14580
  br i1 %cmp139, label %land.lhs.true141, label %if.end164, !dbg !14581

land.lhs.true141:                                 ; preds = %land.lhs.true135
  %86 = load i8*, i8** %arg.addr, align 8, !dbg !14582
  %87 = load i64, i64* %i, align 8, !dbg !14583
  %add142 = add i64 %87, 1, !dbg !14584
  %arrayidx143 = getelementptr inbounds i8, i8* %86, i64 %add142, !dbg !14582, !ctir !90
  %88 = load i8, i8* %arrayidx143, align 1, !dbg !14582
  %conv144 = sext i8 %88 to i32, !dbg !14582
  %cmp145 = icmp sle i32 %conv144, 57, !dbg !14585
  br i1 %cmp145, label %if.then147, label %if.end164, !dbg !14586

if.then147:                                       ; preds = %land.lhs.true141
  br label %do.body148, !dbg !14587

do.body148:                                       ; preds = %if.then147
  %89 = load i64, i64* %len, align 8, !dbg !14589
  %90 = load i64, i64* %buffersize.addr, align 8, !dbg !14589
  %cmp149 = icmp ult i64 %89, %90, !dbg !14589
  br i1 %cmp149, label %if.then151, label %if.end153, !dbg !14592

if.then151:                                       ; preds = %do.body148
  %91 = load i8*, i8** %buffer.addr, align 8, !dbg !14589
  %92 = load i64, i64* %len, align 8, !dbg !14589
  %arrayidx152 = getelementptr inbounds i8, i8* %91, i64 %92, !dbg !14589, !ctir !7
  store i8 48, i8* %arrayidx152, align 1, !dbg !14589
  br label %if.end153, !dbg !14589

if.end153:                                        ; preds = %if.then151, %do.body148
  %93 = load i64, i64* %len, align 8, !dbg !14592
  %inc154 = add i64 %93, 1, !dbg !14592
  store i64 %inc154, i64* %len, align 8, !dbg !14592
  br label %do.end155, !dbg !14592

do.end155:                                        ; preds = %if.end153
  br label %do.body156, !dbg !14593

do.body156:                                       ; preds = %do.end155
  %94 = load i64, i64* %len, align 8, !dbg !14594
  %95 = load i64, i64* %buffersize.addr, align 8, !dbg !14594
  %cmp157 = icmp ult i64 %94, %95, !dbg !14594
  br i1 %cmp157, label %if.then159, label %if.end161, !dbg !14597

if.then159:                                       ; preds = %do.body156
  %96 = load i8*, i8** %buffer.addr, align 8, !dbg !14594
  %97 = load i64, i64* %len, align 8, !dbg !14594
  %arrayidx160 = getelementptr inbounds i8, i8* %96, i64 %97, !dbg !14594, !ctir !7
  store i8 48, i8* %arrayidx160, align 1, !dbg !14594
  br label %if.end161, !dbg !14594

if.end161:                                        ; preds = %if.then159, %do.body156
  %98 = load i64, i64* %len, align 8, !dbg !14597
  %inc162 = add i64 %98, 1, !dbg !14597
  store i64 %inc162, i64* %len, align 8, !dbg !14597
  br label %do.end163, !dbg !14597

do.end163:                                        ; preds = %if.end161
  br label %if.end164, !dbg !14598

if.end164:                                        ; preds = %do.end163, %land.lhs.true141, %land.lhs.true135, %land.lhs.true131, %do.end128
  store i8 48, i8* %c, align 1, !dbg !14599
  br label %if.end169, !dbg !14600

if.else:                                          ; preds = %sw.bb83
  %99 = load i32, i32* %flags.addr, align 4, !dbg !14601
  %and165 = and i32 %99, 1, !dbg !14603
  %tobool166 = icmp ne i32 %and165, 0, !dbg !14603
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !14604

if.then167:                                       ; preds = %if.else
  br label %for.inc673, !dbg !14605

if.end168:                                        ; preds = %if.else
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end164
  br label %sw.epilog564, !dbg !14606

sw.bb170:                                         ; preds = %if.end80
  %100 = load i32, i32* %quoting_style.addr, align 4, !dbg !14607
  switch i32 %100, label %sw.default234 [
    i32 2, label %sw.bb171
    i32 5, label %sw.bb175
  ], !dbg !14608

sw.bb171:                                         ; preds = %sw.bb170
  %101 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14609
  %tobool172 = trunc i8 %101 to i1, !dbg !14609
  br i1 %tobool172, label %if.then173, label %if.end174, !dbg !14612

if.then173:                                       ; preds = %sw.bb171
  br label %force_outer_quoting_style, !dbg !14613

if.end174:                                        ; preds = %sw.bb171
  br label %sw.epilog235, !dbg !14614

sw.bb175:                                         ; preds = %sw.bb170
  %102 = load i32, i32* %flags.addr, align 4, !dbg !14615
  %and176 = and i32 %102, 4, !dbg !14617
  %tobool177 = icmp ne i32 %and176, 0, !dbg !14617
  br i1 %tobool177, label %land.lhs.true178, label %if.end233, !dbg !14618

land.lhs.true178:                                 ; preds = %sw.bb175
  %103 = load i64, i64* %i, align 8, !dbg !14619
  %add179 = add i64 %103, 2, !dbg !14620
  %104 = load i64, i64* %argsize.addr, align 8, !dbg !14621
  %cmp180 = icmp ult i64 %add179, %104, !dbg !14622
  br i1 %cmp180, label %land.lhs.true182, label %if.end233, !dbg !14623

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %105 = load i8*, i8** %arg.addr, align 8, !dbg !14624
  %106 = load i64, i64* %i, align 8, !dbg !14625
  %add183 = add i64 %106, 1, !dbg !14626
  %arrayidx184 = getelementptr inbounds i8, i8* %105, i64 %add183, !dbg !14624, !ctir !90
  %107 = load i8, i8* %arrayidx184, align 1, !dbg !14624
  %conv185 = sext i8 %107 to i32, !dbg !14624
  %cmp186 = icmp eq i32 %conv185, 63, !dbg !14627
  br i1 %cmp186, label %if.then188, label %if.end233, !dbg !14628

if.then188:                                       ; preds = %land.lhs.true182
  %108 = load i8*, i8** %arg.addr, align 8, !dbg !14629
  %109 = load i64, i64* %i, align 8, !dbg !14630
  %add189 = add i64 %109, 2, !dbg !14631
  %arrayidx190 = getelementptr inbounds i8, i8* %108, i64 %add189, !dbg !14629, !ctir !90
  %110 = load i8, i8* %arrayidx190, align 1, !dbg !14629
  %conv191 = sext i8 %110 to i32, !dbg !14629
  switch i32 %conv191, label %sw.default231 [
    i32 33, label %sw.bb192
    i32 39, label %sw.bb192
    i32 40, label %sw.bb192
    i32 41, label %sw.bb192
    i32 45, label %sw.bb192
    i32 47, label %sw.bb192
    i32 60, label %sw.bb192
    i32 61, label %sw.bb192
    i32 62, label %sw.bb192
  ], !dbg !14632

sw.bb192:                                         ; preds = %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188
  %111 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14633
  %tobool193 = trunc i8 %111 to i1, !dbg !14633
  br i1 %tobool193, label %if.then194, label %if.end195, !dbg !14636

if.then194:                                       ; preds = %sw.bb192
  br label %force_outer_quoting_style, !dbg !14637

if.end195:                                        ; preds = %sw.bb192
  %112 = load i8*, i8** %arg.addr, align 8, !dbg !14638
  %113 = load i64, i64* %i, align 8, !dbg !14639
  %add196 = add i64 %113, 2, !dbg !14640
  %arrayidx197 = getelementptr inbounds i8, i8* %112, i64 %add196, !dbg !14638, !ctir !90
  %114 = load i8, i8* %arrayidx197, align 1, !dbg !14638
  store i8 %114, i8* %c, align 1, !dbg !14641
  %115 = load i64, i64* %i, align 8, !dbg !14642
  %add198 = add i64 %115, 2, !dbg !14642
  store i64 %add198, i64* %i, align 8, !dbg !14642
  br label %do.body199, !dbg !14643

do.body199:                                       ; preds = %if.end195
  %116 = load i64, i64* %len, align 8, !dbg !14644
  %117 = load i64, i64* %buffersize.addr, align 8, !dbg !14644
  %cmp200 = icmp ult i64 %116, %117, !dbg !14644
  br i1 %cmp200, label %if.then202, label %if.end204, !dbg !14647

if.then202:                                       ; preds = %do.body199
  %118 = load i8*, i8** %buffer.addr, align 8, !dbg !14644
  %119 = load i64, i64* %len, align 8, !dbg !14644
  %arrayidx203 = getelementptr inbounds i8, i8* %118, i64 %119, !dbg !14644, !ctir !7
  store i8 63, i8* %arrayidx203, align 1, !dbg !14644
  br label %if.end204, !dbg !14644

if.end204:                                        ; preds = %if.then202, %do.body199
  %120 = load i64, i64* %len, align 8, !dbg !14647
  %inc205 = add i64 %120, 1, !dbg !14647
  store i64 %inc205, i64* %len, align 8, !dbg !14647
  br label %do.end206, !dbg !14647

do.end206:                                        ; preds = %if.end204
  br label %do.body207, !dbg !14648

do.body207:                                       ; preds = %do.end206
  %121 = load i64, i64* %len, align 8, !dbg !14649
  %122 = load i64, i64* %buffersize.addr, align 8, !dbg !14649
  %cmp208 = icmp ult i64 %121, %122, !dbg !14649
  br i1 %cmp208, label %if.then210, label %if.end212, !dbg !14652

if.then210:                                       ; preds = %do.body207
  %123 = load i8*, i8** %buffer.addr, align 8, !dbg !14649
  %124 = load i64, i64* %len, align 8, !dbg !14649
  %arrayidx211 = getelementptr inbounds i8, i8* %123, i64 %124, !dbg !14649, !ctir !7
  store i8 34, i8* %arrayidx211, align 1, !dbg !14649
  br label %if.end212, !dbg !14649

if.end212:                                        ; preds = %if.then210, %do.body207
  %125 = load i64, i64* %len, align 8, !dbg !14652
  %inc213 = add i64 %125, 1, !dbg !14652
  store i64 %inc213, i64* %len, align 8, !dbg !14652
  br label %do.end214, !dbg !14652

do.end214:                                        ; preds = %if.end212
  br label %do.body215, !dbg !14653

do.body215:                                       ; preds = %do.end214
  %126 = load i64, i64* %len, align 8, !dbg !14654
  %127 = load i64, i64* %buffersize.addr, align 8, !dbg !14654
  %cmp216 = icmp ult i64 %126, %127, !dbg !14654
  br i1 %cmp216, label %if.then218, label %if.end220, !dbg !14657

if.then218:                                       ; preds = %do.body215
  %128 = load i8*, i8** %buffer.addr, align 8, !dbg !14654
  %129 = load i64, i64* %len, align 8, !dbg !14654
  %arrayidx219 = getelementptr inbounds i8, i8* %128, i64 %129, !dbg !14654, !ctir !7
  store i8 34, i8* %arrayidx219, align 1, !dbg !14654
  br label %if.end220, !dbg !14654

if.end220:                                        ; preds = %if.then218, %do.body215
  %130 = load i64, i64* %len, align 8, !dbg !14657
  %inc221 = add i64 %130, 1, !dbg !14657
  store i64 %inc221, i64* %len, align 8, !dbg !14657
  br label %do.end222, !dbg !14657

do.end222:                                        ; preds = %if.end220
  br label %do.body223, !dbg !14658

do.body223:                                       ; preds = %do.end222
  %131 = load i64, i64* %len, align 8, !dbg !14659
  %132 = load i64, i64* %buffersize.addr, align 8, !dbg !14659
  %cmp224 = icmp ult i64 %131, %132, !dbg !14659
  br i1 %cmp224, label %if.then226, label %if.end228, !dbg !14662

if.then226:                                       ; preds = %do.body223
  %133 = load i8*, i8** %buffer.addr, align 8, !dbg !14659
  %134 = load i64, i64* %len, align 8, !dbg !14659
  %arrayidx227 = getelementptr inbounds i8, i8* %133, i64 %134, !dbg !14659, !ctir !7
  store i8 63, i8* %arrayidx227, align 1, !dbg !14659
  br label %if.end228, !dbg !14659

if.end228:                                        ; preds = %if.then226, %do.body223
  %135 = load i64, i64* %len, align 8, !dbg !14662
  %inc229 = add i64 %135, 1, !dbg !14662
  store i64 %inc229, i64* %len, align 8, !dbg !14662
  br label %do.end230, !dbg !14662

do.end230:                                        ; preds = %if.end228
  br label %sw.epilog232, !dbg !14663

sw.default231:                                    ; preds = %if.then188
  br label %sw.epilog232, !dbg !14664

sw.epilog232:                                     ; preds = %sw.default231, %do.end230
  br label %if.end233, !dbg !14665

if.end233:                                        ; preds = %sw.epilog232, %land.lhs.true182, %land.lhs.true178, %sw.bb175
  br label %sw.epilog235, !dbg !14666

sw.default234:                                    ; preds = %sw.bb170
  br label %sw.epilog235, !dbg !14667

sw.epilog235:                                     ; preds = %sw.default234, %if.end233, %if.end174
  br label %sw.epilog564, !dbg !14668

sw.bb236:                                         ; preds = %if.end80
  store i8 97, i8* %esc, align 1, !dbg !14669
  br label %c_escape, !dbg !14670

sw.bb237:                                         ; preds = %if.end80
  store i8 98, i8* %esc, align 1, !dbg !14671
  br label %c_escape, !dbg !14672

sw.bb238:                                         ; preds = %if.end80
  store i8 102, i8* %esc, align 1, !dbg !14673
  br label %c_escape, !dbg !14674

sw.bb239:                                         ; preds = %if.end80
  store i8 110, i8* %esc, align 1, !dbg !14675
  br label %c_and_shell_escape, !dbg !14676

sw.bb240:                                         ; preds = %if.end80
  store i8 114, i8* %esc, align 1, !dbg !14677
  br label %c_and_shell_escape, !dbg !14678

sw.bb241:                                         ; preds = %if.end80
  store i8 116, i8* %esc, align 1, !dbg !14679
  br label %c_and_shell_escape, !dbg !14680

sw.bb242:                                         ; preds = %if.end80
  store i8 118, i8* %esc, align 1, !dbg !14681
  br label %c_escape, !dbg !14682

sw.bb243:                                         ; preds = %if.end80
  %136 = load i8, i8* %c, align 1, !dbg !14683
  store i8 %136, i8* %esc, align 1, !dbg !14684
  %137 = load i32, i32* %quoting_style.addr, align 4, !dbg !14685
  %cmp244 = icmp eq i32 %137, 2, !dbg !14687
  br i1 %cmp244, label %if.then246, label %if.end250, !dbg !14688

if.then246:                                       ; preds = %sw.bb243
  %138 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14689
  %tobool247 = trunc i8 %138 to i1, !dbg !14689
  br i1 %tobool247, label %if.then248, label %if.end249, !dbg !14692

if.then248:                                       ; preds = %if.then246
  br label %force_outer_quoting_style, !dbg !14693

if.end249:                                        ; preds = %if.then246
  br label %store_c, !dbg !14694

if.end250:                                        ; preds = %sw.bb243
  %139 = load i8, i8* %backslash_escapes, align 1, !dbg !14695
  %tobool251 = trunc i8 %139 to i1, !dbg !14695
  br i1 %tobool251, label %land.lhs.true253, label %if.end259, !dbg !14697

land.lhs.true253:                                 ; preds = %if.end250
  %140 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14698
  %tobool254 = trunc i8 %140 to i1, !dbg !14698
  br i1 %tobool254, label %land.lhs.true256, label %if.end259, !dbg !14699

land.lhs.true256:                                 ; preds = %land.lhs.true253
  %141 = load i64, i64* %quote_string_len, align 8, !dbg !14700
  %tobool257 = icmp ne i64 %141, 0, !dbg !14700
  br i1 %tobool257, label %if.then258, label %if.end259, !dbg !14701

if.then258:                                       ; preds = %land.lhs.true256
  br label %store_c, !dbg !14702

if.end259:                                        ; preds = %land.lhs.true256, %land.lhs.true253, %if.end250
  br label %c_and_shell_escape, !dbg !14700

c_and_shell_escape:                               ; preds = %if.end259, %sw.bb241, %sw.bb240, %sw.bb239
  call void @llvm.dbg.label(metadata !14703), !dbg !14704
  %142 = load i32, i32* %quoting_style.addr, align 4, !dbg !14705
  %cmp260 = icmp eq i32 %142, 2, !dbg !14707
  br i1 %cmp260, label %land.lhs.true262, label %if.end266, !dbg !14708

land.lhs.true262:                                 ; preds = %c_and_shell_escape
  %143 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14709
  %tobool263 = trunc i8 %143 to i1, !dbg !14709
  br i1 %tobool263, label %if.then265, label %if.end266, !dbg !14710

if.then265:                                       ; preds = %land.lhs.true262
  br label %force_outer_quoting_style, !dbg !14711

if.end266:                                        ; preds = %land.lhs.true262, %c_and_shell_escape
  br label %c_escape, !dbg !14709

c_escape:                                         ; preds = %if.end266, %sw.bb242, %sw.bb238, %sw.bb237, %sw.bb236
  call void @llvm.dbg.label(metadata !14712), !dbg !14713
  %144 = load i8, i8* %backslash_escapes, align 1, !dbg !14714
  %tobool267 = trunc i8 %144 to i1, !dbg !14714
  br i1 %tobool267, label %if.then268, label %if.end269, !dbg !14716

if.then268:                                       ; preds = %c_escape
  %145 = load i8, i8* %esc, align 1, !dbg !14717
  store i8 %145, i8* %c, align 1, !dbg !14719
  br label %store_escape, !dbg !14720

if.end269:                                        ; preds = %c_escape
  br label %sw.epilog564, !dbg !14721

sw.bb270:                                         ; preds = %if.end80, %if.end80
  %146 = load i64, i64* %argsize.addr, align 8, !dbg !14722
  %cmp271 = icmp eq i64 %146, -1, !dbg !14724
  br i1 %cmp271, label %cond.true273, label %cond.false278, !dbg !14725

cond.true273:                                     ; preds = %sw.bb270
  %147 = load i8*, i8** %arg.addr, align 8, !dbg !14726
  %arrayidx274 = getelementptr inbounds i8, i8* %147, i64 1, !dbg !14726, !ctir !90
  %148 = load i8, i8* %arrayidx274, align 1, !dbg !14726
  %conv275 = sext i8 %148 to i32, !dbg !14726
  %cmp276 = icmp eq i32 %conv275, 0, !dbg !14727
  br i1 %cmp276, label %if.end282, label %if.then281, !dbg !14722

cond.false278:                                    ; preds = %sw.bb270
  %149 = load i64, i64* %argsize.addr, align 8, !dbg !14728
  %cmp279 = icmp eq i64 %149, 1, !dbg !14729
  br i1 %cmp279, label %if.end282, label %if.then281, !dbg !14725

if.then281:                                       ; preds = %cond.false278, %cond.true273
  br label %sw.epilog564, !dbg !14730

if.end282:                                        ; preds = %cond.false278, %cond.true273
  br label %sw.bb283, !dbg !14731

sw.bb283:                                         ; preds = %if.end80, %if.end80, %if.end282
  %150 = load i64, i64* %i, align 8, !dbg !14732
  %cmp284 = icmp ne i64 %150, 0, !dbg !14734
  br i1 %cmp284, label %if.then286, label %if.end287, !dbg !14735

if.then286:                                       ; preds = %sw.bb283
  br label %sw.epilog564, !dbg !14736

if.end287:                                        ; preds = %sw.bb283
  br label %sw.bb288, !dbg !14737

sw.bb288:                                         ; preds = %if.end80, %if.end287
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !14738
  br label %sw.bb289, !dbg !14739

sw.bb289:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %sw.bb288
  %151 = load i32, i32* %quoting_style.addr, align 4, !dbg !14740
  %cmp290 = icmp eq i32 %151, 2, !dbg !14742
  br i1 %cmp290, label %land.lhs.true292, label %if.end296, !dbg !14743

land.lhs.true292:                                 ; preds = %sw.bb289
  %152 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14744
  %tobool293 = trunc i8 %152 to i1, !dbg !14744
  br i1 %tobool293, label %if.then295, label %if.end296, !dbg !14745

if.then295:                                       ; preds = %land.lhs.true292
  br label %force_outer_quoting_style, !dbg !14746

if.end296:                                        ; preds = %land.lhs.true292, %sw.bb289
  br label %sw.epilog564, !dbg !14747

sw.bb297:                                         ; preds = %if.end80
  store i8 1, i8* %encountered_single_quote, align 1, !dbg !14748
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !14749
  %153 = load i32, i32* %quoting_style.addr, align 4, !dbg !14750
  %cmp298 = icmp eq i32 %153, 2, !dbg !14752
  br i1 %cmp298, label %if.then300, label %if.end333, !dbg !14753

if.then300:                                       ; preds = %sw.bb297
  %154 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14754
  %tobool301 = trunc i8 %154 to i1, !dbg !14754
  br i1 %tobool301, label %if.then302, label %if.end303, !dbg !14757

if.then302:                                       ; preds = %if.then300
  br label %force_outer_quoting_style, !dbg !14758

if.end303:                                        ; preds = %if.then300
  %155 = load i64, i64* %buffersize.addr, align 8, !dbg !14759
  %tobool304 = icmp ne i64 %155, 0, !dbg !14759
  br i1 %tobool304, label %land.lhs.true305, label %if.end308, !dbg !14761

land.lhs.true305:                                 ; preds = %if.end303
  %156 = load i64, i64* %orig_buffersize, align 8, !dbg !14762
  %tobool306 = icmp ne i64 %156, 0, !dbg !14762
  br i1 %tobool306, label %if.end308, label %if.then307, !dbg !14763

if.then307:                                       ; preds = %land.lhs.true305
  %157 = load i64, i64* %buffersize.addr, align 8, !dbg !14764
  store i64 %157, i64* %orig_buffersize, align 8, !dbg !14766
  store i64 0, i64* %buffersize.addr, align 8, !dbg !14767
  br label %if.end308, !dbg !14768

if.end308:                                        ; preds = %if.then307, %land.lhs.true305, %if.end303
  br label %do.body309, !dbg !14769

do.body309:                                       ; preds = %if.end308
  %158 = load i64, i64* %len, align 8, !dbg !14770
  %159 = load i64, i64* %buffersize.addr, align 8, !dbg !14770
  %cmp310 = icmp ult i64 %158, %159, !dbg !14770
  br i1 %cmp310, label %if.then312, label %if.end314, !dbg !14773

if.then312:                                       ; preds = %do.body309
  %160 = load i8*, i8** %buffer.addr, align 8, !dbg !14770
  %161 = load i64, i64* %len, align 8, !dbg !14770
  %arrayidx313 = getelementptr inbounds i8, i8* %160, i64 %161, !dbg !14770, !ctir !7
  store i8 39, i8* %arrayidx313, align 1, !dbg !14770
  br label %if.end314, !dbg !14770

if.end314:                                        ; preds = %if.then312, %do.body309
  %162 = load i64, i64* %len, align 8, !dbg !14773
  %inc315 = add i64 %162, 1, !dbg !14773
  store i64 %inc315, i64* %len, align 8, !dbg !14773
  br label %do.end316, !dbg !14773

do.end316:                                        ; preds = %if.end314
  br label %do.body317, !dbg !14774

do.body317:                                       ; preds = %do.end316
  %163 = load i64, i64* %len, align 8, !dbg !14775
  %164 = load i64, i64* %buffersize.addr, align 8, !dbg !14775
  %cmp318 = icmp ult i64 %163, %164, !dbg !14775
  br i1 %cmp318, label %if.then320, label %if.end322, !dbg !14778

if.then320:                                       ; preds = %do.body317
  %165 = load i8*, i8** %buffer.addr, align 8, !dbg !14775
  %166 = load i64, i64* %len, align 8, !dbg !14775
  %arrayidx321 = getelementptr inbounds i8, i8* %165, i64 %166, !dbg !14775, !ctir !7
  store i8 92, i8* %arrayidx321, align 1, !dbg !14775
  br label %if.end322, !dbg !14775

if.end322:                                        ; preds = %if.then320, %do.body317
  %167 = load i64, i64* %len, align 8, !dbg !14778
  %inc323 = add i64 %167, 1, !dbg !14778
  store i64 %inc323, i64* %len, align 8, !dbg !14778
  br label %do.end324, !dbg !14778

do.end324:                                        ; preds = %if.end322
  br label %do.body325, !dbg !14779

do.body325:                                       ; preds = %do.end324
  %168 = load i64, i64* %len, align 8, !dbg !14780
  %169 = load i64, i64* %buffersize.addr, align 8, !dbg !14780
  %cmp326 = icmp ult i64 %168, %169, !dbg !14780
  br i1 %cmp326, label %if.then328, label %if.end330, !dbg !14783

if.then328:                                       ; preds = %do.body325
  %170 = load i8*, i8** %buffer.addr, align 8, !dbg !14780
  %171 = load i64, i64* %len, align 8, !dbg !14780
  %arrayidx329 = getelementptr inbounds i8, i8* %170, i64 %171, !dbg !14780, !ctir !7
  store i8 39, i8* %arrayidx329, align 1, !dbg !14780
  br label %if.end330, !dbg !14780

if.end330:                                        ; preds = %if.then328, %do.body325
  %172 = load i64, i64* %len, align 8, !dbg !14783
  %inc331 = add i64 %172, 1, !dbg !14783
  store i64 %inc331, i64* %len, align 8, !dbg !14783
  br label %do.end332, !dbg !14783

do.end332:                                        ; preds = %if.end330
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !14784
  br label %if.end333, !dbg !14785

if.end333:                                        ; preds = %do.end332, %sw.bb297
  br label %sw.epilog564, !dbg !14786

sw.bb334:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  store i8 1, i8* %c_and_shell_quote_compat, align 1, !dbg !14787
  br label %sw.epilog564, !dbg !14788

sw.default335:                                    ; preds = %if.end80
  call void @llvm.dbg.declare(metadata i64* %m, metadata !14789, metadata !DIExpression()), !dbg !14791
  call void @llvm.dbg.declare(metadata i8* %printable, metadata !14792, metadata !DIExpression()), !dbg !14793
  %173 = load i8, i8* %unibyte_locale, align 1, !dbg !14794
  %tobool336 = trunc i8 %173 to i1, !dbg !14794
  br i1 %tobool336, label %if.then337, label %if.else346, !dbg !14796

if.then337:                                       ; preds = %sw.default335
  store i64 1, i64* %m, align 8, !dbg !14797
  %call338 = call i16** @__ctype_b_loc() #16, !dbg !14799
  %174 = load i16*, i16** %call338, align 8, !dbg !14799, !ctir !451
  %175 = load i8, i8* %c, align 1, !dbg !14799
  %conv339 = zext i8 %175 to i32, !dbg !14799
  %idxprom = sext i32 %conv339 to i64, !dbg !14799
  %arrayidx340 = getelementptr inbounds i16, i16* %174, i64 %idxprom, !dbg !14799, !ctir !451
  %176 = load i16, i16* %arrayidx340, align 2, !dbg !14799
  %conv341 = zext i16 %176 to i32, !dbg !14799
  %and342 = and i32 %conv341, 16384, !dbg !14799
  %cmp343 = icmp ne i32 %and342, 0, !dbg !14800
  %frombool345 = zext i1 %cmp343 to i8, !dbg !14801
  store i8 %frombool345, i8* %printable, align 1, !dbg !14801
  br label %if.end410, !dbg !14802

if.else346:                                       ; preds = %sw.default335
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %mbstate, metadata !14803, metadata !DIExpression()), !dbg !14805
  %177 = bitcast %struct.__mbstate_t* %mbstate to i8*, !dbg !14806
  call void @llvm.memset.p0i8.i64(i8* align 4 %177, i8 0, i64 8, i1 false), !dbg !14806
  store i64 0, i64* %m, align 8, !dbg !14807
  store i8 1, i8* %printable, align 1, !dbg !14808
  %178 = load i64, i64* %argsize.addr, align 8, !dbg !14809
  %cmp347 = icmp eq i64 %178, -1, !dbg !14811
  br i1 %cmp347, label %if.then349, label %if.end351, !dbg !14812

if.then349:                                       ; preds = %if.else346
  %179 = load i8*, i8** %arg.addr, align 8, !dbg !14813
  %call350 = call i64 @strlen(i8* %179) #14, !dbg !14814
  store i64 %call350, i64* %argsize.addr, align 8, !dbg !14815
  br label %if.end351, !dbg !14816

if.end351:                                        ; preds = %if.then349, %if.else346
  br label %do.body352, !dbg !14817

do.body352:                                       ; preds = %do.cond, %if.end351
  call void @llvm.dbg.declare(metadata i32* %w, metadata !14818, metadata !DIExpression()), !dbg !14820
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !14821, metadata !DIExpression()), !dbg !14822
  %180 = load i8*, i8** %arg.addr, align 8, !dbg !14823
  %181 = load i64, i64* %i, align 8, !dbg !14824
  %182 = load i64, i64* %m, align 8, !dbg !14825
  %add353 = add i64 %181, %182, !dbg !14826
  %arrayidx354 = getelementptr inbounds i8, i8* %180, i64 %add353, !dbg !14823, !ctir !90
  %183 = load i64, i64* %argsize.addr, align 8, !dbg !14827
  %184 = load i64, i64* %i, align 8, !dbg !14828
  %185 = load i64, i64* %m, align 8, !dbg !14829
  %add355 = add i64 %184, %185, !dbg !14830
  %sub = sub i64 %183, %add355, !dbg !14831
  %call356 = call i64 @rpl_mbrtowc(i32* %w, i8* %arrayidx354, i64 %sub, %struct.__mbstate_t* %mbstate), !dbg !14832
  store i64 %call356, i64* %bytes, align 8, !dbg !14822
  %186 = load i64, i64* %bytes, align 8, !dbg !14833
  %cmp357 = icmp eq i64 %186, 0, !dbg !14835
  br i1 %cmp357, label %if.then359, label %if.else360, !dbg !14836

if.then359:                                       ; preds = %do.body352
  br label %do.end409, !dbg !14837

if.else360:                                       ; preds = %do.body352
  %187 = load i64, i64* %bytes, align 8, !dbg !14838
  %cmp361 = icmp eq i64 %187, -1, !dbg !14840
  br i1 %cmp361, label %if.then363, label %if.else364, !dbg !14841

if.then363:                                       ; preds = %if.else360
  store i8 0, i8* %printable, align 1, !dbg !14842
  br label %do.end409, !dbg !14844

if.else364:                                       ; preds = %if.else360
  %188 = load i64, i64* %bytes, align 8, !dbg !14845
  %cmp365 = icmp eq i64 %188, -2, !dbg !14847
  br i1 %cmp365, label %if.then367, label %if.else376, !dbg !14848

if.then367:                                       ; preds = %if.else364
  store i8 0, i8* %printable, align 1, !dbg !14849
  br label %while.cond, !dbg !14851

while.cond:                                       ; preds = %while.body, %if.then367
  %189 = load i64, i64* %i, align 8, !dbg !14852
  %190 = load i64, i64* %m, align 8, !dbg !14853
  %add368 = add i64 %189, %190, !dbg !14854
  %191 = load i64, i64* %argsize.addr, align 8, !dbg !14855
  %cmp369 = icmp ult i64 %add368, %191, !dbg !14856
  br i1 %cmp369, label %land.rhs, label %land.end, !dbg !14857

land.rhs:                                         ; preds = %while.cond
  %192 = load i8*, i8** %arg.addr, align 8, !dbg !14858
  %193 = load i64, i64* %i, align 8, !dbg !14859
  %194 = load i64, i64* %m, align 8, !dbg !14860
  %add371 = add i64 %193, %194, !dbg !14861
  %arrayidx372 = getelementptr inbounds i8, i8* %192, i64 %add371, !dbg !14858, !ctir !90
  %195 = load i8, i8* %arrayidx372, align 1, !dbg !14858
  %conv373 = sext i8 %195 to i32, !dbg !14858
  %tobool374 = icmp ne i32 %conv373, 0, !dbg !14857
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %196 = phi i1 [ false, %while.cond ], [ %tobool374, %land.rhs ], !dbg !14862
  br i1 %196, label %while.body, label %while.end, !dbg !14851

while.body:                                       ; preds = %land.end
  %197 = load i64, i64* %m, align 8, !dbg !14863
  %inc375 = add i64 %197, 1, !dbg !14863
  store i64 %inc375, i64* %m, align 8, !dbg !14863
  br label %while.cond, !dbg !14851, !llvm.loop !14864

while.end:                                        ; preds = %land.end
  br label %do.end409, !dbg !14865

if.else376:                                       ; preds = %if.else364
  %198 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14866
  %tobool377 = trunc i8 %198 to i1, !dbg !14866
  br i1 %tobool377, label %land.lhs.true379, label %if.end397, !dbg !14869

land.lhs.true379:                                 ; preds = %if.else376
  %199 = load i32, i32* %quoting_style.addr, align 4, !dbg !14870
  %cmp380 = icmp eq i32 %199, 2, !dbg !14871
  br i1 %cmp380, label %if.then382, label %if.end397, !dbg !14872

if.then382:                                       ; preds = %land.lhs.true379
  call void @llvm.dbg.declare(metadata i64* %j, metadata !14873, metadata !DIExpression()), !dbg !14875
  store i64 1, i64* %j, align 8, !dbg !14876
  br label %for.cond383, !dbg !14878

for.cond383:                                      ; preds = %for.inc394, %if.then382
  %200 = load i64, i64* %j, align 8, !dbg !14879
  %201 = load i64, i64* %bytes, align 8, !dbg !14881
  %cmp384 = icmp ult i64 %200, %201, !dbg !14882
  br i1 %cmp384, label %for.body386, label %for.end396, !dbg !14883

for.body386:                                      ; preds = %for.cond383
  %202 = load i8*, i8** %arg.addr, align 8, !dbg !14884
  %203 = load i64, i64* %i, align 8, !dbg !14885
  %204 = load i64, i64* %m, align 8, !dbg !14886
  %add387 = add i64 %203, %204, !dbg !14887
  %205 = load i64, i64* %j, align 8, !dbg !14888
  %add388 = add i64 %add387, %205, !dbg !14889
  %arrayidx389 = getelementptr inbounds i8, i8* %202, i64 %add388, !dbg !14884, !ctir !90
  %206 = load i8, i8* %arrayidx389, align 1, !dbg !14884
  %conv390 = sext i8 %206 to i32, !dbg !14884
  switch i32 %conv390, label %sw.default392 [
    i32 91, label %sw.bb391
    i32 92, label %sw.bb391
    i32 94, label %sw.bb391
    i32 96, label %sw.bb391
    i32 124, label %sw.bb391
  ], !dbg !14890

sw.bb391:                                         ; preds = %for.body386, %for.body386, %for.body386, %for.body386, %for.body386
  br label %force_outer_quoting_style, !dbg !14891

sw.default392:                                    ; preds = %for.body386
  br label %sw.epilog393, !dbg !14893

sw.epilog393:                                     ; preds = %sw.default392
  br label %for.inc394, !dbg !14894

for.inc394:                                       ; preds = %sw.epilog393
  %207 = load i64, i64* %j, align 8, !dbg !14895
  %inc395 = add i64 %207, 1, !dbg !14895
  store i64 %inc395, i64* %j, align 8, !dbg !14895
  br label %for.cond383, !dbg !14896, !llvm.loop !14897

for.end396:                                       ; preds = %for.cond383
  br label %if.end397, !dbg !14899

if.end397:                                        ; preds = %for.end396, %land.lhs.true379, %if.else376
  %208 = load i32, i32* %w, align 4, !dbg !14900
  %call398 = call i32 @iswprint(i32 %208) #12, !dbg !14902
  %tobool399 = icmp ne i32 %call398, 0, !dbg !14902
  br i1 %tobool399, label %if.end401, label %if.then400, !dbg !14903

if.then400:                                       ; preds = %if.end397
  store i8 0, i8* %printable, align 1, !dbg !14904
  br label %if.end401, !dbg !14905

if.end401:                                        ; preds = %if.then400, %if.end397
  %209 = load i64, i64* %bytes, align 8, !dbg !14906
  %210 = load i64, i64* %m, align 8, !dbg !14907
  %add402 = add i64 %210, %209, !dbg !14907
  store i64 %add402, i64* %m, align 8, !dbg !14907
  br label %if.end403

if.end403:                                        ; preds = %if.end401
  br label %if.end404

if.end404:                                        ; preds = %if.end403
  br label %if.end405

if.end405:                                        ; preds = %if.end404
  br label %do.cond, !dbg !14908

do.cond:                                          ; preds = %if.end405
  %call406 = call i32 @mbsinit(%struct.__mbstate_t* %mbstate) #14, !dbg !14909
  %tobool407 = icmp ne i32 %call406, 0, !dbg !14910
  %lnot408 = xor i1 %tobool407, true, !dbg !14910
  br i1 %lnot408, label %do.body352, label %do.end409, !dbg !14908, !llvm.loop !14911

do.end409:                                        ; preds = %do.cond, %while.end, %if.then363, %if.then359
  br label %if.end410

if.end410:                                        ; preds = %do.end409, %if.then337
  %211 = load i8, i8* %printable, align 1, !dbg !14913
  %tobool411 = trunc i8 %211 to i1, !dbg !14913
  %frombool412 = zext i1 %tobool411 to i8, !dbg !14914
  store i8 %frombool412, i8* %c_and_shell_quote_compat, align 1, !dbg !14914
  %212 = load i64, i64* %m, align 8, !dbg !14915
  %cmp413 = icmp ult i64 1, %212, !dbg !14917
  br i1 %cmp413, label %if.then419, label %lor.lhs.false, !dbg !14918

lor.lhs.false:                                    ; preds = %if.end410
  %213 = load i8, i8* %backslash_escapes, align 1, !dbg !14919
  %tobool415 = trunc i8 %213 to i1, !dbg !14919
  br i1 %tobool415, label %land.lhs.true417, label %if.end563, !dbg !14920

land.lhs.true417:                                 ; preds = %lor.lhs.false
  %214 = load i8, i8* %printable, align 1, !dbg !14921
  %tobool418 = trunc i8 %214 to i1, !dbg !14921
  br i1 %tobool418, label %if.end563, label %if.then419, !dbg !14922

if.then419:                                       ; preds = %land.lhs.true417, %if.end410
  call void @llvm.dbg.declare(metadata i64* %ilim, metadata !14923, metadata !DIExpression()), !dbg !14925
  %215 = load i64, i64* %i, align 8, !dbg !14926
  %216 = load i64, i64* %m, align 8, !dbg !14927
  %add420 = add i64 %215, %216, !dbg !14928
  store i64 %add420, i64* %ilim, align 8, !dbg !14925
  br label %for.cond421, !dbg !14929

for.cond421:                                      ; preds = %do.end559, %if.then419
  %217 = load i8, i8* %backslash_escapes, align 1, !dbg !14930
  %tobool422 = trunc i8 %217 to i1, !dbg !14930
  br i1 %tobool422, label %land.lhs.true424, label %if.else505, !dbg !14935

land.lhs.true424:                                 ; preds = %for.cond421
  %218 = load i8, i8* %printable, align 1, !dbg !14936
  %tobool425 = trunc i8 %218 to i1, !dbg !14936
  br i1 %tobool425, label %if.else505, label %if.then426, !dbg !14937

if.then426:                                       ; preds = %land.lhs.true424
  br label %do.body427, !dbg !14938

do.body427:                                       ; preds = %if.then426
  %219 = load i8, i8* %elide_outer_quotes, align 1, !dbg !14940
  %tobool428 = trunc i8 %219 to i1, !dbg !14940
  br i1 %tobool428, label %if.then429, label %if.end430, !dbg !14943

if.then429:                                       ; preds = %do.body427
  br label %force_outer_quoting_style, !dbg !14940

if.end430:                                        ; preds = %do.body427
  store i8 1, i8* %escaping, align 1, !dbg !14943
  %220 = load i32, i32* %quoting_style.addr, align 4, !dbg !14944
  %cmp431 = icmp eq i32 %220, 2, !dbg !14944
  br i1 %cmp431, label %land.lhs.true433, label %if.end463, !dbg !14944

land.lhs.true433:                                 ; preds = %if.end430
  %221 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !14944
  %tobool434 = trunc i8 %221 to i1, !dbg !14944
  br i1 %tobool434, label %if.end463, label %if.then435, !dbg !14943

if.then435:                                       ; preds = %land.lhs.true433
  br label %do.body436, !dbg !14946

do.body436:                                       ; preds = %if.then435
  %222 = load i64, i64* %len, align 8, !dbg !14948
  %223 = load i64, i64* %buffersize.addr, align 8, !dbg !14948
  %cmp437 = icmp ult i64 %222, %223, !dbg !14948
  br i1 %cmp437, label %if.then439, label %if.end441, !dbg !14951

if.then439:                                       ; preds = %do.body436
  %224 = load i8*, i8** %buffer.addr, align 8, !dbg !14948
  %225 = load i64, i64* %len, align 8, !dbg !14948
  %arrayidx440 = getelementptr inbounds i8, i8* %224, i64 %225, !dbg !14948, !ctir !7
  store i8 39, i8* %arrayidx440, align 1, !dbg !14948
  br label %if.end441, !dbg !14948

if.end441:                                        ; preds = %if.then439, %do.body436
  %226 = load i64, i64* %len, align 8, !dbg !14951
  %inc442 = add i64 %226, 1, !dbg !14951
  store i64 %inc442, i64* %len, align 8, !dbg !14951
  br label %do.end444, !dbg !14951

do.end444:                                        ; preds = %if.end441
  br label %do.body445, !dbg !14946

do.body445:                                       ; preds = %do.end444
  %227 = load i64, i64* %len, align 8, !dbg !14952
  %228 = load i64, i64* %buffersize.addr, align 8, !dbg !14952
  %cmp446 = icmp ult i64 %227, %228, !dbg !14952
  br i1 %cmp446, label %if.then448, label %if.end450, !dbg !14955

if.then448:                                       ; preds = %do.body445
  %229 = load i8*, i8** %buffer.addr, align 8, !dbg !14952
  %230 = load i64, i64* %len, align 8, !dbg !14952
  %arrayidx449 = getelementptr inbounds i8, i8* %229, i64 %230, !dbg !14952, !ctir !7
  store i8 36, i8* %arrayidx449, align 1, !dbg !14952
  br label %if.end450, !dbg !14952

if.end450:                                        ; preds = %if.then448, %do.body445
  %231 = load i64, i64* %len, align 8, !dbg !14955
  %inc451 = add i64 %231, 1, !dbg !14955
  store i64 %inc451, i64* %len, align 8, !dbg !14955
  br label %do.end453, !dbg !14955

do.end453:                                        ; preds = %if.end450
  br label %do.body454, !dbg !14946

do.body454:                                       ; preds = %do.end453
  %232 = load i64, i64* %len, align 8, !dbg !14956
  %233 = load i64, i64* %buffersize.addr, align 8, !dbg !14956
  %cmp455 = icmp ult i64 %232, %233, !dbg !14956
  br i1 %cmp455, label %if.then457, label %if.end459, !dbg !14959

if.then457:                                       ; preds = %do.body454
  %234 = load i8*, i8** %buffer.addr, align 8, !dbg !14956
  %235 = load i64, i64* %len, align 8, !dbg !14956
  %arrayidx458 = getelementptr inbounds i8, i8* %234, i64 %235, !dbg !14956, !ctir !7
  store i8 39, i8* %arrayidx458, align 1, !dbg !14956
  br label %if.end459, !dbg !14956

if.end459:                                        ; preds = %if.then457, %do.body454
  %236 = load i64, i64* %len, align 8, !dbg !14959
  %inc460 = add i64 %236, 1, !dbg !14959
  store i64 %inc460, i64* %len, align 8, !dbg !14959
  br label %do.end462, !dbg !14959

do.end462:                                        ; preds = %if.end459
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !14946
  br label %if.end463, !dbg !14946

if.end463:                                        ; preds = %do.end462, %land.lhs.true433, %if.end430
  br label %do.body464, !dbg !14943

do.body464:                                       ; preds = %if.end463
  %237 = load i64, i64* %len, align 8, !dbg !14960
  %238 = load i64, i64* %buffersize.addr, align 8, !dbg !14960
  %cmp465 = icmp ult i64 %237, %238, !dbg !14960
  br i1 %cmp465, label %if.then467, label %if.end469, !dbg !14963

if.then467:                                       ; preds = %do.body464
  %239 = load i8*, i8** %buffer.addr, align 8, !dbg !14960
  %240 = load i64, i64* %len, align 8, !dbg !14960
  %arrayidx468 = getelementptr inbounds i8, i8* %239, i64 %240, !dbg !14960, !ctir !7
  store i8 92, i8* %arrayidx468, align 1, !dbg !14960
  br label %if.end469, !dbg !14960

if.end469:                                        ; preds = %if.then467, %do.body464
  %241 = load i64, i64* %len, align 8, !dbg !14963
  %inc470 = add i64 %241, 1, !dbg !14963
  store i64 %inc470, i64* %len, align 8, !dbg !14963
  br label %do.end472, !dbg !14963

do.end472:                                        ; preds = %if.end469
  br label %do.end474, !dbg !14943

do.end474:                                        ; preds = %do.end472
  br label %do.body475, !dbg !14964

do.body475:                                       ; preds = %do.end474
  %242 = load i64, i64* %len, align 8, !dbg !14965
  %243 = load i64, i64* %buffersize.addr, align 8, !dbg !14965
  %cmp476 = icmp ult i64 %242, %243, !dbg !14965
  br i1 %cmp476, label %if.then478, label %if.end483, !dbg !14968

if.then478:                                       ; preds = %do.body475
  %244 = load i8, i8* %c, align 1, !dbg !14965
  %conv479 = zext i8 %244 to i32, !dbg !14965
  %shr = ashr i32 %conv479, 6, !dbg !14965
  %add480 = add nsw i32 48, %shr, !dbg !14965
  %conv481 = trunc i32 %add480 to i8, !dbg !14965
  %245 = load i8*, i8** %buffer.addr, align 8, !dbg !14965
  %246 = load i64, i64* %len, align 8, !dbg !14965
  %arrayidx482 = getelementptr inbounds i8, i8* %245, i64 %246, !dbg !14965, !ctir !7
  store i8 %conv481, i8* %arrayidx482, align 1, !dbg !14965
  br label %if.end483, !dbg !14965

if.end483:                                        ; preds = %if.then478, %do.body475
  %247 = load i64, i64* %len, align 8, !dbg !14968
  %inc484 = add i64 %247, 1, !dbg !14968
  store i64 %inc484, i64* %len, align 8, !dbg !14968
  br label %do.end486, !dbg !14968

do.end486:                                        ; preds = %if.end483
  br label %do.body487, !dbg !14969

do.body487:                                       ; preds = %do.end486
  %248 = load i64, i64* %len, align 8, !dbg !14970
  %249 = load i64, i64* %buffersize.addr, align 8, !dbg !14970
  %cmp488 = icmp ult i64 %248, %249, !dbg !14970
  br i1 %cmp488, label %if.then490, label %if.end497, !dbg !14973

if.then490:                                       ; preds = %do.body487
  %250 = load i8, i8* %c, align 1, !dbg !14970
  %conv491 = zext i8 %250 to i32, !dbg !14970
  %shr492 = ashr i32 %conv491, 3, !dbg !14970
  %and493 = and i32 %shr492, 7, !dbg !14970
  %add494 = add nsw i32 48, %and493, !dbg !14970
  %conv495 = trunc i32 %add494 to i8, !dbg !14970
  %251 = load i8*, i8** %buffer.addr, align 8, !dbg !14970
  %252 = load i64, i64* %len, align 8, !dbg !14970
  %arrayidx496 = getelementptr inbounds i8, i8* %251, i64 %252, !dbg !14970, !ctir !7
  store i8 %conv495, i8* %arrayidx496, align 1, !dbg !14970
  br label %if.end497, !dbg !14970

if.end497:                                        ; preds = %if.then490, %do.body487
  %253 = load i64, i64* %len, align 8, !dbg !14973
  %inc498 = add i64 %253, 1, !dbg !14973
  store i64 %inc498, i64* %len, align 8, !dbg !14973
  br label %do.end500, !dbg !14973

do.end500:                                        ; preds = %if.end497
  %254 = load i8, i8* %c, align 1, !dbg !14974
  %conv501 = zext i8 %254 to i32, !dbg !14974
  %and502 = and i32 %conv501, 7, !dbg !14975
  %add503 = add nsw i32 48, %and502, !dbg !14976
  %conv504 = trunc i32 %add503 to i8, !dbg !14977
  store i8 %conv504, i8* %c, align 1, !dbg !14978
  br label %if.end518, !dbg !14979

if.else505:                                       ; preds = %land.lhs.true424, %for.cond421
  %255 = load i8, i8* %is_right_quote, align 1, !dbg !14980
  %tobool506 = trunc i8 %255 to i1, !dbg !14980
  br i1 %tobool506, label %if.then507, label %if.end517, !dbg !14982

if.then507:                                       ; preds = %if.else505
  br label %do.body508, !dbg !14983

do.body508:                                       ; preds = %if.then507
  %256 = load i64, i64* %len, align 8, !dbg !14985
  %257 = load i64, i64* %buffersize.addr, align 8, !dbg !14985
  %cmp509 = icmp ult i64 %256, %257, !dbg !14985
  br i1 %cmp509, label %if.then511, label %if.end513, !dbg !14988

if.then511:                                       ; preds = %do.body508
  %258 = load i8*, i8** %buffer.addr, align 8, !dbg !14985
  %259 = load i64, i64* %len, align 8, !dbg !14985
  %arrayidx512 = getelementptr inbounds i8, i8* %258, i64 %259, !dbg !14985, !ctir !7
  store i8 92, i8* %arrayidx512, align 1, !dbg !14985
  br label %if.end513, !dbg !14985

if.end513:                                        ; preds = %if.then511, %do.body508
  %260 = load i64, i64* %len, align 8, !dbg !14988
  %inc514 = add i64 %260, 1, !dbg !14988
  store i64 %inc514, i64* %len, align 8, !dbg !14988
  br label %do.end516, !dbg !14988

do.end516:                                        ; preds = %if.end513
  store i8 0, i8* %is_right_quote, align 1, !dbg !14989
  br label %if.end517, !dbg !14990

if.end517:                                        ; preds = %do.end516, %if.else505
  br label %if.end518

if.end518:                                        ; preds = %if.end517, %do.end500
  %261 = load i64, i64* %ilim, align 8, !dbg !14991
  %262 = load i64, i64* %i, align 8, !dbg !14993
  %add519 = add i64 %262, 1, !dbg !14994
  %cmp520 = icmp ule i64 %261, %add519, !dbg !14995
  br i1 %cmp520, label %if.then522, label %if.end523, !dbg !14996

if.then522:                                       ; preds = %if.end518
  br label %for.end562, !dbg !14997

if.end523:                                        ; preds = %if.end518
  br label %do.body524, !dbg !14998

do.body524:                                       ; preds = %if.end523
  %263 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !14999
  %tobool525 = trunc i8 %263 to i1, !dbg !14999
  br i1 %tobool525, label %land.lhs.true527, label %if.end548, !dbg !14999

land.lhs.true527:                                 ; preds = %do.body524
  %264 = load i8, i8* %escaping, align 1, !dbg !14999
  %tobool528 = trunc i8 %264 to i1, !dbg !14999
  br i1 %tobool528, label %if.end548, label %if.then529, !dbg !15002

if.then529:                                       ; preds = %land.lhs.true527
  br label %do.body530, !dbg !15003

do.body530:                                       ; preds = %if.then529
  %265 = load i64, i64* %len, align 8, !dbg !15005
  %266 = load i64, i64* %buffersize.addr, align 8, !dbg !15005
  %cmp531 = icmp ult i64 %265, %266, !dbg !15005
  br i1 %cmp531, label %if.then533, label %if.end535, !dbg !15008

if.then533:                                       ; preds = %do.body530
  %267 = load i8*, i8** %buffer.addr, align 8, !dbg !15005
  %268 = load i64, i64* %len, align 8, !dbg !15005
  %arrayidx534 = getelementptr inbounds i8, i8* %267, i64 %268, !dbg !15005, !ctir !7
  store i8 39, i8* %arrayidx534, align 1, !dbg !15005
  br label %if.end535, !dbg !15005

if.end535:                                        ; preds = %if.then533, %do.body530
  %269 = load i64, i64* %len, align 8, !dbg !15008
  %inc536 = add i64 %269, 1, !dbg !15008
  store i64 %inc536, i64* %len, align 8, !dbg !15008
  br label %do.end538, !dbg !15008

do.end538:                                        ; preds = %if.end535
  br label %do.body539, !dbg !15003

do.body539:                                       ; preds = %do.end538
  %270 = load i64, i64* %len, align 8, !dbg !15009
  %271 = load i64, i64* %buffersize.addr, align 8, !dbg !15009
  %cmp540 = icmp ult i64 %270, %271, !dbg !15009
  br i1 %cmp540, label %if.then542, label %if.end544, !dbg !15012

if.then542:                                       ; preds = %do.body539
  %272 = load i8*, i8** %buffer.addr, align 8, !dbg !15009
  %273 = load i64, i64* %len, align 8, !dbg !15009
  %arrayidx543 = getelementptr inbounds i8, i8* %272, i64 %273, !dbg !15009, !ctir !7
  store i8 39, i8* %arrayidx543, align 1, !dbg !15009
  br label %if.end544, !dbg !15009

if.end544:                                        ; preds = %if.then542, %do.body539
  %274 = load i64, i64* %len, align 8, !dbg !15012
  %inc545 = add i64 %274, 1, !dbg !15012
  store i64 %inc545, i64* %len, align 8, !dbg !15012
  br label %do.end547, !dbg !15012

do.end547:                                        ; preds = %if.end544
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !15003
  br label %if.end548, !dbg !15003

if.end548:                                        ; preds = %do.end547, %land.lhs.true527, %do.body524
  br label %do.end550, !dbg !15002

do.end550:                                        ; preds = %if.end548
  br label %do.body551, !dbg !15013

do.body551:                                       ; preds = %do.end550
  %275 = load i64, i64* %len, align 8, !dbg !15014
  %276 = load i64, i64* %buffersize.addr, align 8, !dbg !15014
  %cmp552 = icmp ult i64 %275, %276, !dbg !15014
  br i1 %cmp552, label %if.then554, label %if.end556, !dbg !15017

if.then554:                                       ; preds = %do.body551
  %277 = load i8, i8* %c, align 1, !dbg !15014
  %278 = load i8*, i8** %buffer.addr, align 8, !dbg !15014
  %279 = load i64, i64* %len, align 8, !dbg !15014
  %arrayidx555 = getelementptr inbounds i8, i8* %278, i64 %279, !dbg !15014, !ctir !7
  store i8 %277, i8* %arrayidx555, align 1, !dbg !15014
  br label %if.end556, !dbg !15014

if.end556:                                        ; preds = %if.then554, %do.body551
  %280 = load i64, i64* %len, align 8, !dbg !15017
  %inc557 = add i64 %280, 1, !dbg !15017
  store i64 %inc557, i64* %len, align 8, !dbg !15017
  br label %do.end559, !dbg !15017

do.end559:                                        ; preds = %if.end556
  %281 = load i8*, i8** %arg.addr, align 8, !dbg !15018
  %282 = load i64, i64* %i, align 8, !dbg !15019
  %inc560 = add i64 %282, 1, !dbg !15019
  store i64 %inc560, i64* %i, align 8, !dbg !15019
  %arrayidx561 = getelementptr inbounds i8, i8* %281, i64 %inc560, !dbg !15018, !ctir !90
  %283 = load i8, i8* %arrayidx561, align 1, !dbg !15018
  store i8 %283, i8* %c, align 1, !dbg !15020
  br label %for.cond421, !dbg !15021, !llvm.loop !15022

for.end562:                                       ; preds = %if.then522
  br label %store_c, !dbg !15025

if.end563:                                        ; preds = %land.lhs.true417, %lor.lhs.false
  br label %sw.epilog564, !dbg !15026

sw.epilog564:                                     ; preds = %if.end563, %sw.bb334, %if.end333, %if.end296, %if.then286, %if.then281, %if.end269, %sw.epilog235, %if.end169
  %284 = load i8, i8* %backslash_escapes, align 1, !dbg !15027
  %tobool565 = trunc i8 %284 to i1, !dbg !15027
  br i1 %tobool565, label %land.lhs.true567, label %lor.lhs.false570, !dbg !15029

land.lhs.true567:                                 ; preds = %sw.epilog564
  %285 = load i32, i32* %quoting_style.addr, align 4, !dbg !15030
  %cmp568 = icmp ne i32 %285, 2, !dbg !15031
  br i1 %cmp568, label %land.lhs.true573, label %lor.lhs.false570, !dbg !15032

lor.lhs.false570:                                 ; preds = %land.lhs.true567, %sw.epilog564
  %286 = load i8, i8* %elide_outer_quotes, align 1, !dbg !15033
  %tobool571 = trunc i8 %286 to i1, !dbg !15033
  br i1 %tobool571, label %land.lhs.true573, label %land.lhs.true582, !dbg !15034

land.lhs.true573:                                 ; preds = %lor.lhs.false570, %land.lhs.true567
  %287 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !15035
  %tobool574 = icmp ne i32* %287, null, !dbg !15035
  br i1 %tobool574, label %land.lhs.true575, label %land.lhs.true582, !dbg !15036

land.lhs.true575:                                 ; preds = %land.lhs.true573
  %288 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !15037
  %289 = load i8, i8* %c, align 1, !dbg !15038
  %conv576 = zext i8 %289 to i64, !dbg !15038
  %div = udiv i64 %conv576, 32, !dbg !15039
  %arrayidx577 = getelementptr inbounds i32, i32* %288, i64 %div, !dbg !15037, !ctir !1095
  %290 = load i32, i32* %arrayidx577, align 4, !dbg !15037
  %291 = load i8, i8* %c, align 1, !dbg !15040
  %conv578 = zext i8 %291 to i64, !dbg !15040
  %rem = urem i64 %conv578, 32, !dbg !15041
  %sh_prom = trunc i64 %rem to i32, !dbg !15042
  %shr579 = lshr i32 %290, %sh_prom, !dbg !15042
  %and580 = and i32 %shr579, 1, !dbg !15043
  %tobool581 = icmp ne i32 %and580, 0, !dbg !15043
  br i1 %tobool581, label %if.end585, label %land.lhs.true582, !dbg !15044

land.lhs.true582:                                 ; preds = %land.lhs.true575, %land.lhs.true573, %lor.lhs.false570
  %292 = load i8, i8* %is_right_quote, align 1, !dbg !15045
  %tobool583 = trunc i8 %292 to i1, !dbg !15045
  br i1 %tobool583, label %if.end585, label %if.then584, !dbg !15046

if.then584:                                       ; preds = %land.lhs.true582
  br label %store_c, !dbg !15047

if.end585:                                        ; preds = %land.lhs.true582, %land.lhs.true575
  br label %store_escape, !dbg !15045

store_escape:                                     ; preds = %if.end585, %if.then268
  call void @llvm.dbg.label(metadata !15048), !dbg !15049
  br label %do.body586, !dbg !15050

do.body586:                                       ; preds = %store_escape
  %293 = load i8, i8* %elide_outer_quotes, align 1, !dbg !15051
  %tobool587 = trunc i8 %293 to i1, !dbg !15051
  br i1 %tobool587, label %if.then588, label %if.end589, !dbg !15054

if.then588:                                       ; preds = %do.body586
  br label %force_outer_quoting_style, !dbg !15051

if.end589:                                        ; preds = %do.body586
  store i8 1, i8* %escaping, align 1, !dbg !15054
  %294 = load i32, i32* %quoting_style.addr, align 4, !dbg !15055
  %cmp590 = icmp eq i32 %294, 2, !dbg !15055
  br i1 %cmp590, label %land.lhs.true592, label %if.end622, !dbg !15055

land.lhs.true592:                                 ; preds = %if.end589
  %295 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !15055
  %tobool593 = trunc i8 %295 to i1, !dbg !15055
  br i1 %tobool593, label %if.end622, label %if.then594, !dbg !15054

if.then594:                                       ; preds = %land.lhs.true592
  br label %do.body595, !dbg !15057

do.body595:                                       ; preds = %if.then594
  %296 = load i64, i64* %len, align 8, !dbg !15059
  %297 = load i64, i64* %buffersize.addr, align 8, !dbg !15059
  %cmp596 = icmp ult i64 %296, %297, !dbg !15059
  br i1 %cmp596, label %if.then598, label %if.end600, !dbg !15062

if.then598:                                       ; preds = %do.body595
  %298 = load i8*, i8** %buffer.addr, align 8, !dbg !15059
  %299 = load i64, i64* %len, align 8, !dbg !15059
  %arrayidx599 = getelementptr inbounds i8, i8* %298, i64 %299, !dbg !15059, !ctir !7
  store i8 39, i8* %arrayidx599, align 1, !dbg !15059
  br label %if.end600, !dbg !15059

if.end600:                                        ; preds = %if.then598, %do.body595
  %300 = load i64, i64* %len, align 8, !dbg !15062
  %inc601 = add i64 %300, 1, !dbg !15062
  store i64 %inc601, i64* %len, align 8, !dbg !15062
  br label %do.end603, !dbg !15062

do.end603:                                        ; preds = %if.end600
  br label %do.body604, !dbg !15057

do.body604:                                       ; preds = %do.end603
  %301 = load i64, i64* %len, align 8, !dbg !15063
  %302 = load i64, i64* %buffersize.addr, align 8, !dbg !15063
  %cmp605 = icmp ult i64 %301, %302, !dbg !15063
  br i1 %cmp605, label %if.then607, label %if.end609, !dbg !15066

if.then607:                                       ; preds = %do.body604
  %303 = load i8*, i8** %buffer.addr, align 8, !dbg !15063
  %304 = load i64, i64* %len, align 8, !dbg !15063
  %arrayidx608 = getelementptr inbounds i8, i8* %303, i64 %304, !dbg !15063, !ctir !7
  store i8 36, i8* %arrayidx608, align 1, !dbg !15063
  br label %if.end609, !dbg !15063

if.end609:                                        ; preds = %if.then607, %do.body604
  %305 = load i64, i64* %len, align 8, !dbg !15066
  %inc610 = add i64 %305, 1, !dbg !15066
  store i64 %inc610, i64* %len, align 8, !dbg !15066
  br label %do.end612, !dbg !15066

do.end612:                                        ; preds = %if.end609
  br label %do.body613, !dbg !15057

do.body613:                                       ; preds = %do.end612
  %306 = load i64, i64* %len, align 8, !dbg !15067
  %307 = load i64, i64* %buffersize.addr, align 8, !dbg !15067
  %cmp614 = icmp ult i64 %306, %307, !dbg !15067
  br i1 %cmp614, label %if.then616, label %if.end618, !dbg !15070

if.then616:                                       ; preds = %do.body613
  %308 = load i8*, i8** %buffer.addr, align 8, !dbg !15067
  %309 = load i64, i64* %len, align 8, !dbg !15067
  %arrayidx617 = getelementptr inbounds i8, i8* %308, i64 %309, !dbg !15067, !ctir !7
  store i8 39, i8* %arrayidx617, align 1, !dbg !15067
  br label %if.end618, !dbg !15067

if.end618:                                        ; preds = %if.then616, %do.body613
  %310 = load i64, i64* %len, align 8, !dbg !15070
  %inc619 = add i64 %310, 1, !dbg !15070
  store i64 %inc619, i64* %len, align 8, !dbg !15070
  br label %do.end621, !dbg !15070

do.end621:                                        ; preds = %if.end618
  store i8 1, i8* %pending_shell_escape_end, align 1, !dbg !15057
  br label %if.end622, !dbg !15057

if.end622:                                        ; preds = %do.end621, %land.lhs.true592, %if.end589
  br label %do.body623, !dbg !15054

do.body623:                                       ; preds = %if.end622
  %311 = load i64, i64* %len, align 8, !dbg !15071
  %312 = load i64, i64* %buffersize.addr, align 8, !dbg !15071
  %cmp624 = icmp ult i64 %311, %312, !dbg !15071
  br i1 %cmp624, label %if.then626, label %if.end628, !dbg !15074

if.then626:                                       ; preds = %do.body623
  %313 = load i8*, i8** %buffer.addr, align 8, !dbg !15071
  %314 = load i64, i64* %len, align 8, !dbg !15071
  %arrayidx627 = getelementptr inbounds i8, i8* %313, i64 %314, !dbg !15071, !ctir !7
  store i8 92, i8* %arrayidx627, align 1, !dbg !15071
  br label %if.end628, !dbg !15071

if.end628:                                        ; preds = %if.then626, %do.body623
  %315 = load i64, i64* %len, align 8, !dbg !15074
  %inc629 = add i64 %315, 1, !dbg !15074
  store i64 %inc629, i64* %len, align 8, !dbg !15074
  br label %do.end631, !dbg !15074

do.end631:                                        ; preds = %if.end628
  br label %do.end633, !dbg !15054

do.end633:                                        ; preds = %do.end631
  br label %store_c, !dbg !15054

store_c:                                          ; preds = %do.end633, %if.then584, %for.end562, %if.then258, %if.end249
  call void @llvm.dbg.label(metadata !15075), !dbg !15076
  br label %do.body634, !dbg !15077

do.body634:                                       ; preds = %store_c
  %316 = load i8, i8* %pending_shell_escape_end, align 1, !dbg !15078
  %tobool635 = trunc i8 %316 to i1, !dbg !15078
  br i1 %tobool635, label %land.lhs.true637, label %if.end658, !dbg !15078

land.lhs.true637:                                 ; preds = %do.body634
  %317 = load i8, i8* %escaping, align 1, !dbg !15078
  %tobool638 = trunc i8 %317 to i1, !dbg !15078
  br i1 %tobool638, label %if.end658, label %if.then639, !dbg !15081

if.then639:                                       ; preds = %land.lhs.true637
  br label %do.body640, !dbg !15082

do.body640:                                       ; preds = %if.then639
  %318 = load i64, i64* %len, align 8, !dbg !15084
  %319 = load i64, i64* %buffersize.addr, align 8, !dbg !15084
  %cmp641 = icmp ult i64 %318, %319, !dbg !15084
  br i1 %cmp641, label %if.then643, label %if.end645, !dbg !15087

if.then643:                                       ; preds = %do.body640
  %320 = load i8*, i8** %buffer.addr, align 8, !dbg !15084
  %321 = load i64, i64* %len, align 8, !dbg !15084
  %arrayidx644 = getelementptr inbounds i8, i8* %320, i64 %321, !dbg !15084, !ctir !7
  store i8 39, i8* %arrayidx644, align 1, !dbg !15084
  br label %if.end645, !dbg !15084

if.end645:                                        ; preds = %if.then643, %do.body640
  %322 = load i64, i64* %len, align 8, !dbg !15087
  %inc646 = add i64 %322, 1, !dbg !15087
  store i64 %inc646, i64* %len, align 8, !dbg !15087
  br label %do.end648, !dbg !15087

do.end648:                                        ; preds = %if.end645
  br label %do.body649, !dbg !15082

do.body649:                                       ; preds = %do.end648
  %323 = load i64, i64* %len, align 8, !dbg !15088
  %324 = load i64, i64* %buffersize.addr, align 8, !dbg !15088
  %cmp650 = icmp ult i64 %323, %324, !dbg !15088
  br i1 %cmp650, label %if.then652, label %if.end654, !dbg !15091

if.then652:                                       ; preds = %do.body649
  %325 = load i8*, i8** %buffer.addr, align 8, !dbg !15088
  %326 = load i64, i64* %len, align 8, !dbg !15088
  %arrayidx653 = getelementptr inbounds i8, i8* %325, i64 %326, !dbg !15088, !ctir !7
  store i8 39, i8* %arrayidx653, align 1, !dbg !15088
  br label %if.end654, !dbg !15088

if.end654:                                        ; preds = %if.then652, %do.body649
  %327 = load i64, i64* %len, align 8, !dbg !15091
  %inc655 = add i64 %327, 1, !dbg !15091
  store i64 %inc655, i64* %len, align 8, !dbg !15091
  br label %do.end657, !dbg !15091

do.end657:                                        ; preds = %if.end654
  store i8 0, i8* %pending_shell_escape_end, align 1, !dbg !15082
  br label %if.end658, !dbg !15082

if.end658:                                        ; preds = %do.end657, %land.lhs.true637, %do.body634
  br label %do.end660, !dbg !15081

do.end660:                                        ; preds = %if.end658
  br label %do.body661, !dbg !15092

do.body661:                                       ; preds = %do.end660
  %328 = load i64, i64* %len, align 8, !dbg !15093
  %329 = load i64, i64* %buffersize.addr, align 8, !dbg !15093
  %cmp662 = icmp ult i64 %328, %329, !dbg !15093
  br i1 %cmp662, label %if.then664, label %if.end666, !dbg !15096

if.then664:                                       ; preds = %do.body661
  %330 = load i8, i8* %c, align 1, !dbg !15093
  %331 = load i8*, i8** %buffer.addr, align 8, !dbg !15093
  %332 = load i64, i64* %len, align 8, !dbg !15093
  %arrayidx665 = getelementptr inbounds i8, i8* %331, i64 %332, !dbg !15093, !ctir !7
  store i8 %330, i8* %arrayidx665, align 1, !dbg !15093
  br label %if.end666, !dbg !15093

if.end666:                                        ; preds = %if.then664, %do.body661
  %333 = load i64, i64* %len, align 8, !dbg !15096
  %inc667 = add i64 %333, 1, !dbg !15096
  store i64 %inc667, i64* %len, align 8, !dbg !15096
  br label %do.end669, !dbg !15096

do.end669:                                        ; preds = %if.end666
  %334 = load i8, i8* %c_and_shell_quote_compat, align 1, !dbg !15097
  %tobool670 = trunc i8 %334 to i1, !dbg !15097
  br i1 %tobool670, label %if.end672, label %if.then671, !dbg !15099

if.then671:                                       ; preds = %do.end669
  store i8 0, i8* %all_c_and_shell_quote_compat, align 1, !dbg !15100
  br label %if.end672, !dbg !15101

if.end672:                                        ; preds = %if.then671, %do.end669
  br label %for.inc673, !dbg !15102

for.inc673:                                       ; preds = %if.end672, %if.then167
  %335 = load i64, i64* %i, align 8, !dbg !15103
  %inc674 = add i64 %335, 1, !dbg !15103
  store i64 %inc674, i64* %i, align 8, !dbg !15103
  br label %for.cond44, !dbg !15104, !llvm.loop !15105

for.end675:                                       ; preds = %cond.end
  %336 = load i64, i64* %len, align 8, !dbg !15107
  %cmp676 = icmp eq i64 %336, 0, !dbg !15109
  br i1 %cmp676, label %land.lhs.true678, label %if.end685, !dbg !15110

land.lhs.true678:                                 ; preds = %for.end675
  %337 = load i32, i32* %quoting_style.addr, align 4, !dbg !15111
  %cmp679 = icmp eq i32 %337, 2, !dbg !15112
  br i1 %cmp679, label %land.lhs.true681, label %if.end685, !dbg !15113

land.lhs.true681:                                 ; preds = %land.lhs.true678
  %338 = load i8, i8* %elide_outer_quotes, align 1, !dbg !15114
  %tobool682 = trunc i8 %338 to i1, !dbg !15114
  br i1 %tobool682, label %if.then684, label %if.end685, !dbg !15115

if.then684:                                       ; preds = %land.lhs.true681
  br label %force_outer_quoting_style, !dbg !15116

if.end685:                                        ; preds = %land.lhs.true681, %land.lhs.true678, %for.end675
  %339 = load i32, i32* %quoting_style.addr, align 4, !dbg !15117
  %cmp686 = icmp eq i32 %339, 2, !dbg !15119
  br i1 %cmp686, label %land.lhs.true688, label %if.end704, !dbg !15120

land.lhs.true688:                                 ; preds = %if.end685
  %340 = load i8, i8* %elide_outer_quotes, align 1, !dbg !15121
  %tobool689 = trunc i8 %340 to i1, !dbg !15121
  br i1 %tobool689, label %if.end704, label %land.lhs.true690, !dbg !15122

land.lhs.true690:                                 ; preds = %land.lhs.true688
  %341 = load i8, i8* %encountered_single_quote, align 1, !dbg !15123
  %tobool691 = trunc i8 %341 to i1, !dbg !15123
  br i1 %tobool691, label %if.then693, label %if.end704, !dbg !15124

if.then693:                                       ; preds = %land.lhs.true690
  %342 = load i8, i8* %all_c_and_shell_quote_compat, align 1, !dbg !15125
  %tobool694 = trunc i8 %342 to i1, !dbg !15125
  br i1 %tobool694, label %if.then695, label %if.else697, !dbg !15128

if.then695:                                       ; preds = %if.then693
  %343 = load i8*, i8** %buffer.addr, align 8, !dbg !15129
  %344 = load i64, i64* %orig_buffersize, align 8, !dbg !15130
  %345 = load i8*, i8** %arg.addr, align 8, !dbg !15131
  %346 = load i64, i64* %argsize.addr, align 8, !dbg !15132
  %347 = load i32, i32* %flags.addr, align 4, !dbg !15133
  %348 = load i32*, i32** %quote_these_too.addr, align 8, !dbg !15134
  %349 = load i8*, i8** %left_quote.addr, align 8, !dbg !15135
  %350 = load i8*, i8** %right_quote.addr, align 8, !dbg !15136
  %call696 = call i64 @quotearg_buffer_restyled(i8* %343, i64 %344, i8* %345, i64 %346, i32 5, i32 %347, i32* %348, i8* %349, i8* %350), !dbg !15137
  store i64 %call696, i64* %retval, align 8, !dbg !15138
  br label %return, !dbg !15138

if.else697:                                       ; preds = %if.then693
  %351 = load i64, i64* %buffersize.addr, align 8, !dbg !15139
  %tobool698 = icmp ne i64 %351, 0, !dbg !15139
  br i1 %tobool698, label %if.end702, label %land.lhs.true699, !dbg !15141

land.lhs.true699:                                 ; preds = %if.else697
  %352 = load i64, i64* %orig_buffersize, align 8, !dbg !15142
  %tobool700 = icmp ne i64 %352, 0, !dbg !15142
  br i1 %tobool700, label %if.then701, label %if.end702, !dbg !15143

if.then701:                                       ; preds = %land.lhs.true699
  %353 = load i64, i64* %orig_buffersize, align 8, !dbg !15144
  store i64 %353, i64* %buffersize.addr, align 8, !dbg !15146
  store i64 0, i64* %len, align 8, !dbg !15147
  br label %process_input, !dbg !15148

if.end702:                                        ; preds = %land.lhs.true699, %if.else697
  br label %if.end703

if.end703:                                        ; preds = %if.end702
  br label %if.end704, !dbg !15149

if.end704:                                        ; preds = %if.end703, %land.lhs.true690, %land.lhs.true688, %if.end685
  %354 = load i8*, i8** %quote_string, align 8, !dbg !15150
  %tobool705 = icmp ne i8* %354, null, !dbg !15150
  br i1 %tobool705, label %land.lhs.true706, label %if.end724, !dbg !15152

land.lhs.true706:                                 ; preds = %if.end704
  %355 = load i8, i8* %elide_outer_quotes, align 1, !dbg !15153
  %tobool707 = trunc i8 %355 to i1, !dbg !15153
  br i1 %tobool707, label %if.end724, label %if.then708, !dbg !15154

if.then708:                                       ; preds = %land.lhs.true706
  br label %for.cond709, !dbg !15155

for.cond709:                                      ; preds = %for.inc721, %if.then708
  %356 = load i8*, i8** %quote_string, align 8, !dbg !15156
  %357 = load i8, i8* %356, align 1, !dbg !15159, !ctir !91
  %tobool710 = icmp ne i8 %357, 0, !dbg !15160
  br i1 %tobool710, label %for.body711, label %for.end723, !dbg !15160

for.body711:                                      ; preds = %for.cond709
  br label %do.body712, !dbg !15161

do.body712:                                       ; preds = %for.body711
  %358 = load i64, i64* %len, align 8, !dbg !15162
  %359 = load i64, i64* %buffersize.addr, align 8, !dbg !15162
  %cmp713 = icmp ult i64 %358, %359, !dbg !15162
  br i1 %cmp713, label %if.then715, label %if.end717, !dbg !15165

if.then715:                                       ; preds = %do.body712
  %360 = load i8*, i8** %quote_string, align 8, !dbg !15162
  %361 = load i8, i8* %360, align 1, !dbg !15162, !ctir !91
  %362 = load i8*, i8** %buffer.addr, align 8, !dbg !15162
  %363 = load i64, i64* %len, align 8, !dbg !15162
  %arrayidx716 = getelementptr inbounds i8, i8* %362, i64 %363, !dbg !15162, !ctir !7
  store i8 %361, i8* %arrayidx716, align 1, !dbg !15162
  br label %if.end717, !dbg !15162

if.end717:                                        ; preds = %if.then715, %do.body712
  %364 = load i64, i64* %len, align 8, !dbg !15165
  %inc718 = add i64 %364, 1, !dbg !15165
  store i64 %inc718, i64* %len, align 8, !dbg !15165
  br label %do.end720, !dbg !15165

do.end720:                                        ; preds = %if.end717
  br label %for.inc721, !dbg !15165

for.inc721:                                       ; preds = %do.end720
  %365 = load i8*, i8** %quote_string, align 8, !dbg !15166
  %incdec.ptr722 = getelementptr inbounds i8, i8* %365, i32 1, !dbg !15166, !ctir !91
  store i8* %incdec.ptr722, i8** %quote_string, align 8, !dbg !15166
  br label %for.cond709, !dbg !15167, !llvm.loop !15168

for.end723:                                       ; preds = %for.cond709
  br label %if.end724, !dbg !15169

if.end724:                                        ; preds = %for.end723, %land.lhs.true706, %if.end704
  %366 = load i64, i64* %len, align 8, !dbg !15170
  %367 = load i64, i64* %buffersize.addr, align 8, !dbg !15172
  %cmp725 = icmp ult i64 %366, %367, !dbg !15173
  br i1 %cmp725, label %if.then727, label %if.end729, !dbg !15174

if.then727:                                       ; preds = %if.end724
  %368 = load i8*, i8** %buffer.addr, align 8, !dbg !15175
  %369 = load i64, i64* %len, align 8, !dbg !15176
  %arrayidx728 = getelementptr inbounds i8, i8* %368, i64 %369, !dbg !15175, !ctir !7
  store i8 0, i8* %arrayidx728, align 1, !dbg !15177
  br label %if.end729, !dbg !15175

if.end729:                                        ; preds = %if.then727, %if.end724
  %370 = load i64, i64* %len, align 8, !dbg !15178
  store i64 %370, i64* %retval, align 8, !dbg !15179
  br label %return, !dbg !15179

force_outer_quoting_style:                        ; preds = %if.then684, %if.then588, %if.then429, %sw.bb391, %if.then302, %if.then295, %if.then265, %if.then248, %if.then194, %if.then173, %if.then88, %if.then78
  call void @llvm.dbg.label(metadata !15180), !dbg !15181
  %371 = load i32, i32* %quoting_style.addr, align 4, !dbg !15182
  %cmp730 = icmp eq i32 %371, 2, !dbg !15184
  br i1 %cmp730, label %land.lhs.true732, label %if.end736, !dbg !15185

land.lhs.true732:                                 ; preds = %force_outer_quoting_style
  %372 = load i8, i8* %backslash_escapes, align 1, !dbg !15186
  %tobool733 = trunc i8 %372 to i1, !dbg !15186
  br i1 %tobool733, label %if.then735, label %if.end736, !dbg !15187

if.then735:                                       ; preds = %land.lhs.true732
  store i32 4, i32* %quoting_style.addr, align 4, !dbg !15188
  br label %if.end736, !dbg !15189

if.end736:                                        ; preds = %if.then735, %land.lhs.true732, %force_outer_quoting_style
  %373 = load i8*, i8** %buffer.addr, align 8, !dbg !15190
  %374 = load i64, i64* %buffersize.addr, align 8, !dbg !15191
  %375 = load i8*, i8** %arg.addr, align 8, !dbg !15192
  %376 = load i64, i64* %argsize.addr, align 8, !dbg !15193
  %377 = load i32, i32* %quoting_style.addr, align 4, !dbg !15194
  %378 = load i32, i32* %flags.addr, align 4, !dbg !15195
  %and737 = and i32 %378, -3, !dbg !15196
  %379 = load i8*, i8** %left_quote.addr, align 8, !dbg !15197
  %380 = load i8*, i8** %right_quote.addr, align 8, !dbg !15198
  %call738 = call i64 @quotearg_buffer_restyled(i8* %373, i64 %374, i8* %375, i64 %376, i32 %377, i32 %and737, i32* null, i8* %379, i8* %380), !dbg !15199
  store i64 %call738, i64* %retval, align 8, !dbg !15200
  br label %return, !dbg !15200

return:                                           ; preds = %if.end736, %if.end729, %if.then695
  %381 = load i64, i64* %retval, align 8, !dbg !15201
  ret i64 %381, !dbg !15201
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8* %msgid, i32 %s) #4 !dbg !15202 {
entry:
  %retval = alloca i8*, align 8
  %msgid.addr = alloca i8*, align 8
  %s.addr = alloca i32, align 4
  %translation = alloca i8*, align 8, !ctir !90
  %locale_code = alloca i8*, align 8, !ctir !90
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !15205, metadata !DIExpression()), !dbg !15206
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15207, metadata !DIExpression()), !dbg !15208
  call void @llvm.dbg.declare(metadata i8** %translation, metadata !15209, metadata !DIExpression()), !dbg !15210
  %0 = load i8*, i8** %msgid.addr, align 8, !dbg !15211
  %call = call i8* @gettext(i8* %0) #12, !dbg !15211
  store i8* %call, i8** %translation, align 8, !dbg !15210
  call void @llvm.dbg.declare(metadata i8** %locale_code, metadata !15212, metadata !DIExpression()), !dbg !15213
  %1 = load i8*, i8** %translation, align 8, !dbg !15214
  %2 = load i8*, i8** %msgid.addr, align 8, !dbg !15216
  %cmp = icmp ne i8* %1, %2, !dbg !15217
  br i1 %cmp, label %if.then, label %if.end, !dbg !15218

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %translation, align 8, !dbg !15219
  store i8* %3, i8** %retval, align 8, !dbg !15220
  br label %return, !dbg !15220

if.end:                                           ; preds = %entry
  %call1 = call i8* @locale_charset(), !dbg !15221
  store i8* %call1, i8** %locale_code, align 8, !dbg !15222
  %4 = load i8*, i8** %locale_code, align 8, !dbg !15223
  %call2 = call i32 @c_strcasecmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.262, i64 0, i64 0)) #14, !dbg !15223
  %cmp3 = icmp eq i32 %call2, 0, !dbg !15223
  br i1 %cmp3, label %if.then4, label %if.end7, !dbg !15225

if.then4:                                         ; preds = %if.end
  %5 = load i8*, i8** %msgid.addr, align 8, !dbg !15226
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0, !dbg !15226, !ctir !90
  %6 = load i8, i8* %arrayidx, align 1, !dbg !15226
  %conv = sext i8 %6 to i32, !dbg !15226
  %cmp5 = icmp eq i32 %conv, 96, !dbg !15227
  %7 = zext i1 %cmp5 to i64, !dbg !15226
  %cond = select i1 %cmp5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.263, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.264, i64 0, i64 0), !dbg !15226
  store i8* %cond, i8** %retval, align 8, !dbg !15228
  br label %return, !dbg !15228

if.end7:                                          ; preds = %if.end
  %8 = load i8*, i8** %locale_code, align 8, !dbg !15229
  %call8 = call i32 @c_strcasecmp(i8* %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.265, i64 0, i64 0)) #14, !dbg !15229
  %cmp9 = icmp eq i32 %call8, 0, !dbg !15229
  br i1 %cmp9, label %if.then11, label %if.end17, !dbg !15231

if.then11:                                        ; preds = %if.end7
  %9 = load i8*, i8** %msgid.addr, align 8, !dbg !15232
  %arrayidx12 = getelementptr inbounds i8, i8* %9, i64 0, !dbg !15232, !ctir !90
  %10 = load i8, i8* %arrayidx12, align 1, !dbg !15232
  %conv13 = sext i8 %10 to i32, !dbg !15232
  %cmp14 = icmp eq i32 %conv13, 96, !dbg !15233
  %11 = zext i1 %cmp14 to i64, !dbg !15232
  %cond16 = select i1 %cmp14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.266, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.267, i64 0, i64 0), !dbg !15232
  store i8* %cond16, i8** %retval, align 8, !dbg !15234
  br label %return, !dbg !15234

if.end17:                                         ; preds = %if.end7
  %12 = load i32, i32* %s.addr, align 4, !dbg !15235
  %cmp18 = icmp eq i32 %12, 9, !dbg !15236
  %13 = zext i1 %cmp18 to i64, !dbg !15235
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.259, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.261, i64 0, i64 0), !dbg !15235
  store i8* %cond20, i8** %retval, align 8, !dbg !15237
  br label %return, !dbg !15237

return:                                           ; preds = %if.end17, %if.then11, %if.then4, %if.then
  %14 = load i8*, i8** %retval, align 8, !dbg !15238
  ret i8* %14, !dbg !15238
}

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_alloc(i8* %arg, i64 %argsize, %struct.quoting_options* %o) #4 !dbg !15239 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15242, metadata !DIExpression()), !dbg !15243
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15244, metadata !DIExpression()), !dbg !15245
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !15246, metadata !DIExpression()), !dbg !15247
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15248
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !15249
  %2 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !15250
  %call = call i8* @quotearg_alloc_mem(i8* %0, i64 %1, i64* null, %struct.quoting_options* %2), !dbg !15251
  ret i8* %call, !dbg !15252
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_alloc_mem(i8* %arg, i64 %argsize, i64* %size, %struct.quoting_options* %o) #4 !dbg !15253 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %size.addr = alloca i64*, align 8
  %o.addr = alloca %struct.quoting_options*, align 8
  %p = alloca %struct.quoting_options*, align 8, !ctir !1075
  %e = alloca i32, align 4, !ctir !5
  %flags = alloca i32, align 4, !ctir !5
  %bufsize = alloca i64, align 8, !ctir !52
  %buf = alloca i8*, align 8, !ctir !7
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15256, metadata !DIExpression()), !dbg !15257
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15258, metadata !DIExpression()), !dbg !15259
  store i64* %size, i64** %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %size.addr, metadata !15260, metadata !DIExpression()), !dbg !15261
  store %struct.quoting_options* %o, %struct.quoting_options** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %o.addr, metadata !15262, metadata !DIExpression()), !dbg !15263
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %p, metadata !15264, metadata !DIExpression()), !dbg !15265
  %0 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !15266
  %tobool = icmp ne %struct.quoting_options* %0, null, !dbg !15266
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15266

cond.true:                                        ; preds = %entry
  %1 = load %struct.quoting_options*, %struct.quoting_options** %o.addr, align 8, !dbg !15267
  br label %cond.end, !dbg !15266

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.quoting_options* [ %1, %cond.true ], [ @default_quoting_options, %cond.false ], !dbg !15266
  store %struct.quoting_options* %cond, %struct.quoting_options** %p, align 8, !dbg !15265
  call void @llvm.dbg.declare(metadata i32* %e, metadata !15268, metadata !DIExpression()), !dbg !15269
  %call = call i32* @__errno_location() #16, !dbg !15270
  %2 = load i32, i32* %call, align 4, !dbg !15270, !ctir !5
  store i32 %2, i32* %e, align 4, !dbg !15269
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !15271, metadata !DIExpression()), !dbg !15272
  %3 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15273
  %flags1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %3, i32 0, i32 1, !dbg !15274, !ctir !1076
  %4 = load i32, i32* %flags1, align 4, !dbg !15274, !ctir !5
  %5 = load i64*, i64** %size.addr, align 8, !dbg !15275
  %tobool2 = icmp ne i64* %5, null, !dbg !15275
  %6 = zext i1 %tobool2 to i64, !dbg !15275
  %cond3 = select i1 %tobool2, i32 0, i32 1, !dbg !15275
  %or = or i32 %4, %cond3, !dbg !15276
  store i32 %or, i32* %flags, align 4, !dbg !15272
  call void @llvm.dbg.declare(metadata i64* %bufsize, metadata !15277, metadata !DIExpression()), !dbg !15278
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !15279
  %8 = load i64, i64* %argsize.addr, align 8, !dbg !15280
  %9 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15281
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %9, i32 0, i32 0, !dbg !15282, !ctir !1076
  %10 = load i32, i32* %style, align 8, !dbg !15282, !ctir !1046
  %11 = load i32, i32* %flags, align 4, !dbg !15283
  %12 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15284
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 2, !dbg !15285, !ctir !1076
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !15284, !ctir !1077
  %13 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15286
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %13, i32 0, i32 3, !dbg !15287, !ctir !1076
  %14 = load i8*, i8** %left_quote, align 8, !dbg !15287, !ctir !90
  %15 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15288
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %15, i32 0, i32 4, !dbg !15289, !ctir !1076
  %16 = load i8*, i8** %right_quote, align 8, !dbg !15289, !ctir !90
  %call4 = call i64 @quotearg_buffer_restyled(i8* null, i64 0, i8* %7, i64 %8, i32 %10, i32 %11, i32* %arraydecay, i8* %14, i8* %16), !dbg !15290
  %add = add i64 %call4, 1, !dbg !15291
  store i64 %add, i64* %bufsize, align 8, !dbg !15278
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !15292, metadata !DIExpression()), !dbg !15293
  %17 = load i64, i64* %bufsize, align 8, !dbg !15294
  %call5 = call noalias i8* @xcharalloc(i64 %17), !dbg !15295
  store i8* %call5, i8** %buf, align 8, !dbg !15293
  %18 = load i8*, i8** %buf, align 8, !dbg !15296
  %19 = load i64, i64* %bufsize, align 8, !dbg !15297
  %20 = load i8*, i8** %arg.addr, align 8, !dbg !15298
  %21 = load i64, i64* %argsize.addr, align 8, !dbg !15299
  %22 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15300
  %style6 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %22, i32 0, i32 0, !dbg !15301, !ctir !1076
  %23 = load i32, i32* %style6, align 8, !dbg !15301, !ctir !1046
  %24 = load i32, i32* %flags, align 4, !dbg !15302
  %25 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15303
  %quote_these_too7 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %25, i32 0, i32 2, !dbg !15304, !ctir !1076
  %arraydecay8 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too7, i64 0, i64 0, !dbg !15303, !ctir !1077
  %26 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15305
  %left_quote9 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %26, i32 0, i32 3, !dbg !15306, !ctir !1076
  %27 = load i8*, i8** %left_quote9, align 8, !dbg !15306, !ctir !90
  %28 = load %struct.quoting_options*, %struct.quoting_options** %p, align 8, !dbg !15307
  %right_quote10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %28, i32 0, i32 4, !dbg !15308, !ctir !1076
  %29 = load i8*, i8** %right_quote10, align 8, !dbg !15308, !ctir !90
  %call11 = call i64 @quotearg_buffer_restyled(i8* %18, i64 %19, i8* %20, i64 %21, i32 %23, i32 %24, i32* %arraydecay8, i8* %27, i8* %29), !dbg !15309
  %30 = load i32, i32* %e, align 4, !dbg !15310
  %call12 = call i32* @__errno_location() #16, !dbg !15311
  store i32 %30, i32* %call12, align 4, !dbg !15312, !ctir !5
  %31 = load i64*, i64** %size.addr, align 8, !dbg !15313
  %tobool13 = icmp ne i64* %31, null, !dbg !15313
  br i1 %tobool13, label %if.then, label %if.end, !dbg !15315

if.then:                                          ; preds = %cond.end
  %32 = load i64, i64* %bufsize, align 8, !dbg !15316
  %sub = sub i64 %32, 1, !dbg !15317
  %33 = load i64*, i64** %size.addr, align 8, !dbg !15318
  store i64 %sub, i64* %33, align 8, !dbg !15319, !ctir !52
  br label %if.end, !dbg !15320

if.end:                                           ; preds = %if.then, %cond.end
  %34 = load i8*, i8** %buf, align 8, !dbg !15321
  ret i8* %34, !dbg !15322
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @quotearg_free() #4 !dbg !15323 {
entry:
  %sv = alloca %struct.slotvec*, align 8, !ctir !1078
  %i = alloca i32, align 4, !ctir !5
  call void @llvm.dbg.declare(metadata %struct.slotvec** %sv, metadata !15324, metadata !DIExpression()), !dbg !15325
  %0 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !15326
  store %struct.slotvec* %0, %struct.slotvec** %sv, align 8, !dbg !15325
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15327, metadata !DIExpression()), !dbg !15328
  store i32 1, i32* %i, align 4, !dbg !15329
  br label %for.cond, !dbg !15331

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !15332
  %2 = load i32, i32* @nslots, align 4, !dbg !15334
  %cmp = icmp slt i32 %1, %2, !dbg !15335
  br i1 %cmp, label %for.body, label %for.end, !dbg !15336

for.body:                                         ; preds = %for.cond
  %3 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15337
  %4 = load i32, i32* %i, align 4, !dbg !15338
  %idxprom = sext i32 %4 to i64, !dbg !15337
  %arrayidx = getelementptr inbounds %struct.slotvec, %struct.slotvec* %3, i64 %idxprom, !dbg !15337, !ctir !1078
  %val = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx, i32 0, i32 1, !dbg !15339, !ctir !1079
  %5 = load i8*, i8** %val, align 8, !dbg !15339, !ctir !7
  call void @free(i8* %5) #12, !dbg !15340
  br label %for.inc, !dbg !15340

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !15341
  %inc = add nsw i32 %6, 1, !dbg !15341
  store i32 %inc, i32* %i, align 4, !dbg !15341
  br label %for.cond, !dbg !15342, !llvm.loop !15343

for.end:                                          ; preds = %for.cond
  %7 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15345
  %arrayidx1 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %7, i64 0, !dbg !15345, !ctir !1078
  %val2 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx1, i32 0, i32 1, !dbg !15347, !ctir !1079
  %8 = load i8*, i8** %val2, align 8, !dbg !15347, !ctir !7
  %cmp3 = icmp ne i8* %8, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !15348
  br i1 %cmp3, label %if.then, label %if.end, !dbg !15349

if.then:                                          ; preds = %for.end
  %9 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15350
  %arrayidx4 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %9, i64 0, !dbg !15350, !ctir !1078
  %val5 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx4, i32 0, i32 1, !dbg !15352, !ctir !1079
  %10 = load i8*, i8** %val5, align 8, !dbg !15352, !ctir !7
  call void @free(i8* %10) #12, !dbg !15353
  store i64 256, i64* getelementptr inbounds (%struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 0), align 8, !dbg !15354, !ctir !52
  store i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), i8** getelementptr inbounds (%struct.slotvec, %struct.slotvec* @slotvec0, i32 0, i32 1), align 8, !dbg !15355, !ctir !7
  br label %if.end, !dbg !15356

if.end:                                           ; preds = %if.then, %for.end
  %11 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15357
  %cmp6 = icmp ne %struct.slotvec* %11, @slotvec0, !dbg !15359
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !15360

if.then7:                                         ; preds = %if.end
  %12 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15361
  %13 = bitcast %struct.slotvec* %12 to i8*, !dbg !15361
  call void @free(i8* %13) #12, !dbg !15363
  store %struct.slotvec* @slotvec0, %struct.slotvec** @slotvec, align 8, !dbg !15364
  br label %if.end8, !dbg !15365

if.end8:                                          ; preds = %if.then7, %if.end
  store i32 1, i32* @nslots, align 4, !dbg !15366
  ret void, !dbg !15367
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n(i32 %n, i8* %arg) #4 !dbg !15368 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15371, metadata !DIExpression()), !dbg !15372
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15373, metadata !DIExpression()), !dbg !15374
  %0 = load i32, i32* %n.addr, align 4, !dbg !15375
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15376
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 -1, %struct.quoting_options* @default_quoting_options), !dbg !15377
  ret i8* %call, !dbg !15378
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32 %n, i8* %arg, i64 %argsize, %struct.quoting_options* %options) #4 !dbg !15379 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %options.addr = alloca %struct.quoting_options*, align 8
  %e = alloca i32, align 4, !ctir !5
  %sv = alloca %struct.slotvec*, align 8, !ctir !1078
  %preallocated = alloca i8, align 1, !ctir !162
  %nmax = alloca i32, align 4, !ctir !5
  %size = alloca i64, align 8, !ctir !52
  %val = alloca i8*, align 8, !ctir !7
  %flags = alloca i32, align 4, !ctir !5
  %qsize = alloca i64, align 8, !ctir !52
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15382, metadata !DIExpression()), !dbg !15383
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15384, metadata !DIExpression()), !dbg !15385
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15386, metadata !DIExpression()), !dbg !15387
  store %struct.quoting_options* %options, %struct.quoting_options** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %options.addr, metadata !15388, metadata !DIExpression()), !dbg !15389
  call void @llvm.dbg.declare(metadata i32* %e, metadata !15390, metadata !DIExpression()), !dbg !15391
  %call = call i32* @__errno_location() #16, !dbg !15392
  %0 = load i32, i32* %call, align 4, !dbg !15392, !ctir !5
  store i32 %0, i32* %e, align 4, !dbg !15391
  call void @llvm.dbg.declare(metadata %struct.slotvec** %sv, metadata !15393, metadata !DIExpression()), !dbg !15394
  %1 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !15395
  store %struct.slotvec* %1, %struct.slotvec** %sv, align 8, !dbg !15394
  %2 = load i32, i32* %n.addr, align 4, !dbg !15396
  %cmp = icmp slt i32 %2, 0, !dbg !15398
  br i1 %cmp, label %if.then, label %if.end, !dbg !15399

if.then:                                          ; preds = %entry
  call void @abort() #13, !dbg !15400
  unreachable, !dbg !15400

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @nslots, align 4, !dbg !15401
  %4 = load i32, i32* %n.addr, align 4, !dbg !15403
  %cmp1 = icmp sle i32 %3, %4, !dbg !15404
  br i1 %cmp1, label %if.then2, label %if.end15, !dbg !15405

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %preallocated, metadata !15406, metadata !DIExpression()), !dbg !15408
  %5 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15409
  %cmp3 = icmp eq %struct.slotvec* %5, @slotvec0, !dbg !15410
  %frombool = zext i1 %cmp3 to i8, !dbg !15408
  store i8 %frombool, i8* %preallocated, align 1, !dbg !15408
  call void @llvm.dbg.declare(metadata i32* %nmax, metadata !15411, metadata !DIExpression()), !dbg !15412
  store i32 2147483646, i32* %nmax, align 4, !dbg !15412
  %6 = load i32, i32* %nmax, align 4, !dbg !15413
  %7 = load i32, i32* %n.addr, align 4, !dbg !15415
  %cmp4 = icmp slt i32 %6, %7, !dbg !15416
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !15417

if.then5:                                         ; preds = %if.then2
  call void @xalloc_die() #15, !dbg !15418
  unreachable, !dbg !15418

if.end6:                                          ; preds = %if.then2
  %8 = load i8, i8* %preallocated, align 1, !dbg !15419
  %tobool = trunc i8 %8 to i1, !dbg !15419
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15419

cond.true:                                        ; preds = %if.end6
  br label %cond.end, !dbg !15419

cond.false:                                       ; preds = %if.end6
  %9 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15420
  br label %cond.end, !dbg !15419

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.slotvec* [ null, %cond.true ], [ %9, %cond.false ], !dbg !15419
  %10 = bitcast %struct.slotvec* %cond to i8*, !dbg !15419
  %11 = load i32, i32* %n.addr, align 4, !dbg !15421
  %add = add nsw i32 %11, 1, !dbg !15422
  %conv = sext i32 %add to i64, !dbg !15423
  %mul = mul i64 %conv, 16, !dbg !15424
  %call7 = call i8* @xrealloc(i8* %10, i64 %mul), !dbg !15425
  %12 = bitcast i8* %call7 to %struct.slotvec*, !dbg !15425
  store %struct.slotvec* %12, %struct.slotvec** %sv, align 8, !dbg !15426
  store %struct.slotvec* %12, %struct.slotvec** @slotvec, align 8, !dbg !15427
  %13 = load i8, i8* %preallocated, align 1, !dbg !15428
  %tobool8 = trunc i8 %13 to i1, !dbg !15428
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !15430

if.then9:                                         ; preds = %cond.end
  %14 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15431
  %15 = bitcast %struct.slotvec* %14 to i8*, !dbg !15432
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !15432
  br label %if.end10, !dbg !15433

if.end10:                                         ; preds = %if.then9, %cond.end
  %16 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15434
  %17 = load i32, i32* @nslots, align 4, !dbg !15435
  %idx.ext = sext i32 %17 to i64, !dbg !15436
  %add.ptr = getelementptr inbounds %struct.slotvec, %struct.slotvec* %16, i64 %idx.ext, !dbg !15436, !ctir !1079
  %18 = bitcast %struct.slotvec* %add.ptr to i8*, !dbg !15437
  %19 = load i32, i32* %n.addr, align 4, !dbg !15438
  %add11 = add nsw i32 %19, 1, !dbg !15439
  %20 = load i32, i32* @nslots, align 4, !dbg !15440
  %sub = sub nsw i32 %add11, %20, !dbg !15441
  %conv12 = sext i32 %sub to i64, !dbg !15442
  %mul13 = mul i64 %conv12, 16, !dbg !15443
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 %mul13, i1 false), !dbg !15437
  %21 = load i32, i32* %n.addr, align 4, !dbg !15444
  %add14 = add nsw i32 %21, 1, !dbg !15445
  store i32 %add14, i32* @nslots, align 4, !dbg !15446
  br label %if.end15, !dbg !15447

if.end15:                                         ; preds = %if.end10, %if.end
  call void @llvm.dbg.declare(metadata i64* %size, metadata !15448, metadata !DIExpression()), !dbg !15450
  %22 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15451
  %23 = load i32, i32* %n.addr, align 4, !dbg !15452
  %idxprom = sext i32 %23 to i64, !dbg !15451
  %arrayidx = getelementptr inbounds %struct.slotvec, %struct.slotvec* %22, i64 %idxprom, !dbg !15451, !ctir !1078
  %size16 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx, i32 0, i32 0, !dbg !15453, !ctir !1079
  %24 = load i64, i64* %size16, align 8, !dbg !15453, !ctir !52
  store i64 %24, i64* %size, align 8, !dbg !15450
  call void @llvm.dbg.declare(metadata i8** %val, metadata !15454, metadata !DIExpression()), !dbg !15455
  %25 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15456
  %26 = load i32, i32* %n.addr, align 4, !dbg !15457
  %idxprom17 = sext i32 %26 to i64, !dbg !15456
  %arrayidx18 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %25, i64 %idxprom17, !dbg !15456, !ctir !1078
  %val19 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx18, i32 0, i32 1, !dbg !15458, !ctir !1079
  %27 = load i8*, i8** %val19, align 8, !dbg !15458, !ctir !7
  store i8* %27, i8** %val, align 8, !dbg !15455
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !15459, metadata !DIExpression()), !dbg !15460
  %28 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15461
  %flags20 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %28, i32 0, i32 1, !dbg !15462, !ctir !1076
  %29 = load i32, i32* %flags20, align 4, !dbg !15462, !ctir !5
  %or = or i32 %29, 1, !dbg !15463
  store i32 %or, i32* %flags, align 4, !dbg !15460
  call void @llvm.dbg.declare(metadata i64* %qsize, metadata !15464, metadata !DIExpression()), !dbg !15465
  %30 = load i8*, i8** %val, align 8, !dbg !15466
  %31 = load i64, i64* %size, align 8, !dbg !15467
  %32 = load i8*, i8** %arg.addr, align 8, !dbg !15468
  %33 = load i64, i64* %argsize.addr, align 8, !dbg !15469
  %34 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15470
  %style = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %34, i32 0, i32 0, !dbg !15471, !ctir !1076
  %35 = load i32, i32* %style, align 8, !dbg !15471, !ctir !1046
  %36 = load i32, i32* %flags, align 4, !dbg !15472
  %37 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15473
  %quote_these_too = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %37, i32 0, i32 2, !dbg !15474, !ctir !1076
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too, i64 0, i64 0, !dbg !15473, !ctir !1077
  %38 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15475
  %left_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %38, i32 0, i32 3, !dbg !15476, !ctir !1076
  %39 = load i8*, i8** %left_quote, align 8, !dbg !15476, !ctir !90
  %40 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15477
  %right_quote = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %40, i32 0, i32 4, !dbg !15478, !ctir !1076
  %41 = load i8*, i8** %right_quote, align 8, !dbg !15478, !ctir !90
  %call21 = call i64 @quotearg_buffer_restyled(i8* %30, i64 %31, i8* %32, i64 %33, i32 %35, i32 %36, i32* %arraydecay, i8* %39, i8* %41), !dbg !15479
  store i64 %call21, i64* %qsize, align 8, !dbg !15465
  %42 = load i64, i64* %size, align 8, !dbg !15480
  %43 = load i64, i64* %qsize, align 8, !dbg !15482
  %cmp22 = icmp ule i64 %42, %43, !dbg !15483
  br i1 %cmp22, label %if.then24, label %if.end43, !dbg !15484

if.then24:                                        ; preds = %if.end15
  %44 = load i64, i64* %qsize, align 8, !dbg !15485
  %add25 = add i64 %44, 1, !dbg !15487
  store i64 %add25, i64* %size, align 8, !dbg !15488
  %45 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15489
  %46 = load i32, i32* %n.addr, align 4, !dbg !15490
  %idxprom26 = sext i32 %46 to i64, !dbg !15489
  %arrayidx27 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %45, i64 %idxprom26, !dbg !15489, !ctir !1078
  %size28 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx27, i32 0, i32 0, !dbg !15491, !ctir !1079
  store i64 %add25, i64* %size28, align 8, !dbg !15492, !ctir !52
  %47 = load i8*, i8** %val, align 8, !dbg !15493
  %cmp29 = icmp ne i8* %47, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !15495
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !15496

if.then31:                                        ; preds = %if.then24
  %48 = load i8*, i8** %val, align 8, !dbg !15497
  call void @free(i8* %48) #12, !dbg !15498
  br label %if.end32, !dbg !15498

if.end32:                                         ; preds = %if.then31, %if.then24
  %49 = load i64, i64* %size, align 8, !dbg !15499
  %call33 = call noalias i8* @xcharalloc(i64 %49), !dbg !15500
  store i8* %call33, i8** %val, align 8, !dbg !15501
  %50 = load %struct.slotvec*, %struct.slotvec** %sv, align 8, !dbg !15502
  %51 = load i32, i32* %n.addr, align 4, !dbg !15503
  %idxprom34 = sext i32 %51 to i64, !dbg !15502
  %arrayidx35 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %50, i64 %idxprom34, !dbg !15502, !ctir !1078
  %val36 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %arrayidx35, i32 0, i32 1, !dbg !15504, !ctir !1079
  store i8* %call33, i8** %val36, align 8, !dbg !15505, !ctir !7
  %52 = load i8*, i8** %val, align 8, !dbg !15506
  %53 = load i64, i64* %size, align 8, !dbg !15507
  %54 = load i8*, i8** %arg.addr, align 8, !dbg !15508
  %55 = load i64, i64* %argsize.addr, align 8, !dbg !15509
  %56 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15510
  %style37 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %56, i32 0, i32 0, !dbg !15511, !ctir !1076
  %57 = load i32, i32* %style37, align 8, !dbg !15511, !ctir !1046
  %58 = load i32, i32* %flags, align 4, !dbg !15512
  %59 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15513
  %quote_these_too38 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %59, i32 0, i32 2, !dbg !15514, !ctir !1076
  %arraydecay39 = getelementptr inbounds [8 x i32], [8 x i32]* %quote_these_too38, i64 0, i64 0, !dbg !15513, !ctir !1077
  %60 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15515
  %left_quote40 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %60, i32 0, i32 3, !dbg !15516, !ctir !1076
  %61 = load i8*, i8** %left_quote40, align 8, !dbg !15516, !ctir !90
  %62 = load %struct.quoting_options*, %struct.quoting_options** %options.addr, align 8, !dbg !15517
  %right_quote41 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %62, i32 0, i32 4, !dbg !15518, !ctir !1076
  %63 = load i8*, i8** %right_quote41, align 8, !dbg !15518, !ctir !90
  %call42 = call i64 @quotearg_buffer_restyled(i8* %52, i64 %53, i8* %54, i64 %55, i32 %57, i32 %58, i32* %arraydecay39, i8* %61, i8* %63), !dbg !15519
  br label %if.end43, !dbg !15520

if.end43:                                         ; preds = %if.end32, %if.end15
  %64 = load i32, i32* %e, align 4, !dbg !15521
  %call44 = call i32* @__errno_location() #16, !dbg !15522
  store i32 %64, i32* %call44, align 4, !dbg !15523, !ctir !5
  %65 = load i8*, i8** %val, align 8, !dbg !15524
  ret i8* %65, !dbg !15525
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_mem(i32 %n, i8* %arg, i64 %argsize) #4 !dbg !15526 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15529, metadata !DIExpression()), !dbg !15530
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15531, metadata !DIExpression()), !dbg !15532
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15533, metadata !DIExpression()), !dbg !15534
  %0 = load i32, i32* %n.addr, align 4, !dbg !15535
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15536
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !15537
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @default_quoting_options), !dbg !15538
  ret i8* %call, !dbg !15539
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg(i8* %arg) #4 !dbg !15540 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15543, metadata !DIExpression()), !dbg !15544
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15545
  %call = call i8* @quotearg_n(i32 0, i8* %0), !dbg !15546
  ret i8* %call, !dbg !15547
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_mem(i8* %arg, i64 %argsize) #4 !dbg !15548 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15551, metadata !DIExpression()), !dbg !15552
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15553, metadata !DIExpression()), !dbg !15554
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15555
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !15556
  %call = call i8* @quotearg_n_mem(i32 0, i8* %0, i64 %1), !dbg !15557
  ret i8* %call, !dbg !15558
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style(i32 %n, i32 %s, i8* %arg) #4 !dbg !15559 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1076
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15562, metadata !DIExpression()), !dbg !15563
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15564, metadata !DIExpression()), !dbg !15565
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15566, metadata !DIExpression()), !dbg !15567
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !15568, metadata !DIExpression()), !dbg !15569
  %0 = load i32, i32* %s.addr, align 4, !dbg !15570
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %0), !dbg !15571
  %1 = load i32, i32* %n.addr, align 4, !dbg !15572
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !15573
  %call = call i8* @quotearg_n_options(i32 %1, i8* %2, i64 -1, %struct.quoting_options* %o), !dbg !15574
  ret i8* %call, !dbg !15575
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret %agg.result, i32 %style) #4 !dbg !15576 {
entry:
  %style.addr = alloca i32, align 4
  store i32 %style, i32* %style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %style.addr, metadata !15579, metadata !DIExpression()), !dbg !15580
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %agg.result, metadata !15581, metadata !DIExpression()), !dbg !15582
  %0 = bitcast %struct.quoting_options* %agg.result to i8*, !dbg !15582
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !15582
  %1 = load i32, i32* %style.addr, align 4, !dbg !15583
  %cmp = icmp eq i32 %1, 10, !dbg !15585
  br i1 %cmp, label %if.then, label %if.end, !dbg !15586

if.then:                                          ; preds = %entry
  call void @abort() #13, !dbg !15587
  unreachable, !dbg !15587

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %style.addr, align 4, !dbg !15588
  %style1 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %agg.result, i32 0, i32 0, !dbg !15589, !ctir !1065
  store i32 %2, i32* %style1, align 8, !dbg !15590, !ctir !1046
  ret void, !dbg !15591
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style_mem(i32 %n, i32 %s, i8* %arg, i64 %argsize) #4 !dbg !15592 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1076
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15595, metadata !DIExpression()), !dbg !15596
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15597, metadata !DIExpression()), !dbg !15598
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15599, metadata !DIExpression()), !dbg !15600
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15601, metadata !DIExpression()), !dbg !15602
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !15603, metadata !DIExpression()), !dbg !15604
  %0 = load i32, i32* %s.addr, align 4, !dbg !15605
  call void @quoting_options_from_style(%struct.quoting_options* sret %o, i32 %0), !dbg !15606
  %1 = load i32, i32* %n.addr, align 4, !dbg !15607
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !15608
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !15609
  %call = call i8* @quotearg_n_options(i32 %1, i8* %2, i64 %3, %struct.quoting_options* %o), !dbg !15610
  ret i8* %call, !dbg !15611
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_style(i32 %s, i8* %arg) #4 !dbg !15612 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15615, metadata !DIExpression()), !dbg !15616
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15617, metadata !DIExpression()), !dbg !15618
  %0 = load i32, i32* %s.addr, align 4, !dbg !15619
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15620
  %call = call i8* @quotearg_n_style(i32 0, i32 %0, i8* %1), !dbg !15621
  ret i8* %call, !dbg !15622
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_style_mem(i32 %s, i8* %arg, i64 %argsize) #4 !dbg !15623 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15626, metadata !DIExpression()), !dbg !15627
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15628, metadata !DIExpression()), !dbg !15629
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15630, metadata !DIExpression()), !dbg !15631
  %0 = load i32, i32* %s.addr, align 4, !dbg !15632
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15633
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !15634
  %call = call i8* @quotearg_n_style_mem(i32 0, i32 %0, i8* %1, i64 %2), !dbg !15635
  ret i8* %call, !dbg !15636
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_char_mem(i8* %arg, i64 %argsize, i8 signext %ch) #4 !dbg !15637 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %options = alloca %struct.quoting_options, align 8, !ctir !1065
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15640, metadata !DIExpression()), !dbg !15641
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15642, metadata !DIExpression()), !dbg !15643
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !15644, metadata !DIExpression()), !dbg !15645
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %options, metadata !15646, metadata !DIExpression()), !dbg !15647
  %0 = bitcast %struct.quoting_options* %options to i8*, !dbg !15648
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !15648
  %1 = load i8, i8* %ch.addr, align 1, !dbg !15649
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext %1, i32 1), !dbg !15650
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !15651
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !15652
  %call1 = call i8* @quotearg_n_options(i32 0, i8* %2, i64 %3, %struct.quoting_options* %options), !dbg !15653
  ret i8* %call1, !dbg !15654
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_char(i8* %arg, i8 signext %ch) #4 !dbg !15655 {
entry:
  %arg.addr = alloca i8*, align 8
  %ch.addr = alloca i8, align 1
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15658, metadata !DIExpression()), !dbg !15659
  store i8 %ch, i8* %ch.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !15660, metadata !DIExpression()), !dbg !15661
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15662
  %1 = load i8, i8* %ch.addr, align 1, !dbg !15663
  %call = call i8* @quotearg_char_mem(i8* %0, i64 -1, i8 signext %1), !dbg !15664
  ret i8* %call, !dbg !15665
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_colon(i8* %arg) #4 !dbg !15666 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15667, metadata !DIExpression()), !dbg !15668
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15669
  %call = call i8* @quotearg_char(i8* %0, i8 signext 58), !dbg !15670
  ret i8* %call, !dbg !15671
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_colon_mem(i8* %arg, i64 %argsize) #4 !dbg !15672 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15673, metadata !DIExpression()), !dbg !15674
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15675, metadata !DIExpression()), !dbg !15676
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15677
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !15678
  %call = call i8* @quotearg_char_mem(i8* %0, i64 %1, i8 signext 58), !dbg !15679
  ret i8* %call, !dbg !15680
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_style_colon(i32 %n, i32 %s, i8* %arg) #4 !dbg !15681 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %options = alloca %struct.quoting_options, align 8, !ctir !1065
  %tmp = alloca %struct.quoting_options, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15682, metadata !DIExpression()), !dbg !15683
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !15684, metadata !DIExpression()), !dbg !15685
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15686, metadata !DIExpression()), !dbg !15687
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %options, metadata !15688, metadata !DIExpression()), !dbg !15689
  %0 = load i32, i32* %s.addr, align 4, !dbg !15690
  call void @quoting_options_from_style(%struct.quoting_options* sret %tmp, i32 %0), !dbg !15691
  %1 = bitcast %struct.quoting_options* %options to i8*, !dbg !15691
  %2 = bitcast %struct.quoting_options* %tmp to i8*, !dbg !15691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 56, i1 false), !dbg !15691
  %call = call i32 @set_char_quoting(%struct.quoting_options* %options, i8 signext 58, i32 1), !dbg !15692
  %3 = load i32, i32* %n.addr, align 4, !dbg !15693
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !15694
  %call1 = call i8* @quotearg_n_options(i32 %3, i8* %4, i64 -1, %struct.quoting_options* %options), !dbg !15695
  ret i8* %call1, !dbg !15696
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_custom(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg) #4 !dbg !15697 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15700, metadata !DIExpression()), !dbg !15701
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !15702, metadata !DIExpression()), !dbg !15703
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !15704, metadata !DIExpression()), !dbg !15705
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15706, metadata !DIExpression()), !dbg !15707
  %0 = load i32, i32* %n.addr, align 4, !dbg !15708
  %1 = load i8*, i8** %left_quote.addr, align 8, !dbg !15709
  %2 = load i8*, i8** %right_quote.addr, align 8, !dbg !15710
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !15711
  %call = call i8* @quotearg_n_custom_mem(i32 %0, i8* %1, i8* %2, i8* %3, i64 -1), !dbg !15712
  ret i8* %call, !dbg !15713
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_n_custom_mem(i32 %n, i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #4 !dbg !15714 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8, !ctir !1065
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15717, metadata !DIExpression()), !dbg !15718
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !15719, metadata !DIExpression()), !dbg !15720
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !15721, metadata !DIExpression()), !dbg !15722
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15723, metadata !DIExpression()), !dbg !15724
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15725, metadata !DIExpression()), !dbg !15726
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %o, metadata !15727, metadata !DIExpression()), !dbg !15728
  %0 = bitcast %struct.quoting_options* %o to i8*, !dbg !15729
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !15729
  %1 = load i8*, i8** %left_quote.addr, align 8, !dbg !15730
  %2 = load i8*, i8** %right_quote.addr, align 8, !dbg !15731
  call void @set_custom_quoting(%struct.quoting_options* %o, i8* %1, i8* %2), !dbg !15732
  %3 = load i32, i32* %n.addr, align 4, !dbg !15733
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !15734
  %5 = load i64, i64* %argsize.addr, align 8, !dbg !15735
  %call = call i8* @quotearg_n_options(i32 %3, i8* %4, i64 %5, %struct.quoting_options* %o), !dbg !15736
  ret i8* %call, !dbg !15737
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_custom(i8* %left_quote, i8* %right_quote, i8* %arg) #4 !dbg !15738 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !15741, metadata !DIExpression()), !dbg !15742
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !15743, metadata !DIExpression()), !dbg !15744
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15745, metadata !DIExpression()), !dbg !15746
  %0 = load i8*, i8** %left_quote.addr, align 8, !dbg !15747
  %1 = load i8*, i8** %right_quote.addr, align 8, !dbg !15748
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !15749
  %call = call i8* @quotearg_n_custom(i32 0, i8* %0, i8* %1, i8* %2), !dbg !15750
  ret i8* %call, !dbg !15751
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quotearg_custom_mem(i8* %left_quote, i8* %right_quote, i8* %arg, i64 %argsize) #4 !dbg !15752 {
entry:
  %left_quote.addr = alloca i8*, align 8
  %right_quote.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %left_quote, i8** %left_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %left_quote.addr, metadata !15755, metadata !DIExpression()), !dbg !15756
  store i8* %right_quote, i8** %right_quote.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %right_quote.addr, metadata !15757, metadata !DIExpression()), !dbg !15758
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15759, metadata !DIExpression()), !dbg !15760
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15761, metadata !DIExpression()), !dbg !15762
  %0 = load i8*, i8** %left_quote.addr, align 8, !dbg !15763
  %1 = load i8*, i8** %right_quote.addr, align 8, !dbg !15764
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !15765
  %3 = load i64, i64* %argsize.addr, align 8, !dbg !15766
  %call = call i8* @quotearg_n_custom_mem(i32 0, i8* %0, i8* %1, i8* %2, i64 %3), !dbg !15767
  ret i8* %call, !dbg !15768
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_n_mem(i32 %n, i8* %arg, i64 %argsize) #4 !dbg !15769 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15772, metadata !DIExpression()), !dbg !15773
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15774, metadata !DIExpression()), !dbg !15775
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15776, metadata !DIExpression()), !dbg !15777
  %0 = load i32, i32* %n.addr, align 4, !dbg !15778
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15779
  %2 = load i64, i64* %argsize.addr, align 8, !dbg !15780
  %call = call i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* @quote_quoting_options), !dbg !15781
  ret i8* %call, !dbg !15782
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_mem(i8* %arg, i64 %argsize) #4 !dbg !15783 {
entry:
  %arg.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15786, metadata !DIExpression()), !dbg !15787
  store i64 %argsize, i64* %argsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !15788, metadata !DIExpression()), !dbg !15789
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15790
  %1 = load i64, i64* %argsize.addr, align 8, !dbg !15791
  %call = call i8* @quote_n_mem(i32 0, i8* %0, i64 %1), !dbg !15792
  ret i8* %call, !dbg !15793
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote_n(i32 %n, i8* %arg) #4 !dbg !15794 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !15797, metadata !DIExpression()), !dbg !15798
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15799, metadata !DIExpression()), !dbg !15800
  %0 = load i32, i32* %n.addr, align 4, !dbg !15801
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !15802
  %call = call i8* @quote_n_mem(i32 %0, i8* %1, i64 -1), !dbg !15803
  ret i8* %call, !dbg !15804
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @quote(i8* %arg) #4 !dbg !15805 {
entry:
  %arg.addr = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !15808, metadata !DIExpression()), !dbg !15809
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !15810
  %call = call i8* @quote_n(i32 0, i8* %0), !dbg !15811
  ret i8* %call, !dbg !15812
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.randread_source* @randread_new(i8* %name, i64 %bytes_bound) #4 !dbg !15813 {
entry:
  %retval = alloca %struct.randread_source*, align 8
  %name.addr = alloca i8*, align 8
  %bytes_bound.addr = alloca i64, align 8
  %source = alloca %struct._IO_FILE*, align 8, !ctir !1313
  %s = alloca %struct.randread_source*, align 8, !ctir !1353
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !15816, metadata !DIExpression()), !dbg !15817
  store i64 %bytes_bound, i64* %bytes_bound.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bytes_bound.addr, metadata !15818, metadata !DIExpression()), !dbg !15819
  %0 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15820
  %cmp = icmp eq i64 %0, 0, !dbg !15822
  br i1 %cmp, label %if.then, label %if.else, !dbg !15823

if.then:                                          ; preds = %entry
  %call = call %struct.randread_source* @simple_new(%struct._IO_FILE* null, i8* null), !dbg !15824
  store %struct.randread_source* %call, %struct.randread_source** %retval, align 8, !dbg !15825
  br label %return, !dbg !15825

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %source, metadata !15826, metadata !DIExpression()), !dbg !15828
  store %struct._IO_FILE* null, %struct._IO_FILE** %source, align 8, !dbg !15828
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s, metadata !15829, metadata !DIExpression()), !dbg !15830
  %1 = load i8*, i8** %name.addr, align 8, !dbg !15831
  %tobool = icmp ne i8* %1, null, !dbg !15831
  br i1 %tobool, label %if.then1, label %if.end5, !dbg !15833

if.then1:                                         ; preds = %if.else
  %2 = load i8*, i8** %name.addr, align 8, !dbg !15834
  %call2 = call %struct._IO_FILE* @fopen_safer(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.282, i64 0, i64 0)), !dbg !15836
  store %struct._IO_FILE* %call2, %struct._IO_FILE** %source, align 8, !dbg !15837
  %tobool3 = icmp ne %struct._IO_FILE* %call2, null, !dbg !15837
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !15838

if.then4:                                         ; preds = %if.then1
  store %struct.randread_source* null, %struct.randread_source** %retval, align 8, !dbg !15839
  br label %return, !dbg !15839

if.end:                                           ; preds = %if.then1
  br label %if.end5, !dbg !15840

if.end5:                                          ; preds = %if.end, %if.else
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !15841
  %4 = load i8*, i8** %name.addr, align 8, !dbg !15842
  %call6 = call %struct.randread_source* @simple_new(%struct._IO_FILE* %3, i8* %4), !dbg !15843
  store %struct.randread_source* %call6, %struct.randread_source** %s, align 8, !dbg !15844
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !15845
  %tobool7 = icmp ne %struct._IO_FILE* %5, null, !dbg !15845
  br i1 %tobool7, label %if.then8, label %if.else11, !dbg !15847

if.then8:                                         ; preds = %if.end5
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !15848
  %7 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15849
  %buf = getelementptr inbounds %struct.randread_source, %struct.randread_source* %7, i32 0, i32 3, !dbg !15850, !ctir !1354
  %c = bitcast %union.anon.22* %buf to [4096 x i8]*, !dbg !15851
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %c, i64 0, i64 0, !dbg !15849, !ctir !1367
  %8 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15852
  %cmp9 = icmp ult i64 4096, %8, !dbg !15852
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !15852

cond.true:                                        ; preds = %if.then8
  br label %cond.end, !dbg !15852

cond.false:                                       ; preds = %if.then8
  %9 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15852
  br label %cond.end, !dbg !15852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %9, %cond.false ], !dbg !15852
  %call10 = call i32 @setvbuf(%struct._IO_FILE* %6, i8* %arraydecay, i32 0, i64 %cond) #12, !dbg !15853
  br label %if.end19, !dbg !15853

if.else11:                                        ; preds = %if.end5
  %10 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15854
  %buf12 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %10, i32 0, i32 3, !dbg !15856, !ctir !1354
  %isaac = bitcast %union.anon.22* %buf12 to %struct.isaac*, !dbg !15857
  %buffered = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac, i32 0, i32 0, !dbg !15858, !ctir !1371
  store i64 0, i64* %buffered, align 8, !dbg !15859, !ctir !52
  %11 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15860
  %buf13 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %11, i32 0, i32 3, !dbg !15861, !ctir !1354
  %isaac14 = bitcast %union.anon.22* %buf13 to %struct.isaac*, !dbg !15862
  %state = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac14, i32 0, i32 1, !dbg !15863, !ctir !1371
  %m = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %state, i32 0, i32 0, !dbg !15864, !ctir !1375
  %arraydecay15 = getelementptr inbounds [256 x i64], [256 x i64]* %m, i64 0, i64 0, !dbg !15860, !ctir !1379
  %12 = bitcast i64* %arraydecay15 to i8*, !dbg !15860
  %13 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15865
  call void @get_nonce(i8* %12, i64 2048, i64 %13), !dbg !15866
  %14 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15867
  %buf16 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %14, i32 0, i32 3, !dbg !15868, !ctir !1354
  %isaac17 = bitcast %union.anon.22* %buf16 to %struct.isaac*, !dbg !15869
  %state18 = getelementptr inbounds %struct.isaac, %struct.isaac* %isaac17, i32 0, i32 1, !dbg !15870, !ctir !1371
  call void @isaac_seed(%struct.isaac_state* %state18), !dbg !15871
  br label %if.end19

if.end19:                                         ; preds = %if.else11, %cond.end
  %15 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15872
  store %struct.randread_source* %15, %struct.randread_source** %retval, align 8, !dbg !15873
  br label %return, !dbg !15873

return:                                           ; preds = %if.end19, %if.then4, %if.then
  %16 = load %struct.randread_source*, %struct.randread_source** %retval, align 8, !dbg !15874
  ret %struct.randread_source* %16, !dbg !15874
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.randread_source* @simple_new(%struct._IO_FILE* %source, i8* %handler_arg) #4 !dbg !15875 {
entry:
  %source.addr = alloca %struct._IO_FILE*, align 8
  %handler_arg.addr = alloca i8*, align 8
  %s = alloca %struct.randread_source*, align 8, !ctir !1353
  store %struct._IO_FILE* %source, %struct._IO_FILE** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %source.addr, metadata !15878, metadata !DIExpression()), !dbg !15879
  store i8* %handler_arg, i8** %handler_arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handler_arg.addr, metadata !15880, metadata !DIExpression()), !dbg !15881
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s, metadata !15882, metadata !DIExpression()), !dbg !15883
  %call = call noalias i8* @xmalloc(i64 4152), !dbg !15884
  %0 = bitcast i8* %call to %struct.randread_source*, !dbg !15884
  store %struct.randread_source* %0, %struct.randread_source** %s, align 8, !dbg !15883
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %source.addr, align 8, !dbg !15885
  %2 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15886
  %source1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %2, i32 0, i32 0, !dbg !15887, !ctir !1354
  store %struct._IO_FILE* %1, %struct._IO_FILE** %source1, align 8, !dbg !15888, !ctir !1313
  %3 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15889
  %handler = getelementptr inbounds %struct.randread_source, %struct.randread_source* %3, i32 0, i32 1, !dbg !15890, !ctir !1354
  store void (i8*)* @randread_error, void (i8*)** %handler, align 8, !dbg !15891, !ctir !1359
  %4 = load i8*, i8** %handler_arg.addr, align 8, !dbg !15892
  %5 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15893
  %handler_arg2 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %5, i32 0, i32 2, !dbg !15894, !ctir !1354
  store i8* %4, i8** %handler_arg2, align 8, !dbg !15895, !ctir !85
  %6 = load %struct.randread_source*, %struct.randread_source** %s, align 8, !dbg !15896
  ret %struct.randread_source* %6, !dbg !15897
}

; Function Attrs: nounwind
declare dso_local i32 @setvbuf(%struct._IO_FILE*, i8*, i32, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @get_nonce(i8* %buffer, i64 %bufsize, i64 %bytes_bound) #4 !dbg !15898 {
entry:
  %buffer.addr = alloca i8*, align 8
  %bufsize.addr = alloca i64, align 8
  %bytes_bound.addr = alloca i64, align 8
  %buf = alloca i8*, align 8, !ctir !7
  %seeded = alloca i64, align 8, !ctir !1393
  %fd = alloca i32, align 4, !ctir !5
  %v = alloca %struct.timespec, align 8, !ctir !15901
  %nbytes = alloca i64, align 8, !ctir !52
  %v19 = alloca i32, align 4, !ctir !1395
  %nbytes20 = alloca i64, align 8, !ctir !52
  %v34 = alloca i32, align 4, !ctir !1395
  %nbytes35 = alloca i64, align 8, !ctir !52
  %v49 = alloca i32, align 4, !ctir !1396
  %nbytes50 = alloca i64, align 8, !ctir !52
  %v64 = alloca i32, align 4, !ctir !1396
  %nbytes65 = alloca i64, align 8, !ctir !52
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !15907, metadata !DIExpression()), !dbg !15908
  store i64 %bufsize, i64* %bufsize.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bufsize.addr, metadata !15909, metadata !DIExpression()), !dbg !15910
  store i64 %bytes_bound, i64* %bytes_bound.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bytes_bound.addr, metadata !15911, metadata !DIExpression()), !dbg !15912
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !15913, metadata !DIExpression()), !dbg !15914
  %0 = load i8*, i8** %buffer.addr, align 8, !dbg !15915
  store i8* %0, i8** %buf, align 8, !dbg !15914
  call void @llvm.dbg.declare(metadata i64* %seeded, metadata !15916, metadata !DIExpression()), !dbg !15917
  store i64 0, i64* %seeded, align 8, !dbg !15917
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !15918, metadata !DIExpression()), !dbg !15919
  %call = call i32 (i8*, i32, ...) @open(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.283, i64 0, i64 0), i32 0), !dbg !15920
  store i32 %call, i32* %fd, align 4, !dbg !15919
  %1 = load i32, i32* %fd, align 4, !dbg !15921
  %cmp = icmp sle i32 0, %1, !dbg !15923
  br i1 %cmp, label %if.then, label %if.end6, !dbg !15924

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %fd, align 4, !dbg !15925
  %3 = load i8*, i8** %buf, align 8, !dbg !15927
  %4 = load i64, i64* %bufsize.addr, align 8, !dbg !15928
  %5 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15928
  %cmp1 = icmp ult i64 %4, %5, !dbg !15928
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !15928

cond.true:                                        ; preds = %if.then
  %6 = load i64, i64* %bufsize.addr, align 8, !dbg !15928
  br label %cond.end, !dbg !15928

cond.false:                                       ; preds = %if.then
  %7 = load i64, i64* %bytes_bound.addr, align 8, !dbg !15928
  br label %cond.end, !dbg !15928

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %7, %cond.false ], !dbg !15928
  %call2 = call i64 @read(i32 %2, i8* %3, i64 %cond), !dbg !15929
  store i64 %call2, i64* %seeded, align 8, !dbg !15930
  %8 = load i64, i64* %seeded, align 8, !dbg !15931
  %cmp3 = icmp slt i64 %8, 0, !dbg !15933
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !15934

if.then4:                                         ; preds = %cond.end
  store i64 0, i64* %seeded, align 8, !dbg !15935
  br label %if.end, !dbg !15936

if.end:                                           ; preds = %if.then4, %cond.end
  %9 = load i32, i32* %fd, align 4, !dbg !15937
  %call5 = call i32 @close(i32 %9), !dbg !15938
  br label %if.end6, !dbg !15939

if.end6:                                          ; preds = %if.end, %entry
  %10 = load i64, i64* %seeded, align 8, !dbg !15940
  %11 = load i64, i64* %bufsize.addr, align 8, !dbg !15940
  %cmp7 = icmp ult i64 %10, %11, !dbg !15940
  br i1 %cmp7, label %if.then8, label %if.end16, !dbg !15942

if.then8:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata %struct.timespec* %v, metadata !15943, metadata !DIExpression()), !dbg !15945
  call void @llvm.dbg.declare(metadata i64* %nbytes, metadata !15946, metadata !DIExpression()), !dbg !15945
  %12 = load i64, i64* %bufsize.addr, align 8, !dbg !15945
  %13 = load i64, i64* %seeded, align 8, !dbg !15945
  %sub = sub i64 %12, %13, !dbg !15945
  %cmp9 = icmp ult i64 16, %sub, !dbg !15945
  br i1 %cmp9, label %cond.true10, label %cond.false11, !dbg !15945

cond.true10:                                      ; preds = %if.then8
  br label %cond.end13, !dbg !15945

cond.false11:                                     ; preds = %if.then8
  %14 = load i64, i64* %bufsize.addr, align 8, !dbg !15945
  %15 = load i64, i64* %seeded, align 8, !dbg !15945
  %sub12 = sub i64 %14, %15, !dbg !15945
  br label %cond.end13, !dbg !15945

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i64 [ 16, %cond.true10 ], [ %sub12, %cond.false11 ], !dbg !15945
  store i64 %cond14, i64* %nbytes, align 8, !dbg !15945
  %call15 = call i32 @gettimeofday(%struct.timespec* %v, %struct.timezone* null) #12, !dbg !15945
  %16 = load i8*, i8** %buf, align 8, !dbg !15945
  %17 = load i64, i64* %seeded, align 8, !dbg !15945
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17, !dbg !15945, !ctir !8
  %18 = bitcast %struct.timespec* %v to i8*, !dbg !15945
  %19 = load i64, i64* %nbytes, align 8, !dbg !15945
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 8 %18, i64 %19, i1 false), !dbg !15945
  %20 = load i64, i64* %nbytes, align 8, !dbg !15945
  %21 = load i64, i64* %seeded, align 8, !dbg !15945
  %add = add i64 %21, %20, !dbg !15945
  store i64 %add, i64* %seeded, align 8, !dbg !15945
  br label %if.end16, !dbg !15945

if.end16:                                         ; preds = %cond.end13, %if.end6
  %22 = load i64, i64* %seeded, align 8, !dbg !15947
  %23 = load i64, i64* %bufsize.addr, align 8, !dbg !15947
  %cmp17 = icmp ult i64 %22, %23, !dbg !15947
  br i1 %cmp17, label %if.then18, label %if.end31, !dbg !15949

if.then18:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata i32* %v19, metadata !15950, metadata !DIExpression()), !dbg !15952
  call void @llvm.dbg.declare(metadata i64* %nbytes20, metadata !15953, metadata !DIExpression()), !dbg !15952
  %24 = load i64, i64* %bufsize.addr, align 8, !dbg !15952
  %25 = load i64, i64* %seeded, align 8, !dbg !15952
  %sub21 = sub i64 %24, %25, !dbg !15952
  %cmp22 = icmp ult i64 4, %sub21, !dbg !15952
  br i1 %cmp22, label %cond.true23, label %cond.false24, !dbg !15952

cond.true23:                                      ; preds = %if.then18
  br label %cond.end26, !dbg !15952

cond.false24:                                     ; preds = %if.then18
  %26 = load i64, i64* %bufsize.addr, align 8, !dbg !15952
  %27 = load i64, i64* %seeded, align 8, !dbg !15952
  %sub25 = sub i64 %26, %27, !dbg !15952
  br label %cond.end26, !dbg !15952

cond.end26:                                       ; preds = %cond.false24, %cond.true23
  %cond27 = phi i64 [ 4, %cond.true23 ], [ %sub25, %cond.false24 ], !dbg !15952
  store i64 %cond27, i64* %nbytes20, align 8, !dbg !15952
  %call28 = call i32 @getpid() #12, !dbg !15952
  store i32 %call28, i32* %v19, align 4, !dbg !15952
  %28 = load i8*, i8** %buf, align 8, !dbg !15952
  %29 = load i64, i64* %seeded, align 8, !dbg !15952
  %add.ptr29 = getelementptr inbounds i8, i8* %28, i64 %29, !dbg !15952, !ctir !8
  %30 = bitcast i32* %v19 to i8*, !dbg !15952
  %31 = load i64, i64* %nbytes20, align 8, !dbg !15952
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr29, i8* align 4 %30, i64 %31, i1 false), !dbg !15952
  %32 = load i64, i64* %nbytes20, align 8, !dbg !15952
  %33 = load i64, i64* %seeded, align 8, !dbg !15952
  %add30 = add i64 %33, %32, !dbg !15952
  store i64 %add30, i64* %seeded, align 8, !dbg !15952
  br label %if.end31, !dbg !15952

if.end31:                                         ; preds = %cond.end26, %if.end16
  %34 = load i64, i64* %seeded, align 8, !dbg !15954
  %35 = load i64, i64* %bufsize.addr, align 8, !dbg !15954
  %cmp32 = icmp ult i64 %34, %35, !dbg !15954
  br i1 %cmp32, label %if.then33, label %if.end46, !dbg !15956

if.then33:                                        ; preds = %if.end31
  call void @llvm.dbg.declare(metadata i32* %v34, metadata !15957, metadata !DIExpression()), !dbg !15959
  call void @llvm.dbg.declare(metadata i64* %nbytes35, metadata !15960, metadata !DIExpression()), !dbg !15959
  %36 = load i64, i64* %bufsize.addr, align 8, !dbg !15959
  %37 = load i64, i64* %seeded, align 8, !dbg !15959
  %sub36 = sub i64 %36, %37, !dbg !15959
  %cmp37 = icmp ult i64 4, %sub36, !dbg !15959
  br i1 %cmp37, label %cond.true38, label %cond.false39, !dbg !15959

cond.true38:                                      ; preds = %if.then33
  br label %cond.end41, !dbg !15959

cond.false39:                                     ; preds = %if.then33
  %38 = load i64, i64* %bufsize.addr, align 8, !dbg !15959
  %39 = load i64, i64* %seeded, align 8, !dbg !15959
  %sub40 = sub i64 %38, %39, !dbg !15959
  br label %cond.end41, !dbg !15959

cond.end41:                                       ; preds = %cond.false39, %cond.true38
  %cond42 = phi i64 [ 4, %cond.true38 ], [ %sub40, %cond.false39 ], !dbg !15959
  store i64 %cond42, i64* %nbytes35, align 8, !dbg !15959
  %call43 = call i32 @getppid() #12, !dbg !15959
  store i32 %call43, i32* %v34, align 4, !dbg !15959
  %40 = load i8*, i8** %buf, align 8, !dbg !15959
  %41 = load i64, i64* %seeded, align 8, !dbg !15959
  %add.ptr44 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !15959, !ctir !8
  %42 = bitcast i32* %v34 to i8*, !dbg !15959
  %43 = load i64, i64* %nbytes35, align 8, !dbg !15959
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr44, i8* align 4 %42, i64 %43, i1 false), !dbg !15959
  %44 = load i64, i64* %nbytes35, align 8, !dbg !15959
  %45 = load i64, i64* %seeded, align 8, !dbg !15959
  %add45 = add i64 %45, %44, !dbg !15959
  store i64 %add45, i64* %seeded, align 8, !dbg !15959
  br label %if.end46, !dbg !15959

if.end46:                                         ; preds = %cond.end41, %if.end31
  %46 = load i64, i64* %seeded, align 8, !dbg !15961
  %47 = load i64, i64* %bufsize.addr, align 8, !dbg !15961
  %cmp47 = icmp ult i64 %46, %47, !dbg !15961
  br i1 %cmp47, label %if.then48, label %if.end61, !dbg !15963

if.then48:                                        ; preds = %if.end46
  call void @llvm.dbg.declare(metadata i32* %v49, metadata !15964, metadata !DIExpression()), !dbg !15966
  call void @llvm.dbg.declare(metadata i64* %nbytes50, metadata !15967, metadata !DIExpression()), !dbg !15966
  %48 = load i64, i64* %bufsize.addr, align 8, !dbg !15966
  %49 = load i64, i64* %seeded, align 8, !dbg !15966
  %sub51 = sub i64 %48, %49, !dbg !15966
  %cmp52 = icmp ult i64 4, %sub51, !dbg !15966
  br i1 %cmp52, label %cond.true53, label %cond.false54, !dbg !15966

cond.true53:                                      ; preds = %if.then48
  br label %cond.end56, !dbg !15966

cond.false54:                                     ; preds = %if.then48
  %50 = load i64, i64* %bufsize.addr, align 8, !dbg !15966
  %51 = load i64, i64* %seeded, align 8, !dbg !15966
  %sub55 = sub i64 %50, %51, !dbg !15966
  br label %cond.end56, !dbg !15966

cond.end56:                                       ; preds = %cond.false54, %cond.true53
  %cond57 = phi i64 [ 4, %cond.true53 ], [ %sub55, %cond.false54 ], !dbg !15966
  store i64 %cond57, i64* %nbytes50, align 8, !dbg !15966
  %call58 = call i32 @getuid() #12, !dbg !15966
  store i32 %call58, i32* %v49, align 4, !dbg !15966
  %52 = load i8*, i8** %buf, align 8, !dbg !15966
  %53 = load i64, i64* %seeded, align 8, !dbg !15966
  %add.ptr59 = getelementptr inbounds i8, i8* %52, i64 %53, !dbg !15966, !ctir !8
  %54 = bitcast i32* %v49 to i8*, !dbg !15966
  %55 = load i64, i64* %nbytes50, align 8, !dbg !15966
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr59, i8* align 4 %54, i64 %55, i1 false), !dbg !15966
  %56 = load i64, i64* %nbytes50, align 8, !dbg !15966
  %57 = load i64, i64* %seeded, align 8, !dbg !15966
  %add60 = add i64 %57, %56, !dbg !15966
  store i64 %add60, i64* %seeded, align 8, !dbg !15966
  br label %if.end61, !dbg !15966

if.end61:                                         ; preds = %cond.end56, %if.end46
  %58 = load i64, i64* %seeded, align 8, !dbg !15968
  %59 = load i64, i64* %bufsize.addr, align 8, !dbg !15968
  %cmp62 = icmp ult i64 %58, %59, !dbg !15968
  br i1 %cmp62, label %if.then63, label %if.end76, !dbg !15970

if.then63:                                        ; preds = %if.end61
  call void @llvm.dbg.declare(metadata i32* %v64, metadata !15971, metadata !DIExpression()), !dbg !15973
  call void @llvm.dbg.declare(metadata i64* %nbytes65, metadata !15974, metadata !DIExpression()), !dbg !15973
  %60 = load i64, i64* %bufsize.addr, align 8, !dbg !15973
  %61 = load i64, i64* %seeded, align 8, !dbg !15973
  %sub66 = sub i64 %60, %61, !dbg !15973
  %cmp67 = icmp ult i64 4, %sub66, !dbg !15973
  br i1 %cmp67, label %cond.true68, label %cond.false69, !dbg !15973

cond.true68:                                      ; preds = %if.then63
  br label %cond.end71, !dbg !15973

cond.false69:                                     ; preds = %if.then63
  %62 = load i64, i64* %bufsize.addr, align 8, !dbg !15973
  %63 = load i64, i64* %seeded, align 8, !dbg !15973
  %sub70 = sub i64 %62, %63, !dbg !15973
  br label %cond.end71, !dbg !15973

cond.end71:                                       ; preds = %cond.false69, %cond.true68
  %cond72 = phi i64 [ 4, %cond.true68 ], [ %sub70, %cond.false69 ], !dbg !15973
  store i64 %cond72, i64* %nbytes65, align 8, !dbg !15973
  %call73 = call i32 @getgid() #12, !dbg !15973
  store i32 %call73, i32* %v64, align 4, !dbg !15973
  %64 = load i8*, i8** %buf, align 8, !dbg !15973
  %65 = load i64, i64* %seeded, align 8, !dbg !15973
  %add.ptr74 = getelementptr inbounds i8, i8* %64, i64 %65, !dbg !15973, !ctir !8
  %66 = bitcast i32* %v64 to i8*, !dbg !15973
  %67 = load i64, i64* %nbytes65, align 8, !dbg !15973
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr74, i8* align 4 %66, i64 %67, i1 false), !dbg !15973
  %68 = load i64, i64* %nbytes65, align 8, !dbg !15973
  %69 = load i64, i64* %seeded, align 8, !dbg !15973
  %add75 = add i64 %69, %68, !dbg !15973
  store i64 %add75, i64* %seeded, align 8, !dbg !15973
  br label %if.end76, !dbg !15973

if.end76:                                         ; preds = %cond.end71, %if.end61
  ret void, !dbg !15975
}

declare dso_local i64 @read(i32, i8*, i64) #3

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.timespec*, %struct.timezone*) #2

; Function Attrs: nounwind
declare dso_local i32 @getpid() #2

; Function Attrs: nounwind
declare dso_local i32 @getppid() #2

; Function Attrs: nounwind
declare dso_local i32 @getuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getgid() #2

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @randread_error(i8* %file_name) #0 !dbg !15976 {
entry:
  %file_name.addr = alloca i8*, align 8
  store i8* %file_name, i8** %file_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file_name.addr, metadata !15977, metadata !DIExpression()), !dbg !15978
  %0 = load i8*, i8** %file_name.addr, align 8, !dbg !15979
  %tobool = icmp ne i8* %0, null, !dbg !15979
  br i1 %tobool, label %if.then, label %if.end, !dbg !15981

if.then:                                          ; preds = %entry
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !15982
  %call = call i32* @__errno_location() #16, !dbg !15983
  %2 = load i32, i32* %call, align 4, !dbg !15983, !ctir !5
  %call1 = call i32* @__errno_location() #16, !dbg !15984
  %3 = load i32, i32* %call1, align 4, !dbg !15984, !ctir !5
  %cmp = icmp eq i32 %3, 0, !dbg !15985
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !15984

cond.true:                                        ; preds = %if.then
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.284, i64 0, i64 0)) #12, !dbg !15986
  br label %cond.end, !dbg !15984

cond.false:                                       ; preds = %if.then
  %call3 = call i8* @gettext(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.285, i64 0, i64 0)) #12, !dbg !15987
  br label %cond.end, !dbg !15984

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %call3, %cond.false ], !dbg !15984
  %4 = load i8*, i8** %file_name.addr, align 8, !dbg !15988
  %call4 = call i8* @quote(i8* %4), !dbg !15989
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 %2, i8* %cond, i8* %call4), !dbg !15990
  br label %if.end, !dbg !15990

if.end:                                           ; preds = %cond.end, %entry
  call void @abort() #13, !dbg !15991
  unreachable, !dbg !15991
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @randread_set_handler(%struct.randread_source* %s, void (i8*)* %handler) #4 !dbg !15992 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %handler.addr = alloca void (i8*)*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s.addr, metadata !15995, metadata !DIExpression()), !dbg !15996
  store void (i8*)* %handler, void (i8*)** %handler.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %handler.addr, metadata !15997, metadata !DIExpression()), !dbg !15998
  %0 = load void (i8*)*, void (i8*)** %handler.addr, align 8, !dbg !15999
  %1 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16000
  %handler1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %1, i32 0, i32 1, !dbg !16001, !ctir !1354
  store void (i8*)* %0, void (i8*)** %handler1, align 8, !dbg !16002, !ctir !1359
  ret void, !dbg !16003
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @randread_set_handler_arg(%struct.randread_source* %s, i8* %handler_arg) #4 !dbg !16004 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %handler_arg.addr = alloca i8*, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s.addr, metadata !16007, metadata !DIExpression()), !dbg !16008
  store i8* %handler_arg, i8** %handler_arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handler_arg.addr, metadata !16009, metadata !DIExpression()), !dbg !16010
  %0 = load i8*, i8** %handler_arg.addr, align 8, !dbg !16011
  %1 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16012
  %handler_arg1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %1, i32 0, i32 2, !dbg !16013, !ctir !1354
  store i8* %0, i8** %handler_arg1, align 8, !dbg !16014, !ctir !85
  ret void, !dbg !16015
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @randread(%struct.randread_source* %s, i8* %buf, i64 %size) #4 !dbg !16016 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %buf.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s.addr, metadata !16019, metadata !DIExpression()), !dbg !16020
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !16021, metadata !DIExpression()), !dbg !16022
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !16023, metadata !DIExpression()), !dbg !16024
  %0 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16025
  %source = getelementptr inbounds %struct.randread_source, %struct.randread_source* %0, i32 0, i32 0, !dbg !16027, !ctir !1354
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !16027, !ctir !1313
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !16025
  br i1 %tobool, label %if.then, label %if.else, !dbg !16028

if.then:                                          ; preds = %entry
  %2 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16029
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !16030
  %4 = load i64, i64* %size.addr, align 8, !dbg !16031
  call void @readsource(%struct.randread_source* %2, i8* %3, i64 %4), !dbg !16032
  br label %if.end, !dbg !16032

if.else:                                          ; preds = %entry
  %5 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16033
  %buf1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %5, i32 0, i32 3, !dbg !16034, !ctir !1354
  %isaac = bitcast %union.anon.22* %buf1 to %struct.isaac*, !dbg !16035
  %6 = load i8*, i8** %buf.addr, align 8, !dbg !16036
  %7 = load i64, i64* %size.addr, align 8, !dbg !16037
  call void @readisaac(%struct.isaac* %isaac, i8* %6, i64 %7), !dbg !16038
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !16039
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @readsource(%struct.randread_source* %s, i8* %p, i64 %size) #4 !dbg !16040 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %inbytes = alloca i64, align 8, !ctir !52
  %fread_errno = alloca i32, align 4, !ctir !5
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s.addr, metadata !16044, metadata !DIExpression()), !dbg !16045
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !16046, metadata !DIExpression()), !dbg !16047
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !16048, metadata !DIExpression()), !dbg !16049
  br label %while.body, !dbg !16050

while.body:                                       ; preds = %entry, %cond.end
  call void @llvm.dbg.declare(metadata i64* %inbytes, metadata !16051, metadata !DIExpression()), !dbg !16053
  %0 = load i8*, i8** %p.addr, align 8, !dbg !16054
  %1 = load i64, i64* %size.addr, align 8, !dbg !16054
  %2 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16054
  %source = getelementptr inbounds %struct.randread_source, %struct.randread_source* %2, i32 0, i32 0, !dbg !16054, !ctir !1354
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !16054, !ctir !1313
  %call = call i64 @fread_unlocked(i8* %0, i64 1, i64 %1, %struct._IO_FILE* %3), !dbg !16054
  store i64 %call, i64* %inbytes, align 8, !dbg !16053
  call void @llvm.dbg.declare(metadata i32* %fread_errno, metadata !16055, metadata !DIExpression()), !dbg !16056
  %call1 = call i32* @__errno_location() #16, !dbg !16057
  %4 = load i32, i32* %call1, align 4, !dbg !16057, !ctir !5
  store i32 %4, i32* %fread_errno, align 4, !dbg !16056
  %5 = load i64, i64* %inbytes, align 8, !dbg !16058
  %6 = load i8*, i8** %p.addr, align 8, !dbg !16059
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %5, !dbg !16059, !ctir !535
  store i8* %add.ptr, i8** %p.addr, align 8, !dbg !16059
  %7 = load i64, i64* %inbytes, align 8, !dbg !16060
  %8 = load i64, i64* %size.addr, align 8, !dbg !16061
  %sub = sub i64 %8, %7, !dbg !16061
  store i64 %sub, i64* %size.addr, align 8, !dbg !16061
  %9 = load i64, i64* %size.addr, align 8, !dbg !16062
  %cmp = icmp eq i64 %9, 0, !dbg !16064
  br i1 %cmp, label %if.then, label %if.end, !dbg !16065

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !16066

if.end:                                           ; preds = %while.body
  %10 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16067
  %source2 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %10, i32 0, i32 0, !dbg !16067, !ctir !1354
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %source2, align 8, !dbg !16067, !ctir !1313
  %call3 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #12, !dbg !16067
  %tobool = icmp ne i32 %call3, 0, !dbg !16067
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16067

cond.true:                                        ; preds = %if.end
  %12 = load i32, i32* %fread_errno, align 4, !dbg !16068
  br label %cond.end, !dbg !16067

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !16067

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ 0, %cond.false ], !dbg !16067
  %call4 = call i32* @__errno_location() #16, !dbg !16069
  store i32 %cond, i32* %call4, align 4, !dbg !16070, !ctir !5
  %13 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16071
  %handler = getelementptr inbounds %struct.randread_source, %struct.randread_source* %13, i32 0, i32 1, !dbg !16072, !ctir !1354
  %14 = load void (i8*)*, void (i8*)** %handler, align 8, !dbg !16072, !ctir !1359
  %15 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16073
  %handler_arg = getelementptr inbounds %struct.randread_source, %struct.randread_source* %15, i32 0, i32 2, !dbg !16074, !ctir !1354
  %16 = load i8*, i8** %handler_arg, align 8, !dbg !16074, !ctir !85
  call void %14(i8* %16), !dbg !16071
  br label %while.body, !dbg !16050, !llvm.loop !16075

while.end:                                        ; preds = %if.then
  ret void, !dbg !16077
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @readisaac(%struct.isaac* %isaac, i8* %p, i64 %size) #4 !dbg !16078 {
entry:
  %isaac.addr = alloca %struct.isaac*, align 8
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %inbytes = alloca i64, align 8, !ctir !52
  %char_p = alloca i8*, align 8, !ctir !7
  %wp = alloca i64*, align 8, !ctir !1397
  store %struct.isaac* %isaac, %struct.isaac** %isaac.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.isaac** %isaac.addr, metadata !16082, metadata !DIExpression()), !dbg !16083
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !16084, metadata !DIExpression()), !dbg !16085
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !16086, metadata !DIExpression()), !dbg !16087
  call void @llvm.dbg.declare(metadata i64* %inbytes, metadata !16088, metadata !DIExpression()), !dbg !16089
  %0 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16090
  %buffered = getelementptr inbounds %struct.isaac, %struct.isaac* %0, i32 0, i32 0, !dbg !16091, !ctir !1371
  %1 = load i64, i64* %buffered, align 8, !dbg !16091, !ctir !52
  store i64 %1, i64* %inbytes, align 8, !dbg !16089
  br label %while.body, !dbg !16092

while.body:                                       ; preds = %entry, %if.end22
  call void @llvm.dbg.declare(metadata i8** %char_p, metadata !16093, metadata !DIExpression()), !dbg !16095
  %2 = load i8*, i8** %p.addr, align 8, !dbg !16096
  store i8* %2, i8** %char_p, align 8, !dbg !16095
  %3 = load i64, i64* %size.addr, align 8, !dbg !16097
  %4 = load i64, i64* %inbytes, align 8, !dbg !16099
  %cmp = icmp ule i64 %3, %4, !dbg !16100
  br i1 %cmp, label %if.then, label %if.end, !dbg !16101

if.then:                                          ; preds = %while.body
  %5 = load i8*, i8** %p.addr, align 8, !dbg !16102
  %6 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16104
  %data = getelementptr inbounds %struct.isaac, %struct.isaac* %6, i32 0, i32 2, !dbg !16105, !ctir !1371
  %b = bitcast %union.anon.0.21* %data to [2048 x i8]*, !dbg !16106
  %arraydecay = getelementptr inbounds [2048 x i8], [2048 x i8]* %b, i64 0, i64 0, !dbg !16104, !ctir !1390
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2048, !dbg !16107, !ctir !535
  %7 = load i64, i64* %inbytes, align 8, !dbg !16108
  %idx.neg = sub i64 0, %7, !dbg !16109
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg, !dbg !16109, !ctir !535
  %8 = load i64, i64* %size.addr, align 8, !dbg !16110
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %add.ptr1, i64 %8, i1 false), !dbg !16111
  %9 = load i64, i64* %inbytes, align 8, !dbg !16112
  %10 = load i64, i64* %size.addr, align 8, !dbg !16113
  %sub = sub i64 %9, %10, !dbg !16114
  %11 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16115
  %buffered2 = getelementptr inbounds %struct.isaac, %struct.isaac* %11, i32 0, i32 0, !dbg !16116, !ctir !1371
  store i64 %sub, i64* %buffered2, align 8, !dbg !16117, !ctir !52
  br label %return, !dbg !16118

if.end:                                           ; preds = %while.body
  %12 = load i8*, i8** %p.addr, align 8, !dbg !16119
  %13 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16120
  %data3 = getelementptr inbounds %struct.isaac, %struct.isaac* %13, i32 0, i32 2, !dbg !16121, !ctir !1371
  %b4 = bitcast %union.anon.0.21* %data3 to [2048 x i8]*, !dbg !16122
  %arraydecay5 = getelementptr inbounds [2048 x i8], [2048 x i8]* %b4, i64 0, i64 0, !dbg !16120, !ctir !1390
  %add.ptr6 = getelementptr inbounds i8, i8* %arraydecay5, i64 2048, !dbg !16123, !ctir !535
  %14 = load i64, i64* %inbytes, align 8, !dbg !16124
  %idx.neg7 = sub i64 0, %14, !dbg !16125
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr6, i64 %idx.neg7, !dbg !16125, !ctir !535
  %15 = load i64, i64* %inbytes, align 8, !dbg !16126
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %add.ptr8, i64 %15, i1 false), !dbg !16127
  %16 = load i8*, i8** %char_p, align 8, !dbg !16128
  %17 = load i64, i64* %inbytes, align 8, !dbg !16129
  %add.ptr9 = getelementptr inbounds i8, i8* %16, i64 %17, !dbg !16130, !ctir !8
  store i8* %add.ptr9, i8** %p.addr, align 8, !dbg !16131
  %18 = load i64, i64* %inbytes, align 8, !dbg !16132
  %19 = load i64, i64* %size.addr, align 8, !dbg !16133
  %sub10 = sub i64 %19, %18, !dbg !16133
  store i64 %sub10, i64* %size.addr, align 8, !dbg !16133
  %20 = load i8*, i8** %p.addr, align 8, !dbg !16134
  %21 = ptrtoint i8* %20 to i64, !dbg !16134
  %rem = urem i64 %21, 8, !dbg !16134
  %cmp11 = icmp eq i64 %rem, 0, !dbg !16134
  br i1 %cmp11, label %if.then12, label %if.end22, !dbg !16136

if.then12:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64** %wp, metadata !16137, metadata !DIExpression()), !dbg !16139
  %22 = load i8*, i8** %p.addr, align 8, !dbg !16140
  %23 = bitcast i8* %22 to i64*, !dbg !16140
  store i64* %23, i64** %wp, align 8, !dbg !16139
  br label %while.cond13, !dbg !16141

while.cond13:                                     ; preds = %if.end21, %if.then12
  %24 = load i64, i64* %size.addr, align 8, !dbg !16142
  %cmp14 = icmp ule i64 2048, %24, !dbg !16143
  br i1 %cmp14, label %while.body15, label %while.end, !dbg !16141

while.body15:                                     ; preds = %while.cond13
  %25 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16144
  %state = getelementptr inbounds %struct.isaac, %struct.isaac* %25, i32 0, i32 1, !dbg !16146, !ctir !1371
  %26 = load i64*, i64** %wp, align 8, !dbg !16147
  call void @isaac_refill(%struct.isaac_state* %state, i64* %26), !dbg !16148
  %27 = load i64*, i64** %wp, align 8, !dbg !16149
  %add.ptr16 = getelementptr inbounds i64, i64* %27, i64 256, !dbg !16149, !ctir !1380
  store i64* %add.ptr16, i64** %wp, align 8, !dbg !16149
  %28 = load i64, i64* %size.addr, align 8, !dbg !16150
  %sub17 = sub i64 %28, 2048, !dbg !16150
  store i64 %sub17, i64* %size.addr, align 8, !dbg !16150
  %29 = load i64, i64* %size.addr, align 8, !dbg !16151
  %cmp18 = icmp eq i64 %29, 0, !dbg !16153
  br i1 %cmp18, label %if.then19, label %if.end21, !dbg !16154

if.then19:                                        ; preds = %while.body15
  %30 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16155
  %buffered20 = getelementptr inbounds %struct.isaac, %struct.isaac* %30, i32 0, i32 0, !dbg !16157, !ctir !1371
  store i64 0, i64* %buffered20, align 8, !dbg !16158, !ctir !52
  br label %return, !dbg !16159

if.end21:                                         ; preds = %while.body15
  br label %while.cond13, !dbg !16141, !llvm.loop !16160

while.end:                                        ; preds = %while.cond13
  %31 = load i64*, i64** %wp, align 8, !dbg !16162
  %32 = bitcast i64* %31 to i8*, !dbg !16162
  store i8* %32, i8** %p.addr, align 8, !dbg !16163
  br label %if.end22, !dbg !16164

if.end22:                                         ; preds = %while.end, %if.end
  %33 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16165
  %state23 = getelementptr inbounds %struct.isaac, %struct.isaac* %33, i32 0, i32 1, !dbg !16166, !ctir !1371
  %34 = load %struct.isaac*, %struct.isaac** %isaac.addr, align 8, !dbg !16167
  %data24 = getelementptr inbounds %struct.isaac, %struct.isaac* %34, i32 0, i32 2, !dbg !16168, !ctir !1371
  %w = bitcast %union.anon.0.21* %data24 to [256 x i64]*, !dbg !16169
  %arraydecay25 = getelementptr inbounds [256 x i64], [256 x i64]* %w, i64 0, i64 0, !dbg !16167, !ctir !1379
  call void @isaac_refill(%struct.isaac_state* %state23, i64* %arraydecay25), !dbg !16170
  store i64 2048, i64* %inbytes, align 8, !dbg !16171
  br label %while.body, !dbg !16092, !llvm.loop !16172

return:                                           ; preds = %if.then19, %if.then
  ret void, !dbg !16174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @randread_free(%struct.randread_source* %s) #4 !dbg !16175 {
entry:
  %s.addr = alloca %struct.randread_source*, align 8
  %source = alloca %struct._IO_FILE*, align 8, !ctir !1313
  store %struct.randread_source* %s, %struct.randread_source** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.randread_source** %s.addr, metadata !16178, metadata !DIExpression()), !dbg !16179
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %source, metadata !16180, metadata !DIExpression()), !dbg !16181
  %0 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16182
  %source1 = getelementptr inbounds %struct.randread_source, %struct.randread_source* %0, i32 0, i32 0, !dbg !16183, !ctir !1354
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %source1, align 8, !dbg !16183, !ctir !1313
  store %struct._IO_FILE* %1, %struct._IO_FILE** %source, align 8, !dbg !16181
  %2 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16184
  %3 = bitcast %struct.randread_source* %2 to i8*, !dbg !16184
  call void @explicit_bzero(i8* %3, i64 4152), !dbg !16185
  %4 = load %struct.randread_source*, %struct.randread_source** %s.addr, align 8, !dbg !16186
  %5 = bitcast %struct.randread_source* %4 to i8*, !dbg !16186
  call void @free(i8* %5) #12, !dbg !16187
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !16188
  %tobool = icmp ne %struct._IO_FILE* %6, null, !dbg !16188
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !16188

cond.true:                                        ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %source, align 8, !dbg !16189
  %call = call i32 @rpl_fclose(%struct._IO_FILE* %7), !dbg !16190
  br label %cond.end, !dbg !16188

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16188

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 0, %cond.false ], !dbg !16188
  ret i32 %cond, !dbg !16191
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @isaac_refill(%struct.isaac_state* %s, i64* %result) #4 !dbg !16192 {
entry:
  %s.addr = alloca %struct.isaac_state*, align 8
  %result.addr = alloca i64*, align 8
  %a = alloca i64, align 8, !ctir !1380
  %b = alloca i64, align 8, !ctir !1380
  %m = alloca i64*, align 8, !ctir !1397
  %r = alloca i64*, align 8, !ctir !1397
  %x = alloca i64, align 8, !ctir !1380
  %y = alloca i64, align 8, !ctir !1380
  %x18 = alloca i64, align 8, !ctir !1380
  %y19 = alloca i64, align 8, !ctir !1380
  %x40 = alloca i64, align 8, !ctir !1380
  %y41 = alloca i64, align 8, !ctir !1380
  %x61 = alloca i64, align 8, !ctir !1380
  %y62 = alloca i64, align 8, !ctir !1380
  %x88 = alloca i64, align 8, !ctir !1380
  %y89 = alloca i64, align 8, !ctir !1380
  %x110 = alloca i64, align 8, !ctir !1380
  %y111 = alloca i64, align 8, !ctir !1380
  %x132 = alloca i64, align 8, !ctir !1380
  %y133 = alloca i64, align 8, !ctir !1380
  %x153 = alloca i64, align 8, !ctir !1380
  %y154 = alloca i64, align 8, !ctir !1380
  store %struct.isaac_state* %s, %struct.isaac_state** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.isaac_state** %s.addr, metadata !16203, metadata !DIExpression()), !dbg !16204
  store i64* %result, i64** %result.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %result.addr, metadata !16205, metadata !DIExpression()), !dbg !16206
  call void @llvm.dbg.declare(metadata i64* %a, metadata !16207, metadata !DIExpression()), !dbg !16208
  %0 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16209
  %a1 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %0, i32 0, i32 1, !dbg !16210, !ctir !16197
  %1 = load i64, i64* %a1, align 8, !dbg !16210, !ctir !1380
  store i64 %1, i64* %a, align 8, !dbg !16208
  call void @llvm.dbg.declare(metadata i64* %b, metadata !16211, metadata !DIExpression()), !dbg !16212
  %2 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16213
  %b2 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %2, i32 0, i32 2, !dbg !16214, !ctir !16197
  %3 = load i64, i64* %b2, align 8, !dbg !16214, !ctir !1380
  %4 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16215
  %c = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %4, i32 0, i32 3, !dbg !16216, !ctir !16197
  %5 = load i64, i64* %c, align 8, !dbg !16217, !ctir !1380
  %inc = add i64 %5, 1, !dbg !16217
  store i64 %inc, i64* %c, align 8, !dbg !16217, !ctir !1380
  %add = add i64 %3, %inc, !dbg !16218
  store i64 %add, i64* %b, align 8, !dbg !16212
  call void @llvm.dbg.declare(metadata i64** %m, metadata !16219, metadata !DIExpression()), !dbg !16220
  %6 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16221
  %m3 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %6, i32 0, i32 0, !dbg !16222, !ctir !16197
  %arraydecay = getelementptr inbounds [256 x i64], [256 x i64]* %m3, i64 0, i64 0, !dbg !16221, !ctir !1379
  store i64* %arraydecay, i64** %m, align 8, !dbg !16220
  call void @llvm.dbg.declare(metadata i64** %r, metadata !16223, metadata !DIExpression()), !dbg !16224
  %7 = load i64*, i64** %result.addr, align 8, !dbg !16225
  store i64* %7, i64** %r, align 8, !dbg !16224
  br label %do.body, !dbg !16226

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i64* %x, metadata !16227, metadata !DIExpression()), !dbg !16230
  call void @llvm.dbg.declare(metadata i64* %y, metadata !16231, metadata !DIExpression()), !dbg !16230
  %8 = load i64, i64* %a, align 8, !dbg !16230
  %9 = load i64, i64* %a, align 8, !dbg !16230
  %shl = shl i64 %9, 21, !dbg !16230
  %xor = xor i64 %8, %shl, !dbg !16230
  %neg = xor i64 %xor, -1, !dbg !16230
  %xor4 = xor i64 0, %neg, !dbg !16230
  %10 = load i64*, i64** %m, align 8, !dbg !16230
  %arrayidx = getelementptr inbounds i64, i64* %10, i64 128, !dbg !16230, !ctir !1397
  %11 = load i64, i64* %arrayidx, align 8, !dbg !16230
  %add5 = add i64 %xor4, %11, !dbg !16230
  store i64 %add5, i64* %a, align 8, !dbg !16230
  %12 = load i64*, i64** %m, align 8, !dbg !16230
  %arrayidx6 = getelementptr inbounds i64, i64* %12, i64 0, !dbg !16230, !ctir !1397
  %13 = load i64, i64* %arrayidx6, align 8, !dbg !16230
  store i64 %13, i64* %x, align 8, !dbg !16230
  %14 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16230
  %m7 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %14, i32 0, i32 0, !dbg !16230, !ctir !16197
  %arraydecay8 = getelementptr inbounds [256 x i64], [256 x i64]* %m7, i64 0, i64 0, !dbg !16230, !ctir !1379
  %15 = load i64, i64* %x, align 8, !dbg !16230
  %call = call i64 @ind(i64* %arraydecay8, i64 %15), !dbg !16230
  %16 = load i64, i64* %a, align 8, !dbg !16230
  %add9 = add i64 %call, %16, !dbg !16230
  %17 = load i64, i64* %b, align 8, !dbg !16230
  %add10 = add i64 %add9, %17, !dbg !16230
  store i64 %add10, i64* %y, align 8, !dbg !16230
  %18 = load i64*, i64** %m, align 8, !dbg !16230
  %arrayidx11 = getelementptr inbounds i64, i64* %18, i64 0, !dbg !16230, !ctir !1397
  store i64 %add10, i64* %arrayidx11, align 8, !dbg !16230
  %19 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16230
  %m12 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %19, i32 0, i32 0, !dbg !16230, !ctir !16197
  %arraydecay13 = getelementptr inbounds [256 x i64], [256 x i64]* %m12, i64 0, i64 0, !dbg !16230, !ctir !1379
  %20 = load i64, i64* %y, align 8, !dbg !16230
  %shr = lshr i64 %20, 8, !dbg !16230
  %call14 = call i64 @ind(i64* %arraydecay13, i64 %shr), !dbg !16230
  %21 = load i64, i64* %x, align 8, !dbg !16230
  %add15 = add i64 %call14, %21, !dbg !16230
  %call16 = call i64 @just(i64 %add15), !dbg !16230
  store i64 %call16, i64* %b, align 8, !dbg !16230
  %22 = load i64*, i64** %r, align 8, !dbg !16230
  %arrayidx17 = getelementptr inbounds i64, i64* %22, i64 0, !dbg !16230, !ctir !1397
  store i64 %call16, i64* %arrayidx17, align 8, !dbg !16230
  call void @llvm.dbg.declare(metadata i64* %x18, metadata !16232, metadata !DIExpression()), !dbg !16234
  call void @llvm.dbg.declare(metadata i64* %y19, metadata !16235, metadata !DIExpression()), !dbg !16234
  %23 = load i64, i64* %a, align 8, !dbg !16234
  %24 = load i64, i64* %a, align 8, !dbg !16234
  %call20 = call i64 @just(i64 %24), !dbg !16234
  %shr21 = lshr i64 %call20, 5, !dbg !16234
  %xor22 = xor i64 %23, %shr21, !dbg !16234
  %xor23 = xor i64 0, %xor22, !dbg !16234
  %25 = load i64*, i64** %m, align 8, !dbg !16234
  %arrayidx24 = getelementptr inbounds i64, i64* %25, i64 129, !dbg !16234, !ctir !1397
  %26 = load i64, i64* %arrayidx24, align 8, !dbg !16234
  %add25 = add i64 %xor23, %26, !dbg !16234
  store i64 %add25, i64* %a, align 8, !dbg !16234
  %27 = load i64*, i64** %m, align 8, !dbg !16234
  %arrayidx26 = getelementptr inbounds i64, i64* %27, i64 1, !dbg !16234, !ctir !1397
  %28 = load i64, i64* %arrayidx26, align 8, !dbg !16234
  store i64 %28, i64* %x18, align 8, !dbg !16234
  %29 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16234
  %m27 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %29, i32 0, i32 0, !dbg !16234, !ctir !16197
  %arraydecay28 = getelementptr inbounds [256 x i64], [256 x i64]* %m27, i64 0, i64 0, !dbg !16234, !ctir !1379
  %30 = load i64, i64* %x18, align 8, !dbg !16234
  %call29 = call i64 @ind(i64* %arraydecay28, i64 %30), !dbg !16234
  %31 = load i64, i64* %a, align 8, !dbg !16234
  %add30 = add i64 %call29, %31, !dbg !16234
  %32 = load i64, i64* %b, align 8, !dbg !16234
  %add31 = add i64 %add30, %32, !dbg !16234
  store i64 %add31, i64* %y19, align 8, !dbg !16234
  %33 = load i64*, i64** %m, align 8, !dbg !16234
  %arrayidx32 = getelementptr inbounds i64, i64* %33, i64 1, !dbg !16234, !ctir !1397
  store i64 %add31, i64* %arrayidx32, align 8, !dbg !16234
  %34 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16234
  %m33 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %34, i32 0, i32 0, !dbg !16234, !ctir !16197
  %arraydecay34 = getelementptr inbounds [256 x i64], [256 x i64]* %m33, i64 0, i64 0, !dbg !16234, !ctir !1379
  %35 = load i64, i64* %y19, align 8, !dbg !16234
  %shr35 = lshr i64 %35, 8, !dbg !16234
  %call36 = call i64 @ind(i64* %arraydecay34, i64 %shr35), !dbg !16234
  %36 = load i64, i64* %x18, align 8, !dbg !16234
  %add37 = add i64 %call36, %36, !dbg !16234
  %call38 = call i64 @just(i64 %add37), !dbg !16234
  store i64 %call38, i64* %b, align 8, !dbg !16234
  %37 = load i64*, i64** %r, align 8, !dbg !16234
  %arrayidx39 = getelementptr inbounds i64, i64* %37, i64 1, !dbg !16234, !ctir !1397
  store i64 %call38, i64* %arrayidx39, align 8, !dbg !16234
  call void @llvm.dbg.declare(metadata i64* %x40, metadata !16236, metadata !DIExpression()), !dbg !16238
  call void @llvm.dbg.declare(metadata i64* %y41, metadata !16239, metadata !DIExpression()), !dbg !16238
  %38 = load i64, i64* %a, align 8, !dbg !16238
  %39 = load i64, i64* %a, align 8, !dbg !16238
  %shl42 = shl i64 %39, 12, !dbg !16238
  %xor43 = xor i64 %38, %shl42, !dbg !16238
  %xor44 = xor i64 0, %xor43, !dbg !16238
  %40 = load i64*, i64** %m, align 8, !dbg !16238
  %arrayidx45 = getelementptr inbounds i64, i64* %40, i64 130, !dbg !16238, !ctir !1397
  %41 = load i64, i64* %arrayidx45, align 8, !dbg !16238
  %add46 = add i64 %xor44, %41, !dbg !16238
  store i64 %add46, i64* %a, align 8, !dbg !16238
  %42 = load i64*, i64** %m, align 8, !dbg !16238
  %arrayidx47 = getelementptr inbounds i64, i64* %42, i64 2, !dbg !16238, !ctir !1397
  %43 = load i64, i64* %arrayidx47, align 8, !dbg !16238
  store i64 %43, i64* %x40, align 8, !dbg !16238
  %44 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16238
  %m48 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %44, i32 0, i32 0, !dbg !16238, !ctir !16197
  %arraydecay49 = getelementptr inbounds [256 x i64], [256 x i64]* %m48, i64 0, i64 0, !dbg !16238, !ctir !1379
  %45 = load i64, i64* %x40, align 8, !dbg !16238
  %call50 = call i64 @ind(i64* %arraydecay49, i64 %45), !dbg !16238
  %46 = load i64, i64* %a, align 8, !dbg !16238
  %add51 = add i64 %call50, %46, !dbg !16238
  %47 = load i64, i64* %b, align 8, !dbg !16238
  %add52 = add i64 %add51, %47, !dbg !16238
  store i64 %add52, i64* %y41, align 8, !dbg !16238
  %48 = load i64*, i64** %m, align 8, !dbg !16238
  %arrayidx53 = getelementptr inbounds i64, i64* %48, i64 2, !dbg !16238, !ctir !1397
  store i64 %add52, i64* %arrayidx53, align 8, !dbg !16238
  %49 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16238
  %m54 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %49, i32 0, i32 0, !dbg !16238, !ctir !16197
  %arraydecay55 = getelementptr inbounds [256 x i64], [256 x i64]* %m54, i64 0, i64 0, !dbg !16238, !ctir !1379
  %50 = load i64, i64* %y41, align 8, !dbg !16238
  %shr56 = lshr i64 %50, 8, !dbg !16238
  %call57 = call i64 @ind(i64* %arraydecay55, i64 %shr56), !dbg !16238
  %51 = load i64, i64* %x40, align 8, !dbg !16238
  %add58 = add i64 %call57, %51, !dbg !16238
  %call59 = call i64 @just(i64 %add58), !dbg !16238
  store i64 %call59, i64* %b, align 8, !dbg !16238
  %52 = load i64*, i64** %r, align 8, !dbg !16238
  %arrayidx60 = getelementptr inbounds i64, i64* %52, i64 2, !dbg !16238, !ctir !1397
  store i64 %call59, i64* %arrayidx60, align 8, !dbg !16238
  call void @llvm.dbg.declare(metadata i64* %x61, metadata !16240, metadata !DIExpression()), !dbg !16242
  call void @llvm.dbg.declare(metadata i64* %y62, metadata !16243, metadata !DIExpression()), !dbg !16242
  %53 = load i64, i64* %a, align 8, !dbg !16242
  %54 = load i64, i64* %a, align 8, !dbg !16242
  %call63 = call i64 @just(i64 %54), !dbg !16242
  %shr64 = lshr i64 %call63, 33, !dbg !16242
  %xor65 = xor i64 %53, %shr64, !dbg !16242
  %xor66 = xor i64 0, %xor65, !dbg !16242
  %55 = load i64*, i64** %m, align 8, !dbg !16242
  %arrayidx67 = getelementptr inbounds i64, i64* %55, i64 131, !dbg !16242, !ctir !1397
  %56 = load i64, i64* %arrayidx67, align 8, !dbg !16242
  %add68 = add i64 %xor66, %56, !dbg !16242
  store i64 %add68, i64* %a, align 8, !dbg !16242
  %57 = load i64*, i64** %m, align 8, !dbg !16242
  %arrayidx69 = getelementptr inbounds i64, i64* %57, i64 3, !dbg !16242, !ctir !1397
  %58 = load i64, i64* %arrayidx69, align 8, !dbg !16242
  store i64 %58, i64* %x61, align 8, !dbg !16242
  %59 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16242
  %m70 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %59, i32 0, i32 0, !dbg !16242, !ctir !16197
  %arraydecay71 = getelementptr inbounds [256 x i64], [256 x i64]* %m70, i64 0, i64 0, !dbg !16242, !ctir !1379
  %60 = load i64, i64* %x61, align 8, !dbg !16242
  %call72 = call i64 @ind(i64* %arraydecay71, i64 %60), !dbg !16242
  %61 = load i64, i64* %a, align 8, !dbg !16242
  %add73 = add i64 %call72, %61, !dbg !16242
  %62 = load i64, i64* %b, align 8, !dbg !16242
  %add74 = add i64 %add73, %62, !dbg !16242
  store i64 %add74, i64* %y62, align 8, !dbg !16242
  %63 = load i64*, i64** %m, align 8, !dbg !16242
  %arrayidx75 = getelementptr inbounds i64, i64* %63, i64 3, !dbg !16242, !ctir !1397
  store i64 %add74, i64* %arrayidx75, align 8, !dbg !16242
  %64 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16242
  %m76 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %64, i32 0, i32 0, !dbg !16242, !ctir !16197
  %arraydecay77 = getelementptr inbounds [256 x i64], [256 x i64]* %m76, i64 0, i64 0, !dbg !16242, !ctir !1379
  %65 = load i64, i64* %y62, align 8, !dbg !16242
  %shr78 = lshr i64 %65, 8, !dbg !16242
  %call79 = call i64 @ind(i64* %arraydecay77, i64 %shr78), !dbg !16242
  %66 = load i64, i64* %x61, align 8, !dbg !16242
  %add80 = add i64 %call79, %66, !dbg !16242
  %call81 = call i64 @just(i64 %add80), !dbg !16242
  store i64 %call81, i64* %b, align 8, !dbg !16242
  %67 = load i64*, i64** %r, align 8, !dbg !16242
  %arrayidx82 = getelementptr inbounds i64, i64* %67, i64 3, !dbg !16242, !ctir !1397
  store i64 %call81, i64* %arrayidx82, align 8, !dbg !16242
  %68 = load i64*, i64** %r, align 8, !dbg !16244
  %add.ptr = getelementptr inbounds i64, i64* %68, i64 4, !dbg !16244, !ctir !1380
  store i64* %add.ptr, i64** %r, align 8, !dbg !16244
  br label %do.cond, !dbg !16245

do.cond:                                          ; preds = %do.body
  %69 = load i64*, i64** %m, align 8, !dbg !16246
  %add.ptr83 = getelementptr inbounds i64, i64* %69, i64 4, !dbg !16246, !ctir !1380
  store i64* %add.ptr83, i64** %m, align 8, !dbg !16246
  %70 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16247
  %m84 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %70, i32 0, i32 0, !dbg !16248, !ctir !16197
  %arraydecay85 = getelementptr inbounds [256 x i64], [256 x i64]* %m84, i64 0, i64 0, !dbg !16247, !ctir !1379
  %add.ptr86 = getelementptr inbounds i64, i64* %arraydecay85, i64 128, !dbg !16249, !ctir !1380
  %cmp = icmp ult i64* %add.ptr83, %add.ptr86, !dbg !16250
  br i1 %cmp, label %do.body, label %do.end, !dbg !16245, !llvm.loop !16251

do.end:                                           ; preds = %do.cond
  br label %do.body87, !dbg !16253

do.body87:                                        ; preds = %do.cond176, %do.end
  call void @llvm.dbg.declare(metadata i64* %x88, metadata !16254, metadata !DIExpression()), !dbg !16257
  call void @llvm.dbg.declare(metadata i64* %y89, metadata !16258, metadata !DIExpression()), !dbg !16257
  %71 = load i64, i64* %a, align 8, !dbg !16257
  %72 = load i64, i64* %a, align 8, !dbg !16257
  %shl90 = shl i64 %72, 21, !dbg !16257
  %xor91 = xor i64 %71, %shl90, !dbg !16257
  %neg92 = xor i64 %xor91, -1, !dbg !16257
  %xor93 = xor i64 0, %neg92, !dbg !16257
  %73 = load i64*, i64** %m, align 8, !dbg !16257
  %arrayidx94 = getelementptr inbounds i64, i64* %73, i64 -128, !dbg !16257, !ctir !1397
  %74 = load i64, i64* %arrayidx94, align 8, !dbg !16257
  %add95 = add i64 %xor93, %74, !dbg !16257
  store i64 %add95, i64* %a, align 8, !dbg !16257
  %75 = load i64*, i64** %m, align 8, !dbg !16257
  %arrayidx96 = getelementptr inbounds i64, i64* %75, i64 0, !dbg !16257, !ctir !1397
  %76 = load i64, i64* %arrayidx96, align 8, !dbg !16257
  store i64 %76, i64* %x88, align 8, !dbg !16257
  %77 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16257
  %m97 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %77, i32 0, i32 0, !dbg !16257, !ctir !16197
  %arraydecay98 = getelementptr inbounds [256 x i64], [256 x i64]* %m97, i64 0, i64 0, !dbg !16257, !ctir !1379
  %78 = load i64, i64* %x88, align 8, !dbg !16257
  %call99 = call i64 @ind(i64* %arraydecay98, i64 %78), !dbg !16257
  %79 = load i64, i64* %a, align 8, !dbg !16257
  %add100 = add i64 %call99, %79, !dbg !16257
  %80 = load i64, i64* %b, align 8, !dbg !16257
  %add101 = add i64 %add100, %80, !dbg !16257
  store i64 %add101, i64* %y89, align 8, !dbg !16257
  %81 = load i64*, i64** %m, align 8, !dbg !16257
  %arrayidx102 = getelementptr inbounds i64, i64* %81, i64 0, !dbg !16257, !ctir !1397
  store i64 %add101, i64* %arrayidx102, align 8, !dbg !16257
  %82 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16257
  %m103 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %82, i32 0, i32 0, !dbg !16257, !ctir !16197
  %arraydecay104 = getelementptr inbounds [256 x i64], [256 x i64]* %m103, i64 0, i64 0, !dbg !16257, !ctir !1379
  %83 = load i64, i64* %y89, align 8, !dbg !16257
  %shr105 = lshr i64 %83, 8, !dbg !16257
  %call106 = call i64 @ind(i64* %arraydecay104, i64 %shr105), !dbg !16257
  %84 = load i64, i64* %x88, align 8, !dbg !16257
  %add107 = add i64 %call106, %84, !dbg !16257
  %call108 = call i64 @just(i64 %add107), !dbg !16257
  store i64 %call108, i64* %b, align 8, !dbg !16257
  %85 = load i64*, i64** %r, align 8, !dbg !16257
  %arrayidx109 = getelementptr inbounds i64, i64* %85, i64 0, !dbg !16257, !ctir !1397
  store i64 %call108, i64* %arrayidx109, align 8, !dbg !16257
  call void @llvm.dbg.declare(metadata i64* %x110, metadata !16259, metadata !DIExpression()), !dbg !16261
  call void @llvm.dbg.declare(metadata i64* %y111, metadata !16262, metadata !DIExpression()), !dbg !16261
  %86 = load i64, i64* %a, align 8, !dbg !16261
  %87 = load i64, i64* %a, align 8, !dbg !16261
  %call112 = call i64 @just(i64 %87), !dbg !16261
  %shr113 = lshr i64 %call112, 5, !dbg !16261
  %xor114 = xor i64 %86, %shr113, !dbg !16261
  %xor115 = xor i64 0, %xor114, !dbg !16261
  %88 = load i64*, i64** %m, align 8, !dbg !16261
  %arrayidx116 = getelementptr inbounds i64, i64* %88, i64 -127, !dbg !16261, !ctir !1397
  %89 = load i64, i64* %arrayidx116, align 8, !dbg !16261
  %add117 = add i64 %xor115, %89, !dbg !16261
  store i64 %add117, i64* %a, align 8, !dbg !16261
  %90 = load i64*, i64** %m, align 8, !dbg !16261
  %arrayidx118 = getelementptr inbounds i64, i64* %90, i64 1, !dbg !16261, !ctir !1397
  %91 = load i64, i64* %arrayidx118, align 8, !dbg !16261
  store i64 %91, i64* %x110, align 8, !dbg !16261
  %92 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16261
  %m119 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %92, i32 0, i32 0, !dbg !16261, !ctir !16197
  %arraydecay120 = getelementptr inbounds [256 x i64], [256 x i64]* %m119, i64 0, i64 0, !dbg !16261, !ctir !1379
  %93 = load i64, i64* %x110, align 8, !dbg !16261
  %call121 = call i64 @ind(i64* %arraydecay120, i64 %93), !dbg !16261
  %94 = load i64, i64* %a, align 8, !dbg !16261
  %add122 = add i64 %call121, %94, !dbg !16261
  %95 = load i64, i64* %b, align 8, !dbg !16261
  %add123 = add i64 %add122, %95, !dbg !16261
  store i64 %add123, i64* %y111, align 8, !dbg !16261
  %96 = load i64*, i64** %m, align 8, !dbg !16261
  %arrayidx124 = getelementptr inbounds i64, i64* %96, i64 1, !dbg !16261, !ctir !1397
  store i64 %add123, i64* %arrayidx124, align 8, !dbg !16261
  %97 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16261
  %m125 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %97, i32 0, i32 0, !dbg !16261, !ctir !16197
  %arraydecay126 = getelementptr inbounds [256 x i64], [256 x i64]* %m125, i64 0, i64 0, !dbg !16261, !ctir !1379
  %98 = load i64, i64* %y111, align 8, !dbg !16261
  %shr127 = lshr i64 %98, 8, !dbg !16261
  %call128 = call i64 @ind(i64* %arraydecay126, i64 %shr127), !dbg !16261
  %99 = load i64, i64* %x110, align 8, !dbg !16261
  %add129 = add i64 %call128, %99, !dbg !16261
  %call130 = call i64 @just(i64 %add129), !dbg !16261
  store i64 %call130, i64* %b, align 8, !dbg !16261
  %100 = load i64*, i64** %r, align 8, !dbg !16261
  %arrayidx131 = getelementptr inbounds i64, i64* %100, i64 1, !dbg !16261, !ctir !1397
  store i64 %call130, i64* %arrayidx131, align 8, !dbg !16261
  call void @llvm.dbg.declare(metadata i64* %x132, metadata !16263, metadata !DIExpression()), !dbg !16265
  call void @llvm.dbg.declare(metadata i64* %y133, metadata !16266, metadata !DIExpression()), !dbg !16265
  %101 = load i64, i64* %a, align 8, !dbg !16265
  %102 = load i64, i64* %a, align 8, !dbg !16265
  %shl134 = shl i64 %102, 12, !dbg !16265
  %xor135 = xor i64 %101, %shl134, !dbg !16265
  %xor136 = xor i64 0, %xor135, !dbg !16265
  %103 = load i64*, i64** %m, align 8, !dbg !16265
  %arrayidx137 = getelementptr inbounds i64, i64* %103, i64 -126, !dbg !16265, !ctir !1397
  %104 = load i64, i64* %arrayidx137, align 8, !dbg !16265
  %add138 = add i64 %xor136, %104, !dbg !16265
  store i64 %add138, i64* %a, align 8, !dbg !16265
  %105 = load i64*, i64** %m, align 8, !dbg !16265
  %arrayidx139 = getelementptr inbounds i64, i64* %105, i64 2, !dbg !16265, !ctir !1397
  %106 = load i64, i64* %arrayidx139, align 8, !dbg !16265
  store i64 %106, i64* %x132, align 8, !dbg !16265
  %107 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16265
  %m140 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %107, i32 0, i32 0, !dbg !16265, !ctir !16197
  %arraydecay141 = getelementptr inbounds [256 x i64], [256 x i64]* %m140, i64 0, i64 0, !dbg !16265, !ctir !1379
  %108 = load i64, i64* %x132, align 8, !dbg !16265
  %call142 = call i64 @ind(i64* %arraydecay141, i64 %108), !dbg !16265
  %109 = load i64, i64* %a, align 8, !dbg !16265
  %add143 = add i64 %call142, %109, !dbg !16265
  %110 = load i64, i64* %b, align 8, !dbg !16265
  %add144 = add i64 %add143, %110, !dbg !16265
  store i64 %add144, i64* %y133, align 8, !dbg !16265
  %111 = load i64*, i64** %m, align 8, !dbg !16265
  %arrayidx145 = getelementptr inbounds i64, i64* %111, i64 2, !dbg !16265, !ctir !1397
  store i64 %add144, i64* %arrayidx145, align 8, !dbg !16265
  %112 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16265
  %m146 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %112, i32 0, i32 0, !dbg !16265, !ctir !16197
  %arraydecay147 = getelementptr inbounds [256 x i64], [256 x i64]* %m146, i64 0, i64 0, !dbg !16265, !ctir !1379
  %113 = load i64, i64* %y133, align 8, !dbg !16265
  %shr148 = lshr i64 %113, 8, !dbg !16265
  %call149 = call i64 @ind(i64* %arraydecay147, i64 %shr148), !dbg !16265
  %114 = load i64, i64* %x132, align 8, !dbg !16265
  %add150 = add i64 %call149, %114, !dbg !16265
  %call151 = call i64 @just(i64 %add150), !dbg !16265
  store i64 %call151, i64* %b, align 8, !dbg !16265
  %115 = load i64*, i64** %r, align 8, !dbg !16265
  %arrayidx152 = getelementptr inbounds i64, i64* %115, i64 2, !dbg !16265, !ctir !1397
  store i64 %call151, i64* %arrayidx152, align 8, !dbg !16265
  call void @llvm.dbg.declare(metadata i64* %x153, metadata !16267, metadata !DIExpression()), !dbg !16269
  call void @llvm.dbg.declare(metadata i64* %y154, metadata !16270, metadata !DIExpression()), !dbg !16269
  %116 = load i64, i64* %a, align 8, !dbg !16269
  %117 = load i64, i64* %a, align 8, !dbg !16269
  %call155 = call i64 @just(i64 %117), !dbg !16269
  %shr156 = lshr i64 %call155, 33, !dbg !16269
  %xor157 = xor i64 %116, %shr156, !dbg !16269
  %xor158 = xor i64 0, %xor157, !dbg !16269
  %118 = load i64*, i64** %m, align 8, !dbg !16269
  %arrayidx159 = getelementptr inbounds i64, i64* %118, i64 -125, !dbg !16269, !ctir !1397
  %119 = load i64, i64* %arrayidx159, align 8, !dbg !16269
  %add160 = add i64 %xor158, %119, !dbg !16269
  store i64 %add160, i64* %a, align 8, !dbg !16269
  %120 = load i64*, i64** %m, align 8, !dbg !16269
  %arrayidx161 = getelementptr inbounds i64, i64* %120, i64 3, !dbg !16269, !ctir !1397
  %121 = load i64, i64* %arrayidx161, align 8, !dbg !16269
  store i64 %121, i64* %x153, align 8, !dbg !16269
  %122 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16269
  %m162 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %122, i32 0, i32 0, !dbg !16269, !ctir !16197
  %arraydecay163 = getelementptr inbounds [256 x i64], [256 x i64]* %m162, i64 0, i64 0, !dbg !16269, !ctir !1379
  %123 = load i64, i64* %x153, align 8, !dbg !16269
  %call164 = call i64 @ind(i64* %arraydecay163, i64 %123), !dbg !16269
  %124 = load i64, i64* %a, align 8, !dbg !16269
  %add165 = add i64 %call164, %124, !dbg !16269
  %125 = load i64, i64* %b, align 8, !dbg !16269
  %add166 = add i64 %add165, %125, !dbg !16269
  store i64 %add166, i64* %y154, align 8, !dbg !16269
  %126 = load i64*, i64** %m, align 8, !dbg !16269
  %arrayidx167 = getelementptr inbounds i64, i64* %126, i64 3, !dbg !16269, !ctir !1397
  store i64 %add166, i64* %arrayidx167, align 8, !dbg !16269
  %127 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16269
  %m168 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %127, i32 0, i32 0, !dbg !16269, !ctir !16197
  %arraydecay169 = getelementptr inbounds [256 x i64], [256 x i64]* %m168, i64 0, i64 0, !dbg !16269, !ctir !1379
  %128 = load i64, i64* %y154, align 8, !dbg !16269
  %shr170 = lshr i64 %128, 8, !dbg !16269
  %call171 = call i64 @ind(i64* %arraydecay169, i64 %shr170), !dbg !16269
  %129 = load i64, i64* %x153, align 8, !dbg !16269
  %add172 = add i64 %call171, %129, !dbg !16269
  %call173 = call i64 @just(i64 %add172), !dbg !16269
  store i64 %call173, i64* %b, align 8, !dbg !16269
  %130 = load i64*, i64** %r, align 8, !dbg !16269
  %arrayidx174 = getelementptr inbounds i64, i64* %130, i64 3, !dbg !16269, !ctir !1397
  store i64 %call173, i64* %arrayidx174, align 8, !dbg !16269
  %131 = load i64*, i64** %r, align 8, !dbg !16271
  %add.ptr175 = getelementptr inbounds i64, i64* %131, i64 4, !dbg !16271, !ctir !1380
  store i64* %add.ptr175, i64** %r, align 8, !dbg !16271
  br label %do.cond176, !dbg !16272

do.cond176:                                       ; preds = %do.body87
  %132 = load i64*, i64** %m, align 8, !dbg !16273
  %add.ptr177 = getelementptr inbounds i64, i64* %132, i64 4, !dbg !16273, !ctir !1380
  store i64* %add.ptr177, i64** %m, align 8, !dbg !16273
  %133 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16274
  %m178 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %133, i32 0, i32 0, !dbg !16275, !ctir !16197
  %arraydecay179 = getelementptr inbounds [256 x i64], [256 x i64]* %m178, i64 0, i64 0, !dbg !16274, !ctir !1379
  %add.ptr180 = getelementptr inbounds i64, i64* %arraydecay179, i64 256, !dbg !16276, !ctir !1380
  %cmp181 = icmp ult i64* %add.ptr177, %add.ptr180, !dbg !16277
  br i1 %cmp181, label %do.body87, label %do.end182, !dbg !16272, !llvm.loop !16278

do.end182:                                        ; preds = %do.cond176
  %134 = load i64, i64* %a, align 8, !dbg !16280
  %135 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16281
  %a183 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %135, i32 0, i32 1, !dbg !16282, !ctir !16197
  store i64 %134, i64* %a183, align 8, !dbg !16283, !ctir !1380
  %136 = load i64, i64* %b, align 8, !dbg !16284
  %137 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16285
  %b184 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %137, i32 0, i32 2, !dbg !16286, !ctir !16197
  store i64 %136, i64* %b184, align 8, !dbg !16287, !ctir !1380
  ret void, !dbg !16288
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @ind(i64* %m, i64 %x) #4 !dbg !16289 {
entry:
  %m.addr = alloca i64*, align 8
  %x.addr = alloca i64, align 8
  %void_m = alloca i8*, align 8, !ctir !85
  %base_p = alloca i8*, align 8, !ctir !90
  %word_p = alloca i8*, align 8, !ctir !85
  %p = alloca i64*, align 8, !ctir !1401
  store i64* %m, i64** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %m.addr, metadata !16292, metadata !DIExpression()), !dbg !16293
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !16294, metadata !DIExpression()), !dbg !16295
  call void @llvm.dbg.declare(metadata i8** %void_m, metadata !16296, metadata !DIExpression()), !dbg !16299
  %0 = load i64*, i64** %m.addr, align 8, !dbg !16300
  %1 = bitcast i64* %0 to i8*, !dbg !16300
  store i8* %1, i8** %void_m, align 8, !dbg !16299
  call void @llvm.dbg.declare(metadata i8** %base_p, metadata !16301, metadata !DIExpression()), !dbg !16302
  %2 = load i8*, i8** %void_m, align 8, !dbg !16303
  store i8* %2, i8** %base_p, align 8, !dbg !16302
  call void @llvm.dbg.declare(metadata i8** %word_p, metadata !16304, metadata !DIExpression()), !dbg !16305
  %3 = load i8*, i8** %base_p, align 8, !dbg !16306
  %4 = load i64, i64* %x.addr, align 8, !dbg !16307
  %and = and i64 %4, 2040, !dbg !16308
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %and, !dbg !16309, !ctir !91
  store i8* %add.ptr, i8** %word_p, align 8, !dbg !16305
  call void @llvm.dbg.declare(metadata i64** %p, metadata !16310, metadata !DIExpression()), !dbg !16311
  %5 = load i8*, i8** %word_p, align 8, !dbg !16312
  %6 = bitcast i8* %5 to i64*, !dbg !16312
  store i64* %6, i64** %p, align 8, !dbg !16311
  %7 = load i64*, i64** %p, align 8, !dbg !16313
  %8 = load i64, i64* %7, align 8, !dbg !16314, !ctir !1402
  ret i64 %8, !dbg !16315
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @just(i64 %a) #4 !dbg !16316 {
entry:
  %a.addr = alloca i64, align 8
  %desired_bits = alloca i64, align 8, !ctir !1380
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !16319, metadata !DIExpression()), !dbg !16320
  call void @llvm.dbg.declare(metadata i64* %desired_bits, metadata !16321, metadata !DIExpression()), !dbg !16322
  store i64 -1, i64* %desired_bits, align 8, !dbg !16322
  %0 = load i64, i64* %a.addr, align 8, !dbg !16323
  %1 = load i64, i64* %desired_bits, align 8, !dbg !16324
  %and = and i64 %0, %1, !dbg !16325
  ret i64 %and, !dbg !16326
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @isaac_seed(%struct.isaac_state* %s) #4 !dbg !16327 {
entry:
  %s.addr = alloca %struct.isaac_state*, align 8
  %a = alloca i64, align 8, !ctir !1380
  %b = alloca i64, align 8, !ctir !1380
  %c = alloca i64, align 8, !ctir !1380
  %d = alloca i64, align 8, !ctir !1380
  %e = alloca i64, align 8, !ctir !1380
  %f = alloca i64, align 8, !ctir !1380
  %g = alloca i64, align 8, !ctir !1380
  %h = alloca i64, align 8, !ctir !1380
  %i = alloca i32, align 4, !ctir !5
  %i99 = alloca i32, align 4, !ctir !5
  store %struct.isaac_state* %s, %struct.isaac_state** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.isaac_state** %s.addr, metadata !16330, metadata !DIExpression()), !dbg !16331
  call void @llvm.dbg.declare(metadata i64* %a, metadata !16332, metadata !DIExpression()), !dbg !16333
  store i64 7240739780546808700, i64* %a, align 8, !dbg !16333
  call void @llvm.dbg.declare(metadata i64* %b, metadata !16334, metadata !DIExpression()), !dbg !16335
  store i64 -5046086420515862430, i64* %b, align 8, !dbg !16335
  call void @llvm.dbg.declare(metadata i64* %c, metadata !16336, metadata !DIExpression()), !dbg !16337
  store i64 -8354558816804203872, i64* %c, align 8, !dbg !16337
  call void @llvm.dbg.declare(metadata i64* %d, metadata !16338, metadata !DIExpression()), !dbg !16339
  store i64 -5576812576440232668, i64* %d, align 8, !dbg !16339
  call void @llvm.dbg.declare(metadata i64* %e, metadata !16340, metadata !DIExpression()), !dbg !16341
  store i64 -9011610652101975858, i64* %e, align 8, !dbg !16341
  call void @llvm.dbg.declare(metadata i64* %f, metadata !16342, metadata !DIExpression()), !dbg !16343
  store i64 5259722845879046933, i64* %f, align 8, !dbg !16343
  call void @llvm.dbg.declare(metadata i64* %g, metadata !16344, metadata !DIExpression()), !dbg !16345
  store i64 -5865837416287532563, i64* %g, align 8, !dbg !16345
  call void @llvm.dbg.declare(metadata i64* %h, metadata !16346, metadata !DIExpression()), !dbg !16347
  store i64 -7424904924229222229, i64* %h, align 8, !dbg !16347
  call void @llvm.dbg.declare(metadata i32* %i, metadata !16348, metadata !DIExpression()), !dbg !16350
  store i32 0, i32* %i, align 4, !dbg !16351
  br label %for.cond, !dbg !16351

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !16353
  %cmp = icmp slt i32 %0, 256, !dbg !16353
  br i1 %cmp, label %for.body, label %for.end, !dbg !16351

for.body:                                         ; preds = %for.cond
  %1 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %1, i32 0, i32 0, !dbg !16355, !ctir !16197
  %2 = load i32, i32* %i, align 4, !dbg !16355
  %idxprom = sext i32 %2 to i64, !dbg !16355
  %arrayidx = getelementptr inbounds [256 x i64], [256 x i64]* %m, i64 0, i64 %idxprom, !dbg !16355, !ctir !1379
  %3 = load i64, i64* %arrayidx, align 8, !dbg !16355
  %4 = load i64, i64* %a, align 8, !dbg !16355
  %add = add i64 %4, %3, !dbg !16355
  store i64 %add, i64* %a, align 8, !dbg !16355
  %5 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m1 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %5, i32 0, i32 0, !dbg !16355, !ctir !16197
  %6 = load i32, i32* %i, align 4, !dbg !16355
  %add2 = add nsw i32 %6, 1, !dbg !16355
  %idxprom3 = sext i32 %add2 to i64, !dbg !16355
  %arrayidx4 = getelementptr inbounds [256 x i64], [256 x i64]* %m1, i64 0, i64 %idxprom3, !dbg !16355, !ctir !1379
  %7 = load i64, i64* %arrayidx4, align 8, !dbg !16355
  %8 = load i64, i64* %b, align 8, !dbg !16355
  %add5 = add i64 %8, %7, !dbg !16355
  store i64 %add5, i64* %b, align 8, !dbg !16355
  %9 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m6 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %9, i32 0, i32 0, !dbg !16355, !ctir !16197
  %10 = load i32, i32* %i, align 4, !dbg !16355
  %add7 = add nsw i32 %10, 2, !dbg !16355
  %idxprom8 = sext i32 %add7 to i64, !dbg !16355
  %arrayidx9 = getelementptr inbounds [256 x i64], [256 x i64]* %m6, i64 0, i64 %idxprom8, !dbg !16355, !ctir !1379
  %11 = load i64, i64* %arrayidx9, align 8, !dbg !16355
  %12 = load i64, i64* %c, align 8, !dbg !16355
  %add10 = add i64 %12, %11, !dbg !16355
  store i64 %add10, i64* %c, align 8, !dbg !16355
  %13 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m11 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %13, i32 0, i32 0, !dbg !16355, !ctir !16197
  %14 = load i32, i32* %i, align 4, !dbg !16355
  %add12 = add nsw i32 %14, 3, !dbg !16355
  %idxprom13 = sext i32 %add12 to i64, !dbg !16355
  %arrayidx14 = getelementptr inbounds [256 x i64], [256 x i64]* %m11, i64 0, i64 %idxprom13, !dbg !16355, !ctir !1379
  %15 = load i64, i64* %arrayidx14, align 8, !dbg !16355
  %16 = load i64, i64* %d, align 8, !dbg !16355
  %add15 = add i64 %16, %15, !dbg !16355
  store i64 %add15, i64* %d, align 8, !dbg !16355
  %17 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m16 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %17, i32 0, i32 0, !dbg !16355, !ctir !16197
  %18 = load i32, i32* %i, align 4, !dbg !16355
  %add17 = add nsw i32 %18, 4, !dbg !16355
  %idxprom18 = sext i32 %add17 to i64, !dbg !16355
  %arrayidx19 = getelementptr inbounds [256 x i64], [256 x i64]* %m16, i64 0, i64 %idxprom18, !dbg !16355, !ctir !1379
  %19 = load i64, i64* %arrayidx19, align 8, !dbg !16355
  %20 = load i64, i64* %e, align 8, !dbg !16355
  %add20 = add i64 %20, %19, !dbg !16355
  store i64 %add20, i64* %e, align 8, !dbg !16355
  %21 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m21 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %21, i32 0, i32 0, !dbg !16355, !ctir !16197
  %22 = load i32, i32* %i, align 4, !dbg !16355
  %add22 = add nsw i32 %22, 5, !dbg !16355
  %idxprom23 = sext i32 %add22 to i64, !dbg !16355
  %arrayidx24 = getelementptr inbounds [256 x i64], [256 x i64]* %m21, i64 0, i64 %idxprom23, !dbg !16355, !ctir !1379
  %23 = load i64, i64* %arrayidx24, align 8, !dbg !16355
  %24 = load i64, i64* %f, align 8, !dbg !16355
  %add25 = add i64 %24, %23, !dbg !16355
  store i64 %add25, i64* %f, align 8, !dbg !16355
  %25 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m26 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %25, i32 0, i32 0, !dbg !16355, !ctir !16197
  %26 = load i32, i32* %i, align 4, !dbg !16355
  %add27 = add nsw i32 %26, 6, !dbg !16355
  %idxprom28 = sext i32 %add27 to i64, !dbg !16355
  %arrayidx29 = getelementptr inbounds [256 x i64], [256 x i64]* %m26, i64 0, i64 %idxprom28, !dbg !16355, !ctir !1379
  %27 = load i64, i64* %arrayidx29, align 8, !dbg !16355
  %28 = load i64, i64* %g, align 8, !dbg !16355
  %add30 = add i64 %28, %27, !dbg !16355
  store i64 %add30, i64* %g, align 8, !dbg !16355
  %29 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m31 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %29, i32 0, i32 0, !dbg !16355, !ctir !16197
  %30 = load i32, i32* %i, align 4, !dbg !16355
  %add32 = add nsw i32 %30, 7, !dbg !16355
  %idxprom33 = sext i32 %add32 to i64, !dbg !16355
  %arrayidx34 = getelementptr inbounds [256 x i64], [256 x i64]* %m31, i64 0, i64 %idxprom33, !dbg !16355, !ctir !1379
  %31 = load i64, i64* %arrayidx34, align 8, !dbg !16355
  %32 = load i64, i64* %h, align 8, !dbg !16355
  %add35 = add i64 %32, %31, !dbg !16355
  store i64 %add35, i64* %h, align 8, !dbg !16355
  %33 = load i64, i64* %e, align 8, !dbg !16357
  %34 = load i64, i64* %a, align 8, !dbg !16357
  %sub = sub i64 %34, %33, !dbg !16357
  store i64 %sub, i64* %a, align 8, !dbg !16357
  %35 = load i64, i64* %h, align 8, !dbg !16357
  %call = call i64 @just(i64 %35), !dbg !16357
  %shr = lshr i64 %call, 9, !dbg !16357
  %36 = load i64, i64* %f, align 8, !dbg !16357
  %xor = xor i64 %36, %shr, !dbg !16357
  store i64 %xor, i64* %f, align 8, !dbg !16357
  %37 = load i64, i64* %a, align 8, !dbg !16357
  %38 = load i64, i64* %h, align 8, !dbg !16357
  %add36 = add i64 %38, %37, !dbg !16357
  store i64 %add36, i64* %h, align 8, !dbg !16357
  %39 = load i64, i64* %f, align 8, !dbg !16357
  %40 = load i64, i64* %b, align 8, !dbg !16357
  %sub37 = sub i64 %40, %39, !dbg !16357
  store i64 %sub37, i64* %b, align 8, !dbg !16357
  %41 = load i64, i64* %a, align 8, !dbg !16357
  %shl = shl i64 %41, 9, !dbg !16357
  %42 = load i64, i64* %g, align 8, !dbg !16357
  %xor38 = xor i64 %42, %shl, !dbg !16357
  store i64 %xor38, i64* %g, align 8, !dbg !16357
  %43 = load i64, i64* %b, align 8, !dbg !16357
  %44 = load i64, i64* %a, align 8, !dbg !16357
  %add39 = add i64 %44, %43, !dbg !16357
  store i64 %add39, i64* %a, align 8, !dbg !16357
  %45 = load i64, i64* %g, align 8, !dbg !16357
  %46 = load i64, i64* %c, align 8, !dbg !16357
  %sub40 = sub i64 %46, %45, !dbg !16357
  store i64 %sub40, i64* %c, align 8, !dbg !16357
  %47 = load i64, i64* %b, align 8, !dbg !16357
  %call41 = call i64 @just(i64 %47), !dbg !16357
  %shr42 = lshr i64 %call41, 23, !dbg !16357
  %48 = load i64, i64* %h, align 8, !dbg !16357
  %xor43 = xor i64 %48, %shr42, !dbg !16357
  store i64 %xor43, i64* %h, align 8, !dbg !16357
  %49 = load i64, i64* %c, align 8, !dbg !16357
  %50 = load i64, i64* %b, align 8, !dbg !16357
  %add44 = add i64 %50, %49, !dbg !16357
  store i64 %add44, i64* %b, align 8, !dbg !16357
  %51 = load i64, i64* %h, align 8, !dbg !16357
  %52 = load i64, i64* %d, align 8, !dbg !16357
  %sub45 = sub i64 %52, %51, !dbg !16357
  store i64 %sub45, i64* %d, align 8, !dbg !16357
  %53 = load i64, i64* %c, align 8, !dbg !16357
  %shl46 = shl i64 %53, 15, !dbg !16357
  %54 = load i64, i64* %a, align 8, !dbg !16357
  %xor47 = xor i64 %54, %shl46, !dbg !16357
  store i64 %xor47, i64* %a, align 8, !dbg !16357
  %55 = load i64, i64* %d, align 8, !dbg !16357
  %56 = load i64, i64* %c, align 8, !dbg !16357
  %add48 = add i64 %56, %55, !dbg !16357
  store i64 %add48, i64* %c, align 8, !dbg !16357
  %57 = load i64, i64* %a, align 8, !dbg !16357
  %58 = load i64, i64* %e, align 8, !dbg !16357
  %sub49 = sub i64 %58, %57, !dbg !16357
  store i64 %sub49, i64* %e, align 8, !dbg !16357
  %59 = load i64, i64* %d, align 8, !dbg !16357
  %call50 = call i64 @just(i64 %59), !dbg !16357
  %shr51 = lshr i64 %call50, 14, !dbg !16357
  %60 = load i64, i64* %b, align 8, !dbg !16357
  %xor52 = xor i64 %60, %shr51, !dbg !16357
  store i64 %xor52, i64* %b, align 8, !dbg !16357
  %61 = load i64, i64* %e, align 8, !dbg !16357
  %62 = load i64, i64* %d, align 8, !dbg !16357
  %add53 = add i64 %62, %61, !dbg !16357
  store i64 %add53, i64* %d, align 8, !dbg !16357
  %63 = load i64, i64* %b, align 8, !dbg !16357
  %64 = load i64, i64* %f, align 8, !dbg !16357
  %sub54 = sub i64 %64, %63, !dbg !16357
  store i64 %sub54, i64* %f, align 8, !dbg !16357
  %65 = load i64, i64* %e, align 8, !dbg !16357
  %shl55 = shl i64 %65, 20, !dbg !16357
  %66 = load i64, i64* %c, align 8, !dbg !16357
  %xor56 = xor i64 %66, %shl55, !dbg !16357
  store i64 %xor56, i64* %c, align 8, !dbg !16357
  %67 = load i64, i64* %f, align 8, !dbg !16357
  %68 = load i64, i64* %e, align 8, !dbg !16357
  %add57 = add i64 %68, %67, !dbg !16357
  store i64 %add57, i64* %e, align 8, !dbg !16357
  %69 = load i64, i64* %c, align 8, !dbg !16357
  %70 = load i64, i64* %g, align 8, !dbg !16357
  %sub58 = sub i64 %70, %69, !dbg !16357
  store i64 %sub58, i64* %g, align 8, !dbg !16357
  %71 = load i64, i64* %f, align 8, !dbg !16357
  %call59 = call i64 @just(i64 %71), !dbg !16357
  %shr60 = lshr i64 %call59, 17, !dbg !16357
  %72 = load i64, i64* %d, align 8, !dbg !16357
  %xor61 = xor i64 %72, %shr60, !dbg !16357
  store i64 %xor61, i64* %d, align 8, !dbg !16357
  %73 = load i64, i64* %g, align 8, !dbg !16357
  %74 = load i64, i64* %f, align 8, !dbg !16357
  %add62 = add i64 %74, %73, !dbg !16357
  store i64 %add62, i64* %f, align 8, !dbg !16357
  %75 = load i64, i64* %d, align 8, !dbg !16357
  %76 = load i64, i64* %h, align 8, !dbg !16357
  %sub63 = sub i64 %76, %75, !dbg !16357
  store i64 %sub63, i64* %h, align 8, !dbg !16357
  %77 = load i64, i64* %g, align 8, !dbg !16357
  %shl64 = shl i64 %77, 14, !dbg !16357
  %78 = load i64, i64* %e, align 8, !dbg !16357
  %xor65 = xor i64 %78, %shl64, !dbg !16357
  store i64 %xor65, i64* %e, align 8, !dbg !16357
  %79 = load i64, i64* %h, align 8, !dbg !16357
  %80 = load i64, i64* %g, align 8, !dbg !16357
  %add66 = add i64 %80, %79, !dbg !16357
  store i64 %add66, i64* %g, align 8, !dbg !16357
  %81 = load i64, i64* %a, align 8, !dbg !16355
  %82 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m67 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %82, i32 0, i32 0, !dbg !16355, !ctir !16197
  %83 = load i32, i32* %i, align 4, !dbg !16355
  %idxprom68 = sext i32 %83 to i64, !dbg !16355
  %arrayidx69 = getelementptr inbounds [256 x i64], [256 x i64]* %m67, i64 0, i64 %idxprom68, !dbg !16355, !ctir !1379
  store i64 %81, i64* %arrayidx69, align 8, !dbg !16355
  %84 = load i64, i64* %b, align 8, !dbg !16355
  %85 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m70 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %85, i32 0, i32 0, !dbg !16355, !ctir !16197
  %86 = load i32, i32* %i, align 4, !dbg !16355
  %add71 = add nsw i32 %86, 1, !dbg !16355
  %idxprom72 = sext i32 %add71 to i64, !dbg !16355
  %arrayidx73 = getelementptr inbounds [256 x i64], [256 x i64]* %m70, i64 0, i64 %idxprom72, !dbg !16355, !ctir !1379
  store i64 %84, i64* %arrayidx73, align 8, !dbg !16355
  %87 = load i64, i64* %c, align 8, !dbg !16355
  %88 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m74 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %88, i32 0, i32 0, !dbg !16355, !ctir !16197
  %89 = load i32, i32* %i, align 4, !dbg !16355
  %add75 = add nsw i32 %89, 2, !dbg !16355
  %idxprom76 = sext i32 %add75 to i64, !dbg !16355
  %arrayidx77 = getelementptr inbounds [256 x i64], [256 x i64]* %m74, i64 0, i64 %idxprom76, !dbg !16355, !ctir !1379
  store i64 %87, i64* %arrayidx77, align 8, !dbg !16355
  %90 = load i64, i64* %d, align 8, !dbg !16355
  %91 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m78 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %91, i32 0, i32 0, !dbg !16355, !ctir !16197
  %92 = load i32, i32* %i, align 4, !dbg !16355
  %add79 = add nsw i32 %92, 3, !dbg !16355
  %idxprom80 = sext i32 %add79 to i64, !dbg !16355
  %arrayidx81 = getelementptr inbounds [256 x i64], [256 x i64]* %m78, i64 0, i64 %idxprom80, !dbg !16355, !ctir !1379
  store i64 %90, i64* %arrayidx81, align 8, !dbg !16355
  %93 = load i64, i64* %e, align 8, !dbg !16355
  %94 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m82 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %94, i32 0, i32 0, !dbg !16355, !ctir !16197
  %95 = load i32, i32* %i, align 4, !dbg !16355
  %add83 = add nsw i32 %95, 4, !dbg !16355
  %idxprom84 = sext i32 %add83 to i64, !dbg !16355
  %arrayidx85 = getelementptr inbounds [256 x i64], [256 x i64]* %m82, i64 0, i64 %idxprom84, !dbg !16355, !ctir !1379
  store i64 %93, i64* %arrayidx85, align 8, !dbg !16355
  %96 = load i64, i64* %f, align 8, !dbg !16355
  %97 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m86 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %97, i32 0, i32 0, !dbg !16355, !ctir !16197
  %98 = load i32, i32* %i, align 4, !dbg !16355
  %add87 = add nsw i32 %98, 5, !dbg !16355
  %idxprom88 = sext i32 %add87 to i64, !dbg !16355
  %arrayidx89 = getelementptr inbounds [256 x i64], [256 x i64]* %m86, i64 0, i64 %idxprom88, !dbg !16355, !ctir !1379
  store i64 %96, i64* %arrayidx89, align 8, !dbg !16355
  %99 = load i64, i64* %g, align 8, !dbg !16355
  %100 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m90 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %100, i32 0, i32 0, !dbg !16355, !ctir !16197
  %101 = load i32, i32* %i, align 4, !dbg !16355
  %add91 = add nsw i32 %101, 6, !dbg !16355
  %idxprom92 = sext i32 %add91 to i64, !dbg !16355
  %arrayidx93 = getelementptr inbounds [256 x i64], [256 x i64]* %m90, i64 0, i64 %idxprom92, !dbg !16355, !ctir !1379
  store i64 %99, i64* %arrayidx93, align 8, !dbg !16355
  %102 = load i64, i64* %h, align 8, !dbg !16355
  %103 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16355
  %m94 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %103, i32 0, i32 0, !dbg !16355, !ctir !16197
  %104 = load i32, i32* %i, align 4, !dbg !16355
  %add95 = add nsw i32 %104, 7, !dbg !16355
  %idxprom96 = sext i32 %add95 to i64, !dbg !16355
  %arrayidx97 = getelementptr inbounds [256 x i64], [256 x i64]* %m94, i64 0, i64 %idxprom96, !dbg !16355, !ctir !1379
  store i64 %102, i64* %arrayidx97, align 8, !dbg !16355
  br label %for.inc, !dbg !16355

for.inc:                                          ; preds = %for.body
  %105 = load i32, i32* %i, align 4, !dbg !16353
  %add98 = add nsw i32 %105, 8, !dbg !16353
  store i32 %add98, i32* %i, align 4, !dbg !16353
  br label %for.cond, !dbg !16353, !llvm.loop !16359

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i99, metadata !16360, metadata !DIExpression()), !dbg !16362
  store i32 0, i32* %i99, align 4, !dbg !16363
  br label %for.cond100, !dbg !16363

for.cond100:                                      ; preds = %for.inc209, %for.end
  %106 = load i32, i32* %i99, align 4, !dbg !16365
  %cmp101 = icmp slt i32 %106, 256, !dbg !16365
  br i1 %cmp101, label %for.body102, label %for.end211, !dbg !16363

for.body102:                                      ; preds = %for.cond100
  %107 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m103 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %107, i32 0, i32 0, !dbg !16367, !ctir !16197
  %108 = load i32, i32* %i99, align 4, !dbg !16367
  %idxprom104 = sext i32 %108 to i64, !dbg !16367
  %arrayidx105 = getelementptr inbounds [256 x i64], [256 x i64]* %m103, i64 0, i64 %idxprom104, !dbg !16367, !ctir !1379
  %109 = load i64, i64* %arrayidx105, align 8, !dbg !16367
  %110 = load i64, i64* %a, align 8, !dbg !16367
  %add106 = add i64 %110, %109, !dbg !16367
  store i64 %add106, i64* %a, align 8, !dbg !16367
  %111 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m107 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %111, i32 0, i32 0, !dbg !16367, !ctir !16197
  %112 = load i32, i32* %i99, align 4, !dbg !16367
  %add108 = add nsw i32 %112, 1, !dbg !16367
  %idxprom109 = sext i32 %add108 to i64, !dbg !16367
  %arrayidx110 = getelementptr inbounds [256 x i64], [256 x i64]* %m107, i64 0, i64 %idxprom109, !dbg !16367, !ctir !1379
  %113 = load i64, i64* %arrayidx110, align 8, !dbg !16367
  %114 = load i64, i64* %b, align 8, !dbg !16367
  %add111 = add i64 %114, %113, !dbg !16367
  store i64 %add111, i64* %b, align 8, !dbg !16367
  %115 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m112 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %115, i32 0, i32 0, !dbg !16367, !ctir !16197
  %116 = load i32, i32* %i99, align 4, !dbg !16367
  %add113 = add nsw i32 %116, 2, !dbg !16367
  %idxprom114 = sext i32 %add113 to i64, !dbg !16367
  %arrayidx115 = getelementptr inbounds [256 x i64], [256 x i64]* %m112, i64 0, i64 %idxprom114, !dbg !16367, !ctir !1379
  %117 = load i64, i64* %arrayidx115, align 8, !dbg !16367
  %118 = load i64, i64* %c, align 8, !dbg !16367
  %add116 = add i64 %118, %117, !dbg !16367
  store i64 %add116, i64* %c, align 8, !dbg !16367
  %119 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m117 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %119, i32 0, i32 0, !dbg !16367, !ctir !16197
  %120 = load i32, i32* %i99, align 4, !dbg !16367
  %add118 = add nsw i32 %120, 3, !dbg !16367
  %idxprom119 = sext i32 %add118 to i64, !dbg !16367
  %arrayidx120 = getelementptr inbounds [256 x i64], [256 x i64]* %m117, i64 0, i64 %idxprom119, !dbg !16367, !ctir !1379
  %121 = load i64, i64* %arrayidx120, align 8, !dbg !16367
  %122 = load i64, i64* %d, align 8, !dbg !16367
  %add121 = add i64 %122, %121, !dbg !16367
  store i64 %add121, i64* %d, align 8, !dbg !16367
  %123 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m122 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %123, i32 0, i32 0, !dbg !16367, !ctir !16197
  %124 = load i32, i32* %i99, align 4, !dbg !16367
  %add123 = add nsw i32 %124, 4, !dbg !16367
  %idxprom124 = sext i32 %add123 to i64, !dbg !16367
  %arrayidx125 = getelementptr inbounds [256 x i64], [256 x i64]* %m122, i64 0, i64 %idxprom124, !dbg !16367, !ctir !1379
  %125 = load i64, i64* %arrayidx125, align 8, !dbg !16367
  %126 = load i64, i64* %e, align 8, !dbg !16367
  %add126 = add i64 %126, %125, !dbg !16367
  store i64 %add126, i64* %e, align 8, !dbg !16367
  %127 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m127 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %127, i32 0, i32 0, !dbg !16367, !ctir !16197
  %128 = load i32, i32* %i99, align 4, !dbg !16367
  %add128 = add nsw i32 %128, 5, !dbg !16367
  %idxprom129 = sext i32 %add128 to i64, !dbg !16367
  %arrayidx130 = getelementptr inbounds [256 x i64], [256 x i64]* %m127, i64 0, i64 %idxprom129, !dbg !16367, !ctir !1379
  %129 = load i64, i64* %arrayidx130, align 8, !dbg !16367
  %130 = load i64, i64* %f, align 8, !dbg !16367
  %add131 = add i64 %130, %129, !dbg !16367
  store i64 %add131, i64* %f, align 8, !dbg !16367
  %131 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m132 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %131, i32 0, i32 0, !dbg !16367, !ctir !16197
  %132 = load i32, i32* %i99, align 4, !dbg !16367
  %add133 = add nsw i32 %132, 6, !dbg !16367
  %idxprom134 = sext i32 %add133 to i64, !dbg !16367
  %arrayidx135 = getelementptr inbounds [256 x i64], [256 x i64]* %m132, i64 0, i64 %idxprom134, !dbg !16367, !ctir !1379
  %133 = load i64, i64* %arrayidx135, align 8, !dbg !16367
  %134 = load i64, i64* %g, align 8, !dbg !16367
  %add136 = add i64 %134, %133, !dbg !16367
  store i64 %add136, i64* %g, align 8, !dbg !16367
  %135 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m137 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %135, i32 0, i32 0, !dbg !16367, !ctir !16197
  %136 = load i32, i32* %i99, align 4, !dbg !16367
  %add138 = add nsw i32 %136, 7, !dbg !16367
  %idxprom139 = sext i32 %add138 to i64, !dbg !16367
  %arrayidx140 = getelementptr inbounds [256 x i64], [256 x i64]* %m137, i64 0, i64 %idxprom139, !dbg !16367, !ctir !1379
  %137 = load i64, i64* %arrayidx140, align 8, !dbg !16367
  %138 = load i64, i64* %h, align 8, !dbg !16367
  %add141 = add i64 %138, %137, !dbg !16367
  store i64 %add141, i64* %h, align 8, !dbg !16367
  %139 = load i64, i64* %e, align 8, !dbg !16369
  %140 = load i64, i64* %a, align 8, !dbg !16369
  %sub142 = sub i64 %140, %139, !dbg !16369
  store i64 %sub142, i64* %a, align 8, !dbg !16369
  %141 = load i64, i64* %h, align 8, !dbg !16369
  %call143 = call i64 @just(i64 %141), !dbg !16369
  %shr144 = lshr i64 %call143, 9, !dbg !16369
  %142 = load i64, i64* %f, align 8, !dbg !16369
  %xor145 = xor i64 %142, %shr144, !dbg !16369
  store i64 %xor145, i64* %f, align 8, !dbg !16369
  %143 = load i64, i64* %a, align 8, !dbg !16369
  %144 = load i64, i64* %h, align 8, !dbg !16369
  %add146 = add i64 %144, %143, !dbg !16369
  store i64 %add146, i64* %h, align 8, !dbg !16369
  %145 = load i64, i64* %f, align 8, !dbg !16369
  %146 = load i64, i64* %b, align 8, !dbg !16369
  %sub147 = sub i64 %146, %145, !dbg !16369
  store i64 %sub147, i64* %b, align 8, !dbg !16369
  %147 = load i64, i64* %a, align 8, !dbg !16369
  %shl148 = shl i64 %147, 9, !dbg !16369
  %148 = load i64, i64* %g, align 8, !dbg !16369
  %xor149 = xor i64 %148, %shl148, !dbg !16369
  store i64 %xor149, i64* %g, align 8, !dbg !16369
  %149 = load i64, i64* %b, align 8, !dbg !16369
  %150 = load i64, i64* %a, align 8, !dbg !16369
  %add150 = add i64 %150, %149, !dbg !16369
  store i64 %add150, i64* %a, align 8, !dbg !16369
  %151 = load i64, i64* %g, align 8, !dbg !16369
  %152 = load i64, i64* %c, align 8, !dbg !16369
  %sub151 = sub i64 %152, %151, !dbg !16369
  store i64 %sub151, i64* %c, align 8, !dbg !16369
  %153 = load i64, i64* %b, align 8, !dbg !16369
  %call152 = call i64 @just(i64 %153), !dbg !16369
  %shr153 = lshr i64 %call152, 23, !dbg !16369
  %154 = load i64, i64* %h, align 8, !dbg !16369
  %xor154 = xor i64 %154, %shr153, !dbg !16369
  store i64 %xor154, i64* %h, align 8, !dbg !16369
  %155 = load i64, i64* %c, align 8, !dbg !16369
  %156 = load i64, i64* %b, align 8, !dbg !16369
  %add155 = add i64 %156, %155, !dbg !16369
  store i64 %add155, i64* %b, align 8, !dbg !16369
  %157 = load i64, i64* %h, align 8, !dbg !16369
  %158 = load i64, i64* %d, align 8, !dbg !16369
  %sub156 = sub i64 %158, %157, !dbg !16369
  store i64 %sub156, i64* %d, align 8, !dbg !16369
  %159 = load i64, i64* %c, align 8, !dbg !16369
  %shl157 = shl i64 %159, 15, !dbg !16369
  %160 = load i64, i64* %a, align 8, !dbg !16369
  %xor158 = xor i64 %160, %shl157, !dbg !16369
  store i64 %xor158, i64* %a, align 8, !dbg !16369
  %161 = load i64, i64* %d, align 8, !dbg !16369
  %162 = load i64, i64* %c, align 8, !dbg !16369
  %add159 = add i64 %162, %161, !dbg !16369
  store i64 %add159, i64* %c, align 8, !dbg !16369
  %163 = load i64, i64* %a, align 8, !dbg !16369
  %164 = load i64, i64* %e, align 8, !dbg !16369
  %sub160 = sub i64 %164, %163, !dbg !16369
  store i64 %sub160, i64* %e, align 8, !dbg !16369
  %165 = load i64, i64* %d, align 8, !dbg !16369
  %call161 = call i64 @just(i64 %165), !dbg !16369
  %shr162 = lshr i64 %call161, 14, !dbg !16369
  %166 = load i64, i64* %b, align 8, !dbg !16369
  %xor163 = xor i64 %166, %shr162, !dbg !16369
  store i64 %xor163, i64* %b, align 8, !dbg !16369
  %167 = load i64, i64* %e, align 8, !dbg !16369
  %168 = load i64, i64* %d, align 8, !dbg !16369
  %add164 = add i64 %168, %167, !dbg !16369
  store i64 %add164, i64* %d, align 8, !dbg !16369
  %169 = load i64, i64* %b, align 8, !dbg !16369
  %170 = load i64, i64* %f, align 8, !dbg !16369
  %sub165 = sub i64 %170, %169, !dbg !16369
  store i64 %sub165, i64* %f, align 8, !dbg !16369
  %171 = load i64, i64* %e, align 8, !dbg !16369
  %shl166 = shl i64 %171, 20, !dbg !16369
  %172 = load i64, i64* %c, align 8, !dbg !16369
  %xor167 = xor i64 %172, %shl166, !dbg !16369
  store i64 %xor167, i64* %c, align 8, !dbg !16369
  %173 = load i64, i64* %f, align 8, !dbg !16369
  %174 = load i64, i64* %e, align 8, !dbg !16369
  %add168 = add i64 %174, %173, !dbg !16369
  store i64 %add168, i64* %e, align 8, !dbg !16369
  %175 = load i64, i64* %c, align 8, !dbg !16369
  %176 = load i64, i64* %g, align 8, !dbg !16369
  %sub169 = sub i64 %176, %175, !dbg !16369
  store i64 %sub169, i64* %g, align 8, !dbg !16369
  %177 = load i64, i64* %f, align 8, !dbg !16369
  %call170 = call i64 @just(i64 %177), !dbg !16369
  %shr171 = lshr i64 %call170, 17, !dbg !16369
  %178 = load i64, i64* %d, align 8, !dbg !16369
  %xor172 = xor i64 %178, %shr171, !dbg !16369
  store i64 %xor172, i64* %d, align 8, !dbg !16369
  %179 = load i64, i64* %g, align 8, !dbg !16369
  %180 = load i64, i64* %f, align 8, !dbg !16369
  %add173 = add i64 %180, %179, !dbg !16369
  store i64 %add173, i64* %f, align 8, !dbg !16369
  %181 = load i64, i64* %d, align 8, !dbg !16369
  %182 = load i64, i64* %h, align 8, !dbg !16369
  %sub174 = sub i64 %182, %181, !dbg !16369
  store i64 %sub174, i64* %h, align 8, !dbg !16369
  %183 = load i64, i64* %g, align 8, !dbg !16369
  %shl175 = shl i64 %183, 14, !dbg !16369
  %184 = load i64, i64* %e, align 8, !dbg !16369
  %xor176 = xor i64 %184, %shl175, !dbg !16369
  store i64 %xor176, i64* %e, align 8, !dbg !16369
  %185 = load i64, i64* %h, align 8, !dbg !16369
  %186 = load i64, i64* %g, align 8, !dbg !16369
  %add177 = add i64 %186, %185, !dbg !16369
  store i64 %add177, i64* %g, align 8, !dbg !16369
  %187 = load i64, i64* %a, align 8, !dbg !16367
  %188 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m178 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %188, i32 0, i32 0, !dbg !16367, !ctir !16197
  %189 = load i32, i32* %i99, align 4, !dbg !16367
  %idxprom179 = sext i32 %189 to i64, !dbg !16367
  %arrayidx180 = getelementptr inbounds [256 x i64], [256 x i64]* %m178, i64 0, i64 %idxprom179, !dbg !16367, !ctir !1379
  store i64 %187, i64* %arrayidx180, align 8, !dbg !16367
  %190 = load i64, i64* %b, align 8, !dbg !16367
  %191 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m181 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %191, i32 0, i32 0, !dbg !16367, !ctir !16197
  %192 = load i32, i32* %i99, align 4, !dbg !16367
  %add182 = add nsw i32 %192, 1, !dbg !16367
  %idxprom183 = sext i32 %add182 to i64, !dbg !16367
  %arrayidx184 = getelementptr inbounds [256 x i64], [256 x i64]* %m181, i64 0, i64 %idxprom183, !dbg !16367, !ctir !1379
  store i64 %190, i64* %arrayidx184, align 8, !dbg !16367
  %193 = load i64, i64* %c, align 8, !dbg !16367
  %194 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m185 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %194, i32 0, i32 0, !dbg !16367, !ctir !16197
  %195 = load i32, i32* %i99, align 4, !dbg !16367
  %add186 = add nsw i32 %195, 2, !dbg !16367
  %idxprom187 = sext i32 %add186 to i64, !dbg !16367
  %arrayidx188 = getelementptr inbounds [256 x i64], [256 x i64]* %m185, i64 0, i64 %idxprom187, !dbg !16367, !ctir !1379
  store i64 %193, i64* %arrayidx188, align 8, !dbg !16367
  %196 = load i64, i64* %d, align 8, !dbg !16367
  %197 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m189 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %197, i32 0, i32 0, !dbg !16367, !ctir !16197
  %198 = load i32, i32* %i99, align 4, !dbg !16367
  %add190 = add nsw i32 %198, 3, !dbg !16367
  %idxprom191 = sext i32 %add190 to i64, !dbg !16367
  %arrayidx192 = getelementptr inbounds [256 x i64], [256 x i64]* %m189, i64 0, i64 %idxprom191, !dbg !16367, !ctir !1379
  store i64 %196, i64* %arrayidx192, align 8, !dbg !16367
  %199 = load i64, i64* %e, align 8, !dbg !16367
  %200 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m193 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %200, i32 0, i32 0, !dbg !16367, !ctir !16197
  %201 = load i32, i32* %i99, align 4, !dbg !16367
  %add194 = add nsw i32 %201, 4, !dbg !16367
  %idxprom195 = sext i32 %add194 to i64, !dbg !16367
  %arrayidx196 = getelementptr inbounds [256 x i64], [256 x i64]* %m193, i64 0, i64 %idxprom195, !dbg !16367, !ctir !1379
  store i64 %199, i64* %arrayidx196, align 8, !dbg !16367
  %202 = load i64, i64* %f, align 8, !dbg !16367
  %203 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m197 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %203, i32 0, i32 0, !dbg !16367, !ctir !16197
  %204 = load i32, i32* %i99, align 4, !dbg !16367
  %add198 = add nsw i32 %204, 5, !dbg !16367
  %idxprom199 = sext i32 %add198 to i64, !dbg !16367
  %arrayidx200 = getelementptr inbounds [256 x i64], [256 x i64]* %m197, i64 0, i64 %idxprom199, !dbg !16367, !ctir !1379
  store i64 %202, i64* %arrayidx200, align 8, !dbg !16367
  %205 = load i64, i64* %g, align 8, !dbg !16367
  %206 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m201 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %206, i32 0, i32 0, !dbg !16367, !ctir !16197
  %207 = load i32, i32* %i99, align 4, !dbg !16367
  %add202 = add nsw i32 %207, 6, !dbg !16367
  %idxprom203 = sext i32 %add202 to i64, !dbg !16367
  %arrayidx204 = getelementptr inbounds [256 x i64], [256 x i64]* %m201, i64 0, i64 %idxprom203, !dbg !16367, !ctir !1379
  store i64 %205, i64* %arrayidx204, align 8, !dbg !16367
  %208 = load i64, i64* %h, align 8, !dbg !16367
  %209 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16367
  %m205 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %209, i32 0, i32 0, !dbg !16367, !ctir !16197
  %210 = load i32, i32* %i99, align 4, !dbg !16367
  %add206 = add nsw i32 %210, 7, !dbg !16367
  %idxprom207 = sext i32 %add206 to i64, !dbg !16367
  %arrayidx208 = getelementptr inbounds [256 x i64], [256 x i64]* %m205, i64 0, i64 %idxprom207, !dbg !16367, !ctir !1379
  store i64 %208, i64* %arrayidx208, align 8, !dbg !16367
  br label %for.inc209, !dbg !16367

for.inc209:                                       ; preds = %for.body102
  %211 = load i32, i32* %i99, align 4, !dbg !16365
  %add210 = add nsw i32 %211, 8, !dbg !16365
  store i32 %add210, i32* %i99, align 4, !dbg !16365
  br label %for.cond100, !dbg !16365, !llvm.loop !16371

for.end211:                                       ; preds = %for.cond100
  %212 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16372
  %c212 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %212, i32 0, i32 3, !dbg !16373, !ctir !16197
  store i64 0, i64* %c212, align 8, !dbg !16374, !ctir !1380
  %213 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16375
  %b213 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %213, i32 0, i32 2, !dbg !16376, !ctir !16197
  store i64 0, i64* %b213, align 8, !dbg !16377, !ctir !1380
  %214 = load %struct.isaac_state*, %struct.isaac_state** %s.addr, align 8, !dbg !16378
  %a214 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state* %214, i32 0, i32 1, !dbg !16379, !ctir !16197
  store i64 0, i64* %a214, align 8, !dbg !16380, !ctir !1380
  ret void, !dbg !16381
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readtokens0_init(%struct.Tokens* %t) #4 !dbg !16382 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Tokens** %t.addr, metadata !16395, metadata !DIExpression()), !dbg !16396
  %0 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16397
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %0, i32 0, i32 0, !dbg !16398, !ctir !16387
  store i64 0, i64* %n_tok, align 8, !dbg !16399, !ctir !52
  %1 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16400
  %tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %1, i32 0, i32 1, !dbg !16401, !ctir !16387
  store i8** null, i8*** %tok, align 8, !dbg !16402, !ctir !178
  %2 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16403
  %tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %2, i32 0, i32 2, !dbg !16404, !ctir !16387
  store i64* null, i64** %tok_len, align 8, !dbg !16405, !ctir !618
  %3 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16406
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %3, i32 0, i32 3, !dbg !16406, !ctir !16387
  %call = call i32 @_obstack_begin(%struct.obstack* %o_data, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !16406
  %4 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16407
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %4, i32 0, i32 4, !dbg !16407, !ctir !16387
  %call1 = call i32 @_obstack_begin(%struct.obstack* %o_tok, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !16407
  %5 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16408
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %5, i32 0, i32 5, !dbg !16408, !ctir !16387
  %call2 = call i32 @_obstack_begin(%struct.obstack* %o_tok_len, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free), !dbg !16408
  ret void, !dbg !16409
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readtokens0_free(%struct.Tokens* %t) #4 !dbg !16410 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  %__o = alloca %struct.obstack*, align 8, !ctir !1407
  %__obj = alloca i8*, align 8, !ctir !47
  %__o2 = alloca %struct.obstack*, align 8, !ctir !1407
  %__obj3 = alloca i8*, align 8, !ctir !47
  %__o14 = alloca %struct.obstack*, align 8, !ctir !1407
  %__obj15 = alloca i8*, align 8, !ctir !47
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Tokens** %t.addr, metadata !16411, metadata !DIExpression()), !dbg !16412
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !16413, metadata !DIExpression()), !dbg !16415
  %0 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16415
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %0, i32 0, i32 3, !dbg !16415, !ctir !16387
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !dbg !16415
  call void @llvm.dbg.declare(metadata i8** %__obj, metadata !16416, metadata !DIExpression()), !dbg !16415
  store i8* null, i8** %__obj, align 8, !dbg !16415
  %1 = load i8*, i8** %__obj, align 8, !dbg !16417
  %2 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16417
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 1, !dbg !16417, !ctir !1408
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !16417, !ctir !1412
  %4 = bitcast %struct._obstack_chunk* %3 to i8*, !dbg !16417
  %cmp = icmp ugt i8* %1, %4, !dbg !16417
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !16417

land.lhs.true:                                    ; preds = %entry
  %5 = load i8*, i8** %__obj, align 8, !dbg !16417
  %6 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16417
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 4, !dbg !16417, !ctir !1408
  %7 = load i8*, i8** %chunk_limit, align 8, !dbg !16417, !ctir !7
  %cmp1 = icmp ult i8* %5, %7, !dbg !16417
  br i1 %cmp1, label %if.then, label %if.else, !dbg !16415

if.then:                                          ; preds = %land.lhs.true
  %8 = load i8*, i8** %__obj, align 8, !dbg !16417
  %9 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16417
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 2, !dbg !16417, !ctir !1408
  store i8* %8, i8** %object_base, align 8, !dbg !16417, !ctir !7
  %10 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16417
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %10, i32 0, i32 3, !dbg !16417, !ctir !1408
  store i8* %8, i8** %next_free, align 8, !dbg !16417, !ctir !7
  br label %if.end, !dbg !16417

if.else:                                          ; preds = %land.lhs.true, %entry
  %11 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16417
  %12 = load i8*, i8** %__obj, align 8, !dbg !16417
  call void @_obstack_free(%struct.obstack* %11, i8* %12), !dbg !16417
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o2, metadata !16419, metadata !DIExpression()), !dbg !16421
  %13 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16421
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %13, i32 0, i32 4, !dbg !16421, !ctir !16387
  store %struct.obstack* %o_tok, %struct.obstack** %__o2, align 8, !dbg !16421
  call void @llvm.dbg.declare(metadata i8** %__obj3, metadata !16422, metadata !DIExpression()), !dbg !16421
  store i8* null, i8** %__obj3, align 8, !dbg !16421
  %14 = load i8*, i8** %__obj3, align 8, !dbg !16423
  %15 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16423
  %chunk4 = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 1, !dbg !16423, !ctir !1408
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk4, align 8, !dbg !16423, !ctir !1412
  %17 = bitcast %struct._obstack_chunk* %16 to i8*, !dbg !16423
  %cmp5 = icmp ugt i8* %14, %17, !dbg !16423
  br i1 %cmp5, label %land.lhs.true6, label %if.else12, !dbg !16423

land.lhs.true6:                                   ; preds = %if.end
  %18 = load i8*, i8** %__obj3, align 8, !dbg !16423
  %19 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16423
  %chunk_limit7 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 4, !dbg !16423, !ctir !1408
  %20 = load i8*, i8** %chunk_limit7, align 8, !dbg !16423, !ctir !7
  %cmp8 = icmp ult i8* %18, %20, !dbg !16423
  br i1 %cmp8, label %if.then9, label %if.else12, !dbg !16421

if.then9:                                         ; preds = %land.lhs.true6
  %21 = load i8*, i8** %__obj3, align 8, !dbg !16423
  %22 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16423
  %object_base10 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 2, !dbg !16423, !ctir !1408
  store i8* %21, i8** %object_base10, align 8, !dbg !16423, !ctir !7
  %23 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16423
  %next_free11 = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 3, !dbg !16423, !ctir !1408
  store i8* %21, i8** %next_free11, align 8, !dbg !16423, !ctir !7
  br label %if.end13, !dbg !16423

if.else12:                                        ; preds = %land.lhs.true6, %if.end
  %24 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16423
  %25 = load i8*, i8** %__obj3, align 8, !dbg !16423
  call void @_obstack_free(%struct.obstack* %24, i8* %25), !dbg !16423
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %if.then9
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o14, metadata !16425, metadata !DIExpression()), !dbg !16427
  %26 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16427
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %26, i32 0, i32 5, !dbg !16427, !ctir !16387
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o14, align 8, !dbg !16427
  call void @llvm.dbg.declare(metadata i8** %__obj15, metadata !16428, metadata !DIExpression()), !dbg !16427
  store i8* null, i8** %__obj15, align 8, !dbg !16427
  %27 = load i8*, i8** %__obj15, align 8, !dbg !16429
  %28 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16429
  %chunk16 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 1, !dbg !16429, !ctir !1408
  %29 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk16, align 8, !dbg !16429, !ctir !1412
  %30 = bitcast %struct._obstack_chunk* %29 to i8*, !dbg !16429
  %cmp17 = icmp ugt i8* %27, %30, !dbg !16429
  br i1 %cmp17, label %land.lhs.true18, label %if.else24, !dbg !16429

land.lhs.true18:                                  ; preds = %if.end13
  %31 = load i8*, i8** %__obj15, align 8, !dbg !16429
  %32 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16429
  %chunk_limit19 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 4, !dbg !16429, !ctir !1408
  %33 = load i8*, i8** %chunk_limit19, align 8, !dbg !16429, !ctir !7
  %cmp20 = icmp ult i8* %31, %33, !dbg !16429
  br i1 %cmp20, label %if.then21, label %if.else24, !dbg !16427

if.then21:                                        ; preds = %land.lhs.true18
  %34 = load i8*, i8** %__obj15, align 8, !dbg !16429
  %35 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16429
  %object_base22 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 2, !dbg !16429, !ctir !1408
  store i8* %34, i8** %object_base22, align 8, !dbg !16429, !ctir !7
  %36 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16429
  %next_free23 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 3, !dbg !16429, !ctir !1408
  store i8* %34, i8** %next_free23, align 8, !dbg !16429, !ctir !7
  br label %if.end25, !dbg !16429

if.else24:                                        ; preds = %land.lhs.true18, %if.end13
  %37 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16429
  %38 = load i8*, i8** %__obj15, align 8, !dbg !16429
  call void @_obstack_free(%struct.obstack* %37, i8* %38), !dbg !16429
  br label %if.end25

if.end25:                                         ; preds = %if.else24, %if.then21
  ret void, !dbg !16431
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @readtokens0(%struct._IO_FILE* %in, %struct.Tokens* %t) #4 !dbg !16432 {
entry:
  %in.addr = alloca %struct._IO_FILE*, align 8
  %t.addr = alloca %struct.Tokens*, align 8
  %c = alloca i32, align 4, !ctir !5
  %len = alloca i64, align 8, !ctir !52
  %__o = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp = alloca i64, align 8
  %__o2 = alloca %struct.obstack*, align 8, !ctir !1407
  %__o1 = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp4 = alloca i64, align 8
  %__o14 = alloca %struct.obstack*, align 8, !ctir !1407
  %__o116 = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp17 = alloca i64, align 8
  %__o32 = alloca %struct.obstack*, align 8, !ctir !1407
  %__o133 = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp34 = alloca i64, align 8
  %__o144 = alloca %struct.obstack*, align 8, !ctir !1407
  %__p1 = alloca i8*, align 8, !ctir !47
  %__o147 = alloca %struct.obstack*, align 8, !ctir !1407
  %__value = alloca i8*, align 8, !ctir !47
  %tmp78 = alloca i8*, align 8
  %__o179 = alloca %struct.obstack*, align 8, !ctir !1407
  %__value80 = alloca i8*, align 8, !ctir !47
  %tmp119 = alloca i8*, align 8
  store %struct._IO_FILE* %in, %struct._IO_FILE** %in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %in.addr, metadata !16475, metadata !DIExpression()), !dbg !16476
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Tokens** %t.addr, metadata !16477, metadata !DIExpression()), !dbg !16478
  br label %while.body, !dbg !16479

while.body:                                       ; preds = %entry, %if.end31
  call void @llvm.dbg.declare(metadata i32* %c, metadata !16480, metadata !DIExpression()), !dbg !16482
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8, !dbg !16483
  %call = call i32 @fgetc(%struct._IO_FILE* %0), !dbg !16484
  store i32 %call, i32* %c, align 4, !dbg !16482
  %1 = load i32, i32* %c, align 4, !dbg !16485
  %cmp = icmp eq i32 %1, -1, !dbg !16487
  br i1 %cmp, label %if.then, label %if.end13, !dbg !16488

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i64* %len, metadata !16489, metadata !DIExpression()), !dbg !16491
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !16492, metadata !DIExpression()), !dbg !16494
  %2 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16494
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %2, i32 0, i32 3, !dbg !16494, !ctir !16387
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !dbg !16494
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16494
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 3, !dbg !16494, !ctir !1442
  %4 = load i8*, i8** %next_free, align 8, !dbg !16494, !ctir !7
  %5 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16494
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 2, !dbg !16494, !ctir !1442
  %6 = load i8*, i8** %object_base, align 8, !dbg !16494, !ctir !7
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64, !dbg !16494
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !16494
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !16494
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !16494
  %7 = load i64, i64* %tmp, align 8, !dbg !16494
  store i64 %7, i64* %len, align 8, !dbg !16491
  %8 = load i64, i64* %len, align 8, !dbg !16495
  %tobool = icmp ne i64 %8, 0, !dbg !16495
  br i1 %tobool, label %if.then1, label %if.end12, !dbg !16497

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o2, metadata !16498, metadata !DIExpression()), !dbg !16501
  %9 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16501
  %o_data3 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %9, i32 0, i32 3, !dbg !16501, !ctir !16387
  store %struct.obstack* %o_data3, %struct.obstack** %__o2, align 8, !dbg !16501
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o1, metadata !16502, metadata !DIExpression()), !dbg !16505
  %10 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16505
  store %struct.obstack* %10, %struct.obstack** %__o1, align 8, !dbg !16505
  %11 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16505
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 4, !dbg !16505, !ctir !1442
  %12 = load i8*, i8** %chunk_limit, align 8, !dbg !16505, !ctir !7
  %13 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16505
  %next_free5 = getelementptr inbounds %struct.obstack, %struct.obstack* %13, i32 0, i32 3, !dbg !16505, !ctir !1442
  %14 = load i8*, i8** %next_free5, align 8, !dbg !16505, !ctir !7
  %sub.ptr.lhs.cast6 = ptrtoint i8* %12 to i64, !dbg !16505
  %sub.ptr.rhs.cast7 = ptrtoint i8* %14 to i64, !dbg !16505
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7, !dbg !16505
  store i64 %sub.ptr.sub8, i64* %tmp4, align 8, !dbg !16505
  %15 = load i64, i64* %tmp4, align 8, !dbg !16505
  %cmp9 = icmp ult i64 %15, 1, !dbg !16506
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !16501

if.then10:                                        ; preds = %if.then1
  %16 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16506
  call void @_obstack_newchunk(%struct.obstack* %16, i64 1), !dbg !16506
  br label %if.end, !dbg !16506

if.end:                                           ; preds = %if.then10, %if.then1
  %17 = load %struct.obstack*, %struct.obstack** %__o2, align 8, !dbg !16501
  %next_free11 = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 3, !dbg !16501, !ctir !1408
  %18 = load i8*, i8** %next_free11, align 8, !dbg !16501, !ctir !7
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1, !dbg !16501, !ctir !8
  store i8* %incdec.ptr, i8** %next_free11, align 8, !dbg !16501, !ctir !7
  store i8 0, i8* %18, align 1, !dbg !16501, !ctir !8
  %19 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16507
  call void @save_token(%struct.Tokens* %19), !dbg !16508
  br label %if.end12, !dbg !16509

if.end12:                                         ; preds = %if.end, %if.then
  br label %while.end, !dbg !16510

if.end13:                                         ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o14, metadata !16511, metadata !DIExpression()), !dbg !16513
  %20 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16513
  %o_data15 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %20, i32 0, i32 3, !dbg !16513, !ctir !16387
  store %struct.obstack* %o_data15, %struct.obstack** %__o14, align 8, !dbg !16513
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o116, metadata !16514, metadata !DIExpression()), !dbg !16517
  %21 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16517
  store %struct.obstack* %21, %struct.obstack** %__o116, align 8, !dbg !16517
  %22 = load %struct.obstack*, %struct.obstack** %__o116, align 8, !dbg !16517
  %chunk_limit18 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 4, !dbg !16517, !ctir !1442
  %23 = load i8*, i8** %chunk_limit18, align 8, !dbg !16517, !ctir !7
  %24 = load %struct.obstack*, %struct.obstack** %__o116, align 8, !dbg !16517
  %next_free19 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 3, !dbg !16517, !ctir !1442
  %25 = load i8*, i8** %next_free19, align 8, !dbg !16517, !ctir !7
  %sub.ptr.lhs.cast20 = ptrtoint i8* %23 to i64, !dbg !16517
  %sub.ptr.rhs.cast21 = ptrtoint i8* %25 to i64, !dbg !16517
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !16517
  store i64 %sub.ptr.sub22, i64* %tmp17, align 8, !dbg !16517
  %26 = load i64, i64* %tmp17, align 8, !dbg !16517
  %cmp23 = icmp ult i64 %26, 1, !dbg !16518
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !16513

if.then24:                                        ; preds = %if.end13
  %27 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16518
  call void @_obstack_newchunk(%struct.obstack* %27, i64 1), !dbg !16518
  br label %if.end25, !dbg !16518

if.end25:                                         ; preds = %if.then24, %if.end13
  %28 = load i32, i32* %c, align 4, !dbg !16513
  %conv = trunc i32 %28 to i8, !dbg !16513
  %29 = load %struct.obstack*, %struct.obstack** %__o14, align 8, !dbg !16513
  %next_free26 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 3, !dbg !16513, !ctir !1408
  %30 = load i8*, i8** %next_free26, align 8, !dbg !16513, !ctir !7
  %incdec.ptr27 = getelementptr inbounds i8, i8* %30, i32 1, !dbg !16513, !ctir !8
  store i8* %incdec.ptr27, i8** %next_free26, align 8, !dbg !16513, !ctir !7
  store i8 %conv, i8* %30, align 1, !dbg !16513, !ctir !8
  %31 = load i32, i32* %c, align 4, !dbg !16519
  %cmp28 = icmp eq i32 %31, 0, !dbg !16521
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !16522

if.then30:                                        ; preds = %if.end25
  %32 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16523
  call void @save_token(%struct.Tokens* %32), !dbg !16524
  br label %if.end31, !dbg !16524

if.end31:                                         ; preds = %if.then30, %if.end25
  br label %while.body, !dbg !16479, !llvm.loop !16525

while.end:                                        ; preds = %if.end12
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o32, metadata !16527, metadata !DIExpression()), !dbg !16529
  %33 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16529
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %33, i32 0, i32 4, !dbg !16529, !ctir !16387
  store %struct.obstack* %o_tok, %struct.obstack** %__o32, align 8, !dbg !16529
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o133, metadata !16530, metadata !DIExpression()), !dbg !16533
  %34 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !dbg !16533
  store %struct.obstack* %34, %struct.obstack** %__o133, align 8, !dbg !16533
  %35 = load %struct.obstack*, %struct.obstack** %__o133, align 8, !dbg !16533
  %chunk_limit35 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 4, !dbg !16533, !ctir !1442
  %36 = load i8*, i8** %chunk_limit35, align 8, !dbg !16533, !ctir !7
  %37 = load %struct.obstack*, %struct.obstack** %__o133, align 8, !dbg !16533
  %next_free36 = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 3, !dbg !16533, !ctir !1442
  %38 = load i8*, i8** %next_free36, align 8, !dbg !16533, !ctir !7
  %sub.ptr.lhs.cast37 = ptrtoint i8* %36 to i64, !dbg !16533
  %sub.ptr.rhs.cast38 = ptrtoint i8* %38 to i64, !dbg !16533
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38, !dbg !16533
  store i64 %sub.ptr.sub39, i64* %tmp34, align 8, !dbg !16533
  %39 = load i64, i64* %tmp34, align 8, !dbg !16533
  %cmp40 = icmp ult i64 %39, 8, !dbg !16534
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !16529

if.then42:                                        ; preds = %while.end
  %40 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !dbg !16534
  call void @_obstack_newchunk(%struct.obstack* %40, i64 8), !dbg !16534
  br label %if.end43, !dbg !16534

if.end43:                                         ; preds = %if.then42, %while.end
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o144, metadata !16535, metadata !DIExpression()), !dbg !16537
  %41 = load %struct.obstack*, %struct.obstack** %__o32, align 8, !dbg !16537
  store %struct.obstack* %41, %struct.obstack** %__o144, align 8, !dbg !16537
  call void @llvm.dbg.declare(metadata i8** %__p1, metadata !16538, metadata !DIExpression()), !dbg !16537
  %42 = load %struct.obstack*, %struct.obstack** %__o144, align 8, !dbg !16537
  %next_free45 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !16537, !ctir !1408
  %43 = load i8*, i8** %next_free45, align 8, !dbg !16537, !ctir !7
  store i8* %43, i8** %__p1, align 8, !dbg !16537
  %44 = load i8*, i8** %__p1, align 8, !dbg !16537
  %45 = bitcast i8* %44 to i8**, !dbg !16537
  store i8* null, i8** %45, align 8, !dbg !16537, !ctir !85
  %46 = load %struct.obstack*, %struct.obstack** %__o144, align 8, !dbg !16537
  %next_free46 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 3, !dbg !16537, !ctir !1408
  %47 = load i8*, i8** %next_free46, align 8, !dbg !16537, !ctir !7
  %add.ptr = getelementptr inbounds i8, i8* %47, i64 8, !dbg !16537, !ctir !8
  store i8* %add.ptr, i8** %next_free46, align 8, !dbg !16537, !ctir !7
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o147, metadata !16539, metadata !DIExpression()), !dbg !16541
  %48 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16541
  %o_tok48 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %48, i32 0, i32 4, !dbg !16541, !ctir !16387
  store %struct.obstack* %o_tok48, %struct.obstack** %__o147, align 8, !dbg !16541
  call void @llvm.dbg.declare(metadata i8** %__value, metadata !16542, metadata !DIExpression()), !dbg !16541
  %49 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %object_base49 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 2, !dbg !16541, !ctir !1408
  %50 = load i8*, i8** %object_base49, align 8, !dbg !16541, !ctir !7
  store i8* %50, i8** %__value, align 8, !dbg !16541
  %51 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16543
  %next_free50 = getelementptr inbounds %struct.obstack, %struct.obstack* %51, i32 0, i32 3, !dbg !16543, !ctir !1408
  %52 = load i8*, i8** %next_free50, align 8, !dbg !16543, !ctir !7
  %53 = load i8*, i8** %__value, align 8, !dbg !16543
  %cmp51 = icmp eq i8* %52, %53, !dbg !16543
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !16541

if.then53:                                        ; preds = %if.end43
  %54 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16543
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %54, i32 0, i32 10, !dbg !16543, !ctir !1408
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !16543
  %bf.clear = and i8 %bf.load, -3, !dbg !16543
  %bf.set = or i8 %bf.clear, 2, !dbg !16543
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !16543
  br label %if.end54, !dbg !16543

if.end54:                                         ; preds = %if.then53, %if.end43
  %55 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %next_free55 = getelementptr inbounds %struct.obstack, %struct.obstack* %55, i32 0, i32 3, !dbg !16541, !ctir !1408
  %56 = load i8*, i8** %next_free55, align 8, !dbg !16541, !ctir !7
  %sub.ptr.lhs.cast56 = ptrtoint i8* %56 to i64, !dbg !16541
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast56, 0, !dbg !16541
  %57 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %57, i32 0, i32 6, !dbg !16541, !ctir !1408
  %58 = load i64, i64* %alignment_mask, align 8, !dbg !16541, !ctir !52
  %add = add i64 %sub.ptr.sub57, %58, !dbg !16541
  %59 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %alignment_mask58 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 6, !dbg !16541, !ctir !1408
  %60 = load i64, i64* %alignment_mask58, align 8, !dbg !16541, !ctir !52
  %neg = xor i64 %60, -1, !dbg !16541
  %and = and i64 %add, %neg, !dbg !16541
  %add.ptr59 = getelementptr inbounds i8, i8* null, i64 %and, !dbg !16541, !ctir !8
  %61 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %next_free60 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 3, !dbg !16541, !ctir !1408
  store i8* %add.ptr59, i8** %next_free60, align 8, !dbg !16541, !ctir !7
  %62 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %next_free61 = getelementptr inbounds %struct.obstack, %struct.obstack* %62, i32 0, i32 3, !dbg !16545, !ctir !1408
  %63 = load i8*, i8** %next_free61, align 8, !dbg !16545, !ctir !7
  %64 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 1, !dbg !16545, !ctir !1408
  %65 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !16545, !ctir !1412
  %66 = bitcast %struct._obstack_chunk* %65 to i8*, !dbg !16545
  %sub.ptr.lhs.cast62 = ptrtoint i8* %63 to i64, !dbg !16545
  %sub.ptr.rhs.cast63 = ptrtoint i8* %66 to i64, !dbg !16545
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63, !dbg !16545
  %67 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %chunk_limit65 = getelementptr inbounds %struct.obstack, %struct.obstack* %67, i32 0, i32 4, !dbg !16545, !ctir !1408
  %68 = load i8*, i8** %chunk_limit65, align 8, !dbg !16545, !ctir !7
  %69 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %chunk66 = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 1, !dbg !16545, !ctir !1408
  %70 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk66, align 8, !dbg !16545, !ctir !1412
  %71 = bitcast %struct._obstack_chunk* %70 to i8*, !dbg !16545
  %sub.ptr.lhs.cast67 = ptrtoint i8* %68 to i64, !dbg !16545
  %sub.ptr.rhs.cast68 = ptrtoint i8* %71 to i64, !dbg !16545
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68, !dbg !16545
  %cmp70 = icmp ugt i64 %sub.ptr.sub64, %sub.ptr.sub69, !dbg !16545
  br i1 %cmp70, label %if.then72, label %if.end75, !dbg !16541

if.then72:                                        ; preds = %if.end54
  %72 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %chunk_limit73 = getelementptr inbounds %struct.obstack, %struct.obstack* %72, i32 0, i32 4, !dbg !16545, !ctir !1408
  %73 = load i8*, i8** %chunk_limit73, align 8, !dbg !16545, !ctir !7
  %74 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16545
  %next_free74 = getelementptr inbounds %struct.obstack, %struct.obstack* %74, i32 0, i32 3, !dbg !16545, !ctir !1408
  store i8* %73, i8** %next_free74, align 8, !dbg !16545, !ctir !7
  br label %if.end75, !dbg !16545

if.end75:                                         ; preds = %if.then72, %if.end54
  %75 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %next_free76 = getelementptr inbounds %struct.obstack, %struct.obstack* %75, i32 0, i32 3, !dbg !16541, !ctir !1408
  %76 = load i8*, i8** %next_free76, align 8, !dbg !16541, !ctir !7
  %77 = load %struct.obstack*, %struct.obstack** %__o147, align 8, !dbg !16541
  %object_base77 = getelementptr inbounds %struct.obstack, %struct.obstack* %77, i32 0, i32 2, !dbg !16541, !ctir !1408
  store i8* %76, i8** %object_base77, align 8, !dbg !16541, !ctir !7
  %78 = load i8*, i8** %__value, align 8, !dbg !16541
  store i8* %78, i8** %tmp78, align 8, !dbg !16541
  %79 = load i8*, i8** %tmp78, align 8, !dbg !16541
  %80 = bitcast i8* %79 to i8**, !dbg !16547
  %81 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16548
  %tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %81, i32 0, i32 1, !dbg !16549, !ctir !16387
  store i8** %80, i8*** %tok, align 8, !dbg !16550, !ctir !178
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o179, metadata !16551, metadata !DIExpression()), !dbg !16553
  %82 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16553
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %82, i32 0, i32 5, !dbg !16553, !ctir !16387
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o179, align 8, !dbg !16553
  call void @llvm.dbg.declare(metadata i8** %__value80, metadata !16554, metadata !DIExpression()), !dbg !16553
  %83 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %object_base81 = getelementptr inbounds %struct.obstack, %struct.obstack* %83, i32 0, i32 2, !dbg !16553, !ctir !1408
  %84 = load i8*, i8** %object_base81, align 8, !dbg !16553, !ctir !7
  store i8* %84, i8** %__value80, align 8, !dbg !16553
  %85 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16555
  %next_free82 = getelementptr inbounds %struct.obstack, %struct.obstack* %85, i32 0, i32 3, !dbg !16555, !ctir !1408
  %86 = load i8*, i8** %next_free82, align 8, !dbg !16555, !ctir !7
  %87 = load i8*, i8** %__value80, align 8, !dbg !16555
  %cmp83 = icmp eq i8* %86, %87, !dbg !16555
  br i1 %cmp83, label %if.then85, label %if.end90, !dbg !16553

if.then85:                                        ; preds = %if.end75
  %88 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16555
  %maybe_empty_object86 = getelementptr inbounds %struct.obstack, %struct.obstack* %88, i32 0, i32 10, !dbg !16555, !ctir !1408
  %bf.load87 = load i8, i8* %maybe_empty_object86, align 8, !dbg !16555
  %bf.clear88 = and i8 %bf.load87, -3, !dbg !16555
  %bf.set89 = or i8 %bf.clear88, 2, !dbg !16555
  store i8 %bf.set89, i8* %maybe_empty_object86, align 8, !dbg !16555
  br label %if.end90, !dbg !16555

if.end90:                                         ; preds = %if.then85, %if.end75
  %89 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %next_free91 = getelementptr inbounds %struct.obstack, %struct.obstack* %89, i32 0, i32 3, !dbg !16553, !ctir !1408
  %90 = load i8*, i8** %next_free91, align 8, !dbg !16553, !ctir !7
  %sub.ptr.lhs.cast92 = ptrtoint i8* %90 to i64, !dbg !16553
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast92, 0, !dbg !16553
  %91 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %alignment_mask94 = getelementptr inbounds %struct.obstack, %struct.obstack* %91, i32 0, i32 6, !dbg !16553, !ctir !1408
  %92 = load i64, i64* %alignment_mask94, align 8, !dbg !16553, !ctir !52
  %add95 = add i64 %sub.ptr.sub93, %92, !dbg !16553
  %93 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %alignment_mask96 = getelementptr inbounds %struct.obstack, %struct.obstack* %93, i32 0, i32 6, !dbg !16553, !ctir !1408
  %94 = load i64, i64* %alignment_mask96, align 8, !dbg !16553, !ctir !52
  %neg97 = xor i64 %94, -1, !dbg !16553
  %and98 = and i64 %add95, %neg97, !dbg !16553
  %add.ptr99 = getelementptr inbounds i8, i8* null, i64 %and98, !dbg !16553, !ctir !8
  %95 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %next_free100 = getelementptr inbounds %struct.obstack, %struct.obstack* %95, i32 0, i32 3, !dbg !16553, !ctir !1408
  store i8* %add.ptr99, i8** %next_free100, align 8, !dbg !16553, !ctir !7
  %96 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %next_free101 = getelementptr inbounds %struct.obstack, %struct.obstack* %96, i32 0, i32 3, !dbg !16557, !ctir !1408
  %97 = load i8*, i8** %next_free101, align 8, !dbg !16557, !ctir !7
  %98 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %chunk102 = getelementptr inbounds %struct.obstack, %struct.obstack* %98, i32 0, i32 1, !dbg !16557, !ctir !1408
  %99 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk102, align 8, !dbg !16557, !ctir !1412
  %100 = bitcast %struct._obstack_chunk* %99 to i8*, !dbg !16557
  %sub.ptr.lhs.cast103 = ptrtoint i8* %97 to i64, !dbg !16557
  %sub.ptr.rhs.cast104 = ptrtoint i8* %100 to i64, !dbg !16557
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104, !dbg !16557
  %101 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %chunk_limit106 = getelementptr inbounds %struct.obstack, %struct.obstack* %101, i32 0, i32 4, !dbg !16557, !ctir !1408
  %102 = load i8*, i8** %chunk_limit106, align 8, !dbg !16557, !ctir !7
  %103 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %chunk107 = getelementptr inbounds %struct.obstack, %struct.obstack* %103, i32 0, i32 1, !dbg !16557, !ctir !1408
  %104 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk107, align 8, !dbg !16557, !ctir !1412
  %105 = bitcast %struct._obstack_chunk* %104 to i8*, !dbg !16557
  %sub.ptr.lhs.cast108 = ptrtoint i8* %102 to i64, !dbg !16557
  %sub.ptr.rhs.cast109 = ptrtoint i8* %105 to i64, !dbg !16557
  %sub.ptr.sub110 = sub i64 %sub.ptr.lhs.cast108, %sub.ptr.rhs.cast109, !dbg !16557
  %cmp111 = icmp ugt i64 %sub.ptr.sub105, %sub.ptr.sub110, !dbg !16557
  br i1 %cmp111, label %if.then113, label %if.end116, !dbg !16553

if.then113:                                       ; preds = %if.end90
  %106 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %chunk_limit114 = getelementptr inbounds %struct.obstack, %struct.obstack* %106, i32 0, i32 4, !dbg !16557, !ctir !1408
  %107 = load i8*, i8** %chunk_limit114, align 8, !dbg !16557, !ctir !7
  %108 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16557
  %next_free115 = getelementptr inbounds %struct.obstack, %struct.obstack* %108, i32 0, i32 3, !dbg !16557, !ctir !1408
  store i8* %107, i8** %next_free115, align 8, !dbg !16557, !ctir !7
  br label %if.end116, !dbg !16557

if.end116:                                        ; preds = %if.then113, %if.end90
  %109 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %next_free117 = getelementptr inbounds %struct.obstack, %struct.obstack* %109, i32 0, i32 3, !dbg !16553, !ctir !1408
  %110 = load i8*, i8** %next_free117, align 8, !dbg !16553, !ctir !7
  %111 = load %struct.obstack*, %struct.obstack** %__o179, align 8, !dbg !16553
  %object_base118 = getelementptr inbounds %struct.obstack, %struct.obstack* %111, i32 0, i32 2, !dbg !16553, !ctir !1408
  store i8* %110, i8** %object_base118, align 8, !dbg !16553, !ctir !7
  %112 = load i8*, i8** %__value80, align 8, !dbg !16553
  store i8* %112, i8** %tmp119, align 8, !dbg !16553
  %113 = load i8*, i8** %tmp119, align 8, !dbg !16553
  %114 = bitcast i8* %113 to i64*, !dbg !16559
  %115 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16560
  %tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %115, i32 0, i32 2, !dbg !16561, !ctir !16387
  store i64* %114, i64** %tok_len, align 8, !dbg !16562, !ctir !618
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** %in.addr, align 8, !dbg !16563
  %call120 = call i32 @ferror(%struct._IO_FILE* %116) #12, !dbg !16564
  %tobool121 = icmp ne i32 %call120, 0, !dbg !16565
  %lnot = xor i1 %tobool121, true, !dbg !16565
  ret i1 %lnot, !dbg !16566
}

declare dso_local i32 @fgetc(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @save_token(%struct.Tokens* %t) #4 !dbg !16567 {
entry:
  %t.addr = alloca %struct.Tokens*, align 8
  %len = alloca i64, align 8, !ctir !52
  %__o = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp = alloca i64, align 8
  %s = alloca i8*, align 8, !ctir !90
  %__o1 = alloca %struct.obstack*, align 8, !ctir !1407
  %__value = alloca i8*, align 8, !ctir !47
  %tmp24 = alloca i8*, align 8
  %__o25 = alloca %struct.obstack*, align 8, !ctir !1407
  %__o126 = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp27 = alloca i64, align 8
  %__o136 = alloca %struct.obstack*, align 8, !ctir !1407
  %__p1 = alloca i8*, align 8, !ctir !47
  %__o40 = alloca %struct.obstack*, align 8, !ctir !1407
  %__len = alloca i64, align 8, !ctir !52
  %__o141 = alloca %struct.obstack*, align 8, !ctir !1441
  %tmp42 = alloca i64, align 8
  store %struct.Tokens* %t, %struct.Tokens** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Tokens** %t.addr, metadata !16568, metadata !DIExpression()), !dbg !16569
  call void @llvm.dbg.declare(metadata i64* %len, metadata !16570, metadata !DIExpression()), !dbg !16571
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o, metadata !16572, metadata !DIExpression()), !dbg !16574
  %0 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16574
  %o_data = getelementptr inbounds %struct.Tokens, %struct.Tokens* %0, i32 0, i32 3, !dbg !16574, !ctir !16387
  store %struct.obstack* %o_data, %struct.obstack** %__o, align 8, !dbg !16574
  %1 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16574
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 3, !dbg !16574, !ctir !1442
  %2 = load i8*, i8** %next_free, align 8, !dbg !16574, !ctir !7
  %3 = load %struct.obstack*, %struct.obstack** %__o, align 8, !dbg !16574
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 2, !dbg !16574, !ctir !1442
  %4 = load i8*, i8** %object_base, align 8, !dbg !16574, !ctir !7
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !16574
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !16574
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !16574
  store i64 %sub.ptr.sub, i64* %tmp, align 8, !dbg !16574
  %5 = load i64, i64* %tmp, align 8, !dbg !16574
  %sub = sub i64 %5, 1, !dbg !16575
  store i64 %sub, i64* %len, align 8, !dbg !16571
  call void @llvm.dbg.declare(metadata i8** %s, metadata !16576, metadata !DIExpression()), !dbg !16577
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o1, metadata !16578, metadata !DIExpression()), !dbg !16580
  %6 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16580
  %o_data1 = getelementptr inbounds %struct.Tokens, %struct.Tokens* %6, i32 0, i32 3, !dbg !16580, !ctir !16387
  store %struct.obstack* %o_data1, %struct.obstack** %__o1, align 8, !dbg !16580
  call void @llvm.dbg.declare(metadata i8** %__value, metadata !16581, metadata !DIExpression()), !dbg !16580
  %7 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %object_base2 = getelementptr inbounds %struct.obstack, %struct.obstack* %7, i32 0, i32 2, !dbg !16580, !ctir !1408
  %8 = load i8*, i8** %object_base2, align 8, !dbg !16580, !ctir !7
  store i8* %8, i8** %__value, align 8, !dbg !16580
  %9 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16582
  %next_free3 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3, !dbg !16582, !ctir !1408
  %10 = load i8*, i8** %next_free3, align 8, !dbg !16582, !ctir !7
  %11 = load i8*, i8** %__value, align 8, !dbg !16582
  %cmp = icmp eq i8* %10, %11, !dbg !16582
  br i1 %cmp, label %if.then, label %if.end, !dbg !16580

if.then:                                          ; preds = %entry
  %12 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16582
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 10, !dbg !16582, !ctir !1408
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !16582
  %bf.clear = and i8 %bf.load, -3, !dbg !16582
  %bf.set = or i8 %bf.clear, 2, !dbg !16582
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !16582
  br label %if.end, !dbg !16582

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %next_free4 = getelementptr inbounds %struct.obstack, %struct.obstack* %13, i32 0, i32 3, !dbg !16580, !ctir !1408
  %14 = load i8*, i8** %next_free4, align 8, !dbg !16580, !ctir !7
  %sub.ptr.lhs.cast5 = ptrtoint i8* %14 to i64, !dbg !16580
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast5, 0, !dbg !16580
  %15 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 6, !dbg !16580, !ctir !1408
  %16 = load i64, i64* %alignment_mask, align 8, !dbg !16580, !ctir !52
  %add = add i64 %sub.ptr.sub6, %16, !dbg !16580
  %17 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %alignment_mask7 = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 6, !dbg !16580, !ctir !1408
  %18 = load i64, i64* %alignment_mask7, align 8, !dbg !16580, !ctir !52
  %neg = xor i64 %18, -1, !dbg !16580
  %and = and i64 %add, %neg, !dbg !16580
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and, !dbg !16580, !ctir !8
  %19 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %next_free8 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 3, !dbg !16580, !ctir !1408
  store i8* %add.ptr, i8** %next_free8, align 8, !dbg !16580, !ctir !7
  %20 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %next_free9 = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 3, !dbg !16584, !ctir !1408
  %21 = load i8*, i8** %next_free9, align 8, !dbg !16584, !ctir !7
  %22 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 1, !dbg !16584, !ctir !1408
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !16584, !ctir !1412
  %24 = bitcast %struct._obstack_chunk* %23 to i8*, !dbg !16584
  %sub.ptr.lhs.cast10 = ptrtoint i8* %21 to i64, !dbg !16584
  %sub.ptr.rhs.cast11 = ptrtoint i8* %24 to i64, !dbg !16584
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11, !dbg !16584
  %25 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 4, !dbg !16584, !ctir !1408
  %26 = load i8*, i8** %chunk_limit, align 8, !dbg !16584, !ctir !7
  %27 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %chunk13 = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 1, !dbg !16584, !ctir !1408
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk13, align 8, !dbg !16584, !ctir !1412
  %29 = bitcast %struct._obstack_chunk* %28 to i8*, !dbg !16584
  %sub.ptr.lhs.cast14 = ptrtoint i8* %26 to i64, !dbg !16584
  %sub.ptr.rhs.cast15 = ptrtoint i8* %29 to i64, !dbg !16584
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast14, %sub.ptr.rhs.cast15, !dbg !16584
  %cmp17 = icmp ugt i64 %sub.ptr.sub12, %sub.ptr.sub16, !dbg !16584
  br i1 %cmp17, label %if.then18, label %if.end21, !dbg !16580

if.then18:                                        ; preds = %if.end
  %30 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %chunk_limit19 = getelementptr inbounds %struct.obstack, %struct.obstack* %30, i32 0, i32 4, !dbg !16584, !ctir !1408
  %31 = load i8*, i8** %chunk_limit19, align 8, !dbg !16584, !ctir !7
  %32 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16584
  %next_free20 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 3, !dbg !16584, !ctir !1408
  store i8* %31, i8** %next_free20, align 8, !dbg !16584, !ctir !7
  br label %if.end21, !dbg !16584

if.end21:                                         ; preds = %if.then18, %if.end
  %33 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %next_free22 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 3, !dbg !16580, !ctir !1408
  %34 = load i8*, i8** %next_free22, align 8, !dbg !16580, !ctir !7
  %35 = load %struct.obstack*, %struct.obstack** %__o1, align 8, !dbg !16580
  %object_base23 = getelementptr inbounds %struct.obstack, %struct.obstack* %35, i32 0, i32 2, !dbg !16580, !ctir !1408
  store i8* %34, i8** %object_base23, align 8, !dbg !16580, !ctir !7
  %36 = load i8*, i8** %__value, align 8, !dbg !16580
  store i8* %36, i8** %tmp24, align 8, !dbg !16580
  %37 = load i8*, i8** %tmp24, align 8, !dbg !16580
  store i8* %37, i8** %s, align 8, !dbg !16577
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o25, metadata !16586, metadata !DIExpression()), !dbg !16588
  %38 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16588
  %o_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %38, i32 0, i32 4, !dbg !16588, !ctir !16387
  store %struct.obstack* %o_tok, %struct.obstack** %__o25, align 8, !dbg !16588
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o126, metadata !16589, metadata !DIExpression()), !dbg !16592
  %39 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !dbg !16592
  store %struct.obstack* %39, %struct.obstack** %__o126, align 8, !dbg !16592
  %40 = load %struct.obstack*, %struct.obstack** %__o126, align 8, !dbg !16592
  %chunk_limit28 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 4, !dbg !16592, !ctir !1442
  %41 = load i8*, i8** %chunk_limit28, align 8, !dbg !16592, !ctir !7
  %42 = load %struct.obstack*, %struct.obstack** %__o126, align 8, !dbg !16592
  %next_free29 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 3, !dbg !16592, !ctir !1442
  %43 = load i8*, i8** %next_free29, align 8, !dbg !16592, !ctir !7
  %sub.ptr.lhs.cast30 = ptrtoint i8* %41 to i64, !dbg !16592
  %sub.ptr.rhs.cast31 = ptrtoint i8* %43 to i64, !dbg !16592
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31, !dbg !16592
  store i64 %sub.ptr.sub32, i64* %tmp27, align 8, !dbg !16592
  %44 = load i64, i64* %tmp27, align 8, !dbg !16592
  %cmp33 = icmp ult i64 %44, 8, !dbg !16593
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !16588

if.then34:                                        ; preds = %if.end21
  %45 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !dbg !16593
  call void @_obstack_newchunk(%struct.obstack* %45, i64 8), !dbg !16593
  br label %if.end35, !dbg !16593

if.end35:                                         ; preds = %if.then34, %if.end21
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o136, metadata !16594, metadata !DIExpression()), !dbg !16596
  %46 = load %struct.obstack*, %struct.obstack** %__o25, align 8, !dbg !16596
  store %struct.obstack* %46, %struct.obstack** %__o136, align 8, !dbg !16596
  call void @llvm.dbg.declare(metadata i8** %__p1, metadata !16597, metadata !DIExpression()), !dbg !16596
  %47 = load %struct.obstack*, %struct.obstack** %__o136, align 8, !dbg !16596
  %next_free37 = getelementptr inbounds %struct.obstack, %struct.obstack* %47, i32 0, i32 3, !dbg !16596, !ctir !1408
  %48 = load i8*, i8** %next_free37, align 8, !dbg !16596, !ctir !7
  store i8* %48, i8** %__p1, align 8, !dbg !16596
  %49 = load i8*, i8** %s, align 8, !dbg !16596
  %50 = load i8*, i8** %__p1, align 8, !dbg !16596
  %51 = bitcast i8* %50 to i8**, !dbg !16596
  store i8* %49, i8** %51, align 8, !dbg !16596, !ctir !85
  %52 = load %struct.obstack*, %struct.obstack** %__o136, align 8, !dbg !16596
  %next_free38 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 3, !dbg !16596, !ctir !1408
  %53 = load i8*, i8** %next_free38, align 8, !dbg !16596, !ctir !7
  %add.ptr39 = getelementptr inbounds i8, i8* %53, i64 8, !dbg !16596, !ctir !8
  store i8* %add.ptr39, i8** %next_free38, align 8, !dbg !16596, !ctir !7
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o40, metadata !16598, metadata !DIExpression()), !dbg !16600
  %54 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16600
  %o_tok_len = getelementptr inbounds %struct.Tokens, %struct.Tokens* %54, i32 0, i32 5, !dbg !16600, !ctir !16387
  store %struct.obstack* %o_tok_len, %struct.obstack** %__o40, align 8, !dbg !16600
  call void @llvm.dbg.declare(metadata i64* %__len, metadata !16601, metadata !DIExpression()), !dbg !16600
  store i64 8, i64* %__len, align 8, !dbg !16600
  call void @llvm.dbg.declare(metadata %struct.obstack** %__o141, metadata !16602, metadata !DIExpression()), !dbg !16605
  %55 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !dbg !16605
  store %struct.obstack* %55, %struct.obstack** %__o141, align 8, !dbg !16605
  %56 = load %struct.obstack*, %struct.obstack** %__o141, align 8, !dbg !16605
  %chunk_limit43 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 4, !dbg !16605, !ctir !1442
  %57 = load i8*, i8** %chunk_limit43, align 8, !dbg !16605, !ctir !7
  %58 = load %struct.obstack*, %struct.obstack** %__o141, align 8, !dbg !16605
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %58, i32 0, i32 3, !dbg !16605, !ctir !1442
  %59 = load i8*, i8** %next_free44, align 8, !dbg !16605, !ctir !7
  %sub.ptr.lhs.cast45 = ptrtoint i8* %57 to i64, !dbg !16605
  %sub.ptr.rhs.cast46 = ptrtoint i8* %59 to i64, !dbg !16605
  %sub.ptr.sub47 = sub i64 %sub.ptr.lhs.cast45, %sub.ptr.rhs.cast46, !dbg !16605
  store i64 %sub.ptr.sub47, i64* %tmp42, align 8, !dbg !16605
  %60 = load i64, i64* %tmp42, align 8, !dbg !16605
  %61 = load i64, i64* %__len, align 8, !dbg !16606
  %cmp48 = icmp ult i64 %60, %61, !dbg !16606
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !16600

if.then49:                                        ; preds = %if.end35
  %62 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !dbg !16606
  %63 = load i64, i64* %__len, align 8, !dbg !16606
  call void @_obstack_newchunk(%struct.obstack* %62, i64 %63), !dbg !16606
  br label %if.end50, !dbg !16606

if.end50:                                         ; preds = %if.then49, %if.end35
  %64 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !dbg !16600
  %next_free51 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 3, !dbg !16600, !ctir !1408
  %65 = load i8*, i8** %next_free51, align 8, !dbg !16600, !ctir !7
  %66 = bitcast i64* %len to i8*, !dbg !16600
  %67 = load i64, i64* %__len, align 8, !dbg !16600
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 8 %66, i64 %67, i1 false), !dbg !16600
  %68 = load i64, i64* %__len, align 8, !dbg !16600
  %69 = load %struct.obstack*, %struct.obstack** %__o40, align 8, !dbg !16600
  %next_free52 = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 3, !dbg !16600, !ctir !1408
  %70 = load i8*, i8** %next_free52, align 8, !dbg !16600, !ctir !7
  %add.ptr53 = getelementptr inbounds i8, i8* %70, i64 %68, !dbg !16600, !ctir !8
  store i8* %add.ptr53, i8** %next_free52, align 8, !dbg !16600, !ctir !7
  %71 = load %struct.Tokens*, %struct.Tokens** %t.addr, align 8, !dbg !16607
  %n_tok = getelementptr inbounds %struct.Tokens, %struct.Tokens* %71, i32 0, i32 0, !dbg !16608, !ctir !16387
  %72 = load i64, i64* %n_tok, align 8, !dbg !16609, !ctir !52
  %inc = add i64 %72, 1, !dbg !16609
  store i64 %inc, i64* %n_tok, align 8, !dbg !16609, !ctir !52
  ret void, !dbg !16610
}

; Function Attrs: nounwind
declare dso_local i32 @ferror(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mkstemp_safer(i8* %templ) #4 !dbg !16611 {
entry:
  %templ.addr = alloca i8*, align 8
  store i8* %templ, i8** %templ.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %templ.addr, metadata !16615, metadata !DIExpression()), !dbg !16616
  %0 = load i8*, i8** %templ.addr, align 8, !dbg !16617
  %call = call i32 @mkstemp(i8* %0), !dbg !16618
  %call1 = call i32 @fd_safer(i32 %call), !dbg !16619
  ret i32 %call1, !dbg !16620
}

declare dso_local i32 @mkstemp(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @mkostemp_safer(i8* %templ, i32 %flags) #4 !dbg !16621 {
entry:
  %templ.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %templ, i8** %templ.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %templ.addr, metadata !16624, metadata !DIExpression()), !dbg !16625
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !16626, metadata !DIExpression()), !dbg !16627
  %0 = load i8*, i8** %templ.addr, align 8, !dbg !16628
  %1 = load i32, i32* %flags.addr, align 4, !dbg !16629
  %call = call i32 @mkostemp(i8* %0, i32 %1), !dbg !16630
  %2 = load i32, i32* %flags.addr, align 4, !dbg !16631
  %call1 = call i32 @fd_safer_flag(i32 %call, i32 %2), !dbg !16632
  ret i32 %call1, !dbg !16633
}

declare dso_local i32 @mkostemp(i8*, i32) #3

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @strnumcmp(i8* %a, i8* %b, i32 %decimal_point, i32 %thousands_sep) #9 !dbg !16634 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i32, align 4
  %thousands_sep.addr = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !16638, metadata !DIExpression()), !dbg !16639
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !16640, metadata !DIExpression()), !dbg !16641
  store i32 %decimal_point, i32* %decimal_point.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %decimal_point.addr, metadata !16642, metadata !DIExpression()), !dbg !16643
  store i32 %thousands_sep, i32* %thousands_sep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thousands_sep.addr, metadata !16644, metadata !DIExpression()), !dbg !16645
  %0 = load i8*, i8** %a.addr, align 8, !dbg !16646
  %1 = load i8*, i8** %b.addr, align 8, !dbg !16647
  %2 = load i32, i32* %decimal_point.addr, align 4, !dbg !16648
  %3 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16649
  %call = call i32 @numcompare.302(i8* %0, i8* %1, i32 %2, i32 %3) #14, !dbg !16650
  ret i32 %call, !dbg !16651
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @numcompare.302(i8* %a, i8* %b, i32 %decimal_point, i32 %thousands_sep) #9 !dbg !16652 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i32, align 4
  %thousands_sep.addr = alloca i32, align 4
  %tmpa = alloca i8, align 1, !ctir !535
  %tmpb = alloca i8, align 1, !ctir !535
  %tmp = alloca i32, align 4, !ctir !5
  %log_a = alloca i64, align 8, !ctir !52
  %log_b = alloca i64, align 8, !ctir !52
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !16654, metadata !DIExpression()), !dbg !16655
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !16656, metadata !DIExpression()), !dbg !16657
  store i32 %decimal_point, i32* %decimal_point.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %decimal_point.addr, metadata !16658, metadata !DIExpression()), !dbg !16659
  store i32 %thousands_sep, i32* %thousands_sep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thousands_sep.addr, metadata !16660, metadata !DIExpression()), !dbg !16661
  call void @llvm.dbg.declare(metadata i8* %tmpa, metadata !16662, metadata !DIExpression()), !dbg !16663
  %0 = load i8*, i8** %a.addr, align 8, !dbg !16664
  %1 = load i8, i8* %0, align 1, !dbg !16665, !ctir !91
  store i8 %1, i8* %tmpa, align 1, !dbg !16663
  call void @llvm.dbg.declare(metadata i8* %tmpb, metadata !16666, metadata !DIExpression()), !dbg !16667
  %2 = load i8*, i8** %b.addr, align 8, !dbg !16668
  %3 = load i8, i8* %2, align 1, !dbg !16669, !ctir !91
  store i8 %3, i8* %tmpb, align 1, !dbg !16667
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !16670, metadata !DIExpression()), !dbg !16671
  call void @llvm.dbg.declare(metadata i64* %log_a, metadata !16672, metadata !DIExpression()), !dbg !16673
  call void @llvm.dbg.declare(metadata i64* %log_b, metadata !16674, metadata !DIExpression()), !dbg !16675
  %4 = load i8, i8* %tmpa, align 1, !dbg !16676
  %conv = zext i8 %4 to i32, !dbg !16676
  %cmp = icmp eq i32 %conv, 45, !dbg !16678
  br i1 %cmp, label %if.then, label %if.else, !dbg !16679

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !16680

do.body:                                          ; preds = %lor.end, %if.then
  %5 = load i8*, i8** %a.addr, align 8, !dbg !16682
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !16682, !ctir !91
  store i8* %incdec.ptr, i8** %a.addr, align 8, !dbg !16682
  %6 = load i8, i8* %incdec.ptr, align 1, !dbg !16683, !ctir !91
  store i8 %6, i8* %tmpa, align 1, !dbg !16684
  br label %do.cond, !dbg !16685

do.cond:                                          ; preds = %do.body
  %7 = load i8, i8* %tmpa, align 1, !dbg !16686
  %conv2 = zext i8 %7 to i32, !dbg !16686
  %cmp3 = icmp eq i32 %conv2, 48, !dbg !16687
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !16688

lor.rhs:                                          ; preds = %do.cond
  %8 = load i8, i8* %tmpa, align 1, !dbg !16689
  %conv5 = zext i8 %8 to i32, !dbg !16689
  %9 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16690
  %cmp6 = icmp eq i32 %conv5, %9, !dbg !16691
  br label %lor.end, !dbg !16688

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %10 = phi i1 [ true, %do.cond ], [ %cmp6, %lor.rhs ]
  br i1 %10, label %do.body, label %do.end, !dbg !16685, !llvm.loop !16692

do.end:                                           ; preds = %lor.end
  %11 = load i8, i8* %tmpb, align 1, !dbg !16694
  %conv8 = zext i8 %11 to i32, !dbg !16694
  %cmp9 = icmp ne i32 %conv8, 45, !dbg !16696
  br i1 %cmp9, label %if.then11, label %if.end54, !dbg !16697

if.then11:                                        ; preds = %do.end
  %12 = load i8, i8* %tmpa, align 1, !dbg !16698
  %conv12 = zext i8 %12 to i32, !dbg !16698
  %13 = load i32, i32* %decimal_point.addr, align 4, !dbg !16701
  %cmp13 = icmp eq i32 %conv12, %13, !dbg !16702
  br i1 %cmp13, label %if.then15, label %if.end, !dbg !16703

if.then15:                                        ; preds = %if.then11
  br label %do.body16, !dbg !16704

do.body16:                                        ; preds = %do.cond18, %if.then15
  %14 = load i8*, i8** %a.addr, align 8, !dbg !16705
  %incdec.ptr17 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !16705, !ctir !91
  store i8* %incdec.ptr17, i8** %a.addr, align 8, !dbg !16705
  %15 = load i8, i8* %incdec.ptr17, align 1, !dbg !16706, !ctir !91
  store i8 %15, i8* %tmpa, align 1, !dbg !16707
  br label %do.cond18, !dbg !16708

do.cond18:                                        ; preds = %do.body16
  %16 = load i8, i8* %tmpa, align 1, !dbg !16709
  %conv19 = zext i8 %16 to i32, !dbg !16709
  %cmp20 = icmp eq i32 %conv19, 48, !dbg !16710
  br i1 %cmp20, label %do.body16, label %do.end22, !dbg !16708, !llvm.loop !16711

do.end22:                                         ; preds = %do.cond18
  br label %if.end, !dbg !16708

if.end:                                           ; preds = %do.end22, %if.then11
  %17 = load i8, i8* %tmpa, align 1, !dbg !16713
  %conv23 = zext i8 %17 to i32, !dbg !16713
  %sub = sub i32 %conv23, 48, !dbg !16713
  %cmp24 = icmp ule i32 %sub, 9, !dbg !16713
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !16715

if.then26:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !16716
  br label %return, !dbg !16716

if.end27:                                         ; preds = %if.end
  br label %while.cond, !dbg !16717

while.cond:                                       ; preds = %while.body, %if.end27
  %18 = load i8, i8* %tmpb, align 1, !dbg !16718
  %conv28 = zext i8 %18 to i32, !dbg !16718
  %cmp29 = icmp eq i32 %conv28, 48, !dbg !16719
  br i1 %cmp29, label %lor.end35, label %lor.rhs31, !dbg !16720

lor.rhs31:                                        ; preds = %while.cond
  %19 = load i8, i8* %tmpb, align 1, !dbg !16721
  %conv32 = zext i8 %19 to i32, !dbg !16721
  %20 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16722
  %cmp33 = icmp eq i32 %conv32, %20, !dbg !16723
  br label %lor.end35, !dbg !16720

lor.end35:                                        ; preds = %lor.rhs31, %while.cond
  %21 = phi i1 [ true, %while.cond ], [ %cmp33, %lor.rhs31 ]
  br i1 %21, label %while.body, label %while.end, !dbg !16717

while.body:                                       ; preds = %lor.end35
  %22 = load i8*, i8** %b.addr, align 8, !dbg !16724
  %incdec.ptr36 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !16724, !ctir !91
  store i8* %incdec.ptr36, i8** %b.addr, align 8, !dbg !16724
  %23 = load i8, i8* %incdec.ptr36, align 1, !dbg !16725, !ctir !91
  store i8 %23, i8* %tmpb, align 1, !dbg !16726
  br label %while.cond, !dbg !16717, !llvm.loop !16727

while.end:                                        ; preds = %lor.end35
  %24 = load i8, i8* %tmpb, align 1, !dbg !16729
  %conv37 = zext i8 %24 to i32, !dbg !16729
  %25 = load i32, i32* %decimal_point.addr, align 4, !dbg !16731
  %cmp38 = icmp eq i32 %conv37, %25, !dbg !16732
  br i1 %cmp38, label %if.then40, label %if.end48, !dbg !16733

if.then40:                                        ; preds = %while.end
  br label %do.body41, !dbg !16734

do.body41:                                        ; preds = %do.cond43, %if.then40
  %26 = load i8*, i8** %b.addr, align 8, !dbg !16735
  %incdec.ptr42 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !16735, !ctir !91
  store i8* %incdec.ptr42, i8** %b.addr, align 8, !dbg !16735
  %27 = load i8, i8* %incdec.ptr42, align 1, !dbg !16736, !ctir !91
  store i8 %27, i8* %tmpb, align 1, !dbg !16737
  br label %do.cond43, !dbg !16738

do.cond43:                                        ; preds = %do.body41
  %28 = load i8, i8* %tmpb, align 1, !dbg !16739
  %conv44 = zext i8 %28 to i32, !dbg !16739
  %cmp45 = icmp eq i32 %conv44, 48, !dbg !16740
  br i1 %cmp45, label %do.body41, label %do.end47, !dbg !16738, !llvm.loop !16741

do.end47:                                         ; preds = %do.cond43
  br label %if.end48, !dbg !16738

if.end48:                                         ; preds = %do.end47, %while.end
  %29 = load i8, i8* %tmpb, align 1, !dbg !16743
  %conv49 = zext i8 %29 to i32, !dbg !16743
  %sub50 = sub i32 %conv49, 48, !dbg !16743
  %cmp51 = icmp ule i32 %sub50, 9, !dbg !16743
  %conv52 = zext i1 %cmp51 to i32, !dbg !16743
  %sub53 = sub nsw i32 0, %conv52, !dbg !16744
  store i32 %sub53, i32* %retval, align 4, !dbg !16745
  br label %return, !dbg !16745

if.end54:                                         ; preds = %do.end
  br label %do.body55, !dbg !16746

do.body55:                                        ; preds = %lor.end65, %if.end54
  %30 = load i8*, i8** %b.addr, align 8, !dbg !16747
  %incdec.ptr56 = getelementptr inbounds i8, i8* %30, i32 1, !dbg !16747, !ctir !91
  store i8* %incdec.ptr56, i8** %b.addr, align 8, !dbg !16747
  %31 = load i8, i8* %incdec.ptr56, align 1, !dbg !16748, !ctir !91
  store i8 %31, i8* %tmpb, align 1, !dbg !16749
  br label %do.cond57, !dbg !16750

do.cond57:                                        ; preds = %do.body55
  %32 = load i8, i8* %tmpb, align 1, !dbg !16751
  %conv58 = zext i8 %32 to i32, !dbg !16751
  %cmp59 = icmp eq i32 %conv58, 48, !dbg !16752
  br i1 %cmp59, label %lor.end65, label %lor.rhs61, !dbg !16753

lor.rhs61:                                        ; preds = %do.cond57
  %33 = load i8, i8* %tmpb, align 1, !dbg !16754
  %conv62 = zext i8 %33 to i32, !dbg !16754
  %34 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16755
  %cmp63 = icmp eq i32 %conv62, %34, !dbg !16756
  br label %lor.end65, !dbg !16753

lor.end65:                                        ; preds = %lor.rhs61, %do.cond57
  %35 = phi i1 [ true, %do.cond57 ], [ %cmp63, %lor.rhs61 ]
  br i1 %35, label %do.body55, label %do.end66, !dbg !16750, !llvm.loop !16757

do.end66:                                         ; preds = %lor.end65
  br label %while.cond67, !dbg !16759

while.cond67:                                     ; preds = %do.end90, %do.end66
  %36 = load i8, i8* %tmpa, align 1, !dbg !16760
  %conv68 = zext i8 %36 to i32, !dbg !16760
  %37 = load i8, i8* %tmpb, align 1, !dbg !16761
  %conv69 = zext i8 %37 to i32, !dbg !16761
  %cmp70 = icmp eq i32 %conv68, %conv69, !dbg !16762
  br i1 %cmp70, label %land.rhs, label %land.end, !dbg !16763

land.rhs:                                         ; preds = %while.cond67
  %38 = load i8, i8* %tmpa, align 1, !dbg !16764
  %conv72 = zext i8 %38 to i32, !dbg !16764
  %sub73 = sub i32 %conv72, 48, !dbg !16764
  %cmp74 = icmp ule i32 %sub73, 9, !dbg !16764
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond67
  %39 = phi i1 [ false, %while.cond67 ], [ %cmp74, %land.rhs ], !dbg !16765
  br i1 %39, label %while.body76, label %while.end91, !dbg !16759

while.body76:                                     ; preds = %land.end
  br label %do.body77, !dbg !16766

do.body77:                                        ; preds = %do.cond79, %while.body76
  %40 = load i8*, i8** %a.addr, align 8, !dbg !16768
  %incdec.ptr78 = getelementptr inbounds i8, i8* %40, i32 1, !dbg !16768, !ctir !91
  store i8* %incdec.ptr78, i8** %a.addr, align 8, !dbg !16768
  %41 = load i8, i8* %incdec.ptr78, align 1, !dbg !16769, !ctir !91
  store i8 %41, i8* %tmpa, align 1, !dbg !16770
  br label %do.cond79, !dbg !16771

do.cond79:                                        ; preds = %do.body77
  %42 = load i8, i8* %tmpa, align 1, !dbg !16772
  %conv80 = zext i8 %42 to i32, !dbg !16772
  %43 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16773
  %cmp81 = icmp eq i32 %conv80, %43, !dbg !16774
  br i1 %cmp81, label %do.body77, label %do.end83, !dbg !16771, !llvm.loop !16775

do.end83:                                         ; preds = %do.cond79
  br label %do.body84, !dbg !16777

do.body84:                                        ; preds = %do.cond86, %do.end83
  %44 = load i8*, i8** %b.addr, align 8, !dbg !16778
  %incdec.ptr85 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !16778, !ctir !91
  store i8* %incdec.ptr85, i8** %b.addr, align 8, !dbg !16778
  %45 = load i8, i8* %incdec.ptr85, align 1, !dbg !16779, !ctir !91
  store i8 %45, i8* %tmpb, align 1, !dbg !16780
  br label %do.cond86, !dbg !16781

do.cond86:                                        ; preds = %do.body84
  %46 = load i8, i8* %tmpb, align 1, !dbg !16782
  %conv87 = zext i8 %46 to i32, !dbg !16782
  %47 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16783
  %cmp88 = icmp eq i32 %conv87, %47, !dbg !16784
  br i1 %cmp88, label %do.body84, label %do.end90, !dbg !16781, !llvm.loop !16785

do.end90:                                         ; preds = %do.cond86
  br label %while.cond67, !dbg !16759, !llvm.loop !16787

while.end91:                                      ; preds = %land.end
  %48 = load i8, i8* %tmpa, align 1, !dbg !16789
  %conv92 = zext i8 %48 to i32, !dbg !16789
  %49 = load i32, i32* %decimal_point.addr, align 4, !dbg !16791
  %cmp93 = icmp eq i32 %conv92, %49, !dbg !16792
  br i1 %cmp93, label %land.lhs.true, label %lor.lhs.false, !dbg !16793

land.lhs.true:                                    ; preds = %while.end91
  %50 = load i8, i8* %tmpb, align 1, !dbg !16794
  %conv95 = zext i8 %50 to i32, !dbg !16794
  %sub96 = sub i32 %conv95, 48, !dbg !16794
  %cmp97 = icmp ule i32 %sub96, 9, !dbg !16794
  br i1 %cmp97, label %lor.lhs.false, label %if.then107, !dbg !16795

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.end91
  %51 = load i8, i8* %tmpb, align 1, !dbg !16796
  %conv99 = zext i8 %51 to i32, !dbg !16796
  %52 = load i32, i32* %decimal_point.addr, align 4, !dbg !16797
  %cmp100 = icmp eq i32 %conv99, %52, !dbg !16798
  br i1 %cmp100, label %land.lhs.true102, label %if.end109, !dbg !16799

land.lhs.true102:                                 ; preds = %lor.lhs.false
  %53 = load i8, i8* %tmpa, align 1, !dbg !16800
  %conv103 = zext i8 %53 to i32, !dbg !16800
  %sub104 = sub i32 %conv103, 48, !dbg !16800
  %cmp105 = icmp ule i32 %sub104, 9, !dbg !16800
  br i1 %cmp105, label %if.end109, label %if.then107, !dbg !16801

if.then107:                                       ; preds = %land.lhs.true102, %land.lhs.true
  %54 = load i8*, i8** %b.addr, align 8, !dbg !16802
  %55 = load i8*, i8** %a.addr, align 8, !dbg !16803
  %56 = load i32, i32* %decimal_point.addr, align 4, !dbg !16804
  %conv108 = trunc i32 %56 to i8, !dbg !16804
  %call = call i32 @fraccompare(i8* %54, i8* %55, i8 signext %conv108) #14, !dbg !16805
  store i32 %call, i32* %retval, align 4, !dbg !16806
  br label %return, !dbg !16806

if.end109:                                        ; preds = %land.lhs.true102, %lor.lhs.false
  %57 = load i8, i8* %tmpb, align 1, !dbg !16807
  %conv110 = zext i8 %57 to i32, !dbg !16807
  %58 = load i8, i8* %tmpa, align 1, !dbg !16808
  %conv111 = zext i8 %58 to i32, !dbg !16808
  %sub112 = sub nsw i32 %conv110, %conv111, !dbg !16809
  store i32 %sub112, i32* %tmp, align 4, !dbg !16810
  store i64 0, i64* %log_a, align 8, !dbg !16811
  br label %for.cond, !dbg !16813

for.cond:                                         ; preds = %for.inc, %if.end109
  %59 = load i8, i8* %tmpa, align 1, !dbg !16814
  %conv113 = zext i8 %59 to i32, !dbg !16814
  %sub114 = sub i32 %conv113, 48, !dbg !16814
  %cmp115 = icmp ule i32 %sub114, 9, !dbg !16814
  br i1 %cmp115, label %for.body, label %for.end, !dbg !16816

for.body:                                         ; preds = %for.cond
  br label %do.body117, !dbg !16817

do.body117:                                       ; preds = %do.cond119, %for.body
  %60 = load i8*, i8** %a.addr, align 8, !dbg !16818
  %incdec.ptr118 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !16818, !ctir !91
  store i8* %incdec.ptr118, i8** %a.addr, align 8, !dbg !16818
  %61 = load i8, i8* %incdec.ptr118, align 1, !dbg !16819, !ctir !91
  store i8 %61, i8* %tmpa, align 1, !dbg !16820
  br label %do.cond119, !dbg !16821

do.cond119:                                       ; preds = %do.body117
  %62 = load i8, i8* %tmpa, align 1, !dbg !16822
  %conv120 = zext i8 %62 to i32, !dbg !16822
  %63 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16823
  %cmp121 = icmp eq i32 %conv120, %63, !dbg !16824
  br i1 %cmp121, label %do.body117, label %do.end123, !dbg !16821, !llvm.loop !16825

do.end123:                                        ; preds = %do.cond119
  br label %for.inc, !dbg !16821

for.inc:                                          ; preds = %do.end123
  %64 = load i64, i64* %log_a, align 8, !dbg !16827
  %inc = add i64 %64, 1, !dbg !16827
  store i64 %inc, i64* %log_a, align 8, !dbg !16827
  br label %for.cond, !dbg !16828, !llvm.loop !16829

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %log_b, align 8, !dbg !16831
  br label %for.cond124, !dbg !16833

for.cond124:                                      ; preds = %for.inc137, %for.end
  %65 = load i8, i8* %tmpb, align 1, !dbg !16834
  %conv125 = zext i8 %65 to i32, !dbg !16834
  %sub126 = sub i32 %conv125, 48, !dbg !16834
  %cmp127 = icmp ule i32 %sub126, 9, !dbg !16834
  br i1 %cmp127, label %for.body129, label %for.end139, !dbg !16836

for.body129:                                      ; preds = %for.cond124
  br label %do.body130, !dbg !16837

do.body130:                                       ; preds = %do.cond132, %for.body129
  %66 = load i8*, i8** %b.addr, align 8, !dbg !16838
  %incdec.ptr131 = getelementptr inbounds i8, i8* %66, i32 1, !dbg !16838, !ctir !91
  store i8* %incdec.ptr131, i8** %b.addr, align 8, !dbg !16838
  %67 = load i8, i8* %incdec.ptr131, align 1, !dbg !16839, !ctir !91
  store i8 %67, i8* %tmpb, align 1, !dbg !16840
  br label %do.cond132, !dbg !16841

do.cond132:                                       ; preds = %do.body130
  %68 = load i8, i8* %tmpb, align 1, !dbg !16842
  %conv133 = zext i8 %68 to i32, !dbg !16842
  %69 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16843
  %cmp134 = icmp eq i32 %conv133, %69, !dbg !16844
  br i1 %cmp134, label %do.body130, label %do.end136, !dbg !16841, !llvm.loop !16845

do.end136:                                        ; preds = %do.cond132
  br label %for.inc137, !dbg !16841

for.inc137:                                       ; preds = %do.end136
  %70 = load i64, i64* %log_b, align 8, !dbg !16847
  %inc138 = add i64 %70, 1, !dbg !16847
  store i64 %inc138, i64* %log_b, align 8, !dbg !16847
  br label %for.cond124, !dbg !16848, !llvm.loop !16849

for.end139:                                       ; preds = %for.cond124
  %71 = load i64, i64* %log_a, align 8, !dbg !16851
  %72 = load i64, i64* %log_b, align 8, !dbg !16853
  %cmp140 = icmp ne i64 %71, %72, !dbg !16854
  br i1 %cmp140, label %if.then142, label %if.end145, !dbg !16855

if.then142:                                       ; preds = %for.end139
  %73 = load i64, i64* %log_a, align 8, !dbg !16856
  %74 = load i64, i64* %log_b, align 8, !dbg !16857
  %cmp143 = icmp ult i64 %73, %74, !dbg !16858
  %75 = zext i1 %cmp143 to i64, !dbg !16856
  %cond = select i1 %cmp143, i32 1, i32 -1, !dbg !16856
  store i32 %cond, i32* %retval, align 4, !dbg !16859
  br label %return, !dbg !16859

if.end145:                                        ; preds = %for.end139
  %76 = load i64, i64* %log_a, align 8, !dbg !16860
  %tobool = icmp ne i64 %76, 0, !dbg !16860
  br i1 %tobool, label %if.end147, label %if.then146, !dbg !16862

if.then146:                                       ; preds = %if.end145
  store i32 0, i32* %retval, align 4, !dbg !16863
  br label %return, !dbg !16863

if.end147:                                        ; preds = %if.end145
  %77 = load i32, i32* %tmp, align 4, !dbg !16864
  store i32 %77, i32* %retval, align 4, !dbg !16865
  br label %return, !dbg !16865

if.else:                                          ; preds = %entry
  %78 = load i8, i8* %tmpb, align 1, !dbg !16866
  %conv148 = zext i8 %78 to i32, !dbg !16866
  %cmp149 = icmp eq i32 %conv148, 45, !dbg !16868
  br i1 %cmp149, label %if.then151, label %if.else210, !dbg !16869

if.then151:                                       ; preds = %if.else
  br label %do.body152, !dbg !16870

do.body152:                                       ; preds = %lor.end162, %if.then151
  %79 = load i8*, i8** %b.addr, align 8, !dbg !16872
  %incdec.ptr153 = getelementptr inbounds i8, i8* %79, i32 1, !dbg !16872, !ctir !91
  store i8* %incdec.ptr153, i8** %b.addr, align 8, !dbg !16872
  %80 = load i8, i8* %incdec.ptr153, align 1, !dbg !16873, !ctir !91
  store i8 %80, i8* %tmpb, align 1, !dbg !16874
  br label %do.cond154, !dbg !16875

do.cond154:                                       ; preds = %do.body152
  %81 = load i8, i8* %tmpb, align 1, !dbg !16876
  %conv155 = zext i8 %81 to i32, !dbg !16876
  %cmp156 = icmp eq i32 %conv155, 48, !dbg !16877
  br i1 %cmp156, label %lor.end162, label %lor.rhs158, !dbg !16878

lor.rhs158:                                       ; preds = %do.cond154
  %82 = load i8, i8* %tmpb, align 1, !dbg !16879
  %conv159 = zext i8 %82 to i32, !dbg !16879
  %83 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16880
  %cmp160 = icmp eq i32 %conv159, %83, !dbg !16881
  br label %lor.end162, !dbg !16878

lor.end162:                                       ; preds = %lor.rhs158, %do.cond154
  %84 = phi i1 [ true, %do.cond154 ], [ %cmp160, %lor.rhs158 ]
  br i1 %84, label %do.body152, label %do.end163, !dbg !16875, !llvm.loop !16882

do.end163:                                        ; preds = %lor.end162
  %85 = load i8, i8* %tmpb, align 1, !dbg !16884
  %conv164 = zext i8 %85 to i32, !dbg !16884
  %86 = load i32, i32* %decimal_point.addr, align 4, !dbg !16886
  %cmp165 = icmp eq i32 %conv164, %86, !dbg !16887
  br i1 %cmp165, label %if.then167, label %if.end175, !dbg !16888

if.then167:                                       ; preds = %do.end163
  br label %do.body168, !dbg !16889

do.body168:                                       ; preds = %do.cond170, %if.then167
  %87 = load i8*, i8** %b.addr, align 8, !dbg !16890
  %incdec.ptr169 = getelementptr inbounds i8, i8* %87, i32 1, !dbg !16890, !ctir !91
  store i8* %incdec.ptr169, i8** %b.addr, align 8, !dbg !16890
  %88 = load i8, i8* %incdec.ptr169, align 1, !dbg !16891, !ctir !91
  store i8 %88, i8* %tmpb, align 1, !dbg !16892
  br label %do.cond170, !dbg !16893

do.cond170:                                       ; preds = %do.body168
  %89 = load i8, i8* %tmpb, align 1, !dbg !16894
  %conv171 = zext i8 %89 to i32, !dbg !16894
  %cmp172 = icmp eq i32 %conv171, 48, !dbg !16895
  br i1 %cmp172, label %do.body168, label %do.end174, !dbg !16893, !llvm.loop !16896

do.end174:                                        ; preds = %do.cond170
  br label %if.end175, !dbg !16893

if.end175:                                        ; preds = %do.end174, %do.end163
  %90 = load i8, i8* %tmpb, align 1, !dbg !16898
  %conv176 = zext i8 %90 to i32, !dbg !16898
  %sub177 = sub i32 %conv176, 48, !dbg !16898
  %cmp178 = icmp ule i32 %sub177, 9, !dbg !16898
  br i1 %cmp178, label %if.then180, label %if.end181, !dbg !16900

if.then180:                                       ; preds = %if.end175
  store i32 1, i32* %retval, align 4, !dbg !16901
  br label %return, !dbg !16901

if.end181:                                        ; preds = %if.end175
  br label %while.cond182, !dbg !16902

while.cond182:                                    ; preds = %while.body191, %if.end181
  %91 = load i8, i8* %tmpa, align 1, !dbg !16903
  %conv183 = zext i8 %91 to i32, !dbg !16903
  %cmp184 = icmp eq i32 %conv183, 48, !dbg !16904
  br i1 %cmp184, label %lor.end190, label %lor.rhs186, !dbg !16905

lor.rhs186:                                       ; preds = %while.cond182
  %92 = load i8, i8* %tmpa, align 1, !dbg !16906
  %conv187 = zext i8 %92 to i32, !dbg !16906
  %93 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16907
  %cmp188 = icmp eq i32 %conv187, %93, !dbg !16908
  br label %lor.end190, !dbg !16905

lor.end190:                                       ; preds = %lor.rhs186, %while.cond182
  %94 = phi i1 [ true, %while.cond182 ], [ %cmp188, %lor.rhs186 ]
  br i1 %94, label %while.body191, label %while.end193, !dbg !16902

while.body191:                                    ; preds = %lor.end190
  %95 = load i8*, i8** %a.addr, align 8, !dbg !16909
  %incdec.ptr192 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !16909, !ctir !91
  store i8* %incdec.ptr192, i8** %a.addr, align 8, !dbg !16909
  %96 = load i8, i8* %incdec.ptr192, align 1, !dbg !16910, !ctir !91
  store i8 %96, i8* %tmpa, align 1, !dbg !16911
  br label %while.cond182, !dbg !16902, !llvm.loop !16912

while.end193:                                     ; preds = %lor.end190
  %97 = load i8, i8* %tmpa, align 1, !dbg !16914
  %conv194 = zext i8 %97 to i32, !dbg !16914
  %98 = load i32, i32* %decimal_point.addr, align 4, !dbg !16916
  %cmp195 = icmp eq i32 %conv194, %98, !dbg !16917
  br i1 %cmp195, label %if.then197, label %if.end205, !dbg !16918

if.then197:                                       ; preds = %while.end193
  br label %do.body198, !dbg !16919

do.body198:                                       ; preds = %do.cond200, %if.then197
  %99 = load i8*, i8** %a.addr, align 8, !dbg !16920
  %incdec.ptr199 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !16920, !ctir !91
  store i8* %incdec.ptr199, i8** %a.addr, align 8, !dbg !16920
  %100 = load i8, i8* %incdec.ptr199, align 1, !dbg !16921, !ctir !91
  store i8 %100, i8* %tmpa, align 1, !dbg !16922
  br label %do.cond200, !dbg !16923

do.cond200:                                       ; preds = %do.body198
  %101 = load i8, i8* %tmpa, align 1, !dbg !16924
  %conv201 = zext i8 %101 to i32, !dbg !16924
  %cmp202 = icmp eq i32 %conv201, 48, !dbg !16925
  br i1 %cmp202, label %do.body198, label %do.end204, !dbg !16923, !llvm.loop !16926

do.end204:                                        ; preds = %do.cond200
  br label %if.end205, !dbg !16923

if.end205:                                        ; preds = %do.end204, %while.end193
  %102 = load i8, i8* %tmpa, align 1, !dbg !16928
  %conv206 = zext i8 %102 to i32, !dbg !16928
  %sub207 = sub i32 %conv206, 48, !dbg !16928
  %cmp208 = icmp ule i32 %sub207, 9, !dbg !16928
  %conv209 = zext i1 %cmp208 to i32, !dbg !16928
  store i32 %conv209, i32* %retval, align 4, !dbg !16929
  br label %return, !dbg !16929

if.else210:                                       ; preds = %if.else
  br label %while.cond211, !dbg !16930

while.cond211:                                    ; preds = %while.body220, %if.else210
  %103 = load i8, i8* %tmpa, align 1, !dbg !16932
  %conv212 = zext i8 %103 to i32, !dbg !16932
  %cmp213 = icmp eq i32 %conv212, 48, !dbg !16933
  br i1 %cmp213, label %lor.end219, label %lor.rhs215, !dbg !16934

lor.rhs215:                                       ; preds = %while.cond211
  %104 = load i8, i8* %tmpa, align 1, !dbg !16935
  %conv216 = zext i8 %104 to i32, !dbg !16935
  %105 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16936
  %cmp217 = icmp eq i32 %conv216, %105, !dbg !16937
  br label %lor.end219, !dbg !16934

lor.end219:                                       ; preds = %lor.rhs215, %while.cond211
  %106 = phi i1 [ true, %while.cond211 ], [ %cmp217, %lor.rhs215 ]
  br i1 %106, label %while.body220, label %while.end222, !dbg !16930

while.body220:                                    ; preds = %lor.end219
  %107 = load i8*, i8** %a.addr, align 8, !dbg !16938
  %incdec.ptr221 = getelementptr inbounds i8, i8* %107, i32 1, !dbg !16938, !ctir !91
  store i8* %incdec.ptr221, i8** %a.addr, align 8, !dbg !16938
  %108 = load i8, i8* %incdec.ptr221, align 1, !dbg !16939, !ctir !91
  store i8 %108, i8* %tmpa, align 1, !dbg !16940
  br label %while.cond211, !dbg !16930, !llvm.loop !16941

while.end222:                                     ; preds = %lor.end219
  br label %while.cond223, !dbg !16943

while.cond223:                                    ; preds = %while.body232, %while.end222
  %109 = load i8, i8* %tmpb, align 1, !dbg !16944
  %conv224 = zext i8 %109 to i32, !dbg !16944
  %cmp225 = icmp eq i32 %conv224, 48, !dbg !16945
  br i1 %cmp225, label %lor.end231, label %lor.rhs227, !dbg !16946

lor.rhs227:                                       ; preds = %while.cond223
  %110 = load i8, i8* %tmpb, align 1, !dbg !16947
  %conv228 = zext i8 %110 to i32, !dbg !16947
  %111 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16948
  %cmp229 = icmp eq i32 %conv228, %111, !dbg !16949
  br label %lor.end231, !dbg !16946

lor.end231:                                       ; preds = %lor.rhs227, %while.cond223
  %112 = phi i1 [ true, %while.cond223 ], [ %cmp229, %lor.rhs227 ]
  br i1 %112, label %while.body232, label %while.end234, !dbg !16943

while.body232:                                    ; preds = %lor.end231
  %113 = load i8*, i8** %b.addr, align 8, !dbg !16950
  %incdec.ptr233 = getelementptr inbounds i8, i8* %113, i32 1, !dbg !16950, !ctir !91
  store i8* %incdec.ptr233, i8** %b.addr, align 8, !dbg !16950
  %114 = load i8, i8* %incdec.ptr233, align 1, !dbg !16951, !ctir !91
  store i8 %114, i8* %tmpb, align 1, !dbg !16952
  br label %while.cond223, !dbg !16943, !llvm.loop !16953

while.end234:                                     ; preds = %lor.end231
  br label %while.cond235, !dbg !16955

while.cond235:                                    ; preds = %do.end260, %while.end234
  %115 = load i8, i8* %tmpa, align 1, !dbg !16956
  %conv236 = zext i8 %115 to i32, !dbg !16956
  %116 = load i8, i8* %tmpb, align 1, !dbg !16957
  %conv237 = zext i8 %116 to i32, !dbg !16957
  %cmp238 = icmp eq i32 %conv236, %conv237, !dbg !16958
  br i1 %cmp238, label %land.rhs240, label %land.end245, !dbg !16959

land.rhs240:                                      ; preds = %while.cond235
  %117 = load i8, i8* %tmpa, align 1, !dbg !16960
  %conv241 = zext i8 %117 to i32, !dbg !16960
  %sub242 = sub i32 %conv241, 48, !dbg !16960
  %cmp243 = icmp ule i32 %sub242, 9, !dbg !16960
  br label %land.end245

land.end245:                                      ; preds = %land.rhs240, %while.cond235
  %118 = phi i1 [ false, %while.cond235 ], [ %cmp243, %land.rhs240 ], !dbg !16961
  br i1 %118, label %while.body246, label %while.end261, !dbg !16955

while.body246:                                    ; preds = %land.end245
  br label %do.body247, !dbg !16962

do.body247:                                       ; preds = %do.cond249, %while.body246
  %119 = load i8*, i8** %a.addr, align 8, !dbg !16964
  %incdec.ptr248 = getelementptr inbounds i8, i8* %119, i32 1, !dbg !16964, !ctir !91
  store i8* %incdec.ptr248, i8** %a.addr, align 8, !dbg !16964
  %120 = load i8, i8* %incdec.ptr248, align 1, !dbg !16965, !ctir !91
  store i8 %120, i8* %tmpa, align 1, !dbg !16966
  br label %do.cond249, !dbg !16967

do.cond249:                                       ; preds = %do.body247
  %121 = load i8, i8* %tmpa, align 1, !dbg !16968
  %conv250 = zext i8 %121 to i32, !dbg !16968
  %122 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16969
  %cmp251 = icmp eq i32 %conv250, %122, !dbg !16970
  br i1 %cmp251, label %do.body247, label %do.end253, !dbg !16967, !llvm.loop !16971

do.end253:                                        ; preds = %do.cond249
  br label %do.body254, !dbg !16973

do.body254:                                       ; preds = %do.cond256, %do.end253
  %123 = load i8*, i8** %b.addr, align 8, !dbg !16974
  %incdec.ptr255 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !16974, !ctir !91
  store i8* %incdec.ptr255, i8** %b.addr, align 8, !dbg !16974
  %124 = load i8, i8* %incdec.ptr255, align 1, !dbg !16975, !ctir !91
  store i8 %124, i8* %tmpb, align 1, !dbg !16976
  br label %do.cond256, !dbg !16977

do.cond256:                                       ; preds = %do.body254
  %125 = load i8, i8* %tmpb, align 1, !dbg !16978
  %conv257 = zext i8 %125 to i32, !dbg !16978
  %126 = load i32, i32* %thousands_sep.addr, align 4, !dbg !16979
  %cmp258 = icmp eq i32 %conv257, %126, !dbg !16980
  br i1 %cmp258, label %do.body254, label %do.end260, !dbg !16977, !llvm.loop !16981

do.end260:                                        ; preds = %do.cond256
  br label %while.cond235, !dbg !16955, !llvm.loop !16983

while.end261:                                     ; preds = %land.end245
  %127 = load i8, i8* %tmpa, align 1, !dbg !16985
  %conv262 = zext i8 %127 to i32, !dbg !16985
  %128 = load i32, i32* %decimal_point.addr, align 4, !dbg !16987
  %cmp263 = icmp eq i32 %conv262, %128, !dbg !16988
  br i1 %cmp263, label %land.lhs.true265, label %lor.lhs.false270, !dbg !16989

land.lhs.true265:                                 ; preds = %while.end261
  %129 = load i8, i8* %tmpb, align 1, !dbg !16990
  %conv266 = zext i8 %129 to i32, !dbg !16990
  %sub267 = sub i32 %conv266, 48, !dbg !16990
  %cmp268 = icmp ule i32 %sub267, 9, !dbg !16990
  br i1 %cmp268, label %lor.lhs.false270, label %if.then279, !dbg !16991

lor.lhs.false270:                                 ; preds = %land.lhs.true265, %while.end261
  %130 = load i8, i8* %tmpb, align 1, !dbg !16992
  %conv271 = zext i8 %130 to i32, !dbg !16992
  %131 = load i32, i32* %decimal_point.addr, align 4, !dbg !16993
  %cmp272 = icmp eq i32 %conv271, %131, !dbg !16994
  br i1 %cmp272, label %land.lhs.true274, label %if.end282, !dbg !16995

land.lhs.true274:                                 ; preds = %lor.lhs.false270
  %132 = load i8, i8* %tmpa, align 1, !dbg !16996
  %conv275 = zext i8 %132 to i32, !dbg !16996
  %sub276 = sub i32 %conv275, 48, !dbg !16996
  %cmp277 = icmp ule i32 %sub276, 9, !dbg !16996
  br i1 %cmp277, label %if.end282, label %if.then279, !dbg !16997

if.then279:                                       ; preds = %land.lhs.true274, %land.lhs.true265
  %133 = load i8*, i8** %a.addr, align 8, !dbg !16998
  %134 = load i8*, i8** %b.addr, align 8, !dbg !16999
  %135 = load i32, i32* %decimal_point.addr, align 4, !dbg !17000
  %conv280 = trunc i32 %135 to i8, !dbg !17000
  %call281 = call i32 @fraccompare(i8* %133, i8* %134, i8 signext %conv280) #14, !dbg !17001
  store i32 %call281, i32* %retval, align 4, !dbg !17002
  br label %return, !dbg !17002

if.end282:                                        ; preds = %land.lhs.true274, %lor.lhs.false270
  %136 = load i8, i8* %tmpa, align 1, !dbg !17003
  %conv283 = zext i8 %136 to i32, !dbg !17003
  %137 = load i8, i8* %tmpb, align 1, !dbg !17004
  %conv284 = zext i8 %137 to i32, !dbg !17004
  %sub285 = sub nsw i32 %conv283, %conv284, !dbg !17005
  store i32 %sub285, i32* %tmp, align 4, !dbg !17006
  store i64 0, i64* %log_a, align 8, !dbg !17007
  br label %for.cond286, !dbg !17009

for.cond286:                                      ; preds = %for.inc299, %if.end282
  %138 = load i8, i8* %tmpa, align 1, !dbg !17010
  %conv287 = zext i8 %138 to i32, !dbg !17010
  %sub288 = sub i32 %conv287, 48, !dbg !17010
  %cmp289 = icmp ule i32 %sub288, 9, !dbg !17010
  br i1 %cmp289, label %for.body291, label %for.end301, !dbg !17012

for.body291:                                      ; preds = %for.cond286
  br label %do.body292, !dbg !17013

do.body292:                                       ; preds = %do.cond294, %for.body291
  %139 = load i8*, i8** %a.addr, align 8, !dbg !17014
  %incdec.ptr293 = getelementptr inbounds i8, i8* %139, i32 1, !dbg !17014, !ctir !91
  store i8* %incdec.ptr293, i8** %a.addr, align 8, !dbg !17014
  %140 = load i8, i8* %incdec.ptr293, align 1, !dbg !17015, !ctir !91
  store i8 %140, i8* %tmpa, align 1, !dbg !17016
  br label %do.cond294, !dbg !17017

do.cond294:                                       ; preds = %do.body292
  %141 = load i8, i8* %tmpa, align 1, !dbg !17018
  %conv295 = zext i8 %141 to i32, !dbg !17018
  %142 = load i32, i32* %thousands_sep.addr, align 4, !dbg !17019
  %cmp296 = icmp eq i32 %conv295, %142, !dbg !17020
  br i1 %cmp296, label %do.body292, label %do.end298, !dbg !17017, !llvm.loop !17021

do.end298:                                        ; preds = %do.cond294
  br label %for.inc299, !dbg !17017

for.inc299:                                       ; preds = %do.end298
  %143 = load i64, i64* %log_a, align 8, !dbg !17023
  %inc300 = add i64 %143, 1, !dbg !17023
  store i64 %inc300, i64* %log_a, align 8, !dbg !17023
  br label %for.cond286, !dbg !17024, !llvm.loop !17025

for.end301:                                       ; preds = %for.cond286
  store i64 0, i64* %log_b, align 8, !dbg !17027
  br label %for.cond302, !dbg !17029

for.cond302:                                      ; preds = %for.inc315, %for.end301
  %144 = load i8, i8* %tmpb, align 1, !dbg !17030
  %conv303 = zext i8 %144 to i32, !dbg !17030
  %sub304 = sub i32 %conv303, 48, !dbg !17030
  %cmp305 = icmp ule i32 %sub304, 9, !dbg !17030
  br i1 %cmp305, label %for.body307, label %for.end317, !dbg !17032

for.body307:                                      ; preds = %for.cond302
  br label %do.body308, !dbg !17033

do.body308:                                       ; preds = %do.cond310, %for.body307
  %145 = load i8*, i8** %b.addr, align 8, !dbg !17034
  %incdec.ptr309 = getelementptr inbounds i8, i8* %145, i32 1, !dbg !17034, !ctir !91
  store i8* %incdec.ptr309, i8** %b.addr, align 8, !dbg !17034
  %146 = load i8, i8* %incdec.ptr309, align 1, !dbg !17035, !ctir !91
  store i8 %146, i8* %tmpb, align 1, !dbg !17036
  br label %do.cond310, !dbg !17037

do.cond310:                                       ; preds = %do.body308
  %147 = load i8, i8* %tmpb, align 1, !dbg !17038
  %conv311 = zext i8 %147 to i32, !dbg !17038
  %148 = load i32, i32* %thousands_sep.addr, align 4, !dbg !17039
  %cmp312 = icmp eq i32 %conv311, %148, !dbg !17040
  br i1 %cmp312, label %do.body308, label %do.end314, !dbg !17037, !llvm.loop !17041

do.end314:                                        ; preds = %do.cond310
  br label %for.inc315, !dbg !17037

for.inc315:                                       ; preds = %do.end314
  %149 = load i64, i64* %log_b, align 8, !dbg !17043
  %inc316 = add i64 %149, 1, !dbg !17043
  store i64 %inc316, i64* %log_b, align 8, !dbg !17043
  br label %for.cond302, !dbg !17044, !llvm.loop !17045

for.end317:                                       ; preds = %for.cond302
  %150 = load i64, i64* %log_a, align 8, !dbg !17047
  %151 = load i64, i64* %log_b, align 8, !dbg !17049
  %cmp318 = icmp ne i64 %150, %151, !dbg !17050
  br i1 %cmp318, label %if.then320, label %if.end324, !dbg !17051

if.then320:                                       ; preds = %for.end317
  %152 = load i64, i64* %log_a, align 8, !dbg !17052
  %153 = load i64, i64* %log_b, align 8, !dbg !17053
  %cmp321 = icmp ult i64 %152, %153, !dbg !17054
  %154 = zext i1 %cmp321 to i64, !dbg !17052
  %cond323 = select i1 %cmp321, i32 -1, i32 1, !dbg !17052
  store i32 %cond323, i32* %retval, align 4, !dbg !17055
  br label %return, !dbg !17055

if.end324:                                        ; preds = %for.end317
  %155 = load i64, i64* %log_a, align 8, !dbg !17056
  %tobool325 = icmp ne i64 %155, 0, !dbg !17056
  br i1 %tobool325, label %if.end327, label %if.then326, !dbg !17058

if.then326:                                       ; preds = %if.end324
  store i32 0, i32* %retval, align 4, !dbg !17059
  br label %return, !dbg !17059

if.end327:                                        ; preds = %if.end324
  %156 = load i32, i32* %tmp, align 4, !dbg !17060
  store i32 %156, i32* %retval, align 4, !dbg !17061
  br label %return, !dbg !17061

return:                                           ; preds = %if.end327, %if.then326, %if.then320, %if.then279, %if.end205, %if.then180, %if.end147, %if.then146, %if.then142, %if.then107, %if.end48, %if.then26
  %157 = load i32, i32* %retval, align 4, !dbg !17062
  ret i32 %157, !dbg !17062
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @fraccompare(i8* %a, i8* %b, i8 signext %decimal_point) #9 !dbg !17063 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %decimal_point.addr = alloca i8, align 1
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !17066, metadata !DIExpression()), !dbg !17067
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !17068, metadata !DIExpression()), !dbg !17069
  store i8 %decimal_point, i8* %decimal_point.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %decimal_point.addr, metadata !17070, metadata !DIExpression()), !dbg !17071
  %0 = load i8*, i8** %a.addr, align 8, !dbg !17072
  %1 = load i8, i8* %0, align 1, !dbg !17074, !ctir !91
  %conv = sext i8 %1 to i32, !dbg !17074
  %2 = load i8, i8* %decimal_point.addr, align 1, !dbg !17075
  %conv1 = sext i8 %2 to i32, !dbg !17075
  %cmp = icmp eq i32 %conv, %conv1, !dbg !17076
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !17077

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %b.addr, align 8, !dbg !17078
  %4 = load i8, i8* %3, align 1, !dbg !17079, !ctir !91
  %conv3 = sext i8 %4 to i32, !dbg !17079
  %5 = load i8, i8* %decimal_point.addr, align 1, !dbg !17080
  %conv4 = sext i8 %5 to i32, !dbg !17080
  %cmp5 = icmp eq i32 %conv3, %conv4, !dbg !17081
  br i1 %cmp5, label %if.then, label %if.else, !dbg !17082

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond, !dbg !17083

while.cond:                                       ; preds = %if.end, %if.then
  %6 = load i8*, i8** %a.addr, align 8, !dbg !17085
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1, !dbg !17085, !ctir !91
  store i8* %incdec.ptr, i8** %a.addr, align 8, !dbg !17085
  %7 = load i8, i8* %incdec.ptr, align 1, !dbg !17086, !ctir !91
  %conv7 = sext i8 %7 to i32, !dbg !17086
  %8 = load i8*, i8** %b.addr, align 8, !dbg !17087
  %incdec.ptr8 = getelementptr inbounds i8, i8* %8, i32 1, !dbg !17087, !ctir !91
  store i8* %incdec.ptr8, i8** %b.addr, align 8, !dbg !17087
  %9 = load i8, i8* %incdec.ptr8, align 1, !dbg !17088, !ctir !91
  %conv9 = sext i8 %9 to i32, !dbg !17088
  %cmp10 = icmp eq i32 %conv7, %conv9, !dbg !17089
  br i1 %cmp10, label %while.body, label %while.end, !dbg !17083

while.body:                                       ; preds = %while.cond
  %10 = load i8*, i8** %a.addr, align 8, !dbg !17090
  %11 = load i8, i8* %10, align 1, !dbg !17090, !ctir !91
  %conv12 = sext i8 %11 to i32, !dbg !17090
  %sub = sub i32 %conv12, 48, !dbg !17090
  %cmp13 = icmp ule i32 %sub, 9, !dbg !17090
  br i1 %cmp13, label %if.end, label %if.then15, !dbg !17092

if.then15:                                        ; preds = %while.body
  store i32 0, i32* %retval, align 4, !dbg !17093
  br label %return, !dbg !17093

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !17083, !llvm.loop !17094

while.end:                                        ; preds = %while.cond
  %12 = load i8*, i8** %a.addr, align 8, !dbg !17096
  %13 = load i8, i8* %12, align 1, !dbg !17096, !ctir !91
  %conv16 = sext i8 %13 to i32, !dbg !17096
  %sub17 = sub i32 %conv16, 48, !dbg !17096
  %cmp18 = icmp ule i32 %sub17, 9, !dbg !17096
  br i1 %cmp18, label %land.lhs.true20, label %if.end29, !dbg !17098

land.lhs.true20:                                  ; preds = %while.end
  %14 = load i8*, i8** %b.addr, align 8, !dbg !17099
  %15 = load i8, i8* %14, align 1, !dbg !17099, !ctir !91
  %conv21 = sext i8 %15 to i32, !dbg !17099
  %sub22 = sub i32 %conv21, 48, !dbg !17099
  %cmp23 = icmp ule i32 %sub22, 9, !dbg !17099
  br i1 %cmp23, label %if.then25, label %if.end29, !dbg !17100

if.then25:                                        ; preds = %land.lhs.true20
  %16 = load i8*, i8** %a.addr, align 8, !dbg !17101
  %17 = load i8, i8* %16, align 1, !dbg !17102, !ctir !91
  %conv26 = sext i8 %17 to i32, !dbg !17102
  %18 = load i8*, i8** %b.addr, align 8, !dbg !17103
  %19 = load i8, i8* %18, align 1, !dbg !17104, !ctir !91
  %conv27 = sext i8 %19 to i32, !dbg !17104
  %sub28 = sub nsw i32 %conv26, %conv27, !dbg !17105
  store i32 %sub28, i32* %retval, align 4, !dbg !17106
  br label %return, !dbg !17106

if.end29:                                         ; preds = %land.lhs.true20, %while.end
  %20 = load i8*, i8** %a.addr, align 8, !dbg !17107
  %21 = load i8, i8* %20, align 1, !dbg !17107, !ctir !91
  %conv30 = sext i8 %21 to i32, !dbg !17107
  %sub31 = sub i32 %conv30, 48, !dbg !17107
  %cmp32 = icmp ule i32 %sub31, 9, !dbg !17107
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !17109

if.then34:                                        ; preds = %if.end29
  br label %a_trailing_nonzero, !dbg !17110

if.end35:                                         ; preds = %if.end29
  %22 = load i8*, i8** %b.addr, align 8, !dbg !17111
  %23 = load i8, i8* %22, align 1, !dbg !17111, !ctir !91
  %conv36 = sext i8 %23 to i32, !dbg !17111
  %sub37 = sub i32 %conv36, 48, !dbg !17111
  %cmp38 = icmp ule i32 %sub37, 9, !dbg !17111
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !17113

if.then40:                                        ; preds = %if.end35
  br label %b_trailing_nonzero, !dbg !17114

if.end41:                                         ; preds = %if.end35
  store i32 0, i32* %retval, align 4, !dbg !17115
  br label %return, !dbg !17115

if.else:                                          ; preds = %land.lhs.true, %entry
  %24 = load i8*, i8** %a.addr, align 8, !dbg !17116
  %incdec.ptr42 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !17116, !ctir !91
  store i8* %incdec.ptr42, i8** %a.addr, align 8, !dbg !17116
  %25 = load i8, i8* %24, align 1, !dbg !17118, !ctir !91
  %conv43 = sext i8 %25 to i32, !dbg !17118
  %26 = load i8, i8* %decimal_point.addr, align 1, !dbg !17119
  %conv44 = sext i8 %26 to i32, !dbg !17119
  %cmp45 = icmp eq i32 %conv43, %conv44, !dbg !17120
  br i1 %cmp45, label %if.then47, label %if.else59, !dbg !17121

if.then47:                                        ; preds = %if.else
  br label %a_trailing_nonzero, !dbg !17122

a_trailing_nonzero:                               ; preds = %if.then47, %if.then34
  call void @llvm.dbg.label(metadata !17123), !dbg !17125
  br label %while.cond48, !dbg !17126

while.cond48:                                     ; preds = %while.body52, %a_trailing_nonzero
  %27 = load i8*, i8** %a.addr, align 8, !dbg !17127
  %28 = load i8, i8* %27, align 1, !dbg !17128, !ctir !91
  %conv49 = sext i8 %28 to i32, !dbg !17128
  %cmp50 = icmp eq i32 %conv49, 48, !dbg !17129
  br i1 %cmp50, label %while.body52, label %while.end54, !dbg !17126

while.body52:                                     ; preds = %while.cond48
  %29 = load i8*, i8** %a.addr, align 8, !dbg !17130
  %incdec.ptr53 = getelementptr inbounds i8, i8* %29, i32 1, !dbg !17130, !ctir !91
  store i8* %incdec.ptr53, i8** %a.addr, align 8, !dbg !17130
  br label %while.cond48, !dbg !17126, !llvm.loop !17131

while.end54:                                      ; preds = %while.cond48
  %30 = load i8*, i8** %a.addr, align 8, !dbg !17132
  %31 = load i8, i8* %30, align 1, !dbg !17132, !ctir !91
  %conv55 = sext i8 %31 to i32, !dbg !17132
  %sub56 = sub i32 %conv55, 48, !dbg !17132
  %cmp57 = icmp ule i32 %sub56, 9, !dbg !17132
  %conv58 = zext i1 %cmp57 to i32, !dbg !17132
  store i32 %conv58, i32* %retval, align 4, !dbg !17133
  br label %return, !dbg !17133

if.else59:                                        ; preds = %if.else
  %32 = load i8*, i8** %b.addr, align 8, !dbg !17134
  %incdec.ptr60 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !17134, !ctir !91
  store i8* %incdec.ptr60, i8** %b.addr, align 8, !dbg !17134
  %33 = load i8, i8* %32, align 1, !dbg !17136, !ctir !91
  %conv61 = sext i8 %33 to i32, !dbg !17136
  %34 = load i8, i8* %decimal_point.addr, align 1, !dbg !17137
  %conv62 = sext i8 %34 to i32, !dbg !17137
  %cmp63 = icmp eq i32 %conv61, %conv62, !dbg !17138
  br i1 %cmp63, label %if.then65, label %if.end78, !dbg !17139

if.then65:                                        ; preds = %if.else59
  br label %b_trailing_nonzero, !dbg !17140

b_trailing_nonzero:                               ; preds = %if.then65, %if.then40
  call void @llvm.dbg.label(metadata !17141), !dbg !17143
  br label %while.cond66, !dbg !17144

while.cond66:                                     ; preds = %while.body70, %b_trailing_nonzero
  %35 = load i8*, i8** %b.addr, align 8, !dbg !17145
  %36 = load i8, i8* %35, align 1, !dbg !17146, !ctir !91
  %conv67 = sext i8 %36 to i32, !dbg !17146
  %cmp68 = icmp eq i32 %conv67, 48, !dbg !17147
  br i1 %cmp68, label %while.body70, label %while.end72, !dbg !17144

while.body70:                                     ; preds = %while.cond66
  %37 = load i8*, i8** %b.addr, align 8, !dbg !17148
  %incdec.ptr71 = getelementptr inbounds i8, i8* %37, i32 1, !dbg !17148, !ctir !91
  store i8* %incdec.ptr71, i8** %b.addr, align 8, !dbg !17148
  br label %while.cond66, !dbg !17144, !llvm.loop !17149

while.end72:                                      ; preds = %while.cond66
  %38 = load i8*, i8** %b.addr, align 8, !dbg !17150
  %39 = load i8, i8* %38, align 1, !dbg !17150, !ctir !91
  %conv73 = sext i8 %39 to i32, !dbg !17150
  %sub74 = sub i32 %conv73, 48, !dbg !17150
  %cmp75 = icmp ule i32 %sub74, 9, !dbg !17150
  %conv76 = zext i1 %cmp75 to i32, !dbg !17150
  %sub77 = sub nsw i32 0, %conv76, !dbg !17151
  store i32 %sub77, i32* %retval, align 4, !dbg !17152
  br label %return, !dbg !17152

if.end78:                                         ; preds = %if.else59
  br label %if.end79

if.end79:                                         ; preds = %if.end78
  br label %if.end80

if.end80:                                         ; preds = %if.end79
  store i32 0, i32* %retval, align 4, !dbg !17153
  br label %return, !dbg !17153

return:                                           ; preds = %if.end80, %while.end72, %while.end54, %if.end41, %if.then25, %if.then15
  %40 = load i32, i32* %retval, align 4, !dbg !17154
  ret i32 %40, !dbg !17154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fd_safer(i32 %fd) #4 !dbg !17155 {
entry:
  %fd.addr = alloca i32, align 4
  %f = alloca i32, align 4, !ctir !5
  %e = alloca i32, align 4, !ctir !5
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !17159, metadata !DIExpression()), !dbg !17160
  %0 = load i32, i32* %fd.addr, align 4, !dbg !17161
  %cmp = icmp sle i32 0, %0, !dbg !17163
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !17164

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !dbg !17165
  %cmp1 = icmp sle i32 %1, 2, !dbg !17166
  br i1 %cmp1, label %if.then, label %if.end, !dbg !17167

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %f, metadata !17168, metadata !DIExpression()), !dbg !17170
  %2 = load i32, i32* %fd.addr, align 4, !dbg !17171
  %call = call i32 @dup_safer(i32 %2), !dbg !17172
  store i32 %call, i32* %f, align 4, !dbg !17170
  call void @llvm.dbg.declare(metadata i32* %e, metadata !17173, metadata !DIExpression()), !dbg !17174
  %call2 = call i32* @__errno_location() #16, !dbg !17175
  %3 = load i32, i32* %call2, align 4, !dbg !17175, !ctir !5
  store i32 %3, i32* %e, align 4, !dbg !17174
  %4 = load i32, i32* %fd.addr, align 4, !dbg !17176
  %call3 = call i32 @close(i32 %4), !dbg !17177
  %5 = load i32, i32* %e, align 4, !dbg !17178
  %call4 = call i32* @__errno_location() #16, !dbg !17179
  store i32 %5, i32* %call4, align 4, !dbg !17180, !ctir !5
  %6 = load i32, i32* %f, align 4, !dbg !17181
  store i32 %6, i32* %fd.addr, align 4, !dbg !17182
  br label %if.end, !dbg !17183

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i32, i32* %fd.addr, align 4, !dbg !17184
  ret i32 %7, !dbg !17185
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_arn(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors, i64 %n_authors) #4 !dbg !17186 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors.addr = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !17192, metadata !DIExpression()), !dbg !17193
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !17194, metadata !DIExpression()), !dbg !17195
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !17196, metadata !DIExpression()), !dbg !17197
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !17198, metadata !DIExpression()), !dbg !17199
  store i8** %authors, i8*** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %authors.addr, metadata !17200, metadata !DIExpression()), !dbg !17201
  store i64 %n_authors, i64* %n_authors.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n_authors.addr, metadata !17202, metadata !DIExpression()), !dbg !17203
  %0 = load i8*, i8** %command_name.addr, align 8, !dbg !17204
  %tobool = icmp ne i8* %0, null, !dbg !17204
  br i1 %tobool, label %if.then, label %if.else, !dbg !17206

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17207
  %2 = load i8*, i8** %command_name.addr, align 8, !dbg !17208
  %3 = load i8*, i8** %package.addr, align 8, !dbg !17209
  %4 = load i8*, i8** %version.addr, align 8, !dbg !17210
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.305, i64 0, i64 0), i8* %2, i8* %3, i8* %4), !dbg !17211
  br label %if.end, !dbg !17211

if.else:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17212
  %6 = load i8*, i8** %package.addr, align 8, !dbg !17213
  %7 = load i8*, i8** %version.addr, align 8, !dbg !17214
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.306, i64 0, i64 0), i8* %6, i8* %7), !dbg !17215
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17216
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.307, i64 0, i64 0)) #12, !dbg !17217
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %call2, i32 2019), !dbg !17218
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17219
  %call4 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.308, i64 0, i64 0), %struct._IO_FILE* %9), !dbg !17219
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17220
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.309, i64 0, i64 0)) #12, !dbg !17221
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* %call5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.310, i64 0, i64 0)), !dbg !17222
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17223
  %call7 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.308, i64 0, i64 0), %struct._IO_FILE* %11), !dbg !17223
  %12 = load i64, i64* %n_authors.addr, align 8, !dbg !17224
  switch i64 %12, label %sw.default [
    i64 0, label %sw.bb
    i64 1, label %sw.bb8
    i64 2, label %sw.bb11
    i64 3, label %sw.bb16
    i64 4, label %sw.bb22
    i64 5, label %sw.bb29
    i64 6, label %sw.bb37
    i64 7, label %sw.bb46
    i64 8, label %sw.bb56
    i64 9, label %sw.bb67
  ], !dbg !17225

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog, !dbg !17226

sw.bb8:                                           ; preds = %if.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17228
  %call9 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.311, i64 0, i64 0)) #12, !dbg !17229
  %14 = load i8**, i8*** %authors.addr, align 8, !dbg !17230
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 0, !dbg !17230, !ctir !824
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !17230
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* %call9, i8* %15), !dbg !17231
  br label %sw.epilog, !dbg !17232

sw.bb11:                                          ; preds = %if.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17233
  %call12 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.312, i64 0, i64 0)) #12, !dbg !17234
  %17 = load i8**, i8*** %authors.addr, align 8, !dbg !17235
  %arrayidx13 = getelementptr inbounds i8*, i8** %17, i64 0, !dbg !17235, !ctir !824
  %18 = load i8*, i8** %arrayidx13, align 8, !dbg !17235
  %19 = load i8**, i8*** %authors.addr, align 8, !dbg !17236
  %arrayidx14 = getelementptr inbounds i8*, i8** %19, i64 1, !dbg !17236, !ctir !824
  %20 = load i8*, i8** %arrayidx14, align 8, !dbg !17236
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* %call12, i8* %18, i8* %20), !dbg !17237
  br label %sw.epilog, !dbg !17238

sw.bb16:                                          ; preds = %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17239
  %call17 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.313, i64 0, i64 0)) #12, !dbg !17240
  %22 = load i8**, i8*** %authors.addr, align 8, !dbg !17241
  %arrayidx18 = getelementptr inbounds i8*, i8** %22, i64 0, !dbg !17241, !ctir !824
  %23 = load i8*, i8** %arrayidx18, align 8, !dbg !17241
  %24 = load i8**, i8*** %authors.addr, align 8, !dbg !17242
  %arrayidx19 = getelementptr inbounds i8*, i8** %24, i64 1, !dbg !17242, !ctir !824
  %25 = load i8*, i8** %arrayidx19, align 8, !dbg !17242
  %26 = load i8**, i8*** %authors.addr, align 8, !dbg !17243
  %arrayidx20 = getelementptr inbounds i8*, i8** %26, i64 2, !dbg !17243, !ctir !824
  %27 = load i8*, i8** %arrayidx20, align 8, !dbg !17243
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* %call17, i8* %23, i8* %25, i8* %27), !dbg !17244
  br label %sw.epilog, !dbg !17245

sw.bb22:                                          ; preds = %if.end
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17246
  %call23 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.314, i64 0, i64 0)) #12, !dbg !17247
  %29 = load i8**, i8*** %authors.addr, align 8, !dbg !17248
  %arrayidx24 = getelementptr inbounds i8*, i8** %29, i64 0, !dbg !17248, !ctir !824
  %30 = load i8*, i8** %arrayidx24, align 8, !dbg !17248
  %31 = load i8**, i8*** %authors.addr, align 8, !dbg !17249
  %arrayidx25 = getelementptr inbounds i8*, i8** %31, i64 1, !dbg !17249, !ctir !824
  %32 = load i8*, i8** %arrayidx25, align 8, !dbg !17249
  %33 = load i8**, i8*** %authors.addr, align 8, !dbg !17250
  %arrayidx26 = getelementptr inbounds i8*, i8** %33, i64 2, !dbg !17250, !ctir !824
  %34 = load i8*, i8** %arrayidx26, align 8, !dbg !17250
  %35 = load i8**, i8*** %authors.addr, align 8, !dbg !17251
  %arrayidx27 = getelementptr inbounds i8*, i8** %35, i64 3, !dbg !17251, !ctir !824
  %36 = load i8*, i8** %arrayidx27, align 8, !dbg !17251
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* %call23, i8* %30, i8* %32, i8* %34, i8* %36), !dbg !17252
  br label %sw.epilog, !dbg !17253

sw.bb29:                                          ; preds = %if.end
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17254
  %call30 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.315, i64 0, i64 0)) #12, !dbg !17255
  %38 = load i8**, i8*** %authors.addr, align 8, !dbg !17256
  %arrayidx31 = getelementptr inbounds i8*, i8** %38, i64 0, !dbg !17256, !ctir !824
  %39 = load i8*, i8** %arrayidx31, align 8, !dbg !17256
  %40 = load i8**, i8*** %authors.addr, align 8, !dbg !17257
  %arrayidx32 = getelementptr inbounds i8*, i8** %40, i64 1, !dbg !17257, !ctir !824
  %41 = load i8*, i8** %arrayidx32, align 8, !dbg !17257
  %42 = load i8**, i8*** %authors.addr, align 8, !dbg !17258
  %arrayidx33 = getelementptr inbounds i8*, i8** %42, i64 2, !dbg !17258, !ctir !824
  %43 = load i8*, i8** %arrayidx33, align 8, !dbg !17258
  %44 = load i8**, i8*** %authors.addr, align 8, !dbg !17259
  %arrayidx34 = getelementptr inbounds i8*, i8** %44, i64 3, !dbg !17259, !ctir !824
  %45 = load i8*, i8** %arrayidx34, align 8, !dbg !17259
  %46 = load i8**, i8*** %authors.addr, align 8, !dbg !17260
  %arrayidx35 = getelementptr inbounds i8*, i8** %46, i64 4, !dbg !17260, !ctir !824
  %47 = load i8*, i8** %arrayidx35, align 8, !dbg !17260
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* %call30, i8* %39, i8* %41, i8* %43, i8* %45, i8* %47), !dbg !17261
  br label %sw.epilog, !dbg !17262

sw.bb37:                                          ; preds = %if.end
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17263
  %call38 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.316, i64 0, i64 0)) #12, !dbg !17264
  %49 = load i8**, i8*** %authors.addr, align 8, !dbg !17265
  %arrayidx39 = getelementptr inbounds i8*, i8** %49, i64 0, !dbg !17265, !ctir !824
  %50 = load i8*, i8** %arrayidx39, align 8, !dbg !17265
  %51 = load i8**, i8*** %authors.addr, align 8, !dbg !17266
  %arrayidx40 = getelementptr inbounds i8*, i8** %51, i64 1, !dbg !17266, !ctir !824
  %52 = load i8*, i8** %arrayidx40, align 8, !dbg !17266
  %53 = load i8**, i8*** %authors.addr, align 8, !dbg !17267
  %arrayidx41 = getelementptr inbounds i8*, i8** %53, i64 2, !dbg !17267, !ctir !824
  %54 = load i8*, i8** %arrayidx41, align 8, !dbg !17267
  %55 = load i8**, i8*** %authors.addr, align 8, !dbg !17268
  %arrayidx42 = getelementptr inbounds i8*, i8** %55, i64 3, !dbg !17268, !ctir !824
  %56 = load i8*, i8** %arrayidx42, align 8, !dbg !17268
  %57 = load i8**, i8*** %authors.addr, align 8, !dbg !17269
  %arrayidx43 = getelementptr inbounds i8*, i8** %57, i64 4, !dbg !17269, !ctir !824
  %58 = load i8*, i8** %arrayidx43, align 8, !dbg !17269
  %59 = load i8**, i8*** %authors.addr, align 8, !dbg !17270
  %arrayidx44 = getelementptr inbounds i8*, i8** %59, i64 5, !dbg !17270, !ctir !824
  %60 = load i8*, i8** %arrayidx44, align 8, !dbg !17270
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %call38, i8* %50, i8* %52, i8* %54, i8* %56, i8* %58, i8* %60), !dbg !17271
  br label %sw.epilog, !dbg !17272

sw.bb46:                                          ; preds = %if.end
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17273
  %call47 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.317, i64 0, i64 0)) #12, !dbg !17274
  %62 = load i8**, i8*** %authors.addr, align 8, !dbg !17275
  %arrayidx48 = getelementptr inbounds i8*, i8** %62, i64 0, !dbg !17275, !ctir !824
  %63 = load i8*, i8** %arrayidx48, align 8, !dbg !17275
  %64 = load i8**, i8*** %authors.addr, align 8, !dbg !17276
  %arrayidx49 = getelementptr inbounds i8*, i8** %64, i64 1, !dbg !17276, !ctir !824
  %65 = load i8*, i8** %arrayidx49, align 8, !dbg !17276
  %66 = load i8**, i8*** %authors.addr, align 8, !dbg !17277
  %arrayidx50 = getelementptr inbounds i8*, i8** %66, i64 2, !dbg !17277, !ctir !824
  %67 = load i8*, i8** %arrayidx50, align 8, !dbg !17277
  %68 = load i8**, i8*** %authors.addr, align 8, !dbg !17278
  %arrayidx51 = getelementptr inbounds i8*, i8** %68, i64 3, !dbg !17278, !ctir !824
  %69 = load i8*, i8** %arrayidx51, align 8, !dbg !17278
  %70 = load i8**, i8*** %authors.addr, align 8, !dbg !17279
  %arrayidx52 = getelementptr inbounds i8*, i8** %70, i64 4, !dbg !17279, !ctir !824
  %71 = load i8*, i8** %arrayidx52, align 8, !dbg !17279
  %72 = load i8**, i8*** %authors.addr, align 8, !dbg !17280
  %arrayidx53 = getelementptr inbounds i8*, i8** %72, i64 5, !dbg !17280, !ctir !824
  %73 = load i8*, i8** %arrayidx53, align 8, !dbg !17280
  %74 = load i8**, i8*** %authors.addr, align 8, !dbg !17281
  %arrayidx54 = getelementptr inbounds i8*, i8** %74, i64 6, !dbg !17281, !ctir !824
  %75 = load i8*, i8** %arrayidx54, align 8, !dbg !17281
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* %call47, i8* %63, i8* %65, i8* %67, i8* %69, i8* %71, i8* %73, i8* %75), !dbg !17282
  br label %sw.epilog, !dbg !17283

sw.bb56:                                          ; preds = %if.end
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17284
  %call57 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.318, i64 0, i64 0)) #12, !dbg !17285
  %77 = load i8**, i8*** %authors.addr, align 8, !dbg !17286
  %arrayidx58 = getelementptr inbounds i8*, i8** %77, i64 0, !dbg !17286, !ctir !824
  %78 = load i8*, i8** %arrayidx58, align 8, !dbg !17286
  %79 = load i8**, i8*** %authors.addr, align 8, !dbg !17287
  %arrayidx59 = getelementptr inbounds i8*, i8** %79, i64 1, !dbg !17287, !ctir !824
  %80 = load i8*, i8** %arrayidx59, align 8, !dbg !17287
  %81 = load i8**, i8*** %authors.addr, align 8, !dbg !17288
  %arrayidx60 = getelementptr inbounds i8*, i8** %81, i64 2, !dbg !17288, !ctir !824
  %82 = load i8*, i8** %arrayidx60, align 8, !dbg !17288
  %83 = load i8**, i8*** %authors.addr, align 8, !dbg !17289
  %arrayidx61 = getelementptr inbounds i8*, i8** %83, i64 3, !dbg !17289, !ctir !824
  %84 = load i8*, i8** %arrayidx61, align 8, !dbg !17289
  %85 = load i8**, i8*** %authors.addr, align 8, !dbg !17290
  %arrayidx62 = getelementptr inbounds i8*, i8** %85, i64 4, !dbg !17290, !ctir !824
  %86 = load i8*, i8** %arrayidx62, align 8, !dbg !17290
  %87 = load i8**, i8*** %authors.addr, align 8, !dbg !17291
  %arrayidx63 = getelementptr inbounds i8*, i8** %87, i64 5, !dbg !17291, !ctir !824
  %88 = load i8*, i8** %arrayidx63, align 8, !dbg !17291
  %89 = load i8**, i8*** %authors.addr, align 8, !dbg !17292
  %arrayidx64 = getelementptr inbounds i8*, i8** %89, i64 6, !dbg !17292, !ctir !824
  %90 = load i8*, i8** %arrayidx64, align 8, !dbg !17292
  %91 = load i8**, i8*** %authors.addr, align 8, !dbg !17293
  %arrayidx65 = getelementptr inbounds i8*, i8** %91, i64 7, !dbg !17293, !ctir !824
  %92 = load i8*, i8** %arrayidx65, align 8, !dbg !17293
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* %call57, i8* %78, i8* %80, i8* %82, i8* %84, i8* %86, i8* %88, i8* %90, i8* %92), !dbg !17294
  br label %sw.epilog, !dbg !17295

sw.bb67:                                          ; preds = %if.end
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17296
  %call68 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.319, i64 0, i64 0)) #12, !dbg !17297
  %94 = load i8**, i8*** %authors.addr, align 8, !dbg !17298
  %arrayidx69 = getelementptr inbounds i8*, i8** %94, i64 0, !dbg !17298, !ctir !824
  %95 = load i8*, i8** %arrayidx69, align 8, !dbg !17298
  %96 = load i8**, i8*** %authors.addr, align 8, !dbg !17299
  %arrayidx70 = getelementptr inbounds i8*, i8** %96, i64 1, !dbg !17299, !ctir !824
  %97 = load i8*, i8** %arrayidx70, align 8, !dbg !17299
  %98 = load i8**, i8*** %authors.addr, align 8, !dbg !17300
  %arrayidx71 = getelementptr inbounds i8*, i8** %98, i64 2, !dbg !17300, !ctir !824
  %99 = load i8*, i8** %arrayidx71, align 8, !dbg !17300
  %100 = load i8**, i8*** %authors.addr, align 8, !dbg !17301
  %arrayidx72 = getelementptr inbounds i8*, i8** %100, i64 3, !dbg !17301, !ctir !824
  %101 = load i8*, i8** %arrayidx72, align 8, !dbg !17301
  %102 = load i8**, i8*** %authors.addr, align 8, !dbg !17302
  %arrayidx73 = getelementptr inbounds i8*, i8** %102, i64 4, !dbg !17302, !ctir !824
  %103 = load i8*, i8** %arrayidx73, align 8, !dbg !17302
  %104 = load i8**, i8*** %authors.addr, align 8, !dbg !17303
  %arrayidx74 = getelementptr inbounds i8*, i8** %104, i64 5, !dbg !17303, !ctir !824
  %105 = load i8*, i8** %arrayidx74, align 8, !dbg !17303
  %106 = load i8**, i8*** %authors.addr, align 8, !dbg !17304
  %arrayidx75 = getelementptr inbounds i8*, i8** %106, i64 6, !dbg !17304, !ctir !824
  %107 = load i8*, i8** %arrayidx75, align 8, !dbg !17304
  %108 = load i8**, i8*** %authors.addr, align 8, !dbg !17305
  %arrayidx76 = getelementptr inbounds i8*, i8** %108, i64 7, !dbg !17305, !ctir !824
  %109 = load i8*, i8** %arrayidx76, align 8, !dbg !17305
  %110 = load i8**, i8*** %authors.addr, align 8, !dbg !17306
  %arrayidx77 = getelementptr inbounds i8*, i8** %110, i64 8, !dbg !17306, !ctir !824
  %111 = load i8*, i8** %arrayidx77, align 8, !dbg !17306
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* %call68, i8* %95, i8* %97, i8* %99, i8* %101, i8* %103, i8* %105, i8* %107, i8* %109, i8* %111), !dbg !17307
  br label %sw.epilog, !dbg !17308

sw.default:                                       ; preds = %if.end
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17309
  %call79 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.320, i64 0, i64 0)) #12, !dbg !17310
  %113 = load i8**, i8*** %authors.addr, align 8, !dbg !17311
  %arrayidx80 = getelementptr inbounds i8*, i8** %113, i64 0, !dbg !17311, !ctir !824
  %114 = load i8*, i8** %arrayidx80, align 8, !dbg !17311
  %115 = load i8**, i8*** %authors.addr, align 8, !dbg !17312
  %arrayidx81 = getelementptr inbounds i8*, i8** %115, i64 1, !dbg !17312, !ctir !824
  %116 = load i8*, i8** %arrayidx81, align 8, !dbg !17312
  %117 = load i8**, i8*** %authors.addr, align 8, !dbg !17313
  %arrayidx82 = getelementptr inbounds i8*, i8** %117, i64 2, !dbg !17313, !ctir !824
  %118 = load i8*, i8** %arrayidx82, align 8, !dbg !17313
  %119 = load i8**, i8*** %authors.addr, align 8, !dbg !17314
  %arrayidx83 = getelementptr inbounds i8*, i8** %119, i64 3, !dbg !17314, !ctir !824
  %120 = load i8*, i8** %arrayidx83, align 8, !dbg !17314
  %121 = load i8**, i8*** %authors.addr, align 8, !dbg !17315
  %arrayidx84 = getelementptr inbounds i8*, i8** %121, i64 4, !dbg !17315, !ctir !824
  %122 = load i8*, i8** %arrayidx84, align 8, !dbg !17315
  %123 = load i8**, i8*** %authors.addr, align 8, !dbg !17316
  %arrayidx85 = getelementptr inbounds i8*, i8** %123, i64 5, !dbg !17316, !ctir !824
  %124 = load i8*, i8** %arrayidx85, align 8, !dbg !17316
  %125 = load i8**, i8*** %authors.addr, align 8, !dbg !17317
  %arrayidx86 = getelementptr inbounds i8*, i8** %125, i64 6, !dbg !17317, !ctir !824
  %126 = load i8*, i8** %arrayidx86, align 8, !dbg !17317
  %127 = load i8**, i8*** %authors.addr, align 8, !dbg !17318
  %arrayidx87 = getelementptr inbounds i8*, i8** %127, i64 7, !dbg !17318, !ctir !824
  %128 = load i8*, i8** %arrayidx87, align 8, !dbg !17318
  %129 = load i8**, i8*** %authors.addr, align 8, !dbg !17319
  %arrayidx88 = getelementptr inbounds i8*, i8** %129, i64 8, !dbg !17319, !ctir !824
  %130 = load i8*, i8** %arrayidx88, align 8, !dbg !17319
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* %call79, i8* %114, i8* %116, i8* %118, i8* %120, i8* %122, i8* %124, i8* %126, i8* %128, i8* %130), !dbg !17320
  br label %sw.epilog, !dbg !17321

sw.epilog:                                        ; preds = %sw.default, %sw.bb67, %sw.bb56, %sw.bb46, %sw.bb37, %sw.bb29, %sw.bb22, %sw.bb16, %sw.bb11, %sw.bb8, %sw.bb
  ret void, !dbg !17322
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_ar(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, i8** %authors) #4 !dbg !17323 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca i8**, align 8
  %n_authors = alloca i64, align 8, !ctir !52
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !17326, metadata !DIExpression()), !dbg !17327
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !17328, metadata !DIExpression()), !dbg !17329
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !17330, metadata !DIExpression()), !dbg !17331
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !17332, metadata !DIExpression()), !dbg !17333
  store i8** %authors, i8*** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %authors.addr, metadata !17334, metadata !DIExpression()), !dbg !17335
  call void @llvm.dbg.declare(metadata i64* %n_authors, metadata !17336, metadata !DIExpression()), !dbg !17337
  store i64 0, i64* %n_authors, align 8, !dbg !17338
  br label %for.cond, !dbg !17340

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8**, i8*** %authors.addr, align 8, !dbg !17341
  %1 = load i64, i64* %n_authors, align 8, !dbg !17343
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 %1, !dbg !17341, !ctir !824
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !17341
  %tobool = icmp ne i8* %2, null, !dbg !17344
  br i1 %tobool, label %for.body, label %for.end, !dbg !17344

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !17344

for.inc:                                          ; preds = %for.body
  %3 = load i64, i64* %n_authors, align 8, !dbg !17345
  %inc = add i64 %3, 1, !dbg !17345
  store i64 %inc, i64* %n_authors, align 8, !dbg !17345
  br label %for.cond, !dbg !17346, !llvm.loop !17347

for.end:                                          ; preds = %for.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17349
  %5 = load i8*, i8** %command_name.addr, align 8, !dbg !17350
  %6 = load i8*, i8** %package.addr, align 8, !dbg !17351
  %7 = load i8*, i8** %version.addr, align 8, !dbg !17352
  %8 = load i8**, i8*** %authors.addr, align 8, !dbg !17353
  %9 = load i64, i64* %n_authors, align 8, !dbg !17354
  call void @version_etc_arn(%struct._IO_FILE* %4, i8* %5, i8* %6, i8* %7, i8** %8, i64 %9), !dbg !17355
  ret void, !dbg !17356
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_va(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, %struct.__va_list_tag* %authors) #4 !dbg !17357 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors.addr = alloca %struct.__va_list_tag*, align 8
  %n_authors = alloca i64, align 8, !ctir !52
  %authtab = alloca [10 x i8*], align 16, !ctir !1464
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !17361, metadata !DIExpression()), !dbg !17362
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !17363, metadata !DIExpression()), !dbg !17364
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !17365, metadata !DIExpression()), !dbg !17366
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !17367, metadata !DIExpression()), !dbg !17368
  store %struct.__va_list_tag* %authors, %struct.__va_list_tag** %authors.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %authors.addr, metadata !17369, metadata !DIExpression()), !dbg !17370
  call void @llvm.dbg.declare(metadata i64* %n_authors, metadata !17371, metadata !DIExpression()), !dbg !17372
  call void @llvm.dbg.declare(metadata [10 x i8*]* %authtab, metadata !17373, metadata !DIExpression()), !dbg !17374
  store i64 0, i64* %n_authors, align 8, !dbg !17375
  br label %for.cond, !dbg !17377

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n_authors, align 8, !dbg !17378
  %cmp = icmp ult i64 %0, 10, !dbg !17380
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !17381

land.rhs:                                         ; preds = %for.cond
  %1 = load %struct.__va_list_tag*, %struct.__va_list_tag** %authors.addr, align 8, !dbg !17382
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 0, !dbg !17382
  %gp_offset = load i32, i32* %gp_offset_p, align 8, !dbg !17382
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !17382
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !17382

vaarg.in_reg:                                     ; preds = %land.rhs
  %2 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 3, !dbg !17382
  %reg_save_area = load i8*, i8** %2, align 8, !dbg !17382
  %3 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !17382
  %4 = bitcast i8* %3 to i8**, !dbg !17382
  %5 = add i32 %gp_offset, 8, !dbg !17382
  store i32 %5, i32* %gp_offset_p, align 8, !dbg !17382
  br label %vaarg.end, !dbg !17382

vaarg.in_mem:                                     ; preds = %land.rhs
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %1, i32 0, i32 2, !dbg !17382
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !17382
  %6 = bitcast i8* %overflow_arg_area to i8**, !dbg !17382
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !17382
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !17382
  br label %vaarg.end, !dbg !17382

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %4, %vaarg.in_reg ], [ %6, %vaarg.in_mem ], !dbg !17382
  %7 = load i8*, i8** %vaarg.addr, align 8, !dbg !17382
  %8 = load i64, i64* %n_authors, align 8, !dbg !17383
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 %8, !dbg !17384, !ctir !1464
  store i8* %7, i8** %arrayidx, align 8, !dbg !17385
  %cmp1 = icmp ne i8* %7, null, !dbg !17386
  br label %land.end

land.end:                                         ; preds = %vaarg.end, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp1, %vaarg.end ], !dbg !17387
  br i1 %9, label %for.body, label %for.end, !dbg !17388

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !17388

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %n_authors, align 8, !dbg !17389
  %inc = add i64 %10, 1, !dbg !17389
  store i64 %inc, i64* %n_authors, align 8, !dbg !17389
  br label %for.cond, !dbg !17390, !llvm.loop !17391

for.end:                                          ; preds = %land.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17393
  %12 = load i8*, i8** %command_name.addr, align 8, !dbg !17394
  %13 = load i8*, i8** %package.addr, align 8, !dbg !17395
  %14 = load i8*, i8** %version.addr, align 8, !dbg !17396
  %arraydecay = getelementptr inbounds [10 x i8*], [10 x i8*]* %authtab, i64 0, i64 0, !dbg !17397, !ctir !1464
  %15 = load i64, i64* %n_authors, align 8, !dbg !17398
  call void @version_etc_arn(%struct._IO_FILE* %11, i8* %12, i8* %13, i8* %14, i8** %arraydecay, i64 %15), !dbg !17399
  ret void, !dbg !17400
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc(%struct._IO_FILE* %stream, i8* %command_name, i8* %package, i8* %version, ...) #4 !dbg !17401 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %command_name.addr = alloca i8*, align 8
  %package.addr = alloca i8*, align 8
  %version.addr = alloca i8*, align 8
  %authors = alloca [1 x %struct.__va_list_tag], align 16, !ctir !1465
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !17404, metadata !DIExpression()), !dbg !17405
  store i8* %command_name, i8** %command_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %command_name.addr, metadata !17406, metadata !DIExpression()), !dbg !17407
  store i8* %package, i8** %package.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %package.addr, metadata !17408, metadata !DIExpression()), !dbg !17409
  store i8* %version, i8** %version.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %version.addr, metadata !17410, metadata !DIExpression()), !dbg !17411
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %authors, metadata !17412, metadata !DIExpression()), !dbg !17413
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !17414, !ctir !1465
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !17414
  call void @llvm.va_start(i8* %arraydecay1), !dbg !17414
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !17415
  %1 = load i8*, i8** %command_name.addr, align 8, !dbg !17416
  %2 = load i8*, i8** %package.addr, align 8, !dbg !17417
  %3 = load i8*, i8** %version.addr, align 8, !dbg !17418
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !17419, !ctir !1465
  call void @version_etc_va(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, %struct.__va_list_tag* %arraydecay2), !dbg !17420
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %authors, i64 0, i64 0, !dbg !17421, !ctir !1465
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !17421
  call void @llvm.va_end(i8* %arraydecay34), !dbg !17421
  ret void, !dbg !17422
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #12

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @emit_bug_reporting_address() #4 !dbg !17423 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !17424
  %call = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.308, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !17424
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.323, i64 0, i64 0)) #12, !dbg !17425
  %call2 = call i32 (i8*, ...) @printf(i8* %call1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17.324, i64 0, i64 0)), !dbg !17426
  %call3 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18.325, i64 0, i64 0)) #12, !dbg !17427
  %call4 = call i32 (i8*, ...) @printf(i8* %call3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19.326, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20.327, i64 0, i64 0)), !dbg !17428
  %call5 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21.328, i64 0, i64 0)) #12, !dbg !17429
  %call6 = call i32 (i8*, ...) @printf(i8* %call5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.22.329, i64 0, i64 0)), !dbg !17430
  ret void, !dbg !17431
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xnmalloc(i64 %n, i64 %s) #4 !dbg !17432 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17436, metadata !DIExpression()), !dbg !17437
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17438, metadata !DIExpression()), !dbg !17439
  %0 = load i64, i64* %s.addr, align 8, !dbg !17440
  %div = udiv i64 9223372036854775807, %0, !dbg !17440
  %1 = load i64, i64* %n.addr, align 8, !dbg !17440
  %cmp = icmp ult i64 %div, %1, !dbg !17440
  br i1 %cmp, label %if.then, label %if.end, !dbg !17442

if.then:                                          ; preds = %entry
  call void @xalloc_die() #15, !dbg !17443
  unreachable, !dbg !17443

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !17444
  %3 = load i64, i64* %s.addr, align 8, !dbg !17445
  %mul = mul i64 %2, %3, !dbg !17446
  %call = call noalias i8* @xmalloc(i64 %mul), !dbg !17447
  ret i8* %call, !dbg !17448
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xmalloc(i64 %n) #4 !dbg !17449 {
entry:
  %n.addr = alloca i64, align 8
  %p = alloca i8*, align 8, !ctir !47
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17451, metadata !DIExpression()), !dbg !17452
  call void @llvm.dbg.declare(metadata i8** %p, metadata !17453, metadata !DIExpression()), !dbg !17454
  %0 = load i64, i64* %n.addr, align 8, !dbg !17455
  %call = call noalias i8* @malloc(i64 %0) #12, !dbg !17456
  store i8* %call, i8** %p, align 8, !dbg !17454
  %1 = load i8*, i8** %p, align 8, !dbg !17457
  %tobool = icmp ne i8* %1, null, !dbg !17457
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !17459

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !17460
  %cmp = icmp ne i64 %2, 0, !dbg !17461
  br i1 %cmp, label %if.then, label %if.end, !dbg !17462

if.then:                                          ; preds = %land.lhs.true
  call void @xalloc_die() #15, !dbg !17463
  unreachable, !dbg !17463

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8*, i8** %p, align 8, !dbg !17464
  ret i8* %3, !dbg !17465
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xnrealloc(i8* %p, i64 %n, i64 %s) #4 !dbg !17466 {
entry:
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17469, metadata !DIExpression()), !dbg !17470
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17471, metadata !DIExpression()), !dbg !17472
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17473, metadata !DIExpression()), !dbg !17474
  %0 = load i64, i64* %s.addr, align 8, !dbg !17475
  %div = udiv i64 9223372036854775807, %0, !dbg !17475
  %1 = load i64, i64* %n.addr, align 8, !dbg !17475
  %cmp = icmp ult i64 %div, %1, !dbg !17475
  br i1 %cmp, label %if.then, label %if.end, !dbg !17477

if.then:                                          ; preds = %entry
  call void @xalloc_die() #15, !dbg !17478
  unreachable, !dbg !17478

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %p.addr, align 8, !dbg !17479
  %3 = load i64, i64* %n.addr, align 8, !dbg !17480
  %4 = load i64, i64* %s.addr, align 8, !dbg !17481
  %mul = mul i64 %3, %4, !dbg !17482
  %call = call i8* @xrealloc(i8* %2, i64 %mul), !dbg !17483
  ret i8* %call, !dbg !17484
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xrealloc(i8* %p, i64 %n) #4 !dbg !17485 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17486, metadata !DIExpression()), !dbg !17487
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17488, metadata !DIExpression()), !dbg !17489
  %0 = load i64, i64* %n.addr, align 8, !dbg !17490
  %tobool = icmp ne i64 %0, 0, !dbg !17490
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !17492

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !dbg !17493
  %tobool1 = icmp ne i8* %1, null, !dbg !17493
  br i1 %tobool1, label %if.then, label %if.end, !dbg !17494

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** %p.addr, align 8, !dbg !17495
  call void @free(i8* %2) #12, !dbg !17497
  store i8* null, i8** %retval, align 8, !dbg !17498
  br label %return, !dbg !17498

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8*, i8** %p.addr, align 8, !dbg !17499
  %4 = load i64, i64* %n.addr, align 8, !dbg !17500
  %call = call i8* @realloc(i8* %3, i64 %4) #12, !dbg !17501
  store i8* %call, i8** %p.addr, align 8, !dbg !17502
  %5 = load i8*, i8** %p.addr, align 8, !dbg !17503
  %tobool2 = icmp ne i8* %5, null, !dbg !17503
  br i1 %tobool2, label %if.end6, label %land.lhs.true3, !dbg !17505

land.lhs.true3:                                   ; preds = %if.end
  %6 = load i64, i64* %n.addr, align 8, !dbg !17506
  %tobool4 = icmp ne i64 %6, 0, !dbg !17506
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !17507

if.then5:                                         ; preds = %land.lhs.true3
  call void @xalloc_die() #15, !dbg !17508
  unreachable, !dbg !17508

if.end6:                                          ; preds = %land.lhs.true3, %if.end
  %7 = load i8*, i8** %p.addr, align 8, !dbg !17509
  store i8* %7, i8** %retval, align 8, !dbg !17510
  br label %return, !dbg !17510

return:                                           ; preds = %if.end6, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !17511
  ret i8* %8, !dbg !17511
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @x2nrealloc(i8* %p, i64* %pn, i64 %s) #4 !dbg !17512 {
entry:
  %p.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  %s.addr = alloca i64, align 8
  %n = alloca i64, align 8, !ctir !52
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17515, metadata !DIExpression()), !dbg !17516
  store i64* %pn, i64** %pn.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pn.addr, metadata !17517, metadata !DIExpression()), !dbg !17518
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17519, metadata !DIExpression()), !dbg !17520
  call void @llvm.dbg.declare(metadata i64* %n, metadata !17521, metadata !DIExpression()), !dbg !17522
  %0 = load i64*, i64** %pn.addr, align 8, !dbg !17523
  %1 = load i64, i64* %0, align 8, !dbg !17524, !ctir !52
  store i64 %1, i64* %n, align 8, !dbg !17522
  %2 = load i8*, i8** %p.addr, align 8, !dbg !17525
  %tobool = icmp ne i8* %2, null, !dbg !17525
  br i1 %tobool, label %if.else, label %if.then, !dbg !17527

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %n, align 8, !dbg !17528
  %tobool1 = icmp ne i64 %3, 0, !dbg !17528
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !17531

if.then2:                                         ; preds = %if.then
  %4 = load i64, i64* %s.addr, align 8, !dbg !17532
  %div = udiv i64 128, %4, !dbg !17534
  store i64 %div, i64* %n, align 8, !dbg !17535
  %5 = load i64, i64* %n, align 8, !dbg !17536
  %tobool3 = icmp ne i64 %5, 0, !dbg !17537
  %lnot = xor i1 %tobool3, true, !dbg !17537
  %lnot.ext = zext i1 %lnot to i32, !dbg !17537
  %conv = sext i32 %lnot.ext to i64, !dbg !17537
  %6 = load i64, i64* %n, align 8, !dbg !17538
  %add = add i64 %6, %conv, !dbg !17538
  store i64 %add, i64* %n, align 8, !dbg !17538
  br label %if.end, !dbg !17539

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load i64, i64* %s.addr, align 8, !dbg !17540
  %div4 = udiv i64 9223372036854775807, %7, !dbg !17540
  %8 = load i64, i64* %n, align 8, !dbg !17540
  %cmp = icmp ult i64 %div4, %8, !dbg !17540
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !17542

if.then6:                                         ; preds = %if.end
  call void @xalloc_die() #15, !dbg !17543
  unreachable, !dbg !17543

if.end7:                                          ; preds = %if.end
  br label %if.end16, !dbg !17544

if.else:                                          ; preds = %entry
  %9 = load i64, i64* %s.addr, align 8, !dbg !17545
  %div8 = udiv i64 6148914691236517204, %9, !dbg !17548
  %10 = load i64, i64* %n, align 8, !dbg !17549
  %cmp9 = icmp ule i64 %div8, %10, !dbg !17550
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !17551

if.then11:                                        ; preds = %if.else
  call void @xalloc_die() #15, !dbg !17552
  unreachable, !dbg !17552

if.end12:                                         ; preds = %if.else
  %11 = load i64, i64* %n, align 8, !dbg !17553
  %div13 = udiv i64 %11, 2, !dbg !17554
  %add14 = add i64 %div13, 1, !dbg !17555
  %12 = load i64, i64* %n, align 8, !dbg !17556
  %add15 = add i64 %12, %add14, !dbg !17556
  store i64 %add15, i64* %n, align 8, !dbg !17556
  br label %if.end16

if.end16:                                         ; preds = %if.end12, %if.end7
  %13 = load i64, i64* %n, align 8, !dbg !17557
  %14 = load i64*, i64** %pn.addr, align 8, !dbg !17558
  store i64 %13, i64* %14, align 8, !dbg !17559, !ctir !52
  %15 = load i8*, i8** %p.addr, align 8, !dbg !17560
  %16 = load i64, i64* %n, align 8, !dbg !17561
  %17 = load i64, i64* %s.addr, align 8, !dbg !17562
  %mul = mul i64 %16, %17, !dbg !17563
  %call = call i8* @xrealloc(i8* %15, i64 %mul), !dbg !17564
  ret i8* %call, !dbg !17565
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xcharalloc(i64 %n) #4 !dbg !17566 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17569, metadata !DIExpression()), !dbg !17570
  %0 = load i64, i64* %n.addr, align 8, !dbg !17571
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !17571
  ret i8* %call, !dbg !17572
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @x2realloc(i8* %p, i64* %pn) #4 !dbg !17573 {
entry:
  %p.addr = alloca i8*, align 8
  %pn.addr = alloca i64*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17576, metadata !DIExpression()), !dbg !17577
  store i64* %pn, i64** %pn.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pn.addr, metadata !17578, metadata !DIExpression()), !dbg !17579
  %0 = load i8*, i8** %p.addr, align 8, !dbg !17580
  %1 = load i64*, i64** %pn.addr, align 8, !dbg !17581
  %call = call i8* @x2nrealloc(i8* %0, i64* %1, i64 1), !dbg !17582
  ret i8* %call, !dbg !17583
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xzalloc(i64 %s) #4 !dbg !17584 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17585, metadata !DIExpression()), !dbg !17586
  %0 = load i64, i64* %s.addr, align 8, !dbg !17587
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !17588
  %1 = load i64, i64* %s.addr, align 8, !dbg !17589
  call void @llvm.memset.p0i8.i64(i8* align 1 %call, i8 0, i64 %1, i1 false), !dbg !17590
  ret i8* %call, !dbg !17591
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xcalloc(i64 %n, i64 %s) #4 !dbg !17592 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %p = alloca i8*, align 8, !ctir !47
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !17593, metadata !DIExpression()), !dbg !17594
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17595, metadata !DIExpression()), !dbg !17596
  call void @llvm.dbg.declare(metadata i8** %p, metadata !17597, metadata !DIExpression()), !dbg !17598
  %0 = load i64, i64* %s.addr, align 8, !dbg !17599
  %div = udiv i64 9223372036854775807, %0, !dbg !17599
  %1 = load i64, i64* %n.addr, align 8, !dbg !17599
  %cmp = icmp ult i64 %div, %1, !dbg !17599
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !17601

lor.lhs.false:                                    ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8, !dbg !17602
  %3 = load i64, i64* %s.addr, align 8, !dbg !17603
  %call = call noalias i8* @calloc(i64 %2, i64 %3) #12, !dbg !17604
  store i8* %call, i8** %p, align 8, !dbg !17605
  %tobool = icmp ne i8* %call, null, !dbg !17605
  br i1 %tobool, label %if.end, label %if.then, !dbg !17606

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @xalloc_die() #15, !dbg !17607
  unreachable, !dbg !17607

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %p, align 8, !dbg !17608
  ret i8* %4, !dbg !17609
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @xmemdup(i8* %p, i64 %s) #4 !dbg !17610 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17613, metadata !DIExpression()), !dbg !17614
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !17615, metadata !DIExpression()), !dbg !17616
  %0 = load i64, i64* %s.addr, align 8, !dbg !17617
  %call = call noalias i8* @xmalloc(i64 %0), !dbg !17618
  %1 = load i8*, i8** %p.addr, align 8, !dbg !17619
  %2 = load i64, i64* %s.addr, align 8, !dbg !17620
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %call, i8* align 1 %1, i64 %2, i1 false), !dbg !17621
  ret i8* %call, !dbg !17622
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias i8* @xstrdup(i8* %string) #4 !dbg !17623 {
entry:
  %string.addr = alloca i8*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !17624, metadata !DIExpression()), !dbg !17625
  %0 = load i8*, i8** %string.addr, align 8, !dbg !17626
  %1 = load i8*, i8** %string.addr, align 8, !dbg !17627
  %call = call i64 @strlen(i8* %1) #14, !dbg !17628
  %add = add i64 %call, 1, !dbg !17629
  %call1 = call i8* @xmemdup(i8* %0, i64 %add), !dbg !17630
  ret i8* %call1, !dbg !17631
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xalloc_die() #0 !dbg !17632 {
entry:
  %0 = load volatile i32, i32* @exit_failure, align 4, !dbg !17634
  %call = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.348, i64 0, i64 0)) #12, !dbg !17635
  call void (i32, i32, i8*, ...) @error(i32 %0, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.349, i64 0, i64 0), i8* %call), !dbg !17636
  call void @abort() #13, !dbg !17637
  unreachable, !dbg !17637
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xmemcoll(i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #4 !dbg !17638 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4, !ctir !5
  %collation_errno = alloca i32, align 4, !ctir !5
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !17642, metadata !DIExpression()), !dbg !17643
  store i64 %s1len, i64* %s1len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1len.addr, metadata !17644, metadata !DIExpression()), !dbg !17645
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !17646, metadata !DIExpression()), !dbg !17647
  store i64 %s2len, i64* %s2len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2len.addr, metadata !17648, metadata !DIExpression()), !dbg !17649
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !17650, metadata !DIExpression()), !dbg !17651
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !17652
  %1 = load i64, i64* %s1len.addr, align 8, !dbg !17653
  %2 = load i8*, i8** %s2.addr, align 8, !dbg !17654
  %3 = load i64, i64* %s2len.addr, align 8, !dbg !17655
  %call = call i32 @memcoll(i8* %0, i64 %1, i8* %2, i64 %3), !dbg !17656
  store i32 %call, i32* %diff, align 4, !dbg !17651
  call void @llvm.dbg.declare(metadata i32* %collation_errno, metadata !17657, metadata !DIExpression()), !dbg !17658
  %call1 = call i32* @__errno_location() #16, !dbg !17659
  %4 = load i32, i32* %call1, align 4, !dbg !17659, !ctir !5
  store i32 %4, i32* %collation_errno, align 4, !dbg !17658
  %5 = load i32, i32* %collation_errno, align 4, !dbg !17660
  %tobool = icmp ne i32 %5, 0, !dbg !17660
  br i1 %tobool, label %if.then, label %if.end, !dbg !17662

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %collation_errno, align 4, !dbg !17663
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !17664
  %8 = load i64, i64* %s1len.addr, align 8, !dbg !17665
  %9 = load i8*, i8** %s2.addr, align 8, !dbg !17666
  %10 = load i64, i64* %s2len.addr, align 8, !dbg !17667
  call void @collate_error(i32 %6, i8* %7, i64 %8, i8* %9, i64 %10), !dbg !17668
  br label %if.end, !dbg !17668

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, i32* %diff, align 4, !dbg !17669
  ret i32 %11, !dbg !17670
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @collate_error(i32 %collation_errno, i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #4 !dbg !17671 {
entry:
  %collation_errno.addr = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  store i32 %collation_errno, i32* %collation_errno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %collation_errno.addr, metadata !17674, metadata !DIExpression()), !dbg !17675
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !17676, metadata !DIExpression()), !dbg !17677
  store i64 %s1len, i64* %s1len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1len.addr, metadata !17678, metadata !DIExpression()), !dbg !17679
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !17680, metadata !DIExpression()), !dbg !17681
  store i64 %s2len, i64* %s2len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2len.addr, metadata !17682, metadata !DIExpression()), !dbg !17683
  %0 = load i32, i32* %collation_errno.addr, align 4, !dbg !17684
  %call = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.350, i64 0, i64 0)) #12, !dbg !17685
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %0, i8* %call), !dbg !17686
  %call1 = call i8* @gettext(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1.351, i64 0, i64 0)) #12, !dbg !17687
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %call1), !dbg !17688
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !17689
  %call2 = call i8* @gettext(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.352, i64 0, i64 0)) #12, !dbg !17690
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !17691
  %3 = load i64, i64* %s1len.addr, align 8, !dbg !17692
  %call3 = call i8* @quotearg_n_style_mem(i32 0, i32 8, i8* %2, i64 %3), !dbg !17693
  %4 = load i8*, i8** %s2.addr, align 8, !dbg !17694
  %5 = load i64, i64* %s2len.addr, align 8, !dbg !17695
  %call4 = call i8* @quotearg_n_style_mem(i32 1, i32 8, i8* %4, i64 %5), !dbg !17696
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* %call2, i8* %call3, i8* %call4), !dbg !17697
  ret void, !dbg !17698
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xmemcoll0(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #4 !dbg !17699 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4, !ctir !5
  %collation_errno = alloca i32, align 4, !ctir !5
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !17700, metadata !DIExpression()), !dbg !17701
  store i64 %s1size, i64* %s1size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1size.addr, metadata !17702, metadata !DIExpression()), !dbg !17703
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !17704, metadata !DIExpression()), !dbg !17705
  store i64 %s2size, i64* %s2size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2size.addr, metadata !17706, metadata !DIExpression()), !dbg !17707
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !17708, metadata !DIExpression()), !dbg !17709
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !17710
  %1 = load i64, i64* %s1size.addr, align 8, !dbg !17711
  %2 = load i8*, i8** %s2.addr, align 8, !dbg !17712
  %3 = load i64, i64* %s2size.addr, align 8, !dbg !17713
  %call = call i32 @memcoll0(i8* %0, i64 %1, i8* %2, i64 %3), !dbg !17714
  store i32 %call, i32* %diff, align 4, !dbg !17709
  call void @llvm.dbg.declare(metadata i32* %collation_errno, metadata !17715, metadata !DIExpression()), !dbg !17716
  %call1 = call i32* @__errno_location() #16, !dbg !17717
  %4 = load i32, i32* %call1, align 4, !dbg !17717, !ctir !5
  store i32 %4, i32* %collation_errno, align 4, !dbg !17716
  %5 = load i32, i32* %collation_errno, align 4, !dbg !17718
  %tobool = icmp ne i32 %5, 0, !dbg !17718
  br i1 %tobool, label %if.then, label %if.end, !dbg !17720

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %collation_errno, align 4, !dbg !17721
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !17722
  %8 = load i64, i64* %s1size.addr, align 8, !dbg !17723
  %sub = sub i64 %8, 1, !dbg !17724
  %9 = load i8*, i8** %s2.addr, align 8, !dbg !17725
  %10 = load i64, i64* %s2size.addr, align 8, !dbg !17726
  %sub2 = sub i64 %10, 1, !dbg !17727
  call void @collate_error(i32 %6, i8* %7, i64 %sub, i8* %9, i64 %sub2), !dbg !17728
  br label %if.end, !dbg !17728

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, i32* %diff, align 4, !dbg !17729
  ret i32 %11, !dbg !17730
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xnanosleep(double %seconds) #4 !dbg !17731 {
entry:
  %retval = alloca i32, align 4
  %seconds.addr = alloca double, align 8
  %ts_sleep = alloca %struct.timespec, align 8, !ctir !17735
  store double %seconds, double* %seconds.addr, align 8
  call void @llvm.dbg.declare(metadata double* %seconds.addr, metadata !17739, metadata !DIExpression()), !dbg !17740
  call void @llvm.dbg.declare(metadata %struct.timespec* %ts_sleep, metadata !17741, metadata !DIExpression()), !dbg !17742
  %0 = load double, double* %seconds.addr, align 8, !dbg !17743
  %call = call { i64, i64 } @dtotimespec(double %0) #16, !dbg !17744
  %1 = bitcast %struct.timespec* %ts_sleep to { i64, i64 }*, !dbg !17744
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !17744
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !17744
  store i64 %3, i64* %2, align 8, !dbg !17744
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !17744
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !17744
  store i64 %5, i64* %4, align 8, !dbg !17744
  br label %for.cond, !dbg !17745

for.cond:                                         ; preds = %if.end8, %entry
  %call1 = call i32* @__errno_location() #16, !dbg !17746
  store i32 0, i32* %call1, align 4, !dbg !17750, !ctir !5
  %call2 = call i32 @rpl_nanosleep(%struct.timespec* %ts_sleep, %struct.timespec* null), !dbg !17751
  %cmp = icmp eq i32 %call2, 0, !dbg !17753
  br i1 %cmp, label %if.then, label %if.end, !dbg !17754

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !17755

if.end:                                           ; preds = %for.cond
  %call3 = call i32* @__errno_location() #16, !dbg !17756
  %6 = load i32, i32* %call3, align 4, !dbg !17756, !ctir !5
  %cmp4 = icmp ne i32 %6, 4, !dbg !17758
  br i1 %cmp4, label %land.lhs.true, label %if.end8, !dbg !17759

land.lhs.true:                                    ; preds = %if.end
  %call5 = call i32* @__errno_location() #16, !dbg !17760
  %7 = load i32, i32* %call5, align 4, !dbg !17760, !ctir !5
  %cmp6 = icmp ne i32 %7, 0, !dbg !17761
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !17762

if.then7:                                         ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !17763
  br label %return, !dbg !17763

if.end8:                                          ; preds = %land.lhs.true, %if.end
  br label %for.cond, !dbg !17764, !llvm.loop !17765

for.end:                                          ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !17768
  br label %return, !dbg !17768

return:                                           ; preds = %for.end, %if.then7
  %8 = load i32, i32* %retval, align 4, !dbg !17769
  ret i32 %8, !dbg !17769
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoul(i8* %s, i8** %ptr, i32 %strtol_base, i64* %val, i8* %valid_suffixes) #4 !dbg !17770 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %ptr.addr = alloca i8**, align 8
  %strtol_base.addr = alloca i32, align 4
  %val.addr = alloca i64*, align 8
  %valid_suffixes.addr = alloca i8*, align 8
  %t_ptr = alloca i8*, align 8, !ctir !7
  %p = alloca i8**, align 8, !ctir !178
  %tmp = alloca i64, align 8, !ctir !54
  %err = alloca i32, align 4, !ctir !1528
  %q = alloca i8*, align 8, !ctir !90
  %ch = alloca i8, align 1, !ctir !535
  %base = alloca i32, align 4, !ctir !5
  %suffixes = alloca i32, align 4, !ctir !5
  %overflow = alloca i32, align 4, !ctir !1528
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !17775, metadata !DIExpression()), !dbg !17776
  store i8** %ptr, i8*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %ptr.addr, metadata !17777, metadata !DIExpression()), !dbg !17778
  store i32 %strtol_base, i32* %strtol_base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %strtol_base.addr, metadata !17779, metadata !DIExpression()), !dbg !17780
  store i64* %val, i64** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %val.addr, metadata !17781, metadata !DIExpression()), !dbg !17782
  store i8* %valid_suffixes, i8** %valid_suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %valid_suffixes.addr, metadata !17783, metadata !DIExpression()), !dbg !17784
  call void @llvm.dbg.declare(metadata i8** %t_ptr, metadata !17785, metadata !DIExpression()), !dbg !17786
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !17787, metadata !DIExpression()), !dbg !17788
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !17789, metadata !DIExpression()), !dbg !17790
  call void @llvm.dbg.declare(metadata i32* %err, metadata !17791, metadata !DIExpression()), !dbg !17792
  store i32 0, i32* %err, align 4, !dbg !17792
  %0 = load i32, i32* %strtol_base.addr, align 4, !dbg !17793
  %cmp = icmp sle i32 0, %0, !dbg !17793
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !17793

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %strtol_base.addr, align 4, !dbg !17793
  %cmp1 = icmp sle i32 %1, 36, !dbg !17793
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !17793

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !17793

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.359, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.360, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #13, !dbg !17793
  unreachable, !dbg !17793

2:                                                ; No predecessors!
  br label %cond.end, !dbg !17793

cond.end:                                         ; preds = %2, %cond.true
  %3 = load i8**, i8*** %ptr.addr, align 8, !dbg !17794
  %tobool = icmp ne i8** %3, null, !dbg !17794
  br i1 %tobool, label %cond.true2, label %cond.false3, !dbg !17794

cond.true2:                                       ; preds = %cond.end
  %4 = load i8**, i8*** %ptr.addr, align 8, !dbg !17795
  br label %cond.end4, !dbg !17794

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !17794

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond = phi i8** [ %4, %cond.true2 ], [ %t_ptr, %cond.false3 ], !dbg !17794
  store i8** %cond, i8*** %p, align 8, !dbg !17796
  %call = call i32* @__errno_location() #16, !dbg !17797
  store i32 0, i32* %call, align 4, !dbg !17798, !ctir !5
  call void @llvm.dbg.declare(metadata i8** %q, metadata !17799, metadata !DIExpression()), !dbg !17802
  %5 = load i8*, i8** %s.addr, align 8, !dbg !17803
  store i8* %5, i8** %q, align 8, !dbg !17802
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !17804, metadata !DIExpression()), !dbg !17805
  %6 = load i8*, i8** %q, align 8, !dbg !17806
  %7 = load i8, i8* %6, align 1, !dbg !17807, !ctir !91
  store i8 %7, i8* %ch, align 1, !dbg !17805
  br label %while.cond, !dbg !17808

while.cond:                                       ; preds = %while.body, %cond.end4
  %call5 = call i16** @__ctype_b_loc() #16, !dbg !17809
  %8 = load i16*, i16** %call5, align 8, !dbg !17809, !ctir !451
  %9 = load i8, i8* %ch, align 1, !dbg !17809
  %conv = zext i8 %9 to i32, !dbg !17809
  %idxprom = sext i32 %conv to i64, !dbg !17809
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 %idxprom, !dbg !17809, !ctir !451
  %10 = load i16, i16* %arrayidx, align 2, !dbg !17809
  %conv6 = zext i16 %10 to i32, !dbg !17809
  %and = and i32 %conv6, 8192, !dbg !17809
  %tobool7 = icmp ne i32 %and, 0, !dbg !17808
  br i1 %tobool7, label %while.body, label %while.end, !dbg !17808

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %q, align 8, !dbg !17810
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !17810, !ctir !91
  store i8* %incdec.ptr, i8** %q, align 8, !dbg !17810
  %12 = load i8, i8* %incdec.ptr, align 1, !dbg !17811, !ctir !91
  store i8 %12, i8* %ch, align 1, !dbg !17812
  br label %while.cond, !dbg !17808, !llvm.loop !17813

while.end:                                        ; preds = %while.cond
  %13 = load i8, i8* %ch, align 1, !dbg !17815
  %conv8 = zext i8 %13 to i32, !dbg !17815
  %cmp9 = icmp eq i32 %conv8, 45, !dbg !17817
  br i1 %cmp9, label %if.then, label %if.end, !dbg !17818

if.then:                                          ; preds = %while.end
  store i32 4, i32* %retval, align 4, !dbg !17819
  br label %return, !dbg !17819

if.end:                                           ; preds = %while.end
  %14 = load i8*, i8** %s.addr, align 8, !dbg !17820
  %15 = load i8**, i8*** %p, align 8, !dbg !17821
  %16 = load i32, i32* %strtol_base.addr, align 4, !dbg !17822
  %call11 = call i64 @strtoul(i8* %14, i8** %15, i32 %16) #12, !dbg !17823
  store i64 %call11, i64* %tmp, align 8, !dbg !17824
  %17 = load i8**, i8*** %p, align 8, !dbg !17825
  %18 = load i8*, i8** %17, align 8, !dbg !17827, !ctir !7
  %19 = load i8*, i8** %s.addr, align 8, !dbg !17828
  %cmp12 = icmp eq i8* %18, %19, !dbg !17829
  br i1 %cmp12, label %if.then14, label %if.else25, !dbg !17830

if.then14:                                        ; preds = %if.end
  %20 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !17831
  %tobool15 = icmp ne i8* %20, null, !dbg !17831
  br i1 %tobool15, label %land.lhs.true16, label %if.else, !dbg !17834

land.lhs.true16:                                  ; preds = %if.then14
  %21 = load i8**, i8*** %p, align 8, !dbg !17835
  %22 = load i8*, i8** %21, align 8, !dbg !17836, !ctir !7
  %23 = load i8, i8* %22, align 1, !dbg !17837, !ctir !8
  %conv17 = sext i8 %23 to i32, !dbg !17837
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !17837
  br i1 %tobool18, label %land.lhs.true19, label %if.else, !dbg !17838

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %24 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !17839
  %25 = load i8**, i8*** %p, align 8, !dbg !17840
  %26 = load i8*, i8** %25, align 8, !dbg !17841, !ctir !7
  %27 = load i8, i8* %26, align 1, !dbg !17842, !ctir !8
  %conv20 = sext i8 %27 to i32, !dbg !17842
  %call21 = call i8* @strchr(i8* %24, i32 %conv20) #14, !dbg !17843
  %tobool22 = icmp ne i8* %call21, null, !dbg !17843
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !17844

if.then23:                                        ; preds = %land.lhs.true19
  store i64 1, i64* %tmp, align 8, !dbg !17845
  br label %if.end24, !dbg !17846

if.else:                                          ; preds = %land.lhs.true19, %land.lhs.true16, %if.then14
  store i32 4, i32* %retval, align 4, !dbg !17847
  br label %return, !dbg !17847

if.end24:                                         ; preds = %if.then23
  br label %if.end36, !dbg !17848

if.else25:                                        ; preds = %if.end
  %call26 = call i32* @__errno_location() #16, !dbg !17849
  %28 = load i32, i32* %call26, align 4, !dbg !17849, !ctir !5
  %cmp27 = icmp ne i32 %28, 0, !dbg !17851
  br i1 %cmp27, label %if.then29, label %if.end35, !dbg !17852

if.then29:                                        ; preds = %if.else25
  %call30 = call i32* @__errno_location() #16, !dbg !17853
  %29 = load i32, i32* %call30, align 4, !dbg !17853, !ctir !5
  %cmp31 = icmp ne i32 %29, 34, !dbg !17856
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !17857

if.then33:                                        ; preds = %if.then29
  store i32 4, i32* %retval, align 4, !dbg !17858
  br label %return, !dbg !17858

if.end34:                                         ; preds = %if.then29
  store i32 1, i32* %err, align 4, !dbg !17859
  br label %if.end35, !dbg !17860

if.end35:                                         ; preds = %if.end34, %if.else25
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end24
  %30 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !17861
  %tobool37 = icmp ne i8* %30, null, !dbg !17861
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !17863

if.then38:                                        ; preds = %if.end36
  %31 = load i64, i64* %tmp, align 8, !dbg !17864
  %32 = load i64*, i64** %val.addr, align 8, !dbg !17866
  store i64 %31, i64* %32, align 8, !dbg !17867, !ctir !54
  %33 = load i32, i32* %err, align 4, !dbg !17868
  store i32 %33, i32* %retval, align 4, !dbg !17869
  br label %return, !dbg !17869

if.end39:                                         ; preds = %if.end36
  %34 = load i8**, i8*** %p, align 8, !dbg !17870
  %35 = load i8*, i8** %34, align 8, !dbg !17872, !ctir !7
  %36 = load i8, i8* %35, align 1, !dbg !17873, !ctir !8
  %conv40 = sext i8 %36 to i32, !dbg !17873
  %cmp41 = icmp ne i32 %conv40, 0, !dbg !17874
  br i1 %cmp41, label %if.then43, label %if.end98, !dbg !17875

if.then43:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata i32* %base, metadata !17876, metadata !DIExpression()), !dbg !17878
  store i32 1024, i32* %base, align 4, !dbg !17878
  call void @llvm.dbg.declare(metadata i32* %suffixes, metadata !17879, metadata !DIExpression()), !dbg !17880
  store i32 1, i32* %suffixes, align 4, !dbg !17880
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !17881, metadata !DIExpression()), !dbg !17882
  %37 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !17883
  %38 = load i8**, i8*** %p, align 8, !dbg !17885
  %39 = load i8*, i8** %38, align 8, !dbg !17886, !ctir !7
  %40 = load i8, i8* %39, align 1, !dbg !17887, !ctir !8
  %conv44 = sext i8 %40 to i32, !dbg !17887
  %call45 = call i8* @strchr(i8* %37, i32 %conv44) #14, !dbg !17888
  %tobool46 = icmp ne i8* %call45, null, !dbg !17888
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !17889

if.then47:                                        ; preds = %if.then43
  %41 = load i64, i64* %tmp, align 8, !dbg !17890
  %42 = load i64*, i64** %val.addr, align 8, !dbg !17892
  store i64 %41, i64* %42, align 8, !dbg !17893, !ctir !54
  %43 = load i32, i32* %err, align 4, !dbg !17894
  %or = or i32 %43, 2, !dbg !17895
  store i32 %or, i32* %retval, align 4, !dbg !17896
  br label %return, !dbg !17896

if.end48:                                         ; preds = %if.then43
  %44 = load i8**, i8*** %p, align 8, !dbg !17897
  %45 = load i8*, i8** %44, align 8, !dbg !17898, !ctir !7
  %46 = load i8, i8* %45, align 1, !dbg !17899, !ctir !8
  %conv49 = sext i8 %46 to i32, !dbg !17899
  switch i32 %conv49, label %sw.epilog66 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !17900

sw.bb:                                            ; preds = %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48
  %47 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !17901
  %call50 = call i8* @strchr(i8* %47, i32 48) #14, !dbg !17904
  %tobool51 = icmp ne i8* %call50, null, !dbg !17904
  br i1 %tobool51, label %if.then52, label %if.end65, !dbg !17905

if.then52:                                        ; preds = %sw.bb
  %48 = load i8**, i8*** %p, align 8, !dbg !17906
  %arrayidx53 = getelementptr inbounds i8*, i8** %48, i64 0, !dbg !17906, !ctir !178
  %49 = load i8*, i8** %arrayidx53, align 8, !dbg !17906
  %arrayidx54 = getelementptr inbounds i8, i8* %49, i64 1, !dbg !17906, !ctir !7
  %50 = load i8, i8* %arrayidx54, align 1, !dbg !17906
  %conv55 = sext i8 %50 to i32, !dbg !17906
  switch i32 %conv55, label %sw.epilog [
    i32 105, label %sw.bb56
    i32 66, label %sw.bb64
    i32 68, label %sw.bb64
  ], !dbg !17907

sw.bb56:                                          ; preds = %if.then52
  %51 = load i8**, i8*** %p, align 8, !dbg !17908
  %arrayidx57 = getelementptr inbounds i8*, i8** %51, i64 0, !dbg !17908, !ctir !178
  %52 = load i8*, i8** %arrayidx57, align 8, !dbg !17908
  %arrayidx58 = getelementptr inbounds i8, i8* %52, i64 2, !dbg !17908, !ctir !7
  %53 = load i8, i8* %arrayidx58, align 1, !dbg !17908
  %conv59 = sext i8 %53 to i32, !dbg !17908
  %cmp60 = icmp eq i32 %conv59, 66, !dbg !17911
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !17912

if.then62:                                        ; preds = %sw.bb56
  %54 = load i32, i32* %suffixes, align 4, !dbg !17913
  %add = add nsw i32 %54, 2, !dbg !17913
  store i32 %add, i32* %suffixes, align 4, !dbg !17913
  br label %if.end63, !dbg !17914

if.end63:                                         ; preds = %if.then62, %sw.bb56
  br label %sw.epilog, !dbg !17915

sw.bb64:                                          ; preds = %if.then52, %if.then52
  store i32 1000, i32* %base, align 4, !dbg !17916
  %55 = load i32, i32* %suffixes, align 4, !dbg !17917
  %inc = add nsw i32 %55, 1, !dbg !17917
  store i32 %inc, i32* %suffixes, align 4, !dbg !17917
  br label %sw.epilog, !dbg !17918

sw.epilog:                                        ; preds = %if.then52, %sw.bb64, %if.end63
  br label %if.end65, !dbg !17919

if.end65:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog66, !dbg !17920

sw.epilog66:                                      ; preds = %if.end65, %if.end48
  %56 = load i8**, i8*** %p, align 8, !dbg !17921
  %57 = load i8*, i8** %56, align 8, !dbg !17922, !ctir !7
  %58 = load i8, i8* %57, align 1, !dbg !17923, !ctir !8
  %conv67 = sext i8 %58 to i32, !dbg !17923
  switch i32 %conv67, label %sw.default [
    i32 98, label %sw.bb68
    i32 66, label %sw.bb70
    i32 99, label %sw.bb72
    i32 69, label %sw.bb73
    i32 71, label %sw.bb75
    i32 103, label %sw.bb75
    i32 107, label %sw.bb77
    i32 75, label %sw.bb77
    i32 77, label %sw.bb79
    i32 109, label %sw.bb79
    i32 80, label %sw.bb81
    i32 84, label %sw.bb83
    i32 116, label %sw.bb83
    i32 119, label %sw.bb85
    i32 89, label %sw.bb87
    i32 90, label %sw.bb89
  ], !dbg !17924

sw.bb68:                                          ; preds = %sw.epilog66
  %call69 = call i32 @bkm_scale(i64* %tmp, i32 512), !dbg !17925
  store i32 %call69, i32* %overflow, align 4, !dbg !17927
  br label %sw.epilog92, !dbg !17928

sw.bb70:                                          ; preds = %sw.epilog66
  %call71 = call i32 @bkm_scale(i64* %tmp, i32 1024), !dbg !17929
  store i32 %call71, i32* %overflow, align 4, !dbg !17930
  br label %sw.epilog92, !dbg !17931

sw.bb72:                                          ; preds = %sw.epilog66
  store i32 0, i32* %overflow, align 4, !dbg !17932
  br label %sw.epilog92, !dbg !17933

sw.bb73:                                          ; preds = %sw.epilog66
  %59 = load i32, i32* %base, align 4, !dbg !17934
  %call74 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %59, i32 6), !dbg !17935
  store i32 %call74, i32* %overflow, align 4, !dbg !17936
  br label %sw.epilog92, !dbg !17937

sw.bb75:                                          ; preds = %sw.epilog66, %sw.epilog66
  %60 = load i32, i32* %base, align 4, !dbg !17938
  %call76 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %60, i32 3), !dbg !17939
  store i32 %call76, i32* %overflow, align 4, !dbg !17940
  br label %sw.epilog92, !dbg !17941

sw.bb77:                                          ; preds = %sw.epilog66, %sw.epilog66
  %61 = load i32, i32* %base, align 4, !dbg !17942
  %call78 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %61, i32 1), !dbg !17943
  store i32 %call78, i32* %overflow, align 4, !dbg !17944
  br label %sw.epilog92, !dbg !17945

sw.bb79:                                          ; preds = %sw.epilog66, %sw.epilog66
  %62 = load i32, i32* %base, align 4, !dbg !17946
  %call80 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %62, i32 2), !dbg !17947
  store i32 %call80, i32* %overflow, align 4, !dbg !17948
  br label %sw.epilog92, !dbg !17949

sw.bb81:                                          ; preds = %sw.epilog66
  %63 = load i32, i32* %base, align 4, !dbg !17950
  %call82 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %63, i32 5), !dbg !17951
  store i32 %call82, i32* %overflow, align 4, !dbg !17952
  br label %sw.epilog92, !dbg !17953

sw.bb83:                                          ; preds = %sw.epilog66, %sw.epilog66
  %64 = load i32, i32* %base, align 4, !dbg !17954
  %call84 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %64, i32 4), !dbg !17955
  store i32 %call84, i32* %overflow, align 4, !dbg !17956
  br label %sw.epilog92, !dbg !17957

sw.bb85:                                          ; preds = %sw.epilog66
  %call86 = call i32 @bkm_scale(i64* %tmp, i32 2), !dbg !17958
  store i32 %call86, i32* %overflow, align 4, !dbg !17959
  br label %sw.epilog92, !dbg !17960

sw.bb87:                                          ; preds = %sw.epilog66
  %65 = load i32, i32* %base, align 4, !dbg !17961
  %call88 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %65, i32 8), !dbg !17962
  store i32 %call88, i32* %overflow, align 4, !dbg !17963
  br label %sw.epilog92, !dbg !17964

sw.bb89:                                          ; preds = %sw.epilog66
  %66 = load i32, i32* %base, align 4, !dbg !17965
  %call90 = call i32 @bkm_scale_by_power(i64* %tmp, i32 %66, i32 7), !dbg !17966
  store i32 %call90, i32* %overflow, align 4, !dbg !17967
  br label %sw.epilog92, !dbg !17968

sw.default:                                       ; preds = %sw.epilog66
  %67 = load i64, i64* %tmp, align 8, !dbg !17969
  %68 = load i64*, i64** %val.addr, align 8, !dbg !17970
  store i64 %67, i64* %68, align 8, !dbg !17971, !ctir !54
  %69 = load i32, i32* %err, align 4, !dbg !17972
  %or91 = or i32 %69, 2, !dbg !17973
  store i32 %or91, i32* %retval, align 4, !dbg !17974
  br label %return, !dbg !17974

sw.epilog92:                                      ; preds = %sw.bb89, %sw.bb87, %sw.bb85, %sw.bb83, %sw.bb81, %sw.bb79, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb72, %sw.bb70, %sw.bb68
  %70 = load i32, i32* %overflow, align 4, !dbg !17975
  %71 = load i32, i32* %err, align 4, !dbg !17976
  %or93 = or i32 %71, %70, !dbg !17976
  store i32 %or93, i32* %err, align 4, !dbg !17976
  %72 = load i32, i32* %suffixes, align 4, !dbg !17977
  %73 = load i8**, i8*** %p, align 8, !dbg !17978
  %74 = load i8*, i8** %73, align 8, !dbg !17979, !ctir !7
  %idx.ext = sext i32 %72 to i64, !dbg !17979
  %add.ptr = getelementptr inbounds i8, i8* %74, i64 %idx.ext, !dbg !17979, !ctir !8
  store i8* %add.ptr, i8** %73, align 8, !dbg !17979, !ctir !7
  %75 = load i8**, i8*** %p, align 8, !dbg !17980
  %76 = load i8*, i8** %75, align 8, !dbg !17982, !ctir !7
  %77 = load i8, i8* %76, align 1, !dbg !17983, !ctir !8
  %tobool94 = icmp ne i8 %77, 0, !dbg !17983
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !17984

if.then95:                                        ; preds = %sw.epilog92
  %78 = load i32, i32* %err, align 4, !dbg !17985
  %or96 = or i32 %78, 2, !dbg !17985
  store i32 %or96, i32* %err, align 4, !dbg !17985
  br label %if.end97, !dbg !17986

if.end97:                                         ; preds = %if.then95, %sw.epilog92
  br label %if.end98, !dbg !17987

if.end98:                                         ; preds = %if.end97, %if.end39
  %79 = load i64, i64* %tmp, align 8, !dbg !17988
  %80 = load i64*, i64** %val.addr, align 8, !dbg !17989
  store i64 %79, i64* %80, align 8, !dbg !17990, !ctir !54
  %81 = load i32, i32* %err, align 4, !dbg !17991
  store i32 %81, i32* %retval, align 4, !dbg !17992
  br label %return, !dbg !17992

return:                                           ; preds = %if.end98, %sw.default, %if.then47, %if.then38, %if.then33, %if.else, %if.then
  %82 = load i32, i32* %retval, align 4, !dbg !17993
  ret i32 %82, !dbg !17993
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64* %x, i32 %scale_factor) #4 !dbg !17994 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i64*, align 8
  %scale_factor.addr = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !17997, metadata !DIExpression()), !dbg !17998
  store i32 %scale_factor, i32* %scale_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %scale_factor.addr, metadata !17999, metadata !DIExpression()), !dbg !18000
  %0 = load i32, i32* %scale_factor.addr, align 4, !dbg !18001
  %conv = sext i32 %0 to i64, !dbg !18001
  %div = udiv i64 -1, %conv, !dbg !18003
  %1 = load i64*, i64** %x.addr, align 8, !dbg !18004
  %2 = load i64, i64* %1, align 8, !dbg !18005, !ctir !54
  %cmp = icmp ult i64 %div, %2, !dbg !18006
  br i1 %cmp, label %if.then, label %if.end, !dbg !18007

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %x.addr, align 8, !dbg !18008
  store i64 -1, i64* %3, align 8, !dbg !18010, !ctir !54
  store i32 1, i32* %retval, align 4, !dbg !18011
  br label %return, !dbg !18011

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %scale_factor.addr, align 4, !dbg !18012
  %conv2 = sext i32 %4 to i64, !dbg !18012
  %5 = load i64*, i64** %x.addr, align 8, !dbg !18013
  %6 = load i64, i64* %5, align 8, !dbg !18014, !ctir !54
  %mul = mul i64 %6, %conv2, !dbg !18014
  store i64 %mul, i64* %5, align 8, !dbg !18014, !ctir !54
  store i32 0, i32* %retval, align 4, !dbg !18015
  br label %return, !dbg !18015

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !18016
  ret i32 %7, !dbg !18016
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64* %x, i32 %base, i32 %power) #4 !dbg !18017 {
entry:
  %x.addr = alloca i64*, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4, !ctir !1528
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !18020, metadata !DIExpression()), !dbg !18021
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !18022, metadata !DIExpression()), !dbg !18023
  store i32 %power, i32* %power.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %power.addr, metadata !18024, metadata !DIExpression()), !dbg !18025
  call void @llvm.dbg.declare(metadata i32* %err, metadata !18026, metadata !DIExpression()), !dbg !18027
  store i32 0, i32* %err, align 4, !dbg !18027
  br label %while.cond, !dbg !18028

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %power.addr, align 4, !dbg !18029
  %dec = add nsw i32 %0, -1, !dbg !18029
  store i32 %dec, i32* %power.addr, align 4, !dbg !18029
  %tobool = icmp ne i32 %0, 0, !dbg !18028
  br i1 %tobool, label %while.body, label %while.end, !dbg !18028

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %x.addr, align 8, !dbg !18030
  %2 = load i32, i32* %base.addr, align 4, !dbg !18031
  %call = call i32 @bkm_scale(i64* %1, i32 %2), !dbg !18032
  %3 = load i32, i32* %err, align 4, !dbg !18033
  %or = or i32 %3, %call, !dbg !18033
  store i32 %or, i32* %err, align 4, !dbg !18033
  br label %while.cond, !dbg !18028, !llvm.loop !18034

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %err, align 4, !dbg !18036
  ret i32 %4, !dbg !18037
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xstrtol_fatal(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg) #0 !dbg !18038 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !18042, metadata !DIExpression()), !dbg !18043
  store i32 %opt_idx, i32* %opt_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_idx.addr, metadata !18044, metadata !DIExpression()), !dbg !18045
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !18046, metadata !DIExpression()), !dbg !18047
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !18048, metadata !DIExpression()), !dbg !18049
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18050, metadata !DIExpression()), !dbg !18051
  %0 = load i32, i32* %err.addr, align 4, !dbg !18052
  %1 = load i32, i32* %opt_idx.addr, align 4, !dbg !18053
  %2 = load i8, i8* %c.addr, align 1, !dbg !18054
  %3 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !18055
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !18056
  %5 = load volatile i32, i32* @exit_failure, align 4, !dbg !18057
  call void @xstrtol_error(i32 %0, i32 %1, i8 signext %2, %struct.option* %3, i8* %4, i32 %5), !dbg !18058
  call void @abort() #13, !dbg !18059
  unreachable, !dbg !18059
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @xstrtol_error(i32 %err, i32 %opt_idx, i8 signext %c, %struct.option* %long_options, i8* %arg, i32 %exit_status) #4 !dbg !18060 {
entry:
  %err.addr = alloca i32, align 4
  %opt_idx.addr = alloca i32, align 4
  %c.addr = alloca i8, align 1
  %long_options.addr = alloca %struct.option*, align 8
  %arg.addr = alloca i8*, align 8
  %exit_status.addr = alloca i32, align 4
  %hyphens = alloca i8*, align 8, !ctir !90
  %msgid = alloca i8*, align 8, !ctir !90
  %option = alloca i8*, align 8, !ctir !90
  %option_buffer = alloca [2 x i8], align 1, !ctir !330
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !18063, metadata !DIExpression()), !dbg !18064
  store i32 %opt_idx, i32* %opt_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_idx.addr, metadata !18065, metadata !DIExpression()), !dbg !18066
  store i8 %c, i8* %c.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !18067, metadata !DIExpression()), !dbg !18068
  store %struct.option* %long_options, %struct.option** %long_options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.option** %long_options.addr, metadata !18069, metadata !DIExpression()), !dbg !18070
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !18071, metadata !DIExpression()), !dbg !18072
  store i32 %exit_status, i32* %exit_status.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exit_status.addr, metadata !18073, metadata !DIExpression()), !dbg !18074
  call void @llvm.dbg.declare(metadata i8** %hyphens, metadata !18075, metadata !DIExpression()), !dbg !18076
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.363, i64 0, i64 0), i8** %hyphens, align 8, !dbg !18076
  call void @llvm.dbg.declare(metadata i8** %msgid, metadata !18077, metadata !DIExpression()), !dbg !18078
  call void @llvm.dbg.declare(metadata i8** %option, metadata !18079, metadata !DIExpression()), !dbg !18080
  call void @llvm.dbg.declare(metadata [2 x i8]* %option_buffer, metadata !18081, metadata !DIExpression()), !dbg !18082
  %0 = load i32, i32* %err.addr, align 4, !dbg !18083
  switch i32 %0, label %sw.default [
    i32 4, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb1
    i32 1, label %sw.bb2
  ], !dbg !18084

sw.default:                                       ; preds = %entry
  call void @abort() #13, !dbg !18085
  unreachable, !dbg !18085

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.364, i64 0, i64 0), i8** %msgid, align 8, !dbg !18087
  br label %sw.epilog, !dbg !18088

sw.bb1:                                           ; preds = %entry, %entry
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.365, i64 0, i64 0), i8** %msgid, align 8, !dbg !18089
  br label %sw.epilog, !dbg !18090

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.366, i64 0, i64 0), i8** %msgid, align 8, !dbg !18091
  br label %sw.epilog, !dbg !18092

sw.epilog:                                        ; preds = %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %opt_idx.addr, align 4, !dbg !18093
  %cmp = icmp slt i32 %1, 0, !dbg !18095
  br i1 %cmp, label %if.then, label %if.else, !dbg !18096

if.then:                                          ; preds = %sw.epilog
  %2 = load i32, i32* %opt_idx.addr, align 4, !dbg !18097
  %3 = load i8*, i8** %hyphens, align 8, !dbg !18099
  %idx.ext = sext i32 %2 to i64, !dbg !18099
  %idx.neg = sub i64 0, %idx.ext, !dbg !18099
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.neg, !dbg !18099, !ctir !91
  store i8* %add.ptr, i8** %hyphens, align 8, !dbg !18099
  %4 = load i8, i8* %c.addr, align 1, !dbg !18100
  %arrayidx = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0, !dbg !18101, !ctir !330
  store i8 %4, i8* %arrayidx, align 1, !dbg !18102
  %arrayidx3 = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 1, !dbg !18103, !ctir !330
  store i8 0, i8* %arrayidx3, align 1, !dbg !18104
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %option_buffer, i64 0, i64 0, !dbg !18105, !ctir !330
  store i8* %arraydecay, i8** %option, align 8, !dbg !18106
  br label %if.end, !dbg !18107

if.else:                                          ; preds = %sw.epilog
  %5 = load %struct.option*, %struct.option** %long_options.addr, align 8, !dbg !18108
  %6 = load i32, i32* %opt_idx.addr, align 4, !dbg !18109
  %idxprom = sext i32 %6 to i64, !dbg !18108
  %arrayidx4 = getelementptr inbounds %struct.option, %struct.option* %5, i64 %idxprom, !dbg !18108, !ctir !1535
  %name = getelementptr inbounds %struct.option, %struct.option* %arrayidx4, i32 0, i32 0, !dbg !18110, !ctir !1536
  %7 = load i8*, i8** %name, align 8, !dbg !18110, !ctir !90
  store i8* %7, i8** %option, align 8, !dbg !18111
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %exit_status.addr, align 4, !dbg !18112
  %9 = load i8*, i8** %msgid, align 8, !dbg !18113
  %call = call i8* @gettext(i8* %9) #12, !dbg !18114
  %10 = load i8*, i8** %hyphens, align 8, !dbg !18115
  %11 = load i8*, i8** %option, align 8, !dbg !18116
  %12 = load i8*, i8** %arg.addr, align 8, !dbg !18117
  call void (i32, i32, i8*, ...) @error(i32 %8, i32 0, i8* %call, i8* %10, i8* %11, i8* %12), !dbg !18118
  ret void, !dbg !18119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoumax(i8* %s, i8** %ptr, i32 %strtol_base, i64* %val, i8* %valid_suffixes) #4 !dbg !18120 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %ptr.addr = alloca i8**, align 8
  %strtol_base.addr = alloca i32, align 4
  %val.addr = alloca i64*, align 8
  %valid_suffixes.addr = alloca i8*, align 8
  %t_ptr = alloca i8*, align 8, !ctir !7
  %p = alloca i8**, align 8, !ctir !178
  %tmp = alloca i64, align 8, !ctir !464
  %err = alloca i32, align 4, !ctir !1528
  %q = alloca i8*, align 8, !ctir !90
  %ch = alloca i8, align 1, !ctir !535
  %base = alloca i32, align 4, !ctir !5
  %suffixes = alloca i32, align 4, !ctir !5
  %overflow = alloca i32, align 4, !ctir !1528
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !18124, metadata !DIExpression()), !dbg !18125
  store i8** %ptr, i8*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %ptr.addr, metadata !18126, metadata !DIExpression()), !dbg !18127
  store i32 %strtol_base, i32* %strtol_base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %strtol_base.addr, metadata !18128, metadata !DIExpression()), !dbg !18129
  store i64* %val, i64** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %val.addr, metadata !18130, metadata !DIExpression()), !dbg !18131
  store i8* %valid_suffixes, i8** %valid_suffixes.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %valid_suffixes.addr, metadata !18132, metadata !DIExpression()), !dbg !18133
  call void @llvm.dbg.declare(metadata i8** %t_ptr, metadata !18134, metadata !DIExpression()), !dbg !18135
  call void @llvm.dbg.declare(metadata i8*** %p, metadata !18136, metadata !DIExpression()), !dbg !18137
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !18138, metadata !DIExpression()), !dbg !18139
  call void @llvm.dbg.declare(metadata i32* %err, metadata !18140, metadata !DIExpression()), !dbg !18141
  store i32 0, i32* %err, align 4, !dbg !18141
  %0 = load i32, i32* %strtol_base.addr, align 4, !dbg !18142
  %cmp = icmp sle i32 0, %0, !dbg !18142
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !18142

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %strtol_base.addr, align 4, !dbg !18142
  %cmp1 = icmp sle i32 %1, 36, !dbg !18142
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !18142

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !18142

cond.false:                                       ; preds = %land.lhs.true, %entry
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.369, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.370, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.xstrtoumax, i64 0, i64 0)) #13, !dbg !18142
  unreachable, !dbg !18142

2:                                                ; No predecessors!
  br label %cond.end, !dbg !18142

cond.end:                                         ; preds = %2, %cond.true
  %3 = load i8**, i8*** %ptr.addr, align 8, !dbg !18143
  %tobool = icmp ne i8** %3, null, !dbg !18143
  br i1 %tobool, label %cond.true2, label %cond.false3, !dbg !18143

cond.true2:                                       ; preds = %cond.end
  %4 = load i8**, i8*** %ptr.addr, align 8, !dbg !18144
  br label %cond.end4, !dbg !18143

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !18143

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond = phi i8** [ %4, %cond.true2 ], [ %t_ptr, %cond.false3 ], !dbg !18143
  store i8** %cond, i8*** %p, align 8, !dbg !18145
  %call = call i32* @__errno_location() #16, !dbg !18146
  store i32 0, i32* %call, align 4, !dbg !18147, !ctir !5
  call void @llvm.dbg.declare(metadata i8** %q, metadata !18148, metadata !DIExpression()), !dbg !18151
  %5 = load i8*, i8** %s.addr, align 8, !dbg !18152
  store i8* %5, i8** %q, align 8, !dbg !18151
  call void @llvm.dbg.declare(metadata i8* %ch, metadata !18153, metadata !DIExpression()), !dbg !18154
  %6 = load i8*, i8** %q, align 8, !dbg !18155
  %7 = load i8, i8* %6, align 1, !dbg !18156, !ctir !91
  store i8 %7, i8* %ch, align 1, !dbg !18154
  br label %while.cond, !dbg !18157

while.cond:                                       ; preds = %while.body, %cond.end4
  %call5 = call i16** @__ctype_b_loc() #16, !dbg !18158
  %8 = load i16*, i16** %call5, align 8, !dbg !18158, !ctir !451
  %9 = load i8, i8* %ch, align 1, !dbg !18158
  %conv = zext i8 %9 to i32, !dbg !18158
  %idxprom = sext i32 %conv to i64, !dbg !18158
  %arrayidx = getelementptr inbounds i16, i16* %8, i64 %idxprom, !dbg !18158, !ctir !451
  %10 = load i16, i16* %arrayidx, align 2, !dbg !18158
  %conv6 = zext i16 %10 to i32, !dbg !18158
  %and = and i32 %conv6, 8192, !dbg !18158
  %tobool7 = icmp ne i32 %and, 0, !dbg !18157
  br i1 %tobool7, label %while.body, label %while.end, !dbg !18157

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %q, align 8, !dbg !18159
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !18159, !ctir !91
  store i8* %incdec.ptr, i8** %q, align 8, !dbg !18159
  %12 = load i8, i8* %incdec.ptr, align 1, !dbg !18160, !ctir !91
  store i8 %12, i8* %ch, align 1, !dbg !18161
  br label %while.cond, !dbg !18157, !llvm.loop !18162

while.end:                                        ; preds = %while.cond
  %13 = load i8, i8* %ch, align 1, !dbg !18164
  %conv8 = zext i8 %13 to i32, !dbg !18164
  %cmp9 = icmp eq i32 %conv8, 45, !dbg !18166
  br i1 %cmp9, label %if.then, label %if.end, !dbg !18167

if.then:                                          ; preds = %while.end
  store i32 4, i32* %retval, align 4, !dbg !18168
  br label %return, !dbg !18168

if.end:                                           ; preds = %while.end
  %14 = load i8*, i8** %s.addr, align 8, !dbg !18169
  %15 = load i8**, i8*** %p, align 8, !dbg !18170
  %16 = load i32, i32* %strtol_base.addr, align 4, !dbg !18171
  %call11 = call i64 @strtoumax(i8* %14, i8** %15, i32 %16) #12, !dbg !18172
  store i64 %call11, i64* %tmp, align 8, !dbg !18173
  %17 = load i8**, i8*** %p, align 8, !dbg !18174
  %18 = load i8*, i8** %17, align 8, !dbg !18176, !ctir !7
  %19 = load i8*, i8** %s.addr, align 8, !dbg !18177
  %cmp12 = icmp eq i8* %18, %19, !dbg !18178
  br i1 %cmp12, label %if.then14, label %if.else25, !dbg !18179

if.then14:                                        ; preds = %if.end
  %20 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !18180
  %tobool15 = icmp ne i8* %20, null, !dbg !18180
  br i1 %tobool15, label %land.lhs.true16, label %if.else, !dbg !18183

land.lhs.true16:                                  ; preds = %if.then14
  %21 = load i8**, i8*** %p, align 8, !dbg !18184
  %22 = load i8*, i8** %21, align 8, !dbg !18185, !ctir !7
  %23 = load i8, i8* %22, align 1, !dbg !18186, !ctir !8
  %conv17 = sext i8 %23 to i32, !dbg !18186
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !18186
  br i1 %tobool18, label %land.lhs.true19, label %if.else, !dbg !18187

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %24 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !18188
  %25 = load i8**, i8*** %p, align 8, !dbg !18189
  %26 = load i8*, i8** %25, align 8, !dbg !18190, !ctir !7
  %27 = load i8, i8* %26, align 1, !dbg !18191, !ctir !8
  %conv20 = sext i8 %27 to i32, !dbg !18191
  %call21 = call i8* @strchr(i8* %24, i32 %conv20) #14, !dbg !18192
  %tobool22 = icmp ne i8* %call21, null, !dbg !18192
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !18193

if.then23:                                        ; preds = %land.lhs.true19
  store i64 1, i64* %tmp, align 8, !dbg !18194
  br label %if.end24, !dbg !18195

if.else:                                          ; preds = %land.lhs.true19, %land.lhs.true16, %if.then14
  store i32 4, i32* %retval, align 4, !dbg !18196
  br label %return, !dbg !18196

if.end24:                                         ; preds = %if.then23
  br label %if.end36, !dbg !18197

if.else25:                                        ; preds = %if.end
  %call26 = call i32* @__errno_location() #16, !dbg !18198
  %28 = load i32, i32* %call26, align 4, !dbg !18198, !ctir !5
  %cmp27 = icmp ne i32 %28, 0, !dbg !18200
  br i1 %cmp27, label %if.then29, label %if.end35, !dbg !18201

if.then29:                                        ; preds = %if.else25
  %call30 = call i32* @__errno_location() #16, !dbg !18202
  %29 = load i32, i32* %call30, align 4, !dbg !18202, !ctir !5
  %cmp31 = icmp ne i32 %29, 34, !dbg !18205
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !18206

if.then33:                                        ; preds = %if.then29
  store i32 4, i32* %retval, align 4, !dbg !18207
  br label %return, !dbg !18207

if.end34:                                         ; preds = %if.then29
  store i32 1, i32* %err, align 4, !dbg !18208
  br label %if.end35, !dbg !18209

if.end35:                                         ; preds = %if.end34, %if.else25
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end24
  %30 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !18210
  %tobool37 = icmp ne i8* %30, null, !dbg !18210
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !18212

if.then38:                                        ; preds = %if.end36
  %31 = load i64, i64* %tmp, align 8, !dbg !18213
  %32 = load i64*, i64** %val.addr, align 8, !dbg !18215
  store i64 %31, i64* %32, align 8, !dbg !18216, !ctir !464
  %33 = load i32, i32* %err, align 4, !dbg !18217
  store i32 %33, i32* %retval, align 4, !dbg !18218
  br label %return, !dbg !18218

if.end39:                                         ; preds = %if.end36
  %34 = load i8**, i8*** %p, align 8, !dbg !18219
  %35 = load i8*, i8** %34, align 8, !dbg !18221, !ctir !7
  %36 = load i8, i8* %35, align 1, !dbg !18222, !ctir !8
  %conv40 = sext i8 %36 to i32, !dbg !18222
  %cmp41 = icmp ne i32 %conv40, 0, !dbg !18223
  br i1 %cmp41, label %if.then43, label %if.end98, !dbg !18224

if.then43:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata i32* %base, metadata !18225, metadata !DIExpression()), !dbg !18227
  store i32 1024, i32* %base, align 4, !dbg !18227
  call void @llvm.dbg.declare(metadata i32* %suffixes, metadata !18228, metadata !DIExpression()), !dbg !18229
  store i32 1, i32* %suffixes, align 4, !dbg !18229
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !18230, metadata !DIExpression()), !dbg !18231
  %37 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !18232
  %38 = load i8**, i8*** %p, align 8, !dbg !18234
  %39 = load i8*, i8** %38, align 8, !dbg !18235, !ctir !7
  %40 = load i8, i8* %39, align 1, !dbg !18236, !ctir !8
  %conv44 = sext i8 %40 to i32, !dbg !18236
  %call45 = call i8* @strchr(i8* %37, i32 %conv44) #14, !dbg !18237
  %tobool46 = icmp ne i8* %call45, null, !dbg !18237
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !18238

if.then47:                                        ; preds = %if.then43
  %41 = load i64, i64* %tmp, align 8, !dbg !18239
  %42 = load i64*, i64** %val.addr, align 8, !dbg !18241
  store i64 %41, i64* %42, align 8, !dbg !18242, !ctir !464
  %43 = load i32, i32* %err, align 4, !dbg !18243
  %or = or i32 %43, 2, !dbg !18244
  store i32 %or, i32* %retval, align 4, !dbg !18245
  br label %return, !dbg !18245

if.end48:                                         ; preds = %if.then43
  %44 = load i8**, i8*** %p, align 8, !dbg !18246
  %45 = load i8*, i8** %44, align 8, !dbg !18247, !ctir !7
  %46 = load i8, i8* %45, align 1, !dbg !18248, !ctir !8
  %conv49 = sext i8 %46 to i32, !dbg !18248
  switch i32 %conv49, label %sw.epilog66 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !18249

sw.bb:                                            ; preds = %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48
  %47 = load i8*, i8** %valid_suffixes.addr, align 8, !dbg !18250
  %call50 = call i8* @strchr(i8* %47, i32 48) #14, !dbg !18253
  %tobool51 = icmp ne i8* %call50, null, !dbg !18253
  br i1 %tobool51, label %if.then52, label %if.end65, !dbg !18254

if.then52:                                        ; preds = %sw.bb
  %48 = load i8**, i8*** %p, align 8, !dbg !18255
  %arrayidx53 = getelementptr inbounds i8*, i8** %48, i64 0, !dbg !18255, !ctir !178
  %49 = load i8*, i8** %arrayidx53, align 8, !dbg !18255
  %arrayidx54 = getelementptr inbounds i8, i8* %49, i64 1, !dbg !18255, !ctir !7
  %50 = load i8, i8* %arrayidx54, align 1, !dbg !18255
  %conv55 = sext i8 %50 to i32, !dbg !18255
  switch i32 %conv55, label %sw.epilog [
    i32 105, label %sw.bb56
    i32 66, label %sw.bb64
    i32 68, label %sw.bb64
  ], !dbg !18256

sw.bb56:                                          ; preds = %if.then52
  %51 = load i8**, i8*** %p, align 8, !dbg !18257
  %arrayidx57 = getelementptr inbounds i8*, i8** %51, i64 0, !dbg !18257, !ctir !178
  %52 = load i8*, i8** %arrayidx57, align 8, !dbg !18257
  %arrayidx58 = getelementptr inbounds i8, i8* %52, i64 2, !dbg !18257, !ctir !7
  %53 = load i8, i8* %arrayidx58, align 1, !dbg !18257
  %conv59 = sext i8 %53 to i32, !dbg !18257
  %cmp60 = icmp eq i32 %conv59, 66, !dbg !18260
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !18261

if.then62:                                        ; preds = %sw.bb56
  %54 = load i32, i32* %suffixes, align 4, !dbg !18262
  %add = add nsw i32 %54, 2, !dbg !18262
  store i32 %add, i32* %suffixes, align 4, !dbg !18262
  br label %if.end63, !dbg !18263

if.end63:                                         ; preds = %if.then62, %sw.bb56
  br label %sw.epilog, !dbg !18264

sw.bb64:                                          ; preds = %if.then52, %if.then52
  store i32 1000, i32* %base, align 4, !dbg !18265
  %55 = load i32, i32* %suffixes, align 4, !dbg !18266
  %inc = add nsw i32 %55, 1, !dbg !18266
  store i32 %inc, i32* %suffixes, align 4, !dbg !18266
  br label %sw.epilog, !dbg !18267

sw.epilog:                                        ; preds = %if.then52, %sw.bb64, %if.end63
  br label %if.end65, !dbg !18268

if.end65:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog66, !dbg !18269

sw.epilog66:                                      ; preds = %if.end65, %if.end48
  %56 = load i8**, i8*** %p, align 8, !dbg !18270
  %57 = load i8*, i8** %56, align 8, !dbg !18271, !ctir !7
  %58 = load i8, i8* %57, align 1, !dbg !18272, !ctir !8
  %conv67 = sext i8 %58 to i32, !dbg !18272
  switch i32 %conv67, label %sw.default [
    i32 98, label %sw.bb68
    i32 66, label %sw.bb70
    i32 99, label %sw.bb72
    i32 69, label %sw.bb73
    i32 71, label %sw.bb75
    i32 103, label %sw.bb75
    i32 107, label %sw.bb77
    i32 75, label %sw.bb77
    i32 77, label %sw.bb79
    i32 109, label %sw.bb79
    i32 80, label %sw.bb81
    i32 84, label %sw.bb83
    i32 116, label %sw.bb83
    i32 119, label %sw.bb85
    i32 89, label %sw.bb87
    i32 90, label %sw.bb89
  ], !dbg !18273

sw.bb68:                                          ; preds = %sw.epilog66
  %call69 = call i32 @bkm_scale.371(i64* %tmp, i32 512), !dbg !18274
  store i32 %call69, i32* %overflow, align 4, !dbg !18276
  br label %sw.epilog92, !dbg !18277

sw.bb70:                                          ; preds = %sw.epilog66
  %call71 = call i32 @bkm_scale.371(i64* %tmp, i32 1024), !dbg !18278
  store i32 %call71, i32* %overflow, align 4, !dbg !18279
  br label %sw.epilog92, !dbg !18280

sw.bb72:                                          ; preds = %sw.epilog66
  store i32 0, i32* %overflow, align 4, !dbg !18281
  br label %sw.epilog92, !dbg !18282

sw.bb73:                                          ; preds = %sw.epilog66
  %59 = load i32, i32* %base, align 4, !dbg !18283
  %call74 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %59, i32 6), !dbg !18284
  store i32 %call74, i32* %overflow, align 4, !dbg !18285
  br label %sw.epilog92, !dbg !18286

sw.bb75:                                          ; preds = %sw.epilog66, %sw.epilog66
  %60 = load i32, i32* %base, align 4, !dbg !18287
  %call76 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %60, i32 3), !dbg !18288
  store i32 %call76, i32* %overflow, align 4, !dbg !18289
  br label %sw.epilog92, !dbg !18290

sw.bb77:                                          ; preds = %sw.epilog66, %sw.epilog66
  %61 = load i32, i32* %base, align 4, !dbg !18291
  %call78 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %61, i32 1), !dbg !18292
  store i32 %call78, i32* %overflow, align 4, !dbg !18293
  br label %sw.epilog92, !dbg !18294

sw.bb79:                                          ; preds = %sw.epilog66, %sw.epilog66
  %62 = load i32, i32* %base, align 4, !dbg !18295
  %call80 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %62, i32 2), !dbg !18296
  store i32 %call80, i32* %overflow, align 4, !dbg !18297
  br label %sw.epilog92, !dbg !18298

sw.bb81:                                          ; preds = %sw.epilog66
  %63 = load i32, i32* %base, align 4, !dbg !18299
  %call82 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %63, i32 5), !dbg !18300
  store i32 %call82, i32* %overflow, align 4, !dbg !18301
  br label %sw.epilog92, !dbg !18302

sw.bb83:                                          ; preds = %sw.epilog66, %sw.epilog66
  %64 = load i32, i32* %base, align 4, !dbg !18303
  %call84 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %64, i32 4), !dbg !18304
  store i32 %call84, i32* %overflow, align 4, !dbg !18305
  br label %sw.epilog92, !dbg !18306

sw.bb85:                                          ; preds = %sw.epilog66
  %call86 = call i32 @bkm_scale.371(i64* %tmp, i32 2), !dbg !18307
  store i32 %call86, i32* %overflow, align 4, !dbg !18308
  br label %sw.epilog92, !dbg !18309

sw.bb87:                                          ; preds = %sw.epilog66
  %65 = load i32, i32* %base, align 4, !dbg !18310
  %call88 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %65, i32 8), !dbg !18311
  store i32 %call88, i32* %overflow, align 4, !dbg !18312
  br label %sw.epilog92, !dbg !18313

sw.bb89:                                          ; preds = %sw.epilog66
  %66 = load i32, i32* %base, align 4, !dbg !18314
  %call90 = call i32 @bkm_scale_by_power.372(i64* %tmp, i32 %66, i32 7), !dbg !18315
  store i32 %call90, i32* %overflow, align 4, !dbg !18316
  br label %sw.epilog92, !dbg !18317

sw.default:                                       ; preds = %sw.epilog66
  %67 = load i64, i64* %tmp, align 8, !dbg !18318
  %68 = load i64*, i64** %val.addr, align 8, !dbg !18319
  store i64 %67, i64* %68, align 8, !dbg !18320, !ctir !464
  %69 = load i32, i32* %err, align 4, !dbg !18321
  %or91 = or i32 %69, 2, !dbg !18322
  store i32 %or91, i32* %retval, align 4, !dbg !18323
  br label %return, !dbg !18323

sw.epilog92:                                      ; preds = %sw.bb89, %sw.bb87, %sw.bb85, %sw.bb83, %sw.bb81, %sw.bb79, %sw.bb77, %sw.bb75, %sw.bb73, %sw.bb72, %sw.bb70, %sw.bb68
  %70 = load i32, i32* %overflow, align 4, !dbg !18324
  %71 = load i32, i32* %err, align 4, !dbg !18325
  %or93 = or i32 %71, %70, !dbg !18325
  store i32 %or93, i32* %err, align 4, !dbg !18325
  %72 = load i32, i32* %suffixes, align 4, !dbg !18326
  %73 = load i8**, i8*** %p, align 8, !dbg !18327
  %74 = load i8*, i8** %73, align 8, !dbg !18328, !ctir !7
  %idx.ext = sext i32 %72 to i64, !dbg !18328
  %add.ptr = getelementptr inbounds i8, i8* %74, i64 %idx.ext, !dbg !18328, !ctir !8
  store i8* %add.ptr, i8** %73, align 8, !dbg !18328, !ctir !7
  %75 = load i8**, i8*** %p, align 8, !dbg !18329
  %76 = load i8*, i8** %75, align 8, !dbg !18331, !ctir !7
  %77 = load i8, i8* %76, align 1, !dbg !18332, !ctir !8
  %tobool94 = icmp ne i8 %77, 0, !dbg !18332
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !18333

if.then95:                                        ; preds = %sw.epilog92
  %78 = load i32, i32* %err, align 4, !dbg !18334
  %or96 = or i32 %78, 2, !dbg !18334
  store i32 %or96, i32* %err, align 4, !dbg !18334
  br label %if.end97, !dbg !18335

if.end97:                                         ; preds = %if.then95, %sw.epilog92
  br label %if.end98, !dbg !18336

if.end98:                                         ; preds = %if.end97, %if.end39
  %79 = load i64, i64* %tmp, align 8, !dbg !18337
  %80 = load i64*, i64** %val.addr, align 8, !dbg !18338
  store i64 %79, i64* %80, align 8, !dbg !18339, !ctir !464
  %81 = load i32, i32* %err, align 4, !dbg !18340
  store i32 %81, i32* %retval, align 4, !dbg !18341
  br label %return, !dbg !18341

return:                                           ; preds = %if.end98, %sw.default, %if.then47, %if.then38, %if.then33, %if.else, %if.then
  %82 = load i32, i32* %retval, align 4, !dbg !18342
  ret i32 %82, !dbg !18342
}

; Function Attrs: nounwind
declare dso_local i64 @strtoumax(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale.371(i64* %x, i32 %scale_factor) #4 !dbg !18343 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i64*, align 8
  %scale_factor.addr = alloca i32, align 4
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !18346, metadata !DIExpression()), !dbg !18347
  store i32 %scale_factor, i32* %scale_factor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %scale_factor.addr, metadata !18348, metadata !DIExpression()), !dbg !18349
  %0 = load i32, i32* %scale_factor.addr, align 4, !dbg !18350
  %conv = sext i32 %0 to i64, !dbg !18350
  %div = udiv i64 -1, %conv, !dbg !18352
  %1 = load i64*, i64** %x.addr, align 8, !dbg !18353
  %2 = load i64, i64* %1, align 8, !dbg !18354, !ctir !464
  %cmp = icmp ult i64 %div, %2, !dbg !18355
  br i1 %cmp, label %if.then, label %if.end, !dbg !18356

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %x.addr, align 8, !dbg !18357
  store i64 -1, i64* %3, align 8, !dbg !18359, !ctir !464
  store i32 1, i32* %retval, align 4, !dbg !18360
  br label %return, !dbg !18360

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %scale_factor.addr, align 4, !dbg !18361
  %conv2 = sext i32 %4 to i64, !dbg !18361
  %5 = load i64*, i64** %x.addr, align 8, !dbg !18362
  %6 = load i64, i64* %5, align 8, !dbg !18363, !ctir !464
  %mul = mul i64 %6, %conv2, !dbg !18363
  store i64 %mul, i64* %5, align 8, !dbg !18363, !ctir !464
  store i32 0, i32* %retval, align 4, !dbg !18364
  br label %return, !dbg !18364

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !18365
  ret i32 %7, !dbg !18365
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power.372(i64* %x, i32 %base, i32 %power) #4 !dbg !18366 {
entry:
  %x.addr = alloca i64*, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4, !ctir !1528
  store i64* %x, i64** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %x.addr, metadata !18369, metadata !DIExpression()), !dbg !18370
  store i32 %base, i32* %base.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !18371, metadata !DIExpression()), !dbg !18372
  store i32 %power, i32* %power.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %power.addr, metadata !18373, metadata !DIExpression()), !dbg !18374
  call void @llvm.dbg.declare(metadata i32* %err, metadata !18375, metadata !DIExpression()), !dbg !18376
  store i32 0, i32* %err, align 4, !dbg !18376
  br label %while.cond, !dbg !18377

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %power.addr, align 4, !dbg !18378
  %dec = add nsw i32 %0, -1, !dbg !18378
  store i32 %dec, i32* %power.addr, align 4, !dbg !18378
  %tobool = icmp ne i32 %0, 0, !dbg !18377
  br i1 %tobool, label %while.body, label %while.end, !dbg !18377

while.body:                                       ; preds = %while.cond
  %1 = load i64*, i64** %x.addr, align 8, !dbg !18379
  %2 = load i32, i32* %base.addr, align 4, !dbg !18380
  %call = call i32 @bkm_scale.371(i64* %1, i32 %2), !dbg !18381
  %3 = load i32, i32* %err, align 4, !dbg !18382
  %or = or i32 %3, %call, !dbg !18382
  store i32 %or, i32* %err, align 4, !dbg !18382
  br label %while.cond, !dbg !18377, !llvm.loop !18383

while.end:                                        ; preds = %while.cond
  %4 = load i32, i32* %err, align 4, !dbg !18385
  ret i32 %4, !dbg !18386
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @explicit_bzero(i8* nonnull %s, i64 %len) #4 !dbg !18387 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !18391, metadata !DIExpression()), !dbg !18392
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !18393, metadata !DIExpression()), !dbg !18394
  %0 = load i8*, i8** %s.addr, align 8, !dbg !18395
  %1 = load i64, i64* %len.addr, align 8, !dbg !18396
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 %1, i1 false), !dbg !18397
  ret void, !dbg !18398
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fclose(%struct._IO_FILE* nonnull %fp) #4 !dbg !18399 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %saved_errno = alloca i32, align 4, !ctir !5
  %fd = alloca i32, align 4, !ctir !5
  %result = alloca i32, align 4, !ctir !5
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !18443, metadata !DIExpression()), !dbg !18444
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !18445, metadata !DIExpression()), !dbg !18446
  store i32 0, i32* %saved_errno, align 4, !dbg !18446
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !18447, metadata !DIExpression()), !dbg !18448
  call void @llvm.dbg.declare(metadata i32* %result, metadata !18449, metadata !DIExpression()), !dbg !18450
  store i32 0, i32* %result, align 4, !dbg !18450
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18451
  %call = call i32 @fileno(%struct._IO_FILE* %0) #12, !dbg !18452
  store i32 %call, i32* %fd, align 4, !dbg !18453
  %1 = load i32, i32* %fd, align 4, !dbg !18454
  %cmp = icmp slt i32 %1, 0, !dbg !18456
  br i1 %cmp, label %if.then, label %if.end, !dbg !18457

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18458
  %call1 = call i32 @fclose(%struct._IO_FILE* %2), !dbg !18459
  store i32 %call1, i32* %retval, align 4, !dbg !18460
  br label %return, !dbg !18460

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18461
  %call2 = call i32 @__freading(%struct._IO_FILE* %3) #12, !dbg !18461
  %cmp3 = icmp ne i32 %call2, 0, !dbg !18461
  br i1 %cmp3, label %lor.lhs.false, label %land.lhs.true, !dbg !18463

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18464
  %call4 = call i32 @fileno(%struct._IO_FILE* %4) #12, !dbg !18465
  %call5 = call i64 @lseek(i32 %call4, i64 0, i32 1) #12, !dbg !18466
  %cmp6 = icmp ne i64 %call5, -1, !dbg !18467
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !18468

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18469
  %call7 = call i32 @rpl_fflush(%struct._IO_FILE* %5), !dbg !18470
  %tobool = icmp ne i32 %call7, 0, !dbg !18470
  br i1 %tobool, label %if.then8, label %if.end10, !dbg !18471

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call i32* @__errno_location() #16, !dbg !18472
  %6 = load i32, i32* %call9, align 4, !dbg !18472, !ctir !5
  store i32 %6, i32* %saved_errno, align 4, !dbg !18473
  br label %if.end10, !dbg !18474

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %lor.lhs.false
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18475
  %call11 = call i32 @fclose(%struct._IO_FILE* %7), !dbg !18476
  store i32 %call11, i32* %result, align 4, !dbg !18477
  %8 = load i32, i32* %saved_errno, align 4, !dbg !18478
  %cmp12 = icmp ne i32 %8, 0, !dbg !18480
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !18481

if.then13:                                        ; preds = %if.end10
  %9 = load i32, i32* %saved_errno, align 4, !dbg !18482
  %call14 = call i32* @__errno_location() #16, !dbg !18484
  store i32 %9, i32* %call14, align 4, !dbg !18485, !ctir !5
  store i32 -1, i32* %result, align 4, !dbg !18486
  br label %if.end15, !dbg !18487

if.end15:                                         ; preds = %if.then13, %if.end10
  %10 = load i32, i32* %result, align 4, !dbg !18488
  store i32 %10, i32* %retval, align 4, !dbg !18489
  br label %return, !dbg !18489

return:                                           ; preds = %if.end15, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !18490
  ret i32 %11, !dbg !18490
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fcntl(i32 %fd, i32 %action, ...) #4 !dbg !18491 {
entry:
  %fd.addr = alloca i32, align 4
  %action.addr = alloca i32, align 4
  %arg = alloca [1 x %struct.__va_list_tag], align 16, !ctir !1130
  %result = alloca i32, align 4, !ctir !5
  %target = alloca i32, align 4, !ctir !5
  %target4 = alloca i32, align 4, !ctir !5
  %x = alloca i32, align 4, !ctir !5
  %p = alloca i8*, align 8, !ctir !47
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !18494, metadata !DIExpression()), !dbg !18495
  store i32 %action, i32* %action.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %action.addr, metadata !18496, metadata !DIExpression()), !dbg !18497
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %arg, metadata !18498, metadata !DIExpression()), !dbg !18499
  call void @llvm.dbg.declare(metadata i32* %result, metadata !18500, metadata !DIExpression()), !dbg !18501
  store i32 -1, i32* %result, align 4, !dbg !18501
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18502, !ctir !1130
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !18502
  call void @llvm.va_start(i8* %arraydecay1), !dbg !18502
  %0 = load i32, i32* %action.addr, align 4, !dbg !18503
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1030, label %sw.bb3
  ], !dbg !18504

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %target, metadata !18505, metadata !DIExpression()), !dbg !18508
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18509, !ctir !1130
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !18509
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !18509
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !18509
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !18509

vaarg.in_reg:                                     ; preds = %sw.bb
  %1 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !18509
  %reg_save_area = load i8*, i8** %1, align 16, !dbg !18509
  %2 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !18509
  %3 = bitcast i8* %2 to i32*, !dbg !18509
  %4 = add i32 %gp_offset, 8, !dbg !18509
  store i32 %4, i32* %gp_offset_p, align 16, !dbg !18509
  br label %vaarg.end, !dbg !18509

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !18509
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !18509
  %5 = bitcast i8* %overflow_arg_area to i32*, !dbg !18509
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !18509
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !18509
  br label %vaarg.end, !dbg !18509

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %3, %vaarg.in_reg ], [ %5, %vaarg.in_mem ], !dbg !18509
  %6 = load i32, i32* %vaarg.addr, align 4, !dbg !18509
  store i32 %6, i32* %target, align 4, !dbg !18508
  %7 = load i32, i32* %fd.addr, align 4, !dbg !18510
  %8 = load i32, i32* %target, align 4, !dbg !18511
  %call = call i32 @rpl_fcntl_DUPFD(i32 %7, i32 %8), !dbg !18512
  store i32 %call, i32* %result, align 4, !dbg !18513
  br label %sw.epilog48, !dbg !18514

sw.bb3:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %target4, metadata !18515, metadata !DIExpression()), !dbg !18517
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18518, !ctir !1130
  %gp_offset_p6 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 0, !dbg !18518
  %gp_offset7 = load i32, i32* %gp_offset_p6, align 16, !dbg !18518
  %fits_in_gp8 = icmp ule i32 %gp_offset7, 40, !dbg !18518
  br i1 %fits_in_gp8, label %vaarg.in_reg9, label %vaarg.in_mem11, !dbg !18518

vaarg.in_reg9:                                    ; preds = %sw.bb3
  %9 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 3, !dbg !18518
  %reg_save_area10 = load i8*, i8** %9, align 16, !dbg !18518
  %10 = getelementptr i8, i8* %reg_save_area10, i32 %gp_offset7, !dbg !18518
  %11 = bitcast i8* %10 to i32*, !dbg !18518
  %12 = add i32 %gp_offset7, 8, !dbg !18518
  store i32 %12, i32* %gp_offset_p6, align 16, !dbg !18518
  br label %vaarg.end15, !dbg !18518

vaarg.in_mem11:                                   ; preds = %sw.bb3
  %overflow_arg_area_p12 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay5, i32 0, i32 2, !dbg !18518
  %overflow_arg_area13 = load i8*, i8** %overflow_arg_area_p12, align 8, !dbg !18518
  %13 = bitcast i8* %overflow_arg_area13 to i32*, !dbg !18518
  %overflow_arg_area.next14 = getelementptr i8, i8* %overflow_arg_area13, i32 8, !dbg !18518
  store i8* %overflow_arg_area.next14, i8** %overflow_arg_area_p12, align 8, !dbg !18518
  br label %vaarg.end15, !dbg !18518

vaarg.end15:                                      ; preds = %vaarg.in_mem11, %vaarg.in_reg9
  %vaarg.addr16 = phi i32* [ %11, %vaarg.in_reg9 ], [ %13, %vaarg.in_mem11 ], !dbg !18518
  %14 = load i32, i32* %vaarg.addr16, align 4, !dbg !18518
  store i32 %14, i32* %target4, align 4, !dbg !18517
  %15 = load i32, i32* %fd.addr, align 4, !dbg !18519
  %16 = load i32, i32* %target4, align 4, !dbg !18520
  %call17 = call i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %15, i32 %16), !dbg !18521
  store i32 %call17, i32* %result, align 4, !dbg !18522
  br label %sw.epilog48, !dbg !18523

sw.default:                                       ; preds = %entry
  %17 = load i32, i32* %action.addr, align 4, !dbg !18524
  switch i32 %17, label %sw.default34 [
    i32 1, label %sw.bb18
    i32 3, label %sw.bb18
    i32 1025, label %sw.bb18
    i32 9, label %sw.bb18
    i32 1032, label %sw.bb18
    i32 11, label %sw.bb18
    i32 0, label %sw.bb20
    i32 1030, label %sw.bb20
    i32 1026, label %sw.bb20
    i32 2, label %sw.bb20
    i32 4, label %sw.bb20
    i32 1024, label %sw.bb20
    i32 8, label %sw.bb20
    i32 1031, label %sw.bb20
    i32 10, label %sw.bb20
  ], !dbg !18526

sw.bb18:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %18 = load i32, i32* %fd.addr, align 4, !dbg !18527
  %19 = load i32, i32* %action.addr, align 4, !dbg !18529
  %call19 = call i32 (i32, i32, ...) @fcntl(i32 %18, i32 %19), !dbg !18530
  store i32 %call19, i32* %result, align 4, !dbg !18531
  br label %sw.epilog, !dbg !18532

sw.bb20:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  call void @llvm.dbg.declare(metadata i32* %x, metadata !18533, metadata !DIExpression()), !dbg !18535
  %arraydecay21 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18536, !ctir !1130
  %gp_offset_p22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 0, !dbg !18536
  %gp_offset23 = load i32, i32* %gp_offset_p22, align 16, !dbg !18536
  %fits_in_gp24 = icmp ule i32 %gp_offset23, 40, !dbg !18536
  br i1 %fits_in_gp24, label %vaarg.in_reg25, label %vaarg.in_mem27, !dbg !18536

vaarg.in_reg25:                                   ; preds = %sw.bb20
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 3, !dbg !18536
  %reg_save_area26 = load i8*, i8** %20, align 16, !dbg !18536
  %21 = getelementptr i8, i8* %reg_save_area26, i32 %gp_offset23, !dbg !18536
  %22 = bitcast i8* %21 to i32*, !dbg !18536
  %23 = add i32 %gp_offset23, 8, !dbg !18536
  store i32 %23, i32* %gp_offset_p22, align 16, !dbg !18536
  br label %vaarg.end31, !dbg !18536

vaarg.in_mem27:                                   ; preds = %sw.bb20
  %overflow_arg_area_p28 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay21, i32 0, i32 2, !dbg !18536
  %overflow_arg_area29 = load i8*, i8** %overflow_arg_area_p28, align 8, !dbg !18536
  %24 = bitcast i8* %overflow_arg_area29 to i32*, !dbg !18536
  %overflow_arg_area.next30 = getelementptr i8, i8* %overflow_arg_area29, i32 8, !dbg !18536
  store i8* %overflow_arg_area.next30, i8** %overflow_arg_area_p28, align 8, !dbg !18536
  br label %vaarg.end31, !dbg !18536

vaarg.end31:                                      ; preds = %vaarg.in_mem27, %vaarg.in_reg25
  %vaarg.addr32 = phi i32* [ %22, %vaarg.in_reg25 ], [ %24, %vaarg.in_mem27 ], !dbg !18536
  %25 = load i32, i32* %vaarg.addr32, align 4, !dbg !18536
  store i32 %25, i32* %x, align 4, !dbg !18535
  %26 = load i32, i32* %fd.addr, align 4, !dbg !18537
  %27 = load i32, i32* %action.addr, align 4, !dbg !18538
  %28 = load i32, i32* %x, align 4, !dbg !18539
  %call33 = call i32 (i32, i32, ...) @fcntl(i32 %26, i32 %27, i32 %28), !dbg !18540
  store i32 %call33, i32* %result, align 4, !dbg !18541
  br label %sw.epilog, !dbg !18542

sw.default34:                                     ; preds = %sw.default
  call void @llvm.dbg.declare(metadata i8** %p, metadata !18543, metadata !DIExpression()), !dbg !18545
  %arraydecay35 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18546, !ctir !1130
  %gp_offset_p36 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 0, !dbg !18546
  %gp_offset37 = load i32, i32* %gp_offset_p36, align 16, !dbg !18546
  %fits_in_gp38 = icmp ule i32 %gp_offset37, 40, !dbg !18546
  br i1 %fits_in_gp38, label %vaarg.in_reg39, label %vaarg.in_mem41, !dbg !18546

vaarg.in_reg39:                                   ; preds = %sw.default34
  %29 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 3, !dbg !18546
  %reg_save_area40 = load i8*, i8** %29, align 16, !dbg !18546
  %30 = getelementptr i8, i8* %reg_save_area40, i32 %gp_offset37, !dbg !18546
  %31 = bitcast i8* %30 to i8**, !dbg !18546
  %32 = add i32 %gp_offset37, 8, !dbg !18546
  store i32 %32, i32* %gp_offset_p36, align 16, !dbg !18546
  br label %vaarg.end45, !dbg !18546

vaarg.in_mem41:                                   ; preds = %sw.default34
  %overflow_arg_area_p42 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay35, i32 0, i32 2, !dbg !18546
  %overflow_arg_area43 = load i8*, i8** %overflow_arg_area_p42, align 8, !dbg !18546
  %33 = bitcast i8* %overflow_arg_area43 to i8**, !dbg !18546
  %overflow_arg_area.next44 = getelementptr i8, i8* %overflow_arg_area43, i32 8, !dbg !18546
  store i8* %overflow_arg_area.next44, i8** %overflow_arg_area_p42, align 8, !dbg !18546
  br label %vaarg.end45, !dbg !18546

vaarg.end45:                                      ; preds = %vaarg.in_mem41, %vaarg.in_reg39
  %vaarg.addr46 = phi i8** [ %31, %vaarg.in_reg39 ], [ %33, %vaarg.in_mem41 ], !dbg !18546
  %34 = load i8*, i8** %vaarg.addr46, align 8, !dbg !18546
  store i8* %34, i8** %p, align 8, !dbg !18545
  %35 = load i32, i32* %fd.addr, align 4, !dbg !18547
  %36 = load i32, i32* %action.addr, align 4, !dbg !18548
  %37 = load i8*, i8** %p, align 8, !dbg !18549
  %call47 = call i32 (i32, i32, ...) @fcntl(i32 %35, i32 %36, i8* %37), !dbg !18550
  store i32 %call47, i32* %result, align 4, !dbg !18551
  br label %sw.epilog, !dbg !18552

sw.epilog:                                        ; preds = %vaarg.end45, %vaarg.end31, %sw.bb18
  br label %sw.epilog48, !dbg !18553

sw.epilog48:                                      ; preds = %sw.epilog, %vaarg.end15, %vaarg.end
  %arraydecay49 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %arg, i64 0, i64 0, !dbg !18554, !ctir !1130
  %arraydecay4950 = bitcast %struct.__va_list_tag* %arraydecay49 to i8*, !dbg !18554
  call void @llvm.va_end(i8* %arraydecay4950), !dbg !18554
  %38 = load i32, i32* %result, align 4, !dbg !18555
  ret i32 %38, !dbg !18556
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD(i32 %fd, i32 %target) #4 !dbg !18557 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4, !ctir !5
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !18558, metadata !DIExpression()), !dbg !18559
  store i32 %target, i32* %target.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target.addr, metadata !18560, metadata !DIExpression()), !dbg !18561
  call void @llvm.dbg.declare(metadata i32* %result, metadata !18562, metadata !DIExpression()), !dbg !18563
  %0 = load i32, i32* %fd.addr, align 4, !dbg !18564
  %1 = load i32, i32* %target.addr, align 4, !dbg !18565
  %call = call i32 (i32, i32, ...) @fcntl(i32 %0, i32 0, i32 %1), !dbg !18566
  store i32 %call, i32* %result, align 4, !dbg !18567
  %2 = load i32, i32* %result, align 4, !dbg !18568
  ret i32 %2, !dbg !18569
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %fd, i32 %target) #4 !dbg !1123 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4, !ctir !5
  %flags = alloca i32, align 4, !ctir !5
  %saved_errno = alloca i32, align 4, !ctir !5
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !18570, metadata !DIExpression()), !dbg !18571
  store i32 %target, i32* %target.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target.addr, metadata !18572, metadata !DIExpression()), !dbg !18573
  call void @llvm.dbg.declare(metadata i32* %result, metadata !18574, metadata !DIExpression()), !dbg !18575
  %0 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !dbg !18576
  %cmp = icmp sle i32 0, %0, !dbg !18578
  br i1 %cmp, label %if.then, label %if.else9, !dbg !18579

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !dbg !18580
  %2 = load i32, i32* %target.addr, align 4, !dbg !18582
  %call = call i32 (i32, i32, ...) @fcntl(i32 %1, i32 1030, i32 %2), !dbg !18583
  store i32 %call, i32* %result, align 4, !dbg !18584
  %3 = load i32, i32* %result, align 4, !dbg !18585
  %cmp1 = icmp sle i32 0, %3, !dbg !18587
  br i1 %cmp1, label %if.then4, label %lor.lhs.false, !dbg !18588

lor.lhs.false:                                    ; preds = %if.then
  %call2 = call i32* @__errno_location() #16, !dbg !18589
  %4 = load i32, i32* %call2, align 4, !dbg !18589, !ctir !5
  %cmp3 = icmp ne i32 %4, 22, !dbg !18590
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !18591

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !dbg !18592
  br label %if.end8, !dbg !18594

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %fd.addr, align 4, !dbg !18595
  %6 = load i32, i32* %target.addr, align 4, !dbg !18597
  %call5 = call i32 @rpl_fcntl_DUPFD(i32 %5, i32 %6), !dbg !18598
  store i32 %call5, i32* %result, align 4, !dbg !18599
  %7 = load i32, i32* %result, align 4, !dbg !18600
  %cmp6 = icmp sge i32 %7, 0, !dbg !18602
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !18603

if.then7:                                         ; preds = %if.else
  store i32 -1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !dbg !18604
  br label %if.end, !dbg !18605

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  br label %if.end11, !dbg !18606

if.else9:                                         ; preds = %entry
  %8 = load i32, i32* %fd.addr, align 4, !dbg !18607
  %9 = load i32, i32* %target.addr, align 4, !dbg !18608
  %call10 = call i32 @rpl_fcntl_DUPFD(i32 %8, i32 %9), !dbg !18609
  store i32 %call10, i32* %result, align 4, !dbg !18610
  br label %if.end11

if.end11:                                         ; preds = %if.else9, %if.end8
  %10 = load i32, i32* %result, align 4, !dbg !18611
  %cmp12 = icmp sle i32 0, %10, !dbg !18613
  br i1 %cmp12, label %land.lhs.true, label %if.end25, !dbg !18614

land.lhs.true:                                    ; preds = %if.end11
  %11 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4, !dbg !18615
  %cmp13 = icmp eq i32 %11, -1, !dbg !18616
  br i1 %cmp13, label %if.then14, label %if.end25, !dbg !18617

if.then14:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !18618, metadata !DIExpression()), !dbg !18620
  %12 = load i32, i32* %result, align 4, !dbg !18621
  %call15 = call i32 (i32, i32, ...) @fcntl(i32 %12, i32 1), !dbg !18622
  store i32 %call15, i32* %flags, align 4, !dbg !18620
  %13 = load i32, i32* %flags, align 4, !dbg !18623
  %cmp16 = icmp slt i32 %13, 0, !dbg !18625
  br i1 %cmp16, label %if.then20, label %lor.lhs.false17, !dbg !18626

lor.lhs.false17:                                  ; preds = %if.then14
  %14 = load i32, i32* %result, align 4, !dbg !18627
  %15 = load i32, i32* %flags, align 4, !dbg !18628
  %or = or i32 %15, 1, !dbg !18629
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 %14, i32 2, i32 %or), !dbg !18630
  %cmp19 = icmp eq i32 %call18, -1, !dbg !18631
  br i1 %cmp19, label %if.then20, label %if.end24, !dbg !18632

if.then20:                                        ; preds = %lor.lhs.false17, %if.then14
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !18633, metadata !DIExpression()), !dbg !18635
  %call21 = call i32* @__errno_location() #16, !dbg !18636
  %16 = load i32, i32* %call21, align 4, !dbg !18636, !ctir !5
  store i32 %16, i32* %saved_errno, align 4, !dbg !18635
  %17 = load i32, i32* %result, align 4, !dbg !18637
  %call22 = call i32 @close(i32 %17), !dbg !18638
  %18 = load i32, i32* %saved_errno, align 4, !dbg !18639
  %call23 = call i32* @__errno_location() #16, !dbg !18640
  store i32 %18, i32* %call23, align 4, !dbg !18641, !ctir !5
  store i32 -1, i32* %result, align 4, !dbg !18642
  br label %if.end24, !dbg !18643

if.end24:                                         ; preds = %if.then20, %lor.lhs.false17
  br label %if.end25, !dbg !18644

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %if.end11
  %19 = load i32, i32* %result, align 4, !dbg !18645
  ret i32 %19, !dbg !18646
}

declare dso_local i32 @fcntl(i32, i32, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fflush(%struct._IO_FILE* %stream) #4 !dbg !18647 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !18652, metadata !DIExpression()), !dbg !18653
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18654
  %cmp = icmp eq %struct._IO_FILE* %0, null, !dbg !18656
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !18657

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18658
  %call = call i32 @__freading(%struct._IO_FILE* %1) #12, !dbg !18658
  %cmp1 = icmp ne i32 %call, 0, !dbg !18658
  br i1 %cmp1, label %if.end, label %if.then, !dbg !18659

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18660
  %call2 = call i32 @fflush(%struct._IO_FILE* %2), !dbg !18661
  store i32 %call2, i32* %retval, align 4, !dbg !18662
  br label %return, !dbg !18662

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18663
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %3), !dbg !18664
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !18665
  %call3 = call i32 @fflush(%struct._IO_FILE* %4), !dbg !18666
  store i32 %call3, i32* %retval, align 4, !dbg !18667
  br label %return, !dbg !18667

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !18668
  ret i32 %5, !dbg !18668
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %fp) #4 !dbg !18669 {
entry:
  %fp.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !18672, metadata !DIExpression()), !dbg !18673
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18674
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 0, !dbg !18676, !ctir !1556
  %1 = load i32, i32* %_flags, align 8, !dbg !18676, !ctir !5
  %and = and i32 %1, 256, !dbg !18677
  %tobool = icmp ne i32 %and, 0, !dbg !18677
  br i1 %tobool, label %if.then, label %if.end, !dbg !18678

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18679
  %call = call i32 @rpl_fseeko(%struct._IO_FILE* %2, i64 0, i32 1), !dbg !18680
  br label %if.end, !dbg !18680

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !18681
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fseeko(%struct._IO_FILE* nonnull %fp, i64 %offset, i32 %whence) #4 !dbg !18682 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca %struct._IO_FILE*, align 8
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %pos = alloca i64, align 8, !ctir !1637
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp.addr, metadata !18687, metadata !DIExpression()), !dbg !18688
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !18689, metadata !DIExpression()), !dbg !18690
  store i32 %whence, i32* %whence.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %whence.addr, metadata !18691, metadata !DIExpression()), !dbg !18692
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18693
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i32 0, i32 2, !dbg !18695, !ctir !1598
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !18695, !ctir !7
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18696
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %2, i32 0, i32 1, !dbg !18697, !ctir !1598
  %3 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !18697, !ctir !7
  %cmp = icmp eq i8* %1, %3, !dbg !18698
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !18699

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18700
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %4, i32 0, i32 5, !dbg !18701, !ctir !1598
  %5 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !18701, !ctir !7
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18702
  %_IO_write_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %6, i32 0, i32 4, !dbg !18703, !ctir !1598
  %7 = load i8*, i8** %_IO_write_base, align 8, !dbg !18703, !ctir !7
  %cmp1 = icmp eq i8* %5, %7, !dbg !18704
  br i1 %cmp1, label %land.lhs.true2, label %if.end7, !dbg !18705

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18706
  %_IO_save_base = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %8, i32 0, i32 9, !dbg !18707, !ctir !1598
  %9 = load i8*, i8** %_IO_save_base, align 8, !dbg !18707, !ctir !7
  %cmp3 = icmp eq i8* %9, null, !dbg !18708
  br i1 %cmp3, label %if.then, label %if.end7, !dbg !18709

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !18710, metadata !DIExpression()), !dbg !18712
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18713
  %call = call i32 @fileno(%struct._IO_FILE* %10) #12, !dbg !18714
  %11 = load i64, i64* %offset.addr, align 8, !dbg !18715
  %12 = load i32, i32* %whence.addr, align 4, !dbg !18716
  %call4 = call i64 @lseek(i32 %call, i64 %11, i32 %12) #12, !dbg !18717
  store i64 %call4, i64* %pos, align 8, !dbg !18712
  %13 = load i64, i64* %pos, align 8, !dbg !18718
  %cmp5 = icmp eq i64 %13, -1, !dbg !18720
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !18721

if.then6:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !18722
  br label %return, !dbg !18722

if.end:                                           ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18724
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %14, i32 0, i32 0, !dbg !18725, !ctir !1598
  %15 = load i32, i32* %_flags, align 8, !dbg !18726, !ctir !5
  %and = and i32 %15, -17, !dbg !18726
  store i32 %and, i32* %_flags, align 8, !dbg !18726, !ctir !5
  %16 = load i64, i64* %pos, align 8, !dbg !18727
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18728
  %_offset = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 21, !dbg !18729, !ctir !1598
  store i64 %16, i64* %_offset, align 8, !dbg !18730, !ctir !45
  store i32 0, i32* %retval, align 4, !dbg !18731
  br label %return, !dbg !18731

if.end7:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8, !dbg !18732
  %19 = load i64, i64* %offset.addr, align 8, !dbg !18733
  %20 = load i32, i32* %whence.addr, align 4, !dbg !18734
  %call8 = call i32 @fseeko(%struct._IO_FILE* %18, i64 %19, i32 %20), !dbg !18735
  store i32 %call8, i32* %retval, align 4, !dbg !18736
  br label %return, !dbg !18736

return:                                           ; preds = %if.end7, %if.end, %if.then6
  %21 = load i32, i32* %retval, align 4, !dbg !18737
  ret i32 %21, !dbg !18737
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrtowc(i32* %pwc, i8* %s, i64 %n, %struct.__mbstate_t* %ps) #4 !dbg !18738 {
entry:
  %retval = alloca i64, align 8
  %pwc.addr = alloca i32*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca %struct.__mbstate_t*, align 8
  %ret = alloca i64, align 8, !ctir !52
  %wc = alloca i32, align 4, !ctir !1094
  %uc = alloca i8, align 1, !ctir !535
  store i32* %pwc, i32** %pwc.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pwc.addr, metadata !18754, metadata !DIExpression()), !dbg !18755
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !18756, metadata !DIExpression()), !dbg !18757
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !18758, metadata !DIExpression()), !dbg !18759
  store %struct.__mbstate_t* %ps, %struct.__mbstate_t** %ps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %ps.addr, metadata !18760, metadata !DIExpression()), !dbg !18761
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !18762, metadata !DIExpression()), !dbg !18763
  call void @llvm.dbg.declare(metadata i32* %wc, metadata !18764, metadata !DIExpression()), !dbg !18765
  %0 = load i32*, i32** %pwc.addr, align 8, !dbg !18766
  %tobool = icmp ne i32* %0, null, !dbg !18766
  br i1 %tobool, label %if.end, label %if.then, !dbg !18768

if.then:                                          ; preds = %entry
  store i32* %wc, i32** %pwc.addr, align 8, !dbg !18769
  br label %if.end, !dbg !18770

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32*, i32** %pwc.addr, align 8, !dbg !18771
  %2 = load i8*, i8** %s.addr, align 8, !dbg !18772
  %3 = load i64, i64* %n.addr, align 8, !dbg !18773
  %4 = load %struct.__mbstate_t*, %struct.__mbstate_t** %ps.addr, align 8, !dbg !18774
  %call = call i64 @mbrtowc(i32* %1, i8* %2, i64 %3, %struct.__mbstate_t* %4) #12, !dbg !18775
  store i64 %call, i64* %ret, align 8, !dbg !18776
  %5 = load i64, i64* %ret, align 8, !dbg !18777
  %cmp = icmp ule i64 -2, %5, !dbg !18779
  br i1 %cmp, label %land.lhs.true, label %if.end5, !dbg !18780

land.lhs.true:                                    ; preds = %if.end
  %6 = load i64, i64* %n.addr, align 8, !dbg !18781
  %cmp1 = icmp ne i64 %6, 0, !dbg !18782
  br i1 %cmp1, label %land.lhs.true2, label %if.end5, !dbg !18783

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call3 = call zeroext i1 @hard_locale(i32 0), !dbg !18784
  br i1 %call3, label %if.end5, label %if.then4, !dbg !18785

if.then4:                                         ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i8* %uc, metadata !18786, metadata !DIExpression()), !dbg !18788
  %7 = load i8*, i8** %s.addr, align 8, !dbg !18789
  %8 = load i8, i8* %7, align 1, !dbg !18790, !ctir !91
  store i8 %8, i8* %uc, align 1, !dbg !18788
  %9 = load i8, i8* %uc, align 1, !dbg !18791
  %conv = zext i8 %9 to i32, !dbg !18791
  %10 = load i32*, i32** %pwc.addr, align 8, !dbg !18792
  store i32 %conv, i32* %10, align 4, !dbg !18793, !ctir !1094
  store i64 1, i64* %retval, align 8, !dbg !18794
  br label %return, !dbg !18794

if.end5:                                          ; preds = %land.lhs.true2, %land.lhs.true, %if.end
  %11 = load i64, i64* %ret, align 8, !dbg !18795
  store i64 %11, i64* %retval, align 8, !dbg !18796
  br label %return, !dbg !18796

return:                                           ; preds = %if.end5, %if.then4
  %12 = load i64, i64* %retval, align 8, !dbg !18797
  ret i64 %12, !dbg !18797
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_nanosleep(%struct.timespec* nonnull %requested_delay, %struct.timespec* %remaining_delay) #4 !dbg !18798 {
entry:
  %retval = alloca i32, align 4
  %requested_delay.addr = alloca %struct.timespec*, align 8
  %remaining_delay.addr = alloca %struct.timespec*, align 8
  %limit = alloca i64, align 8, !ctir !1644
  %seconds = alloca i64, align 8, !ctir !1645
  %intermediate = alloca %struct.timespec, align 8, !ctir !18804
  %result = alloca i32, align 4, !ctir !5
  store %struct.timespec* %requested_delay, %struct.timespec** %requested_delay.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec** %requested_delay.addr, metadata !18809, metadata !DIExpression()), !dbg !18810
  store %struct.timespec* %remaining_delay, %struct.timespec** %remaining_delay.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec** %remaining_delay.addr, metadata !18811, metadata !DIExpression()), !dbg !18812
  %0 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !dbg !18813
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %0, i32 0, i32 1, !dbg !18815, !ctir !18803
  %1 = load i64, i64* %tv_nsec, align 8, !dbg !18815, !ctir !511
  %cmp = icmp slt i64 %1, 0, !dbg !18816
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !18817

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !dbg !18818
  %tv_nsec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1, !dbg !18819, !ctir !18803
  %3 = load i64, i64* %tv_nsec1, align 8, !dbg !18819, !ctir !511
  %cmp2 = icmp sle i64 1000000000, %3, !dbg !18820
  br i1 %cmp2, label %if.then, label %if.end, !dbg !18821

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32* @__errno_location() #16, !dbg !18822
  store i32 22, i32* %call, align 4, !dbg !18824, !ctir !5
  store i32 -1, i32* %retval, align 4, !dbg !18825
  br label %return, !dbg !18825

if.end:                                           ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i64* %limit, metadata !18826, metadata !DIExpression()), !dbg !18828
  store i64 2073600, i64* %limit, align 8, !dbg !18828
  call void @llvm.dbg.declare(metadata i64* %seconds, metadata !18829, metadata !DIExpression()), !dbg !18830
  %4 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !dbg !18831
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %4, i32 0, i32 0, !dbg !18832, !ctir !18803
  %5 = load i64, i64* %tv_sec, align 8, !dbg !18832, !ctir !509
  store i64 %5, i64* %seconds, align 8, !dbg !18830
  call void @llvm.dbg.declare(metadata %struct.timespec* %intermediate, metadata !18833, metadata !DIExpression()), !dbg !18834
  %6 = load %struct.timespec*, %struct.timespec** %requested_delay.addr, align 8, !dbg !18835
  %tv_nsec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 1, !dbg !18836, !ctir !18803
  %7 = load i64, i64* %tv_nsec3, align 8, !dbg !18836, !ctir !511
  %tv_nsec4 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 1, !dbg !18837, !ctir !18804
  store i64 %7, i64* %tv_nsec4, align 8, !dbg !18838, !ctir !511
  br label %while.cond, !dbg !18839

while.cond:                                       ; preds = %if.end13, %if.end
  %8 = load i64, i64* %seconds, align 8, !dbg !18840
  %cmp5 = icmp slt i64 2073600, %8, !dbg !18841
  br i1 %cmp5, label %while.body, label %while.end, !dbg !18839

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %result, metadata !18842, metadata !DIExpression()), !dbg !18844
  %tv_sec6 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 0, !dbg !18845, !ctir !18804
  store i64 2073600, i64* %tv_sec6, align 8, !dbg !18846, !ctir !509
  %9 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !dbg !18847
  %call7 = call i32 @nanosleep(%struct.timespec* %intermediate, %struct.timespec* %9), !dbg !18848
  store i32 %call7, i32* %result, align 4, !dbg !18849
  %10 = load i64, i64* %seconds, align 8, !dbg !18850
  %sub = sub nsw i64 %10, 2073600, !dbg !18850
  store i64 %sub, i64* %seconds, align 8, !dbg !18850
  %11 = load i32, i32* %result, align 4, !dbg !18851
  %tobool = icmp ne i32 %11, 0, !dbg !18851
  br i1 %tobool, label %if.then8, label %if.end13, !dbg !18853

if.then8:                                         ; preds = %while.body
  %12 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !dbg !18854
  %tobool9 = icmp ne %struct.timespec* %12, null, !dbg !18854
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !18857

if.then10:                                        ; preds = %if.then8
  %13 = load i64, i64* %seconds, align 8, !dbg !18858
  %14 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !dbg !18859
  %tv_sec11 = getelementptr inbounds %struct.timespec, %struct.timespec* %14, i32 0, i32 0, !dbg !18860, !ctir !18804
  %15 = load i64, i64* %tv_sec11, align 8, !dbg !18861, !ctir !509
  %add = add nsw i64 %15, %13, !dbg !18861
  store i64 %add, i64* %tv_sec11, align 8, !dbg !18861, !ctir !509
  br label %if.end12, !dbg !18859

if.end12:                                         ; preds = %if.then10, %if.then8
  %16 = load i32, i32* %result, align 4, !dbg !18862
  store i32 %16, i32* %retval, align 4, !dbg !18863
  br label %return, !dbg !18863

if.end13:                                         ; preds = %while.body
  %tv_nsec14 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 1, !dbg !18864, !ctir !18804
  store i64 0, i64* %tv_nsec14, align 8, !dbg !18865, !ctir !511
  br label %while.cond, !dbg !18839, !llvm.loop !18866

while.end:                                        ; preds = %while.cond
  %17 = load i64, i64* %seconds, align 8, !dbg !18868
  %tv_sec15 = getelementptr inbounds %struct.timespec, %struct.timespec* %intermediate, i32 0, i32 0, !dbg !18869, !ctir !18804
  store i64 %17, i64* %tv_sec15, align 8, !dbg !18870, !ctir !509
  %18 = load %struct.timespec*, %struct.timespec** %remaining_delay.addr, align 8, !dbg !18871
  %call16 = call i32 @nanosleep(%struct.timespec* %intermediate, %struct.timespec* %18), !dbg !18872
  store i32 %call16, i32* %retval, align 4, !dbg !18873
  br label %return, !dbg !18873

return:                                           ; preds = %while.end, %if.end12, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !18874
  ret i32 %19, !dbg !18874
}

declare dso_local i32 @nanosleep(%struct.timespec*, %struct.timespec*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @rpl_nl_langinfo(i32 %item) #4 !dbg !18875 {
entry:
  %item.addr = alloca i32, align 4
  store i32 %item, i32* %item.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %item.addr, metadata !18881, metadata !DIExpression()), !dbg !18882
  %0 = load i32, i32* %item.addr, align 4, !dbg !18883
  switch i32 %0, label %sw.default [
    i32 10200, label %sw.bb
    i32 10201, label %sw.bb
    i32 10202, label %sw.bb
    i32 10203, label %sw.bb
    i32 10204, label %sw.bb
    i32 10205, label %sw.bb
    i32 10206, label %sw.bb
    i32 10207, label %sw.bb
    i32 10208, label %sw.bb
    i32 10209, label %sw.bb
    i32 10210, label %sw.bb
    i32 10211, label %sw.bb
  ], !dbg !18884

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %item.addr, align 4, !dbg !18885
  %sub = sub nsw i32 %1, 10200, !dbg !18887
  %add = add nsw i32 %sub, 131098, !dbg !18888
  store i32 %add, i32* %item.addr, align 4, !dbg !18889
  br label %sw.epilog, !dbg !18890

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !18891

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %2 = load i32, i32* %item.addr, align 4, !dbg !18892
  %call = call i8* @nl_langinfo(i32 %2) #12, !dbg !18893
  ret i8* %call, !dbg !18894
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @print_and_abort() #0 !dbg !18895 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !18896
  %call = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.389, i64 0, i64 0)) #12, !dbg !18897
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.390, i64 0, i64 0), i8* %call), !dbg !18898
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !18899
  call void @exit(i32 %1) #13, !dbg !18900
  unreachable, !dbg !18900
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i64)* %chunkfun, void (i8*)* %freefun) #4 !dbg !18901 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i64)*, align 8
  %freefun.addr = alloca void (i8*)*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !18905, metadata !DIExpression()), !dbg !18906
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !18907, metadata !DIExpression()), !dbg !18908
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !18909, metadata !DIExpression()), !dbg !18910
  store i8* (i64)* %chunkfun, i8* (i64)** %chunkfun.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i64)** %chunkfun.addr, metadata !18911, metadata !DIExpression()), !dbg !18912
  store void (i8*)* %freefun, void (i8*)** %freefun.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %freefun.addr, metadata !18913, metadata !DIExpression()), !dbg !18914
  %0 = load i8* (i64)*, i8* (i64)** %chunkfun.addr, align 8, !dbg !18915
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18916
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !18917, !ctir !1148
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**, !dbg !18918
  store i8* (i64)* %0, i8* (i64)** %plain, align 8, !dbg !18919, !ctir !1146
  %2 = load void (i8*)*, void (i8*)** %freefun.addr, align 8, !dbg !18920
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18921
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8, !dbg !18922, !ctir !1148
  %plain3 = bitcast %union.anon.1* %freefun2 to void (i8*)**, !dbg !18923
  store void (i8*)* %2, void (i8*)** %plain3, align 8, !dbg !18924, !ctir !1169
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18925
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 10, !dbg !18926, !ctir !1148
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !18927
  %bf.clear = and i8 %bf.load, -2, !dbg !18927
  store i8 %bf.clear, i8* %use_extra_arg, align 8, !dbg !18927
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18928
  %6 = load i64, i64* %size.addr, align 8, !dbg !18929
  %7 = load i64, i64* %alignment.addr, align 8, !dbg !18930
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %5, i64 %6, i64 %7), !dbg !18931
  ret i32 %call, !dbg !18932
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_obstack_begin_worker(%struct.obstack* %h, i64 %size, i64 %alignment) #4 !dbg !18933 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %extra = alloca i32, align 4, !ctir !5
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !18936, metadata !DIExpression()), !dbg !18937
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !18938, metadata !DIExpression()), !dbg !18939
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !18940, metadata !DIExpression()), !dbg !18941
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %chunk, metadata !18942, metadata !DIExpression()), !dbg !18943
  %0 = load i64, i64* %alignment.addr, align 8, !dbg !18944
  %cmp = icmp eq i64 %0, 0, !dbg !18946
  br i1 %cmp, label %if.then, label %if.end, !dbg !18947

if.then:                                          ; preds = %entry
  store i64 16, i64* %alignment.addr, align 8, !dbg !18948
  br label %if.end, !dbg !18949

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %size.addr, align 8, !dbg !18950
  %cmp1 = icmp eq i64 %1, 0, !dbg !18952
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !18953

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %extra, metadata !18954, metadata !DIExpression()), !dbg !18956
  store i32 32, i32* %extra, align 4, !dbg !18956
  %2 = load i32, i32* %extra, align 4, !dbg !18957
  %sub = sub nsw i32 4096, %2, !dbg !18958
  %conv = sext i32 %sub to i64, !dbg !18959
  store i64 %conv, i64* %size.addr, align 8, !dbg !18960
  br label %if.end3, !dbg !18961

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i64, i64* %size.addr, align 8, !dbg !18962
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18963
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 0, !dbg !18964, !ctir !1148
  store i64 %3, i64* %chunk_size, align 8, !dbg !18965, !ctir !52
  %5 = load i64, i64* %alignment.addr, align 8, !dbg !18966
  %sub4 = sub i64 %5, 1, !dbg !18967
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18968
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 6, !dbg !18969, !ctir !1148
  store i64 %sub4, i64* %alignment_mask, align 8, !dbg !18970, !ctir !52
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18971
  %8 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18972
  %chunk_size5 = getelementptr inbounds %struct.obstack, %struct.obstack* %8, i32 0, i32 0, !dbg !18973, !ctir !1148
  %9 = load i64, i64* %chunk_size5, align 8, !dbg !18973, !ctir !52
  %call = call i8* @call_chunkfun(%struct.obstack* %7, i64 %9), !dbg !18974
  %10 = bitcast i8* %call to %struct._obstack_chunk*, !dbg !18974
  %11 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18975
  %chunk6 = getelementptr inbounds %struct.obstack, %struct.obstack* %11, i32 0, i32 1, !dbg !18976, !ctir !1148
  store %struct._obstack_chunk* %10, %struct._obstack_chunk** %chunk6, align 8, !dbg !18977, !ctir !1152
  store %struct._obstack_chunk* %10, %struct._obstack_chunk** %chunk, align 8, !dbg !18978
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !18979
  %tobool = icmp ne %struct._obstack_chunk* %12, null, !dbg !18979
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !18981

if.then7:                                         ; preds = %if.end3
  %13 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !dbg !18982
  call void %13() #15, !dbg !18983
  unreachable, !dbg !18983

if.end8:                                          ; preds = %if.end3
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !18984
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %14, i32 0, i32 2, !dbg !18984, !ctir !1153
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0, !dbg !18984, !ctir !417
  %sub.ptr.lhs.cast = ptrtoint i8* %arraydecay to i64, !dbg !18984
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, 0, !dbg !18984
  %15 = load i64, i64* %alignment.addr, align 8, !dbg !18984
  %sub9 = sub i64 %15, 1, !dbg !18984
  %add = add i64 %sub.ptr.sub, %sub9, !dbg !18984
  %16 = load i64, i64* %alignment.addr, align 8, !dbg !18984
  %sub10 = sub i64 %16, 1, !dbg !18984
  %neg = xor i64 %sub10, -1, !dbg !18984
  %and = and i64 %add, %neg, !dbg !18984
  %add.ptr = getelementptr inbounds i8, i8* null, i64 %and, !dbg !18984, !ctir !8
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18985
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 2, !dbg !18986, !ctir !1148
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !18987, !ctir !7
  %18 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18988
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3, !dbg !18989, !ctir !1148
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !18990, !ctir !7
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !18991
  %20 = bitcast %struct._obstack_chunk* %19 to i8*, !dbg !18992
  %21 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18993
  %chunk_size11 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 0, !dbg !18994, !ctir !1148
  %22 = load i64, i64* %chunk_size11, align 8, !dbg !18994, !ctir !52
  %add.ptr12 = getelementptr inbounds i8, i8* %20, i64 %22, !dbg !18995, !ctir !8
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !18996
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %23, i32 0, i32 0, !dbg !18997, !ctir !1153
  store i8* %add.ptr12, i8** %limit, align 8, !dbg !18998, !ctir !7
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !18999
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 4, !dbg !19000, !ctir !1148
  store i8* %add.ptr12, i8** %chunk_limit, align 8, !dbg !19001, !ctir !7
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !19002
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %25, i32 0, i32 1, !dbg !19003, !ctir !1153
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %prev, align 8, !dbg !19004, !ctir !1152
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19005
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 10, !dbg !19006, !ctir !1148
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !19007
  %bf.clear = and i8 %bf.load, -3, !dbg !19007
  store i8 %bf.clear, i8* %maybe_empty_object, align 8, !dbg !19007
  %27 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19008
  %alloc_failed = getelementptr inbounds %struct.obstack, %struct.obstack* %27, i32 0, i32 10, !dbg !19009, !ctir !1148
  %bf.load13 = load i8, i8* %alloc_failed, align 8, !dbg !19010
  %bf.clear14 = and i8 %bf.load13, -5, !dbg !19010
  store i8 %bf.clear14, i8* %alloc_failed, align 8, !dbg !19010
  ret i32 1, !dbg !19011
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @call_chunkfun(%struct.obstack* %h, i64 %size) #4 !dbg !19012 {
entry:
  %retval = alloca i8*, align 8
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19015, metadata !DIExpression()), !dbg !19016
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !19017, metadata !DIExpression()), !dbg !19018
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19019
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10, !dbg !19021, !ctir !1148
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !19021
  %bf.clear = and i8 %bf.load, 1, !dbg !19021
  %bf.cast = zext i8 %bf.clear to i32, !dbg !19021
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !19019
  br i1 %tobool, label %if.then, label %if.else, !dbg !19022

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19023
  %chunkfun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !19024, !ctir !1148
  %extra = bitcast %union.anon.0* %chunkfun to i8* (i8*, i64)**, !dbg !19025
  %2 = load i8* (i8*, i64)*, i8* (i8*, i64)** %extra, align 8, !dbg !19025, !ctir !1146
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19026
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9, !dbg !19027, !ctir !1148
  %4 = load i8*, i8** %extra_arg, align 8, !dbg !19027, !ctir !47
  %5 = load i64, i64* %size.addr, align 8, !dbg !19028
  %call = call i8* %2(i8* %4, i64 %5), !dbg !19023
  store i8* %call, i8** %retval, align 8, !dbg !19029
  br label %return, !dbg !19029

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19030
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 7, !dbg !19031, !ctir !1148
  %plain = bitcast %union.anon.0* %chunkfun1 to i8* (i64)**, !dbg !19032
  %7 = load i8* (i64)*, i8* (i64)** %plain, align 8, !dbg !19032, !ctir !1146
  %8 = load i64, i64* %size.addr, align 8, !dbg !19033
  %call2 = call i8* %7(i64 %8), !dbg !19030
  store i8* %call2, i8** %retval, align 8, !dbg !19034
  br label %return, !dbg !19034

return:                                           ; preds = %if.else, %if.then
  %9 = load i8*, i8** %retval, align 8, !dbg !19035
  ret i8* %9, !dbg !19035
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin_1(%struct.obstack* %h, i64 %size, i64 %alignment, i8* (i8*, i64)* %chunkfun, void (i8*, i8*)* %freefun, i8* %arg) #4 !dbg !19036 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca i8* (i8*, i64)*, align 8
  %freefun.addr = alloca void (i8*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19039, metadata !DIExpression()), !dbg !19040
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !19041, metadata !DIExpression()), !dbg !19042
  store i64 %alignment, i64* %alignment.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %alignment.addr, metadata !19043, metadata !DIExpression()), !dbg !19044
  store i8* (i8*, i64)* %chunkfun, i8* (i8*, i64)** %chunkfun.addr, align 8
  call void @llvm.dbg.declare(metadata i8* (i8*, i64)** %chunkfun.addr, metadata !19045, metadata !DIExpression()), !dbg !19046
  store void (i8*, i8*)* %freefun, void (i8*, i8*)** %freefun.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %freefun.addr, metadata !19047, metadata !DIExpression()), !dbg !19048
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !19049, metadata !DIExpression()), !dbg !19050
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** %chunkfun.addr, align 8, !dbg !19051
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19052
  %chunkfun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 7, !dbg !19053, !ctir !1148
  %extra = bitcast %union.anon.0* %chunkfun1 to i8* (i8*, i64)**, !dbg !19054
  store i8* (i8*, i64)* %0, i8* (i8*, i64)** %extra, align 8, !dbg !19055, !ctir !1146
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %freefun.addr, align 8, !dbg !19056
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19057
  %freefun2 = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 8, !dbg !19058, !ctir !1148
  %extra3 = bitcast %union.anon.1* %freefun2 to void (i8*, i8*)**, !dbg !19059
  store void (i8*, i8*)* %2, void (i8*, i8*)** %extra3, align 8, !dbg !19060, !ctir !1169
  %4 = load i8*, i8** %arg.addr, align 8, !dbg !19061
  %5 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19062
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 9, !dbg !19063, !ctir !1148
  store i8* %4, i8** %extra_arg, align 8, !dbg !19064, !ctir !47
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19065
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 10, !dbg !19066, !ctir !1148
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !19067
  %bf.clear = and i8 %bf.load, -2, !dbg !19067
  %bf.set = or i8 %bf.clear, 1, !dbg !19067
  store i8 %bf.set, i8* %use_extra_arg, align 8, !dbg !19067
  %7 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19068
  %8 = load i64, i64* %size.addr, align 8, !dbg !19069
  %9 = load i64, i64* %alignment.addr, align 8, !dbg !19070
  %call = call i32 @_obstack_begin_worker(%struct.obstack* %7, i64 %8, i64 %9), !dbg !19071
  ret i32 %call, !dbg !19072
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_newchunk(%struct.obstack* %h, i64 %length) #4 !dbg !19073 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %length.addr = alloca i64, align 8
  %old_chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %new_chunk = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %obj_size = alloca i64, align 8, !ctir !52
  %object_base1 = alloca i8*, align 8, !ctir !7
  %sum1 = alloca i64, align 8, !ctir !52
  %sum2 = alloca i64, align 8, !ctir !52
  %new_size = alloca i64, align 8, !ctir !52
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19076, metadata !DIExpression()), !dbg !19077
  store i64 %length, i64* %length.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !19078, metadata !DIExpression()), !dbg !19079
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %old_chunk, metadata !19080, metadata !DIExpression()), !dbg !19081
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19082
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !19083, !ctir !1148
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !19083, !ctir !1152
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %old_chunk, align 8, !dbg !19081
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %new_chunk, metadata !19084, metadata !DIExpression()), !dbg !19085
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19085
  call void @llvm.dbg.declare(metadata i64* %obj_size, metadata !19086, metadata !DIExpression()), !dbg !19087
  %2 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19088
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %2, i32 0, i32 3, !dbg !19089, !ctir !1148
  %3 = load i8*, i8** %next_free, align 8, !dbg !19089, !ctir !7
  %4 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19090
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %4, i32 0, i32 2, !dbg !19091, !ctir !1148
  %5 = load i8*, i8** %object_base, align 8, !dbg !19091, !ctir !7
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !19092
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !19092
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !19092
  store i64 %sub.ptr.sub, i64* %obj_size, align 8, !dbg !19087
  call void @llvm.dbg.declare(metadata i8** %object_base1, metadata !19093, metadata !DIExpression()), !dbg !19094
  call void @llvm.dbg.declare(metadata i64* %sum1, metadata !19095, metadata !DIExpression()), !dbg !19096
  %6 = load i64, i64* %obj_size, align 8, !dbg !19097
  %7 = load i64, i64* %length.addr, align 8, !dbg !19098
  %add = add i64 %6, %7, !dbg !19099
  store i64 %add, i64* %sum1, align 8, !dbg !19096
  call void @llvm.dbg.declare(metadata i64* %sum2, metadata !19100, metadata !DIExpression()), !dbg !19101
  %8 = load i64, i64* %sum1, align 8, !dbg !19102
  %9 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19103
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 6, !dbg !19104, !ctir !1148
  %10 = load i64, i64* %alignment_mask, align 8, !dbg !19104, !ctir !52
  %add2 = add i64 %8, %10, !dbg !19105
  store i64 %add2, i64* %sum2, align 8, !dbg !19101
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !19106, metadata !DIExpression()), !dbg !19107
  %11 = load i64, i64* %sum2, align 8, !dbg !19108
  %12 = load i64, i64* %obj_size, align 8, !dbg !19109
  %shr = lshr i64 %12, 3, !dbg !19110
  %add3 = add i64 %11, %shr, !dbg !19111
  %add4 = add i64 %add3, 100, !dbg !19112
  store i64 %add4, i64* %new_size, align 8, !dbg !19107
  %13 = load i64, i64* %new_size, align 8, !dbg !19113
  %14 = load i64, i64* %sum2, align 8, !dbg !19115
  %cmp = icmp ult i64 %13, %14, !dbg !19116
  br i1 %cmp, label %if.then, label %if.end, !dbg !19117

if.then:                                          ; preds = %entry
  %15 = load i64, i64* %sum2, align 8, !dbg !19118
  store i64 %15, i64* %new_size, align 8, !dbg !19119
  br label %if.end, !dbg !19120

if.end:                                           ; preds = %if.then, %entry
  %16 = load i64, i64* %new_size, align 8, !dbg !19121
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19123
  %chunk_size = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 0, !dbg !19124, !ctir !1148
  %18 = load i64, i64* %chunk_size, align 8, !dbg !19124, !ctir !52
  %cmp5 = icmp ult i64 %16, %18, !dbg !19125
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !19126

if.then6:                                         ; preds = %if.end
  %19 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19127
  %chunk_size7 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 0, !dbg !19128, !ctir !1148
  %20 = load i64, i64* %chunk_size7, align 8, !dbg !19128, !ctir !52
  store i64 %20, i64* %new_size, align 8, !dbg !19129
  br label %if.end8, !dbg !19130

if.end8:                                          ; preds = %if.then6, %if.end
  %21 = load i64, i64* %obj_size, align 8, !dbg !19131
  %22 = load i64, i64* %sum1, align 8, !dbg !19133
  %cmp9 = icmp ule i64 %21, %22, !dbg !19134
  br i1 %cmp9, label %land.lhs.true, label %if.end12, !dbg !19135

land.lhs.true:                                    ; preds = %if.end8
  %23 = load i64, i64* %sum1, align 8, !dbg !19136
  %24 = load i64, i64* %sum2, align 8, !dbg !19137
  %cmp10 = icmp ule i64 %23, %24, !dbg !19138
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !19139

if.then11:                                        ; preds = %land.lhs.true
  %25 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19140
  %26 = load i64, i64* %new_size, align 8, !dbg !19141
  %call = call i8* @call_chunkfun(%struct.obstack* %25, i64 %26), !dbg !19142
  %27 = bitcast i8* %call to %struct._obstack_chunk*, !dbg !19142
  store %struct._obstack_chunk* %27, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19143
  br label %if.end12, !dbg !19144

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19145
  %tobool = icmp ne %struct._obstack_chunk* %28, null, !dbg !19145
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !19147

if.then13:                                        ; preds = %if.end12
  %29 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8, !dbg !19148
  call void %29() #15, !dbg !19149
  unreachable, !dbg !19149

if.end14:                                         ; preds = %if.end12
  %30 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19150
  %31 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19151
  %chunk15 = getelementptr inbounds %struct.obstack, %struct.obstack* %31, i32 0, i32 1, !dbg !19152, !ctir !1148
  store %struct._obstack_chunk* %30, %struct._obstack_chunk** %chunk15, align 8, !dbg !19153, !ctir !1152
  %32 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !19154
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19155
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %33, i32 0, i32 1, !dbg !19156, !ctir !1153
  store %struct._obstack_chunk* %32, %struct._obstack_chunk** %prev, align 8, !dbg !19157, !ctir !1152
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19158
  %35 = bitcast %struct._obstack_chunk* %34 to i8*, !dbg !19159
  %36 = load i64, i64* %new_size, align 8, !dbg !19160
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 %36, !dbg !19161, !ctir !8
  %37 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19162
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %37, i32 0, i32 4, !dbg !19163, !ctir !1148
  store i8* %add.ptr, i8** %chunk_limit, align 8, !dbg !19164, !ctir !7
  %38 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19165
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %38, i32 0, i32 0, !dbg !19166, !ctir !1153
  store i8* %add.ptr, i8** %limit, align 8, !dbg !19167, !ctir !7
  %39 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19168
  %contents = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %39, i32 0, i32 2, !dbg !19168, !ctir !1153
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %contents, i64 0, i64 0, !dbg !19168, !ctir !417
  %sub.ptr.lhs.cast16 = ptrtoint i8* %arraydecay to i64, !dbg !19168
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast16, 0, !dbg !19168
  %40 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19168
  %alignment_mask18 = getelementptr inbounds %struct.obstack, %struct.obstack* %40, i32 0, i32 6, !dbg !19168, !ctir !1148
  %41 = load i64, i64* %alignment_mask18, align 8, !dbg !19168, !ctir !52
  %add19 = add i64 %sub.ptr.sub17, %41, !dbg !19168
  %42 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19168
  %alignment_mask20 = getelementptr inbounds %struct.obstack, %struct.obstack* %42, i32 0, i32 6, !dbg !19168, !ctir !1148
  %43 = load i64, i64* %alignment_mask20, align 8, !dbg !19168, !ctir !52
  %neg = xor i64 %43, -1, !dbg !19168
  %and = and i64 %add19, %neg, !dbg !19168
  %add.ptr21 = getelementptr inbounds i8, i8* null, i64 %and, !dbg !19168, !ctir !8
  store i8* %add.ptr21, i8** %object_base1, align 8, !dbg !19169
  %44 = load i8*, i8** %object_base1, align 8, !dbg !19170
  %45 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19171
  %object_base22 = getelementptr inbounds %struct.obstack, %struct.obstack* %45, i32 0, i32 2, !dbg !19172, !ctir !1148
  %46 = load i8*, i8** %object_base22, align 8, !dbg !19172, !ctir !7
  %47 = load i64, i64* %obj_size, align 8, !dbg !19173
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %46, i64 %47, i1 false), !dbg !19174
  %48 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19175
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %48, i32 0, i32 10, !dbg !19177, !ctir !1148
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !19177
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !19177
  %bf.clear = and i8 %bf.lshr, 1, !dbg !19177
  %bf.cast = zext i8 %bf.clear to i32, !dbg !19177
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !19175
  br i1 %tobool23, label %if.end40, label %land.lhs.true24, !dbg !19178

land.lhs.true24:                                  ; preds = %if.end14
  %49 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19179
  %object_base25 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 2, !dbg !19180, !ctir !1148
  %50 = load i8*, i8** %object_base25, align 8, !dbg !19180, !ctir !7
  %51 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !19181
  %contents26 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %51, i32 0, i32 2, !dbg !19181, !ctir !1153
  %arraydecay27 = getelementptr inbounds [0 x i8], [0 x i8]* %contents26, i64 0, i64 0, !dbg !19181, !ctir !417
  %sub.ptr.lhs.cast28 = ptrtoint i8* %arraydecay27 to i64, !dbg !19181
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast28, 0, !dbg !19181
  %52 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19181
  %alignment_mask30 = getelementptr inbounds %struct.obstack, %struct.obstack* %52, i32 0, i32 6, !dbg !19181, !ctir !1148
  %53 = load i64, i64* %alignment_mask30, align 8, !dbg !19181, !ctir !52
  %add31 = add i64 %sub.ptr.sub29, %53, !dbg !19181
  %54 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19181
  %alignment_mask32 = getelementptr inbounds %struct.obstack, %struct.obstack* %54, i32 0, i32 6, !dbg !19181, !ctir !1148
  %55 = load i64, i64* %alignment_mask32, align 8, !dbg !19181, !ctir !52
  %neg33 = xor i64 %55, -1, !dbg !19181
  %and34 = and i64 %add31, %neg33, !dbg !19181
  %add.ptr35 = getelementptr inbounds i8, i8* null, i64 %and34, !dbg !19181, !ctir !8
  %cmp36 = icmp eq i8* %50, %add.ptr35, !dbg !19182
  br i1 %cmp36, label %if.then37, label %if.end40, !dbg !19183

if.then37:                                        ; preds = %land.lhs.true24
  %56 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !19184
  %prev38 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %56, i32 0, i32 1, !dbg !19186, !ctir !1153
  %57 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev38, align 8, !dbg !19186, !ctir !1152
  %58 = load %struct._obstack_chunk*, %struct._obstack_chunk** %new_chunk, align 8, !dbg !19187
  %prev39 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %58, i32 0, i32 1, !dbg !19188, !ctir !1153
  store %struct._obstack_chunk* %57, %struct._obstack_chunk** %prev39, align 8, !dbg !19189, !ctir !1152
  %59 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19190
  %60 = load %struct._obstack_chunk*, %struct._obstack_chunk** %old_chunk, align 8, !dbg !19191
  %61 = bitcast %struct._obstack_chunk* %60 to i8*, !dbg !19191
  call void @call_freefun(%struct.obstack* %59, i8* %61), !dbg !19192
  br label %if.end40, !dbg !19193

if.end40:                                         ; preds = %if.then37, %land.lhs.true24, %if.end14
  %62 = load i8*, i8** %object_base1, align 8, !dbg !19194
  %63 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19195
  %object_base41 = getelementptr inbounds %struct.obstack, %struct.obstack* %63, i32 0, i32 2, !dbg !19196, !ctir !1148
  store i8* %62, i8** %object_base41, align 8, !dbg !19197, !ctir !7
  %64 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19198
  %object_base42 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 2, !dbg !19199, !ctir !1148
  %65 = load i8*, i8** %object_base42, align 8, !dbg !19199, !ctir !7
  %66 = load i64, i64* %obj_size, align 8, !dbg !19200
  %add.ptr43 = getelementptr inbounds i8, i8* %65, i64 %66, !dbg !19201, !ctir !8
  %67 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19202
  %next_free44 = getelementptr inbounds %struct.obstack, %struct.obstack* %67, i32 0, i32 3, !dbg !19203, !ctir !1148
  store i8* %add.ptr43, i8** %next_free44, align 8, !dbg !19204, !ctir !7
  %68 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19205
  %maybe_empty_object45 = getelementptr inbounds %struct.obstack, %struct.obstack* %68, i32 0, i32 10, !dbg !19206, !ctir !1148
  %bf.load46 = load i8, i8* %maybe_empty_object45, align 8, !dbg !19207
  %bf.clear47 = and i8 %bf.load46, -3, !dbg !19207
  store i8 %bf.clear47, i8* %maybe_empty_object45, align 8, !dbg !19207
  ret void, !dbg !19208
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @call_freefun(%struct.obstack* %h, i8* %old_chunk) #4 !dbg !19209 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %old_chunk.addr = alloca i8*, align 8
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19212, metadata !DIExpression()), !dbg !19213
  store i8* %old_chunk, i8** %old_chunk.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %old_chunk.addr, metadata !19214, metadata !DIExpression()), !dbg !19215
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19216
  %use_extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 10, !dbg !19218, !ctir !1148
  %bf.load = load i8, i8* %use_extra_arg, align 8, !dbg !19218
  %bf.clear = and i8 %bf.load, 1, !dbg !19218
  %bf.cast = zext i8 %bf.clear to i32, !dbg !19218
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !19216
  br i1 %tobool, label %if.then, label %if.else, !dbg !19219

if.then:                                          ; preds = %entry
  %1 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19220
  %freefun = getelementptr inbounds %struct.obstack, %struct.obstack* %1, i32 0, i32 8, !dbg !19221, !ctir !1148
  %extra = bitcast %union.anon.1* %freefun to void (i8*, i8*)**, !dbg !19222
  %2 = load void (i8*, i8*)*, void (i8*, i8*)** %extra, align 8, !dbg !19222, !ctir !1169
  %3 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19223
  %extra_arg = getelementptr inbounds %struct.obstack, %struct.obstack* %3, i32 0, i32 9, !dbg !19224, !ctir !1148
  %4 = load i8*, i8** %extra_arg, align 8, !dbg !19224, !ctir !47
  %5 = load i8*, i8** %old_chunk.addr, align 8, !dbg !19225
  call void %2(i8* %4, i8* %5), !dbg !19220
  br label %if.end, !dbg !19220

if.else:                                          ; preds = %entry
  %6 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19226
  %freefun1 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 8, !dbg !19227, !ctir !1148
  %plain = bitcast %union.anon.1* %freefun1 to void (i8*)**, !dbg !19228
  %7 = load void (i8*)*, void (i8*)** %plain, align 8, !dbg !19228, !ctir !1169
  %8 = load i8*, i8** %old_chunk.addr, align 8, !dbg !19229
  call void %7(i8* %8), !dbg !19226
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !19230
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @_obstack_allocated_p(%struct.obstack* %h, i8* %obj) #9 !dbg !19231 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %plp = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19234, metadata !DIExpression()), !dbg !19235
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !19236, metadata !DIExpression()), !dbg !19237
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !19238, metadata !DIExpression()), !dbg !19239
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %plp, metadata !19240, metadata !DIExpression()), !dbg !19241
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19242
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !19243, !ctir !1148
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !19243, !ctir !1152
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !19244
  br label %while.cond, !dbg !19245

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19246
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !19247
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !19248

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19249
  %4 = bitcast %struct._obstack_chunk* %3 to i8*, !dbg !19250
  %5 = load i8*, i8** %obj.addr, align 8, !dbg !19251
  %cmp1 = icmp uge i8* %4, %5, !dbg !19252
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !19253

lor.rhs:                                          ; preds = %land.rhs
  %6 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19254
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %6, i32 0, i32 0, !dbg !19255, !ctir !1153
  %7 = load i8*, i8** %limit, align 8, !dbg !19255, !ctir !7
  %8 = load i8*, i8** %obj.addr, align 8, !dbg !19256
  %cmp2 = icmp ult i8* %7, %8, !dbg !19257
  br label %lor.end, !dbg !19253

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %9, %lor.end ], !dbg !19258
  br i1 %10, label %while.body, label %while.end, !dbg !19245

while.body:                                       ; preds = %land.end
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19259
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %11, i32 0, i32 1, !dbg !19261, !ctir !1153
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !19261, !ctir !1152
  store %struct._obstack_chunk* %12, %struct._obstack_chunk** %plp, align 8, !dbg !19262
  %13 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !dbg !19263
  store %struct._obstack_chunk* %13, %struct._obstack_chunk** %lp, align 8, !dbg !19264
  br label %while.cond, !dbg !19245, !llvm.loop !19265

while.end:                                        ; preds = %land.end
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19267
  %cmp3 = icmp ne %struct._obstack_chunk* %14, null, !dbg !19268
  %conv = zext i1 %cmp3 to i32, !dbg !19268
  ret i32 %conv, !dbg !19269
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_free(%struct.obstack* %h, i8* %obj) #4 !dbg !19270 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %obj.addr = alloca i8*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %plp = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19271, metadata !DIExpression()), !dbg !19272
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !19273, metadata !DIExpression()), !dbg !19274
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !19275, metadata !DIExpression()), !dbg !19276
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %plp, metadata !19277, metadata !DIExpression()), !dbg !19278
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19279
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !19280, !ctir !1148
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !19280, !ctir !1152
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !19281
  br label %while.cond, !dbg !19282

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19283
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !19284
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !19285

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19286
  %4 = bitcast %struct._obstack_chunk* %3 to i8*, !dbg !19287
  %5 = load i8*, i8** %obj.addr, align 8, !dbg !19288
  %cmp1 = icmp uge i8* %4, %5, !dbg !19289
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !19290

lor.rhs:                                          ; preds = %land.rhs
  %6 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19291
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %6, i32 0, i32 0, !dbg !19292, !ctir !1153
  %7 = load i8*, i8** %limit, align 8, !dbg !19292, !ctir !7
  %8 = load i8*, i8** %obj.addr, align 8, !dbg !19293
  %cmp2 = icmp ult i8* %7, %8, !dbg !19294
  br label %lor.end, !dbg !19290

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %9, %lor.end ], !dbg !19295
  br i1 %10, label %while.body, label %while.end, !dbg !19282

while.body:                                       ; preds = %land.end
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19296
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %11, i32 0, i32 1, !dbg !19298, !ctir !1153
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !19298, !ctir !1152
  store %struct._obstack_chunk* %12, %struct._obstack_chunk** %plp, align 8, !dbg !19299
  %13 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19300
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19301
  %15 = bitcast %struct._obstack_chunk* %14 to i8*, !dbg !19301
  call void @call_freefun(%struct.obstack* %13, i8* %15), !dbg !19302
  %16 = load %struct._obstack_chunk*, %struct._obstack_chunk** %plp, align 8, !dbg !19303
  store %struct._obstack_chunk* %16, %struct._obstack_chunk** %lp, align 8, !dbg !19304
  %17 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19305
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 10, !dbg !19306, !ctir !1148
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !19307
  %bf.clear = and i8 %bf.load, -3, !dbg !19307
  %bf.set = or i8 %bf.clear, 2, !dbg !19307
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !19307
  br label %while.cond, !dbg !19282, !llvm.loop !19308

while.end:                                        ; preds = %land.end
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19310
  %tobool = icmp ne %struct._obstack_chunk* %18, null, !dbg !19310
  br i1 %tobool, label %if.then, label %if.else, !dbg !19312

if.then:                                          ; preds = %while.end
  %19 = load i8*, i8** %obj.addr, align 8, !dbg !19313
  %20 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19315
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %20, i32 0, i32 3, !dbg !19316, !ctir !1148
  store i8* %19, i8** %next_free, align 8, !dbg !19317, !ctir !7
  %21 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19318
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 2, !dbg !19319, !ctir !1148
  store i8* %19, i8** %object_base, align 8, !dbg !19320, !ctir !7
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19321
  %limit3 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %22, i32 0, i32 0, !dbg !19322, !ctir !1153
  %23 = load i8*, i8** %limit3, align 8, !dbg !19322, !ctir !7
  %24 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19323
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 4, !dbg !19324, !ctir !1148
  store i8* %23, i8** %chunk_limit, align 8, !dbg !19325, !ctir !7
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19326
  %26 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19327
  %chunk4 = getelementptr inbounds %struct.obstack, %struct.obstack* %26, i32 0, i32 1, !dbg !19328, !ctir !1148
  store %struct._obstack_chunk* %25, %struct._obstack_chunk** %chunk4, align 8, !dbg !19329, !ctir !1152
  br label %if.end7, !dbg !19330

if.else:                                          ; preds = %while.end
  %27 = load i8*, i8** %obj.addr, align 8, !dbg !19331
  %cmp5 = icmp ne i8* %27, null, !dbg !19333
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !19334

if.then6:                                         ; preds = %if.else
  call void @abort() #13, !dbg !19335
  unreachable, !dbg !19335

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  ret void, !dbg !19336
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @_obstack_memory_used(%struct.obstack* %h) #9 !dbg !19337 {
entry:
  %h.addr = alloca %struct.obstack*, align 8
  %lp = alloca %struct._obstack_chunk*, align 8, !ctir !1152
  %nbytes = alloca i64, align 8, !ctir !52
  store %struct.obstack* %h, %struct.obstack** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.obstack** %h.addr, metadata !19340, metadata !DIExpression()), !dbg !19341
  call void @llvm.dbg.declare(metadata %struct._obstack_chunk** %lp, metadata !19342, metadata !DIExpression()), !dbg !19343
  call void @llvm.dbg.declare(metadata i64* %nbytes, metadata !19344, metadata !DIExpression()), !dbg !19345
  store i64 0, i64* %nbytes, align 8, !dbg !19345
  %0 = load %struct.obstack*, %struct.obstack** %h.addr, align 8, !dbg !19346
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %0, i32 0, i32 1, !dbg !19348, !ctir !1148
  %1 = load %struct._obstack_chunk*, %struct._obstack_chunk** %chunk, align 8, !dbg !19348, !ctir !1152
  store %struct._obstack_chunk* %1, %struct._obstack_chunk** %lp, align 8, !dbg !19349
  br label %for.cond, !dbg !19350

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19351
  %cmp = icmp ne %struct._obstack_chunk* %2, null, !dbg !19353
  br i1 %cmp, label %for.body, label %for.end, !dbg !19354

for.body:                                         ; preds = %for.cond
  %3 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19355
  %limit = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %3, i32 0, i32 0, !dbg !19357, !ctir !1153
  %4 = load i8*, i8** %limit, align 8, !dbg !19357, !ctir !7
  %5 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19358
  %6 = bitcast %struct._obstack_chunk* %5 to i8*, !dbg !19359
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64, !dbg !19360
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64, !dbg !19360
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !19360
  %7 = load i64, i64* %nbytes, align 8, !dbg !19361
  %add = add i64 %7, %sub.ptr.sub, !dbg !19361
  store i64 %add, i64* %nbytes, align 8, !dbg !19361
  br label %for.inc, !dbg !19362

for.inc:                                          ; preds = %for.body
  %8 = load %struct._obstack_chunk*, %struct._obstack_chunk** %lp, align 8, !dbg !19363
  %prev = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %8, i32 0, i32 1, !dbg !19364, !ctir !1153
  %9 = load %struct._obstack_chunk*, %struct._obstack_chunk** %prev, align 8, !dbg !19364, !ctir !1152
  store %struct._obstack_chunk* %9, %struct._obstack_chunk** %lp, align 8, !dbg !19365
  br label %for.cond, !dbg !19366, !llvm.loop !19367

for.end:                                          ; preds = %for.cond
  %10 = load i64, i64* %nbytes, align 8, !dbg !19369
  ret i64 %10, !dbg !19370
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotl64(i64 %x, i32 %n) #4 !dbg !19371 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !19376, metadata !DIExpression()), !dbg !19377
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19378, metadata !DIExpression()), !dbg !19379
  %0 = load i64, i64* %x.addr, align 8, !dbg !19380
  %1 = load i32, i32* %n.addr, align 4, !dbg !19381
  %sh_prom = zext i32 %1 to i64, !dbg !19382
  %shl = shl i64 %0, %sh_prom, !dbg !19382
  %2 = load i64, i64* %x.addr, align 8, !dbg !19383
  %3 = load i32, i32* %n.addr, align 4, !dbg !19384
  %sub = sub nsw i32 64, %3, !dbg !19385
  %sh_prom1 = zext i32 %sub to i64, !dbg !19386
  %shr = lshr i64 %2, %sh_prom1, !dbg !19386
  %or = or i64 %shl, %shr, !dbg !19387
  ret i64 %or, !dbg !19388
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotr64(i64 %x, i32 %n) #4 !dbg !19389 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !19390, metadata !DIExpression()), !dbg !19391
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19392, metadata !DIExpression()), !dbg !19393
  %0 = load i64, i64* %x.addr, align 8, !dbg !19394
  %1 = load i32, i32* %n.addr, align 4, !dbg !19395
  %sh_prom = zext i32 %1 to i64, !dbg !19396
  %shr = lshr i64 %0, %sh_prom, !dbg !19396
  %2 = load i64, i64* %x.addr, align 8, !dbg !19397
  %3 = load i32, i32* %n.addr, align 4, !dbg !19398
  %sub = sub nsw i32 64, %3, !dbg !19399
  %sh_prom1 = zext i32 %sub to i64, !dbg !19400
  %shl = shl i64 %2, %sh_prom1, !dbg !19400
  %or = or i64 %shr, %shl, !dbg !19401
  ret i64 %or, !dbg !19402
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rotl32(i32 %x, i32 %n) #4 !dbg !19403 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !19406, metadata !DIExpression()), !dbg !19407
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19408, metadata !DIExpression()), !dbg !19409
  %0 = load i32, i32* %x.addr, align 4, !dbg !19410
  %1 = load i32, i32* %n.addr, align 4, !dbg !19411
  %shl = shl i32 %0, %1, !dbg !19412
  %2 = load i32, i32* %x.addr, align 4, !dbg !19413
  %3 = load i32, i32* %n.addr, align 4, !dbg !19414
  %sub = sub nsw i32 32, %3, !dbg !19415
  %shr = lshr i32 %2, %sub, !dbg !19416
  %or = or i32 %shl, %shr, !dbg !19417
  ret i32 %or, !dbg !19418
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rotr32(i32 %x, i32 %n) #4 !dbg !19419 {
entry:
  %x.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !19420, metadata !DIExpression()), !dbg !19421
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19422, metadata !DIExpression()), !dbg !19423
  %0 = load i32, i32* %x.addr, align 4, !dbg !19424
  %1 = load i32, i32* %n.addr, align 4, !dbg !19425
  %shr = lshr i32 %0, %1, !dbg !19426
  %2 = load i32, i32* %x.addr, align 4, !dbg !19427
  %3 = load i32, i32* %n.addr, align 4, !dbg !19428
  %sub = sub nsw i32 32, %3, !dbg !19429
  %shl = shl i32 %2, %sub, !dbg !19430
  %or = or i32 %shr, %shl, !dbg !19431
  ret i32 %or, !dbg !19432
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotl_sz(i64 %x, i32 %n) #4 !dbg !19433 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !19436, metadata !DIExpression()), !dbg !19437
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19438, metadata !DIExpression()), !dbg !19439
  %0 = load i64, i64* %x.addr, align 8, !dbg !19440
  %1 = load i32, i32* %n.addr, align 4, !dbg !19441
  %sh_prom = zext i32 %1 to i64, !dbg !19442
  %shl = shl i64 %0, %sh_prom, !dbg !19442
  %2 = load i64, i64* %x.addr, align 8, !dbg !19443
  %3 = load i32, i32* %n.addr, align 4, !dbg !19444
  %conv = sext i32 %3 to i64, !dbg !19444
  %sub = sub i64 64, %conv, !dbg !19445
  %shr = lshr i64 %2, %sub, !dbg !19446
  %or = or i64 %shl, %shr, !dbg !19447
  ret i64 %or, !dbg !19448
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rotr_sz(i64 %x, i32 %n) #4 !dbg !19449 {
entry:
  %x.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !19450, metadata !DIExpression()), !dbg !19451
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19452, metadata !DIExpression()), !dbg !19453
  %0 = load i64, i64* %x.addr, align 8, !dbg !19454
  %1 = load i32, i32* %n.addr, align 4, !dbg !19455
  %sh_prom = zext i32 %1 to i64, !dbg !19456
  %shr = lshr i64 %0, %sh_prom, !dbg !19456
  %2 = load i64, i64* %x.addr, align 8, !dbg !19457
  %3 = load i32, i32* %n.addr, align 4, !dbg !19458
  %conv = sext i32 %3 to i64, !dbg !19458
  %sub = sub i64 64, %conv, !dbg !19459
  %shl = shl i64 %2, %sub, !dbg !19460
  %or = or i64 %shr, %shl, !dbg !19461
  ret i64 %or, !dbg !19462
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @rotl16(i16 zeroext %x, i32 %n) #4 !dbg !19463 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %x.addr, metadata !19467, metadata !DIExpression()), !dbg !19468
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19469, metadata !DIExpression()), !dbg !19470
  %0 = load i16, i16* %x.addr, align 2, !dbg !19471
  %conv = zext i16 %0 to i32, !dbg !19472
  %1 = load i32, i32* %n.addr, align 4, !dbg !19473
  %shl = shl i32 %conv, %1, !dbg !19474
  %2 = load i16, i16* %x.addr, align 2, !dbg !19475
  %conv1 = zext i16 %2 to i32, !dbg !19476
  %3 = load i32, i32* %n.addr, align 4, !dbg !19477
  %sub = sub nsw i32 16, %3, !dbg !19478
  %shr = lshr i32 %conv1, %sub, !dbg !19479
  %or = or i32 %shl, %shr, !dbg !19480
  %and = and i32 %or, 65535, !dbg !19481
  %conv2 = trunc i32 %and to i16, !dbg !19482
  ret i16 %conv2, !dbg !19483
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @rotr16(i16 zeroext %x, i32 %n) #4 !dbg !19484 {
entry:
  %x.addr = alloca i16, align 2
  %n.addr = alloca i32, align 4
  store i16 %x, i16* %x.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %x.addr, metadata !19485, metadata !DIExpression()), !dbg !19486
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19487, metadata !DIExpression()), !dbg !19488
  %0 = load i16, i16* %x.addr, align 2, !dbg !19489
  %conv = zext i16 %0 to i32, !dbg !19490
  %1 = load i32, i32* %n.addr, align 4, !dbg !19491
  %shr = lshr i32 %conv, %1, !dbg !19492
  %2 = load i16, i16* %x.addr, align 2, !dbg !19493
  %conv1 = zext i16 %2 to i32, !dbg !19494
  %3 = load i32, i32* %n.addr, align 4, !dbg !19495
  %sub = sub nsw i32 16, %3, !dbg !19496
  %shl = shl i32 %conv1, %sub, !dbg !19497
  %or = or i32 %shr, %shl, !dbg !19498
  %and = and i32 %or, 65535, !dbg !19499
  %conv2 = trunc i32 %and to i16, !dbg !19500
  ret i16 %conv2, !dbg !19501
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @rotl8(i8 zeroext %x, i32 %n) #4 !dbg !19502 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !19506, metadata !DIExpression()), !dbg !19507
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19508, metadata !DIExpression()), !dbg !19509
  %0 = load i8, i8* %x.addr, align 1, !dbg !19510
  %conv = zext i8 %0 to i32, !dbg !19511
  %1 = load i32, i32* %n.addr, align 4, !dbg !19512
  %shl = shl i32 %conv, %1, !dbg !19513
  %2 = load i8, i8* %x.addr, align 1, !dbg !19514
  %conv1 = zext i8 %2 to i32, !dbg !19515
  %3 = load i32, i32* %n.addr, align 4, !dbg !19516
  %sub = sub nsw i32 8, %3, !dbg !19517
  %shr = lshr i32 %conv1, %sub, !dbg !19518
  %or = or i32 %shl, %shr, !dbg !19519
  %and = and i32 %or, 255, !dbg !19520
  %conv2 = trunc i32 %and to i8, !dbg !19521
  ret i8 %conv2, !dbg !19522
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i8 @rotr8(i8 zeroext %x, i32 %n) #4 !dbg !19523 {
entry:
  %x.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  store i8 %x, i8* %x.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %x.addr, metadata !19524, metadata !DIExpression()), !dbg !19525
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !19526, metadata !DIExpression()), !dbg !19527
  %0 = load i8, i8* %x.addr, align 1, !dbg !19528
  %conv = zext i8 %0 to i32, !dbg !19529
  %1 = load i32, i32* %n.addr, align 4, !dbg !19530
  %shr = lshr i32 %conv, %1, !dbg !19531
  %2 = load i8, i8* %x.addr, align 1, !dbg !19532
  %conv1 = zext i8 %2 to i32, !dbg !19533
  %3 = load i32, i32* %n.addr, align 4, !dbg !19534
  %sub = sub nsw i32 8, %3, !dbg !19535
  %shl = shl i32 %conv1, %sub, !dbg !19536
  %or = or i32 %shr, %shl, !dbg !19537
  %and = and i32 %or, 255, !dbg !19538
  %conv2 = trunc i32 %and to i8, !dbg !19539
  ret i8 %conv2, !dbg !19540
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isalnum(i32 %c) #4 !dbg !19541 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19543, metadata !DIExpression()), !dbg !19544
  %0 = load i32, i32* %c.addr, align 4, !dbg !19545
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19546

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19547
  br label %return, !dbg !19547

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19549
  br label %return, !dbg !19549

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19550
  ret i1 %1, !dbg !19550
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isalpha(i32 %c) #4 !dbg !19551 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19552, metadata !DIExpression()), !dbg !19553
  %0 = load i32, i32* %c.addr, align 4, !dbg !19554
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19555

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19556
  br label %return, !dbg !19556

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19558
  br label %return, !dbg !19558

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19559
  ret i1 %1, !dbg !19559
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isascii(i32 %c) #4 !dbg !19560 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19561, metadata !DIExpression()), !dbg !19562
  %0 = load i32, i32* %c.addr, align 4, !dbg !19563
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19564

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19565
  br label %return, !dbg !19565

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19567
  br label %return, !dbg !19567

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19568
  ret i1 %1, !dbg !19568
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isblank(i32 %c) #4 !dbg !19569 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19570, metadata !DIExpression()), !dbg !19571
  %0 = load i32, i32* %c.addr, align 4, !dbg !19572
  %cmp = icmp eq i32 %0, 32, !dbg !19573
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !19574

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !19575
  %cmp1 = icmp eq i32 %1, 9, !dbg !19576
  br label %lor.end, !dbg !19574

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  ret i1 %2, !dbg !19577
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_iscntrl(i32 %c) #4 !dbg !19578 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19579, metadata !DIExpression()), !dbg !19580
  %0 = load i32, i32* %c.addr, align 4, !dbg !19581
  switch i32 %0, label %sw.default [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 12, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 127, label %sw.bb
  ], !dbg !19582

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19583
  br label %return, !dbg !19583

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19585
  br label %return, !dbg !19585

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19586
  ret i1 %1, !dbg !19586
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isdigit(i32 %c) #4 !dbg !19587 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19588, metadata !DIExpression()), !dbg !19589
  %0 = load i32, i32* %c.addr, align 4, !dbg !19590
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
  ], !dbg !19591

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19592
  br label %return, !dbg !19592

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19594
  br label %return, !dbg !19594

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19595
  ret i1 %1, !dbg !19595
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isgraph(i32 %c) #4 !dbg !19596 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19597, metadata !DIExpression()), !dbg !19598
  %0 = load i32, i32* %c.addr, align 4, !dbg !19599
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19600

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19601
  br label %return, !dbg !19601

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19603
  br label %return, !dbg !19603

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19604
  ret i1 %1, !dbg !19604
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_islower(i32 %c) #4 !dbg !19605 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19606, metadata !DIExpression()), !dbg !19607
  %0 = load i32, i32* %c.addr, align 4, !dbg !19608
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ], !dbg !19609

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19610
  br label %return, !dbg !19610

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19612
  br label %return, !dbg !19612

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19613
  ret i1 %1, !dbg !19613
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isprint(i32 %c) #4 !dbg !19614 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19615, metadata !DIExpression()), !dbg !19616
  %0 = load i32, i32* %c.addr, align 4, !dbg !19617
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19618

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19619
  br label %return, !dbg !19619

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19621
  br label %return, !dbg !19621

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19622
  ret i1 %1, !dbg !19622
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_ispunct(i32 %c) #4 !dbg !19623 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19624, metadata !DIExpression()), !dbg !19625
  %0 = load i32, i32* %c.addr, align 4, !dbg !19626
  switch i32 %0, label %sw.default [
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 58, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 91, label %sw.bb
    i32 92, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 96, label %sw.bb
    i32 123, label %sw.bb
    i32 124, label %sw.bb
    i32 125, label %sw.bb
    i32 126, label %sw.bb
  ], !dbg !19627

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19628
  br label %return, !dbg !19628

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19630
  br label %return, !dbg !19630

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19631
  ret i1 %1, !dbg !19631
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isspace(i32 %c) #4 !dbg !19632 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19633, metadata !DIExpression()), !dbg !19634
  %0 = load i32, i32* %c.addr, align 4, !dbg !19635
  switch i32 %0, label %sw.default [
    i32 32, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 13, label %sw.bb
  ], !dbg !19636

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19637
  br label %return, !dbg !19637

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19639
  br label %return, !dbg !19639

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19640
  ret i1 %1, !dbg !19640
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isupper(i32 %c) #4 !dbg !19641 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19642, metadata !DIExpression()), !dbg !19643
  %0 = load i32, i32* %c.addr, align 4, !dbg !19644
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19645

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19646
  br label %return, !dbg !19646

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19648
  br label %return, !dbg !19648

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19649
  ret i1 %1, !dbg !19649
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @c_isxdigit(i32 %c) #4 !dbg !19650 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19651, metadata !DIExpression()), !dbg !19652
  %0 = load i32, i32* %c.addr, align 4, !dbg !19653
  switch i32 %0, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
  ], !dbg !19654

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i1 true, i1* %retval, align 1, !dbg !19655
  br label %return, !dbg !19655

sw.default:                                       ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !19657
  br label %return, !dbg !19657

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i1, i1* %retval, align 1, !dbg !19658
  ret i1 %1, !dbg !19658
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c_tolower(i32 %c) #4 !dbg !19659 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19660, metadata !DIExpression()), !dbg !19661
  %0 = load i32, i32* %c.addr, align 4, !dbg !19662
  switch i32 %0, label %sw.default [
    i32 65, label %sw.bb
    i32 66, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 71, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 78, label %sw.bb
    i32 79, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 83, label %sw.bb
    i32 84, label %sw.bb
    i32 85, label %sw.bb
    i32 86, label %sw.bb
    i32 87, label %sw.bb
    i32 88, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ], !dbg !19663

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !19664
  %sub = sub nsw i32 %1, 65, !dbg !19666
  %add = add nsw i32 %sub, 97, !dbg !19667
  store i32 %add, i32* %retval, align 4, !dbg !19668
  br label %return, !dbg !19668

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !19669
  store i32 %2, i32* %retval, align 4, !dbg !19670
  br label %return, !dbg !19670

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4, !dbg !19671
  ret i32 %3, !dbg !19671
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @c_toupper(i32 %c) #4 !dbg !19672 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !19673, metadata !DIExpression()), !dbg !19674
  %0 = load i32, i32* %c.addr, align 4, !dbg !19675
  switch i32 %0, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 103, label %sw.bb
    i32 104, label %sw.bb
    i32 105, label %sw.bb
    i32 106, label %sw.bb
    i32 107, label %sw.bb
    i32 108, label %sw.bb
    i32 109, label %sw.bb
    i32 110, label %sw.bb
    i32 111, label %sw.bb
    i32 112, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 117, label %sw.bb
    i32 118, label %sw.bb
    i32 119, label %sw.bb
    i32 120, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
  ], !dbg !19676

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !19677
  %sub = sub nsw i32 %1, 97, !dbg !19679
  %add = add nsw i32 %sub, 65, !dbg !19680
  store i32 %add, i32* %retval, align 4, !dbg !19681
  br label %return, !dbg !19681

sw.default:                                       ; preds = %entry
  %2 = load i32, i32* %c.addr, align 4, !dbg !19682
  store i32 %2, i32* %retval, align 4, !dbg !19683
  br label %return, !dbg !19683

return:                                           ; preds = %sw.default, %sw.bb
  %3 = load i32, i32* %retval, align 4, !dbg !19684
  ret i32 %3, !dbg !19684
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @c_strcasecmp(i8* %s1, i8* %s2) #9 !dbg !19685 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %p1 = alloca i8*, align 8, !ctir !1656
  %p2 = alloca i8*, align 8, !ctir !1656
  %c1 = alloca i8, align 1, !ctir !535
  %c2 = alloca i8, align 1, !ctir !535
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !19687, metadata !DIExpression()), !dbg !19688
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !19689, metadata !DIExpression()), !dbg !19690
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !19691, metadata !DIExpression()), !dbg !19692
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !19693
  store i8* %0, i8** %p1, align 8, !dbg !19692
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !19694, metadata !DIExpression()), !dbg !19695
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !19696
  store i8* %1, i8** %p2, align 8, !dbg !19695
  call void @llvm.dbg.declare(metadata i8* %c1, metadata !19697, metadata !DIExpression()), !dbg !19698
  call void @llvm.dbg.declare(metadata i8* %c2, metadata !19699, metadata !DIExpression()), !dbg !19700
  %2 = load i8*, i8** %p1, align 8, !dbg !19701
  %3 = load i8*, i8** %p2, align 8, !dbg !19703
  %cmp = icmp eq i8* %2, %3, !dbg !19704
  br i1 %cmp, label %if.then, label %if.end, !dbg !19705

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !19706
  br label %return, !dbg !19706

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !19707

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load i8*, i8** %p1, align 8, !dbg !19708
  %5 = load i8, i8* %4, align 1, !dbg !19710, !ctir !919
  %conv = zext i8 %5 to i32, !dbg !19710
  %call = call i32 @c_tolower(i32 %conv), !dbg !19711
  %conv1 = trunc i32 %call to i8, !dbg !19711
  store i8 %conv1, i8* %c1, align 1, !dbg !19712
  %6 = load i8*, i8** %p2, align 8, !dbg !19713
  %7 = load i8, i8* %6, align 1, !dbg !19714, !ctir !919
  %conv2 = zext i8 %7 to i32, !dbg !19714
  %call3 = call i32 @c_tolower(i32 %conv2), !dbg !19715
  %conv4 = trunc i32 %call3 to i8, !dbg !19715
  store i8 %conv4, i8* %c2, align 1, !dbg !19716
  %8 = load i8, i8* %c1, align 1, !dbg !19717
  %conv5 = zext i8 %8 to i32, !dbg !19717
  %cmp6 = icmp eq i32 %conv5, 0, !dbg !19719
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !19720

if.then8:                                         ; preds = %do.body
  br label %do.end, !dbg !19721

if.end9:                                          ; preds = %do.body
  %9 = load i8*, i8** %p1, align 8, !dbg !19722
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !19722, !ctir !919
  store i8* %incdec.ptr, i8** %p1, align 8, !dbg !19722
  %10 = load i8*, i8** %p2, align 8, !dbg !19723
  %incdec.ptr10 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !19723, !ctir !919
  store i8* %incdec.ptr10, i8** %p2, align 8, !dbg !19723
  br label %do.cond, !dbg !19724

do.cond:                                          ; preds = %if.end9
  %11 = load i8, i8* %c1, align 1, !dbg !19725
  %conv11 = zext i8 %11 to i32, !dbg !19725
  %12 = load i8, i8* %c2, align 1, !dbg !19726
  %conv12 = zext i8 %12 to i32, !dbg !19726
  %cmp13 = icmp eq i32 %conv11, %conv12, !dbg !19727
  br i1 %cmp13, label %do.body, label %do.end, !dbg !19724, !llvm.loop !19728

do.end:                                           ; preds = %do.cond, %if.then8
  %13 = load i8, i8* %c1, align 1, !dbg !19730
  %conv15 = zext i8 %13 to i32, !dbg !19730
  %14 = load i8, i8* %c2, align 1, !dbg !19732
  %conv16 = zext i8 %14 to i32, !dbg !19732
  %sub = sub nsw i32 %conv15, %conv16, !dbg !19733
  store i32 %sub, i32* %retval, align 4, !dbg !19734
  br label %return, !dbg !19734

return:                                           ; preds = %do.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !19735
  ret i32 %15, !dbg !19735
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @close_stream(%struct._IO_FILE* %stream) #4 !dbg !19736 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %some_pending = alloca i8, align 1, !ctir !161
  %prev_fail = alloca i8, align 1, !ctir !161
  %fclose_fail = alloca i8, align 1, !ctir !161
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !19780, metadata !DIExpression()), !dbg !19781
  call void @llvm.dbg.declare(metadata i8* %some_pending, metadata !19782, metadata !DIExpression()), !dbg !19783
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !19784
  %call = call i64 @__fpending(%struct._IO_FILE* %0) #12, !dbg !19785
  %cmp = icmp ne i64 %call, 0, !dbg !19786
  %frombool = zext i1 %cmp to i8, !dbg !19783
  store i8 %frombool, i8* %some_pending, align 1, !dbg !19783
  call void @llvm.dbg.declare(metadata i8* %prev_fail, metadata !19787, metadata !DIExpression()), !dbg !19788
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !19789
  %call1 = call i32 @ferror_unlocked(%struct._IO_FILE* %1) #12, !dbg !19789
  %cmp2 = icmp ne i32 %call1, 0, !dbg !19790
  %frombool3 = zext i1 %cmp2 to i8, !dbg !19788
  store i8 %frombool3, i8* %prev_fail, align 1, !dbg !19788
  call void @llvm.dbg.declare(metadata i8* %fclose_fail, metadata !19791, metadata !DIExpression()), !dbg !19792
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !19793
  %call4 = call i32 @rpl_fclose(%struct._IO_FILE* %2), !dbg !19794
  %cmp5 = icmp ne i32 %call4, 0, !dbg !19795
  %frombool6 = zext i1 %cmp5 to i8, !dbg !19792
  store i8 %frombool6, i8* %fclose_fail, align 1, !dbg !19792
  %3 = load i8, i8* %prev_fail, align 1, !dbg !19796
  %tobool = trunc i8 %3 to i1, !dbg !19796
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !19798

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, i8* %fclose_fail, align 1, !dbg !19799
  %tobool7 = trunc i8 %4 to i1, !dbg !19799
  br i1 %tobool7, label %land.lhs.true, label %if.end15, !dbg !19800

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i8, i8* %some_pending, align 1, !dbg !19801
  %tobool8 = trunc i8 %5 to i1, !dbg !19801
  br i1 %tobool8, label %if.then, label %lor.lhs.false9, !dbg !19802

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %call10 = call i32* @__errno_location() #16, !dbg !19803
  %6 = load i32, i32* %call10, align 4, !dbg !19803, !ctir !5
  %cmp11 = icmp ne i32 %6, 9, !dbg !19804
  br i1 %cmp11, label %if.then, label %if.end15, !dbg !19805

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %entry
  %7 = load i8, i8* %fclose_fail, align 1, !dbg !19806
  %tobool12 = trunc i8 %7 to i1, !dbg !19806
  br i1 %tobool12, label %if.end, label %if.then13, !dbg !19809

if.then13:                                        ; preds = %if.then
  %call14 = call i32* @__errno_location() #16, !dbg !19810
  store i32 0, i32* %call14, align 4, !dbg !19811, !ctir !5
  br label %if.end, !dbg !19810

if.end:                                           ; preds = %if.then13, %if.then
  store i32 -1, i32* %retval, align 4, !dbg !19812
  br label %return, !dbg !19812

if.end15:                                         ; preds = %lor.lhs.false9, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !19813
  br label %return, !dbg !19813

return:                                           ; preds = %if.end15, %if.end
  %8 = load i32, i32* %retval, align 4, !dbg !19814
  ret i32 %8, !dbg !19814
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone readnone uwtable
define dso_local { i64, i64 } @dtotimespec(double %sec) #11 !dbg !19815 {
entry:
  %retval = alloca %struct.timespec, align 8
  %sec.addr = alloca double, align 8
  %s = alloca i64, align 8, !ctir !1645
  %frac = alloca double, align 8, !ctir !480
  %ns = alloca i64, align 8, !ctir !32
  store double %sec, double* %sec.addr, align 8
  call void @llvm.dbg.declare(metadata double* %sec.addr, metadata !19823, metadata !DIExpression()), !dbg !19824
  %0 = load double, double* %sec.addr, align 8, !dbg !19825
  %cmp = fcmp olt double 0xC3E0000000000000, %0, !dbg !19827
  br i1 %cmp, label %if.else, label %if.then, !dbg !19828

if.then:                                          ; preds = %entry
  %call = call { i64, i64 } @make_timespec(i64 -9223372036854775808, i64 0), !dbg !19829
  %1 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !19829
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0, !dbg !19829
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !19829
  store i64 %3, i64* %2, align 8, !dbg !19829
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1, !dbg !19829
  %5 = extractvalue { i64, i64 } %call, 1, !dbg !19829
  store i64 %5, i64* %4, align 8, !dbg !19829
  br label %return, !dbg !19830

if.else:                                          ; preds = %entry
  %6 = load double, double* %sec.addr, align 8, !dbg !19831
  %cmp1 = fcmp olt double %6, 0x43E0000000000000, !dbg !19833
  br i1 %cmp1, label %if.else4, label %if.then2, !dbg !19834

if.then2:                                         ; preds = %if.else
  %call3 = call { i64, i64 } @make_timespec(i64 9223372036854775807, i64 999999999), !dbg !19835
  %7 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !19835
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !19835
  %9 = extractvalue { i64, i64 } %call3, 0, !dbg !19835
  store i64 %9, i64* %8, align 8, !dbg !19835
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !19835
  %11 = extractvalue { i64, i64 } %call3, 1, !dbg !19835
  store i64 %11, i64* %10, align 8, !dbg !19835
  br label %return, !dbg !19836

if.else4:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i64* %s, metadata !19837, metadata !DIExpression()), !dbg !19839
  %12 = load double, double* %sec.addr, align 8, !dbg !19840
  %conv = fptosi double %12 to i64, !dbg !19840
  store i64 %conv, i64* %s, align 8, !dbg !19839
  call void @llvm.dbg.declare(metadata double* %frac, metadata !19841, metadata !DIExpression()), !dbg !19842
  %13 = load double, double* %sec.addr, align 8, !dbg !19843
  %14 = load i64, i64* %s, align 8, !dbg !19844
  %conv5 = sitofp i64 %14 to double, !dbg !19844
  %sub = fsub double %13, %conv5, !dbg !19845
  %mul = fmul double 1.000000e+09, %sub, !dbg !19846
  store double %mul, double* %frac, align 8, !dbg !19842
  call void @llvm.dbg.declare(metadata i64* %ns, metadata !19847, metadata !DIExpression()), !dbg !19848
  %15 = load double, double* %frac, align 8, !dbg !19849
  %conv6 = fptosi double %15 to i64, !dbg !19849
  store i64 %conv6, i64* %ns, align 8, !dbg !19848
  %16 = load i64, i64* %ns, align 8, !dbg !19850
  %conv7 = sitofp i64 %16 to double, !dbg !19850
  %17 = load double, double* %frac, align 8, !dbg !19851
  %cmp8 = fcmp olt double %conv7, %17, !dbg !19852
  %conv9 = zext i1 %cmp8 to i32, !dbg !19852
  %conv10 = sext i32 %conv9 to i64, !dbg !19850
  %18 = load i64, i64* %ns, align 8, !dbg !19853
  %add = add nsw i64 %18, %conv10, !dbg !19853
  store i64 %add, i64* %ns, align 8, !dbg !19853
  %19 = load i64, i64* %ns, align 8, !dbg !19854
  %div = sdiv i64 %19, 1000000000, !dbg !19855
  %20 = load i64, i64* %s, align 8, !dbg !19856
  %add11 = add nsw i64 %20, %div, !dbg !19856
  store i64 %add11, i64* %s, align 8, !dbg !19856
  %21 = load i64, i64* %ns, align 8, !dbg !19857
  %rem = srem i64 %21, 1000000000, !dbg !19857
  store i64 %rem, i64* %ns, align 8, !dbg !19857
  %22 = load i64, i64* %ns, align 8, !dbg !19858
  %cmp12 = icmp slt i64 %22, 0, !dbg !19860
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !19861

if.then14:                                        ; preds = %if.else4
  %23 = load i64, i64* %s, align 8, !dbg !19862
  %dec = add nsw i64 %23, -1, !dbg !19862
  store i64 %dec, i64* %s, align 8, !dbg !19862
  %24 = load i64, i64* %ns, align 8, !dbg !19864
  %add15 = add nsw i64 %24, 1000000000, !dbg !19864
  store i64 %add15, i64* %ns, align 8, !dbg !19864
  br label %if.end, !dbg !19865

if.end:                                           ; preds = %if.then14, %if.else4
  %25 = load i64, i64* %s, align 8, !dbg !19866
  %26 = load i64, i64* %ns, align 8, !dbg !19867
  %call16 = call { i64, i64 } @make_timespec(i64 %25, i64 %26), !dbg !19868
  %27 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !19868
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 0, !dbg !19868
  %29 = extractvalue { i64, i64 } %call16, 0, !dbg !19868
  store i64 %29, i64* %28, align 8, !dbg !19868
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 1, !dbg !19868
  %31 = extractvalue { i64, i64 } %call16, 1, !dbg !19868
  store i64 %31, i64* %30, align 8, !dbg !19868
  br label %return, !dbg !19869

return:                                           ; preds = %if.end, %if.then2, %if.then
  %32 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !19870
  %33 = load { i64, i64 }, { i64, i64 }* %32, align 8, !dbg !19870
  ret { i64, i64 } %33, !dbg !19870
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fd_safer_flag(i32 %fd, i32 %flag) #4 !dbg !19871 {
entry:
  %fd.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %f = alloca i32, align 4, !ctir !5
  %e = alloca i32, align 4, !ctir !5
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !19873, metadata !DIExpression()), !dbg !19874
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !19875, metadata !DIExpression()), !dbg !19876
  %0 = load i32, i32* %fd.addr, align 4, !dbg !19877
  %cmp = icmp sle i32 0, %0, !dbg !19879
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !19880

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !dbg !19881
  %cmp1 = icmp sle i32 %1, 2, !dbg !19882
  br i1 %cmp1, label %if.then, label %if.end, !dbg !19883

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %f, metadata !19884, metadata !DIExpression()), !dbg !19886
  %2 = load i32, i32* %fd.addr, align 4, !dbg !19887
  %3 = load i32, i32* %flag.addr, align 4, !dbg !19888
  %call = call i32 @dup_safer_flag(i32 %2, i32 %3), !dbg !19889
  store i32 %call, i32* %f, align 4, !dbg !19886
  call void @llvm.dbg.declare(metadata i32* %e, metadata !19890, metadata !DIExpression()), !dbg !19891
  %call2 = call i32* @__errno_location() #16, !dbg !19892
  %4 = load i32, i32* %call2, align 4, !dbg !19892, !ctir !5
  store i32 %4, i32* %e, align 4, !dbg !19891
  %5 = load i32, i32* %fd.addr, align 4, !dbg !19893
  %call3 = call i32 @close(i32 %5), !dbg !19894
  %6 = load i32, i32* %e, align 4, !dbg !19895
  %call4 = call i32* @__errno_location() #16, !dbg !19896
  store i32 %6, i32* %call4, align 4, !dbg !19897, !ctir !5
  %7 = load i32, i32* %f, align 4, !dbg !19898
  store i32 %7, i32* %fd.addr, align 4, !dbg !19899
  br label %if.end, !dbg !19900

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %8 = load i32, i32* %fd.addr, align 4, !dbg !19901
  ret i32 %8, !dbg !19902
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @dup_safer_flag(i32 %fd, i32 %flag) #4 !dbg !19903 {
entry:
  %fd.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !19905, metadata !DIExpression()), !dbg !19906
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !19907, metadata !DIExpression()), !dbg !19908
  %0 = load i32, i32* %fd.addr, align 4, !dbg !19909
  %1 = load i32, i32* %flag.addr, align 4, !dbg !19910
  %and = and i32 %1, 524288, !dbg !19911
  %tobool = icmp ne i32 %and, 0, !dbg !19912
  %2 = zext i1 %tobool to i64, !dbg !19912
  %cond = select i1 %tobool, i32 1030, i32 0, !dbg !19912
  %call = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 %cond, i32 3), !dbg !19913
  ret i32 %call, !dbg !19914
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct._IO_FILE* @fopen_safer(i8* %file, i8* %mode) #4 !dbg !19915 {
entry:
  %retval = alloca %struct._IO_FILE*, align 8
  %file.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  %fp = alloca %struct._IO_FILE*, align 8, !ctir !1670
  %fd = alloca i32, align 4, !ctir !5
  %f = alloca i32, align 4, !ctir !5
  %e = alloca i32, align 4, !ctir !5
  %e15 = alloca i32, align 4, !ctir !5
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !19919, metadata !DIExpression()), !dbg !19920
  store i8* %mode, i8** %mode.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mode.addr, metadata !19921, metadata !DIExpression()), !dbg !19922
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %fp, metadata !19923, metadata !DIExpression()), !dbg !19924
  %0 = load i8*, i8** %file.addr, align 8, !dbg !19925
  %1 = load i8*, i8** %mode.addr, align 8, !dbg !19926
  %call = call %struct._IO_FILE* @fopen(i8* %0, i8* %1), !dbg !19927
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8, !dbg !19924
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !19928
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !19928
  br i1 %tobool, label %if.then, label %if.end21, !dbg !19930

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !19931, metadata !DIExpression()), !dbg !19933
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !19934
  %call1 = call i32 @fileno(%struct._IO_FILE* %3) #12, !dbg !19935
  store i32 %call1, i32* %fd, align 4, !dbg !19933
  %4 = load i32, i32* %fd, align 4, !dbg !19936
  %cmp = icmp sle i32 0, %4, !dbg !19938
  br i1 %cmp, label %land.lhs.true, label %if.end20, !dbg !19939

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %fd, align 4, !dbg !19940
  %cmp2 = icmp sle i32 %5, 2, !dbg !19941
  br i1 %cmp2, label %if.then3, label %if.end20, !dbg !19942

if.then3:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %f, metadata !19943, metadata !DIExpression()), !dbg !19945
  %6 = load i32, i32* %fd, align 4, !dbg !19946
  %call4 = call i32 @dup_safer(i32 %6), !dbg !19947
  store i32 %call4, i32* %f, align 4, !dbg !19945
  %7 = load i32, i32* %f, align 4, !dbg !19948
  %cmp5 = icmp slt i32 %7, 0, !dbg !19950
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !19951

if.then6:                                         ; preds = %if.then3
  call void @llvm.dbg.declare(metadata i32* %e, metadata !19952, metadata !DIExpression()), !dbg !19954
  %call7 = call i32* @__errno_location() #16, !dbg !19955
  %8 = load i32, i32* %call7, align 4, !dbg !19955, !ctir !5
  store i32 %8, i32* %e, align 4, !dbg !19954
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !19956
  %call8 = call i32 @rpl_fclose(%struct._IO_FILE* %9), !dbg !19957
  %10 = load i32, i32* %e, align 4, !dbg !19958
  %call9 = call i32* @__errno_location() #16, !dbg !19959
  store i32 %10, i32* %call9, align 4, !dbg !19960, !ctir !5
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8, !dbg !19961
  br label %return, !dbg !19961

if.end:                                           ; preds = %if.then3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !19962
  %call10 = call i32 @rpl_fclose(%struct._IO_FILE* %11), !dbg !19964
  %cmp11 = icmp ne i32 %call10, 0, !dbg !19965
  br i1 %cmp11, label %if.then14, label %lor.lhs.false, !dbg !19966

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, i32* %f, align 4, !dbg !19967
  %13 = load i8*, i8** %mode.addr, align 8, !dbg !19968
  %call12 = call %struct._IO_FILE* @fdopen(i32 %12, i8* %13) #12, !dbg !19969
  store %struct._IO_FILE* %call12, %struct._IO_FILE** %fp, align 8, !dbg !19970
  %tobool13 = icmp ne %struct._IO_FILE* %call12, null, !dbg !19970
  br i1 %tobool13, label %if.end19, label %if.then14, !dbg !19971

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata i32* %e15, metadata !19972, metadata !DIExpression()), !dbg !19974
  %call16 = call i32* @__errno_location() #16, !dbg !19975
  %14 = load i32, i32* %call16, align 4, !dbg !19975, !ctir !5
  store i32 %14, i32* %e15, align 4, !dbg !19974
  %15 = load i32, i32* %f, align 4, !dbg !19976
  %call17 = call i32 @close(i32 %15), !dbg !19977
  %16 = load i32, i32* %e15, align 4, !dbg !19978
  %call18 = call i32* @__errno_location() #16, !dbg !19979
  store i32 %16, i32* %call18, align 4, !dbg !19980, !ctir !5
  store %struct._IO_FILE* null, %struct._IO_FILE** %retval, align 8, !dbg !19981
  br label %return, !dbg !19981

if.end19:                                         ; preds = %lor.lhs.false
  br label %if.end20, !dbg !19982

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %if.then
  br label %if.end21, !dbg !19983

if.end21:                                         ; preds = %if.end20, %entry
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8, !dbg !19984
  store %struct._IO_FILE* %17, %struct._IO_FILE** %retval, align 8, !dbg !19985
  br label %return, !dbg !19985

return:                                           ; preds = %if.end21, %if.then14, %if.then6
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %retval, align 8, !dbg !19986
  ret %struct._IO_FILE* %18, !dbg !19986
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @locale_charset() #4 !dbg !19987 {
entry:
  %codeset = alloca i8*, align 8, !ctir !90
  call void @llvm.dbg.declare(metadata i8** %codeset, metadata !19990, metadata !DIExpression()), !dbg !19991
  %call = call i8* @rpl_nl_langinfo(i32 14), !dbg !19992
  store i8* %call, i8** %codeset, align 8, !dbg !19993
  %0 = load i8*, i8** %codeset, align 8, !dbg !19994
  %cmp = icmp eq i8* %0, null, !dbg !19996
  br i1 %cmp, label %if.then, label %if.end, !dbg !19997

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.421, i64 0, i64 0), i8** %codeset, align 8, !dbg !19998
  br label %if.end, !dbg !19999

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %codeset, align 8, !dbg !20000
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !20000, !ctir !90
  %2 = load i8, i8* %arrayidx, align 1, !dbg !20000
  %conv = sext i8 %2 to i32, !dbg !20000
  %cmp1 = icmp eq i32 %conv, 0, !dbg !20004
  br i1 %cmp1, label %if.then3, label %if.end4, !dbg !20005

if.then3:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.422, i64 0, i64 0), i8** %codeset, align 8, !dbg !20006
  br label %if.end4, !dbg !20007

if.end4:                                          ; preds = %if.then3, %if.end
  %3 = load i8*, i8** %codeset, align 8, !dbg !20008
  ret i8* %3, !dbg !20009
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @memcoll(i8* %s1, i64 %s1len, i8* %s2, i64 %s2len) #4 !dbg !20010 {
entry:
  %s1.addr = alloca i8*, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4, !ctir !5
  %n1 = alloca i8, align 1, !ctir !8
  %n2 = alloca i8, align 1, !ctir !8
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !20012, metadata !DIExpression()), !dbg !20013
  store i64 %s1len, i64* %s1len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1len.addr, metadata !20014, metadata !DIExpression()), !dbg !20015
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !20016, metadata !DIExpression()), !dbg !20017
  store i64 %s2len, i64* %s2len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2len.addr, metadata !20018, metadata !DIExpression()), !dbg !20019
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !20020, metadata !DIExpression()), !dbg !20021
  %0 = load i64, i64* %s1len.addr, align 8, !dbg !20022
  %1 = load i64, i64* %s2len.addr, align 8, !dbg !20024
  %cmp = icmp eq i64 %0, %1, !dbg !20025
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !20026

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !20027
  %3 = load i8*, i8** %s2.addr, align 8, !dbg !20028
  %4 = load i64, i64* %s1len.addr, align 8, !dbg !20029
  %call = call i32 @memcmp(i8* %2, i8* %3, i64 %4) #14, !dbg !20030
  %cmp1 = icmp eq i32 %call, 0, !dbg !20031
  br i1 %cmp1, label %if.then, label %if.else, !dbg !20032

if.then:                                          ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #16, !dbg !20033
  store i32 0, i32* %call2, align 4, !dbg !20035, !ctir !5
  store i32 0, i32* %diff, align 4, !dbg !20036
  br label %if.end, !dbg !20037

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata i8* %n1, metadata !20038, metadata !DIExpression()), !dbg !20040
  %5 = load i8*, i8** %s1.addr, align 8, !dbg !20041
  %6 = load i64, i64* %s1len.addr, align 8, !dbg !20042
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !20041, !ctir !7
  %7 = load i8, i8* %arrayidx, align 1, !dbg !20041
  store i8 %7, i8* %n1, align 1, !dbg !20040
  call void @llvm.dbg.declare(metadata i8* %n2, metadata !20043, metadata !DIExpression()), !dbg !20044
  %8 = load i8*, i8** %s2.addr, align 8, !dbg !20045
  %9 = load i64, i64* %s2len.addr, align 8, !dbg !20046
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !20045, !ctir !7
  %10 = load i8, i8* %arrayidx3, align 1, !dbg !20045
  store i8 %10, i8* %n2, align 1, !dbg !20044
  %11 = load i8*, i8** %s1.addr, align 8, !dbg !20047
  %12 = load i64, i64* %s1len.addr, align 8, !dbg !20048
  %arrayidx4 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !20047, !ctir !7
  store i8 0, i8* %arrayidx4, align 1, !dbg !20049
  %13 = load i8*, i8** %s2.addr, align 8, !dbg !20050
  %14 = load i64, i64* %s2len.addr, align 8, !dbg !20051
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %14, !dbg !20050, !ctir !7
  store i8 0, i8* %arrayidx5, align 1, !dbg !20052
  %15 = load i8*, i8** %s1.addr, align 8, !dbg !20053
  %16 = load i64, i64* %s1len.addr, align 8, !dbg !20054
  %add = add i64 %16, 1, !dbg !20055
  %17 = load i8*, i8** %s2.addr, align 8, !dbg !20056
  %18 = load i64, i64* %s2len.addr, align 8, !dbg !20057
  %add6 = add i64 %18, 1, !dbg !20058
  %call7 = call i32 @strcoll_loop(i8* %15, i64 %add, i8* %17, i64 %add6), !dbg !20059
  store i32 %call7, i32* %diff, align 4, !dbg !20060
  %19 = load i8, i8* %n1, align 1, !dbg !20061
  %20 = load i8*, i8** %s1.addr, align 8, !dbg !20062
  %21 = load i64, i64* %s1len.addr, align 8, !dbg !20063
  %arrayidx8 = getelementptr inbounds i8, i8* %20, i64 %21, !dbg !20062, !ctir !7
  store i8 %19, i8* %arrayidx8, align 1, !dbg !20064
  %22 = load i8, i8* %n2, align 1, !dbg !20065
  %23 = load i8*, i8** %s2.addr, align 8, !dbg !20066
  %24 = load i64, i64* %s2len.addr, align 8, !dbg !20067
  %arrayidx9 = getelementptr inbounds i8, i8* %23, i64 %24, !dbg !20066, !ctir !7
  store i8 %22, i8* %arrayidx9, align 1, !dbg !20068
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load i32, i32* %diff, align 4, !dbg !20069
  ret i32 %25, !dbg !20070
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @strcoll_loop(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #4 !dbg !20071 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4, !ctir !5
  %size1 = alloca i64, align 8, !ctir !52
  %size2 = alloca i64, align 8, !ctir !52
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !20072, metadata !DIExpression()), !dbg !20073
  store i64 %s1size, i64* %s1size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1size.addr, metadata !20074, metadata !DIExpression()), !dbg !20075
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !20076, metadata !DIExpression()), !dbg !20077
  store i64 %s2size, i64* %s2size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2size.addr, metadata !20078, metadata !DIExpression()), !dbg !20079
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !20080, metadata !DIExpression()), !dbg !20081
  br label %while.cond, !dbg !20082

while.cond:                                       ; preds = %if.end14, %entry
  %call = call i32* @__errno_location() #16, !dbg !20083
  store i32 0, i32* %call, align 4, !dbg !20084, !ctir !5
  %0 = load i8*, i8** %s1.addr, align 8, !dbg !20085
  %1 = load i8*, i8** %s2.addr, align 8, !dbg !20086
  %call1 = call i32 @strcoll(i8* %0, i8* %1) #14, !dbg !20087
  store i32 %call1, i32* %diff, align 4, !dbg !20088
  %tobool = icmp ne i32 %call1, 0, !dbg !20088
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !20089

lor.rhs:                                          ; preds = %while.cond
  %call2 = call i32* @__errno_location() #16, !dbg !20090
  %2 = load i32, i32* %call2, align 4, !dbg !20090, !ctir !5
  %tobool3 = icmp ne i32 %2, 0, !dbg !20089
  br label %lor.end, !dbg !20089

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %3 = phi i1 [ true, %while.cond ], [ %tobool3, %lor.rhs ]
  %lnot = xor i1 %3, true, !dbg !20091
  br i1 %lnot, label %while.body, label %while.end, !dbg !20082

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i64* %size1, metadata !20092, metadata !DIExpression()), !dbg !20094
  %4 = load i8*, i8** %s1.addr, align 8, !dbg !20095
  %call4 = call i64 @strlen(i8* %4) #14, !dbg !20096
  %add = add i64 %call4, 1, !dbg !20097
  store i64 %add, i64* %size1, align 8, !dbg !20094
  call void @llvm.dbg.declare(metadata i64* %size2, metadata !20098, metadata !DIExpression()), !dbg !20099
  %5 = load i8*, i8** %s2.addr, align 8, !dbg !20100
  %call5 = call i64 @strlen(i8* %5) #14, !dbg !20101
  %add6 = add i64 %call5, 1, !dbg !20102
  store i64 %add6, i64* %size2, align 8, !dbg !20099
  %6 = load i64, i64* %size1, align 8, !dbg !20103
  %7 = load i8*, i8** %s1.addr, align 8, !dbg !20104
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %6, !dbg !20104, !ctir !91
  store i8* %add.ptr, i8** %s1.addr, align 8, !dbg !20104
  %8 = load i64, i64* %size2, align 8, !dbg !20105
  %9 = load i8*, i8** %s2.addr, align 8, !dbg !20106
  %add.ptr7 = getelementptr inbounds i8, i8* %9, i64 %8, !dbg !20106, !ctir !91
  store i8* %add.ptr7, i8** %s2.addr, align 8, !dbg !20106
  %10 = load i64, i64* %size1, align 8, !dbg !20107
  %11 = load i64, i64* %s1size.addr, align 8, !dbg !20108
  %sub = sub i64 %11, %10, !dbg !20108
  store i64 %sub, i64* %s1size.addr, align 8, !dbg !20108
  %12 = load i64, i64* %size2, align 8, !dbg !20109
  %13 = load i64, i64* %s2size.addr, align 8, !dbg !20110
  %sub8 = sub i64 %13, %12, !dbg !20110
  store i64 %sub8, i64* %s2size.addr, align 8, !dbg !20110
  %14 = load i64, i64* %s1size.addr, align 8, !dbg !20111
  %cmp = icmp eq i64 %14, 0, !dbg !20113
  br i1 %cmp, label %if.then, label %if.end, !dbg !20114

if.then:                                          ; preds = %while.body
  %15 = load i64, i64* %s2size.addr, align 8, !dbg !20115
  %cmp9 = icmp ne i64 %15, 0, !dbg !20116
  %conv = zext i1 %cmp9 to i32, !dbg !20116
  %sub10 = sub nsw i32 0, %conv, !dbg !20117
  store i32 %sub10, i32* %retval, align 4, !dbg !20118
  br label %return, !dbg !20118

if.end:                                           ; preds = %while.body
  %16 = load i64, i64* %s2size.addr, align 8, !dbg !20119
  %cmp11 = icmp eq i64 %16, 0, !dbg !20121
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !20122

if.then13:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !20123
  br label %return, !dbg !20123

if.end14:                                         ; preds = %if.end
  br label %while.cond, !dbg !20082, !llvm.loop !20124

while.end:                                        ; preds = %lor.end
  %17 = load i32, i32* %diff, align 4, !dbg !20126
  store i32 %17, i32* %retval, align 4, !dbg !20127
  br label %return, !dbg !20127

return:                                           ; preds = %while.end, %if.then13, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !20128
  ret i32 %18, !dbg !20128
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcoll(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @memcoll0(i8* %s1, i64 %s1size, i8* %s2, i64 %s2size) #4 !dbg !20129 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca i8*, align 8
  %s2size.addr = alloca i64, align 8
  store i8* %s1, i8** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s1.addr, metadata !20130, metadata !DIExpression()), !dbg !20131
  store i64 %s1size, i64* %s1size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s1size.addr, metadata !20132, metadata !DIExpression()), !dbg !20133
  store i8* %s2, i8** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s2.addr, metadata !20134, metadata !DIExpression()), !dbg !20135
  store i64 %s2size, i64* %s2size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s2size.addr, metadata !20136, metadata !DIExpression()), !dbg !20137
  %0 = load i64, i64* %s1size.addr, align 8, !dbg !20138
  %1 = load i64, i64* %s2size.addr, align 8, !dbg !20140
  %cmp = icmp eq i64 %0, %1, !dbg !20141
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !20142

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %s1.addr, align 8, !dbg !20143
  %3 = load i8*, i8** %s2.addr, align 8, !dbg !20144
  %4 = load i64, i64* %s1size.addr, align 8, !dbg !20145
  %call = call i32 @memcmp(i8* %2, i8* %3, i64 %4) #14, !dbg !20146
  %cmp1 = icmp eq i32 %call, 0, !dbg !20147
  br i1 %cmp1, label %if.then, label %if.else, !dbg !20148

if.then:                                          ; preds = %land.lhs.true
  %call2 = call i32* @__errno_location() #16, !dbg !20149
  store i32 0, i32* %call2, align 4, !dbg !20151, !ctir !5
  store i32 0, i32* %retval, align 4, !dbg !20152
  br label %return, !dbg !20152

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load i8*, i8** %s1.addr, align 8, !dbg !20153
  %6 = load i64, i64* %s1size.addr, align 8, !dbg !20154
  %7 = load i8*, i8** %s2.addr, align 8, !dbg !20155
  %8 = load i64, i64* %s2size.addr, align 8, !dbg !20156
  %call3 = call i32 @strcoll_loop(i8* %5, i64 %6, i8* %7, i64 %8), !dbg !20157
  store i32 %call3, i32* %retval, align 4, !dbg !20158
  br label %return, !dbg !20158

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !20159
  ret i32 %9, !dbg !20159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local { i64, i64 } @make_timespec(i64 %s, i64 %ns) #4 !dbg !20160 {
entry:
  %retval = alloca %struct.timespec, align 8
  %s.addr = alloca i64, align 8
  %ns.addr = alloca i64, align 8
  store i64 %s, i64* %s.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %s.addr, metadata !20168, metadata !DIExpression()), !dbg !20169
  store i64 %ns, i64* %ns.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ns.addr, metadata !20170, metadata !DIExpression()), !dbg !20171
  call void @llvm.dbg.declare(metadata %struct.timespec* %retval, metadata !20172, metadata !DIExpression()), !dbg !20173
  %0 = load i64, i64* %s.addr, align 8, !dbg !20174
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0, !dbg !20175, !ctir !20164
  store i64 %0, i64* %tv_sec, align 8, !dbg !20176, !ctir !509
  %1 = load i64, i64* %ns.addr, align 8, !dbg !20177
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 1, !dbg !20178, !ctir !20164
  store i64 %1, i64* %tv_nsec, align 8, !dbg !20179, !ctir !511
  %2 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !20180
  %3 = load { i64, i64 }, { i64, i64 }* %2, align 8, !dbg !20180
  ret { i64, i64 } %3, !dbg !20180
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @timespec_cmp(i64 %a.coerce0, i64 %a.coerce1, i64 %b.coerce0, i64 %b.coerce1) #9 !dbg !20181 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.timespec, align 8
  %b = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  %3 = bitcast %struct.timespec* %b to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %b.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %b.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec* %a, metadata !20184, metadata !DIExpression()), !dbg !20185
  call void @llvm.dbg.declare(metadata %struct.timespec* %b, metadata !20186, metadata !DIExpression()), !dbg !20187
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0, !dbg !20188, !ctir !20164
  %6 = load i64, i64* %tv_sec, align 8, !dbg !20188, !ctir !509
  %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 0, !dbg !20190, !ctir !20164
  %7 = load i64, i64* %tv_sec1, align 8, !dbg !20190, !ctir !509
  %cmp = icmp slt i64 %6, %7, !dbg !20191
  br i1 %cmp, label %if.then, label %if.end, !dbg !20192

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !20193
  br label %return, !dbg !20193

if.end:                                           ; preds = %entry
  %tv_sec2 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0, !dbg !20194, !ctir !20164
  %8 = load i64, i64* %tv_sec2, align 8, !dbg !20194, !ctir !509
  %tv_sec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 0, !dbg !20196, !ctir !20164
  %9 = load i64, i64* %tv_sec3, align 8, !dbg !20196, !ctir !509
  %cmp4 = icmp sgt i64 %8, %9, !dbg !20197
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !20198

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !20199
  br label %return, !dbg !20199

if.end6:                                          ; preds = %if.end
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1, !dbg !20200, !ctir !20164
  %10 = load i64, i64* %tv_nsec, align 8, !dbg !20200, !ctir !511
  %cmp7 = icmp sle i64 -1, %10, !dbg !20200
  br i1 %cmp7, label %land.lhs.true, label %cond.false, !dbg !20200

land.lhs.true:                                    ; preds = %if.end6
  %tv_nsec8 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1, !dbg !20200, !ctir !20164
  %11 = load i64, i64* %tv_nsec8, align 8, !dbg !20200, !ctir !511
  %cmp9 = icmp sle i64 %11, 2000000000, !dbg !20200
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !20200

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !20200

cond.false:                                       ; preds = %land.lhs.true, %if.end6
  unreachable, !dbg !20200

unreachable.cont:                                 ; No predecessors!
  br label %cond.end, !dbg !20200

cond.end:                                         ; preds = %unreachable.cont, %cond.true
  %tv_nsec10 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 1, !dbg !20201, !ctir !20164
  %12 = load i64, i64* %tv_nsec10, align 8, !dbg !20201, !ctir !511
  %cmp11 = icmp sle i64 -1, %12, !dbg !20201
  br i1 %cmp11, label %land.lhs.true12, label %cond.false16, !dbg !20201

land.lhs.true12:                                  ; preds = %cond.end
  %tv_nsec13 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 1, !dbg !20201, !ctir !20164
  %13 = load i64, i64* %tv_nsec13, align 8, !dbg !20201, !ctir !511
  %cmp14 = icmp sle i64 %13, 2000000000, !dbg !20201
  br i1 %cmp14, label %cond.true15, label %cond.false16, !dbg !20201

cond.true15:                                      ; preds = %land.lhs.true12
  br label %cond.end18, !dbg !20201

cond.false16:                                     ; preds = %land.lhs.true12, %cond.end
  unreachable, !dbg !20201

unreachable.cont17:                               ; No predecessors!
  br label %cond.end18, !dbg !20201

cond.end18:                                       ; preds = %unreachable.cont17, %cond.true15
  %tv_nsec19 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1, !dbg !20202, !ctir !20164
  %14 = load i64, i64* %tv_nsec19, align 8, !dbg !20202, !ctir !511
  %tv_nsec20 = getelementptr inbounds %struct.timespec, %struct.timespec* %b, i32 0, i32 1, !dbg !20203, !ctir !20164
  %15 = load i64, i64* %tv_nsec20, align 8, !dbg !20203, !ctir !511
  %sub = sub nsw i64 %14, %15, !dbg !20204
  %conv = trunc i64 %sub to i32, !dbg !20205
  store i32 %conv, i32* %retval, align 4, !dbg !20206
  br label %return, !dbg !20206

return:                                           ; preds = %cond.end18, %if.then5, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !20207
  ret i32 %16, !dbg !20207
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @timespec_sign(i64 %a.coerce0, i64 %a.coerce1) #9 !dbg !20208 {
entry:
  %a = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec* %a, metadata !20211, metadata !DIExpression()), !dbg !20212
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0, !dbg !20213, !ctir !20164
  %3 = load i64, i64* %tv_sec, align 8, !dbg !20213, !ctir !509
  %cmp = icmp slt i64 %3, 0, !dbg !20214
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !20215

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !20215

cond.false:                                       ; preds = %entry
  %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0, !dbg !20216, !ctir !20164
  %4 = load i64, i64* %tv_sec1, align 8, !dbg !20216, !ctir !509
  %tobool = icmp ne i64 %4, 0, !dbg !20217
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !20218

lor.rhs:                                          ; preds = %cond.false
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1, !dbg !20219, !ctir !20164
  %5 = load i64, i64* %tv_nsec, align 8, !dbg !20219, !ctir !511
  %tobool2 = icmp ne i64 %5, 0, !dbg !20218
  br label %lor.end, !dbg !20218

lor.end:                                          ; preds = %lor.rhs, %cond.false
  %6 = phi i1 [ true, %cond.false ], [ %tobool2, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !20218
  br label %cond.end, !dbg !20215

cond.end:                                         ; preds = %lor.end, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %lor.ext, %lor.end ], !dbg !20215
  ret i32 %cond, !dbg !20220
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @timespectod(i64 %a.coerce0, i64 %a.coerce1) #4 !dbg !20221 {
entry:
  %a = alloca %struct.timespec, align 8
  %0 = bitcast %struct.timespec* %a to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %a.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %a.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.timespec* %a, metadata !20224, metadata !DIExpression()), !dbg !20225
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 0, !dbg !20226, !ctir !20164
  %3 = load i64, i64* %tv_sec, align 8, !dbg !20226, !ctir !509
  %conv = sitofp i64 %3 to double, !dbg !20227
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %a, i32 0, i32 1, !dbg !20228, !ctir !20164
  %4 = load i64, i64* %tv_nsec, align 8, !dbg !20228, !ctir !511
  %conv1 = sitofp i64 %4 to double, !dbg !20229
  %div = fdiv double %conv1, 1.000000e+09, !dbg !20230
  %add = fadd double %conv, %div, !dbg !20231
  ret double %add, !dbg !20232
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @dup_safer(i32 %fd) #4 !dbg !20233 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !20235, metadata !DIExpression()), !dbg !20236
  %0 = load i32, i32* %fd.addr, align 4, !dbg !20237
  %call = call i32 (i32, i32, ...) @rpl_fcntl(i32 %0, i32 0, i32 3), !dbg !20238
  ret i32 %call, !dbg !20239
}

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind optnone readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind readonly }
attributes #15 = { noreturn }
attributes #16 = { nounwind readnone }

!llvm.dbg.cu = !{!62, !814, !820, !867, !914, !928, !1229, !1241, !1244, !935, !1247, !1261, !1264, !1267, !1270, !1283, !1300, !992, !1307, !998, !1043, !1310, !1398, !1403, !1443, !1445, !1448, !1451, !1115, !1513, !1516, !1519, !1522, !1524, !1532, !1543, !1549, !1551, !1127, !1553, !1595, !1638, !1641, !1646, !1143, !1648, !1651, !1653, !1657, !1660, !1663, !1665, !1667, !1710, !1713, !1716, !1719}
!llvm.ident = !{!1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721, !1721}
!llvm.module.flags = !{!1722, !1723, !1724, !1725}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!1 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !3)
!2 = !DIFile(filename: "/usr/include/libio.h", directory: "")
!3 = !{!4, !6, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !26, !27, !28, !29, !33, !35, !37, !41, !44, !46, !48, !49, !50, !51, !55, !56}
!4 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1, file: !2, line: 242, baseType: !5, size: 32)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!10 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!11 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1, file: !2, line: 260, baseType: !20, size: 64, offset: 768)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !22)
!22 = !{!23, !24, !25}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !21, file: !2, line: 157, baseType: !20, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !21, file: !2, line: 158, baseType: !0, size: 64, offset: 64)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !21, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1, file: !2, line: 262, baseType: !0, size: 64, offset: 832)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !31, line: 131, baseType: !32)
!31 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!32 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!34 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!36 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !39)
!39 = !{!40}
!40 = !DISubrange(count: 1)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2, line: 150, baseType: null)
!44 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !31, line: 132, baseType: !32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!50 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !53, line: 46, baseType: !54)
!53 = !DIFile(filename: "llvm/build/lib/clang/9.0.0/include/stddef.h", directory: "/home/mohamad/clone")
!54 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!55 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!57 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !58)
!58 = !{!59}
!59 = !DISubrange(count: 20)
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "hard_LC_COLLATE", scope: !62, file: !63, line: 160, type: !162, isLocal: true, isDefinition: true)
!62 = distinct !DICompileUnit(language: DW_LANG_C99, file: !63, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !64, retainedTypes: !79, globals: !709, nameTableKind: None)
!63 = !DIFile(filename: "src/sort.c", directory: "/home/mohamad/clone/coreutils")
!64 = !{!65, !71}
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "blanktype", file: !63, line: 168, baseType: !66, size: 32, elements: !67)
!66 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!67 = !{!68, !69, !70}
!68 = !DIEnumerator(name: "bl_start", value: 0, isUnsigned: true)
!69 = !DIEnumerator(name: "bl_end", value: 1, isUnsigned: true)
!70 = !DIEnumerator(name: "bl_both", value: 2, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "strtol_error", file: !72, line: 26, baseType: !66, size: 32, elements: !73)
!72 = !DIFile(filename: "./lib/xstrtol.h", directory: "/home/mohamad/clone/coreutils")
!73 = !{!74, !75, !76, !77, !78}
!74 = !DIEnumerator(name: "LONGINT_OK", value: 0, isUnsigned: true)
!75 = !DIEnumerator(name: "LONGINT_OVERFLOW", value: 1, isUnsigned: true)
!76 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR", value: 2, isUnsigned: true)
!77 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW", value: 3, isUnsigned: true)
!78 = !DIEnumerator(name: "LONGINT_INVALID", value: 4, isUnsigned: true)
!79 = !{!47, !80, !66, !85, !7, !5, !34, !0, !87, !90, !92, !95, !57, !98, !101, !104, !107, !110, !113, !116, !119, !122, !125, !128, !131, !134, !137, !140, !143, !146, !149, !152, !162, !8, !52, !175, !178, !38, !179, !182, !185, !214, !222, !226, !314, !317, !91, !327, !330, !333, !334, !337, !340, !343, !346, !348, !350, !353, !356, !359, !360, !363, !366, !369, !372, !373, !376, !379, !382, !385, !386, !389, !392, !54, !393, !160, !396, !399, !402, !420, !423, !426, !437, !438, !441, !444, !447, !448, !451, !453, !454, !459, !461, !411, !463, !464, !466, !469, !472, !473, !476, !477, !480, !481, !482, !493, !516, !519, !522, !524, !525, !528, !531, !534, !536, !539, !547, !550, !553, !554, !557, !535, !558, !559, !562, !575, !576, !579, !582, !407, !417, !584, !489, !487, !585, !413, !586, !589, !593, !600, !604, !607, !617, !618, !619, !620, !583, !621, !661, !663, !30, !665, !668, !629, !670, !671, !678, !680, !682}
!80 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !81, line: 85, baseType: !82)
!81 = !DIFile(filename: "/usr/include/signal.h", directory: "")
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DISubroutineType(types: !84)
!84 = !{null, !5}
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !86, size: 64)
!86 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 312, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: 39)
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64)
!91 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!92 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 568, elements: !93)
!93 = !{!94}
!94 = !DISubrange(count: 71)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 504, elements: !96)
!96 = !{!97}
!97 = !DISubrange(count: 63)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1632, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 204)
!101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1688, elements: !102)
!102 = !{!103}
!103 = !DISubrange(count: 211)
!104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 608, elements: !105)
!105 = !{!106}
!106 = !DISubrange(count: 76)
!107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2192, elements: !108)
!108 = !{!109}
!109 = !DISubrange(count: 274)
!110 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2224, elements: !111)
!111 = !{!112}
!112 = !DISubrange(count: 278)
!113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 136, elements: !114)
!114 = !{!115}
!115 = !DISubrange(count: 17)
!116 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 944, elements: !117)
!117 = !{!118}
!118 = !DISubrange(count: 118)
!119 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2216, elements: !120)
!120 = !{!121}
!121 = !DISubrange(count: 277)
!122 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2784, elements: !123)
!123 = !{!124}
!124 = !DISubrange(count: 348)
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1152, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 144)
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1728, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 216)
!131 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 3624, elements: !132)
!132 = !{!133}
!133 = !DISubrange(count: 453)
!134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 40, elements: !135)
!135 = !{!136}
!136 = !DISubrange(count: 5)
!137 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !138)
!138 = !{!139}
!139 = !DISubrange(count: 64)
!140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 360, elements: !141)
!141 = !{!142}
!142 = !DISubrange(count: 45)
!143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 432, elements: !144)
!144 = !{!145}
!145 = !DISubrange(count: 54)
!146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 4832, elements: !147)
!147 = !{!148}
!148 = !DISubrange(count: 604)
!149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1832, elements: !150)
!150 = !{!151}
!151 = !DISubrange(count: 229)
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !153, size: 64)
!153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "keyfield", file: !63, line: 199, size: 576, elements: !154)
!154 = !{!155, !156, !157, !158, !159, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174}
!155 = !DIDerivedType(tag: DW_TAG_member, name: "sword", scope: !153, file: !63, line: 201, baseType: !52, size: 64)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "schar", scope: !153, file: !63, line: 202, baseType: !52, size: 64, offset: 64)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "eword", scope: !153, file: !63, line: 203, baseType: !52, size: 64, offset: 128)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "echar", scope: !153, file: !63, line: 204, baseType: !52, size: 64, offset: 192)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "ignore", scope: !153, file: !63, line: 205, baseType: !160, size: 64, offset: 256)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !161, size: 64)
!161 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !162)
!162 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "translate", scope: !153, file: !63, line: 206, baseType: !90, size: 64, offset: 320)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "skipsblanks", scope: !153, file: !63, line: 207, baseType: !162, size: 8, offset: 384)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "skipeblanks", scope: !153, file: !63, line: 208, baseType: !162, size: 8, offset: 392)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "numeric", scope: !153, file: !63, line: 209, baseType: !162, size: 8, offset: 400)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "random", scope: !153, file: !63, line: 212, baseType: !162, size: 8, offset: 408)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "general_numeric", scope: !153, file: !63, line: 213, baseType: !162, size: 8, offset: 416)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "human_numeric", scope: !153, file: !63, line: 215, baseType: !162, size: 8, offset: 424)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "month", scope: !153, file: !63, line: 217, baseType: !162, size: 8, offset: 432)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "reverse", scope: !153, file: !63, line: 218, baseType: !162, size: 8, offset: 440)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !153, file: !63, line: 219, baseType: !162, size: 8, offset: 448)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "traditional_used", scope: !153, file: !63, line: 220, baseType: !162, size: 8, offset: 456)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !153, file: !63, line: 221, baseType: !152, size: 64, offset: 512)
!175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !176)
!176 = !{!177}
!177 = !DISubrange(count: 16)
!178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 80, elements: !180)
!180 = !{!181}
!181 = !DISubrange(count: 10)
!182 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 192, elements: !183)
!183 = !{!184}
!184 = !DISubrange(count: 24)
!185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !186, size: 64)
!186 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !187)
!187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !188, line: 53, size: 768, elements: !189)
!188 = !DIFile(filename: "/usr/include/locale.h", directory: "")
!189 = !{!190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213}
!190 = !DIDerivedType(tag: DW_TAG_member, name: "decimal_point", scope: !187, file: !188, line: 57, baseType: !7, size: 64)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "thousands_sep", scope: !187, file: !188, line: 58, baseType: !7, size: 64, offset: 64)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "grouping", scope: !187, file: !188, line: 64, baseType: !7, size: 64, offset: 128)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "int_curr_symbol", scope: !187, file: !188, line: 70, baseType: !7, size: 64, offset: 192)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "currency_symbol", scope: !187, file: !188, line: 71, baseType: !7, size: 64, offset: 256)
!195 = !DIDerivedType(tag: DW_TAG_member, name: "mon_decimal_point", scope: !187, file: !188, line: 72, baseType: !7, size: 64, offset: 320)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "mon_thousands_sep", scope: !187, file: !188, line: 73, baseType: !7, size: 64, offset: 384)
!197 = !DIDerivedType(tag: DW_TAG_member, name: "mon_grouping", scope: !187, file: !188, line: 74, baseType: !7, size: 64, offset: 448)
!198 = !DIDerivedType(tag: DW_TAG_member, name: "positive_sign", scope: !187, file: !188, line: 75, baseType: !7, size: 64, offset: 512)
!199 = !DIDerivedType(tag: DW_TAG_member, name: "negative_sign", scope: !187, file: !188, line: 76, baseType: !7, size: 64, offset: 576)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "int_frac_digits", scope: !187, file: !188, line: 77, baseType: !8, size: 8, offset: 640)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "frac_digits", scope: !187, file: !188, line: 78, baseType: !8, size: 8, offset: 648)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "p_cs_precedes", scope: !187, file: !188, line: 80, baseType: !8, size: 8, offset: 656)
!203 = !DIDerivedType(tag: DW_TAG_member, name: "p_sep_by_space", scope: !187, file: !188, line: 82, baseType: !8, size: 8, offset: 664)
!204 = !DIDerivedType(tag: DW_TAG_member, name: "n_cs_precedes", scope: !187, file: !188, line: 84, baseType: !8, size: 8, offset: 672)
!205 = !DIDerivedType(tag: DW_TAG_member, name: "n_sep_by_space", scope: !187, file: !188, line: 86, baseType: !8, size: 8, offset: 680)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "p_sign_posn", scope: !187, file: !188, line: 93, baseType: !8, size: 8, offset: 688)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "n_sign_posn", scope: !187, file: !188, line: 94, baseType: !8, size: 8, offset: 696)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_cs_precedes", scope: !187, file: !188, line: 97, baseType: !8, size: 8, offset: 704)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_sep_by_space", scope: !187, file: !188, line: 99, baseType: !8, size: 8, offset: 712)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_cs_precedes", scope: !187, file: !188, line: 101, baseType: !8, size: 8, offset: 720)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_sep_by_space", scope: !187, file: !188, line: 103, baseType: !8, size: 8, offset: 728)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "int_p_sign_posn", scope: !187, file: !188, line: 110, baseType: !8, size: 8, offset: 736)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "int_n_sign_posn", scope: !187, file: !188, line: 111, baseType: !8, size: 8, offset: 744)
!214 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigset_t", file: !215, line: 37, baseType: !216)
!215 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/select.h", directory: "")
!216 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigset_t", file: !217, line: 30, baseType: !218)
!217 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sigset.h", directory: "")
!218 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !217, line: 27, size: 1024, elements: !219)
!219 = !{!220}
!220 = !DIDerivedType(tag: DW_TAG_member, name: "__val", scope: !218, file: !217, line: 29, baseType: !221, size: 1024)
!221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !54, size: 1024, elements: !176)
!222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !223, size: 352, elements: !224)
!223 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!224 = !{!225}
!225 = !DISubrange(count: 11)
!226 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !228, file: !227, line: 28, size: 64, elements: !237)
!227 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sigaction.h", directory: "")
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigaction", file: !227, line: 24, size: 1216, elements: !229)
!229 = !{!230, !231, !232, !233}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "__sigaction_handler", scope: !228, file: !227, line: 35, baseType: !226, size: 64)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "sa_mask", scope: !228, file: !227, line: 43, baseType: !216, size: 1024, offset: 64)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "sa_flags", scope: !228, file: !227, line: 46, baseType: !5, size: 32, offset: 1088)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "sa_restorer", scope: !228, file: !227, line: 49, baseType: !234, size: 64, offset: 1152)
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64)
!235 = !DISubroutineType(types: !236)
!236 = !{null}
!237 = !{!238, !239}
!238 = !DIDerivedType(tag: DW_TAG_member, name: "sa_handler", scope: !226, file: !227, line: 31, baseType: !80, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "sa_sigaction", scope: !226, file: !227, line: 33, baseType: !240, size: 64)
!240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !241, size: 64)
!241 = !DISubroutineType(types: !242)
!242 = !{null, !5, !243, !47}
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !244, size: 64)
!244 = !DIDerivedType(tag: DW_TAG_typedef, name: "siginfo_t", file: !245, line: 133, baseType: !246)
!245 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/siginfo.h", directory: "")
!246 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !245, line: 62, size: 1024, elements: !247)
!247 = !{!248, !249, !250, !251}
!248 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !246, file: !245, line: 64, baseType: !5, size: 32)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !246, file: !245, line: 65, baseType: !5, size: 32, offset: 32)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !246, file: !245, line: 67, baseType: !5, size: 32, offset: 64)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !246, file: !245, line: 132, baseType: !252, size: 896, offset: 128)
!252 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !246, file: !245, line: 69, size: 896, elements: !253)
!253 = !{!254, !258, !265, !276, !282, !292, !303, !308}
!254 = !DIDerivedType(tag: DW_TAG_member, name: "_pad", scope: !252, file: !245, line: 71, baseType: !255, size: 896)
!255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 896, elements: !256)
!256 = !{!257}
!257 = !DISubrange(count: 28)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !252, file: !245, line: 78, baseType: !259, size: 64)
!259 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 74, size: 64, elements: !260)
!260 = !{!261, !263}
!261 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !259, file: !245, line: 76, baseType: !262, size: 32)
!262 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !31, line: 133, baseType: !5)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !259, file: !245, line: 77, baseType: !264, size: 32, offset: 32)
!264 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !31, line: 125, baseType: !66)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !252, file: !245, line: 86, baseType: !266, size: 128)
!266 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 81, size: 128, elements: !267)
!267 = !{!268, !269, !270}
!268 = !DIDerivedType(tag: DW_TAG_member, name: "si_tid", scope: !266, file: !245, line: 83, baseType: !5, size: 32)
!269 = !DIDerivedType(tag: DW_TAG_member, name: "si_overrun", scope: !266, file: !245, line: 84, baseType: !5, size: 32, offset: 32)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !266, file: !245, line: 85, baseType: !271, size: 64, offset: 64)
!271 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigval_t", file: !245, line: 36, baseType: !272)
!272 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !245, line: 32, size: 64, elements: !273)
!273 = !{!274, !275}
!274 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !272, file: !245, line: 34, baseType: !5, size: 32)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !272, file: !245, line: 35, baseType: !47, size: 64)
!276 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !252, file: !245, line: 94, baseType: !277, size: 128)
!277 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 89, size: 128, elements: !278)
!278 = !{!279, !280, !281}
!279 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !277, file: !245, line: 91, baseType: !262, size: 32)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !277, file: !245, line: 92, baseType: !264, size: 32, offset: 32)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !277, file: !245, line: 93, baseType: !271, size: 64, offset: 64)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !252, file: !245, line: 104, baseType: !283, size: 256)
!283 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 97, size: 256, elements: !284)
!284 = !{!285, !286, !287, !288, !291}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !283, file: !245, line: 99, baseType: !262, size: 32)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !283, file: !245, line: 100, baseType: !264, size: 32, offset: 32)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "si_status", scope: !283, file: !245, line: 101, baseType: !5, size: 32, offset: 64)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "si_utime", scope: !283, file: !245, line: 102, baseType: !289, size: 64, offset: 128)
!289 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigchld_clock_t", file: !245, line: 58, baseType: !290)
!290 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clock_t", file: !31, line: 135, baseType: !32)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "si_stime", scope: !283, file: !245, line: 103, baseType: !289, size: 64, offset: 192)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !252, file: !245, line: 116, baseType: !293, size: 256)
!293 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 107, size: 256, elements: !294)
!294 = !{!295, !296, !298}
!295 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr", scope: !293, file: !245, line: 109, baseType: !47, size: 64)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr_lsb", scope: !293, file: !245, line: 110, baseType: !297, size: 16, offset: 64)
!297 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr_bnd", scope: !293, file: !245, line: 115, baseType: !299, size: 128, offset: 128)
!299 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !293, file: !245, line: 111, size: 128, elements: !300)
!300 = !{!301, !302}
!301 = !DIDerivedType(tag: DW_TAG_member, name: "_lower", scope: !299, file: !245, line: 113, baseType: !47, size: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "_upper", scope: !299, file: !245, line: 114, baseType: !47, size: 64, offset: 64)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !252, file: !245, line: 123, baseType: !304, size: 128)
!304 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 119, size: 128, elements: !305)
!305 = !{!306, !307}
!306 = !DIDerivedType(tag: DW_TAG_member, name: "si_band", scope: !304, file: !245, line: 121, baseType: !32, size: 64)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "si_fd", scope: !304, file: !245, line: 122, baseType: !5, size: 32, offset: 64)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !252, file: !245, line: 131, baseType: !309, size: 128)
!309 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !252, file: !245, line: 126, size: 128, elements: !310)
!310 = !{!311, !312, !313}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !309, file: !245, line: 128, baseType: !47, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !309, file: !245, line: 129, baseType: !5, size: 32, offset: 64)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !309, file: !245, line: 130, baseType: !66, size: 32, offset: 96)
!314 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 248, elements: !315)
!315 = !{!316}
!316 = !DISubrange(count: 31)
!317 = !DICompositeType(tag: DW_TAG_array_type, baseType: !318, size: 7936, elements: !315)
!318 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !319)
!319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !320, line: 104, size: 256, elements: !321)
!320 = !DIFile(filename: "/usr/include/getopt.h", directory: "")
!321 = !{!322, !323, !324, !326}
!322 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !319, file: !320, line: 106, baseType: !90, size: 64)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !319, file: !320, line: 109, baseType: !5, size: 32, offset: 64)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !319, file: !320, line: 110, baseType: !325, size: 64, offset: 128)
!325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !319, file: !320, line: 111, baseType: !5, size: 32, offset: 192)
!327 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 200, elements: !328)
!328 = !{!329}
!329 = !DISubrange(count: 25)
!330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 16, elements: !331)
!331 = !{!332}
!332 = !DISubrange(count: 2)
!333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 88, elements: !224)
!334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 184, elements: !335)
!335 = !{!336}
!336 = !DISubrange(count: 23)
!337 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 240, elements: !338)
!338 = !{!339}
!339 = !DISubrange(count: 30)
!340 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 48, elements: !341)
!341 = !{!342}
!342 = !DISubrange(count: 6)
!343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 56, elements: !344)
!344 = !{!345}
!345 = !DISubrange(count: 7)
!346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !347, size: 448, elements: !344)
!347 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !90)
!348 = !DIDerivedType(tag: DW_TAG_typedef, name: "argmatch_exit_fn", file: !349, line: 61, baseType: !234)
!349 = !DIFile(filename: "./lib/argmatch.h", directory: "/home/mohamad/clone/coreutils")
!350 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 24, elements: !351)
!351 = !{!352}
!352 = !DISubrange(count: 3)
!353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !354)
!354 = !{!355}
!355 = !DISubrange(count: 8)
!356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !347, size: 256, elements: !357)
!357 = !{!358}
!358 = !DISubrange(count: 4)
!359 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 24, elements: !351)
!360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 296, elements: !361)
!361 = !{!362}
!362 = !DISubrange(count: 37)
!363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 168, elements: !364)
!364 = !{!365}
!365 = !DISubrange(count: 21)
!366 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !367)
!367 = !{!368}
!368 = !DISubrange(count: 32)
!369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 272, elements: !370)
!370 = !{!371}
!371 = !DISubrange(count: 34)
!372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 184, elements: !335)
!373 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 144, elements: !374)
!374 = !{!375}
!375 = !DISubrange(count: 18)
!376 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 112, elements: !377)
!377 = !{!378}
!378 = !DISubrange(count: 14)
!379 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 104, elements: !380)
!380 = !{!381}
!381 = !DISubrange(count: 13)
!382 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 96, elements: !383)
!383 = !{!384}
!384 = !DISubrange(count: 12)
!385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !357)
!386 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 416, elements: !387)
!387 = !{!388}
!388 = !DISubrange(count: 52)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64)
!390 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1)
!391 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!392 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 248, elements: !315)
!393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 304, elements: !394)
!394 = !{!395}
!395 = !DISubrange(count: 38)
!396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 376, elements: !397)
!397 = !{!398}
!398 = !DISubrange(count: 47)
!399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 424, elements: !400)
!400 = !{!401}
!401 = !DISubrange(count: 53)
!402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !403, size: 64)
!403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sortfile", file: !63, line: 667, size: 128, elements: !404)
!404 = !{!405, !406}
!405 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !403, file: !63, line: 670, baseType: !90, size: 64)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !403, file: !63, line: 673, baseType: !407, size: 64, offset: 64)
!407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !408, size: 64)
!408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tempnode", file: !63, line: 656, size: 128, elements: !409)
!409 = !{!410, !412, !415, !416}
!410 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !408, file: !63, line: 658, baseType: !411, size: 64)
!411 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !407)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !408, file: !63, line: 659, baseType: !413, size: 32, offset: 64)
!413 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !414, line: 37, baseType: !262)
!414 = !DIFile(filename: "/usr/include/sched.h", directory: "")
!415 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !408, file: !63, line: 660, baseType: !8, size: 8, offset: 96)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !408, file: !63, line: 661, baseType: !417, offset: 104)
!417 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, elements: !418)
!418 = !{!419}
!419 = !DISubrange(count: -1)
!420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 448, elements: !421)
!421 = !{!422}
!422 = !DISubrange(count: 56)
!423 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 600, elements: !424)
!424 = !{!425}
!425 = !DISubrange(count: 75)
!426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !427, size: 896, elements: !344)
!427 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !428)
!428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !430, file: !429, line: 633, size: 128, elements: !434)
!429 = !DIFile(filename: "src/system.h", directory: "/home/mohamad/clone/coreutils")
!430 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !429, file: !429, line: 631, type: !431, scopeLine: 632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!431 = !DISubroutineType(types: !432)
!432 = !{null, !90}
!433 = !{}
!434 = !{!435, !436}
!435 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !428, file: !429, line: 633, baseType: !90, size: 64)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !428, file: !429, line: 633, baseType: !90, size: 64, offset: 64)
!437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !427, size: 64)
!438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 320, elements: !439)
!439 = !{!440}
!440 = !DISubrange(count: 40)
!441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 216, elements: !442)
!442 = !{!443}
!443 = !DISubrange(count: 27)
!444 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 408, elements: !445)
!445 = !{!446}
!446 = !DISubrange(count: 51)
!447 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !5)
!448 = !DICompositeType(tag: DW_TAG_array_type, baseType: !162, size: 2048, elements: !449)
!449 = !{!450}
!450 = !DISubrange(count: 256)
!451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !452, size: 64)
!452 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !34)
!453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !449)
!454 = !DICompositeType(tag: DW_TAG_array_type, baseType: !455, size: 1536, elements: !383)
!455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "month", file: !63, line: 224, size: 128, elements: !456)
!456 = !{!457, !458}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !455, file: !63, line: 226, baseType: !90, size: 64)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !455, file: !63, line: 227, baseType: !5, size: 32, offset: 64)
!459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !460, size: 64)
!460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !455)
!461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !462, size: 64)
!462 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !408)
!463 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !417)
!464 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !465, line: 135, baseType: !54)
!465 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 264, elements: !467)
!467 = !{!468}
!468 = !DISubrange(count: 33)
!469 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 280, elements: !470)
!470 = !{!471}
!471 = !DISubrange(count: 35)
!472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!473 = !DIDerivedType(tag: DW_TAG_typedef, name: "rlim_t", file: !474, line: 131, baseType: !475)
!474 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/resource.h", directory: "")
!475 = !DIDerivedType(tag: DW_TAG_typedef, name: "__rlim_t", file: !31, line: 136, baseType: !54)
!476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 224, elements: !256)
!477 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 384, elements: !478)
!478 = !{!479}
!479 = !DISubrange(count: 48)
!480 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64)
!482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !483, size: 64)
!483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !484, line: 46, size: 1152, elements: !485)
!484 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!485 = !{!486, !488, !490, !492, !494, !495, !497, !498, !499, !500, !502, !504, !512, !513, !514}
!486 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !483, file: !484, line: 48, baseType: !487, size: 64)
!487 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !31, line: 124, baseType: !54)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !483, file: !484, line: 53, baseType: !489, size: 64, offset: 64)
!489 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !31, line: 127, baseType: !54)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !483, file: !484, line: 61, baseType: !491, size: 64, offset: 128)
!491 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !31, line: 130, baseType: !54)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !483, file: !484, line: 62, baseType: !493, size: 32, offset: 192)
!493 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !31, line: 129, baseType: !66)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !483, file: !484, line: 64, baseType: !264, size: 32, offset: 224)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !483, file: !484, line: 65, baseType: !496, size: 32, offset: 256)
!496 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !31, line: 126, baseType: !66)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !483, file: !484, line: 67, baseType: !5, size: 32, offset: 288)
!498 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !483, file: !484, line: 69, baseType: !487, size: 64, offset: 320)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !483, file: !484, line: 74, baseType: !30, size: 64, offset: 384)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !483, file: !484, line: 78, baseType: !501, size: 64, offset: 448)
!501 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !31, line: 153, baseType: !32)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !483, file: !484, line: 80, baseType: !503, size: 64, offset: 512)
!503 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !31, line: 158, baseType: !32)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !483, file: !484, line: 91, baseType: !505, size: 128, offset: 576)
!505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !506, line: 120, size: 128, elements: !507)
!506 = !DIFile(filename: "/usr/include/time.h", directory: "")
!507 = !{!508, !510}
!508 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !505, file: !506, line: 122, baseType: !509, size: 64)
!509 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !31, line: 139, baseType: !32)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !505, file: !506, line: 123, baseType: !511, size: 64, offset: 64)
!511 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !31, line: 175, baseType: !32)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !483, file: !484, line: 92, baseType: !505, size: 128, offset: 704)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !483, file: !484, line: 93, baseType: !505, size: 128, offset: 832)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !483, file: !484, line: 106, baseType: !515, size: 192, offset: 960)
!515 = !DICompositeType(tag: DW_TAG_array_type, baseType: !511, size: 192, elements: !351)
!516 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 328, elements: !517)
!517 = !{!518}
!518 = !DISubrange(count: 41)
!519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 368, elements: !520)
!520 = !{!521}
!521 = !DISubrange(count: 46)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !523, size: 64)
!523 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !153)
!524 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 368, elements: !520)
!525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 344, elements: !526)
!526 = !{!527}
!527 = !DISubrange(count: 43)
!528 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 576, elements: !529)
!529 = !{!530}
!530 = !DISubrange(count: 72)
!531 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 208, elements: !532)
!532 = !{!533}
!533 = !DISubrange(count: 26)
!534 = !DICompositeType(tag: DW_TAG_array_type, baseType: !535, size: 128, elements: !176)
!535 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !537, size: 64)
!537 = !DICompositeType(tag: DW_TAG_structure_type, name: "randread_source", file: !538, line: 25, flags: DIFlagFwdDecl)
!538 = !DIFile(filename: "./lib/randread.h", directory: "/home/mohamad/clone/coreutils")
!539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !540, size: 64)
!540 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !541)
!541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "line", file: !63, line: 174, size: 256, elements: !542)
!542 = !{!543, !544, !545, !546}
!543 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !541, file: !63, line: 176, baseType: !7, size: 64)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !541, file: !63, line: 177, baseType: !52, size: 64, offset: 64)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "keybeg", scope: !541, file: !63, line: 178, baseType: !7, size: 64, offset: 128)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "keylim", scope: !541, file: !63, line: 179, baseType: !7, size: 64, offset: 192)
!547 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 176, elements: !548)
!548 = !{!549}
!549 = !DISubrange(count: 22)
!550 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 120, elements: !551)
!551 = !{!552}
!552 = !DISubrange(count: 15)
!553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !541, size: 64)
!554 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32000, elements: !555)
!555 = !{!556}
!556 = !DISubrange(count: 4000)
!557 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 2048, elements: !449)
!559 = !DICompositeType(tag: DW_TAG_array_type, baseType: !560, size: 256, elements: !561)
!560 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !465, line: 51, baseType: !66)
!561 = !{!332, !358}
!562 = !DICompositeType(tag: DW_TAG_array_type, baseType: !563, size: 2496, elements: !331)
!563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "md5_ctx", file: !564, line: 69, size: 1248, elements: !565)
!564 = !DIFile(filename: "./lib/md5.h", directory: "/home/mohamad/clone/coreutils")
!565 = !{!566, !567, !568, !569, !570, !572, !573}
!566 = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !563, file: !564, line: 71, baseType: !560, size: 32)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "B", scope: !563, file: !564, line: 72, baseType: !560, size: 32, offset: 32)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !563, file: !564, line: 73, baseType: !560, size: 32, offset: 64)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "D", scope: !563, file: !564, line: 74, baseType: !560, size: 32, offset: 96)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !563, file: !564, line: 76, baseType: !571, size: 64, offset: 128)
!571 = !DICompositeType(tag: DW_TAG_array_type, baseType: !560, size: 64, elements: !331)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !563, file: !564, line: 77, baseType: !560, size: 32, offset: 192)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !563, file: !564, line: 78, baseType: !574, size: 1024, offset: 224)
!574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !560, size: 1024, elements: !367)
!575 = !DICompositeType(tag: DW_TAG_array_type, baseType: !560, size: 128, elements: !357)
!576 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 232, elements: !577)
!577 = !{!578}
!578 = !DISubrange(count: 29)
!579 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 336, elements: !580)
!580 = !{!581}
!581 = !DISubrange(count: 42)
!582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !583, size: 64)
!583 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !389, size: 64)
!585 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !331)
!586 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 352, elements: !587)
!587 = !{!588}
!588 = !DISubrange(count: 44)
!589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !590, size: 64)
!590 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_table", file: !591, line: 69, baseType: !592)
!591 = !DIFile(filename: "./lib/hash.h", directory: "/home/mohamad/clone/coreutils")
!592 = !DICompositeType(tag: DW_TAG_structure_type, name: "hash_table", file: !591, line: 67, flags: DIFlagFwdDecl)
!593 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !594, file: !63, line: 719, size: 32, elements: !597)
!594 = distinct !DISubprogram(name: "reap", scope: !63, file: !63, line: 709, type: !595, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!595 = !DISubroutineType(types: !596)
!596 = !{!413, !413}
!597 = !{!598, !599}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "__in", scope: !593, file: !63, line: 719, baseType: !5, size: 32)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "__i", scope: !593, file: !63, line: 719, baseType: !5, size: 32)
!600 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !594, file: !63, line: 719, size: 32, elements: !601)
!601 = !{!602, !603}
!602 = !DIDerivedType(tag: DW_TAG_member, name: "__in", scope: !600, file: !63, line: 719, baseType: !5, size: 32)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "__i", scope: !600, file: !63, line: 719, baseType: !5, size: 32)
!604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 72, elements: !605)
!605 = !{!606}
!606 = !DISubrange(count: 9)
!607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !608, size: 64)
!608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "buffer", file: !63, line: 183, size: 448, elements: !609)
!609 = !{!610, !611, !612, !613, !614, !615, !616}
!610 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !608, file: !63, line: 185, baseType: !7, size: 64)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !608, file: !63, line: 190, baseType: !52, size: 64, offset: 64)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "nlines", scope: !608, file: !63, line: 191, baseType: !52, size: 64, offset: 128)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !608, file: !63, line: 192, baseType: !52, size: 64, offset: 192)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !608, file: !63, line: 193, baseType: !52, size: 64, offset: 256)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "line_bytes", scope: !608, file: !63, line: 194, baseType: !52, size: 64, offset: 320)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "eof", scope: !608, file: !63, line: 195, baseType: !162, size: 8, offset: 384)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !539, size: 64)
!618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !411, size: 64)
!620 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 96, elements: !383)
!621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !622, size: 64)
!622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "merge_node", file: !63, line: 231, size: 1024, elements: !623)
!623 = !{!624, !625, !626, !627, !628, !630, !631, !632, !633, !634, !635, !636, !637}
!624 = !DIDerivedType(tag: DW_TAG_member, name: "lo", scope: !622, file: !63, line: 233, baseType: !553, size: 64)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "hi", scope: !622, file: !63, line: 234, baseType: !553, size: 64, offset: 64)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "end_lo", scope: !622, file: !63, line: 235, baseType: !553, size: 64, offset: 128)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "end_hi", scope: !622, file: !63, line: 236, baseType: !553, size: 64, offset: 192)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !622, file: !63, line: 237, baseType: !629, size: 64, offset: 256)
!629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !553, size: 64)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "nlo", scope: !622, file: !63, line: 238, baseType: !52, size: 64, offset: 320)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "nhi", scope: !622, file: !63, line: 239, baseType: !52, size: 64, offset: 384)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !622, file: !63, line: 240, baseType: !621, size: 64, offset: 448)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "lo_child", scope: !622, file: !63, line: 241, baseType: !621, size: 64, offset: 512)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "hi_child", scope: !622, file: !63, line: 242, baseType: !621, size: 64, offset: 576)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !622, file: !63, line: 243, baseType: !66, size: 32, offset: 640)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "queued", scope: !622, file: !63, line: 244, baseType: !162, size: 8, offset: 672)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !622, file: !63, line: 245, baseType: !638, size: 320, offset: 704)
!638 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_mutex_t", file: !639, line: 128, baseType: !640)
!639 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h", directory: "")
!640 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !639, line: 90, size: 320, elements: !641)
!641 = !{!642, !659, !660}
!642 = !DIDerivedType(tag: DW_TAG_member, name: "__data", scope: !640, file: !639, line: 125, baseType: !643, size: 320)
!643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__pthread_mutex_s", file: !639, line: 92, size: 320, elements: !644)
!644 = !{!645, !646, !647, !648, !649, !650, !651, !652}
!645 = !DIDerivedType(tag: DW_TAG_member, name: "__lock", scope: !643, file: !639, line: 94, baseType: !5, size: 32)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !643, file: !639, line: 95, baseType: !66, size: 32, offset: 32)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "__owner", scope: !643, file: !639, line: 96, baseType: !5, size: 32, offset: 64)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "__nusers", scope: !643, file: !639, line: 98, baseType: !66, size: 32, offset: 96)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "__kind", scope: !643, file: !639, line: 102, baseType: !5, size: 32, offset: 128)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "__spins", scope: !643, file: !639, line: 104, baseType: !297, size: 16, offset: 160)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "__elision", scope: !643, file: !639, line: 105, baseType: !297, size: 16, offset: 176)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "__list", scope: !643, file: !639, line: 106, baseType: !653, size: 128, offset: 192)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pthread_list_t", file: !639, line: 79, baseType: !654)
!654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__pthread_internal_list", file: !639, line: 75, size: 128, elements: !655)
!655 = !{!656, !658}
!656 = !DIDerivedType(tag: DW_TAG_member, name: "__prev", scope: !654, file: !639, line: 77, baseType: !657, size: 64)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "__next", scope: !654, file: !639, line: 78, baseType: !657, size: 64, offset: 64)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "__size", scope: !640, file: !639, line: 126, baseType: !438, size: 320)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "__align", scope: !640, file: !639, line: 127, baseType: !32, size: 64)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !662, line: 86, baseType: !30)
!662 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !664, size: 64)
!664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !389)
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !666, size: 64)
!666 = !DICompositeType(tag: DW_TAG_structure_type, name: "heap", file: !667, line: 23, flags: DIFlagFwdDecl)
!667 = !DIFile(filename: "./lib/heap.h", directory: "/home/mohamad/clone/coreutils")
!668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !669, size: 64)
!669 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !622)
!670 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_t", file: !639, line: 60, baseType: !54)
!671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !672, size: 64)
!672 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !673)
!673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_args", file: !63, line: 3580, size: 448, elements: !674)
!674 = !{!675, !676, !677, !679, !681, !707, !708}
!675 = !DIDerivedType(tag: DW_TAG_member, name: "lines", scope: !673, file: !63, line: 3584, baseType: !553, size: 64)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "nthreads", scope: !673, file: !63, line: 3587, baseType: !52, size: 64, offset: 64)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "total_lines", scope: !673, file: !63, line: 3590, baseType: !678, size: 64, offset: 128)
!678 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !52)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !673, file: !63, line: 3594, baseType: !680, size: 64, offset: 192)
!680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !621)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "queue", scope: !673, file: !63, line: 3598, baseType: !682, size: 64, offset: 256)
!682 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !683)
!683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "merge_node_queue", file: !63, line: 249, size: 768, elements: !685)
!685 = !{!686, !687, !688}
!686 = !DIDerivedType(tag: DW_TAG_member, name: "priority_queue", scope: !684, file: !63, line: 251, baseType: !665, size: 64)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !684, file: !63, line: 252, baseType: !638, size: 320, offset: 64)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !684, file: !63, line: 253, baseType: !689, size: 384, offset: 384)
!689 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_cond_t", file: !639, line: 154, baseType: !690)
!690 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !639, line: 139, size: 384, elements: !691)
!691 = !{!692, !704, !705}
!692 = !DIDerivedType(tag: DW_TAG_member, name: "__data", scope: !690, file: !639, line: 151, baseType: !693, size: 384)
!693 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !690, file: !639, line: 141, size: 384, elements: !694)
!694 = !{!695, !696, !697, !699, !700, !701, !702, !703}
!695 = !DIDerivedType(tag: DW_TAG_member, name: "__lock", scope: !693, file: !639, line: 143, baseType: !5, size: 32)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "__futex", scope: !693, file: !639, line: 144, baseType: !66, size: 32, offset: 32)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "__total_seq", scope: !693, file: !639, line: 145, baseType: !698, size: 64, offset: 64)
!698 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "__wakeup_seq", scope: !693, file: !639, line: 146, baseType: !698, size: 64, offset: 128)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "__woken_seq", scope: !693, file: !639, line: 147, baseType: !698, size: 64, offset: 192)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "__mutex", scope: !693, file: !639, line: 148, baseType: !47, size: 64, offset: 256)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "__nwaiters", scope: !693, file: !639, line: 149, baseType: !66, size: 32, offset: 320)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "__broadcast_seq", scope: !693, file: !639, line: 150, baseType: !66, size: 32, offset: 352)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "__size", scope: !690, file: !639, line: 152, baseType: !477, size: 384)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "__align", scope: !690, file: !639, line: 153, baseType: !706, size: 64)
!706 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "tfp", scope: !673, file: !63, line: 3602, baseType: !389, size: 64, offset: 320)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "output_temp", scope: !673, file: !63, line: 3603, baseType: !90, size: 64, offset: 384)
!709 = !{!710, !715, !717, !719, !721, !60, !723, !725, !727, !729, !731, !733, !735, !737, !739, !741, !743, !745, !747, !749, !751, !753, !755, !757, !759, !761, !763, !765, !767, !769, !771, !773, !775, !777, !782, !784, !786, !788, !790, !792, !794, !796, !798, !803, !805, !810}
!710 = !DIGlobalVariableExpression(var: !711, expr: !DIExpression())
!711 = distinct !DIGlobalVariable(name: "sig", scope: !712, file: !63, line: 4252, type: !222, isLocal: true, isDefinition: true)
!712 = distinct !DISubprogram(name: "main", scope: !63, file: !63, line: 4194, type: !713, scopeLine: 4195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !62, retainedNodes: !433)
!713 = !DISubroutineType(types: !714)
!714 = !{!5, !5, !178}
!715 = !DIGlobalVariableExpression(var: !716, expr: !DIExpression())
!716 = distinct !DIGlobalVariable(name: "opts", scope: !712, file: !63, line: 4672, type: !179, isLocal: true, isDefinition: true)
!717 = !DIGlobalVariableExpression(var: !718, expr: !DIExpression())
!718 = distinct !DIGlobalVariable(name: "opts", scope: !712, file: !63, line: 4728, type: !359, isLocal: true, isDefinition: true)
!719 = !DIGlobalVariableExpression(var: !720, expr: !DIExpression())
!720 = distinct !DIGlobalVariable(name: "decimal_point", scope: !62, file: !63, line: 154, type: !5, isLocal: true, isDefinition: true)
!721 = !DIGlobalVariableExpression(var: !722, expr: !DIExpression())
!722 = distinct !DIGlobalVariable(name: "thousands_sep", scope: !62, file: !63, line: 157, type: !5, isLocal: true, isDefinition: true)
!723 = !DIGlobalVariableExpression(var: !724, expr: !DIExpression())
!724 = distinct !DIGlobalVariable(name: "hard_LC_TIME", scope: !62, file: !63, line: 162, type: !162, isLocal: true, isDefinition: true)
!725 = !DIGlobalVariableExpression(var: !726, expr: !DIExpression())
!726 = distinct !DIGlobalVariable(name: "sort_size", scope: !62, file: !63, line: 314, type: !52, isLocal: true, isDefinition: true)
!727 = !DIGlobalVariableExpression(var: !728, expr: !DIExpression())
!728 = distinct !DIGlobalVariable(name: "temp_dir_count", scope: !62, file: !63, line: 327, type: !52, isLocal: true, isDefinition: true)
!729 = !DIGlobalVariableExpression(var: !730, expr: !DIExpression())
!730 = distinct !DIGlobalVariable(name: "reverse", scope: !62, file: !63, line: 333, type: !162, isLocal: true, isDefinition: true)
!731 = !DIGlobalVariableExpression(var: !732, expr: !DIExpression())
!732 = distinct !DIGlobalVariable(name: "stable", scope: !62, file: !63, line: 338, type: !162, isLocal: true, isDefinition: true)
!733 = !DIGlobalVariableExpression(var: !734, expr: !DIExpression())
!734 = distinct !DIGlobalVariable(name: "unique", scope: !62, file: !63, line: 350, type: !162, isLocal: true, isDefinition: true)
!735 = !DIGlobalVariableExpression(var: !736, expr: !DIExpression())
!736 = distinct !DIGlobalVariable(name: "have_read_stdin", scope: !62, file: !63, line: 353, type: !162, isLocal: true, isDefinition: true)
!737 = !DIGlobalVariableExpression(var: !738, expr: !DIExpression())
!738 = distinct !DIGlobalVariable(name: "keylist", scope: !62, file: !63, line: 356, type: !152, isLocal: true, isDefinition: true)
!739 = !DIGlobalVariableExpression(var: !740, expr: !DIExpression())
!740 = distinct !DIGlobalVariable(name: "compress_program", scope: !62, file: !63, line: 359, type: !90, isLocal: true, isDefinition: true)
!741 = !DIGlobalVariableExpression(var: !742, expr: !DIExpression())
!742 = distinct !DIGlobalVariable(name: "debug", scope: !62, file: !63, line: 362, type: !162, isLocal: true, isDefinition: true)
!743 = !DIGlobalVariableExpression(var: !744, expr: !DIExpression())
!744 = distinct !DIGlobalVariable(name: "caught_signals", scope: !62, file: !63, line: 622, type: !214, isLocal: true, isDefinition: true)
!745 = !DIGlobalVariableExpression(var: !746, expr: !DIExpression())
!746 = distinct !DIGlobalVariable(name: "blanks", scope: !62, file: !63, line: 267, type: !448, isLocal: true, isDefinition: true)
!747 = !DIGlobalVariableExpression(var: !748, expr: !DIExpression())
!748 = distinct !DIGlobalVariable(name: "nonprinting", scope: !62, file: !63, line: 270, type: !448, isLocal: true, isDefinition: true)
!749 = !DIGlobalVariableExpression(var: !750, expr: !DIExpression())
!750 = distinct !DIGlobalVariable(name: "nondictionary", scope: !62, file: !63, line: 273, type: !448, isLocal: true, isDefinition: true)
!751 = !DIGlobalVariableExpression(var: !752, expr: !DIExpression())
!752 = distinct !DIGlobalVariable(name: "fold_toupper", scope: !62, file: !63, line: 276, type: !453, isLocal: true, isDefinition: true)
!753 = !DIGlobalVariableExpression(var: !754, expr: !DIExpression())
!754 = distinct !DIGlobalVariable(name: "monthtab", scope: !62, file: !63, line: 282, type: !454, isLocal: true, isDefinition: true)
!755 = !DIGlobalVariableExpression(var: !756, expr: !DIExpression())
!756 = distinct !DIGlobalVariable(name: "temphead", scope: !62, file: !63, line: 663, type: !411, isLocal: true, isDefinition: true)
!757 = !DIGlobalVariableExpression(var: !758, expr: !DIExpression())
!758 = distinct !DIGlobalVariable(name: "short_options", scope: !62, file: !63, line: 545, type: !314, isLocal: true, isDefinition: true)
!759 = !DIGlobalVariableExpression(var: !760, expr: !DIExpression())
!760 = distinct !DIGlobalVariable(name: "long_options", scope: !62, file: !63, line: 547, type: !317, isLocal: true, isDefinition: true)
!761 = !DIGlobalVariableExpression(var: !762, expr: !DIExpression())
!762 = distinct !DIGlobalVariable(name: "sort_types", scope: !62, file: !63, line: 614, type: !340, isLocal: true, isDefinition: true)
!763 = !DIGlobalVariableExpression(var: !764, expr: !DIExpression())
!764 = distinct !DIGlobalVariable(name: "sort_args", scope: !62, file: !63, line: 608, type: !346, isLocal: true, isDefinition: true)
!765 = !DIGlobalVariableExpression(var: !766, expr: !DIExpression())
!766 = distinct !DIGlobalVariable(name: "check_types", scope: !62, file: !63, line: 593, type: !350, isLocal: true, isDefinition: true)
!767 = !DIGlobalVariableExpression(var: !768, expr: !DIExpression())
!768 = distinct !DIGlobalVariable(name: "check_args", scope: !62, file: !63, line: 587, type: !356, isLocal: true, isDefinition: true)
!769 = !DIGlobalVariableExpression(var: !770, expr: !DIExpression())
!770 = distinct !DIGlobalVariable(name: "tab", scope: !62, file: !63, line: 346, type: !5, isLocal: true, isDefinition: true)
!771 = !DIGlobalVariableExpression(var: !772, expr: !DIExpression())
!772 = distinct !DIGlobalVariable(name: "temp_dir_alloc", scope: !62, file: !63, line: 330, type: !52, isLocal: true, isDefinition: true)
!773 = !DIGlobalVariableExpression(var: !774, expr: !DIExpression())
!774 = distinct !DIGlobalVariable(name: "temp_dirs", scope: !62, file: !63, line: 324, type: !481, isLocal: true, isDefinition: true)
!775 = !DIGlobalVariableExpression(var: !776, expr: !DIExpression())
!776 = distinct !DIGlobalVariable(name: "eolchar", scope: !62, file: !63, line: 171, type: !8, isLocal: true, isDefinition: true)
!777 = !DIGlobalVariableExpression(var: !778, expr: !DIExpression())
!778 = distinct !DIGlobalVariable(name: "outstat_errno", scope: !779, file: !63, line: 890, type: !5, isLocal: true, isDefinition: true)
!779 = distinct !DISubprogram(name: "get_outstatus", scope: !63, file: !63, line: 888, type: !780, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!780 = !DISubroutineType(types: !781)
!781 = !{!482}
!782 = !DIGlobalVariableExpression(var: !783, expr: !DIExpression())
!783 = distinct !DIGlobalVariable(name: "outstat", scope: !779, file: !63, line: 891, type: !483, isLocal: true, isDefinition: true)
!784 = !DIGlobalVariableExpression(var: !785, expr: !DIExpression())
!785 = distinct !DIGlobalVariable(name: "random_md5_state", scope: !62, file: !63, line: 2089, type: !563, isLocal: true, isDefinition: true)
!786 = !DIGlobalVariableExpression(var: !787, expr: !DIExpression())
!787 = distinct !DIGlobalVariable(name: "nmerge", scope: !62, file: !63, line: 366, type: !66, isLocal: true, isDefinition: true)
!788 = !DIGlobalVariableExpression(var: !789, expr: !DIExpression())
!789 = distinct !DIGlobalVariable(name: "merge_buffer_size", scope: !62, file: !63, line: 310, type: !52, isLocal: true, isDefinition: true)
!790 = !DIGlobalVariableExpression(var: !791, expr: !DIExpression())
!791 = distinct !DIGlobalVariable(name: "unit_order", scope: !62, file: !63, line: 1873, type: !558, isLocal: true, isDefinition: true)
!792 = !DIGlobalVariableExpression(var: !793, expr: !DIExpression())
!793 = distinct !DIGlobalVariable(name: "proctab", scope: !62, file: !63, line: 677, type: !589, isLocal: true, isDefinition: true)
!794 = !DIGlobalVariableExpression(var: !795, expr: !DIExpression())
!795 = distinct !DIGlobalVariable(name: "nprocs", scope: !62, file: !63, line: 697, type: !413, isLocal: true, isDefinition: true)
!796 = !DIGlobalVariableExpression(var: !797, expr: !DIExpression())
!797 = distinct !DIGlobalVariable(name: "temptail", scope: !62, file: !63, line: 664, type: !619, isLocal: true, isDefinition: true)
!798 = !DIGlobalVariableExpression(var: !799, expr: !DIExpression())
!799 = distinct !DIGlobalVariable(name: "slashbase", scope: !800, file: !63, line: 843, type: !620, isLocal: true, isDefinition: true)
!800 = distinct !DISubprogram(name: "create_temp_file", scope: !63, file: !63, line: 841, type: !801, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!801 = !DISubroutineType(types: !802)
!802 = !{!407, !325, !162}
!803 = !DIGlobalVariableExpression(var: !804, expr: !DIExpression())
!804 = distinct !DIGlobalVariable(name: "temp_dir_index", scope: !800, file: !63, line: 844, type: !52, isLocal: true, isDefinition: true)
!805 = !DIGlobalVariableExpression(var: !806, expr: !DIExpression())
!806 = distinct !DIGlobalVariable(name: "size_bound", scope: !807, file: !63, line: 1519, type: !52, isLocal: true, isDefinition: true)
!807 = distinct !DISubprogram(name: "sort_buffer_size", scope: !63, file: !63, line: 1513, type: !808, scopeLine: 1516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!808 = !DISubroutineType(types: !809)
!809 = !{!52, !663, !52, !582, !52, !52}
!810 = !DIGlobalVariableExpression(var: !811, expr: !DIExpression())
!811 = distinct !DIGlobalVariable(name: "saved_line", scope: !62, file: !63, line: 258, type: !541, isLocal: true, isDefinition: true)
!812 = !DIGlobalVariableExpression(var: !813, expr: !DIExpression())
!813 = distinct !DIGlobalVariable(name: "Version", scope: !814, file: !815, line: 2, type: !90, isLocal: false, isDefinition: true)
!814 = distinct !DICompileUnit(language: DW_LANG_C99, file: !815, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !816, globals: !817, nameTableKind: None)
!815 = !DIFile(filename: "src/version.c", directory: "/home/mohamad/clone/coreutils")
!816 = !{!90}
!817 = !{!812}
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "argmatch_die", scope: !820, file: !864, line: 67, type: !348, isLocal: false, isDefinition: true)
!820 = distinct !DICompileUnit(language: DW_LANG_C99, file: !821, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !822, globals: !863, nameTableKind: None)
!821 = !DIFile(filename: "./lib/argmatch.c", directory: "/home/mohamad/clone/coreutils")
!822 = !{!47, !90, !348, !52, !823, !162, !824, !91, !441, !576, !363, !825, !353, !134}
!823 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !53, line: 35, baseType: !32)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !347, size: 64)
!825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !826, size: 64)
!826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !827)
!827 = !{!828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !826, file: !2, line: 242, baseType: !5, size: 32)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !826, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !826, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !826, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !826, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !826, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !826, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !826, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !826, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !826, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !826, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !826, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !826, file: !2, line: 260, baseType: !841, size: 64, offset: 768)
!841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !842, size: 64)
!842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !843)
!843 = !{!844, !845, !846}
!844 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !842, file: !2, line: 157, baseType: !841, size: 64)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !842, file: !2, line: 158, baseType: !825, size: 64, offset: 64)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !842, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !826, file: !2, line: 262, baseType: !825, size: 64, offset: 832)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !826, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !826, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !826, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !826, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !826, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !826, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !826, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !826, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !826, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !826, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !826, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !826, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !826, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !826, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !826, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!863 = !{!818}
!864 = !DIFile(filename: "lib/argmatch.c", directory: "/home/mohamad/clone/coreutils")
!865 = !DIGlobalVariableExpression(var: !866, expr: !DIExpression())
!866 = distinct !DIGlobalVariable(name: "file_name", scope: !867, file: !911, line: 46, type: !90, isLocal: true, isDefinition: true)
!867 = distinct !DICompileUnit(language: DW_LANG_C99, file: !868, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !869, globals: !908, nameTableKind: None)
!868 = !DIFile(filename: "./lib/closeout.c", directory: "/home/mohamad/clone/coreutils")
!869 = !{!90, !162, !870, !5, !382, !343, !359, !447}
!870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !871, size: 64)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !872)
!872 = !{!873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !871, file: !2, line: 242, baseType: !5, size: 32)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !871, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !871, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !871, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !871, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !871, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !871, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !871, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !871, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !871, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !871, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !871, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !871, file: !2, line: 260, baseType: !886, size: 64, offset: 768)
!886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !887, size: 64)
!887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !888)
!888 = !{!889, !890, !891}
!889 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !887, file: !2, line: 157, baseType: !886, size: 64)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !887, file: !2, line: 158, baseType: !870, size: 64, offset: 64)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !887, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !871, file: !2, line: 262, baseType: !870, size: 64, offset: 832)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !871, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !871, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !871, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !871, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !871, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !871, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !871, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !871, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !871, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !871, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !871, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !871, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !871, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !871, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !871, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!908 = !{!865, !909}
!909 = !DIGlobalVariableExpression(var: !910, expr: !DIExpression())
!910 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !867, file: !911, line: 56, type: !162, isLocal: true, isDefinition: true)
!911 = !DIFile(filename: "lib/closeout.c", directory: "/home/mohamad/clone/coreutils")
!912 = !DIGlobalVariableExpression(var: !913, expr: !DIExpression())
!913 = distinct !DIGlobalVariable(name: "fillbuf", scope: !914, file: !925, line: 70, type: !918, isLocal: true, isDefinition: true)
!914 = distinct !DICompileUnit(language: DW_LANG_C99, file: !915, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !916, globals: !924, nameTableKind: None)
!915 = !DIFile(filename: "./lib/md5.c", directory: "/home/mohamad/clone/coreutils")
!916 = !{!7, !90, !917, !560, !571, !8, !52, !574, !918, !385, !91, !920, !921, !922, !923}
!917 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !465, line: 122, baseType: !54)
!918 = !DICompositeType(tag: DW_TAG_array_type, baseType: !919, size: 512, elements: !138)
!919 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !535)
!920 = !DICompositeType(tag: DW_TAG_array_type, baseType: !560, size: 512, elements: !176)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !560)
!923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !560, size: 64)
!924 = !{!912}
!925 = !DIFile(filename: "lib/md5.c", directory: "/home/mohamad/clone/coreutils")
!926 = !DIGlobalVariableExpression(var: !927, expr: !DIExpression())
!927 = distinct !DIGlobalVariable(name: "exit_failure", scope: !928, file: !932, line: 24, type: !447, isLocal: false, isDefinition: true)
!928 = distinct !DICompileUnit(language: DW_LANG_C99, file: !929, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !930, globals: !931, nameTableKind: None)
!929 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/mohamad/clone/coreutils")
!930 = !{!447}
!931 = !{!926}
!932 = !DIFile(filename: "lib/exitfail.c", directory: "/home/mohamad/clone/coreutils")
!933 = !DIGlobalVariableExpression(var: !934, expr: !DIExpression())
!934 = distinct !DIGlobalVariable(name: "default_tuning", scope: !935, file: !941, line: 130, type: !957, isLocal: true, isDefinition: true)
!935 = distinct !DICompileUnit(language: DW_LANG_C99, file: !936, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !937, globals: !985, nameTableKind: None)
!936 = !DIFile(filename: "./lib/hash.c", directory: "/home/mohamad/clone/coreutils")
!937 = !{!54, !47, !52, !938, !950, !944, !182, !466, !973, !983, !535, !91, !957, !984, !939, !956, !968, !978, !85, !962, !162, !5}
!938 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !939)
!939 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_table", file: !591, line: 69, baseType: !940)
!940 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_table", file: !941, line: 52, size: 640, elements: !942)
!941 = !DIFile(filename: "lib/hash.c", directory: "/home/mohamad/clone/coreutils")
!942 = !{!943, !949, !952, !953, !954, !955, !967, !972, !977, !982}
!943 = !DIDerivedType(tag: DW_TAG_member, name: "bucket", scope: !940, file: !941, line: 57, baseType: !944, size: 64)
!944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64)
!945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_entry", file: !941, line: 46, size: 128, elements: !946)
!946 = !{!947, !948}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !945, file: !941, line: 48, baseType: !47, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !945, file: !941, line: 49, baseType: !944, size: 64, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "bucket_limit", scope: !940, file: !941, line: 58, baseType: !950, size: 64, offset: 64)
!950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !951, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !945)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "n_buckets", scope: !940, file: !941, line: 59, baseType: !52, size: 64, offset: 128)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "n_buckets_used", scope: !940, file: !941, line: 60, baseType: !52, size: 64, offset: 192)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "n_entries", scope: !940, file: !941, line: 61, baseType: !52, size: 64, offset: 256)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "tuning", scope: !940, file: !941, line: 64, baseType: !956, size: 64, offset: 320)
!956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !957, size: 64)
!957 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !958)
!958 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_tuning", file: !591, line: 65, baseType: !959)
!959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hash_tuning", file: !591, line: 53, size: 160, elements: !960)
!960 = !{!961, !963, !964, !965, !966}
!961 = !DIDerivedType(tag: DW_TAG_member, name: "shrink_threshold", scope: !959, file: !591, line: 58, baseType: !962, size: 32)
!962 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "shrink_factor", scope: !959, file: !591, line: 59, baseType: !962, size: 32, offset: 32)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "growth_threshold", scope: !959, file: !591, line: 60, baseType: !962, size: 32, offset: 64)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "growth_factor", scope: !959, file: !591, line: 61, baseType: !962, size: 32, offset: 96)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "is_n_buckets", scope: !959, file: !591, line: 62, baseType: !162, size: 8, offset: 128)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "hasher", scope: !940, file: !941, line: 71, baseType: !968, size: 64, offset: 384)
!968 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_hasher", file: !591, line: 48, baseType: !969)
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !970, size: 64)
!970 = !DISubroutineType(types: !971)
!971 = !{!52, !85, !52}
!972 = !DIDerivedType(tag: DW_TAG_member, name: "comparator", scope: !940, file: !941, line: 72, baseType: !973, size: 64, offset: 448)
!973 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_comparator", file: !591, line: 49, baseType: !974)
!974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !975, size: 64)
!975 = !DISubroutineType(types: !976)
!976 = !{!162, !85, !85}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "data_freer", scope: !940, file: !941, line: 73, baseType: !978, size: 64, offset: 512)
!978 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_data_freer", file: !591, line: 50, baseType: !979)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = !DISubroutineType(types: !981)
!981 = !{null, !47}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "free_entry_list", scope: !940, file: !941, line: 76, baseType: !944, size: 64, offset: 576)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !939, size: 64)
!985 = !{!933}
!986 = !DIGlobalVariableExpression(var: !987, expr: !DIExpression())
!987 = distinct !DIGlobalVariable(name: "have_pipe2_really", scope: !988, file: !989, line: 55, type: !5, isLocal: true, isDefinition: true)
!988 = distinct !DISubprogram(name: "rpl_pipe2", scope: !989, file: !989, line: 40, type: !990, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !992, retainedNodes: !433)
!989 = !DIFile(filename: "lib/pipe2.c", directory: "/home/mohamad/clone/coreutils")
!990 = !DISubroutineType(types: !991)
!991 = !{!5, !325, !5}
!992 = distinct !DICompileUnit(language: DW_LANG_C99, file: !993, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !994, globals: !995, nameTableKind: None)
!993 = !DIFile(filename: "./lib/pipe2.c", directory: "/home/mohamad/clone/coreutils")
!994 = !{!585, !5}
!995 = !{!986}
!996 = !DIGlobalVariableExpression(var: !997, expr: !DIExpression())
!997 = distinct !DIGlobalVariable(name: "program_name", scope: !998, file: !1040, line: 33, type: !90, isLocal: false, isDefinition: true)
!998 = distinct !DICompileUnit(language: DW_LANG_C99, file: !999, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1000, globals: !1039, nameTableKind: None)
!999 = !DIFile(filename: "./lib/progname.c", directory: "/home/mohamad/clone/coreutils")
!1000 = !{!47, !7, !90, !420, !1001, !91, !353, !385}
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1003)
!1003 = !{!1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1002, file: !2, line: 242, baseType: !5, size: 32)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1002, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1002, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1002, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1002, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1002, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1002, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1002, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1002, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1002, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1002, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1002, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1002, file: !2, line: 260, baseType: !1017, size: 64, offset: 768)
!1017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1018, size: 64)
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1019)
!1019 = !{!1020, !1021, !1022}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1018, file: !2, line: 157, baseType: !1017, size: 64)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1018, file: !2, line: 158, baseType: !1001, size: 64, offset: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1018, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1002, file: !2, line: 262, baseType: !1001, size: 64, offset: 832)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1002, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1002, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1002, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1002, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1002, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1002, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1002, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1002, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1002, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1002, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1002, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1002, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1002, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1002, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1002, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1039 = !{!996}
!1040 = !DIFile(filename: "lib/progname.c", directory: "/home/mohamad/clone/coreutils")
!1041 = !DIGlobalVariableExpression(var: !1042, expr: !DIExpression())
!1042 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1043, file: !1066, line: 85, type: !1061, isLocal: false, isDefinition: true)
!1043 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1044, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1045, retainedTypes: !1060, globals: !1098, nameTableKind: None)
!1044 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/mohamad/clone/coreutils")
!1045 = !{!1046}
!1046 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !1047, line: 32, baseType: !66, size: 32, elements: !1048)
!1047 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/mohamad/clone/coreutils")
!1048 = !{!1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059}
!1049 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!1050 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!1051 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!1052 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!1053 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!1054 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!1055 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!1056 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!1057 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!1058 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!1059 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!1060 = !{!5, !34, !52, !1061, !1062, !1064, !535, !1074, !1071, !66, !90, !1075, !1077, !7, !1078, !453, !162, !330, !91, !451, !1083, !1094, !1095, !1097, !385, !353, !359}
!1061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !347, size: 704, elements: !224)
!1062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 320, elements: !180)
!1063 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1046)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64)
!1065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !1066, line: 65, size: 448, elements: !1067)
!1066 = !DIFile(filename: "lib/quotearg.c", directory: "/home/mohamad/clone/coreutils")
!1067 = !{!1068, !1069, !1070, !1072, !1073}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1065, file: !1066, line: 68, baseType: !1046, size: 32)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1065, file: !1066, line: 71, baseType: !5, size: 32, offset: 32)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1065, file: !1066, line: 75, baseType: !1071, size: 256, offset: 64)
!1071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !66, size: 256, elements: !354)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1065, file: !1066, line: 78, baseType: !90, size: 64, offset: 320)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1065, file: !1066, line: 81, baseType: !90, size: 64, offset: 384)
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !66, size: 64)
!1075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1076, size: 64)
!1076 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1065)
!1077 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1071)
!1078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1079, size: 64)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !1066, line: 834, size: 128, elements: !1080)
!1080 = !{!1081, !1082}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1079, file: !1066, line: 836, baseType: !52, size: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1079, file: !1066, line: 837, baseType: !7, size: 64, offset: 64)
!1083 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1084, line: 106, baseType: !1085)
!1084 = !DIFile(filename: "/usr/include/wchar.h", directory: "")
!1085 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1084, line: 94, baseType: !1086)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1084, line: 82, size: 64, elements: !1087)
!1087 = !{!1088, !1089}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1086, file: !1084, line: 84, baseType: !5, size: 32)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1086, file: !1084, line: 93, baseType: !1090, size: 32, offset: 32)
!1090 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1086, file: !1084, line: 85, size: 32, elements: !1091)
!1091 = !{!1092, !1093}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1090, file: !1084, line: 88, baseType: !66, size: 32)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1090, file: !1084, line: 92, baseType: !385, size: 32)
!1094 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !53, line: 74, baseType: !5)
!1095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1096, size: 64)
!1096 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !66)
!1097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 48, elements: !341)
!1098 = !{!1041, !1099, !1101, !1103, !1105, !1107, !1109, !1111}
!1099 = !DIGlobalVariableExpression(var: !1100, expr: !DIExpression())
!1100 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1043, file: !1066, line: 101, type: !1062, isLocal: false, isDefinition: true)
!1101 = !DIGlobalVariableExpression(var: !1102, expr: !DIExpression())
!1102 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1043, file: !1066, line: 1052, type: !1065, isLocal: false, isDefinition: true)
!1103 = !DIGlobalVariableExpression(var: !1104, expr: !DIExpression())
!1104 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1043, file: !1066, line: 116, type: !1065, isLocal: true, isDefinition: true)
!1105 = !DIGlobalVariableExpression(var: !1106, expr: !DIExpression())
!1106 = distinct !DIGlobalVariable(name: "slot0", scope: !1043, file: !1066, line: 842, type: !453, isLocal: true, isDefinition: true)
!1107 = !DIGlobalVariableExpression(var: !1108, expr: !DIExpression())
!1108 = distinct !DIGlobalVariable(name: "slotvec", scope: !1043, file: !1066, line: 845, type: !1078, isLocal: true, isDefinition: true)
!1109 = !DIGlobalVariableExpression(var: !1110, expr: !DIExpression())
!1110 = distinct !DIGlobalVariable(name: "nslots", scope: !1043, file: !1066, line: 843, type: !5, isLocal: true, isDefinition: true)
!1111 = !DIGlobalVariableExpression(var: !1112, expr: !DIExpression())
!1112 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1043, file: !1066, line: 844, type: !1079, isLocal: true, isDefinition: true)
!1113 = !DIGlobalVariableExpression(var: !1114, expr: !DIExpression())
!1114 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !1115, file: !1120, line: 26, type: !1118, isLocal: false, isDefinition: true)
!1115 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1116, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1117, globals: !1119, nameTableKind: None)
!1116 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/mohamad/clone/coreutils")
!1117 = !{!1118}
!1118 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 376, elements: !397)
!1119 = !{!1113}
!1120 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/mohamad/clone/coreutils")
!1121 = !DIGlobalVariableExpression(var: !1122, expr: !DIExpression())
!1122 = distinct !DIGlobalVariable(name: "have_dupfd_cloexec", scope: !1123, file: !1124, line: 507, type: !5, isLocal: true, isDefinition: true)
!1123 = distinct !DISubprogram(name: "rpl_fcntl_DUPFD_CLOEXEC", scope: !1124, file: !1124, line: 488, type: !1125, scopeLine: 489, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1127, retainedNodes: !433)
!1124 = !DIFile(filename: "lib/fcntl.c", directory: "/home/mohamad/clone/coreutils")
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!5, !5, !5}
!1127 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1128, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1129, globals: !1140, nameTableKind: None)
!1128 = !DIFile(filename: "./lib/fcntl.c", directory: "/home/mohamad/clone/coreutils")
!1129 = !{!1130, !5, !47}
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !1131, line: 14, baseType: !1132)
!1131 = !DIFile(filename: "llvm/build/lib/clang/9.0.0/include/stdarg.h", directory: "/home/mohamad/clone")
!1132 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !1128, line: 208, baseType: !1133)
!1133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1134, size: 192, elements: !39)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1128, line: 208, size: 192, elements: !1135)
!1135 = !{!1136, !1137, !1138, !1139}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1134, file: !1128, line: 208, baseType: !66, size: 32)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1134, file: !1128, line: 208, baseType: !66, size: 32, offset: 32)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1134, file: !1128, line: 208, baseType: !47, size: 64, offset: 64)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1134, file: !1128, line: 208, baseType: !47, size: 64, offset: 128)
!1140 = !{!1121}
!1141 = !DIGlobalVariableExpression(var: !1142, expr: !DIExpression())
!1142 = distinct !DIGlobalVariable(name: "obstack_alloc_failed_handler", scope: !1143, file: !1228, line: 351, type: !234, isLocal: false, isDefinition: true)
!1143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1144, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1145, globals: !1227, nameTableKind: None)
!1144 = !DIFile(filename: "./lib/obstack.c", directory: "/home/mohamad/clone/coreutils")
!1145 = !{!7, !47, !1146, !1169, !1152, !52, !234, !8, !417, !5, !1189, !385, !113, !447}
!1146 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1148, file: !1147, line: 189, size: 64, elements: !1180)
!1147 = !DIFile(filename: "./lib/obstack.h", directory: "/home/mohamad/clone/coreutils")
!1148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1147, line: 174, size: 704, elements: !1149)
!1149 = !{!1150, !1151, !1158, !1159, !1160, !1161, !1166, !1167, !1168, !1176, !1177, !1178, !1179}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1148, file: !1147, line: 176, baseType: !52, size: 64)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1148, file: !1147, line: 177, baseType: !1152, size: 64, offset: 64)
!1152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1153, size: 64)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1147, line: 167, size: 128, elements: !1154)
!1154 = !{!1155, !1156, !1157}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1153, file: !1147, line: 169, baseType: !7, size: 64)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1153, file: !1147, line: 170, baseType: !1152, size: 64, offset: 64)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1153, file: !1147, line: 171, baseType: !417, offset: 128)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1148, file: !1147, line: 178, baseType: !7, size: 64, offset: 128)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1148, file: !1147, line: 179, baseType: !7, size: 64, offset: 192)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1148, file: !1147, line: 180, baseType: !7, size: 64, offset: 256)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1148, file: !1147, line: 185, baseType: !1162, size: 64, offset: 320)
!1162 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1148, file: !1147, line: 181, size: 64, elements: !1163)
!1163 = !{!1164, !1165}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1162, file: !1147, line: 183, baseType: !52, size: 64)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !1162, file: !1147, line: 184, baseType: !47, size: 64)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1148, file: !1147, line: 186, baseType: !52, size: 64, offset: 384)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1148, file: !1147, line: 193, baseType: !1146, size: 64, offset: 448)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1148, file: !1147, line: 198, baseType: !1169, size: 64, offset: 512)
!1169 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1148, file: !1147, line: 194, size: 64, elements: !1170)
!1170 = !{!1171, !1172}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1169, file: !1147, line: 196, baseType: !979, size: 64)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1169, file: !1147, line: 197, baseType: !1173, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = !DISubroutineType(types: !1175)
!1175 = !{null, !47, !47}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1148, file: !1147, line: 200, baseType: !47, size: 64, offset: 576)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1148, file: !1147, line: 201, baseType: !66, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1148, file: !1147, line: 202, baseType: !66, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1148, file: !1147, line: 206, baseType: !66, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1180 = !{!1181, !1185}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1146, file: !1147, line: 191, baseType: !1182, size: 64)
!1182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1183, size: 64)
!1183 = !DISubroutineType(types: !1184)
!1184 = !{!47, !52}
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1146, file: !1147, line: 192, baseType: !1186, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1187, size: 64)
!1187 = !DISubroutineType(types: !1188)
!1188 = !{!47, !47, !52}
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1191)
!1191 = !{!1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226}
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1190, file: !2, line: 242, baseType: !5, size: 32)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1190, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1190, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1190, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1190, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1190, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1190, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1190, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1190, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1190, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1190, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1190, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1190, file: !2, line: 260, baseType: !1205, size: 64, offset: 768)
!1205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1206, size: 64)
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1207)
!1207 = !{!1208, !1209, !1210}
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1206, file: !2, line: 157, baseType: !1205, size: 64)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1206, file: !2, line: 158, baseType: !1189, size: 64, offset: 64)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1206, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1190, file: !2, line: 262, baseType: !1189, size: 64, offset: 832)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1190, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1190, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1190, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1190, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1190, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1190, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1190, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1190, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1190, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1190, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1190, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1190, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1190, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1190, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1190, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1227 = !{!1141}
!1228 = !DIFile(filename: "lib/obstack.c", directory: "/home/mohamad/clone/coreutils")
!1229 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1230, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1231, nameTableKind: None)
!1230 = !DIFile(filename: "./lib/fadvise.c", directory: "/home/mohamad/clone/coreutils")
!1231 = !{!1232}
!1232 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1233, line: 45, baseType: !66, size: 32, elements: !1234)
!1233 = !DIFile(filename: "./lib/fadvise.h", directory: "/home/mohamad/clone/coreutils")
!1234 = !{!1235, !1236, !1237, !1238, !1239, !1240}
!1235 = !DIEnumerator(name: "FADVISE_NORMAL", value: 0, isUnsigned: true)
!1236 = !DIEnumerator(name: "FADVISE_SEQUENTIAL", value: 2, isUnsigned: true)
!1237 = !DIEnumerator(name: "FADVISE_NOREUSE", value: 5, isUnsigned: true)
!1238 = !DIEnumerator(name: "FADVISE_DONTNEED", value: 4, isUnsigned: true)
!1239 = !DIEnumerator(name: "FADVISE_WILLNEED", value: 3, isUnsigned: true)
!1240 = !DIEnumerator(name: "FADVISE_RANDOM", value: 1, isUnsigned: true)
!1241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1242, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1243, nameTableKind: None)
!1242 = !DIFile(filename: "./lib/filevercmp.c", directory: "/home/mohamad/clone/coreutils")
!1243 = !{!5, !90, !52, !91, !330, !359, !162}
!1244 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1245, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1246, nameTableKind: None)
!1245 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/mohamad/clone/coreutils")
!1246 = !{!162, !90, !330, !1097}
!1247 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1248, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1249, nameTableKind: None)
!1248 = !DIFile(filename: "./lib/heap.c", directory: "/home/mohamad/clone/coreutils")
!1249 = !{!47, !1250, !983, !52, !1258}
!1250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1251, size: 64)
!1251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "heap", file: !1252, line: 33, size: 256, elements: !1253)
!1252 = !DIFile(filename: "lib/heap.c", directory: "/home/mohamad/clone/coreutils")
!1253 = !{!1254, !1255, !1256, !1257}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !1251, file: !1252, line: 35, baseType: !983, size: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1251, file: !1252, line: 36, baseType: !52, size: 64, offset: 64)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1251, file: !1252, line: 37, baseType: !52, size: 64, offset: 128)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "compare", scope: !1251, file: !1252, line: 38, baseType: !1258, size: 64, offset: 192)
!1258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1259, size: 64)
!1259 = !DISubroutineType(types: !1260)
!1260 = !{!5, !85, !85}
!1261 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1262, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1263, nameTableKind: None)
!1262 = !DIFile(filename: "./lib/inttostr.c", directory: "/home/mohamad/clone/coreutils")
!1263 = !{!5, !7, !8}
!1264 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1265, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1266, nameTableKind: None)
!1265 = !DIFile(filename: "./lib/uinttostr.c", directory: "/home/mohamad/clone/coreutils")
!1266 = !{!66, !7, !8}
!1267 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1268, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1269, nameTableKind: None)
!1268 = !DIFile(filename: "./lib/umaxtostr.c", directory: "/home/mohamad/clone/coreutils")
!1269 = !{!464, !7, !8}
!1270 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1271, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1272, nameTableKind: None)
!1271 = !DIFile(filename: "./lib/mbswidth.c", directory: "/home/mohamad/clone/coreutils")
!1272 = !{!52, !535, !5, !34, !90, !91, !1273, !1094, !451}
!1273 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1084, line: 106, baseType: !1274)
!1274 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1084, line: 94, baseType: !1275)
!1275 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1084, line: 82, size: 64, elements: !1276)
!1276 = !{!1277, !1278}
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1275, file: !1084, line: 84, baseType: !5, size: 32)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1275, file: !1084, line: 93, baseType: !1279, size: 32, offset: 32)
!1279 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1275, file: !1084, line: 85, size: 32, elements: !1280)
!1280 = !{!1281, !1282}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1279, file: !1084, line: 88, baseType: !66, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1279, file: !1084, line: 92, baseType: !385, size: 32)
!1283 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1284, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1285, retainedTypes: !1292, nameTableKind: None)
!1284 = !DIFile(filename: "./lib/nproc.c", directory: "/home/mohamad/clone/coreutils")
!1285 = !{!1286}
!1286 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nproc_query", file: !1287, line: 32, baseType: !66, size: 32, elements: !1288)
!1287 = !DIFile(filename: "./lib/nproc.h", directory: "/home/mohamad/clone/coreutils")
!1288 = !{!1289, !1290, !1291}
!1289 = !DIEnumerator(name: "NPROC_ALL", value: 0, isUnsigned: true)
!1290 = !DIEnumerator(name: "NPROC_CURRENT", value: 1, isUnsigned: true)
!1291 = !DIEnumerator(name: "NPROC_CURRENT_OVERRIDABLE", value: 2, isUnsigned: true)
!1292 = !{!47, !54, !175, !113, !91, !7, !8, !32, !1293}
!1293 = !DIDerivedType(tag: DW_TAG_typedef, name: "cpu_set_t", file: !1294, line: 128, baseType: !1295)
!1294 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sched.h", directory: "")
!1295 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1294, line: 125, size: 1024, elements: !1296)
!1296 = !{!1297}
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "__bits", scope: !1295, file: !1294, line: 127, baseType: !1298, size: 1024)
!1298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 1024, elements: !176)
!1299 = !DIDerivedType(tag: DW_TAG_typedef, name: "__cpu_mask", file: !1294, line: 118, baseType: !54)
!1300 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1301, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1302, nameTableKind: None)
!1301 = !DIFile(filename: "./lib/physmem.c", directory: "/home/mohamad/clone/coreutils")
!1302 = !{!480, !1303, !1305}
!1303 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_ulong_t", file: !1304, line: 15, baseType: !54)
!1304 = !DIFile(filename: "/usr/include/asm-generic/posix_types.h", directory: "")
!1305 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u32", file: !1306, line: 26, baseType: !66)
!1306 = !DIFile(filename: "/usr/include/asm-generic/int-ll64.h", directory: "")
!1307 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1308, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1309, nameTableKind: None)
!1308 = !DIFile(filename: "./lib/posixver.c", directory: "/home/mohamad/clone/coreutils")
!1309 = !{!32, !90, !175, !91, !7, !8}
!1310 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1311, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1312, nameTableKind: None)
!1311 = !DIFile(filename: "./lib/randread.c", directory: "/home/mohamad/clone/coreutils")
!1312 = !{!52, !1313, !1353, !359, !1367, !1379, !1359, !85, !447, !5, !175, !550, !7, !1393, !379, !8, !1395, !1396, !535, !1390, !1397, !1380}
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1314, size: 64)
!1314 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1315)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1316)
!1316 = !{!1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1315, file: !2, line: 242, baseType: !5, size: 32)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1315, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1315, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1315, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1315, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1315, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1315, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1315, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1315, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1315, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1315, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1315, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1315, file: !2, line: 260, baseType: !1330, size: 64, offset: 768)
!1330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1331, size: 64)
!1331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1332)
!1332 = !{!1333, !1334, !1336}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1331, file: !2, line: 157, baseType: !1330, size: 64)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1331, file: !2, line: 158, baseType: !1335, size: 64, offset: 64)
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1315, size: 64)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1331, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1315, file: !2, line: 262, baseType: !1335, size: 64, offset: 832)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1315, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1315, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1315, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1315, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1315, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1315, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1315, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1315, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1315, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1315, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1315, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1315, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1315, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1315, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1315, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1354, size: 64)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "randread_source", file: !1355, line: 79, size: 33216, elements: !1356)
!1355 = !DIFile(filename: "lib/randread.c", directory: "/home/mohamad/clone/coreutils")
!1356 = !{!1357, !1358, !1362, !1363}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !1354, file: !1355, line: 83, baseType: !1313, size: 64)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1354, file: !1355, line: 90, baseType: !1359, size: 64, offset: 64)
!1359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!1360 = !DISubroutineType(types: !1361)
!1361 = !{null, !85}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "handler_arg", scope: !1354, file: !1355, line: 91, baseType: !85, size: 64, offset: 128)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1354, file: !1355, line: 117, baseType: !1364, size: 33024, offset: 192)
!1364 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1354, file: !1355, line: 96, size: 33024, elements: !1365)
!1365 = !{!1366, !1370}
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !1364, file: !1355, line: 99, baseType: !1367, size: 32768)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32768, elements: !1368)
!1368 = !{!1369}
!1369 = !DISubrange(count: 4096)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "isaac", scope: !1364, file: !1355, line: 116, baseType: !1371, size: 33024)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "isaac", file: !1355, line: 102, size: 33024, elements: !1372)
!1372 = !{!1373, !1374, !1385}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "buffered", scope: !1371, file: !1355, line: 105, baseType: !52, size: 64)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1371, file: !1355, line: 108, baseType: !1375, size: 16576, offset: 64)
!1375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "isaac_state", file: !1376, line: 56, size: 16576, elements: !1377)
!1376 = !DIFile(filename: "./lib/rand-isaac.h", directory: "/home/mohamad/clone/coreutils")
!1377 = !{!1378, !1382, !1383, !1384}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "m", scope: !1375, file: !1376, line: 58, baseType: !1379, size: 16384)
!1379 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1380, size: 16384, elements: !449)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "isaac_word", file: !1376, line: 44, baseType: !1381)
!1381 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !465, line: 80, baseType: !54)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1375, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16384)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1375, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16448)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !1375, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16512)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1371, file: !1355, line: 115, baseType: !1386, size: 16384, offset: 16640)
!1386 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1371, file: !1355, line: 111, size: 16384, elements: !1387)
!1387 = !{!1388, !1389}
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1386, file: !1355, line: 113, baseType: !1379, size: 16384)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1386, file: !1355, line: 114, baseType: !1390, size: 16384)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !535, size: 16384, elements: !1391)
!1391 = !{!1392}
!1392 = !DISubrange(count: 2048)
!1393 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !662, line: 109, baseType: !1394)
!1394 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !31, line: 172, baseType: !32)
!1395 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !662, line: 98, baseType: !262)
!1396 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !662, line: 80, baseType: !264)
!1397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1398 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1399, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1400, nameTableKind: None)
!1399 = !DIFile(filename: "./lib/rand-isaac.c", directory: "/home/mohamad/clone/coreutils")
!1400 = !{!1380, !1397, !1379, !5, !85, !90, !91, !1401, !1402}
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!1402 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1380)
!1403 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1404, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1405, nameTableKind: None)
!1404 = !DIFile(filename: "./lib/readtokens0.c", directory: "/home/mohamad/clone/coreutils")
!1405 = !{!47, !7, !52, !1406, !178, !618, !1407, !1412, !5, !1441, !8, !85, !90}
!1406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1147, line: 174, size: 704, elements: !1409)
!1409 = !{!1410, !1411, !1418, !1419, !1420, !1421, !1426, !1427, !1432, !1437, !1438, !1439, !1440}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1408, file: !1147, line: 176, baseType: !52, size: 64)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1408, file: !1147, line: 177, baseType: !1412, size: 64, offset: 64)
!1412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1413, size: 64)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1147, line: 167, size: 128, elements: !1414)
!1414 = !{!1415, !1416, !1417}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1413, file: !1147, line: 169, baseType: !7, size: 64)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1413, file: !1147, line: 170, baseType: !1412, size: 64, offset: 64)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1413, file: !1147, line: 171, baseType: !417, offset: 128)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1408, file: !1147, line: 178, baseType: !7, size: 64, offset: 128)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1408, file: !1147, line: 179, baseType: !7, size: 64, offset: 192)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1408, file: !1147, line: 180, baseType: !7, size: 64, offset: 256)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1408, file: !1147, line: 185, baseType: !1422, size: 64, offset: 320)
!1422 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1408, file: !1147, line: 181, size: 64, elements: !1423)
!1423 = !{!1424, !1425}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1422, file: !1147, line: 183, baseType: !52, size: 64)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !1422, file: !1147, line: 184, baseType: !47, size: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1408, file: !1147, line: 186, baseType: !52, size: 64, offset: 384)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1408, file: !1147, line: 193, baseType: !1428, size: 64, offset: 448)
!1428 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1408, file: !1147, line: 189, size: 64, elements: !1429)
!1429 = !{!1430, !1431}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1428, file: !1147, line: 191, baseType: !1182, size: 64)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1428, file: !1147, line: 192, baseType: !1186, size: 64)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1408, file: !1147, line: 198, baseType: !1433, size: 64, offset: 512)
!1433 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1408, file: !1147, line: 194, size: 64, elements: !1434)
!1434 = !{!1435, !1436}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1433, file: !1147, line: 196, baseType: !979, size: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1433, file: !1147, line: 197, baseType: !1173, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1408, file: !1147, line: 200, baseType: !47, size: 64, offset: 576)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1408, file: !1147, line: 201, baseType: !66, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1408, file: !1147, line: 202, baseType: !66, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1408, file: !1147, line: 206, baseType: !66, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1442, size: 64)
!1442 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1408)
!1443 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1444, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1444 = !DIFile(filename: "./lib/mkstemp-safer.c", directory: "/home/mohamad/clone/coreutils")
!1445 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1446, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1447, nameTableKind: None)
!1446 = !DIFile(filename: "./lib/strnumcmp.c", directory: "/home/mohamad/clone/coreutils")
!1447 = !{!66, !535, !91, !5, !52}
!1448 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1449, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1450, nameTableKind: None)
!1449 = !DIFile(filename: "./lib/fd-safer.c", directory: "/home/mohamad/clone/coreutils")
!1450 = !{!5}
!1451 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1452, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1453, nameTableKind: None)
!1452 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/mohamad/clone/coreutils")
!1453 = !{!47, !382, !343, !1454, !385, !330, !1455, !369, !175, !824, !372, !476, !366, !1458, !438, !586, !477, !386, !1461, !52, !1464, !1465, !1475, !57, !547, !376, !87, !576}
!1454 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, elements: !418)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 1368, elements: !1456)
!1456 = !{!1457}
!1457 = !DISubrange(count: 171)
!1458 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 288, elements: !1459)
!1459 = !{!1460}
!1460 = !DISubrange(count: 36)
!1461 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 480, elements: !1462)
!1462 = !{!1463}
!1463 = !DISubrange(count: 60)
!1464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !90, size: 640, elements: !180)
!1465 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !391, line: 79, baseType: !1466)
!1466 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !1131, line: 32, baseType: !1467)
!1467 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !1452, line: 234, baseType: !1468)
!1468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1469, size: 192, elements: !39)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1452, line: 192, size: 192, elements: !1470)
!1470 = !{!1471, !1472, !1473, !1474}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1469, file: !1452, line: 192, baseType: !66, size: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1469, file: !1452, line: 192, baseType: !66, size: 32, offset: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1469, file: !1452, line: 192, baseType: !47, size: 64, offset: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1469, file: !1452, line: 192, baseType: !47, size: 64, offset: 128)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1477)
!1477 = !{!1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1476, file: !2, line: 242, baseType: !5, size: 32)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1476, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1476, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1476, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1476, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1476, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1476, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1476, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1476, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1476, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1476, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1476, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1476, file: !2, line: 260, baseType: !1491, size: 64, offset: 768)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1493)
!1493 = !{!1494, !1495, !1496}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1492, file: !2, line: 157, baseType: !1491, size: 64)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1492, file: !2, line: 158, baseType: !1475, size: 64, offset: 64)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1492, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1476, file: !2, line: 262, baseType: !1475, size: 64, offset: 832)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1476, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1476, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1476, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1476, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1476, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1476, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1476, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1476, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1476, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1476, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1476, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1476, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1476, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1476, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1476, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1513 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1514, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1515, nameTableKind: None)
!1514 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/mohamad/clone/coreutils")
!1515 = !{!52, !7, !47}
!1516 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1517, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1518, nameTableKind: None)
!1517 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/mohamad/clone/coreutils")
!1518 = !{!447, !359, !113}
!1519 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1520, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1521, nameTableKind: None)
!1520 = !DIFile(filename: "./lib/xmemcoll.c", directory: "/home/mohamad/clone/coreutils")
!1521 = !{!5, !327, !525, !447, !360}
!1522 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1523, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1450, nameTableKind: None)
!1523 = !DIFile(filename: "./lib/xnanosleep.c", directory: "/home/mohamad/clone/coreutils")
!1524 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1525, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1526, retainedTypes: !1527, nameTableKind: None)
!1525 = !DIFile(filename: "./lib/xstrtoul.c", directory: "/home/mohamad/clone/coreutils")
!1526 = !{!71}
!1527 = !{!5, !34, !7, !178, !54, !1528, !393, !175, !1529, !90, !535, !91, !451, !8}
!1528 = !DIDerivedType(tag: DW_TAG_typedef, name: "strtol_error", file: !72, line: 39, baseType: !71)
!1529 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 648, elements: !1530)
!1530 = !{!1531}
!1531 = !DISubrange(count: 81)
!1532 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1533, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1526, retainedTypes: !1534, nameTableKind: None)
!1533 = !DIFile(filename: "./lib/xstrtol-error.c", directory: "/home/mohamad/clone/coreutils")
!1534 = !{!447, !90, !359, !330, !441, !360, !576, !91, !1535}
!1535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1536, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1537)
!1537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !320, line: 104, size: 256, elements: !1538)
!1538 = !{!1539, !1540, !1541, !1542}
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1537, file: !320, line: 106, baseType: !90, size: 64)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1537, file: !320, line: 109, baseType: !5, size: 32, offset: 64)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1537, file: !320, line: 110, baseType: !325, size: 64, offset: 128)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1537, file: !320, line: 111, baseType: !5, size: 32, offset: 192)
!1543 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1544, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1526, retainedTypes: !1545, nameTableKind: None)
!1544 = !DIFile(filename: "./lib/xstrtoumax.c", directory: "/home/mohamad/clone/coreutils")
!1545 = !{!5, !34, !7, !178, !464, !1528, !393, !175, !1546, !90, !535, !91, !451, !8}
!1546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !91, size: 632, elements: !1547)
!1547 = !{!1548}
!1548 = !DISubrange(count: 79)
!1549 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1550, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1550 = !DIFile(filename: "./lib/explicit_bzero.c", directory: "/home/mohamad/clone/coreutils")
!1551 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1552, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1450, nameTableKind: None)
!1552 = !DIFile(filename: "./lib/fclose.c", directory: "/home/mohamad/clone/coreutils")
!1553 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1554, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1555, nameTableKind: None)
!1554 = !DIFile(filename: "./lib/fflush.c", directory: "/home/mohamad/clone/coreutils")
!1555 = !{!47, !1556, !5}
!1556 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1557)
!1557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1558)
!1558 = !{!1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1557, file: !2, line: 242, baseType: !5, size: 32)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1557, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1557, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1557, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1557, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1557, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1557, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1557, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1557, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1557, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1557, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1557, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1557, file: !2, line: 260, baseType: !1572, size: 64, offset: 768)
!1572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1573, size: 64)
!1573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1574)
!1574 = !{!1575, !1576, !1578}
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1573, file: !2, line: 157, baseType: !1572, size: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1573, file: !2, line: 158, baseType: !1577, size: 64, offset: 64)
!1577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1573, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1557, file: !2, line: 262, baseType: !1577, size: 64, offset: 832)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1557, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1557, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1557, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1557, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1557, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1557, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1557, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1557, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1557, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1557, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1557, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1557, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1557, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1557, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1557, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1595 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1596, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1597, nameTableKind: None)
!1596 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/mohamad/clone/coreutils")
!1597 = !{!47, !1598, !7, !1637, !5, !45}
!1598 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1599)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1600)
!1600 = !{!1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1599, file: !2, line: 242, baseType: !5, size: 32)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1599, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1599, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1599, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1599, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1599, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1599, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1599, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1599, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1599, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1599, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1599, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1599, file: !2, line: 260, baseType: !1614, size: 64, offset: 768)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1616)
!1616 = !{!1617, !1618, !1620}
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1615, file: !2, line: 157, baseType: !1614, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1615, file: !2, line: 158, baseType: !1619, size: 64, offset: 64)
!1619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1599, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1615, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1599, file: !2, line: 262, baseType: !1619, size: 64, offset: 832)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1599, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1599, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1599, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1599, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1599, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1599, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1599, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1599, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1599, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1599, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1599, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1599, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1599, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1599, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1599, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1637 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !391, line: 90, baseType: !30)
!1638 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1639, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1640, nameTableKind: None)
!1639 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/mohamad/clone/coreutils")
!1640 = !{!52, !1094, !535, !91}
!1641 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1642, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1643, nameTableKind: None)
!1642 = !DIFile(filename: "./lib/nanosleep.c", directory: "/home/mohamad/clone/coreutils")
!1643 = !{!511, !5, !1644, !1645, !509}
!1644 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1645)
!1645 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !506, line: 75, baseType: !509)
!1646 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1647, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1647 = !DIFile(filename: "./lib/nl_langinfo.c", directory: "/home/mohamad/clone/coreutils")
!1648 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1649, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1650, nameTableKind: None)
!1649 = !DIFile(filename: "./lib/bitrotate.c", directory: "/home/mohamad/clone/coreutils")
!1650 = !{!66}
!1651 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1652, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1652 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/mohamad/clone/coreutils")
!1653 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1654, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1655, nameTableKind: None)
!1654 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/mohamad/clone/coreutils")
!1655 = !{!1656, !535, !919}
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !919, size: 64)
!1657 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1658, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1659, nameTableKind: None)
!1658 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/mohamad/clone/coreutils")
!1659 = !{!161, !5}
!1660 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1661, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1662, nameTableKind: None)
!1661 = !DIFile(filename: "./lib/dtotimespec.c", directory: "/home/mohamad/clone/coreutils")
!1662 = !{!1645, !480, !32}
!1663 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1664, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1450, nameTableKind: None)
!1664 = !DIFile(filename: "./lib/fd-safer-flag.c", directory: "/home/mohamad/clone/coreutils")
!1665 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1666, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1666 = !DIFile(filename: "./lib/dup-safer-flag.c", directory: "/home/mohamad/clone/coreutils")
!1667 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1668, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1669, nameTableKind: None)
!1668 = !DIFile(filename: "./lib/fopen-safer.c", directory: "/home/mohamad/clone/coreutils")
!1669 = !{!1670, !5}
!1670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1671, size: 64)
!1671 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1672)
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !1673)
!1673 = !{!1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1672, file: !2, line: 242, baseType: !5, size: 32)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1672, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1672, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1672, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1672, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1672, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1672, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1672, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1672, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1672, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1672, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1672, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1672, file: !2, line: 260, baseType: !1687, size: 64, offset: 768)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !1689)
!1689 = !{!1690, !1691, !1693}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1688, file: !2, line: 157, baseType: !1687, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1688, file: !2, line: 158, baseType: !1692, size: 64, offset: 64)
!1692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1688, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1672, file: !2, line: 262, baseType: !1692, size: 64, offset: 832)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1672, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1672, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1672, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1672, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1672, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1672, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1672, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1672, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1672, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1672, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1672, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1672, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1672, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1672, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1672, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!1710 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1711, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1712, nameTableKind: None)
!1711 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/mohamad/clone/coreutils")
!1712 = !{!47, !90, !38, !1097}
!1713 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1714, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1715, nameTableKind: None)
!1714 = !DIFile(filename: "./lib/memcoll.c", directory: "/home/mohamad/clone/coreutils")
!1715 = !{!5, !8, !7, !52, !91}
!1716 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1717, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, retainedTypes: !1718, nameTableKind: None)
!1717 = !DIFile(filename: "./lib/timespec.c", directory: "/home/mohamad/clone/coreutils")
!1718 = !{!509, !511}
!1719 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1720, producer: "clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !433, nameTableKind: None)
!1720 = !DIFile(filename: "./lib/dup-safer.c", directory: "/home/mohamad/clone/coreutils")
!1721 = !{!"clang version 9.0.0 (https://github.com/mbarbar/tir-clang 098fdcdeef42cde3f762b81318f3acc730a55c87) (llvm/llvm-project 0399d5a9682b3cef71c653373e38890c63c4c365)"}
!1722 = !{i32 2, !"ctir", i32 1}
!1723 = !{i32 2, !"Dwarf Version", i32 4}
!1724 = !{i32 2, !"Debug Info Version", i32 3}
!1725 = !{i32 1, !"wchar_size", i32 4}
!1726 = distinct !DISubprogram(name: "usage", scope: !63, file: !63, line: 408, type: !83, scopeLine: 409, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !62, retainedNodes: !433)
!1727 = !DILocalVariable(name: "status", arg: 1, scope: !1726, file: !63, line: 408, type: !5)
!1728 = !DILocation(line: 408, column: 12, scope: !1726)
!1729 = !DILocation(line: 410, column: 7, scope: !1730)
!1730 = distinct !DILexicalBlock(scope: !1726, file: !63, line: 410, column: 7)
!1731 = !DILocation(line: 410, column: 14, scope: !1730)
!1732 = !DILocation(line: 410, column: 7, scope: !1726)
!1733 = !DILocation(line: 411, column: 5, scope: !1730)
!1734 = !DILocation(line: 411, column: 5, scope: !1735)
!1735 = distinct !DILexicalBlock(scope: !1730, file: !63, line: 411, column: 5)
!1736 = !DILocation(line: 414, column: 15, scope: !1737)
!1737 = distinct !DILexicalBlock(scope: !1730, file: !63, line: 413, column: 5)
!1738 = !DILocation(line: 418, column: 15, scope: !1737)
!1739 = !DILocation(line: 418, column: 29, scope: !1737)
!1740 = !DILocation(line: 414, column: 7, scope: !1737)
!1741 = !DILocation(line: 419, column: 7, scope: !1737)
!1742 = !DILocation(line: 423, column: 7, scope: !1737)
!1743 = !DILocation(line: 424, column: 7, scope: !1737)
!1744 = !DILocation(line: 426, column: 7, scope: !1737)
!1745 = !DILocation(line: 430, column: 7, scope: !1737)
!1746 = !DILocation(line: 436, column: 7, scope: !1737)
!1747 = !DILocation(line: 441, column: 7, scope: !1737)
!1748 = !DILocation(line: 444, column: 7, scope: !1737)
!1749 = !DILocation(line: 450, column: 7, scope: !1737)
!1750 = !DILocation(line: 458, column: 7, scope: !1737)
!1751 = !DILocation(line: 462, column: 7, scope: !1737)
!1752 = !DILocation(line: 466, column: 7, scope: !1737)
!1753 = !DILocation(line: 473, column: 7, scope: !1737)
!1754 = !DILocation(line: 480, column: 7, scope: !1737)
!1755 = !DILocation(line: 484, column: 7, scope: !1737)
!1756 = !DILocation(line: 490, column: 15, scope: !1737)
!1757 = !DILocation(line: 490, column: 7, scope: !1737)
!1758 = !DILocation(line: 499, column: 7, scope: !1737)
!1759 = !DILocation(line: 502, column: 7, scope: !1737)
!1760 = !DILocation(line: 503, column: 7, scope: !1737)
!1761 = !DILocation(line: 504, column: 7, scope: !1737)
!1762 = !DILocation(line: 517, column: 7, scope: !1737)
!1763 = !DILocation(line: 525, column: 7, scope: !1737)
!1764 = !DILocation(line: 528, column: 9, scope: !1726)
!1765 = !DILocation(line: 528, column: 3, scope: !1726)
!1766 = distinct !DISubprogram(name: "emit_stdin_note", scope: !429, file: !429, line: 578, type: !235, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!1767 = !DILocation(line: 580, column: 3, scope: !1766)
!1768 = !DILocation(line: 583, column: 1, scope: !1766)
!1769 = distinct !DISubprogram(name: "emit_mandatory_arg_note", scope: !429, file: !429, line: 585, type: !235, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!1770 = !DILocation(line: 587, column: 3, scope: !1769)
!1771 = !DILocation(line: 590, column: 1, scope: !1769)
!1772 = !DILocalVariable(name: "program", arg: 1, scope: !430, file: !429, line: 631, type: !90)
!1773 = !DILocation(line: 631, column: 34, scope: !430)
!1774 = !DILocalVariable(name: "infomap", scope: !430, file: !429, line: 633, type: !426)
!1775 = !DILocation(line: 633, column: 67, scope: !430)
!1776 = !DILocalVariable(name: "node", scope: !430, file: !429, line: 643, type: !90)
!1777 = !DILocation(line: 643, column: 15, scope: !430)
!1778 = !DILocation(line: 643, column: 22, scope: !430)
!1779 = !DILocalVariable(name: "map_prog", scope: !430, file: !429, line: 644, type: !437)
!1780 = !DILocation(line: 644, column: 25, scope: !430)
!1781 = !DILocation(line: 644, column: 36, scope: !430)
!1782 = !DILocation(line: 646, column: 3, scope: !430)
!1783 = !DILocation(line: 646, column: 10, scope: !430)
!1784 = !DILocation(line: 646, column: 20, scope: !430)
!1785 = !DILocation(line: 646, column: 28, scope: !430)
!1786 = !DILocation(line: 646, column: 33, scope: !430)
!1787 = !DILocation(line: 646, column: 31, scope: !430)
!1788 = !DILocation(line: 0, scope: !430)
!1789 = !DILocation(line: 647, column: 13, scope: !430)
!1790 = distinct !{!1790, !1782, !1789}
!1791 = !DILocation(line: 649, column: 7, scope: !1792)
!1792 = distinct !DILexicalBlock(scope: !430, file: !429, line: 649, column: 7)
!1793 = !DILocation(line: 649, column: 17, scope: !1792)
!1794 = !DILocation(line: 649, column: 7, scope: !430)
!1795 = !DILocation(line: 650, column: 12, scope: !1792)
!1796 = !DILocation(line: 650, column: 22, scope: !1792)
!1797 = !DILocation(line: 650, column: 10, scope: !1792)
!1798 = !DILocation(line: 650, column: 5, scope: !1792)
!1799 = !DILocation(line: 652, column: 11, scope: !430)
!1800 = !DILocation(line: 652, column: 3, scope: !430)
!1801 = !DILocalVariable(name: "lc_messages", scope: !430, file: !429, line: 656, type: !90)
!1802 = !DILocation(line: 656, column: 15, scope: !430)
!1803 = !DILocation(line: 656, column: 29, scope: !430)
!1804 = !DILocation(line: 657, column: 7, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !430, file: !429, line: 657, column: 7)
!1806 = !DILocation(line: 657, column: 19, scope: !1805)
!1807 = !DILocation(line: 657, column: 22, scope: !1805)
!1808 = !DILocation(line: 657, column: 7, scope: !430)
!1809 = !DILocation(line: 663, column: 7, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1805, file: !429, line: 658, column: 5)
!1811 = !DILocation(line: 665, column: 5, scope: !1810)
!1812 = !DILocation(line: 666, column: 11, scope: !430)
!1813 = !DILocation(line: 667, column: 24, scope: !430)
!1814 = !DILocation(line: 666, column: 3, scope: !430)
!1815 = !DILocation(line: 668, column: 11, scope: !430)
!1816 = !DILocation(line: 669, column: 11, scope: !430)
!1817 = !DILocation(line: 669, column: 17, scope: !430)
!1818 = !DILocation(line: 669, column: 25, scope: !430)
!1819 = !DILocation(line: 669, column: 22, scope: !430)
!1820 = !DILocation(line: 668, column: 3, scope: !430)
!1821 = !DILocation(line: 670, column: 1, scope: !430)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Tokens", file: !1823, line: 28, size: 2304, elements: !1824)
!1823 = !DIFile(filename: "./lib/readtokens0.h", directory: "/home/mohamad/clone/coreutils")
!1824 = !{!1825, !1826, !1827, !1828, !1862, !1863}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "n_tok", scope: !1822, file: !1823, line: 30, baseType: !52, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "tok", scope: !1822, file: !1823, line: 31, baseType: !178, size: 64, offset: 64)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "tok_len", scope: !1822, file: !1823, line: 32, baseType: !618, size: 64, offset: 128)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "o_data", scope: !1822, file: !1823, line: 33, baseType: !1829, size: 704, offset: 192)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1147, line: 174, size: 704, elements: !1830)
!1830 = !{!1831, !1832, !1839, !1840, !1841, !1842, !1847, !1848, !1853, !1858, !1859, !1860, !1861}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1829, file: !1147, line: 176, baseType: !52, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1829, file: !1147, line: 177, baseType: !1833, size: 64, offset: 64)
!1833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1834, size: 64)
!1834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1147, line: 167, size: 128, elements: !1835)
!1835 = !{!1836, !1837, !1838}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1834, file: !1147, line: 169, baseType: !7, size: 64)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1834, file: !1147, line: 170, baseType: !1833, size: 64, offset: 64)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1834, file: !1147, line: 171, baseType: !417, offset: 128)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1829, file: !1147, line: 178, baseType: !7, size: 64, offset: 128)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1829, file: !1147, line: 179, baseType: !7, size: 64, offset: 192)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1829, file: !1147, line: 180, baseType: !7, size: 64, offset: 256)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1829, file: !1147, line: 185, baseType: !1843, size: 64, offset: 320)
!1843 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1829, file: !1147, line: 181, size: 64, elements: !1844)
!1844 = !{!1845, !1846}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1843, file: !1147, line: 183, baseType: !52, size: 64)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !1843, file: !1147, line: 184, baseType: !47, size: 64)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1829, file: !1147, line: 186, baseType: !52, size: 64, offset: 384)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1829, file: !1147, line: 193, baseType: !1849, size: 64, offset: 448)
!1849 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1829, file: !1147, line: 189, size: 64, elements: !1850)
!1850 = !{!1851, !1852}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1849, file: !1147, line: 191, baseType: !1182, size: 64)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1849, file: !1147, line: 192, baseType: !1186, size: 64)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1829, file: !1147, line: 198, baseType: !1854, size: 64, offset: 512)
!1854 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1829, file: !1147, line: 194, size: 64, elements: !1855)
!1855 = !{!1856, !1857}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "plain", scope: !1854, file: !1147, line: 196, baseType: !979, size: 64)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "extra", scope: !1854, file: !1147, line: 197, baseType: !1173, size: 64)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1829, file: !1147, line: 200, baseType: !47, size: 64, offset: 576)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1829, file: !1147, line: 201, baseType: !66, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1829, file: !1147, line: 202, baseType: !66, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1829, file: !1147, line: 206, baseType: !66, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "o_tok", scope: !1822, file: !1823, line: 34, baseType: !1829, size: 704, offset: 896)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "o_tok_len", scope: !1822, file: !1823, line: 35, baseType: !1829, size: 704, offset: 1600)
!1864 = !DILocalVariable(name: "argc", arg: 1, scope: !712, file: !63, line: 4194, type: !5)
!1865 = !DILocation(line: 4194, column: 11, scope: !712)
!1866 = !DILocalVariable(name: "argv", arg: 2, scope: !712, file: !63, line: 4194, type: !178)
!1867 = !DILocation(line: 4194, column: 24, scope: !712)
!1868 = !DILocalVariable(name: "key", scope: !712, file: !63, line: 4196, type: !152)
!1869 = !DILocation(line: 4196, column: 20, scope: !712)
!1870 = !DILocalVariable(name: "key_buf", scope: !712, file: !63, line: 4197, type: !153)
!1871 = !DILocation(line: 4197, column: 19, scope: !712)
!1872 = !DILocalVariable(name: "gkey", scope: !712, file: !63, line: 4198, type: !153)
!1873 = !DILocation(line: 4198, column: 19, scope: !712)
!1874 = !DILocalVariable(name: "gkey_only", scope: !712, file: !63, line: 4199, type: !162)
!1875 = !DILocation(line: 4199, column: 8, scope: !712)
!1876 = !DILocalVariable(name: "s", scope: !712, file: !63, line: 4200, type: !90)
!1877 = !DILocation(line: 4200, column: 15, scope: !712)
!1878 = !DILocalVariable(name: "c", scope: !712, file: !63, line: 4201, type: !5)
!1879 = !DILocation(line: 4201, column: 7, scope: !712)
!1880 = !DILocalVariable(name: "checkonly", scope: !712, file: !63, line: 4202, type: !8)
!1881 = !DILocation(line: 4202, column: 8, scope: !712)
!1882 = !DILocalVariable(name: "mergeonly", scope: !712, file: !63, line: 4203, type: !162)
!1883 = !DILocation(line: 4203, column: 8, scope: !712)
!1884 = !DILocalVariable(name: "random_source", scope: !712, file: !63, line: 4204, type: !7)
!1885 = !DILocation(line: 4204, column: 9, scope: !712)
!1886 = !DILocalVariable(name: "need_random", scope: !712, file: !63, line: 4205, type: !162)
!1887 = !DILocation(line: 4205, column: 8, scope: !712)
!1888 = !DILocalVariable(name: "nthreads", scope: !712, file: !63, line: 4206, type: !52)
!1889 = !DILocation(line: 4206, column: 10, scope: !712)
!1890 = !DILocalVariable(name: "nfiles", scope: !712, file: !63, line: 4207, type: !52)
!1891 = !DILocation(line: 4207, column: 10, scope: !712)
!1892 = !DILocalVariable(name: "posixly_correct", scope: !712, file: !63, line: 4208, type: !162)
!1893 = !DILocation(line: 4208, column: 8, scope: !712)
!1894 = !DILocation(line: 4208, column: 27, scope: !712)
!1895 = !DILocation(line: 4208, column: 54, scope: !712)
!1896 = !DILocalVariable(name: "posix_ver", scope: !712, file: !63, line: 4209, type: !5)
!1897 = !DILocation(line: 4209, column: 7, scope: !712)
!1898 = !DILocation(line: 4209, column: 19, scope: !712)
!1899 = !DILocalVariable(name: "traditional_usage", scope: !712, file: !63, line: 4210, type: !162)
!1900 = !DILocation(line: 4210, column: 8, scope: !712)
!1901 = !DILocation(line: 4210, column: 41, scope: !712)
!1902 = !DILocation(line: 4210, column: 38, scope: !712)
!1903 = !DILocation(line: 4210, column: 51, scope: !712)
!1904 = !DILocation(line: 4210, column: 54, scope: !712)
!1905 = !DILocation(line: 4210, column: 64, scope: !712)
!1906 = !DILocation(line: 0, scope: !712)
!1907 = !DILocation(line: 4210, column: 28, scope: !712)
!1908 = !DILocalVariable(name: "files", scope: !712, file: !63, line: 4211, type: !178)
!1909 = !DILocation(line: 4211, column: 10, scope: !712)
!1910 = !DILocalVariable(name: "files_from", scope: !712, file: !63, line: 4212, type: !7)
!1911 = !DILocation(line: 4212, column: 9, scope: !712)
!1912 = !DILocalVariable(name: "tok", scope: !712, file: !63, line: 4213, type: !1822)
!1913 = !DILocation(line: 4213, column: 17, scope: !712)
!1914 = !DILocalVariable(name: "outfile", scope: !712, file: !63, line: 4214, type: !90)
!1915 = !DILocation(line: 4214, column: 15, scope: !712)
!1916 = !DILocalVariable(name: "locale_ok", scope: !712, file: !63, line: 4215, type: !162)
!1917 = !DILocation(line: 4215, column: 8, scope: !712)
!1918 = !DILocation(line: 4218, column: 21, scope: !712)
!1919 = !DILocation(line: 4218, column: 3, scope: !712)
!1920 = !DILocation(line: 4219, column: 18, scope: !712)
!1921 = !DILocation(line: 4219, column: 16, scope: !712)
!1922 = !DILocation(line: 4219, column: 15, scope: !712)
!1923 = !DILocation(line: 4219, column: 13, scope: !712)
!1924 = !DILocation(line: 4220, column: 3, scope: !712)
!1925 = !DILocation(line: 4221, column: 3, scope: !712)
!1926 = !DILocation(line: 4223, column: 3, scope: !712)
!1927 = !DILocation(line: 4225, column: 21, scope: !712)
!1928 = !DILocation(line: 4225, column: 19, scope: !712)
!1929 = !DILocation(line: 4227, column: 18, scope: !712)
!1930 = !DILocation(line: 4227, column: 16, scope: !712)
!1931 = !DILocalVariable(name: "locale", scope: !1932, file: !63, line: 4232, type: !185)
!1932 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4231, column: 3)
!1933 = !DILocation(line: 4232, column: 25, scope: !1932)
!1934 = !DILocation(line: 4232, column: 34, scope: !1932)
!1935 = !DILocation(line: 4237, column: 31, scope: !1932)
!1936 = !DILocation(line: 4237, column: 39, scope: !1932)
!1937 = !DILocation(line: 4237, column: 21, scope: !1932)
!1938 = !DILocation(line: 4237, column: 19, scope: !1932)
!1939 = !DILocation(line: 4238, column: 11, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1932, file: !63, line: 4238, column: 9)
!1941 = !DILocation(line: 4238, column: 25, scope: !1940)
!1942 = !DILocation(line: 4238, column: 28, scope: !1940)
!1943 = !DILocation(line: 4238, column: 36, scope: !1940)
!1944 = !DILocation(line: 4238, column: 9, scope: !1932)
!1945 = !DILocation(line: 4239, column: 21, scope: !1940)
!1946 = !DILocation(line: 4239, column: 7, scope: !1940)
!1947 = !DILocation(line: 4242, column: 32, scope: !1932)
!1948 = !DILocation(line: 4242, column: 40, scope: !1932)
!1949 = !DILocation(line: 4242, column: 31, scope: !1932)
!1950 = !DILocation(line: 4242, column: 21, scope: !1932)
!1951 = !DILocation(line: 4242, column: 19, scope: !1932)
!1952 = !DILocation(line: 4243, column: 11, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1932, file: !63, line: 4243, column: 9)
!1954 = !DILocation(line: 4243, column: 25, scope: !1953)
!1955 = !DILocation(line: 4243, column: 28, scope: !1953)
!1956 = !DILocation(line: 4243, column: 36, scope: !1953)
!1957 = !DILocation(line: 4243, column: 9, scope: !1932)
!1958 = !DILocation(line: 4244, column: 21, scope: !1953)
!1959 = !DILocation(line: 4244, column: 7, scope: !1953)
!1960 = !DILocation(line: 4247, column: 19, scope: !712)
!1961 = !DILocation(line: 4248, column: 3, scope: !712)
!1962 = !DILocalVariable(name: "i", scope: !1963, file: !63, line: 4251, type: !52)
!1963 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4250, column: 3)
!1964 = !DILocation(line: 4251, column: 12, scope: !1963)
!1965 = !DILocalVariable(name: "act", scope: !1963, file: !63, line: 4275, type: !228)
!1966 = !DILocation(line: 4275, column: 22, scope: !1963)
!1967 = !DILocation(line: 4277, column: 5, scope: !1963)
!1968 = !DILocation(line: 4278, column: 12, scope: !1969)
!1969 = distinct !DILexicalBlock(scope: !1963, file: !63, line: 4278, column: 5)
!1970 = !DILocation(line: 4278, column: 10, scope: !1969)
!1971 = !DILocation(line: 4278, column: 17, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1969, file: !63, line: 4278, column: 5)
!1973 = !DILocation(line: 4278, column: 19, scope: !1972)
!1974 = !DILocation(line: 4278, column: 5, scope: !1969)
!1975 = !DILocation(line: 4280, column: 24, scope: !1976)
!1976 = distinct !DILexicalBlock(scope: !1972, file: !63, line: 4279, column: 7)
!1977 = !DILocation(line: 4280, column: 20, scope: !1976)
!1978 = !DILocation(line: 4280, column: 9, scope: !1976)
!1979 = !DILocation(line: 4281, column: 17, scope: !1980)
!1980 = distinct !DILexicalBlock(scope: !1976, file: !63, line: 4281, column: 13)
!1981 = !DILocation(line: 4281, column: 28, scope: !1980)
!1982 = !DILocation(line: 4281, column: 13, scope: !1976)
!1983 = !DILocation(line: 4282, column: 43, scope: !1980)
!1984 = !DILocation(line: 4282, column: 39, scope: !1980)
!1985 = !DILocation(line: 4282, column: 11, scope: !1980)
!1986 = !DILocation(line: 4283, column: 7, scope: !1976)
!1987 = !DILocation(line: 4278, column: 29, scope: !1972)
!1988 = !DILocation(line: 4278, column: 5, scope: !1972)
!1989 = distinct !{!1989, !1974, !1990}
!1990 = !DILocation(line: 4283, column: 7, scope: !1969)
!1991 = !DILocation(line: 4285, column: 9, scope: !1963)
!1992 = !DILocation(line: 4285, column: 20, scope: !1963)
!1993 = !DILocation(line: 4286, column: 9, scope: !1963)
!1994 = !DILocation(line: 4286, column: 19, scope: !1963)
!1995 = !DILocation(line: 4287, column: 9, scope: !1963)
!1996 = !DILocation(line: 4287, column: 18, scope: !1963)
!1997 = !DILocation(line: 4289, column: 12, scope: !1998)
!1998 = distinct !DILexicalBlock(scope: !1963, file: !63, line: 4289, column: 5)
!1999 = !DILocation(line: 4289, column: 10, scope: !1998)
!2000 = !DILocation(line: 4289, column: 17, scope: !2001)
!2001 = distinct !DILexicalBlock(scope: !1998, file: !63, line: 4289, column: 5)
!2002 = !DILocation(line: 4289, column: 19, scope: !2001)
!2003 = !DILocation(line: 4289, column: 5, scope: !1998)
!2004 = !DILocation(line: 4290, column: 45, scope: !2005)
!2005 = distinct !DILexicalBlock(scope: !2001, file: !63, line: 4290, column: 11)
!2006 = !DILocation(line: 4290, column: 41, scope: !2005)
!2007 = !DILocation(line: 4290, column: 11, scope: !2005)
!2008 = !DILocation(line: 4290, column: 11, scope: !2001)
!2009 = !DILocation(line: 4291, column: 24, scope: !2005)
!2010 = !DILocation(line: 4291, column: 20, scope: !2005)
!2011 = !DILocation(line: 4291, column: 9, scope: !2005)
!2012 = !DILocation(line: 4290, column: 47, scope: !2005)
!2013 = !DILocation(line: 4289, column: 29, scope: !2001)
!2014 = !DILocation(line: 4289, column: 5, scope: !2001)
!2015 = distinct !{!2015, !2003, !2016}
!2016 = !DILocation(line: 4291, column: 38, scope: !1998)
!2017 = !DILocation(line: 4301, column: 3, scope: !712)
!2018 = !DILocation(line: 4304, column: 3, scope: !712)
!2019 = !DILocation(line: 4306, column: 3, scope: !712)
!2020 = !DILocation(line: 4307, column: 8, scope: !712)
!2021 = !DILocation(line: 4307, column: 14, scope: !712)
!2022 = !DILocation(line: 4309, column: 21, scope: !712)
!2023 = !DILocation(line: 4309, column: 11, scope: !712)
!2024 = !DILocation(line: 4309, column: 9, scope: !712)
!2025 = !DILocation(line: 4311, column: 3, scope: !712)
!2026 = !DILocalVariable(name: "oi", scope: !2027, file: !63, line: 4317, type: !5)
!2027 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4312, column: 5)
!2028 = !DILocation(line: 4317, column: 11, scope: !2027)
!2029 = !DILocation(line: 4319, column: 11, scope: !2030)
!2030 = distinct !DILexicalBlock(scope: !2027, file: !63, line: 4319, column: 11)
!2031 = !DILocation(line: 4319, column: 13, scope: !2030)
!2032 = !DILocation(line: 4320, column: 11, scope: !2030)
!2033 = !DILocation(line: 4320, column: 15, scope: !2030)
!2034 = !DILocation(line: 4320, column: 31, scope: !2030)
!2035 = !DILocation(line: 4320, column: 34, scope: !2030)
!2036 = !DILocation(line: 4320, column: 41, scope: !2030)
!2037 = !DILocation(line: 4321, column: 15, scope: !2030)
!2038 = !DILocation(line: 4321, column: 21, scope: !2030)
!2039 = !DILocation(line: 4322, column: 21, scope: !2030)
!2040 = !DILocation(line: 4322, column: 26, scope: !2030)
!2041 = !DILocation(line: 4323, column: 21, scope: !2030)
!2042 = !DILocation(line: 4323, column: 24, scope: !2030)
!2043 = !DILocation(line: 4323, column: 34, scope: !2030)
!2044 = !DILocation(line: 4323, column: 31, scope: !2030)
!2045 = !DILocation(line: 4324, column: 21, scope: !2030)
!2046 = !DILocation(line: 4324, column: 24, scope: !2030)
!2047 = !DILocation(line: 4324, column: 29, scope: !2030)
!2048 = !DILocation(line: 4324, column: 40, scope: !2030)
!2049 = !DILocation(line: 4324, column: 47, scope: !2030)
!2050 = !DILocation(line: 4324, column: 50, scope: !2030)
!2051 = !DILocation(line: 4324, column: 55, scope: !2030)
!2052 = !DILocation(line: 4324, column: 66, scope: !2030)
!2053 = !DILocation(line: 4325, column: 21, scope: !2030)
!2054 = !DILocation(line: 4325, column: 25, scope: !2030)
!2055 = !DILocation(line: 4325, column: 30, scope: !2030)
!2056 = !DILocation(line: 4325, column: 41, scope: !2030)
!2057 = !DILocation(line: 4325, column: 44, scope: !2030)
!2058 = !DILocation(line: 4325, column: 51, scope: !2030)
!2059 = !DILocation(line: 4325, column: 58, scope: !2030)
!2060 = !DILocation(line: 4325, column: 55, scope: !2030)
!2061 = !DILocation(line: 4326, column: 11, scope: !2030)
!2062 = !DILocation(line: 4326, column: 33, scope: !2030)
!2063 = !DILocation(line: 4326, column: 39, scope: !2030)
!2064 = !DILocation(line: 4326, column: 20, scope: !2030)
!2065 = !DILocation(line: 4326, column: 18, scope: !2030)
!2066 = !DILocation(line: 4328, column: 15, scope: !2030)
!2067 = !DILocation(line: 4319, column: 11, scope: !2027)
!2068 = !DILocation(line: 4330, column: 15, scope: !2069)
!2069 = distinct !DILexicalBlock(scope: !2070, file: !63, line: 4330, column: 15)
!2070 = distinct !DILexicalBlock(scope: !2030, file: !63, line: 4329, column: 9)
!2071 = !DILocation(line: 4330, column: 23, scope: !2069)
!2072 = !DILocation(line: 4330, column: 20, scope: !2069)
!2073 = !DILocation(line: 4330, column: 15, scope: !2070)
!2074 = !DILocation(line: 4331, column: 13, scope: !2069)
!2075 = !DILocation(line: 4332, column: 29, scope: !2070)
!2076 = !DILocation(line: 4332, column: 40, scope: !2070)
!2077 = !DILocation(line: 4332, column: 11, scope: !2070)
!2078 = !DILocation(line: 4332, column: 23, scope: !2070)
!2079 = !DILocation(line: 4332, column: 27, scope: !2070)
!2080 = !DILocation(line: 4333, column: 9, scope: !2070)
!2081 = !DILocation(line: 4334, column: 20, scope: !2030)
!2082 = !DILocation(line: 4334, column: 12, scope: !2030)
!2083 = !DILocation(line: 4337, column: 15, scope: !2084)
!2084 = distinct !DILexicalBlock(scope: !2030, file: !63, line: 4335, column: 9)
!2085 = !DILocation(line: 4338, column: 15, scope: !2086)
!2086 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4338, column: 15)
!2087 = !DILocation(line: 4338, column: 25, scope: !2086)
!2088 = !DILocation(line: 4338, column: 15, scope: !2084)
!2089 = !DILocalVariable(name: "minus_pos_usage", scope: !2090, file: !63, line: 4340, type: !162)
!2090 = distinct !DILexicalBlock(scope: !2086, file: !63, line: 4339, column: 13)
!2091 = !DILocation(line: 4340, column: 20, scope: !2090)
!2092 = !DILocation(line: 4340, column: 39, scope: !2090)
!2093 = !DILocation(line: 4340, column: 49, scope: !2090)
!2094 = !DILocation(line: 4340, column: 46, scope: !2090)
!2095 = !DILocation(line: 4340, column: 54, scope: !2090)
!2096 = !DILocation(line: 4340, column: 57, scope: !2090)
!2097 = !DILocation(line: 4340, column: 62, scope: !2090)
!2098 = !DILocation(line: 4340, column: 73, scope: !2090)
!2099 = !DILocation(line: 4341, column: 39, scope: !2090)
!2100 = !DILocation(line: 4341, column: 42, scope: !2090)
!2101 = !DILocation(line: 0, scope: !2090)
!2102 = !DILocation(line: 4342, column: 36, scope: !2090)
!2103 = !DILocation(line: 4342, column: 52, scope: !2090)
!2104 = !DILocation(line: 4342, column: 56, scope: !2090)
!2105 = !DILocation(line: 4342, column: 55, scope: !2090)
!2106 = !DILocation(line: 4342, column: 33, scope: !2090)
!2107 = !DILocation(line: 4343, column: 19, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2090, file: !63, line: 4343, column: 19)
!2109 = !DILocation(line: 4343, column: 19, scope: !2090)
!2110 = !DILocation(line: 4347, column: 25, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2108, file: !63, line: 4344, column: 17)
!2112 = !DILocation(line: 4347, column: 23, scope: !2111)
!2113 = !DILocation(line: 4348, column: 42, scope: !2111)
!2114 = !DILocation(line: 4348, column: 49, scope: !2111)
!2115 = !DILocation(line: 4348, column: 55, scope: !2111)
!2116 = !DILocation(line: 4348, column: 60, scope: !2111)
!2117 = !DILocation(line: 4348, column: 23, scope: !2111)
!2118 = !DILocation(line: 4348, column: 21, scope: !2111)
!2119 = !DILocation(line: 4349, column: 23, scope: !2120)
!2120 = distinct !DILexicalBlock(scope: !2111, file: !63, line: 4349, column: 23)
!2121 = !DILocation(line: 4349, column: 25, scope: !2120)
!2122 = !DILocation(line: 4349, column: 29, scope: !2120)
!2123 = !DILocation(line: 4349, column: 28, scope: !2120)
!2124 = !DILocation(line: 4349, column: 31, scope: !2120)
!2125 = !DILocation(line: 4349, column: 23, scope: !2111)
!2126 = !DILocation(line: 4350, column: 44, scope: !2120)
!2127 = !DILocation(line: 4350, column: 46, scope: !2120)
!2128 = !DILocation(line: 4350, column: 52, scope: !2120)
!2129 = !DILocation(line: 4350, column: 57, scope: !2120)
!2130 = !DILocation(line: 4350, column: 25, scope: !2120)
!2131 = !DILocation(line: 4350, column: 23, scope: !2120)
!2132 = !DILocation(line: 4350, column: 21, scope: !2120)
!2133 = !DILocation(line: 4351, column: 26, scope: !2134)
!2134 = distinct !DILexicalBlock(scope: !2111, file: !63, line: 4351, column: 23)
!2135 = !DILocation(line: 4351, column: 31, scope: !2134)
!2136 = !DILocation(line: 4351, column: 37, scope: !2134)
!2137 = !DILocation(line: 4351, column: 40, scope: !2134)
!2138 = !DILocation(line: 4351, column: 45, scope: !2134)
!2139 = !DILocation(line: 4351, column: 23, scope: !2111)
!2140 = !DILocation(line: 4352, column: 21, scope: !2134)
!2141 = !DILocation(line: 4352, column: 26, scope: !2134)
!2142 = !DILocation(line: 4352, column: 32, scope: !2134)
!2143 = !DILocation(line: 4353, column: 25, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2111, file: !63, line: 4353, column: 23)
!2145 = !DILocation(line: 4353, column: 27, scope: !2144)
!2146 = !DILocation(line: 4353, column: 45, scope: !2144)
!2147 = !DILocation(line: 4353, column: 48, scope: !2144)
!2148 = !DILocation(line: 4353, column: 31, scope: !2144)
!2149 = !DILocation(line: 4353, column: 30, scope: !2144)
!2150 = !DILocation(line: 4353, column: 23, scope: !2111)
!2151 = !DILocation(line: 4354, column: 25, scope: !2144)
!2152 = !DILocation(line: 4354, column: 21, scope: !2144)
!2153 = !DILocation(line: 4357, column: 27, scope: !2154)
!2154 = distinct !DILexicalBlock(scope: !2155, file: !63, line: 4357, column: 27)
!2155 = distinct !DILexicalBlock(scope: !2144, file: !63, line: 4356, column: 21)
!2156 = !DILocation(line: 4357, column: 27, scope: !2155)
!2157 = !DILocalVariable(name: "optarg1", scope: !2158, file: !63, line: 4359, type: !90)
!2158 = distinct !DILexicalBlock(scope: !2154, file: !63, line: 4358, column: 25)
!2159 = !DILocation(line: 4359, column: 39, scope: !2158)
!2160 = !DILocation(line: 4359, column: 49, scope: !2158)
!2161 = !DILocation(line: 4359, column: 60, scope: !2158)
!2162 = !DILocation(line: 4360, column: 50, scope: !2158)
!2163 = !DILocation(line: 4360, column: 58, scope: !2158)
!2164 = !DILocation(line: 4360, column: 64, scope: !2158)
!2165 = !DILocation(line: 4360, column: 69, scope: !2158)
!2166 = !DILocation(line: 4360, column: 31, scope: !2158)
!2167 = !DILocation(line: 4360, column: 29, scope: !2158)
!2168 = !DILocation(line: 4365, column: 27, scope: !2158)
!2169 = !DILocation(line: 4366, column: 32, scope: !2170)
!2170 = distinct !DILexicalBlock(scope: !2158, file: !63, line: 4366, column: 31)
!2171 = !DILocation(line: 4366, column: 31, scope: !2170)
!2172 = !DILocation(line: 4366, column: 34, scope: !2170)
!2173 = !DILocation(line: 4366, column: 31, scope: !2158)
!2174 = !DILocation(line: 4367, column: 52, scope: !2170)
!2175 = !DILocation(line: 4367, column: 54, scope: !2170)
!2176 = !DILocation(line: 4367, column: 60, scope: !2170)
!2177 = !DILocation(line: 4367, column: 65, scope: !2170)
!2178 = !DILocation(line: 4367, column: 33, scope: !2170)
!2179 = !DILocation(line: 4367, column: 31, scope: !2170)
!2180 = !DILocation(line: 4367, column: 29, scope: !2170)
!2181 = !DILocation(line: 4369, column: 32, scope: !2182)
!2182 = distinct !DILexicalBlock(scope: !2158, file: !63, line: 4369, column: 31)
!2183 = !DILocation(line: 4369, column: 37, scope: !2182)
!2184 = !DILocation(line: 4369, column: 43, scope: !2182)
!2185 = !DILocation(line: 4369, column: 46, scope: !2182)
!2186 = !DILocation(line: 4369, column: 51, scope: !2182)
!2187 = !DILocation(line: 4369, column: 31, scope: !2158)
!2188 = !DILocation(line: 4377, column: 31, scope: !2189)
!2189 = distinct !DILexicalBlock(scope: !2182, file: !63, line: 4370, column: 29)
!2190 = !DILocation(line: 4377, column: 36, scope: !2189)
!2191 = !DILocation(line: 4377, column: 41, scope: !2189)
!2192 = !DILocation(line: 4378, column: 29, scope: !2189)
!2193 = !DILocation(line: 4379, column: 46, scope: !2194)
!2194 = distinct !DILexicalBlock(scope: !2158, file: !63, line: 4379, column: 31)
!2195 = !DILocation(line: 4379, column: 49, scope: !2194)
!2196 = !DILocation(line: 4379, column: 32, scope: !2194)
!2197 = !DILocation(line: 4379, column: 31, scope: !2194)
!2198 = !DILocation(line: 4379, column: 31, scope: !2158)
!2199 = !DILocation(line: 4380, column: 43, scope: !2194)
!2200 = !DILocation(line: 4380, column: 29, scope: !2194)
!2201 = !DILocation(line: 4382, column: 25, scope: !2158)
!2202 = !DILocation(line: 4383, column: 23, scope: !2155)
!2203 = !DILocation(line: 4383, column: 28, scope: !2155)
!2204 = !DILocation(line: 4383, column: 45, scope: !2155)
!2205 = !DILocation(line: 4384, column: 34, scope: !2155)
!2206 = !DILocation(line: 4384, column: 23, scope: !2155)
!2207 = !DILocation(line: 4386, column: 17, scope: !2111)
!2208 = !DILocation(line: 4387, column: 13, scope: !2090)
!2209 = !DILocation(line: 4388, column: 17, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4388, column: 15)
!2211 = !DILocation(line: 4388, column: 15, scope: !2084)
!2212 = !DILocation(line: 4389, column: 31, scope: !2210)
!2213 = !DILocation(line: 4389, column: 13, scope: !2210)
!2214 = !DILocation(line: 4389, column: 25, scope: !2210)
!2215 = !DILocation(line: 4389, column: 29, scope: !2210)
!2216 = !DILocation(line: 4390, column: 11, scope: !2084)
!2217 = !DILocation(line: 4393, column: 15, scope: !2084)
!2218 = !DILocation(line: 4393, column: 13, scope: !2084)
!2219 = !DILocation(line: 4394, column: 11, scope: !2084)
!2220 = !DILocalVariable(name: "str", scope: !2221, file: !63, line: 4407, type: !330)
!2221 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4406, column: 11)
!2222 = !DILocation(line: 4407, column: 18, scope: !2221)
!2223 = !DILocation(line: 4408, column: 22, scope: !2221)
!2224 = !DILocation(line: 4408, column: 13, scope: !2221)
!2225 = !DILocation(line: 4408, column: 20, scope: !2221)
!2226 = !DILocation(line: 4409, column: 13, scope: !2221)
!2227 = !DILocation(line: 4409, column: 20, scope: !2221)
!2228 = !DILocation(line: 4410, column: 27, scope: !2221)
!2229 = !DILocation(line: 4410, column: 13, scope: !2221)
!2230 = !DILocation(line: 4412, column: 11, scope: !2084)
!2231 = !DILocation(line: 4415, column: 16, scope: !2084)
!2232 = !DILocation(line: 4416, column: 18, scope: !2084)
!2233 = !DILocation(line: 4415, column: 13, scope: !2084)
!2234 = !DILocation(line: 4418, column: 11, scope: !2084)
!2235 = !DILocation(line: 4421, column: 15, scope: !2236)
!2236 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4421, column: 15)
!2237 = !DILocation(line: 4421, column: 25, scope: !2236)
!2238 = !DILocation(line: 4421, column: 28, scope: !2236)
!2239 = !DILocation(line: 4421, column: 41, scope: !2236)
!2240 = !DILocation(line: 4421, column: 38, scope: !2236)
!2241 = !DILocation(line: 4421, column: 15, scope: !2084)
!2242 = !DILocation(line: 4422, column: 13, scope: !2236)
!2243 = !DILocation(line: 4423, column: 23, scope: !2084)
!2244 = !DILocation(line: 4423, column: 21, scope: !2084)
!2245 = !DILocation(line: 4424, column: 11, scope: !2084)
!2246 = !DILocation(line: 4427, column: 15, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4427, column: 15)
!2248 = !DILocation(line: 4427, column: 32, scope: !2247)
!2249 = !DILocation(line: 4427, column: 36, scope: !2247)
!2250 = !DILocation(line: 4427, column: 15, scope: !2084)
!2251 = !DILocation(line: 4428, column: 13, scope: !2247)
!2252 = !DILocation(line: 4429, column: 30, scope: !2084)
!2253 = !DILocation(line: 4429, column: 28, scope: !2084)
!2254 = !DILocation(line: 4430, column: 11, scope: !2084)
!2255 = !DILocation(line: 4433, column: 17, scope: !2084)
!2256 = !DILocation(line: 4434, column: 11, scope: !2084)
!2257 = !DILocation(line: 4437, column: 24, scope: !2084)
!2258 = !DILocation(line: 4437, column: 22, scope: !2084)
!2259 = !DILocation(line: 4438, column: 11, scope: !2084)
!2260 = !DILocation(line: 4441, column: 17, scope: !2084)
!2261 = !DILocation(line: 4441, column: 15, scope: !2084)
!2262 = !DILocation(line: 4444, column: 34, scope: !2084)
!2263 = !DILocation(line: 4444, column: 43, scope: !2084)
!2264 = !DILocation(line: 4444, column: 48, scope: !2084)
!2265 = !DILocation(line: 4444, column: 15, scope: !2084)
!2266 = !DILocation(line: 4444, column: 13, scope: !2084)
!2267 = !DILocation(line: 4446, column: 17, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4446, column: 15)
!2269 = !DILocation(line: 4446, column: 22, scope: !2268)
!2270 = !DILocation(line: 4446, column: 27, scope: !2268)
!2271 = !DILocation(line: 4446, column: 15, scope: !2084)
!2272 = !DILocation(line: 4449, column: 29, scope: !2273)
!2273 = distinct !DILexicalBlock(scope: !2268, file: !63, line: 4447, column: 13)
!2274 = !DILocation(line: 4449, column: 15, scope: !2273)
!2275 = !DILocation(line: 4451, column: 16, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4451, column: 15)
!2277 = !DILocation(line: 4451, column: 15, scope: !2276)
!2278 = !DILocation(line: 4451, column: 18, scope: !2276)
!2279 = !DILocation(line: 4451, column: 15, scope: !2084)
!2280 = !DILocation(line: 4453, column: 38, scope: !2281)
!2281 = distinct !DILexicalBlock(scope: !2276, file: !63, line: 4452, column: 13)
!2282 = !DILocation(line: 4453, column: 40, scope: !2281)
!2283 = !DILocation(line: 4453, column: 46, scope: !2281)
!2284 = !DILocation(line: 4453, column: 51, scope: !2281)
!2285 = !DILocation(line: 4453, column: 19, scope: !2281)
!2286 = !DILocation(line: 4453, column: 17, scope: !2281)
!2287 = !DILocation(line: 4455, column: 21, scope: !2288)
!2288 = distinct !DILexicalBlock(scope: !2281, file: !63, line: 4455, column: 19)
!2289 = !DILocation(line: 4455, column: 26, scope: !2288)
!2290 = !DILocation(line: 4455, column: 31, scope: !2288)
!2291 = !DILocation(line: 4455, column: 19, scope: !2281)
!2292 = !DILocation(line: 4458, column: 33, scope: !2293)
!2293 = distinct !DILexicalBlock(scope: !2288, file: !63, line: 4456, column: 17)
!2294 = !DILocation(line: 4458, column: 19, scope: !2293)
!2295 = !DILocation(line: 4460, column: 13, scope: !2281)
!2296 = !DILocation(line: 4461, column: 18, scope: !2297)
!2297 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4461, column: 15)
!2298 = !DILocation(line: 4461, column: 23, scope: !2297)
!2299 = !DILocation(line: 4461, column: 29, scope: !2297)
!2300 = !DILocation(line: 4461, column: 32, scope: !2297)
!2301 = !DILocation(line: 4461, column: 37, scope: !2297)
!2302 = !DILocation(line: 4461, column: 15, scope: !2084)
!2303 = !DILocation(line: 4462, column: 13, scope: !2297)
!2304 = !DILocation(line: 4462, column: 18, scope: !2297)
!2305 = !DILocation(line: 4462, column: 24, scope: !2297)
!2306 = !DILocation(line: 4463, column: 29, scope: !2084)
!2307 = !DILocation(line: 4463, column: 32, scope: !2084)
!2308 = !DILocation(line: 4463, column: 15, scope: !2084)
!2309 = !DILocation(line: 4463, column: 13, scope: !2084)
!2310 = !DILocation(line: 4464, column: 16, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4464, column: 15)
!2312 = !DILocation(line: 4464, column: 15, scope: !2311)
!2313 = !DILocation(line: 4464, column: 18, scope: !2311)
!2314 = !DILocation(line: 4464, column: 15, scope: !2084)
!2315 = !DILocation(line: 4466, column: 15, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2311, file: !63, line: 4465, column: 13)
!2317 = !DILocation(line: 4466, column: 20, scope: !2316)
!2318 = !DILocation(line: 4466, column: 26, scope: !2316)
!2319 = !DILocation(line: 4467, column: 15, scope: !2316)
!2320 = !DILocation(line: 4467, column: 20, scope: !2316)
!2321 = !DILocation(line: 4467, column: 26, scope: !2316)
!2322 = !DILocation(line: 4468, column: 13, scope: !2316)
!2323 = !DILocation(line: 4472, column: 38, scope: !2324)
!2324 = distinct !DILexicalBlock(scope: !2311, file: !63, line: 4470, column: 13)
!2325 = !DILocation(line: 4472, column: 40, scope: !2324)
!2326 = !DILocation(line: 4472, column: 46, scope: !2324)
!2327 = !DILocation(line: 4472, column: 51, scope: !2324)
!2328 = !DILocation(line: 4472, column: 19, scope: !2324)
!2329 = !DILocation(line: 4472, column: 17, scope: !2324)
!2330 = !DILocation(line: 4474, column: 21, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2324, file: !63, line: 4474, column: 19)
!2332 = !DILocation(line: 4474, column: 26, scope: !2331)
!2333 = !DILocation(line: 4474, column: 31, scope: !2331)
!2334 = !DILocation(line: 4474, column: 19, scope: !2324)
!2335 = !DILocation(line: 4477, column: 33, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2331, file: !63, line: 4475, column: 17)
!2337 = !DILocation(line: 4477, column: 19, scope: !2336)
!2338 = !DILocation(line: 4479, column: 20, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2324, file: !63, line: 4479, column: 19)
!2340 = !DILocation(line: 4479, column: 19, scope: !2339)
!2341 = !DILocation(line: 4479, column: 22, scope: !2339)
!2342 = !DILocation(line: 4479, column: 19, scope: !2324)
!2343 = !DILocation(line: 4481, column: 42, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2339, file: !63, line: 4480, column: 17)
!2345 = !DILocation(line: 4481, column: 44, scope: !2344)
!2346 = !DILocation(line: 4481, column: 50, scope: !2344)
!2347 = !DILocation(line: 4481, column: 55, scope: !2344)
!2348 = !DILocation(line: 4481, column: 23, scope: !2344)
!2349 = !DILocation(line: 4481, column: 21, scope: !2344)
!2350 = !DILocation(line: 4483, column: 17, scope: !2344)
!2351 = !DILocation(line: 4484, column: 33, scope: !2324)
!2352 = !DILocation(line: 4484, column: 36, scope: !2324)
!2353 = !DILocation(line: 4484, column: 19, scope: !2324)
!2354 = !DILocation(line: 4484, column: 17, scope: !2324)
!2355 = !DILocation(line: 4486, column: 16, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4486, column: 15)
!2357 = !DILocation(line: 4486, column: 15, scope: !2356)
!2358 = !DILocation(line: 4486, column: 15, scope: !2084)
!2359 = !DILocation(line: 4487, column: 27, scope: !2356)
!2360 = !DILocation(line: 4487, column: 13, scope: !2356)
!2361 = !DILocation(line: 4488, column: 22, scope: !2084)
!2362 = !DILocation(line: 4488, column: 11, scope: !2084)
!2363 = !DILocation(line: 4489, column: 11, scope: !2084)
!2364 = !DILocation(line: 4492, column: 21, scope: !2084)
!2365 = !DILocation(line: 4493, column: 11, scope: !2084)
!2366 = !DILocation(line: 4496, column: 27, scope: !2084)
!2367 = !DILocation(line: 4496, column: 31, scope: !2084)
!2368 = !DILocation(line: 4496, column: 34, scope: !2084)
!2369 = !DILocation(line: 4496, column: 11, scope: !2084)
!2370 = !DILocation(line: 4497, column: 11, scope: !2084)
!2371 = !DILocation(line: 4500, column: 15, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4500, column: 15)
!2373 = !DILocation(line: 4500, column: 23, scope: !2372)
!2374 = !DILocation(line: 4500, column: 27, scope: !2372)
!2375 = !DILocation(line: 4500, column: 15, scope: !2084)
!2376 = !DILocation(line: 4501, column: 13, scope: !2372)
!2377 = !DILocation(line: 4502, column: 21, scope: !2084)
!2378 = !DILocation(line: 4502, column: 19, scope: !2084)
!2379 = !DILocation(line: 4503, column: 11, scope: !2084)
!2380 = !DILocation(line: 4506, column: 15, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4506, column: 15)
!2382 = !DILocation(line: 4506, column: 29, scope: !2381)
!2383 = !DILocation(line: 4506, column: 33, scope: !2381)
!2384 = !DILocation(line: 4506, column: 15, scope: !2084)
!2385 = !DILocation(line: 4507, column: 13, scope: !2381)
!2386 = !DILocation(line: 4508, column: 27, scope: !2084)
!2387 = !DILocation(line: 4508, column: 25, scope: !2084)
!2388 = !DILocation(line: 4509, column: 11, scope: !2084)
!2389 = !DILocation(line: 4512, column: 18, scope: !2084)
!2390 = !DILocation(line: 4513, column: 11, scope: !2084)
!2391 = !DILocation(line: 4516, column: 30, scope: !2084)
!2392 = !DILocation(line: 4516, column: 34, scope: !2084)
!2393 = !DILocation(line: 4516, column: 37, scope: !2084)
!2394 = !DILocation(line: 4516, column: 11, scope: !2084)
!2395 = !DILocation(line: 4517, column: 11, scope: !2084)
!2396 = !DILocalVariable(name: "newtab", scope: !2397, file: !63, line: 4521, type: !8)
!2397 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4520, column: 11)
!2398 = !DILocation(line: 4521, column: 18, scope: !2397)
!2399 = !DILocation(line: 4521, column: 27, scope: !2397)
!2400 = !DILocation(line: 4522, column: 19, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2397, file: !63, line: 4522, column: 17)
!2402 = !DILocation(line: 4522, column: 17, scope: !2397)
!2403 = !DILocation(line: 4523, column: 15, scope: !2401)
!2404 = !DILocation(line: 4524, column: 17, scope: !2405)
!2405 = distinct !DILexicalBlock(scope: !2397, file: !63, line: 4524, column: 17)
!2406 = !DILocation(line: 4524, column: 17, scope: !2397)
!2407 = !DILocation(line: 4526, column: 21, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2409, file: !63, line: 4526, column: 21)
!2409 = distinct !DILexicalBlock(scope: !2405, file: !63, line: 4525, column: 15)
!2410 = !DILocation(line: 4526, column: 21, scope: !2409)
!2411 = !DILocation(line: 4527, column: 26, scope: !2408)
!2412 = !DILocation(line: 4527, column: 19, scope: !2408)
!2413 = !DILocation(line: 4534, column: 21, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2408, file: !63, line: 4529, column: 19)
!2415 = !DILocation(line: 4537, column: 15, scope: !2409)
!2416 = !DILocation(line: 4538, column: 17, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !2397, file: !63, line: 4538, column: 17)
!2418 = !DILocation(line: 4538, column: 21, scope: !2417)
!2419 = !DILocation(line: 4538, column: 36, scope: !2417)
!2420 = !DILocation(line: 4538, column: 39, scope: !2417)
!2421 = !DILocation(line: 4538, column: 46, scope: !2417)
!2422 = !DILocation(line: 4538, column: 43, scope: !2417)
!2423 = !DILocation(line: 4538, column: 17, scope: !2397)
!2424 = !DILocation(line: 4539, column: 15, scope: !2417)
!2425 = !DILocation(line: 4540, column: 19, scope: !2397)
!2426 = !DILocation(line: 4540, column: 17, scope: !2397)
!2427 = !DILocation(line: 4542, column: 11, scope: !2084)
!2428 = !DILocation(line: 4545, column: 25, scope: !2084)
!2429 = !DILocation(line: 4545, column: 11, scope: !2084)
!2430 = !DILocation(line: 4546, column: 11, scope: !2084)
!2431 = !DILocation(line: 4549, column: 40, scope: !2084)
!2432 = !DILocation(line: 4549, column: 44, scope: !2084)
!2433 = !DILocation(line: 4549, column: 47, scope: !2084)
!2434 = !DILocation(line: 4549, column: 22, scope: !2084)
!2435 = !DILocation(line: 4549, column: 20, scope: !2084)
!2436 = !DILocation(line: 4550, column: 11, scope: !2084)
!2437 = !DILocation(line: 4553, column: 18, scope: !2084)
!2438 = !DILocation(line: 4554, column: 11, scope: !2084)
!2439 = !DILocation(line: 4567, column: 15, scope: !2440)
!2440 = distinct !DILexicalBlock(scope: !2084, file: !63, line: 4567, column: 15)
!2441 = !DILocation(line: 4567, column: 25, scope: !2440)
!2442 = !DILocation(line: 4567, column: 30, scope: !2440)
!2443 = !DILocation(line: 4567, column: 37, scope: !2440)
!2444 = !DILocation(line: 4567, column: 22, scope: !2440)
!2445 = !DILocation(line: 4567, column: 15, scope: !2084)
!2446 = !DILocalVariable(name: "p", scope: !2447, file: !63, line: 4569, type: !90)
!2447 = distinct !DILexicalBlock(scope: !2440, file: !63, line: 4568, column: 13)
!2448 = !DILocation(line: 4569, column: 27, scope: !2447)
!2449 = !DILocation(line: 4570, column: 24, scope: !2450)
!2450 = distinct !DILexicalBlock(scope: !2447, file: !63, line: 4570, column: 15)
!2451 = !DILocation(line: 4570, column: 22, scope: !2450)
!2452 = !DILocation(line: 4570, column: 20, scope: !2450)
!2453 = !DILocation(line: 4570, column: 32, scope: !2454)
!2454 = distinct !DILexicalBlock(scope: !2450, file: !63, line: 4570, column: 15)
!2455 = !DILocation(line: 4570, column: 15, scope: !2450)
!2456 = !DILocation(line: 4571, column: 17, scope: !2454)
!2457 = !DILocation(line: 4570, column: 47, scope: !2454)
!2458 = !DILocation(line: 4570, column: 15, scope: !2454)
!2459 = distinct !{!2459, !2455, !2460}
!2460 = !DILocation(line: 4571, column: 17, scope: !2450)
!2461 = !DILocation(line: 4572, column: 27, scope: !2447)
!2462 = !DILocation(line: 4572, column: 26, scope: !2447)
!2463 = !DILocation(line: 4572, column: 29, scope: !2447)
!2464 = !DILocation(line: 4572, column: 22, scope: !2447)
!2465 = !DILocation(line: 4573, column: 13, scope: !2447)
!2466 = !DILocation(line: 4574, column: 11, scope: !2084)
!2467 = !DILocation(line: 4577, column: 19, scope: !2084)
!2468 = !DILocation(line: 4578, column: 11, scope: !2084)
!2469 = !DILocation(line: 4580, column: 9, scope: !2084)
!2470 = !DILocation(line: 4582, column: 9, scope: !2084)
!2471 = !DILocation(line: 4585, column: 11, scope: !2084)
!2472 = distinct !{!2472, !2025, !2473}
!2473 = !DILocation(line: 4587, column: 5, scope: !712)
!2474 = !DILocation(line: 4589, column: 7, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4589, column: 7)
!2476 = !DILocation(line: 4589, column: 7, scope: !712)
!2477 = !DILocation(line: 4593, column: 11, scope: !2478)
!2478 = distinct !DILexicalBlock(scope: !2479, file: !63, line: 4593, column: 11)
!2479 = distinct !DILexicalBlock(scope: !2475, file: !63, line: 4590, column: 5)
!2480 = !DILocation(line: 4593, column: 11, scope: !2479)
!2481 = !DILocation(line: 4595, column: 24, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2478, file: !63, line: 4594, column: 9)
!2483 = !DILocation(line: 4595, column: 47, scope: !2482)
!2484 = !DILocation(line: 4595, column: 11, scope: !2482)
!2485 = !DILocation(line: 4596, column: 20, scope: !2482)
!2486 = !DILocation(line: 4597, column: 20, scope: !2482)
!2487 = !DILocation(line: 4596, column: 11, scope: !2482)
!2488 = !DILocation(line: 4598, column: 11, scope: !2482)
!2489 = !DILocalVariable(name: "stream", scope: !2479, file: !63, line: 4601, type: !389)
!2490 = !DILocation(line: 4601, column: 13, scope: !2479)
!2491 = !DILocation(line: 4601, column: 30, scope: !2479)
!2492 = !DILocation(line: 4601, column: 22, scope: !2479)
!2493 = !DILocation(line: 4603, column: 7, scope: !2479)
!2494 = !DILocation(line: 4605, column: 26, scope: !2495)
!2495 = distinct !DILexicalBlock(scope: !2479, file: !63, line: 4605, column: 11)
!2496 = !DILocation(line: 4605, column: 13, scope: !2495)
!2497 = !DILocation(line: 4605, column: 11, scope: !2479)
!2498 = !DILocation(line: 4606, column: 9, scope: !2495)
!2499 = !DILocation(line: 4608, column: 16, scope: !2479)
!2500 = !DILocation(line: 4608, column: 24, scope: !2479)
!2501 = !DILocation(line: 4608, column: 7, scope: !2479)
!2502 = !DILocation(line: 4610, column: 15, scope: !2503)
!2503 = distinct !DILexicalBlock(scope: !2479, file: !63, line: 4610, column: 11)
!2504 = !DILocation(line: 4610, column: 11, scope: !2503)
!2505 = !DILocation(line: 4610, column: 11, scope: !2479)
!2506 = !DILocation(line: 4612, column: 17, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2503, file: !63, line: 4611, column: 9)
!2508 = !DILocation(line: 4612, column: 11, scope: !2507)
!2509 = !DILocation(line: 4613, column: 23, scope: !2507)
!2510 = !DILocation(line: 4613, column: 17, scope: !2507)
!2511 = !DILocation(line: 4614, column: 24, scope: !2507)
!2512 = !DILocation(line: 4614, column: 18, scope: !2507)
!2513 = !DILocalVariable(name: "i", scope: !2514, file: !63, line: 4615, type: !52)
!2514 = distinct !DILexicalBlock(scope: !2507, file: !63, line: 4615, column: 11)
!2515 = !DILocation(line: 4615, column: 23, scope: !2514)
!2516 = !DILocation(line: 4615, column: 16, scope: !2514)
!2517 = !DILocation(line: 4615, column: 30, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2514, file: !63, line: 4615, column: 11)
!2519 = !DILocation(line: 4615, column: 34, scope: !2518)
!2520 = !DILocation(line: 4615, column: 32, scope: !2518)
!2521 = !DILocation(line: 4615, column: 11, scope: !2514)
!2522 = !DILocation(line: 4617, column: 19, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2524, file: !63, line: 4617, column: 19)
!2524 = distinct !DILexicalBlock(scope: !2518, file: !63, line: 4616, column: 13)
!2525 = !DILocation(line: 4617, column: 19, scope: !2524)
!2526 = !DILocation(line: 4618, column: 17, scope: !2523)
!2527 = !DILocation(line: 4621, column: 24, scope: !2528)
!2528 = distinct !DILexicalBlock(scope: !2523, file: !63, line: 4621, column: 24)
!2529 = !DILocation(line: 4621, column: 30, scope: !2528)
!2530 = !DILocation(line: 4621, column: 36, scope: !2528)
!2531 = !DILocation(line: 4621, column: 24, scope: !2523)
!2532 = !DILocalVariable(name: "file_number", scope: !2533, file: !63, line: 4626, type: !54)
!2533 = distinct !DILexicalBlock(scope: !2528, file: !63, line: 4622, column: 17)
!2534 = !DILocation(line: 4626, column: 37, scope: !2533)
!2535 = !DILocation(line: 4626, column: 51, scope: !2533)
!2536 = !DILocation(line: 4626, column: 53, scope: !2533)
!2537 = !DILocation(line: 4627, column: 19, scope: !2533)
!2538 = !DILocation(line: 4631, column: 13, scope: !2524)
!2539 = !DILocation(line: 4615, column: 43, scope: !2518)
!2540 = !DILocation(line: 4615, column: 11, scope: !2518)
!2541 = distinct !{!2541, !2521, !2542}
!2542 = !DILocation(line: 4631, column: 13, scope: !2514)
!2543 = !DILocation(line: 4632, column: 9, scope: !2507)
!2544 = !DILocation(line: 4634, column: 9, scope: !2503)
!2545 = !DILocation(line: 4636, column: 5, scope: !2479)
!2546 = !DILocation(line: 4639, column: 14, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4639, column: 3)
!2548 = !DILocation(line: 4639, column: 12, scope: !2547)
!2549 = !DILocation(line: 4639, column: 8, scope: !2547)
!2550 = !DILocation(line: 4639, column: 23, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2547, file: !63, line: 4639, column: 3)
!2552 = !DILocation(line: 4639, column: 3, scope: !2547)
!2553 = !DILocation(line: 4641, column: 32, scope: !2554)
!2554 = distinct !DILexicalBlock(scope: !2555, file: !63, line: 4641, column: 11)
!2555 = distinct !DILexicalBlock(scope: !2551, file: !63, line: 4640, column: 5)
!2556 = !DILocation(line: 4641, column: 11, scope: !2554)
!2557 = !DILocation(line: 4641, column: 37, scope: !2554)
!2558 = !DILocation(line: 4641, column: 41, scope: !2554)
!2559 = !DILocation(line: 4641, column: 46, scope: !2554)
!2560 = !DILocation(line: 4641, column: 11, scope: !2555)
!2561 = !DILocation(line: 4643, column: 30, scope: !2562)
!2562 = distinct !DILexicalBlock(scope: !2554, file: !63, line: 4642, column: 9)
!2563 = !DILocation(line: 4643, column: 11, scope: !2562)
!2564 = !DILocation(line: 4643, column: 16, scope: !2562)
!2565 = !DILocation(line: 4643, column: 23, scope: !2562)
!2566 = !DILocation(line: 4644, column: 33, scope: !2562)
!2567 = !DILocation(line: 4644, column: 11, scope: !2562)
!2568 = !DILocation(line: 4644, column: 16, scope: !2562)
!2569 = !DILocation(line: 4644, column: 26, scope: !2562)
!2570 = !DILocation(line: 4645, column: 35, scope: !2562)
!2571 = !DILocation(line: 4645, column: 11, scope: !2562)
!2572 = !DILocation(line: 4645, column: 16, scope: !2562)
!2573 = !DILocation(line: 4645, column: 28, scope: !2562)
!2574 = !DILocation(line: 4646, column: 35, scope: !2562)
!2575 = !DILocation(line: 4646, column: 11, scope: !2562)
!2576 = !DILocation(line: 4646, column: 16, scope: !2562)
!2577 = !DILocation(line: 4646, column: 28, scope: !2562)
!2578 = !DILocation(line: 4647, column: 29, scope: !2562)
!2579 = !DILocation(line: 4647, column: 11, scope: !2562)
!2580 = !DILocation(line: 4647, column: 16, scope: !2562)
!2581 = !DILocation(line: 4647, column: 22, scope: !2562)
!2582 = !DILocation(line: 4648, column: 31, scope: !2562)
!2583 = !DILocation(line: 4648, column: 11, scope: !2562)
!2584 = !DILocation(line: 4648, column: 16, scope: !2562)
!2585 = !DILocation(line: 4648, column: 24, scope: !2562)
!2586 = !DILocation(line: 4649, column: 39, scope: !2562)
!2587 = !DILocation(line: 4649, column: 11, scope: !2562)
!2588 = !DILocation(line: 4649, column: 16, scope: !2562)
!2589 = !DILocation(line: 4649, column: 32, scope: !2562)
!2590 = !DILocation(line: 4650, column: 37, scope: !2562)
!2591 = !DILocation(line: 4650, column: 11, scope: !2562)
!2592 = !DILocation(line: 4650, column: 16, scope: !2562)
!2593 = !DILocation(line: 4650, column: 30, scope: !2562)
!2594 = !DILocation(line: 4651, column: 31, scope: !2562)
!2595 = !DILocation(line: 4651, column: 11, scope: !2562)
!2596 = !DILocation(line: 4651, column: 16, scope: !2562)
!2597 = !DILocation(line: 4651, column: 24, scope: !2562)
!2598 = !DILocation(line: 4652, column: 30, scope: !2562)
!2599 = !DILocation(line: 4652, column: 11, scope: !2562)
!2600 = !DILocation(line: 4652, column: 16, scope: !2562)
!2601 = !DILocation(line: 4652, column: 23, scope: !2562)
!2602 = !DILocation(line: 4653, column: 31, scope: !2562)
!2603 = !DILocation(line: 4653, column: 11, scope: !2562)
!2604 = !DILocation(line: 4653, column: 16, scope: !2562)
!2605 = !DILocation(line: 4653, column: 24, scope: !2562)
!2606 = !DILocation(line: 4654, column: 9, scope: !2562)
!2607 = !DILocation(line: 4656, column: 22, scope: !2555)
!2608 = !DILocation(line: 4656, column: 27, scope: !2555)
!2609 = !DILocation(line: 4656, column: 19, scope: !2555)
!2610 = !DILocation(line: 4657, column: 5, scope: !2555)
!2611 = !DILocation(line: 4639, column: 34, scope: !2551)
!2612 = !DILocation(line: 4639, column: 39, scope: !2551)
!2613 = !DILocation(line: 4639, column: 32, scope: !2551)
!2614 = !DILocation(line: 4639, column: 3, scope: !2551)
!2615 = distinct !{!2615, !2552, !2616}
!2616 = !DILocation(line: 4657, column: 5, scope: !2547)
!2617 = !DILocation(line: 4659, column: 8, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4659, column: 7)
!2619 = !DILocation(line: 4659, column: 16, scope: !2618)
!2620 = !DILocation(line: 4659, column: 20, scope: !2618)
!2621 = !DILocation(line: 4659, column: 7, scope: !712)
!2622 = !DILocation(line: 4661, column: 17, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !2618, file: !63, line: 4660, column: 5)
!2624 = !DILocation(line: 4662, column: 7, scope: !2623)
!2625 = !DILocation(line: 4663, column: 27, scope: !2623)
!2626 = !DILocation(line: 4663, column: 22, scope: !2623)
!2627 = !DILocation(line: 4663, column: 19, scope: !2623)
!2628 = !DILocation(line: 4664, column: 5, scope: !2623)
!2629 = !DILocation(line: 4666, column: 3, scope: !712)
!2630 = !DILocation(line: 4668, column: 7, scope: !2631)
!2631 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4668, column: 7)
!2632 = !DILocation(line: 4668, column: 7, scope: !712)
!2633 = !DILocation(line: 4670, column: 11, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2635, file: !63, line: 4670, column: 11)
!2635 = distinct !DILexicalBlock(scope: !2631, file: !63, line: 4669, column: 5)
!2636 = !DILocation(line: 4670, column: 21, scope: !2634)
!2637 = !DILocation(line: 4670, column: 24, scope: !2634)
!2638 = !DILocation(line: 4670, column: 11, scope: !2635)
!2639 = !DILocation(line: 4673, column: 22, scope: !2640)
!2640 = distinct !DILexicalBlock(scope: !2634, file: !63, line: 4671, column: 9)
!2641 = !DILocation(line: 4673, column: 34, scope: !2640)
!2642 = !DILocation(line: 4673, column: 21, scope: !2640)
!2643 = !DILocation(line: 4673, column: 19, scope: !2640)
!2644 = !DILocation(line: 4674, column: 11, scope: !2640)
!2645 = !DILocation(line: 4682, column: 11, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2635, file: !63, line: 4682, column: 11)
!2647 = !DILocation(line: 4682, column: 11, scope: !2635)
!2648 = !DILocation(line: 4683, column: 24, scope: !2646)
!2649 = !DILocation(line: 4683, column: 22, scope: !2646)
!2650 = !DILocation(line: 4683, column: 21, scope: !2646)
!2651 = !DILocation(line: 4683, column: 19, scope: !2646)
!2652 = !DILocation(line: 4683, column: 9, scope: !2646)
!2653 = !DILocation(line: 4684, column: 13, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2635, file: !63, line: 4684, column: 11)
!2655 = !DILocation(line: 4684, column: 11, scope: !2635)
!2656 = !DILocation(line: 4685, column: 30, scope: !2654)
!2657 = !DILocation(line: 4685, column: 11, scope: !2654)
!2658 = !DILocation(line: 4686, column: 11, scope: !2659)
!2659 = distinct !DILexicalBlock(scope: !2635, file: !63, line: 4686, column: 11)
!2660 = !DILocation(line: 4686, column: 11, scope: !2635)
!2661 = !DILocation(line: 4687, column: 22, scope: !2659)
!2662 = !DILocation(line: 4688, column: 23, scope: !2659)
!2663 = !DILocation(line: 4688, column: 16, scope: !2659)
!2664 = !DILocation(line: 4687, column: 9, scope: !2659)
!2665 = !DILocation(line: 4691, column: 16, scope: !2659)
!2666 = !DILocation(line: 4690, column: 9, scope: !2659)
!2667 = !DILocation(line: 4693, column: 28, scope: !2635)
!2668 = !DILocation(line: 4693, column: 7, scope: !2635)
!2669 = !DILocation(line: 4694, column: 5, scope: !2635)
!2670 = !DILocation(line: 4696, column: 18, scope: !712)
!2671 = !DILocation(line: 4696, column: 11, scope: !712)
!2672 = !DILocation(line: 4698, column: 7, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4698, column: 7)
!2674 = !DILocation(line: 4698, column: 7, scope: !712)
!2675 = !DILocation(line: 4699, column: 28, scope: !2673)
!2676 = !DILocation(line: 4699, column: 5, scope: !2673)
!2677 = !DILocation(line: 4701, column: 7, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4701, column: 7)
!2679 = !DILocation(line: 4701, column: 22, scope: !2678)
!2680 = !DILocation(line: 4701, column: 7, scope: !712)
!2681 = !DILocalVariable(name: "tmp_dir", scope: !2682, file: !63, line: 4703, type: !90)
!2682 = distinct !DILexicalBlock(scope: !2678, file: !63, line: 4702, column: 5)
!2683 = !DILocation(line: 4703, column: 19, scope: !2682)
!2684 = !DILocation(line: 4703, column: 29, scope: !2682)
!2685 = !DILocation(line: 4704, column: 21, scope: !2682)
!2686 = !DILocation(line: 4704, column: 31, scope: !2682)
!2687 = !DILocation(line: 4704, column: 7, scope: !2682)
!2688 = !DILocation(line: 4705, column: 5, scope: !2682)
!2689 = !DILocation(line: 4707, column: 7, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4707, column: 7)
!2691 = !DILocation(line: 4707, column: 14, scope: !2690)
!2692 = !DILocation(line: 4707, column: 7, scope: !712)
!2693 = !DILocation(line: 4709, column: 14, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2690, file: !63, line: 4708, column: 5)
!2695 = !DILocation(line: 4710, column: 13, scope: !2694)
!2696 = !DILocation(line: 4710, column: 7, scope: !2694)
!2697 = !DILocation(line: 4711, column: 15, scope: !2694)
!2698 = !DILocation(line: 4711, column: 13, scope: !2694)
!2699 = !DILocation(line: 4712, column: 8, scope: !2694)
!2700 = !DILocation(line: 4712, column: 14, scope: !2694)
!2701 = !DILocation(line: 4713, column: 5, scope: !2694)
!2702 = !DILocation(line: 4717, column: 11, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4717, column: 7)
!2704 = !DILocation(line: 4717, column: 9, scope: !2703)
!2705 = !DILocation(line: 4717, column: 7, scope: !712)
!2706 = !DILocation(line: 4718, column: 17, scope: !2703)
!2707 = !DILocation(line: 4718, column: 15, scope: !2703)
!2708 = !DILocation(line: 4718, column: 5, scope: !2703)
!2709 = !DILocation(line: 4720, column: 7, scope: !2710)
!2710 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4720, column: 7)
!2711 = !DILocation(line: 4720, column: 7, scope: !712)
!2712 = !DILocation(line: 4722, column: 11, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2714, file: !63, line: 4722, column: 11)
!2714 = distinct !DILexicalBlock(scope: !2710, file: !63, line: 4721, column: 5)
!2715 = !DILocation(line: 4722, column: 18, scope: !2713)
!2716 = !DILocation(line: 4722, column: 11, scope: !2714)
!2717 = !DILocation(line: 4723, column: 9, scope: !2713)
!2718 = !DILocation(line: 4726, column: 11, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2714, file: !63, line: 4726, column: 11)
!2720 = !DILocation(line: 4726, column: 11, scope: !2714)
!2721 = !DILocation(line: 4729, column: 21, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2719, file: !63, line: 4727, column: 9)
!2723 = !DILocation(line: 4729, column: 19, scope: !2722)
!2724 = !DILocation(line: 4730, column: 11, scope: !2722)
!2725 = !DILocation(line: 4735, column: 21, scope: !2714)
!2726 = !DILocation(line: 4735, column: 31, scope: !2714)
!2727 = !DILocation(line: 4735, column: 14, scope: !2714)
!2728 = !DILocation(line: 4735, column: 7, scope: !2714)
!2729 = !DILocation(line: 4739, column: 17, scope: !712)
!2730 = !DILocation(line: 4739, column: 24, scope: !712)
!2731 = !DILocation(line: 4739, column: 3, scope: !712)
!2732 = !DILocation(line: 4742, column: 17, scope: !712)
!2733 = !DILocation(line: 4742, column: 3, scope: !712)
!2734 = !DILocation(line: 4744, column: 7, scope: !2735)
!2735 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4744, column: 7)
!2736 = !DILocation(line: 4744, column: 7, scope: !712)
!2737 = !DILocalVariable(name: "sortfiles", scope: !2738, file: !63, line: 4746, type: !402)
!2738 = distinct !DILexicalBlock(scope: !2735, file: !63, line: 4745, column: 5)
!2739 = !DILocation(line: 4746, column: 24, scope: !2738)
!2740 = !DILocation(line: 4746, column: 45, scope: !2738)
!2741 = !DILocation(line: 4746, column: 36, scope: !2738)
!2742 = !DILocalVariable(name: "i", scope: !2743, file: !63, line: 4748, type: !52)
!2743 = distinct !DILexicalBlock(scope: !2738, file: !63, line: 4748, column: 7)
!2744 = !DILocation(line: 4748, column: 19, scope: !2743)
!2745 = !DILocation(line: 4748, column: 12, scope: !2743)
!2746 = !DILocation(line: 4748, column: 26, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2743, file: !63, line: 4748, column: 7)
!2748 = !DILocation(line: 4748, column: 30, scope: !2747)
!2749 = !DILocation(line: 4748, column: 28, scope: !2747)
!2750 = !DILocation(line: 4748, column: 7, scope: !2743)
!2751 = !DILocation(line: 4749, column: 29, scope: !2747)
!2752 = !DILocation(line: 4749, column: 35, scope: !2747)
!2753 = !DILocation(line: 4749, column: 9, scope: !2747)
!2754 = !DILocation(line: 4749, column: 19, scope: !2747)
!2755 = !DILocation(line: 4749, column: 22, scope: !2747)
!2756 = !DILocation(line: 4749, column: 27, scope: !2747)
!2757 = !DILocation(line: 4748, column: 38, scope: !2747)
!2758 = !DILocation(line: 4748, column: 7, scope: !2747)
!2759 = distinct !{!2759, !2750, !2760}
!2760 = !DILocation(line: 4749, column: 36, scope: !2743)
!2761 = !DILocation(line: 4751, column: 14, scope: !2738)
!2762 = !DILocation(line: 4751, column: 28, scope: !2738)
!2763 = !DILocation(line: 4751, column: 36, scope: !2738)
!2764 = !DILocation(line: 4751, column: 7, scope: !2738)
!2765 = !DILocation(line: 4753, column: 5, scope: !2738)
!2766 = !DILocation(line: 4756, column: 12, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2768, file: !63, line: 4756, column: 11)
!2768 = distinct !DILexicalBlock(scope: !2735, file: !63, line: 4755, column: 5)
!2769 = !DILocation(line: 4756, column: 11, scope: !2768)
!2770 = !DILocalVariable(name: "np", scope: !2771, file: !63, line: 4758, type: !54)
!2771 = distinct !DILexicalBlock(scope: !2767, file: !63, line: 4757, column: 9)
!2772 = !DILocation(line: 4758, column: 29, scope: !2771)
!2773 = !DILocation(line: 4758, column: 34, scope: !2771)
!2774 = !DILocation(line: 4759, column: 22, scope: !2771)
!2775 = !DILocation(line: 4759, column: 20, scope: !2771)
!2776 = !DILocation(line: 4760, column: 9, scope: !2771)
!2777 = !DILocalVariable(name: "nthreads_max", scope: !2768, file: !63, line: 4763, type: !52)
!2778 = !DILocation(line: 4763, column: 14, scope: !2768)
!2779 = !DILocation(line: 4764, column: 18, scope: !2768)
!2780 = !DILocation(line: 4764, column: 16, scope: !2768)
!2781 = !DILocation(line: 4766, column: 13, scope: !2768)
!2782 = !DILocation(line: 4766, column: 20, scope: !2768)
!2783 = !DILocation(line: 4766, column: 28, scope: !2768)
!2784 = !DILocation(line: 4766, column: 37, scope: !2768)
!2785 = !DILocation(line: 4766, column: 7, scope: !2768)
!2786 = !DILocation(line: 4776, column: 7, scope: !2787)
!2787 = distinct !DILexicalBlock(scope: !712, file: !63, line: 4776, column: 7)
!2788 = !DILocation(line: 4776, column: 23, scope: !2787)
!2789 = !DILocation(line: 4776, column: 34, scope: !2787)
!2790 = !DILocation(line: 4776, column: 26, scope: !2787)
!2791 = !DILocation(line: 4776, column: 41, scope: !2787)
!2792 = !DILocation(line: 4776, column: 7, scope: !712)
!2793 = !DILocation(line: 4777, column: 15, scope: !2787)
!2794 = !DILocation(line: 4777, column: 5, scope: !2787)
!2795 = !DILocation(line: 4779, column: 3, scope: !712)
!2796 = !DILocation(line: 4780, column: 1, scope: !712)
!2797 = distinct !DISubprogram(name: "initialize_exit_failure", scope: !429, file: !429, line: 99, type: !83, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2798 = !DILocalVariable(name: "status", arg: 1, scope: !2797, file: !429, line: 99, type: !5)
!2799 = !DILocation(line: 99, column: 30, scope: !2797)
!2800 = !DILocation(line: 101, column: 7, scope: !2801)
!2801 = distinct !DILexicalBlock(scope: !2797, file: !429, line: 101, column: 7)
!2802 = !DILocation(line: 101, column: 14, scope: !2801)
!2803 = !DILocation(line: 101, column: 7, scope: !2797)
!2804 = !DILocation(line: 102, column: 20, scope: !2801)
!2805 = !DILocation(line: 102, column: 18, scope: !2801)
!2806 = !DILocation(line: 102, column: 5, scope: !2801)
!2807 = !DILocation(line: 103, column: 1, scope: !2797)
!2808 = distinct !DISubprogram(name: "to_uchar", scope: !429, file: !429, line: 156, type: !2809, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{!535, !8}
!2811 = !DILocalVariable(name: "ch", arg: 1, scope: !2808, file: !429, line: 156, type: !8)
!2812 = !DILocation(line: 156, column: 44, scope: !2808)
!2813 = !DILocation(line: 156, column: 57, scope: !2808)
!2814 = !DILocation(line: 156, column: 50, scope: !2808)
!2815 = distinct !DISubprogram(name: "inittables", scope: !63, file: !63, line: 1287, type: !235, scopeLine: 1288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2816 = !DILocalVariable(name: "i", scope: !2815, file: !63, line: 1289, type: !52)
!2817 = !DILocation(line: 1289, column: 10, scope: !2815)
!2818 = !DILocation(line: 1291, column: 10, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2815, file: !63, line: 1291, column: 3)
!2820 = !DILocation(line: 1291, column: 8, scope: !2819)
!2821 = !DILocation(line: 1291, column: 15, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2819, file: !63, line: 1291, column: 3)
!2823 = !DILocation(line: 1291, column: 17, scope: !2822)
!2824 = !DILocation(line: 1291, column: 3, scope: !2819)
!2825 = !DILocation(line: 1293, column: 30, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2822, file: !63, line: 1292, column: 5)
!2827 = !DILocation(line: 1293, column: 19, scope: !2826)
!2828 = !DILocation(line: 1293, column: 14, scope: !2826)
!2829 = !DILocation(line: 1293, column: 7, scope: !2826)
!2830 = !DILocation(line: 1293, column: 17, scope: !2826)
!2831 = !DILocation(line: 1294, column: 26, scope: !2826)
!2832 = !DILocation(line: 1294, column: 24, scope: !2826)
!2833 = !DILocation(line: 1294, column: 19, scope: !2826)
!2834 = !DILocation(line: 1294, column: 7, scope: !2826)
!2835 = !DILocation(line: 1294, column: 22, scope: !2826)
!2836 = !DILocation(line: 1295, column: 28, scope: !2826)
!2837 = !DILocation(line: 1295, column: 40, scope: !2826)
!2838 = !DILocation(line: 1295, column: 56, scope: !2826)
!2839 = !DILocation(line: 1295, column: 45, scope: !2826)
!2840 = !DILocation(line: 1295, column: 43, scope: !2826)
!2841 = !DILocation(line: 0, scope: !2826)
!2842 = !DILocation(line: 1295, column: 21, scope: !2826)
!2843 = !DILocation(line: 1295, column: 7, scope: !2826)
!2844 = !DILocation(line: 1295, column: 24, scope: !2826)
!2845 = !DILocation(line: 1296, column: 34, scope: !2826)
!2846 = !DILocation(line: 1296, column: 25, scope: !2826)
!2847 = !DILocation(line: 1296, column: 20, scope: !2826)
!2848 = !DILocation(line: 1296, column: 7, scope: !2826)
!2849 = !DILocation(line: 1296, column: 23, scope: !2826)
!2850 = !DILocation(line: 1297, column: 5, scope: !2826)
!2851 = !DILocation(line: 1291, column: 30, scope: !2822)
!2852 = !DILocation(line: 1291, column: 3, scope: !2822)
!2853 = distinct !{!2853, !2824, !2854}
!2854 = !DILocation(line: 1297, column: 5, scope: !2819)
!2855 = !DILocation(line: 1301, column: 7, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2815, file: !63, line: 1301, column: 7)
!2857 = !DILocation(line: 1301, column: 7, scope: !2815)
!2858 = !DILocation(line: 1303, column: 14, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2860, file: !63, line: 1303, column: 7)
!2860 = distinct !DILexicalBlock(scope: !2856, file: !63, line: 1302, column: 5)
!2861 = !DILocation(line: 1303, column: 12, scope: !2859)
!2862 = !DILocation(line: 1303, column: 19, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2859, file: !63, line: 1303, column: 7)
!2864 = !DILocation(line: 1303, column: 21, scope: !2863)
!2865 = !DILocation(line: 1303, column: 7, scope: !2859)
!2866 = !DILocalVariable(name: "s", scope: !2867, file: !63, line: 1305, type: !90)
!2867 = distinct !DILexicalBlock(scope: !2863, file: !63, line: 1304, column: 9)
!2868 = !DILocation(line: 1305, column: 23, scope: !2867)
!2869 = !DILocalVariable(name: "s_len", scope: !2867, file: !63, line: 1306, type: !52)
!2870 = !DILocation(line: 1306, column: 18, scope: !2867)
!2871 = !DILocalVariable(name: "j", scope: !2867, file: !63, line: 1307, type: !52)
!2872 = !DILocation(line: 1307, column: 18, scope: !2867)
!2873 = !DILocalVariable(name: "k", scope: !2867, file: !63, line: 1307, type: !52)
!2874 = !DILocation(line: 1307, column: 21, scope: !2867)
!2875 = !DILocalVariable(name: "name", scope: !2867, file: !63, line: 1308, type: !7)
!2876 = !DILocation(line: 1308, column: 17, scope: !2867)
!2877 = !DILocation(line: 1310, column: 38, scope: !2867)
!2878 = !DILocation(line: 1310, column: 36, scope: !2867)
!2879 = !DILocation(line: 1310, column: 28, scope: !2867)
!2880 = !DILocation(line: 1310, column: 15, scope: !2867)
!2881 = !DILocation(line: 1310, column: 13, scope: !2867)
!2882 = !DILocation(line: 1311, column: 27, scope: !2867)
!2883 = !DILocation(line: 1311, column: 19, scope: !2867)
!2884 = !DILocation(line: 1311, column: 17, scope: !2867)
!2885 = !DILocation(line: 1312, column: 46, scope: !2867)
!2886 = !DILocation(line: 1312, column: 52, scope: !2867)
!2887 = !DILocation(line: 1312, column: 37, scope: !2867)
!2888 = !DILocation(line: 1312, column: 35, scope: !2867)
!2889 = !DILocation(line: 1312, column: 20, scope: !2867)
!2890 = !DILocation(line: 1312, column: 11, scope: !2867)
!2891 = !DILocation(line: 1312, column: 23, scope: !2867)
!2892 = !DILocation(line: 1312, column: 28, scope: !2867)
!2893 = !DILocation(line: 1313, column: 29, scope: !2867)
!2894 = !DILocation(line: 1313, column: 31, scope: !2867)
!2895 = !DILocation(line: 1313, column: 20, scope: !2867)
!2896 = !DILocation(line: 1313, column: 11, scope: !2867)
!2897 = !DILocation(line: 1313, column: 23, scope: !2867)
!2898 = !DILocation(line: 1313, column: 27, scope: !2867)
!2899 = !DILocation(line: 1315, column: 22, scope: !2900)
!2900 = distinct !DILexicalBlock(scope: !2867, file: !63, line: 1315, column: 11)
!2901 = !DILocation(line: 1315, column: 18, scope: !2900)
!2902 = !DILocation(line: 1315, column: 16, scope: !2900)
!2903 = !DILocation(line: 1315, column: 27, scope: !2904)
!2904 = distinct !DILexicalBlock(scope: !2900, file: !63, line: 1315, column: 11)
!2905 = !DILocation(line: 1315, column: 31, scope: !2904)
!2906 = !DILocation(line: 1315, column: 29, scope: !2904)
!2907 = !DILocation(line: 1315, column: 11, scope: !2900)
!2908 = !DILocation(line: 1316, column: 19, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2904, file: !63, line: 1316, column: 17)
!2910 = !DILocation(line: 1316, column: 17, scope: !2904)
!2911 = !DILocation(line: 1317, column: 50, scope: !2909)
!2912 = !DILocation(line: 1317, column: 52, scope: !2909)
!2913 = !DILocation(line: 1317, column: 40, scope: !2909)
!2914 = !DILocation(line: 1317, column: 27, scope: !2909)
!2915 = !DILocation(line: 1317, column: 15, scope: !2909)
!2916 = !DILocation(line: 1317, column: 21, scope: !2909)
!2917 = !DILocation(line: 1317, column: 25, scope: !2909)
!2918 = !DILocation(line: 1315, column: 39, scope: !2904)
!2919 = !DILocation(line: 1315, column: 11, scope: !2904)
!2920 = distinct !{!2920, !2907, !2921}
!2921 = !DILocation(line: 1317, column: 55, scope: !2900)
!2922 = !DILocation(line: 1318, column: 11, scope: !2867)
!2923 = !DILocation(line: 1318, column: 16, scope: !2867)
!2924 = !DILocation(line: 1318, column: 19, scope: !2867)
!2925 = !DILocation(line: 1319, column: 9, scope: !2867)
!2926 = !DILocation(line: 1303, column: 41, scope: !2863)
!2927 = !DILocation(line: 1303, column: 7, scope: !2863)
!2928 = distinct !{!2928, !2865, !2929}
!2929 = !DILocation(line: 1319, column: 9, scope: !2859)
!2930 = !DILocation(line: 1320, column: 7, scope: !2860)
!2931 = !DILocation(line: 1321, column: 5, scope: !2860)
!2932 = !DILocation(line: 1323, column: 1, scope: !2815)
!2933 = distinct !DISubprogram(name: "sighandler", scope: !63, file: !63, line: 4113, type: !83, scopeLine: 4114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2934 = !DILocalVariable(name: "sig", arg: 1, scope: !2933, file: !63, line: 4113, type: !5)
!2935 = !DILocation(line: 4113, column: 17, scope: !2933)
!2936 = !DILocation(line: 4118, column: 3, scope: !2933)
!2937 = !DILocation(line: 4120, column: 11, scope: !2933)
!2938 = !DILocation(line: 4120, column: 3, scope: !2933)
!2939 = !DILocation(line: 4121, column: 10, scope: !2933)
!2940 = !DILocation(line: 4121, column: 3, scope: !2933)
!2941 = !DILocation(line: 4122, column: 1, scope: !2933)
!2942 = distinct !DISubprogram(name: "exit_cleanup", scope: !63, file: !63, line: 819, type: !235, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cs_status", file: !63, line: 625, size: 1088, elements: !2944)
!2944 = !{!2945, !2946}
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "valid", scope: !2943, file: !63, line: 627, baseType: !162, size: 8)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "sigs", scope: !2943, file: !63, line: 628, baseType: !214, size: 1024, offset: 64)
!2947 = !DILocation(line: 821, column: 7, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2942, file: !63, line: 821, column: 7)
!2949 = !DILocation(line: 821, column: 7, scope: !2942)
!2950 = !DILocalVariable(name: "cs", scope: !2951, file: !63, line: 825, type: !2943)
!2951 = distinct !DILexicalBlock(scope: !2948, file: !63, line: 822, column: 5)
!2952 = !DILocation(line: 825, column: 24, scope: !2951)
!2953 = !DILocation(line: 826, column: 7, scope: !2951)
!2954 = !DILocation(line: 827, column: 7, scope: !2951)
!2955 = !DILocation(line: 828, column: 7, scope: !2951)
!2956 = !DILocation(line: 829, column: 5, scope: !2951)
!2957 = !DILocation(line: 831, column: 3, scope: !2942)
!2958 = !DILocation(line: 832, column: 1, scope: !2942)
!2959 = distinct !DISubprogram(name: "key_init", scope: !63, file: !63, line: 4186, type: !2960, scopeLine: 4187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2960 = !DISubroutineType(types: !2961)
!2961 = !{!152, !152}
!2962 = !DILocalVariable(name: "key", arg: 1, scope: !2959, file: !63, line: 4186, type: !152)
!2963 = !DILocation(line: 4186, column: 28, scope: !2959)
!2964 = !DILocation(line: 4188, column: 11, scope: !2959)
!2965 = !DILocation(line: 4188, column: 3, scope: !2959)
!2966 = !DILocation(line: 4189, column: 3, scope: !2959)
!2967 = !DILocation(line: 4189, column: 8, scope: !2959)
!2968 = !DILocation(line: 4189, column: 14, scope: !2959)
!2969 = !DILocation(line: 4190, column: 10, scope: !2959)
!2970 = !DILocation(line: 4190, column: 3, scope: !2959)
!2971 = distinct !DISubprogram(name: "parse_field_count", scope: !63, file: !63, line: 4082, type: !2972, scopeLine: 4083, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!2972 = !DISubroutineType(types: !2973)
!2973 = !{!90, !90, !618, !90}
!2974 = !DILocalVariable(name: "string", arg: 1, scope: !2971, file: !63, line: 4082, type: !90)
!2975 = !DILocation(line: 4082, column: 32, scope: !2971)
!2976 = !DILocalVariable(name: "val", arg: 2, scope: !2971, file: !63, line: 4082, type: !618)
!2977 = !DILocation(line: 4082, column: 48, scope: !2971)
!2978 = !DILocalVariable(name: "msgid", arg: 3, scope: !2971, file: !63, line: 4082, type: !90)
!2979 = !DILocation(line: 4082, column: 65, scope: !2971)
!2980 = !DILocalVariable(name: "suffix", scope: !2971, file: !63, line: 4084, type: !7)
!2981 = !DILocation(line: 4084, column: 9, scope: !2971)
!2982 = !DILocalVariable(name: "n", scope: !2971, file: !63, line: 4085, type: !464)
!2983 = !DILocation(line: 4085, column: 13, scope: !2971)
!2984 = !DILocation(line: 4087, column: 23, scope: !2971)
!2985 = !DILocation(line: 4087, column: 11, scope: !2971)
!2986 = !DILocation(line: 4087, column: 3, scope: !2971)
!2987 = !DILocation(line: 4091, column: 14, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2971, file: !63, line: 4088, column: 5)
!2989 = !DILocation(line: 4091, column: 8, scope: !2988)
!2990 = !DILocation(line: 4091, column: 12, scope: !2988)
!2991 = !DILocation(line: 4092, column: 12, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2988, file: !63, line: 4092, column: 11)
!2993 = !DILocation(line: 4092, column: 11, scope: !2992)
!2994 = !DILocation(line: 4092, column: 19, scope: !2992)
!2995 = !DILocation(line: 4092, column: 16, scope: !2992)
!2996 = !DILocation(line: 4092, column: 11, scope: !2988)
!2997 = !DILocation(line: 4093, column: 9, scope: !2992)
!2998 = !DILocation(line: 4094, column: 7, scope: !2988)
!2999 = !DILocation(line: 4097, column: 8, scope: !2988)
!3000 = !DILocation(line: 4097, column: 12, scope: !2988)
!3001 = !DILocation(line: 4098, column: 7, scope: !2988)
!3002 = !DILocation(line: 4101, column: 11, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !2988, file: !63, line: 4101, column: 11)
!3004 = !DILocation(line: 4101, column: 11, scope: !2988)
!3005 = !DILocation(line: 4102, column: 9, scope: !3003)
!3006 = !DILocation(line: 4104, column: 7, scope: !2988)
!3007 = !DILocation(line: 4107, column: 10, scope: !2971)
!3008 = !DILocation(line: 4107, column: 3, scope: !2971)
!3009 = !DILocation(line: 4108, column: 1, scope: !2971)
!3010 = distinct !DISubprogram(name: "set_ordering", scope: !63, file: !63, line: 4130, type: !3011, scopeLine: 4131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3011 = !DISubroutineType(types: !3012)
!3012 = !{!7, !90, !152, !65}
!3013 = !DILocalVariable(name: "s", arg: 1, scope: !3010, file: !63, line: 4130, type: !90)
!3014 = !DILocation(line: 4130, column: 27, scope: !3010)
!3015 = !DILocalVariable(name: "key", arg: 2, scope: !3010, file: !63, line: 4130, type: !152)
!3016 = !DILocation(line: 4130, column: 47, scope: !3010)
!3017 = !DILocalVariable(name: "blanktype", arg: 3, scope: !3010, file: !63, line: 4130, type: !65)
!3018 = !DILocation(line: 4130, column: 67, scope: !3010)
!3019 = !DILocation(line: 4132, column: 3, scope: !3010)
!3020 = !DILocation(line: 4132, column: 11, scope: !3010)
!3021 = !DILocation(line: 4132, column: 10, scope: !3010)
!3022 = !DILocation(line: 4134, column: 16, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3010, file: !63, line: 4133, column: 5)
!3024 = !DILocation(line: 4134, column: 15, scope: !3023)
!3025 = !DILocation(line: 4134, column: 7, scope: !3023)
!3026 = !DILocation(line: 4137, column: 15, scope: !3027)
!3027 = distinct !DILexicalBlock(scope: !3028, file: !63, line: 4137, column: 15)
!3028 = distinct !DILexicalBlock(scope: !3023, file: !63, line: 4135, column: 9)
!3029 = !DILocation(line: 4137, column: 25, scope: !3027)
!3030 = !DILocation(line: 4137, column: 37, scope: !3027)
!3031 = !DILocation(line: 4137, column: 40, scope: !3027)
!3032 = !DILocation(line: 4137, column: 50, scope: !3027)
!3033 = !DILocation(line: 4137, column: 15, scope: !3028)
!3034 = !DILocation(line: 4138, column: 13, scope: !3027)
!3035 = !DILocation(line: 4138, column: 18, scope: !3027)
!3036 = !DILocation(line: 4138, column: 30, scope: !3027)
!3037 = !DILocation(line: 4139, column: 15, scope: !3038)
!3038 = distinct !DILexicalBlock(scope: !3028, file: !63, line: 4139, column: 15)
!3039 = !DILocation(line: 4139, column: 25, scope: !3038)
!3040 = !DILocation(line: 4139, column: 35, scope: !3038)
!3041 = !DILocation(line: 4139, column: 38, scope: !3038)
!3042 = !DILocation(line: 4139, column: 48, scope: !3038)
!3043 = !DILocation(line: 4139, column: 15, scope: !3028)
!3044 = !DILocation(line: 4140, column: 13, scope: !3038)
!3045 = !DILocation(line: 4140, column: 18, scope: !3038)
!3046 = !DILocation(line: 4140, column: 30, scope: !3038)
!3047 = !DILocation(line: 4141, column: 11, scope: !3028)
!3048 = !DILocation(line: 4143, column: 11, scope: !3028)
!3049 = !DILocation(line: 4143, column: 16, scope: !3028)
!3050 = !DILocation(line: 4143, column: 23, scope: !3028)
!3051 = !DILocation(line: 4144, column: 11, scope: !3028)
!3052 = !DILocation(line: 4146, column: 11, scope: !3028)
!3053 = !DILocation(line: 4146, column: 16, scope: !3028)
!3054 = !DILocation(line: 4146, column: 26, scope: !3028)
!3055 = !DILocation(line: 4147, column: 11, scope: !3028)
!3056 = !DILocation(line: 4149, column: 11, scope: !3028)
!3057 = !DILocation(line: 4149, column: 16, scope: !3028)
!3058 = !DILocation(line: 4149, column: 32, scope: !3028)
!3059 = !DILocation(line: 4150, column: 11, scope: !3028)
!3060 = !DILocation(line: 4152, column: 11, scope: !3028)
!3061 = !DILocation(line: 4152, column: 16, scope: !3028)
!3062 = !DILocation(line: 4152, column: 30, scope: !3028)
!3063 = !DILocation(line: 4153, column: 11, scope: !3028)
!3064 = !DILocation(line: 4157, column: 17, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3028, file: !63, line: 4157, column: 15)
!3066 = !DILocation(line: 4157, column: 22, scope: !3065)
!3067 = !DILocation(line: 4157, column: 15, scope: !3028)
!3068 = !DILocation(line: 4158, column: 13, scope: !3065)
!3069 = !DILocation(line: 4158, column: 18, scope: !3065)
!3070 = !DILocation(line: 4158, column: 25, scope: !3065)
!3071 = !DILocation(line: 4159, column: 11, scope: !3028)
!3072 = !DILocation(line: 4161, column: 11, scope: !3028)
!3073 = !DILocation(line: 4161, column: 16, scope: !3028)
!3074 = !DILocation(line: 4161, column: 22, scope: !3028)
!3075 = !DILocation(line: 4162, column: 11, scope: !3028)
!3076 = !DILocation(line: 4164, column: 11, scope: !3028)
!3077 = !DILocation(line: 4164, column: 16, scope: !3028)
!3078 = !DILocation(line: 4164, column: 24, scope: !3028)
!3079 = !DILocation(line: 4165, column: 11, scope: !3028)
!3080 = !DILocation(line: 4167, column: 11, scope: !3028)
!3081 = !DILocation(line: 4167, column: 16, scope: !3028)
!3082 = !DILocation(line: 4167, column: 23, scope: !3028)
!3083 = !DILocation(line: 4168, column: 11, scope: !3028)
!3084 = !DILocation(line: 4170, column: 11, scope: !3028)
!3085 = !DILocation(line: 4170, column: 16, scope: !3028)
!3086 = !DILocation(line: 4170, column: 24, scope: !3028)
!3087 = !DILocation(line: 4171, column: 11, scope: !3028)
!3088 = !DILocation(line: 4173, column: 11, scope: !3028)
!3089 = !DILocation(line: 4173, column: 16, scope: !3028)
!3090 = !DILocation(line: 4173, column: 24, scope: !3028)
!3091 = !DILocation(line: 4174, column: 11, scope: !3028)
!3092 = !DILocation(line: 4176, column: 27, scope: !3028)
!3093 = !DILocation(line: 4176, column: 11, scope: !3028)
!3094 = !DILocation(line: 4178, column: 7, scope: !3023)
!3095 = distinct !{!3095, !3019, !3096}
!3096 = !DILocation(line: 4179, column: 5, scope: !3010)
!3097 = !DILocation(line: 4180, column: 19, scope: !3010)
!3098 = !DILocation(line: 4180, column: 3, scope: !3010)
!3099 = !DILocation(line: 4181, column: 1, scope: !3010)
!3100 = distinct !DISubprogram(name: "badfieldspec", scope: !63, file: !63, line: 4040, type: !3101, scopeLine: 4041, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3101 = !DISubroutineType(types: !3102)
!3102 = !{null, !90, !90}
!3103 = !DILocalVariable(name: "spec", arg: 1, scope: !3100, file: !63, line: 4040, type: !90)
!3104 = !DILocation(line: 4040, column: 27, scope: !3100)
!3105 = !DILocalVariable(name: "msgid", arg: 2, scope: !3100, file: !63, line: 4040, type: !90)
!3106 = !DILocation(line: 4040, column: 45, scope: !3100)
!3107 = !DILocation(line: 4042, column: 3, scope: !3100)
!3108 = distinct !DISubprogram(name: "insertkey", scope: !63, file: !63, line: 4024, type: !3109, scopeLine: 4025, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3109 = !DISubroutineType(types: !3110)
!3110 = !{null, !152}
!3111 = !DILocalVariable(name: "key_arg", arg: 1, scope: !3108, file: !63, line: 4024, type: !152)
!3112 = !DILocation(line: 4024, column: 29, scope: !3108)
!3113 = !DILocalVariable(name: "p", scope: !3108, file: !63, line: 4026, type: !472)
!3114 = !DILocation(line: 4026, column: 21, scope: !3108)
!3115 = !DILocalVariable(name: "key", scope: !3108, file: !63, line: 4027, type: !152)
!3116 = !DILocation(line: 4027, column: 20, scope: !3108)
!3117 = !DILocation(line: 4027, column: 35, scope: !3108)
!3118 = !DILocation(line: 4027, column: 26, scope: !3108)
!3119 = !DILocation(line: 4029, column: 10, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3108, file: !63, line: 4029, column: 3)
!3121 = !DILocation(line: 4029, column: 8, scope: !3120)
!3122 = !DILocation(line: 4029, column: 23, scope: !3123)
!3123 = distinct !DILexicalBlock(scope: !3120, file: !63, line: 4029, column: 3)
!3124 = !DILocation(line: 4029, column: 22, scope: !3123)
!3125 = !DILocation(line: 4029, column: 3, scope: !3120)
!3126 = !DILocation(line: 4030, column: 5, scope: !3123)
!3127 = !DILocation(line: 4029, column: 33, scope: !3123)
!3128 = !DILocation(line: 4029, column: 32, scope: !3123)
!3129 = !DILocation(line: 4029, column: 37, scope: !3123)
!3130 = !DILocation(line: 4029, column: 28, scope: !3123)
!3131 = !DILocation(line: 4029, column: 3, scope: !3123)
!3132 = distinct !{!3132, !3125, !3133}
!3133 = !DILocation(line: 4030, column: 5, scope: !3120)
!3134 = !DILocation(line: 4031, column: 8, scope: !3108)
!3135 = !DILocation(line: 4031, column: 4, scope: !3108)
!3136 = !DILocation(line: 4031, column: 6, scope: !3108)
!3137 = !DILocation(line: 4032, column: 3, scope: !3108)
!3138 = !DILocation(line: 4032, column: 8, scope: !3108)
!3139 = !DILocation(line: 4032, column: 13, scope: !3108)
!3140 = !DILocation(line: 4033, column: 1, scope: !3108)
!3141 = distinct !DISubprogram(name: "incompatible_options", scope: !63, file: !63, line: 4050, type: !431, scopeLine: 4051, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3142 = !DILocalVariable(name: "opts", arg: 1, scope: !3141, file: !63, line: 4050, type: !90)
!3143 = !DILocation(line: 4050, column: 35, scope: !3141)
!3144 = !DILocation(line: 4052, column: 3, scope: !3141)
!3145 = distinct !DISubprogram(name: "specify_nmerge", scope: !63, file: !63, line: 1329, type: !3146, scopeLine: 1330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3146 = !DISubroutineType(types: !3147)
!3147 = !{null, !5, !8, !90}
!3148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit", file: !474, line: 139, size: 128, elements: !3149)
!3149 = !{!3150, !3151}
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !3148, file: !474, line: 142, baseType: !473, size: 64)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !3148, file: !474, line: 144, baseType: !473, size: 64, offset: 64)
!3152 = !DILocalVariable(name: "oi", arg: 1, scope: !3145, file: !63, line: 1329, type: !5)
!3153 = !DILocation(line: 1329, column: 21, scope: !3145)
!3154 = !DILocalVariable(name: "c", arg: 2, scope: !3145, file: !63, line: 1329, type: !8)
!3155 = !DILocation(line: 1329, column: 30, scope: !3145)
!3156 = !DILocalVariable(name: "s", arg: 3, scope: !3145, file: !63, line: 1329, type: !90)
!3157 = !DILocation(line: 1329, column: 45, scope: !3145)
!3158 = !DILocalVariable(name: "n", scope: !3145, file: !63, line: 1331, type: !464)
!3159 = !DILocation(line: 1331, column: 13, scope: !3145)
!3160 = !DILocalVariable(name: "rlimit", scope: !3145, file: !63, line: 1332, type: !3148)
!3161 = !DILocation(line: 1332, column: 17, scope: !3145)
!3162 = !DILocalVariable(name: "e", scope: !3145, file: !63, line: 1333, type: !71)
!3163 = !DILocation(line: 1333, column: 21, scope: !3145)
!3164 = !DILocation(line: 1333, column: 37, scope: !3145)
!3165 = !DILocation(line: 1333, column: 25, scope: !3145)
!3166 = !DILocalVariable(name: "max_nmerge", scope: !3145, file: !63, line: 1338, type: !66)
!3167 = !DILocation(line: 1338, column: 16, scope: !3145)
!3168 = !DILocation(line: 1338, column: 31, scope: !3145)
!3169 = !DILocation(line: 1338, column: 66, scope: !3145)
!3170 = !DILocation(line: 1339, column: 40, scope: !3145)
!3171 = !DILocation(line: 1341, column: 30, scope: !3145)
!3172 = !DILocation(line: 1338, column: 29, scope: !3145)
!3173 = !DILocation(line: 1343, column: 7, scope: !3174)
!3174 = distinct !DILexicalBlock(scope: !3145, file: !63, line: 1343, column: 7)
!3175 = !DILocation(line: 1343, column: 9, scope: !3174)
!3176 = !DILocation(line: 1343, column: 7, scope: !3145)
!3177 = !DILocation(line: 1345, column: 16, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3174, file: !63, line: 1344, column: 5)
!3179 = !DILocation(line: 1345, column: 14, scope: !3178)
!3180 = !DILocation(line: 1346, column: 11, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3178, file: !63, line: 1346, column: 11)
!3182 = !DILocation(line: 1346, column: 21, scope: !3181)
!3183 = !DILocation(line: 1346, column: 18, scope: !3181)
!3184 = !DILocation(line: 1346, column: 11, scope: !3178)
!3185 = !DILocation(line: 1347, column: 11, scope: !3181)
!3186 = !DILocation(line: 1347, column: 9, scope: !3181)
!3187 = !DILocation(line: 1350, column: 15, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3189, file: !63, line: 1350, column: 15)
!3189 = distinct !DILexicalBlock(scope: !3181, file: !63, line: 1349, column: 9)
!3190 = !DILocation(line: 1350, column: 22, scope: !3188)
!3191 = !DILocation(line: 1350, column: 15, scope: !3189)
!3192 = !DILocation(line: 1352, column: 28, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !3188, file: !63, line: 1351, column: 13)
!3194 = !DILocation(line: 1353, column: 35, scope: !3193)
!3195 = !DILocation(line: 1353, column: 22, scope: !3193)
!3196 = !DILocation(line: 1353, column: 39, scope: !3193)
!3197 = !DILocation(line: 1353, column: 52, scope: !3193)
!3198 = !DILocation(line: 1353, column: 45, scope: !3193)
!3199 = !DILocation(line: 1352, column: 15, scope: !3193)
!3200 = !DILocation(line: 1354, column: 15, scope: !3193)
!3201 = !DILocation(line: 1358, column: 20, scope: !3202)
!3202 = distinct !DILexicalBlock(scope: !3188, file: !63, line: 1358, column: 20)
!3203 = !DILocation(line: 1358, column: 33, scope: !3202)
!3204 = !DILocation(line: 1358, column: 31, scope: !3202)
!3205 = !DILocation(line: 1358, column: 20, scope: !3188)
!3206 = !DILocation(line: 1360, column: 17, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3202, file: !63, line: 1359, column: 13)
!3208 = !DILocation(line: 1361, column: 13, scope: !3207)
!3209 = !DILocation(line: 1363, column: 13, scope: !3202)
!3210 = !DILocation(line: 1365, column: 5, scope: !3178)
!3211 = !DILocation(line: 1367, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3145, file: !63, line: 1367, column: 7)
!3213 = !DILocation(line: 1367, column: 9, scope: !3212)
!3214 = !DILocation(line: 1367, column: 7, scope: !3145)
!3215 = !DILocalVariable(name: "max_nmerge_buf", scope: !3216, file: !63, line: 1369, type: !333)
!3216 = distinct !DILexicalBlock(scope: !3212, file: !63, line: 1368, column: 5)
!3217 = !DILocation(line: 1369, column: 12, scope: !3216)
!3218 = !DILocation(line: 1370, column: 20, scope: !3216)
!3219 = !DILocation(line: 1371, column: 27, scope: !3216)
!3220 = !DILocation(line: 1371, column: 14, scope: !3216)
!3221 = !DILocation(line: 1371, column: 31, scope: !3216)
!3222 = !DILocation(line: 1371, column: 44, scope: !3216)
!3223 = !DILocation(line: 1371, column: 37, scope: !3216)
!3224 = !DILocation(line: 1370, column: 7, scope: !3216)
!3225 = !DILocation(line: 1372, column: 7, scope: !3216)
!3226 = !DILocation(line: 1378, column: 20, scope: !3212)
!3227 = !DILocation(line: 1378, column: 23, scope: !3212)
!3228 = !DILocation(line: 1378, column: 27, scope: !3212)
!3229 = !DILocation(line: 1378, column: 44, scope: !3212)
!3230 = !DILocation(line: 1378, column: 5, scope: !3212)
!3231 = distinct !DISubprogram(name: "specify_sort_size", scope: !63, file: !63, line: 1383, type: !3146, scopeLine: 1384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3232 = !DILocalVariable(name: "oi", arg: 1, scope: !3231, file: !63, line: 1383, type: !5)
!3233 = !DILocation(line: 1383, column: 24, scope: !3231)
!3234 = !DILocalVariable(name: "c", arg: 2, scope: !3231, file: !63, line: 1383, type: !8)
!3235 = !DILocation(line: 1383, column: 33, scope: !3231)
!3236 = !DILocalVariable(name: "s", arg: 3, scope: !3231, file: !63, line: 1383, type: !90)
!3237 = !DILocation(line: 1383, column: 48, scope: !3231)
!3238 = !DILocalVariable(name: "n", scope: !3231, file: !63, line: 1385, type: !464)
!3239 = !DILocation(line: 1385, column: 13, scope: !3231)
!3240 = !DILocalVariable(name: "suffix", scope: !3231, file: !63, line: 1386, type: !7)
!3241 = !DILocation(line: 1386, column: 9, scope: !3231)
!3242 = !DILocalVariable(name: "e", scope: !3231, file: !63, line: 1387, type: !71)
!3243 = !DILocation(line: 1387, column: 21, scope: !3231)
!3244 = !DILocation(line: 1387, column: 37, scope: !3231)
!3245 = !DILocation(line: 1387, column: 25, scope: !3231)
!3246 = !DILocation(line: 1390, column: 7, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3231, file: !63, line: 1390, column: 7)
!3248 = !DILocation(line: 1390, column: 9, scope: !3247)
!3249 = !DILocation(line: 1390, column: 23, scope: !3247)
!3250 = !DILocation(line: 1390, column: 26, scope: !3247)
!3251 = !DILocation(line: 1390, column: 7, scope: !3231)
!3252 = !DILocation(line: 1392, column: 11, scope: !3253)
!3253 = distinct !DILexicalBlock(scope: !3254, file: !63, line: 1392, column: 11)
!3254 = distinct !DILexicalBlock(scope: !3247, file: !63, line: 1391, column: 5)
!3255 = !DILocation(line: 1392, column: 13, scope: !3253)
!3256 = !DILocation(line: 1392, column: 11, scope: !3254)
!3257 = !DILocation(line: 1393, column: 11, scope: !3253)
!3258 = !DILocation(line: 1393, column: 9, scope: !3253)
!3259 = !DILocation(line: 1395, column: 11, scope: !3253)
!3260 = !DILocation(line: 1396, column: 5, scope: !3254)
!3261 = !DILocation(line: 1399, column: 7, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3231, file: !63, line: 1399, column: 7)
!3263 = !DILocation(line: 1399, column: 9, scope: !3262)
!3264 = !DILocation(line: 1399, column: 40, scope: !3262)
!3265 = !DILocation(line: 1399, column: 43, scope: !3262)
!3266 = !DILocation(line: 1399, column: 64, scope: !3262)
!3267 = !DILocation(line: 1399, column: 69, scope: !3262)
!3268 = !DILocation(line: 1399, column: 7, scope: !3231)
!3269 = !DILocation(line: 1400, column: 13, scope: !3262)
!3270 = !DILocation(line: 1400, column: 5, scope: !3262)
!3271 = !DILocation(line: 1403, column: 11, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3262, file: !63, line: 1401, column: 7)
!3273 = !DILocation(line: 1404, column: 9, scope: !3272)
!3274 = !DILocalVariable(name: "mem", scope: !3275, file: !63, line: 1408, type: !480)
!3275 = distinct !DILexicalBlock(scope: !3272, file: !63, line: 1407, column: 9)
!3276 = !DILocation(line: 1408, column: 18, scope: !3275)
!3277 = !DILocation(line: 1408, column: 24, scope: !3275)
!3278 = !DILocation(line: 1408, column: 43, scope: !3275)
!3279 = !DILocation(line: 1408, column: 41, scope: !3275)
!3280 = !DILocation(line: 1408, column: 45, scope: !3275)
!3281 = !DILocation(line: 1411, column: 15, scope: !3282)
!3282 = distinct !DILexicalBlock(scope: !3275, file: !63, line: 1411, column: 15)
!3283 = !DILocation(line: 1411, column: 19, scope: !3282)
!3284 = !DILocation(line: 1411, column: 15, scope: !3275)
!3285 = !DILocation(line: 1413, column: 19, scope: !3286)
!3286 = distinct !DILexicalBlock(scope: !3282, file: !63, line: 1412, column: 13)
!3287 = !DILocation(line: 1413, column: 17, scope: !3286)
!3288 = !DILocation(line: 1414, column: 17, scope: !3286)
!3289 = !DILocation(line: 1415, column: 13, scope: !3286)
!3290 = !DILocation(line: 1417, column: 15, scope: !3282)
!3291 = !DILocation(line: 1419, column: 9, scope: !3272)
!3292 = !DILocation(line: 1420, column: 7, scope: !3272)
!3293 = !DILocation(line: 1422, column: 7, scope: !3294)
!3294 = distinct !DILexicalBlock(scope: !3231, file: !63, line: 1422, column: 7)
!3295 = !DILocation(line: 1422, column: 9, scope: !3294)
!3296 = !DILocation(line: 1422, column: 7, scope: !3231)
!3297 = !DILocation(line: 1426, column: 11, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3299, file: !63, line: 1426, column: 11)
!3299 = distinct !DILexicalBlock(scope: !3294, file: !63, line: 1423, column: 5)
!3300 = !DILocation(line: 1426, column: 15, scope: !3298)
!3301 = !DILocation(line: 1426, column: 13, scope: !3298)
!3302 = !DILocation(line: 1426, column: 11, scope: !3299)
!3303 = !DILocation(line: 1427, column: 9, scope: !3298)
!3304 = !DILocation(line: 1429, column: 19, scope: !3299)
!3305 = !DILocation(line: 1429, column: 17, scope: !3299)
!3306 = !DILocation(line: 1430, column: 11, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3299, file: !63, line: 1430, column: 11)
!3308 = !DILocation(line: 1430, column: 24, scope: !3307)
!3309 = !DILocation(line: 1430, column: 21, scope: !3307)
!3310 = !DILocation(line: 1430, column: 11, scope: !3299)
!3311 = !DILocation(line: 1432, column: 23, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3307, file: !63, line: 1431, column: 9)
!3313 = !DILocation(line: 1432, column: 21, scope: !3312)
!3314 = !DILocation(line: 1433, column: 11, scope: !3312)
!3315 = !DILocation(line: 1436, column: 9, scope: !3299)
!3316 = !DILocation(line: 1437, column: 5, scope: !3299)
!3317 = !DILocation(line: 1439, column: 18, scope: !3231)
!3318 = !DILocation(line: 1439, column: 21, scope: !3231)
!3319 = !DILocation(line: 1439, column: 25, scope: !3231)
!3320 = !DILocation(line: 1439, column: 42, scope: !3231)
!3321 = !DILocation(line: 1439, column: 3, scope: !3231)
!3322 = !DILocation(line: 1440, column: 1, scope: !3231)
!3323 = distinct !DISubprogram(name: "add_temp_dir", scope: !63, file: !63, line: 1231, type: !431, scopeLine: 1232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3324 = !DILocalVariable(name: "dir", arg: 1, scope: !3323, file: !63, line: 1231, type: !90)
!3325 = !DILocation(line: 1231, column: 27, scope: !3323)
!3326 = !DILocation(line: 1233, column: 7, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3323, file: !63, line: 1233, column: 7)
!3328 = !DILocation(line: 1233, column: 25, scope: !3327)
!3329 = !DILocation(line: 1233, column: 22, scope: !3327)
!3330 = !DILocation(line: 1233, column: 7, scope: !3323)
!3331 = !DILocation(line: 1234, column: 17, scope: !3327)
!3332 = !DILocation(line: 1234, column: 15, scope: !3327)
!3333 = !DILocation(line: 1234, column: 5, scope: !3327)
!3334 = !DILocation(line: 1236, column: 33, scope: !3323)
!3335 = !DILocation(line: 1236, column: 3, scope: !3323)
!3336 = !DILocation(line: 1236, column: 27, scope: !3323)
!3337 = !DILocation(line: 1236, column: 31, scope: !3323)
!3338 = !DILocation(line: 1237, column: 1, scope: !3323)
!3339 = distinct !DISubprogram(name: "specify_nthreads", scope: !63, file: !63, line: 1444, type: !3340, scopeLine: 1445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3340 = !DISubroutineType(types: !3341)
!3341 = !{!52, !5, !8, !90}
!3342 = !DILocalVariable(name: "oi", arg: 1, scope: !3339, file: !63, line: 1444, type: !5)
!3343 = !DILocation(line: 1444, column: 23, scope: !3339)
!3344 = !DILocalVariable(name: "c", arg: 2, scope: !3339, file: !63, line: 1444, type: !8)
!3345 = !DILocation(line: 1444, column: 32, scope: !3339)
!3346 = !DILocalVariable(name: "s", arg: 3, scope: !3339, file: !63, line: 1444, type: !90)
!3347 = !DILocation(line: 1444, column: 47, scope: !3339)
!3348 = !DILocalVariable(name: "nthreads", scope: !3339, file: !63, line: 1446, type: !54)
!3349 = !DILocation(line: 1446, column: 21, scope: !3339)
!3350 = !DILocalVariable(name: "e", scope: !3339, file: !63, line: 1447, type: !71)
!3351 = !DILocation(line: 1447, column: 21, scope: !3339)
!3352 = !DILocation(line: 1447, column: 35, scope: !3339)
!3353 = !DILocation(line: 1447, column: 25, scope: !3339)
!3354 = !DILocation(line: 1448, column: 7, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3339, file: !63, line: 1448, column: 7)
!3356 = !DILocation(line: 1448, column: 9, scope: !3355)
!3357 = !DILocation(line: 1448, column: 7, scope: !3339)
!3358 = !DILocation(line: 1449, column: 5, scope: !3355)
!3359 = !DILocation(line: 1450, column: 7, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3339, file: !63, line: 1450, column: 7)
!3361 = !DILocation(line: 1450, column: 9, scope: !3360)
!3362 = !DILocation(line: 1450, column: 7, scope: !3339)
!3363 = !DILocation(line: 1451, column: 20, scope: !3360)
!3364 = !DILocation(line: 1451, column: 23, scope: !3360)
!3365 = !DILocation(line: 1451, column: 27, scope: !3360)
!3366 = !DILocation(line: 1451, column: 44, scope: !3360)
!3367 = !DILocation(line: 1451, column: 5, scope: !3360)
!3368 = !DILocation(line: 1452, column: 18, scope: !3369)
!3369 = distinct !DILexicalBlock(scope: !3339, file: !63, line: 1452, column: 7)
!3370 = !DILocation(line: 1452, column: 16, scope: !3369)
!3371 = !DILocation(line: 1452, column: 7, scope: !3339)
!3372 = !DILocation(line: 1453, column: 14, scope: !3369)
!3373 = !DILocation(line: 1453, column: 5, scope: !3369)
!3374 = !DILocation(line: 1454, column: 7, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3339, file: !63, line: 1454, column: 7)
!3376 = !DILocation(line: 1454, column: 16, scope: !3375)
!3377 = !DILocation(line: 1454, column: 7, scope: !3339)
!3378 = !DILocation(line: 1455, column: 5, scope: !3375)
!3379 = !DILocation(line: 1456, column: 10, scope: !3339)
!3380 = !DILocation(line: 1456, column: 3, scope: !3339)
!3381 = !DILocation(line: 1457, column: 1, scope: !3339)
!3382 = distinct !DISubprogram(name: "xfopen", scope: !63, file: !63, line: 986, type: !3383, scopeLine: 987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{!389, !90, !90}
!3385 = !DILocalVariable(name: "file", arg: 1, scope: !3382, file: !63, line: 986, type: !90)
!3386 = !DILocation(line: 986, column: 21, scope: !3382)
!3387 = !DILocalVariable(name: "how", arg: 2, scope: !3382, file: !63, line: 986, type: !90)
!3388 = !DILocation(line: 986, column: 39, scope: !3382)
!3389 = !DILocalVariable(name: "fp", scope: !3382, file: !63, line: 988, type: !389)
!3390 = !DILocation(line: 988, column: 9, scope: !3382)
!3391 = !DILocation(line: 988, column: 27, scope: !3382)
!3392 = !DILocation(line: 988, column: 33, scope: !3382)
!3393 = !DILocation(line: 988, column: 14, scope: !3382)
!3394 = !DILocation(line: 989, column: 8, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3382, file: !63, line: 989, column: 7)
!3396 = !DILocation(line: 989, column: 7, scope: !3382)
!3397 = !DILocation(line: 990, column: 15, scope: !3395)
!3398 = !DILocation(line: 990, column: 33, scope: !3395)
!3399 = !DILocation(line: 990, column: 5, scope: !3395)
!3400 = !DILocation(line: 991, column: 10, scope: !3382)
!3401 = !DILocation(line: 991, column: 3, scope: !3382)
!3402 = distinct !DISubprogram(name: "xfclose", scope: !63, file: !63, line: 997, type: !3403, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3403 = !DISubroutineType(types: !3404)
!3404 = !{null, !389, !90}
!3405 = !DILocalVariable(name: "fp", arg: 1, scope: !3402, file: !63, line: 997, type: !389)
!3406 = !DILocation(line: 997, column: 16, scope: !3402)
!3407 = !DILocalVariable(name: "file", arg: 2, scope: !3402, file: !63, line: 997, type: !90)
!3408 = !DILocation(line: 997, column: 32, scope: !3402)
!3409 = !DILocation(line: 999, column: 19, scope: !3402)
!3410 = !DILocation(line: 999, column: 11, scope: !3402)
!3411 = !DILocation(line: 999, column: 3, scope: !3402)
!3412 = !DILocation(line: 1003, column: 11, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3414, file: !63, line: 1003, column: 11)
!3414 = distinct !DILexicalBlock(scope: !3402, file: !63, line: 1000, column: 5)
!3415 = !DILocation(line: 1003, column: 11, scope: !3414)
!3416 = !DILocation(line: 1004, column: 9, scope: !3413)
!3417 = !DILocation(line: 1005, column: 7, scope: !3414)
!3418 = !DILocation(line: 1009, column: 11, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3414, file: !63, line: 1009, column: 11)
!3420 = !DILocation(line: 1009, column: 23, scope: !3419)
!3421 = !DILocation(line: 1009, column: 11, scope: !3414)
!3422 = !DILocation(line: 1010, column: 19, scope: !3419)
!3423 = !DILocation(line: 1010, column: 39, scope: !3419)
!3424 = !DILocation(line: 1010, column: 9, scope: !3419)
!3425 = !DILocation(line: 1011, column: 7, scope: !3414)
!3426 = !DILocation(line: 1014, column: 19, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !3414, file: !63, line: 1014, column: 11)
!3428 = !DILocation(line: 1014, column: 11, scope: !3427)
!3429 = !DILocation(line: 1014, column: 23, scope: !3427)
!3430 = !DILocation(line: 1014, column: 11, scope: !3414)
!3431 = !DILocation(line: 1015, column: 19, scope: !3427)
!3432 = !DILocation(line: 1015, column: 38, scope: !3427)
!3433 = !DILocation(line: 1015, column: 9, scope: !3427)
!3434 = !DILocation(line: 1016, column: 7, scope: !3414)
!3435 = !DILocation(line: 1018, column: 1, scope: !3402)
!3436 = distinct !DISubprogram(name: "default_key_compare", scope: !63, file: !63, line: 2375, type: !3437, scopeLine: 2376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3437 = !DISubroutineType(types: !3438)
!3438 = !{!162, !522}
!3439 = !DILocalVariable(name: "key", arg: 1, scope: !3436, file: !63, line: 2375, type: !522)
!3440 = !DILocation(line: 2375, column: 45, scope: !3436)
!3441 = !DILocation(line: 2377, column: 13, scope: !3436)
!3442 = !DILocation(line: 2377, column: 18, scope: !3436)
!3443 = !DILocation(line: 2378, column: 13, scope: !3436)
!3444 = !DILocation(line: 2378, column: 16, scope: !3436)
!3445 = !DILocation(line: 2378, column: 21, scope: !3436)
!3446 = !DILocation(line: 2379, column: 13, scope: !3436)
!3447 = !DILocation(line: 2379, column: 16, scope: !3436)
!3448 = !DILocation(line: 2379, column: 21, scope: !3436)
!3449 = !DILocation(line: 2380, column: 13, scope: !3436)
!3450 = !DILocation(line: 2380, column: 16, scope: !3436)
!3451 = !DILocation(line: 2380, column: 21, scope: !3436)
!3452 = !DILocation(line: 2381, column: 13, scope: !3436)
!3453 = !DILocation(line: 2381, column: 29, scope: !3436)
!3454 = !DILocation(line: 2381, column: 16, scope: !3436)
!3455 = !DILocation(line: 2382, column: 13, scope: !3436)
!3456 = !DILocation(line: 2382, column: 16, scope: !3436)
!3457 = !DILocation(line: 2382, column: 21, scope: !3436)
!3458 = !DILocation(line: 2383, column: 13, scope: !3436)
!3459 = !DILocation(line: 2383, column: 16, scope: !3436)
!3460 = !DILocation(line: 2383, column: 21, scope: !3436)
!3461 = !DILocation(line: 2384, column: 13, scope: !3436)
!3462 = !DILocation(line: 2384, column: 16, scope: !3436)
!3463 = !DILocation(line: 2384, column: 21, scope: !3436)
!3464 = !DILocation(line: 2377, column: 10, scope: !3436)
!3465 = !DILocation(line: 2377, column: 3, scope: !3436)
!3466 = distinct !DISubprogram(name: "check_ordering_compatibility", scope: !63, file: !63, line: 4058, type: !235, scopeLine: 4059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3467 = !DILocalVariable(name: "key", scope: !3466, file: !63, line: 4060, type: !152)
!3468 = !DILocation(line: 4060, column: 20, scope: !3466)
!3469 = !DILocation(line: 4062, column: 14, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3466, file: !63, line: 4062, column: 3)
!3471 = !DILocation(line: 4062, column: 12, scope: !3470)
!3472 = !DILocation(line: 4062, column: 8, scope: !3470)
!3473 = !DILocation(line: 4062, column: 23, scope: !3474)
!3474 = distinct !DILexicalBlock(scope: !3470, file: !63, line: 4062, column: 3)
!3475 = !DILocation(line: 4062, column: 3, scope: !3470)
!3476 = !DILocation(line: 4063, column: 14, scope: !3477)
!3477 = distinct !DILexicalBlock(scope: !3474, file: !63, line: 4063, column: 9)
!3478 = !DILocation(line: 4063, column: 19, scope: !3477)
!3479 = !DILocation(line: 4063, column: 29, scope: !3477)
!3480 = !DILocation(line: 4063, column: 34, scope: !3477)
!3481 = !DILocation(line: 4063, column: 27, scope: !3477)
!3482 = !DILocation(line: 4063, column: 52, scope: !3477)
!3483 = !DILocation(line: 4063, column: 57, scope: !3477)
!3484 = !DILocation(line: 4063, column: 50, scope: !3477)
!3485 = !DILocation(line: 4064, column: 16, scope: !3477)
!3486 = !DILocation(line: 4064, column: 21, scope: !3477)
!3487 = !DILocation(line: 4064, column: 14, scope: !3477)
!3488 = !DILocation(line: 4064, column: 30, scope: !3477)
!3489 = !DILocation(line: 4064, column: 35, scope: !3477)
!3490 = !DILocation(line: 4064, column: 45, scope: !3477)
!3491 = !DILocation(line: 4064, column: 50, scope: !3477)
!3492 = !DILocation(line: 4064, column: 43, scope: !3477)
!3493 = !DILocation(line: 4064, column: 61, scope: !3477)
!3494 = !DILocation(line: 4064, column: 66, scope: !3477)
!3495 = !DILocation(line: 4064, column: 60, scope: !3477)
!3496 = !DILocation(line: 4064, column: 59, scope: !3477)
!3497 = !DILocation(line: 4064, column: 57, scope: !3477)
!3498 = !DILocation(line: 4064, column: 27, scope: !3477)
!3499 = !DILocation(line: 4063, column: 11, scope: !3477)
!3500 = !DILocation(line: 4063, column: 9, scope: !3474)
!3501 = !DILocalVariable(name: "opts", scope: !3502, file: !63, line: 4067, type: !392)
!3502 = distinct !DILexicalBlock(scope: !3477, file: !63, line: 4065, column: 7)
!3503 = !DILocation(line: 4067, column: 14, scope: !3502)
!3504 = !DILocation(line: 4069, column: 47, scope: !3502)
!3505 = !DILocation(line: 4069, column: 52, scope: !3502)
!3506 = !DILocation(line: 4069, column: 60, scope: !3502)
!3507 = !DILocation(line: 4069, column: 28, scope: !3502)
!3508 = !DILocation(line: 4069, column: 33, scope: !3502)
!3509 = !DILocation(line: 4069, column: 45, scope: !3502)
!3510 = !DILocation(line: 4069, column: 9, scope: !3502)
!3511 = !DILocation(line: 4069, column: 14, scope: !3502)
!3512 = !DILocation(line: 4069, column: 26, scope: !3502)
!3513 = !DILocation(line: 4070, column: 22, scope: !3502)
!3514 = !DILocation(line: 4070, column: 27, scope: !3502)
!3515 = !DILocation(line: 4070, column: 9, scope: !3502)
!3516 = !DILocation(line: 4071, column: 31, scope: !3502)
!3517 = !DILocation(line: 4071, column: 9, scope: !3502)
!3518 = !DILocation(line: 4064, column: 73, scope: !3477)
!3519 = !DILocation(line: 4062, column: 34, scope: !3474)
!3520 = !DILocation(line: 4062, column: 39, scope: !3474)
!3521 = !DILocation(line: 4062, column: 32, scope: !3474)
!3522 = !DILocation(line: 4062, column: 3, scope: !3474)
!3523 = distinct !{!3523, !3475, !3524}
!3524 = !DILocation(line: 4072, column: 7, scope: !3470)
!3525 = !DILocation(line: 4073, column: 1, scope: !3466)
!3526 = distinct !DISubprogram(name: "key_warnings", scope: !63, file: !63, line: 2422, type: !3527, scopeLine: 2423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3527 = !DISubroutineType(types: !3528)
!3528 = !{null, !522, !162}
!3529 = !DILocalVariable(name: "gkey", arg: 1, scope: !3526, file: !63, line: 2422, type: !522)
!3530 = !DILocation(line: 2422, column: 38, scope: !3526)
!3531 = !DILocalVariable(name: "gkey_only", arg: 2, scope: !3526, file: !63, line: 2422, type: !162)
!3532 = !DILocation(line: 2422, column: 49, scope: !3526)
!3533 = !DILocalVariable(name: "key", scope: !3526, file: !63, line: 2424, type: !522)
!3534 = !DILocation(line: 2424, column: 26, scope: !3526)
!3535 = !DILocalVariable(name: "ugkey", scope: !3526, file: !63, line: 2425, type: !153)
!3536 = !DILocation(line: 2425, column: 19, scope: !3526)
!3537 = !DILocation(line: 2425, column: 28, scope: !3526)
!3538 = !DILocation(line: 2425, column: 27, scope: !3526)
!3539 = !DILocalVariable(name: "keynum", scope: !3526, file: !63, line: 2426, type: !54)
!3540 = !DILocation(line: 2426, column: 17, scope: !3526)
!3541 = !DILocation(line: 2428, column: 14, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3526, file: !63, line: 2428, column: 3)
!3543 = !DILocation(line: 2428, column: 12, scope: !3542)
!3544 = !DILocation(line: 2428, column: 8, scope: !3542)
!3545 = !DILocation(line: 2428, column: 23, scope: !3546)
!3546 = distinct !DILexicalBlock(scope: !3542, file: !63, line: 2428, column: 3)
!3547 = !DILocation(line: 2428, column: 3, scope: !3542)
!3548 = !DILocation(line: 2430, column: 11, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2430, column: 11)
!3550 = distinct !DILexicalBlock(scope: !3546, file: !63, line: 2429, column: 5)
!3551 = !DILocation(line: 2430, column: 16, scope: !3549)
!3552 = !DILocation(line: 2430, column: 11, scope: !3550)
!3553 = !DILocalVariable(name: "sword", scope: !3554, file: !63, line: 2432, type: !52)
!3554 = distinct !DILexicalBlock(scope: !3549, file: !63, line: 2431, column: 9)
!3555 = !DILocation(line: 2432, column: 18, scope: !3554)
!3556 = !DILocation(line: 2432, column: 26, scope: !3554)
!3557 = !DILocation(line: 2432, column: 31, scope: !3554)
!3558 = !DILocalVariable(name: "eword", scope: !3554, file: !63, line: 2433, type: !52)
!3559 = !DILocation(line: 2433, column: 18, scope: !3554)
!3560 = !DILocation(line: 2433, column: 26, scope: !3554)
!3561 = !DILocation(line: 2433, column: 31, scope: !3554)
!3562 = !DILocalVariable(name: "tmp", scope: !3554, file: !63, line: 2434, type: !363)
!3563 = !DILocation(line: 2434, column: 16, scope: !3554)
!3564 = !DILocalVariable(name: "obuf", scope: !3554, file: !63, line: 2438, type: !524)
!3565 = !DILocation(line: 2438, column: 16, scope: !3554)
!3566 = !DILocalVariable(name: "nbuf", scope: !3554, file: !63, line: 2439, type: !396)
!3567 = !DILocation(line: 2439, column: 16, scope: !3554)
!3568 = !DILocalVariable(name: "po", scope: !3554, file: !63, line: 2440, type: !7)
!3569 = !DILocation(line: 2440, column: 17, scope: !3554)
!3570 = !DILocation(line: 2440, column: 22, scope: !3554)
!3571 = !DILocalVariable(name: "pn", scope: !3554, file: !63, line: 2441, type: !7)
!3572 = !DILocation(line: 2441, column: 17, scope: !3554)
!3573 = !DILocation(line: 2441, column: 22, scope: !3554)
!3574 = !DILocation(line: 2443, column: 15, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3554, file: !63, line: 2443, column: 15)
!3576 = !DILocation(line: 2443, column: 21, scope: !3575)
!3577 = !DILocation(line: 2443, column: 15, scope: !3554)
!3578 = !DILocation(line: 2444, column: 18, scope: !3575)
!3579 = !DILocation(line: 2444, column: 13, scope: !3575)
!3580 = !DILocation(line: 2446, column: 32, scope: !3554)
!3581 = !DILocation(line: 2446, column: 24, scope: !3554)
!3582 = !DILocation(line: 2446, column: 53, scope: !3554)
!3583 = !DILocation(line: 2446, column: 60, scope: !3554)
!3584 = !DILocation(line: 2446, column: 42, scope: !3554)
!3585 = !DILocation(line: 2446, column: 16, scope: !3554)
!3586 = !DILocation(line: 2446, column: 14, scope: !3554)
!3587 = !DILocation(line: 2447, column: 32, scope: !3554)
!3588 = !DILocation(line: 2447, column: 24, scope: !3554)
!3589 = !DILocation(line: 2447, column: 55, scope: !3554)
!3590 = !DILocation(line: 2447, column: 61, scope: !3554)
!3591 = !DILocation(line: 2447, column: 66, scope: !3554)
!3592 = !DILocation(line: 2447, column: 44, scope: !3554)
!3593 = !DILocation(line: 2447, column: 16, scope: !3554)
!3594 = !DILocation(line: 2447, column: 14, scope: !3554)
!3595 = !DILocation(line: 2448, column: 15, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3554, file: !63, line: 2448, column: 15)
!3597 = !DILocation(line: 2448, column: 20, scope: !3596)
!3598 = !DILocation(line: 2448, column: 26, scope: !3596)
!3599 = !DILocation(line: 2448, column: 15, scope: !3554)
!3600 = !DILocation(line: 2450, column: 31, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3596, file: !63, line: 2449, column: 13)
!3602 = !DILocation(line: 2450, column: 23, scope: !3601)
!3603 = !DILocation(line: 2450, column: 53, scope: !3601)
!3604 = !DILocation(line: 2450, column: 59, scope: !3601)
!3605 = !DILocation(line: 2450, column: 64, scope: !3601)
!3606 = !DILocation(line: 2450, column: 42, scope: !3601)
!3607 = !DILocation(line: 2450, column: 15, scope: !3601)
!3608 = !DILocation(line: 2451, column: 31, scope: !3601)
!3609 = !DILocation(line: 2451, column: 23, scope: !3601)
!3610 = !DILocation(line: 2452, column: 34, scope: !3601)
!3611 = !DILocation(line: 2452, column: 40, scope: !3601)
!3612 = !DILocation(line: 2453, column: 37, scope: !3601)
!3613 = !DILocation(line: 2453, column: 42, scope: !3601)
!3614 = !DILocation(line: 2453, column: 48, scope: !3601)
!3615 = !DILocation(line: 2453, column: 36, scope: !3601)
!3616 = !DILocation(line: 2453, column: 34, scope: !3601)
!3617 = !DILocation(line: 2453, column: 62, scope: !3601)
!3618 = !DILocation(line: 2452, column: 23, scope: !3601)
!3619 = !DILocation(line: 2451, column: 15, scope: !3601)
!3620 = !DILocation(line: 2454, column: 13, scope: !3601)
!3621 = !DILocation(line: 2455, column: 24, scope: !3554)
!3622 = !DILocation(line: 2456, column: 30, scope: !3554)
!3623 = !DILocation(line: 2456, column: 18, scope: !3554)
!3624 = !DILocation(line: 2456, column: 49, scope: !3554)
!3625 = !DILocation(line: 2456, column: 37, scope: !3554)
!3626 = !DILocation(line: 2455, column: 11, scope: !3554)
!3627 = !DILocation(line: 2457, column: 9, scope: !3554)
!3628 = !DILocalVariable(name: "zero_width", scope: !3550, file: !63, line: 2460, type: !162)
!3629 = !DILocation(line: 2460, column: 12, scope: !3550)
!3630 = !DILocation(line: 2460, column: 25, scope: !3550)
!3631 = !DILocation(line: 2460, column: 30, scope: !3550)
!3632 = !DILocation(line: 2460, column: 36, scope: !3550)
!3633 = !DILocation(line: 2460, column: 48, scope: !3550)
!3634 = !DILocation(line: 2460, column: 51, scope: !3550)
!3635 = !DILocation(line: 2460, column: 56, scope: !3550)
!3636 = !DILocation(line: 2460, column: 64, scope: !3550)
!3637 = !DILocation(line: 2460, column: 69, scope: !3550)
!3638 = !DILocation(line: 2460, column: 62, scope: !3550)
!3639 = !DILocation(line: 0, scope: !3550)
!3640 = !DILocation(line: 2461, column: 11, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2461, column: 11)
!3642 = !DILocation(line: 2461, column: 11, scope: !3550)
!3643 = !DILocation(line: 2462, column: 22, scope: !3641)
!3644 = !DILocation(line: 2462, column: 71, scope: !3641)
!3645 = !DILocation(line: 2462, column: 9, scope: !3641)
!3646 = !DILocalVariable(name: "implicit_skip", scope: !3550, file: !63, line: 2465, type: !162)
!3647 = !DILocation(line: 2465, column: 12, scope: !3550)
!3648 = !DILocation(line: 2465, column: 41, scope: !3550)
!3649 = !DILocation(line: 2465, column: 28, scope: !3550)
!3650 = !DILocation(line: 2465, column: 46, scope: !3550)
!3651 = !DILocation(line: 2465, column: 49, scope: !3550)
!3652 = !DILocation(line: 2465, column: 54, scope: !3550)
!3653 = !DILocalVariable(name: "line_offset", scope: !3550, file: !63, line: 2466, type: !162)
!3654 = !DILocation(line: 2466, column: 12, scope: !3550)
!3655 = !DILocation(line: 2466, column: 26, scope: !3550)
!3656 = !DILocation(line: 2466, column: 31, scope: !3550)
!3657 = !DILocation(line: 2466, column: 37, scope: !3550)
!3658 = !DILocation(line: 2466, column: 42, scope: !3550)
!3659 = !DILocation(line: 2466, column: 45, scope: !3550)
!3660 = !DILocation(line: 2466, column: 50, scope: !3550)
!3661 = !DILocation(line: 2466, column: 56, scope: !3550)
!3662 = !DILocation(line: 2467, column: 12, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2467, column: 11)
!3664 = !DILocation(line: 2467, column: 23, scope: !3663)
!3665 = !DILocation(line: 2467, column: 27, scope: !3663)
!3666 = !DILocation(line: 2467, column: 37, scope: !3663)
!3667 = !DILocation(line: 2467, column: 40, scope: !3663)
!3668 = !DILocation(line: 2467, column: 44, scope: !3663)
!3669 = !DILocation(line: 2467, column: 59, scope: !3663)
!3670 = !DILocation(line: 2467, column: 63, scope: !3663)
!3671 = !DILocation(line: 2468, column: 11, scope: !3663)
!3672 = !DILocation(line: 2468, column: 17, scope: !3663)
!3673 = !DILocation(line: 2468, column: 22, scope: !3663)
!3674 = !DILocation(line: 2468, column: 34, scope: !3663)
!3675 = !DILocation(line: 2468, column: 38, scope: !3663)
!3676 = !DILocation(line: 2469, column: 15, scope: !3663)
!3677 = !DILocation(line: 2469, column: 20, scope: !3663)
!3678 = !DILocation(line: 2469, column: 25, scope: !3663)
!3679 = !DILocation(line: 2469, column: 37, scope: !3663)
!3680 = !DILocation(line: 2469, column: 40, scope: !3663)
!3681 = !DILocation(line: 2469, column: 45, scope: !3663)
!3682 = !DILocation(line: 2470, column: 15, scope: !3663)
!3683 = !DILocation(line: 2470, column: 20, scope: !3663)
!3684 = !DILocation(line: 2470, column: 25, scope: !3663)
!3685 = !DILocation(line: 2470, column: 37, scope: !3663)
!3686 = !DILocation(line: 2470, column: 40, scope: !3663)
!3687 = !DILocation(line: 2470, column: 45, scope: !3663)
!3688 = !DILocation(line: 2467, column: 11, scope: !3550)
!3689 = !DILocation(line: 2471, column: 22, scope: !3663)
!3690 = !DILocation(line: 2472, column: 57, scope: !3663)
!3691 = !DILocation(line: 2471, column: 9, scope: !3663)
!3692 = !DILocation(line: 2477, column: 12, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2477, column: 11)
!3694 = !DILocation(line: 2477, column: 22, scope: !3693)
!3695 = !DILocation(line: 2477, column: 38, scope: !3693)
!3696 = !DILocation(line: 2477, column: 25, scope: !3693)
!3697 = !DILocation(line: 2477, column: 11, scope: !3550)
!3698 = !DILocalVariable(name: "sword", scope: !3699, file: !63, line: 2479, type: !52)
!3699 = distinct !DILexicalBlock(scope: !3693, file: !63, line: 2478, column: 9)
!3700 = !DILocation(line: 2479, column: 18, scope: !3699)
!3701 = !DILocation(line: 2479, column: 26, scope: !3699)
!3702 = !DILocation(line: 2479, column: 31, scope: !3699)
!3703 = !DILocation(line: 2479, column: 37, scope: !3699)
!3704 = !DILocalVariable(name: "eword", scope: !3699, file: !63, line: 2480, type: !52)
!3705 = !DILocation(line: 2480, column: 18, scope: !3699)
!3706 = !DILocation(line: 2480, column: 26, scope: !3699)
!3707 = !DILocation(line: 2480, column: 31, scope: !3699)
!3708 = !DILocation(line: 2480, column: 37, scope: !3699)
!3709 = !DILocation(line: 2481, column: 16, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3699, file: !63, line: 2481, column: 15)
!3711 = !DILocation(line: 2481, column: 15, scope: !3699)
!3712 = !DILocation(line: 2482, column: 18, scope: !3710)
!3713 = !DILocation(line: 2482, column: 13, scope: !3710)
!3714 = !DILocation(line: 2483, column: 16, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3699, file: !63, line: 2483, column: 15)
!3716 = !DILocation(line: 2483, column: 22, scope: !3715)
!3717 = !DILocation(line: 2483, column: 25, scope: !3715)
!3718 = !DILocation(line: 2483, column: 33, scope: !3715)
!3719 = !DILocation(line: 2483, column: 31, scope: !3715)
!3720 = !DILocation(line: 2483, column: 15, scope: !3699)
!3721 = !DILocation(line: 2484, column: 26, scope: !3715)
!3722 = !DILocation(line: 2485, column: 20, scope: !3715)
!3723 = !DILocation(line: 2484, column: 13, scope: !3715)
!3724 = !DILocation(line: 2486, column: 9, scope: !3699)
!3725 = !DILocation(line: 2489, column: 17, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2489, column: 11)
!3727 = !DILocation(line: 2489, column: 11, scope: !3726)
!3728 = !DILocation(line: 2489, column: 24, scope: !3726)
!3729 = !DILocation(line: 2489, column: 34, scope: !3726)
!3730 = !DILocation(line: 2489, column: 44, scope: !3726)
!3731 = !DILocation(line: 2489, column: 49, scope: !3726)
!3732 = !DILocation(line: 2489, column: 41, scope: !3726)
!3733 = !DILocation(line: 2489, column: 11, scope: !3550)
!3734 = !DILocation(line: 2490, column: 15, scope: !3726)
!3735 = !DILocation(line: 2490, column: 22, scope: !3726)
!3736 = !DILocation(line: 2490, column: 9, scope: !3726)
!3737 = !DILocation(line: 2491, column: 17, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3550, file: !63, line: 2491, column: 11)
!3739 = !DILocation(line: 2491, column: 11, scope: !3738)
!3740 = !DILocation(line: 2491, column: 27, scope: !3738)
!3741 = !DILocation(line: 2491, column: 37, scope: !3738)
!3742 = !DILocation(line: 2491, column: 50, scope: !3738)
!3743 = !DILocation(line: 2491, column: 55, scope: !3738)
!3744 = !DILocation(line: 2491, column: 47, scope: !3738)
!3745 = !DILocation(line: 2491, column: 11, scope: !3550)
!3746 = !DILocation(line: 2492, column: 15, scope: !3738)
!3747 = !DILocation(line: 2492, column: 25, scope: !3738)
!3748 = !DILocation(line: 2492, column: 9, scope: !3738)
!3749 = !DILocation(line: 2493, column: 29, scope: !3550)
!3750 = !DILocation(line: 2493, column: 34, scope: !3550)
!3751 = !DILocation(line: 2493, column: 28, scope: !3550)
!3752 = !DILocation(line: 2493, column: 13, scope: !3550)
!3753 = !DILocation(line: 2493, column: 25, scope: !3550)
!3754 = !DILocation(line: 2494, column: 29, scope: !3550)
!3755 = !DILocation(line: 2494, column: 34, scope: !3550)
!3756 = !DILocation(line: 2494, column: 28, scope: !3550)
!3757 = !DILocation(line: 2494, column: 13, scope: !3550)
!3758 = !DILocation(line: 2494, column: 25, scope: !3550)
!3759 = !DILocation(line: 2495, column: 23, scope: !3550)
!3760 = !DILocation(line: 2495, column: 28, scope: !3550)
!3761 = !DILocation(line: 2495, column: 22, scope: !3550)
!3762 = !DILocation(line: 2495, column: 13, scope: !3550)
!3763 = !DILocation(line: 2495, column: 19, scope: !3550)
!3764 = !DILocation(line: 2496, column: 25, scope: !3550)
!3765 = !DILocation(line: 2496, column: 30, scope: !3550)
!3766 = !DILocation(line: 2496, column: 24, scope: !3550)
!3767 = !DILocation(line: 2496, column: 13, scope: !3550)
!3768 = !DILocation(line: 2496, column: 21, scope: !3550)
!3769 = !DILocation(line: 2497, column: 33, scope: !3550)
!3770 = !DILocation(line: 2497, column: 38, scope: !3550)
!3771 = !DILocation(line: 2497, column: 32, scope: !3550)
!3772 = !DILocation(line: 2497, column: 13, scope: !3550)
!3773 = !DILocation(line: 2497, column: 29, scope: !3550)
!3774 = !DILocation(line: 2498, column: 31, scope: !3550)
!3775 = !DILocation(line: 2498, column: 36, scope: !3550)
!3776 = !DILocation(line: 2498, column: 30, scope: !3550)
!3777 = !DILocation(line: 2498, column: 13, scope: !3550)
!3778 = !DILocation(line: 2498, column: 27, scope: !3550)
!3779 = !DILocation(line: 2499, column: 24, scope: !3550)
!3780 = !DILocation(line: 2499, column: 29, scope: !3550)
!3781 = !DILocation(line: 2499, column: 23, scope: !3550)
!3782 = !DILocation(line: 2499, column: 13, scope: !3550)
!3783 = !DILocation(line: 2499, column: 20, scope: !3550)
!3784 = !DILocation(line: 2500, column: 25, scope: !3550)
!3785 = !DILocation(line: 2500, column: 30, scope: !3550)
!3786 = !DILocation(line: 2500, column: 24, scope: !3550)
!3787 = !DILocation(line: 2500, column: 13, scope: !3550)
!3788 = !DILocation(line: 2500, column: 21, scope: !3550)
!3789 = !DILocation(line: 2501, column: 25, scope: !3550)
!3790 = !DILocation(line: 2501, column: 30, scope: !3550)
!3791 = !DILocation(line: 2501, column: 24, scope: !3550)
!3792 = !DILocation(line: 2501, column: 13, scope: !3550)
!3793 = !DILocation(line: 2501, column: 21, scope: !3550)
!3794 = !DILocation(line: 2502, column: 5, scope: !3550)
!3795 = !DILocation(line: 2428, column: 34, scope: !3546)
!3796 = !DILocation(line: 2428, column: 39, scope: !3546)
!3797 = !DILocation(line: 2428, column: 32, scope: !3546)
!3798 = !DILocation(line: 2428, column: 51, scope: !3546)
!3799 = !DILocation(line: 2428, column: 3, scope: !3546)
!3800 = distinct !{!3800, !3547, !3801}
!3801 = !DILocation(line: 2502, column: 5, scope: !3542)
!3802 = !DILocation(line: 2506, column: 8, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3526, file: !63, line: 2506, column: 7)
!3804 = !DILocation(line: 2507, column: 7, scope: !3803)
!3805 = !DILocation(line: 2507, column: 17, scope: !3803)
!3806 = !DILocation(line: 2507, column: 25, scope: !3803)
!3807 = !DILocation(line: 2507, column: 29, scope: !3803)
!3808 = !DILocation(line: 2507, column: 36, scope: !3803)
!3809 = !DILocation(line: 2507, column: 39, scope: !3803)
!3810 = !DILocation(line: 2507, column: 47, scope: !3803)
!3811 = !DILocation(line: 2507, column: 50, scope: !3803)
!3812 = !DILocation(line: 2506, column: 7, scope: !3526)
!3813 = !DILocalVariable(name: "ugkey_reverse", scope: !3814, file: !63, line: 2509, type: !162)
!3814 = distinct !DILexicalBlock(scope: !3803, file: !63, line: 2508, column: 5)
!3815 = !DILocation(line: 2509, column: 12, scope: !3814)
!3816 = !DILocation(line: 2509, column: 34, scope: !3814)
!3817 = !DILocation(line: 2510, column: 13, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3814, file: !63, line: 2510, column: 11)
!3819 = !DILocation(line: 2510, column: 20, scope: !3818)
!3820 = !DILocation(line: 2510, column: 23, scope: !3818)
!3821 = !DILocation(line: 2510, column: 11, scope: !3814)
!3822 = !DILocation(line: 2511, column: 15, scope: !3818)
!3823 = !DILocation(line: 2511, column: 23, scope: !3818)
!3824 = !DILocation(line: 2511, column: 9, scope: !3818)
!3825 = !DILocalVariable(name: "opts", scope: !3814, file: !63, line: 2513, type: !392)
!3826 = !DILocation(line: 2513, column: 12, scope: !3814)
!3827 = !DILocation(line: 2514, column: 28, scope: !3814)
!3828 = !DILocation(line: 2514, column: 7, scope: !3814)
!3829 = !DILocation(line: 2518, column: 47, scope: !3814)
!3830 = !DILocation(line: 2518, column: 39, scope: !3814)
!3831 = !DILocation(line: 2518, column: 24, scope: !3814)
!3832 = !DILocation(line: 2516, column: 14, scope: !3814)
!3833 = !DILocation(line: 2518, column: 56, scope: !3814)
!3834 = !DILocation(line: 2515, column: 7, scope: !3814)
!3835 = !DILocation(line: 2519, column: 23, scope: !3814)
!3836 = !DILocation(line: 2519, column: 13, scope: !3814)
!3837 = !DILocation(line: 2519, column: 21, scope: !3814)
!3838 = !DILocation(line: 2520, column: 5, scope: !3814)
!3839 = !DILocation(line: 2521, column: 13, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3526, file: !63, line: 2521, column: 7)
!3841 = !DILocation(line: 2521, column: 21, scope: !3840)
!3842 = !DILocation(line: 2521, column: 26, scope: !3840)
!3843 = !DILocation(line: 2521, column: 33, scope: !3840)
!3844 = !DILocation(line: 2521, column: 36, scope: !3840)
!3845 = !DILocation(line: 2521, column: 44, scope: !3840)
!3846 = !DILocation(line: 2521, column: 47, scope: !3840)
!3847 = !DILocation(line: 2521, column: 7, scope: !3526)
!3848 = !DILocation(line: 2522, column: 18, scope: !3840)
!3849 = !DILocation(line: 2522, column: 5, scope: !3840)
!3850 = !DILocation(line: 2523, column: 1, scope: !3526)
!3851 = distinct !DISubprogram(name: "random_md5_state_init", scope: !63, file: !63, line: 2094, type: !431, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3852 = !DILocalVariable(name: "random_source", arg: 1, scope: !3851, file: !63, line: 2094, type: !90)
!3853 = !DILocation(line: 2094, column: 36, scope: !3851)
!3854 = !DILocalVariable(name: "buf", scope: !3851, file: !63, line: 2096, type: !534)
!3855 = !DILocation(line: 2096, column: 17, scope: !3851)
!3856 = !DILocalVariable(name: "r", scope: !3851, file: !63, line: 2097, type: !536)
!3857 = !DILocation(line: 2097, column: 27, scope: !3851)
!3858 = !DILocation(line: 2097, column: 45, scope: !3851)
!3859 = !DILocation(line: 2097, column: 31, scope: !3851)
!3860 = !DILocation(line: 2098, column: 9, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3851, file: !63, line: 2098, column: 7)
!3862 = !DILocation(line: 2098, column: 7, scope: !3851)
!3863 = !DILocation(line: 2099, column: 15, scope: !3861)
!3864 = !DILocation(line: 2099, column: 33, scope: !3861)
!3865 = !DILocation(line: 2099, column: 5, scope: !3861)
!3866 = !DILocation(line: 2100, column: 13, scope: !3851)
!3867 = !DILocation(line: 2100, column: 16, scope: !3851)
!3868 = !DILocation(line: 2100, column: 3, scope: !3851)
!3869 = !DILocation(line: 2101, column: 22, scope: !3870)
!3870 = distinct !DILexicalBlock(scope: !3851, file: !63, line: 2101, column: 7)
!3871 = !DILocation(line: 2101, column: 7, scope: !3870)
!3872 = !DILocation(line: 2101, column: 25, scope: !3870)
!3873 = !DILocation(line: 2101, column: 7, scope: !3851)
!3874 = !DILocation(line: 2102, column: 15, scope: !3870)
!3875 = !DILocation(line: 2102, column: 34, scope: !3870)
!3876 = !DILocation(line: 2102, column: 5, scope: !3870)
!3877 = !DILocation(line: 2103, column: 3, scope: !3851)
!3878 = !DILocation(line: 2104, column: 22, scope: !3851)
!3879 = !DILocation(line: 2104, column: 3, scope: !3851)
!3880 = !DILocation(line: 2105, column: 1, scope: !3851)
!3881 = distinct !DISubprogram(name: "check", scope: !63, file: !63, line: 2816, type: !3882, scopeLine: 2817, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!3882 = !DISubroutineType(types: !3883)
!3883 = !{!162, !90, !8}
!3884 = !DILocalVariable(name: "file_name", arg: 1, scope: !3881, file: !63, line: 2816, type: !90)
!3885 = !DILocation(line: 2816, column: 20, scope: !3881)
!3886 = !DILocalVariable(name: "checkonly", arg: 2, scope: !3881, file: !63, line: 2816, type: !8)
!3887 = !DILocation(line: 2816, column: 36, scope: !3881)
!3888 = !DILocalVariable(name: "fp", scope: !3881, file: !63, line: 2818, type: !389)
!3889 = !DILocation(line: 2818, column: 9, scope: !3881)
!3890 = !DILocation(line: 2818, column: 22, scope: !3881)
!3891 = !DILocation(line: 2818, column: 14, scope: !3881)
!3892 = !DILocalVariable(name: "buf", scope: !3881, file: !63, line: 2819, type: !608)
!3893 = !DILocation(line: 2819, column: 17, scope: !3881)
!3894 = !DILocalVariable(name: "temp", scope: !3881, file: !63, line: 2820, type: !541)
!3895 = !DILocation(line: 2820, column: 15, scope: !3881)
!3896 = !DILocalVariable(name: "alloc", scope: !3881, file: !63, line: 2821, type: !52)
!3897 = !DILocation(line: 2821, column: 10, scope: !3881)
!3898 = !DILocalVariable(name: "line_number", scope: !3881, file: !63, line: 2822, type: !464)
!3899 = !DILocation(line: 2822, column: 13, scope: !3881)
!3900 = !DILocalVariable(name: "key", scope: !3881, file: !63, line: 2823, type: !522)
!3901 = !DILocation(line: 2823, column: 26, scope: !3881)
!3902 = !DILocation(line: 2823, column: 32, scope: !3881)
!3903 = !DILocalVariable(name: "nonunique", scope: !3881, file: !63, line: 2824, type: !162)
!3904 = !DILocation(line: 2824, column: 8, scope: !3881)
!3905 = !DILocation(line: 2824, column: 22, scope: !3881)
!3906 = !DILocation(line: 2824, column: 20, scope: !3881)
!3907 = !DILocalVariable(name: "ordered", scope: !3881, file: !63, line: 2825, type: !162)
!3908 = !DILocation(line: 2825, column: 8, scope: !3881)
!3909 = !DILocation(line: 2828, column: 12, scope: !3881)
!3910 = !DILocation(line: 2827, column: 3, scope: !3881)
!3911 = !DILocation(line: 2829, column: 8, scope: !3881)
!3912 = !DILocation(line: 2829, column: 13, scope: !3881)
!3913 = !DILocation(line: 2831, column: 3, scope: !3881)
!3914 = !DILocation(line: 2831, column: 25, scope: !3881)
!3915 = !DILocation(line: 2831, column: 29, scope: !3881)
!3916 = !DILocation(line: 2831, column: 10, scope: !3881)
!3917 = !DILocalVariable(name: "line", scope: !3918, file: !63, line: 2833, type: !539)
!3918 = distinct !DILexicalBlock(scope: !3881, file: !63, line: 2832, column: 5)
!3919 = !DILocation(line: 2833, column: 26, scope: !3918)
!3920 = !DILocation(line: 2833, column: 33, scope: !3918)
!3921 = !DILocalVariable(name: "linebase", scope: !3918, file: !63, line: 2834, type: !539)
!3922 = !DILocation(line: 2834, column: 26, scope: !3918)
!3923 = !DILocation(line: 2834, column: 37, scope: !3918)
!3924 = !DILocation(line: 2834, column: 48, scope: !3918)
!3925 = !DILocation(line: 2834, column: 42, scope: !3918)
!3926 = !DILocation(line: 2838, column: 11, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3918, file: !63, line: 2838, column: 11)
!3928 = !DILocation(line: 2838, column: 17, scope: !3927)
!3929 = !DILocation(line: 2838, column: 20, scope: !3927)
!3930 = !DILocation(line: 2838, column: 49, scope: !3927)
!3931 = !DILocation(line: 2838, column: 54, scope: !3927)
!3932 = !DILocation(line: 2838, column: 33, scope: !3927)
!3933 = !DILocation(line: 2838, column: 30, scope: !3927)
!3934 = !DILocation(line: 2838, column: 11, scope: !3918)
!3935 = !DILocation(line: 2839, column: 9, scope: !3927)
!3936 = !DILabel(scope: !3937, name: "found_disorder", file: !63, line: 2840)
!3937 = distinct !DILexicalBlock(scope: !3927, file: !63, line: 2839, column: 9)
!3938 = !DILocation(line: 2840, column: 9, scope: !3937)
!3939 = !DILocation(line: 2842, column: 17, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3941, file: !63, line: 2842, column: 17)
!3941 = distinct !DILexicalBlock(scope: !3937, file: !63, line: 2841, column: 11)
!3942 = !DILocation(line: 2842, column: 27, scope: !3940)
!3943 = !DILocation(line: 2842, column: 17, scope: !3941)
!3944 = !DILocalVariable(name: "disorder_line", scope: !3945, file: !63, line: 2844, type: !539)
!3945 = distinct !DILexicalBlock(scope: !3940, file: !63, line: 2843, column: 15)
!3946 = !DILocation(line: 2844, column: 36, scope: !3945)
!3947 = !DILocation(line: 2844, column: 52, scope: !3945)
!3948 = !DILocation(line: 2844, column: 57, scope: !3945)
!3949 = !DILocalVariable(name: "disorder_line_number", scope: !3945, file: !63, line: 2845, type: !464)
!3950 = !DILocation(line: 2845, column: 27, scope: !3945)
!3951 = !DILocation(line: 2846, column: 19, scope: !3945)
!3952 = !DILocation(line: 2846, column: 43, scope: !3945)
!3953 = !DILocation(line: 2846, column: 41, scope: !3945)
!3954 = !DILocation(line: 2846, column: 59, scope: !3945)
!3955 = !DILocation(line: 2846, column: 57, scope: !3945)
!3956 = !DILocalVariable(name: "hr_buf", scope: !3945, file: !63, line: 2847, type: !363)
!3957 = !DILocation(line: 2847, column: 22, scope: !3945)
!3958 = !DILocation(line: 2848, column: 26, scope: !3945)
!3959 = !DILocation(line: 2848, column: 34, scope: !3945)
!3960 = !DILocation(line: 2849, column: 26, scope: !3945)
!3961 = !DILocation(line: 2849, column: 40, scope: !3945)
!3962 = !DILocation(line: 2850, column: 37, scope: !3945)
!3963 = !DILocation(line: 2850, column: 59, scope: !3945)
!3964 = !DILocation(line: 2850, column: 26, scope: !3945)
!3965 = !DILocation(line: 2848, column: 17, scope: !3945)
!3966 = !DILocation(line: 2851, column: 29, scope: !3945)
!3967 = !DILocation(line: 2851, column: 44, scope: !3945)
!3968 = !DILocation(line: 2851, column: 52, scope: !3945)
!3969 = !DILocation(line: 2851, column: 17, scope: !3945)
!3970 = !DILocation(line: 2852, column: 15, scope: !3945)
!3971 = !DILocation(line: 2854, column: 21, scope: !3941)
!3972 = !DILocation(line: 2855, column: 13, scope: !3941)
!3973 = !DILocation(line: 2860, column: 7, scope: !3918)
!3974 = !DILocation(line: 2860, column: 14, scope: !3918)
!3975 = !DILocation(line: 2860, column: 25, scope: !3918)
!3976 = !DILocation(line: 2860, column: 23, scope: !3918)
!3977 = !DILocation(line: 2861, column: 13, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3918, file: !63, line: 2861, column: 13)
!3979 = !DILocation(line: 2861, column: 35, scope: !3978)
!3980 = !DILocation(line: 2861, column: 41, scope: !3978)
!3981 = !DILocation(line: 2861, column: 46, scope: !3978)
!3982 = !DILocation(line: 2861, column: 26, scope: !3978)
!3983 = !DILocation(line: 2861, column: 23, scope: !3978)
!3984 = !DILocation(line: 2861, column: 13, scope: !3918)
!3985 = !DILocation(line: 2862, column: 11, scope: !3978)
!3986 = distinct !{!3986, !3973, !3987}
!3987 = !DILocation(line: 2862, column: 16, scope: !3918)
!3988 = !DILocation(line: 2864, column: 26, scope: !3918)
!3989 = !DILocation(line: 2864, column: 19, scope: !3918)
!3990 = !DILocation(line: 2867, column: 11, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3918, file: !63, line: 2867, column: 11)
!3992 = !DILocation(line: 2867, column: 19, scope: !3991)
!3993 = !DILocation(line: 2867, column: 25, scope: !3991)
!3994 = !DILocation(line: 2867, column: 17, scope: !3991)
!3995 = !DILocation(line: 2867, column: 11, scope: !3918)
!3996 = !DILocation(line: 2869, column: 11, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3991, file: !63, line: 2868, column: 9)
!3998 = !DILocation(line: 2871, column: 21, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3997, file: !63, line: 2870, column: 13)
!4000 = !DILocation(line: 2872, column: 21, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3999, file: !63, line: 2872, column: 19)
!4002 = !DILocation(line: 2872, column: 19, scope: !3999)
!4003 = !DILocation(line: 2874, column: 27, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !4001, file: !63, line: 2873, column: 17)
!4005 = !DILocation(line: 2874, column: 33, scope: !4004)
!4006 = !DILocation(line: 2874, column: 25, scope: !4004)
!4007 = !DILocation(line: 2875, column: 19, scope: !4004)
!4008 = !DILocation(line: 2877, column: 13, scope: !3999)
!4009 = !DILocation(line: 2878, column: 18, scope: !3997)
!4010 = !DILocation(line: 2878, column: 26, scope: !3997)
!4011 = !DILocation(line: 2878, column: 32, scope: !3997)
!4012 = !DILocation(line: 2878, column: 24, scope: !3997)
!4013 = distinct !{!4013, !3996, !4014}
!4014 = !DILocation(line: 2878, column: 38, scope: !3997)
!4015 = !DILocation(line: 2880, column: 22, scope: !3997)
!4016 = !DILocation(line: 2880, column: 11, scope: !3997)
!4017 = !DILocation(line: 2881, column: 32, scope: !3997)
!4018 = !DILocation(line: 2881, column: 23, scope: !3997)
!4019 = !DILocation(line: 2881, column: 16, scope: !3997)
!4020 = !DILocation(line: 2881, column: 21, scope: !3997)
!4021 = !DILocation(line: 2882, column: 9, scope: !3997)
!4022 = !DILocation(line: 2883, column: 20, scope: !3918)
!4023 = !DILocation(line: 2883, column: 26, scope: !3918)
!4024 = !DILocation(line: 2883, column: 32, scope: !3918)
!4025 = !DILocation(line: 2883, column: 38, scope: !3918)
!4026 = !DILocation(line: 2883, column: 44, scope: !3918)
!4027 = !DILocation(line: 2883, column: 7, scope: !3918)
!4028 = !DILocation(line: 2884, column: 21, scope: !3918)
!4029 = !DILocation(line: 2884, column: 27, scope: !3918)
!4030 = !DILocation(line: 2884, column: 12, scope: !3918)
!4031 = !DILocation(line: 2884, column: 19, scope: !3918)
!4032 = !DILocation(line: 2885, column: 11, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !3918, file: !63, line: 2885, column: 11)
!4034 = !DILocation(line: 2885, column: 11, scope: !3918)
!4035 = !DILocation(line: 2887, column: 30, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4033, file: !63, line: 2886, column: 9)
!4037 = !DILocation(line: 2887, column: 38, scope: !4036)
!4038 = !DILocation(line: 2887, column: 44, scope: !4036)
!4039 = !DILocation(line: 2887, column: 53, scope: !4036)
!4040 = !DILocation(line: 2887, column: 59, scope: !4036)
!4041 = !DILocation(line: 2887, column: 51, scope: !4036)
!4042 = !DILocation(line: 2887, column: 35, scope: !4036)
!4043 = !DILocation(line: 2887, column: 16, scope: !4036)
!4044 = !DILocation(line: 2887, column: 23, scope: !4036)
!4045 = !DILocation(line: 2888, column: 30, scope: !4036)
!4046 = !DILocation(line: 2888, column: 38, scope: !4036)
!4047 = !DILocation(line: 2888, column: 44, scope: !4036)
!4048 = !DILocation(line: 2888, column: 53, scope: !4036)
!4049 = !DILocation(line: 2888, column: 59, scope: !4036)
!4050 = !DILocation(line: 2888, column: 51, scope: !4036)
!4051 = !DILocation(line: 2888, column: 35, scope: !4036)
!4052 = !DILocation(line: 2888, column: 16, scope: !4036)
!4053 = !DILocation(line: 2888, column: 23, scope: !4036)
!4054 = !DILocation(line: 2889, column: 9, scope: !4036)
!4055 = distinct !{!4055, !3913, !4056}
!4056 = !DILocation(line: 2890, column: 5, scope: !3881)
!4057 = !DILocation(line: 2892, column: 12, scope: !3881)
!4058 = !DILocation(line: 2892, column: 16, scope: !3881)
!4059 = !DILocation(line: 2892, column: 3, scope: !3881)
!4060 = !DILocation(line: 2893, column: 13, scope: !3881)
!4061 = !DILocation(line: 2893, column: 3, scope: !3881)
!4062 = !DILocation(line: 2894, column: 14, scope: !3881)
!4063 = !DILocation(line: 2894, column: 3, scope: !3881)
!4064 = !DILocation(line: 2895, column: 10, scope: !3881)
!4065 = !DILocation(line: 2895, column: 3, scope: !3881)
!4066 = distinct !DISubprogram(name: "check_inputs", scope: !63, file: !63, line: 3755, type: !4067, scopeLine: 3756, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4067 = !DISubroutineType(types: !4068)
!4068 = !{null, !582, !52}
!4069 = !DILocalVariable(name: "files", arg: 1, scope: !4066, file: !63, line: 3755, type: !582)
!4070 = !DILocation(line: 3755, column: 28, scope: !4066)
!4071 = !DILocalVariable(name: "nfiles", arg: 2, scope: !4066, file: !63, line: 3755, type: !52)
!4072 = !DILocation(line: 3755, column: 42, scope: !4066)
!4073 = !DILocalVariable(name: "i", scope: !4074, file: !63, line: 3757, type: !52)
!4074 = distinct !DILexicalBlock(scope: !4066, file: !63, line: 3757, column: 3)
!4075 = !DILocation(line: 3757, column: 15, scope: !4074)
!4076 = !DILocation(line: 3757, column: 8, scope: !4074)
!4077 = !DILocation(line: 3757, column: 22, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !4074, file: !63, line: 3757, column: 3)
!4079 = !DILocation(line: 3757, column: 26, scope: !4078)
!4080 = !DILocation(line: 3757, column: 24, scope: !4078)
!4081 = !DILocation(line: 3757, column: 3, scope: !4074)
!4082 = !DILocation(line: 3759, column: 11, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4084, file: !63, line: 3759, column: 11)
!4084 = distinct !DILexicalBlock(scope: !4078, file: !63, line: 3758, column: 5)
!4085 = !DILocation(line: 3759, column: 11, scope: !4084)
!4086 = !DILocation(line: 3760, column: 9, scope: !4083)
!4087 = !DILocation(line: 3762, column: 23, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4084, file: !63, line: 3762, column: 11)
!4089 = !DILocation(line: 3762, column: 29, scope: !4088)
!4090 = !DILocation(line: 3762, column: 11, scope: !4088)
!4091 = !DILocation(line: 3762, column: 39, scope: !4088)
!4092 = !DILocation(line: 3762, column: 11, scope: !4084)
!4093 = !DILocation(line: 3763, column: 19, scope: !4088)
!4094 = !DILocation(line: 3763, column: 37, scope: !4088)
!4095 = !DILocation(line: 3763, column: 43, scope: !4088)
!4096 = !DILocation(line: 3763, column: 9, scope: !4088)
!4097 = !DILocation(line: 3764, column: 5, scope: !4084)
!4098 = !DILocation(line: 3757, column: 35, scope: !4078)
!4099 = !DILocation(line: 3757, column: 3, scope: !4078)
!4100 = distinct !{!4100, !4081, !4101}
!4101 = !DILocation(line: 3764, column: 5, scope: !4074)
!4102 = !DILocation(line: 3765, column: 1, scope: !4066)
!4103 = distinct !DISubprogram(name: "check_output", scope: !63, file: !63, line: 3772, type: !431, scopeLine: 3773, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4104 = !DILocalVariable(name: "outfile", arg: 1, scope: !4103, file: !63, line: 3772, type: !90)
!4105 = !DILocation(line: 3772, column: 27, scope: !4103)
!4106 = !DILocation(line: 3774, column: 7, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4103, file: !63, line: 3774, column: 7)
!4108 = !DILocation(line: 3774, column: 7, scope: !4103)
!4109 = !DILocalVariable(name: "oflags", scope: !4110, file: !63, line: 3776, type: !5)
!4110 = distinct !DILexicalBlock(scope: !4107, file: !63, line: 3775, column: 5)
!4111 = !DILocation(line: 3776, column: 11, scope: !4110)
!4112 = !DILocalVariable(name: "outfd", scope: !4110, file: !63, line: 3777, type: !5)
!4113 = !DILocation(line: 3777, column: 11, scope: !4110)
!4114 = !DILocation(line: 3777, column: 25, scope: !4110)
!4115 = !DILocation(line: 3777, column: 34, scope: !4110)
!4116 = !DILocation(line: 3777, column: 19, scope: !4110)
!4117 = !DILocation(line: 3778, column: 11, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4110, file: !63, line: 3778, column: 11)
!4119 = !DILocation(line: 3778, column: 17, scope: !4118)
!4120 = !DILocation(line: 3778, column: 11, scope: !4110)
!4121 = !DILocation(line: 3779, column: 19, scope: !4118)
!4122 = !DILocation(line: 3779, column: 37, scope: !4118)
!4123 = !DILocation(line: 3779, column: 9, scope: !4118)
!4124 = !DILocation(line: 3780, column: 16, scope: !4110)
!4125 = !DILocation(line: 3780, column: 7, scope: !4110)
!4126 = !DILocation(line: 3781, column: 5, scope: !4110)
!4127 = !DILocation(line: 3782, column: 1, scope: !4103)
!4128 = distinct !DISubprogram(name: "merge", scope: !63, file: !63, line: 3790, type: !4129, scopeLine: 3792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4129 = !DISubroutineType(types: !4130)
!4130 = !{null, !402, !52, !52, !90}
!4131 = !DILocalVariable(name: "files", arg: 1, scope: !4128, file: !63, line: 3790, type: !402)
!4132 = !DILocation(line: 3790, column: 25, scope: !4128)
!4133 = !DILocalVariable(name: "ntemps", arg: 2, scope: !4128, file: !63, line: 3790, type: !52)
!4134 = !DILocation(line: 3790, column: 39, scope: !4128)
!4135 = !DILocalVariable(name: "nfiles", arg: 3, scope: !4128, file: !63, line: 3790, type: !52)
!4136 = !DILocation(line: 3790, column: 54, scope: !4128)
!4137 = !DILocalVariable(name: "output_file", arg: 4, scope: !4128, file: !63, line: 3791, type: !90)
!4138 = !DILocation(line: 3791, column: 20, scope: !4128)
!4139 = !DILocation(line: 3793, column: 3, scope: !4128)
!4140 = !DILocation(line: 3793, column: 10, scope: !4128)
!4141 = !DILocation(line: 3793, column: 19, scope: !4128)
!4142 = !DILocation(line: 3793, column: 17, scope: !4128)
!4143 = !DILocalVariable(name: "in", scope: !4144, file: !63, line: 3796, type: !52)
!4144 = distinct !DILexicalBlock(scope: !4128, file: !63, line: 3794, column: 5)
!4145 = !DILocation(line: 3796, column: 14, scope: !4144)
!4146 = !DILocalVariable(name: "out", scope: !4144, file: !63, line: 3799, type: !52)
!4147 = !DILocation(line: 3799, column: 14, scope: !4144)
!4148 = !DILocalVariable(name: "remainder", scope: !4144, file: !63, line: 3803, type: !52)
!4149 = !DILocation(line: 3803, column: 14, scope: !4144)
!4150 = !DILocalVariable(name: "cheap_slots", scope: !4144, file: !63, line: 3806, type: !52)
!4151 = !DILocation(line: 3806, column: 14, scope: !4144)
!4152 = !DILocation(line: 3811, column: 21, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4144, file: !63, line: 3811, column: 7)
!4154 = !DILocation(line: 3811, column: 16, scope: !4153)
!4155 = !DILocation(line: 3811, column: 12, scope: !4153)
!4156 = !DILocation(line: 3811, column: 26, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4153, file: !63, line: 3811, column: 7)
!4158 = !DILocation(line: 3811, column: 36, scope: !4157)
!4159 = !DILocation(line: 3811, column: 45, scope: !4157)
!4160 = !DILocation(line: 3811, column: 43, scope: !4157)
!4161 = !DILocation(line: 3811, column: 33, scope: !4157)
!4162 = !DILocation(line: 3811, column: 7, scope: !4153)
!4163 = !DILocalVariable(name: "tfp", scope: !4164, file: !63, line: 3813, type: !389)
!4164 = distinct !DILexicalBlock(scope: !4157, file: !63, line: 3812, column: 9)
!4165 = !DILocation(line: 3813, column: 17, scope: !4164)
!4166 = !DILocalVariable(name: "temp", scope: !4164, file: !63, line: 3814, type: !407)
!4167 = !DILocation(line: 3814, column: 28, scope: !4164)
!4168 = !DILocation(line: 3814, column: 35, scope: !4164)
!4169 = !DILocalVariable(name: "num_merged", scope: !4164, file: !63, line: 3815, type: !52)
!4170 = !DILocation(line: 3815, column: 18, scope: !4164)
!4171 = !DILocation(line: 3815, column: 44, scope: !4164)
!4172 = !DILocation(line: 3815, column: 50, scope: !4164)
!4173 = !DILocation(line: 3815, column: 55, scope: !4164)
!4174 = !DILocation(line: 3816, column: 43, scope: !4164)
!4175 = !DILocation(line: 3816, column: 51, scope: !4164)
!4176 = !DILocation(line: 3816, column: 56, scope: !4164)
!4177 = !DILocation(line: 3816, column: 62, scope: !4164)
!4178 = !DILocation(line: 3815, column: 31, scope: !4164)
!4179 = !DILocation(line: 3817, column: 21, scope: !4164)
!4180 = !DILocation(line: 3817, column: 18, scope: !4164)
!4181 = !DILocation(line: 3818, column: 29, scope: !4164)
!4182 = !DILocation(line: 3818, column: 35, scope: !4164)
!4183 = !DILocation(line: 3818, column: 11, scope: !4164)
!4184 = !DILocation(line: 3818, column: 17, scope: !4164)
!4185 = !DILocation(line: 3818, column: 22, scope: !4164)
!4186 = !DILocation(line: 3818, column: 27, scope: !4164)
!4187 = !DILocation(line: 3819, column: 29, scope: !4164)
!4188 = !DILocation(line: 3819, column: 11, scope: !4164)
!4189 = !DILocation(line: 3819, column: 17, scope: !4164)
!4190 = !DILocation(line: 3819, column: 22, scope: !4164)
!4191 = !DILocation(line: 3819, column: 27, scope: !4164)
!4192 = !DILocation(line: 3820, column: 17, scope: !4164)
!4193 = !DILocation(line: 3820, column: 14, scope: !4164)
!4194 = !DILocation(line: 3821, column: 9, scope: !4164)
!4195 = !DILocation(line: 3811, column: 52, scope: !4157)
!4196 = !DILocation(line: 3811, column: 7, scope: !4157)
!4197 = distinct !{!4197, !4162, !4198}
!4198 = !DILocation(line: 3821, column: 9, scope: !4153)
!4199 = !DILocation(line: 3823, column: 19, scope: !4144)
!4200 = !DILocation(line: 3823, column: 28, scope: !4144)
!4201 = !DILocation(line: 3823, column: 26, scope: !4144)
!4202 = !DILocation(line: 3823, column: 17, scope: !4144)
!4203 = !DILocation(line: 3824, column: 21, scope: !4144)
!4204 = !DILocation(line: 3824, column: 30, scope: !4144)
!4205 = !DILocation(line: 3824, column: 36, scope: !4144)
!4206 = !DILocation(line: 3824, column: 34, scope: !4144)
!4207 = !DILocation(line: 3824, column: 28, scope: !4144)
!4208 = !DILocation(line: 3824, column: 19, scope: !4144)
!4209 = !DILocation(line: 3826, column: 11, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4144, file: !63, line: 3826, column: 11)
!4211 = !DILocation(line: 3826, column: 25, scope: !4210)
!4212 = !DILocation(line: 3826, column: 23, scope: !4210)
!4213 = !DILocation(line: 3826, column: 11, scope: !4144)
!4214 = !DILocalVariable(name: "nshortmerge", scope: !4215, file: !63, line: 3831, type: !52)
!4215 = distinct !DILexicalBlock(scope: !4210, file: !63, line: 3827, column: 9)
!4216 = !DILocation(line: 3831, column: 18, scope: !4215)
!4217 = !DILocation(line: 3831, column: 32, scope: !4215)
!4218 = !DILocation(line: 3831, column: 44, scope: !4215)
!4219 = !DILocation(line: 3831, column: 42, scope: !4215)
!4220 = !DILocation(line: 3831, column: 56, scope: !4215)
!4221 = !DILocalVariable(name: "tfp", scope: !4215, file: !63, line: 3832, type: !389)
!4222 = !DILocation(line: 3832, column: 17, scope: !4215)
!4223 = !DILocalVariable(name: "temp", scope: !4215, file: !63, line: 3833, type: !407)
!4224 = !DILocation(line: 3833, column: 28, scope: !4215)
!4225 = !DILocation(line: 3833, column: 35, scope: !4215)
!4226 = !DILocalVariable(name: "num_merged", scope: !4215, file: !63, line: 3834, type: !52)
!4227 = !DILocation(line: 3834, column: 18, scope: !4215)
!4228 = !DILocation(line: 3834, column: 44, scope: !4215)
!4229 = !DILocation(line: 3834, column: 50, scope: !4215)
!4230 = !DILocation(line: 3834, column: 55, scope: !4215)
!4231 = !DILocation(line: 3835, column: 43, scope: !4215)
!4232 = !DILocation(line: 3835, column: 56, scope: !4215)
!4233 = !DILocation(line: 3835, column: 61, scope: !4215)
!4234 = !DILocation(line: 3835, column: 67, scope: !4215)
!4235 = !DILocation(line: 3834, column: 31, scope: !4215)
!4236 = !DILocation(line: 3836, column: 21, scope: !4215)
!4237 = !DILocation(line: 3836, column: 18, scope: !4215)
!4238 = !DILocation(line: 3837, column: 29, scope: !4215)
!4239 = !DILocation(line: 3837, column: 35, scope: !4215)
!4240 = !DILocation(line: 3837, column: 11, scope: !4215)
!4241 = !DILocation(line: 3837, column: 17, scope: !4215)
!4242 = !DILocation(line: 3837, column: 22, scope: !4215)
!4243 = !DILocation(line: 3837, column: 27, scope: !4215)
!4244 = !DILocation(line: 3838, column: 31, scope: !4215)
!4245 = !DILocation(line: 3838, column: 11, scope: !4215)
!4246 = !DILocation(line: 3838, column: 20, scope: !4215)
!4247 = !DILocation(line: 3838, column: 24, scope: !4215)
!4248 = !DILocation(line: 3838, column: 29, scope: !4215)
!4249 = !DILocation(line: 3839, column: 17, scope: !4215)
!4250 = !DILocation(line: 3839, column: 14, scope: !4215)
!4251 = !DILocation(line: 3840, column: 9, scope: !4215)
!4252 = !DILocation(line: 3844, column: 17, scope: !4144)
!4253 = !DILocation(line: 3844, column: 23, scope: !4144)
!4254 = !DILocation(line: 3844, column: 7, scope: !4144)
!4255 = !DILocation(line: 3844, column: 30, scope: !4144)
!4256 = !DILocation(line: 3844, column: 36, scope: !4144)
!4257 = !DILocation(line: 3844, column: 42, scope: !4144)
!4258 = !DILocation(line: 3844, column: 51, scope: !4144)
!4259 = !DILocation(line: 3844, column: 49, scope: !4144)
!4260 = !DILocation(line: 3844, column: 55, scope: !4144)
!4261 = !DILocation(line: 3845, column: 17, scope: !4144)
!4262 = !DILocation(line: 3845, column: 14, scope: !4144)
!4263 = !DILocation(line: 3846, column: 17, scope: !4144)
!4264 = !DILocation(line: 3846, column: 22, scope: !4144)
!4265 = !DILocation(line: 3846, column: 20, scope: !4144)
!4266 = !DILocation(line: 3846, column: 14, scope: !4144)
!4267 = distinct !{!4267, !4139, !4268}
!4268 = !DILocation(line: 3847, column: 5, scope: !4128)
!4269 = !DILocation(line: 3849, column: 25, scope: !4128)
!4270 = !DILocation(line: 3849, column: 32, scope: !4128)
!4271 = !DILocation(line: 3849, column: 40, scope: !4128)
!4272 = !DILocation(line: 3849, column: 48, scope: !4128)
!4273 = !DILocation(line: 3849, column: 3, scope: !4128)
!4274 = !DILocation(line: 3855, column: 3, scope: !4128)
!4275 = !DILocalVariable(name: "fps", scope: !4276, file: !63, line: 3858, type: !584)
!4276 = distinct !DILexicalBlock(scope: !4128, file: !63, line: 3856, column: 5)
!4277 = !DILocation(line: 3858, column: 14, scope: !4276)
!4278 = !DILocalVariable(name: "nopened", scope: !4276, file: !63, line: 3859, type: !52)
!4279 = !DILocation(line: 3859, column: 14, scope: !4276)
!4280 = !DILocation(line: 3859, column: 42, scope: !4276)
!4281 = !DILocation(line: 3859, column: 49, scope: !4276)
!4282 = !DILocation(line: 3859, column: 24, scope: !4276)
!4283 = !DILocation(line: 3861, column: 11, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4276, file: !63, line: 3861, column: 11)
!4285 = !DILocation(line: 3861, column: 22, scope: !4284)
!4286 = !DILocation(line: 3861, column: 19, scope: !4284)
!4287 = !DILocation(line: 3861, column: 11, scope: !4276)
!4288 = !DILocalVariable(name: "ofp", scope: !4289, file: !63, line: 3863, type: !389)
!4289 = distinct !DILexicalBlock(scope: !4284, file: !63, line: 3862, column: 9)
!4290 = !DILocation(line: 3863, column: 17, scope: !4289)
!4291 = !DILocation(line: 3863, column: 36, scope: !4289)
!4292 = !DILocation(line: 3863, column: 23, scope: !4289)
!4293 = !DILocation(line: 3864, column: 15, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4289, file: !63, line: 3864, column: 15)
!4295 = !DILocation(line: 3864, column: 15, scope: !4289)
!4296 = !DILocation(line: 3866, column: 25, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4294, file: !63, line: 3865, column: 13)
!4298 = !DILocation(line: 3866, column: 32, scope: !4297)
!4299 = !DILocation(line: 3866, column: 40, scope: !4297)
!4300 = !DILocation(line: 3866, column: 48, scope: !4297)
!4301 = !DILocation(line: 3866, column: 53, scope: !4297)
!4302 = !DILocation(line: 3866, column: 66, scope: !4297)
!4303 = !DILocation(line: 3866, column: 15, scope: !4297)
!4304 = !DILocation(line: 3867, column: 15, scope: !4297)
!4305 = !DILocation(line: 3869, column: 15, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4289, file: !63, line: 3869, column: 15)
!4307 = !DILocation(line: 3869, column: 21, scope: !4306)
!4308 = !DILocation(line: 3869, column: 31, scope: !4306)
!4309 = !DILocation(line: 3869, column: 34, scope: !4306)
!4310 = !DILocation(line: 3869, column: 42, scope: !4306)
!4311 = !DILocation(line: 3869, column: 15, scope: !4289)
!4312 = !DILocation(line: 3870, column: 23, scope: !4306)
!4313 = !DILocation(line: 3870, column: 41, scope: !4306)
!4314 = !DILocation(line: 3870, column: 13, scope: !4306)
!4315 = !DILocation(line: 3871, column: 9, scope: !4289)
!4316 = !DILocation(line: 3872, column: 16, scope: !4317)
!4317 = distinct !DILexicalBlock(scope: !4284, file: !63, line: 3872, column: 16)
!4318 = !DILocation(line: 3872, column: 24, scope: !4317)
!4319 = !DILocation(line: 3872, column: 16, scope: !4284)
!4320 = !DILocation(line: 3873, column: 19, scope: !4317)
!4321 = !DILocation(line: 3873, column: 37, scope: !4317)
!4322 = !DILocation(line: 3873, column: 43, scope: !4317)
!4323 = !DILocation(line: 3873, column: 52, scope: !4317)
!4324 = !DILocation(line: 3873, column: 9, scope: !4317)
!4325 = !DILocalVariable(name: "tfp", scope: !4276, file: !63, line: 3880, type: !389)
!4326 = !DILocation(line: 3880, column: 13, scope: !4276)
!4327 = !DILocalVariable(name: "temp", scope: !4276, file: !63, line: 3881, type: !407)
!4328 = !DILocation(line: 3881, column: 24, scope: !4276)
!4329 = !DILocation(line: 3882, column: 7, scope: !4276)
!4330 = !DILocation(line: 3884, column: 18, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4276, file: !63, line: 3883, column: 9)
!4332 = !DILocation(line: 3885, column: 20, scope: !4331)
!4333 = !DILocation(line: 3885, column: 24, scope: !4331)
!4334 = !DILocation(line: 3885, column: 34, scope: !4331)
!4335 = !DILocation(line: 3885, column: 40, scope: !4331)
!4336 = !DILocation(line: 3885, column: 49, scope: !4331)
!4337 = !DILocation(line: 3885, column: 11, scope: !4331)
!4338 = !DILocation(line: 3886, column: 46, scope: !4331)
!4339 = !DILocation(line: 3886, column: 54, scope: !4331)
!4340 = !DILocation(line: 3886, column: 43, scope: !4331)
!4341 = !DILocation(line: 3886, column: 18, scope: !4331)
!4342 = !DILocation(line: 3886, column: 16, scope: !4331)
!4343 = !DILocation(line: 3887, column: 9, scope: !4331)
!4344 = !DILocation(line: 3888, column: 15, scope: !4276)
!4345 = !DILocation(line: 3888, column: 14, scope: !4276)
!4346 = distinct !{!4346, !4329, !4347}
!4347 = !DILocation(line: 3888, column: 19, scope: !4276)
!4348 = !DILocation(line: 3891, column: 18, scope: !4276)
!4349 = !DILocation(line: 3891, column: 28, scope: !4276)
!4350 = !DILocation(line: 3891, column: 51, scope: !4276)
!4351 = !DILocation(line: 3891, column: 60, scope: !4276)
!4352 = !DILocation(line: 3891, column: 65, scope: !4276)
!4353 = !DILocation(line: 3891, column: 71, scope: !4276)
!4354 = !DILocation(line: 3892, column: 17, scope: !4276)
!4355 = !DILocation(line: 3891, column: 7, scope: !4276)
!4356 = !DILocation(line: 3893, column: 17, scope: !4276)
!4357 = !DILocation(line: 3893, column: 14, scope: !4276)
!4358 = !DILocation(line: 3894, column: 23, scope: !4276)
!4359 = !DILocation(line: 3894, column: 29, scope: !4276)
!4360 = !DILocation(line: 3894, column: 7, scope: !4276)
!4361 = !DILocation(line: 3894, column: 16, scope: !4276)
!4362 = !DILocation(line: 3894, column: 21, scope: !4276)
!4363 = !DILocation(line: 3895, column: 23, scope: !4276)
!4364 = !DILocation(line: 3895, column: 7, scope: !4276)
!4365 = !DILocation(line: 3895, column: 16, scope: !4276)
!4366 = !DILocation(line: 3895, column: 21, scope: !4276)
!4367 = !DILocation(line: 3897, column: 17, scope: !4276)
!4368 = !DILocation(line: 3897, column: 7, scope: !4276)
!4369 = !DILocation(line: 3897, column: 28, scope: !4276)
!4370 = !DILocation(line: 3897, column: 34, scope: !4276)
!4371 = !DILocation(line: 3897, column: 45, scope: !4276)
!4372 = !DILocation(line: 3897, column: 54, scope: !4276)
!4373 = !DILocation(line: 3897, column: 52, scope: !4276)
!4374 = !DILocation(line: 3897, column: 63, scope: !4276)
!4375 = !DILocation(line: 3898, column: 13, scope: !4276)
!4376 = !DILocation(line: 3899, column: 17, scope: !4276)
!4377 = !DILocation(line: 3899, column: 25, scope: !4276)
!4378 = !DILocation(line: 3899, column: 14, scope: !4276)
!4379 = distinct !{!4379, !4274, !4380}
!4380 = !DILocation(line: 3900, column: 5, scope: !4128)
!4381 = !DILocation(line: 3901, column: 1, scope: !4128)
!4382 = distinct !DISubprogram(name: "sort", scope: !63, file: !63, line: 3906, type: !4383, scopeLine: 3908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4383 = !DISubroutineType(types: !4384)
!4384 = !{null, !582, !52, !90, !52}
!4385 = !DILocalVariable(name: "files", arg: 1, scope: !4382, file: !63, line: 3906, type: !582)
!4386 = !DILocation(line: 3906, column: 20, scope: !4382)
!4387 = !DILocalVariable(name: "nfiles", arg: 2, scope: !4382, file: !63, line: 3906, type: !52)
!4388 = !DILocation(line: 3906, column: 34, scope: !4382)
!4389 = !DILocalVariable(name: "output_file", arg: 3, scope: !4382, file: !63, line: 3906, type: !90)
!4390 = !DILocation(line: 3906, column: 54, scope: !4382)
!4391 = !DILocalVariable(name: "nthreads", arg: 4, scope: !4382, file: !63, line: 3907, type: !52)
!4392 = !DILocation(line: 3907, column: 14, scope: !4382)
!4393 = !DILocalVariable(name: "buf", scope: !4382, file: !63, line: 3909, type: !608)
!4394 = !DILocation(line: 3909, column: 17, scope: !4382)
!4395 = !DILocalVariable(name: "ntemps", scope: !4382, file: !63, line: 3911, type: !52)
!4396 = !DILocation(line: 3911, column: 10, scope: !4382)
!4397 = !DILocalVariable(name: "output_file_created", scope: !4382, file: !63, line: 3912, type: !162)
!4398 = !DILocation(line: 3912, column: 8, scope: !4382)
!4399 = !DILocation(line: 3914, column: 7, scope: !4382)
!4400 = !DILocation(line: 3914, column: 13, scope: !4382)
!4401 = !DILocation(line: 3916, column: 3, scope: !4382)
!4402 = !DILocation(line: 3916, column: 10, scope: !4382)
!4403 = !DILocalVariable(name: "temp_output", scope: !4404, file: !63, line: 3918, type: !90)
!4404 = distinct !DILexicalBlock(scope: !4382, file: !63, line: 3917, column: 5)
!4405 = !DILocation(line: 3918, column: 19, scope: !4404)
!4406 = !DILocalVariable(name: "file", scope: !4404, file: !63, line: 3919, type: !90)
!4407 = !DILocation(line: 3919, column: 19, scope: !4404)
!4408 = !DILocation(line: 3919, column: 27, scope: !4404)
!4409 = !DILocation(line: 3919, column: 26, scope: !4404)
!4410 = !DILocalVariable(name: "fp", scope: !4404, file: !63, line: 3920, type: !389)
!4411 = !DILocation(line: 3920, column: 13, scope: !4404)
!4412 = !DILocation(line: 3920, column: 26, scope: !4404)
!4413 = !DILocation(line: 3920, column: 18, scope: !4404)
!4414 = !DILocalVariable(name: "tfp", scope: !4404, file: !63, line: 3921, type: !389)
!4415 = !DILocation(line: 3921, column: 13, scope: !4404)
!4416 = !DILocalVariable(name: "bytes_per_line", scope: !4404, file: !63, line: 3923, type: !52)
!4417 = !DILocation(line: 3923, column: 14, scope: !4404)
!4418 = !DILocation(line: 3924, column: 11, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4404, file: !63, line: 3924, column: 11)
!4420 = !DILocation(line: 3924, column: 20, scope: !4419)
!4421 = !DILocation(line: 3924, column: 11, scope: !4404)
!4422 = !DILocalVariable(name: "tmp", scope: !4423, file: !63, line: 3927, type: !52)
!4423 = distinct !DILexicalBlock(scope: !4419, file: !63, line: 3925, column: 9)
!4424 = !DILocation(line: 3927, column: 18, scope: !4423)
!4425 = !DILocalVariable(name: "mult", scope: !4423, file: !63, line: 3928, type: !52)
!4426 = !DILocation(line: 3928, column: 18, scope: !4423)
!4427 = !DILocation(line: 3929, column: 11, scope: !4423)
!4428 = !DILocation(line: 3929, column: 18, scope: !4423)
!4429 = !DILocation(line: 3929, column: 24, scope: !4423)
!4430 = !DILocation(line: 3929, column: 22, scope: !4423)
!4431 = !DILocation(line: 3931, column: 19, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4423, file: !63, line: 3930, column: 13)
!4433 = !DILocation(line: 3932, column: 19, scope: !4432)
!4434 = distinct !{!4434, !4427, !4435}
!4435 = !DILocation(line: 3933, column: 13, scope: !4423)
!4436 = !DILocation(line: 3934, column: 29, scope: !4423)
!4437 = !DILocation(line: 3934, column: 34, scope: !4423)
!4438 = !DILocation(line: 3934, column: 26, scope: !4423)
!4439 = !DILocation(line: 3935, column: 9, scope: !4423)
!4440 = !DILocation(line: 3937, column: 24, scope: !4419)
!4441 = !DILocation(line: 3939, column: 17, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4404, file: !63, line: 3939, column: 11)
!4443 = !DILocation(line: 3939, column: 13, scope: !4442)
!4444 = !DILocation(line: 3939, column: 11, scope: !4404)
!4445 = !DILocation(line: 3940, column: 24, scope: !4442)
!4446 = !DILocation(line: 3941, column: 44, scope: !4442)
!4447 = !DILocation(line: 3941, column: 51, scope: !4442)
!4448 = !DILocation(line: 3941, column: 59, scope: !4442)
!4449 = !DILocation(line: 3941, column: 18, scope: !4442)
!4450 = !DILocation(line: 3940, column: 9, scope: !4442)
!4451 = !DILocation(line: 3942, column: 11, scope: !4404)
!4452 = !DILocation(line: 3942, column: 15, scope: !4404)
!4453 = !DILocation(line: 3943, column: 12, scope: !4404)
!4454 = !DILocation(line: 3944, column: 13, scope: !4404)
!4455 = !DILocation(line: 3946, column: 7, scope: !4404)
!4456 = !DILocation(line: 3946, column: 29, scope: !4404)
!4457 = !DILocation(line: 3946, column: 33, scope: !4404)
!4458 = !DILocation(line: 3946, column: 14, scope: !4404)
!4459 = !DILocalVariable(name: "line", scope: !4460, file: !63, line: 3948, type: !553)
!4460 = distinct !DILexicalBlock(scope: !4404, file: !63, line: 3947, column: 9)
!4461 = !DILocation(line: 3948, column: 24, scope: !4460)
!4462 = !DILocation(line: 3950, column: 19, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4460, file: !63, line: 3950, column: 15)
!4464 = !DILocation(line: 3950, column: 23, scope: !4463)
!4465 = !DILocation(line: 3950, column: 26, scope: !4463)
!4466 = !DILocation(line: 3951, column: 15, scope: !4463)
!4467 = !DILocation(line: 3951, column: 19, scope: !4463)
!4468 = !DILocation(line: 3951, column: 34, scope: !4463)
!4469 = !DILocation(line: 3952, column: 26, scope: !4463)
!4470 = !DILocation(line: 3952, column: 38, scope: !4463)
!4471 = !DILocation(line: 3952, column: 32, scope: !4463)
!4472 = !DILocation(line: 3952, column: 45, scope: !4463)
!4473 = !DILocation(line: 3952, column: 66, scope: !4463)
!4474 = !DILocation(line: 3952, column: 60, scope: !4463)
!4475 = !DILocation(line: 3952, column: 43, scope: !4463)
!4476 = !DILocation(line: 3952, column: 19, scope: !4463)
!4477 = !DILocation(line: 3950, column: 15, scope: !4460)
!4478 = !DILocation(line: 3957, column: 30, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4463, file: !63, line: 3953, column: 13)
!4480 = !DILocation(line: 3957, column: 19, scope: !4479)
!4481 = !DILocation(line: 3957, column: 24, scope: !4479)
!4482 = !DILocation(line: 3958, column: 15, scope: !4479)
!4483 = !DILocation(line: 3961, column: 27, scope: !4460)
!4484 = !DILocation(line: 3962, column: 18, scope: !4460)
!4485 = !DILocation(line: 3962, column: 16, scope: !4460)
!4486 = !DILocation(line: 3963, column: 19, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4460, file: !63, line: 3963, column: 15)
!4488 = !DILocation(line: 3963, column: 23, scope: !4487)
!4489 = !DILocation(line: 3963, column: 27, scope: !4487)
!4490 = !DILocation(line: 3963, column: 34, scope: !4487)
!4491 = !DILocation(line: 3963, column: 38, scope: !4487)
!4492 = !DILocation(line: 3963, column: 45, scope: !4487)
!4493 = !DILocation(line: 3963, column: 53, scope: !4487)
!4494 = !DILocation(line: 3963, column: 49, scope: !4487)
!4495 = !DILocation(line: 3963, column: 15, scope: !4460)
!4496 = !DILocation(line: 3965, column: 24, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4487, file: !63, line: 3964, column: 13)
!4498 = !DILocation(line: 3965, column: 28, scope: !4497)
!4499 = !DILocation(line: 3965, column: 15, scope: !4497)
!4500 = !DILocation(line: 3966, column: 29, scope: !4497)
!4501 = !DILocation(line: 3966, column: 21, scope: !4497)
!4502 = !DILocation(line: 3966, column: 19, scope: !4497)
!4503 = !DILocation(line: 3967, column: 29, scope: !4497)
!4504 = !DILocation(line: 3967, column: 27, scope: !4497)
!4505 = !DILocation(line: 3968, column: 35, scope: !4497)
!4506 = !DILocation(line: 3969, column: 13, scope: !4497)
!4507 = !DILocation(line: 3972, column: 15, scope: !4508)
!4508 = distinct !DILexicalBlock(scope: !4487, file: !63, line: 3971, column: 13)
!4509 = !DILocation(line: 3973, column: 29, scope: !4508)
!4510 = !DILocation(line: 3973, column: 49, scope: !4508)
!4511 = !DILocation(line: 3973, column: 27, scope: !4508)
!4512 = !DILocation(line: 3975, column: 23, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4460, file: !63, line: 3975, column: 15)
!4514 = !DILocation(line: 3975, column: 17, scope: !4513)
!4515 = !DILocation(line: 3975, column: 15, scope: !4460)
!4516 = !DILocalVariable(name: "queue", scope: !4517, file: !63, line: 3977, type: !684)
!4517 = distinct !DILexicalBlock(scope: !4513, file: !63, line: 3976, column: 13)
!4518 = !DILocation(line: 3977, column: 39, scope: !4517)
!4519 = !DILocation(line: 3978, column: 35, scope: !4517)
!4520 = !DILocation(line: 3978, column: 15, scope: !4517)
!4521 = !DILocalVariable(name: "merge_tree", scope: !4517, file: !63, line: 3979, type: !621)
!4522 = !DILocation(line: 3979, column: 34, scope: !4517)
!4523 = !DILocation(line: 3980, column: 34, scope: !4517)
!4524 = !DILocation(line: 3980, column: 48, scope: !4517)
!4525 = !DILocation(line: 3980, column: 56, scope: !4517)
!4526 = !DILocation(line: 3980, column: 17, scope: !4517)
!4527 = !DILocation(line: 3982, column: 26, scope: !4517)
!4528 = !DILocation(line: 3982, column: 32, scope: !4517)
!4529 = !DILocation(line: 3982, column: 46, scope: !4517)
!4530 = !DILocation(line: 3982, column: 54, scope: !4517)
!4531 = !DILocation(line: 3982, column: 65, scope: !4517)
!4532 = !DILocation(line: 3983, column: 34, scope: !4517)
!4533 = !DILocation(line: 3983, column: 39, scope: !4517)
!4534 = !DILocation(line: 3982, column: 15, scope: !4517)
!4535 = !DILocation(line: 3989, column: 13, scope: !4517)
!4536 = !DILocation(line: 3991, column: 27, scope: !4513)
!4537 = !DILocation(line: 3991, column: 32, scope: !4513)
!4538 = !DILocation(line: 3991, column: 37, scope: !4513)
!4539 = !DILocation(line: 3991, column: 42, scope: !4513)
!4540 = !DILocation(line: 3991, column: 13, scope: !4513)
!4541 = !DILocation(line: 3993, column: 20, scope: !4460)
!4542 = !DILocation(line: 3993, column: 25, scope: !4460)
!4543 = !DILocation(line: 3993, column: 11, scope: !4460)
!4544 = !DILocation(line: 3995, column: 15, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4460, file: !63, line: 3995, column: 15)
!4546 = !DILocation(line: 3995, column: 15, scope: !4460)
!4547 = !DILocation(line: 3996, column: 13, scope: !4545)
!4548 = distinct !{!4548, !4455, !4549}
!4549 = !DILocation(line: 3997, column: 9, scope: !4404)
!4550 = !DILocation(line: 3998, column: 16, scope: !4404)
!4551 = !DILocation(line: 3998, column: 20, scope: !4404)
!4552 = !DILocation(line: 3998, column: 7, scope: !4404)
!4553 = distinct !{!4553, !4401, !4554}
!4554 = !DILocation(line: 3999, column: 5, scope: !4382)
!4555 = !DILabel(scope: !4382, name: "finish", file: !63, line: 4001)
!4556 = !DILocation(line: 4001, column: 2, scope: !4382)
!4557 = !DILocation(line: 4002, column: 13, scope: !4382)
!4558 = !DILocation(line: 4002, column: 3, scope: !4382)
!4559 = !DILocation(line: 4004, column: 9, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4382, file: !63, line: 4004, column: 7)
!4561 = !DILocation(line: 4004, column: 7, scope: !4382)
!4562 = !DILocalVariable(name: "node", scope: !4563, file: !63, line: 4006, type: !407)
!4563 = distinct !DILexicalBlock(scope: !4560, file: !63, line: 4005, column: 5)
!4564 = !DILocation(line: 4006, column: 24, scope: !4563)
!4565 = !DILocation(line: 4006, column: 31, scope: !4563)
!4566 = !DILocalVariable(name: "tempfiles", scope: !4563, file: !63, line: 4007, type: !402)
!4567 = !DILocation(line: 4007, column: 24, scope: !4563)
!4568 = !DILocation(line: 4007, column: 46, scope: !4563)
!4569 = !DILocation(line: 4007, column: 36, scope: !4563)
!4570 = !DILocalVariable(name: "i", scope: !4571, file: !63, line: 4008, type: !52)
!4571 = distinct !DILexicalBlock(scope: !4563, file: !63, line: 4008, column: 7)
!4572 = !DILocation(line: 4008, column: 19, scope: !4571)
!4573 = !DILocation(line: 4008, column: 12, scope: !4571)
!4574 = !DILocation(line: 4008, column: 26, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4571, file: !63, line: 4008, column: 7)
!4576 = !DILocation(line: 4008, column: 7, scope: !4571)
!4577 = !DILocation(line: 4010, column: 31, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4575, file: !63, line: 4009, column: 9)
!4579 = !DILocation(line: 4010, column: 37, scope: !4578)
!4580 = !DILocation(line: 4010, column: 11, scope: !4578)
!4581 = !DILocation(line: 4010, column: 21, scope: !4578)
!4582 = !DILocation(line: 4010, column: 24, scope: !4578)
!4583 = !DILocation(line: 4010, column: 29, scope: !4578)
!4584 = !DILocation(line: 4011, column: 31, scope: !4578)
!4585 = !DILocation(line: 4011, column: 11, scope: !4578)
!4586 = !DILocation(line: 4011, column: 21, scope: !4578)
!4587 = !DILocation(line: 4011, column: 24, scope: !4578)
!4588 = !DILocation(line: 4011, column: 29, scope: !4578)
!4589 = !DILocation(line: 4012, column: 18, scope: !4578)
!4590 = !DILocation(line: 4012, column: 24, scope: !4578)
!4591 = !DILocation(line: 4012, column: 16, scope: !4578)
!4592 = !DILocation(line: 4013, column: 9, scope: !4578)
!4593 = !DILocation(line: 4008, column: 33, scope: !4575)
!4594 = !DILocation(line: 4008, column: 7, scope: !4575)
!4595 = distinct !{!4595, !4576, !4596}
!4596 = !DILocation(line: 4013, column: 9, scope: !4571)
!4597 = !DILocation(line: 4014, column: 14, scope: !4563)
!4598 = !DILocation(line: 4014, column: 25, scope: !4563)
!4599 = !DILocation(line: 4014, column: 33, scope: !4563)
!4600 = !DILocation(line: 4014, column: 41, scope: !4563)
!4601 = !DILocation(line: 4014, column: 7, scope: !4563)
!4602 = !DILocation(line: 4015, column: 13, scope: !4563)
!4603 = !DILocation(line: 4015, column: 7, scope: !4563)
!4604 = !DILocation(line: 4016, column: 5, scope: !4563)
!4605 = !DILocation(line: 4018, column: 3, scope: !4382)
!4606 = !DILocation(line: 4019, column: 1, scope: !4382)
!4607 = distinct !DISubprogram(name: "sort_die", scope: !63, file: !63, line: 401, type: !3101, scopeLine: 402, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4608 = !DILocalVariable(name: "message", arg: 1, scope: !4607, file: !63, line: 401, type: !90)
!4609 = !DILocation(line: 401, column: 23, scope: !4607)
!4610 = !DILocalVariable(name: "file", arg: 2, scope: !4607, file: !63, line: 401, type: !90)
!4611 = !DILocation(line: 401, column: 44, scope: !4607)
!4612 = !DILocation(line: 403, column: 3, scope: !4607)
!4613 = !DILocalVariable(name: "fps", arg: 1, scope: !807, file: !63, line: 1513, type: !663)
!4614 = !DILocation(line: 1513, column: 32, scope: !807)
!4615 = !DILocalVariable(name: "nfps", arg: 2, scope: !807, file: !63, line: 1513, type: !52)
!4616 = !DILocation(line: 1513, column: 44, scope: !807)
!4617 = !DILocalVariable(name: "files", arg: 3, scope: !807, file: !63, line: 1514, type: !582)
!4618 = !DILocation(line: 1514, column: 32, scope: !807)
!4619 = !DILocalVariable(name: "nfiles", arg: 4, scope: !807, file: !63, line: 1514, type: !52)
!4620 = !DILocation(line: 1514, column: 46, scope: !807)
!4621 = !DILocalVariable(name: "line_bytes", arg: 5, scope: !807, file: !63, line: 1515, type: !52)
!4622 = !DILocation(line: 1515, column: 26, scope: !807)
!4623 = !DILocalVariable(name: "worst_case_per_input_byte", scope: !807, file: !63, line: 1522, type: !52)
!4624 = !DILocation(line: 1522, column: 10, scope: !807)
!4625 = !DILocation(line: 1522, column: 38, scope: !807)
!4626 = !DILocation(line: 1522, column: 49, scope: !807)
!4627 = !DILocalVariable(name: "size", scope: !807, file: !63, line: 1526, type: !52)
!4628 = !DILocation(line: 1526, column: 10, scope: !807)
!4629 = !DILocation(line: 1526, column: 17, scope: !807)
!4630 = !DILocation(line: 1526, column: 43, scope: !807)
!4631 = !DILocalVariable(name: "i", scope: !4632, file: !63, line: 1528, type: !52)
!4632 = distinct !DILexicalBlock(scope: !807, file: !63, line: 1528, column: 3)
!4633 = !DILocation(line: 1528, column: 15, scope: !4632)
!4634 = !DILocation(line: 1528, column: 8, scope: !4632)
!4635 = !DILocation(line: 1528, column: 22, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4632, file: !63, line: 1528, column: 3)
!4637 = !DILocation(line: 1528, column: 26, scope: !4636)
!4638 = !DILocation(line: 1528, column: 24, scope: !4636)
!4639 = !DILocation(line: 1528, column: 3, scope: !4632)
!4640 = !DILocalVariable(name: "st", scope: !4641, file: !63, line: 1530, type: !483)
!4641 = distinct !DILexicalBlock(scope: !4636, file: !63, line: 1529, column: 5)
!4642 = !DILocation(line: 1530, column: 19, scope: !4641)
!4643 = !DILocalVariable(name: "file_size", scope: !4641, file: !63, line: 1531, type: !661)
!4644 = !DILocation(line: 1531, column: 13, scope: !4641)
!4645 = !DILocalVariable(name: "worst_case", scope: !4641, file: !63, line: 1532, type: !52)
!4646 = !DILocation(line: 1532, column: 14, scope: !4641)
!4647 = !DILocation(line: 1534, column: 12, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4641, file: !63, line: 1534, column: 11)
!4649 = !DILocation(line: 1534, column: 16, scope: !4648)
!4650 = !DILocation(line: 1534, column: 14, scope: !4648)
!4651 = !DILocation(line: 1534, column: 38, scope: !4648)
!4652 = !DILocation(line: 1534, column: 42, scope: !4648)
!4653 = !DILocation(line: 1534, column: 30, scope: !4648)
!4654 = !DILocation(line: 1534, column: 23, scope: !4648)
!4655 = !DILocation(line: 1535, column: 14, scope: !4648)
!4656 = !DILocation(line: 1535, column: 38, scope: !4648)
!4657 = !DILocation(line: 1536, column: 20, scope: !4648)
!4658 = !DILocation(line: 1536, column: 26, scope: !4648)
!4659 = !DILocation(line: 1536, column: 14, scope: !4648)
!4660 = !DILocation(line: 1537, column: 11, scope: !4648)
!4661 = !DILocation(line: 1534, column: 11, scope: !4641)
!4662 = !DILocation(line: 1538, column: 19, scope: !4648)
!4663 = !DILocation(line: 1538, column: 37, scope: !4648)
!4664 = !DILocation(line: 1538, column: 43, scope: !4648)
!4665 = !DILocation(line: 1538, column: 9, scope: !4648)
!4666 = !DILocation(line: 1540, column: 11, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4641, file: !63, line: 1540, column: 11)
!4668 = !DILocation(line: 1540, column: 11, scope: !4641)
!4669 = !DILocation(line: 1541, column: 24, scope: !4667)
!4670 = !DILocation(line: 1541, column: 19, scope: !4667)
!4671 = !DILocation(line: 1541, column: 9, scope: !4667)
!4672 = !DILocation(line: 1546, column: 15, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4674, file: !63, line: 1546, column: 15)
!4674 = distinct !DILexicalBlock(scope: !4667, file: !63, line: 1543, column: 9)
!4675 = !DILocation(line: 1546, column: 15, scope: !4674)
!4676 = !DILocation(line: 1547, column: 20, scope: !4673)
!4677 = !DILocation(line: 1547, column: 13, scope: !4673)
!4678 = !DILocation(line: 1548, column: 21, scope: !4674)
!4679 = !DILocation(line: 1551, column: 13, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4641, file: !63, line: 1551, column: 11)
!4681 = !DILocation(line: 1551, column: 11, scope: !4641)
!4682 = !DILocation(line: 1553, column: 24, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4680, file: !63, line: 1552, column: 9)
!4684 = !DILocation(line: 1553, column: 22, scope: !4683)
!4685 = !DILocation(line: 1554, column: 17, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4683, file: !63, line: 1554, column: 15)
!4687 = !DILocation(line: 1554, column: 15, scope: !4683)
!4688 = !DILocation(line: 1555, column: 26, scope: !4686)
!4689 = !DILocation(line: 1555, column: 24, scope: !4686)
!4690 = !DILocation(line: 1555, column: 13, scope: !4686)
!4691 = !DILocation(line: 1556, column: 9, scope: !4683)
!4692 = !DILocation(line: 1561, column: 20, scope: !4641)
!4693 = !DILocation(line: 1561, column: 32, scope: !4641)
!4694 = !DILocation(line: 1561, column: 30, scope: !4641)
!4695 = !DILocation(line: 1561, column: 58, scope: !4641)
!4696 = !DILocation(line: 1561, column: 18, scope: !4641)
!4697 = !DILocation(line: 1562, column: 11, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4641, file: !63, line: 1562, column: 11)
!4699 = !DILocation(line: 1562, column: 24, scope: !4698)
!4700 = !DILocation(line: 1562, column: 37, scope: !4698)
!4701 = !DILocation(line: 1562, column: 35, scope: !4698)
!4702 = !DILocation(line: 1562, column: 21, scope: !4698)
!4703 = !DILocation(line: 1563, column: 11, scope: !4698)
!4704 = !DILocation(line: 1563, column: 14, scope: !4698)
!4705 = !DILocation(line: 1563, column: 27, scope: !4698)
!4706 = !DILocation(line: 1563, column: 25, scope: !4698)
!4707 = !DILocation(line: 1563, column: 35, scope: !4698)
!4708 = !DILocation(line: 1563, column: 32, scope: !4698)
!4709 = !DILocation(line: 1562, column: 11, scope: !4641)
!4710 = !DILocation(line: 1564, column: 16, scope: !4698)
!4711 = !DILocation(line: 1564, column: 9, scope: !4698)
!4712 = !DILocation(line: 1565, column: 15, scope: !4641)
!4713 = !DILocation(line: 1565, column: 12, scope: !4641)
!4714 = !DILocation(line: 1566, column: 5, scope: !4641)
!4715 = !DILocation(line: 1528, column: 35, scope: !4636)
!4716 = !DILocation(line: 1528, column: 3, scope: !4636)
!4717 = distinct !{!4717, !4639, !4718}
!4718 = !DILocation(line: 1566, column: 5, scope: !4632)
!4719 = !DILocation(line: 1568, column: 10, scope: !807)
!4720 = !DILocation(line: 1568, column: 3, scope: !807)
!4721 = !DILocation(line: 1569, column: 1, scope: !807)
!4722 = distinct !DISubprogram(name: "initbuf", scope: !63, file: !63, line: 1576, type: !4723, scopeLine: 1577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4723 = !DISubroutineType(types: !4724)
!4724 = !{null, !607, !52, !52}
!4725 = !DILocalVariable(name: "buf", arg: 1, scope: !4722, file: !63, line: 1576, type: !607)
!4726 = !DILocation(line: 1576, column: 25, scope: !4722)
!4727 = !DILocalVariable(name: "line_bytes", arg: 2, scope: !4722, file: !63, line: 1576, type: !52)
!4728 = !DILocation(line: 1576, column: 37, scope: !4722)
!4729 = !DILocalVariable(name: "alloc", arg: 3, scope: !4722, file: !63, line: 1576, type: !52)
!4730 = !DILocation(line: 1576, column: 56, scope: !4722)
!4731 = !DILocation(line: 1582, column: 3, scope: !4722)
!4732 = !DILocation(line: 1584, column: 39, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4722, file: !63, line: 1583, column: 5)
!4734 = !DILocation(line: 1584, column: 45, scope: !4733)
!4735 = !DILocation(line: 1584, column: 37, scope: !4733)
!4736 = !DILocation(line: 1584, column: 13, scope: !4733)
!4737 = !DILocation(line: 1585, column: 26, scope: !4733)
!4738 = !DILocation(line: 1585, column: 18, scope: !4733)
!4739 = !DILocation(line: 1585, column: 7, scope: !4733)
!4740 = !DILocation(line: 1585, column: 12, scope: !4733)
!4741 = !DILocation(line: 1585, column: 16, scope: !4733)
!4742 = !DILocation(line: 1586, column: 11, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4733, file: !63, line: 1586, column: 11)
!4744 = !DILocation(line: 1586, column: 16, scope: !4743)
!4745 = !DILocation(line: 1586, column: 11, scope: !4733)
!4746 = !DILocation(line: 1587, column: 9, scope: !4743)
!4747 = !DILocation(line: 1588, column: 13, scope: !4733)
!4748 = !DILocation(line: 1589, column: 11, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4733, file: !63, line: 1589, column: 11)
!4750 = !DILocation(line: 1589, column: 20, scope: !4749)
!4751 = !DILocation(line: 1589, column: 31, scope: !4749)
!4752 = !DILocation(line: 1589, column: 17, scope: !4749)
!4753 = !DILocation(line: 1589, column: 11, scope: !4733)
!4754 = !DILocation(line: 1590, column: 9, scope: !4749)
!4755 = distinct !{!4755, !4731, !4756}
!4756 = !DILocation(line: 1591, column: 5, scope: !4722)
!4757 = !DILocation(line: 1593, column: 21, scope: !4722)
!4758 = !DILocation(line: 1593, column: 3, scope: !4722)
!4759 = !DILocation(line: 1593, column: 8, scope: !4722)
!4760 = !DILocation(line: 1593, column: 19, scope: !4722)
!4761 = !DILocation(line: 1594, column: 16, scope: !4722)
!4762 = !DILocation(line: 1594, column: 3, scope: !4722)
!4763 = !DILocation(line: 1594, column: 8, scope: !4722)
!4764 = !DILocation(line: 1594, column: 14, scope: !4722)
!4765 = !DILocation(line: 1595, column: 27, scope: !4722)
!4766 = !DILocation(line: 1595, column: 32, scope: !4722)
!4767 = !DILocation(line: 1595, column: 39, scope: !4722)
!4768 = !DILocation(line: 1595, column: 15, scope: !4722)
!4769 = !DILocation(line: 1595, column: 20, scope: !4722)
!4770 = !DILocation(line: 1595, column: 25, scope: !4722)
!4771 = !DILocation(line: 1595, column: 3, scope: !4722)
!4772 = !DILocation(line: 1595, column: 8, scope: !4722)
!4773 = !DILocation(line: 1595, column: 13, scope: !4722)
!4774 = !DILocation(line: 1596, column: 3, scope: !4722)
!4775 = !DILocation(line: 1596, column: 8, scope: !4722)
!4776 = !DILocation(line: 1596, column: 12, scope: !4722)
!4777 = !DILocation(line: 1597, column: 1, scope: !4722)
!4778 = distinct !DISubprogram(name: "fillbuf", scope: !63, file: !63, line: 1759, type: !4779, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!4779 = !DISubroutineType(types: !4780)
!4780 = !{!162, !607, !389, !90}
!4781 = !DILocalVariable(name: "buf", arg: 1, scope: !4778, file: !63, line: 1759, type: !607)
!4782 = !DILocation(line: 1759, column: 25, scope: !4778)
!4783 = !DILocalVariable(name: "fp", arg: 2, scope: !4778, file: !63, line: 1759, type: !389)
!4784 = !DILocation(line: 1759, column: 36, scope: !4778)
!4785 = !DILocalVariable(name: "file", arg: 3, scope: !4778, file: !63, line: 1759, type: !90)
!4786 = !DILocation(line: 1759, column: 52, scope: !4778)
!4787 = !DILocalVariable(name: "key", scope: !4778, file: !63, line: 1761, type: !522)
!4788 = !DILocation(line: 1761, column: 26, scope: !4778)
!4789 = !DILocation(line: 1761, column: 32, scope: !4778)
!4790 = !DILocalVariable(name: "eol", scope: !4778, file: !63, line: 1762, type: !8)
!4791 = !DILocation(line: 1762, column: 8, scope: !4778)
!4792 = !DILocation(line: 1762, column: 14, scope: !4778)
!4793 = !DILocalVariable(name: "line_bytes", scope: !4778, file: !63, line: 1763, type: !52)
!4794 = !DILocation(line: 1763, column: 10, scope: !4778)
!4795 = !DILocation(line: 1763, column: 23, scope: !4778)
!4796 = !DILocation(line: 1763, column: 28, scope: !4778)
!4797 = !DILocalVariable(name: "mergesize", scope: !4778, file: !63, line: 1764, type: !52)
!4798 = !DILocation(line: 1764, column: 10, scope: !4778)
!4799 = !DILocation(line: 1764, column: 22, scope: !4778)
!4800 = !DILocation(line: 1764, column: 40, scope: !4778)
!4801 = !DILocation(line: 1766, column: 7, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4778, file: !63, line: 1766, column: 7)
!4803 = !DILocation(line: 1766, column: 12, scope: !4802)
!4804 = !DILocation(line: 1766, column: 7, scope: !4778)
!4805 = !DILocation(line: 1767, column: 5, scope: !4802)
!4806 = !DILocation(line: 1769, column: 7, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4778, file: !63, line: 1769, column: 7)
!4808 = !DILocation(line: 1769, column: 12, scope: !4807)
!4809 = !DILocation(line: 1769, column: 20, scope: !4807)
!4810 = !DILocation(line: 1769, column: 25, scope: !4807)
!4811 = !DILocation(line: 1769, column: 17, scope: !4807)
!4812 = !DILocation(line: 1769, column: 7, scope: !4778)
!4813 = !DILocation(line: 1771, column: 16, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4807, file: !63, line: 1770, column: 5)
!4815 = !DILocation(line: 1771, column: 21, scope: !4814)
!4816 = !DILocation(line: 1771, column: 26, scope: !4814)
!4817 = !DILocation(line: 1771, column: 31, scope: !4814)
!4818 = !DILocation(line: 1771, column: 37, scope: !4814)
!4819 = !DILocation(line: 1771, column: 42, scope: !4814)
!4820 = !DILocation(line: 1771, column: 35, scope: !4814)
!4821 = !DILocation(line: 1771, column: 49, scope: !4814)
!4822 = !DILocation(line: 1771, column: 54, scope: !4814)
!4823 = !DILocation(line: 1771, column: 47, scope: !4814)
!4824 = !DILocation(line: 1771, column: 60, scope: !4814)
!4825 = !DILocation(line: 1771, column: 65, scope: !4814)
!4826 = !DILocation(line: 1771, column: 7, scope: !4814)
!4827 = !DILocation(line: 1772, column: 19, scope: !4814)
!4828 = !DILocation(line: 1772, column: 24, scope: !4814)
!4829 = !DILocation(line: 1772, column: 7, scope: !4814)
!4830 = !DILocation(line: 1772, column: 12, scope: !4814)
!4831 = !DILocation(line: 1772, column: 17, scope: !4814)
!4832 = !DILocation(line: 1773, column: 7, scope: !4814)
!4833 = !DILocation(line: 1773, column: 12, scope: !4814)
!4834 = !DILocation(line: 1773, column: 19, scope: !4814)
!4835 = !DILocation(line: 1774, column: 5, scope: !4814)
!4836 = !DILocation(line: 1776, column: 3, scope: !4778)
!4837 = !DILocalVariable(name: "ptr", scope: !4838, file: !63, line: 1778, type: !7)
!4838 = distinct !DILexicalBlock(scope: !4778, file: !63, line: 1777, column: 5)
!4839 = !DILocation(line: 1778, column: 13, scope: !4838)
!4840 = !DILocation(line: 1778, column: 19, scope: !4838)
!4841 = !DILocation(line: 1778, column: 24, scope: !4838)
!4842 = !DILocation(line: 1778, column: 30, scope: !4838)
!4843 = !DILocation(line: 1778, column: 35, scope: !4838)
!4844 = !DILocation(line: 1778, column: 28, scope: !4838)
!4845 = !DILocalVariable(name: "linelim", scope: !4838, file: !63, line: 1779, type: !553)
!4846 = !DILocation(line: 1779, column: 20, scope: !4838)
!4847 = !DILocation(line: 1779, column: 46, scope: !4838)
!4848 = !DILocation(line: 1779, column: 30, scope: !4838)
!4849 = !DILocalVariable(name: "line", scope: !4838, file: !63, line: 1780, type: !553)
!4850 = !DILocation(line: 1780, column: 20, scope: !4838)
!4851 = !DILocation(line: 1780, column: 27, scope: !4838)
!4852 = !DILocation(line: 1780, column: 37, scope: !4838)
!4853 = !DILocation(line: 1780, column: 42, scope: !4838)
!4854 = !DILocation(line: 1780, column: 35, scope: !4838)
!4855 = !DILocalVariable(name: "avail", scope: !4838, file: !63, line: 1781, type: !52)
!4856 = !DILocation(line: 1781, column: 14, scope: !4838)
!4857 = !DILocation(line: 1781, column: 31, scope: !4838)
!4858 = !DILocation(line: 1781, column: 22, scope: !4838)
!4859 = !DILocation(line: 1781, column: 41, scope: !4838)
!4860 = !DILocation(line: 1781, column: 46, scope: !4838)
!4861 = !DILocation(line: 1781, column: 55, scope: !4838)
!4862 = !DILocation(line: 1781, column: 53, scope: !4838)
!4863 = !DILocation(line: 1781, column: 39, scope: !4838)
!4864 = !DILocation(line: 1781, column: 68, scope: !4838)
!4865 = !DILocation(line: 1781, column: 66, scope: !4838)
!4866 = !DILocalVariable(name: "line_start", scope: !4838, file: !63, line: 1782, type: !7)
!4867 = !DILocation(line: 1782, column: 13, scope: !4838)
!4868 = !DILocation(line: 1782, column: 26, scope: !4838)
!4869 = !DILocation(line: 1782, column: 31, scope: !4838)
!4870 = !DILocation(line: 1782, column: 40, scope: !4838)
!4871 = !DILocation(line: 1782, column: 46, scope: !4838)
!4872 = !DILocation(line: 1782, column: 53, scope: !4838)
!4873 = !DILocation(line: 1782, column: 59, scope: !4838)
!4874 = !DILocation(line: 1782, column: 51, scope: !4838)
!4875 = !DILocation(line: 1782, column: 68, scope: !4838)
!4876 = !DILocation(line: 1782, column: 73, scope: !4838)
!4877 = !DILocation(line: 1784, column: 7, scope: !4838)
!4878 = !DILocation(line: 1784, column: 14, scope: !4838)
!4879 = !DILocation(line: 1784, column: 25, scope: !4838)
!4880 = !DILocation(line: 1784, column: 31, scope: !4838)
!4881 = !DILocation(line: 1784, column: 29, scope: !4838)
!4882 = !DILocalVariable(name: "readsize", scope: !4883, file: !63, line: 1791, type: !52)
!4883 = distinct !DILexicalBlock(scope: !4838, file: !63, line: 1785, column: 9)
!4884 = !DILocation(line: 1791, column: 18, scope: !4883)
!4885 = !DILocation(line: 1791, column: 30, scope: !4883)
!4886 = !DILocation(line: 1791, column: 36, scope: !4883)
!4887 = !DILocation(line: 1791, column: 44, scope: !4883)
!4888 = !DILocation(line: 1791, column: 55, scope: !4883)
!4889 = !DILocation(line: 1791, column: 41, scope: !4883)
!4890 = !DILocalVariable(name: "bytes_read", scope: !4883, file: !63, line: 1792, type: !52)
!4891 = !DILocation(line: 1792, column: 18, scope: !4883)
!4892 = !DILocation(line: 1792, column: 31, scope: !4883)
!4893 = !DILocalVariable(name: "ptrlim", scope: !4883, file: !63, line: 1793, type: !7)
!4894 = !DILocation(line: 1793, column: 17, scope: !4883)
!4895 = !DILocation(line: 1793, column: 26, scope: !4883)
!4896 = !DILocation(line: 1793, column: 32, scope: !4883)
!4897 = !DILocation(line: 1793, column: 30, scope: !4883)
!4898 = !DILocalVariable(name: "p", scope: !4883, file: !63, line: 1794, type: !7)
!4899 = !DILocation(line: 1794, column: 17, scope: !4883)
!4900 = !DILocation(line: 1795, column: 20, scope: !4883)
!4901 = !DILocation(line: 1795, column: 17, scope: !4883)
!4902 = !DILocation(line: 1797, column: 15, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4883, file: !63, line: 1797, column: 15)
!4904 = !DILocation(line: 1797, column: 29, scope: !4903)
!4905 = !DILocation(line: 1797, column: 26, scope: !4903)
!4906 = !DILocation(line: 1797, column: 15, scope: !4883)
!4907 = !DILocation(line: 1799, column: 19, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4909, file: !63, line: 1799, column: 19)
!4909 = distinct !DILexicalBlock(scope: !4903, file: !63, line: 1798, column: 13)
!4910 = !DILocation(line: 1799, column: 19, scope: !4909)
!4911 = !DILocation(line: 1800, column: 27, scope: !4908)
!4912 = !DILocation(line: 1800, column: 45, scope: !4908)
!4913 = !DILocation(line: 1800, column: 17, scope: !4908)
!4914 = !DILocation(line: 1801, column: 19, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4909, file: !63, line: 1801, column: 19)
!4916 = !DILocation(line: 1801, column: 19, scope: !4909)
!4917 = !DILocation(line: 1803, column: 19, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4915, file: !63, line: 1802, column: 17)
!4919 = !DILocation(line: 1803, column: 24, scope: !4918)
!4920 = !DILocation(line: 1803, column: 28, scope: !4918)
!4921 = !DILocation(line: 1804, column: 23, scope: !4922)
!4922 = distinct !DILexicalBlock(scope: !4918, file: !63, line: 1804, column: 23)
!4923 = !DILocation(line: 1804, column: 28, scope: !4922)
!4924 = !DILocation(line: 1804, column: 35, scope: !4922)
!4925 = !DILocation(line: 1804, column: 32, scope: !4922)
!4926 = !DILocation(line: 1804, column: 23, scope: !4918)
!4927 = !DILocation(line: 1805, column: 21, scope: !4922)
!4928 = !DILocation(line: 1806, column: 23, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4918, file: !63, line: 1806, column: 23)
!4930 = !DILocation(line: 1806, column: 37, scope: !4929)
!4931 = !DILocation(line: 1806, column: 34, scope: !4929)
!4932 = !DILocation(line: 1806, column: 44, scope: !4929)
!4933 = !DILocation(line: 1806, column: 47, scope: !4929)
!4934 = !DILocation(line: 1806, column: 61, scope: !4929)
!4935 = !DILocation(line: 1806, column: 58, scope: !4929)
!4936 = !DILocation(line: 1806, column: 23, scope: !4918)
!4937 = !DILocation(line: 1807, column: 33, scope: !4929)
!4938 = !DILocation(line: 1807, column: 28, scope: !4929)
!4939 = !DILocation(line: 1807, column: 31, scope: !4929)
!4940 = !DILocation(line: 1807, column: 21, scope: !4929)
!4941 = !DILocation(line: 1808, column: 17, scope: !4918)
!4942 = !DILocation(line: 1809, column: 13, scope: !4909)
!4943 = !DILocation(line: 1812, column: 11, scope: !4883)
!4944 = !DILocation(line: 1812, column: 31, scope: !4883)
!4945 = !DILocation(line: 1812, column: 36, scope: !4883)
!4946 = !DILocation(line: 1812, column: 41, scope: !4883)
!4947 = !DILocation(line: 1812, column: 50, scope: !4883)
!4948 = !DILocation(line: 1812, column: 48, scope: !4883)
!4949 = !DILocation(line: 1812, column: 23, scope: !4883)
!4950 = !DILocation(line: 1812, column: 21, scope: !4883)
!4951 = !DILocation(line: 1817, column: 16, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4883, file: !63, line: 1813, column: 13)
!4953 = !DILocation(line: 1817, column: 18, scope: !4952)
!4954 = !DILocation(line: 1818, column: 21, scope: !4952)
!4955 = !DILocation(line: 1818, column: 23, scope: !4952)
!4956 = !DILocation(line: 1818, column: 19, scope: !4952)
!4957 = !DILocation(line: 1819, column: 19, scope: !4952)
!4958 = !DILocation(line: 1820, column: 28, scope: !4952)
!4959 = !DILocation(line: 1820, column: 15, scope: !4952)
!4960 = !DILocation(line: 1820, column: 21, scope: !4952)
!4961 = !DILocation(line: 1820, column: 26, scope: !4952)
!4962 = !DILocation(line: 1821, column: 30, scope: !4952)
!4963 = !DILocation(line: 1821, column: 36, scope: !4952)
!4964 = !DILocation(line: 1821, column: 34, scope: !4952)
!4965 = !DILocation(line: 1821, column: 15, scope: !4952)
!4966 = !DILocation(line: 1821, column: 21, scope: !4952)
!4967 = !DILocation(line: 1821, column: 28, scope: !4952)
!4968 = !DILocation(line: 1822, column: 27, scope: !4952)
!4969 = !DILocation(line: 1822, column: 25, scope: !4952)
!4970 = !DILocation(line: 1823, column: 24, scope: !4952)
!4971 = !DILocation(line: 1823, column: 21, scope: !4952)
!4972 = !DILocation(line: 1825, column: 19, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4952, file: !63, line: 1825, column: 19)
!4974 = !DILocation(line: 1825, column: 19, scope: !4952)
!4975 = !DILocation(line: 1829, column: 35, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4973, file: !63, line: 1826, column: 17)
!4977 = !DILocation(line: 1829, column: 40, scope: !4976)
!4978 = !DILocation(line: 1829, column: 46, scope: !4976)
!4979 = !DILocation(line: 1830, column: 37, scope: !4976)
!4980 = !DILocation(line: 1831, column: 47, scope: !4976)
!4981 = !DILocation(line: 1831, column: 53, scope: !4976)
!4982 = !DILocation(line: 1831, column: 37, scope: !4976)
!4983 = !DILocation(line: 1829, column: 19, scope: !4976)
!4984 = !DILocation(line: 1829, column: 25, scope: !4976)
!4985 = !DILocation(line: 1829, column: 32, scope: !4976)
!4986 = !DILocation(line: 1833, column: 23, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4976, file: !63, line: 1833, column: 23)
!4988 = !DILocation(line: 1833, column: 28, scope: !4987)
!4989 = !DILocation(line: 1833, column: 34, scope: !4987)
!4990 = !DILocation(line: 1833, column: 23, scope: !4976)
!4991 = !DILocation(line: 1834, column: 46, scope: !4987)
!4992 = !DILocation(line: 1834, column: 52, scope: !4987)
!4993 = !DILocation(line: 1834, column: 36, scope: !4987)
!4994 = !DILocation(line: 1834, column: 21, scope: !4987)
!4995 = !DILocation(line: 1834, column: 27, scope: !4987)
!4996 = !DILocation(line: 1834, column: 34, scope: !4987)
!4997 = !DILocation(line: 1837, column: 27, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4999, file: !63, line: 1837, column: 27)
!4999 = distinct !DILexicalBlock(scope: !4987, file: !63, line: 1836, column: 21)
!5000 = !DILocation(line: 1837, column: 32, scope: !4998)
!5001 = !DILocation(line: 1837, column: 27, scope: !4999)
!5002 = !DILocation(line: 1838, column: 25, scope: !4998)
!5003 = !DILocation(line: 1838, column: 50, scope: !4998)
!5004 = !DILocation(line: 1838, column: 49, scope: !4998)
!5005 = !DILocation(line: 1838, column: 39, scope: !4998)
!5006 = !DILocation(line: 1838, column: 32, scope: !4998)
!5007 = !DILocation(line: 1839, column: 37, scope: !4998)
!5008 = distinct !{!5008, !5002, !5007}
!5009 = !DILocation(line: 1840, column: 38, scope: !4999)
!5010 = !DILocation(line: 1840, column: 23, scope: !4999)
!5011 = !DILocation(line: 1840, column: 29, scope: !4999)
!5012 = !DILocation(line: 1840, column: 36, scope: !4999)
!5013 = !DILocation(line: 1842, column: 17, scope: !4976)
!5014 = !DILocation(line: 1844, column: 28, scope: !4952)
!5015 = !DILocation(line: 1844, column: 26, scope: !4952)
!5016 = distinct !{!5016, !4943, !5017}
!5017 = !DILocation(line: 1845, column: 13, scope: !4883)
!5018 = !DILocation(line: 1847, column: 17, scope: !4883)
!5019 = !DILocation(line: 1847, column: 15, scope: !4883)
!5020 = !DILocation(line: 1848, column: 15, scope: !5021)
!5021 = distinct !DILexicalBlock(scope: !4883, file: !63, line: 1848, column: 15)
!5022 = !DILocation(line: 1848, column: 20, scope: !5021)
!5023 = !DILocation(line: 1848, column: 15, scope: !4883)
!5024 = !DILocation(line: 1849, column: 13, scope: !5021)
!5025 = distinct !{!5025, !4877, !5026}
!5026 = !DILocation(line: 1850, column: 9, scope: !4838)
!5027 = !DILocation(line: 1852, column: 19, scope: !4838)
!5028 = !DILocation(line: 1852, column: 25, scope: !4838)
!5029 = !DILocation(line: 1852, column: 30, scope: !4838)
!5030 = !DILocation(line: 1852, column: 23, scope: !4838)
!5031 = !DILocation(line: 1852, column: 7, scope: !4838)
!5032 = !DILocation(line: 1852, column: 12, scope: !4838)
!5033 = !DILocation(line: 1852, column: 17, scope: !4838)
!5034 = !DILocation(line: 1853, column: 37, scope: !4838)
!5035 = !DILocation(line: 1853, column: 21, scope: !4838)
!5036 = !DILocation(line: 1853, column: 44, scope: !4838)
!5037 = !DILocation(line: 1853, column: 42, scope: !4838)
!5038 = !DILocation(line: 1853, column: 7, scope: !4838)
!5039 = !DILocation(line: 1853, column: 12, scope: !4838)
!5040 = !DILocation(line: 1853, column: 19, scope: !4838)
!5041 = !DILocation(line: 1854, column: 11, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !4838, file: !63, line: 1854, column: 11)
!5043 = !DILocation(line: 1854, column: 16, scope: !5042)
!5044 = !DILocation(line: 1854, column: 23, scope: !5042)
!5045 = !DILocation(line: 1854, column: 11, scope: !4838)
!5046 = !DILocation(line: 1856, column: 23, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5042, file: !63, line: 1855, column: 9)
!5048 = !DILocation(line: 1856, column: 29, scope: !5047)
!5049 = !DILocation(line: 1856, column: 27, scope: !5047)
!5050 = !DILocation(line: 1856, column: 11, scope: !5047)
!5051 = !DILocation(line: 1856, column: 16, scope: !5047)
!5052 = !DILocation(line: 1856, column: 21, scope: !5047)
!5053 = !DILocation(line: 1857, column: 31, scope: !5047)
!5054 = !DILocation(line: 1857, column: 41, scope: !5047)
!5055 = !DILocation(line: 1857, column: 29, scope: !5047)
!5056 = !DILocation(line: 1858, column: 11, scope: !5047)
!5057 = !DILocalVariable(name: "line_alloc", scope: !5058, file: !63, line: 1865, type: !52)
!5058 = distinct !DILexicalBlock(scope: !4838, file: !63, line: 1861, column: 7)
!5059 = !DILocation(line: 1865, column: 16, scope: !5058)
!5060 = !DILocation(line: 1865, column: 29, scope: !5058)
!5061 = !DILocation(line: 1865, column: 34, scope: !5058)
!5062 = !DILocation(line: 1865, column: 40, scope: !5058)
!5063 = !DILocation(line: 1866, column: 32, scope: !5058)
!5064 = !DILocation(line: 1866, column: 37, scope: !5058)
!5065 = !DILocation(line: 1866, column: 20, scope: !5058)
!5066 = !DILocation(line: 1866, column: 9, scope: !5058)
!5067 = !DILocation(line: 1866, column: 14, scope: !5058)
!5068 = !DILocation(line: 1866, column: 18, scope: !5058)
!5069 = !DILocation(line: 1867, column: 22, scope: !5058)
!5070 = !DILocation(line: 1867, column: 33, scope: !5058)
!5071 = !DILocation(line: 1867, column: 9, scope: !5058)
!5072 = !DILocation(line: 1867, column: 14, scope: !5058)
!5073 = !DILocation(line: 1867, column: 20, scope: !5058)
!5074 = distinct !{!5074, !4836, !5075}
!5075 = !DILocation(line: 1869, column: 5, scope: !4778)
!5076 = !DILocation(line: 1870, column: 1, scope: !4778)
!5077 = distinct !DISubprogram(name: "buffer_linelim", scope: !63, file: !63, line: 1602, type: !5078, scopeLine: 1603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5078 = !DISubroutineType(types: !5079)
!5079 = !{!553, !5080}
!5080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5081, size: 64)
!5081 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !608)
!5082 = !DILocalVariable(name: "buf", arg: 1, scope: !5077, file: !63, line: 1602, type: !5080)
!5083 = !DILocation(line: 1602, column: 38, scope: !5077)
!5084 = !DILocalVariable(name: "linelim", scope: !5077, file: !63, line: 1604, type: !47)
!5085 = !DILocation(line: 1604, column: 9, scope: !5077)
!5086 = !DILocation(line: 1604, column: 19, scope: !5077)
!5087 = !DILocation(line: 1604, column: 24, scope: !5077)
!5088 = !DILocation(line: 1604, column: 30, scope: !5077)
!5089 = !DILocation(line: 1604, column: 35, scope: !5077)
!5090 = !DILocation(line: 1604, column: 28, scope: !5077)
!5091 = !DILocation(line: 1605, column: 10, scope: !5077)
!5092 = !DILocation(line: 1605, column: 3, scope: !5077)
!5093 = distinct !DISubprogram(name: "create_temp", scope: !63, file: !63, line: 1164, type: !5094, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5094 = !DISubroutineType(types: !5095)
!5095 = !{!407, !584}
!5096 = !DILocalVariable(name: "pfp", arg: 1, scope: !5093, file: !63, line: 1164, type: !584)
!5097 = !DILocation(line: 1164, column: 21, scope: !5093)
!5098 = !DILocation(line: 1166, column: 29, scope: !5093)
!5099 = !DILocation(line: 1166, column: 10, scope: !5093)
!5100 = !DILocation(line: 1166, column: 3, scope: !5093)
!5101 = distinct !DISubprogram(name: "queue_init", scope: !63, file: !63, line: 3379, type: !5102, scopeLine: 3380, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5102 = !DISubroutineType(types: !5103)
!5103 = !{null, !683, !52}
!5104 = !DILocalVariable(name: "queue", arg: 1, scope: !5101, file: !63, line: 3379, type: !683)
!5105 = !DILocation(line: 3379, column: 38, scope: !5101)
!5106 = !DILocalVariable(name: "nthreads", arg: 2, scope: !5101, file: !63, line: 3379, type: !52)
!5107 = !DILocation(line: 3379, column: 52, scope: !5101)
!5108 = !DILocation(line: 3384, column: 58, scope: !5101)
!5109 = !DILocation(line: 3384, column: 56, scope: !5101)
!5110 = !DILocation(line: 3384, column: 27, scope: !5101)
!5111 = !DILocation(line: 3384, column: 3, scope: !5101)
!5112 = !DILocation(line: 3384, column: 10, scope: !5101)
!5113 = !DILocation(line: 3384, column: 25, scope: !5101)
!5114 = !DILocation(line: 3385, column: 24, scope: !5101)
!5115 = !DILocation(line: 3385, column: 31, scope: !5101)
!5116 = !DILocation(line: 3385, column: 3, scope: !5101)
!5117 = !DILocation(line: 3386, column: 23, scope: !5101)
!5118 = !DILocation(line: 3386, column: 30, scope: !5101)
!5119 = !DILocation(line: 3386, column: 3, scope: !5101)
!5120 = !DILocation(line: 3387, column: 1, scope: !5101)
!5121 = distinct !DISubprogram(name: "merge_tree_init", scope: !63, file: !63, line: 3253, type: !5122, scopeLine: 3254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5122 = !DISubroutineType(types: !5123)
!5123 = !{!621, !52, !52, !553}
!5124 = !DILocalVariable(name: "nthreads", arg: 1, scope: !5121, file: !63, line: 3253, type: !52)
!5125 = !DILocation(line: 3253, column: 25, scope: !5121)
!5126 = !DILocalVariable(name: "nlines", arg: 2, scope: !5121, file: !63, line: 3253, type: !52)
!5127 = !DILocation(line: 3253, column: 42, scope: !5121)
!5128 = !DILocalVariable(name: "dest", arg: 3, scope: !5121, file: !63, line: 3253, type: !553)
!5129 = !DILocation(line: 3253, column: 63, scope: !5121)
!5130 = !DILocalVariable(name: "merge_tree", scope: !5121, file: !63, line: 3255, type: !621)
!5131 = !DILocation(line: 3255, column: 22, scope: !5121)
!5132 = !DILocation(line: 3255, column: 69, scope: !5121)
!5133 = !DILocation(line: 3255, column: 67, scope: !5121)
!5134 = !DILocation(line: 3255, column: 35, scope: !5121)
!5135 = !DILocalVariable(name: "root", scope: !5121, file: !63, line: 3257, type: !621)
!5136 = !DILocation(line: 3257, column: 22, scope: !5121)
!5137 = !DILocation(line: 3257, column: 29, scope: !5121)
!5138 = !DILocation(line: 3258, column: 40, scope: !5121)
!5139 = !DILocation(line: 3258, column: 46, scope: !5121)
!5140 = !DILocation(line: 3258, column: 53, scope: !5121)
!5141 = !DILocation(line: 3258, column: 25, scope: !5121)
!5142 = !DILocation(line: 3258, column: 31, scope: !5121)
!5143 = !DILocation(line: 3258, column: 38, scope: !5121)
!5144 = !DILocation(line: 3258, column: 14, scope: !5121)
!5145 = !DILocation(line: 3258, column: 20, scope: !5121)
!5146 = !DILocation(line: 3258, column: 23, scope: !5121)
!5147 = !DILocation(line: 3258, column: 3, scope: !5121)
!5148 = !DILocation(line: 3258, column: 9, scope: !5121)
!5149 = !DILocation(line: 3258, column: 12, scope: !5121)
!5150 = !DILocation(line: 3259, column: 3, scope: !5121)
!5151 = !DILocation(line: 3259, column: 9, scope: !5121)
!5152 = !DILocation(line: 3259, column: 14, scope: !5121)
!5153 = !DILocation(line: 3260, column: 27, scope: !5121)
!5154 = !DILocation(line: 3260, column: 15, scope: !5121)
!5155 = !DILocation(line: 3260, column: 21, scope: !5121)
!5156 = !DILocation(line: 3260, column: 25, scope: !5121)
!5157 = !DILocation(line: 3260, column: 3, scope: !5121)
!5158 = !DILocation(line: 3260, column: 9, scope: !5121)
!5159 = !DILocation(line: 3260, column: 13, scope: !5121)
!5160 = !DILocation(line: 3261, column: 3, scope: !5121)
!5161 = !DILocation(line: 3261, column: 9, scope: !5121)
!5162 = !DILocation(line: 3261, column: 16, scope: !5121)
!5163 = !DILocation(line: 3262, column: 3, scope: !5121)
!5164 = !DILocation(line: 3262, column: 9, scope: !5121)
!5165 = !DILocation(line: 3262, column: 15, scope: !5121)
!5166 = !DILocation(line: 3263, column: 3, scope: !5121)
!5167 = !DILocation(line: 3263, column: 9, scope: !5121)
!5168 = !DILocation(line: 3263, column: 16, scope: !5121)
!5169 = !DILocation(line: 3264, column: 24, scope: !5121)
!5170 = !DILocation(line: 3264, column: 30, scope: !5121)
!5171 = !DILocation(line: 3264, column: 3, scope: !5121)
!5172 = !DILocation(line: 3266, column: 14, scope: !5121)
!5173 = !DILocation(line: 3266, column: 20, scope: !5121)
!5174 = !DILocation(line: 3266, column: 25, scope: !5121)
!5175 = !DILocation(line: 3266, column: 30, scope: !5121)
!5176 = !DILocation(line: 3266, column: 36, scope: !5121)
!5177 = !DILocation(line: 3266, column: 46, scope: !5121)
!5178 = !DILocation(line: 3266, column: 3, scope: !5121)
!5179 = !DILocation(line: 3267, column: 10, scope: !5121)
!5180 = !DILocation(line: 3267, column: 3, scope: !5121)
!5181 = distinct !DISubprogram(name: "sortlines", scope: !63, file: !63, line: 3643, type: !5182, scopeLine: 3646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5182 = !DISubroutineType(types: !5183)
!5183 = !{null, !5184, !52, !52, !621, !683, !389, !90}
!5184 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !553)
!5185 = !DILocalVariable(name: "lines", arg: 1, scope: !5181, file: !63, line: 3643, type: !5184)
!5186 = !DILocation(line: 3643, column: 34, scope: !5181)
!5187 = !DILocalVariable(name: "nthreads", arg: 2, scope: !5181, file: !63, line: 3643, type: !52)
!5188 = !DILocation(line: 3643, column: 48, scope: !5181)
!5189 = !DILocalVariable(name: "total_lines", arg: 3, scope: !5181, file: !63, line: 3644, type: !52)
!5190 = !DILocation(line: 3644, column: 19, scope: !5181)
!5191 = !DILocalVariable(name: "node", arg: 4, scope: !5181, file: !63, line: 3644, type: !621)
!5192 = !DILocation(line: 3644, column: 51, scope: !5181)
!5193 = !DILocalVariable(name: "queue", arg: 5, scope: !5181, file: !63, line: 3645, type: !683)
!5194 = !DILocation(line: 3645, column: 37, scope: !5181)
!5195 = !DILocalVariable(name: "tfp", arg: 6, scope: !5181, file: !63, line: 3645, type: !389)
!5196 = !DILocation(line: 3645, column: 50, scope: !5181)
!5197 = !DILocalVariable(name: "temp_output", arg: 7, scope: !5181, file: !63, line: 3645, type: !90)
!5198 = !DILocation(line: 3645, column: 67, scope: !5181)
!5199 = !DILocalVariable(name: "nlines", scope: !5181, file: !63, line: 3647, type: !52)
!5200 = !DILocation(line: 3647, column: 10, scope: !5181)
!5201 = !DILocation(line: 3647, column: 19, scope: !5181)
!5202 = !DILocation(line: 3647, column: 25, scope: !5181)
!5203 = !DILocation(line: 3647, column: 31, scope: !5181)
!5204 = !DILocation(line: 3647, column: 37, scope: !5181)
!5205 = !DILocation(line: 3647, column: 29, scope: !5181)
!5206 = !DILocalVariable(name: "lo_threads", scope: !5181, file: !63, line: 3650, type: !52)
!5207 = !DILocation(line: 3650, column: 10, scope: !5181)
!5208 = !DILocation(line: 3650, column: 23, scope: !5181)
!5209 = !DILocation(line: 3650, column: 32, scope: !5181)
!5210 = !DILocalVariable(name: "hi_threads", scope: !5181, file: !63, line: 3651, type: !52)
!5211 = !DILocation(line: 3651, column: 10, scope: !5181)
!5212 = !DILocation(line: 3651, column: 23, scope: !5181)
!5213 = !DILocation(line: 3651, column: 34, scope: !5181)
!5214 = !DILocation(line: 3651, column: 32, scope: !5181)
!5215 = !DILocalVariable(name: "thread", scope: !5181, file: !63, line: 3652, type: !670)
!5216 = !DILocation(line: 3652, column: 13, scope: !5181)
!5217 = !DILocalVariable(name: "args", scope: !5181, file: !63, line: 3653, type: !673)
!5218 = !DILocation(line: 3653, column: 22, scope: !5181)
!5219 = !DILocation(line: 3653, column: 29, scope: !5181)
!5220 = !DILocation(line: 3653, column: 30, scope: !5181)
!5221 = !DILocation(line: 3653, column: 37, scope: !5181)
!5222 = !DILocation(line: 3653, column: 49, scope: !5181)
!5223 = !DILocation(line: 3654, column: 30, scope: !5181)
!5224 = !DILocation(line: 3654, column: 36, scope: !5181)
!5225 = !DILocation(line: 3654, column: 46, scope: !5181)
!5226 = !DILocation(line: 3654, column: 53, scope: !5181)
!5227 = !DILocation(line: 3654, column: 58, scope: !5181)
!5228 = !DILocation(line: 3656, column: 7, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5181, file: !63, line: 3656, column: 7)
!5230 = !DILocation(line: 3656, column: 16, scope: !5229)
!5231 = !DILocation(line: 3656, column: 20, scope: !5229)
!5232 = !DILocation(line: 3656, column: 52, scope: !5229)
!5233 = !DILocation(line: 3656, column: 49, scope: !5229)
!5234 = !DILocation(line: 3657, column: 7, scope: !5229)
!5235 = !DILocation(line: 3657, column: 59, scope: !5229)
!5236 = !DILocation(line: 3657, column: 10, scope: !5229)
!5237 = !DILocation(line: 3657, column: 66, scope: !5229)
!5238 = !DILocation(line: 3656, column: 7, scope: !5181)
!5239 = !DILocation(line: 3659, column: 18, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5229, file: !63, line: 3658, column: 5)
!5241 = !DILocation(line: 3659, column: 26, scope: !5240)
!5242 = !DILocation(line: 3659, column: 32, scope: !5240)
!5243 = !DILocation(line: 3659, column: 24, scope: !5240)
!5244 = !DILocation(line: 3659, column: 37, scope: !5240)
!5245 = !DILocation(line: 3659, column: 49, scope: !5240)
!5246 = !DILocation(line: 3660, column: 18, scope: !5240)
!5247 = !DILocation(line: 3660, column: 24, scope: !5240)
!5248 = !DILocation(line: 3660, column: 34, scope: !5240)
!5249 = !DILocation(line: 3660, column: 41, scope: !5240)
!5250 = !DILocation(line: 3660, column: 46, scope: !5240)
!5251 = !DILocation(line: 3659, column: 7, scope: !5240)
!5252 = !DILocation(line: 3661, column: 21, scope: !5240)
!5253 = !DILocation(line: 3661, column: 7, scope: !5240)
!5254 = !DILocation(line: 3662, column: 5, scope: !5240)
!5255 = !DILocalVariable(name: "nlo", scope: !5256, file: !63, line: 3667, type: !52)
!5256 = distinct !DILexicalBlock(scope: !5229, file: !63, line: 3664, column: 5)
!5257 = !DILocation(line: 3667, column: 14, scope: !5256)
!5258 = !DILocation(line: 3667, column: 20, scope: !5256)
!5259 = !DILocation(line: 3667, column: 26, scope: !5256)
!5260 = !DILocalVariable(name: "nhi", scope: !5256, file: !63, line: 3668, type: !52)
!5261 = !DILocation(line: 3668, column: 14, scope: !5256)
!5262 = !DILocation(line: 3668, column: 20, scope: !5256)
!5263 = !DILocation(line: 3668, column: 26, scope: !5256)
!5264 = !DILocalVariable(name: "temp", scope: !5256, file: !63, line: 3669, type: !553)
!5265 = !DILocation(line: 3669, column: 20, scope: !5256)
!5266 = !DILocation(line: 3669, column: 27, scope: !5256)
!5267 = !DILocation(line: 3669, column: 35, scope: !5256)
!5268 = !DILocation(line: 3669, column: 33, scope: !5256)
!5269 = !DILocation(line: 3670, column: 15, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5256, file: !63, line: 3670, column: 11)
!5271 = !DILocation(line: 3670, column: 13, scope: !5270)
!5272 = !DILocation(line: 3670, column: 11, scope: !5256)
!5273 = !DILocation(line: 3671, column: 26, scope: !5270)
!5274 = !DILocation(line: 3671, column: 34, scope: !5270)
!5275 = !DILocation(line: 3671, column: 32, scope: !5270)
!5276 = !DILocation(line: 3671, column: 39, scope: !5270)
!5277 = !DILocation(line: 3671, column: 44, scope: !5270)
!5278 = !DILocation(line: 3671, column: 51, scope: !5270)
!5279 = !DILocation(line: 3671, column: 55, scope: !5270)
!5280 = !DILocation(line: 3671, column: 49, scope: !5270)
!5281 = !DILocation(line: 3671, column: 9, scope: !5270)
!5282 = !DILocation(line: 3672, column: 15, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5256, file: !63, line: 3672, column: 11)
!5284 = !DILocation(line: 3672, column: 13, scope: !5283)
!5285 = !DILocation(line: 3672, column: 11, scope: !5256)
!5286 = !DILocation(line: 3673, column: 26, scope: !5283)
!5287 = !DILocation(line: 3673, column: 33, scope: !5283)
!5288 = !DILocation(line: 3673, column: 38, scope: !5283)
!5289 = !DILocation(line: 3673, column: 9, scope: !5283)
!5290 = !DILocation(line: 3676, column: 18, scope: !5256)
!5291 = !DILocation(line: 3676, column: 7, scope: !5256)
!5292 = !DILocation(line: 3676, column: 13, scope: !5256)
!5293 = !DILocation(line: 3676, column: 16, scope: !5256)
!5294 = !DILocation(line: 3677, column: 18, scope: !5256)
!5295 = !DILocation(line: 3677, column: 26, scope: !5256)
!5296 = !DILocation(line: 3677, column: 24, scope: !5256)
!5297 = !DILocation(line: 3677, column: 7, scope: !5256)
!5298 = !DILocation(line: 3677, column: 13, scope: !5256)
!5299 = !DILocation(line: 3677, column: 16, scope: !5256)
!5300 = !DILocation(line: 3678, column: 22, scope: !5256)
!5301 = !DILocation(line: 3678, column: 30, scope: !5256)
!5302 = !DILocation(line: 3678, column: 28, scope: !5256)
!5303 = !DILocation(line: 3678, column: 7, scope: !5256)
!5304 = !DILocation(line: 3678, column: 13, scope: !5256)
!5305 = !DILocation(line: 3678, column: 20, scope: !5256)
!5306 = !DILocation(line: 3679, column: 22, scope: !5256)
!5307 = !DILocation(line: 3679, column: 30, scope: !5256)
!5308 = !DILocation(line: 3679, column: 28, scope: !5256)
!5309 = !DILocation(line: 3679, column: 36, scope: !5256)
!5310 = !DILocation(line: 3679, column: 34, scope: !5256)
!5311 = !DILocation(line: 3679, column: 7, scope: !5256)
!5312 = !DILocation(line: 3679, column: 13, scope: !5256)
!5313 = !DILocation(line: 3679, column: 20, scope: !5256)
!5314 = !DILocation(line: 3681, column: 21, scope: !5256)
!5315 = !DILocation(line: 3681, column: 28, scope: !5256)
!5316 = !DILocation(line: 3681, column: 7, scope: !5256)
!5317 = !DILocation(line: 3682, column: 19, scope: !5256)
!5318 = !DILocation(line: 3682, column: 26, scope: !5256)
!5319 = !DILocation(line: 3682, column: 39, scope: !5256)
!5320 = !DILocation(line: 3682, column: 44, scope: !5256)
!5321 = !DILocation(line: 3682, column: 7, scope: !5256)
!5322 = !DILocation(line: 3684, column: 1, scope: !5181)
!5323 = distinct !DISubprogram(name: "write_unique", scope: !63, file: !63, line: 3425, type: !5324, scopeLine: 3426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5324 = !DISubroutineType(types: !5325)
!5325 = !{null, !539, !389, !90}
!5326 = !DILocalVariable(name: "line", arg: 1, scope: !5323, file: !63, line: 3425, type: !539)
!5327 = !DILocation(line: 3425, column: 34, scope: !5323)
!5328 = !DILocalVariable(name: "tfp", arg: 2, scope: !5323, file: !63, line: 3425, type: !389)
!5329 = !DILocation(line: 3425, column: 46, scope: !5323)
!5330 = !DILocalVariable(name: "temp_output", arg: 3, scope: !5323, file: !63, line: 3425, type: !90)
!5331 = !DILocation(line: 3425, column: 63, scope: !5323)
!5332 = !DILocation(line: 3427, column: 7, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5323, file: !63, line: 3427, column: 7)
!5334 = !DILocation(line: 3427, column: 7, scope: !5323)
!5335 = !DILocation(line: 3429, column: 22, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !5337, file: !63, line: 3429, column: 11)
!5337 = distinct !DILexicalBlock(scope: !5333, file: !63, line: 3428, column: 5)
!5338 = !DILocation(line: 3429, column: 11, scope: !5336)
!5339 = !DILocation(line: 3429, column: 27, scope: !5336)
!5340 = !DILocation(line: 3429, column: 41, scope: !5336)
!5341 = !DILocation(line: 3429, column: 32, scope: !5336)
!5342 = !DILocation(line: 3429, column: 11, scope: !5337)
!5343 = !DILocation(line: 3430, column: 9, scope: !5336)
!5344 = !DILocation(line: 3431, column: 21, scope: !5337)
!5345 = !DILocation(line: 3431, column: 20, scope: !5337)
!5346 = !DILocation(line: 3432, column: 5, scope: !5337)
!5347 = !DILocation(line: 3434, column: 15, scope: !5323)
!5348 = !DILocation(line: 3434, column: 21, scope: !5323)
!5349 = !DILocation(line: 3434, column: 26, scope: !5323)
!5350 = !DILocation(line: 3434, column: 3, scope: !5323)
!5351 = !DILocation(line: 3435, column: 1, scope: !5323)
!5352 = distinct !DISubprogram(name: "reap_all", scope: !63, file: !63, line: 798, type: !235, scopeLine: 799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5353 = !DILocation(line: 800, column: 3, scope: !5352)
!5354 = !DILocation(line: 800, column: 14, scope: !5352)
!5355 = !DILocation(line: 800, column: 12, scope: !5352)
!5356 = !DILocation(line: 801, column: 5, scope: !5352)
!5357 = distinct !{!5357, !5353, !5358}
!5358 = !DILocation(line: 801, column: 13, scope: !5352)
!5359 = !DILocation(line: 802, column: 1, scope: !5352)
!5360 = !DILocalVariable(name: "pid", arg: 1, scope: !594, file: !63, line: 709, type: !413)
!5361 = !DILocation(line: 709, column: 13, scope: !594)
!5362 = !DILocalVariable(name: "status", scope: !594, file: !63, line: 711, type: !5)
!5363 = !DILocation(line: 711, column: 7, scope: !594)
!5364 = !DILocalVariable(name: "cpid", scope: !594, file: !63, line: 712, type: !413)
!5365 = !DILocation(line: 712, column: 9, scope: !594)
!5366 = !DILocation(line: 712, column: 26, scope: !594)
!5367 = !DILocation(line: 712, column: 32, scope: !594)
!5368 = !DILocation(line: 712, column: 53, scope: !594)
!5369 = !DILocation(line: 712, column: 16, scope: !594)
!5370 = !DILocation(line: 714, column: 7, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !594, file: !63, line: 714, column: 7)
!5372 = !DILocation(line: 714, column: 12, scope: !5371)
!5373 = !DILocation(line: 714, column: 7, scope: !594)
!5374 = !DILocation(line: 715, column: 5, scope: !5371)
!5375 = !DILocation(line: 717, column: 16, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5371, file: !63, line: 717, column: 12)
!5377 = !DILocation(line: 717, column: 14, scope: !5376)
!5378 = !DILocation(line: 717, column: 21, scope: !5376)
!5379 = !DILocation(line: 717, column: 29, scope: !5376)
!5380 = !DILocation(line: 717, column: 27, scope: !5376)
!5381 = !DILocation(line: 717, column: 33, scope: !5376)
!5382 = !DILocation(line: 717, column: 49, scope: !5376)
!5383 = !DILocation(line: 717, column: 36, scope: !5376)
!5384 = !DILocation(line: 717, column: 12, scope: !5371)
!5385 = !DILocation(line: 719, column: 13, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5387, file: !63, line: 719, column: 11)
!5387 = distinct !DILexicalBlock(scope: !5376, file: !63, line: 718, column: 5)
!5388 = !DILocation(line: 719, column: 32, scope: !5386)
!5389 = !DILocation(line: 719, column: 35, scope: !5386)
!5390 = !DILocation(line: 719, column: 11, scope: !5387)
!5391 = !DILocation(line: 720, column: 9, scope: !5386)
!5392 = !DILocation(line: 722, column: 7, scope: !5387)
!5393 = !DILocation(line: 723, column: 5, scope: !5387)
!5394 = !DILocation(line: 725, column: 10, scope: !594)
!5395 = !DILocation(line: 725, column: 3, scope: !594)
!5396 = distinct !DISubprogram(name: "delete_proc", scope: !63, file: !63, line: 754, type: !5397, scopeLine: 755, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5397 = !DISubroutineType(types: !5398)
!5398 = !{!162, !413}
!5399 = !DILocalVariable(name: "pid", arg: 1, scope: !5396, file: !63, line: 754, type: !413)
!5400 = !DILocation(line: 754, column: 20, scope: !5396)
!5401 = !DILocalVariable(name: "test", scope: !5396, file: !63, line: 756, type: !408)
!5402 = !DILocation(line: 756, column: 19, scope: !5396)
!5403 = !DILocation(line: 758, column: 14, scope: !5396)
!5404 = !DILocation(line: 758, column: 8, scope: !5396)
!5405 = !DILocation(line: 758, column: 12, scope: !5396)
!5406 = !DILocalVariable(name: "node", scope: !5396, file: !63, line: 759, type: !407)
!5407 = !DILocation(line: 759, column: 20, scope: !5396)
!5408 = !DILocation(line: 759, column: 40, scope: !5396)
!5409 = !DILocation(line: 759, column: 49, scope: !5396)
!5410 = !DILocation(line: 759, column: 27, scope: !5396)
!5411 = !DILocation(line: 760, column: 9, scope: !5412)
!5412 = distinct !DILexicalBlock(scope: !5396, file: !63, line: 760, column: 7)
!5413 = !DILocation(line: 760, column: 7, scope: !5396)
!5414 = !DILocation(line: 761, column: 5, scope: !5412)
!5415 = !DILocation(line: 762, column: 3, scope: !5396)
!5416 = !DILocation(line: 762, column: 9, scope: !5396)
!5417 = !DILocation(line: 762, column: 15, scope: !5396)
!5418 = !DILocation(line: 763, column: 3, scope: !5396)
!5419 = !DILocation(line: 764, column: 1, scope: !5396)
!5420 = distinct !DISubprogram(name: "compare", scope: !63, file: !63, line: 2734, type: !5421, scopeLine: 2735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5421 = !DISubroutineType(types: !5422)
!5422 = !{!5, !539, !539}
!5423 = !DILocalVariable(name: "a", arg: 1, scope: !5420, file: !63, line: 2734, type: !539)
!5424 = !DILocation(line: 2734, column: 29, scope: !5420)
!5425 = !DILocalVariable(name: "b", arg: 2, scope: !5420, file: !63, line: 2734, type: !539)
!5426 = !DILocation(line: 2734, column: 51, scope: !5420)
!5427 = !DILocalVariable(name: "diff", scope: !5420, file: !63, line: 2736, type: !5)
!5428 = !DILocation(line: 2736, column: 7, scope: !5420)
!5429 = !DILocalVariable(name: "alen", scope: !5420, file: !63, line: 2737, type: !52)
!5430 = !DILocation(line: 2737, column: 10, scope: !5420)
!5431 = !DILocalVariable(name: "blen", scope: !5420, file: !63, line: 2737, type: !52)
!5432 = !DILocation(line: 2737, column: 16, scope: !5420)
!5433 = !DILocation(line: 2742, column: 7, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5420, file: !63, line: 2742, column: 7)
!5435 = !DILocation(line: 2742, column: 7, scope: !5420)
!5436 = !DILocation(line: 2744, column: 26, scope: !5437)
!5437 = distinct !DILexicalBlock(scope: !5434, file: !63, line: 2743, column: 5)
!5438 = !DILocation(line: 2744, column: 29, scope: !5437)
!5439 = !DILocation(line: 2744, column: 14, scope: !5437)
!5440 = !DILocation(line: 2744, column: 12, scope: !5437)
!5441 = !DILocation(line: 2745, column: 11, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5437, file: !63, line: 2745, column: 11)
!5443 = !DILocation(line: 2745, column: 16, scope: !5442)
!5444 = !DILocation(line: 2745, column: 19, scope: !5442)
!5445 = !DILocation(line: 2745, column: 26, scope: !5442)
!5446 = !DILocation(line: 2745, column: 29, scope: !5442)
!5447 = !DILocation(line: 2745, column: 11, scope: !5437)
!5448 = !DILocation(line: 2746, column: 16, scope: !5442)
!5449 = !DILocation(line: 2746, column: 9, scope: !5442)
!5450 = !DILocation(line: 2747, column: 5, scope: !5437)
!5451 = !DILocation(line: 2751, column: 10, scope: !5420)
!5452 = !DILocation(line: 2751, column: 13, scope: !5420)
!5453 = !DILocation(line: 2751, column: 20, scope: !5420)
!5454 = !DILocation(line: 2751, column: 8, scope: !5420)
!5455 = !DILocation(line: 2751, column: 32, scope: !5420)
!5456 = !DILocation(line: 2751, column: 35, scope: !5420)
!5457 = !DILocation(line: 2751, column: 42, scope: !5420)
!5458 = !DILocation(line: 2751, column: 30, scope: !5420)
!5459 = !DILocation(line: 2753, column: 7, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5420, file: !63, line: 2753, column: 7)
!5461 = !DILocation(line: 2753, column: 12, scope: !5460)
!5462 = !DILocation(line: 2753, column: 7, scope: !5420)
!5463 = !DILocation(line: 2754, column: 14, scope: !5460)
!5464 = !DILocation(line: 2754, column: 12, scope: !5460)
!5465 = !DILocation(line: 2754, column: 10, scope: !5460)
!5466 = !DILocation(line: 2754, column: 5, scope: !5460)
!5467 = !DILocation(line: 2755, column: 12, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5460, file: !63, line: 2755, column: 12)
!5469 = !DILocation(line: 2755, column: 17, scope: !5468)
!5470 = !DILocation(line: 2755, column: 12, scope: !5460)
!5471 = !DILocation(line: 2756, column: 10, scope: !5468)
!5472 = !DILocation(line: 2756, column: 5, scope: !5468)
!5473 = !DILocation(line: 2757, column: 12, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5468, file: !63, line: 2757, column: 12)
!5475 = !DILocation(line: 2757, column: 12, scope: !5468)
!5476 = !DILocation(line: 2763, column: 25, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5474, file: !63, line: 2758, column: 5)
!5478 = !DILocation(line: 2763, column: 28, scope: !5477)
!5479 = !DILocation(line: 2763, column: 34, scope: !5477)
!5480 = !DILocation(line: 2763, column: 39, scope: !5477)
!5481 = !DILocation(line: 2763, column: 44, scope: !5477)
!5482 = !DILocation(line: 2763, column: 47, scope: !5477)
!5483 = !DILocation(line: 2763, column: 53, scope: !5477)
!5484 = !DILocation(line: 2763, column: 58, scope: !5477)
!5485 = !DILocation(line: 2763, column: 14, scope: !5477)
!5486 = !DILocation(line: 2763, column: 12, scope: !5477)
!5487 = !DILocation(line: 2764, column: 5, scope: !5477)
!5488 = !DILocation(line: 2765, column: 30, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5474, file: !63, line: 2765, column: 12)
!5490 = !DILocation(line: 2765, column: 33, scope: !5489)
!5491 = !DILocation(line: 2765, column: 39, scope: !5489)
!5492 = !DILocation(line: 2765, column: 42, scope: !5489)
!5493 = !DILocation(line: 2765, column: 48, scope: !5489)
!5494 = !DILocation(line: 2765, column: 22, scope: !5489)
!5495 = !DILocation(line: 2765, column: 20, scope: !5489)
!5496 = !DILocation(line: 2765, column: 12, scope: !5474)
!5497 = !DILocation(line: 2766, column: 12, scope: !5489)
!5498 = !DILocation(line: 2766, column: 19, scope: !5489)
!5499 = !DILocation(line: 2766, column: 17, scope: !5489)
!5500 = !DILocation(line: 2766, column: 31, scope: !5489)
!5501 = !DILocation(line: 2766, column: 39, scope: !5489)
!5502 = !DILocation(line: 2766, column: 36, scope: !5489)
!5503 = !DILocation(line: 2766, column: 10, scope: !5489)
!5504 = !DILocation(line: 2766, column: 5, scope: !5489)
!5505 = !DILocation(line: 2768, column: 10, scope: !5420)
!5506 = !DILocation(line: 2768, column: 21, scope: !5420)
!5507 = !DILocation(line: 2768, column: 20, scope: !5420)
!5508 = !DILocation(line: 2768, column: 28, scope: !5420)
!5509 = !DILocation(line: 2768, column: 3, scope: !5420)
!5510 = !DILocation(line: 2769, column: 1, scope: !5420)
!5511 = distinct !DISubprogram(name: "write_line", scope: !63, file: !63, line: 2777, type: !5324, scopeLine: 2778, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5512 = !DILocalVariable(name: "line", arg: 1, scope: !5511, file: !63, line: 2777, type: !539)
!5513 = !DILocation(line: 2777, column: 32, scope: !5511)
!5514 = !DILocalVariable(name: "fp", arg: 2, scope: !5511, file: !63, line: 2777, type: !389)
!5515 = !DILocation(line: 2777, column: 44, scope: !5511)
!5516 = !DILocalVariable(name: "output_file", arg: 3, scope: !5511, file: !63, line: 2777, type: !90)
!5517 = !DILocation(line: 2777, column: 60, scope: !5511)
!5518 = !DILocalVariable(name: "buf", scope: !5511, file: !63, line: 2779, type: !7)
!5519 = !DILocation(line: 2779, column: 9, scope: !5511)
!5520 = !DILocation(line: 2779, column: 15, scope: !5511)
!5521 = !DILocation(line: 2779, column: 21, scope: !5511)
!5522 = !DILocalVariable(name: "n_bytes", scope: !5511, file: !63, line: 2780, type: !52)
!5523 = !DILocation(line: 2780, column: 10, scope: !5511)
!5524 = !DILocation(line: 2780, column: 20, scope: !5511)
!5525 = !DILocation(line: 2780, column: 26, scope: !5511)
!5526 = !DILocalVariable(name: "ebuf", scope: !5511, file: !63, line: 2781, type: !7)
!5527 = !DILocation(line: 2781, column: 9, scope: !5511)
!5528 = !DILocation(line: 2781, column: 16, scope: !5511)
!5529 = !DILocation(line: 2781, column: 22, scope: !5511)
!5530 = !DILocation(line: 2781, column: 20, scope: !5511)
!5531 = !DILocation(line: 2783, column: 8, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5511, file: !63, line: 2783, column: 7)
!5533 = !DILocation(line: 2783, column: 20, scope: !5532)
!5534 = !DILocation(line: 2783, column: 23, scope: !5532)
!5535 = !DILocation(line: 2783, column: 7, scope: !5511)
!5536 = !DILocalVariable(name: "c", scope: !5537, file: !63, line: 2786, type: !90)
!5537 = distinct !DILexicalBlock(scope: !5532, file: !63, line: 2784, column: 5)
!5538 = !DILocation(line: 2786, column: 19, scope: !5537)
!5539 = !DILocation(line: 2786, column: 23, scope: !5537)
!5540 = !DILocation(line: 2788, column: 7, scope: !5537)
!5541 = !DILocation(line: 2788, column: 14, scope: !5537)
!5542 = !DILocation(line: 2788, column: 18, scope: !5537)
!5543 = !DILocation(line: 2788, column: 16, scope: !5537)
!5544 = !DILocalVariable(name: "wc", scope: !5545, file: !63, line: 2790, type: !8)
!5545 = distinct !DILexicalBlock(scope: !5537, file: !63, line: 2789, column: 9)
!5546 = !DILocation(line: 2790, column: 16, scope: !5545)
!5547 = !DILocation(line: 2790, column: 23, scope: !5545)
!5548 = !DILocation(line: 2790, column: 21, scope: !5545)
!5549 = !DILocation(line: 2791, column: 15, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5545, file: !63, line: 2791, column: 15)
!5551 = !DILocation(line: 2791, column: 18, scope: !5550)
!5552 = !DILocation(line: 2791, column: 15, scope: !5545)
!5553 = !DILocation(line: 2792, column: 16, scope: !5550)
!5554 = !DILocation(line: 2792, column: 13, scope: !5550)
!5555 = !DILocation(line: 2793, column: 20, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5550, file: !63, line: 2793, column: 20)
!5557 = !DILocation(line: 2793, column: 25, scope: !5556)
!5558 = !DILocation(line: 2793, column: 22, scope: !5556)
!5559 = !DILocation(line: 2793, column: 20, scope: !5550)
!5560 = !DILocation(line: 2794, column: 16, scope: !5556)
!5561 = !DILocation(line: 2794, column: 13, scope: !5556)
!5562 = !DILocation(line: 2795, column: 15, scope: !5563)
!5563 = distinct !DILexicalBlock(scope: !5545, file: !63, line: 2795, column: 15)
!5564 = !DILocation(line: 2795, column: 30, scope: !5563)
!5565 = !DILocation(line: 2795, column: 15, scope: !5545)
!5566 = !DILocation(line: 2796, column: 23, scope: !5563)
!5567 = !DILocation(line: 2796, column: 42, scope: !5563)
!5568 = !DILocation(line: 2796, column: 13, scope: !5563)
!5569 = distinct !{!5569, !5540, !5570}
!5570 = !DILocation(line: 2797, column: 9, scope: !5537)
!5571 = !DILocation(line: 2799, column: 19, scope: !5537)
!5572 = !DILocation(line: 2799, column: 7, scope: !5537)
!5573 = !DILocation(line: 2800, column: 5, scope: !5537)
!5574 = !DILocation(line: 2803, column: 18, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5532, file: !63, line: 2802, column: 5)
!5576 = !DILocation(line: 2803, column: 7, scope: !5575)
!5577 = !DILocation(line: 2803, column: 16, scope: !5575)
!5578 = !DILocation(line: 2804, column: 11, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5575, file: !63, line: 2804, column: 11)
!5580 = !DILocation(line: 2804, column: 43, scope: !5579)
!5581 = !DILocation(line: 2804, column: 40, scope: !5579)
!5582 = !DILocation(line: 2804, column: 11, scope: !5575)
!5583 = !DILocation(line: 2805, column: 19, scope: !5579)
!5584 = !DILocation(line: 2805, column: 38, scope: !5579)
!5585 = !DILocation(line: 2805, column: 9, scope: !5579)
!5586 = !DILocation(line: 2806, column: 7, scope: !5575)
!5587 = !DILocation(line: 2806, column: 16, scope: !5575)
!5588 = !DILocation(line: 2808, column: 1, scope: !5511)
!5589 = distinct !DISubprogram(name: "debug_line", scope: !63, file: !63, line: 2363, type: !5590, scopeLine: 2364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5590 = !DISubroutineType(types: !5591)
!5591 = !{null, !539}
!5592 = !DILocalVariable(name: "line", arg: 1, scope: !5589, file: !63, line: 2363, type: !539)
!5593 = !DILocation(line: 2363, column: 32, scope: !5589)
!5594 = !DILocalVariable(name: "key", scope: !5589, file: !63, line: 2365, type: !522)
!5595 = !DILocation(line: 2365, column: 26, scope: !5589)
!5596 = !DILocation(line: 2365, column: 32, scope: !5589)
!5597 = !DILocation(line: 2367, column: 3, scope: !5589)
!5598 = !DILocation(line: 2368, column: 16, scope: !5589)
!5599 = !DILocation(line: 2368, column: 22, scope: !5589)
!5600 = !DILocation(line: 2368, column: 5, scope: !5589)
!5601 = !DILocation(line: 2369, column: 10, scope: !5589)
!5602 = !DILocation(line: 2369, column: 14, scope: !5589)
!5603 = !DILocation(line: 2369, column: 25, scope: !5589)
!5604 = !DILocation(line: 2369, column: 30, scope: !5589)
!5605 = !DILocation(line: 2369, column: 23, scope: !5589)
!5606 = !DILocation(line: 2369, column: 36, scope: !5589)
!5607 = !DILocation(line: 2369, column: 42, scope: !5589)
!5608 = !DILocation(line: 2369, column: 49, scope: !5589)
!5609 = !DILocation(line: 2369, column: 52, scope: !5589)
!5610 = !DILocation(line: 2369, column: 39, scope: !5589)
!5611 = !DILocation(line: 0, scope: !5589)
!5612 = distinct !{!5612, !5597, !5613}
!5613 = !DILocation(line: 2369, column: 60, scope: !5589)
!5614 = !DILocation(line: 2370, column: 1, scope: !5589)
!5615 = distinct !DISubprogram(name: "debug_key", scope: !63, file: !63, line: 2306, type: !5616, scopeLine: 2307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5616 = !DISubroutineType(types: !5617)
!5617 = !{null, !539, !522}
!5618 = !DILocalVariable(name: "line", arg: 1, scope: !5615, file: !63, line: 2306, type: !539)
!5619 = !DILocation(line: 2306, column: 31, scope: !5615)
!5620 = !DILocalVariable(name: "key", arg: 2, scope: !5615, file: !63, line: 2306, type: !522)
!5621 = !DILocation(line: 2306, column: 60, scope: !5615)
!5622 = !DILocalVariable(name: "text", scope: !5615, file: !63, line: 2308, type: !7)
!5623 = !DILocation(line: 2308, column: 9, scope: !5615)
!5624 = !DILocation(line: 2308, column: 16, scope: !5615)
!5625 = !DILocation(line: 2308, column: 22, scope: !5615)
!5626 = !DILocalVariable(name: "beg", scope: !5615, file: !63, line: 2309, type: !7)
!5627 = !DILocation(line: 2309, column: 9, scope: !5615)
!5628 = !DILocation(line: 2309, column: 15, scope: !5615)
!5629 = !DILocalVariable(name: "lim", scope: !5615, file: !63, line: 2310, type: !7)
!5630 = !DILocation(line: 2310, column: 9, scope: !5615)
!5631 = !DILocation(line: 2310, column: 15, scope: !5615)
!5632 = !DILocation(line: 2310, column: 22, scope: !5615)
!5633 = !DILocation(line: 2310, column: 28, scope: !5615)
!5634 = !DILocation(line: 2310, column: 20, scope: !5615)
!5635 = !DILocation(line: 2310, column: 35, scope: !5615)
!5636 = !DILocation(line: 2312, column: 7, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5615, file: !63, line: 2312, column: 7)
!5638 = !DILocation(line: 2312, column: 7, scope: !5615)
!5639 = !DILocation(line: 2314, column: 11, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5641, file: !63, line: 2314, column: 11)
!5641 = distinct !DILexicalBlock(scope: !5637, file: !63, line: 2313, column: 5)
!5642 = !DILocation(line: 2314, column: 16, scope: !5640)
!5643 = !DILocation(line: 2314, column: 22, scope: !5640)
!5644 = !DILocation(line: 2314, column: 11, scope: !5641)
!5645 = !DILocation(line: 2315, column: 25, scope: !5640)
!5646 = !DILocation(line: 2315, column: 31, scope: !5640)
!5647 = !DILocation(line: 2315, column: 15, scope: !5640)
!5648 = !DILocation(line: 2315, column: 13, scope: !5640)
!5649 = !DILocation(line: 2315, column: 9, scope: !5640)
!5650 = !DILocation(line: 2316, column: 11, scope: !5651)
!5651 = distinct !DILexicalBlock(scope: !5641, file: !63, line: 2316, column: 11)
!5652 = !DILocation(line: 2316, column: 16, scope: !5651)
!5653 = !DILocation(line: 2316, column: 22, scope: !5651)
!5654 = !DILocation(line: 2316, column: 11, scope: !5641)
!5655 = !DILocation(line: 2317, column: 25, scope: !5651)
!5656 = !DILocation(line: 2317, column: 31, scope: !5651)
!5657 = !DILocation(line: 2317, column: 15, scope: !5651)
!5658 = !DILocation(line: 2317, column: 13, scope: !5651)
!5659 = !DILocation(line: 2317, column: 9, scope: !5651)
!5660 = !DILocation(line: 2319, column: 12, scope: !5661)
!5661 = distinct !DILexicalBlock(scope: !5641, file: !63, line: 2319, column: 11)
!5662 = !DILocation(line: 2319, column: 17, scope: !5661)
!5663 = !DILocation(line: 2319, column: 29, scope: !5661)
!5664 = !DILocation(line: 2319, column: 32, scope: !5661)
!5665 = !DILocation(line: 2319, column: 37, scope: !5661)
!5666 = !DILocation(line: 2319, column: 43, scope: !5661)
!5667 = !DILocation(line: 2320, column: 11, scope: !5661)
!5668 = !DILocation(line: 2320, column: 14, scope: !5661)
!5669 = !DILocation(line: 2320, column: 19, scope: !5661)
!5670 = !DILocation(line: 2320, column: 25, scope: !5661)
!5671 = !DILocation(line: 2320, column: 41, scope: !5661)
!5672 = !DILocation(line: 2320, column: 28, scope: !5661)
!5673 = !DILocation(line: 2319, column: 11, scope: !5641)
!5674 = !DILocalVariable(name: "saved", scope: !5675, file: !63, line: 2322, type: !8)
!5675 = distinct !DILexicalBlock(scope: !5661, file: !63, line: 2321, column: 9)
!5676 = !DILocation(line: 2322, column: 16, scope: !5675)
!5677 = !DILocation(line: 2322, column: 25, scope: !5675)
!5678 = !DILocation(line: 2322, column: 24, scope: !5675)
!5679 = !DILocation(line: 2323, column: 12, scope: !5675)
!5680 = !DILocation(line: 2323, column: 16, scope: !5675)
!5681 = !DILocation(line: 2325, column: 11, scope: !5675)
!5682 = !DILocation(line: 2325, column: 36, scope: !5675)
!5683 = !DILocation(line: 2325, column: 35, scope: !5675)
!5684 = !DILocation(line: 2325, column: 25, scope: !5675)
!5685 = !DILocation(line: 2325, column: 18, scope: !5675)
!5686 = !DILocation(line: 2326, column: 16, scope: !5675)
!5687 = distinct !{!5687, !5681, !5686}
!5688 = !DILocalVariable(name: "tighter_lim", scope: !5675, file: !63, line: 2328, type: !7)
!5689 = !DILocation(line: 2328, column: 17, scope: !5675)
!5690 = !DILocation(line: 2328, column: 31, scope: !5675)
!5691 = !DILocation(line: 2330, column: 15, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5675, file: !63, line: 2330, column: 15)
!5693 = !DILocation(line: 2330, column: 21, scope: !5692)
!5694 = !DILocation(line: 2330, column: 19, scope: !5692)
!5695 = !DILocation(line: 2330, column: 15, scope: !5675)
!5696 = !DILocation(line: 2331, column: 27, scope: !5692)
!5697 = !DILocation(line: 2331, column: 25, scope: !5692)
!5698 = !DILocation(line: 2331, column: 13, scope: !5692)
!5699 = !DILocation(line: 2332, column: 20, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5692, file: !63, line: 2332, column: 20)
!5701 = !DILocation(line: 2332, column: 25, scope: !5700)
!5702 = !DILocation(line: 2332, column: 20, scope: !5692)
!5703 = !DILocation(line: 2333, column: 23, scope: !5700)
!5704 = !DILocation(line: 2333, column: 13, scope: !5700)
!5705 = !DILocation(line: 2334, column: 20, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5700, file: !63, line: 2334, column: 20)
!5707 = !DILocation(line: 2334, column: 25, scope: !5706)
!5708 = !DILocation(line: 2334, column: 20, scope: !5700)
!5709 = !DILocalVariable(name: "__x", scope: !5710, file: !63, line: 2335, type: !557)
!5710 = distinct !DILexicalBlock(scope: !5706, file: !63, line: 2335, column: 13)
!5711 = !DILocation(line: 2335, column: 13, scope: !5710)
!5712 = !DILocation(line: 2335, column: 13, scope: !5706)
!5713 = !DILocation(line: 2336, column: 20, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5706, file: !63, line: 2336, column: 20)
!5715 = !DILocation(line: 2336, column: 25, scope: !5714)
!5716 = !DILocation(line: 2336, column: 33, scope: !5714)
!5717 = !DILocation(line: 2336, column: 36, scope: !5714)
!5718 = !DILocation(line: 2336, column: 41, scope: !5714)
!5719 = !DILocation(line: 2336, column: 20, scope: !5706)
!5720 = !DILocalVariable(name: "p", scope: !5721, file: !63, line: 2338, type: !90)
!5721 = distinct !DILexicalBlock(scope: !5714, file: !63, line: 2337, column: 13)
!5722 = !DILocation(line: 2338, column: 27, scope: !5721)
!5723 = !DILocation(line: 2338, column: 31, scope: !5721)
!5724 = !DILocation(line: 2338, column: 38, scope: !5721)
!5725 = !DILocation(line: 2338, column: 44, scope: !5721)
!5726 = !DILocation(line: 2338, column: 42, scope: !5721)
!5727 = !DILocation(line: 2338, column: 48, scope: !5721)
!5728 = !DILocation(line: 2338, column: 52, scope: !5721)
!5729 = !DILocation(line: 2338, column: 51, scope: !5721)
!5730 = !DILocation(line: 2338, column: 56, scope: !5721)
!5731 = !DILocation(line: 0, scope: !5721)
!5732 = !DILocation(line: 2338, column: 35, scope: !5721)
!5733 = !DILocalVariable(name: "max_digit", scope: !5721, file: !63, line: 2339, type: !535)
!5734 = !DILocation(line: 2339, column: 29, scope: !5721)
!5735 = !DILocation(line: 2339, column: 41, scope: !5721)
!5736 = !DILocation(line: 2340, column: 26, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5721, file: !63, line: 2340, column: 19)
!5738 = !DILocation(line: 2340, column: 23, scope: !5737)
!5739 = !DILocation(line: 2340, column: 19, scope: !5721)
!5740 = !DILocalVariable(name: "ch", scope: !5741, file: !63, line: 2342, type: !535)
!5741 = distinct !DILexicalBlock(scope: !5737, file: !63, line: 2341, column: 17)
!5742 = !DILocation(line: 2342, column: 33, scope: !5741)
!5743 = !DILocation(line: 2342, column: 39, scope: !5741)
!5744 = !DILocation(line: 2342, column: 38, scope: !5741)
!5745 = !DILocation(line: 2343, column: 42, scope: !5741)
!5746 = !DILocation(line: 2344, column: 24, scope: !5741)
!5747 = !DILocation(line: 2344, column: 29, scope: !5741)
!5748 = !DILocation(line: 2344, column: 43, scope: !5741)
!5749 = !DILocation(line: 2344, column: 57, scope: !5741)
!5750 = !DILocation(line: 2344, column: 46, scope: !5741)
!5751 = !DILocation(line: 0, scope: !5741)
!5752 = !DILocation(line: 2344, column: 21, scope: !5741)
!5753 = !DILocation(line: 2343, column: 31, scope: !5741)
!5754 = !DILocation(line: 2345, column: 17, scope: !5741)
!5755 = !DILocation(line: 2346, column: 13, scope: !5721)
!5756 = !DILocation(line: 2348, column: 27, scope: !5714)
!5757 = !DILocation(line: 2348, column: 25, scope: !5714)
!5758 = !DILocation(line: 2350, column: 18, scope: !5675)
!5759 = !DILocation(line: 2350, column: 12, scope: !5675)
!5760 = !DILocation(line: 2350, column: 16, scope: !5675)
!5761 = !DILocation(line: 2351, column: 17, scope: !5675)
!5762 = !DILocation(line: 2351, column: 15, scope: !5675)
!5763 = !DILocation(line: 2352, column: 9, scope: !5675)
!5764 = !DILocation(line: 2353, column: 5, scope: !5641)
!5765 = !DILocalVariable(name: "offset", scope: !5615, file: !63, line: 2355, type: !52)
!5766 = !DILocation(line: 2355, column: 10, scope: !5615)
!5767 = !DILocation(line: 2355, column: 32, scope: !5615)
!5768 = !DILocation(line: 2355, column: 38, scope: !5615)
!5769 = !DILocation(line: 2355, column: 19, scope: !5615)
!5770 = !DILocalVariable(name: "width", scope: !5615, file: !63, line: 2356, type: !52)
!5771 = !DILocation(line: 2356, column: 10, scope: !5615)
!5772 = !DILocation(line: 2356, column: 31, scope: !5615)
!5773 = !DILocation(line: 2356, column: 36, scope: !5615)
!5774 = !DILocation(line: 2356, column: 18, scope: !5615)
!5775 = !DILocation(line: 2357, column: 13, scope: !5615)
!5776 = !DILocation(line: 2357, column: 21, scope: !5615)
!5777 = !DILocation(line: 2357, column: 3, scope: !5615)
!5778 = !DILocation(line: 2358, column: 1, scope: !5615)
!5779 = distinct !DISubprogram(name: "begfield", scope: !63, file: !63, line: 1612, type: !5780, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5780 = !DISubroutineType(types: !5781)
!5781 = !{!7, !539, !522}
!5782 = !DILocalVariable(name: "line", arg: 1, scope: !5779, file: !63, line: 1612, type: !539)
!5783 = !DILocation(line: 1612, column: 30, scope: !5779)
!5784 = !DILocalVariable(name: "key", arg: 2, scope: !5779, file: !63, line: 1612, type: !522)
!5785 = !DILocation(line: 1612, column: 59, scope: !5779)
!5786 = !DILocalVariable(name: "ptr", scope: !5779, file: !63, line: 1614, type: !7)
!5787 = !DILocation(line: 1614, column: 9, scope: !5779)
!5788 = !DILocation(line: 1614, column: 15, scope: !5779)
!5789 = !DILocation(line: 1614, column: 21, scope: !5779)
!5790 = !DILocalVariable(name: "lim", scope: !5779, file: !63, line: 1614, type: !7)
!5791 = !DILocation(line: 1614, column: 28, scope: !5779)
!5792 = !DILocation(line: 1614, column: 34, scope: !5779)
!5793 = !DILocation(line: 1614, column: 40, scope: !5779)
!5794 = !DILocation(line: 1614, column: 46, scope: !5779)
!5795 = !DILocation(line: 1614, column: 38, scope: !5779)
!5796 = !DILocation(line: 1614, column: 53, scope: !5779)
!5797 = !DILocalVariable(name: "sword", scope: !5779, file: !63, line: 1615, type: !52)
!5798 = !DILocation(line: 1615, column: 10, scope: !5779)
!5799 = !DILocation(line: 1615, column: 18, scope: !5779)
!5800 = !DILocation(line: 1615, column: 23, scope: !5779)
!5801 = !DILocalVariable(name: "schar", scope: !5779, file: !63, line: 1616, type: !52)
!5802 = !DILocation(line: 1616, column: 10, scope: !5779)
!5803 = !DILocation(line: 1616, column: 18, scope: !5779)
!5804 = !DILocation(line: 1616, column: 23, scope: !5779)
!5805 = !DILocation(line: 1621, column: 7, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5779, file: !63, line: 1621, column: 7)
!5807 = !DILocation(line: 1621, column: 11, scope: !5806)
!5808 = !DILocation(line: 1621, column: 7, scope: !5779)
!5809 = !DILocation(line: 1622, column: 5, scope: !5806)
!5810 = !DILocation(line: 1622, column: 12, scope: !5806)
!5811 = !DILocation(line: 1622, column: 18, scope: !5806)
!5812 = !DILocation(line: 1622, column: 16, scope: !5806)
!5813 = !DILocation(line: 1622, column: 22, scope: !5806)
!5814 = !DILocation(line: 1622, column: 30, scope: !5806)
!5815 = !DILocation(line: 0, scope: !5806)
!5816 = !DILocation(line: 1624, column: 9, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5806, file: !63, line: 1623, column: 7)
!5818 = !DILocation(line: 1624, column: 16, scope: !5817)
!5819 = !DILocation(line: 1624, column: 22, scope: !5817)
!5820 = !DILocation(line: 1624, column: 20, scope: !5817)
!5821 = !DILocation(line: 1624, column: 26, scope: !5817)
!5822 = !DILocation(line: 1624, column: 30, scope: !5817)
!5823 = !DILocation(line: 1624, column: 29, scope: !5817)
!5824 = !DILocation(line: 1624, column: 37, scope: !5817)
!5825 = !DILocation(line: 1624, column: 34, scope: !5817)
!5826 = !DILocation(line: 0, scope: !5817)
!5827 = !DILocation(line: 1625, column: 11, scope: !5817)
!5828 = distinct !{!5828, !5816, !5829}
!5829 = !DILocation(line: 1625, column: 13, scope: !5817)
!5830 = !DILocation(line: 1626, column: 13, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5817, file: !63, line: 1626, column: 13)
!5832 = !DILocation(line: 1626, column: 19, scope: !5831)
!5833 = !DILocation(line: 1626, column: 17, scope: !5831)
!5834 = !DILocation(line: 1626, column: 13, scope: !5817)
!5835 = !DILocation(line: 1627, column: 11, scope: !5831)
!5836 = distinct !{!5836, !5809, !5837}
!5837 = !DILocation(line: 1628, column: 7, scope: !5806)
!5838 = !DILocation(line: 1630, column: 5, scope: !5806)
!5839 = !DILocation(line: 1630, column: 12, scope: !5806)
!5840 = !DILocation(line: 1630, column: 18, scope: !5806)
!5841 = !DILocation(line: 1630, column: 16, scope: !5806)
!5842 = !DILocation(line: 1630, column: 22, scope: !5806)
!5843 = !DILocation(line: 1630, column: 30, scope: !5806)
!5844 = !DILocation(line: 1632, column: 9, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5806, file: !63, line: 1631, column: 7)
!5846 = !DILocation(line: 1632, column: 16, scope: !5845)
!5847 = !DILocation(line: 1632, column: 22, scope: !5845)
!5848 = !DILocation(line: 1632, column: 20, scope: !5845)
!5849 = !DILocation(line: 1632, column: 26, scope: !5845)
!5850 = !DILocation(line: 1632, column: 47, scope: !5845)
!5851 = !DILocation(line: 1632, column: 46, scope: !5845)
!5852 = !DILocation(line: 1632, column: 36, scope: !5845)
!5853 = !DILocation(line: 1632, column: 29, scope: !5845)
!5854 = !DILocation(line: 0, scope: !5845)
!5855 = !DILocation(line: 1633, column: 11, scope: !5845)
!5856 = distinct !{!5856, !5844, !5857}
!5857 = !DILocation(line: 1633, column: 13, scope: !5845)
!5858 = !DILocation(line: 1634, column: 9, scope: !5845)
!5859 = !DILocation(line: 1634, column: 16, scope: !5845)
!5860 = !DILocation(line: 1634, column: 22, scope: !5845)
!5861 = !DILocation(line: 1634, column: 20, scope: !5845)
!5862 = !DILocation(line: 1634, column: 26, scope: !5845)
!5863 = !DILocation(line: 1634, column: 48, scope: !5845)
!5864 = !DILocation(line: 1634, column: 47, scope: !5845)
!5865 = !DILocation(line: 1634, column: 37, scope: !5845)
!5866 = !DILocation(line: 1634, column: 30, scope: !5845)
!5867 = !DILocation(line: 1634, column: 29, scope: !5845)
!5868 = !DILocation(line: 1635, column: 11, scope: !5845)
!5869 = distinct !{!5869, !5858, !5870}
!5870 = !DILocation(line: 1635, column: 13, scope: !5845)
!5871 = distinct !{!5871, !5838, !5872}
!5872 = !DILocation(line: 1636, column: 7, scope: !5806)
!5873 = !DILocation(line: 1640, column: 7, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5779, file: !63, line: 1640, column: 7)
!5875 = !DILocation(line: 1640, column: 12, scope: !5874)
!5876 = !DILocation(line: 1640, column: 7, scope: !5779)
!5877 = !DILocation(line: 1641, column: 5, scope: !5874)
!5878 = !DILocation(line: 1641, column: 12, scope: !5874)
!5879 = !DILocation(line: 1641, column: 18, scope: !5874)
!5880 = !DILocation(line: 1641, column: 16, scope: !5874)
!5881 = !DILocation(line: 1641, column: 22, scope: !5874)
!5882 = !DILocation(line: 1641, column: 43, scope: !5874)
!5883 = !DILocation(line: 1641, column: 42, scope: !5874)
!5884 = !DILocation(line: 1641, column: 32, scope: !5874)
!5885 = !DILocation(line: 1641, column: 25, scope: !5874)
!5886 = !DILocation(line: 0, scope: !5874)
!5887 = !DILocation(line: 1642, column: 7, scope: !5874)
!5888 = distinct !{!5888, !5877, !5889}
!5889 = !DILocation(line: 1642, column: 9, scope: !5874)
!5890 = !DILocation(line: 1645, column: 9, scope: !5779)
!5891 = !DILocation(line: 1645, column: 7, scope: !5779)
!5892 = !DILocation(line: 1647, column: 10, scope: !5779)
!5893 = !DILocation(line: 1647, column: 3, scope: !5779)
!5894 = distinct !DISubprogram(name: "limfield", scope: !63, file: !63, line: 1654, type: !5780, scopeLine: 1655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!5895 = !DILocalVariable(name: "line", arg: 1, scope: !5894, file: !63, line: 1654, type: !539)
!5896 = !DILocation(line: 1654, column: 30, scope: !5894)
!5897 = !DILocalVariable(name: "key", arg: 2, scope: !5894, file: !63, line: 1654, type: !522)
!5898 = !DILocation(line: 1654, column: 59, scope: !5894)
!5899 = !DILocalVariable(name: "ptr", scope: !5894, file: !63, line: 1656, type: !7)
!5900 = !DILocation(line: 1656, column: 9, scope: !5894)
!5901 = !DILocation(line: 1656, column: 15, scope: !5894)
!5902 = !DILocation(line: 1656, column: 21, scope: !5894)
!5903 = !DILocalVariable(name: "lim", scope: !5894, file: !63, line: 1656, type: !7)
!5904 = !DILocation(line: 1656, column: 28, scope: !5894)
!5905 = !DILocation(line: 1656, column: 34, scope: !5894)
!5906 = !DILocation(line: 1656, column: 40, scope: !5894)
!5907 = !DILocation(line: 1656, column: 46, scope: !5894)
!5908 = !DILocation(line: 1656, column: 38, scope: !5894)
!5909 = !DILocation(line: 1656, column: 53, scope: !5894)
!5910 = !DILocalVariable(name: "eword", scope: !5894, file: !63, line: 1657, type: !52)
!5911 = !DILocation(line: 1657, column: 10, scope: !5894)
!5912 = !DILocation(line: 1657, column: 18, scope: !5894)
!5913 = !DILocation(line: 1657, column: 23, scope: !5894)
!5914 = !DILocalVariable(name: "echar", scope: !5894, file: !63, line: 1657, type: !52)
!5915 = !DILocation(line: 1657, column: 30, scope: !5894)
!5916 = !DILocation(line: 1657, column: 38, scope: !5894)
!5917 = !DILocation(line: 1657, column: 43, scope: !5894)
!5918 = !DILocation(line: 1659, column: 7, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5894, file: !63, line: 1659, column: 7)
!5920 = !DILocation(line: 1659, column: 13, scope: !5919)
!5921 = !DILocation(line: 1659, column: 7, scope: !5894)
!5922 = !DILocation(line: 1660, column: 10, scope: !5919)
!5923 = !DILocation(line: 1660, column: 5, scope: !5919)
!5924 = !DILocation(line: 1669, column: 7, scope: !5925)
!5925 = distinct !DILexicalBlock(scope: !5894, file: !63, line: 1669, column: 7)
!5926 = !DILocation(line: 1669, column: 11, scope: !5925)
!5927 = !DILocation(line: 1669, column: 7, scope: !5894)
!5928 = !DILocation(line: 1670, column: 5, scope: !5925)
!5929 = !DILocation(line: 1670, column: 12, scope: !5925)
!5930 = !DILocation(line: 1670, column: 18, scope: !5925)
!5931 = !DILocation(line: 1670, column: 16, scope: !5925)
!5932 = !DILocation(line: 1670, column: 22, scope: !5925)
!5933 = !DILocation(line: 1670, column: 30, scope: !5925)
!5934 = !DILocation(line: 0, scope: !5925)
!5935 = !DILocation(line: 1672, column: 9, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5925, file: !63, line: 1671, column: 7)
!5937 = !DILocation(line: 1672, column: 16, scope: !5936)
!5938 = !DILocation(line: 1672, column: 22, scope: !5936)
!5939 = !DILocation(line: 1672, column: 20, scope: !5936)
!5940 = !DILocation(line: 1672, column: 26, scope: !5936)
!5941 = !DILocation(line: 1672, column: 30, scope: !5936)
!5942 = !DILocation(line: 1672, column: 29, scope: !5936)
!5943 = !DILocation(line: 1672, column: 37, scope: !5936)
!5944 = !DILocation(line: 1672, column: 34, scope: !5936)
!5945 = !DILocation(line: 0, scope: !5936)
!5946 = !DILocation(line: 1673, column: 11, scope: !5936)
!5947 = distinct !{!5947, !5935, !5948}
!5948 = !DILocation(line: 1673, column: 13, scope: !5936)
!5949 = !DILocation(line: 1674, column: 13, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5936, file: !63, line: 1674, column: 13)
!5951 = !DILocation(line: 1674, column: 19, scope: !5950)
!5952 = !DILocation(line: 1674, column: 17, scope: !5950)
!5953 = !DILocation(line: 1674, column: 23, scope: !5950)
!5954 = !DILocation(line: 1674, column: 27, scope: !5950)
!5955 = !DILocation(line: 1674, column: 33, scope: !5950)
!5956 = !DILocation(line: 1674, column: 36, scope: !5950)
!5957 = !DILocation(line: 1674, column: 13, scope: !5936)
!5958 = !DILocation(line: 1675, column: 11, scope: !5950)
!5959 = distinct !{!5959, !5928, !5960}
!5960 = !DILocation(line: 1676, column: 7, scope: !5925)
!5961 = !DILocation(line: 1678, column: 5, scope: !5925)
!5962 = !DILocation(line: 1678, column: 12, scope: !5925)
!5963 = !DILocation(line: 1678, column: 18, scope: !5925)
!5964 = !DILocation(line: 1678, column: 16, scope: !5925)
!5965 = !DILocation(line: 1678, column: 22, scope: !5925)
!5966 = !DILocation(line: 1678, column: 30, scope: !5925)
!5967 = !DILocation(line: 1680, column: 9, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5925, file: !63, line: 1679, column: 7)
!5969 = !DILocation(line: 1680, column: 16, scope: !5968)
!5970 = !DILocation(line: 1680, column: 22, scope: !5968)
!5971 = !DILocation(line: 1680, column: 20, scope: !5968)
!5972 = !DILocation(line: 1680, column: 26, scope: !5968)
!5973 = !DILocation(line: 1680, column: 47, scope: !5968)
!5974 = !DILocation(line: 1680, column: 46, scope: !5968)
!5975 = !DILocation(line: 1680, column: 36, scope: !5968)
!5976 = !DILocation(line: 1680, column: 29, scope: !5968)
!5977 = !DILocation(line: 0, scope: !5968)
!5978 = !DILocation(line: 1681, column: 11, scope: !5968)
!5979 = distinct !{!5979, !5967, !5980}
!5980 = !DILocation(line: 1681, column: 13, scope: !5968)
!5981 = !DILocation(line: 1682, column: 9, scope: !5968)
!5982 = !DILocation(line: 1682, column: 16, scope: !5968)
!5983 = !DILocation(line: 1682, column: 22, scope: !5968)
!5984 = !DILocation(line: 1682, column: 20, scope: !5968)
!5985 = !DILocation(line: 1682, column: 26, scope: !5968)
!5986 = !DILocation(line: 1682, column: 48, scope: !5968)
!5987 = !DILocation(line: 1682, column: 47, scope: !5968)
!5988 = !DILocation(line: 1682, column: 37, scope: !5968)
!5989 = !DILocation(line: 1682, column: 30, scope: !5968)
!5990 = !DILocation(line: 1682, column: 29, scope: !5968)
!5991 = !DILocation(line: 1683, column: 11, scope: !5968)
!5992 = distinct !{!5992, !5981, !5993}
!5993 = !DILocation(line: 1683, column: 13, scope: !5968)
!5994 = distinct !{!5994, !5961, !5995}
!5995 = !DILocation(line: 1684, column: 7, scope: !5925)
!5996 = !DILocation(line: 1737, column: 7, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5894, file: !63, line: 1737, column: 7)
!5998 = !DILocation(line: 1737, column: 13, scope: !5997)
!5999 = !DILocation(line: 1737, column: 7, scope: !5894)
!6000 = !DILocation(line: 1741, column: 11, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !6002, file: !63, line: 1741, column: 11)
!6002 = distinct !DILexicalBlock(scope: !5997, file: !63, line: 1738, column: 5)
!6003 = !DILocation(line: 1741, column: 16, scope: !6001)
!6004 = !DILocation(line: 1741, column: 11, scope: !6002)
!6005 = !DILocation(line: 1742, column: 9, scope: !6001)
!6006 = !DILocation(line: 1742, column: 16, scope: !6001)
!6007 = !DILocation(line: 1742, column: 22, scope: !6001)
!6008 = !DILocation(line: 1742, column: 20, scope: !6001)
!6009 = !DILocation(line: 1742, column: 26, scope: !6001)
!6010 = !DILocation(line: 1742, column: 47, scope: !6001)
!6011 = !DILocation(line: 1742, column: 46, scope: !6001)
!6012 = !DILocation(line: 1742, column: 36, scope: !6001)
!6013 = !DILocation(line: 1742, column: 29, scope: !6001)
!6014 = !DILocation(line: 0, scope: !6001)
!6015 = !DILocation(line: 1743, column: 11, scope: !6001)
!6016 = distinct !{!6016, !6005, !6017}
!6017 = !DILocation(line: 1743, column: 13, scope: !6001)
!6018 = !DILocation(line: 1746, column: 13, scope: !6002)
!6019 = !DILocation(line: 1746, column: 11, scope: !6002)
!6020 = !DILocation(line: 1747, column: 5, scope: !6002)
!6021 = !DILocation(line: 1749, column: 10, scope: !5894)
!6022 = !DILocation(line: 1749, column: 3, scope: !5894)
!6023 = distinct !DISubprogram(name: "key_numeric", scope: !63, file: !63, line: 2297, type: !3437, scopeLine: 2298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6024 = !DILocalVariable(name: "key", arg: 1, scope: !6023, file: !63, line: 2297, type: !522)
!6025 = !DILocation(line: 2297, column: 37, scope: !6023)
!6026 = !DILocation(line: 2299, column: 10, scope: !6023)
!6027 = !DILocation(line: 2299, column: 15, scope: !6023)
!6028 = !DILocation(line: 2299, column: 23, scope: !6023)
!6029 = !DILocation(line: 2299, column: 26, scope: !6023)
!6030 = !DILocation(line: 2299, column: 31, scope: !6023)
!6031 = !DILocation(line: 2299, column: 47, scope: !6023)
!6032 = !DILocation(line: 2299, column: 50, scope: !6023)
!6033 = !DILocation(line: 2299, column: 55, scope: !6023)
!6034 = !DILocation(line: 2299, column: 3, scope: !6023)
!6035 = distinct !DISubprogram(name: "getmonth", scope: !63, file: !63, line: 2049, type: !6036, scopeLine: 2050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6036 = !DISubroutineType(types: !6037)
!6037 = !{!5, !90, !178}
!6038 = !DILocalVariable(name: "month", arg: 1, scope: !6035, file: !63, line: 2049, type: !90)
!6039 = !DILocation(line: 2049, column: 23, scope: !6035)
!6040 = !DILocalVariable(name: "ea", arg: 2, scope: !6035, file: !63, line: 2049, type: !178)
!6041 = !DILocation(line: 2049, column: 37, scope: !6035)
!6042 = !DILocalVariable(name: "lo", scope: !6035, file: !63, line: 2051, type: !52)
!6043 = !DILocation(line: 2051, column: 10, scope: !6035)
!6044 = !DILocalVariable(name: "hi", scope: !6035, file: !63, line: 2052, type: !52)
!6045 = !DILocation(line: 2052, column: 10, scope: !6035)
!6046 = !DILocation(line: 2054, column: 3, scope: !6035)
!6047 = !DILocation(line: 2054, column: 28, scope: !6035)
!6048 = !DILocation(line: 2054, column: 27, scope: !6035)
!6049 = !DILocation(line: 2054, column: 17, scope: !6035)
!6050 = !DILocation(line: 2054, column: 10, scope: !6035)
!6051 = !DILocation(line: 2055, column: 10, scope: !6035)
!6052 = distinct !{!6052, !6046, !6051}
!6053 = !DILocation(line: 2057, column: 3, scope: !6035)
!6054 = !DILocalVariable(name: "ix", scope: !6055, file: !63, line: 2059, type: !52)
!6055 = distinct !DILexicalBlock(scope: !6035, file: !63, line: 2058, column: 5)
!6056 = !DILocation(line: 2059, column: 14, scope: !6055)
!6057 = !DILocation(line: 2059, column: 20, scope: !6055)
!6058 = !DILocation(line: 2059, column: 25, scope: !6055)
!6059 = !DILocation(line: 2059, column: 23, scope: !6055)
!6060 = !DILocation(line: 2059, column: 29, scope: !6055)
!6061 = !DILocalVariable(name: "m", scope: !6055, file: !63, line: 2060, type: !90)
!6062 = !DILocation(line: 2060, column: 19, scope: !6055)
!6063 = !DILocation(line: 2060, column: 23, scope: !6055)
!6064 = !DILocalVariable(name: "n", scope: !6055, file: !63, line: 2061, type: !90)
!6065 = !DILocation(line: 2061, column: 19, scope: !6055)
!6066 = !DILocation(line: 2061, column: 32, scope: !6055)
!6067 = !DILocation(line: 2061, column: 23, scope: !6055)
!6068 = !DILocation(line: 2061, column: 36, scope: !6055)
!6069 = !DILocation(line: 2063, column: 7, scope: !6055)
!6070 = !DILocation(line: 2065, column: 17, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6072, file: !63, line: 2065, column: 15)
!6072 = distinct !DILexicalBlock(scope: !6073, file: !63, line: 2064, column: 9)
!6073 = distinct !DILexicalBlock(scope: !6074, file: !63, line: 2063, column: 7)
!6074 = distinct !DILexicalBlock(scope: !6055, file: !63, line: 2063, column: 7)
!6075 = !DILocation(line: 2065, column: 16, scope: !6071)
!6076 = !DILocation(line: 2065, column: 15, scope: !6072)
!6077 = !DILocation(line: 2067, column: 19, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6079, file: !63, line: 2067, column: 19)
!6079 = distinct !DILexicalBlock(scope: !6071, file: !63, line: 2066, column: 13)
!6080 = !DILocation(line: 2067, column: 19, scope: !6079)
!6081 = !DILocation(line: 2068, column: 32, scope: !6078)
!6082 = !DILocation(line: 2068, column: 18, scope: !6078)
!6083 = !DILocation(line: 2068, column: 21, scope: !6078)
!6084 = !DILocation(line: 2068, column: 17, scope: !6078)
!6085 = !DILocation(line: 2069, column: 31, scope: !6079)
!6086 = !DILocation(line: 2069, column: 22, scope: !6079)
!6087 = !DILocation(line: 2069, column: 35, scope: !6079)
!6088 = !DILocation(line: 2069, column: 15, scope: !6079)
!6089 = !DILocation(line: 2071, column: 49, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6072, file: !63, line: 2071, column: 15)
!6091 = !DILocation(line: 2071, column: 48, scope: !6090)
!6092 = !DILocation(line: 2071, column: 38, scope: !6090)
!6093 = !DILocation(line: 2071, column: 25, scope: !6090)
!6094 = !DILocation(line: 2071, column: 15, scope: !6090)
!6095 = !DILocation(line: 2071, column: 67, scope: !6090)
!6096 = !DILocation(line: 2071, column: 66, scope: !6090)
!6097 = !DILocation(line: 2071, column: 56, scope: !6090)
!6098 = !DILocation(line: 2071, column: 54, scope: !6090)
!6099 = !DILocation(line: 2071, column: 15, scope: !6072)
!6100 = !DILocation(line: 2073, column: 20, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6090, file: !63, line: 2072, column: 13)
!6102 = !DILocation(line: 2073, column: 18, scope: !6101)
!6103 = !DILocation(line: 2074, column: 15, scope: !6101)
!6104 = !DILocation(line: 2076, column: 54, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !6090, file: !63, line: 2076, column: 20)
!6106 = !DILocation(line: 2076, column: 53, scope: !6105)
!6107 = !DILocation(line: 2076, column: 43, scope: !6105)
!6108 = !DILocation(line: 2076, column: 30, scope: !6105)
!6109 = !DILocation(line: 2076, column: 20, scope: !6105)
!6110 = !DILocation(line: 2076, column: 72, scope: !6105)
!6111 = !DILocation(line: 2076, column: 71, scope: !6105)
!6112 = !DILocation(line: 2076, column: 61, scope: !6105)
!6113 = !DILocation(line: 2076, column: 59, scope: !6105)
!6114 = !DILocation(line: 2076, column: 20, scope: !6090)
!6115 = !DILocation(line: 2078, column: 20, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6105, file: !63, line: 2077, column: 13)
!6117 = !DILocation(line: 2078, column: 23, scope: !6116)
!6118 = !DILocation(line: 2078, column: 18, scope: !6116)
!6119 = !DILocation(line: 2079, column: 15, scope: !6116)
!6120 = !DILocation(line: 2081, column: 9, scope: !6072)
!6121 = !DILocation(line: 2063, column: 16, scope: !6073)
!6122 = !DILocation(line: 2063, column: 21, scope: !6073)
!6123 = !DILocation(line: 2063, column: 7, scope: !6073)
!6124 = distinct !{!6124, !6125, !6126}
!6125 = !DILocation(line: 2063, column: 7, scope: !6074)
!6126 = !DILocation(line: 2081, column: 9, scope: !6074)
!6127 = !DILocation(line: 2082, column: 5, scope: !6055)
!6128 = !DILocation(line: 2083, column: 10, scope: !6035)
!6129 = !DILocation(line: 2083, column: 15, scope: !6035)
!6130 = !DILocation(line: 2083, column: 13, scope: !6035)
!6131 = distinct !{!6131, !6053, !6132}
!6132 = !DILocation(line: 2083, column: 17, scope: !6035)
!6133 = !DILocation(line: 2085, column: 3, scope: !6035)
!6134 = !DILocation(line: 2086, column: 1, scope: !6035)
!6135 = distinct !DISubprogram(name: "traverse_raw_number", scope: !63, file: !63, line: 1906, type: !6136, scopeLine: 1907, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6136 = !DISubroutineType(types: !6137)
!6137 = !{!535, !481}
!6138 = !DILocalVariable(name: "number", arg: 1, scope: !6135, file: !63, line: 1906, type: !481)
!6139 = !DILocation(line: 1906, column: 35, scope: !6135)
!6140 = !DILocalVariable(name: "p", scope: !6135, file: !63, line: 1908, type: !90)
!6141 = !DILocation(line: 1908, column: 15, scope: !6135)
!6142 = !DILocation(line: 1908, column: 20, scope: !6135)
!6143 = !DILocation(line: 1908, column: 19, scope: !6135)
!6144 = !DILocalVariable(name: "ch", scope: !6135, file: !63, line: 1909, type: !535)
!6145 = !DILocation(line: 1909, column: 17, scope: !6135)
!6146 = !DILocalVariable(name: "max_digit", scope: !6135, file: !63, line: 1910, type: !535)
!6147 = !DILocation(line: 1910, column: 17, scope: !6135)
!6148 = !DILocalVariable(name: "ends_with_thousands_sep", scope: !6135, file: !63, line: 1911, type: !162)
!6149 = !DILocation(line: 1911, column: 8, scope: !6135)
!6150 = !DILocation(line: 1919, column: 3, scope: !6135)
!6151 = !DILocation(line: 1919, column: 10, scope: !6135)
!6152 = !DILocation(line: 1921, column: 11, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !6154, file: !63, line: 1921, column: 11)
!6154 = distinct !DILexicalBlock(scope: !6135, file: !63, line: 1920, column: 5)
!6155 = !DILocation(line: 1921, column: 23, scope: !6153)
!6156 = !DILocation(line: 1921, column: 21, scope: !6153)
!6157 = !DILocation(line: 1921, column: 11, scope: !6154)
!6158 = !DILocation(line: 1922, column: 21, scope: !6153)
!6159 = !DILocation(line: 1922, column: 19, scope: !6153)
!6160 = !DILocation(line: 1922, column: 9, scope: !6153)
!6161 = !DILocation(line: 1927, column: 35, scope: !6154)
!6162 = !DILocation(line: 1927, column: 34, scope: !6154)
!6163 = !DILocation(line: 1927, column: 40, scope: !6154)
!6164 = !DILocation(line: 1927, column: 37, scope: !6154)
!6165 = !DILocation(line: 1927, column: 31, scope: !6154)
!6166 = !DILocation(line: 1928, column: 11, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6154, file: !63, line: 1928, column: 11)
!6168 = !DILocation(line: 1928, column: 11, scope: !6154)
!6169 = !DILocation(line: 1929, column: 9, scope: !6167)
!6170 = distinct !{!6170, !6150, !6171}
!6171 = !DILocation(line: 1930, column: 5, scope: !6135)
!6172 = !DILocation(line: 1932, column: 7, scope: !6173)
!6173 = distinct !DILexicalBlock(scope: !6135, file: !63, line: 1932, column: 7)
!6174 = !DILocation(line: 1932, column: 7, scope: !6135)
!6175 = !DILocation(line: 1935, column: 17, scope: !6176)
!6176 = distinct !DILexicalBlock(scope: !6173, file: !63, line: 1933, column: 5)
!6177 = !DILocation(line: 1935, column: 19, scope: !6176)
!6178 = !DILocation(line: 1935, column: 8, scope: !6176)
!6179 = !DILocation(line: 1935, column: 15, scope: !6176)
!6180 = !DILocation(line: 1936, column: 14, scope: !6176)
!6181 = !DILocation(line: 1936, column: 7, scope: !6176)
!6182 = !DILocation(line: 1939, column: 7, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6135, file: !63, line: 1939, column: 7)
!6184 = !DILocation(line: 1939, column: 13, scope: !6183)
!6185 = !DILocation(line: 1939, column: 10, scope: !6183)
!6186 = !DILocation(line: 1939, column: 7, scope: !6135)
!6187 = !DILocation(line: 1940, column: 5, scope: !6183)
!6188 = !DILocation(line: 1940, column: 12, scope: !6183)
!6189 = !DILocation(line: 1941, column: 11, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6183, file: !63, line: 1941, column: 11)
!6191 = !DILocation(line: 1941, column: 23, scope: !6190)
!6192 = !DILocation(line: 1941, column: 21, scope: !6190)
!6193 = !DILocation(line: 1941, column: 11, scope: !6183)
!6194 = !DILocation(line: 1942, column: 21, scope: !6190)
!6195 = !DILocation(line: 1942, column: 19, scope: !6190)
!6196 = !DILocation(line: 1942, column: 9, scope: !6190)
!6197 = distinct !{!6197, !6187, !6198}
!6198 = !DILocation(line: 1942, column: 21, scope: !6183)
!6199 = !DILocation(line: 1944, column: 13, scope: !6135)
!6200 = !DILocation(line: 1944, column: 15, scope: !6135)
!6201 = !DILocation(line: 1944, column: 4, scope: !6135)
!6202 = !DILocation(line: 1944, column: 11, scope: !6135)
!6203 = !DILocation(line: 1945, column: 10, scope: !6135)
!6204 = !DILocation(line: 1945, column: 3, scope: !6135)
!6205 = !DILocation(line: 1946, column: 1, scope: !6135)
!6206 = distinct !DISubprogram(name: "debug_width", scope: !63, file: !63, line: 2265, type: !6207, scopeLine: 2266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6207 = !DISubroutineType(types: !6208)
!6208 = !{!52, !90, !90}
!6209 = !DILocalVariable(name: "text", arg: 1, scope: !6206, file: !63, line: 2265, type: !90)
!6210 = !DILocation(line: 2265, column: 26, scope: !6206)
!6211 = !DILocalVariable(name: "lim", arg: 2, scope: !6206, file: !63, line: 2265, type: !90)
!6212 = !DILocation(line: 2265, column: 44, scope: !6206)
!6213 = !DILocalVariable(name: "width", scope: !6206, file: !63, line: 2267, type: !52)
!6214 = !DILocation(line: 2267, column: 10, scope: !6206)
!6215 = !DILocation(line: 2267, column: 29, scope: !6206)
!6216 = !DILocation(line: 2267, column: 35, scope: !6206)
!6217 = !DILocation(line: 2267, column: 41, scope: !6206)
!6218 = !DILocation(line: 2267, column: 39, scope: !6206)
!6219 = !DILocation(line: 2267, column: 18, scope: !6206)
!6220 = !DILocation(line: 2268, column: 3, scope: !6206)
!6221 = !DILocation(line: 2268, column: 10, scope: !6206)
!6222 = !DILocation(line: 2268, column: 17, scope: !6206)
!6223 = !DILocation(line: 2268, column: 15, scope: !6206)
!6224 = !DILocation(line: 2269, column: 20, scope: !6206)
!6225 = !DILocation(line: 2269, column: 15, scope: !6206)
!6226 = !DILocation(line: 2269, column: 23, scope: !6206)
!6227 = !DILocation(line: 2269, column: 14, scope: !6206)
!6228 = !DILocation(line: 2269, column: 11, scope: !6206)
!6229 = distinct !{!6229, !6220, !6230}
!6230 = !DILocation(line: 2269, column: 30, scope: !6206)
!6231 = !DILocation(line: 2270, column: 10, scope: !6206)
!6232 = !DILocation(line: 2270, column: 3, scope: !6206)
!6233 = distinct !DISubprogram(name: "mark_key", scope: !63, file: !63, line: 2277, type: !6234, scopeLine: 2278, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6234 = !DISubroutineType(types: !6235)
!6235 = !{null, !52, !52}
!6236 = !DILocalVariable(name: "offset", arg: 1, scope: !6233, file: !63, line: 2277, type: !52)
!6237 = !DILocation(line: 2277, column: 18, scope: !6233)
!6238 = !DILocalVariable(name: "width", arg: 2, scope: !6233, file: !63, line: 2277, type: !52)
!6239 = !DILocation(line: 2277, column: 33, scope: !6233)
!6240 = !DILocation(line: 2279, column: 3, scope: !6233)
!6241 = !DILocation(line: 2279, column: 16, scope: !6233)
!6242 = !DILocation(line: 2280, column: 5, scope: !6233)
!6243 = distinct !{!6243, !6240, !6242}
!6244 = !DILocation(line: 2282, column: 8, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6233, file: !63, line: 2282, column: 7)
!6246 = !DILocation(line: 2282, column: 7, scope: !6233)
!6247 = !DILocation(line: 2283, column: 13, scope: !6245)
!6248 = !DILocation(line: 2283, column: 5, scope: !6245)
!6249 = !DILocation(line: 2286, column: 7, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6245, file: !63, line: 2285, column: 5)
!6251 = !DILocation(line: 2287, column: 9, scope: !6250)
!6252 = !DILocation(line: 2288, column: 14, scope: !6250)
!6253 = distinct !{!6253, !6249, !6254}
!6254 = !DILocation(line: 2288, column: 21, scope: !6250)
!6255 = !DILocation(line: 2290, column: 7, scope: !6250)
!6256 = !DILocation(line: 2292, column: 1, scope: !6233)
!6257 = distinct !DISubprogram(name: "keycompare", scope: !63, file: !63, line: 2529, type: !5421, scopeLine: 2530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6258 = !DILocalVariable(name: "a", arg: 1, scope: !6257, file: !63, line: 2529, type: !539)
!6259 = !DILocation(line: 2529, column: 32, scope: !6257)
!6260 = !DILocalVariable(name: "b", arg: 2, scope: !6257, file: !63, line: 2529, type: !539)
!6261 = !DILocation(line: 2529, column: 54, scope: !6257)
!6262 = !DILocalVariable(name: "key", scope: !6257, file: !63, line: 2531, type: !152)
!6263 = !DILocation(line: 2531, column: 20, scope: !6257)
!6264 = !DILocation(line: 2531, column: 26, scope: !6257)
!6265 = !DILocalVariable(name: "texta", scope: !6257, file: !63, line: 2535, type: !7)
!6266 = !DILocation(line: 2535, column: 9, scope: !6257)
!6267 = !DILocation(line: 2535, column: 17, scope: !6257)
!6268 = !DILocation(line: 2535, column: 20, scope: !6257)
!6269 = !DILocalVariable(name: "textb", scope: !6257, file: !63, line: 2536, type: !7)
!6270 = !DILocation(line: 2536, column: 9, scope: !6257)
!6271 = !DILocation(line: 2536, column: 17, scope: !6257)
!6272 = !DILocation(line: 2536, column: 20, scope: !6257)
!6273 = !DILocalVariable(name: "lima", scope: !6257, file: !63, line: 2537, type: !7)
!6274 = !DILocation(line: 2537, column: 9, scope: !6257)
!6275 = !DILocation(line: 2537, column: 16, scope: !6257)
!6276 = !DILocation(line: 2537, column: 19, scope: !6257)
!6277 = !DILocalVariable(name: "limb", scope: !6257, file: !63, line: 2538, type: !7)
!6278 = !DILocation(line: 2538, column: 9, scope: !6257)
!6279 = !DILocation(line: 2538, column: 16, scope: !6257)
!6280 = !DILocation(line: 2538, column: 19, scope: !6257)
!6281 = !DILocalVariable(name: "diff", scope: !6257, file: !63, line: 2540, type: !5)
!6282 = !DILocation(line: 2540, column: 7, scope: !6257)
!6283 = !DILocation(line: 2542, column: 3, scope: !6257)
!6284 = !DILocalVariable(name: "translate", scope: !6285, file: !63, line: 2544, type: !90)
!6285 = distinct !DILexicalBlock(scope: !6257, file: !63, line: 2543, column: 5)
!6286 = !DILocation(line: 2544, column: 19, scope: !6285)
!6287 = !DILocation(line: 2544, column: 31, scope: !6285)
!6288 = !DILocation(line: 2544, column: 36, scope: !6285)
!6289 = !DILocalVariable(name: "ignore", scope: !6285, file: !63, line: 2545, type: !160)
!6290 = !DILocation(line: 2545, column: 19, scope: !6285)
!6291 = !DILocation(line: 2545, column: 28, scope: !6285)
!6292 = !DILocation(line: 2545, column: 33, scope: !6285)
!6293 = !DILocation(line: 2548, column: 14, scope: !6285)
!6294 = !DILocation(line: 2548, column: 12, scope: !6285)
!6295 = !DILocation(line: 2549, column: 14, scope: !6285)
!6296 = !DILocation(line: 2549, column: 12, scope: !6285)
!6297 = !DILocalVariable(name: "lena", scope: !6285, file: !63, line: 2552, type: !52)
!6298 = !DILocation(line: 2552, column: 14, scope: !6285)
!6299 = !DILocation(line: 2552, column: 21, scope: !6285)
!6300 = !DILocation(line: 2552, column: 28, scope: !6285)
!6301 = !DILocation(line: 2552, column: 26, scope: !6285)
!6302 = !DILocalVariable(name: "lenb", scope: !6285, file: !63, line: 2553, type: !52)
!6303 = !DILocation(line: 2553, column: 14, scope: !6285)
!6304 = !DILocation(line: 2553, column: 21, scope: !6285)
!6305 = !DILocation(line: 2553, column: 28, scope: !6285)
!6306 = !DILocation(line: 2553, column: 26, scope: !6285)
!6307 = !DILocation(line: 2555, column: 11, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6285, file: !63, line: 2555, column: 11)
!6309 = !DILocation(line: 2555, column: 27, scope: !6308)
!6310 = !DILocation(line: 2555, column: 43, scope: !6308)
!6311 = !DILocation(line: 2555, column: 30, scope: !6308)
!6312 = !DILocation(line: 2556, column: 11, scope: !6308)
!6313 = !DILocation(line: 2556, column: 14, scope: !6308)
!6314 = !DILocation(line: 2556, column: 19, scope: !6308)
!6315 = !DILocation(line: 2556, column: 25, scope: !6308)
!6316 = !DILocation(line: 2556, column: 28, scope: !6308)
!6317 = !DILocation(line: 2556, column: 33, scope: !6308)
!6318 = !DILocation(line: 2556, column: 40, scope: !6308)
!6319 = !DILocation(line: 2556, column: 43, scope: !6308)
!6320 = !DILocation(line: 2556, column: 48, scope: !6308)
!6321 = !DILocation(line: 2555, column: 11, scope: !6285)
!6322 = !DILocalVariable(name: "ta", scope: !6323, file: !63, line: 2558, type: !7)
!6323 = distinct !DILexicalBlock(scope: !6308, file: !63, line: 2557, column: 9)
!6324 = !DILocation(line: 2558, column: 17, scope: !6323)
!6325 = !DILocalVariable(name: "tb", scope: !6323, file: !63, line: 2559, type: !7)
!6326 = !DILocation(line: 2559, column: 17, scope: !6323)
!6327 = !DILocalVariable(name: "tlena", scope: !6323, file: !63, line: 2560, type: !52)
!6328 = !DILocation(line: 2560, column: 18, scope: !6323)
!6329 = !DILocalVariable(name: "tlenb", scope: !6323, file: !63, line: 2561, type: !52)
!6330 = !DILocation(line: 2561, column: 18, scope: !6323)
!6331 = !DILocalVariable(name: "enda", scope: !6323, file: !63, line: 2563, type: !8)
!6332 = !DILocation(line: 2563, column: 16, scope: !6323)
!6333 = !DILocalVariable(name: "endb", scope: !6323, file: !63, line: 2564, type: !8)
!6334 = !DILocation(line: 2564, column: 16, scope: !6323)
!6335 = !DILocalVariable(name: "allocated", scope: !6323, file: !63, line: 2565, type: !47)
!6336 = !DILocation(line: 2565, column: 17, scope: !6323)
!6337 = !DILocalVariable(name: "stackbuf", scope: !6323, file: !63, line: 2566, type: !554)
!6338 = !DILocation(line: 2566, column: 16, scope: !6323)
!6339 = !DILocation(line: 2568, column: 15, scope: !6340)
!6340 = distinct !DILexicalBlock(scope: !6323, file: !63, line: 2568, column: 15)
!6341 = !DILocation(line: 2568, column: 22, scope: !6340)
!6342 = !DILocation(line: 2568, column: 25, scope: !6340)
!6343 = !DILocation(line: 2568, column: 15, scope: !6323)
!6344 = !DILocalVariable(name: "i", scope: !6345, file: !63, line: 2574, type: !52)
!6345 = distinct !DILexicalBlock(scope: !6340, file: !63, line: 2569, column: 13)
!6346 = !DILocation(line: 2574, column: 22, scope: !6345)
!6347 = !DILocalVariable(name: "size", scope: !6345, file: !63, line: 2577, type: !52)
!6348 = !DILocation(line: 2577, column: 22, scope: !6345)
!6349 = !DILocation(line: 2577, column: 29, scope: !6345)
!6350 = !DILocation(line: 2577, column: 34, scope: !6345)
!6351 = !DILocation(line: 2577, column: 40, scope: !6345)
!6352 = !DILocation(line: 2577, column: 38, scope: !6345)
!6353 = !DILocation(line: 2577, column: 45, scope: !6345)
!6354 = !DILocation(line: 2578, column: 19, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6345, file: !63, line: 2578, column: 19)
!6356 = !DILocation(line: 2578, column: 24, scope: !6355)
!6357 = !DILocation(line: 2578, column: 19, scope: !6345)
!6358 = !DILocation(line: 2579, column: 22, scope: !6355)
!6359 = !DILocation(line: 2579, column: 20, scope: !6355)
!6360 = !DILocation(line: 2579, column: 42, scope: !6355)
!6361 = !DILocation(line: 2579, column: 17, scope: !6355)
!6362 = !DILocation(line: 2581, column: 43, scope: !6355)
!6363 = !DILocation(line: 2581, column: 34, scope: !6355)
!6364 = !DILocation(line: 2581, column: 32, scope: !6355)
!6365 = !DILocation(line: 2581, column: 20, scope: !6355)
!6366 = !DILocation(line: 2582, column: 20, scope: !6345)
!6367 = !DILocation(line: 2582, column: 25, scope: !6345)
!6368 = !DILocation(line: 2582, column: 23, scope: !6345)
!6369 = !DILocation(line: 2582, column: 30, scope: !6345)
!6370 = !DILocation(line: 2582, column: 18, scope: !6345)
!6371 = !DILocation(line: 2586, column: 30, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6345, file: !63, line: 2586, column: 15)
!6373 = !DILocation(line: 2586, column: 26, scope: !6372)
!6374 = !DILocation(line: 2586, column: 20, scope: !6372)
!6375 = !DILocation(line: 2586, column: 35, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6372, file: !63, line: 2586, column: 15)
!6377 = !DILocation(line: 2586, column: 39, scope: !6376)
!6378 = !DILocation(line: 2586, column: 37, scope: !6376)
!6379 = !DILocation(line: 2586, column: 15, scope: !6372)
!6380 = !DILocation(line: 2587, column: 24, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6376, file: !63, line: 2587, column: 21)
!6382 = !DILocation(line: 2587, column: 31, scope: !6381)
!6383 = !DILocation(line: 2587, column: 34, scope: !6381)
!6384 = !DILocation(line: 2587, column: 51, scope: !6381)
!6385 = !DILocation(line: 2587, column: 57, scope: !6381)
!6386 = !DILocation(line: 2587, column: 41, scope: !6381)
!6387 = !DILocation(line: 2587, column: 21, scope: !6376)
!6388 = !DILocation(line: 2588, column: 34, scope: !6381)
!6389 = !DILocation(line: 2589, column: 36, scope: !6381)
!6390 = !DILocation(line: 2589, column: 56, scope: !6381)
!6391 = !DILocation(line: 2589, column: 62, scope: !6381)
!6392 = !DILocation(line: 2589, column: 46, scope: !6381)
!6393 = !DILocation(line: 2590, column: 36, scope: !6381)
!6394 = !DILocation(line: 2590, column: 42, scope: !6381)
!6395 = !DILocation(line: 2588, column: 33, scope: !6381)
!6396 = !DILocation(line: 2588, column: 19, scope: !6381)
!6397 = !DILocation(line: 2588, column: 27, scope: !6381)
!6398 = !DILocation(line: 2588, column: 31, scope: !6381)
!6399 = !DILocation(line: 2587, column: 61, scope: !6381)
!6400 = !DILocation(line: 2586, column: 46, scope: !6376)
!6401 = !DILocation(line: 2586, column: 15, scope: !6376)
!6402 = distinct !{!6402, !6379, !6403}
!6403 = !DILocation(line: 2590, column: 44, scope: !6372)
!6404 = !DILocation(line: 2591, column: 15, scope: !6345)
!6405 = !DILocation(line: 2591, column: 18, scope: !6345)
!6406 = !DILocation(line: 2591, column: 25, scope: !6345)
!6407 = !DILocation(line: 2593, column: 30, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6345, file: !63, line: 2593, column: 15)
!6409 = !DILocation(line: 2593, column: 26, scope: !6408)
!6410 = !DILocation(line: 2593, column: 20, scope: !6408)
!6411 = !DILocation(line: 2593, column: 35, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6408, file: !63, line: 2593, column: 15)
!6413 = !DILocation(line: 2593, column: 39, scope: !6412)
!6414 = !DILocation(line: 2593, column: 37, scope: !6412)
!6415 = !DILocation(line: 2593, column: 15, scope: !6408)
!6416 = !DILocation(line: 2594, column: 24, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6412, file: !63, line: 2594, column: 21)
!6418 = !DILocation(line: 2594, column: 31, scope: !6417)
!6419 = !DILocation(line: 2594, column: 34, scope: !6417)
!6420 = !DILocation(line: 2594, column: 51, scope: !6417)
!6421 = !DILocation(line: 2594, column: 57, scope: !6417)
!6422 = !DILocation(line: 2594, column: 41, scope: !6417)
!6423 = !DILocation(line: 2594, column: 21, scope: !6412)
!6424 = !DILocation(line: 2595, column: 34, scope: !6417)
!6425 = !DILocation(line: 2596, column: 36, scope: !6417)
!6426 = !DILocation(line: 2596, column: 56, scope: !6417)
!6427 = !DILocation(line: 2596, column: 62, scope: !6417)
!6428 = !DILocation(line: 2596, column: 46, scope: !6417)
!6429 = !DILocation(line: 2597, column: 36, scope: !6417)
!6430 = !DILocation(line: 2597, column: 42, scope: !6417)
!6431 = !DILocation(line: 2595, column: 33, scope: !6417)
!6432 = !DILocation(line: 2595, column: 19, scope: !6417)
!6433 = !DILocation(line: 2595, column: 27, scope: !6417)
!6434 = !DILocation(line: 2595, column: 31, scope: !6417)
!6435 = !DILocation(line: 2594, column: 61, scope: !6417)
!6436 = !DILocation(line: 2593, column: 46, scope: !6412)
!6437 = !DILocation(line: 2593, column: 15, scope: !6412)
!6438 = distinct !{!6438, !6415, !6439}
!6439 = !DILocation(line: 2597, column: 44, scope: !6408)
!6440 = !DILocation(line: 2598, column: 15, scope: !6345)
!6441 = !DILocation(line: 2598, column: 18, scope: !6345)
!6442 = !DILocation(line: 2598, column: 25, scope: !6345)
!6443 = !DILocation(line: 2599, column: 13, scope: !6345)
!6444 = !DILocation(line: 2603, column: 20, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6340, file: !63, line: 2601, column: 13)
!6446 = !DILocation(line: 2603, column: 18, scope: !6445)
!6447 = !DILocation(line: 2603, column: 35, scope: !6445)
!6448 = !DILocation(line: 2603, column: 33, scope: !6445)
!6449 = !DILocation(line: 2603, column: 48, scope: !6445)
!6450 = !DILocation(line: 2603, column: 51, scope: !6445)
!6451 = !DILocation(line: 2603, column: 46, scope: !6445)
!6452 = !DILocation(line: 2603, column: 59, scope: !6445)
!6453 = !DILocation(line: 2603, column: 62, scope: !6445)
!6454 = !DILocation(line: 2603, column: 69, scope: !6445)
!6455 = !DILocation(line: 2604, column: 20, scope: !6445)
!6456 = !DILocation(line: 2604, column: 18, scope: !6445)
!6457 = !DILocation(line: 2604, column: 35, scope: !6445)
!6458 = !DILocation(line: 2604, column: 33, scope: !6445)
!6459 = !DILocation(line: 2604, column: 48, scope: !6445)
!6460 = !DILocation(line: 2604, column: 51, scope: !6445)
!6461 = !DILocation(line: 2604, column: 46, scope: !6445)
!6462 = !DILocation(line: 2604, column: 59, scope: !6445)
!6463 = !DILocation(line: 2604, column: 62, scope: !6445)
!6464 = !DILocation(line: 2604, column: 69, scope: !6445)
!6465 = !DILocation(line: 2607, column: 15, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6323, file: !63, line: 2607, column: 15)
!6467 = !DILocation(line: 2607, column: 20, scope: !6466)
!6468 = !DILocation(line: 2607, column: 15, scope: !6323)
!6469 = !DILocation(line: 2608, column: 32, scope: !6466)
!6470 = !DILocation(line: 2608, column: 36, scope: !6466)
!6471 = !DILocation(line: 2608, column: 20, scope: !6466)
!6472 = !DILocation(line: 2608, column: 18, scope: !6466)
!6473 = !DILocation(line: 2608, column: 13, scope: !6466)
!6474 = !DILocation(line: 2609, column: 20, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6466, file: !63, line: 2609, column: 20)
!6476 = !DILocation(line: 2609, column: 25, scope: !6475)
!6477 = !DILocation(line: 2609, column: 20, scope: !6466)
!6478 = !DILocation(line: 2610, column: 40, scope: !6475)
!6479 = !DILocation(line: 2610, column: 44, scope: !6475)
!6480 = !DILocation(line: 2610, column: 20, scope: !6475)
!6481 = !DILocation(line: 2610, column: 18, scope: !6475)
!6482 = !DILocation(line: 2610, column: 13, scope: !6475)
!6483 = !DILocation(line: 2611, column: 20, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6475, file: !63, line: 2611, column: 20)
!6485 = !DILocation(line: 2611, column: 25, scope: !6484)
!6486 = !DILocation(line: 2611, column: 20, scope: !6475)
!6487 = !DILocation(line: 2612, column: 38, scope: !6484)
!6488 = !DILocation(line: 2612, column: 42, scope: !6484)
!6489 = !DILocation(line: 2612, column: 20, scope: !6484)
!6490 = !DILocation(line: 2612, column: 18, scope: !6484)
!6491 = !DILocation(line: 2612, column: 13, scope: !6484)
!6492 = !DILocation(line: 2613, column: 20, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6484, file: !63, line: 2613, column: 20)
!6494 = !DILocation(line: 2613, column: 25, scope: !6493)
!6495 = !DILocation(line: 2613, column: 20, scope: !6484)
!6496 = !DILocation(line: 2614, column: 30, scope: !6493)
!6497 = !DILocation(line: 2614, column: 20, scope: !6493)
!6498 = !DILocation(line: 2614, column: 52, scope: !6493)
!6499 = !DILocation(line: 2614, column: 42, scope: !6493)
!6500 = !DILocation(line: 2614, column: 40, scope: !6493)
!6501 = !DILocation(line: 2614, column: 18, scope: !6493)
!6502 = !DILocation(line: 2614, column: 13, scope: !6493)
!6503 = !DILocation(line: 2615, column: 20, scope: !6504)
!6504 = distinct !DILexicalBlock(scope: !6493, file: !63, line: 2615, column: 20)
!6505 = !DILocation(line: 2615, column: 25, scope: !6504)
!6506 = !DILocation(line: 2615, column: 20, scope: !6493)
!6507 = !DILocation(line: 2616, column: 36, scope: !6504)
!6508 = !DILocation(line: 2616, column: 40, scope: !6504)
!6509 = !DILocation(line: 2616, column: 47, scope: !6504)
!6510 = !DILocation(line: 2616, column: 51, scope: !6504)
!6511 = !DILocation(line: 2616, column: 20, scope: !6504)
!6512 = !DILocation(line: 2616, column: 18, scope: !6504)
!6513 = !DILocation(line: 2616, column: 13, scope: !6504)
!6514 = !DILocation(line: 2617, column: 20, scope: !6515)
!6515 = distinct !DILexicalBlock(scope: !6504, file: !63, line: 2617, column: 20)
!6516 = !DILocation(line: 2617, column: 25, scope: !6515)
!6517 = !DILocation(line: 2617, column: 20, scope: !6504)
!6518 = !DILocation(line: 2618, column: 32, scope: !6515)
!6519 = !DILocation(line: 2618, column: 36, scope: !6515)
!6520 = !DILocation(line: 2618, column: 20, scope: !6515)
!6521 = !DILocation(line: 2618, column: 18, scope: !6515)
!6522 = !DILocation(line: 2618, column: 13, scope: !6515)
!6523 = !DILocation(line: 2623, column: 19, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6525, file: !63, line: 2623, column: 19)
!6525 = distinct !DILexicalBlock(scope: !6515, file: !63, line: 2620, column: 13)
!6526 = !DILocation(line: 2623, column: 25, scope: !6524)
!6527 = !DILocation(line: 2623, column: 19, scope: !6525)
!6528 = !DILocation(line: 2624, column: 26, scope: !6524)
!6529 = !DILocation(line: 2624, column: 24, scope: !6524)
!6530 = !DILocation(line: 2624, column: 22, scope: !6524)
!6531 = !DILocation(line: 2624, column: 17, scope: !6524)
!6532 = !DILocation(line: 2625, column: 24, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6524, file: !63, line: 2625, column: 24)
!6534 = !DILocation(line: 2625, column: 30, scope: !6533)
!6535 = !DILocation(line: 2625, column: 24, scope: !6524)
!6536 = !DILocation(line: 2626, column: 22, scope: !6533)
!6537 = !DILocation(line: 2626, column: 17, scope: !6533)
!6538 = !DILocation(line: 2628, column: 35, scope: !6533)
!6539 = !DILocation(line: 2628, column: 39, scope: !6533)
!6540 = !DILocation(line: 2628, column: 45, scope: !6533)
!6541 = !DILocation(line: 2628, column: 50, scope: !6533)
!6542 = !DILocation(line: 2628, column: 54, scope: !6533)
!6543 = !DILocation(line: 2628, column: 60, scope: !6533)
!6544 = !DILocation(line: 2628, column: 24, scope: !6533)
!6545 = !DILocation(line: 2628, column: 22, scope: !6533)
!6546 = !DILocation(line: 2631, column: 15, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6323, file: !63, line: 2631, column: 15)
!6548 = !DILocation(line: 2631, column: 22, scope: !6547)
!6549 = !DILocation(line: 2631, column: 25, scope: !6547)
!6550 = !DILocation(line: 2631, column: 15, scope: !6323)
!6551 = !DILocation(line: 2632, column: 19, scope: !6547)
!6552 = !DILocation(line: 2632, column: 13, scope: !6547)
!6553 = !DILocation(line: 2635, column: 27, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6547, file: !63, line: 2634, column: 13)
!6555 = !DILocation(line: 2635, column: 15, scope: !6554)
!6556 = !DILocation(line: 2635, column: 18, scope: !6554)
!6557 = !DILocation(line: 2635, column: 25, scope: !6554)
!6558 = !DILocation(line: 2636, column: 27, scope: !6554)
!6559 = !DILocation(line: 2636, column: 15, scope: !6554)
!6560 = !DILocation(line: 2636, column: 18, scope: !6554)
!6561 = !DILocation(line: 2636, column: 25, scope: !6554)
!6562 = !DILocation(line: 2638, column: 9, scope: !6323)
!6563 = !DILocation(line: 2639, column: 16, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !6308, file: !63, line: 2639, column: 16)
!6565 = !DILocation(line: 2639, column: 16, scope: !6308)
!6566 = !DILocation(line: 2663, column: 15, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6568, file: !63, line: 2663, column: 15)
!6568 = distinct !DILexicalBlock(scope: !6564, file: !63, line: 2640, column: 9)
!6569 = !DILocation(line: 2663, column: 15, scope: !6568)
!6570 = !DILocation(line: 2664, column: 13, scope: !6567)
!6571 = !DILocation(line: 2664, column: 13, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6567, file: !63, line: 2664, column: 13)
!6573 = !DILocation(line: 2664, column: 13, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6572, file: !63, line: 2664, column: 13)
!6575 = !DILocation(line: 0, scope: !6574)
!6576 = distinct !{!6576, !6573, !6573}
!6577 = distinct !{!6577, !6573, !6573}
!6578 = !DILocation(line: 2664, column: 13, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6574, file: !63, line: 2664, column: 13)
!6580 = !DILocation(line: 2664, column: 13, scope: !6581)
!6581 = distinct !DILexicalBlock(scope: !6574, file: !63, line: 2664, column: 13)
!6582 = distinct !{!6582, !6571, !6571}
!6583 = !DILocation(line: 2667, column: 13, scope: !6567)
!6584 = !DILocation(line: 2667, column: 13, scope: !6585)
!6585 = distinct !DILexicalBlock(scope: !6567, file: !63, line: 2667, column: 13)
!6586 = !DILocation(line: 2667, column: 13, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6585, file: !63, line: 2667, column: 13)
!6588 = !DILocation(line: 0, scope: !6587)
!6589 = distinct !{!6589, !6586, !6586}
!6590 = distinct !{!6590, !6586, !6586}
!6591 = !DILocation(line: 2667, column: 13, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6587, file: !63, line: 2667, column: 13)
!6593 = !DILocation(line: 2667, column: 13, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6587, file: !63, line: 2667, column: 13)
!6595 = distinct !{!6595, !6584, !6584}
!6596 = !DILocation(line: 2668, column: 9, scope: !6568)
!6597 = !DILocation(line: 2669, column: 16, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6564, file: !63, line: 2669, column: 16)
!6599 = !DILocation(line: 2669, column: 21, scope: !6598)
!6600 = !DILocation(line: 2669, column: 16, scope: !6564)
!6601 = !DILocation(line: 2670, column: 18, scope: !6598)
!6602 = !DILocation(line: 2670, column: 16, scope: !6598)
!6603 = !DILocation(line: 2670, column: 14, scope: !6598)
!6604 = !DILocation(line: 2670, column: 9, scope: !6598)
!6605 = !DILocation(line: 2671, column: 16, scope: !6606)
!6606 = distinct !DILexicalBlock(scope: !6598, file: !63, line: 2671, column: 16)
!6607 = !DILocation(line: 2671, column: 21, scope: !6606)
!6608 = !DILocation(line: 2671, column: 16, scope: !6598)
!6609 = !DILocation(line: 2672, column: 9, scope: !6606)
!6610 = !DILocation(line: 2675, column: 15, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6612, file: !63, line: 2675, column: 15)
!6612 = distinct !DILexicalBlock(scope: !6606, file: !63, line: 2674, column: 9)
!6613 = !DILocation(line: 2675, column: 15, scope: !6612)
!6614 = !DILocation(line: 2677, column: 15, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6611, file: !63, line: 2676, column: 13)
!6616 = !DILocation(line: 2677, column: 22, scope: !6615)
!6617 = !DILocation(line: 2677, column: 30, scope: !6615)
!6618 = !DILocation(line: 2677, column: 28, scope: !6615)
!6619 = !DILocation(line: 2677, column: 35, scope: !6615)
!6620 = !DILocation(line: 2677, column: 38, scope: !6615)
!6621 = !DILocation(line: 2677, column: 46, scope: !6615)
!6622 = !DILocation(line: 2677, column: 44, scope: !6615)
!6623 = !DILocation(line: 0, scope: !6615)
!6624 = !DILocation(line: 2679, column: 37, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6615, file: !63, line: 2678, column: 17)
!6626 = !DILocation(line: 2679, column: 63, scope: !6625)
!6627 = !DILocation(line: 2679, column: 57, scope: !6625)
!6628 = !DILocation(line: 2679, column: 47, scope: !6625)
!6629 = !DILocation(line: 2679, column: 27, scope: !6625)
!6630 = !DILocation(line: 2680, column: 39, scope: !6625)
!6631 = !DILocation(line: 2680, column: 65, scope: !6625)
!6632 = !DILocation(line: 2680, column: 59, scope: !6625)
!6633 = !DILocation(line: 2680, column: 49, scope: !6625)
!6634 = !DILocation(line: 2680, column: 29, scope: !6625)
!6635 = !DILocation(line: 2680, column: 27, scope: !6625)
!6636 = !DILocation(line: 2679, column: 24, scope: !6625)
!6637 = !DILocation(line: 2681, column: 23, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6625, file: !63, line: 2681, column: 23)
!6639 = !DILocation(line: 2681, column: 23, scope: !6625)
!6640 = !DILocation(line: 2682, column: 21, scope: !6638)
!6641 = distinct !{!6641, !6614, !6642}
!6642 = !DILocation(line: 2683, column: 17, scope: !6615)
!6643 = !DILocation(line: 2684, column: 13, scope: !6615)
!6644 = !DILocation(line: 2687, column: 30, scope: !6645)
!6645 = distinct !DILexicalBlock(scope: !6611, file: !63, line: 2686, column: 13)
!6646 = !DILocation(line: 2687, column: 37, scope: !6645)
!6647 = !DILocation(line: 2687, column: 44, scope: !6645)
!6648 = !DILocation(line: 2687, column: 22, scope: !6645)
!6649 = !DILocation(line: 2687, column: 20, scope: !6645)
!6650 = !DILocation(line: 2688, column: 19, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6645, file: !63, line: 2688, column: 19)
!6652 = !DILocation(line: 2688, column: 19, scope: !6645)
!6653 = !DILocation(line: 2689, column: 17, scope: !6651)
!6654 = !DILocation(line: 2691, column: 18, scope: !6612)
!6655 = !DILocation(line: 2691, column: 25, scope: !6612)
!6656 = !DILocation(line: 2691, column: 23, scope: !6612)
!6657 = !DILocation(line: 2691, column: 37, scope: !6612)
!6658 = !DILocation(line: 2691, column: 45, scope: !6612)
!6659 = !DILocation(line: 2691, column: 42, scope: !6612)
!6660 = !DILocation(line: 2691, column: 16, scope: !6612)
!6661 = !DILocation(line: 2694, column: 11, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6285, file: !63, line: 2694, column: 11)
!6663 = !DILocation(line: 2694, column: 11, scope: !6285)
!6664 = !DILocation(line: 2695, column: 9, scope: !6662)
!6665 = !DILocation(line: 2697, column: 13, scope: !6285)
!6666 = !DILocation(line: 2697, column: 18, scope: !6285)
!6667 = !DILocation(line: 2697, column: 11, scope: !6285)
!6668 = !DILocation(line: 2698, column: 13, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6285, file: !63, line: 2698, column: 11)
!6670 = !DILocation(line: 2698, column: 11, scope: !6285)
!6671 = !DILocation(line: 2699, column: 9, scope: !6669)
!6672 = !DILocation(line: 2702, column: 11, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6285, file: !63, line: 2702, column: 11)
!6674 = !DILocation(line: 2702, column: 16, scope: !6673)
!6675 = !DILocation(line: 2702, column: 22, scope: !6673)
!6676 = !DILocation(line: 2702, column: 11, scope: !6285)
!6677 = !DILocation(line: 2703, column: 26, scope: !6673)
!6678 = !DILocation(line: 2703, column: 29, scope: !6673)
!6679 = !DILocation(line: 2703, column: 16, scope: !6673)
!6680 = !DILocation(line: 2703, column: 14, scope: !6673)
!6681 = !DILocation(line: 2703, column: 52, scope: !6673)
!6682 = !DILocation(line: 2703, column: 55, scope: !6673)
!6683 = !DILocation(line: 2703, column: 42, scope: !6673)
!6684 = !DILocation(line: 2703, column: 40, scope: !6673)
!6685 = !DILocation(line: 2703, column: 9, scope: !6673)
!6686 = !DILocation(line: 2705, column: 16, scope: !6673)
!6687 = !DILocation(line: 2705, column: 19, scope: !6673)
!6688 = !DILocation(line: 2705, column: 26, scope: !6673)
!6689 = !DILocation(line: 2705, column: 29, scope: !6673)
!6690 = !DILocation(line: 2705, column: 24, scope: !6673)
!6691 = !DILocation(line: 2705, column: 36, scope: !6673)
!6692 = !DILocation(line: 2705, column: 14, scope: !6673)
!6693 = !DILocation(line: 2705, column: 48, scope: !6673)
!6694 = !DILocation(line: 2705, column: 51, scope: !6673)
!6695 = !DILocation(line: 2705, column: 58, scope: !6673)
!6696 = !DILocation(line: 2705, column: 61, scope: !6673)
!6697 = !DILocation(line: 2705, column: 56, scope: !6673)
!6698 = !DILocation(line: 2705, column: 68, scope: !6673)
!6699 = !DILocation(line: 2705, column: 46, scope: !6673)
!6700 = !DILocation(line: 2707, column: 11, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6285, file: !63, line: 2707, column: 11)
!6702 = !DILocation(line: 2707, column: 16, scope: !6701)
!6703 = !DILocation(line: 2707, column: 22, scope: !6701)
!6704 = !DILocation(line: 2707, column: 11, scope: !6285)
!6705 = !DILocation(line: 2708, column: 27, scope: !6701)
!6706 = !DILocation(line: 2708, column: 30, scope: !6701)
!6707 = !DILocation(line: 2708, column: 17, scope: !6701)
!6708 = !DILocation(line: 2708, column: 15, scope: !6701)
!6709 = !DILocation(line: 2708, column: 54, scope: !6701)
!6710 = !DILocation(line: 2708, column: 57, scope: !6701)
!6711 = !DILocation(line: 2708, column: 44, scope: !6701)
!6712 = !DILocation(line: 2708, column: 42, scope: !6701)
!6713 = !DILocation(line: 2708, column: 9, scope: !6701)
!6714 = !DILocation(line: 2711, column: 19, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6701, file: !63, line: 2710, column: 9)
!6716 = !DILocation(line: 2711, column: 22, scope: !6715)
!6717 = !DILocation(line: 2711, column: 17, scope: !6715)
!6718 = !DILocation(line: 2711, column: 36, scope: !6715)
!6719 = !DILocation(line: 2711, column: 39, scope: !6715)
!6720 = !DILocation(line: 2711, column: 34, scope: !6715)
!6721 = !DILocation(line: 2712, column: 15, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6715, file: !63, line: 2712, column: 15)
!6723 = !DILocation(line: 2712, column: 20, scope: !6722)
!6724 = !DILocation(line: 2712, column: 15, scope: !6715)
!6725 = !DILocation(line: 2714, column: 15, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6722, file: !63, line: 2713, column: 13)
!6727 = !DILocation(line: 2714, column: 22, scope: !6726)
!6728 = !DILocation(line: 2714, column: 30, scope: !6726)
!6729 = !DILocation(line: 2714, column: 28, scope: !6726)
!6730 = !DILocation(line: 2714, column: 35, scope: !6726)
!6731 = !DILocation(line: 2714, column: 56, scope: !6726)
!6732 = !DILocation(line: 2714, column: 55, scope: !6726)
!6733 = !DILocation(line: 2714, column: 45, scope: !6726)
!6734 = !DILocation(line: 2714, column: 38, scope: !6726)
!6735 = !DILocation(line: 0, scope: !6726)
!6736 = !DILocation(line: 2715, column: 17, scope: !6726)
!6737 = distinct !{!6737, !6725, !6738}
!6738 = !DILocation(line: 2715, column: 19, scope: !6726)
!6739 = !DILocation(line: 2716, column: 15, scope: !6726)
!6740 = !DILocation(line: 2716, column: 22, scope: !6726)
!6741 = !DILocation(line: 2716, column: 30, scope: !6726)
!6742 = !DILocation(line: 2716, column: 28, scope: !6726)
!6743 = !DILocation(line: 2716, column: 35, scope: !6726)
!6744 = !DILocation(line: 2716, column: 56, scope: !6726)
!6745 = !DILocation(line: 2716, column: 55, scope: !6726)
!6746 = !DILocation(line: 2716, column: 45, scope: !6726)
!6747 = !DILocation(line: 2716, column: 38, scope: !6726)
!6748 = !DILocation(line: 2717, column: 17, scope: !6726)
!6749 = distinct !{!6749, !6739, !6750}
!6750 = !DILocation(line: 2717, column: 19, scope: !6726)
!6751 = !DILocation(line: 2718, column: 13, scope: !6726)
!6752 = distinct !{!6752, !6283, !6753}
!6753 = !DILocation(line: 2720, column: 5, scope: !6257)
!6754 = !DILocation(line: 2722, column: 3, scope: !6257)
!6755 = !DILabel(scope: !6257, name: "greater", file: !63, line: 2724)
!6756 = !DILocation(line: 2724, column: 2, scope: !6257)
!6757 = !DILocation(line: 2725, column: 8, scope: !6257)
!6758 = !DILocation(line: 2725, column: 3, scope: !6257)
!6759 = !DILabel(scope: !6257, name: "not_equal", file: !63, line: 2726)
!6760 = !DILocation(line: 2726, column: 2, scope: !6257)
!6761 = !DILocation(line: 2727, column: 10, scope: !6257)
!6762 = !DILocation(line: 2727, column: 15, scope: !6257)
!6763 = !DILocation(line: 2727, column: 26, scope: !6257)
!6764 = !DILocation(line: 2727, column: 25, scope: !6257)
!6765 = !DILocation(line: 2727, column: 33, scope: !6257)
!6766 = !DILocation(line: 2727, column: 3, scope: !6257)
!6767 = !DILocation(line: 2728, column: 1, scope: !6257)
!6768 = distinct !DISubprogram(name: "numcompare", scope: !63, file: !63, line: 1989, type: !6769, scopeLine: 1990, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6769 = !DISubroutineType(types: !6770)
!6770 = !{!5, !90, !90}
!6771 = !DILocalVariable(name: "a", arg: 1, scope: !6768, file: !63, line: 1989, type: !90)
!6772 = !DILocation(line: 1989, column: 25, scope: !6768)
!6773 = !DILocalVariable(name: "b", arg: 2, scope: !6768, file: !63, line: 1989, type: !90)
!6774 = !DILocation(line: 1989, column: 40, scope: !6768)
!6775 = !DILocation(line: 1991, column: 3, scope: !6768)
!6776 = !DILocation(line: 1991, column: 28, scope: !6768)
!6777 = !DILocation(line: 1991, column: 27, scope: !6768)
!6778 = !DILocation(line: 1991, column: 17, scope: !6768)
!6779 = !DILocation(line: 1991, column: 10, scope: !6768)
!6780 = !DILocation(line: 1992, column: 6, scope: !6768)
!6781 = distinct !{!6781, !6775, !6780}
!6782 = !DILocation(line: 1993, column: 3, scope: !6768)
!6783 = !DILocation(line: 1993, column: 28, scope: !6768)
!6784 = !DILocation(line: 1993, column: 27, scope: !6768)
!6785 = !DILocation(line: 1993, column: 17, scope: !6768)
!6786 = !DILocation(line: 1993, column: 10, scope: !6768)
!6787 = !DILocation(line: 1994, column: 6, scope: !6768)
!6788 = distinct !{!6788, !6782, !6787}
!6789 = !DILocation(line: 1996, column: 21, scope: !6768)
!6790 = !DILocation(line: 1996, column: 24, scope: !6768)
!6791 = !DILocation(line: 1996, column: 27, scope: !6768)
!6792 = !DILocation(line: 1996, column: 42, scope: !6768)
!6793 = !DILocation(line: 1996, column: 10, scope: !6768)
!6794 = !DILocation(line: 1996, column: 3, scope: !6768)
!6795 = distinct !DISubprogram(name: "general_numcompare", scope: !63, file: !63, line: 2018, type: !6769, scopeLine: 2019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6796 = !DILocalVariable(name: "sa", arg: 1, scope: !6795, file: !63, line: 2018, type: !90)
!6797 = !DILocation(line: 2018, column: 33, scope: !6795)
!6798 = !DILocalVariable(name: "sb", arg: 2, scope: !6795, file: !63, line: 2018, type: !90)
!6799 = !DILocation(line: 2018, column: 49, scope: !6795)
!6800 = !DILocalVariable(name: "ea", scope: !6795, file: !63, line: 2023, type: !7)
!6801 = !DILocation(line: 2023, column: 9, scope: !6795)
!6802 = !DILocalVariable(name: "eb", scope: !6795, file: !63, line: 2024, type: !7)
!6803 = !DILocation(line: 2024, column: 9, scope: !6795)
!6804 = !DILocalVariable(name: "a", scope: !6795, file: !63, line: 2025, type: !557)
!6805 = !DILocation(line: 2025, column: 15, scope: !6795)
!6806 = !DILocation(line: 2025, column: 28, scope: !6795)
!6807 = !DILocation(line: 2025, column: 19, scope: !6795)
!6808 = !DILocalVariable(name: "b", scope: !6795, file: !63, line: 2026, type: !557)
!6809 = !DILocation(line: 2026, column: 15, scope: !6795)
!6810 = !DILocation(line: 2026, column: 28, scope: !6795)
!6811 = !DILocation(line: 2026, column: 19, scope: !6795)
!6812 = !DILocation(line: 2029, column: 7, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6795, file: !63, line: 2029, column: 7)
!6814 = !DILocation(line: 2029, column: 13, scope: !6813)
!6815 = !DILocation(line: 2029, column: 10, scope: !6813)
!6816 = !DILocation(line: 2029, column: 7, scope: !6795)
!6817 = !DILocation(line: 2030, column: 12, scope: !6813)
!6818 = !DILocation(line: 2030, column: 18, scope: !6813)
!6819 = !DILocation(line: 2030, column: 15, scope: !6813)
!6820 = !DILocation(line: 2030, column: 5, scope: !6813)
!6821 = !DILocation(line: 2031, column: 7, scope: !6822)
!6822 = distinct !DILexicalBlock(scope: !6795, file: !63, line: 2031, column: 7)
!6823 = !DILocation(line: 2031, column: 13, scope: !6822)
!6824 = !DILocation(line: 2031, column: 10, scope: !6822)
!6825 = !DILocation(line: 2031, column: 7, scope: !6795)
!6826 = !DILocation(line: 2032, column: 5, scope: !6822)
!6827 = !DILocation(line: 2037, column: 11, scope: !6795)
!6828 = !DILocation(line: 2037, column: 15, scope: !6795)
!6829 = !DILocation(line: 2037, column: 13, scope: !6795)
!6830 = !DILocation(line: 2038, column: 13, scope: !6795)
!6831 = !DILocation(line: 2038, column: 17, scope: !6795)
!6832 = !DILocation(line: 2038, column: 15, scope: !6795)
!6833 = !DILocation(line: 2039, column: 13, scope: !6795)
!6834 = !DILocation(line: 2039, column: 18, scope: !6795)
!6835 = !DILocation(line: 2039, column: 15, scope: !6795)
!6836 = !DILocation(line: 2040, column: 13, scope: !6795)
!6837 = !DILocation(line: 2040, column: 18, scope: !6795)
!6838 = !DILocation(line: 2040, column: 15, scope: !6795)
!6839 = !DILocation(line: 2041, column: 13, scope: !6795)
!6840 = !DILocation(line: 2041, column: 18, scope: !6795)
!6841 = !DILocation(line: 2041, column: 15, scope: !6795)
!6842 = !DILocation(line: 2042, column: 26, scope: !6795)
!6843 = !DILocation(line: 2042, column: 30, scope: !6795)
!6844 = !DILocation(line: 2042, column: 13, scope: !6795)
!6845 = !DILocation(line: 2037, column: 3, scope: !6795)
!6846 = !DILocation(line: 2043, column: 1, scope: !6795)
!6847 = distinct !DISubprogram(name: "human_numcompare", scope: !63, file: !63, line: 1973, type: !6769, scopeLine: 1974, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6848 = !DILocalVariable(name: "a", arg: 1, scope: !6847, file: !63, line: 1973, type: !90)
!6849 = !DILocation(line: 1973, column: 31, scope: !6847)
!6850 = !DILocalVariable(name: "b", arg: 2, scope: !6847, file: !63, line: 1973, type: !90)
!6851 = !DILocation(line: 1973, column: 46, scope: !6847)
!6852 = !DILocation(line: 1975, column: 3, scope: !6847)
!6853 = !DILocation(line: 1975, column: 28, scope: !6847)
!6854 = !DILocation(line: 1975, column: 27, scope: !6847)
!6855 = !DILocation(line: 1975, column: 17, scope: !6847)
!6856 = !DILocation(line: 1975, column: 10, scope: !6847)
!6857 = !DILocation(line: 1976, column: 6, scope: !6847)
!6858 = distinct !{!6858, !6852, !6857}
!6859 = !DILocation(line: 1977, column: 3, scope: !6847)
!6860 = !DILocation(line: 1977, column: 28, scope: !6847)
!6861 = !DILocation(line: 1977, column: 27, scope: !6847)
!6862 = !DILocation(line: 1977, column: 17, scope: !6847)
!6863 = !DILocation(line: 1977, column: 10, scope: !6847)
!6864 = !DILocation(line: 1978, column: 6, scope: !6847)
!6865 = distinct !{!6865, !6859, !6864}
!6866 = !DILocalVariable(name: "diff", scope: !6847, file: !63, line: 1980, type: !5)
!6867 = !DILocation(line: 1980, column: 7, scope: !6847)
!6868 = !DILocation(line: 1980, column: 31, scope: !6847)
!6869 = !DILocation(line: 1980, column: 14, scope: !6847)
!6870 = !DILocation(line: 1980, column: 53, scope: !6847)
!6871 = !DILocation(line: 1980, column: 36, scope: !6847)
!6872 = !DILocation(line: 1980, column: 34, scope: !6847)
!6873 = !DILocation(line: 1981, column: 11, scope: !6847)
!6874 = !DILocation(line: 1981, column: 18, scope: !6847)
!6875 = !DILocation(line: 1981, column: 36, scope: !6847)
!6876 = !DILocation(line: 1981, column: 39, scope: !6847)
!6877 = !DILocation(line: 1981, column: 42, scope: !6847)
!6878 = !DILocation(line: 1981, column: 57, scope: !6847)
!6879 = !DILocation(line: 1981, column: 25, scope: !6847)
!6880 = !DILocation(line: 1981, column: 3, scope: !6847)
!6881 = distinct !DISubprogram(name: "compare_random", scope: !63, file: !63, line: 2132, type: !6882, scopeLine: 2134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!6882 = !DISubroutineType(types: !6883)
!6883 = !{!5, !6884, !52, !6884, !52}
!6884 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !7)
!6885 = !DILocalVariable(name: "texta", arg: 1, scope: !6881, file: !63, line: 2132, type: !6884)
!6886 = !DILocation(line: 2132, column: 32, scope: !6881)
!6887 = !DILocalVariable(name: "lena", arg: 2, scope: !6881, file: !63, line: 2132, type: !52)
!6888 = !DILocation(line: 2132, column: 46, scope: !6881)
!6889 = !DILocalVariable(name: "textb", arg: 3, scope: !6881, file: !63, line: 2133, type: !6884)
!6890 = !DILocation(line: 2133, column: 32, scope: !6881)
!6891 = !DILocalVariable(name: "lenb", arg: 4, scope: !6881, file: !63, line: 2133, type: !52)
!6892 = !DILocation(line: 2133, column: 46, scope: !6881)
!6893 = !DILocalVariable(name: "xfrm_diff", scope: !6881, file: !63, line: 2139, type: !5)
!6894 = !DILocation(line: 2139, column: 7, scope: !6881)
!6895 = !DILocalVariable(name: "stackbuf", scope: !6881, file: !63, line: 2141, type: !554)
!6896 = !DILocation(line: 2141, column: 8, scope: !6881)
!6897 = !DILocalVariable(name: "buf", scope: !6881, file: !63, line: 2142, type: !7)
!6898 = !DILocation(line: 2142, column: 9, scope: !6881)
!6899 = !DILocation(line: 2142, column: 15, scope: !6881)
!6900 = !DILocalVariable(name: "bufsize", scope: !6881, file: !63, line: 2143, type: !52)
!6901 = !DILocation(line: 2143, column: 10, scope: !6881)
!6902 = !DILocalVariable(name: "allocated", scope: !6881, file: !63, line: 2144, type: !47)
!6903 = !DILocation(line: 2144, column: 9, scope: !6881)
!6904 = !DILocalVariable(name: "dig", scope: !6881, file: !63, line: 2145, type: !559)
!6905 = !DILocation(line: 2145, column: 12, scope: !6881)
!6906 = !DILocalVariable(name: "s", scope: !6881, file: !63, line: 2146, type: !562)
!6907 = !DILocation(line: 2146, column: 18, scope: !6881)
!6908 = !DILocation(line: 2147, column: 3, scope: !6881)
!6909 = !DILocation(line: 2147, column: 10, scope: !6881)
!6910 = !DILocation(line: 2147, column: 17, scope: !6881)
!6911 = !DILocation(line: 2147, column: 15, scope: !6881)
!6912 = !DILocation(line: 2149, column: 7, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6881, file: !63, line: 2149, column: 7)
!6914 = !DILocation(line: 2149, column: 7, scope: !6881)
!6915 = !DILocalVariable(name: "lima", scope: !6916, file: !63, line: 2151, type: !90)
!6916 = distinct !DILexicalBlock(scope: !6913, file: !63, line: 2150, column: 5)
!6917 = !DILocation(line: 2151, column: 19, scope: !6916)
!6918 = !DILocation(line: 2151, column: 26, scope: !6916)
!6919 = !DILocation(line: 2151, column: 34, scope: !6916)
!6920 = !DILocation(line: 2151, column: 32, scope: !6916)
!6921 = !DILocalVariable(name: "limb", scope: !6916, file: !63, line: 2152, type: !90)
!6922 = !DILocation(line: 2152, column: 19, scope: !6916)
!6923 = !DILocation(line: 2152, column: 26, scope: !6916)
!6924 = !DILocation(line: 2152, column: 34, scope: !6916)
!6925 = !DILocation(line: 2152, column: 32, scope: !6916)
!6926 = !DILocation(line: 2154, column: 7, scope: !6916)
!6927 = !DILocalVariable(name: "guess_bufsize", scope: !6928, file: !63, line: 2171, type: !52)
!6928 = distinct !DILexicalBlock(scope: !6916, file: !63, line: 2155, column: 9)
!6929 = !DILocation(line: 2171, column: 18, scope: !6928)
!6930 = !DILocation(line: 2171, column: 39, scope: !6928)
!6931 = !DILocation(line: 2171, column: 46, scope: !6928)
!6932 = !DILocation(line: 2171, column: 44, scope: !6928)
!6933 = !DILocation(line: 2171, column: 36, scope: !6928)
!6934 = !DILocation(line: 2171, column: 52, scope: !6928)
!6935 = !DILocation(line: 2172, column: 15, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2172, column: 15)
!6937 = !DILocation(line: 2172, column: 25, scope: !6936)
!6938 = !DILocation(line: 2172, column: 23, scope: !6936)
!6939 = !DILocation(line: 2172, column: 15, scope: !6928)
!6940 = !DILocation(line: 2174, column: 25, scope: !6941)
!6941 = distinct !DILexicalBlock(scope: !6936, file: !63, line: 2173, column: 13)
!6942 = !DILocation(line: 2174, column: 23, scope: !6941)
!6943 = !DILocation(line: 2175, column: 21, scope: !6941)
!6944 = !DILocation(line: 2175, column: 15, scope: !6941)
!6945 = !DILocation(line: 2176, column: 41, scope: !6941)
!6946 = !DILocation(line: 2176, column: 33, scope: !6941)
!6947 = !DILocation(line: 2176, column: 31, scope: !6941)
!6948 = !DILocation(line: 2176, column: 19, scope: !6941)
!6949 = !DILocation(line: 2177, column: 21, scope: !6950)
!6950 = distinct !DILexicalBlock(scope: !6941, file: !63, line: 2177, column: 19)
!6951 = !DILocation(line: 2177, column: 19, scope: !6941)
!6952 = !DILocation(line: 2179, column: 25, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6950, file: !63, line: 2178, column: 17)
!6954 = !DILocation(line: 2179, column: 23, scope: !6953)
!6955 = !DILocation(line: 2180, column: 27, scope: !6953)
!6956 = !DILocation(line: 2181, column: 17, scope: !6953)
!6957 = !DILocation(line: 2182, column: 13, scope: !6941)
!6958 = !DILocalVariable(name: "sizea", scope: !6928, file: !63, line: 2184, type: !52)
!6959 = !DILocation(line: 2184, column: 18, scope: !6928)
!6960 = !DILocation(line: 2185, column: 14, scope: !6928)
!6961 = !DILocation(line: 2185, column: 22, scope: !6928)
!6962 = !DILocation(line: 2185, column: 20, scope: !6928)
!6963 = !DILocation(line: 2185, column: 39, scope: !6928)
!6964 = !DILocation(line: 2185, column: 44, scope: !6928)
!6965 = !DILocation(line: 2185, column: 51, scope: !6928)
!6966 = !DILocation(line: 2185, column: 29, scope: !6928)
!6967 = !DILocation(line: 2185, column: 60, scope: !6928)
!6968 = !DILocalVariable(name: "a_fits", scope: !6928, file: !63, line: 2186, type: !162)
!6969 = !DILocation(line: 2186, column: 16, scope: !6928)
!6970 = !DILocation(line: 2186, column: 25, scope: !6928)
!6971 = !DILocation(line: 2186, column: 34, scope: !6928)
!6972 = !DILocation(line: 2186, column: 31, scope: !6928)
!6973 = !DILocalVariable(name: "sizeb", scope: !6928, file: !63, line: 2187, type: !52)
!6974 = !DILocation(line: 2187, column: 18, scope: !6928)
!6975 = !DILocation(line: 2188, column: 14, scope: !6928)
!6976 = !DILocation(line: 2188, column: 22, scope: !6928)
!6977 = !DILocation(line: 2188, column: 20, scope: !6928)
!6978 = !DILocation(line: 2189, column: 28, scope: !6928)
!6979 = !DILocation(line: 2189, column: 37, scope: !6928)
!6980 = !DILocation(line: 2189, column: 43, scope: !6928)
!6981 = !DILocation(line: 2189, column: 41, scope: !6928)
!6982 = !DILocation(line: 2189, column: 58, scope: !6928)
!6983 = !DILocation(line: 2190, column: 28, scope: !6928)
!6984 = !DILocation(line: 2190, column: 37, scope: !6928)
!6985 = !DILocation(line: 2190, column: 47, scope: !6928)
!6986 = !DILocation(line: 2190, column: 45, scope: !6928)
!6987 = !DILocation(line: 2189, column: 17, scope: !6928)
!6988 = !DILocation(line: 2191, column: 17, scope: !6928)
!6989 = !DILocation(line: 2194, column: 18, scope: !6990)
!6990 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2194, column: 15)
!6991 = !DILocation(line: 2194, column: 25, scope: !6990)
!6992 = !DILocation(line: 2194, column: 28, scope: !6990)
!6993 = !DILocation(line: 2194, column: 36, scope: !6990)
!6994 = !DILocation(line: 2194, column: 34, scope: !6990)
!6995 = !DILocation(line: 2194, column: 45, scope: !6990)
!6996 = !DILocation(line: 2194, column: 42, scope: !6990)
!6997 = !DILocation(line: 2194, column: 15, scope: !6928)
!6998 = !DILocation(line: 2196, column: 25, scope: !6999)
!6999 = distinct !DILexicalBlock(scope: !6990, file: !63, line: 2195, column: 13)
!7000 = !DILocation(line: 2196, column: 33, scope: !6999)
!7001 = !DILocation(line: 2196, column: 31, scope: !6999)
!7002 = !DILocation(line: 2196, column: 23, scope: !6999)
!7003 = !DILocation(line: 2197, column: 19, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !6999, file: !63, line: 2197, column: 19)
!7005 = !DILocation(line: 2197, column: 27, scope: !7004)
!7006 = !DILocation(line: 2197, column: 19, scope: !6999)
!7007 = !DILocation(line: 2198, column: 27, scope: !7004)
!7008 = !DILocation(line: 2198, column: 35, scope: !7004)
!7009 = !DILocation(line: 2198, column: 39, scope: !7004)
!7010 = !DILocation(line: 2198, column: 25, scope: !7004)
!7011 = !DILocation(line: 2198, column: 17, scope: !7004)
!7012 = !DILocation(line: 2199, column: 21, scope: !6999)
!7013 = !DILocation(line: 2199, column: 15, scope: !6999)
!7014 = !DILocation(line: 2200, column: 42, scope: !6999)
!7015 = !DILocation(line: 2200, column: 33, scope: !6999)
!7016 = !DILocation(line: 2200, column: 31, scope: !6999)
!7017 = !DILocation(line: 2200, column: 19, scope: !6999)
!7018 = !DILocation(line: 2201, column: 19, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !6999, file: !63, line: 2201, column: 19)
!7020 = !DILocation(line: 2201, column: 27, scope: !7019)
!7021 = !DILocation(line: 2201, column: 25, scope: !7019)
!7022 = !DILocation(line: 2201, column: 19, scope: !6999)
!7023 = !DILocation(line: 2202, column: 26, scope: !7019)
!7024 = !DILocation(line: 2202, column: 31, scope: !7019)
!7025 = !DILocation(line: 2202, column: 38, scope: !7019)
!7026 = !DILocation(line: 2202, column: 17, scope: !7019)
!7027 = !DILocation(line: 2203, column: 19, scope: !7028)
!7028 = distinct !DILexicalBlock(scope: !6999, file: !63, line: 2203, column: 19)
!7029 = !DILocation(line: 2203, column: 27, scope: !7028)
!7030 = !DILocation(line: 2203, column: 25, scope: !7028)
!7031 = !DILocation(line: 2203, column: 19, scope: !6999)
!7032 = !DILocation(line: 2204, column: 26, scope: !7028)
!7033 = !DILocation(line: 2204, column: 32, scope: !7028)
!7034 = !DILocation(line: 2204, column: 30, scope: !7028)
!7035 = !DILocation(line: 2204, column: 39, scope: !7028)
!7036 = !DILocation(line: 2204, column: 46, scope: !7028)
!7037 = !DILocation(line: 2204, column: 17, scope: !7028)
!7038 = !DILocation(line: 2205, column: 13, scope: !6999)
!7039 = !DILocation(line: 2211, column: 15, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2211, column: 15)
!7041 = !DILocation(line: 2211, column: 23, scope: !7040)
!7042 = !DILocation(line: 2211, column: 21, scope: !7040)
!7043 = !DILocation(line: 2211, column: 15, scope: !6928)
!7044 = !DILocation(line: 2212, column: 30, scope: !7040)
!7045 = !DILocation(line: 2212, column: 22, scope: !7040)
!7046 = !DILocation(line: 2212, column: 37, scope: !7040)
!7047 = !DILocation(line: 2212, column: 19, scope: !7040)
!7048 = !DILocation(line: 2212, column: 13, scope: !7040)
!7049 = !DILocation(line: 2213, column: 15, scope: !7050)
!7050 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2213, column: 15)
!7051 = !DILocation(line: 2213, column: 23, scope: !7050)
!7052 = !DILocation(line: 2213, column: 21, scope: !7050)
!7053 = !DILocation(line: 2213, column: 15, scope: !6928)
!7054 = !DILocation(line: 2214, column: 30, scope: !7050)
!7055 = !DILocation(line: 2214, column: 22, scope: !7050)
!7056 = !DILocation(line: 2214, column: 37, scope: !7050)
!7057 = !DILocation(line: 2214, column: 19, scope: !7050)
!7058 = !DILocation(line: 2214, column: 13, scope: !7050)
!7059 = !DILocation(line: 2215, column: 18, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2215, column: 15)
!7061 = !DILocation(line: 2215, column: 26, scope: !7060)
!7062 = !DILocation(line: 2215, column: 24, scope: !7060)
!7063 = !DILocation(line: 2215, column: 31, scope: !7060)
!7064 = !DILocation(line: 2215, column: 34, scope: !7060)
!7065 = !DILocation(line: 2215, column: 42, scope: !7060)
!7066 = !DILocation(line: 2215, column: 40, scope: !7060)
!7067 = !DILocation(line: 2215, column: 15, scope: !6928)
!7068 = !DILocation(line: 2217, column: 22, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7060, file: !63, line: 2216, column: 13)
!7070 = !DILocation(line: 2217, column: 20, scope: !7069)
!7071 = !DILocation(line: 2217, column: 37, scope: !7069)
!7072 = !DILocation(line: 2217, column: 35, scope: !7069)
!7073 = !DILocation(line: 2218, column: 22, scope: !7069)
!7074 = !DILocation(line: 2218, column: 20, scope: !7069)
!7075 = !DILocation(line: 2218, column: 37, scope: !7069)
!7076 = !DILocation(line: 2218, column: 43, scope: !7069)
!7077 = !DILocation(line: 2218, column: 41, scope: !7069)
!7078 = !DILocation(line: 2218, column: 35, scope: !7069)
!7079 = !DILocation(line: 2219, column: 15, scope: !7069)
!7080 = !DILocation(line: 2224, column: 30, scope: !6928)
!7081 = !DILocation(line: 2224, column: 35, scope: !6928)
!7082 = !DILocation(line: 2224, column: 43, scope: !6928)
!7083 = !DILocation(line: 2224, column: 11, scope: !6928)
!7084 = !DILocation(line: 2225, column: 30, scope: !6928)
!7085 = !DILocation(line: 2225, column: 36, scope: !6928)
!7086 = !DILocation(line: 2225, column: 34, scope: !6928)
!7087 = !DILocation(line: 2225, column: 43, scope: !6928)
!7088 = !DILocation(line: 2225, column: 51, scope: !6928)
!7089 = !DILocation(line: 2225, column: 11, scope: !6928)
!7090 = !DILocation(line: 2228, column: 17, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !6928, file: !63, line: 2228, column: 15)
!7092 = !DILocation(line: 2228, column: 15, scope: !6928)
!7093 = !DILocation(line: 2230, column: 35, scope: !7094)
!7094 = distinct !DILexicalBlock(scope: !7091, file: !63, line: 2229, column: 13)
!7095 = !DILocation(line: 2230, column: 40, scope: !7094)
!7096 = !DILocation(line: 2230, column: 46, scope: !7094)
!7097 = !DILocation(line: 2230, column: 44, scope: !7094)
!7098 = !DILocation(line: 2230, column: 53, scope: !7094)
!7099 = !DILocation(line: 2230, column: 27, scope: !7094)
!7100 = !DILocation(line: 2230, column: 25, scope: !7094)
!7101 = !DILocation(line: 2231, column: 21, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7094, file: !63, line: 2231, column: 19)
!7103 = !DILocation(line: 2231, column: 19, scope: !7094)
!7104 = !DILocation(line: 2232, column: 30, scope: !7102)
!7105 = !DILocation(line: 2232, column: 38, scope: !7102)
!7106 = !DILocation(line: 2232, column: 36, scope: !7102)
!7107 = !DILocation(line: 2232, column: 48, scope: !7102)
!7108 = !DILocation(line: 2232, column: 56, scope: !7102)
!7109 = !DILocation(line: 2232, column: 54, scope: !7102)
!7110 = !DILocation(line: 2232, column: 45, scope: !7102)
!7111 = !DILocation(line: 2232, column: 27, scope: !7102)
!7112 = !DILocation(line: 2232, column: 17, scope: !7102)
!7113 = !DILocation(line: 2233, column: 13, scope: !7094)
!7114 = distinct !{!7114, !6926, !7115}
!7115 = !DILocation(line: 2234, column: 9, scope: !6916)
!7116 = !DILocation(line: 2235, column: 5, scope: !6916)
!7117 = !DILocation(line: 2238, column: 22, scope: !6881)
!7118 = !DILocation(line: 2238, column: 29, scope: !6881)
!7119 = !DILocation(line: 2238, column: 36, scope: !6881)
!7120 = !DILocation(line: 2238, column: 3, scope: !6881)
!7121 = !DILocation(line: 2238, column: 60, scope: !6881)
!7122 = !DILocation(line: 2238, column: 66, scope: !6881)
!7123 = !DILocation(line: 2238, column: 43, scope: !6881)
!7124 = !DILocation(line: 2239, column: 22, scope: !6881)
!7125 = !DILocation(line: 2239, column: 29, scope: !6881)
!7126 = !DILocation(line: 2239, column: 36, scope: !6881)
!7127 = !DILocation(line: 2239, column: 3, scope: !6881)
!7128 = !DILocation(line: 2239, column: 60, scope: !6881)
!7129 = !DILocation(line: 2239, column: 66, scope: !6881)
!7130 = !DILocation(line: 2239, column: 43, scope: !6881)
!7131 = !DILocalVariable(name: "diff", scope: !6881, file: !63, line: 2240, type: !5)
!7132 = !DILocation(line: 2240, column: 7, scope: !6881)
!7133 = !DILocation(line: 2240, column: 22, scope: !6881)
!7134 = !DILocation(line: 2240, column: 30, scope: !6881)
!7135 = !DILocation(line: 2240, column: 14, scope: !6881)
!7136 = !DILocation(line: 2243, column: 9, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !6881, file: !63, line: 2243, column: 7)
!7138 = !DILocation(line: 2243, column: 7, scope: !6881)
!7139 = !DILocation(line: 2245, column: 13, scope: !7140)
!7140 = distinct !DILexicalBlock(scope: !7141, file: !63, line: 2245, column: 11)
!7141 = distinct !DILexicalBlock(scope: !7137, file: !63, line: 2244, column: 5)
!7142 = !DILocation(line: 2245, column: 11, scope: !7141)
!7143 = !DILocation(line: 2247, column: 31, scope: !7144)
!7144 = distinct !DILexicalBlock(scope: !7140, file: !63, line: 2246, column: 9)
!7145 = !DILocation(line: 2247, column: 38, scope: !7144)
!7146 = !DILocation(line: 2247, column: 45, scope: !7144)
!7147 = !DILocation(line: 2247, column: 23, scope: !7144)
!7148 = !DILocation(line: 2247, column: 21, scope: !7144)
!7149 = !DILocation(line: 2248, column: 17, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7144, file: !63, line: 2248, column: 15)
!7151 = !DILocation(line: 2248, column: 15, scope: !7144)
!7152 = !DILocation(line: 2249, column: 26, scope: !7150)
!7153 = !DILocation(line: 2249, column: 33, scope: !7150)
!7154 = !DILocation(line: 2249, column: 31, scope: !7150)
!7155 = !DILocation(line: 2249, column: 42, scope: !7150)
!7156 = !DILocation(line: 2249, column: 49, scope: !7150)
!7157 = !DILocation(line: 2249, column: 47, scope: !7150)
!7158 = !DILocation(line: 2249, column: 39, scope: !7150)
!7159 = !DILocation(line: 2249, column: 23, scope: !7150)
!7160 = !DILocation(line: 2249, column: 13, scope: !7150)
!7161 = !DILocation(line: 2250, column: 9, scope: !7144)
!7162 = !DILocation(line: 2252, column: 14, scope: !7141)
!7163 = !DILocation(line: 2252, column: 12, scope: !7141)
!7164 = !DILocation(line: 2253, column: 5, scope: !7141)
!7165 = !DILocation(line: 2255, column: 9, scope: !6881)
!7166 = !DILocation(line: 2255, column: 3, scope: !6881)
!7167 = !DILocation(line: 2257, column: 10, scope: !6881)
!7168 = !DILocation(line: 2257, column: 3, scope: !6881)
!7169 = distinct !DISubprogram(name: "xstrxfrm", scope: !63, file: !63, line: 2110, type: !7170, scopeLine: 2111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7170 = !DISubroutineType(types: !7171)
!7171 = !{!52, !6884, !7172, !52}
!7172 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !90)
!7173 = !DILocalVariable(name: "dest", arg: 1, scope: !7169, file: !63, line: 2110, type: !6884)
!7174 = !DILocation(line: 2110, column: 26, scope: !7169)
!7175 = !DILocalVariable(name: "src", arg: 2, scope: !7169, file: !63, line: 2110, type: !7172)
!7176 = !DILocation(line: 2110, column: 53, scope: !7169)
!7177 = !DILocalVariable(name: "destsize", arg: 3, scope: !7169, file: !63, line: 2110, type: !52)
!7178 = !DILocation(line: 2110, column: 65, scope: !7169)
!7179 = !DILocation(line: 2112, column: 3, scope: !7169)
!7180 = !DILocation(line: 2112, column: 9, scope: !7169)
!7181 = !DILocalVariable(name: "translated_size", scope: !7169, file: !63, line: 2113, type: !52)
!7182 = !DILocation(line: 2113, column: 10, scope: !7169)
!7183 = !DILocation(line: 2113, column: 37, scope: !7169)
!7184 = !DILocation(line: 2113, column: 43, scope: !7169)
!7185 = !DILocation(line: 2113, column: 48, scope: !7169)
!7186 = !DILocation(line: 2113, column: 28, scope: !7169)
!7187 = !DILocation(line: 2115, column: 7, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7169, file: !63, line: 2115, column: 7)
!7189 = !DILocation(line: 2115, column: 7, scope: !7169)
!7190 = !DILocation(line: 2117, column: 17, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !7188, file: !63, line: 2116, column: 5)
!7192 = !DILocation(line: 2117, column: 24, scope: !7191)
!7193 = !DILocation(line: 2117, column: 7, scope: !7191)
!7194 = !DILocation(line: 2118, column: 20, scope: !7191)
!7195 = !DILocation(line: 2118, column: 7, scope: !7191)
!7196 = !DILocation(line: 2119, column: 7, scope: !7191)
!7197 = !DILocation(line: 2124, column: 10, scope: !7169)
!7198 = !DILocation(line: 2124, column: 3, scope: !7169)
!7199 = distinct !DISubprogram(name: "find_unit_order", scope: !63, file: !63, line: 1954, type: !7200, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7200 = !DISubroutineType(types: !7201)
!7201 = !{!5, !90}
!7202 = !DILocalVariable(name: "number", arg: 1, scope: !7199, file: !63, line: 1954, type: !90)
!7203 = !DILocation(line: 1954, column: 30, scope: !7199)
!7204 = !DILocalVariable(name: "minus_sign", scope: !7199, file: !63, line: 1956, type: !162)
!7205 = !DILocation(line: 1956, column: 8, scope: !7199)
!7206 = !DILocation(line: 1956, column: 23, scope: !7199)
!7207 = !DILocation(line: 1956, column: 22, scope: !7199)
!7208 = !DILocation(line: 1956, column: 30, scope: !7199)
!7209 = !DILocalVariable(name: "p", scope: !7199, file: !63, line: 1957, type: !90)
!7210 = !DILocation(line: 1957, column: 15, scope: !7199)
!7211 = !DILocation(line: 1957, column: 19, scope: !7199)
!7212 = !DILocation(line: 1957, column: 28, scope: !7199)
!7213 = !DILocation(line: 1957, column: 26, scope: !7199)
!7214 = !DILocalVariable(name: "max_digit", scope: !7199, file: !63, line: 1958, type: !535)
!7215 = !DILocation(line: 1958, column: 17, scope: !7199)
!7216 = !DILocation(line: 1958, column: 29, scope: !7199)
!7217 = !DILocation(line: 1959, column: 13, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7199, file: !63, line: 1959, column: 7)
!7219 = !DILocation(line: 1959, column: 11, scope: !7218)
!7220 = !DILocation(line: 1959, column: 7, scope: !7199)
!7221 = !DILocalVariable(name: "ch", scope: !7222, file: !63, line: 1961, type: !535)
!7222 = distinct !DILexicalBlock(scope: !7218, file: !63, line: 1960, column: 5)
!7223 = !DILocation(line: 1961, column: 21, scope: !7222)
!7224 = !DILocation(line: 1961, column: 27, scope: !7222)
!7225 = !DILocation(line: 1961, column: 26, scope: !7222)
!7226 = !DILocalVariable(name: "order", scope: !7222, file: !63, line: 1962, type: !5)
!7227 = !DILocation(line: 1962, column: 11, scope: !7222)
!7228 = !DILocation(line: 1962, column: 30, scope: !7222)
!7229 = !DILocation(line: 1962, column: 19, scope: !7222)
!7230 = !DILocation(line: 1963, column: 15, scope: !7222)
!7231 = !DILocation(line: 1963, column: 29, scope: !7222)
!7232 = !DILocation(line: 1963, column: 28, scope: !7222)
!7233 = !DILocation(line: 1963, column: 37, scope: !7222)
!7234 = !DILocation(line: 1963, column: 7, scope: !7222)
!7235 = !DILocation(line: 1966, column: 5, scope: !7218)
!7236 = !DILocation(line: 1967, column: 1, scope: !7199)
!7237 = distinct !DISubprogram(name: "nan_compare", scope: !63, file: !63, line: 2004, type: !6769, scopeLine: 2005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7238 = !DILocalVariable(name: "sa", arg: 1, scope: !7237, file: !63, line: 2004, type: !90)
!7239 = !DILocation(line: 2004, column: 26, scope: !7237)
!7240 = !DILocalVariable(name: "sb", arg: 2, scope: !7237, file: !63, line: 2004, type: !90)
!7241 = !DILocation(line: 2004, column: 42, scope: !7237)
!7242 = !DILocalVariable(name: "a", scope: !7237, file: !63, line: 2006, type: !557)
!7243 = !DILocation(line: 2006, column: 15, scope: !7237)
!7244 = !DILocation(line: 2007, column: 3, scope: !7237)
!7245 = !DILocation(line: 2008, column: 16, scope: !7237)
!7246 = !DILocation(line: 2008, column: 7, scope: !7237)
!7247 = !DILocation(line: 2008, column: 5, scope: !7237)
!7248 = !DILocalVariable(name: "b", scope: !7237, file: !63, line: 2010, type: !557)
!7249 = !DILocation(line: 2010, column: 15, scope: !7237)
!7250 = !DILocation(line: 2011, column: 3, scope: !7237)
!7251 = !DILocation(line: 2012, column: 16, scope: !7237)
!7252 = !DILocation(line: 2012, column: 7, scope: !7237)
!7253 = !DILocation(line: 2012, column: 5, scope: !7237)
!7254 = !DILocation(line: 2014, column: 18, scope: !7237)
!7255 = !DILocation(line: 2014, column: 22, scope: !7237)
!7256 = !DILocation(line: 2014, column: 10, scope: !7237)
!7257 = !DILocation(line: 2014, column: 3, scope: !7237)
!7258 = distinct !DISubprogram(name: "sortlines_thread", scope: !63, file: !63, line: 3609, type: !7259, scopeLine: 3610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7259 = !DISubroutineType(types: !7260)
!7260 = !{!47, !47}
!7261 = !DILocalVariable(name: "data", arg: 1, scope: !7258, file: !63, line: 3609, type: !47)
!7262 = !DILocation(line: 3609, column: 25, scope: !7258)
!7263 = !DILocalVariable(name: "args", scope: !7258, file: !63, line: 3611, type: !671)
!7264 = !DILocation(line: 3611, column: 29, scope: !7258)
!7265 = !DILocation(line: 3611, column: 36, scope: !7258)
!7266 = !DILocation(line: 3612, column: 14, scope: !7258)
!7267 = !DILocation(line: 3612, column: 20, scope: !7258)
!7268 = !DILocation(line: 3612, column: 27, scope: !7258)
!7269 = !DILocation(line: 3612, column: 33, scope: !7258)
!7270 = !DILocation(line: 3612, column: 43, scope: !7258)
!7271 = !DILocation(line: 3612, column: 49, scope: !7258)
!7272 = !DILocation(line: 3613, column: 14, scope: !7258)
!7273 = !DILocation(line: 3613, column: 20, scope: !7258)
!7274 = !DILocation(line: 3613, column: 26, scope: !7258)
!7275 = !DILocation(line: 3613, column: 32, scope: !7258)
!7276 = !DILocation(line: 3613, column: 39, scope: !7258)
!7277 = !DILocation(line: 3613, column: 45, scope: !7258)
!7278 = !DILocation(line: 3614, column: 14, scope: !7258)
!7279 = !DILocation(line: 3614, column: 20, scope: !7258)
!7280 = !DILocation(line: 3612, column: 3, scope: !7258)
!7281 = !DILocation(line: 3615, column: 3, scope: !7258)
!7282 = !{!7283}
!7283 = !{i64 2, i64 3, i1 false}
!7284 = distinct !DISubprogram(name: "sequential_sort", scope: !63, file: !63, line: 3195, type: !7285, scopeLine: 3197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7285 = !DISubroutineType(types: !7286)
!7286 = !{null, !5184, !52, !5184, !162}
!7287 = !DILocalVariable(name: "lines", arg: 1, scope: !7284, file: !63, line: 3195, type: !5184)
!7288 = !DILocation(line: 3195, column: 40, scope: !7284)
!7289 = !DILocalVariable(name: "nlines", arg: 2, scope: !7284, file: !63, line: 3195, type: !52)
!7290 = !DILocation(line: 3195, column: 54, scope: !7284)
!7291 = !DILocalVariable(name: "temp", arg: 3, scope: !7284, file: !63, line: 3196, type: !5184)
!7292 = !DILocation(line: 3196, column: 40, scope: !7284)
!7293 = !DILocalVariable(name: "to_temp", arg: 4, scope: !7284, file: !63, line: 3196, type: !162)
!7294 = !DILocation(line: 3196, column: 51, scope: !7284)
!7295 = !DILocation(line: 3198, column: 7, scope: !7296)
!7296 = distinct !DILexicalBlock(scope: !7284, file: !63, line: 3198, column: 7)
!7297 = !DILocation(line: 3198, column: 14, scope: !7296)
!7298 = !DILocation(line: 3198, column: 7, scope: !7284)
!7299 = !DILocalVariable(name: "swap", scope: !7300, file: !63, line: 3203, type: !5)
!7300 = distinct !DILexicalBlock(scope: !7296, file: !63, line: 3199, column: 5)
!7301 = !DILocation(line: 3203, column: 11, scope: !7300)
!7302 = !DILocation(line: 3203, column: 33, scope: !7300)
!7303 = !DILocation(line: 3203, column: 45, scope: !7300)
!7304 = !DILocation(line: 3203, column: 23, scope: !7300)
!7305 = !DILocation(line: 3203, column: 21, scope: !7300)
!7306 = !DILocation(line: 3204, column: 11, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !7300, file: !63, line: 3204, column: 11)
!7308 = !DILocation(line: 3204, column: 11, scope: !7300)
!7309 = !DILocation(line: 3206, column: 11, scope: !7310)
!7310 = distinct !DILexicalBlock(scope: !7307, file: !63, line: 3205, column: 9)
!7311 = !DILocation(line: 3206, column: 22, scope: !7310)
!7312 = !DILocation(line: 3206, column: 33, scope: !7310)
!7313 = !DILocation(line: 3206, column: 31, scope: !7310)
!7314 = !DILocation(line: 3207, column: 11, scope: !7310)
!7315 = !DILocation(line: 3207, column: 22, scope: !7310)
!7316 = !DILocation(line: 3207, column: 33, scope: !7310)
!7317 = !DILocation(line: 3207, column: 31, scope: !7310)
!7318 = !DILocation(line: 3208, column: 9, scope: !7310)
!7319 = !DILocation(line: 3209, column: 16, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7307, file: !63, line: 3209, column: 16)
!7321 = !DILocation(line: 3209, column: 16, scope: !7307)
!7322 = !DILocation(line: 3211, column: 11, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7320, file: !63, line: 3210, column: 9)
!7324 = !DILocation(line: 3211, column: 22, scope: !7323)
!7325 = !DILocation(line: 3212, column: 11, scope: !7323)
!7326 = !DILocation(line: 3212, column: 23, scope: !7323)
!7327 = !DILocation(line: 3213, column: 11, scope: !7323)
!7328 = !DILocation(line: 3213, column: 23, scope: !7323)
!7329 = !DILocation(line: 3214, column: 9, scope: !7323)
!7330 = !DILocation(line: 3215, column: 5, scope: !7300)
!7331 = !DILocalVariable(name: "nlo", scope: !7332, file: !63, line: 3218, type: !52)
!7332 = distinct !DILexicalBlock(scope: !7296, file: !63, line: 3217, column: 5)
!7333 = !DILocation(line: 3218, column: 14, scope: !7332)
!7334 = !DILocation(line: 3218, column: 20, scope: !7332)
!7335 = !DILocation(line: 3218, column: 27, scope: !7332)
!7336 = !DILocalVariable(name: "nhi", scope: !7332, file: !63, line: 3219, type: !52)
!7337 = !DILocation(line: 3219, column: 14, scope: !7332)
!7338 = !DILocation(line: 3219, column: 20, scope: !7332)
!7339 = !DILocation(line: 3219, column: 29, scope: !7332)
!7340 = !DILocation(line: 3219, column: 27, scope: !7332)
!7341 = !DILocalVariable(name: "lo", scope: !7332, file: !63, line: 3220, type: !553)
!7342 = !DILocation(line: 3220, column: 20, scope: !7332)
!7343 = !DILocation(line: 3220, column: 25, scope: !7332)
!7344 = !DILocalVariable(name: "hi", scope: !7332, file: !63, line: 3221, type: !553)
!7345 = !DILocation(line: 3221, column: 20, scope: !7332)
!7346 = !DILocation(line: 3221, column: 25, scope: !7332)
!7347 = !DILocation(line: 3221, column: 33, scope: !7332)
!7348 = !DILocation(line: 3221, column: 31, scope: !7332)
!7349 = !DILocation(line: 3223, column: 24, scope: !7332)
!7350 = !DILocation(line: 3223, column: 28, scope: !7332)
!7351 = !DILocation(line: 3223, column: 33, scope: !7332)
!7352 = !DILocation(line: 3223, column: 41, scope: !7332)
!7353 = !DILocation(line: 3223, column: 51, scope: !7332)
!7354 = !DILocation(line: 3223, column: 38, scope: !7332)
!7355 = !DILocation(line: 3223, column: 61, scope: !7332)
!7356 = !DILocation(line: 3223, column: 7, scope: !7332)
!7357 = !DILocation(line: 3224, column: 15, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7332, file: !63, line: 3224, column: 11)
!7359 = !DILocation(line: 3224, column: 13, scope: !7358)
!7360 = !DILocation(line: 3224, column: 11, scope: !7332)
!7361 = !DILocation(line: 3225, column: 26, scope: !7358)
!7362 = !DILocation(line: 3225, column: 30, scope: !7358)
!7363 = !DILocation(line: 3225, column: 35, scope: !7358)
!7364 = !DILocation(line: 3225, column: 42, scope: !7358)
!7365 = !DILocation(line: 3225, column: 41, scope: !7358)
!7366 = !DILocation(line: 3225, column: 9, scope: !7358)
!7367 = !DILocation(line: 3226, column: 17, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7358, file: !63, line: 3226, column: 16)
!7369 = !DILocation(line: 3226, column: 16, scope: !7358)
!7370 = !DILocation(line: 3227, column: 9, scope: !7368)
!7371 = !DILocation(line: 3227, column: 20, scope: !7368)
!7372 = !DILocalVariable(name: "dest", scope: !7332, file: !63, line: 3229, type: !553)
!7373 = !DILocation(line: 3229, column: 20, scope: !7332)
!7374 = !DILocalVariable(name: "sorted_lo", scope: !7332, file: !63, line: 3230, type: !539)
!7375 = !DILocation(line: 3230, column: 26, scope: !7332)
!7376 = !DILocation(line: 3231, column: 11, scope: !7377)
!7377 = distinct !DILexicalBlock(scope: !7332, file: !63, line: 3231, column: 11)
!7378 = !DILocation(line: 3231, column: 11, scope: !7332)
!7379 = !DILocation(line: 3233, column: 18, scope: !7380)
!7380 = distinct !DILexicalBlock(scope: !7377, file: !63, line: 3232, column: 9)
!7381 = !DILocation(line: 3233, column: 16, scope: !7380)
!7382 = !DILocation(line: 3234, column: 23, scope: !7380)
!7383 = !DILocation(line: 3234, column: 21, scope: !7380)
!7384 = !DILocation(line: 3235, column: 9, scope: !7380)
!7385 = !DILocation(line: 3238, column: 18, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7377, file: !63, line: 3237, column: 9)
!7387 = !DILocation(line: 3238, column: 16, scope: !7386)
!7388 = !DILocation(line: 3239, column: 23, scope: !7386)
!7389 = !DILocation(line: 3239, column: 21, scope: !7386)
!7390 = !DILocation(line: 3241, column: 19, scope: !7332)
!7391 = !DILocation(line: 3241, column: 25, scope: !7332)
!7392 = !DILocation(line: 3241, column: 33, scope: !7332)
!7393 = !DILocation(line: 3241, column: 7, scope: !7332)
!7394 = !DILocation(line: 3243, column: 1, scope: !7284)
!7395 = distinct !DISubprogram(name: "queue_insert", scope: !63, file: !63, line: 3393, type: !7396, scopeLine: 3394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7396 = !DISubroutineType(types: !7397)
!7397 = !{null, !683, !621}
!7398 = !DILocalVariable(name: "queue", arg: 1, scope: !7395, file: !63, line: 3393, type: !683)
!7399 = !DILocation(line: 3393, column: 40, scope: !7395)
!7400 = !DILocalVariable(name: "node", arg: 2, scope: !7395, file: !63, line: 3393, type: !621)
!7401 = !DILocation(line: 3393, column: 66, scope: !7395)
!7402 = !DILocation(line: 3395, column: 24, scope: !7395)
!7403 = !DILocation(line: 3395, column: 31, scope: !7395)
!7404 = !DILocation(line: 3395, column: 3, scope: !7395)
!7405 = !DILocation(line: 3396, column: 16, scope: !7395)
!7406 = !DILocation(line: 3396, column: 23, scope: !7395)
!7407 = !DILocation(line: 3396, column: 39, scope: !7395)
!7408 = !DILocation(line: 3396, column: 3, scope: !7395)
!7409 = !DILocation(line: 3397, column: 3, scope: !7395)
!7410 = !DILocation(line: 3397, column: 9, scope: !7395)
!7411 = !DILocation(line: 3397, column: 16, scope: !7395)
!7412 = !DILocation(line: 3398, column: 25, scope: !7395)
!7413 = !DILocation(line: 3398, column: 32, scope: !7395)
!7414 = !DILocation(line: 3398, column: 3, scope: !7395)
!7415 = !DILocation(line: 3399, column: 26, scope: !7395)
!7416 = !DILocation(line: 3399, column: 33, scope: !7395)
!7417 = !DILocation(line: 3399, column: 3, scope: !7395)
!7418 = !DILocation(line: 3400, column: 1, scope: !7395)
!7419 = distinct !DISubprogram(name: "merge_loop", scope: !63, file: !63, line: 3551, type: !7420, scopeLine: 3553, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7420 = !DISubroutineType(types: !7421)
!7421 = !{null, !683, !52, !389, !90}
!7422 = !DILocalVariable(name: "queue", arg: 1, scope: !7419, file: !63, line: 3551, type: !683)
!7423 = !DILocation(line: 3551, column: 38, scope: !7419)
!7424 = !DILocalVariable(name: "total_lines", arg: 2, scope: !7419, file: !63, line: 3552, type: !52)
!7425 = !DILocation(line: 3552, column: 20, scope: !7419)
!7426 = !DILocalVariable(name: "tfp", arg: 3, scope: !7419, file: !63, line: 3552, type: !389)
!7427 = !DILocation(line: 3552, column: 39, scope: !7419)
!7428 = !DILocalVariable(name: "temp_output", arg: 4, scope: !7419, file: !63, line: 3552, type: !90)
!7429 = !DILocation(line: 3552, column: 56, scope: !7419)
!7430 = !DILocation(line: 3554, column: 3, scope: !7419)
!7431 = !DILocalVariable(name: "node", scope: !7432, file: !63, line: 3556, type: !621)
!7432 = distinct !DILexicalBlock(scope: !7419, file: !63, line: 3555, column: 5)
!7433 = !DILocation(line: 3556, column: 26, scope: !7432)
!7434 = !DILocation(line: 3556, column: 44, scope: !7432)
!7435 = !DILocation(line: 3556, column: 33, scope: !7432)
!7436 = !DILocation(line: 3558, column: 11, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7432, file: !63, line: 3558, column: 11)
!7438 = !DILocation(line: 3558, column: 17, scope: !7437)
!7439 = !DILocation(line: 3558, column: 23, scope: !7437)
!7440 = !DILocation(line: 3558, column: 11, scope: !7432)
!7441 = !DILocation(line: 3560, column: 24, scope: !7442)
!7442 = distinct !DILexicalBlock(scope: !7437, file: !63, line: 3559, column: 9)
!7443 = !DILocation(line: 3560, column: 11, scope: !7442)
!7444 = !DILocation(line: 3562, column: 25, scope: !7442)
!7445 = !DILocation(line: 3562, column: 32, scope: !7442)
!7446 = !DILocation(line: 3562, column: 11, scope: !7442)
!7447 = !DILocation(line: 3563, column: 11, scope: !7442)
!7448 = !DILocation(line: 3565, column: 24, scope: !7432)
!7449 = !DILocation(line: 3565, column: 30, scope: !7432)
!7450 = !DILocation(line: 3565, column: 43, scope: !7432)
!7451 = !DILocation(line: 3565, column: 48, scope: !7432)
!7452 = !DILocation(line: 3565, column: 7, scope: !7432)
!7453 = !DILocation(line: 3566, column: 27, scope: !7432)
!7454 = !DILocation(line: 3566, column: 34, scope: !7432)
!7455 = !DILocation(line: 3566, column: 7, scope: !7432)
!7456 = !DILocation(line: 3567, column: 34, scope: !7432)
!7457 = !DILocation(line: 3567, column: 41, scope: !7432)
!7458 = !DILocation(line: 3567, column: 7, scope: !7432)
!7459 = !DILocation(line: 3569, column: 20, scope: !7432)
!7460 = !DILocation(line: 3569, column: 7, scope: !7432)
!7461 = distinct !{!7461, !7430, !7462}
!7462 = !DILocation(line: 3570, column: 5, scope: !7419)
!7463 = !DILocation(line: 3571, column: 1, scope: !7419)
!7464 = distinct !DISubprogram(name: "queue_pop", scope: !63, file: !63, line: 3405, type: !7465, scopeLine: 3406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7465 = !DISubroutineType(types: !7466)
!7466 = !{!621, !683}
!7467 = !DILocalVariable(name: "queue", arg: 1, scope: !7464, file: !63, line: 3405, type: !683)
!7468 = !DILocation(line: 3405, column: 37, scope: !7464)
!7469 = !DILocalVariable(name: "node", scope: !7464, file: !63, line: 3407, type: !621)
!7470 = !DILocation(line: 3407, column: 22, scope: !7464)
!7471 = !DILocation(line: 3408, column: 24, scope: !7464)
!7472 = !DILocation(line: 3408, column: 31, scope: !7464)
!7473 = !DILocation(line: 3408, column: 3, scope: !7464)
!7474 = !DILocation(line: 3409, column: 3, scope: !7464)
!7475 = !DILocation(line: 3409, column: 37, scope: !7464)
!7476 = !DILocation(line: 3409, column: 44, scope: !7464)
!7477 = !DILocation(line: 3409, column: 20, scope: !7464)
!7478 = !DILocation(line: 3409, column: 18, scope: !7464)
!7479 = !DILocation(line: 3409, column: 10, scope: !7464)
!7480 = !DILocation(line: 3410, column: 25, scope: !7464)
!7481 = !DILocation(line: 3410, column: 32, scope: !7464)
!7482 = !DILocation(line: 3410, column: 39, scope: !7464)
!7483 = !DILocation(line: 3410, column: 46, scope: !7464)
!7484 = !DILocation(line: 3410, column: 5, scope: !7464)
!7485 = distinct !{!7485, !7474, !7486}
!7486 = !DILocation(line: 3410, column: 51, scope: !7464)
!7487 = !DILocation(line: 3411, column: 26, scope: !7464)
!7488 = !DILocation(line: 3411, column: 33, scope: !7464)
!7489 = !DILocation(line: 3411, column: 3, scope: !7464)
!7490 = !DILocation(line: 3412, column: 14, scope: !7464)
!7491 = !DILocation(line: 3412, column: 3, scope: !7464)
!7492 = !DILocation(line: 3413, column: 3, scope: !7464)
!7493 = !DILocation(line: 3413, column: 9, scope: !7464)
!7494 = !DILocation(line: 3413, column: 16, scope: !7464)
!7495 = !DILocation(line: 3414, column: 10, scope: !7464)
!7496 = !DILocation(line: 3414, column: 3, scope: !7464)
!7497 = distinct !DISubprogram(name: "unlock_node", scope: !63, file: !63, line: 3360, type: !7498, scopeLine: 3361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7498 = !DISubroutineType(types: !7499)
!7499 = !{null, !621}
!7500 = !DILocalVariable(name: "node", arg: 1, scope: !7497, file: !63, line: 3360, type: !621)
!7501 = !DILocation(line: 3360, column: 33, scope: !7497)
!7502 = !DILocation(line: 3362, column: 26, scope: !7497)
!7503 = !DILocation(line: 3362, column: 32, scope: !7497)
!7504 = !DILocation(line: 3362, column: 3, scope: !7497)
!7505 = !DILocation(line: 3363, column: 1, scope: !7497)
!7506 = distinct !DISubprogram(name: "mergelines_node", scope: !63, file: !63, line: 3445, type: !7507, scopeLine: 3447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7507 = !DISubroutineType(types: !7508)
!7508 = !{null, !7509, !52, !389, !90}
!7509 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !621)
!7510 = !DILocalVariable(name: "node", arg: 1, scope: !7506, file: !63, line: 3445, type: !7509)
!7511 = !DILocation(line: 3445, column: 46, scope: !7506)
!7512 = !DILocalVariable(name: "total_lines", arg: 2, scope: !7506, file: !63, line: 3445, type: !52)
!7513 = !DILocation(line: 3445, column: 59, scope: !7506)
!7514 = !DILocalVariable(name: "tfp", arg: 3, scope: !7506, file: !63, line: 3446, type: !389)
!7515 = !DILocation(line: 3446, column: 24, scope: !7506)
!7516 = !DILocalVariable(name: "temp_output", arg: 4, scope: !7506, file: !63, line: 3446, type: !90)
!7517 = !DILocation(line: 3446, column: 41, scope: !7506)
!7518 = !DILocalVariable(name: "lo_orig", scope: !7506, file: !63, line: 3448, type: !553)
!7519 = !DILocation(line: 3448, column: 16, scope: !7506)
!7520 = !DILocation(line: 3448, column: 26, scope: !7506)
!7521 = !DILocation(line: 3448, column: 32, scope: !7506)
!7522 = !DILocalVariable(name: "hi_orig", scope: !7506, file: !63, line: 3449, type: !553)
!7523 = !DILocation(line: 3449, column: 16, scope: !7506)
!7524 = !DILocation(line: 3449, column: 26, scope: !7506)
!7525 = !DILocation(line: 3449, column: 32, scope: !7506)
!7526 = !DILocalVariable(name: "to_merge", scope: !7506, file: !63, line: 3450, type: !52)
!7527 = !DILocation(line: 3450, column: 10, scope: !7506)
!7528 = !DILocation(line: 3450, column: 21, scope: !7506)
!7529 = !DILocalVariable(name: "merged_lo", scope: !7506, file: !63, line: 3451, type: !52)
!7530 = !DILocation(line: 3451, column: 10, scope: !7506)
!7531 = !DILocalVariable(name: "merged_hi", scope: !7506, file: !63, line: 3452, type: !52)
!7532 = !DILocation(line: 3452, column: 10, scope: !7506)
!7533 = !DILocation(line: 3454, column: 7, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7506, file: !63, line: 3454, column: 7)
!7535 = !DILocation(line: 3454, column: 13, scope: !7534)
!7536 = !DILocation(line: 3454, column: 19, scope: !7534)
!7537 = !DILocation(line: 3454, column: 7, scope: !7506)
!7538 = !DILocalVariable(name: "dest", scope: !7539, file: !63, line: 3457, type: !553)
!7539 = distinct !DILexicalBlock(scope: !7534, file: !63, line: 3455, column: 5)
!7540 = !DILocation(line: 3457, column: 20, scope: !7539)
!7541 = !DILocation(line: 3457, column: 28, scope: !7539)
!7542 = !DILocation(line: 3457, column: 34, scope: !7539)
!7543 = !DILocation(line: 3457, column: 27, scope: !7539)
!7544 = !DILocation(line: 3458, column: 7, scope: !7539)
!7545 = !DILocation(line: 3458, column: 14, scope: !7539)
!7546 = !DILocation(line: 3458, column: 20, scope: !7539)
!7547 = !DILocation(line: 3458, column: 26, scope: !7539)
!7548 = !DILocation(line: 3458, column: 32, scope: !7539)
!7549 = !DILocation(line: 3458, column: 23, scope: !7539)
!7550 = !DILocation(line: 3458, column: 39, scope: !7539)
!7551 = !DILocation(line: 3458, column: 42, scope: !7539)
!7552 = !DILocation(line: 3458, column: 48, scope: !7539)
!7553 = !DILocation(line: 3458, column: 54, scope: !7539)
!7554 = !DILocation(line: 3458, column: 60, scope: !7539)
!7555 = !DILocation(line: 3458, column: 51, scope: !7539)
!7556 = !DILocation(line: 3458, column: 67, scope: !7539)
!7557 = !DILocation(line: 3458, column: 78, scope: !7539)
!7558 = !DILocation(line: 0, scope: !7539)
!7559 = !DILocation(line: 3459, column: 22, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7539, file: !63, line: 3459, column: 13)
!7561 = !DILocation(line: 3459, column: 28, scope: !7560)
!7562 = !DILocation(line: 3459, column: 31, scope: !7560)
!7563 = !DILocation(line: 3459, column: 36, scope: !7560)
!7564 = !DILocation(line: 3459, column: 42, scope: !7560)
!7565 = !DILocation(line: 3459, column: 45, scope: !7560)
!7566 = !DILocation(line: 3459, column: 13, scope: !7560)
!7567 = !DILocation(line: 3459, column: 50, scope: !7560)
!7568 = !DILocation(line: 3459, column: 13, scope: !7539)
!7569 = !DILocation(line: 3460, column: 12, scope: !7560)
!7570 = !DILocation(line: 3460, column: 24, scope: !7560)
!7571 = !DILocation(line: 3460, column: 30, scope: !7560)
!7572 = !DILocation(line: 3460, column: 22, scope: !7560)
!7573 = !DILocation(line: 3460, column: 21, scope: !7560)
!7574 = !DILocation(line: 3460, column: 11, scope: !7560)
!7575 = !DILocation(line: 3462, column: 12, scope: !7560)
!7576 = !DILocation(line: 3462, column: 24, scope: !7560)
!7577 = !DILocation(line: 3462, column: 30, scope: !7560)
!7578 = !DILocation(line: 3462, column: 22, scope: !7560)
!7579 = !DILocation(line: 3462, column: 21, scope: !7560)
!7580 = distinct !{!7580, !7544, !7581}
!7581 = !DILocation(line: 3462, column: 30, scope: !7539)
!7582 = !DILocation(line: 3464, column: 19, scope: !7539)
!7583 = !DILocation(line: 3464, column: 29, scope: !7539)
!7584 = !DILocation(line: 3464, column: 35, scope: !7539)
!7585 = !DILocation(line: 3464, column: 27, scope: !7539)
!7586 = !DILocation(line: 3464, column: 17, scope: !7539)
!7587 = !DILocation(line: 3465, column: 19, scope: !7539)
!7588 = !DILocation(line: 3465, column: 29, scope: !7539)
!7589 = !DILocation(line: 3465, column: 35, scope: !7539)
!7590 = !DILocation(line: 3465, column: 27, scope: !7539)
!7591 = !DILocation(line: 3465, column: 17, scope: !7539)
!7592 = !DILocation(line: 3467, column: 11, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7539, file: !63, line: 3467, column: 11)
!7594 = !DILocation(line: 3467, column: 17, scope: !7593)
!7595 = !DILocation(line: 3467, column: 24, scope: !7593)
!7596 = !DILocation(line: 3467, column: 21, scope: !7593)
!7597 = !DILocation(line: 3467, column: 11, scope: !7539)
!7598 = !DILocation(line: 3468, column: 9, scope: !7593)
!7599 = !DILocation(line: 3468, column: 16, scope: !7593)
!7600 = !DILocation(line: 3468, column: 22, scope: !7593)
!7601 = !DILocation(line: 3468, column: 28, scope: !7593)
!7602 = !DILocation(line: 3468, column: 34, scope: !7593)
!7603 = !DILocation(line: 3468, column: 25, scope: !7593)
!7604 = !DILocation(line: 3468, column: 41, scope: !7593)
!7605 = !DILocation(line: 3468, column: 52, scope: !7593)
!7606 = !DILocation(line: 0, scope: !7593)
!7607 = !DILocation(line: 3469, column: 12, scope: !7593)
!7608 = !DILocation(line: 3469, column: 24, scope: !7593)
!7609 = !DILocation(line: 3469, column: 30, scope: !7593)
!7610 = !DILocation(line: 3469, column: 22, scope: !7593)
!7611 = !DILocation(line: 3469, column: 21, scope: !7593)
!7612 = distinct !{!7612, !7598, !7609}
!7613 = !DILocation(line: 3470, column: 16, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7593, file: !63, line: 3470, column: 16)
!7615 = !DILocation(line: 3470, column: 22, scope: !7614)
!7616 = !DILocation(line: 3470, column: 29, scope: !7614)
!7617 = !DILocation(line: 3470, column: 26, scope: !7614)
!7618 = !DILocation(line: 3470, column: 16, scope: !7593)
!7619 = !DILocation(line: 3471, column: 9, scope: !7614)
!7620 = !DILocation(line: 3471, column: 16, scope: !7614)
!7621 = !DILocation(line: 3471, column: 22, scope: !7614)
!7622 = !DILocation(line: 3471, column: 28, scope: !7614)
!7623 = !DILocation(line: 3471, column: 34, scope: !7614)
!7624 = !DILocation(line: 3471, column: 25, scope: !7614)
!7625 = !DILocation(line: 3471, column: 41, scope: !7614)
!7626 = !DILocation(line: 3471, column: 52, scope: !7614)
!7627 = !DILocation(line: 0, scope: !7614)
!7628 = !DILocation(line: 3472, column: 12, scope: !7614)
!7629 = !DILocation(line: 3472, column: 24, scope: !7614)
!7630 = !DILocation(line: 3472, column: 30, scope: !7614)
!7631 = !DILocation(line: 3472, column: 22, scope: !7614)
!7632 = !DILocation(line: 3472, column: 21, scope: !7614)
!7633 = distinct !{!7633, !7619, !7630}
!7634 = !DILocation(line: 3473, column: 21, scope: !7539)
!7635 = !DILocation(line: 3473, column: 8, scope: !7539)
!7636 = !DILocation(line: 3473, column: 14, scope: !7539)
!7637 = !DILocation(line: 3473, column: 19, scope: !7539)
!7638 = !DILocation(line: 3474, column: 5, scope: !7539)
!7639 = !DILocation(line: 3478, column: 7, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7534, file: !63, line: 3476, column: 5)
!7641 = !DILocation(line: 3478, column: 14, scope: !7640)
!7642 = !DILocation(line: 3478, column: 20, scope: !7640)
!7643 = !DILocation(line: 3478, column: 26, scope: !7640)
!7644 = !DILocation(line: 3478, column: 32, scope: !7640)
!7645 = !DILocation(line: 3478, column: 23, scope: !7640)
!7646 = !DILocation(line: 3478, column: 39, scope: !7640)
!7647 = !DILocation(line: 3478, column: 42, scope: !7640)
!7648 = !DILocation(line: 3478, column: 48, scope: !7640)
!7649 = !DILocation(line: 3478, column: 54, scope: !7640)
!7650 = !DILocation(line: 3478, column: 60, scope: !7640)
!7651 = !DILocation(line: 3478, column: 51, scope: !7640)
!7652 = !DILocation(line: 3478, column: 67, scope: !7640)
!7653 = !DILocation(line: 3478, column: 78, scope: !7640)
!7654 = !DILocation(line: 0, scope: !7640)
!7655 = !DILocation(line: 3480, column: 24, scope: !7656)
!7656 = distinct !DILexicalBlock(scope: !7657, file: !63, line: 3480, column: 15)
!7657 = distinct !DILexicalBlock(scope: !7640, file: !63, line: 3479, column: 9)
!7658 = !DILocation(line: 3480, column: 30, scope: !7656)
!7659 = !DILocation(line: 3480, column: 33, scope: !7656)
!7660 = !DILocation(line: 3480, column: 38, scope: !7656)
!7661 = !DILocation(line: 3480, column: 44, scope: !7656)
!7662 = !DILocation(line: 3480, column: 47, scope: !7656)
!7663 = !DILocation(line: 3480, column: 15, scope: !7656)
!7664 = !DILocation(line: 3480, column: 52, scope: !7656)
!7665 = !DILocation(line: 3480, column: 15, scope: !7657)
!7666 = !DILocation(line: 3481, column: 29, scope: !7656)
!7667 = !DILocation(line: 3481, column: 35, scope: !7656)
!7668 = !DILocation(line: 3481, column: 27, scope: !7656)
!7669 = !DILocation(line: 3481, column: 39, scope: !7656)
!7670 = !DILocation(line: 3481, column: 44, scope: !7656)
!7671 = !DILocation(line: 3481, column: 13, scope: !7656)
!7672 = !DILocation(line: 3483, column: 29, scope: !7656)
!7673 = !DILocation(line: 3483, column: 35, scope: !7656)
!7674 = !DILocation(line: 3483, column: 27, scope: !7656)
!7675 = !DILocation(line: 3483, column: 39, scope: !7656)
!7676 = !DILocation(line: 3483, column: 44, scope: !7656)
!7677 = !DILocation(line: 3483, column: 13, scope: !7656)
!7678 = distinct !{!7678, !7639, !7679}
!7679 = !DILocation(line: 3484, column: 9, scope: !7640)
!7680 = !DILocation(line: 3486, column: 19, scope: !7640)
!7681 = !DILocation(line: 3486, column: 29, scope: !7640)
!7682 = !DILocation(line: 3486, column: 35, scope: !7640)
!7683 = !DILocation(line: 3486, column: 27, scope: !7640)
!7684 = !DILocation(line: 3486, column: 17, scope: !7640)
!7685 = !DILocation(line: 3487, column: 19, scope: !7640)
!7686 = !DILocation(line: 3487, column: 29, scope: !7640)
!7687 = !DILocation(line: 3487, column: 35, scope: !7640)
!7688 = !DILocation(line: 3487, column: 27, scope: !7640)
!7689 = !DILocation(line: 3487, column: 17, scope: !7640)
!7690 = !DILocation(line: 3489, column: 11, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7640, file: !63, line: 3489, column: 11)
!7692 = !DILocation(line: 3489, column: 17, scope: !7691)
!7693 = !DILocation(line: 3489, column: 24, scope: !7691)
!7694 = !DILocation(line: 3489, column: 21, scope: !7691)
!7695 = !DILocation(line: 3489, column: 11, scope: !7640)
!7696 = !DILocation(line: 3491, column: 11, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7691, file: !63, line: 3490, column: 9)
!7698 = !DILocation(line: 3491, column: 18, scope: !7697)
!7699 = !DILocation(line: 3491, column: 24, scope: !7697)
!7700 = !DILocation(line: 3491, column: 30, scope: !7697)
!7701 = !DILocation(line: 3491, column: 36, scope: !7697)
!7702 = !DILocation(line: 3491, column: 27, scope: !7697)
!7703 = !DILocation(line: 3491, column: 43, scope: !7697)
!7704 = !DILocation(line: 3491, column: 54, scope: !7697)
!7705 = !DILocation(line: 0, scope: !7697)
!7706 = !DILocation(line: 3492, column: 29, scope: !7697)
!7707 = !DILocation(line: 3492, column: 35, scope: !7697)
!7708 = !DILocation(line: 3492, column: 27, scope: !7697)
!7709 = !DILocation(line: 3492, column: 39, scope: !7697)
!7710 = !DILocation(line: 3492, column: 44, scope: !7697)
!7711 = !DILocation(line: 3492, column: 13, scope: !7697)
!7712 = distinct !{!7712, !7696, !7713}
!7713 = !DILocation(line: 3492, column: 55, scope: !7697)
!7714 = !DILocation(line: 3493, column: 9, scope: !7697)
!7715 = !DILocation(line: 3494, column: 16, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7691, file: !63, line: 3494, column: 16)
!7717 = !DILocation(line: 3494, column: 22, scope: !7716)
!7718 = !DILocation(line: 3494, column: 29, scope: !7716)
!7719 = !DILocation(line: 3494, column: 26, scope: !7716)
!7720 = !DILocation(line: 3494, column: 16, scope: !7691)
!7721 = !DILocation(line: 3496, column: 11, scope: !7722)
!7722 = distinct !DILexicalBlock(scope: !7716, file: !63, line: 3495, column: 9)
!7723 = !DILocation(line: 3496, column: 18, scope: !7722)
!7724 = !DILocation(line: 3496, column: 24, scope: !7722)
!7725 = !DILocation(line: 3496, column: 30, scope: !7722)
!7726 = !DILocation(line: 3496, column: 36, scope: !7722)
!7727 = !DILocation(line: 3496, column: 27, scope: !7722)
!7728 = !DILocation(line: 3496, column: 43, scope: !7722)
!7729 = !DILocation(line: 3496, column: 54, scope: !7722)
!7730 = !DILocation(line: 0, scope: !7722)
!7731 = !DILocation(line: 3497, column: 29, scope: !7722)
!7732 = !DILocation(line: 3497, column: 35, scope: !7722)
!7733 = !DILocation(line: 3497, column: 27, scope: !7722)
!7734 = !DILocation(line: 3497, column: 39, scope: !7722)
!7735 = !DILocation(line: 3497, column: 44, scope: !7722)
!7736 = !DILocation(line: 3497, column: 13, scope: !7722)
!7737 = distinct !{!7737, !7721, !7738}
!7738 = !DILocation(line: 3497, column: 55, scope: !7722)
!7739 = !DILocation(line: 3498, column: 9, scope: !7722)
!7740 = !DILocation(line: 3502, column: 15, scope: !7506)
!7741 = !DILocation(line: 3502, column: 25, scope: !7506)
!7742 = !DILocation(line: 3502, column: 31, scope: !7506)
!7743 = !DILocation(line: 3502, column: 23, scope: !7506)
!7744 = !DILocation(line: 3502, column: 13, scope: !7506)
!7745 = !DILocation(line: 3503, column: 15, scope: !7506)
!7746 = !DILocation(line: 3503, column: 25, scope: !7506)
!7747 = !DILocation(line: 3503, column: 31, scope: !7506)
!7748 = !DILocation(line: 3503, column: 23, scope: !7506)
!7749 = !DILocation(line: 3503, column: 13, scope: !7506)
!7750 = !DILocation(line: 3504, column: 16, scope: !7506)
!7751 = !DILocation(line: 3504, column: 3, scope: !7506)
!7752 = !DILocation(line: 3504, column: 9, scope: !7506)
!7753 = !DILocation(line: 3504, column: 13, scope: !7506)
!7754 = !DILocation(line: 3505, column: 16, scope: !7506)
!7755 = !DILocation(line: 3505, column: 3, scope: !7506)
!7756 = !DILocation(line: 3505, column: 9, scope: !7506)
!7757 = !DILocation(line: 3505, column: 13, scope: !7506)
!7758 = !DILocation(line: 3506, column: 1, scope: !7506)
!7759 = distinct !DISubprogram(name: "queue_check_insert", scope: !63, file: !63, line: 3513, type: !7396, scopeLine: 3514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7760 = !DILocalVariable(name: "queue", arg: 1, scope: !7759, file: !63, line: 3513, type: !683)
!7761 = !DILocation(line: 3513, column: 46, scope: !7759)
!7762 = !DILocalVariable(name: "node", arg: 2, scope: !7759, file: !63, line: 3513, type: !621)
!7763 = !DILocation(line: 3513, column: 72, scope: !7759)
!7764 = !DILocation(line: 3515, column: 9, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7759, file: !63, line: 3515, column: 7)
!7766 = !DILocation(line: 3515, column: 15, scope: !7765)
!7767 = !DILocation(line: 3515, column: 7, scope: !7759)
!7768 = !DILocalVariable(name: "lo_avail", scope: !7769, file: !63, line: 3517, type: !162)
!7769 = distinct !DILexicalBlock(scope: !7765, file: !63, line: 3516, column: 5)
!7770 = !DILocation(line: 3517, column: 12, scope: !7769)
!7771 = !DILocation(line: 3517, column: 24, scope: !7769)
!7772 = !DILocation(line: 3517, column: 30, scope: !7769)
!7773 = !DILocation(line: 3517, column: 35, scope: !7769)
!7774 = !DILocation(line: 3517, column: 41, scope: !7769)
!7775 = !DILocation(line: 3517, column: 33, scope: !7769)
!7776 = !DILocation(line: 3517, column: 49, scope: !7769)
!7777 = !DILocalVariable(name: "hi_avail", scope: !7769, file: !63, line: 3518, type: !162)
!7778 = !DILocation(line: 3518, column: 12, scope: !7769)
!7779 = !DILocation(line: 3518, column: 24, scope: !7769)
!7780 = !DILocation(line: 3518, column: 30, scope: !7769)
!7781 = !DILocation(line: 3518, column: 35, scope: !7769)
!7782 = !DILocation(line: 3518, column: 41, scope: !7769)
!7783 = !DILocation(line: 3518, column: 33, scope: !7769)
!7784 = !DILocation(line: 3518, column: 49, scope: !7769)
!7785 = !DILocation(line: 3519, column: 11, scope: !7786)
!7786 = distinct !DILexicalBlock(scope: !7769, file: !63, line: 3519, column: 11)
!7787 = !DILocation(line: 3519, column: 11, scope: !7769)
!7788 = !DILocation(line: 3519, column: 22, scope: !7786)
!7789 = !DILocation(line: 3519, column: 31, scope: !7786)
!7790 = !DILocation(line: 3519, column: 36, scope: !7786)
!7791 = !DILocation(line: 3519, column: 42, scope: !7786)
!7792 = !DILocation(line: 3519, column: 48, scope: !7786)
!7793 = !DILocation(line: 3519, column: 57, scope: !7786)
!7794 = !DILocation(line: 3519, column: 62, scope: !7786)
!7795 = !DILocation(line: 3519, column: 68, scope: !7786)
!7796 = !DILocation(line: 3520, column: 23, scope: !7786)
!7797 = !DILocation(line: 3520, column: 30, scope: !7786)
!7798 = !DILocation(line: 3520, column: 9, scope: !7786)
!7799 = !DILocation(line: 3521, column: 5, scope: !7769)
!7800 = !DILocation(line: 3522, column: 1, scope: !7759)
!7801 = distinct !DISubprogram(name: "queue_check_insert_parent", scope: !63, file: !63, line: 3527, type: !7396, scopeLine: 3529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7802 = !DILocalVariable(name: "queue", arg: 1, scope: !7801, file: !63, line: 3527, type: !683)
!7803 = !DILocation(line: 3527, column: 53, scope: !7801)
!7804 = !DILocalVariable(name: "node", arg: 2, scope: !7801, file: !63, line: 3528, type: !621)
!7805 = !DILocation(line: 3528, column: 47, scope: !7801)
!7806 = !DILocation(line: 3530, column: 7, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7801, file: !63, line: 3530, column: 7)
!7808 = !DILocation(line: 3530, column: 13, scope: !7807)
!7809 = !DILocation(line: 3530, column: 19, scope: !7807)
!7810 = !DILocation(line: 3530, column: 7, scope: !7801)
!7811 = !DILocation(line: 3532, column: 18, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7807, file: !63, line: 3531, column: 5)
!7813 = !DILocation(line: 3532, column: 24, scope: !7812)
!7814 = !DILocation(line: 3532, column: 7, scope: !7812)
!7815 = !DILocation(line: 3533, column: 27, scope: !7812)
!7816 = !DILocation(line: 3533, column: 34, scope: !7812)
!7817 = !DILocation(line: 3533, column: 40, scope: !7812)
!7818 = !DILocation(line: 3533, column: 7, scope: !7812)
!7819 = !DILocation(line: 3534, column: 20, scope: !7812)
!7820 = !DILocation(line: 3534, column: 26, scope: !7812)
!7821 = !DILocation(line: 3534, column: 7, scope: !7812)
!7822 = !DILocation(line: 3535, column: 5, scope: !7812)
!7823 = !DILocation(line: 3536, column: 12, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7807, file: !63, line: 3536, column: 12)
!7825 = !DILocation(line: 3536, column: 18, scope: !7824)
!7826 = !DILocation(line: 3536, column: 24, scope: !7824)
!7827 = !DILocation(line: 3536, column: 30, scope: !7824)
!7828 = !DILocation(line: 3536, column: 22, scope: !7824)
!7829 = !DILocation(line: 3536, column: 34, scope: !7824)
!7830 = !DILocation(line: 3536, column: 12, scope: !7807)
!7831 = !DILocation(line: 3540, column: 21, scope: !7832)
!7832 = distinct !DILexicalBlock(scope: !7824, file: !63, line: 3537, column: 5)
!7833 = !DILocation(line: 3540, column: 28, scope: !7832)
!7834 = !DILocation(line: 3540, column: 34, scope: !7832)
!7835 = !DILocation(line: 3540, column: 7, scope: !7832)
!7836 = !DILocation(line: 3541, column: 5, scope: !7832)
!7837 = !DILocation(line: 3542, column: 1, scope: !7801)
!7838 = distinct !DISubprogram(name: "lock_node", scope: !63, file: !63, line: 3352, type: !7498, scopeLine: 3353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7839 = !DILocalVariable(name: "node", arg: 1, scope: !7838, file: !63, line: 3352, type: !621)
!7840 = !DILocation(line: 3352, column: 31, scope: !7838)
!7841 = !DILocation(line: 3354, column: 24, scope: !7838)
!7842 = !DILocation(line: 3354, column: 30, scope: !7838)
!7843 = !DILocation(line: 3354, column: 3, scope: !7838)
!7844 = !DILocation(line: 3355, column: 1, scope: !7838)
!7845 = distinct !DISubprogram(name: "mergelines", scope: !63, file: !63, line: 3148, type: !7846, scopeLine: 3150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7846 = !DISubroutineType(types: !7847)
!7847 = !{null, !5184, !52, !7848}
!7848 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !539)
!7849 = !DILocalVariable(name: "t", arg: 1, scope: !7845, file: !63, line: 3148, type: !5184)
!7850 = !DILocation(line: 3148, column: 35, scope: !7845)
!7851 = !DILocalVariable(name: "nlines", arg: 2, scope: !7845, file: !63, line: 3148, type: !52)
!7852 = !DILocation(line: 3148, column: 45, scope: !7845)
!7853 = !DILocalVariable(name: "lo", arg: 3, scope: !7845, file: !63, line: 3149, type: !7848)
!7854 = !DILocation(line: 3149, column: 41, scope: !7845)
!7855 = !DILocalVariable(name: "nlo", scope: !7845, file: !63, line: 3151, type: !52)
!7856 = !DILocation(line: 3151, column: 10, scope: !7845)
!7857 = !DILocation(line: 3151, column: 16, scope: !7845)
!7858 = !DILocation(line: 3151, column: 23, scope: !7845)
!7859 = !DILocalVariable(name: "nhi", scope: !7845, file: !63, line: 3152, type: !52)
!7860 = !DILocation(line: 3152, column: 10, scope: !7845)
!7861 = !DILocation(line: 3152, column: 16, scope: !7845)
!7862 = !DILocation(line: 3152, column: 25, scope: !7845)
!7863 = !DILocation(line: 3152, column: 23, scope: !7845)
!7864 = !DILocalVariable(name: "hi", scope: !7845, file: !63, line: 3153, type: !553)
!7865 = !DILocation(line: 3153, column: 16, scope: !7845)
!7866 = !DILocation(line: 3153, column: 21, scope: !7845)
!7867 = !DILocation(line: 3153, column: 25, scope: !7845)
!7868 = !DILocation(line: 3153, column: 23, scope: !7845)
!7869 = !DILocation(line: 3155, column: 3, scope: !7845)
!7870 = !DILocation(line: 3156, column: 18, scope: !7871)
!7871 = distinct !DILexicalBlock(scope: !7845, file: !63, line: 3156, column: 9)
!7872 = !DILocation(line: 3156, column: 21, scope: !7871)
!7873 = !DILocation(line: 3156, column: 26, scope: !7871)
!7874 = !DILocation(line: 3156, column: 29, scope: !7871)
!7875 = !DILocation(line: 3156, column: 9, scope: !7871)
!7876 = !DILocation(line: 3156, column: 34, scope: !7871)
!7877 = !DILocation(line: 3156, column: 9, scope: !7845)
!7878 = !DILocation(line: 3158, column: 10, scope: !7879)
!7879 = distinct !DILexicalBlock(scope: !7871, file: !63, line: 3157, column: 7)
!7880 = !DILocation(line: 3158, column: 17, scope: !7879)
!7881 = !DILocation(line: 3158, column: 16, scope: !7879)
!7882 = !DILocation(line: 3159, column: 15, scope: !7883)
!7883 = distinct !DILexicalBlock(scope: !7879, file: !63, line: 3159, column: 13)
!7884 = !DILocation(line: 3159, column: 13, scope: !7879)
!7885 = !DILocation(line: 3163, column: 13, scope: !7886)
!7886 = distinct !DILexicalBlock(scope: !7883, file: !63, line: 3160, column: 11)
!7887 = !DILocation(line: 3165, column: 7, scope: !7879)
!7888 = !DILocation(line: 3168, column: 10, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7871, file: !63, line: 3167, column: 7)
!7890 = !DILocation(line: 3168, column: 17, scope: !7889)
!7891 = !DILocation(line: 3168, column: 16, scope: !7889)
!7892 = !DILocation(line: 3169, column: 15, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7889, file: !63, line: 3169, column: 13)
!7894 = !DILocation(line: 3169, column: 13, scope: !7889)
!7895 = !DILocation(line: 3171, column: 13, scope: !7896)
!7896 = distinct !DILexicalBlock(scope: !7893, file: !63, line: 3170, column: 11)
!7897 = !DILocation(line: 3172, column: 16, scope: !7896)
!7898 = !DILocation(line: 3172, column: 23, scope: !7896)
!7899 = !DILocation(line: 3172, column: 22, scope: !7896)
!7900 = !DILocation(line: 3172, column: 15, scope: !7896)
!7901 = !DILocation(line: 3173, column: 20, scope: !7896)
!7902 = distinct !{!7902, !7895, !7903}
!7903 = !DILocation(line: 3173, column: 25, scope: !7896)
!7904 = !DILocation(line: 3175, column: 13, scope: !7896)
!7905 = distinct !{!7905, !7869, !7906}
!7906 = !DILocation(line: 3177, column: 7, scope: !7845)
!7907 = !DILocation(line: 3178, column: 1, scope: !7845)
!7908 = distinct !DISubprogram(name: "init_node", scope: !63, file: !63, line: 3294, type: !7909, scopeLine: 3298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!7909 = !DISubroutineType(types: !7910)
!7910 = !{!621, !7509, !7509, !553, !52, !52, !162}
!7911 = !DILocalVariable(name: "parent", arg: 1, scope: !7908, file: !63, line: 3294, type: !7509)
!7912 = !DILocation(line: 3294, column: 40, scope: !7908)
!7913 = !DILocalVariable(name: "node_pool", arg: 2, scope: !7908, file: !63, line: 3295, type: !7509)
!7914 = !DILocation(line: 3295, column: 40, scope: !7908)
!7915 = !DILocalVariable(name: "dest", arg: 3, scope: !7908, file: !63, line: 3296, type: !553)
!7916 = !DILocation(line: 3296, column: 25, scope: !7908)
!7917 = !DILocalVariable(name: "nthreads", arg: 4, scope: !7908, file: !63, line: 3296, type: !52)
!7918 = !DILocation(line: 3296, column: 38, scope: !7908)
!7919 = !DILocalVariable(name: "total_lines", arg: 5, scope: !7908, file: !63, line: 3297, type: !52)
!7920 = !DILocation(line: 3297, column: 19, scope: !7908)
!7921 = !DILocalVariable(name: "is_lo_child", arg: 6, scope: !7908, file: !63, line: 3297, type: !162)
!7922 = !DILocation(line: 3297, column: 37, scope: !7908)
!7923 = !DILocalVariable(name: "nlines", scope: !7908, file: !63, line: 3299, type: !52)
!7924 = !DILocation(line: 3299, column: 10, scope: !7908)
!7925 = !DILocation(line: 3299, column: 20, scope: !7908)
!7926 = !DILocation(line: 3299, column: 34, scope: !7908)
!7927 = !DILocation(line: 3299, column: 42, scope: !7908)
!7928 = !DILocation(line: 3299, column: 48, scope: !7908)
!7929 = !DILocation(line: 3299, column: 56, scope: !7908)
!7930 = !DILocalVariable(name: "nlo", scope: !7908, file: !63, line: 3300, type: !52)
!7931 = !DILocation(line: 3300, column: 10, scope: !7908)
!7932 = !DILocation(line: 3300, column: 16, scope: !7908)
!7933 = !DILocation(line: 3300, column: 23, scope: !7908)
!7934 = !DILocalVariable(name: "nhi", scope: !7908, file: !63, line: 3301, type: !52)
!7935 = !DILocation(line: 3301, column: 10, scope: !7908)
!7936 = !DILocation(line: 3301, column: 16, scope: !7908)
!7937 = !DILocation(line: 3301, column: 25, scope: !7908)
!7938 = !DILocation(line: 3301, column: 23, scope: !7908)
!7939 = !DILocalVariable(name: "lo", scope: !7908, file: !63, line: 3302, type: !553)
!7940 = !DILocation(line: 3302, column: 16, scope: !7908)
!7941 = !DILocation(line: 3302, column: 21, scope: !7908)
!7942 = !DILocation(line: 3302, column: 28, scope: !7908)
!7943 = !DILocation(line: 3302, column: 26, scope: !7908)
!7944 = !DILocalVariable(name: "hi", scope: !7908, file: !63, line: 3303, type: !553)
!7945 = !DILocation(line: 3303, column: 16, scope: !7908)
!7946 = !DILocation(line: 3303, column: 21, scope: !7908)
!7947 = !DILocation(line: 3303, column: 26, scope: !7908)
!7948 = !DILocation(line: 3303, column: 24, scope: !7908)
!7949 = !DILocalVariable(name: "parent_end", scope: !7908, file: !63, line: 3304, type: !629)
!7950 = !DILocation(line: 3304, column: 17, scope: !7908)
!7951 = !DILocation(line: 3304, column: 31, scope: !7908)
!7952 = !DILocation(line: 3304, column: 46, scope: !7908)
!7953 = !DILocation(line: 3304, column: 54, scope: !7908)
!7954 = !DILocation(line: 3304, column: 64, scope: !7908)
!7955 = !DILocation(line: 3304, column: 72, scope: !7908)
!7956 = !DILocalVariable(name: "node", scope: !7908, file: !63, line: 3306, type: !621)
!7957 = !DILocation(line: 3306, column: 22, scope: !7908)
!7958 = !DILocation(line: 3306, column: 38, scope: !7908)
!7959 = !DILocation(line: 3307, column: 29, scope: !7908)
!7960 = !DILocation(line: 3307, column: 14, scope: !7908)
!7961 = !DILocation(line: 3307, column: 20, scope: !7908)
!7962 = !DILocation(line: 3307, column: 27, scope: !7908)
!7963 = !DILocation(line: 3307, column: 3, scope: !7908)
!7964 = !DILocation(line: 3307, column: 9, scope: !7908)
!7965 = !DILocation(line: 3307, column: 12, scope: !7908)
!7966 = !DILocation(line: 3308, column: 29, scope: !7908)
!7967 = !DILocation(line: 3308, column: 14, scope: !7908)
!7968 = !DILocation(line: 3308, column: 20, scope: !7908)
!7969 = !DILocation(line: 3308, column: 27, scope: !7908)
!7970 = !DILocation(line: 3308, column: 3, scope: !7908)
!7971 = !DILocation(line: 3308, column: 9, scope: !7908)
!7972 = !DILocation(line: 3308, column: 12, scope: !7908)
!7973 = !DILocation(line: 3309, column: 16, scope: !7908)
!7974 = !DILocation(line: 3309, column: 3, scope: !7908)
!7975 = !DILocation(line: 3309, column: 9, scope: !7908)
!7976 = !DILocation(line: 3309, column: 14, scope: !7908)
!7977 = !DILocation(line: 3310, column: 15, scope: !7908)
!7978 = !DILocation(line: 3310, column: 3, scope: !7908)
!7979 = !DILocation(line: 3310, column: 9, scope: !7908)
!7980 = !DILocation(line: 3310, column: 13, scope: !7908)
!7981 = !DILocation(line: 3311, column: 15, scope: !7908)
!7982 = !DILocation(line: 3311, column: 3, scope: !7908)
!7983 = !DILocation(line: 3311, column: 9, scope: !7908)
!7984 = !DILocation(line: 3311, column: 13, scope: !7908)
!7985 = !DILocation(line: 3312, column: 18, scope: !7908)
!7986 = !DILocation(line: 3312, column: 3, scope: !7908)
!7987 = !DILocation(line: 3312, column: 9, scope: !7908)
!7988 = !DILocation(line: 3312, column: 16, scope: !7908)
!7989 = !DILocation(line: 3313, column: 17, scope: !7908)
!7990 = !DILocation(line: 3313, column: 25, scope: !7908)
!7991 = !DILocation(line: 3313, column: 31, scope: !7908)
!7992 = !DILocation(line: 3313, column: 3, scope: !7908)
!7993 = !DILocation(line: 3313, column: 9, scope: !7908)
!7994 = !DILocation(line: 3313, column: 15, scope: !7908)
!7995 = !DILocation(line: 3314, column: 3, scope: !7908)
!7996 = !DILocation(line: 3314, column: 9, scope: !7908)
!7997 = !DILocation(line: 3314, column: 16, scope: !7908)
!7998 = !DILocation(line: 3315, column: 24, scope: !7908)
!7999 = !DILocation(line: 3315, column: 30, scope: !7908)
!8000 = !DILocation(line: 3315, column: 3, scope: !7908)
!8001 = !DILocation(line: 3317, column: 7, scope: !8002)
!8002 = distinct !DILexicalBlock(scope: !7908, file: !63, line: 3317, column: 7)
!8003 = !DILocation(line: 3317, column: 16, scope: !8002)
!8004 = !DILocation(line: 3317, column: 7, scope: !7908)
!8005 = !DILocalVariable(name: "lo_threads", scope: !8006, file: !63, line: 3319, type: !52)
!8006 = distinct !DILexicalBlock(scope: !8002, file: !63, line: 3318, column: 5)
!8007 = !DILocation(line: 3319, column: 14, scope: !8006)
!8008 = !DILocation(line: 3319, column: 27, scope: !8006)
!8009 = !DILocation(line: 3319, column: 36, scope: !8006)
!8010 = !DILocalVariable(name: "hi_threads", scope: !8006, file: !63, line: 3320, type: !52)
!8011 = !DILocation(line: 3320, column: 14, scope: !8006)
!8012 = !DILocation(line: 3320, column: 27, scope: !8006)
!8013 = !DILocation(line: 3320, column: 38, scope: !8006)
!8014 = !DILocation(line: 3320, column: 36, scope: !8006)
!8015 = !DILocation(line: 3321, column: 24, scope: !8006)
!8016 = !DILocation(line: 3321, column: 7, scope: !8006)
!8017 = !DILocation(line: 3321, column: 13, scope: !8006)
!8018 = !DILocation(line: 3321, column: 22, scope: !8006)
!8019 = !DILocation(line: 3322, column: 30, scope: !8006)
!8020 = !DILocation(line: 3322, column: 36, scope: !8006)
!8021 = !DILocation(line: 3322, column: 47, scope: !8006)
!8022 = !DILocation(line: 3322, column: 51, scope: !8006)
!8023 = !DILocation(line: 3323, column: 30, scope: !8006)
!8024 = !DILocation(line: 3322, column: 19, scope: !8006)
!8025 = !DILocation(line: 3322, column: 17, scope: !8006)
!8026 = !DILocation(line: 3324, column: 24, scope: !8006)
!8027 = !DILocation(line: 3324, column: 7, scope: !8006)
!8028 = !DILocation(line: 3324, column: 13, scope: !8006)
!8029 = !DILocation(line: 3324, column: 22, scope: !8006)
!8030 = !DILocation(line: 3325, column: 30, scope: !8006)
!8031 = !DILocation(line: 3325, column: 36, scope: !8006)
!8032 = !DILocation(line: 3325, column: 47, scope: !8006)
!8033 = !DILocation(line: 3325, column: 51, scope: !8006)
!8034 = !DILocation(line: 3326, column: 30, scope: !8006)
!8035 = !DILocation(line: 3325, column: 19, scope: !8006)
!8036 = !DILocation(line: 3325, column: 17, scope: !8006)
!8037 = !DILocation(line: 3327, column: 5, scope: !8006)
!8038 = !DILocation(line: 3330, column: 7, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !8002, file: !63, line: 3329, column: 5)
!8040 = !DILocation(line: 3330, column: 13, scope: !8039)
!8041 = !DILocation(line: 3330, column: 22, scope: !8039)
!8042 = !DILocation(line: 3331, column: 7, scope: !8039)
!8043 = !DILocation(line: 3331, column: 13, scope: !8039)
!8044 = !DILocation(line: 3331, column: 22, scope: !8039)
!8045 = !DILocation(line: 3333, column: 10, scope: !7908)
!8046 = !DILocation(line: 3333, column: 3, scope: !7908)
!8047 = distinct !DISubprogram(name: "compare_nodes", scope: !63, file: !63, line: 3340, type: !1259, scopeLine: 3341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8048 = !DILocalVariable(name: "a", arg: 1, scope: !8047, file: !63, line: 3340, type: !85)
!8049 = !DILocation(line: 3340, column: 28, scope: !8047)
!8050 = !DILocalVariable(name: "b", arg: 2, scope: !8047, file: !63, line: 3340, type: !85)
!8051 = !DILocation(line: 3340, column: 43, scope: !8047)
!8052 = !DILocalVariable(name: "nodea", scope: !8047, file: !63, line: 3342, type: !668)
!8053 = !DILocation(line: 3342, column: 28, scope: !8047)
!8054 = !DILocation(line: 3342, column: 36, scope: !8047)
!8055 = !DILocalVariable(name: "nodeb", scope: !8047, file: !63, line: 3343, type: !668)
!8056 = !DILocation(line: 3343, column: 28, scope: !8047)
!8057 = !DILocation(line: 3343, column: 36, scope: !8047)
!8058 = !DILocation(line: 3344, column: 7, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8047, file: !63, line: 3344, column: 7)
!8060 = !DILocation(line: 3344, column: 14, scope: !8059)
!8061 = !DILocation(line: 3344, column: 23, scope: !8059)
!8062 = !DILocation(line: 3344, column: 30, scope: !8059)
!8063 = !DILocation(line: 3344, column: 20, scope: !8059)
!8064 = !DILocation(line: 3344, column: 7, scope: !8047)
!8065 = !DILocation(line: 3345, column: 15, scope: !8059)
!8066 = !DILocation(line: 3345, column: 22, scope: !8059)
!8067 = !DILocation(line: 3345, column: 28, scope: !8059)
!8068 = !DILocation(line: 3345, column: 35, scope: !8059)
!8069 = !DILocation(line: 3345, column: 26, scope: !8059)
!8070 = !DILocation(line: 3345, column: 43, scope: !8059)
!8071 = !DILocation(line: 3345, column: 50, scope: !8059)
!8072 = !DILocation(line: 3345, column: 56, scope: !8059)
!8073 = !DILocation(line: 3345, column: 63, scope: !8059)
!8074 = !DILocation(line: 3345, column: 54, scope: !8059)
!8075 = !DILocation(line: 3345, column: 40, scope: !8059)
!8076 = !DILocation(line: 3345, column: 7, scope: !8059)
!8077 = !DILocation(line: 3346, column: 10, scope: !8047)
!8078 = !DILocation(line: 3346, column: 17, scope: !8047)
!8079 = !DILocation(line: 3346, column: 25, scope: !8047)
!8080 = !DILocation(line: 3346, column: 32, scope: !8047)
!8081 = !DILocation(line: 3346, column: 23, scope: !8047)
!8082 = !DILocation(line: 3346, column: 3, scope: !8047)
!8083 = !DILocation(line: 3347, column: 1, scope: !8047)
!8084 = distinct !DISubprogram(name: "maybe_create_temp", scope: !63, file: !63, line: 1116, type: !8085, scopeLine: 1117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8085 = !DISubroutineType(types: !8086)
!8086 = !{!407, !584, !162}
!8087 = !DILocalVariable(name: "pfp", arg: 1, scope: !8084, file: !63, line: 1116, type: !584)
!8088 = !DILocation(line: 1116, column: 27, scope: !8084)
!8089 = !DILocalVariable(name: "survive_fd_exhaustion", arg: 2, scope: !8084, file: !63, line: 1116, type: !162)
!8090 = !DILocation(line: 1116, column: 37, scope: !8084)
!8091 = !DILocalVariable(name: "tempfd", scope: !8084, file: !63, line: 1118, type: !5)
!8092 = !DILocation(line: 1118, column: 7, scope: !8084)
!8093 = !DILocalVariable(name: "node", scope: !8084, file: !63, line: 1119, type: !407)
!8094 = !DILocation(line: 1119, column: 20, scope: !8084)
!8095 = !DILocation(line: 1119, column: 54, scope: !8084)
!8096 = !DILocation(line: 1119, column: 27, scope: !8084)
!8097 = !DILocation(line: 1120, column: 9, scope: !8098)
!8098 = distinct !DILexicalBlock(scope: !8084, file: !63, line: 1120, column: 7)
!8099 = !DILocation(line: 1120, column: 7, scope: !8084)
!8100 = !DILocation(line: 1121, column: 5, scope: !8098)
!8101 = !DILocation(line: 1123, column: 3, scope: !8084)
!8102 = !DILocation(line: 1123, column: 9, scope: !8084)
!8103 = !DILocation(line: 1123, column: 15, scope: !8084)
!8104 = !DILocation(line: 1125, column: 7, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8084, file: !63, line: 1125, column: 7)
!8106 = !DILocation(line: 1125, column: 7, scope: !8084)
!8107 = !DILocalVariable(name: "pipefds", scope: !8108, file: !63, line: 1127, type: !585)
!8108 = distinct !DILexicalBlock(scope: !8105, file: !63, line: 1126, column: 5)
!8109 = !DILocation(line: 1127, column: 11, scope: !8108)
!8110 = !DILocation(line: 1129, column: 30, scope: !8108)
!8111 = !DILocation(line: 1129, column: 19, scope: !8108)
!8112 = !DILocation(line: 1129, column: 7, scope: !8108)
!8113 = !DILocation(line: 1129, column: 13, scope: !8108)
!8114 = !DILocation(line: 1129, column: 17, scope: !8108)
!8115 = !DILocation(line: 1130, column: 15, scope: !8116)
!8116 = distinct !DILexicalBlock(scope: !8108, file: !63, line: 1130, column: 11)
!8117 = !DILocation(line: 1130, column: 21, scope: !8116)
!8118 = !DILocation(line: 1130, column: 13, scope: !8116)
!8119 = !DILocation(line: 1130, column: 11, scope: !8108)
!8120 = !DILocation(line: 1132, column: 18, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8116, file: !63, line: 1131, column: 9)
!8122 = !DILocation(line: 1132, column: 11, scope: !8121)
!8123 = !DILocation(line: 1133, column: 18, scope: !8121)
!8124 = !DILocation(line: 1133, column: 11, scope: !8121)
!8125 = !DILocation(line: 1134, column: 20, scope: !8121)
!8126 = !DILocation(line: 1134, column: 18, scope: !8121)
!8127 = !DILocation(line: 1136, column: 26, scope: !8121)
!8128 = !DILocation(line: 1136, column: 11, scope: !8121)
!8129 = !DILocation(line: 1137, column: 9, scope: !8121)
!8130 = !DILocation(line: 1138, column: 16, scope: !8131)
!8131 = distinct !DILexicalBlock(scope: !8116, file: !63, line: 1138, column: 16)
!8132 = !DILocation(line: 1138, column: 22, scope: !8131)
!8133 = !DILocation(line: 1138, column: 26, scope: !8131)
!8134 = !DILocation(line: 1138, column: 16, scope: !8116)
!8135 = !DILocation(line: 1142, column: 18, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8131, file: !63, line: 1139, column: 9)
!8137 = !DILocation(line: 1142, column: 11, scope: !8136)
!8138 = !DILocation(line: 1143, column: 20, scope: !8136)
!8139 = !DILocation(line: 1143, column: 11, scope: !8136)
!8140 = !DILocation(line: 1144, column: 20, scope: !8136)
!8141 = !DILocation(line: 1144, column: 11, scope: !8136)
!8142 = !DILocation(line: 1146, column: 19, scope: !8136)
!8143 = !DILocation(line: 1146, column: 37, scope: !8136)
!8144 = !DILocation(line: 1146, column: 11, scope: !8136)
!8145 = !DILocation(line: 1148, column: 27, scope: !8136)
!8146 = !DILocation(line: 1148, column: 11, scope: !8136)
!8147 = !DILocation(line: 1150, column: 5, scope: !8108)
!8148 = !DILocation(line: 1152, column: 18, scope: !8084)
!8149 = !DILocation(line: 1152, column: 10, scope: !8084)
!8150 = !DILocation(line: 1152, column: 4, scope: !8084)
!8151 = !DILocation(line: 1152, column: 8, scope: !8084)
!8152 = !DILocation(line: 1153, column: 10, scope: !8153)
!8153 = distinct !DILexicalBlock(scope: !8084, file: !63, line: 1153, column: 7)
!8154 = !DILocation(line: 1153, column: 9, scope: !8153)
!8155 = !DILocation(line: 1153, column: 7, scope: !8084)
!8156 = !DILocation(line: 1154, column: 15, scope: !8153)
!8157 = !DILocation(line: 1154, column: 52, scope: !8153)
!8158 = !DILocation(line: 1154, column: 58, scope: !8153)
!8159 = !DILocation(line: 1154, column: 5, scope: !8153)
!8160 = !DILocation(line: 1156, column: 10, scope: !8084)
!8161 = !DILocation(line: 1156, column: 3, scope: !8084)
!8162 = !DILocation(line: 1157, column: 1, scope: !8084)
!8163 = !DILocalVariable(name: "pfd", arg: 1, scope: !800, file: !63, line: 841, type: !325)
!8164 = !DILocation(line: 841, column: 24, scope: !800)
!8165 = !DILocalVariable(name: "survive_fd_exhaustion", arg: 2, scope: !800, file: !63, line: 841, type: !162)
!8166 = !DILocation(line: 841, column: 34, scope: !800)
!8167 = !DILocalVariable(name: "fd", scope: !800, file: !63, line: 845, type: !5)
!8168 = !DILocation(line: 845, column: 7, scope: !800)
!8169 = !DILocalVariable(name: "saved_errno", scope: !800, file: !63, line: 846, type: !5)
!8170 = !DILocation(line: 846, column: 7, scope: !800)
!8171 = !DILocalVariable(name: "temp_dir", scope: !800, file: !63, line: 847, type: !90)
!8172 = !DILocation(line: 847, column: 15, scope: !800)
!8173 = !DILocation(line: 847, column: 26, scope: !800)
!8174 = !DILocation(line: 847, column: 36, scope: !800)
!8175 = !DILocalVariable(name: "len", scope: !800, file: !63, line: 848, type: !52)
!8176 = !DILocation(line: 848, column: 10, scope: !800)
!8177 = !DILocation(line: 848, column: 24, scope: !800)
!8178 = !DILocation(line: 848, column: 16, scope: !800)
!8179 = !DILocalVariable(name: "node", scope: !800, file: !63, line: 849, type: !407)
!8180 = !DILocation(line: 849, column: 20, scope: !800)
!8181 = !DILocation(line: 850, column: 14, scope: !800)
!8182 = !DILocation(line: 850, column: 5, scope: !800)
!8183 = !DILocalVariable(name: "file", scope: !800, file: !63, line: 851, type: !7)
!8184 = !DILocation(line: 851, column: 9, scope: !800)
!8185 = !DILocation(line: 851, column: 16, scope: !800)
!8186 = !DILocation(line: 851, column: 22, scope: !800)
!8187 = !DILocalVariable(name: "cs", scope: !800, file: !63, line: 852, type: !2943)
!8188 = !DILocation(line: 852, column: 20, scope: !800)
!8189 = !DILocation(line: 854, column: 11, scope: !800)
!8190 = !DILocation(line: 854, column: 17, scope: !800)
!8191 = !DILocation(line: 854, column: 27, scope: !800)
!8192 = !DILocation(line: 854, column: 3, scope: !800)
!8193 = !DILocation(line: 855, column: 11, scope: !800)
!8194 = !DILocation(line: 855, column: 18, scope: !800)
!8195 = !DILocation(line: 855, column: 16, scope: !800)
!8196 = !DILocation(line: 855, column: 3, scope: !800)
!8197 = !DILocation(line: 856, column: 3, scope: !800)
!8198 = !DILocation(line: 856, column: 9, scope: !800)
!8199 = !DILocation(line: 856, column: 14, scope: !800)
!8200 = !DILocation(line: 857, column: 7, scope: !8201)
!8201 = distinct !DILexicalBlock(scope: !800, file: !63, line: 857, column: 7)
!8202 = !DILocation(line: 857, column: 27, scope: !8201)
!8203 = !DILocation(line: 857, column: 24, scope: !8201)
!8204 = !DILocation(line: 857, column: 7, scope: !800)
!8205 = !DILocation(line: 858, column: 20, scope: !8201)
!8206 = !DILocation(line: 858, column: 5, scope: !8201)
!8207 = !DILocation(line: 861, column: 3, scope: !800)
!8208 = !DILocation(line: 862, column: 18, scope: !800)
!8209 = !DILocation(line: 862, column: 8, scope: !800)
!8210 = !DILocation(line: 862, column: 6, scope: !800)
!8211 = !DILocation(line: 863, column: 12, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !800, file: !63, line: 863, column: 7)
!8213 = !DILocation(line: 863, column: 9, scope: !8212)
!8214 = !DILocation(line: 863, column: 7, scope: !800)
!8215 = !DILocation(line: 865, column: 19, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8212, file: !63, line: 864, column: 5)
!8217 = !DILocation(line: 865, column: 8, scope: !8216)
!8218 = !DILocation(line: 865, column: 17, scope: !8216)
!8219 = !DILocation(line: 866, column: 19, scope: !8216)
!8220 = !DILocation(line: 866, column: 25, scope: !8216)
!8221 = !DILocation(line: 866, column: 16, scope: !8216)
!8222 = !DILocation(line: 867, column: 5, scope: !8216)
!8223 = !DILocation(line: 868, column: 17, scope: !800)
!8224 = !DILocation(line: 868, column: 15, scope: !800)
!8225 = !DILocation(line: 869, column: 3, scope: !800)
!8226 = !DILocation(line: 870, column: 11, scope: !800)
!8227 = !DILocation(line: 870, column: 3, scope: !800)
!8228 = !DILocation(line: 870, column: 9, scope: !800)
!8229 = !DILocation(line: 872, column: 7, scope: !8230)
!8230 = distinct !DILexicalBlock(scope: !800, file: !63, line: 872, column: 7)
!8231 = !DILocation(line: 872, column: 10, scope: !8230)
!8232 = !DILocation(line: 872, column: 7, scope: !800)
!8233 = !DILocation(line: 874, column: 14, scope: !8234)
!8234 = distinct !DILexicalBlock(scope: !8235, file: !63, line: 874, column: 11)
!8235 = distinct !DILexicalBlock(scope: !8230, file: !63, line: 873, column: 5)
!8236 = !DILocation(line: 874, column: 36, scope: !8234)
!8237 = !DILocation(line: 874, column: 39, scope: !8234)
!8238 = !DILocation(line: 874, column: 45, scope: !8234)
!8239 = !DILocation(line: 874, column: 11, scope: !8235)
!8240 = !DILocation(line: 875, column: 9, scope: !8234)
!8241 = !DILocation(line: 877, column: 13, scope: !8235)
!8242 = !DILocation(line: 877, column: 7, scope: !8235)
!8243 = !DILocation(line: 878, column: 12, scope: !8235)
!8244 = !DILocation(line: 879, column: 5, scope: !8235)
!8245 = !DILocation(line: 881, column: 10, scope: !800)
!8246 = !DILocation(line: 881, column: 4, scope: !800)
!8247 = !DILocation(line: 881, column: 8, scope: !800)
!8248 = !DILocation(line: 882, column: 10, scope: !800)
!8249 = !DILocation(line: 882, column: 3, scope: !800)
!8250 = distinct !DISubprogram(name: "pipe_fork", scope: !63, file: !63, line: 1039, type: !8251, scopeLine: 1040, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8251 = !DISubroutineType(types: !8252)
!8252 = !{!413, !325, !52}
!8253 = !DILocalVariable(name: "pipefds", arg: 1, scope: !8250, file: !63, line: 1039, type: !325)
!8254 = !DILocation(line: 1039, column: 16, scope: !8250)
!8255 = !DILocalVariable(name: "tries", arg: 2, scope: !8250, file: !63, line: 1039, type: !52)
!8256 = !DILocation(line: 1039, column: 35, scope: !8250)
!8257 = !DILocalVariable(name: "saved_temphead", scope: !8250, file: !63, line: 1042, type: !407)
!8258 = !DILocation(line: 1042, column: 20, scope: !8250)
!8259 = !DILocalVariable(name: "saved_errno", scope: !8250, file: !63, line: 1043, type: !5)
!8260 = !DILocation(line: 1043, column: 7, scope: !8250)
!8261 = !DILocalVariable(name: "wait_retry", scope: !8250, file: !63, line: 1044, type: !480)
!8262 = !DILocation(line: 1044, column: 10, scope: !8250)
!8263 = !DILocalVariable(name: "pid", scope: !8250, file: !63, line: 1045, type: !413)
!8264 = !DILocation(line: 1045, column: 9, scope: !8250)
!8265 = !DILocalVariable(name: "cs", scope: !8250, file: !63, line: 1046, type: !2943)
!8266 = !DILocation(line: 1046, column: 20, scope: !8250)
!8267 = !DILocation(line: 1048, column: 14, scope: !8268)
!8268 = distinct !DILexicalBlock(scope: !8250, file: !63, line: 1048, column: 7)
!8269 = !DILocation(line: 1048, column: 7, scope: !8268)
!8270 = !DILocation(line: 1048, column: 34, scope: !8268)
!8271 = !DILocation(line: 1048, column: 7, scope: !8250)
!8272 = !DILocation(line: 1049, column: 5, scope: !8268)
!8273 = !DILocation(line: 1058, column: 7, scope: !8274)
!8274 = distinct !DILexicalBlock(scope: !8250, file: !63, line: 1058, column: 7)
!8275 = !DILocation(line: 1058, column: 14, scope: !8274)
!8276 = !DILocation(line: 1058, column: 20, scope: !8274)
!8277 = !DILocation(line: 1058, column: 18, scope: !8274)
!8278 = !DILocation(line: 1058, column: 7, scope: !8250)
!8279 = !DILocation(line: 1059, column: 5, scope: !8274)
!8280 = !DILocation(line: 1061, column: 3, scope: !8250)
!8281 = !DILocation(line: 1061, column: 15, scope: !8250)
!8282 = !DILocation(line: 1065, column: 7, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8250, file: !63, line: 1062, column: 5)
!8284 = !DILocation(line: 1066, column: 24, scope: !8283)
!8285 = !DILocation(line: 1066, column: 22, scope: !8283)
!8286 = !DILocation(line: 1067, column: 16, scope: !8283)
!8287 = !DILocation(line: 1069, column: 13, scope: !8283)
!8288 = !DILocation(line: 1069, column: 11, scope: !8283)
!8289 = !DILocation(line: 1070, column: 21, scope: !8283)
!8290 = !DILocation(line: 1070, column: 19, scope: !8283)
!8291 = !DILocation(line: 1071, column: 11, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8283, file: !63, line: 1071, column: 11)
!8293 = !DILocation(line: 1071, column: 11, scope: !8283)
!8294 = !DILocation(line: 1072, column: 20, scope: !8292)
!8295 = !DILocation(line: 1072, column: 18, scope: !8292)
!8296 = !DILocation(line: 1072, column: 9, scope: !8292)
!8297 = !DILocation(line: 1074, column: 7, scope: !8283)
!8298 = !DILocation(line: 1075, column: 15, scope: !8283)
!8299 = !DILocation(line: 1075, column: 7, scope: !8283)
!8300 = !DILocation(line: 1075, column: 13, scope: !8283)
!8301 = !DILocation(line: 1077, column: 16, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8283, file: !63, line: 1077, column: 11)
!8303 = !DILocation(line: 1077, column: 13, scope: !8302)
!8304 = !DILocation(line: 1077, column: 20, scope: !8302)
!8305 = !DILocation(line: 1077, column: 23, scope: !8302)
!8306 = !DILocation(line: 1077, column: 29, scope: !8302)
!8307 = !DILocation(line: 1077, column: 11, scope: !8283)
!8308 = !DILocation(line: 1078, column: 9, scope: !8302)
!8309 = !DILocation(line: 1081, column: 23, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8302, file: !63, line: 1080, column: 9)
!8311 = !DILocation(line: 1081, column: 11, scope: !8310)
!8312 = !DILocation(line: 1082, column: 22, scope: !8310)
!8313 = !DILocation(line: 1083, column: 11, scope: !8310)
!8314 = distinct !{!8314, !8280, !8315}
!8315 = !DILocation(line: 1085, column: 5, scope: !8250)
!8316 = !DILocation(line: 1087, column: 7, scope: !8317)
!8317 = distinct !DILexicalBlock(scope: !8250, file: !63, line: 1087, column: 7)
!8318 = !DILocation(line: 1087, column: 11, scope: !8317)
!8319 = !DILocation(line: 1087, column: 7, scope: !8250)
!8320 = !DILocation(line: 1089, column: 21, scope: !8321)
!8321 = distinct !DILexicalBlock(scope: !8317, file: !63, line: 1088, column: 5)
!8322 = !DILocation(line: 1089, column: 19, scope: !8321)
!8323 = !DILocation(line: 1090, column: 14, scope: !8321)
!8324 = !DILocation(line: 1090, column: 7, scope: !8321)
!8325 = !DILocation(line: 1091, column: 14, scope: !8321)
!8326 = !DILocation(line: 1091, column: 7, scope: !8321)
!8327 = !DILocation(line: 1092, column: 15, scope: !8321)
!8328 = !DILocation(line: 1092, column: 7, scope: !8321)
!8329 = !DILocation(line: 1092, column: 13, scope: !8321)
!8330 = !DILocation(line: 1093, column: 5, scope: !8321)
!8331 = !DILocation(line: 1094, column: 12, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8317, file: !63, line: 1094, column: 12)
!8333 = !DILocation(line: 1094, column: 16, scope: !8332)
!8334 = !DILocation(line: 1094, column: 12, scope: !8317)
!8335 = !DILocation(line: 1096, column: 7, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8332, file: !63, line: 1095, column: 5)
!8337 = !DILocation(line: 1097, column: 7, scope: !8336)
!8338 = !DILocation(line: 1098, column: 5, scope: !8336)
!8339 = !DILocation(line: 1100, column: 5, scope: !8332)
!8340 = !DILocation(line: 1102, column: 10, scope: !8250)
!8341 = !DILocation(line: 1102, column: 3, scope: !8250)
!8342 = !DILocation(line: 1107, column: 1, scope: !8250)
!8343 = distinct !DISubprogram(name: "register_proc", scope: !63, file: !63, line: 732, type: !8344, scopeLine: 733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8344 = !DISubroutineType(types: !8345)
!8345 = !{null, !407}
!8346 = !DILocalVariable(name: "temp", arg: 1, scope: !8343, file: !63, line: 732, type: !407)
!8347 = !DILocation(line: 732, column: 33, scope: !8343)
!8348 = !DILocation(line: 734, column: 9, scope: !8349)
!8349 = distinct !DILexicalBlock(scope: !8343, file: !63, line: 734, column: 7)
!8350 = !DILocation(line: 734, column: 7, scope: !8343)
!8351 = !DILocation(line: 736, column: 17, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8349, file: !63, line: 735, column: 5)
!8353 = !DILocation(line: 736, column: 15, scope: !8352)
!8354 = !DILocation(line: 740, column: 13, scope: !8355)
!8355 = distinct !DILexicalBlock(scope: !8352, file: !63, line: 740, column: 11)
!8356 = !DILocation(line: 740, column: 11, scope: !8352)
!8357 = !DILocation(line: 741, column: 9, scope: !8355)
!8358 = !DILocation(line: 742, column: 5, scope: !8352)
!8359 = !DILocation(line: 744, column: 3, scope: !8343)
!8360 = !DILocation(line: 744, column: 9, scope: !8343)
!8361 = !DILocation(line: 744, column: 15, scope: !8343)
!8362 = !DILocation(line: 746, column: 22, scope: !8363)
!8363 = distinct !DILexicalBlock(scope: !8343, file: !63, line: 746, column: 7)
!8364 = !DILocation(line: 746, column: 31, scope: !8363)
!8365 = !DILocation(line: 746, column: 9, scope: !8363)
!8366 = !DILocation(line: 746, column: 7, scope: !8343)
!8367 = !DILocation(line: 747, column: 5, scope: !8363)
!8368 = !DILocation(line: 748, column: 1, scope: !8343)
!8369 = distinct !DISubprogram(name: "move_fd", scope: !63, file: !63, line: 1023, type: !8370, scopeLine: 1024, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8370 = !DISubroutineType(types: !8371)
!8371 = !{null, !5, !5}
!8372 = !DILocalVariable(name: "oldfd", arg: 1, scope: !8369, file: !63, line: 1023, type: !5)
!8373 = !DILocation(line: 1023, column: 14, scope: !8369)
!8374 = !DILocalVariable(name: "newfd", arg: 2, scope: !8369, file: !63, line: 1023, type: !5)
!8375 = !DILocation(line: 1023, column: 25, scope: !8369)
!8376 = !DILocation(line: 1025, column: 7, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8369, file: !63, line: 1025, column: 7)
!8378 = !DILocation(line: 1025, column: 16, scope: !8377)
!8379 = !DILocation(line: 1025, column: 13, scope: !8377)
!8380 = !DILocation(line: 1025, column: 7, scope: !8369)
!8381 = !DILocation(line: 1028, column: 13, scope: !8382)
!8382 = distinct !DILexicalBlock(scope: !8377, file: !63, line: 1026, column: 5)
!8383 = !DILocation(line: 1028, column: 20, scope: !8382)
!8384 = !DILocation(line: 1028, column: 7, scope: !8382)
!8385 = !DILocation(line: 1029, column: 14, scope: !8382)
!8386 = !DILocation(line: 1029, column: 7, scope: !8382)
!8387 = !DILocation(line: 1030, column: 5, scope: !8382)
!8388 = !DILocation(line: 1031, column: 1, scope: !8369)
!8389 = distinct !DISubprogram(name: "async_safe_die", scope: !63, file: !63, line: 374, type: !8390, scopeLine: 375, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8390 = !DISubroutineType(types: !8391)
!8391 = !{null, !5, !90}
!8392 = !DILocalVariable(name: "errnum", arg: 1, scope: !8389, file: !63, line: 374, type: !5)
!8393 = !DILocation(line: 374, column: 21, scope: !8389)
!8394 = !DILocalVariable(name: "errstr", arg: 2, scope: !8389, file: !63, line: 374, type: !90)
!8395 = !DILocation(line: 374, column: 41, scope: !8389)
!8396 = !DILocalVariable(name: "__x", scope: !8397, file: !63, line: 376, type: !1393)
!8397 = distinct !DILexicalBlock(scope: !8389, file: !63, line: 376, column: 3)
!8398 = !DILocation(line: 376, column: 3, scope: !8397)
!8399 = !DILocation(line: 383, column: 7, scope: !8400)
!8400 = distinct !DILexicalBlock(scope: !8389, file: !63, line: 383, column: 7)
!8401 = !DILocation(line: 383, column: 7, scope: !8389)
!8402 = !DILocalVariable(name: "errbuf", scope: !8403, file: !63, line: 385, type: !382)
!8403 = distinct !DILexicalBlock(scope: !8400, file: !63, line: 384, column: 5)
!8404 = !DILocation(line: 385, column: 12, scope: !8403)
!8405 = !DILocalVariable(name: "p", scope: !8403, file: !63, line: 386, type: !7)
!8406 = !DILocation(line: 386, column: 13, scope: !8403)
!8407 = !DILocation(line: 386, column: 27, scope: !8403)
!8408 = !DILocation(line: 386, column: 35, scope: !8403)
!8409 = !DILocation(line: 386, column: 17, scope: !8403)
!8410 = !DILocalVariable(name: "__x", scope: !8411, file: !63, line: 387, type: !1393)
!8411 = distinct !DILexicalBlock(scope: !8403, file: !63, line: 387, column: 7)
!8412 = !DILocation(line: 387, column: 7, scope: !8411)
!8413 = !DILocalVariable(name: "__x", scope: !8414, file: !63, line: 388, type: !1393)
!8414 = distinct !DILexicalBlock(scope: !8403, file: !63, line: 388, column: 7)
!8415 = !DILocation(line: 388, column: 7, scope: !8414)
!8416 = !DILocation(line: 389, column: 5, scope: !8403)
!8417 = !DILocalVariable(name: "__x", scope: !8418, file: !63, line: 391, type: !1393)
!8418 = distinct !DILexicalBlock(scope: !8389, file: !63, line: 391, column: 3)
!8419 = !DILocation(line: 391, column: 3, scope: !8418)
!8420 = !DILocation(line: 393, column: 3, scope: !8389)
!8421 = distinct !DISubprogram(name: "proctab_hasher", scope: !63, file: !63, line: 682, type: !970, scopeLine: 683, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8422 = !DILocalVariable(name: "entry", arg: 1, scope: !8421, file: !63, line: 682, type: !85)
!8423 = !DILocation(line: 682, column: 29, scope: !8421)
!8424 = !DILocalVariable(name: "tabsize", arg: 2, scope: !8421, file: !63, line: 682, type: !52)
!8425 = !DILocation(line: 682, column: 43, scope: !8421)
!8426 = !DILocalVariable(name: "node", scope: !8421, file: !63, line: 684, type: !461)
!8427 = !DILocation(line: 684, column: 26, scope: !8421)
!8428 = !DILocation(line: 684, column: 33, scope: !8421)
!8429 = !DILocation(line: 685, column: 10, scope: !8421)
!8430 = !DILocation(line: 685, column: 16, scope: !8421)
!8431 = !DILocation(line: 685, column: 22, scope: !8421)
!8432 = !DILocation(line: 685, column: 20, scope: !8421)
!8433 = !DILocation(line: 685, column: 3, scope: !8421)
!8434 = distinct !DISubprogram(name: "proctab_comparator", scope: !63, file: !63, line: 689, type: !975, scopeLine: 690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8435 = !DILocalVariable(name: "e1", arg: 1, scope: !8434, file: !63, line: 689, type: !85)
!8436 = !DILocation(line: 689, column: 33, scope: !8434)
!8437 = !DILocalVariable(name: "e2", arg: 2, scope: !8434, file: !63, line: 689, type: !85)
!8438 = !DILocation(line: 689, column: 49, scope: !8434)
!8439 = !DILocalVariable(name: "n1", scope: !8434, file: !63, line: 691, type: !461)
!8440 = !DILocation(line: 691, column: 26, scope: !8434)
!8441 = !DILocation(line: 691, column: 31, scope: !8434)
!8442 = !DILocalVariable(name: "n2", scope: !8434, file: !63, line: 692, type: !461)
!8443 = !DILocation(line: 692, column: 26, scope: !8434)
!8444 = !DILocation(line: 692, column: 31, scope: !8434)
!8445 = !DILocation(line: 693, column: 10, scope: !8434)
!8446 = !DILocation(line: 693, column: 14, scope: !8434)
!8447 = !DILocation(line: 693, column: 21, scope: !8434)
!8448 = !DILocation(line: 693, column: 25, scope: !8434)
!8449 = !DILocation(line: 693, column: 18, scope: !8434)
!8450 = !DILocation(line: 693, column: 3, scope: !8434)
!8451 = distinct !DISubprogram(name: "reap_some", scope: !63, file: !63, line: 789, type: !235, scopeLine: 790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8452 = !DILocation(line: 791, column: 3, scope: !8451)
!8453 = !DILocation(line: 792, column: 3, scope: !8451)
!8454 = !DILocation(line: 793, column: 1, scope: !8451)
!8455 = distinct !DISubprogram(name: "cs_enter", scope: !63, file: !63, line: 633, type: !8456, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8456 = !DISubroutineType(types: !8457)
!8457 = !{null, !8458}
!8458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2943, size: 64)
!8459 = !DILocalVariable(name: "status", arg: 1, scope: !8455, file: !63, line: 633, type: !8458)
!8460 = !DILocation(line: 633, column: 29, scope: !8455)
!8461 = !DILocalVariable(name: "ret", scope: !8455, file: !63, line: 635, type: !5)
!8462 = !DILocation(line: 635, column: 7, scope: !8455)
!8463 = !DILocation(line: 635, column: 59, scope: !8455)
!8464 = !DILocation(line: 635, column: 67, scope: !8455)
!8465 = !DILocation(line: 635, column: 13, scope: !8455)
!8466 = !DILocation(line: 636, column: 19, scope: !8455)
!8467 = !DILocation(line: 636, column: 23, scope: !8455)
!8468 = !DILocation(line: 636, column: 3, scope: !8455)
!8469 = !DILocation(line: 636, column: 11, scope: !8455)
!8470 = !DILocation(line: 636, column: 17, scope: !8455)
!8471 = !DILocation(line: 637, column: 1, scope: !8455)
!8472 = distinct !DISubprogram(name: "cs_leave", scope: !63, file: !63, line: 641, type: !8473, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8473 = !DISubroutineType(types: !8474)
!8474 = !{null, !8475}
!8475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8476, size: 64)
!8476 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2943)
!8477 = !DILocalVariable(name: "status", arg: 1, scope: !8472, file: !63, line: 641, type: !8475)
!8478 = !DILocation(line: 641, column: 35, scope: !8472)
!8479 = !DILocation(line: 643, column: 7, scope: !8480)
!8480 = distinct !DILexicalBlock(scope: !8472, file: !63, line: 643, column: 7)
!8481 = !DILocation(line: 643, column: 15, scope: !8480)
!8482 = !DILocation(line: 643, column: 7, scope: !8472)
!8483 = !DILocation(line: 646, column: 38, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8480, file: !63, line: 644, column: 5)
!8485 = !DILocation(line: 646, column: 46, scope: !8484)
!8486 = !DILocation(line: 646, column: 7, scope: !8484)
!8487 = !DILocation(line: 647, column: 5, scope: !8484)
!8488 = !DILocation(line: 648, column: 1, scope: !8472)
!8489 = distinct !DISubprogram(name: "reap_exited", scope: !63, file: !63, line: 780, type: !235, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8490 = !DILocation(line: 782, column: 3, scope: !8489)
!8491 = !DILocation(line: 782, column: 14, scope: !8489)
!8492 = !DILocation(line: 782, column: 12, scope: !8489)
!8493 = !DILocation(line: 782, column: 21, scope: !8489)
!8494 = !DILocation(line: 782, column: 24, scope: !8489)
!8495 = !DILocation(line: 0, scope: !8489)
!8496 = !DILocation(line: 783, column: 5, scope: !8489)
!8497 = distinct !{!8497, !8490, !8496}
!8498 = !DILocation(line: 784, column: 1, scope: !8489)
!8499 = distinct !DISubprogram(name: "default_sort_size", scope: !63, file: !63, line: 1461, type: !8500, scopeLine: 1462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8500 = !DISubroutineType(types: !8501)
!8501 = !{!52}
!8502 = !DILocalVariable(name: "size", scope: !8499, file: !63, line: 1467, type: !52)
!8503 = !DILocation(line: 1467, column: 10, scope: !8499)
!8504 = !DILocalVariable(name: "rlimit", scope: !8499, file: !63, line: 1468, type: !3148)
!8505 = !DILocation(line: 1468, column: 17, scope: !8499)
!8506 = !DILocation(line: 1469, column: 7, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8499, file: !63, line: 1469, column: 7)
!8508 = !DILocation(line: 1469, column: 40, scope: !8507)
!8509 = !DILocation(line: 1469, column: 45, scope: !8507)
!8510 = !DILocation(line: 1469, column: 55, scope: !8507)
!8511 = !DILocation(line: 1469, column: 66, scope: !8507)
!8512 = !DILocation(line: 1469, column: 64, scope: !8507)
!8513 = !DILocation(line: 1469, column: 7, scope: !8499)
!8514 = !DILocation(line: 1470, column: 19, scope: !8507)
!8515 = !DILocation(line: 1470, column: 10, scope: !8507)
!8516 = !DILocation(line: 1470, column: 5, scope: !8507)
!8517 = !DILocation(line: 1472, column: 7, scope: !8518)
!8518 = distinct !DILexicalBlock(scope: !8499, file: !63, line: 1472, column: 7)
!8519 = !DILocation(line: 1472, column: 38, scope: !8518)
!8520 = !DILocation(line: 1472, column: 43, scope: !8518)
!8521 = !DILocation(line: 1472, column: 53, scope: !8518)
!8522 = !DILocation(line: 1472, column: 64, scope: !8518)
!8523 = !DILocation(line: 1472, column: 62, scope: !8518)
!8524 = !DILocation(line: 1472, column: 7, scope: !8499)
!8525 = !DILocation(line: 1473, column: 19, scope: !8518)
!8526 = !DILocation(line: 1473, column: 10, scope: !8518)
!8527 = !DILocation(line: 1473, column: 5, scope: !8518)
!8528 = !DILocation(line: 1478, column: 8, scope: !8499)
!8529 = !DILocation(line: 1483, column: 7, scope: !8530)
!8530 = distinct !DILexicalBlock(scope: !8499, file: !63, line: 1483, column: 7)
!8531 = !DILocation(line: 1483, column: 39, scope: !8530)
!8532 = !DILocation(line: 1483, column: 44, scope: !8530)
!8533 = !DILocation(line: 1483, column: 54, scope: !8530)
!8534 = !DILocation(line: 1483, column: 63, scope: !8530)
!8535 = !DILocation(line: 1483, column: 68, scope: !8530)
!8536 = !DILocation(line: 1483, column: 75, scope: !8530)
!8537 = !DILocation(line: 1483, column: 73, scope: !8530)
!8538 = !DILocation(line: 1483, column: 7, scope: !8499)
!8539 = !DILocation(line: 1484, column: 19, scope: !8530)
!8540 = !DILocation(line: 1484, column: 28, scope: !8530)
!8541 = !DILocation(line: 1484, column: 33, scope: !8530)
!8542 = !DILocation(line: 1484, column: 10, scope: !8530)
!8543 = !DILocation(line: 1484, column: 5, scope: !8530)
!8544 = !DILocalVariable(name: "avail", scope: !8499, file: !63, line: 1489, type: !480)
!8545 = !DILocation(line: 1489, column: 10, scope: !8499)
!8546 = !DILocation(line: 1489, column: 18, scope: !8499)
!8547 = !DILocalVariable(name: "total", scope: !8499, file: !63, line: 1490, type: !480)
!8548 = !DILocation(line: 1490, column: 10, scope: !8499)
!8549 = !DILocation(line: 1490, column: 18, scope: !8499)
!8550 = !DILocalVariable(name: "mem", scope: !8499, file: !63, line: 1491, type: !480)
!8551 = !DILocation(line: 1491, column: 10, scope: !8499)
!8552 = !DILocation(line: 1491, column: 16, scope: !8499)
!8553 = !DILocation(line: 1494, column: 7, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8499, file: !63, line: 1494, column: 7)
!8555 = !DILocation(line: 1494, column: 13, scope: !8554)
!8556 = !DILocation(line: 1494, column: 22, scope: !8554)
!8557 = !DILocation(line: 1494, column: 20, scope: !8554)
!8558 = !DILocation(line: 1494, column: 7, scope: !8499)
!8559 = !DILocation(line: 1495, column: 12, scope: !8554)
!8560 = !DILocation(line: 1495, column: 18, scope: !8554)
!8561 = !DILocation(line: 1495, column: 10, scope: !8554)
!8562 = !DILocation(line: 1495, column: 5, scope: !8554)
!8563 = !DILocation(line: 1500, column: 7, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8499, file: !63, line: 1500, column: 7)
!8565 = !DILocation(line: 1500, column: 13, scope: !8564)
!8566 = !DILocation(line: 1500, column: 11, scope: !8564)
!8567 = !DILocation(line: 1500, column: 7, scope: !8499)
!8568 = !DILocation(line: 1501, column: 12, scope: !8564)
!8569 = !DILocation(line: 1501, column: 10, scope: !8564)
!8570 = !DILocation(line: 1501, column: 5, scope: !8564)
!8571 = !DILocation(line: 1502, column: 10, scope: !8499)
!8572 = !DILocation(line: 1502, column: 3, scope: !8499)
!8573 = distinct !DISubprogram(name: "mergefiles", scope: !63, file: !63, line: 3130, type: !8574, scopeLine: 3132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8574 = !DISubroutineType(types: !8575)
!8575 = !{!52, !402, !52, !52, !389, !90}
!8576 = !DILocalVariable(name: "files", arg: 1, scope: !8573, file: !63, line: 3130, type: !402)
!8577 = !DILocation(line: 3130, column: 30, scope: !8573)
!8578 = !DILocalVariable(name: "ntemps", arg: 2, scope: !8573, file: !63, line: 3130, type: !52)
!8579 = !DILocation(line: 3130, column: 44, scope: !8573)
!8580 = !DILocalVariable(name: "nfiles", arg: 3, scope: !8573, file: !63, line: 3130, type: !52)
!8581 = !DILocation(line: 3130, column: 59, scope: !8573)
!8582 = !DILocalVariable(name: "ofp", arg: 4, scope: !8573, file: !63, line: 3131, type: !389)
!8583 = !DILocation(line: 3131, column: 19, scope: !8573)
!8584 = !DILocalVariable(name: "output_file", arg: 5, scope: !8573, file: !63, line: 3131, type: !90)
!8585 = !DILocation(line: 3131, column: 36, scope: !8573)
!8586 = !DILocalVariable(name: "fps", scope: !8573, file: !63, line: 3133, type: !584)
!8587 = !DILocation(line: 3133, column: 10, scope: !8573)
!8588 = !DILocalVariable(name: "nopened", scope: !8573, file: !63, line: 3134, type: !52)
!8589 = !DILocation(line: 3134, column: 10, scope: !8573)
!8590 = !DILocation(line: 3134, column: 38, scope: !8573)
!8591 = !DILocation(line: 3134, column: 45, scope: !8573)
!8592 = !DILocation(line: 3134, column: 20, scope: !8573)
!8593 = !DILocation(line: 3135, column: 7, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !8573, file: !63, line: 3135, column: 7)
!8595 = !DILocation(line: 3135, column: 17, scope: !8594)
!8596 = !DILocation(line: 3135, column: 15, scope: !8594)
!8597 = !DILocation(line: 3135, column: 24, scope: !8594)
!8598 = !DILocation(line: 3135, column: 27, scope: !8594)
!8599 = !DILocation(line: 3135, column: 35, scope: !8594)
!8600 = !DILocation(line: 3135, column: 7, scope: !8573)
!8601 = !DILocation(line: 3136, column: 15, scope: !8594)
!8602 = !DILocation(line: 3136, column: 33, scope: !8594)
!8603 = !DILocation(line: 3136, column: 39, scope: !8594)
!8604 = !DILocation(line: 3136, column: 48, scope: !8594)
!8605 = !DILocation(line: 3136, column: 5, scope: !8594)
!8606 = !DILocation(line: 3137, column: 13, scope: !8573)
!8607 = !DILocation(line: 3137, column: 20, scope: !8573)
!8608 = !DILocation(line: 3137, column: 28, scope: !8573)
!8609 = !DILocation(line: 3137, column: 37, scope: !8573)
!8610 = !DILocation(line: 3137, column: 42, scope: !8573)
!8611 = !DILocation(line: 3137, column: 55, scope: !8573)
!8612 = !DILocation(line: 3137, column: 3, scope: !8573)
!8613 = !DILocation(line: 3138, column: 10, scope: !8573)
!8614 = !DILocation(line: 3138, column: 3, scope: !8573)
!8615 = distinct !DISubprogram(name: "avoid_trashing_input", scope: !63, file: !63, line: 3704, type: !4129, scopeLine: 3706, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8616 = !DILocalVariable(name: "files", arg: 1, scope: !8615, file: !63, line: 3704, type: !402)
!8617 = !DILocation(line: 3704, column: 40, scope: !8615)
!8618 = !DILocalVariable(name: "ntemps", arg: 2, scope: !8615, file: !63, line: 3704, type: !52)
!8619 = !DILocation(line: 3704, column: 54, scope: !8615)
!8620 = !DILocalVariable(name: "nfiles", arg: 3, scope: !8615, file: !63, line: 3705, type: !52)
!8621 = !DILocation(line: 3705, column: 30, scope: !8615)
!8622 = !DILocalVariable(name: "outfile", arg: 4, scope: !8615, file: !63, line: 3705, type: !90)
!8623 = !DILocation(line: 3705, column: 50, scope: !8615)
!8624 = !DILocalVariable(name: "tempcopy", scope: !8615, file: !63, line: 3707, type: !407)
!8625 = !DILocation(line: 3707, column: 20, scope: !8615)
!8626 = !DILocalVariable(name: "i", scope: !8627, file: !63, line: 3709, type: !52)
!8627 = distinct !DILexicalBlock(scope: !8615, file: !63, line: 3709, column: 3)
!8628 = !DILocation(line: 3709, column: 15, scope: !8627)
!8629 = !DILocation(line: 3709, column: 19, scope: !8627)
!8630 = !DILocation(line: 3709, column: 8, scope: !8627)
!8631 = !DILocation(line: 3709, column: 27, scope: !8632)
!8632 = distinct !DILexicalBlock(scope: !8627, file: !63, line: 3709, column: 3)
!8633 = !DILocation(line: 3709, column: 31, scope: !8632)
!8634 = !DILocation(line: 3709, column: 29, scope: !8632)
!8635 = !DILocation(line: 3709, column: 3, scope: !8627)
!8636 = !DILocalVariable(name: "is_stdin", scope: !8637, file: !63, line: 3711, type: !162)
!8637 = distinct !DILexicalBlock(scope: !8632, file: !63, line: 3710, column: 5)
!8638 = !DILocation(line: 3711, column: 12, scope: !8637)
!8639 = !DILocation(line: 3711, column: 23, scope: !8637)
!8640 = !DILocalVariable(name: "same", scope: !8637, file: !63, line: 3712, type: !162)
!8641 = !DILocation(line: 3712, column: 12, scope: !8637)
!8642 = !DILocalVariable(name: "instat", scope: !8637, file: !63, line: 3713, type: !483)
!8643 = !DILocation(line: 3713, column: 19, scope: !8637)
!8644 = !DILocation(line: 3715, column: 11, scope: !8645)
!8645 = distinct !DILexicalBlock(scope: !8637, file: !63, line: 3715, column: 11)
!8646 = !DILocation(line: 3715, column: 19, scope: !8645)
!8647 = !DILocation(line: 3715, column: 22, scope: !8645)
!8648 = !DILocation(line: 3715, column: 53, scope: !8645)
!8649 = !DILocation(line: 3715, column: 57, scope: !8645)
!8650 = !DILocation(line: 3715, column: 11, scope: !8637)
!8651 = !DILocation(line: 3716, column: 14, scope: !8645)
!8652 = !DILocation(line: 3716, column: 9, scope: !8645)
!8653 = !DILocalVariable(name: "outst", scope: !8654, file: !63, line: 3719, type: !482)
!8654 = distinct !DILexicalBlock(scope: !8645, file: !63, line: 3718, column: 9)
!8655 = !DILocation(line: 3719, column: 24, scope: !8654)
!8656 = !DILocation(line: 3719, column: 32, scope: !8654)
!8657 = !DILocation(line: 3720, column: 16, scope: !8658)
!8658 = distinct !DILexicalBlock(scope: !8654, file: !63, line: 3720, column: 15)
!8659 = !DILocation(line: 3720, column: 15, scope: !8654)
!8660 = !DILocation(line: 3721, column: 13, scope: !8658)
!8661 = !DILocation(line: 3723, column: 21, scope: !8654)
!8662 = !DILocation(line: 3724, column: 23, scope: !8654)
!8663 = !DILocation(line: 3725, column: 29, scope: !8654)
!8664 = !DILocation(line: 3725, column: 35, scope: !8654)
!8665 = !DILocation(line: 3725, column: 38, scope: !8654)
!8666 = !DILocation(line: 3725, column: 23, scope: !8654)
!8667 = !DILocation(line: 3726, column: 20, scope: !8654)
!8668 = !DILocation(line: 3727, column: 19, scope: !8654)
!8669 = !DILocation(line: 3727, column: 22, scope: !8654)
!8670 = !DILocation(line: 0, scope: !8654)
!8671 = !DILocation(line: 3723, column: 16, scope: !8654)
!8672 = !DILocation(line: 3730, column: 11, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8637, file: !63, line: 3730, column: 11)
!8674 = !DILocation(line: 3730, column: 11, scope: !8637)
!8675 = !DILocation(line: 3732, column: 17, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8677, file: !63, line: 3732, column: 15)
!8677 = distinct !DILexicalBlock(scope: !8673, file: !63, line: 3731, column: 9)
!8678 = !DILocation(line: 3732, column: 15, scope: !8677)
!8679 = !DILocalVariable(name: "tftp", scope: !8680, file: !63, line: 3734, type: !389)
!8680 = distinct !DILexicalBlock(scope: !8676, file: !63, line: 3733, column: 13)
!8681 = !DILocation(line: 3734, column: 21, scope: !8680)
!8682 = !DILocation(line: 3735, column: 26, scope: !8680)
!8683 = !DILocation(line: 3735, column: 24, scope: !8680)
!8684 = !DILocation(line: 3736, column: 28, scope: !8680)
!8685 = !DILocation(line: 3736, column: 34, scope: !8680)
!8686 = !DILocation(line: 3736, column: 44, scope: !8680)
!8687 = !DILocation(line: 3736, column: 50, scope: !8680)
!8688 = !DILocation(line: 3736, column: 60, scope: !8680)
!8689 = !DILocation(line: 3736, column: 15, scope: !8680)
!8690 = !DILocation(line: 3737, column: 13, scope: !8680)
!8691 = !DILocation(line: 3739, column: 27, scope: !8677)
!8692 = !DILocation(line: 3739, column: 37, scope: !8677)
!8693 = !DILocation(line: 3739, column: 11, scope: !8677)
!8694 = !DILocation(line: 3739, column: 17, scope: !8677)
!8695 = !DILocation(line: 3739, column: 20, scope: !8677)
!8696 = !DILocation(line: 3739, column: 25, scope: !8677)
!8697 = !DILocation(line: 3740, column: 27, scope: !8677)
!8698 = !DILocation(line: 3740, column: 11, scope: !8677)
!8699 = !DILocation(line: 3740, column: 17, scope: !8677)
!8700 = !DILocation(line: 3740, column: 20, scope: !8677)
!8701 = !DILocation(line: 3740, column: 25, scope: !8677)
!8702 = !DILocation(line: 3741, column: 9, scope: !8677)
!8703 = !DILocation(line: 3742, column: 5, scope: !8637)
!8704 = !DILocation(line: 3709, column: 40, scope: !8632)
!8705 = !DILocation(line: 3709, column: 3, scope: !8632)
!8706 = distinct !{!8706, !8635, !8707}
!8707 = !DILocation(line: 3742, column: 5, scope: !8627)
!8708 = !DILocation(line: 3743, column: 1, scope: !8615)
!8709 = distinct !DISubprogram(name: "open_input_files", scope: !63, file: !63, line: 2904, type: !8710, scopeLine: 2905, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8710 = !DISubroutineType(types: !8711)
!8711 = !{!52, !402, !52, !8712}
!8712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !584, size: 64)
!8713 = !DILocalVariable(name: "files", arg: 1, scope: !8709, file: !63, line: 2904, type: !402)
!8714 = !DILocation(line: 2904, column: 36, scope: !8709)
!8715 = !DILocalVariable(name: "nfiles", arg: 2, scope: !8709, file: !63, line: 2904, type: !52)
!8716 = !DILocation(line: 2904, column: 50, scope: !8709)
!8717 = !DILocalVariable(name: "pfps", arg: 3, scope: !8709, file: !63, line: 2904, type: !8712)
!8718 = !DILocation(line: 2904, column: 66, scope: !8709)
!8719 = !DILocalVariable(name: "fps", scope: !8709, file: !63, line: 2906, type: !584)
!8720 = !DILocation(line: 2906, column: 10, scope: !8709)
!8721 = !DILocation(line: 2906, column: 34, scope: !8709)
!8722 = !DILocation(line: 2906, column: 24, scope: !8709)
!8723 = !DILocation(line: 2906, column: 17, scope: !8709)
!8724 = !DILocation(line: 2906, column: 22, scope: !8709)
!8725 = !DILocalVariable(name: "i", scope: !8709, file: !63, line: 2907, type: !5)
!8726 = !DILocation(line: 2907, column: 7, scope: !8709)
!8727 = !DILocation(line: 2910, column: 10, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8709, file: !63, line: 2910, column: 3)
!8729 = !DILocation(line: 2910, column: 8, scope: !8728)
!8730 = !DILocation(line: 2910, column: 15, scope: !8731)
!8731 = distinct !DILexicalBlock(scope: !8728, file: !63, line: 2910, column: 3)
!8732 = !DILocation(line: 2910, column: 19, scope: !8731)
!8733 = !DILocation(line: 2910, column: 17, scope: !8731)
!8734 = !DILocation(line: 2910, column: 3, scope: !8728)
!8735 = !DILocation(line: 2912, column: 17, scope: !8736)
!8736 = distinct !DILexicalBlock(scope: !8731, file: !63, line: 2911, column: 5)
!8737 = !DILocation(line: 2912, column: 23, scope: !8736)
!8738 = !DILocation(line: 2912, column: 26, scope: !8736)
!8739 = !DILocation(line: 2912, column: 31, scope: !8736)
!8740 = !DILocation(line: 2912, column: 34, scope: !8736)
!8741 = !DILocation(line: 2912, column: 40, scope: !8736)
!8742 = !DILocation(line: 2912, column: 43, scope: !8736)
!8743 = !DILocation(line: 2912, column: 49, scope: !8736)
!8744 = !DILocation(line: 2912, column: 55, scope: !8736)
!8745 = !DILocation(line: 2913, column: 30, scope: !8736)
!8746 = !DILocation(line: 2913, column: 36, scope: !8736)
!8747 = !DILocation(line: 2913, column: 39, scope: !8736)
!8748 = !DILocation(line: 2913, column: 19, scope: !8736)
!8749 = !DILocation(line: 2914, column: 32, scope: !8736)
!8750 = !DILocation(line: 2914, column: 38, scope: !8736)
!8751 = !DILocation(line: 2914, column: 41, scope: !8736)
!8752 = !DILocation(line: 2914, column: 19, scope: !8736)
!8753 = !DILocation(line: 2912, column: 7, scope: !8736)
!8754 = !DILocation(line: 2912, column: 11, scope: !8736)
!8755 = !DILocation(line: 2912, column: 14, scope: !8736)
!8756 = !DILocation(line: 2915, column: 12, scope: !8757)
!8757 = distinct !DILexicalBlock(scope: !8736, file: !63, line: 2915, column: 11)
!8758 = !DILocation(line: 2915, column: 16, scope: !8757)
!8759 = !DILocation(line: 2915, column: 11, scope: !8736)
!8760 = !DILocation(line: 2916, column: 9, scope: !8757)
!8761 = !DILocation(line: 2917, column: 5, scope: !8736)
!8762 = !DILocation(line: 2910, column: 28, scope: !8731)
!8763 = !DILocation(line: 2910, column: 3, scope: !8731)
!8764 = distinct !{!8764, !8734, !8765}
!8765 = !DILocation(line: 2917, column: 5, scope: !8728)
!8766 = !DILocation(line: 2919, column: 10, scope: !8709)
!8767 = !DILocation(line: 2919, column: 3, scope: !8709)
!8768 = distinct !DISubprogram(name: "stream_open", scope: !63, file: !63, line: 946, type: !3383, scopeLine: 947, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8769 = !DILocalVariable(name: "file", arg: 1, scope: !8768, file: !63, line: 946, type: !90)
!8770 = !DILocation(line: 946, column: 26, scope: !8768)
!8771 = !DILocalVariable(name: "how", arg: 2, scope: !8768, file: !63, line: 946, type: !90)
!8772 = !DILocation(line: 946, column: 44, scope: !8768)
!8773 = !DILocalVariable(name: "fp", scope: !8768, file: !63, line: 948, type: !389)
!8774 = !DILocation(line: 948, column: 9, scope: !8768)
!8775 = !DILocation(line: 950, column: 8, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8768, file: !63, line: 950, column: 7)
!8777 = !DILocation(line: 950, column: 7, scope: !8776)
!8778 = !DILocation(line: 950, column: 12, scope: !8776)
!8779 = !DILocation(line: 950, column: 7, scope: !8768)
!8780 = !DILocation(line: 952, column: 11, scope: !8781)
!8781 = distinct !DILexicalBlock(scope: !8782, file: !63, line: 952, column: 11)
!8782 = distinct !DILexicalBlock(scope: !8776, file: !63, line: 951, column: 5)
!8783 = !DILocation(line: 952, column: 11, scope: !8782)
!8784 = !DILocation(line: 954, column: 27, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8781, file: !63, line: 953, column: 9)
!8786 = !DILocation(line: 955, column: 16, scope: !8785)
!8787 = !DILocation(line: 955, column: 14, scope: !8785)
!8788 = !DILocation(line: 956, column: 9, scope: !8785)
!8789 = !DILocalVariable(name: "fd", scope: !8790, file: !63, line: 959, type: !5)
!8790 = distinct !DILexicalBlock(scope: !8781, file: !63, line: 958, column: 9)
!8791 = !DILocation(line: 959, column: 15, scope: !8790)
!8792 = !DILocation(line: 959, column: 26, scope: !8790)
!8793 = !DILocation(line: 959, column: 20, scope: !8790)
!8794 = !DILocation(line: 960, column: 16, scope: !8790)
!8795 = !DILocation(line: 960, column: 19, scope: !8790)
!8796 = !DILocation(line: 960, column: 40, scope: !8790)
!8797 = !DILocation(line: 960, column: 44, scope: !8790)
!8798 = !DILocation(line: 960, column: 32, scope: !8790)
!8799 = !DILocation(line: 960, column: 14, scope: !8790)
!8800 = !DILocation(line: 962, column: 16, scope: !8782)
!8801 = !DILocation(line: 962, column: 7, scope: !8782)
!8802 = !DILocation(line: 963, column: 5, scope: !8782)
!8803 = !DILocation(line: 964, column: 13, scope: !8804)
!8804 = distinct !DILexicalBlock(scope: !8776, file: !63, line: 964, column: 12)
!8805 = !DILocation(line: 964, column: 12, scope: !8804)
!8806 = !DILocation(line: 964, column: 17, scope: !8804)
!8807 = !DILocation(line: 964, column: 12, scope: !8776)
!8808 = !DILocation(line: 966, column: 11, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !8810, file: !63, line: 966, column: 11)
!8810 = distinct !DILexicalBlock(scope: !8804, file: !63, line: 965, column: 5)
!8811 = !DILocation(line: 966, column: 16, scope: !8809)
!8812 = !DILocation(line: 966, column: 19, scope: !8809)
!8813 = !DILocation(line: 966, column: 48, scope: !8809)
!8814 = !DILocation(line: 966, column: 11, scope: !8810)
!8815 = !DILocalVariable(name: "ftruncate_errno", scope: !8816, file: !63, line: 968, type: !5)
!8816 = distinct !DILexicalBlock(scope: !8809, file: !63, line: 967, column: 9)
!8817 = !DILocation(line: 968, column: 15, scope: !8816)
!8818 = !DILocation(line: 968, column: 33, scope: !8816)
!8819 = !DILocalVariable(name: "outst", scope: !8816, file: !63, line: 969, type: !482)
!8820 = !DILocation(line: 969, column: 24, scope: !8816)
!8821 = !DILocation(line: 969, column: 32, scope: !8816)
!8822 = !DILocation(line: 970, column: 16, scope: !8823)
!8823 = distinct !DILexicalBlock(scope: !8816, file: !63, line: 970, column: 15)
!8824 = !DILocation(line: 970, column: 22, scope: !8823)
!8825 = !DILocation(line: 970, column: 25, scope: !8823)
!8826 = !DILocation(line: 970, column: 50, scope: !8823)
!8827 = !DILocation(line: 970, column: 53, scope: !8823)
!8828 = !DILocation(line: 970, column: 15, scope: !8816)
!8829 = !DILocation(line: 971, column: 13, scope: !8823)
!8830 = !DILocation(line: 973, column: 9, scope: !8816)
!8831 = !DILocation(line: 974, column: 12, scope: !8810)
!8832 = !DILocation(line: 974, column: 10, scope: !8810)
!8833 = !DILocation(line: 975, column: 5, scope: !8810)
!8834 = !DILocation(line: 977, column: 5, scope: !8804)
!8835 = !DILocation(line: 979, column: 10, scope: !8768)
!8836 = !DILocation(line: 979, column: 3, scope: !8768)
!8837 = distinct !DISubprogram(name: "mergefps", scope: !63, file: !63, line: 2931, type: !8838, scopeLine: 2933, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!8838 = !DISubroutineType(types: !8839)
!8839 = !{null, !402, !52, !52, !389, !90, !584}
!8840 = !DILocalVariable(name: "files", arg: 1, scope: !8837, file: !63, line: 2931, type: !402)
!8841 = !DILocation(line: 2931, column: 28, scope: !8837)
!8842 = !DILocalVariable(name: "ntemps", arg: 2, scope: !8837, file: !63, line: 2931, type: !52)
!8843 = !DILocation(line: 2931, column: 42, scope: !8837)
!8844 = !DILocalVariable(name: "nfiles", arg: 3, scope: !8837, file: !63, line: 2931, type: !52)
!8845 = !DILocation(line: 2931, column: 57, scope: !8837)
!8846 = !DILocalVariable(name: "ofp", arg: 4, scope: !8837, file: !63, line: 2932, type: !389)
!8847 = !DILocation(line: 2932, column: 17, scope: !8837)
!8848 = !DILocalVariable(name: "output_file", arg: 5, scope: !8837, file: !63, line: 2932, type: !90)
!8849 = !DILocation(line: 2932, column: 34, scope: !8837)
!8850 = !DILocalVariable(name: "fps", arg: 6, scope: !8837, file: !63, line: 2932, type: !584)
!8851 = !DILocation(line: 2932, column: 54, scope: !8837)
!8852 = !DILocalVariable(name: "buffer", scope: !8837, file: !63, line: 2934, type: !607)
!8853 = !DILocation(line: 2934, column: 18, scope: !8837)
!8854 = !DILocation(line: 2934, column: 37, scope: !8837)
!8855 = !DILocation(line: 2934, column: 27, scope: !8837)
!8856 = !DILocalVariable(name: "saved", scope: !8837, file: !63, line: 2936, type: !541)
!8857 = !DILocation(line: 2936, column: 15, scope: !8837)
!8858 = !DILocalVariable(name: "savedline", scope: !8837, file: !63, line: 2937, type: !539)
!8859 = !DILocation(line: 2937, column: 22, scope: !8837)
!8860 = !DILocalVariable(name: "savealloc", scope: !8837, file: !63, line: 2939, type: !52)
!8861 = !DILocation(line: 2939, column: 10, scope: !8837)
!8862 = !DILocalVariable(name: "cur", scope: !8837, file: !63, line: 2940, type: !617)
!8863 = !DILocation(line: 2940, column: 23, scope: !8837)
!8864 = !DILocation(line: 2940, column: 39, scope: !8837)
!8865 = !DILocation(line: 2940, column: 29, scope: !8837)
!8866 = !DILocalVariable(name: "base", scope: !8837, file: !63, line: 2942, type: !617)
!8867 = !DILocation(line: 2942, column: 23, scope: !8837)
!8868 = !DILocation(line: 2942, column: 40, scope: !8837)
!8869 = !DILocation(line: 2942, column: 30, scope: !8837)
!8870 = !DILocalVariable(name: "ord", scope: !8837, file: !63, line: 2944, type: !618)
!8871 = !DILocation(line: 2944, column: 11, scope: !8837)
!8872 = !DILocation(line: 2944, column: 27, scope: !8837)
!8873 = !DILocation(line: 2944, column: 17, scope: !8837)
!8874 = !DILocalVariable(name: "i", scope: !8837, file: !63, line: 2948, type: !52)
!8875 = !DILocation(line: 2948, column: 10, scope: !8837)
!8876 = !DILocalVariable(name: "j", scope: !8837, file: !63, line: 2949, type: !52)
!8877 = !DILocation(line: 2949, column: 10, scope: !8837)
!8878 = !DILocalVariable(name: "t", scope: !8837, file: !63, line: 2950, type: !52)
!8879 = !DILocation(line: 2950, column: 10, scope: !8837)
!8880 = !DILocalVariable(name: "key", scope: !8837, file: !63, line: 2951, type: !522)
!8881 = !DILocation(line: 2951, column: 26, scope: !8837)
!8882 = !DILocation(line: 2951, column: 32, scope: !8837)
!8883 = !DILocation(line: 2952, column: 9, scope: !8837)
!8884 = !DILocation(line: 2952, column: 14, scope: !8837)
!8885 = !DILocation(line: 2955, column: 10, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !8837, file: !63, line: 2955, column: 3)
!8887 = !DILocation(line: 2955, column: 8, scope: !8886)
!8888 = !DILocation(line: 2955, column: 15, scope: !8889)
!8889 = distinct !DILexicalBlock(scope: !8886, file: !63, line: 2955, column: 3)
!8890 = !DILocation(line: 2955, column: 19, scope: !8889)
!8891 = !DILocation(line: 2955, column: 17, scope: !8889)
!8892 = !DILocation(line: 2955, column: 3, scope: !8886)
!8893 = !DILocation(line: 2957, column: 17, scope: !8894)
!8894 = distinct !DILexicalBlock(scope: !8889, file: !63, line: 2956, column: 5)
!8895 = !DILocation(line: 2957, column: 24, scope: !8894)
!8896 = !DILocation(line: 2958, column: 16, scope: !8894)
!8897 = !DILocation(line: 2957, column: 7, scope: !8894)
!8898 = !DILocation(line: 2959, column: 21, scope: !8899)
!8899 = distinct !DILexicalBlock(scope: !8894, file: !63, line: 2959, column: 11)
!8900 = !DILocation(line: 2959, column: 28, scope: !8899)
!8901 = !DILocation(line: 2959, column: 32, scope: !8899)
!8902 = !DILocation(line: 2959, column: 36, scope: !8899)
!8903 = !DILocation(line: 2959, column: 40, scope: !8899)
!8904 = !DILocation(line: 2959, column: 46, scope: !8899)
!8905 = !DILocation(line: 2959, column: 49, scope: !8899)
!8906 = !DILocation(line: 2959, column: 11, scope: !8899)
!8907 = !DILocation(line: 2959, column: 11, scope: !8894)
!8908 = !DILocalVariable(name: "linelim", scope: !8909, file: !63, line: 2961, type: !539)
!8909 = distinct !DILexicalBlock(scope: !8899, file: !63, line: 2960, column: 9)
!8910 = !DILocation(line: 2961, column: 30, scope: !8909)
!8911 = !DILocation(line: 2961, column: 57, scope: !8909)
!8912 = !DILocation(line: 2961, column: 64, scope: !8909)
!8913 = !DILocation(line: 2961, column: 40, scope: !8909)
!8914 = !DILocation(line: 2962, column: 20, scope: !8909)
!8915 = !DILocation(line: 2962, column: 28, scope: !8909)
!8916 = !DILocation(line: 2962, column: 11, scope: !8909)
!8917 = !DILocation(line: 2962, column: 15, scope: !8909)
!8918 = !DILocation(line: 2962, column: 18, scope: !8909)
!8919 = !DILocation(line: 2963, column: 21, scope: !8909)
!8920 = !DILocation(line: 2963, column: 31, scope: !8909)
!8921 = !DILocation(line: 2963, column: 38, scope: !8909)
!8922 = !DILocation(line: 2963, column: 41, scope: !8909)
!8923 = !DILocation(line: 2963, column: 29, scope: !8909)
!8924 = !DILocation(line: 2963, column: 11, scope: !8909)
!8925 = !DILocation(line: 2963, column: 16, scope: !8909)
!8926 = !DILocation(line: 2963, column: 19, scope: !8909)
!8927 = !DILocation(line: 2964, column: 12, scope: !8909)
!8928 = !DILocation(line: 2965, column: 9, scope: !8909)
!8929 = !DILocation(line: 2969, column: 20, scope: !8930)
!8930 = distinct !DILexicalBlock(scope: !8899, file: !63, line: 2967, column: 9)
!8931 = !DILocation(line: 2969, column: 24, scope: !8930)
!8932 = !DILocation(line: 2969, column: 28, scope: !8930)
!8933 = !DILocation(line: 2969, column: 34, scope: !8930)
!8934 = !DILocation(line: 2969, column: 37, scope: !8930)
!8935 = !DILocation(line: 2969, column: 11, scope: !8930)
!8936 = !DILocation(line: 2970, column: 15, scope: !8937)
!8937 = distinct !DILexicalBlock(scope: !8930, file: !63, line: 2970, column: 15)
!8938 = !DILocation(line: 2970, column: 19, scope: !8937)
!8939 = !DILocation(line: 2970, column: 17, scope: !8937)
!8940 = !DILocation(line: 2970, column: 15, scope: !8930)
!8941 = !DILocation(line: 2972, column: 21, scope: !8942)
!8942 = distinct !DILexicalBlock(scope: !8937, file: !63, line: 2971, column: 13)
!8943 = !DILocation(line: 2973, column: 24, scope: !8942)
!8944 = !DILocation(line: 2973, column: 30, scope: !8942)
!8945 = !DILocation(line: 2973, column: 33, scope: !8942)
!8946 = !DILocation(line: 2973, column: 15, scope: !8942)
!8947 = !DILocation(line: 2974, column: 13, scope: !8942)
!8948 = !DILocation(line: 2975, column: 17, scope: !8930)
!8949 = !DILocation(line: 2975, column: 24, scope: !8930)
!8950 = !DILocation(line: 2975, column: 27, scope: !8930)
!8951 = !DILocation(line: 2975, column: 11, scope: !8930)
!8952 = !DILocation(line: 2976, column: 11, scope: !8930)
!8953 = !DILocation(line: 2977, column: 20, scope: !8954)
!8954 = distinct !DILexicalBlock(scope: !8930, file: !63, line: 2977, column: 11)
!8955 = !DILocation(line: 2977, column: 18, scope: !8954)
!8956 = !DILocation(line: 2977, column: 16, scope: !8954)
!8957 = !DILocation(line: 2977, column: 23, scope: !8958)
!8958 = distinct !DILexicalBlock(scope: !8954, file: !63, line: 2977, column: 11)
!8959 = !DILocation(line: 2977, column: 27, scope: !8958)
!8960 = !DILocation(line: 2977, column: 25, scope: !8958)
!8961 = !DILocation(line: 2977, column: 11, scope: !8954)
!8962 = !DILocation(line: 2979, column: 15, scope: !8963)
!8963 = distinct !DILexicalBlock(scope: !8958, file: !63, line: 2978, column: 13)
!8964 = !DILocation(line: 2979, column: 21, scope: !8963)
!8965 = !DILocation(line: 2979, column: 26, scope: !8963)
!8966 = !DILocation(line: 2979, column: 32, scope: !8963)
!8967 = !DILocation(line: 2979, column: 34, scope: !8963)
!8968 = !DILocation(line: 2980, column: 24, scope: !8963)
!8969 = !DILocation(line: 2980, column: 28, scope: !8963)
!8970 = !DILocation(line: 2980, column: 30, scope: !8963)
!8971 = !DILocation(line: 2980, column: 15, scope: !8963)
!8972 = !DILocation(line: 2980, column: 19, scope: !8963)
!8973 = !DILocation(line: 2980, column: 22, scope: !8963)
!8974 = !DILocation(line: 2981, column: 13, scope: !8963)
!8975 = !DILocation(line: 2977, column: 35, scope: !8958)
!8976 = !DILocation(line: 2977, column: 11, scope: !8958)
!8977 = distinct !{!8977, !8961, !8978}
!8978 = !DILocation(line: 2981, column: 13, scope: !8954)
!8979 = !DILocation(line: 2955, column: 3, scope: !8889)
!8980 = distinct !{!8980, !8892, !8981}
!8981 = !DILocation(line: 2983, column: 5, scope: !8886)
!8982 = !DILocation(line: 2988, column: 10, scope: !8983)
!8983 = distinct !DILexicalBlock(scope: !8837, file: !63, line: 2988, column: 3)
!8984 = !DILocation(line: 2988, column: 8, scope: !8983)
!8985 = !DILocation(line: 2988, column: 15, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8983, file: !63, line: 2988, column: 3)
!8987 = !DILocation(line: 2988, column: 19, scope: !8986)
!8988 = !DILocation(line: 2988, column: 17, scope: !8986)
!8989 = !DILocation(line: 2988, column: 3, scope: !8983)
!8990 = !DILocation(line: 2989, column: 14, scope: !8986)
!8991 = !DILocation(line: 2989, column: 5, scope: !8986)
!8992 = !DILocation(line: 2989, column: 9, scope: !8986)
!8993 = !DILocation(line: 2989, column: 12, scope: !8986)
!8994 = !DILocation(line: 2988, column: 27, scope: !8986)
!8995 = !DILocation(line: 2988, column: 3, scope: !8986)
!8996 = distinct !{!8996, !8989, !8997}
!8997 = !DILocation(line: 2989, column: 14, scope: !8983)
!8998 = !DILocation(line: 2990, column: 10, scope: !8999)
!8999 = distinct !DILexicalBlock(scope: !8837, file: !63, line: 2990, column: 3)
!9000 = !DILocation(line: 2990, column: 8, scope: !8999)
!9001 = !DILocation(line: 2990, column: 15, scope: !9002)
!9002 = distinct !DILexicalBlock(scope: !8999, file: !63, line: 2990, column: 3)
!9003 = !DILocation(line: 2990, column: 19, scope: !9002)
!9004 = !DILocation(line: 2990, column: 17, scope: !9002)
!9005 = !DILocation(line: 2990, column: 3, scope: !8999)
!9006 = !DILocation(line: 2991, column: 22, scope: !9007)
!9007 = distinct !DILexicalBlock(scope: !9002, file: !63, line: 2991, column: 9)
!9008 = !DILocation(line: 2991, column: 26, scope: !9007)
!9009 = !DILocation(line: 2991, column: 30, scope: !9007)
!9010 = !DILocation(line: 2991, column: 32, scope: !9007)
!9011 = !DILocation(line: 2991, column: 39, scope: !9007)
!9012 = !DILocation(line: 2991, column: 43, scope: !9007)
!9013 = !DILocation(line: 2991, column: 47, scope: !9007)
!9014 = !DILocation(line: 2991, column: 13, scope: !9007)
!9015 = !DILocation(line: 2991, column: 11, scope: !9007)
!9016 = !DILocation(line: 2991, column: 9, scope: !9002)
!9017 = !DILocation(line: 2992, column: 11, scope: !9007)
!9018 = !DILocation(line: 2992, column: 15, scope: !9007)
!9019 = !DILocation(line: 2992, column: 17, scope: !9007)
!9020 = !DILocation(line: 2992, column: 9, scope: !9007)
!9021 = !DILocation(line: 2992, column: 36, scope: !9007)
!9022 = !DILocation(line: 2992, column: 40, scope: !9007)
!9023 = !DILocation(line: 2992, column: 23, scope: !9007)
!9024 = !DILocation(line: 2992, column: 27, scope: !9007)
!9025 = !DILocation(line: 2992, column: 29, scope: !9007)
!9026 = !DILocation(line: 2992, column: 34, scope: !9007)
!9027 = !DILocation(line: 2992, column: 53, scope: !9007)
!9028 = !DILocation(line: 2992, column: 44, scope: !9007)
!9029 = !DILocation(line: 2992, column: 48, scope: !9007)
!9030 = !DILocation(line: 2992, column: 51, scope: !9007)
!9031 = !DILocation(line: 2992, column: 58, scope: !9007)
!9032 = !DILocation(line: 2992, column: 7, scope: !9007)
!9033 = !DILocation(line: 2991, column: 50, scope: !9007)
!9034 = !DILocation(line: 2990, column: 27, scope: !9002)
!9035 = !DILocation(line: 2990, column: 3, scope: !9002)
!9036 = distinct !{!9036, !9005, !9037}
!9037 = !DILocation(line: 2992, column: 60, scope: !8999)
!9038 = !DILocation(line: 2995, column: 3, scope: !8837)
!9039 = !DILocation(line: 2995, column: 10, scope: !8837)
!9040 = !DILocalVariable(name: "smallest", scope: !9041, file: !63, line: 2997, type: !539)
!9041 = distinct !DILexicalBlock(scope: !8837, file: !63, line: 2996, column: 5)
!9042 = !DILocation(line: 2997, column: 26, scope: !9041)
!9043 = !DILocation(line: 2997, column: 37, scope: !9041)
!9044 = !DILocation(line: 2997, column: 41, scope: !9041)
!9045 = !DILocation(line: 3001, column: 11, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !9041, file: !63, line: 3001, column: 11)
!9047 = !DILocation(line: 3001, column: 11, scope: !9041)
!9048 = !DILocation(line: 3003, column: 15, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9050, file: !63, line: 3003, column: 15)
!9050 = distinct !DILexicalBlock(scope: !9046, file: !63, line: 3002, column: 9)
!9051 = !DILocation(line: 3003, column: 25, scope: !9049)
!9052 = !DILocation(line: 3003, column: 37, scope: !9049)
!9053 = !DILocation(line: 3003, column: 48, scope: !9049)
!9054 = !DILocation(line: 3003, column: 28, scope: !9049)
!9055 = !DILocation(line: 3003, column: 15, scope: !9050)
!9056 = !DILocation(line: 3005, column: 25, scope: !9057)
!9057 = distinct !DILexicalBlock(scope: !9049, file: !63, line: 3004, column: 13)
!9058 = !DILocation(line: 3006, column: 35, scope: !9057)
!9059 = !DILocation(line: 3006, column: 40, scope: !9057)
!9060 = !DILocation(line: 3006, column: 15, scope: !9057)
!9061 = !DILocation(line: 3007, column: 13, scope: !9057)
!9062 = !DILocation(line: 3008, column: 16, scope: !9063)
!9063 = distinct !DILexicalBlock(scope: !9050, file: !63, line: 3008, column: 15)
!9064 = !DILocation(line: 3008, column: 15, scope: !9050)
!9065 = !DILocation(line: 3010, column: 25, scope: !9066)
!9066 = distinct !DILexicalBlock(scope: !9063, file: !63, line: 3009, column: 13)
!9067 = !DILocation(line: 3011, column: 19, scope: !9068)
!9068 = distinct !DILexicalBlock(scope: !9066, file: !63, line: 3011, column: 19)
!9069 = !DILocation(line: 3011, column: 31, scope: !9068)
!9070 = !DILocation(line: 3011, column: 41, scope: !9068)
!9071 = !DILocation(line: 3011, column: 29, scope: !9068)
!9072 = !DILocation(line: 3011, column: 19, scope: !9066)
!9073 = !DILocation(line: 3013, column: 19, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !9068, file: !63, line: 3012, column: 17)
!9075 = !DILocation(line: 3014, column: 27, scope: !9076)
!9076 = distinct !DILexicalBlock(scope: !9074, file: !63, line: 3014, column: 25)
!9077 = !DILocation(line: 3014, column: 25, scope: !9074)
!9078 = !DILocation(line: 3016, column: 37, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9076, file: !63, line: 3015, column: 23)
!9080 = !DILocation(line: 3016, column: 47, scope: !9079)
!9081 = !DILocation(line: 3016, column: 35, scope: !9079)
!9082 = !DILocation(line: 3017, column: 25, scope: !9079)
!9083 = !DILocation(line: 3019, column: 37, scope: !9074)
!9084 = !DILocation(line: 3019, column: 45, scope: !9074)
!9085 = !DILocation(line: 3019, column: 55, scope: !9074)
!9086 = !DILocation(line: 3019, column: 43, scope: !9074)
!9087 = distinct !{!9087, !9073, !9088}
!9088 = !DILocation(line: 3019, column: 61, scope: !9074)
!9089 = !DILocation(line: 3021, column: 31, scope: !9074)
!9090 = !DILocation(line: 3021, column: 19, scope: !9074)
!9091 = !DILocation(line: 3022, column: 41, scope: !9074)
!9092 = !DILocation(line: 3022, column: 32, scope: !9074)
!9093 = !DILocation(line: 3022, column: 25, scope: !9074)
!9094 = !DILocation(line: 3022, column: 30, scope: !9074)
!9095 = !DILocation(line: 3023, column: 17, scope: !9074)
!9096 = !DILocation(line: 3024, column: 30, scope: !9066)
!9097 = !DILocation(line: 3024, column: 40, scope: !9066)
!9098 = !DILocation(line: 3024, column: 21, scope: !9066)
!9099 = !DILocation(line: 3024, column: 28, scope: !9066)
!9100 = !DILocation(line: 3025, column: 29, scope: !9066)
!9101 = !DILocation(line: 3025, column: 35, scope: !9066)
!9102 = !DILocation(line: 3025, column: 45, scope: !9066)
!9103 = !DILocation(line: 3025, column: 57, scope: !9066)
!9104 = !DILocation(line: 3025, column: 15, scope: !9066)
!9105 = !DILocation(line: 3026, column: 19, scope: !9106)
!9106 = distinct !DILexicalBlock(scope: !9066, file: !63, line: 3026, column: 19)
!9107 = !DILocation(line: 3026, column: 19, scope: !9066)
!9108 = !DILocation(line: 3029, column: 27, scope: !9109)
!9109 = distinct !DILexicalBlock(scope: !9106, file: !63, line: 3027, column: 17)
!9110 = !DILocation(line: 3029, column: 35, scope: !9109)
!9111 = !DILocation(line: 3029, column: 45, scope: !9109)
!9112 = !DILocation(line: 3029, column: 54, scope: !9109)
!9113 = !DILocation(line: 3029, column: 64, scope: !9109)
!9114 = !DILocation(line: 3029, column: 52, scope: !9109)
!9115 = !DILocation(line: 3029, column: 32, scope: !9109)
!9116 = !DILocation(line: 3028, column: 25, scope: !9109)
!9117 = !DILocation(line: 3028, column: 32, scope: !9109)
!9118 = !DILocation(line: 3031, column: 27, scope: !9109)
!9119 = !DILocation(line: 3031, column: 35, scope: !9109)
!9120 = !DILocation(line: 3031, column: 45, scope: !9109)
!9121 = !DILocation(line: 3031, column: 54, scope: !9109)
!9122 = !DILocation(line: 3031, column: 64, scope: !9109)
!9123 = !DILocation(line: 3031, column: 52, scope: !9109)
!9124 = !DILocation(line: 3031, column: 32, scope: !9109)
!9125 = !DILocation(line: 3030, column: 25, scope: !9109)
!9126 = !DILocation(line: 3030, column: 32, scope: !9109)
!9127 = !DILocation(line: 3032, column: 17, scope: !9109)
!9128 = !DILocation(line: 3033, column: 13, scope: !9066)
!9129 = !DILocation(line: 3034, column: 9, scope: !9050)
!9130 = !DILocation(line: 3036, column: 21, scope: !9046)
!9131 = !DILocation(line: 3036, column: 31, scope: !9046)
!9132 = !DILocation(line: 3036, column: 36, scope: !9046)
!9133 = !DILocation(line: 3036, column: 9, scope: !9046)
!9134 = !DILocation(line: 3039, column: 11, scope: !9135)
!9135 = distinct !DILexicalBlock(scope: !9041, file: !63, line: 3039, column: 11)
!9136 = !DILocation(line: 3039, column: 16, scope: !9135)
!9137 = !DILocation(line: 3039, column: 26, scope: !9135)
!9138 = !DILocation(line: 3039, column: 24, scope: !9135)
!9139 = !DILocation(line: 3039, column: 11, scope: !9041)
!9140 = !DILocation(line: 3040, column: 23, scope: !9135)
!9141 = !DILocation(line: 3040, column: 32, scope: !9135)
!9142 = !DILocation(line: 3040, column: 9, scope: !9135)
!9143 = !DILocation(line: 3040, column: 13, scope: !9135)
!9144 = !DILocation(line: 3040, column: 21, scope: !9135)
!9145 = !DILocation(line: 3043, column: 25, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !9147, file: !63, line: 3043, column: 15)
!9147 = distinct !DILexicalBlock(scope: !9135, file: !63, line: 3042, column: 9)
!9148 = !DILocation(line: 3043, column: 32, scope: !9146)
!9149 = !DILocation(line: 3043, column: 41, scope: !9146)
!9150 = !DILocation(line: 3043, column: 45, scope: !9146)
!9151 = !DILocation(line: 3043, column: 54, scope: !9146)
!9152 = !DILocation(line: 3043, column: 60, scope: !9146)
!9153 = !DILocation(line: 3043, column: 68, scope: !9146)
!9154 = !DILocation(line: 3043, column: 15, scope: !9146)
!9155 = !DILocation(line: 3043, column: 15, scope: !9147)
!9156 = !DILocalVariable(name: "linelim", scope: !9157, file: !63, line: 3045, type: !539)
!9157 = distinct !DILexicalBlock(scope: !9146, file: !63, line: 3044, column: 13)
!9158 = !DILocation(line: 3045, column: 34, scope: !9157)
!9159 = !DILocation(line: 3045, column: 61, scope: !9157)
!9160 = !DILocation(line: 3045, column: 68, scope: !9157)
!9161 = !DILocation(line: 3045, column: 44, scope: !9157)
!9162 = !DILocation(line: 3046, column: 29, scope: !9157)
!9163 = !DILocation(line: 3046, column: 37, scope: !9157)
!9164 = !DILocation(line: 3046, column: 15, scope: !9157)
!9165 = !DILocation(line: 3046, column: 19, scope: !9157)
!9166 = !DILocation(line: 3046, column: 27, scope: !9157)
!9167 = !DILocation(line: 3047, column: 30, scope: !9157)
!9168 = !DILocation(line: 3047, column: 40, scope: !9157)
!9169 = !DILocation(line: 3047, column: 47, scope: !9157)
!9170 = !DILocation(line: 3047, column: 55, scope: !9157)
!9171 = !DILocation(line: 3047, column: 38, scope: !9157)
!9172 = !DILocation(line: 3047, column: 15, scope: !9157)
!9173 = !DILocation(line: 3047, column: 20, scope: !9157)
!9174 = !DILocation(line: 3047, column: 28, scope: !9157)
!9175 = !DILocation(line: 3048, column: 13, scope: !9157)
!9176 = !DILocation(line: 3052, column: 22, scope: !9177)
!9177 = distinct !DILexicalBlock(scope: !9178, file: !63, line: 3052, column: 15)
!9178 = distinct !DILexicalBlock(scope: !9146, file: !63, line: 3050, column: 13)
!9179 = !DILocation(line: 3052, column: 20, scope: !9177)
!9180 = !DILocation(line: 3052, column: 27, scope: !9181)
!9181 = distinct !DILexicalBlock(scope: !9177, file: !63, line: 3052, column: 15)
!9182 = !DILocation(line: 3052, column: 31, scope: !9181)
!9183 = !DILocation(line: 3052, column: 29, scope: !9181)
!9184 = !DILocation(line: 3052, column: 15, scope: !9177)
!9185 = !DILocation(line: 3053, column: 21, scope: !9186)
!9186 = distinct !DILexicalBlock(scope: !9181, file: !63, line: 3053, column: 21)
!9187 = !DILocation(line: 3053, column: 25, scope: !9186)
!9188 = !DILocation(line: 3053, column: 30, scope: !9186)
!9189 = !DILocation(line: 3053, column: 28, scope: !9186)
!9190 = !DILocation(line: 3053, column: 21, scope: !9181)
!9191 = !DILocation(line: 3054, column: 21, scope: !9186)
!9192 = !DILocation(line: 3054, column: 25, scope: !9186)
!9193 = !DILocation(line: 3054, column: 19, scope: !9186)
!9194 = !DILocation(line: 3053, column: 35, scope: !9186)
!9195 = !DILocation(line: 3052, column: 39, scope: !9181)
!9196 = !DILocation(line: 3052, column: 15, scope: !9181)
!9197 = distinct !{!9197, !9184, !9198}
!9198 = !DILocation(line: 3054, column: 26, scope: !9177)
!9199 = !DILocation(line: 3055, column: 15, scope: !9178)
!9200 = !DILocation(line: 3056, column: 24, scope: !9178)
!9201 = !DILocation(line: 3056, column: 28, scope: !9178)
!9202 = !DILocation(line: 3056, column: 37, scope: !9178)
!9203 = !DILocation(line: 3056, column: 43, scope: !9178)
!9204 = !DILocation(line: 3056, column: 51, scope: !9178)
!9205 = !DILocation(line: 3056, column: 15, scope: !9178)
!9206 = !DILocation(line: 3057, column: 19, scope: !9207)
!9207 = distinct !DILexicalBlock(scope: !9178, file: !63, line: 3057, column: 19)
!9208 = !DILocation(line: 3057, column: 28, scope: !9207)
!9209 = !DILocation(line: 3057, column: 26, scope: !9207)
!9210 = !DILocation(line: 3057, column: 19, scope: !9178)
!9211 = !DILocation(line: 3059, column: 25, scope: !9212)
!9212 = distinct !DILexicalBlock(scope: !9207, file: !63, line: 3058, column: 17)
!9213 = !DILocation(line: 3060, column: 28, scope: !9212)
!9214 = !DILocation(line: 3060, column: 34, scope: !9212)
!9215 = !DILocation(line: 3060, column: 42, scope: !9212)
!9216 = !DILocation(line: 3060, column: 19, scope: !9212)
!9217 = !DILocation(line: 3061, column: 17, scope: !9212)
!9218 = !DILocation(line: 3062, column: 21, scope: !9178)
!9219 = !DILocation(line: 3062, column: 28, scope: !9178)
!9220 = !DILocation(line: 3062, column: 36, scope: !9178)
!9221 = !DILocation(line: 3062, column: 15, scope: !9178)
!9222 = !DILocation(line: 3063, column: 24, scope: !9223)
!9223 = distinct !DILexicalBlock(scope: !9178, file: !63, line: 3063, column: 15)
!9224 = !DILocation(line: 3063, column: 22, scope: !9223)
!9225 = !DILocation(line: 3063, column: 20, scope: !9223)
!9226 = !DILocation(line: 3063, column: 32, scope: !9227)
!9227 = distinct !DILexicalBlock(scope: !9223, file: !63, line: 3063, column: 15)
!9228 = !DILocation(line: 3063, column: 36, scope: !9227)
!9229 = !DILocation(line: 3063, column: 34, scope: !9227)
!9230 = !DILocation(line: 3063, column: 15, scope: !9223)
!9231 = !DILocation(line: 3065, column: 28, scope: !9232)
!9232 = distinct !DILexicalBlock(scope: !9227, file: !63, line: 3064, column: 17)
!9233 = !DILocation(line: 3065, column: 32, scope: !9232)
!9234 = !DILocation(line: 3065, column: 34, scope: !9232)
!9235 = !DILocation(line: 3065, column: 19, scope: !9232)
!9236 = !DILocation(line: 3065, column: 23, scope: !9232)
!9237 = !DILocation(line: 3065, column: 26, scope: !9232)
!9238 = !DILocation(line: 3066, column: 19, scope: !9232)
!9239 = !DILocation(line: 3066, column: 25, scope: !9232)
!9240 = !DILocation(line: 3066, column: 30, scope: !9232)
!9241 = !DILocation(line: 3066, column: 36, scope: !9232)
!9242 = !DILocation(line: 3066, column: 38, scope: !9232)
!9243 = !DILocation(line: 3067, column: 19, scope: !9232)
!9244 = !DILocation(line: 3067, column: 26, scope: !9232)
!9245 = !DILocation(line: 3067, column: 31, scope: !9232)
!9246 = !DILocation(line: 3067, column: 38, scope: !9232)
!9247 = !DILocation(line: 3067, column: 40, scope: !9232)
!9248 = !DILocation(line: 3068, column: 28, scope: !9232)
!9249 = !DILocation(line: 3068, column: 32, scope: !9232)
!9250 = !DILocation(line: 3068, column: 34, scope: !9232)
!9251 = !DILocation(line: 3068, column: 19, scope: !9232)
!9252 = !DILocation(line: 3068, column: 23, scope: !9232)
!9253 = !DILocation(line: 3068, column: 26, scope: !9232)
!9254 = !DILocation(line: 3069, column: 29, scope: !9232)
!9255 = !DILocation(line: 3069, column: 34, scope: !9232)
!9256 = !DILocation(line: 3069, column: 36, scope: !9232)
!9257 = !DILocation(line: 3069, column: 19, scope: !9232)
!9258 = !DILocation(line: 3069, column: 24, scope: !9232)
!9259 = !DILocation(line: 3069, column: 27, scope: !9232)
!9260 = !DILocation(line: 3070, column: 17, scope: !9232)
!9261 = !DILocation(line: 3063, column: 44, scope: !9227)
!9262 = !DILocation(line: 3063, column: 15, scope: !9227)
!9263 = distinct !{!9263, !9230, !9264}
!9264 = !DILocation(line: 3070, column: 17, scope: !9223)
!9265 = !DILocation(line: 3071, column: 22, scope: !9266)
!9266 = distinct !DILexicalBlock(scope: !9178, file: !63, line: 3071, column: 15)
!9267 = !DILocation(line: 3071, column: 20, scope: !9266)
!9268 = !DILocation(line: 3071, column: 27, scope: !9269)
!9269 = distinct !DILexicalBlock(scope: !9266, file: !63, line: 3071, column: 15)
!9270 = !DILocation(line: 3071, column: 31, scope: !9269)
!9271 = !DILocation(line: 3071, column: 29, scope: !9269)
!9272 = !DILocation(line: 3071, column: 15, scope: !9266)
!9273 = !DILocation(line: 3072, column: 26, scope: !9269)
!9274 = !DILocation(line: 3072, column: 30, scope: !9269)
!9275 = !DILocation(line: 3072, column: 32, scope: !9269)
!9276 = !DILocation(line: 3072, column: 17, scope: !9269)
!9277 = !DILocation(line: 3072, column: 21, scope: !9269)
!9278 = !DILocation(line: 3072, column: 24, scope: !9269)
!9279 = !DILocation(line: 3071, column: 39, scope: !9269)
!9280 = !DILocation(line: 3071, column: 15, scope: !9269)
!9281 = distinct !{!9281, !9272, !9282}
!9282 = !DILocation(line: 3072, column: 35, scope: !9266)
!9283 = !DILocation(line: 3073, column: 15, scope: !9178)
!9284 = distinct !{!9284, !9038, !9285}
!9285 = !DILocation(line: 3103, column: 5, scope: !8837)
!9286 = !DILocalVariable(name: "lo", scope: !9287, file: !63, line: 3082, type: !52)
!9287 = distinct !DILexicalBlock(scope: !9041, file: !63, line: 3081, column: 7)
!9288 = !DILocation(line: 3082, column: 16, scope: !9287)
!9289 = !DILocalVariable(name: "hi", scope: !9287, file: !63, line: 3083, type: !52)
!9290 = !DILocation(line: 3083, column: 16, scope: !9287)
!9291 = !DILocation(line: 3083, column: 21, scope: !9287)
!9292 = !DILocalVariable(name: "probe", scope: !9287, file: !63, line: 3084, type: !52)
!9293 = !DILocation(line: 3084, column: 16, scope: !9287)
!9294 = !DILocation(line: 3084, column: 24, scope: !9287)
!9295 = !DILocalVariable(name: "ord0", scope: !9287, file: !63, line: 3085, type: !52)
!9296 = !DILocation(line: 3085, column: 16, scope: !9287)
!9297 = !DILocation(line: 3085, column: 23, scope: !9287)
!9298 = !DILocalVariable(name: "count_of_smaller_lines", scope: !9287, file: !63, line: 3086, type: !52)
!9299 = !DILocation(line: 3086, column: 16, scope: !9287)
!9300 = !DILocation(line: 3088, column: 9, scope: !9287)
!9301 = !DILocation(line: 3088, column: 16, scope: !9287)
!9302 = !DILocation(line: 3088, column: 21, scope: !9287)
!9303 = !DILocation(line: 3088, column: 19, scope: !9287)
!9304 = !DILocalVariable(name: "cmp", scope: !9305, file: !63, line: 3090, type: !5)
!9305 = distinct !DILexicalBlock(scope: !9287, file: !63, line: 3089, column: 11)
!9306 = !DILocation(line: 3090, column: 17, scope: !9305)
!9307 = !DILocation(line: 3090, column: 32, scope: !9305)
!9308 = !DILocation(line: 3090, column: 36, scope: !9305)
!9309 = !DILocation(line: 3090, column: 43, scope: !9305)
!9310 = !DILocation(line: 3090, column: 47, scope: !9305)
!9311 = !DILocation(line: 3090, column: 51, scope: !9305)
!9312 = !DILocation(line: 3090, column: 23, scope: !9305)
!9313 = !DILocation(line: 3091, column: 17, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !9305, file: !63, line: 3091, column: 17)
!9315 = !DILocation(line: 3091, column: 21, scope: !9314)
!9316 = !DILocation(line: 3091, column: 25, scope: !9314)
!9317 = !DILocation(line: 3091, column: 29, scope: !9314)
!9318 = !DILocation(line: 3091, column: 33, scope: !9314)
!9319 = !DILocation(line: 3091, column: 38, scope: !9314)
!9320 = !DILocation(line: 3091, column: 41, scope: !9314)
!9321 = !DILocation(line: 3091, column: 48, scope: !9314)
!9322 = !DILocation(line: 3091, column: 52, scope: !9314)
!9323 = !DILocation(line: 3091, column: 46, scope: !9314)
!9324 = !DILocation(line: 3091, column: 17, scope: !9305)
!9325 = !DILocation(line: 3092, column: 20, scope: !9314)
!9326 = !DILocation(line: 3092, column: 18, scope: !9314)
!9327 = !DILocation(line: 3092, column: 15, scope: !9314)
!9328 = !DILocation(line: 3094, column: 20, scope: !9314)
!9329 = !DILocation(line: 3094, column: 26, scope: !9314)
!9330 = !DILocation(line: 3094, column: 18, scope: !9314)
!9331 = !DILocation(line: 3095, column: 22, scope: !9305)
!9332 = !DILocation(line: 3095, column: 27, scope: !9305)
!9333 = !DILocation(line: 3095, column: 25, scope: !9305)
!9334 = !DILocation(line: 3095, column: 31, scope: !9305)
!9335 = !DILocation(line: 3095, column: 19, scope: !9305)
!9336 = distinct !{!9336, !9300, !9337}
!9337 = !DILocation(line: 3096, column: 11, scope: !9287)
!9338 = !DILocation(line: 3098, column: 34, scope: !9287)
!9339 = !DILocation(line: 3098, column: 37, scope: !9287)
!9340 = !DILocation(line: 3098, column: 32, scope: !9287)
!9341 = !DILocation(line: 3099, column: 16, scope: !9342)
!9342 = distinct !DILexicalBlock(scope: !9287, file: !63, line: 3099, column: 9)
!9343 = !DILocation(line: 3099, column: 14, scope: !9342)
!9344 = !DILocation(line: 3099, column: 21, scope: !9345)
!9345 = distinct !DILexicalBlock(scope: !9342, file: !63, line: 3099, column: 9)
!9346 = !DILocation(line: 3099, column: 25, scope: !9345)
!9347 = !DILocation(line: 3099, column: 23, scope: !9345)
!9348 = !DILocation(line: 3099, column: 9, scope: !9342)
!9349 = !DILocation(line: 3100, column: 20, scope: !9345)
!9350 = !DILocation(line: 3100, column: 24, scope: !9345)
!9351 = !DILocation(line: 3100, column: 26, scope: !9345)
!9352 = !DILocation(line: 3100, column: 11, scope: !9345)
!9353 = !DILocation(line: 3100, column: 15, scope: !9345)
!9354 = !DILocation(line: 3100, column: 18, scope: !9345)
!9355 = !DILocation(line: 3099, column: 50, scope: !9345)
!9356 = !DILocation(line: 3099, column: 9, scope: !9345)
!9357 = distinct !{!9357, !9348, !9358}
!9358 = !DILocation(line: 3100, column: 29, scope: !9342)
!9359 = !DILocation(line: 3101, column: 39, scope: !9287)
!9360 = !DILocation(line: 3101, column: 9, scope: !9287)
!9361 = !DILocation(line: 3101, column: 13, scope: !9287)
!9362 = !DILocation(line: 3101, column: 37, scope: !9287)
!9363 = !DILocation(line: 3105, column: 7, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !8837, file: !63, line: 3105, column: 7)
!9365 = !DILocation(line: 3105, column: 14, scope: !9364)
!9366 = !DILocation(line: 3105, column: 17, scope: !9364)
!9367 = !DILocation(line: 3105, column: 7, scope: !8837)
!9368 = !DILocation(line: 3107, column: 27, scope: !9369)
!9369 = distinct !DILexicalBlock(scope: !9364, file: !63, line: 3106, column: 5)
!9370 = !DILocation(line: 3107, column: 32, scope: !9369)
!9371 = !DILocation(line: 3107, column: 7, scope: !9369)
!9372 = !DILocation(line: 3108, column: 19, scope: !9369)
!9373 = !DILocation(line: 3108, column: 7, scope: !9369)
!9374 = !DILocation(line: 3109, column: 5, scope: !9369)
!9375 = !DILocation(line: 3111, column: 12, scope: !8837)
!9376 = !DILocation(line: 3111, column: 17, scope: !8837)
!9377 = !DILocation(line: 3111, column: 3, scope: !8837)
!9378 = !DILocation(line: 3112, column: 9, scope: !8837)
!9379 = !DILocation(line: 3112, column: 3, scope: !8837)
!9380 = !DILocation(line: 3113, column: 9, scope: !8837)
!9381 = !DILocation(line: 3113, column: 3, scope: !8837)
!9382 = !DILocation(line: 3114, column: 9, scope: !8837)
!9383 = !DILocation(line: 3114, column: 3, scope: !8837)
!9384 = !DILocation(line: 3115, column: 9, scope: !8837)
!9385 = !DILocation(line: 3115, column: 3, scope: !8837)
!9386 = !DILocation(line: 3116, column: 9, scope: !8837)
!9387 = !DILocation(line: 3116, column: 3, scope: !8837)
!9388 = !DILocation(line: 3117, column: 1, scope: !8837)
!9389 = distinct !DISubprogram(name: "zaptemp", scope: !63, file: !63, line: 1242, type: !431, scopeLine: 1243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9390 = !DILocalVariable(name: "name", arg: 1, scope: !9389, file: !63, line: 1242, type: !90)
!9391 = !DILocation(line: 1242, column: 22, scope: !9389)
!9392 = !DILocalVariable(name: "pnode", scope: !9389, file: !63, line: 1244, type: !619)
!9393 = !DILocation(line: 1244, column: 30, scope: !9389)
!9394 = !DILocalVariable(name: "node", scope: !9389, file: !63, line: 1245, type: !407)
!9395 = !DILocation(line: 1245, column: 20, scope: !9389)
!9396 = !DILocalVariable(name: "next", scope: !9389, file: !63, line: 1246, type: !407)
!9397 = !DILocation(line: 1246, column: 20, scope: !9389)
!9398 = !DILocalVariable(name: "unlink_status", scope: !9389, file: !63, line: 1247, type: !5)
!9399 = !DILocation(line: 1247, column: 7, scope: !9389)
!9400 = !DILocalVariable(name: "unlink_errno", scope: !9389, file: !63, line: 1248, type: !5)
!9401 = !DILocation(line: 1248, column: 7, scope: !9389)
!9402 = !DILocalVariable(name: "cs", scope: !9389, file: !63, line: 1249, type: !2943)
!9403 = !DILocation(line: 1249, column: 20, scope: !9389)
!9404 = !DILocation(line: 1251, column: 14, scope: !9405)
!9405 = distinct !DILexicalBlock(scope: !9389, file: !63, line: 1251, column: 3)
!9406 = !DILocation(line: 1251, column: 8, scope: !9405)
!9407 = !DILocation(line: 1251, column: 36, scope: !9408)
!9408 = distinct !DILexicalBlock(scope: !9405, file: !63, line: 1251, column: 3)
!9409 = !DILocation(line: 1251, column: 35, scope: !9408)
!9410 = !DILocation(line: 1251, column: 33, scope: !9408)
!9411 = !DILocation(line: 1251, column: 44, scope: !9408)
!9412 = !DILocation(line: 1251, column: 27, scope: !9408)
!9413 = !DILocation(line: 1251, column: 52, scope: !9408)
!9414 = !DILocation(line: 1251, column: 49, scope: !9408)
!9415 = !DILocation(line: 1251, column: 3, scope: !9405)
!9416 = !DILocation(line: 1252, column: 5, scope: !9408)
!9417 = !DILocation(line: 1251, column: 67, scope: !9408)
!9418 = !DILocation(line: 1251, column: 73, scope: !9408)
!9419 = !DILocation(line: 1251, column: 64, scope: !9408)
!9420 = !DILocation(line: 1251, column: 3, scope: !9408)
!9421 = distinct !{!9421, !9415, !9422}
!9422 = !DILocation(line: 1252, column: 5, scope: !9405)
!9423 = !DILocation(line: 1254, column: 7, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9389, file: !63, line: 1254, column: 7)
!9425 = !DILocation(line: 1254, column: 13, scope: !9424)
!9426 = !DILocation(line: 1254, column: 19, scope: !9424)
!9427 = !DILocation(line: 1254, column: 7, scope: !9389)
!9428 = !DILocation(line: 1255, column: 16, scope: !9424)
!9429 = !DILocation(line: 1255, column: 22, scope: !9424)
!9430 = !DILocation(line: 1255, column: 5, scope: !9424)
!9431 = !DILocation(line: 1258, column: 10, scope: !9389)
!9432 = !DILocation(line: 1258, column: 16, scope: !9389)
!9433 = !DILocation(line: 1258, column: 8, scope: !9389)
!9434 = !DILocation(line: 1259, column: 3, scope: !9389)
!9435 = !DILocation(line: 1260, column: 27, scope: !9389)
!9436 = !DILocation(line: 1260, column: 19, scope: !9389)
!9437 = !DILocation(line: 1260, column: 17, scope: !9389)
!9438 = !DILocation(line: 1261, column: 18, scope: !9389)
!9439 = !DILocation(line: 1261, column: 16, scope: !9389)
!9440 = !DILocation(line: 1262, column: 12, scope: !9389)
!9441 = !DILocation(line: 1262, column: 4, scope: !9389)
!9442 = !DILocation(line: 1262, column: 10, scope: !9389)
!9443 = !DILocation(line: 1263, column: 3, scope: !9389)
!9444 = !DILocation(line: 1265, column: 7, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9389, file: !63, line: 1265, column: 7)
!9446 = !DILocation(line: 1265, column: 21, scope: !9445)
!9447 = !DILocation(line: 1265, column: 7, scope: !9389)
!9448 = !DILocation(line: 1266, column: 15, scope: !9445)
!9449 = !DILocation(line: 1266, column: 29, scope: !9445)
!9450 = !DILocation(line: 1266, column: 62, scope: !9445)
!9451 = !DILocation(line: 1266, column: 5, scope: !9445)
!9452 = !DILocation(line: 1267, column: 9, scope: !9453)
!9453 = distinct !DILexicalBlock(scope: !9389, file: !63, line: 1267, column: 7)
!9454 = !DILocation(line: 1267, column: 7, scope: !9389)
!9455 = !DILocation(line: 1268, column: 16, scope: !9453)
!9456 = !DILocation(line: 1268, column: 14, scope: !9453)
!9457 = !DILocation(line: 1268, column: 5, scope: !9453)
!9458 = !DILocation(line: 1269, column: 9, scope: !9389)
!9459 = !DILocation(line: 1269, column: 3, scope: !9389)
!9460 = !DILocation(line: 1270, column: 1, scope: !9389)
!9461 = distinct !DISubprogram(name: "wait_proc", scope: !63, file: !63, line: 770, type: !9462, scopeLine: 771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9462 = !DISubroutineType(types: !9463)
!9463 = !{null, !413}
!9464 = !DILocalVariable(name: "pid", arg: 1, scope: !9461, file: !63, line: 770, type: !413)
!9465 = !DILocation(line: 770, column: 18, scope: !9461)
!9466 = !DILocation(line: 772, column: 20, scope: !9467)
!9467 = distinct !DILexicalBlock(scope: !9461, file: !63, line: 772, column: 7)
!9468 = !DILocation(line: 772, column: 7, scope: !9467)
!9469 = !DILocation(line: 772, column: 7, scope: !9461)
!9470 = !DILocation(line: 773, column: 11, scope: !9467)
!9471 = !DILocation(line: 773, column: 5, scope: !9467)
!9472 = !DILocation(line: 774, column: 1, scope: !9461)
!9473 = !DILocation(line: 892, column: 7, scope: !9474)
!9474 = distinct !DILexicalBlock(scope: !779, file: !63, line: 892, column: 7)
!9475 = !DILocation(line: 892, column: 21, scope: !9474)
!9476 = !DILocation(line: 892, column: 7, scope: !779)
!9477 = !DILocation(line: 893, column: 21, scope: !9474)
!9478 = !DILocation(line: 893, column: 53, scope: !9474)
!9479 = !DILocation(line: 893, column: 65, scope: !9474)
!9480 = !DILocation(line: 893, column: 19, scope: !9474)
!9481 = !DILocation(line: 893, column: 5, scope: !9474)
!9482 = !DILocation(line: 894, column: 10, scope: !779)
!9483 = !DILocation(line: 894, column: 24, scope: !779)
!9484 = !DILocation(line: 894, column: 3, scope: !779)
!9485 = distinct !DISubprogram(name: "open_temp", scope: !63, file: !63, line: 1175, type: !9486, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9486 = !DISubroutineType(types: !9487)
!9487 = !{!389, !407}
!9488 = !DILocalVariable(name: "temp", arg: 1, scope: !9485, file: !63, line: 1175, type: !407)
!9489 = !DILocation(line: 1175, column: 29, scope: !9485)
!9490 = !DILocalVariable(name: "tempfd", scope: !9485, file: !63, line: 1177, type: !5)
!9491 = !DILocation(line: 1177, column: 7, scope: !9485)
!9492 = !DILocalVariable(name: "pipefds", scope: !9485, file: !63, line: 1177, type: !585)
!9493 = !DILocation(line: 1177, column: 15, scope: !9485)
!9494 = !DILocalVariable(name: "fp", scope: !9485, file: !63, line: 1178, type: !389)
!9495 = !DILocation(line: 1178, column: 9, scope: !9485)
!9496 = !DILocation(line: 1180, column: 7, scope: !9497)
!9497 = distinct !DILexicalBlock(scope: !9485, file: !63, line: 1180, column: 7)
!9498 = !DILocation(line: 1180, column: 13, scope: !9497)
!9499 = !DILocation(line: 1180, column: 19, scope: !9497)
!9500 = !DILocation(line: 1180, column: 7, scope: !9485)
!9501 = !DILocation(line: 1181, column: 16, scope: !9497)
!9502 = !DILocation(line: 1181, column: 22, scope: !9497)
!9503 = !DILocation(line: 1181, column: 5, scope: !9497)
!9504 = !DILocation(line: 1183, column: 18, scope: !9485)
!9505 = !DILocation(line: 1183, column: 24, scope: !9485)
!9506 = !DILocation(line: 1183, column: 12, scope: !9485)
!9507 = !DILocation(line: 1183, column: 10, scope: !9485)
!9508 = !DILocation(line: 1184, column: 7, scope: !9509)
!9509 = distinct !DILexicalBlock(scope: !9485, file: !63, line: 1184, column: 7)
!9510 = !DILocation(line: 1184, column: 14, scope: !9509)
!9511 = !DILocation(line: 1184, column: 7, scope: !9485)
!9512 = !DILocation(line: 1185, column: 5, scope: !9509)
!9513 = !DILocalVariable(name: "child", scope: !9485, file: !63, line: 1187, type: !413)
!9514 = !DILocation(line: 1187, column: 9, scope: !9485)
!9515 = !DILocation(line: 1187, column: 28, scope: !9485)
!9516 = !DILocation(line: 1187, column: 17, scope: !9485)
!9517 = !DILocation(line: 1189, column: 11, scope: !9485)
!9518 = !DILocation(line: 1189, column: 3, scope: !9485)
!9519 = !DILocation(line: 1192, column: 11, scope: !9520)
!9520 = distinct !DILexicalBlock(scope: !9521, file: !63, line: 1192, column: 11)
!9521 = distinct !DILexicalBlock(scope: !9485, file: !63, line: 1190, column: 5)
!9522 = !DILocation(line: 1192, column: 17, scope: !9520)
!9523 = !DILocation(line: 1192, column: 11, scope: !9521)
!9524 = !DILocation(line: 1193, column: 9, scope: !9520)
!9525 = !DILocation(line: 1195, column: 14, scope: !9521)
!9526 = !DILocation(line: 1195, column: 7, scope: !9521)
!9527 = !DILocation(line: 1196, column: 7, scope: !9521)
!9528 = !DILocation(line: 1196, column: 13, scope: !9521)
!9529 = !DILocation(line: 1197, column: 7, scope: !9521)
!9530 = !DILocation(line: 1202, column: 14, scope: !9521)
!9531 = !DILocation(line: 1202, column: 7, scope: !9521)
!9532 = !DILocation(line: 1203, column: 16, scope: !9521)
!9533 = !DILocation(line: 1203, column: 7, scope: !9521)
!9534 = !DILocation(line: 1204, column: 16, scope: !9521)
!9535 = !DILocation(line: 1204, column: 7, scope: !9521)
!9536 = !DILocation(line: 1206, column: 15, scope: !9521)
!9537 = !DILocation(line: 1206, column: 33, scope: !9521)
!9538 = !DILocation(line: 1206, column: 7, scope: !9521)
!9539 = !DILocation(line: 1208, column: 23, scope: !9521)
!9540 = !DILocation(line: 1208, column: 7, scope: !9521)
!9541 = !DILocation(line: 1211, column: 19, scope: !9521)
!9542 = !DILocation(line: 1211, column: 7, scope: !9521)
!9543 = !DILocation(line: 1211, column: 13, scope: !9521)
!9544 = !DILocation(line: 1211, column: 17, scope: !9521)
!9545 = !DILocation(line: 1212, column: 22, scope: !9521)
!9546 = !DILocation(line: 1212, column: 7, scope: !9521)
!9547 = !DILocation(line: 1213, column: 14, scope: !9521)
!9548 = !DILocation(line: 1213, column: 7, scope: !9521)
!9549 = !DILocation(line: 1214, column: 14, scope: !9521)
!9550 = !DILocation(line: 1214, column: 7, scope: !9521)
!9551 = !DILocation(line: 1216, column: 20, scope: !9521)
!9552 = !DILocation(line: 1216, column: 12, scope: !9521)
!9553 = !DILocation(line: 1216, column: 10, scope: !9521)
!9554 = !DILocation(line: 1217, column: 13, scope: !9555)
!9555 = distinct !DILexicalBlock(scope: !9521, file: !63, line: 1217, column: 11)
!9556 = !DILocation(line: 1217, column: 11, scope: !9521)
!9557 = !DILocalVariable(name: "saved_errno", scope: !9558, file: !63, line: 1219, type: !5)
!9558 = distinct !DILexicalBlock(scope: !9555, file: !63, line: 1218, column: 9)
!9559 = !DILocation(line: 1219, column: 15, scope: !9558)
!9560 = !DILocation(line: 1219, column: 29, scope: !9558)
!9561 = !DILocation(line: 1220, column: 18, scope: !9558)
!9562 = !DILocation(line: 1220, column: 11, scope: !9558)
!9563 = !DILocation(line: 1221, column: 19, scope: !9558)
!9564 = !DILocation(line: 1221, column: 11, scope: !9558)
!9565 = !DILocation(line: 1221, column: 17, scope: !9558)
!9566 = !DILocation(line: 1222, column: 9, scope: !9558)
!9567 = !DILocation(line: 1223, column: 7, scope: !9521)
!9568 = !DILocation(line: 1226, column: 10, scope: !9485)
!9569 = !DILocation(line: 1226, column: 3, scope: !9485)
!9570 = !DILocation(line: 1227, column: 1, scope: !9485)
!9571 = distinct !DISubprogram(name: "key_to_opts", scope: !63, file: !63, line: 2392, type: !9572, scopeLine: 2393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9572 = !DISubroutineType(types: !9573)
!9573 = !{null, !522, !7}
!9574 = !DILocalVariable(name: "key", arg: 1, scope: !9571, file: !63, line: 2392, type: !522)
!9575 = !DILocation(line: 2392, column: 37, scope: !9571)
!9576 = !DILocalVariable(name: "opts", arg: 2, scope: !9571, file: !63, line: 2392, type: !7)
!9577 = !DILocation(line: 2392, column: 48, scope: !9571)
!9578 = !DILocation(line: 2394, column: 7, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2394, column: 7)
!9580 = !DILocation(line: 2394, column: 12, scope: !9579)
!9581 = !DILocation(line: 2394, column: 24, scope: !9579)
!9582 = !DILocation(line: 2394, column: 27, scope: !9579)
!9583 = !DILocation(line: 2394, column: 32, scope: !9579)
!9584 = !DILocation(line: 2394, column: 7, scope: !9571)
!9585 = !DILocation(line: 2395, column: 10, scope: !9579)
!9586 = !DILocation(line: 2395, column: 13, scope: !9579)
!9587 = !DILocation(line: 2395, column: 5, scope: !9579)
!9588 = !DILocation(line: 2396, column: 7, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2396, column: 7)
!9590 = !DILocation(line: 2396, column: 12, scope: !9589)
!9591 = !DILocation(line: 2396, column: 19, scope: !9589)
!9592 = !DILocation(line: 2396, column: 7, scope: !9571)
!9593 = !DILocation(line: 2397, column: 10, scope: !9589)
!9594 = !DILocation(line: 2397, column: 13, scope: !9589)
!9595 = !DILocation(line: 2397, column: 5, scope: !9589)
!9596 = !DILocation(line: 2398, column: 7, scope: !9597)
!9597 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2398, column: 7)
!9598 = !DILocation(line: 2398, column: 12, scope: !9597)
!9599 = !DILocation(line: 2398, column: 7, scope: !9571)
!9600 = !DILocation(line: 2399, column: 10, scope: !9597)
!9601 = !DILocation(line: 2399, column: 13, scope: !9597)
!9602 = !DILocation(line: 2399, column: 5, scope: !9597)
!9603 = !DILocation(line: 2400, column: 7, scope: !9604)
!9604 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2400, column: 7)
!9605 = !DILocation(line: 2400, column: 12, scope: !9604)
!9606 = !DILocation(line: 2400, column: 7, scope: !9571)
!9607 = !DILocation(line: 2401, column: 10, scope: !9604)
!9608 = !DILocation(line: 2401, column: 13, scope: !9604)
!9609 = !DILocation(line: 2401, column: 5, scope: !9604)
!9610 = !DILocation(line: 2402, column: 7, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2402, column: 7)
!9612 = !DILocation(line: 2402, column: 12, scope: !9611)
!9613 = !DILocation(line: 2402, column: 7, scope: !9571)
!9614 = !DILocation(line: 2403, column: 10, scope: !9611)
!9615 = !DILocation(line: 2403, column: 13, scope: !9611)
!9616 = !DILocation(line: 2403, column: 5, scope: !9611)
!9617 = !DILocation(line: 2404, column: 7, scope: !9618)
!9618 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2404, column: 7)
!9619 = !DILocation(line: 2404, column: 12, scope: !9618)
!9620 = !DILocation(line: 2404, column: 19, scope: !9618)
!9621 = !DILocation(line: 2404, column: 7, scope: !9571)
!9622 = !DILocation(line: 2405, column: 10, scope: !9618)
!9623 = !DILocation(line: 2405, column: 13, scope: !9618)
!9624 = !DILocation(line: 2405, column: 5, scope: !9618)
!9625 = !DILocation(line: 2406, column: 7, scope: !9626)
!9626 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2406, column: 7)
!9627 = !DILocation(line: 2406, column: 12, scope: !9626)
!9628 = !DILocation(line: 2406, column: 7, scope: !9571)
!9629 = !DILocation(line: 2407, column: 10, scope: !9626)
!9630 = !DILocation(line: 2407, column: 13, scope: !9626)
!9631 = !DILocation(line: 2407, column: 5, scope: !9626)
!9632 = !DILocation(line: 2408, column: 7, scope: !9633)
!9633 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2408, column: 7)
!9634 = !DILocation(line: 2408, column: 12, scope: !9633)
!9635 = !DILocation(line: 2408, column: 7, scope: !9571)
!9636 = !DILocation(line: 2409, column: 10, scope: !9633)
!9637 = !DILocation(line: 2409, column: 13, scope: !9633)
!9638 = !DILocation(line: 2409, column: 5, scope: !9633)
!9639 = !DILocation(line: 2410, column: 7, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2410, column: 7)
!9641 = !DILocation(line: 2410, column: 12, scope: !9640)
!9642 = !DILocation(line: 2410, column: 7, scope: !9571)
!9643 = !DILocation(line: 2411, column: 10, scope: !9640)
!9644 = !DILocation(line: 2411, column: 13, scope: !9640)
!9645 = !DILocation(line: 2411, column: 5, scope: !9640)
!9646 = !DILocation(line: 2412, column: 7, scope: !9647)
!9647 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2412, column: 7)
!9648 = !DILocation(line: 2412, column: 12, scope: !9647)
!9649 = !DILocation(line: 2412, column: 7, scope: !9571)
!9650 = !DILocation(line: 2413, column: 10, scope: !9647)
!9651 = !DILocation(line: 2413, column: 13, scope: !9647)
!9652 = !DILocation(line: 2413, column: 5, scope: !9647)
!9653 = !DILocation(line: 2414, column: 7, scope: !9654)
!9654 = distinct !DILexicalBlock(scope: !9571, file: !63, line: 2414, column: 7)
!9655 = !DILocation(line: 2414, column: 12, scope: !9654)
!9656 = !DILocation(line: 2414, column: 7, scope: !9571)
!9657 = !DILocation(line: 2415, column: 10, scope: !9654)
!9658 = !DILocation(line: 2415, column: 13, scope: !9654)
!9659 = !DILocation(line: 2415, column: 5, scope: !9654)
!9660 = !DILocation(line: 2416, column: 4, scope: !9571)
!9661 = !DILocation(line: 2416, column: 9, scope: !9571)
!9662 = !DILocation(line: 2417, column: 1, scope: !9571)
!9663 = distinct !DISubprogram(name: "select_plural", scope: !429, file: !429, line: 183, type: !9664, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9664 = !DISubroutineType(types: !9665)
!9665 = !{!54, !464}
!9666 = !DILocalVariable(name: "n", arg: 1, scope: !9663, file: !429, line: 183, type: !464)
!9667 = !DILocation(line: 183, column: 26, scope: !9663)
!9668 = !DILocation(line: 188, column: 11, scope: !9663)
!9669 = !DILocation(line: 188, column: 13, scope: !9663)
!9670 = !DILocation(line: 188, column: 28, scope: !9663)
!9671 = !DILocation(line: 188, column: 32, scope: !9663)
!9672 = !DILocation(line: 188, column: 34, scope: !9663)
!9673 = !DILocation(line: 188, column: 51, scope: !9663)
!9674 = !DILocation(line: 188, column: 3, scope: !9663)
!9675 = distinct !DISubprogram(name: "cleanup", scope: !63, file: !63, line: 807, type: !235, scopeLine: 808, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9676 = !DILocalVariable(name: "node", scope: !9675, file: !63, line: 809, type: !461)
!9677 = !DILocation(line: 809, column: 26, scope: !9675)
!9678 = !DILocation(line: 811, column: 15, scope: !9679)
!9679 = distinct !DILexicalBlock(scope: !9675, file: !63, line: 811, column: 3)
!9680 = !DILocation(line: 811, column: 13, scope: !9679)
!9681 = !DILocation(line: 811, column: 8, scope: !9679)
!9682 = !DILocation(line: 811, column: 25, scope: !9683)
!9683 = distinct !DILexicalBlock(scope: !9679, file: !63, line: 811, column: 3)
!9684 = !DILocation(line: 811, column: 3, scope: !9679)
!9685 = !DILocation(line: 812, column: 13, scope: !9683)
!9686 = !DILocation(line: 812, column: 19, scope: !9683)
!9687 = !DILocation(line: 812, column: 5, scope: !9683)
!9688 = !DILocation(line: 811, column: 38, scope: !9683)
!9689 = !DILocation(line: 811, column: 44, scope: !9683)
!9690 = !DILocation(line: 811, column: 36, scope: !9683)
!9691 = !DILocation(line: 811, column: 3, scope: !9683)
!9692 = distinct !{!9692, !9684, !9693}
!9693 = !DILocation(line: 812, column: 23, scope: !9679)
!9694 = !DILocation(line: 813, column: 12, scope: !9675)
!9695 = !DILocation(line: 814, column: 1, scope: !9675)
!9696 = distinct !DISubprogram(name: "field_sep", scope: !429, file: !429, line: 160, type: !9697, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9697 = !DISubroutineType(types: !9698)
!9698 = !{!162, !535}
!9699 = !DILocalVariable(name: "ch", arg: 1, scope: !9696, file: !429, line: 160, type: !535)
!9700 = !DILocation(line: 160, column: 26, scope: !9696)
!9701 = !DILocation(line: 162, column: 10, scope: !9696)
!9702 = !DILocation(line: 162, column: 23, scope: !9696)
!9703 = !DILocation(line: 162, column: 26, scope: !9696)
!9704 = !DILocation(line: 162, column: 29, scope: !9696)
!9705 = !DILocation(line: 162, column: 3, scope: !9696)
!9706 = distinct !DISubprogram(name: "struct_month_cmp", scope: !63, file: !63, line: 1275, type: !1259, scopeLine: 1276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !62, retainedNodes: !433)
!9707 = !DILocalVariable(name: "m1", arg: 1, scope: !9706, file: !63, line: 1275, type: !85)
!9708 = !DILocation(line: 1275, column: 31, scope: !9706)
!9709 = !DILocalVariable(name: "m2", arg: 2, scope: !9706, file: !63, line: 1275, type: !85)
!9710 = !DILocation(line: 1275, column: 47, scope: !9706)
!9711 = !DILocalVariable(name: "month1", scope: !9706, file: !63, line: 1277, type: !459)
!9712 = !DILocation(line: 1277, column: 23, scope: !9706)
!9713 = !DILocation(line: 1277, column: 32, scope: !9706)
!9714 = !DILocalVariable(name: "month2", scope: !9706, file: !63, line: 1278, type: !459)
!9715 = !DILocation(line: 1278, column: 23, scope: !9706)
!9716 = !DILocation(line: 1278, column: 32, scope: !9706)
!9717 = !DILocation(line: 1279, column: 18, scope: !9706)
!9718 = !DILocation(line: 1279, column: 26, scope: !9706)
!9719 = !DILocation(line: 1279, column: 32, scope: !9706)
!9720 = !DILocation(line: 1279, column: 40, scope: !9706)
!9721 = !DILocation(line: 1279, column: 10, scope: !9706)
!9722 = !DILocation(line: 1279, column: 3, scope: !9706)
!9723 = distinct !DISubprogram(name: "__argmatch_die", scope: !864, file: !864, line: 60, type: !235, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9724 = !DILocation(line: 62, column: 3, scope: !9723)
!9725 = !DILocation(line: 63, column: 1, scope: !9723)
!9726 = distinct !DISubprogram(name: "argmatch", scope: !864, file: !864, line: 82, type: !9727, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9727 = !DISubroutineType(types: !9728)
!9728 = !{!823, !90, !824, !85, !52}
!9729 = !DILocalVariable(name: "arg", arg: 1, scope: !9726, file: !864, line: 82, type: !90)
!9730 = !DILocation(line: 82, column: 23, scope: !9726)
!9731 = !DILocalVariable(name: "arglist", arg: 2, scope: !9726, file: !864, line: 82, type: !824)
!9732 = !DILocation(line: 82, column: 47, scope: !9726)
!9733 = !DILocalVariable(name: "vallist", arg: 3, scope: !9726, file: !864, line: 83, type: !85)
!9734 = !DILocation(line: 83, column: 23, scope: !9726)
!9735 = !DILocalVariable(name: "valsize", arg: 4, scope: !9726, file: !864, line: 83, type: !52)
!9736 = !DILocation(line: 83, column: 39, scope: !9726)
!9737 = !DILocalVariable(name: "i", scope: !9726, file: !864, line: 85, type: !52)
!9738 = !DILocation(line: 85, column: 10, scope: !9726)
!9739 = !DILocalVariable(name: "arglen", scope: !9726, file: !864, line: 86, type: !52)
!9740 = !DILocation(line: 86, column: 10, scope: !9726)
!9741 = !DILocalVariable(name: "matchind", scope: !9726, file: !864, line: 87, type: !823)
!9742 = !DILocation(line: 87, column: 13, scope: !9726)
!9743 = !DILocalVariable(name: "ambiguous", scope: !9726, file: !864, line: 88, type: !162)
!9744 = !DILocation(line: 88, column: 8, scope: !9726)
!9745 = !DILocation(line: 90, column: 20, scope: !9726)
!9746 = !DILocation(line: 90, column: 12, scope: !9726)
!9747 = !DILocation(line: 90, column: 10, scope: !9726)
!9748 = !DILocation(line: 93, column: 10, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9726, file: !864, line: 93, column: 3)
!9750 = !DILocation(line: 93, column: 8, scope: !9749)
!9751 = !DILocation(line: 93, column: 15, scope: !9752)
!9752 = distinct !DILexicalBlock(scope: !9749, file: !864, line: 93, column: 3)
!9753 = !DILocation(line: 93, column: 23, scope: !9752)
!9754 = !DILocation(line: 93, column: 3, scope: !9749)
!9755 = !DILocation(line: 95, column: 21, scope: !9756)
!9756 = distinct !DILexicalBlock(scope: !9757, file: !864, line: 95, column: 11)
!9757 = distinct !DILexicalBlock(scope: !9752, file: !864, line: 94, column: 5)
!9758 = !DILocation(line: 95, column: 29, scope: !9756)
!9759 = !DILocation(line: 95, column: 33, scope: !9756)
!9760 = !DILocation(line: 95, column: 38, scope: !9756)
!9761 = !DILocation(line: 95, column: 12, scope: !9756)
!9762 = !DILocation(line: 95, column: 11, scope: !9757)
!9763 = !DILocation(line: 97, column: 23, scope: !9764)
!9764 = distinct !DILexicalBlock(scope: !9765, file: !864, line: 97, column: 15)
!9765 = distinct !DILexicalBlock(scope: !9756, file: !864, line: 96, column: 9)
!9766 = !DILocation(line: 97, column: 31, scope: !9764)
!9767 = !DILocation(line: 97, column: 15, scope: !9764)
!9768 = !DILocation(line: 97, column: 38, scope: !9764)
!9769 = !DILocation(line: 97, column: 35, scope: !9764)
!9770 = !DILocation(line: 97, column: 15, scope: !9765)
!9771 = !DILocation(line: 99, column: 20, scope: !9764)
!9772 = !DILocation(line: 99, column: 13, scope: !9764)
!9773 = !DILocation(line: 100, column: 20, scope: !9774)
!9774 = distinct !DILexicalBlock(scope: !9764, file: !864, line: 100, column: 20)
!9775 = !DILocation(line: 100, column: 29, scope: !9774)
!9776 = !DILocation(line: 100, column: 20, scope: !9764)
!9777 = !DILocation(line: 102, column: 24, scope: !9774)
!9778 = !DILocation(line: 102, column: 22, scope: !9774)
!9779 = !DILocation(line: 102, column: 13, scope: !9774)
!9780 = !DILocation(line: 106, column: 19, scope: !9781)
!9781 = distinct !DILexicalBlock(scope: !9782, file: !864, line: 106, column: 19)
!9782 = distinct !DILexicalBlock(scope: !9774, file: !864, line: 104, column: 13)
!9783 = !DILocation(line: 106, column: 27, scope: !9781)
!9784 = !DILocation(line: 107, column: 19, scope: !9781)
!9785 = !DILocation(line: 107, column: 45, scope: !9781)
!9786 = !DILocation(line: 107, column: 55, scope: !9781)
!9787 = !DILocation(line: 107, column: 65, scope: !9781)
!9788 = !DILocation(line: 107, column: 63, scope: !9781)
!9789 = !DILocation(line: 107, column: 53, scope: !9781)
!9790 = !DILocation(line: 108, column: 45, scope: !9781)
!9791 = !DILocation(line: 108, column: 55, scope: !9781)
!9792 = !DILocation(line: 108, column: 65, scope: !9781)
!9793 = !DILocation(line: 108, column: 63, scope: !9781)
!9794 = !DILocation(line: 108, column: 53, scope: !9781)
!9795 = !DILocation(line: 108, column: 68, scope: !9781)
!9796 = !DILocation(line: 107, column: 22, scope: !9781)
!9797 = !DILocation(line: 106, column: 19, scope: !9782)
!9798 = !DILocation(line: 112, column: 29, scope: !9799)
!9799 = distinct !DILexicalBlock(scope: !9781, file: !864, line: 109, column: 17)
!9800 = !DILocation(line: 113, column: 17, scope: !9799)
!9801 = !DILocation(line: 115, column: 9, scope: !9765)
!9802 = !DILocation(line: 116, column: 5, scope: !9757)
!9803 = !DILocation(line: 93, column: 28, scope: !9752)
!9804 = !DILocation(line: 93, column: 3, scope: !9752)
!9805 = distinct !{!9805, !9754, !9806}
!9806 = !DILocation(line: 116, column: 5, scope: !9749)
!9807 = !DILocation(line: 117, column: 7, scope: !9808)
!9808 = distinct !DILexicalBlock(scope: !9726, file: !864, line: 117, column: 7)
!9809 = !DILocation(line: 117, column: 7, scope: !9726)
!9810 = !DILocation(line: 118, column: 5, scope: !9808)
!9811 = !DILocation(line: 120, column: 12, scope: !9808)
!9812 = !DILocation(line: 120, column: 5, scope: !9808)
!9813 = !DILocation(line: 121, column: 1, scope: !9726)
!9814 = distinct !DISubprogram(name: "argmatch_invalid", scope: !864, file: !864, line: 129, type: !9815, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9815 = !DISubroutineType(types: !9816)
!9816 = !{null, !90, !90, !823}
!9817 = !DILocalVariable(name: "context", arg: 1, scope: !9814, file: !864, line: 129, type: !90)
!9818 = !DILocation(line: 129, column: 31, scope: !9814)
!9819 = !DILocalVariable(name: "value", arg: 2, scope: !9814, file: !864, line: 129, type: !90)
!9820 = !DILocation(line: 129, column: 52, scope: !9814)
!9821 = !DILocalVariable(name: "problem", arg: 3, scope: !9814, file: !864, line: 129, type: !823)
!9822 = !DILocation(line: 129, column: 69, scope: !9814)
!9823 = !DILocalVariable(name: "format", scope: !9814, file: !864, line: 131, type: !90)
!9824 = !DILocation(line: 131, column: 15, scope: !9814)
!9825 = !DILocation(line: 131, column: 25, scope: !9814)
!9826 = !DILocation(line: 131, column: 33, scope: !9814)
!9827 = !DILocation(line: 132, column: 27, scope: !9814)
!9828 = !DILocation(line: 133, column: 27, scope: !9814)
!9829 = !DILocation(line: 135, column: 16, scope: !9814)
!9830 = !DILocation(line: 135, column: 69, scope: !9814)
!9831 = !DILocation(line: 135, column: 24, scope: !9814)
!9832 = !DILocation(line: 136, column: 22, scope: !9814)
!9833 = !DILocation(line: 136, column: 10, scope: !9814)
!9834 = !DILocation(line: 135, column: 3, scope: !9814)
!9835 = !DILocation(line: 137, column: 1, scope: !9814)
!9836 = distinct !DISubprogram(name: "argmatch_valid", scope: !864, file: !864, line: 144, type: !9837, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9837 = !DISubroutineType(types: !9838)
!9838 = !{null, !824, !85, !52}
!9839 = !DILocalVariable(name: "arglist", arg: 1, scope: !9836, file: !864, line: 144, type: !824)
!9840 = !DILocation(line: 144, column: 36, scope: !9836)
!9841 = !DILocalVariable(name: "vallist", arg: 2, scope: !9836, file: !864, line: 145, type: !85)
!9842 = !DILocation(line: 145, column: 29, scope: !9836)
!9843 = !DILocalVariable(name: "valsize", arg: 3, scope: !9836, file: !864, line: 145, type: !52)
!9844 = !DILocation(line: 145, column: 45, scope: !9836)
!9845 = !DILocalVariable(name: "i", scope: !9836, file: !864, line: 147, type: !52)
!9846 = !DILocation(line: 147, column: 10, scope: !9836)
!9847 = !DILocalVariable(name: "last_val", scope: !9836, file: !864, line: 148, type: !90)
!9848 = !DILocation(line: 148, column: 15, scope: !9836)
!9849 = !DILocation(line: 152, column: 3, scope: !9836)
!9850 = !DILocation(line: 153, column: 10, scope: !9851)
!9851 = distinct !DILexicalBlock(scope: !9836, file: !864, line: 153, column: 3)
!9852 = !DILocation(line: 153, column: 8, scope: !9851)
!9853 = !DILocation(line: 153, column: 15, scope: !9854)
!9854 = distinct !DILexicalBlock(scope: !9851, file: !864, line: 153, column: 3)
!9855 = !DILocation(line: 153, column: 23, scope: !9854)
!9856 = !DILocation(line: 153, column: 3, scope: !9851)
!9857 = !DILocation(line: 154, column: 10, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9854, file: !864, line: 154, column: 9)
!9859 = !DILocation(line: 154, column: 12, scope: !9858)
!9860 = !DILocation(line: 155, column: 9, scope: !9858)
!9861 = !DILocation(line: 155, column: 20, scope: !9858)
!9862 = !DILocation(line: 155, column: 45, scope: !9858)
!9863 = !DILocation(line: 155, column: 55, scope: !9858)
!9864 = !DILocation(line: 155, column: 65, scope: !9858)
!9865 = !DILocation(line: 155, column: 63, scope: !9858)
!9866 = !DILocation(line: 155, column: 53, scope: !9858)
!9867 = !DILocation(line: 155, column: 68, scope: !9858)
!9868 = !DILocation(line: 155, column: 12, scope: !9858)
!9869 = !DILocation(line: 154, column: 9, scope: !9854)
!9870 = !DILocation(line: 157, column: 18, scope: !9871)
!9871 = distinct !DILexicalBlock(scope: !9858, file: !864, line: 156, column: 7)
!9872 = !DILocation(line: 157, column: 45, scope: !9871)
!9873 = !DILocation(line: 157, column: 53, scope: !9871)
!9874 = !DILocation(line: 157, column: 38, scope: !9871)
!9875 = !DILocation(line: 157, column: 9, scope: !9871)
!9876 = !DILocation(line: 158, column: 35, scope: !9871)
!9877 = !DILocation(line: 158, column: 45, scope: !9871)
!9878 = !DILocation(line: 158, column: 55, scope: !9871)
!9879 = !DILocation(line: 158, column: 53, scope: !9871)
!9880 = !DILocation(line: 158, column: 43, scope: !9871)
!9881 = !DILocation(line: 158, column: 18, scope: !9871)
!9882 = !DILocation(line: 159, column: 7, scope: !9871)
!9883 = !DILocation(line: 162, column: 18, scope: !9884)
!9884 = distinct !DILexicalBlock(scope: !9858, file: !864, line: 161, column: 7)
!9885 = !DILocation(line: 162, column: 41, scope: !9884)
!9886 = !DILocation(line: 162, column: 49, scope: !9884)
!9887 = !DILocation(line: 162, column: 34, scope: !9884)
!9888 = !DILocation(line: 162, column: 9, scope: !9884)
!9889 = !DILocation(line: 155, column: 75, scope: !9858)
!9890 = !DILocation(line: 153, column: 28, scope: !9854)
!9891 = !DILocation(line: 153, column: 3, scope: !9854)
!9892 = distinct !{!9892, !9856, !9893}
!9893 = !DILocation(line: 163, column: 7, scope: !9851)
!9894 = !DILocation(line: 164, column: 3, scope: !9836)
!9895 = !DILocation(line: 165, column: 1, scope: !9836)
!9896 = distinct !DISubprogram(name: "__xargmatch_internal", scope: !864, file: !864, line: 174, type: !9897, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9897 = !DISubroutineType(types: !9898)
!9898 = !{!823, !90, !90, !824, !85, !52, !348}
!9899 = !DILocalVariable(name: "context", arg: 1, scope: !9896, file: !864, line: 174, type: !90)
!9900 = !DILocation(line: 174, column: 35, scope: !9896)
!9901 = !DILocalVariable(name: "arg", arg: 2, scope: !9896, file: !864, line: 175, type: !90)
!9902 = !DILocation(line: 175, column: 35, scope: !9896)
!9903 = !DILocalVariable(name: "arglist", arg: 3, scope: !9896, file: !864, line: 175, type: !824)
!9904 = !DILocation(line: 175, column: 59, scope: !9896)
!9905 = !DILocalVariable(name: "vallist", arg: 4, scope: !9896, file: !864, line: 176, type: !85)
!9906 = !DILocation(line: 176, column: 35, scope: !9896)
!9907 = !DILocalVariable(name: "valsize", arg: 5, scope: !9896, file: !864, line: 176, type: !52)
!9908 = !DILocation(line: 176, column: 51, scope: !9896)
!9909 = !DILocalVariable(name: "exit_fn", arg: 6, scope: !9896, file: !864, line: 177, type: !348)
!9910 = !DILocation(line: 177, column: 40, scope: !9896)
!9911 = !DILocalVariable(name: "res", scope: !9896, file: !864, line: 179, type: !823)
!9912 = !DILocation(line: 179, column: 13, scope: !9896)
!9913 = !DILocation(line: 179, column: 29, scope: !9896)
!9914 = !DILocation(line: 179, column: 34, scope: !9896)
!9915 = !DILocation(line: 179, column: 43, scope: !9896)
!9916 = !DILocation(line: 179, column: 52, scope: !9896)
!9917 = !DILocation(line: 179, column: 19, scope: !9896)
!9918 = !DILocation(line: 180, column: 7, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9896, file: !864, line: 180, column: 7)
!9920 = !DILocation(line: 180, column: 11, scope: !9919)
!9921 = !DILocation(line: 180, column: 7, scope: !9896)
!9922 = !DILocation(line: 182, column: 12, scope: !9919)
!9923 = !DILocation(line: 182, column: 5, scope: !9919)
!9924 = !DILocation(line: 185, column: 21, scope: !9896)
!9925 = !DILocation(line: 185, column: 30, scope: !9896)
!9926 = !DILocation(line: 185, column: 35, scope: !9896)
!9927 = !DILocation(line: 185, column: 3, scope: !9896)
!9928 = !DILocation(line: 186, column: 19, scope: !9896)
!9929 = !DILocation(line: 186, column: 28, scope: !9896)
!9930 = !DILocation(line: 186, column: 37, scope: !9896)
!9931 = !DILocation(line: 186, column: 3, scope: !9896)
!9932 = !DILocation(line: 187, column: 5, scope: !9896)
!9933 = !DILocation(line: 187, column: 3, scope: !9896)
!9934 = !DILocation(line: 189, column: 3, scope: !9896)
!9935 = !DILocation(line: 190, column: 1, scope: !9896)
!9936 = distinct !DISubprogram(name: "argmatch_to_argument", scope: !864, file: !864, line: 195, type: !9937, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !820, retainedNodes: !433)
!9937 = !DISubroutineType(types: !9938)
!9938 = !{!90, !85, !824, !85, !52}
!9939 = !DILocalVariable(name: "value", arg: 1, scope: !9936, file: !864, line: 195, type: !85)
!9940 = !DILocation(line: 195, column: 35, scope: !9936)
!9941 = !DILocalVariable(name: "arglist", arg: 2, scope: !9936, file: !864, line: 196, type: !824)
!9942 = !DILocation(line: 196, column: 42, scope: !9936)
!9943 = !DILocalVariable(name: "vallist", arg: 3, scope: !9936, file: !864, line: 197, type: !85)
!9944 = !DILocation(line: 197, column: 35, scope: !9936)
!9945 = !DILocalVariable(name: "valsize", arg: 4, scope: !9936, file: !864, line: 197, type: !52)
!9946 = !DILocation(line: 197, column: 51, scope: !9936)
!9947 = !DILocalVariable(name: "i", scope: !9936, file: !864, line: 199, type: !52)
!9948 = !DILocation(line: 199, column: 10, scope: !9936)
!9949 = !DILocation(line: 201, column: 10, scope: !9950)
!9950 = distinct !DILexicalBlock(scope: !9936, file: !864, line: 201, column: 3)
!9951 = !DILocation(line: 201, column: 8, scope: !9950)
!9952 = !DILocation(line: 201, column: 15, scope: !9953)
!9953 = distinct !DILexicalBlock(scope: !9950, file: !864, line: 201, column: 3)
!9954 = !DILocation(line: 201, column: 23, scope: !9953)
!9955 = !DILocation(line: 201, column: 3, scope: !9950)
!9956 = !DILocation(line: 202, column: 18, scope: !9957)
!9957 = distinct !DILexicalBlock(scope: !9953, file: !864, line: 202, column: 9)
!9958 = !DILocation(line: 202, column: 40, scope: !9957)
!9959 = !DILocation(line: 202, column: 50, scope: !9957)
!9960 = !DILocation(line: 202, column: 60, scope: !9957)
!9961 = !DILocation(line: 202, column: 58, scope: !9957)
!9962 = !DILocation(line: 202, column: 48, scope: !9957)
!9963 = !DILocation(line: 202, column: 63, scope: !9957)
!9964 = !DILocation(line: 202, column: 10, scope: !9957)
!9965 = !DILocation(line: 202, column: 9, scope: !9953)
!9966 = !DILocation(line: 203, column: 14, scope: !9957)
!9967 = !DILocation(line: 203, column: 22, scope: !9957)
!9968 = !DILocation(line: 203, column: 7, scope: !9957)
!9969 = !DILocation(line: 202, column: 70, scope: !9957)
!9970 = !DILocation(line: 201, column: 28, scope: !9953)
!9971 = !DILocation(line: 201, column: 3, scope: !9953)
!9972 = distinct !{!9972, !9955, !9973}
!9973 = !DILocation(line: 203, column: 23, scope: !9950)
!9974 = !DILocation(line: 204, column: 3, scope: !9936)
!9975 = !DILocation(line: 205, column: 1, scope: !9936)
!9976 = distinct !DISubprogram(name: "close_stdout_set_file_name", scope: !911, file: !911, line: 51, type: !431, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !867, retainedNodes: !433)
!9977 = !DILocalVariable(name: "file", arg: 1, scope: !9976, file: !911, line: 51, type: !90)
!9978 = !DILocation(line: 51, column: 41, scope: !9976)
!9979 = !DILocation(line: 53, column: 15, scope: !9976)
!9980 = !DILocation(line: 53, column: 13, scope: !9976)
!9981 = !DILocation(line: 54, column: 1, scope: !9976)
!9982 = distinct !DISubprogram(name: "close_stdout_set_ignore_EPIPE", scope: !911, file: !911, line: 88, type: !9983, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !867, retainedNodes: !433)
!9983 = !DISubroutineType(types: !9984)
!9984 = !{null, !162}
!9985 = !DILocalVariable(name: "ignore", arg: 1, scope: !9982, file: !911, line: 88, type: !162)
!9986 = !DILocation(line: 88, column: 37, scope: !9982)
!9987 = !DILocation(line: 90, column: 18, scope: !9982)
!9988 = !DILocation(line: 90, column: 16, scope: !9982)
!9989 = !DILocation(line: 91, column: 1, scope: !9982)
!9990 = distinct !DISubprogram(name: "close_stdout", scope: !911, file: !911, line: 117, type: !235, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !867, retainedNodes: !433)
!9991 = !DILocation(line: 119, column: 21, scope: !9992)
!9992 = distinct !DILexicalBlock(scope: !9990, file: !911, line: 119, column: 7)
!9993 = !DILocation(line: 119, column: 7, scope: !9992)
!9994 = !DILocation(line: 119, column: 29, scope: !9992)
!9995 = !DILocation(line: 120, column: 7, scope: !9992)
!9996 = !DILocation(line: 120, column: 12, scope: !9992)
!9997 = !DILocation(line: 120, column: 25, scope: !9992)
!9998 = !DILocation(line: 120, column: 28, scope: !9992)
!9999 = !DILocation(line: 120, column: 34, scope: !9992)
!10000 = !DILocation(line: 119, column: 7, scope: !9990)
!10001 = !DILocalVariable(name: "write_error", scope: !10002, file: !911, line: 122, type: !90)
!10002 = distinct !DILexicalBlock(scope: !9992, file: !911, line: 121, column: 5)
!10003 = !DILocation(line: 122, column: 19, scope: !10002)
!10004 = !DILocation(line: 122, column: 33, scope: !10002)
!10005 = !DILocation(line: 123, column: 11, scope: !10006)
!10006 = distinct !DILexicalBlock(scope: !10002, file: !911, line: 123, column: 11)
!10007 = !DILocation(line: 123, column: 11, scope: !10002)
!10008 = !DILocation(line: 124, column: 19, scope: !10006)
!10009 = !DILocation(line: 124, column: 52, scope: !10006)
!10010 = !DILocation(line: 124, column: 36, scope: !10006)
!10011 = !DILocation(line: 125, column: 16, scope: !10006)
!10012 = !DILocation(line: 124, column: 9, scope: !10006)
!10013 = !DILocation(line: 127, column: 19, scope: !10006)
!10014 = !DILocation(line: 127, column: 32, scope: !10006)
!10015 = !DILocation(line: 127, column: 9, scope: !10006)
!10016 = !DILocation(line: 129, column: 14, scope: !10002)
!10017 = !DILocation(line: 129, column: 7, scope: !10002)
!10018 = !DILocation(line: 134, column: 42, scope: !10019)
!10019 = distinct !DILexicalBlock(scope: !9990, file: !911, line: 134, column: 7)
!10020 = !DILocation(line: 134, column: 28, scope: !10019)
!10021 = !DILocation(line: 134, column: 50, scope: !10019)
!10022 = !DILocation(line: 134, column: 7, scope: !9990)
!10023 = !DILocation(line: 135, column: 12, scope: !10019)
!10024 = !DILocation(line: 135, column: 5, scope: !10019)
!10025 = !DILocation(line: 136, column: 1, scope: !9990)
!10026 = distinct !DISubprogram(name: "md5_init_ctx", scope: !925, file: !925, line: 76, type: !10027, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10027 = !DISubroutineType(types: !10028)
!10028 = !{null, !10029}
!10029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10030, size: 64)
!10030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "md5_ctx", file: !564, line: 69, size: 1248, elements: !10031)
!10031 = !{!10032, !10033, !10034, !10035, !10036, !10037, !10038}
!10032 = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !10030, file: !564, line: 71, baseType: !560, size: 32)
!10033 = !DIDerivedType(tag: DW_TAG_member, name: "B", scope: !10030, file: !564, line: 72, baseType: !560, size: 32, offset: 32)
!10034 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !10030, file: !564, line: 73, baseType: !560, size: 32, offset: 64)
!10035 = !DIDerivedType(tag: DW_TAG_member, name: "D", scope: !10030, file: !564, line: 74, baseType: !560, size: 32, offset: 96)
!10036 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !10030, file: !564, line: 76, baseType: !571, size: 64, offset: 128)
!10037 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !10030, file: !564, line: 77, baseType: !560, size: 32, offset: 192)
!10038 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !10030, file: !564, line: 78, baseType: !574, size: 1024, offset: 224)
!10039 = !DILocalVariable(name: "ctx", arg: 1, scope: !10026, file: !925, line: 76, type: !10029)
!10040 = !DILocation(line: 76, column: 31, scope: !10026)
!10041 = !DILocation(line: 78, column: 3, scope: !10026)
!10042 = !DILocation(line: 78, column: 8, scope: !10026)
!10043 = !DILocation(line: 78, column: 10, scope: !10026)
!10044 = !DILocation(line: 79, column: 3, scope: !10026)
!10045 = !DILocation(line: 79, column: 8, scope: !10026)
!10046 = !DILocation(line: 79, column: 10, scope: !10026)
!10047 = !DILocation(line: 80, column: 3, scope: !10026)
!10048 = !DILocation(line: 80, column: 8, scope: !10026)
!10049 = !DILocation(line: 80, column: 10, scope: !10026)
!10050 = !DILocation(line: 81, column: 3, scope: !10026)
!10051 = !DILocation(line: 81, column: 8, scope: !10026)
!10052 = !DILocation(line: 81, column: 10, scope: !10026)
!10053 = !DILocation(line: 83, column: 19, scope: !10026)
!10054 = !DILocation(line: 83, column: 24, scope: !10026)
!10055 = !DILocation(line: 83, column: 33, scope: !10026)
!10056 = !DILocation(line: 83, column: 3, scope: !10026)
!10057 = !DILocation(line: 83, column: 8, scope: !10026)
!10058 = !DILocation(line: 83, column: 17, scope: !10026)
!10059 = !DILocation(line: 84, column: 3, scope: !10026)
!10060 = !DILocation(line: 84, column: 8, scope: !10026)
!10061 = !DILocation(line: 84, column: 15, scope: !10026)
!10062 = !DILocation(line: 85, column: 1, scope: !10026)
!10063 = distinct !DISubprogram(name: "md5_read_ctx", scope: !925, file: !925, line: 99, type: !10064, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10064 = !DISubroutineType(types: !10065)
!10065 = !{!47, !10066, !47}
!10066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10067, size: 64)
!10067 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10030)
!10068 = !DILocalVariable(name: "ctx", arg: 1, scope: !10063, file: !925, line: 99, type: !10066)
!10069 = !DILocation(line: 99, column: 37, scope: !10063)
!10070 = !DILocalVariable(name: "resbuf", arg: 2, scope: !10063, file: !925, line: 99, type: !47)
!10071 = !DILocation(line: 99, column: 48, scope: !10063)
!10072 = !DILocalVariable(name: "r", scope: !10063, file: !925, line: 101, type: !7)
!10073 = !DILocation(line: 101, column: 9, scope: !10063)
!10074 = !DILocation(line: 101, column: 13, scope: !10063)
!10075 = !DILocation(line: 102, column: 15, scope: !10063)
!10076 = !DILocation(line: 102, column: 17, scope: !10063)
!10077 = !DILocation(line: 102, column: 38, scope: !10063)
!10078 = !DILocation(line: 102, column: 3, scope: !10063)
!10079 = !DILocation(line: 103, column: 15, scope: !10063)
!10080 = !DILocation(line: 103, column: 17, scope: !10063)
!10081 = !DILocation(line: 103, column: 38, scope: !10063)
!10082 = !DILocation(line: 103, column: 3, scope: !10063)
!10083 = !DILocation(line: 104, column: 15, scope: !10063)
!10084 = !DILocation(line: 104, column: 17, scope: !10063)
!10085 = !DILocation(line: 104, column: 38, scope: !10063)
!10086 = !DILocation(line: 104, column: 3, scope: !10063)
!10087 = !DILocation(line: 105, column: 15, scope: !10063)
!10088 = !DILocation(line: 105, column: 17, scope: !10063)
!10089 = !DILocation(line: 105, column: 38, scope: !10063)
!10090 = !DILocation(line: 105, column: 3, scope: !10063)
!10091 = !DILocation(line: 107, column: 10, scope: !10063)
!10092 = !DILocation(line: 107, column: 3, scope: !10063)
!10093 = distinct !DISubprogram(name: "set_uint32", scope: !925, file: !925, line: 91, type: !10094, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10094 = !DISubroutineType(types: !10095)
!10095 = !{null, !7, !560}
!10096 = !DILocalVariable(name: "cp", arg: 1, scope: !10093, file: !925, line: 91, type: !7)
!10097 = !DILocation(line: 91, column: 19, scope: !10093)
!10098 = !DILocalVariable(name: "v", arg: 2, scope: !10093, file: !925, line: 91, type: !560)
!10099 = !DILocation(line: 91, column: 32, scope: !10093)
!10100 = !DILocation(line: 93, column: 11, scope: !10093)
!10101 = !DILocation(line: 93, column: 3, scope: !10093)
!10102 = !DILocation(line: 94, column: 1, scope: !10093)
!10103 = distinct !DISubprogram(name: "md5_finish_ctx", scope: !925, file: !925, line: 113, type: !10104, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10104 = !DISubroutineType(types: !10105)
!10105 = !{!47, !10029, !47}
!10106 = !DILocalVariable(name: "ctx", arg: 1, scope: !10103, file: !925, line: 113, type: !10029)
!10107 = !DILocation(line: 113, column: 33, scope: !10103)
!10108 = !DILocalVariable(name: "resbuf", arg: 2, scope: !10103, file: !925, line: 113, type: !47)
!10109 = !DILocation(line: 113, column: 44, scope: !10103)
!10110 = !DILocalVariable(name: "bytes", scope: !10103, file: !925, line: 116, type: !560)
!10111 = !DILocation(line: 116, column: 12, scope: !10103)
!10112 = !DILocation(line: 116, column: 20, scope: !10103)
!10113 = !DILocation(line: 116, column: 25, scope: !10103)
!10114 = !DILocalVariable(name: "size", scope: !10103, file: !925, line: 117, type: !52)
!10115 = !DILocation(line: 117, column: 10, scope: !10103)
!10116 = !DILocation(line: 117, column: 18, scope: !10103)
!10117 = !DILocation(line: 117, column: 24, scope: !10103)
!10118 = !DILocation(line: 117, column: 17, scope: !10103)
!10119 = !DILocation(line: 120, column: 20, scope: !10103)
!10120 = !DILocation(line: 120, column: 3, scope: !10103)
!10121 = !DILocation(line: 120, column: 8, scope: !10103)
!10122 = !DILocation(line: 120, column: 17, scope: !10103)
!10123 = !DILocation(line: 121, column: 7, scope: !10124)
!10124 = distinct !DILexicalBlock(scope: !10103, file: !925, line: 121, column: 7)
!10125 = !DILocation(line: 121, column: 12, scope: !10124)
!10126 = !DILocation(line: 121, column: 23, scope: !10124)
!10127 = !DILocation(line: 121, column: 21, scope: !10124)
!10128 = !DILocation(line: 121, column: 7, scope: !10103)
!10129 = !DILocation(line: 122, column: 7, scope: !10124)
!10130 = !DILocation(line: 122, column: 12, scope: !10124)
!10131 = !DILocation(line: 122, column: 5, scope: !10124)
!10132 = !DILocation(line: 125, column: 27, scope: !10103)
!10133 = !DILocation(line: 125, column: 3, scope: !10103)
!10134 = !DILocation(line: 125, column: 8, scope: !10103)
!10135 = !DILocation(line: 125, column: 15, scope: !10103)
!10136 = !DILocation(line: 125, column: 20, scope: !10103)
!10137 = !DILocation(line: 125, column: 25, scope: !10103)
!10138 = !DILocation(line: 126, column: 27, scope: !10103)
!10139 = !DILocation(line: 126, column: 3, scope: !10103)
!10140 = !DILocation(line: 126, column: 8, scope: !10103)
!10141 = !DILocation(line: 126, column: 15, scope: !10103)
!10142 = !DILocation(line: 126, column: 20, scope: !10103)
!10143 = !DILocation(line: 126, column: 25, scope: !10103)
!10144 = !DILocation(line: 128, column: 22, scope: !10103)
!10145 = !DILocation(line: 128, column: 27, scope: !10103)
!10146 = !DILocation(line: 128, column: 12, scope: !10103)
!10147 = !DILocation(line: 128, column: 35, scope: !10103)
!10148 = !DILocation(line: 128, column: 53, scope: !10103)
!10149 = !DILocation(line: 128, column: 58, scope: !10103)
!10150 = !DILocation(line: 128, column: 63, scope: !10103)
!10151 = !DILocation(line: 128, column: 69, scope: !10103)
!10152 = !DILocation(line: 128, column: 67, scope: !10103)
!10153 = !DILocation(line: 128, column: 3, scope: !10103)
!10154 = !DILocation(line: 131, column: 22, scope: !10103)
!10155 = !DILocation(line: 131, column: 27, scope: !10103)
!10156 = !DILocation(line: 131, column: 35, scope: !10103)
!10157 = !DILocation(line: 131, column: 40, scope: !10103)
!10158 = !DILocation(line: 131, column: 45, scope: !10103)
!10159 = !DILocation(line: 131, column: 3, scope: !10103)
!10160 = !DILocation(line: 133, column: 24, scope: !10103)
!10161 = !DILocation(line: 133, column: 29, scope: !10103)
!10162 = !DILocation(line: 133, column: 10, scope: !10103)
!10163 = !DILocation(line: 133, column: 3, scope: !10103)
!10164 = distinct !DISubprogram(name: "md5_process_block", scope: !925, file: !925, line: 325, type: !10165, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10165 = !DISubroutineType(types: !10166)
!10166 = !{null, !85, !52, !10029}
!10167 = !DILocalVariable(name: "buffer", arg: 1, scope: !10164, file: !925, line: 325, type: !85)
!10168 = !DILocation(line: 325, column: 32, scope: !10164)
!10169 = !DILocalVariable(name: "len", arg: 2, scope: !10164, file: !925, line: 325, type: !52)
!10170 = !DILocation(line: 325, column: 47, scope: !10164)
!10171 = !DILocalVariable(name: "ctx", arg: 3, scope: !10164, file: !925, line: 325, type: !10029)
!10172 = !DILocation(line: 325, column: 68, scope: !10164)
!10173 = !DILocalVariable(name: "correct_words", scope: !10164, file: !925, line: 327, type: !920)
!10174 = !DILocation(line: 327, column: 12, scope: !10164)
!10175 = !DILocalVariable(name: "words", scope: !10164, file: !925, line: 328, type: !921)
!10176 = !DILocation(line: 328, column: 19, scope: !10164)
!10177 = !DILocation(line: 328, column: 27, scope: !10164)
!10178 = !DILocalVariable(name: "nwords", scope: !10164, file: !925, line: 329, type: !52)
!10179 = !DILocation(line: 329, column: 10, scope: !10164)
!10180 = !DILocation(line: 329, column: 19, scope: !10164)
!10181 = !DILocation(line: 329, column: 23, scope: !10164)
!10182 = !DILocalVariable(name: "endp", scope: !10164, file: !925, line: 330, type: !921)
!10183 = !DILocation(line: 330, column: 19, scope: !10164)
!10184 = !DILocation(line: 330, column: 26, scope: !10164)
!10185 = !DILocation(line: 330, column: 34, scope: !10164)
!10186 = !DILocation(line: 330, column: 32, scope: !10164)
!10187 = !DILocalVariable(name: "A", scope: !10164, file: !925, line: 331, type: !560)
!10188 = !DILocation(line: 331, column: 12, scope: !10164)
!10189 = !DILocation(line: 331, column: 16, scope: !10164)
!10190 = !DILocation(line: 331, column: 21, scope: !10164)
!10191 = !DILocalVariable(name: "B", scope: !10164, file: !925, line: 332, type: !560)
!10192 = !DILocation(line: 332, column: 12, scope: !10164)
!10193 = !DILocation(line: 332, column: 16, scope: !10164)
!10194 = !DILocation(line: 332, column: 21, scope: !10164)
!10195 = !DILocalVariable(name: "C", scope: !10164, file: !925, line: 333, type: !560)
!10196 = !DILocation(line: 333, column: 12, scope: !10164)
!10197 = !DILocation(line: 333, column: 16, scope: !10164)
!10198 = !DILocation(line: 333, column: 21, scope: !10164)
!10199 = !DILocalVariable(name: "D", scope: !10164, file: !925, line: 334, type: !560)
!10200 = !DILocation(line: 334, column: 12, scope: !10164)
!10201 = !DILocation(line: 334, column: 16, scope: !10164)
!10202 = !DILocation(line: 334, column: 21, scope: !10164)
!10203 = !DILocalVariable(name: "lolen", scope: !10164, file: !925, line: 335, type: !560)
!10204 = !DILocation(line: 335, column: 12, scope: !10164)
!10205 = !DILocation(line: 335, column: 20, scope: !10164)
!10206 = !DILocation(line: 340, column: 20, scope: !10164)
!10207 = !DILocation(line: 340, column: 3, scope: !10164)
!10208 = !DILocation(line: 340, column: 8, scope: !10164)
!10209 = !DILocation(line: 340, column: 17, scope: !10164)
!10210 = !DILocation(line: 341, column: 21, scope: !10164)
!10211 = !DILocation(line: 341, column: 25, scope: !10164)
!10212 = !DILocation(line: 341, column: 31, scope: !10164)
!10213 = !DILocation(line: 341, column: 40, scope: !10164)
!10214 = !DILocation(line: 341, column: 45, scope: !10164)
!10215 = !DILocation(line: 341, column: 56, scope: !10164)
!10216 = !DILocation(line: 341, column: 54, scope: !10164)
!10217 = !DILocation(line: 341, column: 39, scope: !10164)
!10218 = !DILocation(line: 341, column: 37, scope: !10164)
!10219 = !DILocation(line: 341, column: 3, scope: !10164)
!10220 = !DILocation(line: 341, column: 8, scope: !10164)
!10221 = !DILocation(line: 341, column: 17, scope: !10164)
!10222 = !DILocation(line: 345, column: 3, scope: !10164)
!10223 = !DILocation(line: 345, column: 10, scope: !10164)
!10224 = !DILocation(line: 345, column: 18, scope: !10164)
!10225 = !DILocation(line: 345, column: 16, scope: !10164)
!10226 = !DILocalVariable(name: "cwp", scope: !10227, file: !925, line: 347, type: !923)
!10227 = distinct !DILexicalBlock(scope: !10164, file: !925, line: 346, column: 5)
!10228 = !DILocation(line: 347, column: 17, scope: !10227)
!10229 = !DILocation(line: 347, column: 23, scope: !10227)
!10230 = !DILocalVariable(name: "A_save", scope: !10227, file: !925, line: 348, type: !560)
!10231 = !DILocation(line: 348, column: 16, scope: !10227)
!10232 = !DILocation(line: 348, column: 25, scope: !10227)
!10233 = !DILocalVariable(name: "B_save", scope: !10227, file: !925, line: 349, type: !560)
!10234 = !DILocation(line: 349, column: 16, scope: !10227)
!10235 = !DILocation(line: 349, column: 25, scope: !10227)
!10236 = !DILocalVariable(name: "C_save", scope: !10227, file: !925, line: 350, type: !560)
!10237 = !DILocation(line: 350, column: 16, scope: !10227)
!10238 = !DILocation(line: 350, column: 25, scope: !10227)
!10239 = !DILocalVariable(name: "D_save", scope: !10227, file: !925, line: 351, type: !560)
!10240 = !DILocation(line: 351, column: 16, scope: !10227)
!10241 = !DILocation(line: 351, column: 25, scope: !10227)
!10242 = !DILocation(line: 385, column: 7, scope: !10227)
!10243 = !DILocation(line: 385, column: 7, scope: !10244)
!10244 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 385, column: 7)
!10245 = !DILocation(line: 386, column: 7, scope: !10227)
!10246 = !DILocation(line: 386, column: 7, scope: !10247)
!10247 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 386, column: 7)
!10248 = !DILocation(line: 387, column: 7, scope: !10227)
!10249 = !DILocation(line: 387, column: 7, scope: !10250)
!10250 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 387, column: 7)
!10251 = !DILocation(line: 388, column: 7, scope: !10227)
!10252 = !DILocation(line: 388, column: 7, scope: !10253)
!10253 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 388, column: 7)
!10254 = !DILocation(line: 389, column: 7, scope: !10227)
!10255 = !DILocation(line: 389, column: 7, scope: !10256)
!10256 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 389, column: 7)
!10257 = !DILocation(line: 390, column: 7, scope: !10227)
!10258 = !DILocation(line: 390, column: 7, scope: !10259)
!10259 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 390, column: 7)
!10260 = !DILocation(line: 391, column: 7, scope: !10227)
!10261 = !DILocation(line: 391, column: 7, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 391, column: 7)
!10263 = !DILocation(line: 392, column: 7, scope: !10227)
!10264 = !DILocation(line: 392, column: 7, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 392, column: 7)
!10266 = !DILocation(line: 393, column: 7, scope: !10227)
!10267 = !DILocation(line: 393, column: 7, scope: !10268)
!10268 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 393, column: 7)
!10269 = !DILocation(line: 394, column: 7, scope: !10227)
!10270 = !DILocation(line: 394, column: 7, scope: !10271)
!10271 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 394, column: 7)
!10272 = !DILocation(line: 395, column: 7, scope: !10227)
!10273 = !DILocation(line: 395, column: 7, scope: !10274)
!10274 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 395, column: 7)
!10275 = !DILocation(line: 396, column: 7, scope: !10227)
!10276 = !DILocation(line: 396, column: 7, scope: !10277)
!10277 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 396, column: 7)
!10278 = !DILocation(line: 397, column: 7, scope: !10227)
!10279 = !DILocation(line: 397, column: 7, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 397, column: 7)
!10281 = !DILocation(line: 398, column: 7, scope: !10227)
!10282 = !DILocation(line: 398, column: 7, scope: !10283)
!10283 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 398, column: 7)
!10284 = !DILocation(line: 399, column: 7, scope: !10227)
!10285 = !DILocation(line: 399, column: 7, scope: !10286)
!10286 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 399, column: 7)
!10287 = !DILocation(line: 400, column: 7, scope: !10227)
!10288 = !DILocation(line: 400, column: 7, scope: !10289)
!10289 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 400, column: 7)
!10290 = !DILocation(line: 416, column: 7, scope: !10227)
!10291 = !DILocation(line: 416, column: 7, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 416, column: 7)
!10293 = !DILocation(line: 417, column: 7, scope: !10227)
!10294 = !DILocation(line: 417, column: 7, scope: !10295)
!10295 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 417, column: 7)
!10296 = !DILocation(line: 418, column: 7, scope: !10227)
!10297 = !DILocation(line: 418, column: 7, scope: !10298)
!10298 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 418, column: 7)
!10299 = !DILocation(line: 419, column: 7, scope: !10227)
!10300 = !DILocation(line: 419, column: 7, scope: !10301)
!10301 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 419, column: 7)
!10302 = !DILocation(line: 420, column: 7, scope: !10227)
!10303 = !DILocation(line: 420, column: 7, scope: !10304)
!10304 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 420, column: 7)
!10305 = !DILocation(line: 421, column: 7, scope: !10227)
!10306 = !DILocation(line: 421, column: 7, scope: !10307)
!10307 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 421, column: 7)
!10308 = !DILocation(line: 422, column: 7, scope: !10227)
!10309 = !DILocation(line: 422, column: 7, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 422, column: 7)
!10311 = !DILocation(line: 423, column: 7, scope: !10227)
!10312 = !DILocation(line: 423, column: 7, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 423, column: 7)
!10314 = !DILocation(line: 424, column: 7, scope: !10227)
!10315 = !DILocation(line: 424, column: 7, scope: !10316)
!10316 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 424, column: 7)
!10317 = !DILocation(line: 425, column: 7, scope: !10227)
!10318 = !DILocation(line: 425, column: 7, scope: !10319)
!10319 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 425, column: 7)
!10320 = !DILocation(line: 426, column: 7, scope: !10227)
!10321 = !DILocation(line: 426, column: 7, scope: !10322)
!10322 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 426, column: 7)
!10323 = !DILocation(line: 427, column: 7, scope: !10227)
!10324 = !DILocation(line: 427, column: 7, scope: !10325)
!10325 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 427, column: 7)
!10326 = !DILocation(line: 428, column: 7, scope: !10227)
!10327 = !DILocation(line: 428, column: 7, scope: !10328)
!10328 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 428, column: 7)
!10329 = !DILocation(line: 429, column: 7, scope: !10227)
!10330 = !DILocation(line: 429, column: 7, scope: !10331)
!10331 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 429, column: 7)
!10332 = !DILocation(line: 430, column: 7, scope: !10227)
!10333 = !DILocation(line: 430, column: 7, scope: !10334)
!10334 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 430, column: 7)
!10335 = !DILocation(line: 431, column: 7, scope: !10227)
!10336 = !DILocation(line: 431, column: 7, scope: !10337)
!10337 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 431, column: 7)
!10338 = !DILocation(line: 434, column: 7, scope: !10227)
!10339 = !DILocation(line: 434, column: 7, scope: !10340)
!10340 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 434, column: 7)
!10341 = !DILocation(line: 435, column: 7, scope: !10227)
!10342 = !DILocation(line: 435, column: 7, scope: !10343)
!10343 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 435, column: 7)
!10344 = !DILocation(line: 436, column: 7, scope: !10227)
!10345 = !DILocation(line: 436, column: 7, scope: !10346)
!10346 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 436, column: 7)
!10347 = !DILocation(line: 437, column: 7, scope: !10227)
!10348 = !DILocation(line: 437, column: 7, scope: !10349)
!10349 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 437, column: 7)
!10350 = !DILocation(line: 438, column: 7, scope: !10227)
!10351 = !DILocation(line: 438, column: 7, scope: !10352)
!10352 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 438, column: 7)
!10353 = !DILocation(line: 439, column: 7, scope: !10227)
!10354 = !DILocation(line: 439, column: 7, scope: !10355)
!10355 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 439, column: 7)
!10356 = !DILocation(line: 440, column: 7, scope: !10227)
!10357 = !DILocation(line: 440, column: 7, scope: !10358)
!10358 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 440, column: 7)
!10359 = !DILocation(line: 441, column: 7, scope: !10227)
!10360 = !DILocation(line: 441, column: 7, scope: !10361)
!10361 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 441, column: 7)
!10362 = !DILocation(line: 442, column: 7, scope: !10227)
!10363 = !DILocation(line: 442, column: 7, scope: !10364)
!10364 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 442, column: 7)
!10365 = !DILocation(line: 443, column: 7, scope: !10227)
!10366 = !DILocation(line: 443, column: 7, scope: !10367)
!10367 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 443, column: 7)
!10368 = !DILocation(line: 444, column: 7, scope: !10227)
!10369 = !DILocation(line: 444, column: 7, scope: !10370)
!10370 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 444, column: 7)
!10371 = !DILocation(line: 445, column: 7, scope: !10227)
!10372 = !DILocation(line: 445, column: 7, scope: !10373)
!10373 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 445, column: 7)
!10374 = !DILocation(line: 446, column: 7, scope: !10227)
!10375 = !DILocation(line: 446, column: 7, scope: !10376)
!10376 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 446, column: 7)
!10377 = !DILocation(line: 447, column: 7, scope: !10227)
!10378 = !DILocation(line: 447, column: 7, scope: !10379)
!10379 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 447, column: 7)
!10380 = !DILocation(line: 448, column: 7, scope: !10227)
!10381 = !DILocation(line: 448, column: 7, scope: !10382)
!10382 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 448, column: 7)
!10383 = !DILocation(line: 449, column: 7, scope: !10227)
!10384 = !DILocation(line: 449, column: 7, scope: !10385)
!10385 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 449, column: 7)
!10386 = !DILocation(line: 452, column: 7, scope: !10227)
!10387 = !DILocation(line: 452, column: 7, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 452, column: 7)
!10389 = !DILocation(line: 453, column: 7, scope: !10227)
!10390 = !DILocation(line: 453, column: 7, scope: !10391)
!10391 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 453, column: 7)
!10392 = !DILocation(line: 454, column: 7, scope: !10227)
!10393 = !DILocation(line: 454, column: 7, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 454, column: 7)
!10395 = !DILocation(line: 455, column: 7, scope: !10227)
!10396 = !DILocation(line: 455, column: 7, scope: !10397)
!10397 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 455, column: 7)
!10398 = !DILocation(line: 456, column: 7, scope: !10227)
!10399 = !DILocation(line: 456, column: 7, scope: !10400)
!10400 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 456, column: 7)
!10401 = !DILocation(line: 457, column: 7, scope: !10227)
!10402 = !DILocation(line: 457, column: 7, scope: !10403)
!10403 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 457, column: 7)
!10404 = !DILocation(line: 458, column: 7, scope: !10227)
!10405 = !DILocation(line: 458, column: 7, scope: !10406)
!10406 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 458, column: 7)
!10407 = !DILocation(line: 459, column: 7, scope: !10227)
!10408 = !DILocation(line: 459, column: 7, scope: !10409)
!10409 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 459, column: 7)
!10410 = !DILocation(line: 460, column: 7, scope: !10227)
!10411 = !DILocation(line: 460, column: 7, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 460, column: 7)
!10413 = !DILocation(line: 461, column: 7, scope: !10227)
!10414 = !DILocation(line: 461, column: 7, scope: !10415)
!10415 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 461, column: 7)
!10416 = !DILocation(line: 462, column: 7, scope: !10227)
!10417 = !DILocation(line: 462, column: 7, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 462, column: 7)
!10419 = !DILocation(line: 463, column: 7, scope: !10227)
!10420 = !DILocation(line: 463, column: 7, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 463, column: 7)
!10422 = !DILocation(line: 464, column: 7, scope: !10227)
!10423 = !DILocation(line: 464, column: 7, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 464, column: 7)
!10425 = !DILocation(line: 465, column: 7, scope: !10227)
!10426 = !DILocation(line: 465, column: 7, scope: !10427)
!10427 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 465, column: 7)
!10428 = !DILocation(line: 466, column: 7, scope: !10227)
!10429 = !DILocation(line: 466, column: 7, scope: !10430)
!10430 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 466, column: 7)
!10431 = !DILocation(line: 467, column: 7, scope: !10227)
!10432 = !DILocation(line: 467, column: 7, scope: !10433)
!10433 = distinct !DILexicalBlock(scope: !10227, file: !925, line: 467, column: 7)
!10434 = !DILocation(line: 470, column: 12, scope: !10227)
!10435 = !DILocation(line: 470, column: 9, scope: !10227)
!10436 = !DILocation(line: 471, column: 12, scope: !10227)
!10437 = !DILocation(line: 471, column: 9, scope: !10227)
!10438 = !DILocation(line: 472, column: 12, scope: !10227)
!10439 = !DILocation(line: 472, column: 9, scope: !10227)
!10440 = !DILocation(line: 473, column: 12, scope: !10227)
!10441 = !DILocation(line: 473, column: 9, scope: !10227)
!10442 = distinct !{!10442, !10222, !10443}
!10443 = !DILocation(line: 474, column: 5, scope: !10164)
!10444 = !DILocation(line: 477, column: 12, scope: !10164)
!10445 = !DILocation(line: 477, column: 3, scope: !10164)
!10446 = !DILocation(line: 477, column: 8, scope: !10164)
!10447 = !DILocation(line: 477, column: 10, scope: !10164)
!10448 = !DILocation(line: 478, column: 12, scope: !10164)
!10449 = !DILocation(line: 478, column: 3, scope: !10164)
!10450 = !DILocation(line: 478, column: 8, scope: !10164)
!10451 = !DILocation(line: 478, column: 10, scope: !10164)
!10452 = !DILocation(line: 479, column: 12, scope: !10164)
!10453 = !DILocation(line: 479, column: 3, scope: !10164)
!10454 = !DILocation(line: 479, column: 8, scope: !10164)
!10455 = !DILocation(line: 479, column: 10, scope: !10164)
!10456 = !DILocation(line: 480, column: 12, scope: !10164)
!10457 = !DILocation(line: 480, column: 3, scope: !10164)
!10458 = !DILocation(line: 480, column: 8, scope: !10164)
!10459 = !DILocation(line: 480, column: 10, scope: !10164)
!10460 = !DILocation(line: 481, column: 1, scope: !10164)
!10461 = distinct !DISubprogram(name: "md5_stream", scope: !925, file: !925, line: 145, type: !10462, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10462 = !DISubroutineType(types: !10463)
!10463 = !{!5, !10464, !47}
!10464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10465, size: 64)
!10465 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !10466)
!10466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !10467)
!10467 = !{!10468, !10469, !10470, !10471, !10472, !10473, !10474, !10475, !10476, !10477, !10478, !10479, !10480, !10488, !10489, !10490, !10491, !10492, !10493, !10494, !10495, !10496, !10497, !10498, !10499, !10500, !10501, !10502, !10503}
!10468 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !10466, file: !2, line: 242, baseType: !5, size: 32)
!10469 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !10466, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!10470 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !10466, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!10471 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !10466, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!10472 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !10466, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!10473 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !10466, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!10474 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !10466, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!10475 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !10466, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!10476 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !10466, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!10477 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !10466, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!10478 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !10466, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!10479 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !10466, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!10480 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !10466, file: !2, line: 260, baseType: !10481, size: 64, offset: 768)
!10481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10482, size: 64)
!10482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !10483)
!10483 = !{!10484, !10485, !10487}
!10484 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !10482, file: !2, line: 157, baseType: !10481, size: 64)
!10485 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !10482, file: !2, line: 158, baseType: !10486, size: 64, offset: 64)
!10486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10466, size: 64)
!10487 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !10482, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!10488 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !10466, file: !2, line: 262, baseType: !10486, size: 64, offset: 832)
!10489 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !10466, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!10490 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !10466, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!10491 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !10466, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!10492 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !10466, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!10493 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !10466, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!10494 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !10466, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!10495 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !10466, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!10496 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !10466, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!10497 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !10466, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!10498 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !10466, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!10499 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !10466, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!10500 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !10466, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!10501 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !10466, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!10502 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !10466, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!10503 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !10466, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!10504 = !DILocalVariable(name: "stream", arg: 1, scope: !10461, file: !925, line: 145, type: !10464)
!10505 = !DILocation(line: 145, column: 19, scope: !10461)
!10506 = !DILocalVariable(name: "resblock", arg: 2, scope: !10461, file: !925, line: 145, type: !47)
!10507 = !DILocation(line: 145, column: 33, scope: !10461)
!10508 = !DILocation(line: 147, column: 25, scope: !10461)
!10509 = !DILocation(line: 147, column: 40, scope: !10461)
!10510 = !DILocation(line: 147, column: 11, scope: !10461)
!10511 = !DILocation(line: 147, column: 3, scope: !10461)
!10512 = !DILocation(line: 149, column: 13, scope: !10513)
!10513 = distinct !DILexicalBlock(scope: !10461, file: !925, line: 148, column: 5)
!10514 = !DILocation(line: 150, column: 16, scope: !10513)
!10515 = !DILocalVariable(name: "buffer", scope: !10461, file: !925, line: 153, type: !7)
!10516 = !DILocation(line: 153, column: 9, scope: !10461)
!10517 = !DILocation(line: 153, column: 18, scope: !10461)
!10518 = !DILocation(line: 154, column: 8, scope: !10519)
!10519 = distinct !DILexicalBlock(scope: !10461, file: !925, line: 154, column: 7)
!10520 = !DILocation(line: 154, column: 7, scope: !10461)
!10521 = !DILocation(line: 155, column: 5, scope: !10519)
!10522 = !DILocalVariable(name: "ctx", scope: !10461, file: !925, line: 157, type: !10030)
!10523 = !DILocation(line: 157, column: 18, scope: !10461)
!10524 = !DILocation(line: 158, column: 3, scope: !10461)
!10525 = !DILocalVariable(name: "sum", scope: !10461, file: !925, line: 159, type: !52)
!10526 = !DILocation(line: 159, column: 10, scope: !10461)
!10527 = !DILocation(line: 162, column: 3, scope: !10461)
!10528 = !DILocalVariable(name: "n", scope: !10529, file: !925, line: 167, type: !52)
!10529 = distinct !DILexicalBlock(scope: !10461, file: !925, line: 163, column: 5)
!10530 = !DILocation(line: 167, column: 14, scope: !10529)
!10531 = !DILocation(line: 168, column: 11, scope: !10529)
!10532 = !DILocation(line: 171, column: 7, scope: !10529)
!10533 = !DILocation(line: 178, column: 15, scope: !10534)
!10534 = distinct !DILexicalBlock(scope: !10535, file: !925, line: 178, column: 15)
!10535 = distinct !DILexicalBlock(scope: !10529, file: !925, line: 172, column: 9)
!10536 = !DILocation(line: 178, column: 15, scope: !10535)
!10537 = !DILocation(line: 179, column: 13, scope: !10534)
!10538 = !DILocation(line: 181, column: 15, scope: !10535)
!10539 = !DILocation(line: 181, column: 13, scope: !10535)
!10540 = !DILocation(line: 183, column: 18, scope: !10535)
!10541 = !DILocation(line: 183, column: 15, scope: !10535)
!10542 = !DILocation(line: 185, column: 15, scope: !10543)
!10543 = distinct !DILexicalBlock(scope: !10535, file: !925, line: 185, column: 15)
!10544 = !DILocation(line: 185, column: 19, scope: !10543)
!10545 = !DILocation(line: 185, column: 15, scope: !10535)
!10546 = !DILocation(line: 186, column: 13, scope: !10543)
!10547 = !DILocation(line: 188, column: 15, scope: !10548)
!10548 = distinct !DILexicalBlock(scope: !10535, file: !925, line: 188, column: 15)
!10549 = !DILocation(line: 188, column: 17, scope: !10548)
!10550 = !DILocation(line: 188, column: 15, scope: !10535)
!10551 = !DILocation(line: 193, column: 19, scope: !10552)
!10552 = distinct !DILexicalBlock(scope: !10553, file: !925, line: 193, column: 19)
!10553 = distinct !DILexicalBlock(scope: !10548, file: !925, line: 189, column: 13)
!10554 = !DILocation(line: 193, column: 19, scope: !10553)
!10555 = !DILocation(line: 195, column: 25, scope: !10556)
!10556 = distinct !DILexicalBlock(scope: !10552, file: !925, line: 194, column: 17)
!10557 = !DILocation(line: 195, column: 19, scope: !10556)
!10558 = !DILocation(line: 196, column: 19, scope: !10556)
!10559 = !DILocation(line: 198, column: 15, scope: !10553)
!10560 = distinct !{!10560, !10532, !10561}
!10561 = !DILocation(line: 200, column: 9, scope: !10529)
!10562 = !DILocation(line: 205, column: 26, scope: !10529)
!10563 = !DILocation(line: 205, column: 7, scope: !10529)
!10564 = distinct !{!10564, !10527, !10565}
!10565 = !DILocation(line: 206, column: 5, scope: !10461)
!10566 = !DILabel(scope: !10461, name: "process_partial_block", file: !925, line: 208)
!10567 = !DILocation(line: 208, column: 1, scope: !10461)
!10568 = !DILocation(line: 211, column: 7, scope: !10569)
!10569 = distinct !DILexicalBlock(scope: !10461, file: !925, line: 211, column: 7)
!10570 = !DILocation(line: 211, column: 11, scope: !10569)
!10571 = !DILocation(line: 211, column: 7, scope: !10461)
!10572 = !DILocation(line: 212, column: 24, scope: !10569)
!10573 = !DILocation(line: 212, column: 32, scope: !10569)
!10574 = !DILocation(line: 212, column: 5, scope: !10569)
!10575 = !DILocation(line: 215, column: 25, scope: !10461)
!10576 = !DILocation(line: 215, column: 3, scope: !10461)
!10577 = !DILocation(line: 216, column: 9, scope: !10461)
!10578 = !DILocation(line: 216, column: 3, scope: !10461)
!10579 = !DILocation(line: 217, column: 3, scope: !10461)
!10580 = !DILocation(line: 218, column: 1, scope: !10461)
!10581 = distinct !DISubprogram(name: "afalg_stream", scope: !10582, file: !10582, line: 103, type: !10583, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10582 = !DIFile(filename: "./lib/af_alg.h", directory: "/home/mohamad/clone/coreutils")
!10583 = !DISubroutineType(types: !10584)
!10584 = !{!5, !10464, !90, !47, !10585}
!10585 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !391, line: 102, baseType: !1394)
!10586 = !DILocalVariable(name: "stream", arg: 1, scope: !10581, file: !10582, line: 103, type: !10464)
!10587 = !DILocation(line: 103, column: 21, scope: !10581)
!10588 = !DILocalVariable(name: "alg", arg: 2, scope: !10581, file: !10582, line: 103, type: !90)
!10589 = !DILocation(line: 103, column: 41, scope: !10581)
!10590 = !DILocalVariable(name: "resblock", arg: 3, scope: !10581, file: !10582, line: 104, type: !47)
!10591 = !DILocation(line: 104, column: 21, scope: !10581)
!10592 = !DILocalVariable(name: "hashlen", arg: 4, scope: !10581, file: !10582, line: 104, type: !10585)
!10593 = !DILocation(line: 104, column: 39, scope: !10581)
!10594 = !DILocation(line: 106, column: 3, scope: !10581)
!10595 = distinct !DISubprogram(name: "md5_process_bytes", scope: !925, file: !925, line: 243, type: !10165, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10596 = !DILocalVariable(name: "buffer", arg: 1, scope: !10595, file: !925, line: 243, type: !85)
!10597 = !DILocation(line: 243, column: 32, scope: !10595)
!10598 = !DILocalVariable(name: "len", arg: 2, scope: !10595, file: !925, line: 243, type: !52)
!10599 = !DILocation(line: 243, column: 47, scope: !10595)
!10600 = !DILocalVariable(name: "ctx", arg: 3, scope: !10595, file: !925, line: 243, type: !10029)
!10601 = !DILocation(line: 243, column: 68, scope: !10595)
!10602 = !DILocation(line: 247, column: 7, scope: !10603)
!10603 = distinct !DILexicalBlock(scope: !10595, file: !925, line: 247, column: 7)
!10604 = !DILocation(line: 247, column: 12, scope: !10603)
!10605 = !DILocation(line: 247, column: 19, scope: !10603)
!10606 = !DILocation(line: 247, column: 7, scope: !10595)
!10607 = !DILocalVariable(name: "left_over", scope: !10608, file: !925, line: 249, type: !52)
!10608 = distinct !DILexicalBlock(scope: !10603, file: !925, line: 248, column: 5)
!10609 = !DILocation(line: 249, column: 14, scope: !10608)
!10610 = !DILocation(line: 249, column: 26, scope: !10608)
!10611 = !DILocation(line: 249, column: 31, scope: !10608)
!10612 = !DILocalVariable(name: "add", scope: !10608, file: !925, line: 250, type: !52)
!10613 = !DILocation(line: 250, column: 14, scope: !10608)
!10614 = !DILocation(line: 250, column: 26, scope: !10608)
!10615 = !DILocation(line: 250, column: 24, scope: !10608)
!10616 = !DILocation(line: 250, column: 38, scope: !10608)
!10617 = !DILocation(line: 250, column: 36, scope: !10608)
!10618 = !DILocation(line: 250, column: 20, scope: !10608)
!10619 = !DILocation(line: 250, column: 44, scope: !10608)
!10620 = !DILocation(line: 250, column: 56, scope: !10608)
!10621 = !DILocation(line: 250, column: 54, scope: !10608)
!10622 = !DILocation(line: 252, column: 26, scope: !10608)
!10623 = !DILocation(line: 252, column: 31, scope: !10608)
!10624 = !DILocation(line: 252, column: 16, scope: !10608)
!10625 = !DILocation(line: 252, column: 39, scope: !10608)
!10626 = !DILocation(line: 252, column: 51, scope: !10608)
!10627 = !DILocation(line: 252, column: 59, scope: !10608)
!10628 = !DILocation(line: 252, column: 7, scope: !10608)
!10629 = !DILocation(line: 253, column: 22, scope: !10608)
!10630 = !DILocation(line: 253, column: 7, scope: !10608)
!10631 = !DILocation(line: 253, column: 12, scope: !10608)
!10632 = !DILocation(line: 253, column: 19, scope: !10608)
!10633 = !DILocation(line: 255, column: 11, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10608, file: !925, line: 255, column: 11)
!10635 = !DILocation(line: 255, column: 16, scope: !10634)
!10636 = !DILocation(line: 255, column: 23, scope: !10634)
!10637 = !DILocation(line: 255, column: 11, scope: !10608)
!10638 = !DILocation(line: 257, column: 30, scope: !10639)
!10639 = distinct !DILexicalBlock(scope: !10634, file: !925, line: 256, column: 9)
!10640 = !DILocation(line: 257, column: 35, scope: !10639)
!10641 = !DILocation(line: 257, column: 43, scope: !10639)
!10642 = !DILocation(line: 257, column: 48, scope: !10639)
!10643 = !DILocation(line: 257, column: 55, scope: !10639)
!10644 = !DILocation(line: 257, column: 62, scope: !10639)
!10645 = !DILocation(line: 257, column: 11, scope: !10639)
!10646 = !DILocation(line: 259, column: 11, scope: !10639)
!10647 = !DILocation(line: 259, column: 16, scope: !10639)
!10648 = !DILocation(line: 259, column: 23, scope: !10639)
!10649 = !DILocation(line: 262, column: 19, scope: !10639)
!10650 = !DILocation(line: 262, column: 24, scope: !10639)
!10651 = !DILocation(line: 262, column: 11, scope: !10639)
!10652 = !DILocation(line: 263, column: 30, scope: !10639)
!10653 = !DILocation(line: 263, column: 35, scope: !10639)
!10654 = !DILocation(line: 263, column: 20, scope: !10639)
!10655 = !DILocation(line: 263, column: 44, scope: !10639)
!10656 = !DILocation(line: 263, column: 56, scope: !10639)
!10657 = !DILocation(line: 263, column: 54, scope: !10639)
!10658 = !DILocation(line: 263, column: 61, scope: !10639)
!10659 = !DILocation(line: 264, column: 19, scope: !10639)
!10660 = !DILocation(line: 264, column: 24, scope: !10639)
!10661 = !DILocation(line: 265, column: 9, scope: !10639)
!10662 = !DILocation(line: 267, column: 31, scope: !10608)
!10663 = !DILocation(line: 267, column: 40, scope: !10608)
!10664 = !DILocation(line: 267, column: 38, scope: !10608)
!10665 = !DILocation(line: 267, column: 14, scope: !10608)
!10666 = !DILocation(line: 268, column: 14, scope: !10608)
!10667 = !DILocation(line: 268, column: 11, scope: !10608)
!10668 = !DILocation(line: 269, column: 5, scope: !10608)
!10669 = !DILocation(line: 272, column: 7, scope: !10670)
!10670 = distinct !DILexicalBlock(scope: !10595, file: !925, line: 272, column: 7)
!10671 = !DILocation(line: 272, column: 11, scope: !10670)
!10672 = !DILocation(line: 272, column: 7, scope: !10595)
!10673 = !DILocation(line: 276, column: 11, scope: !10674)
!10674 = distinct !DILexicalBlock(scope: !10675, file: !925, line: 276, column: 11)
!10675 = distinct !DILexicalBlock(scope: !10670, file: !925, line: 273, column: 5)
!10676 = !DILocation(line: 276, column: 11, scope: !10675)
!10677 = !DILocation(line: 277, column: 9, scope: !10674)
!10678 = !DILocation(line: 277, column: 16, scope: !10674)
!10679 = !DILocation(line: 277, column: 20, scope: !10674)
!10680 = !DILocation(line: 279, column: 40, scope: !10681)
!10681 = distinct !DILexicalBlock(scope: !10674, file: !925, line: 278, column: 11)
!10682 = !DILocation(line: 279, column: 45, scope: !10681)
!10683 = !DILocation(line: 279, column: 32, scope: !10681)
!10684 = !DILocation(line: 279, column: 53, scope: !10681)
!10685 = !DILocation(line: 279, column: 70, scope: !10681)
!10686 = !DILocation(line: 279, column: 13, scope: !10681)
!10687 = !DILocation(line: 280, column: 37, scope: !10681)
!10688 = !DILocation(line: 280, column: 44, scope: !10681)
!10689 = !DILocation(line: 280, column: 20, scope: !10681)
!10690 = !DILocation(line: 281, column: 17, scope: !10681)
!10691 = distinct !{!10691, !10677, !10692}
!10692 = !DILocation(line: 282, column: 11, scope: !10674)
!10693 = !DILocation(line: 286, column: 30, scope: !10694)
!10694 = distinct !DILexicalBlock(scope: !10674, file: !925, line: 285, column: 9)
!10695 = !DILocation(line: 286, column: 38, scope: !10694)
!10696 = !DILocation(line: 286, column: 42, scope: !10694)
!10697 = !DILocation(line: 286, column: 49, scope: !10694)
!10698 = !DILocation(line: 286, column: 11, scope: !10694)
!10699 = !DILocation(line: 287, column: 35, scope: !10694)
!10700 = !DILocation(line: 287, column: 45, scope: !10694)
!10701 = !DILocation(line: 287, column: 49, scope: !10694)
!10702 = !DILocation(line: 287, column: 42, scope: !10694)
!10703 = !DILocation(line: 287, column: 18, scope: !10694)
!10704 = !DILocation(line: 288, column: 15, scope: !10694)
!10705 = !DILocation(line: 290, column: 5, scope: !10675)
!10706 = !DILocation(line: 293, column: 7, scope: !10707)
!10707 = distinct !DILexicalBlock(scope: !10595, file: !925, line: 293, column: 7)
!10708 = !DILocation(line: 293, column: 11, scope: !10707)
!10709 = !DILocation(line: 293, column: 7, scope: !10595)
!10710 = !DILocalVariable(name: "left_over", scope: !10711, file: !925, line: 295, type: !52)
!10711 = distinct !DILexicalBlock(scope: !10707, file: !925, line: 294, column: 5)
!10712 = !DILocation(line: 295, column: 14, scope: !10711)
!10713 = !DILocation(line: 295, column: 26, scope: !10711)
!10714 = !DILocation(line: 295, column: 31, scope: !10711)
!10715 = !DILocation(line: 297, column: 26, scope: !10711)
!10716 = !DILocation(line: 297, column: 31, scope: !10711)
!10717 = !DILocation(line: 297, column: 16, scope: !10711)
!10718 = !DILocation(line: 297, column: 39, scope: !10711)
!10719 = !DILocation(line: 297, column: 51, scope: !10711)
!10720 = !DILocation(line: 297, column: 59, scope: !10711)
!10721 = !DILocation(line: 297, column: 7, scope: !10711)
!10722 = !DILocation(line: 298, column: 20, scope: !10711)
!10723 = !DILocation(line: 298, column: 17, scope: !10711)
!10724 = !DILocation(line: 299, column: 11, scope: !10725)
!10725 = distinct !DILexicalBlock(scope: !10711, file: !925, line: 299, column: 11)
!10726 = !DILocation(line: 299, column: 21, scope: !10725)
!10727 = !DILocation(line: 299, column: 11, scope: !10711)
!10728 = !DILocation(line: 301, column: 30, scope: !10729)
!10729 = distinct !DILexicalBlock(scope: !10725, file: !925, line: 300, column: 9)
!10730 = !DILocation(line: 301, column: 35, scope: !10729)
!10731 = !DILocation(line: 301, column: 47, scope: !10729)
!10732 = !DILocation(line: 301, column: 11, scope: !10729)
!10733 = !DILocation(line: 302, column: 21, scope: !10729)
!10734 = !DILocation(line: 305, column: 19, scope: !10729)
!10735 = !DILocation(line: 305, column: 24, scope: !10729)
!10736 = !DILocation(line: 305, column: 11, scope: !10729)
!10737 = !DILocation(line: 305, column: 33, scope: !10729)
!10738 = !DILocation(line: 305, column: 38, scope: !10729)
!10739 = !DILocation(line: 305, column: 50, scope: !10729)
!10740 = !DILocation(line: 306, column: 9, scope: !10729)
!10741 = !DILocation(line: 307, column: 21, scope: !10711)
!10742 = !DILocation(line: 307, column: 7, scope: !10711)
!10743 = !DILocation(line: 307, column: 12, scope: !10711)
!10744 = !DILocation(line: 307, column: 19, scope: !10711)
!10745 = !DILocation(line: 308, column: 5, scope: !10711)
!10746 = !DILocation(line: 309, column: 1, scope: !10595)
!10747 = distinct !DISubprogram(name: "md5_buffer", scope: !925, file: !925, line: 227, type: !10748, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !914, retainedNodes: !433)
!10748 = !DISubroutineType(types: !10749)
!10749 = !{!47, !90, !52, !47}
!10750 = !DILocalVariable(name: "buffer", arg: 1, scope: !10747, file: !925, line: 227, type: !90)
!10751 = !DILocation(line: 227, column: 25, scope: !10747)
!10752 = !DILocalVariable(name: "len", arg: 2, scope: !10747, file: !925, line: 227, type: !52)
!10753 = !DILocation(line: 227, column: 40, scope: !10747)
!10754 = !DILocalVariable(name: "resblock", arg: 3, scope: !10747, file: !925, line: 227, type: !47)
!10755 = !DILocation(line: 227, column: 51, scope: !10747)
!10756 = !DILocalVariable(name: "ctx", scope: !10747, file: !925, line: 229, type: !10030)
!10757 = !DILocation(line: 229, column: 18, scope: !10747)
!10758 = !DILocation(line: 232, column: 3, scope: !10747)
!10759 = !DILocation(line: 235, column: 22, scope: !10747)
!10760 = !DILocation(line: 235, column: 30, scope: !10747)
!10761 = !DILocation(line: 235, column: 3, scope: !10747)
!10762 = !DILocation(line: 238, column: 32, scope: !10747)
!10763 = !DILocation(line: 238, column: 10, scope: !10747)
!10764 = !DILocation(line: 238, column: 3, scope: !10747)
!10765 = distinct !DISubprogram(name: "fdadvise", scope: !10766, file: !10766, line: 31, type: !10767, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1229, retainedNodes: !433)
!10766 = !DIFile(filename: "lib/fadvise.c", directory: "/home/mohamad/clone/coreutils")
!10767 = !DISubroutineType(types: !10768)
!10768 = !{null, !5, !1637, !1637, !10769}
!10769 = !DIDerivedType(tag: DW_TAG_typedef, name: "fadvice_t", file: !1233, line: 52, baseType: !1232)
!10770 = !DILocalVariable(name: "fd", arg: 1, scope: !10765, file: !10766, line: 31, type: !5)
!10771 = !DILocation(line: 31, column: 15, scope: !10765)
!10772 = !DILocalVariable(name: "offset", arg: 2, scope: !10765, file: !10766, line: 31, type: !1637)
!10773 = !DILocation(line: 31, column: 25, scope: !10765)
!10774 = !DILocalVariable(name: "len", arg: 3, scope: !10765, file: !10766, line: 31, type: !1637)
!10775 = !DILocation(line: 31, column: 39, scope: !10765)
!10776 = !DILocalVariable(name: "advice", arg: 4, scope: !10765, file: !10766, line: 31, type: !10769)
!10777 = !DILocation(line: 31, column: 54, scope: !10765)
!10778 = !DILocalVariable(name: "__x", scope: !10779, file: !10766, line: 34, type: !5)
!10779 = distinct !DILexicalBlock(scope: !10765, file: !10766, line: 34, column: 3)
!10780 = !DILocation(line: 34, column: 3, scope: !10779)
!10781 = !DILocation(line: 36, column: 1, scope: !10765)
!10782 = distinct !DISubprogram(name: "fadvise", scope: !10766, file: !10766, line: 39, type: !10783, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1229, retainedNodes: !433)
!10783 = !DISubroutineType(types: !10784)
!10784 = !{null, !10785, !10769}
!10785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10786, size: 64)
!10786 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !10787)
!10787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !10788)
!10788 = !{!10789, !10790, !10791, !10792, !10793, !10794, !10795, !10796, !10797, !10798, !10799, !10800, !10801, !10809, !10810, !10811, !10812, !10813, !10814, !10815, !10816, !10817, !10818, !10819, !10820, !10821, !10822, !10823, !10824}
!10789 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !10787, file: !2, line: 242, baseType: !5, size: 32)
!10790 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !10787, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!10791 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !10787, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!10792 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !10787, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!10793 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !10787, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!10794 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !10787, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!10795 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !10787, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!10796 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !10787, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!10797 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !10787, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!10798 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !10787, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!10799 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !10787, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!10800 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !10787, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!10801 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !10787, file: !2, line: 260, baseType: !10802, size: 64, offset: 768)
!10802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10803, size: 64)
!10803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !10804)
!10804 = !{!10805, !10806, !10808}
!10805 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !10803, file: !2, line: 157, baseType: !10802, size: 64)
!10806 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !10803, file: !2, line: 158, baseType: !10807, size: 64, offset: 64)
!10807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10787, size: 64)
!10808 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !10803, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!10809 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !10787, file: !2, line: 262, baseType: !10807, size: 64, offset: 832)
!10810 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !10787, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!10811 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !10787, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!10812 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !10787, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!10813 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !10787, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!10814 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !10787, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!10815 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !10787, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!10816 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !10787, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!10817 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !10787, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!10818 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !10787, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!10819 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !10787, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!10820 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !10787, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!10821 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !10787, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!10822 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !10787, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!10823 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !10787, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!10824 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !10787, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!10825 = !DILocalVariable(name: "fp", arg: 1, scope: !10782, file: !10766, line: 39, type: !10785)
!10826 = !DILocation(line: 39, column: 16, scope: !10782)
!10827 = !DILocalVariable(name: "advice", arg: 2, scope: !10782, file: !10766, line: 39, type: !10769)
!10828 = !DILocation(line: 39, column: 30, scope: !10782)
!10829 = !DILocation(line: 41, column: 7, scope: !10830)
!10830 = distinct !DILexicalBlock(scope: !10782, file: !10766, line: 41, column: 7)
!10831 = !DILocation(line: 41, column: 7, scope: !10782)
!10832 = !DILocation(line: 42, column: 23, scope: !10830)
!10833 = !DILocation(line: 42, column: 15, scope: !10830)
!10834 = !DILocation(line: 42, column: 34, scope: !10830)
!10835 = !DILocation(line: 42, column: 5, scope: !10830)
!10836 = !DILocation(line: 43, column: 1, scope: !10782)
!10837 = distinct !DISubprogram(name: "filevercmp", scope: !10838, file: !10838, line: 125, type: !6769, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1241, retainedNodes: !433)
!10838 = !DIFile(filename: "lib/filevercmp.c", directory: "/home/mohamad/clone/coreutils")
!10839 = !DILocalVariable(name: "s1", arg: 1, scope: !10837, file: !10838, line: 125, type: !90)
!10840 = !DILocation(line: 125, column: 25, scope: !10837)
!10841 = !DILocalVariable(name: "s2", arg: 2, scope: !10837, file: !10838, line: 125, type: !90)
!10842 = !DILocation(line: 125, column: 41, scope: !10837)
!10843 = !DILocalVariable(name: "s1_pos", scope: !10837, file: !10838, line: 127, type: !90)
!10844 = !DILocation(line: 127, column: 15, scope: !10837)
!10845 = !DILocalVariable(name: "s2_pos", scope: !10837, file: !10838, line: 128, type: !90)
!10846 = !DILocation(line: 128, column: 15, scope: !10837)
!10847 = !DILocalVariable(name: "s1_suffix", scope: !10837, file: !10838, line: 129, type: !90)
!10848 = !DILocation(line: 129, column: 15, scope: !10837)
!10849 = !DILocalVariable(name: "s2_suffix", scope: !10837, file: !10838, line: 129, type: !90)
!10850 = !DILocation(line: 129, column: 27, scope: !10837)
!10851 = !DILocalVariable(name: "s1_len", scope: !10837, file: !10838, line: 130, type: !52)
!10852 = !DILocation(line: 130, column: 10, scope: !10837)
!10853 = !DILocalVariable(name: "s2_len", scope: !10837, file: !10838, line: 130, type: !52)
!10854 = !DILocation(line: 130, column: 18, scope: !10837)
!10855 = !DILocalVariable(name: "result", scope: !10837, file: !10838, line: 131, type: !5)
!10856 = !DILocation(line: 131, column: 7, scope: !10837)
!10857 = !DILocalVariable(name: "simple_cmp", scope: !10837, file: !10838, line: 134, type: !5)
!10858 = !DILocation(line: 134, column: 7, scope: !10837)
!10859 = !DILocation(line: 134, column: 28, scope: !10837)
!10860 = !DILocation(line: 134, column: 32, scope: !10837)
!10861 = !DILocation(line: 134, column: 20, scope: !10837)
!10862 = !DILocation(line: 135, column: 7, scope: !10863)
!10863 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 135, column: 7)
!10864 = !DILocation(line: 135, column: 18, scope: !10863)
!10865 = !DILocation(line: 135, column: 7, scope: !10837)
!10866 = !DILocation(line: 136, column: 5, scope: !10863)
!10867 = !DILocation(line: 139, column: 9, scope: !10868)
!10868 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 139, column: 7)
!10869 = !DILocation(line: 139, column: 8, scope: !10868)
!10870 = !DILocation(line: 139, column: 7, scope: !10837)
!10871 = !DILocation(line: 140, column: 5, scope: !10868)
!10872 = !DILocation(line: 141, column: 9, scope: !10873)
!10873 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 141, column: 7)
!10874 = !DILocation(line: 141, column: 8, scope: !10873)
!10875 = !DILocation(line: 141, column: 7, scope: !10837)
!10876 = !DILocation(line: 142, column: 5, scope: !10873)
!10877 = !DILocation(line: 143, column: 25, scope: !10878)
!10878 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 143, column: 7)
!10879 = !DILocation(line: 143, column: 12, scope: !10878)
!10880 = !DILocation(line: 143, column: 9, scope: !10878)
!10881 = !DILocation(line: 143, column: 7, scope: !10837)
!10882 = !DILocation(line: 144, column: 5, scope: !10878)
!10883 = !DILocation(line: 145, column: 25, scope: !10884)
!10884 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 145, column: 7)
!10885 = !DILocation(line: 145, column: 12, scope: !10884)
!10886 = !DILocation(line: 145, column: 9, scope: !10884)
!10887 = !DILocation(line: 145, column: 7, scope: !10837)
!10888 = !DILocation(line: 146, column: 5, scope: !10884)
!10889 = !DILocation(line: 147, column: 26, scope: !10890)
!10890 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 147, column: 7)
!10891 = !DILocation(line: 147, column: 12, scope: !10890)
!10892 = !DILocation(line: 147, column: 9, scope: !10890)
!10893 = !DILocation(line: 147, column: 7, scope: !10837)
!10894 = !DILocation(line: 148, column: 5, scope: !10890)
!10895 = !DILocation(line: 149, column: 26, scope: !10896)
!10896 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 149, column: 7)
!10897 = !DILocation(line: 149, column: 12, scope: !10896)
!10898 = !DILocation(line: 149, column: 9, scope: !10896)
!10899 = !DILocation(line: 149, column: 7, scope: !10837)
!10900 = !DILocation(line: 150, column: 5, scope: !10896)
!10901 = !DILocation(line: 153, column: 8, scope: !10902)
!10902 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 153, column: 7)
!10903 = !DILocation(line: 153, column: 7, scope: !10902)
!10904 = !DILocation(line: 153, column: 11, scope: !10902)
!10905 = !DILocation(line: 153, column: 18, scope: !10902)
!10906 = !DILocation(line: 153, column: 22, scope: !10902)
!10907 = !DILocation(line: 153, column: 21, scope: !10902)
!10908 = !DILocation(line: 153, column: 25, scope: !10902)
!10909 = !DILocation(line: 153, column: 7, scope: !10837)
!10910 = !DILocation(line: 154, column: 5, scope: !10902)
!10911 = !DILocation(line: 155, column: 8, scope: !10912)
!10912 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 155, column: 7)
!10913 = !DILocation(line: 155, column: 7, scope: !10912)
!10914 = !DILocation(line: 155, column: 11, scope: !10912)
!10915 = !DILocation(line: 155, column: 18, scope: !10912)
!10916 = !DILocation(line: 155, column: 22, scope: !10912)
!10917 = !DILocation(line: 155, column: 21, scope: !10912)
!10918 = !DILocation(line: 155, column: 25, scope: !10912)
!10919 = !DILocation(line: 155, column: 7, scope: !10837)
!10920 = !DILocation(line: 156, column: 5, scope: !10912)
!10921 = !DILocation(line: 157, column: 8, scope: !10922)
!10922 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 157, column: 7)
!10923 = !DILocation(line: 157, column: 7, scope: !10922)
!10924 = !DILocation(line: 157, column: 11, scope: !10922)
!10925 = !DILocation(line: 157, column: 18, scope: !10922)
!10926 = !DILocation(line: 157, column: 22, scope: !10922)
!10927 = !DILocation(line: 157, column: 21, scope: !10922)
!10928 = !DILocation(line: 157, column: 25, scope: !10922)
!10929 = !DILocation(line: 157, column: 7, scope: !10837)
!10930 = !DILocation(line: 159, column: 9, scope: !10931)
!10931 = distinct !DILexicalBlock(scope: !10922, file: !10838, line: 158, column: 5)
!10932 = !DILocation(line: 160, column: 9, scope: !10931)
!10933 = !DILocation(line: 161, column: 5, scope: !10931)
!10934 = !DILocation(line: 164, column: 12, scope: !10837)
!10935 = !DILocation(line: 164, column: 10, scope: !10837)
!10936 = !DILocation(line: 165, column: 12, scope: !10837)
!10937 = !DILocation(line: 165, column: 10, scope: !10837)
!10938 = !DILocation(line: 166, column: 15, scope: !10837)
!10939 = !DILocation(line: 166, column: 13, scope: !10837)
!10940 = !DILocation(line: 167, column: 15, scope: !10837)
!10941 = !DILocation(line: 167, column: 13, scope: !10837)
!10942 = !DILocation(line: 168, column: 13, scope: !10837)
!10943 = !DILocation(line: 168, column: 25, scope: !10837)
!10944 = !DILocation(line: 168, column: 37, scope: !10837)
!10945 = !DILocation(line: 168, column: 47, scope: !10837)
!10946 = !DILocation(line: 168, column: 45, scope: !10837)
!10947 = !DILocation(line: 168, column: 10, scope: !10837)
!10948 = !DILocation(line: 169, column: 13, scope: !10837)
!10949 = !DILocation(line: 169, column: 25, scope: !10837)
!10950 = !DILocation(line: 169, column: 37, scope: !10837)
!10951 = !DILocation(line: 169, column: 47, scope: !10837)
!10952 = !DILocation(line: 169, column: 45, scope: !10837)
!10953 = !DILocation(line: 169, column: 10, scope: !10837)
!10954 = !DILocation(line: 172, column: 8, scope: !10955)
!10955 = distinct !DILexicalBlock(scope: !10837, file: !10838, line: 172, column: 7)
!10956 = !DILocation(line: 172, column: 18, scope: !10955)
!10957 = !DILocation(line: 172, column: 21, scope: !10955)
!10958 = !DILocation(line: 172, column: 32, scope: !10955)
!10959 = !DILocation(line: 172, column: 36, scope: !10955)
!10960 = !DILocation(line: 172, column: 46, scope: !10955)
!10961 = !DILocation(line: 172, column: 43, scope: !10955)
!10962 = !DILocation(line: 173, column: 7, scope: !10955)
!10963 = !DILocation(line: 173, column: 24, scope: !10955)
!10964 = !DILocation(line: 173, column: 28, scope: !10955)
!10965 = !DILocation(line: 173, column: 32, scope: !10955)
!10966 = !DILocation(line: 173, column: 15, scope: !10955)
!10967 = !DILocation(line: 173, column: 12, scope: !10955)
!10968 = !DILocation(line: 172, column: 7, scope: !10837)
!10969 = !DILocation(line: 175, column: 16, scope: !10970)
!10970 = distinct !DILexicalBlock(scope: !10955, file: !10838, line: 174, column: 5)
!10971 = !DILocation(line: 175, column: 25, scope: !10970)
!10972 = !DILocation(line: 175, column: 23, scope: !10970)
!10973 = !DILocation(line: 175, column: 14, scope: !10970)
!10974 = !DILocation(line: 176, column: 16, scope: !10970)
!10975 = !DILocation(line: 176, column: 25, scope: !10970)
!10976 = !DILocation(line: 176, column: 23, scope: !10970)
!10977 = !DILocation(line: 176, column: 14, scope: !10970)
!10978 = !DILocation(line: 177, column: 5, scope: !10970)
!10979 = !DILocation(line: 179, column: 23, scope: !10837)
!10980 = !DILocation(line: 179, column: 27, scope: !10837)
!10981 = !DILocation(line: 179, column: 35, scope: !10837)
!10982 = !DILocation(line: 179, column: 39, scope: !10837)
!10983 = !DILocation(line: 179, column: 12, scope: !10837)
!10984 = !DILocation(line: 179, column: 10, scope: !10837)
!10985 = !DILocation(line: 180, column: 10, scope: !10837)
!10986 = !DILocation(line: 180, column: 17, scope: !10837)
!10987 = !DILocation(line: 180, column: 24, scope: !10837)
!10988 = !DILocation(line: 180, column: 37, scope: !10837)
!10989 = !DILocation(line: 180, column: 3, scope: !10837)
!10990 = !DILocation(line: 181, column: 1, scope: !10837)
!10991 = distinct !DISubprogram(name: "match_suffix", scope: !10838, file: !10838, line: 34, type: !10992, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !433)
!10992 = !DISubroutineType(types: !10993)
!10993 = !{!90, !481}
!10994 = !DILocalVariable(name: "str", arg: 1, scope: !10991, file: !10838, line: 34, type: !481)
!10995 = !DILocation(line: 34, column: 28, scope: !10991)
!10996 = !DILocalVariable(name: "match", scope: !10991, file: !10838, line: 36, type: !90)
!10997 = !DILocation(line: 36, column: 15, scope: !10991)
!10998 = !DILocalVariable(name: "read_alpha", scope: !10991, file: !10838, line: 37, type: !162)
!10999 = !DILocation(line: 37, column: 8, scope: !10991)
!11000 = !DILocation(line: 38, column: 3, scope: !10991)
!11001 = !DILocation(line: 38, column: 12, scope: !10991)
!11002 = !DILocation(line: 38, column: 11, scope: !10991)
!11003 = !DILocation(line: 38, column: 10, scope: !10991)
!11004 = !DILocation(line: 40, column: 11, scope: !11005)
!11005 = distinct !DILexicalBlock(scope: !11006, file: !10838, line: 40, column: 11)
!11006 = distinct !DILexicalBlock(scope: !10991, file: !10838, line: 39, column: 5)
!11007 = !DILocation(line: 40, column: 11, scope: !11006)
!11008 = !DILocation(line: 42, column: 22, scope: !11009)
!11009 = distinct !DILexicalBlock(scope: !11005, file: !10838, line: 41, column: 9)
!11010 = !DILocation(line: 43, column: 29, scope: !11011)
!11011 = distinct !DILexicalBlock(scope: !11009, file: !10838, line: 43, column: 15)
!11012 = !DILocation(line: 43, column: 28, scope: !11011)
!11013 = !DILocation(line: 43, column: 27, scope: !11011)
!11014 = !DILocation(line: 43, column: 16, scope: !11011)
!11015 = !DILocation(line: 43, column: 34, scope: !11011)
!11016 = !DILocation(line: 43, column: 46, scope: !11011)
!11017 = !DILocation(line: 43, column: 45, scope: !11011)
!11018 = !DILocation(line: 43, column: 44, scope: !11011)
!11019 = !DILocation(line: 43, column: 41, scope: !11011)
!11020 = !DILocation(line: 43, column: 15, scope: !11009)
!11021 = !DILocation(line: 44, column: 19, scope: !11011)
!11022 = !DILocation(line: 44, column: 13, scope: !11011)
!11023 = !DILocation(line: 45, column: 9, scope: !11009)
!11024 = !DILocation(line: 46, column: 25, scope: !11025)
!11025 = distinct !DILexicalBlock(scope: !11005, file: !10838, line: 46, column: 16)
!11026 = !DILocation(line: 46, column: 24, scope: !11025)
!11027 = !DILocation(line: 46, column: 23, scope: !11025)
!11028 = !DILocation(line: 46, column: 20, scope: !11025)
!11029 = !DILocation(line: 46, column: 16, scope: !11005)
!11030 = !DILocation(line: 48, column: 22, scope: !11031)
!11031 = distinct !DILexicalBlock(scope: !11025, file: !10838, line: 47, column: 9)
!11032 = !DILocation(line: 49, column: 16, scope: !11033)
!11033 = distinct !DILexicalBlock(scope: !11031, file: !10838, line: 49, column: 15)
!11034 = !DILocation(line: 49, column: 15, scope: !11031)
!11035 = !DILocation(line: 50, column: 22, scope: !11033)
!11036 = !DILocation(line: 50, column: 21, scope: !11033)
!11037 = !DILocation(line: 50, column: 19, scope: !11033)
!11038 = !DILocation(line: 50, column: 13, scope: !11033)
!11039 = !DILocation(line: 51, column: 9, scope: !11031)
!11040 = !DILocation(line: 52, column: 30, scope: !11041)
!11041 = distinct !DILexicalBlock(scope: !11025, file: !10838, line: 52, column: 16)
!11042 = !DILocation(line: 52, column: 29, scope: !11041)
!11043 = !DILocation(line: 52, column: 28, scope: !11041)
!11044 = !DILocation(line: 52, column: 17, scope: !11041)
!11045 = !DILocation(line: 52, column: 35, scope: !11041)
!11046 = !DILocation(line: 52, column: 47, scope: !11041)
!11047 = !DILocation(line: 52, column: 46, scope: !11041)
!11048 = !DILocation(line: 52, column: 45, scope: !11041)
!11049 = !DILocation(line: 52, column: 42, scope: !11041)
!11050 = !DILocation(line: 52, column: 16, scope: !11025)
!11051 = !DILocation(line: 53, column: 15, scope: !11041)
!11052 = !DILocation(line: 53, column: 9, scope: !11041)
!11053 = !DILocation(line: 54, column: 9, scope: !11006)
!11054 = !DILocation(line: 54, column: 13, scope: !11006)
!11055 = distinct !{!11055, !11000, !11056}
!11056 = !DILocation(line: 55, column: 5, scope: !10991)
!11057 = !DILocation(line: 56, column: 10, scope: !10991)
!11058 = !DILocation(line: 56, column: 3, scope: !10991)
!11059 = distinct !DISubprogram(name: "verrevcmp", scope: !10838, file: !10838, line: 84, type: !11060, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !433)
!11060 = !DISubroutineType(types: !11061)
!11061 = !{!5, !90, !52, !90, !52}
!11062 = !DILocalVariable(name: "s1", arg: 1, scope: !11059, file: !10838, line: 84, type: !90)
!11063 = !DILocation(line: 84, column: 24, scope: !11059)
!11064 = !DILocalVariable(name: "s1_len", arg: 2, scope: !11059, file: !10838, line: 84, type: !52)
!11065 = !DILocation(line: 84, column: 35, scope: !11059)
!11066 = !DILocalVariable(name: "s2", arg: 3, scope: !11059, file: !10838, line: 84, type: !90)
!11067 = !DILocation(line: 84, column: 55, scope: !11059)
!11068 = !DILocalVariable(name: "s2_len", arg: 4, scope: !11059, file: !10838, line: 84, type: !52)
!11069 = !DILocation(line: 84, column: 66, scope: !11059)
!11070 = !DILocalVariable(name: "s1_pos", scope: !11059, file: !10838, line: 86, type: !52)
!11071 = !DILocation(line: 86, column: 10, scope: !11059)
!11072 = !DILocalVariable(name: "s2_pos", scope: !11059, file: !10838, line: 87, type: !52)
!11073 = !DILocation(line: 87, column: 10, scope: !11059)
!11074 = !DILocation(line: 88, column: 3, scope: !11059)
!11075 = !DILocation(line: 88, column: 10, scope: !11059)
!11076 = !DILocation(line: 88, column: 19, scope: !11059)
!11077 = !DILocation(line: 88, column: 17, scope: !11059)
!11078 = !DILocation(line: 88, column: 26, scope: !11059)
!11079 = !DILocation(line: 88, column: 29, scope: !11059)
!11080 = !DILocation(line: 88, column: 38, scope: !11059)
!11081 = !DILocation(line: 88, column: 36, scope: !11059)
!11082 = !DILocalVariable(name: "first_diff", scope: !11083, file: !10838, line: 90, type: !5)
!11083 = distinct !DILexicalBlock(scope: !11059, file: !10838, line: 89, column: 5)
!11084 = !DILocation(line: 90, column: 11, scope: !11083)
!11085 = !DILocation(line: 91, column: 7, scope: !11083)
!11086 = !DILocation(line: 91, column: 15, scope: !11083)
!11087 = !DILocation(line: 91, column: 24, scope: !11083)
!11088 = !DILocation(line: 91, column: 22, scope: !11083)
!11089 = !DILocation(line: 91, column: 31, scope: !11083)
!11090 = !DILocation(line: 91, column: 46, scope: !11083)
!11091 = !DILocation(line: 91, column: 49, scope: !11083)
!11092 = !DILocation(line: 91, column: 35, scope: !11083)
!11093 = !DILocation(line: 92, column: 14, scope: !11083)
!11094 = !DILocation(line: 92, column: 18, scope: !11083)
!11095 = !DILocation(line: 92, column: 27, scope: !11083)
!11096 = !DILocation(line: 92, column: 25, scope: !11083)
!11097 = !DILocation(line: 92, column: 34, scope: !11083)
!11098 = !DILocation(line: 92, column: 49, scope: !11083)
!11099 = !DILocation(line: 92, column: 52, scope: !11083)
!11100 = !DILocation(line: 92, column: 38, scope: !11083)
!11101 = !DILocation(line: 92, column: 37, scope: !11083)
!11102 = !DILocation(line: 0, scope: !11083)
!11103 = !DILocalVariable(name: "s1_c", scope: !11104, file: !10838, line: 94, type: !5)
!11104 = distinct !DILexicalBlock(scope: !11083, file: !10838, line: 93, column: 9)
!11105 = !DILocation(line: 94, column: 15, scope: !11104)
!11106 = !DILocation(line: 94, column: 23, scope: !11104)
!11107 = !DILocation(line: 94, column: 33, scope: !11104)
!11108 = !DILocation(line: 94, column: 30, scope: !11104)
!11109 = !DILocation(line: 94, column: 22, scope: !11104)
!11110 = !DILocation(line: 94, column: 54, scope: !11104)
!11111 = !DILocation(line: 94, column: 57, scope: !11104)
!11112 = !DILocation(line: 94, column: 47, scope: !11104)
!11113 = !DILocalVariable(name: "s2_c", scope: !11104, file: !10838, line: 95, type: !5)
!11114 = !DILocation(line: 95, column: 15, scope: !11104)
!11115 = !DILocation(line: 95, column: 23, scope: !11104)
!11116 = !DILocation(line: 95, column: 33, scope: !11104)
!11117 = !DILocation(line: 95, column: 30, scope: !11104)
!11118 = !DILocation(line: 95, column: 22, scope: !11104)
!11119 = !DILocation(line: 95, column: 54, scope: !11104)
!11120 = !DILocation(line: 95, column: 57, scope: !11104)
!11121 = !DILocation(line: 95, column: 47, scope: !11104)
!11122 = !DILocation(line: 96, column: 15, scope: !11123)
!11123 = distinct !DILexicalBlock(scope: !11104, file: !10838, line: 96, column: 15)
!11124 = !DILocation(line: 96, column: 23, scope: !11123)
!11125 = !DILocation(line: 96, column: 20, scope: !11123)
!11126 = !DILocation(line: 96, column: 15, scope: !11104)
!11127 = !DILocation(line: 97, column: 20, scope: !11123)
!11128 = !DILocation(line: 97, column: 27, scope: !11123)
!11129 = !DILocation(line: 97, column: 25, scope: !11123)
!11130 = !DILocation(line: 97, column: 13, scope: !11123)
!11131 = !DILocation(line: 98, column: 17, scope: !11104)
!11132 = !DILocation(line: 99, column: 17, scope: !11104)
!11133 = distinct !{!11133, !11085, !11134}
!11134 = !DILocation(line: 100, column: 9, scope: !11083)
!11135 = !DILocation(line: 101, column: 7, scope: !11083)
!11136 = !DILocation(line: 101, column: 14, scope: !11083)
!11137 = !DILocation(line: 101, column: 17, scope: !11083)
!11138 = !DILocation(line: 101, column: 25, scope: !11083)
!11139 = !DILocation(line: 102, column: 15, scope: !11083)
!11140 = distinct !{!11140, !11135, !11139}
!11141 = !DILocation(line: 103, column: 7, scope: !11083)
!11142 = !DILocation(line: 103, column: 14, scope: !11083)
!11143 = !DILocation(line: 103, column: 17, scope: !11083)
!11144 = !DILocation(line: 103, column: 25, scope: !11083)
!11145 = !DILocation(line: 104, column: 15, scope: !11083)
!11146 = distinct !{!11146, !11141, !11145}
!11147 = !DILocation(line: 105, column: 7, scope: !11083)
!11148 = !DILocation(line: 105, column: 25, scope: !11083)
!11149 = !DILocation(line: 105, column: 28, scope: !11083)
!11150 = !DILocation(line: 105, column: 14, scope: !11083)
!11151 = !DILocation(line: 105, column: 37, scope: !11083)
!11152 = !DILocation(line: 105, column: 51, scope: !11083)
!11153 = !DILocation(line: 105, column: 54, scope: !11083)
!11154 = !DILocation(line: 105, column: 40, scope: !11083)
!11155 = !DILocation(line: 107, column: 16, scope: !11156)
!11156 = distinct !DILexicalBlock(scope: !11157, file: !10838, line: 107, column: 15)
!11157 = distinct !DILexicalBlock(scope: !11083, file: !10838, line: 106, column: 9)
!11158 = !DILocation(line: 107, column: 15, scope: !11157)
!11159 = !DILocation(line: 108, column: 26, scope: !11156)
!11160 = !DILocation(line: 108, column: 29, scope: !11156)
!11161 = !DILocation(line: 108, column: 39, scope: !11156)
!11162 = !DILocation(line: 108, column: 42, scope: !11156)
!11163 = !DILocation(line: 108, column: 37, scope: !11156)
!11164 = !DILocation(line: 108, column: 24, scope: !11156)
!11165 = !DILocation(line: 108, column: 13, scope: !11156)
!11166 = !DILocation(line: 109, column: 17, scope: !11157)
!11167 = !DILocation(line: 110, column: 17, scope: !11157)
!11168 = distinct !{!11168, !11147, !11169}
!11169 = !DILocation(line: 111, column: 9, scope: !11083)
!11170 = !DILocation(line: 112, column: 22, scope: !11171)
!11171 = distinct !DILexicalBlock(scope: !11083, file: !10838, line: 112, column: 11)
!11172 = !DILocation(line: 112, column: 25, scope: !11171)
!11173 = !DILocation(line: 112, column: 11, scope: !11171)
!11174 = !DILocation(line: 112, column: 11, scope: !11083)
!11175 = !DILocation(line: 113, column: 9, scope: !11171)
!11176 = !DILocation(line: 114, column: 22, scope: !11177)
!11177 = distinct !DILexicalBlock(scope: !11083, file: !10838, line: 114, column: 11)
!11178 = !DILocation(line: 114, column: 25, scope: !11177)
!11179 = !DILocation(line: 114, column: 11, scope: !11177)
!11180 = !DILocation(line: 114, column: 11, scope: !11083)
!11181 = !DILocation(line: 115, column: 9, scope: !11177)
!11182 = !DILocation(line: 116, column: 11, scope: !11183)
!11183 = distinct !DILexicalBlock(scope: !11083, file: !10838, line: 116, column: 11)
!11184 = !DILocation(line: 116, column: 11, scope: !11083)
!11185 = !DILocation(line: 117, column: 16, scope: !11183)
!11186 = !DILocation(line: 117, column: 9, scope: !11183)
!11187 = distinct !{!11187, !11074, !11188}
!11188 = !DILocation(line: 118, column: 5, scope: !11059)
!11189 = !DILocation(line: 119, column: 3, scope: !11059)
!11190 = !DILocation(line: 120, column: 1, scope: !11059)
!11191 = distinct !DISubprogram(name: "order", scope: !10838, file: !10838, line: 61, type: !11192, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1241, retainedNodes: !433)
!11192 = !DISubroutineType(types: !11193)
!11193 = !{!5, !535}
!11194 = !DILocalVariable(name: "c", arg: 1, scope: !11191, file: !10838, line: 61, type: !535)
!11195 = !DILocation(line: 61, column: 22, scope: !11191)
!11196 = !DILocation(line: 63, column: 18, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11191, file: !10838, line: 63, column: 7)
!11198 = !DILocation(line: 63, column: 7, scope: !11197)
!11199 = !DILocation(line: 63, column: 7, scope: !11191)
!11200 = !DILocation(line: 64, column: 5, scope: !11197)
!11201 = !DILocation(line: 65, column: 23, scope: !11202)
!11202 = distinct !DILexicalBlock(scope: !11197, file: !10838, line: 65, column: 12)
!11203 = !DILocation(line: 65, column: 12, scope: !11202)
!11204 = !DILocation(line: 65, column: 12, scope: !11197)
!11205 = !DILocation(line: 66, column: 12, scope: !11202)
!11206 = !DILocation(line: 66, column: 5, scope: !11202)
!11207 = !DILocation(line: 67, column: 12, scope: !11208)
!11208 = distinct !DILexicalBlock(scope: !11202, file: !10838, line: 67, column: 12)
!11209 = !DILocation(line: 67, column: 14, scope: !11208)
!11210 = !DILocation(line: 67, column: 12, scope: !11202)
!11211 = !DILocation(line: 68, column: 5, scope: !11208)
!11212 = !DILocation(line: 70, column: 18, scope: !11208)
!11213 = !DILocation(line: 70, column: 12, scope: !11208)
!11214 = !DILocation(line: 70, column: 20, scope: !11208)
!11215 = !DILocation(line: 70, column: 32, scope: !11208)
!11216 = !DILocation(line: 70, column: 5, scope: !11208)
!11217 = !DILocation(line: 71, column: 1, scope: !11191)
!11218 = distinct !DISubprogram(name: "hard_locale", scope: !11219, file: !11219, line: 38, type: !11220, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1244, retainedNodes: !433)
!11219 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/mohamad/clone/coreutils")
!11220 = !DISubroutineType(types: !11221)
!11221 = !{!162, !5}
!11222 = !DILocalVariable(name: "category", arg: 1, scope: !11218, file: !11219, line: 38, type: !5)
!11223 = !DILocation(line: 38, column: 18, scope: !11218)
!11224 = !DILocalVariable(name: "hard", scope: !11218, file: !11219, line: 40, type: !162)
!11225 = !DILocation(line: 40, column: 8, scope: !11218)
!11226 = !DILocalVariable(name: "p", scope: !11218, file: !11219, line: 41, type: !90)
!11227 = !DILocation(line: 41, column: 15, scope: !11218)
!11228 = !DILocation(line: 41, column: 30, scope: !11218)
!11229 = !DILocation(line: 41, column: 19, scope: !11218)
!11230 = !DILocation(line: 43, column: 7, scope: !11231)
!11231 = distinct !DILexicalBlock(scope: !11218, file: !11219, line: 43, column: 7)
!11232 = !DILocation(line: 43, column: 7, scope: !11218)
!11233 = !DILocation(line: 47, column: 23, scope: !11234)
!11234 = distinct !DILexicalBlock(scope: !11235, file: !11219, line: 47, column: 15)
!11235 = distinct !DILexicalBlock(scope: !11236, file: !11219, line: 46, column: 9)
!11236 = distinct !DILexicalBlock(scope: !11237, file: !11219, line: 45, column: 11)
!11237 = distinct !DILexicalBlock(scope: !11231, file: !11219, line: 44, column: 5)
!11238 = !DILocation(line: 47, column: 15, scope: !11234)
!11239 = !DILocation(line: 47, column: 31, scope: !11234)
!11240 = !DILocation(line: 47, column: 36, scope: !11234)
!11241 = !DILocation(line: 47, column: 47, scope: !11234)
!11242 = !DILocation(line: 47, column: 39, scope: !11234)
!11243 = !DILocation(line: 47, column: 59, scope: !11234)
!11244 = !DILocation(line: 47, column: 15, scope: !11235)
!11245 = !DILocation(line: 48, column: 18, scope: !11234)
!11246 = !DILocation(line: 48, column: 13, scope: !11234)
!11247 = !DILocation(line: 69, column: 5, scope: !11237)
!11248 = !DILocation(line: 71, column: 10, scope: !11218)
!11249 = !DILocation(line: 71, column: 3, scope: !11218)
!11250 = distinct !DISubprogram(name: "hash_get_n_buckets", scope: !941, file: !941, line: 150, type: !11251, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11251 = !DISubroutineType(types: !11252)
!11252 = !{!52, !11253}
!11253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!11254 = !DILocalVariable(name: "table", arg: 1, scope: !11250, file: !941, line: 150, type: !11253)
!11255 = !DILocation(line: 150, column: 39, scope: !11250)
!11256 = !DILocation(line: 152, column: 10, scope: !11250)
!11257 = !DILocation(line: 152, column: 17, scope: !11250)
!11258 = !DILocation(line: 152, column: 3, scope: !11250)
!11259 = distinct !DISubprogram(name: "hash_get_n_buckets_used", scope: !941, file: !941, line: 158, type: !11251, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11260 = !DILocalVariable(name: "table", arg: 1, scope: !11259, file: !941, line: 158, type: !11253)
!11261 = !DILocation(line: 158, column: 44, scope: !11259)
!11262 = !DILocation(line: 160, column: 10, scope: !11259)
!11263 = !DILocation(line: 160, column: 17, scope: !11259)
!11264 = !DILocation(line: 160, column: 3, scope: !11259)
!11265 = distinct !DISubprogram(name: "hash_get_n_entries", scope: !941, file: !941, line: 166, type: !11251, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11266 = !DILocalVariable(name: "table", arg: 1, scope: !11265, file: !941, line: 166, type: !11253)
!11267 = !DILocation(line: 166, column: 39, scope: !11265)
!11268 = !DILocation(line: 168, column: 10, scope: !11265)
!11269 = !DILocation(line: 168, column: 17, scope: !11265)
!11270 = !DILocation(line: 168, column: 3, scope: !11265)
!11271 = distinct !DISubprogram(name: "hash_get_max_bucket_length", scope: !941, file: !941, line: 174, type: !11251, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11272 = !DILocalVariable(name: "table", arg: 1, scope: !11271, file: !941, line: 174, type: !11253)
!11273 = !DILocation(line: 174, column: 47, scope: !11271)
!11274 = !DILocalVariable(name: "bucket", scope: !11271, file: !941, line: 176, type: !950)
!11275 = !DILocation(line: 176, column: 28, scope: !11271)
!11276 = !DILocalVariable(name: "max_bucket_length", scope: !11271, file: !941, line: 177, type: !52)
!11277 = !DILocation(line: 177, column: 10, scope: !11271)
!11278 = !DILocation(line: 179, column: 17, scope: !11279)
!11279 = distinct !DILexicalBlock(scope: !11271, file: !941, line: 179, column: 3)
!11280 = !DILocation(line: 179, column: 24, scope: !11279)
!11281 = !DILocation(line: 179, column: 15, scope: !11279)
!11282 = !DILocation(line: 179, column: 8, scope: !11279)
!11283 = !DILocation(line: 179, column: 32, scope: !11284)
!11284 = distinct !DILexicalBlock(scope: !11279, file: !941, line: 179, column: 3)
!11285 = !DILocation(line: 179, column: 41, scope: !11284)
!11286 = !DILocation(line: 179, column: 48, scope: !11284)
!11287 = !DILocation(line: 179, column: 39, scope: !11284)
!11288 = !DILocation(line: 179, column: 3, scope: !11279)
!11289 = !DILocation(line: 181, column: 11, scope: !11290)
!11290 = distinct !DILexicalBlock(scope: !11291, file: !941, line: 181, column: 11)
!11291 = distinct !DILexicalBlock(scope: !11284, file: !941, line: 180, column: 5)
!11292 = !DILocation(line: 181, column: 19, scope: !11290)
!11293 = !DILocation(line: 181, column: 11, scope: !11291)
!11294 = !DILocalVariable(name: "cursor", scope: !11295, file: !941, line: 183, type: !950)
!11295 = distinct !DILexicalBlock(scope: !11290, file: !941, line: 182, column: 9)
!11296 = !DILocation(line: 183, column: 36, scope: !11295)
!11297 = !DILocation(line: 183, column: 45, scope: !11295)
!11298 = !DILocalVariable(name: "bucket_length", scope: !11295, file: !941, line: 184, type: !52)
!11299 = !DILocation(line: 184, column: 18, scope: !11295)
!11300 = !DILocation(line: 186, column: 11, scope: !11295)
!11301 = !DILocation(line: 186, column: 27, scope: !11295)
!11302 = !DILocation(line: 186, column: 35, scope: !11295)
!11303 = !DILocation(line: 186, column: 25, scope: !11295)
!11304 = !DILocation(line: 186, column: 41, scope: !11295)
!11305 = !DILocation(line: 187, column: 26, scope: !11295)
!11306 = distinct !{!11306, !11300, !11305}
!11307 = !DILocation(line: 189, column: 15, scope: !11308)
!11308 = distinct !DILexicalBlock(scope: !11295, file: !941, line: 189, column: 15)
!11309 = !DILocation(line: 189, column: 31, scope: !11308)
!11310 = !DILocation(line: 189, column: 29, scope: !11308)
!11311 = !DILocation(line: 189, column: 15, scope: !11295)
!11312 = !DILocation(line: 190, column: 33, scope: !11308)
!11313 = !DILocation(line: 190, column: 31, scope: !11308)
!11314 = !DILocation(line: 190, column: 13, scope: !11308)
!11315 = !DILocation(line: 191, column: 9, scope: !11295)
!11316 = !DILocation(line: 192, column: 5, scope: !11291)
!11317 = !DILocation(line: 179, column: 68, scope: !11284)
!11318 = !DILocation(line: 179, column: 3, scope: !11284)
!11319 = distinct !{!11319, !11288, !11320}
!11320 = !DILocation(line: 192, column: 5, scope: !11279)
!11321 = !DILocation(line: 194, column: 10, scope: !11271)
!11322 = !DILocation(line: 194, column: 3, scope: !11271)
!11323 = distinct !DISubprogram(name: "hash_table_ok", scope: !941, file: !941, line: 201, type: !11324, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11324 = !DISubroutineType(types: !11325)
!11325 = !{!162, !11253}
!11326 = !DILocalVariable(name: "table", arg: 1, scope: !11323, file: !941, line: 201, type: !11253)
!11327 = !DILocation(line: 201, column: 34, scope: !11323)
!11328 = !DILocalVariable(name: "bucket", scope: !11323, file: !941, line: 203, type: !950)
!11329 = !DILocation(line: 203, column: 28, scope: !11323)
!11330 = !DILocalVariable(name: "n_buckets_used", scope: !11323, file: !941, line: 204, type: !52)
!11331 = !DILocation(line: 204, column: 10, scope: !11323)
!11332 = !DILocalVariable(name: "n_entries", scope: !11323, file: !941, line: 205, type: !52)
!11333 = !DILocation(line: 205, column: 10, scope: !11323)
!11334 = !DILocation(line: 207, column: 17, scope: !11335)
!11335 = distinct !DILexicalBlock(scope: !11323, file: !941, line: 207, column: 3)
!11336 = !DILocation(line: 207, column: 24, scope: !11335)
!11337 = !DILocation(line: 207, column: 15, scope: !11335)
!11338 = !DILocation(line: 207, column: 8, scope: !11335)
!11339 = !DILocation(line: 207, column: 32, scope: !11340)
!11340 = distinct !DILexicalBlock(scope: !11335, file: !941, line: 207, column: 3)
!11341 = !DILocation(line: 207, column: 41, scope: !11340)
!11342 = !DILocation(line: 207, column: 48, scope: !11340)
!11343 = !DILocation(line: 207, column: 39, scope: !11340)
!11344 = !DILocation(line: 207, column: 3, scope: !11335)
!11345 = !DILocation(line: 209, column: 11, scope: !11346)
!11346 = distinct !DILexicalBlock(scope: !11347, file: !941, line: 209, column: 11)
!11347 = distinct !DILexicalBlock(scope: !11340, file: !941, line: 208, column: 5)
!11348 = !DILocation(line: 209, column: 19, scope: !11346)
!11349 = !DILocation(line: 209, column: 11, scope: !11347)
!11350 = !DILocalVariable(name: "cursor", scope: !11351, file: !941, line: 211, type: !950)
!11351 = distinct !DILexicalBlock(scope: !11346, file: !941, line: 210, column: 9)
!11352 = !DILocation(line: 211, column: 36, scope: !11351)
!11353 = !DILocation(line: 211, column: 45, scope: !11351)
!11354 = !DILocation(line: 214, column: 25, scope: !11351)
!11355 = !DILocation(line: 215, column: 20, scope: !11351)
!11356 = !DILocation(line: 218, column: 11, scope: !11351)
!11357 = !DILocation(line: 218, column: 27, scope: !11351)
!11358 = !DILocation(line: 218, column: 35, scope: !11351)
!11359 = !DILocation(line: 218, column: 25, scope: !11351)
!11360 = !DILocation(line: 218, column: 41, scope: !11351)
!11361 = !DILocation(line: 219, column: 22, scope: !11351)
!11362 = distinct !{!11362, !11356, !11361}
!11363 = !DILocation(line: 220, column: 9, scope: !11351)
!11364 = !DILocation(line: 221, column: 5, scope: !11347)
!11365 = !DILocation(line: 207, column: 68, scope: !11340)
!11366 = !DILocation(line: 207, column: 3, scope: !11340)
!11367 = distinct !{!11367, !11344, !11368}
!11368 = !DILocation(line: 221, column: 5, scope: !11335)
!11369 = !DILocation(line: 223, column: 7, scope: !11370)
!11370 = distinct !DILexicalBlock(scope: !11323, file: !941, line: 223, column: 7)
!11371 = !DILocation(line: 223, column: 25, scope: !11370)
!11372 = !DILocation(line: 223, column: 32, scope: !11370)
!11373 = !DILocation(line: 223, column: 22, scope: !11370)
!11374 = !DILocation(line: 223, column: 47, scope: !11370)
!11375 = !DILocation(line: 223, column: 50, scope: !11370)
!11376 = !DILocation(line: 223, column: 63, scope: !11370)
!11377 = !DILocation(line: 223, column: 70, scope: !11370)
!11378 = !DILocation(line: 223, column: 60, scope: !11370)
!11379 = !DILocation(line: 223, column: 7, scope: !11323)
!11380 = !DILocation(line: 224, column: 5, scope: !11370)
!11381 = !DILocation(line: 226, column: 3, scope: !11323)
!11382 = !DILocation(line: 227, column: 1, scope: !11323)
!11383 = distinct !DISubprogram(name: "hash_print_statistics", scope: !941, file: !941, line: 230, type: !11384, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11384 = !DISubroutineType(types: !11385)
!11385 = !{null, !11253, !11386}
!11386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11387, size: 64)
!11387 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !11388)
!11388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !11389)
!11389 = !{!11390, !11391, !11392, !11393, !11394, !11395, !11396, !11397, !11398, !11399, !11400, !11401, !11402, !11410, !11411, !11412, !11413, !11414, !11415, !11416, !11417, !11418, !11419, !11420, !11421, !11422, !11423, !11424, !11425}
!11390 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !11388, file: !2, line: 242, baseType: !5, size: 32)
!11391 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !11388, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!11392 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !11388, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!11393 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !11388, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!11394 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !11388, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!11395 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !11388, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!11396 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !11388, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!11397 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !11388, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!11398 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !11388, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!11399 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !11388, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!11400 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !11388, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!11401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !11388, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!11402 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !11388, file: !2, line: 260, baseType: !11403, size: 64, offset: 768)
!11403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11404, size: 64)
!11404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !11405)
!11405 = !{!11406, !11407, !11409}
!11406 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !11404, file: !2, line: 157, baseType: !11403, size: 64)
!11407 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !11404, file: !2, line: 158, baseType: !11408, size: 64, offset: 64)
!11408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11388, size: 64)
!11409 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !11404, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!11410 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !11388, file: !2, line: 262, baseType: !11408, size: 64, offset: 832)
!11411 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !11388, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!11412 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !11388, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!11413 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !11388, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!11414 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !11388, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!11415 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !11388, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!11416 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !11388, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!11417 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !11388, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!11418 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !11388, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!11419 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !11388, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!11420 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !11388, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!11421 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !11388, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!11422 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !11388, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!11423 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !11388, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!11424 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !11388, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!11425 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !11388, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!11426 = !DILocalVariable(name: "table", arg: 1, scope: !11383, file: !941, line: 230, type: !11253)
!11427 = !DILocation(line: 230, column: 42, scope: !11383)
!11428 = !DILocalVariable(name: "stream", arg: 2, scope: !11383, file: !941, line: 230, type: !11386)
!11429 = !DILocation(line: 230, column: 55, scope: !11383)
!11430 = !DILocalVariable(name: "n_entries", scope: !11383, file: !941, line: 232, type: !52)
!11431 = !DILocation(line: 232, column: 10, scope: !11383)
!11432 = !DILocation(line: 232, column: 42, scope: !11383)
!11433 = !DILocation(line: 232, column: 22, scope: !11383)
!11434 = !DILocalVariable(name: "n_buckets", scope: !11383, file: !941, line: 233, type: !52)
!11435 = !DILocation(line: 233, column: 10, scope: !11383)
!11436 = !DILocation(line: 233, column: 42, scope: !11383)
!11437 = !DILocation(line: 233, column: 22, scope: !11383)
!11438 = !DILocalVariable(name: "n_buckets_used", scope: !11383, file: !941, line: 234, type: !52)
!11439 = !DILocation(line: 234, column: 10, scope: !11383)
!11440 = !DILocation(line: 234, column: 52, scope: !11383)
!11441 = !DILocation(line: 234, column: 27, scope: !11383)
!11442 = !DILocalVariable(name: "max_bucket_length", scope: !11383, file: !941, line: 235, type: !52)
!11443 = !DILocation(line: 235, column: 10, scope: !11383)
!11444 = !DILocation(line: 235, column: 58, scope: !11383)
!11445 = !DILocation(line: 235, column: 30, scope: !11383)
!11446 = !DILocation(line: 237, column: 12, scope: !11383)
!11447 = !DILocation(line: 237, column: 68, scope: !11383)
!11448 = !DILocation(line: 237, column: 3, scope: !11383)
!11449 = !DILocation(line: 238, column: 12, scope: !11383)
!11450 = !DILocation(line: 238, column: 68, scope: !11383)
!11451 = !DILocation(line: 238, column: 3, scope: !11383)
!11452 = !DILocation(line: 239, column: 12, scope: !11383)
!11453 = !DILocation(line: 240, column: 32, scope: !11383)
!11454 = !DILocation(line: 241, column: 21, scope: !11383)
!11455 = !DILocation(line: 241, column: 19, scope: !11383)
!11456 = !DILocation(line: 241, column: 39, scope: !11383)
!11457 = !DILocation(line: 241, column: 37, scope: !11383)
!11458 = !DILocation(line: 239, column: 3, scope: !11383)
!11459 = !DILocation(line: 242, column: 12, scope: !11383)
!11460 = !DILocation(line: 243, column: 32, scope: !11383)
!11461 = !DILocation(line: 242, column: 3, scope: !11383)
!11462 = !DILocation(line: 244, column: 1, scope: !11383)
!11463 = distinct !DISubprogram(name: "hash_lookup", scope: !941, file: !941, line: 261, type: !11464, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11464 = !DISubroutineType(types: !11465)
!11465 = !{!47, !11253, !85}
!11466 = !DILocalVariable(name: "table", arg: 1, scope: !11463, file: !941, line: 261, type: !11253)
!11467 = !DILocation(line: 261, column: 32, scope: !11463)
!11468 = !DILocalVariable(name: "entry", arg: 2, scope: !11463, file: !941, line: 261, type: !85)
!11469 = !DILocation(line: 261, column: 51, scope: !11463)
!11470 = !DILocalVariable(name: "bucket", scope: !11463, file: !941, line: 263, type: !950)
!11471 = !DILocation(line: 263, column: 28, scope: !11463)
!11472 = !DILocation(line: 263, column: 50, scope: !11463)
!11473 = !DILocation(line: 263, column: 57, scope: !11463)
!11474 = !DILocation(line: 263, column: 37, scope: !11463)
!11475 = !DILocalVariable(name: "cursor", scope: !11463, file: !941, line: 264, type: !950)
!11476 = !DILocation(line: 264, column: 28, scope: !11463)
!11477 = !DILocation(line: 266, column: 7, scope: !11478)
!11478 = distinct !DILexicalBlock(scope: !11463, file: !941, line: 266, column: 7)
!11479 = !DILocation(line: 266, column: 15, scope: !11478)
!11480 = !DILocation(line: 266, column: 20, scope: !11478)
!11481 = !DILocation(line: 266, column: 7, scope: !11463)
!11482 = !DILocation(line: 267, column: 5, scope: !11478)
!11483 = !DILocation(line: 269, column: 17, scope: !11484)
!11484 = distinct !DILexicalBlock(scope: !11463, file: !941, line: 269, column: 3)
!11485 = !DILocation(line: 269, column: 15, scope: !11484)
!11486 = !DILocation(line: 269, column: 8, scope: !11484)
!11487 = !DILocation(line: 269, column: 25, scope: !11488)
!11488 = distinct !DILexicalBlock(scope: !11484, file: !941, line: 269, column: 3)
!11489 = !DILocation(line: 269, column: 3, scope: !11484)
!11490 = !DILocation(line: 270, column: 9, scope: !11491)
!11491 = distinct !DILexicalBlock(scope: !11488, file: !941, line: 270, column: 9)
!11492 = !DILocation(line: 270, column: 18, scope: !11491)
!11493 = !DILocation(line: 270, column: 26, scope: !11491)
!11494 = !DILocation(line: 270, column: 15, scope: !11491)
!11495 = !DILocation(line: 270, column: 31, scope: !11491)
!11496 = !DILocation(line: 270, column: 34, scope: !11491)
!11497 = !DILocation(line: 270, column: 41, scope: !11491)
!11498 = !DILocation(line: 270, column: 53, scope: !11491)
!11499 = !DILocation(line: 270, column: 60, scope: !11491)
!11500 = !DILocation(line: 270, column: 68, scope: !11491)
!11501 = !DILocation(line: 270, column: 9, scope: !11488)
!11502 = !DILocation(line: 271, column: 14, scope: !11491)
!11503 = !DILocation(line: 271, column: 22, scope: !11491)
!11504 = !DILocation(line: 271, column: 7, scope: !11491)
!11505 = !DILocation(line: 270, column: 72, scope: !11491)
!11506 = !DILocation(line: 269, column: 42, scope: !11488)
!11507 = !DILocation(line: 269, column: 50, scope: !11488)
!11508 = !DILocation(line: 269, column: 40, scope: !11488)
!11509 = !DILocation(line: 269, column: 3, scope: !11488)
!11510 = distinct !{!11510, !11489, !11511}
!11511 = !DILocation(line: 271, column: 22, scope: !11484)
!11512 = !DILocation(line: 273, column: 3, scope: !11463)
!11513 = !DILocation(line: 274, column: 1, scope: !11463)
!11514 = distinct !DISubprogram(name: "safe_hasher", scope: !941, file: !941, line: 249, type: !11515, scopeLine: 250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11515 = !DISubroutineType(types: !11516)
!11516 = !{!944, !11253, !85}
!11517 = !DILocalVariable(name: "table", arg: 1, scope: !11514, file: !941, line: 249, type: !11253)
!11518 = !DILocation(line: 249, column: 32, scope: !11514)
!11519 = !DILocalVariable(name: "key", arg: 2, scope: !11514, file: !941, line: 249, type: !85)
!11520 = !DILocation(line: 249, column: 51, scope: !11514)
!11521 = !DILocalVariable(name: "n", scope: !11514, file: !941, line: 251, type: !52)
!11522 = !DILocation(line: 251, column: 10, scope: !11514)
!11523 = !DILocation(line: 251, column: 14, scope: !11514)
!11524 = !DILocation(line: 251, column: 21, scope: !11514)
!11525 = !DILocation(line: 251, column: 29, scope: !11514)
!11526 = !DILocation(line: 251, column: 34, scope: !11514)
!11527 = !DILocation(line: 251, column: 41, scope: !11514)
!11528 = !DILocation(line: 252, column: 10, scope: !11529)
!11529 = distinct !DILexicalBlock(scope: !11514, file: !941, line: 252, column: 7)
!11530 = !DILocation(line: 252, column: 14, scope: !11529)
!11531 = !DILocation(line: 252, column: 21, scope: !11529)
!11532 = !DILocation(line: 252, column: 12, scope: !11529)
!11533 = !DILocation(line: 252, column: 7, scope: !11514)
!11534 = !DILocation(line: 253, column: 5, scope: !11529)
!11535 = !DILocation(line: 254, column: 10, scope: !11514)
!11536 = !DILocation(line: 254, column: 17, scope: !11514)
!11537 = !DILocation(line: 254, column: 26, scope: !11514)
!11538 = !DILocation(line: 254, column: 24, scope: !11514)
!11539 = !DILocation(line: 254, column: 3, scope: !11514)
!11540 = distinct !DISubprogram(name: "hash_get_first", scope: !941, file: !941, line: 288, type: !11541, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11541 = !DISubroutineType(types: !11542)
!11542 = !{!47, !11253}
!11543 = !DILocalVariable(name: "table", arg: 1, scope: !11540, file: !941, line: 288, type: !11253)
!11544 = !DILocation(line: 288, column: 35, scope: !11540)
!11545 = !DILocalVariable(name: "bucket", scope: !11540, file: !941, line: 290, type: !950)
!11546 = !DILocation(line: 290, column: 28, scope: !11540)
!11547 = !DILocation(line: 292, column: 7, scope: !11548)
!11548 = distinct !DILexicalBlock(scope: !11540, file: !941, line: 292, column: 7)
!11549 = !DILocation(line: 292, column: 14, scope: !11548)
!11550 = !DILocation(line: 292, column: 24, scope: !11548)
!11551 = !DILocation(line: 292, column: 7, scope: !11540)
!11552 = !DILocation(line: 293, column: 5, scope: !11548)
!11553 = !DILocation(line: 295, column: 17, scope: !11554)
!11554 = distinct !DILexicalBlock(scope: !11540, file: !941, line: 295, column: 3)
!11555 = !DILocation(line: 295, column: 24, scope: !11554)
!11556 = !DILocation(line: 295, column: 15, scope: !11554)
!11557 = !DILocation(line: 295, column: 8, scope: !11554)
!11558 = !DILocation(line: 296, column: 12, scope: !11559)
!11559 = distinct !DILexicalBlock(scope: !11560, file: !941, line: 296, column: 9)
!11560 = distinct !DILexicalBlock(scope: !11554, file: !941, line: 295, column: 3)
!11561 = !DILocation(line: 296, column: 21, scope: !11559)
!11562 = !DILocation(line: 296, column: 28, scope: !11559)
!11563 = !DILocation(line: 296, column: 19, scope: !11559)
!11564 = !DILocation(line: 296, column: 9, scope: !11560)
!11565 = !DILocation(line: 297, column: 7, scope: !11559)
!11566 = !DILocation(line: 298, column: 14, scope: !11567)
!11567 = distinct !DILexicalBlock(scope: !11559, file: !941, line: 298, column: 14)
!11568 = !DILocation(line: 298, column: 22, scope: !11567)
!11569 = !DILocation(line: 298, column: 14, scope: !11559)
!11570 = !DILocation(line: 299, column: 14, scope: !11567)
!11571 = !DILocation(line: 299, column: 22, scope: !11567)
!11572 = !DILocation(line: 299, column: 7, scope: !11567)
!11573 = !DILocation(line: 296, column: 40, scope: !11559)
!11574 = !DILocation(line: 295, column: 40, scope: !11560)
!11575 = !DILocation(line: 295, column: 3, scope: !11560)
!11576 = distinct !{!11576, !11577, !11578}
!11577 = !DILocation(line: 295, column: 3, scope: !11554)
!11578 = !DILocation(line: 299, column: 22, scope: !11554)
!11579 = !DILocation(line: 300, column: 1, scope: !11540)
!11580 = distinct !DISubprogram(name: "hash_get_next", scope: !941, file: !941, line: 307, type: !11464, scopeLine: 308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11581 = !DILocalVariable(name: "table", arg: 1, scope: !11580, file: !941, line: 307, type: !11253)
!11582 = !DILocation(line: 307, column: 34, scope: !11580)
!11583 = !DILocalVariable(name: "entry", arg: 2, scope: !11580, file: !941, line: 307, type: !85)
!11584 = !DILocation(line: 307, column: 53, scope: !11580)
!11585 = !DILocalVariable(name: "bucket", scope: !11580, file: !941, line: 309, type: !950)
!11586 = !DILocation(line: 309, column: 28, scope: !11580)
!11587 = !DILocation(line: 309, column: 50, scope: !11580)
!11588 = !DILocation(line: 309, column: 57, scope: !11580)
!11589 = !DILocation(line: 309, column: 37, scope: !11580)
!11590 = !DILocalVariable(name: "cursor", scope: !11580, file: !941, line: 310, type: !950)
!11591 = !DILocation(line: 310, column: 28, scope: !11580)
!11592 = !DILocation(line: 313, column: 12, scope: !11580)
!11593 = !DILocation(line: 313, column: 10, scope: !11580)
!11594 = !DILocation(line: 314, column: 3, scope: !11580)
!11595 = !DILocation(line: 316, column: 11, scope: !11596)
!11596 = distinct !DILexicalBlock(scope: !11597, file: !941, line: 316, column: 11)
!11597 = distinct !DILexicalBlock(scope: !11580, file: !941, line: 315, column: 5)
!11598 = !DILocation(line: 316, column: 19, scope: !11596)
!11599 = !DILocation(line: 316, column: 27, scope: !11596)
!11600 = !DILocation(line: 316, column: 24, scope: !11596)
!11601 = !DILocation(line: 316, column: 33, scope: !11596)
!11602 = !DILocation(line: 316, column: 36, scope: !11596)
!11603 = !DILocation(line: 316, column: 44, scope: !11596)
!11604 = !DILocation(line: 316, column: 11, scope: !11597)
!11605 = !DILocation(line: 317, column: 16, scope: !11596)
!11606 = !DILocation(line: 317, column: 24, scope: !11596)
!11607 = !DILocation(line: 317, column: 30, scope: !11596)
!11608 = !DILocation(line: 317, column: 9, scope: !11596)
!11609 = !DILocation(line: 318, column: 16, scope: !11597)
!11610 = !DILocation(line: 318, column: 24, scope: !11597)
!11611 = !DILocation(line: 318, column: 14, scope: !11597)
!11612 = !DILocation(line: 319, column: 5, scope: !11597)
!11613 = !DILocation(line: 320, column: 10, scope: !11580)
!11614 = !DILocation(line: 320, column: 17, scope: !11580)
!11615 = distinct !{!11615, !11594, !11616}
!11616 = !DILocation(line: 320, column: 24, scope: !11580)
!11617 = !DILocation(line: 323, column: 3, scope: !11580)
!11618 = !DILocation(line: 323, column: 10, scope: !11580)
!11619 = !DILocation(line: 323, column: 21, scope: !11580)
!11620 = !DILocation(line: 323, column: 28, scope: !11580)
!11621 = !DILocation(line: 323, column: 19, scope: !11580)
!11622 = !DILocation(line: 324, column: 9, scope: !11623)
!11623 = distinct !DILexicalBlock(scope: !11580, file: !941, line: 324, column: 9)
!11624 = !DILocation(line: 324, column: 17, scope: !11623)
!11625 = !DILocation(line: 324, column: 9, scope: !11580)
!11626 = !DILocation(line: 325, column: 14, scope: !11623)
!11627 = !DILocation(line: 325, column: 22, scope: !11623)
!11628 = !DILocation(line: 325, column: 7, scope: !11623)
!11629 = distinct !{!11629, !11617, !11630}
!11630 = !DILocation(line: 325, column: 22, scope: !11580)
!11631 = !DILocation(line: 328, column: 3, scope: !11580)
!11632 = !DILocation(line: 329, column: 1, scope: !11580)
!11633 = distinct !DISubprogram(name: "hash_get_entries", scope: !941, file: !941, line: 336, type: !11634, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11634 = !DISubroutineType(types: !11635)
!11635 = !{!52, !11253, !983, !52}
!11636 = !DILocalVariable(name: "table", arg: 1, scope: !11633, file: !941, line: 336, type: !11253)
!11637 = !DILocation(line: 336, column: 37, scope: !11633)
!11638 = !DILocalVariable(name: "buffer", arg: 2, scope: !11633, file: !941, line: 336, type: !983)
!11639 = !DILocation(line: 336, column: 51, scope: !11633)
!11640 = !DILocalVariable(name: "buffer_size", arg: 3, scope: !11633, file: !941, line: 337, type: !52)
!11641 = !DILocation(line: 337, column: 26, scope: !11633)
!11642 = !DILocalVariable(name: "counter", scope: !11633, file: !941, line: 339, type: !52)
!11643 = !DILocation(line: 339, column: 10, scope: !11633)
!11644 = !DILocalVariable(name: "bucket", scope: !11633, file: !941, line: 340, type: !950)
!11645 = !DILocation(line: 340, column: 28, scope: !11633)
!11646 = !DILocalVariable(name: "cursor", scope: !11633, file: !941, line: 341, type: !950)
!11647 = !DILocation(line: 341, column: 28, scope: !11633)
!11648 = !DILocation(line: 343, column: 17, scope: !11649)
!11649 = distinct !DILexicalBlock(scope: !11633, file: !941, line: 343, column: 3)
!11650 = !DILocation(line: 343, column: 24, scope: !11649)
!11651 = !DILocation(line: 343, column: 15, scope: !11649)
!11652 = !DILocation(line: 343, column: 8, scope: !11649)
!11653 = !DILocation(line: 343, column: 32, scope: !11654)
!11654 = distinct !DILexicalBlock(scope: !11649, file: !941, line: 343, column: 3)
!11655 = !DILocation(line: 343, column: 41, scope: !11654)
!11656 = !DILocation(line: 343, column: 48, scope: !11654)
!11657 = !DILocation(line: 343, column: 39, scope: !11654)
!11658 = !DILocation(line: 343, column: 3, scope: !11649)
!11659 = !DILocation(line: 345, column: 11, scope: !11660)
!11660 = distinct !DILexicalBlock(scope: !11661, file: !941, line: 345, column: 11)
!11661 = distinct !DILexicalBlock(scope: !11654, file: !941, line: 344, column: 5)
!11662 = !DILocation(line: 345, column: 19, scope: !11660)
!11663 = !DILocation(line: 345, column: 11, scope: !11661)
!11664 = !DILocation(line: 347, column: 25, scope: !11665)
!11665 = distinct !DILexicalBlock(scope: !11666, file: !941, line: 347, column: 11)
!11666 = distinct !DILexicalBlock(scope: !11660, file: !941, line: 346, column: 9)
!11667 = !DILocation(line: 347, column: 23, scope: !11665)
!11668 = !DILocation(line: 347, column: 16, scope: !11665)
!11669 = !DILocation(line: 347, column: 33, scope: !11670)
!11670 = distinct !DILexicalBlock(scope: !11665, file: !941, line: 347, column: 11)
!11671 = !DILocation(line: 347, column: 11, scope: !11665)
!11672 = !DILocation(line: 349, column: 19, scope: !11673)
!11673 = distinct !DILexicalBlock(scope: !11674, file: !941, line: 349, column: 19)
!11674 = distinct !DILexicalBlock(scope: !11670, file: !941, line: 348, column: 13)
!11675 = !DILocation(line: 349, column: 30, scope: !11673)
!11676 = !DILocation(line: 349, column: 27, scope: !11673)
!11677 = !DILocation(line: 349, column: 19, scope: !11674)
!11678 = !DILocation(line: 350, column: 24, scope: !11673)
!11679 = !DILocation(line: 350, column: 17, scope: !11673)
!11680 = !DILocation(line: 351, column: 35, scope: !11674)
!11681 = !DILocation(line: 351, column: 43, scope: !11674)
!11682 = !DILocation(line: 351, column: 15, scope: !11674)
!11683 = !DILocation(line: 351, column: 29, scope: !11674)
!11684 = !DILocation(line: 351, column: 33, scope: !11674)
!11685 = !DILocation(line: 352, column: 13, scope: !11674)
!11686 = !DILocation(line: 347, column: 50, scope: !11670)
!11687 = !DILocation(line: 347, column: 58, scope: !11670)
!11688 = !DILocation(line: 347, column: 48, scope: !11670)
!11689 = !DILocation(line: 347, column: 11, scope: !11670)
!11690 = distinct !{!11690, !11671, !11691}
!11691 = !DILocation(line: 352, column: 13, scope: !11665)
!11692 = !DILocation(line: 353, column: 9, scope: !11666)
!11693 = !DILocation(line: 354, column: 5, scope: !11661)
!11694 = !DILocation(line: 343, column: 68, scope: !11654)
!11695 = !DILocation(line: 343, column: 3, scope: !11654)
!11696 = distinct !{!11696, !11658, !11697}
!11697 = !DILocation(line: 354, column: 5, scope: !11649)
!11698 = !DILocation(line: 356, column: 10, scope: !11633)
!11699 = !DILocation(line: 356, column: 3, scope: !11633)
!11700 = !DILocation(line: 357, column: 1, scope: !11633)
!11701 = distinct !DISubprogram(name: "hash_do_for_each", scope: !941, file: !941, line: 368, type: !11702, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11702 = !DISubroutineType(types: !11703)
!11703 = !{!52, !11253, !11704, !47}
!11704 = !DIDerivedType(tag: DW_TAG_typedef, name: "Hash_processor", file: !591, line: 51, baseType: !11705)
!11705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11706, size: 64)
!11706 = !DISubroutineType(types: !11707)
!11707 = !{!162, !47, !47}
!11708 = !DILocalVariable(name: "table", arg: 1, scope: !11701, file: !941, line: 368, type: !11253)
!11709 = !DILocation(line: 368, column: 37, scope: !11701)
!11710 = !DILocalVariable(name: "processor", arg: 2, scope: !11701, file: !941, line: 368, type: !11704)
!11711 = !DILocation(line: 368, column: 59, scope: !11701)
!11712 = !DILocalVariable(name: "processor_data", arg: 3, scope: !11701, file: !941, line: 369, type: !47)
!11713 = !DILocation(line: 369, column: 25, scope: !11701)
!11714 = !DILocalVariable(name: "counter", scope: !11701, file: !941, line: 371, type: !52)
!11715 = !DILocation(line: 371, column: 10, scope: !11701)
!11716 = !DILocalVariable(name: "bucket", scope: !11701, file: !941, line: 372, type: !950)
!11717 = !DILocation(line: 372, column: 28, scope: !11701)
!11718 = !DILocalVariable(name: "cursor", scope: !11701, file: !941, line: 373, type: !950)
!11719 = !DILocation(line: 373, column: 28, scope: !11701)
!11720 = !DILocation(line: 375, column: 17, scope: !11721)
!11721 = distinct !DILexicalBlock(scope: !11701, file: !941, line: 375, column: 3)
!11722 = !DILocation(line: 375, column: 24, scope: !11721)
!11723 = !DILocation(line: 375, column: 15, scope: !11721)
!11724 = !DILocation(line: 375, column: 8, scope: !11721)
!11725 = !DILocation(line: 375, column: 32, scope: !11726)
!11726 = distinct !DILexicalBlock(scope: !11721, file: !941, line: 375, column: 3)
!11727 = !DILocation(line: 375, column: 41, scope: !11726)
!11728 = !DILocation(line: 375, column: 48, scope: !11726)
!11729 = !DILocation(line: 375, column: 39, scope: !11726)
!11730 = !DILocation(line: 375, column: 3, scope: !11721)
!11731 = !DILocation(line: 377, column: 11, scope: !11732)
!11732 = distinct !DILexicalBlock(scope: !11733, file: !941, line: 377, column: 11)
!11733 = distinct !DILexicalBlock(scope: !11726, file: !941, line: 376, column: 5)
!11734 = !DILocation(line: 377, column: 19, scope: !11732)
!11735 = !DILocation(line: 377, column: 11, scope: !11733)
!11736 = !DILocation(line: 379, column: 25, scope: !11737)
!11737 = distinct !DILexicalBlock(scope: !11738, file: !941, line: 379, column: 11)
!11738 = distinct !DILexicalBlock(scope: !11732, file: !941, line: 378, column: 9)
!11739 = !DILocation(line: 379, column: 23, scope: !11737)
!11740 = !DILocation(line: 379, column: 16, scope: !11737)
!11741 = !DILocation(line: 379, column: 33, scope: !11742)
!11742 = distinct !DILexicalBlock(scope: !11737, file: !941, line: 379, column: 11)
!11743 = !DILocation(line: 379, column: 11, scope: !11737)
!11744 = !DILocation(line: 381, column: 21, scope: !11745)
!11745 = distinct !DILexicalBlock(scope: !11746, file: !941, line: 381, column: 19)
!11746 = distinct !DILexicalBlock(scope: !11742, file: !941, line: 380, column: 13)
!11747 = !DILocation(line: 381, column: 32, scope: !11745)
!11748 = !DILocation(line: 381, column: 40, scope: !11745)
!11749 = !DILocation(line: 381, column: 46, scope: !11745)
!11750 = !DILocation(line: 381, column: 19, scope: !11746)
!11751 = !DILocation(line: 382, column: 24, scope: !11745)
!11752 = !DILocation(line: 382, column: 17, scope: !11745)
!11753 = !DILocation(line: 383, column: 22, scope: !11746)
!11754 = !DILocation(line: 384, column: 13, scope: !11746)
!11755 = !DILocation(line: 379, column: 50, scope: !11742)
!11756 = !DILocation(line: 379, column: 58, scope: !11742)
!11757 = !DILocation(line: 379, column: 48, scope: !11742)
!11758 = !DILocation(line: 379, column: 11, scope: !11742)
!11759 = distinct !{!11759, !11743, !11760}
!11760 = !DILocation(line: 384, column: 13, scope: !11737)
!11761 = !DILocation(line: 385, column: 9, scope: !11738)
!11762 = !DILocation(line: 386, column: 5, scope: !11733)
!11763 = !DILocation(line: 375, column: 68, scope: !11726)
!11764 = !DILocation(line: 375, column: 3, scope: !11726)
!11765 = distinct !{!11765, !11730, !11766}
!11766 = !DILocation(line: 386, column: 5, scope: !11721)
!11767 = !DILocation(line: 388, column: 10, scope: !11701)
!11768 = !DILocation(line: 388, column: 3, scope: !11701)
!11769 = !DILocation(line: 389, column: 1, scope: !11701)
!11770 = distinct !DISubprogram(name: "hash_string", scope: !941, file: !941, line: 428, type: !11771, scopeLine: 429, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11771 = !DISubroutineType(types: !11772)
!11772 = !{!52, !90, !52}
!11773 = !DILocalVariable(name: "string", arg: 1, scope: !11770, file: !941, line: 428, type: !90)
!11774 = !DILocation(line: 428, column: 26, scope: !11770)
!11775 = !DILocalVariable(name: "n_buckets", arg: 2, scope: !11770, file: !941, line: 428, type: !52)
!11776 = !DILocation(line: 428, column: 41, scope: !11770)
!11777 = !DILocalVariable(name: "value", scope: !11770, file: !941, line: 430, type: !52)
!11778 = !DILocation(line: 430, column: 10, scope: !11770)
!11779 = !DILocalVariable(name: "ch", scope: !11770, file: !941, line: 431, type: !535)
!11780 = !DILocation(line: 431, column: 17, scope: !11770)
!11781 = !DILocation(line: 433, column: 3, scope: !11770)
!11782 = !DILocation(line: 433, column: 17, scope: !11783)
!11783 = distinct !DILexicalBlock(scope: !11784, file: !941, line: 433, column: 3)
!11784 = distinct !DILexicalBlock(scope: !11770, file: !941, line: 433, column: 3)
!11785 = !DILocation(line: 433, column: 16, scope: !11783)
!11786 = !DILocation(line: 433, column: 14, scope: !11783)
!11787 = !DILocation(line: 433, column: 3, scope: !11784)
!11788 = !DILocation(line: 434, column: 14, scope: !11783)
!11789 = !DILocation(line: 434, column: 20, scope: !11783)
!11790 = !DILocation(line: 434, column: 27, scope: !11783)
!11791 = !DILocation(line: 434, column: 25, scope: !11783)
!11792 = !DILocation(line: 434, column: 33, scope: !11783)
!11793 = !DILocation(line: 434, column: 31, scope: !11783)
!11794 = !DILocation(line: 434, column: 11, scope: !11783)
!11795 = !DILocation(line: 434, column: 5, scope: !11783)
!11796 = !DILocation(line: 433, column: 32, scope: !11783)
!11797 = !DILocation(line: 433, column: 3, scope: !11783)
!11798 = distinct !{!11798, !11787, !11799}
!11799 = !DILocation(line: 434, column: 33, scope: !11784)
!11800 = !DILocation(line: 435, column: 10, scope: !11770)
!11801 = !DILocation(line: 435, column: 3, scope: !11770)
!11802 = distinct !DISubprogram(name: "hash_reset_tuning", scope: !941, file: !941, line: 479, type: !11803, scopeLine: 480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11803 = !DISubroutineType(types: !11804)
!11804 = !{null, !11805}
!11805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !958, size: 64)
!11806 = !DILocalVariable(name: "tuning", arg: 1, scope: !11802, file: !941, line: 479, type: !11805)
!11807 = !DILocation(line: 479, column: 33, scope: !11802)
!11808 = !DILocation(line: 481, column: 4, scope: !11802)
!11809 = !DILocation(line: 481, column: 13, scope: !11802)
!11810 = !DILocation(line: 482, column: 1, scope: !11802)
!11811 = distinct !DISubprogram(name: "hash_initialize", scope: !941, file: !941, line: 594, type: !11812, scopeLine: 597, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11812 = !DISubroutineType(types: !11813)
!11813 = !{!984, !52, !956, !968, !973, !978}
!11814 = !DILocalVariable(name: "candidate", arg: 1, scope: !11811, file: !941, line: 594, type: !52)
!11815 = !DILocation(line: 594, column: 25, scope: !11811)
!11816 = !DILocalVariable(name: "tuning", arg: 2, scope: !11811, file: !941, line: 594, type: !956)
!11817 = !DILocation(line: 594, column: 55, scope: !11811)
!11818 = !DILocalVariable(name: "hasher", arg: 3, scope: !11811, file: !941, line: 595, type: !968)
!11819 = !DILocation(line: 595, column: 30, scope: !11811)
!11820 = !DILocalVariable(name: "comparator", arg: 4, scope: !11811, file: !941, line: 595, type: !973)
!11821 = !DILocation(line: 595, column: 54, scope: !11811)
!11822 = !DILocalVariable(name: "data_freer", arg: 5, scope: !11811, file: !941, line: 596, type: !978)
!11823 = !DILocation(line: 596, column: 34, scope: !11811)
!11824 = !DILocalVariable(name: "table", scope: !11811, file: !941, line: 598, type: !984)
!11825 = !DILocation(line: 598, column: 15, scope: !11811)
!11826 = !DILocation(line: 600, column: 7, scope: !11827)
!11827 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 600, column: 7)
!11828 = !DILocation(line: 600, column: 14, scope: !11827)
!11829 = !DILocation(line: 600, column: 7, scope: !11811)
!11830 = !DILocation(line: 601, column: 12, scope: !11827)
!11831 = !DILocation(line: 601, column: 5, scope: !11827)
!11832 = !DILocation(line: 602, column: 7, scope: !11833)
!11833 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 602, column: 7)
!11834 = !DILocation(line: 602, column: 18, scope: !11833)
!11835 = !DILocation(line: 602, column: 7, scope: !11811)
!11836 = !DILocation(line: 603, column: 16, scope: !11833)
!11837 = !DILocation(line: 603, column: 5, scope: !11833)
!11838 = !DILocation(line: 605, column: 11, scope: !11811)
!11839 = !DILocation(line: 605, column: 9, scope: !11811)
!11840 = !DILocation(line: 606, column: 7, scope: !11841)
!11841 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 606, column: 7)
!11842 = !DILocation(line: 606, column: 13, scope: !11841)
!11843 = !DILocation(line: 606, column: 7, scope: !11811)
!11844 = !DILocation(line: 607, column: 5, scope: !11841)
!11845 = !DILocation(line: 609, column: 8, scope: !11846)
!11846 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 609, column: 7)
!11847 = !DILocation(line: 609, column: 7, scope: !11811)
!11848 = !DILocation(line: 610, column: 12, scope: !11846)
!11849 = !DILocation(line: 610, column: 5, scope: !11846)
!11850 = !DILocation(line: 611, column: 19, scope: !11811)
!11851 = !DILocation(line: 611, column: 3, scope: !11811)
!11852 = !DILocation(line: 611, column: 10, scope: !11811)
!11853 = !DILocation(line: 611, column: 17, scope: !11811)
!11854 = !DILocation(line: 612, column: 22, scope: !11855)
!11855 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 612, column: 7)
!11856 = !DILocation(line: 612, column: 8, scope: !11855)
!11857 = !DILocation(line: 612, column: 7, scope: !11811)
!11858 = !DILocation(line: 619, column: 7, scope: !11859)
!11859 = distinct !DILexicalBlock(scope: !11855, file: !941, line: 613, column: 5)
!11860 = !DILocation(line: 622, column: 43, scope: !11811)
!11861 = !DILocation(line: 622, column: 54, scope: !11811)
!11862 = !DILocation(line: 622, column: 22, scope: !11811)
!11863 = !DILocation(line: 622, column: 3, scope: !11811)
!11864 = !DILocation(line: 622, column: 10, scope: !11811)
!11865 = !DILocation(line: 622, column: 20, scope: !11811)
!11866 = !DILocation(line: 623, column: 8, scope: !11867)
!11867 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 623, column: 7)
!11868 = !DILocation(line: 623, column: 15, scope: !11867)
!11869 = !DILocation(line: 623, column: 7, scope: !11811)
!11870 = !DILocation(line: 624, column: 5, scope: !11867)
!11871 = !DILocation(line: 626, column: 27, scope: !11811)
!11872 = !DILocation(line: 626, column: 34, scope: !11811)
!11873 = !DILocation(line: 626, column: 19, scope: !11811)
!11874 = !DILocation(line: 626, column: 3, scope: !11811)
!11875 = !DILocation(line: 626, column: 10, scope: !11811)
!11876 = !DILocation(line: 626, column: 17, scope: !11811)
!11877 = !DILocation(line: 627, column: 7, scope: !11878)
!11878 = distinct !DILexicalBlock(scope: !11811, file: !941, line: 627, column: 7)
!11879 = !DILocation(line: 627, column: 14, scope: !11878)
!11880 = !DILocation(line: 627, column: 21, scope: !11878)
!11881 = !DILocation(line: 627, column: 7, scope: !11811)
!11882 = !DILocation(line: 628, column: 5, scope: !11878)
!11883 = !DILocation(line: 629, column: 25, scope: !11811)
!11884 = !DILocation(line: 629, column: 32, scope: !11811)
!11885 = !DILocation(line: 629, column: 41, scope: !11811)
!11886 = !DILocation(line: 629, column: 48, scope: !11811)
!11887 = !DILocation(line: 629, column: 39, scope: !11811)
!11888 = !DILocation(line: 629, column: 3, scope: !11811)
!11889 = !DILocation(line: 629, column: 10, scope: !11811)
!11890 = !DILocation(line: 629, column: 23, scope: !11811)
!11891 = !DILocation(line: 630, column: 3, scope: !11811)
!11892 = !DILocation(line: 630, column: 10, scope: !11811)
!11893 = !DILocation(line: 630, column: 25, scope: !11811)
!11894 = !DILocation(line: 631, column: 3, scope: !11811)
!11895 = !DILocation(line: 631, column: 10, scope: !11811)
!11896 = !DILocation(line: 631, column: 20, scope: !11811)
!11897 = !DILocation(line: 633, column: 19, scope: !11811)
!11898 = !DILocation(line: 633, column: 3, scope: !11811)
!11899 = !DILocation(line: 633, column: 10, scope: !11811)
!11900 = !DILocation(line: 633, column: 17, scope: !11811)
!11901 = !DILocation(line: 634, column: 23, scope: !11811)
!11902 = !DILocation(line: 634, column: 3, scope: !11811)
!11903 = !DILocation(line: 634, column: 10, scope: !11811)
!11904 = !DILocation(line: 634, column: 21, scope: !11811)
!11905 = !DILocation(line: 635, column: 23, scope: !11811)
!11906 = !DILocation(line: 635, column: 3, scope: !11811)
!11907 = !DILocation(line: 635, column: 10, scope: !11811)
!11908 = !DILocation(line: 635, column: 21, scope: !11811)
!11909 = !DILocation(line: 637, column: 3, scope: !11811)
!11910 = !DILocation(line: 637, column: 10, scope: !11811)
!11911 = !DILocation(line: 637, column: 26, scope: !11811)
!11912 = !DILocation(line: 641, column: 10, scope: !11811)
!11913 = !DILocation(line: 641, column: 3, scope: !11811)
!11914 = !DILabel(scope: !11811, name: "fail", file: !941, line: 643)
!11915 = !DILocation(line: 643, column: 2, scope: !11811)
!11916 = !DILocation(line: 644, column: 9, scope: !11811)
!11917 = !DILocation(line: 644, column: 3, scope: !11811)
!11918 = !DILocation(line: 645, column: 3, scope: !11811)
!11919 = !DILocation(line: 646, column: 1, scope: !11811)
!11920 = distinct !DISubprogram(name: "raw_hasher", scope: !941, file: !941, line: 486, type: !970, scopeLine: 487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11921 = !DILocalVariable(name: "data", arg: 1, scope: !11920, file: !941, line: 486, type: !85)
!11922 = !DILocation(line: 486, column: 25, scope: !11920)
!11923 = !DILocalVariable(name: "n", arg: 2, scope: !11920, file: !941, line: 486, type: !52)
!11924 = !DILocation(line: 486, column: 38, scope: !11920)
!11925 = !DILocalVariable(name: "val", scope: !11920, file: !941, line: 493, type: !52)
!11926 = !DILocation(line: 493, column: 10, scope: !11920)
!11927 = !DILocation(line: 493, column: 34, scope: !11920)
!11928 = !DILocation(line: 493, column: 25, scope: !11920)
!11929 = !DILocation(line: 493, column: 16, scope: !11920)
!11930 = !DILocation(line: 494, column: 10, scope: !11920)
!11931 = !DILocation(line: 494, column: 16, scope: !11920)
!11932 = !DILocation(line: 494, column: 14, scope: !11920)
!11933 = !DILocation(line: 494, column: 3, scope: !11920)
!11934 = distinct !DISubprogram(name: "raw_comparator", scope: !941, file: !941, line: 499, type: !975, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11935 = !DILocalVariable(name: "a", arg: 1, scope: !11934, file: !941, line: 499, type: !85)
!11936 = !DILocation(line: 499, column: 29, scope: !11934)
!11937 = !DILocalVariable(name: "b", arg: 2, scope: !11934, file: !941, line: 499, type: !85)
!11938 = !DILocation(line: 499, column: 44, scope: !11934)
!11939 = !DILocation(line: 501, column: 10, scope: !11934)
!11940 = !DILocation(line: 501, column: 15, scope: !11934)
!11941 = !DILocation(line: 501, column: 12, scope: !11934)
!11942 = !DILocation(line: 501, column: 3, scope: !11934)
!11943 = distinct !DISubprogram(name: "check_tuning", scope: !941, file: !941, line: 512, type: !11944, scopeLine: 513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!11944 = !DISubroutineType(types: !11945)
!11945 = !{!162, !984}
!11946 = !DILocalVariable(name: "table", arg: 1, scope: !11943, file: !941, line: 512, type: !984)
!11947 = !DILocation(line: 512, column: 27, scope: !11943)
!11948 = !DILocalVariable(name: "tuning", scope: !11943, file: !941, line: 514, type: !956)
!11949 = !DILocation(line: 514, column: 22, scope: !11943)
!11950 = !DILocation(line: 514, column: 31, scope: !11943)
!11951 = !DILocation(line: 514, column: 38, scope: !11943)
!11952 = !DILocalVariable(name: "epsilon", scope: !11943, file: !941, line: 515, type: !962)
!11953 = !DILocation(line: 515, column: 9, scope: !11943)
!11954 = !DILocation(line: 516, column: 7, scope: !11955)
!11955 = distinct !DILexicalBlock(scope: !11943, file: !941, line: 516, column: 7)
!11956 = !DILocation(line: 516, column: 14, scope: !11955)
!11957 = !DILocation(line: 516, column: 7, scope: !11943)
!11958 = !DILocation(line: 517, column: 5, scope: !11955)
!11959 = !DILocation(line: 524, column: 11, scope: !11943)
!11960 = !DILocation(line: 526, column: 7, scope: !11961)
!11961 = distinct !DILexicalBlock(scope: !11943, file: !941, line: 526, column: 7)
!11962 = !DILocation(line: 526, column: 17, scope: !11961)
!11963 = !DILocation(line: 526, column: 25, scope: !11961)
!11964 = !DILocation(line: 526, column: 15, scope: !11961)
!11965 = !DILocation(line: 527, column: 7, scope: !11961)
!11966 = !DILocation(line: 527, column: 10, scope: !11961)
!11967 = !DILocation(line: 527, column: 18, scope: !11961)
!11968 = !DILocation(line: 527, column: 41, scope: !11961)
!11969 = !DILocation(line: 527, column: 39, scope: !11961)
!11970 = !DILocation(line: 527, column: 35, scope: !11961)
!11971 = !DILocation(line: 528, column: 7, scope: !11961)
!11972 = !DILocation(line: 528, column: 14, scope: !11961)
!11973 = !DILocation(line: 528, column: 12, scope: !11961)
!11974 = !DILocation(line: 528, column: 24, scope: !11961)
!11975 = !DILocation(line: 528, column: 32, scope: !11961)
!11976 = !DILocation(line: 528, column: 22, scope: !11961)
!11977 = !DILocation(line: 529, column: 7, scope: !11961)
!11978 = !DILocation(line: 529, column: 15, scope: !11961)
!11979 = !DILocation(line: 529, column: 23, scope: !11961)
!11980 = !DILocation(line: 529, column: 12, scope: !11961)
!11981 = !DILocation(line: 530, column: 7, scope: !11961)
!11982 = !DILocation(line: 530, column: 10, scope: !11961)
!11983 = !DILocation(line: 530, column: 18, scope: !11961)
!11984 = !DILocation(line: 530, column: 37, scope: !11961)
!11985 = !DILocation(line: 530, column: 35, scope: !11961)
!11986 = !DILocation(line: 530, column: 47, scope: !11961)
!11987 = !DILocation(line: 530, column: 55, scope: !11961)
!11988 = !DILocation(line: 530, column: 45, scope: !11961)
!11989 = !DILocation(line: 531, column: 7, scope: !11961)
!11990 = !DILocation(line: 531, column: 10, scope: !11961)
!11991 = !DILocation(line: 531, column: 18, scope: !11961)
!11992 = !DILocation(line: 531, column: 32, scope: !11961)
!11993 = !DILocation(line: 532, column: 7, scope: !11961)
!11994 = !DILocation(line: 532, column: 10, scope: !11961)
!11995 = !DILocation(line: 532, column: 18, scope: !11961)
!11996 = !DILocation(line: 532, column: 37, scope: !11961)
!11997 = !DILocation(line: 532, column: 35, scope: !11961)
!11998 = !DILocation(line: 532, column: 47, scope: !11961)
!11999 = !DILocation(line: 532, column: 55, scope: !11961)
!12000 = !DILocation(line: 532, column: 45, scope: !11961)
!12001 = !DILocation(line: 526, column: 7, scope: !11943)
!12002 = !DILocation(line: 533, column: 5, scope: !11961)
!12003 = !DILocation(line: 535, column: 3, scope: !11943)
!12004 = !DILocation(line: 535, column: 10, scope: !11943)
!12005 = !DILocation(line: 535, column: 17, scope: !11943)
!12006 = !DILocation(line: 536, column: 3, scope: !11943)
!12007 = !DILocation(line: 537, column: 1, scope: !11943)
!12008 = distinct !DISubprogram(name: "compute_bucket_size", scope: !941, file: !941, line: 544, type: !12009, scopeLine: 545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12009 = !DISubroutineType(types: !12010)
!12010 = !{!52, !52, !956}
!12011 = !DILocalVariable(name: "candidate", arg: 1, scope: !12008, file: !941, line: 544, type: !52)
!12012 = !DILocation(line: 544, column: 29, scope: !12008)
!12013 = !DILocalVariable(name: "tuning", arg: 2, scope: !12008, file: !941, line: 544, type: !956)
!12014 = !DILocation(line: 544, column: 59, scope: !12008)
!12015 = !DILocation(line: 546, column: 8, scope: !12016)
!12016 = distinct !DILexicalBlock(scope: !12008, file: !941, line: 546, column: 7)
!12017 = !DILocation(line: 546, column: 16, scope: !12016)
!12018 = !DILocation(line: 546, column: 7, scope: !12008)
!12019 = !DILocalVariable(name: "new_candidate", scope: !12020, file: !941, line: 548, type: !962)
!12020 = distinct !DILexicalBlock(scope: !12016, file: !941, line: 547, column: 5)
!12021 = !DILocation(line: 548, column: 13, scope: !12020)
!12022 = !DILocation(line: 548, column: 29, scope: !12020)
!12023 = !DILocation(line: 548, column: 41, scope: !12020)
!12024 = !DILocation(line: 548, column: 49, scope: !12020)
!12025 = !DILocation(line: 548, column: 39, scope: !12020)
!12026 = !DILocation(line: 549, column: 23, scope: !12027)
!12027 = distinct !DILexicalBlock(scope: !12020, file: !941, line: 549, column: 11)
!12028 = !DILocation(line: 549, column: 20, scope: !12027)
!12029 = !DILocation(line: 549, column: 11, scope: !12020)
!12030 = !DILocation(line: 550, column: 9, scope: !12027)
!12031 = !DILocation(line: 551, column: 19, scope: !12020)
!12032 = !DILocation(line: 551, column: 17, scope: !12020)
!12033 = !DILocation(line: 552, column: 5, scope: !12020)
!12034 = !DILocation(line: 553, column: 27, scope: !12008)
!12035 = !DILocation(line: 553, column: 15, scope: !12008)
!12036 = !DILocation(line: 553, column: 13, scope: !12008)
!12037 = !DILocation(line: 554, column: 7, scope: !12038)
!12038 = distinct !DILexicalBlock(scope: !12008, file: !941, line: 554, column: 7)
!12039 = !DILocation(line: 554, column: 7, scope: !12008)
!12040 = !DILocation(line: 555, column: 5, scope: !12038)
!12041 = !DILocation(line: 556, column: 10, scope: !12008)
!12042 = !DILocation(line: 556, column: 3, scope: !12008)
!12043 = !DILocation(line: 557, column: 1, scope: !12008)
!12044 = distinct !DISubprogram(name: "next_prime", scope: !941, file: !941, line: 463, type: !12045, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12045 = !DISubroutineType(types: !12046)
!12046 = !{!52, !52}
!12047 = !DILocalVariable(name: "candidate", arg: 1, scope: !12044, file: !941, line: 463, type: !52)
!12048 = !DILocation(line: 463, column: 20, scope: !12044)
!12049 = !DILocation(line: 466, column: 7, scope: !12050)
!12050 = distinct !DILexicalBlock(scope: !12044, file: !941, line: 466, column: 7)
!12051 = !DILocation(line: 466, column: 17, scope: !12050)
!12052 = !DILocation(line: 466, column: 7, scope: !12044)
!12053 = !DILocation(line: 467, column: 15, scope: !12050)
!12054 = !DILocation(line: 467, column: 5, scope: !12050)
!12055 = !DILocation(line: 470, column: 13, scope: !12044)
!12056 = !DILocation(line: 472, column: 3, scope: !12044)
!12057 = !DILocation(line: 472, column: 22, scope: !12044)
!12058 = !DILocation(line: 472, column: 19, scope: !12044)
!12059 = !DILocation(line: 472, column: 32, scope: !12044)
!12060 = !DILocation(line: 472, column: 46, scope: !12044)
!12061 = !DILocation(line: 472, column: 36, scope: !12044)
!12062 = !DILocation(line: 472, column: 35, scope: !12044)
!12063 = !DILocation(line: 0, scope: !12044)
!12064 = !DILocation(line: 473, column: 15, scope: !12044)
!12065 = distinct !{!12065, !12056, !12066}
!12066 = !DILocation(line: 473, column: 18, scope: !12044)
!12067 = !DILocation(line: 475, column: 10, scope: !12044)
!12068 = !DILocation(line: 475, column: 3, scope: !12044)
!12069 = distinct !DISubprogram(name: "is_prime", scope: !941, file: !941, line: 444, type: !12070, scopeLine: 445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12070 = !DISubroutineType(types: !12071)
!12071 = !{!162, !52}
!12072 = !DILocalVariable(name: "candidate", arg: 1, scope: !12069, file: !941, line: 444, type: !52)
!12073 = !DILocation(line: 444, column: 18, scope: !12069)
!12074 = !DILocalVariable(name: "divisor", scope: !12069, file: !941, line: 446, type: !52)
!12075 = !DILocation(line: 446, column: 10, scope: !12069)
!12076 = !DILocalVariable(name: "square", scope: !12069, file: !941, line: 447, type: !52)
!12077 = !DILocation(line: 447, column: 10, scope: !12069)
!12078 = !DILocation(line: 447, column: 19, scope: !12069)
!12079 = !DILocation(line: 447, column: 29, scope: !12069)
!12080 = !DILocation(line: 447, column: 27, scope: !12069)
!12081 = !DILocation(line: 449, column: 3, scope: !12069)
!12082 = !DILocation(line: 449, column: 10, scope: !12069)
!12083 = !DILocation(line: 449, column: 19, scope: !12069)
!12084 = !DILocation(line: 449, column: 17, scope: !12069)
!12085 = !DILocation(line: 449, column: 29, scope: !12069)
!12086 = !DILocation(line: 449, column: 33, scope: !12069)
!12087 = !DILocation(line: 449, column: 45, scope: !12069)
!12088 = !DILocation(line: 449, column: 43, scope: !12069)
!12089 = !DILocation(line: 0, scope: !12069)
!12090 = !DILocation(line: 451, column: 14, scope: !12091)
!12091 = distinct !DILexicalBlock(scope: !12069, file: !941, line: 450, column: 5)
!12092 = !DILocation(line: 452, column: 21, scope: !12091)
!12093 = !DILocation(line: 452, column: 19, scope: !12091)
!12094 = !DILocation(line: 452, column: 14, scope: !12091)
!12095 = !DILocation(line: 453, column: 14, scope: !12091)
!12096 = distinct !{!12096, !12081, !12097}
!12097 = !DILocation(line: 454, column: 5, scope: !12069)
!12098 = !DILocation(line: 456, column: 11, scope: !12069)
!12099 = !DILocation(line: 456, column: 23, scope: !12069)
!12100 = !DILocation(line: 456, column: 21, scope: !12069)
!12101 = !DILocation(line: 456, column: 10, scope: !12069)
!12102 = !DILocation(line: 456, column: 3, scope: !12069)
!12103 = distinct !DISubprogram(name: "hash_clear", scope: !941, file: !941, line: 653, type: !12104, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12104 = !DISubroutineType(types: !12105)
!12105 = !{null, !984}
!12106 = !DILocalVariable(name: "table", arg: 1, scope: !12103, file: !941, line: 653, type: !984)
!12107 = !DILocation(line: 653, column: 25, scope: !12103)
!12108 = !DILocalVariable(name: "bucket", scope: !12103, file: !941, line: 655, type: !944)
!12109 = !DILocation(line: 655, column: 22, scope: !12103)
!12110 = !DILocation(line: 657, column: 17, scope: !12111)
!12111 = distinct !DILexicalBlock(scope: !12103, file: !941, line: 657, column: 3)
!12112 = !DILocation(line: 657, column: 24, scope: !12111)
!12113 = !DILocation(line: 657, column: 15, scope: !12111)
!12114 = !DILocation(line: 657, column: 8, scope: !12111)
!12115 = !DILocation(line: 657, column: 32, scope: !12116)
!12116 = distinct !DILexicalBlock(scope: !12111, file: !941, line: 657, column: 3)
!12117 = !DILocation(line: 657, column: 41, scope: !12116)
!12118 = !DILocation(line: 657, column: 48, scope: !12116)
!12119 = !DILocation(line: 657, column: 39, scope: !12116)
!12120 = !DILocation(line: 657, column: 3, scope: !12111)
!12121 = !DILocation(line: 659, column: 11, scope: !12122)
!12122 = distinct !DILexicalBlock(scope: !12123, file: !941, line: 659, column: 11)
!12123 = distinct !DILexicalBlock(scope: !12116, file: !941, line: 658, column: 5)
!12124 = !DILocation(line: 659, column: 19, scope: !12122)
!12125 = !DILocation(line: 659, column: 11, scope: !12123)
!12126 = !DILocalVariable(name: "cursor", scope: !12127, file: !941, line: 661, type: !944)
!12127 = distinct !DILexicalBlock(scope: !12122, file: !941, line: 660, column: 9)
!12128 = !DILocation(line: 661, column: 30, scope: !12127)
!12129 = !DILocalVariable(name: "next", scope: !12127, file: !941, line: 662, type: !944)
!12130 = !DILocation(line: 662, column: 30, scope: !12127)
!12131 = !DILocation(line: 665, column: 25, scope: !12132)
!12132 = distinct !DILexicalBlock(scope: !12127, file: !941, line: 665, column: 11)
!12133 = !DILocation(line: 665, column: 33, scope: !12132)
!12134 = !DILocation(line: 665, column: 23, scope: !12132)
!12135 = !DILocation(line: 665, column: 16, scope: !12132)
!12136 = !DILocation(line: 665, column: 39, scope: !12137)
!12137 = distinct !DILexicalBlock(scope: !12132, file: !941, line: 665, column: 11)
!12138 = !DILocation(line: 665, column: 11, scope: !12132)
!12139 = !DILocation(line: 667, column: 19, scope: !12140)
!12140 = distinct !DILexicalBlock(scope: !12141, file: !941, line: 667, column: 19)
!12141 = distinct !DILexicalBlock(scope: !12137, file: !941, line: 666, column: 13)
!12142 = !DILocation(line: 667, column: 26, scope: !12140)
!12143 = !DILocation(line: 667, column: 19, scope: !12141)
!12144 = !DILocation(line: 668, column: 17, scope: !12140)
!12145 = !DILocation(line: 668, column: 24, scope: !12140)
!12146 = !DILocation(line: 668, column: 36, scope: !12140)
!12147 = !DILocation(line: 668, column: 44, scope: !12140)
!12148 = !DILocation(line: 669, column: 15, scope: !12141)
!12149 = !DILocation(line: 669, column: 23, scope: !12141)
!12150 = !DILocation(line: 669, column: 28, scope: !12141)
!12151 = !DILocation(line: 671, column: 22, scope: !12141)
!12152 = !DILocation(line: 671, column: 30, scope: !12141)
!12153 = !DILocation(line: 671, column: 20, scope: !12141)
!12154 = !DILocation(line: 674, column: 30, scope: !12141)
!12155 = !DILocation(line: 674, column: 37, scope: !12141)
!12156 = !DILocation(line: 674, column: 15, scope: !12141)
!12157 = !DILocation(line: 674, column: 23, scope: !12141)
!12158 = !DILocation(line: 674, column: 28, scope: !12141)
!12159 = !DILocation(line: 675, column: 40, scope: !12141)
!12160 = !DILocation(line: 675, column: 15, scope: !12141)
!12161 = !DILocation(line: 675, column: 22, scope: !12141)
!12162 = !DILocation(line: 675, column: 38, scope: !12141)
!12163 = !DILocation(line: 676, column: 13, scope: !12141)
!12164 = !DILocation(line: 665, column: 56, scope: !12137)
!12165 = !DILocation(line: 665, column: 54, scope: !12137)
!12166 = !DILocation(line: 665, column: 11, scope: !12137)
!12167 = distinct !{!12167, !12138, !12168}
!12168 = !DILocation(line: 676, column: 13, scope: !12132)
!12169 = !DILocation(line: 679, column: 15, scope: !12170)
!12170 = distinct !DILexicalBlock(scope: !12127, file: !941, line: 679, column: 15)
!12171 = !DILocation(line: 679, column: 22, scope: !12170)
!12172 = !DILocation(line: 679, column: 15, scope: !12127)
!12173 = !DILocation(line: 680, column: 13, scope: !12170)
!12174 = !DILocation(line: 680, column: 20, scope: !12170)
!12175 = !DILocation(line: 680, column: 32, scope: !12170)
!12176 = !DILocation(line: 680, column: 40, scope: !12170)
!12177 = !DILocation(line: 681, column: 11, scope: !12127)
!12178 = !DILocation(line: 681, column: 19, scope: !12127)
!12179 = !DILocation(line: 681, column: 24, scope: !12127)
!12180 = !DILocation(line: 682, column: 11, scope: !12127)
!12181 = !DILocation(line: 682, column: 19, scope: !12127)
!12182 = !DILocation(line: 682, column: 24, scope: !12127)
!12183 = !DILocation(line: 683, column: 9, scope: !12127)
!12184 = !DILocation(line: 684, column: 5, scope: !12123)
!12185 = !DILocation(line: 657, column: 68, scope: !12116)
!12186 = !DILocation(line: 657, column: 3, scope: !12116)
!12187 = distinct !{!12187, !12120, !12188}
!12188 = !DILocation(line: 684, column: 5, scope: !12111)
!12189 = !DILocation(line: 686, column: 3, scope: !12103)
!12190 = !DILocation(line: 686, column: 10, scope: !12103)
!12191 = !DILocation(line: 686, column: 25, scope: !12103)
!12192 = !DILocation(line: 687, column: 3, scope: !12103)
!12193 = !DILocation(line: 687, column: 10, scope: !12103)
!12194 = !DILocation(line: 687, column: 20, scope: !12103)
!12195 = !DILocation(line: 688, column: 1, scope: !12103)
!12196 = distinct !DISubprogram(name: "hash_free", scope: !941, file: !941, line: 696, type: !12104, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12197 = !DILocalVariable(name: "table", arg: 1, scope: !12196, file: !941, line: 696, type: !984)
!12198 = !DILocation(line: 696, column: 24, scope: !12196)
!12199 = !DILocalVariable(name: "bucket", scope: !12196, file: !941, line: 698, type: !944)
!12200 = !DILocation(line: 698, column: 22, scope: !12196)
!12201 = !DILocalVariable(name: "cursor", scope: !12196, file: !941, line: 699, type: !944)
!12202 = !DILocation(line: 699, column: 22, scope: !12196)
!12203 = !DILocalVariable(name: "next", scope: !12196, file: !941, line: 700, type: !944)
!12204 = !DILocation(line: 700, column: 22, scope: !12196)
!12205 = !DILocation(line: 703, column: 7, scope: !12206)
!12206 = distinct !DILexicalBlock(scope: !12196, file: !941, line: 703, column: 7)
!12207 = !DILocation(line: 703, column: 14, scope: !12206)
!12208 = !DILocation(line: 703, column: 25, scope: !12206)
!12209 = !DILocation(line: 703, column: 28, scope: !12206)
!12210 = !DILocation(line: 703, column: 35, scope: !12206)
!12211 = !DILocation(line: 703, column: 7, scope: !12196)
!12212 = !DILocation(line: 705, column: 21, scope: !12213)
!12213 = distinct !DILexicalBlock(scope: !12214, file: !941, line: 705, column: 7)
!12214 = distinct !DILexicalBlock(scope: !12206, file: !941, line: 704, column: 5)
!12215 = !DILocation(line: 705, column: 28, scope: !12213)
!12216 = !DILocation(line: 705, column: 19, scope: !12213)
!12217 = !DILocation(line: 705, column: 12, scope: !12213)
!12218 = !DILocation(line: 705, column: 36, scope: !12219)
!12219 = distinct !DILexicalBlock(scope: !12213, file: !941, line: 705, column: 7)
!12220 = !DILocation(line: 705, column: 45, scope: !12219)
!12221 = !DILocation(line: 705, column: 52, scope: !12219)
!12222 = !DILocation(line: 705, column: 43, scope: !12219)
!12223 = !DILocation(line: 705, column: 7, scope: !12213)
!12224 = !DILocation(line: 707, column: 15, scope: !12225)
!12225 = distinct !DILexicalBlock(scope: !12226, file: !941, line: 707, column: 15)
!12226 = distinct !DILexicalBlock(scope: !12219, file: !941, line: 706, column: 9)
!12227 = !DILocation(line: 707, column: 23, scope: !12225)
!12228 = !DILocation(line: 707, column: 15, scope: !12226)
!12229 = !DILocation(line: 709, column: 29, scope: !12230)
!12230 = distinct !DILexicalBlock(scope: !12231, file: !941, line: 709, column: 15)
!12231 = distinct !DILexicalBlock(scope: !12225, file: !941, line: 708, column: 13)
!12232 = !DILocation(line: 709, column: 27, scope: !12230)
!12233 = !DILocation(line: 709, column: 20, scope: !12230)
!12234 = !DILocation(line: 709, column: 37, scope: !12235)
!12235 = distinct !DILexicalBlock(scope: !12230, file: !941, line: 709, column: 15)
!12236 = !DILocation(line: 709, column: 15, scope: !12230)
!12237 = !DILocation(line: 710, column: 17, scope: !12235)
!12238 = !DILocation(line: 710, column: 24, scope: !12235)
!12239 = !DILocation(line: 710, column: 36, scope: !12235)
!12240 = !DILocation(line: 710, column: 44, scope: !12235)
!12241 = !DILocation(line: 709, column: 54, scope: !12235)
!12242 = !DILocation(line: 709, column: 62, scope: !12235)
!12243 = !DILocation(line: 709, column: 52, scope: !12235)
!12244 = !DILocation(line: 709, column: 15, scope: !12235)
!12245 = distinct !{!12245, !12236, !12246}
!12246 = !DILocation(line: 710, column: 48, scope: !12230)
!12247 = !DILocation(line: 711, column: 13, scope: !12231)
!12248 = !DILocation(line: 712, column: 9, scope: !12226)
!12249 = !DILocation(line: 705, column: 72, scope: !12219)
!12250 = !DILocation(line: 705, column: 7, scope: !12219)
!12251 = distinct !{!12251, !12223, !12252}
!12252 = !DILocation(line: 712, column: 9, scope: !12213)
!12253 = !DILocation(line: 713, column: 5, scope: !12214)
!12254 = !DILocation(line: 722, column: 17, scope: !12255)
!12255 = distinct !DILexicalBlock(scope: !12196, file: !941, line: 722, column: 3)
!12256 = !DILocation(line: 722, column: 24, scope: !12255)
!12257 = !DILocation(line: 722, column: 15, scope: !12255)
!12258 = !DILocation(line: 722, column: 8, scope: !12255)
!12259 = !DILocation(line: 722, column: 32, scope: !12260)
!12260 = distinct !DILexicalBlock(scope: !12255, file: !941, line: 722, column: 3)
!12261 = !DILocation(line: 722, column: 41, scope: !12260)
!12262 = !DILocation(line: 722, column: 48, scope: !12260)
!12263 = !DILocation(line: 722, column: 39, scope: !12260)
!12264 = !DILocation(line: 722, column: 3, scope: !12255)
!12265 = !DILocation(line: 724, column: 21, scope: !12266)
!12266 = distinct !DILexicalBlock(scope: !12267, file: !941, line: 724, column: 7)
!12267 = distinct !DILexicalBlock(scope: !12260, file: !941, line: 723, column: 5)
!12268 = !DILocation(line: 724, column: 29, scope: !12266)
!12269 = !DILocation(line: 724, column: 19, scope: !12266)
!12270 = !DILocation(line: 724, column: 12, scope: !12266)
!12271 = !DILocation(line: 724, column: 35, scope: !12272)
!12272 = distinct !DILexicalBlock(scope: !12266, file: !941, line: 724, column: 7)
!12273 = !DILocation(line: 724, column: 7, scope: !12266)
!12274 = !DILocation(line: 726, column: 18, scope: !12275)
!12275 = distinct !DILexicalBlock(scope: !12272, file: !941, line: 725, column: 9)
!12276 = !DILocation(line: 726, column: 26, scope: !12275)
!12277 = !DILocation(line: 726, column: 16, scope: !12275)
!12278 = !DILocation(line: 727, column: 17, scope: !12275)
!12279 = !DILocation(line: 727, column: 11, scope: !12275)
!12280 = !DILocation(line: 728, column: 9, scope: !12275)
!12281 = !DILocation(line: 724, column: 52, scope: !12272)
!12282 = !DILocation(line: 724, column: 50, scope: !12272)
!12283 = !DILocation(line: 724, column: 7, scope: !12272)
!12284 = distinct !{!12284, !12273, !12285}
!12285 = !DILocation(line: 728, column: 9, scope: !12266)
!12286 = !DILocation(line: 729, column: 5, scope: !12267)
!12287 = !DILocation(line: 722, column: 68, scope: !12260)
!12288 = !DILocation(line: 722, column: 3, scope: !12260)
!12289 = distinct !{!12289, !12264, !12290}
!12290 = !DILocation(line: 729, column: 5, scope: !12255)
!12291 = !DILocation(line: 732, column: 17, scope: !12292)
!12292 = distinct !DILexicalBlock(scope: !12196, file: !941, line: 732, column: 3)
!12293 = !DILocation(line: 732, column: 24, scope: !12292)
!12294 = !DILocation(line: 732, column: 15, scope: !12292)
!12295 = !DILocation(line: 732, column: 8, scope: !12292)
!12296 = !DILocation(line: 732, column: 41, scope: !12297)
!12297 = distinct !DILexicalBlock(scope: !12292, file: !941, line: 732, column: 3)
!12298 = !DILocation(line: 732, column: 3, scope: !12292)
!12299 = !DILocation(line: 734, column: 14, scope: !12300)
!12300 = distinct !DILexicalBlock(scope: !12297, file: !941, line: 733, column: 5)
!12301 = !DILocation(line: 734, column: 22, scope: !12300)
!12302 = !DILocation(line: 734, column: 12, scope: !12300)
!12303 = !DILocation(line: 735, column: 13, scope: !12300)
!12304 = !DILocation(line: 735, column: 7, scope: !12300)
!12305 = !DILocation(line: 736, column: 5, scope: !12300)
!12306 = !DILocation(line: 732, column: 58, scope: !12297)
!12307 = !DILocation(line: 732, column: 56, scope: !12297)
!12308 = !DILocation(line: 732, column: 3, scope: !12297)
!12309 = distinct !{!12309, !12298, !12310}
!12310 = !DILocation(line: 736, column: 5, scope: !12292)
!12311 = !DILocation(line: 741, column: 9, scope: !12196)
!12312 = !DILocation(line: 741, column: 16, scope: !12196)
!12313 = !DILocation(line: 741, column: 3, scope: !12196)
!12314 = !DILocation(line: 742, column: 9, scope: !12196)
!12315 = !DILocation(line: 742, column: 3, scope: !12196)
!12316 = !DILocation(line: 743, column: 1, scope: !12196)
!12317 = distinct !DISubprogram(name: "hash_rehash", scope: !941, file: !941, line: 943, type: !12318, scopeLine: 944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12318 = !DISubroutineType(types: !12319)
!12319 = !{!162, !984, !52}
!12320 = !DILocalVariable(name: "table", arg: 1, scope: !12317, file: !941, line: 943, type: !984)
!12321 = !DILocation(line: 943, column: 26, scope: !12317)
!12322 = !DILocalVariable(name: "candidate", arg: 2, scope: !12317, file: !941, line: 943, type: !52)
!12323 = !DILocation(line: 943, column: 40, scope: !12317)
!12324 = !DILocalVariable(name: "storage", scope: !12317, file: !941, line: 945, type: !939)
!12325 = !DILocation(line: 945, column: 14, scope: !12317)
!12326 = !DILocalVariable(name: "new_table", scope: !12317, file: !941, line: 946, type: !984)
!12327 = !DILocation(line: 946, column: 15, scope: !12317)
!12328 = !DILocalVariable(name: "new_size", scope: !12317, file: !941, line: 947, type: !52)
!12329 = !DILocation(line: 947, column: 10, scope: !12317)
!12330 = !DILocation(line: 947, column: 42, scope: !12317)
!12331 = !DILocation(line: 947, column: 53, scope: !12317)
!12332 = !DILocation(line: 947, column: 60, scope: !12317)
!12333 = !DILocation(line: 947, column: 21, scope: !12317)
!12334 = !DILocation(line: 949, column: 8, scope: !12335)
!12335 = distinct !DILexicalBlock(scope: !12317, file: !941, line: 949, column: 7)
!12336 = !DILocation(line: 949, column: 7, scope: !12317)
!12337 = !DILocation(line: 950, column: 5, scope: !12335)
!12338 = !DILocation(line: 951, column: 7, scope: !12339)
!12339 = distinct !DILexicalBlock(scope: !12317, file: !941, line: 951, column: 7)
!12340 = !DILocation(line: 951, column: 19, scope: !12339)
!12341 = !DILocation(line: 951, column: 26, scope: !12339)
!12342 = !DILocation(line: 951, column: 16, scope: !12339)
!12343 = !DILocation(line: 951, column: 7, scope: !12317)
!12344 = !DILocation(line: 952, column: 5, scope: !12339)
!12345 = !DILocation(line: 953, column: 13, scope: !12317)
!12346 = !DILocation(line: 954, column: 31, scope: !12317)
!12347 = !DILocation(line: 954, column: 23, scope: !12317)
!12348 = !DILocation(line: 954, column: 3, scope: !12317)
!12349 = !DILocation(line: 954, column: 14, scope: !12317)
!12350 = !DILocation(line: 954, column: 21, scope: !12317)
!12351 = !DILocation(line: 955, column: 7, scope: !12352)
!12352 = distinct !DILexicalBlock(scope: !12317, file: !941, line: 955, column: 7)
!12353 = !DILocation(line: 955, column: 18, scope: !12352)
!12354 = !DILocation(line: 955, column: 25, scope: !12352)
!12355 = !DILocation(line: 955, column: 7, scope: !12317)
!12356 = !DILocation(line: 956, column: 5, scope: !12352)
!12357 = !DILocation(line: 957, column: 26, scope: !12317)
!12358 = !DILocation(line: 957, column: 3, scope: !12317)
!12359 = !DILocation(line: 957, column: 14, scope: !12317)
!12360 = !DILocation(line: 957, column: 24, scope: !12317)
!12361 = !DILocation(line: 958, column: 29, scope: !12317)
!12362 = !DILocation(line: 958, column: 40, scope: !12317)
!12363 = !DILocation(line: 958, column: 49, scope: !12317)
!12364 = !DILocation(line: 958, column: 47, scope: !12317)
!12365 = !DILocation(line: 958, column: 3, scope: !12317)
!12366 = !DILocation(line: 958, column: 14, scope: !12317)
!12367 = !DILocation(line: 958, column: 27, scope: !12317)
!12368 = !DILocation(line: 959, column: 3, scope: !12317)
!12369 = !DILocation(line: 959, column: 14, scope: !12317)
!12370 = !DILocation(line: 959, column: 29, scope: !12317)
!12371 = !DILocation(line: 960, column: 3, scope: !12317)
!12372 = !DILocation(line: 960, column: 14, scope: !12317)
!12373 = !DILocation(line: 960, column: 24, scope: !12317)
!12374 = !DILocation(line: 961, column: 23, scope: !12317)
!12375 = !DILocation(line: 961, column: 30, scope: !12317)
!12376 = !DILocation(line: 961, column: 3, scope: !12317)
!12377 = !DILocation(line: 961, column: 14, scope: !12317)
!12378 = !DILocation(line: 961, column: 21, scope: !12317)
!12379 = !DILocation(line: 962, column: 23, scope: !12317)
!12380 = !DILocation(line: 962, column: 30, scope: !12317)
!12381 = !DILocation(line: 962, column: 3, scope: !12317)
!12382 = !DILocation(line: 962, column: 14, scope: !12317)
!12383 = !DILocation(line: 962, column: 21, scope: !12317)
!12384 = !DILocation(line: 963, column: 27, scope: !12317)
!12385 = !DILocation(line: 963, column: 34, scope: !12317)
!12386 = !DILocation(line: 963, column: 3, scope: !12317)
!12387 = !DILocation(line: 963, column: 14, scope: !12317)
!12388 = !DILocation(line: 963, column: 25, scope: !12317)
!12389 = !DILocation(line: 964, column: 27, scope: !12317)
!12390 = !DILocation(line: 964, column: 34, scope: !12317)
!12391 = !DILocation(line: 964, column: 3, scope: !12317)
!12392 = !DILocation(line: 964, column: 14, scope: !12317)
!12393 = !DILocation(line: 964, column: 25, scope: !12317)
!12394 = !DILocation(line: 984, column: 32, scope: !12317)
!12395 = !DILocation(line: 984, column: 39, scope: !12317)
!12396 = !DILocation(line: 984, column: 3, scope: !12317)
!12397 = !DILocation(line: 984, column: 14, scope: !12317)
!12398 = !DILocation(line: 984, column: 30, scope: !12317)
!12399 = !DILocation(line: 986, column: 25, scope: !12400)
!12400 = distinct !DILexicalBlock(scope: !12317, file: !941, line: 986, column: 7)
!12401 = !DILocation(line: 986, column: 36, scope: !12400)
!12402 = !DILocation(line: 986, column: 7, scope: !12400)
!12403 = !DILocation(line: 986, column: 7, scope: !12317)
!12404 = !DILocation(line: 989, column: 13, scope: !12405)
!12405 = distinct !DILexicalBlock(scope: !12400, file: !941, line: 987, column: 5)
!12406 = !DILocation(line: 989, column: 20, scope: !12405)
!12407 = !DILocation(line: 989, column: 7, scope: !12405)
!12408 = !DILocation(line: 990, column: 23, scope: !12405)
!12409 = !DILocation(line: 990, column: 34, scope: !12405)
!12410 = !DILocation(line: 990, column: 7, scope: !12405)
!12411 = !DILocation(line: 990, column: 14, scope: !12405)
!12412 = !DILocation(line: 990, column: 21, scope: !12405)
!12413 = !DILocation(line: 991, column: 29, scope: !12405)
!12414 = !DILocation(line: 991, column: 40, scope: !12405)
!12415 = !DILocation(line: 991, column: 7, scope: !12405)
!12416 = !DILocation(line: 991, column: 14, scope: !12405)
!12417 = !DILocation(line: 991, column: 27, scope: !12405)
!12418 = !DILocation(line: 992, column: 26, scope: !12405)
!12419 = !DILocation(line: 992, column: 37, scope: !12405)
!12420 = !DILocation(line: 992, column: 7, scope: !12405)
!12421 = !DILocation(line: 992, column: 14, scope: !12405)
!12422 = !DILocation(line: 992, column: 24, scope: !12405)
!12423 = !DILocation(line: 993, column: 31, scope: !12405)
!12424 = !DILocation(line: 993, column: 42, scope: !12405)
!12425 = !DILocation(line: 993, column: 7, scope: !12405)
!12426 = !DILocation(line: 993, column: 14, scope: !12405)
!12427 = !DILocation(line: 993, column: 29, scope: !12405)
!12428 = !DILocation(line: 994, column: 32, scope: !12405)
!12429 = !DILocation(line: 994, column: 43, scope: !12405)
!12430 = !DILocation(line: 994, column: 7, scope: !12405)
!12431 = !DILocation(line: 994, column: 14, scope: !12405)
!12432 = !DILocation(line: 994, column: 30, scope: !12405)
!12433 = !DILocation(line: 996, column: 7, scope: !12405)
!12434 = !DILocation(line: 1012, column: 28, scope: !12317)
!12435 = !DILocation(line: 1012, column: 39, scope: !12317)
!12436 = !DILocation(line: 1012, column: 3, scope: !12317)
!12437 = !DILocation(line: 1012, column: 10, scope: !12317)
!12438 = !DILocation(line: 1012, column: 26, scope: !12317)
!12439 = !DILocation(line: 1013, column: 28, scope: !12440)
!12440 = distinct !DILexicalBlock(scope: !12317, file: !941, line: 1013, column: 7)
!12441 = !DILocation(line: 1013, column: 35, scope: !12440)
!12442 = !DILocation(line: 1013, column: 10, scope: !12440)
!12443 = !DILocation(line: 1014, column: 10, scope: !12440)
!12444 = !DILocation(line: 1014, column: 31, scope: !12440)
!12445 = !DILocation(line: 1014, column: 38, scope: !12440)
!12446 = !DILocation(line: 1014, column: 13, scope: !12440)
!12447 = !DILocation(line: 1013, column: 7, scope: !12317)
!12448 = !DILocation(line: 1015, column: 5, scope: !12440)
!12449 = !DILocation(line: 1017, column: 9, scope: !12317)
!12450 = !DILocation(line: 1017, column: 20, scope: !12317)
!12451 = !DILocation(line: 1017, column: 3, scope: !12317)
!12452 = !DILocation(line: 1018, column: 3, scope: !12317)
!12453 = !DILocation(line: 1019, column: 1, scope: !12317)
!12454 = distinct !DISubprogram(name: "transfer_entries", scope: !941, file: !941, line: 860, type: !12455, scopeLine: 861, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12455 = !DISubroutineType(types: !12456)
!12456 = !{!162, !984, !984, !162}
!12457 = !DILocalVariable(name: "dst", arg: 1, scope: !12454, file: !941, line: 860, type: !984)
!12458 = !DILocation(line: 860, column: 31, scope: !12454)
!12459 = !DILocalVariable(name: "src", arg: 2, scope: !12454, file: !941, line: 860, type: !984)
!12460 = !DILocation(line: 860, column: 48, scope: !12454)
!12461 = !DILocalVariable(name: "safe", arg: 3, scope: !12454, file: !941, line: 860, type: !162)
!12462 = !DILocation(line: 860, column: 58, scope: !12454)
!12463 = !DILocalVariable(name: "bucket", scope: !12454, file: !941, line: 862, type: !944)
!12464 = !DILocation(line: 862, column: 22, scope: !12454)
!12465 = !DILocalVariable(name: "cursor", scope: !12454, file: !941, line: 863, type: !944)
!12466 = !DILocation(line: 863, column: 22, scope: !12454)
!12467 = !DILocalVariable(name: "next", scope: !12454, file: !941, line: 864, type: !944)
!12468 = !DILocation(line: 864, column: 22, scope: !12454)
!12469 = !DILocation(line: 865, column: 17, scope: !12470)
!12470 = distinct !DILexicalBlock(scope: !12454, file: !941, line: 865, column: 3)
!12471 = !DILocation(line: 865, column: 22, scope: !12470)
!12472 = !DILocation(line: 865, column: 15, scope: !12470)
!12473 = !DILocation(line: 865, column: 8, scope: !12470)
!12474 = !DILocation(line: 865, column: 30, scope: !12475)
!12475 = distinct !DILexicalBlock(scope: !12470, file: !941, line: 865, column: 3)
!12476 = !DILocation(line: 865, column: 39, scope: !12475)
!12477 = !DILocation(line: 865, column: 44, scope: !12475)
!12478 = !DILocation(line: 865, column: 37, scope: !12475)
!12479 = !DILocation(line: 865, column: 3, scope: !12470)
!12480 = !DILocation(line: 866, column: 9, scope: !12481)
!12481 = distinct !DILexicalBlock(scope: !12475, file: !941, line: 866, column: 9)
!12482 = !DILocation(line: 866, column: 17, scope: !12481)
!12483 = !DILocation(line: 866, column: 9, scope: !12475)
!12484 = !DILocalVariable(name: "data", scope: !12485, file: !941, line: 868, type: !47)
!12485 = distinct !DILexicalBlock(scope: !12481, file: !941, line: 867, column: 7)
!12486 = !DILocation(line: 868, column: 15, scope: !12485)
!12487 = !DILocalVariable(name: "new_bucket", scope: !12485, file: !941, line: 869, type: !944)
!12488 = !DILocation(line: 869, column: 28, scope: !12485)
!12489 = !DILocation(line: 877, column: 23, scope: !12490)
!12490 = distinct !DILexicalBlock(scope: !12485, file: !941, line: 877, column: 9)
!12491 = !DILocation(line: 877, column: 31, scope: !12490)
!12492 = !DILocation(line: 877, column: 21, scope: !12490)
!12493 = !DILocation(line: 877, column: 14, scope: !12490)
!12494 = !DILocation(line: 877, column: 37, scope: !12495)
!12495 = distinct !DILexicalBlock(scope: !12490, file: !941, line: 877, column: 9)
!12496 = !DILocation(line: 877, column: 9, scope: !12490)
!12497 = !DILocation(line: 879, column: 20, scope: !12498)
!12498 = distinct !DILexicalBlock(scope: !12495, file: !941, line: 878, column: 11)
!12499 = !DILocation(line: 879, column: 28, scope: !12498)
!12500 = !DILocation(line: 879, column: 18, scope: !12498)
!12501 = !DILocation(line: 880, column: 39, scope: !12498)
!12502 = !DILocation(line: 880, column: 44, scope: !12498)
!12503 = !DILocation(line: 880, column: 26, scope: !12498)
!12504 = !DILocation(line: 880, column: 24, scope: !12498)
!12505 = !DILocation(line: 882, column: 20, scope: !12498)
!12506 = !DILocation(line: 882, column: 28, scope: !12498)
!12507 = !DILocation(line: 882, column: 18, scope: !12498)
!12508 = !DILocation(line: 884, column: 17, scope: !12509)
!12509 = distinct !DILexicalBlock(scope: !12498, file: !941, line: 884, column: 17)
!12510 = !DILocation(line: 884, column: 29, scope: !12509)
!12511 = !DILocation(line: 884, column: 17, scope: !12498)
!12512 = !DILocation(line: 888, column: 32, scope: !12513)
!12513 = distinct !DILexicalBlock(scope: !12509, file: !941, line: 885, column: 15)
!12514 = !DILocation(line: 888, column: 44, scope: !12513)
!12515 = !DILocation(line: 888, column: 17, scope: !12513)
!12516 = !DILocation(line: 888, column: 25, scope: !12513)
!12517 = !DILocation(line: 888, column: 30, scope: !12513)
!12518 = !DILocation(line: 889, column: 36, scope: !12513)
!12519 = !DILocation(line: 889, column: 17, scope: !12513)
!12520 = !DILocation(line: 889, column: 29, scope: !12513)
!12521 = !DILocation(line: 889, column: 34, scope: !12513)
!12522 = !DILocation(line: 890, column: 15, scope: !12513)
!12523 = !DILocation(line: 895, column: 36, scope: !12524)
!12524 = distinct !DILexicalBlock(scope: !12509, file: !941, line: 892, column: 15)
!12525 = !DILocation(line: 895, column: 17, scope: !12524)
!12526 = !DILocation(line: 895, column: 29, scope: !12524)
!12527 = !DILocation(line: 895, column: 34, scope: !12524)
!12528 = !DILocation(line: 896, column: 17, scope: !12524)
!12529 = !DILocation(line: 896, column: 22, scope: !12524)
!12530 = !DILocation(line: 896, column: 36, scope: !12524)
!12531 = !DILocation(line: 897, column: 29, scope: !12524)
!12532 = !DILocation(line: 897, column: 34, scope: !12524)
!12533 = !DILocation(line: 897, column: 17, scope: !12524)
!12534 = !DILocation(line: 899, column: 11, scope: !12498)
!12535 = !DILocation(line: 877, column: 54, scope: !12495)
!12536 = !DILocation(line: 877, column: 52, scope: !12495)
!12537 = !DILocation(line: 877, column: 9, scope: !12495)
!12538 = distinct !{!12538, !12496, !12539}
!12539 = !DILocation(line: 899, column: 11, scope: !12490)
!12540 = !DILocation(line: 903, column: 16, scope: !12485)
!12541 = !DILocation(line: 903, column: 24, scope: !12485)
!12542 = !DILocation(line: 903, column: 14, scope: !12485)
!12543 = !DILocation(line: 904, column: 9, scope: !12485)
!12544 = !DILocation(line: 904, column: 17, scope: !12485)
!12545 = !DILocation(line: 904, column: 22, scope: !12485)
!12546 = !DILocation(line: 905, column: 13, scope: !12547)
!12547 = distinct !DILexicalBlock(scope: !12485, file: !941, line: 905, column: 13)
!12548 = !DILocation(line: 905, column: 13, scope: !12485)
!12549 = !DILocation(line: 906, column: 11, scope: !12547)
!12550 = !DILocation(line: 907, column: 35, scope: !12485)
!12551 = !DILocation(line: 907, column: 40, scope: !12485)
!12552 = !DILocation(line: 907, column: 22, scope: !12485)
!12553 = !DILocation(line: 907, column: 20, scope: !12485)
!12554 = !DILocation(line: 909, column: 13, scope: !12555)
!12555 = distinct !DILexicalBlock(scope: !12485, file: !941, line: 909, column: 13)
!12556 = !DILocation(line: 909, column: 25, scope: !12555)
!12557 = !DILocation(line: 909, column: 13, scope: !12485)
!12558 = !DILocalVariable(name: "new_entry", scope: !12559, file: !941, line: 913, type: !944)
!12559 = distinct !DILexicalBlock(scope: !12555, file: !941, line: 910, column: 11)
!12560 = !DILocation(line: 913, column: 32, scope: !12559)
!12561 = !DILocation(line: 913, column: 60, scope: !12559)
!12562 = !DILocation(line: 913, column: 44, scope: !12559)
!12563 = !DILocation(line: 915, column: 17, scope: !12564)
!12564 = distinct !DILexicalBlock(scope: !12559, file: !941, line: 915, column: 17)
!12565 = !DILocation(line: 915, column: 27, scope: !12564)
!12566 = !DILocation(line: 915, column: 17, scope: !12559)
!12567 = !DILocation(line: 916, column: 15, scope: !12564)
!12568 = !DILocation(line: 918, column: 31, scope: !12559)
!12569 = !DILocation(line: 918, column: 13, scope: !12559)
!12570 = !DILocation(line: 918, column: 24, scope: !12559)
!12571 = !DILocation(line: 918, column: 29, scope: !12559)
!12572 = !DILocation(line: 919, column: 31, scope: !12559)
!12573 = !DILocation(line: 919, column: 43, scope: !12559)
!12574 = !DILocation(line: 919, column: 13, scope: !12559)
!12575 = !DILocation(line: 919, column: 24, scope: !12559)
!12576 = !DILocation(line: 919, column: 29, scope: !12559)
!12577 = !DILocation(line: 920, column: 32, scope: !12559)
!12578 = !DILocation(line: 920, column: 13, scope: !12559)
!12579 = !DILocation(line: 920, column: 25, scope: !12559)
!12580 = !DILocation(line: 920, column: 30, scope: !12559)
!12581 = !DILocation(line: 921, column: 11, scope: !12559)
!12582 = !DILocation(line: 925, column: 32, scope: !12583)
!12583 = distinct !DILexicalBlock(scope: !12555, file: !941, line: 923, column: 11)
!12584 = !DILocation(line: 925, column: 13, scope: !12583)
!12585 = !DILocation(line: 925, column: 25, scope: !12583)
!12586 = !DILocation(line: 925, column: 30, scope: !12583)
!12587 = !DILocation(line: 926, column: 13, scope: !12583)
!12588 = !DILocation(line: 926, column: 18, scope: !12583)
!12589 = !DILocation(line: 926, column: 32, scope: !12583)
!12590 = !DILocation(line: 928, column: 9, scope: !12485)
!12591 = !DILocation(line: 928, column: 17, scope: !12485)
!12592 = !DILocation(line: 928, column: 22, scope: !12485)
!12593 = !DILocation(line: 929, column: 9, scope: !12485)
!12594 = !DILocation(line: 929, column: 14, scope: !12485)
!12595 = !DILocation(line: 929, column: 28, scope: !12485)
!12596 = !DILocation(line: 930, column: 7, scope: !12485)
!12597 = !DILocation(line: 865, column: 64, scope: !12475)
!12598 = !DILocation(line: 865, column: 3, scope: !12475)
!12599 = distinct !{!12599, !12479, !12600}
!12600 = !DILocation(line: 930, column: 7, scope: !12470)
!12601 = !DILocation(line: 931, column: 3, scope: !12454)
!12602 = !DILocation(line: 932, column: 1, scope: !12454)
!12603 = distinct !DISubprogram(name: "free_entry", scope: !941, file: !941, line: 776, type: !12604, scopeLine: 777, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12604 = !DISubroutineType(types: !12605)
!12605 = !{null, !984, !944}
!12606 = !DILocalVariable(name: "table", arg: 1, scope: !12603, file: !941, line: 776, type: !984)
!12607 = !DILocation(line: 776, column: 25, scope: !12603)
!12608 = !DILocalVariable(name: "entry", arg: 2, scope: !12603, file: !941, line: 776, type: !944)
!12609 = !DILocation(line: 776, column: 51, scope: !12603)
!12610 = !DILocation(line: 778, column: 3, scope: !12603)
!12611 = !DILocation(line: 778, column: 10, scope: !12603)
!12612 = !DILocation(line: 778, column: 15, scope: !12603)
!12613 = !DILocation(line: 779, column: 17, scope: !12603)
!12614 = !DILocation(line: 779, column: 24, scope: !12603)
!12615 = !DILocation(line: 779, column: 3, scope: !12603)
!12616 = !DILocation(line: 779, column: 10, scope: !12603)
!12617 = !DILocation(line: 779, column: 15, scope: !12603)
!12618 = !DILocation(line: 780, column: 28, scope: !12603)
!12619 = !DILocation(line: 780, column: 3, scope: !12603)
!12620 = !DILocation(line: 780, column: 10, scope: !12603)
!12621 = !DILocation(line: 780, column: 26, scope: !12603)
!12622 = !DILocation(line: 781, column: 1, scope: !12603)
!12623 = distinct !DISubprogram(name: "allocate_entry", scope: !941, file: !941, line: 751, type: !12624, scopeLine: 752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12624 = !DISubroutineType(types: !12625)
!12625 = !{!944, !984}
!12626 = !DILocalVariable(name: "table", arg: 1, scope: !12623, file: !941, line: 751, type: !984)
!12627 = !DILocation(line: 751, column: 29, scope: !12623)
!12628 = !DILocalVariable(name: "new", scope: !12623, file: !941, line: 753, type: !944)
!12629 = !DILocation(line: 753, column: 22, scope: !12623)
!12630 = !DILocation(line: 755, column: 7, scope: !12631)
!12631 = distinct !DILexicalBlock(scope: !12623, file: !941, line: 755, column: 7)
!12632 = !DILocation(line: 755, column: 14, scope: !12631)
!12633 = !DILocation(line: 755, column: 7, scope: !12623)
!12634 = !DILocation(line: 757, column: 13, scope: !12635)
!12635 = distinct !DILexicalBlock(scope: !12631, file: !941, line: 756, column: 5)
!12636 = !DILocation(line: 757, column: 20, scope: !12635)
!12637 = !DILocation(line: 757, column: 11, scope: !12635)
!12638 = !DILocation(line: 758, column: 32, scope: !12635)
!12639 = !DILocation(line: 758, column: 37, scope: !12635)
!12640 = !DILocation(line: 758, column: 7, scope: !12635)
!12641 = !DILocation(line: 758, column: 14, scope: !12635)
!12642 = !DILocation(line: 758, column: 30, scope: !12635)
!12643 = !DILocation(line: 759, column: 5, scope: !12635)
!12644 = !DILocation(line: 765, column: 13, scope: !12645)
!12645 = distinct !DILexicalBlock(scope: !12631, file: !941, line: 761, column: 5)
!12646 = !DILocation(line: 765, column: 11, scope: !12645)
!12647 = !DILocation(line: 769, column: 10, scope: !12623)
!12648 = !DILocation(line: 769, column: 3, scope: !12623)
!12649 = distinct !DISubprogram(name: "hash_insert_if_absent", scope: !941, file: !941, line: 1038, type: !12650, scopeLine: 1040, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12650 = !DISubroutineType(types: !12651)
!12651 = !{!5, !984, !85, !1406}
!12652 = !DILocalVariable(name: "table", arg: 1, scope: !12649, file: !941, line: 1038, type: !984)
!12653 = !DILocation(line: 1038, column: 36, scope: !12649)
!12654 = !DILocalVariable(name: "entry", arg: 2, scope: !12649, file: !941, line: 1038, type: !85)
!12655 = !DILocation(line: 1038, column: 55, scope: !12649)
!12656 = !DILocalVariable(name: "matched_ent", arg: 3, scope: !12649, file: !941, line: 1039, type: !1406)
!12657 = !DILocation(line: 1039, column: 37, scope: !12649)
!12658 = !DILocalVariable(name: "data", scope: !12649, file: !941, line: 1041, type: !47)
!12659 = !DILocation(line: 1041, column: 9, scope: !12649)
!12660 = !DILocalVariable(name: "bucket", scope: !12649, file: !941, line: 1042, type: !944)
!12661 = !DILocation(line: 1042, column: 22, scope: !12649)
!12662 = !DILocation(line: 1047, column: 9, scope: !12663)
!12663 = distinct !DILexicalBlock(scope: !12649, file: !941, line: 1047, column: 7)
!12664 = !DILocation(line: 1047, column: 7, scope: !12649)
!12665 = !DILocation(line: 1048, column: 5, scope: !12663)
!12666 = !DILocation(line: 1051, column: 32, scope: !12667)
!12667 = distinct !DILexicalBlock(scope: !12649, file: !941, line: 1051, column: 7)
!12668 = !DILocation(line: 1051, column: 39, scope: !12667)
!12669 = !DILocation(line: 1051, column: 15, scope: !12667)
!12670 = !DILocation(line: 1051, column: 13, scope: !12667)
!12671 = !DILocation(line: 1051, column: 63, scope: !12667)
!12672 = !DILocation(line: 1051, column: 7, scope: !12649)
!12673 = !DILocation(line: 1053, column: 11, scope: !12674)
!12674 = distinct !DILexicalBlock(scope: !12675, file: !941, line: 1053, column: 11)
!12675 = distinct !DILexicalBlock(scope: !12667, file: !941, line: 1052, column: 5)
!12676 = !DILocation(line: 1053, column: 11, scope: !12675)
!12677 = !DILocation(line: 1054, column: 24, scope: !12674)
!12678 = !DILocation(line: 1054, column: 10, scope: !12674)
!12679 = !DILocation(line: 1054, column: 22, scope: !12674)
!12680 = !DILocation(line: 1054, column: 9, scope: !12674)
!12681 = !DILocation(line: 1055, column: 7, scope: !12675)
!12682 = !DILocation(line: 1063, column: 7, scope: !12683)
!12683 = distinct !DILexicalBlock(scope: !12649, file: !941, line: 1063, column: 7)
!12684 = !DILocation(line: 1063, column: 14, scope: !12683)
!12685 = !DILocation(line: 1064, column: 9, scope: !12683)
!12686 = !DILocation(line: 1064, column: 16, scope: !12683)
!12687 = !DILocation(line: 1064, column: 24, scope: !12683)
!12688 = !DILocation(line: 1064, column: 43, scope: !12683)
!12689 = !DILocation(line: 1064, column: 50, scope: !12683)
!12690 = !DILocation(line: 1064, column: 41, scope: !12683)
!12691 = !DILocation(line: 1064, column: 7, scope: !12683)
!12692 = !DILocation(line: 1063, column: 7, scope: !12649)
!12693 = !DILocation(line: 1068, column: 21, scope: !12694)
!12694 = distinct !DILexicalBlock(scope: !12683, file: !941, line: 1065, column: 5)
!12695 = !DILocation(line: 1068, column: 7, scope: !12694)
!12696 = !DILocation(line: 1069, column: 11, scope: !12697)
!12697 = distinct !DILexicalBlock(scope: !12694, file: !941, line: 1069, column: 11)
!12698 = !DILocation(line: 1069, column: 18, scope: !12697)
!12699 = !DILocation(line: 1070, column: 13, scope: !12697)
!12700 = !DILocation(line: 1070, column: 20, scope: !12697)
!12701 = !DILocation(line: 1070, column: 28, scope: !12697)
!12702 = !DILocation(line: 1070, column: 47, scope: !12697)
!12703 = !DILocation(line: 1070, column: 54, scope: !12697)
!12704 = !DILocation(line: 1070, column: 45, scope: !12697)
!12705 = !DILocation(line: 1070, column: 11, scope: !12697)
!12706 = !DILocation(line: 1069, column: 11, scope: !12694)
!12707 = !DILocalVariable(name: "tuning", scope: !12708, file: !941, line: 1072, type: !956)
!12708 = distinct !DILexicalBlock(scope: !12697, file: !941, line: 1071, column: 9)
!12709 = !DILocation(line: 1072, column: 30, scope: !12708)
!12710 = !DILocation(line: 1072, column: 39, scope: !12708)
!12711 = !DILocation(line: 1072, column: 46, scope: !12708)
!12712 = !DILocalVariable(name: "candidate", scope: !12708, file: !941, line: 1073, type: !962)
!12713 = !DILocation(line: 1073, column: 17, scope: !12708)
!12714 = !DILocation(line: 1074, column: 14, scope: !12708)
!12715 = !DILocation(line: 1074, column: 22, scope: !12708)
!12716 = !DILocation(line: 1075, column: 17, scope: !12708)
!12717 = !DILocation(line: 1075, column: 24, scope: !12708)
!12718 = !DILocation(line: 1075, column: 36, scope: !12708)
!12719 = !DILocation(line: 1075, column: 44, scope: !12708)
!12720 = !DILocation(line: 1075, column: 34, scope: !12708)
!12721 = !DILocation(line: 1076, column: 17, scope: !12708)
!12722 = !DILocation(line: 1076, column: 24, scope: !12708)
!12723 = !DILocation(line: 1076, column: 36, scope: !12708)
!12724 = !DILocation(line: 1076, column: 44, scope: !12708)
!12725 = !DILocation(line: 1076, column: 34, scope: !12708)
!12726 = !DILocation(line: 1077, column: 19, scope: !12708)
!12727 = !DILocation(line: 1077, column: 27, scope: !12708)
!12728 = !DILocation(line: 1077, column: 17, scope: !12708)
!12729 = !DILocation(line: 1079, column: 27, scope: !12730)
!12730 = distinct !DILexicalBlock(scope: !12708, file: !941, line: 1079, column: 15)
!12731 = !DILocation(line: 1079, column: 24, scope: !12730)
!12732 = !DILocation(line: 1079, column: 15, scope: !12708)
!12733 = !DILocation(line: 1080, column: 13, scope: !12730)
!12734 = !DILocation(line: 1083, column: 29, scope: !12735)
!12735 = distinct !DILexicalBlock(scope: !12708, file: !941, line: 1083, column: 15)
!12736 = !DILocation(line: 1083, column: 36, scope: !12735)
!12737 = !DILocation(line: 1083, column: 16, scope: !12735)
!12738 = !DILocation(line: 1083, column: 15, scope: !12708)
!12739 = !DILocation(line: 1084, column: 13, scope: !12735)
!12740 = !DILocation(line: 1087, column: 32, scope: !12741)
!12741 = distinct !DILexicalBlock(scope: !12708, file: !941, line: 1087, column: 15)
!12742 = !DILocation(line: 1087, column: 39, scope: !12741)
!12743 = !DILocation(line: 1087, column: 15, scope: !12741)
!12744 = !DILocation(line: 1087, column: 62, scope: !12741)
!12745 = !DILocation(line: 1087, column: 15, scope: !12708)
!12746 = !DILocation(line: 1088, column: 13, scope: !12741)
!12747 = !DILocation(line: 1089, column: 9, scope: !12708)
!12748 = !DILocation(line: 1090, column: 5, scope: !12694)
!12749 = !DILocation(line: 1094, column: 7, scope: !12750)
!12750 = distinct !DILexicalBlock(scope: !12649, file: !941, line: 1094, column: 7)
!12751 = !DILocation(line: 1094, column: 15, scope: !12750)
!12752 = !DILocation(line: 1094, column: 7, scope: !12649)
!12753 = !DILocalVariable(name: "new_entry", scope: !12754, file: !941, line: 1096, type: !944)
!12754 = distinct !DILexicalBlock(scope: !12750, file: !941, line: 1095, column: 5)
!12755 = !DILocation(line: 1096, column: 26, scope: !12754)
!12756 = !DILocation(line: 1096, column: 54, scope: !12754)
!12757 = !DILocation(line: 1096, column: 38, scope: !12754)
!12758 = !DILocation(line: 1098, column: 11, scope: !12759)
!12759 = distinct !DILexicalBlock(scope: !12754, file: !941, line: 1098, column: 11)
!12760 = !DILocation(line: 1098, column: 21, scope: !12759)
!12761 = !DILocation(line: 1098, column: 11, scope: !12754)
!12762 = !DILocation(line: 1099, column: 9, scope: !12759)
!12763 = !DILocation(line: 1103, column: 34, scope: !12754)
!12764 = !DILocation(line: 1103, column: 7, scope: !12754)
!12765 = !DILocation(line: 1103, column: 18, scope: !12754)
!12766 = !DILocation(line: 1103, column: 23, scope: !12754)
!12767 = !DILocation(line: 1104, column: 25, scope: !12754)
!12768 = !DILocation(line: 1104, column: 33, scope: !12754)
!12769 = !DILocation(line: 1104, column: 7, scope: !12754)
!12770 = !DILocation(line: 1104, column: 18, scope: !12754)
!12771 = !DILocation(line: 1104, column: 23, scope: !12754)
!12772 = !DILocation(line: 1105, column: 22, scope: !12754)
!12773 = !DILocation(line: 1105, column: 7, scope: !12754)
!12774 = !DILocation(line: 1105, column: 15, scope: !12754)
!12775 = !DILocation(line: 1105, column: 20, scope: !12754)
!12776 = !DILocation(line: 1106, column: 7, scope: !12754)
!12777 = !DILocation(line: 1106, column: 14, scope: !12754)
!12778 = !DILocation(line: 1106, column: 23, scope: !12754)
!12779 = !DILocation(line: 1107, column: 7, scope: !12754)
!12780 = !DILocation(line: 1112, column: 27, scope: !12649)
!12781 = !DILocation(line: 1112, column: 3, scope: !12649)
!12782 = !DILocation(line: 1112, column: 11, scope: !12649)
!12783 = !DILocation(line: 1112, column: 16, scope: !12649)
!12784 = !DILocation(line: 1113, column: 3, scope: !12649)
!12785 = !DILocation(line: 1113, column: 10, scope: !12649)
!12786 = !DILocation(line: 1113, column: 19, scope: !12649)
!12787 = !DILocation(line: 1114, column: 3, scope: !12649)
!12788 = !DILocation(line: 1114, column: 10, scope: !12649)
!12789 = !DILocation(line: 1114, column: 24, scope: !12649)
!12790 = !DILocation(line: 1116, column: 3, scope: !12649)
!12791 = !DILocation(line: 1117, column: 1, scope: !12649)
!12792 = distinct !DISubprogram(name: "hash_find_entry", scope: !941, file: !941, line: 790, type: !12793, scopeLine: 792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12793 = !DISubroutineType(types: !12794)
!12794 = !{!47, !984, !85, !12795, !162}
!12795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !944, size: 64)
!12796 = !DILocalVariable(name: "table", arg: 1, scope: !12792, file: !941, line: 790, type: !984)
!12797 = !DILocation(line: 790, column: 30, scope: !12792)
!12798 = !DILocalVariable(name: "entry", arg: 2, scope: !12792, file: !941, line: 790, type: !85)
!12799 = !DILocation(line: 790, column: 49, scope: !12792)
!12800 = !DILocalVariable(name: "bucket_head", arg: 3, scope: !12792, file: !941, line: 791, type: !12795)
!12801 = !DILocation(line: 791, column: 38, scope: !12792)
!12802 = !DILocalVariable(name: "delete", arg: 4, scope: !12792, file: !941, line: 791, type: !162)
!12803 = !DILocation(line: 791, column: 56, scope: !12792)
!12804 = !DILocalVariable(name: "bucket", scope: !12792, file: !941, line: 793, type: !944)
!12805 = !DILocation(line: 793, column: 22, scope: !12792)
!12806 = !DILocation(line: 793, column: 44, scope: !12792)
!12807 = !DILocation(line: 793, column: 51, scope: !12792)
!12808 = !DILocation(line: 793, column: 31, scope: !12792)
!12809 = !DILocalVariable(name: "cursor", scope: !12792, file: !941, line: 794, type: !944)
!12810 = !DILocation(line: 794, column: 22, scope: !12792)
!12811 = !DILocation(line: 796, column: 18, scope: !12792)
!12812 = !DILocation(line: 796, column: 4, scope: !12792)
!12813 = !DILocation(line: 796, column: 16, scope: !12792)
!12814 = !DILocation(line: 799, column: 7, scope: !12815)
!12815 = distinct !DILexicalBlock(scope: !12792, file: !941, line: 799, column: 7)
!12816 = !DILocation(line: 799, column: 15, scope: !12815)
!12817 = !DILocation(line: 799, column: 20, scope: !12815)
!12818 = !DILocation(line: 799, column: 7, scope: !12792)
!12819 = !DILocation(line: 800, column: 5, scope: !12815)
!12820 = !DILocation(line: 803, column: 7, scope: !12821)
!12821 = distinct !DILexicalBlock(scope: !12792, file: !941, line: 803, column: 7)
!12822 = !DILocation(line: 803, column: 16, scope: !12821)
!12823 = !DILocation(line: 803, column: 24, scope: !12821)
!12824 = !DILocation(line: 803, column: 13, scope: !12821)
!12825 = !DILocation(line: 803, column: 29, scope: !12821)
!12826 = !DILocation(line: 803, column: 32, scope: !12821)
!12827 = !DILocation(line: 803, column: 39, scope: !12821)
!12828 = !DILocation(line: 803, column: 51, scope: !12821)
!12829 = !DILocation(line: 803, column: 58, scope: !12821)
!12830 = !DILocation(line: 803, column: 66, scope: !12821)
!12831 = !DILocation(line: 803, column: 7, scope: !12792)
!12832 = !DILocalVariable(name: "data", scope: !12833, file: !941, line: 805, type: !47)
!12833 = distinct !DILexicalBlock(scope: !12821, file: !941, line: 804, column: 5)
!12834 = !DILocation(line: 805, column: 13, scope: !12833)
!12835 = !DILocation(line: 805, column: 20, scope: !12833)
!12836 = !DILocation(line: 805, column: 28, scope: !12833)
!12837 = !DILocation(line: 807, column: 11, scope: !12838)
!12838 = distinct !DILexicalBlock(scope: !12833, file: !941, line: 807, column: 11)
!12839 = !DILocation(line: 807, column: 11, scope: !12833)
!12840 = !DILocation(line: 809, column: 15, scope: !12841)
!12841 = distinct !DILexicalBlock(scope: !12842, file: !941, line: 809, column: 15)
!12842 = distinct !DILexicalBlock(scope: !12838, file: !941, line: 808, column: 9)
!12843 = !DILocation(line: 809, column: 23, scope: !12841)
!12844 = !DILocation(line: 809, column: 15, scope: !12842)
!12845 = !DILocalVariable(name: "next", scope: !12846, file: !941, line: 811, type: !944)
!12846 = distinct !DILexicalBlock(scope: !12841, file: !941, line: 810, column: 13)
!12847 = !DILocation(line: 811, column: 34, scope: !12846)
!12848 = !DILocation(line: 811, column: 41, scope: !12846)
!12849 = !DILocation(line: 811, column: 49, scope: !12846)
!12850 = !DILocation(line: 815, column: 16, scope: !12846)
!12851 = !DILocation(line: 815, column: 26, scope: !12846)
!12852 = !DILocation(line: 815, column: 25, scope: !12846)
!12853 = !DILocation(line: 816, column: 27, scope: !12846)
!12854 = !DILocation(line: 816, column: 34, scope: !12846)
!12855 = !DILocation(line: 816, column: 15, scope: !12846)
!12856 = !DILocation(line: 817, column: 13, scope: !12846)
!12857 = !DILocation(line: 820, column: 15, scope: !12858)
!12858 = distinct !DILexicalBlock(scope: !12841, file: !941, line: 819, column: 13)
!12859 = !DILocation(line: 820, column: 23, scope: !12858)
!12860 = !DILocation(line: 820, column: 28, scope: !12858)
!12861 = !DILocation(line: 822, column: 9, scope: !12842)
!12862 = !DILocation(line: 824, column: 14, scope: !12833)
!12863 = !DILocation(line: 824, column: 7, scope: !12833)
!12864 = !DILocation(line: 828, column: 17, scope: !12865)
!12865 = distinct !DILexicalBlock(scope: !12792, file: !941, line: 828, column: 3)
!12866 = !DILocation(line: 828, column: 15, scope: !12865)
!12867 = !DILocation(line: 828, column: 8, scope: !12865)
!12868 = !DILocation(line: 828, column: 25, scope: !12869)
!12869 = distinct !DILexicalBlock(scope: !12865, file: !941, line: 828, column: 3)
!12870 = !DILocation(line: 828, column: 33, scope: !12869)
!12871 = !DILocation(line: 828, column: 3, scope: !12865)
!12872 = !DILocation(line: 830, column: 11, scope: !12873)
!12873 = distinct !DILexicalBlock(scope: !12874, file: !941, line: 830, column: 11)
!12874 = distinct !DILexicalBlock(scope: !12869, file: !941, line: 829, column: 5)
!12875 = !DILocation(line: 830, column: 20, scope: !12873)
!12876 = !DILocation(line: 830, column: 28, scope: !12873)
!12877 = !DILocation(line: 830, column: 34, scope: !12873)
!12878 = !DILocation(line: 830, column: 17, scope: !12873)
!12879 = !DILocation(line: 831, column: 11, scope: !12873)
!12880 = !DILocation(line: 831, column: 14, scope: !12873)
!12881 = !DILocation(line: 831, column: 21, scope: !12873)
!12882 = !DILocation(line: 831, column: 33, scope: !12873)
!12883 = !DILocation(line: 831, column: 40, scope: !12873)
!12884 = !DILocation(line: 831, column: 48, scope: !12873)
!12885 = !DILocation(line: 831, column: 54, scope: !12873)
!12886 = !DILocation(line: 830, column: 11, scope: !12874)
!12887 = !DILocalVariable(name: "data", scope: !12888, file: !941, line: 833, type: !47)
!12888 = distinct !DILexicalBlock(scope: !12873, file: !941, line: 832, column: 9)
!12889 = !DILocation(line: 833, column: 17, scope: !12888)
!12890 = !DILocation(line: 833, column: 24, scope: !12888)
!12891 = !DILocation(line: 833, column: 32, scope: !12888)
!12892 = !DILocation(line: 833, column: 38, scope: !12888)
!12893 = !DILocation(line: 835, column: 15, scope: !12894)
!12894 = distinct !DILexicalBlock(scope: !12888, file: !941, line: 835, column: 15)
!12895 = !DILocation(line: 835, column: 15, scope: !12888)
!12896 = !DILocalVariable(name: "next", scope: !12897, file: !941, line: 837, type: !944)
!12897 = distinct !DILexicalBlock(scope: !12894, file: !941, line: 836, column: 13)
!12898 = !DILocation(line: 837, column: 34, scope: !12897)
!12899 = !DILocation(line: 837, column: 41, scope: !12897)
!12900 = !DILocation(line: 837, column: 49, scope: !12897)
!12901 = !DILocation(line: 841, column: 30, scope: !12897)
!12902 = !DILocation(line: 841, column: 36, scope: !12897)
!12903 = !DILocation(line: 841, column: 15, scope: !12897)
!12904 = !DILocation(line: 841, column: 23, scope: !12897)
!12905 = !DILocation(line: 841, column: 28, scope: !12897)
!12906 = !DILocation(line: 842, column: 27, scope: !12897)
!12907 = !DILocation(line: 842, column: 34, scope: !12897)
!12908 = !DILocation(line: 842, column: 15, scope: !12897)
!12909 = !DILocation(line: 843, column: 13, scope: !12897)
!12910 = !DILocation(line: 845, column: 18, scope: !12888)
!12911 = !DILocation(line: 845, column: 11, scope: !12888)
!12912 = !DILocation(line: 847, column: 5, scope: !12874)
!12913 = !DILocation(line: 828, column: 48, scope: !12869)
!12914 = !DILocation(line: 828, column: 56, scope: !12869)
!12915 = !DILocation(line: 828, column: 46, scope: !12869)
!12916 = !DILocation(line: 828, column: 3, scope: !12869)
!12917 = distinct !{!12917, !12871, !12918}
!12918 = !DILocation(line: 847, column: 5, scope: !12865)
!12919 = !DILocation(line: 850, column: 3, scope: !12792)
!12920 = !DILocation(line: 851, column: 1, scope: !12792)
!12921 = distinct !DISubprogram(name: "hash_insert", scope: !941, file: !941, line: 1126, type: !12922, scopeLine: 1127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12922 = !DISubroutineType(types: !12923)
!12923 = !{!47, !984, !85}
!12924 = !DILocalVariable(name: "table", arg: 1, scope: !12921, file: !941, line: 1126, type: !984)
!12925 = !DILocation(line: 1126, column: 26, scope: !12921)
!12926 = !DILocalVariable(name: "entry", arg: 2, scope: !12921, file: !941, line: 1126, type: !85)
!12927 = !DILocation(line: 1126, column: 45, scope: !12921)
!12928 = !DILocalVariable(name: "matched_ent", scope: !12921, file: !941, line: 1128, type: !85)
!12929 = !DILocation(line: 1128, column: 15, scope: !12921)
!12930 = !DILocalVariable(name: "err", scope: !12921, file: !941, line: 1129, type: !5)
!12931 = !DILocation(line: 1129, column: 7, scope: !12921)
!12932 = !DILocation(line: 1129, column: 36, scope: !12921)
!12933 = !DILocation(line: 1129, column: 43, scope: !12921)
!12934 = !DILocation(line: 1129, column: 13, scope: !12921)
!12935 = !DILocation(line: 1130, column: 11, scope: !12921)
!12936 = !DILocation(line: 1130, column: 15, scope: !12921)
!12937 = !DILocation(line: 1132, column: 23, scope: !12921)
!12938 = !DILocation(line: 1132, column: 27, scope: !12921)
!12939 = !DILocation(line: 1132, column: 34, scope: !12921)
!12940 = !DILocation(line: 1132, column: 48, scope: !12921)
!12941 = !DILocation(line: 1130, column: 3, scope: !12921)
!12942 = distinct !DISubprogram(name: "hash_delete", scope: !941, file: !941, line: 1140, type: !12922, scopeLine: 1141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !935, retainedNodes: !433)
!12943 = !DILocalVariable(name: "table", arg: 1, scope: !12942, file: !941, line: 1140, type: !984)
!12944 = !DILocation(line: 1140, column: 26, scope: !12942)
!12945 = !DILocalVariable(name: "entry", arg: 2, scope: !12942, file: !941, line: 1140, type: !85)
!12946 = !DILocation(line: 1140, column: 45, scope: !12942)
!12947 = !DILocalVariable(name: "data", scope: !12942, file: !941, line: 1142, type: !47)
!12948 = !DILocation(line: 1142, column: 9, scope: !12942)
!12949 = !DILocalVariable(name: "bucket", scope: !12942, file: !941, line: 1143, type: !944)
!12950 = !DILocation(line: 1143, column: 22, scope: !12942)
!12951 = !DILocation(line: 1145, column: 27, scope: !12942)
!12952 = !DILocation(line: 1145, column: 34, scope: !12942)
!12953 = !DILocation(line: 1145, column: 10, scope: !12942)
!12954 = !DILocation(line: 1145, column: 8, scope: !12942)
!12955 = !DILocation(line: 1146, column: 8, scope: !12956)
!12956 = distinct !DILexicalBlock(scope: !12942, file: !941, line: 1146, column: 7)
!12957 = !DILocation(line: 1146, column: 7, scope: !12942)
!12958 = !DILocation(line: 1147, column: 5, scope: !12956)
!12959 = !DILocation(line: 1149, column: 3, scope: !12942)
!12960 = !DILocation(line: 1149, column: 10, scope: !12942)
!12961 = !DILocation(line: 1149, column: 19, scope: !12942)
!12962 = !DILocation(line: 1150, column: 8, scope: !12963)
!12963 = distinct !DILexicalBlock(scope: !12942, file: !941, line: 1150, column: 7)
!12964 = !DILocation(line: 1150, column: 16, scope: !12963)
!12965 = !DILocation(line: 1150, column: 7, scope: !12942)
!12966 = !DILocation(line: 1152, column: 7, scope: !12967)
!12967 = distinct !DILexicalBlock(scope: !12963, file: !941, line: 1151, column: 5)
!12968 = !DILocation(line: 1152, column: 14, scope: !12967)
!12969 = !DILocation(line: 1152, column: 28, scope: !12967)
!12970 = !DILocation(line: 1157, column: 11, scope: !12971)
!12971 = distinct !DILexicalBlock(scope: !12967, file: !941, line: 1157, column: 11)
!12972 = !DILocation(line: 1157, column: 18, scope: !12971)
!12973 = !DILocation(line: 1158, column: 13, scope: !12971)
!12974 = !DILocation(line: 1158, column: 20, scope: !12971)
!12975 = !DILocation(line: 1158, column: 28, scope: !12971)
!12976 = !DILocation(line: 1158, column: 47, scope: !12971)
!12977 = !DILocation(line: 1158, column: 54, scope: !12971)
!12978 = !DILocation(line: 1158, column: 45, scope: !12971)
!12979 = !DILocation(line: 1158, column: 11, scope: !12971)
!12980 = !DILocation(line: 1157, column: 11, scope: !12967)
!12981 = !DILocation(line: 1162, column: 25, scope: !12982)
!12982 = distinct !DILexicalBlock(scope: !12971, file: !941, line: 1159, column: 9)
!12983 = !DILocation(line: 1162, column: 11, scope: !12982)
!12984 = !DILocation(line: 1163, column: 15, scope: !12985)
!12985 = distinct !DILexicalBlock(scope: !12982, file: !941, line: 1163, column: 15)
!12986 = !DILocation(line: 1163, column: 22, scope: !12985)
!12987 = !DILocation(line: 1164, column: 17, scope: !12985)
!12988 = !DILocation(line: 1164, column: 24, scope: !12985)
!12989 = !DILocation(line: 1164, column: 32, scope: !12985)
!12990 = !DILocation(line: 1164, column: 51, scope: !12985)
!12991 = !DILocation(line: 1164, column: 58, scope: !12985)
!12992 = !DILocation(line: 1164, column: 49, scope: !12985)
!12993 = !DILocation(line: 1164, column: 15, scope: !12985)
!12994 = !DILocation(line: 1163, column: 15, scope: !12982)
!12995 = !DILocalVariable(name: "tuning", scope: !12996, file: !941, line: 1166, type: !956)
!12996 = distinct !DILexicalBlock(scope: !12985, file: !941, line: 1165, column: 13)
!12997 = !DILocation(line: 1166, column: 34, scope: !12996)
!12998 = !DILocation(line: 1166, column: 43, scope: !12996)
!12999 = !DILocation(line: 1166, column: 50, scope: !12996)
!13000 = !DILocalVariable(name: "candidate", scope: !12996, file: !941, line: 1167, type: !52)
!13001 = !DILocation(line: 1167, column: 22, scope: !12996)
!13002 = !DILocation(line: 1168, column: 18, scope: !12996)
!13003 = !DILocation(line: 1168, column: 26, scope: !12996)
!13004 = !DILocation(line: 1169, column: 20, scope: !12996)
!13005 = !DILocation(line: 1169, column: 27, scope: !12996)
!13006 = !DILocation(line: 1169, column: 39, scope: !12996)
!13007 = !DILocation(line: 1169, column: 47, scope: !12996)
!13008 = !DILocation(line: 1169, column: 37, scope: !12996)
!13009 = !DILocation(line: 1170, column: 21, scope: !12996)
!13010 = !DILocation(line: 1170, column: 28, scope: !12996)
!13011 = !DILocation(line: 1170, column: 40, scope: !12996)
!13012 = !DILocation(line: 1170, column: 48, scope: !12996)
!13013 = !DILocation(line: 1170, column: 38, scope: !12996)
!13014 = !DILocation(line: 1171, column: 23, scope: !12996)
!13015 = !DILocation(line: 1171, column: 31, scope: !12996)
!13016 = !DILocation(line: 1171, column: 21, scope: !12996)
!13017 = !DILocation(line: 1168, column: 17, scope: !12996)
!13018 = !DILocation(line: 1173, column: 33, scope: !13019)
!13019 = distinct !DILexicalBlock(scope: !12996, file: !941, line: 1173, column: 19)
!13020 = !DILocation(line: 1173, column: 40, scope: !13019)
!13021 = !DILocation(line: 1173, column: 20, scope: !13019)
!13022 = !DILocation(line: 1173, column: 19, scope: !12996)
!13023 = !DILocalVariable(name: "cursor", scope: !13024, file: !941, line: 1181, type: !944)
!13024 = distinct !DILexicalBlock(scope: !13019, file: !941, line: 1174, column: 17)
!13025 = !DILocation(line: 1181, column: 38, scope: !13024)
!13026 = !DILocation(line: 1181, column: 47, scope: !13024)
!13027 = !DILocation(line: 1181, column: 54, scope: !13024)
!13028 = !DILocalVariable(name: "next", scope: !13024, file: !941, line: 1182, type: !944)
!13029 = !DILocation(line: 1182, column: 38, scope: !13024)
!13030 = !DILocation(line: 1183, column: 19, scope: !13024)
!13031 = !DILocation(line: 1183, column: 26, scope: !13024)
!13032 = !DILocation(line: 1185, column: 30, scope: !13033)
!13033 = distinct !DILexicalBlock(scope: !13024, file: !941, line: 1184, column: 21)
!13034 = !DILocation(line: 1185, column: 38, scope: !13033)
!13035 = !DILocation(line: 1185, column: 28, scope: !13033)
!13036 = !DILocation(line: 1186, column: 29, scope: !13033)
!13037 = !DILocation(line: 1186, column: 23, scope: !13033)
!13038 = !DILocation(line: 1187, column: 32, scope: !13033)
!13039 = !DILocation(line: 1187, column: 30, scope: !13033)
!13040 = distinct !{!13040, !13030, !13041}
!13041 = !DILocation(line: 1188, column: 21, scope: !13024)
!13042 = !DILocation(line: 1189, column: 19, scope: !13024)
!13043 = !DILocation(line: 1189, column: 26, scope: !13024)
!13044 = !DILocation(line: 1189, column: 42, scope: !13024)
!13045 = !DILocation(line: 1191, column: 17, scope: !13024)
!13046 = !DILocation(line: 1192, column: 13, scope: !12996)
!13047 = !DILocation(line: 1193, column: 9, scope: !12982)
!13048 = !DILocation(line: 1194, column: 5, scope: !12967)
!13049 = !DILocation(line: 1196, column: 10, scope: !12942)
!13050 = !DILocation(line: 1196, column: 3, scope: !12942)
!13051 = !DILocation(line: 1197, column: 1, scope: !12942)
!13052 = distinct !DISubprogram(name: "heap_alloc", scope: !1252, file: !1252, line: 44, type: !13053, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13053 = !DISubroutineType(types: !13054)
!13054 = !{!1250, !1258, !52}
!13055 = !DILocalVariable(name: "compare", arg: 1, scope: !13052, file: !1252, line: 44, type: !1258)
!13056 = !DILocation(line: 44, column: 19, scope: !13052)
!13057 = !DILocalVariable(name: "n_reserve", arg: 2, scope: !13052, file: !1252, line: 44, type: !52)
!13058 = !DILocation(line: 44, column: 65, scope: !13052)
!13059 = !DILocalVariable(name: "heap", scope: !13052, file: !1252, line: 46, type: !1250)
!13060 = !DILocation(line: 46, column: 16, scope: !13052)
!13061 = !DILocation(line: 46, column: 23, scope: !13052)
!13062 = !DILocation(line: 48, column: 7, scope: !13063)
!13063 = distinct !DILexicalBlock(scope: !13052, file: !1252, line: 48, column: 7)
!13064 = !DILocation(line: 48, column: 17, scope: !13063)
!13065 = !DILocation(line: 48, column: 7, scope: !13052)
!13066 = !DILocation(line: 49, column: 15, scope: !13063)
!13067 = !DILocation(line: 49, column: 5, scope: !13063)
!13068 = !DILocation(line: 51, column: 27, scope: !13052)
!13069 = !DILocation(line: 51, column: 17, scope: !13052)
!13070 = !DILocation(line: 51, column: 3, scope: !13052)
!13071 = !DILocation(line: 51, column: 9, scope: !13052)
!13072 = !DILocation(line: 51, column: 15, scope: !13052)
!13073 = !DILocation(line: 53, column: 3, scope: !13052)
!13074 = !DILocation(line: 53, column: 9, scope: !13052)
!13075 = !DILocation(line: 53, column: 18, scope: !13052)
!13076 = !DILocation(line: 54, column: 20, scope: !13052)
!13077 = !DILocation(line: 54, column: 3, scope: !13052)
!13078 = !DILocation(line: 54, column: 9, scope: !13052)
!13079 = !DILocation(line: 54, column: 18, scope: !13052)
!13080 = !DILocation(line: 55, column: 3, scope: !13052)
!13081 = !DILocation(line: 55, column: 9, scope: !13052)
!13082 = !DILocation(line: 55, column: 15, scope: !13052)
!13083 = !DILocation(line: 56, column: 19, scope: !13052)
!13084 = !DILocation(line: 56, column: 29, scope: !13052)
!13085 = !DILocation(line: 56, column: 3, scope: !13052)
!13086 = !DILocation(line: 56, column: 9, scope: !13052)
!13087 = !DILocation(line: 56, column: 17, scope: !13052)
!13088 = !DILocation(line: 58, column: 10, scope: !13052)
!13089 = !DILocation(line: 58, column: 3, scope: !13052)
!13090 = distinct !DISubprogram(name: "heap_default_compare", scope: !1252, file: !1252, line: 63, type: !1259, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13091 = !DILocalVariable(name: "a", arg: 1, scope: !13090, file: !1252, line: 63, type: !85)
!13092 = !DILocation(line: 63, column: 35, scope: !13090)
!13093 = !DILocalVariable(name: "b", arg: 2, scope: !13090, file: !1252, line: 63, type: !85)
!13094 = !DILocation(line: 63, column: 50, scope: !13090)
!13095 = !DILocation(line: 65, column: 3, scope: !13090)
!13096 = distinct !DISubprogram(name: "heap_free", scope: !1252, file: !1252, line: 70, type: !13097, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13097 = !DISubroutineType(types: !13098)
!13098 = !{null, !1250}
!13099 = !DILocalVariable(name: "heap", arg: 1, scope: !13096, file: !1252, line: 70, type: !1250)
!13100 = !DILocation(line: 70, column: 25, scope: !13096)
!13101 = !DILocation(line: 72, column: 9, scope: !13096)
!13102 = !DILocation(line: 72, column: 15, scope: !13096)
!13103 = !DILocation(line: 72, column: 3, scope: !13096)
!13104 = !DILocation(line: 73, column: 9, scope: !13096)
!13105 = !DILocation(line: 73, column: 3, scope: !13096)
!13106 = !DILocation(line: 74, column: 1, scope: !13096)
!13107 = distinct !DISubprogram(name: "heap_insert", scope: !1252, file: !1252, line: 79, type: !13108, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13108 = !DISubroutineType(types: !13109)
!13109 = !{!5, !1250, !47}
!13110 = !DILocalVariable(name: "heap", arg: 1, scope: !13107, file: !1252, line: 79, type: !1250)
!13111 = !DILocation(line: 79, column: 27, scope: !13107)
!13112 = !DILocalVariable(name: "item", arg: 2, scope: !13107, file: !1252, line: 79, type: !47)
!13113 = !DILocation(line: 79, column: 39, scope: !13107)
!13114 = !DILocation(line: 81, column: 7, scope: !13115)
!13115 = distinct !DILexicalBlock(scope: !13107, file: !1252, line: 81, column: 7)
!13116 = !DILocation(line: 81, column: 13, scope: !13115)
!13117 = !DILocation(line: 81, column: 22, scope: !13115)
!13118 = !DILocation(line: 81, column: 29, scope: !13115)
!13119 = !DILocation(line: 81, column: 35, scope: !13115)
!13120 = !DILocation(line: 81, column: 26, scope: !13115)
!13121 = !DILocation(line: 81, column: 7, scope: !13107)
!13122 = !DILocation(line: 82, column: 31, scope: !13115)
!13123 = !DILocation(line: 82, column: 37, scope: !13115)
!13124 = !DILocation(line: 82, column: 45, scope: !13115)
!13125 = !DILocation(line: 82, column: 51, scope: !13115)
!13126 = !DILocation(line: 82, column: 19, scope: !13115)
!13127 = !DILocation(line: 82, column: 5, scope: !13115)
!13128 = !DILocation(line: 82, column: 11, scope: !13115)
!13129 = !DILocation(line: 82, column: 17, scope: !13115)
!13130 = !DILocation(line: 85, column: 32, scope: !13107)
!13131 = !DILocation(line: 85, column: 3, scope: !13107)
!13132 = !DILocation(line: 85, column: 9, scope: !13107)
!13133 = !DILocation(line: 85, column: 17, scope: !13107)
!13134 = !DILocation(line: 85, column: 23, scope: !13107)
!13135 = !DILocation(line: 85, column: 15, scope: !13107)
!13136 = !DILocation(line: 85, column: 30, scope: !13107)
!13137 = !DILocation(line: 86, column: 15, scope: !13107)
!13138 = !DILocation(line: 86, column: 21, scope: !13107)
!13139 = !DILocation(line: 86, column: 28, scope: !13107)
!13140 = !DILocation(line: 86, column: 34, scope: !13107)
!13141 = !DILocation(line: 86, column: 41, scope: !13107)
!13142 = !DILocation(line: 86, column: 47, scope: !13107)
!13143 = !DILocation(line: 86, column: 3, scope: !13107)
!13144 = !DILocation(line: 88, column: 3, scope: !13107)
!13145 = distinct !DISubprogram(name: "heapify_up", scope: !1252, file: !1252, line: 138, type: !13146, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13146 = !DISubroutineType(types: !13147)
!13147 = !{null, !983, !52, !1258}
!13148 = !DILocalVariable(name: "array", arg: 1, scope: !13145, file: !1252, line: 138, type: !983)
!13149 = !DILocation(line: 138, column: 20, scope: !13145)
!13150 = !DILocalVariable(name: "count", arg: 2, scope: !13145, file: !1252, line: 138, type: !52)
!13151 = !DILocation(line: 138, column: 34, scope: !13145)
!13152 = !DILocalVariable(name: "compare", arg: 3, scope: !13145, file: !1252, line: 139, type: !1258)
!13153 = !DILocation(line: 139, column: 19, scope: !13145)
!13154 = !DILocalVariable(name: "k", scope: !13145, file: !1252, line: 141, type: !52)
!13155 = !DILocation(line: 141, column: 10, scope: !13145)
!13156 = !DILocation(line: 141, column: 14, scope: !13145)
!13157 = !DILocalVariable(name: "new_element", scope: !13145, file: !1252, line: 142, type: !47)
!13158 = !DILocation(line: 142, column: 9, scope: !13145)
!13159 = !DILocation(line: 142, column: 23, scope: !13145)
!13160 = !DILocation(line: 142, column: 29, scope: !13145)
!13161 = !DILocation(line: 144, column: 3, scope: !13145)
!13162 = !DILocation(line: 144, column: 10, scope: !13145)
!13163 = !DILocation(line: 144, column: 12, scope: !13145)
!13164 = !DILocation(line: 144, column: 17, scope: !13145)
!13165 = !DILocation(line: 144, column: 20, scope: !13145)
!13166 = !DILocation(line: 144, column: 29, scope: !13145)
!13167 = !DILocation(line: 144, column: 35, scope: !13145)
!13168 = !DILocation(line: 144, column: 36, scope: !13145)
!13169 = !DILocation(line: 144, column: 41, scope: !13145)
!13170 = !DILocation(line: 144, column: 54, scope: !13145)
!13171 = !DILocation(line: 0, scope: !13145)
!13172 = !DILocation(line: 146, column: 18, scope: !13173)
!13173 = distinct !DILexicalBlock(scope: !13145, file: !1252, line: 145, column: 5)
!13174 = !DILocation(line: 146, column: 24, scope: !13173)
!13175 = !DILocation(line: 146, column: 25, scope: !13173)
!13176 = !DILocation(line: 146, column: 7, scope: !13173)
!13177 = !DILocation(line: 146, column: 13, scope: !13173)
!13178 = !DILocation(line: 146, column: 16, scope: !13173)
!13179 = !DILocation(line: 147, column: 9, scope: !13173)
!13180 = distinct !{!13180, !13161, !13181}
!13181 = !DILocation(line: 148, column: 5, scope: !13145)
!13182 = !DILocation(line: 150, column: 14, scope: !13145)
!13183 = !DILocation(line: 150, column: 3, scope: !13145)
!13184 = !DILocation(line: 150, column: 9, scope: !13145)
!13185 = !DILocation(line: 150, column: 12, scope: !13145)
!13186 = !DILocation(line: 151, column: 1, scope: !13145)
!13187 = distinct !DISubprogram(name: "heap_remove_top", scope: !1252, file: !1252, line: 94, type: !13188, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13188 = !DISubroutineType(types: !13189)
!13189 = !{!47, !1250}
!13190 = !DILocalVariable(name: "heap", arg: 1, scope: !13187, file: !1252, line: 94, type: !1250)
!13191 = !DILocation(line: 94, column: 31, scope: !13187)
!13192 = !DILocalVariable(name: "top", scope: !13187, file: !1252, line: 96, type: !47)
!13193 = !DILocation(line: 96, column: 9, scope: !13187)
!13194 = !DILocation(line: 98, column: 7, scope: !13195)
!13195 = distinct !DILexicalBlock(scope: !13187, file: !1252, line: 98, column: 7)
!13196 = !DILocation(line: 98, column: 13, scope: !13195)
!13197 = !DILocation(line: 98, column: 19, scope: !13195)
!13198 = !DILocation(line: 98, column: 7, scope: !13187)
!13199 = !DILocation(line: 99, column: 5, scope: !13195)
!13200 = !DILocation(line: 101, column: 9, scope: !13187)
!13201 = !DILocation(line: 101, column: 15, scope: !13187)
!13202 = !DILocation(line: 101, column: 7, scope: !13187)
!13203 = !DILocation(line: 102, column: 20, scope: !13187)
!13204 = !DILocation(line: 102, column: 26, scope: !13187)
!13205 = !DILocation(line: 102, column: 32, scope: !13187)
!13206 = !DILocation(line: 102, column: 38, scope: !13187)
!13207 = !DILocation(line: 102, column: 43, scope: !13187)
!13208 = !DILocation(line: 102, column: 3, scope: !13187)
!13209 = !DILocation(line: 102, column: 9, scope: !13187)
!13210 = !DILocation(line: 102, column: 18, scope: !13187)
!13211 = !DILocation(line: 103, column: 17, scope: !13187)
!13212 = !DILocation(line: 103, column: 23, scope: !13187)
!13213 = !DILocation(line: 103, column: 30, scope: !13187)
!13214 = !DILocation(line: 103, column: 36, scope: !13187)
!13215 = !DILocation(line: 103, column: 46, scope: !13187)
!13216 = !DILocation(line: 103, column: 52, scope: !13187)
!13217 = !DILocation(line: 103, column: 3, scope: !13187)
!13218 = !DILocation(line: 105, column: 10, scope: !13187)
!13219 = !DILocation(line: 105, column: 3, scope: !13187)
!13220 = !DILocation(line: 106, column: 1, scope: !13187)
!13221 = distinct !DISubprogram(name: "heapify_down", scope: !1252, file: !1252, line: 111, type: !13222, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1247, retainedNodes: !433)
!13222 = !DISubroutineType(types: !13223)
!13223 = !{!52, !983, !52, !52, !1258}
!13224 = !DILocalVariable(name: "array", arg: 1, scope: !13221, file: !1252, line: 111, type: !983)
!13225 = !DILocation(line: 111, column: 22, scope: !13221)
!13226 = !DILocalVariable(name: "count", arg: 2, scope: !13221, file: !1252, line: 111, type: !52)
!13227 = !DILocation(line: 111, column: 36, scope: !13221)
!13228 = !DILocalVariable(name: "initial", arg: 3, scope: !13221, file: !1252, line: 111, type: !52)
!13229 = !DILocation(line: 111, column: 50, scope: !13221)
!13230 = !DILocalVariable(name: "compare", arg: 4, scope: !13221, file: !1252, line: 112, type: !1258)
!13231 = !DILocation(line: 112, column: 21, scope: !13221)
!13232 = !DILocalVariable(name: "element", scope: !13221, file: !1252, line: 114, type: !47)
!13233 = !DILocation(line: 114, column: 9, scope: !13221)
!13234 = !DILocation(line: 114, column: 19, scope: !13221)
!13235 = !DILocation(line: 114, column: 25, scope: !13221)
!13236 = !DILocalVariable(name: "parent", scope: !13221, file: !1252, line: 116, type: !52)
!13237 = !DILocation(line: 116, column: 10, scope: !13221)
!13238 = !DILocation(line: 116, column: 19, scope: !13221)
!13239 = !DILocation(line: 117, column: 3, scope: !13221)
!13240 = !DILocation(line: 117, column: 10, scope: !13221)
!13241 = !DILocation(line: 117, column: 20, scope: !13221)
!13242 = !DILocation(line: 117, column: 26, scope: !13221)
!13243 = !DILocation(line: 117, column: 17, scope: !13221)
!13244 = !DILocalVariable(name: "child", scope: !13245, file: !1252, line: 119, type: !52)
!13245 = distinct !DILexicalBlock(scope: !13221, file: !1252, line: 118, column: 5)
!13246 = !DILocation(line: 119, column: 14, scope: !13245)
!13247 = !DILocation(line: 119, column: 26, scope: !13245)
!13248 = !DILocation(line: 119, column: 24, scope: !13245)
!13249 = !DILocation(line: 121, column: 11, scope: !13250)
!13250 = distinct !DILexicalBlock(scope: !13245, file: !1252, line: 121, column: 11)
!13251 = !DILocation(line: 121, column: 19, scope: !13250)
!13252 = !DILocation(line: 121, column: 17, scope: !13250)
!13253 = !DILocation(line: 121, column: 25, scope: !13250)
!13254 = !DILocation(line: 121, column: 28, scope: !13250)
!13255 = !DILocation(line: 121, column: 37, scope: !13250)
!13256 = !DILocation(line: 121, column: 43, scope: !13250)
!13257 = !DILocation(line: 121, column: 51, scope: !13250)
!13258 = !DILocation(line: 121, column: 57, scope: !13250)
!13259 = !DILocation(line: 121, column: 62, scope: !13250)
!13260 = !DILocation(line: 121, column: 67, scope: !13250)
!13261 = !DILocation(line: 121, column: 11, scope: !13245)
!13262 = !DILocation(line: 122, column: 14, scope: !13250)
!13263 = !DILocation(line: 122, column: 9, scope: !13250)
!13264 = !DILocation(line: 124, column: 11, scope: !13265)
!13265 = distinct !DILexicalBlock(scope: !13245, file: !1252, line: 124, column: 11)
!13266 = !DILocation(line: 124, column: 20, scope: !13265)
!13267 = !DILocation(line: 124, column: 26, scope: !13265)
!13268 = !DILocation(line: 124, column: 34, scope: !13265)
!13269 = !DILocation(line: 124, column: 43, scope: !13265)
!13270 = !DILocation(line: 124, column: 11, scope: !13245)
!13271 = !DILocation(line: 125, column: 9, scope: !13265)
!13272 = !DILocation(line: 127, column: 23, scope: !13245)
!13273 = !DILocation(line: 127, column: 29, scope: !13245)
!13274 = !DILocation(line: 127, column: 7, scope: !13245)
!13275 = !DILocation(line: 127, column: 13, scope: !13245)
!13276 = !DILocation(line: 127, column: 21, scope: !13245)
!13277 = !DILocation(line: 128, column: 16, scope: !13245)
!13278 = !DILocation(line: 128, column: 14, scope: !13245)
!13279 = distinct !{!13279, !13239, !13280}
!13280 = !DILocation(line: 129, column: 5, scope: !13221)
!13281 = !DILocation(line: 131, column: 19, scope: !13221)
!13282 = !DILocation(line: 131, column: 3, scope: !13221)
!13283 = !DILocation(line: 131, column: 9, scope: !13221)
!13284 = !DILocation(line: 131, column: 17, scope: !13221)
!13285 = !DILocation(line: 132, column: 10, scope: !13221)
!13286 = !DILocation(line: 132, column: 3, scope: !13221)
!13287 = distinct !DISubprogram(name: "inttostr", scope: !13288, file: !13288, line: 36, type: !13289, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1261, retainedNodes: !433)
!13288 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/mohamad/clone/coreutils")
!13289 = !DISubroutineType(types: !13290)
!13290 = !{!7, !5, !7}
!13291 = !DILocalVariable(name: "i", arg: 1, scope: !13287, file: !13288, line: 36, type: !5)
!13292 = !DILocation(line: 36, column: 19, scope: !13287)
!13293 = !DILocalVariable(name: "buf", arg: 2, scope: !13287, file: !13288, line: 36, type: !7)
!13294 = !DILocation(line: 36, column: 28, scope: !13287)
!13295 = !DILocalVariable(name: "p", scope: !13287, file: !13288, line: 38, type: !7)
!13296 = !DILocation(line: 38, column: 9, scope: !13287)
!13297 = !DILocation(line: 38, column: 13, scope: !13287)
!13298 = !DILocation(line: 38, column: 17, scope: !13287)
!13299 = !DILocation(line: 39, column: 4, scope: !13287)
!13300 = !DILocation(line: 39, column: 6, scope: !13287)
!13301 = !DILocation(line: 41, column: 7, scope: !13302)
!13302 = distinct !DILexicalBlock(scope: !13287, file: !13288, line: 41, column: 7)
!13303 = !DILocation(line: 41, column: 9, scope: !13302)
!13304 = !DILocation(line: 41, column: 7, scope: !13287)
!13305 = !DILocation(line: 43, column: 7, scope: !13306)
!13306 = distinct !DILexicalBlock(scope: !13302, file: !13288, line: 42, column: 5)
!13307 = !DILocation(line: 44, column: 22, scope: !13306)
!13308 = !DILocation(line: 44, column: 24, scope: !13306)
!13309 = !DILocation(line: 44, column: 20, scope: !13306)
!13310 = !DILocation(line: 44, column: 16, scope: !13306)
!13311 = !DILocation(line: 44, column: 10, scope: !13306)
!13312 = !DILocation(line: 44, column: 14, scope: !13306)
!13313 = !DILocation(line: 44, column: 9, scope: !13306)
!13314 = !DILocation(line: 45, column: 17, scope: !13306)
!13315 = !DILocation(line: 45, column: 24, scope: !13306)
!13316 = distinct !{!13316, !13305, !13317}
!13317 = !DILocation(line: 45, column: 28, scope: !13306)
!13318 = !DILocation(line: 47, column: 8, scope: !13306)
!13319 = !DILocation(line: 47, column: 12, scope: !13306)
!13320 = !DILocation(line: 48, column: 5, scope: !13306)
!13321 = !DILocation(line: 51, column: 7, scope: !13322)
!13322 = distinct !DILexicalBlock(scope: !13302, file: !13288, line: 50, column: 5)
!13323 = !DILocation(line: 52, column: 22, scope: !13322)
!13324 = !DILocation(line: 52, column: 24, scope: !13322)
!13325 = !DILocation(line: 52, column: 20, scope: !13322)
!13326 = !DILocation(line: 52, column: 16, scope: !13322)
!13327 = !DILocation(line: 52, column: 10, scope: !13322)
!13328 = !DILocation(line: 52, column: 14, scope: !13322)
!13329 = !DILocation(line: 52, column: 9, scope: !13322)
!13330 = !DILocation(line: 53, column: 17, scope: !13322)
!13331 = !DILocation(line: 53, column: 24, scope: !13322)
!13332 = distinct !{!13332, !13321, !13333}
!13333 = !DILocation(line: 53, column: 28, scope: !13322)
!13334 = !DILocation(line: 56, column: 10, scope: !13287)
!13335 = !DILocation(line: 56, column: 3, scope: !13287)
!13336 = distinct !DISubprogram(name: "uinttostr", scope: !13288, file: !13288, line: 36, type: !13337, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1264, retainedNodes: !433)
!13337 = !DISubroutineType(types: !13338)
!13338 = !{!7, !66, !7}
!13339 = !DILocalVariable(name: "i", arg: 1, scope: !13336, file: !13288, line: 36, type: !66)
!13340 = !DILocation(line: 36, column: 19, scope: !13336)
!13341 = !DILocalVariable(name: "buf", arg: 2, scope: !13336, file: !13288, line: 36, type: !7)
!13342 = !DILocation(line: 36, column: 28, scope: !13336)
!13343 = !DILocalVariable(name: "p", scope: !13336, file: !13288, line: 38, type: !7)
!13344 = !DILocation(line: 38, column: 9, scope: !13336)
!13345 = !DILocation(line: 38, column: 13, scope: !13336)
!13346 = !DILocation(line: 38, column: 17, scope: !13336)
!13347 = !DILocation(line: 39, column: 4, scope: !13336)
!13348 = !DILocation(line: 39, column: 6, scope: !13336)
!13349 = !DILocation(line: 41, column: 7, scope: !13350)
!13350 = distinct !DILexicalBlock(scope: !13336, file: !13288, line: 41, column: 7)
!13351 = !DILocation(line: 41, column: 9, scope: !13350)
!13352 = !DILocation(line: 41, column: 7, scope: !13336)
!13353 = !DILocation(line: 43, column: 7, scope: !13354)
!13354 = distinct !DILexicalBlock(scope: !13350, file: !13288, line: 42, column: 5)
!13355 = !DILocation(line: 44, column: 22, scope: !13354)
!13356 = !DILocation(line: 44, column: 24, scope: !13354)
!13357 = !DILocation(line: 44, column: 20, scope: !13354)
!13358 = !DILocation(line: 44, column: 16, scope: !13354)
!13359 = !DILocation(line: 44, column: 10, scope: !13354)
!13360 = !DILocation(line: 44, column: 14, scope: !13354)
!13361 = !DILocation(line: 44, column: 9, scope: !13354)
!13362 = !DILocation(line: 45, column: 17, scope: !13354)
!13363 = !DILocation(line: 45, column: 24, scope: !13354)
!13364 = distinct !{!13364, !13353, !13365}
!13365 = !DILocation(line: 45, column: 28, scope: !13354)
!13366 = !DILocation(line: 47, column: 8, scope: !13354)
!13367 = !DILocation(line: 47, column: 12, scope: !13354)
!13368 = !DILocation(line: 48, column: 5, scope: !13354)
!13369 = !DILocation(line: 51, column: 7, scope: !13370)
!13370 = distinct !DILexicalBlock(scope: !13350, file: !13288, line: 50, column: 5)
!13371 = !DILocation(line: 52, column: 22, scope: !13370)
!13372 = !DILocation(line: 52, column: 24, scope: !13370)
!13373 = !DILocation(line: 52, column: 20, scope: !13370)
!13374 = !DILocation(line: 52, column: 16, scope: !13370)
!13375 = !DILocation(line: 52, column: 10, scope: !13370)
!13376 = !DILocation(line: 52, column: 14, scope: !13370)
!13377 = !DILocation(line: 52, column: 9, scope: !13370)
!13378 = !DILocation(line: 53, column: 17, scope: !13370)
!13379 = !DILocation(line: 53, column: 24, scope: !13370)
!13380 = distinct !{!13380, !13369, !13381}
!13381 = !DILocation(line: 53, column: 28, scope: !13370)
!13382 = !DILocation(line: 56, column: 10, scope: !13336)
!13383 = !DILocation(line: 56, column: 3, scope: !13336)
!13384 = distinct !DISubprogram(name: "umaxtostr", scope: !13288, file: !13288, line: 36, type: !13385, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1267, retainedNodes: !433)
!13385 = !DISubroutineType(types: !13386)
!13386 = !{!7, !464, !7}
!13387 = !DILocalVariable(name: "i", arg: 1, scope: !13384, file: !13288, line: 36, type: !464)
!13388 = !DILocation(line: 36, column: 19, scope: !13384)
!13389 = !DILocalVariable(name: "buf", arg: 2, scope: !13384, file: !13288, line: 36, type: !7)
!13390 = !DILocation(line: 36, column: 28, scope: !13384)
!13391 = !DILocalVariable(name: "p", scope: !13384, file: !13288, line: 38, type: !7)
!13392 = !DILocation(line: 38, column: 9, scope: !13384)
!13393 = !DILocation(line: 38, column: 13, scope: !13384)
!13394 = !DILocation(line: 38, column: 17, scope: !13384)
!13395 = !DILocation(line: 39, column: 4, scope: !13384)
!13396 = !DILocation(line: 39, column: 6, scope: !13384)
!13397 = !DILocation(line: 41, column: 7, scope: !13398)
!13398 = distinct !DILexicalBlock(scope: !13384, file: !13288, line: 41, column: 7)
!13399 = !DILocation(line: 41, column: 9, scope: !13398)
!13400 = !DILocation(line: 41, column: 7, scope: !13384)
!13401 = !DILocation(line: 43, column: 7, scope: !13402)
!13402 = distinct !DILexicalBlock(scope: !13398, file: !13288, line: 42, column: 5)
!13403 = !DILocation(line: 44, column: 22, scope: !13402)
!13404 = !DILocation(line: 44, column: 24, scope: !13402)
!13405 = !DILocation(line: 44, column: 20, scope: !13402)
!13406 = !DILocation(line: 44, column: 16, scope: !13402)
!13407 = !DILocation(line: 44, column: 10, scope: !13402)
!13408 = !DILocation(line: 44, column: 14, scope: !13402)
!13409 = !DILocation(line: 44, column: 9, scope: !13402)
!13410 = !DILocation(line: 45, column: 17, scope: !13402)
!13411 = !DILocation(line: 45, column: 24, scope: !13402)
!13412 = distinct !{!13412, !13401, !13413}
!13413 = !DILocation(line: 45, column: 28, scope: !13402)
!13414 = !DILocation(line: 47, column: 8, scope: !13402)
!13415 = !DILocation(line: 47, column: 12, scope: !13402)
!13416 = !DILocation(line: 48, column: 5, scope: !13402)
!13417 = !DILocation(line: 51, column: 7, scope: !13418)
!13418 = distinct !DILexicalBlock(scope: !13398, file: !13288, line: 50, column: 5)
!13419 = !DILocation(line: 52, column: 22, scope: !13418)
!13420 = !DILocation(line: 52, column: 24, scope: !13418)
!13421 = !DILocation(line: 52, column: 20, scope: !13418)
!13422 = !DILocation(line: 52, column: 16, scope: !13418)
!13423 = !DILocation(line: 52, column: 10, scope: !13418)
!13424 = !DILocation(line: 52, column: 14, scope: !13418)
!13425 = !DILocation(line: 52, column: 9, scope: !13418)
!13426 = !DILocation(line: 53, column: 17, scope: !13418)
!13427 = !DILocation(line: 53, column: 24, scope: !13418)
!13428 = distinct !{!13428, !13417, !13429}
!13429 = !DILocation(line: 53, column: 28, scope: !13418)
!13430 = !DILocation(line: 56, column: 10, scope: !13384)
!13431 = !DILocation(line: 56, column: 3, scope: !13384)
!13432 = distinct !DISubprogram(name: "gnu_mbswidth", scope: !13433, file: !13433, line: 47, type: !13434, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1270, retainedNodes: !433)
!13433 = !DIFile(filename: "lib/mbswidth.c", directory: "/home/mohamad/clone/coreutils")
!13434 = !DISubroutineType(types: !13435)
!13435 = !{!5, !90, !5}
!13436 = !DILocalVariable(name: "string", arg: 1, scope: !13432, file: !13433, line: 47, type: !90)
!13437 = !DILocation(line: 47, column: 23, scope: !13432)
!13438 = !DILocalVariable(name: "flags", arg: 2, scope: !13432, file: !13433, line: 47, type: !5)
!13439 = !DILocation(line: 47, column: 35, scope: !13432)
!13440 = !DILocation(line: 49, column: 21, scope: !13432)
!13441 = !DILocation(line: 49, column: 37, scope: !13432)
!13442 = !DILocation(line: 49, column: 29, scope: !13432)
!13443 = !DILocation(line: 49, column: 46, scope: !13432)
!13444 = !DILocation(line: 49, column: 10, scope: !13432)
!13445 = !DILocation(line: 49, column: 3, scope: !13432)
!13446 = distinct !DISubprogram(name: "mbsnwidth", scope: !13433, file: !13433, line: 57, type: !13447, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1270, retainedNodes: !433)
!13447 = !DISubroutineType(types: !13448)
!13448 = !{!5, !90, !52, !5}
!13449 = !DILocalVariable(name: "string", arg: 1, scope: !13446, file: !13433, line: 57, type: !90)
!13450 = !DILocation(line: 57, column: 24, scope: !13446)
!13451 = !DILocalVariable(name: "nbytes", arg: 2, scope: !13446, file: !13433, line: 57, type: !52)
!13452 = !DILocation(line: 57, column: 39, scope: !13446)
!13453 = !DILocalVariable(name: "flags", arg: 3, scope: !13446, file: !13433, line: 57, type: !5)
!13454 = !DILocation(line: 57, column: 51, scope: !13446)
!13455 = !DILocalVariable(name: "p", scope: !13446, file: !13433, line: 59, type: !90)
!13456 = !DILocation(line: 59, column: 15, scope: !13446)
!13457 = !DILocation(line: 59, column: 19, scope: !13446)
!13458 = !DILocalVariable(name: "plimit", scope: !13446, file: !13433, line: 60, type: !90)
!13459 = !DILocation(line: 60, column: 15, scope: !13446)
!13460 = !DILocation(line: 60, column: 24, scope: !13446)
!13461 = !DILocation(line: 60, column: 28, scope: !13446)
!13462 = !DILocation(line: 60, column: 26, scope: !13446)
!13463 = !DILocalVariable(name: "width", scope: !13446, file: !13433, line: 61, type: !5)
!13464 = !DILocation(line: 61, column: 7, scope: !13446)
!13465 = !DILocation(line: 63, column: 9, scope: !13446)
!13466 = !DILocation(line: 64, column: 7, scope: !13467)
!13467 = distinct !DILexicalBlock(scope: !13446, file: !13433, line: 64, column: 7)
!13468 = !DILocation(line: 64, column: 18, scope: !13467)
!13469 = !DILocation(line: 64, column: 7, scope: !13446)
!13470 = !DILocation(line: 66, column: 7, scope: !13471)
!13471 = distinct !DILexicalBlock(scope: !13467, file: !13433, line: 65, column: 5)
!13472 = !DILocation(line: 66, column: 14, scope: !13471)
!13473 = !DILocation(line: 66, column: 18, scope: !13471)
!13474 = !DILocation(line: 66, column: 16, scope: !13471)
!13475 = !DILocation(line: 67, column: 18, scope: !13471)
!13476 = !DILocation(line: 67, column: 17, scope: !13471)
!13477 = !DILocation(line: 67, column: 9, scope: !13471)
!13478 = !DILocation(line: 90, column: 16, scope: !13479)
!13479 = distinct !DILexicalBlock(scope: !13471, file: !13433, line: 68, column: 11)
!13480 = !DILocation(line: 91, column: 20, scope: !13479)
!13481 = !DILocation(line: 92, column: 15, scope: !13479)
!13482 = !DILocalVariable(name: "mbstate", scope: !13483, file: !13433, line: 96, type: !1273)
!13483 = distinct !DILexicalBlock(scope: !13479, file: !13433, line: 95, column: 15)
!13484 = !DILocation(line: 96, column: 27, scope: !13483)
!13485 = !DILocation(line: 97, column: 17, scope: !13483)
!13486 = !DILocation(line: 98, column: 17, scope: !13483)
!13487 = !DILocalVariable(name: "wc", scope: !13488, file: !13433, line: 100, type: !1094)
!13488 = distinct !DILexicalBlock(scope: !13483, file: !13433, line: 99, column: 19)
!13489 = !DILocation(line: 100, column: 29, scope: !13488)
!13490 = !DILocalVariable(name: "bytes", scope: !13488, file: !13433, line: 101, type: !52)
!13491 = !DILocation(line: 101, column: 28, scope: !13488)
!13492 = !DILocalVariable(name: "w", scope: !13488, file: !13433, line: 102, type: !5)
!13493 = !DILocation(line: 102, column: 25, scope: !13488)
!13494 = !DILocation(line: 104, column: 43, scope: !13488)
!13495 = !DILocation(line: 104, column: 46, scope: !13488)
!13496 = !DILocation(line: 104, column: 55, scope: !13488)
!13497 = !DILocation(line: 104, column: 53, scope: !13488)
!13498 = !DILocation(line: 104, column: 29, scope: !13488)
!13499 = !DILocation(line: 104, column: 27, scope: !13488)
!13500 = !DILocation(line: 106, column: 25, scope: !13501)
!13501 = distinct !DILexicalBlock(scope: !13488, file: !13433, line: 106, column: 25)
!13502 = !DILocation(line: 106, column: 31, scope: !13501)
!13503 = !DILocation(line: 106, column: 25, scope: !13488)
!13504 = !DILocation(line: 109, column: 31, scope: !13505)
!13505 = distinct !DILexicalBlock(scope: !13506, file: !13433, line: 109, column: 29)
!13506 = distinct !DILexicalBlock(scope: !13501, file: !13433, line: 108, column: 23)
!13507 = !DILocation(line: 109, column: 37, scope: !13505)
!13508 = !DILocation(line: 109, column: 29, scope: !13506)
!13509 = !DILocation(line: 111, column: 30, scope: !13510)
!13510 = distinct !DILexicalBlock(scope: !13505, file: !13433, line: 110, column: 27)
!13511 = !DILocation(line: 112, column: 34, scope: !13510)
!13512 = !DILocation(line: 113, column: 29, scope: !13510)
!13513 = !DILocation(line: 116, column: 27, scope: !13505)
!13514 = !DILocation(line: 119, column: 25, scope: !13515)
!13515 = distinct !DILexicalBlock(scope: !13488, file: !13433, line: 119, column: 25)
!13516 = !DILocation(line: 119, column: 31, scope: !13515)
!13517 = !DILocation(line: 119, column: 25, scope: !13488)
!13518 = !DILocation(line: 122, column: 31, scope: !13519)
!13519 = distinct !DILexicalBlock(scope: !13520, file: !13433, line: 122, column: 29)
!13520 = distinct !DILexicalBlock(scope: !13515, file: !13433, line: 121, column: 23)
!13521 = !DILocation(line: 122, column: 37, scope: !13519)
!13522 = !DILocation(line: 122, column: 29, scope: !13520)
!13523 = !DILocation(line: 124, column: 33, scope: !13524)
!13524 = distinct !DILexicalBlock(scope: !13519, file: !13433, line: 123, column: 27)
!13525 = !DILocation(line: 124, column: 31, scope: !13524)
!13526 = !DILocation(line: 125, column: 34, scope: !13524)
!13527 = !DILocation(line: 126, column: 29, scope: !13524)
!13528 = !DILocation(line: 129, column: 27, scope: !13519)
!13529 = !DILocation(line: 132, column: 25, scope: !13530)
!13530 = distinct !DILexicalBlock(scope: !13488, file: !13433, line: 132, column: 25)
!13531 = !DILocation(line: 132, column: 31, scope: !13530)
!13532 = !DILocation(line: 132, column: 25, scope: !13488)
!13533 = !DILocation(line: 134, column: 29, scope: !13530)
!13534 = !DILocation(line: 134, column: 23, scope: !13530)
!13535 = !DILocation(line: 136, column: 34, scope: !13488)
!13536 = !DILocation(line: 136, column: 25, scope: !13488)
!13537 = !DILocation(line: 136, column: 23, scope: !13488)
!13538 = !DILocation(line: 137, column: 25, scope: !13539)
!13539 = distinct !DILexicalBlock(scope: !13488, file: !13433, line: 137, column: 25)
!13540 = !DILocation(line: 137, column: 27, scope: !13539)
!13541 = !DILocation(line: 137, column: 25, scope: !13488)
!13542 = !DILocation(line: 140, column: 29, scope: !13543)
!13543 = distinct !DILexicalBlock(scope: !13544, file: !13433, line: 140, column: 29)
!13544 = distinct !DILexicalBlock(scope: !13539, file: !13433, line: 139, column: 23)
!13545 = !DILocation(line: 140, column: 43, scope: !13543)
!13546 = !DILocation(line: 140, column: 41, scope: !13543)
!13547 = !DILocation(line: 140, column: 31, scope: !13543)
!13548 = !DILocation(line: 140, column: 29, scope: !13544)
!13549 = !DILocation(line: 141, column: 27, scope: !13543)
!13550 = !DILocation(line: 142, column: 34, scope: !13544)
!13551 = !DILocation(line: 142, column: 31, scope: !13544)
!13552 = !DILocation(line: 143, column: 23, scope: !13544)
!13553 = !DILocation(line: 146, column: 29, scope: !13554)
!13554 = distinct !DILexicalBlock(scope: !13539, file: !13433, line: 146, column: 27)
!13555 = !DILocation(line: 146, column: 35, scope: !13554)
!13556 = !DILocation(line: 146, column: 27, scope: !13539)
!13557 = !DILocation(line: 148, column: 42, scope: !13558)
!13558 = distinct !DILexicalBlock(scope: !13559, file: !13433, line: 148, column: 31)
!13559 = distinct !DILexicalBlock(scope: !13554, file: !13433, line: 147, column: 25)
!13560 = !DILocation(line: 148, column: 32, scope: !13558)
!13561 = !DILocation(line: 148, column: 31, scope: !13559)
!13562 = !DILocation(line: 150, column: 35, scope: !13563)
!13563 = distinct !DILexicalBlock(scope: !13564, file: !13433, line: 150, column: 35)
!13564 = distinct !DILexicalBlock(scope: !13558, file: !13433, line: 149, column: 29)
!13565 = !DILocation(line: 150, column: 41, scope: !13563)
!13566 = !DILocation(line: 150, column: 35, scope: !13564)
!13567 = !DILocation(line: 151, column: 33, scope: !13563)
!13568 = !DILocation(line: 152, column: 36, scope: !13564)
!13569 = !DILocation(line: 153, column: 29, scope: !13564)
!13570 = !DILocation(line: 154, column: 25, scope: !13559)
!13571 = !DILocation(line: 156, column: 25, scope: !13554)
!13572 = !DILocation(line: 158, column: 26, scope: !13488)
!13573 = !DILocation(line: 158, column: 23, scope: !13488)
!13574 = !DILocation(line: 159, column: 19, scope: !13488)
!13575 = !DILocation(line: 160, column: 26, scope: !13483)
!13576 = !DILocation(line: 160, column: 24, scope: !13483)
!13577 = distinct !{!13577, !13486, !13578}
!13578 = !DILocation(line: 160, column: 44, scope: !13483)
!13579 = !DILocation(line: 162, column: 15, scope: !13479)
!13580 = distinct !{!13580, !13470, !13581}
!13581 = !DILocation(line: 163, column: 11, scope: !13471)
!13582 = !DILocation(line: 164, column: 14, scope: !13471)
!13583 = !DILocation(line: 164, column: 7, scope: !13471)
!13584 = !DILocation(line: 167, column: 3, scope: !13446)
!13585 = !DILocation(line: 167, column: 10, scope: !13446)
!13586 = !DILocation(line: 167, column: 14, scope: !13446)
!13587 = !DILocation(line: 167, column: 12, scope: !13446)
!13588 = !DILocalVariable(name: "c", scope: !13589, file: !13433, line: 169, type: !535)
!13589 = distinct !DILexicalBlock(scope: !13446, file: !13433, line: 168, column: 5)
!13590 = !DILocation(line: 169, column: 21, scope: !13589)
!13591 = !DILocation(line: 169, column: 43, scope: !13589)
!13592 = !DILocation(line: 169, column: 41, scope: !13589)
!13593 = !DILocation(line: 171, column: 11, scope: !13594)
!13594 = distinct !DILexicalBlock(scope: !13589, file: !13433, line: 171, column: 11)
!13595 = !DILocation(line: 171, column: 11, scope: !13589)
!13596 = !DILocation(line: 173, column: 15, scope: !13597)
!13597 = distinct !DILexicalBlock(scope: !13598, file: !13433, line: 173, column: 15)
!13598 = distinct !DILexicalBlock(scope: !13594, file: !13433, line: 172, column: 9)
!13599 = !DILocation(line: 173, column: 21, scope: !13597)
!13600 = !DILocation(line: 173, column: 15, scope: !13598)
!13601 = !DILocation(line: 174, column: 13, scope: !13597)
!13602 = !DILocation(line: 175, column: 16, scope: !13598)
!13603 = !DILocation(line: 176, column: 9, scope: !13598)
!13604 = !DILocation(line: 177, column: 18, scope: !13605)
!13605 = distinct !DILexicalBlock(scope: !13594, file: !13433, line: 177, column: 16)
!13606 = !DILocation(line: 177, column: 24, scope: !13605)
!13607 = !DILocation(line: 177, column: 16, scope: !13594)
!13608 = !DILocation(line: 179, column: 16, scope: !13609)
!13609 = distinct !DILexicalBlock(scope: !13610, file: !13433, line: 179, column: 15)
!13610 = distinct !DILexicalBlock(scope: !13605, file: !13433, line: 178, column: 9)
!13611 = !DILocation(line: 179, column: 15, scope: !13610)
!13612 = !DILocation(line: 181, column: 19, scope: !13613)
!13613 = distinct !DILexicalBlock(scope: !13614, file: !13433, line: 181, column: 19)
!13614 = distinct !DILexicalBlock(scope: !13609, file: !13433, line: 180, column: 13)
!13615 = !DILocation(line: 181, column: 25, scope: !13613)
!13616 = !DILocation(line: 181, column: 19, scope: !13614)
!13617 = !DILocation(line: 182, column: 17, scope: !13613)
!13618 = !DILocation(line: 183, column: 20, scope: !13614)
!13619 = !DILocation(line: 184, column: 13, scope: !13614)
!13620 = !DILocation(line: 185, column: 9, scope: !13610)
!13621 = !DILocation(line: 187, column: 9, scope: !13605)
!13622 = distinct !{!13622, !13584, !13623}
!13623 = !DILocation(line: 188, column: 5, scope: !13446)
!13624 = !DILocation(line: 189, column: 10, scope: !13446)
!13625 = !DILocation(line: 189, column: 3, scope: !13446)
!13626 = !DILabel(scope: !13446, name: "overflow", file: !13433, line: 191)
!13627 = !DILocation(line: 191, column: 2, scope: !13446)
!13628 = !DILocation(line: 192, column: 3, scope: !13446)
!13629 = !DILocation(line: 193, column: 1, scope: !13446)
!13630 = distinct !DISubprogram(name: "num_processors", scope: !13631, file: !13631, line: 372, type: !13632, scopeLine: 373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1283, retainedNodes: !433)
!13631 = !DIFile(filename: "lib/nproc.c", directory: "/home/mohamad/clone/coreutils")
!13632 = !DISubroutineType(types: !13633)
!13633 = !{!54, !1286}
!13634 = !DILocalVariable(name: "query", arg: 1, scope: !13630, file: !13631, line: 372, type: !1286)
!13635 = !DILocation(line: 372, column: 34, scope: !13630)
!13636 = !DILocalVariable(name: "omp_env_limit", scope: !13630, file: !13631, line: 374, type: !54)
!13637 = !DILocation(line: 374, column: 21, scope: !13630)
!13638 = !DILocation(line: 376, column: 7, scope: !13639)
!13639 = distinct !DILexicalBlock(scope: !13630, file: !13631, line: 376, column: 7)
!13640 = !DILocation(line: 376, column: 13, scope: !13639)
!13641 = !DILocation(line: 376, column: 7, scope: !13630)
!13642 = !DILocalVariable(name: "omp_env_threads", scope: !13643, file: !13631, line: 378, type: !54)
!13643 = distinct !DILexicalBlock(scope: !13639, file: !13631, line: 377, column: 5)
!13644 = !DILocation(line: 378, column: 25, scope: !13643)
!13645 = !DILocation(line: 381, column: 44, scope: !13643)
!13646 = !DILocation(line: 381, column: 25, scope: !13643)
!13647 = !DILocation(line: 381, column: 23, scope: !13643)
!13648 = !DILocation(line: 382, column: 42, scope: !13643)
!13649 = !DILocation(line: 382, column: 23, scope: !13643)
!13650 = !DILocation(line: 382, column: 21, scope: !13643)
!13651 = !DILocation(line: 383, column: 13, scope: !13652)
!13652 = distinct !DILexicalBlock(scope: !13643, file: !13631, line: 383, column: 11)
!13653 = !DILocation(line: 383, column: 11, scope: !13643)
!13654 = !DILocation(line: 384, column: 23, scope: !13652)
!13655 = !DILocation(line: 384, column: 9, scope: !13652)
!13656 = !DILocation(line: 386, column: 11, scope: !13657)
!13657 = distinct !DILexicalBlock(scope: !13643, file: !13631, line: 386, column: 11)
!13658 = !DILocation(line: 386, column: 11, scope: !13643)
!13659 = !DILocation(line: 387, column: 16, scope: !13657)
!13660 = !DILocation(line: 387, column: 9, scope: !13657)
!13661 = !DILocation(line: 389, column: 13, scope: !13643)
!13662 = !DILocation(line: 390, column: 5, scope: !13643)
!13663 = !DILocalVariable(name: "nprocs", scope: !13664, file: !13631, line: 393, type: !54)
!13664 = distinct !DILexicalBlock(scope: !13630, file: !13631, line: 392, column: 3)
!13665 = !DILocation(line: 393, column: 19, scope: !13664)
!13666 = !DILocation(line: 393, column: 57, scope: !13664)
!13667 = !DILocation(line: 393, column: 28, scope: !13664)
!13668 = !DILocation(line: 394, column: 12, scope: !13664)
!13669 = !DILocation(line: 394, column: 5, scope: !13664)
!13670 = !DILocation(line: 396, column: 1, scope: !13630)
!13671 = distinct !DISubprogram(name: "parse_omp_threads", scope: !13631, file: !13631, line: 337, type: !13672, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1283, retainedNodes: !433)
!13672 = !DISubroutineType(types: !13673)
!13673 = !{!54, !90}
!13674 = !DILocalVariable(name: "threads", arg: 1, scope: !13671, file: !13631, line: 337, type: !90)
!13675 = !DILocation(line: 337, column: 32, scope: !13671)
!13676 = !DILocalVariable(name: "ret", scope: !13671, file: !13631, line: 339, type: !54)
!13677 = !DILocation(line: 339, column: 21, scope: !13671)
!13678 = !DILocation(line: 341, column: 7, scope: !13679)
!13679 = distinct !DILexicalBlock(scope: !13671, file: !13631, line: 341, column: 7)
!13680 = !DILocation(line: 341, column: 15, scope: !13679)
!13681 = !DILocation(line: 341, column: 7, scope: !13671)
!13682 = !DILocation(line: 342, column: 12, scope: !13679)
!13683 = !DILocation(line: 342, column: 5, scope: !13679)
!13684 = !DILocation(line: 346, column: 3, scope: !13671)
!13685 = !DILocation(line: 346, column: 11, scope: !13671)
!13686 = !DILocation(line: 346, column: 10, scope: !13671)
!13687 = !DILocation(line: 346, column: 19, scope: !13671)
!13688 = !DILocation(line: 346, column: 27, scope: !13671)
!13689 = !DILocation(line: 346, column: 42, scope: !13671)
!13690 = !DILocation(line: 346, column: 41, scope: !13671)
!13691 = !DILocation(line: 346, column: 30, scope: !13671)
!13692 = !DILocation(line: 0, scope: !13671)
!13693 = !DILocation(line: 347, column: 12, scope: !13671)
!13694 = distinct !{!13694, !13684, !13693}
!13695 = !DILocation(line: 350, column: 19, scope: !13696)
!13696 = distinct !DILexicalBlock(scope: !13671, file: !13631, line: 350, column: 7)
!13697 = !DILocation(line: 350, column: 18, scope: !13696)
!13698 = !DILocation(line: 350, column: 7, scope: !13696)
!13699 = !DILocation(line: 350, column: 7, scope: !13671)
!13700 = !DILocalVariable(name: "endptr", scope: !13701, file: !13631, line: 352, type: !7)
!13701 = distinct !DILexicalBlock(scope: !13696, file: !13631, line: 351, column: 5)
!13702 = !DILocation(line: 352, column: 13, scope: !13701)
!13703 = !DILocalVariable(name: "value", scope: !13701, file: !13631, line: 353, type: !54)
!13704 = !DILocation(line: 353, column: 25, scope: !13701)
!13705 = !DILocation(line: 353, column: 42, scope: !13701)
!13706 = !DILocation(line: 353, column: 33, scope: !13701)
!13707 = !DILocation(line: 355, column: 11, scope: !13708)
!13708 = distinct !DILexicalBlock(scope: !13701, file: !13631, line: 355, column: 11)
!13709 = !DILocation(line: 355, column: 18, scope: !13708)
!13710 = !DILocation(line: 355, column: 11, scope: !13701)
!13711 = !DILocation(line: 357, column: 11, scope: !13712)
!13712 = distinct !DILexicalBlock(scope: !13708, file: !13631, line: 356, column: 9)
!13713 = !DILocation(line: 357, column: 19, scope: !13712)
!13714 = !DILocation(line: 357, column: 18, scope: !13712)
!13715 = !DILocation(line: 357, column: 26, scope: !13712)
!13716 = !DILocation(line: 357, column: 34, scope: !13712)
!13717 = !DILocation(line: 357, column: 49, scope: !13712)
!13718 = !DILocation(line: 357, column: 48, scope: !13712)
!13719 = !DILocation(line: 357, column: 37, scope: !13712)
!13720 = !DILocation(line: 0, scope: !13712)
!13721 = !DILocation(line: 358, column: 19, scope: !13712)
!13722 = distinct !{!13722, !13711, !13721}
!13723 = !DILocation(line: 359, column: 16, scope: !13724)
!13724 = distinct !DILexicalBlock(scope: !13712, file: !13631, line: 359, column: 15)
!13725 = !DILocation(line: 359, column: 15, scope: !13724)
!13726 = !DILocation(line: 359, column: 23, scope: !13724)
!13727 = !DILocation(line: 359, column: 15, scope: !13712)
!13728 = !DILocation(line: 360, column: 20, scope: !13724)
!13729 = !DILocation(line: 360, column: 13, scope: !13724)
!13730 = !DILocation(line: 363, column: 21, scope: !13731)
!13731 = distinct !DILexicalBlock(scope: !13724, file: !13631, line: 363, column: 20)
!13732 = !DILocation(line: 363, column: 20, scope: !13731)
!13733 = !DILocation(line: 363, column: 28, scope: !13731)
!13734 = !DILocation(line: 363, column: 20, scope: !13724)
!13735 = !DILocation(line: 364, column: 20, scope: !13731)
!13736 = !DILocation(line: 364, column: 13, scope: !13731)
!13737 = !DILocation(line: 365, column: 9, scope: !13712)
!13738 = !DILocation(line: 366, column: 5, scope: !13701)
!13739 = !DILocation(line: 368, column: 10, scope: !13671)
!13740 = !DILocation(line: 368, column: 3, scope: !13671)
!13741 = !DILocation(line: 369, column: 1, scope: !13671)
!13742 = distinct !DISubprogram(name: "num_processors_ignoring_omp", scope: !13631, file: !13631, line: 206, type: !13632, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1283, retainedNodes: !433)
!13743 = !DILocalVariable(name: "query", arg: 1, scope: !13742, file: !13631, line: 206, type: !1286)
!13744 = !DILocation(line: 206, column: 47, scope: !13742)
!13745 = !DILocation(line: 223, column: 7, scope: !13746)
!13746 = distinct !DILexicalBlock(scope: !13742, file: !13631, line: 223, column: 7)
!13747 = !DILocation(line: 223, column: 13, scope: !13746)
!13748 = !DILocation(line: 223, column: 7, scope: !13742)
!13749 = !DILocalVariable(name: "nprocs", scope: !13750, file: !13631, line: 227, type: !54)
!13750 = distinct !DILexicalBlock(scope: !13751, file: !13631, line: 226, column: 7)
!13751 = distinct !DILexicalBlock(scope: !13746, file: !13631, line: 224, column: 5)
!13752 = !DILocation(line: 227, column: 23, scope: !13750)
!13753 = !DILocation(line: 227, column: 32, scope: !13750)
!13754 = !DILocation(line: 229, column: 13, scope: !13755)
!13755 = distinct !DILexicalBlock(scope: !13750, file: !13631, line: 229, column: 13)
!13756 = !DILocation(line: 229, column: 20, scope: !13755)
!13757 = !DILocation(line: 229, column: 13, scope: !13750)
!13758 = !DILocation(line: 230, column: 18, scope: !13755)
!13759 = !DILocation(line: 230, column: 11, scope: !13755)
!13760 = !DILocalVariable(name: "nprocs", scope: !13761, file: !13631, line: 236, type: !32)
!13761 = distinct !DILexicalBlock(scope: !13751, file: !13631, line: 234, column: 7)
!13762 = !DILocation(line: 236, column: 18, scope: !13761)
!13763 = !DILocation(line: 236, column: 27, scope: !13761)
!13764 = !DILocation(line: 237, column: 13, scope: !13765)
!13765 = distinct !DILexicalBlock(scope: !13761, file: !13631, line: 237, column: 13)
!13766 = !DILocation(line: 237, column: 20, scope: !13765)
!13767 = !DILocation(line: 237, column: 13, scope: !13761)
!13768 = !DILocation(line: 238, column: 18, scope: !13765)
!13769 = !DILocation(line: 238, column: 11, scope: !13765)
!13770 = !DILocation(line: 241, column: 5, scope: !13751)
!13771 = !DILocalVariable(name: "nprocs", scope: !13772, file: !13631, line: 247, type: !32)
!13772 = distinct !DILexicalBlock(scope: !13773, file: !13631, line: 245, column: 7)
!13773 = distinct !DILexicalBlock(scope: !13746, file: !13631, line: 243, column: 5)
!13774 = !DILocation(line: 247, column: 18, scope: !13772)
!13775 = !DILocation(line: 247, column: 27, scope: !13772)
!13776 = !DILocation(line: 255, column: 13, scope: !13777)
!13777 = distinct !DILexicalBlock(scope: !13772, file: !13631, line: 255, column: 13)
!13778 = !DILocation(line: 255, column: 20, scope: !13777)
!13779 = !DILocation(line: 255, column: 25, scope: !13777)
!13780 = !DILocation(line: 255, column: 28, scope: !13777)
!13781 = !DILocation(line: 255, column: 35, scope: !13777)
!13782 = !DILocation(line: 255, column: 13, scope: !13772)
!13783 = !DILocalVariable(name: "nprocs_current", scope: !13784, file: !13631, line: 257, type: !54)
!13784 = distinct !DILexicalBlock(scope: !13777, file: !13631, line: 256, column: 11)
!13785 = !DILocation(line: 257, column: 27, scope: !13784)
!13786 = !DILocation(line: 257, column: 44, scope: !13784)
!13787 = !DILocation(line: 259, column: 45, scope: !13788)
!13788 = distinct !DILexicalBlock(scope: !13784, file: !13631, line: 259, column: 45)
!13789 = !DILocation(line: 259, column: 62, scope: !13788)
!13790 = !DILocation(line: 259, column: 60, scope: !13788)
!13791 = !DILocation(line: 259, column: 45, scope: !13784)
!13792 = !DILocation(line: 260, column: 24, scope: !13788)
!13793 = !DILocation(line: 260, column: 22, scope: !13788)
!13794 = !DILocation(line: 260, column: 15, scope: !13788)
!13795 = !DILocation(line: 261, column: 11, scope: !13784)
!13796 = !DILocation(line: 264, column: 13, scope: !13797)
!13797 = distinct !DILexicalBlock(scope: !13772, file: !13631, line: 264, column: 13)
!13798 = !DILocation(line: 264, column: 20, scope: !13797)
!13799 = !DILocation(line: 264, column: 13, scope: !13772)
!13800 = !DILocation(line: 265, column: 18, scope: !13797)
!13801 = !DILocation(line: 265, column: 11, scope: !13797)
!13802 = !DILocation(line: 331, column: 3, scope: !13742)
!13803 = !DILocation(line: 332, column: 1, scope: !13742)
!13804 = distinct !DISubprogram(name: "num_processors_via_affinity_mask", scope: !13631, file: !13631, line: 69, type: !13805, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1283, retainedNodes: !433)
!13805 = !DISubroutineType(types: !13806)
!13806 = !{!54}
!13807 = !DILocalVariable(name: "set", scope: !13808, file: !13631, line: 129, type: !1293)
!13808 = distinct !DILexicalBlock(scope: !13804, file: !13631, line: 128, column: 3)
!13809 = !DILocation(line: 129, column: 15, scope: !13808)
!13810 = !DILocation(line: 131, column: 9, scope: !13811)
!13811 = distinct !DILexicalBlock(scope: !13808, file: !13631, line: 131, column: 9)
!13812 = !DILocation(line: 131, column: 51, scope: !13811)
!13813 = !DILocation(line: 131, column: 9, scope: !13808)
!13814 = !DILocalVariable(name: "count", scope: !13815, file: !13631, line: 133, type: !54)
!13815 = distinct !DILexicalBlock(scope: !13811, file: !13631, line: 132, column: 7)
!13816 = !DILocation(line: 133, column: 23, scope: !13815)
!13817 = !DILocation(line: 137, column: 17, scope: !13815)
!13818 = !DILocation(line: 137, column: 15, scope: !13815)
!13819 = !DILocation(line: 146, column: 13, scope: !13820)
!13820 = distinct !DILexicalBlock(scope: !13815, file: !13631, line: 146, column: 13)
!13821 = !DILocation(line: 146, column: 19, scope: !13820)
!13822 = !DILocation(line: 146, column: 13, scope: !13815)
!13823 = !DILocation(line: 147, column: 18, scope: !13820)
!13824 = !DILocation(line: 147, column: 11, scope: !13820)
!13825 = !DILocation(line: 148, column: 7, scope: !13815)
!13826 = !DILocation(line: 199, column: 3, scope: !13804)
!13827 = !DILocation(line: 200, column: 1, scope: !13804)
!13828 = distinct !DISubprogram(name: "physmem_total", scope: !13829, file: !13829, line: 92, type: !13830, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1300, retainedNodes: !433)
!13829 = !DIFile(filename: "lib/physmem.c", directory: "/home/mohamad/clone/coreutils")
!13830 = !DISubroutineType(types: !13831)
!13831 = !{!480}
!13832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sysinfo", file: !13833, line: 7, size: 896, elements: !13834)
!13833 = !DIFile(filename: "/usr/include/linux/sysinfo.h", directory: "")
!13834 = !{!13835, !13837, !13839, !13840, !13841, !13842, !13843, !13844, !13845, !13847, !13848, !13849, !13850, !13851}
!13835 = !DIDerivedType(tag: DW_TAG_member, name: "uptime", scope: !13832, file: !13833, line: 8, baseType: !13836, size: 64)
!13836 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_long_t", file: !1304, line: 14, baseType: !32)
!13837 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !13832, file: !13833, line: 9, baseType: !13838, size: 192, offset: 64)
!13838 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1303, size: 192, elements: !351)
!13839 = !DIDerivedType(tag: DW_TAG_member, name: "totalram", scope: !13832, file: !13833, line: 10, baseType: !1303, size: 64, offset: 256)
!13840 = !DIDerivedType(tag: DW_TAG_member, name: "freeram", scope: !13832, file: !13833, line: 11, baseType: !1303, size: 64, offset: 320)
!13841 = !DIDerivedType(tag: DW_TAG_member, name: "sharedram", scope: !13832, file: !13833, line: 12, baseType: !1303, size: 64, offset: 384)
!13842 = !DIDerivedType(tag: DW_TAG_member, name: "bufferram", scope: !13832, file: !13833, line: 13, baseType: !1303, size: 64, offset: 448)
!13843 = !DIDerivedType(tag: DW_TAG_member, name: "totalswap", scope: !13832, file: !13833, line: 14, baseType: !1303, size: 64, offset: 512)
!13844 = !DIDerivedType(tag: DW_TAG_member, name: "freeswap", scope: !13832, file: !13833, line: 15, baseType: !1303, size: 64, offset: 576)
!13845 = !DIDerivedType(tag: DW_TAG_member, name: "procs", scope: !13832, file: !13833, line: 16, baseType: !13846, size: 16, offset: 640)
!13846 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u16", file: !1306, line: 23, baseType: !34)
!13847 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !13832, file: !13833, line: 17, baseType: !13846, size: 16, offset: 656)
!13848 = !DIDerivedType(tag: DW_TAG_member, name: "totalhigh", scope: !13832, file: !13833, line: 18, baseType: !1303, size: 64, offset: 704)
!13849 = !DIDerivedType(tag: DW_TAG_member, name: "freehigh", scope: !13832, file: !13833, line: 19, baseType: !1303, size: 64, offset: 768)
!13850 = !DIDerivedType(tag: DW_TAG_member, name: "mem_unit", scope: !13832, file: !13833, line: 20, baseType: !1305, size: 32, offset: 832)
!13851 = !DIDerivedType(tag: DW_TAG_member, name: "_f", scope: !13832, file: !13833, line: 21, baseType: !13852, offset: 864)
!13852 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, elements: !13853)
!13853 = !{!13854}
!13854 = !DISubrange(count: 0)
!13855 = !DILocalVariable(name: "pages", scope: !13856, file: !13829, line: 96, type: !480)
!13856 = distinct !DILexicalBlock(scope: !13828, file: !13829, line: 95, column: 3)
!13857 = !DILocation(line: 96, column: 12, scope: !13856)
!13858 = !DILocation(line: 96, column: 20, scope: !13856)
!13859 = !DILocalVariable(name: "pagesize", scope: !13856, file: !13829, line: 97, type: !480)
!13860 = !DILocation(line: 97, column: 12, scope: !13856)
!13861 = !DILocation(line: 97, column: 23, scope: !13856)
!13862 = !DILocation(line: 98, column: 14, scope: !13863)
!13863 = distinct !DILexicalBlock(scope: !13856, file: !13829, line: 98, column: 9)
!13864 = !DILocation(line: 98, column: 11, scope: !13863)
!13865 = !DILocation(line: 98, column: 20, scope: !13863)
!13866 = !DILocation(line: 98, column: 28, scope: !13863)
!13867 = !DILocation(line: 98, column: 25, scope: !13863)
!13868 = !DILocation(line: 98, column: 9, scope: !13856)
!13869 = !DILocation(line: 99, column: 14, scope: !13863)
!13870 = !DILocation(line: 99, column: 22, scope: !13863)
!13871 = !DILocation(line: 99, column: 20, scope: !13863)
!13872 = !DILocation(line: 99, column: 7, scope: !13863)
!13873 = !DILocalVariable(name: "si", scope: !13874, file: !13829, line: 105, type: !13832)
!13874 = distinct !DILexicalBlock(scope: !13828, file: !13829, line: 104, column: 3)
!13875 = !DILocation(line: 105, column: 20, scope: !13874)
!13876 = !DILocation(line: 106, column: 9, scope: !13877)
!13877 = distinct !DILexicalBlock(scope: !13874, file: !13829, line: 106, column: 9)
!13878 = !DILocation(line: 106, column: 22, scope: !13877)
!13879 = !DILocation(line: 106, column: 9, scope: !13874)
!13880 = !DILocation(line: 107, column: 26, scope: !13877)
!13881 = !DILocation(line: 107, column: 14, scope: !13877)
!13882 = !DILocation(line: 107, column: 40, scope: !13877)
!13883 = !DILocation(line: 107, column: 37, scope: !13877)
!13884 = !DILocation(line: 107, column: 35, scope: !13877)
!13885 = !DILocation(line: 107, column: 7, scope: !13877)
!13886 = !DILocation(line: 199, column: 3, scope: !13828)
!13887 = !DILocation(line: 200, column: 1, scope: !13828)
!13888 = distinct !DISubprogram(name: "physmem_available", scope: !13829, file: !13829, line: 204, type: !13830, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1300, retainedNodes: !433)
!13889 = !DILocalVariable(name: "pages", scope: !13890, file: !13829, line: 208, type: !480)
!13890 = distinct !DILexicalBlock(scope: !13888, file: !13829, line: 207, column: 3)
!13891 = !DILocation(line: 208, column: 12, scope: !13890)
!13892 = !DILocation(line: 208, column: 20, scope: !13890)
!13893 = !DILocalVariable(name: "pagesize", scope: !13890, file: !13829, line: 209, type: !480)
!13894 = !DILocation(line: 209, column: 12, scope: !13890)
!13895 = !DILocation(line: 209, column: 23, scope: !13890)
!13896 = !DILocation(line: 210, column: 14, scope: !13897)
!13897 = distinct !DILexicalBlock(scope: !13890, file: !13829, line: 210, column: 9)
!13898 = !DILocation(line: 210, column: 11, scope: !13897)
!13899 = !DILocation(line: 210, column: 20, scope: !13897)
!13900 = !DILocation(line: 210, column: 28, scope: !13897)
!13901 = !DILocation(line: 210, column: 25, scope: !13897)
!13902 = !DILocation(line: 210, column: 9, scope: !13890)
!13903 = !DILocation(line: 211, column: 14, scope: !13897)
!13904 = !DILocation(line: 211, column: 22, scope: !13897)
!13905 = !DILocation(line: 211, column: 20, scope: !13897)
!13906 = !DILocation(line: 211, column: 7, scope: !13897)
!13907 = !DILocalVariable(name: "si", scope: !13908, file: !13829, line: 217, type: !13832)
!13908 = distinct !DILexicalBlock(scope: !13888, file: !13829, line: 216, column: 3)
!13909 = !DILocation(line: 217, column: 20, scope: !13908)
!13910 = !DILocation(line: 218, column: 9, scope: !13911)
!13911 = distinct !DILexicalBlock(scope: !13908, file: !13829, line: 218, column: 9)
!13912 = !DILocation(line: 218, column: 22, scope: !13911)
!13913 = !DILocation(line: 218, column: 9, scope: !13908)
!13914 = !DILocation(line: 219, column: 27, scope: !13911)
!13915 = !DILocation(line: 219, column: 15, scope: !13911)
!13916 = !DILocation(line: 219, column: 40, scope: !13911)
!13917 = !DILocation(line: 219, column: 37, scope: !13911)
!13918 = !DILocation(line: 219, column: 35, scope: !13911)
!13919 = !DILocation(line: 219, column: 56, scope: !13911)
!13920 = !DILocation(line: 219, column: 53, scope: !13911)
!13921 = !DILocation(line: 219, column: 51, scope: !13911)
!13922 = !DILocation(line: 219, column: 7, scope: !13911)
!13923 = !DILocation(line: 308, column: 10, scope: !13888)
!13924 = !DILocation(line: 308, column: 27, scope: !13888)
!13925 = !DILocation(line: 308, column: 3, scope: !13888)
!13926 = !DILocation(line: 309, column: 1, scope: !13888)
!13927 = !DILocalVariable(name: "fd", arg: 1, scope: !988, file: !989, line: 40, type: !325)
!13928 = !DILocation(line: 40, column: 12, scope: !988)
!13929 = !DILocalVariable(name: "flags", arg: 2, scope: !988, file: !989, line: 40, type: !5)
!13930 = !DILocation(line: 40, column: 23, scope: !988)
!13931 = !DILocalVariable(name: "tmp", scope: !988, file: !989, line: 45, type: !585)
!13932 = !DILocation(line: 45, column: 7, scope: !988)
!13933 = !DILocation(line: 46, column: 12, scope: !988)
!13934 = !DILocation(line: 46, column: 3, scope: !988)
!13935 = !DILocation(line: 46, column: 10, scope: !988)
!13936 = !DILocation(line: 47, column: 12, scope: !988)
!13937 = !DILocation(line: 47, column: 3, scope: !988)
!13938 = !DILocation(line: 47, column: 10, scope: !988)
!13939 = !DILocation(line: 56, column: 9, scope: !13940)
!13940 = distinct !DILexicalBlock(scope: !13941, file: !989, line: 56, column: 9)
!13941 = distinct !DILexicalBlock(scope: !988, file: !989, line: 53, column: 3)
!13942 = !DILocation(line: 56, column: 27, scope: !13940)
!13943 = !DILocation(line: 56, column: 9, scope: !13941)
!13944 = !DILocalVariable(name: "result", scope: !13945, file: !989, line: 58, type: !5)
!13945 = distinct !DILexicalBlock(scope: !13940, file: !989, line: 57, column: 7)
!13946 = !DILocation(line: 58, column: 13, scope: !13945)
!13947 = !DILocation(line: 58, column: 29, scope: !13945)
!13948 = !DILocation(line: 58, column: 33, scope: !13945)
!13949 = !DILocation(line: 58, column: 22, scope: !13945)
!13950 = !DILocation(line: 59, column: 15, scope: !13951)
!13951 = distinct !DILexicalBlock(scope: !13945, file: !989, line: 59, column: 13)
!13952 = !DILocation(line: 59, column: 22, scope: !13951)
!13953 = !DILocation(line: 59, column: 26, scope: !13951)
!13954 = !DILocation(line: 59, column: 29, scope: !13951)
!13955 = !DILocation(line: 59, column: 35, scope: !13951)
!13956 = !DILocation(line: 59, column: 13, scope: !13945)
!13957 = !DILocation(line: 61, column: 31, scope: !13958)
!13958 = distinct !DILexicalBlock(scope: !13951, file: !989, line: 60, column: 11)
!13959 = !DILocation(line: 62, column: 20, scope: !13958)
!13960 = !DILocation(line: 62, column: 13, scope: !13958)
!13961 = !DILocation(line: 64, column: 27, scope: !13945)
!13962 = !DILocation(line: 65, column: 7, scope: !13945)
!13963 = !DILocation(line: 70, column: 8, scope: !13964)
!13964 = distinct !DILexicalBlock(scope: !988, file: !989, line: 70, column: 7)
!13965 = !DILocation(line: 70, column: 14, scope: !13964)
!13966 = !DILocation(line: 70, column: 63, scope: !13964)
!13967 = !DILocation(line: 70, column: 7, scope: !988)
!13968 = !DILocation(line: 72, column: 7, scope: !13969)
!13969 = distinct !DILexicalBlock(scope: !13964, file: !989, line: 71, column: 5)
!13970 = !DILocation(line: 72, column: 13, scope: !13969)
!13971 = !DILocation(line: 73, column: 7, scope: !13969)
!13972 = !DILocation(line: 107, column: 13, scope: !13973)
!13973 = distinct !DILexicalBlock(scope: !988, file: !989, line: 107, column: 7)
!13974 = !DILocation(line: 107, column: 7, scope: !13973)
!13975 = !DILocation(line: 107, column: 17, scope: !13973)
!13976 = !DILocation(line: 107, column: 7, scope: !988)
!13977 = !DILocation(line: 108, column: 5, scope: !13973)
!13978 = !DILocation(line: 116, column: 7, scope: !13979)
!13979 = distinct !DILexicalBlock(scope: !988, file: !989, line: 116, column: 7)
!13980 = !DILocation(line: 116, column: 13, scope: !13979)
!13981 = !DILocation(line: 116, column: 7, scope: !988)
!13982 = !DILocalVariable(name: "fcntl_flags", scope: !13983, file: !989, line: 118, type: !5)
!13983 = distinct !DILexicalBlock(scope: !13979, file: !989, line: 117, column: 5)
!13984 = !DILocation(line: 118, column: 11, scope: !13983)
!13985 = !DILocation(line: 120, column: 33, scope: !13986)
!13986 = distinct !DILexicalBlock(scope: !13983, file: !989, line: 120, column: 11)
!13987 = !DILocation(line: 120, column: 26, scope: !13986)
!13988 = !DILocation(line: 120, column: 24, scope: !13986)
!13989 = !DILocation(line: 120, column: 53, scope: !13986)
!13990 = !DILocation(line: 121, column: 11, scope: !13986)
!13991 = !DILocation(line: 121, column: 21, scope: !13986)
!13992 = !DILocation(line: 121, column: 37, scope: !13986)
!13993 = !DILocation(line: 121, column: 49, scope: !13986)
!13994 = !DILocation(line: 121, column: 14, scope: !13986)
!13995 = !DILocation(line: 121, column: 63, scope: !13986)
!13996 = !DILocation(line: 122, column: 11, scope: !13986)
!13997 = !DILocation(line: 122, column: 36, scope: !13986)
!13998 = !DILocation(line: 122, column: 29, scope: !13986)
!13999 = !DILocation(line: 122, column: 27, scope: !13986)
!14000 = !DILocation(line: 122, column: 56, scope: !13986)
!14001 = !DILocation(line: 123, column: 11, scope: !13986)
!14002 = !DILocation(line: 123, column: 21, scope: !13986)
!14003 = !DILocation(line: 123, column: 37, scope: !13986)
!14004 = !DILocation(line: 123, column: 49, scope: !13986)
!14005 = !DILocation(line: 123, column: 14, scope: !13986)
!14006 = !DILocation(line: 123, column: 63, scope: !13986)
!14007 = !DILocation(line: 120, column: 11, scope: !13983)
!14008 = !DILocation(line: 124, column: 9, scope: !13986)
!14009 = !DILocation(line: 125, column: 5, scope: !13983)
!14010 = !DILocation(line: 127, column: 7, scope: !14011)
!14011 = distinct !DILexicalBlock(scope: !988, file: !989, line: 127, column: 7)
!14012 = !DILocation(line: 127, column: 13, scope: !14011)
!14013 = !DILocation(line: 127, column: 7, scope: !988)
!14014 = !DILocalVariable(name: "fcntl_flags", scope: !14015, file: !989, line: 129, type: !5)
!14015 = distinct !DILexicalBlock(scope: !14011, file: !989, line: 128, column: 5)
!14016 = !DILocation(line: 129, column: 11, scope: !14015)
!14017 = !DILocation(line: 131, column: 33, scope: !14018)
!14018 = distinct !DILexicalBlock(scope: !14015, file: !989, line: 131, column: 11)
!14019 = !DILocation(line: 131, column: 26, scope: !14018)
!14020 = !DILocation(line: 131, column: 24, scope: !14018)
!14021 = !DILocation(line: 131, column: 53, scope: !14018)
!14022 = !DILocation(line: 132, column: 11, scope: !14018)
!14023 = !DILocation(line: 132, column: 21, scope: !14018)
!14024 = !DILocation(line: 132, column: 37, scope: !14018)
!14025 = !DILocation(line: 132, column: 49, scope: !14018)
!14026 = !DILocation(line: 132, column: 14, scope: !14018)
!14027 = !DILocation(line: 132, column: 63, scope: !14018)
!14028 = !DILocation(line: 133, column: 11, scope: !14018)
!14029 = !DILocation(line: 133, column: 36, scope: !14018)
!14030 = !DILocation(line: 133, column: 29, scope: !14018)
!14031 = !DILocation(line: 133, column: 27, scope: !14018)
!14032 = !DILocation(line: 133, column: 56, scope: !14018)
!14033 = !DILocation(line: 134, column: 11, scope: !14018)
!14034 = !DILocation(line: 134, column: 21, scope: !14018)
!14035 = !DILocation(line: 134, column: 37, scope: !14018)
!14036 = !DILocation(line: 134, column: 49, scope: !14018)
!14037 = !DILocation(line: 134, column: 14, scope: !14018)
!14038 = !DILocation(line: 134, column: 63, scope: !14018)
!14039 = !DILocation(line: 131, column: 11, scope: !14015)
!14040 = !DILocation(line: 135, column: 9, scope: !14018)
!14041 = !DILocation(line: 136, column: 5, scope: !14015)
!14042 = !DILocation(line: 151, column: 3, scope: !988)
!14043 = !DILabel(scope: !988, name: "fail", file: !989, line: 156)
!14044 = !DILocation(line: 156, column: 2, scope: !988)
!14045 = !DILocalVariable(name: "saved_errno", scope: !14046, file: !989, line: 158, type: !5)
!14046 = distinct !DILexicalBlock(scope: !988, file: !989, line: 157, column: 3)
!14047 = !DILocation(line: 158, column: 9, scope: !14046)
!14048 = !DILocation(line: 158, column: 23, scope: !14046)
!14049 = !DILocation(line: 159, column: 12, scope: !14046)
!14050 = !DILocation(line: 159, column: 5, scope: !14046)
!14051 = !DILocation(line: 160, column: 12, scope: !14046)
!14052 = !DILocation(line: 160, column: 5, scope: !14046)
!14053 = !DILocation(line: 161, column: 13, scope: !14046)
!14054 = !DILocation(line: 161, column: 5, scope: !14046)
!14055 = !DILocation(line: 161, column: 11, scope: !14046)
!14056 = !DILocation(line: 162, column: 13, scope: !14046)
!14057 = !DILocation(line: 162, column: 5, scope: !14046)
!14058 = !DILocation(line: 162, column: 11, scope: !14046)
!14059 = !DILocation(line: 163, column: 13, scope: !14046)
!14060 = !DILocation(line: 163, column: 5, scope: !14046)
!14061 = !DILocation(line: 163, column: 11, scope: !14046)
!14062 = !DILocation(line: 164, column: 5, scope: !14046)
!14063 = !DILocation(line: 167, column: 1, scope: !988)
!14064 = distinct !DISubprogram(name: "posix2_version", scope: !14065, file: !14065, line: 40, type: !14066, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1307, retainedNodes: !433)
!14065 = !DIFile(filename: "lib/posixver.c", directory: "/home/mohamad/clone/coreutils")
!14066 = !DISubroutineType(types: !1450)
!14067 = !DILocalVariable(name: "v", scope: !14064, file: !14065, line: 42, type: !32)
!14068 = !DILocation(line: 42, column: 12, scope: !14064)
!14069 = !DILocalVariable(name: "s", scope: !14064, file: !14065, line: 43, type: !90)
!14070 = !DILocation(line: 43, column: 15, scope: !14064)
!14071 = !DILocation(line: 43, column: 19, scope: !14064)
!14072 = !DILocation(line: 45, column: 7, scope: !14073)
!14073 = distinct !DILexicalBlock(scope: !14064, file: !14065, line: 45, column: 7)
!14074 = !DILocation(line: 45, column: 9, scope: !14073)
!14075 = !DILocation(line: 45, column: 13, scope: !14073)
!14076 = !DILocation(line: 45, column: 12, scope: !14073)
!14077 = !DILocation(line: 45, column: 7, scope: !14064)
!14078 = !DILocalVariable(name: "e", scope: !14079, file: !14065, line: 47, type: !7)
!14079 = distinct !DILexicalBlock(scope: !14073, file: !14065, line: 46, column: 5)
!14080 = !DILocation(line: 47, column: 13, scope: !14079)
!14081 = !DILocalVariable(name: "i", scope: !14079, file: !14065, line: 48, type: !32)
!14082 = !DILocation(line: 48, column: 16, scope: !14079)
!14083 = !DILocation(line: 48, column: 28, scope: !14079)
!14084 = !DILocation(line: 48, column: 20, scope: !14079)
!14085 = !DILocation(line: 49, column: 14, scope: !14086)
!14086 = distinct !DILexicalBlock(scope: !14079, file: !14065, line: 49, column: 11)
!14087 = !DILocation(line: 49, column: 13, scope: !14086)
!14088 = !DILocation(line: 49, column: 11, scope: !14079)
!14089 = !DILocation(line: 50, column: 13, scope: !14086)
!14090 = !DILocation(line: 50, column: 11, scope: !14086)
!14091 = !DILocation(line: 50, column: 9, scope: !14086)
!14092 = !DILocation(line: 51, column: 5, scope: !14079)
!14093 = !DILocation(line: 53, column: 10, scope: !14064)
!14094 = !DILocation(line: 53, column: 12, scope: !14064)
!14095 = !DILocation(line: 53, column: 34, scope: !14064)
!14096 = !DILocation(line: 53, column: 36, scope: !14064)
!14097 = !DILocation(line: 53, column: 48, scope: !14064)
!14098 = !DILocation(line: 53, column: 3, scope: !14064)
!14099 = distinct !DISubprogram(name: "set_program_name", scope: !1040, file: !1040, line: 39, type: !431, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !998, retainedNodes: !433)
!14100 = !DILocalVariable(name: "argv0", arg: 1, scope: !14099, file: !1040, line: 39, type: !90)
!14101 = !DILocation(line: 39, column: 31, scope: !14099)
!14102 = !DILocalVariable(name: "slash", scope: !14099, file: !1040, line: 46, type: !90)
!14103 = !DILocation(line: 46, column: 15, scope: !14099)
!14104 = !DILocalVariable(name: "base", scope: !14099, file: !1040, line: 47, type: !90)
!14105 = !DILocation(line: 47, column: 15, scope: !14099)
!14106 = !DILocation(line: 51, column: 7, scope: !14107)
!14107 = distinct !DILexicalBlock(scope: !14099, file: !1040, line: 51, column: 7)
!14108 = !DILocation(line: 51, column: 13, scope: !14107)
!14109 = !DILocation(line: 51, column: 7, scope: !14099)
!14110 = !DILocation(line: 55, column: 14, scope: !14111)
!14111 = distinct !DILexicalBlock(scope: !14107, file: !1040, line: 52, column: 5)
!14112 = !DILocation(line: 54, column: 7, scope: !14111)
!14113 = !DILocation(line: 56, column: 7, scope: !14111)
!14114 = !DILocation(line: 59, column: 20, scope: !14099)
!14115 = !DILocation(line: 59, column: 11, scope: !14099)
!14116 = !DILocation(line: 59, column: 9, scope: !14099)
!14117 = !DILocation(line: 60, column: 11, scope: !14099)
!14118 = !DILocation(line: 60, column: 17, scope: !14099)
!14119 = !DILocation(line: 60, column: 27, scope: !14099)
!14120 = !DILocation(line: 60, column: 33, scope: !14099)
!14121 = !DILocation(line: 60, column: 39, scope: !14099)
!14122 = !DILocation(line: 60, column: 8, scope: !14099)
!14123 = !DILocation(line: 61, column: 7, scope: !14124)
!14124 = distinct !DILexicalBlock(scope: !14099, file: !1040, line: 61, column: 7)
!14125 = !DILocation(line: 61, column: 14, scope: !14124)
!14126 = !DILocation(line: 61, column: 12, scope: !14124)
!14127 = !DILocation(line: 61, column: 20, scope: !14124)
!14128 = !DILocation(line: 61, column: 25, scope: !14124)
!14129 = !DILocation(line: 61, column: 37, scope: !14124)
!14130 = !DILocation(line: 61, column: 42, scope: !14124)
!14131 = !DILocation(line: 61, column: 28, scope: !14124)
!14132 = !DILocation(line: 61, column: 61, scope: !14124)
!14133 = !DILocation(line: 61, column: 7, scope: !14099)
!14134 = !DILocation(line: 63, column: 15, scope: !14135)
!14135 = distinct !DILexicalBlock(scope: !14124, file: !1040, line: 62, column: 5)
!14136 = !DILocation(line: 63, column: 13, scope: !14135)
!14137 = !DILocation(line: 64, column: 20, scope: !14138)
!14138 = distinct !DILexicalBlock(scope: !14135, file: !1040, line: 64, column: 11)
!14139 = !DILocation(line: 64, column: 11, scope: !14138)
!14140 = !DILocation(line: 64, column: 36, scope: !14138)
!14141 = !DILocation(line: 64, column: 11, scope: !14135)
!14142 = !DILocation(line: 66, column: 19, scope: !14143)
!14143 = distinct !DILexicalBlock(scope: !14138, file: !1040, line: 65, column: 9)
!14144 = !DILocation(line: 66, column: 24, scope: !14143)
!14145 = !DILocation(line: 66, column: 17, scope: !14143)
!14146 = !DILocation(line: 70, column: 52, scope: !14143)
!14147 = !DILocation(line: 70, column: 41, scope: !14143)
!14148 = !DILocation(line: 72, column: 9, scope: !14143)
!14149 = !DILocation(line: 73, column: 5, scope: !14135)
!14150 = !DILocation(line: 84, column: 18, scope: !14099)
!14151 = !DILocation(line: 84, column: 16, scope: !14099)
!14152 = !DILocation(line: 90, column: 38, scope: !14099)
!14153 = !DILocation(line: 90, column: 27, scope: !14099)
!14154 = !DILocation(line: 92, column: 1, scope: !14099)
!14155 = distinct !DISubprogram(name: "clone_quoting_options", scope: !1066, file: !1066, line: 122, type: !14156, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14156 = !DISubroutineType(types: !14157)
!14157 = !{!1064, !1064}
!14158 = !DILocalVariable(name: "o", arg: 1, scope: !14155, file: !1066, line: 122, type: !1064)
!14159 = !DILocation(line: 122, column: 48, scope: !14155)
!14160 = !DILocalVariable(name: "e", scope: !14155, file: !1066, line: 124, type: !5)
!14161 = !DILocation(line: 124, column: 7, scope: !14155)
!14162 = !DILocation(line: 124, column: 11, scope: !14155)
!14163 = !DILocalVariable(name: "p", scope: !14155, file: !1066, line: 125, type: !1064)
!14164 = !DILocation(line: 125, column: 27, scope: !14155)
!14165 = !DILocation(line: 125, column: 40, scope: !14155)
!14166 = !DILocation(line: 125, column: 44, scope: !14155)
!14167 = !DILocation(line: 125, column: 31, scope: !14155)
!14168 = !DILocation(line: 127, column: 11, scope: !14155)
!14169 = !DILocation(line: 127, column: 3, scope: !14155)
!14170 = !DILocation(line: 127, column: 9, scope: !14155)
!14171 = !DILocation(line: 128, column: 10, scope: !14155)
!14172 = !DILocation(line: 128, column: 3, scope: !14155)
!14173 = distinct !DISubprogram(name: "get_quoting_style", scope: !1066, file: !1066, line: 133, type: !14174, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14174 = !DISubroutineType(types: !14175)
!14175 = !{!1046, !1075}
!14176 = !DILocalVariable(name: "o", arg: 1, scope: !14173, file: !1066, line: 133, type: !1075)
!14177 = !DILocation(line: 133, column: 50, scope: !14173)
!14178 = !DILocation(line: 135, column: 11, scope: !14173)
!14179 = !DILocation(line: 135, column: 15, scope: !14173)
!14180 = !DILocation(line: 135, column: 46, scope: !14173)
!14181 = !DILocation(line: 135, column: 3, scope: !14173)
!14182 = distinct !DISubprogram(name: "set_quoting_style", scope: !1066, file: !1066, line: 141, type: !14183, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14183 = !DISubroutineType(types: !14184)
!14184 = !{null, !1064, !1046}
!14185 = !DILocalVariable(name: "o", arg: 1, scope: !14182, file: !1066, line: 141, type: !1064)
!14186 = !DILocation(line: 141, column: 44, scope: !14182)
!14187 = !DILocalVariable(name: "s", arg: 2, scope: !14182, file: !1066, line: 141, type: !1046)
!14188 = !DILocation(line: 141, column: 66, scope: !14182)
!14189 = !DILocation(line: 143, column: 47, scope: !14182)
!14190 = !DILocation(line: 143, column: 4, scope: !14182)
!14191 = !DILocation(line: 143, column: 8, scope: !14182)
!14192 = !DILocation(line: 143, column: 39, scope: !14182)
!14193 = !DILocation(line: 143, column: 45, scope: !14182)
!14194 = !DILocation(line: 144, column: 1, scope: !14182)
!14195 = distinct !DISubprogram(name: "set_char_quoting", scope: !1066, file: !1066, line: 152, type: !14196, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14196 = !DISubroutineType(types: !14197)
!14197 = !{!5, !1064, !8, !5}
!14198 = !DILocalVariable(name: "o", arg: 1, scope: !14195, file: !1066, line: 152, type: !1064)
!14199 = !DILocation(line: 152, column: 43, scope: !14195)
!14200 = !DILocalVariable(name: "c", arg: 2, scope: !14195, file: !1066, line: 152, type: !8)
!14201 = !DILocation(line: 152, column: 51, scope: !14195)
!14202 = !DILocalVariable(name: "i", arg: 3, scope: !14195, file: !1066, line: 152, type: !5)
!14203 = !DILocation(line: 152, column: 58, scope: !14195)
!14204 = !DILocalVariable(name: "uc", scope: !14195, file: !1066, line: 154, type: !535)
!14205 = !DILocation(line: 154, column: 17, scope: !14195)
!14206 = !DILocation(line: 154, column: 22, scope: !14195)
!14207 = !DILocalVariable(name: "p", scope: !14195, file: !1066, line: 155, type: !1074)
!14208 = !DILocation(line: 155, column: 17, scope: !14195)
!14209 = !DILocation(line: 156, column: 6, scope: !14195)
!14210 = !DILocation(line: 156, column: 10, scope: !14195)
!14211 = !DILocation(line: 156, column: 41, scope: !14195)
!14212 = !DILocation(line: 156, column: 5, scope: !14195)
!14213 = !DILocation(line: 156, column: 59, scope: !14195)
!14214 = !DILocation(line: 156, column: 62, scope: !14195)
!14215 = !DILocation(line: 156, column: 57, scope: !14195)
!14216 = !DILocalVariable(name: "shift", scope: !14195, file: !1066, line: 157, type: !5)
!14217 = !DILocation(line: 157, column: 7, scope: !14195)
!14218 = !DILocation(line: 157, column: 15, scope: !14195)
!14219 = !DILocation(line: 157, column: 18, scope: !14195)
!14220 = !DILocalVariable(name: "r", scope: !14195, file: !1066, line: 158, type: !5)
!14221 = !DILocation(line: 158, column: 7, scope: !14195)
!14222 = !DILocation(line: 158, column: 13, scope: !14195)
!14223 = !DILocation(line: 158, column: 12, scope: !14195)
!14224 = !DILocation(line: 158, column: 18, scope: !14195)
!14225 = !DILocation(line: 158, column: 15, scope: !14195)
!14226 = !DILocation(line: 158, column: 25, scope: !14195)
!14227 = !DILocation(line: 159, column: 11, scope: !14195)
!14228 = !DILocation(line: 159, column: 13, scope: !14195)
!14229 = !DILocation(line: 159, column: 20, scope: !14195)
!14230 = !DILocation(line: 159, column: 18, scope: !14195)
!14231 = !DILocation(line: 159, column: 26, scope: !14195)
!14232 = !DILocation(line: 159, column: 23, scope: !14195)
!14233 = !DILocation(line: 159, column: 4, scope: !14195)
!14234 = !DILocation(line: 159, column: 6, scope: !14195)
!14235 = !DILocation(line: 160, column: 10, scope: !14195)
!14236 = !DILocation(line: 160, column: 3, scope: !14195)
!14237 = distinct !DISubprogram(name: "set_quoting_flags", scope: !1066, file: !1066, line: 168, type: !14238, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14238 = !DISubroutineType(types: !14239)
!14239 = !{!5, !1064, !5}
!14240 = !DILocalVariable(name: "o", arg: 1, scope: !14237, file: !1066, line: 168, type: !1064)
!14241 = !DILocation(line: 168, column: 44, scope: !14237)
!14242 = !DILocalVariable(name: "i", arg: 2, scope: !14237, file: !1066, line: 168, type: !5)
!14243 = !DILocation(line: 168, column: 51, scope: !14237)
!14244 = !DILocalVariable(name: "r", scope: !14237, file: !1066, line: 170, type: !5)
!14245 = !DILocation(line: 170, column: 7, scope: !14237)
!14246 = !DILocation(line: 171, column: 8, scope: !14247)
!14247 = distinct !DILexicalBlock(scope: !14237, file: !1066, line: 171, column: 7)
!14248 = !DILocation(line: 171, column: 7, scope: !14237)
!14249 = !DILocation(line: 172, column: 7, scope: !14247)
!14250 = !DILocation(line: 172, column: 5, scope: !14247)
!14251 = !DILocation(line: 173, column: 7, scope: !14237)
!14252 = !DILocation(line: 173, column: 10, scope: !14237)
!14253 = !DILocation(line: 173, column: 5, scope: !14237)
!14254 = !DILocation(line: 174, column: 14, scope: !14237)
!14255 = !DILocation(line: 174, column: 3, scope: !14237)
!14256 = !DILocation(line: 174, column: 6, scope: !14237)
!14257 = !DILocation(line: 174, column: 12, scope: !14237)
!14258 = !DILocation(line: 175, column: 10, scope: !14237)
!14259 = !DILocation(line: 175, column: 3, scope: !14237)
!14260 = distinct !DISubprogram(name: "set_custom_quoting", scope: !1066, file: !1066, line: 179, type: !14261, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14261 = !DISubroutineType(types: !14262)
!14262 = !{null, !1064, !90, !90}
!14263 = !DILocalVariable(name: "o", arg: 1, scope: !14260, file: !1066, line: 179, type: !1064)
!14264 = !DILocation(line: 179, column: 45, scope: !14260)
!14265 = !DILocalVariable(name: "left_quote", arg: 2, scope: !14260, file: !1066, line: 180, type: !90)
!14266 = !DILocation(line: 180, column: 33, scope: !14260)
!14267 = !DILocalVariable(name: "right_quote", arg: 3, scope: !14260, file: !1066, line: 180, type: !90)
!14268 = !DILocation(line: 180, column: 57, scope: !14260)
!14269 = !DILocation(line: 182, column: 8, scope: !14270)
!14270 = distinct !DILexicalBlock(scope: !14260, file: !1066, line: 182, column: 7)
!14271 = !DILocation(line: 182, column: 7, scope: !14260)
!14272 = !DILocation(line: 183, column: 7, scope: !14270)
!14273 = !DILocation(line: 183, column: 5, scope: !14270)
!14274 = !DILocation(line: 184, column: 3, scope: !14260)
!14275 = !DILocation(line: 184, column: 6, scope: !14260)
!14276 = !DILocation(line: 184, column: 12, scope: !14260)
!14277 = !DILocation(line: 185, column: 8, scope: !14278)
!14278 = distinct !DILexicalBlock(scope: !14260, file: !1066, line: 185, column: 7)
!14279 = !DILocation(line: 185, column: 19, scope: !14278)
!14280 = !DILocation(line: 185, column: 23, scope: !14278)
!14281 = !DILocation(line: 185, column: 7, scope: !14260)
!14282 = !DILocation(line: 186, column: 5, scope: !14278)
!14283 = !DILocation(line: 187, column: 19, scope: !14260)
!14284 = !DILocation(line: 187, column: 3, scope: !14260)
!14285 = !DILocation(line: 187, column: 6, scope: !14260)
!14286 = !DILocation(line: 187, column: 17, scope: !14260)
!14287 = !DILocation(line: 188, column: 20, scope: !14260)
!14288 = !DILocation(line: 188, column: 3, scope: !14260)
!14289 = !DILocation(line: 188, column: 6, scope: !14260)
!14290 = !DILocation(line: 188, column: 18, scope: !14260)
!14291 = !DILocation(line: 189, column: 1, scope: !14260)
!14292 = distinct !DISubprogram(name: "quotearg_buffer", scope: !1066, file: !1066, line: 784, type: !14293, scopeLine: 787, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14293 = !DISubroutineType(types: !14294)
!14294 = !{!52, !7, !52, !90, !52, !1075}
!14295 = !DILocalVariable(name: "buffer", arg: 1, scope: !14292, file: !1066, line: 784, type: !7)
!14296 = !DILocation(line: 784, column: 24, scope: !14292)
!14297 = !DILocalVariable(name: "buffersize", arg: 2, scope: !14292, file: !1066, line: 784, type: !52)
!14298 = !DILocation(line: 784, column: 39, scope: !14292)
!14299 = !DILocalVariable(name: "arg", arg: 3, scope: !14292, file: !1066, line: 785, type: !90)
!14300 = !DILocation(line: 785, column: 30, scope: !14292)
!14301 = !DILocalVariable(name: "argsize", arg: 4, scope: !14292, file: !1066, line: 785, type: !52)
!14302 = !DILocation(line: 785, column: 42, scope: !14292)
!14303 = !DILocalVariable(name: "o", arg: 5, scope: !14292, file: !1066, line: 786, type: !1075)
!14304 = !DILocation(line: 786, column: 48, scope: !14292)
!14305 = !DILocalVariable(name: "p", scope: !14292, file: !1066, line: 788, type: !1075)
!14306 = !DILocation(line: 788, column: 33, scope: !14292)
!14307 = !DILocation(line: 788, column: 37, scope: !14292)
!14308 = !DILocation(line: 788, column: 41, scope: !14292)
!14309 = !DILocalVariable(name: "e", scope: !14292, file: !1066, line: 789, type: !5)
!14310 = !DILocation(line: 789, column: 7, scope: !14292)
!14311 = !DILocation(line: 789, column: 11, scope: !14292)
!14312 = !DILocalVariable(name: "r", scope: !14292, file: !1066, line: 790, type: !52)
!14313 = !DILocation(line: 790, column: 10, scope: !14292)
!14314 = !DILocation(line: 790, column: 40, scope: !14292)
!14315 = !DILocation(line: 790, column: 48, scope: !14292)
!14316 = !DILocation(line: 790, column: 60, scope: !14292)
!14317 = !DILocation(line: 790, column: 65, scope: !14292)
!14318 = !DILocation(line: 791, column: 40, scope: !14292)
!14319 = !DILocation(line: 791, column: 43, scope: !14292)
!14320 = !DILocation(line: 791, column: 50, scope: !14292)
!14321 = !DILocation(line: 791, column: 53, scope: !14292)
!14322 = !DILocation(line: 791, column: 60, scope: !14292)
!14323 = !DILocation(line: 791, column: 63, scope: !14292)
!14324 = !DILocation(line: 792, column: 40, scope: !14292)
!14325 = !DILocation(line: 792, column: 43, scope: !14292)
!14326 = !DILocation(line: 792, column: 55, scope: !14292)
!14327 = !DILocation(line: 792, column: 58, scope: !14292)
!14328 = !DILocation(line: 790, column: 14, scope: !14292)
!14329 = !DILocation(line: 793, column: 11, scope: !14292)
!14330 = !DILocation(line: 793, column: 3, scope: !14292)
!14331 = !DILocation(line: 793, column: 9, scope: !14292)
!14332 = !DILocation(line: 794, column: 10, scope: !14292)
!14333 = !DILocation(line: 794, column: 3, scope: !14292)
!14334 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !1066, file: !1066, line: 256, type: !14335, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!14335 = !DISubroutineType(types: !14336)
!14336 = !{!52, !7, !52, !90, !52, !1046, !5, !1095, !90, !90}
!14337 = !DILocalVariable(name: "buffer", arg: 1, scope: !14334, file: !1066, line: 256, type: !7)
!14338 = !DILocation(line: 256, column: 33, scope: !14334)
!14339 = !DILocalVariable(name: "buffersize", arg: 2, scope: !14334, file: !1066, line: 256, type: !52)
!14340 = !DILocation(line: 256, column: 48, scope: !14334)
!14341 = !DILocalVariable(name: "arg", arg: 3, scope: !14334, file: !1066, line: 257, type: !90)
!14342 = !DILocation(line: 257, column: 39, scope: !14334)
!14343 = !DILocalVariable(name: "argsize", arg: 4, scope: !14334, file: !1066, line: 257, type: !52)
!14344 = !DILocation(line: 257, column: 51, scope: !14334)
!14345 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !14334, file: !1066, line: 258, type: !1046)
!14346 = !DILocation(line: 258, column: 46, scope: !14334)
!14347 = !DILocalVariable(name: "flags", arg: 6, scope: !14334, file: !1066, line: 258, type: !5)
!14348 = !DILocation(line: 258, column: 65, scope: !14334)
!14349 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !14334, file: !1066, line: 259, type: !1095)
!14350 = !DILocation(line: 259, column: 47, scope: !14334)
!14351 = !DILocalVariable(name: "left_quote", arg: 8, scope: !14334, file: !1066, line: 260, type: !90)
!14352 = !DILocation(line: 260, column: 39, scope: !14334)
!14353 = !DILocalVariable(name: "right_quote", arg: 9, scope: !14334, file: !1066, line: 261, type: !90)
!14354 = !DILocation(line: 261, column: 39, scope: !14334)
!14355 = !DILocalVariable(name: "i", scope: !14334, file: !1066, line: 263, type: !52)
!14356 = !DILocation(line: 263, column: 10, scope: !14334)
!14357 = !DILocalVariable(name: "len", scope: !14334, file: !1066, line: 264, type: !52)
!14358 = !DILocation(line: 264, column: 10, scope: !14334)
!14359 = !DILocalVariable(name: "orig_buffersize", scope: !14334, file: !1066, line: 265, type: !52)
!14360 = !DILocation(line: 265, column: 10, scope: !14334)
!14361 = !DILocalVariable(name: "quote_string", scope: !14334, file: !1066, line: 266, type: !90)
!14362 = !DILocation(line: 266, column: 15, scope: !14334)
!14363 = !DILocalVariable(name: "quote_string_len", scope: !14334, file: !1066, line: 267, type: !52)
!14364 = !DILocation(line: 267, column: 10, scope: !14334)
!14365 = !DILocalVariable(name: "backslash_escapes", scope: !14334, file: !1066, line: 268, type: !162)
!14366 = !DILocation(line: 268, column: 8, scope: !14334)
!14367 = !DILocalVariable(name: "unibyte_locale", scope: !14334, file: !1066, line: 269, type: !162)
!14368 = !DILocation(line: 269, column: 8, scope: !14334)
!14369 = !DILocation(line: 269, column: 25, scope: !14334)
!14370 = !DILocation(line: 269, column: 36, scope: !14334)
!14371 = !DILocalVariable(name: "elide_outer_quotes", scope: !14334, file: !1066, line: 270, type: !162)
!14372 = !DILocation(line: 270, column: 8, scope: !14334)
!14373 = !DILocation(line: 270, column: 30, scope: !14334)
!14374 = !DILocation(line: 270, column: 36, scope: !14334)
!14375 = !DILocation(line: 270, column: 61, scope: !14334)
!14376 = !DILocalVariable(name: "pending_shell_escape_end", scope: !14334, file: !1066, line: 271, type: !162)
!14377 = !DILocation(line: 271, column: 8, scope: !14334)
!14378 = !DILocalVariable(name: "encountered_single_quote", scope: !14334, file: !1066, line: 272, type: !162)
!14379 = !DILocation(line: 272, column: 8, scope: !14334)
!14380 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !14334, file: !1066, line: 273, type: !162)
!14381 = !DILocation(line: 273, column: 8, scope: !14334)
!14382 = !DILocation(line: 273, column: 3, scope: !14334)
!14383 = !DILabel(scope: !14334, name: "process_input", file: !1066, line: 314)
!14384 = !DILocation(line: 314, column: 2, scope: !14334)
!14385 = !DILocation(line: 316, column: 11, scope: !14334)
!14386 = !DILocation(line: 316, column: 3, scope: !14334)
!14387 = !DILocation(line: 319, column: 21, scope: !14388)
!14388 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 317, column: 5)
!14389 = !DILocation(line: 320, column: 26, scope: !14388)
!14390 = !DILocation(line: 321, column: 7, scope: !14388)
!14391 = !DILocation(line: 323, column: 12, scope: !14392)
!14392 = distinct !DILexicalBlock(scope: !14388, file: !1066, line: 323, column: 11)
!14393 = !DILocation(line: 323, column: 11, scope: !14388)
!14394 = !DILocation(line: 324, column: 9, scope: !14392)
!14395 = !DILocation(line: 324, column: 9, scope: !14396)
!14396 = distinct !DILexicalBlock(scope: !14397, file: !1066, line: 324, column: 9)
!14397 = distinct !DILexicalBlock(scope: !14392, file: !1066, line: 324, column: 9)
!14398 = !DILocation(line: 324, column: 9, scope: !14397)
!14399 = !DILocation(line: 325, column: 25, scope: !14388)
!14400 = !DILocation(line: 326, column: 20, scope: !14388)
!14401 = !DILocation(line: 327, column: 24, scope: !14388)
!14402 = !DILocation(line: 328, column: 7, scope: !14388)
!14403 = !DILocation(line: 331, column: 25, scope: !14388)
!14404 = !DILocation(line: 332, column: 26, scope: !14388)
!14405 = !DILocation(line: 333, column: 7, scope: !14388)
!14406 = !DILocation(line: 339, column: 13, scope: !14407)
!14407 = distinct !DILexicalBlock(scope: !14408, file: !1066, line: 339, column: 13)
!14408 = distinct !DILexicalBlock(scope: !14388, file: !1066, line: 338, column: 7)
!14409 = !DILocation(line: 339, column: 27, scope: !14407)
!14410 = !DILocation(line: 339, column: 13, scope: !14408)
!14411 = !DILocation(line: 362, column: 50, scope: !14412)
!14412 = distinct !DILexicalBlock(scope: !14407, file: !1066, line: 340, column: 11)
!14413 = !DILocation(line: 362, column: 26, scope: !14412)
!14414 = !DILocation(line: 362, column: 24, scope: !14412)
!14415 = !DILocation(line: 363, column: 51, scope: !14412)
!14416 = !DILocation(line: 363, column: 27, scope: !14412)
!14417 = !DILocation(line: 363, column: 25, scope: !14412)
!14418 = !DILocation(line: 364, column: 11, scope: !14412)
!14419 = !DILocation(line: 365, column: 14, scope: !14420)
!14420 = distinct !DILexicalBlock(scope: !14408, file: !1066, line: 365, column: 13)
!14421 = !DILocation(line: 365, column: 13, scope: !14408)
!14422 = !DILocation(line: 366, column: 31, scope: !14423)
!14423 = distinct !DILexicalBlock(scope: !14420, file: !1066, line: 366, column: 11)
!14424 = !DILocation(line: 366, column: 29, scope: !14423)
!14425 = !DILocation(line: 366, column: 16, scope: !14423)
!14426 = !DILocation(line: 366, column: 44, scope: !14427)
!14427 = distinct !DILexicalBlock(scope: !14423, file: !1066, line: 366, column: 11)
!14428 = !DILocation(line: 366, column: 43, scope: !14427)
!14429 = !DILocation(line: 366, column: 11, scope: !14423)
!14430 = !DILocation(line: 367, column: 13, scope: !14427)
!14431 = !DILocation(line: 367, column: 13, scope: !14432)
!14432 = distinct !DILexicalBlock(scope: !14433, file: !1066, line: 367, column: 13)
!14433 = distinct !DILexicalBlock(scope: !14427, file: !1066, line: 367, column: 13)
!14434 = !DILocation(line: 367, column: 13, scope: !14433)
!14435 = !DILocation(line: 366, column: 70, scope: !14427)
!14436 = !DILocation(line: 366, column: 11, scope: !14427)
!14437 = distinct !{!14437, !14429, !14438}
!14438 = !DILocation(line: 367, column: 13, scope: !14423)
!14439 = !DILocation(line: 368, column: 27, scope: !14408)
!14440 = !DILocation(line: 369, column: 24, scope: !14408)
!14441 = !DILocation(line: 369, column: 22, scope: !14408)
!14442 = !DILocation(line: 370, column: 36, scope: !14408)
!14443 = !DILocation(line: 370, column: 28, scope: !14408)
!14444 = !DILocation(line: 370, column: 26, scope: !14408)
!14445 = !DILocation(line: 372, column: 7, scope: !14388)
!14446 = !DILocation(line: 375, column: 25, scope: !14388)
!14447 = !DILocation(line: 376, column: 7, scope: !14388)
!14448 = !DILocation(line: 378, column: 26, scope: !14388)
!14449 = !DILocation(line: 379, column: 7, scope: !14388)
!14450 = !DILocation(line: 381, column: 12, scope: !14451)
!14451 = distinct !DILexicalBlock(scope: !14388, file: !1066, line: 381, column: 11)
!14452 = !DILocation(line: 381, column: 11, scope: !14388)
!14453 = !DILocation(line: 382, column: 27, scope: !14451)
!14454 = !DILocation(line: 382, column: 9, scope: !14451)
!14455 = !DILocation(line: 383, column: 7, scope: !14388)
!14456 = !DILocation(line: 385, column: 21, scope: !14388)
!14457 = !DILocation(line: 386, column: 12, scope: !14458)
!14458 = distinct !DILexicalBlock(scope: !14388, file: !1066, line: 386, column: 11)
!14459 = !DILocation(line: 386, column: 11, scope: !14388)
!14460 = !DILocation(line: 387, column: 9, scope: !14458)
!14461 = !DILocation(line: 387, column: 9, scope: !14462)
!14462 = distinct !DILexicalBlock(scope: !14463, file: !1066, line: 387, column: 9)
!14463 = distinct !DILexicalBlock(scope: !14458, file: !1066, line: 387, column: 9)
!14464 = !DILocation(line: 387, column: 9, scope: !14463)
!14465 = !DILocation(line: 388, column: 20, scope: !14388)
!14466 = !DILocation(line: 389, column: 24, scope: !14388)
!14467 = !DILocation(line: 390, column: 7, scope: !14388)
!14468 = !DILocation(line: 393, column: 26, scope: !14388)
!14469 = !DILocation(line: 394, column: 7, scope: !14388)
!14470 = !DILocation(line: 397, column: 7, scope: !14388)
!14471 = !DILocation(line: 400, column: 10, scope: !14472)
!14472 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 400, column: 3)
!14473 = !DILocation(line: 400, column: 8, scope: !14472)
!14474 = !DILocation(line: 400, column: 19, scope: !14475)
!14475 = distinct !DILexicalBlock(scope: !14472, file: !1066, line: 400, column: 3)
!14476 = !DILocation(line: 400, column: 27, scope: !14475)
!14477 = !DILocation(line: 400, column: 41, scope: !14475)
!14478 = !DILocation(line: 400, column: 45, scope: !14475)
!14479 = !DILocation(line: 400, column: 48, scope: !14475)
!14480 = !DILocation(line: 400, column: 58, scope: !14475)
!14481 = !DILocation(line: 400, column: 63, scope: !14475)
!14482 = !DILocation(line: 400, column: 60, scope: !14475)
!14483 = !DILocation(line: 400, column: 16, scope: !14475)
!14484 = !DILocation(line: 400, column: 3, scope: !14472)
!14485 = !DILocalVariable(name: "c", scope: !14486, file: !1066, line: 402, type: !535)
!14486 = distinct !DILexicalBlock(scope: !14475, file: !1066, line: 401, column: 5)
!14487 = !DILocation(line: 402, column: 21, scope: !14486)
!14488 = !DILocalVariable(name: "esc", scope: !14486, file: !1066, line: 403, type: !535)
!14489 = !DILocation(line: 403, column: 21, scope: !14486)
!14490 = !DILocalVariable(name: "is_right_quote", scope: !14486, file: !1066, line: 404, type: !162)
!14491 = !DILocation(line: 404, column: 12, scope: !14486)
!14492 = !DILocalVariable(name: "escaping", scope: !14486, file: !1066, line: 405, type: !162)
!14493 = !DILocation(line: 405, column: 12, scope: !14486)
!14494 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !14486, file: !1066, line: 406, type: !162)
!14495 = !DILocation(line: 406, column: 12, scope: !14486)
!14496 = !DILocation(line: 408, column: 11, scope: !14497)
!14497 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 408, column: 11)
!14498 = !DILocation(line: 409, column: 11, scope: !14497)
!14499 = !DILocation(line: 409, column: 14, scope: !14497)
!14500 = !DILocation(line: 409, column: 28, scope: !14497)
!14501 = !DILocation(line: 410, column: 11, scope: !14497)
!14502 = !DILocation(line: 410, column: 14, scope: !14497)
!14503 = !DILocation(line: 411, column: 11, scope: !14497)
!14504 = !DILocation(line: 411, column: 15, scope: !14497)
!14505 = !DILocation(line: 411, column: 19, scope: !14497)
!14506 = !DILocation(line: 411, column: 17, scope: !14497)
!14507 = !DILocation(line: 412, column: 19, scope: !14497)
!14508 = !DILocation(line: 412, column: 27, scope: !14497)
!14509 = !DILocation(line: 412, column: 39, scope: !14497)
!14510 = !DILocation(line: 412, column: 46, scope: !14497)
!14511 = !DILocation(line: 412, column: 44, scope: !14497)
!14512 = !DILocation(line: 416, column: 40, scope: !14497)
!14513 = !DILocation(line: 416, column: 32, scope: !14497)
!14514 = !DILocation(line: 416, column: 30, scope: !14497)
!14515 = !DILocation(line: 416, column: 48, scope: !14497)
!14516 = !DILocation(line: 412, column: 15, scope: !14497)
!14517 = !DILocation(line: 417, column: 11, scope: !14497)
!14518 = !DILocation(line: 417, column: 22, scope: !14497)
!14519 = !DILocation(line: 417, column: 28, scope: !14497)
!14520 = !DILocation(line: 417, column: 26, scope: !14497)
!14521 = !DILocation(line: 417, column: 31, scope: !14497)
!14522 = !DILocation(line: 417, column: 45, scope: !14497)
!14523 = !DILocation(line: 417, column: 14, scope: !14497)
!14524 = !DILocation(line: 417, column: 63, scope: !14497)
!14525 = !DILocation(line: 408, column: 11, scope: !14486)
!14526 = !DILocation(line: 419, column: 15, scope: !14527)
!14527 = distinct !DILexicalBlock(scope: !14528, file: !1066, line: 419, column: 15)
!14528 = distinct !DILexicalBlock(scope: !14497, file: !1066, line: 418, column: 9)
!14529 = !DILocation(line: 419, column: 15, scope: !14528)
!14530 = !DILocation(line: 420, column: 13, scope: !14527)
!14531 = !DILocation(line: 421, column: 26, scope: !14528)
!14532 = !DILocation(line: 422, column: 9, scope: !14528)
!14533 = !DILocation(line: 424, column: 11, scope: !14486)
!14534 = !DILocation(line: 424, column: 15, scope: !14486)
!14535 = !DILocation(line: 424, column: 9, scope: !14486)
!14536 = !DILocation(line: 425, column: 15, scope: !14486)
!14537 = !DILocation(line: 425, column: 7, scope: !14486)
!14538 = !DILocation(line: 428, column: 15, scope: !14539)
!14539 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 428, column: 15)
!14540 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 426, column: 9)
!14541 = !DILocation(line: 428, column: 15, scope: !14540)
!14542 = !DILocation(line: 430, column: 15, scope: !14543)
!14543 = distinct !DILexicalBlock(scope: !14539, file: !1066, line: 429, column: 13)
!14544 = !DILocation(line: 430, column: 15, scope: !14545)
!14545 = distinct !DILexicalBlock(scope: !14546, file: !1066, line: 430, column: 15)
!14546 = distinct !DILexicalBlock(scope: !14543, file: !1066, line: 430, column: 15)
!14547 = !DILocation(line: 430, column: 15, scope: !14546)
!14548 = !DILocation(line: 430, column: 15, scope: !14549)
!14549 = distinct !DILexicalBlock(scope: !14546, file: !1066, line: 430, column: 15)
!14550 = !DILocation(line: 430, column: 15, scope: !14551)
!14551 = distinct !DILexicalBlock(scope: !14549, file: !1066, line: 430, column: 15)
!14552 = !DILocation(line: 430, column: 15, scope: !14553)
!14553 = distinct !DILexicalBlock(scope: !14554, file: !1066, line: 430, column: 15)
!14554 = distinct !DILexicalBlock(scope: !14551, file: !1066, line: 430, column: 15)
!14555 = !DILocation(line: 430, column: 15, scope: !14554)
!14556 = !DILocation(line: 430, column: 15, scope: !14557)
!14557 = distinct !DILexicalBlock(scope: !14558, file: !1066, line: 430, column: 15)
!14558 = distinct !DILexicalBlock(scope: !14551, file: !1066, line: 430, column: 15)
!14559 = !DILocation(line: 430, column: 15, scope: !14558)
!14560 = !DILocation(line: 430, column: 15, scope: !14561)
!14561 = distinct !DILexicalBlock(scope: !14562, file: !1066, line: 430, column: 15)
!14562 = distinct !DILexicalBlock(scope: !14551, file: !1066, line: 430, column: 15)
!14563 = !DILocation(line: 430, column: 15, scope: !14562)
!14564 = !DILocation(line: 430, column: 15, scope: !14565)
!14565 = distinct !DILexicalBlock(scope: !14566, file: !1066, line: 430, column: 15)
!14566 = distinct !DILexicalBlock(scope: !14546, file: !1066, line: 430, column: 15)
!14567 = !DILocation(line: 430, column: 15, scope: !14566)
!14568 = !DILocation(line: 437, column: 19, scope: !14569)
!14569 = distinct !DILexicalBlock(scope: !14543, file: !1066, line: 437, column: 19)
!14570 = !DILocation(line: 437, column: 33, scope: !14569)
!14571 = !DILocation(line: 438, column: 19, scope: !14569)
!14572 = !DILocation(line: 438, column: 22, scope: !14569)
!14573 = !DILocation(line: 438, column: 24, scope: !14569)
!14574 = !DILocation(line: 438, column: 30, scope: !14569)
!14575 = !DILocation(line: 438, column: 28, scope: !14569)
!14576 = !DILocation(line: 438, column: 38, scope: !14569)
!14577 = !DILocation(line: 438, column: 48, scope: !14569)
!14578 = !DILocation(line: 438, column: 52, scope: !14569)
!14579 = !DILocation(line: 438, column: 54, scope: !14569)
!14580 = !DILocation(line: 438, column: 45, scope: !14569)
!14581 = !DILocation(line: 438, column: 59, scope: !14569)
!14582 = !DILocation(line: 438, column: 62, scope: !14569)
!14583 = !DILocation(line: 438, column: 66, scope: !14569)
!14584 = !DILocation(line: 438, column: 68, scope: !14569)
!14585 = !DILocation(line: 438, column: 73, scope: !14569)
!14586 = !DILocation(line: 437, column: 19, scope: !14543)
!14587 = !DILocation(line: 440, column: 19, scope: !14588)
!14588 = distinct !DILexicalBlock(scope: !14569, file: !1066, line: 439, column: 17)
!14589 = !DILocation(line: 440, column: 19, scope: !14590)
!14590 = distinct !DILexicalBlock(scope: !14591, file: !1066, line: 440, column: 19)
!14591 = distinct !DILexicalBlock(scope: !14588, file: !1066, line: 440, column: 19)
!14592 = !DILocation(line: 440, column: 19, scope: !14591)
!14593 = !DILocation(line: 441, column: 19, scope: !14588)
!14594 = !DILocation(line: 441, column: 19, scope: !14595)
!14595 = distinct !DILexicalBlock(scope: !14596, file: !1066, line: 441, column: 19)
!14596 = distinct !DILexicalBlock(scope: !14588, file: !1066, line: 441, column: 19)
!14597 = !DILocation(line: 441, column: 19, scope: !14596)
!14598 = !DILocation(line: 442, column: 17, scope: !14588)
!14599 = !DILocation(line: 443, column: 17, scope: !14543)
!14600 = !DILocation(line: 448, column: 13, scope: !14543)
!14601 = !DILocation(line: 449, column: 20, scope: !14602)
!14602 = distinct !DILexicalBlock(scope: !14539, file: !1066, line: 449, column: 20)
!14603 = !DILocation(line: 449, column: 26, scope: !14602)
!14604 = !DILocation(line: 449, column: 20, scope: !14539)
!14605 = !DILocation(line: 450, column: 13, scope: !14602)
!14606 = !DILocation(line: 451, column: 11, scope: !14540)
!14607 = !DILocation(line: 454, column: 19, scope: !14540)
!14608 = !DILocation(line: 454, column: 11, scope: !14540)
!14609 = !DILocation(line: 457, column: 19, scope: !14610)
!14610 = distinct !DILexicalBlock(scope: !14611, file: !1066, line: 457, column: 19)
!14611 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 455, column: 13)
!14612 = !DILocation(line: 457, column: 19, scope: !14611)
!14613 = !DILocation(line: 458, column: 17, scope: !14610)
!14614 = !DILocation(line: 459, column: 15, scope: !14611)
!14615 = !DILocation(line: 462, column: 20, scope: !14616)
!14616 = distinct !DILexicalBlock(scope: !14611, file: !1066, line: 462, column: 19)
!14617 = !DILocation(line: 462, column: 26, scope: !14616)
!14618 = !DILocation(line: 463, column: 19, scope: !14616)
!14619 = !DILocation(line: 463, column: 22, scope: !14616)
!14620 = !DILocation(line: 463, column: 24, scope: !14616)
!14621 = !DILocation(line: 463, column: 30, scope: !14616)
!14622 = !DILocation(line: 463, column: 28, scope: !14616)
!14623 = !DILocation(line: 463, column: 38, scope: !14616)
!14624 = !DILocation(line: 463, column: 41, scope: !14616)
!14625 = !DILocation(line: 463, column: 45, scope: !14616)
!14626 = !DILocation(line: 463, column: 47, scope: !14616)
!14627 = !DILocation(line: 463, column: 52, scope: !14616)
!14628 = !DILocation(line: 462, column: 19, scope: !14611)
!14629 = !DILocation(line: 464, column: 25, scope: !14616)
!14630 = !DILocation(line: 464, column: 29, scope: !14616)
!14631 = !DILocation(line: 464, column: 31, scope: !14616)
!14632 = !DILocation(line: 464, column: 17, scope: !14616)
!14633 = !DILocation(line: 471, column: 25, scope: !14634)
!14634 = distinct !DILexicalBlock(scope: !14635, file: !1066, line: 471, column: 25)
!14635 = distinct !DILexicalBlock(scope: !14616, file: !1066, line: 465, column: 19)
!14636 = !DILocation(line: 471, column: 25, scope: !14635)
!14637 = !DILocation(line: 472, column: 23, scope: !14634)
!14638 = !DILocation(line: 473, column: 25, scope: !14635)
!14639 = !DILocation(line: 473, column: 29, scope: !14635)
!14640 = !DILocation(line: 473, column: 31, scope: !14635)
!14641 = !DILocation(line: 473, column: 23, scope: !14635)
!14642 = !DILocation(line: 474, column: 23, scope: !14635)
!14643 = !DILocation(line: 475, column: 21, scope: !14635)
!14644 = !DILocation(line: 475, column: 21, scope: !14645)
!14645 = distinct !DILexicalBlock(scope: !14646, file: !1066, line: 475, column: 21)
!14646 = distinct !DILexicalBlock(scope: !14635, file: !1066, line: 475, column: 21)
!14647 = !DILocation(line: 475, column: 21, scope: !14646)
!14648 = !DILocation(line: 476, column: 21, scope: !14635)
!14649 = !DILocation(line: 476, column: 21, scope: !14650)
!14650 = distinct !DILexicalBlock(scope: !14651, file: !1066, line: 476, column: 21)
!14651 = distinct !DILexicalBlock(scope: !14635, file: !1066, line: 476, column: 21)
!14652 = !DILocation(line: 476, column: 21, scope: !14651)
!14653 = !DILocation(line: 477, column: 21, scope: !14635)
!14654 = !DILocation(line: 477, column: 21, scope: !14655)
!14655 = distinct !DILexicalBlock(scope: !14656, file: !1066, line: 477, column: 21)
!14656 = distinct !DILexicalBlock(scope: !14635, file: !1066, line: 477, column: 21)
!14657 = !DILocation(line: 477, column: 21, scope: !14656)
!14658 = !DILocation(line: 478, column: 21, scope: !14635)
!14659 = !DILocation(line: 478, column: 21, scope: !14660)
!14660 = distinct !DILexicalBlock(scope: !14661, file: !1066, line: 478, column: 21)
!14661 = distinct !DILexicalBlock(scope: !14635, file: !1066, line: 478, column: 21)
!14662 = !DILocation(line: 478, column: 21, scope: !14661)
!14663 = !DILocation(line: 479, column: 21, scope: !14635)
!14664 = !DILocation(line: 482, column: 21, scope: !14635)
!14665 = !DILocation(line: 483, column: 19, scope: !14635)
!14666 = !DILocation(line: 484, column: 15, scope: !14611)
!14667 = !DILocation(line: 487, column: 15, scope: !14611)
!14668 = !DILocation(line: 489, column: 11, scope: !14540)
!14669 = !DILocation(line: 491, column: 24, scope: !14540)
!14670 = !DILocation(line: 491, column: 31, scope: !14540)
!14671 = !DILocation(line: 492, column: 24, scope: !14540)
!14672 = !DILocation(line: 492, column: 31, scope: !14540)
!14673 = !DILocation(line: 493, column: 24, scope: !14540)
!14674 = !DILocation(line: 493, column: 31, scope: !14540)
!14675 = !DILocation(line: 494, column: 24, scope: !14540)
!14676 = !DILocation(line: 494, column: 31, scope: !14540)
!14677 = !DILocation(line: 495, column: 24, scope: !14540)
!14678 = !DILocation(line: 495, column: 31, scope: !14540)
!14679 = !DILocation(line: 496, column: 24, scope: !14540)
!14680 = !DILocation(line: 496, column: 31, scope: !14540)
!14681 = !DILocation(line: 497, column: 24, scope: !14540)
!14682 = !DILocation(line: 497, column: 31, scope: !14540)
!14683 = !DILocation(line: 498, column: 26, scope: !14540)
!14684 = !DILocation(line: 498, column: 24, scope: !14540)
!14685 = !DILocation(line: 500, column: 15, scope: !14686)
!14686 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 500, column: 15)
!14687 = !DILocation(line: 500, column: 29, scope: !14686)
!14688 = !DILocation(line: 500, column: 15, scope: !14540)
!14689 = !DILocation(line: 502, column: 19, scope: !14690)
!14690 = distinct !DILexicalBlock(scope: !14691, file: !1066, line: 502, column: 19)
!14691 = distinct !DILexicalBlock(scope: !14686, file: !1066, line: 501, column: 13)
!14692 = !DILocation(line: 502, column: 19, scope: !14691)
!14693 = !DILocation(line: 503, column: 17, scope: !14690)
!14694 = !DILocation(line: 504, column: 15, scope: !14691)
!14695 = !DILocation(line: 509, column: 15, scope: !14696)
!14696 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 509, column: 15)
!14697 = !DILocation(line: 509, column: 33, scope: !14696)
!14698 = !DILocation(line: 509, column: 36, scope: !14696)
!14699 = !DILocation(line: 509, column: 55, scope: !14696)
!14700 = !DILocation(line: 509, column: 58, scope: !14696)
!14701 = !DILocation(line: 509, column: 15, scope: !14540)
!14702 = !DILocation(line: 510, column: 13, scope: !14696)
!14703 = !DILabel(scope: !14540, name: "c_and_shell_escape", file: !1066, line: 512)
!14704 = !DILocation(line: 512, column: 9, scope: !14540)
!14705 = !DILocation(line: 513, column: 15, scope: !14706)
!14706 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 513, column: 15)
!14707 = !DILocation(line: 513, column: 29, scope: !14706)
!14708 = !DILocation(line: 514, column: 15, scope: !14706)
!14709 = !DILocation(line: 514, column: 18, scope: !14706)
!14710 = !DILocation(line: 513, column: 15, scope: !14540)
!14711 = !DILocation(line: 515, column: 13, scope: !14706)
!14712 = !DILabel(scope: !14540, name: "c_escape", file: !1066, line: 517)
!14713 = !DILocation(line: 517, column: 9, scope: !14540)
!14714 = !DILocation(line: 518, column: 15, scope: !14715)
!14715 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 518, column: 15)
!14716 = !DILocation(line: 518, column: 15, scope: !14540)
!14717 = !DILocation(line: 520, column: 19, scope: !14718)
!14718 = distinct !DILexicalBlock(scope: !14715, file: !1066, line: 519, column: 13)
!14719 = !DILocation(line: 520, column: 17, scope: !14718)
!14720 = !DILocation(line: 521, column: 15, scope: !14718)
!14721 = !DILocation(line: 523, column: 11, scope: !14540)
!14722 = !DILocation(line: 526, column: 18, scope: !14723)
!14723 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 526, column: 15)
!14724 = !DILocation(line: 526, column: 26, scope: !14723)
!14725 = !DILocation(line: 526, column: 15, scope: !14540)
!14726 = !DILocation(line: 526, column: 40, scope: !14723)
!14727 = !DILocation(line: 526, column: 47, scope: !14723)
!14728 = !DILocation(line: 526, column: 57, scope: !14723)
!14729 = !DILocation(line: 526, column: 65, scope: !14723)
!14730 = !DILocation(line: 527, column: 13, scope: !14723)
!14731 = !DILocation(line: 528, column: 11, scope: !14540)
!14732 = !DILocation(line: 530, column: 15, scope: !14733)
!14733 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 530, column: 15)
!14734 = !DILocation(line: 530, column: 17, scope: !14733)
!14735 = !DILocation(line: 530, column: 15, scope: !14540)
!14736 = !DILocation(line: 531, column: 13, scope: !14733)
!14737 = !DILocation(line: 532, column: 11, scope: !14540)
!14738 = !DILocation(line: 534, column: 36, scope: !14540)
!14739 = !DILocation(line: 535, column: 11, scope: !14540)
!14740 = !DILocation(line: 548, column: 15, scope: !14741)
!14741 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 548, column: 15)
!14742 = !DILocation(line: 548, column: 29, scope: !14741)
!14743 = !DILocation(line: 549, column: 15, scope: !14741)
!14744 = !DILocation(line: 549, column: 18, scope: !14741)
!14745 = !DILocation(line: 548, column: 15, scope: !14540)
!14746 = !DILocation(line: 550, column: 13, scope: !14741)
!14747 = !DILocation(line: 551, column: 11, scope: !14540)
!14748 = !DILocation(line: 554, column: 36, scope: !14540)
!14749 = !DILocation(line: 555, column: 36, scope: !14540)
!14750 = !DILocation(line: 556, column: 15, scope: !14751)
!14751 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 556, column: 15)
!14752 = !DILocation(line: 556, column: 29, scope: !14751)
!14753 = !DILocation(line: 556, column: 15, scope: !14540)
!14754 = !DILocation(line: 558, column: 19, scope: !14755)
!14755 = distinct !DILexicalBlock(scope: !14756, file: !1066, line: 558, column: 19)
!14756 = distinct !DILexicalBlock(scope: !14751, file: !1066, line: 557, column: 13)
!14757 = !DILocation(line: 558, column: 19, scope: !14756)
!14758 = !DILocation(line: 559, column: 17, scope: !14755)
!14759 = !DILocation(line: 561, column: 19, scope: !14760)
!14760 = distinct !DILexicalBlock(scope: !14756, file: !1066, line: 561, column: 19)
!14761 = !DILocation(line: 561, column: 30, scope: !14760)
!14762 = !DILocation(line: 561, column: 35, scope: !14760)
!14763 = !DILocation(line: 561, column: 19, scope: !14756)
!14764 = !DILocation(line: 566, column: 37, scope: !14765)
!14765 = distinct !DILexicalBlock(scope: !14760, file: !1066, line: 562, column: 17)
!14766 = !DILocation(line: 566, column: 35, scope: !14765)
!14767 = !DILocation(line: 567, column: 30, scope: !14765)
!14768 = !DILocation(line: 568, column: 17, scope: !14765)
!14769 = !DILocation(line: 570, column: 15, scope: !14756)
!14770 = !DILocation(line: 570, column: 15, scope: !14771)
!14771 = distinct !DILexicalBlock(scope: !14772, file: !1066, line: 570, column: 15)
!14772 = distinct !DILexicalBlock(scope: !14756, file: !1066, line: 570, column: 15)
!14773 = !DILocation(line: 570, column: 15, scope: !14772)
!14774 = !DILocation(line: 571, column: 15, scope: !14756)
!14775 = !DILocation(line: 571, column: 15, scope: !14776)
!14776 = distinct !DILexicalBlock(scope: !14777, file: !1066, line: 571, column: 15)
!14777 = distinct !DILexicalBlock(scope: !14756, file: !1066, line: 571, column: 15)
!14778 = !DILocation(line: 571, column: 15, scope: !14777)
!14779 = !DILocation(line: 572, column: 15, scope: !14756)
!14780 = !DILocation(line: 572, column: 15, scope: !14781)
!14781 = distinct !DILexicalBlock(scope: !14782, file: !1066, line: 572, column: 15)
!14782 = distinct !DILexicalBlock(scope: !14756, file: !1066, line: 572, column: 15)
!14783 = !DILocation(line: 572, column: 15, scope: !14782)
!14784 = !DILocation(line: 573, column: 40, scope: !14756)
!14785 = !DILocation(line: 574, column: 13, scope: !14756)
!14786 = !DILocation(line: 575, column: 11, scope: !14540)
!14787 = !DILocation(line: 599, column: 36, scope: !14540)
!14788 = !DILocation(line: 600, column: 11, scope: !14540)
!14789 = !DILocalVariable(name: "m", scope: !14790, file: !1066, line: 610, type: !52)
!14790 = distinct !DILexicalBlock(scope: !14540, file: !1066, line: 608, column: 11)
!14791 = !DILocation(line: 610, column: 20, scope: !14790)
!14792 = !DILocalVariable(name: "printable", scope: !14790, file: !1066, line: 612, type: !162)
!14793 = !DILocation(line: 612, column: 18, scope: !14790)
!14794 = !DILocation(line: 614, column: 17, scope: !14795)
!14795 = distinct !DILexicalBlock(scope: !14790, file: !1066, line: 614, column: 17)
!14796 = !DILocation(line: 614, column: 17, scope: !14790)
!14797 = !DILocation(line: 616, column: 19, scope: !14798)
!14798 = distinct !DILexicalBlock(scope: !14795, file: !1066, line: 615, column: 15)
!14799 = !DILocation(line: 617, column: 29, scope: !14798)
!14800 = !DILocation(line: 617, column: 41, scope: !14798)
!14801 = !DILocation(line: 617, column: 27, scope: !14798)
!14802 = !DILocation(line: 618, column: 15, scope: !14798)
!14803 = !DILocalVariable(name: "mbstate", scope: !14804, file: !1066, line: 621, type: !1083)
!14804 = distinct !DILexicalBlock(scope: !14795, file: !1066, line: 620, column: 15)
!14805 = !DILocation(line: 621, column: 27, scope: !14804)
!14806 = !DILocation(line: 622, column: 17, scope: !14804)
!14807 = !DILocation(line: 624, column: 19, scope: !14804)
!14808 = !DILocation(line: 625, column: 27, scope: !14804)
!14809 = !DILocation(line: 626, column: 21, scope: !14810)
!14810 = distinct !DILexicalBlock(scope: !14804, file: !1066, line: 626, column: 21)
!14811 = !DILocation(line: 626, column: 29, scope: !14810)
!14812 = !DILocation(line: 626, column: 21, scope: !14804)
!14813 = !DILocation(line: 627, column: 37, scope: !14810)
!14814 = !DILocation(line: 627, column: 29, scope: !14810)
!14815 = !DILocation(line: 627, column: 27, scope: !14810)
!14816 = !DILocation(line: 627, column: 19, scope: !14810)
!14817 = !DILocation(line: 629, column: 17, scope: !14804)
!14818 = !DILocalVariable(name: "w", scope: !14819, file: !1066, line: 631, type: !1094)
!14819 = distinct !DILexicalBlock(scope: !14804, file: !1066, line: 630, column: 19)
!14820 = !DILocation(line: 631, column: 29, scope: !14819)
!14821 = !DILocalVariable(name: "bytes", scope: !14819, file: !1066, line: 632, type: !52)
!14822 = !DILocation(line: 632, column: 28, scope: !14819)
!14823 = !DILocation(line: 632, column: 50, scope: !14819)
!14824 = !DILocation(line: 632, column: 54, scope: !14819)
!14825 = !DILocation(line: 632, column: 58, scope: !14819)
!14826 = !DILocation(line: 632, column: 56, scope: !14819)
!14827 = !DILocation(line: 633, column: 45, scope: !14819)
!14828 = !DILocation(line: 633, column: 56, scope: !14819)
!14829 = !DILocation(line: 633, column: 60, scope: !14819)
!14830 = !DILocation(line: 633, column: 58, scope: !14819)
!14831 = !DILocation(line: 633, column: 53, scope: !14819)
!14832 = !DILocation(line: 632, column: 36, scope: !14819)
!14833 = !DILocation(line: 634, column: 25, scope: !14834)
!14834 = distinct !DILexicalBlock(scope: !14819, file: !1066, line: 634, column: 25)
!14835 = !DILocation(line: 634, column: 31, scope: !14834)
!14836 = !DILocation(line: 634, column: 25, scope: !14819)
!14837 = !DILocation(line: 635, column: 23, scope: !14834)
!14838 = !DILocation(line: 636, column: 30, scope: !14839)
!14839 = distinct !DILexicalBlock(scope: !14834, file: !1066, line: 636, column: 30)
!14840 = !DILocation(line: 636, column: 36, scope: !14839)
!14841 = !DILocation(line: 636, column: 30, scope: !14834)
!14842 = !DILocation(line: 638, column: 35, scope: !14843)
!14843 = distinct !DILexicalBlock(scope: !14839, file: !1066, line: 637, column: 23)
!14844 = !DILocation(line: 639, column: 25, scope: !14843)
!14845 = !DILocation(line: 641, column: 30, scope: !14846)
!14846 = distinct !DILexicalBlock(scope: !14839, file: !1066, line: 641, column: 30)
!14847 = !DILocation(line: 641, column: 36, scope: !14846)
!14848 = !DILocation(line: 641, column: 30, scope: !14839)
!14849 = !DILocation(line: 643, column: 35, scope: !14850)
!14850 = distinct !DILexicalBlock(scope: !14846, file: !1066, line: 642, column: 23)
!14851 = !DILocation(line: 644, column: 25, scope: !14850)
!14852 = !DILocation(line: 644, column: 32, scope: !14850)
!14853 = !DILocation(line: 644, column: 36, scope: !14850)
!14854 = !DILocation(line: 644, column: 34, scope: !14850)
!14855 = !DILocation(line: 644, column: 40, scope: !14850)
!14856 = !DILocation(line: 644, column: 38, scope: !14850)
!14857 = !DILocation(line: 644, column: 48, scope: !14850)
!14858 = !DILocation(line: 644, column: 51, scope: !14850)
!14859 = !DILocation(line: 644, column: 55, scope: !14850)
!14860 = !DILocation(line: 644, column: 59, scope: !14850)
!14861 = !DILocation(line: 644, column: 57, scope: !14850)
!14862 = !DILocation(line: 0, scope: !14850)
!14863 = !DILocation(line: 645, column: 28, scope: !14850)
!14864 = distinct !{!14864, !14851, !14863}
!14865 = !DILocation(line: 646, column: 25, scope: !14850)
!14866 = !DILocation(line: 654, column: 44, scope: !14867)
!14867 = distinct !DILexicalBlock(scope: !14868, file: !1066, line: 654, column: 29)
!14868 = distinct !DILexicalBlock(scope: !14846, file: !1066, line: 649, column: 23)
!14869 = !DILocation(line: 655, column: 29, scope: !14867)
!14870 = !DILocation(line: 655, column: 32, scope: !14867)
!14871 = !DILocation(line: 655, column: 46, scope: !14867)
!14872 = !DILocation(line: 654, column: 29, scope: !14868)
!14873 = !DILocalVariable(name: "j", scope: !14874, file: !1066, line: 657, type: !52)
!14874 = distinct !DILexicalBlock(scope: !14867, file: !1066, line: 656, column: 27)
!14875 = !DILocation(line: 657, column: 36, scope: !14874)
!14876 = !DILocation(line: 658, column: 36, scope: !14877)
!14877 = distinct !DILexicalBlock(scope: !14874, file: !1066, line: 658, column: 29)
!14878 = !DILocation(line: 658, column: 34, scope: !14877)
!14879 = !DILocation(line: 658, column: 41, scope: !14880)
!14880 = distinct !DILexicalBlock(scope: !14877, file: !1066, line: 658, column: 29)
!14881 = !DILocation(line: 658, column: 45, scope: !14880)
!14882 = !DILocation(line: 658, column: 43, scope: !14880)
!14883 = !DILocation(line: 658, column: 29, scope: !14877)
!14884 = !DILocation(line: 659, column: 39, scope: !14880)
!14885 = !DILocation(line: 659, column: 43, scope: !14880)
!14886 = !DILocation(line: 659, column: 47, scope: !14880)
!14887 = !DILocation(line: 659, column: 45, scope: !14880)
!14888 = !DILocation(line: 659, column: 51, scope: !14880)
!14889 = !DILocation(line: 659, column: 49, scope: !14880)
!14890 = !DILocation(line: 659, column: 31, scope: !14880)
!14891 = !DILocation(line: 663, column: 35, scope: !14892)
!14892 = distinct !DILexicalBlock(scope: !14880, file: !1066, line: 660, column: 33)
!14893 = !DILocation(line: 666, column: 35, scope: !14892)
!14894 = !DILocation(line: 667, column: 33, scope: !14892)
!14895 = !DILocation(line: 658, column: 53, scope: !14880)
!14896 = !DILocation(line: 658, column: 29, scope: !14880)
!14897 = distinct !{!14897, !14883, !14898}
!14898 = !DILocation(line: 667, column: 33, scope: !14877)
!14899 = !DILocation(line: 668, column: 27, scope: !14874)
!14900 = !DILocation(line: 670, column: 41, scope: !14901)
!14901 = distinct !DILexicalBlock(scope: !14868, file: !1066, line: 670, column: 29)
!14902 = !DILocation(line: 670, column: 31, scope: !14901)
!14903 = !DILocation(line: 670, column: 29, scope: !14868)
!14904 = !DILocation(line: 671, column: 37, scope: !14901)
!14905 = !DILocation(line: 671, column: 27, scope: !14901)
!14906 = !DILocation(line: 672, column: 30, scope: !14868)
!14907 = !DILocation(line: 672, column: 27, scope: !14868)
!14908 = !DILocation(line: 674, column: 19, scope: !14819)
!14909 = !DILocation(line: 675, column: 26, scope: !14804)
!14910 = !DILocation(line: 675, column: 24, scope: !14804)
!14911 = distinct !{!14911, !14817, !14912}
!14912 = !DILocation(line: 675, column: 44, scope: !14804)
!14913 = !DILocation(line: 678, column: 40, scope: !14790)
!14914 = !DILocation(line: 678, column: 38, scope: !14790)
!14915 = !DILocation(line: 680, column: 21, scope: !14916)
!14916 = distinct !DILexicalBlock(scope: !14790, file: !1066, line: 680, column: 17)
!14917 = !DILocation(line: 680, column: 19, scope: !14916)
!14918 = !DILocation(line: 680, column: 23, scope: !14916)
!14919 = !DILocation(line: 680, column: 27, scope: !14916)
!14920 = !DILocation(line: 680, column: 45, scope: !14916)
!14921 = !DILocation(line: 680, column: 50, scope: !14916)
!14922 = !DILocation(line: 680, column: 17, scope: !14790)
!14923 = !DILocalVariable(name: "ilim", scope: !14924, file: !1066, line: 684, type: !52)
!14924 = distinct !DILexicalBlock(scope: !14916, file: !1066, line: 681, column: 15)
!14925 = !DILocation(line: 684, column: 24, scope: !14924)
!14926 = !DILocation(line: 684, column: 31, scope: !14924)
!14927 = !DILocation(line: 684, column: 35, scope: !14924)
!14928 = !DILocation(line: 684, column: 33, scope: !14924)
!14929 = !DILocation(line: 686, column: 17, scope: !14924)
!14930 = !DILocation(line: 688, column: 25, scope: !14931)
!14931 = distinct !DILexicalBlock(scope: !14932, file: !1066, line: 688, column: 25)
!14932 = distinct !DILexicalBlock(scope: !14933, file: !1066, line: 687, column: 19)
!14933 = distinct !DILexicalBlock(scope: !14934, file: !1066, line: 686, column: 17)
!14934 = distinct !DILexicalBlock(scope: !14924, file: !1066, line: 686, column: 17)
!14935 = !DILocation(line: 688, column: 43, scope: !14931)
!14936 = !DILocation(line: 688, column: 48, scope: !14931)
!14937 = !DILocation(line: 688, column: 25, scope: !14932)
!14938 = !DILocation(line: 690, column: 25, scope: !14939)
!14939 = distinct !DILexicalBlock(scope: !14931, file: !1066, line: 689, column: 23)
!14940 = !DILocation(line: 690, column: 25, scope: !14941)
!14941 = distinct !DILexicalBlock(scope: !14942, file: !1066, line: 690, column: 25)
!14942 = distinct !DILexicalBlock(scope: !14939, file: !1066, line: 690, column: 25)
!14943 = !DILocation(line: 690, column: 25, scope: !14942)
!14944 = !DILocation(line: 690, column: 25, scope: !14945)
!14945 = distinct !DILexicalBlock(scope: !14942, file: !1066, line: 690, column: 25)
!14946 = !DILocation(line: 690, column: 25, scope: !14947)
!14947 = distinct !DILexicalBlock(scope: !14945, file: !1066, line: 690, column: 25)
!14948 = !DILocation(line: 690, column: 25, scope: !14949)
!14949 = distinct !DILexicalBlock(scope: !14950, file: !1066, line: 690, column: 25)
!14950 = distinct !DILexicalBlock(scope: !14947, file: !1066, line: 690, column: 25)
!14951 = !DILocation(line: 690, column: 25, scope: !14950)
!14952 = !DILocation(line: 690, column: 25, scope: !14953)
!14953 = distinct !DILexicalBlock(scope: !14954, file: !1066, line: 690, column: 25)
!14954 = distinct !DILexicalBlock(scope: !14947, file: !1066, line: 690, column: 25)
!14955 = !DILocation(line: 690, column: 25, scope: !14954)
!14956 = !DILocation(line: 690, column: 25, scope: !14957)
!14957 = distinct !DILexicalBlock(scope: !14958, file: !1066, line: 690, column: 25)
!14958 = distinct !DILexicalBlock(scope: !14947, file: !1066, line: 690, column: 25)
!14959 = !DILocation(line: 690, column: 25, scope: !14958)
!14960 = !DILocation(line: 690, column: 25, scope: !14961)
!14961 = distinct !DILexicalBlock(scope: !14962, file: !1066, line: 690, column: 25)
!14962 = distinct !DILexicalBlock(scope: !14942, file: !1066, line: 690, column: 25)
!14963 = !DILocation(line: 690, column: 25, scope: !14962)
!14964 = !DILocation(line: 691, column: 25, scope: !14939)
!14965 = !DILocation(line: 691, column: 25, scope: !14966)
!14966 = distinct !DILexicalBlock(scope: !14967, file: !1066, line: 691, column: 25)
!14967 = distinct !DILexicalBlock(scope: !14939, file: !1066, line: 691, column: 25)
!14968 = !DILocation(line: 691, column: 25, scope: !14967)
!14969 = !DILocation(line: 692, column: 25, scope: !14939)
!14970 = !DILocation(line: 692, column: 25, scope: !14971)
!14971 = distinct !DILexicalBlock(scope: !14972, file: !1066, line: 692, column: 25)
!14972 = distinct !DILexicalBlock(scope: !14939, file: !1066, line: 692, column: 25)
!14973 = !DILocation(line: 692, column: 25, scope: !14972)
!14974 = !DILocation(line: 693, column: 36, scope: !14939)
!14975 = !DILocation(line: 693, column: 38, scope: !14939)
!14976 = !DILocation(line: 693, column: 33, scope: !14939)
!14977 = !DILocation(line: 693, column: 29, scope: !14939)
!14978 = !DILocation(line: 693, column: 27, scope: !14939)
!14979 = !DILocation(line: 694, column: 23, scope: !14939)
!14980 = !DILocation(line: 695, column: 30, scope: !14981)
!14981 = distinct !DILexicalBlock(scope: !14931, file: !1066, line: 695, column: 30)
!14982 = !DILocation(line: 695, column: 30, scope: !14931)
!14983 = !DILocation(line: 697, column: 25, scope: !14984)
!14984 = distinct !DILexicalBlock(scope: !14981, file: !1066, line: 696, column: 23)
!14985 = !DILocation(line: 697, column: 25, scope: !14986)
!14986 = distinct !DILexicalBlock(scope: !14987, file: !1066, line: 697, column: 25)
!14987 = distinct !DILexicalBlock(scope: !14984, file: !1066, line: 697, column: 25)
!14988 = !DILocation(line: 697, column: 25, scope: !14987)
!14989 = !DILocation(line: 698, column: 40, scope: !14984)
!14990 = !DILocation(line: 699, column: 23, scope: !14984)
!14991 = !DILocation(line: 700, column: 25, scope: !14992)
!14992 = distinct !DILexicalBlock(scope: !14932, file: !1066, line: 700, column: 25)
!14993 = !DILocation(line: 700, column: 33, scope: !14992)
!14994 = !DILocation(line: 700, column: 35, scope: !14992)
!14995 = !DILocation(line: 700, column: 30, scope: !14992)
!14996 = !DILocation(line: 700, column: 25, scope: !14932)
!14997 = !DILocation(line: 701, column: 23, scope: !14992)
!14998 = !DILocation(line: 702, column: 21, scope: !14932)
!14999 = !DILocation(line: 702, column: 21, scope: !15000)
!15000 = distinct !DILexicalBlock(scope: !15001, file: !1066, line: 702, column: 21)
!15001 = distinct !DILexicalBlock(scope: !14932, file: !1066, line: 702, column: 21)
!15002 = !DILocation(line: 702, column: 21, scope: !15001)
!15003 = !DILocation(line: 702, column: 21, scope: !15004)
!15004 = distinct !DILexicalBlock(scope: !15000, file: !1066, line: 702, column: 21)
!15005 = !DILocation(line: 702, column: 21, scope: !15006)
!15006 = distinct !DILexicalBlock(scope: !15007, file: !1066, line: 702, column: 21)
!15007 = distinct !DILexicalBlock(scope: !15004, file: !1066, line: 702, column: 21)
!15008 = !DILocation(line: 702, column: 21, scope: !15007)
!15009 = !DILocation(line: 702, column: 21, scope: !15010)
!15010 = distinct !DILexicalBlock(scope: !15011, file: !1066, line: 702, column: 21)
!15011 = distinct !DILexicalBlock(scope: !15004, file: !1066, line: 702, column: 21)
!15012 = !DILocation(line: 702, column: 21, scope: !15011)
!15013 = !DILocation(line: 703, column: 21, scope: !14932)
!15014 = !DILocation(line: 703, column: 21, scope: !15015)
!15015 = distinct !DILexicalBlock(scope: !15016, file: !1066, line: 703, column: 21)
!15016 = distinct !DILexicalBlock(scope: !14932, file: !1066, line: 703, column: 21)
!15017 = !DILocation(line: 703, column: 21, scope: !15016)
!15018 = !DILocation(line: 704, column: 25, scope: !14932)
!15019 = !DILocation(line: 704, column: 29, scope: !14932)
!15020 = !DILocation(line: 704, column: 23, scope: !14932)
!15021 = !DILocation(line: 686, column: 17, scope: !14933)
!15022 = distinct !{!15022, !15023, !15024}
!15023 = !DILocation(line: 686, column: 17, scope: !14934)
!15024 = !DILocation(line: 705, column: 19, scope: !14934)
!15025 = !DILocation(line: 707, column: 17, scope: !14924)
!15026 = !DILocation(line: 710, column: 9, scope: !14540)
!15027 = !DILocation(line: 712, column: 16, scope: !15028)
!15028 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 712, column: 11)
!15029 = !DILocation(line: 712, column: 34, scope: !15028)
!15030 = !DILocation(line: 712, column: 37, scope: !15028)
!15031 = !DILocation(line: 712, column: 51, scope: !15028)
!15032 = !DILocation(line: 713, column: 15, scope: !15028)
!15033 = !DILocation(line: 713, column: 18, scope: !15028)
!15034 = !DILocation(line: 714, column: 14, scope: !15028)
!15035 = !DILocation(line: 714, column: 17, scope: !15028)
!15036 = !DILocation(line: 715, column: 14, scope: !15028)
!15037 = !DILocation(line: 715, column: 17, scope: !15028)
!15038 = !DILocation(line: 715, column: 33, scope: !15028)
!15039 = !DILocation(line: 715, column: 35, scope: !15028)
!15040 = !DILocation(line: 715, column: 51, scope: !15028)
!15041 = !DILocation(line: 715, column: 53, scope: !15028)
!15042 = !DILocation(line: 715, column: 47, scope: !15028)
!15043 = !DILocation(line: 715, column: 65, scope: !15028)
!15044 = !DILocation(line: 716, column: 11, scope: !15028)
!15045 = !DILocation(line: 716, column: 15, scope: !15028)
!15046 = !DILocation(line: 712, column: 11, scope: !14486)
!15047 = !DILocation(line: 717, column: 9, scope: !15028)
!15048 = !DILabel(scope: !14486, name: "store_escape", file: !1066, line: 719)
!15049 = !DILocation(line: 719, column: 5, scope: !14486)
!15050 = !DILocation(line: 720, column: 7, scope: !14486)
!15051 = !DILocation(line: 720, column: 7, scope: !15052)
!15052 = distinct !DILexicalBlock(scope: !15053, file: !1066, line: 720, column: 7)
!15053 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 720, column: 7)
!15054 = !DILocation(line: 720, column: 7, scope: !15053)
!15055 = !DILocation(line: 720, column: 7, scope: !15056)
!15056 = distinct !DILexicalBlock(scope: !15053, file: !1066, line: 720, column: 7)
!15057 = !DILocation(line: 720, column: 7, scope: !15058)
!15058 = distinct !DILexicalBlock(scope: !15056, file: !1066, line: 720, column: 7)
!15059 = !DILocation(line: 720, column: 7, scope: !15060)
!15060 = distinct !DILexicalBlock(scope: !15061, file: !1066, line: 720, column: 7)
!15061 = distinct !DILexicalBlock(scope: !15058, file: !1066, line: 720, column: 7)
!15062 = !DILocation(line: 720, column: 7, scope: !15061)
!15063 = !DILocation(line: 720, column: 7, scope: !15064)
!15064 = distinct !DILexicalBlock(scope: !15065, file: !1066, line: 720, column: 7)
!15065 = distinct !DILexicalBlock(scope: !15058, file: !1066, line: 720, column: 7)
!15066 = !DILocation(line: 720, column: 7, scope: !15065)
!15067 = !DILocation(line: 720, column: 7, scope: !15068)
!15068 = distinct !DILexicalBlock(scope: !15069, file: !1066, line: 720, column: 7)
!15069 = distinct !DILexicalBlock(scope: !15058, file: !1066, line: 720, column: 7)
!15070 = !DILocation(line: 720, column: 7, scope: !15069)
!15071 = !DILocation(line: 720, column: 7, scope: !15072)
!15072 = distinct !DILexicalBlock(scope: !15073, file: !1066, line: 720, column: 7)
!15073 = distinct !DILexicalBlock(scope: !15053, file: !1066, line: 720, column: 7)
!15074 = !DILocation(line: 720, column: 7, scope: !15073)
!15075 = !DILabel(scope: !14486, name: "store_c", file: !1066, line: 722)
!15076 = !DILocation(line: 722, column: 5, scope: !14486)
!15077 = !DILocation(line: 723, column: 7, scope: !14486)
!15078 = !DILocation(line: 723, column: 7, scope: !15079)
!15079 = distinct !DILexicalBlock(scope: !15080, file: !1066, line: 723, column: 7)
!15080 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 723, column: 7)
!15081 = !DILocation(line: 723, column: 7, scope: !15080)
!15082 = !DILocation(line: 723, column: 7, scope: !15083)
!15083 = distinct !DILexicalBlock(scope: !15079, file: !1066, line: 723, column: 7)
!15084 = !DILocation(line: 723, column: 7, scope: !15085)
!15085 = distinct !DILexicalBlock(scope: !15086, file: !1066, line: 723, column: 7)
!15086 = distinct !DILexicalBlock(scope: !15083, file: !1066, line: 723, column: 7)
!15087 = !DILocation(line: 723, column: 7, scope: !15086)
!15088 = !DILocation(line: 723, column: 7, scope: !15089)
!15089 = distinct !DILexicalBlock(scope: !15090, file: !1066, line: 723, column: 7)
!15090 = distinct !DILexicalBlock(scope: !15083, file: !1066, line: 723, column: 7)
!15091 = !DILocation(line: 723, column: 7, scope: !15090)
!15092 = !DILocation(line: 724, column: 7, scope: !14486)
!15093 = !DILocation(line: 724, column: 7, scope: !15094)
!15094 = distinct !DILexicalBlock(scope: !15095, file: !1066, line: 724, column: 7)
!15095 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 724, column: 7)
!15096 = !DILocation(line: 724, column: 7, scope: !15095)
!15097 = !DILocation(line: 726, column: 13, scope: !15098)
!15098 = distinct !DILexicalBlock(scope: !14486, file: !1066, line: 726, column: 11)
!15099 = !DILocation(line: 726, column: 11, scope: !14486)
!15100 = !DILocation(line: 727, column: 38, scope: !15098)
!15101 = !DILocation(line: 727, column: 9, scope: !15098)
!15102 = !DILocation(line: 728, column: 5, scope: !14486)
!15103 = !DILocation(line: 400, column: 75, scope: !14475)
!15104 = !DILocation(line: 400, column: 3, scope: !14475)
!15105 = distinct !{!15105, !14484, !15106}
!15106 = !DILocation(line: 728, column: 5, scope: !14472)
!15107 = !DILocation(line: 730, column: 7, scope: !15108)
!15108 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 730, column: 7)
!15109 = !DILocation(line: 730, column: 11, scope: !15108)
!15110 = !DILocation(line: 730, column: 16, scope: !15108)
!15111 = !DILocation(line: 730, column: 19, scope: !15108)
!15112 = !DILocation(line: 730, column: 33, scope: !15108)
!15113 = !DILocation(line: 731, column: 7, scope: !15108)
!15114 = !DILocation(line: 731, column: 10, scope: !15108)
!15115 = !DILocation(line: 730, column: 7, scope: !14334)
!15116 = !DILocation(line: 732, column: 5, scope: !15108)
!15117 = !DILocation(line: 738, column: 7, scope: !15118)
!15118 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 738, column: 7)
!15119 = !DILocation(line: 738, column: 21, scope: !15118)
!15120 = !DILocation(line: 738, column: 51, scope: !15118)
!15121 = !DILocation(line: 738, column: 56, scope: !15118)
!15122 = !DILocation(line: 739, column: 7, scope: !15118)
!15123 = !DILocation(line: 739, column: 10, scope: !15118)
!15124 = !DILocation(line: 738, column: 7, scope: !14334)
!15125 = !DILocation(line: 741, column: 11, scope: !15126)
!15126 = distinct !DILexicalBlock(scope: !15127, file: !1066, line: 741, column: 11)
!15127 = distinct !DILexicalBlock(scope: !15118, file: !1066, line: 740, column: 5)
!15128 = !DILocation(line: 741, column: 11, scope: !15127)
!15129 = !DILocation(line: 742, column: 42, scope: !15126)
!15130 = !DILocation(line: 742, column: 50, scope: !15126)
!15131 = !DILocation(line: 742, column: 67, scope: !15126)
!15132 = !DILocation(line: 742, column: 72, scope: !15126)
!15133 = !DILocation(line: 744, column: 42, scope: !15126)
!15134 = !DILocation(line: 744, column: 49, scope: !15126)
!15135 = !DILocation(line: 745, column: 42, scope: !15126)
!15136 = !DILocation(line: 745, column: 54, scope: !15126)
!15137 = !DILocation(line: 742, column: 16, scope: !15126)
!15138 = !DILocation(line: 742, column: 9, scope: !15126)
!15139 = !DILocation(line: 746, column: 18, scope: !15140)
!15140 = distinct !DILexicalBlock(scope: !15126, file: !1066, line: 746, column: 16)
!15141 = !DILocation(line: 746, column: 29, scope: !15140)
!15142 = !DILocation(line: 746, column: 32, scope: !15140)
!15143 = !DILocation(line: 746, column: 16, scope: !15126)
!15144 = !DILocation(line: 749, column: 24, scope: !15145)
!15145 = distinct !DILexicalBlock(scope: !15140, file: !1066, line: 747, column: 9)
!15146 = !DILocation(line: 749, column: 22, scope: !15145)
!15147 = !DILocation(line: 750, column: 15, scope: !15145)
!15148 = !DILocation(line: 751, column: 11, scope: !15145)
!15149 = !DILocation(line: 753, column: 5, scope: !15127)
!15150 = !DILocation(line: 755, column: 7, scope: !15151)
!15151 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 755, column: 7)
!15152 = !DILocation(line: 755, column: 20, scope: !15151)
!15153 = !DILocation(line: 755, column: 24, scope: !15151)
!15154 = !DILocation(line: 755, column: 7, scope: !14334)
!15155 = !DILocation(line: 756, column: 5, scope: !15151)
!15156 = !DILocation(line: 756, column: 13, scope: !15157)
!15157 = distinct !DILexicalBlock(scope: !15158, file: !1066, line: 756, column: 5)
!15158 = distinct !DILexicalBlock(scope: !15151, file: !1066, line: 756, column: 5)
!15159 = !DILocation(line: 756, column: 12, scope: !15157)
!15160 = !DILocation(line: 756, column: 5, scope: !15158)
!15161 = !DILocation(line: 757, column: 7, scope: !15157)
!15162 = !DILocation(line: 757, column: 7, scope: !15163)
!15163 = distinct !DILexicalBlock(scope: !15164, file: !1066, line: 757, column: 7)
!15164 = distinct !DILexicalBlock(scope: !15157, file: !1066, line: 757, column: 7)
!15165 = !DILocation(line: 757, column: 7, scope: !15164)
!15166 = !DILocation(line: 756, column: 39, scope: !15157)
!15167 = !DILocation(line: 756, column: 5, scope: !15157)
!15168 = distinct !{!15168, !15160, !15169}
!15169 = !DILocation(line: 757, column: 7, scope: !15158)
!15170 = !DILocation(line: 759, column: 7, scope: !15171)
!15171 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 759, column: 7)
!15172 = !DILocation(line: 759, column: 13, scope: !15171)
!15173 = !DILocation(line: 759, column: 11, scope: !15171)
!15174 = !DILocation(line: 759, column: 7, scope: !14334)
!15175 = !DILocation(line: 760, column: 5, scope: !15171)
!15176 = !DILocation(line: 760, column: 12, scope: !15171)
!15177 = !DILocation(line: 760, column: 17, scope: !15171)
!15178 = !DILocation(line: 761, column: 10, scope: !14334)
!15179 = !DILocation(line: 761, column: 3, scope: !14334)
!15180 = !DILabel(scope: !14334, name: "force_outer_quoting_style", file: !1066, line: 763)
!15181 = !DILocation(line: 763, column: 2, scope: !14334)
!15182 = !DILocation(line: 766, column: 7, scope: !15183)
!15183 = distinct !DILexicalBlock(scope: !14334, file: !1066, line: 766, column: 7)
!15184 = !DILocation(line: 766, column: 21, scope: !15183)
!15185 = !DILocation(line: 766, column: 51, scope: !15183)
!15186 = !DILocation(line: 766, column: 54, scope: !15183)
!15187 = !DILocation(line: 766, column: 7, scope: !14334)
!15188 = !DILocation(line: 767, column: 19, scope: !15183)
!15189 = !DILocation(line: 767, column: 5, scope: !15183)
!15190 = !DILocation(line: 768, column: 36, scope: !14334)
!15191 = !DILocation(line: 768, column: 44, scope: !14334)
!15192 = !DILocation(line: 768, column: 56, scope: !14334)
!15193 = !DILocation(line: 768, column: 61, scope: !14334)
!15194 = !DILocation(line: 769, column: 36, scope: !14334)
!15195 = !DILocation(line: 770, column: 36, scope: !14334)
!15196 = !DILocation(line: 770, column: 42, scope: !14334)
!15197 = !DILocation(line: 771, column: 36, scope: !14334)
!15198 = !DILocation(line: 771, column: 48, scope: !14334)
!15199 = !DILocation(line: 768, column: 10, scope: !14334)
!15200 = !DILocation(line: 768, column: 3, scope: !14334)
!15201 = !DILocation(line: 772, column: 1, scope: !14334)
!15202 = distinct !DISubprogram(name: "gettext_quote", scope: !1066, file: !1066, line: 207, type: !15203, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15203 = !DISubroutineType(types: !15204)
!15204 = !{!90, !90, !1046}
!15205 = !DILocalVariable(name: "msgid", arg: 1, scope: !15202, file: !1066, line: 207, type: !90)
!15206 = !DILocation(line: 207, column: 28, scope: !15202)
!15207 = !DILocalVariable(name: "s", arg: 2, scope: !15202, file: !1066, line: 207, type: !1046)
!15208 = !DILocation(line: 207, column: 54, scope: !15202)
!15209 = !DILocalVariable(name: "translation", scope: !15202, file: !1066, line: 209, type: !90)
!15210 = !DILocation(line: 209, column: 15, scope: !15202)
!15211 = !DILocation(line: 209, column: 29, scope: !15202)
!15212 = !DILocalVariable(name: "locale_code", scope: !15202, file: !1066, line: 210, type: !90)
!15213 = !DILocation(line: 210, column: 15, scope: !15202)
!15214 = !DILocation(line: 212, column: 7, scope: !15215)
!15215 = distinct !DILexicalBlock(scope: !15202, file: !1066, line: 212, column: 7)
!15216 = !DILocation(line: 212, column: 22, scope: !15215)
!15217 = !DILocation(line: 212, column: 19, scope: !15215)
!15218 = !DILocation(line: 212, column: 7, scope: !15202)
!15219 = !DILocation(line: 213, column: 12, scope: !15215)
!15220 = !DILocation(line: 213, column: 5, scope: !15215)
!15221 = !DILocation(line: 233, column: 17, scope: !15202)
!15222 = !DILocation(line: 233, column: 15, scope: !15202)
!15223 = !DILocation(line: 234, column: 7, scope: !15224)
!15224 = distinct !DILexicalBlock(scope: !15202, file: !1066, line: 234, column: 7)
!15225 = !DILocation(line: 234, column: 7, scope: !15202)
!15226 = !DILocation(line: 235, column: 12, scope: !15224)
!15227 = !DILocation(line: 235, column: 21, scope: !15224)
!15228 = !DILocation(line: 235, column: 5, scope: !15224)
!15229 = !DILocation(line: 236, column: 7, scope: !15230)
!15230 = distinct !DILexicalBlock(scope: !15202, file: !1066, line: 236, column: 7)
!15231 = !DILocation(line: 236, column: 7, scope: !15202)
!15232 = !DILocation(line: 237, column: 12, scope: !15230)
!15233 = !DILocation(line: 237, column: 21, scope: !15230)
!15234 = !DILocation(line: 237, column: 5, scope: !15230)
!15235 = !DILocation(line: 239, column: 11, scope: !15202)
!15236 = !DILocation(line: 239, column: 13, scope: !15202)
!15237 = !DILocation(line: 239, column: 3, scope: !15202)
!15238 = !DILocation(line: 240, column: 1, scope: !15202)
!15239 = distinct !DISubprogram(name: "quotearg_alloc", scope: !1066, file: !1066, line: 799, type: !15240, scopeLine: 801, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15240 = !DISubroutineType(types: !15241)
!15241 = !{!7, !90, !52, !1075}
!15242 = !DILocalVariable(name: "arg", arg: 1, scope: !15239, file: !1066, line: 799, type: !90)
!15243 = !DILocation(line: 799, column: 29, scope: !15239)
!15244 = !DILocalVariable(name: "argsize", arg: 2, scope: !15239, file: !1066, line: 799, type: !52)
!15245 = !DILocation(line: 799, column: 41, scope: !15239)
!15246 = !DILocalVariable(name: "o", arg: 3, scope: !15239, file: !1066, line: 800, type: !1075)
!15247 = !DILocation(line: 800, column: 47, scope: !15239)
!15248 = !DILocation(line: 802, column: 30, scope: !15239)
!15249 = !DILocation(line: 802, column: 35, scope: !15239)
!15250 = !DILocation(line: 802, column: 50, scope: !15239)
!15251 = !DILocation(line: 802, column: 10, scope: !15239)
!15252 = !DILocation(line: 802, column: 3, scope: !15239)
!15253 = distinct !DISubprogram(name: "quotearg_alloc_mem", scope: !1066, file: !1066, line: 812, type: !15254, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15254 = !DISubroutineType(types: !15255)
!15255 = !{!7, !90, !52, !618, !1075}
!15256 = !DILocalVariable(name: "arg", arg: 1, scope: !15253, file: !1066, line: 812, type: !90)
!15257 = !DILocation(line: 812, column: 33, scope: !15253)
!15258 = !DILocalVariable(name: "argsize", arg: 2, scope: !15253, file: !1066, line: 812, type: !52)
!15259 = !DILocation(line: 812, column: 45, scope: !15253)
!15260 = !DILocalVariable(name: "size", arg: 3, scope: !15253, file: !1066, line: 812, type: !618)
!15261 = !DILocation(line: 812, column: 62, scope: !15253)
!15262 = !DILocalVariable(name: "o", arg: 4, scope: !15253, file: !1066, line: 813, type: !1075)
!15263 = !DILocation(line: 813, column: 51, scope: !15253)
!15264 = !DILocalVariable(name: "p", scope: !15253, file: !1066, line: 815, type: !1075)
!15265 = !DILocation(line: 815, column: 33, scope: !15253)
!15266 = !DILocation(line: 815, column: 37, scope: !15253)
!15267 = !DILocation(line: 815, column: 41, scope: !15253)
!15268 = !DILocalVariable(name: "e", scope: !15253, file: !1066, line: 816, type: !5)
!15269 = !DILocation(line: 816, column: 7, scope: !15253)
!15270 = !DILocation(line: 816, column: 11, scope: !15253)
!15271 = !DILocalVariable(name: "flags", scope: !15253, file: !1066, line: 818, type: !5)
!15272 = !DILocation(line: 818, column: 7, scope: !15253)
!15273 = !DILocation(line: 818, column: 15, scope: !15253)
!15274 = !DILocation(line: 818, column: 18, scope: !15253)
!15275 = !DILocation(line: 818, column: 27, scope: !15253)
!15276 = !DILocation(line: 818, column: 24, scope: !15253)
!15277 = !DILocalVariable(name: "bufsize", scope: !15253, file: !1066, line: 819, type: !52)
!15278 = !DILocation(line: 819, column: 10, scope: !15253)
!15279 = !DILocation(line: 819, column: 52, scope: !15253)
!15280 = !DILocation(line: 819, column: 57, scope: !15253)
!15281 = !DILocation(line: 819, column: 66, scope: !15253)
!15282 = !DILocation(line: 819, column: 69, scope: !15253)
!15283 = !DILocation(line: 820, column: 46, scope: !15253)
!15284 = !DILocation(line: 820, column: 53, scope: !15253)
!15285 = !DILocation(line: 820, column: 56, scope: !15253)
!15286 = !DILocation(line: 821, column: 46, scope: !15253)
!15287 = !DILocation(line: 821, column: 49, scope: !15253)
!15288 = !DILocation(line: 822, column: 46, scope: !15253)
!15289 = !DILocation(line: 822, column: 49, scope: !15253)
!15290 = !DILocation(line: 819, column: 20, scope: !15253)
!15291 = !DILocation(line: 822, column: 62, scope: !15253)
!15292 = !DILocalVariable(name: "buf", scope: !15253, file: !1066, line: 823, type: !7)
!15293 = !DILocation(line: 823, column: 9, scope: !15253)
!15294 = !DILocation(line: 823, column: 27, scope: !15253)
!15295 = !DILocation(line: 823, column: 15, scope: !15253)
!15296 = !DILocation(line: 824, column: 29, scope: !15253)
!15297 = !DILocation(line: 824, column: 34, scope: !15253)
!15298 = !DILocation(line: 824, column: 43, scope: !15253)
!15299 = !DILocation(line: 824, column: 48, scope: !15253)
!15300 = !DILocation(line: 824, column: 57, scope: !15253)
!15301 = !DILocation(line: 824, column: 60, scope: !15253)
!15302 = !DILocation(line: 824, column: 67, scope: !15253)
!15303 = !DILocation(line: 825, column: 29, scope: !15253)
!15304 = !DILocation(line: 825, column: 32, scope: !15253)
!15305 = !DILocation(line: 826, column: 29, scope: !15253)
!15306 = !DILocation(line: 826, column: 32, scope: !15253)
!15307 = !DILocation(line: 826, column: 44, scope: !15253)
!15308 = !DILocation(line: 826, column: 47, scope: !15253)
!15309 = !DILocation(line: 824, column: 3, scope: !15253)
!15310 = !DILocation(line: 827, column: 11, scope: !15253)
!15311 = !DILocation(line: 827, column: 3, scope: !15253)
!15312 = !DILocation(line: 827, column: 9, scope: !15253)
!15313 = !DILocation(line: 828, column: 7, scope: !15314)
!15314 = distinct !DILexicalBlock(scope: !15253, file: !1066, line: 828, column: 7)
!15315 = !DILocation(line: 828, column: 7, scope: !15253)
!15316 = !DILocation(line: 829, column: 13, scope: !15314)
!15317 = !DILocation(line: 829, column: 21, scope: !15314)
!15318 = !DILocation(line: 829, column: 6, scope: !15314)
!15319 = !DILocation(line: 829, column: 11, scope: !15314)
!15320 = !DILocation(line: 829, column: 5, scope: !15314)
!15321 = !DILocation(line: 830, column: 10, scope: !15253)
!15322 = !DILocation(line: 830, column: 3, scope: !15253)
!15323 = distinct !DISubprogram(name: "quotearg_free", scope: !1066, file: !1066, line: 848, type: !235, scopeLine: 849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15324 = !DILocalVariable(name: "sv", scope: !15323, file: !1066, line: 850, type: !1078)
!15325 = !DILocation(line: 850, column: 19, scope: !15323)
!15326 = !DILocation(line: 850, column: 24, scope: !15323)
!15327 = !DILocalVariable(name: "i", scope: !15323, file: !1066, line: 851, type: !5)
!15328 = !DILocation(line: 851, column: 7, scope: !15323)
!15329 = !DILocation(line: 852, column: 10, scope: !15330)
!15330 = distinct !DILexicalBlock(scope: !15323, file: !1066, line: 852, column: 3)
!15331 = !DILocation(line: 852, column: 8, scope: !15330)
!15332 = !DILocation(line: 852, column: 15, scope: !15333)
!15333 = distinct !DILexicalBlock(scope: !15330, file: !1066, line: 852, column: 3)
!15334 = !DILocation(line: 852, column: 19, scope: !15333)
!15335 = !DILocation(line: 852, column: 17, scope: !15333)
!15336 = !DILocation(line: 852, column: 3, scope: !15330)
!15337 = !DILocation(line: 853, column: 11, scope: !15333)
!15338 = !DILocation(line: 853, column: 14, scope: !15333)
!15339 = !DILocation(line: 853, column: 17, scope: !15333)
!15340 = !DILocation(line: 853, column: 5, scope: !15333)
!15341 = !DILocation(line: 852, column: 28, scope: !15333)
!15342 = !DILocation(line: 852, column: 3, scope: !15333)
!15343 = distinct !{!15343, !15336, !15344}
!15344 = !DILocation(line: 853, column: 20, scope: !15330)
!15345 = !DILocation(line: 854, column: 7, scope: !15346)
!15346 = distinct !DILexicalBlock(scope: !15323, file: !1066, line: 854, column: 7)
!15347 = !DILocation(line: 854, column: 13, scope: !15346)
!15348 = !DILocation(line: 854, column: 17, scope: !15346)
!15349 = !DILocation(line: 854, column: 7, scope: !15323)
!15350 = !DILocation(line: 856, column: 13, scope: !15351)
!15351 = distinct !DILexicalBlock(scope: !15346, file: !1066, line: 855, column: 5)
!15352 = !DILocation(line: 856, column: 19, scope: !15351)
!15353 = !DILocation(line: 856, column: 7, scope: !15351)
!15354 = !DILocation(line: 857, column: 21, scope: !15351)
!15355 = !DILocation(line: 858, column: 20, scope: !15351)
!15356 = !DILocation(line: 859, column: 5, scope: !15351)
!15357 = !DILocation(line: 860, column: 7, scope: !15358)
!15358 = distinct !DILexicalBlock(scope: !15323, file: !1066, line: 860, column: 7)
!15359 = !DILocation(line: 860, column: 10, scope: !15358)
!15360 = !DILocation(line: 860, column: 7, scope: !15323)
!15361 = !DILocation(line: 862, column: 13, scope: !15362)
!15362 = distinct !DILexicalBlock(scope: !15358, file: !1066, line: 861, column: 5)
!15363 = !DILocation(line: 862, column: 7, scope: !15362)
!15364 = !DILocation(line: 863, column: 15, scope: !15362)
!15365 = !DILocation(line: 864, column: 5, scope: !15362)
!15366 = !DILocation(line: 865, column: 10, scope: !15323)
!15367 = !DILocation(line: 866, column: 1, scope: !15323)
!15368 = distinct !DISubprogram(name: "quotearg_n", scope: !1066, file: !1066, line: 931, type: !15369, scopeLine: 932, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15369 = !DISubroutineType(types: !15370)
!15370 = !{!7, !5, !90}
!15371 = !DILocalVariable(name: "n", arg: 1, scope: !15368, file: !1066, line: 931, type: !5)
!15372 = !DILocation(line: 931, column: 17, scope: !15368)
!15373 = !DILocalVariable(name: "arg", arg: 2, scope: !15368, file: !1066, line: 931, type: !90)
!15374 = !DILocation(line: 931, column: 32, scope: !15368)
!15375 = !DILocation(line: 933, column: 30, scope: !15368)
!15376 = !DILocation(line: 933, column: 33, scope: !15368)
!15377 = !DILocation(line: 933, column: 10, scope: !15368)
!15378 = !DILocation(line: 933, column: 3, scope: !15368)
!15379 = distinct !DISubprogram(name: "quotearg_n_options", scope: !1066, file: !1066, line: 877, type: !15380, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15380 = !DISubroutineType(types: !15381)
!15381 = !{!7, !5, !90, !52, !1075}
!15382 = !DILocalVariable(name: "n", arg: 1, scope: !15379, file: !1066, line: 877, type: !5)
!15383 = !DILocation(line: 877, column: 25, scope: !15379)
!15384 = !DILocalVariable(name: "arg", arg: 2, scope: !15379, file: !1066, line: 877, type: !90)
!15385 = !DILocation(line: 877, column: 40, scope: !15379)
!15386 = !DILocalVariable(name: "argsize", arg: 3, scope: !15379, file: !1066, line: 877, type: !52)
!15387 = !DILocation(line: 877, column: 52, scope: !15379)
!15388 = !DILocalVariable(name: "options", arg: 4, scope: !15379, file: !1066, line: 878, type: !1075)
!15389 = !DILocation(line: 878, column: 51, scope: !15379)
!15390 = !DILocalVariable(name: "e", scope: !15379, file: !1066, line: 880, type: !5)
!15391 = !DILocation(line: 880, column: 7, scope: !15379)
!15392 = !DILocation(line: 880, column: 11, scope: !15379)
!15393 = !DILocalVariable(name: "sv", scope: !15379, file: !1066, line: 882, type: !1078)
!15394 = !DILocation(line: 882, column: 19, scope: !15379)
!15395 = !DILocation(line: 882, column: 24, scope: !15379)
!15396 = !DILocation(line: 884, column: 7, scope: !15397)
!15397 = distinct !DILexicalBlock(scope: !15379, file: !1066, line: 884, column: 7)
!15398 = !DILocation(line: 884, column: 9, scope: !15397)
!15399 = !DILocation(line: 884, column: 7, scope: !15379)
!15400 = !DILocation(line: 885, column: 5, scope: !15397)
!15401 = !DILocation(line: 887, column: 7, scope: !15402)
!15402 = distinct !DILexicalBlock(scope: !15379, file: !1066, line: 887, column: 7)
!15403 = !DILocation(line: 887, column: 17, scope: !15402)
!15404 = !DILocation(line: 887, column: 14, scope: !15402)
!15405 = !DILocation(line: 887, column: 7, scope: !15379)
!15406 = !DILocalVariable(name: "preallocated", scope: !15407, file: !1066, line: 889, type: !162)
!15407 = distinct !DILexicalBlock(scope: !15402, file: !1066, line: 888, column: 5)
!15408 = !DILocation(line: 889, column: 12, scope: !15407)
!15409 = !DILocation(line: 889, column: 28, scope: !15407)
!15410 = !DILocation(line: 889, column: 31, scope: !15407)
!15411 = !DILocalVariable(name: "nmax", scope: !15407, file: !1066, line: 890, type: !5)
!15412 = !DILocation(line: 890, column: 11, scope: !15407)
!15413 = !DILocation(line: 892, column: 11, scope: !15414)
!15414 = distinct !DILexicalBlock(scope: !15407, file: !1066, line: 892, column: 11)
!15415 = !DILocation(line: 892, column: 18, scope: !15414)
!15416 = !DILocation(line: 892, column: 16, scope: !15414)
!15417 = !DILocation(line: 892, column: 11, scope: !15407)
!15418 = !DILocation(line: 893, column: 9, scope: !15414)
!15419 = !DILocation(line: 895, column: 32, scope: !15407)
!15420 = !DILocation(line: 895, column: 54, scope: !15407)
!15421 = !DILocation(line: 895, column: 59, scope: !15407)
!15422 = !DILocation(line: 895, column: 61, scope: !15407)
!15423 = !DILocation(line: 895, column: 58, scope: !15407)
!15424 = !DILocation(line: 895, column: 66, scope: !15407)
!15425 = !DILocation(line: 895, column: 22, scope: !15407)
!15426 = !DILocation(line: 895, column: 20, scope: !15407)
!15427 = !DILocation(line: 895, column: 15, scope: !15407)
!15428 = !DILocation(line: 896, column: 11, scope: !15429)
!15429 = distinct !DILexicalBlock(scope: !15407, file: !1066, line: 896, column: 11)
!15430 = !DILocation(line: 896, column: 11, scope: !15407)
!15431 = !DILocation(line: 897, column: 10, scope: !15429)
!15432 = !DILocation(line: 897, column: 15, scope: !15429)
!15433 = !DILocation(line: 897, column: 9, scope: !15429)
!15434 = !DILocation(line: 898, column: 15, scope: !15407)
!15435 = !DILocation(line: 898, column: 20, scope: !15407)
!15436 = !DILocation(line: 898, column: 18, scope: !15407)
!15437 = !DILocation(line: 898, column: 7, scope: !15407)
!15438 = !DILocation(line: 898, column: 32, scope: !15407)
!15439 = !DILocation(line: 898, column: 34, scope: !15407)
!15440 = !DILocation(line: 898, column: 40, scope: !15407)
!15441 = !DILocation(line: 898, column: 38, scope: !15407)
!15442 = !DILocation(line: 898, column: 31, scope: !15407)
!15443 = !DILocation(line: 898, column: 48, scope: !15407)
!15444 = !DILocation(line: 899, column: 16, scope: !15407)
!15445 = !DILocation(line: 899, column: 18, scope: !15407)
!15446 = !DILocation(line: 899, column: 14, scope: !15407)
!15447 = !DILocation(line: 900, column: 5, scope: !15407)
!15448 = !DILocalVariable(name: "size", scope: !15449, file: !1066, line: 903, type: !52)
!15449 = distinct !DILexicalBlock(scope: !15379, file: !1066, line: 902, column: 3)
!15450 = !DILocation(line: 903, column: 12, scope: !15449)
!15451 = !DILocation(line: 903, column: 19, scope: !15449)
!15452 = !DILocation(line: 903, column: 22, scope: !15449)
!15453 = !DILocation(line: 903, column: 25, scope: !15449)
!15454 = !DILocalVariable(name: "val", scope: !15449, file: !1066, line: 904, type: !7)
!15455 = !DILocation(line: 904, column: 11, scope: !15449)
!15456 = !DILocation(line: 904, column: 17, scope: !15449)
!15457 = !DILocation(line: 904, column: 20, scope: !15449)
!15458 = !DILocation(line: 904, column: 23, scope: !15449)
!15459 = !DILocalVariable(name: "flags", scope: !15449, file: !1066, line: 906, type: !5)
!15460 = !DILocation(line: 906, column: 9, scope: !15449)
!15461 = !DILocation(line: 906, column: 17, scope: !15449)
!15462 = !DILocation(line: 906, column: 26, scope: !15449)
!15463 = !DILocation(line: 906, column: 32, scope: !15449)
!15464 = !DILocalVariable(name: "qsize", scope: !15449, file: !1066, line: 907, type: !52)
!15465 = !DILocation(line: 907, column: 12, scope: !15449)
!15466 = !DILocation(line: 907, column: 46, scope: !15449)
!15467 = !DILocation(line: 907, column: 51, scope: !15449)
!15468 = !DILocation(line: 907, column: 57, scope: !15449)
!15469 = !DILocation(line: 907, column: 62, scope: !15449)
!15470 = !DILocation(line: 908, column: 46, scope: !15449)
!15471 = !DILocation(line: 908, column: 55, scope: !15449)
!15472 = !DILocation(line: 908, column: 62, scope: !15449)
!15473 = !DILocation(line: 909, column: 46, scope: !15449)
!15474 = !DILocation(line: 909, column: 55, scope: !15449)
!15475 = !DILocation(line: 910, column: 46, scope: !15449)
!15476 = !DILocation(line: 910, column: 55, scope: !15449)
!15477 = !DILocation(line: 911, column: 46, scope: !15449)
!15478 = !DILocation(line: 911, column: 55, scope: !15449)
!15479 = !DILocation(line: 907, column: 20, scope: !15449)
!15480 = !DILocation(line: 913, column: 9, scope: !15481)
!15481 = distinct !DILexicalBlock(scope: !15449, file: !1066, line: 913, column: 9)
!15482 = !DILocation(line: 913, column: 17, scope: !15481)
!15483 = !DILocation(line: 913, column: 14, scope: !15481)
!15484 = !DILocation(line: 913, column: 9, scope: !15449)
!15485 = !DILocation(line: 915, column: 29, scope: !15486)
!15486 = distinct !DILexicalBlock(scope: !15481, file: !1066, line: 914, column: 7)
!15487 = !DILocation(line: 915, column: 35, scope: !15486)
!15488 = !DILocation(line: 915, column: 27, scope: !15486)
!15489 = !DILocation(line: 915, column: 9, scope: !15486)
!15490 = !DILocation(line: 915, column: 12, scope: !15486)
!15491 = !DILocation(line: 915, column: 15, scope: !15486)
!15492 = !DILocation(line: 915, column: 20, scope: !15486)
!15493 = !DILocation(line: 916, column: 13, scope: !15494)
!15494 = distinct !DILexicalBlock(scope: !15486, file: !1066, line: 916, column: 13)
!15495 = !DILocation(line: 916, column: 17, scope: !15494)
!15496 = !DILocation(line: 916, column: 13, scope: !15486)
!15497 = !DILocation(line: 917, column: 17, scope: !15494)
!15498 = !DILocation(line: 917, column: 11, scope: !15494)
!15499 = !DILocation(line: 918, column: 39, scope: !15486)
!15500 = !DILocation(line: 918, column: 27, scope: !15486)
!15501 = !DILocation(line: 918, column: 25, scope: !15486)
!15502 = !DILocation(line: 918, column: 9, scope: !15486)
!15503 = !DILocation(line: 918, column: 12, scope: !15486)
!15504 = !DILocation(line: 918, column: 15, scope: !15486)
!15505 = !DILocation(line: 918, column: 19, scope: !15486)
!15506 = !DILocation(line: 919, column: 35, scope: !15486)
!15507 = !DILocation(line: 919, column: 40, scope: !15486)
!15508 = !DILocation(line: 919, column: 46, scope: !15486)
!15509 = !DILocation(line: 919, column: 51, scope: !15486)
!15510 = !DILocation(line: 919, column: 60, scope: !15486)
!15511 = !DILocation(line: 919, column: 69, scope: !15486)
!15512 = !DILocation(line: 920, column: 35, scope: !15486)
!15513 = !DILocation(line: 920, column: 42, scope: !15486)
!15514 = !DILocation(line: 920, column: 51, scope: !15486)
!15515 = !DILocation(line: 921, column: 35, scope: !15486)
!15516 = !DILocation(line: 921, column: 44, scope: !15486)
!15517 = !DILocation(line: 922, column: 35, scope: !15486)
!15518 = !DILocation(line: 922, column: 44, scope: !15486)
!15519 = !DILocation(line: 919, column: 9, scope: !15486)
!15520 = !DILocation(line: 923, column: 7, scope: !15486)
!15521 = !DILocation(line: 925, column: 13, scope: !15449)
!15522 = !DILocation(line: 925, column: 5, scope: !15449)
!15523 = !DILocation(line: 925, column: 11, scope: !15449)
!15524 = !DILocation(line: 926, column: 12, scope: !15449)
!15525 = !DILocation(line: 926, column: 5, scope: !15449)
!15526 = distinct !DISubprogram(name: "quotearg_n_mem", scope: !1066, file: !1066, line: 937, type: !15527, scopeLine: 938, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15527 = !DISubroutineType(types: !15528)
!15528 = !{!7, !5, !90, !52}
!15529 = !DILocalVariable(name: "n", arg: 1, scope: !15526, file: !1066, line: 937, type: !5)
!15530 = !DILocation(line: 937, column: 21, scope: !15526)
!15531 = !DILocalVariable(name: "arg", arg: 2, scope: !15526, file: !1066, line: 937, type: !90)
!15532 = !DILocation(line: 937, column: 36, scope: !15526)
!15533 = !DILocalVariable(name: "argsize", arg: 3, scope: !15526, file: !1066, line: 937, type: !52)
!15534 = !DILocation(line: 937, column: 48, scope: !15526)
!15535 = !DILocation(line: 939, column: 30, scope: !15526)
!15536 = !DILocation(line: 939, column: 33, scope: !15526)
!15537 = !DILocation(line: 939, column: 38, scope: !15526)
!15538 = !DILocation(line: 939, column: 10, scope: !15526)
!15539 = !DILocation(line: 939, column: 3, scope: !15526)
!15540 = distinct !DISubprogram(name: "quotearg", scope: !1066, file: !1066, line: 943, type: !15541, scopeLine: 944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15541 = !DISubroutineType(types: !15542)
!15542 = !{!7, !90}
!15543 = !DILocalVariable(name: "arg", arg: 1, scope: !15540, file: !1066, line: 943, type: !90)
!15544 = !DILocation(line: 943, column: 23, scope: !15540)
!15545 = !DILocation(line: 945, column: 25, scope: !15540)
!15546 = !DILocation(line: 945, column: 10, scope: !15540)
!15547 = !DILocation(line: 945, column: 3, scope: !15540)
!15548 = distinct !DISubprogram(name: "quotearg_mem", scope: !1066, file: !1066, line: 949, type: !15549, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15549 = !DISubroutineType(types: !15550)
!15550 = !{!7, !90, !52}
!15551 = !DILocalVariable(name: "arg", arg: 1, scope: !15548, file: !1066, line: 949, type: !90)
!15552 = !DILocation(line: 949, column: 27, scope: !15548)
!15553 = !DILocalVariable(name: "argsize", arg: 2, scope: !15548, file: !1066, line: 949, type: !52)
!15554 = !DILocation(line: 949, column: 39, scope: !15548)
!15555 = !DILocation(line: 951, column: 29, scope: !15548)
!15556 = !DILocation(line: 951, column: 34, scope: !15548)
!15557 = !DILocation(line: 951, column: 10, scope: !15548)
!15558 = !DILocation(line: 951, column: 3, scope: !15548)
!15559 = distinct !DISubprogram(name: "quotearg_n_style", scope: !1066, file: !1066, line: 955, type: !15560, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15560 = !DISubroutineType(types: !15561)
!15561 = !{!7, !5, !1046, !90}
!15562 = !DILocalVariable(name: "n", arg: 1, scope: !15559, file: !1066, line: 955, type: !5)
!15563 = !DILocation(line: 955, column: 23, scope: !15559)
!15564 = !DILocalVariable(name: "s", arg: 2, scope: !15559, file: !1066, line: 955, type: !1046)
!15565 = !DILocation(line: 955, column: 45, scope: !15559)
!15566 = !DILocalVariable(name: "arg", arg: 3, scope: !15559, file: !1066, line: 955, type: !90)
!15567 = !DILocation(line: 955, column: 60, scope: !15559)
!15568 = !DILocalVariable(name: "o", scope: !15559, file: !1066, line: 957, type: !1076)
!15569 = !DILocation(line: 957, column: 32, scope: !15559)
!15570 = !DILocation(line: 957, column: 64, scope: !15559)
!15571 = !DILocation(line: 957, column: 36, scope: !15559)
!15572 = !DILocation(line: 958, column: 30, scope: !15559)
!15573 = !DILocation(line: 958, column: 33, scope: !15559)
!15574 = !DILocation(line: 958, column: 10, scope: !15559)
!15575 = !DILocation(line: 958, column: 3, scope: !15559)
!15576 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !1066, file: !1066, line: 193, type: !15577, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15577 = !DISubroutineType(types: !15578)
!15578 = !{!1065, !1046}
!15579 = !DILocalVariable(name: "style", arg: 1, scope: !15576, file: !1066, line: 193, type: !1046)
!15580 = !DILocation(line: 193, column: 48, scope: !15576)
!15581 = !DILocalVariable(name: "o", scope: !15576, file: !1066, line: 195, type: !1065)
!15582 = !DILocation(line: 195, column: 26, scope: !15576)
!15583 = !DILocation(line: 196, column: 7, scope: !15584)
!15584 = distinct !DILexicalBlock(scope: !15576, file: !1066, line: 196, column: 7)
!15585 = !DILocation(line: 196, column: 13, scope: !15584)
!15586 = !DILocation(line: 196, column: 7, scope: !15576)
!15587 = !DILocation(line: 197, column: 5, scope: !15584)
!15588 = !DILocation(line: 198, column: 13, scope: !15576)
!15589 = !DILocation(line: 198, column: 5, scope: !15576)
!15590 = !DILocation(line: 198, column: 11, scope: !15576)
!15591 = !DILocation(line: 199, column: 3, scope: !15576)
!15592 = distinct !DISubprogram(name: "quotearg_n_style_mem", scope: !1066, file: !1066, line: 962, type: !15593, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15593 = !DISubroutineType(types: !15594)
!15594 = !{!7, !5, !1046, !90, !52}
!15595 = !DILocalVariable(name: "n", arg: 1, scope: !15592, file: !1066, line: 962, type: !5)
!15596 = !DILocation(line: 962, column: 27, scope: !15592)
!15597 = !DILocalVariable(name: "s", arg: 2, scope: !15592, file: !1066, line: 962, type: !1046)
!15598 = !DILocation(line: 962, column: 49, scope: !15592)
!15599 = !DILocalVariable(name: "arg", arg: 3, scope: !15592, file: !1066, line: 963, type: !90)
!15600 = !DILocation(line: 963, column: 35, scope: !15592)
!15601 = !DILocalVariable(name: "argsize", arg: 4, scope: !15592, file: !1066, line: 963, type: !52)
!15602 = !DILocation(line: 963, column: 47, scope: !15592)
!15603 = !DILocalVariable(name: "o", scope: !15592, file: !1066, line: 965, type: !1076)
!15604 = !DILocation(line: 965, column: 32, scope: !15592)
!15605 = !DILocation(line: 965, column: 64, scope: !15592)
!15606 = !DILocation(line: 965, column: 36, scope: !15592)
!15607 = !DILocation(line: 966, column: 30, scope: !15592)
!15608 = !DILocation(line: 966, column: 33, scope: !15592)
!15609 = !DILocation(line: 966, column: 38, scope: !15592)
!15610 = !DILocation(line: 966, column: 10, scope: !15592)
!15611 = !DILocation(line: 966, column: 3, scope: !15592)
!15612 = distinct !DISubprogram(name: "quotearg_style", scope: !1066, file: !1066, line: 970, type: !15613, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15613 = !DISubroutineType(types: !15614)
!15614 = !{!7, !1046, !90}
!15615 = !DILocalVariable(name: "s", arg: 1, scope: !15612, file: !1066, line: 970, type: !1046)
!15616 = !DILocation(line: 970, column: 36, scope: !15612)
!15617 = !DILocalVariable(name: "arg", arg: 2, scope: !15612, file: !1066, line: 970, type: !90)
!15618 = !DILocation(line: 970, column: 51, scope: !15612)
!15619 = !DILocation(line: 972, column: 31, scope: !15612)
!15620 = !DILocation(line: 972, column: 34, scope: !15612)
!15621 = !DILocation(line: 972, column: 10, scope: !15612)
!15622 = !DILocation(line: 972, column: 3, scope: !15612)
!15623 = distinct !DISubprogram(name: "quotearg_style_mem", scope: !1066, file: !1066, line: 976, type: !15624, scopeLine: 977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15624 = !DISubroutineType(types: !15625)
!15625 = !{!7, !1046, !90, !52}
!15626 = !DILocalVariable(name: "s", arg: 1, scope: !15623, file: !1066, line: 976, type: !1046)
!15627 = !DILocation(line: 976, column: 40, scope: !15623)
!15628 = !DILocalVariable(name: "arg", arg: 2, scope: !15623, file: !1066, line: 976, type: !90)
!15629 = !DILocation(line: 976, column: 55, scope: !15623)
!15630 = !DILocalVariable(name: "argsize", arg: 3, scope: !15623, file: !1066, line: 976, type: !52)
!15631 = !DILocation(line: 976, column: 67, scope: !15623)
!15632 = !DILocation(line: 978, column: 35, scope: !15623)
!15633 = !DILocation(line: 978, column: 38, scope: !15623)
!15634 = !DILocation(line: 978, column: 43, scope: !15623)
!15635 = !DILocation(line: 978, column: 10, scope: !15623)
!15636 = !DILocation(line: 978, column: 3, scope: !15623)
!15637 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !1066, file: !1066, line: 982, type: !15638, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15638 = !DISubroutineType(types: !15639)
!15639 = !{!7, !90, !52, !8}
!15640 = !DILocalVariable(name: "arg", arg: 1, scope: !15637, file: !1066, line: 982, type: !90)
!15641 = !DILocation(line: 982, column: 32, scope: !15637)
!15642 = !DILocalVariable(name: "argsize", arg: 2, scope: !15637, file: !1066, line: 982, type: !52)
!15643 = !DILocation(line: 982, column: 44, scope: !15637)
!15644 = !DILocalVariable(name: "ch", arg: 3, scope: !15637, file: !1066, line: 982, type: !8)
!15645 = !DILocation(line: 982, column: 58, scope: !15637)
!15646 = !DILocalVariable(name: "options", scope: !15637, file: !1066, line: 984, type: !1065)
!15647 = !DILocation(line: 984, column: 26, scope: !15637)
!15648 = !DILocation(line: 985, column: 13, scope: !15637)
!15649 = !DILocation(line: 986, column: 31, scope: !15637)
!15650 = !DILocation(line: 986, column: 3, scope: !15637)
!15651 = !DILocation(line: 987, column: 33, scope: !15637)
!15652 = !DILocation(line: 987, column: 38, scope: !15637)
!15653 = !DILocation(line: 987, column: 10, scope: !15637)
!15654 = !DILocation(line: 987, column: 3, scope: !15637)
!15655 = distinct !DISubprogram(name: "quotearg_char", scope: !1066, file: !1066, line: 991, type: !15656, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15656 = !DISubroutineType(types: !15657)
!15657 = !{!7, !90, !8}
!15658 = !DILocalVariable(name: "arg", arg: 1, scope: !15655, file: !1066, line: 991, type: !90)
!15659 = !DILocation(line: 991, column: 28, scope: !15655)
!15660 = !DILocalVariable(name: "ch", arg: 2, scope: !15655, file: !1066, line: 991, type: !8)
!15661 = !DILocation(line: 991, column: 38, scope: !15655)
!15662 = !DILocation(line: 993, column: 29, scope: !15655)
!15663 = !DILocation(line: 993, column: 44, scope: !15655)
!15664 = !DILocation(line: 993, column: 10, scope: !15655)
!15665 = !DILocation(line: 993, column: 3, scope: !15655)
!15666 = distinct !DISubprogram(name: "quotearg_colon", scope: !1066, file: !1066, line: 997, type: !15541, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15667 = !DILocalVariable(name: "arg", arg: 1, scope: !15666, file: !1066, line: 997, type: !90)
!15668 = !DILocation(line: 997, column: 29, scope: !15666)
!15669 = !DILocation(line: 999, column: 25, scope: !15666)
!15670 = !DILocation(line: 999, column: 10, scope: !15666)
!15671 = !DILocation(line: 999, column: 3, scope: !15666)
!15672 = distinct !DISubprogram(name: "quotearg_colon_mem", scope: !1066, file: !1066, line: 1003, type: !15549, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15673 = !DILocalVariable(name: "arg", arg: 1, scope: !15672, file: !1066, line: 1003, type: !90)
!15674 = !DILocation(line: 1003, column: 33, scope: !15672)
!15675 = !DILocalVariable(name: "argsize", arg: 2, scope: !15672, file: !1066, line: 1003, type: !52)
!15676 = !DILocation(line: 1003, column: 45, scope: !15672)
!15677 = !DILocation(line: 1005, column: 29, scope: !15672)
!15678 = !DILocation(line: 1005, column: 34, scope: !15672)
!15679 = !DILocation(line: 1005, column: 10, scope: !15672)
!15680 = !DILocation(line: 1005, column: 3, scope: !15672)
!15681 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !1066, file: !1066, line: 1009, type: !15560, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15682 = !DILocalVariable(name: "n", arg: 1, scope: !15681, file: !1066, line: 1009, type: !5)
!15683 = !DILocation(line: 1009, column: 29, scope: !15681)
!15684 = !DILocalVariable(name: "s", arg: 2, scope: !15681, file: !1066, line: 1009, type: !1046)
!15685 = !DILocation(line: 1009, column: 51, scope: !15681)
!15686 = !DILocalVariable(name: "arg", arg: 3, scope: !15681, file: !1066, line: 1009, type: !90)
!15687 = !DILocation(line: 1009, column: 66, scope: !15681)
!15688 = !DILocalVariable(name: "options", scope: !15681, file: !1066, line: 1011, type: !1065)
!15689 = !DILocation(line: 1011, column: 26, scope: !15681)
!15690 = !DILocation(line: 1012, column: 41, scope: !15681)
!15691 = !DILocation(line: 1012, column: 13, scope: !15681)
!15692 = !DILocation(line: 1013, column: 3, scope: !15681)
!15693 = !DILocation(line: 1014, column: 30, scope: !15681)
!15694 = !DILocation(line: 1014, column: 33, scope: !15681)
!15695 = !DILocation(line: 1014, column: 10, scope: !15681)
!15696 = !DILocation(line: 1014, column: 3, scope: !15681)
!15697 = distinct !DISubprogram(name: "quotearg_n_custom", scope: !1066, file: !1066, line: 1018, type: !15698, scopeLine: 1020, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15698 = !DISubroutineType(types: !15699)
!15699 = !{!7, !5, !90, !90, !90}
!15700 = !DILocalVariable(name: "n", arg: 1, scope: !15697, file: !1066, line: 1018, type: !5)
!15701 = !DILocation(line: 1018, column: 24, scope: !15697)
!15702 = !DILocalVariable(name: "left_quote", arg: 2, scope: !15697, file: !1066, line: 1018, type: !90)
!15703 = !DILocation(line: 1018, column: 39, scope: !15697)
!15704 = !DILocalVariable(name: "right_quote", arg: 3, scope: !15697, file: !1066, line: 1019, type: !90)
!15705 = !DILocation(line: 1019, column: 32, scope: !15697)
!15706 = !DILocalVariable(name: "arg", arg: 4, scope: !15697, file: !1066, line: 1019, type: !90)
!15707 = !DILocation(line: 1019, column: 57, scope: !15697)
!15708 = !DILocation(line: 1021, column: 33, scope: !15697)
!15709 = !DILocation(line: 1021, column: 36, scope: !15697)
!15710 = !DILocation(line: 1021, column: 48, scope: !15697)
!15711 = !DILocation(line: 1021, column: 61, scope: !15697)
!15712 = !DILocation(line: 1021, column: 10, scope: !15697)
!15713 = !DILocation(line: 1021, column: 3, scope: !15697)
!15714 = distinct !DISubprogram(name: "quotearg_n_custom_mem", scope: !1066, file: !1066, line: 1026, type: !15715, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15715 = !DISubroutineType(types: !15716)
!15716 = !{!7, !5, !90, !90, !90, !52}
!15717 = !DILocalVariable(name: "n", arg: 1, scope: !15714, file: !1066, line: 1026, type: !5)
!15718 = !DILocation(line: 1026, column: 28, scope: !15714)
!15719 = !DILocalVariable(name: "left_quote", arg: 2, scope: !15714, file: !1066, line: 1026, type: !90)
!15720 = !DILocation(line: 1026, column: 43, scope: !15714)
!15721 = !DILocalVariable(name: "right_quote", arg: 3, scope: !15714, file: !1066, line: 1027, type: !90)
!15722 = !DILocation(line: 1027, column: 36, scope: !15714)
!15723 = !DILocalVariable(name: "arg", arg: 4, scope: !15714, file: !1066, line: 1028, type: !90)
!15724 = !DILocation(line: 1028, column: 36, scope: !15714)
!15725 = !DILocalVariable(name: "argsize", arg: 5, scope: !15714, file: !1066, line: 1028, type: !52)
!15726 = !DILocation(line: 1028, column: 48, scope: !15714)
!15727 = !DILocalVariable(name: "o", scope: !15714, file: !1066, line: 1030, type: !1065)
!15728 = !DILocation(line: 1030, column: 26, scope: !15714)
!15729 = !DILocation(line: 1030, column: 30, scope: !15714)
!15730 = !DILocation(line: 1031, column: 27, scope: !15714)
!15731 = !DILocation(line: 1031, column: 39, scope: !15714)
!15732 = !DILocation(line: 1031, column: 3, scope: !15714)
!15733 = !DILocation(line: 1032, column: 30, scope: !15714)
!15734 = !DILocation(line: 1032, column: 33, scope: !15714)
!15735 = !DILocation(line: 1032, column: 38, scope: !15714)
!15736 = !DILocation(line: 1032, column: 10, scope: !15714)
!15737 = !DILocation(line: 1032, column: 3, scope: !15714)
!15738 = distinct !DISubprogram(name: "quotearg_custom", scope: !1066, file: !1066, line: 1036, type: !15739, scopeLine: 1038, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15739 = !DISubroutineType(types: !15740)
!15740 = !{!7, !90, !90, !90}
!15741 = !DILocalVariable(name: "left_quote", arg: 1, scope: !15738, file: !1066, line: 1036, type: !90)
!15742 = !DILocation(line: 1036, column: 30, scope: !15738)
!15743 = !DILocalVariable(name: "right_quote", arg: 2, scope: !15738, file: !1066, line: 1036, type: !90)
!15744 = !DILocation(line: 1036, column: 54, scope: !15738)
!15745 = !DILocalVariable(name: "arg", arg: 3, scope: !15738, file: !1066, line: 1037, type: !90)
!15746 = !DILocation(line: 1037, column: 30, scope: !15738)
!15747 = !DILocation(line: 1039, column: 32, scope: !15738)
!15748 = !DILocation(line: 1039, column: 44, scope: !15738)
!15749 = !DILocation(line: 1039, column: 57, scope: !15738)
!15750 = !DILocation(line: 1039, column: 10, scope: !15738)
!15751 = !DILocation(line: 1039, column: 3, scope: !15738)
!15752 = distinct !DISubprogram(name: "quotearg_custom_mem", scope: !1066, file: !1066, line: 1043, type: !15753, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15753 = !DISubroutineType(types: !15754)
!15754 = !{!7, !90, !90, !90, !52}
!15755 = !DILocalVariable(name: "left_quote", arg: 1, scope: !15752, file: !1066, line: 1043, type: !90)
!15756 = !DILocation(line: 1043, column: 34, scope: !15752)
!15757 = !DILocalVariable(name: "right_quote", arg: 2, scope: !15752, file: !1066, line: 1043, type: !90)
!15758 = !DILocation(line: 1043, column: 58, scope: !15752)
!15759 = !DILocalVariable(name: "arg", arg: 3, scope: !15752, file: !1066, line: 1044, type: !90)
!15760 = !DILocation(line: 1044, column: 34, scope: !15752)
!15761 = !DILocalVariable(name: "argsize", arg: 4, scope: !15752, file: !1066, line: 1044, type: !52)
!15762 = !DILocation(line: 1044, column: 46, scope: !15752)
!15763 = !DILocation(line: 1046, column: 36, scope: !15752)
!15764 = !DILocation(line: 1046, column: 48, scope: !15752)
!15765 = !DILocation(line: 1046, column: 61, scope: !15752)
!15766 = !DILocation(line: 1047, column: 33, scope: !15752)
!15767 = !DILocation(line: 1046, column: 10, scope: !15752)
!15768 = !DILocation(line: 1046, column: 3, scope: !15752)
!15769 = distinct !DISubprogram(name: "quote_n_mem", scope: !1066, file: !1066, line: 1061, type: !15770, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15770 = !DISubroutineType(types: !15771)
!15771 = !{!90, !5, !90, !52}
!15772 = !DILocalVariable(name: "n", arg: 1, scope: !15769, file: !1066, line: 1061, type: !5)
!15773 = !DILocation(line: 1061, column: 18, scope: !15769)
!15774 = !DILocalVariable(name: "arg", arg: 2, scope: !15769, file: !1066, line: 1061, type: !90)
!15775 = !DILocation(line: 1061, column: 33, scope: !15769)
!15776 = !DILocalVariable(name: "argsize", arg: 3, scope: !15769, file: !1066, line: 1061, type: !52)
!15777 = !DILocation(line: 1061, column: 45, scope: !15769)
!15778 = !DILocation(line: 1063, column: 30, scope: !15769)
!15779 = !DILocation(line: 1063, column: 33, scope: !15769)
!15780 = !DILocation(line: 1063, column: 38, scope: !15769)
!15781 = !DILocation(line: 1063, column: 10, scope: !15769)
!15782 = !DILocation(line: 1063, column: 3, scope: !15769)
!15783 = distinct !DISubprogram(name: "quote_mem", scope: !1066, file: !1066, line: 1067, type: !15784, scopeLine: 1068, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15784 = !DISubroutineType(types: !15785)
!15785 = !{!90, !90, !52}
!15786 = !DILocalVariable(name: "arg", arg: 1, scope: !15783, file: !1066, line: 1067, type: !90)
!15787 = !DILocation(line: 1067, column: 24, scope: !15783)
!15788 = !DILocalVariable(name: "argsize", arg: 2, scope: !15783, file: !1066, line: 1067, type: !52)
!15789 = !DILocation(line: 1067, column: 36, scope: !15783)
!15790 = !DILocation(line: 1069, column: 26, scope: !15783)
!15791 = !DILocation(line: 1069, column: 31, scope: !15783)
!15792 = !DILocation(line: 1069, column: 10, scope: !15783)
!15793 = !DILocation(line: 1069, column: 3, scope: !15783)
!15794 = distinct !DISubprogram(name: "quote_n", scope: !1066, file: !1066, line: 1073, type: !15795, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15795 = !DISubroutineType(types: !15796)
!15796 = !{!90, !5, !90}
!15797 = !DILocalVariable(name: "n", arg: 1, scope: !15794, file: !1066, line: 1073, type: !5)
!15798 = !DILocation(line: 1073, column: 14, scope: !15794)
!15799 = !DILocalVariable(name: "arg", arg: 2, scope: !15794, file: !1066, line: 1073, type: !90)
!15800 = !DILocation(line: 1073, column: 29, scope: !15794)
!15801 = !DILocation(line: 1075, column: 23, scope: !15794)
!15802 = !DILocation(line: 1075, column: 26, scope: !15794)
!15803 = !DILocation(line: 1075, column: 10, scope: !15794)
!15804 = !DILocation(line: 1075, column: 3, scope: !15794)
!15805 = distinct !DISubprogram(name: "quote", scope: !1066, file: !1066, line: 1079, type: !15806, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1043, retainedNodes: !433)
!15806 = !DISubroutineType(types: !15807)
!15807 = !{!90, !90}
!15808 = !DILocalVariable(name: "arg", arg: 1, scope: !15805, file: !1066, line: 1079, type: !90)
!15809 = !DILocation(line: 1079, column: 20, scope: !15805)
!15810 = !DILocation(line: 1081, column: 22, scope: !15805)
!15811 = !DILocation(line: 1081, column: 10, scope: !15805)
!15812 = !DILocation(line: 1081, column: 3, scope: !15805)
!15813 = distinct !DISubprogram(name: "randread_new", scope: !1355, file: !1355, line: 204, type: !15814, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!15814 = !DISubroutineType(types: !15815)
!15815 = !{!1353, !90, !52}
!15816 = !DILocalVariable(name: "name", arg: 1, scope: !15813, file: !1355, line: 204, type: !90)
!15817 = !DILocation(line: 204, column: 27, scope: !15813)
!15818 = !DILocalVariable(name: "bytes_bound", arg: 2, scope: !15813, file: !1355, line: 204, type: !52)
!15819 = !DILocation(line: 204, column: 40, scope: !15813)
!15820 = !DILocation(line: 206, column: 7, scope: !15821)
!15821 = distinct !DILexicalBlock(scope: !15813, file: !1355, line: 206, column: 7)
!15822 = !DILocation(line: 206, column: 19, scope: !15821)
!15823 = !DILocation(line: 206, column: 7, scope: !15813)
!15824 = !DILocation(line: 207, column: 12, scope: !15821)
!15825 = !DILocation(line: 207, column: 5, scope: !15821)
!15826 = !DILocalVariable(name: "source", scope: !15827, file: !1355, line: 210, type: !1313)
!15827 = distinct !DILexicalBlock(scope: !15821, file: !1355, line: 209, column: 5)
!15828 = !DILocation(line: 210, column: 13, scope: !15827)
!15829 = !DILocalVariable(name: "s", scope: !15827, file: !1355, line: 211, type: !1353)
!15830 = !DILocation(line: 211, column: 31, scope: !15827)
!15831 = !DILocation(line: 213, column: 11, scope: !15832)
!15832 = distinct !DILexicalBlock(scope: !15827, file: !1355, line: 213, column: 11)
!15833 = !DILocation(line: 213, column: 11, scope: !15827)
!15834 = !DILocation(line: 214, column: 38, scope: !15835)
!15835 = distinct !DILexicalBlock(scope: !15832, file: !1355, line: 214, column: 13)
!15836 = !DILocation(line: 214, column: 25, scope: !15835)
!15837 = !DILocation(line: 214, column: 23, scope: !15835)
!15838 = !DILocation(line: 214, column: 13, scope: !15832)
!15839 = !DILocation(line: 215, column: 11, scope: !15835)
!15840 = !DILocation(line: 214, column: 49, scope: !15835)
!15841 = !DILocation(line: 217, column: 23, scope: !15827)
!15842 = !DILocation(line: 217, column: 31, scope: !15827)
!15843 = !DILocation(line: 217, column: 11, scope: !15827)
!15844 = !DILocation(line: 217, column: 9, scope: !15827)
!15845 = !DILocation(line: 219, column: 11, scope: !15846)
!15846 = distinct !DILexicalBlock(scope: !15827, file: !1355, line: 219, column: 11)
!15847 = !DILocation(line: 219, column: 11, scope: !15827)
!15848 = !DILocation(line: 220, column: 18, scope: !15846)
!15849 = !DILocation(line: 220, column: 26, scope: !15846)
!15850 = !DILocation(line: 220, column: 29, scope: !15846)
!15851 = !DILocation(line: 220, column: 33, scope: !15846)
!15852 = !DILocation(line: 220, column: 44, scope: !15846)
!15853 = !DILocation(line: 220, column: 9, scope: !15846)
!15854 = !DILocation(line: 223, column: 11, scope: !15855)
!15855 = distinct !DILexicalBlock(scope: !15846, file: !1355, line: 222, column: 9)
!15856 = !DILocation(line: 223, column: 14, scope: !15855)
!15857 = !DILocation(line: 223, column: 18, scope: !15855)
!15858 = !DILocation(line: 223, column: 24, scope: !15855)
!15859 = !DILocation(line: 223, column: 33, scope: !15855)
!15860 = !DILocation(line: 224, column: 22, scope: !15855)
!15861 = !DILocation(line: 224, column: 25, scope: !15855)
!15862 = !DILocation(line: 224, column: 29, scope: !15855)
!15863 = !DILocation(line: 224, column: 35, scope: !15855)
!15864 = !DILocation(line: 224, column: 41, scope: !15855)
!15865 = !DILocation(line: 225, column: 22, scope: !15855)
!15866 = !DILocation(line: 224, column: 11, scope: !15855)
!15867 = !DILocation(line: 226, column: 24, scope: !15855)
!15868 = !DILocation(line: 226, column: 27, scope: !15855)
!15869 = !DILocation(line: 226, column: 31, scope: !15855)
!15870 = !DILocation(line: 226, column: 37, scope: !15855)
!15871 = !DILocation(line: 226, column: 11, scope: !15855)
!15872 = !DILocation(line: 229, column: 14, scope: !15827)
!15873 = !DILocation(line: 229, column: 7, scope: !15827)
!15874 = !DILocation(line: 231, column: 1, scope: !15813)
!15875 = distinct !DISubprogram(name: "simple_new", scope: !1355, file: !1355, line: 137, type: !15876, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!15876 = !DISubroutineType(types: !15877)
!15877 = !{!1353, !1313, !85}
!15878 = !DILocalVariable(name: "source", arg: 1, scope: !15875, file: !1355, line: 137, type: !1313)
!15879 = !DILocation(line: 137, column: 19, scope: !15875)
!15880 = !DILocalVariable(name: "handler_arg", arg: 2, scope: !15875, file: !1355, line: 137, type: !85)
!15881 = !DILocation(line: 137, column: 39, scope: !15875)
!15882 = !DILocalVariable(name: "s", scope: !15875, file: !1355, line: 139, type: !1353)
!15883 = !DILocation(line: 139, column: 27, scope: !15875)
!15884 = !DILocation(line: 139, column: 31, scope: !15875)
!15885 = !DILocation(line: 140, column: 15, scope: !15875)
!15886 = !DILocation(line: 140, column: 3, scope: !15875)
!15887 = !DILocation(line: 140, column: 6, scope: !15875)
!15888 = !DILocation(line: 140, column: 13, scope: !15875)
!15889 = !DILocation(line: 141, column: 3, scope: !15875)
!15890 = !DILocation(line: 141, column: 6, scope: !15875)
!15891 = !DILocation(line: 141, column: 14, scope: !15875)
!15892 = !DILocation(line: 142, column: 20, scope: !15875)
!15893 = !DILocation(line: 142, column: 3, scope: !15875)
!15894 = !DILocation(line: 142, column: 6, scope: !15875)
!15895 = !DILocation(line: 142, column: 18, scope: !15875)
!15896 = !DILocation(line: 143, column: 10, scope: !15875)
!15897 = !DILocation(line: 143, column: 3, scope: !15875)
!15898 = distinct !DISubprogram(name: "get_nonce", scope: !1355, file: !1355, line: 151, type: !15899, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!15899 = !DISubroutineType(types: !15900)
!15900 = !{null, !47, !52, !52}
!15901 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !15902, line: 30, size: 128, elements: !15903)
!15902 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/time.h", directory: "")
!15903 = !{!15904, !15905}
!15904 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !15901, file: !15902, line: 32, baseType: !509, size: 64)
!15905 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !15901, file: !15902, line: 33, baseType: !15906, size: 64, offset: 64)
!15906 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !31, line: 141, baseType: !32)
!15907 = !DILocalVariable(name: "buffer", arg: 1, scope: !15898, file: !1355, line: 151, type: !47)
!15908 = !DILocation(line: 151, column: 18, scope: !15898)
!15909 = !DILocalVariable(name: "bufsize", arg: 2, scope: !15898, file: !1355, line: 151, type: !52)
!15910 = !DILocation(line: 151, column: 33, scope: !15898)
!15911 = !DILocalVariable(name: "bytes_bound", arg: 3, scope: !15898, file: !1355, line: 151, type: !52)
!15912 = !DILocation(line: 151, column: 49, scope: !15898)
!15913 = !DILocalVariable(name: "buf", scope: !15898, file: !1355, line: 153, type: !7)
!15914 = !DILocation(line: 153, column: 9, scope: !15898)
!15915 = !DILocation(line: 153, column: 15, scope: !15898)
!15916 = !DILocalVariable(name: "seeded", scope: !15898, file: !1355, line: 154, type: !1393)
!15917 = !DILocation(line: 154, column: 11, scope: !15898)
!15918 = !DILocalVariable(name: "fd", scope: !15898, file: !1355, line: 157, type: !5)
!15919 = !DILocation(line: 157, column: 7, scope: !15898)
!15920 = !DILocation(line: 157, column: 12, scope: !15898)
!15921 = !DILocation(line: 158, column: 12, scope: !15922)
!15922 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 158, column: 7)
!15923 = !DILocation(line: 158, column: 9, scope: !15922)
!15924 = !DILocation(line: 158, column: 7, scope: !15898)
!15925 = !DILocation(line: 160, column: 22, scope: !15926)
!15926 = distinct !DILexicalBlock(scope: !15922, file: !1355, line: 159, column: 5)
!15927 = !DILocation(line: 160, column: 26, scope: !15926)
!15928 = !DILocation(line: 160, column: 31, scope: !15926)
!15929 = !DILocation(line: 160, column: 16, scope: !15926)
!15930 = !DILocation(line: 160, column: 14, scope: !15926)
!15931 = !DILocation(line: 161, column: 11, scope: !15932)
!15932 = distinct !DILexicalBlock(scope: !15926, file: !1355, line: 161, column: 11)
!15933 = !DILocation(line: 161, column: 18, scope: !15932)
!15934 = !DILocation(line: 161, column: 11, scope: !15926)
!15935 = !DILocation(line: 162, column: 16, scope: !15932)
!15936 = !DILocation(line: 162, column: 9, scope: !15932)
!15937 = !DILocation(line: 163, column: 14, scope: !15926)
!15938 = !DILocation(line: 163, column: 7, scope: !15926)
!15939 = !DILocation(line: 164, column: 5, scope: !15926)
!15940 = !DILocation(line: 177, column: 3, scope: !15941)
!15941 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 177, column: 3)
!15942 = !DILocation(line: 177, column: 3, scope: !15898)
!15943 = !DILocalVariable(name: "v", scope: !15944, file: !1355, line: 177, type: !15901)
!15944 = distinct !DILexicalBlock(scope: !15941, file: !1355, line: 177, column: 3)
!15945 = !DILocation(line: 177, column: 3, scope: !15944)
!15946 = !DILocalVariable(name: "nbytes", scope: !15944, file: !1355, line: 177, type: !52)
!15947 = !DILocation(line: 178, column: 3, scope: !15948)
!15948 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 178, column: 3)
!15949 = !DILocation(line: 178, column: 3, scope: !15898)
!15950 = !DILocalVariable(name: "v", scope: !15951, file: !1355, line: 178, type: !1395)
!15951 = distinct !DILexicalBlock(scope: !15948, file: !1355, line: 178, column: 3)
!15952 = !DILocation(line: 178, column: 3, scope: !15951)
!15953 = !DILocalVariable(name: "nbytes", scope: !15951, file: !1355, line: 178, type: !52)
!15954 = !DILocation(line: 179, column: 3, scope: !15955)
!15955 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 179, column: 3)
!15956 = !DILocation(line: 179, column: 3, scope: !15898)
!15957 = !DILocalVariable(name: "v", scope: !15958, file: !1355, line: 179, type: !1395)
!15958 = distinct !DILexicalBlock(scope: !15955, file: !1355, line: 179, column: 3)
!15959 = !DILocation(line: 179, column: 3, scope: !15958)
!15960 = !DILocalVariable(name: "nbytes", scope: !15958, file: !1355, line: 179, type: !52)
!15961 = !DILocation(line: 180, column: 3, scope: !15962)
!15962 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 180, column: 3)
!15963 = !DILocation(line: 180, column: 3, scope: !15898)
!15964 = !DILocalVariable(name: "v", scope: !15965, file: !1355, line: 180, type: !1396)
!15965 = distinct !DILexicalBlock(scope: !15962, file: !1355, line: 180, column: 3)
!15966 = !DILocation(line: 180, column: 3, scope: !15965)
!15967 = !DILocalVariable(name: "nbytes", scope: !15965, file: !1355, line: 180, type: !52)
!15968 = !DILocation(line: 181, column: 3, scope: !15969)
!15969 = distinct !DILexicalBlock(scope: !15898, file: !1355, line: 181, column: 3)
!15970 = !DILocation(line: 181, column: 3, scope: !15898)
!15971 = !DILocalVariable(name: "v", scope: !15972, file: !1355, line: 181, type: !1396)
!15972 = distinct !DILexicalBlock(scope: !15969, file: !1355, line: 181, column: 3)
!15973 = !DILocation(line: 181, column: 3, scope: !15972)
!15974 = !DILocalVariable(name: "nbytes", scope: !15972, file: !1355, line: 181, type: !52)
!15975 = !DILocation(line: 189, column: 1, scope: !15898)
!15976 = distinct !DISubprogram(name: "randread_error", scope: !1355, file: !1355, line: 124, type: !1360, scopeLine: 125, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!15977 = !DILocalVariable(name: "file_name", arg: 1, scope: !15976, file: !1355, line: 124, type: !85)
!15978 = !DILocation(line: 124, column: 29, scope: !15976)
!15979 = !DILocation(line: 126, column: 7, scope: !15980)
!15980 = distinct !DILexicalBlock(scope: !15976, file: !1355, line: 126, column: 7)
!15981 = !DILocation(line: 126, column: 7, scope: !15976)
!15982 = !DILocation(line: 127, column: 12, scope: !15980)
!15983 = !DILocation(line: 127, column: 26, scope: !15980)
!15984 = !DILocation(line: 128, column: 12, scope: !15980)
!15985 = !DILocation(line: 128, column: 18, scope: !15980)
!15986 = !DILocation(line: 128, column: 25, scope: !15980)
!15987 = !DILocation(line: 128, column: 48, scope: !15980)
!15988 = !DILocation(line: 129, column: 19, scope: !15980)
!15989 = !DILocation(line: 129, column: 12, scope: !15980)
!15990 = !DILocation(line: 127, column: 5, scope: !15980)
!15991 = !DILocation(line: 130, column: 3, scope: !15976)
!15992 = distinct !DISubprogram(name: "randread_set_handler", scope: !1355, file: !1355, line: 242, type: !15993, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!15993 = !DISubroutineType(types: !15994)
!15994 = !{null, !1353, !1359}
!15995 = !DILocalVariable(name: "s", arg: 1, scope: !15992, file: !1355, line: 242, type: !1353)
!15996 = !DILocation(line: 242, column: 47, scope: !15992)
!15997 = !DILocalVariable(name: "handler", arg: 2, scope: !15992, file: !1355, line: 242, type: !1359)
!15998 = !DILocation(line: 242, column: 57, scope: !15992)
!15999 = !DILocation(line: 244, column: 16, scope: !15992)
!16000 = !DILocation(line: 244, column: 3, scope: !15992)
!16001 = !DILocation(line: 244, column: 6, scope: !15992)
!16002 = !DILocation(line: 244, column: 14, scope: !15992)
!16003 = !DILocation(line: 245, column: 1, scope: !15992)
!16004 = distinct !DISubprogram(name: "randread_set_handler_arg", scope: !1355, file: !1355, line: 248, type: !16005, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!16005 = !DISubroutineType(types: !16006)
!16006 = !{null, !1353, !85}
!16007 = !DILocalVariable(name: "s", arg: 1, scope: !16004, file: !1355, line: 248, type: !1353)
!16008 = !DILocation(line: 248, column: 51, scope: !16004)
!16009 = !DILocalVariable(name: "handler_arg", arg: 2, scope: !16004, file: !1355, line: 248, type: !85)
!16010 = !DILocation(line: 248, column: 66, scope: !16004)
!16011 = !DILocation(line: 250, column: 20, scope: !16004)
!16012 = !DILocation(line: 250, column: 3, scope: !16004)
!16013 = !DILocation(line: 250, column: 6, scope: !16004)
!16014 = !DILocation(line: 250, column: 18, scope: !16004)
!16015 = !DILocation(line: 251, column: 1, scope: !16004)
!16016 = distinct !DISubprogram(name: "randread", scope: !1355, file: !1355, line: 326, type: !16017, scopeLine: 327, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!16017 = !DISubroutineType(types: !16018)
!16018 = !{null, !1353, !47, !52}
!16019 = !DILocalVariable(name: "s", arg: 1, scope: !16016, file: !1355, line: 326, type: !1353)
!16020 = !DILocation(line: 326, column: 35, scope: !16016)
!16021 = !DILocalVariable(name: "buf", arg: 2, scope: !16016, file: !1355, line: 326, type: !47)
!16022 = !DILocation(line: 326, column: 44, scope: !16016)
!16023 = !DILocalVariable(name: "size", arg: 3, scope: !16016, file: !1355, line: 326, type: !52)
!16024 = !DILocation(line: 326, column: 56, scope: !16016)
!16025 = !DILocation(line: 328, column: 7, scope: !16026)
!16026 = distinct !DILexicalBlock(scope: !16016, file: !1355, line: 328, column: 7)
!16027 = !DILocation(line: 328, column: 10, scope: !16026)
!16028 = !DILocation(line: 328, column: 7, scope: !16016)
!16029 = !DILocation(line: 329, column: 17, scope: !16026)
!16030 = !DILocation(line: 329, column: 20, scope: !16026)
!16031 = !DILocation(line: 329, column: 25, scope: !16026)
!16032 = !DILocation(line: 329, column: 5, scope: !16026)
!16033 = !DILocation(line: 331, column: 17, scope: !16026)
!16034 = !DILocation(line: 331, column: 20, scope: !16026)
!16035 = !DILocation(line: 331, column: 24, scope: !16026)
!16036 = !DILocation(line: 331, column: 31, scope: !16026)
!16037 = !DILocation(line: 331, column: 36, scope: !16026)
!16038 = !DILocation(line: 331, column: 5, scope: !16026)
!16039 = !DILocation(line: 332, column: 1, scope: !16016)
!16040 = distinct !DISubprogram(name: "readsource", scope: !1355, file: !1355, line: 258, type: !16041, scopeLine: 259, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!16041 = !DISubroutineType(types: !16042)
!16042 = !{null, !1353, !16043, !52}
!16043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !535, size: 64)
!16044 = !DILocalVariable(name: "s", arg: 1, scope: !16040, file: !1355, line: 258, type: !1353)
!16045 = !DILocation(line: 258, column: 37, scope: !16040)
!16046 = !DILocalVariable(name: "p", arg: 2, scope: !16040, file: !1355, line: 258, type: !16043)
!16047 = !DILocation(line: 258, column: 55, scope: !16040)
!16048 = !DILocalVariable(name: "size", arg: 3, scope: !16040, file: !1355, line: 258, type: !52)
!16049 = !DILocation(line: 258, column: 65, scope: !16040)
!16050 = !DILocation(line: 260, column: 3, scope: !16040)
!16051 = !DILocalVariable(name: "inbytes", scope: !16052, file: !1355, line: 262, type: !52)
!16052 = distinct !DILexicalBlock(scope: !16040, file: !1355, line: 261, column: 5)
!16053 = !DILocation(line: 262, column: 14, scope: !16052)
!16054 = !DILocation(line: 262, column: 24, scope: !16052)
!16055 = !DILocalVariable(name: "fread_errno", scope: !16052, file: !1355, line: 263, type: !5)
!16056 = !DILocation(line: 263, column: 11, scope: !16052)
!16057 = !DILocation(line: 263, column: 25, scope: !16052)
!16058 = !DILocation(line: 264, column: 12, scope: !16052)
!16059 = !DILocation(line: 264, column: 9, scope: !16052)
!16060 = !DILocation(line: 265, column: 15, scope: !16052)
!16061 = !DILocation(line: 265, column: 12, scope: !16052)
!16062 = !DILocation(line: 266, column: 11, scope: !16063)
!16063 = distinct !DILexicalBlock(scope: !16052, file: !1355, line: 266, column: 11)
!16064 = !DILocation(line: 266, column: 16, scope: !16063)
!16065 = !DILocation(line: 266, column: 11, scope: !16052)
!16066 = !DILocation(line: 267, column: 9, scope: !16063)
!16067 = !DILocation(line: 268, column: 16, scope: !16052)
!16068 = !DILocation(line: 268, column: 37, scope: !16052)
!16069 = !DILocation(line: 268, column: 7, scope: !16052)
!16070 = !DILocation(line: 268, column: 13, scope: !16052)
!16071 = !DILocation(line: 269, column: 7, scope: !16052)
!16072 = !DILocation(line: 269, column: 10, scope: !16052)
!16073 = !DILocation(line: 269, column: 19, scope: !16052)
!16074 = !DILocation(line: 269, column: 22, scope: !16052)
!16075 = distinct !{!16075, !16050, !16076}
!16076 = !DILocation(line: 270, column: 5, scope: !16040)
!16077 = !DILocation(line: 271, column: 1, scope: !16040)
!16078 = distinct !DISubprogram(name: "readisaac", scope: !1355, file: !1355, line: 278, type: !16079, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!16079 = !DISubroutineType(types: !16080)
!16080 = !{null, !16081, !47, !52}
!16081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1371, size: 64)
!16082 = !DILocalVariable(name: "isaac", arg: 1, scope: !16078, file: !1355, line: 278, type: !16081)
!16083 = !DILocation(line: 278, column: 26, scope: !16078)
!16084 = !DILocalVariable(name: "p", arg: 2, scope: !16078, file: !1355, line: 278, type: !47)
!16085 = !DILocation(line: 278, column: 39, scope: !16078)
!16086 = !DILocalVariable(name: "size", arg: 3, scope: !16078, file: !1355, line: 278, type: !52)
!16087 = !DILocation(line: 278, column: 49, scope: !16078)
!16088 = !DILocalVariable(name: "inbytes", scope: !16078, file: !1355, line: 280, type: !52)
!16089 = !DILocation(line: 280, column: 10, scope: !16078)
!16090 = !DILocation(line: 280, column: 20, scope: !16078)
!16091 = !DILocation(line: 280, column: 27, scope: !16078)
!16092 = !DILocation(line: 282, column: 3, scope: !16078)
!16093 = !DILocalVariable(name: "char_p", scope: !16094, file: !1355, line: 284, type: !7)
!16094 = distinct !DILexicalBlock(scope: !16078, file: !1355, line: 283, column: 5)
!16095 = !DILocation(line: 284, column: 13, scope: !16094)
!16096 = !DILocation(line: 284, column: 22, scope: !16094)
!16097 = !DILocation(line: 286, column: 11, scope: !16098)
!16098 = distinct !DILexicalBlock(scope: !16094, file: !1355, line: 286, column: 11)
!16099 = !DILocation(line: 286, column: 19, scope: !16098)
!16100 = !DILocation(line: 286, column: 16, scope: !16098)
!16101 = !DILocation(line: 286, column: 11, scope: !16094)
!16102 = !DILocation(line: 288, column: 19, scope: !16103)
!16103 = distinct !DILexicalBlock(scope: !16098, file: !1355, line: 287, column: 9)
!16104 = !DILocation(line: 288, column: 22, scope: !16103)
!16105 = !DILocation(line: 288, column: 29, scope: !16103)
!16106 = !DILocation(line: 288, column: 34, scope: !16103)
!16107 = !DILocation(line: 288, column: 36, scope: !16103)
!16108 = !DILocation(line: 288, column: 52, scope: !16103)
!16109 = !DILocation(line: 288, column: 50, scope: !16103)
!16110 = !DILocation(line: 288, column: 61, scope: !16103)
!16111 = !DILocation(line: 288, column: 11, scope: !16103)
!16112 = !DILocation(line: 289, column: 29, scope: !16103)
!16113 = !DILocation(line: 289, column: 39, scope: !16103)
!16114 = !DILocation(line: 289, column: 37, scope: !16103)
!16115 = !DILocation(line: 289, column: 11, scope: !16103)
!16116 = !DILocation(line: 289, column: 18, scope: !16103)
!16117 = !DILocation(line: 289, column: 27, scope: !16103)
!16118 = !DILocation(line: 290, column: 11, scope: !16103)
!16119 = !DILocation(line: 293, column: 15, scope: !16094)
!16120 = !DILocation(line: 293, column: 18, scope: !16094)
!16121 = !DILocation(line: 293, column: 25, scope: !16094)
!16122 = !DILocation(line: 293, column: 30, scope: !16094)
!16123 = !DILocation(line: 293, column: 32, scope: !16094)
!16124 = !DILocation(line: 293, column: 48, scope: !16094)
!16125 = !DILocation(line: 293, column: 46, scope: !16094)
!16126 = !DILocation(line: 293, column: 57, scope: !16094)
!16127 = !DILocation(line: 293, column: 7, scope: !16094)
!16128 = !DILocation(line: 294, column: 11, scope: !16094)
!16129 = !DILocation(line: 294, column: 20, scope: !16094)
!16130 = !DILocation(line: 294, column: 18, scope: !16094)
!16131 = !DILocation(line: 294, column: 9, scope: !16094)
!16132 = !DILocation(line: 295, column: 15, scope: !16094)
!16133 = !DILocation(line: 295, column: 12, scope: !16094)
!16134 = !DILocation(line: 299, column: 11, scope: !16135)
!16135 = distinct !DILexicalBlock(scope: !16094, file: !1355, line: 299, column: 11)
!16136 = !DILocation(line: 299, column: 11, scope: !16094)
!16137 = !DILocalVariable(name: "wp", scope: !16138, file: !1355, line: 301, type: !1397)
!16138 = distinct !DILexicalBlock(scope: !16135, file: !1355, line: 300, column: 9)
!16139 = !DILocation(line: 301, column: 23, scope: !16138)
!16140 = !DILocation(line: 301, column: 28, scope: !16138)
!16141 = !DILocation(line: 302, column: 11, scope: !16138)
!16142 = !DILocation(line: 302, column: 33, scope: !16138)
!16143 = !DILocation(line: 302, column: 30, scope: !16138)
!16144 = !DILocation(line: 304, column: 30, scope: !16145)
!16145 = distinct !DILexicalBlock(scope: !16138, file: !1355, line: 303, column: 13)
!16146 = !DILocation(line: 304, column: 37, scope: !16145)
!16147 = !DILocation(line: 304, column: 44, scope: !16145)
!16148 = !DILocation(line: 304, column: 15, scope: !16145)
!16149 = !DILocation(line: 305, column: 18, scope: !16145)
!16150 = !DILocation(line: 306, column: 20, scope: !16145)
!16151 = !DILocation(line: 307, column: 19, scope: !16152)
!16152 = distinct !DILexicalBlock(scope: !16145, file: !1355, line: 307, column: 19)
!16153 = !DILocation(line: 307, column: 24, scope: !16152)
!16154 = !DILocation(line: 307, column: 19, scope: !16145)
!16155 = !DILocation(line: 309, column: 19, scope: !16156)
!16156 = distinct !DILexicalBlock(scope: !16152, file: !1355, line: 308, column: 17)
!16157 = !DILocation(line: 309, column: 26, scope: !16156)
!16158 = !DILocation(line: 309, column: 35, scope: !16156)
!16159 = !DILocation(line: 310, column: 19, scope: !16156)
!16160 = distinct !{!16160, !16141, !16161}
!16161 = !DILocation(line: 312, column: 13, scope: !16138)
!16162 = !DILocation(line: 313, column: 15, scope: !16138)
!16163 = !DILocation(line: 313, column: 13, scope: !16138)
!16164 = !DILocation(line: 314, column: 9, scope: !16138)
!16165 = !DILocation(line: 316, column: 22, scope: !16094)
!16166 = !DILocation(line: 316, column: 29, scope: !16094)
!16167 = !DILocation(line: 316, column: 36, scope: !16094)
!16168 = !DILocation(line: 316, column: 43, scope: !16094)
!16169 = !DILocation(line: 316, column: 48, scope: !16094)
!16170 = !DILocation(line: 316, column: 7, scope: !16094)
!16171 = !DILocation(line: 317, column: 15, scope: !16094)
!16172 = distinct !{!16172, !16092, !16173}
!16173 = !DILocation(line: 318, column: 5, scope: !16078)
!16174 = !DILocation(line: 319, column: 1, scope: !16078)
!16175 = distinct !DISubprogram(name: "randread_free", scope: !1355, file: !1355, line: 341, type: !16176, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1310, retainedNodes: !433)
!16176 = !DISubroutineType(types: !16177)
!16177 = !{!5, !1353}
!16178 = !DILocalVariable(name: "s", arg: 1, scope: !16175, file: !1355, line: 341, type: !1353)
!16179 = !DILocation(line: 341, column: 40, scope: !16175)
!16180 = !DILocalVariable(name: "source", scope: !16175, file: !1355, line: 343, type: !1313)
!16181 = !DILocation(line: 343, column: 9, scope: !16175)
!16182 = !DILocation(line: 343, column: 18, scope: !16175)
!16183 = !DILocation(line: 343, column: 21, scope: !16175)
!16184 = !DILocation(line: 344, column: 19, scope: !16175)
!16185 = !DILocation(line: 344, column: 3, scope: !16175)
!16186 = !DILocation(line: 345, column: 9, scope: !16175)
!16187 = !DILocation(line: 345, column: 3, scope: !16175)
!16188 = !DILocation(line: 346, column: 11, scope: !16175)
!16189 = !DILocation(line: 346, column: 28, scope: !16175)
!16190 = !DILocation(line: 346, column: 20, scope: !16175)
!16191 = !DILocation(line: 346, column: 3, scope: !16175)
!16192 = distinct !DISubprogram(name: "isaac_refill", scope: !16193, file: !16193, line: 90, type: !16194, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1398, retainedNodes: !433)
!16193 = !DIFile(filename: "lib/rand-isaac.c", directory: "/home/mohamad/clone/coreutils")
!16194 = !DISubroutineType(types: !16195)
!16195 = !{null, !16196, !1397}
!16196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16197, size: 64)
!16197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "isaac_state", file: !1376, line: 56, size: 16576, elements: !16198)
!16198 = !{!16199, !16200, !16201, !16202}
!16199 = !DIDerivedType(tag: DW_TAG_member, name: "m", scope: !16197, file: !1376, line: 58, baseType: !1379, size: 16384)
!16200 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !16197, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16384)
!16201 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !16197, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16448)
!16202 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !16197, file: !1376, line: 59, baseType: !1380, size: 64, offset: 16512)
!16203 = !DILocalVariable(name: "s", arg: 1, scope: !16192, file: !16193, line: 90, type: !16196)
!16204 = !DILocation(line: 90, column: 35, scope: !16192)
!16205 = !DILocalVariable(name: "result", arg: 2, scope: !16192, file: !16193, line: 90, type: !1397)
!16206 = !DILocation(line: 90, column: 49, scope: !16192)
!16207 = !DILocalVariable(name: "a", scope: !16192, file: !16193, line: 93, type: !1380)
!16208 = !DILocation(line: 93, column: 14, scope: !16192)
!16209 = !DILocation(line: 93, column: 18, scope: !16192)
!16210 = !DILocation(line: 93, column: 21, scope: !16192)
!16211 = !DILocalVariable(name: "b", scope: !16192, file: !16193, line: 94, type: !1380)
!16212 = !DILocation(line: 94, column: 14, scope: !16192)
!16213 = !DILocation(line: 94, column: 18, scope: !16192)
!16214 = !DILocation(line: 94, column: 21, scope: !16192)
!16215 = !DILocation(line: 94, column: 28, scope: !16192)
!16216 = !DILocation(line: 94, column: 31, scope: !16192)
!16217 = !DILocation(line: 94, column: 26, scope: !16192)
!16218 = !DILocation(line: 94, column: 23, scope: !16192)
!16219 = !DILocalVariable(name: "m", scope: !16192, file: !16193, line: 97, type: !1397)
!16220 = !DILocation(line: 97, column: 15, scope: !16192)
!16221 = !DILocation(line: 97, column: 19, scope: !16192)
!16222 = !DILocation(line: 97, column: 22, scope: !16192)
!16223 = !DILocalVariable(name: "r", scope: !16192, file: !16193, line: 98, type: !1397)
!16224 = !DILocation(line: 98, column: 15, scope: !16192)
!16225 = !DILocation(line: 98, column: 19, scope: !16192)
!16226 = !DILocation(line: 116, column: 3, scope: !16192)
!16227 = !DILocalVariable(name: "x", scope: !16228, file: !16193, line: 118, type: !1380)
!16228 = distinct !DILexicalBlock(scope: !16229, file: !16193, line: 118, column: 7)
!16229 = distinct !DILexicalBlock(scope: !16192, file: !16193, line: 117, column: 5)
!16230 = !DILocation(line: 118, column: 7, scope: !16228)
!16231 = !DILocalVariable(name: "y", scope: !16228, file: !16193, line: 118, type: !1380)
!16232 = !DILocalVariable(name: "x", scope: !16233, file: !16193, line: 119, type: !1380)
!16233 = distinct !DILexicalBlock(scope: !16229, file: !16193, line: 119, column: 7)
!16234 = !DILocation(line: 119, column: 7, scope: !16233)
!16235 = !DILocalVariable(name: "y", scope: !16233, file: !16193, line: 119, type: !1380)
!16236 = !DILocalVariable(name: "x", scope: !16237, file: !16193, line: 120, type: !1380)
!16237 = distinct !DILexicalBlock(scope: !16229, file: !16193, line: 120, column: 7)
!16238 = !DILocation(line: 120, column: 7, scope: !16237)
!16239 = !DILocalVariable(name: "y", scope: !16237, file: !16193, line: 120, type: !1380)
!16240 = !DILocalVariable(name: "x", scope: !16241, file: !16193, line: 121, type: !1380)
!16241 = distinct !DILexicalBlock(scope: !16229, file: !16193, line: 121, column: 7)
!16242 = !DILocation(line: 121, column: 7, scope: !16241)
!16243 = !DILocalVariable(name: "y", scope: !16241, file: !16193, line: 121, type: !1380)
!16244 = !DILocation(line: 122, column: 9, scope: !16229)
!16245 = !DILocation(line: 123, column: 5, scope: !16229)
!16246 = !DILocation(line: 124, column: 13, scope: !16192)
!16247 = !DILocation(line: 124, column: 21, scope: !16192)
!16248 = !DILocation(line: 124, column: 24, scope: !16192)
!16249 = !DILocation(line: 124, column: 26, scope: !16192)
!16250 = !DILocation(line: 124, column: 19, scope: !16192)
!16251 = distinct !{!16251, !16226, !16252}
!16252 = !DILocation(line: 124, column: 32, scope: !16192)
!16253 = !DILocation(line: 126, column: 3, scope: !16192)
!16254 = !DILocalVariable(name: "x", scope: !16255, file: !16193, line: 128, type: !1380)
!16255 = distinct !DILexicalBlock(scope: !16256, file: !16193, line: 128, column: 7)
!16256 = distinct !DILexicalBlock(scope: !16192, file: !16193, line: 127, column: 5)
!16257 = !DILocation(line: 128, column: 7, scope: !16255)
!16258 = !DILocalVariable(name: "y", scope: !16255, file: !16193, line: 128, type: !1380)
!16259 = !DILocalVariable(name: "x", scope: !16260, file: !16193, line: 129, type: !1380)
!16260 = distinct !DILexicalBlock(scope: !16256, file: !16193, line: 129, column: 7)
!16261 = !DILocation(line: 129, column: 7, scope: !16260)
!16262 = !DILocalVariable(name: "y", scope: !16260, file: !16193, line: 129, type: !1380)
!16263 = !DILocalVariable(name: "x", scope: !16264, file: !16193, line: 130, type: !1380)
!16264 = distinct !DILexicalBlock(scope: !16256, file: !16193, line: 130, column: 7)
!16265 = !DILocation(line: 130, column: 7, scope: !16264)
!16266 = !DILocalVariable(name: "y", scope: !16264, file: !16193, line: 130, type: !1380)
!16267 = !DILocalVariable(name: "x", scope: !16268, file: !16193, line: 131, type: !1380)
!16268 = distinct !DILexicalBlock(scope: !16256, file: !16193, line: 131, column: 7)
!16269 = !DILocation(line: 131, column: 7, scope: !16268)
!16270 = !DILocalVariable(name: "y", scope: !16268, file: !16193, line: 131, type: !1380)
!16271 = !DILocation(line: 132, column: 9, scope: !16256)
!16272 = !DILocation(line: 133, column: 5, scope: !16256)
!16273 = !DILocation(line: 134, column: 13, scope: !16192)
!16274 = !DILocation(line: 134, column: 21, scope: !16192)
!16275 = !DILocation(line: 134, column: 24, scope: !16192)
!16276 = !DILocation(line: 134, column: 26, scope: !16192)
!16277 = !DILocation(line: 134, column: 19, scope: !16192)
!16278 = distinct !{!16278, !16253, !16279}
!16279 = !DILocation(line: 134, column: 39, scope: !16192)
!16280 = !DILocation(line: 136, column: 10, scope: !16192)
!16281 = !DILocation(line: 136, column: 3, scope: !16192)
!16282 = !DILocation(line: 136, column: 6, scope: !16192)
!16283 = !DILocation(line: 136, column: 8, scope: !16192)
!16284 = !DILocation(line: 137, column: 10, scope: !16192)
!16285 = !DILocation(line: 137, column: 3, scope: !16192)
!16286 = !DILocation(line: 137, column: 6, scope: !16192)
!16287 = !DILocation(line: 137, column: 8, scope: !16192)
!16288 = !DILocation(line: 138, column: 1, scope: !16192)
!16289 = distinct !DISubprogram(name: "ind", scope: !16193, file: !16193, line: 68, type: !16290, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1398, retainedNodes: !433)
!16290 = !DISubroutineType(types: !16291)
!16291 = !{!1380, !1401, !1380}
!16292 = !DILocalVariable(name: "m", arg: 1, scope: !16289, file: !16193, line: 68, type: !1401)
!16293 = !DILocation(line: 68, column: 24, scope: !16289)
!16294 = !DILocalVariable(name: "x", arg: 2, scope: !16289, file: !16193, line: 68, type: !1380)
!16295 = !DILocation(line: 68, column: 38, scope: !16289)
!16296 = !DILocalVariable(name: "void_m", scope: !16297, file: !16193, line: 75, type: !85)
!16297 = distinct !DILexicalBlock(scope: !16298, file: !16193, line: 71, column: 5)
!16298 = distinct !DILexicalBlock(scope: !16289, file: !16193, line: 70, column: 7)
!16299 = !DILocation(line: 75, column: 19, scope: !16297)
!16300 = !DILocation(line: 75, column: 28, scope: !16297)
!16301 = !DILocalVariable(name: "base_p", scope: !16297, file: !16193, line: 76, type: !90)
!16302 = !DILocation(line: 76, column: 19, scope: !16297)
!16303 = !DILocation(line: 76, column: 28, scope: !16297)
!16304 = !DILocalVariable(name: "word_p", scope: !16297, file: !16193, line: 77, type: !85)
!16305 = !DILocation(line: 77, column: 19, scope: !16297)
!16306 = !DILocation(line: 77, column: 28, scope: !16297)
!16307 = !DILocation(line: 77, column: 38, scope: !16297)
!16308 = !DILocation(line: 77, column: 40, scope: !16297)
!16309 = !DILocation(line: 77, column: 35, scope: !16297)
!16310 = !DILocalVariable(name: "p", scope: !16297, file: !16193, line: 78, type: !1401)
!16311 = !DILocation(line: 78, column: 25, scope: !16297)
!16312 = !DILocation(line: 78, column: 29, scope: !16297)
!16313 = !DILocation(line: 79, column: 15, scope: !16297)
!16314 = !DILocation(line: 79, column: 14, scope: !16297)
!16315 = !DILocation(line: 79, column: 7, scope: !16297)
!16316 = distinct !DISubprogram(name: "just", scope: !16193, file: !16193, line: 60, type: !16317, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1398, retainedNodes: !433)
!16317 = !DISubroutineType(types: !16318)
!16318 = !{!1380, !1380}
!16319 = !DILocalVariable(name: "a", arg: 1, scope: !16316, file: !16193, line: 60, type: !1380)
!16320 = !DILocation(line: 60, column: 18, scope: !16316)
!16321 = !DILocalVariable(name: "desired_bits", scope: !16316, file: !16193, line: 62, type: !1380)
!16322 = !DILocation(line: 62, column: 14, scope: !16316)
!16323 = !DILocation(line: 63, column: 10, scope: !16316)
!16324 = !DILocation(line: 63, column: 14, scope: !16316)
!16325 = !DILocation(line: 63, column: 12, scope: !16316)
!16326 = !DILocation(line: 63, column: 3, scope: !16316)
!16327 = distinct !DISubprogram(name: "isaac_seed", scope: !16193, file: !16193, line: 248, type: !16328, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1398, retainedNodes: !433)
!16328 = !DISubroutineType(types: !16329)
!16329 = !{null, !16196}
!16330 = !DILocalVariable(name: "s", arg: 1, scope: !16327, file: !16193, line: 248, type: !16196)
!16331 = !DILocation(line: 248, column: 33, scope: !16327)
!16332 = !DILocalVariable(name: "a", scope: !16327, file: !16193, line: 250, type: !1380)
!16333 = !DILocation(line: 250, column: 14, scope: !16327)
!16334 = !DILocalVariable(name: "b", scope: !16327, file: !16193, line: 251, type: !1380)
!16335 = !DILocation(line: 251, column: 14, scope: !16327)
!16336 = !DILocalVariable(name: "c", scope: !16327, file: !16193, line: 252, type: !1380)
!16337 = !DILocation(line: 252, column: 14, scope: !16327)
!16338 = !DILocalVariable(name: "d", scope: !16327, file: !16193, line: 253, type: !1380)
!16339 = !DILocation(line: 253, column: 14, scope: !16327)
!16340 = !DILocalVariable(name: "e", scope: !16327, file: !16193, line: 254, type: !1380)
!16341 = !DILocation(line: 254, column: 14, scope: !16327)
!16342 = !DILocalVariable(name: "f", scope: !16327, file: !16193, line: 255, type: !1380)
!16343 = !DILocation(line: 255, column: 14, scope: !16327)
!16344 = !DILocalVariable(name: "g", scope: !16327, file: !16193, line: 256, type: !1380)
!16345 = !DILocation(line: 256, column: 14, scope: !16327)
!16346 = !DILocalVariable(name: "h", scope: !16327, file: !16193, line: 257, type: !1380)
!16347 = !DILocation(line: 257, column: 14, scope: !16327)
!16348 = !DILocalVariable(name: "i", scope: !16349, file: !16193, line: 269, type: !5)
!16349 = distinct !DILexicalBlock(scope: !16327, file: !16193, line: 269, column: 3)
!16350 = !DILocation(line: 269, column: 3, scope: !16349)
!16351 = !DILocation(line: 269, column: 3, scope: !16352)
!16352 = distinct !DILexicalBlock(scope: !16349, file: !16193, line: 269, column: 3)
!16353 = !DILocation(line: 269, column: 3, scope: !16354)
!16354 = distinct !DILexicalBlock(scope: !16352, file: !16193, line: 269, column: 3)
!16355 = !DILocation(line: 269, column: 3, scope: !16356)
!16356 = distinct !DILexicalBlock(scope: !16354, file: !16193, line: 269, column: 3)
!16357 = !DILocation(line: 269, column: 3, scope: !16358)
!16358 = distinct !DILexicalBlock(scope: !16356, file: !16193, line: 269, column: 3)
!16359 = distinct !{!16359, !16351, !16351}
!16360 = !DILocalVariable(name: "i", scope: !16361, file: !16193, line: 270, type: !5)
!16361 = distinct !DILexicalBlock(scope: !16327, file: !16193, line: 270, column: 3)
!16362 = !DILocation(line: 270, column: 3, scope: !16361)
!16363 = !DILocation(line: 270, column: 3, scope: !16364)
!16364 = distinct !DILexicalBlock(scope: !16361, file: !16193, line: 270, column: 3)
!16365 = !DILocation(line: 270, column: 3, scope: !16366)
!16366 = distinct !DILexicalBlock(scope: !16364, file: !16193, line: 270, column: 3)
!16367 = !DILocation(line: 270, column: 3, scope: !16368)
!16368 = distinct !DILexicalBlock(scope: !16366, file: !16193, line: 270, column: 3)
!16369 = !DILocation(line: 270, column: 3, scope: !16370)
!16370 = distinct !DILexicalBlock(scope: !16368, file: !16193, line: 270, column: 3)
!16371 = distinct !{!16371, !16363, !16363}
!16372 = !DILocation(line: 272, column: 17, scope: !16327)
!16373 = !DILocation(line: 272, column: 20, scope: !16327)
!16374 = !DILocation(line: 272, column: 22, scope: !16327)
!16375 = !DILocation(line: 272, column: 10, scope: !16327)
!16376 = !DILocation(line: 272, column: 13, scope: !16327)
!16377 = !DILocation(line: 272, column: 15, scope: !16327)
!16378 = !DILocation(line: 272, column: 3, scope: !16327)
!16379 = !DILocation(line: 272, column: 6, scope: !16327)
!16380 = !DILocation(line: 272, column: 8, scope: !16327)
!16381 = !DILocation(line: 273, column: 1, scope: !16327)
!16382 = distinct !DISubprogram(name: "readtokens0_init", scope: !16383, file: !16383, line: 30, type: !16384, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1403, retainedNodes: !433)
!16383 = !DIFile(filename: "lib/readtokens0.c", directory: "/home/mohamad/clone/coreutils")
!16384 = !DISubroutineType(types: !16385)
!16385 = !{null, !16386}
!16386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16387, size: 64)
!16387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Tokens", file: !1823, line: 28, size: 2304, elements: !16388)
!16388 = !{!16389, !16390, !16391, !16392, !16393, !16394}
!16389 = !DIDerivedType(tag: DW_TAG_member, name: "n_tok", scope: !16387, file: !1823, line: 30, baseType: !52, size: 64)
!16390 = !DIDerivedType(tag: DW_TAG_member, name: "tok", scope: !16387, file: !1823, line: 31, baseType: !178, size: 64, offset: 64)
!16391 = !DIDerivedType(tag: DW_TAG_member, name: "tok_len", scope: !16387, file: !1823, line: 32, baseType: !618, size: 64, offset: 128)
!16392 = !DIDerivedType(tag: DW_TAG_member, name: "o_data", scope: !16387, file: !1823, line: 33, baseType: !1408, size: 704, offset: 192)
!16393 = !DIDerivedType(tag: DW_TAG_member, name: "o_tok", scope: !16387, file: !1823, line: 34, baseType: !1408, size: 704, offset: 896)
!16394 = !DIDerivedType(tag: DW_TAG_member, name: "o_tok_len", scope: !16387, file: !1823, line: 35, baseType: !1408, size: 704, offset: 1600)
!16395 = !DILocalVariable(name: "t", arg: 1, scope: !16382, file: !16383, line: 30, type: !16386)
!16396 = !DILocation(line: 30, column: 34, scope: !16382)
!16397 = !DILocation(line: 32, column: 3, scope: !16382)
!16398 = !DILocation(line: 32, column: 6, scope: !16382)
!16399 = !DILocation(line: 32, column: 12, scope: !16382)
!16400 = !DILocation(line: 33, column: 3, scope: !16382)
!16401 = !DILocation(line: 33, column: 6, scope: !16382)
!16402 = !DILocation(line: 33, column: 10, scope: !16382)
!16403 = !DILocation(line: 34, column: 3, scope: !16382)
!16404 = !DILocation(line: 34, column: 6, scope: !16382)
!16405 = !DILocation(line: 34, column: 14, scope: !16382)
!16406 = !DILocation(line: 35, column: 3, scope: !16382)
!16407 = !DILocation(line: 36, column: 3, scope: !16382)
!16408 = !DILocation(line: 37, column: 3, scope: !16382)
!16409 = !DILocation(line: 38, column: 1, scope: !16382)
!16410 = distinct !DISubprogram(name: "readtokens0_free", scope: !16383, file: !16383, line: 41, type: !16384, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1403, retainedNodes: !433)
!16411 = !DILocalVariable(name: "t", arg: 1, scope: !16410, file: !16383, line: 41, type: !16386)
!16412 = !DILocation(line: 41, column: 34, scope: !16410)
!16413 = !DILocalVariable(name: "__o", scope: !16414, file: !16383, line: 43, type: !1407)
!16414 = distinct !DILexicalBlock(scope: !16410, file: !16383, line: 43, column: 3)
!16415 = !DILocation(line: 43, column: 3, scope: !16414)
!16416 = !DILocalVariable(name: "__obj", scope: !16414, file: !16383, line: 43, type: !47)
!16417 = !DILocation(line: 43, column: 3, scope: !16418)
!16418 = distinct !DILexicalBlock(scope: !16414, file: !16383, line: 43, column: 3)
!16419 = !DILocalVariable(name: "__o", scope: !16420, file: !16383, line: 44, type: !1407)
!16420 = distinct !DILexicalBlock(scope: !16410, file: !16383, line: 44, column: 3)
!16421 = !DILocation(line: 44, column: 3, scope: !16420)
!16422 = !DILocalVariable(name: "__obj", scope: !16420, file: !16383, line: 44, type: !47)
!16423 = !DILocation(line: 44, column: 3, scope: !16424)
!16424 = distinct !DILexicalBlock(scope: !16420, file: !16383, line: 44, column: 3)
!16425 = !DILocalVariable(name: "__o", scope: !16426, file: !16383, line: 45, type: !1407)
!16426 = distinct !DILexicalBlock(scope: !16410, file: !16383, line: 45, column: 3)
!16427 = !DILocation(line: 45, column: 3, scope: !16426)
!16428 = !DILocalVariable(name: "__obj", scope: !16426, file: !16383, line: 45, type: !47)
!16429 = !DILocation(line: 45, column: 3, scope: !16430)
!16430 = distinct !DILexicalBlock(scope: !16426, file: !16383, line: 45, column: 3)
!16431 = !DILocation(line: 46, column: 1, scope: !16410)
!16432 = distinct !DISubprogram(name: "readtokens0", scope: !16383, file: !16383, line: 66, type: !16433, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1403, retainedNodes: !433)
!16433 = !DISubroutineType(types: !16434)
!16434 = !{!162, !16435, !16386}
!16435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16436, size: 64)
!16436 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !16437)
!16437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !16438)
!16438 = !{!16439, !16440, !16441, !16442, !16443, !16444, !16445, !16446, !16447, !16448, !16449, !16450, !16451, !16459, !16460, !16461, !16462, !16463, !16464, !16465, !16466, !16467, !16468, !16469, !16470, !16471, !16472, !16473, !16474}
!16439 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !16437, file: !2, line: 242, baseType: !5, size: 32)
!16440 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !16437, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!16441 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !16437, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!16442 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !16437, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!16443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !16437, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!16444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !16437, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!16445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !16437, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!16446 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !16437, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!16447 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !16437, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!16448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !16437, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!16449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !16437, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!16450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !16437, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!16451 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !16437, file: !2, line: 260, baseType: !16452, size: 64, offset: 768)
!16452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16453, size: 64)
!16453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !16454)
!16454 = !{!16455, !16456, !16458}
!16455 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !16453, file: !2, line: 157, baseType: !16452, size: 64)
!16456 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !16453, file: !2, line: 158, baseType: !16457, size: 64, offset: 64)
!16457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16437, size: 64)
!16458 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !16453, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!16459 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !16437, file: !2, line: 262, baseType: !16457, size: 64, offset: 832)
!16460 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !16437, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!16461 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !16437, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!16462 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !16437, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!16463 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !16437, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!16464 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !16437, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!16465 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !16437, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!16466 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !16437, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!16467 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !16437, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!16468 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !16437, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!16469 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !16437, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!16470 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !16437, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!16471 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !16437, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!16472 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !16437, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!16473 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !16437, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!16474 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !16437, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!16475 = !DILocalVariable(name: "in", arg: 1, scope: !16432, file: !16383, line: 66, type: !16435)
!16476 = !DILocation(line: 66, column: 20, scope: !16432)
!16477 = !DILocalVariable(name: "t", arg: 2, scope: !16432, file: !16383, line: 66, type: !16386)
!16478 = !DILocation(line: 66, column: 39, scope: !16432)
!16479 = !DILocation(line: 69, column: 3, scope: !16432)
!16480 = !DILocalVariable(name: "c", scope: !16481, file: !16383, line: 71, type: !5)
!16481 = distinct !DILexicalBlock(scope: !16432, file: !16383, line: 70, column: 5)
!16482 = !DILocation(line: 71, column: 11, scope: !16481)
!16483 = !DILocation(line: 71, column: 22, scope: !16481)
!16484 = !DILocation(line: 71, column: 15, scope: !16481)
!16485 = !DILocation(line: 72, column: 11, scope: !16486)
!16486 = distinct !DILexicalBlock(scope: !16481, file: !16383, line: 72, column: 11)
!16487 = !DILocation(line: 72, column: 13, scope: !16486)
!16488 = !DILocation(line: 72, column: 11, scope: !16481)
!16489 = !DILocalVariable(name: "len", scope: !16490, file: !16383, line: 74, type: !52)
!16490 = distinct !DILexicalBlock(scope: !16486, file: !16383, line: 73, column: 9)
!16491 = !DILocation(line: 74, column: 18, scope: !16490)
!16492 = !DILocalVariable(name: "__o", scope: !16493, file: !16383, line: 74, type: !1441)
!16493 = distinct !DILexicalBlock(scope: !16490, file: !16383, line: 74, column: 24)
!16494 = !DILocation(line: 74, column: 24, scope: !16493)
!16495 = !DILocation(line: 78, column: 15, scope: !16496)
!16496 = distinct !DILexicalBlock(scope: !16490, file: !16383, line: 78, column: 15)
!16497 = !DILocation(line: 78, column: 15, scope: !16490)
!16498 = !DILocalVariable(name: "__o", scope: !16499, file: !16383, line: 80, type: !1407)
!16499 = distinct !DILexicalBlock(scope: !16500, file: !16383, line: 80, column: 15)
!16500 = distinct !DILexicalBlock(scope: !16496, file: !16383, line: 79, column: 13)
!16501 = !DILocation(line: 80, column: 15, scope: !16499)
!16502 = !DILocalVariable(name: "__o1", scope: !16503, file: !16383, line: 80, type: !1441)
!16503 = distinct !DILexicalBlock(scope: !16504, file: !16383, line: 80, column: 15)
!16504 = distinct !DILexicalBlock(scope: !16499, file: !16383, line: 80, column: 15)
!16505 = !DILocation(line: 80, column: 15, scope: !16503)
!16506 = !DILocation(line: 80, column: 15, scope: !16504)
!16507 = !DILocation(line: 81, column: 27, scope: !16500)
!16508 = !DILocation(line: 81, column: 15, scope: !16500)
!16509 = !DILocation(line: 82, column: 13, scope: !16500)
!16510 = !DILocation(line: 84, column: 11, scope: !16490)
!16511 = !DILocalVariable(name: "__o", scope: !16512, file: !16383, line: 87, type: !1407)
!16512 = distinct !DILexicalBlock(scope: !16481, file: !16383, line: 87, column: 7)
!16513 = !DILocation(line: 87, column: 7, scope: !16512)
!16514 = !DILocalVariable(name: "__o1", scope: !16515, file: !16383, line: 87, type: !1441)
!16515 = distinct !DILexicalBlock(scope: !16516, file: !16383, line: 87, column: 7)
!16516 = distinct !DILexicalBlock(scope: !16512, file: !16383, line: 87, column: 7)
!16517 = !DILocation(line: 87, column: 7, scope: !16515)
!16518 = !DILocation(line: 87, column: 7, scope: !16516)
!16519 = !DILocation(line: 88, column: 11, scope: !16520)
!16520 = distinct !DILexicalBlock(scope: !16481, file: !16383, line: 88, column: 11)
!16521 = !DILocation(line: 88, column: 13, scope: !16520)
!16522 = !DILocation(line: 88, column: 11, scope: !16481)
!16523 = !DILocation(line: 89, column: 21, scope: !16520)
!16524 = !DILocation(line: 89, column: 9, scope: !16520)
!16525 = distinct !{!16525, !16479, !16526}
!16526 = !DILocation(line: 90, column: 5, scope: !16432)
!16527 = !DILocalVariable(name: "__o", scope: !16528, file: !16383, line: 94, type: !1407)
!16528 = distinct !DILexicalBlock(scope: !16432, file: !16383, line: 94, column: 3)
!16529 = !DILocation(line: 94, column: 3, scope: !16528)
!16530 = !DILocalVariable(name: "__o1", scope: !16531, file: !16383, line: 94, type: !1441)
!16531 = distinct !DILexicalBlock(scope: !16532, file: !16383, line: 94, column: 3)
!16532 = distinct !DILexicalBlock(scope: !16528, file: !16383, line: 94, column: 3)
!16533 = !DILocation(line: 94, column: 3, scope: !16531)
!16534 = !DILocation(line: 94, column: 3, scope: !16532)
!16535 = !DILocalVariable(name: "__o1", scope: !16536, file: !16383, line: 94, type: !1407)
!16536 = distinct !DILexicalBlock(scope: !16528, file: !16383, line: 94, column: 3)
!16537 = !DILocation(line: 94, column: 3, scope: !16536)
!16538 = !DILocalVariable(name: "__p1", scope: !16536, file: !16383, line: 94, type: !47)
!16539 = !DILocalVariable(name: "__o1", scope: !16540, file: !16383, line: 96, type: !1407)
!16540 = distinct !DILexicalBlock(scope: !16432, file: !16383, line: 96, column: 12)
!16541 = !DILocation(line: 96, column: 12, scope: !16540)
!16542 = !DILocalVariable(name: "__value", scope: !16540, file: !16383, line: 96, type: !47)
!16543 = !DILocation(line: 96, column: 12, scope: !16544)
!16544 = distinct !DILexicalBlock(scope: !16540, file: !16383, line: 96, column: 12)
!16545 = !DILocation(line: 96, column: 12, scope: !16546)
!16546 = distinct !DILexicalBlock(scope: !16540, file: !16383, line: 96, column: 12)
!16547 = !DILocation(line: 96, column: 12, scope: !16432)
!16548 = !DILocation(line: 96, column: 3, scope: !16432)
!16549 = !DILocation(line: 96, column: 6, scope: !16432)
!16550 = !DILocation(line: 96, column: 10, scope: !16432)
!16551 = !DILocalVariable(name: "__o1", scope: !16552, file: !16383, line: 97, type: !1407)
!16552 = distinct !DILexicalBlock(scope: !16432, file: !16383, line: 97, column: 16)
!16553 = !DILocation(line: 97, column: 16, scope: !16552)
!16554 = !DILocalVariable(name: "__value", scope: !16552, file: !16383, line: 97, type: !47)
!16555 = !DILocation(line: 97, column: 16, scope: !16556)
!16556 = distinct !DILexicalBlock(scope: !16552, file: !16383, line: 97, column: 16)
!16557 = !DILocation(line: 97, column: 16, scope: !16558)
!16558 = distinct !DILexicalBlock(scope: !16552, file: !16383, line: 97, column: 16)
!16559 = !DILocation(line: 97, column: 16, scope: !16432)
!16560 = !DILocation(line: 97, column: 3, scope: !16432)
!16561 = !DILocation(line: 97, column: 6, scope: !16432)
!16562 = !DILocation(line: 97, column: 14, scope: !16432)
!16563 = !DILocation(line: 98, column: 20, scope: !16432)
!16564 = !DILocation(line: 98, column: 12, scope: !16432)
!16565 = !DILocation(line: 98, column: 10, scope: !16432)
!16566 = !DILocation(line: 98, column: 3, scope: !16432)
!16567 = distinct !DISubprogram(name: "save_token", scope: !16383, file: !16383, line: 51, type: !16384, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1403, retainedNodes: !433)
!16568 = !DILocalVariable(name: "t", arg: 1, scope: !16567, file: !16383, line: 51, type: !16386)
!16569 = !DILocation(line: 51, column: 28, scope: !16567)
!16570 = !DILocalVariable(name: "len", scope: !16567, file: !16383, line: 54, type: !52)
!16571 = !DILocation(line: 54, column: 10, scope: !16567)
!16572 = !DILocalVariable(name: "__o", scope: !16573, file: !16383, line: 54, type: !1441)
!16573 = distinct !DILexicalBlock(scope: !16567, file: !16383, line: 54, column: 16)
!16574 = !DILocation(line: 54, column: 16, scope: !16573)
!16575 = !DILocation(line: 54, column: 49, scope: !16567)
!16576 = !DILocalVariable(name: "s", scope: !16567, file: !16383, line: 55, type: !90)
!16577 = !DILocation(line: 55, column: 15, scope: !16567)
!16578 = !DILocalVariable(name: "__o1", scope: !16579, file: !16383, line: 55, type: !1407)
!16579 = distinct !DILexicalBlock(scope: !16567, file: !16383, line: 55, column: 19)
!16580 = !DILocation(line: 55, column: 19, scope: !16579)
!16581 = !DILocalVariable(name: "__value", scope: !16579, file: !16383, line: 55, type: !47)
!16582 = !DILocation(line: 55, column: 19, scope: !16583)
!16583 = distinct !DILexicalBlock(scope: !16579, file: !16383, line: 55, column: 19)
!16584 = !DILocation(line: 55, column: 19, scope: !16585)
!16585 = distinct !DILexicalBlock(scope: !16579, file: !16383, line: 55, column: 19)
!16586 = !DILocalVariable(name: "__o", scope: !16587, file: !16383, line: 56, type: !1407)
!16587 = distinct !DILexicalBlock(scope: !16567, file: !16383, line: 56, column: 3)
!16588 = !DILocation(line: 56, column: 3, scope: !16587)
!16589 = !DILocalVariable(name: "__o1", scope: !16590, file: !16383, line: 56, type: !1441)
!16590 = distinct !DILexicalBlock(scope: !16591, file: !16383, line: 56, column: 3)
!16591 = distinct !DILexicalBlock(scope: !16587, file: !16383, line: 56, column: 3)
!16592 = !DILocation(line: 56, column: 3, scope: !16590)
!16593 = !DILocation(line: 56, column: 3, scope: !16591)
!16594 = !DILocalVariable(name: "__o1", scope: !16595, file: !16383, line: 56, type: !1407)
!16595 = distinct !DILexicalBlock(scope: !16587, file: !16383, line: 56, column: 3)
!16596 = !DILocation(line: 56, column: 3, scope: !16595)
!16597 = !DILocalVariable(name: "__p1", scope: !16595, file: !16383, line: 56, type: !47)
!16598 = !DILocalVariable(name: "__o", scope: !16599, file: !16383, line: 57, type: !1407)
!16599 = distinct !DILexicalBlock(scope: !16567, file: !16383, line: 57, column: 3)
!16600 = !DILocation(line: 57, column: 3, scope: !16599)
!16601 = !DILocalVariable(name: "__len", scope: !16599, file: !16383, line: 57, type: !52)
!16602 = !DILocalVariable(name: "__o1", scope: !16603, file: !16383, line: 57, type: !1441)
!16603 = distinct !DILexicalBlock(scope: !16604, file: !16383, line: 57, column: 3)
!16604 = distinct !DILexicalBlock(scope: !16599, file: !16383, line: 57, column: 3)
!16605 = !DILocation(line: 57, column: 3, scope: !16603)
!16606 = !DILocation(line: 57, column: 3, scope: !16604)
!16607 = !DILocation(line: 58, column: 3, scope: !16567)
!16608 = !DILocation(line: 58, column: 6, scope: !16567)
!16609 = !DILocation(line: 58, column: 11, scope: !16567)
!16610 = !DILocation(line: 59, column: 1, scope: !16567)
!16611 = distinct !DISubprogram(name: "mkstemp_safer", scope: !16612, file: !16612, line: 31, type: !16613, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1443, retainedNodes: !433)
!16612 = !DIFile(filename: "lib/mkstemp-safer.c", directory: "/home/mohamad/clone/coreutils")
!16613 = !DISubroutineType(types: !16614)
!16614 = !{!5, !7}
!16615 = !DILocalVariable(name: "templ", arg: 1, scope: !16611, file: !16612, line: 31, type: !7)
!16616 = !DILocation(line: 31, column: 22, scope: !16611)
!16617 = !DILocation(line: 33, column: 29, scope: !16611)
!16618 = !DILocation(line: 33, column: 20, scope: !16611)
!16619 = !DILocation(line: 33, column: 10, scope: !16611)
!16620 = !DILocation(line: 33, column: 3, scope: !16611)
!16621 = distinct !DISubprogram(name: "mkostemp_safer", scope: !16612, file: !16612, line: 40, type: !16622, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1443, retainedNodes: !433)
!16622 = !DISubroutineType(types: !16623)
!16623 = !{!5, !7, !5}
!16624 = !DILocalVariable(name: "templ", arg: 1, scope: !16621, file: !16612, line: 40, type: !7)
!16625 = !DILocation(line: 40, column: 23, scope: !16621)
!16626 = !DILocalVariable(name: "flags", arg: 2, scope: !16621, file: !16612, line: 40, type: !5)
!16627 = !DILocation(line: 40, column: 34, scope: !16621)
!16628 = !DILocation(line: 42, column: 35, scope: !16621)
!16629 = !DILocation(line: 42, column: 42, scope: !16621)
!16630 = !DILocation(line: 42, column: 25, scope: !16621)
!16631 = !DILocation(line: 42, column: 50, scope: !16621)
!16632 = !DILocation(line: 42, column: 10, scope: !16621)
!16633 = !DILocation(line: 42, column: 3, scope: !16621)
!16634 = distinct !DISubprogram(name: "strnumcmp", scope: !16635, file: !16635, line: 27, type: !16636, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1445, retainedNodes: !433)
!16635 = !DIFile(filename: "lib/strnumcmp.c", directory: "/home/mohamad/clone/coreutils")
!16636 = !DISubroutineType(types: !16637)
!16637 = !{!5, !90, !90, !5, !5}
!16638 = !DILocalVariable(name: "a", arg: 1, scope: !16634, file: !16635, line: 27, type: !90)
!16639 = !DILocation(line: 27, column: 24, scope: !16634)
!16640 = !DILocalVariable(name: "b", arg: 2, scope: !16634, file: !16635, line: 27, type: !90)
!16641 = !DILocation(line: 27, column: 39, scope: !16634)
!16642 = !DILocalVariable(name: "decimal_point", arg: 3, scope: !16634, file: !16635, line: 28, type: !5)
!16643 = !DILocation(line: 28, column: 16, scope: !16634)
!16644 = !DILocalVariable(name: "thousands_sep", arg: 4, scope: !16634, file: !16635, line: 28, type: !5)
!16645 = !DILocation(line: 28, column: 35, scope: !16634)
!16646 = !DILocation(line: 30, column: 22, scope: !16634)
!16647 = !DILocation(line: 30, column: 25, scope: !16634)
!16648 = !DILocation(line: 30, column: 28, scope: !16634)
!16649 = !DILocation(line: 30, column: 43, scope: !16634)
!16650 = !DILocation(line: 30, column: 10, scope: !16634)
!16651 = !DILocation(line: 30, column: 3, scope: !16634)
!16652 = distinct !DISubprogram(name: "numcompare", scope: !16653, file: !16653, line: 114, type: !16636, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1445, retainedNodes: !433)
!16653 = !DIFile(filename: "./lib/strnumcmp-in.h", directory: "/home/mohamad/clone/coreutils")
!16654 = !DILocalVariable(name: "a", arg: 1, scope: !16652, file: !16653, line: 114, type: !90)
!16655 = !DILocation(line: 114, column: 25, scope: !16652)
!16656 = !DILocalVariable(name: "b", arg: 2, scope: !16652, file: !16653, line: 114, type: !90)
!16657 = !DILocation(line: 114, column: 40, scope: !16652)
!16658 = !DILocalVariable(name: "decimal_point", arg: 3, scope: !16652, file: !16653, line: 115, type: !5)
!16659 = !DILocation(line: 115, column: 17, scope: !16652)
!16660 = !DILocalVariable(name: "thousands_sep", arg: 4, scope: !16652, file: !16653, line: 115, type: !5)
!16661 = !DILocation(line: 115, column: 36, scope: !16652)
!16662 = !DILocalVariable(name: "tmpa", scope: !16652, file: !16653, line: 117, type: !535)
!16663 = !DILocation(line: 117, column: 17, scope: !16652)
!16664 = !DILocation(line: 117, column: 25, scope: !16652)
!16665 = !DILocation(line: 117, column: 24, scope: !16652)
!16666 = !DILocalVariable(name: "tmpb", scope: !16652, file: !16653, line: 118, type: !535)
!16667 = !DILocation(line: 118, column: 17, scope: !16652)
!16668 = !DILocation(line: 118, column: 25, scope: !16652)
!16669 = !DILocation(line: 118, column: 24, scope: !16652)
!16670 = !DILocalVariable(name: "tmp", scope: !16652, file: !16653, line: 119, type: !5)
!16671 = !DILocation(line: 119, column: 7, scope: !16652)
!16672 = !DILocalVariable(name: "log_a", scope: !16652, file: !16653, line: 120, type: !52)
!16673 = !DILocation(line: 120, column: 10, scope: !16652)
!16674 = !DILocalVariable(name: "log_b", scope: !16652, file: !16653, line: 121, type: !52)
!16675 = !DILocation(line: 121, column: 10, scope: !16652)
!16676 = !DILocation(line: 123, column: 7, scope: !16677)
!16677 = distinct !DILexicalBlock(scope: !16652, file: !16653, line: 123, column: 7)
!16678 = !DILocation(line: 123, column: 12, scope: !16677)
!16679 = !DILocation(line: 123, column: 7, scope: !16652)
!16680 = !DILocation(line: 125, column: 7, scope: !16681)
!16681 = distinct !DILexicalBlock(scope: !16677, file: !16653, line: 124, column: 5)
!16682 = !DILocation(line: 126, column: 17, scope: !16681)
!16683 = !DILocation(line: 126, column: 16, scope: !16681)
!16684 = !DILocation(line: 126, column: 14, scope: !16681)
!16685 = !DILocation(line: 126, column: 9, scope: !16681)
!16686 = !DILocation(line: 127, column: 14, scope: !16681)
!16687 = !DILocation(line: 127, column: 19, scope: !16681)
!16688 = !DILocation(line: 127, column: 35, scope: !16681)
!16689 = !DILocation(line: 127, column: 38, scope: !16681)
!16690 = !DILocation(line: 127, column: 46, scope: !16681)
!16691 = !DILocation(line: 127, column: 43, scope: !16681)
!16692 = distinct !{!16692, !16680, !16693}
!16693 = !DILocation(line: 127, column: 59, scope: !16681)
!16694 = !DILocation(line: 128, column: 11, scope: !16695)
!16695 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 128, column: 11)
!16696 = !DILocation(line: 128, column: 16, scope: !16695)
!16697 = !DILocation(line: 128, column: 11, scope: !16681)
!16698 = !DILocation(line: 130, column: 15, scope: !16699)
!16699 = distinct !DILexicalBlock(scope: !16700, file: !16653, line: 130, column: 15)
!16700 = distinct !DILexicalBlock(scope: !16695, file: !16653, line: 129, column: 9)
!16701 = !DILocation(line: 130, column: 23, scope: !16699)
!16702 = !DILocation(line: 130, column: 20, scope: !16699)
!16703 = !DILocation(line: 130, column: 15, scope: !16700)
!16704 = !DILocation(line: 131, column: 13, scope: !16699)
!16705 = !DILocation(line: 132, column: 23, scope: !16699)
!16706 = !DILocation(line: 132, column: 22, scope: !16699)
!16707 = !DILocation(line: 132, column: 20, scope: !16699)
!16708 = !DILocation(line: 132, column: 15, scope: !16699)
!16709 = !DILocation(line: 133, column: 20, scope: !16699)
!16710 = !DILocation(line: 133, column: 25, scope: !16699)
!16711 = distinct !{!16711, !16704, !16712}
!16712 = !DILocation(line: 133, column: 40, scope: !16699)
!16713 = !DILocation(line: 134, column: 15, scope: !16714)
!16714 = distinct !DILexicalBlock(scope: !16700, file: !16653, line: 134, column: 15)
!16715 = !DILocation(line: 134, column: 15, scope: !16700)
!16716 = !DILocation(line: 135, column: 13, scope: !16714)
!16717 = !DILocation(line: 136, column: 11, scope: !16700)
!16718 = !DILocation(line: 136, column: 18, scope: !16700)
!16719 = !DILocation(line: 136, column: 23, scope: !16700)
!16720 = !DILocation(line: 136, column: 39, scope: !16700)
!16721 = !DILocation(line: 136, column: 42, scope: !16700)
!16722 = !DILocation(line: 136, column: 50, scope: !16700)
!16723 = !DILocation(line: 136, column: 47, scope: !16700)
!16724 = !DILocation(line: 137, column: 21, scope: !16700)
!16725 = !DILocation(line: 137, column: 20, scope: !16700)
!16726 = !DILocation(line: 137, column: 18, scope: !16700)
!16727 = distinct !{!16727, !16717, !16728}
!16728 = !DILocation(line: 137, column: 23, scope: !16700)
!16729 = !DILocation(line: 138, column: 15, scope: !16730)
!16730 = distinct !DILexicalBlock(scope: !16700, file: !16653, line: 138, column: 15)
!16731 = !DILocation(line: 138, column: 23, scope: !16730)
!16732 = !DILocation(line: 138, column: 20, scope: !16730)
!16733 = !DILocation(line: 138, column: 15, scope: !16700)
!16734 = !DILocation(line: 139, column: 13, scope: !16730)
!16735 = !DILocation(line: 140, column: 23, scope: !16730)
!16736 = !DILocation(line: 140, column: 22, scope: !16730)
!16737 = !DILocation(line: 140, column: 20, scope: !16730)
!16738 = !DILocation(line: 140, column: 15, scope: !16730)
!16739 = !DILocation(line: 141, column: 20, scope: !16730)
!16740 = !DILocation(line: 141, column: 25, scope: !16730)
!16741 = distinct !{!16741, !16734, !16742}
!16742 = !DILocation(line: 141, column: 40, scope: !16730)
!16743 = !DILocation(line: 142, column: 20, scope: !16700)
!16744 = !DILocation(line: 142, column: 18, scope: !16700)
!16745 = !DILocation(line: 142, column: 11, scope: !16700)
!16746 = !DILocation(line: 144, column: 7, scope: !16681)
!16747 = !DILocation(line: 145, column: 17, scope: !16681)
!16748 = !DILocation(line: 145, column: 16, scope: !16681)
!16749 = !DILocation(line: 145, column: 14, scope: !16681)
!16750 = !DILocation(line: 145, column: 9, scope: !16681)
!16751 = !DILocation(line: 146, column: 14, scope: !16681)
!16752 = !DILocation(line: 146, column: 19, scope: !16681)
!16753 = !DILocation(line: 146, column: 35, scope: !16681)
!16754 = !DILocation(line: 146, column: 38, scope: !16681)
!16755 = !DILocation(line: 146, column: 46, scope: !16681)
!16756 = !DILocation(line: 146, column: 43, scope: !16681)
!16757 = distinct !{!16757, !16746, !16758}
!16758 = !DILocation(line: 146, column: 59, scope: !16681)
!16759 = !DILocation(line: 148, column: 7, scope: !16681)
!16760 = !DILocation(line: 148, column: 14, scope: !16681)
!16761 = !DILocation(line: 148, column: 22, scope: !16681)
!16762 = !DILocation(line: 148, column: 19, scope: !16681)
!16763 = !DILocation(line: 148, column: 27, scope: !16681)
!16764 = !DILocation(line: 148, column: 30, scope: !16681)
!16765 = !DILocation(line: 0, scope: !16681)
!16766 = !DILocation(line: 150, column: 11, scope: !16767)
!16767 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 149, column: 9)
!16768 = !DILocation(line: 151, column: 21, scope: !16767)
!16769 = !DILocation(line: 151, column: 20, scope: !16767)
!16770 = !DILocation(line: 151, column: 18, scope: !16767)
!16771 = !DILocation(line: 151, column: 13, scope: !16767)
!16772 = !DILocation(line: 152, column: 18, scope: !16767)
!16773 = !DILocation(line: 152, column: 26, scope: !16767)
!16774 = !DILocation(line: 152, column: 23, scope: !16767)
!16775 = distinct !{!16775, !16766, !16776}
!16776 = !DILocation(line: 152, column: 39, scope: !16767)
!16777 = !DILocation(line: 153, column: 11, scope: !16767)
!16778 = !DILocation(line: 154, column: 21, scope: !16767)
!16779 = !DILocation(line: 154, column: 20, scope: !16767)
!16780 = !DILocation(line: 154, column: 18, scope: !16767)
!16781 = !DILocation(line: 154, column: 13, scope: !16767)
!16782 = !DILocation(line: 155, column: 18, scope: !16767)
!16783 = !DILocation(line: 155, column: 26, scope: !16767)
!16784 = !DILocation(line: 155, column: 23, scope: !16767)
!16785 = distinct !{!16785, !16777, !16786}
!16786 = !DILocation(line: 155, column: 39, scope: !16767)
!16787 = distinct !{!16787, !16759, !16788}
!16788 = !DILocation(line: 156, column: 9, scope: !16681)
!16789 = !DILocation(line: 158, column: 12, scope: !16790)
!16790 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 158, column: 11)
!16791 = !DILocation(line: 158, column: 20, scope: !16790)
!16792 = !DILocation(line: 158, column: 17, scope: !16790)
!16793 = !DILocation(line: 158, column: 34, scope: !16790)
!16794 = !DILocation(line: 158, column: 38, scope: !16790)
!16795 = !DILocation(line: 159, column: 11, scope: !16790)
!16796 = !DILocation(line: 159, column: 15, scope: !16790)
!16797 = !DILocation(line: 159, column: 23, scope: !16790)
!16798 = !DILocation(line: 159, column: 20, scope: !16790)
!16799 = !DILocation(line: 159, column: 37, scope: !16790)
!16800 = !DILocation(line: 159, column: 41, scope: !16790)
!16801 = !DILocation(line: 158, column: 11, scope: !16681)
!16802 = !DILocation(line: 160, column: 29, scope: !16790)
!16803 = !DILocation(line: 160, column: 32, scope: !16790)
!16804 = !DILocation(line: 160, column: 35, scope: !16790)
!16805 = !DILocation(line: 160, column: 16, scope: !16790)
!16806 = !DILocation(line: 160, column: 9, scope: !16790)
!16807 = !DILocation(line: 162, column: 13, scope: !16681)
!16808 = !DILocation(line: 162, column: 20, scope: !16681)
!16809 = !DILocation(line: 162, column: 18, scope: !16681)
!16810 = !DILocation(line: 162, column: 11, scope: !16681)
!16811 = !DILocation(line: 164, column: 18, scope: !16812)
!16812 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 164, column: 7)
!16813 = !DILocation(line: 164, column: 12, scope: !16812)
!16814 = !DILocation(line: 164, column: 23, scope: !16815)
!16815 = distinct !DILexicalBlock(scope: !16812, file: !16653, line: 164, column: 7)
!16816 = !DILocation(line: 164, column: 7, scope: !16812)
!16817 = !DILocation(line: 165, column: 9, scope: !16815)
!16818 = !DILocation(line: 166, column: 19, scope: !16815)
!16819 = !DILocation(line: 166, column: 18, scope: !16815)
!16820 = !DILocation(line: 166, column: 16, scope: !16815)
!16821 = !DILocation(line: 166, column: 11, scope: !16815)
!16822 = !DILocation(line: 167, column: 16, scope: !16815)
!16823 = !DILocation(line: 167, column: 24, scope: !16815)
!16824 = !DILocation(line: 167, column: 21, scope: !16815)
!16825 = distinct !{!16825, !16817, !16826}
!16826 = !DILocation(line: 167, column: 37, scope: !16815)
!16827 = !DILocation(line: 164, column: 39, scope: !16815)
!16828 = !DILocation(line: 164, column: 7, scope: !16815)
!16829 = distinct !{!16829, !16816, !16830}
!16830 = !DILocation(line: 167, column: 37, scope: !16812)
!16831 = !DILocation(line: 169, column: 18, scope: !16832)
!16832 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 169, column: 7)
!16833 = !DILocation(line: 169, column: 12, scope: !16832)
!16834 = !DILocation(line: 169, column: 23, scope: !16835)
!16835 = distinct !DILexicalBlock(scope: !16832, file: !16653, line: 169, column: 7)
!16836 = !DILocation(line: 169, column: 7, scope: !16832)
!16837 = !DILocation(line: 170, column: 9, scope: !16835)
!16838 = !DILocation(line: 171, column: 19, scope: !16835)
!16839 = !DILocation(line: 171, column: 18, scope: !16835)
!16840 = !DILocation(line: 171, column: 16, scope: !16835)
!16841 = !DILocation(line: 171, column: 11, scope: !16835)
!16842 = !DILocation(line: 172, column: 16, scope: !16835)
!16843 = !DILocation(line: 172, column: 24, scope: !16835)
!16844 = !DILocation(line: 172, column: 21, scope: !16835)
!16845 = distinct !{!16845, !16837, !16846}
!16846 = !DILocation(line: 172, column: 37, scope: !16835)
!16847 = !DILocation(line: 169, column: 39, scope: !16835)
!16848 = !DILocation(line: 169, column: 7, scope: !16835)
!16849 = distinct !{!16849, !16836, !16850}
!16850 = !DILocation(line: 172, column: 37, scope: !16832)
!16851 = !DILocation(line: 174, column: 11, scope: !16852)
!16852 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 174, column: 11)
!16853 = !DILocation(line: 174, column: 20, scope: !16852)
!16854 = !DILocation(line: 174, column: 17, scope: !16852)
!16855 = !DILocation(line: 174, column: 11, scope: !16681)
!16856 = !DILocation(line: 175, column: 16, scope: !16852)
!16857 = !DILocation(line: 175, column: 24, scope: !16852)
!16858 = !DILocation(line: 175, column: 22, scope: !16852)
!16859 = !DILocation(line: 175, column: 9, scope: !16852)
!16860 = !DILocation(line: 177, column: 12, scope: !16861)
!16861 = distinct !DILexicalBlock(scope: !16681, file: !16653, line: 177, column: 11)
!16862 = !DILocation(line: 177, column: 11, scope: !16681)
!16863 = !DILocation(line: 178, column: 9, scope: !16861)
!16864 = !DILocation(line: 180, column: 14, scope: !16681)
!16865 = !DILocation(line: 180, column: 7, scope: !16681)
!16866 = !DILocation(line: 182, column: 12, scope: !16867)
!16867 = distinct !DILexicalBlock(scope: !16677, file: !16653, line: 182, column: 12)
!16868 = !DILocation(line: 182, column: 17, scope: !16867)
!16869 = !DILocation(line: 182, column: 12, scope: !16677)
!16870 = !DILocation(line: 184, column: 7, scope: !16871)
!16871 = distinct !DILexicalBlock(scope: !16867, file: !16653, line: 183, column: 5)
!16872 = !DILocation(line: 185, column: 17, scope: !16871)
!16873 = !DILocation(line: 185, column: 16, scope: !16871)
!16874 = !DILocation(line: 185, column: 14, scope: !16871)
!16875 = !DILocation(line: 185, column: 9, scope: !16871)
!16876 = !DILocation(line: 186, column: 14, scope: !16871)
!16877 = !DILocation(line: 186, column: 19, scope: !16871)
!16878 = !DILocation(line: 186, column: 35, scope: !16871)
!16879 = !DILocation(line: 186, column: 38, scope: !16871)
!16880 = !DILocation(line: 186, column: 46, scope: !16871)
!16881 = !DILocation(line: 186, column: 43, scope: !16871)
!16882 = distinct !{!16882, !16870, !16883}
!16883 = !DILocation(line: 186, column: 59, scope: !16871)
!16884 = !DILocation(line: 187, column: 11, scope: !16885)
!16885 = distinct !DILexicalBlock(scope: !16871, file: !16653, line: 187, column: 11)
!16886 = !DILocation(line: 187, column: 19, scope: !16885)
!16887 = !DILocation(line: 187, column: 16, scope: !16885)
!16888 = !DILocation(line: 187, column: 11, scope: !16871)
!16889 = !DILocation(line: 188, column: 9, scope: !16885)
!16890 = !DILocation(line: 189, column: 19, scope: !16885)
!16891 = !DILocation(line: 189, column: 18, scope: !16885)
!16892 = !DILocation(line: 189, column: 16, scope: !16885)
!16893 = !DILocation(line: 189, column: 11, scope: !16885)
!16894 = !DILocation(line: 190, column: 16, scope: !16885)
!16895 = !DILocation(line: 190, column: 21, scope: !16885)
!16896 = distinct !{!16896, !16889, !16897}
!16897 = !DILocation(line: 190, column: 36, scope: !16885)
!16898 = !DILocation(line: 191, column: 11, scope: !16899)
!16899 = distinct !DILexicalBlock(scope: !16871, file: !16653, line: 191, column: 11)
!16900 = !DILocation(line: 191, column: 11, scope: !16871)
!16901 = !DILocation(line: 192, column: 9, scope: !16899)
!16902 = !DILocation(line: 193, column: 7, scope: !16871)
!16903 = !DILocation(line: 193, column: 14, scope: !16871)
!16904 = !DILocation(line: 193, column: 19, scope: !16871)
!16905 = !DILocation(line: 193, column: 35, scope: !16871)
!16906 = !DILocation(line: 193, column: 38, scope: !16871)
!16907 = !DILocation(line: 193, column: 46, scope: !16871)
!16908 = !DILocation(line: 193, column: 43, scope: !16871)
!16909 = !DILocation(line: 194, column: 17, scope: !16871)
!16910 = !DILocation(line: 194, column: 16, scope: !16871)
!16911 = !DILocation(line: 194, column: 14, scope: !16871)
!16912 = distinct !{!16912, !16902, !16913}
!16913 = !DILocation(line: 194, column: 19, scope: !16871)
!16914 = !DILocation(line: 195, column: 11, scope: !16915)
!16915 = distinct !DILexicalBlock(scope: !16871, file: !16653, line: 195, column: 11)
!16916 = !DILocation(line: 195, column: 19, scope: !16915)
!16917 = !DILocation(line: 195, column: 16, scope: !16915)
!16918 = !DILocation(line: 195, column: 11, scope: !16871)
!16919 = !DILocation(line: 196, column: 9, scope: !16915)
!16920 = !DILocation(line: 197, column: 19, scope: !16915)
!16921 = !DILocation(line: 197, column: 18, scope: !16915)
!16922 = !DILocation(line: 197, column: 16, scope: !16915)
!16923 = !DILocation(line: 197, column: 11, scope: !16915)
!16924 = !DILocation(line: 198, column: 16, scope: !16915)
!16925 = !DILocation(line: 198, column: 21, scope: !16915)
!16926 = distinct !{!16926, !16919, !16927}
!16927 = !DILocation(line: 198, column: 36, scope: !16915)
!16928 = !DILocation(line: 199, column: 14, scope: !16871)
!16929 = !DILocation(line: 199, column: 7, scope: !16871)
!16930 = !DILocation(line: 203, column: 7, scope: !16931)
!16931 = distinct !DILexicalBlock(scope: !16867, file: !16653, line: 202, column: 5)
!16932 = !DILocation(line: 203, column: 14, scope: !16931)
!16933 = !DILocation(line: 203, column: 19, scope: !16931)
!16934 = !DILocation(line: 203, column: 35, scope: !16931)
!16935 = !DILocation(line: 203, column: 38, scope: !16931)
!16936 = !DILocation(line: 203, column: 46, scope: !16931)
!16937 = !DILocation(line: 203, column: 43, scope: !16931)
!16938 = !DILocation(line: 204, column: 17, scope: !16931)
!16939 = !DILocation(line: 204, column: 16, scope: !16931)
!16940 = !DILocation(line: 204, column: 14, scope: !16931)
!16941 = distinct !{!16941, !16930, !16942}
!16942 = !DILocation(line: 204, column: 19, scope: !16931)
!16943 = !DILocation(line: 205, column: 7, scope: !16931)
!16944 = !DILocation(line: 205, column: 14, scope: !16931)
!16945 = !DILocation(line: 205, column: 19, scope: !16931)
!16946 = !DILocation(line: 205, column: 35, scope: !16931)
!16947 = !DILocation(line: 205, column: 38, scope: !16931)
!16948 = !DILocation(line: 205, column: 46, scope: !16931)
!16949 = !DILocation(line: 205, column: 43, scope: !16931)
!16950 = !DILocation(line: 206, column: 17, scope: !16931)
!16951 = !DILocation(line: 206, column: 16, scope: !16931)
!16952 = !DILocation(line: 206, column: 14, scope: !16931)
!16953 = distinct !{!16953, !16943, !16954}
!16954 = !DILocation(line: 206, column: 19, scope: !16931)
!16955 = !DILocation(line: 208, column: 7, scope: !16931)
!16956 = !DILocation(line: 208, column: 14, scope: !16931)
!16957 = !DILocation(line: 208, column: 22, scope: !16931)
!16958 = !DILocation(line: 208, column: 19, scope: !16931)
!16959 = !DILocation(line: 208, column: 27, scope: !16931)
!16960 = !DILocation(line: 208, column: 30, scope: !16931)
!16961 = !DILocation(line: 0, scope: !16931)
!16962 = !DILocation(line: 210, column: 11, scope: !16963)
!16963 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 209, column: 9)
!16964 = !DILocation(line: 211, column: 21, scope: !16963)
!16965 = !DILocation(line: 211, column: 20, scope: !16963)
!16966 = !DILocation(line: 211, column: 18, scope: !16963)
!16967 = !DILocation(line: 211, column: 13, scope: !16963)
!16968 = !DILocation(line: 212, column: 18, scope: !16963)
!16969 = !DILocation(line: 212, column: 26, scope: !16963)
!16970 = !DILocation(line: 212, column: 23, scope: !16963)
!16971 = distinct !{!16971, !16962, !16972}
!16972 = !DILocation(line: 212, column: 39, scope: !16963)
!16973 = !DILocation(line: 213, column: 11, scope: !16963)
!16974 = !DILocation(line: 214, column: 21, scope: !16963)
!16975 = !DILocation(line: 214, column: 20, scope: !16963)
!16976 = !DILocation(line: 214, column: 18, scope: !16963)
!16977 = !DILocation(line: 214, column: 13, scope: !16963)
!16978 = !DILocation(line: 215, column: 18, scope: !16963)
!16979 = !DILocation(line: 215, column: 26, scope: !16963)
!16980 = !DILocation(line: 215, column: 23, scope: !16963)
!16981 = distinct !{!16981, !16973, !16982}
!16982 = !DILocation(line: 215, column: 39, scope: !16963)
!16983 = distinct !{!16983, !16955, !16984}
!16984 = !DILocation(line: 216, column: 9, scope: !16931)
!16985 = !DILocation(line: 218, column: 12, scope: !16986)
!16986 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 218, column: 11)
!16987 = !DILocation(line: 218, column: 20, scope: !16986)
!16988 = !DILocation(line: 218, column: 17, scope: !16986)
!16989 = !DILocation(line: 218, column: 34, scope: !16986)
!16990 = !DILocation(line: 218, column: 38, scope: !16986)
!16991 = !DILocation(line: 219, column: 11, scope: !16986)
!16992 = !DILocation(line: 219, column: 15, scope: !16986)
!16993 = !DILocation(line: 219, column: 23, scope: !16986)
!16994 = !DILocation(line: 219, column: 20, scope: !16986)
!16995 = !DILocation(line: 219, column: 37, scope: !16986)
!16996 = !DILocation(line: 219, column: 41, scope: !16986)
!16997 = !DILocation(line: 218, column: 11, scope: !16931)
!16998 = !DILocation(line: 220, column: 29, scope: !16986)
!16999 = !DILocation(line: 220, column: 32, scope: !16986)
!17000 = !DILocation(line: 220, column: 35, scope: !16986)
!17001 = !DILocation(line: 220, column: 16, scope: !16986)
!17002 = !DILocation(line: 220, column: 9, scope: !16986)
!17003 = !DILocation(line: 222, column: 13, scope: !16931)
!17004 = !DILocation(line: 222, column: 20, scope: !16931)
!17005 = !DILocation(line: 222, column: 18, scope: !16931)
!17006 = !DILocation(line: 222, column: 11, scope: !16931)
!17007 = !DILocation(line: 224, column: 18, scope: !17008)
!17008 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 224, column: 7)
!17009 = !DILocation(line: 224, column: 12, scope: !17008)
!17010 = !DILocation(line: 224, column: 23, scope: !17011)
!17011 = distinct !DILexicalBlock(scope: !17008, file: !16653, line: 224, column: 7)
!17012 = !DILocation(line: 224, column: 7, scope: !17008)
!17013 = !DILocation(line: 225, column: 9, scope: !17011)
!17014 = !DILocation(line: 226, column: 19, scope: !17011)
!17015 = !DILocation(line: 226, column: 18, scope: !17011)
!17016 = !DILocation(line: 226, column: 16, scope: !17011)
!17017 = !DILocation(line: 226, column: 11, scope: !17011)
!17018 = !DILocation(line: 227, column: 16, scope: !17011)
!17019 = !DILocation(line: 227, column: 24, scope: !17011)
!17020 = !DILocation(line: 227, column: 21, scope: !17011)
!17021 = distinct !{!17021, !17013, !17022}
!17022 = !DILocation(line: 227, column: 37, scope: !17011)
!17023 = !DILocation(line: 224, column: 39, scope: !17011)
!17024 = !DILocation(line: 224, column: 7, scope: !17011)
!17025 = distinct !{!17025, !17012, !17026}
!17026 = !DILocation(line: 227, column: 37, scope: !17008)
!17027 = !DILocation(line: 229, column: 18, scope: !17028)
!17028 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 229, column: 7)
!17029 = !DILocation(line: 229, column: 12, scope: !17028)
!17030 = !DILocation(line: 229, column: 23, scope: !17031)
!17031 = distinct !DILexicalBlock(scope: !17028, file: !16653, line: 229, column: 7)
!17032 = !DILocation(line: 229, column: 7, scope: !17028)
!17033 = !DILocation(line: 230, column: 9, scope: !17031)
!17034 = !DILocation(line: 231, column: 19, scope: !17031)
!17035 = !DILocation(line: 231, column: 18, scope: !17031)
!17036 = !DILocation(line: 231, column: 16, scope: !17031)
!17037 = !DILocation(line: 231, column: 11, scope: !17031)
!17038 = !DILocation(line: 232, column: 16, scope: !17031)
!17039 = !DILocation(line: 232, column: 24, scope: !17031)
!17040 = !DILocation(line: 232, column: 21, scope: !17031)
!17041 = distinct !{!17041, !17033, !17042}
!17042 = !DILocation(line: 232, column: 37, scope: !17031)
!17043 = !DILocation(line: 229, column: 39, scope: !17031)
!17044 = !DILocation(line: 229, column: 7, scope: !17031)
!17045 = distinct !{!17045, !17032, !17046}
!17046 = !DILocation(line: 232, column: 37, scope: !17028)
!17047 = !DILocation(line: 234, column: 11, scope: !17048)
!17048 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 234, column: 11)
!17049 = !DILocation(line: 234, column: 20, scope: !17048)
!17050 = !DILocation(line: 234, column: 17, scope: !17048)
!17051 = !DILocation(line: 234, column: 11, scope: !16931)
!17052 = !DILocation(line: 235, column: 16, scope: !17048)
!17053 = !DILocation(line: 235, column: 24, scope: !17048)
!17054 = !DILocation(line: 235, column: 22, scope: !17048)
!17055 = !DILocation(line: 235, column: 9, scope: !17048)
!17056 = !DILocation(line: 237, column: 12, scope: !17057)
!17057 = distinct !DILexicalBlock(scope: !16931, file: !16653, line: 237, column: 11)
!17058 = !DILocation(line: 237, column: 11, scope: !16931)
!17059 = !DILocation(line: 238, column: 9, scope: !17057)
!17060 = !DILocation(line: 240, column: 14, scope: !16931)
!17061 = !DILocation(line: 240, column: 7, scope: !16931)
!17062 = !DILocation(line: 242, column: 1, scope: !16652)
!17063 = distinct !DISubprogram(name: "fraccompare", scope: !16653, file: !16653, line: 74, type: !17064, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1445, retainedNodes: !433)
!17064 = !DISubroutineType(types: !17065)
!17065 = !{!5, !90, !90, !8}
!17066 = !DILocalVariable(name: "a", arg: 1, scope: !17063, file: !16653, line: 74, type: !90)
!17067 = !DILocation(line: 74, column: 26, scope: !17063)
!17068 = !DILocalVariable(name: "b", arg: 2, scope: !17063, file: !16653, line: 74, type: !90)
!17069 = !DILocation(line: 74, column: 41, scope: !17063)
!17070 = !DILocalVariable(name: "decimal_point", arg: 3, scope: !17063, file: !16653, line: 74, type: !8)
!17071 = !DILocation(line: 74, column: 49, scope: !17063)
!17072 = !DILocation(line: 76, column: 8, scope: !17073)
!17073 = distinct !DILexicalBlock(scope: !17063, file: !16653, line: 76, column: 7)
!17074 = !DILocation(line: 76, column: 7, scope: !17073)
!17075 = !DILocation(line: 76, column: 13, scope: !17073)
!17076 = !DILocation(line: 76, column: 10, scope: !17073)
!17077 = !DILocation(line: 76, column: 27, scope: !17073)
!17078 = !DILocation(line: 76, column: 31, scope: !17073)
!17079 = !DILocation(line: 76, column: 30, scope: !17073)
!17080 = !DILocation(line: 76, column: 36, scope: !17073)
!17081 = !DILocation(line: 76, column: 33, scope: !17073)
!17082 = !DILocation(line: 76, column: 7, scope: !17063)
!17083 = !DILocation(line: 78, column: 7, scope: !17084)
!17084 = distinct !DILexicalBlock(scope: !17073, file: !16653, line: 77, column: 5)
!17085 = !DILocation(line: 78, column: 15, scope: !17084)
!17086 = !DILocation(line: 78, column: 14, scope: !17084)
!17087 = !DILocation(line: 78, column: 23, scope: !17084)
!17088 = !DILocation(line: 78, column: 22, scope: !17084)
!17089 = !DILocation(line: 78, column: 19, scope: !17084)
!17090 = !DILocation(line: 79, column: 15, scope: !17091)
!17091 = distinct !DILexicalBlock(scope: !17084, file: !16653, line: 79, column: 13)
!17092 = !DILocation(line: 79, column: 13, scope: !17084)
!17093 = !DILocation(line: 80, column: 11, scope: !17091)
!17094 = distinct !{!17094, !17083, !17095}
!17095 = !DILocation(line: 80, column: 18, scope: !17084)
!17096 = !DILocation(line: 81, column: 11, scope: !17097)
!17097 = distinct !DILexicalBlock(scope: !17084, file: !16653, line: 81, column: 11)
!17098 = !DILocation(line: 81, column: 24, scope: !17097)
!17099 = !DILocation(line: 81, column: 27, scope: !17097)
!17100 = !DILocation(line: 81, column: 11, scope: !17084)
!17101 = !DILocation(line: 82, column: 17, scope: !17097)
!17102 = !DILocation(line: 82, column: 16, scope: !17097)
!17103 = !DILocation(line: 82, column: 22, scope: !17097)
!17104 = !DILocation(line: 82, column: 21, scope: !17097)
!17105 = !DILocation(line: 82, column: 19, scope: !17097)
!17106 = !DILocation(line: 82, column: 9, scope: !17097)
!17107 = !DILocation(line: 83, column: 11, scope: !17108)
!17108 = distinct !DILexicalBlock(scope: !17084, file: !16653, line: 83, column: 11)
!17109 = !DILocation(line: 83, column: 11, scope: !17084)
!17110 = !DILocation(line: 84, column: 9, scope: !17108)
!17111 = !DILocation(line: 85, column: 11, scope: !17112)
!17112 = distinct !DILexicalBlock(scope: !17084, file: !16653, line: 85, column: 11)
!17113 = !DILocation(line: 85, column: 11, scope: !17084)
!17114 = !DILocation(line: 86, column: 9, scope: !17112)
!17115 = !DILocation(line: 87, column: 7, scope: !17084)
!17116 = !DILocation(line: 89, column: 14, scope: !17117)
!17117 = distinct !DILexicalBlock(scope: !17073, file: !16653, line: 89, column: 12)
!17118 = !DILocation(line: 89, column: 12, scope: !17117)
!17119 = !DILocation(line: 89, column: 20, scope: !17117)
!17120 = !DILocation(line: 89, column: 17, scope: !17117)
!17121 = !DILocation(line: 89, column: 12, scope: !17073)
!17122 = !DILocation(line: 90, column: 5, scope: !17117)
!17123 = !DILabel(scope: !17124, name: "a_trailing_nonzero", file: !16653, line: 91)
!17124 = distinct !DILexicalBlock(scope: !17117, file: !16653, line: 90, column: 5)
!17125 = !DILocation(line: 91, column: 5, scope: !17124)
!17126 = !DILocation(line: 92, column: 7, scope: !17124)
!17127 = !DILocation(line: 92, column: 15, scope: !17124)
!17128 = !DILocation(line: 92, column: 14, scope: !17124)
!17129 = !DILocation(line: 92, column: 17, scope: !17124)
!17130 = !DILocation(line: 93, column: 10, scope: !17124)
!17131 = distinct !{!17131, !17126, !17130}
!17132 = !DILocation(line: 94, column: 14, scope: !17124)
!17133 = !DILocation(line: 94, column: 7, scope: !17124)
!17134 = !DILocation(line: 96, column: 14, scope: !17135)
!17135 = distinct !DILexicalBlock(scope: !17117, file: !16653, line: 96, column: 12)
!17136 = !DILocation(line: 96, column: 12, scope: !17135)
!17137 = !DILocation(line: 96, column: 20, scope: !17135)
!17138 = !DILocation(line: 96, column: 17, scope: !17135)
!17139 = !DILocation(line: 96, column: 12, scope: !17117)
!17140 = !DILocation(line: 97, column: 5, scope: !17135)
!17141 = !DILabel(scope: !17142, name: "b_trailing_nonzero", file: !16653, line: 98)
!17142 = distinct !DILexicalBlock(scope: !17135, file: !16653, line: 97, column: 5)
!17143 = !DILocation(line: 98, column: 5, scope: !17142)
!17144 = !DILocation(line: 99, column: 7, scope: !17142)
!17145 = !DILocation(line: 99, column: 15, scope: !17142)
!17146 = !DILocation(line: 99, column: 14, scope: !17142)
!17147 = !DILocation(line: 99, column: 17, scope: !17142)
!17148 = !DILocation(line: 100, column: 10, scope: !17142)
!17149 = distinct !{!17149, !17144, !17148}
!17150 = !DILocation(line: 101, column: 16, scope: !17142)
!17151 = !DILocation(line: 101, column: 14, scope: !17142)
!17152 = !DILocation(line: 101, column: 7, scope: !17142)
!17153 = !DILocation(line: 103, column: 3, scope: !17063)
!17154 = !DILocation(line: 104, column: 1, scope: !17063)
!17155 = distinct !DISubprogram(name: "fd_safer", scope: !17156, file: !17156, line: 37, type: !17157, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1448, retainedNodes: !433)
!17156 = !DIFile(filename: "lib/fd-safer.c", directory: "/home/mohamad/clone/coreutils")
!17157 = !DISubroutineType(types: !17158)
!17158 = !{!5, !5}
!17159 = !DILocalVariable(name: "fd", arg: 1, scope: !17155, file: !17156, line: 37, type: !5)
!17160 = !DILocation(line: 37, column: 15, scope: !17155)
!17161 = !DILocation(line: 39, column: 23, scope: !17162)
!17162 = distinct !DILexicalBlock(scope: !17155, file: !17156, line: 39, column: 7)
!17163 = !DILocation(line: 39, column: 20, scope: !17162)
!17164 = !DILocation(line: 39, column: 26, scope: !17162)
!17165 = !DILocation(line: 39, column: 29, scope: !17162)
!17166 = !DILocation(line: 39, column: 32, scope: !17162)
!17167 = !DILocation(line: 39, column: 7, scope: !17155)
!17168 = !DILocalVariable(name: "f", scope: !17169, file: !17156, line: 41, type: !5)
!17169 = distinct !DILexicalBlock(scope: !17162, file: !17156, line: 40, column: 5)
!17170 = !DILocation(line: 41, column: 11, scope: !17169)
!17171 = !DILocation(line: 41, column: 26, scope: !17169)
!17172 = !DILocation(line: 41, column: 15, scope: !17169)
!17173 = !DILocalVariable(name: "e", scope: !17169, file: !17156, line: 42, type: !5)
!17174 = !DILocation(line: 42, column: 11, scope: !17169)
!17175 = !DILocation(line: 42, column: 15, scope: !17169)
!17176 = !DILocation(line: 43, column: 14, scope: !17169)
!17177 = !DILocation(line: 43, column: 7, scope: !17169)
!17178 = !DILocation(line: 44, column: 15, scope: !17169)
!17179 = !DILocation(line: 44, column: 7, scope: !17169)
!17180 = !DILocation(line: 44, column: 13, scope: !17169)
!17181 = !DILocation(line: 45, column: 12, scope: !17169)
!17182 = !DILocation(line: 45, column: 10, scope: !17169)
!17183 = !DILocation(line: 46, column: 5, scope: !17169)
!17184 = !DILocation(line: 48, column: 10, scope: !17155)
!17185 = !DILocation(line: 48, column: 3, scope: !17155)
!17186 = distinct !DISubprogram(name: "version_etc_arn", scope: !17187, file: !17187, line: 61, type: !17188, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1451, retainedNodes: !433)
!17187 = !DIFile(filename: "lib/version-etc.c", directory: "/home/mohamad/clone/coreutils")
!17188 = !DISubroutineType(types: !17189)
!17189 = !{null, !17190, !90, !90, !90, !824, !52}
!17190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17191, size: 64)
!17191 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !1476)
!17192 = !DILocalVariable(name: "stream", arg: 1, scope: !17186, file: !17187, line: 61, type: !17190)
!17193 = !DILocation(line: 61, column: 24, scope: !17186)
!17194 = !DILocalVariable(name: "command_name", arg: 2, scope: !17186, file: !17187, line: 62, type: !90)
!17195 = !DILocation(line: 62, column: 30, scope: !17186)
!17196 = !DILocalVariable(name: "package", arg: 3, scope: !17186, file: !17187, line: 62, type: !90)
!17197 = !DILocation(line: 62, column: 56, scope: !17186)
!17198 = !DILocalVariable(name: "version", arg: 4, scope: !17186, file: !17187, line: 63, type: !90)
!17199 = !DILocation(line: 63, column: 30, scope: !17186)
!17200 = !DILocalVariable(name: "authors", arg: 5, scope: !17186, file: !17187, line: 64, type: !824)
!17201 = !DILocation(line: 64, column: 39, scope: !17186)
!17202 = !DILocalVariable(name: "n_authors", arg: 6, scope: !17186, file: !17187, line: 64, type: !52)
!17203 = !DILocation(line: 64, column: 55, scope: !17186)
!17204 = !DILocation(line: 66, column: 7, scope: !17205)
!17205 = distinct !DILexicalBlock(scope: !17186, file: !17187, line: 66, column: 7)
!17206 = !DILocation(line: 66, column: 7, scope: !17186)
!17207 = !DILocation(line: 67, column: 14, scope: !17205)
!17208 = !DILocation(line: 67, column: 38, scope: !17205)
!17209 = !DILocation(line: 67, column: 52, scope: !17205)
!17210 = !DILocation(line: 67, column: 61, scope: !17205)
!17211 = !DILocation(line: 67, column: 5, scope: !17205)
!17212 = !DILocation(line: 69, column: 14, scope: !17205)
!17213 = !DILocation(line: 69, column: 33, scope: !17205)
!17214 = !DILocation(line: 69, column: 42, scope: !17205)
!17215 = !DILocation(line: 69, column: 5, scope: !17205)
!17216 = !DILocation(line: 83, column: 12, scope: !17186)
!17217 = !DILocation(line: 83, column: 43, scope: !17186)
!17218 = !DILocation(line: 83, column: 3, scope: !17186)
!17219 = !DILocation(line: 85, column: 3, scope: !17186)
!17220 = !DILocation(line: 88, column: 12, scope: !17186)
!17221 = !DILocation(line: 88, column: 20, scope: !17186)
!17222 = !DILocation(line: 88, column: 3, scope: !17186)
!17223 = !DILocation(line: 95, column: 3, scope: !17186)
!17224 = !DILocation(line: 97, column: 11, scope: !17186)
!17225 = !DILocation(line: 97, column: 3, scope: !17186)
!17226 = !DILocation(line: 102, column: 7, scope: !17227)
!17227 = distinct !DILexicalBlock(scope: !17186, file: !17187, line: 98, column: 5)
!17228 = !DILocation(line: 105, column: 16, scope: !17227)
!17229 = !DILocation(line: 105, column: 24, scope: !17227)
!17230 = !DILocation(line: 105, column: 47, scope: !17227)
!17231 = !DILocation(line: 105, column: 7, scope: !17227)
!17232 = !DILocation(line: 106, column: 7, scope: !17227)
!17233 = !DILocation(line: 109, column: 16, scope: !17227)
!17234 = !DILocation(line: 109, column: 24, scope: !17227)
!17235 = !DILocation(line: 109, column: 54, scope: !17227)
!17236 = !DILocation(line: 109, column: 66, scope: !17227)
!17237 = !DILocation(line: 109, column: 7, scope: !17227)
!17238 = !DILocation(line: 110, column: 7, scope: !17227)
!17239 = !DILocation(line: 113, column: 16, scope: !17227)
!17240 = !DILocation(line: 113, column: 24, scope: !17227)
!17241 = !DILocation(line: 114, column: 16, scope: !17227)
!17242 = !DILocation(line: 114, column: 28, scope: !17227)
!17243 = !DILocation(line: 114, column: 40, scope: !17227)
!17244 = !DILocation(line: 113, column: 7, scope: !17227)
!17245 = !DILocation(line: 115, column: 7, scope: !17227)
!17246 = !DILocation(line: 120, column: 16, scope: !17227)
!17247 = !DILocation(line: 120, column: 24, scope: !17227)
!17248 = !DILocation(line: 121, column: 16, scope: !17227)
!17249 = !DILocation(line: 121, column: 28, scope: !17227)
!17250 = !DILocation(line: 121, column: 40, scope: !17227)
!17251 = !DILocation(line: 121, column: 52, scope: !17227)
!17252 = !DILocation(line: 120, column: 7, scope: !17227)
!17253 = !DILocation(line: 122, column: 7, scope: !17227)
!17254 = !DILocation(line: 127, column: 16, scope: !17227)
!17255 = !DILocation(line: 127, column: 24, scope: !17227)
!17256 = !DILocation(line: 128, column: 16, scope: !17227)
!17257 = !DILocation(line: 128, column: 28, scope: !17227)
!17258 = !DILocation(line: 128, column: 40, scope: !17227)
!17259 = !DILocation(line: 128, column: 52, scope: !17227)
!17260 = !DILocation(line: 128, column: 64, scope: !17227)
!17261 = !DILocation(line: 127, column: 7, scope: !17227)
!17262 = !DILocation(line: 129, column: 7, scope: !17227)
!17263 = !DILocation(line: 134, column: 16, scope: !17227)
!17264 = !DILocation(line: 134, column: 24, scope: !17227)
!17265 = !DILocation(line: 135, column: 16, scope: !17227)
!17266 = !DILocation(line: 135, column: 28, scope: !17227)
!17267 = !DILocation(line: 135, column: 40, scope: !17227)
!17268 = !DILocation(line: 135, column: 52, scope: !17227)
!17269 = !DILocation(line: 135, column: 64, scope: !17227)
!17270 = !DILocation(line: 136, column: 16, scope: !17227)
!17271 = !DILocation(line: 134, column: 7, scope: !17227)
!17272 = !DILocation(line: 137, column: 7, scope: !17227)
!17273 = !DILocation(line: 142, column: 16, scope: !17227)
!17274 = !DILocation(line: 142, column: 24, scope: !17227)
!17275 = !DILocation(line: 143, column: 16, scope: !17227)
!17276 = !DILocation(line: 143, column: 28, scope: !17227)
!17277 = !DILocation(line: 143, column: 40, scope: !17227)
!17278 = !DILocation(line: 143, column: 52, scope: !17227)
!17279 = !DILocation(line: 143, column: 64, scope: !17227)
!17280 = !DILocation(line: 144, column: 16, scope: !17227)
!17281 = !DILocation(line: 144, column: 28, scope: !17227)
!17282 = !DILocation(line: 142, column: 7, scope: !17227)
!17283 = !DILocation(line: 145, column: 7, scope: !17227)
!17284 = !DILocation(line: 150, column: 16, scope: !17227)
!17285 = !DILocation(line: 150, column: 24, scope: !17227)
!17286 = !DILocation(line: 152, column: 17, scope: !17227)
!17287 = !DILocation(line: 152, column: 29, scope: !17227)
!17288 = !DILocation(line: 152, column: 41, scope: !17227)
!17289 = !DILocation(line: 152, column: 53, scope: !17227)
!17290 = !DILocation(line: 152, column: 65, scope: !17227)
!17291 = !DILocation(line: 153, column: 17, scope: !17227)
!17292 = !DILocation(line: 153, column: 29, scope: !17227)
!17293 = !DILocation(line: 153, column: 41, scope: !17227)
!17294 = !DILocation(line: 150, column: 7, scope: !17227)
!17295 = !DILocation(line: 154, column: 7, scope: !17227)
!17296 = !DILocation(line: 159, column: 16, scope: !17227)
!17297 = !DILocation(line: 159, column: 24, scope: !17227)
!17298 = !DILocation(line: 161, column: 16, scope: !17227)
!17299 = !DILocation(line: 161, column: 28, scope: !17227)
!17300 = !DILocation(line: 161, column: 40, scope: !17227)
!17301 = !DILocation(line: 161, column: 52, scope: !17227)
!17302 = !DILocation(line: 161, column: 64, scope: !17227)
!17303 = !DILocation(line: 162, column: 16, scope: !17227)
!17304 = !DILocation(line: 162, column: 28, scope: !17227)
!17305 = !DILocation(line: 162, column: 40, scope: !17227)
!17306 = !DILocation(line: 162, column: 52, scope: !17227)
!17307 = !DILocation(line: 159, column: 7, scope: !17227)
!17308 = !DILocation(line: 163, column: 7, scope: !17227)
!17309 = !DILocation(line: 170, column: 16, scope: !17227)
!17310 = !DILocation(line: 170, column: 24, scope: !17227)
!17311 = !DILocation(line: 172, column: 17, scope: !17227)
!17312 = !DILocation(line: 172, column: 29, scope: !17227)
!17313 = !DILocation(line: 172, column: 41, scope: !17227)
!17314 = !DILocation(line: 172, column: 53, scope: !17227)
!17315 = !DILocation(line: 172, column: 65, scope: !17227)
!17316 = !DILocation(line: 173, column: 17, scope: !17227)
!17317 = !DILocation(line: 173, column: 29, scope: !17227)
!17318 = !DILocation(line: 173, column: 41, scope: !17227)
!17319 = !DILocation(line: 173, column: 53, scope: !17227)
!17320 = !DILocation(line: 170, column: 7, scope: !17227)
!17321 = !DILocation(line: 174, column: 7, scope: !17227)
!17322 = !DILocation(line: 176, column: 1, scope: !17186)
!17323 = distinct !DISubprogram(name: "version_etc_ar", scope: !17187, file: !17187, line: 183, type: !17324, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1451, retainedNodes: !433)
!17324 = !DISubroutineType(types: !17325)
!17325 = !{null, !17190, !90, !90, !90, !824}
!17326 = !DILocalVariable(name: "stream", arg: 1, scope: !17323, file: !17187, line: 183, type: !17190)
!17327 = !DILocation(line: 183, column: 23, scope: !17323)
!17328 = !DILocalVariable(name: "command_name", arg: 2, scope: !17323, file: !17187, line: 184, type: !90)
!17329 = !DILocation(line: 184, column: 29, scope: !17323)
!17330 = !DILocalVariable(name: "package", arg: 3, scope: !17323, file: !17187, line: 184, type: !90)
!17331 = !DILocation(line: 184, column: 55, scope: !17323)
!17332 = !DILocalVariable(name: "version", arg: 4, scope: !17323, file: !17187, line: 185, type: !90)
!17333 = !DILocation(line: 185, column: 29, scope: !17323)
!17334 = !DILocalVariable(name: "authors", arg: 5, scope: !17323, file: !17187, line: 185, type: !824)
!17335 = !DILocation(line: 185, column: 59, scope: !17323)
!17336 = !DILocalVariable(name: "n_authors", scope: !17323, file: !17187, line: 187, type: !52)
!17337 = !DILocation(line: 187, column: 10, scope: !17323)
!17338 = !DILocation(line: 189, column: 18, scope: !17339)
!17339 = distinct !DILexicalBlock(scope: !17323, file: !17187, line: 189, column: 3)
!17340 = !DILocation(line: 189, column: 8, scope: !17339)
!17341 = !DILocation(line: 189, column: 23, scope: !17342)
!17342 = distinct !DILexicalBlock(scope: !17339, file: !17187, line: 189, column: 3)
!17343 = !DILocation(line: 189, column: 31, scope: !17342)
!17344 = !DILocation(line: 189, column: 3, scope: !17339)
!17345 = !DILocation(line: 189, column: 52, scope: !17342)
!17346 = !DILocation(line: 189, column: 3, scope: !17342)
!17347 = distinct !{!17347, !17344, !17348}
!17348 = !DILocation(line: 190, column: 5, scope: !17339)
!17349 = !DILocation(line: 191, column: 20, scope: !17323)
!17350 = !DILocation(line: 191, column: 28, scope: !17323)
!17351 = !DILocation(line: 191, column: 42, scope: !17323)
!17352 = !DILocation(line: 191, column: 51, scope: !17323)
!17353 = !DILocation(line: 191, column: 60, scope: !17323)
!17354 = !DILocation(line: 191, column: 69, scope: !17323)
!17355 = !DILocation(line: 191, column: 3, scope: !17323)
!17356 = !DILocation(line: 192, column: 1, scope: !17323)
!17357 = distinct !DISubprogram(name: "version_etc_va", scope: !17187, file: !17187, line: 199, type: !17358, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1451, retainedNodes: !433)
!17358 = !DISubroutineType(types: !17359)
!17359 = !{null, !17190, !90, !90, !90, !17360}
!17360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!17361 = !DILocalVariable(name: "stream", arg: 1, scope: !17357, file: !17187, line: 199, type: !17190)
!17362 = !DILocation(line: 199, column: 23, scope: !17357)
!17363 = !DILocalVariable(name: "command_name", arg: 2, scope: !17357, file: !17187, line: 200, type: !90)
!17364 = !DILocation(line: 200, column: 29, scope: !17357)
!17365 = !DILocalVariable(name: "package", arg: 3, scope: !17357, file: !17187, line: 200, type: !90)
!17366 = !DILocation(line: 200, column: 55, scope: !17357)
!17367 = !DILocalVariable(name: "version", arg: 4, scope: !17357, file: !17187, line: 201, type: !90)
!17368 = !DILocation(line: 201, column: 29, scope: !17357)
!17369 = !DILocalVariable(name: "authors", arg: 5, scope: !17357, file: !17187, line: 201, type: !17360)
!17370 = !DILocation(line: 201, column: 46, scope: !17357)
!17371 = !DILocalVariable(name: "n_authors", scope: !17357, file: !17187, line: 203, type: !52)
!17372 = !DILocation(line: 203, column: 10, scope: !17357)
!17373 = !DILocalVariable(name: "authtab", scope: !17357, file: !17187, line: 204, type: !1464)
!17374 = !DILocation(line: 204, column: 15, scope: !17357)
!17375 = !DILocation(line: 206, column: 18, scope: !17376)
!17376 = distinct !DILexicalBlock(scope: !17357, file: !17187, line: 206, column: 3)
!17377 = !DILocation(line: 206, column: 8, scope: !17376)
!17378 = !DILocation(line: 207, column: 8, scope: !17379)
!17379 = distinct !DILexicalBlock(scope: !17376, file: !17187, line: 206, column: 3)
!17380 = !DILocation(line: 207, column: 18, scope: !17379)
!17381 = !DILocation(line: 208, column: 10, scope: !17379)
!17382 = !DILocation(line: 208, column: 35, scope: !17379)
!17383 = !DILocation(line: 208, column: 22, scope: !17379)
!17384 = !DILocation(line: 208, column: 14, scope: !17379)
!17385 = !DILocation(line: 208, column: 33, scope: !17379)
!17386 = !DILocation(line: 208, column: 67, scope: !17379)
!17387 = !DILocation(line: 0, scope: !17379)
!17388 = !DILocation(line: 206, column: 3, scope: !17376)
!17389 = !DILocation(line: 209, column: 17, scope: !17379)
!17390 = !DILocation(line: 206, column: 3, scope: !17379)
!17391 = distinct !{!17391, !17388, !17392}
!17392 = !DILocation(line: 210, column: 5, scope: !17376)
!17393 = !DILocation(line: 211, column: 20, scope: !17357)
!17394 = !DILocation(line: 211, column: 28, scope: !17357)
!17395 = !DILocation(line: 211, column: 42, scope: !17357)
!17396 = !DILocation(line: 211, column: 51, scope: !17357)
!17397 = !DILocation(line: 212, column: 20, scope: !17357)
!17398 = !DILocation(line: 212, column: 29, scope: !17357)
!17399 = !DILocation(line: 211, column: 3, scope: !17357)
!17400 = !DILocation(line: 213, column: 1, scope: !17357)
!17401 = distinct !DISubprogram(name: "version_etc", scope: !17187, file: !17187, line: 230, type: !17402, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1451, retainedNodes: !433)
!17402 = !DISubroutineType(types: !17403)
!17403 = !{null, !17190, !90, !90, !90, null}
!17404 = !DILocalVariable(name: "stream", arg: 1, scope: !17401, file: !17187, line: 230, type: !17190)
!17405 = !DILocation(line: 230, column: 20, scope: !17401)
!17406 = !DILocalVariable(name: "command_name", arg: 2, scope: !17401, file: !17187, line: 231, type: !90)
!17407 = !DILocation(line: 231, column: 26, scope: !17401)
!17408 = !DILocalVariable(name: "package", arg: 3, scope: !17401, file: !17187, line: 231, type: !90)
!17409 = !DILocation(line: 231, column: 52, scope: !17401)
!17410 = !DILocalVariable(name: "version", arg: 4, scope: !17401, file: !17187, line: 232, type: !90)
!17411 = !DILocation(line: 232, column: 26, scope: !17401)
!17412 = !DILocalVariable(name: "authors", scope: !17401, file: !17187, line: 234, type: !1465)
!17413 = !DILocation(line: 234, column: 11, scope: !17401)
!17414 = !DILocation(line: 236, column: 3, scope: !17401)
!17415 = !DILocation(line: 237, column: 19, scope: !17401)
!17416 = !DILocation(line: 237, column: 27, scope: !17401)
!17417 = !DILocation(line: 237, column: 41, scope: !17401)
!17418 = !DILocation(line: 237, column: 50, scope: !17401)
!17419 = !DILocation(line: 237, column: 59, scope: !17401)
!17420 = !DILocation(line: 237, column: 3, scope: !17401)
!17421 = !DILocation(line: 238, column: 3, scope: !17401)
!17422 = !DILocation(line: 239, column: 1, scope: !17401)
!17423 = distinct !DISubprogram(name: "emit_bug_reporting_address", scope: !17187, file: !17187, line: 242, type: !235, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1451, retainedNodes: !433)
!17424 = !DILocation(line: 244, column: 3, scope: !17423)
!17425 = !DILocation(line: 249, column: 11, scope: !17423)
!17426 = !DILocation(line: 249, column: 3, scope: !17423)
!17427 = !DILocation(line: 255, column: 11, scope: !17423)
!17428 = !DILocation(line: 255, column: 3, scope: !17423)
!17429 = !DILocation(line: 260, column: 11, scope: !17423)
!17430 = !DILocation(line: 260, column: 3, scope: !17423)
!17431 = !DILocation(line: 262, column: 1, scope: !17423)
!17432 = distinct !DISubprogram(name: "xnmalloc", scope: !17433, file: !17433, line: 99, type: !17434, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17433 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/mohamad/clone/coreutils")
!17434 = !DISubroutineType(types: !17435)
!17435 = !{!47, !52, !52}
!17436 = !DILocalVariable(name: "n", arg: 1, scope: !17432, file: !17433, line: 99, type: !52)
!17437 = !DILocation(line: 99, column: 18, scope: !17432)
!17438 = !DILocalVariable(name: "s", arg: 2, scope: !17432, file: !17433, line: 99, type: !52)
!17439 = !DILocation(line: 99, column: 28, scope: !17432)
!17440 = !DILocation(line: 101, column: 7, scope: !17441)
!17441 = distinct !DILexicalBlock(scope: !17432, file: !17433, line: 101, column: 7)
!17442 = !DILocation(line: 101, column: 7, scope: !17432)
!17443 = !DILocation(line: 102, column: 5, scope: !17441)
!17444 = !DILocation(line: 103, column: 19, scope: !17432)
!17445 = !DILocation(line: 103, column: 23, scope: !17432)
!17446 = !DILocation(line: 103, column: 21, scope: !17432)
!17447 = !DILocation(line: 103, column: 10, scope: !17432)
!17448 = !DILocation(line: 103, column: 3, scope: !17432)
!17449 = distinct !DISubprogram(name: "xmalloc", scope: !17450, file: !17450, line: 39, type: !1183, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17450 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/mohamad/clone/coreutils")
!17451 = !DILocalVariable(name: "n", arg: 1, scope: !17449, file: !17450, line: 39, type: !52)
!17452 = !DILocation(line: 39, column: 17, scope: !17449)
!17453 = !DILocalVariable(name: "p", scope: !17449, file: !17450, line: 41, type: !47)
!17454 = !DILocation(line: 41, column: 9, scope: !17449)
!17455 = !DILocation(line: 41, column: 21, scope: !17449)
!17456 = !DILocation(line: 41, column: 13, scope: !17449)
!17457 = !DILocation(line: 42, column: 8, scope: !17458)
!17458 = distinct !DILexicalBlock(scope: !17449, file: !17450, line: 42, column: 7)
!17459 = !DILocation(line: 42, column: 10, scope: !17458)
!17460 = !DILocation(line: 42, column: 13, scope: !17458)
!17461 = !DILocation(line: 42, column: 15, scope: !17458)
!17462 = !DILocation(line: 42, column: 7, scope: !17449)
!17463 = !DILocation(line: 43, column: 5, scope: !17458)
!17464 = !DILocation(line: 44, column: 10, scope: !17449)
!17465 = !DILocation(line: 44, column: 3, scope: !17449)
!17466 = distinct !DISubprogram(name: "xnrealloc", scope: !17433, file: !17433, line: 112, type: !17467, scopeLine: 113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17467 = !DISubroutineType(types: !17468)
!17468 = !{!47, !47, !52, !52}
!17469 = !DILocalVariable(name: "p", arg: 1, scope: !17466, file: !17433, line: 112, type: !47)
!17470 = !DILocation(line: 112, column: 18, scope: !17466)
!17471 = !DILocalVariable(name: "n", arg: 2, scope: !17466, file: !17433, line: 112, type: !52)
!17472 = !DILocation(line: 112, column: 28, scope: !17466)
!17473 = !DILocalVariable(name: "s", arg: 3, scope: !17466, file: !17433, line: 112, type: !52)
!17474 = !DILocation(line: 112, column: 38, scope: !17466)
!17475 = !DILocation(line: 114, column: 7, scope: !17476)
!17476 = distinct !DILexicalBlock(scope: !17466, file: !17433, line: 114, column: 7)
!17477 = !DILocation(line: 114, column: 7, scope: !17466)
!17478 = !DILocation(line: 115, column: 5, scope: !17476)
!17479 = !DILocation(line: 116, column: 20, scope: !17466)
!17480 = !DILocation(line: 116, column: 23, scope: !17466)
!17481 = !DILocation(line: 116, column: 27, scope: !17466)
!17482 = !DILocation(line: 116, column: 25, scope: !17466)
!17483 = !DILocation(line: 116, column: 10, scope: !17466)
!17484 = !DILocation(line: 116, column: 3, scope: !17466)
!17485 = distinct !DISubprogram(name: "xrealloc", scope: !17450, file: !17450, line: 51, type: !1187, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17486 = !DILocalVariable(name: "p", arg: 1, scope: !17485, file: !17450, line: 51, type: !47)
!17487 = !DILocation(line: 51, column: 17, scope: !17485)
!17488 = !DILocalVariable(name: "n", arg: 2, scope: !17485, file: !17450, line: 51, type: !52)
!17489 = !DILocation(line: 51, column: 27, scope: !17485)
!17490 = !DILocation(line: 53, column: 8, scope: !17491)
!17491 = distinct !DILexicalBlock(scope: !17485, file: !17450, line: 53, column: 7)
!17492 = !DILocation(line: 53, column: 10, scope: !17491)
!17493 = !DILocation(line: 53, column: 13, scope: !17491)
!17494 = !DILocation(line: 53, column: 7, scope: !17485)
!17495 = !DILocation(line: 57, column: 13, scope: !17496)
!17496 = distinct !DILexicalBlock(scope: !17491, file: !17450, line: 54, column: 5)
!17497 = !DILocation(line: 57, column: 7, scope: !17496)
!17498 = !DILocation(line: 58, column: 7, scope: !17496)
!17499 = !DILocation(line: 61, column: 16, scope: !17485)
!17500 = !DILocation(line: 61, column: 19, scope: !17485)
!17501 = !DILocation(line: 61, column: 7, scope: !17485)
!17502 = !DILocation(line: 61, column: 5, scope: !17485)
!17503 = !DILocation(line: 62, column: 8, scope: !17504)
!17504 = distinct !DILexicalBlock(scope: !17485, file: !17450, line: 62, column: 7)
!17505 = !DILocation(line: 62, column: 10, scope: !17504)
!17506 = !DILocation(line: 62, column: 13, scope: !17504)
!17507 = !DILocation(line: 62, column: 7, scope: !17485)
!17508 = !DILocation(line: 63, column: 5, scope: !17504)
!17509 = !DILocation(line: 64, column: 10, scope: !17485)
!17510 = !DILocation(line: 64, column: 3, scope: !17485)
!17511 = !DILocation(line: 65, column: 1, scope: !17485)
!17512 = distinct !DISubprogram(name: "x2nrealloc", scope: !17433, file: !17433, line: 174, type: !17513, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17513 = !DISubroutineType(types: !17514)
!17514 = !{!47, !47, !618, !52}
!17515 = !DILocalVariable(name: "p", arg: 1, scope: !17512, file: !17433, line: 174, type: !47)
!17516 = !DILocation(line: 174, column: 19, scope: !17512)
!17517 = !DILocalVariable(name: "pn", arg: 2, scope: !17512, file: !17433, line: 174, type: !618)
!17518 = !DILocation(line: 174, column: 30, scope: !17512)
!17519 = !DILocalVariable(name: "s", arg: 3, scope: !17512, file: !17433, line: 174, type: !52)
!17520 = !DILocation(line: 174, column: 41, scope: !17512)
!17521 = !DILocalVariable(name: "n", scope: !17512, file: !17433, line: 176, type: !52)
!17522 = !DILocation(line: 176, column: 10, scope: !17512)
!17523 = !DILocation(line: 176, column: 15, scope: !17512)
!17524 = !DILocation(line: 176, column: 14, scope: !17512)
!17525 = !DILocation(line: 178, column: 9, scope: !17526)
!17526 = distinct !DILexicalBlock(scope: !17512, file: !17433, line: 178, column: 7)
!17527 = !DILocation(line: 178, column: 7, scope: !17512)
!17528 = !DILocation(line: 180, column: 13, scope: !17529)
!17529 = distinct !DILexicalBlock(scope: !17530, file: !17433, line: 180, column: 11)
!17530 = distinct !DILexicalBlock(scope: !17526, file: !17433, line: 179, column: 5)
!17531 = !DILocation(line: 180, column: 11, scope: !17530)
!17532 = !DILocation(line: 188, column: 32, scope: !17533)
!17533 = distinct !DILexicalBlock(scope: !17529, file: !17433, line: 181, column: 9)
!17534 = !DILocation(line: 188, column: 30, scope: !17533)
!17535 = !DILocation(line: 188, column: 13, scope: !17533)
!17536 = !DILocation(line: 189, column: 17, scope: !17533)
!17537 = !DILocation(line: 189, column: 16, scope: !17533)
!17538 = !DILocation(line: 189, column: 13, scope: !17533)
!17539 = !DILocation(line: 190, column: 9, scope: !17533)
!17540 = !DILocation(line: 191, column: 11, scope: !17541)
!17541 = distinct !DILexicalBlock(scope: !17530, file: !17433, line: 191, column: 11)
!17542 = !DILocation(line: 191, column: 11, scope: !17530)
!17543 = !DILocation(line: 192, column: 9, scope: !17541)
!17544 = !DILocation(line: 193, column: 5, scope: !17530)
!17545 = !DILocation(line: 200, column: 71, scope: !17546)
!17546 = distinct !DILexicalBlock(scope: !17547, file: !17433, line: 200, column: 11)
!17547 = distinct !DILexicalBlock(scope: !17526, file: !17433, line: 195, column: 5)
!17548 = !DILocation(line: 200, column: 69, scope: !17546)
!17549 = !DILocation(line: 201, column: 14, scope: !17546)
!17550 = !DILocation(line: 201, column: 11, scope: !17546)
!17551 = !DILocation(line: 200, column: 11, scope: !17547)
!17552 = !DILocation(line: 202, column: 9, scope: !17546)
!17553 = !DILocation(line: 203, column: 12, scope: !17547)
!17554 = !DILocation(line: 203, column: 14, scope: !17547)
!17555 = !DILocation(line: 203, column: 18, scope: !17547)
!17556 = !DILocation(line: 203, column: 9, scope: !17547)
!17557 = !DILocation(line: 206, column: 9, scope: !17512)
!17558 = !DILocation(line: 206, column: 4, scope: !17512)
!17559 = !DILocation(line: 206, column: 7, scope: !17512)
!17560 = !DILocation(line: 207, column: 20, scope: !17512)
!17561 = !DILocation(line: 207, column: 23, scope: !17512)
!17562 = !DILocation(line: 207, column: 27, scope: !17512)
!17563 = !DILocation(line: 207, column: 25, scope: !17512)
!17564 = !DILocation(line: 207, column: 10, scope: !17512)
!17565 = !DILocation(line: 207, column: 3, scope: !17512)
!17566 = distinct !DISubprogram(name: "xcharalloc", scope: !17433, file: !17433, line: 216, type: !17567, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17567 = !DISubroutineType(types: !17568)
!17568 = !{!7, !52}
!17569 = !DILocalVariable(name: "n", arg: 1, scope: !17566, file: !17433, line: 216, type: !52)
!17570 = !DILocation(line: 216, column: 20, scope: !17566)
!17571 = !DILocation(line: 218, column: 10, scope: !17566)
!17572 = !DILocation(line: 218, column: 3, scope: !17566)
!17573 = distinct !DISubprogram(name: "x2realloc", scope: !17450, file: !17450, line: 74, type: !17574, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17574 = !DISubroutineType(types: !17575)
!17575 = !{!47, !47, !618}
!17576 = !DILocalVariable(name: "p", arg: 1, scope: !17573, file: !17450, line: 74, type: !47)
!17577 = !DILocation(line: 74, column: 18, scope: !17573)
!17578 = !DILocalVariable(name: "pn", arg: 2, scope: !17573, file: !17450, line: 74, type: !618)
!17579 = !DILocation(line: 74, column: 29, scope: !17573)
!17580 = !DILocation(line: 76, column: 22, scope: !17573)
!17581 = !DILocation(line: 76, column: 25, scope: !17573)
!17582 = !DILocation(line: 76, column: 10, scope: !17573)
!17583 = !DILocation(line: 76, column: 3, scope: !17573)
!17584 = distinct !DISubprogram(name: "xzalloc", scope: !17450, file: !17450, line: 84, type: !1183, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17585 = !DILocalVariable(name: "s", arg: 1, scope: !17584, file: !17450, line: 84, type: !52)
!17586 = !DILocation(line: 84, column: 17, scope: !17584)
!17587 = !DILocation(line: 86, column: 27, scope: !17584)
!17588 = !DILocation(line: 86, column: 18, scope: !17584)
!17589 = !DILocation(line: 86, column: 34, scope: !17584)
!17590 = !DILocation(line: 86, column: 10, scope: !17584)
!17591 = !DILocation(line: 86, column: 3, scope: !17584)
!17592 = distinct !DISubprogram(name: "xcalloc", scope: !17450, file: !17450, line: 93, type: !17434, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17593 = !DILocalVariable(name: "n", arg: 1, scope: !17592, file: !17450, line: 93, type: !52)
!17594 = !DILocation(line: 93, column: 17, scope: !17592)
!17595 = !DILocalVariable(name: "s", arg: 2, scope: !17592, file: !17450, line: 93, type: !52)
!17596 = !DILocation(line: 93, column: 27, scope: !17592)
!17597 = !DILocalVariable(name: "p", scope: !17592, file: !17450, line: 95, type: !47)
!17598 = !DILocation(line: 95, column: 9, scope: !17592)
!17599 = !DILocation(line: 100, column: 7, scope: !17600)
!17600 = distinct !DILexicalBlock(scope: !17592, file: !17450, line: 100, column: 7)
!17601 = !DILocation(line: 101, column: 7, scope: !17600)
!17602 = !DILocation(line: 101, column: 26, scope: !17600)
!17603 = !DILocation(line: 101, column: 29, scope: !17600)
!17604 = !DILocation(line: 101, column: 18, scope: !17600)
!17605 = !DILocation(line: 101, column: 16, scope: !17600)
!17606 = !DILocation(line: 100, column: 7, scope: !17592)
!17607 = !DILocation(line: 102, column: 5, scope: !17600)
!17608 = !DILocation(line: 103, column: 10, scope: !17592)
!17609 = !DILocation(line: 103, column: 3, scope: !17592)
!17610 = distinct !DISubprogram(name: "xmemdup", scope: !17450, file: !17450, line: 111, type: !17611, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17611 = !DISubroutineType(types: !17612)
!17612 = !{!47, !85, !52}
!17613 = !DILocalVariable(name: "p", arg: 1, scope: !17610, file: !17450, line: 111, type: !85)
!17614 = !DILocation(line: 111, column: 22, scope: !17610)
!17615 = !DILocalVariable(name: "s", arg: 2, scope: !17610, file: !17450, line: 111, type: !52)
!17616 = !DILocation(line: 111, column: 32, scope: !17610)
!17617 = !DILocation(line: 113, column: 27, scope: !17610)
!17618 = !DILocation(line: 113, column: 18, scope: !17610)
!17619 = !DILocation(line: 113, column: 31, scope: !17610)
!17620 = !DILocation(line: 113, column: 34, scope: !17610)
!17621 = !DILocation(line: 113, column: 10, scope: !17610)
!17622 = !DILocation(line: 113, column: 3, scope: !17610)
!17623 = distinct !DISubprogram(name: "xstrdup", scope: !17450, file: !17450, line: 119, type: !15541, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1513, retainedNodes: !433)
!17624 = !DILocalVariable(name: "string", arg: 1, scope: !17623, file: !17450, line: 119, type: !90)
!17625 = !DILocation(line: 119, column: 22, scope: !17623)
!17626 = !DILocation(line: 121, column: 19, scope: !17623)
!17627 = !DILocation(line: 121, column: 35, scope: !17623)
!17628 = !DILocation(line: 121, column: 27, scope: !17623)
!17629 = !DILocation(line: 121, column: 43, scope: !17623)
!17630 = !DILocation(line: 121, column: 10, scope: !17623)
!17631 = !DILocation(line: 121, column: 3, scope: !17623)
!17632 = distinct !DISubprogram(name: "xalloc_die", scope: !17633, file: !17633, line: 32, type: !235, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !1516, retainedNodes: !433)
!17633 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/mohamad/clone/coreutils")
!17634 = !DILocation(line: 34, column: 10, scope: !17632)
!17635 = !DILocation(line: 34, column: 33, scope: !17632)
!17636 = !DILocation(line: 34, column: 3, scope: !17632)
!17637 = !DILocation(line: 40, column: 3, scope: !17632)
!17638 = distinct !DISubprogram(name: "xmemcoll", scope: !17639, file: !17639, line: 54, type: !17640, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1519, retainedNodes: !433)
!17639 = !DIFile(filename: "lib/xmemcoll.c", directory: "/home/mohamad/clone/coreutils")
!17640 = !DISubroutineType(types: !17641)
!17641 = !{!5, !7, !52, !7, !52}
!17642 = !DILocalVariable(name: "s1", arg: 1, scope: !17638, file: !17639, line: 54, type: !7)
!17643 = !DILocation(line: 54, column: 17, scope: !17638)
!17644 = !DILocalVariable(name: "s1len", arg: 2, scope: !17638, file: !17639, line: 54, type: !52)
!17645 = !DILocation(line: 54, column: 28, scope: !17638)
!17646 = !DILocalVariable(name: "s2", arg: 3, scope: !17638, file: !17639, line: 54, type: !7)
!17647 = !DILocation(line: 54, column: 41, scope: !17638)
!17648 = !DILocalVariable(name: "s2len", arg: 4, scope: !17638, file: !17639, line: 54, type: !52)
!17649 = !DILocation(line: 54, column: 52, scope: !17638)
!17650 = !DILocalVariable(name: "diff", scope: !17638, file: !17639, line: 56, type: !5)
!17651 = !DILocation(line: 56, column: 7, scope: !17638)
!17652 = !DILocation(line: 56, column: 23, scope: !17638)
!17653 = !DILocation(line: 56, column: 27, scope: !17638)
!17654 = !DILocation(line: 56, column: 34, scope: !17638)
!17655 = !DILocation(line: 56, column: 38, scope: !17638)
!17656 = !DILocation(line: 56, column: 14, scope: !17638)
!17657 = !DILocalVariable(name: "collation_errno", scope: !17638, file: !17639, line: 57, type: !5)
!17658 = !DILocation(line: 57, column: 7, scope: !17638)
!17659 = !DILocation(line: 57, column: 25, scope: !17638)
!17660 = !DILocation(line: 58, column: 7, scope: !17661)
!17661 = distinct !DILexicalBlock(scope: !17638, file: !17639, line: 58, column: 7)
!17662 = !DILocation(line: 58, column: 7, scope: !17638)
!17663 = !DILocation(line: 59, column: 20, scope: !17661)
!17664 = !DILocation(line: 59, column: 37, scope: !17661)
!17665 = !DILocation(line: 59, column: 41, scope: !17661)
!17666 = !DILocation(line: 59, column: 48, scope: !17661)
!17667 = !DILocation(line: 59, column: 52, scope: !17661)
!17668 = !DILocation(line: 59, column: 5, scope: !17661)
!17669 = !DILocation(line: 60, column: 10, scope: !17638)
!17670 = !DILocation(line: 60, column: 3, scope: !17638)
!17671 = distinct !DISubprogram(name: "collate_error", scope: !17639, file: !17639, line: 35, type: !17672, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1519, retainedNodes: !433)
!17672 = !DISubroutineType(types: !17673)
!17673 = !{null, !5, !90, !52, !90, !52}
!17674 = !DILocalVariable(name: "collation_errno", arg: 1, scope: !17671, file: !17639, line: 35, type: !5)
!17675 = !DILocation(line: 35, column: 20, scope: !17671)
!17676 = !DILocalVariable(name: "s1", arg: 2, scope: !17671, file: !17639, line: 36, type: !90)
!17677 = !DILocation(line: 36, column: 28, scope: !17671)
!17678 = !DILocalVariable(name: "s1len", arg: 3, scope: !17671, file: !17639, line: 36, type: !52)
!17679 = !DILocation(line: 36, column: 39, scope: !17671)
!17680 = !DILocalVariable(name: "s2", arg: 4, scope: !17671, file: !17639, line: 37, type: !90)
!17681 = !DILocation(line: 37, column: 28, scope: !17671)
!17682 = !DILocalVariable(name: "s2len", arg: 5, scope: !17671, file: !17639, line: 37, type: !52)
!17683 = !DILocation(line: 37, column: 39, scope: !17671)
!17684 = !DILocation(line: 39, column: 13, scope: !17671)
!17685 = !DILocation(line: 39, column: 30, scope: !17671)
!17686 = !DILocation(line: 39, column: 3, scope: !17671)
!17687 = !DILocation(line: 40, column: 16, scope: !17671)
!17688 = !DILocation(line: 40, column: 3, scope: !17671)
!17689 = !DILocation(line: 41, column: 10, scope: !17671)
!17690 = !DILocation(line: 42, column: 10, scope: !17671)
!17691 = !DILocation(line: 43, column: 57, scope: !17671)
!17692 = !DILocation(line: 43, column: 61, scope: !17671)
!17693 = !DILocation(line: 43, column: 10, scope: !17671)
!17694 = !DILocation(line: 44, column: 57, scope: !17671)
!17695 = !DILocation(line: 44, column: 61, scope: !17671)
!17696 = !DILocation(line: 44, column: 10, scope: !17671)
!17697 = !DILocation(line: 41, column: 3, scope: !17671)
!17698 = !DILocation(line: 45, column: 1, scope: !17671)
!17699 = distinct !DISubprogram(name: "xmemcoll0", scope: !17639, file: !17639, line: 69, type: !11060, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1519, retainedNodes: !433)
!17700 = !DILocalVariable(name: "s1", arg: 1, scope: !17699, file: !17639, line: 69, type: !90)
!17701 = !DILocation(line: 69, column: 24, scope: !17699)
!17702 = !DILocalVariable(name: "s1size", arg: 2, scope: !17699, file: !17639, line: 69, type: !52)
!17703 = !DILocation(line: 69, column: 35, scope: !17699)
!17704 = !DILocalVariable(name: "s2", arg: 3, scope: !17699, file: !17639, line: 69, type: !90)
!17705 = !DILocation(line: 69, column: 55, scope: !17699)
!17706 = !DILocalVariable(name: "s2size", arg: 4, scope: !17699, file: !17639, line: 69, type: !52)
!17707 = !DILocation(line: 69, column: 66, scope: !17699)
!17708 = !DILocalVariable(name: "diff", scope: !17699, file: !17639, line: 71, type: !5)
!17709 = !DILocation(line: 71, column: 7, scope: !17699)
!17710 = !DILocation(line: 71, column: 24, scope: !17699)
!17711 = !DILocation(line: 71, column: 28, scope: !17699)
!17712 = !DILocation(line: 71, column: 36, scope: !17699)
!17713 = !DILocation(line: 71, column: 40, scope: !17699)
!17714 = !DILocation(line: 71, column: 14, scope: !17699)
!17715 = !DILocalVariable(name: "collation_errno", scope: !17699, file: !17639, line: 72, type: !5)
!17716 = !DILocation(line: 72, column: 7, scope: !17699)
!17717 = !DILocation(line: 72, column: 25, scope: !17699)
!17718 = !DILocation(line: 73, column: 7, scope: !17719)
!17719 = distinct !DILexicalBlock(scope: !17699, file: !17639, line: 73, column: 7)
!17720 = !DILocation(line: 73, column: 7, scope: !17699)
!17721 = !DILocation(line: 74, column: 20, scope: !17719)
!17722 = !DILocation(line: 74, column: 37, scope: !17719)
!17723 = !DILocation(line: 74, column: 41, scope: !17719)
!17724 = !DILocation(line: 74, column: 48, scope: !17719)
!17725 = !DILocation(line: 74, column: 53, scope: !17719)
!17726 = !DILocation(line: 74, column: 57, scope: !17719)
!17727 = !DILocation(line: 74, column: 64, scope: !17719)
!17728 = !DILocation(line: 74, column: 5, scope: !17719)
!17729 = !DILocation(line: 75, column: 10, scope: !17699)
!17730 = !DILocation(line: 75, column: 3, scope: !17699)
!17731 = distinct !DISubprogram(name: "xnanosleep", scope: !17732, file: !17732, line: 38, type: !17733, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1522, retainedNodes: !433)
!17732 = !DIFile(filename: "lib/xnanosleep.c", directory: "/home/mohamad/clone/coreutils")
!17733 = !DISubroutineType(types: !17734)
!17734 = !{!5, !480}
!17735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !506, line: 120, size: 128, elements: !17736)
!17736 = !{!17737, !17738}
!17737 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !17735, file: !506, line: 122, baseType: !509, size: 64)
!17738 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !17735, file: !506, line: 123, baseType: !511, size: 64, offset: 64)
!17739 = !DILocalVariable(name: "seconds", arg: 1, scope: !17731, file: !17732, line: 38, type: !480)
!17740 = !DILocation(line: 38, column: 20, scope: !17731)
!17741 = !DILocalVariable(name: "ts_sleep", scope: !17731, file: !17732, line: 40, type: !17735)
!17742 = !DILocation(line: 40, column: 19, scope: !17731)
!17743 = !DILocation(line: 40, column: 43, scope: !17731)
!17744 = !DILocation(line: 40, column: 30, scope: !17731)
!17745 = !DILocation(line: 42, column: 3, scope: !17731)
!17746 = !DILocation(line: 50, column: 7, scope: !17747)
!17747 = distinct !DILexicalBlock(scope: !17748, file: !17732, line: 43, column: 5)
!17748 = distinct !DILexicalBlock(scope: !17749, file: !17732, line: 42, column: 3)
!17749 = distinct !DILexicalBlock(scope: !17731, file: !17732, line: 42, column: 3)
!17750 = !DILocation(line: 50, column: 13, scope: !17747)
!17751 = !DILocation(line: 51, column: 11, scope: !17752)
!17752 = distinct !DILexicalBlock(scope: !17747, file: !17732, line: 51, column: 11)
!17753 = !DILocation(line: 51, column: 39, scope: !17752)
!17754 = !DILocation(line: 51, column: 11, scope: !17747)
!17755 = !DILocation(line: 52, column: 9, scope: !17752)
!17756 = !DILocation(line: 53, column: 11, scope: !17757)
!17757 = distinct !DILexicalBlock(scope: !17747, file: !17732, line: 53, column: 11)
!17758 = !DILocation(line: 53, column: 17, scope: !17757)
!17759 = !DILocation(line: 53, column: 26, scope: !17757)
!17760 = !DILocation(line: 53, column: 29, scope: !17757)
!17761 = !DILocation(line: 53, column: 35, scope: !17757)
!17762 = !DILocation(line: 53, column: 11, scope: !17747)
!17763 = !DILocation(line: 54, column: 9, scope: !17757)
!17764 = !DILocation(line: 42, column: 3, scope: !17748)
!17765 = distinct !{!17765, !17766, !17767}
!17766 = !DILocation(line: 42, column: 3, scope: !17749)
!17767 = !DILocation(line: 55, column: 5, scope: !17749)
!17768 = !DILocation(line: 57, column: 3, scope: !17731)
!17769 = !DILocation(line: 58, column: 1, scope: !17731)
!17770 = distinct !DISubprogram(name: "xstrtoul", scope: !17771, file: !17771, line: 76, type: !17772, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1524, retainedNodes: !433)
!17771 = !DIFile(filename: "./lib/xstrtol.c", directory: "/home/mohamad/clone/coreutils")
!17772 = !DISubroutineType(types: !17773)
!17773 = !{!1528, !90, !178, !5, !17774, !90}
!17774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!17775 = !DILocalVariable(name: "s", arg: 1, scope: !17770, file: !17771, line: 76, type: !90)
!17776 = !DILocation(line: 76, column: 24, scope: !17770)
!17777 = !DILocalVariable(name: "ptr", arg: 2, scope: !17770, file: !17771, line: 76, type: !178)
!17778 = !DILocation(line: 76, column: 34, scope: !17770)
!17779 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !17770, file: !17771, line: 76, type: !5)
!17780 = !DILocation(line: 76, column: 43, scope: !17770)
!17781 = !DILocalVariable(name: "val", arg: 4, scope: !17770, file: !17771, line: 77, type: !17774)
!17782 = !DILocation(line: 77, column: 24, scope: !17770)
!17783 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !17770, file: !17771, line: 77, type: !90)
!17784 = !DILocation(line: 77, column: 41, scope: !17770)
!17785 = !DILocalVariable(name: "t_ptr", scope: !17770, file: !17771, line: 79, type: !7)
!17786 = !DILocation(line: 79, column: 9, scope: !17770)
!17787 = !DILocalVariable(name: "p", scope: !17770, file: !17771, line: 80, type: !178)
!17788 = !DILocation(line: 80, column: 10, scope: !17770)
!17789 = !DILocalVariable(name: "tmp", scope: !17770, file: !17771, line: 81, type: !54)
!17790 = !DILocation(line: 81, column: 14, scope: !17770)
!17791 = !DILocalVariable(name: "err", scope: !17770, file: !17771, line: 82, type: !1528)
!17792 = !DILocation(line: 82, column: 16, scope: !17770)
!17793 = !DILocation(line: 84, column: 3, scope: !17770)
!17794 = !DILocation(line: 86, column: 8, scope: !17770)
!17795 = !DILocation(line: 86, column: 14, scope: !17770)
!17796 = !DILocation(line: 86, column: 5, scope: !17770)
!17797 = !DILocation(line: 88, column: 3, scope: !17770)
!17798 = !DILocation(line: 88, column: 9, scope: !17770)
!17799 = !DILocalVariable(name: "q", scope: !17800, file: !17771, line: 92, type: !90)
!17800 = distinct !DILexicalBlock(scope: !17801, file: !17771, line: 91, column: 5)
!17801 = distinct !DILexicalBlock(scope: !17770, file: !17771, line: 90, column: 7)
!17802 = !DILocation(line: 92, column: 19, scope: !17800)
!17803 = !DILocation(line: 92, column: 23, scope: !17800)
!17804 = !DILocalVariable(name: "ch", scope: !17800, file: !17771, line: 93, type: !535)
!17805 = !DILocation(line: 93, column: 21, scope: !17800)
!17806 = !DILocation(line: 93, column: 27, scope: !17800)
!17807 = !DILocation(line: 93, column: 26, scope: !17800)
!17808 = !DILocation(line: 94, column: 7, scope: !17800)
!17809 = !DILocation(line: 94, column: 14, scope: !17800)
!17810 = !DILocation(line: 95, column: 15, scope: !17800)
!17811 = !DILocation(line: 95, column: 14, scope: !17800)
!17812 = !DILocation(line: 95, column: 12, scope: !17800)
!17813 = distinct !{!17813, !17808, !17814}
!17814 = !DILocation(line: 95, column: 17, scope: !17800)
!17815 = !DILocation(line: 96, column: 11, scope: !17816)
!17816 = distinct !DILexicalBlock(scope: !17800, file: !17771, line: 96, column: 11)
!17817 = !DILocation(line: 96, column: 14, scope: !17816)
!17818 = !DILocation(line: 96, column: 11, scope: !17800)
!17819 = !DILocation(line: 97, column: 9, scope: !17816)
!17820 = !DILocation(line: 100, column: 19, scope: !17770)
!17821 = !DILocation(line: 100, column: 22, scope: !17770)
!17822 = !DILocation(line: 100, column: 25, scope: !17770)
!17823 = !DILocation(line: 100, column: 9, scope: !17770)
!17824 = !DILocation(line: 100, column: 7, scope: !17770)
!17825 = !DILocation(line: 102, column: 8, scope: !17826)
!17826 = distinct !DILexicalBlock(scope: !17770, file: !17771, line: 102, column: 7)
!17827 = !DILocation(line: 102, column: 7, scope: !17826)
!17828 = !DILocation(line: 102, column: 13, scope: !17826)
!17829 = !DILocation(line: 102, column: 10, scope: !17826)
!17830 = !DILocation(line: 102, column: 7, scope: !17770)
!17831 = !DILocation(line: 106, column: 11, scope: !17832)
!17832 = distinct !DILexicalBlock(scope: !17833, file: !17771, line: 106, column: 11)
!17833 = distinct !DILexicalBlock(scope: !17826, file: !17771, line: 103, column: 5)
!17834 = !DILocation(line: 106, column: 26, scope: !17832)
!17835 = !DILocation(line: 106, column: 31, scope: !17832)
!17836 = !DILocation(line: 106, column: 30, scope: !17832)
!17837 = !DILocation(line: 106, column: 29, scope: !17832)
!17838 = !DILocation(line: 106, column: 33, scope: !17832)
!17839 = !DILocation(line: 106, column: 44, scope: !17832)
!17840 = !DILocation(line: 106, column: 62, scope: !17832)
!17841 = !DILocation(line: 106, column: 61, scope: !17832)
!17842 = !DILocation(line: 106, column: 60, scope: !17832)
!17843 = !DILocation(line: 106, column: 36, scope: !17832)
!17844 = !DILocation(line: 106, column: 11, scope: !17833)
!17845 = !DILocation(line: 107, column: 13, scope: !17832)
!17846 = !DILocation(line: 107, column: 9, scope: !17832)
!17847 = !DILocation(line: 109, column: 9, scope: !17832)
!17848 = !DILocation(line: 110, column: 5, scope: !17833)
!17849 = !DILocation(line: 111, column: 12, scope: !17850)
!17850 = distinct !DILexicalBlock(scope: !17826, file: !17771, line: 111, column: 12)
!17851 = !DILocation(line: 111, column: 18, scope: !17850)
!17852 = !DILocation(line: 111, column: 12, scope: !17826)
!17853 = !DILocation(line: 113, column: 11, scope: !17854)
!17854 = distinct !DILexicalBlock(scope: !17855, file: !17771, line: 113, column: 11)
!17855 = distinct !DILexicalBlock(scope: !17850, file: !17771, line: 112, column: 5)
!17856 = !DILocation(line: 113, column: 17, scope: !17854)
!17857 = !DILocation(line: 113, column: 11, scope: !17855)
!17858 = !DILocation(line: 114, column: 9, scope: !17854)
!17859 = !DILocation(line: 115, column: 11, scope: !17855)
!17860 = !DILocation(line: 116, column: 5, scope: !17855)
!17861 = !DILocation(line: 121, column: 8, scope: !17862)
!17862 = distinct !DILexicalBlock(scope: !17770, file: !17771, line: 121, column: 7)
!17863 = !DILocation(line: 121, column: 7, scope: !17770)
!17864 = !DILocation(line: 123, column: 14, scope: !17865)
!17865 = distinct !DILexicalBlock(scope: !17862, file: !17771, line: 122, column: 5)
!17866 = !DILocation(line: 123, column: 8, scope: !17865)
!17867 = !DILocation(line: 123, column: 12, scope: !17865)
!17868 = !DILocation(line: 124, column: 14, scope: !17865)
!17869 = !DILocation(line: 124, column: 7, scope: !17865)
!17870 = !DILocation(line: 127, column: 9, scope: !17871)
!17871 = distinct !DILexicalBlock(scope: !17770, file: !17771, line: 127, column: 7)
!17872 = !DILocation(line: 127, column: 8, scope: !17871)
!17873 = !DILocation(line: 127, column: 7, scope: !17871)
!17874 = !DILocation(line: 127, column: 11, scope: !17871)
!17875 = !DILocation(line: 127, column: 7, scope: !17770)
!17876 = !DILocalVariable(name: "base", scope: !17877, file: !17771, line: 129, type: !5)
!17877 = distinct !DILexicalBlock(scope: !17871, file: !17771, line: 128, column: 5)
!17878 = !DILocation(line: 129, column: 11, scope: !17877)
!17879 = !DILocalVariable(name: "suffixes", scope: !17877, file: !17771, line: 130, type: !5)
!17880 = !DILocation(line: 130, column: 11, scope: !17877)
!17881 = !DILocalVariable(name: "overflow", scope: !17877, file: !17771, line: 131, type: !1528)
!17882 = !DILocation(line: 131, column: 20, scope: !17877)
!17883 = !DILocation(line: 133, column: 20, scope: !17884)
!17884 = distinct !DILexicalBlock(scope: !17877, file: !17771, line: 133, column: 11)
!17885 = !DILocation(line: 133, column: 38, scope: !17884)
!17886 = !DILocation(line: 133, column: 37, scope: !17884)
!17887 = !DILocation(line: 133, column: 36, scope: !17884)
!17888 = !DILocation(line: 133, column: 12, scope: !17884)
!17889 = !DILocation(line: 133, column: 11, scope: !17877)
!17890 = !DILocation(line: 135, column: 18, scope: !17891)
!17891 = distinct !DILexicalBlock(scope: !17884, file: !17771, line: 134, column: 9)
!17892 = !DILocation(line: 135, column: 12, scope: !17891)
!17893 = !DILocation(line: 135, column: 16, scope: !17891)
!17894 = !DILocation(line: 136, column: 18, scope: !17891)
!17895 = !DILocation(line: 136, column: 22, scope: !17891)
!17896 = !DILocation(line: 136, column: 11, scope: !17891)
!17897 = !DILocation(line: 139, column: 17, scope: !17877)
!17898 = !DILocation(line: 139, column: 16, scope: !17877)
!17899 = !DILocation(line: 139, column: 15, scope: !17877)
!17900 = !DILocation(line: 139, column: 7, scope: !17877)
!17901 = !DILocation(line: 151, column: 23, scope: !17902)
!17902 = distinct !DILexicalBlock(scope: !17903, file: !17771, line: 151, column: 15)
!17903 = distinct !DILexicalBlock(scope: !17877, file: !17771, line: 140, column: 9)
!17904 = !DILocation(line: 151, column: 15, scope: !17902)
!17905 = !DILocation(line: 151, column: 15, scope: !17903)
!17906 = !DILocation(line: 152, column: 21, scope: !17902)
!17907 = !DILocation(line: 152, column: 13, scope: !17902)
!17908 = !DILocation(line: 155, column: 21, scope: !17909)
!17909 = distinct !DILexicalBlock(scope: !17910, file: !17771, line: 155, column: 21)
!17910 = distinct !DILexicalBlock(scope: !17902, file: !17771, line: 153, column: 15)
!17911 = !DILocation(line: 155, column: 29, scope: !17909)
!17912 = !DILocation(line: 155, column: 21, scope: !17910)
!17913 = !DILocation(line: 156, column: 28, scope: !17909)
!17914 = !DILocation(line: 156, column: 19, scope: !17909)
!17915 = !DILocation(line: 157, column: 17, scope: !17910)
!17916 = !DILocation(line: 161, column: 22, scope: !17910)
!17917 = !DILocation(line: 162, column: 25, scope: !17910)
!17918 = !DILocation(line: 163, column: 17, scope: !17910)
!17919 = !DILocation(line: 164, column: 15, scope: !17910)
!17920 = !DILocation(line: 165, column: 9, scope: !17903)
!17921 = !DILocation(line: 167, column: 17, scope: !17877)
!17922 = !DILocation(line: 167, column: 16, scope: !17877)
!17923 = !DILocation(line: 167, column: 15, scope: !17877)
!17924 = !DILocation(line: 167, column: 7, scope: !17877)
!17925 = !DILocation(line: 170, column: 22, scope: !17926)
!17926 = distinct !DILexicalBlock(scope: !17877, file: !17771, line: 168, column: 9)
!17927 = !DILocation(line: 170, column: 20, scope: !17926)
!17928 = !DILocation(line: 171, column: 11, scope: !17926)
!17929 = !DILocation(line: 177, column: 22, scope: !17926)
!17930 = !DILocation(line: 177, column: 20, scope: !17926)
!17931 = !DILocation(line: 178, column: 11, scope: !17926)
!17932 = !DILocation(line: 181, column: 20, scope: !17926)
!17933 = !DILocation(line: 182, column: 11, scope: !17926)
!17934 = !DILocation(line: 185, column: 48, scope: !17926)
!17935 = !DILocation(line: 185, column: 22, scope: !17926)
!17936 = !DILocation(line: 185, column: 20, scope: !17926)
!17937 = !DILocation(line: 186, column: 11, scope: !17926)
!17938 = !DILocation(line: 190, column: 48, scope: !17926)
!17939 = !DILocation(line: 190, column: 22, scope: !17926)
!17940 = !DILocation(line: 190, column: 20, scope: !17926)
!17941 = !DILocation(line: 191, column: 11, scope: !17926)
!17942 = !DILocation(line: 195, column: 48, scope: !17926)
!17943 = !DILocation(line: 195, column: 22, scope: !17926)
!17944 = !DILocation(line: 195, column: 20, scope: !17926)
!17945 = !DILocation(line: 196, column: 11, scope: !17926)
!17946 = !DILocation(line: 200, column: 48, scope: !17926)
!17947 = !DILocation(line: 200, column: 22, scope: !17926)
!17948 = !DILocation(line: 200, column: 20, scope: !17926)
!17949 = !DILocation(line: 201, column: 11, scope: !17926)
!17950 = !DILocation(line: 204, column: 48, scope: !17926)
!17951 = !DILocation(line: 204, column: 22, scope: !17926)
!17952 = !DILocation(line: 204, column: 20, scope: !17926)
!17953 = !DILocation(line: 205, column: 11, scope: !17926)
!17954 = !DILocation(line: 209, column: 48, scope: !17926)
!17955 = !DILocation(line: 209, column: 22, scope: !17926)
!17956 = !DILocation(line: 209, column: 20, scope: !17926)
!17957 = !DILocation(line: 210, column: 11, scope: !17926)
!17958 = !DILocation(line: 213, column: 22, scope: !17926)
!17959 = !DILocation(line: 213, column: 20, scope: !17926)
!17960 = !DILocation(line: 214, column: 11, scope: !17926)
!17961 = !DILocation(line: 217, column: 48, scope: !17926)
!17962 = !DILocation(line: 217, column: 22, scope: !17926)
!17963 = !DILocation(line: 217, column: 20, scope: !17926)
!17964 = !DILocation(line: 218, column: 11, scope: !17926)
!17965 = !DILocation(line: 221, column: 48, scope: !17926)
!17966 = !DILocation(line: 221, column: 22, scope: !17926)
!17967 = !DILocation(line: 221, column: 20, scope: !17926)
!17968 = !DILocation(line: 222, column: 11, scope: !17926)
!17969 = !DILocation(line: 225, column: 18, scope: !17926)
!17970 = !DILocation(line: 225, column: 12, scope: !17926)
!17971 = !DILocation(line: 225, column: 16, scope: !17926)
!17972 = !DILocation(line: 226, column: 18, scope: !17926)
!17973 = !DILocation(line: 226, column: 22, scope: !17926)
!17974 = !DILocation(line: 226, column: 11, scope: !17926)
!17975 = !DILocation(line: 229, column: 14, scope: !17877)
!17976 = !DILocation(line: 229, column: 11, scope: !17877)
!17977 = !DILocation(line: 230, column: 13, scope: !17877)
!17978 = !DILocation(line: 230, column: 8, scope: !17877)
!17979 = !DILocation(line: 230, column: 10, scope: !17877)
!17980 = !DILocation(line: 231, column: 13, scope: !17981)
!17981 = distinct !DILexicalBlock(scope: !17877, file: !17771, line: 231, column: 11)
!17982 = !DILocation(line: 231, column: 12, scope: !17981)
!17983 = !DILocation(line: 231, column: 11, scope: !17981)
!17984 = !DILocation(line: 231, column: 11, scope: !17877)
!17985 = !DILocation(line: 232, column: 13, scope: !17981)
!17986 = !DILocation(line: 232, column: 9, scope: !17981)
!17987 = !DILocation(line: 233, column: 5, scope: !17877)
!17988 = !DILocation(line: 235, column: 10, scope: !17770)
!17989 = !DILocation(line: 235, column: 4, scope: !17770)
!17990 = !DILocation(line: 235, column: 8, scope: !17770)
!17991 = !DILocation(line: 236, column: 10, scope: !17770)
!17992 = !DILocation(line: 236, column: 3, scope: !17770)
!17993 = !DILocation(line: 237, column: 1, scope: !17770)
!17994 = distinct !DISubprogram(name: "bkm_scale", scope: !17771, file: !17771, line: 48, type: !17995, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1524, retainedNodes: !433)
!17995 = !DISubroutineType(types: !17996)
!17996 = !{!1528, !17774, !5}
!17997 = !DILocalVariable(name: "x", arg: 1, scope: !17994, file: !17771, line: 48, type: !17774)
!17998 = !DILocation(line: 48, column: 24, scope: !17994)
!17999 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !17994, file: !17771, line: 48, type: !5)
!18000 = !DILocation(line: 48, column: 31, scope: !17994)
!18001 = !DILocation(line: 55, column: 26, scope: !18002)
!18002 = distinct !DILexicalBlock(scope: !17994, file: !17771, line: 55, column: 7)
!18003 = !DILocation(line: 55, column: 24, scope: !18002)
!18004 = !DILocation(line: 55, column: 42, scope: !18002)
!18005 = !DILocation(line: 55, column: 41, scope: !18002)
!18006 = !DILocation(line: 55, column: 39, scope: !18002)
!18007 = !DILocation(line: 55, column: 7, scope: !17994)
!18008 = !DILocation(line: 57, column: 8, scope: !18009)
!18009 = distinct !DILexicalBlock(scope: !18002, file: !17771, line: 56, column: 5)
!18010 = !DILocation(line: 57, column: 10, scope: !18009)
!18011 = !DILocation(line: 58, column: 7, scope: !18009)
!18012 = !DILocation(line: 60, column: 9, scope: !17994)
!18013 = !DILocation(line: 60, column: 4, scope: !17994)
!18014 = !DILocation(line: 60, column: 6, scope: !17994)
!18015 = !DILocation(line: 61, column: 3, scope: !17994)
!18016 = !DILocation(line: 62, column: 1, scope: !17994)
!18017 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !17771, file: !17771, line: 65, type: !18018, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1524, retainedNodes: !433)
!18018 = !DISubroutineType(types: !18019)
!18019 = !{!1528, !17774, !5, !5}
!18020 = !DILocalVariable(name: "x", arg: 1, scope: !18017, file: !17771, line: 65, type: !17774)
!18021 = !DILocation(line: 65, column: 33, scope: !18017)
!18022 = !DILocalVariable(name: "base", arg: 2, scope: !18017, file: !17771, line: 65, type: !5)
!18023 = !DILocation(line: 65, column: 40, scope: !18017)
!18024 = !DILocalVariable(name: "power", arg: 3, scope: !18017, file: !17771, line: 65, type: !5)
!18025 = !DILocation(line: 65, column: 50, scope: !18017)
!18026 = !DILocalVariable(name: "err", scope: !18017, file: !17771, line: 67, type: !1528)
!18027 = !DILocation(line: 67, column: 16, scope: !18017)
!18028 = !DILocation(line: 68, column: 3, scope: !18017)
!18029 = !DILocation(line: 68, column: 15, scope: !18017)
!18030 = !DILocation(line: 69, column: 23, scope: !18017)
!18031 = !DILocation(line: 69, column: 26, scope: !18017)
!18032 = !DILocation(line: 69, column: 12, scope: !18017)
!18033 = !DILocation(line: 69, column: 9, scope: !18017)
!18034 = distinct !{!18034, !18028, !18035}
!18035 = !DILocation(line: 69, column: 30, scope: !18017)
!18036 = !DILocation(line: 70, column: 10, scope: !18017)
!18037 = !DILocation(line: 70, column: 3, scope: !18017)
!18038 = distinct !DISubprogram(name: "xstrtol_fatal", scope: !18039, file: !18039, line: 92, type: !18040, scopeLine: 95, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !1532, retainedNodes: !433)
!18039 = !DIFile(filename: "lib/xstrtol-error.c", directory: "/home/mohamad/clone/coreutils")
!18040 = !DISubroutineType(types: !18041)
!18041 = !{null, !71, !5, !8, !1535, !90}
!18042 = !DILocalVariable(name: "err", arg: 1, scope: !18038, file: !18039, line: 92, type: !71)
!18043 = !DILocation(line: 92, column: 34, scope: !18038)
!18044 = !DILocalVariable(name: "opt_idx", arg: 2, scope: !18038, file: !18039, line: 93, type: !5)
!18045 = !DILocation(line: 93, column: 20, scope: !18038)
!18046 = !DILocalVariable(name: "c", arg: 3, scope: !18038, file: !18039, line: 93, type: !8)
!18047 = !DILocation(line: 93, column: 34, scope: !18038)
!18048 = !DILocalVariable(name: "long_options", arg: 4, scope: !18038, file: !18039, line: 93, type: !1535)
!18049 = !DILocation(line: 93, column: 58, scope: !18038)
!18050 = !DILocalVariable(name: "arg", arg: 5, scope: !18038, file: !18039, line: 94, type: !90)
!18051 = !DILocation(line: 94, column: 28, scope: !18038)
!18052 = !DILocation(line: 96, column: 18, scope: !18038)
!18053 = !DILocation(line: 96, column: 23, scope: !18038)
!18054 = !DILocation(line: 96, column: 32, scope: !18038)
!18055 = !DILocation(line: 96, column: 35, scope: !18038)
!18056 = !DILocation(line: 96, column: 49, scope: !18038)
!18057 = !DILocation(line: 96, column: 54, scope: !18038)
!18058 = !DILocation(line: 96, column: 3, scope: !18038)
!18059 = !DILocation(line: 97, column: 3, scope: !18038)
!18060 = distinct !DISubprogram(name: "xstrtol_error", scope: !18039, file: !18039, line: 47, type: !18061, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1532, retainedNodes: !433)
!18061 = !DISubroutineType(types: !18062)
!18062 = !{null, !71, !5, !8, !1535, !90, !5}
!18063 = !DILocalVariable(name: "err", arg: 1, scope: !18060, file: !18039, line: 47, type: !71)
!18064 = !DILocation(line: 47, column: 34, scope: !18060)
!18065 = !DILocalVariable(name: "opt_idx", arg: 2, scope: !18060, file: !18039, line: 48, type: !5)
!18066 = !DILocation(line: 48, column: 20, scope: !18060)
!18067 = !DILocalVariable(name: "c", arg: 3, scope: !18060, file: !18039, line: 48, type: !8)
!18068 = !DILocation(line: 48, column: 34, scope: !18060)
!18069 = !DILocalVariable(name: "long_options", arg: 4, scope: !18060, file: !18039, line: 48, type: !1535)
!18070 = !DILocation(line: 48, column: 58, scope: !18060)
!18071 = !DILocalVariable(name: "arg", arg: 5, scope: !18060, file: !18039, line: 49, type: !90)
!18072 = !DILocation(line: 49, column: 28, scope: !18060)
!18073 = !DILocalVariable(name: "exit_status", arg: 6, scope: !18060, file: !18039, line: 50, type: !5)
!18074 = !DILocation(line: 50, column: 20, scope: !18060)
!18075 = !DILocalVariable(name: "hyphens", scope: !18060, file: !18039, line: 52, type: !90)
!18076 = !DILocation(line: 52, column: 15, scope: !18060)
!18077 = !DILocalVariable(name: "msgid", scope: !18060, file: !18039, line: 53, type: !90)
!18078 = !DILocation(line: 53, column: 15, scope: !18060)
!18079 = !DILocalVariable(name: "option", scope: !18060, file: !18039, line: 54, type: !90)
!18080 = !DILocation(line: 54, column: 15, scope: !18060)
!18081 = !DILocalVariable(name: "option_buffer", scope: !18060, file: !18039, line: 55, type: !330)
!18082 = !DILocation(line: 55, column: 8, scope: !18060)
!18083 = !DILocation(line: 57, column: 11, scope: !18060)
!18084 = !DILocation(line: 57, column: 3, scope: !18060)
!18085 = !DILocation(line: 60, column: 7, scope: !18086)
!18086 = distinct !DILexicalBlock(scope: !18060, file: !18039, line: 58, column: 5)
!18087 = !DILocation(line: 63, column: 13, scope: !18086)
!18088 = !DILocation(line: 64, column: 7, scope: !18086)
!18089 = !DILocation(line: 68, column: 13, scope: !18086)
!18090 = !DILocation(line: 69, column: 7, scope: !18086)
!18091 = !DILocation(line: 72, column: 13, scope: !18086)
!18092 = !DILocation(line: 73, column: 7, scope: !18086)
!18093 = !DILocation(line: 76, column: 7, scope: !18094)
!18094 = distinct !DILexicalBlock(scope: !18060, file: !18039, line: 76, column: 7)
!18095 = !DILocation(line: 76, column: 15, scope: !18094)
!18096 = !DILocation(line: 76, column: 7, scope: !18060)
!18097 = !DILocation(line: 78, column: 18, scope: !18098)
!18098 = distinct !DILexicalBlock(scope: !18094, file: !18039, line: 77, column: 5)
!18099 = !DILocation(line: 78, column: 15, scope: !18098)
!18100 = !DILocation(line: 79, column: 26, scope: !18098)
!18101 = !DILocation(line: 79, column: 7, scope: !18098)
!18102 = !DILocation(line: 79, column: 24, scope: !18098)
!18103 = !DILocation(line: 80, column: 7, scope: !18098)
!18104 = !DILocation(line: 80, column: 24, scope: !18098)
!18105 = !DILocation(line: 81, column: 16, scope: !18098)
!18106 = !DILocation(line: 81, column: 14, scope: !18098)
!18107 = !DILocation(line: 82, column: 5, scope: !18098)
!18108 = !DILocation(line: 84, column: 14, scope: !18094)
!18109 = !DILocation(line: 84, column: 27, scope: !18094)
!18110 = !DILocation(line: 84, column: 36, scope: !18094)
!18111 = !DILocation(line: 84, column: 12, scope: !18094)
!18112 = !DILocation(line: 86, column: 10, scope: !18060)
!18113 = !DILocation(line: 86, column: 35, scope: !18060)
!18114 = !DILocation(line: 86, column: 26, scope: !18060)
!18115 = !DILocation(line: 86, column: 43, scope: !18060)
!18116 = !DILocation(line: 86, column: 52, scope: !18060)
!18117 = !DILocation(line: 86, column: 60, scope: !18060)
!18118 = !DILocation(line: 86, column: 3, scope: !18060)
!18119 = !DILocation(line: 87, column: 1, scope: !18060)
!18120 = distinct !DISubprogram(name: "xstrtoumax", scope: !17771, file: !17771, line: 76, type: !18121, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1543, retainedNodes: !433)
!18121 = !DISubroutineType(types: !18122)
!18122 = !{!1528, !90, !178, !5, !18123, !90}
!18123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !464, size: 64)
!18124 = !DILocalVariable(name: "s", arg: 1, scope: !18120, file: !17771, line: 76, type: !90)
!18125 = !DILocation(line: 76, column: 24, scope: !18120)
!18126 = !DILocalVariable(name: "ptr", arg: 2, scope: !18120, file: !17771, line: 76, type: !178)
!18127 = !DILocation(line: 76, column: 34, scope: !18120)
!18128 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !18120, file: !17771, line: 76, type: !5)
!18129 = !DILocation(line: 76, column: 43, scope: !18120)
!18130 = !DILocalVariable(name: "val", arg: 4, scope: !18120, file: !17771, line: 77, type: !18123)
!18131 = !DILocation(line: 77, column: 24, scope: !18120)
!18132 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !18120, file: !17771, line: 77, type: !90)
!18133 = !DILocation(line: 77, column: 41, scope: !18120)
!18134 = !DILocalVariable(name: "t_ptr", scope: !18120, file: !17771, line: 79, type: !7)
!18135 = !DILocation(line: 79, column: 9, scope: !18120)
!18136 = !DILocalVariable(name: "p", scope: !18120, file: !17771, line: 80, type: !178)
!18137 = !DILocation(line: 80, column: 10, scope: !18120)
!18138 = !DILocalVariable(name: "tmp", scope: !18120, file: !17771, line: 81, type: !464)
!18139 = !DILocation(line: 81, column: 14, scope: !18120)
!18140 = !DILocalVariable(name: "err", scope: !18120, file: !17771, line: 82, type: !1528)
!18141 = !DILocation(line: 82, column: 16, scope: !18120)
!18142 = !DILocation(line: 84, column: 3, scope: !18120)
!18143 = !DILocation(line: 86, column: 8, scope: !18120)
!18144 = !DILocation(line: 86, column: 14, scope: !18120)
!18145 = !DILocation(line: 86, column: 5, scope: !18120)
!18146 = !DILocation(line: 88, column: 3, scope: !18120)
!18147 = !DILocation(line: 88, column: 9, scope: !18120)
!18148 = !DILocalVariable(name: "q", scope: !18149, file: !17771, line: 92, type: !90)
!18149 = distinct !DILexicalBlock(scope: !18150, file: !17771, line: 91, column: 5)
!18150 = distinct !DILexicalBlock(scope: !18120, file: !17771, line: 90, column: 7)
!18151 = !DILocation(line: 92, column: 19, scope: !18149)
!18152 = !DILocation(line: 92, column: 23, scope: !18149)
!18153 = !DILocalVariable(name: "ch", scope: !18149, file: !17771, line: 93, type: !535)
!18154 = !DILocation(line: 93, column: 21, scope: !18149)
!18155 = !DILocation(line: 93, column: 27, scope: !18149)
!18156 = !DILocation(line: 93, column: 26, scope: !18149)
!18157 = !DILocation(line: 94, column: 7, scope: !18149)
!18158 = !DILocation(line: 94, column: 14, scope: !18149)
!18159 = !DILocation(line: 95, column: 15, scope: !18149)
!18160 = !DILocation(line: 95, column: 14, scope: !18149)
!18161 = !DILocation(line: 95, column: 12, scope: !18149)
!18162 = distinct !{!18162, !18157, !18163}
!18163 = !DILocation(line: 95, column: 17, scope: !18149)
!18164 = !DILocation(line: 96, column: 11, scope: !18165)
!18165 = distinct !DILexicalBlock(scope: !18149, file: !17771, line: 96, column: 11)
!18166 = !DILocation(line: 96, column: 14, scope: !18165)
!18167 = !DILocation(line: 96, column: 11, scope: !18149)
!18168 = !DILocation(line: 97, column: 9, scope: !18165)
!18169 = !DILocation(line: 100, column: 19, scope: !18120)
!18170 = !DILocation(line: 100, column: 22, scope: !18120)
!18171 = !DILocation(line: 100, column: 25, scope: !18120)
!18172 = !DILocation(line: 100, column: 9, scope: !18120)
!18173 = !DILocation(line: 100, column: 7, scope: !18120)
!18174 = !DILocation(line: 102, column: 8, scope: !18175)
!18175 = distinct !DILexicalBlock(scope: !18120, file: !17771, line: 102, column: 7)
!18176 = !DILocation(line: 102, column: 7, scope: !18175)
!18177 = !DILocation(line: 102, column: 13, scope: !18175)
!18178 = !DILocation(line: 102, column: 10, scope: !18175)
!18179 = !DILocation(line: 102, column: 7, scope: !18120)
!18180 = !DILocation(line: 106, column: 11, scope: !18181)
!18181 = distinct !DILexicalBlock(scope: !18182, file: !17771, line: 106, column: 11)
!18182 = distinct !DILexicalBlock(scope: !18175, file: !17771, line: 103, column: 5)
!18183 = !DILocation(line: 106, column: 26, scope: !18181)
!18184 = !DILocation(line: 106, column: 31, scope: !18181)
!18185 = !DILocation(line: 106, column: 30, scope: !18181)
!18186 = !DILocation(line: 106, column: 29, scope: !18181)
!18187 = !DILocation(line: 106, column: 33, scope: !18181)
!18188 = !DILocation(line: 106, column: 44, scope: !18181)
!18189 = !DILocation(line: 106, column: 62, scope: !18181)
!18190 = !DILocation(line: 106, column: 61, scope: !18181)
!18191 = !DILocation(line: 106, column: 60, scope: !18181)
!18192 = !DILocation(line: 106, column: 36, scope: !18181)
!18193 = !DILocation(line: 106, column: 11, scope: !18182)
!18194 = !DILocation(line: 107, column: 13, scope: !18181)
!18195 = !DILocation(line: 107, column: 9, scope: !18181)
!18196 = !DILocation(line: 109, column: 9, scope: !18181)
!18197 = !DILocation(line: 110, column: 5, scope: !18182)
!18198 = !DILocation(line: 111, column: 12, scope: !18199)
!18199 = distinct !DILexicalBlock(scope: !18175, file: !17771, line: 111, column: 12)
!18200 = !DILocation(line: 111, column: 18, scope: !18199)
!18201 = !DILocation(line: 111, column: 12, scope: !18175)
!18202 = !DILocation(line: 113, column: 11, scope: !18203)
!18203 = distinct !DILexicalBlock(scope: !18204, file: !17771, line: 113, column: 11)
!18204 = distinct !DILexicalBlock(scope: !18199, file: !17771, line: 112, column: 5)
!18205 = !DILocation(line: 113, column: 17, scope: !18203)
!18206 = !DILocation(line: 113, column: 11, scope: !18204)
!18207 = !DILocation(line: 114, column: 9, scope: !18203)
!18208 = !DILocation(line: 115, column: 11, scope: !18204)
!18209 = !DILocation(line: 116, column: 5, scope: !18204)
!18210 = !DILocation(line: 121, column: 8, scope: !18211)
!18211 = distinct !DILexicalBlock(scope: !18120, file: !17771, line: 121, column: 7)
!18212 = !DILocation(line: 121, column: 7, scope: !18120)
!18213 = !DILocation(line: 123, column: 14, scope: !18214)
!18214 = distinct !DILexicalBlock(scope: !18211, file: !17771, line: 122, column: 5)
!18215 = !DILocation(line: 123, column: 8, scope: !18214)
!18216 = !DILocation(line: 123, column: 12, scope: !18214)
!18217 = !DILocation(line: 124, column: 14, scope: !18214)
!18218 = !DILocation(line: 124, column: 7, scope: !18214)
!18219 = !DILocation(line: 127, column: 9, scope: !18220)
!18220 = distinct !DILexicalBlock(scope: !18120, file: !17771, line: 127, column: 7)
!18221 = !DILocation(line: 127, column: 8, scope: !18220)
!18222 = !DILocation(line: 127, column: 7, scope: !18220)
!18223 = !DILocation(line: 127, column: 11, scope: !18220)
!18224 = !DILocation(line: 127, column: 7, scope: !18120)
!18225 = !DILocalVariable(name: "base", scope: !18226, file: !17771, line: 129, type: !5)
!18226 = distinct !DILexicalBlock(scope: !18220, file: !17771, line: 128, column: 5)
!18227 = !DILocation(line: 129, column: 11, scope: !18226)
!18228 = !DILocalVariable(name: "suffixes", scope: !18226, file: !17771, line: 130, type: !5)
!18229 = !DILocation(line: 130, column: 11, scope: !18226)
!18230 = !DILocalVariable(name: "overflow", scope: !18226, file: !17771, line: 131, type: !1528)
!18231 = !DILocation(line: 131, column: 20, scope: !18226)
!18232 = !DILocation(line: 133, column: 20, scope: !18233)
!18233 = distinct !DILexicalBlock(scope: !18226, file: !17771, line: 133, column: 11)
!18234 = !DILocation(line: 133, column: 38, scope: !18233)
!18235 = !DILocation(line: 133, column: 37, scope: !18233)
!18236 = !DILocation(line: 133, column: 36, scope: !18233)
!18237 = !DILocation(line: 133, column: 12, scope: !18233)
!18238 = !DILocation(line: 133, column: 11, scope: !18226)
!18239 = !DILocation(line: 135, column: 18, scope: !18240)
!18240 = distinct !DILexicalBlock(scope: !18233, file: !17771, line: 134, column: 9)
!18241 = !DILocation(line: 135, column: 12, scope: !18240)
!18242 = !DILocation(line: 135, column: 16, scope: !18240)
!18243 = !DILocation(line: 136, column: 18, scope: !18240)
!18244 = !DILocation(line: 136, column: 22, scope: !18240)
!18245 = !DILocation(line: 136, column: 11, scope: !18240)
!18246 = !DILocation(line: 139, column: 17, scope: !18226)
!18247 = !DILocation(line: 139, column: 16, scope: !18226)
!18248 = !DILocation(line: 139, column: 15, scope: !18226)
!18249 = !DILocation(line: 139, column: 7, scope: !18226)
!18250 = !DILocation(line: 151, column: 23, scope: !18251)
!18251 = distinct !DILexicalBlock(scope: !18252, file: !17771, line: 151, column: 15)
!18252 = distinct !DILexicalBlock(scope: !18226, file: !17771, line: 140, column: 9)
!18253 = !DILocation(line: 151, column: 15, scope: !18251)
!18254 = !DILocation(line: 151, column: 15, scope: !18252)
!18255 = !DILocation(line: 152, column: 21, scope: !18251)
!18256 = !DILocation(line: 152, column: 13, scope: !18251)
!18257 = !DILocation(line: 155, column: 21, scope: !18258)
!18258 = distinct !DILexicalBlock(scope: !18259, file: !17771, line: 155, column: 21)
!18259 = distinct !DILexicalBlock(scope: !18251, file: !17771, line: 153, column: 15)
!18260 = !DILocation(line: 155, column: 29, scope: !18258)
!18261 = !DILocation(line: 155, column: 21, scope: !18259)
!18262 = !DILocation(line: 156, column: 28, scope: !18258)
!18263 = !DILocation(line: 156, column: 19, scope: !18258)
!18264 = !DILocation(line: 157, column: 17, scope: !18259)
!18265 = !DILocation(line: 161, column: 22, scope: !18259)
!18266 = !DILocation(line: 162, column: 25, scope: !18259)
!18267 = !DILocation(line: 163, column: 17, scope: !18259)
!18268 = !DILocation(line: 164, column: 15, scope: !18259)
!18269 = !DILocation(line: 165, column: 9, scope: !18252)
!18270 = !DILocation(line: 167, column: 17, scope: !18226)
!18271 = !DILocation(line: 167, column: 16, scope: !18226)
!18272 = !DILocation(line: 167, column: 15, scope: !18226)
!18273 = !DILocation(line: 167, column: 7, scope: !18226)
!18274 = !DILocation(line: 170, column: 22, scope: !18275)
!18275 = distinct !DILexicalBlock(scope: !18226, file: !17771, line: 168, column: 9)
!18276 = !DILocation(line: 170, column: 20, scope: !18275)
!18277 = !DILocation(line: 171, column: 11, scope: !18275)
!18278 = !DILocation(line: 177, column: 22, scope: !18275)
!18279 = !DILocation(line: 177, column: 20, scope: !18275)
!18280 = !DILocation(line: 178, column: 11, scope: !18275)
!18281 = !DILocation(line: 181, column: 20, scope: !18275)
!18282 = !DILocation(line: 182, column: 11, scope: !18275)
!18283 = !DILocation(line: 185, column: 48, scope: !18275)
!18284 = !DILocation(line: 185, column: 22, scope: !18275)
!18285 = !DILocation(line: 185, column: 20, scope: !18275)
!18286 = !DILocation(line: 186, column: 11, scope: !18275)
!18287 = !DILocation(line: 190, column: 48, scope: !18275)
!18288 = !DILocation(line: 190, column: 22, scope: !18275)
!18289 = !DILocation(line: 190, column: 20, scope: !18275)
!18290 = !DILocation(line: 191, column: 11, scope: !18275)
!18291 = !DILocation(line: 195, column: 48, scope: !18275)
!18292 = !DILocation(line: 195, column: 22, scope: !18275)
!18293 = !DILocation(line: 195, column: 20, scope: !18275)
!18294 = !DILocation(line: 196, column: 11, scope: !18275)
!18295 = !DILocation(line: 200, column: 48, scope: !18275)
!18296 = !DILocation(line: 200, column: 22, scope: !18275)
!18297 = !DILocation(line: 200, column: 20, scope: !18275)
!18298 = !DILocation(line: 201, column: 11, scope: !18275)
!18299 = !DILocation(line: 204, column: 48, scope: !18275)
!18300 = !DILocation(line: 204, column: 22, scope: !18275)
!18301 = !DILocation(line: 204, column: 20, scope: !18275)
!18302 = !DILocation(line: 205, column: 11, scope: !18275)
!18303 = !DILocation(line: 209, column: 48, scope: !18275)
!18304 = !DILocation(line: 209, column: 22, scope: !18275)
!18305 = !DILocation(line: 209, column: 20, scope: !18275)
!18306 = !DILocation(line: 210, column: 11, scope: !18275)
!18307 = !DILocation(line: 213, column: 22, scope: !18275)
!18308 = !DILocation(line: 213, column: 20, scope: !18275)
!18309 = !DILocation(line: 214, column: 11, scope: !18275)
!18310 = !DILocation(line: 217, column: 48, scope: !18275)
!18311 = !DILocation(line: 217, column: 22, scope: !18275)
!18312 = !DILocation(line: 217, column: 20, scope: !18275)
!18313 = !DILocation(line: 218, column: 11, scope: !18275)
!18314 = !DILocation(line: 221, column: 48, scope: !18275)
!18315 = !DILocation(line: 221, column: 22, scope: !18275)
!18316 = !DILocation(line: 221, column: 20, scope: !18275)
!18317 = !DILocation(line: 222, column: 11, scope: !18275)
!18318 = !DILocation(line: 225, column: 18, scope: !18275)
!18319 = !DILocation(line: 225, column: 12, scope: !18275)
!18320 = !DILocation(line: 225, column: 16, scope: !18275)
!18321 = !DILocation(line: 226, column: 18, scope: !18275)
!18322 = !DILocation(line: 226, column: 22, scope: !18275)
!18323 = !DILocation(line: 226, column: 11, scope: !18275)
!18324 = !DILocation(line: 229, column: 14, scope: !18226)
!18325 = !DILocation(line: 229, column: 11, scope: !18226)
!18326 = !DILocation(line: 230, column: 13, scope: !18226)
!18327 = !DILocation(line: 230, column: 8, scope: !18226)
!18328 = !DILocation(line: 230, column: 10, scope: !18226)
!18329 = !DILocation(line: 231, column: 13, scope: !18330)
!18330 = distinct !DILexicalBlock(scope: !18226, file: !17771, line: 231, column: 11)
!18331 = !DILocation(line: 231, column: 12, scope: !18330)
!18332 = !DILocation(line: 231, column: 11, scope: !18330)
!18333 = !DILocation(line: 231, column: 11, scope: !18226)
!18334 = !DILocation(line: 232, column: 13, scope: !18330)
!18335 = !DILocation(line: 232, column: 9, scope: !18330)
!18336 = !DILocation(line: 233, column: 5, scope: !18226)
!18337 = !DILocation(line: 235, column: 10, scope: !18120)
!18338 = !DILocation(line: 235, column: 4, scope: !18120)
!18339 = !DILocation(line: 235, column: 8, scope: !18120)
!18340 = !DILocation(line: 236, column: 10, scope: !18120)
!18341 = !DILocation(line: 236, column: 3, scope: !18120)
!18342 = !DILocation(line: 237, column: 1, scope: !18120)
!18343 = distinct !DISubprogram(name: "bkm_scale", scope: !17771, file: !17771, line: 48, type: !18344, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1543, retainedNodes: !433)
!18344 = !DISubroutineType(types: !18345)
!18345 = !{!1528, !18123, !5}
!18346 = !DILocalVariable(name: "x", arg: 1, scope: !18343, file: !17771, line: 48, type: !18123)
!18347 = !DILocation(line: 48, column: 24, scope: !18343)
!18348 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !18343, file: !17771, line: 48, type: !5)
!18349 = !DILocation(line: 48, column: 31, scope: !18343)
!18350 = !DILocation(line: 55, column: 26, scope: !18351)
!18351 = distinct !DILexicalBlock(scope: !18343, file: !17771, line: 55, column: 7)
!18352 = !DILocation(line: 55, column: 24, scope: !18351)
!18353 = !DILocation(line: 55, column: 42, scope: !18351)
!18354 = !DILocation(line: 55, column: 41, scope: !18351)
!18355 = !DILocation(line: 55, column: 39, scope: !18351)
!18356 = !DILocation(line: 55, column: 7, scope: !18343)
!18357 = !DILocation(line: 57, column: 8, scope: !18358)
!18358 = distinct !DILexicalBlock(scope: !18351, file: !17771, line: 56, column: 5)
!18359 = !DILocation(line: 57, column: 10, scope: !18358)
!18360 = !DILocation(line: 58, column: 7, scope: !18358)
!18361 = !DILocation(line: 60, column: 9, scope: !18343)
!18362 = !DILocation(line: 60, column: 4, scope: !18343)
!18363 = !DILocation(line: 60, column: 6, scope: !18343)
!18364 = !DILocation(line: 61, column: 3, scope: !18343)
!18365 = !DILocation(line: 62, column: 1, scope: !18343)
!18366 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !17771, file: !17771, line: 65, type: !18367, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1543, retainedNodes: !433)
!18367 = !DISubroutineType(types: !18368)
!18368 = !{!1528, !18123, !5, !5}
!18369 = !DILocalVariable(name: "x", arg: 1, scope: !18366, file: !17771, line: 65, type: !18123)
!18370 = !DILocation(line: 65, column: 33, scope: !18366)
!18371 = !DILocalVariable(name: "base", arg: 2, scope: !18366, file: !17771, line: 65, type: !5)
!18372 = !DILocation(line: 65, column: 40, scope: !18366)
!18373 = !DILocalVariable(name: "power", arg: 3, scope: !18366, file: !17771, line: 65, type: !5)
!18374 = !DILocation(line: 65, column: 50, scope: !18366)
!18375 = !DILocalVariable(name: "err", scope: !18366, file: !17771, line: 67, type: !1528)
!18376 = !DILocation(line: 67, column: 16, scope: !18366)
!18377 = !DILocation(line: 68, column: 3, scope: !18366)
!18378 = !DILocation(line: 68, column: 15, scope: !18366)
!18379 = !DILocation(line: 69, column: 23, scope: !18366)
!18380 = !DILocation(line: 69, column: 26, scope: !18366)
!18381 = !DILocation(line: 69, column: 12, scope: !18366)
!18382 = !DILocation(line: 69, column: 9, scope: !18366)
!18383 = distinct !{!18383, !18377, !18384}
!18384 = !DILocation(line: 69, column: 30, scope: !18366)
!18385 = !DILocation(line: 70, column: 10, scope: !18366)
!18386 = !DILocation(line: 70, column: 3, scope: !18366)
!18387 = distinct !DISubprogram(name: "explicit_bzero", scope: !18388, file: !18388, line: 39, type: !18389, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1549, retainedNodes: !433)
!18388 = !DIFile(filename: "lib/explicit_bzero.c", directory: "/home/mohamad/clone/coreutils")
!18389 = !DISubroutineType(types: !18390)
!18390 = !{null, !47, !52}
!18391 = !DILocalVariable(name: "s", arg: 1, scope: !18387, file: !18388, line: 39, type: !47)
!18392 = !DILocation(line: 39, column: 23, scope: !18387)
!18393 = !DILocalVariable(name: "len", arg: 2, scope: !18387, file: !18388, line: 39, type: !52)
!18394 = !DILocation(line: 39, column: 33, scope: !18387)
!18395 = !DILocation(line: 44, column: 11, scope: !18387)
!18396 = !DILocation(line: 44, column: 20, scope: !18387)
!18397 = !DILocation(line: 44, column: 3, scope: !18387)
!18398 = !DILocation(line: 50, column: 1, scope: !18387)
!18399 = distinct !DISubprogram(name: "rpl_fclose", scope: !18400, file: !18400, line: 58, type: !18401, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1551, retainedNodes: !433)
!18400 = !DIFile(filename: "lib/fclose.c", directory: "/home/mohamad/clone/coreutils")
!18401 = !DISubroutineType(types: !18402)
!18402 = !{!5, !18403}
!18403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18404, size: 64)
!18404 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !18405)
!18405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !18406)
!18406 = !{!18407, !18408, !18409, !18410, !18411, !18412, !18413, !18414, !18415, !18416, !18417, !18418, !18419, !18427, !18428, !18429, !18430, !18431, !18432, !18433, !18434, !18435, !18436, !18437, !18438, !18439, !18440, !18441, !18442}
!18407 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !18405, file: !2, line: 242, baseType: !5, size: 32)
!18408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !18405, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!18409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !18405, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!18410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !18405, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!18411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !18405, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!18412 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !18405, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!18413 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !18405, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!18414 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !18405, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!18415 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !18405, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!18416 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !18405, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!18417 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !18405, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!18418 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !18405, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!18419 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !18405, file: !2, line: 260, baseType: !18420, size: 64, offset: 768)
!18420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18421, size: 64)
!18421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !18422)
!18422 = !{!18423, !18424, !18426}
!18423 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !18421, file: !2, line: 157, baseType: !18420, size: 64)
!18424 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !18421, file: !2, line: 158, baseType: !18425, size: 64, offset: 64)
!18425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18405, size: 64)
!18426 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !18421, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!18427 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !18405, file: !2, line: 262, baseType: !18425, size: 64, offset: 832)
!18428 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !18405, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!18429 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !18405, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!18430 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !18405, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!18431 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !18405, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!18432 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !18405, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!18433 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !18405, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!18434 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !18405, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!18435 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !18405, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!18436 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !18405, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!18437 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !18405, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!18438 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !18405, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!18439 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !18405, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!18440 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !18405, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!18441 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !18405, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!18442 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !18405, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!18443 = !DILocalVariable(name: "fp", arg: 1, scope: !18399, file: !18400, line: 58, type: !18403)
!18444 = !DILocation(line: 58, column: 19, scope: !18399)
!18445 = !DILocalVariable(name: "saved_errno", scope: !18399, file: !18400, line: 60, type: !5)
!18446 = !DILocation(line: 60, column: 7, scope: !18399)
!18447 = !DILocalVariable(name: "fd", scope: !18399, file: !18400, line: 61, type: !5)
!18448 = !DILocation(line: 61, column: 7, scope: !18399)
!18449 = !DILocalVariable(name: "result", scope: !18399, file: !18400, line: 62, type: !5)
!18450 = !DILocation(line: 62, column: 7, scope: !18399)
!18451 = !DILocation(line: 65, column: 16, scope: !18399)
!18452 = !DILocation(line: 65, column: 8, scope: !18399)
!18453 = !DILocation(line: 65, column: 6, scope: !18399)
!18454 = !DILocation(line: 66, column: 7, scope: !18455)
!18455 = distinct !DILexicalBlock(scope: !18399, file: !18400, line: 66, column: 7)
!18456 = !DILocation(line: 66, column: 10, scope: !18455)
!18457 = !DILocation(line: 66, column: 7, scope: !18399)
!18458 = !DILocation(line: 67, column: 28, scope: !18455)
!18459 = !DILocation(line: 67, column: 12, scope: !18455)
!18460 = !DILocation(line: 67, column: 5, scope: !18455)
!18461 = !DILocation(line: 72, column: 9, scope: !18462)
!18462 = distinct !DILexicalBlock(scope: !18399, file: !18400, line: 72, column: 7)
!18463 = !DILocation(line: 72, column: 23, scope: !18462)
!18464 = !DILocation(line: 72, column: 41, scope: !18462)
!18465 = !DILocation(line: 72, column: 33, scope: !18462)
!18466 = !DILocation(line: 72, column: 26, scope: !18462)
!18467 = !DILocation(line: 72, column: 59, scope: !18462)
!18468 = !DILocation(line: 73, column: 7, scope: !18462)
!18469 = !DILocation(line: 73, column: 18, scope: !18462)
!18470 = !DILocation(line: 73, column: 10, scope: !18462)
!18471 = !DILocation(line: 72, column: 7, scope: !18399)
!18472 = !DILocation(line: 74, column: 19, scope: !18462)
!18473 = !DILocation(line: 74, column: 17, scope: !18462)
!18474 = !DILocation(line: 74, column: 5, scope: !18462)
!18475 = !DILocation(line: 100, column: 28, scope: !18399)
!18476 = !DILocation(line: 100, column: 12, scope: !18399)
!18477 = !DILocation(line: 100, column: 10, scope: !18399)
!18478 = !DILocation(line: 105, column: 7, scope: !18479)
!18479 = distinct !DILexicalBlock(scope: !18399, file: !18400, line: 105, column: 7)
!18480 = !DILocation(line: 105, column: 19, scope: !18479)
!18481 = !DILocation(line: 105, column: 7, scope: !18399)
!18482 = !DILocation(line: 107, column: 15, scope: !18483)
!18483 = distinct !DILexicalBlock(scope: !18479, file: !18400, line: 106, column: 5)
!18484 = !DILocation(line: 107, column: 7, scope: !18483)
!18485 = !DILocation(line: 107, column: 13, scope: !18483)
!18486 = !DILocation(line: 108, column: 14, scope: !18483)
!18487 = !DILocation(line: 109, column: 5, scope: !18483)
!18488 = !DILocation(line: 111, column: 10, scope: !18399)
!18489 = !DILocation(line: 111, column: 3, scope: !18399)
!18490 = !DILocation(line: 112, column: 1, scope: !18399)
!18491 = distinct !DISubprogram(name: "rpl_fcntl", scope: !1124, file: !1124, line: 202, type: !18492, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1127, retainedNodes: !433)
!18492 = !DISubroutineType(types: !18493)
!18493 = !{!5, !5, !5, null}
!18494 = !DILocalVariable(name: "fd", arg: 1, scope: !18491, file: !1124, line: 202, type: !5)
!18495 = !DILocation(line: 202, column: 12, scope: !18491)
!18496 = !DILocalVariable(name: "action", arg: 2, scope: !18491, file: !1124, line: 202, type: !5)
!18497 = !DILocation(line: 202, column: 20, scope: !18491)
!18498 = !DILocalVariable(name: "arg", scope: !18491, file: !1124, line: 208, type: !1130)
!18499 = !DILocation(line: 208, column: 11, scope: !18491)
!18500 = !DILocalVariable(name: "result", scope: !18491, file: !1124, line: 209, type: !5)
!18501 = !DILocation(line: 209, column: 7, scope: !18491)
!18502 = !DILocation(line: 210, column: 3, scope: !18491)
!18503 = !DILocation(line: 211, column: 11, scope: !18491)
!18504 = !DILocation(line: 211, column: 3, scope: !18491)
!18505 = !DILocalVariable(name: "target", scope: !18506, file: !1124, line: 215, type: !5)
!18506 = distinct !DILexicalBlock(scope: !18507, file: !1124, line: 214, column: 7)
!18507 = distinct !DILexicalBlock(scope: !18491, file: !1124, line: 212, column: 5)
!18508 = !DILocation(line: 215, column: 13, scope: !18506)
!18509 = !DILocation(line: 215, column: 22, scope: !18506)
!18510 = !DILocation(line: 216, column: 35, scope: !18506)
!18511 = !DILocation(line: 216, column: 39, scope: !18506)
!18512 = !DILocation(line: 216, column: 18, scope: !18506)
!18513 = !DILocation(line: 216, column: 16, scope: !18506)
!18514 = !DILocation(line: 217, column: 9, scope: !18506)
!18515 = !DILocalVariable(name: "target", scope: !18516, file: !1124, line: 222, type: !5)
!18516 = distinct !DILexicalBlock(scope: !18507, file: !1124, line: 221, column: 7)
!18517 = !DILocation(line: 222, column: 13, scope: !18516)
!18518 = !DILocation(line: 222, column: 22, scope: !18516)
!18519 = !DILocation(line: 223, column: 43, scope: !18516)
!18520 = !DILocation(line: 223, column: 47, scope: !18516)
!18521 = !DILocation(line: 223, column: 18, scope: !18516)
!18522 = !DILocation(line: 223, column: 16, scope: !18516)
!18523 = !DILocation(line: 224, column: 9, scope: !18516)
!18524 = !DILocation(line: 259, column: 17, scope: !18525)
!18525 = distinct !DILexicalBlock(scope: !18507, file: !1124, line: 257, column: 7)
!18526 = !DILocation(line: 259, column: 9, scope: !18525)
!18527 = !DILocation(line: 328, column: 29, scope: !18528)
!18528 = distinct !DILexicalBlock(scope: !18525, file: !1124, line: 260, column: 11)
!18529 = !DILocation(line: 328, column: 33, scope: !18528)
!18530 = !DILocation(line: 328, column: 22, scope: !18528)
!18531 = !DILocation(line: 328, column: 20, scope: !18528)
!18532 = !DILocation(line: 329, column: 13, scope: !18528)
!18533 = !DILocalVariable(name: "x", scope: !18534, file: !1124, line: 423, type: !5)
!18534 = distinct !DILexicalBlock(scope: !18528, file: !1124, line: 422, column: 13)
!18535 = !DILocation(line: 423, column: 19, scope: !18534)
!18536 = !DILocation(line: 423, column: 23, scope: !18534)
!18537 = !DILocation(line: 424, column: 31, scope: !18534)
!18538 = !DILocation(line: 424, column: 35, scope: !18534)
!18539 = !DILocation(line: 424, column: 43, scope: !18534)
!18540 = !DILocation(line: 424, column: 24, scope: !18534)
!18541 = !DILocation(line: 424, column: 22, scope: !18534)
!18542 = !DILocation(line: 426, column: 13, scope: !18528)
!18543 = !DILocalVariable(name: "p", scope: !18544, file: !1124, line: 431, type: !47)
!18544 = distinct !DILexicalBlock(scope: !18528, file: !1124, line: 430, column: 13)
!18545 = !DILocation(line: 431, column: 21, scope: !18544)
!18546 = !DILocation(line: 431, column: 25, scope: !18544)
!18547 = !DILocation(line: 432, column: 31, scope: !18544)
!18548 = !DILocation(line: 432, column: 35, scope: !18544)
!18549 = !DILocation(line: 432, column: 43, scope: !18544)
!18550 = !DILocation(line: 432, column: 24, scope: !18544)
!18551 = !DILocation(line: 432, column: 22, scope: !18544)
!18552 = !DILocation(line: 434, column: 13, scope: !18528)
!18553 = !DILocation(line: 439, column: 9, scope: !18525)
!18554 = !DILocation(line: 442, column: 3, scope: !18491)
!18555 = !DILocation(line: 443, column: 10, scope: !18491)
!18556 = !DILocation(line: 443, column: 3, scope: !18491)
!18557 = distinct !DISubprogram(name: "rpl_fcntl_DUPFD", scope: !1124, file: !1124, line: 447, type: !1125, scopeLine: 448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1127, retainedNodes: !433)
!18558 = !DILocalVariable(name: "fd", arg: 1, scope: !18557, file: !1124, line: 447, type: !5)
!18559 = !DILocation(line: 447, column: 22, scope: !18557)
!18560 = !DILocalVariable(name: "target", arg: 2, scope: !18557, file: !1124, line: 447, type: !5)
!18561 = !DILocation(line: 447, column: 30, scope: !18557)
!18562 = !DILocalVariable(name: "result", scope: !18557, file: !1124, line: 449, type: !5)
!18563 = !DILocation(line: 449, column: 7, scope: !18557)
!18564 = !DILocation(line: 482, column: 19, scope: !18557)
!18565 = !DILocation(line: 482, column: 32, scope: !18557)
!18566 = !DILocation(line: 482, column: 12, scope: !18557)
!18567 = !DILocation(line: 482, column: 10, scope: !18557)
!18568 = !DILocation(line: 484, column: 10, scope: !18557)
!18569 = !DILocation(line: 484, column: 3, scope: !18557)
!18570 = !DILocalVariable(name: "fd", arg: 1, scope: !1123, file: !1124, line: 488, type: !5)
!18571 = !DILocation(line: 488, column: 30, scope: !1123)
!18572 = !DILocalVariable(name: "target", arg: 2, scope: !1123, file: !1124, line: 488, type: !5)
!18573 = !DILocation(line: 488, column: 38, scope: !1123)
!18574 = !DILocalVariable(name: "result", scope: !1123, file: !1124, line: 490, type: !5)
!18575 = !DILocation(line: 490, column: 7, scope: !1123)
!18576 = !DILocation(line: 508, column: 12, scope: !18577)
!18577 = distinct !DILexicalBlock(scope: !1123, file: !1124, line: 508, column: 7)
!18578 = !DILocation(line: 508, column: 9, scope: !18577)
!18579 = !DILocation(line: 508, column: 7, scope: !1123)
!18580 = !DILocation(line: 510, column: 23, scope: !18581)
!18581 = distinct !DILexicalBlock(scope: !18577, file: !1124, line: 509, column: 5)
!18582 = !DILocation(line: 510, column: 44, scope: !18581)
!18583 = !DILocation(line: 510, column: 16, scope: !18581)
!18584 = !DILocation(line: 510, column: 14, scope: !18581)
!18585 = !DILocation(line: 511, column: 16, scope: !18586)
!18586 = distinct !DILexicalBlock(scope: !18581, file: !1124, line: 511, column: 11)
!18587 = !DILocation(line: 511, column: 13, scope: !18586)
!18588 = !DILocation(line: 511, column: 23, scope: !18586)
!18589 = !DILocation(line: 511, column: 26, scope: !18586)
!18590 = !DILocation(line: 511, column: 32, scope: !18586)
!18591 = !DILocation(line: 511, column: 11, scope: !18581)
!18592 = !DILocation(line: 513, column: 30, scope: !18593)
!18593 = distinct !DILexicalBlock(scope: !18586, file: !1124, line: 512, column: 9)
!18594 = !DILocation(line: 518, column: 9, scope: !18593)
!18595 = !DILocation(line: 521, column: 37, scope: !18596)
!18596 = distinct !DILexicalBlock(scope: !18586, file: !1124, line: 520, column: 9)
!18597 = !DILocation(line: 521, column: 41, scope: !18596)
!18598 = !DILocation(line: 521, column: 20, scope: !18596)
!18599 = !DILocation(line: 521, column: 18, scope: !18596)
!18600 = !DILocation(line: 522, column: 15, scope: !18601)
!18601 = distinct !DILexicalBlock(scope: !18596, file: !1124, line: 522, column: 15)
!18602 = !DILocation(line: 522, column: 22, scope: !18601)
!18603 = !DILocation(line: 522, column: 15, scope: !18596)
!18604 = !DILocation(line: 523, column: 32, scope: !18601)
!18605 = !DILocation(line: 523, column: 13, scope: !18601)
!18606 = !DILocation(line: 525, column: 5, scope: !18581)
!18607 = !DILocation(line: 528, column: 31, scope: !18577)
!18608 = !DILocation(line: 528, column: 35, scope: !18577)
!18609 = !DILocation(line: 528, column: 14, scope: !18577)
!18610 = !DILocation(line: 528, column: 12, scope: !18577)
!18611 = !DILocation(line: 529, column: 12, scope: !18612)
!18612 = distinct !DILexicalBlock(scope: !1123, file: !1124, line: 529, column: 7)
!18613 = !DILocation(line: 529, column: 9, scope: !18612)
!18614 = !DILocation(line: 529, column: 19, scope: !18612)
!18615 = !DILocation(line: 529, column: 22, scope: !18612)
!18616 = !DILocation(line: 529, column: 41, scope: !18612)
!18617 = !DILocation(line: 529, column: 7, scope: !1123)
!18618 = !DILocalVariable(name: "flags", scope: !18619, file: !1124, line: 531, type: !5)
!18619 = distinct !DILexicalBlock(scope: !18612, file: !1124, line: 530, column: 5)
!18620 = !DILocation(line: 531, column: 11, scope: !18619)
!18621 = !DILocation(line: 531, column: 26, scope: !18619)
!18622 = !DILocation(line: 531, column: 19, scope: !18619)
!18623 = !DILocation(line: 532, column: 11, scope: !18624)
!18624 = distinct !DILexicalBlock(scope: !18619, file: !1124, line: 532, column: 11)
!18625 = !DILocation(line: 532, column: 17, scope: !18624)
!18626 = !DILocation(line: 532, column: 21, scope: !18624)
!18627 = !DILocation(line: 532, column: 31, scope: !18624)
!18628 = !DILocation(line: 532, column: 48, scope: !18624)
!18629 = !DILocation(line: 532, column: 54, scope: !18624)
!18630 = !DILocation(line: 532, column: 24, scope: !18624)
!18631 = !DILocation(line: 532, column: 68, scope: !18624)
!18632 = !DILocation(line: 532, column: 11, scope: !18619)
!18633 = !DILocalVariable(name: "saved_errno", scope: !18634, file: !1124, line: 534, type: !5)
!18634 = distinct !DILexicalBlock(scope: !18624, file: !1124, line: 533, column: 9)
!18635 = !DILocation(line: 534, column: 15, scope: !18634)
!18636 = !DILocation(line: 534, column: 29, scope: !18634)
!18637 = !DILocation(line: 535, column: 18, scope: !18634)
!18638 = !DILocation(line: 535, column: 11, scope: !18634)
!18639 = !DILocation(line: 536, column: 19, scope: !18634)
!18640 = !DILocation(line: 536, column: 11, scope: !18634)
!18641 = !DILocation(line: 536, column: 17, scope: !18634)
!18642 = !DILocation(line: 537, column: 18, scope: !18634)
!18643 = !DILocation(line: 538, column: 9, scope: !18634)
!18644 = !DILocation(line: 539, column: 5, scope: !18619)
!18645 = !DILocation(line: 541, column: 10, scope: !1123)
!18646 = !DILocation(line: 541, column: 3, scope: !1123)
!18647 = distinct !DISubprogram(name: "rpl_fflush", scope: !18648, file: !18648, line: 129, type: !18649, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1553, retainedNodes: !433)
!18648 = !DIFile(filename: "lib/fflush.c", directory: "/home/mohamad/clone/coreutils")
!18649 = !DISubroutineType(types: !18650)
!18650 = !{!5, !18651}
!18651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1556, size: 64)
!18652 = !DILocalVariable(name: "stream", arg: 1, scope: !18647, file: !18648, line: 129, type: !18651)
!18653 = !DILocation(line: 129, column: 19, scope: !18647)
!18654 = !DILocation(line: 150, column: 7, scope: !18655)
!18655 = distinct !DILexicalBlock(scope: !18647, file: !18648, line: 150, column: 7)
!18656 = !DILocation(line: 150, column: 14, scope: !18655)
!18657 = !DILocation(line: 150, column: 22, scope: !18655)
!18658 = !DILocation(line: 150, column: 27, scope: !18655)
!18659 = !DILocation(line: 150, column: 7, scope: !18647)
!18660 = !DILocation(line: 151, column: 20, scope: !18655)
!18661 = !DILocation(line: 151, column: 12, scope: !18655)
!18662 = !DILocation(line: 151, column: 5, scope: !18655)
!18663 = !DILocation(line: 156, column: 44, scope: !18647)
!18664 = !DILocation(line: 156, column: 3, scope: !18647)
!18665 = !DILocation(line: 158, column: 18, scope: !18647)
!18666 = !DILocation(line: 158, column: 10, scope: !18647)
!18667 = !DILocation(line: 158, column: 3, scope: !18647)
!18668 = !DILocation(line: 232, column: 1, scope: !18647)
!18669 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !18648, file: !18648, line: 41, type: !18670, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1553, retainedNodes: !433)
!18670 = !DISubroutineType(types: !18671)
!18671 = !{null, !18651}
!18672 = !DILocalVariable(name: "fp", arg: 1, scope: !18669, file: !18648, line: 41, type: !18651)
!18673 = !DILocation(line: 41, column: 48, scope: !18669)
!18674 = !DILocation(line: 43, column: 7, scope: !18675)
!18675 = distinct !DILexicalBlock(scope: !18669, file: !18648, line: 43, column: 7)
!18676 = !DILocation(line: 43, column: 11, scope: !18675)
!18677 = !DILocation(line: 43, column: 18, scope: !18675)
!18678 = !DILocation(line: 43, column: 7, scope: !18669)
!18679 = !DILocation(line: 45, column: 13, scope: !18675)
!18680 = !DILocation(line: 45, column: 5, scope: !18675)
!18681 = !DILocation(line: 46, column: 1, scope: !18669)
!18682 = distinct !DISubprogram(name: "rpl_fseeko", scope: !18683, file: !18683, line: 28, type: !18684, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1595, retainedNodes: !433)
!18683 = !DIFile(filename: "lib/fseeko.c", directory: "/home/mohamad/clone/coreutils")
!18684 = !DISubroutineType(types: !18685)
!18685 = !{!5, !18686, !1637, !5}
!18686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!18687 = !DILocalVariable(name: "fp", arg: 1, scope: !18682, file: !18683, line: 28, type: !18686)
!18688 = !DILocation(line: 28, column: 15, scope: !18682)
!18689 = !DILocalVariable(name: "offset", arg: 2, scope: !18682, file: !18683, line: 28, type: !1637)
!18690 = !DILocation(line: 28, column: 25, scope: !18682)
!18691 = !DILocalVariable(name: "whence", arg: 3, scope: !18682, file: !18683, line: 28, type: !5)
!18692 = !DILocation(line: 28, column: 37, scope: !18682)
!18693 = !DILocation(line: 52, column: 7, scope: !18694)
!18694 = distinct !DILexicalBlock(scope: !18682, file: !18683, line: 52, column: 7)
!18695 = !DILocation(line: 52, column: 11, scope: !18694)
!18696 = !DILocation(line: 52, column: 27, scope: !18694)
!18697 = !DILocation(line: 52, column: 31, scope: !18694)
!18698 = !DILocation(line: 52, column: 24, scope: !18694)
!18699 = !DILocation(line: 53, column: 7, scope: !18694)
!18700 = !DILocation(line: 53, column: 10, scope: !18694)
!18701 = !DILocation(line: 53, column: 14, scope: !18694)
!18702 = !DILocation(line: 53, column: 31, scope: !18694)
!18703 = !DILocation(line: 53, column: 35, scope: !18694)
!18704 = !DILocation(line: 53, column: 28, scope: !18694)
!18705 = !DILocation(line: 54, column: 7, scope: !18694)
!18706 = !DILocation(line: 54, column: 10, scope: !18694)
!18707 = !DILocation(line: 54, column: 14, scope: !18694)
!18708 = !DILocation(line: 54, column: 28, scope: !18694)
!18709 = !DILocation(line: 52, column: 7, scope: !18682)
!18710 = !DILocalVariable(name: "pos", scope: !18711, file: !18683, line: 117, type: !1637)
!18711 = distinct !DILexicalBlock(scope: !18694, file: !18683, line: 113, column: 5)
!18712 = !DILocation(line: 117, column: 13, scope: !18711)
!18713 = !DILocation(line: 117, column: 34, scope: !18711)
!18714 = !DILocation(line: 117, column: 26, scope: !18711)
!18715 = !DILocation(line: 117, column: 39, scope: !18711)
!18716 = !DILocation(line: 117, column: 47, scope: !18711)
!18717 = !DILocation(line: 117, column: 19, scope: !18711)
!18718 = !DILocation(line: 118, column: 11, scope: !18719)
!18719 = distinct !DILexicalBlock(scope: !18711, file: !18683, line: 118, column: 11)
!18720 = !DILocation(line: 118, column: 15, scope: !18719)
!18721 = !DILocation(line: 118, column: 11, scope: !18711)
!18722 = !DILocation(line: 124, column: 11, scope: !18723)
!18723 = distinct !DILexicalBlock(scope: !18719, file: !18683, line: 119, column: 9)
!18724 = !DILocation(line: 129, column: 7, scope: !18711)
!18725 = !DILocation(line: 129, column: 11, scope: !18711)
!18726 = !DILocation(line: 129, column: 18, scope: !18711)
!18727 = !DILocation(line: 130, column: 21, scope: !18711)
!18728 = !DILocation(line: 130, column: 7, scope: !18711)
!18729 = !DILocation(line: 130, column: 11, scope: !18711)
!18730 = !DILocation(line: 130, column: 19, scope: !18711)
!18731 = !DILocation(line: 161, column: 7, scope: !18711)
!18732 = !DILocation(line: 163, column: 18, scope: !18682)
!18733 = !DILocation(line: 163, column: 22, scope: !18682)
!18734 = !DILocation(line: 163, column: 30, scope: !18682)
!18735 = !DILocation(line: 163, column: 10, scope: !18682)
!18736 = !DILocation(line: 163, column: 3, scope: !18682)
!18737 = !DILocation(line: 164, column: 1, scope: !18682)
!18738 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !18739, file: !18739, line: 461, type: !18740, scopeLine: 462, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1638, retainedNodes: !433)
!18739 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/mohamad/clone/coreutils")
!18740 = !DISubroutineType(types: !18741)
!18741 = !{!52, !18742, !90, !52, !18743}
!18742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1094, size: 64)
!18743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18744, size: 64)
!18744 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1084, line: 106, baseType: !18745)
!18745 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1084, line: 94, baseType: !18746)
!18746 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1084, line: 82, size: 64, elements: !18747)
!18747 = !{!18748, !18749}
!18748 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !18746, file: !1084, line: 84, baseType: !5, size: 32)
!18749 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !18746, file: !1084, line: 93, baseType: !18750, size: 32, offset: 32)
!18750 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !18746, file: !1084, line: 85, size: 32, elements: !18751)
!18751 = !{!18752, !18753}
!18752 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !18750, file: !1084, line: 88, baseType: !66, size: 32)
!18753 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !18750, file: !1084, line: 92, baseType: !385, size: 32)
!18754 = !DILocalVariable(name: "pwc", arg: 1, scope: !18738, file: !18739, line: 461, type: !18742)
!18755 = !DILocation(line: 461, column: 23, scope: !18738)
!18756 = !DILocalVariable(name: "s", arg: 2, scope: !18738, file: !18739, line: 461, type: !90)
!18757 = !DILocation(line: 461, column: 40, scope: !18738)
!18758 = !DILocalVariable(name: "n", arg: 3, scope: !18738, file: !18739, line: 461, type: !52)
!18759 = !DILocation(line: 461, column: 50, scope: !18738)
!18760 = !DILocalVariable(name: "ps", arg: 4, scope: !18738, file: !18739, line: 461, type: !18743)
!18761 = !DILocation(line: 461, column: 64, scope: !18738)
!18762 = !DILocalVariable(name: "ret", scope: !18738, file: !18739, line: 463, type: !52)
!18763 = !DILocation(line: 463, column: 10, scope: !18738)
!18764 = !DILocalVariable(name: "wc", scope: !18738, file: !18739, line: 464, type: !1094)
!18765 = !DILocation(line: 464, column: 11, scope: !18738)
!18766 = !DILocation(line: 480, column: 9, scope: !18767)
!18767 = distinct !DILexicalBlock(scope: !18738, file: !18739, line: 480, column: 7)
!18768 = !DILocation(line: 480, column: 7, scope: !18738)
!18769 = !DILocation(line: 481, column: 9, scope: !18767)
!18770 = !DILocation(line: 481, column: 5, scope: !18767)
!18771 = !DILocation(line: 515, column: 18, scope: !18738)
!18772 = !DILocation(line: 515, column: 23, scope: !18738)
!18773 = !DILocation(line: 515, column: 26, scope: !18738)
!18774 = !DILocation(line: 515, column: 29, scope: !18738)
!18775 = !DILocation(line: 515, column: 9, scope: !18738)
!18776 = !DILocation(line: 515, column: 7, scope: !18738)
!18777 = !DILocation(line: 523, column: 22, scope: !18778)
!18778 = distinct !DILexicalBlock(scope: !18738, file: !18739, line: 523, column: 7)
!18779 = !DILocation(line: 523, column: 19, scope: !18778)
!18780 = !DILocation(line: 523, column: 26, scope: !18778)
!18781 = !DILocation(line: 523, column: 29, scope: !18778)
!18782 = !DILocation(line: 523, column: 31, scope: !18778)
!18783 = !DILocation(line: 523, column: 36, scope: !18778)
!18784 = !DILocation(line: 523, column: 41, scope: !18778)
!18785 = !DILocation(line: 523, column: 7, scope: !18738)
!18786 = !DILocalVariable(name: "uc", scope: !18787, file: !18739, line: 525, type: !535)
!18787 = distinct !DILexicalBlock(scope: !18778, file: !18739, line: 524, column: 5)
!18788 = !DILocation(line: 525, column: 21, scope: !18787)
!18789 = !DILocation(line: 525, column: 27, scope: !18787)
!18790 = !DILocation(line: 525, column: 26, scope: !18787)
!18791 = !DILocation(line: 526, column: 14, scope: !18787)
!18792 = !DILocation(line: 526, column: 8, scope: !18787)
!18793 = !DILocation(line: 526, column: 12, scope: !18787)
!18794 = !DILocation(line: 527, column: 7, scope: !18787)
!18795 = !DILocation(line: 531, column: 10, scope: !18738)
!18796 = !DILocation(line: 531, column: 3, scope: !18738)
!18797 = !DILocation(line: 532, column: 1, scope: !18738)
!18798 = distinct !DISubprogram(name: "rpl_nanosleep", scope: !18799, file: !18799, line: 46, type: !18800, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1641, retainedNodes: !433)
!18799 = !DIFile(filename: "lib/nanosleep.c", directory: "/home/mohamad/clone/coreutils")
!18800 = !DISubroutineType(types: !18801)
!18801 = !{!5, !18802, !18808}
!18802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18803, size: 64)
!18803 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18804)
!18804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !506, line: 120, size: 128, elements: !18805)
!18805 = !{!18806, !18807}
!18806 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !18804, file: !506, line: 122, baseType: !509, size: 64)
!18807 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !18804, file: !506, line: 123, baseType: !511, size: 64, offset: 64)
!18808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18804, size: 64)
!18809 = !DILocalVariable(name: "requested_delay", arg: 1, scope: !18798, file: !18799, line: 46, type: !18802)
!18810 = !DILocation(line: 46, column: 35, scope: !18798)
!18811 = !DILocalVariable(name: "remaining_delay", arg: 2, scope: !18798, file: !18799, line: 47, type: !18808)
!18812 = !DILocation(line: 47, column: 29, scope: !18798)
!18813 = !DILocation(line: 56, column: 7, scope: !18814)
!18814 = distinct !DILexicalBlock(scope: !18798, file: !18799, line: 56, column: 7)
!18815 = !DILocation(line: 56, column: 24, scope: !18814)
!18816 = !DILocation(line: 56, column: 32, scope: !18814)
!18817 = !DILocation(line: 56, column: 36, scope: !18814)
!18818 = !DILocation(line: 56, column: 50, scope: !18814)
!18819 = !DILocation(line: 56, column: 67, scope: !18814)
!18820 = !DILocation(line: 56, column: 47, scope: !18814)
!18821 = !DILocation(line: 56, column: 7, scope: !18798)
!18822 = !DILocation(line: 58, column: 7, scope: !18823)
!18823 = distinct !DILexicalBlock(scope: !18814, file: !18799, line: 57, column: 5)
!18824 = !DILocation(line: 58, column: 13, scope: !18823)
!18825 = !DILocation(line: 59, column: 7, scope: !18823)
!18826 = !DILocalVariable(name: "limit", scope: !18827, file: !18799, line: 65, type: !1644)
!18827 = distinct !DILexicalBlock(scope: !18798, file: !18799, line: 62, column: 3)
!18828 = !DILocation(line: 65, column: 18, scope: !18827)
!18829 = !DILocalVariable(name: "seconds", scope: !18827, file: !18799, line: 66, type: !1645)
!18830 = !DILocation(line: 66, column: 12, scope: !18827)
!18831 = !DILocation(line: 66, column: 22, scope: !18827)
!18832 = !DILocation(line: 66, column: 39, scope: !18827)
!18833 = !DILocalVariable(name: "intermediate", scope: !18827, file: !18799, line: 67, type: !18804)
!18834 = !DILocation(line: 67, column: 21, scope: !18827)
!18835 = !DILocation(line: 68, column: 28, scope: !18827)
!18836 = !DILocation(line: 68, column: 45, scope: !18827)
!18837 = !DILocation(line: 68, column: 18, scope: !18827)
!18838 = !DILocation(line: 68, column: 26, scope: !18827)
!18839 = !DILocation(line: 70, column: 5, scope: !18827)
!18840 = !DILocation(line: 70, column: 20, scope: !18827)
!18841 = !DILocation(line: 70, column: 18, scope: !18827)
!18842 = !DILocalVariable(name: "result", scope: !18843, file: !18799, line: 72, type: !5)
!18843 = distinct !DILexicalBlock(scope: !18827, file: !18799, line: 71, column: 7)
!18844 = !DILocation(line: 72, column: 13, scope: !18843)
!18845 = !DILocation(line: 73, column: 22, scope: !18843)
!18846 = !DILocation(line: 73, column: 29, scope: !18843)
!18847 = !DILocation(line: 74, column: 44, scope: !18843)
!18848 = !DILocation(line: 74, column: 18, scope: !18843)
!18849 = !DILocation(line: 74, column: 16, scope: !18843)
!18850 = !DILocation(line: 75, column: 17, scope: !18843)
!18851 = !DILocation(line: 76, column: 13, scope: !18852)
!18852 = distinct !DILexicalBlock(scope: !18843, file: !18799, line: 76, column: 13)
!18853 = !DILocation(line: 76, column: 13, scope: !18843)
!18854 = !DILocation(line: 78, column: 17, scope: !18855)
!18855 = distinct !DILexicalBlock(scope: !18856, file: !18799, line: 78, column: 17)
!18856 = distinct !DILexicalBlock(scope: !18852, file: !18799, line: 77, column: 11)
!18857 = !DILocation(line: 78, column: 17, scope: !18856)
!18858 = !DILocation(line: 79, column: 42, scope: !18855)
!18859 = !DILocation(line: 79, column: 15, scope: !18855)
!18860 = !DILocation(line: 79, column: 32, scope: !18855)
!18861 = !DILocation(line: 79, column: 39, scope: !18855)
!18862 = !DILocation(line: 80, column: 20, scope: !18856)
!18863 = !DILocation(line: 80, column: 13, scope: !18856)
!18864 = !DILocation(line: 82, column: 22, scope: !18843)
!18865 = !DILocation(line: 82, column: 30, scope: !18843)
!18866 = distinct !{!18866, !18839, !18867}
!18867 = !DILocation(line: 83, column: 7, scope: !18827)
!18868 = !DILocation(line: 84, column: 27, scope: !18827)
!18869 = !DILocation(line: 84, column: 18, scope: !18827)
!18870 = !DILocation(line: 84, column: 25, scope: !18827)
!18871 = !DILocation(line: 85, column: 38, scope: !18827)
!18872 = !DILocation(line: 85, column: 12, scope: !18827)
!18873 = !DILocation(line: 85, column: 5, scope: !18827)
!18874 = !DILocation(line: 87, column: 1, scope: !18798)
!18875 = distinct !DISubprogram(name: "rpl_nl_langinfo", scope: !18876, file: !18876, line: 99, type: !18877, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1646, retainedNodes: !433)
!18876 = !DIFile(filename: "lib/nl_langinfo.c", directory: "/home/mohamad/clone/coreutils")
!18877 = !DISubroutineType(types: !18878)
!18878 = !{!7, !18879}
!18879 = !DIDerivedType(tag: DW_TAG_typedef, name: "nl_item", file: !18880, line: 36, baseType: !5)
!18880 = !DIFile(filename: "/usr/include/nl_types.h", directory: "")
!18881 = !DILocalVariable(name: "item", arg: 1, scope: !18875, file: !18876, line: 99, type: !18879)
!18882 = !DILocation(line: 99, column: 26, scope: !18875)
!18883 = !DILocation(line: 101, column: 11, scope: !18875)
!18884 = !DILocation(line: 101, column: 3, scope: !18875)
!18885 = !DILocation(line: 126, column: 14, scope: !18886)
!18886 = distinct !DILexicalBlock(scope: !18875, file: !18876, line: 102, column: 5)
!18887 = !DILocation(line: 126, column: 19, scope: !18886)
!18888 = !DILocation(line: 126, column: 30, scope: !18886)
!18889 = !DILocation(line: 126, column: 12, scope: !18886)
!18890 = !DILocation(line: 127, column: 7, scope: !18886)
!18891 = !DILocation(line: 162, column: 7, scope: !18886)
!18892 = !DILocation(line: 164, column: 23, scope: !18875)
!18893 = !DILocation(line: 164, column: 10, scope: !18875)
!18894 = !DILocation(line: 164, column: 3, scope: !18875)
!18895 = distinct !DISubprogram(name: "print_and_abort", scope: !1228, file: !1228, line: 330, type: !235, scopeLine: 331, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!18896 = !DILocation(line: 340, column: 12, scope: !18895)
!18897 = !DILocation(line: 340, column: 28, scope: !18895)
!18898 = !DILocation(line: 340, column: 3, scope: !18895)
!18899 = !DILocation(line: 342, column: 9, scope: !18895)
!18900 = !DILocation(line: 342, column: 3, scope: !18895)
!18901 = distinct !DISubprogram(name: "_obstack_begin", scope: !1228, file: !1228, line: 150, type: !18902, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!18902 = !DISubroutineType(types: !18903)
!18903 = !{!5, !18904, !52, !52, !1182, !979}
!18904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1148, size: 64)
!18905 = !DILocalVariable(name: "h", arg: 1, scope: !18901, file: !1228, line: 150, type: !18904)
!18906 = !DILocation(line: 150, column: 33, scope: !18901)
!18907 = !DILocalVariable(name: "size", arg: 2, scope: !18901, file: !1228, line: 151, type: !52)
!18908 = !DILocation(line: 151, column: 33, scope: !18901)
!18909 = !DILocalVariable(name: "alignment", arg: 3, scope: !18901, file: !1228, line: 151, type: !52)
!18910 = !DILocation(line: 151, column: 55, scope: !18901)
!18911 = !DILocalVariable(name: "chunkfun", arg: 4, scope: !18901, file: !1228, line: 152, type: !1182)
!18912 = !DILocation(line: 152, column: 25, scope: !18901)
!18913 = !DILocalVariable(name: "freefun", arg: 5, scope: !18901, file: !1228, line: 153, type: !979)
!18914 = !DILocation(line: 153, column: 24, scope: !18901)
!18915 = !DILocation(line: 155, column: 23, scope: !18901)
!18916 = !DILocation(line: 155, column: 3, scope: !18901)
!18917 = !DILocation(line: 155, column: 6, scope: !18901)
!18918 = !DILocation(line: 155, column: 15, scope: !18901)
!18919 = !DILocation(line: 155, column: 21, scope: !18901)
!18920 = !DILocation(line: 156, column: 22, scope: !18901)
!18921 = !DILocation(line: 156, column: 3, scope: !18901)
!18922 = !DILocation(line: 156, column: 6, scope: !18901)
!18923 = !DILocation(line: 156, column: 14, scope: !18901)
!18924 = !DILocation(line: 156, column: 20, scope: !18901)
!18925 = !DILocation(line: 157, column: 3, scope: !18901)
!18926 = !DILocation(line: 157, column: 6, scope: !18901)
!18927 = !DILocation(line: 157, column: 20, scope: !18901)
!18928 = !DILocation(line: 158, column: 33, scope: !18901)
!18929 = !DILocation(line: 158, column: 36, scope: !18901)
!18930 = !DILocation(line: 158, column: 42, scope: !18901)
!18931 = !DILocation(line: 158, column: 10, scope: !18901)
!18932 = !DILocation(line: 158, column: 3, scope: !18901)
!18933 = distinct !DISubprogram(name: "_obstack_begin_worker", scope: !1228, file: !1228, line: 109, type: !18934, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!18934 = !DISubroutineType(types: !18935)
!18935 = !{!5, !18904, !52, !52}
!18936 = !DILocalVariable(name: "h", arg: 1, scope: !18933, file: !1228, line: 109, type: !18904)
!18937 = !DILocation(line: 109, column: 40, scope: !18933)
!18938 = !DILocalVariable(name: "size", arg: 2, scope: !18933, file: !1228, line: 110, type: !52)
!18939 = !DILocation(line: 110, column: 40, scope: !18933)
!18940 = !DILocalVariable(name: "alignment", arg: 3, scope: !18933, file: !1228, line: 110, type: !52)
!18941 = !DILocation(line: 110, column: 62, scope: !18933)
!18942 = !DILocalVariable(name: "chunk", scope: !18933, file: !1228, line: 112, type: !1152)
!18943 = !DILocation(line: 112, column: 26, scope: !18933)
!18944 = !DILocation(line: 114, column: 7, scope: !18945)
!18945 = distinct !DILexicalBlock(scope: !18933, file: !1228, line: 114, column: 7)
!18946 = !DILocation(line: 114, column: 17, scope: !18945)
!18947 = !DILocation(line: 114, column: 7, scope: !18933)
!18948 = !DILocation(line: 115, column: 15, scope: !18945)
!18949 = !DILocation(line: 115, column: 5, scope: !18945)
!18950 = !DILocation(line: 116, column: 7, scope: !18951)
!18951 = distinct !DILexicalBlock(scope: !18933, file: !1228, line: 116, column: 7)
!18952 = !DILocation(line: 116, column: 12, scope: !18951)
!18953 = !DILocation(line: 116, column: 7, scope: !18933)
!18954 = !DILocalVariable(name: "extra", scope: !18955, file: !1228, line: 127, type: !5)
!18955 = distinct !DILexicalBlock(scope: !18951, file: !1228, line: 118, column: 5)
!18956 = !DILocation(line: 127, column: 11, scope: !18955)
!18957 = !DILocation(line: 130, column: 21, scope: !18955)
!18958 = !DILocation(line: 130, column: 19, scope: !18955)
!18959 = !DILocation(line: 130, column: 14, scope: !18955)
!18960 = !DILocation(line: 130, column: 12, scope: !18955)
!18961 = !DILocation(line: 131, column: 5, scope: !18955)
!18962 = !DILocation(line: 133, column: 19, scope: !18933)
!18963 = !DILocation(line: 133, column: 3, scope: !18933)
!18964 = !DILocation(line: 133, column: 6, scope: !18933)
!18965 = !DILocation(line: 133, column: 17, scope: !18933)
!18966 = !DILocation(line: 134, column: 23, scope: !18933)
!18967 = !DILocation(line: 134, column: 33, scope: !18933)
!18968 = !DILocation(line: 134, column: 3, scope: !18933)
!18969 = !DILocation(line: 134, column: 6, scope: !18933)
!18970 = !DILocation(line: 134, column: 21, scope: !18933)
!18971 = !DILocation(line: 136, column: 37, scope: !18933)
!18972 = !DILocation(line: 136, column: 40, scope: !18933)
!18973 = !DILocation(line: 136, column: 43, scope: !18933)
!18974 = !DILocation(line: 136, column: 22, scope: !18933)
!18975 = !DILocation(line: 136, column: 11, scope: !18933)
!18976 = !DILocation(line: 136, column: 14, scope: !18933)
!18977 = !DILocation(line: 136, column: 20, scope: !18933)
!18978 = !DILocation(line: 136, column: 9, scope: !18933)
!18979 = !DILocation(line: 137, column: 8, scope: !18980)
!18980 = distinct !DILexicalBlock(scope: !18933, file: !1228, line: 137, column: 7)
!18981 = !DILocation(line: 137, column: 7, scope: !18933)
!18982 = !DILocation(line: 138, column: 7, scope: !18980)
!18983 = !DILocation(line: 138, column: 5, scope: !18980)
!18984 = !DILocation(line: 139, column: 35, scope: !18933)
!18985 = !DILocation(line: 139, column: 18, scope: !18933)
!18986 = !DILocation(line: 139, column: 21, scope: !18933)
!18987 = !DILocation(line: 139, column: 33, scope: !18933)
!18988 = !DILocation(line: 139, column: 3, scope: !18933)
!18989 = !DILocation(line: 139, column: 6, scope: !18933)
!18990 = !DILocation(line: 139, column: 16, scope: !18933)
!18991 = !DILocation(line: 141, column: 44, scope: !18933)
!18992 = !DILocation(line: 141, column: 35, scope: !18933)
!18993 = !DILocation(line: 141, column: 52, scope: !18933)
!18994 = !DILocation(line: 141, column: 55, scope: !18933)
!18995 = !DILocation(line: 141, column: 50, scope: !18933)
!18996 = !DILocation(line: 141, column: 20, scope: !18933)
!18997 = !DILocation(line: 141, column: 27, scope: !18933)
!18998 = !DILocation(line: 141, column: 33, scope: !18933)
!18999 = !DILocation(line: 141, column: 3, scope: !18933)
!19000 = !DILocation(line: 141, column: 6, scope: !18933)
!19001 = !DILocation(line: 141, column: 18, scope: !18933)
!19002 = !DILocation(line: 142, column: 3, scope: !18933)
!19003 = !DILocation(line: 142, column: 10, scope: !18933)
!19004 = !DILocation(line: 142, column: 15, scope: !18933)
!19005 = !DILocation(line: 144, column: 3, scope: !18933)
!19006 = !DILocation(line: 144, column: 6, scope: !18933)
!19007 = !DILocation(line: 144, column: 25, scope: !18933)
!19008 = !DILocation(line: 145, column: 3, scope: !18933)
!19009 = !DILocation(line: 145, column: 6, scope: !18933)
!19010 = !DILocation(line: 145, column: 19, scope: !18933)
!19011 = !DILocation(line: 146, column: 3, scope: !18933)
!19012 = distinct !DISubprogram(name: "call_chunkfun", scope: !1228, file: !1228, line: 84, type: !19013, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19013 = !DISubroutineType(types: !19014)
!19014 = !{!47, !18904, !52}
!19015 = !DILocalVariable(name: "h", arg: 1, scope: !19012, file: !1228, line: 84, type: !18904)
!19016 = !DILocation(line: 84, column: 32, scope: !19012)
!19017 = !DILocalVariable(name: "size", arg: 2, scope: !19012, file: !1228, line: 84, type: !52)
!19018 = !DILocation(line: 84, column: 42, scope: !19012)
!19019 = !DILocation(line: 86, column: 7, scope: !19020)
!19020 = distinct !DILexicalBlock(scope: !19012, file: !1228, line: 86, column: 7)
!19021 = !DILocation(line: 86, column: 10, scope: !19020)
!19022 = !DILocation(line: 86, column: 7, scope: !19012)
!19023 = !DILocation(line: 87, column: 12, scope: !19020)
!19024 = !DILocation(line: 87, column: 15, scope: !19020)
!19025 = !DILocation(line: 87, column: 24, scope: !19020)
!19026 = !DILocation(line: 87, column: 31, scope: !19020)
!19027 = !DILocation(line: 87, column: 34, scope: !19020)
!19028 = !DILocation(line: 87, column: 45, scope: !19020)
!19029 = !DILocation(line: 87, column: 5, scope: !19020)
!19030 = !DILocation(line: 89, column: 12, scope: !19020)
!19031 = !DILocation(line: 89, column: 15, scope: !19020)
!19032 = !DILocation(line: 89, column: 24, scope: !19020)
!19033 = !DILocation(line: 89, column: 31, scope: !19020)
!19034 = !DILocation(line: 89, column: 5, scope: !19020)
!19035 = !DILocation(line: 90, column: 1, scope: !19012)
!19036 = distinct !DISubprogram(name: "_obstack_begin_1", scope: !1228, file: !1228, line: 162, type: !19037, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19037 = !DISubroutineType(types: !19038)
!19038 = !{!5, !18904, !52, !52, !1186, !1173, !47}
!19039 = !DILocalVariable(name: "h", arg: 1, scope: !19036, file: !1228, line: 162, type: !18904)
!19040 = !DILocation(line: 162, column: 35, scope: !19036)
!19041 = !DILocalVariable(name: "size", arg: 2, scope: !19036, file: !1228, line: 163, type: !52)
!19042 = !DILocation(line: 163, column: 35, scope: !19036)
!19043 = !DILocalVariable(name: "alignment", arg: 3, scope: !19036, file: !1228, line: 163, type: !52)
!19044 = !DILocation(line: 163, column: 57, scope: !19036)
!19045 = !DILocalVariable(name: "chunkfun", arg: 4, scope: !19036, file: !1228, line: 164, type: !1186)
!19046 = !DILocation(line: 164, column: 27, scope: !19036)
!19047 = !DILocalVariable(name: "freefun", arg: 5, scope: !19036, file: !1228, line: 165, type: !1173)
!19048 = !DILocation(line: 165, column: 26, scope: !19036)
!19049 = !DILocalVariable(name: "arg", arg: 6, scope: !19036, file: !1228, line: 166, type: !47)
!19050 = !DILocation(line: 166, column: 25, scope: !19036)
!19051 = !DILocation(line: 168, column: 23, scope: !19036)
!19052 = !DILocation(line: 168, column: 3, scope: !19036)
!19053 = !DILocation(line: 168, column: 6, scope: !19036)
!19054 = !DILocation(line: 168, column: 15, scope: !19036)
!19055 = !DILocation(line: 168, column: 21, scope: !19036)
!19056 = !DILocation(line: 169, column: 22, scope: !19036)
!19057 = !DILocation(line: 169, column: 3, scope: !19036)
!19058 = !DILocation(line: 169, column: 6, scope: !19036)
!19059 = !DILocation(line: 169, column: 14, scope: !19036)
!19060 = !DILocation(line: 169, column: 20, scope: !19036)
!19061 = !DILocation(line: 170, column: 18, scope: !19036)
!19062 = !DILocation(line: 170, column: 3, scope: !19036)
!19063 = !DILocation(line: 170, column: 6, scope: !19036)
!19064 = !DILocation(line: 170, column: 16, scope: !19036)
!19065 = !DILocation(line: 171, column: 3, scope: !19036)
!19066 = !DILocation(line: 171, column: 6, scope: !19036)
!19067 = !DILocation(line: 171, column: 20, scope: !19036)
!19068 = !DILocation(line: 172, column: 33, scope: !19036)
!19069 = !DILocation(line: 172, column: 36, scope: !19036)
!19070 = !DILocation(line: 172, column: 42, scope: !19036)
!19071 = !DILocation(line: 172, column: 10, scope: !19036)
!19072 = !DILocation(line: 172, column: 3, scope: !19036)
!19073 = distinct !DISubprogram(name: "_obstack_newchunk", scope: !1228, file: !1228, line: 182, type: !19074, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19074 = !DISubroutineType(types: !19075)
!19075 = !{null, !18904, !52}
!19076 = !DILocalVariable(name: "h", arg: 1, scope: !19073, file: !1228, line: 182, type: !18904)
!19077 = !DILocation(line: 182, column: 36, scope: !19073)
!19078 = !DILocalVariable(name: "length", arg: 2, scope: !19073, file: !1228, line: 182, type: !52)
!19079 = !DILocation(line: 182, column: 55, scope: !19073)
!19080 = !DILocalVariable(name: "old_chunk", scope: !19073, file: !1228, line: 184, type: !1152)
!19081 = !DILocation(line: 184, column: 26, scope: !19073)
!19082 = !DILocation(line: 184, column: 38, scope: !19073)
!19083 = !DILocation(line: 184, column: 41, scope: !19073)
!19084 = !DILocalVariable(name: "new_chunk", scope: !19073, file: !1228, line: 185, type: !1152)
!19085 = !DILocation(line: 185, column: 26, scope: !19073)
!19086 = !DILocalVariable(name: "obj_size", scope: !19073, file: !1228, line: 186, type: !52)
!19087 = !DILocation(line: 186, column: 10, scope: !19073)
!19088 = !DILocation(line: 186, column: 21, scope: !19073)
!19089 = !DILocation(line: 186, column: 24, scope: !19073)
!19090 = !DILocation(line: 186, column: 36, scope: !19073)
!19091 = !DILocation(line: 186, column: 39, scope: !19073)
!19092 = !DILocation(line: 186, column: 34, scope: !19073)
!19093 = !DILocalVariable(name: "object_base", scope: !19073, file: !1228, line: 187, type: !7)
!19094 = !DILocation(line: 187, column: 9, scope: !19073)
!19095 = !DILocalVariable(name: "sum1", scope: !19073, file: !1228, line: 190, type: !52)
!19096 = !DILocation(line: 190, column: 10, scope: !19073)
!19097 = !DILocation(line: 190, column: 17, scope: !19073)
!19098 = !DILocation(line: 190, column: 28, scope: !19073)
!19099 = !DILocation(line: 190, column: 26, scope: !19073)
!19100 = !DILocalVariable(name: "sum2", scope: !19073, file: !1228, line: 191, type: !52)
!19101 = !DILocation(line: 191, column: 10, scope: !19073)
!19102 = !DILocation(line: 191, column: 17, scope: !19073)
!19103 = !DILocation(line: 191, column: 24, scope: !19073)
!19104 = !DILocation(line: 191, column: 27, scope: !19073)
!19105 = !DILocation(line: 191, column: 22, scope: !19073)
!19106 = !DILocalVariable(name: "new_size", scope: !19073, file: !1228, line: 192, type: !52)
!19107 = !DILocation(line: 192, column: 10, scope: !19073)
!19108 = !DILocation(line: 192, column: 21, scope: !19073)
!19109 = !DILocation(line: 192, column: 29, scope: !19073)
!19110 = !DILocation(line: 192, column: 38, scope: !19073)
!19111 = !DILocation(line: 192, column: 26, scope: !19073)
!19112 = !DILocation(line: 192, column: 44, scope: !19073)
!19113 = !DILocation(line: 193, column: 7, scope: !19114)
!19114 = distinct !DILexicalBlock(scope: !19073, file: !1228, line: 193, column: 7)
!19115 = !DILocation(line: 193, column: 18, scope: !19114)
!19116 = !DILocation(line: 193, column: 16, scope: !19114)
!19117 = !DILocation(line: 193, column: 7, scope: !19073)
!19118 = !DILocation(line: 194, column: 16, scope: !19114)
!19119 = !DILocation(line: 194, column: 14, scope: !19114)
!19120 = !DILocation(line: 194, column: 5, scope: !19114)
!19121 = !DILocation(line: 195, column: 7, scope: !19122)
!19122 = distinct !DILexicalBlock(scope: !19073, file: !1228, line: 195, column: 7)
!19123 = !DILocation(line: 195, column: 18, scope: !19122)
!19124 = !DILocation(line: 195, column: 21, scope: !19122)
!19125 = !DILocation(line: 195, column: 16, scope: !19122)
!19126 = !DILocation(line: 195, column: 7, scope: !19073)
!19127 = !DILocation(line: 196, column: 16, scope: !19122)
!19128 = !DILocation(line: 196, column: 19, scope: !19122)
!19129 = !DILocation(line: 196, column: 14, scope: !19122)
!19130 = !DILocation(line: 196, column: 5, scope: !19122)
!19131 = !DILocation(line: 199, column: 7, scope: !19132)
!19132 = distinct !DILexicalBlock(scope: !19073, file: !1228, line: 199, column: 7)
!19133 = !DILocation(line: 199, column: 19, scope: !19132)
!19134 = !DILocation(line: 199, column: 16, scope: !19132)
!19135 = !DILocation(line: 199, column: 24, scope: !19132)
!19136 = !DILocation(line: 199, column: 27, scope: !19132)
!19137 = !DILocation(line: 199, column: 35, scope: !19132)
!19138 = !DILocation(line: 199, column: 32, scope: !19132)
!19139 = !DILocation(line: 199, column: 7, scope: !19073)
!19140 = !DILocation(line: 200, column: 32, scope: !19132)
!19141 = !DILocation(line: 200, column: 35, scope: !19132)
!19142 = !DILocation(line: 200, column: 17, scope: !19132)
!19143 = !DILocation(line: 200, column: 15, scope: !19132)
!19144 = !DILocation(line: 200, column: 5, scope: !19132)
!19145 = !DILocation(line: 201, column: 8, scope: !19146)
!19146 = distinct !DILexicalBlock(scope: !19073, file: !1228, line: 201, column: 7)
!19147 = !DILocation(line: 201, column: 7, scope: !19073)
!19148 = !DILocation(line: 202, column: 7, scope: !19146)
!19149 = !DILocation(line: 202, column: 5, scope: !19146)
!19150 = !DILocation(line: 203, column: 14, scope: !19073)
!19151 = !DILocation(line: 203, column: 3, scope: !19073)
!19152 = !DILocation(line: 203, column: 6, scope: !19073)
!19153 = !DILocation(line: 203, column: 12, scope: !19073)
!19154 = !DILocation(line: 204, column: 21, scope: !19073)
!19155 = !DILocation(line: 204, column: 3, scope: !19073)
!19156 = !DILocation(line: 204, column: 14, scope: !19073)
!19157 = !DILocation(line: 204, column: 19, scope: !19073)
!19158 = !DILocation(line: 205, column: 48, scope: !19073)
!19159 = !DILocation(line: 205, column: 39, scope: !19073)
!19160 = !DILocation(line: 205, column: 60, scope: !19073)
!19161 = !DILocation(line: 205, column: 58, scope: !19073)
!19162 = !DILocation(line: 205, column: 22, scope: !19073)
!19163 = !DILocation(line: 205, column: 25, scope: !19073)
!19164 = !DILocation(line: 205, column: 37, scope: !19073)
!19165 = !DILocation(line: 205, column: 3, scope: !19073)
!19166 = !DILocation(line: 205, column: 14, scope: !19073)
!19167 = !DILocation(line: 205, column: 20, scope: !19073)
!19168 = !DILocation(line: 209, column: 5, scope: !19073)
!19169 = !DILocation(line: 208, column: 15, scope: !19073)
!19170 = !DILocation(line: 212, column: 11, scope: !19073)
!19171 = !DILocation(line: 212, column: 24, scope: !19073)
!19172 = !DILocation(line: 212, column: 27, scope: !19073)
!19173 = !DILocation(line: 212, column: 40, scope: !19073)
!19174 = !DILocation(line: 212, column: 3, scope: !19073)
!19175 = !DILocation(line: 217, column: 8, scope: !19176)
!19176 = distinct !DILexicalBlock(scope: !19073, file: !1228, line: 217, column: 7)
!19177 = !DILocation(line: 217, column: 11, scope: !19176)
!19178 = !DILocation(line: 218, column: 7, scope: !19176)
!19179 = !DILocation(line: 218, column: 11, scope: !19176)
!19180 = !DILocation(line: 218, column: 14, scope: !19176)
!19181 = !DILocation(line: 219, column: 14, scope: !19176)
!19182 = !DILocation(line: 219, column: 11, scope: !19176)
!19183 = !DILocation(line: 217, column: 7, scope: !19073)
!19184 = !DILocation(line: 222, column: 25, scope: !19185)
!19185 = distinct !DILexicalBlock(scope: !19176, file: !1228, line: 221, column: 5)
!19186 = !DILocation(line: 222, column: 36, scope: !19185)
!19187 = !DILocation(line: 222, column: 7, scope: !19185)
!19188 = !DILocation(line: 222, column: 18, scope: !19185)
!19189 = !DILocation(line: 222, column: 23, scope: !19185)
!19190 = !DILocation(line: 223, column: 21, scope: !19185)
!19191 = !DILocation(line: 223, column: 24, scope: !19185)
!19192 = !DILocation(line: 223, column: 7, scope: !19185)
!19193 = !DILocation(line: 224, column: 5, scope: !19185)
!19194 = !DILocation(line: 226, column: 20, scope: !19073)
!19195 = !DILocation(line: 226, column: 3, scope: !19073)
!19196 = !DILocation(line: 226, column: 6, scope: !19073)
!19197 = !DILocation(line: 226, column: 18, scope: !19073)
!19198 = !DILocation(line: 227, column: 18, scope: !19073)
!19199 = !DILocation(line: 227, column: 21, scope: !19073)
!19200 = !DILocation(line: 227, column: 35, scope: !19073)
!19201 = !DILocation(line: 227, column: 33, scope: !19073)
!19202 = !DILocation(line: 227, column: 3, scope: !19073)
!19203 = !DILocation(line: 227, column: 6, scope: !19073)
!19204 = !DILocation(line: 227, column: 16, scope: !19073)
!19205 = !DILocation(line: 229, column: 3, scope: !19073)
!19206 = !DILocation(line: 229, column: 6, scope: !19073)
!19207 = !DILocation(line: 229, column: 25, scope: !19073)
!19208 = !DILocation(line: 230, column: 1, scope: !19073)
!19209 = distinct !DISubprogram(name: "call_freefun", scope: !1228, file: !1228, line: 93, type: !19210, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19210 = !DISubroutineType(types: !19211)
!19211 = !{null, !18904, !47}
!19212 = !DILocalVariable(name: "h", arg: 1, scope: !19209, file: !1228, line: 93, type: !18904)
!19213 = !DILocation(line: 93, column: 31, scope: !19209)
!19214 = !DILocalVariable(name: "old_chunk", arg: 2, scope: !19209, file: !1228, line: 93, type: !47)
!19215 = !DILocation(line: 93, column: 40, scope: !19209)
!19216 = !DILocation(line: 95, column: 7, scope: !19217)
!19217 = distinct !DILexicalBlock(scope: !19209, file: !1228, line: 95, column: 7)
!19218 = !DILocation(line: 95, column: 10, scope: !19217)
!19219 = !DILocation(line: 95, column: 7, scope: !19209)
!19220 = !DILocation(line: 96, column: 5, scope: !19217)
!19221 = !DILocation(line: 96, column: 8, scope: !19217)
!19222 = !DILocation(line: 96, column: 16, scope: !19217)
!19223 = !DILocation(line: 96, column: 23, scope: !19217)
!19224 = !DILocation(line: 96, column: 26, scope: !19217)
!19225 = !DILocation(line: 96, column: 37, scope: !19217)
!19226 = !DILocation(line: 98, column: 5, scope: !19217)
!19227 = !DILocation(line: 98, column: 8, scope: !19217)
!19228 = !DILocation(line: 98, column: 16, scope: !19217)
!19229 = !DILocation(line: 98, column: 23, scope: !19217)
!19230 = !DILocation(line: 99, column: 1, scope: !19209)
!19231 = distinct !DISubprogram(name: "_obstack_allocated_p", scope: !1228, file: !1228, line: 241, type: !19232, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19232 = !DISubroutineType(types: !19233)
!19233 = !{!5, !18904, !47}
!19234 = !DILocalVariable(name: "h", arg: 1, scope: !19231, file: !1228, line: 241, type: !18904)
!19235 = !DILocation(line: 241, column: 39, scope: !19231)
!19236 = !DILocalVariable(name: "obj", arg: 2, scope: !19231, file: !1228, line: 241, type: !47)
!19237 = !DILocation(line: 241, column: 48, scope: !19231)
!19238 = !DILocalVariable(name: "lp", scope: !19231, file: !1228, line: 243, type: !1152)
!19239 = !DILocation(line: 243, column: 26, scope: !19231)
!19240 = !DILocalVariable(name: "plp", scope: !19231, file: !1228, line: 244, type: !1152)
!19241 = !DILocation(line: 244, column: 26, scope: !19231)
!19242 = !DILocation(line: 246, column: 9, scope: !19231)
!19243 = !DILocation(line: 246, column: 13, scope: !19231)
!19244 = !DILocation(line: 246, column: 6, scope: !19231)
!19245 = !DILocation(line: 250, column: 3, scope: !19231)
!19246 = !DILocation(line: 250, column: 10, scope: !19231)
!19247 = !DILocation(line: 250, column: 13, scope: !19231)
!19248 = !DILocation(line: 250, column: 18, scope: !19231)
!19249 = !DILocation(line: 250, column: 31, scope: !19231)
!19250 = !DILocation(line: 250, column: 22, scope: !19231)
!19251 = !DILocation(line: 250, column: 37, scope: !19231)
!19252 = !DILocation(line: 250, column: 34, scope: !19231)
!19253 = !DILocation(line: 250, column: 41, scope: !19231)
!19254 = !DILocation(line: 250, column: 54, scope: !19231)
!19255 = !DILocation(line: 250, column: 59, scope: !19231)
!19256 = !DILocation(line: 250, column: 67, scope: !19231)
!19257 = !DILocation(line: 250, column: 65, scope: !19231)
!19258 = !DILocation(line: 0, scope: !19231)
!19259 = !DILocation(line: 252, column: 13, scope: !19260)
!19260 = distinct !DILexicalBlock(scope: !19231, file: !1228, line: 251, column: 5)
!19261 = !DILocation(line: 252, column: 17, scope: !19260)
!19262 = !DILocation(line: 252, column: 11, scope: !19260)
!19263 = !DILocation(line: 253, column: 12, scope: !19260)
!19264 = !DILocation(line: 253, column: 10, scope: !19260)
!19265 = distinct !{!19265, !19245, !19266}
!19266 = !DILocation(line: 254, column: 5, scope: !19231)
!19267 = !DILocation(line: 255, column: 10, scope: !19231)
!19268 = !DILocation(line: 255, column: 13, scope: !19231)
!19269 = !DILocation(line: 255, column: 3, scope: !19231)
!19270 = distinct !DISubprogram(name: "_obstack_free", scope: !1228, file: !1228, line: 262, type: !19210, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19271 = !DILocalVariable(name: "h", arg: 1, scope: !19270, file: !1228, line: 262, type: !18904)
!19272 = !DILocation(line: 262, column: 32, scope: !19270)
!19273 = !DILocalVariable(name: "obj", arg: 2, scope: !19270, file: !1228, line: 262, type: !47)
!19274 = !DILocation(line: 262, column: 41, scope: !19270)
!19275 = !DILocalVariable(name: "lp", scope: !19270, file: !1228, line: 264, type: !1152)
!19276 = !DILocation(line: 264, column: 26, scope: !19270)
!19277 = !DILocalVariable(name: "plp", scope: !19270, file: !1228, line: 265, type: !1152)
!19278 = !DILocation(line: 265, column: 26, scope: !19270)
!19279 = !DILocation(line: 267, column: 8, scope: !19270)
!19280 = !DILocation(line: 267, column: 11, scope: !19270)
!19281 = !DILocation(line: 267, column: 6, scope: !19270)
!19282 = !DILocation(line: 271, column: 3, scope: !19270)
!19283 = !DILocation(line: 271, column: 10, scope: !19270)
!19284 = !DILocation(line: 271, column: 13, scope: !19270)
!19285 = !DILocation(line: 271, column: 18, scope: !19270)
!19286 = !DILocation(line: 271, column: 31, scope: !19270)
!19287 = !DILocation(line: 271, column: 22, scope: !19270)
!19288 = !DILocation(line: 271, column: 37, scope: !19270)
!19289 = !DILocation(line: 271, column: 34, scope: !19270)
!19290 = !DILocation(line: 271, column: 41, scope: !19270)
!19291 = !DILocation(line: 271, column: 54, scope: !19270)
!19292 = !DILocation(line: 271, column: 59, scope: !19270)
!19293 = !DILocation(line: 271, column: 67, scope: !19270)
!19294 = !DILocation(line: 271, column: 65, scope: !19270)
!19295 = !DILocation(line: 0, scope: !19270)
!19296 = !DILocation(line: 273, column: 13, scope: !19297)
!19297 = distinct !DILexicalBlock(scope: !19270, file: !1228, line: 272, column: 5)
!19298 = !DILocation(line: 273, column: 17, scope: !19297)
!19299 = !DILocation(line: 273, column: 11, scope: !19297)
!19300 = !DILocation(line: 274, column: 21, scope: !19297)
!19301 = !DILocation(line: 274, column: 24, scope: !19297)
!19302 = !DILocation(line: 274, column: 7, scope: !19297)
!19303 = !DILocation(line: 275, column: 12, scope: !19297)
!19304 = !DILocation(line: 275, column: 10, scope: !19297)
!19305 = !DILocation(line: 278, column: 7, scope: !19297)
!19306 = !DILocation(line: 278, column: 10, scope: !19297)
!19307 = !DILocation(line: 278, column: 29, scope: !19297)
!19308 = distinct !{!19308, !19282, !19309}
!19309 = !DILocation(line: 279, column: 5, scope: !19270)
!19310 = !DILocation(line: 280, column: 7, scope: !19311)
!19311 = distinct !DILexicalBlock(scope: !19270, file: !1228, line: 280, column: 7)
!19312 = !DILocation(line: 280, column: 7, scope: !19270)
!19313 = !DILocation(line: 282, column: 49, scope: !19314)
!19314 = distinct !DILexicalBlock(scope: !19311, file: !1228, line: 281, column: 5)
!19315 = !DILocation(line: 282, column: 24, scope: !19314)
!19316 = !DILocation(line: 282, column: 27, scope: !19314)
!19317 = !DILocation(line: 282, column: 37, scope: !19314)
!19318 = !DILocation(line: 282, column: 7, scope: !19314)
!19319 = !DILocation(line: 282, column: 10, scope: !19314)
!19320 = !DILocation(line: 282, column: 22, scope: !19314)
!19321 = !DILocation(line: 283, column: 24, scope: !19314)
!19322 = !DILocation(line: 283, column: 28, scope: !19314)
!19323 = !DILocation(line: 283, column: 7, scope: !19314)
!19324 = !DILocation(line: 283, column: 10, scope: !19314)
!19325 = !DILocation(line: 283, column: 22, scope: !19314)
!19326 = !DILocation(line: 284, column: 18, scope: !19314)
!19327 = !DILocation(line: 284, column: 7, scope: !19314)
!19328 = !DILocation(line: 284, column: 10, scope: !19314)
!19329 = !DILocation(line: 284, column: 16, scope: !19314)
!19330 = !DILocation(line: 285, column: 5, scope: !19314)
!19331 = !DILocation(line: 286, column: 12, scope: !19332)
!19332 = distinct !DILexicalBlock(scope: !19311, file: !1228, line: 286, column: 12)
!19333 = !DILocation(line: 286, column: 16, scope: !19332)
!19334 = !DILocation(line: 286, column: 12, scope: !19311)
!19335 = !DILocation(line: 288, column: 5, scope: !19332)
!19336 = !DILocation(line: 289, column: 1, scope: !19270)
!19337 = distinct !DISubprogram(name: "_obstack_memory_used", scope: !1228, file: !1228, line: 292, type: !19338, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1143, retainedNodes: !433)
!19338 = !DISubroutineType(types: !19339)
!19339 = !{!52, !18904}
!19340 = !DILocalVariable(name: "h", arg: 1, scope: !19337, file: !1228, line: 292, type: !18904)
!19341 = !DILocation(line: 292, column: 39, scope: !19337)
!19342 = !DILocalVariable(name: "lp", scope: !19337, file: !1228, line: 294, type: !1152)
!19343 = !DILocation(line: 294, column: 26, scope: !19337)
!19344 = !DILocalVariable(name: "nbytes", scope: !19337, file: !1228, line: 295, type: !52)
!19345 = !DILocation(line: 295, column: 19, scope: !19337)
!19346 = !DILocation(line: 297, column: 13, scope: !19347)
!19347 = distinct !DILexicalBlock(scope: !19337, file: !1228, line: 297, column: 3)
!19348 = !DILocation(line: 297, column: 16, scope: !19347)
!19349 = !DILocation(line: 297, column: 11, scope: !19347)
!19350 = !DILocation(line: 297, column: 8, scope: !19347)
!19351 = !DILocation(line: 297, column: 23, scope: !19352)
!19352 = distinct !DILexicalBlock(scope: !19347, file: !1228, line: 297, column: 3)
!19353 = !DILocation(line: 297, column: 26, scope: !19352)
!19354 = !DILocation(line: 297, column: 3, scope: !19347)
!19355 = !DILocation(line: 299, column: 17, scope: !19356)
!19356 = distinct !DILexicalBlock(scope: !19352, file: !1228, line: 298, column: 5)
!19357 = !DILocation(line: 299, column: 21, scope: !19356)
!19358 = !DILocation(line: 299, column: 38, scope: !19356)
!19359 = !DILocation(line: 299, column: 29, scope: !19356)
!19360 = !DILocation(line: 299, column: 27, scope: !19356)
!19361 = !DILocation(line: 299, column: 14, scope: !19356)
!19362 = !DILocation(line: 300, column: 5, scope: !19356)
!19363 = !DILocation(line: 297, column: 37, scope: !19352)
!19364 = !DILocation(line: 297, column: 41, scope: !19352)
!19365 = !DILocation(line: 297, column: 35, scope: !19352)
!19366 = !DILocation(line: 297, column: 3, scope: !19352)
!19367 = distinct !{!19367, !19354, !19368}
!19368 = !DILocation(line: 300, column: 5, scope: !19347)
!19369 = !DILocation(line: 301, column: 10, scope: !19337)
!19370 = !DILocation(line: 301, column: 3, scope: !19337)
!19371 = distinct !DISubprogram(name: "rotl64", scope: !19372, file: !19372, line: 39, type: !19373, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19372 = !DIFile(filename: "./lib/bitrotate.h", directory: "/home/mohamad/clone/coreutils")
!19373 = !DISubroutineType(types: !19374)
!19374 = !{!19375, !19375, !5}
!19375 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !465, line: 55, baseType: !54)
!19376 = !DILocalVariable(name: "x", arg: 1, scope: !19371, file: !19372, line: 39, type: !19375)
!19377 = !DILocation(line: 39, column: 18, scope: !19371)
!19378 = !DILocalVariable(name: "n", arg: 2, scope: !19371, file: !19372, line: 39, type: !5)
!19379 = !DILocation(line: 39, column: 25, scope: !19371)
!19380 = !DILocation(line: 41, column: 12, scope: !19371)
!19381 = !DILocation(line: 41, column: 17, scope: !19371)
!19382 = !DILocation(line: 41, column: 14, scope: !19371)
!19383 = !DILocation(line: 41, column: 23, scope: !19371)
!19384 = !DILocation(line: 41, column: 34, scope: !19371)
!19385 = !DILocation(line: 41, column: 32, scope: !19371)
!19386 = !DILocation(line: 41, column: 25, scope: !19371)
!19387 = !DILocation(line: 41, column: 20, scope: !19371)
!19388 = !DILocation(line: 41, column: 3, scope: !19371)
!19389 = distinct !DISubprogram(name: "rotr64", scope: !19372, file: !19372, line: 48, type: !19373, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19390 = !DILocalVariable(name: "x", arg: 1, scope: !19389, file: !19372, line: 48, type: !19375)
!19391 = !DILocation(line: 48, column: 18, scope: !19389)
!19392 = !DILocalVariable(name: "n", arg: 2, scope: !19389, file: !19372, line: 48, type: !5)
!19393 = !DILocation(line: 48, column: 25, scope: !19389)
!19394 = !DILocation(line: 50, column: 12, scope: !19389)
!19395 = !DILocation(line: 50, column: 17, scope: !19389)
!19396 = !DILocation(line: 50, column: 14, scope: !19389)
!19397 = !DILocation(line: 50, column: 23, scope: !19389)
!19398 = !DILocation(line: 50, column: 34, scope: !19389)
!19399 = !DILocation(line: 50, column: 32, scope: !19389)
!19400 = !DILocation(line: 50, column: 25, scope: !19389)
!19401 = !DILocation(line: 50, column: 20, scope: !19389)
!19402 = !DILocation(line: 50, column: 3, scope: !19389)
!19403 = distinct !DISubprogram(name: "rotl32", scope: !19372, file: !19372, line: 58, type: !19404, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19404 = !DISubroutineType(types: !19405)
!19405 = !{!560, !560, !5}
!19406 = !DILocalVariable(name: "x", arg: 1, scope: !19403, file: !19372, line: 58, type: !560)
!19407 = !DILocation(line: 58, column: 18, scope: !19403)
!19408 = !DILocalVariable(name: "n", arg: 2, scope: !19403, file: !19372, line: 58, type: !5)
!19409 = !DILocation(line: 58, column: 25, scope: !19403)
!19410 = !DILocation(line: 60, column: 12, scope: !19403)
!19411 = !DILocation(line: 60, column: 17, scope: !19403)
!19412 = !DILocation(line: 60, column: 14, scope: !19403)
!19413 = !DILocation(line: 60, column: 23, scope: !19403)
!19414 = !DILocation(line: 60, column: 34, scope: !19403)
!19415 = !DILocation(line: 60, column: 32, scope: !19403)
!19416 = !DILocation(line: 60, column: 25, scope: !19403)
!19417 = !DILocation(line: 60, column: 20, scope: !19403)
!19418 = !DILocation(line: 60, column: 3, scope: !19403)
!19419 = distinct !DISubprogram(name: "rotr32", scope: !19372, file: !19372, line: 67, type: !19404, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19420 = !DILocalVariable(name: "x", arg: 1, scope: !19419, file: !19372, line: 67, type: !560)
!19421 = !DILocation(line: 67, column: 18, scope: !19419)
!19422 = !DILocalVariable(name: "n", arg: 2, scope: !19419, file: !19372, line: 67, type: !5)
!19423 = !DILocation(line: 67, column: 25, scope: !19419)
!19424 = !DILocation(line: 69, column: 12, scope: !19419)
!19425 = !DILocation(line: 69, column: 17, scope: !19419)
!19426 = !DILocation(line: 69, column: 14, scope: !19419)
!19427 = !DILocation(line: 69, column: 23, scope: !19419)
!19428 = !DILocation(line: 69, column: 34, scope: !19419)
!19429 = !DILocation(line: 69, column: 32, scope: !19419)
!19430 = !DILocation(line: 69, column: 25, scope: !19419)
!19431 = !DILocation(line: 69, column: 20, scope: !19419)
!19432 = !DILocation(line: 69, column: 3, scope: !19419)
!19433 = distinct !DISubprogram(name: "rotl_sz", scope: !19372, file: !19372, line: 76, type: !19434, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19434 = !DISubroutineType(types: !19435)
!19435 = !{!52, !52, !5}
!19436 = !DILocalVariable(name: "x", arg: 1, scope: !19433, file: !19372, line: 76, type: !52)
!19437 = !DILocation(line: 76, column: 17, scope: !19433)
!19438 = !DILocalVariable(name: "n", arg: 2, scope: !19433, file: !19372, line: 76, type: !5)
!19439 = !DILocation(line: 76, column: 24, scope: !19433)
!19440 = !DILocation(line: 78, column: 12, scope: !19433)
!19441 = !DILocation(line: 78, column: 17, scope: !19433)
!19442 = !DILocation(line: 78, column: 14, scope: !19433)
!19443 = !DILocation(line: 78, column: 23, scope: !19433)
!19444 = !DILocation(line: 78, column: 53, scope: !19433)
!19445 = !DILocation(line: 78, column: 51, scope: !19433)
!19446 = !DILocation(line: 78, column: 25, scope: !19433)
!19447 = !DILocation(line: 78, column: 20, scope: !19433)
!19448 = !DILocation(line: 78, column: 3, scope: !19433)
!19449 = distinct !DISubprogram(name: "rotr_sz", scope: !19372, file: !19372, line: 85, type: !19434, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19450 = !DILocalVariable(name: "x", arg: 1, scope: !19449, file: !19372, line: 85, type: !52)
!19451 = !DILocation(line: 85, column: 17, scope: !19449)
!19452 = !DILocalVariable(name: "n", arg: 2, scope: !19449, file: !19372, line: 85, type: !5)
!19453 = !DILocation(line: 85, column: 24, scope: !19449)
!19454 = !DILocation(line: 87, column: 12, scope: !19449)
!19455 = !DILocation(line: 87, column: 17, scope: !19449)
!19456 = !DILocation(line: 87, column: 14, scope: !19449)
!19457 = !DILocation(line: 87, column: 23, scope: !19449)
!19458 = !DILocation(line: 87, column: 53, scope: !19449)
!19459 = !DILocation(line: 87, column: 51, scope: !19449)
!19460 = !DILocation(line: 87, column: 25, scope: !19449)
!19461 = !DILocation(line: 87, column: 20, scope: !19449)
!19462 = !DILocation(line: 87, column: 3, scope: !19449)
!19463 = distinct !DISubprogram(name: "rotl16", scope: !19372, file: !19372, line: 96, type: !19464, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19464 = !DISubroutineType(types: !19465)
!19465 = !{!19466, !19466, !5}
!19466 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !465, line: 49, baseType: !34)
!19467 = !DILocalVariable(name: "x", arg: 1, scope: !19463, file: !19372, line: 96, type: !19466)
!19468 = !DILocation(line: 96, column: 18, scope: !19463)
!19469 = !DILocalVariable(name: "n", arg: 2, scope: !19463, file: !19372, line: 96, type: !5)
!19470 = !DILocation(line: 96, column: 25, scope: !19463)
!19471 = !DILocation(line: 98, column: 27, scope: !19463)
!19472 = !DILocation(line: 98, column: 12, scope: !19463)
!19473 = !DILocation(line: 98, column: 32, scope: !19463)
!19474 = !DILocation(line: 98, column: 29, scope: !19463)
!19475 = !DILocation(line: 98, column: 53, scope: !19463)
!19476 = !DILocation(line: 98, column: 38, scope: !19463)
!19477 = !DILocation(line: 98, column: 64, scope: !19463)
!19478 = !DILocation(line: 98, column: 62, scope: !19463)
!19479 = !DILocation(line: 98, column: 55, scope: !19463)
!19480 = !DILocation(line: 98, column: 35, scope: !19463)
!19481 = !DILocation(line: 99, column: 10, scope: !19463)
!19482 = !DILocation(line: 98, column: 10, scope: !19463)
!19483 = !DILocation(line: 98, column: 3, scope: !19463)
!19484 = distinct !DISubprogram(name: "rotr16", scope: !19372, file: !19372, line: 108, type: !19464, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19485 = !DILocalVariable(name: "x", arg: 1, scope: !19484, file: !19372, line: 108, type: !19466)
!19486 = !DILocation(line: 108, column: 18, scope: !19484)
!19487 = !DILocalVariable(name: "n", arg: 2, scope: !19484, file: !19372, line: 108, type: !5)
!19488 = !DILocation(line: 108, column: 25, scope: !19484)
!19489 = !DILocation(line: 110, column: 27, scope: !19484)
!19490 = !DILocation(line: 110, column: 12, scope: !19484)
!19491 = !DILocation(line: 110, column: 32, scope: !19484)
!19492 = !DILocation(line: 110, column: 29, scope: !19484)
!19493 = !DILocation(line: 110, column: 53, scope: !19484)
!19494 = !DILocation(line: 110, column: 38, scope: !19484)
!19495 = !DILocation(line: 110, column: 64, scope: !19484)
!19496 = !DILocation(line: 110, column: 62, scope: !19484)
!19497 = !DILocation(line: 110, column: 55, scope: !19484)
!19498 = !DILocation(line: 110, column: 35, scope: !19484)
!19499 = !DILocation(line: 111, column: 10, scope: !19484)
!19500 = !DILocation(line: 110, column: 10, scope: !19484)
!19501 = !DILocation(line: 110, column: 3, scope: !19484)
!19502 = distinct !DISubprogram(name: "rotl8", scope: !19372, file: !19372, line: 120, type: !19503, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19503 = !DISubroutineType(types: !19504)
!19504 = !{!19505, !19505, !5}
!19505 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !465, line: 48, baseType: !535)
!19506 = !DILocalVariable(name: "x", arg: 1, scope: !19502, file: !19372, line: 120, type: !19505)
!19507 = !DILocation(line: 120, column: 16, scope: !19502)
!19508 = !DILocalVariable(name: "n", arg: 2, scope: !19502, file: !19372, line: 120, type: !5)
!19509 = !DILocation(line: 120, column: 23, scope: !19502)
!19510 = !DILocation(line: 122, column: 27, scope: !19502)
!19511 = !DILocation(line: 122, column: 12, scope: !19502)
!19512 = !DILocation(line: 122, column: 32, scope: !19502)
!19513 = !DILocation(line: 122, column: 29, scope: !19502)
!19514 = !DILocation(line: 122, column: 53, scope: !19502)
!19515 = !DILocation(line: 122, column: 38, scope: !19502)
!19516 = !DILocation(line: 122, column: 63, scope: !19502)
!19517 = !DILocation(line: 122, column: 61, scope: !19502)
!19518 = !DILocation(line: 122, column: 55, scope: !19502)
!19519 = !DILocation(line: 122, column: 35, scope: !19502)
!19520 = !DILocation(line: 122, column: 68, scope: !19502)
!19521 = !DILocation(line: 122, column: 10, scope: !19502)
!19522 = !DILocation(line: 122, column: 3, scope: !19502)
!19523 = distinct !DISubprogram(name: "rotr8", scope: !19372, file: !19372, line: 131, type: !19503, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1648, retainedNodes: !433)
!19524 = !DILocalVariable(name: "x", arg: 1, scope: !19523, file: !19372, line: 131, type: !19505)
!19525 = !DILocation(line: 131, column: 16, scope: !19523)
!19526 = !DILocalVariable(name: "n", arg: 2, scope: !19523, file: !19372, line: 131, type: !5)
!19527 = !DILocation(line: 131, column: 23, scope: !19523)
!19528 = !DILocation(line: 133, column: 27, scope: !19523)
!19529 = !DILocation(line: 133, column: 12, scope: !19523)
!19530 = !DILocation(line: 133, column: 32, scope: !19523)
!19531 = !DILocation(line: 133, column: 29, scope: !19523)
!19532 = !DILocation(line: 133, column: 53, scope: !19523)
!19533 = !DILocation(line: 133, column: 38, scope: !19523)
!19534 = !DILocation(line: 133, column: 63, scope: !19523)
!19535 = !DILocation(line: 133, column: 61, scope: !19523)
!19536 = !DILocation(line: 133, column: 55, scope: !19523)
!19537 = !DILocation(line: 133, column: 35, scope: !19523)
!19538 = !DILocation(line: 133, column: 68, scope: !19523)
!19539 = !DILocation(line: 133, column: 10, scope: !19523)
!19540 = !DILocation(line: 133, column: 3, scope: !19523)
!19541 = distinct !DISubprogram(name: "c_isalnum", scope: !19542, file: !19542, line: 169, type: !11220, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19542 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/mohamad/clone/coreutils")
!19543 = !DILocalVariable(name: "c", arg: 1, scope: !19541, file: !19542, line: 169, type: !5)
!19544 = !DILocation(line: 169, column: 16, scope: !19541)
!19545 = !DILocation(line: 171, column: 11, scope: !19541)
!19546 = !DILocation(line: 171, column: 3, scope: !19541)
!19547 = !DILocation(line: 176, column: 7, scope: !19548)
!19548 = distinct !DILexicalBlock(scope: !19541, file: !19542, line: 172, column: 5)
!19549 = !DILocation(line: 178, column: 7, scope: !19548)
!19550 = !DILocation(line: 180, column: 1, scope: !19541)
!19551 = distinct !DISubprogram(name: "c_isalpha", scope: !19542, file: !19542, line: 183, type: !11220, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19552 = !DILocalVariable(name: "c", arg: 1, scope: !19551, file: !19542, line: 183, type: !5)
!19553 = !DILocation(line: 183, column: 16, scope: !19551)
!19554 = !DILocation(line: 185, column: 11, scope: !19551)
!19555 = !DILocation(line: 185, column: 3, scope: !19551)
!19556 = !DILocation(line: 189, column: 7, scope: !19557)
!19557 = distinct !DILexicalBlock(scope: !19551, file: !19542, line: 186, column: 5)
!19558 = !DILocation(line: 191, column: 7, scope: !19557)
!19559 = !DILocation(line: 193, column: 1, scope: !19551)
!19560 = distinct !DISubprogram(name: "c_isascii", scope: !19542, file: !19542, line: 198, type: !11220, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19561 = !DILocalVariable(name: "c", arg: 1, scope: !19560, file: !19542, line: 198, type: !5)
!19562 = !DILocation(line: 198, column: 16, scope: !19560)
!19563 = !DILocation(line: 200, column: 11, scope: !19560)
!19564 = !DILocation(line: 200, column: 3, scope: !19560)
!19565 = !DILocation(line: 208, column: 7, scope: !19566)
!19566 = distinct !DILexicalBlock(scope: !19560, file: !19542, line: 201, column: 5)
!19567 = !DILocation(line: 210, column: 7, scope: !19566)
!19568 = !DILocation(line: 212, column: 1, scope: !19560)
!19569 = distinct !DISubprogram(name: "c_isblank", scope: !19542, file: !19542, line: 215, type: !11220, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19570 = !DILocalVariable(name: "c", arg: 1, scope: !19569, file: !19542, line: 215, type: !5)
!19571 = !DILocation(line: 215, column: 16, scope: !19569)
!19572 = !DILocation(line: 217, column: 10, scope: !19569)
!19573 = !DILocation(line: 217, column: 12, scope: !19569)
!19574 = !DILocation(line: 217, column: 19, scope: !19569)
!19575 = !DILocation(line: 217, column: 22, scope: !19569)
!19576 = !DILocation(line: 217, column: 24, scope: !19569)
!19577 = !DILocation(line: 217, column: 3, scope: !19569)
!19578 = distinct !DISubprogram(name: "c_iscntrl", scope: !19542, file: !19542, line: 221, type: !11220, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19579 = !DILocalVariable(name: "c", arg: 1, scope: !19578, file: !19542, line: 221, type: !5)
!19580 = !DILocation(line: 221, column: 16, scope: !19578)
!19581 = !DILocation(line: 223, column: 11, scope: !19578)
!19582 = !DILocation(line: 223, column: 3, scope: !19578)
!19583 = !DILocation(line: 226, column: 7, scope: !19584)
!19584 = distinct !DILexicalBlock(scope: !19578, file: !19542, line: 224, column: 5)
!19585 = !DILocation(line: 228, column: 7, scope: !19584)
!19586 = !DILocation(line: 230, column: 1, scope: !19578)
!19587 = distinct !DISubprogram(name: "c_isdigit", scope: !19542, file: !19542, line: 233, type: !11220, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19588 = !DILocalVariable(name: "c", arg: 1, scope: !19587, file: !19542, line: 233, type: !5)
!19589 = !DILocation(line: 233, column: 16, scope: !19587)
!19590 = !DILocation(line: 235, column: 11, scope: !19587)
!19591 = !DILocation(line: 235, column: 3, scope: !19587)
!19592 = !DILocation(line: 238, column: 7, scope: !19593)
!19593 = distinct !DILexicalBlock(scope: !19587, file: !19542, line: 236, column: 5)
!19594 = !DILocation(line: 240, column: 7, scope: !19593)
!19595 = !DILocation(line: 242, column: 1, scope: !19587)
!19596 = distinct !DISubprogram(name: "c_isgraph", scope: !19542, file: !19542, line: 245, type: !11220, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19597 = !DILocalVariable(name: "c", arg: 1, scope: !19596, file: !19542, line: 245, type: !5)
!19598 = !DILocation(line: 245, column: 16, scope: !19596)
!19599 = !DILocation(line: 247, column: 11, scope: !19596)
!19600 = !DILocation(line: 247, column: 3, scope: !19596)
!19601 = !DILocation(line: 253, column: 7, scope: !19602)
!19602 = distinct !DILexicalBlock(scope: !19596, file: !19542, line: 248, column: 5)
!19603 = !DILocation(line: 255, column: 7, scope: !19602)
!19604 = !DILocation(line: 257, column: 1, scope: !19596)
!19605 = distinct !DISubprogram(name: "c_islower", scope: !19542, file: !19542, line: 260, type: !11220, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19606 = !DILocalVariable(name: "c", arg: 1, scope: !19605, file: !19542, line: 260, type: !5)
!19607 = !DILocation(line: 260, column: 16, scope: !19605)
!19608 = !DILocation(line: 262, column: 11, scope: !19605)
!19609 = !DILocation(line: 262, column: 3, scope: !19605)
!19610 = !DILocation(line: 265, column: 7, scope: !19611)
!19611 = distinct !DILexicalBlock(scope: !19605, file: !19542, line: 263, column: 5)
!19612 = !DILocation(line: 267, column: 7, scope: !19611)
!19613 = !DILocation(line: 269, column: 1, scope: !19605)
!19614 = distinct !DISubprogram(name: "c_isprint", scope: !19542, file: !19542, line: 272, type: !11220, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19615 = !DILocalVariable(name: "c", arg: 1, scope: !19614, file: !19542, line: 272, type: !5)
!19616 = !DILocation(line: 272, column: 16, scope: !19614)
!19617 = !DILocation(line: 274, column: 11, scope: !19614)
!19618 = !DILocation(line: 274, column: 3, scope: !19614)
!19619 = !DILocation(line: 281, column: 7, scope: !19620)
!19620 = distinct !DILexicalBlock(scope: !19614, file: !19542, line: 275, column: 5)
!19621 = !DILocation(line: 283, column: 7, scope: !19620)
!19622 = !DILocation(line: 285, column: 1, scope: !19614)
!19623 = distinct !DISubprogram(name: "c_ispunct", scope: !19542, file: !19542, line: 288, type: !11220, scopeLine: 289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19624 = !DILocalVariable(name: "c", arg: 1, scope: !19623, file: !19542, line: 288, type: !5)
!19625 = !DILocation(line: 288, column: 16, scope: !19623)
!19626 = !DILocation(line: 290, column: 11, scope: !19623)
!19627 = !DILocation(line: 290, column: 3, scope: !19623)
!19628 = !DILocation(line: 293, column: 7, scope: !19629)
!19629 = distinct !DILexicalBlock(scope: !19623, file: !19542, line: 291, column: 5)
!19630 = !DILocation(line: 295, column: 7, scope: !19629)
!19631 = !DILocation(line: 297, column: 1, scope: !19623)
!19632 = distinct !DISubprogram(name: "c_isspace", scope: !19542, file: !19542, line: 300, type: !11220, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19633 = !DILocalVariable(name: "c", arg: 1, scope: !19632, file: !19542, line: 300, type: !5)
!19634 = !DILocation(line: 300, column: 16, scope: !19632)
!19635 = !DILocation(line: 302, column: 11, scope: !19632)
!19636 = !DILocation(line: 302, column: 3, scope: !19632)
!19637 = !DILocation(line: 305, column: 7, scope: !19638)
!19638 = distinct !DILexicalBlock(scope: !19632, file: !19542, line: 303, column: 5)
!19639 = !DILocation(line: 307, column: 7, scope: !19638)
!19640 = !DILocation(line: 309, column: 1, scope: !19632)
!19641 = distinct !DISubprogram(name: "c_isupper", scope: !19542, file: !19542, line: 312, type: !11220, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19642 = !DILocalVariable(name: "c", arg: 1, scope: !19641, file: !19542, line: 312, type: !5)
!19643 = !DILocation(line: 312, column: 16, scope: !19641)
!19644 = !DILocation(line: 314, column: 11, scope: !19641)
!19645 = !DILocation(line: 314, column: 3, scope: !19641)
!19646 = !DILocation(line: 317, column: 7, scope: !19647)
!19647 = distinct !DILexicalBlock(scope: !19641, file: !19542, line: 315, column: 5)
!19648 = !DILocation(line: 319, column: 7, scope: !19647)
!19649 = !DILocation(line: 321, column: 1, scope: !19641)
!19650 = distinct !DISubprogram(name: "c_isxdigit", scope: !19542, file: !19542, line: 324, type: !11220, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19651 = !DILocalVariable(name: "c", arg: 1, scope: !19650, file: !19542, line: 324, type: !5)
!19652 = !DILocation(line: 324, column: 17, scope: !19650)
!19653 = !DILocation(line: 326, column: 11, scope: !19650)
!19654 = !DILocation(line: 326, column: 3, scope: !19650)
!19655 = !DILocation(line: 330, column: 7, scope: !19656)
!19656 = distinct !DILexicalBlock(scope: !19650, file: !19542, line: 327, column: 5)
!19657 = !DILocation(line: 332, column: 7, scope: !19656)
!19658 = !DILocation(line: 334, column: 1, scope: !19650)
!19659 = distinct !DISubprogram(name: "c_tolower", scope: !19542, file: !19542, line: 337, type: !17157, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19660 = !DILocalVariable(name: "c", arg: 1, scope: !19659, file: !19542, line: 337, type: !5)
!19661 = !DILocation(line: 337, column: 16, scope: !19659)
!19662 = !DILocation(line: 339, column: 11, scope: !19659)
!19663 = !DILocation(line: 339, column: 3, scope: !19659)
!19664 = !DILocation(line: 342, column: 14, scope: !19665)
!19665 = distinct !DILexicalBlock(scope: !19659, file: !19542, line: 340, column: 5)
!19666 = !DILocation(line: 342, column: 16, scope: !19665)
!19667 = !DILocation(line: 342, column: 22, scope: !19665)
!19668 = !DILocation(line: 342, column: 7, scope: !19665)
!19669 = !DILocation(line: 344, column: 14, scope: !19665)
!19670 = !DILocation(line: 344, column: 7, scope: !19665)
!19671 = !DILocation(line: 346, column: 1, scope: !19659)
!19672 = distinct !DISubprogram(name: "c_toupper", scope: !19542, file: !19542, line: 349, type: !17157, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1651, retainedNodes: !433)
!19673 = !DILocalVariable(name: "c", arg: 1, scope: !19672, file: !19542, line: 349, type: !5)
!19674 = !DILocation(line: 349, column: 16, scope: !19672)
!19675 = !DILocation(line: 351, column: 11, scope: !19672)
!19676 = !DILocation(line: 351, column: 3, scope: !19672)
!19677 = !DILocation(line: 354, column: 14, scope: !19678)
!19678 = distinct !DILexicalBlock(scope: !19672, file: !19542, line: 352, column: 5)
!19679 = !DILocation(line: 354, column: 16, scope: !19678)
!19680 = !DILocation(line: 354, column: 22, scope: !19678)
!19681 = !DILocation(line: 354, column: 7, scope: !19678)
!19682 = !DILocation(line: 356, column: 14, scope: !19678)
!19683 = !DILocation(line: 356, column: 7, scope: !19678)
!19684 = !DILocation(line: 358, column: 1, scope: !19672)
!19685 = distinct !DISubprogram(name: "c_strcasecmp", scope: !19686, file: !19686, line: 27, type: !6769, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1653, retainedNodes: !433)
!19686 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/mohamad/clone/coreutils")
!19687 = !DILocalVariable(name: "s1", arg: 1, scope: !19685, file: !19686, line: 27, type: !90)
!19688 = !DILocation(line: 27, column: 27, scope: !19685)
!19689 = !DILocalVariable(name: "s2", arg: 2, scope: !19685, file: !19686, line: 27, type: !90)
!19690 = !DILocation(line: 27, column: 43, scope: !19685)
!19691 = !DILocalVariable(name: "p1", scope: !19685, file: !19686, line: 29, type: !1656)
!19692 = !DILocation(line: 29, column: 33, scope: !19685)
!19693 = !DILocation(line: 29, column: 62, scope: !19685)
!19694 = !DILocalVariable(name: "p2", scope: !19685, file: !19686, line: 30, type: !1656)
!19695 = !DILocation(line: 30, column: 33, scope: !19685)
!19696 = !DILocation(line: 30, column: 62, scope: !19685)
!19697 = !DILocalVariable(name: "c1", scope: !19685, file: !19686, line: 31, type: !535)
!19698 = !DILocation(line: 31, column: 17, scope: !19685)
!19699 = !DILocalVariable(name: "c2", scope: !19685, file: !19686, line: 31, type: !535)
!19700 = !DILocation(line: 31, column: 21, scope: !19685)
!19701 = !DILocation(line: 33, column: 7, scope: !19702)
!19702 = distinct !DILexicalBlock(scope: !19685, file: !19686, line: 33, column: 7)
!19703 = !DILocation(line: 33, column: 13, scope: !19702)
!19704 = !DILocation(line: 33, column: 10, scope: !19702)
!19705 = !DILocation(line: 33, column: 7, scope: !19685)
!19706 = !DILocation(line: 34, column: 5, scope: !19702)
!19707 = !DILocation(line: 36, column: 3, scope: !19685)
!19708 = !DILocation(line: 38, column: 24, scope: !19709)
!19709 = distinct !DILexicalBlock(scope: !19685, file: !19686, line: 37, column: 5)
!19710 = !DILocation(line: 38, column: 23, scope: !19709)
!19711 = !DILocation(line: 38, column: 12, scope: !19709)
!19712 = !DILocation(line: 38, column: 10, scope: !19709)
!19713 = !DILocation(line: 39, column: 24, scope: !19709)
!19714 = !DILocation(line: 39, column: 23, scope: !19709)
!19715 = !DILocation(line: 39, column: 12, scope: !19709)
!19716 = !DILocation(line: 39, column: 10, scope: !19709)
!19717 = !DILocation(line: 41, column: 11, scope: !19718)
!19718 = distinct !DILexicalBlock(scope: !19709, file: !19686, line: 41, column: 11)
!19719 = !DILocation(line: 41, column: 14, scope: !19718)
!19720 = !DILocation(line: 41, column: 11, scope: !19709)
!19721 = !DILocation(line: 42, column: 9, scope: !19718)
!19722 = !DILocation(line: 44, column: 7, scope: !19709)
!19723 = !DILocation(line: 45, column: 7, scope: !19709)
!19724 = !DILocation(line: 46, column: 5, scope: !19709)
!19725 = !DILocation(line: 47, column: 10, scope: !19685)
!19726 = !DILocation(line: 47, column: 16, scope: !19685)
!19727 = !DILocation(line: 47, column: 13, scope: !19685)
!19728 = distinct !{!19728, !19707, !19729}
!19729 = !DILocation(line: 47, column: 18, scope: !19685)
!19730 = !DILocation(line: 50, column: 12, scope: !19731)
!19731 = distinct !DILexicalBlock(scope: !19685, file: !19686, line: 49, column: 7)
!19732 = !DILocation(line: 50, column: 17, scope: !19731)
!19733 = !DILocation(line: 50, column: 15, scope: !19731)
!19734 = !DILocation(line: 50, column: 5, scope: !19731)
!19735 = !DILocation(line: 56, column: 1, scope: !19685)
!19736 = distinct !DISubprogram(name: "close_stream", scope: !19737, file: !19737, line: 56, type: !19738, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1657, retainedNodes: !433)
!19737 = !DIFile(filename: "lib/close-stream.c", directory: "/home/mohamad/clone/coreutils")
!19738 = !DISubroutineType(types: !19739)
!19739 = !{!5, !19740}
!19740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19741, size: 64)
!19741 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !391, line: 48, baseType: !19742)
!19742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2, line: 241, size: 1728, elements: !19743)
!19743 = !{!19744, !19745, !19746, !19747, !19748, !19749, !19750, !19751, !19752, !19753, !19754, !19755, !19756, !19764, !19765, !19766, !19767, !19768, !19769, !19770, !19771, !19772, !19773, !19774, !19775, !19776, !19777, !19778, !19779}
!19744 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !19742, file: !2, line: 242, baseType: !5, size: 32)
!19745 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !19742, file: !2, line: 247, baseType: !7, size: 64, offset: 64)
!19746 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !19742, file: !2, line: 248, baseType: !7, size: 64, offset: 128)
!19747 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !19742, file: !2, line: 249, baseType: !7, size: 64, offset: 192)
!19748 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !19742, file: !2, line: 250, baseType: !7, size: 64, offset: 256)
!19749 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !19742, file: !2, line: 251, baseType: !7, size: 64, offset: 320)
!19750 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !19742, file: !2, line: 252, baseType: !7, size: 64, offset: 384)
!19751 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !19742, file: !2, line: 253, baseType: !7, size: 64, offset: 448)
!19752 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !19742, file: !2, line: 254, baseType: !7, size: 64, offset: 512)
!19753 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !19742, file: !2, line: 256, baseType: !7, size: 64, offset: 576)
!19754 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !19742, file: !2, line: 257, baseType: !7, size: 64, offset: 640)
!19755 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !19742, file: !2, line: 258, baseType: !7, size: 64, offset: 704)
!19756 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !19742, file: !2, line: 260, baseType: !19757, size: 64, offset: 768)
!19757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19758, size: 64)
!19758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2, line: 156, size: 192, elements: !19759)
!19759 = !{!19760, !19761, !19763}
!19760 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !19758, file: !2, line: 157, baseType: !19757, size: 64)
!19761 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !19758, file: !2, line: 158, baseType: !19762, size: 64, offset: 64)
!19762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19742, size: 64)
!19763 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !19758, file: !2, line: 162, baseType: !5, size: 32, offset: 128)
!19764 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !19742, file: !2, line: 262, baseType: !19762, size: 64, offset: 832)
!19765 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !19742, file: !2, line: 264, baseType: !5, size: 32, offset: 896)
!19766 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !19742, file: !2, line: 268, baseType: !5, size: 32, offset: 928)
!19767 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !19742, file: !2, line: 270, baseType: !30, size: 64, offset: 960)
!19768 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !19742, file: !2, line: 274, baseType: !34, size: 16, offset: 1024)
!19769 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !19742, file: !2, line: 275, baseType: !36, size: 8, offset: 1040)
!19770 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !19742, file: !2, line: 276, baseType: !38, size: 8, offset: 1048)
!19771 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !19742, file: !2, line: 280, baseType: !42, size: 64, offset: 1088)
!19772 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !19742, file: !2, line: 289, baseType: !45, size: 64, offset: 1152)
!19773 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !19742, file: !2, line: 297, baseType: !47, size: 64, offset: 1216)
!19774 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !19742, file: !2, line: 298, baseType: !47, size: 64, offset: 1280)
!19775 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !19742, file: !2, line: 299, baseType: !47, size: 64, offset: 1344)
!19776 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !19742, file: !2, line: 300, baseType: !47, size: 64, offset: 1408)
!19777 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !19742, file: !2, line: 302, baseType: !52, size: 64, offset: 1472)
!19778 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !19742, file: !2, line: 303, baseType: !5, size: 32, offset: 1536)
!19779 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !19742, file: !2, line: 305, baseType: !57, size: 160, offset: 1568)
!19780 = !DILocalVariable(name: "stream", arg: 1, scope: !19736, file: !19737, line: 56, type: !19740)
!19781 = !DILocation(line: 56, column: 21, scope: !19736)
!19782 = !DILocalVariable(name: "some_pending", scope: !19736, file: !19737, line: 58, type: !161)
!19783 = !DILocation(line: 58, column: 14, scope: !19736)
!19784 = !DILocation(line: 58, column: 42, scope: !19736)
!19785 = !DILocation(line: 58, column: 30, scope: !19736)
!19786 = !DILocation(line: 58, column: 50, scope: !19736)
!19787 = !DILocalVariable(name: "prev_fail", scope: !19736, file: !19737, line: 59, type: !161)
!19788 = !DILocation(line: 59, column: 14, scope: !19736)
!19789 = !DILocation(line: 59, column: 27, scope: !19736)
!19790 = !DILocation(line: 59, column: 43, scope: !19736)
!19791 = !DILocalVariable(name: "fclose_fail", scope: !19736, file: !19737, line: 60, type: !161)
!19792 = !DILocation(line: 60, column: 14, scope: !19736)
!19793 = !DILocation(line: 60, column: 37, scope: !19736)
!19794 = !DILocation(line: 60, column: 29, scope: !19736)
!19795 = !DILocation(line: 60, column: 45, scope: !19736)
!19796 = !DILocation(line: 70, column: 7, scope: !19797)
!19797 = distinct !DILexicalBlock(scope: !19736, file: !19737, line: 70, column: 7)
!19798 = !DILocation(line: 70, column: 17, scope: !19797)
!19799 = !DILocation(line: 70, column: 21, scope: !19797)
!19800 = !DILocation(line: 70, column: 33, scope: !19797)
!19801 = !DILocation(line: 70, column: 37, scope: !19797)
!19802 = !DILocation(line: 70, column: 50, scope: !19797)
!19803 = !DILocation(line: 70, column: 53, scope: !19797)
!19804 = !DILocation(line: 70, column: 59, scope: !19797)
!19805 = !DILocation(line: 70, column: 7, scope: !19736)
!19806 = !DILocation(line: 72, column: 13, scope: !19807)
!19807 = distinct !DILexicalBlock(scope: !19808, file: !19737, line: 72, column: 11)
!19808 = distinct !DILexicalBlock(scope: !19797, file: !19737, line: 71, column: 5)
!19809 = !DILocation(line: 72, column: 11, scope: !19808)
!19810 = !DILocation(line: 73, column: 9, scope: !19807)
!19811 = !DILocation(line: 73, column: 15, scope: !19807)
!19812 = !DILocation(line: 74, column: 7, scope: !19808)
!19813 = !DILocation(line: 77, column: 3, scope: !19736)
!19814 = !DILocation(line: 78, column: 1, scope: !19736)
!19815 = distinct !DISubprogram(name: "dtotimespec", scope: !19816, file: !19816, line: 30, type: !19817, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1660, retainedNodes: !433)
!19816 = !DIFile(filename: "lib/dtotimespec.c", directory: "/home/mohamad/clone/coreutils")
!19817 = !DISubroutineType(types: !19818)
!19818 = !{!19819, !480}
!19819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !506, line: 120, size: 128, elements: !19820)
!19820 = !{!19821, !19822}
!19821 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !19819, file: !506, line: 122, baseType: !509, size: 64)
!19822 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !19819, file: !506, line: 123, baseType: !511, size: 64, offset: 64)
!19823 = !DILocalVariable(name: "sec", arg: 1, scope: !19815, file: !19816, line: 30, type: !480)
!19824 = !DILocation(line: 30, column: 21, scope: !19815)
!19825 = !DILocation(line: 32, column: 34, scope: !19826)
!19826 = distinct !DILexicalBlock(scope: !19815, file: !19816, line: 32, column: 7)
!19827 = !DILocation(line: 32, column: 32, scope: !19826)
!19828 = !DILocation(line: 32, column: 7, scope: !19815)
!19829 = !DILocation(line: 33, column: 12, scope: !19826)
!19830 = !DILocation(line: 33, column: 5, scope: !19826)
!19831 = !DILocation(line: 34, column: 15, scope: !19832)
!19832 = distinct !DILexicalBlock(scope: !19826, file: !19816, line: 34, column: 12)
!19833 = !DILocation(line: 34, column: 19, scope: !19832)
!19834 = !DILocation(line: 34, column: 12, scope: !19826)
!19835 = !DILocation(line: 35, column: 12, scope: !19832)
!19836 = !DILocation(line: 35, column: 5, scope: !19832)
!19837 = !DILocalVariable(name: "s", scope: !19838, file: !19816, line: 38, type: !1645)
!19838 = distinct !DILexicalBlock(scope: !19832, file: !19816, line: 37, column: 5)
!19839 = !DILocation(line: 38, column: 14, scope: !19838)
!19840 = !DILocation(line: 38, column: 18, scope: !19838)
!19841 = !DILocalVariable(name: "frac", scope: !19838, file: !19816, line: 39, type: !480)
!19842 = !DILocation(line: 39, column: 14, scope: !19838)
!19843 = !DILocation(line: 39, column: 36, scope: !19838)
!19844 = !DILocation(line: 39, column: 42, scope: !19838)
!19845 = !DILocation(line: 39, column: 40, scope: !19838)
!19846 = !DILocation(line: 39, column: 33, scope: !19838)
!19847 = !DILocalVariable(name: "ns", scope: !19838, file: !19816, line: 40, type: !32)
!19848 = !DILocation(line: 40, column: 12, scope: !19838)
!19849 = !DILocation(line: 40, column: 17, scope: !19838)
!19850 = !DILocation(line: 41, column: 13, scope: !19838)
!19851 = !DILocation(line: 41, column: 18, scope: !19838)
!19852 = !DILocation(line: 41, column: 16, scope: !19838)
!19853 = !DILocation(line: 41, column: 10, scope: !19838)
!19854 = !DILocation(line: 42, column: 12, scope: !19838)
!19855 = !DILocation(line: 42, column: 15, scope: !19838)
!19856 = !DILocation(line: 42, column: 9, scope: !19838)
!19857 = !DILocation(line: 43, column: 10, scope: !19838)
!19858 = !DILocation(line: 45, column: 11, scope: !19859)
!19859 = distinct !DILexicalBlock(scope: !19838, file: !19816, line: 45, column: 11)
!19860 = !DILocation(line: 45, column: 14, scope: !19859)
!19861 = !DILocation(line: 45, column: 11, scope: !19838)
!19862 = !DILocation(line: 47, column: 12, scope: !19863)
!19863 = distinct !DILexicalBlock(scope: !19859, file: !19816, line: 46, column: 9)
!19864 = !DILocation(line: 48, column: 14, scope: !19863)
!19865 = !DILocation(line: 49, column: 9, scope: !19863)
!19866 = !DILocation(line: 51, column: 29, scope: !19838)
!19867 = !DILocation(line: 51, column: 32, scope: !19838)
!19868 = !DILocation(line: 51, column: 14, scope: !19838)
!19869 = !DILocation(line: 51, column: 7, scope: !19838)
!19870 = !DILocation(line: 53, column: 1, scope: !19815)
!19871 = distinct !DISubprogram(name: "fd_safer_flag", scope: !19872, file: !19872, line: 40, type: !1125, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1663, retainedNodes: !433)
!19872 = !DIFile(filename: "lib/fd-safer-flag.c", directory: "/home/mohamad/clone/coreutils")
!19873 = !DILocalVariable(name: "fd", arg: 1, scope: !19871, file: !19872, line: 40, type: !5)
!19874 = !DILocation(line: 40, column: 20, scope: !19871)
!19875 = !DILocalVariable(name: "flag", arg: 2, scope: !19871, file: !19872, line: 40, type: !5)
!19876 = !DILocation(line: 40, column: 28, scope: !19871)
!19877 = !DILocation(line: 42, column: 23, scope: !19878)
!19878 = distinct !DILexicalBlock(scope: !19871, file: !19872, line: 42, column: 7)
!19879 = !DILocation(line: 42, column: 20, scope: !19878)
!19880 = !DILocation(line: 42, column: 26, scope: !19878)
!19881 = !DILocation(line: 42, column: 29, scope: !19878)
!19882 = !DILocation(line: 42, column: 32, scope: !19878)
!19883 = !DILocation(line: 42, column: 7, scope: !19871)
!19884 = !DILocalVariable(name: "f", scope: !19885, file: !19872, line: 44, type: !5)
!19885 = distinct !DILexicalBlock(scope: !19878, file: !19872, line: 43, column: 5)
!19886 = !DILocation(line: 44, column: 11, scope: !19885)
!19887 = !DILocation(line: 44, column: 31, scope: !19885)
!19888 = !DILocation(line: 44, column: 35, scope: !19885)
!19889 = !DILocation(line: 44, column: 15, scope: !19885)
!19890 = !DILocalVariable(name: "e", scope: !19885, file: !19872, line: 45, type: !5)
!19891 = !DILocation(line: 45, column: 11, scope: !19885)
!19892 = !DILocation(line: 45, column: 15, scope: !19885)
!19893 = !DILocation(line: 46, column: 14, scope: !19885)
!19894 = !DILocation(line: 46, column: 7, scope: !19885)
!19895 = !DILocation(line: 47, column: 15, scope: !19885)
!19896 = !DILocation(line: 47, column: 7, scope: !19885)
!19897 = !DILocation(line: 47, column: 13, scope: !19885)
!19898 = !DILocation(line: 48, column: 12, scope: !19885)
!19899 = !DILocation(line: 48, column: 10, scope: !19885)
!19900 = !DILocation(line: 49, column: 5, scope: !19885)
!19901 = !DILocation(line: 51, column: 10, scope: !19871)
!19902 = !DILocation(line: 51, column: 3, scope: !19871)
!19903 = distinct !DISubprogram(name: "dup_safer_flag", scope: !19904, file: !19904, line: 34, type: !1125, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1665, retainedNodes: !433)
!19904 = !DIFile(filename: "lib/dup-safer-flag.c", directory: "/home/mohamad/clone/coreutils")
!19905 = !DILocalVariable(name: "fd", arg: 1, scope: !19903, file: !19904, line: 34, type: !5)
!19906 = !DILocation(line: 34, column: 21, scope: !19903)
!19907 = !DILocalVariable(name: "flag", arg: 2, scope: !19903, file: !19904, line: 34, type: !5)
!19908 = !DILocation(line: 34, column: 29, scope: !19903)
!19909 = !DILocation(line: 36, column: 17, scope: !19903)
!19910 = !DILocation(line: 36, column: 22, scope: !19903)
!19911 = !DILocation(line: 36, column: 27, scope: !19903)
!19912 = !DILocation(line: 36, column: 21, scope: !19903)
!19913 = !DILocation(line: 36, column: 10, scope: !19903)
!19914 = !DILocation(line: 36, column: 3, scope: !19903)
!19915 = distinct !DISubprogram(name: "fopen_safer", scope: !19916, file: !19916, line: 31, type: !19917, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1667, retainedNodes: !433)
!19916 = !DIFile(filename: "lib/fopen-safer.c", directory: "/home/mohamad/clone/coreutils")
!19917 = !DISubroutineType(types: !19918)
!19918 = !{!1670, !90, !90}
!19919 = !DILocalVariable(name: "file", arg: 1, scope: !19915, file: !19916, line: 31, type: !90)
!19920 = !DILocation(line: 31, column: 26, scope: !19915)
!19921 = !DILocalVariable(name: "mode", arg: 2, scope: !19915, file: !19916, line: 31, type: !90)
!19922 = !DILocation(line: 31, column: 44, scope: !19915)
!19923 = !DILocalVariable(name: "fp", scope: !19915, file: !19916, line: 33, type: !1670)
!19924 = !DILocation(line: 33, column: 9, scope: !19915)
!19925 = !DILocation(line: 33, column: 21, scope: !19915)
!19926 = !DILocation(line: 33, column: 27, scope: !19915)
!19927 = !DILocation(line: 33, column: 14, scope: !19915)
!19928 = !DILocation(line: 35, column: 7, scope: !19929)
!19929 = distinct !DILexicalBlock(scope: !19915, file: !19916, line: 35, column: 7)
!19930 = !DILocation(line: 35, column: 7, scope: !19915)
!19931 = !DILocalVariable(name: "fd", scope: !19932, file: !19916, line: 37, type: !5)
!19932 = distinct !DILexicalBlock(scope: !19929, file: !19916, line: 36, column: 5)
!19933 = !DILocation(line: 37, column: 11, scope: !19932)
!19934 = !DILocation(line: 37, column: 24, scope: !19932)
!19935 = !DILocation(line: 37, column: 16, scope: !19932)
!19936 = !DILocation(line: 39, column: 16, scope: !19937)
!19937 = distinct !DILexicalBlock(scope: !19932, file: !19916, line: 39, column: 11)
!19938 = !DILocation(line: 39, column: 13, scope: !19937)
!19939 = !DILocation(line: 39, column: 19, scope: !19937)
!19940 = !DILocation(line: 39, column: 22, scope: !19937)
!19941 = !DILocation(line: 39, column: 25, scope: !19937)
!19942 = !DILocation(line: 39, column: 11, scope: !19932)
!19943 = !DILocalVariable(name: "f", scope: !19944, file: !19916, line: 41, type: !5)
!19944 = distinct !DILexicalBlock(scope: !19937, file: !19916, line: 40, column: 9)
!19945 = !DILocation(line: 41, column: 15, scope: !19944)
!19946 = !DILocation(line: 41, column: 30, scope: !19944)
!19947 = !DILocation(line: 41, column: 19, scope: !19944)
!19948 = !DILocation(line: 43, column: 15, scope: !19949)
!19949 = distinct !DILexicalBlock(scope: !19944, file: !19916, line: 43, column: 15)
!19950 = !DILocation(line: 43, column: 17, scope: !19949)
!19951 = !DILocation(line: 43, column: 15, scope: !19944)
!19952 = !DILocalVariable(name: "e", scope: !19953, file: !19916, line: 45, type: !5)
!19953 = distinct !DILexicalBlock(scope: !19949, file: !19916, line: 44, column: 13)
!19954 = !DILocation(line: 45, column: 19, scope: !19953)
!19955 = !DILocation(line: 45, column: 23, scope: !19953)
!19956 = !DILocation(line: 46, column: 23, scope: !19953)
!19957 = !DILocation(line: 46, column: 15, scope: !19953)
!19958 = !DILocation(line: 47, column: 23, scope: !19953)
!19959 = !DILocation(line: 47, column: 15, scope: !19953)
!19960 = !DILocation(line: 47, column: 21, scope: !19953)
!19961 = !DILocation(line: 48, column: 15, scope: !19953)
!19962 = !DILocation(line: 51, column: 23, scope: !19963)
!19963 = distinct !DILexicalBlock(scope: !19944, file: !19916, line: 51, column: 15)
!19964 = !DILocation(line: 51, column: 15, scope: !19963)
!19965 = !DILocation(line: 51, column: 27, scope: !19963)
!19966 = !DILocation(line: 52, column: 15, scope: !19963)
!19967 = !DILocation(line: 52, column: 34, scope: !19963)
!19968 = !DILocation(line: 52, column: 37, scope: !19963)
!19969 = !DILocation(line: 52, column: 26, scope: !19963)
!19970 = !DILocation(line: 52, column: 24, scope: !19963)
!19971 = !DILocation(line: 51, column: 15, scope: !19944)
!19972 = !DILocalVariable(name: "e", scope: !19973, file: !19916, line: 54, type: !5)
!19973 = distinct !DILexicalBlock(scope: !19963, file: !19916, line: 53, column: 13)
!19974 = !DILocation(line: 54, column: 19, scope: !19973)
!19975 = !DILocation(line: 54, column: 23, scope: !19973)
!19976 = !DILocation(line: 55, column: 22, scope: !19973)
!19977 = !DILocation(line: 55, column: 15, scope: !19973)
!19978 = !DILocation(line: 56, column: 23, scope: !19973)
!19979 = !DILocation(line: 56, column: 15, scope: !19973)
!19980 = !DILocation(line: 56, column: 21, scope: !19973)
!19981 = !DILocation(line: 57, column: 15, scope: !19973)
!19982 = !DILocation(line: 59, column: 9, scope: !19944)
!19983 = !DILocation(line: 60, column: 5, scope: !19932)
!19984 = !DILocation(line: 62, column: 10, scope: !19915)
!19985 = !DILocation(line: 62, column: 3, scope: !19915)
!19986 = !DILocation(line: 63, column: 1, scope: !19915)
!19987 = distinct !DISubprogram(name: "locale_charset", scope: !19988, file: !19988, line: 826, type: !19989, scopeLine: 827, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1710, retainedNodes: !433)
!19988 = !DIFile(filename: "lib/localcharset.c", directory: "/home/mohamad/clone/coreutils")
!19989 = !DISubroutineType(types: !816)
!19990 = !DILocalVariable(name: "codeset", scope: !19987, file: !19988, line: 828, type: !90)
!19991 = !DILocation(line: 828, column: 15, scope: !19987)
!19992 = !DILocation(line: 835, column: 13, scope: !19987)
!19993 = !DILocation(line: 835, column: 11, scope: !19987)
!19994 = !DILocation(line: 893, column: 7, scope: !19995)
!19995 = distinct !DILexicalBlock(scope: !19987, file: !19988, line: 893, column: 7)
!19996 = !DILocation(line: 893, column: 15, scope: !19995)
!19997 = !DILocation(line: 893, column: 7, scope: !19987)
!19998 = !DILocation(line: 895, column: 13, scope: !19995)
!19999 = !DILocation(line: 895, column: 5, scope: !19995)
!20000 = !DILocation(line: 1051, column: 13, scope: !20001)
!20001 = distinct !DILexicalBlock(scope: !20002, file: !19988, line: 1051, column: 13)
!20002 = distinct !DILexicalBlock(scope: !20003, file: !19988, line: 1041, column: 7)
!20003 = distinct !DILexicalBlock(scope: !19987, file: !19988, line: 1000, column: 3)
!20004 = !DILocation(line: 1051, column: 24, scope: !20001)
!20005 = !DILocation(line: 1051, column: 13, scope: !20002)
!20006 = !DILocation(line: 1052, column: 19, scope: !20001)
!20007 = !DILocation(line: 1052, column: 11, scope: !20001)
!20008 = !DILocation(line: 1139, column: 10, scope: !19987)
!20009 = !DILocation(line: 1139, column: 3, scope: !19987)
!20010 = distinct !DISubprogram(name: "memcoll", scope: !20011, file: !20011, line: 66, type: !17640, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1713, retainedNodes: !433)
!20011 = !DIFile(filename: "lib/memcoll.c", directory: "/home/mohamad/clone/coreutils")
!20012 = !DILocalVariable(name: "s1", arg: 1, scope: !20010, file: !20011, line: 66, type: !7)
!20013 = !DILocation(line: 66, column: 16, scope: !20010)
!20014 = !DILocalVariable(name: "s1len", arg: 2, scope: !20010, file: !20011, line: 66, type: !52)
!20015 = !DILocation(line: 66, column: 27, scope: !20010)
!20016 = !DILocalVariable(name: "s2", arg: 3, scope: !20010, file: !20011, line: 66, type: !7)
!20017 = !DILocation(line: 66, column: 40, scope: !20010)
!20018 = !DILocalVariable(name: "s2len", arg: 4, scope: !20010, file: !20011, line: 66, type: !52)
!20019 = !DILocation(line: 66, column: 51, scope: !20010)
!20020 = !DILocalVariable(name: "diff", scope: !20010, file: !20011, line: 68, type: !5)
!20021 = !DILocation(line: 68, column: 7, scope: !20010)
!20022 = !DILocation(line: 74, column: 7, scope: !20023)
!20023 = distinct !DILexicalBlock(scope: !20010, file: !20011, line: 74, column: 7)
!20024 = !DILocation(line: 74, column: 16, scope: !20023)
!20025 = !DILocation(line: 74, column: 13, scope: !20023)
!20026 = !DILocation(line: 74, column: 22, scope: !20023)
!20027 = !DILocation(line: 74, column: 33, scope: !20023)
!20028 = !DILocation(line: 74, column: 37, scope: !20023)
!20029 = !DILocation(line: 74, column: 41, scope: !20023)
!20030 = !DILocation(line: 74, column: 25, scope: !20023)
!20031 = !DILocation(line: 74, column: 48, scope: !20023)
!20032 = !DILocation(line: 74, column: 7, scope: !20010)
!20033 = !DILocation(line: 76, column: 7, scope: !20034)
!20034 = distinct !DILexicalBlock(scope: !20023, file: !20011, line: 75, column: 5)
!20035 = !DILocation(line: 76, column: 13, scope: !20034)
!20036 = !DILocation(line: 77, column: 12, scope: !20034)
!20037 = !DILocation(line: 78, column: 5, scope: !20034)
!20038 = !DILocalVariable(name: "n1", scope: !20039, file: !20011, line: 81, type: !8)
!20039 = distinct !DILexicalBlock(scope: !20023, file: !20011, line: 80, column: 5)
!20040 = !DILocation(line: 81, column: 12, scope: !20039)
!20041 = !DILocation(line: 81, column: 17, scope: !20039)
!20042 = !DILocation(line: 81, column: 20, scope: !20039)
!20043 = !DILocalVariable(name: "n2", scope: !20039, file: !20011, line: 82, type: !8)
!20044 = !DILocation(line: 82, column: 12, scope: !20039)
!20045 = !DILocation(line: 82, column: 17, scope: !20039)
!20046 = !DILocation(line: 82, column: 20, scope: !20039)
!20047 = !DILocation(line: 84, column: 7, scope: !20039)
!20048 = !DILocation(line: 84, column: 10, scope: !20039)
!20049 = !DILocation(line: 84, column: 17, scope: !20039)
!20050 = !DILocation(line: 85, column: 7, scope: !20039)
!20051 = !DILocation(line: 85, column: 10, scope: !20039)
!20052 = !DILocation(line: 85, column: 17, scope: !20039)
!20053 = !DILocation(line: 87, column: 28, scope: !20039)
!20054 = !DILocation(line: 87, column: 32, scope: !20039)
!20055 = !DILocation(line: 87, column: 38, scope: !20039)
!20056 = !DILocation(line: 87, column: 43, scope: !20039)
!20057 = !DILocation(line: 87, column: 47, scope: !20039)
!20058 = !DILocation(line: 87, column: 53, scope: !20039)
!20059 = !DILocation(line: 87, column: 14, scope: !20039)
!20060 = !DILocation(line: 87, column: 12, scope: !20039)
!20061 = !DILocation(line: 89, column: 19, scope: !20039)
!20062 = !DILocation(line: 89, column: 7, scope: !20039)
!20063 = !DILocation(line: 89, column: 10, scope: !20039)
!20064 = !DILocation(line: 89, column: 17, scope: !20039)
!20065 = !DILocation(line: 90, column: 19, scope: !20039)
!20066 = !DILocation(line: 90, column: 7, scope: !20039)
!20067 = !DILocation(line: 90, column: 10, scope: !20039)
!20068 = !DILocation(line: 90, column: 17, scope: !20039)
!20069 = !DILocation(line: 93, column: 10, scope: !20010)
!20070 = !DILocation(line: 93, column: 3, scope: !20010)
!20071 = distinct !DISubprogram(name: "strcoll_loop", scope: !20011, file: !20011, line: 35, type: !11060, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1713, retainedNodes: !433)
!20072 = !DILocalVariable(name: "s1", arg: 1, scope: !20071, file: !20011, line: 35, type: !90)
!20073 = !DILocation(line: 35, column: 27, scope: !20071)
!20074 = !DILocalVariable(name: "s1size", arg: 2, scope: !20071, file: !20011, line: 35, type: !52)
!20075 = !DILocation(line: 35, column: 38, scope: !20071)
!20076 = !DILocalVariable(name: "s2", arg: 3, scope: !20071, file: !20011, line: 35, type: !90)
!20077 = !DILocation(line: 35, column: 58, scope: !20071)
!20078 = !DILocalVariable(name: "s2size", arg: 4, scope: !20071, file: !20011, line: 35, type: !52)
!20079 = !DILocation(line: 35, column: 69, scope: !20071)
!20080 = !DILocalVariable(name: "diff", scope: !20071, file: !20011, line: 37, type: !5)
!20081 = !DILocation(line: 37, column: 7, scope: !20071)
!20082 = !DILocation(line: 39, column: 3, scope: !20071)
!20083 = !DILocation(line: 39, column: 13, scope: !20071)
!20084 = !DILocation(line: 39, column: 19, scope: !20071)
!20085 = !DILocation(line: 39, column: 41, scope: !20071)
!20086 = !DILocation(line: 39, column: 45, scope: !20071)
!20087 = !DILocation(line: 39, column: 32, scope: !20071)
!20088 = !DILocation(line: 39, column: 30, scope: !20071)
!20089 = !DILocation(line: 39, column: 50, scope: !20071)
!20090 = !DILocation(line: 39, column: 53, scope: !20071)
!20091 = !DILocation(line: 39, column: 10, scope: !20071)
!20092 = !DILocalVariable(name: "size1", scope: !20093, file: !20011, line: 44, type: !52)
!20093 = distinct !DILexicalBlock(scope: !20071, file: !20011, line: 40, column: 5)
!20094 = !DILocation(line: 44, column: 14, scope: !20093)
!20095 = !DILocation(line: 44, column: 30, scope: !20093)
!20096 = !DILocation(line: 44, column: 22, scope: !20093)
!20097 = !DILocation(line: 44, column: 34, scope: !20093)
!20098 = !DILocalVariable(name: "size2", scope: !20093, file: !20011, line: 45, type: !52)
!20099 = !DILocation(line: 45, column: 14, scope: !20093)
!20100 = !DILocation(line: 45, column: 30, scope: !20093)
!20101 = !DILocation(line: 45, column: 22, scope: !20093)
!20102 = !DILocation(line: 45, column: 34, scope: !20093)
!20103 = !DILocation(line: 46, column: 13, scope: !20093)
!20104 = !DILocation(line: 46, column: 10, scope: !20093)
!20105 = !DILocation(line: 47, column: 13, scope: !20093)
!20106 = !DILocation(line: 47, column: 10, scope: !20093)
!20107 = !DILocation(line: 48, column: 17, scope: !20093)
!20108 = !DILocation(line: 48, column: 14, scope: !20093)
!20109 = !DILocation(line: 49, column: 17, scope: !20093)
!20110 = !DILocation(line: 49, column: 14, scope: !20093)
!20111 = !DILocation(line: 51, column: 11, scope: !20112)
!20112 = distinct !DILexicalBlock(scope: !20093, file: !20011, line: 51, column: 11)
!20113 = !DILocation(line: 51, column: 18, scope: !20112)
!20114 = !DILocation(line: 51, column: 11, scope: !20093)
!20115 = !DILocation(line: 52, column: 19, scope: !20112)
!20116 = !DILocation(line: 52, column: 26, scope: !20112)
!20117 = !DILocation(line: 52, column: 16, scope: !20112)
!20118 = !DILocation(line: 52, column: 9, scope: !20112)
!20119 = !DILocation(line: 53, column: 11, scope: !20120)
!20120 = distinct !DILexicalBlock(scope: !20093, file: !20011, line: 53, column: 11)
!20121 = !DILocation(line: 53, column: 18, scope: !20120)
!20122 = !DILocation(line: 53, column: 11, scope: !20093)
!20123 = !DILocation(line: 54, column: 9, scope: !20120)
!20124 = distinct !{!20124, !20082, !20125}
!20125 = !DILocation(line: 55, column: 5, scope: !20071)
!20126 = !DILocation(line: 57, column: 10, scope: !20071)
!20127 = !DILocation(line: 57, column: 3, scope: !20071)
!20128 = !DILocation(line: 58, column: 1, scope: !20071)
!20129 = distinct !DISubprogram(name: "memcoll0", scope: !20011, file: !20011, line: 102, type: !11060, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1713, retainedNodes: !433)
!20130 = !DILocalVariable(name: "s1", arg: 1, scope: !20129, file: !20011, line: 102, type: !90)
!20131 = !DILocation(line: 102, column: 23, scope: !20129)
!20132 = !DILocalVariable(name: "s1size", arg: 2, scope: !20129, file: !20011, line: 102, type: !52)
!20133 = !DILocation(line: 102, column: 34, scope: !20129)
!20134 = !DILocalVariable(name: "s2", arg: 3, scope: !20129, file: !20011, line: 102, type: !90)
!20135 = !DILocation(line: 102, column: 54, scope: !20129)
!20136 = !DILocalVariable(name: "s2size", arg: 4, scope: !20129, file: !20011, line: 102, type: !52)
!20137 = !DILocation(line: 102, column: 65, scope: !20129)
!20138 = !DILocation(line: 104, column: 7, scope: !20139)
!20139 = distinct !DILexicalBlock(scope: !20129, file: !20011, line: 104, column: 7)
!20140 = !DILocation(line: 104, column: 17, scope: !20139)
!20141 = !DILocation(line: 104, column: 14, scope: !20139)
!20142 = !DILocation(line: 104, column: 24, scope: !20139)
!20143 = !DILocation(line: 104, column: 35, scope: !20139)
!20144 = !DILocation(line: 104, column: 39, scope: !20139)
!20145 = !DILocation(line: 104, column: 43, scope: !20139)
!20146 = !DILocation(line: 104, column: 27, scope: !20139)
!20147 = !DILocation(line: 104, column: 51, scope: !20139)
!20148 = !DILocation(line: 104, column: 7, scope: !20129)
!20149 = !DILocation(line: 106, column: 7, scope: !20150)
!20150 = distinct !DILexicalBlock(scope: !20139, file: !20011, line: 105, column: 5)
!20151 = !DILocation(line: 106, column: 13, scope: !20150)
!20152 = !DILocation(line: 107, column: 7, scope: !20150)
!20153 = !DILocation(line: 110, column: 26, scope: !20139)
!20154 = !DILocation(line: 110, column: 30, scope: !20139)
!20155 = !DILocation(line: 110, column: 38, scope: !20139)
!20156 = !DILocation(line: 110, column: 42, scope: !20139)
!20157 = !DILocation(line: 110, column: 12, scope: !20139)
!20158 = !DILocation(line: 110, column: 5, scope: !20139)
!20159 = !DILocation(line: 111, column: 1, scope: !20129)
!20160 = distinct !DISubprogram(name: "make_timespec", scope: !20161, file: !20161, line: 54, type: !20162, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1716, retainedNodes: !433)
!20161 = !DIFile(filename: "./lib/timespec.h", directory: "/home/mohamad/clone/coreutils")
!20162 = !DISubroutineType(types: !20163)
!20163 = !{!20164, !1645, !32}
!20164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !506, line: 120, size: 128, elements: !20165)
!20165 = !{!20166, !20167}
!20166 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !20164, file: !506, line: 122, baseType: !509, size: 64)
!20167 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !20164, file: !506, line: 123, baseType: !511, size: 64, offset: 64)
!20168 = !DILocalVariable(name: "s", arg: 1, scope: !20160, file: !20161, line: 54, type: !1645)
!20169 = !DILocation(line: 54, column: 23, scope: !20160)
!20170 = !DILocalVariable(name: "ns", arg: 2, scope: !20160, file: !20161, line: 54, type: !32)
!20171 = !DILocation(line: 54, column: 35, scope: !20160)
!20172 = !DILocalVariable(name: "r", scope: !20160, file: !20161, line: 56, type: !20164)
!20173 = !DILocation(line: 56, column: 19, scope: !20160)
!20174 = !DILocation(line: 57, column: 14, scope: !20160)
!20175 = !DILocation(line: 57, column: 5, scope: !20160)
!20176 = !DILocation(line: 57, column: 12, scope: !20160)
!20177 = !DILocation(line: 58, column: 15, scope: !20160)
!20178 = !DILocation(line: 58, column: 5, scope: !20160)
!20179 = !DILocation(line: 58, column: 13, scope: !20160)
!20180 = !DILocation(line: 59, column: 3, scope: !20160)
!20181 = distinct !DISubprogram(name: "timespec_cmp", scope: !20161, file: !20161, line: 89, type: !20182, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1716, retainedNodes: !433)
!20182 = !DISubroutineType(types: !20183)
!20183 = !{!5, !20164, !20164}
!20184 = !DILocalVariable(name: "a", arg: 1, scope: !20181, file: !20161, line: 89, type: !20164)
!20185 = !DILocation(line: 89, column: 31, scope: !20181)
!20186 = !DILocalVariable(name: "b", arg: 2, scope: !20181, file: !20161, line: 89, type: !20164)
!20187 = !DILocation(line: 89, column: 50, scope: !20181)
!20188 = !DILocation(line: 91, column: 9, scope: !20189)
!20189 = distinct !DILexicalBlock(scope: !20181, file: !20161, line: 91, column: 7)
!20190 = !DILocation(line: 91, column: 20, scope: !20189)
!20191 = !DILocation(line: 91, column: 16, scope: !20189)
!20192 = !DILocation(line: 91, column: 7, scope: !20181)
!20193 = !DILocation(line: 92, column: 5, scope: !20189)
!20194 = !DILocation(line: 93, column: 9, scope: !20195)
!20195 = distinct !DILexicalBlock(scope: !20181, file: !20161, line: 93, column: 7)
!20196 = !DILocation(line: 93, column: 20, scope: !20195)
!20197 = !DILocation(line: 93, column: 16, scope: !20195)
!20198 = !DILocation(line: 93, column: 7, scope: !20181)
!20199 = !DILocation(line: 94, column: 5, scope: !20195)
!20200 = !DILocation(line: 98, column: 3, scope: !20181)
!20201 = !DILocation(line: 99, column: 3, scope: !20181)
!20202 = !DILocation(line: 101, column: 12, scope: !20181)
!20203 = !DILocation(line: 101, column: 24, scope: !20181)
!20204 = !DILocation(line: 101, column: 20, scope: !20181)
!20205 = !DILocation(line: 101, column: 10, scope: !20181)
!20206 = !DILocation(line: 101, column: 3, scope: !20181)
!20207 = !DILocation(line: 102, column: 1, scope: !20181)
!20208 = distinct !DISubprogram(name: "timespec_sign", scope: !20161, file: !20161, line: 107, type: !20209, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1716, retainedNodes: !433)
!20209 = !DISubroutineType(types: !20210)
!20210 = !{!5, !20164}
!20211 = !DILocalVariable(name: "a", arg: 1, scope: !20208, file: !20161, line: 107, type: !20164)
!20212 = !DILocation(line: 107, column: 32, scope: !20208)
!20213 = !DILocation(line: 109, column: 12, scope: !20208)
!20214 = !DILocation(line: 109, column: 19, scope: !20208)
!20215 = !DILocation(line: 109, column: 10, scope: !20208)
!20216 = !DILocation(line: 109, column: 32, scope: !20208)
!20217 = !DILocation(line: 109, column: 30, scope: !20208)
!20218 = !DILocation(line: 109, column: 39, scope: !20208)
!20219 = !DILocation(line: 109, column: 44, scope: !20208)
!20220 = !DILocation(line: 109, column: 3, scope: !20208)
!20221 = distinct !DISubprogram(name: "timespectod", scope: !20161, file: !20161, line: 121, type: !20222, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1716, retainedNodes: !433)
!20222 = !DISubroutineType(types: !20223)
!20223 = !{!480, !20164}
!20224 = !DILocalVariable(name: "a", arg: 1, scope: !20221, file: !20161, line: 121, type: !20164)
!20225 = !DILocation(line: 121, column: 30, scope: !20221)
!20226 = !DILocation(line: 123, column: 12, scope: !20221)
!20227 = !DILocation(line: 123, column: 10, scope: !20221)
!20228 = !DILocation(line: 123, column: 23, scope: !20221)
!20229 = !DILocation(line: 123, column: 21, scope: !20221)
!20230 = !DILocation(line: 123, column: 31, scope: !20221)
!20231 = !DILocation(line: 123, column: 19, scope: !20221)
!20232 = !DILocation(line: 123, column: 3, scope: !20221)
!20233 = distinct !DISubprogram(name: "dup_safer", scope: !20234, file: !20234, line: 31, type: !17157, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1719, retainedNodes: !433)
!20234 = !DIFile(filename: "lib/dup-safer.c", directory: "/home/mohamad/clone/coreutils")
!20235 = !DILocalVariable(name: "fd", arg: 1, scope: !20233, file: !20234, line: 31, type: !5)
!20236 = !DILocation(line: 31, column: 16, scope: !20233)
!20237 = !DILocation(line: 33, column: 17, scope: !20233)
!20238 = !DILocation(line: 33, column: 10, scope: !20233)
!20239 = !DILocation(line: 33, column: 3, scope: !20233)
